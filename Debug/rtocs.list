
rtocs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08060000  08060000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce48  080601a0  080601a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0806cfe8  0806cfe8  0001cfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806d6e0  0806d6e0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0806d6e0  0806d6e0  0001d6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806d6e8  0806d6e8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806d6e8  0806d6e8  0001d6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806d6ec  0806d6ec  0001d6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0806d6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057fc  2000008c  0806d77c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005888  0806d77c  00025888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032d96  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005925  00000000  00000000  00052e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  00058778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b90  00000000  00000000  0005a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d831  00000000  00000000  0005c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ac9c  00000000  00000000  000798a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f9cc  00000000  00000000  000a4545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143f11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008040  00000000  00000000  00143f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080601a0 <__do_global_dtors_aux>:
 80601a0:	b510      	push	{r4, lr}
 80601a2:	4c05      	ldr	r4, [pc, #20]	; (80601b8 <__do_global_dtors_aux+0x18>)
 80601a4:	7823      	ldrb	r3, [r4, #0]
 80601a6:	b933      	cbnz	r3, 80601b6 <__do_global_dtors_aux+0x16>
 80601a8:	4b04      	ldr	r3, [pc, #16]	; (80601bc <__do_global_dtors_aux+0x1c>)
 80601aa:	b113      	cbz	r3, 80601b2 <__do_global_dtors_aux+0x12>
 80601ac:	4804      	ldr	r0, [pc, #16]	; (80601c0 <__do_global_dtors_aux+0x20>)
 80601ae:	f3af 8000 	nop.w
 80601b2:	2301      	movs	r3, #1
 80601b4:	7023      	strb	r3, [r4, #0]
 80601b6:	bd10      	pop	{r4, pc}
 80601b8:	2000008c 	.word	0x2000008c
 80601bc:	00000000 	.word	0x00000000
 80601c0:	0806cfd0 	.word	0x0806cfd0

080601c4 <frame_dummy>:
 80601c4:	b508      	push	{r3, lr}
 80601c6:	4b03      	ldr	r3, [pc, #12]	; (80601d4 <frame_dummy+0x10>)
 80601c8:	b11b      	cbz	r3, 80601d2 <frame_dummy+0xe>
 80601ca:	4903      	ldr	r1, [pc, #12]	; (80601d8 <frame_dummy+0x14>)
 80601cc:	4803      	ldr	r0, [pc, #12]	; (80601dc <frame_dummy+0x18>)
 80601ce:	f3af 8000 	nop.w
 80601d2:	bd08      	pop	{r3, pc}
 80601d4:	00000000 	.word	0x00000000
 80601d8:	20000090 	.word	0x20000090
 80601dc:	0806cfd0 	.word	0x0806cfd0

080601e0 <strcmp>:
 80601e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80601e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80601e8:	2a01      	cmp	r2, #1
 80601ea:	bf28      	it	cs
 80601ec:	429a      	cmpcs	r2, r3
 80601ee:	d0f7      	beq.n	80601e0 <strcmp>
 80601f0:	1ad0      	subs	r0, r2, r3
 80601f2:	4770      	bx	lr

080601f4 <strlen>:
 80601f4:	4603      	mov	r3, r0
 80601f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80601fa:	2a00      	cmp	r2, #0
 80601fc:	d1fb      	bne.n	80601f6 <strlen+0x2>
 80601fe:	1a18      	subs	r0, r3, r0
 8060200:	3801      	subs	r0, #1
 8060202:	4770      	bx	lr
	...

08060210 <memchr>:
 8060210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8060214:	2a10      	cmp	r2, #16
 8060216:	db2b      	blt.n	8060270 <memchr+0x60>
 8060218:	f010 0f07 	tst.w	r0, #7
 806021c:	d008      	beq.n	8060230 <memchr+0x20>
 806021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8060222:	3a01      	subs	r2, #1
 8060224:	428b      	cmp	r3, r1
 8060226:	d02d      	beq.n	8060284 <memchr+0x74>
 8060228:	f010 0f07 	tst.w	r0, #7
 806022c:	b342      	cbz	r2, 8060280 <memchr+0x70>
 806022e:	d1f6      	bne.n	806021e <memchr+0xe>
 8060230:	b4f0      	push	{r4, r5, r6, r7}
 8060232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8060236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 806023a:	f022 0407 	bic.w	r4, r2, #7
 806023e:	f07f 0700 	mvns.w	r7, #0
 8060242:	2300      	movs	r3, #0
 8060244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8060248:	3c08      	subs	r4, #8
 806024a:	ea85 0501 	eor.w	r5, r5, r1
 806024e:	ea86 0601 	eor.w	r6, r6, r1
 8060252:	fa85 f547 	uadd8	r5, r5, r7
 8060256:	faa3 f587 	sel	r5, r3, r7
 806025a:	fa86 f647 	uadd8	r6, r6, r7
 806025e:	faa5 f687 	sel	r6, r5, r7
 8060262:	b98e      	cbnz	r6, 8060288 <memchr+0x78>
 8060264:	d1ee      	bne.n	8060244 <memchr+0x34>
 8060266:	bcf0      	pop	{r4, r5, r6, r7}
 8060268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 806026c:	f002 0207 	and.w	r2, r2, #7
 8060270:	b132      	cbz	r2, 8060280 <memchr+0x70>
 8060272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8060276:	3a01      	subs	r2, #1
 8060278:	ea83 0301 	eor.w	r3, r3, r1
 806027c:	b113      	cbz	r3, 8060284 <memchr+0x74>
 806027e:	d1f8      	bne.n	8060272 <memchr+0x62>
 8060280:	2000      	movs	r0, #0
 8060282:	4770      	bx	lr
 8060284:	3801      	subs	r0, #1
 8060286:	4770      	bx	lr
 8060288:	2d00      	cmp	r5, #0
 806028a:	bf06      	itte	eq
 806028c:	4635      	moveq	r5, r6
 806028e:	3803      	subeq	r0, #3
 8060290:	3807      	subne	r0, #7
 8060292:	f015 0f01 	tst.w	r5, #1
 8060296:	d107      	bne.n	80602a8 <memchr+0x98>
 8060298:	3001      	adds	r0, #1
 806029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 806029e:	bf02      	ittt	eq
 80602a0:	3001      	addeq	r0, #1
 80602a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80602a6:	3001      	addeq	r0, #1
 80602a8:	bcf0      	pop	{r4, r5, r6, r7}
 80602aa:	3801      	subs	r0, #1
 80602ac:	4770      	bx	lr
 80602ae:	bf00      	nop

080602b0 <__aeabi_uldivmod>:
 80602b0:	b953      	cbnz	r3, 80602c8 <__aeabi_uldivmod+0x18>
 80602b2:	b94a      	cbnz	r2, 80602c8 <__aeabi_uldivmod+0x18>
 80602b4:	2900      	cmp	r1, #0
 80602b6:	bf08      	it	eq
 80602b8:	2800      	cmpeq	r0, #0
 80602ba:	bf1c      	itt	ne
 80602bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80602c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80602c4:	f000 b96e 	b.w	80605a4 <__aeabi_idiv0>
 80602c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80602cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80602d0:	f000 f806 	bl	80602e0 <__udivmoddi4>
 80602d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80602d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80602dc:	b004      	add	sp, #16
 80602de:	4770      	bx	lr

080602e0 <__udivmoddi4>:
 80602e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80602e4:	9d08      	ldr	r5, [sp, #32]
 80602e6:	4604      	mov	r4, r0
 80602e8:	468c      	mov	ip, r1
 80602ea:	2b00      	cmp	r3, #0
 80602ec:	f040 8083 	bne.w	80603f6 <__udivmoddi4+0x116>
 80602f0:	428a      	cmp	r2, r1
 80602f2:	4617      	mov	r7, r2
 80602f4:	d947      	bls.n	8060386 <__udivmoddi4+0xa6>
 80602f6:	fab2 f282 	clz	r2, r2
 80602fa:	b142      	cbz	r2, 806030e <__udivmoddi4+0x2e>
 80602fc:	f1c2 0020 	rsb	r0, r2, #32
 8060300:	fa24 f000 	lsr.w	r0, r4, r0
 8060304:	4091      	lsls	r1, r2
 8060306:	4097      	lsls	r7, r2
 8060308:	ea40 0c01 	orr.w	ip, r0, r1
 806030c:	4094      	lsls	r4, r2
 806030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8060312:	0c23      	lsrs	r3, r4, #16
 8060314:	fbbc f6f8 	udiv	r6, ip, r8
 8060318:	fa1f fe87 	uxth.w	lr, r7
 806031c:	fb08 c116 	mls	r1, r8, r6, ip
 8060320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060324:	fb06 f10e 	mul.w	r1, r6, lr
 8060328:	4299      	cmp	r1, r3
 806032a:	d909      	bls.n	8060340 <__udivmoddi4+0x60>
 806032c:	18fb      	adds	r3, r7, r3
 806032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8060332:	f080 8119 	bcs.w	8060568 <__udivmoddi4+0x288>
 8060336:	4299      	cmp	r1, r3
 8060338:	f240 8116 	bls.w	8060568 <__udivmoddi4+0x288>
 806033c:	3e02      	subs	r6, #2
 806033e:	443b      	add	r3, r7
 8060340:	1a5b      	subs	r3, r3, r1
 8060342:	b2a4      	uxth	r4, r4
 8060344:	fbb3 f0f8 	udiv	r0, r3, r8
 8060348:	fb08 3310 	mls	r3, r8, r0, r3
 806034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8060350:	fb00 fe0e 	mul.w	lr, r0, lr
 8060354:	45a6      	cmp	lr, r4
 8060356:	d909      	bls.n	806036c <__udivmoddi4+0x8c>
 8060358:	193c      	adds	r4, r7, r4
 806035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 806035e:	f080 8105 	bcs.w	806056c <__udivmoddi4+0x28c>
 8060362:	45a6      	cmp	lr, r4
 8060364:	f240 8102 	bls.w	806056c <__udivmoddi4+0x28c>
 8060368:	3802      	subs	r0, #2
 806036a:	443c      	add	r4, r7
 806036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8060370:	eba4 040e 	sub.w	r4, r4, lr
 8060374:	2600      	movs	r6, #0
 8060376:	b11d      	cbz	r5, 8060380 <__udivmoddi4+0xa0>
 8060378:	40d4      	lsrs	r4, r2
 806037a:	2300      	movs	r3, #0
 806037c:	e9c5 4300 	strd	r4, r3, [r5]
 8060380:	4631      	mov	r1, r6
 8060382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060386:	b902      	cbnz	r2, 806038a <__udivmoddi4+0xaa>
 8060388:	deff      	udf	#255	; 0xff
 806038a:	fab2 f282 	clz	r2, r2
 806038e:	2a00      	cmp	r2, #0
 8060390:	d150      	bne.n	8060434 <__udivmoddi4+0x154>
 8060392:	1bcb      	subs	r3, r1, r7
 8060394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060398:	fa1f f887 	uxth.w	r8, r7
 806039c:	2601      	movs	r6, #1
 806039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80603a2:	0c21      	lsrs	r1, r4, #16
 80603a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80603a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80603ac:	fb08 f30c 	mul.w	r3, r8, ip
 80603b0:	428b      	cmp	r3, r1
 80603b2:	d907      	bls.n	80603c4 <__udivmoddi4+0xe4>
 80603b4:	1879      	adds	r1, r7, r1
 80603b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80603ba:	d202      	bcs.n	80603c2 <__udivmoddi4+0xe2>
 80603bc:	428b      	cmp	r3, r1
 80603be:	f200 80e9 	bhi.w	8060594 <__udivmoddi4+0x2b4>
 80603c2:	4684      	mov	ip, r0
 80603c4:	1ac9      	subs	r1, r1, r3
 80603c6:	b2a3      	uxth	r3, r4
 80603c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80603cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80603d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80603d4:	fb08 f800 	mul.w	r8, r8, r0
 80603d8:	45a0      	cmp	r8, r4
 80603da:	d907      	bls.n	80603ec <__udivmoddi4+0x10c>
 80603dc:	193c      	adds	r4, r7, r4
 80603de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80603e2:	d202      	bcs.n	80603ea <__udivmoddi4+0x10a>
 80603e4:	45a0      	cmp	r8, r4
 80603e6:	f200 80d9 	bhi.w	806059c <__udivmoddi4+0x2bc>
 80603ea:	4618      	mov	r0, r3
 80603ec:	eba4 0408 	sub.w	r4, r4, r8
 80603f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80603f4:	e7bf      	b.n	8060376 <__udivmoddi4+0x96>
 80603f6:	428b      	cmp	r3, r1
 80603f8:	d909      	bls.n	806040e <__udivmoddi4+0x12e>
 80603fa:	2d00      	cmp	r5, #0
 80603fc:	f000 80b1 	beq.w	8060562 <__udivmoddi4+0x282>
 8060400:	2600      	movs	r6, #0
 8060402:	e9c5 0100 	strd	r0, r1, [r5]
 8060406:	4630      	mov	r0, r6
 8060408:	4631      	mov	r1, r6
 806040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806040e:	fab3 f683 	clz	r6, r3
 8060412:	2e00      	cmp	r6, #0
 8060414:	d14a      	bne.n	80604ac <__udivmoddi4+0x1cc>
 8060416:	428b      	cmp	r3, r1
 8060418:	d302      	bcc.n	8060420 <__udivmoddi4+0x140>
 806041a:	4282      	cmp	r2, r0
 806041c:	f200 80b8 	bhi.w	8060590 <__udivmoddi4+0x2b0>
 8060420:	1a84      	subs	r4, r0, r2
 8060422:	eb61 0103 	sbc.w	r1, r1, r3
 8060426:	2001      	movs	r0, #1
 8060428:	468c      	mov	ip, r1
 806042a:	2d00      	cmp	r5, #0
 806042c:	d0a8      	beq.n	8060380 <__udivmoddi4+0xa0>
 806042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8060432:	e7a5      	b.n	8060380 <__udivmoddi4+0xa0>
 8060434:	f1c2 0320 	rsb	r3, r2, #32
 8060438:	fa20 f603 	lsr.w	r6, r0, r3
 806043c:	4097      	lsls	r7, r2
 806043e:	fa01 f002 	lsl.w	r0, r1, r2
 8060442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060446:	40d9      	lsrs	r1, r3
 8060448:	4330      	orrs	r0, r6
 806044a:	0c03      	lsrs	r3, r0, #16
 806044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8060450:	fa1f f887 	uxth.w	r8, r7
 8060454:	fb0e 1116 	mls	r1, lr, r6, r1
 8060458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 806045c:	fb06 f108 	mul.w	r1, r6, r8
 8060460:	4299      	cmp	r1, r3
 8060462:	fa04 f402 	lsl.w	r4, r4, r2
 8060466:	d909      	bls.n	806047c <__udivmoddi4+0x19c>
 8060468:	18fb      	adds	r3, r7, r3
 806046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 806046e:	f080 808d 	bcs.w	806058c <__udivmoddi4+0x2ac>
 8060472:	4299      	cmp	r1, r3
 8060474:	f240 808a 	bls.w	806058c <__udivmoddi4+0x2ac>
 8060478:	3e02      	subs	r6, #2
 806047a:	443b      	add	r3, r7
 806047c:	1a5b      	subs	r3, r3, r1
 806047e:	b281      	uxth	r1, r0
 8060480:	fbb3 f0fe 	udiv	r0, r3, lr
 8060484:	fb0e 3310 	mls	r3, lr, r0, r3
 8060488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 806048c:	fb00 f308 	mul.w	r3, r0, r8
 8060490:	428b      	cmp	r3, r1
 8060492:	d907      	bls.n	80604a4 <__udivmoddi4+0x1c4>
 8060494:	1879      	adds	r1, r7, r1
 8060496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 806049a:	d273      	bcs.n	8060584 <__udivmoddi4+0x2a4>
 806049c:	428b      	cmp	r3, r1
 806049e:	d971      	bls.n	8060584 <__udivmoddi4+0x2a4>
 80604a0:	3802      	subs	r0, #2
 80604a2:	4439      	add	r1, r7
 80604a4:	1acb      	subs	r3, r1, r3
 80604a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80604aa:	e778      	b.n	806039e <__udivmoddi4+0xbe>
 80604ac:	f1c6 0c20 	rsb	ip, r6, #32
 80604b0:	fa03 f406 	lsl.w	r4, r3, r6
 80604b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80604b8:	431c      	orrs	r4, r3
 80604ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80604be:	fa01 f306 	lsl.w	r3, r1, r6
 80604c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80604c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80604ca:	431f      	orrs	r7, r3
 80604cc:	0c3b      	lsrs	r3, r7, #16
 80604ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80604d2:	fa1f f884 	uxth.w	r8, r4
 80604d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80604da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80604de:	fb09 fa08 	mul.w	sl, r9, r8
 80604e2:	458a      	cmp	sl, r1
 80604e4:	fa02 f206 	lsl.w	r2, r2, r6
 80604e8:	fa00 f306 	lsl.w	r3, r0, r6
 80604ec:	d908      	bls.n	8060500 <__udivmoddi4+0x220>
 80604ee:	1861      	adds	r1, r4, r1
 80604f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80604f4:	d248      	bcs.n	8060588 <__udivmoddi4+0x2a8>
 80604f6:	458a      	cmp	sl, r1
 80604f8:	d946      	bls.n	8060588 <__udivmoddi4+0x2a8>
 80604fa:	f1a9 0902 	sub.w	r9, r9, #2
 80604fe:	4421      	add	r1, r4
 8060500:	eba1 010a 	sub.w	r1, r1, sl
 8060504:	b2bf      	uxth	r7, r7
 8060506:	fbb1 f0fe 	udiv	r0, r1, lr
 806050a:	fb0e 1110 	mls	r1, lr, r0, r1
 806050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8060512:	fb00 f808 	mul.w	r8, r0, r8
 8060516:	45b8      	cmp	r8, r7
 8060518:	d907      	bls.n	806052a <__udivmoddi4+0x24a>
 806051a:	19e7      	adds	r7, r4, r7
 806051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8060520:	d22e      	bcs.n	8060580 <__udivmoddi4+0x2a0>
 8060522:	45b8      	cmp	r8, r7
 8060524:	d92c      	bls.n	8060580 <__udivmoddi4+0x2a0>
 8060526:	3802      	subs	r0, #2
 8060528:	4427      	add	r7, r4
 806052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 806052e:	eba7 0708 	sub.w	r7, r7, r8
 8060532:	fba0 8902 	umull	r8, r9, r0, r2
 8060536:	454f      	cmp	r7, r9
 8060538:	46c6      	mov	lr, r8
 806053a:	4649      	mov	r1, r9
 806053c:	d31a      	bcc.n	8060574 <__udivmoddi4+0x294>
 806053e:	d017      	beq.n	8060570 <__udivmoddi4+0x290>
 8060540:	b15d      	cbz	r5, 806055a <__udivmoddi4+0x27a>
 8060542:	ebb3 020e 	subs.w	r2, r3, lr
 8060546:	eb67 0701 	sbc.w	r7, r7, r1
 806054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 806054e:	40f2      	lsrs	r2, r6
 8060550:	ea4c 0202 	orr.w	r2, ip, r2
 8060554:	40f7      	lsrs	r7, r6
 8060556:	e9c5 2700 	strd	r2, r7, [r5]
 806055a:	2600      	movs	r6, #0
 806055c:	4631      	mov	r1, r6
 806055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060562:	462e      	mov	r6, r5
 8060564:	4628      	mov	r0, r5
 8060566:	e70b      	b.n	8060380 <__udivmoddi4+0xa0>
 8060568:	4606      	mov	r6, r0
 806056a:	e6e9      	b.n	8060340 <__udivmoddi4+0x60>
 806056c:	4618      	mov	r0, r3
 806056e:	e6fd      	b.n	806036c <__udivmoddi4+0x8c>
 8060570:	4543      	cmp	r3, r8
 8060572:	d2e5      	bcs.n	8060540 <__udivmoddi4+0x260>
 8060574:	ebb8 0e02 	subs.w	lr, r8, r2
 8060578:	eb69 0104 	sbc.w	r1, r9, r4
 806057c:	3801      	subs	r0, #1
 806057e:	e7df      	b.n	8060540 <__udivmoddi4+0x260>
 8060580:	4608      	mov	r0, r1
 8060582:	e7d2      	b.n	806052a <__udivmoddi4+0x24a>
 8060584:	4660      	mov	r0, ip
 8060586:	e78d      	b.n	80604a4 <__udivmoddi4+0x1c4>
 8060588:	4681      	mov	r9, r0
 806058a:	e7b9      	b.n	8060500 <__udivmoddi4+0x220>
 806058c:	4666      	mov	r6, ip
 806058e:	e775      	b.n	806047c <__udivmoddi4+0x19c>
 8060590:	4630      	mov	r0, r6
 8060592:	e74a      	b.n	806042a <__udivmoddi4+0x14a>
 8060594:	f1ac 0c02 	sub.w	ip, ip, #2
 8060598:	4439      	add	r1, r7
 806059a:	e713      	b.n	80603c4 <__udivmoddi4+0xe4>
 806059c:	3802      	subs	r0, #2
 806059e:	443c      	add	r4, r7
 80605a0:	e724      	b.n	80603ec <__udivmoddi4+0x10c>
 80605a2:	bf00      	nop

080605a4 <__aeabi_idiv0>:
 80605a4:	4770      	bx	lr
 80605a6:	bf00      	nop

080605a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80605a8:	b580      	push	{r7, lr}
 80605aa:	b082      	sub	sp, #8
 80605ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// initialize sd card now to check whether it is working
	// second arg is basically prefic of path to file
	FRESULT fres = f_mount(&FatFs, "", 1);
 80605ae:	2201      	movs	r2, #1
 80605b0:	495c      	ldr	r1, [pc, #368]	; (8060724 <MX_FREERTOS_Init+0x17c>)
 80605b2:	485d      	ldr	r0, [pc, #372]	; (8060728 <MX_FREERTOS_Init+0x180>)
 80605b4:	f007 f95c 	bl	8067870 <f_mount>
 80605b8:	4603      	mov	r3, r0
 80605ba:	71fb      	strb	r3, [r7, #7]
	if (fres != FR_OK) {
 80605bc:	79fb      	ldrb	r3, [r7, #7]
 80605be:	2b00      	cmp	r3, #0
 80605c0:	d013      	beq.n	80605ea <MX_FREERTOS_Init+0x42>
		myprintf("f_mount error (%i)\r\n", fres);
 80605c2:	79fb      	ldrb	r3, [r7, #7]
 80605c4:	461a      	mov	r2, r3
 80605c6:	4959      	ldr	r1, [pc, #356]	; (806072c <MX_FREERTOS_Init+0x184>)
 80605c8:	4859      	ldr	r0, [pc, #356]	; (8060730 <MX_FREERTOS_Init+0x188>)
 80605ca:	f00c f94d 	bl	806c868 <siprintf>
 80605ce:	4858      	ldr	r0, [pc, #352]	; (8060730 <MX_FREERTOS_Init+0x188>)
 80605d0:	f7ff fe10 	bl	80601f4 <strlen>
 80605d4:	4603      	mov	r3, r0
 80605d6:	b29a      	uxth	r2, r3
 80605d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80605dc:	4954      	ldr	r1, [pc, #336]	; (8060730 <MX_FREERTOS_Init+0x188>)
 80605de:	4855      	ldr	r0, [pc, #340]	; (8060734 <MX_FREERTOS_Init+0x18c>)
 80605e0:	f003 fd94 	bl	806410c <HAL_UART_Transmit>
		Error_Handler();
 80605e4:	f000 feb8 	bl	8061358 <Error_Handler>
 80605e8:	e00e      	b.n	8060608 <MX_FREERTOS_Init+0x60>
	} else {
		myprintf("SD card mounted\n");
 80605ea:	4953      	ldr	r1, [pc, #332]	; (8060738 <MX_FREERTOS_Init+0x190>)
 80605ec:	4850      	ldr	r0, [pc, #320]	; (8060730 <MX_FREERTOS_Init+0x188>)
 80605ee:	f00c f93b 	bl	806c868 <siprintf>
 80605f2:	484f      	ldr	r0, [pc, #316]	; (8060730 <MX_FREERTOS_Init+0x188>)
 80605f4:	f7ff fdfe 	bl	80601f4 <strlen>
 80605f8:	4603      	mov	r3, r0
 80605fa:	b29a      	uxth	r2, r3
 80605fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060600:	494b      	ldr	r1, [pc, #300]	; (8060730 <MX_FREERTOS_Init+0x188>)
 8060602:	484c      	ldr	r0, [pc, #304]	; (8060734 <MX_FREERTOS_Init+0x18c>)
 8060604:	f003 fd82 	bl	806410c <HAL_UART_Transmit>
	}
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  telemetryFileMutexHandle = osMutexNew(&telemetryFileMutex_attributes);
 8060608:	484c      	ldr	r0, [pc, #304]	; (806073c <MX_FREERTOS_Init+0x194>)
 806060a:	f008 fa73 	bl	8068af4 <osMutexNew>
 806060e:	4603      	mov	r3, r0
 8060610:	4a4b      	ldr	r2, [pc, #300]	; (8060740 <MX_FREERTOS_Init+0x198>)
 8060612:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txThreadSem */
  txThreadSemHandle = osSemaphoreNew(1, 1, &txThreadSem_attributes);
 8060614:	4a4b      	ldr	r2, [pc, #300]	; (8060744 <MX_FREERTOS_Init+0x19c>)
 8060616:	2101      	movs	r1, #1
 8060618:	2001      	movs	r0, #1
 806061a:	f008 fb79 	bl	8068d10 <osSemaphoreNew>
 806061e:	4603      	mov	r3, r0
 8060620:	4a49      	ldr	r2, [pc, #292]	; (8060748 <MX_FREERTOS_Init+0x1a0>)
 8060622:	6013      	str	r3, [r2, #0]

  /* creation of rxThreadSem */
  rxThreadSemHandle = osSemaphoreNew(1, 1, &rxThreadSem_attributes);
 8060624:	4a49      	ldr	r2, [pc, #292]	; (806074c <MX_FREERTOS_Init+0x1a4>)
 8060626:	2101      	movs	r1, #1
 8060628:	2001      	movs	r0, #1
 806062a:	f008 fb71 	bl	8068d10 <osSemaphoreNew>
 806062e:	4603      	mov	r3, r0
 8060630:	4a47      	ldr	r2, [pc, #284]	; (8060750 <MX_FREERTOS_Init+0x1a8>)
 8060632:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreAcquire(txThreadSemHandle, 0);
 8060634:	4b44      	ldr	r3, [pc, #272]	; (8060748 <MX_FREERTOS_Init+0x1a0>)
 8060636:	681b      	ldr	r3, [r3, #0]
 8060638:	2100      	movs	r1, #0
 806063a:	4618      	mov	r0, r3
 806063c:	f008 fbf2 	bl	8068e24 <osSemaphoreAcquire>
  osSemaphoreAcquire(rxThreadSemHandle, 0);
 8060640:	4b43      	ldr	r3, [pc, #268]	; (8060750 <MX_FREERTOS_Init+0x1a8>)
 8060642:	681b      	ldr	r3, [r3, #0]
 8060644:	2100      	movs	r1, #0
 8060646:	4618      	mov	r0, r3
 8060648:	f008 fbec 	bl	8068e24 <osSemaphoreAcquire>
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of accTimer */
  accTimerHandle = osTimerNew(accTimerCallback, osTimerPeriodic, NULL, &accTimer_attributes);
 806064c:	4b41      	ldr	r3, [pc, #260]	; (8060754 <MX_FREERTOS_Init+0x1ac>)
 806064e:	2200      	movs	r2, #0
 8060650:	2101      	movs	r1, #1
 8060652:	4841      	ldr	r0, [pc, #260]	; (8060758 <MX_FREERTOS_Init+0x1b0>)
 8060654:	f008 f9a4 	bl	80689a0 <osTimerNew>
 8060658:	4603      	mov	r3, r0
 806065a:	4a40      	ldr	r2, [pc, #256]	; (806075c <MX_FREERTOS_Init+0x1b4>)
 806065c:	6013      	str	r3, [r2, #0]

  /* creation of temperatureTimer */
  temperatureTimerHandle = osTimerNew(temperatureTimerCallback, osTimerPeriodic, NULL, &temperatureTimer_attributes);
 806065e:	4b40      	ldr	r3, [pc, #256]	; (8060760 <MX_FREERTOS_Init+0x1b8>)
 8060660:	2200      	movs	r2, #0
 8060662:	2101      	movs	r1, #1
 8060664:	483f      	ldr	r0, [pc, #252]	; (8060764 <MX_FREERTOS_Init+0x1bc>)
 8060666:	f008 f99b 	bl	80689a0 <osTimerNew>
 806066a:	4603      	mov	r3, r0
 806066c:	4a3e      	ldr	r2, [pc, #248]	; (8060768 <MX_FREERTOS_Init+0x1c0>)
 806066e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  if (accTimerHandle != NULL)  {
 8060670:	4b3a      	ldr	r3, [pc, #232]	; (806075c <MX_FREERTOS_Init+0x1b4>)
 8060672:	681b      	ldr	r3, [r3, #0]
 8060674:	2b00      	cmp	r3, #0
 8060676:	d010      	beq.n	806069a <MX_FREERTOS_Init+0xf2>
      status = osTimerStart(accTimerHandle, 10000U);       // start timer
 8060678:	4b38      	ldr	r3, [pc, #224]	; (806075c <MX_FREERTOS_Init+0x1b4>)
 806067a:	681b      	ldr	r3, [r3, #0]
 806067c:	f242 7110 	movw	r1, #10000	; 0x2710
 8060680:	4618      	mov	r0, r3
 8060682:	f008 fa09 	bl	8068a98 <osTimerStart>
 8060686:	4603      	mov	r3, r0
 8060688:	4a38      	ldr	r2, [pc, #224]	; (806076c <MX_FREERTOS_Init+0x1c4>)
 806068a:	6013      	str	r3, [r2, #0]
      if (status != osOK) {
 806068c:	4b37      	ldr	r3, [pc, #220]	; (806076c <MX_FREERTOS_Init+0x1c4>)
 806068e:	681b      	ldr	r3, [r3, #0]
 8060690:	2b00      	cmp	r3, #0
 8060692:	d004      	beq.n	806069e <MX_FREERTOS_Init+0xf6>
        // Timer could not be started
    	Error_Handler();
 8060694:	f000 fe60 	bl	8061358 <Error_Handler>
 8060698:	e001      	b.n	806069e <MX_FREERTOS_Init+0xf6>
      }
  } else {
	  Error_Handler();
 806069a:	f000 fe5d 	bl	8061358 <Error_Handler>
  }

  if (temperatureTimerHandle != NULL)  {
 806069e:	4b32      	ldr	r3, [pc, #200]	; (8060768 <MX_FREERTOS_Init+0x1c0>)
 80606a0:	681b      	ldr	r3, [r3, #0]
 80606a2:	2b00      	cmp	r3, #0
 80606a4:	d010      	beq.n	80606c8 <MX_FREERTOS_Init+0x120>
        status = osTimerStart(temperatureTimerHandle, 10000U);       // start timer
 80606a6:	4b30      	ldr	r3, [pc, #192]	; (8060768 <MX_FREERTOS_Init+0x1c0>)
 80606a8:	681b      	ldr	r3, [r3, #0]
 80606aa:	f242 7110 	movw	r1, #10000	; 0x2710
 80606ae:	4618      	mov	r0, r3
 80606b0:	f008 f9f2 	bl	8068a98 <osTimerStart>
 80606b4:	4603      	mov	r3, r0
 80606b6:	4a2d      	ldr	r2, [pc, #180]	; (806076c <MX_FREERTOS_Init+0x1c4>)
 80606b8:	6013      	str	r3, [r2, #0]
        if (status != osOK) {
 80606ba:	4b2c      	ldr	r3, [pc, #176]	; (806076c <MX_FREERTOS_Init+0x1c4>)
 80606bc:	681b      	ldr	r3, [r3, #0]
 80606be:	2b00      	cmp	r3, #0
 80606c0:	d004      	beq.n	80606cc <MX_FREERTOS_Init+0x124>
          // Timer could not be started
      	Error_Handler();
 80606c2:	f000 fe49 	bl	8061358 <Error_Handler>
 80606c6:	e001      	b.n	80606cc <MX_FREERTOS_Init+0x124>
        }
    } else {
  	  Error_Handler();
 80606c8:	f000 fe46 	bl	8061358 <Error_Handler>
    }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  telemetryQueueHandle = osMessageQueueNew(16, sizeof(TelemetryBase), &telemetryQueue_attributes);
 80606cc:	4a28      	ldr	r2, [pc, #160]	; (8060770 <MX_FREERTOS_Init+0x1c8>)
 80606ce:	2138      	movs	r1, #56	; 0x38
 80606d0:	2010      	movs	r0, #16
 80606d2:	f008 fc61 	bl	8068f98 <osMessageQueueNew>
 80606d6:	4603      	mov	r3, r0
 80606d8:	4a26      	ldr	r2, [pc, #152]	; (8060774 <MX_FREERTOS_Init+0x1cc>)
 80606da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80606dc:	4a26      	ldr	r2, [pc, #152]	; (8060778 <MX_FREERTOS_Init+0x1d0>)
 80606de:	2100      	movs	r1, #0
 80606e0:	4826      	ldr	r0, [pc, #152]	; (806077c <MX_FREERTOS_Init+0x1d4>)
 80606e2:	f008 f89b 	bl	806881c <osThreadNew>
 80606e6:	4603      	mov	r3, r0
 80606e8:	4a25      	ldr	r2, [pc, #148]	; (8060780 <MX_FREERTOS_Init+0x1d8>)
 80606ea:	6013      	str	r3, [r2, #0]

  /* creation of rxDataThread */
  rxDataThreadHandle = osThreadNew(startRxDataThread, NULL, &rxDataThread_attributes);
 80606ec:	4a25      	ldr	r2, [pc, #148]	; (8060784 <MX_FREERTOS_Init+0x1dc>)
 80606ee:	2100      	movs	r1, #0
 80606f0:	4825      	ldr	r0, [pc, #148]	; (8060788 <MX_FREERTOS_Init+0x1e0>)
 80606f2:	f008 f893 	bl	806881c <osThreadNew>
 80606f6:	4603      	mov	r3, r0
 80606f8:	4a24      	ldr	r2, [pc, #144]	; (806078c <MX_FREERTOS_Init+0x1e4>)
 80606fa:	6013      	str	r3, [r2, #0]

  /* creation of txDataThread */
  txDataThreadHandle = osThreadNew(startTxDataThread, NULL, &txDataThread_attributes);
 80606fc:	4a24      	ldr	r2, [pc, #144]	; (8060790 <MX_FREERTOS_Init+0x1e8>)
 80606fe:	2100      	movs	r1, #0
 8060700:	4824      	ldr	r0, [pc, #144]	; (8060794 <MX_FREERTOS_Init+0x1ec>)
 8060702:	f008 f88b 	bl	806881c <osThreadNew>
 8060706:	4603      	mov	r3, r0
 8060708:	4a23      	ldr	r2, [pc, #140]	; (8060798 <MX_FREERTOS_Init+0x1f0>)
 806070a:	6013      	str	r3, [r2, #0]

  /* creation of telemetryThread */
  telemetryThreadHandle = osThreadNew(startTelemetryThread, NULL, &telemetryThread_attributes);
 806070c:	4a23      	ldr	r2, [pc, #140]	; (806079c <MX_FREERTOS_Init+0x1f4>)
 806070e:	2100      	movs	r1, #0
 8060710:	4823      	ldr	r0, [pc, #140]	; (80607a0 <MX_FREERTOS_Init+0x1f8>)
 8060712:	f008 f883 	bl	806881c <osThreadNew>
 8060716:	4603      	mov	r3, r0
 8060718:	4a22      	ldr	r2, [pc, #136]	; (80607a4 <MX_FREERTOS_Init+0x1fc>)
 806071a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 806071c:	bf00      	nop
 806071e:	3708      	adds	r7, #8
 8060720:	46bd      	mov	sp, r7
 8060722:	bd80      	pop	{r7, pc}
 8060724:	0806d080 	.word	0x0806d080
 8060728:	20004bcc 	.word	0x20004bcc
 806072c:	0806d084 	.word	0x0806d084
 8060730:	200000a8 	.word	0x200000a8
 8060734:	2000537c 	.word	0x2000537c
 8060738:	0806d09c 	.word	0x0806d09c
 806073c:	0806d5a4 	.word	0x0806d5a4
 8060740:	20004e04 	.word	0x20004e04
 8060744:	0806d56c 	.word	0x0806d56c
 8060748:	2000504c 	.word	0x2000504c
 806074c:	0806d57c 	.word	0x0806d57c
 8060750:	20004e00 	.word	0x20004e00
 8060754:	0806d54c 	.word	0x0806d54c
 8060758:	08060ce9 	.word	0x08060ce9
 806075c:	20004e08 	.word	0x20004e08
 8060760:	0806d55c 	.word	0x0806d55c
 8060764:	08060d39 	.word	0x08060d39
 8060768:	20004e18 	.word	0x20004e18
 806076c:	20005284 	.word	0x20005284
 8060770:	0806d58c 	.word	0x0806d58c
 8060774:	20004e14 	.word	0x20004e14
 8060778:	0806d4bc 	.word	0x0806d4bc
 806077c:	080607a9 	.word	0x080607a9
 8060780:	20004bbc 	.word	0x20004bbc
 8060784:	0806d4e0 	.word	0x0806d4e0
 8060788:	080607b9 	.word	0x080607b9
 806078c:	20004e0c 	.word	0x20004e0c
 8060790:	0806d504 	.word	0x0806d504
 8060794:	08060981 	.word	0x08060981
 8060798:	20005050 	.word	0x20005050
 806079c:	0806d528 	.word	0x0806d528
 80607a0:	08060b09 	.word	0x08060b09
 80607a4:	20004e10 	.word	0x20004e10

080607a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80607a8:	b580      	push	{r7, lr}
 80607aa:	b082      	sub	sp, #8
 80607ac:	af00      	add	r7, sp, #0
 80607ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80607b0:	2001      	movs	r0, #1
 80607b2:	f008 f8c5 	bl	8068940 <osDelay>
 80607b6:	e7fb      	b.n	80607b0 <StartDefaultTask+0x8>

080607b8 <startRxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRxDataThread */
void startRxDataThread(void *argument)
{
 80607b8:	b580      	push	{r7, lr}
 80607ba:	b08a      	sub	sp, #40	; 0x28
 80607bc:	af00      	add	r7, sp, #0
 80607be:	6078      	str	r0, [r7, #4]
	 // thread is with the highest priority, as after the signal about new firmware
	 // has come, we are not interested in data anymore
	FRESULT wr;
	UINT bytesWrote;
	int cmpRes;
	int safeToBoot = 0;
 80607c0:	2300      	movs	r3, #0
 80607c2:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t firmwareChunk[16];
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 80607c4:	4b60      	ldr	r3, [pc, #384]	; (8060948 <startRxDataThread+0x190>)
 80607c6:	681b      	ldr	r3, [r3, #0]
 80607c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80607cc:	4618      	mov	r0, r3
 80607ce:	f008 fb29 	bl	8068e24 <osSemaphoreAcquire>

	  myprintf("Firmware to be uploaded...\n");
 80607d2:	495e      	ldr	r1, [pc, #376]	; (806094c <startRxDataThread+0x194>)
 80607d4:	485e      	ldr	r0, [pc, #376]	; (8060950 <startRxDataThread+0x198>)
 80607d6:	f00c f847 	bl	806c868 <siprintf>
 80607da:	485d      	ldr	r0, [pc, #372]	; (8060950 <startRxDataThread+0x198>)
 80607dc:	f7ff fd0a 	bl	80601f4 <strlen>
 80607e0:	4603      	mov	r3, r0
 80607e2:	b29a      	uxth	r2, r3
 80607e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80607e8:	4959      	ldr	r1, [pc, #356]	; (8060950 <startRxDataThread+0x198>)
 80607ea:	485a      	ldr	r0, [pc, #360]	; (8060954 <startRxDataThread+0x19c>)
 80607ec:	f003 fc8e 	bl	806410c <HAL_UART_Transmit>

	  status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80607f0:	4b59      	ldr	r3, [pc, #356]	; (8060958 <startRxDataThread+0x1a0>)
 80607f2:	681b      	ldr	r3, [r3, #0]
 80607f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80607f8:	4618      	mov	r0, r3
 80607fa:	f008 fa01 	bl	8068c00 <osMutexAcquire>
 80607fe:	4603      	mov	r3, r0
 8060800:	4a56      	ldr	r2, [pc, #344]	; (806095c <startRxDataThread+0x1a4>)
 8060802:	6013      	str	r3, [r2, #0]
	  if (status != osOK) {
 8060804:	4b55      	ldr	r3, [pc, #340]	; (806095c <startRxDataThread+0x1a4>)
 8060806:	681b      	ldr	r3, [r3, #0]
 8060808:	2b00      	cmp	r3, #0
 806080a:	d00f      	beq.n	806082c <startRxDataThread+0x74>
		  myprintf("Could not take mutex for writing into file");
 806080c:	4954      	ldr	r1, [pc, #336]	; (8060960 <startRxDataThread+0x1a8>)
 806080e:	4850      	ldr	r0, [pc, #320]	; (8060950 <startRxDataThread+0x198>)
 8060810:	f00c f82a 	bl	806c868 <siprintf>
 8060814:	484e      	ldr	r0, [pc, #312]	; (8060950 <startRxDataThread+0x198>)
 8060816:	f7ff fced 	bl	80601f4 <strlen>
 806081a:	4603      	mov	r3, r0
 806081c:	b29a      	uxth	r2, r3
 806081e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060822:	494b      	ldr	r1, [pc, #300]	; (8060950 <startRxDataThread+0x198>)
 8060824:	484b      	ldr	r0, [pc, #300]	; (8060954 <startRxDataThread+0x19c>)
 8060826:	f003 fc71 	bl	806410c <HAL_UART_Transmit>
 806082a:	e07b      	b.n	8060924 <startRxDataThread+0x16c>
	  } else {
		  wr = f_open(&firmwareFile, "f.bin", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 806082c:	221a      	movs	r2, #26
 806082e:	494d      	ldr	r1, [pc, #308]	; (8060964 <startRxDataThread+0x1ac>)
 8060830:	484d      	ldr	r0, [pc, #308]	; (8060968 <startRxDataThread+0x1b0>)
 8060832:	f007 f881 	bl	8067938 <f_open>
 8060836:	4603      	mov	r3, r0
 8060838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  osMutexRelease(telemetryFileMutexHandle);
 806083c:	4b46      	ldr	r3, [pc, #280]	; (8060958 <startRxDataThread+0x1a0>)
 806083e:	681b      	ldr	r3, [r3, #0]
 8060840:	4618      	mov	r0, r3
 8060842:	f008 fa28 	bl	8068c96 <osMutexRelease>

		  if(wr != FR_OK) {
 8060846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 806084a:	2b00      	cmp	r3, #0
 806084c:	d012      	beq.n	8060874 <startRxDataThread+0xbc>
			  myprintf("f_open error (%i)\n", wr);
 806084e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8060852:	461a      	mov	r2, r3
 8060854:	4945      	ldr	r1, [pc, #276]	; (806096c <startRxDataThread+0x1b4>)
 8060856:	483e      	ldr	r0, [pc, #248]	; (8060950 <startRxDataThread+0x198>)
 8060858:	f00c f806 	bl	806c868 <siprintf>
 806085c:	483c      	ldr	r0, [pc, #240]	; (8060950 <startRxDataThread+0x198>)
 806085e:	f7ff fcc9 	bl	80601f4 <strlen>
 8060862:	4603      	mov	r3, r0
 8060864:	b29a      	uxth	r2, r3
 8060866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806086a:	4939      	ldr	r1, [pc, #228]	; (8060950 <startRxDataThread+0x198>)
 806086c:	4839      	ldr	r0, [pc, #228]	; (8060954 <startRxDataThread+0x19c>)
 806086e:	f003 fc4d 	bl	806410c <HAL_UART_Transmit>
 8060872:	e057      	b.n	8060924 <startRxDataThread+0x16c>
		  } else {
			  for (;;) {
				  memset(firmwareChunk, 0, sizeof(firmwareChunk));
 8060874:	f107 0308 	add.w	r3, r7, #8
 8060878:	2210      	movs	r2, #16
 806087a:	2100      	movs	r1, #0
 806087c:	4618      	mov	r0, r3
 806087e:	f00b ff17 	bl	806c6b0 <memset>
				  HAL_UART_Receive(&huart2, firmwareChunk, 4, HAL_MAX_DELAY);
 8060882:	f107 0108 	add.w	r1, r7, #8
 8060886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806088a:	2204      	movs	r2, #4
 806088c:	4831      	ldr	r0, [pc, #196]	; (8060954 <startRxDataThread+0x19c>)
 806088e:	f003 fccf 	bl	8064230 <HAL_UART_Receive>
				  cmpRes = strcmp(firmwareChunk, "$END");
 8060892:	f107 0308 	add.w	r3, r7, #8
 8060896:	4936      	ldr	r1, [pc, #216]	; (8060970 <startRxDataThread+0x1b8>)
 8060898:	4618      	mov	r0, r3
 806089a:	f7ff fca1 	bl	80601e0 <strcmp>
 806089e:	61f8      	str	r0, [r7, #28]
				  if (cmpRes == 0) {
 80608a0:	69fb      	ldr	r3, [r7, #28]
 80608a2:	2b00      	cmp	r3, #0
 80608a4:	d102      	bne.n	80608ac <startRxDataThread+0xf4>
					  safeToBoot = 1;
 80608a6:	2301      	movs	r3, #1
 80608a8:	627b      	str	r3, [r7, #36]	; 0x24
					  break;
 80608aa:	e02c      	b.n	8060906 <startRxDataThread+0x14e>
				  }

				  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80608ac:	4b2a      	ldr	r3, [pc, #168]	; (8060958 <startRxDataThread+0x1a0>)
 80608ae:	681b      	ldr	r3, [r3, #0]
 80608b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80608b4:	4618      	mov	r0, r3
 80608b6:	f008 f9a3 	bl	8068c00 <osMutexAcquire>
				  wr = f_write(&firmwareFile, firmwareChunk, 4, &bytesWrote);
 80608ba:	f107 0318 	add.w	r3, r7, #24
 80608be:	f107 0108 	add.w	r1, r7, #8
 80608c2:	2204      	movs	r2, #4
 80608c4:	4828      	ldr	r0, [pc, #160]	; (8060968 <startRxDataThread+0x1b0>)
 80608c6:	f007 fb6a 	bl	8067f9e <f_write>
 80608ca:	4603      	mov	r3, r0
 80608cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				  osMutexRelease(telemetryFileMutexHandle);
 80608d0:	4b21      	ldr	r3, [pc, #132]	; (8060958 <startRxDataThread+0x1a0>)
 80608d2:	681b      	ldr	r3, [r3, #0]
 80608d4:	4618      	mov	r0, r3
 80608d6:	f008 f9de 	bl	8068c96 <osMutexRelease>

				  if (wr != FR_OK) {
 80608da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80608de:	2b00      	cmp	r3, #0
 80608e0:	d0c8      	beq.n	8060874 <startRxDataThread+0xbc>
					  myprintf("[ERROR]: f_write firmware (%d)\n", wr);
 80608e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80608e6:	461a      	mov	r2, r3
 80608e8:	4922      	ldr	r1, [pc, #136]	; (8060974 <startRxDataThread+0x1bc>)
 80608ea:	4819      	ldr	r0, [pc, #100]	; (8060950 <startRxDataThread+0x198>)
 80608ec:	f00b ffbc 	bl	806c868 <siprintf>
 80608f0:	4817      	ldr	r0, [pc, #92]	; (8060950 <startRxDataThread+0x198>)
 80608f2:	f7ff fc7f 	bl	80601f4 <strlen>
 80608f6:	4603      	mov	r3, r0
 80608f8:	b29a      	uxth	r2, r3
 80608fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80608fe:	4914      	ldr	r1, [pc, #80]	; (8060950 <startRxDataThread+0x198>)
 8060900:	4814      	ldr	r0, [pc, #80]	; (8060954 <startRxDataThread+0x19c>)
 8060902:	f003 fc03 	bl	806410c <HAL_UART_Transmit>
					  break;
				  }
			  }


			  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 8060906:	4b14      	ldr	r3, [pc, #80]	; (8060958 <startRxDataThread+0x1a0>)
 8060908:	681b      	ldr	r3, [r3, #0]
 806090a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 806090e:	4618      	mov	r0, r3
 8060910:	f008 f976 	bl	8068c00 <osMutexAcquire>
			  f_close(&firmwareFile);
 8060914:	4814      	ldr	r0, [pc, #80]	; (8060968 <startRxDataThread+0x1b0>)
 8060916:	f007 fd6f 	bl	80683f8 <f_close>
			  osMutexRelease(telemetryFileMutexHandle);
 806091a:	4b0f      	ldr	r3, [pc, #60]	; (8060958 <startRxDataThread+0x1a0>)
 806091c:	681b      	ldr	r3, [r3, #0]
 806091e:	4618      	mov	r0, r3
 8060920:	f008 f9b9 	bl	8068c96 <osMutexRelease>
		  }
	  }

	 if (safeToBoot) {
 8060924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8060926:	2b00      	cmp	r3, #0
 8060928:	d008      	beq.n	806093c <startRxDataThread+0x184>
		 // toglle boot pin and software reset
		 HAL_GPIO_WritePin(BootPin_GPIO_Port, BootPin_Pin, GPIO_PIN_SET);
 806092a:	2201      	movs	r2, #1
 806092c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8060930:	4811      	ldr	r0, [pc, #68]	; (8060978 <startRxDataThread+0x1c0>)
 8060932:	f001 fbff 	bl	8062134 <HAL_GPIO_WritePin>
		 HAL_NVIC_SystemReset();
 8060936:	f001 f8cb 	bl	8061ad0 <HAL_NVIC_SystemReset>
 806093a:	e743      	b.n	80607c4 <startRxDataThread+0xc>
	 } else {
		 // try one more time
		 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 806093c:	2201      	movs	r2, #1
 806093e:	490f      	ldr	r1, [pc, #60]	; (806097c <startRxDataThread+0x1c4>)
 8060940:	4804      	ldr	r0, [pc, #16]	; (8060954 <startRxDataThread+0x19c>)
 8060942:	f003 fd17 	bl	8064374 <HAL_UART_Receive_IT>
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 8060946:	e73d      	b.n	80607c4 <startRxDataThread+0xc>
 8060948:	20004e00 	.word	0x20004e00
 806094c:	0806d0b0 	.word	0x0806d0b0
 8060950:	200000a8 	.word	0x200000a8
 8060954:	2000537c 	.word	0x2000537c
 8060958:	20004e04 	.word	0x20004e04
 806095c:	20005284 	.word	0x20005284
 8060960:	0806d0cc 	.word	0x0806d0cc
 8060964:	0806d0f8 	.word	0x0806d0f8
 8060968:	20005054 	.word	0x20005054
 806096c:	0806d100 	.word	0x0806d100
 8060970:	0806d114 	.word	0x0806d114
 8060974:	0806d11c 	.word	0x0806d11c
 8060978:	40020000 	.word	0x40020000
 806097c:	20004bc0 	.word	0x20004bc0

08060980 <startTxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTxDataThread */
void startTxDataThread(void *argument)
{
 8060980:	b580      	push	{r7, lr}
 8060982:	b08c      	sub	sp, #48	; 0x30
 8060984:	af00      	add	r7, sp, #0
 8060986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTxDataThread */
	FRESULT rr;
	// TODO: get rid of magic constants
	BYTE rbuf[32] = {0};
 8060988:	2300      	movs	r3, #0
 806098a:	60fb      	str	r3, [r7, #12]
 806098c:	f107 0310 	add.w	r3, r7, #16
 8060990:	2200      	movs	r2, #0
 8060992:	601a      	str	r2, [r3, #0]
 8060994:	605a      	str	r2, [r3, #4]
 8060996:	609a      	str	r2, [r3, #8]
 8060998:	60da      	str	r2, [r3, #12]
 806099a:	611a      	str	r2, [r3, #16]
 806099c:	615a      	str	r2, [r3, #20]
 806099e:	619a      	str	r2, [r3, #24]
  /* Infinite loop */
  for(;;)
  {
	  status = osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 80609a0:	4b4d      	ldr	r3, [pc, #308]	; (8060ad8 <startTxDataThread+0x158>)
 80609a2:	681b      	ldr	r3, [r3, #0]
 80609a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80609a8:	4618      	mov	r0, r3
 80609aa:	f008 fa3b 	bl	8068e24 <osSemaphoreAcquire>
 80609ae:	4603      	mov	r3, r0
 80609b0:	4a4a      	ldr	r2, [pc, #296]	; (8060adc <startTxDataThread+0x15c>)
 80609b2:	6013      	str	r3, [r2, #0]
	  myprintf("[INFO]: txDataThread : sem acquire : (%d)\n", status);
 80609b4:	4b49      	ldr	r3, [pc, #292]	; (8060adc <startTxDataThread+0x15c>)
 80609b6:	681b      	ldr	r3, [r3, #0]
 80609b8:	461a      	mov	r2, r3
 80609ba:	4949      	ldr	r1, [pc, #292]	; (8060ae0 <startTxDataThread+0x160>)
 80609bc:	4849      	ldr	r0, [pc, #292]	; (8060ae4 <startTxDataThread+0x164>)
 80609be:	f00b ff53 	bl	806c868 <siprintf>
 80609c2:	4848      	ldr	r0, [pc, #288]	; (8060ae4 <startTxDataThread+0x164>)
 80609c4:	f7ff fc16 	bl	80601f4 <strlen>
 80609c8:	4603      	mov	r3, r0
 80609ca:	b29a      	uxth	r2, r3
 80609cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80609d0:	4944      	ldr	r1, [pc, #272]	; (8060ae4 <startTxDataThread+0x164>)
 80609d2:	4845      	ldr	r0, [pc, #276]	; (8060ae8 <startTxDataThread+0x168>)
 80609d4:	f003 fb9a 	bl	806410c <HAL_UART_Transmit>

	  // there is no need to take mutex, as currenlty this is the only task
	  // that actually uses uart (if we omit the debug part)

	  // read from sd and write the info into uart (mock gprs)
	  status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80609d8:	4b44      	ldr	r3, [pc, #272]	; (8060aec <startTxDataThread+0x16c>)
 80609da:	681b      	ldr	r3, [r3, #0]
 80609dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80609e0:	4618      	mov	r0, r3
 80609e2:	f008 f90d 	bl	8068c00 <osMutexAcquire>
 80609e6:	4603      	mov	r3, r0
 80609e8:	4a3c      	ldr	r2, [pc, #240]	; (8060adc <startTxDataThread+0x15c>)
 80609ea:	6013      	str	r3, [r2, #0]
	  if (status != osOK) {
 80609ec:	4b3b      	ldr	r3, [pc, #236]	; (8060adc <startTxDataThread+0x15c>)
 80609ee:	681b      	ldr	r3, [r3, #0]
 80609f0:	2b00      	cmp	r3, #0
 80609f2:	d00f      	beq.n	8060a14 <startTxDataThread+0x94>
		  myprintf("Could not take mutex for reading into file");
 80609f4:	493e      	ldr	r1, [pc, #248]	; (8060af0 <startTxDataThread+0x170>)
 80609f6:	483b      	ldr	r0, [pc, #236]	; (8060ae4 <startTxDataThread+0x164>)
 80609f8:	f00b ff36 	bl	806c868 <siprintf>
 80609fc:	4839      	ldr	r0, [pc, #228]	; (8060ae4 <startTxDataThread+0x164>)
 80609fe:	f7ff fbf9 	bl	80601f4 <strlen>
 8060a02:	4603      	mov	r3, r0
 8060a04:	b29a      	uxth	r2, r3
 8060a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060a0a:	4936      	ldr	r1, [pc, #216]	; (8060ae4 <startTxDataThread+0x164>)
 8060a0c:	4836      	ldr	r0, [pc, #216]	; (8060ae8 <startTxDataThread+0x168>)
 8060a0e:	f003 fb7d 	bl	806410c <HAL_UART_Transmit>
 8060a12:	e05a      	b.n	8060aca <startTxDataThread+0x14a>
	  } else {
		  rr = f_open(&telemetryFile, "write.txt", FA_READ);
 8060a14:	2201      	movs	r2, #1
 8060a16:	4937      	ldr	r1, [pc, #220]	; (8060af4 <startTxDataThread+0x174>)
 8060a18:	4837      	ldr	r0, [pc, #220]	; (8060af8 <startTxDataThread+0x178>)
 8060a1a:	f006 ff8d 	bl	8067938 <f_open>
 8060a1e:	4603      	mov	r3, r0
 8060a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		  if(rr != FR_OK) {
 8060a24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8060a28:	2b00      	cmp	r3, #0
 8060a2a:	d017      	beq.n	8060a5c <startTxDataThread+0xdc>
			  osMutexRelease(telemetryFileMutexHandle);
 8060a2c:	4b2f      	ldr	r3, [pc, #188]	; (8060aec <startTxDataThread+0x16c>)
 8060a2e:	681b      	ldr	r3, [r3, #0]
 8060a30:	4618      	mov	r0, r3
 8060a32:	f008 f930 	bl	8068c96 <osMutexRelease>
			  myprintf("[ERROR]: (reading) f_open (%i)\n", rr);
 8060a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8060a3a:	461a      	mov	r2, r3
 8060a3c:	492f      	ldr	r1, [pc, #188]	; (8060afc <startTxDataThread+0x17c>)
 8060a3e:	4829      	ldr	r0, [pc, #164]	; (8060ae4 <startTxDataThread+0x164>)
 8060a40:	f00b ff12 	bl	806c868 <siprintf>
 8060a44:	4827      	ldr	r0, [pc, #156]	; (8060ae4 <startTxDataThread+0x164>)
 8060a46:	f7ff fbd5 	bl	80601f4 <strlen>
 8060a4a:	4603      	mov	r3, r0
 8060a4c:	b29a      	uxth	r2, r3
 8060a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060a52:	4924      	ldr	r1, [pc, #144]	; (8060ae4 <startTxDataThread+0x164>)
 8060a54:	4824      	ldr	r0, [pc, #144]	; (8060ae8 <startTxDataThread+0x168>)
 8060a56:	f003 fb59 	bl	806410c <HAL_UART_Transmit>
 8060a5a:	e036      	b.n	8060aca <startTxDataThread+0x14a>
		  } else {
			  // TODO: do we really need this one here ?
			  // f_lseek(&telemetryFile, 0);

			  unsigned int bytesRead = 1;
 8060a5c:	2301      	movs	r3, #1
 8060a5e:	60bb      	str	r3, [r7, #8]
		  	  while (bytesRead != 0) {
 8060a60:	e025      	b.n	8060aae <startTxDataThread+0x12e>
			  	  f_read(&telemetryFile, &rbuf, sizeof(rbuf), &bytesRead);
 8060a62:	f107 0308 	add.w	r3, r7, #8
 8060a66:	f107 010c 	add.w	r1, r7, #12
 8060a6a:	2220      	movs	r2, #32
 8060a6c:	4822      	ldr	r0, [pc, #136]	; (8060af8 <startTxDataThread+0x178>)
 8060a6e:	f007 f928 	bl	8067cc2 <f_read>
			  	  osMutexRelease(telemetryFileMutexHandle);
 8060a72:	4b1e      	ldr	r3, [pc, #120]	; (8060aec <startTxDataThread+0x16c>)
 8060a74:	681b      	ldr	r3, [r3, #0]
 8060a76:	4618      	mov	r0, r3
 8060a78:	f008 f90d 	bl	8068c96 <osMutexRelease>
			  	  myprintf("[READ]: %s\n", rbuf);
 8060a7c:	f107 030c 	add.w	r3, r7, #12
 8060a80:	461a      	mov	r2, r3
 8060a82:	491f      	ldr	r1, [pc, #124]	; (8060b00 <startTxDataThread+0x180>)
 8060a84:	4817      	ldr	r0, [pc, #92]	; (8060ae4 <startTxDataThread+0x164>)
 8060a86:	f00b feef 	bl	806c868 <siprintf>
 8060a8a:	4816      	ldr	r0, [pc, #88]	; (8060ae4 <startTxDataThread+0x164>)
 8060a8c:	f7ff fbb2 	bl	80601f4 <strlen>
 8060a90:	4603      	mov	r3, r0
 8060a92:	b29a      	uxth	r2, r3
 8060a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060a98:	4912      	ldr	r1, [pc, #72]	; (8060ae4 <startTxDataThread+0x164>)
 8060a9a:	4813      	ldr	r0, [pc, #76]	; (8060ae8 <startTxDataThread+0x168>)
 8060a9c:	f003 fb36 	bl	806410c <HAL_UART_Transmit>
			  	  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 8060aa0:	4b12      	ldr	r3, [pc, #72]	; (8060aec <startTxDataThread+0x16c>)
 8060aa2:	681b      	ldr	r3, [r3, #0]
 8060aa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8060aa8:	4618      	mov	r0, r3
 8060aaa:	f008 f8a9 	bl	8068c00 <osMutexAcquire>
		  	  while (bytesRead != 0) {
 8060aae:	68bb      	ldr	r3, [r7, #8]
 8060ab0:	2b00      	cmp	r3, #0
 8060ab2:	d1d6      	bne.n	8060a62 <startTxDataThread+0xe2>
		  	  }

		  	  f_close(&telemetryFile);
 8060ab4:	4810      	ldr	r0, [pc, #64]	; (8060af8 <startTxDataThread+0x178>)
 8060ab6:	f007 fc9f 	bl	80683f8 <f_close>
		  	  f_unlink("write.txt");
 8060aba:	480e      	ldr	r0, [pc, #56]	; (8060af4 <startTxDataThread+0x174>)
 8060abc:	f007 fccb 	bl	8068456 <f_unlink>

		  	  osMutexRelease(telemetryFileMutexHandle);
 8060ac0:	4b0a      	ldr	r3, [pc, #40]	; (8060aec <startTxDataThread+0x16c>)
 8060ac2:	681b      	ldr	r3, [r3, #0]
 8060ac4:	4618      	mov	r0, r3
 8060ac6:	f008 f8e6 	bl	8068c96 <osMutexRelease>
		  }
	  }

	  HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 8060aca:	2201      	movs	r2, #1
 8060acc:	490d      	ldr	r1, [pc, #52]	; (8060b04 <startTxDataThread+0x184>)
 8060ace:	4806      	ldr	r0, [pc, #24]	; (8060ae8 <startTxDataThread+0x168>)
 8060ad0:	f003 fc50 	bl	8064374 <HAL_UART_Receive_IT>
	  status = osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 8060ad4:	e764      	b.n	80609a0 <startTxDataThread+0x20>
 8060ad6:	bf00      	nop
 8060ad8:	2000504c 	.word	0x2000504c
 8060adc:	20005284 	.word	0x20005284
 8060ae0:	0806d13c 	.word	0x0806d13c
 8060ae4:	200000a8 	.word	0x200000a8
 8060ae8:	2000537c 	.word	0x2000537c
 8060aec:	20004e04 	.word	0x20004e04
 8060af0:	0806d168 	.word	0x0806d168
 8060af4:	0806d194 	.word	0x0806d194
 8060af8:	20004e1c 	.word	0x20004e1c
 8060afc:	0806d1a0 	.word	0x0806d1a0
 8060b00:	0806d1c0 	.word	0x0806d1c0
 8060b04:	20004bc0 	.word	0x20004bc0

08060b08 <startTelemetryThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTelemetryThread */
void startTelemetryThread(void *argument)
{
 8060b08:	b5b0      	push	{r4, r5, r7, lr}
 8060b0a:	b0b6      	sub	sp, #216	; 0xd8
 8060b0c:	af04      	add	r7, sp, #16
 8060b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTelemetryThread */
  TelemetryBase tb;
  FRESULT wr;
  // TODO: get rid of magic constant
  BYTE wbuf[128] = {0};
 8060b10:	2300      	movs	r3, #0
 8060b12:	60fb      	str	r3, [r7, #12]
 8060b14:	f107 0310 	add.w	r3, r7, #16
 8060b18:	227c      	movs	r2, #124	; 0x7c
 8060b1a:	2100      	movs	r1, #0
 8060b1c:	4618      	mov	r0, r3
 8060b1e:	f00b fdc7 	bl	806c6b0 <memset>

  /* Infinite loop */
  for(;;)
  {
	 status = osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 8060b22:	4b62      	ldr	r3, [pc, #392]	; (8060cac <startTelemetryThread+0x1a4>)
 8060b24:	6818      	ldr	r0, [r3, #0]
 8060b26:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8060b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060b2e:	2200      	movs	r2, #0
 8060b30:	f008 fb06 	bl	8069140 <osMessageQueueGet>
 8060b34:	4603      	mov	r3, r0
 8060b36:	4a5e      	ldr	r2, [pc, #376]	; (8060cb0 <startTelemetryThread+0x1a8>)
 8060b38:	6013      	str	r3, [r2, #0]
	 if (status == osOK) {
 8060b3a:	4b5d      	ldr	r3, [pc, #372]	; (8060cb0 <startTelemetryThread+0x1a8>)
 8060b3c:	681b      	ldr	r3, [r3, #0]
 8060b3e:	2b00      	cmp	r3, #0
 8060b40:	d1ef      	bne.n	8060b22 <startTelemetryThread+0x1a>
		 // write into sd card

		 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
				 tb.id, tb.data_size, tb.data[0],
 8060b42:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
		 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
 8060b46:	461d      	mov	r5, r3
 8060b48:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8060b4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8060b50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8060b54:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8060b58:	f107 000c 	add.w	r0, r7, #12
 8060b5c:	9102      	str	r1, [sp, #8]
 8060b5e:	9201      	str	r2, [sp, #4]
 8060b60:	9300      	str	r3, [sp, #0]
 8060b62:	4623      	mov	r3, r4
 8060b64:	462a      	mov	r2, r5
 8060b66:	4953      	ldr	r1, [pc, #332]	; (8060cb4 <startTelemetryThread+0x1ac>)
 8060b68:	f00b fe7e 	bl	806c868 <siprintf>
				 tb.data[1], tb.data[2]);
		 myprintf("Writing following string to sd: %s", wbuf);
 8060b6c:	f107 030c 	add.w	r3, r7, #12
 8060b70:	461a      	mov	r2, r3
 8060b72:	4951      	ldr	r1, [pc, #324]	; (8060cb8 <startTelemetryThread+0x1b0>)
 8060b74:	4851      	ldr	r0, [pc, #324]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060b76:	f00b fe77 	bl	806c868 <siprintf>
 8060b7a:	4850      	ldr	r0, [pc, #320]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060b7c:	f7ff fb3a 	bl	80601f4 <strlen>
 8060b80:	4603      	mov	r3, r0
 8060b82:	b29a      	uxth	r2, r3
 8060b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060b88:	494c      	ldr	r1, [pc, #304]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060b8a:	484d      	ldr	r0, [pc, #308]	; (8060cc0 <startTelemetryThread+0x1b8>)
 8060b8c:	f003 fabe 	bl	806410c <HAL_UART_Transmit>


		 // TODO: add mutex here
		 status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 8060b90:	4b4c      	ldr	r3, [pc, #304]	; (8060cc4 <startTelemetryThread+0x1bc>)
 8060b92:	681b      	ldr	r3, [r3, #0]
 8060b94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8060b98:	4618      	mov	r0, r3
 8060b9a:	f008 f831 	bl	8068c00 <osMutexAcquire>
 8060b9e:	4603      	mov	r3, r0
 8060ba0:	4a43      	ldr	r2, [pc, #268]	; (8060cb0 <startTelemetryThread+0x1a8>)
 8060ba2:	6013      	str	r3, [r2, #0]
		 if (status != osOK) {
 8060ba4:	4b42      	ldr	r3, [pc, #264]	; (8060cb0 <startTelemetryThread+0x1a8>)
 8060ba6:	681b      	ldr	r3, [r3, #0]
 8060ba8:	2b00      	cmp	r3, #0
 8060baa:	d00f      	beq.n	8060bcc <startTelemetryThread+0xc4>
			 myprintf("Could not take mutex for writing into file");
 8060bac:	4946      	ldr	r1, [pc, #280]	; (8060cc8 <startTelemetryThread+0x1c0>)
 8060bae:	4843      	ldr	r0, [pc, #268]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060bb0:	f00b fe5a 	bl	806c868 <siprintf>
 8060bb4:	4841      	ldr	r0, [pc, #260]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060bb6:	f7ff fb1d 	bl	80601f4 <strlen>
 8060bba:	4603      	mov	r3, r0
 8060bbc:	b29a      	uxth	r2, r3
 8060bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060bc2:	493e      	ldr	r1, [pc, #248]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060bc4:	483e      	ldr	r0, [pc, #248]	; (8060cc0 <startTelemetryThread+0x1b8>)
 8060bc6:	f003 faa1 	bl	806410c <HAL_UART_Transmit>
 8060bca:	e068      	b.n	8060c9e <startTelemetryThread+0x196>
		 } else {
		 	 wr = f_open(&telemetryFile, "write.txt", FA_OPEN_APPEND | FA_WRITE | FA_OPEN_ALWAYS);
 8060bcc:	2232      	movs	r2, #50	; 0x32
 8060bce:	493f      	ldr	r1, [pc, #252]	; (8060ccc <startTelemetryThread+0x1c4>)
 8060bd0:	483f      	ldr	r0, [pc, #252]	; (8060cd0 <startTelemetryThread+0x1c8>)
 8060bd2:	f006 feb1 	bl	8067938 <f_open>
 8060bd6:	4603      	mov	r3, r0
 8060bd8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7


		 	 if(wr == FR_OK) {
 8060bdc:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8060be0:	2b00      	cmp	r3, #0
 8060be2:	d110      	bne.n	8060c06 <startTelemetryThread+0xfe>
		 		 myprintf("I was able to open '%s' for writing\n", TELEMETRY_FILE);
 8060be4:	4a3b      	ldr	r2, [pc, #236]	; (8060cd4 <startTelemetryThread+0x1cc>)
 8060be6:	493c      	ldr	r1, [pc, #240]	; (8060cd8 <startTelemetryThread+0x1d0>)
 8060be8:	4834      	ldr	r0, [pc, #208]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060bea:	f00b fe3d 	bl	806c868 <siprintf>
 8060bee:	4833      	ldr	r0, [pc, #204]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060bf0:	f7ff fb00 	bl	80601f4 <strlen>
 8060bf4:	4603      	mov	r3, r0
 8060bf6:	b29a      	uxth	r2, r3
 8060bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060bfc:	492f      	ldr	r1, [pc, #188]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060bfe:	4830      	ldr	r0, [pc, #192]	; (8060cc0 <startTelemetryThread+0x1b8>)
 8060c00:	f003 fa84 	bl	806410c <HAL_UART_Transmit>
 8060c04:	e011      	b.n	8060c2a <startTelemetryThread+0x122>
		 	 } else {
		 		 myprintf("f_open error (%i)\n", wr);
 8060c06:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8060c0a:	461a      	mov	r2, r3
 8060c0c:	4933      	ldr	r1, [pc, #204]	; (8060cdc <startTelemetryThread+0x1d4>)
 8060c0e:	482b      	ldr	r0, [pc, #172]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060c10:	f00b fe2a 	bl	806c868 <siprintf>
 8060c14:	4829      	ldr	r0, [pc, #164]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060c16:	f7ff faed 	bl	80601f4 <strlen>
 8060c1a:	4603      	mov	r3, r0
 8060c1c:	b29a      	uxth	r2, r3
 8060c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060c22:	4926      	ldr	r1, [pc, #152]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060c24:	4826      	ldr	r0, [pc, #152]	; (8060cc0 <startTelemetryThread+0x1b8>)
 8060c26:	f003 fa71 	bl	806410c <HAL_UART_Transmit>
		 	 }


		 	 UINT bytesWrote;
		 	 // TODO: and also I assume we should add mutex here
		 	 wr = f_write(&telemetryFile, wbuf, strlen(wbuf), &bytesWrote);
 8060c2a:	f107 030c 	add.w	r3, r7, #12
 8060c2e:	4618      	mov	r0, r3
 8060c30:	f7ff fae0 	bl	80601f4 <strlen>
 8060c34:	4602      	mov	r2, r0
 8060c36:	f107 0308 	add.w	r3, r7, #8
 8060c3a:	f107 010c 	add.w	r1, r7, #12
 8060c3e:	4824      	ldr	r0, [pc, #144]	; (8060cd0 <startTelemetryThread+0x1c8>)
 8060c40:	f007 f9ad 	bl	8067f9e <f_write>
 8060c44:	4603      	mov	r3, r0
 8060c46:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		 	 if(wr == FR_OK) {
 8060c4a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8060c4e:	2b00      	cmp	r3, #0
 8060c50:	d111      	bne.n	8060c76 <startTelemetryThread+0x16e>
		 		 myprintf("Wrote %i bytes to 'write.txt'!\n", bytesWrote);
 8060c52:	68bb      	ldr	r3, [r7, #8]
 8060c54:	461a      	mov	r2, r3
 8060c56:	4922      	ldr	r1, [pc, #136]	; (8060ce0 <startTelemetryThread+0x1d8>)
 8060c58:	4818      	ldr	r0, [pc, #96]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060c5a:	f00b fe05 	bl	806c868 <siprintf>
 8060c5e:	4817      	ldr	r0, [pc, #92]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060c60:	f7ff fac8 	bl	80601f4 <strlen>
 8060c64:	4603      	mov	r3, r0
 8060c66:	b29a      	uxth	r2, r3
 8060c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060c6c:	4913      	ldr	r1, [pc, #76]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060c6e:	4814      	ldr	r0, [pc, #80]	; (8060cc0 <startTelemetryThread+0x1b8>)
 8060c70:	f003 fa4c 	bl	806410c <HAL_UART_Transmit>
 8060c74:	e010      	b.n	8060c98 <startTelemetryThread+0x190>
		 	 } else {
		 		 myprintf("f_write error (%d)\n", (int) bytesWrote);
 8060c76:	68bb      	ldr	r3, [r7, #8]
 8060c78:	461a      	mov	r2, r3
 8060c7a:	491a      	ldr	r1, [pc, #104]	; (8060ce4 <startTelemetryThread+0x1dc>)
 8060c7c:	480f      	ldr	r0, [pc, #60]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060c7e:	f00b fdf3 	bl	806c868 <siprintf>
 8060c82:	480e      	ldr	r0, [pc, #56]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060c84:	f7ff fab6 	bl	80601f4 <strlen>
 8060c88:	4603      	mov	r3, r0
 8060c8a:	b29a      	uxth	r2, r3
 8060c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060c90:	490a      	ldr	r1, [pc, #40]	; (8060cbc <startTelemetryThread+0x1b4>)
 8060c92:	480b      	ldr	r0, [pc, #44]	; (8060cc0 <startTelemetryThread+0x1b8>)
 8060c94:	f003 fa3a 	bl	806410c <HAL_UART_Transmit>
		 	 }

		 	 f_close(&telemetryFile);
 8060c98:	480d      	ldr	r0, [pc, #52]	; (8060cd0 <startTelemetryThread+0x1c8>)
 8060c9a:	f007 fbad 	bl	80683f8 <f_close>
	 	 }

		 osMutexRelease(telemetryFileMutexHandle);
 8060c9e:	4b09      	ldr	r3, [pc, #36]	; (8060cc4 <startTelemetryThread+0x1bc>)
 8060ca0:	681b      	ldr	r3, [r3, #0]
 8060ca2:	4618      	mov	r0, r3
 8060ca4:	f007 fff7 	bl	8068c96 <osMutexRelease>
	 status = osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 8060ca8:	e73b      	b.n	8060b22 <startTelemetryThread+0x1a>
 8060caa:	bf00      	nop
 8060cac:	20004e14 	.word	0x20004e14
 8060cb0:	20005284 	.word	0x20005284
 8060cb4:	0806d1cc 	.word	0x0806d1cc
 8060cb8:	0806d1f0 	.word	0x0806d1f0
 8060cbc:	200000a8 	.word	0x200000a8
 8060cc0:	2000537c 	.word	0x2000537c
 8060cc4:	20004e04 	.word	0x20004e04
 8060cc8:	0806d0cc 	.word	0x0806d0cc
 8060ccc:	0806d194 	.word	0x0806d194
 8060cd0:	20004e1c 	.word	0x20004e1c
 8060cd4:	0806d214 	.word	0x0806d214
 8060cd8:	0806d224 	.word	0x0806d224
 8060cdc:	0806d100 	.word	0x0806d100
 8060ce0:	0806d24c 	.word	0x0806d24c
 8060ce4:	0806d26c 	.word	0x0806d26c

08060ce8 <accTimerCallback>:
  /* USER CODE END startTelemetryThread */
}

/* accTimerCallback function */
void accTimerCallback(void *argument)
{
 8060ce8:	b580      	push	{r7, lr}
 8060cea:	b092      	sub	sp, #72	; 0x48
 8060cec:	af00      	add	r7, sp, #0
 8060cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accTimerCallback */
	TelemetryBase acc;

	acc.id = ACC;
 8060cf0:	2300      	movs	r3, #0
 8060cf2:	733b      	strb	r3, [r7, #12]
	acc.data_size = 3;
 8060cf4:	2303      	movs	r3, #3
 8060cf6:	643b      	str	r3, [r7, #64]	; 0x40
	for (size_t i = 0; i < acc.data_size; i++) {
 8060cf8:	2300      	movs	r3, #0
 8060cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8060cfc:	e00a      	b.n	8060d14 <accTimerCallback+0x2c>
		acc.data[i] = i;
 8060cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8060d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8060d02:	009b      	lsls	r3, r3, #2
 8060d04:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8060d08:	440b      	add	r3, r1
 8060d0a:	f843 2c38 	str.w	r2, [r3, #-56]
	for (size_t i = 0; i < acc.data_size; i++) {
 8060d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8060d10:	3301      	adds	r3, #1
 8060d12:	647b      	str	r3, [r7, #68]	; 0x44
 8060d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8060d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8060d18:	429a      	cmp	r2, r3
 8060d1a:	d3f0      	bcc.n	8060cfe <accTimerCallback+0x16>
	}

	// note that this might be called from isr, if the
	// time parameter is set to 0
	osMessageQueuePut(telemetryQueueHandle, &acc, 0U, 0U);
 8060d1c:	4b05      	ldr	r3, [pc, #20]	; (8060d34 <accTimerCallback+0x4c>)
 8060d1e:	6818      	ldr	r0, [r3, #0]
 8060d20:	f107 010c 	add.w	r1, r7, #12
 8060d24:	2300      	movs	r3, #0
 8060d26:	2200      	movs	r2, #0
 8060d28:	f008 f9aa 	bl	8069080 <osMessageQueuePut>
  /* USER CODE END accTimerCallback */
}
 8060d2c:	bf00      	nop
 8060d2e:	3748      	adds	r7, #72	; 0x48
 8060d30:	46bd      	mov	sp, r7
 8060d32:	bd80      	pop	{r7, pc}
 8060d34:	20004e14 	.word	0x20004e14

08060d38 <temperatureTimerCallback>:

/* temperatureTimerCallback function */
void temperatureTimerCallback(void *argument)
{
 8060d38:	b580      	push	{r7, lr}
 8060d3a:	b092      	sub	sp, #72	; 0x48
 8060d3c:	af00      	add	r7, sp, #0
 8060d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temperatureTimerCallback */
	TelemetryBase acc;

	acc.id = ACC;
 8060d40:	2300      	movs	r3, #0
 8060d42:	733b      	strb	r3, [r7, #12]
	acc.data_size = 3;
 8060d44:	2303      	movs	r3, #3
 8060d46:	643b      	str	r3, [r7, #64]	; 0x40
	for (size_t i = 0; i < acc.data_size; i++) {
 8060d48:	2300      	movs	r3, #0
 8060d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8060d4c:	e00d      	b.n	8060d6a <temperatureTimerCallback+0x32>
		acc.data[i] = acc.data_size - i;
 8060d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8060d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8060d52:	1ad3      	subs	r3, r2, r3
 8060d54:	461a      	mov	r2, r3
 8060d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8060d58:	009b      	lsls	r3, r3, #2
 8060d5a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8060d5e:	440b      	add	r3, r1
 8060d60:	f843 2c38 	str.w	r2, [r3, #-56]
	for (size_t i = 0; i < acc.data_size; i++) {
 8060d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8060d66:	3301      	adds	r3, #1
 8060d68:	647b      	str	r3, [r7, #68]	; 0x44
 8060d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8060d6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8060d6e:	429a      	cmp	r2, r3
 8060d70:	d3ed      	bcc.n	8060d4e <temperatureTimerCallback+0x16>
	}

	osMessageQueuePut(telemetryQueueHandle, &acc, 0U, 0U);
 8060d72:	4b06      	ldr	r3, [pc, #24]	; (8060d8c <temperatureTimerCallback+0x54>)
 8060d74:	6818      	ldr	r0, [r3, #0]
 8060d76:	f107 010c 	add.w	r1, r7, #12
 8060d7a:	2300      	movs	r3, #0
 8060d7c:	2200      	movs	r2, #0
 8060d7e:	f008 f97f 	bl	8069080 <osMessageQueuePut>
  /* USER CODE END temperatureTimerCallback */
}
 8060d82:	bf00      	nop
 8060d84:	3748      	adds	r7, #72	; 0x48
 8060d86:	46bd      	mov	sp, r7
 8060d88:	bd80      	pop	{r7, pc}
 8060d8a:	bf00      	nop
 8060d8c:	20004e14 	.word	0x20004e14

08060d90 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN Application */
/*
 * [IMPORTANT] TODO: Note that this functoin is unsafe (as we might interrupt uart usage)
 * Actually not, as we would transmit only after this
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8060d90:	b580      	push	{r7, lr}
 8060d92:	b084      	sub	sp, #16
 8060d94:	af00      	add	r7, sp, #0
 8060d96:	6078      	str	r0, [r7, #4]
     if (huart == &huart2) {
 8060d98:	687b      	ldr	r3, [r7, #4]
 8060d9a:	4a25      	ldr	r2, [pc, #148]	; (8060e30 <HAL_UART_RxCpltCallback+0xa0>)
 8060d9c:	4293      	cmp	r3, r2
 8060d9e:	d141      	bne.n	8060e24 <HAL_UART_RxCpltCallback+0x94>
    	 int val = (int) (notification_buffer[0] - '0');
 8060da0:	4b24      	ldr	r3, [pc, #144]	; (8060e34 <HAL_UART_RxCpltCallback+0xa4>)
 8060da2:	781b      	ldrb	r3, [r3, #0]
 8060da4:	3b30      	subs	r3, #48	; 0x30
 8060da6:	60fb      	str	r3, [r7, #12]
		 switch (val) {
 8060da8:	68fb      	ldr	r3, [r7, #12]
 8060daa:	2b00      	cmp	r3, #0
 8060dac:	d003      	beq.n	8060db6 <HAL_UART_RxCpltCallback+0x26>
 8060dae:	68fb      	ldr	r3, [r7, #12]
 8060db0:	2b01      	cmp	r3, #1
 8060db2:	d006      	beq.n	8060dc2 <HAL_UART_RxCpltCallback+0x32>
 8060db4:	e020      	b.n	8060df8 <HAL_UART_RxCpltCallback+0x68>
		 case 0:
			 osSemaphoreRelease(rxThreadSemHandle);
 8060db6:	4b20      	ldr	r3, [pc, #128]	; (8060e38 <HAL_UART_RxCpltCallback+0xa8>)
 8060db8:	681b      	ldr	r3, [r3, #0]
 8060dba:	4618      	mov	r0, r3
 8060dbc:	f008 f884 	bl	8068ec8 <osSemaphoreRelease>
			 break;
 8060dc0:	e031      	b.n	8060e26 <HAL_UART_RxCpltCallback+0x96>
		 case 1:
			 status = osSemaphoreRelease(txThreadSemHandle);
 8060dc2:	4b1e      	ldr	r3, [pc, #120]	; (8060e3c <HAL_UART_RxCpltCallback+0xac>)
 8060dc4:	681b      	ldr	r3, [r3, #0]
 8060dc6:	4618      	mov	r0, r3
 8060dc8:	f008 f87e 	bl	8068ec8 <osSemaphoreRelease>
 8060dcc:	4603      	mov	r3, r0
 8060dce:	4a1c      	ldr	r2, [pc, #112]	; (8060e40 <HAL_UART_RxCpltCallback+0xb0>)
 8060dd0:	6013      	str	r3, [r2, #0]
			 myprintf("[INFO]: status of semaphore release: %d\n", status);
 8060dd2:	4b1b      	ldr	r3, [pc, #108]	; (8060e40 <HAL_UART_RxCpltCallback+0xb0>)
 8060dd4:	681b      	ldr	r3, [r3, #0]
 8060dd6:	461a      	mov	r2, r3
 8060dd8:	491a      	ldr	r1, [pc, #104]	; (8060e44 <HAL_UART_RxCpltCallback+0xb4>)
 8060dda:	481b      	ldr	r0, [pc, #108]	; (8060e48 <HAL_UART_RxCpltCallback+0xb8>)
 8060ddc:	f00b fd44 	bl	806c868 <siprintf>
 8060de0:	4819      	ldr	r0, [pc, #100]	; (8060e48 <HAL_UART_RxCpltCallback+0xb8>)
 8060de2:	f7ff fa07 	bl	80601f4 <strlen>
 8060de6:	4603      	mov	r3, r0
 8060de8:	b29a      	uxth	r2, r3
 8060dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060dee:	4916      	ldr	r1, [pc, #88]	; (8060e48 <HAL_UART_RxCpltCallback+0xb8>)
 8060df0:	480f      	ldr	r0, [pc, #60]	; (8060e30 <HAL_UART_RxCpltCallback+0xa0>)
 8060df2:	f003 f98b 	bl	806410c <HAL_UART_Transmit>
			 break;
 8060df6:	e016      	b.n	8060e26 <HAL_UART_RxCpltCallback+0x96>
		 default:
			 myprintf("[ERROR]: Op not allowed: %d\n", val);
 8060df8:	68fa      	ldr	r2, [r7, #12]
 8060dfa:	4914      	ldr	r1, [pc, #80]	; (8060e4c <HAL_UART_RxCpltCallback+0xbc>)
 8060dfc:	4812      	ldr	r0, [pc, #72]	; (8060e48 <HAL_UART_RxCpltCallback+0xb8>)
 8060dfe:	f00b fd33 	bl	806c868 <siprintf>
 8060e02:	4811      	ldr	r0, [pc, #68]	; (8060e48 <HAL_UART_RxCpltCallback+0xb8>)
 8060e04:	f7ff f9f6 	bl	80601f4 <strlen>
 8060e08:	4603      	mov	r3, r0
 8060e0a:	b29a      	uxth	r2, r3
 8060e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8060e10:	490d      	ldr	r1, [pc, #52]	; (8060e48 <HAL_UART_RxCpltCallback+0xb8>)
 8060e12:	4807      	ldr	r0, [pc, #28]	; (8060e30 <HAL_UART_RxCpltCallback+0xa0>)
 8060e14:	f003 f97a 	bl	806410c <HAL_UART_Transmit>
			 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 8060e18:	2201      	movs	r2, #1
 8060e1a:	4906      	ldr	r1, [pc, #24]	; (8060e34 <HAL_UART_RxCpltCallback+0xa4>)
 8060e1c:	4804      	ldr	r0, [pc, #16]	; (8060e30 <HAL_UART_RxCpltCallback+0xa0>)
 8060e1e:	f003 faa9 	bl	8064374 <HAL_UART_Receive_IT>
			 break;
 8060e22:	e000      	b.n	8060e26 <HAL_UART_RxCpltCallback+0x96>
		 };
 8060e24:	bf00      	nop

     }
}
 8060e26:	bf00      	nop
 8060e28:	3710      	adds	r7, #16
 8060e2a:	46bd      	mov	sp, r7
 8060e2c:	bd80      	pop	{r7, pc}
 8060e2e:	bf00      	nop
 8060e30:	2000537c 	.word	0x2000537c
 8060e34:	20004bc0 	.word	0x20004bc0
 8060e38:	20004e00 	.word	0x20004e00
 8060e3c:	2000504c 	.word	0x2000504c
 8060e40:	20005284 	.word	0x20005284
 8060e44:	0806d280 	.word	0x0806d280
 8060e48:	200000a8 	.word	0x200000a8
 8060e4c:	0806d2ac 	.word	0x0806d2ac

08060e50 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8060e50:	b580      	push	{r7, lr}
 8060e52:	b08c      	sub	sp, #48	; 0x30
 8060e54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8060e56:	f107 031c 	add.w	r3, r7, #28
 8060e5a:	2200      	movs	r2, #0
 8060e5c:	601a      	str	r2, [r3, #0]
 8060e5e:	605a      	str	r2, [r3, #4]
 8060e60:	609a      	str	r2, [r3, #8]
 8060e62:	60da      	str	r2, [r3, #12]
 8060e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8060e66:	2300      	movs	r3, #0
 8060e68:	61bb      	str	r3, [r7, #24]
 8060e6a:	4ba5      	ldr	r3, [pc, #660]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060e6e:	4aa4      	ldr	r2, [pc, #656]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060e70:	f043 0310 	orr.w	r3, r3, #16
 8060e74:	6313      	str	r3, [r2, #48]	; 0x30
 8060e76:	4ba2      	ldr	r3, [pc, #648]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060e7a:	f003 0310 	and.w	r3, r3, #16
 8060e7e:	61bb      	str	r3, [r7, #24]
 8060e80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8060e82:	2300      	movs	r3, #0
 8060e84:	617b      	str	r3, [r7, #20]
 8060e86:	4b9e      	ldr	r3, [pc, #632]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060e8a:	4a9d      	ldr	r2, [pc, #628]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060e8c:	f043 0304 	orr.w	r3, r3, #4
 8060e90:	6313      	str	r3, [r2, #48]	; 0x30
 8060e92:	4b9b      	ldr	r3, [pc, #620]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060e96:	f003 0304 	and.w	r3, r3, #4
 8060e9a:	617b      	str	r3, [r7, #20]
 8060e9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8060e9e:	2300      	movs	r3, #0
 8060ea0:	613b      	str	r3, [r7, #16]
 8060ea2:	4b97      	ldr	r3, [pc, #604]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060ea6:	4a96      	ldr	r2, [pc, #600]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8060eac:	6313      	str	r3, [r2, #48]	; 0x30
 8060eae:	4b94      	ldr	r3, [pc, #592]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8060eb6:	613b      	str	r3, [r7, #16]
 8060eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8060eba:	2300      	movs	r3, #0
 8060ebc:	60fb      	str	r3, [r7, #12]
 8060ebe:	4b90      	ldr	r3, [pc, #576]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060ec2:	4a8f      	ldr	r2, [pc, #572]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060ec4:	f043 0301 	orr.w	r3, r3, #1
 8060ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8060eca:	4b8d      	ldr	r3, [pc, #564]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060ece:	f003 0301 	and.w	r3, r3, #1
 8060ed2:	60fb      	str	r3, [r7, #12]
 8060ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8060ed6:	2300      	movs	r3, #0
 8060ed8:	60bb      	str	r3, [r7, #8]
 8060eda:	4b89      	ldr	r3, [pc, #548]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060ede:	4a88      	ldr	r2, [pc, #544]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060ee0:	f043 0302 	orr.w	r3, r3, #2
 8060ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8060ee6:	4b86      	ldr	r3, [pc, #536]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060eea:	f003 0302 	and.w	r3, r3, #2
 8060eee:	60bb      	str	r3, [r7, #8]
 8060ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8060ef2:	2300      	movs	r3, #0
 8060ef4:	607b      	str	r3, [r7, #4]
 8060ef6:	4b82      	ldr	r3, [pc, #520]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060efa:	4a81      	ldr	r2, [pc, #516]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060efc:	f043 0308 	orr.w	r3, r3, #8
 8060f00:	6313      	str	r3, [r2, #48]	; 0x30
 8060f02:	4b7f      	ldr	r3, [pc, #508]	; (8061100 <MX_GPIO_Init+0x2b0>)
 8060f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8060f06:	f003 0308 	and.w	r3, r3, #8
 8060f0a:	607b      	str	r3, [r7, #4]
 8060f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8060f0e:	2200      	movs	r2, #0
 8060f10:	2108      	movs	r1, #8
 8060f12:	487c      	ldr	r0, [pc, #496]	; (8061104 <MX_GPIO_Init+0x2b4>)
 8060f14:	f001 f90e 	bl	8062134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8060f18:	2201      	movs	r2, #1
 8060f1a:	2101      	movs	r1, #1
 8060f1c:	487a      	ldr	r0, [pc, #488]	; (8061108 <MX_GPIO_Init+0x2b8>)
 8060f1e:	f001 f909 	bl	8062134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8060f22:	2200      	movs	r2, #0
 8060f24:	2102      	movs	r1, #2
 8060f26:	4879      	ldr	r0, [pc, #484]	; (806110c <MX_GPIO_Init+0x2bc>)
 8060f28:	f001 f904 	bl	8062134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8060f2c:	2200      	movs	r2, #0
 8060f2e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8060f32:	4877      	ldr	r0, [pc, #476]	; (8061110 <MX_GPIO_Init+0x2c0>)
 8060f34:	f001 f8fe 	bl	8062134 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BootPin_GPIO_Port, BootPin_Pin, GPIO_PIN_RESET);
 8060f38:	2200      	movs	r2, #0
 8060f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8060f3e:	4875      	ldr	r0, [pc, #468]	; (8061114 <MX_GPIO_Init+0x2c4>)
 8060f40:	f001 f8f8 	bl	8062134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8060f44:	2304      	movs	r3, #4
 8060f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8060f48:	2300      	movs	r3, #0
 8060f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060f4c:	2300      	movs	r3, #0
 8060f4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8060f50:	f107 031c 	add.w	r3, r7, #28
 8060f54:	4619      	mov	r1, r3
 8060f56:	486b      	ldr	r0, [pc, #428]	; (8061104 <MX_GPIO_Init+0x2b4>)
 8060f58:	f000 fe50 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8060f5c:	2308      	movs	r3, #8
 8060f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8060f60:	2301      	movs	r3, #1
 8060f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060f64:	2300      	movs	r3, #0
 8060f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8060f68:	2300      	movs	r3, #0
 8060f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8060f6c:	f107 031c 	add.w	r3, r7, #28
 8060f70:	4619      	mov	r1, r3
 8060f72:	4864      	ldr	r0, [pc, #400]	; (8061104 <MX_GPIO_Init+0x2b4>)
 8060f74:	f000 fe42 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8060f78:	2332      	movs	r3, #50	; 0x32
 8060f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8060f7c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8060f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060f82:	2300      	movs	r3, #0
 8060f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8060f86:	f107 031c 	add.w	r3, r7, #28
 8060f8a:	4619      	mov	r1, r3
 8060f8c:	485d      	ldr	r0, [pc, #372]	; (8061104 <MX_GPIO_Init+0x2b4>)
 8060f8e:	f000 fe35 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8060f92:	2301      	movs	r3, #1
 8060f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8060f96:	2301      	movs	r3, #1
 8060f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060f9a:	2300      	movs	r3, #0
 8060f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8060f9e:	2300      	movs	r3, #0
 8060fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8060fa2:	f107 031c 	add.w	r3, r7, #28
 8060fa6:	4619      	mov	r1, r3
 8060fa8:	4857      	ldr	r0, [pc, #348]	; (8061108 <MX_GPIO_Init+0x2b8>)
 8060faa:	f000 fe27 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8060fae:	2308      	movs	r3, #8
 8060fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8060fb2:	2302      	movs	r3, #2
 8060fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060fb6:	2300      	movs	r3, #0
 8060fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8060fba:	2300      	movs	r3, #0
 8060fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8060fbe:	2305      	movs	r3, #5
 8060fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8060fc2:	f107 031c 	add.w	r3, r7, #28
 8060fc6:	4619      	mov	r1, r3
 8060fc8:	484f      	ldr	r0, [pc, #316]	; (8061108 <MX_GPIO_Init+0x2b8>)
 8060fca:	f000 fe17 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8060fce:	2301      	movs	r3, #1
 8060fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8060fd2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8060fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060fd8:	2300      	movs	r3, #0
 8060fda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8060fdc:	f107 031c 	add.w	r3, r7, #28
 8060fe0:	4619      	mov	r1, r3
 8060fe2:	484c      	ldr	r0, [pc, #304]	; (8061114 <MX_GPIO_Init+0x2c4>)
 8060fe4:	f000 fe0a 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8060fe8:	2310      	movs	r3, #16
 8060fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8060fec:	2302      	movs	r3, #2
 8060fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060ff0:	2300      	movs	r3, #0
 8060ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8060ff4:	2300      	movs	r3, #0
 8060ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8060ff8:	2306      	movs	r3, #6
 8060ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8060ffc:	f107 031c 	add.w	r3, r7, #28
 8061000:	4619      	mov	r1, r3
 8061002:	4844      	ldr	r0, [pc, #272]	; (8061114 <MX_GPIO_Init+0x2c4>)
 8061004:	f000 fdfa 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8061008:	2302      	movs	r3, #2
 806100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 806100c:	2301      	movs	r3, #1
 806100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8061010:	2300      	movs	r3, #0
 8061012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8061014:	2300      	movs	r3, #0
 8061016:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8061018:	f107 031c 	add.w	r3, r7, #28
 806101c:	4619      	mov	r1, r3
 806101e:	483b      	ldr	r0, [pc, #236]	; (806110c <MX_GPIO_Init+0x2bc>)
 8061020:	f000 fdec 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8061024:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8061028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 806102a:	2302      	movs	r3, #2
 806102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 806102e:	2300      	movs	r3, #0
 8061030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8061032:	2300      	movs	r3, #0
 8061034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8061036:	2305      	movs	r3, #5
 8061038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 806103a:	f107 031c 	add.w	r3, r7, #28
 806103e:	4619      	mov	r1, r3
 8061040:	4832      	ldr	r0, [pc, #200]	; (806110c <MX_GPIO_Init+0x2bc>)
 8061042:	f000 fddb 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8061046:	f24f 0310 	movw	r3, #61456	; 0xf010
 806104a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 806104c:	2301      	movs	r3, #1
 806104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8061050:	2300      	movs	r3, #0
 8061052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8061054:	2300      	movs	r3, #0
 8061056:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8061058:	f107 031c 	add.w	r3, r7, #28
 806105c:	4619      	mov	r1, r3
 806105e:	482c      	ldr	r0, [pc, #176]	; (8061110 <MX_GPIO_Init+0x2c0>)
 8061060:	f000 fdcc 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8061064:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8061068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 806106a:	2302      	movs	r3, #2
 806106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 806106e:	2300      	movs	r3, #0
 8061070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8061072:	2300      	movs	r3, #0
 8061074:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8061076:	2306      	movs	r3, #6
 8061078:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 806107a:	f107 031c 	add.w	r3, r7, #28
 806107e:	4619      	mov	r1, r3
 8061080:	4821      	ldr	r0, [pc, #132]	; (8061108 <MX_GPIO_Init+0x2b8>)
 8061082:	f000 fdbb 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BootPin_Pin;
 8061086:	f44f 7380 	mov.w	r3, #256	; 0x100
 806108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 806108c:	2301      	movs	r3, #1
 806108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8061090:	2300      	movs	r3, #0
 8061092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8061094:	2300      	movs	r3, #0
 8061096:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BootPin_GPIO_Port, &GPIO_InitStruct);
 8061098:	f107 031c 	add.w	r3, r7, #28
 806109c:	4619      	mov	r1, r3
 806109e:	481d      	ldr	r0, [pc, #116]	; (8061114 <MX_GPIO_Init+0x2c4>)
 80610a0:	f000 fdac 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80610a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80610a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80610aa:	2300      	movs	r3, #0
 80610ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80610ae:	2300      	movs	r3, #0
 80610b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80610b2:	f107 031c 	add.w	r3, r7, #28
 80610b6:	4619      	mov	r1, r3
 80610b8:	4816      	ldr	r0, [pc, #88]	; (8061114 <MX_GPIO_Init+0x2c4>)
 80610ba:	f000 fd9f 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80610be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80610c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80610c4:	2302      	movs	r3, #2
 80610c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80610c8:	2300      	movs	r3, #0
 80610ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80610cc:	2303      	movs	r3, #3
 80610ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80610d0:	230a      	movs	r3, #10
 80610d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80610d4:	f107 031c 	add.w	r3, r7, #28
 80610d8:	4619      	mov	r1, r3
 80610da:	480e      	ldr	r0, [pc, #56]	; (8061114 <MX_GPIO_Init+0x2c4>)
 80610dc:	f000 fd8e 	bl	8061bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80610e0:	2320      	movs	r3, #32
 80610e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80610e4:	2300      	movs	r3, #0
 80610e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80610e8:	2300      	movs	r3, #0
 80610ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80610ec:	f107 031c 	add.w	r3, r7, #28
 80610f0:	4619      	mov	r1, r3
 80610f2:	4807      	ldr	r0, [pc, #28]	; (8061110 <MX_GPIO_Init+0x2c0>)
 80610f4:	f000 fd82 	bl	8061bfc <HAL_GPIO_Init>

}
 80610f8:	bf00      	nop
 80610fa:	3730      	adds	r7, #48	; 0x30
 80610fc:	46bd      	mov	sp, r7
 80610fe:	bd80      	pop	{r7, pc}
 8061100:	40023800 	.word	0x40023800
 8061104:	40021000 	.word	0x40021000
 8061108:	40020800 	.word	0x40020800
 806110c:	40020400 	.word	0x40020400
 8061110:	40020c00 	.word	0x40020c00
 8061114:	40020000 	.word	0x40020000

08061118 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8061118:	b580      	push	{r7, lr}
 806111a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 806111c:	4b12      	ldr	r3, [pc, #72]	; (8061168 <MX_I2C1_Init+0x50>)
 806111e:	4a13      	ldr	r2, [pc, #76]	; (806116c <MX_I2C1_Init+0x54>)
 8061120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8061122:	4b11      	ldr	r3, [pc, #68]	; (8061168 <MX_I2C1_Init+0x50>)
 8061124:	4a12      	ldr	r2, [pc, #72]	; (8061170 <MX_I2C1_Init+0x58>)
 8061126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8061128:	4b0f      	ldr	r3, [pc, #60]	; (8061168 <MX_I2C1_Init+0x50>)
 806112a:	2200      	movs	r2, #0
 806112c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 806112e:	4b0e      	ldr	r3, [pc, #56]	; (8061168 <MX_I2C1_Init+0x50>)
 8061130:	2200      	movs	r2, #0
 8061132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8061134:	4b0c      	ldr	r3, [pc, #48]	; (8061168 <MX_I2C1_Init+0x50>)
 8061136:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 806113a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 806113c:	4b0a      	ldr	r3, [pc, #40]	; (8061168 <MX_I2C1_Init+0x50>)
 806113e:	2200      	movs	r2, #0
 8061140:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8061142:	4b09      	ldr	r3, [pc, #36]	; (8061168 <MX_I2C1_Init+0x50>)
 8061144:	2200      	movs	r2, #0
 8061146:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8061148:	4b07      	ldr	r3, [pc, #28]	; (8061168 <MX_I2C1_Init+0x50>)
 806114a:	2200      	movs	r2, #0
 806114c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 806114e:	4b06      	ldr	r3, [pc, #24]	; (8061168 <MX_I2C1_Init+0x50>)
 8061150:	2200      	movs	r2, #0
 8061152:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8061154:	4804      	ldr	r0, [pc, #16]	; (8061168 <MX_I2C1_Init+0x50>)
 8061156:	f001 f81f 	bl	8062198 <HAL_I2C_Init>
 806115a:	4603      	mov	r3, r0
 806115c:	2b00      	cmp	r3, #0
 806115e:	d001      	beq.n	8061164 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8061160:	f000 f8fa 	bl	8061358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8061164:	bf00      	nop
 8061166:	bd80      	pop	{r7, pc}
 8061168:	20005288 	.word	0x20005288
 806116c:	40005400 	.word	0x40005400
 8061170:	000186a0 	.word	0x000186a0

08061174 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8061174:	b580      	push	{r7, lr}
 8061176:	b08a      	sub	sp, #40	; 0x28
 8061178:	af00      	add	r7, sp, #0
 806117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 806117c:	f107 0314 	add.w	r3, r7, #20
 8061180:	2200      	movs	r2, #0
 8061182:	601a      	str	r2, [r3, #0]
 8061184:	605a      	str	r2, [r3, #4]
 8061186:	609a      	str	r2, [r3, #8]
 8061188:	60da      	str	r2, [r3, #12]
 806118a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 806118c:	687b      	ldr	r3, [r7, #4]
 806118e:	681b      	ldr	r3, [r3, #0]
 8061190:	4a19      	ldr	r2, [pc, #100]	; (80611f8 <HAL_I2C_MspInit+0x84>)
 8061192:	4293      	cmp	r3, r2
 8061194:	d12c      	bne.n	80611f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8061196:	2300      	movs	r3, #0
 8061198:	613b      	str	r3, [r7, #16]
 806119a:	4b18      	ldr	r3, [pc, #96]	; (80611fc <HAL_I2C_MspInit+0x88>)
 806119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806119e:	4a17      	ldr	r2, [pc, #92]	; (80611fc <HAL_I2C_MspInit+0x88>)
 80611a0:	f043 0302 	orr.w	r3, r3, #2
 80611a4:	6313      	str	r3, [r2, #48]	; 0x30
 80611a6:	4b15      	ldr	r3, [pc, #84]	; (80611fc <HAL_I2C_MspInit+0x88>)
 80611a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80611aa:	f003 0302 	and.w	r3, r3, #2
 80611ae:	613b      	str	r3, [r7, #16]
 80611b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80611b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80611b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80611b8:	2312      	movs	r3, #18
 80611ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80611bc:	2301      	movs	r3, #1
 80611be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80611c0:	2300      	movs	r3, #0
 80611c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80611c4:	2304      	movs	r3, #4
 80611c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80611c8:	f107 0314 	add.w	r3, r7, #20
 80611cc:	4619      	mov	r1, r3
 80611ce:	480c      	ldr	r0, [pc, #48]	; (8061200 <HAL_I2C_MspInit+0x8c>)
 80611d0:	f000 fd14 	bl	8061bfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80611d4:	2300      	movs	r3, #0
 80611d6:	60fb      	str	r3, [r7, #12]
 80611d8:	4b08      	ldr	r3, [pc, #32]	; (80611fc <HAL_I2C_MspInit+0x88>)
 80611da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80611dc:	4a07      	ldr	r2, [pc, #28]	; (80611fc <HAL_I2C_MspInit+0x88>)
 80611de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80611e2:	6413      	str	r3, [r2, #64]	; 0x40
 80611e4:	4b05      	ldr	r3, [pc, #20]	; (80611fc <HAL_I2C_MspInit+0x88>)
 80611e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80611e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80611ec:	60fb      	str	r3, [r7, #12]
 80611ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80611f0:	bf00      	nop
 80611f2:	3728      	adds	r7, #40	; 0x28
 80611f4:	46bd      	mov	sp, r7
 80611f6:	bd80      	pop	{r7, pc}
 80611f8:	40005400 	.word	0x40005400
 80611fc:	40023800 	.word	0x40023800
 8061200:	40020400 	.word	0x40020400

08061204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8061204:	b580      	push	{r7, lr}
 8061206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8061208:	f000 fad4 	bl	80617b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 806120c:	f000 f82a 	bl	8061264 <SystemClock_Config>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8061210:	b672      	cpsid	i
}
 8061212:	bf00      	nop

  /* USER CODE BEGIN SysInit */
  __disable_irq();
  SCB->VTOR = (FLASH_BASE | 0x60000U);
 8061214:	4b0f      	ldr	r3, [pc, #60]	; (8061254 <main+0x50>)
 8061216:	4a10      	ldr	r2, [pc, #64]	; (8061258 <main+0x54>)
 8061218:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 806121a:	b662      	cpsie	i
}
 806121c:	bf00      	nop
  __enable_irq();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 806121e:	f7ff fe17 	bl	8060e50 <MX_GPIO_Init>
  MX_I2C1_Init();
 8061222:	f7ff ff79 	bl	8061118 <MX_I2C1_Init>
  MX_SPI1_Init();
 8061226:	f000 f8a7 	bl	8061378 <MX_SPI1_Init>
  MX_FATFS_Init();
 806122a:	f003 ffcd 	bl	80651c8 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 806122e:	f000 fa1d 	bl	806166c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // delay needed for sd to stabilize as well as to make the upload
  // of new firmware possible (boot related issue);
  HAL_Delay(2000);
 8061232:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8061236:	f000 faff 	bl	8061838 <HAL_Delay>

  // run in the background receive from uart
  // in order to implment possibility to wake up
  HAL_UART_Receive_IT(&huart2, (uint8_t *)notification_buffer, 1);
 806123a:	2201      	movs	r2, #1
 806123c:	4907      	ldr	r1, [pc, #28]	; (806125c <main+0x58>)
 806123e:	4808      	ldr	r0, [pc, #32]	; (8061260 <main+0x5c>)
 8061240:	f003 f898 	bl	8064374 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8061244:	f007 faa0 	bl	8068788 <osKernelInitialize>
  MX_FREERTOS_Init();
 8061248:	f7ff f9ae 	bl	80605a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 806124c:	f007 fac0 	bl	80687d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8061250:	e7fe      	b.n	8061250 <main+0x4c>
 8061252:	bf00      	nop
 8061254:	e000ed00 	.word	0xe000ed00
 8061258:	08060000 	.word	0x08060000
 806125c:	20004bc0 	.word	0x20004bc0
 8061260:	2000537c 	.word	0x2000537c

08061264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8061264:	b580      	push	{r7, lr}
 8061266:	b094      	sub	sp, #80	; 0x50
 8061268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 806126a:	f107 0320 	add.w	r3, r7, #32
 806126e:	2230      	movs	r2, #48	; 0x30
 8061270:	2100      	movs	r1, #0
 8061272:	4618      	mov	r0, r3
 8061274:	f00b fa1c 	bl	806c6b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8061278:	f107 030c 	add.w	r3, r7, #12
 806127c:	2200      	movs	r2, #0
 806127e:	601a      	str	r2, [r3, #0]
 8061280:	605a      	str	r2, [r3, #4]
 8061282:	609a      	str	r2, [r3, #8]
 8061284:	60da      	str	r2, [r3, #12]
 8061286:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8061288:	2300      	movs	r3, #0
 806128a:	60bb      	str	r3, [r7, #8]
 806128c:	4b27      	ldr	r3, [pc, #156]	; (806132c <SystemClock_Config+0xc8>)
 806128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061290:	4a26      	ldr	r2, [pc, #152]	; (806132c <SystemClock_Config+0xc8>)
 8061292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8061296:	6413      	str	r3, [r2, #64]	; 0x40
 8061298:	4b24      	ldr	r3, [pc, #144]	; (806132c <SystemClock_Config+0xc8>)
 806129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80612a0:	60bb      	str	r3, [r7, #8]
 80612a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80612a4:	2300      	movs	r3, #0
 80612a6:	607b      	str	r3, [r7, #4]
 80612a8:	4b21      	ldr	r3, [pc, #132]	; (8061330 <SystemClock_Config+0xcc>)
 80612aa:	681b      	ldr	r3, [r3, #0]
 80612ac:	4a20      	ldr	r2, [pc, #128]	; (8061330 <SystemClock_Config+0xcc>)
 80612ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80612b2:	6013      	str	r3, [r2, #0]
 80612b4:	4b1e      	ldr	r3, [pc, #120]	; (8061330 <SystemClock_Config+0xcc>)
 80612b6:	681b      	ldr	r3, [r3, #0]
 80612b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80612bc:	607b      	str	r3, [r7, #4]
 80612be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80612c0:	2301      	movs	r3, #1
 80612c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80612c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80612c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80612ca:	2302      	movs	r3, #2
 80612cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80612ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80612d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80612d4:	2304      	movs	r3, #4
 80612d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80612d8:	23c0      	movs	r3, #192	; 0xc0
 80612da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80612dc:	2304      	movs	r3, #4
 80612de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80612e0:	2308      	movs	r3, #8
 80612e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80612e4:	f107 0320 	add.w	r3, r7, #32
 80612e8:	4618      	mov	r0, r3
 80612ea:	f001 f921 	bl	8062530 <HAL_RCC_OscConfig>
 80612ee:	4603      	mov	r3, r0
 80612f0:	2b00      	cmp	r3, #0
 80612f2:	d001      	beq.n	80612f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80612f4:	f000 f830 	bl	8061358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80612f8:	230f      	movs	r3, #15
 80612fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80612fc:	2302      	movs	r3, #2
 80612fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8061300:	2300      	movs	r3, #0
 8061302:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8061304:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8061308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 806130a:	2300      	movs	r3, #0
 806130c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 806130e:	f107 030c 	add.w	r3, r7, #12
 8061312:	2103      	movs	r1, #3
 8061314:	4618      	mov	r0, r3
 8061316:	f001 fc33 	bl	8062b80 <HAL_RCC_ClockConfig>
 806131a:	4603      	mov	r3, r0
 806131c:	2b00      	cmp	r3, #0
 806131e:	d001      	beq.n	8061324 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8061320:	f000 f81a 	bl	8061358 <Error_Handler>
  }
}
 8061324:	bf00      	nop
 8061326:	3750      	adds	r7, #80	; 0x50
 8061328:	46bd      	mov	sp, r7
 806132a:	bd80      	pop	{r7, pc}
 806132c:	40023800 	.word	0x40023800
 8061330:	40007000 	.word	0x40007000

08061334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8061334:	b580      	push	{r7, lr}
 8061336:	b082      	sub	sp, #8
 8061338:	af00      	add	r7, sp, #0
 806133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 806133c:	687b      	ldr	r3, [r7, #4]
 806133e:	681b      	ldr	r3, [r3, #0]
 8061340:	4a04      	ldr	r2, [pc, #16]	; (8061354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8061342:	4293      	cmp	r3, r2
 8061344:	d101      	bne.n	806134a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8061346:	f000 fa57 	bl	80617f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 806134a:	bf00      	nop
 806134c:	3708      	adds	r7, #8
 806134e:	46bd      	mov	sp, r7
 8061350:	bd80      	pop	{r7, pc}
 8061352:	bf00      	nop
 8061354:	40000c00 	.word	0x40000c00

08061358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8061358:	b480      	push	{r7}
 806135a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 806135c:	b672      	cpsid	i
}
 806135e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8061360:	e7fe      	b.n	8061360 <Error_Handler+0x8>

08061362 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8061362:	b480      	push	{r7}
 8061364:	b083      	sub	sp, #12
 8061366:	af00      	add	r7, sp, #0
 8061368:	6078      	str	r0, [r7, #4]
 806136a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 806136c:	bf00      	nop
 806136e:	370c      	adds	r7, #12
 8061370:	46bd      	mov	sp, r7
 8061372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061376:	4770      	bx	lr

08061378 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8061378:	b580      	push	{r7, lr}
 806137a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 806137c:	4b17      	ldr	r3, [pc, #92]	; (80613dc <MX_SPI1_Init+0x64>)
 806137e:	4a18      	ldr	r2, [pc, #96]	; (80613e0 <MX_SPI1_Init+0x68>)
 8061380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8061382:	4b16      	ldr	r3, [pc, #88]	; (80613dc <MX_SPI1_Init+0x64>)
 8061384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8061388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 806138a:	4b14      	ldr	r3, [pc, #80]	; (80613dc <MX_SPI1_Init+0x64>)
 806138c:	2200      	movs	r2, #0
 806138e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8061390:	4b12      	ldr	r3, [pc, #72]	; (80613dc <MX_SPI1_Init+0x64>)
 8061392:	2200      	movs	r2, #0
 8061394:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8061396:	4b11      	ldr	r3, [pc, #68]	; (80613dc <MX_SPI1_Init+0x64>)
 8061398:	2200      	movs	r2, #0
 806139a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 806139c:	4b0f      	ldr	r3, [pc, #60]	; (80613dc <MX_SPI1_Init+0x64>)
 806139e:	2200      	movs	r2, #0
 80613a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80613a2:	4b0e      	ldr	r3, [pc, #56]	; (80613dc <MX_SPI1_Init+0x64>)
 80613a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80613a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80613aa:	4b0c      	ldr	r3, [pc, #48]	; (80613dc <MX_SPI1_Init+0x64>)
 80613ac:	2230      	movs	r2, #48	; 0x30
 80613ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80613b0:	4b0a      	ldr	r3, [pc, #40]	; (80613dc <MX_SPI1_Init+0x64>)
 80613b2:	2200      	movs	r2, #0
 80613b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80613b6:	4b09      	ldr	r3, [pc, #36]	; (80613dc <MX_SPI1_Init+0x64>)
 80613b8:	2200      	movs	r2, #0
 80613ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80613bc:	4b07      	ldr	r3, [pc, #28]	; (80613dc <MX_SPI1_Init+0x64>)
 80613be:	2200      	movs	r2, #0
 80613c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80613c2:	4b06      	ldr	r3, [pc, #24]	; (80613dc <MX_SPI1_Init+0x64>)
 80613c4:	220a      	movs	r2, #10
 80613c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80613c8:	4804      	ldr	r0, [pc, #16]	; (80613dc <MX_SPI1_Init+0x64>)
 80613ca:	f001 feaf 	bl	806312c <HAL_SPI_Init>
 80613ce:	4603      	mov	r3, r0
 80613d0:	2b00      	cmp	r3, #0
 80613d2:	d001      	beq.n	80613d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80613d4:	f7ff ffc0 	bl	8061358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80613d8:	bf00      	nop
 80613da:	bd80      	pop	{r7, pc}
 80613dc:	200052dc 	.word	0x200052dc
 80613e0:	40013000 	.word	0x40013000

080613e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80613e4:	b580      	push	{r7, lr}
 80613e6:	b08a      	sub	sp, #40	; 0x28
 80613e8:	af00      	add	r7, sp, #0
 80613ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80613ec:	f107 0314 	add.w	r3, r7, #20
 80613f0:	2200      	movs	r2, #0
 80613f2:	601a      	str	r2, [r3, #0]
 80613f4:	605a      	str	r2, [r3, #4]
 80613f6:	609a      	str	r2, [r3, #8]
 80613f8:	60da      	str	r2, [r3, #12]
 80613fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80613fc:	687b      	ldr	r3, [r7, #4]
 80613fe:	681b      	ldr	r3, [r3, #0]
 8061400:	4a19      	ldr	r2, [pc, #100]	; (8061468 <HAL_SPI_MspInit+0x84>)
 8061402:	4293      	cmp	r3, r2
 8061404:	d12b      	bne.n	806145e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8061406:	2300      	movs	r3, #0
 8061408:	613b      	str	r3, [r7, #16]
 806140a:	4b18      	ldr	r3, [pc, #96]	; (806146c <HAL_SPI_MspInit+0x88>)
 806140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806140e:	4a17      	ldr	r2, [pc, #92]	; (806146c <HAL_SPI_MspInit+0x88>)
 8061410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8061414:	6453      	str	r3, [r2, #68]	; 0x44
 8061416:	4b15      	ldr	r3, [pc, #84]	; (806146c <HAL_SPI_MspInit+0x88>)
 8061418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806141a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 806141e:	613b      	str	r3, [r7, #16]
 8061420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8061422:	2300      	movs	r3, #0
 8061424:	60fb      	str	r3, [r7, #12]
 8061426:	4b11      	ldr	r3, [pc, #68]	; (806146c <HAL_SPI_MspInit+0x88>)
 8061428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806142a:	4a10      	ldr	r2, [pc, #64]	; (806146c <HAL_SPI_MspInit+0x88>)
 806142c:	f043 0301 	orr.w	r3, r3, #1
 8061430:	6313      	str	r3, [r2, #48]	; 0x30
 8061432:	4b0e      	ldr	r3, [pc, #56]	; (806146c <HAL_SPI_MspInit+0x88>)
 8061434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061436:	f003 0301 	and.w	r3, r3, #1
 806143a:	60fb      	str	r3, [r7, #12]
 806143c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 806143e:	23e0      	movs	r3, #224	; 0xe0
 8061440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8061442:	2302      	movs	r3, #2
 8061444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8061446:	2301      	movs	r3, #1
 8061448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 806144a:	2303      	movs	r3, #3
 806144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 806144e:	2305      	movs	r3, #5
 8061450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8061452:	f107 0314 	add.w	r3, r7, #20
 8061456:	4619      	mov	r1, r3
 8061458:	4805      	ldr	r0, [pc, #20]	; (8061470 <HAL_SPI_MspInit+0x8c>)
 806145a:	f000 fbcf 	bl	8061bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 806145e:	bf00      	nop
 8061460:	3728      	adds	r7, #40	; 0x28
 8061462:	46bd      	mov	sp, r7
 8061464:	bd80      	pop	{r7, pc}
 8061466:	bf00      	nop
 8061468:	40013000 	.word	0x40013000
 806146c:	40023800 	.word	0x40023800
 8061470:	40020000 	.word	0x40020000

08061474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8061474:	b580      	push	{r7, lr}
 8061476:	b082      	sub	sp, #8
 8061478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 806147a:	2300      	movs	r3, #0
 806147c:	607b      	str	r3, [r7, #4]
 806147e:	4b12      	ldr	r3, [pc, #72]	; (80614c8 <HAL_MspInit+0x54>)
 8061480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8061482:	4a11      	ldr	r2, [pc, #68]	; (80614c8 <HAL_MspInit+0x54>)
 8061484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8061488:	6453      	str	r3, [r2, #68]	; 0x44
 806148a:	4b0f      	ldr	r3, [pc, #60]	; (80614c8 <HAL_MspInit+0x54>)
 806148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8061492:	607b      	str	r3, [r7, #4]
 8061494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8061496:	2300      	movs	r3, #0
 8061498:	603b      	str	r3, [r7, #0]
 806149a:	4b0b      	ldr	r3, [pc, #44]	; (80614c8 <HAL_MspInit+0x54>)
 806149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806149e:	4a0a      	ldr	r2, [pc, #40]	; (80614c8 <HAL_MspInit+0x54>)
 80614a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80614a4:	6413      	str	r3, [r2, #64]	; 0x40
 80614a6:	4b08      	ldr	r3, [pc, #32]	; (80614c8 <HAL_MspInit+0x54>)
 80614a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80614aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80614ae:	603b      	str	r3, [r7, #0]
 80614b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80614b2:	2200      	movs	r2, #0
 80614b4:	210f      	movs	r1, #15
 80614b6:	f06f 0001 	mvn.w	r0, #1
 80614ba:	f000 fac5 	bl	8061a48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80614be:	bf00      	nop
 80614c0:	3708      	adds	r7, #8
 80614c2:	46bd      	mov	sp, r7
 80614c4:	bd80      	pop	{r7, pc}
 80614c6:	bf00      	nop
 80614c8:	40023800 	.word	0x40023800

080614cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80614cc:	b580      	push	{r7, lr}
 80614ce:	b08c      	sub	sp, #48	; 0x30
 80614d0:	af00      	add	r7, sp, #0
 80614d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80614d4:	2300      	movs	r3, #0
 80614d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80614d8:	2300      	movs	r3, #0
 80614da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80614dc:	2200      	movs	r2, #0
 80614de:	6879      	ldr	r1, [r7, #4]
 80614e0:	2032      	movs	r0, #50	; 0x32
 80614e2:	f000 fab1 	bl	8061a48 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80614e6:	2032      	movs	r0, #50	; 0x32
 80614e8:	f000 fada 	bl	8061aa0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80614ec:	2300      	movs	r3, #0
 80614ee:	60fb      	str	r3, [r7, #12]
 80614f0:	4b1f      	ldr	r3, [pc, #124]	; (8061570 <HAL_InitTick+0xa4>)
 80614f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80614f4:	4a1e      	ldr	r2, [pc, #120]	; (8061570 <HAL_InitTick+0xa4>)
 80614f6:	f043 0308 	orr.w	r3, r3, #8
 80614fa:	6413      	str	r3, [r2, #64]	; 0x40
 80614fc:	4b1c      	ldr	r3, [pc, #112]	; (8061570 <HAL_InitTick+0xa4>)
 80614fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061500:	f003 0308 	and.w	r3, r3, #8
 8061504:	60fb      	str	r3, [r7, #12]
 8061506:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8061508:	f107 0210 	add.w	r2, r7, #16
 806150c:	f107 0314 	add.w	r3, r7, #20
 8061510:	4611      	mov	r1, r2
 8061512:	4618      	mov	r0, r3
 8061514:	f001 fdd8 	bl	80630c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8061518:	f001 fdae 	bl	8063078 <HAL_RCC_GetPCLK1Freq>
 806151c:	4603      	mov	r3, r0
 806151e:	005b      	lsls	r3, r3, #1
 8061520:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8061522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8061524:	4a13      	ldr	r2, [pc, #76]	; (8061574 <HAL_InitTick+0xa8>)
 8061526:	fba2 2303 	umull	r2, r3, r2, r3
 806152a:	0c9b      	lsrs	r3, r3, #18
 806152c:	3b01      	subs	r3, #1
 806152e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8061530:	4b11      	ldr	r3, [pc, #68]	; (8061578 <HAL_InitTick+0xac>)
 8061532:	4a12      	ldr	r2, [pc, #72]	; (806157c <HAL_InitTick+0xb0>)
 8061534:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8061536:	4b10      	ldr	r3, [pc, #64]	; (8061578 <HAL_InitTick+0xac>)
 8061538:	f240 32e7 	movw	r2, #999	; 0x3e7
 806153c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 806153e:	4a0e      	ldr	r2, [pc, #56]	; (8061578 <HAL_InitTick+0xac>)
 8061540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8061542:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8061544:	4b0c      	ldr	r3, [pc, #48]	; (8061578 <HAL_InitTick+0xac>)
 8061546:	2200      	movs	r2, #0
 8061548:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 806154a:	4b0b      	ldr	r3, [pc, #44]	; (8061578 <HAL_InitTick+0xac>)
 806154c:	2200      	movs	r2, #0
 806154e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8061550:	4809      	ldr	r0, [pc, #36]	; (8061578 <HAL_InitTick+0xac>)
 8061552:	f002 f9ff 	bl	8063954 <HAL_TIM_Base_Init>
 8061556:	4603      	mov	r3, r0
 8061558:	2b00      	cmp	r3, #0
 806155a:	d104      	bne.n	8061566 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 806155c:	4806      	ldr	r0, [pc, #24]	; (8061578 <HAL_InitTick+0xac>)
 806155e:	f002 fac9 	bl	8063af4 <HAL_TIM_Base_Start_IT>
 8061562:	4603      	mov	r3, r0
 8061564:	e000      	b.n	8061568 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8061566:	2301      	movs	r3, #1
}
 8061568:	4618      	mov	r0, r3
 806156a:	3730      	adds	r7, #48	; 0x30
 806156c:	46bd      	mov	sp, r7
 806156e:	bd80      	pop	{r7, pc}
 8061570:	40023800 	.word	0x40023800
 8061574:	431bde83 	.word	0x431bde83
 8061578:	20005334 	.word	0x20005334
 806157c:	40000c00 	.word	0x40000c00

08061580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8061580:	b480      	push	{r7}
 8061582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8061584:	e7fe      	b.n	8061584 <NMI_Handler+0x4>

08061586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8061586:	b480      	push	{r7}
 8061588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 806158a:	e7fe      	b.n	806158a <HardFault_Handler+0x4>

0806158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 806158c:	b480      	push	{r7}
 806158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8061590:	e7fe      	b.n	8061590 <MemManage_Handler+0x4>

08061592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8061592:	b480      	push	{r7}
 8061594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8061596:	e7fe      	b.n	8061596 <BusFault_Handler+0x4>

08061598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8061598:	b480      	push	{r7}
 806159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 806159c:	e7fe      	b.n	806159c <UsageFault_Handler+0x4>

0806159e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 806159e:	b480      	push	{r7}
 80615a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80615a2:	bf00      	nop
 80615a4:	46bd      	mov	sp, r7
 80615a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80615aa:	4770      	bx	lr

080615ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80615ac:	b580      	push	{r7, lr}
 80615ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80615b0:	4802      	ldr	r0, [pc, #8]	; (80615bc <USART2_IRQHandler+0x10>)
 80615b2:	f002 ff0f 	bl	80643d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80615b6:	bf00      	nop
 80615b8:	bd80      	pop	{r7, pc}
 80615ba:	bf00      	nop
 80615bc:	2000537c 	.word	0x2000537c

080615c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80615c0:	b580      	push	{r7, lr}
 80615c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80615c4:	4802      	ldr	r0, [pc, #8]	; (80615d0 <TIM5_IRQHandler+0x10>)
 80615c6:	f002 fb27 	bl	8063c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80615ca:	bf00      	nop
 80615cc:	bd80      	pop	{r7, pc}
 80615ce:	bf00      	nop
 80615d0:	20005334 	.word	0x20005334

080615d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80615d4:	b580      	push	{r7, lr}
 80615d6:	b086      	sub	sp, #24
 80615d8:	af00      	add	r7, sp, #0
 80615da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80615dc:	4a14      	ldr	r2, [pc, #80]	; (8061630 <_sbrk+0x5c>)
 80615de:	4b15      	ldr	r3, [pc, #84]	; (8061634 <_sbrk+0x60>)
 80615e0:	1ad3      	subs	r3, r2, r3
 80615e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80615e4:	697b      	ldr	r3, [r7, #20]
 80615e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80615e8:	4b13      	ldr	r3, [pc, #76]	; (8061638 <_sbrk+0x64>)
 80615ea:	681b      	ldr	r3, [r3, #0]
 80615ec:	2b00      	cmp	r3, #0
 80615ee:	d102      	bne.n	80615f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80615f0:	4b11      	ldr	r3, [pc, #68]	; (8061638 <_sbrk+0x64>)
 80615f2:	4a12      	ldr	r2, [pc, #72]	; (806163c <_sbrk+0x68>)
 80615f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80615f6:	4b10      	ldr	r3, [pc, #64]	; (8061638 <_sbrk+0x64>)
 80615f8:	681a      	ldr	r2, [r3, #0]
 80615fa:	687b      	ldr	r3, [r7, #4]
 80615fc:	4413      	add	r3, r2
 80615fe:	693a      	ldr	r2, [r7, #16]
 8061600:	429a      	cmp	r2, r3
 8061602:	d207      	bcs.n	8061614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8061604:	f00b f81a 	bl	806c63c <__errno>
 8061608:	4603      	mov	r3, r0
 806160a:	220c      	movs	r2, #12
 806160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 806160e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8061612:	e009      	b.n	8061628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8061614:	4b08      	ldr	r3, [pc, #32]	; (8061638 <_sbrk+0x64>)
 8061616:	681b      	ldr	r3, [r3, #0]
 8061618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 806161a:	4b07      	ldr	r3, [pc, #28]	; (8061638 <_sbrk+0x64>)
 806161c:	681a      	ldr	r2, [r3, #0]
 806161e:	687b      	ldr	r3, [r7, #4]
 8061620:	4413      	add	r3, r2
 8061622:	4a05      	ldr	r2, [pc, #20]	; (8061638 <_sbrk+0x64>)
 8061624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8061626:	68fb      	ldr	r3, [r7, #12]
}
 8061628:	4618      	mov	r0, r3
 806162a:	3718      	adds	r7, #24
 806162c:	46bd      	mov	sp, r7
 806162e:	bd80      	pop	{r7, pc}
 8061630:	20020000 	.word	0x20020000
 8061634:	00000400 	.word	0x00000400
 8061638:	200001a8 	.word	0x200001a8
 806163c:	20005888 	.word	0x20005888

08061640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8061640:	b480      	push	{r7}
 8061642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8061644:	4b07      	ldr	r3, [pc, #28]	; (8061664 <SystemInit+0x24>)
 8061646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 806164a:	4a06      	ldr	r2, [pc, #24]	; (8061664 <SystemInit+0x24>)
 806164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8061650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8061654:	4b03      	ldr	r3, [pc, #12]	; (8061664 <SystemInit+0x24>)
 8061656:	4a04      	ldr	r2, [pc, #16]	; (8061668 <SystemInit+0x28>)
 8061658:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 806165a:	bf00      	nop
 806165c:	46bd      	mov	sp, r7
 806165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061662:	4770      	bx	lr
 8061664:	e000ed00 	.word	0xe000ed00
 8061668:	08060000 	.word	0x08060000

0806166c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 806166c:	b580      	push	{r7, lr}
 806166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8061670:	4b11      	ldr	r3, [pc, #68]	; (80616b8 <MX_USART2_UART_Init+0x4c>)
 8061672:	4a12      	ldr	r2, [pc, #72]	; (80616bc <MX_USART2_UART_Init+0x50>)
 8061674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8061676:	4b10      	ldr	r3, [pc, #64]	; (80616b8 <MX_USART2_UART_Init+0x4c>)
 8061678:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 806167c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 806167e:	4b0e      	ldr	r3, [pc, #56]	; (80616b8 <MX_USART2_UART_Init+0x4c>)
 8061680:	2200      	movs	r2, #0
 8061682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8061684:	4b0c      	ldr	r3, [pc, #48]	; (80616b8 <MX_USART2_UART_Init+0x4c>)
 8061686:	2200      	movs	r2, #0
 8061688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 806168a:	4b0b      	ldr	r3, [pc, #44]	; (80616b8 <MX_USART2_UART_Init+0x4c>)
 806168c:	2200      	movs	r2, #0
 806168e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8061690:	4b09      	ldr	r3, [pc, #36]	; (80616b8 <MX_USART2_UART_Init+0x4c>)
 8061692:	220c      	movs	r2, #12
 8061694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8061696:	4b08      	ldr	r3, [pc, #32]	; (80616b8 <MX_USART2_UART_Init+0x4c>)
 8061698:	2200      	movs	r2, #0
 806169a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 806169c:	4b06      	ldr	r3, [pc, #24]	; (80616b8 <MX_USART2_UART_Init+0x4c>)
 806169e:	2200      	movs	r2, #0
 80616a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80616a2:	4805      	ldr	r0, [pc, #20]	; (80616b8 <MX_USART2_UART_Init+0x4c>)
 80616a4:	f002 fc7c 	bl	8063fa0 <HAL_UART_Init>
 80616a8:	4603      	mov	r3, r0
 80616aa:	2b00      	cmp	r3, #0
 80616ac:	d001      	beq.n	80616b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80616ae:	f7ff fe53 	bl	8061358 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80616b2:	bf00      	nop
 80616b4:	bd80      	pop	{r7, pc}
 80616b6:	bf00      	nop
 80616b8:	2000537c 	.word	0x2000537c
 80616bc:	40004400 	.word	0x40004400

080616c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80616c0:	b580      	push	{r7, lr}
 80616c2:	b08a      	sub	sp, #40	; 0x28
 80616c4:	af00      	add	r7, sp, #0
 80616c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80616c8:	f107 0314 	add.w	r3, r7, #20
 80616cc:	2200      	movs	r2, #0
 80616ce:	601a      	str	r2, [r3, #0]
 80616d0:	605a      	str	r2, [r3, #4]
 80616d2:	609a      	str	r2, [r3, #8]
 80616d4:	60da      	str	r2, [r3, #12]
 80616d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80616d8:	687b      	ldr	r3, [r7, #4]
 80616da:	681b      	ldr	r3, [r3, #0]
 80616dc:	4a1d      	ldr	r2, [pc, #116]	; (8061754 <HAL_UART_MspInit+0x94>)
 80616de:	4293      	cmp	r3, r2
 80616e0:	d133      	bne.n	806174a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80616e2:	2300      	movs	r3, #0
 80616e4:	613b      	str	r3, [r7, #16]
 80616e6:	4b1c      	ldr	r3, [pc, #112]	; (8061758 <HAL_UART_MspInit+0x98>)
 80616e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80616ea:	4a1b      	ldr	r2, [pc, #108]	; (8061758 <HAL_UART_MspInit+0x98>)
 80616ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80616f0:	6413      	str	r3, [r2, #64]	; 0x40
 80616f2:	4b19      	ldr	r3, [pc, #100]	; (8061758 <HAL_UART_MspInit+0x98>)
 80616f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80616f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80616fa:	613b      	str	r3, [r7, #16]
 80616fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80616fe:	2300      	movs	r3, #0
 8061700:	60fb      	str	r3, [r7, #12]
 8061702:	4b15      	ldr	r3, [pc, #84]	; (8061758 <HAL_UART_MspInit+0x98>)
 8061704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061706:	4a14      	ldr	r2, [pc, #80]	; (8061758 <HAL_UART_MspInit+0x98>)
 8061708:	f043 0301 	orr.w	r3, r3, #1
 806170c:	6313      	str	r3, [r2, #48]	; 0x30
 806170e:	4b12      	ldr	r3, [pc, #72]	; (8061758 <HAL_UART_MspInit+0x98>)
 8061710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061712:	f003 0301 	and.w	r3, r3, #1
 8061716:	60fb      	str	r3, [r7, #12]
 8061718:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 806171a:	230c      	movs	r3, #12
 806171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 806171e:	2302      	movs	r3, #2
 8061720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8061722:	2300      	movs	r3, #0
 8061724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8061726:	2303      	movs	r3, #3
 8061728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 806172a:	2307      	movs	r3, #7
 806172c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 806172e:	f107 0314 	add.w	r3, r7, #20
 8061732:	4619      	mov	r1, r3
 8061734:	4809      	ldr	r0, [pc, #36]	; (806175c <HAL_UART_MspInit+0x9c>)
 8061736:	f000 fa61 	bl	8061bfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 806173a:	2200      	movs	r2, #0
 806173c:	2105      	movs	r1, #5
 806173e:	2026      	movs	r0, #38	; 0x26
 8061740:	f000 f982 	bl	8061a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8061744:	2026      	movs	r0, #38	; 0x26
 8061746:	f000 f9ab 	bl	8061aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 806174a:	bf00      	nop
 806174c:	3728      	adds	r7, #40	; 0x28
 806174e:	46bd      	mov	sp, r7
 8061750:	bd80      	pop	{r7, pc}
 8061752:	bf00      	nop
 8061754:	40004400 	.word	0x40004400
 8061758:	40023800 	.word	0x40023800
 806175c:	40020000 	.word	0x40020000

08061760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8061760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8061798 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8061764:	480d      	ldr	r0, [pc, #52]	; (806179c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8061766:	490e      	ldr	r1, [pc, #56]	; (80617a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8061768:	4a0e      	ldr	r2, [pc, #56]	; (80617a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 806176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 806176c:	e002      	b.n	8061774 <LoopCopyDataInit>

0806176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 806176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8061770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8061772:	3304      	adds	r3, #4

08061774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8061774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8061776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8061778:	d3f9      	bcc.n	806176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 806177a:	4a0b      	ldr	r2, [pc, #44]	; (80617a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 806177c:	4c0b      	ldr	r4, [pc, #44]	; (80617ac <LoopFillZerobss+0x26>)
  movs r3, #0
 806177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8061780:	e001      	b.n	8061786 <LoopFillZerobss>

08061782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8061782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8061784:	3204      	adds	r2, #4

08061786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8061786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8061788:	d3fb      	bcc.n	8061782 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 806178a:	f7ff ff59 	bl	8061640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 806178e:	f00a ff5b 	bl	806c648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8061792:	f7ff fd37 	bl	8061204 <main>
  bx  lr    
 8061796:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8061798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 806179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80617a0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80617a4:	0806d6f0 	.word	0x0806d6f0
  ldr r2, =_sbss
 80617a8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80617ac:	20005888 	.word	0x20005888

080617b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80617b0:	e7fe      	b.n	80617b0 <ADC_IRQHandler>
	...

080617b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80617b4:	b580      	push	{r7, lr}
 80617b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80617b8:	4b0e      	ldr	r3, [pc, #56]	; (80617f4 <HAL_Init+0x40>)
 80617ba:	681b      	ldr	r3, [r3, #0]
 80617bc:	4a0d      	ldr	r2, [pc, #52]	; (80617f4 <HAL_Init+0x40>)
 80617be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80617c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80617c4:	4b0b      	ldr	r3, [pc, #44]	; (80617f4 <HAL_Init+0x40>)
 80617c6:	681b      	ldr	r3, [r3, #0]
 80617c8:	4a0a      	ldr	r2, [pc, #40]	; (80617f4 <HAL_Init+0x40>)
 80617ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80617ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80617d0:	4b08      	ldr	r3, [pc, #32]	; (80617f4 <HAL_Init+0x40>)
 80617d2:	681b      	ldr	r3, [r3, #0]
 80617d4:	4a07      	ldr	r2, [pc, #28]	; (80617f4 <HAL_Init+0x40>)
 80617d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80617da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80617dc:	2003      	movs	r0, #3
 80617de:	f000 f913 	bl	8061a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80617e2:	200f      	movs	r0, #15
 80617e4:	f7ff fe72 	bl	80614cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80617e8:	f7ff fe44 	bl	8061474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80617ec:	2300      	movs	r3, #0
}
 80617ee:	4618      	mov	r0, r3
 80617f0:	bd80      	pop	{r7, pc}
 80617f2:	bf00      	nop
 80617f4:	40023c00 	.word	0x40023c00

080617f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80617f8:	b480      	push	{r7}
 80617fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80617fc:	4b06      	ldr	r3, [pc, #24]	; (8061818 <HAL_IncTick+0x20>)
 80617fe:	781b      	ldrb	r3, [r3, #0]
 8061800:	461a      	mov	r2, r3
 8061802:	4b06      	ldr	r3, [pc, #24]	; (806181c <HAL_IncTick+0x24>)
 8061804:	681b      	ldr	r3, [r3, #0]
 8061806:	4413      	add	r3, r2
 8061808:	4a04      	ldr	r2, [pc, #16]	; (806181c <HAL_IncTick+0x24>)
 806180a:	6013      	str	r3, [r2, #0]
}
 806180c:	bf00      	nop
 806180e:	46bd      	mov	sp, r7
 8061810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061814:	4770      	bx	lr
 8061816:	bf00      	nop
 8061818:	20000008 	.word	0x20000008
 806181c:	200053c0 	.word	0x200053c0

08061820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8061820:	b480      	push	{r7}
 8061822:	af00      	add	r7, sp, #0
  return uwTick;
 8061824:	4b03      	ldr	r3, [pc, #12]	; (8061834 <HAL_GetTick+0x14>)
 8061826:	681b      	ldr	r3, [r3, #0]
}
 8061828:	4618      	mov	r0, r3
 806182a:	46bd      	mov	sp, r7
 806182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061830:	4770      	bx	lr
 8061832:	bf00      	nop
 8061834:	200053c0 	.word	0x200053c0

08061838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8061838:	b580      	push	{r7, lr}
 806183a:	b084      	sub	sp, #16
 806183c:	af00      	add	r7, sp, #0
 806183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8061840:	f7ff ffee 	bl	8061820 <HAL_GetTick>
 8061844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8061846:	687b      	ldr	r3, [r7, #4]
 8061848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 806184a:	68fb      	ldr	r3, [r7, #12]
 806184c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8061850:	d005      	beq.n	806185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8061852:	4b0a      	ldr	r3, [pc, #40]	; (806187c <HAL_Delay+0x44>)
 8061854:	781b      	ldrb	r3, [r3, #0]
 8061856:	461a      	mov	r2, r3
 8061858:	68fb      	ldr	r3, [r7, #12]
 806185a:	4413      	add	r3, r2
 806185c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 806185e:	bf00      	nop
 8061860:	f7ff ffde 	bl	8061820 <HAL_GetTick>
 8061864:	4602      	mov	r2, r0
 8061866:	68bb      	ldr	r3, [r7, #8]
 8061868:	1ad3      	subs	r3, r2, r3
 806186a:	68fa      	ldr	r2, [r7, #12]
 806186c:	429a      	cmp	r2, r3
 806186e:	d8f7      	bhi.n	8061860 <HAL_Delay+0x28>
  {
  }
}
 8061870:	bf00      	nop
 8061872:	bf00      	nop
 8061874:	3710      	adds	r7, #16
 8061876:	46bd      	mov	sp, r7
 8061878:	bd80      	pop	{r7, pc}
 806187a:	bf00      	nop
 806187c:	20000008 	.word	0x20000008

08061880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8061880:	b480      	push	{r7}
 8061882:	b085      	sub	sp, #20
 8061884:	af00      	add	r7, sp, #0
 8061886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8061888:	687b      	ldr	r3, [r7, #4]
 806188a:	f003 0307 	and.w	r3, r3, #7
 806188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8061890:	4b0c      	ldr	r3, [pc, #48]	; (80618c4 <__NVIC_SetPriorityGrouping+0x44>)
 8061892:	68db      	ldr	r3, [r3, #12]
 8061894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8061896:	68ba      	ldr	r2, [r7, #8]
 8061898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 806189c:	4013      	ands	r3, r2
 806189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80618a0:	68fb      	ldr	r3, [r7, #12]
 80618a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80618a4:	68bb      	ldr	r3, [r7, #8]
 80618a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80618a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80618ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80618b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80618b2:	4a04      	ldr	r2, [pc, #16]	; (80618c4 <__NVIC_SetPriorityGrouping+0x44>)
 80618b4:	68bb      	ldr	r3, [r7, #8]
 80618b6:	60d3      	str	r3, [r2, #12]
}
 80618b8:	bf00      	nop
 80618ba:	3714      	adds	r7, #20
 80618bc:	46bd      	mov	sp, r7
 80618be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80618c2:	4770      	bx	lr
 80618c4:	e000ed00 	.word	0xe000ed00

080618c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80618c8:	b480      	push	{r7}
 80618ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80618cc:	4b04      	ldr	r3, [pc, #16]	; (80618e0 <__NVIC_GetPriorityGrouping+0x18>)
 80618ce:	68db      	ldr	r3, [r3, #12]
 80618d0:	0a1b      	lsrs	r3, r3, #8
 80618d2:	f003 0307 	and.w	r3, r3, #7
}
 80618d6:	4618      	mov	r0, r3
 80618d8:	46bd      	mov	sp, r7
 80618da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80618de:	4770      	bx	lr
 80618e0:	e000ed00 	.word	0xe000ed00

080618e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80618e4:	b480      	push	{r7}
 80618e6:	b083      	sub	sp, #12
 80618e8:	af00      	add	r7, sp, #0
 80618ea:	4603      	mov	r3, r0
 80618ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80618ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80618f2:	2b00      	cmp	r3, #0
 80618f4:	db0b      	blt.n	806190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80618f6:	79fb      	ldrb	r3, [r7, #7]
 80618f8:	f003 021f 	and.w	r2, r3, #31
 80618fc:	4907      	ldr	r1, [pc, #28]	; (806191c <__NVIC_EnableIRQ+0x38>)
 80618fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8061902:	095b      	lsrs	r3, r3, #5
 8061904:	2001      	movs	r0, #1
 8061906:	fa00 f202 	lsl.w	r2, r0, r2
 806190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 806190e:	bf00      	nop
 8061910:	370c      	adds	r7, #12
 8061912:	46bd      	mov	sp, r7
 8061914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061918:	4770      	bx	lr
 806191a:	bf00      	nop
 806191c:	e000e100 	.word	0xe000e100

08061920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8061920:	b480      	push	{r7}
 8061922:	b083      	sub	sp, #12
 8061924:	af00      	add	r7, sp, #0
 8061926:	4603      	mov	r3, r0
 8061928:	6039      	str	r1, [r7, #0]
 806192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 806192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8061930:	2b00      	cmp	r3, #0
 8061932:	db0a      	blt.n	806194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8061934:	683b      	ldr	r3, [r7, #0]
 8061936:	b2da      	uxtb	r2, r3
 8061938:	490c      	ldr	r1, [pc, #48]	; (806196c <__NVIC_SetPriority+0x4c>)
 806193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806193e:	0112      	lsls	r2, r2, #4
 8061940:	b2d2      	uxtb	r2, r2
 8061942:	440b      	add	r3, r1
 8061944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8061948:	e00a      	b.n	8061960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806194a:	683b      	ldr	r3, [r7, #0]
 806194c:	b2da      	uxtb	r2, r3
 806194e:	4908      	ldr	r1, [pc, #32]	; (8061970 <__NVIC_SetPriority+0x50>)
 8061950:	79fb      	ldrb	r3, [r7, #7]
 8061952:	f003 030f 	and.w	r3, r3, #15
 8061956:	3b04      	subs	r3, #4
 8061958:	0112      	lsls	r2, r2, #4
 806195a:	b2d2      	uxtb	r2, r2
 806195c:	440b      	add	r3, r1
 806195e:	761a      	strb	r2, [r3, #24]
}
 8061960:	bf00      	nop
 8061962:	370c      	adds	r7, #12
 8061964:	46bd      	mov	sp, r7
 8061966:	f85d 7b04 	ldr.w	r7, [sp], #4
 806196a:	4770      	bx	lr
 806196c:	e000e100 	.word	0xe000e100
 8061970:	e000ed00 	.word	0xe000ed00

08061974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8061974:	b480      	push	{r7}
 8061976:	b089      	sub	sp, #36	; 0x24
 8061978:	af00      	add	r7, sp, #0
 806197a:	60f8      	str	r0, [r7, #12]
 806197c:	60b9      	str	r1, [r7, #8]
 806197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8061980:	68fb      	ldr	r3, [r7, #12]
 8061982:	f003 0307 	and.w	r3, r3, #7
 8061986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8061988:	69fb      	ldr	r3, [r7, #28]
 806198a:	f1c3 0307 	rsb	r3, r3, #7
 806198e:	2b04      	cmp	r3, #4
 8061990:	bf28      	it	cs
 8061992:	2304      	movcs	r3, #4
 8061994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8061996:	69fb      	ldr	r3, [r7, #28]
 8061998:	3304      	adds	r3, #4
 806199a:	2b06      	cmp	r3, #6
 806199c:	d902      	bls.n	80619a4 <NVIC_EncodePriority+0x30>
 806199e:	69fb      	ldr	r3, [r7, #28]
 80619a0:	3b03      	subs	r3, #3
 80619a2:	e000      	b.n	80619a6 <NVIC_EncodePriority+0x32>
 80619a4:	2300      	movs	r3, #0
 80619a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80619a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80619ac:	69bb      	ldr	r3, [r7, #24]
 80619ae:	fa02 f303 	lsl.w	r3, r2, r3
 80619b2:	43da      	mvns	r2, r3
 80619b4:	68bb      	ldr	r3, [r7, #8]
 80619b6:	401a      	ands	r2, r3
 80619b8:	697b      	ldr	r3, [r7, #20]
 80619ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80619bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80619c0:	697b      	ldr	r3, [r7, #20]
 80619c2:	fa01 f303 	lsl.w	r3, r1, r3
 80619c6:	43d9      	mvns	r1, r3
 80619c8:	687b      	ldr	r3, [r7, #4]
 80619ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80619cc:	4313      	orrs	r3, r2
         );
}
 80619ce:	4618      	mov	r0, r3
 80619d0:	3724      	adds	r7, #36	; 0x24
 80619d2:	46bd      	mov	sp, r7
 80619d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80619d8:	4770      	bx	lr
	...

080619dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80619dc:	b480      	push	{r7}
 80619de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80619e0:	f3bf 8f4f 	dsb	sy
}
 80619e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80619e6:	4b06      	ldr	r3, [pc, #24]	; (8061a00 <__NVIC_SystemReset+0x24>)
 80619e8:	68db      	ldr	r3, [r3, #12]
 80619ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80619ee:	4904      	ldr	r1, [pc, #16]	; (8061a00 <__NVIC_SystemReset+0x24>)
 80619f0:	4b04      	ldr	r3, [pc, #16]	; (8061a04 <__NVIC_SystemReset+0x28>)
 80619f2:	4313      	orrs	r3, r2
 80619f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80619f6:	f3bf 8f4f 	dsb	sy
}
 80619fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80619fc:	bf00      	nop
 80619fe:	e7fd      	b.n	80619fc <__NVIC_SystemReset+0x20>
 8061a00:	e000ed00 	.word	0xe000ed00
 8061a04:	05fa0004 	.word	0x05fa0004

08061a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8061a08:	b580      	push	{r7, lr}
 8061a0a:	b082      	sub	sp, #8
 8061a0c:	af00      	add	r7, sp, #0
 8061a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8061a10:	687b      	ldr	r3, [r7, #4]
 8061a12:	2b07      	cmp	r3, #7
 8061a14:	d00f      	beq.n	8061a36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8061a16:	687b      	ldr	r3, [r7, #4]
 8061a18:	2b06      	cmp	r3, #6
 8061a1a:	d00c      	beq.n	8061a36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8061a1c:	687b      	ldr	r3, [r7, #4]
 8061a1e:	2b05      	cmp	r3, #5
 8061a20:	d009      	beq.n	8061a36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8061a22:	687b      	ldr	r3, [r7, #4]
 8061a24:	2b04      	cmp	r3, #4
 8061a26:	d006      	beq.n	8061a36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8061a28:	687b      	ldr	r3, [r7, #4]
 8061a2a:	2b03      	cmp	r3, #3
 8061a2c:	d003      	beq.n	8061a36 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8061a2e:	2192      	movs	r1, #146	; 0x92
 8061a30:	4804      	ldr	r0, [pc, #16]	; (8061a44 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8061a32:	f7ff fc96 	bl	8061362 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8061a36:	6878      	ldr	r0, [r7, #4]
 8061a38:	f7ff ff22 	bl	8061880 <__NVIC_SetPriorityGrouping>
}
 8061a3c:	bf00      	nop
 8061a3e:	3708      	adds	r7, #8
 8061a40:	46bd      	mov	sp, r7
 8061a42:	bd80      	pop	{r7, pc}
 8061a44:	0806d2cc 	.word	0x0806d2cc

08061a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8061a48:	b580      	push	{r7, lr}
 8061a4a:	b086      	sub	sp, #24
 8061a4c:	af00      	add	r7, sp, #0
 8061a4e:	4603      	mov	r3, r0
 8061a50:	60b9      	str	r1, [r7, #8]
 8061a52:	607a      	str	r2, [r7, #4]
 8061a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8061a56:	2300      	movs	r3, #0
 8061a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8061a5a:	687b      	ldr	r3, [r7, #4]
 8061a5c:	2b0f      	cmp	r3, #15
 8061a5e:	d903      	bls.n	8061a68 <HAL_NVIC_SetPriority+0x20>
 8061a60:	21aa      	movs	r1, #170	; 0xaa
 8061a62:	480e      	ldr	r0, [pc, #56]	; (8061a9c <HAL_NVIC_SetPriority+0x54>)
 8061a64:	f7ff fc7d 	bl	8061362 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8061a68:	68bb      	ldr	r3, [r7, #8]
 8061a6a:	2b0f      	cmp	r3, #15
 8061a6c:	d903      	bls.n	8061a76 <HAL_NVIC_SetPriority+0x2e>
 8061a6e:	21ab      	movs	r1, #171	; 0xab
 8061a70:	480a      	ldr	r0, [pc, #40]	; (8061a9c <HAL_NVIC_SetPriority+0x54>)
 8061a72:	f7ff fc76 	bl	8061362 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8061a76:	f7ff ff27 	bl	80618c8 <__NVIC_GetPriorityGrouping>
 8061a7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8061a7c:	687a      	ldr	r2, [r7, #4]
 8061a7e:	68b9      	ldr	r1, [r7, #8]
 8061a80:	6978      	ldr	r0, [r7, #20]
 8061a82:	f7ff ff77 	bl	8061974 <NVIC_EncodePriority>
 8061a86:	4602      	mov	r2, r0
 8061a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8061a8c:	4611      	mov	r1, r2
 8061a8e:	4618      	mov	r0, r3
 8061a90:	f7ff ff46 	bl	8061920 <__NVIC_SetPriority>
}
 8061a94:	bf00      	nop
 8061a96:	3718      	adds	r7, #24
 8061a98:	46bd      	mov	sp, r7
 8061a9a:	bd80      	pop	{r7, pc}
 8061a9c:	0806d2cc 	.word	0x0806d2cc

08061aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8061aa0:	b580      	push	{r7, lr}
 8061aa2:	b082      	sub	sp, #8
 8061aa4:	af00      	add	r7, sp, #0
 8061aa6:	4603      	mov	r3, r0
 8061aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8061aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8061aae:	2b00      	cmp	r3, #0
 8061ab0:	da03      	bge.n	8061aba <HAL_NVIC_EnableIRQ+0x1a>
 8061ab2:	21be      	movs	r1, #190	; 0xbe
 8061ab4:	4805      	ldr	r0, [pc, #20]	; (8061acc <HAL_NVIC_EnableIRQ+0x2c>)
 8061ab6:	f7ff fc54 	bl	8061362 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8061aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8061abe:	4618      	mov	r0, r3
 8061ac0:	f7ff ff10 	bl	80618e4 <__NVIC_EnableIRQ>
}
 8061ac4:	bf00      	nop
 8061ac6:	3708      	adds	r7, #8
 8061ac8:	46bd      	mov	sp, r7
 8061aca:	bd80      	pop	{r7, pc}
 8061acc:	0806d2cc 	.word	0x0806d2cc

08061ad0 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8061ad0:	b580      	push	{r7, lr}
 8061ad2:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8061ad4:	f7ff ff82 	bl	80619dc <__NVIC_SystemReset>

08061ad8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8061ad8:	b580      	push	{r7, lr}
 8061ada:	b084      	sub	sp, #16
 8061adc:	af00      	add	r7, sp, #0
 8061ade:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8061ae0:	687b      	ldr	r3, [r7, #4]
 8061ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8061ae4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8061ae6:	f7ff fe9b 	bl	8061820 <HAL_GetTick>
 8061aea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8061aec:	687b      	ldr	r3, [r7, #4]
 8061aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8061af2:	b2db      	uxtb	r3, r3
 8061af4:	2b02      	cmp	r3, #2
 8061af6:	d008      	beq.n	8061b0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8061af8:	687b      	ldr	r3, [r7, #4]
 8061afa:	2280      	movs	r2, #128	; 0x80
 8061afc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8061afe:	687b      	ldr	r3, [r7, #4]
 8061b00:	2200      	movs	r2, #0
 8061b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8061b06:	2301      	movs	r3, #1
 8061b08:	e052      	b.n	8061bb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8061b0a:	687b      	ldr	r3, [r7, #4]
 8061b0c:	681b      	ldr	r3, [r3, #0]
 8061b0e:	681a      	ldr	r2, [r3, #0]
 8061b10:	687b      	ldr	r3, [r7, #4]
 8061b12:	681b      	ldr	r3, [r3, #0]
 8061b14:	f022 0216 	bic.w	r2, r2, #22
 8061b18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8061b1a:	687b      	ldr	r3, [r7, #4]
 8061b1c:	681b      	ldr	r3, [r3, #0]
 8061b1e:	695a      	ldr	r2, [r3, #20]
 8061b20:	687b      	ldr	r3, [r7, #4]
 8061b22:	681b      	ldr	r3, [r3, #0]
 8061b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8061b28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8061b2a:	687b      	ldr	r3, [r7, #4]
 8061b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061b2e:	2b00      	cmp	r3, #0
 8061b30:	d103      	bne.n	8061b3a <HAL_DMA_Abort+0x62>
 8061b32:	687b      	ldr	r3, [r7, #4]
 8061b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8061b36:	2b00      	cmp	r3, #0
 8061b38:	d007      	beq.n	8061b4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8061b3a:	687b      	ldr	r3, [r7, #4]
 8061b3c:	681b      	ldr	r3, [r3, #0]
 8061b3e:	681a      	ldr	r2, [r3, #0]
 8061b40:	687b      	ldr	r3, [r7, #4]
 8061b42:	681b      	ldr	r3, [r3, #0]
 8061b44:	f022 0208 	bic.w	r2, r2, #8
 8061b48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8061b4a:	687b      	ldr	r3, [r7, #4]
 8061b4c:	681b      	ldr	r3, [r3, #0]
 8061b4e:	681a      	ldr	r2, [r3, #0]
 8061b50:	687b      	ldr	r3, [r7, #4]
 8061b52:	681b      	ldr	r3, [r3, #0]
 8061b54:	f022 0201 	bic.w	r2, r2, #1
 8061b58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8061b5a:	e013      	b.n	8061b84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8061b5c:	f7ff fe60 	bl	8061820 <HAL_GetTick>
 8061b60:	4602      	mov	r2, r0
 8061b62:	68bb      	ldr	r3, [r7, #8]
 8061b64:	1ad3      	subs	r3, r2, r3
 8061b66:	2b05      	cmp	r3, #5
 8061b68:	d90c      	bls.n	8061b84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8061b6a:	687b      	ldr	r3, [r7, #4]
 8061b6c:	2220      	movs	r2, #32
 8061b6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8061b70:	687b      	ldr	r3, [r7, #4]
 8061b72:	2203      	movs	r2, #3
 8061b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8061b78:	687b      	ldr	r3, [r7, #4]
 8061b7a:	2200      	movs	r2, #0
 8061b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8061b80:	2303      	movs	r3, #3
 8061b82:	e015      	b.n	8061bb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8061b84:	687b      	ldr	r3, [r7, #4]
 8061b86:	681b      	ldr	r3, [r3, #0]
 8061b88:	681b      	ldr	r3, [r3, #0]
 8061b8a:	f003 0301 	and.w	r3, r3, #1
 8061b8e:	2b00      	cmp	r3, #0
 8061b90:	d1e4      	bne.n	8061b5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8061b92:	687b      	ldr	r3, [r7, #4]
 8061b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8061b96:	223f      	movs	r2, #63	; 0x3f
 8061b98:	409a      	lsls	r2, r3
 8061b9a:	68fb      	ldr	r3, [r7, #12]
 8061b9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8061b9e:	687b      	ldr	r3, [r7, #4]
 8061ba0:	2201      	movs	r2, #1
 8061ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8061ba6:	687b      	ldr	r3, [r7, #4]
 8061ba8:	2200      	movs	r2, #0
 8061baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8061bae:	2300      	movs	r3, #0
}
 8061bb0:	4618      	mov	r0, r3
 8061bb2:	3710      	adds	r7, #16
 8061bb4:	46bd      	mov	sp, r7
 8061bb6:	bd80      	pop	{r7, pc}

08061bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8061bb8:	b480      	push	{r7}
 8061bba:	b083      	sub	sp, #12
 8061bbc:	af00      	add	r7, sp, #0
 8061bbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8061bc0:	687b      	ldr	r3, [r7, #4]
 8061bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8061bc6:	b2db      	uxtb	r3, r3
 8061bc8:	2b02      	cmp	r3, #2
 8061bca:	d004      	beq.n	8061bd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8061bcc:	687b      	ldr	r3, [r7, #4]
 8061bce:	2280      	movs	r2, #128	; 0x80
 8061bd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8061bd2:	2301      	movs	r3, #1
 8061bd4:	e00c      	b.n	8061bf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8061bd6:	687b      	ldr	r3, [r7, #4]
 8061bd8:	2205      	movs	r2, #5
 8061bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8061bde:	687b      	ldr	r3, [r7, #4]
 8061be0:	681b      	ldr	r3, [r3, #0]
 8061be2:	681a      	ldr	r2, [r3, #0]
 8061be4:	687b      	ldr	r3, [r7, #4]
 8061be6:	681b      	ldr	r3, [r3, #0]
 8061be8:	f022 0201 	bic.w	r2, r2, #1
 8061bec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8061bee:	2300      	movs	r3, #0
}
 8061bf0:	4618      	mov	r0, r3
 8061bf2:	370c      	adds	r7, #12
 8061bf4:	46bd      	mov	sp, r7
 8061bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061bfa:	4770      	bx	lr

08061bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8061bfc:	b580      	push	{r7, lr}
 8061bfe:	b088      	sub	sp, #32
 8061c00:	af00      	add	r7, sp, #0
 8061c02:	6078      	str	r0, [r7, #4]
 8061c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8061c06:	2300      	movs	r3, #0
 8061c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8061c0a:	2300      	movs	r3, #0
 8061c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8061c0e:	2300      	movs	r3, #0
 8061c10:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8061c12:	687b      	ldr	r3, [r7, #4]
 8061c14:	4a33      	ldr	r2, [pc, #204]	; (8061ce4 <HAL_GPIO_Init+0xe8>)
 8061c16:	4293      	cmp	r3, r2
 8061c18:	d017      	beq.n	8061c4a <HAL_GPIO_Init+0x4e>
 8061c1a:	687b      	ldr	r3, [r7, #4]
 8061c1c:	4a32      	ldr	r2, [pc, #200]	; (8061ce8 <HAL_GPIO_Init+0xec>)
 8061c1e:	4293      	cmp	r3, r2
 8061c20:	d013      	beq.n	8061c4a <HAL_GPIO_Init+0x4e>
 8061c22:	687b      	ldr	r3, [r7, #4]
 8061c24:	4a31      	ldr	r2, [pc, #196]	; (8061cec <HAL_GPIO_Init+0xf0>)
 8061c26:	4293      	cmp	r3, r2
 8061c28:	d00f      	beq.n	8061c4a <HAL_GPIO_Init+0x4e>
 8061c2a:	687b      	ldr	r3, [r7, #4]
 8061c2c:	4a30      	ldr	r2, [pc, #192]	; (8061cf0 <HAL_GPIO_Init+0xf4>)
 8061c2e:	4293      	cmp	r3, r2
 8061c30:	d00b      	beq.n	8061c4a <HAL_GPIO_Init+0x4e>
 8061c32:	687b      	ldr	r3, [r7, #4]
 8061c34:	4a2f      	ldr	r2, [pc, #188]	; (8061cf4 <HAL_GPIO_Init+0xf8>)
 8061c36:	4293      	cmp	r3, r2
 8061c38:	d007      	beq.n	8061c4a <HAL_GPIO_Init+0x4e>
 8061c3a:	687b      	ldr	r3, [r7, #4]
 8061c3c:	4a2e      	ldr	r2, [pc, #184]	; (8061cf8 <HAL_GPIO_Init+0xfc>)
 8061c3e:	4293      	cmp	r3, r2
 8061c40:	d003      	beq.n	8061c4a <HAL_GPIO_Init+0x4e>
 8061c42:	21ac      	movs	r1, #172	; 0xac
 8061c44:	482d      	ldr	r0, [pc, #180]	; (8061cfc <HAL_GPIO_Init+0x100>)
 8061c46:	f7ff fb8c 	bl	8061362 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8061c4a:	683b      	ldr	r3, [r7, #0]
 8061c4c:	681b      	ldr	r3, [r3, #0]
 8061c4e:	b29b      	uxth	r3, r3
 8061c50:	2b00      	cmp	r3, #0
 8061c52:	d005      	beq.n	8061c60 <HAL_GPIO_Init+0x64>
 8061c54:	683b      	ldr	r3, [r7, #0]
 8061c56:	681b      	ldr	r3, [r3, #0]
 8061c58:	0c1b      	lsrs	r3, r3, #16
 8061c5a:	041b      	lsls	r3, r3, #16
 8061c5c:	2b00      	cmp	r3, #0
 8061c5e:	d003      	beq.n	8061c68 <HAL_GPIO_Init+0x6c>
 8061c60:	21ad      	movs	r1, #173	; 0xad
 8061c62:	4826      	ldr	r0, [pc, #152]	; (8061cfc <HAL_GPIO_Init+0x100>)
 8061c64:	f7ff fb7d 	bl	8061362 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8061c68:	683b      	ldr	r3, [r7, #0]
 8061c6a:	685b      	ldr	r3, [r3, #4]
 8061c6c:	2b00      	cmp	r3, #0
 8061c6e:	d035      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061c70:	683b      	ldr	r3, [r7, #0]
 8061c72:	685b      	ldr	r3, [r3, #4]
 8061c74:	2b01      	cmp	r3, #1
 8061c76:	d031      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061c78:	683b      	ldr	r3, [r7, #0]
 8061c7a:	685b      	ldr	r3, [r3, #4]
 8061c7c:	2b11      	cmp	r3, #17
 8061c7e:	d02d      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061c80:	683b      	ldr	r3, [r7, #0]
 8061c82:	685b      	ldr	r3, [r3, #4]
 8061c84:	2b02      	cmp	r3, #2
 8061c86:	d029      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061c88:	683b      	ldr	r3, [r7, #0]
 8061c8a:	685b      	ldr	r3, [r3, #4]
 8061c8c:	2b12      	cmp	r3, #18
 8061c8e:	d025      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061c90:	683b      	ldr	r3, [r7, #0]
 8061c92:	685b      	ldr	r3, [r3, #4]
 8061c94:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8061c98:	d020      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061c9a:	683b      	ldr	r3, [r7, #0]
 8061c9c:	685b      	ldr	r3, [r3, #4]
 8061c9e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8061ca2:	d01b      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061ca4:	683b      	ldr	r3, [r7, #0]
 8061ca6:	685b      	ldr	r3, [r3, #4]
 8061ca8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8061cac:	d016      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061cae:	683b      	ldr	r3, [r7, #0]
 8061cb0:	685b      	ldr	r3, [r3, #4]
 8061cb2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8061cb6:	d011      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061cb8:	683b      	ldr	r3, [r7, #0]
 8061cba:	685b      	ldr	r3, [r3, #4]
 8061cbc:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8061cc0:	d00c      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061cc2:	683b      	ldr	r3, [r7, #0]
 8061cc4:	685b      	ldr	r3, [r3, #4]
 8061cc6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8061cca:	d007      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061ccc:	683b      	ldr	r3, [r7, #0]
 8061cce:	685b      	ldr	r3, [r3, #4]
 8061cd0:	2b03      	cmp	r3, #3
 8061cd2:	d003      	beq.n	8061cdc <HAL_GPIO_Init+0xe0>
 8061cd4:	21ae      	movs	r1, #174	; 0xae
 8061cd6:	4809      	ldr	r0, [pc, #36]	; (8061cfc <HAL_GPIO_Init+0x100>)
 8061cd8:	f7ff fb43 	bl	8061362 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8061cdc:	2300      	movs	r3, #0
 8061cde:	61fb      	str	r3, [r7, #28]
 8061ce0:	e211      	b.n	8062106 <HAL_GPIO_Init+0x50a>
 8061ce2:	bf00      	nop
 8061ce4:	40020000 	.word	0x40020000
 8061ce8:	40020400 	.word	0x40020400
 8061cec:	40020800 	.word	0x40020800
 8061cf0:	40020c00 	.word	0x40020c00
 8061cf4:	40021000 	.word	0x40021000
 8061cf8:	40021c00 	.word	0x40021c00
 8061cfc:	0806d308 	.word	0x0806d308
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8061d00:	2201      	movs	r2, #1
 8061d02:	69fb      	ldr	r3, [r7, #28]
 8061d04:	fa02 f303 	lsl.w	r3, r2, r3
 8061d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8061d0a:	683b      	ldr	r3, [r7, #0]
 8061d0c:	681b      	ldr	r3, [r3, #0]
 8061d0e:	697a      	ldr	r2, [r7, #20]
 8061d10:	4013      	ands	r3, r2
 8061d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8061d14:	693a      	ldr	r2, [r7, #16]
 8061d16:	697b      	ldr	r3, [r7, #20]
 8061d18:	429a      	cmp	r2, r3
 8061d1a:	f040 81f1 	bne.w	8062100 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8061d1e:	683b      	ldr	r3, [r7, #0]
 8061d20:	685b      	ldr	r3, [r3, #4]
 8061d22:	f003 0303 	and.w	r3, r3, #3
 8061d26:	2b01      	cmp	r3, #1
 8061d28:	d005      	beq.n	8061d36 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8061d2a:	683b      	ldr	r3, [r7, #0]
 8061d2c:	685b      	ldr	r3, [r3, #4]
 8061d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8061d32:	2b02      	cmp	r3, #2
 8061d34:	d144      	bne.n	8061dc0 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8061d36:	683b      	ldr	r3, [r7, #0]
 8061d38:	68db      	ldr	r3, [r3, #12]
 8061d3a:	2b00      	cmp	r3, #0
 8061d3c:	d00f      	beq.n	8061d5e <HAL_GPIO_Init+0x162>
 8061d3e:	683b      	ldr	r3, [r7, #0]
 8061d40:	68db      	ldr	r3, [r3, #12]
 8061d42:	2b01      	cmp	r3, #1
 8061d44:	d00b      	beq.n	8061d5e <HAL_GPIO_Init+0x162>
 8061d46:	683b      	ldr	r3, [r7, #0]
 8061d48:	68db      	ldr	r3, [r3, #12]
 8061d4a:	2b02      	cmp	r3, #2
 8061d4c:	d007      	beq.n	8061d5e <HAL_GPIO_Init+0x162>
 8061d4e:	683b      	ldr	r3, [r7, #0]
 8061d50:	68db      	ldr	r3, [r3, #12]
 8061d52:	2b03      	cmp	r3, #3
 8061d54:	d003      	beq.n	8061d5e <HAL_GPIO_Init+0x162>
 8061d56:	21c0      	movs	r1, #192	; 0xc0
 8061d58:	489f      	ldr	r0, [pc, #636]	; (8061fd8 <HAL_GPIO_Init+0x3dc>)
 8061d5a:	f7ff fb02 	bl	8061362 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8061d5e:	687b      	ldr	r3, [r7, #4]
 8061d60:	689b      	ldr	r3, [r3, #8]
 8061d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8061d64:	69fb      	ldr	r3, [r7, #28]
 8061d66:	005b      	lsls	r3, r3, #1
 8061d68:	2203      	movs	r2, #3
 8061d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8061d6e:	43db      	mvns	r3, r3
 8061d70:	69ba      	ldr	r2, [r7, #24]
 8061d72:	4013      	ands	r3, r2
 8061d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8061d76:	683b      	ldr	r3, [r7, #0]
 8061d78:	68da      	ldr	r2, [r3, #12]
 8061d7a:	69fb      	ldr	r3, [r7, #28]
 8061d7c:	005b      	lsls	r3, r3, #1
 8061d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8061d82:	69ba      	ldr	r2, [r7, #24]
 8061d84:	4313      	orrs	r3, r2
 8061d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8061d88:	687b      	ldr	r3, [r7, #4]
 8061d8a:	69ba      	ldr	r2, [r7, #24]
 8061d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8061d8e:	687b      	ldr	r3, [r7, #4]
 8061d90:	685b      	ldr	r3, [r3, #4]
 8061d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8061d94:	2201      	movs	r2, #1
 8061d96:	69fb      	ldr	r3, [r7, #28]
 8061d98:	fa02 f303 	lsl.w	r3, r2, r3
 8061d9c:	43db      	mvns	r3, r3
 8061d9e:	69ba      	ldr	r2, [r7, #24]
 8061da0:	4013      	ands	r3, r2
 8061da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8061da4:	683b      	ldr	r3, [r7, #0]
 8061da6:	685b      	ldr	r3, [r3, #4]
 8061da8:	091b      	lsrs	r3, r3, #4
 8061daa:	f003 0201 	and.w	r2, r3, #1
 8061dae:	69fb      	ldr	r3, [r7, #28]
 8061db0:	fa02 f303 	lsl.w	r3, r2, r3
 8061db4:	69ba      	ldr	r2, [r7, #24]
 8061db6:	4313      	orrs	r3, r2
 8061db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8061dba:	687b      	ldr	r3, [r7, #4]
 8061dbc:	69ba      	ldr	r2, [r7, #24]
 8061dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8061dc0:	683b      	ldr	r3, [r7, #0]
 8061dc2:	685b      	ldr	r3, [r3, #4]
 8061dc4:	f003 0303 	and.w	r3, r3, #3
 8061dc8:	2b03      	cmp	r3, #3
 8061dca:	d027      	beq.n	8061e1c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8061dcc:	683b      	ldr	r3, [r7, #0]
 8061dce:	689b      	ldr	r3, [r3, #8]
 8061dd0:	2b00      	cmp	r3, #0
 8061dd2:	d00b      	beq.n	8061dec <HAL_GPIO_Init+0x1f0>
 8061dd4:	683b      	ldr	r3, [r7, #0]
 8061dd6:	689b      	ldr	r3, [r3, #8]
 8061dd8:	2b01      	cmp	r3, #1
 8061dda:	d007      	beq.n	8061dec <HAL_GPIO_Init+0x1f0>
 8061ddc:	683b      	ldr	r3, [r7, #0]
 8061dde:	689b      	ldr	r3, [r3, #8]
 8061de0:	2b02      	cmp	r3, #2
 8061de2:	d003      	beq.n	8061dec <HAL_GPIO_Init+0x1f0>
 8061de4:	21d1      	movs	r1, #209	; 0xd1
 8061de6:	487c      	ldr	r0, [pc, #496]	; (8061fd8 <HAL_GPIO_Init+0x3dc>)
 8061de8:	f7ff fabb 	bl	8061362 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8061dec:	687b      	ldr	r3, [r7, #4]
 8061dee:	68db      	ldr	r3, [r3, #12]
 8061df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8061df2:	69fb      	ldr	r3, [r7, #28]
 8061df4:	005b      	lsls	r3, r3, #1
 8061df6:	2203      	movs	r2, #3
 8061df8:	fa02 f303 	lsl.w	r3, r2, r3
 8061dfc:	43db      	mvns	r3, r3
 8061dfe:	69ba      	ldr	r2, [r7, #24]
 8061e00:	4013      	ands	r3, r2
 8061e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8061e04:	683b      	ldr	r3, [r7, #0]
 8061e06:	689a      	ldr	r2, [r3, #8]
 8061e08:	69fb      	ldr	r3, [r7, #28]
 8061e0a:	005b      	lsls	r3, r3, #1
 8061e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8061e10:	69ba      	ldr	r2, [r7, #24]
 8061e12:	4313      	orrs	r3, r2
 8061e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8061e16:	687b      	ldr	r3, [r7, #4]
 8061e18:	69ba      	ldr	r2, [r7, #24]
 8061e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8061e1c:	683b      	ldr	r3, [r7, #0]
 8061e1e:	685b      	ldr	r3, [r3, #4]
 8061e20:	f003 0303 	and.w	r3, r3, #3
 8061e24:	2b02      	cmp	r3, #2
 8061e26:	f040 80a0 	bne.w	8061f6a <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8061e2a:	683b      	ldr	r3, [r7, #0]
 8061e2c:	691b      	ldr	r3, [r3, #16]
 8061e2e:	2b00      	cmp	r3, #0
 8061e30:	d077      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e32:	683b      	ldr	r3, [r7, #0]
 8061e34:	691b      	ldr	r3, [r3, #16]
 8061e36:	2b09      	cmp	r3, #9
 8061e38:	d073      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e3a:	683b      	ldr	r3, [r7, #0]
 8061e3c:	691b      	ldr	r3, [r3, #16]
 8061e3e:	2b00      	cmp	r3, #0
 8061e40:	d06f      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e42:	683b      	ldr	r3, [r7, #0]
 8061e44:	691b      	ldr	r3, [r3, #16]
 8061e46:	2b00      	cmp	r3, #0
 8061e48:	d06b      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e4a:	683b      	ldr	r3, [r7, #0]
 8061e4c:	691b      	ldr	r3, [r3, #16]
 8061e4e:	2b00      	cmp	r3, #0
 8061e50:	d067      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e52:	683b      	ldr	r3, [r7, #0]
 8061e54:	691b      	ldr	r3, [r3, #16]
 8061e56:	2b00      	cmp	r3, #0
 8061e58:	d063      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e5a:	683b      	ldr	r3, [r7, #0]
 8061e5c:	691b      	ldr	r3, [r3, #16]
 8061e5e:	2b01      	cmp	r3, #1
 8061e60:	d05f      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e62:	683b      	ldr	r3, [r7, #0]
 8061e64:	691b      	ldr	r3, [r3, #16]
 8061e66:	2b01      	cmp	r3, #1
 8061e68:	d05b      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e6a:	683b      	ldr	r3, [r7, #0]
 8061e6c:	691b      	ldr	r3, [r3, #16]
 8061e6e:	2b02      	cmp	r3, #2
 8061e70:	d057      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e72:	683b      	ldr	r3, [r7, #0]
 8061e74:	691b      	ldr	r3, [r3, #16]
 8061e76:	2b02      	cmp	r3, #2
 8061e78:	d053      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e7a:	683b      	ldr	r3, [r7, #0]
 8061e7c:	691b      	ldr	r3, [r3, #16]
 8061e7e:	2b02      	cmp	r3, #2
 8061e80:	d04f      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e82:	683b      	ldr	r3, [r7, #0]
 8061e84:	691b      	ldr	r3, [r3, #16]
 8061e86:	2b04      	cmp	r3, #4
 8061e88:	d04b      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e8a:	683b      	ldr	r3, [r7, #0]
 8061e8c:	691b      	ldr	r3, [r3, #16]
 8061e8e:	2b04      	cmp	r3, #4
 8061e90:	d047      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e92:	683b      	ldr	r3, [r7, #0]
 8061e94:	691b      	ldr	r3, [r3, #16]
 8061e96:	2b04      	cmp	r3, #4
 8061e98:	d043      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061e9a:	683b      	ldr	r3, [r7, #0]
 8061e9c:	691b      	ldr	r3, [r3, #16]
 8061e9e:	2b05      	cmp	r3, #5
 8061ea0:	d03f      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061ea2:	683b      	ldr	r3, [r7, #0]
 8061ea4:	691b      	ldr	r3, [r3, #16]
 8061ea6:	2b05      	cmp	r3, #5
 8061ea8:	d03b      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061eaa:	683b      	ldr	r3, [r7, #0]
 8061eac:	691b      	ldr	r3, [r3, #16]
 8061eae:	2b05      	cmp	r3, #5
 8061eb0:	d037      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061eb2:	683b      	ldr	r3, [r7, #0]
 8061eb4:	691b      	ldr	r3, [r3, #16]
 8061eb6:	2b06      	cmp	r3, #6
 8061eb8:	d033      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061eba:	683b      	ldr	r3, [r7, #0]
 8061ebc:	691b      	ldr	r3, [r3, #16]
 8061ebe:	2b06      	cmp	r3, #6
 8061ec0:	d02f      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061ec2:	683b      	ldr	r3, [r7, #0]
 8061ec4:	691b      	ldr	r3, [r3, #16]
 8061ec6:	2b05      	cmp	r3, #5
 8061ec8:	d02b      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061eca:	683b      	ldr	r3, [r7, #0]
 8061ecc:	691b      	ldr	r3, [r3, #16]
 8061ece:	2b06      	cmp	r3, #6
 8061ed0:	d027      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061ed2:	683b      	ldr	r3, [r7, #0]
 8061ed4:	691b      	ldr	r3, [r3, #16]
 8061ed6:	2b07      	cmp	r3, #7
 8061ed8:	d023      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061eda:	683b      	ldr	r3, [r7, #0]
 8061edc:	691b      	ldr	r3, [r3, #16]
 8061ede:	2b07      	cmp	r3, #7
 8061ee0:	d01f      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061ee2:	683b      	ldr	r3, [r7, #0]
 8061ee4:	691b      	ldr	r3, [r3, #16]
 8061ee6:	2b07      	cmp	r3, #7
 8061ee8:	d01b      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061eea:	683b      	ldr	r3, [r7, #0]
 8061eec:	691b      	ldr	r3, [r3, #16]
 8061eee:	2b08      	cmp	r3, #8
 8061ef0:	d017      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061ef2:	683b      	ldr	r3, [r7, #0]
 8061ef4:	691b      	ldr	r3, [r3, #16]
 8061ef6:	2b0a      	cmp	r3, #10
 8061ef8:	d013      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061efa:	683b      	ldr	r3, [r7, #0]
 8061efc:	691b      	ldr	r3, [r3, #16]
 8061efe:	2b09      	cmp	r3, #9
 8061f00:	d00f      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061f02:	683b      	ldr	r3, [r7, #0]
 8061f04:	691b      	ldr	r3, [r3, #16]
 8061f06:	2b09      	cmp	r3, #9
 8061f08:	d00b      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061f0a:	683b      	ldr	r3, [r7, #0]
 8061f0c:	691b      	ldr	r3, [r3, #16]
 8061f0e:	2b0c      	cmp	r3, #12
 8061f10:	d007      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061f12:	683b      	ldr	r3, [r7, #0]
 8061f14:	691b      	ldr	r3, [r3, #16]
 8061f16:	2b0f      	cmp	r3, #15
 8061f18:	d003      	beq.n	8061f22 <HAL_GPIO_Init+0x326>
 8061f1a:	21de      	movs	r1, #222	; 0xde
 8061f1c:	482e      	ldr	r0, [pc, #184]	; (8061fd8 <HAL_GPIO_Init+0x3dc>)
 8061f1e:	f7ff fa20 	bl	8061362 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8061f22:	69fb      	ldr	r3, [r7, #28]
 8061f24:	08da      	lsrs	r2, r3, #3
 8061f26:	687b      	ldr	r3, [r7, #4]
 8061f28:	3208      	adds	r2, #8
 8061f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8061f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8061f30:	69fb      	ldr	r3, [r7, #28]
 8061f32:	f003 0307 	and.w	r3, r3, #7
 8061f36:	009b      	lsls	r3, r3, #2
 8061f38:	220f      	movs	r2, #15
 8061f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8061f3e:	43db      	mvns	r3, r3
 8061f40:	69ba      	ldr	r2, [r7, #24]
 8061f42:	4013      	ands	r3, r2
 8061f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8061f46:	683b      	ldr	r3, [r7, #0]
 8061f48:	691a      	ldr	r2, [r3, #16]
 8061f4a:	69fb      	ldr	r3, [r7, #28]
 8061f4c:	f003 0307 	and.w	r3, r3, #7
 8061f50:	009b      	lsls	r3, r3, #2
 8061f52:	fa02 f303 	lsl.w	r3, r2, r3
 8061f56:	69ba      	ldr	r2, [r7, #24]
 8061f58:	4313      	orrs	r3, r2
 8061f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8061f5c:	69fb      	ldr	r3, [r7, #28]
 8061f5e:	08da      	lsrs	r2, r3, #3
 8061f60:	687b      	ldr	r3, [r7, #4]
 8061f62:	3208      	adds	r2, #8
 8061f64:	69b9      	ldr	r1, [r7, #24]
 8061f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8061f6a:	687b      	ldr	r3, [r7, #4]
 8061f6c:	681b      	ldr	r3, [r3, #0]
 8061f6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8061f70:	69fb      	ldr	r3, [r7, #28]
 8061f72:	005b      	lsls	r3, r3, #1
 8061f74:	2203      	movs	r2, #3
 8061f76:	fa02 f303 	lsl.w	r3, r2, r3
 8061f7a:	43db      	mvns	r3, r3
 8061f7c:	69ba      	ldr	r2, [r7, #24]
 8061f7e:	4013      	ands	r3, r2
 8061f80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8061f82:	683b      	ldr	r3, [r7, #0]
 8061f84:	685b      	ldr	r3, [r3, #4]
 8061f86:	f003 0203 	and.w	r2, r3, #3
 8061f8a:	69fb      	ldr	r3, [r7, #28]
 8061f8c:	005b      	lsls	r3, r3, #1
 8061f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8061f92:	69ba      	ldr	r2, [r7, #24]
 8061f94:	4313      	orrs	r3, r2
 8061f96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8061f98:	687b      	ldr	r3, [r7, #4]
 8061f9a:	69ba      	ldr	r2, [r7, #24]
 8061f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8061f9e:	683b      	ldr	r3, [r7, #0]
 8061fa0:	685b      	ldr	r3, [r3, #4]
 8061fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8061fa6:	2b00      	cmp	r3, #0
 8061fa8:	f000 80aa 	beq.w	8062100 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8061fac:	2300      	movs	r3, #0
 8061fae:	60fb      	str	r3, [r7, #12]
 8061fb0:	4b0a      	ldr	r3, [pc, #40]	; (8061fdc <HAL_GPIO_Init+0x3e0>)
 8061fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8061fb4:	4a09      	ldr	r2, [pc, #36]	; (8061fdc <HAL_GPIO_Init+0x3e0>)
 8061fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8061fba:	6453      	str	r3, [r2, #68]	; 0x44
 8061fbc:	4b07      	ldr	r3, [pc, #28]	; (8061fdc <HAL_GPIO_Init+0x3e0>)
 8061fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8061fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8061fc4:	60fb      	str	r3, [r7, #12]
 8061fc6:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8061fc8:	4a05      	ldr	r2, [pc, #20]	; (8061fe0 <HAL_GPIO_Init+0x3e4>)
 8061fca:	69fb      	ldr	r3, [r7, #28]
 8061fcc:	089b      	lsrs	r3, r3, #2
 8061fce:	3302      	adds	r3, #2
 8061fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8061fd4:	e006      	b.n	8061fe4 <HAL_GPIO_Init+0x3e8>
 8061fd6:	bf00      	nop
 8061fd8:	0806d308 	.word	0x0806d308
 8061fdc:	40023800 	.word	0x40023800
 8061fe0:	40013800 	.word	0x40013800
 8061fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8061fe6:	69fb      	ldr	r3, [r7, #28]
 8061fe8:	f003 0303 	and.w	r3, r3, #3
 8061fec:	009b      	lsls	r3, r3, #2
 8061fee:	220f      	movs	r2, #15
 8061ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8061ff4:	43db      	mvns	r3, r3
 8061ff6:	69ba      	ldr	r2, [r7, #24]
 8061ff8:	4013      	ands	r3, r2
 8061ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8061ffc:	687b      	ldr	r3, [r7, #4]
 8061ffe:	4a46      	ldr	r2, [pc, #280]	; (8062118 <HAL_GPIO_Init+0x51c>)
 8062000:	4293      	cmp	r3, r2
 8062002:	d019      	beq.n	8062038 <HAL_GPIO_Init+0x43c>
 8062004:	687b      	ldr	r3, [r7, #4]
 8062006:	4a45      	ldr	r2, [pc, #276]	; (806211c <HAL_GPIO_Init+0x520>)
 8062008:	4293      	cmp	r3, r2
 806200a:	d013      	beq.n	8062034 <HAL_GPIO_Init+0x438>
 806200c:	687b      	ldr	r3, [r7, #4]
 806200e:	4a44      	ldr	r2, [pc, #272]	; (8062120 <HAL_GPIO_Init+0x524>)
 8062010:	4293      	cmp	r3, r2
 8062012:	d00d      	beq.n	8062030 <HAL_GPIO_Init+0x434>
 8062014:	687b      	ldr	r3, [r7, #4]
 8062016:	4a43      	ldr	r2, [pc, #268]	; (8062124 <HAL_GPIO_Init+0x528>)
 8062018:	4293      	cmp	r3, r2
 806201a:	d007      	beq.n	806202c <HAL_GPIO_Init+0x430>
 806201c:	687b      	ldr	r3, [r7, #4]
 806201e:	4a42      	ldr	r2, [pc, #264]	; (8062128 <HAL_GPIO_Init+0x52c>)
 8062020:	4293      	cmp	r3, r2
 8062022:	d101      	bne.n	8062028 <HAL_GPIO_Init+0x42c>
 8062024:	2304      	movs	r3, #4
 8062026:	e008      	b.n	806203a <HAL_GPIO_Init+0x43e>
 8062028:	2307      	movs	r3, #7
 806202a:	e006      	b.n	806203a <HAL_GPIO_Init+0x43e>
 806202c:	2303      	movs	r3, #3
 806202e:	e004      	b.n	806203a <HAL_GPIO_Init+0x43e>
 8062030:	2302      	movs	r3, #2
 8062032:	e002      	b.n	806203a <HAL_GPIO_Init+0x43e>
 8062034:	2301      	movs	r3, #1
 8062036:	e000      	b.n	806203a <HAL_GPIO_Init+0x43e>
 8062038:	2300      	movs	r3, #0
 806203a:	69fa      	ldr	r2, [r7, #28]
 806203c:	f002 0203 	and.w	r2, r2, #3
 8062040:	0092      	lsls	r2, r2, #2
 8062042:	4093      	lsls	r3, r2
 8062044:	69ba      	ldr	r2, [r7, #24]
 8062046:	4313      	orrs	r3, r2
 8062048:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 806204a:	4938      	ldr	r1, [pc, #224]	; (806212c <HAL_GPIO_Init+0x530>)
 806204c:	69fb      	ldr	r3, [r7, #28]
 806204e:	089b      	lsrs	r3, r3, #2
 8062050:	3302      	adds	r3, #2
 8062052:	69ba      	ldr	r2, [r7, #24]
 8062054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8062058:	4b35      	ldr	r3, [pc, #212]	; (8062130 <HAL_GPIO_Init+0x534>)
 806205a:	681b      	ldr	r3, [r3, #0]
 806205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 806205e:	693b      	ldr	r3, [r7, #16]
 8062060:	43db      	mvns	r3, r3
 8062062:	69ba      	ldr	r2, [r7, #24]
 8062064:	4013      	ands	r3, r2
 8062066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8062068:	683b      	ldr	r3, [r7, #0]
 806206a:	685b      	ldr	r3, [r3, #4]
 806206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8062070:	2b00      	cmp	r3, #0
 8062072:	d003      	beq.n	806207c <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8062074:	69ba      	ldr	r2, [r7, #24]
 8062076:	693b      	ldr	r3, [r7, #16]
 8062078:	4313      	orrs	r3, r2
 806207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 806207c:	4a2c      	ldr	r2, [pc, #176]	; (8062130 <HAL_GPIO_Init+0x534>)
 806207e:	69bb      	ldr	r3, [r7, #24]
 8062080:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8062082:	4b2b      	ldr	r3, [pc, #172]	; (8062130 <HAL_GPIO_Init+0x534>)
 8062084:	685b      	ldr	r3, [r3, #4]
 8062086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8062088:	693b      	ldr	r3, [r7, #16]
 806208a:	43db      	mvns	r3, r3
 806208c:	69ba      	ldr	r2, [r7, #24]
 806208e:	4013      	ands	r3, r2
 8062090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8062092:	683b      	ldr	r3, [r7, #0]
 8062094:	685b      	ldr	r3, [r3, #4]
 8062096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 806209a:	2b00      	cmp	r3, #0
 806209c:	d003      	beq.n	80620a6 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 806209e:	69ba      	ldr	r2, [r7, #24]
 80620a0:	693b      	ldr	r3, [r7, #16]
 80620a2:	4313      	orrs	r3, r2
 80620a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80620a6:	4a22      	ldr	r2, [pc, #136]	; (8062130 <HAL_GPIO_Init+0x534>)
 80620a8:	69bb      	ldr	r3, [r7, #24]
 80620aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80620ac:	4b20      	ldr	r3, [pc, #128]	; (8062130 <HAL_GPIO_Init+0x534>)
 80620ae:	689b      	ldr	r3, [r3, #8]
 80620b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80620b2:	693b      	ldr	r3, [r7, #16]
 80620b4:	43db      	mvns	r3, r3
 80620b6:	69ba      	ldr	r2, [r7, #24]
 80620b8:	4013      	ands	r3, r2
 80620ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80620bc:	683b      	ldr	r3, [r7, #0]
 80620be:	685b      	ldr	r3, [r3, #4]
 80620c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80620c4:	2b00      	cmp	r3, #0
 80620c6:	d003      	beq.n	80620d0 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 80620c8:	69ba      	ldr	r2, [r7, #24]
 80620ca:	693b      	ldr	r3, [r7, #16]
 80620cc:	4313      	orrs	r3, r2
 80620ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80620d0:	4a17      	ldr	r2, [pc, #92]	; (8062130 <HAL_GPIO_Init+0x534>)
 80620d2:	69bb      	ldr	r3, [r7, #24]
 80620d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80620d6:	4b16      	ldr	r3, [pc, #88]	; (8062130 <HAL_GPIO_Init+0x534>)
 80620d8:	68db      	ldr	r3, [r3, #12]
 80620da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80620dc:	693b      	ldr	r3, [r7, #16]
 80620de:	43db      	mvns	r3, r3
 80620e0:	69ba      	ldr	r2, [r7, #24]
 80620e2:	4013      	ands	r3, r2
 80620e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80620e6:	683b      	ldr	r3, [r7, #0]
 80620e8:	685b      	ldr	r3, [r3, #4]
 80620ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80620ee:	2b00      	cmp	r3, #0
 80620f0:	d003      	beq.n	80620fa <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 80620f2:	69ba      	ldr	r2, [r7, #24]
 80620f4:	693b      	ldr	r3, [r7, #16]
 80620f6:	4313      	orrs	r3, r2
 80620f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80620fa:	4a0d      	ldr	r2, [pc, #52]	; (8062130 <HAL_GPIO_Init+0x534>)
 80620fc:	69bb      	ldr	r3, [r7, #24]
 80620fe:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8062100:	69fb      	ldr	r3, [r7, #28]
 8062102:	3301      	adds	r3, #1
 8062104:	61fb      	str	r3, [r7, #28]
 8062106:	69fb      	ldr	r3, [r7, #28]
 8062108:	2b0f      	cmp	r3, #15
 806210a:	f67f adf9 	bls.w	8061d00 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 806210e:	bf00      	nop
 8062110:	bf00      	nop
 8062112:	3720      	adds	r7, #32
 8062114:	46bd      	mov	sp, r7
 8062116:	bd80      	pop	{r7, pc}
 8062118:	40020000 	.word	0x40020000
 806211c:	40020400 	.word	0x40020400
 8062120:	40020800 	.word	0x40020800
 8062124:	40020c00 	.word	0x40020c00
 8062128:	40021000 	.word	0x40021000
 806212c:	40013800 	.word	0x40013800
 8062130:	40013c00 	.word	0x40013c00

08062134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8062134:	b580      	push	{r7, lr}
 8062136:	b082      	sub	sp, #8
 8062138:	af00      	add	r7, sp, #0
 806213a:	6078      	str	r0, [r7, #4]
 806213c:	460b      	mov	r3, r1
 806213e:	807b      	strh	r3, [r7, #2]
 8062140:	4613      	mov	r3, r2
 8062142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8062144:	887b      	ldrh	r3, [r7, #2]
 8062146:	2b00      	cmp	r3, #0
 8062148:	d004      	beq.n	8062154 <HAL_GPIO_WritePin+0x20>
 806214a:	887b      	ldrh	r3, [r7, #2]
 806214c:	0c1b      	lsrs	r3, r3, #16
 806214e:	041b      	lsls	r3, r3, #16
 8062150:	2b00      	cmp	r3, #0
 8062152:	d004      	beq.n	806215e <HAL_GPIO_WritePin+0x2a>
 8062154:	f240 119d 	movw	r1, #413	; 0x19d
 8062158:	480e      	ldr	r0, [pc, #56]	; (8062194 <HAL_GPIO_WritePin+0x60>)
 806215a:	f7ff f902 	bl	8061362 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 806215e:	787b      	ldrb	r3, [r7, #1]
 8062160:	2b00      	cmp	r3, #0
 8062162:	d007      	beq.n	8062174 <HAL_GPIO_WritePin+0x40>
 8062164:	787b      	ldrb	r3, [r7, #1]
 8062166:	2b01      	cmp	r3, #1
 8062168:	d004      	beq.n	8062174 <HAL_GPIO_WritePin+0x40>
 806216a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 806216e:	4809      	ldr	r0, [pc, #36]	; (8062194 <HAL_GPIO_WritePin+0x60>)
 8062170:	f7ff f8f7 	bl	8061362 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8062174:	787b      	ldrb	r3, [r7, #1]
 8062176:	2b00      	cmp	r3, #0
 8062178:	d003      	beq.n	8062182 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 806217a:	887a      	ldrh	r2, [r7, #2]
 806217c:	687b      	ldr	r3, [r7, #4]
 806217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8062180:	e003      	b.n	806218a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8062182:	887b      	ldrh	r3, [r7, #2]
 8062184:	041a      	lsls	r2, r3, #16
 8062186:	687b      	ldr	r3, [r7, #4]
 8062188:	619a      	str	r2, [r3, #24]
}
 806218a:	bf00      	nop
 806218c:	3708      	adds	r7, #8
 806218e:	46bd      	mov	sp, r7
 8062190:	bd80      	pop	{r7, pc}
 8062192:	bf00      	nop
 8062194:	0806d308 	.word	0x0806d308

08062198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8062198:	b580      	push	{r7, lr}
 806219a:	b084      	sub	sp, #16
 806219c:	af00      	add	r7, sp, #0
 806219e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80621a0:	687b      	ldr	r3, [r7, #4]
 80621a2:	2b00      	cmp	r3, #0
 80621a4:	d101      	bne.n	80621aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80621a6:	2301      	movs	r3, #1
 80621a8:	e1be      	b.n	8062528 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80621aa:	687b      	ldr	r3, [r7, #4]
 80621ac:	681b      	ldr	r3, [r3, #0]
 80621ae:	4a9f      	ldr	r2, [pc, #636]	; (806242c <HAL_I2C_Init+0x294>)
 80621b0:	4293      	cmp	r3, r2
 80621b2:	d00e      	beq.n	80621d2 <HAL_I2C_Init+0x3a>
 80621b4:	687b      	ldr	r3, [r7, #4]
 80621b6:	681b      	ldr	r3, [r3, #0]
 80621b8:	4a9d      	ldr	r2, [pc, #628]	; (8062430 <HAL_I2C_Init+0x298>)
 80621ba:	4293      	cmp	r3, r2
 80621bc:	d009      	beq.n	80621d2 <HAL_I2C_Init+0x3a>
 80621be:	687b      	ldr	r3, [r7, #4]
 80621c0:	681b      	ldr	r3, [r3, #0]
 80621c2:	4a9c      	ldr	r2, [pc, #624]	; (8062434 <HAL_I2C_Init+0x29c>)
 80621c4:	4293      	cmp	r3, r2
 80621c6:	d004      	beq.n	80621d2 <HAL_I2C_Init+0x3a>
 80621c8:	f240 11bf 	movw	r1, #447	; 0x1bf
 80621cc:	489a      	ldr	r0, [pc, #616]	; (8062438 <HAL_I2C_Init+0x2a0>)
 80621ce:	f7ff f8c8 	bl	8061362 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80621d2:	687b      	ldr	r3, [r7, #4]
 80621d4:	685b      	ldr	r3, [r3, #4]
 80621d6:	2b00      	cmp	r3, #0
 80621d8:	d004      	beq.n	80621e4 <HAL_I2C_Init+0x4c>
 80621da:	687b      	ldr	r3, [r7, #4]
 80621dc:	685b      	ldr	r3, [r3, #4]
 80621de:	4a97      	ldr	r2, [pc, #604]	; (806243c <HAL_I2C_Init+0x2a4>)
 80621e0:	4293      	cmp	r3, r2
 80621e2:	d904      	bls.n	80621ee <HAL_I2C_Init+0x56>
 80621e4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80621e8:	4893      	ldr	r0, [pc, #588]	; (8062438 <HAL_I2C_Init+0x2a0>)
 80621ea:	f7ff f8ba 	bl	8061362 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80621ee:	687b      	ldr	r3, [r7, #4]
 80621f0:	689b      	ldr	r3, [r3, #8]
 80621f2:	2b00      	cmp	r3, #0
 80621f4:	d009      	beq.n	806220a <HAL_I2C_Init+0x72>
 80621f6:	687b      	ldr	r3, [r7, #4]
 80621f8:	689b      	ldr	r3, [r3, #8]
 80621fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80621fe:	d004      	beq.n	806220a <HAL_I2C_Init+0x72>
 8062200:	f240 11c1 	movw	r1, #449	; 0x1c1
 8062204:	488c      	ldr	r0, [pc, #560]	; (8062438 <HAL_I2C_Init+0x2a0>)
 8062206:	f7ff f8ac 	bl	8061362 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 806220a:	687b      	ldr	r3, [r7, #4]
 806220c:	68db      	ldr	r3, [r3, #12]
 806220e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8062212:	f023 0303 	bic.w	r3, r3, #3
 8062216:	2b00      	cmp	r3, #0
 8062218:	d004      	beq.n	8062224 <HAL_I2C_Init+0x8c>
 806221a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 806221e:	4886      	ldr	r0, [pc, #536]	; (8062438 <HAL_I2C_Init+0x2a0>)
 8062220:	f7ff f89f 	bl	8061362 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8062224:	687b      	ldr	r3, [r7, #4]
 8062226:	691b      	ldr	r3, [r3, #16]
 8062228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 806222c:	d009      	beq.n	8062242 <HAL_I2C_Init+0xaa>
 806222e:	687b      	ldr	r3, [r7, #4]
 8062230:	691b      	ldr	r3, [r3, #16]
 8062232:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8062236:	d004      	beq.n	8062242 <HAL_I2C_Init+0xaa>
 8062238:	f240 11c3 	movw	r1, #451	; 0x1c3
 806223c:	487e      	ldr	r0, [pc, #504]	; (8062438 <HAL_I2C_Init+0x2a0>)
 806223e:	f7ff f890 	bl	8061362 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8062242:	687b      	ldr	r3, [r7, #4]
 8062244:	695b      	ldr	r3, [r3, #20]
 8062246:	2b00      	cmp	r3, #0
 8062248:	d008      	beq.n	806225c <HAL_I2C_Init+0xc4>
 806224a:	687b      	ldr	r3, [r7, #4]
 806224c:	695b      	ldr	r3, [r3, #20]
 806224e:	2b01      	cmp	r3, #1
 8062250:	d004      	beq.n	806225c <HAL_I2C_Init+0xc4>
 8062252:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8062256:	4878      	ldr	r0, [pc, #480]	; (8062438 <HAL_I2C_Init+0x2a0>)
 8062258:	f7ff f883 	bl	8061362 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 806225c:	687b      	ldr	r3, [r7, #4]
 806225e:	699b      	ldr	r3, [r3, #24]
 8062260:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8062264:	2b00      	cmp	r3, #0
 8062266:	d004      	beq.n	8062272 <HAL_I2C_Init+0xda>
 8062268:	f240 11c5 	movw	r1, #453	; 0x1c5
 806226c:	4872      	ldr	r0, [pc, #456]	; (8062438 <HAL_I2C_Init+0x2a0>)
 806226e:	f7ff f878 	bl	8061362 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8062272:	687b      	ldr	r3, [r7, #4]
 8062274:	69db      	ldr	r3, [r3, #28]
 8062276:	2b00      	cmp	r3, #0
 8062278:	d008      	beq.n	806228c <HAL_I2C_Init+0xf4>
 806227a:	687b      	ldr	r3, [r7, #4]
 806227c:	69db      	ldr	r3, [r3, #28]
 806227e:	2b40      	cmp	r3, #64	; 0x40
 8062280:	d004      	beq.n	806228c <HAL_I2C_Init+0xf4>
 8062282:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8062286:	486c      	ldr	r0, [pc, #432]	; (8062438 <HAL_I2C_Init+0x2a0>)
 8062288:	f7ff f86b 	bl	8061362 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 806228c:	687b      	ldr	r3, [r7, #4]
 806228e:	6a1b      	ldr	r3, [r3, #32]
 8062290:	2b00      	cmp	r3, #0
 8062292:	d008      	beq.n	80622a6 <HAL_I2C_Init+0x10e>
 8062294:	687b      	ldr	r3, [r7, #4]
 8062296:	6a1b      	ldr	r3, [r3, #32]
 8062298:	2b80      	cmp	r3, #128	; 0x80
 806229a:	d004      	beq.n	80622a6 <HAL_I2C_Init+0x10e>
 806229c:	f240 11c7 	movw	r1, #455	; 0x1c7
 80622a0:	4865      	ldr	r0, [pc, #404]	; (8062438 <HAL_I2C_Init+0x2a0>)
 80622a2:	f7ff f85e 	bl	8061362 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80622a6:	687b      	ldr	r3, [r7, #4]
 80622a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80622ac:	b2db      	uxtb	r3, r3
 80622ae:	2b00      	cmp	r3, #0
 80622b0:	d106      	bne.n	80622c0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80622b2:	687b      	ldr	r3, [r7, #4]
 80622b4:	2200      	movs	r2, #0
 80622b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80622ba:	6878      	ldr	r0, [r7, #4]
 80622bc:	f7fe ff5a 	bl	8061174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80622c0:	687b      	ldr	r3, [r7, #4]
 80622c2:	2224      	movs	r2, #36	; 0x24
 80622c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80622c8:	687b      	ldr	r3, [r7, #4]
 80622ca:	681b      	ldr	r3, [r3, #0]
 80622cc:	681a      	ldr	r2, [r3, #0]
 80622ce:	687b      	ldr	r3, [r7, #4]
 80622d0:	681b      	ldr	r3, [r3, #0]
 80622d2:	f022 0201 	bic.w	r2, r2, #1
 80622d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80622d8:	687b      	ldr	r3, [r7, #4]
 80622da:	681b      	ldr	r3, [r3, #0]
 80622dc:	681a      	ldr	r2, [r3, #0]
 80622de:	687b      	ldr	r3, [r7, #4]
 80622e0:	681b      	ldr	r3, [r3, #0]
 80622e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80622e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80622e8:	687b      	ldr	r3, [r7, #4]
 80622ea:	681b      	ldr	r3, [r3, #0]
 80622ec:	681a      	ldr	r2, [r3, #0]
 80622ee:	687b      	ldr	r3, [r7, #4]
 80622f0:	681b      	ldr	r3, [r3, #0]
 80622f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80622f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80622f8:	f000 febe 	bl	8063078 <HAL_RCC_GetPCLK1Freq>
 80622fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80622fe:	687b      	ldr	r3, [r7, #4]
 8062300:	685b      	ldr	r3, [r3, #4]
 8062302:	4a4f      	ldr	r2, [pc, #316]	; (8062440 <HAL_I2C_Init+0x2a8>)
 8062304:	4293      	cmp	r3, r2
 8062306:	d807      	bhi.n	8062318 <HAL_I2C_Init+0x180>
 8062308:	68fb      	ldr	r3, [r7, #12]
 806230a:	4a4e      	ldr	r2, [pc, #312]	; (8062444 <HAL_I2C_Init+0x2ac>)
 806230c:	4293      	cmp	r3, r2
 806230e:	bf94      	ite	ls
 8062310:	2301      	movls	r3, #1
 8062312:	2300      	movhi	r3, #0
 8062314:	b2db      	uxtb	r3, r3
 8062316:	e006      	b.n	8062326 <HAL_I2C_Init+0x18e>
 8062318:	68fb      	ldr	r3, [r7, #12]
 806231a:	4a4b      	ldr	r2, [pc, #300]	; (8062448 <HAL_I2C_Init+0x2b0>)
 806231c:	4293      	cmp	r3, r2
 806231e:	bf94      	ite	ls
 8062320:	2301      	movls	r3, #1
 8062322:	2300      	movhi	r3, #0
 8062324:	b2db      	uxtb	r3, r3
 8062326:	2b00      	cmp	r3, #0
 8062328:	d001      	beq.n	806232e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 806232a:	2301      	movs	r3, #1
 806232c:	e0fc      	b.n	8062528 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 806232e:	68fb      	ldr	r3, [r7, #12]
 8062330:	4a46      	ldr	r2, [pc, #280]	; (806244c <HAL_I2C_Init+0x2b4>)
 8062332:	fba2 2303 	umull	r2, r3, r2, r3
 8062336:	0c9b      	lsrs	r3, r3, #18
 8062338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 806233a:	687b      	ldr	r3, [r7, #4]
 806233c:	681b      	ldr	r3, [r3, #0]
 806233e:	685b      	ldr	r3, [r3, #4]
 8062340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8062344:	687b      	ldr	r3, [r7, #4]
 8062346:	681b      	ldr	r3, [r3, #0]
 8062348:	68ba      	ldr	r2, [r7, #8]
 806234a:	430a      	orrs	r2, r1
 806234c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 806234e:	687b      	ldr	r3, [r7, #4]
 8062350:	681b      	ldr	r3, [r3, #0]
 8062352:	6a1b      	ldr	r3, [r3, #32]
 8062354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8062358:	687b      	ldr	r3, [r7, #4]
 806235a:	685b      	ldr	r3, [r3, #4]
 806235c:	4a38      	ldr	r2, [pc, #224]	; (8062440 <HAL_I2C_Init+0x2a8>)
 806235e:	4293      	cmp	r3, r2
 8062360:	d802      	bhi.n	8062368 <HAL_I2C_Init+0x1d0>
 8062362:	68bb      	ldr	r3, [r7, #8]
 8062364:	3301      	adds	r3, #1
 8062366:	e009      	b.n	806237c <HAL_I2C_Init+0x1e4>
 8062368:	68bb      	ldr	r3, [r7, #8]
 806236a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 806236e:	fb02 f303 	mul.w	r3, r2, r3
 8062372:	4a37      	ldr	r2, [pc, #220]	; (8062450 <HAL_I2C_Init+0x2b8>)
 8062374:	fba2 2303 	umull	r2, r3, r2, r3
 8062378:	099b      	lsrs	r3, r3, #6
 806237a:	3301      	adds	r3, #1
 806237c:	687a      	ldr	r2, [r7, #4]
 806237e:	6812      	ldr	r2, [r2, #0]
 8062380:	430b      	orrs	r3, r1
 8062382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8062384:	687b      	ldr	r3, [r7, #4]
 8062386:	681b      	ldr	r3, [r3, #0]
 8062388:	69db      	ldr	r3, [r3, #28]
 806238a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 806238e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8062392:	687b      	ldr	r3, [r7, #4]
 8062394:	685b      	ldr	r3, [r3, #4]
 8062396:	492a      	ldr	r1, [pc, #168]	; (8062440 <HAL_I2C_Init+0x2a8>)
 8062398:	428b      	cmp	r3, r1
 806239a:	d819      	bhi.n	80623d0 <HAL_I2C_Init+0x238>
 806239c:	68fb      	ldr	r3, [r7, #12]
 806239e:	1e59      	subs	r1, r3, #1
 80623a0:	687b      	ldr	r3, [r7, #4]
 80623a2:	685b      	ldr	r3, [r3, #4]
 80623a4:	005b      	lsls	r3, r3, #1
 80623a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80623aa:	1c59      	adds	r1, r3, #1
 80623ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80623b0:	400b      	ands	r3, r1
 80623b2:	2b00      	cmp	r3, #0
 80623b4:	d00a      	beq.n	80623cc <HAL_I2C_Init+0x234>
 80623b6:	68fb      	ldr	r3, [r7, #12]
 80623b8:	1e59      	subs	r1, r3, #1
 80623ba:	687b      	ldr	r3, [r7, #4]
 80623bc:	685b      	ldr	r3, [r3, #4]
 80623be:	005b      	lsls	r3, r3, #1
 80623c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80623c4:	3301      	adds	r3, #1
 80623c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80623ca:	e066      	b.n	806249a <HAL_I2C_Init+0x302>
 80623cc:	2304      	movs	r3, #4
 80623ce:	e064      	b.n	806249a <HAL_I2C_Init+0x302>
 80623d0:	687b      	ldr	r3, [r7, #4]
 80623d2:	689b      	ldr	r3, [r3, #8]
 80623d4:	2b00      	cmp	r3, #0
 80623d6:	d111      	bne.n	80623fc <HAL_I2C_Init+0x264>
 80623d8:	68fb      	ldr	r3, [r7, #12]
 80623da:	1e58      	subs	r0, r3, #1
 80623dc:	687b      	ldr	r3, [r7, #4]
 80623de:	6859      	ldr	r1, [r3, #4]
 80623e0:	460b      	mov	r3, r1
 80623e2:	005b      	lsls	r3, r3, #1
 80623e4:	440b      	add	r3, r1
 80623e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80623ea:	3301      	adds	r3, #1
 80623ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80623f0:	2b00      	cmp	r3, #0
 80623f2:	bf0c      	ite	eq
 80623f4:	2301      	moveq	r3, #1
 80623f6:	2300      	movne	r3, #0
 80623f8:	b2db      	uxtb	r3, r3
 80623fa:	e012      	b.n	8062422 <HAL_I2C_Init+0x28a>
 80623fc:	68fb      	ldr	r3, [r7, #12]
 80623fe:	1e58      	subs	r0, r3, #1
 8062400:	687b      	ldr	r3, [r7, #4]
 8062402:	6859      	ldr	r1, [r3, #4]
 8062404:	460b      	mov	r3, r1
 8062406:	009b      	lsls	r3, r3, #2
 8062408:	440b      	add	r3, r1
 806240a:	0099      	lsls	r1, r3, #2
 806240c:	440b      	add	r3, r1
 806240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8062412:	3301      	adds	r3, #1
 8062414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8062418:	2b00      	cmp	r3, #0
 806241a:	bf0c      	ite	eq
 806241c:	2301      	moveq	r3, #1
 806241e:	2300      	movne	r3, #0
 8062420:	b2db      	uxtb	r3, r3
 8062422:	2b00      	cmp	r3, #0
 8062424:	d016      	beq.n	8062454 <HAL_I2C_Init+0x2bc>
 8062426:	2301      	movs	r3, #1
 8062428:	e037      	b.n	806249a <HAL_I2C_Init+0x302>
 806242a:	bf00      	nop
 806242c:	40005400 	.word	0x40005400
 8062430:	40005800 	.word	0x40005800
 8062434:	40005c00 	.word	0x40005c00
 8062438:	0806d344 	.word	0x0806d344
 806243c:	00061a80 	.word	0x00061a80
 8062440:	000186a0 	.word	0x000186a0
 8062444:	001e847f 	.word	0x001e847f
 8062448:	003d08ff 	.word	0x003d08ff
 806244c:	431bde83 	.word	0x431bde83
 8062450:	10624dd3 	.word	0x10624dd3
 8062454:	687b      	ldr	r3, [r7, #4]
 8062456:	689b      	ldr	r3, [r3, #8]
 8062458:	2b00      	cmp	r3, #0
 806245a:	d10e      	bne.n	806247a <HAL_I2C_Init+0x2e2>
 806245c:	68fb      	ldr	r3, [r7, #12]
 806245e:	1e58      	subs	r0, r3, #1
 8062460:	687b      	ldr	r3, [r7, #4]
 8062462:	6859      	ldr	r1, [r3, #4]
 8062464:	460b      	mov	r3, r1
 8062466:	005b      	lsls	r3, r3, #1
 8062468:	440b      	add	r3, r1
 806246a:	fbb0 f3f3 	udiv	r3, r0, r3
 806246e:	3301      	adds	r3, #1
 8062470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8062474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8062478:	e00f      	b.n	806249a <HAL_I2C_Init+0x302>
 806247a:	68fb      	ldr	r3, [r7, #12]
 806247c:	1e58      	subs	r0, r3, #1
 806247e:	687b      	ldr	r3, [r7, #4]
 8062480:	6859      	ldr	r1, [r3, #4]
 8062482:	460b      	mov	r3, r1
 8062484:	009b      	lsls	r3, r3, #2
 8062486:	440b      	add	r3, r1
 8062488:	0099      	lsls	r1, r3, #2
 806248a:	440b      	add	r3, r1
 806248c:	fbb0 f3f3 	udiv	r3, r0, r3
 8062490:	3301      	adds	r3, #1
 8062492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8062496:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 806249a:	6879      	ldr	r1, [r7, #4]
 806249c:	6809      	ldr	r1, [r1, #0]
 806249e:	4313      	orrs	r3, r2
 80624a0:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80624a2:	687b      	ldr	r3, [r7, #4]
 80624a4:	681b      	ldr	r3, [r3, #0]
 80624a6:	681b      	ldr	r3, [r3, #0]
 80624a8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80624ac:	687b      	ldr	r3, [r7, #4]
 80624ae:	69da      	ldr	r2, [r3, #28]
 80624b0:	687b      	ldr	r3, [r7, #4]
 80624b2:	6a1b      	ldr	r3, [r3, #32]
 80624b4:	431a      	orrs	r2, r3
 80624b6:	687b      	ldr	r3, [r7, #4]
 80624b8:	681b      	ldr	r3, [r3, #0]
 80624ba:	430a      	orrs	r2, r1
 80624bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80624be:	687b      	ldr	r3, [r7, #4]
 80624c0:	681b      	ldr	r3, [r3, #0]
 80624c2:	689b      	ldr	r3, [r3, #8]
 80624c4:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80624c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80624cc:	687a      	ldr	r2, [r7, #4]
 80624ce:	6911      	ldr	r1, [r2, #16]
 80624d0:	687a      	ldr	r2, [r7, #4]
 80624d2:	68d2      	ldr	r2, [r2, #12]
 80624d4:	4311      	orrs	r1, r2
 80624d6:	687a      	ldr	r2, [r7, #4]
 80624d8:	6812      	ldr	r2, [r2, #0]
 80624da:	430b      	orrs	r3, r1
 80624dc:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80624de:	687b      	ldr	r3, [r7, #4]
 80624e0:	681b      	ldr	r3, [r3, #0]
 80624e2:	68db      	ldr	r3, [r3, #12]
 80624e4:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80624e8:	687b      	ldr	r3, [r7, #4]
 80624ea:	695a      	ldr	r2, [r3, #20]
 80624ec:	687b      	ldr	r3, [r7, #4]
 80624ee:	699b      	ldr	r3, [r3, #24]
 80624f0:	431a      	orrs	r2, r3
 80624f2:	687b      	ldr	r3, [r7, #4]
 80624f4:	681b      	ldr	r3, [r3, #0]
 80624f6:	430a      	orrs	r2, r1
 80624f8:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80624fa:	687b      	ldr	r3, [r7, #4]
 80624fc:	681b      	ldr	r3, [r3, #0]
 80624fe:	681a      	ldr	r2, [r3, #0]
 8062500:	687b      	ldr	r3, [r7, #4]
 8062502:	681b      	ldr	r3, [r3, #0]
 8062504:	f042 0201 	orr.w	r2, r2, #1
 8062508:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 806250a:	687b      	ldr	r3, [r7, #4]
 806250c:	2200      	movs	r2, #0
 806250e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8062510:	687b      	ldr	r3, [r7, #4]
 8062512:	2220      	movs	r2, #32
 8062514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8062518:	687b      	ldr	r3, [r7, #4]
 806251a:	2200      	movs	r2, #0
 806251c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 806251e:	687b      	ldr	r3, [r7, #4]
 8062520:	2200      	movs	r2, #0
 8062522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8062526:	2300      	movs	r3, #0
}
 8062528:	4618      	mov	r0, r3
 806252a:	3710      	adds	r7, #16
 806252c:	46bd      	mov	sp, r7
 806252e:	bd80      	pop	{r7, pc}

08062530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8062530:	b580      	push	{r7, lr}
 8062532:	b086      	sub	sp, #24
 8062534:	af00      	add	r7, sp, #0
 8062536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8062538:	687b      	ldr	r3, [r7, #4]
 806253a:	2b00      	cmp	r3, #0
 806253c:	d101      	bne.n	8062542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 806253e:	2301      	movs	r3, #1
 8062540:	e316      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8062542:	687b      	ldr	r3, [r7, #4]
 8062544:	681b      	ldr	r3, [r3, #0]
 8062546:	2b0f      	cmp	r3, #15
 8062548:	d903      	bls.n	8062552 <HAL_RCC_OscConfig+0x22>
 806254a:	21e8      	movs	r1, #232	; 0xe8
 806254c:	48a3      	ldr	r0, [pc, #652]	; (80627dc <HAL_RCC_OscConfig+0x2ac>)
 806254e:	f7fe ff08 	bl	8061362 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8062552:	687b      	ldr	r3, [r7, #4]
 8062554:	681b      	ldr	r3, [r3, #0]
 8062556:	f003 0301 	and.w	r3, r3, #1
 806255a:	2b00      	cmp	r3, #0
 806255c:	f000 8088 	beq.w	8062670 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8062560:	687b      	ldr	r3, [r7, #4]
 8062562:	685b      	ldr	r3, [r3, #4]
 8062564:	2b00      	cmp	r3, #0
 8062566:	d00d      	beq.n	8062584 <HAL_RCC_OscConfig+0x54>
 8062568:	687b      	ldr	r3, [r7, #4]
 806256a:	685b      	ldr	r3, [r3, #4]
 806256c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8062570:	d008      	beq.n	8062584 <HAL_RCC_OscConfig+0x54>
 8062572:	687b      	ldr	r3, [r7, #4]
 8062574:	685b      	ldr	r3, [r3, #4]
 8062576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 806257a:	d003      	beq.n	8062584 <HAL_RCC_OscConfig+0x54>
 806257c:	21ed      	movs	r1, #237	; 0xed
 806257e:	4897      	ldr	r0, [pc, #604]	; (80627dc <HAL_RCC_OscConfig+0x2ac>)
 8062580:	f7fe feef 	bl	8061362 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8062584:	4b96      	ldr	r3, [pc, #600]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 8062586:	689b      	ldr	r3, [r3, #8]
 8062588:	f003 030c 	and.w	r3, r3, #12
 806258c:	2b04      	cmp	r3, #4
 806258e:	d00c      	beq.n	80625aa <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8062590:	4b93      	ldr	r3, [pc, #588]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 8062592:	689b      	ldr	r3, [r3, #8]
 8062594:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8062598:	2b08      	cmp	r3, #8
 806259a:	d112      	bne.n	80625c2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 806259c:	4b90      	ldr	r3, [pc, #576]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 806259e:	685b      	ldr	r3, [r3, #4]
 80625a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80625a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80625a8:	d10b      	bne.n	80625c2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80625aa:	4b8d      	ldr	r3, [pc, #564]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80625ac:	681b      	ldr	r3, [r3, #0]
 80625ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80625b2:	2b00      	cmp	r3, #0
 80625b4:	d05b      	beq.n	806266e <HAL_RCC_OscConfig+0x13e>
 80625b6:	687b      	ldr	r3, [r7, #4]
 80625b8:	685b      	ldr	r3, [r3, #4]
 80625ba:	2b00      	cmp	r3, #0
 80625bc:	d157      	bne.n	806266e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80625be:	2301      	movs	r3, #1
 80625c0:	e2d6      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80625c2:	687b      	ldr	r3, [r7, #4]
 80625c4:	685b      	ldr	r3, [r3, #4]
 80625c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80625ca:	d106      	bne.n	80625da <HAL_RCC_OscConfig+0xaa>
 80625cc:	4b84      	ldr	r3, [pc, #528]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80625ce:	681b      	ldr	r3, [r3, #0]
 80625d0:	4a83      	ldr	r2, [pc, #524]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80625d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80625d6:	6013      	str	r3, [r2, #0]
 80625d8:	e01d      	b.n	8062616 <HAL_RCC_OscConfig+0xe6>
 80625da:	687b      	ldr	r3, [r7, #4]
 80625dc:	685b      	ldr	r3, [r3, #4]
 80625de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80625e2:	d10c      	bne.n	80625fe <HAL_RCC_OscConfig+0xce>
 80625e4:	4b7e      	ldr	r3, [pc, #504]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80625e6:	681b      	ldr	r3, [r3, #0]
 80625e8:	4a7d      	ldr	r2, [pc, #500]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80625ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80625ee:	6013      	str	r3, [r2, #0]
 80625f0:	4b7b      	ldr	r3, [pc, #492]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80625f2:	681b      	ldr	r3, [r3, #0]
 80625f4:	4a7a      	ldr	r2, [pc, #488]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80625f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80625fa:	6013      	str	r3, [r2, #0]
 80625fc:	e00b      	b.n	8062616 <HAL_RCC_OscConfig+0xe6>
 80625fe:	4b78      	ldr	r3, [pc, #480]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 8062600:	681b      	ldr	r3, [r3, #0]
 8062602:	4a77      	ldr	r2, [pc, #476]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 8062604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8062608:	6013      	str	r3, [r2, #0]
 806260a:	4b75      	ldr	r3, [pc, #468]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 806260c:	681b      	ldr	r3, [r3, #0]
 806260e:	4a74      	ldr	r2, [pc, #464]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 8062610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8062614:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8062616:	687b      	ldr	r3, [r7, #4]
 8062618:	685b      	ldr	r3, [r3, #4]
 806261a:	2b00      	cmp	r3, #0
 806261c:	d013      	beq.n	8062646 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 806261e:	f7ff f8ff 	bl	8061820 <HAL_GetTick>
 8062622:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8062624:	e008      	b.n	8062638 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8062626:	f7ff f8fb 	bl	8061820 <HAL_GetTick>
 806262a:	4602      	mov	r2, r0
 806262c:	693b      	ldr	r3, [r7, #16]
 806262e:	1ad3      	subs	r3, r2, r3
 8062630:	2b64      	cmp	r3, #100	; 0x64
 8062632:	d901      	bls.n	8062638 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8062634:	2303      	movs	r3, #3
 8062636:	e29b      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8062638:	4b69      	ldr	r3, [pc, #420]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 806263a:	681b      	ldr	r3, [r3, #0]
 806263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8062640:	2b00      	cmp	r3, #0
 8062642:	d0f0      	beq.n	8062626 <HAL_RCC_OscConfig+0xf6>
 8062644:	e014      	b.n	8062670 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8062646:	f7ff f8eb 	bl	8061820 <HAL_GetTick>
 806264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 806264c:	e008      	b.n	8062660 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 806264e:	f7ff f8e7 	bl	8061820 <HAL_GetTick>
 8062652:	4602      	mov	r2, r0
 8062654:	693b      	ldr	r3, [r7, #16]
 8062656:	1ad3      	subs	r3, r2, r3
 8062658:	2b64      	cmp	r3, #100	; 0x64
 806265a:	d901      	bls.n	8062660 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 806265c:	2303      	movs	r3, #3
 806265e:	e287      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8062660:	4b5f      	ldr	r3, [pc, #380]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 8062662:	681b      	ldr	r3, [r3, #0]
 8062664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8062668:	2b00      	cmp	r3, #0
 806266a:	d1f0      	bne.n	806264e <HAL_RCC_OscConfig+0x11e>
 806266c:	e000      	b.n	8062670 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 806266e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8062670:	687b      	ldr	r3, [r7, #4]
 8062672:	681b      	ldr	r3, [r3, #0]
 8062674:	f003 0302 	and.w	r3, r3, #2
 8062678:	2b00      	cmp	r3, #0
 806267a:	d079      	beq.n	8062770 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 806267c:	687b      	ldr	r3, [r7, #4]
 806267e:	68db      	ldr	r3, [r3, #12]
 8062680:	2b00      	cmp	r3, #0
 8062682:	d008      	beq.n	8062696 <HAL_RCC_OscConfig+0x166>
 8062684:	687b      	ldr	r3, [r7, #4]
 8062686:	68db      	ldr	r3, [r3, #12]
 8062688:	2b01      	cmp	r3, #1
 806268a:	d004      	beq.n	8062696 <HAL_RCC_OscConfig+0x166>
 806268c:	f240 111f 	movw	r1, #287	; 0x11f
 8062690:	4852      	ldr	r0, [pc, #328]	; (80627dc <HAL_RCC_OscConfig+0x2ac>)
 8062692:	f7fe fe66 	bl	8061362 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8062696:	687b      	ldr	r3, [r7, #4]
 8062698:	691b      	ldr	r3, [r3, #16]
 806269a:	2b1f      	cmp	r3, #31
 806269c:	d904      	bls.n	80626a8 <HAL_RCC_OscConfig+0x178>
 806269e:	f44f 7190 	mov.w	r1, #288	; 0x120
 80626a2:	484e      	ldr	r0, [pc, #312]	; (80627dc <HAL_RCC_OscConfig+0x2ac>)
 80626a4:	f7fe fe5d 	bl	8061362 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80626a8:	4b4d      	ldr	r3, [pc, #308]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80626aa:	689b      	ldr	r3, [r3, #8]
 80626ac:	f003 030c 	and.w	r3, r3, #12
 80626b0:	2b00      	cmp	r3, #0
 80626b2:	d00b      	beq.n	80626cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80626b4:	4b4a      	ldr	r3, [pc, #296]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80626b6:	689b      	ldr	r3, [r3, #8]
 80626b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80626bc:	2b08      	cmp	r3, #8
 80626be:	d11c      	bne.n	80626fa <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80626c0:	4b47      	ldr	r3, [pc, #284]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80626c2:	685b      	ldr	r3, [r3, #4]
 80626c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80626c8:	2b00      	cmp	r3, #0
 80626ca:	d116      	bne.n	80626fa <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80626cc:	4b44      	ldr	r3, [pc, #272]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80626ce:	681b      	ldr	r3, [r3, #0]
 80626d0:	f003 0302 	and.w	r3, r3, #2
 80626d4:	2b00      	cmp	r3, #0
 80626d6:	d005      	beq.n	80626e4 <HAL_RCC_OscConfig+0x1b4>
 80626d8:	687b      	ldr	r3, [r7, #4]
 80626da:	68db      	ldr	r3, [r3, #12]
 80626dc:	2b01      	cmp	r3, #1
 80626de:	d001      	beq.n	80626e4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80626e0:	2301      	movs	r3, #1
 80626e2:	e245      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80626e4:	4b3e      	ldr	r3, [pc, #248]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80626e6:	681b      	ldr	r3, [r3, #0]
 80626e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80626ec:	687b      	ldr	r3, [r7, #4]
 80626ee:	691b      	ldr	r3, [r3, #16]
 80626f0:	00db      	lsls	r3, r3, #3
 80626f2:	493b      	ldr	r1, [pc, #236]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80626f4:	4313      	orrs	r3, r2
 80626f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80626f8:	e03a      	b.n	8062770 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80626fa:	687b      	ldr	r3, [r7, #4]
 80626fc:	68db      	ldr	r3, [r3, #12]
 80626fe:	2b00      	cmp	r3, #0
 8062700:	d020      	beq.n	8062744 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8062702:	4b38      	ldr	r3, [pc, #224]	; (80627e4 <HAL_RCC_OscConfig+0x2b4>)
 8062704:	2201      	movs	r2, #1
 8062706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8062708:	f7ff f88a 	bl	8061820 <HAL_GetTick>
 806270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 806270e:	e008      	b.n	8062722 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8062710:	f7ff f886 	bl	8061820 <HAL_GetTick>
 8062714:	4602      	mov	r2, r0
 8062716:	693b      	ldr	r3, [r7, #16]
 8062718:	1ad3      	subs	r3, r2, r3
 806271a:	2b02      	cmp	r3, #2
 806271c:	d901      	bls.n	8062722 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 806271e:	2303      	movs	r3, #3
 8062720:	e226      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8062722:	4b2f      	ldr	r3, [pc, #188]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 8062724:	681b      	ldr	r3, [r3, #0]
 8062726:	f003 0302 	and.w	r3, r3, #2
 806272a:	2b00      	cmp	r3, #0
 806272c:	d0f0      	beq.n	8062710 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 806272e:	4b2c      	ldr	r3, [pc, #176]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 8062730:	681b      	ldr	r3, [r3, #0]
 8062732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8062736:	687b      	ldr	r3, [r7, #4]
 8062738:	691b      	ldr	r3, [r3, #16]
 806273a:	00db      	lsls	r3, r3, #3
 806273c:	4928      	ldr	r1, [pc, #160]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 806273e:	4313      	orrs	r3, r2
 8062740:	600b      	str	r3, [r1, #0]
 8062742:	e015      	b.n	8062770 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8062744:	4b27      	ldr	r3, [pc, #156]	; (80627e4 <HAL_RCC_OscConfig+0x2b4>)
 8062746:	2200      	movs	r2, #0
 8062748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 806274a:	f7ff f869 	bl	8061820 <HAL_GetTick>
 806274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8062750:	e008      	b.n	8062764 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8062752:	f7ff f865 	bl	8061820 <HAL_GetTick>
 8062756:	4602      	mov	r2, r0
 8062758:	693b      	ldr	r3, [r7, #16]
 806275a:	1ad3      	subs	r3, r2, r3
 806275c:	2b02      	cmp	r3, #2
 806275e:	d901      	bls.n	8062764 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8062760:	2303      	movs	r3, #3
 8062762:	e205      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8062764:	4b1e      	ldr	r3, [pc, #120]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 8062766:	681b      	ldr	r3, [r3, #0]
 8062768:	f003 0302 	and.w	r3, r3, #2
 806276c:	2b00      	cmp	r3, #0
 806276e:	d1f0      	bne.n	8062752 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8062770:	687b      	ldr	r3, [r7, #4]
 8062772:	681b      	ldr	r3, [r3, #0]
 8062774:	f003 0308 	and.w	r3, r3, #8
 8062778:	2b00      	cmp	r3, #0
 806277a:	d046      	beq.n	806280a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 806277c:	687b      	ldr	r3, [r7, #4]
 806277e:	695b      	ldr	r3, [r3, #20]
 8062780:	2b00      	cmp	r3, #0
 8062782:	d008      	beq.n	8062796 <HAL_RCC_OscConfig+0x266>
 8062784:	687b      	ldr	r3, [r7, #4]
 8062786:	695b      	ldr	r3, [r3, #20]
 8062788:	2b01      	cmp	r3, #1
 806278a:	d004      	beq.n	8062796 <HAL_RCC_OscConfig+0x266>
 806278c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8062790:	4812      	ldr	r0, [pc, #72]	; (80627dc <HAL_RCC_OscConfig+0x2ac>)
 8062792:	f7fe fde6 	bl	8061362 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8062796:	687b      	ldr	r3, [r7, #4]
 8062798:	695b      	ldr	r3, [r3, #20]
 806279a:	2b00      	cmp	r3, #0
 806279c:	d016      	beq.n	80627cc <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 806279e:	4b12      	ldr	r3, [pc, #72]	; (80627e8 <HAL_RCC_OscConfig+0x2b8>)
 80627a0:	2201      	movs	r2, #1
 80627a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80627a4:	f7ff f83c 	bl	8061820 <HAL_GetTick>
 80627a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80627aa:	e008      	b.n	80627be <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80627ac:	f7ff f838 	bl	8061820 <HAL_GetTick>
 80627b0:	4602      	mov	r2, r0
 80627b2:	693b      	ldr	r3, [r7, #16]
 80627b4:	1ad3      	subs	r3, r2, r3
 80627b6:	2b02      	cmp	r3, #2
 80627b8:	d901      	bls.n	80627be <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80627ba:	2303      	movs	r3, #3
 80627bc:	e1d8      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80627be:	4b08      	ldr	r3, [pc, #32]	; (80627e0 <HAL_RCC_OscConfig+0x2b0>)
 80627c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80627c2:	f003 0302 	and.w	r3, r3, #2
 80627c6:	2b00      	cmp	r3, #0
 80627c8:	d0f0      	beq.n	80627ac <HAL_RCC_OscConfig+0x27c>
 80627ca:	e01e      	b.n	806280a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80627cc:	4b06      	ldr	r3, [pc, #24]	; (80627e8 <HAL_RCC_OscConfig+0x2b8>)
 80627ce:	2200      	movs	r2, #0
 80627d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80627d2:	f7ff f825 	bl	8061820 <HAL_GetTick>
 80627d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80627d8:	e011      	b.n	80627fe <HAL_RCC_OscConfig+0x2ce>
 80627da:	bf00      	nop
 80627dc:	0806d37c 	.word	0x0806d37c
 80627e0:	40023800 	.word	0x40023800
 80627e4:	42470000 	.word	0x42470000
 80627e8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80627ec:	f7ff f818 	bl	8061820 <HAL_GetTick>
 80627f0:	4602      	mov	r2, r0
 80627f2:	693b      	ldr	r3, [r7, #16]
 80627f4:	1ad3      	subs	r3, r2, r3
 80627f6:	2b02      	cmp	r3, #2
 80627f8:	d901      	bls.n	80627fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80627fa:	2303      	movs	r3, #3
 80627fc:	e1b8      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80627fe:	4b97      	ldr	r3, [pc, #604]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 8062800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8062802:	f003 0302 	and.w	r3, r3, #2
 8062806:	2b00      	cmp	r3, #0
 8062808:	d1f0      	bne.n	80627ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 806280a:	687b      	ldr	r3, [r7, #4]
 806280c:	681b      	ldr	r3, [r3, #0]
 806280e:	f003 0304 	and.w	r3, r3, #4
 8062812:	2b00      	cmp	r3, #0
 8062814:	f000 80a8 	beq.w	8062968 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8062818:	2300      	movs	r3, #0
 806281a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 806281c:	687b      	ldr	r3, [r7, #4]
 806281e:	689b      	ldr	r3, [r3, #8]
 8062820:	2b00      	cmp	r3, #0
 8062822:	d00c      	beq.n	806283e <HAL_RCC_OscConfig+0x30e>
 8062824:	687b      	ldr	r3, [r7, #4]
 8062826:	689b      	ldr	r3, [r3, #8]
 8062828:	2b01      	cmp	r3, #1
 806282a:	d008      	beq.n	806283e <HAL_RCC_OscConfig+0x30e>
 806282c:	687b      	ldr	r3, [r7, #4]
 806282e:	689b      	ldr	r3, [r3, #8]
 8062830:	2b05      	cmp	r3, #5
 8062832:	d004      	beq.n	806283e <HAL_RCC_OscConfig+0x30e>
 8062834:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8062838:	4889      	ldr	r0, [pc, #548]	; (8062a60 <HAL_RCC_OscConfig+0x530>)
 806283a:	f7fe fd92 	bl	8061362 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 806283e:	4b87      	ldr	r3, [pc, #540]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 8062840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8062846:	2b00      	cmp	r3, #0
 8062848:	d10f      	bne.n	806286a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 806284a:	2300      	movs	r3, #0
 806284c:	60bb      	str	r3, [r7, #8]
 806284e:	4b83      	ldr	r3, [pc, #524]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 8062850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062852:	4a82      	ldr	r2, [pc, #520]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 8062854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8062858:	6413      	str	r3, [r2, #64]	; 0x40
 806285a:	4b80      	ldr	r3, [pc, #512]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 806285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8062862:	60bb      	str	r3, [r7, #8]
 8062864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8062866:	2301      	movs	r3, #1
 8062868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 806286a:	4b7e      	ldr	r3, [pc, #504]	; (8062a64 <HAL_RCC_OscConfig+0x534>)
 806286c:	681b      	ldr	r3, [r3, #0]
 806286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8062872:	2b00      	cmp	r3, #0
 8062874:	d118      	bne.n	80628a8 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8062876:	4b7b      	ldr	r3, [pc, #492]	; (8062a64 <HAL_RCC_OscConfig+0x534>)
 8062878:	681b      	ldr	r3, [r3, #0]
 806287a:	4a7a      	ldr	r2, [pc, #488]	; (8062a64 <HAL_RCC_OscConfig+0x534>)
 806287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8062880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8062882:	f7fe ffcd 	bl	8061820 <HAL_GetTick>
 8062886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8062888:	e008      	b.n	806289c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 806288a:	f7fe ffc9 	bl	8061820 <HAL_GetTick>
 806288e:	4602      	mov	r2, r0
 8062890:	693b      	ldr	r3, [r7, #16]
 8062892:	1ad3      	subs	r3, r2, r3
 8062894:	2b02      	cmp	r3, #2
 8062896:	d901      	bls.n	806289c <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8062898:	2303      	movs	r3, #3
 806289a:	e169      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 806289c:	4b71      	ldr	r3, [pc, #452]	; (8062a64 <HAL_RCC_OscConfig+0x534>)
 806289e:	681b      	ldr	r3, [r3, #0]
 80628a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80628a4:	2b00      	cmp	r3, #0
 80628a6:	d0f0      	beq.n	806288a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80628a8:	687b      	ldr	r3, [r7, #4]
 80628aa:	689b      	ldr	r3, [r3, #8]
 80628ac:	2b01      	cmp	r3, #1
 80628ae:	d106      	bne.n	80628be <HAL_RCC_OscConfig+0x38e>
 80628b0:	4b6a      	ldr	r3, [pc, #424]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 80628b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80628b4:	4a69      	ldr	r2, [pc, #420]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 80628b6:	f043 0301 	orr.w	r3, r3, #1
 80628ba:	6713      	str	r3, [r2, #112]	; 0x70
 80628bc:	e01c      	b.n	80628f8 <HAL_RCC_OscConfig+0x3c8>
 80628be:	687b      	ldr	r3, [r7, #4]
 80628c0:	689b      	ldr	r3, [r3, #8]
 80628c2:	2b05      	cmp	r3, #5
 80628c4:	d10c      	bne.n	80628e0 <HAL_RCC_OscConfig+0x3b0>
 80628c6:	4b65      	ldr	r3, [pc, #404]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 80628c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80628ca:	4a64      	ldr	r2, [pc, #400]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 80628cc:	f043 0304 	orr.w	r3, r3, #4
 80628d0:	6713      	str	r3, [r2, #112]	; 0x70
 80628d2:	4b62      	ldr	r3, [pc, #392]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 80628d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80628d6:	4a61      	ldr	r2, [pc, #388]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 80628d8:	f043 0301 	orr.w	r3, r3, #1
 80628dc:	6713      	str	r3, [r2, #112]	; 0x70
 80628de:	e00b      	b.n	80628f8 <HAL_RCC_OscConfig+0x3c8>
 80628e0:	4b5e      	ldr	r3, [pc, #376]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 80628e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80628e4:	4a5d      	ldr	r2, [pc, #372]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 80628e6:	f023 0301 	bic.w	r3, r3, #1
 80628ea:	6713      	str	r3, [r2, #112]	; 0x70
 80628ec:	4b5b      	ldr	r3, [pc, #364]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 80628ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80628f0:	4a5a      	ldr	r2, [pc, #360]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 80628f2:	f023 0304 	bic.w	r3, r3, #4
 80628f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80628f8:	687b      	ldr	r3, [r7, #4]
 80628fa:	689b      	ldr	r3, [r3, #8]
 80628fc:	2b00      	cmp	r3, #0
 80628fe:	d015      	beq.n	806292c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8062900:	f7fe ff8e 	bl	8061820 <HAL_GetTick>
 8062904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8062906:	e00a      	b.n	806291e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8062908:	f7fe ff8a 	bl	8061820 <HAL_GetTick>
 806290c:	4602      	mov	r2, r0
 806290e:	693b      	ldr	r3, [r7, #16]
 8062910:	1ad3      	subs	r3, r2, r3
 8062912:	f241 3288 	movw	r2, #5000	; 0x1388
 8062916:	4293      	cmp	r3, r2
 8062918:	d901      	bls.n	806291e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 806291a:	2303      	movs	r3, #3
 806291c:	e128      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 806291e:	4b4f      	ldr	r3, [pc, #316]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 8062920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8062922:	f003 0302 	and.w	r3, r3, #2
 8062926:	2b00      	cmp	r3, #0
 8062928:	d0ee      	beq.n	8062908 <HAL_RCC_OscConfig+0x3d8>
 806292a:	e014      	b.n	8062956 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 806292c:	f7fe ff78 	bl	8061820 <HAL_GetTick>
 8062930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8062932:	e00a      	b.n	806294a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8062934:	f7fe ff74 	bl	8061820 <HAL_GetTick>
 8062938:	4602      	mov	r2, r0
 806293a:	693b      	ldr	r3, [r7, #16]
 806293c:	1ad3      	subs	r3, r2, r3
 806293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8062942:	4293      	cmp	r3, r2
 8062944:	d901      	bls.n	806294a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8062946:	2303      	movs	r3, #3
 8062948:	e112      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 806294a:	4b44      	ldr	r3, [pc, #272]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 806294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 806294e:	f003 0302 	and.w	r3, r3, #2
 8062952:	2b00      	cmp	r3, #0
 8062954:	d1ee      	bne.n	8062934 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8062956:	7dfb      	ldrb	r3, [r7, #23]
 8062958:	2b01      	cmp	r3, #1
 806295a:	d105      	bne.n	8062968 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 806295c:	4b3f      	ldr	r3, [pc, #252]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 806295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062960:	4a3e      	ldr	r2, [pc, #248]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 8062962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8062966:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8062968:	687b      	ldr	r3, [r7, #4]
 806296a:	699b      	ldr	r3, [r3, #24]
 806296c:	2b00      	cmp	r3, #0
 806296e:	d00c      	beq.n	806298a <HAL_RCC_OscConfig+0x45a>
 8062970:	687b      	ldr	r3, [r7, #4]
 8062972:	699b      	ldr	r3, [r3, #24]
 8062974:	2b01      	cmp	r3, #1
 8062976:	d008      	beq.n	806298a <HAL_RCC_OscConfig+0x45a>
 8062978:	687b      	ldr	r3, [r7, #4]
 806297a:	699b      	ldr	r3, [r3, #24]
 806297c:	2b02      	cmp	r3, #2
 806297e:	d004      	beq.n	806298a <HAL_RCC_OscConfig+0x45a>
 8062980:	f240 11cf 	movw	r1, #463	; 0x1cf
 8062984:	4836      	ldr	r0, [pc, #216]	; (8062a60 <HAL_RCC_OscConfig+0x530>)
 8062986:	f7fe fcec 	bl	8061362 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 806298a:	687b      	ldr	r3, [r7, #4]
 806298c:	699b      	ldr	r3, [r3, #24]
 806298e:	2b00      	cmp	r3, #0
 8062990:	f000 80ed 	beq.w	8062b6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8062994:	4b31      	ldr	r3, [pc, #196]	; (8062a5c <HAL_RCC_OscConfig+0x52c>)
 8062996:	689b      	ldr	r3, [r3, #8]
 8062998:	f003 030c 	and.w	r3, r3, #12
 806299c:	2b08      	cmp	r3, #8
 806299e:	f000 80ae 	beq.w	8062afe <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80629a2:	687b      	ldr	r3, [r7, #4]
 80629a4:	699b      	ldr	r3, [r3, #24]
 80629a6:	2b02      	cmp	r3, #2
 80629a8:	f040 8092 	bne.w	8062ad0 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80629ac:	687b      	ldr	r3, [r7, #4]
 80629ae:	69db      	ldr	r3, [r3, #28]
 80629b0:	2b00      	cmp	r3, #0
 80629b2:	d009      	beq.n	80629c8 <HAL_RCC_OscConfig+0x498>
 80629b4:	687b      	ldr	r3, [r7, #4]
 80629b6:	69db      	ldr	r3, [r3, #28]
 80629b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80629bc:	d004      	beq.n	80629c8 <HAL_RCC_OscConfig+0x498>
 80629be:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80629c2:	4827      	ldr	r0, [pc, #156]	; (8062a60 <HAL_RCC_OscConfig+0x530>)
 80629c4:	f7fe fccd 	bl	8061362 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80629c8:	687b      	ldr	r3, [r7, #4]
 80629ca:	6a1b      	ldr	r3, [r3, #32]
 80629cc:	2b3f      	cmp	r3, #63	; 0x3f
 80629ce:	d904      	bls.n	80629da <HAL_RCC_OscConfig+0x4aa>
 80629d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80629d4:	4822      	ldr	r0, [pc, #136]	; (8062a60 <HAL_RCC_OscConfig+0x530>)
 80629d6:	f7fe fcc4 	bl	8061362 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80629da:	687b      	ldr	r3, [r7, #4]
 80629dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80629de:	2b31      	cmp	r3, #49	; 0x31
 80629e0:	d904      	bls.n	80629ec <HAL_RCC_OscConfig+0x4bc>
 80629e2:	687b      	ldr	r3, [r7, #4]
 80629e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80629e6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80629ea:	d904      	bls.n	80629f6 <HAL_RCC_OscConfig+0x4c6>
 80629ec:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80629f0:	481b      	ldr	r0, [pc, #108]	; (8062a60 <HAL_RCC_OscConfig+0x530>)
 80629f2:	f7fe fcb6 	bl	8061362 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80629f6:	687b      	ldr	r3, [r7, #4]
 80629f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80629fa:	2b02      	cmp	r3, #2
 80629fc:	d010      	beq.n	8062a20 <HAL_RCC_OscConfig+0x4f0>
 80629fe:	687b      	ldr	r3, [r7, #4]
 8062a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8062a02:	2b04      	cmp	r3, #4
 8062a04:	d00c      	beq.n	8062a20 <HAL_RCC_OscConfig+0x4f0>
 8062a06:	687b      	ldr	r3, [r7, #4]
 8062a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8062a0a:	2b06      	cmp	r3, #6
 8062a0c:	d008      	beq.n	8062a20 <HAL_RCC_OscConfig+0x4f0>
 8062a0e:	687b      	ldr	r3, [r7, #4]
 8062a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8062a12:	2b08      	cmp	r3, #8
 8062a14:	d004      	beq.n	8062a20 <HAL_RCC_OscConfig+0x4f0>
 8062a16:	f240 11db 	movw	r1, #475	; 0x1db
 8062a1a:	4811      	ldr	r0, [pc, #68]	; (8062a60 <HAL_RCC_OscConfig+0x530>)
 8062a1c:	f7fe fca1 	bl	8061362 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8062a20:	687b      	ldr	r3, [r7, #4]
 8062a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8062a24:	2b01      	cmp	r3, #1
 8062a26:	d903      	bls.n	8062a30 <HAL_RCC_OscConfig+0x500>
 8062a28:	687b      	ldr	r3, [r7, #4]
 8062a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8062a2c:	2b0f      	cmp	r3, #15
 8062a2e:	d904      	bls.n	8062a3a <HAL_RCC_OscConfig+0x50a>
 8062a30:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8062a34:	480a      	ldr	r0, [pc, #40]	; (8062a60 <HAL_RCC_OscConfig+0x530>)
 8062a36:	f7fe fc94 	bl	8061362 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8062a3a:	4b0b      	ldr	r3, [pc, #44]	; (8062a68 <HAL_RCC_OscConfig+0x538>)
 8062a3c:	2200      	movs	r2, #0
 8062a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8062a40:	f7fe feee 	bl	8061820 <HAL_GetTick>
 8062a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8062a46:	e011      	b.n	8062a6c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8062a48:	f7fe feea 	bl	8061820 <HAL_GetTick>
 8062a4c:	4602      	mov	r2, r0
 8062a4e:	693b      	ldr	r3, [r7, #16]
 8062a50:	1ad3      	subs	r3, r2, r3
 8062a52:	2b02      	cmp	r3, #2
 8062a54:	d90a      	bls.n	8062a6c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8062a56:	2303      	movs	r3, #3
 8062a58:	e08a      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
 8062a5a:	bf00      	nop
 8062a5c:	40023800 	.word	0x40023800
 8062a60:	0806d37c 	.word	0x0806d37c
 8062a64:	40007000 	.word	0x40007000
 8062a68:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8062a6c:	4b42      	ldr	r3, [pc, #264]	; (8062b78 <HAL_RCC_OscConfig+0x648>)
 8062a6e:	681b      	ldr	r3, [r3, #0]
 8062a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8062a74:	2b00      	cmp	r3, #0
 8062a76:	d1e7      	bne.n	8062a48 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8062a78:	687b      	ldr	r3, [r7, #4]
 8062a7a:	69da      	ldr	r2, [r3, #28]
 8062a7c:	687b      	ldr	r3, [r7, #4]
 8062a7e:	6a1b      	ldr	r3, [r3, #32]
 8062a80:	431a      	orrs	r2, r3
 8062a82:	687b      	ldr	r3, [r7, #4]
 8062a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8062a86:	019b      	lsls	r3, r3, #6
 8062a88:	431a      	orrs	r2, r3
 8062a8a:	687b      	ldr	r3, [r7, #4]
 8062a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8062a8e:	085b      	lsrs	r3, r3, #1
 8062a90:	3b01      	subs	r3, #1
 8062a92:	041b      	lsls	r3, r3, #16
 8062a94:	431a      	orrs	r2, r3
 8062a96:	687b      	ldr	r3, [r7, #4]
 8062a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8062a9a:	061b      	lsls	r3, r3, #24
 8062a9c:	4936      	ldr	r1, [pc, #216]	; (8062b78 <HAL_RCC_OscConfig+0x648>)
 8062a9e:	4313      	orrs	r3, r2
 8062aa0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8062aa2:	4b36      	ldr	r3, [pc, #216]	; (8062b7c <HAL_RCC_OscConfig+0x64c>)
 8062aa4:	2201      	movs	r2, #1
 8062aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8062aa8:	f7fe feba 	bl	8061820 <HAL_GetTick>
 8062aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8062aae:	e008      	b.n	8062ac2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8062ab0:	f7fe feb6 	bl	8061820 <HAL_GetTick>
 8062ab4:	4602      	mov	r2, r0
 8062ab6:	693b      	ldr	r3, [r7, #16]
 8062ab8:	1ad3      	subs	r3, r2, r3
 8062aba:	2b02      	cmp	r3, #2
 8062abc:	d901      	bls.n	8062ac2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8062abe:	2303      	movs	r3, #3
 8062ac0:	e056      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8062ac2:	4b2d      	ldr	r3, [pc, #180]	; (8062b78 <HAL_RCC_OscConfig+0x648>)
 8062ac4:	681b      	ldr	r3, [r3, #0]
 8062ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8062aca:	2b00      	cmp	r3, #0
 8062acc:	d0f0      	beq.n	8062ab0 <HAL_RCC_OscConfig+0x580>
 8062ace:	e04e      	b.n	8062b6e <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8062ad0:	4b2a      	ldr	r3, [pc, #168]	; (8062b7c <HAL_RCC_OscConfig+0x64c>)
 8062ad2:	2200      	movs	r2, #0
 8062ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8062ad6:	f7fe fea3 	bl	8061820 <HAL_GetTick>
 8062ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8062adc:	e008      	b.n	8062af0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8062ade:	f7fe fe9f 	bl	8061820 <HAL_GetTick>
 8062ae2:	4602      	mov	r2, r0
 8062ae4:	693b      	ldr	r3, [r7, #16]
 8062ae6:	1ad3      	subs	r3, r2, r3
 8062ae8:	2b02      	cmp	r3, #2
 8062aea:	d901      	bls.n	8062af0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8062aec:	2303      	movs	r3, #3
 8062aee:	e03f      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8062af0:	4b21      	ldr	r3, [pc, #132]	; (8062b78 <HAL_RCC_OscConfig+0x648>)
 8062af2:	681b      	ldr	r3, [r3, #0]
 8062af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8062af8:	2b00      	cmp	r3, #0
 8062afa:	d1f0      	bne.n	8062ade <HAL_RCC_OscConfig+0x5ae>
 8062afc:	e037      	b.n	8062b6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8062afe:	687b      	ldr	r3, [r7, #4]
 8062b00:	699b      	ldr	r3, [r3, #24]
 8062b02:	2b01      	cmp	r3, #1
 8062b04:	d101      	bne.n	8062b0a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8062b06:	2301      	movs	r3, #1
 8062b08:	e032      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8062b0a:	4b1b      	ldr	r3, [pc, #108]	; (8062b78 <HAL_RCC_OscConfig+0x648>)
 8062b0c:	685b      	ldr	r3, [r3, #4]
 8062b0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8062b10:	687b      	ldr	r3, [r7, #4]
 8062b12:	699b      	ldr	r3, [r3, #24]
 8062b14:	2b01      	cmp	r3, #1
 8062b16:	d028      	beq.n	8062b6a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8062b18:	68fb      	ldr	r3, [r7, #12]
 8062b1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8062b1e:	687b      	ldr	r3, [r7, #4]
 8062b20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8062b22:	429a      	cmp	r2, r3
 8062b24:	d121      	bne.n	8062b6a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8062b26:	68fb      	ldr	r3, [r7, #12]
 8062b28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8062b2c:	687b      	ldr	r3, [r7, #4]
 8062b2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8062b30:	429a      	cmp	r2, r3
 8062b32:	d11a      	bne.n	8062b6a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8062b34:	68fa      	ldr	r2, [r7, #12]
 8062b36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8062b3a:	4013      	ands	r3, r2
 8062b3c:	687a      	ldr	r2, [r7, #4]
 8062b3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8062b40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8062b42:	4293      	cmp	r3, r2
 8062b44:	d111      	bne.n	8062b6a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8062b46:	68fb      	ldr	r3, [r7, #12]
 8062b48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8062b4c:	687b      	ldr	r3, [r7, #4]
 8062b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8062b50:	085b      	lsrs	r3, r3, #1
 8062b52:	3b01      	subs	r3, #1
 8062b54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8062b56:	429a      	cmp	r2, r3
 8062b58:	d107      	bne.n	8062b6a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8062b5a:	68fb      	ldr	r3, [r7, #12]
 8062b5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8062b60:	687b      	ldr	r3, [r7, #4]
 8062b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8062b64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8062b66:	429a      	cmp	r2, r3
 8062b68:	d001      	beq.n	8062b6e <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8062b6a:	2301      	movs	r3, #1
 8062b6c:	e000      	b.n	8062b70 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8062b6e:	2300      	movs	r3, #0
}
 8062b70:	4618      	mov	r0, r3
 8062b72:	3718      	adds	r7, #24
 8062b74:	46bd      	mov	sp, r7
 8062b76:	bd80      	pop	{r7, pc}
 8062b78:	40023800 	.word	0x40023800
 8062b7c:	42470060 	.word	0x42470060

08062b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8062b80:	b580      	push	{r7, lr}
 8062b82:	b084      	sub	sp, #16
 8062b84:	af00      	add	r7, sp, #0
 8062b86:	6078      	str	r0, [r7, #4]
 8062b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8062b8a:	687b      	ldr	r3, [r7, #4]
 8062b8c:	2b00      	cmp	r3, #0
 8062b8e:	d101      	bne.n	8062b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8062b90:	2301      	movs	r3, #1
 8062b92:	e174      	b.n	8062e7e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8062b94:	687b      	ldr	r3, [r7, #4]
 8062b96:	681b      	ldr	r3, [r3, #0]
 8062b98:	2b00      	cmp	r3, #0
 8062b9a:	d003      	beq.n	8062ba4 <HAL_RCC_ClockConfig+0x24>
 8062b9c:	687b      	ldr	r3, [r7, #4]
 8062b9e:	681b      	ldr	r3, [r3, #0]
 8062ba0:	2b0f      	cmp	r3, #15
 8062ba2:	d904      	bls.n	8062bae <HAL_RCC_ClockConfig+0x2e>
 8062ba4:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8062ba8:	487b      	ldr	r0, [pc, #492]	; (8062d98 <HAL_RCC_ClockConfig+0x218>)
 8062baa:	f7fe fbda 	bl	8061362 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8062bae:	683b      	ldr	r3, [r7, #0]
 8062bb0:	2b00      	cmp	r3, #0
 8062bb2:	d019      	beq.n	8062be8 <HAL_RCC_ClockConfig+0x68>
 8062bb4:	683b      	ldr	r3, [r7, #0]
 8062bb6:	2b01      	cmp	r3, #1
 8062bb8:	d016      	beq.n	8062be8 <HAL_RCC_ClockConfig+0x68>
 8062bba:	683b      	ldr	r3, [r7, #0]
 8062bbc:	2b02      	cmp	r3, #2
 8062bbe:	d013      	beq.n	8062be8 <HAL_RCC_ClockConfig+0x68>
 8062bc0:	683b      	ldr	r3, [r7, #0]
 8062bc2:	2b03      	cmp	r3, #3
 8062bc4:	d010      	beq.n	8062be8 <HAL_RCC_ClockConfig+0x68>
 8062bc6:	683b      	ldr	r3, [r7, #0]
 8062bc8:	2b04      	cmp	r3, #4
 8062bca:	d00d      	beq.n	8062be8 <HAL_RCC_ClockConfig+0x68>
 8062bcc:	683b      	ldr	r3, [r7, #0]
 8062bce:	2b05      	cmp	r3, #5
 8062bd0:	d00a      	beq.n	8062be8 <HAL_RCC_ClockConfig+0x68>
 8062bd2:	683b      	ldr	r3, [r7, #0]
 8062bd4:	2b06      	cmp	r3, #6
 8062bd6:	d007      	beq.n	8062be8 <HAL_RCC_ClockConfig+0x68>
 8062bd8:	683b      	ldr	r3, [r7, #0]
 8062bda:	2b07      	cmp	r3, #7
 8062bdc:	d004      	beq.n	8062be8 <HAL_RCC_ClockConfig+0x68>
 8062bde:	f240 215d 	movw	r1, #605	; 0x25d
 8062be2:	486d      	ldr	r0, [pc, #436]	; (8062d98 <HAL_RCC_ClockConfig+0x218>)
 8062be4:	f7fe fbbd 	bl	8061362 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8062be8:	4b6c      	ldr	r3, [pc, #432]	; (8062d9c <HAL_RCC_ClockConfig+0x21c>)
 8062bea:	681b      	ldr	r3, [r3, #0]
 8062bec:	f003 0307 	and.w	r3, r3, #7
 8062bf0:	683a      	ldr	r2, [r7, #0]
 8062bf2:	429a      	cmp	r2, r3
 8062bf4:	d90c      	bls.n	8062c10 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8062bf6:	4b69      	ldr	r3, [pc, #420]	; (8062d9c <HAL_RCC_ClockConfig+0x21c>)
 8062bf8:	683a      	ldr	r2, [r7, #0]
 8062bfa:	b2d2      	uxtb	r2, r2
 8062bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8062bfe:	4b67      	ldr	r3, [pc, #412]	; (8062d9c <HAL_RCC_ClockConfig+0x21c>)
 8062c00:	681b      	ldr	r3, [r3, #0]
 8062c02:	f003 0307 	and.w	r3, r3, #7
 8062c06:	683a      	ldr	r2, [r7, #0]
 8062c08:	429a      	cmp	r2, r3
 8062c0a:	d001      	beq.n	8062c10 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8062c0c:	2301      	movs	r3, #1
 8062c0e:	e136      	b.n	8062e7e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8062c10:	687b      	ldr	r3, [r7, #4]
 8062c12:	681b      	ldr	r3, [r3, #0]
 8062c14:	f003 0302 	and.w	r3, r3, #2
 8062c18:	2b00      	cmp	r3, #0
 8062c1a:	d049      	beq.n	8062cb0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8062c1c:	687b      	ldr	r3, [r7, #4]
 8062c1e:	681b      	ldr	r3, [r3, #0]
 8062c20:	f003 0304 	and.w	r3, r3, #4
 8062c24:	2b00      	cmp	r3, #0
 8062c26:	d005      	beq.n	8062c34 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8062c28:	4b5d      	ldr	r3, [pc, #372]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062c2a:	689b      	ldr	r3, [r3, #8]
 8062c2c:	4a5c      	ldr	r2, [pc, #368]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8062c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8062c34:	687b      	ldr	r3, [r7, #4]
 8062c36:	681b      	ldr	r3, [r3, #0]
 8062c38:	f003 0308 	and.w	r3, r3, #8
 8062c3c:	2b00      	cmp	r3, #0
 8062c3e:	d005      	beq.n	8062c4c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8062c40:	4b57      	ldr	r3, [pc, #348]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062c42:	689b      	ldr	r3, [r3, #8]
 8062c44:	4a56      	ldr	r2, [pc, #344]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8062c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8062c4c:	687b      	ldr	r3, [r7, #4]
 8062c4e:	689b      	ldr	r3, [r3, #8]
 8062c50:	2b00      	cmp	r3, #0
 8062c52:	d024      	beq.n	8062c9e <HAL_RCC_ClockConfig+0x11e>
 8062c54:	687b      	ldr	r3, [r7, #4]
 8062c56:	689b      	ldr	r3, [r3, #8]
 8062c58:	2b80      	cmp	r3, #128	; 0x80
 8062c5a:	d020      	beq.n	8062c9e <HAL_RCC_ClockConfig+0x11e>
 8062c5c:	687b      	ldr	r3, [r7, #4]
 8062c5e:	689b      	ldr	r3, [r3, #8]
 8062c60:	2b90      	cmp	r3, #144	; 0x90
 8062c62:	d01c      	beq.n	8062c9e <HAL_RCC_ClockConfig+0x11e>
 8062c64:	687b      	ldr	r3, [r7, #4]
 8062c66:	689b      	ldr	r3, [r3, #8]
 8062c68:	2ba0      	cmp	r3, #160	; 0xa0
 8062c6a:	d018      	beq.n	8062c9e <HAL_RCC_ClockConfig+0x11e>
 8062c6c:	687b      	ldr	r3, [r7, #4]
 8062c6e:	689b      	ldr	r3, [r3, #8]
 8062c70:	2bb0      	cmp	r3, #176	; 0xb0
 8062c72:	d014      	beq.n	8062c9e <HAL_RCC_ClockConfig+0x11e>
 8062c74:	687b      	ldr	r3, [r7, #4]
 8062c76:	689b      	ldr	r3, [r3, #8]
 8062c78:	2bc0      	cmp	r3, #192	; 0xc0
 8062c7a:	d010      	beq.n	8062c9e <HAL_RCC_ClockConfig+0x11e>
 8062c7c:	687b      	ldr	r3, [r7, #4]
 8062c7e:	689b      	ldr	r3, [r3, #8]
 8062c80:	2bd0      	cmp	r3, #208	; 0xd0
 8062c82:	d00c      	beq.n	8062c9e <HAL_RCC_ClockConfig+0x11e>
 8062c84:	687b      	ldr	r3, [r7, #4]
 8062c86:	689b      	ldr	r3, [r3, #8]
 8062c88:	2be0      	cmp	r3, #224	; 0xe0
 8062c8a:	d008      	beq.n	8062c9e <HAL_RCC_ClockConfig+0x11e>
 8062c8c:	687b      	ldr	r3, [r7, #4]
 8062c8e:	689b      	ldr	r3, [r3, #8]
 8062c90:	2bf0      	cmp	r3, #240	; 0xf0
 8062c92:	d004      	beq.n	8062c9e <HAL_RCC_ClockConfig+0x11e>
 8062c94:	f44f 7120 	mov.w	r1, #640	; 0x280
 8062c98:	483f      	ldr	r0, [pc, #252]	; (8062d98 <HAL_RCC_ClockConfig+0x218>)
 8062c9a:	f7fe fb62 	bl	8061362 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8062c9e:	4b40      	ldr	r3, [pc, #256]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062ca0:	689b      	ldr	r3, [r3, #8]
 8062ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8062ca6:	687b      	ldr	r3, [r7, #4]
 8062ca8:	689b      	ldr	r3, [r3, #8]
 8062caa:	493d      	ldr	r1, [pc, #244]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062cac:	4313      	orrs	r3, r2
 8062cae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8062cb0:	687b      	ldr	r3, [r7, #4]
 8062cb2:	681b      	ldr	r3, [r3, #0]
 8062cb4:	f003 0301 	and.w	r3, r3, #1
 8062cb8:	2b00      	cmp	r3, #0
 8062cba:	d059      	beq.n	8062d70 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8062cbc:	687b      	ldr	r3, [r7, #4]
 8062cbe:	685b      	ldr	r3, [r3, #4]
 8062cc0:	2b00      	cmp	r3, #0
 8062cc2:	d010      	beq.n	8062ce6 <HAL_RCC_ClockConfig+0x166>
 8062cc4:	687b      	ldr	r3, [r7, #4]
 8062cc6:	685b      	ldr	r3, [r3, #4]
 8062cc8:	2b01      	cmp	r3, #1
 8062cca:	d00c      	beq.n	8062ce6 <HAL_RCC_ClockConfig+0x166>
 8062ccc:	687b      	ldr	r3, [r7, #4]
 8062cce:	685b      	ldr	r3, [r3, #4]
 8062cd0:	2b02      	cmp	r3, #2
 8062cd2:	d008      	beq.n	8062ce6 <HAL_RCC_ClockConfig+0x166>
 8062cd4:	687b      	ldr	r3, [r7, #4]
 8062cd6:	685b      	ldr	r3, [r3, #4]
 8062cd8:	2b03      	cmp	r3, #3
 8062cda:	d004      	beq.n	8062ce6 <HAL_RCC_ClockConfig+0x166>
 8062cdc:	f240 2187 	movw	r1, #647	; 0x287
 8062ce0:	482d      	ldr	r0, [pc, #180]	; (8062d98 <HAL_RCC_ClockConfig+0x218>)
 8062ce2:	f7fe fb3e 	bl	8061362 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8062ce6:	687b      	ldr	r3, [r7, #4]
 8062ce8:	685b      	ldr	r3, [r3, #4]
 8062cea:	2b01      	cmp	r3, #1
 8062cec:	d107      	bne.n	8062cfe <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8062cee:	4b2c      	ldr	r3, [pc, #176]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062cf0:	681b      	ldr	r3, [r3, #0]
 8062cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8062cf6:	2b00      	cmp	r3, #0
 8062cf8:	d119      	bne.n	8062d2e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8062cfa:	2301      	movs	r3, #1
 8062cfc:	e0bf      	b.n	8062e7e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8062cfe:	687b      	ldr	r3, [r7, #4]
 8062d00:	685b      	ldr	r3, [r3, #4]
 8062d02:	2b02      	cmp	r3, #2
 8062d04:	d003      	beq.n	8062d0e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8062d06:	687b      	ldr	r3, [r7, #4]
 8062d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8062d0a:	2b03      	cmp	r3, #3
 8062d0c:	d107      	bne.n	8062d1e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8062d0e:	4b24      	ldr	r3, [pc, #144]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062d10:	681b      	ldr	r3, [r3, #0]
 8062d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8062d16:	2b00      	cmp	r3, #0
 8062d18:	d109      	bne.n	8062d2e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8062d1a:	2301      	movs	r3, #1
 8062d1c:	e0af      	b.n	8062e7e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8062d1e:	4b20      	ldr	r3, [pc, #128]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062d20:	681b      	ldr	r3, [r3, #0]
 8062d22:	f003 0302 	and.w	r3, r3, #2
 8062d26:	2b00      	cmp	r3, #0
 8062d28:	d101      	bne.n	8062d2e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8062d2a:	2301      	movs	r3, #1
 8062d2c:	e0a7      	b.n	8062e7e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8062d2e:	4b1c      	ldr	r3, [pc, #112]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062d30:	689b      	ldr	r3, [r3, #8]
 8062d32:	f023 0203 	bic.w	r2, r3, #3
 8062d36:	687b      	ldr	r3, [r7, #4]
 8062d38:	685b      	ldr	r3, [r3, #4]
 8062d3a:	4919      	ldr	r1, [pc, #100]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062d3c:	4313      	orrs	r3, r2
 8062d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8062d40:	f7fe fd6e 	bl	8061820 <HAL_GetTick>
 8062d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8062d46:	e00a      	b.n	8062d5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8062d48:	f7fe fd6a 	bl	8061820 <HAL_GetTick>
 8062d4c:	4602      	mov	r2, r0
 8062d4e:	68fb      	ldr	r3, [r7, #12]
 8062d50:	1ad3      	subs	r3, r2, r3
 8062d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8062d56:	4293      	cmp	r3, r2
 8062d58:	d901      	bls.n	8062d5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8062d5a:	2303      	movs	r3, #3
 8062d5c:	e08f      	b.n	8062e7e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8062d5e:	4b10      	ldr	r3, [pc, #64]	; (8062da0 <HAL_RCC_ClockConfig+0x220>)
 8062d60:	689b      	ldr	r3, [r3, #8]
 8062d62:	f003 020c 	and.w	r2, r3, #12
 8062d66:	687b      	ldr	r3, [r7, #4]
 8062d68:	685b      	ldr	r3, [r3, #4]
 8062d6a:	009b      	lsls	r3, r3, #2
 8062d6c:	429a      	cmp	r2, r3
 8062d6e:	d1eb      	bne.n	8062d48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8062d70:	4b0a      	ldr	r3, [pc, #40]	; (8062d9c <HAL_RCC_ClockConfig+0x21c>)
 8062d72:	681b      	ldr	r3, [r3, #0]
 8062d74:	f003 0307 	and.w	r3, r3, #7
 8062d78:	683a      	ldr	r2, [r7, #0]
 8062d7a:	429a      	cmp	r2, r3
 8062d7c:	d212      	bcs.n	8062da4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8062d7e:	4b07      	ldr	r3, [pc, #28]	; (8062d9c <HAL_RCC_ClockConfig+0x21c>)
 8062d80:	683a      	ldr	r2, [r7, #0]
 8062d82:	b2d2      	uxtb	r2, r2
 8062d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8062d86:	4b05      	ldr	r3, [pc, #20]	; (8062d9c <HAL_RCC_ClockConfig+0x21c>)
 8062d88:	681b      	ldr	r3, [r3, #0]
 8062d8a:	f003 0307 	and.w	r3, r3, #7
 8062d8e:	683a      	ldr	r2, [r7, #0]
 8062d90:	429a      	cmp	r2, r3
 8062d92:	d007      	beq.n	8062da4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8062d94:	2301      	movs	r3, #1
 8062d96:	e072      	b.n	8062e7e <HAL_RCC_ClockConfig+0x2fe>
 8062d98:	0806d37c 	.word	0x0806d37c
 8062d9c:	40023c00 	.word	0x40023c00
 8062da0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8062da4:	687b      	ldr	r3, [r7, #4]
 8062da6:	681b      	ldr	r3, [r3, #0]
 8062da8:	f003 0304 	and.w	r3, r3, #4
 8062dac:	2b00      	cmp	r3, #0
 8062dae:	d025      	beq.n	8062dfc <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8062db0:	687b      	ldr	r3, [r7, #4]
 8062db2:	68db      	ldr	r3, [r3, #12]
 8062db4:	2b00      	cmp	r3, #0
 8062db6:	d018      	beq.n	8062dea <HAL_RCC_ClockConfig+0x26a>
 8062db8:	687b      	ldr	r3, [r7, #4]
 8062dba:	68db      	ldr	r3, [r3, #12]
 8062dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8062dc0:	d013      	beq.n	8062dea <HAL_RCC_ClockConfig+0x26a>
 8062dc2:	687b      	ldr	r3, [r7, #4]
 8062dc4:	68db      	ldr	r3, [r3, #12]
 8062dc6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8062dca:	d00e      	beq.n	8062dea <HAL_RCC_ClockConfig+0x26a>
 8062dcc:	687b      	ldr	r3, [r7, #4]
 8062dce:	68db      	ldr	r3, [r3, #12]
 8062dd0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8062dd4:	d009      	beq.n	8062dea <HAL_RCC_ClockConfig+0x26a>
 8062dd6:	687b      	ldr	r3, [r7, #4]
 8062dd8:	68db      	ldr	r3, [r3, #12]
 8062dda:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8062dde:	d004      	beq.n	8062dea <HAL_RCC_ClockConfig+0x26a>
 8062de0:	f240 21c5 	movw	r1, #709	; 0x2c5
 8062de4:	4828      	ldr	r0, [pc, #160]	; (8062e88 <HAL_RCC_ClockConfig+0x308>)
 8062de6:	f7fe fabc 	bl	8061362 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8062dea:	4b28      	ldr	r3, [pc, #160]	; (8062e8c <HAL_RCC_ClockConfig+0x30c>)
 8062dec:	689b      	ldr	r3, [r3, #8]
 8062dee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8062df2:	687b      	ldr	r3, [r7, #4]
 8062df4:	68db      	ldr	r3, [r3, #12]
 8062df6:	4925      	ldr	r1, [pc, #148]	; (8062e8c <HAL_RCC_ClockConfig+0x30c>)
 8062df8:	4313      	orrs	r3, r2
 8062dfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8062dfc:	687b      	ldr	r3, [r7, #4]
 8062dfe:	681b      	ldr	r3, [r3, #0]
 8062e00:	f003 0308 	and.w	r3, r3, #8
 8062e04:	2b00      	cmp	r3, #0
 8062e06:	d026      	beq.n	8062e56 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8062e08:	687b      	ldr	r3, [r7, #4]
 8062e0a:	691b      	ldr	r3, [r3, #16]
 8062e0c:	2b00      	cmp	r3, #0
 8062e0e:	d018      	beq.n	8062e42 <HAL_RCC_ClockConfig+0x2c2>
 8062e10:	687b      	ldr	r3, [r7, #4]
 8062e12:	691b      	ldr	r3, [r3, #16]
 8062e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8062e18:	d013      	beq.n	8062e42 <HAL_RCC_ClockConfig+0x2c2>
 8062e1a:	687b      	ldr	r3, [r7, #4]
 8062e1c:	691b      	ldr	r3, [r3, #16]
 8062e1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8062e22:	d00e      	beq.n	8062e42 <HAL_RCC_ClockConfig+0x2c2>
 8062e24:	687b      	ldr	r3, [r7, #4]
 8062e26:	691b      	ldr	r3, [r3, #16]
 8062e28:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8062e2c:	d009      	beq.n	8062e42 <HAL_RCC_ClockConfig+0x2c2>
 8062e2e:	687b      	ldr	r3, [r7, #4]
 8062e30:	691b      	ldr	r3, [r3, #16]
 8062e32:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8062e36:	d004      	beq.n	8062e42 <HAL_RCC_ClockConfig+0x2c2>
 8062e38:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8062e3c:	4812      	ldr	r0, [pc, #72]	; (8062e88 <HAL_RCC_ClockConfig+0x308>)
 8062e3e:	f7fe fa90 	bl	8061362 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8062e42:	4b12      	ldr	r3, [pc, #72]	; (8062e8c <HAL_RCC_ClockConfig+0x30c>)
 8062e44:	689b      	ldr	r3, [r3, #8]
 8062e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8062e4a:	687b      	ldr	r3, [r7, #4]
 8062e4c:	691b      	ldr	r3, [r3, #16]
 8062e4e:	00db      	lsls	r3, r3, #3
 8062e50:	490e      	ldr	r1, [pc, #56]	; (8062e8c <HAL_RCC_ClockConfig+0x30c>)
 8062e52:	4313      	orrs	r3, r2
 8062e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8062e56:	f000 f821 	bl	8062e9c <HAL_RCC_GetSysClockFreq>
 8062e5a:	4602      	mov	r2, r0
 8062e5c:	4b0b      	ldr	r3, [pc, #44]	; (8062e8c <HAL_RCC_ClockConfig+0x30c>)
 8062e5e:	689b      	ldr	r3, [r3, #8]
 8062e60:	091b      	lsrs	r3, r3, #4
 8062e62:	f003 030f 	and.w	r3, r3, #15
 8062e66:	490a      	ldr	r1, [pc, #40]	; (8062e90 <HAL_RCC_ClockConfig+0x310>)
 8062e68:	5ccb      	ldrb	r3, [r1, r3]
 8062e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8062e6e:	4a09      	ldr	r2, [pc, #36]	; (8062e94 <HAL_RCC_ClockConfig+0x314>)
 8062e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8062e72:	4b09      	ldr	r3, [pc, #36]	; (8062e98 <HAL_RCC_ClockConfig+0x318>)
 8062e74:	681b      	ldr	r3, [r3, #0]
 8062e76:	4618      	mov	r0, r3
 8062e78:	f7fe fb28 	bl	80614cc <HAL_InitTick>

  return HAL_OK;
 8062e7c:	2300      	movs	r3, #0
}
 8062e7e:	4618      	mov	r0, r3
 8062e80:	3710      	adds	r7, #16
 8062e82:	46bd      	mov	sp, r7
 8062e84:	bd80      	pop	{r7, pc}
 8062e86:	bf00      	nop
 8062e88:	0806d37c 	.word	0x0806d37c
 8062e8c:	40023800 	.word	0x40023800
 8062e90:	0806d5b4 	.word	0x0806d5b4
 8062e94:	20000000 	.word	0x20000000
 8062e98:	20000004 	.word	0x20000004

08062e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8062e9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8062ea0:	b084      	sub	sp, #16
 8062ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8062ea4:	2300      	movs	r3, #0
 8062ea6:	607b      	str	r3, [r7, #4]
 8062ea8:	2300      	movs	r3, #0
 8062eaa:	60fb      	str	r3, [r7, #12]
 8062eac:	2300      	movs	r3, #0
 8062eae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8062eb0:	2300      	movs	r3, #0
 8062eb2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8062eb4:	4b67      	ldr	r3, [pc, #412]	; (8063054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8062eb6:	689b      	ldr	r3, [r3, #8]
 8062eb8:	f003 030c 	and.w	r3, r3, #12
 8062ebc:	2b08      	cmp	r3, #8
 8062ebe:	d00d      	beq.n	8062edc <HAL_RCC_GetSysClockFreq+0x40>
 8062ec0:	2b08      	cmp	r3, #8
 8062ec2:	f200 80bd 	bhi.w	8063040 <HAL_RCC_GetSysClockFreq+0x1a4>
 8062ec6:	2b00      	cmp	r3, #0
 8062ec8:	d002      	beq.n	8062ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8062eca:	2b04      	cmp	r3, #4
 8062ecc:	d003      	beq.n	8062ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8062ece:	e0b7      	b.n	8063040 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8062ed0:	4b61      	ldr	r3, [pc, #388]	; (8063058 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8062ed2:	60bb      	str	r3, [r7, #8]
       break;
 8062ed4:	e0b7      	b.n	8063046 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8062ed6:	4b61      	ldr	r3, [pc, #388]	; (806305c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8062ed8:	60bb      	str	r3, [r7, #8]
      break;
 8062eda:	e0b4      	b.n	8063046 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8062edc:	4b5d      	ldr	r3, [pc, #372]	; (8063054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8062ede:	685b      	ldr	r3, [r3, #4]
 8062ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8062ee4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8062ee6:	4b5b      	ldr	r3, [pc, #364]	; (8063054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8062ee8:	685b      	ldr	r3, [r3, #4]
 8062eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8062eee:	2b00      	cmp	r3, #0
 8062ef0:	d04d      	beq.n	8062f8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8062ef2:	4b58      	ldr	r3, [pc, #352]	; (8063054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8062ef4:	685b      	ldr	r3, [r3, #4]
 8062ef6:	099b      	lsrs	r3, r3, #6
 8062ef8:	461a      	mov	r2, r3
 8062efa:	f04f 0300 	mov.w	r3, #0
 8062efe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8062f02:	f04f 0100 	mov.w	r1, #0
 8062f06:	ea02 0800 	and.w	r8, r2, r0
 8062f0a:	ea03 0901 	and.w	r9, r3, r1
 8062f0e:	4640      	mov	r0, r8
 8062f10:	4649      	mov	r1, r9
 8062f12:	f04f 0200 	mov.w	r2, #0
 8062f16:	f04f 0300 	mov.w	r3, #0
 8062f1a:	014b      	lsls	r3, r1, #5
 8062f1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8062f20:	0142      	lsls	r2, r0, #5
 8062f22:	4610      	mov	r0, r2
 8062f24:	4619      	mov	r1, r3
 8062f26:	ebb0 0008 	subs.w	r0, r0, r8
 8062f2a:	eb61 0109 	sbc.w	r1, r1, r9
 8062f2e:	f04f 0200 	mov.w	r2, #0
 8062f32:	f04f 0300 	mov.w	r3, #0
 8062f36:	018b      	lsls	r3, r1, #6
 8062f38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8062f3c:	0182      	lsls	r2, r0, #6
 8062f3e:	1a12      	subs	r2, r2, r0
 8062f40:	eb63 0301 	sbc.w	r3, r3, r1
 8062f44:	f04f 0000 	mov.w	r0, #0
 8062f48:	f04f 0100 	mov.w	r1, #0
 8062f4c:	00d9      	lsls	r1, r3, #3
 8062f4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8062f52:	00d0      	lsls	r0, r2, #3
 8062f54:	4602      	mov	r2, r0
 8062f56:	460b      	mov	r3, r1
 8062f58:	eb12 0208 	adds.w	r2, r2, r8
 8062f5c:	eb43 0309 	adc.w	r3, r3, r9
 8062f60:	f04f 0000 	mov.w	r0, #0
 8062f64:	f04f 0100 	mov.w	r1, #0
 8062f68:	0259      	lsls	r1, r3, #9
 8062f6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8062f6e:	0250      	lsls	r0, r2, #9
 8062f70:	4602      	mov	r2, r0
 8062f72:	460b      	mov	r3, r1
 8062f74:	4610      	mov	r0, r2
 8062f76:	4619      	mov	r1, r3
 8062f78:	687b      	ldr	r3, [r7, #4]
 8062f7a:	461a      	mov	r2, r3
 8062f7c:	f04f 0300 	mov.w	r3, #0
 8062f80:	f7fd f996 	bl	80602b0 <__aeabi_uldivmod>
 8062f84:	4602      	mov	r2, r0
 8062f86:	460b      	mov	r3, r1
 8062f88:	4613      	mov	r3, r2
 8062f8a:	60fb      	str	r3, [r7, #12]
 8062f8c:	e04a      	b.n	8063024 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8062f8e:	4b31      	ldr	r3, [pc, #196]	; (8063054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8062f90:	685b      	ldr	r3, [r3, #4]
 8062f92:	099b      	lsrs	r3, r3, #6
 8062f94:	461a      	mov	r2, r3
 8062f96:	f04f 0300 	mov.w	r3, #0
 8062f9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8062f9e:	f04f 0100 	mov.w	r1, #0
 8062fa2:	ea02 0400 	and.w	r4, r2, r0
 8062fa6:	ea03 0501 	and.w	r5, r3, r1
 8062faa:	4620      	mov	r0, r4
 8062fac:	4629      	mov	r1, r5
 8062fae:	f04f 0200 	mov.w	r2, #0
 8062fb2:	f04f 0300 	mov.w	r3, #0
 8062fb6:	014b      	lsls	r3, r1, #5
 8062fb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8062fbc:	0142      	lsls	r2, r0, #5
 8062fbe:	4610      	mov	r0, r2
 8062fc0:	4619      	mov	r1, r3
 8062fc2:	1b00      	subs	r0, r0, r4
 8062fc4:	eb61 0105 	sbc.w	r1, r1, r5
 8062fc8:	f04f 0200 	mov.w	r2, #0
 8062fcc:	f04f 0300 	mov.w	r3, #0
 8062fd0:	018b      	lsls	r3, r1, #6
 8062fd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8062fd6:	0182      	lsls	r2, r0, #6
 8062fd8:	1a12      	subs	r2, r2, r0
 8062fda:	eb63 0301 	sbc.w	r3, r3, r1
 8062fde:	f04f 0000 	mov.w	r0, #0
 8062fe2:	f04f 0100 	mov.w	r1, #0
 8062fe6:	00d9      	lsls	r1, r3, #3
 8062fe8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8062fec:	00d0      	lsls	r0, r2, #3
 8062fee:	4602      	mov	r2, r0
 8062ff0:	460b      	mov	r3, r1
 8062ff2:	1912      	adds	r2, r2, r4
 8062ff4:	eb45 0303 	adc.w	r3, r5, r3
 8062ff8:	f04f 0000 	mov.w	r0, #0
 8062ffc:	f04f 0100 	mov.w	r1, #0
 8063000:	0299      	lsls	r1, r3, #10
 8063002:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8063006:	0290      	lsls	r0, r2, #10
 8063008:	4602      	mov	r2, r0
 806300a:	460b      	mov	r3, r1
 806300c:	4610      	mov	r0, r2
 806300e:	4619      	mov	r1, r3
 8063010:	687b      	ldr	r3, [r7, #4]
 8063012:	461a      	mov	r2, r3
 8063014:	f04f 0300 	mov.w	r3, #0
 8063018:	f7fd f94a 	bl	80602b0 <__aeabi_uldivmod>
 806301c:	4602      	mov	r2, r0
 806301e:	460b      	mov	r3, r1
 8063020:	4613      	mov	r3, r2
 8063022:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8063024:	4b0b      	ldr	r3, [pc, #44]	; (8063054 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8063026:	685b      	ldr	r3, [r3, #4]
 8063028:	0c1b      	lsrs	r3, r3, #16
 806302a:	f003 0303 	and.w	r3, r3, #3
 806302e:	3301      	adds	r3, #1
 8063030:	005b      	lsls	r3, r3, #1
 8063032:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8063034:	68fa      	ldr	r2, [r7, #12]
 8063036:	683b      	ldr	r3, [r7, #0]
 8063038:	fbb2 f3f3 	udiv	r3, r2, r3
 806303c:	60bb      	str	r3, [r7, #8]
      break;
 806303e:	e002      	b.n	8063046 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8063040:	4b05      	ldr	r3, [pc, #20]	; (8063058 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8063042:	60bb      	str	r3, [r7, #8]
      break;
 8063044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8063046:	68bb      	ldr	r3, [r7, #8]
}
 8063048:	4618      	mov	r0, r3
 806304a:	3710      	adds	r7, #16
 806304c:	46bd      	mov	sp, r7
 806304e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8063052:	bf00      	nop
 8063054:	40023800 	.word	0x40023800
 8063058:	00f42400 	.word	0x00f42400
 806305c:	007a1200 	.word	0x007a1200

08063060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8063060:	b480      	push	{r7}
 8063062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8063064:	4b03      	ldr	r3, [pc, #12]	; (8063074 <HAL_RCC_GetHCLKFreq+0x14>)
 8063066:	681b      	ldr	r3, [r3, #0]
}
 8063068:	4618      	mov	r0, r3
 806306a:	46bd      	mov	sp, r7
 806306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063070:	4770      	bx	lr
 8063072:	bf00      	nop
 8063074:	20000000 	.word	0x20000000

08063078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8063078:	b580      	push	{r7, lr}
 806307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 806307c:	f7ff fff0 	bl	8063060 <HAL_RCC_GetHCLKFreq>
 8063080:	4602      	mov	r2, r0
 8063082:	4b05      	ldr	r3, [pc, #20]	; (8063098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8063084:	689b      	ldr	r3, [r3, #8]
 8063086:	0a9b      	lsrs	r3, r3, #10
 8063088:	f003 0307 	and.w	r3, r3, #7
 806308c:	4903      	ldr	r1, [pc, #12]	; (806309c <HAL_RCC_GetPCLK1Freq+0x24>)
 806308e:	5ccb      	ldrb	r3, [r1, r3]
 8063090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8063094:	4618      	mov	r0, r3
 8063096:	bd80      	pop	{r7, pc}
 8063098:	40023800 	.word	0x40023800
 806309c:	0806d5c4 	.word	0x0806d5c4

080630a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80630a0:	b580      	push	{r7, lr}
 80630a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80630a4:	f7ff ffdc 	bl	8063060 <HAL_RCC_GetHCLKFreq>
 80630a8:	4602      	mov	r2, r0
 80630aa:	4b05      	ldr	r3, [pc, #20]	; (80630c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80630ac:	689b      	ldr	r3, [r3, #8]
 80630ae:	0b5b      	lsrs	r3, r3, #13
 80630b0:	f003 0307 	and.w	r3, r3, #7
 80630b4:	4903      	ldr	r1, [pc, #12]	; (80630c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80630b6:	5ccb      	ldrb	r3, [r1, r3]
 80630b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80630bc:	4618      	mov	r0, r3
 80630be:	bd80      	pop	{r7, pc}
 80630c0:	40023800 	.word	0x40023800
 80630c4:	0806d5c4 	.word	0x0806d5c4

080630c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80630c8:	b480      	push	{r7}
 80630ca:	b083      	sub	sp, #12
 80630cc:	af00      	add	r7, sp, #0
 80630ce:	6078      	str	r0, [r7, #4]
 80630d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80630d2:	687b      	ldr	r3, [r7, #4]
 80630d4:	220f      	movs	r2, #15
 80630d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80630d8:	4b12      	ldr	r3, [pc, #72]	; (8063124 <HAL_RCC_GetClockConfig+0x5c>)
 80630da:	689b      	ldr	r3, [r3, #8]
 80630dc:	f003 0203 	and.w	r2, r3, #3
 80630e0:	687b      	ldr	r3, [r7, #4]
 80630e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80630e4:	4b0f      	ldr	r3, [pc, #60]	; (8063124 <HAL_RCC_GetClockConfig+0x5c>)
 80630e6:	689b      	ldr	r3, [r3, #8]
 80630e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80630ec:	687b      	ldr	r3, [r7, #4]
 80630ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80630f0:	4b0c      	ldr	r3, [pc, #48]	; (8063124 <HAL_RCC_GetClockConfig+0x5c>)
 80630f2:	689b      	ldr	r3, [r3, #8]
 80630f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80630f8:	687b      	ldr	r3, [r7, #4]
 80630fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80630fc:	4b09      	ldr	r3, [pc, #36]	; (8063124 <HAL_RCC_GetClockConfig+0x5c>)
 80630fe:	689b      	ldr	r3, [r3, #8]
 8063100:	08db      	lsrs	r3, r3, #3
 8063102:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8063106:	687b      	ldr	r3, [r7, #4]
 8063108:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 806310a:	4b07      	ldr	r3, [pc, #28]	; (8063128 <HAL_RCC_GetClockConfig+0x60>)
 806310c:	681b      	ldr	r3, [r3, #0]
 806310e:	f003 0207 	and.w	r2, r3, #7
 8063112:	683b      	ldr	r3, [r7, #0]
 8063114:	601a      	str	r2, [r3, #0]
}
 8063116:	bf00      	nop
 8063118:	370c      	adds	r7, #12
 806311a:	46bd      	mov	sp, r7
 806311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063120:	4770      	bx	lr
 8063122:	bf00      	nop
 8063124:	40023800 	.word	0x40023800
 8063128:	40023c00 	.word	0x40023c00

0806312c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 806312c:	b580      	push	{r7, lr}
 806312e:	b082      	sub	sp, #8
 8063130:	af00      	add	r7, sp, #0
 8063132:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8063134:	687b      	ldr	r3, [r7, #4]
 8063136:	2b00      	cmp	r3, #0
 8063138:	d101      	bne.n	806313e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 806313a:	2301      	movs	r3, #1
 806313c:	e18c      	b.n	8063458 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 806313e:	687b      	ldr	r3, [r7, #4]
 8063140:	681b      	ldr	r3, [r3, #0]
 8063142:	4a75      	ldr	r2, [pc, #468]	; (8063318 <HAL_SPI_Init+0x1ec>)
 8063144:	4293      	cmp	r3, r2
 8063146:	d018      	beq.n	806317a <HAL_SPI_Init+0x4e>
 8063148:	687b      	ldr	r3, [r7, #4]
 806314a:	681b      	ldr	r3, [r3, #0]
 806314c:	4a73      	ldr	r2, [pc, #460]	; (806331c <HAL_SPI_Init+0x1f0>)
 806314e:	4293      	cmp	r3, r2
 8063150:	d013      	beq.n	806317a <HAL_SPI_Init+0x4e>
 8063152:	687b      	ldr	r3, [r7, #4]
 8063154:	681b      	ldr	r3, [r3, #0]
 8063156:	4a72      	ldr	r2, [pc, #456]	; (8063320 <HAL_SPI_Init+0x1f4>)
 8063158:	4293      	cmp	r3, r2
 806315a:	d00e      	beq.n	806317a <HAL_SPI_Init+0x4e>
 806315c:	687b      	ldr	r3, [r7, #4]
 806315e:	681b      	ldr	r3, [r3, #0]
 8063160:	4a70      	ldr	r2, [pc, #448]	; (8063324 <HAL_SPI_Init+0x1f8>)
 8063162:	4293      	cmp	r3, r2
 8063164:	d009      	beq.n	806317a <HAL_SPI_Init+0x4e>
 8063166:	687b      	ldr	r3, [r7, #4]
 8063168:	681b      	ldr	r3, [r3, #0]
 806316a:	4a6f      	ldr	r2, [pc, #444]	; (8063328 <HAL_SPI_Init+0x1fc>)
 806316c:	4293      	cmp	r3, r2
 806316e:	d004      	beq.n	806317a <HAL_SPI_Init+0x4e>
 8063170:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8063174:	486d      	ldr	r0, [pc, #436]	; (806332c <HAL_SPI_Init+0x200>)
 8063176:	f7fe f8f4 	bl	8061362 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 806317a:	687b      	ldr	r3, [r7, #4]
 806317c:	685b      	ldr	r3, [r3, #4]
 806317e:	2b00      	cmp	r3, #0
 8063180:	d009      	beq.n	8063196 <HAL_SPI_Init+0x6a>
 8063182:	687b      	ldr	r3, [r7, #4]
 8063184:	685b      	ldr	r3, [r3, #4]
 8063186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 806318a:	d004      	beq.n	8063196 <HAL_SPI_Init+0x6a>
 806318c:	f240 1143 	movw	r1, #323	; 0x143
 8063190:	4866      	ldr	r0, [pc, #408]	; (806332c <HAL_SPI_Init+0x200>)
 8063192:	f7fe f8e6 	bl	8061362 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8063196:	687b      	ldr	r3, [r7, #4]
 8063198:	689b      	ldr	r3, [r3, #8]
 806319a:	2b00      	cmp	r3, #0
 806319c:	d00e      	beq.n	80631bc <HAL_SPI_Init+0x90>
 806319e:	687b      	ldr	r3, [r7, #4]
 80631a0:	689b      	ldr	r3, [r3, #8]
 80631a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80631a6:	d009      	beq.n	80631bc <HAL_SPI_Init+0x90>
 80631a8:	687b      	ldr	r3, [r7, #4]
 80631aa:	689b      	ldr	r3, [r3, #8]
 80631ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80631b0:	d004      	beq.n	80631bc <HAL_SPI_Init+0x90>
 80631b2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80631b6:	485d      	ldr	r0, [pc, #372]	; (806332c <HAL_SPI_Init+0x200>)
 80631b8:	f7fe f8d3 	bl	8061362 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80631bc:	687b      	ldr	r3, [r7, #4]
 80631be:	68db      	ldr	r3, [r3, #12]
 80631c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80631c4:	d008      	beq.n	80631d8 <HAL_SPI_Init+0xac>
 80631c6:	687b      	ldr	r3, [r7, #4]
 80631c8:	68db      	ldr	r3, [r3, #12]
 80631ca:	2b00      	cmp	r3, #0
 80631cc:	d004      	beq.n	80631d8 <HAL_SPI_Init+0xac>
 80631ce:	f240 1145 	movw	r1, #325	; 0x145
 80631d2:	4856      	ldr	r0, [pc, #344]	; (806332c <HAL_SPI_Init+0x200>)
 80631d4:	f7fe f8c5 	bl	8061362 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80631d8:	687b      	ldr	r3, [r7, #4]
 80631da:	699b      	ldr	r3, [r3, #24]
 80631dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80631e0:	d00d      	beq.n	80631fe <HAL_SPI_Init+0xd2>
 80631e2:	687b      	ldr	r3, [r7, #4]
 80631e4:	699b      	ldr	r3, [r3, #24]
 80631e6:	2b00      	cmp	r3, #0
 80631e8:	d009      	beq.n	80631fe <HAL_SPI_Init+0xd2>
 80631ea:	687b      	ldr	r3, [r7, #4]
 80631ec:	699b      	ldr	r3, [r3, #24]
 80631ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80631f2:	d004      	beq.n	80631fe <HAL_SPI_Init+0xd2>
 80631f4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80631f8:	484c      	ldr	r0, [pc, #304]	; (806332c <HAL_SPI_Init+0x200>)
 80631fa:	f7fe f8b2 	bl	8061362 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80631fe:	687b      	ldr	r3, [r7, #4]
 8063200:	69db      	ldr	r3, [r3, #28]
 8063202:	2b00      	cmp	r3, #0
 8063204:	d020      	beq.n	8063248 <HAL_SPI_Init+0x11c>
 8063206:	687b      	ldr	r3, [r7, #4]
 8063208:	69db      	ldr	r3, [r3, #28]
 806320a:	2b08      	cmp	r3, #8
 806320c:	d01c      	beq.n	8063248 <HAL_SPI_Init+0x11c>
 806320e:	687b      	ldr	r3, [r7, #4]
 8063210:	69db      	ldr	r3, [r3, #28]
 8063212:	2b10      	cmp	r3, #16
 8063214:	d018      	beq.n	8063248 <HAL_SPI_Init+0x11c>
 8063216:	687b      	ldr	r3, [r7, #4]
 8063218:	69db      	ldr	r3, [r3, #28]
 806321a:	2b18      	cmp	r3, #24
 806321c:	d014      	beq.n	8063248 <HAL_SPI_Init+0x11c>
 806321e:	687b      	ldr	r3, [r7, #4]
 8063220:	69db      	ldr	r3, [r3, #28]
 8063222:	2b20      	cmp	r3, #32
 8063224:	d010      	beq.n	8063248 <HAL_SPI_Init+0x11c>
 8063226:	687b      	ldr	r3, [r7, #4]
 8063228:	69db      	ldr	r3, [r3, #28]
 806322a:	2b28      	cmp	r3, #40	; 0x28
 806322c:	d00c      	beq.n	8063248 <HAL_SPI_Init+0x11c>
 806322e:	687b      	ldr	r3, [r7, #4]
 8063230:	69db      	ldr	r3, [r3, #28]
 8063232:	2b30      	cmp	r3, #48	; 0x30
 8063234:	d008      	beq.n	8063248 <HAL_SPI_Init+0x11c>
 8063236:	687b      	ldr	r3, [r7, #4]
 8063238:	69db      	ldr	r3, [r3, #28]
 806323a:	2b38      	cmp	r3, #56	; 0x38
 806323c:	d004      	beq.n	8063248 <HAL_SPI_Init+0x11c>
 806323e:	f240 1147 	movw	r1, #327	; 0x147
 8063242:	483a      	ldr	r0, [pc, #232]	; (806332c <HAL_SPI_Init+0x200>)
 8063244:	f7fe f88d 	bl	8061362 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8063248:	687b      	ldr	r3, [r7, #4]
 806324a:	6a1b      	ldr	r3, [r3, #32]
 806324c:	2b00      	cmp	r3, #0
 806324e:	d008      	beq.n	8063262 <HAL_SPI_Init+0x136>
 8063250:	687b      	ldr	r3, [r7, #4]
 8063252:	6a1b      	ldr	r3, [r3, #32]
 8063254:	2b80      	cmp	r3, #128	; 0x80
 8063256:	d004      	beq.n	8063262 <HAL_SPI_Init+0x136>
 8063258:	f44f 71a4 	mov.w	r1, #328	; 0x148
 806325c:	4833      	ldr	r0, [pc, #204]	; (806332c <HAL_SPI_Init+0x200>)
 806325e:	f7fe f880 	bl	8061362 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8063262:	687b      	ldr	r3, [r7, #4]
 8063264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8063266:	2b00      	cmp	r3, #0
 8063268:	d008      	beq.n	806327c <HAL_SPI_Init+0x150>
 806326a:	687b      	ldr	r3, [r7, #4]
 806326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806326e:	2b10      	cmp	r3, #16
 8063270:	d004      	beq.n	806327c <HAL_SPI_Init+0x150>
 8063272:	f240 1149 	movw	r1, #329	; 0x149
 8063276:	482d      	ldr	r0, [pc, #180]	; (806332c <HAL_SPI_Init+0x200>)
 8063278:	f7fe f873 	bl	8061362 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 806327c:	687b      	ldr	r3, [r7, #4]
 806327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8063280:	2b00      	cmp	r3, #0
 8063282:	d155      	bne.n	8063330 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8063284:	687b      	ldr	r3, [r7, #4]
 8063286:	691b      	ldr	r3, [r3, #16]
 8063288:	2b00      	cmp	r3, #0
 806328a:	d008      	beq.n	806329e <HAL_SPI_Init+0x172>
 806328c:	687b      	ldr	r3, [r7, #4]
 806328e:	691b      	ldr	r3, [r3, #16]
 8063290:	2b02      	cmp	r3, #2
 8063292:	d004      	beq.n	806329e <HAL_SPI_Init+0x172>
 8063294:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8063298:	4824      	ldr	r0, [pc, #144]	; (806332c <HAL_SPI_Init+0x200>)
 806329a:	f7fe f862 	bl	8061362 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 806329e:	687b      	ldr	r3, [r7, #4]
 80632a0:	695b      	ldr	r3, [r3, #20]
 80632a2:	2b00      	cmp	r3, #0
 80632a4:	d008      	beq.n	80632b8 <HAL_SPI_Init+0x18c>
 80632a6:	687b      	ldr	r3, [r7, #4]
 80632a8:	695b      	ldr	r3, [r3, #20]
 80632aa:	2b01      	cmp	r3, #1
 80632ac:	d004      	beq.n	80632b8 <HAL_SPI_Init+0x18c>
 80632ae:	f240 114d 	movw	r1, #333	; 0x14d
 80632b2:	481e      	ldr	r0, [pc, #120]	; (806332c <HAL_SPI_Init+0x200>)
 80632b4:	f7fe f855 	bl	8061362 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80632b8:	687b      	ldr	r3, [r7, #4]
 80632ba:	685b      	ldr	r3, [r3, #4]
 80632bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80632c0:	d125      	bne.n	806330e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80632c2:	687b      	ldr	r3, [r7, #4]
 80632c4:	69db      	ldr	r3, [r3, #28]
 80632c6:	2b00      	cmp	r3, #0
 80632c8:	d05d      	beq.n	8063386 <HAL_SPI_Init+0x25a>
 80632ca:	687b      	ldr	r3, [r7, #4]
 80632cc:	69db      	ldr	r3, [r3, #28]
 80632ce:	2b08      	cmp	r3, #8
 80632d0:	d059      	beq.n	8063386 <HAL_SPI_Init+0x25a>
 80632d2:	687b      	ldr	r3, [r7, #4]
 80632d4:	69db      	ldr	r3, [r3, #28]
 80632d6:	2b10      	cmp	r3, #16
 80632d8:	d055      	beq.n	8063386 <HAL_SPI_Init+0x25a>
 80632da:	687b      	ldr	r3, [r7, #4]
 80632dc:	69db      	ldr	r3, [r3, #28]
 80632de:	2b18      	cmp	r3, #24
 80632e0:	d051      	beq.n	8063386 <HAL_SPI_Init+0x25a>
 80632e2:	687b      	ldr	r3, [r7, #4]
 80632e4:	69db      	ldr	r3, [r3, #28]
 80632e6:	2b20      	cmp	r3, #32
 80632e8:	d04d      	beq.n	8063386 <HAL_SPI_Init+0x25a>
 80632ea:	687b      	ldr	r3, [r7, #4]
 80632ec:	69db      	ldr	r3, [r3, #28]
 80632ee:	2b28      	cmp	r3, #40	; 0x28
 80632f0:	d049      	beq.n	8063386 <HAL_SPI_Init+0x25a>
 80632f2:	687b      	ldr	r3, [r7, #4]
 80632f4:	69db      	ldr	r3, [r3, #28]
 80632f6:	2b30      	cmp	r3, #48	; 0x30
 80632f8:	d045      	beq.n	8063386 <HAL_SPI_Init+0x25a>
 80632fa:	687b      	ldr	r3, [r7, #4]
 80632fc:	69db      	ldr	r3, [r3, #28]
 80632fe:	2b38      	cmp	r3, #56	; 0x38
 8063300:	d041      	beq.n	8063386 <HAL_SPI_Init+0x25a>
 8063302:	f240 1151 	movw	r1, #337	; 0x151
 8063306:	4809      	ldr	r0, [pc, #36]	; (806332c <HAL_SPI_Init+0x200>)
 8063308:	f7fe f82b 	bl	8061362 <assert_failed>
 806330c:	e03b      	b.n	8063386 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 806330e:	687b      	ldr	r3, [r7, #4]
 8063310:	2200      	movs	r2, #0
 8063312:	61da      	str	r2, [r3, #28]
 8063314:	e037      	b.n	8063386 <HAL_SPI_Init+0x25a>
 8063316:	bf00      	nop
 8063318:	40013000 	.word	0x40013000
 806331c:	40003800 	.word	0x40003800
 8063320:	40003c00 	.word	0x40003c00
 8063324:	40013400 	.word	0x40013400
 8063328:	40015000 	.word	0x40015000
 806332c:	0806d3b4 	.word	0x0806d3b4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8063330:	687b      	ldr	r3, [r7, #4]
 8063332:	69db      	ldr	r3, [r3, #28]
 8063334:	2b00      	cmp	r3, #0
 8063336:	d020      	beq.n	806337a <HAL_SPI_Init+0x24e>
 8063338:	687b      	ldr	r3, [r7, #4]
 806333a:	69db      	ldr	r3, [r3, #28]
 806333c:	2b08      	cmp	r3, #8
 806333e:	d01c      	beq.n	806337a <HAL_SPI_Init+0x24e>
 8063340:	687b      	ldr	r3, [r7, #4]
 8063342:	69db      	ldr	r3, [r3, #28]
 8063344:	2b10      	cmp	r3, #16
 8063346:	d018      	beq.n	806337a <HAL_SPI_Init+0x24e>
 8063348:	687b      	ldr	r3, [r7, #4]
 806334a:	69db      	ldr	r3, [r3, #28]
 806334c:	2b18      	cmp	r3, #24
 806334e:	d014      	beq.n	806337a <HAL_SPI_Init+0x24e>
 8063350:	687b      	ldr	r3, [r7, #4]
 8063352:	69db      	ldr	r3, [r3, #28]
 8063354:	2b20      	cmp	r3, #32
 8063356:	d010      	beq.n	806337a <HAL_SPI_Init+0x24e>
 8063358:	687b      	ldr	r3, [r7, #4]
 806335a:	69db      	ldr	r3, [r3, #28]
 806335c:	2b28      	cmp	r3, #40	; 0x28
 806335e:	d00c      	beq.n	806337a <HAL_SPI_Init+0x24e>
 8063360:	687b      	ldr	r3, [r7, #4]
 8063362:	69db      	ldr	r3, [r3, #28]
 8063364:	2b30      	cmp	r3, #48	; 0x30
 8063366:	d008      	beq.n	806337a <HAL_SPI_Init+0x24e>
 8063368:	687b      	ldr	r3, [r7, #4]
 806336a:	69db      	ldr	r3, [r3, #28]
 806336c:	2b38      	cmp	r3, #56	; 0x38
 806336e:	d004      	beq.n	806337a <HAL_SPI_Init+0x24e>
 8063370:	f240 115b 	movw	r1, #347	; 0x15b
 8063374:	483a      	ldr	r0, [pc, #232]	; (8063460 <HAL_SPI_Init+0x334>)
 8063376:	f7fd fff4 	bl	8061362 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 806337a:	687b      	ldr	r3, [r7, #4]
 806337c:	2200      	movs	r2, #0
 806337e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8063380:	687b      	ldr	r3, [r7, #4]
 8063382:	2200      	movs	r2, #0
 8063384:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8063386:	687b      	ldr	r3, [r7, #4]
 8063388:	2200      	movs	r2, #0
 806338a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 806338c:	687b      	ldr	r3, [r7, #4]
 806338e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8063392:	b2db      	uxtb	r3, r3
 8063394:	2b00      	cmp	r3, #0
 8063396:	d106      	bne.n	80633a6 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8063398:	687b      	ldr	r3, [r7, #4]
 806339a:	2200      	movs	r2, #0
 806339c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80633a0:	6878      	ldr	r0, [r7, #4]
 80633a2:	f7fe f81f 	bl	80613e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80633a6:	687b      	ldr	r3, [r7, #4]
 80633a8:	2202      	movs	r2, #2
 80633aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80633ae:	687b      	ldr	r3, [r7, #4]
 80633b0:	681b      	ldr	r3, [r3, #0]
 80633b2:	681a      	ldr	r2, [r3, #0]
 80633b4:	687b      	ldr	r3, [r7, #4]
 80633b6:	681b      	ldr	r3, [r3, #0]
 80633b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80633bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80633be:	687b      	ldr	r3, [r7, #4]
 80633c0:	685b      	ldr	r3, [r3, #4]
 80633c2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80633c6:	687b      	ldr	r3, [r7, #4]
 80633c8:	689b      	ldr	r3, [r3, #8]
 80633ca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80633ce:	431a      	orrs	r2, r3
 80633d0:	687b      	ldr	r3, [r7, #4]
 80633d2:	68db      	ldr	r3, [r3, #12]
 80633d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80633d8:	431a      	orrs	r2, r3
 80633da:	687b      	ldr	r3, [r7, #4]
 80633dc:	691b      	ldr	r3, [r3, #16]
 80633de:	f003 0302 	and.w	r3, r3, #2
 80633e2:	431a      	orrs	r2, r3
 80633e4:	687b      	ldr	r3, [r7, #4]
 80633e6:	695b      	ldr	r3, [r3, #20]
 80633e8:	f003 0301 	and.w	r3, r3, #1
 80633ec:	431a      	orrs	r2, r3
 80633ee:	687b      	ldr	r3, [r7, #4]
 80633f0:	699b      	ldr	r3, [r3, #24]
 80633f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80633f6:	431a      	orrs	r2, r3
 80633f8:	687b      	ldr	r3, [r7, #4]
 80633fa:	69db      	ldr	r3, [r3, #28]
 80633fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8063400:	431a      	orrs	r2, r3
 8063402:	687b      	ldr	r3, [r7, #4]
 8063404:	6a1b      	ldr	r3, [r3, #32]
 8063406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 806340a:	ea42 0103 	orr.w	r1, r2, r3
 806340e:	687b      	ldr	r3, [r7, #4]
 8063410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063412:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8063416:	687b      	ldr	r3, [r7, #4]
 8063418:	681b      	ldr	r3, [r3, #0]
 806341a:	430a      	orrs	r2, r1
 806341c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 806341e:	687b      	ldr	r3, [r7, #4]
 8063420:	699b      	ldr	r3, [r3, #24]
 8063422:	0c1b      	lsrs	r3, r3, #16
 8063424:	f003 0104 	and.w	r1, r3, #4
 8063428:	687b      	ldr	r3, [r7, #4]
 806342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806342c:	f003 0210 	and.w	r2, r3, #16
 8063430:	687b      	ldr	r3, [r7, #4]
 8063432:	681b      	ldr	r3, [r3, #0]
 8063434:	430a      	orrs	r2, r1
 8063436:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8063438:	687b      	ldr	r3, [r7, #4]
 806343a:	681b      	ldr	r3, [r3, #0]
 806343c:	69da      	ldr	r2, [r3, #28]
 806343e:	687b      	ldr	r3, [r7, #4]
 8063440:	681b      	ldr	r3, [r3, #0]
 8063442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8063446:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8063448:	687b      	ldr	r3, [r7, #4]
 806344a:	2200      	movs	r2, #0
 806344c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 806344e:	687b      	ldr	r3, [r7, #4]
 8063450:	2201      	movs	r2, #1
 8063452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8063456:	2300      	movs	r3, #0
}
 8063458:	4618      	mov	r0, r3
 806345a:	3708      	adds	r7, #8
 806345c:	46bd      	mov	sp, r7
 806345e:	bd80      	pop	{r7, pc}
 8063460:	0806d3b4 	.word	0x0806d3b4

08063464 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8063464:	b580      	push	{r7, lr}
 8063466:	b08c      	sub	sp, #48	; 0x30
 8063468:	af00      	add	r7, sp, #0
 806346a:	60f8      	str	r0, [r7, #12]
 806346c:	60b9      	str	r1, [r7, #8]
 806346e:	607a      	str	r2, [r7, #4]
 8063470:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8063472:	2301      	movs	r3, #1
 8063474:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8063476:	2300      	movs	r3, #0
 8063478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 806347c:	68fb      	ldr	r3, [r7, #12]
 806347e:	689b      	ldr	r3, [r3, #8]
 8063480:	2b00      	cmp	r3, #0
 8063482:	d004      	beq.n	806348e <HAL_SPI_TransmitReceive+0x2a>
 8063484:	f240 417e 	movw	r1, #1150	; 0x47e
 8063488:	4884      	ldr	r0, [pc, #528]	; (806369c <HAL_SPI_TransmitReceive+0x238>)
 806348a:	f7fd ff6a 	bl	8061362 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 806348e:	68fb      	ldr	r3, [r7, #12]
 8063490:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8063494:	2b01      	cmp	r3, #1
 8063496:	d101      	bne.n	806349c <HAL_SPI_TransmitReceive+0x38>
 8063498:	2302      	movs	r3, #2
 806349a:	e18d      	b.n	80637b8 <HAL_SPI_TransmitReceive+0x354>
 806349c:	68fb      	ldr	r3, [r7, #12]
 806349e:	2201      	movs	r2, #1
 80634a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80634a4:	f7fe f9bc 	bl	8061820 <HAL_GetTick>
 80634a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80634aa:	68fb      	ldr	r3, [r7, #12]
 80634ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80634b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80634b4:	68fb      	ldr	r3, [r7, #12]
 80634b6:	685b      	ldr	r3, [r3, #4]
 80634b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80634ba:	887b      	ldrh	r3, [r7, #2]
 80634bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80634be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80634c2:	2b01      	cmp	r3, #1
 80634c4:	d00f      	beq.n	80634e6 <HAL_SPI_TransmitReceive+0x82>
 80634c6:	69fb      	ldr	r3, [r7, #28]
 80634c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80634cc:	d107      	bne.n	80634de <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80634ce:	68fb      	ldr	r3, [r7, #12]
 80634d0:	689b      	ldr	r3, [r3, #8]
 80634d2:	2b00      	cmp	r3, #0
 80634d4:	d103      	bne.n	80634de <HAL_SPI_TransmitReceive+0x7a>
 80634d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80634da:	2b04      	cmp	r3, #4
 80634dc:	d003      	beq.n	80634e6 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80634de:	2302      	movs	r3, #2
 80634e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80634e4:	e15e      	b.n	80637a4 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80634e6:	68bb      	ldr	r3, [r7, #8]
 80634e8:	2b00      	cmp	r3, #0
 80634ea:	d005      	beq.n	80634f8 <HAL_SPI_TransmitReceive+0x94>
 80634ec:	687b      	ldr	r3, [r7, #4]
 80634ee:	2b00      	cmp	r3, #0
 80634f0:	d002      	beq.n	80634f8 <HAL_SPI_TransmitReceive+0x94>
 80634f2:	887b      	ldrh	r3, [r7, #2]
 80634f4:	2b00      	cmp	r3, #0
 80634f6:	d103      	bne.n	8063500 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 80634f8:	2301      	movs	r3, #1
 80634fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80634fe:	e151      	b.n	80637a4 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8063500:	68fb      	ldr	r3, [r7, #12]
 8063502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8063506:	b2db      	uxtb	r3, r3
 8063508:	2b04      	cmp	r3, #4
 806350a:	d003      	beq.n	8063514 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 806350c:	68fb      	ldr	r3, [r7, #12]
 806350e:	2205      	movs	r2, #5
 8063510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8063514:	68fb      	ldr	r3, [r7, #12]
 8063516:	2200      	movs	r2, #0
 8063518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 806351a:	68fb      	ldr	r3, [r7, #12]
 806351c:	687a      	ldr	r2, [r7, #4]
 806351e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8063520:	68fb      	ldr	r3, [r7, #12]
 8063522:	887a      	ldrh	r2, [r7, #2]
 8063524:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8063526:	68fb      	ldr	r3, [r7, #12]
 8063528:	887a      	ldrh	r2, [r7, #2]
 806352a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 806352c:	68fb      	ldr	r3, [r7, #12]
 806352e:	68ba      	ldr	r2, [r7, #8]
 8063530:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8063532:	68fb      	ldr	r3, [r7, #12]
 8063534:	887a      	ldrh	r2, [r7, #2]
 8063536:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8063538:	68fb      	ldr	r3, [r7, #12]
 806353a:	887a      	ldrh	r2, [r7, #2]
 806353c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 806353e:	68fb      	ldr	r3, [r7, #12]
 8063540:	2200      	movs	r2, #0
 8063542:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8063544:	68fb      	ldr	r3, [r7, #12]
 8063546:	2200      	movs	r2, #0
 8063548:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 806354a:	68fb      	ldr	r3, [r7, #12]
 806354c:	681b      	ldr	r3, [r3, #0]
 806354e:	681b      	ldr	r3, [r3, #0]
 8063550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8063554:	2b40      	cmp	r3, #64	; 0x40
 8063556:	d007      	beq.n	8063568 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8063558:	68fb      	ldr	r3, [r7, #12]
 806355a:	681b      	ldr	r3, [r3, #0]
 806355c:	681a      	ldr	r2, [r3, #0]
 806355e:	68fb      	ldr	r3, [r7, #12]
 8063560:	681b      	ldr	r3, [r3, #0]
 8063562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8063566:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8063568:	68fb      	ldr	r3, [r7, #12]
 806356a:	68db      	ldr	r3, [r3, #12]
 806356c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8063570:	d178      	bne.n	8063664 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8063572:	68fb      	ldr	r3, [r7, #12]
 8063574:	685b      	ldr	r3, [r3, #4]
 8063576:	2b00      	cmp	r3, #0
 8063578:	d002      	beq.n	8063580 <HAL_SPI_TransmitReceive+0x11c>
 806357a:	8b7b      	ldrh	r3, [r7, #26]
 806357c:	2b01      	cmp	r3, #1
 806357e:	d166      	bne.n	806364e <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8063580:	68fb      	ldr	r3, [r7, #12]
 8063582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063584:	881a      	ldrh	r2, [r3, #0]
 8063586:	68fb      	ldr	r3, [r7, #12]
 8063588:	681b      	ldr	r3, [r3, #0]
 806358a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 806358c:	68fb      	ldr	r3, [r7, #12]
 806358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063590:	1c9a      	adds	r2, r3, #2
 8063592:	68fb      	ldr	r3, [r7, #12]
 8063594:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8063596:	68fb      	ldr	r3, [r7, #12]
 8063598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 806359a:	b29b      	uxth	r3, r3
 806359c:	3b01      	subs	r3, #1
 806359e:	b29a      	uxth	r2, r3
 80635a0:	68fb      	ldr	r3, [r7, #12]
 80635a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80635a4:	e053      	b.n	806364e <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80635a6:	68fb      	ldr	r3, [r7, #12]
 80635a8:	681b      	ldr	r3, [r3, #0]
 80635aa:	689b      	ldr	r3, [r3, #8]
 80635ac:	f003 0302 	and.w	r3, r3, #2
 80635b0:	2b02      	cmp	r3, #2
 80635b2:	d11b      	bne.n	80635ec <HAL_SPI_TransmitReceive+0x188>
 80635b4:	68fb      	ldr	r3, [r7, #12]
 80635b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80635b8:	b29b      	uxth	r3, r3
 80635ba:	2b00      	cmp	r3, #0
 80635bc:	d016      	beq.n	80635ec <HAL_SPI_TransmitReceive+0x188>
 80635be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80635c0:	2b01      	cmp	r3, #1
 80635c2:	d113      	bne.n	80635ec <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80635c4:	68fb      	ldr	r3, [r7, #12]
 80635c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80635c8:	881a      	ldrh	r2, [r3, #0]
 80635ca:	68fb      	ldr	r3, [r7, #12]
 80635cc:	681b      	ldr	r3, [r3, #0]
 80635ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80635d0:	68fb      	ldr	r3, [r7, #12]
 80635d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80635d4:	1c9a      	adds	r2, r3, #2
 80635d6:	68fb      	ldr	r3, [r7, #12]
 80635d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80635da:	68fb      	ldr	r3, [r7, #12]
 80635dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80635de:	b29b      	uxth	r3, r3
 80635e0:	3b01      	subs	r3, #1
 80635e2:	b29a      	uxth	r2, r3
 80635e4:	68fb      	ldr	r3, [r7, #12]
 80635e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80635e8:	2300      	movs	r3, #0
 80635ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80635ec:	68fb      	ldr	r3, [r7, #12]
 80635ee:	681b      	ldr	r3, [r3, #0]
 80635f0:	689b      	ldr	r3, [r3, #8]
 80635f2:	f003 0301 	and.w	r3, r3, #1
 80635f6:	2b01      	cmp	r3, #1
 80635f8:	d119      	bne.n	806362e <HAL_SPI_TransmitReceive+0x1ca>
 80635fa:	68fb      	ldr	r3, [r7, #12]
 80635fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80635fe:	b29b      	uxth	r3, r3
 8063600:	2b00      	cmp	r3, #0
 8063602:	d014      	beq.n	806362e <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8063604:	68fb      	ldr	r3, [r7, #12]
 8063606:	681b      	ldr	r3, [r3, #0]
 8063608:	68da      	ldr	r2, [r3, #12]
 806360a:	68fb      	ldr	r3, [r7, #12]
 806360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806360e:	b292      	uxth	r2, r2
 8063610:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8063612:	68fb      	ldr	r3, [r7, #12]
 8063614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8063616:	1c9a      	adds	r2, r3, #2
 8063618:	68fb      	ldr	r3, [r7, #12]
 806361a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 806361c:	68fb      	ldr	r3, [r7, #12]
 806361e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8063620:	b29b      	uxth	r3, r3
 8063622:	3b01      	subs	r3, #1
 8063624:	b29a      	uxth	r2, r3
 8063626:	68fb      	ldr	r3, [r7, #12]
 8063628:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 806362a:	2301      	movs	r3, #1
 806362c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 806362e:	f7fe f8f7 	bl	8061820 <HAL_GetTick>
 8063632:	4602      	mov	r2, r0
 8063634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8063636:	1ad3      	subs	r3, r2, r3
 8063638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806363a:	429a      	cmp	r2, r3
 806363c:	d807      	bhi.n	806364e <HAL_SPI_TransmitReceive+0x1ea>
 806363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8063640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8063644:	d003      	beq.n	806364e <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8063646:	2303      	movs	r3, #3
 8063648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 806364c:	e0aa      	b.n	80637a4 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 806364e:	68fb      	ldr	r3, [r7, #12]
 8063650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8063652:	b29b      	uxth	r3, r3
 8063654:	2b00      	cmp	r3, #0
 8063656:	d1a6      	bne.n	80635a6 <HAL_SPI_TransmitReceive+0x142>
 8063658:	68fb      	ldr	r3, [r7, #12]
 806365a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 806365c:	b29b      	uxth	r3, r3
 806365e:	2b00      	cmp	r3, #0
 8063660:	d1a1      	bne.n	80635a6 <HAL_SPI_TransmitReceive+0x142>
 8063662:	e07f      	b.n	8063764 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8063664:	68fb      	ldr	r3, [r7, #12]
 8063666:	685b      	ldr	r3, [r3, #4]
 8063668:	2b00      	cmp	r3, #0
 806366a:	d002      	beq.n	8063672 <HAL_SPI_TransmitReceive+0x20e>
 806366c:	8b7b      	ldrh	r3, [r7, #26]
 806366e:	2b01      	cmp	r3, #1
 8063670:	d16e      	bne.n	8063750 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8063672:	68fb      	ldr	r3, [r7, #12]
 8063674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8063676:	68fb      	ldr	r3, [r7, #12]
 8063678:	681b      	ldr	r3, [r3, #0]
 806367a:	330c      	adds	r3, #12
 806367c:	7812      	ldrb	r2, [r2, #0]
 806367e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8063680:	68fb      	ldr	r3, [r7, #12]
 8063682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063684:	1c5a      	adds	r2, r3, #1
 8063686:	68fb      	ldr	r3, [r7, #12]
 8063688:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 806368a:	68fb      	ldr	r3, [r7, #12]
 806368c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 806368e:	b29b      	uxth	r3, r3
 8063690:	3b01      	subs	r3, #1
 8063692:	b29a      	uxth	r2, r3
 8063694:	68fb      	ldr	r3, [r7, #12]
 8063696:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8063698:	e05a      	b.n	8063750 <HAL_SPI_TransmitReceive+0x2ec>
 806369a:	bf00      	nop
 806369c:	0806d3b4 	.word	0x0806d3b4
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80636a0:	68fb      	ldr	r3, [r7, #12]
 80636a2:	681b      	ldr	r3, [r3, #0]
 80636a4:	689b      	ldr	r3, [r3, #8]
 80636a6:	f003 0302 	and.w	r3, r3, #2
 80636aa:	2b02      	cmp	r3, #2
 80636ac:	d11c      	bne.n	80636e8 <HAL_SPI_TransmitReceive+0x284>
 80636ae:	68fb      	ldr	r3, [r7, #12]
 80636b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80636b2:	b29b      	uxth	r3, r3
 80636b4:	2b00      	cmp	r3, #0
 80636b6:	d017      	beq.n	80636e8 <HAL_SPI_TransmitReceive+0x284>
 80636b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80636ba:	2b01      	cmp	r3, #1
 80636bc:	d114      	bne.n	80636e8 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80636be:	68fb      	ldr	r3, [r7, #12]
 80636c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80636c2:	68fb      	ldr	r3, [r7, #12]
 80636c4:	681b      	ldr	r3, [r3, #0]
 80636c6:	330c      	adds	r3, #12
 80636c8:	7812      	ldrb	r2, [r2, #0]
 80636ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80636cc:	68fb      	ldr	r3, [r7, #12]
 80636ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80636d0:	1c5a      	adds	r2, r3, #1
 80636d2:	68fb      	ldr	r3, [r7, #12]
 80636d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80636d6:	68fb      	ldr	r3, [r7, #12]
 80636d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80636da:	b29b      	uxth	r3, r3
 80636dc:	3b01      	subs	r3, #1
 80636de:	b29a      	uxth	r2, r3
 80636e0:	68fb      	ldr	r3, [r7, #12]
 80636e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80636e4:	2300      	movs	r3, #0
 80636e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80636e8:	68fb      	ldr	r3, [r7, #12]
 80636ea:	681b      	ldr	r3, [r3, #0]
 80636ec:	689b      	ldr	r3, [r3, #8]
 80636ee:	f003 0301 	and.w	r3, r3, #1
 80636f2:	2b01      	cmp	r3, #1
 80636f4:	d119      	bne.n	806372a <HAL_SPI_TransmitReceive+0x2c6>
 80636f6:	68fb      	ldr	r3, [r7, #12]
 80636f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80636fa:	b29b      	uxth	r3, r3
 80636fc:	2b00      	cmp	r3, #0
 80636fe:	d014      	beq.n	806372a <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8063700:	68fb      	ldr	r3, [r7, #12]
 8063702:	681b      	ldr	r3, [r3, #0]
 8063704:	68da      	ldr	r2, [r3, #12]
 8063706:	68fb      	ldr	r3, [r7, #12]
 8063708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806370a:	b2d2      	uxtb	r2, r2
 806370c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 806370e:	68fb      	ldr	r3, [r7, #12]
 8063710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8063712:	1c5a      	adds	r2, r3, #1
 8063714:	68fb      	ldr	r3, [r7, #12]
 8063716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8063718:	68fb      	ldr	r3, [r7, #12]
 806371a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 806371c:	b29b      	uxth	r3, r3
 806371e:	3b01      	subs	r3, #1
 8063720:	b29a      	uxth	r2, r3
 8063722:	68fb      	ldr	r3, [r7, #12]
 8063724:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8063726:	2301      	movs	r3, #1
 8063728:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 806372a:	f7fe f879 	bl	8061820 <HAL_GetTick>
 806372e:	4602      	mov	r2, r0
 8063730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8063732:	1ad3      	subs	r3, r2, r3
 8063734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8063736:	429a      	cmp	r2, r3
 8063738:	d803      	bhi.n	8063742 <HAL_SPI_TransmitReceive+0x2de>
 806373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806373c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8063740:	d102      	bne.n	8063748 <HAL_SPI_TransmitReceive+0x2e4>
 8063742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8063744:	2b00      	cmp	r3, #0
 8063746:	d103      	bne.n	8063750 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8063748:	2303      	movs	r3, #3
 806374a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 806374e:	e029      	b.n	80637a4 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8063750:	68fb      	ldr	r3, [r7, #12]
 8063752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8063754:	b29b      	uxth	r3, r3
 8063756:	2b00      	cmp	r3, #0
 8063758:	d1a2      	bne.n	80636a0 <HAL_SPI_TransmitReceive+0x23c>
 806375a:	68fb      	ldr	r3, [r7, #12]
 806375c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 806375e:	b29b      	uxth	r3, r3
 8063760:	2b00      	cmp	r3, #0
 8063762:	d19d      	bne.n	80636a0 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8063764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8063766:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8063768:	68f8      	ldr	r0, [r7, #12]
 806376a:	f000 f8b1 	bl	80638d0 <SPI_EndRxTxTransaction>
 806376e:	4603      	mov	r3, r0
 8063770:	2b00      	cmp	r3, #0
 8063772:	d006      	beq.n	8063782 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8063774:	2301      	movs	r3, #1
 8063776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 806377a:	68fb      	ldr	r3, [r7, #12]
 806377c:	2220      	movs	r2, #32
 806377e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8063780:	e010      	b.n	80637a4 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8063782:	68fb      	ldr	r3, [r7, #12]
 8063784:	689b      	ldr	r3, [r3, #8]
 8063786:	2b00      	cmp	r3, #0
 8063788:	d10b      	bne.n	80637a2 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 806378a:	2300      	movs	r3, #0
 806378c:	617b      	str	r3, [r7, #20]
 806378e:	68fb      	ldr	r3, [r7, #12]
 8063790:	681b      	ldr	r3, [r3, #0]
 8063792:	68db      	ldr	r3, [r3, #12]
 8063794:	617b      	str	r3, [r7, #20]
 8063796:	68fb      	ldr	r3, [r7, #12]
 8063798:	681b      	ldr	r3, [r3, #0]
 806379a:	689b      	ldr	r3, [r3, #8]
 806379c:	617b      	str	r3, [r7, #20]
 806379e:	697b      	ldr	r3, [r7, #20]
 80637a0:	e000      	b.n	80637a4 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80637a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80637a4:	68fb      	ldr	r3, [r7, #12]
 80637a6:	2201      	movs	r2, #1
 80637a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80637ac:	68fb      	ldr	r3, [r7, #12]
 80637ae:	2200      	movs	r2, #0
 80637b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80637b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80637b8:	4618      	mov	r0, r3
 80637ba:	3730      	adds	r7, #48	; 0x30
 80637bc:	46bd      	mov	sp, r7
 80637be:	bd80      	pop	{r7, pc}

080637c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80637c0:	b580      	push	{r7, lr}
 80637c2:	b088      	sub	sp, #32
 80637c4:	af00      	add	r7, sp, #0
 80637c6:	60f8      	str	r0, [r7, #12]
 80637c8:	60b9      	str	r1, [r7, #8]
 80637ca:	603b      	str	r3, [r7, #0]
 80637cc:	4613      	mov	r3, r2
 80637ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80637d0:	f7fe f826 	bl	8061820 <HAL_GetTick>
 80637d4:	4602      	mov	r2, r0
 80637d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80637d8:	1a9b      	subs	r3, r3, r2
 80637da:	683a      	ldr	r2, [r7, #0]
 80637dc:	4413      	add	r3, r2
 80637de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80637e0:	f7fe f81e 	bl	8061820 <HAL_GetTick>
 80637e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80637e6:	4b39      	ldr	r3, [pc, #228]	; (80638cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80637e8:	681b      	ldr	r3, [r3, #0]
 80637ea:	015b      	lsls	r3, r3, #5
 80637ec:	0d1b      	lsrs	r3, r3, #20
 80637ee:	69fa      	ldr	r2, [r7, #28]
 80637f0:	fb02 f303 	mul.w	r3, r2, r3
 80637f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80637f6:	e054      	b.n	80638a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80637f8:	683b      	ldr	r3, [r7, #0]
 80637fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80637fe:	d050      	beq.n	80638a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8063800:	f7fe f80e 	bl	8061820 <HAL_GetTick>
 8063804:	4602      	mov	r2, r0
 8063806:	69bb      	ldr	r3, [r7, #24]
 8063808:	1ad3      	subs	r3, r2, r3
 806380a:	69fa      	ldr	r2, [r7, #28]
 806380c:	429a      	cmp	r2, r3
 806380e:	d902      	bls.n	8063816 <SPI_WaitFlagStateUntilTimeout+0x56>
 8063810:	69fb      	ldr	r3, [r7, #28]
 8063812:	2b00      	cmp	r3, #0
 8063814:	d13d      	bne.n	8063892 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8063816:	68fb      	ldr	r3, [r7, #12]
 8063818:	681b      	ldr	r3, [r3, #0]
 806381a:	685a      	ldr	r2, [r3, #4]
 806381c:	68fb      	ldr	r3, [r7, #12]
 806381e:	681b      	ldr	r3, [r3, #0]
 8063820:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8063824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8063826:	68fb      	ldr	r3, [r7, #12]
 8063828:	685b      	ldr	r3, [r3, #4]
 806382a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 806382e:	d111      	bne.n	8063854 <SPI_WaitFlagStateUntilTimeout+0x94>
 8063830:	68fb      	ldr	r3, [r7, #12]
 8063832:	689b      	ldr	r3, [r3, #8]
 8063834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8063838:	d004      	beq.n	8063844 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 806383a:	68fb      	ldr	r3, [r7, #12]
 806383c:	689b      	ldr	r3, [r3, #8]
 806383e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8063842:	d107      	bne.n	8063854 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8063844:	68fb      	ldr	r3, [r7, #12]
 8063846:	681b      	ldr	r3, [r3, #0]
 8063848:	681a      	ldr	r2, [r3, #0]
 806384a:	68fb      	ldr	r3, [r7, #12]
 806384c:	681b      	ldr	r3, [r3, #0]
 806384e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8063852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8063854:	68fb      	ldr	r3, [r7, #12]
 8063856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 806385c:	d10f      	bne.n	806387e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 806385e:	68fb      	ldr	r3, [r7, #12]
 8063860:	681b      	ldr	r3, [r3, #0]
 8063862:	681a      	ldr	r2, [r3, #0]
 8063864:	68fb      	ldr	r3, [r7, #12]
 8063866:	681b      	ldr	r3, [r3, #0]
 8063868:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 806386c:	601a      	str	r2, [r3, #0]
 806386e:	68fb      	ldr	r3, [r7, #12]
 8063870:	681b      	ldr	r3, [r3, #0]
 8063872:	681a      	ldr	r2, [r3, #0]
 8063874:	68fb      	ldr	r3, [r7, #12]
 8063876:	681b      	ldr	r3, [r3, #0]
 8063878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 806387c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 806387e:	68fb      	ldr	r3, [r7, #12]
 8063880:	2201      	movs	r2, #1
 8063882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8063886:	68fb      	ldr	r3, [r7, #12]
 8063888:	2200      	movs	r2, #0
 806388a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 806388e:	2303      	movs	r3, #3
 8063890:	e017      	b.n	80638c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8063892:	697b      	ldr	r3, [r7, #20]
 8063894:	2b00      	cmp	r3, #0
 8063896:	d101      	bne.n	806389c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8063898:	2300      	movs	r3, #0
 806389a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 806389c:	697b      	ldr	r3, [r7, #20]
 806389e:	3b01      	subs	r3, #1
 80638a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80638a2:	68fb      	ldr	r3, [r7, #12]
 80638a4:	681b      	ldr	r3, [r3, #0]
 80638a6:	689a      	ldr	r2, [r3, #8]
 80638a8:	68bb      	ldr	r3, [r7, #8]
 80638aa:	4013      	ands	r3, r2
 80638ac:	68ba      	ldr	r2, [r7, #8]
 80638ae:	429a      	cmp	r2, r3
 80638b0:	bf0c      	ite	eq
 80638b2:	2301      	moveq	r3, #1
 80638b4:	2300      	movne	r3, #0
 80638b6:	b2db      	uxtb	r3, r3
 80638b8:	461a      	mov	r2, r3
 80638ba:	79fb      	ldrb	r3, [r7, #7]
 80638bc:	429a      	cmp	r2, r3
 80638be:	d19b      	bne.n	80637f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80638c0:	2300      	movs	r3, #0
}
 80638c2:	4618      	mov	r0, r3
 80638c4:	3720      	adds	r7, #32
 80638c6:	46bd      	mov	sp, r7
 80638c8:	bd80      	pop	{r7, pc}
 80638ca:	bf00      	nop
 80638cc:	20000000 	.word	0x20000000

080638d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80638d0:	b580      	push	{r7, lr}
 80638d2:	b088      	sub	sp, #32
 80638d4:	af02      	add	r7, sp, #8
 80638d6:	60f8      	str	r0, [r7, #12]
 80638d8:	60b9      	str	r1, [r7, #8]
 80638da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80638dc:	4b1b      	ldr	r3, [pc, #108]	; (806394c <SPI_EndRxTxTransaction+0x7c>)
 80638de:	681b      	ldr	r3, [r3, #0]
 80638e0:	4a1b      	ldr	r2, [pc, #108]	; (8063950 <SPI_EndRxTxTransaction+0x80>)
 80638e2:	fba2 2303 	umull	r2, r3, r2, r3
 80638e6:	0d5b      	lsrs	r3, r3, #21
 80638e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80638ec:	fb02 f303 	mul.w	r3, r2, r3
 80638f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80638f2:	68fb      	ldr	r3, [r7, #12]
 80638f4:	685b      	ldr	r3, [r3, #4]
 80638f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80638fa:	d112      	bne.n	8063922 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80638fc:	687b      	ldr	r3, [r7, #4]
 80638fe:	9300      	str	r3, [sp, #0]
 8063900:	68bb      	ldr	r3, [r7, #8]
 8063902:	2200      	movs	r2, #0
 8063904:	2180      	movs	r1, #128	; 0x80
 8063906:	68f8      	ldr	r0, [r7, #12]
 8063908:	f7ff ff5a 	bl	80637c0 <SPI_WaitFlagStateUntilTimeout>
 806390c:	4603      	mov	r3, r0
 806390e:	2b00      	cmp	r3, #0
 8063910:	d016      	beq.n	8063940 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8063912:	68fb      	ldr	r3, [r7, #12]
 8063914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8063916:	f043 0220 	orr.w	r2, r3, #32
 806391a:	68fb      	ldr	r3, [r7, #12]
 806391c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 806391e:	2303      	movs	r3, #3
 8063920:	e00f      	b.n	8063942 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8063922:	697b      	ldr	r3, [r7, #20]
 8063924:	2b00      	cmp	r3, #0
 8063926:	d00a      	beq.n	806393e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8063928:	697b      	ldr	r3, [r7, #20]
 806392a:	3b01      	subs	r3, #1
 806392c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 806392e:	68fb      	ldr	r3, [r7, #12]
 8063930:	681b      	ldr	r3, [r3, #0]
 8063932:	689b      	ldr	r3, [r3, #8]
 8063934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8063938:	2b80      	cmp	r3, #128	; 0x80
 806393a:	d0f2      	beq.n	8063922 <SPI_EndRxTxTransaction+0x52>
 806393c:	e000      	b.n	8063940 <SPI_EndRxTxTransaction+0x70>
        break;
 806393e:	bf00      	nop
  }

  return HAL_OK;
 8063940:	2300      	movs	r3, #0
}
 8063942:	4618      	mov	r0, r3
 8063944:	3718      	adds	r7, #24
 8063946:	46bd      	mov	sp, r7
 8063948:	bd80      	pop	{r7, pc}
 806394a:	bf00      	nop
 806394c:	20000000 	.word	0x20000000
 8063950:	165e9f81 	.word	0x165e9f81

08063954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8063954:	b580      	push	{r7, lr}
 8063956:	b082      	sub	sp, #8
 8063958:	af00      	add	r7, sp, #0
 806395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 806395c:	687b      	ldr	r3, [r7, #4]
 806395e:	2b00      	cmp	r3, #0
 8063960:	d101      	bne.n	8063966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8063962:	2301      	movs	r3, #1
 8063964:	e0a7      	b.n	8063ab6 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8063966:	687b      	ldr	r3, [r7, #4]
 8063968:	681b      	ldr	r3, [r3, #0]
 806396a:	4a55      	ldr	r2, [pc, #340]	; (8063ac0 <HAL_TIM_Base_Init+0x16c>)
 806396c:	4293      	cmp	r3, r2
 806396e:	d027      	beq.n	80639c0 <HAL_TIM_Base_Init+0x6c>
 8063970:	687b      	ldr	r3, [r7, #4]
 8063972:	681b      	ldr	r3, [r3, #0]
 8063974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8063978:	d022      	beq.n	80639c0 <HAL_TIM_Base_Init+0x6c>
 806397a:	687b      	ldr	r3, [r7, #4]
 806397c:	681b      	ldr	r3, [r3, #0]
 806397e:	4a51      	ldr	r2, [pc, #324]	; (8063ac4 <HAL_TIM_Base_Init+0x170>)
 8063980:	4293      	cmp	r3, r2
 8063982:	d01d      	beq.n	80639c0 <HAL_TIM_Base_Init+0x6c>
 8063984:	687b      	ldr	r3, [r7, #4]
 8063986:	681b      	ldr	r3, [r3, #0]
 8063988:	4a4f      	ldr	r2, [pc, #316]	; (8063ac8 <HAL_TIM_Base_Init+0x174>)
 806398a:	4293      	cmp	r3, r2
 806398c:	d018      	beq.n	80639c0 <HAL_TIM_Base_Init+0x6c>
 806398e:	687b      	ldr	r3, [r7, #4]
 8063990:	681b      	ldr	r3, [r3, #0]
 8063992:	4a4e      	ldr	r2, [pc, #312]	; (8063acc <HAL_TIM_Base_Init+0x178>)
 8063994:	4293      	cmp	r3, r2
 8063996:	d013      	beq.n	80639c0 <HAL_TIM_Base_Init+0x6c>
 8063998:	687b      	ldr	r3, [r7, #4]
 806399a:	681b      	ldr	r3, [r3, #0]
 806399c:	4a4c      	ldr	r2, [pc, #304]	; (8063ad0 <HAL_TIM_Base_Init+0x17c>)
 806399e:	4293      	cmp	r3, r2
 80639a0:	d00e      	beq.n	80639c0 <HAL_TIM_Base_Init+0x6c>
 80639a2:	687b      	ldr	r3, [r7, #4]
 80639a4:	681b      	ldr	r3, [r3, #0]
 80639a6:	4a4b      	ldr	r2, [pc, #300]	; (8063ad4 <HAL_TIM_Base_Init+0x180>)
 80639a8:	4293      	cmp	r3, r2
 80639aa:	d009      	beq.n	80639c0 <HAL_TIM_Base_Init+0x6c>
 80639ac:	687b      	ldr	r3, [r7, #4]
 80639ae:	681b      	ldr	r3, [r3, #0]
 80639b0:	4a49      	ldr	r2, [pc, #292]	; (8063ad8 <HAL_TIM_Base_Init+0x184>)
 80639b2:	4293      	cmp	r3, r2
 80639b4:	d004      	beq.n	80639c0 <HAL_TIM_Base_Init+0x6c>
 80639b6:	f240 1113 	movw	r1, #275	; 0x113
 80639ba:	4848      	ldr	r0, [pc, #288]	; (8063adc <HAL_TIM_Base_Init+0x188>)
 80639bc:	f7fd fcd1 	bl	8061362 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80639c0:	687b      	ldr	r3, [r7, #4]
 80639c2:	689b      	ldr	r3, [r3, #8]
 80639c4:	2b00      	cmp	r3, #0
 80639c6:	d014      	beq.n	80639f2 <HAL_TIM_Base_Init+0x9e>
 80639c8:	687b      	ldr	r3, [r7, #4]
 80639ca:	689b      	ldr	r3, [r3, #8]
 80639cc:	2b10      	cmp	r3, #16
 80639ce:	d010      	beq.n	80639f2 <HAL_TIM_Base_Init+0x9e>
 80639d0:	687b      	ldr	r3, [r7, #4]
 80639d2:	689b      	ldr	r3, [r3, #8]
 80639d4:	2b20      	cmp	r3, #32
 80639d6:	d00c      	beq.n	80639f2 <HAL_TIM_Base_Init+0x9e>
 80639d8:	687b      	ldr	r3, [r7, #4]
 80639da:	689b      	ldr	r3, [r3, #8]
 80639dc:	2b40      	cmp	r3, #64	; 0x40
 80639de:	d008      	beq.n	80639f2 <HAL_TIM_Base_Init+0x9e>
 80639e0:	687b      	ldr	r3, [r7, #4]
 80639e2:	689b      	ldr	r3, [r3, #8]
 80639e4:	2b60      	cmp	r3, #96	; 0x60
 80639e6:	d004      	beq.n	80639f2 <HAL_TIM_Base_Init+0x9e>
 80639e8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80639ec:	483b      	ldr	r0, [pc, #236]	; (8063adc <HAL_TIM_Base_Init+0x188>)
 80639ee:	f7fd fcb8 	bl	8061362 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80639f2:	687b      	ldr	r3, [r7, #4]
 80639f4:	691b      	ldr	r3, [r3, #16]
 80639f6:	2b00      	cmp	r3, #0
 80639f8:	d00e      	beq.n	8063a18 <HAL_TIM_Base_Init+0xc4>
 80639fa:	687b      	ldr	r3, [r7, #4]
 80639fc:	691b      	ldr	r3, [r3, #16]
 80639fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8063a02:	d009      	beq.n	8063a18 <HAL_TIM_Base_Init+0xc4>
 8063a04:	687b      	ldr	r3, [r7, #4]
 8063a06:	691b      	ldr	r3, [r3, #16]
 8063a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8063a0c:	d004      	beq.n	8063a18 <HAL_TIM_Base_Init+0xc4>
 8063a0e:	f240 1115 	movw	r1, #277	; 0x115
 8063a12:	4832      	ldr	r0, [pc, #200]	; (8063adc <HAL_TIM_Base_Init+0x188>)
 8063a14:	f7fd fca5 	bl	8061362 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8063a18:	687b      	ldr	r3, [r7, #4]
 8063a1a:	699b      	ldr	r3, [r3, #24]
 8063a1c:	2b00      	cmp	r3, #0
 8063a1e:	d008      	beq.n	8063a32 <HAL_TIM_Base_Init+0xde>
 8063a20:	687b      	ldr	r3, [r7, #4]
 8063a22:	699b      	ldr	r3, [r3, #24]
 8063a24:	2b80      	cmp	r3, #128	; 0x80
 8063a26:	d004      	beq.n	8063a32 <HAL_TIM_Base_Init+0xde>
 8063a28:	f44f 718b 	mov.w	r1, #278	; 0x116
 8063a2c:	482b      	ldr	r0, [pc, #172]	; (8063adc <HAL_TIM_Base_Init+0x188>)
 8063a2e:	f7fd fc98 	bl	8061362 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8063a32:	687b      	ldr	r3, [r7, #4]
 8063a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8063a38:	b2db      	uxtb	r3, r3
 8063a3a:	2b00      	cmp	r3, #0
 8063a3c:	d106      	bne.n	8063a4c <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8063a3e:	687b      	ldr	r3, [r7, #4]
 8063a40:	2200      	movs	r2, #0
 8063a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8063a46:	6878      	ldr	r0, [r7, #4]
 8063a48:	f000 f84a 	bl	8063ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8063a4c:	687b      	ldr	r3, [r7, #4]
 8063a4e:	2202      	movs	r2, #2
 8063a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8063a54:	687b      	ldr	r3, [r7, #4]
 8063a56:	681a      	ldr	r2, [r3, #0]
 8063a58:	687b      	ldr	r3, [r7, #4]
 8063a5a:	3304      	adds	r3, #4
 8063a5c:	4619      	mov	r1, r3
 8063a5e:	4610      	mov	r0, r2
 8063a60:	f000 fa0a 	bl	8063e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8063a64:	687b      	ldr	r3, [r7, #4]
 8063a66:	2201      	movs	r2, #1
 8063a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8063a6c:	687b      	ldr	r3, [r7, #4]
 8063a6e:	2201      	movs	r2, #1
 8063a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8063a74:	687b      	ldr	r3, [r7, #4]
 8063a76:	2201      	movs	r2, #1
 8063a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8063a7c:	687b      	ldr	r3, [r7, #4]
 8063a7e:	2201      	movs	r2, #1
 8063a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8063a84:	687b      	ldr	r3, [r7, #4]
 8063a86:	2201      	movs	r2, #1
 8063a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8063a8c:	687b      	ldr	r3, [r7, #4]
 8063a8e:	2201      	movs	r2, #1
 8063a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8063a94:	687b      	ldr	r3, [r7, #4]
 8063a96:	2201      	movs	r2, #1
 8063a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8063a9c:	687b      	ldr	r3, [r7, #4]
 8063a9e:	2201      	movs	r2, #1
 8063aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8063aa4:	687b      	ldr	r3, [r7, #4]
 8063aa6:	2201      	movs	r2, #1
 8063aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8063aac:	687b      	ldr	r3, [r7, #4]
 8063aae:	2201      	movs	r2, #1
 8063ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8063ab4:	2300      	movs	r3, #0
}
 8063ab6:	4618      	mov	r0, r3
 8063ab8:	3708      	adds	r7, #8
 8063aba:	46bd      	mov	sp, r7
 8063abc:	bd80      	pop	{r7, pc}
 8063abe:	bf00      	nop
 8063ac0:	40010000 	.word	0x40010000
 8063ac4:	40000400 	.word	0x40000400
 8063ac8:	40000800 	.word	0x40000800
 8063acc:	40000c00 	.word	0x40000c00
 8063ad0:	40014000 	.word	0x40014000
 8063ad4:	40014400 	.word	0x40014400
 8063ad8:	40014800 	.word	0x40014800
 8063adc:	0806d3ec 	.word	0x0806d3ec

08063ae0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8063ae0:	b480      	push	{r7}
 8063ae2:	b083      	sub	sp, #12
 8063ae4:	af00      	add	r7, sp, #0
 8063ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8063ae8:	bf00      	nop
 8063aea:	370c      	adds	r7, #12
 8063aec:	46bd      	mov	sp, r7
 8063aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063af2:	4770      	bx	lr

08063af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8063af4:	b580      	push	{r7, lr}
 8063af6:	b084      	sub	sp, #16
 8063af8:	af00      	add	r7, sp, #0
 8063afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8063afc:	687b      	ldr	r3, [r7, #4]
 8063afe:	681b      	ldr	r3, [r3, #0]
 8063b00:	4a3d      	ldr	r2, [pc, #244]	; (8063bf8 <HAL_TIM_Base_Start_IT+0x104>)
 8063b02:	4293      	cmp	r3, r2
 8063b04:	d027      	beq.n	8063b56 <HAL_TIM_Base_Start_IT+0x62>
 8063b06:	687b      	ldr	r3, [r7, #4]
 8063b08:	681b      	ldr	r3, [r3, #0]
 8063b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8063b0e:	d022      	beq.n	8063b56 <HAL_TIM_Base_Start_IT+0x62>
 8063b10:	687b      	ldr	r3, [r7, #4]
 8063b12:	681b      	ldr	r3, [r3, #0]
 8063b14:	4a39      	ldr	r2, [pc, #228]	; (8063bfc <HAL_TIM_Base_Start_IT+0x108>)
 8063b16:	4293      	cmp	r3, r2
 8063b18:	d01d      	beq.n	8063b56 <HAL_TIM_Base_Start_IT+0x62>
 8063b1a:	687b      	ldr	r3, [r7, #4]
 8063b1c:	681b      	ldr	r3, [r3, #0]
 8063b1e:	4a38      	ldr	r2, [pc, #224]	; (8063c00 <HAL_TIM_Base_Start_IT+0x10c>)
 8063b20:	4293      	cmp	r3, r2
 8063b22:	d018      	beq.n	8063b56 <HAL_TIM_Base_Start_IT+0x62>
 8063b24:	687b      	ldr	r3, [r7, #4]
 8063b26:	681b      	ldr	r3, [r3, #0]
 8063b28:	4a36      	ldr	r2, [pc, #216]	; (8063c04 <HAL_TIM_Base_Start_IT+0x110>)
 8063b2a:	4293      	cmp	r3, r2
 8063b2c:	d013      	beq.n	8063b56 <HAL_TIM_Base_Start_IT+0x62>
 8063b2e:	687b      	ldr	r3, [r7, #4]
 8063b30:	681b      	ldr	r3, [r3, #0]
 8063b32:	4a35      	ldr	r2, [pc, #212]	; (8063c08 <HAL_TIM_Base_Start_IT+0x114>)
 8063b34:	4293      	cmp	r3, r2
 8063b36:	d00e      	beq.n	8063b56 <HAL_TIM_Base_Start_IT+0x62>
 8063b38:	687b      	ldr	r3, [r7, #4]
 8063b3a:	681b      	ldr	r3, [r3, #0]
 8063b3c:	4a33      	ldr	r2, [pc, #204]	; (8063c0c <HAL_TIM_Base_Start_IT+0x118>)
 8063b3e:	4293      	cmp	r3, r2
 8063b40:	d009      	beq.n	8063b56 <HAL_TIM_Base_Start_IT+0x62>
 8063b42:	687b      	ldr	r3, [r7, #4]
 8063b44:	681b      	ldr	r3, [r3, #0]
 8063b46:	4a32      	ldr	r2, [pc, #200]	; (8063c10 <HAL_TIM_Base_Start_IT+0x11c>)
 8063b48:	4293      	cmp	r3, r2
 8063b4a:	d004      	beq.n	8063b56 <HAL_TIM_Base_Start_IT+0x62>
 8063b4c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8063b50:	4830      	ldr	r0, [pc, #192]	; (8063c14 <HAL_TIM_Base_Start_IT+0x120>)
 8063b52:	f7fd fc06 	bl	8061362 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8063b56:	687b      	ldr	r3, [r7, #4]
 8063b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8063b5c:	b2db      	uxtb	r3, r3
 8063b5e:	2b01      	cmp	r3, #1
 8063b60:	d001      	beq.n	8063b66 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8063b62:	2301      	movs	r3, #1
 8063b64:	e044      	b.n	8063bf0 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8063b66:	687b      	ldr	r3, [r7, #4]
 8063b68:	2202      	movs	r2, #2
 8063b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8063b6e:	687b      	ldr	r3, [r7, #4]
 8063b70:	681b      	ldr	r3, [r3, #0]
 8063b72:	68da      	ldr	r2, [r3, #12]
 8063b74:	687b      	ldr	r3, [r7, #4]
 8063b76:	681b      	ldr	r3, [r3, #0]
 8063b78:	f042 0201 	orr.w	r2, r2, #1
 8063b7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8063b7e:	687b      	ldr	r3, [r7, #4]
 8063b80:	681b      	ldr	r3, [r3, #0]
 8063b82:	4a1d      	ldr	r2, [pc, #116]	; (8063bf8 <HAL_TIM_Base_Start_IT+0x104>)
 8063b84:	4293      	cmp	r3, r2
 8063b86:	d018      	beq.n	8063bba <HAL_TIM_Base_Start_IT+0xc6>
 8063b88:	687b      	ldr	r3, [r7, #4]
 8063b8a:	681b      	ldr	r3, [r3, #0]
 8063b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8063b90:	d013      	beq.n	8063bba <HAL_TIM_Base_Start_IT+0xc6>
 8063b92:	687b      	ldr	r3, [r7, #4]
 8063b94:	681b      	ldr	r3, [r3, #0]
 8063b96:	4a19      	ldr	r2, [pc, #100]	; (8063bfc <HAL_TIM_Base_Start_IT+0x108>)
 8063b98:	4293      	cmp	r3, r2
 8063b9a:	d00e      	beq.n	8063bba <HAL_TIM_Base_Start_IT+0xc6>
 8063b9c:	687b      	ldr	r3, [r7, #4]
 8063b9e:	681b      	ldr	r3, [r3, #0]
 8063ba0:	4a17      	ldr	r2, [pc, #92]	; (8063c00 <HAL_TIM_Base_Start_IT+0x10c>)
 8063ba2:	4293      	cmp	r3, r2
 8063ba4:	d009      	beq.n	8063bba <HAL_TIM_Base_Start_IT+0xc6>
 8063ba6:	687b      	ldr	r3, [r7, #4]
 8063ba8:	681b      	ldr	r3, [r3, #0]
 8063baa:	4a16      	ldr	r2, [pc, #88]	; (8063c04 <HAL_TIM_Base_Start_IT+0x110>)
 8063bac:	4293      	cmp	r3, r2
 8063bae:	d004      	beq.n	8063bba <HAL_TIM_Base_Start_IT+0xc6>
 8063bb0:	687b      	ldr	r3, [r7, #4]
 8063bb2:	681b      	ldr	r3, [r3, #0]
 8063bb4:	4a14      	ldr	r2, [pc, #80]	; (8063c08 <HAL_TIM_Base_Start_IT+0x114>)
 8063bb6:	4293      	cmp	r3, r2
 8063bb8:	d111      	bne.n	8063bde <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8063bba:	687b      	ldr	r3, [r7, #4]
 8063bbc:	681b      	ldr	r3, [r3, #0]
 8063bbe:	689b      	ldr	r3, [r3, #8]
 8063bc0:	f003 0307 	and.w	r3, r3, #7
 8063bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8063bc6:	68fb      	ldr	r3, [r7, #12]
 8063bc8:	2b06      	cmp	r3, #6
 8063bca:	d010      	beq.n	8063bee <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8063bcc:	687b      	ldr	r3, [r7, #4]
 8063bce:	681b      	ldr	r3, [r3, #0]
 8063bd0:	681a      	ldr	r2, [r3, #0]
 8063bd2:	687b      	ldr	r3, [r7, #4]
 8063bd4:	681b      	ldr	r3, [r3, #0]
 8063bd6:	f042 0201 	orr.w	r2, r2, #1
 8063bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8063bdc:	e007      	b.n	8063bee <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8063bde:	687b      	ldr	r3, [r7, #4]
 8063be0:	681b      	ldr	r3, [r3, #0]
 8063be2:	681a      	ldr	r2, [r3, #0]
 8063be4:	687b      	ldr	r3, [r7, #4]
 8063be6:	681b      	ldr	r3, [r3, #0]
 8063be8:	f042 0201 	orr.w	r2, r2, #1
 8063bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8063bee:	2300      	movs	r3, #0
}
 8063bf0:	4618      	mov	r0, r3
 8063bf2:	3710      	adds	r7, #16
 8063bf4:	46bd      	mov	sp, r7
 8063bf6:	bd80      	pop	{r7, pc}
 8063bf8:	40010000 	.word	0x40010000
 8063bfc:	40000400 	.word	0x40000400
 8063c00:	40000800 	.word	0x40000800
 8063c04:	40000c00 	.word	0x40000c00
 8063c08:	40014000 	.word	0x40014000
 8063c0c:	40014400 	.word	0x40014400
 8063c10:	40014800 	.word	0x40014800
 8063c14:	0806d3ec 	.word	0x0806d3ec

08063c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8063c18:	b580      	push	{r7, lr}
 8063c1a:	b082      	sub	sp, #8
 8063c1c:	af00      	add	r7, sp, #0
 8063c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8063c20:	687b      	ldr	r3, [r7, #4]
 8063c22:	681b      	ldr	r3, [r3, #0]
 8063c24:	691b      	ldr	r3, [r3, #16]
 8063c26:	f003 0302 	and.w	r3, r3, #2
 8063c2a:	2b02      	cmp	r3, #2
 8063c2c:	d122      	bne.n	8063c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8063c2e:	687b      	ldr	r3, [r7, #4]
 8063c30:	681b      	ldr	r3, [r3, #0]
 8063c32:	68db      	ldr	r3, [r3, #12]
 8063c34:	f003 0302 	and.w	r3, r3, #2
 8063c38:	2b02      	cmp	r3, #2
 8063c3a:	d11b      	bne.n	8063c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8063c3c:	687b      	ldr	r3, [r7, #4]
 8063c3e:	681b      	ldr	r3, [r3, #0]
 8063c40:	f06f 0202 	mvn.w	r2, #2
 8063c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8063c46:	687b      	ldr	r3, [r7, #4]
 8063c48:	2201      	movs	r2, #1
 8063c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8063c4c:	687b      	ldr	r3, [r7, #4]
 8063c4e:	681b      	ldr	r3, [r3, #0]
 8063c50:	699b      	ldr	r3, [r3, #24]
 8063c52:	f003 0303 	and.w	r3, r3, #3
 8063c56:	2b00      	cmp	r3, #0
 8063c58:	d003      	beq.n	8063c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8063c5a:	6878      	ldr	r0, [r7, #4]
 8063c5c:	f000 f8ee 	bl	8063e3c <HAL_TIM_IC_CaptureCallback>
 8063c60:	e005      	b.n	8063c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8063c62:	6878      	ldr	r0, [r7, #4]
 8063c64:	f000 f8e0 	bl	8063e28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8063c68:	6878      	ldr	r0, [r7, #4]
 8063c6a:	f000 f8f1 	bl	8063e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8063c6e:	687b      	ldr	r3, [r7, #4]
 8063c70:	2200      	movs	r2, #0
 8063c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8063c74:	687b      	ldr	r3, [r7, #4]
 8063c76:	681b      	ldr	r3, [r3, #0]
 8063c78:	691b      	ldr	r3, [r3, #16]
 8063c7a:	f003 0304 	and.w	r3, r3, #4
 8063c7e:	2b04      	cmp	r3, #4
 8063c80:	d122      	bne.n	8063cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8063c82:	687b      	ldr	r3, [r7, #4]
 8063c84:	681b      	ldr	r3, [r3, #0]
 8063c86:	68db      	ldr	r3, [r3, #12]
 8063c88:	f003 0304 	and.w	r3, r3, #4
 8063c8c:	2b04      	cmp	r3, #4
 8063c8e:	d11b      	bne.n	8063cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8063c90:	687b      	ldr	r3, [r7, #4]
 8063c92:	681b      	ldr	r3, [r3, #0]
 8063c94:	f06f 0204 	mvn.w	r2, #4
 8063c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8063c9a:	687b      	ldr	r3, [r7, #4]
 8063c9c:	2202      	movs	r2, #2
 8063c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8063ca0:	687b      	ldr	r3, [r7, #4]
 8063ca2:	681b      	ldr	r3, [r3, #0]
 8063ca4:	699b      	ldr	r3, [r3, #24]
 8063ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8063caa:	2b00      	cmp	r3, #0
 8063cac:	d003      	beq.n	8063cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8063cae:	6878      	ldr	r0, [r7, #4]
 8063cb0:	f000 f8c4 	bl	8063e3c <HAL_TIM_IC_CaptureCallback>
 8063cb4:	e005      	b.n	8063cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8063cb6:	6878      	ldr	r0, [r7, #4]
 8063cb8:	f000 f8b6 	bl	8063e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8063cbc:	6878      	ldr	r0, [r7, #4]
 8063cbe:	f000 f8c7 	bl	8063e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8063cc2:	687b      	ldr	r3, [r7, #4]
 8063cc4:	2200      	movs	r2, #0
 8063cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8063cc8:	687b      	ldr	r3, [r7, #4]
 8063cca:	681b      	ldr	r3, [r3, #0]
 8063ccc:	691b      	ldr	r3, [r3, #16]
 8063cce:	f003 0308 	and.w	r3, r3, #8
 8063cd2:	2b08      	cmp	r3, #8
 8063cd4:	d122      	bne.n	8063d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8063cd6:	687b      	ldr	r3, [r7, #4]
 8063cd8:	681b      	ldr	r3, [r3, #0]
 8063cda:	68db      	ldr	r3, [r3, #12]
 8063cdc:	f003 0308 	and.w	r3, r3, #8
 8063ce0:	2b08      	cmp	r3, #8
 8063ce2:	d11b      	bne.n	8063d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8063ce4:	687b      	ldr	r3, [r7, #4]
 8063ce6:	681b      	ldr	r3, [r3, #0]
 8063ce8:	f06f 0208 	mvn.w	r2, #8
 8063cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8063cee:	687b      	ldr	r3, [r7, #4]
 8063cf0:	2204      	movs	r2, #4
 8063cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8063cf4:	687b      	ldr	r3, [r7, #4]
 8063cf6:	681b      	ldr	r3, [r3, #0]
 8063cf8:	69db      	ldr	r3, [r3, #28]
 8063cfa:	f003 0303 	and.w	r3, r3, #3
 8063cfe:	2b00      	cmp	r3, #0
 8063d00:	d003      	beq.n	8063d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8063d02:	6878      	ldr	r0, [r7, #4]
 8063d04:	f000 f89a 	bl	8063e3c <HAL_TIM_IC_CaptureCallback>
 8063d08:	e005      	b.n	8063d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8063d0a:	6878      	ldr	r0, [r7, #4]
 8063d0c:	f000 f88c 	bl	8063e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8063d10:	6878      	ldr	r0, [r7, #4]
 8063d12:	f000 f89d 	bl	8063e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8063d16:	687b      	ldr	r3, [r7, #4]
 8063d18:	2200      	movs	r2, #0
 8063d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8063d1c:	687b      	ldr	r3, [r7, #4]
 8063d1e:	681b      	ldr	r3, [r3, #0]
 8063d20:	691b      	ldr	r3, [r3, #16]
 8063d22:	f003 0310 	and.w	r3, r3, #16
 8063d26:	2b10      	cmp	r3, #16
 8063d28:	d122      	bne.n	8063d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8063d2a:	687b      	ldr	r3, [r7, #4]
 8063d2c:	681b      	ldr	r3, [r3, #0]
 8063d2e:	68db      	ldr	r3, [r3, #12]
 8063d30:	f003 0310 	and.w	r3, r3, #16
 8063d34:	2b10      	cmp	r3, #16
 8063d36:	d11b      	bne.n	8063d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8063d38:	687b      	ldr	r3, [r7, #4]
 8063d3a:	681b      	ldr	r3, [r3, #0]
 8063d3c:	f06f 0210 	mvn.w	r2, #16
 8063d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8063d42:	687b      	ldr	r3, [r7, #4]
 8063d44:	2208      	movs	r2, #8
 8063d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8063d48:	687b      	ldr	r3, [r7, #4]
 8063d4a:	681b      	ldr	r3, [r3, #0]
 8063d4c:	69db      	ldr	r3, [r3, #28]
 8063d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8063d52:	2b00      	cmp	r3, #0
 8063d54:	d003      	beq.n	8063d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8063d56:	6878      	ldr	r0, [r7, #4]
 8063d58:	f000 f870 	bl	8063e3c <HAL_TIM_IC_CaptureCallback>
 8063d5c:	e005      	b.n	8063d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8063d5e:	6878      	ldr	r0, [r7, #4]
 8063d60:	f000 f862 	bl	8063e28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8063d64:	6878      	ldr	r0, [r7, #4]
 8063d66:	f000 f873 	bl	8063e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8063d6a:	687b      	ldr	r3, [r7, #4]
 8063d6c:	2200      	movs	r2, #0
 8063d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8063d70:	687b      	ldr	r3, [r7, #4]
 8063d72:	681b      	ldr	r3, [r3, #0]
 8063d74:	691b      	ldr	r3, [r3, #16]
 8063d76:	f003 0301 	and.w	r3, r3, #1
 8063d7a:	2b01      	cmp	r3, #1
 8063d7c:	d10e      	bne.n	8063d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8063d7e:	687b      	ldr	r3, [r7, #4]
 8063d80:	681b      	ldr	r3, [r3, #0]
 8063d82:	68db      	ldr	r3, [r3, #12]
 8063d84:	f003 0301 	and.w	r3, r3, #1
 8063d88:	2b01      	cmp	r3, #1
 8063d8a:	d107      	bne.n	8063d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8063d8c:	687b      	ldr	r3, [r7, #4]
 8063d8e:	681b      	ldr	r3, [r3, #0]
 8063d90:	f06f 0201 	mvn.w	r2, #1
 8063d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8063d96:	6878      	ldr	r0, [r7, #4]
 8063d98:	f7fd facc 	bl	8061334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8063d9c:	687b      	ldr	r3, [r7, #4]
 8063d9e:	681b      	ldr	r3, [r3, #0]
 8063da0:	691b      	ldr	r3, [r3, #16]
 8063da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8063da6:	2b80      	cmp	r3, #128	; 0x80
 8063da8:	d10e      	bne.n	8063dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8063daa:	687b      	ldr	r3, [r7, #4]
 8063dac:	681b      	ldr	r3, [r3, #0]
 8063dae:	68db      	ldr	r3, [r3, #12]
 8063db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8063db4:	2b80      	cmp	r3, #128	; 0x80
 8063db6:	d107      	bne.n	8063dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8063db8:	687b      	ldr	r3, [r7, #4]
 8063dba:	681b      	ldr	r3, [r3, #0]
 8063dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8063dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8063dc2:	6878      	ldr	r0, [r7, #4]
 8063dc4:	f000 f8e2 	bl	8063f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8063dc8:	687b      	ldr	r3, [r7, #4]
 8063dca:	681b      	ldr	r3, [r3, #0]
 8063dcc:	691b      	ldr	r3, [r3, #16]
 8063dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8063dd2:	2b40      	cmp	r3, #64	; 0x40
 8063dd4:	d10e      	bne.n	8063df4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8063dd6:	687b      	ldr	r3, [r7, #4]
 8063dd8:	681b      	ldr	r3, [r3, #0]
 8063dda:	68db      	ldr	r3, [r3, #12]
 8063ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8063de0:	2b40      	cmp	r3, #64	; 0x40
 8063de2:	d107      	bne.n	8063df4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8063de4:	687b      	ldr	r3, [r7, #4]
 8063de6:	681b      	ldr	r3, [r3, #0]
 8063de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8063dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8063dee:	6878      	ldr	r0, [r7, #4]
 8063df0:	f000 f838 	bl	8063e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8063df4:	687b      	ldr	r3, [r7, #4]
 8063df6:	681b      	ldr	r3, [r3, #0]
 8063df8:	691b      	ldr	r3, [r3, #16]
 8063dfa:	f003 0320 	and.w	r3, r3, #32
 8063dfe:	2b20      	cmp	r3, #32
 8063e00:	d10e      	bne.n	8063e20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8063e02:	687b      	ldr	r3, [r7, #4]
 8063e04:	681b      	ldr	r3, [r3, #0]
 8063e06:	68db      	ldr	r3, [r3, #12]
 8063e08:	f003 0320 	and.w	r3, r3, #32
 8063e0c:	2b20      	cmp	r3, #32
 8063e0e:	d107      	bne.n	8063e20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8063e10:	687b      	ldr	r3, [r7, #4]
 8063e12:	681b      	ldr	r3, [r3, #0]
 8063e14:	f06f 0220 	mvn.w	r2, #32
 8063e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8063e1a:	6878      	ldr	r0, [r7, #4]
 8063e1c:	f000 f8ac 	bl	8063f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8063e20:	bf00      	nop
 8063e22:	3708      	adds	r7, #8
 8063e24:	46bd      	mov	sp, r7
 8063e26:	bd80      	pop	{r7, pc}

08063e28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8063e28:	b480      	push	{r7}
 8063e2a:	b083      	sub	sp, #12
 8063e2c:	af00      	add	r7, sp, #0
 8063e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8063e30:	bf00      	nop
 8063e32:	370c      	adds	r7, #12
 8063e34:	46bd      	mov	sp, r7
 8063e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063e3a:	4770      	bx	lr

08063e3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8063e3c:	b480      	push	{r7}
 8063e3e:	b083      	sub	sp, #12
 8063e40:	af00      	add	r7, sp, #0
 8063e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8063e44:	bf00      	nop
 8063e46:	370c      	adds	r7, #12
 8063e48:	46bd      	mov	sp, r7
 8063e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063e4e:	4770      	bx	lr

08063e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8063e50:	b480      	push	{r7}
 8063e52:	b083      	sub	sp, #12
 8063e54:	af00      	add	r7, sp, #0
 8063e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8063e58:	bf00      	nop
 8063e5a:	370c      	adds	r7, #12
 8063e5c:	46bd      	mov	sp, r7
 8063e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063e62:	4770      	bx	lr

08063e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8063e64:	b480      	push	{r7}
 8063e66:	b083      	sub	sp, #12
 8063e68:	af00      	add	r7, sp, #0
 8063e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8063e6c:	bf00      	nop
 8063e6e:	370c      	adds	r7, #12
 8063e70:	46bd      	mov	sp, r7
 8063e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063e76:	4770      	bx	lr

08063e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8063e78:	b480      	push	{r7}
 8063e7a:	b085      	sub	sp, #20
 8063e7c:	af00      	add	r7, sp, #0
 8063e7e:	6078      	str	r0, [r7, #4]
 8063e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8063e82:	687b      	ldr	r3, [r7, #4]
 8063e84:	681b      	ldr	r3, [r3, #0]
 8063e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8063e88:	687b      	ldr	r3, [r7, #4]
 8063e8a:	4a34      	ldr	r2, [pc, #208]	; (8063f5c <TIM_Base_SetConfig+0xe4>)
 8063e8c:	4293      	cmp	r3, r2
 8063e8e:	d00f      	beq.n	8063eb0 <TIM_Base_SetConfig+0x38>
 8063e90:	687b      	ldr	r3, [r7, #4]
 8063e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8063e96:	d00b      	beq.n	8063eb0 <TIM_Base_SetConfig+0x38>
 8063e98:	687b      	ldr	r3, [r7, #4]
 8063e9a:	4a31      	ldr	r2, [pc, #196]	; (8063f60 <TIM_Base_SetConfig+0xe8>)
 8063e9c:	4293      	cmp	r3, r2
 8063e9e:	d007      	beq.n	8063eb0 <TIM_Base_SetConfig+0x38>
 8063ea0:	687b      	ldr	r3, [r7, #4]
 8063ea2:	4a30      	ldr	r2, [pc, #192]	; (8063f64 <TIM_Base_SetConfig+0xec>)
 8063ea4:	4293      	cmp	r3, r2
 8063ea6:	d003      	beq.n	8063eb0 <TIM_Base_SetConfig+0x38>
 8063ea8:	687b      	ldr	r3, [r7, #4]
 8063eaa:	4a2f      	ldr	r2, [pc, #188]	; (8063f68 <TIM_Base_SetConfig+0xf0>)
 8063eac:	4293      	cmp	r3, r2
 8063eae:	d108      	bne.n	8063ec2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8063eb0:	68fb      	ldr	r3, [r7, #12]
 8063eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8063eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8063eb8:	683b      	ldr	r3, [r7, #0]
 8063eba:	685b      	ldr	r3, [r3, #4]
 8063ebc:	68fa      	ldr	r2, [r7, #12]
 8063ebe:	4313      	orrs	r3, r2
 8063ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8063ec2:	687b      	ldr	r3, [r7, #4]
 8063ec4:	4a25      	ldr	r2, [pc, #148]	; (8063f5c <TIM_Base_SetConfig+0xe4>)
 8063ec6:	4293      	cmp	r3, r2
 8063ec8:	d01b      	beq.n	8063f02 <TIM_Base_SetConfig+0x8a>
 8063eca:	687b      	ldr	r3, [r7, #4]
 8063ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8063ed0:	d017      	beq.n	8063f02 <TIM_Base_SetConfig+0x8a>
 8063ed2:	687b      	ldr	r3, [r7, #4]
 8063ed4:	4a22      	ldr	r2, [pc, #136]	; (8063f60 <TIM_Base_SetConfig+0xe8>)
 8063ed6:	4293      	cmp	r3, r2
 8063ed8:	d013      	beq.n	8063f02 <TIM_Base_SetConfig+0x8a>
 8063eda:	687b      	ldr	r3, [r7, #4]
 8063edc:	4a21      	ldr	r2, [pc, #132]	; (8063f64 <TIM_Base_SetConfig+0xec>)
 8063ede:	4293      	cmp	r3, r2
 8063ee0:	d00f      	beq.n	8063f02 <TIM_Base_SetConfig+0x8a>
 8063ee2:	687b      	ldr	r3, [r7, #4]
 8063ee4:	4a20      	ldr	r2, [pc, #128]	; (8063f68 <TIM_Base_SetConfig+0xf0>)
 8063ee6:	4293      	cmp	r3, r2
 8063ee8:	d00b      	beq.n	8063f02 <TIM_Base_SetConfig+0x8a>
 8063eea:	687b      	ldr	r3, [r7, #4]
 8063eec:	4a1f      	ldr	r2, [pc, #124]	; (8063f6c <TIM_Base_SetConfig+0xf4>)
 8063eee:	4293      	cmp	r3, r2
 8063ef0:	d007      	beq.n	8063f02 <TIM_Base_SetConfig+0x8a>
 8063ef2:	687b      	ldr	r3, [r7, #4]
 8063ef4:	4a1e      	ldr	r2, [pc, #120]	; (8063f70 <TIM_Base_SetConfig+0xf8>)
 8063ef6:	4293      	cmp	r3, r2
 8063ef8:	d003      	beq.n	8063f02 <TIM_Base_SetConfig+0x8a>
 8063efa:	687b      	ldr	r3, [r7, #4]
 8063efc:	4a1d      	ldr	r2, [pc, #116]	; (8063f74 <TIM_Base_SetConfig+0xfc>)
 8063efe:	4293      	cmp	r3, r2
 8063f00:	d108      	bne.n	8063f14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8063f02:	68fb      	ldr	r3, [r7, #12]
 8063f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8063f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8063f0a:	683b      	ldr	r3, [r7, #0]
 8063f0c:	68db      	ldr	r3, [r3, #12]
 8063f0e:	68fa      	ldr	r2, [r7, #12]
 8063f10:	4313      	orrs	r3, r2
 8063f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8063f14:	68fb      	ldr	r3, [r7, #12]
 8063f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8063f1a:	683b      	ldr	r3, [r7, #0]
 8063f1c:	695b      	ldr	r3, [r3, #20]
 8063f1e:	4313      	orrs	r3, r2
 8063f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8063f22:	687b      	ldr	r3, [r7, #4]
 8063f24:	68fa      	ldr	r2, [r7, #12]
 8063f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8063f28:	683b      	ldr	r3, [r7, #0]
 8063f2a:	689a      	ldr	r2, [r3, #8]
 8063f2c:	687b      	ldr	r3, [r7, #4]
 8063f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8063f30:	683b      	ldr	r3, [r7, #0]
 8063f32:	681a      	ldr	r2, [r3, #0]
 8063f34:	687b      	ldr	r3, [r7, #4]
 8063f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8063f38:	687b      	ldr	r3, [r7, #4]
 8063f3a:	4a08      	ldr	r2, [pc, #32]	; (8063f5c <TIM_Base_SetConfig+0xe4>)
 8063f3c:	4293      	cmp	r3, r2
 8063f3e:	d103      	bne.n	8063f48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8063f40:	683b      	ldr	r3, [r7, #0]
 8063f42:	691a      	ldr	r2, [r3, #16]
 8063f44:	687b      	ldr	r3, [r7, #4]
 8063f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8063f48:	687b      	ldr	r3, [r7, #4]
 8063f4a:	2201      	movs	r2, #1
 8063f4c:	615a      	str	r2, [r3, #20]
}
 8063f4e:	bf00      	nop
 8063f50:	3714      	adds	r7, #20
 8063f52:	46bd      	mov	sp, r7
 8063f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063f58:	4770      	bx	lr
 8063f5a:	bf00      	nop
 8063f5c:	40010000 	.word	0x40010000
 8063f60:	40000400 	.word	0x40000400
 8063f64:	40000800 	.word	0x40000800
 8063f68:	40000c00 	.word	0x40000c00
 8063f6c:	40014000 	.word	0x40014000
 8063f70:	40014400 	.word	0x40014400
 8063f74:	40014800 	.word	0x40014800

08063f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8063f78:	b480      	push	{r7}
 8063f7a:	b083      	sub	sp, #12
 8063f7c:	af00      	add	r7, sp, #0
 8063f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8063f80:	bf00      	nop
 8063f82:	370c      	adds	r7, #12
 8063f84:	46bd      	mov	sp, r7
 8063f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063f8a:	4770      	bx	lr

08063f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8063f8c:	b480      	push	{r7}
 8063f8e:	b083      	sub	sp, #12
 8063f90:	af00      	add	r7, sp, #0
 8063f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8063f94:	bf00      	nop
 8063f96:	370c      	adds	r7, #12
 8063f98:	46bd      	mov	sp, r7
 8063f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063f9e:	4770      	bx	lr

08063fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8063fa0:	b580      	push	{r7, lr}
 8063fa2:	b082      	sub	sp, #8
 8063fa4:	af00      	add	r7, sp, #0
 8063fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8063fa8:	687b      	ldr	r3, [r7, #4]
 8063faa:	2b00      	cmp	r3, #0
 8063fac:	d101      	bne.n	8063fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8063fae:	2301      	movs	r3, #1
 8063fb0:	e0a0      	b.n	80640f4 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8063fb2:	687b      	ldr	r3, [r7, #4]
 8063fb4:	699b      	ldr	r3, [r3, #24]
 8063fb6:	2b00      	cmp	r3, #0
 8063fb8:	d02c      	beq.n	8064014 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8063fba:	687b      	ldr	r3, [r7, #4]
 8063fbc:	681b      	ldr	r3, [r3, #0]
 8063fbe:	4a4f      	ldr	r2, [pc, #316]	; (80640fc <HAL_UART_Init+0x15c>)
 8063fc0:	4293      	cmp	r3, r2
 8063fc2:	d00e      	beq.n	8063fe2 <HAL_UART_Init+0x42>
 8063fc4:	687b      	ldr	r3, [r7, #4]
 8063fc6:	681b      	ldr	r3, [r3, #0]
 8063fc8:	4a4d      	ldr	r2, [pc, #308]	; (8064100 <HAL_UART_Init+0x160>)
 8063fca:	4293      	cmp	r3, r2
 8063fcc:	d009      	beq.n	8063fe2 <HAL_UART_Init+0x42>
 8063fce:	687b      	ldr	r3, [r7, #4]
 8063fd0:	681b      	ldr	r3, [r3, #0]
 8063fd2:	4a4c      	ldr	r2, [pc, #304]	; (8064104 <HAL_UART_Init+0x164>)
 8063fd4:	4293      	cmp	r3, r2
 8063fd6:	d004      	beq.n	8063fe2 <HAL_UART_Init+0x42>
 8063fd8:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8063fdc:	484a      	ldr	r0, [pc, #296]	; (8064108 <HAL_UART_Init+0x168>)
 8063fde:	f7fd f9c0 	bl	8061362 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8063fe2:	687b      	ldr	r3, [r7, #4]
 8063fe4:	699b      	ldr	r3, [r3, #24]
 8063fe6:	2b00      	cmp	r3, #0
 8063fe8:	d028      	beq.n	806403c <HAL_UART_Init+0x9c>
 8063fea:	687b      	ldr	r3, [r7, #4]
 8063fec:	699b      	ldr	r3, [r3, #24]
 8063fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8063ff2:	d023      	beq.n	806403c <HAL_UART_Init+0x9c>
 8063ff4:	687b      	ldr	r3, [r7, #4]
 8063ff6:	699b      	ldr	r3, [r3, #24]
 8063ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8063ffc:	d01e      	beq.n	806403c <HAL_UART_Init+0x9c>
 8063ffe:	687b      	ldr	r3, [r7, #4]
 8064000:	699b      	ldr	r3, [r3, #24]
 8064002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8064006:	d019      	beq.n	806403c <HAL_UART_Init+0x9c>
 8064008:	f240 1173 	movw	r1, #371	; 0x173
 806400c:	483e      	ldr	r0, [pc, #248]	; (8064108 <HAL_UART_Init+0x168>)
 806400e:	f7fd f9a8 	bl	8061362 <assert_failed>
 8064012:	e013      	b.n	806403c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8064014:	687b      	ldr	r3, [r7, #4]
 8064016:	681b      	ldr	r3, [r3, #0]
 8064018:	4a38      	ldr	r2, [pc, #224]	; (80640fc <HAL_UART_Init+0x15c>)
 806401a:	4293      	cmp	r3, r2
 806401c:	d00e      	beq.n	806403c <HAL_UART_Init+0x9c>
 806401e:	687b      	ldr	r3, [r7, #4]
 8064020:	681b      	ldr	r3, [r3, #0]
 8064022:	4a37      	ldr	r2, [pc, #220]	; (8064100 <HAL_UART_Init+0x160>)
 8064024:	4293      	cmp	r3, r2
 8064026:	d009      	beq.n	806403c <HAL_UART_Init+0x9c>
 8064028:	687b      	ldr	r3, [r7, #4]
 806402a:	681b      	ldr	r3, [r3, #0]
 806402c:	4a35      	ldr	r2, [pc, #212]	; (8064104 <HAL_UART_Init+0x164>)
 806402e:	4293      	cmp	r3, r2
 8064030:	d004      	beq.n	806403c <HAL_UART_Init+0x9c>
 8064032:	f240 1177 	movw	r1, #375	; 0x177
 8064036:	4834      	ldr	r0, [pc, #208]	; (8064108 <HAL_UART_Init+0x168>)
 8064038:	f7fd f993 	bl	8061362 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 806403c:	687b      	ldr	r3, [r7, #4]
 806403e:	689b      	ldr	r3, [r3, #8]
 8064040:	2b00      	cmp	r3, #0
 8064042:	d009      	beq.n	8064058 <HAL_UART_Init+0xb8>
 8064044:	687b      	ldr	r3, [r7, #4]
 8064046:	689b      	ldr	r3, [r3, #8]
 8064048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806404c:	d004      	beq.n	8064058 <HAL_UART_Init+0xb8>
 806404e:	f240 1179 	movw	r1, #377	; 0x179
 8064052:	482d      	ldr	r0, [pc, #180]	; (8064108 <HAL_UART_Init+0x168>)
 8064054:	f7fd f985 	bl	8061362 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8064058:	687b      	ldr	r3, [r7, #4]
 806405a:	69db      	ldr	r3, [r3, #28]
 806405c:	2b00      	cmp	r3, #0
 806405e:	d009      	beq.n	8064074 <HAL_UART_Init+0xd4>
 8064060:	687b      	ldr	r3, [r7, #4]
 8064062:	69db      	ldr	r3, [r3, #28]
 8064064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8064068:	d004      	beq.n	8064074 <HAL_UART_Init+0xd4>
 806406a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 806406e:	4826      	ldr	r0, [pc, #152]	; (8064108 <HAL_UART_Init+0x168>)
 8064070:	f7fd f977 	bl	8061362 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8064074:	687b      	ldr	r3, [r7, #4]
 8064076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 806407a:	b2db      	uxtb	r3, r3
 806407c:	2b00      	cmp	r3, #0
 806407e:	d106      	bne.n	806408e <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8064080:	687b      	ldr	r3, [r7, #4]
 8064082:	2200      	movs	r2, #0
 8064084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8064088:	6878      	ldr	r0, [r7, #4]
 806408a:	f7fd fb19 	bl	80616c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 806408e:	687b      	ldr	r3, [r7, #4]
 8064090:	2224      	movs	r2, #36	; 0x24
 8064092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8064096:	687b      	ldr	r3, [r7, #4]
 8064098:	681b      	ldr	r3, [r3, #0]
 806409a:	68da      	ldr	r2, [r3, #12]
 806409c:	687b      	ldr	r3, [r7, #4]
 806409e:	681b      	ldr	r3, [r3, #0]
 80640a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80640a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80640a6:	6878      	ldr	r0, [r7, #4]
 80640a8:	f000 fe84 	bl	8064db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80640ac:	687b      	ldr	r3, [r7, #4]
 80640ae:	681b      	ldr	r3, [r3, #0]
 80640b0:	691a      	ldr	r2, [r3, #16]
 80640b2:	687b      	ldr	r3, [r7, #4]
 80640b4:	681b      	ldr	r3, [r3, #0]
 80640b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80640ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80640bc:	687b      	ldr	r3, [r7, #4]
 80640be:	681b      	ldr	r3, [r3, #0]
 80640c0:	695a      	ldr	r2, [r3, #20]
 80640c2:	687b      	ldr	r3, [r7, #4]
 80640c4:	681b      	ldr	r3, [r3, #0]
 80640c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80640ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80640cc:	687b      	ldr	r3, [r7, #4]
 80640ce:	681b      	ldr	r3, [r3, #0]
 80640d0:	68da      	ldr	r2, [r3, #12]
 80640d2:	687b      	ldr	r3, [r7, #4]
 80640d4:	681b      	ldr	r3, [r3, #0]
 80640d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80640da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80640dc:	687b      	ldr	r3, [r7, #4]
 80640de:	2200      	movs	r2, #0
 80640e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80640e2:	687b      	ldr	r3, [r7, #4]
 80640e4:	2220      	movs	r2, #32
 80640e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80640ea:	687b      	ldr	r3, [r7, #4]
 80640ec:	2220      	movs	r2, #32
 80640ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80640f2:	2300      	movs	r3, #0
}
 80640f4:	4618      	mov	r0, r3
 80640f6:	3708      	adds	r7, #8
 80640f8:	46bd      	mov	sp, r7
 80640fa:	bd80      	pop	{r7, pc}
 80640fc:	40011000 	.word	0x40011000
 8064100:	40004400 	.word	0x40004400
 8064104:	40011400 	.word	0x40011400
 8064108:	0806d424 	.word	0x0806d424

0806410c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 806410c:	b580      	push	{r7, lr}
 806410e:	b08a      	sub	sp, #40	; 0x28
 8064110:	af02      	add	r7, sp, #8
 8064112:	60f8      	str	r0, [r7, #12]
 8064114:	60b9      	str	r1, [r7, #8]
 8064116:	603b      	str	r3, [r7, #0]
 8064118:	4613      	mov	r3, r2
 806411a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 806411c:	2300      	movs	r3, #0
 806411e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8064120:	68fb      	ldr	r3, [r7, #12]
 8064122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8064126:	b2db      	uxtb	r3, r3
 8064128:	2b20      	cmp	r3, #32
 806412a:	d17c      	bne.n	8064226 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 806412c:	68bb      	ldr	r3, [r7, #8]
 806412e:	2b00      	cmp	r3, #0
 8064130:	d002      	beq.n	8064138 <HAL_UART_Transmit+0x2c>
 8064132:	88fb      	ldrh	r3, [r7, #6]
 8064134:	2b00      	cmp	r3, #0
 8064136:	d101      	bne.n	806413c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8064138:	2301      	movs	r3, #1
 806413a:	e075      	b.n	8064228 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 806413c:	68fb      	ldr	r3, [r7, #12]
 806413e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8064142:	2b01      	cmp	r3, #1
 8064144:	d101      	bne.n	806414a <HAL_UART_Transmit+0x3e>
 8064146:	2302      	movs	r3, #2
 8064148:	e06e      	b.n	8064228 <HAL_UART_Transmit+0x11c>
 806414a:	68fb      	ldr	r3, [r7, #12]
 806414c:	2201      	movs	r2, #1
 806414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8064152:	68fb      	ldr	r3, [r7, #12]
 8064154:	2200      	movs	r2, #0
 8064156:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8064158:	68fb      	ldr	r3, [r7, #12]
 806415a:	2221      	movs	r2, #33	; 0x21
 806415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8064160:	f7fd fb5e 	bl	8061820 <HAL_GetTick>
 8064164:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8064166:	68fb      	ldr	r3, [r7, #12]
 8064168:	88fa      	ldrh	r2, [r7, #6]
 806416a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 806416c:	68fb      	ldr	r3, [r7, #12]
 806416e:	88fa      	ldrh	r2, [r7, #6]
 8064170:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8064172:	68fb      	ldr	r3, [r7, #12]
 8064174:	689b      	ldr	r3, [r3, #8]
 8064176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806417a:	d108      	bne.n	806418e <HAL_UART_Transmit+0x82>
 806417c:	68fb      	ldr	r3, [r7, #12]
 806417e:	691b      	ldr	r3, [r3, #16]
 8064180:	2b00      	cmp	r3, #0
 8064182:	d104      	bne.n	806418e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8064184:	2300      	movs	r3, #0
 8064186:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8064188:	68bb      	ldr	r3, [r7, #8]
 806418a:	61bb      	str	r3, [r7, #24]
 806418c:	e003      	b.n	8064196 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 806418e:	68bb      	ldr	r3, [r7, #8]
 8064190:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8064192:	2300      	movs	r3, #0
 8064194:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8064196:	68fb      	ldr	r3, [r7, #12]
 8064198:	2200      	movs	r2, #0
 806419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 806419e:	e02a      	b.n	80641f6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80641a0:	683b      	ldr	r3, [r7, #0]
 80641a2:	9300      	str	r3, [sp, #0]
 80641a4:	697b      	ldr	r3, [r7, #20]
 80641a6:	2200      	movs	r2, #0
 80641a8:	2180      	movs	r1, #128	; 0x80
 80641aa:	68f8      	ldr	r0, [r7, #12]
 80641ac:	f000 fbc0 	bl	8064930 <UART_WaitOnFlagUntilTimeout>
 80641b0:	4603      	mov	r3, r0
 80641b2:	2b00      	cmp	r3, #0
 80641b4:	d001      	beq.n	80641ba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80641b6:	2303      	movs	r3, #3
 80641b8:	e036      	b.n	8064228 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80641ba:	69fb      	ldr	r3, [r7, #28]
 80641bc:	2b00      	cmp	r3, #0
 80641be:	d10b      	bne.n	80641d8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80641c0:	69bb      	ldr	r3, [r7, #24]
 80641c2:	881b      	ldrh	r3, [r3, #0]
 80641c4:	461a      	mov	r2, r3
 80641c6:	68fb      	ldr	r3, [r7, #12]
 80641c8:	681b      	ldr	r3, [r3, #0]
 80641ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80641ce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80641d0:	69bb      	ldr	r3, [r7, #24]
 80641d2:	3302      	adds	r3, #2
 80641d4:	61bb      	str	r3, [r7, #24]
 80641d6:	e007      	b.n	80641e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80641d8:	69fb      	ldr	r3, [r7, #28]
 80641da:	781a      	ldrb	r2, [r3, #0]
 80641dc:	68fb      	ldr	r3, [r7, #12]
 80641de:	681b      	ldr	r3, [r3, #0]
 80641e0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80641e2:	69fb      	ldr	r3, [r7, #28]
 80641e4:	3301      	adds	r3, #1
 80641e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80641e8:	68fb      	ldr	r3, [r7, #12]
 80641ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80641ec:	b29b      	uxth	r3, r3
 80641ee:	3b01      	subs	r3, #1
 80641f0:	b29a      	uxth	r2, r3
 80641f2:	68fb      	ldr	r3, [r7, #12]
 80641f4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80641f6:	68fb      	ldr	r3, [r7, #12]
 80641f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80641fa:	b29b      	uxth	r3, r3
 80641fc:	2b00      	cmp	r3, #0
 80641fe:	d1cf      	bne.n	80641a0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8064200:	683b      	ldr	r3, [r7, #0]
 8064202:	9300      	str	r3, [sp, #0]
 8064204:	697b      	ldr	r3, [r7, #20]
 8064206:	2200      	movs	r2, #0
 8064208:	2140      	movs	r1, #64	; 0x40
 806420a:	68f8      	ldr	r0, [r7, #12]
 806420c:	f000 fb90 	bl	8064930 <UART_WaitOnFlagUntilTimeout>
 8064210:	4603      	mov	r3, r0
 8064212:	2b00      	cmp	r3, #0
 8064214:	d001      	beq.n	806421a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8064216:	2303      	movs	r3, #3
 8064218:	e006      	b.n	8064228 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 806421a:	68fb      	ldr	r3, [r7, #12]
 806421c:	2220      	movs	r2, #32
 806421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8064222:	2300      	movs	r3, #0
 8064224:	e000      	b.n	8064228 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8064226:	2302      	movs	r3, #2
  }
}
 8064228:	4618      	mov	r0, r3
 806422a:	3720      	adds	r7, #32
 806422c:	46bd      	mov	sp, r7
 806422e:	bd80      	pop	{r7, pc}

08064230 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8064230:	b580      	push	{r7, lr}
 8064232:	b08a      	sub	sp, #40	; 0x28
 8064234:	af02      	add	r7, sp, #8
 8064236:	60f8      	str	r0, [r7, #12]
 8064238:	60b9      	str	r1, [r7, #8]
 806423a:	603b      	str	r3, [r7, #0]
 806423c:	4613      	mov	r3, r2
 806423e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8064240:	2300      	movs	r3, #0
 8064242:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8064244:	68fb      	ldr	r3, [r7, #12]
 8064246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 806424a:	b2db      	uxtb	r3, r3
 806424c:	2b20      	cmp	r3, #32
 806424e:	f040 808c 	bne.w	806436a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8064252:	68bb      	ldr	r3, [r7, #8]
 8064254:	2b00      	cmp	r3, #0
 8064256:	d002      	beq.n	806425e <HAL_UART_Receive+0x2e>
 8064258:	88fb      	ldrh	r3, [r7, #6]
 806425a:	2b00      	cmp	r3, #0
 806425c:	d101      	bne.n	8064262 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 806425e:	2301      	movs	r3, #1
 8064260:	e084      	b.n	806436c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8064262:	68fb      	ldr	r3, [r7, #12]
 8064264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8064268:	2b01      	cmp	r3, #1
 806426a:	d101      	bne.n	8064270 <HAL_UART_Receive+0x40>
 806426c:	2302      	movs	r3, #2
 806426e:	e07d      	b.n	806436c <HAL_UART_Receive+0x13c>
 8064270:	68fb      	ldr	r3, [r7, #12]
 8064272:	2201      	movs	r2, #1
 8064274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8064278:	68fb      	ldr	r3, [r7, #12]
 806427a:	2200      	movs	r2, #0
 806427c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 806427e:	68fb      	ldr	r3, [r7, #12]
 8064280:	2222      	movs	r2, #34	; 0x22
 8064282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8064286:	68fb      	ldr	r3, [r7, #12]
 8064288:	2200      	movs	r2, #0
 806428a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 806428c:	f7fd fac8 	bl	8061820 <HAL_GetTick>
 8064290:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8064292:	68fb      	ldr	r3, [r7, #12]
 8064294:	88fa      	ldrh	r2, [r7, #6]
 8064296:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8064298:	68fb      	ldr	r3, [r7, #12]
 806429a:	88fa      	ldrh	r2, [r7, #6]
 806429c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 806429e:	68fb      	ldr	r3, [r7, #12]
 80642a0:	689b      	ldr	r3, [r3, #8]
 80642a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80642a6:	d108      	bne.n	80642ba <HAL_UART_Receive+0x8a>
 80642a8:	68fb      	ldr	r3, [r7, #12]
 80642aa:	691b      	ldr	r3, [r3, #16]
 80642ac:	2b00      	cmp	r3, #0
 80642ae:	d104      	bne.n	80642ba <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80642b0:	2300      	movs	r3, #0
 80642b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80642b4:	68bb      	ldr	r3, [r7, #8]
 80642b6:	61bb      	str	r3, [r7, #24]
 80642b8:	e003      	b.n	80642c2 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80642ba:	68bb      	ldr	r3, [r7, #8]
 80642bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80642be:	2300      	movs	r3, #0
 80642c0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80642c2:	68fb      	ldr	r3, [r7, #12]
 80642c4:	2200      	movs	r2, #0
 80642c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80642ca:	e043      	b.n	8064354 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80642cc:	683b      	ldr	r3, [r7, #0]
 80642ce:	9300      	str	r3, [sp, #0]
 80642d0:	697b      	ldr	r3, [r7, #20]
 80642d2:	2200      	movs	r2, #0
 80642d4:	2120      	movs	r1, #32
 80642d6:	68f8      	ldr	r0, [r7, #12]
 80642d8:	f000 fb2a 	bl	8064930 <UART_WaitOnFlagUntilTimeout>
 80642dc:	4603      	mov	r3, r0
 80642de:	2b00      	cmp	r3, #0
 80642e0:	d001      	beq.n	80642e6 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80642e2:	2303      	movs	r3, #3
 80642e4:	e042      	b.n	806436c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80642e6:	69fb      	ldr	r3, [r7, #28]
 80642e8:	2b00      	cmp	r3, #0
 80642ea:	d10c      	bne.n	8064306 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80642ec:	68fb      	ldr	r3, [r7, #12]
 80642ee:	681b      	ldr	r3, [r3, #0]
 80642f0:	685b      	ldr	r3, [r3, #4]
 80642f2:	b29b      	uxth	r3, r3
 80642f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80642f8:	b29a      	uxth	r2, r3
 80642fa:	69bb      	ldr	r3, [r7, #24]
 80642fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80642fe:	69bb      	ldr	r3, [r7, #24]
 8064300:	3302      	adds	r3, #2
 8064302:	61bb      	str	r3, [r7, #24]
 8064304:	e01f      	b.n	8064346 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8064306:	68fb      	ldr	r3, [r7, #12]
 8064308:	689b      	ldr	r3, [r3, #8]
 806430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806430e:	d007      	beq.n	8064320 <HAL_UART_Receive+0xf0>
 8064310:	68fb      	ldr	r3, [r7, #12]
 8064312:	689b      	ldr	r3, [r3, #8]
 8064314:	2b00      	cmp	r3, #0
 8064316:	d10a      	bne.n	806432e <HAL_UART_Receive+0xfe>
 8064318:	68fb      	ldr	r3, [r7, #12]
 806431a:	691b      	ldr	r3, [r3, #16]
 806431c:	2b00      	cmp	r3, #0
 806431e:	d106      	bne.n	806432e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8064320:	68fb      	ldr	r3, [r7, #12]
 8064322:	681b      	ldr	r3, [r3, #0]
 8064324:	685b      	ldr	r3, [r3, #4]
 8064326:	b2da      	uxtb	r2, r3
 8064328:	69fb      	ldr	r3, [r7, #28]
 806432a:	701a      	strb	r2, [r3, #0]
 806432c:	e008      	b.n	8064340 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 806432e:	68fb      	ldr	r3, [r7, #12]
 8064330:	681b      	ldr	r3, [r3, #0]
 8064332:	685b      	ldr	r3, [r3, #4]
 8064334:	b2db      	uxtb	r3, r3
 8064336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806433a:	b2da      	uxtb	r2, r3
 806433c:	69fb      	ldr	r3, [r7, #28]
 806433e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8064340:	69fb      	ldr	r3, [r7, #28]
 8064342:	3301      	adds	r3, #1
 8064344:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8064346:	68fb      	ldr	r3, [r7, #12]
 8064348:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 806434a:	b29b      	uxth	r3, r3
 806434c:	3b01      	subs	r3, #1
 806434e:	b29a      	uxth	r2, r3
 8064350:	68fb      	ldr	r3, [r7, #12]
 8064352:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8064354:	68fb      	ldr	r3, [r7, #12]
 8064356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8064358:	b29b      	uxth	r3, r3
 806435a:	2b00      	cmp	r3, #0
 806435c:	d1b6      	bne.n	80642cc <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 806435e:	68fb      	ldr	r3, [r7, #12]
 8064360:	2220      	movs	r2, #32
 8064362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8064366:	2300      	movs	r3, #0
 8064368:	e000      	b.n	806436c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 806436a:	2302      	movs	r3, #2
  }
}
 806436c:	4618      	mov	r0, r3
 806436e:	3720      	adds	r7, #32
 8064370:	46bd      	mov	sp, r7
 8064372:	bd80      	pop	{r7, pc}

08064374 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8064374:	b580      	push	{r7, lr}
 8064376:	b084      	sub	sp, #16
 8064378:	af00      	add	r7, sp, #0
 806437a:	60f8      	str	r0, [r7, #12]
 806437c:	60b9      	str	r1, [r7, #8]
 806437e:	4613      	mov	r3, r2
 8064380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8064382:	68fb      	ldr	r3, [r7, #12]
 8064384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8064388:	b2db      	uxtb	r3, r3
 806438a:	2b20      	cmp	r3, #32
 806438c:	d11d      	bne.n	80643ca <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 806438e:	68bb      	ldr	r3, [r7, #8]
 8064390:	2b00      	cmp	r3, #0
 8064392:	d002      	beq.n	806439a <HAL_UART_Receive_IT+0x26>
 8064394:	88fb      	ldrh	r3, [r7, #6]
 8064396:	2b00      	cmp	r3, #0
 8064398:	d101      	bne.n	806439e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 806439a:	2301      	movs	r3, #1
 806439c:	e016      	b.n	80643cc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 806439e:	68fb      	ldr	r3, [r7, #12]
 80643a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80643a4:	2b01      	cmp	r3, #1
 80643a6:	d101      	bne.n	80643ac <HAL_UART_Receive_IT+0x38>
 80643a8:	2302      	movs	r3, #2
 80643aa:	e00f      	b.n	80643cc <HAL_UART_Receive_IT+0x58>
 80643ac:	68fb      	ldr	r3, [r7, #12]
 80643ae:	2201      	movs	r2, #1
 80643b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80643b4:	68fb      	ldr	r3, [r7, #12]
 80643b6:	2200      	movs	r2, #0
 80643b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80643ba:	88fb      	ldrh	r3, [r7, #6]
 80643bc:	461a      	mov	r2, r3
 80643be:	68b9      	ldr	r1, [r7, #8]
 80643c0:	68f8      	ldr	r0, [r7, #12]
 80643c2:	f000 fb23 	bl	8064a0c <UART_Start_Receive_IT>
 80643c6:	4603      	mov	r3, r0
 80643c8:	e000      	b.n	80643cc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80643ca:	2302      	movs	r3, #2
  }
}
 80643cc:	4618      	mov	r0, r3
 80643ce:	3710      	adds	r7, #16
 80643d0:	46bd      	mov	sp, r7
 80643d2:	bd80      	pop	{r7, pc}

080643d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80643d4:	b580      	push	{r7, lr}
 80643d6:	b0ba      	sub	sp, #232	; 0xe8
 80643d8:	af00      	add	r7, sp, #0
 80643da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80643dc:	687b      	ldr	r3, [r7, #4]
 80643de:	681b      	ldr	r3, [r3, #0]
 80643e0:	681b      	ldr	r3, [r3, #0]
 80643e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80643e6:	687b      	ldr	r3, [r7, #4]
 80643e8:	681b      	ldr	r3, [r3, #0]
 80643ea:	68db      	ldr	r3, [r3, #12]
 80643ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80643f0:	687b      	ldr	r3, [r7, #4]
 80643f2:	681b      	ldr	r3, [r3, #0]
 80643f4:	695b      	ldr	r3, [r3, #20]
 80643f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80643fa:	2300      	movs	r3, #0
 80643fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8064400:	2300      	movs	r3, #0
 8064402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8064406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 806440a:	f003 030f 	and.w	r3, r3, #15
 806440e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8064412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8064416:	2b00      	cmp	r3, #0
 8064418:	d10f      	bne.n	806443a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 806441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 806441e:	f003 0320 	and.w	r3, r3, #32
 8064422:	2b00      	cmp	r3, #0
 8064424:	d009      	beq.n	806443a <HAL_UART_IRQHandler+0x66>
 8064426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 806442a:	f003 0320 	and.w	r3, r3, #32
 806442e:	2b00      	cmp	r3, #0
 8064430:	d003      	beq.n	806443a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8064432:	6878      	ldr	r0, [r7, #4]
 8064434:	f000 fc03 	bl	8064c3e <UART_Receive_IT>
      return;
 8064438:	e256      	b.n	80648e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 806443a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 806443e:	2b00      	cmp	r3, #0
 8064440:	f000 80de 	beq.w	8064600 <HAL_UART_IRQHandler+0x22c>
 8064444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8064448:	f003 0301 	and.w	r3, r3, #1
 806444c:	2b00      	cmp	r3, #0
 806444e:	d106      	bne.n	806445e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8064450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8064454:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8064458:	2b00      	cmp	r3, #0
 806445a:	f000 80d1 	beq.w	8064600 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 806445e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8064462:	f003 0301 	and.w	r3, r3, #1
 8064466:	2b00      	cmp	r3, #0
 8064468:	d00b      	beq.n	8064482 <HAL_UART_IRQHandler+0xae>
 806446a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 806446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8064472:	2b00      	cmp	r3, #0
 8064474:	d005      	beq.n	8064482 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8064476:	687b      	ldr	r3, [r7, #4]
 8064478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806447a:	f043 0201 	orr.w	r2, r3, #1
 806447e:	687b      	ldr	r3, [r7, #4]
 8064480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8064482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8064486:	f003 0304 	and.w	r3, r3, #4
 806448a:	2b00      	cmp	r3, #0
 806448c:	d00b      	beq.n	80644a6 <HAL_UART_IRQHandler+0xd2>
 806448e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8064492:	f003 0301 	and.w	r3, r3, #1
 8064496:	2b00      	cmp	r3, #0
 8064498:	d005      	beq.n	80644a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 806449a:	687b      	ldr	r3, [r7, #4]
 806449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806449e:	f043 0202 	orr.w	r2, r3, #2
 80644a2:	687b      	ldr	r3, [r7, #4]
 80644a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80644a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80644aa:	f003 0302 	and.w	r3, r3, #2
 80644ae:	2b00      	cmp	r3, #0
 80644b0:	d00b      	beq.n	80644ca <HAL_UART_IRQHandler+0xf6>
 80644b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80644b6:	f003 0301 	and.w	r3, r3, #1
 80644ba:	2b00      	cmp	r3, #0
 80644bc:	d005      	beq.n	80644ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80644be:	687b      	ldr	r3, [r7, #4]
 80644c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80644c2:	f043 0204 	orr.w	r2, r3, #4
 80644c6:	687b      	ldr	r3, [r7, #4]
 80644c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80644ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80644ce:	f003 0308 	and.w	r3, r3, #8
 80644d2:	2b00      	cmp	r3, #0
 80644d4:	d011      	beq.n	80644fa <HAL_UART_IRQHandler+0x126>
 80644d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80644da:	f003 0320 	and.w	r3, r3, #32
 80644de:	2b00      	cmp	r3, #0
 80644e0:	d105      	bne.n	80644ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80644e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80644e6:	f003 0301 	and.w	r3, r3, #1
 80644ea:	2b00      	cmp	r3, #0
 80644ec:	d005      	beq.n	80644fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80644ee:	687b      	ldr	r3, [r7, #4]
 80644f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80644f2:	f043 0208 	orr.w	r2, r3, #8
 80644f6:	687b      	ldr	r3, [r7, #4]
 80644f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80644fa:	687b      	ldr	r3, [r7, #4]
 80644fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80644fe:	2b00      	cmp	r3, #0
 8064500:	f000 81ed 	beq.w	80648de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8064504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8064508:	f003 0320 	and.w	r3, r3, #32
 806450c:	2b00      	cmp	r3, #0
 806450e:	d008      	beq.n	8064522 <HAL_UART_IRQHandler+0x14e>
 8064510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8064514:	f003 0320 	and.w	r3, r3, #32
 8064518:	2b00      	cmp	r3, #0
 806451a:	d002      	beq.n	8064522 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 806451c:	6878      	ldr	r0, [r7, #4]
 806451e:	f000 fb8e 	bl	8064c3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8064522:	687b      	ldr	r3, [r7, #4]
 8064524:	681b      	ldr	r3, [r3, #0]
 8064526:	695b      	ldr	r3, [r3, #20]
 8064528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806452c:	2b40      	cmp	r3, #64	; 0x40
 806452e:	bf0c      	ite	eq
 8064530:	2301      	moveq	r3, #1
 8064532:	2300      	movne	r3, #0
 8064534:	b2db      	uxtb	r3, r3
 8064536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 806453a:	687b      	ldr	r3, [r7, #4]
 806453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806453e:	f003 0308 	and.w	r3, r3, #8
 8064542:	2b00      	cmp	r3, #0
 8064544:	d103      	bne.n	806454e <HAL_UART_IRQHandler+0x17a>
 8064546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 806454a:	2b00      	cmp	r3, #0
 806454c:	d04f      	beq.n	80645ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 806454e:	6878      	ldr	r0, [r7, #4]
 8064550:	f000 fa96 	bl	8064a80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8064554:	687b      	ldr	r3, [r7, #4]
 8064556:	681b      	ldr	r3, [r3, #0]
 8064558:	695b      	ldr	r3, [r3, #20]
 806455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806455e:	2b40      	cmp	r3, #64	; 0x40
 8064560:	d141      	bne.n	80645e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8064562:	687b      	ldr	r3, [r7, #4]
 8064564:	681b      	ldr	r3, [r3, #0]
 8064566:	3314      	adds	r3, #20
 8064568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806456c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8064570:	e853 3f00 	ldrex	r3, [r3]
 8064574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8064578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 806457c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8064580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8064584:	687b      	ldr	r3, [r7, #4]
 8064586:	681b      	ldr	r3, [r3, #0]
 8064588:	3314      	adds	r3, #20
 806458a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 806458e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8064592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8064596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 806459a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 806459e:	e841 2300 	strex	r3, r2, [r1]
 80645a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80645a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80645aa:	2b00      	cmp	r3, #0
 80645ac:	d1d9      	bne.n	8064562 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80645ae:	687b      	ldr	r3, [r7, #4]
 80645b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80645b2:	2b00      	cmp	r3, #0
 80645b4:	d013      	beq.n	80645de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80645b6:	687b      	ldr	r3, [r7, #4]
 80645b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80645ba:	4a7d      	ldr	r2, [pc, #500]	; (80647b0 <HAL_UART_IRQHandler+0x3dc>)
 80645bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80645be:	687b      	ldr	r3, [r7, #4]
 80645c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80645c2:	4618      	mov	r0, r3
 80645c4:	f7fd faf8 	bl	8061bb8 <HAL_DMA_Abort_IT>
 80645c8:	4603      	mov	r3, r0
 80645ca:	2b00      	cmp	r3, #0
 80645cc:	d016      	beq.n	80645fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80645ce:	687b      	ldr	r3, [r7, #4]
 80645d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80645d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80645d4:	687a      	ldr	r2, [r7, #4]
 80645d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80645d8:	4610      	mov	r0, r2
 80645da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80645dc:	e00e      	b.n	80645fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80645de:	6878      	ldr	r0, [r7, #4]
 80645e0:	f000 f990 	bl	8064904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80645e4:	e00a      	b.n	80645fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80645e6:	6878      	ldr	r0, [r7, #4]
 80645e8:	f000 f98c 	bl	8064904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80645ec:	e006      	b.n	80645fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80645ee:	6878      	ldr	r0, [r7, #4]
 80645f0:	f000 f988 	bl	8064904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80645f4:	687b      	ldr	r3, [r7, #4]
 80645f6:	2200      	movs	r2, #0
 80645f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80645fa:	e170      	b.n	80648de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80645fc:	bf00      	nop
    return;
 80645fe:	e16e      	b.n	80648de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8064600:	687b      	ldr	r3, [r7, #4]
 8064602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064604:	2b01      	cmp	r3, #1
 8064606:	f040 814a 	bne.w	806489e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 806460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 806460e:	f003 0310 	and.w	r3, r3, #16
 8064612:	2b00      	cmp	r3, #0
 8064614:	f000 8143 	beq.w	806489e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8064618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 806461c:	f003 0310 	and.w	r3, r3, #16
 8064620:	2b00      	cmp	r3, #0
 8064622:	f000 813c 	beq.w	806489e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8064626:	2300      	movs	r3, #0
 8064628:	60bb      	str	r3, [r7, #8]
 806462a:	687b      	ldr	r3, [r7, #4]
 806462c:	681b      	ldr	r3, [r3, #0]
 806462e:	681b      	ldr	r3, [r3, #0]
 8064630:	60bb      	str	r3, [r7, #8]
 8064632:	687b      	ldr	r3, [r7, #4]
 8064634:	681b      	ldr	r3, [r3, #0]
 8064636:	685b      	ldr	r3, [r3, #4]
 8064638:	60bb      	str	r3, [r7, #8]
 806463a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 806463c:	687b      	ldr	r3, [r7, #4]
 806463e:	681b      	ldr	r3, [r3, #0]
 8064640:	695b      	ldr	r3, [r3, #20]
 8064642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8064646:	2b40      	cmp	r3, #64	; 0x40
 8064648:	f040 80b4 	bne.w	80647b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 806464c:	687b      	ldr	r3, [r7, #4]
 806464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8064650:	681b      	ldr	r3, [r3, #0]
 8064652:	685b      	ldr	r3, [r3, #4]
 8064654:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8064658:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 806465c:	2b00      	cmp	r3, #0
 806465e:	f000 8140 	beq.w	80648e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8064662:	687b      	ldr	r3, [r7, #4]
 8064664:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8064666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 806466a:	429a      	cmp	r2, r3
 806466c:	f080 8139 	bcs.w	80648e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8064670:	687b      	ldr	r3, [r7, #4]
 8064672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8064676:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8064678:	687b      	ldr	r3, [r7, #4]
 806467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806467c:	69db      	ldr	r3, [r3, #28]
 806467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8064682:	f000 8088 	beq.w	8064796 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8064686:	687b      	ldr	r3, [r7, #4]
 8064688:	681b      	ldr	r3, [r3, #0]
 806468a:	330c      	adds	r3, #12
 806468c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8064690:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8064694:	e853 3f00 	ldrex	r3, [r3]
 8064698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 806469c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80646a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80646a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80646a8:	687b      	ldr	r3, [r7, #4]
 80646aa:	681b      	ldr	r3, [r3, #0]
 80646ac:	330c      	adds	r3, #12
 80646ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80646b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80646b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80646ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80646be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80646c2:	e841 2300 	strex	r3, r2, [r1]
 80646c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80646ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80646ce:	2b00      	cmp	r3, #0
 80646d0:	d1d9      	bne.n	8064686 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80646d2:	687b      	ldr	r3, [r7, #4]
 80646d4:	681b      	ldr	r3, [r3, #0]
 80646d6:	3314      	adds	r3, #20
 80646d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80646da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80646dc:	e853 3f00 	ldrex	r3, [r3]
 80646e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80646e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80646e4:	f023 0301 	bic.w	r3, r3, #1
 80646e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80646ec:	687b      	ldr	r3, [r7, #4]
 80646ee:	681b      	ldr	r3, [r3, #0]
 80646f0:	3314      	adds	r3, #20
 80646f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80646f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80646fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80646fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80646fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8064702:	e841 2300 	strex	r3, r2, [r1]
 8064706:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8064708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 806470a:	2b00      	cmp	r3, #0
 806470c:	d1e1      	bne.n	80646d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 806470e:	687b      	ldr	r3, [r7, #4]
 8064710:	681b      	ldr	r3, [r3, #0]
 8064712:	3314      	adds	r3, #20
 8064714:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8064716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8064718:	e853 3f00 	ldrex	r3, [r3]
 806471c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 806471e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8064720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8064724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8064728:	687b      	ldr	r3, [r7, #4]
 806472a:	681b      	ldr	r3, [r3, #0]
 806472c:	3314      	adds	r3, #20
 806472e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8064732:	66fa      	str	r2, [r7, #108]	; 0x6c
 8064734:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8064736:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8064738:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 806473a:	e841 2300 	strex	r3, r2, [r1]
 806473e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8064740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8064742:	2b00      	cmp	r3, #0
 8064744:	d1e3      	bne.n	806470e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8064746:	687b      	ldr	r3, [r7, #4]
 8064748:	2220      	movs	r2, #32
 806474a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806474e:	687b      	ldr	r3, [r7, #4]
 8064750:	2200      	movs	r2, #0
 8064752:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8064754:	687b      	ldr	r3, [r7, #4]
 8064756:	681b      	ldr	r3, [r3, #0]
 8064758:	330c      	adds	r3, #12
 806475a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806475c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806475e:	e853 3f00 	ldrex	r3, [r3]
 8064762:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8064764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8064766:	f023 0310 	bic.w	r3, r3, #16
 806476a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 806476e:	687b      	ldr	r3, [r7, #4]
 8064770:	681b      	ldr	r3, [r3, #0]
 8064772:	330c      	adds	r3, #12
 8064774:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8064778:	65ba      	str	r2, [r7, #88]	; 0x58
 806477a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806477c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 806477e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8064780:	e841 2300 	strex	r3, r2, [r1]
 8064784:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8064786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8064788:	2b00      	cmp	r3, #0
 806478a:	d1e3      	bne.n	8064754 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 806478c:	687b      	ldr	r3, [r7, #4]
 806478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8064790:	4618      	mov	r0, r3
 8064792:	f7fd f9a1 	bl	8061ad8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8064796:	687b      	ldr	r3, [r7, #4]
 8064798:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 806479a:	687b      	ldr	r3, [r7, #4]
 806479c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 806479e:	b29b      	uxth	r3, r3
 80647a0:	1ad3      	subs	r3, r2, r3
 80647a2:	b29b      	uxth	r3, r3
 80647a4:	4619      	mov	r1, r3
 80647a6:	6878      	ldr	r0, [r7, #4]
 80647a8:	f000 f8b6 	bl	8064918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80647ac:	e099      	b.n	80648e2 <HAL_UART_IRQHandler+0x50e>
 80647ae:	bf00      	nop
 80647b0:	08064b47 	.word	0x08064b47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80647b4:	687b      	ldr	r3, [r7, #4]
 80647b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80647b8:	687b      	ldr	r3, [r7, #4]
 80647ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80647bc:	b29b      	uxth	r3, r3
 80647be:	1ad3      	subs	r3, r2, r3
 80647c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80647c4:	687b      	ldr	r3, [r7, #4]
 80647c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80647c8:	b29b      	uxth	r3, r3
 80647ca:	2b00      	cmp	r3, #0
 80647cc:	f000 808b 	beq.w	80648e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80647d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80647d4:	2b00      	cmp	r3, #0
 80647d6:	f000 8086 	beq.w	80648e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80647da:	687b      	ldr	r3, [r7, #4]
 80647dc:	681b      	ldr	r3, [r3, #0]
 80647de:	330c      	adds	r3, #12
 80647e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80647e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80647e4:	e853 3f00 	ldrex	r3, [r3]
 80647e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80647ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80647ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80647f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80647f4:	687b      	ldr	r3, [r7, #4]
 80647f6:	681b      	ldr	r3, [r3, #0]
 80647f8:	330c      	adds	r3, #12
 80647fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80647fe:	647a      	str	r2, [r7, #68]	; 0x44
 8064800:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8064802:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8064804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8064806:	e841 2300 	strex	r3, r2, [r1]
 806480a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 806480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806480e:	2b00      	cmp	r3, #0
 8064810:	d1e3      	bne.n	80647da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8064812:	687b      	ldr	r3, [r7, #4]
 8064814:	681b      	ldr	r3, [r3, #0]
 8064816:	3314      	adds	r3, #20
 8064818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806481c:	e853 3f00 	ldrex	r3, [r3]
 8064820:	623b      	str	r3, [r7, #32]
   return(result);
 8064822:	6a3b      	ldr	r3, [r7, #32]
 8064824:	f023 0301 	bic.w	r3, r3, #1
 8064828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 806482c:	687b      	ldr	r3, [r7, #4]
 806482e:	681b      	ldr	r3, [r3, #0]
 8064830:	3314      	adds	r3, #20
 8064832:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8064836:	633a      	str	r2, [r7, #48]	; 0x30
 8064838:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806483a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 806483c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806483e:	e841 2300 	strex	r3, r2, [r1]
 8064842:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8064844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8064846:	2b00      	cmp	r3, #0
 8064848:	d1e3      	bne.n	8064812 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 806484a:	687b      	ldr	r3, [r7, #4]
 806484c:	2220      	movs	r2, #32
 806484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8064852:	687b      	ldr	r3, [r7, #4]
 8064854:	2200      	movs	r2, #0
 8064856:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8064858:	687b      	ldr	r3, [r7, #4]
 806485a:	681b      	ldr	r3, [r3, #0]
 806485c:	330c      	adds	r3, #12
 806485e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8064860:	693b      	ldr	r3, [r7, #16]
 8064862:	e853 3f00 	ldrex	r3, [r3]
 8064866:	60fb      	str	r3, [r7, #12]
   return(result);
 8064868:	68fb      	ldr	r3, [r7, #12]
 806486a:	f023 0310 	bic.w	r3, r3, #16
 806486e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8064872:	687b      	ldr	r3, [r7, #4]
 8064874:	681b      	ldr	r3, [r3, #0]
 8064876:	330c      	adds	r3, #12
 8064878:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 806487c:	61fa      	str	r2, [r7, #28]
 806487e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8064880:	69b9      	ldr	r1, [r7, #24]
 8064882:	69fa      	ldr	r2, [r7, #28]
 8064884:	e841 2300 	strex	r3, r2, [r1]
 8064888:	617b      	str	r3, [r7, #20]
   return(result);
 806488a:	697b      	ldr	r3, [r7, #20]
 806488c:	2b00      	cmp	r3, #0
 806488e:	d1e3      	bne.n	8064858 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8064890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8064894:	4619      	mov	r1, r3
 8064896:	6878      	ldr	r0, [r7, #4]
 8064898:	f000 f83e 	bl	8064918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 806489c:	e023      	b.n	80648e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 806489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80648a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80648a6:	2b00      	cmp	r3, #0
 80648a8:	d009      	beq.n	80648be <HAL_UART_IRQHandler+0x4ea>
 80648aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80648ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80648b2:	2b00      	cmp	r3, #0
 80648b4:	d003      	beq.n	80648be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80648b6:	6878      	ldr	r0, [r7, #4]
 80648b8:	f000 f959 	bl	8064b6e <UART_Transmit_IT>
    return;
 80648bc:	e014      	b.n	80648e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80648be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80648c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80648c6:	2b00      	cmp	r3, #0
 80648c8:	d00e      	beq.n	80648e8 <HAL_UART_IRQHandler+0x514>
 80648ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80648ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80648d2:	2b00      	cmp	r3, #0
 80648d4:	d008      	beq.n	80648e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80648d6:	6878      	ldr	r0, [r7, #4]
 80648d8:	f000 f999 	bl	8064c0e <UART_EndTransmit_IT>
    return;
 80648dc:	e004      	b.n	80648e8 <HAL_UART_IRQHandler+0x514>
    return;
 80648de:	bf00      	nop
 80648e0:	e002      	b.n	80648e8 <HAL_UART_IRQHandler+0x514>
      return;
 80648e2:	bf00      	nop
 80648e4:	e000      	b.n	80648e8 <HAL_UART_IRQHandler+0x514>
      return;
 80648e6:	bf00      	nop
  }
}
 80648e8:	37e8      	adds	r7, #232	; 0xe8
 80648ea:	46bd      	mov	sp, r7
 80648ec:	bd80      	pop	{r7, pc}
 80648ee:	bf00      	nop

080648f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80648f0:	b480      	push	{r7}
 80648f2:	b083      	sub	sp, #12
 80648f4:	af00      	add	r7, sp, #0
 80648f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80648f8:	bf00      	nop
 80648fa:	370c      	adds	r7, #12
 80648fc:	46bd      	mov	sp, r7
 80648fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064902:	4770      	bx	lr

08064904 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8064904:	b480      	push	{r7}
 8064906:	b083      	sub	sp, #12
 8064908:	af00      	add	r7, sp, #0
 806490a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 806490c:	bf00      	nop
 806490e:	370c      	adds	r7, #12
 8064910:	46bd      	mov	sp, r7
 8064912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064916:	4770      	bx	lr

08064918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8064918:	b480      	push	{r7}
 806491a:	b083      	sub	sp, #12
 806491c:	af00      	add	r7, sp, #0
 806491e:	6078      	str	r0, [r7, #4]
 8064920:	460b      	mov	r3, r1
 8064922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8064924:	bf00      	nop
 8064926:	370c      	adds	r7, #12
 8064928:	46bd      	mov	sp, r7
 806492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806492e:	4770      	bx	lr

08064930 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8064930:	b580      	push	{r7, lr}
 8064932:	b090      	sub	sp, #64	; 0x40
 8064934:	af00      	add	r7, sp, #0
 8064936:	60f8      	str	r0, [r7, #12]
 8064938:	60b9      	str	r1, [r7, #8]
 806493a:	603b      	str	r3, [r7, #0]
 806493c:	4613      	mov	r3, r2
 806493e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8064940:	e050      	b.n	80649e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8064942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8064944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8064948:	d04c      	beq.n	80649e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 806494a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806494c:	2b00      	cmp	r3, #0
 806494e:	d007      	beq.n	8064960 <UART_WaitOnFlagUntilTimeout+0x30>
 8064950:	f7fc ff66 	bl	8061820 <HAL_GetTick>
 8064954:	4602      	mov	r2, r0
 8064956:	683b      	ldr	r3, [r7, #0]
 8064958:	1ad3      	subs	r3, r2, r3
 806495a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 806495c:	429a      	cmp	r2, r3
 806495e:	d241      	bcs.n	80649e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8064960:	68fb      	ldr	r3, [r7, #12]
 8064962:	681b      	ldr	r3, [r3, #0]
 8064964:	330c      	adds	r3, #12
 8064966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8064968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806496a:	e853 3f00 	ldrex	r3, [r3]
 806496e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8064970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8064972:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8064976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8064978:	68fb      	ldr	r3, [r7, #12]
 806497a:	681b      	ldr	r3, [r3, #0]
 806497c:	330c      	adds	r3, #12
 806497e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8064980:	637a      	str	r2, [r7, #52]	; 0x34
 8064982:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8064984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8064986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8064988:	e841 2300 	strex	r3, r2, [r1]
 806498c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 806498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8064990:	2b00      	cmp	r3, #0
 8064992:	d1e5      	bne.n	8064960 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8064994:	68fb      	ldr	r3, [r7, #12]
 8064996:	681b      	ldr	r3, [r3, #0]
 8064998:	3314      	adds	r3, #20
 806499a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806499c:	697b      	ldr	r3, [r7, #20]
 806499e:	e853 3f00 	ldrex	r3, [r3]
 80649a2:	613b      	str	r3, [r7, #16]
   return(result);
 80649a4:	693b      	ldr	r3, [r7, #16]
 80649a6:	f023 0301 	bic.w	r3, r3, #1
 80649aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80649ac:	68fb      	ldr	r3, [r7, #12]
 80649ae:	681b      	ldr	r3, [r3, #0]
 80649b0:	3314      	adds	r3, #20
 80649b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80649b4:	623a      	str	r2, [r7, #32]
 80649b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80649b8:	69f9      	ldr	r1, [r7, #28]
 80649ba:	6a3a      	ldr	r2, [r7, #32]
 80649bc:	e841 2300 	strex	r3, r2, [r1]
 80649c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80649c2:	69bb      	ldr	r3, [r7, #24]
 80649c4:	2b00      	cmp	r3, #0
 80649c6:	d1e5      	bne.n	8064994 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80649c8:	68fb      	ldr	r3, [r7, #12]
 80649ca:	2220      	movs	r2, #32
 80649cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80649d0:	68fb      	ldr	r3, [r7, #12]
 80649d2:	2220      	movs	r2, #32
 80649d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80649d8:	68fb      	ldr	r3, [r7, #12]
 80649da:	2200      	movs	r2, #0
 80649dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80649e0:	2303      	movs	r3, #3
 80649e2:	e00f      	b.n	8064a04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80649e4:	68fb      	ldr	r3, [r7, #12]
 80649e6:	681b      	ldr	r3, [r3, #0]
 80649e8:	681a      	ldr	r2, [r3, #0]
 80649ea:	68bb      	ldr	r3, [r7, #8]
 80649ec:	4013      	ands	r3, r2
 80649ee:	68ba      	ldr	r2, [r7, #8]
 80649f0:	429a      	cmp	r2, r3
 80649f2:	bf0c      	ite	eq
 80649f4:	2301      	moveq	r3, #1
 80649f6:	2300      	movne	r3, #0
 80649f8:	b2db      	uxtb	r3, r3
 80649fa:	461a      	mov	r2, r3
 80649fc:	79fb      	ldrb	r3, [r7, #7]
 80649fe:	429a      	cmp	r2, r3
 8064a00:	d09f      	beq.n	8064942 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8064a02:	2300      	movs	r3, #0
}
 8064a04:	4618      	mov	r0, r3
 8064a06:	3740      	adds	r7, #64	; 0x40
 8064a08:	46bd      	mov	sp, r7
 8064a0a:	bd80      	pop	{r7, pc}

08064a0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8064a0c:	b480      	push	{r7}
 8064a0e:	b085      	sub	sp, #20
 8064a10:	af00      	add	r7, sp, #0
 8064a12:	60f8      	str	r0, [r7, #12]
 8064a14:	60b9      	str	r1, [r7, #8]
 8064a16:	4613      	mov	r3, r2
 8064a18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8064a1a:	68fb      	ldr	r3, [r7, #12]
 8064a1c:	68ba      	ldr	r2, [r7, #8]
 8064a1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8064a20:	68fb      	ldr	r3, [r7, #12]
 8064a22:	88fa      	ldrh	r2, [r7, #6]
 8064a24:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8064a26:	68fb      	ldr	r3, [r7, #12]
 8064a28:	88fa      	ldrh	r2, [r7, #6]
 8064a2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8064a2c:	68fb      	ldr	r3, [r7, #12]
 8064a2e:	2200      	movs	r2, #0
 8064a30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8064a32:	68fb      	ldr	r3, [r7, #12]
 8064a34:	2222      	movs	r2, #34	; 0x22
 8064a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8064a3a:	68fb      	ldr	r3, [r7, #12]
 8064a3c:	2200      	movs	r2, #0
 8064a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8064a42:	68fb      	ldr	r3, [r7, #12]
 8064a44:	681b      	ldr	r3, [r3, #0]
 8064a46:	68da      	ldr	r2, [r3, #12]
 8064a48:	68fb      	ldr	r3, [r7, #12]
 8064a4a:	681b      	ldr	r3, [r3, #0]
 8064a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8064a50:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8064a52:	68fb      	ldr	r3, [r7, #12]
 8064a54:	681b      	ldr	r3, [r3, #0]
 8064a56:	695a      	ldr	r2, [r3, #20]
 8064a58:	68fb      	ldr	r3, [r7, #12]
 8064a5a:	681b      	ldr	r3, [r3, #0]
 8064a5c:	f042 0201 	orr.w	r2, r2, #1
 8064a60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8064a62:	68fb      	ldr	r3, [r7, #12]
 8064a64:	681b      	ldr	r3, [r3, #0]
 8064a66:	68da      	ldr	r2, [r3, #12]
 8064a68:	68fb      	ldr	r3, [r7, #12]
 8064a6a:	681b      	ldr	r3, [r3, #0]
 8064a6c:	f042 0220 	orr.w	r2, r2, #32
 8064a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8064a72:	2300      	movs	r3, #0
}
 8064a74:	4618      	mov	r0, r3
 8064a76:	3714      	adds	r7, #20
 8064a78:	46bd      	mov	sp, r7
 8064a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064a7e:	4770      	bx	lr

08064a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8064a80:	b480      	push	{r7}
 8064a82:	b095      	sub	sp, #84	; 0x54
 8064a84:	af00      	add	r7, sp, #0
 8064a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8064a88:	687b      	ldr	r3, [r7, #4]
 8064a8a:	681b      	ldr	r3, [r3, #0]
 8064a8c:	330c      	adds	r3, #12
 8064a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8064a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8064a92:	e853 3f00 	ldrex	r3, [r3]
 8064a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8064a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8064a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8064a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8064aa0:	687b      	ldr	r3, [r7, #4]
 8064aa2:	681b      	ldr	r3, [r3, #0]
 8064aa4:	330c      	adds	r3, #12
 8064aa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8064aa8:	643a      	str	r2, [r7, #64]	; 0x40
 8064aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8064aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8064aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8064ab0:	e841 2300 	strex	r3, r2, [r1]
 8064ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8064ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8064ab8:	2b00      	cmp	r3, #0
 8064aba:	d1e5      	bne.n	8064a88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8064abc:	687b      	ldr	r3, [r7, #4]
 8064abe:	681b      	ldr	r3, [r3, #0]
 8064ac0:	3314      	adds	r3, #20
 8064ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8064ac4:	6a3b      	ldr	r3, [r7, #32]
 8064ac6:	e853 3f00 	ldrex	r3, [r3]
 8064aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8064acc:	69fb      	ldr	r3, [r7, #28]
 8064ace:	f023 0301 	bic.w	r3, r3, #1
 8064ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8064ad4:	687b      	ldr	r3, [r7, #4]
 8064ad6:	681b      	ldr	r3, [r3, #0]
 8064ad8:	3314      	adds	r3, #20
 8064ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8064adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8064ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8064ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8064ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8064ae4:	e841 2300 	strex	r3, r2, [r1]
 8064ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8064aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8064aec:	2b00      	cmp	r3, #0
 8064aee:	d1e5      	bne.n	8064abc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8064af0:	687b      	ldr	r3, [r7, #4]
 8064af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064af4:	2b01      	cmp	r3, #1
 8064af6:	d119      	bne.n	8064b2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8064af8:	687b      	ldr	r3, [r7, #4]
 8064afa:	681b      	ldr	r3, [r3, #0]
 8064afc:	330c      	adds	r3, #12
 8064afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8064b00:	68fb      	ldr	r3, [r7, #12]
 8064b02:	e853 3f00 	ldrex	r3, [r3]
 8064b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8064b08:	68bb      	ldr	r3, [r7, #8]
 8064b0a:	f023 0310 	bic.w	r3, r3, #16
 8064b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8064b10:	687b      	ldr	r3, [r7, #4]
 8064b12:	681b      	ldr	r3, [r3, #0]
 8064b14:	330c      	adds	r3, #12
 8064b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8064b18:	61ba      	str	r2, [r7, #24]
 8064b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8064b1c:	6979      	ldr	r1, [r7, #20]
 8064b1e:	69ba      	ldr	r2, [r7, #24]
 8064b20:	e841 2300 	strex	r3, r2, [r1]
 8064b24:	613b      	str	r3, [r7, #16]
   return(result);
 8064b26:	693b      	ldr	r3, [r7, #16]
 8064b28:	2b00      	cmp	r3, #0
 8064b2a:	d1e5      	bne.n	8064af8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8064b2c:	687b      	ldr	r3, [r7, #4]
 8064b2e:	2220      	movs	r2, #32
 8064b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8064b34:	687b      	ldr	r3, [r7, #4]
 8064b36:	2200      	movs	r2, #0
 8064b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8064b3a:	bf00      	nop
 8064b3c:	3754      	adds	r7, #84	; 0x54
 8064b3e:	46bd      	mov	sp, r7
 8064b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064b44:	4770      	bx	lr

08064b46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8064b46:	b580      	push	{r7, lr}
 8064b48:	b084      	sub	sp, #16
 8064b4a:	af00      	add	r7, sp, #0
 8064b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8064b4e:	687b      	ldr	r3, [r7, #4]
 8064b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8064b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8064b54:	68fb      	ldr	r3, [r7, #12]
 8064b56:	2200      	movs	r2, #0
 8064b58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8064b5a:	68fb      	ldr	r3, [r7, #12]
 8064b5c:	2200      	movs	r2, #0
 8064b5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8064b60:	68f8      	ldr	r0, [r7, #12]
 8064b62:	f7ff fecf 	bl	8064904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8064b66:	bf00      	nop
 8064b68:	3710      	adds	r7, #16
 8064b6a:	46bd      	mov	sp, r7
 8064b6c:	bd80      	pop	{r7, pc}

08064b6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8064b6e:	b480      	push	{r7}
 8064b70:	b085      	sub	sp, #20
 8064b72:	af00      	add	r7, sp, #0
 8064b74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8064b76:	687b      	ldr	r3, [r7, #4]
 8064b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8064b7c:	b2db      	uxtb	r3, r3
 8064b7e:	2b21      	cmp	r3, #33	; 0x21
 8064b80:	d13e      	bne.n	8064c00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8064b82:	687b      	ldr	r3, [r7, #4]
 8064b84:	689b      	ldr	r3, [r3, #8]
 8064b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8064b8a:	d114      	bne.n	8064bb6 <UART_Transmit_IT+0x48>
 8064b8c:	687b      	ldr	r3, [r7, #4]
 8064b8e:	691b      	ldr	r3, [r3, #16]
 8064b90:	2b00      	cmp	r3, #0
 8064b92:	d110      	bne.n	8064bb6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8064b94:	687b      	ldr	r3, [r7, #4]
 8064b96:	6a1b      	ldr	r3, [r3, #32]
 8064b98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8064b9a:	68fb      	ldr	r3, [r7, #12]
 8064b9c:	881b      	ldrh	r3, [r3, #0]
 8064b9e:	461a      	mov	r2, r3
 8064ba0:	687b      	ldr	r3, [r7, #4]
 8064ba2:	681b      	ldr	r3, [r3, #0]
 8064ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8064ba8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8064baa:	687b      	ldr	r3, [r7, #4]
 8064bac:	6a1b      	ldr	r3, [r3, #32]
 8064bae:	1c9a      	adds	r2, r3, #2
 8064bb0:	687b      	ldr	r3, [r7, #4]
 8064bb2:	621a      	str	r2, [r3, #32]
 8064bb4:	e008      	b.n	8064bc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8064bb6:	687b      	ldr	r3, [r7, #4]
 8064bb8:	6a1b      	ldr	r3, [r3, #32]
 8064bba:	1c59      	adds	r1, r3, #1
 8064bbc:	687a      	ldr	r2, [r7, #4]
 8064bbe:	6211      	str	r1, [r2, #32]
 8064bc0:	781a      	ldrb	r2, [r3, #0]
 8064bc2:	687b      	ldr	r3, [r7, #4]
 8064bc4:	681b      	ldr	r3, [r3, #0]
 8064bc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8064bc8:	687b      	ldr	r3, [r7, #4]
 8064bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8064bcc:	b29b      	uxth	r3, r3
 8064bce:	3b01      	subs	r3, #1
 8064bd0:	b29b      	uxth	r3, r3
 8064bd2:	687a      	ldr	r2, [r7, #4]
 8064bd4:	4619      	mov	r1, r3
 8064bd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8064bd8:	2b00      	cmp	r3, #0
 8064bda:	d10f      	bne.n	8064bfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8064bdc:	687b      	ldr	r3, [r7, #4]
 8064bde:	681b      	ldr	r3, [r3, #0]
 8064be0:	68da      	ldr	r2, [r3, #12]
 8064be2:	687b      	ldr	r3, [r7, #4]
 8064be4:	681b      	ldr	r3, [r3, #0]
 8064be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8064bea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8064bec:	687b      	ldr	r3, [r7, #4]
 8064bee:	681b      	ldr	r3, [r3, #0]
 8064bf0:	68da      	ldr	r2, [r3, #12]
 8064bf2:	687b      	ldr	r3, [r7, #4]
 8064bf4:	681b      	ldr	r3, [r3, #0]
 8064bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8064bfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8064bfc:	2300      	movs	r3, #0
 8064bfe:	e000      	b.n	8064c02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8064c00:	2302      	movs	r3, #2
  }
}
 8064c02:	4618      	mov	r0, r3
 8064c04:	3714      	adds	r7, #20
 8064c06:	46bd      	mov	sp, r7
 8064c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064c0c:	4770      	bx	lr

08064c0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8064c0e:	b580      	push	{r7, lr}
 8064c10:	b082      	sub	sp, #8
 8064c12:	af00      	add	r7, sp, #0
 8064c14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8064c16:	687b      	ldr	r3, [r7, #4]
 8064c18:	681b      	ldr	r3, [r3, #0]
 8064c1a:	68da      	ldr	r2, [r3, #12]
 8064c1c:	687b      	ldr	r3, [r7, #4]
 8064c1e:	681b      	ldr	r3, [r3, #0]
 8064c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8064c24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8064c26:	687b      	ldr	r3, [r7, #4]
 8064c28:	2220      	movs	r2, #32
 8064c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8064c2e:	6878      	ldr	r0, [r7, #4]
 8064c30:	f7ff fe5e 	bl	80648f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8064c34:	2300      	movs	r3, #0
}
 8064c36:	4618      	mov	r0, r3
 8064c38:	3708      	adds	r7, #8
 8064c3a:	46bd      	mov	sp, r7
 8064c3c:	bd80      	pop	{r7, pc}

08064c3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8064c3e:	b580      	push	{r7, lr}
 8064c40:	b08c      	sub	sp, #48	; 0x30
 8064c42:	af00      	add	r7, sp, #0
 8064c44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8064c46:	687b      	ldr	r3, [r7, #4]
 8064c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8064c4c:	b2db      	uxtb	r3, r3
 8064c4e:	2b22      	cmp	r3, #34	; 0x22
 8064c50:	f040 80ab 	bne.w	8064daa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8064c54:	687b      	ldr	r3, [r7, #4]
 8064c56:	689b      	ldr	r3, [r3, #8]
 8064c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8064c5c:	d117      	bne.n	8064c8e <UART_Receive_IT+0x50>
 8064c5e:	687b      	ldr	r3, [r7, #4]
 8064c60:	691b      	ldr	r3, [r3, #16]
 8064c62:	2b00      	cmp	r3, #0
 8064c64:	d113      	bne.n	8064c8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8064c66:	2300      	movs	r3, #0
 8064c68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8064c6a:	687b      	ldr	r3, [r7, #4]
 8064c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064c6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8064c70:	687b      	ldr	r3, [r7, #4]
 8064c72:	681b      	ldr	r3, [r3, #0]
 8064c74:	685b      	ldr	r3, [r3, #4]
 8064c76:	b29b      	uxth	r3, r3
 8064c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8064c7c:	b29a      	uxth	r2, r3
 8064c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8064c80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8064c82:	687b      	ldr	r3, [r7, #4]
 8064c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064c86:	1c9a      	adds	r2, r3, #2
 8064c88:	687b      	ldr	r3, [r7, #4]
 8064c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8064c8c:	e026      	b.n	8064cdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8064c8e:	687b      	ldr	r3, [r7, #4]
 8064c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8064c94:	2300      	movs	r3, #0
 8064c96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8064c98:	687b      	ldr	r3, [r7, #4]
 8064c9a:	689b      	ldr	r3, [r3, #8]
 8064c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8064ca0:	d007      	beq.n	8064cb2 <UART_Receive_IT+0x74>
 8064ca2:	687b      	ldr	r3, [r7, #4]
 8064ca4:	689b      	ldr	r3, [r3, #8]
 8064ca6:	2b00      	cmp	r3, #0
 8064ca8:	d10a      	bne.n	8064cc0 <UART_Receive_IT+0x82>
 8064caa:	687b      	ldr	r3, [r7, #4]
 8064cac:	691b      	ldr	r3, [r3, #16]
 8064cae:	2b00      	cmp	r3, #0
 8064cb0:	d106      	bne.n	8064cc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8064cb2:	687b      	ldr	r3, [r7, #4]
 8064cb4:	681b      	ldr	r3, [r3, #0]
 8064cb6:	685b      	ldr	r3, [r3, #4]
 8064cb8:	b2da      	uxtb	r2, r3
 8064cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8064cbc:	701a      	strb	r2, [r3, #0]
 8064cbe:	e008      	b.n	8064cd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8064cc0:	687b      	ldr	r3, [r7, #4]
 8064cc2:	681b      	ldr	r3, [r3, #0]
 8064cc4:	685b      	ldr	r3, [r3, #4]
 8064cc6:	b2db      	uxtb	r3, r3
 8064cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8064ccc:	b2da      	uxtb	r2, r3
 8064cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8064cd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8064cd2:	687b      	ldr	r3, [r7, #4]
 8064cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064cd6:	1c5a      	adds	r2, r3, #1
 8064cd8:	687b      	ldr	r3, [r7, #4]
 8064cda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8064cdc:	687b      	ldr	r3, [r7, #4]
 8064cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8064ce0:	b29b      	uxth	r3, r3
 8064ce2:	3b01      	subs	r3, #1
 8064ce4:	b29b      	uxth	r3, r3
 8064ce6:	687a      	ldr	r2, [r7, #4]
 8064ce8:	4619      	mov	r1, r3
 8064cea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8064cec:	2b00      	cmp	r3, #0
 8064cee:	d15a      	bne.n	8064da6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8064cf0:	687b      	ldr	r3, [r7, #4]
 8064cf2:	681b      	ldr	r3, [r3, #0]
 8064cf4:	68da      	ldr	r2, [r3, #12]
 8064cf6:	687b      	ldr	r3, [r7, #4]
 8064cf8:	681b      	ldr	r3, [r3, #0]
 8064cfa:	f022 0220 	bic.w	r2, r2, #32
 8064cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8064d00:	687b      	ldr	r3, [r7, #4]
 8064d02:	681b      	ldr	r3, [r3, #0]
 8064d04:	68da      	ldr	r2, [r3, #12]
 8064d06:	687b      	ldr	r3, [r7, #4]
 8064d08:	681b      	ldr	r3, [r3, #0]
 8064d0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8064d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8064d10:	687b      	ldr	r3, [r7, #4]
 8064d12:	681b      	ldr	r3, [r3, #0]
 8064d14:	695a      	ldr	r2, [r3, #20]
 8064d16:	687b      	ldr	r3, [r7, #4]
 8064d18:	681b      	ldr	r3, [r3, #0]
 8064d1a:	f022 0201 	bic.w	r2, r2, #1
 8064d1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8064d20:	687b      	ldr	r3, [r7, #4]
 8064d22:	2220      	movs	r2, #32
 8064d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8064d28:	687b      	ldr	r3, [r7, #4]
 8064d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064d2c:	2b01      	cmp	r3, #1
 8064d2e:	d135      	bne.n	8064d9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8064d30:	687b      	ldr	r3, [r7, #4]
 8064d32:	2200      	movs	r2, #0
 8064d34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8064d36:	687b      	ldr	r3, [r7, #4]
 8064d38:	681b      	ldr	r3, [r3, #0]
 8064d3a:	330c      	adds	r3, #12
 8064d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8064d3e:	697b      	ldr	r3, [r7, #20]
 8064d40:	e853 3f00 	ldrex	r3, [r3]
 8064d44:	613b      	str	r3, [r7, #16]
   return(result);
 8064d46:	693b      	ldr	r3, [r7, #16]
 8064d48:	f023 0310 	bic.w	r3, r3, #16
 8064d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8064d4e:	687b      	ldr	r3, [r7, #4]
 8064d50:	681b      	ldr	r3, [r3, #0]
 8064d52:	330c      	adds	r3, #12
 8064d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8064d56:	623a      	str	r2, [r7, #32]
 8064d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8064d5a:	69f9      	ldr	r1, [r7, #28]
 8064d5c:	6a3a      	ldr	r2, [r7, #32]
 8064d5e:	e841 2300 	strex	r3, r2, [r1]
 8064d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8064d64:	69bb      	ldr	r3, [r7, #24]
 8064d66:	2b00      	cmp	r3, #0
 8064d68:	d1e5      	bne.n	8064d36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8064d6a:	687b      	ldr	r3, [r7, #4]
 8064d6c:	681b      	ldr	r3, [r3, #0]
 8064d6e:	681b      	ldr	r3, [r3, #0]
 8064d70:	f003 0310 	and.w	r3, r3, #16
 8064d74:	2b10      	cmp	r3, #16
 8064d76:	d10a      	bne.n	8064d8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8064d78:	2300      	movs	r3, #0
 8064d7a:	60fb      	str	r3, [r7, #12]
 8064d7c:	687b      	ldr	r3, [r7, #4]
 8064d7e:	681b      	ldr	r3, [r3, #0]
 8064d80:	681b      	ldr	r3, [r3, #0]
 8064d82:	60fb      	str	r3, [r7, #12]
 8064d84:	687b      	ldr	r3, [r7, #4]
 8064d86:	681b      	ldr	r3, [r3, #0]
 8064d88:	685b      	ldr	r3, [r3, #4]
 8064d8a:	60fb      	str	r3, [r7, #12]
 8064d8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8064d8e:	687b      	ldr	r3, [r7, #4]
 8064d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8064d92:	4619      	mov	r1, r3
 8064d94:	6878      	ldr	r0, [r7, #4]
 8064d96:	f7ff fdbf 	bl	8064918 <HAL_UARTEx_RxEventCallback>
 8064d9a:	e002      	b.n	8064da2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8064d9c:	6878      	ldr	r0, [r7, #4]
 8064d9e:	f7fb fff7 	bl	8060d90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8064da2:	2300      	movs	r3, #0
 8064da4:	e002      	b.n	8064dac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8064da6:	2300      	movs	r3, #0
 8064da8:	e000      	b.n	8064dac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8064daa:	2302      	movs	r3, #2
  }
}
 8064dac:	4618      	mov	r0, r3
 8064dae:	3730      	adds	r7, #48	; 0x30
 8064db0:	46bd      	mov	sp, r7
 8064db2:	bd80      	pop	{r7, pc}

08064db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8064db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8064db8:	b09f      	sub	sp, #124	; 0x7c
 8064dba:	af00      	add	r7, sp, #0
 8064dbc:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8064dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064dc0:	685a      	ldr	r2, [r3, #4]
 8064dc2:	4b9b      	ldr	r3, [pc, #620]	; (8065030 <UART_SetConfig+0x27c>)
 8064dc4:	429a      	cmp	r2, r3
 8064dc6:	d904      	bls.n	8064dd2 <UART_SetConfig+0x1e>
 8064dc8:	f640 6156 	movw	r1, #3670	; 0xe56
 8064dcc:	4899      	ldr	r0, [pc, #612]	; (8065034 <UART_SetConfig+0x280>)
 8064dce:	f7fc fac8 	bl	8061362 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8064dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064dd4:	68db      	ldr	r3, [r3, #12]
 8064dd6:	2b00      	cmp	r3, #0
 8064dd8:	d009      	beq.n	8064dee <UART_SetConfig+0x3a>
 8064dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064ddc:	68db      	ldr	r3, [r3, #12]
 8064dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8064de2:	d004      	beq.n	8064dee <UART_SetConfig+0x3a>
 8064de4:	f640 6157 	movw	r1, #3671	; 0xe57
 8064de8:	4892      	ldr	r0, [pc, #584]	; (8065034 <UART_SetConfig+0x280>)
 8064dea:	f7fc faba 	bl	8061362 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8064dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064df0:	691b      	ldr	r3, [r3, #16]
 8064df2:	2b00      	cmp	r3, #0
 8064df4:	d00e      	beq.n	8064e14 <UART_SetConfig+0x60>
 8064df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064df8:	691b      	ldr	r3, [r3, #16]
 8064dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8064dfe:	d009      	beq.n	8064e14 <UART_SetConfig+0x60>
 8064e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e02:	691b      	ldr	r3, [r3, #16]
 8064e04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8064e08:	d004      	beq.n	8064e14 <UART_SetConfig+0x60>
 8064e0a:	f640 6158 	movw	r1, #3672	; 0xe58
 8064e0e:	4889      	ldr	r0, [pc, #548]	; (8065034 <UART_SetConfig+0x280>)
 8064e10:	f7fc faa7 	bl	8061362 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8064e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e16:	695a      	ldr	r2, [r3, #20]
 8064e18:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8064e1c:	4013      	ands	r3, r2
 8064e1e:	2b00      	cmp	r3, #0
 8064e20:	d103      	bne.n	8064e2a <UART_SetConfig+0x76>
 8064e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e24:	695b      	ldr	r3, [r3, #20]
 8064e26:	2b00      	cmp	r3, #0
 8064e28:	d104      	bne.n	8064e34 <UART_SetConfig+0x80>
 8064e2a:	f640 6159 	movw	r1, #3673	; 0xe59
 8064e2e:	4881      	ldr	r0, [pc, #516]	; (8065034 <UART_SetConfig+0x280>)
 8064e30:	f7fc fa97 	bl	8061362 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8064e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e36:	681b      	ldr	r3, [r3, #0]
 8064e38:	691b      	ldr	r3, [r3, #16]
 8064e3a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8064e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e40:	68d9      	ldr	r1, [r3, #12]
 8064e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e44:	681a      	ldr	r2, [r3, #0]
 8064e46:	ea40 0301 	orr.w	r3, r0, r1
 8064e4a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8064e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e4e:	689a      	ldr	r2, [r3, #8]
 8064e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e52:	691b      	ldr	r3, [r3, #16]
 8064e54:	431a      	orrs	r2, r3
 8064e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e58:	695b      	ldr	r3, [r3, #20]
 8064e5a:	431a      	orrs	r2, r3
 8064e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e5e:	69db      	ldr	r3, [r3, #28]
 8064e60:	4313      	orrs	r3, r2
 8064e62:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8064e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e66:	681b      	ldr	r3, [r3, #0]
 8064e68:	68db      	ldr	r3, [r3, #12]
 8064e6a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8064e6e:	f021 010c 	bic.w	r1, r1, #12
 8064e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e74:	681a      	ldr	r2, [r3, #0]
 8064e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8064e78:	430b      	orrs	r3, r1
 8064e7a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8064e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e7e:	681b      	ldr	r3, [r3, #0]
 8064e80:	695b      	ldr	r3, [r3, #20]
 8064e82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8064e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e88:	6999      	ldr	r1, [r3, #24]
 8064e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e8c:	681a      	ldr	r2, [r3, #0]
 8064e8e:	ea40 0301 	orr.w	r3, r0, r1
 8064e92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8064e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064e96:	681a      	ldr	r2, [r3, #0]
 8064e98:	4b67      	ldr	r3, [pc, #412]	; (8065038 <UART_SetConfig+0x284>)
 8064e9a:	429a      	cmp	r2, r3
 8064e9c:	d004      	beq.n	8064ea8 <UART_SetConfig+0xf4>
 8064e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064ea0:	681a      	ldr	r2, [r3, #0]
 8064ea2:	4b66      	ldr	r3, [pc, #408]	; (806503c <UART_SetConfig+0x288>)
 8064ea4:	429a      	cmp	r2, r3
 8064ea6:	d103      	bne.n	8064eb0 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8064ea8:	f7fe f8fa 	bl	80630a0 <HAL_RCC_GetPCLK2Freq>
 8064eac:	6778      	str	r0, [r7, #116]	; 0x74
 8064eae:	e002      	b.n	8064eb6 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8064eb0:	f7fe f8e2 	bl	8063078 <HAL_RCC_GetPCLK1Freq>
 8064eb4:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8064eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064eb8:	69db      	ldr	r3, [r3, #28]
 8064eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8064ebe:	f040 80c1 	bne.w	8065044 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8064ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8064ec4:	461c      	mov	r4, r3
 8064ec6:	f04f 0500 	mov.w	r5, #0
 8064eca:	4622      	mov	r2, r4
 8064ecc:	462b      	mov	r3, r5
 8064ece:	1891      	adds	r1, r2, r2
 8064ed0:	6439      	str	r1, [r7, #64]	; 0x40
 8064ed2:	415b      	adcs	r3, r3
 8064ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8064ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8064eda:	1912      	adds	r2, r2, r4
 8064edc:	eb45 0303 	adc.w	r3, r5, r3
 8064ee0:	f04f 0000 	mov.w	r0, #0
 8064ee4:	f04f 0100 	mov.w	r1, #0
 8064ee8:	00d9      	lsls	r1, r3, #3
 8064eea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8064eee:	00d0      	lsls	r0, r2, #3
 8064ef0:	4602      	mov	r2, r0
 8064ef2:	460b      	mov	r3, r1
 8064ef4:	1911      	adds	r1, r2, r4
 8064ef6:	6639      	str	r1, [r7, #96]	; 0x60
 8064ef8:	416b      	adcs	r3, r5
 8064efa:	667b      	str	r3, [r7, #100]	; 0x64
 8064efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064efe:	685b      	ldr	r3, [r3, #4]
 8064f00:	461a      	mov	r2, r3
 8064f02:	f04f 0300 	mov.w	r3, #0
 8064f06:	1891      	adds	r1, r2, r2
 8064f08:	63b9      	str	r1, [r7, #56]	; 0x38
 8064f0a:	415b      	adcs	r3, r3
 8064f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8064f0e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8064f12:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8064f16:	f7fb f9cb 	bl	80602b0 <__aeabi_uldivmod>
 8064f1a:	4602      	mov	r2, r0
 8064f1c:	460b      	mov	r3, r1
 8064f1e:	4b48      	ldr	r3, [pc, #288]	; (8065040 <UART_SetConfig+0x28c>)
 8064f20:	fba3 2302 	umull	r2, r3, r3, r2
 8064f24:	095b      	lsrs	r3, r3, #5
 8064f26:	011e      	lsls	r6, r3, #4
 8064f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8064f2a:	461c      	mov	r4, r3
 8064f2c:	f04f 0500 	mov.w	r5, #0
 8064f30:	4622      	mov	r2, r4
 8064f32:	462b      	mov	r3, r5
 8064f34:	1891      	adds	r1, r2, r2
 8064f36:	6339      	str	r1, [r7, #48]	; 0x30
 8064f38:	415b      	adcs	r3, r3
 8064f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8064f3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8064f40:	1912      	adds	r2, r2, r4
 8064f42:	eb45 0303 	adc.w	r3, r5, r3
 8064f46:	f04f 0000 	mov.w	r0, #0
 8064f4a:	f04f 0100 	mov.w	r1, #0
 8064f4e:	00d9      	lsls	r1, r3, #3
 8064f50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8064f54:	00d0      	lsls	r0, r2, #3
 8064f56:	4602      	mov	r2, r0
 8064f58:	460b      	mov	r3, r1
 8064f5a:	1911      	adds	r1, r2, r4
 8064f5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8064f5e:	416b      	adcs	r3, r5
 8064f60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8064f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064f64:	685b      	ldr	r3, [r3, #4]
 8064f66:	461a      	mov	r2, r3
 8064f68:	f04f 0300 	mov.w	r3, #0
 8064f6c:	1891      	adds	r1, r2, r2
 8064f6e:	62b9      	str	r1, [r7, #40]	; 0x28
 8064f70:	415b      	adcs	r3, r3
 8064f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8064f74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8064f78:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8064f7c:	f7fb f998 	bl	80602b0 <__aeabi_uldivmod>
 8064f80:	4602      	mov	r2, r0
 8064f82:	460b      	mov	r3, r1
 8064f84:	4b2e      	ldr	r3, [pc, #184]	; (8065040 <UART_SetConfig+0x28c>)
 8064f86:	fba3 1302 	umull	r1, r3, r3, r2
 8064f8a:	095b      	lsrs	r3, r3, #5
 8064f8c:	2164      	movs	r1, #100	; 0x64
 8064f8e:	fb01 f303 	mul.w	r3, r1, r3
 8064f92:	1ad3      	subs	r3, r2, r3
 8064f94:	00db      	lsls	r3, r3, #3
 8064f96:	3332      	adds	r3, #50	; 0x32
 8064f98:	4a29      	ldr	r2, [pc, #164]	; (8065040 <UART_SetConfig+0x28c>)
 8064f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8064f9e:	095b      	lsrs	r3, r3, #5
 8064fa0:	005b      	lsls	r3, r3, #1
 8064fa2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8064fa6:	441e      	add	r6, r3
 8064fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8064faa:	4618      	mov	r0, r3
 8064fac:	f04f 0100 	mov.w	r1, #0
 8064fb0:	4602      	mov	r2, r0
 8064fb2:	460b      	mov	r3, r1
 8064fb4:	1894      	adds	r4, r2, r2
 8064fb6:	623c      	str	r4, [r7, #32]
 8064fb8:	415b      	adcs	r3, r3
 8064fba:	627b      	str	r3, [r7, #36]	; 0x24
 8064fbc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8064fc0:	1812      	adds	r2, r2, r0
 8064fc2:	eb41 0303 	adc.w	r3, r1, r3
 8064fc6:	f04f 0400 	mov.w	r4, #0
 8064fca:	f04f 0500 	mov.w	r5, #0
 8064fce:	00dd      	lsls	r5, r3, #3
 8064fd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8064fd4:	00d4      	lsls	r4, r2, #3
 8064fd6:	4622      	mov	r2, r4
 8064fd8:	462b      	mov	r3, r5
 8064fda:	1814      	adds	r4, r2, r0
 8064fdc:	653c      	str	r4, [r7, #80]	; 0x50
 8064fde:	414b      	adcs	r3, r1
 8064fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8064fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8064fe4:	685b      	ldr	r3, [r3, #4]
 8064fe6:	461a      	mov	r2, r3
 8064fe8:	f04f 0300 	mov.w	r3, #0
 8064fec:	1891      	adds	r1, r2, r2
 8064fee:	61b9      	str	r1, [r7, #24]
 8064ff0:	415b      	adcs	r3, r3
 8064ff2:	61fb      	str	r3, [r7, #28]
 8064ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8064ff8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8064ffc:	f7fb f958 	bl	80602b0 <__aeabi_uldivmod>
 8065000:	4602      	mov	r2, r0
 8065002:	460b      	mov	r3, r1
 8065004:	4b0e      	ldr	r3, [pc, #56]	; (8065040 <UART_SetConfig+0x28c>)
 8065006:	fba3 1302 	umull	r1, r3, r3, r2
 806500a:	095b      	lsrs	r3, r3, #5
 806500c:	2164      	movs	r1, #100	; 0x64
 806500e:	fb01 f303 	mul.w	r3, r1, r3
 8065012:	1ad3      	subs	r3, r2, r3
 8065014:	00db      	lsls	r3, r3, #3
 8065016:	3332      	adds	r3, #50	; 0x32
 8065018:	4a09      	ldr	r2, [pc, #36]	; (8065040 <UART_SetConfig+0x28c>)
 806501a:	fba2 2303 	umull	r2, r3, r2, r3
 806501e:	095b      	lsrs	r3, r3, #5
 8065020:	f003 0207 	and.w	r2, r3, #7
 8065024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8065026:	681b      	ldr	r3, [r3, #0]
 8065028:	4432      	add	r2, r6
 806502a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 806502c:	e0c4      	b.n	80651b8 <UART_SetConfig+0x404>
 806502e:	bf00      	nop
 8065030:	00a037a0 	.word	0x00a037a0
 8065034:	0806d424 	.word	0x0806d424
 8065038:	40011000 	.word	0x40011000
 806503c:	40011400 	.word	0x40011400
 8065040:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8065044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8065046:	461c      	mov	r4, r3
 8065048:	f04f 0500 	mov.w	r5, #0
 806504c:	4622      	mov	r2, r4
 806504e:	462b      	mov	r3, r5
 8065050:	1891      	adds	r1, r2, r2
 8065052:	6139      	str	r1, [r7, #16]
 8065054:	415b      	adcs	r3, r3
 8065056:	617b      	str	r3, [r7, #20]
 8065058:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 806505c:	1912      	adds	r2, r2, r4
 806505e:	eb45 0303 	adc.w	r3, r5, r3
 8065062:	f04f 0000 	mov.w	r0, #0
 8065066:	f04f 0100 	mov.w	r1, #0
 806506a:	00d9      	lsls	r1, r3, #3
 806506c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8065070:	00d0      	lsls	r0, r2, #3
 8065072:	4602      	mov	r2, r0
 8065074:	460b      	mov	r3, r1
 8065076:	eb12 0804 	adds.w	r8, r2, r4
 806507a:	eb43 0905 	adc.w	r9, r3, r5
 806507e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8065080:	685b      	ldr	r3, [r3, #4]
 8065082:	4618      	mov	r0, r3
 8065084:	f04f 0100 	mov.w	r1, #0
 8065088:	f04f 0200 	mov.w	r2, #0
 806508c:	f04f 0300 	mov.w	r3, #0
 8065090:	008b      	lsls	r3, r1, #2
 8065092:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8065096:	0082      	lsls	r2, r0, #2
 8065098:	4640      	mov	r0, r8
 806509a:	4649      	mov	r1, r9
 806509c:	f7fb f908 	bl	80602b0 <__aeabi_uldivmod>
 80650a0:	4602      	mov	r2, r0
 80650a2:	460b      	mov	r3, r1
 80650a4:	4b47      	ldr	r3, [pc, #284]	; (80651c4 <UART_SetConfig+0x410>)
 80650a6:	fba3 2302 	umull	r2, r3, r3, r2
 80650aa:	095b      	lsrs	r3, r3, #5
 80650ac:	011e      	lsls	r6, r3, #4
 80650ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80650b0:	4618      	mov	r0, r3
 80650b2:	f04f 0100 	mov.w	r1, #0
 80650b6:	4602      	mov	r2, r0
 80650b8:	460b      	mov	r3, r1
 80650ba:	1894      	adds	r4, r2, r2
 80650bc:	60bc      	str	r4, [r7, #8]
 80650be:	415b      	adcs	r3, r3
 80650c0:	60fb      	str	r3, [r7, #12]
 80650c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80650c6:	1812      	adds	r2, r2, r0
 80650c8:	eb41 0303 	adc.w	r3, r1, r3
 80650cc:	f04f 0400 	mov.w	r4, #0
 80650d0:	f04f 0500 	mov.w	r5, #0
 80650d4:	00dd      	lsls	r5, r3, #3
 80650d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80650da:	00d4      	lsls	r4, r2, #3
 80650dc:	4622      	mov	r2, r4
 80650de:	462b      	mov	r3, r5
 80650e0:	1814      	adds	r4, r2, r0
 80650e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80650e4:	414b      	adcs	r3, r1
 80650e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80650e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80650ea:	685b      	ldr	r3, [r3, #4]
 80650ec:	4618      	mov	r0, r3
 80650ee:	f04f 0100 	mov.w	r1, #0
 80650f2:	f04f 0200 	mov.w	r2, #0
 80650f6:	f04f 0300 	mov.w	r3, #0
 80650fa:	008b      	lsls	r3, r1, #2
 80650fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8065100:	0082      	lsls	r2, r0, #2
 8065102:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8065106:	f7fb f8d3 	bl	80602b0 <__aeabi_uldivmod>
 806510a:	4602      	mov	r2, r0
 806510c:	460b      	mov	r3, r1
 806510e:	4b2d      	ldr	r3, [pc, #180]	; (80651c4 <UART_SetConfig+0x410>)
 8065110:	fba3 1302 	umull	r1, r3, r3, r2
 8065114:	095b      	lsrs	r3, r3, #5
 8065116:	2164      	movs	r1, #100	; 0x64
 8065118:	fb01 f303 	mul.w	r3, r1, r3
 806511c:	1ad3      	subs	r3, r2, r3
 806511e:	011b      	lsls	r3, r3, #4
 8065120:	3332      	adds	r3, #50	; 0x32
 8065122:	4a28      	ldr	r2, [pc, #160]	; (80651c4 <UART_SetConfig+0x410>)
 8065124:	fba2 2303 	umull	r2, r3, r2, r3
 8065128:	095b      	lsrs	r3, r3, #5
 806512a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 806512e:	441e      	add	r6, r3
 8065130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8065132:	4618      	mov	r0, r3
 8065134:	f04f 0100 	mov.w	r1, #0
 8065138:	4602      	mov	r2, r0
 806513a:	460b      	mov	r3, r1
 806513c:	1894      	adds	r4, r2, r2
 806513e:	603c      	str	r4, [r7, #0]
 8065140:	415b      	adcs	r3, r3
 8065142:	607b      	str	r3, [r7, #4]
 8065144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8065148:	1812      	adds	r2, r2, r0
 806514a:	eb41 0303 	adc.w	r3, r1, r3
 806514e:	f04f 0400 	mov.w	r4, #0
 8065152:	f04f 0500 	mov.w	r5, #0
 8065156:	00dd      	lsls	r5, r3, #3
 8065158:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 806515c:	00d4      	lsls	r4, r2, #3
 806515e:	4622      	mov	r2, r4
 8065160:	462b      	mov	r3, r5
 8065162:	eb12 0a00 	adds.w	sl, r2, r0
 8065166:	eb43 0b01 	adc.w	fp, r3, r1
 806516a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806516c:	685b      	ldr	r3, [r3, #4]
 806516e:	4618      	mov	r0, r3
 8065170:	f04f 0100 	mov.w	r1, #0
 8065174:	f04f 0200 	mov.w	r2, #0
 8065178:	f04f 0300 	mov.w	r3, #0
 806517c:	008b      	lsls	r3, r1, #2
 806517e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8065182:	0082      	lsls	r2, r0, #2
 8065184:	4650      	mov	r0, sl
 8065186:	4659      	mov	r1, fp
 8065188:	f7fb f892 	bl	80602b0 <__aeabi_uldivmod>
 806518c:	4602      	mov	r2, r0
 806518e:	460b      	mov	r3, r1
 8065190:	4b0c      	ldr	r3, [pc, #48]	; (80651c4 <UART_SetConfig+0x410>)
 8065192:	fba3 1302 	umull	r1, r3, r3, r2
 8065196:	095b      	lsrs	r3, r3, #5
 8065198:	2164      	movs	r1, #100	; 0x64
 806519a:	fb01 f303 	mul.w	r3, r1, r3
 806519e:	1ad3      	subs	r3, r2, r3
 80651a0:	011b      	lsls	r3, r3, #4
 80651a2:	3332      	adds	r3, #50	; 0x32
 80651a4:	4a07      	ldr	r2, [pc, #28]	; (80651c4 <UART_SetConfig+0x410>)
 80651a6:	fba2 2303 	umull	r2, r3, r2, r3
 80651aa:	095b      	lsrs	r3, r3, #5
 80651ac:	f003 020f 	and.w	r2, r3, #15
 80651b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80651b2:	681b      	ldr	r3, [r3, #0]
 80651b4:	4432      	add	r2, r6
 80651b6:	609a      	str	r2, [r3, #8]
}
 80651b8:	bf00      	nop
 80651ba:	377c      	adds	r7, #124	; 0x7c
 80651bc:	46bd      	mov	sp, r7
 80651be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80651c2:	bf00      	nop
 80651c4:	51eb851f 	.word	0x51eb851f

080651c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80651c8:	b580      	push	{r7, lr}
 80651ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80651cc:	4904      	ldr	r1, [pc, #16]	; (80651e0 <MX_FATFS_Init+0x18>)
 80651ce:	4805      	ldr	r0, [pc, #20]	; (80651e4 <MX_FATFS_Init+0x1c>)
 80651d0:	f003 fa40 	bl	8068654 <FATFS_LinkDriver>
 80651d4:	4603      	mov	r3, r0
 80651d6:	461a      	mov	r2, r3
 80651d8:	4b03      	ldr	r3, [pc, #12]	; (80651e8 <MX_FATFS_Init+0x20>)
 80651da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80651dc:	bf00      	nop
 80651de:	bd80      	pop	{r7, pc}
 80651e0:	200053c4 	.word	0x200053c4
 80651e4:	2000000c 	.word	0x2000000c
 80651e8:	200053c8 	.word	0x200053c8

080651ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80651ec:	b480      	push	{r7}
 80651ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80651f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80651f2:	4618      	mov	r0, r3
 80651f4:	46bd      	mov	sp, r7
 80651f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80651fa:	4770      	bx	lr

080651fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80651fc:	b580      	push	{r7, lr}
 80651fe:	b082      	sub	sp, #8
 8065200:	af00      	add	r7, sp, #0
 8065202:	4603      	mov	r3, r0
 8065204:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8065206:	79fb      	ldrb	r3, [r7, #7]
 8065208:	4618      	mov	r0, r3
 806520a:	f000 f9d9 	bl	80655c0 <USER_SPI_initialize>
 806520e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8065210:	4618      	mov	r0, r3
 8065212:	3708      	adds	r7, #8
 8065214:	46bd      	mov	sp, r7
 8065216:	bd80      	pop	{r7, pc}

08065218 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8065218:	b580      	push	{r7, lr}
 806521a:	b082      	sub	sp, #8
 806521c:	af00      	add	r7, sp, #0
 806521e:	4603      	mov	r3, r0
 8065220:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8065222:	79fb      	ldrb	r3, [r7, #7]
 8065224:	4618      	mov	r0, r3
 8065226:	f000 fab7 	bl	8065798 <USER_SPI_status>
 806522a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 806522c:	4618      	mov	r0, r3
 806522e:	3708      	adds	r7, #8
 8065230:	46bd      	mov	sp, r7
 8065232:	bd80      	pop	{r7, pc}

08065234 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8065234:	b580      	push	{r7, lr}
 8065236:	b084      	sub	sp, #16
 8065238:	af00      	add	r7, sp, #0
 806523a:	60b9      	str	r1, [r7, #8]
 806523c:	607a      	str	r2, [r7, #4]
 806523e:	603b      	str	r3, [r7, #0]
 8065240:	4603      	mov	r3, r0
 8065242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8065244:	7bf8      	ldrb	r0, [r7, #15]
 8065246:	683b      	ldr	r3, [r7, #0]
 8065248:	687a      	ldr	r2, [r7, #4]
 806524a:	68b9      	ldr	r1, [r7, #8]
 806524c:	f000 faba 	bl	80657c4 <USER_SPI_read>
 8065250:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8065252:	4618      	mov	r0, r3
 8065254:	3710      	adds	r7, #16
 8065256:	46bd      	mov	sp, r7
 8065258:	bd80      	pop	{r7, pc}

0806525a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 806525a:	b580      	push	{r7, lr}
 806525c:	b084      	sub	sp, #16
 806525e:	af00      	add	r7, sp, #0
 8065260:	60b9      	str	r1, [r7, #8]
 8065262:	607a      	str	r2, [r7, #4]
 8065264:	603b      	str	r3, [r7, #0]
 8065266:	4603      	mov	r3, r0
 8065268:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 806526a:	7bf8      	ldrb	r0, [r7, #15]
 806526c:	683b      	ldr	r3, [r7, #0]
 806526e:	687a      	ldr	r2, [r7, #4]
 8065270:	68b9      	ldr	r1, [r7, #8]
 8065272:	f000 fb0d 	bl	8065890 <USER_SPI_write>
 8065276:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8065278:	4618      	mov	r0, r3
 806527a:	3710      	adds	r7, #16
 806527c:	46bd      	mov	sp, r7
 806527e:	bd80      	pop	{r7, pc}

08065280 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8065280:	b580      	push	{r7, lr}
 8065282:	b082      	sub	sp, #8
 8065284:	af00      	add	r7, sp, #0
 8065286:	4603      	mov	r3, r0
 8065288:	603a      	str	r2, [r7, #0]
 806528a:	71fb      	strb	r3, [r7, #7]
 806528c:	460b      	mov	r3, r1
 806528e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8065290:	79b9      	ldrb	r1, [r7, #6]
 8065292:	79fb      	ldrb	r3, [r7, #7]
 8065294:	683a      	ldr	r2, [r7, #0]
 8065296:	4618      	mov	r0, r3
 8065298:	f000 fb76 	bl	8065988 <USER_SPI_ioctl>
 806529c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 806529e:	4618      	mov	r0, r3
 80652a0:	3708      	adds	r7, #8
 80652a2:	46bd      	mov	sp, r7
 80652a4:	bd80      	pop	{r7, pc}
	...

080652a8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80652a8:	b580      	push	{r7, lr}
 80652aa:	b082      	sub	sp, #8
 80652ac:	af00      	add	r7, sp, #0
 80652ae:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80652b0:	f7fc fab6 	bl	8061820 <HAL_GetTick>
 80652b4:	4603      	mov	r3, r0
 80652b6:	4a04      	ldr	r2, [pc, #16]	; (80652c8 <SPI_Timer_On+0x20>)
 80652b8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80652ba:	4a04      	ldr	r2, [pc, #16]	; (80652cc <SPI_Timer_On+0x24>)
 80652bc:	687b      	ldr	r3, [r7, #4]
 80652be:	6013      	str	r3, [r2, #0]
}
 80652c0:	bf00      	nop
 80652c2:	3708      	adds	r7, #8
 80652c4:	46bd      	mov	sp, r7
 80652c6:	bd80      	pop	{r7, pc}
 80652c8:	20005830 	.word	0x20005830
 80652cc:	20005834 	.word	0x20005834

080652d0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80652d0:	b580      	push	{r7, lr}
 80652d2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80652d4:	f7fc faa4 	bl	8061820 <HAL_GetTick>
 80652d8:	4602      	mov	r2, r0
 80652da:	4b06      	ldr	r3, [pc, #24]	; (80652f4 <SPI_Timer_Status+0x24>)
 80652dc:	681b      	ldr	r3, [r3, #0]
 80652de:	1ad2      	subs	r2, r2, r3
 80652e0:	4b05      	ldr	r3, [pc, #20]	; (80652f8 <SPI_Timer_Status+0x28>)
 80652e2:	681b      	ldr	r3, [r3, #0]
 80652e4:	429a      	cmp	r2, r3
 80652e6:	bf34      	ite	cc
 80652e8:	2301      	movcc	r3, #1
 80652ea:	2300      	movcs	r3, #0
 80652ec:	b2db      	uxtb	r3, r3
}
 80652ee:	4618      	mov	r0, r3
 80652f0:	bd80      	pop	{r7, pc}
 80652f2:	bf00      	nop
 80652f4:	20005830 	.word	0x20005830
 80652f8:	20005834 	.word	0x20005834

080652fc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80652fc:	b580      	push	{r7, lr}
 80652fe:	b086      	sub	sp, #24
 8065300:	af02      	add	r7, sp, #8
 8065302:	4603      	mov	r3, r0
 8065304:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8065306:	f107 020f 	add.w	r2, r7, #15
 806530a:	1df9      	adds	r1, r7, #7
 806530c:	2332      	movs	r3, #50	; 0x32
 806530e:	9300      	str	r3, [sp, #0]
 8065310:	2301      	movs	r3, #1
 8065312:	4804      	ldr	r0, [pc, #16]	; (8065324 <xchg_spi+0x28>)
 8065314:	f7fe f8a6 	bl	8063464 <HAL_SPI_TransmitReceive>
    return rxDat;
 8065318:	7bfb      	ldrb	r3, [r7, #15]
}
 806531a:	4618      	mov	r0, r3
 806531c:	3710      	adds	r7, #16
 806531e:	46bd      	mov	sp, r7
 8065320:	bd80      	pop	{r7, pc}
 8065322:	bf00      	nop
 8065324:	200052dc 	.word	0x200052dc

08065328 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8065328:	b590      	push	{r4, r7, lr}
 806532a:	b085      	sub	sp, #20
 806532c:	af00      	add	r7, sp, #0
 806532e:	6078      	str	r0, [r7, #4]
 8065330:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8065332:	2300      	movs	r3, #0
 8065334:	60fb      	str	r3, [r7, #12]
 8065336:	e00a      	b.n	806534e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8065338:	687a      	ldr	r2, [r7, #4]
 806533a:	68fb      	ldr	r3, [r7, #12]
 806533c:	18d4      	adds	r4, r2, r3
 806533e:	20ff      	movs	r0, #255	; 0xff
 8065340:	f7ff ffdc 	bl	80652fc <xchg_spi>
 8065344:	4603      	mov	r3, r0
 8065346:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8065348:	68fb      	ldr	r3, [r7, #12]
 806534a:	3301      	adds	r3, #1
 806534c:	60fb      	str	r3, [r7, #12]
 806534e:	68fa      	ldr	r2, [r7, #12]
 8065350:	683b      	ldr	r3, [r7, #0]
 8065352:	429a      	cmp	r2, r3
 8065354:	d3f0      	bcc.n	8065338 <rcvr_spi_multi+0x10>
	}
}
 8065356:	bf00      	nop
 8065358:	bf00      	nop
 806535a:	3714      	adds	r7, #20
 806535c:	46bd      	mov	sp, r7
 806535e:	bd90      	pop	{r4, r7, pc}

08065360 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8065360:	b580      	push	{r7, lr}
 8065362:	b084      	sub	sp, #16
 8065364:	af00      	add	r7, sp, #0
 8065366:	6078      	str	r0, [r7, #4]
 8065368:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 806536a:	2300      	movs	r3, #0
 806536c:	60fb      	str	r3, [r7, #12]
 806536e:	e009      	b.n	8065384 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8065370:	687a      	ldr	r2, [r7, #4]
 8065372:	68fb      	ldr	r3, [r7, #12]
 8065374:	4413      	add	r3, r2
 8065376:	781b      	ldrb	r3, [r3, #0]
 8065378:	4618      	mov	r0, r3
 806537a:	f7ff ffbf 	bl	80652fc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 806537e:	68fb      	ldr	r3, [r7, #12]
 8065380:	3301      	adds	r3, #1
 8065382:	60fb      	str	r3, [r7, #12]
 8065384:	68fa      	ldr	r2, [r7, #12]
 8065386:	683b      	ldr	r3, [r7, #0]
 8065388:	429a      	cmp	r2, r3
 806538a:	d3f1      	bcc.n	8065370 <xmit_spi_multi+0x10>
	}
}
 806538c:	bf00      	nop
 806538e:	bf00      	nop
 8065390:	3710      	adds	r7, #16
 8065392:	46bd      	mov	sp, r7
 8065394:	bd80      	pop	{r7, pc}

08065396 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8065396:	b580      	push	{r7, lr}
 8065398:	b086      	sub	sp, #24
 806539a:	af00      	add	r7, sp, #0
 806539c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 806539e:	f7fc fa3f 	bl	8061820 <HAL_GetTick>
 80653a2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80653a4:	687b      	ldr	r3, [r7, #4]
 80653a6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80653a8:	20ff      	movs	r0, #255	; 0xff
 80653aa:	f7ff ffa7 	bl	80652fc <xchg_spi>
 80653ae:	4603      	mov	r3, r0
 80653b0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80653b2:	7bfb      	ldrb	r3, [r7, #15]
 80653b4:	2bff      	cmp	r3, #255	; 0xff
 80653b6:	d007      	beq.n	80653c8 <wait_ready+0x32>
 80653b8:	f7fc fa32 	bl	8061820 <HAL_GetTick>
 80653bc:	4602      	mov	r2, r0
 80653be:	697b      	ldr	r3, [r7, #20]
 80653c0:	1ad3      	subs	r3, r2, r3
 80653c2:	693a      	ldr	r2, [r7, #16]
 80653c4:	429a      	cmp	r2, r3
 80653c6:	d8ef      	bhi.n	80653a8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80653c8:	7bfb      	ldrb	r3, [r7, #15]
 80653ca:	2bff      	cmp	r3, #255	; 0xff
 80653cc:	bf0c      	ite	eq
 80653ce:	2301      	moveq	r3, #1
 80653d0:	2300      	movne	r3, #0
 80653d2:	b2db      	uxtb	r3, r3
}
 80653d4:	4618      	mov	r0, r3
 80653d6:	3718      	adds	r7, #24
 80653d8:	46bd      	mov	sp, r7
 80653da:	bd80      	pop	{r7, pc}

080653dc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80653dc:	b580      	push	{r7, lr}
 80653de:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80653e0:	2201      	movs	r2, #1
 80653e2:	2102      	movs	r1, #2
 80653e4:	4803      	ldr	r0, [pc, #12]	; (80653f4 <despiselect+0x18>)
 80653e6:	f7fc fea5 	bl	8062134 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80653ea:	20ff      	movs	r0, #255	; 0xff
 80653ec:	f7ff ff86 	bl	80652fc <xchg_spi>

}
 80653f0:	bf00      	nop
 80653f2:	bd80      	pop	{r7, pc}
 80653f4:	40020400 	.word	0x40020400

080653f8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80653f8:	b580      	push	{r7, lr}
 80653fa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80653fc:	2200      	movs	r2, #0
 80653fe:	2102      	movs	r1, #2
 8065400:	4809      	ldr	r0, [pc, #36]	; (8065428 <spiselect+0x30>)
 8065402:	f7fc fe97 	bl	8062134 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8065406:	20ff      	movs	r0, #255	; 0xff
 8065408:	f7ff ff78 	bl	80652fc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 806540c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8065410:	f7ff ffc1 	bl	8065396 <wait_ready>
 8065414:	4603      	mov	r3, r0
 8065416:	2b00      	cmp	r3, #0
 8065418:	d001      	beq.n	806541e <spiselect+0x26>
 806541a:	2301      	movs	r3, #1
 806541c:	e002      	b.n	8065424 <spiselect+0x2c>

	despiselect();
 806541e:	f7ff ffdd 	bl	80653dc <despiselect>
	return 0;	/* Timeout */
 8065422:	2300      	movs	r3, #0
}
 8065424:	4618      	mov	r0, r3
 8065426:	bd80      	pop	{r7, pc}
 8065428:	40020400 	.word	0x40020400

0806542c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 806542c:	b580      	push	{r7, lr}
 806542e:	b084      	sub	sp, #16
 8065430:	af00      	add	r7, sp, #0
 8065432:	6078      	str	r0, [r7, #4]
 8065434:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8065436:	20c8      	movs	r0, #200	; 0xc8
 8065438:	f7ff ff36 	bl	80652a8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 806543c:	20ff      	movs	r0, #255	; 0xff
 806543e:	f7ff ff5d 	bl	80652fc <xchg_spi>
 8065442:	4603      	mov	r3, r0
 8065444:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8065446:	7bfb      	ldrb	r3, [r7, #15]
 8065448:	2bff      	cmp	r3, #255	; 0xff
 806544a:	d104      	bne.n	8065456 <rcvr_datablock+0x2a>
 806544c:	f7ff ff40 	bl	80652d0 <SPI_Timer_Status>
 8065450:	4603      	mov	r3, r0
 8065452:	2b00      	cmp	r3, #0
 8065454:	d1f2      	bne.n	806543c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8065456:	7bfb      	ldrb	r3, [r7, #15]
 8065458:	2bfe      	cmp	r3, #254	; 0xfe
 806545a:	d001      	beq.n	8065460 <rcvr_datablock+0x34>
 806545c:	2300      	movs	r3, #0
 806545e:	e00a      	b.n	8065476 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8065460:	6839      	ldr	r1, [r7, #0]
 8065462:	6878      	ldr	r0, [r7, #4]
 8065464:	f7ff ff60 	bl	8065328 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8065468:	20ff      	movs	r0, #255	; 0xff
 806546a:	f7ff ff47 	bl	80652fc <xchg_spi>
 806546e:	20ff      	movs	r0, #255	; 0xff
 8065470:	f7ff ff44 	bl	80652fc <xchg_spi>

	return 1;						/* Function succeeded */
 8065474:	2301      	movs	r3, #1
}
 8065476:	4618      	mov	r0, r3
 8065478:	3710      	adds	r7, #16
 806547a:	46bd      	mov	sp, r7
 806547c:	bd80      	pop	{r7, pc}

0806547e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 806547e:	b580      	push	{r7, lr}
 8065480:	b084      	sub	sp, #16
 8065482:	af00      	add	r7, sp, #0
 8065484:	6078      	str	r0, [r7, #4]
 8065486:	460b      	mov	r3, r1
 8065488:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 806548a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 806548e:	f7ff ff82 	bl	8065396 <wait_ready>
 8065492:	4603      	mov	r3, r0
 8065494:	2b00      	cmp	r3, #0
 8065496:	d101      	bne.n	806549c <xmit_datablock+0x1e>
 8065498:	2300      	movs	r3, #0
 806549a:	e01e      	b.n	80654da <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 806549c:	78fb      	ldrb	r3, [r7, #3]
 806549e:	4618      	mov	r0, r3
 80654a0:	f7ff ff2c 	bl	80652fc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80654a4:	78fb      	ldrb	r3, [r7, #3]
 80654a6:	2bfd      	cmp	r3, #253	; 0xfd
 80654a8:	d016      	beq.n	80654d8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80654aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80654ae:	6878      	ldr	r0, [r7, #4]
 80654b0:	f7ff ff56 	bl	8065360 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80654b4:	20ff      	movs	r0, #255	; 0xff
 80654b6:	f7ff ff21 	bl	80652fc <xchg_spi>
 80654ba:	20ff      	movs	r0, #255	; 0xff
 80654bc:	f7ff ff1e 	bl	80652fc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80654c0:	20ff      	movs	r0, #255	; 0xff
 80654c2:	f7ff ff1b 	bl	80652fc <xchg_spi>
 80654c6:	4603      	mov	r3, r0
 80654c8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80654ca:	7bfb      	ldrb	r3, [r7, #15]
 80654cc:	f003 031f 	and.w	r3, r3, #31
 80654d0:	2b05      	cmp	r3, #5
 80654d2:	d001      	beq.n	80654d8 <xmit_datablock+0x5a>
 80654d4:	2300      	movs	r3, #0
 80654d6:	e000      	b.n	80654da <xmit_datablock+0x5c>
	}
	return 1;
 80654d8:	2301      	movs	r3, #1
}
 80654da:	4618      	mov	r0, r3
 80654dc:	3710      	adds	r7, #16
 80654de:	46bd      	mov	sp, r7
 80654e0:	bd80      	pop	{r7, pc}

080654e2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80654e2:	b580      	push	{r7, lr}
 80654e4:	b084      	sub	sp, #16
 80654e6:	af00      	add	r7, sp, #0
 80654e8:	4603      	mov	r3, r0
 80654ea:	6039      	str	r1, [r7, #0]
 80654ec:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80654ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80654f2:	2b00      	cmp	r3, #0
 80654f4:	da0e      	bge.n	8065514 <send_cmd+0x32>
		cmd &= 0x7F;
 80654f6:	79fb      	ldrb	r3, [r7, #7]
 80654f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80654fc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80654fe:	2100      	movs	r1, #0
 8065500:	2037      	movs	r0, #55	; 0x37
 8065502:	f7ff ffee 	bl	80654e2 <send_cmd>
 8065506:	4603      	mov	r3, r0
 8065508:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 806550a:	7bbb      	ldrb	r3, [r7, #14]
 806550c:	2b01      	cmp	r3, #1
 806550e:	d901      	bls.n	8065514 <send_cmd+0x32>
 8065510:	7bbb      	ldrb	r3, [r7, #14]
 8065512:	e051      	b.n	80655b8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8065514:	79fb      	ldrb	r3, [r7, #7]
 8065516:	2b0c      	cmp	r3, #12
 8065518:	d008      	beq.n	806552c <send_cmd+0x4a>
		despiselect();
 806551a:	f7ff ff5f 	bl	80653dc <despiselect>
		if (!spiselect()) return 0xFF;
 806551e:	f7ff ff6b 	bl	80653f8 <spiselect>
 8065522:	4603      	mov	r3, r0
 8065524:	2b00      	cmp	r3, #0
 8065526:	d101      	bne.n	806552c <send_cmd+0x4a>
 8065528:	23ff      	movs	r3, #255	; 0xff
 806552a:	e045      	b.n	80655b8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 806552c:	79fb      	ldrb	r3, [r7, #7]
 806552e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8065532:	b2db      	uxtb	r3, r3
 8065534:	4618      	mov	r0, r3
 8065536:	f7ff fee1 	bl	80652fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 806553a:	683b      	ldr	r3, [r7, #0]
 806553c:	0e1b      	lsrs	r3, r3, #24
 806553e:	b2db      	uxtb	r3, r3
 8065540:	4618      	mov	r0, r3
 8065542:	f7ff fedb 	bl	80652fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8065546:	683b      	ldr	r3, [r7, #0]
 8065548:	0c1b      	lsrs	r3, r3, #16
 806554a:	b2db      	uxtb	r3, r3
 806554c:	4618      	mov	r0, r3
 806554e:	f7ff fed5 	bl	80652fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8065552:	683b      	ldr	r3, [r7, #0]
 8065554:	0a1b      	lsrs	r3, r3, #8
 8065556:	b2db      	uxtb	r3, r3
 8065558:	4618      	mov	r0, r3
 806555a:	f7ff fecf 	bl	80652fc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 806555e:	683b      	ldr	r3, [r7, #0]
 8065560:	b2db      	uxtb	r3, r3
 8065562:	4618      	mov	r0, r3
 8065564:	f7ff feca 	bl	80652fc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8065568:	2301      	movs	r3, #1
 806556a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 806556c:	79fb      	ldrb	r3, [r7, #7]
 806556e:	2b00      	cmp	r3, #0
 8065570:	d101      	bne.n	8065576 <send_cmd+0x94>
 8065572:	2395      	movs	r3, #149	; 0x95
 8065574:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8065576:	79fb      	ldrb	r3, [r7, #7]
 8065578:	2b08      	cmp	r3, #8
 806557a:	d101      	bne.n	8065580 <send_cmd+0x9e>
 806557c:	2387      	movs	r3, #135	; 0x87
 806557e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8065580:	7bfb      	ldrb	r3, [r7, #15]
 8065582:	4618      	mov	r0, r3
 8065584:	f7ff feba 	bl	80652fc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8065588:	79fb      	ldrb	r3, [r7, #7]
 806558a:	2b0c      	cmp	r3, #12
 806558c:	d102      	bne.n	8065594 <send_cmd+0xb2>
 806558e:	20ff      	movs	r0, #255	; 0xff
 8065590:	f7ff feb4 	bl	80652fc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8065594:	230a      	movs	r3, #10
 8065596:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8065598:	20ff      	movs	r0, #255	; 0xff
 806559a:	f7ff feaf 	bl	80652fc <xchg_spi>
 806559e:	4603      	mov	r3, r0
 80655a0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80655a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80655a6:	2b00      	cmp	r3, #0
 80655a8:	da05      	bge.n	80655b6 <send_cmd+0xd4>
 80655aa:	7bfb      	ldrb	r3, [r7, #15]
 80655ac:	3b01      	subs	r3, #1
 80655ae:	73fb      	strb	r3, [r7, #15]
 80655b0:	7bfb      	ldrb	r3, [r7, #15]
 80655b2:	2b00      	cmp	r3, #0
 80655b4:	d1f0      	bne.n	8065598 <send_cmd+0xb6>

	return res;							/* Return received response */
 80655b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80655b8:	4618      	mov	r0, r3
 80655ba:	3710      	adds	r7, #16
 80655bc:	46bd      	mov	sp, r7
 80655be:	bd80      	pop	{r7, pc}

080655c0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80655c0:	b590      	push	{r4, r7, lr}
 80655c2:	b085      	sub	sp, #20
 80655c4:	af00      	add	r7, sp, #0
 80655c6:	4603      	mov	r3, r0
 80655c8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80655ca:	79fb      	ldrb	r3, [r7, #7]
 80655cc:	2b00      	cmp	r3, #0
 80655ce:	d001      	beq.n	80655d4 <USER_SPI_initialize+0x14>
 80655d0:	2301      	movs	r3, #1
 80655d2:	e0d6      	b.n	8065782 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80655d4:	4b6d      	ldr	r3, [pc, #436]	; (806578c <USER_SPI_initialize+0x1cc>)
 80655d6:	781b      	ldrb	r3, [r3, #0]
 80655d8:	b2db      	uxtb	r3, r3
 80655da:	f003 0302 	and.w	r3, r3, #2
 80655de:	2b00      	cmp	r3, #0
 80655e0:	d003      	beq.n	80655ea <USER_SPI_initialize+0x2a>
 80655e2:	4b6a      	ldr	r3, [pc, #424]	; (806578c <USER_SPI_initialize+0x1cc>)
 80655e4:	781b      	ldrb	r3, [r3, #0]
 80655e6:	b2db      	uxtb	r3, r3
 80655e8:	e0cb      	b.n	8065782 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80655ea:	4b69      	ldr	r3, [pc, #420]	; (8065790 <USER_SPI_initialize+0x1d0>)
 80655ec:	681b      	ldr	r3, [r3, #0]
 80655ee:	681b      	ldr	r3, [r3, #0]
 80655f0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80655f4:	4b66      	ldr	r3, [pc, #408]	; (8065790 <USER_SPI_initialize+0x1d0>)
 80655f6:	681b      	ldr	r3, [r3, #0]
 80655f8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80655fc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80655fe:	230a      	movs	r3, #10
 8065600:	73fb      	strb	r3, [r7, #15]
 8065602:	e005      	b.n	8065610 <USER_SPI_initialize+0x50>
 8065604:	20ff      	movs	r0, #255	; 0xff
 8065606:	f7ff fe79 	bl	80652fc <xchg_spi>
 806560a:	7bfb      	ldrb	r3, [r7, #15]
 806560c:	3b01      	subs	r3, #1
 806560e:	73fb      	strb	r3, [r7, #15]
 8065610:	7bfb      	ldrb	r3, [r7, #15]
 8065612:	2b00      	cmp	r3, #0
 8065614:	d1f6      	bne.n	8065604 <USER_SPI_initialize+0x44>

	ty = 0;
 8065616:	2300      	movs	r3, #0
 8065618:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 806561a:	2100      	movs	r1, #0
 806561c:	2000      	movs	r0, #0
 806561e:	f7ff ff60 	bl	80654e2 <send_cmd>
 8065622:	4603      	mov	r3, r0
 8065624:	2b01      	cmp	r3, #1
 8065626:	f040 808b 	bne.w	8065740 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 806562a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 806562e:	f7ff fe3b 	bl	80652a8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8065632:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8065636:	2008      	movs	r0, #8
 8065638:	f7ff ff53 	bl	80654e2 <send_cmd>
 806563c:	4603      	mov	r3, r0
 806563e:	2b01      	cmp	r3, #1
 8065640:	d151      	bne.n	80656e6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8065642:	2300      	movs	r3, #0
 8065644:	73fb      	strb	r3, [r7, #15]
 8065646:	e00d      	b.n	8065664 <USER_SPI_initialize+0xa4>
 8065648:	7bfc      	ldrb	r4, [r7, #15]
 806564a:	20ff      	movs	r0, #255	; 0xff
 806564c:	f7ff fe56 	bl	80652fc <xchg_spi>
 8065650:	4603      	mov	r3, r0
 8065652:	461a      	mov	r2, r3
 8065654:	f107 0310 	add.w	r3, r7, #16
 8065658:	4423      	add	r3, r4
 806565a:	f803 2c08 	strb.w	r2, [r3, #-8]
 806565e:	7bfb      	ldrb	r3, [r7, #15]
 8065660:	3301      	adds	r3, #1
 8065662:	73fb      	strb	r3, [r7, #15]
 8065664:	7bfb      	ldrb	r3, [r7, #15]
 8065666:	2b03      	cmp	r3, #3
 8065668:	d9ee      	bls.n	8065648 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 806566a:	7abb      	ldrb	r3, [r7, #10]
 806566c:	2b01      	cmp	r3, #1
 806566e:	d167      	bne.n	8065740 <USER_SPI_initialize+0x180>
 8065670:	7afb      	ldrb	r3, [r7, #11]
 8065672:	2baa      	cmp	r3, #170	; 0xaa
 8065674:	d164      	bne.n	8065740 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8065676:	bf00      	nop
 8065678:	f7ff fe2a 	bl	80652d0 <SPI_Timer_Status>
 806567c:	4603      	mov	r3, r0
 806567e:	2b00      	cmp	r3, #0
 8065680:	d007      	beq.n	8065692 <USER_SPI_initialize+0xd2>
 8065682:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8065686:	20a9      	movs	r0, #169	; 0xa9
 8065688:	f7ff ff2b 	bl	80654e2 <send_cmd>
 806568c:	4603      	mov	r3, r0
 806568e:	2b00      	cmp	r3, #0
 8065690:	d1f2      	bne.n	8065678 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8065692:	f7ff fe1d 	bl	80652d0 <SPI_Timer_Status>
 8065696:	4603      	mov	r3, r0
 8065698:	2b00      	cmp	r3, #0
 806569a:	d051      	beq.n	8065740 <USER_SPI_initialize+0x180>
 806569c:	2100      	movs	r1, #0
 806569e:	203a      	movs	r0, #58	; 0x3a
 80656a0:	f7ff ff1f 	bl	80654e2 <send_cmd>
 80656a4:	4603      	mov	r3, r0
 80656a6:	2b00      	cmp	r3, #0
 80656a8:	d14a      	bne.n	8065740 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80656aa:	2300      	movs	r3, #0
 80656ac:	73fb      	strb	r3, [r7, #15]
 80656ae:	e00d      	b.n	80656cc <USER_SPI_initialize+0x10c>
 80656b0:	7bfc      	ldrb	r4, [r7, #15]
 80656b2:	20ff      	movs	r0, #255	; 0xff
 80656b4:	f7ff fe22 	bl	80652fc <xchg_spi>
 80656b8:	4603      	mov	r3, r0
 80656ba:	461a      	mov	r2, r3
 80656bc:	f107 0310 	add.w	r3, r7, #16
 80656c0:	4423      	add	r3, r4
 80656c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80656c6:	7bfb      	ldrb	r3, [r7, #15]
 80656c8:	3301      	adds	r3, #1
 80656ca:	73fb      	strb	r3, [r7, #15]
 80656cc:	7bfb      	ldrb	r3, [r7, #15]
 80656ce:	2b03      	cmp	r3, #3
 80656d0:	d9ee      	bls.n	80656b0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80656d2:	7a3b      	ldrb	r3, [r7, #8]
 80656d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80656d8:	2b00      	cmp	r3, #0
 80656da:	d001      	beq.n	80656e0 <USER_SPI_initialize+0x120>
 80656dc:	230c      	movs	r3, #12
 80656de:	e000      	b.n	80656e2 <USER_SPI_initialize+0x122>
 80656e0:	2304      	movs	r3, #4
 80656e2:	737b      	strb	r3, [r7, #13]
 80656e4:	e02c      	b.n	8065740 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80656e6:	2100      	movs	r1, #0
 80656e8:	20a9      	movs	r0, #169	; 0xa9
 80656ea:	f7ff fefa 	bl	80654e2 <send_cmd>
 80656ee:	4603      	mov	r3, r0
 80656f0:	2b01      	cmp	r3, #1
 80656f2:	d804      	bhi.n	80656fe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80656f4:	2302      	movs	r3, #2
 80656f6:	737b      	strb	r3, [r7, #13]
 80656f8:	23a9      	movs	r3, #169	; 0xa9
 80656fa:	73bb      	strb	r3, [r7, #14]
 80656fc:	e003      	b.n	8065706 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80656fe:	2301      	movs	r3, #1
 8065700:	737b      	strb	r3, [r7, #13]
 8065702:	2301      	movs	r3, #1
 8065704:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8065706:	bf00      	nop
 8065708:	f7ff fde2 	bl	80652d0 <SPI_Timer_Status>
 806570c:	4603      	mov	r3, r0
 806570e:	2b00      	cmp	r3, #0
 8065710:	d007      	beq.n	8065722 <USER_SPI_initialize+0x162>
 8065712:	7bbb      	ldrb	r3, [r7, #14]
 8065714:	2100      	movs	r1, #0
 8065716:	4618      	mov	r0, r3
 8065718:	f7ff fee3 	bl	80654e2 <send_cmd>
 806571c:	4603      	mov	r3, r0
 806571e:	2b00      	cmp	r3, #0
 8065720:	d1f2      	bne.n	8065708 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8065722:	f7ff fdd5 	bl	80652d0 <SPI_Timer_Status>
 8065726:	4603      	mov	r3, r0
 8065728:	2b00      	cmp	r3, #0
 806572a:	d007      	beq.n	806573c <USER_SPI_initialize+0x17c>
 806572c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8065730:	2010      	movs	r0, #16
 8065732:	f7ff fed6 	bl	80654e2 <send_cmd>
 8065736:	4603      	mov	r3, r0
 8065738:	2b00      	cmp	r3, #0
 806573a:	d001      	beq.n	8065740 <USER_SPI_initialize+0x180>
				ty = 0;
 806573c:	2300      	movs	r3, #0
 806573e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8065740:	4a14      	ldr	r2, [pc, #80]	; (8065794 <USER_SPI_initialize+0x1d4>)
 8065742:	7b7b      	ldrb	r3, [r7, #13]
 8065744:	7013      	strb	r3, [r2, #0]
	despiselect();
 8065746:	f7ff fe49 	bl	80653dc <despiselect>

	if (ty) {			/* OK */
 806574a:	7b7b      	ldrb	r3, [r7, #13]
 806574c:	2b00      	cmp	r3, #0
 806574e:	d012      	beq.n	8065776 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8065750:	4b0f      	ldr	r3, [pc, #60]	; (8065790 <USER_SPI_initialize+0x1d0>)
 8065752:	681b      	ldr	r3, [r3, #0]
 8065754:	681b      	ldr	r3, [r3, #0]
 8065756:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 806575a:	4b0d      	ldr	r3, [pc, #52]	; (8065790 <USER_SPI_initialize+0x1d0>)
 806575c:	681b      	ldr	r3, [r3, #0]
 806575e:	f042 0210 	orr.w	r2, r2, #16
 8065762:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8065764:	4b09      	ldr	r3, [pc, #36]	; (806578c <USER_SPI_initialize+0x1cc>)
 8065766:	781b      	ldrb	r3, [r3, #0]
 8065768:	b2db      	uxtb	r3, r3
 806576a:	f023 0301 	bic.w	r3, r3, #1
 806576e:	b2da      	uxtb	r2, r3
 8065770:	4b06      	ldr	r3, [pc, #24]	; (806578c <USER_SPI_initialize+0x1cc>)
 8065772:	701a      	strb	r2, [r3, #0]
 8065774:	e002      	b.n	806577c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8065776:	4b05      	ldr	r3, [pc, #20]	; (806578c <USER_SPI_initialize+0x1cc>)
 8065778:	2201      	movs	r2, #1
 806577a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 806577c:	4b03      	ldr	r3, [pc, #12]	; (806578c <USER_SPI_initialize+0x1cc>)
 806577e:	781b      	ldrb	r3, [r3, #0]
 8065780:	b2db      	uxtb	r3, r3
}
 8065782:	4618      	mov	r0, r3
 8065784:	3714      	adds	r7, #20
 8065786:	46bd      	mov	sp, r7
 8065788:	bd90      	pop	{r4, r7, pc}
 806578a:	bf00      	nop
 806578c:	20000020 	.word	0x20000020
 8065790:	200052dc 	.word	0x200052dc
 8065794:	200001ac 	.word	0x200001ac

08065798 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8065798:	b480      	push	{r7}
 806579a:	b083      	sub	sp, #12
 806579c:	af00      	add	r7, sp, #0
 806579e:	4603      	mov	r3, r0
 80657a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80657a2:	79fb      	ldrb	r3, [r7, #7]
 80657a4:	2b00      	cmp	r3, #0
 80657a6:	d001      	beq.n	80657ac <USER_SPI_status+0x14>
 80657a8:	2301      	movs	r3, #1
 80657aa:	e002      	b.n	80657b2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80657ac:	4b04      	ldr	r3, [pc, #16]	; (80657c0 <USER_SPI_status+0x28>)
 80657ae:	781b      	ldrb	r3, [r3, #0]
 80657b0:	b2db      	uxtb	r3, r3
}
 80657b2:	4618      	mov	r0, r3
 80657b4:	370c      	adds	r7, #12
 80657b6:	46bd      	mov	sp, r7
 80657b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80657bc:	4770      	bx	lr
 80657be:	bf00      	nop
 80657c0:	20000020 	.word	0x20000020

080657c4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80657c4:	b580      	push	{r7, lr}
 80657c6:	b084      	sub	sp, #16
 80657c8:	af00      	add	r7, sp, #0
 80657ca:	60b9      	str	r1, [r7, #8]
 80657cc:	607a      	str	r2, [r7, #4]
 80657ce:	603b      	str	r3, [r7, #0]
 80657d0:	4603      	mov	r3, r0
 80657d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80657d4:	7bfb      	ldrb	r3, [r7, #15]
 80657d6:	2b00      	cmp	r3, #0
 80657d8:	d102      	bne.n	80657e0 <USER_SPI_read+0x1c>
 80657da:	683b      	ldr	r3, [r7, #0]
 80657dc:	2b00      	cmp	r3, #0
 80657de:	d101      	bne.n	80657e4 <USER_SPI_read+0x20>
 80657e0:	2304      	movs	r3, #4
 80657e2:	e04d      	b.n	8065880 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80657e4:	4b28      	ldr	r3, [pc, #160]	; (8065888 <USER_SPI_read+0xc4>)
 80657e6:	781b      	ldrb	r3, [r3, #0]
 80657e8:	b2db      	uxtb	r3, r3
 80657ea:	f003 0301 	and.w	r3, r3, #1
 80657ee:	2b00      	cmp	r3, #0
 80657f0:	d001      	beq.n	80657f6 <USER_SPI_read+0x32>
 80657f2:	2303      	movs	r3, #3
 80657f4:	e044      	b.n	8065880 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80657f6:	4b25      	ldr	r3, [pc, #148]	; (806588c <USER_SPI_read+0xc8>)
 80657f8:	781b      	ldrb	r3, [r3, #0]
 80657fa:	f003 0308 	and.w	r3, r3, #8
 80657fe:	2b00      	cmp	r3, #0
 8065800:	d102      	bne.n	8065808 <USER_SPI_read+0x44>
 8065802:	687b      	ldr	r3, [r7, #4]
 8065804:	025b      	lsls	r3, r3, #9
 8065806:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8065808:	683b      	ldr	r3, [r7, #0]
 806580a:	2b01      	cmp	r3, #1
 806580c:	d111      	bne.n	8065832 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 806580e:	6879      	ldr	r1, [r7, #4]
 8065810:	2011      	movs	r0, #17
 8065812:	f7ff fe66 	bl	80654e2 <send_cmd>
 8065816:	4603      	mov	r3, r0
 8065818:	2b00      	cmp	r3, #0
 806581a:	d129      	bne.n	8065870 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 806581c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8065820:	68b8      	ldr	r0, [r7, #8]
 8065822:	f7ff fe03 	bl	806542c <rcvr_datablock>
 8065826:	4603      	mov	r3, r0
 8065828:	2b00      	cmp	r3, #0
 806582a:	d021      	beq.n	8065870 <USER_SPI_read+0xac>
			count = 0;
 806582c:	2300      	movs	r3, #0
 806582e:	603b      	str	r3, [r7, #0]
 8065830:	e01e      	b.n	8065870 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8065832:	6879      	ldr	r1, [r7, #4]
 8065834:	2012      	movs	r0, #18
 8065836:	f7ff fe54 	bl	80654e2 <send_cmd>
 806583a:	4603      	mov	r3, r0
 806583c:	2b00      	cmp	r3, #0
 806583e:	d117      	bne.n	8065870 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8065840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8065844:	68b8      	ldr	r0, [r7, #8]
 8065846:	f7ff fdf1 	bl	806542c <rcvr_datablock>
 806584a:	4603      	mov	r3, r0
 806584c:	2b00      	cmp	r3, #0
 806584e:	d00a      	beq.n	8065866 <USER_SPI_read+0xa2>
				buff += 512;
 8065850:	68bb      	ldr	r3, [r7, #8]
 8065852:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8065856:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8065858:	683b      	ldr	r3, [r7, #0]
 806585a:	3b01      	subs	r3, #1
 806585c:	603b      	str	r3, [r7, #0]
 806585e:	683b      	ldr	r3, [r7, #0]
 8065860:	2b00      	cmp	r3, #0
 8065862:	d1ed      	bne.n	8065840 <USER_SPI_read+0x7c>
 8065864:	e000      	b.n	8065868 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8065866:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8065868:	2100      	movs	r1, #0
 806586a:	200c      	movs	r0, #12
 806586c:	f7ff fe39 	bl	80654e2 <send_cmd>
		}
	}
	despiselect();
 8065870:	f7ff fdb4 	bl	80653dc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8065874:	683b      	ldr	r3, [r7, #0]
 8065876:	2b00      	cmp	r3, #0
 8065878:	bf14      	ite	ne
 806587a:	2301      	movne	r3, #1
 806587c:	2300      	moveq	r3, #0
 806587e:	b2db      	uxtb	r3, r3
}
 8065880:	4618      	mov	r0, r3
 8065882:	3710      	adds	r7, #16
 8065884:	46bd      	mov	sp, r7
 8065886:	bd80      	pop	{r7, pc}
 8065888:	20000020 	.word	0x20000020
 806588c:	200001ac 	.word	0x200001ac

08065890 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8065890:	b580      	push	{r7, lr}
 8065892:	b084      	sub	sp, #16
 8065894:	af00      	add	r7, sp, #0
 8065896:	60b9      	str	r1, [r7, #8]
 8065898:	607a      	str	r2, [r7, #4]
 806589a:	603b      	str	r3, [r7, #0]
 806589c:	4603      	mov	r3, r0
 806589e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80658a0:	7bfb      	ldrb	r3, [r7, #15]
 80658a2:	2b00      	cmp	r3, #0
 80658a4:	d102      	bne.n	80658ac <USER_SPI_write+0x1c>
 80658a6:	683b      	ldr	r3, [r7, #0]
 80658a8:	2b00      	cmp	r3, #0
 80658aa:	d101      	bne.n	80658b0 <USER_SPI_write+0x20>
 80658ac:	2304      	movs	r3, #4
 80658ae:	e063      	b.n	8065978 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80658b0:	4b33      	ldr	r3, [pc, #204]	; (8065980 <USER_SPI_write+0xf0>)
 80658b2:	781b      	ldrb	r3, [r3, #0]
 80658b4:	b2db      	uxtb	r3, r3
 80658b6:	f003 0301 	and.w	r3, r3, #1
 80658ba:	2b00      	cmp	r3, #0
 80658bc:	d001      	beq.n	80658c2 <USER_SPI_write+0x32>
 80658be:	2303      	movs	r3, #3
 80658c0:	e05a      	b.n	8065978 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80658c2:	4b2f      	ldr	r3, [pc, #188]	; (8065980 <USER_SPI_write+0xf0>)
 80658c4:	781b      	ldrb	r3, [r3, #0]
 80658c6:	b2db      	uxtb	r3, r3
 80658c8:	f003 0304 	and.w	r3, r3, #4
 80658cc:	2b00      	cmp	r3, #0
 80658ce:	d001      	beq.n	80658d4 <USER_SPI_write+0x44>
 80658d0:	2302      	movs	r3, #2
 80658d2:	e051      	b.n	8065978 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80658d4:	4b2b      	ldr	r3, [pc, #172]	; (8065984 <USER_SPI_write+0xf4>)
 80658d6:	781b      	ldrb	r3, [r3, #0]
 80658d8:	f003 0308 	and.w	r3, r3, #8
 80658dc:	2b00      	cmp	r3, #0
 80658de:	d102      	bne.n	80658e6 <USER_SPI_write+0x56>
 80658e0:	687b      	ldr	r3, [r7, #4]
 80658e2:	025b      	lsls	r3, r3, #9
 80658e4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80658e6:	683b      	ldr	r3, [r7, #0]
 80658e8:	2b01      	cmp	r3, #1
 80658ea:	d110      	bne.n	806590e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80658ec:	6879      	ldr	r1, [r7, #4]
 80658ee:	2018      	movs	r0, #24
 80658f0:	f7ff fdf7 	bl	80654e2 <send_cmd>
 80658f4:	4603      	mov	r3, r0
 80658f6:	2b00      	cmp	r3, #0
 80658f8:	d136      	bne.n	8065968 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80658fa:	21fe      	movs	r1, #254	; 0xfe
 80658fc:	68b8      	ldr	r0, [r7, #8]
 80658fe:	f7ff fdbe 	bl	806547e <xmit_datablock>
 8065902:	4603      	mov	r3, r0
 8065904:	2b00      	cmp	r3, #0
 8065906:	d02f      	beq.n	8065968 <USER_SPI_write+0xd8>
			count = 0;
 8065908:	2300      	movs	r3, #0
 806590a:	603b      	str	r3, [r7, #0]
 806590c:	e02c      	b.n	8065968 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 806590e:	4b1d      	ldr	r3, [pc, #116]	; (8065984 <USER_SPI_write+0xf4>)
 8065910:	781b      	ldrb	r3, [r3, #0]
 8065912:	f003 0306 	and.w	r3, r3, #6
 8065916:	2b00      	cmp	r3, #0
 8065918:	d003      	beq.n	8065922 <USER_SPI_write+0x92>
 806591a:	6839      	ldr	r1, [r7, #0]
 806591c:	2097      	movs	r0, #151	; 0x97
 806591e:	f7ff fde0 	bl	80654e2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8065922:	6879      	ldr	r1, [r7, #4]
 8065924:	2019      	movs	r0, #25
 8065926:	f7ff fddc 	bl	80654e2 <send_cmd>
 806592a:	4603      	mov	r3, r0
 806592c:	2b00      	cmp	r3, #0
 806592e:	d11b      	bne.n	8065968 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8065930:	21fc      	movs	r1, #252	; 0xfc
 8065932:	68b8      	ldr	r0, [r7, #8]
 8065934:	f7ff fda3 	bl	806547e <xmit_datablock>
 8065938:	4603      	mov	r3, r0
 806593a:	2b00      	cmp	r3, #0
 806593c:	d00a      	beq.n	8065954 <USER_SPI_write+0xc4>
				buff += 512;
 806593e:	68bb      	ldr	r3, [r7, #8]
 8065940:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8065944:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8065946:	683b      	ldr	r3, [r7, #0]
 8065948:	3b01      	subs	r3, #1
 806594a:	603b      	str	r3, [r7, #0]
 806594c:	683b      	ldr	r3, [r7, #0]
 806594e:	2b00      	cmp	r3, #0
 8065950:	d1ee      	bne.n	8065930 <USER_SPI_write+0xa0>
 8065952:	e000      	b.n	8065956 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8065954:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8065956:	21fd      	movs	r1, #253	; 0xfd
 8065958:	2000      	movs	r0, #0
 806595a:	f7ff fd90 	bl	806547e <xmit_datablock>
 806595e:	4603      	mov	r3, r0
 8065960:	2b00      	cmp	r3, #0
 8065962:	d101      	bne.n	8065968 <USER_SPI_write+0xd8>
 8065964:	2301      	movs	r3, #1
 8065966:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8065968:	f7ff fd38 	bl	80653dc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 806596c:	683b      	ldr	r3, [r7, #0]
 806596e:	2b00      	cmp	r3, #0
 8065970:	bf14      	ite	ne
 8065972:	2301      	movne	r3, #1
 8065974:	2300      	moveq	r3, #0
 8065976:	b2db      	uxtb	r3, r3
}
 8065978:	4618      	mov	r0, r3
 806597a:	3710      	adds	r7, #16
 806597c:	46bd      	mov	sp, r7
 806597e:	bd80      	pop	{r7, pc}
 8065980:	20000020 	.word	0x20000020
 8065984:	200001ac 	.word	0x200001ac

08065988 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8065988:	b580      	push	{r7, lr}
 806598a:	b08c      	sub	sp, #48	; 0x30
 806598c:	af00      	add	r7, sp, #0
 806598e:	4603      	mov	r3, r0
 8065990:	603a      	str	r2, [r7, #0]
 8065992:	71fb      	strb	r3, [r7, #7]
 8065994:	460b      	mov	r3, r1
 8065996:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8065998:	79fb      	ldrb	r3, [r7, #7]
 806599a:	2b00      	cmp	r3, #0
 806599c:	d001      	beq.n	80659a2 <USER_SPI_ioctl+0x1a>
 806599e:	2304      	movs	r3, #4
 80659a0:	e15a      	b.n	8065c58 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80659a2:	4baf      	ldr	r3, [pc, #700]	; (8065c60 <USER_SPI_ioctl+0x2d8>)
 80659a4:	781b      	ldrb	r3, [r3, #0]
 80659a6:	b2db      	uxtb	r3, r3
 80659a8:	f003 0301 	and.w	r3, r3, #1
 80659ac:	2b00      	cmp	r3, #0
 80659ae:	d001      	beq.n	80659b4 <USER_SPI_ioctl+0x2c>
 80659b0:	2303      	movs	r3, #3
 80659b2:	e151      	b.n	8065c58 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80659b4:	2301      	movs	r3, #1
 80659b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80659ba:	79bb      	ldrb	r3, [r7, #6]
 80659bc:	2b04      	cmp	r3, #4
 80659be:	f200 8136 	bhi.w	8065c2e <USER_SPI_ioctl+0x2a6>
 80659c2:	a201      	add	r2, pc, #4	; (adr r2, 80659c8 <USER_SPI_ioctl+0x40>)
 80659c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80659c8:	080659dd 	.word	0x080659dd
 80659cc:	080659f1 	.word	0x080659f1
 80659d0:	08065c2f 	.word	0x08065c2f
 80659d4:	08065a9d 	.word	0x08065a9d
 80659d8:	08065b93 	.word	0x08065b93
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80659dc:	f7ff fd0c 	bl	80653f8 <spiselect>
 80659e0:	4603      	mov	r3, r0
 80659e2:	2b00      	cmp	r3, #0
 80659e4:	f000 8127 	beq.w	8065c36 <USER_SPI_ioctl+0x2ae>
 80659e8:	2300      	movs	r3, #0
 80659ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80659ee:	e122      	b.n	8065c36 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80659f0:	2100      	movs	r1, #0
 80659f2:	2009      	movs	r0, #9
 80659f4:	f7ff fd75 	bl	80654e2 <send_cmd>
 80659f8:	4603      	mov	r3, r0
 80659fa:	2b00      	cmp	r3, #0
 80659fc:	f040 811d 	bne.w	8065c3a <USER_SPI_ioctl+0x2b2>
 8065a00:	f107 030c 	add.w	r3, r7, #12
 8065a04:	2110      	movs	r1, #16
 8065a06:	4618      	mov	r0, r3
 8065a08:	f7ff fd10 	bl	806542c <rcvr_datablock>
 8065a0c:	4603      	mov	r3, r0
 8065a0e:	2b00      	cmp	r3, #0
 8065a10:	f000 8113 	beq.w	8065c3a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8065a14:	7b3b      	ldrb	r3, [r7, #12]
 8065a16:	099b      	lsrs	r3, r3, #6
 8065a18:	b2db      	uxtb	r3, r3
 8065a1a:	2b01      	cmp	r3, #1
 8065a1c:	d111      	bne.n	8065a42 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8065a1e:	7d7b      	ldrb	r3, [r7, #21]
 8065a20:	461a      	mov	r2, r3
 8065a22:	7d3b      	ldrb	r3, [r7, #20]
 8065a24:	021b      	lsls	r3, r3, #8
 8065a26:	4413      	add	r3, r2
 8065a28:	461a      	mov	r2, r3
 8065a2a:	7cfb      	ldrb	r3, [r7, #19]
 8065a2c:	041b      	lsls	r3, r3, #16
 8065a2e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8065a32:	4413      	add	r3, r2
 8065a34:	3301      	adds	r3, #1
 8065a36:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8065a38:	69fb      	ldr	r3, [r7, #28]
 8065a3a:	029a      	lsls	r2, r3, #10
 8065a3c:	683b      	ldr	r3, [r7, #0]
 8065a3e:	601a      	str	r2, [r3, #0]
 8065a40:	e028      	b.n	8065a94 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8065a42:	7c7b      	ldrb	r3, [r7, #17]
 8065a44:	f003 030f 	and.w	r3, r3, #15
 8065a48:	b2da      	uxtb	r2, r3
 8065a4a:	7dbb      	ldrb	r3, [r7, #22]
 8065a4c:	09db      	lsrs	r3, r3, #7
 8065a4e:	b2db      	uxtb	r3, r3
 8065a50:	4413      	add	r3, r2
 8065a52:	b2da      	uxtb	r2, r3
 8065a54:	7d7b      	ldrb	r3, [r7, #21]
 8065a56:	005b      	lsls	r3, r3, #1
 8065a58:	b2db      	uxtb	r3, r3
 8065a5a:	f003 0306 	and.w	r3, r3, #6
 8065a5e:	b2db      	uxtb	r3, r3
 8065a60:	4413      	add	r3, r2
 8065a62:	b2db      	uxtb	r3, r3
 8065a64:	3302      	adds	r3, #2
 8065a66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8065a6a:	7d3b      	ldrb	r3, [r7, #20]
 8065a6c:	099b      	lsrs	r3, r3, #6
 8065a6e:	b2db      	uxtb	r3, r3
 8065a70:	461a      	mov	r2, r3
 8065a72:	7cfb      	ldrb	r3, [r7, #19]
 8065a74:	009b      	lsls	r3, r3, #2
 8065a76:	441a      	add	r2, r3
 8065a78:	7cbb      	ldrb	r3, [r7, #18]
 8065a7a:	029b      	lsls	r3, r3, #10
 8065a7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8065a80:	4413      	add	r3, r2
 8065a82:	3301      	adds	r3, #1
 8065a84:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8065a86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8065a8a:	3b09      	subs	r3, #9
 8065a8c:	69fa      	ldr	r2, [r7, #28]
 8065a8e:	409a      	lsls	r2, r3
 8065a90:	683b      	ldr	r3, [r7, #0]
 8065a92:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8065a94:	2300      	movs	r3, #0
 8065a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8065a9a:	e0ce      	b.n	8065c3a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8065a9c:	4b71      	ldr	r3, [pc, #452]	; (8065c64 <USER_SPI_ioctl+0x2dc>)
 8065a9e:	781b      	ldrb	r3, [r3, #0]
 8065aa0:	f003 0304 	and.w	r3, r3, #4
 8065aa4:	2b00      	cmp	r3, #0
 8065aa6:	d031      	beq.n	8065b0c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8065aa8:	2100      	movs	r1, #0
 8065aaa:	208d      	movs	r0, #141	; 0x8d
 8065aac:	f7ff fd19 	bl	80654e2 <send_cmd>
 8065ab0:	4603      	mov	r3, r0
 8065ab2:	2b00      	cmp	r3, #0
 8065ab4:	f040 80c3 	bne.w	8065c3e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8065ab8:	20ff      	movs	r0, #255	; 0xff
 8065aba:	f7ff fc1f 	bl	80652fc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8065abe:	f107 030c 	add.w	r3, r7, #12
 8065ac2:	2110      	movs	r1, #16
 8065ac4:	4618      	mov	r0, r3
 8065ac6:	f7ff fcb1 	bl	806542c <rcvr_datablock>
 8065aca:	4603      	mov	r3, r0
 8065acc:	2b00      	cmp	r3, #0
 8065ace:	f000 80b6 	beq.w	8065c3e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8065ad2:	2330      	movs	r3, #48	; 0x30
 8065ad4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8065ad8:	e007      	b.n	8065aea <USER_SPI_ioctl+0x162>
 8065ada:	20ff      	movs	r0, #255	; 0xff
 8065adc:	f7ff fc0e 	bl	80652fc <xchg_spi>
 8065ae0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8065ae4:	3b01      	subs	r3, #1
 8065ae6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8065aea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8065aee:	2b00      	cmp	r3, #0
 8065af0:	d1f3      	bne.n	8065ada <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8065af2:	7dbb      	ldrb	r3, [r7, #22]
 8065af4:	091b      	lsrs	r3, r3, #4
 8065af6:	b2db      	uxtb	r3, r3
 8065af8:	461a      	mov	r2, r3
 8065afa:	2310      	movs	r3, #16
 8065afc:	fa03 f202 	lsl.w	r2, r3, r2
 8065b00:	683b      	ldr	r3, [r7, #0]
 8065b02:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8065b04:	2300      	movs	r3, #0
 8065b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8065b0a:	e098      	b.n	8065c3e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8065b0c:	2100      	movs	r1, #0
 8065b0e:	2009      	movs	r0, #9
 8065b10:	f7ff fce7 	bl	80654e2 <send_cmd>
 8065b14:	4603      	mov	r3, r0
 8065b16:	2b00      	cmp	r3, #0
 8065b18:	f040 8091 	bne.w	8065c3e <USER_SPI_ioctl+0x2b6>
 8065b1c:	f107 030c 	add.w	r3, r7, #12
 8065b20:	2110      	movs	r1, #16
 8065b22:	4618      	mov	r0, r3
 8065b24:	f7ff fc82 	bl	806542c <rcvr_datablock>
 8065b28:	4603      	mov	r3, r0
 8065b2a:	2b00      	cmp	r3, #0
 8065b2c:	f000 8087 	beq.w	8065c3e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8065b30:	4b4c      	ldr	r3, [pc, #304]	; (8065c64 <USER_SPI_ioctl+0x2dc>)
 8065b32:	781b      	ldrb	r3, [r3, #0]
 8065b34:	f003 0302 	and.w	r3, r3, #2
 8065b38:	2b00      	cmp	r3, #0
 8065b3a:	d012      	beq.n	8065b62 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8065b3c:	7dbb      	ldrb	r3, [r7, #22]
 8065b3e:	005b      	lsls	r3, r3, #1
 8065b40:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8065b44:	7dfa      	ldrb	r2, [r7, #23]
 8065b46:	09d2      	lsrs	r2, r2, #7
 8065b48:	b2d2      	uxtb	r2, r2
 8065b4a:	4413      	add	r3, r2
 8065b4c:	1c5a      	adds	r2, r3, #1
 8065b4e:	7e7b      	ldrb	r3, [r7, #25]
 8065b50:	099b      	lsrs	r3, r3, #6
 8065b52:	b2db      	uxtb	r3, r3
 8065b54:	3b01      	subs	r3, #1
 8065b56:	fa02 f303 	lsl.w	r3, r2, r3
 8065b5a:	461a      	mov	r2, r3
 8065b5c:	683b      	ldr	r3, [r7, #0]
 8065b5e:	601a      	str	r2, [r3, #0]
 8065b60:	e013      	b.n	8065b8a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8065b62:	7dbb      	ldrb	r3, [r7, #22]
 8065b64:	109b      	asrs	r3, r3, #2
 8065b66:	b29b      	uxth	r3, r3
 8065b68:	f003 031f 	and.w	r3, r3, #31
 8065b6c:	3301      	adds	r3, #1
 8065b6e:	7dfa      	ldrb	r2, [r7, #23]
 8065b70:	00d2      	lsls	r2, r2, #3
 8065b72:	f002 0218 	and.w	r2, r2, #24
 8065b76:	7df9      	ldrb	r1, [r7, #23]
 8065b78:	0949      	lsrs	r1, r1, #5
 8065b7a:	b2c9      	uxtb	r1, r1
 8065b7c:	440a      	add	r2, r1
 8065b7e:	3201      	adds	r2, #1
 8065b80:	fb02 f303 	mul.w	r3, r2, r3
 8065b84:	461a      	mov	r2, r3
 8065b86:	683b      	ldr	r3, [r7, #0]
 8065b88:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8065b8a:	2300      	movs	r3, #0
 8065b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8065b90:	e055      	b.n	8065c3e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8065b92:	4b34      	ldr	r3, [pc, #208]	; (8065c64 <USER_SPI_ioctl+0x2dc>)
 8065b94:	781b      	ldrb	r3, [r3, #0]
 8065b96:	f003 0306 	and.w	r3, r3, #6
 8065b9a:	2b00      	cmp	r3, #0
 8065b9c:	d051      	beq.n	8065c42 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8065b9e:	f107 020c 	add.w	r2, r7, #12
 8065ba2:	79fb      	ldrb	r3, [r7, #7]
 8065ba4:	210b      	movs	r1, #11
 8065ba6:	4618      	mov	r0, r3
 8065ba8:	f7ff feee 	bl	8065988 <USER_SPI_ioctl>
 8065bac:	4603      	mov	r3, r0
 8065bae:	2b00      	cmp	r3, #0
 8065bb0:	d149      	bne.n	8065c46 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8065bb2:	7b3b      	ldrb	r3, [r7, #12]
 8065bb4:	099b      	lsrs	r3, r3, #6
 8065bb6:	b2db      	uxtb	r3, r3
 8065bb8:	2b00      	cmp	r3, #0
 8065bba:	d104      	bne.n	8065bc6 <USER_SPI_ioctl+0x23e>
 8065bbc:	7dbb      	ldrb	r3, [r7, #22]
 8065bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8065bc2:	2b00      	cmp	r3, #0
 8065bc4:	d041      	beq.n	8065c4a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8065bc6:	683b      	ldr	r3, [r7, #0]
 8065bc8:	623b      	str	r3, [r7, #32]
 8065bca:	6a3b      	ldr	r3, [r7, #32]
 8065bcc:	681b      	ldr	r3, [r3, #0]
 8065bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8065bd0:	6a3b      	ldr	r3, [r7, #32]
 8065bd2:	685b      	ldr	r3, [r3, #4]
 8065bd4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8065bd6:	4b23      	ldr	r3, [pc, #140]	; (8065c64 <USER_SPI_ioctl+0x2dc>)
 8065bd8:	781b      	ldrb	r3, [r3, #0]
 8065bda:	f003 0308 	and.w	r3, r3, #8
 8065bde:	2b00      	cmp	r3, #0
 8065be0:	d105      	bne.n	8065bee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8065be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8065be4:	025b      	lsls	r3, r3, #9
 8065be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8065be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8065bea:	025b      	lsls	r3, r3, #9
 8065bec:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8065bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8065bf0:	2020      	movs	r0, #32
 8065bf2:	f7ff fc76 	bl	80654e2 <send_cmd>
 8065bf6:	4603      	mov	r3, r0
 8065bf8:	2b00      	cmp	r3, #0
 8065bfa:	d128      	bne.n	8065c4e <USER_SPI_ioctl+0x2c6>
 8065bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8065bfe:	2021      	movs	r0, #33	; 0x21
 8065c00:	f7ff fc6f 	bl	80654e2 <send_cmd>
 8065c04:	4603      	mov	r3, r0
 8065c06:	2b00      	cmp	r3, #0
 8065c08:	d121      	bne.n	8065c4e <USER_SPI_ioctl+0x2c6>
 8065c0a:	2100      	movs	r1, #0
 8065c0c:	2026      	movs	r0, #38	; 0x26
 8065c0e:	f7ff fc68 	bl	80654e2 <send_cmd>
 8065c12:	4603      	mov	r3, r0
 8065c14:	2b00      	cmp	r3, #0
 8065c16:	d11a      	bne.n	8065c4e <USER_SPI_ioctl+0x2c6>
 8065c18:	f247 5030 	movw	r0, #30000	; 0x7530
 8065c1c:	f7ff fbbb 	bl	8065396 <wait_ready>
 8065c20:	4603      	mov	r3, r0
 8065c22:	2b00      	cmp	r3, #0
 8065c24:	d013      	beq.n	8065c4e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8065c26:	2300      	movs	r3, #0
 8065c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8065c2c:	e00f      	b.n	8065c4e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8065c2e:	2304      	movs	r3, #4
 8065c30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8065c34:	e00c      	b.n	8065c50 <USER_SPI_ioctl+0x2c8>
		break;
 8065c36:	bf00      	nop
 8065c38:	e00a      	b.n	8065c50 <USER_SPI_ioctl+0x2c8>
		break;
 8065c3a:	bf00      	nop
 8065c3c:	e008      	b.n	8065c50 <USER_SPI_ioctl+0x2c8>
		break;
 8065c3e:	bf00      	nop
 8065c40:	e006      	b.n	8065c50 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8065c42:	bf00      	nop
 8065c44:	e004      	b.n	8065c50 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8065c46:	bf00      	nop
 8065c48:	e002      	b.n	8065c50 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8065c4a:	bf00      	nop
 8065c4c:	e000      	b.n	8065c50 <USER_SPI_ioctl+0x2c8>
		break;
 8065c4e:	bf00      	nop
	}

	despiselect();
 8065c50:	f7ff fbc4 	bl	80653dc <despiselect>

	return res;
 8065c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8065c58:	4618      	mov	r0, r3
 8065c5a:	3730      	adds	r7, #48	; 0x30
 8065c5c:	46bd      	mov	sp, r7
 8065c5e:	bd80      	pop	{r7, pc}
 8065c60:	20000020 	.word	0x20000020
 8065c64:	200001ac 	.word	0x200001ac

08065c68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8065c68:	b580      	push	{r7, lr}
 8065c6a:	b084      	sub	sp, #16
 8065c6c:	af00      	add	r7, sp, #0
 8065c6e:	4603      	mov	r3, r0
 8065c70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8065c72:	79fb      	ldrb	r3, [r7, #7]
 8065c74:	4a08      	ldr	r2, [pc, #32]	; (8065c98 <disk_status+0x30>)
 8065c76:	009b      	lsls	r3, r3, #2
 8065c78:	4413      	add	r3, r2
 8065c7a:	685b      	ldr	r3, [r3, #4]
 8065c7c:	685b      	ldr	r3, [r3, #4]
 8065c7e:	79fa      	ldrb	r2, [r7, #7]
 8065c80:	4905      	ldr	r1, [pc, #20]	; (8065c98 <disk_status+0x30>)
 8065c82:	440a      	add	r2, r1
 8065c84:	7a12      	ldrb	r2, [r2, #8]
 8065c86:	4610      	mov	r0, r2
 8065c88:	4798      	blx	r3
 8065c8a:	4603      	mov	r3, r0
 8065c8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8065c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8065c90:	4618      	mov	r0, r3
 8065c92:	3710      	adds	r7, #16
 8065c94:	46bd      	mov	sp, r7
 8065c96:	bd80      	pop	{r7, pc}
 8065c98:	200001d8 	.word	0x200001d8

08065c9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8065c9c:	b580      	push	{r7, lr}
 8065c9e:	b084      	sub	sp, #16
 8065ca0:	af00      	add	r7, sp, #0
 8065ca2:	4603      	mov	r3, r0
 8065ca4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8065ca6:	2300      	movs	r3, #0
 8065ca8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8065caa:	79fb      	ldrb	r3, [r7, #7]
 8065cac:	4a0d      	ldr	r2, [pc, #52]	; (8065ce4 <disk_initialize+0x48>)
 8065cae:	5cd3      	ldrb	r3, [r2, r3]
 8065cb0:	2b00      	cmp	r3, #0
 8065cb2:	d111      	bne.n	8065cd8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8065cb4:	79fb      	ldrb	r3, [r7, #7]
 8065cb6:	4a0b      	ldr	r2, [pc, #44]	; (8065ce4 <disk_initialize+0x48>)
 8065cb8:	2101      	movs	r1, #1
 8065cba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8065cbc:	79fb      	ldrb	r3, [r7, #7]
 8065cbe:	4a09      	ldr	r2, [pc, #36]	; (8065ce4 <disk_initialize+0x48>)
 8065cc0:	009b      	lsls	r3, r3, #2
 8065cc2:	4413      	add	r3, r2
 8065cc4:	685b      	ldr	r3, [r3, #4]
 8065cc6:	681b      	ldr	r3, [r3, #0]
 8065cc8:	79fa      	ldrb	r2, [r7, #7]
 8065cca:	4906      	ldr	r1, [pc, #24]	; (8065ce4 <disk_initialize+0x48>)
 8065ccc:	440a      	add	r2, r1
 8065cce:	7a12      	ldrb	r2, [r2, #8]
 8065cd0:	4610      	mov	r0, r2
 8065cd2:	4798      	blx	r3
 8065cd4:	4603      	mov	r3, r0
 8065cd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8065cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8065cda:	4618      	mov	r0, r3
 8065cdc:	3710      	adds	r7, #16
 8065cde:	46bd      	mov	sp, r7
 8065ce0:	bd80      	pop	{r7, pc}
 8065ce2:	bf00      	nop
 8065ce4:	200001d8 	.word	0x200001d8

08065ce8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8065ce8:	b590      	push	{r4, r7, lr}
 8065cea:	b087      	sub	sp, #28
 8065cec:	af00      	add	r7, sp, #0
 8065cee:	60b9      	str	r1, [r7, #8]
 8065cf0:	607a      	str	r2, [r7, #4]
 8065cf2:	603b      	str	r3, [r7, #0]
 8065cf4:	4603      	mov	r3, r0
 8065cf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8065cf8:	7bfb      	ldrb	r3, [r7, #15]
 8065cfa:	4a0a      	ldr	r2, [pc, #40]	; (8065d24 <disk_read+0x3c>)
 8065cfc:	009b      	lsls	r3, r3, #2
 8065cfe:	4413      	add	r3, r2
 8065d00:	685b      	ldr	r3, [r3, #4]
 8065d02:	689c      	ldr	r4, [r3, #8]
 8065d04:	7bfb      	ldrb	r3, [r7, #15]
 8065d06:	4a07      	ldr	r2, [pc, #28]	; (8065d24 <disk_read+0x3c>)
 8065d08:	4413      	add	r3, r2
 8065d0a:	7a18      	ldrb	r0, [r3, #8]
 8065d0c:	683b      	ldr	r3, [r7, #0]
 8065d0e:	687a      	ldr	r2, [r7, #4]
 8065d10:	68b9      	ldr	r1, [r7, #8]
 8065d12:	47a0      	blx	r4
 8065d14:	4603      	mov	r3, r0
 8065d16:	75fb      	strb	r3, [r7, #23]
  return res;
 8065d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8065d1a:	4618      	mov	r0, r3
 8065d1c:	371c      	adds	r7, #28
 8065d1e:	46bd      	mov	sp, r7
 8065d20:	bd90      	pop	{r4, r7, pc}
 8065d22:	bf00      	nop
 8065d24:	200001d8 	.word	0x200001d8

08065d28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8065d28:	b590      	push	{r4, r7, lr}
 8065d2a:	b087      	sub	sp, #28
 8065d2c:	af00      	add	r7, sp, #0
 8065d2e:	60b9      	str	r1, [r7, #8]
 8065d30:	607a      	str	r2, [r7, #4]
 8065d32:	603b      	str	r3, [r7, #0]
 8065d34:	4603      	mov	r3, r0
 8065d36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8065d38:	7bfb      	ldrb	r3, [r7, #15]
 8065d3a:	4a0a      	ldr	r2, [pc, #40]	; (8065d64 <disk_write+0x3c>)
 8065d3c:	009b      	lsls	r3, r3, #2
 8065d3e:	4413      	add	r3, r2
 8065d40:	685b      	ldr	r3, [r3, #4]
 8065d42:	68dc      	ldr	r4, [r3, #12]
 8065d44:	7bfb      	ldrb	r3, [r7, #15]
 8065d46:	4a07      	ldr	r2, [pc, #28]	; (8065d64 <disk_write+0x3c>)
 8065d48:	4413      	add	r3, r2
 8065d4a:	7a18      	ldrb	r0, [r3, #8]
 8065d4c:	683b      	ldr	r3, [r7, #0]
 8065d4e:	687a      	ldr	r2, [r7, #4]
 8065d50:	68b9      	ldr	r1, [r7, #8]
 8065d52:	47a0      	blx	r4
 8065d54:	4603      	mov	r3, r0
 8065d56:	75fb      	strb	r3, [r7, #23]
  return res;
 8065d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8065d5a:	4618      	mov	r0, r3
 8065d5c:	371c      	adds	r7, #28
 8065d5e:	46bd      	mov	sp, r7
 8065d60:	bd90      	pop	{r4, r7, pc}
 8065d62:	bf00      	nop
 8065d64:	200001d8 	.word	0x200001d8

08065d68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8065d68:	b580      	push	{r7, lr}
 8065d6a:	b084      	sub	sp, #16
 8065d6c:	af00      	add	r7, sp, #0
 8065d6e:	4603      	mov	r3, r0
 8065d70:	603a      	str	r2, [r7, #0]
 8065d72:	71fb      	strb	r3, [r7, #7]
 8065d74:	460b      	mov	r3, r1
 8065d76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8065d78:	79fb      	ldrb	r3, [r7, #7]
 8065d7a:	4a09      	ldr	r2, [pc, #36]	; (8065da0 <disk_ioctl+0x38>)
 8065d7c:	009b      	lsls	r3, r3, #2
 8065d7e:	4413      	add	r3, r2
 8065d80:	685b      	ldr	r3, [r3, #4]
 8065d82:	691b      	ldr	r3, [r3, #16]
 8065d84:	79fa      	ldrb	r2, [r7, #7]
 8065d86:	4906      	ldr	r1, [pc, #24]	; (8065da0 <disk_ioctl+0x38>)
 8065d88:	440a      	add	r2, r1
 8065d8a:	7a10      	ldrb	r0, [r2, #8]
 8065d8c:	79b9      	ldrb	r1, [r7, #6]
 8065d8e:	683a      	ldr	r2, [r7, #0]
 8065d90:	4798      	blx	r3
 8065d92:	4603      	mov	r3, r0
 8065d94:	73fb      	strb	r3, [r7, #15]
  return res;
 8065d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8065d98:	4618      	mov	r0, r3
 8065d9a:	3710      	adds	r7, #16
 8065d9c:	46bd      	mov	sp, r7
 8065d9e:	bd80      	pop	{r7, pc}
 8065da0:	200001d8 	.word	0x200001d8

08065da4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8065da4:	b480      	push	{r7}
 8065da6:	b085      	sub	sp, #20
 8065da8:	af00      	add	r7, sp, #0
 8065daa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8065dac:	687b      	ldr	r3, [r7, #4]
 8065dae:	3301      	adds	r3, #1
 8065db0:	781b      	ldrb	r3, [r3, #0]
 8065db2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8065db4:	89fb      	ldrh	r3, [r7, #14]
 8065db6:	021b      	lsls	r3, r3, #8
 8065db8:	b21a      	sxth	r2, r3
 8065dba:	687b      	ldr	r3, [r7, #4]
 8065dbc:	781b      	ldrb	r3, [r3, #0]
 8065dbe:	b21b      	sxth	r3, r3
 8065dc0:	4313      	orrs	r3, r2
 8065dc2:	b21b      	sxth	r3, r3
 8065dc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8065dc6:	89fb      	ldrh	r3, [r7, #14]
}
 8065dc8:	4618      	mov	r0, r3
 8065dca:	3714      	adds	r7, #20
 8065dcc:	46bd      	mov	sp, r7
 8065dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065dd2:	4770      	bx	lr

08065dd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8065dd4:	b480      	push	{r7}
 8065dd6:	b085      	sub	sp, #20
 8065dd8:	af00      	add	r7, sp, #0
 8065dda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8065ddc:	687b      	ldr	r3, [r7, #4]
 8065dde:	3303      	adds	r3, #3
 8065de0:	781b      	ldrb	r3, [r3, #0]
 8065de2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8065de4:	68fb      	ldr	r3, [r7, #12]
 8065de6:	021b      	lsls	r3, r3, #8
 8065de8:	687a      	ldr	r2, [r7, #4]
 8065dea:	3202      	adds	r2, #2
 8065dec:	7812      	ldrb	r2, [r2, #0]
 8065dee:	4313      	orrs	r3, r2
 8065df0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8065df2:	68fb      	ldr	r3, [r7, #12]
 8065df4:	021b      	lsls	r3, r3, #8
 8065df6:	687a      	ldr	r2, [r7, #4]
 8065df8:	3201      	adds	r2, #1
 8065dfa:	7812      	ldrb	r2, [r2, #0]
 8065dfc:	4313      	orrs	r3, r2
 8065dfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8065e00:	68fb      	ldr	r3, [r7, #12]
 8065e02:	021b      	lsls	r3, r3, #8
 8065e04:	687a      	ldr	r2, [r7, #4]
 8065e06:	7812      	ldrb	r2, [r2, #0]
 8065e08:	4313      	orrs	r3, r2
 8065e0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8065e0c:	68fb      	ldr	r3, [r7, #12]
}
 8065e0e:	4618      	mov	r0, r3
 8065e10:	3714      	adds	r7, #20
 8065e12:	46bd      	mov	sp, r7
 8065e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065e18:	4770      	bx	lr

08065e1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8065e1a:	b480      	push	{r7}
 8065e1c:	b083      	sub	sp, #12
 8065e1e:	af00      	add	r7, sp, #0
 8065e20:	6078      	str	r0, [r7, #4]
 8065e22:	460b      	mov	r3, r1
 8065e24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8065e26:	687b      	ldr	r3, [r7, #4]
 8065e28:	1c5a      	adds	r2, r3, #1
 8065e2a:	607a      	str	r2, [r7, #4]
 8065e2c:	887a      	ldrh	r2, [r7, #2]
 8065e2e:	b2d2      	uxtb	r2, r2
 8065e30:	701a      	strb	r2, [r3, #0]
 8065e32:	887b      	ldrh	r3, [r7, #2]
 8065e34:	0a1b      	lsrs	r3, r3, #8
 8065e36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8065e38:	687b      	ldr	r3, [r7, #4]
 8065e3a:	1c5a      	adds	r2, r3, #1
 8065e3c:	607a      	str	r2, [r7, #4]
 8065e3e:	887a      	ldrh	r2, [r7, #2]
 8065e40:	b2d2      	uxtb	r2, r2
 8065e42:	701a      	strb	r2, [r3, #0]
}
 8065e44:	bf00      	nop
 8065e46:	370c      	adds	r7, #12
 8065e48:	46bd      	mov	sp, r7
 8065e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065e4e:	4770      	bx	lr

08065e50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8065e50:	b480      	push	{r7}
 8065e52:	b083      	sub	sp, #12
 8065e54:	af00      	add	r7, sp, #0
 8065e56:	6078      	str	r0, [r7, #4]
 8065e58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8065e5a:	687b      	ldr	r3, [r7, #4]
 8065e5c:	1c5a      	adds	r2, r3, #1
 8065e5e:	607a      	str	r2, [r7, #4]
 8065e60:	683a      	ldr	r2, [r7, #0]
 8065e62:	b2d2      	uxtb	r2, r2
 8065e64:	701a      	strb	r2, [r3, #0]
 8065e66:	683b      	ldr	r3, [r7, #0]
 8065e68:	0a1b      	lsrs	r3, r3, #8
 8065e6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8065e6c:	687b      	ldr	r3, [r7, #4]
 8065e6e:	1c5a      	adds	r2, r3, #1
 8065e70:	607a      	str	r2, [r7, #4]
 8065e72:	683a      	ldr	r2, [r7, #0]
 8065e74:	b2d2      	uxtb	r2, r2
 8065e76:	701a      	strb	r2, [r3, #0]
 8065e78:	683b      	ldr	r3, [r7, #0]
 8065e7a:	0a1b      	lsrs	r3, r3, #8
 8065e7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8065e7e:	687b      	ldr	r3, [r7, #4]
 8065e80:	1c5a      	adds	r2, r3, #1
 8065e82:	607a      	str	r2, [r7, #4]
 8065e84:	683a      	ldr	r2, [r7, #0]
 8065e86:	b2d2      	uxtb	r2, r2
 8065e88:	701a      	strb	r2, [r3, #0]
 8065e8a:	683b      	ldr	r3, [r7, #0]
 8065e8c:	0a1b      	lsrs	r3, r3, #8
 8065e8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8065e90:	687b      	ldr	r3, [r7, #4]
 8065e92:	1c5a      	adds	r2, r3, #1
 8065e94:	607a      	str	r2, [r7, #4]
 8065e96:	683a      	ldr	r2, [r7, #0]
 8065e98:	b2d2      	uxtb	r2, r2
 8065e9a:	701a      	strb	r2, [r3, #0]
}
 8065e9c:	bf00      	nop
 8065e9e:	370c      	adds	r7, #12
 8065ea0:	46bd      	mov	sp, r7
 8065ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065ea6:	4770      	bx	lr

08065ea8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8065ea8:	b480      	push	{r7}
 8065eaa:	b087      	sub	sp, #28
 8065eac:	af00      	add	r7, sp, #0
 8065eae:	60f8      	str	r0, [r7, #12]
 8065eb0:	60b9      	str	r1, [r7, #8]
 8065eb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8065eb4:	68fb      	ldr	r3, [r7, #12]
 8065eb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8065eb8:	68bb      	ldr	r3, [r7, #8]
 8065eba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8065ebc:	687b      	ldr	r3, [r7, #4]
 8065ebe:	2b00      	cmp	r3, #0
 8065ec0:	d00d      	beq.n	8065ede <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8065ec2:	693a      	ldr	r2, [r7, #16]
 8065ec4:	1c53      	adds	r3, r2, #1
 8065ec6:	613b      	str	r3, [r7, #16]
 8065ec8:	697b      	ldr	r3, [r7, #20]
 8065eca:	1c59      	adds	r1, r3, #1
 8065ecc:	6179      	str	r1, [r7, #20]
 8065ece:	7812      	ldrb	r2, [r2, #0]
 8065ed0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8065ed2:	687b      	ldr	r3, [r7, #4]
 8065ed4:	3b01      	subs	r3, #1
 8065ed6:	607b      	str	r3, [r7, #4]
 8065ed8:	687b      	ldr	r3, [r7, #4]
 8065eda:	2b00      	cmp	r3, #0
 8065edc:	d1f1      	bne.n	8065ec2 <mem_cpy+0x1a>
	}
}
 8065ede:	bf00      	nop
 8065ee0:	371c      	adds	r7, #28
 8065ee2:	46bd      	mov	sp, r7
 8065ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065ee8:	4770      	bx	lr

08065eea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8065eea:	b480      	push	{r7}
 8065eec:	b087      	sub	sp, #28
 8065eee:	af00      	add	r7, sp, #0
 8065ef0:	60f8      	str	r0, [r7, #12]
 8065ef2:	60b9      	str	r1, [r7, #8]
 8065ef4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8065ef6:	68fb      	ldr	r3, [r7, #12]
 8065ef8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8065efa:	697b      	ldr	r3, [r7, #20]
 8065efc:	1c5a      	adds	r2, r3, #1
 8065efe:	617a      	str	r2, [r7, #20]
 8065f00:	68ba      	ldr	r2, [r7, #8]
 8065f02:	b2d2      	uxtb	r2, r2
 8065f04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8065f06:	687b      	ldr	r3, [r7, #4]
 8065f08:	3b01      	subs	r3, #1
 8065f0a:	607b      	str	r3, [r7, #4]
 8065f0c:	687b      	ldr	r3, [r7, #4]
 8065f0e:	2b00      	cmp	r3, #0
 8065f10:	d1f3      	bne.n	8065efa <mem_set+0x10>
}
 8065f12:	bf00      	nop
 8065f14:	bf00      	nop
 8065f16:	371c      	adds	r7, #28
 8065f18:	46bd      	mov	sp, r7
 8065f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065f1e:	4770      	bx	lr

08065f20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8065f20:	b480      	push	{r7}
 8065f22:	b089      	sub	sp, #36	; 0x24
 8065f24:	af00      	add	r7, sp, #0
 8065f26:	60f8      	str	r0, [r7, #12]
 8065f28:	60b9      	str	r1, [r7, #8]
 8065f2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8065f2c:	68fb      	ldr	r3, [r7, #12]
 8065f2e:	61fb      	str	r3, [r7, #28]
 8065f30:	68bb      	ldr	r3, [r7, #8]
 8065f32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8065f34:	2300      	movs	r3, #0
 8065f36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8065f38:	69fb      	ldr	r3, [r7, #28]
 8065f3a:	1c5a      	adds	r2, r3, #1
 8065f3c:	61fa      	str	r2, [r7, #28]
 8065f3e:	781b      	ldrb	r3, [r3, #0]
 8065f40:	4619      	mov	r1, r3
 8065f42:	69bb      	ldr	r3, [r7, #24]
 8065f44:	1c5a      	adds	r2, r3, #1
 8065f46:	61ba      	str	r2, [r7, #24]
 8065f48:	781b      	ldrb	r3, [r3, #0]
 8065f4a:	1acb      	subs	r3, r1, r3
 8065f4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8065f4e:	687b      	ldr	r3, [r7, #4]
 8065f50:	3b01      	subs	r3, #1
 8065f52:	607b      	str	r3, [r7, #4]
 8065f54:	687b      	ldr	r3, [r7, #4]
 8065f56:	2b00      	cmp	r3, #0
 8065f58:	d002      	beq.n	8065f60 <mem_cmp+0x40>
 8065f5a:	697b      	ldr	r3, [r7, #20]
 8065f5c:	2b00      	cmp	r3, #0
 8065f5e:	d0eb      	beq.n	8065f38 <mem_cmp+0x18>

	return r;
 8065f60:	697b      	ldr	r3, [r7, #20]
}
 8065f62:	4618      	mov	r0, r3
 8065f64:	3724      	adds	r7, #36	; 0x24
 8065f66:	46bd      	mov	sp, r7
 8065f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065f6c:	4770      	bx	lr

08065f6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8065f6e:	b480      	push	{r7}
 8065f70:	b083      	sub	sp, #12
 8065f72:	af00      	add	r7, sp, #0
 8065f74:	6078      	str	r0, [r7, #4]
 8065f76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8065f78:	e002      	b.n	8065f80 <chk_chr+0x12>
 8065f7a:	687b      	ldr	r3, [r7, #4]
 8065f7c:	3301      	adds	r3, #1
 8065f7e:	607b      	str	r3, [r7, #4]
 8065f80:	687b      	ldr	r3, [r7, #4]
 8065f82:	781b      	ldrb	r3, [r3, #0]
 8065f84:	2b00      	cmp	r3, #0
 8065f86:	d005      	beq.n	8065f94 <chk_chr+0x26>
 8065f88:	687b      	ldr	r3, [r7, #4]
 8065f8a:	781b      	ldrb	r3, [r3, #0]
 8065f8c:	461a      	mov	r2, r3
 8065f8e:	683b      	ldr	r3, [r7, #0]
 8065f90:	4293      	cmp	r3, r2
 8065f92:	d1f2      	bne.n	8065f7a <chk_chr+0xc>
	return *str;
 8065f94:	687b      	ldr	r3, [r7, #4]
 8065f96:	781b      	ldrb	r3, [r3, #0]
}
 8065f98:	4618      	mov	r0, r3
 8065f9a:	370c      	adds	r7, #12
 8065f9c:	46bd      	mov	sp, r7
 8065f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065fa2:	4770      	bx	lr

08065fa4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8065fa4:	b580      	push	{r7, lr}
 8065fa6:	b082      	sub	sp, #8
 8065fa8:	af00      	add	r7, sp, #0
 8065faa:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8065fac:	687b      	ldr	r3, [r7, #4]
 8065fae:	2b00      	cmp	r3, #0
 8065fb0:	d009      	beq.n	8065fc6 <lock_fs+0x22>
 8065fb2:	687b      	ldr	r3, [r7, #4]
 8065fb4:	68db      	ldr	r3, [r3, #12]
 8065fb6:	4618      	mov	r0, r3
 8065fb8:	f002 fb82 	bl	80686c0 <ff_req_grant>
 8065fbc:	4603      	mov	r3, r0
 8065fbe:	2b00      	cmp	r3, #0
 8065fc0:	d001      	beq.n	8065fc6 <lock_fs+0x22>
 8065fc2:	2301      	movs	r3, #1
 8065fc4:	e000      	b.n	8065fc8 <lock_fs+0x24>
 8065fc6:	2300      	movs	r3, #0
}
 8065fc8:	4618      	mov	r0, r3
 8065fca:	3708      	adds	r7, #8
 8065fcc:	46bd      	mov	sp, r7
 8065fce:	bd80      	pop	{r7, pc}

08065fd0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8065fd0:	b580      	push	{r7, lr}
 8065fd2:	b082      	sub	sp, #8
 8065fd4:	af00      	add	r7, sp, #0
 8065fd6:	6078      	str	r0, [r7, #4]
 8065fd8:	460b      	mov	r3, r1
 8065fda:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8065fdc:	687b      	ldr	r3, [r7, #4]
 8065fde:	2b00      	cmp	r3, #0
 8065fe0:	d00d      	beq.n	8065ffe <unlock_fs+0x2e>
 8065fe2:	78fb      	ldrb	r3, [r7, #3]
 8065fe4:	2b0c      	cmp	r3, #12
 8065fe6:	d00a      	beq.n	8065ffe <unlock_fs+0x2e>
 8065fe8:	78fb      	ldrb	r3, [r7, #3]
 8065fea:	2b0b      	cmp	r3, #11
 8065fec:	d007      	beq.n	8065ffe <unlock_fs+0x2e>
 8065fee:	78fb      	ldrb	r3, [r7, #3]
 8065ff0:	2b0f      	cmp	r3, #15
 8065ff2:	d004      	beq.n	8065ffe <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8065ff4:	687b      	ldr	r3, [r7, #4]
 8065ff6:	68db      	ldr	r3, [r3, #12]
 8065ff8:	4618      	mov	r0, r3
 8065ffa:	f002 fb76 	bl	80686ea <ff_rel_grant>
	}
}
 8065ffe:	bf00      	nop
 8066000:	3708      	adds	r7, #8
 8066002:	46bd      	mov	sp, r7
 8066004:	bd80      	pop	{r7, pc}
	...

08066008 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8066008:	b480      	push	{r7}
 806600a:	b085      	sub	sp, #20
 806600c:	af00      	add	r7, sp, #0
 806600e:	6078      	str	r0, [r7, #4]
 8066010:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8066012:	2300      	movs	r3, #0
 8066014:	60bb      	str	r3, [r7, #8]
 8066016:	68bb      	ldr	r3, [r7, #8]
 8066018:	60fb      	str	r3, [r7, #12]
 806601a:	e029      	b.n	8066070 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 806601c:	4a27      	ldr	r2, [pc, #156]	; (80660bc <chk_lock+0xb4>)
 806601e:	68fb      	ldr	r3, [r7, #12]
 8066020:	011b      	lsls	r3, r3, #4
 8066022:	4413      	add	r3, r2
 8066024:	681b      	ldr	r3, [r3, #0]
 8066026:	2b00      	cmp	r3, #0
 8066028:	d01d      	beq.n	8066066 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 806602a:	4a24      	ldr	r2, [pc, #144]	; (80660bc <chk_lock+0xb4>)
 806602c:	68fb      	ldr	r3, [r7, #12]
 806602e:	011b      	lsls	r3, r3, #4
 8066030:	4413      	add	r3, r2
 8066032:	681a      	ldr	r2, [r3, #0]
 8066034:	687b      	ldr	r3, [r7, #4]
 8066036:	681b      	ldr	r3, [r3, #0]
 8066038:	429a      	cmp	r2, r3
 806603a:	d116      	bne.n	806606a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 806603c:	4a1f      	ldr	r2, [pc, #124]	; (80660bc <chk_lock+0xb4>)
 806603e:	68fb      	ldr	r3, [r7, #12]
 8066040:	011b      	lsls	r3, r3, #4
 8066042:	4413      	add	r3, r2
 8066044:	3304      	adds	r3, #4
 8066046:	681a      	ldr	r2, [r3, #0]
 8066048:	687b      	ldr	r3, [r7, #4]
 806604a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 806604c:	429a      	cmp	r2, r3
 806604e:	d10c      	bne.n	806606a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8066050:	4a1a      	ldr	r2, [pc, #104]	; (80660bc <chk_lock+0xb4>)
 8066052:	68fb      	ldr	r3, [r7, #12]
 8066054:	011b      	lsls	r3, r3, #4
 8066056:	4413      	add	r3, r2
 8066058:	3308      	adds	r3, #8
 806605a:	681a      	ldr	r2, [r3, #0]
 806605c:	687b      	ldr	r3, [r7, #4]
 806605e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8066060:	429a      	cmp	r2, r3
 8066062:	d102      	bne.n	806606a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8066064:	e007      	b.n	8066076 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8066066:	2301      	movs	r3, #1
 8066068:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 806606a:	68fb      	ldr	r3, [r7, #12]
 806606c:	3301      	adds	r3, #1
 806606e:	60fb      	str	r3, [r7, #12]
 8066070:	68fb      	ldr	r3, [r7, #12]
 8066072:	2b01      	cmp	r3, #1
 8066074:	d9d2      	bls.n	806601c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8066076:	68fb      	ldr	r3, [r7, #12]
 8066078:	2b02      	cmp	r3, #2
 806607a:	d109      	bne.n	8066090 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 806607c:	68bb      	ldr	r3, [r7, #8]
 806607e:	2b00      	cmp	r3, #0
 8066080:	d102      	bne.n	8066088 <chk_lock+0x80>
 8066082:	683b      	ldr	r3, [r7, #0]
 8066084:	2b02      	cmp	r3, #2
 8066086:	d101      	bne.n	806608c <chk_lock+0x84>
 8066088:	2300      	movs	r3, #0
 806608a:	e010      	b.n	80660ae <chk_lock+0xa6>
 806608c:	2312      	movs	r3, #18
 806608e:	e00e      	b.n	80660ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8066090:	683b      	ldr	r3, [r7, #0]
 8066092:	2b00      	cmp	r3, #0
 8066094:	d108      	bne.n	80660a8 <chk_lock+0xa0>
 8066096:	4a09      	ldr	r2, [pc, #36]	; (80660bc <chk_lock+0xb4>)
 8066098:	68fb      	ldr	r3, [r7, #12]
 806609a:	011b      	lsls	r3, r3, #4
 806609c:	4413      	add	r3, r2
 806609e:	330c      	adds	r3, #12
 80660a0:	881b      	ldrh	r3, [r3, #0]
 80660a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80660a6:	d101      	bne.n	80660ac <chk_lock+0xa4>
 80660a8:	2310      	movs	r3, #16
 80660aa:	e000      	b.n	80660ae <chk_lock+0xa6>
 80660ac:	2300      	movs	r3, #0
}
 80660ae:	4618      	mov	r0, r3
 80660b0:	3714      	adds	r7, #20
 80660b2:	46bd      	mov	sp, r7
 80660b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80660b8:	4770      	bx	lr
 80660ba:	bf00      	nop
 80660bc:	200001b8 	.word	0x200001b8

080660c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80660c0:	b480      	push	{r7}
 80660c2:	b083      	sub	sp, #12
 80660c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80660c6:	2300      	movs	r3, #0
 80660c8:	607b      	str	r3, [r7, #4]
 80660ca:	e002      	b.n	80660d2 <enq_lock+0x12>
 80660cc:	687b      	ldr	r3, [r7, #4]
 80660ce:	3301      	adds	r3, #1
 80660d0:	607b      	str	r3, [r7, #4]
 80660d2:	687b      	ldr	r3, [r7, #4]
 80660d4:	2b01      	cmp	r3, #1
 80660d6:	d806      	bhi.n	80660e6 <enq_lock+0x26>
 80660d8:	4a09      	ldr	r2, [pc, #36]	; (8066100 <enq_lock+0x40>)
 80660da:	687b      	ldr	r3, [r7, #4]
 80660dc:	011b      	lsls	r3, r3, #4
 80660de:	4413      	add	r3, r2
 80660e0:	681b      	ldr	r3, [r3, #0]
 80660e2:	2b00      	cmp	r3, #0
 80660e4:	d1f2      	bne.n	80660cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80660e6:	687b      	ldr	r3, [r7, #4]
 80660e8:	2b02      	cmp	r3, #2
 80660ea:	bf14      	ite	ne
 80660ec:	2301      	movne	r3, #1
 80660ee:	2300      	moveq	r3, #0
 80660f0:	b2db      	uxtb	r3, r3
}
 80660f2:	4618      	mov	r0, r3
 80660f4:	370c      	adds	r7, #12
 80660f6:	46bd      	mov	sp, r7
 80660f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80660fc:	4770      	bx	lr
 80660fe:	bf00      	nop
 8066100:	200001b8 	.word	0x200001b8

08066104 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8066104:	b480      	push	{r7}
 8066106:	b085      	sub	sp, #20
 8066108:	af00      	add	r7, sp, #0
 806610a:	6078      	str	r0, [r7, #4]
 806610c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 806610e:	2300      	movs	r3, #0
 8066110:	60fb      	str	r3, [r7, #12]
 8066112:	e01f      	b.n	8066154 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8066114:	4a41      	ldr	r2, [pc, #260]	; (806621c <inc_lock+0x118>)
 8066116:	68fb      	ldr	r3, [r7, #12]
 8066118:	011b      	lsls	r3, r3, #4
 806611a:	4413      	add	r3, r2
 806611c:	681a      	ldr	r2, [r3, #0]
 806611e:	687b      	ldr	r3, [r7, #4]
 8066120:	681b      	ldr	r3, [r3, #0]
 8066122:	429a      	cmp	r2, r3
 8066124:	d113      	bne.n	806614e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8066126:	4a3d      	ldr	r2, [pc, #244]	; (806621c <inc_lock+0x118>)
 8066128:	68fb      	ldr	r3, [r7, #12]
 806612a:	011b      	lsls	r3, r3, #4
 806612c:	4413      	add	r3, r2
 806612e:	3304      	adds	r3, #4
 8066130:	681a      	ldr	r2, [r3, #0]
 8066132:	687b      	ldr	r3, [r7, #4]
 8066134:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8066136:	429a      	cmp	r2, r3
 8066138:	d109      	bne.n	806614e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 806613a:	4a38      	ldr	r2, [pc, #224]	; (806621c <inc_lock+0x118>)
 806613c:	68fb      	ldr	r3, [r7, #12]
 806613e:	011b      	lsls	r3, r3, #4
 8066140:	4413      	add	r3, r2
 8066142:	3308      	adds	r3, #8
 8066144:	681a      	ldr	r2, [r3, #0]
 8066146:	687b      	ldr	r3, [r7, #4]
 8066148:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 806614a:	429a      	cmp	r2, r3
 806614c:	d006      	beq.n	806615c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 806614e:	68fb      	ldr	r3, [r7, #12]
 8066150:	3301      	adds	r3, #1
 8066152:	60fb      	str	r3, [r7, #12]
 8066154:	68fb      	ldr	r3, [r7, #12]
 8066156:	2b01      	cmp	r3, #1
 8066158:	d9dc      	bls.n	8066114 <inc_lock+0x10>
 806615a:	e000      	b.n	806615e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 806615c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 806615e:	68fb      	ldr	r3, [r7, #12]
 8066160:	2b02      	cmp	r3, #2
 8066162:	d132      	bne.n	80661ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8066164:	2300      	movs	r3, #0
 8066166:	60fb      	str	r3, [r7, #12]
 8066168:	e002      	b.n	8066170 <inc_lock+0x6c>
 806616a:	68fb      	ldr	r3, [r7, #12]
 806616c:	3301      	adds	r3, #1
 806616e:	60fb      	str	r3, [r7, #12]
 8066170:	68fb      	ldr	r3, [r7, #12]
 8066172:	2b01      	cmp	r3, #1
 8066174:	d806      	bhi.n	8066184 <inc_lock+0x80>
 8066176:	4a29      	ldr	r2, [pc, #164]	; (806621c <inc_lock+0x118>)
 8066178:	68fb      	ldr	r3, [r7, #12]
 806617a:	011b      	lsls	r3, r3, #4
 806617c:	4413      	add	r3, r2
 806617e:	681b      	ldr	r3, [r3, #0]
 8066180:	2b00      	cmp	r3, #0
 8066182:	d1f2      	bne.n	806616a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8066184:	68fb      	ldr	r3, [r7, #12]
 8066186:	2b02      	cmp	r3, #2
 8066188:	d101      	bne.n	806618e <inc_lock+0x8a>
 806618a:	2300      	movs	r3, #0
 806618c:	e040      	b.n	8066210 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 806618e:	687b      	ldr	r3, [r7, #4]
 8066190:	681a      	ldr	r2, [r3, #0]
 8066192:	4922      	ldr	r1, [pc, #136]	; (806621c <inc_lock+0x118>)
 8066194:	68fb      	ldr	r3, [r7, #12]
 8066196:	011b      	lsls	r3, r3, #4
 8066198:	440b      	add	r3, r1
 806619a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 806619c:	687b      	ldr	r3, [r7, #4]
 806619e:	689a      	ldr	r2, [r3, #8]
 80661a0:	491e      	ldr	r1, [pc, #120]	; (806621c <inc_lock+0x118>)
 80661a2:	68fb      	ldr	r3, [r7, #12]
 80661a4:	011b      	lsls	r3, r3, #4
 80661a6:	440b      	add	r3, r1
 80661a8:	3304      	adds	r3, #4
 80661aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80661ac:	687b      	ldr	r3, [r7, #4]
 80661ae:	695a      	ldr	r2, [r3, #20]
 80661b0:	491a      	ldr	r1, [pc, #104]	; (806621c <inc_lock+0x118>)
 80661b2:	68fb      	ldr	r3, [r7, #12]
 80661b4:	011b      	lsls	r3, r3, #4
 80661b6:	440b      	add	r3, r1
 80661b8:	3308      	adds	r3, #8
 80661ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80661bc:	4a17      	ldr	r2, [pc, #92]	; (806621c <inc_lock+0x118>)
 80661be:	68fb      	ldr	r3, [r7, #12]
 80661c0:	011b      	lsls	r3, r3, #4
 80661c2:	4413      	add	r3, r2
 80661c4:	330c      	adds	r3, #12
 80661c6:	2200      	movs	r2, #0
 80661c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80661ca:	683b      	ldr	r3, [r7, #0]
 80661cc:	2b00      	cmp	r3, #0
 80661ce:	d009      	beq.n	80661e4 <inc_lock+0xe0>
 80661d0:	4a12      	ldr	r2, [pc, #72]	; (806621c <inc_lock+0x118>)
 80661d2:	68fb      	ldr	r3, [r7, #12]
 80661d4:	011b      	lsls	r3, r3, #4
 80661d6:	4413      	add	r3, r2
 80661d8:	330c      	adds	r3, #12
 80661da:	881b      	ldrh	r3, [r3, #0]
 80661dc:	2b00      	cmp	r3, #0
 80661de:	d001      	beq.n	80661e4 <inc_lock+0xe0>
 80661e0:	2300      	movs	r3, #0
 80661e2:	e015      	b.n	8066210 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80661e4:	683b      	ldr	r3, [r7, #0]
 80661e6:	2b00      	cmp	r3, #0
 80661e8:	d108      	bne.n	80661fc <inc_lock+0xf8>
 80661ea:	4a0c      	ldr	r2, [pc, #48]	; (806621c <inc_lock+0x118>)
 80661ec:	68fb      	ldr	r3, [r7, #12]
 80661ee:	011b      	lsls	r3, r3, #4
 80661f0:	4413      	add	r3, r2
 80661f2:	330c      	adds	r3, #12
 80661f4:	881b      	ldrh	r3, [r3, #0]
 80661f6:	3301      	adds	r3, #1
 80661f8:	b29a      	uxth	r2, r3
 80661fa:	e001      	b.n	8066200 <inc_lock+0xfc>
 80661fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8066200:	4906      	ldr	r1, [pc, #24]	; (806621c <inc_lock+0x118>)
 8066202:	68fb      	ldr	r3, [r7, #12]
 8066204:	011b      	lsls	r3, r3, #4
 8066206:	440b      	add	r3, r1
 8066208:	330c      	adds	r3, #12
 806620a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 806620c:	68fb      	ldr	r3, [r7, #12]
 806620e:	3301      	adds	r3, #1
}
 8066210:	4618      	mov	r0, r3
 8066212:	3714      	adds	r7, #20
 8066214:	46bd      	mov	sp, r7
 8066216:	f85d 7b04 	ldr.w	r7, [sp], #4
 806621a:	4770      	bx	lr
 806621c:	200001b8 	.word	0x200001b8

08066220 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8066220:	b480      	push	{r7}
 8066222:	b085      	sub	sp, #20
 8066224:	af00      	add	r7, sp, #0
 8066226:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8066228:	687b      	ldr	r3, [r7, #4]
 806622a:	3b01      	subs	r3, #1
 806622c:	607b      	str	r3, [r7, #4]
 806622e:	687b      	ldr	r3, [r7, #4]
 8066230:	2b01      	cmp	r3, #1
 8066232:	d825      	bhi.n	8066280 <dec_lock+0x60>
		n = Files[i].ctr;
 8066234:	4a17      	ldr	r2, [pc, #92]	; (8066294 <dec_lock+0x74>)
 8066236:	687b      	ldr	r3, [r7, #4]
 8066238:	011b      	lsls	r3, r3, #4
 806623a:	4413      	add	r3, r2
 806623c:	330c      	adds	r3, #12
 806623e:	881b      	ldrh	r3, [r3, #0]
 8066240:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8066242:	89fb      	ldrh	r3, [r7, #14]
 8066244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066248:	d101      	bne.n	806624e <dec_lock+0x2e>
 806624a:	2300      	movs	r3, #0
 806624c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 806624e:	89fb      	ldrh	r3, [r7, #14]
 8066250:	2b00      	cmp	r3, #0
 8066252:	d002      	beq.n	806625a <dec_lock+0x3a>
 8066254:	89fb      	ldrh	r3, [r7, #14]
 8066256:	3b01      	subs	r3, #1
 8066258:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 806625a:	4a0e      	ldr	r2, [pc, #56]	; (8066294 <dec_lock+0x74>)
 806625c:	687b      	ldr	r3, [r7, #4]
 806625e:	011b      	lsls	r3, r3, #4
 8066260:	4413      	add	r3, r2
 8066262:	330c      	adds	r3, #12
 8066264:	89fa      	ldrh	r2, [r7, #14]
 8066266:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8066268:	89fb      	ldrh	r3, [r7, #14]
 806626a:	2b00      	cmp	r3, #0
 806626c:	d105      	bne.n	806627a <dec_lock+0x5a>
 806626e:	4a09      	ldr	r2, [pc, #36]	; (8066294 <dec_lock+0x74>)
 8066270:	687b      	ldr	r3, [r7, #4]
 8066272:	011b      	lsls	r3, r3, #4
 8066274:	4413      	add	r3, r2
 8066276:	2200      	movs	r2, #0
 8066278:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 806627a:	2300      	movs	r3, #0
 806627c:	737b      	strb	r3, [r7, #13]
 806627e:	e001      	b.n	8066284 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8066280:	2302      	movs	r3, #2
 8066282:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8066284:	7b7b      	ldrb	r3, [r7, #13]
}
 8066286:	4618      	mov	r0, r3
 8066288:	3714      	adds	r7, #20
 806628a:	46bd      	mov	sp, r7
 806628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066290:	4770      	bx	lr
 8066292:	bf00      	nop
 8066294:	200001b8 	.word	0x200001b8

08066298 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8066298:	b480      	push	{r7}
 806629a:	b085      	sub	sp, #20
 806629c:	af00      	add	r7, sp, #0
 806629e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80662a0:	2300      	movs	r3, #0
 80662a2:	60fb      	str	r3, [r7, #12]
 80662a4:	e010      	b.n	80662c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80662a6:	4a0d      	ldr	r2, [pc, #52]	; (80662dc <clear_lock+0x44>)
 80662a8:	68fb      	ldr	r3, [r7, #12]
 80662aa:	011b      	lsls	r3, r3, #4
 80662ac:	4413      	add	r3, r2
 80662ae:	681b      	ldr	r3, [r3, #0]
 80662b0:	687a      	ldr	r2, [r7, #4]
 80662b2:	429a      	cmp	r2, r3
 80662b4:	d105      	bne.n	80662c2 <clear_lock+0x2a>
 80662b6:	4a09      	ldr	r2, [pc, #36]	; (80662dc <clear_lock+0x44>)
 80662b8:	68fb      	ldr	r3, [r7, #12]
 80662ba:	011b      	lsls	r3, r3, #4
 80662bc:	4413      	add	r3, r2
 80662be:	2200      	movs	r2, #0
 80662c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80662c2:	68fb      	ldr	r3, [r7, #12]
 80662c4:	3301      	adds	r3, #1
 80662c6:	60fb      	str	r3, [r7, #12]
 80662c8:	68fb      	ldr	r3, [r7, #12]
 80662ca:	2b01      	cmp	r3, #1
 80662cc:	d9eb      	bls.n	80662a6 <clear_lock+0xe>
	}
}
 80662ce:	bf00      	nop
 80662d0:	bf00      	nop
 80662d2:	3714      	adds	r7, #20
 80662d4:	46bd      	mov	sp, r7
 80662d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80662da:	4770      	bx	lr
 80662dc:	200001b8 	.word	0x200001b8

080662e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80662e0:	b580      	push	{r7, lr}
 80662e2:	b086      	sub	sp, #24
 80662e4:	af00      	add	r7, sp, #0
 80662e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80662e8:	2300      	movs	r3, #0
 80662ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80662ec:	687b      	ldr	r3, [r7, #4]
 80662ee:	78db      	ldrb	r3, [r3, #3]
 80662f0:	2b00      	cmp	r3, #0
 80662f2:	d034      	beq.n	806635e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80662f4:	687b      	ldr	r3, [r7, #4]
 80662f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80662f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80662fa:	687b      	ldr	r3, [r7, #4]
 80662fc:	7858      	ldrb	r0, [r3, #1]
 80662fe:	687b      	ldr	r3, [r7, #4]
 8066300:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8066304:	2301      	movs	r3, #1
 8066306:	697a      	ldr	r2, [r7, #20]
 8066308:	f7ff fd0e 	bl	8065d28 <disk_write>
 806630c:	4603      	mov	r3, r0
 806630e:	2b00      	cmp	r3, #0
 8066310:	d002      	beq.n	8066318 <sync_window+0x38>
			res = FR_DISK_ERR;
 8066312:	2301      	movs	r3, #1
 8066314:	73fb      	strb	r3, [r7, #15]
 8066316:	e022      	b.n	806635e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8066318:	687b      	ldr	r3, [r7, #4]
 806631a:	2200      	movs	r2, #0
 806631c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 806631e:	687b      	ldr	r3, [r7, #4]
 8066320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066322:	697a      	ldr	r2, [r7, #20]
 8066324:	1ad2      	subs	r2, r2, r3
 8066326:	687b      	ldr	r3, [r7, #4]
 8066328:	69db      	ldr	r3, [r3, #28]
 806632a:	429a      	cmp	r2, r3
 806632c:	d217      	bcs.n	806635e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 806632e:	687b      	ldr	r3, [r7, #4]
 8066330:	789b      	ldrb	r3, [r3, #2]
 8066332:	613b      	str	r3, [r7, #16]
 8066334:	e010      	b.n	8066358 <sync_window+0x78>
					wsect += fs->fsize;
 8066336:	687b      	ldr	r3, [r7, #4]
 8066338:	69db      	ldr	r3, [r3, #28]
 806633a:	697a      	ldr	r2, [r7, #20]
 806633c:	4413      	add	r3, r2
 806633e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8066340:	687b      	ldr	r3, [r7, #4]
 8066342:	7858      	ldrb	r0, [r3, #1]
 8066344:	687b      	ldr	r3, [r7, #4]
 8066346:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806634a:	2301      	movs	r3, #1
 806634c:	697a      	ldr	r2, [r7, #20]
 806634e:	f7ff fceb 	bl	8065d28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8066352:	693b      	ldr	r3, [r7, #16]
 8066354:	3b01      	subs	r3, #1
 8066356:	613b      	str	r3, [r7, #16]
 8066358:	693b      	ldr	r3, [r7, #16]
 806635a:	2b01      	cmp	r3, #1
 806635c:	d8eb      	bhi.n	8066336 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 806635e:	7bfb      	ldrb	r3, [r7, #15]
}
 8066360:	4618      	mov	r0, r3
 8066362:	3718      	adds	r7, #24
 8066364:	46bd      	mov	sp, r7
 8066366:	bd80      	pop	{r7, pc}

08066368 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8066368:	b580      	push	{r7, lr}
 806636a:	b084      	sub	sp, #16
 806636c:	af00      	add	r7, sp, #0
 806636e:	6078      	str	r0, [r7, #4]
 8066370:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8066372:	2300      	movs	r3, #0
 8066374:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8066376:	687b      	ldr	r3, [r7, #4]
 8066378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806637a:	683a      	ldr	r2, [r7, #0]
 806637c:	429a      	cmp	r2, r3
 806637e:	d01b      	beq.n	80663b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8066380:	6878      	ldr	r0, [r7, #4]
 8066382:	f7ff ffad 	bl	80662e0 <sync_window>
 8066386:	4603      	mov	r3, r0
 8066388:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 806638a:	7bfb      	ldrb	r3, [r7, #15]
 806638c:	2b00      	cmp	r3, #0
 806638e:	d113      	bne.n	80663b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8066390:	687b      	ldr	r3, [r7, #4]
 8066392:	7858      	ldrb	r0, [r3, #1]
 8066394:	687b      	ldr	r3, [r7, #4]
 8066396:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806639a:	2301      	movs	r3, #1
 806639c:	683a      	ldr	r2, [r7, #0]
 806639e:	f7ff fca3 	bl	8065ce8 <disk_read>
 80663a2:	4603      	mov	r3, r0
 80663a4:	2b00      	cmp	r3, #0
 80663a6:	d004      	beq.n	80663b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80663a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80663ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80663ae:	2301      	movs	r3, #1
 80663b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80663b2:	687b      	ldr	r3, [r7, #4]
 80663b4:	683a      	ldr	r2, [r7, #0]
 80663b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80663b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80663ba:	4618      	mov	r0, r3
 80663bc:	3710      	adds	r7, #16
 80663be:	46bd      	mov	sp, r7
 80663c0:	bd80      	pop	{r7, pc}
	...

080663c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80663c4:	b580      	push	{r7, lr}
 80663c6:	b084      	sub	sp, #16
 80663c8:	af00      	add	r7, sp, #0
 80663ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80663cc:	6878      	ldr	r0, [r7, #4]
 80663ce:	f7ff ff87 	bl	80662e0 <sync_window>
 80663d2:	4603      	mov	r3, r0
 80663d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80663d6:	7bfb      	ldrb	r3, [r7, #15]
 80663d8:	2b00      	cmp	r3, #0
 80663da:	d158      	bne.n	806648e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80663dc:	687b      	ldr	r3, [r7, #4]
 80663de:	781b      	ldrb	r3, [r3, #0]
 80663e0:	2b03      	cmp	r3, #3
 80663e2:	d148      	bne.n	8066476 <sync_fs+0xb2>
 80663e4:	687b      	ldr	r3, [r7, #4]
 80663e6:	791b      	ldrb	r3, [r3, #4]
 80663e8:	2b01      	cmp	r3, #1
 80663ea:	d144      	bne.n	8066476 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80663ec:	687b      	ldr	r3, [r7, #4]
 80663ee:	3334      	adds	r3, #52	; 0x34
 80663f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80663f4:	2100      	movs	r1, #0
 80663f6:	4618      	mov	r0, r3
 80663f8:	f7ff fd77 	bl	8065eea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80663fc:	687b      	ldr	r3, [r7, #4]
 80663fe:	3334      	adds	r3, #52	; 0x34
 8066400:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8066404:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8066408:	4618      	mov	r0, r3
 806640a:	f7ff fd06 	bl	8065e1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 806640e:	687b      	ldr	r3, [r7, #4]
 8066410:	3334      	adds	r3, #52	; 0x34
 8066412:	4921      	ldr	r1, [pc, #132]	; (8066498 <sync_fs+0xd4>)
 8066414:	4618      	mov	r0, r3
 8066416:	f7ff fd1b 	bl	8065e50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 806641a:	687b      	ldr	r3, [r7, #4]
 806641c:	3334      	adds	r3, #52	; 0x34
 806641e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8066422:	491e      	ldr	r1, [pc, #120]	; (806649c <sync_fs+0xd8>)
 8066424:	4618      	mov	r0, r3
 8066426:	f7ff fd13 	bl	8065e50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 806642a:	687b      	ldr	r3, [r7, #4]
 806642c:	3334      	adds	r3, #52	; 0x34
 806642e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8066432:	687b      	ldr	r3, [r7, #4]
 8066434:	695b      	ldr	r3, [r3, #20]
 8066436:	4619      	mov	r1, r3
 8066438:	4610      	mov	r0, r2
 806643a:	f7ff fd09 	bl	8065e50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 806643e:	687b      	ldr	r3, [r7, #4]
 8066440:	3334      	adds	r3, #52	; 0x34
 8066442:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8066446:	687b      	ldr	r3, [r7, #4]
 8066448:	691b      	ldr	r3, [r3, #16]
 806644a:	4619      	mov	r1, r3
 806644c:	4610      	mov	r0, r2
 806644e:	f7ff fcff 	bl	8065e50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8066452:	687b      	ldr	r3, [r7, #4]
 8066454:	6a1b      	ldr	r3, [r3, #32]
 8066456:	1c5a      	adds	r2, r3, #1
 8066458:	687b      	ldr	r3, [r7, #4]
 806645a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 806645c:	687b      	ldr	r3, [r7, #4]
 806645e:	7858      	ldrb	r0, [r3, #1]
 8066460:	687b      	ldr	r3, [r7, #4]
 8066462:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8066466:	687b      	ldr	r3, [r7, #4]
 8066468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806646a:	2301      	movs	r3, #1
 806646c:	f7ff fc5c 	bl	8065d28 <disk_write>
			fs->fsi_flag = 0;
 8066470:	687b      	ldr	r3, [r7, #4]
 8066472:	2200      	movs	r2, #0
 8066474:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8066476:	687b      	ldr	r3, [r7, #4]
 8066478:	785b      	ldrb	r3, [r3, #1]
 806647a:	2200      	movs	r2, #0
 806647c:	2100      	movs	r1, #0
 806647e:	4618      	mov	r0, r3
 8066480:	f7ff fc72 	bl	8065d68 <disk_ioctl>
 8066484:	4603      	mov	r3, r0
 8066486:	2b00      	cmp	r3, #0
 8066488:	d001      	beq.n	806648e <sync_fs+0xca>
 806648a:	2301      	movs	r3, #1
 806648c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 806648e:	7bfb      	ldrb	r3, [r7, #15]
}
 8066490:	4618      	mov	r0, r3
 8066492:	3710      	adds	r7, #16
 8066494:	46bd      	mov	sp, r7
 8066496:	bd80      	pop	{r7, pc}
 8066498:	41615252 	.word	0x41615252
 806649c:	61417272 	.word	0x61417272

080664a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80664a0:	b480      	push	{r7}
 80664a2:	b083      	sub	sp, #12
 80664a4:	af00      	add	r7, sp, #0
 80664a6:	6078      	str	r0, [r7, #4]
 80664a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80664aa:	683b      	ldr	r3, [r7, #0]
 80664ac:	3b02      	subs	r3, #2
 80664ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80664b0:	687b      	ldr	r3, [r7, #4]
 80664b2:	699b      	ldr	r3, [r3, #24]
 80664b4:	3b02      	subs	r3, #2
 80664b6:	683a      	ldr	r2, [r7, #0]
 80664b8:	429a      	cmp	r2, r3
 80664ba:	d301      	bcc.n	80664c0 <clust2sect+0x20>
 80664bc:	2300      	movs	r3, #0
 80664be:	e008      	b.n	80664d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80664c0:	687b      	ldr	r3, [r7, #4]
 80664c2:	895b      	ldrh	r3, [r3, #10]
 80664c4:	461a      	mov	r2, r3
 80664c6:	683b      	ldr	r3, [r7, #0]
 80664c8:	fb03 f202 	mul.w	r2, r3, r2
 80664cc:	687b      	ldr	r3, [r7, #4]
 80664ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80664d0:	4413      	add	r3, r2
}
 80664d2:	4618      	mov	r0, r3
 80664d4:	370c      	adds	r7, #12
 80664d6:	46bd      	mov	sp, r7
 80664d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80664dc:	4770      	bx	lr

080664de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80664de:	b580      	push	{r7, lr}
 80664e0:	b086      	sub	sp, #24
 80664e2:	af00      	add	r7, sp, #0
 80664e4:	6078      	str	r0, [r7, #4]
 80664e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80664e8:	687b      	ldr	r3, [r7, #4]
 80664ea:	681b      	ldr	r3, [r3, #0]
 80664ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80664ee:	683b      	ldr	r3, [r7, #0]
 80664f0:	2b01      	cmp	r3, #1
 80664f2:	d904      	bls.n	80664fe <get_fat+0x20>
 80664f4:	693b      	ldr	r3, [r7, #16]
 80664f6:	699b      	ldr	r3, [r3, #24]
 80664f8:	683a      	ldr	r2, [r7, #0]
 80664fa:	429a      	cmp	r2, r3
 80664fc:	d302      	bcc.n	8066504 <get_fat+0x26>
		val = 1;	/* Internal error */
 80664fe:	2301      	movs	r3, #1
 8066500:	617b      	str	r3, [r7, #20]
 8066502:	e08f      	b.n	8066624 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8066504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8066508:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 806650a:	693b      	ldr	r3, [r7, #16]
 806650c:	781b      	ldrb	r3, [r3, #0]
 806650e:	2b03      	cmp	r3, #3
 8066510:	d062      	beq.n	80665d8 <get_fat+0xfa>
 8066512:	2b03      	cmp	r3, #3
 8066514:	dc7c      	bgt.n	8066610 <get_fat+0x132>
 8066516:	2b01      	cmp	r3, #1
 8066518:	d002      	beq.n	8066520 <get_fat+0x42>
 806651a:	2b02      	cmp	r3, #2
 806651c:	d042      	beq.n	80665a4 <get_fat+0xc6>
 806651e:	e077      	b.n	8066610 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8066520:	683b      	ldr	r3, [r7, #0]
 8066522:	60fb      	str	r3, [r7, #12]
 8066524:	68fb      	ldr	r3, [r7, #12]
 8066526:	085b      	lsrs	r3, r3, #1
 8066528:	68fa      	ldr	r2, [r7, #12]
 806652a:	4413      	add	r3, r2
 806652c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806652e:	693b      	ldr	r3, [r7, #16]
 8066530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8066532:	68fb      	ldr	r3, [r7, #12]
 8066534:	0a5b      	lsrs	r3, r3, #9
 8066536:	4413      	add	r3, r2
 8066538:	4619      	mov	r1, r3
 806653a:	6938      	ldr	r0, [r7, #16]
 806653c:	f7ff ff14 	bl	8066368 <move_window>
 8066540:	4603      	mov	r3, r0
 8066542:	2b00      	cmp	r3, #0
 8066544:	d167      	bne.n	8066616 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8066546:	68fb      	ldr	r3, [r7, #12]
 8066548:	1c5a      	adds	r2, r3, #1
 806654a:	60fa      	str	r2, [r7, #12]
 806654c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066550:	693a      	ldr	r2, [r7, #16]
 8066552:	4413      	add	r3, r2
 8066554:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8066558:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806655a:	693b      	ldr	r3, [r7, #16]
 806655c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806655e:	68fb      	ldr	r3, [r7, #12]
 8066560:	0a5b      	lsrs	r3, r3, #9
 8066562:	4413      	add	r3, r2
 8066564:	4619      	mov	r1, r3
 8066566:	6938      	ldr	r0, [r7, #16]
 8066568:	f7ff fefe 	bl	8066368 <move_window>
 806656c:	4603      	mov	r3, r0
 806656e:	2b00      	cmp	r3, #0
 8066570:	d153      	bne.n	806661a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8066572:	68fb      	ldr	r3, [r7, #12]
 8066574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066578:	693a      	ldr	r2, [r7, #16]
 806657a:	4413      	add	r3, r2
 806657c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8066580:	021b      	lsls	r3, r3, #8
 8066582:	461a      	mov	r2, r3
 8066584:	68bb      	ldr	r3, [r7, #8]
 8066586:	4313      	orrs	r3, r2
 8066588:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 806658a:	683b      	ldr	r3, [r7, #0]
 806658c:	f003 0301 	and.w	r3, r3, #1
 8066590:	2b00      	cmp	r3, #0
 8066592:	d002      	beq.n	806659a <get_fat+0xbc>
 8066594:	68bb      	ldr	r3, [r7, #8]
 8066596:	091b      	lsrs	r3, r3, #4
 8066598:	e002      	b.n	80665a0 <get_fat+0xc2>
 806659a:	68bb      	ldr	r3, [r7, #8]
 806659c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80665a0:	617b      	str	r3, [r7, #20]
			break;
 80665a2:	e03f      	b.n	8066624 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80665a4:	693b      	ldr	r3, [r7, #16]
 80665a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80665a8:	683b      	ldr	r3, [r7, #0]
 80665aa:	0a1b      	lsrs	r3, r3, #8
 80665ac:	4413      	add	r3, r2
 80665ae:	4619      	mov	r1, r3
 80665b0:	6938      	ldr	r0, [r7, #16]
 80665b2:	f7ff fed9 	bl	8066368 <move_window>
 80665b6:	4603      	mov	r3, r0
 80665b8:	2b00      	cmp	r3, #0
 80665ba:	d130      	bne.n	806661e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80665bc:	693b      	ldr	r3, [r7, #16]
 80665be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80665c2:	683b      	ldr	r3, [r7, #0]
 80665c4:	005b      	lsls	r3, r3, #1
 80665c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80665ca:	4413      	add	r3, r2
 80665cc:	4618      	mov	r0, r3
 80665ce:	f7ff fbe9 	bl	8065da4 <ld_word>
 80665d2:	4603      	mov	r3, r0
 80665d4:	617b      	str	r3, [r7, #20]
			break;
 80665d6:	e025      	b.n	8066624 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80665d8:	693b      	ldr	r3, [r7, #16]
 80665da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80665dc:	683b      	ldr	r3, [r7, #0]
 80665de:	09db      	lsrs	r3, r3, #7
 80665e0:	4413      	add	r3, r2
 80665e2:	4619      	mov	r1, r3
 80665e4:	6938      	ldr	r0, [r7, #16]
 80665e6:	f7ff febf 	bl	8066368 <move_window>
 80665ea:	4603      	mov	r3, r0
 80665ec:	2b00      	cmp	r3, #0
 80665ee:	d118      	bne.n	8066622 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80665f0:	693b      	ldr	r3, [r7, #16]
 80665f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80665f6:	683b      	ldr	r3, [r7, #0]
 80665f8:	009b      	lsls	r3, r3, #2
 80665fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80665fe:	4413      	add	r3, r2
 8066600:	4618      	mov	r0, r3
 8066602:	f7ff fbe7 	bl	8065dd4 <ld_dword>
 8066606:	4603      	mov	r3, r0
 8066608:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 806660c:	617b      	str	r3, [r7, #20]
			break;
 806660e:	e009      	b.n	8066624 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8066610:	2301      	movs	r3, #1
 8066612:	617b      	str	r3, [r7, #20]
 8066614:	e006      	b.n	8066624 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8066616:	bf00      	nop
 8066618:	e004      	b.n	8066624 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806661a:	bf00      	nop
 806661c:	e002      	b.n	8066624 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 806661e:	bf00      	nop
 8066620:	e000      	b.n	8066624 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8066622:	bf00      	nop
		}
	}

	return val;
 8066624:	697b      	ldr	r3, [r7, #20]
}
 8066626:	4618      	mov	r0, r3
 8066628:	3718      	adds	r7, #24
 806662a:	46bd      	mov	sp, r7
 806662c:	bd80      	pop	{r7, pc}

0806662e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 806662e:	b590      	push	{r4, r7, lr}
 8066630:	b089      	sub	sp, #36	; 0x24
 8066632:	af00      	add	r7, sp, #0
 8066634:	60f8      	str	r0, [r7, #12]
 8066636:	60b9      	str	r1, [r7, #8]
 8066638:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 806663a:	2302      	movs	r3, #2
 806663c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 806663e:	68bb      	ldr	r3, [r7, #8]
 8066640:	2b01      	cmp	r3, #1
 8066642:	f240 80d2 	bls.w	80667ea <put_fat+0x1bc>
 8066646:	68fb      	ldr	r3, [r7, #12]
 8066648:	699b      	ldr	r3, [r3, #24]
 806664a:	68ba      	ldr	r2, [r7, #8]
 806664c:	429a      	cmp	r2, r3
 806664e:	f080 80cc 	bcs.w	80667ea <put_fat+0x1bc>
		switch (fs->fs_type) {
 8066652:	68fb      	ldr	r3, [r7, #12]
 8066654:	781b      	ldrb	r3, [r3, #0]
 8066656:	2b03      	cmp	r3, #3
 8066658:	f000 8096 	beq.w	8066788 <put_fat+0x15a>
 806665c:	2b03      	cmp	r3, #3
 806665e:	f300 80cd 	bgt.w	80667fc <put_fat+0x1ce>
 8066662:	2b01      	cmp	r3, #1
 8066664:	d002      	beq.n	806666c <put_fat+0x3e>
 8066666:	2b02      	cmp	r3, #2
 8066668:	d06e      	beq.n	8066748 <put_fat+0x11a>
 806666a:	e0c7      	b.n	80667fc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 806666c:	68bb      	ldr	r3, [r7, #8]
 806666e:	61bb      	str	r3, [r7, #24]
 8066670:	69bb      	ldr	r3, [r7, #24]
 8066672:	085b      	lsrs	r3, r3, #1
 8066674:	69ba      	ldr	r2, [r7, #24]
 8066676:	4413      	add	r3, r2
 8066678:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 806667a:	68fb      	ldr	r3, [r7, #12]
 806667c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806667e:	69bb      	ldr	r3, [r7, #24]
 8066680:	0a5b      	lsrs	r3, r3, #9
 8066682:	4413      	add	r3, r2
 8066684:	4619      	mov	r1, r3
 8066686:	68f8      	ldr	r0, [r7, #12]
 8066688:	f7ff fe6e 	bl	8066368 <move_window>
 806668c:	4603      	mov	r3, r0
 806668e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8066690:	7ffb      	ldrb	r3, [r7, #31]
 8066692:	2b00      	cmp	r3, #0
 8066694:	f040 80ab 	bne.w	80667ee <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8066698:	68fb      	ldr	r3, [r7, #12]
 806669a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806669e:	69bb      	ldr	r3, [r7, #24]
 80666a0:	1c59      	adds	r1, r3, #1
 80666a2:	61b9      	str	r1, [r7, #24]
 80666a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80666a8:	4413      	add	r3, r2
 80666aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80666ac:	68bb      	ldr	r3, [r7, #8]
 80666ae:	f003 0301 	and.w	r3, r3, #1
 80666b2:	2b00      	cmp	r3, #0
 80666b4:	d00d      	beq.n	80666d2 <put_fat+0xa4>
 80666b6:	697b      	ldr	r3, [r7, #20]
 80666b8:	781b      	ldrb	r3, [r3, #0]
 80666ba:	b25b      	sxtb	r3, r3
 80666bc:	f003 030f 	and.w	r3, r3, #15
 80666c0:	b25a      	sxtb	r2, r3
 80666c2:	687b      	ldr	r3, [r7, #4]
 80666c4:	b2db      	uxtb	r3, r3
 80666c6:	011b      	lsls	r3, r3, #4
 80666c8:	b25b      	sxtb	r3, r3
 80666ca:	4313      	orrs	r3, r2
 80666cc:	b25b      	sxtb	r3, r3
 80666ce:	b2db      	uxtb	r3, r3
 80666d0:	e001      	b.n	80666d6 <put_fat+0xa8>
 80666d2:	687b      	ldr	r3, [r7, #4]
 80666d4:	b2db      	uxtb	r3, r3
 80666d6:	697a      	ldr	r2, [r7, #20]
 80666d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80666da:	68fb      	ldr	r3, [r7, #12]
 80666dc:	2201      	movs	r2, #1
 80666de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80666e0:	68fb      	ldr	r3, [r7, #12]
 80666e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80666e4:	69bb      	ldr	r3, [r7, #24]
 80666e6:	0a5b      	lsrs	r3, r3, #9
 80666e8:	4413      	add	r3, r2
 80666ea:	4619      	mov	r1, r3
 80666ec:	68f8      	ldr	r0, [r7, #12]
 80666ee:	f7ff fe3b 	bl	8066368 <move_window>
 80666f2:	4603      	mov	r3, r0
 80666f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80666f6:	7ffb      	ldrb	r3, [r7, #31]
 80666f8:	2b00      	cmp	r3, #0
 80666fa:	d17a      	bne.n	80667f2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80666fc:	68fb      	ldr	r3, [r7, #12]
 80666fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8066702:	69bb      	ldr	r3, [r7, #24]
 8066704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066708:	4413      	add	r3, r2
 806670a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 806670c:	68bb      	ldr	r3, [r7, #8]
 806670e:	f003 0301 	and.w	r3, r3, #1
 8066712:	2b00      	cmp	r3, #0
 8066714:	d003      	beq.n	806671e <put_fat+0xf0>
 8066716:	687b      	ldr	r3, [r7, #4]
 8066718:	091b      	lsrs	r3, r3, #4
 806671a:	b2db      	uxtb	r3, r3
 806671c:	e00e      	b.n	806673c <put_fat+0x10e>
 806671e:	697b      	ldr	r3, [r7, #20]
 8066720:	781b      	ldrb	r3, [r3, #0]
 8066722:	b25b      	sxtb	r3, r3
 8066724:	f023 030f 	bic.w	r3, r3, #15
 8066728:	b25a      	sxtb	r2, r3
 806672a:	687b      	ldr	r3, [r7, #4]
 806672c:	0a1b      	lsrs	r3, r3, #8
 806672e:	b25b      	sxtb	r3, r3
 8066730:	f003 030f 	and.w	r3, r3, #15
 8066734:	b25b      	sxtb	r3, r3
 8066736:	4313      	orrs	r3, r2
 8066738:	b25b      	sxtb	r3, r3
 806673a:	b2db      	uxtb	r3, r3
 806673c:	697a      	ldr	r2, [r7, #20]
 806673e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8066740:	68fb      	ldr	r3, [r7, #12]
 8066742:	2201      	movs	r2, #1
 8066744:	70da      	strb	r2, [r3, #3]
			break;
 8066746:	e059      	b.n	80667fc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8066748:	68fb      	ldr	r3, [r7, #12]
 806674a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806674c:	68bb      	ldr	r3, [r7, #8]
 806674e:	0a1b      	lsrs	r3, r3, #8
 8066750:	4413      	add	r3, r2
 8066752:	4619      	mov	r1, r3
 8066754:	68f8      	ldr	r0, [r7, #12]
 8066756:	f7ff fe07 	bl	8066368 <move_window>
 806675a:	4603      	mov	r3, r0
 806675c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806675e:	7ffb      	ldrb	r3, [r7, #31]
 8066760:	2b00      	cmp	r3, #0
 8066762:	d148      	bne.n	80667f6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8066764:	68fb      	ldr	r3, [r7, #12]
 8066766:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806676a:	68bb      	ldr	r3, [r7, #8]
 806676c:	005b      	lsls	r3, r3, #1
 806676e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8066772:	4413      	add	r3, r2
 8066774:	687a      	ldr	r2, [r7, #4]
 8066776:	b292      	uxth	r2, r2
 8066778:	4611      	mov	r1, r2
 806677a:	4618      	mov	r0, r3
 806677c:	f7ff fb4d 	bl	8065e1a <st_word>
			fs->wflag = 1;
 8066780:	68fb      	ldr	r3, [r7, #12]
 8066782:	2201      	movs	r2, #1
 8066784:	70da      	strb	r2, [r3, #3]
			break;
 8066786:	e039      	b.n	80667fc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8066788:	68fb      	ldr	r3, [r7, #12]
 806678a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806678c:	68bb      	ldr	r3, [r7, #8]
 806678e:	09db      	lsrs	r3, r3, #7
 8066790:	4413      	add	r3, r2
 8066792:	4619      	mov	r1, r3
 8066794:	68f8      	ldr	r0, [r7, #12]
 8066796:	f7ff fde7 	bl	8066368 <move_window>
 806679a:	4603      	mov	r3, r0
 806679c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806679e:	7ffb      	ldrb	r3, [r7, #31]
 80667a0:	2b00      	cmp	r3, #0
 80667a2:	d12a      	bne.n	80667fa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80667a4:	687b      	ldr	r3, [r7, #4]
 80667a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80667aa:	68fb      	ldr	r3, [r7, #12]
 80667ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80667b0:	68bb      	ldr	r3, [r7, #8]
 80667b2:	009b      	lsls	r3, r3, #2
 80667b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80667b8:	4413      	add	r3, r2
 80667ba:	4618      	mov	r0, r3
 80667bc:	f7ff fb0a 	bl	8065dd4 <ld_dword>
 80667c0:	4603      	mov	r3, r0
 80667c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80667c6:	4323      	orrs	r3, r4
 80667c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80667ca:	68fb      	ldr	r3, [r7, #12]
 80667cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80667d0:	68bb      	ldr	r3, [r7, #8]
 80667d2:	009b      	lsls	r3, r3, #2
 80667d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80667d8:	4413      	add	r3, r2
 80667da:	6879      	ldr	r1, [r7, #4]
 80667dc:	4618      	mov	r0, r3
 80667de:	f7ff fb37 	bl	8065e50 <st_dword>
			fs->wflag = 1;
 80667e2:	68fb      	ldr	r3, [r7, #12]
 80667e4:	2201      	movs	r2, #1
 80667e6:	70da      	strb	r2, [r3, #3]
			break;
 80667e8:	e008      	b.n	80667fc <put_fat+0x1ce>
		}
	}
 80667ea:	bf00      	nop
 80667ec:	e006      	b.n	80667fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80667ee:	bf00      	nop
 80667f0:	e004      	b.n	80667fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80667f2:	bf00      	nop
 80667f4:	e002      	b.n	80667fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80667f6:	bf00      	nop
 80667f8:	e000      	b.n	80667fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80667fa:	bf00      	nop
	return res;
 80667fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80667fe:	4618      	mov	r0, r3
 8066800:	3724      	adds	r7, #36	; 0x24
 8066802:	46bd      	mov	sp, r7
 8066804:	bd90      	pop	{r4, r7, pc}

08066806 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8066806:	b580      	push	{r7, lr}
 8066808:	b088      	sub	sp, #32
 806680a:	af00      	add	r7, sp, #0
 806680c:	60f8      	str	r0, [r7, #12]
 806680e:	60b9      	str	r1, [r7, #8]
 8066810:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8066812:	2300      	movs	r3, #0
 8066814:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8066816:	68fb      	ldr	r3, [r7, #12]
 8066818:	681b      	ldr	r3, [r3, #0]
 806681a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 806681c:	68bb      	ldr	r3, [r7, #8]
 806681e:	2b01      	cmp	r3, #1
 8066820:	d904      	bls.n	806682c <remove_chain+0x26>
 8066822:	69bb      	ldr	r3, [r7, #24]
 8066824:	699b      	ldr	r3, [r3, #24]
 8066826:	68ba      	ldr	r2, [r7, #8]
 8066828:	429a      	cmp	r2, r3
 806682a:	d301      	bcc.n	8066830 <remove_chain+0x2a>
 806682c:	2302      	movs	r3, #2
 806682e:	e04b      	b.n	80668c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8066830:	687b      	ldr	r3, [r7, #4]
 8066832:	2b00      	cmp	r3, #0
 8066834:	d00c      	beq.n	8066850 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8066836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806683a:	6879      	ldr	r1, [r7, #4]
 806683c:	69b8      	ldr	r0, [r7, #24]
 806683e:	f7ff fef6 	bl	806662e <put_fat>
 8066842:	4603      	mov	r3, r0
 8066844:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8066846:	7ffb      	ldrb	r3, [r7, #31]
 8066848:	2b00      	cmp	r3, #0
 806684a:	d001      	beq.n	8066850 <remove_chain+0x4a>
 806684c:	7ffb      	ldrb	r3, [r7, #31]
 806684e:	e03b      	b.n	80668c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8066850:	68b9      	ldr	r1, [r7, #8]
 8066852:	68f8      	ldr	r0, [r7, #12]
 8066854:	f7ff fe43 	bl	80664de <get_fat>
 8066858:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 806685a:	697b      	ldr	r3, [r7, #20]
 806685c:	2b00      	cmp	r3, #0
 806685e:	d031      	beq.n	80668c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8066860:	697b      	ldr	r3, [r7, #20]
 8066862:	2b01      	cmp	r3, #1
 8066864:	d101      	bne.n	806686a <remove_chain+0x64>
 8066866:	2302      	movs	r3, #2
 8066868:	e02e      	b.n	80668c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 806686a:	697b      	ldr	r3, [r7, #20]
 806686c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8066870:	d101      	bne.n	8066876 <remove_chain+0x70>
 8066872:	2301      	movs	r3, #1
 8066874:	e028      	b.n	80668c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8066876:	2200      	movs	r2, #0
 8066878:	68b9      	ldr	r1, [r7, #8]
 806687a:	69b8      	ldr	r0, [r7, #24]
 806687c:	f7ff fed7 	bl	806662e <put_fat>
 8066880:	4603      	mov	r3, r0
 8066882:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8066884:	7ffb      	ldrb	r3, [r7, #31]
 8066886:	2b00      	cmp	r3, #0
 8066888:	d001      	beq.n	806688e <remove_chain+0x88>
 806688a:	7ffb      	ldrb	r3, [r7, #31]
 806688c:	e01c      	b.n	80668c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 806688e:	69bb      	ldr	r3, [r7, #24]
 8066890:	695a      	ldr	r2, [r3, #20]
 8066892:	69bb      	ldr	r3, [r7, #24]
 8066894:	699b      	ldr	r3, [r3, #24]
 8066896:	3b02      	subs	r3, #2
 8066898:	429a      	cmp	r2, r3
 806689a:	d20b      	bcs.n	80668b4 <remove_chain+0xae>
			fs->free_clst++;
 806689c:	69bb      	ldr	r3, [r7, #24]
 806689e:	695b      	ldr	r3, [r3, #20]
 80668a0:	1c5a      	adds	r2, r3, #1
 80668a2:	69bb      	ldr	r3, [r7, #24]
 80668a4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80668a6:	69bb      	ldr	r3, [r7, #24]
 80668a8:	791b      	ldrb	r3, [r3, #4]
 80668aa:	f043 0301 	orr.w	r3, r3, #1
 80668ae:	b2da      	uxtb	r2, r3
 80668b0:	69bb      	ldr	r3, [r7, #24]
 80668b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80668b4:	697b      	ldr	r3, [r7, #20]
 80668b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80668b8:	69bb      	ldr	r3, [r7, #24]
 80668ba:	699b      	ldr	r3, [r3, #24]
 80668bc:	68ba      	ldr	r2, [r7, #8]
 80668be:	429a      	cmp	r2, r3
 80668c0:	d3c6      	bcc.n	8066850 <remove_chain+0x4a>
 80668c2:	e000      	b.n	80668c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80668c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80668c6:	2300      	movs	r3, #0
}
 80668c8:	4618      	mov	r0, r3
 80668ca:	3720      	adds	r7, #32
 80668cc:	46bd      	mov	sp, r7
 80668ce:	bd80      	pop	{r7, pc}

080668d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80668d0:	b580      	push	{r7, lr}
 80668d2:	b088      	sub	sp, #32
 80668d4:	af00      	add	r7, sp, #0
 80668d6:	6078      	str	r0, [r7, #4]
 80668d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80668da:	687b      	ldr	r3, [r7, #4]
 80668dc:	681b      	ldr	r3, [r3, #0]
 80668de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80668e0:	683b      	ldr	r3, [r7, #0]
 80668e2:	2b00      	cmp	r3, #0
 80668e4:	d10d      	bne.n	8066902 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80668e6:	693b      	ldr	r3, [r7, #16]
 80668e8:	691b      	ldr	r3, [r3, #16]
 80668ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80668ec:	69bb      	ldr	r3, [r7, #24]
 80668ee:	2b00      	cmp	r3, #0
 80668f0:	d004      	beq.n	80668fc <create_chain+0x2c>
 80668f2:	693b      	ldr	r3, [r7, #16]
 80668f4:	699b      	ldr	r3, [r3, #24]
 80668f6:	69ba      	ldr	r2, [r7, #24]
 80668f8:	429a      	cmp	r2, r3
 80668fa:	d31b      	bcc.n	8066934 <create_chain+0x64>
 80668fc:	2301      	movs	r3, #1
 80668fe:	61bb      	str	r3, [r7, #24]
 8066900:	e018      	b.n	8066934 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8066902:	6839      	ldr	r1, [r7, #0]
 8066904:	6878      	ldr	r0, [r7, #4]
 8066906:	f7ff fdea 	bl	80664de <get_fat>
 806690a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 806690c:	68fb      	ldr	r3, [r7, #12]
 806690e:	2b01      	cmp	r3, #1
 8066910:	d801      	bhi.n	8066916 <create_chain+0x46>
 8066912:	2301      	movs	r3, #1
 8066914:	e070      	b.n	80669f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8066916:	68fb      	ldr	r3, [r7, #12]
 8066918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806691c:	d101      	bne.n	8066922 <create_chain+0x52>
 806691e:	68fb      	ldr	r3, [r7, #12]
 8066920:	e06a      	b.n	80669f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8066922:	693b      	ldr	r3, [r7, #16]
 8066924:	699b      	ldr	r3, [r3, #24]
 8066926:	68fa      	ldr	r2, [r7, #12]
 8066928:	429a      	cmp	r2, r3
 806692a:	d201      	bcs.n	8066930 <create_chain+0x60>
 806692c:	68fb      	ldr	r3, [r7, #12]
 806692e:	e063      	b.n	80669f8 <create_chain+0x128>
		scl = clst;
 8066930:	683b      	ldr	r3, [r7, #0]
 8066932:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8066934:	69bb      	ldr	r3, [r7, #24]
 8066936:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8066938:	69fb      	ldr	r3, [r7, #28]
 806693a:	3301      	adds	r3, #1
 806693c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 806693e:	693b      	ldr	r3, [r7, #16]
 8066940:	699b      	ldr	r3, [r3, #24]
 8066942:	69fa      	ldr	r2, [r7, #28]
 8066944:	429a      	cmp	r2, r3
 8066946:	d307      	bcc.n	8066958 <create_chain+0x88>
				ncl = 2;
 8066948:	2302      	movs	r3, #2
 806694a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 806694c:	69fa      	ldr	r2, [r7, #28]
 806694e:	69bb      	ldr	r3, [r7, #24]
 8066950:	429a      	cmp	r2, r3
 8066952:	d901      	bls.n	8066958 <create_chain+0x88>
 8066954:	2300      	movs	r3, #0
 8066956:	e04f      	b.n	80669f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8066958:	69f9      	ldr	r1, [r7, #28]
 806695a:	6878      	ldr	r0, [r7, #4]
 806695c:	f7ff fdbf 	bl	80664de <get_fat>
 8066960:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8066962:	68fb      	ldr	r3, [r7, #12]
 8066964:	2b00      	cmp	r3, #0
 8066966:	d00e      	beq.n	8066986 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8066968:	68fb      	ldr	r3, [r7, #12]
 806696a:	2b01      	cmp	r3, #1
 806696c:	d003      	beq.n	8066976 <create_chain+0xa6>
 806696e:	68fb      	ldr	r3, [r7, #12]
 8066970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8066974:	d101      	bne.n	806697a <create_chain+0xaa>
 8066976:	68fb      	ldr	r3, [r7, #12]
 8066978:	e03e      	b.n	80669f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 806697a:	69fa      	ldr	r2, [r7, #28]
 806697c:	69bb      	ldr	r3, [r7, #24]
 806697e:	429a      	cmp	r2, r3
 8066980:	d1da      	bne.n	8066938 <create_chain+0x68>
 8066982:	2300      	movs	r3, #0
 8066984:	e038      	b.n	80669f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8066986:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8066988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806698c:	69f9      	ldr	r1, [r7, #28]
 806698e:	6938      	ldr	r0, [r7, #16]
 8066990:	f7ff fe4d 	bl	806662e <put_fat>
 8066994:	4603      	mov	r3, r0
 8066996:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8066998:	7dfb      	ldrb	r3, [r7, #23]
 806699a:	2b00      	cmp	r3, #0
 806699c:	d109      	bne.n	80669b2 <create_chain+0xe2>
 806699e:	683b      	ldr	r3, [r7, #0]
 80669a0:	2b00      	cmp	r3, #0
 80669a2:	d006      	beq.n	80669b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80669a4:	69fa      	ldr	r2, [r7, #28]
 80669a6:	6839      	ldr	r1, [r7, #0]
 80669a8:	6938      	ldr	r0, [r7, #16]
 80669aa:	f7ff fe40 	bl	806662e <put_fat>
 80669ae:	4603      	mov	r3, r0
 80669b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80669b2:	7dfb      	ldrb	r3, [r7, #23]
 80669b4:	2b00      	cmp	r3, #0
 80669b6:	d116      	bne.n	80669e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80669b8:	693b      	ldr	r3, [r7, #16]
 80669ba:	69fa      	ldr	r2, [r7, #28]
 80669bc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80669be:	693b      	ldr	r3, [r7, #16]
 80669c0:	695a      	ldr	r2, [r3, #20]
 80669c2:	693b      	ldr	r3, [r7, #16]
 80669c4:	699b      	ldr	r3, [r3, #24]
 80669c6:	3b02      	subs	r3, #2
 80669c8:	429a      	cmp	r2, r3
 80669ca:	d804      	bhi.n	80669d6 <create_chain+0x106>
 80669cc:	693b      	ldr	r3, [r7, #16]
 80669ce:	695b      	ldr	r3, [r3, #20]
 80669d0:	1e5a      	subs	r2, r3, #1
 80669d2:	693b      	ldr	r3, [r7, #16]
 80669d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80669d6:	693b      	ldr	r3, [r7, #16]
 80669d8:	791b      	ldrb	r3, [r3, #4]
 80669da:	f043 0301 	orr.w	r3, r3, #1
 80669de:	b2da      	uxtb	r2, r3
 80669e0:	693b      	ldr	r3, [r7, #16]
 80669e2:	711a      	strb	r2, [r3, #4]
 80669e4:	e007      	b.n	80669f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80669e6:	7dfb      	ldrb	r3, [r7, #23]
 80669e8:	2b01      	cmp	r3, #1
 80669ea:	d102      	bne.n	80669f2 <create_chain+0x122>
 80669ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80669f0:	e000      	b.n	80669f4 <create_chain+0x124>
 80669f2:	2301      	movs	r3, #1
 80669f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80669f6:	69fb      	ldr	r3, [r7, #28]
}
 80669f8:	4618      	mov	r0, r3
 80669fa:	3720      	adds	r7, #32
 80669fc:	46bd      	mov	sp, r7
 80669fe:	bd80      	pop	{r7, pc}

08066a00 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8066a00:	b480      	push	{r7}
 8066a02:	b087      	sub	sp, #28
 8066a04:	af00      	add	r7, sp, #0
 8066a06:	6078      	str	r0, [r7, #4]
 8066a08:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8066a0a:	687b      	ldr	r3, [r7, #4]
 8066a0c:	681b      	ldr	r3, [r3, #0]
 8066a0e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8066a10:	687b      	ldr	r3, [r7, #4]
 8066a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8066a14:	3304      	adds	r3, #4
 8066a16:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8066a18:	683b      	ldr	r3, [r7, #0]
 8066a1a:	0a5b      	lsrs	r3, r3, #9
 8066a1c:	68fa      	ldr	r2, [r7, #12]
 8066a1e:	8952      	ldrh	r2, [r2, #10]
 8066a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8066a24:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8066a26:	693b      	ldr	r3, [r7, #16]
 8066a28:	1d1a      	adds	r2, r3, #4
 8066a2a:	613a      	str	r2, [r7, #16]
 8066a2c:	681b      	ldr	r3, [r3, #0]
 8066a2e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8066a30:	68bb      	ldr	r3, [r7, #8]
 8066a32:	2b00      	cmp	r3, #0
 8066a34:	d101      	bne.n	8066a3a <clmt_clust+0x3a>
 8066a36:	2300      	movs	r3, #0
 8066a38:	e010      	b.n	8066a5c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8066a3a:	697a      	ldr	r2, [r7, #20]
 8066a3c:	68bb      	ldr	r3, [r7, #8]
 8066a3e:	429a      	cmp	r2, r3
 8066a40:	d307      	bcc.n	8066a52 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8066a42:	697a      	ldr	r2, [r7, #20]
 8066a44:	68bb      	ldr	r3, [r7, #8]
 8066a46:	1ad3      	subs	r3, r2, r3
 8066a48:	617b      	str	r3, [r7, #20]
 8066a4a:	693b      	ldr	r3, [r7, #16]
 8066a4c:	3304      	adds	r3, #4
 8066a4e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8066a50:	e7e9      	b.n	8066a26 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8066a52:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8066a54:	693b      	ldr	r3, [r7, #16]
 8066a56:	681a      	ldr	r2, [r3, #0]
 8066a58:	697b      	ldr	r3, [r7, #20]
 8066a5a:	4413      	add	r3, r2
}
 8066a5c:	4618      	mov	r0, r3
 8066a5e:	371c      	adds	r7, #28
 8066a60:	46bd      	mov	sp, r7
 8066a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066a66:	4770      	bx	lr

08066a68 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8066a68:	b580      	push	{r7, lr}
 8066a6a:	b086      	sub	sp, #24
 8066a6c:	af00      	add	r7, sp, #0
 8066a6e:	6078      	str	r0, [r7, #4]
 8066a70:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8066a72:	687b      	ldr	r3, [r7, #4]
 8066a74:	681b      	ldr	r3, [r3, #0]
 8066a76:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8066a78:	683b      	ldr	r3, [r7, #0]
 8066a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8066a7e:	d204      	bcs.n	8066a8a <dir_sdi+0x22>
 8066a80:	683b      	ldr	r3, [r7, #0]
 8066a82:	f003 031f 	and.w	r3, r3, #31
 8066a86:	2b00      	cmp	r3, #0
 8066a88:	d001      	beq.n	8066a8e <dir_sdi+0x26>
		return FR_INT_ERR;
 8066a8a:	2302      	movs	r3, #2
 8066a8c:	e063      	b.n	8066b56 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8066a8e:	687b      	ldr	r3, [r7, #4]
 8066a90:	683a      	ldr	r2, [r7, #0]
 8066a92:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8066a94:	687b      	ldr	r3, [r7, #4]
 8066a96:	689b      	ldr	r3, [r3, #8]
 8066a98:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8066a9a:	697b      	ldr	r3, [r7, #20]
 8066a9c:	2b00      	cmp	r3, #0
 8066a9e:	d106      	bne.n	8066aae <dir_sdi+0x46>
 8066aa0:	693b      	ldr	r3, [r7, #16]
 8066aa2:	781b      	ldrb	r3, [r3, #0]
 8066aa4:	2b02      	cmp	r3, #2
 8066aa6:	d902      	bls.n	8066aae <dir_sdi+0x46>
		clst = fs->dirbase;
 8066aa8:	693b      	ldr	r3, [r7, #16]
 8066aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8066aac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8066aae:	697b      	ldr	r3, [r7, #20]
 8066ab0:	2b00      	cmp	r3, #0
 8066ab2:	d10c      	bne.n	8066ace <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8066ab4:	683b      	ldr	r3, [r7, #0]
 8066ab6:	095b      	lsrs	r3, r3, #5
 8066ab8:	693a      	ldr	r2, [r7, #16]
 8066aba:	8912      	ldrh	r2, [r2, #8]
 8066abc:	4293      	cmp	r3, r2
 8066abe:	d301      	bcc.n	8066ac4 <dir_sdi+0x5c>
 8066ac0:	2302      	movs	r3, #2
 8066ac2:	e048      	b.n	8066b56 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8066ac4:	693b      	ldr	r3, [r7, #16]
 8066ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8066ac8:	687b      	ldr	r3, [r7, #4]
 8066aca:	61da      	str	r2, [r3, #28]
 8066acc:	e029      	b.n	8066b22 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8066ace:	693b      	ldr	r3, [r7, #16]
 8066ad0:	895b      	ldrh	r3, [r3, #10]
 8066ad2:	025b      	lsls	r3, r3, #9
 8066ad4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8066ad6:	e019      	b.n	8066b0c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8066ad8:	687b      	ldr	r3, [r7, #4]
 8066ada:	6979      	ldr	r1, [r7, #20]
 8066adc:	4618      	mov	r0, r3
 8066ade:	f7ff fcfe 	bl	80664de <get_fat>
 8066ae2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8066ae4:	697b      	ldr	r3, [r7, #20]
 8066ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8066aea:	d101      	bne.n	8066af0 <dir_sdi+0x88>
 8066aec:	2301      	movs	r3, #1
 8066aee:	e032      	b.n	8066b56 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8066af0:	697b      	ldr	r3, [r7, #20]
 8066af2:	2b01      	cmp	r3, #1
 8066af4:	d904      	bls.n	8066b00 <dir_sdi+0x98>
 8066af6:	693b      	ldr	r3, [r7, #16]
 8066af8:	699b      	ldr	r3, [r3, #24]
 8066afa:	697a      	ldr	r2, [r7, #20]
 8066afc:	429a      	cmp	r2, r3
 8066afe:	d301      	bcc.n	8066b04 <dir_sdi+0x9c>
 8066b00:	2302      	movs	r3, #2
 8066b02:	e028      	b.n	8066b56 <dir_sdi+0xee>
			ofs -= csz;
 8066b04:	683a      	ldr	r2, [r7, #0]
 8066b06:	68fb      	ldr	r3, [r7, #12]
 8066b08:	1ad3      	subs	r3, r2, r3
 8066b0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8066b0c:	683a      	ldr	r2, [r7, #0]
 8066b0e:	68fb      	ldr	r3, [r7, #12]
 8066b10:	429a      	cmp	r2, r3
 8066b12:	d2e1      	bcs.n	8066ad8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8066b14:	6979      	ldr	r1, [r7, #20]
 8066b16:	6938      	ldr	r0, [r7, #16]
 8066b18:	f7ff fcc2 	bl	80664a0 <clust2sect>
 8066b1c:	4602      	mov	r2, r0
 8066b1e:	687b      	ldr	r3, [r7, #4]
 8066b20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8066b22:	687b      	ldr	r3, [r7, #4]
 8066b24:	697a      	ldr	r2, [r7, #20]
 8066b26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8066b28:	687b      	ldr	r3, [r7, #4]
 8066b2a:	69db      	ldr	r3, [r3, #28]
 8066b2c:	2b00      	cmp	r3, #0
 8066b2e:	d101      	bne.n	8066b34 <dir_sdi+0xcc>
 8066b30:	2302      	movs	r3, #2
 8066b32:	e010      	b.n	8066b56 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8066b34:	687b      	ldr	r3, [r7, #4]
 8066b36:	69da      	ldr	r2, [r3, #28]
 8066b38:	683b      	ldr	r3, [r7, #0]
 8066b3a:	0a5b      	lsrs	r3, r3, #9
 8066b3c:	441a      	add	r2, r3
 8066b3e:	687b      	ldr	r3, [r7, #4]
 8066b40:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8066b42:	693b      	ldr	r3, [r7, #16]
 8066b44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8066b48:	683b      	ldr	r3, [r7, #0]
 8066b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066b4e:	441a      	add	r2, r3
 8066b50:	687b      	ldr	r3, [r7, #4]
 8066b52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8066b54:	2300      	movs	r3, #0
}
 8066b56:	4618      	mov	r0, r3
 8066b58:	3718      	adds	r7, #24
 8066b5a:	46bd      	mov	sp, r7
 8066b5c:	bd80      	pop	{r7, pc}

08066b5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8066b5e:	b580      	push	{r7, lr}
 8066b60:	b086      	sub	sp, #24
 8066b62:	af00      	add	r7, sp, #0
 8066b64:	6078      	str	r0, [r7, #4]
 8066b66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8066b68:	687b      	ldr	r3, [r7, #4]
 8066b6a:	681b      	ldr	r3, [r3, #0]
 8066b6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8066b6e:	687b      	ldr	r3, [r7, #4]
 8066b70:	695b      	ldr	r3, [r3, #20]
 8066b72:	3320      	adds	r3, #32
 8066b74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8066b76:	687b      	ldr	r3, [r7, #4]
 8066b78:	69db      	ldr	r3, [r3, #28]
 8066b7a:	2b00      	cmp	r3, #0
 8066b7c:	d003      	beq.n	8066b86 <dir_next+0x28>
 8066b7e:	68bb      	ldr	r3, [r7, #8]
 8066b80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8066b84:	d301      	bcc.n	8066b8a <dir_next+0x2c>
 8066b86:	2304      	movs	r3, #4
 8066b88:	e0aa      	b.n	8066ce0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8066b8a:	68bb      	ldr	r3, [r7, #8]
 8066b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066b90:	2b00      	cmp	r3, #0
 8066b92:	f040 8098 	bne.w	8066cc6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8066b96:	687b      	ldr	r3, [r7, #4]
 8066b98:	69db      	ldr	r3, [r3, #28]
 8066b9a:	1c5a      	adds	r2, r3, #1
 8066b9c:	687b      	ldr	r3, [r7, #4]
 8066b9e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8066ba0:	687b      	ldr	r3, [r7, #4]
 8066ba2:	699b      	ldr	r3, [r3, #24]
 8066ba4:	2b00      	cmp	r3, #0
 8066ba6:	d10b      	bne.n	8066bc0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8066ba8:	68bb      	ldr	r3, [r7, #8]
 8066baa:	095b      	lsrs	r3, r3, #5
 8066bac:	68fa      	ldr	r2, [r7, #12]
 8066bae:	8912      	ldrh	r2, [r2, #8]
 8066bb0:	4293      	cmp	r3, r2
 8066bb2:	f0c0 8088 	bcc.w	8066cc6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8066bb6:	687b      	ldr	r3, [r7, #4]
 8066bb8:	2200      	movs	r2, #0
 8066bba:	61da      	str	r2, [r3, #28]
 8066bbc:	2304      	movs	r3, #4
 8066bbe:	e08f      	b.n	8066ce0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8066bc0:	68bb      	ldr	r3, [r7, #8]
 8066bc2:	0a5b      	lsrs	r3, r3, #9
 8066bc4:	68fa      	ldr	r2, [r7, #12]
 8066bc6:	8952      	ldrh	r2, [r2, #10]
 8066bc8:	3a01      	subs	r2, #1
 8066bca:	4013      	ands	r3, r2
 8066bcc:	2b00      	cmp	r3, #0
 8066bce:	d17a      	bne.n	8066cc6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8066bd0:	687a      	ldr	r2, [r7, #4]
 8066bd2:	687b      	ldr	r3, [r7, #4]
 8066bd4:	699b      	ldr	r3, [r3, #24]
 8066bd6:	4619      	mov	r1, r3
 8066bd8:	4610      	mov	r0, r2
 8066bda:	f7ff fc80 	bl	80664de <get_fat>
 8066bde:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8066be0:	697b      	ldr	r3, [r7, #20]
 8066be2:	2b01      	cmp	r3, #1
 8066be4:	d801      	bhi.n	8066bea <dir_next+0x8c>
 8066be6:	2302      	movs	r3, #2
 8066be8:	e07a      	b.n	8066ce0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8066bea:	697b      	ldr	r3, [r7, #20]
 8066bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8066bf0:	d101      	bne.n	8066bf6 <dir_next+0x98>
 8066bf2:	2301      	movs	r3, #1
 8066bf4:	e074      	b.n	8066ce0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8066bf6:	68fb      	ldr	r3, [r7, #12]
 8066bf8:	699b      	ldr	r3, [r3, #24]
 8066bfa:	697a      	ldr	r2, [r7, #20]
 8066bfc:	429a      	cmp	r2, r3
 8066bfe:	d358      	bcc.n	8066cb2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8066c00:	683b      	ldr	r3, [r7, #0]
 8066c02:	2b00      	cmp	r3, #0
 8066c04:	d104      	bne.n	8066c10 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8066c06:	687b      	ldr	r3, [r7, #4]
 8066c08:	2200      	movs	r2, #0
 8066c0a:	61da      	str	r2, [r3, #28]
 8066c0c:	2304      	movs	r3, #4
 8066c0e:	e067      	b.n	8066ce0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8066c10:	687a      	ldr	r2, [r7, #4]
 8066c12:	687b      	ldr	r3, [r7, #4]
 8066c14:	699b      	ldr	r3, [r3, #24]
 8066c16:	4619      	mov	r1, r3
 8066c18:	4610      	mov	r0, r2
 8066c1a:	f7ff fe59 	bl	80668d0 <create_chain>
 8066c1e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8066c20:	697b      	ldr	r3, [r7, #20]
 8066c22:	2b00      	cmp	r3, #0
 8066c24:	d101      	bne.n	8066c2a <dir_next+0xcc>
 8066c26:	2307      	movs	r3, #7
 8066c28:	e05a      	b.n	8066ce0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8066c2a:	697b      	ldr	r3, [r7, #20]
 8066c2c:	2b01      	cmp	r3, #1
 8066c2e:	d101      	bne.n	8066c34 <dir_next+0xd6>
 8066c30:	2302      	movs	r3, #2
 8066c32:	e055      	b.n	8066ce0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8066c34:	697b      	ldr	r3, [r7, #20]
 8066c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8066c3a:	d101      	bne.n	8066c40 <dir_next+0xe2>
 8066c3c:	2301      	movs	r3, #1
 8066c3e:	e04f      	b.n	8066ce0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8066c40:	68f8      	ldr	r0, [r7, #12]
 8066c42:	f7ff fb4d 	bl	80662e0 <sync_window>
 8066c46:	4603      	mov	r3, r0
 8066c48:	2b00      	cmp	r3, #0
 8066c4a:	d001      	beq.n	8066c50 <dir_next+0xf2>
 8066c4c:	2301      	movs	r3, #1
 8066c4e:	e047      	b.n	8066ce0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8066c50:	68fb      	ldr	r3, [r7, #12]
 8066c52:	3334      	adds	r3, #52	; 0x34
 8066c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066c58:	2100      	movs	r1, #0
 8066c5a:	4618      	mov	r0, r3
 8066c5c:	f7ff f945 	bl	8065eea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8066c60:	2300      	movs	r3, #0
 8066c62:	613b      	str	r3, [r7, #16]
 8066c64:	6979      	ldr	r1, [r7, #20]
 8066c66:	68f8      	ldr	r0, [r7, #12]
 8066c68:	f7ff fc1a 	bl	80664a0 <clust2sect>
 8066c6c:	4602      	mov	r2, r0
 8066c6e:	68fb      	ldr	r3, [r7, #12]
 8066c70:	631a      	str	r2, [r3, #48]	; 0x30
 8066c72:	e012      	b.n	8066c9a <dir_next+0x13c>
						fs->wflag = 1;
 8066c74:	68fb      	ldr	r3, [r7, #12]
 8066c76:	2201      	movs	r2, #1
 8066c78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8066c7a:	68f8      	ldr	r0, [r7, #12]
 8066c7c:	f7ff fb30 	bl	80662e0 <sync_window>
 8066c80:	4603      	mov	r3, r0
 8066c82:	2b00      	cmp	r3, #0
 8066c84:	d001      	beq.n	8066c8a <dir_next+0x12c>
 8066c86:	2301      	movs	r3, #1
 8066c88:	e02a      	b.n	8066ce0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8066c8a:	693b      	ldr	r3, [r7, #16]
 8066c8c:	3301      	adds	r3, #1
 8066c8e:	613b      	str	r3, [r7, #16]
 8066c90:	68fb      	ldr	r3, [r7, #12]
 8066c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8066c94:	1c5a      	adds	r2, r3, #1
 8066c96:	68fb      	ldr	r3, [r7, #12]
 8066c98:	631a      	str	r2, [r3, #48]	; 0x30
 8066c9a:	68fb      	ldr	r3, [r7, #12]
 8066c9c:	895b      	ldrh	r3, [r3, #10]
 8066c9e:	461a      	mov	r2, r3
 8066ca0:	693b      	ldr	r3, [r7, #16]
 8066ca2:	4293      	cmp	r3, r2
 8066ca4:	d3e6      	bcc.n	8066c74 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8066ca6:	68fb      	ldr	r3, [r7, #12]
 8066ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8066caa:	693b      	ldr	r3, [r7, #16]
 8066cac:	1ad2      	subs	r2, r2, r3
 8066cae:	68fb      	ldr	r3, [r7, #12]
 8066cb0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8066cb2:	687b      	ldr	r3, [r7, #4]
 8066cb4:	697a      	ldr	r2, [r7, #20]
 8066cb6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8066cb8:	6979      	ldr	r1, [r7, #20]
 8066cba:	68f8      	ldr	r0, [r7, #12]
 8066cbc:	f7ff fbf0 	bl	80664a0 <clust2sect>
 8066cc0:	4602      	mov	r2, r0
 8066cc2:	687b      	ldr	r3, [r7, #4]
 8066cc4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8066cc6:	687b      	ldr	r3, [r7, #4]
 8066cc8:	68ba      	ldr	r2, [r7, #8]
 8066cca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8066ccc:	68fb      	ldr	r3, [r7, #12]
 8066cce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8066cd2:	68bb      	ldr	r3, [r7, #8]
 8066cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8066cd8:	441a      	add	r2, r3
 8066cda:	687b      	ldr	r3, [r7, #4]
 8066cdc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8066cde:	2300      	movs	r3, #0
}
 8066ce0:	4618      	mov	r0, r3
 8066ce2:	3718      	adds	r7, #24
 8066ce4:	46bd      	mov	sp, r7
 8066ce6:	bd80      	pop	{r7, pc}

08066ce8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8066ce8:	b580      	push	{r7, lr}
 8066cea:	b086      	sub	sp, #24
 8066cec:	af00      	add	r7, sp, #0
 8066cee:	6078      	str	r0, [r7, #4]
 8066cf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8066cf2:	687b      	ldr	r3, [r7, #4]
 8066cf4:	681b      	ldr	r3, [r3, #0]
 8066cf6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8066cf8:	2100      	movs	r1, #0
 8066cfa:	6878      	ldr	r0, [r7, #4]
 8066cfc:	f7ff feb4 	bl	8066a68 <dir_sdi>
 8066d00:	4603      	mov	r3, r0
 8066d02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8066d04:	7dfb      	ldrb	r3, [r7, #23]
 8066d06:	2b00      	cmp	r3, #0
 8066d08:	d12b      	bne.n	8066d62 <dir_alloc+0x7a>
		n = 0;
 8066d0a:	2300      	movs	r3, #0
 8066d0c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8066d0e:	687b      	ldr	r3, [r7, #4]
 8066d10:	69db      	ldr	r3, [r3, #28]
 8066d12:	4619      	mov	r1, r3
 8066d14:	68f8      	ldr	r0, [r7, #12]
 8066d16:	f7ff fb27 	bl	8066368 <move_window>
 8066d1a:	4603      	mov	r3, r0
 8066d1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8066d1e:	7dfb      	ldrb	r3, [r7, #23]
 8066d20:	2b00      	cmp	r3, #0
 8066d22:	d11d      	bne.n	8066d60 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8066d24:	687b      	ldr	r3, [r7, #4]
 8066d26:	6a1b      	ldr	r3, [r3, #32]
 8066d28:	781b      	ldrb	r3, [r3, #0]
 8066d2a:	2be5      	cmp	r3, #229	; 0xe5
 8066d2c:	d004      	beq.n	8066d38 <dir_alloc+0x50>
 8066d2e:	687b      	ldr	r3, [r7, #4]
 8066d30:	6a1b      	ldr	r3, [r3, #32]
 8066d32:	781b      	ldrb	r3, [r3, #0]
 8066d34:	2b00      	cmp	r3, #0
 8066d36:	d107      	bne.n	8066d48 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8066d38:	693b      	ldr	r3, [r7, #16]
 8066d3a:	3301      	adds	r3, #1
 8066d3c:	613b      	str	r3, [r7, #16]
 8066d3e:	693a      	ldr	r2, [r7, #16]
 8066d40:	683b      	ldr	r3, [r7, #0]
 8066d42:	429a      	cmp	r2, r3
 8066d44:	d102      	bne.n	8066d4c <dir_alloc+0x64>
 8066d46:	e00c      	b.n	8066d62 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8066d48:	2300      	movs	r3, #0
 8066d4a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8066d4c:	2101      	movs	r1, #1
 8066d4e:	6878      	ldr	r0, [r7, #4]
 8066d50:	f7ff ff05 	bl	8066b5e <dir_next>
 8066d54:	4603      	mov	r3, r0
 8066d56:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8066d58:	7dfb      	ldrb	r3, [r7, #23]
 8066d5a:	2b00      	cmp	r3, #0
 8066d5c:	d0d7      	beq.n	8066d0e <dir_alloc+0x26>
 8066d5e:	e000      	b.n	8066d62 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8066d60:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8066d62:	7dfb      	ldrb	r3, [r7, #23]
 8066d64:	2b04      	cmp	r3, #4
 8066d66:	d101      	bne.n	8066d6c <dir_alloc+0x84>
 8066d68:	2307      	movs	r3, #7
 8066d6a:	75fb      	strb	r3, [r7, #23]
	return res;
 8066d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8066d6e:	4618      	mov	r0, r3
 8066d70:	3718      	adds	r7, #24
 8066d72:	46bd      	mov	sp, r7
 8066d74:	bd80      	pop	{r7, pc}

08066d76 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8066d76:	b580      	push	{r7, lr}
 8066d78:	b084      	sub	sp, #16
 8066d7a:	af00      	add	r7, sp, #0
 8066d7c:	6078      	str	r0, [r7, #4]
 8066d7e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8066d80:	683b      	ldr	r3, [r7, #0]
 8066d82:	331a      	adds	r3, #26
 8066d84:	4618      	mov	r0, r3
 8066d86:	f7ff f80d 	bl	8065da4 <ld_word>
 8066d8a:	4603      	mov	r3, r0
 8066d8c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8066d8e:	687b      	ldr	r3, [r7, #4]
 8066d90:	781b      	ldrb	r3, [r3, #0]
 8066d92:	2b03      	cmp	r3, #3
 8066d94:	d109      	bne.n	8066daa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8066d96:	683b      	ldr	r3, [r7, #0]
 8066d98:	3314      	adds	r3, #20
 8066d9a:	4618      	mov	r0, r3
 8066d9c:	f7ff f802 	bl	8065da4 <ld_word>
 8066da0:	4603      	mov	r3, r0
 8066da2:	041b      	lsls	r3, r3, #16
 8066da4:	68fa      	ldr	r2, [r7, #12]
 8066da6:	4313      	orrs	r3, r2
 8066da8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8066daa:	68fb      	ldr	r3, [r7, #12]
}
 8066dac:	4618      	mov	r0, r3
 8066dae:	3710      	adds	r7, #16
 8066db0:	46bd      	mov	sp, r7
 8066db2:	bd80      	pop	{r7, pc}

08066db4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8066db4:	b580      	push	{r7, lr}
 8066db6:	b084      	sub	sp, #16
 8066db8:	af00      	add	r7, sp, #0
 8066dba:	60f8      	str	r0, [r7, #12]
 8066dbc:	60b9      	str	r1, [r7, #8]
 8066dbe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8066dc0:	68bb      	ldr	r3, [r7, #8]
 8066dc2:	331a      	adds	r3, #26
 8066dc4:	687a      	ldr	r2, [r7, #4]
 8066dc6:	b292      	uxth	r2, r2
 8066dc8:	4611      	mov	r1, r2
 8066dca:	4618      	mov	r0, r3
 8066dcc:	f7ff f825 	bl	8065e1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8066dd0:	68fb      	ldr	r3, [r7, #12]
 8066dd2:	781b      	ldrb	r3, [r3, #0]
 8066dd4:	2b03      	cmp	r3, #3
 8066dd6:	d109      	bne.n	8066dec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8066dd8:	68bb      	ldr	r3, [r7, #8]
 8066dda:	f103 0214 	add.w	r2, r3, #20
 8066dde:	687b      	ldr	r3, [r7, #4]
 8066de0:	0c1b      	lsrs	r3, r3, #16
 8066de2:	b29b      	uxth	r3, r3
 8066de4:	4619      	mov	r1, r3
 8066de6:	4610      	mov	r0, r2
 8066de8:	f7ff f817 	bl	8065e1a <st_word>
	}
}
 8066dec:	bf00      	nop
 8066dee:	3710      	adds	r7, #16
 8066df0:	46bd      	mov	sp, r7
 8066df2:	bd80      	pop	{r7, pc}

08066df4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8066df4:	b580      	push	{r7, lr}
 8066df6:	b086      	sub	sp, #24
 8066df8:	af00      	add	r7, sp, #0
 8066dfa:	6078      	str	r0, [r7, #4]
 8066dfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8066dfe:	2304      	movs	r3, #4
 8066e00:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8066e02:	687b      	ldr	r3, [r7, #4]
 8066e04:	681b      	ldr	r3, [r3, #0]
 8066e06:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8066e08:	e03c      	b.n	8066e84 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8066e0a:	687b      	ldr	r3, [r7, #4]
 8066e0c:	69db      	ldr	r3, [r3, #28]
 8066e0e:	4619      	mov	r1, r3
 8066e10:	6938      	ldr	r0, [r7, #16]
 8066e12:	f7ff faa9 	bl	8066368 <move_window>
 8066e16:	4603      	mov	r3, r0
 8066e18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8066e1a:	7dfb      	ldrb	r3, [r7, #23]
 8066e1c:	2b00      	cmp	r3, #0
 8066e1e:	d136      	bne.n	8066e8e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8066e20:	687b      	ldr	r3, [r7, #4]
 8066e22:	6a1b      	ldr	r3, [r3, #32]
 8066e24:	781b      	ldrb	r3, [r3, #0]
 8066e26:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8066e28:	7bfb      	ldrb	r3, [r7, #15]
 8066e2a:	2b00      	cmp	r3, #0
 8066e2c:	d102      	bne.n	8066e34 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8066e2e:	2304      	movs	r3, #4
 8066e30:	75fb      	strb	r3, [r7, #23]
 8066e32:	e031      	b.n	8066e98 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8066e34:	687b      	ldr	r3, [r7, #4]
 8066e36:	6a1b      	ldr	r3, [r3, #32]
 8066e38:	330b      	adds	r3, #11
 8066e3a:	781b      	ldrb	r3, [r3, #0]
 8066e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8066e40:	73bb      	strb	r3, [r7, #14]
 8066e42:	687b      	ldr	r3, [r7, #4]
 8066e44:	7bba      	ldrb	r2, [r7, #14]
 8066e46:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8066e48:	7bfb      	ldrb	r3, [r7, #15]
 8066e4a:	2be5      	cmp	r3, #229	; 0xe5
 8066e4c:	d011      	beq.n	8066e72 <dir_read+0x7e>
 8066e4e:	7bfb      	ldrb	r3, [r7, #15]
 8066e50:	2b2e      	cmp	r3, #46	; 0x2e
 8066e52:	d00e      	beq.n	8066e72 <dir_read+0x7e>
 8066e54:	7bbb      	ldrb	r3, [r7, #14]
 8066e56:	2b0f      	cmp	r3, #15
 8066e58:	d00b      	beq.n	8066e72 <dir_read+0x7e>
 8066e5a:	7bbb      	ldrb	r3, [r7, #14]
 8066e5c:	f023 0320 	bic.w	r3, r3, #32
 8066e60:	2b08      	cmp	r3, #8
 8066e62:	bf0c      	ite	eq
 8066e64:	2301      	moveq	r3, #1
 8066e66:	2300      	movne	r3, #0
 8066e68:	b2db      	uxtb	r3, r3
 8066e6a:	461a      	mov	r2, r3
 8066e6c:	683b      	ldr	r3, [r7, #0]
 8066e6e:	4293      	cmp	r3, r2
 8066e70:	d00f      	beq.n	8066e92 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8066e72:	2100      	movs	r1, #0
 8066e74:	6878      	ldr	r0, [r7, #4]
 8066e76:	f7ff fe72 	bl	8066b5e <dir_next>
 8066e7a:	4603      	mov	r3, r0
 8066e7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8066e7e:	7dfb      	ldrb	r3, [r7, #23]
 8066e80:	2b00      	cmp	r3, #0
 8066e82:	d108      	bne.n	8066e96 <dir_read+0xa2>
	while (dp->sect) {
 8066e84:	687b      	ldr	r3, [r7, #4]
 8066e86:	69db      	ldr	r3, [r3, #28]
 8066e88:	2b00      	cmp	r3, #0
 8066e8a:	d1be      	bne.n	8066e0a <dir_read+0x16>
 8066e8c:	e004      	b.n	8066e98 <dir_read+0xa4>
		if (res != FR_OK) break;
 8066e8e:	bf00      	nop
 8066e90:	e002      	b.n	8066e98 <dir_read+0xa4>
				break;
 8066e92:	bf00      	nop
 8066e94:	e000      	b.n	8066e98 <dir_read+0xa4>
		if (res != FR_OK) break;
 8066e96:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8066e98:	7dfb      	ldrb	r3, [r7, #23]
 8066e9a:	2b00      	cmp	r3, #0
 8066e9c:	d002      	beq.n	8066ea4 <dir_read+0xb0>
 8066e9e:	687b      	ldr	r3, [r7, #4]
 8066ea0:	2200      	movs	r2, #0
 8066ea2:	61da      	str	r2, [r3, #28]
	return res;
 8066ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8066ea6:	4618      	mov	r0, r3
 8066ea8:	3718      	adds	r7, #24
 8066eaa:	46bd      	mov	sp, r7
 8066eac:	bd80      	pop	{r7, pc}

08066eae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8066eae:	b580      	push	{r7, lr}
 8066eb0:	b086      	sub	sp, #24
 8066eb2:	af00      	add	r7, sp, #0
 8066eb4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8066eb6:	687b      	ldr	r3, [r7, #4]
 8066eb8:	681b      	ldr	r3, [r3, #0]
 8066eba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8066ebc:	2100      	movs	r1, #0
 8066ebe:	6878      	ldr	r0, [r7, #4]
 8066ec0:	f7ff fdd2 	bl	8066a68 <dir_sdi>
 8066ec4:	4603      	mov	r3, r0
 8066ec6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8066ec8:	7dfb      	ldrb	r3, [r7, #23]
 8066eca:	2b00      	cmp	r3, #0
 8066ecc:	d001      	beq.n	8066ed2 <dir_find+0x24>
 8066ece:	7dfb      	ldrb	r3, [r7, #23]
 8066ed0:	e03e      	b.n	8066f50 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8066ed2:	687b      	ldr	r3, [r7, #4]
 8066ed4:	69db      	ldr	r3, [r3, #28]
 8066ed6:	4619      	mov	r1, r3
 8066ed8:	6938      	ldr	r0, [r7, #16]
 8066eda:	f7ff fa45 	bl	8066368 <move_window>
 8066ede:	4603      	mov	r3, r0
 8066ee0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8066ee2:	7dfb      	ldrb	r3, [r7, #23]
 8066ee4:	2b00      	cmp	r3, #0
 8066ee6:	d12f      	bne.n	8066f48 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8066ee8:	687b      	ldr	r3, [r7, #4]
 8066eea:	6a1b      	ldr	r3, [r3, #32]
 8066eec:	781b      	ldrb	r3, [r3, #0]
 8066eee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8066ef0:	7bfb      	ldrb	r3, [r7, #15]
 8066ef2:	2b00      	cmp	r3, #0
 8066ef4:	d102      	bne.n	8066efc <dir_find+0x4e>
 8066ef6:	2304      	movs	r3, #4
 8066ef8:	75fb      	strb	r3, [r7, #23]
 8066efa:	e028      	b.n	8066f4e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8066efc:	687b      	ldr	r3, [r7, #4]
 8066efe:	6a1b      	ldr	r3, [r3, #32]
 8066f00:	330b      	adds	r3, #11
 8066f02:	781b      	ldrb	r3, [r3, #0]
 8066f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8066f08:	b2da      	uxtb	r2, r3
 8066f0a:	687b      	ldr	r3, [r7, #4]
 8066f0c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8066f0e:	687b      	ldr	r3, [r7, #4]
 8066f10:	6a1b      	ldr	r3, [r3, #32]
 8066f12:	330b      	adds	r3, #11
 8066f14:	781b      	ldrb	r3, [r3, #0]
 8066f16:	f003 0308 	and.w	r3, r3, #8
 8066f1a:	2b00      	cmp	r3, #0
 8066f1c:	d10a      	bne.n	8066f34 <dir_find+0x86>
 8066f1e:	687b      	ldr	r3, [r7, #4]
 8066f20:	6a18      	ldr	r0, [r3, #32]
 8066f22:	687b      	ldr	r3, [r7, #4]
 8066f24:	3324      	adds	r3, #36	; 0x24
 8066f26:	220b      	movs	r2, #11
 8066f28:	4619      	mov	r1, r3
 8066f2a:	f7fe fff9 	bl	8065f20 <mem_cmp>
 8066f2e:	4603      	mov	r3, r0
 8066f30:	2b00      	cmp	r3, #0
 8066f32:	d00b      	beq.n	8066f4c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8066f34:	2100      	movs	r1, #0
 8066f36:	6878      	ldr	r0, [r7, #4]
 8066f38:	f7ff fe11 	bl	8066b5e <dir_next>
 8066f3c:	4603      	mov	r3, r0
 8066f3e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8066f40:	7dfb      	ldrb	r3, [r7, #23]
 8066f42:	2b00      	cmp	r3, #0
 8066f44:	d0c5      	beq.n	8066ed2 <dir_find+0x24>
 8066f46:	e002      	b.n	8066f4e <dir_find+0xa0>
		if (res != FR_OK) break;
 8066f48:	bf00      	nop
 8066f4a:	e000      	b.n	8066f4e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8066f4c:	bf00      	nop

	return res;
 8066f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8066f50:	4618      	mov	r0, r3
 8066f52:	3718      	adds	r7, #24
 8066f54:	46bd      	mov	sp, r7
 8066f56:	bd80      	pop	{r7, pc}

08066f58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8066f58:	b580      	push	{r7, lr}
 8066f5a:	b084      	sub	sp, #16
 8066f5c:	af00      	add	r7, sp, #0
 8066f5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8066f60:	687b      	ldr	r3, [r7, #4]
 8066f62:	681b      	ldr	r3, [r3, #0]
 8066f64:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8066f66:	2101      	movs	r1, #1
 8066f68:	6878      	ldr	r0, [r7, #4]
 8066f6a:	f7ff febd 	bl	8066ce8 <dir_alloc>
 8066f6e:	4603      	mov	r3, r0
 8066f70:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8066f72:	7bfb      	ldrb	r3, [r7, #15]
 8066f74:	2b00      	cmp	r3, #0
 8066f76:	d11c      	bne.n	8066fb2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8066f78:	687b      	ldr	r3, [r7, #4]
 8066f7a:	69db      	ldr	r3, [r3, #28]
 8066f7c:	4619      	mov	r1, r3
 8066f7e:	68b8      	ldr	r0, [r7, #8]
 8066f80:	f7ff f9f2 	bl	8066368 <move_window>
 8066f84:	4603      	mov	r3, r0
 8066f86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8066f88:	7bfb      	ldrb	r3, [r7, #15]
 8066f8a:	2b00      	cmp	r3, #0
 8066f8c:	d111      	bne.n	8066fb2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8066f8e:	687b      	ldr	r3, [r7, #4]
 8066f90:	6a1b      	ldr	r3, [r3, #32]
 8066f92:	2220      	movs	r2, #32
 8066f94:	2100      	movs	r1, #0
 8066f96:	4618      	mov	r0, r3
 8066f98:	f7fe ffa7 	bl	8065eea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8066f9c:	687b      	ldr	r3, [r7, #4]
 8066f9e:	6a18      	ldr	r0, [r3, #32]
 8066fa0:	687b      	ldr	r3, [r7, #4]
 8066fa2:	3324      	adds	r3, #36	; 0x24
 8066fa4:	220b      	movs	r2, #11
 8066fa6:	4619      	mov	r1, r3
 8066fa8:	f7fe ff7e 	bl	8065ea8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8066fac:	68bb      	ldr	r3, [r7, #8]
 8066fae:	2201      	movs	r2, #1
 8066fb0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8066fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8066fb4:	4618      	mov	r0, r3
 8066fb6:	3710      	adds	r7, #16
 8066fb8:	46bd      	mov	sp, r7
 8066fba:	bd80      	pop	{r7, pc}

08066fbc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8066fbc:	b580      	push	{r7, lr}
 8066fbe:	b084      	sub	sp, #16
 8066fc0:	af00      	add	r7, sp, #0
 8066fc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8066fc4:	687b      	ldr	r3, [r7, #4]
 8066fc6:	681b      	ldr	r3, [r3, #0]
 8066fc8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8066fca:	687b      	ldr	r3, [r7, #4]
 8066fcc:	69db      	ldr	r3, [r3, #28]
 8066fce:	4619      	mov	r1, r3
 8066fd0:	68f8      	ldr	r0, [r7, #12]
 8066fd2:	f7ff f9c9 	bl	8066368 <move_window>
 8066fd6:	4603      	mov	r3, r0
 8066fd8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8066fda:	7afb      	ldrb	r3, [r7, #11]
 8066fdc:	2b00      	cmp	r3, #0
 8066fde:	d106      	bne.n	8066fee <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8066fe0:	687b      	ldr	r3, [r7, #4]
 8066fe2:	6a1b      	ldr	r3, [r3, #32]
 8066fe4:	22e5      	movs	r2, #229	; 0xe5
 8066fe6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8066fe8:	68fb      	ldr	r3, [r7, #12]
 8066fea:	2201      	movs	r2, #1
 8066fec:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8066fee:	7afb      	ldrb	r3, [r7, #11]
}
 8066ff0:	4618      	mov	r0, r3
 8066ff2:	3710      	adds	r7, #16
 8066ff4:	46bd      	mov	sp, r7
 8066ff6:	bd80      	pop	{r7, pc}

08066ff8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8066ff8:	b580      	push	{r7, lr}
 8066ffa:	b088      	sub	sp, #32
 8066ffc:	af00      	add	r7, sp, #0
 8066ffe:	6078      	str	r0, [r7, #4]
 8067000:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8067002:	683b      	ldr	r3, [r7, #0]
 8067004:	681b      	ldr	r3, [r3, #0]
 8067006:	60fb      	str	r3, [r7, #12]
 8067008:	687b      	ldr	r3, [r7, #4]
 806700a:	3324      	adds	r3, #36	; 0x24
 806700c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 806700e:	220b      	movs	r2, #11
 8067010:	2120      	movs	r1, #32
 8067012:	68b8      	ldr	r0, [r7, #8]
 8067014:	f7fe ff69 	bl	8065eea <mem_set>
	si = i = 0; ni = 8;
 8067018:	2300      	movs	r3, #0
 806701a:	613b      	str	r3, [r7, #16]
 806701c:	693b      	ldr	r3, [r7, #16]
 806701e:	61fb      	str	r3, [r7, #28]
 8067020:	2308      	movs	r3, #8
 8067022:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8067024:	69fb      	ldr	r3, [r7, #28]
 8067026:	1c5a      	adds	r2, r3, #1
 8067028:	61fa      	str	r2, [r7, #28]
 806702a:	68fa      	ldr	r2, [r7, #12]
 806702c:	4413      	add	r3, r2
 806702e:	781b      	ldrb	r3, [r3, #0]
 8067030:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8067032:	7efb      	ldrb	r3, [r7, #27]
 8067034:	2b20      	cmp	r3, #32
 8067036:	d94e      	bls.n	80670d6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8067038:	7efb      	ldrb	r3, [r7, #27]
 806703a:	2b2f      	cmp	r3, #47	; 0x2f
 806703c:	d006      	beq.n	806704c <create_name+0x54>
 806703e:	7efb      	ldrb	r3, [r7, #27]
 8067040:	2b5c      	cmp	r3, #92	; 0x5c
 8067042:	d110      	bne.n	8067066 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8067044:	e002      	b.n	806704c <create_name+0x54>
 8067046:	69fb      	ldr	r3, [r7, #28]
 8067048:	3301      	adds	r3, #1
 806704a:	61fb      	str	r3, [r7, #28]
 806704c:	68fa      	ldr	r2, [r7, #12]
 806704e:	69fb      	ldr	r3, [r7, #28]
 8067050:	4413      	add	r3, r2
 8067052:	781b      	ldrb	r3, [r3, #0]
 8067054:	2b2f      	cmp	r3, #47	; 0x2f
 8067056:	d0f6      	beq.n	8067046 <create_name+0x4e>
 8067058:	68fa      	ldr	r2, [r7, #12]
 806705a:	69fb      	ldr	r3, [r7, #28]
 806705c:	4413      	add	r3, r2
 806705e:	781b      	ldrb	r3, [r3, #0]
 8067060:	2b5c      	cmp	r3, #92	; 0x5c
 8067062:	d0f0      	beq.n	8067046 <create_name+0x4e>
			break;
 8067064:	e038      	b.n	80670d8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8067066:	7efb      	ldrb	r3, [r7, #27]
 8067068:	2b2e      	cmp	r3, #46	; 0x2e
 806706a:	d003      	beq.n	8067074 <create_name+0x7c>
 806706c:	693a      	ldr	r2, [r7, #16]
 806706e:	697b      	ldr	r3, [r7, #20]
 8067070:	429a      	cmp	r2, r3
 8067072:	d30c      	bcc.n	806708e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8067074:	697b      	ldr	r3, [r7, #20]
 8067076:	2b0b      	cmp	r3, #11
 8067078:	d002      	beq.n	8067080 <create_name+0x88>
 806707a:	7efb      	ldrb	r3, [r7, #27]
 806707c:	2b2e      	cmp	r3, #46	; 0x2e
 806707e:	d001      	beq.n	8067084 <create_name+0x8c>
 8067080:	2306      	movs	r3, #6
 8067082:	e044      	b.n	806710e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8067084:	2308      	movs	r3, #8
 8067086:	613b      	str	r3, [r7, #16]
 8067088:	230b      	movs	r3, #11
 806708a:	617b      	str	r3, [r7, #20]
			continue;
 806708c:	e022      	b.n	80670d4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 806708e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8067092:	2b00      	cmp	r3, #0
 8067094:	da04      	bge.n	80670a0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8067096:	7efb      	ldrb	r3, [r7, #27]
 8067098:	3b80      	subs	r3, #128	; 0x80
 806709a:	4a1f      	ldr	r2, [pc, #124]	; (8067118 <create_name+0x120>)
 806709c:	5cd3      	ldrb	r3, [r2, r3]
 806709e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80670a0:	7efb      	ldrb	r3, [r7, #27]
 80670a2:	4619      	mov	r1, r3
 80670a4:	481d      	ldr	r0, [pc, #116]	; (806711c <create_name+0x124>)
 80670a6:	f7fe ff62 	bl	8065f6e <chk_chr>
 80670aa:	4603      	mov	r3, r0
 80670ac:	2b00      	cmp	r3, #0
 80670ae:	d001      	beq.n	80670b4 <create_name+0xbc>
 80670b0:	2306      	movs	r3, #6
 80670b2:	e02c      	b.n	806710e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80670b4:	7efb      	ldrb	r3, [r7, #27]
 80670b6:	2b60      	cmp	r3, #96	; 0x60
 80670b8:	d905      	bls.n	80670c6 <create_name+0xce>
 80670ba:	7efb      	ldrb	r3, [r7, #27]
 80670bc:	2b7a      	cmp	r3, #122	; 0x7a
 80670be:	d802      	bhi.n	80670c6 <create_name+0xce>
 80670c0:	7efb      	ldrb	r3, [r7, #27]
 80670c2:	3b20      	subs	r3, #32
 80670c4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80670c6:	693b      	ldr	r3, [r7, #16]
 80670c8:	1c5a      	adds	r2, r3, #1
 80670ca:	613a      	str	r2, [r7, #16]
 80670cc:	68ba      	ldr	r2, [r7, #8]
 80670ce:	4413      	add	r3, r2
 80670d0:	7efa      	ldrb	r2, [r7, #27]
 80670d2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80670d4:	e7a6      	b.n	8067024 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80670d6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80670d8:	68fa      	ldr	r2, [r7, #12]
 80670da:	69fb      	ldr	r3, [r7, #28]
 80670dc:	441a      	add	r2, r3
 80670de:	683b      	ldr	r3, [r7, #0]
 80670e0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80670e2:	693b      	ldr	r3, [r7, #16]
 80670e4:	2b00      	cmp	r3, #0
 80670e6:	d101      	bne.n	80670ec <create_name+0xf4>
 80670e8:	2306      	movs	r3, #6
 80670ea:	e010      	b.n	806710e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80670ec:	68bb      	ldr	r3, [r7, #8]
 80670ee:	781b      	ldrb	r3, [r3, #0]
 80670f0:	2be5      	cmp	r3, #229	; 0xe5
 80670f2:	d102      	bne.n	80670fa <create_name+0x102>
 80670f4:	68bb      	ldr	r3, [r7, #8]
 80670f6:	2205      	movs	r2, #5
 80670f8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80670fa:	7efb      	ldrb	r3, [r7, #27]
 80670fc:	2b20      	cmp	r3, #32
 80670fe:	d801      	bhi.n	8067104 <create_name+0x10c>
 8067100:	2204      	movs	r2, #4
 8067102:	e000      	b.n	8067106 <create_name+0x10e>
 8067104:	2200      	movs	r2, #0
 8067106:	68bb      	ldr	r3, [r7, #8]
 8067108:	330b      	adds	r3, #11
 806710a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 806710c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 806710e:	4618      	mov	r0, r3
 8067110:	3720      	adds	r7, #32
 8067112:	46bd      	mov	sp, r7
 8067114:	bd80      	pop	{r7, pc}
 8067116:	bf00      	nop
 8067118:	0806d5cc 	.word	0x0806d5cc
 806711c:	0806d460 	.word	0x0806d460

08067120 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8067120:	b580      	push	{r7, lr}
 8067122:	b086      	sub	sp, #24
 8067124:	af00      	add	r7, sp, #0
 8067126:	6078      	str	r0, [r7, #4]
 8067128:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 806712a:	687b      	ldr	r3, [r7, #4]
 806712c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 806712e:	693b      	ldr	r3, [r7, #16]
 8067130:	681b      	ldr	r3, [r3, #0]
 8067132:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8067134:	e002      	b.n	806713c <follow_path+0x1c>
 8067136:	683b      	ldr	r3, [r7, #0]
 8067138:	3301      	adds	r3, #1
 806713a:	603b      	str	r3, [r7, #0]
 806713c:	683b      	ldr	r3, [r7, #0]
 806713e:	781b      	ldrb	r3, [r3, #0]
 8067140:	2b2f      	cmp	r3, #47	; 0x2f
 8067142:	d0f8      	beq.n	8067136 <follow_path+0x16>
 8067144:	683b      	ldr	r3, [r7, #0]
 8067146:	781b      	ldrb	r3, [r3, #0]
 8067148:	2b5c      	cmp	r3, #92	; 0x5c
 806714a:	d0f4      	beq.n	8067136 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 806714c:	693b      	ldr	r3, [r7, #16]
 806714e:	2200      	movs	r2, #0
 8067150:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8067152:	683b      	ldr	r3, [r7, #0]
 8067154:	781b      	ldrb	r3, [r3, #0]
 8067156:	2b1f      	cmp	r3, #31
 8067158:	d80a      	bhi.n	8067170 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 806715a:	687b      	ldr	r3, [r7, #4]
 806715c:	2280      	movs	r2, #128	; 0x80
 806715e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8067162:	2100      	movs	r1, #0
 8067164:	6878      	ldr	r0, [r7, #4]
 8067166:	f7ff fc7f 	bl	8066a68 <dir_sdi>
 806716a:	4603      	mov	r3, r0
 806716c:	75fb      	strb	r3, [r7, #23]
 806716e:	e043      	b.n	80671f8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8067170:	463b      	mov	r3, r7
 8067172:	4619      	mov	r1, r3
 8067174:	6878      	ldr	r0, [r7, #4]
 8067176:	f7ff ff3f 	bl	8066ff8 <create_name>
 806717a:	4603      	mov	r3, r0
 806717c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 806717e:	7dfb      	ldrb	r3, [r7, #23]
 8067180:	2b00      	cmp	r3, #0
 8067182:	d134      	bne.n	80671ee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8067184:	6878      	ldr	r0, [r7, #4]
 8067186:	f7ff fe92 	bl	8066eae <dir_find>
 806718a:	4603      	mov	r3, r0
 806718c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 806718e:	687b      	ldr	r3, [r7, #4]
 8067190:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8067194:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8067196:	7dfb      	ldrb	r3, [r7, #23]
 8067198:	2b00      	cmp	r3, #0
 806719a:	d00a      	beq.n	80671b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 806719c:	7dfb      	ldrb	r3, [r7, #23]
 806719e:	2b04      	cmp	r3, #4
 80671a0:	d127      	bne.n	80671f2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80671a2:	7afb      	ldrb	r3, [r7, #11]
 80671a4:	f003 0304 	and.w	r3, r3, #4
 80671a8:	2b00      	cmp	r3, #0
 80671aa:	d122      	bne.n	80671f2 <follow_path+0xd2>
 80671ac:	2305      	movs	r3, #5
 80671ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80671b0:	e01f      	b.n	80671f2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80671b2:	7afb      	ldrb	r3, [r7, #11]
 80671b4:	f003 0304 	and.w	r3, r3, #4
 80671b8:	2b00      	cmp	r3, #0
 80671ba:	d11c      	bne.n	80671f6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80671bc:	693b      	ldr	r3, [r7, #16]
 80671be:	799b      	ldrb	r3, [r3, #6]
 80671c0:	f003 0310 	and.w	r3, r3, #16
 80671c4:	2b00      	cmp	r3, #0
 80671c6:	d102      	bne.n	80671ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 80671c8:	2305      	movs	r3, #5
 80671ca:	75fb      	strb	r3, [r7, #23]
 80671cc:	e014      	b.n	80671f8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80671ce:	68fb      	ldr	r3, [r7, #12]
 80671d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80671d4:	687b      	ldr	r3, [r7, #4]
 80671d6:	695b      	ldr	r3, [r3, #20]
 80671d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80671dc:	4413      	add	r3, r2
 80671de:	4619      	mov	r1, r3
 80671e0:	68f8      	ldr	r0, [r7, #12]
 80671e2:	f7ff fdc8 	bl	8066d76 <ld_clust>
 80671e6:	4602      	mov	r2, r0
 80671e8:	693b      	ldr	r3, [r7, #16]
 80671ea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80671ec:	e7c0      	b.n	8067170 <follow_path+0x50>
			if (res != FR_OK) break;
 80671ee:	bf00      	nop
 80671f0:	e002      	b.n	80671f8 <follow_path+0xd8>
				break;
 80671f2:	bf00      	nop
 80671f4:	e000      	b.n	80671f8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80671f6:	bf00      	nop
			}
		}
	}

	return res;
 80671f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80671fa:	4618      	mov	r0, r3
 80671fc:	3718      	adds	r7, #24
 80671fe:	46bd      	mov	sp, r7
 8067200:	bd80      	pop	{r7, pc}

08067202 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8067202:	b480      	push	{r7}
 8067204:	b087      	sub	sp, #28
 8067206:	af00      	add	r7, sp, #0
 8067208:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 806720a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806720e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8067210:	687b      	ldr	r3, [r7, #4]
 8067212:	681b      	ldr	r3, [r3, #0]
 8067214:	2b00      	cmp	r3, #0
 8067216:	d031      	beq.n	806727c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8067218:	687b      	ldr	r3, [r7, #4]
 806721a:	681b      	ldr	r3, [r3, #0]
 806721c:	617b      	str	r3, [r7, #20]
 806721e:	e002      	b.n	8067226 <get_ldnumber+0x24>
 8067220:	697b      	ldr	r3, [r7, #20]
 8067222:	3301      	adds	r3, #1
 8067224:	617b      	str	r3, [r7, #20]
 8067226:	697b      	ldr	r3, [r7, #20]
 8067228:	781b      	ldrb	r3, [r3, #0]
 806722a:	2b20      	cmp	r3, #32
 806722c:	d903      	bls.n	8067236 <get_ldnumber+0x34>
 806722e:	697b      	ldr	r3, [r7, #20]
 8067230:	781b      	ldrb	r3, [r3, #0]
 8067232:	2b3a      	cmp	r3, #58	; 0x3a
 8067234:	d1f4      	bne.n	8067220 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8067236:	697b      	ldr	r3, [r7, #20]
 8067238:	781b      	ldrb	r3, [r3, #0]
 806723a:	2b3a      	cmp	r3, #58	; 0x3a
 806723c:	d11c      	bne.n	8067278 <get_ldnumber+0x76>
			tp = *path;
 806723e:	687b      	ldr	r3, [r7, #4]
 8067240:	681b      	ldr	r3, [r3, #0]
 8067242:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8067244:	68fb      	ldr	r3, [r7, #12]
 8067246:	1c5a      	adds	r2, r3, #1
 8067248:	60fa      	str	r2, [r7, #12]
 806724a:	781b      	ldrb	r3, [r3, #0]
 806724c:	3b30      	subs	r3, #48	; 0x30
 806724e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8067250:	68bb      	ldr	r3, [r7, #8]
 8067252:	2b09      	cmp	r3, #9
 8067254:	d80e      	bhi.n	8067274 <get_ldnumber+0x72>
 8067256:	68fa      	ldr	r2, [r7, #12]
 8067258:	697b      	ldr	r3, [r7, #20]
 806725a:	429a      	cmp	r2, r3
 806725c:	d10a      	bne.n	8067274 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 806725e:	68bb      	ldr	r3, [r7, #8]
 8067260:	2b00      	cmp	r3, #0
 8067262:	d107      	bne.n	8067274 <get_ldnumber+0x72>
					vol = (int)i;
 8067264:	68bb      	ldr	r3, [r7, #8]
 8067266:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8067268:	697b      	ldr	r3, [r7, #20]
 806726a:	3301      	adds	r3, #1
 806726c:	617b      	str	r3, [r7, #20]
 806726e:	687b      	ldr	r3, [r7, #4]
 8067270:	697a      	ldr	r2, [r7, #20]
 8067272:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8067274:	693b      	ldr	r3, [r7, #16]
 8067276:	e002      	b.n	806727e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8067278:	2300      	movs	r3, #0
 806727a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 806727c:	693b      	ldr	r3, [r7, #16]
}
 806727e:	4618      	mov	r0, r3
 8067280:	371c      	adds	r7, #28
 8067282:	46bd      	mov	sp, r7
 8067284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067288:	4770      	bx	lr
	...

0806728c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 806728c:	b580      	push	{r7, lr}
 806728e:	b082      	sub	sp, #8
 8067290:	af00      	add	r7, sp, #0
 8067292:	6078      	str	r0, [r7, #4]
 8067294:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8067296:	687b      	ldr	r3, [r7, #4]
 8067298:	2200      	movs	r2, #0
 806729a:	70da      	strb	r2, [r3, #3]
 806729c:	687b      	ldr	r3, [r7, #4]
 806729e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80672a2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80672a4:	6839      	ldr	r1, [r7, #0]
 80672a6:	6878      	ldr	r0, [r7, #4]
 80672a8:	f7ff f85e 	bl	8066368 <move_window>
 80672ac:	4603      	mov	r3, r0
 80672ae:	2b00      	cmp	r3, #0
 80672b0:	d001      	beq.n	80672b6 <check_fs+0x2a>
 80672b2:	2304      	movs	r3, #4
 80672b4:	e038      	b.n	8067328 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80672b6:	687b      	ldr	r3, [r7, #4]
 80672b8:	3334      	adds	r3, #52	; 0x34
 80672ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80672be:	4618      	mov	r0, r3
 80672c0:	f7fe fd70 	bl	8065da4 <ld_word>
 80672c4:	4603      	mov	r3, r0
 80672c6:	461a      	mov	r2, r3
 80672c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80672cc:	429a      	cmp	r2, r3
 80672ce:	d001      	beq.n	80672d4 <check_fs+0x48>
 80672d0:	2303      	movs	r3, #3
 80672d2:	e029      	b.n	8067328 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80672d4:	687b      	ldr	r3, [r7, #4]
 80672d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80672da:	2be9      	cmp	r3, #233	; 0xe9
 80672dc:	d009      	beq.n	80672f2 <check_fs+0x66>
 80672de:	687b      	ldr	r3, [r7, #4]
 80672e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80672e4:	2beb      	cmp	r3, #235	; 0xeb
 80672e6:	d11e      	bne.n	8067326 <check_fs+0x9a>
 80672e8:	687b      	ldr	r3, [r7, #4]
 80672ea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80672ee:	2b90      	cmp	r3, #144	; 0x90
 80672f0:	d119      	bne.n	8067326 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80672f2:	687b      	ldr	r3, [r7, #4]
 80672f4:	3334      	adds	r3, #52	; 0x34
 80672f6:	3336      	adds	r3, #54	; 0x36
 80672f8:	4618      	mov	r0, r3
 80672fa:	f7fe fd6b 	bl	8065dd4 <ld_dword>
 80672fe:	4603      	mov	r3, r0
 8067300:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8067304:	4a0a      	ldr	r2, [pc, #40]	; (8067330 <check_fs+0xa4>)
 8067306:	4293      	cmp	r3, r2
 8067308:	d101      	bne.n	806730e <check_fs+0x82>
 806730a:	2300      	movs	r3, #0
 806730c:	e00c      	b.n	8067328 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 806730e:	687b      	ldr	r3, [r7, #4]
 8067310:	3334      	adds	r3, #52	; 0x34
 8067312:	3352      	adds	r3, #82	; 0x52
 8067314:	4618      	mov	r0, r3
 8067316:	f7fe fd5d 	bl	8065dd4 <ld_dword>
 806731a:	4603      	mov	r3, r0
 806731c:	4a05      	ldr	r2, [pc, #20]	; (8067334 <check_fs+0xa8>)
 806731e:	4293      	cmp	r3, r2
 8067320:	d101      	bne.n	8067326 <check_fs+0x9a>
 8067322:	2300      	movs	r3, #0
 8067324:	e000      	b.n	8067328 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8067326:	2302      	movs	r3, #2
}
 8067328:	4618      	mov	r0, r3
 806732a:	3708      	adds	r7, #8
 806732c:	46bd      	mov	sp, r7
 806732e:	bd80      	pop	{r7, pc}
 8067330:	00544146 	.word	0x00544146
 8067334:	33544146 	.word	0x33544146

08067338 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8067338:	b580      	push	{r7, lr}
 806733a:	b096      	sub	sp, #88	; 0x58
 806733c:	af00      	add	r7, sp, #0
 806733e:	60f8      	str	r0, [r7, #12]
 8067340:	60b9      	str	r1, [r7, #8]
 8067342:	4613      	mov	r3, r2
 8067344:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8067346:	68bb      	ldr	r3, [r7, #8]
 8067348:	2200      	movs	r2, #0
 806734a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 806734c:	68f8      	ldr	r0, [r7, #12]
 806734e:	f7ff ff58 	bl	8067202 <get_ldnumber>
 8067352:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8067354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8067356:	2b00      	cmp	r3, #0
 8067358:	da01      	bge.n	806735e <find_volume+0x26>
 806735a:	230b      	movs	r3, #11
 806735c:	e236      	b.n	80677cc <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 806735e:	4aac      	ldr	r2, [pc, #688]	; (8067610 <find_volume+0x2d8>)
 8067360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8067362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8067366:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8067368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806736a:	2b00      	cmp	r3, #0
 806736c:	d101      	bne.n	8067372 <find_volume+0x3a>
 806736e:	230c      	movs	r3, #12
 8067370:	e22c      	b.n	80677cc <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8067372:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8067374:	f7fe fe16 	bl	8065fa4 <lock_fs>
 8067378:	4603      	mov	r3, r0
 806737a:	2b00      	cmp	r3, #0
 806737c:	d101      	bne.n	8067382 <find_volume+0x4a>
 806737e:	230f      	movs	r3, #15
 8067380:	e224      	b.n	80677cc <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8067382:	68bb      	ldr	r3, [r7, #8]
 8067384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8067386:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8067388:	79fb      	ldrb	r3, [r7, #7]
 806738a:	f023 0301 	bic.w	r3, r3, #1
 806738e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8067390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067392:	781b      	ldrb	r3, [r3, #0]
 8067394:	2b00      	cmp	r3, #0
 8067396:	d01a      	beq.n	80673ce <find_volume+0x96>
		stat = disk_status(fs->drv);
 8067398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806739a:	785b      	ldrb	r3, [r3, #1]
 806739c:	4618      	mov	r0, r3
 806739e:	f7fe fc63 	bl	8065c68 <disk_status>
 80673a2:	4603      	mov	r3, r0
 80673a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80673a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80673ac:	f003 0301 	and.w	r3, r3, #1
 80673b0:	2b00      	cmp	r3, #0
 80673b2:	d10c      	bne.n	80673ce <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80673b4:	79fb      	ldrb	r3, [r7, #7]
 80673b6:	2b00      	cmp	r3, #0
 80673b8:	d007      	beq.n	80673ca <find_volume+0x92>
 80673ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80673be:	f003 0304 	and.w	r3, r3, #4
 80673c2:	2b00      	cmp	r3, #0
 80673c4:	d001      	beq.n	80673ca <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80673c6:	230a      	movs	r3, #10
 80673c8:	e200      	b.n	80677cc <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 80673ca:	2300      	movs	r3, #0
 80673cc:	e1fe      	b.n	80677cc <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80673ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80673d0:	2200      	movs	r2, #0
 80673d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80673d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80673d6:	b2da      	uxtb	r2, r3
 80673d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80673da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80673dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80673de:	785b      	ldrb	r3, [r3, #1]
 80673e0:	4618      	mov	r0, r3
 80673e2:	f7fe fc5b 	bl	8065c9c <disk_initialize>
 80673e6:	4603      	mov	r3, r0
 80673e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80673ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80673f0:	f003 0301 	and.w	r3, r3, #1
 80673f4:	2b00      	cmp	r3, #0
 80673f6:	d001      	beq.n	80673fc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80673f8:	2303      	movs	r3, #3
 80673fa:	e1e7      	b.n	80677cc <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80673fc:	79fb      	ldrb	r3, [r7, #7]
 80673fe:	2b00      	cmp	r3, #0
 8067400:	d007      	beq.n	8067412 <find_volume+0xda>
 8067402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8067406:	f003 0304 	and.w	r3, r3, #4
 806740a:	2b00      	cmp	r3, #0
 806740c:	d001      	beq.n	8067412 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 806740e:	230a      	movs	r3, #10
 8067410:	e1dc      	b.n	80677cc <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8067412:	2300      	movs	r3, #0
 8067414:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8067416:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8067418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806741a:	f7ff ff37 	bl	806728c <check_fs>
 806741e:	4603      	mov	r3, r0
 8067420:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8067424:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8067428:	2b02      	cmp	r3, #2
 806742a:	d14b      	bne.n	80674c4 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 806742c:	2300      	movs	r3, #0
 806742e:	643b      	str	r3, [r7, #64]	; 0x40
 8067430:	e01f      	b.n	8067472 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8067432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067434:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8067438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806743a:	011b      	lsls	r3, r3, #4
 806743c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8067440:	4413      	add	r3, r2
 8067442:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8067444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8067446:	3304      	adds	r3, #4
 8067448:	781b      	ldrb	r3, [r3, #0]
 806744a:	2b00      	cmp	r3, #0
 806744c:	d006      	beq.n	806745c <find_volume+0x124>
 806744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8067450:	3308      	adds	r3, #8
 8067452:	4618      	mov	r0, r3
 8067454:	f7fe fcbe 	bl	8065dd4 <ld_dword>
 8067458:	4602      	mov	r2, r0
 806745a:	e000      	b.n	806745e <find_volume+0x126>
 806745c:	2200      	movs	r2, #0
 806745e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8067460:	009b      	lsls	r3, r3, #2
 8067462:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8067466:	440b      	add	r3, r1
 8067468:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 806746c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806746e:	3301      	adds	r3, #1
 8067470:	643b      	str	r3, [r7, #64]	; 0x40
 8067472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8067474:	2b03      	cmp	r3, #3
 8067476:	d9dc      	bls.n	8067432 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8067478:	2300      	movs	r3, #0
 806747a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 806747c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806747e:	2b00      	cmp	r3, #0
 8067480:	d002      	beq.n	8067488 <find_volume+0x150>
 8067482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8067484:	3b01      	subs	r3, #1
 8067486:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8067488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806748a:	009b      	lsls	r3, r3, #2
 806748c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8067490:	4413      	add	r3, r2
 8067492:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8067496:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8067498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806749a:	2b00      	cmp	r3, #0
 806749c:	d005      	beq.n	80674aa <find_volume+0x172>
 806749e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80674a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80674a2:	f7ff fef3 	bl	806728c <check_fs>
 80674a6:	4603      	mov	r3, r0
 80674a8:	e000      	b.n	80674ac <find_volume+0x174>
 80674aa:	2303      	movs	r3, #3
 80674ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80674b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80674b4:	2b01      	cmp	r3, #1
 80674b6:	d905      	bls.n	80674c4 <find_volume+0x18c>
 80674b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80674ba:	3301      	adds	r3, #1
 80674bc:	643b      	str	r3, [r7, #64]	; 0x40
 80674be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80674c0:	2b03      	cmp	r3, #3
 80674c2:	d9e1      	bls.n	8067488 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80674c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80674c8:	2b04      	cmp	r3, #4
 80674ca:	d101      	bne.n	80674d0 <find_volume+0x198>
 80674cc:	2301      	movs	r3, #1
 80674ce:	e17d      	b.n	80677cc <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80674d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80674d4:	2b01      	cmp	r3, #1
 80674d6:	d901      	bls.n	80674dc <find_volume+0x1a4>
 80674d8:	230d      	movs	r3, #13
 80674da:	e177      	b.n	80677cc <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80674dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80674de:	3334      	adds	r3, #52	; 0x34
 80674e0:	330b      	adds	r3, #11
 80674e2:	4618      	mov	r0, r3
 80674e4:	f7fe fc5e 	bl	8065da4 <ld_word>
 80674e8:	4603      	mov	r3, r0
 80674ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80674ee:	d001      	beq.n	80674f4 <find_volume+0x1bc>
 80674f0:	230d      	movs	r3, #13
 80674f2:	e16b      	b.n	80677cc <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80674f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80674f6:	3334      	adds	r3, #52	; 0x34
 80674f8:	3316      	adds	r3, #22
 80674fa:	4618      	mov	r0, r3
 80674fc:	f7fe fc52 	bl	8065da4 <ld_word>
 8067500:	4603      	mov	r3, r0
 8067502:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8067504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8067506:	2b00      	cmp	r3, #0
 8067508:	d106      	bne.n	8067518 <find_volume+0x1e0>
 806750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806750c:	3334      	adds	r3, #52	; 0x34
 806750e:	3324      	adds	r3, #36	; 0x24
 8067510:	4618      	mov	r0, r3
 8067512:	f7fe fc5f 	bl	8065dd4 <ld_dword>
 8067516:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8067518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806751a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 806751c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 806751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067520:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8067524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067526:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8067528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806752a:	789b      	ldrb	r3, [r3, #2]
 806752c:	2b01      	cmp	r3, #1
 806752e:	d005      	beq.n	806753c <find_volume+0x204>
 8067530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067532:	789b      	ldrb	r3, [r3, #2]
 8067534:	2b02      	cmp	r3, #2
 8067536:	d001      	beq.n	806753c <find_volume+0x204>
 8067538:	230d      	movs	r3, #13
 806753a:	e147      	b.n	80677cc <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 806753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806753e:	789b      	ldrb	r3, [r3, #2]
 8067540:	461a      	mov	r2, r3
 8067542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8067544:	fb02 f303 	mul.w	r3, r2, r3
 8067548:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 806754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806754c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8067550:	b29a      	uxth	r2, r3
 8067552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067554:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8067556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067558:	895b      	ldrh	r3, [r3, #10]
 806755a:	2b00      	cmp	r3, #0
 806755c:	d008      	beq.n	8067570 <find_volume+0x238>
 806755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067560:	895b      	ldrh	r3, [r3, #10]
 8067562:	461a      	mov	r2, r3
 8067564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067566:	895b      	ldrh	r3, [r3, #10]
 8067568:	3b01      	subs	r3, #1
 806756a:	4013      	ands	r3, r2
 806756c:	2b00      	cmp	r3, #0
 806756e:	d001      	beq.n	8067574 <find_volume+0x23c>
 8067570:	230d      	movs	r3, #13
 8067572:	e12b      	b.n	80677cc <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8067574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067576:	3334      	adds	r3, #52	; 0x34
 8067578:	3311      	adds	r3, #17
 806757a:	4618      	mov	r0, r3
 806757c:	f7fe fc12 	bl	8065da4 <ld_word>
 8067580:	4603      	mov	r3, r0
 8067582:	461a      	mov	r2, r3
 8067584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067586:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8067588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806758a:	891b      	ldrh	r3, [r3, #8]
 806758c:	f003 030f 	and.w	r3, r3, #15
 8067590:	b29b      	uxth	r3, r3
 8067592:	2b00      	cmp	r3, #0
 8067594:	d001      	beq.n	806759a <find_volume+0x262>
 8067596:	230d      	movs	r3, #13
 8067598:	e118      	b.n	80677cc <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 806759a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806759c:	3334      	adds	r3, #52	; 0x34
 806759e:	3313      	adds	r3, #19
 80675a0:	4618      	mov	r0, r3
 80675a2:	f7fe fbff 	bl	8065da4 <ld_word>
 80675a6:	4603      	mov	r3, r0
 80675a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80675aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80675ac:	2b00      	cmp	r3, #0
 80675ae:	d106      	bne.n	80675be <find_volume+0x286>
 80675b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80675b2:	3334      	adds	r3, #52	; 0x34
 80675b4:	3320      	adds	r3, #32
 80675b6:	4618      	mov	r0, r3
 80675b8:	f7fe fc0c 	bl	8065dd4 <ld_dword>
 80675bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80675be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80675c0:	3334      	adds	r3, #52	; 0x34
 80675c2:	330e      	adds	r3, #14
 80675c4:	4618      	mov	r0, r3
 80675c6:	f7fe fbed 	bl	8065da4 <ld_word>
 80675ca:	4603      	mov	r3, r0
 80675cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80675ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80675d0:	2b00      	cmp	r3, #0
 80675d2:	d101      	bne.n	80675d8 <find_volume+0x2a0>
 80675d4:	230d      	movs	r3, #13
 80675d6:	e0f9      	b.n	80677cc <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80675d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80675da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80675dc:	4413      	add	r3, r2
 80675de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80675e0:	8912      	ldrh	r2, [r2, #8]
 80675e2:	0912      	lsrs	r2, r2, #4
 80675e4:	b292      	uxth	r2, r2
 80675e6:	4413      	add	r3, r2
 80675e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80675ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80675ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80675ee:	429a      	cmp	r2, r3
 80675f0:	d201      	bcs.n	80675f6 <find_volume+0x2be>
 80675f2:	230d      	movs	r3, #13
 80675f4:	e0ea      	b.n	80677cc <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80675f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80675f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80675fa:	1ad3      	subs	r3, r2, r3
 80675fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80675fe:	8952      	ldrh	r2, [r2, #10]
 8067600:	fbb3 f3f2 	udiv	r3, r3, r2
 8067604:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8067606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8067608:	2b00      	cmp	r3, #0
 806760a:	d103      	bne.n	8067614 <find_volume+0x2dc>
 806760c:	230d      	movs	r3, #13
 806760e:	e0dd      	b.n	80677cc <find_volume+0x494>
 8067610:	200001b0 	.word	0x200001b0
		fmt = FS_FAT32;
 8067614:	2303      	movs	r3, #3
 8067616:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 806761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806761c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8067620:	4293      	cmp	r3, r2
 8067622:	d802      	bhi.n	806762a <find_volume+0x2f2>
 8067624:	2302      	movs	r3, #2
 8067626:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 806762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806762c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8067630:	4293      	cmp	r3, r2
 8067632:	d802      	bhi.n	806763a <find_volume+0x302>
 8067634:	2301      	movs	r3, #1
 8067636:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 806763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806763c:	1c9a      	adds	r2, r3, #2
 806763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067640:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8067642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067644:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8067646:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8067648:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 806764a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806764c:	441a      	add	r2, r3
 806764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067650:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8067652:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8067654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8067656:	441a      	add	r2, r3
 8067658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806765a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 806765c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8067660:	2b03      	cmp	r3, #3
 8067662:	d11e      	bne.n	80676a2 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8067664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067666:	3334      	adds	r3, #52	; 0x34
 8067668:	332a      	adds	r3, #42	; 0x2a
 806766a:	4618      	mov	r0, r3
 806766c:	f7fe fb9a 	bl	8065da4 <ld_word>
 8067670:	4603      	mov	r3, r0
 8067672:	2b00      	cmp	r3, #0
 8067674:	d001      	beq.n	806767a <find_volume+0x342>
 8067676:	230d      	movs	r3, #13
 8067678:	e0a8      	b.n	80677cc <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 806767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806767c:	891b      	ldrh	r3, [r3, #8]
 806767e:	2b00      	cmp	r3, #0
 8067680:	d001      	beq.n	8067686 <find_volume+0x34e>
 8067682:	230d      	movs	r3, #13
 8067684:	e0a2      	b.n	80677cc <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8067686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067688:	3334      	adds	r3, #52	; 0x34
 806768a:	332c      	adds	r3, #44	; 0x2c
 806768c:	4618      	mov	r0, r3
 806768e:	f7fe fba1 	bl	8065dd4 <ld_dword>
 8067692:	4602      	mov	r2, r0
 8067694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067696:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8067698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806769a:	699b      	ldr	r3, [r3, #24]
 806769c:	009b      	lsls	r3, r3, #2
 806769e:	647b      	str	r3, [r7, #68]	; 0x44
 80676a0:	e01f      	b.n	80676e2 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80676a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80676a4:	891b      	ldrh	r3, [r3, #8]
 80676a6:	2b00      	cmp	r3, #0
 80676a8:	d101      	bne.n	80676ae <find_volume+0x376>
 80676aa:	230d      	movs	r3, #13
 80676ac:	e08e      	b.n	80677cc <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80676ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80676b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80676b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80676b4:	441a      	add	r2, r3
 80676b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80676b8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80676ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80676be:	2b02      	cmp	r3, #2
 80676c0:	d103      	bne.n	80676ca <find_volume+0x392>
 80676c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80676c4:	699b      	ldr	r3, [r3, #24]
 80676c6:	005b      	lsls	r3, r3, #1
 80676c8:	e00a      	b.n	80676e0 <find_volume+0x3a8>
 80676ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80676cc:	699a      	ldr	r2, [r3, #24]
 80676ce:	4613      	mov	r3, r2
 80676d0:	005b      	lsls	r3, r3, #1
 80676d2:	4413      	add	r3, r2
 80676d4:	085a      	lsrs	r2, r3, #1
 80676d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80676d8:	699b      	ldr	r3, [r3, #24]
 80676da:	f003 0301 	and.w	r3, r3, #1
 80676de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80676e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80676e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80676e4:	69da      	ldr	r2, [r3, #28]
 80676e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80676e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80676ec:	0a5b      	lsrs	r3, r3, #9
 80676ee:	429a      	cmp	r2, r3
 80676f0:	d201      	bcs.n	80676f6 <find_volume+0x3be>
 80676f2:	230d      	movs	r3, #13
 80676f4:	e06a      	b.n	80677cc <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80676f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80676f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80676fc:	615a      	str	r2, [r3, #20]
 80676fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067700:	695a      	ldr	r2, [r3, #20]
 8067702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067704:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8067706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067708:	2280      	movs	r2, #128	; 0x80
 806770a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 806770c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8067710:	2b03      	cmp	r3, #3
 8067712:	d149      	bne.n	80677a8 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8067714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067716:	3334      	adds	r3, #52	; 0x34
 8067718:	3330      	adds	r3, #48	; 0x30
 806771a:	4618      	mov	r0, r3
 806771c:	f7fe fb42 	bl	8065da4 <ld_word>
 8067720:	4603      	mov	r3, r0
 8067722:	2b01      	cmp	r3, #1
 8067724:	d140      	bne.n	80677a8 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8067726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8067728:	3301      	adds	r3, #1
 806772a:	4619      	mov	r1, r3
 806772c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806772e:	f7fe fe1b 	bl	8066368 <move_window>
 8067732:	4603      	mov	r3, r0
 8067734:	2b00      	cmp	r3, #0
 8067736:	d137      	bne.n	80677a8 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8067738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806773a:	2200      	movs	r2, #0
 806773c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 806773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067740:	3334      	adds	r3, #52	; 0x34
 8067742:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8067746:	4618      	mov	r0, r3
 8067748:	f7fe fb2c 	bl	8065da4 <ld_word>
 806774c:	4603      	mov	r3, r0
 806774e:	461a      	mov	r2, r3
 8067750:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8067754:	429a      	cmp	r2, r3
 8067756:	d127      	bne.n	80677a8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8067758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806775a:	3334      	adds	r3, #52	; 0x34
 806775c:	4618      	mov	r0, r3
 806775e:	f7fe fb39 	bl	8065dd4 <ld_dword>
 8067762:	4603      	mov	r3, r0
 8067764:	4a1b      	ldr	r2, [pc, #108]	; (80677d4 <find_volume+0x49c>)
 8067766:	4293      	cmp	r3, r2
 8067768:	d11e      	bne.n	80677a8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 806776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806776c:	3334      	adds	r3, #52	; 0x34
 806776e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8067772:	4618      	mov	r0, r3
 8067774:	f7fe fb2e 	bl	8065dd4 <ld_dword>
 8067778:	4603      	mov	r3, r0
 806777a:	4a17      	ldr	r2, [pc, #92]	; (80677d8 <find_volume+0x4a0>)
 806777c:	4293      	cmp	r3, r2
 806777e:	d113      	bne.n	80677a8 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8067780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067782:	3334      	adds	r3, #52	; 0x34
 8067784:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8067788:	4618      	mov	r0, r3
 806778a:	f7fe fb23 	bl	8065dd4 <ld_dword>
 806778e:	4602      	mov	r2, r0
 8067790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067792:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8067794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8067796:	3334      	adds	r3, #52	; 0x34
 8067798:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 806779c:	4618      	mov	r0, r3
 806779e:	f7fe fb19 	bl	8065dd4 <ld_dword>
 80677a2:	4602      	mov	r2, r0
 80677a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80677a6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80677a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80677aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80677ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80677b0:	4b0a      	ldr	r3, [pc, #40]	; (80677dc <find_volume+0x4a4>)
 80677b2:	881b      	ldrh	r3, [r3, #0]
 80677b4:	3301      	adds	r3, #1
 80677b6:	b29a      	uxth	r2, r3
 80677b8:	4b08      	ldr	r3, [pc, #32]	; (80677dc <find_volume+0x4a4>)
 80677ba:	801a      	strh	r2, [r3, #0]
 80677bc:	4b07      	ldr	r3, [pc, #28]	; (80677dc <find_volume+0x4a4>)
 80677be:	881a      	ldrh	r2, [r3, #0]
 80677c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80677c2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80677c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80677c6:	f7fe fd67 	bl	8066298 <clear_lock>
#endif
	return FR_OK;
 80677ca:	2300      	movs	r3, #0
}
 80677cc:	4618      	mov	r0, r3
 80677ce:	3758      	adds	r7, #88	; 0x58
 80677d0:	46bd      	mov	sp, r7
 80677d2:	bd80      	pop	{r7, pc}
 80677d4:	41615252 	.word	0x41615252
 80677d8:	61417272 	.word	0x61417272
 80677dc:	200001b4 	.word	0x200001b4

080677e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80677e0:	b580      	push	{r7, lr}
 80677e2:	b084      	sub	sp, #16
 80677e4:	af00      	add	r7, sp, #0
 80677e6:	6078      	str	r0, [r7, #4]
 80677e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80677ea:	2309      	movs	r3, #9
 80677ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80677ee:	687b      	ldr	r3, [r7, #4]
 80677f0:	2b00      	cmp	r3, #0
 80677f2:	d02e      	beq.n	8067852 <validate+0x72>
 80677f4:	687b      	ldr	r3, [r7, #4]
 80677f6:	681b      	ldr	r3, [r3, #0]
 80677f8:	2b00      	cmp	r3, #0
 80677fa:	d02a      	beq.n	8067852 <validate+0x72>
 80677fc:	687b      	ldr	r3, [r7, #4]
 80677fe:	681b      	ldr	r3, [r3, #0]
 8067800:	781b      	ldrb	r3, [r3, #0]
 8067802:	2b00      	cmp	r3, #0
 8067804:	d025      	beq.n	8067852 <validate+0x72>
 8067806:	687b      	ldr	r3, [r7, #4]
 8067808:	889a      	ldrh	r2, [r3, #4]
 806780a:	687b      	ldr	r3, [r7, #4]
 806780c:	681b      	ldr	r3, [r3, #0]
 806780e:	88db      	ldrh	r3, [r3, #6]
 8067810:	429a      	cmp	r2, r3
 8067812:	d11e      	bne.n	8067852 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8067814:	687b      	ldr	r3, [r7, #4]
 8067816:	681b      	ldr	r3, [r3, #0]
 8067818:	4618      	mov	r0, r3
 806781a:	f7fe fbc3 	bl	8065fa4 <lock_fs>
 806781e:	4603      	mov	r3, r0
 8067820:	2b00      	cmp	r3, #0
 8067822:	d014      	beq.n	806784e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8067824:	687b      	ldr	r3, [r7, #4]
 8067826:	681b      	ldr	r3, [r3, #0]
 8067828:	785b      	ldrb	r3, [r3, #1]
 806782a:	4618      	mov	r0, r3
 806782c:	f7fe fa1c 	bl	8065c68 <disk_status>
 8067830:	4603      	mov	r3, r0
 8067832:	f003 0301 	and.w	r3, r3, #1
 8067836:	2b00      	cmp	r3, #0
 8067838:	d102      	bne.n	8067840 <validate+0x60>
				res = FR_OK;
 806783a:	2300      	movs	r3, #0
 806783c:	73fb      	strb	r3, [r7, #15]
 806783e:	e008      	b.n	8067852 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8067840:	687b      	ldr	r3, [r7, #4]
 8067842:	681b      	ldr	r3, [r3, #0]
 8067844:	2100      	movs	r1, #0
 8067846:	4618      	mov	r0, r3
 8067848:	f7fe fbc2 	bl	8065fd0 <unlock_fs>
 806784c:	e001      	b.n	8067852 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 806784e:	230f      	movs	r3, #15
 8067850:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8067852:	7bfb      	ldrb	r3, [r7, #15]
 8067854:	2b00      	cmp	r3, #0
 8067856:	d102      	bne.n	806785e <validate+0x7e>
 8067858:	687b      	ldr	r3, [r7, #4]
 806785a:	681b      	ldr	r3, [r3, #0]
 806785c:	e000      	b.n	8067860 <validate+0x80>
 806785e:	2300      	movs	r3, #0
 8067860:	683a      	ldr	r2, [r7, #0]
 8067862:	6013      	str	r3, [r2, #0]
	return res;
 8067864:	7bfb      	ldrb	r3, [r7, #15]
}
 8067866:	4618      	mov	r0, r3
 8067868:	3710      	adds	r7, #16
 806786a:	46bd      	mov	sp, r7
 806786c:	bd80      	pop	{r7, pc}
	...

08067870 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8067870:	b580      	push	{r7, lr}
 8067872:	b088      	sub	sp, #32
 8067874:	af00      	add	r7, sp, #0
 8067876:	60f8      	str	r0, [r7, #12]
 8067878:	60b9      	str	r1, [r7, #8]
 806787a:	4613      	mov	r3, r2
 806787c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 806787e:	68bb      	ldr	r3, [r7, #8]
 8067880:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8067882:	f107 0310 	add.w	r3, r7, #16
 8067886:	4618      	mov	r0, r3
 8067888:	f7ff fcbb 	bl	8067202 <get_ldnumber>
 806788c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 806788e:	69fb      	ldr	r3, [r7, #28]
 8067890:	2b00      	cmp	r3, #0
 8067892:	da01      	bge.n	8067898 <f_mount+0x28>
 8067894:	230b      	movs	r3, #11
 8067896:	e048      	b.n	806792a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8067898:	4a26      	ldr	r2, [pc, #152]	; (8067934 <f_mount+0xc4>)
 806789a:	69fb      	ldr	r3, [r7, #28]
 806789c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80678a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80678a2:	69bb      	ldr	r3, [r7, #24]
 80678a4:	2b00      	cmp	r3, #0
 80678a6:	d00f      	beq.n	80678c8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80678a8:	69b8      	ldr	r0, [r7, #24]
 80678aa:	f7fe fcf5 	bl	8066298 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80678ae:	69bb      	ldr	r3, [r7, #24]
 80678b0:	68db      	ldr	r3, [r3, #12]
 80678b2:	4618      	mov	r0, r3
 80678b4:	f000 fef8 	bl	80686a8 <ff_del_syncobj>
 80678b8:	4603      	mov	r3, r0
 80678ba:	2b00      	cmp	r3, #0
 80678bc:	d101      	bne.n	80678c2 <f_mount+0x52>
 80678be:	2302      	movs	r3, #2
 80678c0:	e033      	b.n	806792a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80678c2:	69bb      	ldr	r3, [r7, #24]
 80678c4:	2200      	movs	r2, #0
 80678c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80678c8:	68fb      	ldr	r3, [r7, #12]
 80678ca:	2b00      	cmp	r3, #0
 80678cc:	d00f      	beq.n	80678ee <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80678ce:	68fb      	ldr	r3, [r7, #12]
 80678d0:	2200      	movs	r2, #0
 80678d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80678d4:	69fb      	ldr	r3, [r7, #28]
 80678d6:	b2da      	uxtb	r2, r3
 80678d8:	68fb      	ldr	r3, [r7, #12]
 80678da:	330c      	adds	r3, #12
 80678dc:	4619      	mov	r1, r3
 80678de:	4610      	mov	r0, r2
 80678e0:	f000 fec7 	bl	8068672 <ff_cre_syncobj>
 80678e4:	4603      	mov	r3, r0
 80678e6:	2b00      	cmp	r3, #0
 80678e8:	d101      	bne.n	80678ee <f_mount+0x7e>
 80678ea:	2302      	movs	r3, #2
 80678ec:	e01d      	b.n	806792a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80678ee:	68fa      	ldr	r2, [r7, #12]
 80678f0:	4910      	ldr	r1, [pc, #64]	; (8067934 <f_mount+0xc4>)
 80678f2:	69fb      	ldr	r3, [r7, #28]
 80678f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80678f8:	68fb      	ldr	r3, [r7, #12]
 80678fa:	2b00      	cmp	r3, #0
 80678fc:	d002      	beq.n	8067904 <f_mount+0x94>
 80678fe:	79fb      	ldrb	r3, [r7, #7]
 8067900:	2b01      	cmp	r3, #1
 8067902:	d001      	beq.n	8067908 <f_mount+0x98>
 8067904:	2300      	movs	r3, #0
 8067906:	e010      	b.n	806792a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8067908:	f107 010c 	add.w	r1, r7, #12
 806790c:	f107 0308 	add.w	r3, r7, #8
 8067910:	2200      	movs	r2, #0
 8067912:	4618      	mov	r0, r3
 8067914:	f7ff fd10 	bl	8067338 <find_volume>
 8067918:	4603      	mov	r3, r0
 806791a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 806791c:	68fb      	ldr	r3, [r7, #12]
 806791e:	7dfa      	ldrb	r2, [r7, #23]
 8067920:	4611      	mov	r1, r2
 8067922:	4618      	mov	r0, r3
 8067924:	f7fe fb54 	bl	8065fd0 <unlock_fs>
 8067928:	7dfb      	ldrb	r3, [r7, #23]
}
 806792a:	4618      	mov	r0, r3
 806792c:	3720      	adds	r7, #32
 806792e:	46bd      	mov	sp, r7
 8067930:	bd80      	pop	{r7, pc}
 8067932:	bf00      	nop
 8067934:	200001b0 	.word	0x200001b0

08067938 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8067938:	b580      	push	{r7, lr}
 806793a:	b098      	sub	sp, #96	; 0x60
 806793c:	af00      	add	r7, sp, #0
 806793e:	60f8      	str	r0, [r7, #12]
 8067940:	60b9      	str	r1, [r7, #8]
 8067942:	4613      	mov	r3, r2
 8067944:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8067946:	68fb      	ldr	r3, [r7, #12]
 8067948:	2b00      	cmp	r3, #0
 806794a:	d101      	bne.n	8067950 <f_open+0x18>
 806794c:	2309      	movs	r3, #9
 806794e:	e1b4      	b.n	8067cba <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8067950:	79fb      	ldrb	r3, [r7, #7]
 8067952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8067956:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8067958:	79fa      	ldrb	r2, [r7, #7]
 806795a:	f107 0110 	add.w	r1, r7, #16
 806795e:	f107 0308 	add.w	r3, r7, #8
 8067962:	4618      	mov	r0, r3
 8067964:	f7ff fce8 	bl	8067338 <find_volume>
 8067968:	4603      	mov	r3, r0
 806796a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 806796e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8067972:	2b00      	cmp	r3, #0
 8067974:	f040 8191 	bne.w	8067c9a <f_open+0x362>
		dj.obj.fs = fs;
 8067978:	693b      	ldr	r3, [r7, #16]
 806797a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 806797c:	68ba      	ldr	r2, [r7, #8]
 806797e:	f107 0314 	add.w	r3, r7, #20
 8067982:	4611      	mov	r1, r2
 8067984:	4618      	mov	r0, r3
 8067986:	f7ff fbcb 	bl	8067120 <follow_path>
 806798a:	4603      	mov	r3, r0
 806798c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8067990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8067994:	2b00      	cmp	r3, #0
 8067996:	d11a      	bne.n	80679ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8067998:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 806799c:	b25b      	sxtb	r3, r3
 806799e:	2b00      	cmp	r3, #0
 80679a0:	da03      	bge.n	80679aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80679a2:	2306      	movs	r3, #6
 80679a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80679a8:	e011      	b.n	80679ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80679aa:	79fb      	ldrb	r3, [r7, #7]
 80679ac:	f023 0301 	bic.w	r3, r3, #1
 80679b0:	2b00      	cmp	r3, #0
 80679b2:	bf14      	ite	ne
 80679b4:	2301      	movne	r3, #1
 80679b6:	2300      	moveq	r3, #0
 80679b8:	b2db      	uxtb	r3, r3
 80679ba:	461a      	mov	r2, r3
 80679bc:	f107 0314 	add.w	r3, r7, #20
 80679c0:	4611      	mov	r1, r2
 80679c2:	4618      	mov	r0, r3
 80679c4:	f7fe fb20 	bl	8066008 <chk_lock>
 80679c8:	4603      	mov	r3, r0
 80679ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80679ce:	79fb      	ldrb	r3, [r7, #7]
 80679d0:	f003 031c 	and.w	r3, r3, #28
 80679d4:	2b00      	cmp	r3, #0
 80679d6:	d07f      	beq.n	8067ad8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80679d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80679dc:	2b00      	cmp	r3, #0
 80679de:	d017      	beq.n	8067a10 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80679e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80679e4:	2b04      	cmp	r3, #4
 80679e6:	d10e      	bne.n	8067a06 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80679e8:	f7fe fb6a 	bl	80660c0 <enq_lock>
 80679ec:	4603      	mov	r3, r0
 80679ee:	2b00      	cmp	r3, #0
 80679f0:	d006      	beq.n	8067a00 <f_open+0xc8>
 80679f2:	f107 0314 	add.w	r3, r7, #20
 80679f6:	4618      	mov	r0, r3
 80679f8:	f7ff faae 	bl	8066f58 <dir_register>
 80679fc:	4603      	mov	r3, r0
 80679fe:	e000      	b.n	8067a02 <f_open+0xca>
 8067a00:	2312      	movs	r3, #18
 8067a02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8067a06:	79fb      	ldrb	r3, [r7, #7]
 8067a08:	f043 0308 	orr.w	r3, r3, #8
 8067a0c:	71fb      	strb	r3, [r7, #7]
 8067a0e:	e010      	b.n	8067a32 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8067a10:	7ebb      	ldrb	r3, [r7, #26]
 8067a12:	f003 0311 	and.w	r3, r3, #17
 8067a16:	2b00      	cmp	r3, #0
 8067a18:	d003      	beq.n	8067a22 <f_open+0xea>
					res = FR_DENIED;
 8067a1a:	2307      	movs	r3, #7
 8067a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8067a20:	e007      	b.n	8067a32 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8067a22:	79fb      	ldrb	r3, [r7, #7]
 8067a24:	f003 0304 	and.w	r3, r3, #4
 8067a28:	2b00      	cmp	r3, #0
 8067a2a:	d002      	beq.n	8067a32 <f_open+0xfa>
 8067a2c:	2308      	movs	r3, #8
 8067a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8067a32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8067a36:	2b00      	cmp	r3, #0
 8067a38:	d168      	bne.n	8067b0c <f_open+0x1d4>
 8067a3a:	79fb      	ldrb	r3, [r7, #7]
 8067a3c:	f003 0308 	and.w	r3, r3, #8
 8067a40:	2b00      	cmp	r3, #0
 8067a42:	d063      	beq.n	8067b0c <f_open+0x1d4>
				dw = GET_FATTIME();
 8067a44:	f7fd fbd2 	bl	80651ec <get_fattime>
 8067a48:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8067a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8067a4c:	330e      	adds	r3, #14
 8067a4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8067a50:	4618      	mov	r0, r3
 8067a52:	f7fe f9fd 	bl	8065e50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8067a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8067a58:	3316      	adds	r3, #22
 8067a5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8067a5c:	4618      	mov	r0, r3
 8067a5e:	f7fe f9f7 	bl	8065e50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8067a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8067a64:	330b      	adds	r3, #11
 8067a66:	2220      	movs	r2, #32
 8067a68:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8067a6a:	693b      	ldr	r3, [r7, #16]
 8067a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8067a6e:	4611      	mov	r1, r2
 8067a70:	4618      	mov	r0, r3
 8067a72:	f7ff f980 	bl	8066d76 <ld_clust>
 8067a76:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8067a78:	693b      	ldr	r3, [r7, #16]
 8067a7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8067a7c:	2200      	movs	r2, #0
 8067a7e:	4618      	mov	r0, r3
 8067a80:	f7ff f998 	bl	8066db4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8067a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8067a86:	331c      	adds	r3, #28
 8067a88:	2100      	movs	r1, #0
 8067a8a:	4618      	mov	r0, r3
 8067a8c:	f7fe f9e0 	bl	8065e50 <st_dword>
					fs->wflag = 1;
 8067a90:	693b      	ldr	r3, [r7, #16]
 8067a92:	2201      	movs	r2, #1
 8067a94:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8067a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8067a98:	2b00      	cmp	r3, #0
 8067a9a:	d037      	beq.n	8067b0c <f_open+0x1d4>
						dw = fs->winsect;
 8067a9c:	693b      	ldr	r3, [r7, #16]
 8067a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8067aa0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8067aa2:	f107 0314 	add.w	r3, r7, #20
 8067aa6:	2200      	movs	r2, #0
 8067aa8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8067aaa:	4618      	mov	r0, r3
 8067aac:	f7fe feab 	bl	8066806 <remove_chain>
 8067ab0:	4603      	mov	r3, r0
 8067ab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8067ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8067aba:	2b00      	cmp	r3, #0
 8067abc:	d126      	bne.n	8067b0c <f_open+0x1d4>
							res = move_window(fs, dw);
 8067abe:	693b      	ldr	r3, [r7, #16]
 8067ac0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8067ac2:	4618      	mov	r0, r3
 8067ac4:	f7fe fc50 	bl	8066368 <move_window>
 8067ac8:	4603      	mov	r3, r0
 8067aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8067ace:	693b      	ldr	r3, [r7, #16]
 8067ad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8067ad2:	3a01      	subs	r2, #1
 8067ad4:	611a      	str	r2, [r3, #16]
 8067ad6:	e019      	b.n	8067b0c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8067ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8067adc:	2b00      	cmp	r3, #0
 8067ade:	d115      	bne.n	8067b0c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8067ae0:	7ebb      	ldrb	r3, [r7, #26]
 8067ae2:	f003 0310 	and.w	r3, r3, #16
 8067ae6:	2b00      	cmp	r3, #0
 8067ae8:	d003      	beq.n	8067af2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8067aea:	2304      	movs	r3, #4
 8067aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8067af0:	e00c      	b.n	8067b0c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8067af2:	79fb      	ldrb	r3, [r7, #7]
 8067af4:	f003 0302 	and.w	r3, r3, #2
 8067af8:	2b00      	cmp	r3, #0
 8067afa:	d007      	beq.n	8067b0c <f_open+0x1d4>
 8067afc:	7ebb      	ldrb	r3, [r7, #26]
 8067afe:	f003 0301 	and.w	r3, r3, #1
 8067b02:	2b00      	cmp	r3, #0
 8067b04:	d002      	beq.n	8067b0c <f_open+0x1d4>
						res = FR_DENIED;
 8067b06:	2307      	movs	r3, #7
 8067b08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8067b0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8067b10:	2b00      	cmp	r3, #0
 8067b12:	d128      	bne.n	8067b66 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8067b14:	79fb      	ldrb	r3, [r7, #7]
 8067b16:	f003 0308 	and.w	r3, r3, #8
 8067b1a:	2b00      	cmp	r3, #0
 8067b1c:	d003      	beq.n	8067b26 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8067b1e:	79fb      	ldrb	r3, [r7, #7]
 8067b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8067b24:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8067b26:	693b      	ldr	r3, [r7, #16]
 8067b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8067b2a:	68fb      	ldr	r3, [r7, #12]
 8067b2c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8067b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8067b30:	68fb      	ldr	r3, [r7, #12]
 8067b32:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8067b34:	79fb      	ldrb	r3, [r7, #7]
 8067b36:	f023 0301 	bic.w	r3, r3, #1
 8067b3a:	2b00      	cmp	r3, #0
 8067b3c:	bf14      	ite	ne
 8067b3e:	2301      	movne	r3, #1
 8067b40:	2300      	moveq	r3, #0
 8067b42:	b2db      	uxtb	r3, r3
 8067b44:	461a      	mov	r2, r3
 8067b46:	f107 0314 	add.w	r3, r7, #20
 8067b4a:	4611      	mov	r1, r2
 8067b4c:	4618      	mov	r0, r3
 8067b4e:	f7fe fad9 	bl	8066104 <inc_lock>
 8067b52:	4602      	mov	r2, r0
 8067b54:	68fb      	ldr	r3, [r7, #12]
 8067b56:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8067b58:	68fb      	ldr	r3, [r7, #12]
 8067b5a:	691b      	ldr	r3, [r3, #16]
 8067b5c:	2b00      	cmp	r3, #0
 8067b5e:	d102      	bne.n	8067b66 <f_open+0x22e>
 8067b60:	2302      	movs	r3, #2
 8067b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8067b66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8067b6a:	2b00      	cmp	r3, #0
 8067b6c:	f040 8095 	bne.w	8067c9a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8067b70:	693b      	ldr	r3, [r7, #16]
 8067b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8067b74:	4611      	mov	r1, r2
 8067b76:	4618      	mov	r0, r3
 8067b78:	f7ff f8fd 	bl	8066d76 <ld_clust>
 8067b7c:	4602      	mov	r2, r0
 8067b7e:	68fb      	ldr	r3, [r7, #12]
 8067b80:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8067b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8067b84:	331c      	adds	r3, #28
 8067b86:	4618      	mov	r0, r3
 8067b88:	f7fe f924 	bl	8065dd4 <ld_dword>
 8067b8c:	4602      	mov	r2, r0
 8067b8e:	68fb      	ldr	r3, [r7, #12]
 8067b90:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8067b92:	68fb      	ldr	r3, [r7, #12]
 8067b94:	2200      	movs	r2, #0
 8067b96:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8067b98:	693a      	ldr	r2, [r7, #16]
 8067b9a:	68fb      	ldr	r3, [r7, #12]
 8067b9c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8067b9e:	693b      	ldr	r3, [r7, #16]
 8067ba0:	88da      	ldrh	r2, [r3, #6]
 8067ba2:	68fb      	ldr	r3, [r7, #12]
 8067ba4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8067ba6:	68fb      	ldr	r3, [r7, #12]
 8067ba8:	79fa      	ldrb	r2, [r7, #7]
 8067baa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8067bac:	68fb      	ldr	r3, [r7, #12]
 8067bae:	2200      	movs	r2, #0
 8067bb0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8067bb2:	68fb      	ldr	r3, [r7, #12]
 8067bb4:	2200      	movs	r2, #0
 8067bb6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8067bb8:	68fb      	ldr	r3, [r7, #12]
 8067bba:	2200      	movs	r2, #0
 8067bbc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8067bbe:	68fb      	ldr	r3, [r7, #12]
 8067bc0:	3330      	adds	r3, #48	; 0x30
 8067bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8067bc6:	2100      	movs	r1, #0
 8067bc8:	4618      	mov	r0, r3
 8067bca:	f7fe f98e 	bl	8065eea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8067bce:	79fb      	ldrb	r3, [r7, #7]
 8067bd0:	f003 0320 	and.w	r3, r3, #32
 8067bd4:	2b00      	cmp	r3, #0
 8067bd6:	d060      	beq.n	8067c9a <f_open+0x362>
 8067bd8:	68fb      	ldr	r3, [r7, #12]
 8067bda:	68db      	ldr	r3, [r3, #12]
 8067bdc:	2b00      	cmp	r3, #0
 8067bde:	d05c      	beq.n	8067c9a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8067be0:	68fb      	ldr	r3, [r7, #12]
 8067be2:	68da      	ldr	r2, [r3, #12]
 8067be4:	68fb      	ldr	r3, [r7, #12]
 8067be6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8067be8:	693b      	ldr	r3, [r7, #16]
 8067bea:	895b      	ldrh	r3, [r3, #10]
 8067bec:	025b      	lsls	r3, r3, #9
 8067bee:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8067bf0:	68fb      	ldr	r3, [r7, #12]
 8067bf2:	689b      	ldr	r3, [r3, #8]
 8067bf4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8067bf6:	68fb      	ldr	r3, [r7, #12]
 8067bf8:	68db      	ldr	r3, [r3, #12]
 8067bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8067bfc:	e016      	b.n	8067c2c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8067bfe:	68fb      	ldr	r3, [r7, #12]
 8067c00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8067c02:	4618      	mov	r0, r3
 8067c04:	f7fe fc6b 	bl	80664de <get_fat>
 8067c08:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8067c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8067c0c:	2b01      	cmp	r3, #1
 8067c0e:	d802      	bhi.n	8067c16 <f_open+0x2de>
 8067c10:	2302      	movs	r3, #2
 8067c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8067c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8067c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8067c1c:	d102      	bne.n	8067c24 <f_open+0x2ec>
 8067c1e:	2301      	movs	r3, #1
 8067c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8067c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8067c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8067c28:	1ad3      	subs	r3, r2, r3
 8067c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8067c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8067c30:	2b00      	cmp	r3, #0
 8067c32:	d103      	bne.n	8067c3c <f_open+0x304>
 8067c34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8067c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8067c38:	429a      	cmp	r2, r3
 8067c3a:	d8e0      	bhi.n	8067bfe <f_open+0x2c6>
				}
				fp->clust = clst;
 8067c3c:	68fb      	ldr	r3, [r7, #12]
 8067c3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8067c40:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8067c42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8067c46:	2b00      	cmp	r3, #0
 8067c48:	d127      	bne.n	8067c9a <f_open+0x362>
 8067c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8067c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8067c50:	2b00      	cmp	r3, #0
 8067c52:	d022      	beq.n	8067c9a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8067c54:	693b      	ldr	r3, [r7, #16]
 8067c56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8067c58:	4618      	mov	r0, r3
 8067c5a:	f7fe fc21 	bl	80664a0 <clust2sect>
 8067c5e:	6478      	str	r0, [r7, #68]	; 0x44
 8067c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8067c62:	2b00      	cmp	r3, #0
 8067c64:	d103      	bne.n	8067c6e <f_open+0x336>
						res = FR_INT_ERR;
 8067c66:	2302      	movs	r3, #2
 8067c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8067c6c:	e015      	b.n	8067c9a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8067c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8067c70:	0a5a      	lsrs	r2, r3, #9
 8067c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8067c74:	441a      	add	r2, r3
 8067c76:	68fb      	ldr	r3, [r7, #12]
 8067c78:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8067c7a:	693b      	ldr	r3, [r7, #16]
 8067c7c:	7858      	ldrb	r0, [r3, #1]
 8067c7e:	68fb      	ldr	r3, [r7, #12]
 8067c80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8067c84:	68fb      	ldr	r3, [r7, #12]
 8067c86:	6a1a      	ldr	r2, [r3, #32]
 8067c88:	2301      	movs	r3, #1
 8067c8a:	f7fe f82d 	bl	8065ce8 <disk_read>
 8067c8e:	4603      	mov	r3, r0
 8067c90:	2b00      	cmp	r3, #0
 8067c92:	d002      	beq.n	8067c9a <f_open+0x362>
 8067c94:	2301      	movs	r3, #1
 8067c96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8067c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8067c9e:	2b00      	cmp	r3, #0
 8067ca0:	d002      	beq.n	8067ca8 <f_open+0x370>
 8067ca2:	68fb      	ldr	r3, [r7, #12]
 8067ca4:	2200      	movs	r2, #0
 8067ca6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8067ca8:	693b      	ldr	r3, [r7, #16]
 8067caa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8067cae:	4611      	mov	r1, r2
 8067cb0:	4618      	mov	r0, r3
 8067cb2:	f7fe f98d 	bl	8065fd0 <unlock_fs>
 8067cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8067cba:	4618      	mov	r0, r3
 8067cbc:	3760      	adds	r7, #96	; 0x60
 8067cbe:	46bd      	mov	sp, r7
 8067cc0:	bd80      	pop	{r7, pc}

08067cc2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8067cc2:	b580      	push	{r7, lr}
 8067cc4:	b08e      	sub	sp, #56	; 0x38
 8067cc6:	af00      	add	r7, sp, #0
 8067cc8:	60f8      	str	r0, [r7, #12]
 8067cca:	60b9      	str	r1, [r7, #8]
 8067ccc:	607a      	str	r2, [r7, #4]
 8067cce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8067cd0:	68bb      	ldr	r3, [r7, #8]
 8067cd2:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8067cd4:	683b      	ldr	r3, [r7, #0]
 8067cd6:	2200      	movs	r2, #0
 8067cd8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8067cda:	68fb      	ldr	r3, [r7, #12]
 8067cdc:	f107 0214 	add.w	r2, r7, #20
 8067ce0:	4611      	mov	r1, r2
 8067ce2:	4618      	mov	r0, r3
 8067ce4:	f7ff fd7c 	bl	80677e0 <validate>
 8067ce8:	4603      	mov	r3, r0
 8067cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8067cee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8067cf2:	2b00      	cmp	r3, #0
 8067cf4:	d107      	bne.n	8067d06 <f_read+0x44>
 8067cf6:	68fb      	ldr	r3, [r7, #12]
 8067cf8:	7d5b      	ldrb	r3, [r3, #21]
 8067cfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8067cfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8067d02:	2b00      	cmp	r3, #0
 8067d04:	d009      	beq.n	8067d1a <f_read+0x58>
 8067d06:	697b      	ldr	r3, [r7, #20]
 8067d08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8067d0c:	4611      	mov	r1, r2
 8067d0e:	4618      	mov	r0, r3
 8067d10:	f7fe f95e 	bl	8065fd0 <unlock_fs>
 8067d14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8067d18:	e13d      	b.n	8067f96 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8067d1a:	68fb      	ldr	r3, [r7, #12]
 8067d1c:	7d1b      	ldrb	r3, [r3, #20]
 8067d1e:	f003 0301 	and.w	r3, r3, #1
 8067d22:	2b00      	cmp	r3, #0
 8067d24:	d106      	bne.n	8067d34 <f_read+0x72>
 8067d26:	697b      	ldr	r3, [r7, #20]
 8067d28:	2107      	movs	r1, #7
 8067d2a:	4618      	mov	r0, r3
 8067d2c:	f7fe f950 	bl	8065fd0 <unlock_fs>
 8067d30:	2307      	movs	r3, #7
 8067d32:	e130      	b.n	8067f96 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8067d34:	68fb      	ldr	r3, [r7, #12]
 8067d36:	68da      	ldr	r2, [r3, #12]
 8067d38:	68fb      	ldr	r3, [r7, #12]
 8067d3a:	699b      	ldr	r3, [r3, #24]
 8067d3c:	1ad3      	subs	r3, r2, r3
 8067d3e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8067d40:	687a      	ldr	r2, [r7, #4]
 8067d42:	6a3b      	ldr	r3, [r7, #32]
 8067d44:	429a      	cmp	r2, r3
 8067d46:	f240 811c 	bls.w	8067f82 <f_read+0x2c0>
 8067d4a:	6a3b      	ldr	r3, [r7, #32]
 8067d4c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8067d4e:	e118      	b.n	8067f82 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8067d50:	68fb      	ldr	r3, [r7, #12]
 8067d52:	699b      	ldr	r3, [r3, #24]
 8067d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8067d58:	2b00      	cmp	r3, #0
 8067d5a:	f040 80e4 	bne.w	8067f26 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8067d5e:	68fb      	ldr	r3, [r7, #12]
 8067d60:	699b      	ldr	r3, [r3, #24]
 8067d62:	0a5b      	lsrs	r3, r3, #9
 8067d64:	697a      	ldr	r2, [r7, #20]
 8067d66:	8952      	ldrh	r2, [r2, #10]
 8067d68:	3a01      	subs	r2, #1
 8067d6a:	4013      	ands	r3, r2
 8067d6c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8067d6e:	69fb      	ldr	r3, [r7, #28]
 8067d70:	2b00      	cmp	r3, #0
 8067d72:	d139      	bne.n	8067de8 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8067d74:	68fb      	ldr	r3, [r7, #12]
 8067d76:	699b      	ldr	r3, [r3, #24]
 8067d78:	2b00      	cmp	r3, #0
 8067d7a:	d103      	bne.n	8067d84 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8067d7c:	68fb      	ldr	r3, [r7, #12]
 8067d7e:	689b      	ldr	r3, [r3, #8]
 8067d80:	633b      	str	r3, [r7, #48]	; 0x30
 8067d82:	e013      	b.n	8067dac <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8067d84:	68fb      	ldr	r3, [r7, #12]
 8067d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067d88:	2b00      	cmp	r3, #0
 8067d8a:	d007      	beq.n	8067d9c <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8067d8c:	68fb      	ldr	r3, [r7, #12]
 8067d8e:	699b      	ldr	r3, [r3, #24]
 8067d90:	4619      	mov	r1, r3
 8067d92:	68f8      	ldr	r0, [r7, #12]
 8067d94:	f7fe fe34 	bl	8066a00 <clmt_clust>
 8067d98:	6338      	str	r0, [r7, #48]	; 0x30
 8067d9a:	e007      	b.n	8067dac <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8067d9c:	68fa      	ldr	r2, [r7, #12]
 8067d9e:	68fb      	ldr	r3, [r7, #12]
 8067da0:	69db      	ldr	r3, [r3, #28]
 8067da2:	4619      	mov	r1, r3
 8067da4:	4610      	mov	r0, r2
 8067da6:	f7fe fb9a 	bl	80664de <get_fat>
 8067daa:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8067dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8067dae:	2b01      	cmp	r3, #1
 8067db0:	d809      	bhi.n	8067dc6 <f_read+0x104>
 8067db2:	68fb      	ldr	r3, [r7, #12]
 8067db4:	2202      	movs	r2, #2
 8067db6:	755a      	strb	r2, [r3, #21]
 8067db8:	697b      	ldr	r3, [r7, #20]
 8067dba:	2102      	movs	r1, #2
 8067dbc:	4618      	mov	r0, r3
 8067dbe:	f7fe f907 	bl	8065fd0 <unlock_fs>
 8067dc2:	2302      	movs	r3, #2
 8067dc4:	e0e7      	b.n	8067f96 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8067dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8067dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8067dcc:	d109      	bne.n	8067de2 <f_read+0x120>
 8067dce:	68fb      	ldr	r3, [r7, #12]
 8067dd0:	2201      	movs	r2, #1
 8067dd2:	755a      	strb	r2, [r3, #21]
 8067dd4:	697b      	ldr	r3, [r7, #20]
 8067dd6:	2101      	movs	r1, #1
 8067dd8:	4618      	mov	r0, r3
 8067dda:	f7fe f8f9 	bl	8065fd0 <unlock_fs>
 8067dde:	2301      	movs	r3, #1
 8067de0:	e0d9      	b.n	8067f96 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8067de2:	68fb      	ldr	r3, [r7, #12]
 8067de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8067de6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8067de8:	697a      	ldr	r2, [r7, #20]
 8067dea:	68fb      	ldr	r3, [r7, #12]
 8067dec:	69db      	ldr	r3, [r3, #28]
 8067dee:	4619      	mov	r1, r3
 8067df0:	4610      	mov	r0, r2
 8067df2:	f7fe fb55 	bl	80664a0 <clust2sect>
 8067df6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8067df8:	69bb      	ldr	r3, [r7, #24]
 8067dfa:	2b00      	cmp	r3, #0
 8067dfc:	d109      	bne.n	8067e12 <f_read+0x150>
 8067dfe:	68fb      	ldr	r3, [r7, #12]
 8067e00:	2202      	movs	r2, #2
 8067e02:	755a      	strb	r2, [r3, #21]
 8067e04:	697b      	ldr	r3, [r7, #20]
 8067e06:	2102      	movs	r1, #2
 8067e08:	4618      	mov	r0, r3
 8067e0a:	f7fe f8e1 	bl	8065fd0 <unlock_fs>
 8067e0e:	2302      	movs	r3, #2
 8067e10:	e0c1      	b.n	8067f96 <f_read+0x2d4>
			sect += csect;
 8067e12:	69ba      	ldr	r2, [r7, #24]
 8067e14:	69fb      	ldr	r3, [r7, #28]
 8067e16:	4413      	add	r3, r2
 8067e18:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8067e1a:	687b      	ldr	r3, [r7, #4]
 8067e1c:	0a5b      	lsrs	r3, r3, #9
 8067e1e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8067e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8067e22:	2b00      	cmp	r3, #0
 8067e24:	d03e      	beq.n	8067ea4 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8067e26:	69fa      	ldr	r2, [r7, #28]
 8067e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8067e2a:	4413      	add	r3, r2
 8067e2c:	697a      	ldr	r2, [r7, #20]
 8067e2e:	8952      	ldrh	r2, [r2, #10]
 8067e30:	4293      	cmp	r3, r2
 8067e32:	d905      	bls.n	8067e40 <f_read+0x17e>
					cc = fs->csize - csect;
 8067e34:	697b      	ldr	r3, [r7, #20]
 8067e36:	895b      	ldrh	r3, [r3, #10]
 8067e38:	461a      	mov	r2, r3
 8067e3a:	69fb      	ldr	r3, [r7, #28]
 8067e3c:	1ad3      	subs	r3, r2, r3
 8067e3e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8067e40:	697b      	ldr	r3, [r7, #20]
 8067e42:	7858      	ldrb	r0, [r3, #1]
 8067e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8067e46:	69ba      	ldr	r2, [r7, #24]
 8067e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8067e4a:	f7fd ff4d 	bl	8065ce8 <disk_read>
 8067e4e:	4603      	mov	r3, r0
 8067e50:	2b00      	cmp	r3, #0
 8067e52:	d009      	beq.n	8067e68 <f_read+0x1a6>
 8067e54:	68fb      	ldr	r3, [r7, #12]
 8067e56:	2201      	movs	r2, #1
 8067e58:	755a      	strb	r2, [r3, #21]
 8067e5a:	697b      	ldr	r3, [r7, #20]
 8067e5c:	2101      	movs	r1, #1
 8067e5e:	4618      	mov	r0, r3
 8067e60:	f7fe f8b6 	bl	8065fd0 <unlock_fs>
 8067e64:	2301      	movs	r3, #1
 8067e66:	e096      	b.n	8067f96 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8067e68:	68fb      	ldr	r3, [r7, #12]
 8067e6a:	7d1b      	ldrb	r3, [r3, #20]
 8067e6c:	b25b      	sxtb	r3, r3
 8067e6e:	2b00      	cmp	r3, #0
 8067e70:	da14      	bge.n	8067e9c <f_read+0x1da>
 8067e72:	68fb      	ldr	r3, [r7, #12]
 8067e74:	6a1a      	ldr	r2, [r3, #32]
 8067e76:	69bb      	ldr	r3, [r7, #24]
 8067e78:	1ad3      	subs	r3, r2, r3
 8067e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8067e7c:	429a      	cmp	r2, r3
 8067e7e:	d90d      	bls.n	8067e9c <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8067e80:	68fb      	ldr	r3, [r7, #12]
 8067e82:	6a1a      	ldr	r2, [r3, #32]
 8067e84:	69bb      	ldr	r3, [r7, #24]
 8067e86:	1ad3      	subs	r3, r2, r3
 8067e88:	025b      	lsls	r3, r3, #9
 8067e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8067e8c:	18d0      	adds	r0, r2, r3
 8067e8e:	68fb      	ldr	r3, [r7, #12]
 8067e90:	3330      	adds	r3, #48	; 0x30
 8067e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8067e96:	4619      	mov	r1, r3
 8067e98:	f7fe f806 	bl	8065ea8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8067e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8067e9e:	025b      	lsls	r3, r3, #9
 8067ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8067ea2:	e05a      	b.n	8067f5a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8067ea4:	68fb      	ldr	r3, [r7, #12]
 8067ea6:	6a1b      	ldr	r3, [r3, #32]
 8067ea8:	69ba      	ldr	r2, [r7, #24]
 8067eaa:	429a      	cmp	r2, r3
 8067eac:	d038      	beq.n	8067f20 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8067eae:	68fb      	ldr	r3, [r7, #12]
 8067eb0:	7d1b      	ldrb	r3, [r3, #20]
 8067eb2:	b25b      	sxtb	r3, r3
 8067eb4:	2b00      	cmp	r3, #0
 8067eb6:	da1d      	bge.n	8067ef4 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8067eb8:	697b      	ldr	r3, [r7, #20]
 8067eba:	7858      	ldrb	r0, [r3, #1]
 8067ebc:	68fb      	ldr	r3, [r7, #12]
 8067ebe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8067ec2:	68fb      	ldr	r3, [r7, #12]
 8067ec4:	6a1a      	ldr	r2, [r3, #32]
 8067ec6:	2301      	movs	r3, #1
 8067ec8:	f7fd ff2e 	bl	8065d28 <disk_write>
 8067ecc:	4603      	mov	r3, r0
 8067ece:	2b00      	cmp	r3, #0
 8067ed0:	d009      	beq.n	8067ee6 <f_read+0x224>
 8067ed2:	68fb      	ldr	r3, [r7, #12]
 8067ed4:	2201      	movs	r2, #1
 8067ed6:	755a      	strb	r2, [r3, #21]
 8067ed8:	697b      	ldr	r3, [r7, #20]
 8067eda:	2101      	movs	r1, #1
 8067edc:	4618      	mov	r0, r3
 8067ede:	f7fe f877 	bl	8065fd0 <unlock_fs>
 8067ee2:	2301      	movs	r3, #1
 8067ee4:	e057      	b.n	8067f96 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8067ee6:	68fb      	ldr	r3, [r7, #12]
 8067ee8:	7d1b      	ldrb	r3, [r3, #20]
 8067eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8067eee:	b2da      	uxtb	r2, r3
 8067ef0:	68fb      	ldr	r3, [r7, #12]
 8067ef2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8067ef4:	697b      	ldr	r3, [r7, #20]
 8067ef6:	7858      	ldrb	r0, [r3, #1]
 8067ef8:	68fb      	ldr	r3, [r7, #12]
 8067efa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8067efe:	2301      	movs	r3, #1
 8067f00:	69ba      	ldr	r2, [r7, #24]
 8067f02:	f7fd fef1 	bl	8065ce8 <disk_read>
 8067f06:	4603      	mov	r3, r0
 8067f08:	2b00      	cmp	r3, #0
 8067f0a:	d009      	beq.n	8067f20 <f_read+0x25e>
 8067f0c:	68fb      	ldr	r3, [r7, #12]
 8067f0e:	2201      	movs	r2, #1
 8067f10:	755a      	strb	r2, [r3, #21]
 8067f12:	697b      	ldr	r3, [r7, #20]
 8067f14:	2101      	movs	r1, #1
 8067f16:	4618      	mov	r0, r3
 8067f18:	f7fe f85a 	bl	8065fd0 <unlock_fs>
 8067f1c:	2301      	movs	r3, #1
 8067f1e:	e03a      	b.n	8067f96 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8067f20:	68fb      	ldr	r3, [r7, #12]
 8067f22:	69ba      	ldr	r2, [r7, #24]
 8067f24:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8067f26:	68fb      	ldr	r3, [r7, #12]
 8067f28:	699b      	ldr	r3, [r3, #24]
 8067f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8067f2e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8067f32:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8067f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8067f36:	687b      	ldr	r3, [r7, #4]
 8067f38:	429a      	cmp	r2, r3
 8067f3a:	d901      	bls.n	8067f40 <f_read+0x27e>
 8067f3c:	687b      	ldr	r3, [r7, #4]
 8067f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8067f40:	68fb      	ldr	r3, [r7, #12]
 8067f42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8067f46:	68fb      	ldr	r3, [r7, #12]
 8067f48:	699b      	ldr	r3, [r3, #24]
 8067f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8067f4e:	4413      	add	r3, r2
 8067f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8067f52:	4619      	mov	r1, r3
 8067f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8067f56:	f7fd ffa7 	bl	8065ea8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8067f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8067f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8067f5e:	4413      	add	r3, r2
 8067f60:	627b      	str	r3, [r7, #36]	; 0x24
 8067f62:	68fb      	ldr	r3, [r7, #12]
 8067f64:	699a      	ldr	r2, [r3, #24]
 8067f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8067f68:	441a      	add	r2, r3
 8067f6a:	68fb      	ldr	r3, [r7, #12]
 8067f6c:	619a      	str	r2, [r3, #24]
 8067f6e:	683b      	ldr	r3, [r7, #0]
 8067f70:	681a      	ldr	r2, [r3, #0]
 8067f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8067f74:	441a      	add	r2, r3
 8067f76:	683b      	ldr	r3, [r7, #0]
 8067f78:	601a      	str	r2, [r3, #0]
 8067f7a:	687a      	ldr	r2, [r7, #4]
 8067f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8067f7e:	1ad3      	subs	r3, r2, r3
 8067f80:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8067f82:	687b      	ldr	r3, [r7, #4]
 8067f84:	2b00      	cmp	r3, #0
 8067f86:	f47f aee3 	bne.w	8067d50 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8067f8a:	697b      	ldr	r3, [r7, #20]
 8067f8c:	2100      	movs	r1, #0
 8067f8e:	4618      	mov	r0, r3
 8067f90:	f7fe f81e 	bl	8065fd0 <unlock_fs>
 8067f94:	2300      	movs	r3, #0
}
 8067f96:	4618      	mov	r0, r3
 8067f98:	3738      	adds	r7, #56	; 0x38
 8067f9a:	46bd      	mov	sp, r7
 8067f9c:	bd80      	pop	{r7, pc}

08067f9e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8067f9e:	b580      	push	{r7, lr}
 8067fa0:	b08c      	sub	sp, #48	; 0x30
 8067fa2:	af00      	add	r7, sp, #0
 8067fa4:	60f8      	str	r0, [r7, #12]
 8067fa6:	60b9      	str	r1, [r7, #8]
 8067fa8:	607a      	str	r2, [r7, #4]
 8067faa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8067fac:	68bb      	ldr	r3, [r7, #8]
 8067fae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8067fb0:	683b      	ldr	r3, [r7, #0]
 8067fb2:	2200      	movs	r2, #0
 8067fb4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8067fb6:	68fb      	ldr	r3, [r7, #12]
 8067fb8:	f107 0210 	add.w	r2, r7, #16
 8067fbc:	4611      	mov	r1, r2
 8067fbe:	4618      	mov	r0, r3
 8067fc0:	f7ff fc0e 	bl	80677e0 <validate>
 8067fc4:	4603      	mov	r3, r0
 8067fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8067fca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8067fce:	2b00      	cmp	r3, #0
 8067fd0:	d107      	bne.n	8067fe2 <f_write+0x44>
 8067fd2:	68fb      	ldr	r3, [r7, #12]
 8067fd4:	7d5b      	ldrb	r3, [r3, #21]
 8067fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8067fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8067fde:	2b00      	cmp	r3, #0
 8067fe0:	d009      	beq.n	8067ff6 <f_write+0x58>
 8067fe2:	693b      	ldr	r3, [r7, #16]
 8067fe4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8067fe8:	4611      	mov	r1, r2
 8067fea:	4618      	mov	r0, r3
 8067fec:	f7fd fff0 	bl	8065fd0 <unlock_fs>
 8067ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8067ff4:	e173      	b.n	80682de <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8067ff6:	68fb      	ldr	r3, [r7, #12]
 8067ff8:	7d1b      	ldrb	r3, [r3, #20]
 8067ffa:	f003 0302 	and.w	r3, r3, #2
 8067ffe:	2b00      	cmp	r3, #0
 8068000:	d106      	bne.n	8068010 <f_write+0x72>
 8068002:	693b      	ldr	r3, [r7, #16]
 8068004:	2107      	movs	r1, #7
 8068006:	4618      	mov	r0, r3
 8068008:	f7fd ffe2 	bl	8065fd0 <unlock_fs>
 806800c:	2307      	movs	r3, #7
 806800e:	e166      	b.n	80682de <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8068010:	68fb      	ldr	r3, [r7, #12]
 8068012:	699a      	ldr	r2, [r3, #24]
 8068014:	687b      	ldr	r3, [r7, #4]
 8068016:	441a      	add	r2, r3
 8068018:	68fb      	ldr	r3, [r7, #12]
 806801a:	699b      	ldr	r3, [r3, #24]
 806801c:	429a      	cmp	r2, r3
 806801e:	f080 814b 	bcs.w	80682b8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8068022:	68fb      	ldr	r3, [r7, #12]
 8068024:	699b      	ldr	r3, [r3, #24]
 8068026:	43db      	mvns	r3, r3
 8068028:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 806802a:	e145      	b.n	80682b8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 806802c:	68fb      	ldr	r3, [r7, #12]
 806802e:	699b      	ldr	r3, [r3, #24]
 8068030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8068034:	2b00      	cmp	r3, #0
 8068036:	f040 8101 	bne.w	806823c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 806803a:	68fb      	ldr	r3, [r7, #12]
 806803c:	699b      	ldr	r3, [r3, #24]
 806803e:	0a5b      	lsrs	r3, r3, #9
 8068040:	693a      	ldr	r2, [r7, #16]
 8068042:	8952      	ldrh	r2, [r2, #10]
 8068044:	3a01      	subs	r2, #1
 8068046:	4013      	ands	r3, r2
 8068048:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 806804a:	69bb      	ldr	r3, [r7, #24]
 806804c:	2b00      	cmp	r3, #0
 806804e:	d14d      	bne.n	80680ec <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8068050:	68fb      	ldr	r3, [r7, #12]
 8068052:	699b      	ldr	r3, [r3, #24]
 8068054:	2b00      	cmp	r3, #0
 8068056:	d10c      	bne.n	8068072 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8068058:	68fb      	ldr	r3, [r7, #12]
 806805a:	689b      	ldr	r3, [r3, #8]
 806805c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 806805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8068060:	2b00      	cmp	r3, #0
 8068062:	d11a      	bne.n	806809a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8068064:	68fb      	ldr	r3, [r7, #12]
 8068066:	2100      	movs	r1, #0
 8068068:	4618      	mov	r0, r3
 806806a:	f7fe fc31 	bl	80668d0 <create_chain>
 806806e:	62b8      	str	r0, [r7, #40]	; 0x28
 8068070:	e013      	b.n	806809a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8068072:	68fb      	ldr	r3, [r7, #12]
 8068074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8068076:	2b00      	cmp	r3, #0
 8068078:	d007      	beq.n	806808a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 806807a:	68fb      	ldr	r3, [r7, #12]
 806807c:	699b      	ldr	r3, [r3, #24]
 806807e:	4619      	mov	r1, r3
 8068080:	68f8      	ldr	r0, [r7, #12]
 8068082:	f7fe fcbd 	bl	8066a00 <clmt_clust>
 8068086:	62b8      	str	r0, [r7, #40]	; 0x28
 8068088:	e007      	b.n	806809a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 806808a:	68fa      	ldr	r2, [r7, #12]
 806808c:	68fb      	ldr	r3, [r7, #12]
 806808e:	69db      	ldr	r3, [r3, #28]
 8068090:	4619      	mov	r1, r3
 8068092:	4610      	mov	r0, r2
 8068094:	f7fe fc1c 	bl	80668d0 <create_chain>
 8068098:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 806809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806809c:	2b00      	cmp	r3, #0
 806809e:	f000 8110 	beq.w	80682c2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80680a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80680a4:	2b01      	cmp	r3, #1
 80680a6:	d109      	bne.n	80680bc <f_write+0x11e>
 80680a8:	68fb      	ldr	r3, [r7, #12]
 80680aa:	2202      	movs	r2, #2
 80680ac:	755a      	strb	r2, [r3, #21]
 80680ae:	693b      	ldr	r3, [r7, #16]
 80680b0:	2102      	movs	r1, #2
 80680b2:	4618      	mov	r0, r3
 80680b4:	f7fd ff8c 	bl	8065fd0 <unlock_fs>
 80680b8:	2302      	movs	r3, #2
 80680ba:	e110      	b.n	80682de <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80680bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80680be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80680c2:	d109      	bne.n	80680d8 <f_write+0x13a>
 80680c4:	68fb      	ldr	r3, [r7, #12]
 80680c6:	2201      	movs	r2, #1
 80680c8:	755a      	strb	r2, [r3, #21]
 80680ca:	693b      	ldr	r3, [r7, #16]
 80680cc:	2101      	movs	r1, #1
 80680ce:	4618      	mov	r0, r3
 80680d0:	f7fd ff7e 	bl	8065fd0 <unlock_fs>
 80680d4:	2301      	movs	r3, #1
 80680d6:	e102      	b.n	80682de <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80680d8:	68fb      	ldr	r3, [r7, #12]
 80680da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80680dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80680de:	68fb      	ldr	r3, [r7, #12]
 80680e0:	689b      	ldr	r3, [r3, #8]
 80680e2:	2b00      	cmp	r3, #0
 80680e4:	d102      	bne.n	80680ec <f_write+0x14e>
 80680e6:	68fb      	ldr	r3, [r7, #12]
 80680e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80680ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80680ec:	68fb      	ldr	r3, [r7, #12]
 80680ee:	7d1b      	ldrb	r3, [r3, #20]
 80680f0:	b25b      	sxtb	r3, r3
 80680f2:	2b00      	cmp	r3, #0
 80680f4:	da1d      	bge.n	8068132 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80680f6:	693b      	ldr	r3, [r7, #16]
 80680f8:	7858      	ldrb	r0, [r3, #1]
 80680fa:	68fb      	ldr	r3, [r7, #12]
 80680fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8068100:	68fb      	ldr	r3, [r7, #12]
 8068102:	6a1a      	ldr	r2, [r3, #32]
 8068104:	2301      	movs	r3, #1
 8068106:	f7fd fe0f 	bl	8065d28 <disk_write>
 806810a:	4603      	mov	r3, r0
 806810c:	2b00      	cmp	r3, #0
 806810e:	d009      	beq.n	8068124 <f_write+0x186>
 8068110:	68fb      	ldr	r3, [r7, #12]
 8068112:	2201      	movs	r2, #1
 8068114:	755a      	strb	r2, [r3, #21]
 8068116:	693b      	ldr	r3, [r7, #16]
 8068118:	2101      	movs	r1, #1
 806811a:	4618      	mov	r0, r3
 806811c:	f7fd ff58 	bl	8065fd0 <unlock_fs>
 8068120:	2301      	movs	r3, #1
 8068122:	e0dc      	b.n	80682de <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8068124:	68fb      	ldr	r3, [r7, #12]
 8068126:	7d1b      	ldrb	r3, [r3, #20]
 8068128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806812c:	b2da      	uxtb	r2, r3
 806812e:	68fb      	ldr	r3, [r7, #12]
 8068130:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8068132:	693a      	ldr	r2, [r7, #16]
 8068134:	68fb      	ldr	r3, [r7, #12]
 8068136:	69db      	ldr	r3, [r3, #28]
 8068138:	4619      	mov	r1, r3
 806813a:	4610      	mov	r0, r2
 806813c:	f7fe f9b0 	bl	80664a0 <clust2sect>
 8068140:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8068142:	697b      	ldr	r3, [r7, #20]
 8068144:	2b00      	cmp	r3, #0
 8068146:	d109      	bne.n	806815c <f_write+0x1be>
 8068148:	68fb      	ldr	r3, [r7, #12]
 806814a:	2202      	movs	r2, #2
 806814c:	755a      	strb	r2, [r3, #21]
 806814e:	693b      	ldr	r3, [r7, #16]
 8068150:	2102      	movs	r1, #2
 8068152:	4618      	mov	r0, r3
 8068154:	f7fd ff3c 	bl	8065fd0 <unlock_fs>
 8068158:	2302      	movs	r3, #2
 806815a:	e0c0      	b.n	80682de <f_write+0x340>
			sect += csect;
 806815c:	697a      	ldr	r2, [r7, #20]
 806815e:	69bb      	ldr	r3, [r7, #24]
 8068160:	4413      	add	r3, r2
 8068162:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8068164:	687b      	ldr	r3, [r7, #4]
 8068166:	0a5b      	lsrs	r3, r3, #9
 8068168:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 806816a:	6a3b      	ldr	r3, [r7, #32]
 806816c:	2b00      	cmp	r3, #0
 806816e:	d041      	beq.n	80681f4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8068170:	69ba      	ldr	r2, [r7, #24]
 8068172:	6a3b      	ldr	r3, [r7, #32]
 8068174:	4413      	add	r3, r2
 8068176:	693a      	ldr	r2, [r7, #16]
 8068178:	8952      	ldrh	r2, [r2, #10]
 806817a:	4293      	cmp	r3, r2
 806817c:	d905      	bls.n	806818a <f_write+0x1ec>
					cc = fs->csize - csect;
 806817e:	693b      	ldr	r3, [r7, #16]
 8068180:	895b      	ldrh	r3, [r3, #10]
 8068182:	461a      	mov	r2, r3
 8068184:	69bb      	ldr	r3, [r7, #24]
 8068186:	1ad3      	subs	r3, r2, r3
 8068188:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806818a:	693b      	ldr	r3, [r7, #16]
 806818c:	7858      	ldrb	r0, [r3, #1]
 806818e:	6a3b      	ldr	r3, [r7, #32]
 8068190:	697a      	ldr	r2, [r7, #20]
 8068192:	69f9      	ldr	r1, [r7, #28]
 8068194:	f7fd fdc8 	bl	8065d28 <disk_write>
 8068198:	4603      	mov	r3, r0
 806819a:	2b00      	cmp	r3, #0
 806819c:	d009      	beq.n	80681b2 <f_write+0x214>
 806819e:	68fb      	ldr	r3, [r7, #12]
 80681a0:	2201      	movs	r2, #1
 80681a2:	755a      	strb	r2, [r3, #21]
 80681a4:	693b      	ldr	r3, [r7, #16]
 80681a6:	2101      	movs	r1, #1
 80681a8:	4618      	mov	r0, r3
 80681aa:	f7fd ff11 	bl	8065fd0 <unlock_fs>
 80681ae:	2301      	movs	r3, #1
 80681b0:	e095      	b.n	80682de <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80681b2:	68fb      	ldr	r3, [r7, #12]
 80681b4:	6a1a      	ldr	r2, [r3, #32]
 80681b6:	697b      	ldr	r3, [r7, #20]
 80681b8:	1ad3      	subs	r3, r2, r3
 80681ba:	6a3a      	ldr	r2, [r7, #32]
 80681bc:	429a      	cmp	r2, r3
 80681be:	d915      	bls.n	80681ec <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80681c0:	68fb      	ldr	r3, [r7, #12]
 80681c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80681c6:	68fb      	ldr	r3, [r7, #12]
 80681c8:	6a1a      	ldr	r2, [r3, #32]
 80681ca:	697b      	ldr	r3, [r7, #20]
 80681cc:	1ad3      	subs	r3, r2, r3
 80681ce:	025b      	lsls	r3, r3, #9
 80681d0:	69fa      	ldr	r2, [r7, #28]
 80681d2:	4413      	add	r3, r2
 80681d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80681d8:	4619      	mov	r1, r3
 80681da:	f7fd fe65 	bl	8065ea8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80681de:	68fb      	ldr	r3, [r7, #12]
 80681e0:	7d1b      	ldrb	r3, [r3, #20]
 80681e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80681e6:	b2da      	uxtb	r2, r3
 80681e8:	68fb      	ldr	r3, [r7, #12]
 80681ea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80681ec:	6a3b      	ldr	r3, [r7, #32]
 80681ee:	025b      	lsls	r3, r3, #9
 80681f0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80681f2:	e044      	b.n	806827e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80681f4:	68fb      	ldr	r3, [r7, #12]
 80681f6:	6a1b      	ldr	r3, [r3, #32]
 80681f8:	697a      	ldr	r2, [r7, #20]
 80681fa:	429a      	cmp	r2, r3
 80681fc:	d01b      	beq.n	8068236 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80681fe:	68fb      	ldr	r3, [r7, #12]
 8068200:	699a      	ldr	r2, [r3, #24]
 8068202:	68fb      	ldr	r3, [r7, #12]
 8068204:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8068206:	429a      	cmp	r2, r3
 8068208:	d215      	bcs.n	8068236 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 806820a:	693b      	ldr	r3, [r7, #16]
 806820c:	7858      	ldrb	r0, [r3, #1]
 806820e:	68fb      	ldr	r3, [r7, #12]
 8068210:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8068214:	2301      	movs	r3, #1
 8068216:	697a      	ldr	r2, [r7, #20]
 8068218:	f7fd fd66 	bl	8065ce8 <disk_read>
 806821c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 806821e:	2b00      	cmp	r3, #0
 8068220:	d009      	beq.n	8068236 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8068222:	68fb      	ldr	r3, [r7, #12]
 8068224:	2201      	movs	r2, #1
 8068226:	755a      	strb	r2, [r3, #21]
 8068228:	693b      	ldr	r3, [r7, #16]
 806822a:	2101      	movs	r1, #1
 806822c:	4618      	mov	r0, r3
 806822e:	f7fd fecf 	bl	8065fd0 <unlock_fs>
 8068232:	2301      	movs	r3, #1
 8068234:	e053      	b.n	80682de <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8068236:	68fb      	ldr	r3, [r7, #12]
 8068238:	697a      	ldr	r2, [r7, #20]
 806823a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 806823c:	68fb      	ldr	r3, [r7, #12]
 806823e:	699b      	ldr	r3, [r3, #24]
 8068240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8068244:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8068248:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 806824a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806824c:	687b      	ldr	r3, [r7, #4]
 806824e:	429a      	cmp	r2, r3
 8068250:	d901      	bls.n	8068256 <f_write+0x2b8>
 8068252:	687b      	ldr	r3, [r7, #4]
 8068254:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8068256:	68fb      	ldr	r3, [r7, #12]
 8068258:	f103 0230 	add.w	r2, r3, #48	; 0x30
 806825c:	68fb      	ldr	r3, [r7, #12]
 806825e:	699b      	ldr	r3, [r3, #24]
 8068260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8068264:	4413      	add	r3, r2
 8068266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8068268:	69f9      	ldr	r1, [r7, #28]
 806826a:	4618      	mov	r0, r3
 806826c:	f7fd fe1c 	bl	8065ea8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8068270:	68fb      	ldr	r3, [r7, #12]
 8068272:	7d1b      	ldrb	r3, [r3, #20]
 8068274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8068278:	b2da      	uxtb	r2, r3
 806827a:	68fb      	ldr	r3, [r7, #12]
 806827c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 806827e:	69fa      	ldr	r2, [r7, #28]
 8068280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8068282:	4413      	add	r3, r2
 8068284:	61fb      	str	r3, [r7, #28]
 8068286:	68fb      	ldr	r3, [r7, #12]
 8068288:	699a      	ldr	r2, [r3, #24]
 806828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806828c:	441a      	add	r2, r3
 806828e:	68fb      	ldr	r3, [r7, #12]
 8068290:	619a      	str	r2, [r3, #24]
 8068292:	68fb      	ldr	r3, [r7, #12]
 8068294:	68da      	ldr	r2, [r3, #12]
 8068296:	68fb      	ldr	r3, [r7, #12]
 8068298:	699b      	ldr	r3, [r3, #24]
 806829a:	429a      	cmp	r2, r3
 806829c:	bf38      	it	cc
 806829e:	461a      	movcc	r2, r3
 80682a0:	68fb      	ldr	r3, [r7, #12]
 80682a2:	60da      	str	r2, [r3, #12]
 80682a4:	683b      	ldr	r3, [r7, #0]
 80682a6:	681a      	ldr	r2, [r3, #0]
 80682a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80682aa:	441a      	add	r2, r3
 80682ac:	683b      	ldr	r3, [r7, #0]
 80682ae:	601a      	str	r2, [r3, #0]
 80682b0:	687a      	ldr	r2, [r7, #4]
 80682b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80682b4:	1ad3      	subs	r3, r2, r3
 80682b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80682b8:	687b      	ldr	r3, [r7, #4]
 80682ba:	2b00      	cmp	r3, #0
 80682bc:	f47f aeb6 	bne.w	806802c <f_write+0x8e>
 80682c0:	e000      	b.n	80682c4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80682c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80682c4:	68fb      	ldr	r3, [r7, #12]
 80682c6:	7d1b      	ldrb	r3, [r3, #20]
 80682c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80682cc:	b2da      	uxtb	r2, r3
 80682ce:	68fb      	ldr	r3, [r7, #12]
 80682d0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80682d2:	693b      	ldr	r3, [r7, #16]
 80682d4:	2100      	movs	r1, #0
 80682d6:	4618      	mov	r0, r3
 80682d8:	f7fd fe7a 	bl	8065fd0 <unlock_fs>
 80682dc:	2300      	movs	r3, #0
}
 80682de:	4618      	mov	r0, r3
 80682e0:	3730      	adds	r7, #48	; 0x30
 80682e2:	46bd      	mov	sp, r7
 80682e4:	bd80      	pop	{r7, pc}

080682e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80682e6:	b580      	push	{r7, lr}
 80682e8:	b086      	sub	sp, #24
 80682ea:	af00      	add	r7, sp, #0
 80682ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80682ee:	687b      	ldr	r3, [r7, #4]
 80682f0:	f107 0208 	add.w	r2, r7, #8
 80682f4:	4611      	mov	r1, r2
 80682f6:	4618      	mov	r0, r3
 80682f8:	f7ff fa72 	bl	80677e0 <validate>
 80682fc:	4603      	mov	r3, r0
 80682fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8068300:	7dfb      	ldrb	r3, [r7, #23]
 8068302:	2b00      	cmp	r3, #0
 8068304:	d16d      	bne.n	80683e2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8068306:	687b      	ldr	r3, [r7, #4]
 8068308:	7d1b      	ldrb	r3, [r3, #20]
 806830a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806830e:	2b00      	cmp	r3, #0
 8068310:	d067      	beq.n	80683e2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8068312:	687b      	ldr	r3, [r7, #4]
 8068314:	7d1b      	ldrb	r3, [r3, #20]
 8068316:	b25b      	sxtb	r3, r3
 8068318:	2b00      	cmp	r3, #0
 806831a:	da1a      	bge.n	8068352 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 806831c:	68bb      	ldr	r3, [r7, #8]
 806831e:	7858      	ldrb	r0, [r3, #1]
 8068320:	687b      	ldr	r3, [r7, #4]
 8068322:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8068326:	687b      	ldr	r3, [r7, #4]
 8068328:	6a1a      	ldr	r2, [r3, #32]
 806832a:	2301      	movs	r3, #1
 806832c:	f7fd fcfc 	bl	8065d28 <disk_write>
 8068330:	4603      	mov	r3, r0
 8068332:	2b00      	cmp	r3, #0
 8068334:	d006      	beq.n	8068344 <f_sync+0x5e>
 8068336:	68bb      	ldr	r3, [r7, #8]
 8068338:	2101      	movs	r1, #1
 806833a:	4618      	mov	r0, r3
 806833c:	f7fd fe48 	bl	8065fd0 <unlock_fs>
 8068340:	2301      	movs	r3, #1
 8068342:	e055      	b.n	80683f0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8068344:	687b      	ldr	r3, [r7, #4]
 8068346:	7d1b      	ldrb	r3, [r3, #20]
 8068348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806834c:	b2da      	uxtb	r2, r3
 806834e:	687b      	ldr	r3, [r7, #4]
 8068350:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8068352:	f7fc ff4b 	bl	80651ec <get_fattime>
 8068356:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8068358:	68ba      	ldr	r2, [r7, #8]
 806835a:	687b      	ldr	r3, [r7, #4]
 806835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806835e:	4619      	mov	r1, r3
 8068360:	4610      	mov	r0, r2
 8068362:	f7fe f801 	bl	8066368 <move_window>
 8068366:	4603      	mov	r3, r0
 8068368:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 806836a:	7dfb      	ldrb	r3, [r7, #23]
 806836c:	2b00      	cmp	r3, #0
 806836e:	d138      	bne.n	80683e2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8068370:	687b      	ldr	r3, [r7, #4]
 8068372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8068374:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8068376:	68fb      	ldr	r3, [r7, #12]
 8068378:	330b      	adds	r3, #11
 806837a:	781a      	ldrb	r2, [r3, #0]
 806837c:	68fb      	ldr	r3, [r7, #12]
 806837e:	330b      	adds	r3, #11
 8068380:	f042 0220 	orr.w	r2, r2, #32
 8068384:	b2d2      	uxtb	r2, r2
 8068386:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8068388:	687b      	ldr	r3, [r7, #4]
 806838a:	6818      	ldr	r0, [r3, #0]
 806838c:	687b      	ldr	r3, [r7, #4]
 806838e:	689b      	ldr	r3, [r3, #8]
 8068390:	461a      	mov	r2, r3
 8068392:	68f9      	ldr	r1, [r7, #12]
 8068394:	f7fe fd0e 	bl	8066db4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8068398:	68fb      	ldr	r3, [r7, #12]
 806839a:	f103 021c 	add.w	r2, r3, #28
 806839e:	687b      	ldr	r3, [r7, #4]
 80683a0:	68db      	ldr	r3, [r3, #12]
 80683a2:	4619      	mov	r1, r3
 80683a4:	4610      	mov	r0, r2
 80683a6:	f7fd fd53 	bl	8065e50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80683aa:	68fb      	ldr	r3, [r7, #12]
 80683ac:	3316      	adds	r3, #22
 80683ae:	6939      	ldr	r1, [r7, #16]
 80683b0:	4618      	mov	r0, r3
 80683b2:	f7fd fd4d 	bl	8065e50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80683b6:	68fb      	ldr	r3, [r7, #12]
 80683b8:	3312      	adds	r3, #18
 80683ba:	2100      	movs	r1, #0
 80683bc:	4618      	mov	r0, r3
 80683be:	f7fd fd2c 	bl	8065e1a <st_word>
					fs->wflag = 1;
 80683c2:	68bb      	ldr	r3, [r7, #8]
 80683c4:	2201      	movs	r2, #1
 80683c6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80683c8:	68bb      	ldr	r3, [r7, #8]
 80683ca:	4618      	mov	r0, r3
 80683cc:	f7fd fffa 	bl	80663c4 <sync_fs>
 80683d0:	4603      	mov	r3, r0
 80683d2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80683d4:	687b      	ldr	r3, [r7, #4]
 80683d6:	7d1b      	ldrb	r3, [r3, #20]
 80683d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80683dc:	b2da      	uxtb	r2, r3
 80683de:	687b      	ldr	r3, [r7, #4]
 80683e0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80683e2:	68bb      	ldr	r3, [r7, #8]
 80683e4:	7dfa      	ldrb	r2, [r7, #23]
 80683e6:	4611      	mov	r1, r2
 80683e8:	4618      	mov	r0, r3
 80683ea:	f7fd fdf1 	bl	8065fd0 <unlock_fs>
 80683ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80683f0:	4618      	mov	r0, r3
 80683f2:	3718      	adds	r7, #24
 80683f4:	46bd      	mov	sp, r7
 80683f6:	bd80      	pop	{r7, pc}

080683f8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80683f8:	b580      	push	{r7, lr}
 80683fa:	b084      	sub	sp, #16
 80683fc:	af00      	add	r7, sp, #0
 80683fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8068400:	6878      	ldr	r0, [r7, #4]
 8068402:	f7ff ff70 	bl	80682e6 <f_sync>
 8068406:	4603      	mov	r3, r0
 8068408:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 806840a:	7bfb      	ldrb	r3, [r7, #15]
 806840c:	2b00      	cmp	r3, #0
 806840e:	d11d      	bne.n	806844c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8068410:	687b      	ldr	r3, [r7, #4]
 8068412:	f107 0208 	add.w	r2, r7, #8
 8068416:	4611      	mov	r1, r2
 8068418:	4618      	mov	r0, r3
 806841a:	f7ff f9e1 	bl	80677e0 <validate>
 806841e:	4603      	mov	r3, r0
 8068420:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8068422:	7bfb      	ldrb	r3, [r7, #15]
 8068424:	2b00      	cmp	r3, #0
 8068426:	d111      	bne.n	806844c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8068428:	687b      	ldr	r3, [r7, #4]
 806842a:	691b      	ldr	r3, [r3, #16]
 806842c:	4618      	mov	r0, r3
 806842e:	f7fd fef7 	bl	8066220 <dec_lock>
 8068432:	4603      	mov	r3, r0
 8068434:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8068436:	7bfb      	ldrb	r3, [r7, #15]
 8068438:	2b00      	cmp	r3, #0
 806843a:	d102      	bne.n	8068442 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 806843c:	687b      	ldr	r3, [r7, #4]
 806843e:	2200      	movs	r2, #0
 8068440:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8068442:	68bb      	ldr	r3, [r7, #8]
 8068444:	2100      	movs	r1, #0
 8068446:	4618      	mov	r0, r3
 8068448:	f7fd fdc2 	bl	8065fd0 <unlock_fs>
#endif
		}
	}
	return res;
 806844c:	7bfb      	ldrb	r3, [r7, #15]
}
 806844e:	4618      	mov	r0, r3
 8068450:	3710      	adds	r7, #16
 8068452:	46bd      	mov	sp, r7
 8068454:	bd80      	pop	{r7, pc}

08068456 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8068456:	b580      	push	{r7, lr}
 8068458:	b09e      	sub	sp, #120	; 0x78
 806845a:	af00      	add	r7, sp, #0
 806845c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 806845e:	2300      	movs	r3, #0
 8068460:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8068462:	f107 010c 	add.w	r1, r7, #12
 8068466:	1d3b      	adds	r3, r7, #4
 8068468:	2202      	movs	r2, #2
 806846a:	4618      	mov	r0, r3
 806846c:	f7fe ff64 	bl	8067338 <find_volume>
 8068470:	4603      	mov	r3, r0
 8068472:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8068476:	68fb      	ldr	r3, [r7, #12]
 8068478:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 806847a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806847e:	2b00      	cmp	r3, #0
 8068480:	f040 808e 	bne.w	80685a0 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8068484:	687a      	ldr	r2, [r7, #4]
 8068486:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806848a:	4611      	mov	r1, r2
 806848c:	4618      	mov	r0, r3
 806848e:	f7fe fe47 	bl	8067120 <follow_path>
 8068492:	4603      	mov	r3, r0
 8068494:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8068498:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806849c:	2b00      	cmp	r3, #0
 806849e:	d108      	bne.n	80684b2 <f_unlink+0x5c>
 80684a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80684a4:	2102      	movs	r1, #2
 80684a6:	4618      	mov	r0, r3
 80684a8:	f7fd fdae 	bl	8066008 <chk_lock>
 80684ac:	4603      	mov	r3, r0
 80684ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80684b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80684b6:	2b00      	cmp	r3, #0
 80684b8:	d172      	bne.n	80685a0 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80684ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80684be:	b25b      	sxtb	r3, r3
 80684c0:	2b00      	cmp	r3, #0
 80684c2:	da03      	bge.n	80684cc <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80684c4:	2306      	movs	r3, #6
 80684c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80684ca:	e008      	b.n	80684de <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80684cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80684d0:	f003 0301 	and.w	r3, r3, #1
 80684d4:	2b00      	cmp	r3, #0
 80684d6:	d002      	beq.n	80684de <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80684d8:	2307      	movs	r3, #7
 80684da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80684de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80684e2:	2b00      	cmp	r3, #0
 80684e4:	d134      	bne.n	8068550 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80684e6:	68fb      	ldr	r3, [r7, #12]
 80684e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80684ea:	4611      	mov	r1, r2
 80684ec:	4618      	mov	r0, r3
 80684ee:	f7fe fc42 	bl	8066d76 <ld_clust>
 80684f2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80684f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80684f8:	f003 0310 	and.w	r3, r3, #16
 80684fc:	2b00      	cmp	r3, #0
 80684fe:	d027      	beq.n	8068550 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8068500:	68fb      	ldr	r3, [r7, #12]
 8068502:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8068504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8068506:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8068508:	f107 0310 	add.w	r3, r7, #16
 806850c:	2100      	movs	r1, #0
 806850e:	4618      	mov	r0, r3
 8068510:	f7fe faaa 	bl	8066a68 <dir_sdi>
 8068514:	4603      	mov	r3, r0
 8068516:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 806851a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806851e:	2b00      	cmp	r3, #0
 8068520:	d116      	bne.n	8068550 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8068522:	f107 0310 	add.w	r3, r7, #16
 8068526:	2100      	movs	r1, #0
 8068528:	4618      	mov	r0, r3
 806852a:	f7fe fc63 	bl	8066df4 <dir_read>
 806852e:	4603      	mov	r3, r0
 8068530:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8068534:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8068538:	2b00      	cmp	r3, #0
 806853a:	d102      	bne.n	8068542 <f_unlink+0xec>
 806853c:	2307      	movs	r3, #7
 806853e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8068542:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8068546:	2b04      	cmp	r3, #4
 8068548:	d102      	bne.n	8068550 <f_unlink+0xfa>
 806854a:	2300      	movs	r3, #0
 806854c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8068550:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8068554:	2b00      	cmp	r3, #0
 8068556:	d123      	bne.n	80685a0 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8068558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806855c:	4618      	mov	r0, r3
 806855e:	f7fe fd2d 	bl	8066fbc <dir_remove>
 8068562:	4603      	mov	r3, r0
 8068564:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8068568:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806856c:	2b00      	cmp	r3, #0
 806856e:	d10c      	bne.n	806858a <f_unlink+0x134>
 8068570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8068572:	2b00      	cmp	r3, #0
 8068574:	d009      	beq.n	806858a <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8068576:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806857a:	2200      	movs	r2, #0
 806857c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 806857e:	4618      	mov	r0, r3
 8068580:	f7fe f941 	bl	8066806 <remove_chain>
 8068584:	4603      	mov	r3, r0
 8068586:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 806858a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806858e:	2b00      	cmp	r3, #0
 8068590:	d106      	bne.n	80685a0 <f_unlink+0x14a>
 8068592:	68fb      	ldr	r3, [r7, #12]
 8068594:	4618      	mov	r0, r3
 8068596:	f7fd ff15 	bl	80663c4 <sync_fs>
 806859a:	4603      	mov	r3, r0
 806859c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80685a0:	68fb      	ldr	r3, [r7, #12]
 80685a2:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80685a6:	4611      	mov	r1, r2
 80685a8:	4618      	mov	r0, r3
 80685aa:	f7fd fd11 	bl	8065fd0 <unlock_fs>
 80685ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80685b2:	4618      	mov	r0, r3
 80685b4:	3778      	adds	r7, #120	; 0x78
 80685b6:	46bd      	mov	sp, r7
 80685b8:	bd80      	pop	{r7, pc}
	...

080685bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80685bc:	b480      	push	{r7}
 80685be:	b087      	sub	sp, #28
 80685c0:	af00      	add	r7, sp, #0
 80685c2:	60f8      	str	r0, [r7, #12]
 80685c4:	60b9      	str	r1, [r7, #8]
 80685c6:	4613      	mov	r3, r2
 80685c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80685ca:	2301      	movs	r3, #1
 80685cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80685ce:	2300      	movs	r3, #0
 80685d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80685d2:	4b1f      	ldr	r3, [pc, #124]	; (8068650 <FATFS_LinkDriverEx+0x94>)
 80685d4:	7a5b      	ldrb	r3, [r3, #9]
 80685d6:	b2db      	uxtb	r3, r3
 80685d8:	2b00      	cmp	r3, #0
 80685da:	d131      	bne.n	8068640 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80685dc:	4b1c      	ldr	r3, [pc, #112]	; (8068650 <FATFS_LinkDriverEx+0x94>)
 80685de:	7a5b      	ldrb	r3, [r3, #9]
 80685e0:	b2db      	uxtb	r3, r3
 80685e2:	461a      	mov	r2, r3
 80685e4:	4b1a      	ldr	r3, [pc, #104]	; (8068650 <FATFS_LinkDriverEx+0x94>)
 80685e6:	2100      	movs	r1, #0
 80685e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80685ea:	4b19      	ldr	r3, [pc, #100]	; (8068650 <FATFS_LinkDriverEx+0x94>)
 80685ec:	7a5b      	ldrb	r3, [r3, #9]
 80685ee:	b2db      	uxtb	r3, r3
 80685f0:	4a17      	ldr	r2, [pc, #92]	; (8068650 <FATFS_LinkDriverEx+0x94>)
 80685f2:	009b      	lsls	r3, r3, #2
 80685f4:	4413      	add	r3, r2
 80685f6:	68fa      	ldr	r2, [r7, #12]
 80685f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80685fa:	4b15      	ldr	r3, [pc, #84]	; (8068650 <FATFS_LinkDriverEx+0x94>)
 80685fc:	7a5b      	ldrb	r3, [r3, #9]
 80685fe:	b2db      	uxtb	r3, r3
 8068600:	461a      	mov	r2, r3
 8068602:	4b13      	ldr	r3, [pc, #76]	; (8068650 <FATFS_LinkDriverEx+0x94>)
 8068604:	4413      	add	r3, r2
 8068606:	79fa      	ldrb	r2, [r7, #7]
 8068608:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 806860a:	4b11      	ldr	r3, [pc, #68]	; (8068650 <FATFS_LinkDriverEx+0x94>)
 806860c:	7a5b      	ldrb	r3, [r3, #9]
 806860e:	b2db      	uxtb	r3, r3
 8068610:	1c5a      	adds	r2, r3, #1
 8068612:	b2d1      	uxtb	r1, r2
 8068614:	4a0e      	ldr	r2, [pc, #56]	; (8068650 <FATFS_LinkDriverEx+0x94>)
 8068616:	7251      	strb	r1, [r2, #9]
 8068618:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 806861a:	7dbb      	ldrb	r3, [r7, #22]
 806861c:	3330      	adds	r3, #48	; 0x30
 806861e:	b2da      	uxtb	r2, r3
 8068620:	68bb      	ldr	r3, [r7, #8]
 8068622:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8068624:	68bb      	ldr	r3, [r7, #8]
 8068626:	3301      	adds	r3, #1
 8068628:	223a      	movs	r2, #58	; 0x3a
 806862a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 806862c:	68bb      	ldr	r3, [r7, #8]
 806862e:	3302      	adds	r3, #2
 8068630:	222f      	movs	r2, #47	; 0x2f
 8068632:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8068634:	68bb      	ldr	r3, [r7, #8]
 8068636:	3303      	adds	r3, #3
 8068638:	2200      	movs	r2, #0
 806863a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 806863c:	2300      	movs	r3, #0
 806863e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8068640:	7dfb      	ldrb	r3, [r7, #23]
}
 8068642:	4618      	mov	r0, r3
 8068644:	371c      	adds	r7, #28
 8068646:	46bd      	mov	sp, r7
 8068648:	f85d 7b04 	ldr.w	r7, [sp], #4
 806864c:	4770      	bx	lr
 806864e:	bf00      	nop
 8068650:	200001d8 	.word	0x200001d8

08068654 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8068654:	b580      	push	{r7, lr}
 8068656:	b082      	sub	sp, #8
 8068658:	af00      	add	r7, sp, #0
 806865a:	6078      	str	r0, [r7, #4]
 806865c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 806865e:	2200      	movs	r2, #0
 8068660:	6839      	ldr	r1, [r7, #0]
 8068662:	6878      	ldr	r0, [r7, #4]
 8068664:	f7ff ffaa 	bl	80685bc <FATFS_LinkDriverEx>
 8068668:	4603      	mov	r3, r0
}
 806866a:	4618      	mov	r0, r3
 806866c:	3708      	adds	r7, #8
 806866e:	46bd      	mov	sp, r7
 8068670:	bd80      	pop	{r7, pc}

08068672 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8068672:	b580      	push	{r7, lr}
 8068674:	b084      	sub	sp, #16
 8068676:	af00      	add	r7, sp, #0
 8068678:	4603      	mov	r3, r0
 806867a:	6039      	str	r1, [r7, #0]
 806867c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 806867e:	2200      	movs	r2, #0
 8068680:	2101      	movs	r1, #1
 8068682:	2001      	movs	r0, #1
 8068684:	f000 fb44 	bl	8068d10 <osSemaphoreNew>
 8068688:	4602      	mov	r2, r0
 806868a:	683b      	ldr	r3, [r7, #0]
 806868c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 806868e:	683b      	ldr	r3, [r7, #0]
 8068690:	681b      	ldr	r3, [r3, #0]
 8068692:	2b00      	cmp	r3, #0
 8068694:	bf14      	ite	ne
 8068696:	2301      	movne	r3, #1
 8068698:	2300      	moveq	r3, #0
 806869a:	b2db      	uxtb	r3, r3
 806869c:	60fb      	str	r3, [r7, #12]

    return ret;
 806869e:	68fb      	ldr	r3, [r7, #12]
}
 80686a0:	4618      	mov	r0, r3
 80686a2:	3710      	adds	r7, #16
 80686a4:	46bd      	mov	sp, r7
 80686a6:	bd80      	pop	{r7, pc}

080686a8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80686a8:	b580      	push	{r7, lr}
 80686aa:	b082      	sub	sp, #8
 80686ac:	af00      	add	r7, sp, #0
 80686ae:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80686b0:	6878      	ldr	r0, [r7, #4]
 80686b2:	f000 fc4d 	bl	8068f50 <osSemaphoreDelete>
#endif
    return 1;
 80686b6:	2301      	movs	r3, #1
}
 80686b8:	4618      	mov	r0, r3
 80686ba:	3708      	adds	r7, #8
 80686bc:	46bd      	mov	sp, r7
 80686be:	bd80      	pop	{r7, pc}

080686c0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80686c0:	b580      	push	{r7, lr}
 80686c2:	b084      	sub	sp, #16
 80686c4:	af00      	add	r7, sp, #0
 80686c6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80686c8:	2300      	movs	r3, #0
 80686ca:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80686cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80686d0:	6878      	ldr	r0, [r7, #4]
 80686d2:	f000 fba7 	bl	8068e24 <osSemaphoreAcquire>
 80686d6:	4603      	mov	r3, r0
 80686d8:	2b00      	cmp	r3, #0
 80686da:	d101      	bne.n	80686e0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80686dc:	2301      	movs	r3, #1
 80686de:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80686e0:	68fb      	ldr	r3, [r7, #12]
}
 80686e2:	4618      	mov	r0, r3
 80686e4:	3710      	adds	r7, #16
 80686e6:	46bd      	mov	sp, r7
 80686e8:	bd80      	pop	{r7, pc}

080686ea <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80686ea:	b580      	push	{r7, lr}
 80686ec:	b082      	sub	sp, #8
 80686ee:	af00      	add	r7, sp, #0
 80686f0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80686f2:	6878      	ldr	r0, [r7, #4]
 80686f4:	f000 fbe8 	bl	8068ec8 <osSemaphoreRelease>
#endif
}
 80686f8:	bf00      	nop
 80686fa:	3708      	adds	r7, #8
 80686fc:	46bd      	mov	sp, r7
 80686fe:	bd80      	pop	{r7, pc}

08068700 <__NVIC_SetPriority>:
{
 8068700:	b480      	push	{r7}
 8068702:	b083      	sub	sp, #12
 8068704:	af00      	add	r7, sp, #0
 8068706:	4603      	mov	r3, r0
 8068708:	6039      	str	r1, [r7, #0]
 806870a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 806870c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8068710:	2b00      	cmp	r3, #0
 8068712:	db0a      	blt.n	806872a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8068714:	683b      	ldr	r3, [r7, #0]
 8068716:	b2da      	uxtb	r2, r3
 8068718:	490c      	ldr	r1, [pc, #48]	; (806874c <__NVIC_SetPriority+0x4c>)
 806871a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806871e:	0112      	lsls	r2, r2, #4
 8068720:	b2d2      	uxtb	r2, r2
 8068722:	440b      	add	r3, r1
 8068724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8068728:	e00a      	b.n	8068740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806872a:	683b      	ldr	r3, [r7, #0]
 806872c:	b2da      	uxtb	r2, r3
 806872e:	4908      	ldr	r1, [pc, #32]	; (8068750 <__NVIC_SetPriority+0x50>)
 8068730:	79fb      	ldrb	r3, [r7, #7]
 8068732:	f003 030f 	and.w	r3, r3, #15
 8068736:	3b04      	subs	r3, #4
 8068738:	0112      	lsls	r2, r2, #4
 806873a:	b2d2      	uxtb	r2, r2
 806873c:	440b      	add	r3, r1
 806873e:	761a      	strb	r2, [r3, #24]
}
 8068740:	bf00      	nop
 8068742:	370c      	adds	r7, #12
 8068744:	46bd      	mov	sp, r7
 8068746:	f85d 7b04 	ldr.w	r7, [sp], #4
 806874a:	4770      	bx	lr
 806874c:	e000e100 	.word	0xe000e100
 8068750:	e000ed00 	.word	0xe000ed00

08068754 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8068754:	b580      	push	{r7, lr}
 8068756:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8068758:	4b05      	ldr	r3, [pc, #20]	; (8068770 <SysTick_Handler+0x1c>)
 806875a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 806875c:	f002 fd52 	bl	806b204 <xTaskGetSchedulerState>
 8068760:	4603      	mov	r3, r0
 8068762:	2b01      	cmp	r3, #1
 8068764:	d001      	beq.n	806876a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8068766:	f003 fcef 	bl	806c148 <xPortSysTickHandler>
  }
}
 806876a:	bf00      	nop
 806876c:	bd80      	pop	{r7, pc}
 806876e:	bf00      	nop
 8068770:	e000e010 	.word	0xe000e010

08068774 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8068774:	b580      	push	{r7, lr}
 8068776:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8068778:	2100      	movs	r1, #0
 806877a:	f06f 0004 	mvn.w	r0, #4
 806877e:	f7ff ffbf 	bl	8068700 <__NVIC_SetPriority>
#endif
}
 8068782:	bf00      	nop
 8068784:	bd80      	pop	{r7, pc}
	...

08068788 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8068788:	b480      	push	{r7}
 806878a:	b083      	sub	sp, #12
 806878c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806878e:	f3ef 8305 	mrs	r3, IPSR
 8068792:	603b      	str	r3, [r7, #0]
  return(result);
 8068794:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8068796:	2b00      	cmp	r3, #0
 8068798:	d003      	beq.n	80687a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 806879a:	f06f 0305 	mvn.w	r3, #5
 806879e:	607b      	str	r3, [r7, #4]
 80687a0:	e00c      	b.n	80687bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80687a2:	4b0a      	ldr	r3, [pc, #40]	; (80687cc <osKernelInitialize+0x44>)
 80687a4:	681b      	ldr	r3, [r3, #0]
 80687a6:	2b00      	cmp	r3, #0
 80687a8:	d105      	bne.n	80687b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80687aa:	4b08      	ldr	r3, [pc, #32]	; (80687cc <osKernelInitialize+0x44>)
 80687ac:	2201      	movs	r2, #1
 80687ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80687b0:	2300      	movs	r3, #0
 80687b2:	607b      	str	r3, [r7, #4]
 80687b4:	e002      	b.n	80687bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80687b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80687ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80687bc:	687b      	ldr	r3, [r7, #4]
}
 80687be:	4618      	mov	r0, r3
 80687c0:	370c      	adds	r7, #12
 80687c2:	46bd      	mov	sp, r7
 80687c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80687c8:	4770      	bx	lr
 80687ca:	bf00      	nop
 80687cc:	200001e4 	.word	0x200001e4

080687d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80687d0:	b580      	push	{r7, lr}
 80687d2:	b082      	sub	sp, #8
 80687d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80687d6:	f3ef 8305 	mrs	r3, IPSR
 80687da:	603b      	str	r3, [r7, #0]
  return(result);
 80687dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80687de:	2b00      	cmp	r3, #0
 80687e0:	d003      	beq.n	80687ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80687e2:	f06f 0305 	mvn.w	r3, #5
 80687e6:	607b      	str	r3, [r7, #4]
 80687e8:	e010      	b.n	806880c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80687ea:	4b0b      	ldr	r3, [pc, #44]	; (8068818 <osKernelStart+0x48>)
 80687ec:	681b      	ldr	r3, [r3, #0]
 80687ee:	2b01      	cmp	r3, #1
 80687f0:	d109      	bne.n	8068806 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80687f2:	f7ff ffbf 	bl	8068774 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80687f6:	4b08      	ldr	r3, [pc, #32]	; (8068818 <osKernelStart+0x48>)
 80687f8:	2202      	movs	r2, #2
 80687fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80687fc:	f002 f896 	bl	806a92c <vTaskStartScheduler>
      stat = osOK;
 8068800:	2300      	movs	r3, #0
 8068802:	607b      	str	r3, [r7, #4]
 8068804:	e002      	b.n	806880c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8068806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806880a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 806880c:	687b      	ldr	r3, [r7, #4]
}
 806880e:	4618      	mov	r0, r3
 8068810:	3708      	adds	r7, #8
 8068812:	46bd      	mov	sp, r7
 8068814:	bd80      	pop	{r7, pc}
 8068816:	bf00      	nop
 8068818:	200001e4 	.word	0x200001e4

0806881c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 806881c:	b580      	push	{r7, lr}
 806881e:	b08e      	sub	sp, #56	; 0x38
 8068820:	af04      	add	r7, sp, #16
 8068822:	60f8      	str	r0, [r7, #12]
 8068824:	60b9      	str	r1, [r7, #8]
 8068826:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8068828:	2300      	movs	r3, #0
 806882a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806882c:	f3ef 8305 	mrs	r3, IPSR
 8068830:	617b      	str	r3, [r7, #20]
  return(result);
 8068832:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8068834:	2b00      	cmp	r3, #0
 8068836:	d17e      	bne.n	8068936 <osThreadNew+0x11a>
 8068838:	68fb      	ldr	r3, [r7, #12]
 806883a:	2b00      	cmp	r3, #0
 806883c:	d07b      	beq.n	8068936 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 806883e:	2380      	movs	r3, #128	; 0x80
 8068840:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8068842:	2318      	movs	r3, #24
 8068844:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8068846:	2300      	movs	r3, #0
 8068848:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 806884a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806884e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8068850:	687b      	ldr	r3, [r7, #4]
 8068852:	2b00      	cmp	r3, #0
 8068854:	d045      	beq.n	80688e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8068856:	687b      	ldr	r3, [r7, #4]
 8068858:	681b      	ldr	r3, [r3, #0]
 806885a:	2b00      	cmp	r3, #0
 806885c:	d002      	beq.n	8068864 <osThreadNew+0x48>
        name = attr->name;
 806885e:	687b      	ldr	r3, [r7, #4]
 8068860:	681b      	ldr	r3, [r3, #0]
 8068862:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8068864:	687b      	ldr	r3, [r7, #4]
 8068866:	699b      	ldr	r3, [r3, #24]
 8068868:	2b00      	cmp	r3, #0
 806886a:	d002      	beq.n	8068872 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 806886c:	687b      	ldr	r3, [r7, #4]
 806886e:	699b      	ldr	r3, [r3, #24]
 8068870:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8068872:	69fb      	ldr	r3, [r7, #28]
 8068874:	2b00      	cmp	r3, #0
 8068876:	d008      	beq.n	806888a <osThreadNew+0x6e>
 8068878:	69fb      	ldr	r3, [r7, #28]
 806887a:	2b38      	cmp	r3, #56	; 0x38
 806887c:	d805      	bhi.n	806888a <osThreadNew+0x6e>
 806887e:	687b      	ldr	r3, [r7, #4]
 8068880:	685b      	ldr	r3, [r3, #4]
 8068882:	f003 0301 	and.w	r3, r3, #1
 8068886:	2b00      	cmp	r3, #0
 8068888:	d001      	beq.n	806888e <osThreadNew+0x72>
        return (NULL);
 806888a:	2300      	movs	r3, #0
 806888c:	e054      	b.n	8068938 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 806888e:	687b      	ldr	r3, [r7, #4]
 8068890:	695b      	ldr	r3, [r3, #20]
 8068892:	2b00      	cmp	r3, #0
 8068894:	d003      	beq.n	806889e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8068896:	687b      	ldr	r3, [r7, #4]
 8068898:	695b      	ldr	r3, [r3, #20]
 806889a:	089b      	lsrs	r3, r3, #2
 806889c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 806889e:	687b      	ldr	r3, [r7, #4]
 80688a0:	689b      	ldr	r3, [r3, #8]
 80688a2:	2b00      	cmp	r3, #0
 80688a4:	d00e      	beq.n	80688c4 <osThreadNew+0xa8>
 80688a6:	687b      	ldr	r3, [r7, #4]
 80688a8:	68db      	ldr	r3, [r3, #12]
 80688aa:	2bbb      	cmp	r3, #187	; 0xbb
 80688ac:	d90a      	bls.n	80688c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80688ae:	687b      	ldr	r3, [r7, #4]
 80688b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80688b2:	2b00      	cmp	r3, #0
 80688b4:	d006      	beq.n	80688c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80688b6:	687b      	ldr	r3, [r7, #4]
 80688b8:	695b      	ldr	r3, [r3, #20]
 80688ba:	2b00      	cmp	r3, #0
 80688bc:	d002      	beq.n	80688c4 <osThreadNew+0xa8>
        mem = 1;
 80688be:	2301      	movs	r3, #1
 80688c0:	61bb      	str	r3, [r7, #24]
 80688c2:	e010      	b.n	80688e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80688c4:	687b      	ldr	r3, [r7, #4]
 80688c6:	689b      	ldr	r3, [r3, #8]
 80688c8:	2b00      	cmp	r3, #0
 80688ca:	d10c      	bne.n	80688e6 <osThreadNew+0xca>
 80688cc:	687b      	ldr	r3, [r7, #4]
 80688ce:	68db      	ldr	r3, [r3, #12]
 80688d0:	2b00      	cmp	r3, #0
 80688d2:	d108      	bne.n	80688e6 <osThreadNew+0xca>
 80688d4:	687b      	ldr	r3, [r7, #4]
 80688d6:	691b      	ldr	r3, [r3, #16]
 80688d8:	2b00      	cmp	r3, #0
 80688da:	d104      	bne.n	80688e6 <osThreadNew+0xca>
          mem = 0;
 80688dc:	2300      	movs	r3, #0
 80688de:	61bb      	str	r3, [r7, #24]
 80688e0:	e001      	b.n	80688e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80688e2:	2300      	movs	r3, #0
 80688e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80688e6:	69bb      	ldr	r3, [r7, #24]
 80688e8:	2b01      	cmp	r3, #1
 80688ea:	d110      	bne.n	806890e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80688ec:	687b      	ldr	r3, [r7, #4]
 80688ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80688f0:	687a      	ldr	r2, [r7, #4]
 80688f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80688f4:	9202      	str	r2, [sp, #8]
 80688f6:	9301      	str	r3, [sp, #4]
 80688f8:	69fb      	ldr	r3, [r7, #28]
 80688fa:	9300      	str	r3, [sp, #0]
 80688fc:	68bb      	ldr	r3, [r7, #8]
 80688fe:	6a3a      	ldr	r2, [r7, #32]
 8068900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8068902:	68f8      	ldr	r0, [r7, #12]
 8068904:	f001 fe26 	bl	806a554 <xTaskCreateStatic>
 8068908:	4603      	mov	r3, r0
 806890a:	613b      	str	r3, [r7, #16]
 806890c:	e013      	b.n	8068936 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 806890e:	69bb      	ldr	r3, [r7, #24]
 8068910:	2b00      	cmp	r3, #0
 8068912:	d110      	bne.n	8068936 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8068914:	6a3b      	ldr	r3, [r7, #32]
 8068916:	b29a      	uxth	r2, r3
 8068918:	f107 0310 	add.w	r3, r7, #16
 806891c:	9301      	str	r3, [sp, #4]
 806891e:	69fb      	ldr	r3, [r7, #28]
 8068920:	9300      	str	r3, [sp, #0]
 8068922:	68bb      	ldr	r3, [r7, #8]
 8068924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8068926:	68f8      	ldr	r0, [r7, #12]
 8068928:	f001 fe71 	bl	806a60e <xTaskCreate>
 806892c:	4603      	mov	r3, r0
 806892e:	2b01      	cmp	r3, #1
 8068930:	d001      	beq.n	8068936 <osThreadNew+0x11a>
            hTask = NULL;
 8068932:	2300      	movs	r3, #0
 8068934:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8068936:	693b      	ldr	r3, [r7, #16]
}
 8068938:	4618      	mov	r0, r3
 806893a:	3728      	adds	r7, #40	; 0x28
 806893c:	46bd      	mov	sp, r7
 806893e:	bd80      	pop	{r7, pc}

08068940 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8068940:	b580      	push	{r7, lr}
 8068942:	b084      	sub	sp, #16
 8068944:	af00      	add	r7, sp, #0
 8068946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8068948:	f3ef 8305 	mrs	r3, IPSR
 806894c:	60bb      	str	r3, [r7, #8]
  return(result);
 806894e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8068950:	2b00      	cmp	r3, #0
 8068952:	d003      	beq.n	806895c <osDelay+0x1c>
    stat = osErrorISR;
 8068954:	f06f 0305 	mvn.w	r3, #5
 8068958:	60fb      	str	r3, [r7, #12]
 806895a:	e007      	b.n	806896c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 806895c:	2300      	movs	r3, #0
 806895e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8068960:	687b      	ldr	r3, [r7, #4]
 8068962:	2b00      	cmp	r3, #0
 8068964:	d002      	beq.n	806896c <osDelay+0x2c>
      vTaskDelay(ticks);
 8068966:	6878      	ldr	r0, [r7, #4]
 8068968:	f001 ffac 	bl	806a8c4 <vTaskDelay>
    }
  }

  return (stat);
 806896c:	68fb      	ldr	r3, [r7, #12]
}
 806896e:	4618      	mov	r0, r3
 8068970:	3710      	adds	r7, #16
 8068972:	46bd      	mov	sp, r7
 8068974:	bd80      	pop	{r7, pc}

08068976 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8068976:	b580      	push	{r7, lr}
 8068978:	b084      	sub	sp, #16
 806897a:	af00      	add	r7, sp, #0
 806897c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 806897e:	6878      	ldr	r0, [r7, #4]
 8068980:	f003 fa06 	bl	806bd90 <pvTimerGetTimerID>
 8068984:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8068986:	68fb      	ldr	r3, [r7, #12]
 8068988:	2b00      	cmp	r3, #0
 806898a:	d005      	beq.n	8068998 <TimerCallback+0x22>
    callb->func (callb->arg);
 806898c:	68fb      	ldr	r3, [r7, #12]
 806898e:	681b      	ldr	r3, [r3, #0]
 8068990:	68fa      	ldr	r2, [r7, #12]
 8068992:	6852      	ldr	r2, [r2, #4]
 8068994:	4610      	mov	r0, r2
 8068996:	4798      	blx	r3
  }
}
 8068998:	bf00      	nop
 806899a:	3710      	adds	r7, #16
 806899c:	46bd      	mov	sp, r7
 806899e:	bd80      	pop	{r7, pc}

080689a0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80689a0:	b580      	push	{r7, lr}
 80689a2:	b08c      	sub	sp, #48	; 0x30
 80689a4:	af02      	add	r7, sp, #8
 80689a6:	60f8      	str	r0, [r7, #12]
 80689a8:	607a      	str	r2, [r7, #4]
 80689aa:	603b      	str	r3, [r7, #0]
 80689ac:	460b      	mov	r3, r1
 80689ae:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80689b0:	2300      	movs	r3, #0
 80689b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80689b4:	f3ef 8305 	mrs	r3, IPSR
 80689b8:	613b      	str	r3, [r7, #16]
  return(result);
 80689ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80689bc:	2b00      	cmp	r3, #0
 80689be:	d163      	bne.n	8068a88 <osTimerNew+0xe8>
 80689c0:	68fb      	ldr	r3, [r7, #12]
 80689c2:	2b00      	cmp	r3, #0
 80689c4:	d060      	beq.n	8068a88 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80689c6:	2008      	movs	r0, #8
 80689c8:	f003 fc4e 	bl	806c268 <pvPortMalloc>
 80689cc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80689ce:	697b      	ldr	r3, [r7, #20]
 80689d0:	2b00      	cmp	r3, #0
 80689d2:	d059      	beq.n	8068a88 <osTimerNew+0xe8>
      callb->func = func;
 80689d4:	697b      	ldr	r3, [r7, #20]
 80689d6:	68fa      	ldr	r2, [r7, #12]
 80689d8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80689da:	697b      	ldr	r3, [r7, #20]
 80689dc:	687a      	ldr	r2, [r7, #4]
 80689de:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80689e0:	7afb      	ldrb	r3, [r7, #11]
 80689e2:	2b00      	cmp	r3, #0
 80689e4:	d102      	bne.n	80689ec <osTimerNew+0x4c>
        reload = pdFALSE;
 80689e6:	2300      	movs	r3, #0
 80689e8:	61fb      	str	r3, [r7, #28]
 80689ea:	e001      	b.n	80689f0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80689ec:	2301      	movs	r3, #1
 80689ee:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80689f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80689f4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80689f6:	2300      	movs	r3, #0
 80689f8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80689fa:	683b      	ldr	r3, [r7, #0]
 80689fc:	2b00      	cmp	r3, #0
 80689fe:	d01c      	beq.n	8068a3a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8068a00:	683b      	ldr	r3, [r7, #0]
 8068a02:	681b      	ldr	r3, [r3, #0]
 8068a04:	2b00      	cmp	r3, #0
 8068a06:	d002      	beq.n	8068a0e <osTimerNew+0x6e>
          name = attr->name;
 8068a08:	683b      	ldr	r3, [r7, #0]
 8068a0a:	681b      	ldr	r3, [r3, #0]
 8068a0c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8068a0e:	683b      	ldr	r3, [r7, #0]
 8068a10:	689b      	ldr	r3, [r3, #8]
 8068a12:	2b00      	cmp	r3, #0
 8068a14:	d006      	beq.n	8068a24 <osTimerNew+0x84>
 8068a16:	683b      	ldr	r3, [r7, #0]
 8068a18:	68db      	ldr	r3, [r3, #12]
 8068a1a:	2b2b      	cmp	r3, #43	; 0x2b
 8068a1c:	d902      	bls.n	8068a24 <osTimerNew+0x84>
          mem = 1;
 8068a1e:	2301      	movs	r3, #1
 8068a20:	61bb      	str	r3, [r7, #24]
 8068a22:	e00c      	b.n	8068a3e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8068a24:	683b      	ldr	r3, [r7, #0]
 8068a26:	689b      	ldr	r3, [r3, #8]
 8068a28:	2b00      	cmp	r3, #0
 8068a2a:	d108      	bne.n	8068a3e <osTimerNew+0x9e>
 8068a2c:	683b      	ldr	r3, [r7, #0]
 8068a2e:	68db      	ldr	r3, [r3, #12]
 8068a30:	2b00      	cmp	r3, #0
 8068a32:	d104      	bne.n	8068a3e <osTimerNew+0x9e>
            mem = 0;
 8068a34:	2300      	movs	r3, #0
 8068a36:	61bb      	str	r3, [r7, #24]
 8068a38:	e001      	b.n	8068a3e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8068a3a:	2300      	movs	r3, #0
 8068a3c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8068a3e:	69bb      	ldr	r3, [r7, #24]
 8068a40:	2b01      	cmp	r3, #1
 8068a42:	d10c      	bne.n	8068a5e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8068a44:	683b      	ldr	r3, [r7, #0]
 8068a46:	689b      	ldr	r3, [r3, #8]
 8068a48:	9301      	str	r3, [sp, #4]
 8068a4a:	4b12      	ldr	r3, [pc, #72]	; (8068a94 <osTimerNew+0xf4>)
 8068a4c:	9300      	str	r3, [sp, #0]
 8068a4e:	697b      	ldr	r3, [r7, #20]
 8068a50:	69fa      	ldr	r2, [r7, #28]
 8068a52:	2101      	movs	r1, #1
 8068a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8068a56:	f002 fe1c 	bl	806b692 <xTimerCreateStatic>
 8068a5a:	6238      	str	r0, [r7, #32]
 8068a5c:	e00b      	b.n	8068a76 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8068a5e:	69bb      	ldr	r3, [r7, #24]
 8068a60:	2b00      	cmp	r3, #0
 8068a62:	d108      	bne.n	8068a76 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8068a64:	4b0b      	ldr	r3, [pc, #44]	; (8068a94 <osTimerNew+0xf4>)
 8068a66:	9300      	str	r3, [sp, #0]
 8068a68:	697b      	ldr	r3, [r7, #20]
 8068a6a:	69fa      	ldr	r2, [r7, #28]
 8068a6c:	2101      	movs	r1, #1
 8068a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8068a70:	f002 fdee 	bl	806b650 <xTimerCreate>
 8068a74:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8068a76:	6a3b      	ldr	r3, [r7, #32]
 8068a78:	2b00      	cmp	r3, #0
 8068a7a:	d105      	bne.n	8068a88 <osTimerNew+0xe8>
 8068a7c:	697b      	ldr	r3, [r7, #20]
 8068a7e:	2b00      	cmp	r3, #0
 8068a80:	d002      	beq.n	8068a88 <osTimerNew+0xe8>
        vPortFree (callb);
 8068a82:	6978      	ldr	r0, [r7, #20]
 8068a84:	f003 fcbc 	bl	806c400 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8068a88:	6a3b      	ldr	r3, [r7, #32]
}
 8068a8a:	4618      	mov	r0, r3
 8068a8c:	3728      	adds	r7, #40	; 0x28
 8068a8e:	46bd      	mov	sp, r7
 8068a90:	bd80      	pop	{r7, pc}
 8068a92:	bf00      	nop
 8068a94:	08068977 	.word	0x08068977

08068a98 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8068a98:	b580      	push	{r7, lr}
 8068a9a:	b088      	sub	sp, #32
 8068a9c:	af02      	add	r7, sp, #8
 8068a9e:	6078      	str	r0, [r7, #4]
 8068aa0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8068aa2:	687b      	ldr	r3, [r7, #4]
 8068aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8068aa6:	f3ef 8305 	mrs	r3, IPSR
 8068aaa:	60fb      	str	r3, [r7, #12]
  return(result);
 8068aac:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8068aae:	2b00      	cmp	r3, #0
 8068ab0:	d003      	beq.n	8068aba <osTimerStart+0x22>
    stat = osErrorISR;
 8068ab2:	f06f 0305 	mvn.w	r3, #5
 8068ab6:	617b      	str	r3, [r7, #20]
 8068ab8:	e017      	b.n	8068aea <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8068aba:	693b      	ldr	r3, [r7, #16]
 8068abc:	2b00      	cmp	r3, #0
 8068abe:	d103      	bne.n	8068ac8 <osTimerStart+0x30>
    stat = osErrorParameter;
 8068ac0:	f06f 0303 	mvn.w	r3, #3
 8068ac4:	617b      	str	r3, [r7, #20]
 8068ac6:	e010      	b.n	8068aea <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8068ac8:	2300      	movs	r3, #0
 8068aca:	9300      	str	r3, [sp, #0]
 8068acc:	2300      	movs	r3, #0
 8068ace:	683a      	ldr	r2, [r7, #0]
 8068ad0:	2104      	movs	r1, #4
 8068ad2:	6938      	ldr	r0, [r7, #16]
 8068ad4:	f002 fe56 	bl	806b784 <xTimerGenericCommand>
 8068ad8:	4603      	mov	r3, r0
 8068ada:	2b01      	cmp	r3, #1
 8068adc:	d102      	bne.n	8068ae4 <osTimerStart+0x4c>
      stat = osOK;
 8068ade:	2300      	movs	r3, #0
 8068ae0:	617b      	str	r3, [r7, #20]
 8068ae2:	e002      	b.n	8068aea <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8068ae4:	f06f 0302 	mvn.w	r3, #2
 8068ae8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8068aea:	697b      	ldr	r3, [r7, #20]
}
 8068aec:	4618      	mov	r0, r3
 8068aee:	3718      	adds	r7, #24
 8068af0:	46bd      	mov	sp, r7
 8068af2:	bd80      	pop	{r7, pc}

08068af4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8068af4:	b580      	push	{r7, lr}
 8068af6:	b088      	sub	sp, #32
 8068af8:	af00      	add	r7, sp, #0
 8068afa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8068afc:	2300      	movs	r3, #0
 8068afe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8068b00:	f3ef 8305 	mrs	r3, IPSR
 8068b04:	60bb      	str	r3, [r7, #8]
  return(result);
 8068b06:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8068b08:	2b00      	cmp	r3, #0
 8068b0a:	d174      	bne.n	8068bf6 <osMutexNew+0x102>
    if (attr != NULL) {
 8068b0c:	687b      	ldr	r3, [r7, #4]
 8068b0e:	2b00      	cmp	r3, #0
 8068b10:	d003      	beq.n	8068b1a <osMutexNew+0x26>
      type = attr->attr_bits;
 8068b12:	687b      	ldr	r3, [r7, #4]
 8068b14:	685b      	ldr	r3, [r3, #4]
 8068b16:	61bb      	str	r3, [r7, #24]
 8068b18:	e001      	b.n	8068b1e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8068b1a:	2300      	movs	r3, #0
 8068b1c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8068b1e:	69bb      	ldr	r3, [r7, #24]
 8068b20:	f003 0301 	and.w	r3, r3, #1
 8068b24:	2b00      	cmp	r3, #0
 8068b26:	d002      	beq.n	8068b2e <osMutexNew+0x3a>
      rmtx = 1U;
 8068b28:	2301      	movs	r3, #1
 8068b2a:	617b      	str	r3, [r7, #20]
 8068b2c:	e001      	b.n	8068b32 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8068b2e:	2300      	movs	r3, #0
 8068b30:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8068b32:	69bb      	ldr	r3, [r7, #24]
 8068b34:	f003 0308 	and.w	r3, r3, #8
 8068b38:	2b00      	cmp	r3, #0
 8068b3a:	d15c      	bne.n	8068bf6 <osMutexNew+0x102>
      mem = -1;
 8068b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8068b40:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8068b42:	687b      	ldr	r3, [r7, #4]
 8068b44:	2b00      	cmp	r3, #0
 8068b46:	d015      	beq.n	8068b74 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8068b48:	687b      	ldr	r3, [r7, #4]
 8068b4a:	689b      	ldr	r3, [r3, #8]
 8068b4c:	2b00      	cmp	r3, #0
 8068b4e:	d006      	beq.n	8068b5e <osMutexNew+0x6a>
 8068b50:	687b      	ldr	r3, [r7, #4]
 8068b52:	68db      	ldr	r3, [r3, #12]
 8068b54:	2b4f      	cmp	r3, #79	; 0x4f
 8068b56:	d902      	bls.n	8068b5e <osMutexNew+0x6a>
          mem = 1;
 8068b58:	2301      	movs	r3, #1
 8068b5a:	613b      	str	r3, [r7, #16]
 8068b5c:	e00c      	b.n	8068b78 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8068b5e:	687b      	ldr	r3, [r7, #4]
 8068b60:	689b      	ldr	r3, [r3, #8]
 8068b62:	2b00      	cmp	r3, #0
 8068b64:	d108      	bne.n	8068b78 <osMutexNew+0x84>
 8068b66:	687b      	ldr	r3, [r7, #4]
 8068b68:	68db      	ldr	r3, [r3, #12]
 8068b6a:	2b00      	cmp	r3, #0
 8068b6c:	d104      	bne.n	8068b78 <osMutexNew+0x84>
            mem = 0;
 8068b6e:	2300      	movs	r3, #0
 8068b70:	613b      	str	r3, [r7, #16]
 8068b72:	e001      	b.n	8068b78 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8068b74:	2300      	movs	r3, #0
 8068b76:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8068b78:	693b      	ldr	r3, [r7, #16]
 8068b7a:	2b01      	cmp	r3, #1
 8068b7c:	d112      	bne.n	8068ba4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8068b7e:	697b      	ldr	r3, [r7, #20]
 8068b80:	2b00      	cmp	r3, #0
 8068b82:	d007      	beq.n	8068b94 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8068b84:	687b      	ldr	r3, [r7, #4]
 8068b86:	689b      	ldr	r3, [r3, #8]
 8068b88:	4619      	mov	r1, r3
 8068b8a:	2004      	movs	r0, #4
 8068b8c:	f000 fd8d 	bl	80696aa <xQueueCreateMutexStatic>
 8068b90:	61f8      	str	r0, [r7, #28]
 8068b92:	e016      	b.n	8068bc2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8068b94:	687b      	ldr	r3, [r7, #4]
 8068b96:	689b      	ldr	r3, [r3, #8]
 8068b98:	4619      	mov	r1, r3
 8068b9a:	2001      	movs	r0, #1
 8068b9c:	f000 fd85 	bl	80696aa <xQueueCreateMutexStatic>
 8068ba0:	61f8      	str	r0, [r7, #28]
 8068ba2:	e00e      	b.n	8068bc2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8068ba4:	693b      	ldr	r3, [r7, #16]
 8068ba6:	2b00      	cmp	r3, #0
 8068ba8:	d10b      	bne.n	8068bc2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8068baa:	697b      	ldr	r3, [r7, #20]
 8068bac:	2b00      	cmp	r3, #0
 8068bae:	d004      	beq.n	8068bba <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8068bb0:	2004      	movs	r0, #4
 8068bb2:	f000 fd62 	bl	806967a <xQueueCreateMutex>
 8068bb6:	61f8      	str	r0, [r7, #28]
 8068bb8:	e003      	b.n	8068bc2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8068bba:	2001      	movs	r0, #1
 8068bbc:	f000 fd5d 	bl	806967a <xQueueCreateMutex>
 8068bc0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8068bc2:	69fb      	ldr	r3, [r7, #28]
 8068bc4:	2b00      	cmp	r3, #0
 8068bc6:	d00c      	beq.n	8068be2 <osMutexNew+0xee>
        if (attr != NULL) {
 8068bc8:	687b      	ldr	r3, [r7, #4]
 8068bca:	2b00      	cmp	r3, #0
 8068bcc:	d003      	beq.n	8068bd6 <osMutexNew+0xe2>
          name = attr->name;
 8068bce:	687b      	ldr	r3, [r7, #4]
 8068bd0:	681b      	ldr	r3, [r3, #0]
 8068bd2:	60fb      	str	r3, [r7, #12]
 8068bd4:	e001      	b.n	8068bda <osMutexNew+0xe6>
        } else {
          name = NULL;
 8068bd6:	2300      	movs	r3, #0
 8068bd8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8068bda:	68f9      	ldr	r1, [r7, #12]
 8068bdc:	69f8      	ldr	r0, [r7, #28]
 8068bde:	f001 fc31 	bl	806a444 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8068be2:	69fb      	ldr	r3, [r7, #28]
 8068be4:	2b00      	cmp	r3, #0
 8068be6:	d006      	beq.n	8068bf6 <osMutexNew+0x102>
 8068be8:	697b      	ldr	r3, [r7, #20]
 8068bea:	2b00      	cmp	r3, #0
 8068bec:	d003      	beq.n	8068bf6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8068bee:	69fb      	ldr	r3, [r7, #28]
 8068bf0:	f043 0301 	orr.w	r3, r3, #1
 8068bf4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8068bf6:	69fb      	ldr	r3, [r7, #28]
}
 8068bf8:	4618      	mov	r0, r3
 8068bfa:	3720      	adds	r7, #32
 8068bfc:	46bd      	mov	sp, r7
 8068bfe:	bd80      	pop	{r7, pc}

08068c00 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8068c00:	b580      	push	{r7, lr}
 8068c02:	b086      	sub	sp, #24
 8068c04:	af00      	add	r7, sp, #0
 8068c06:	6078      	str	r0, [r7, #4]
 8068c08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8068c0a:	687b      	ldr	r3, [r7, #4]
 8068c0c:	f023 0301 	bic.w	r3, r3, #1
 8068c10:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8068c12:	687b      	ldr	r3, [r7, #4]
 8068c14:	f003 0301 	and.w	r3, r3, #1
 8068c18:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8068c1a:	2300      	movs	r3, #0
 8068c1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8068c1e:	f3ef 8305 	mrs	r3, IPSR
 8068c22:	60bb      	str	r3, [r7, #8]
  return(result);
 8068c24:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8068c26:	2b00      	cmp	r3, #0
 8068c28:	d003      	beq.n	8068c32 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8068c2a:	f06f 0305 	mvn.w	r3, #5
 8068c2e:	617b      	str	r3, [r7, #20]
 8068c30:	e02c      	b.n	8068c8c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8068c32:	693b      	ldr	r3, [r7, #16]
 8068c34:	2b00      	cmp	r3, #0
 8068c36:	d103      	bne.n	8068c40 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8068c38:	f06f 0303 	mvn.w	r3, #3
 8068c3c:	617b      	str	r3, [r7, #20]
 8068c3e:	e025      	b.n	8068c8c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8068c40:	68fb      	ldr	r3, [r7, #12]
 8068c42:	2b00      	cmp	r3, #0
 8068c44:	d011      	beq.n	8068c6a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8068c46:	6839      	ldr	r1, [r7, #0]
 8068c48:	6938      	ldr	r0, [r7, #16]
 8068c4a:	f000 fd7d 	bl	8069748 <xQueueTakeMutexRecursive>
 8068c4e:	4603      	mov	r3, r0
 8068c50:	2b01      	cmp	r3, #1
 8068c52:	d01b      	beq.n	8068c8c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8068c54:	683b      	ldr	r3, [r7, #0]
 8068c56:	2b00      	cmp	r3, #0
 8068c58:	d003      	beq.n	8068c62 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8068c5a:	f06f 0301 	mvn.w	r3, #1
 8068c5e:	617b      	str	r3, [r7, #20]
 8068c60:	e014      	b.n	8068c8c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8068c62:	f06f 0302 	mvn.w	r3, #2
 8068c66:	617b      	str	r3, [r7, #20]
 8068c68:	e010      	b.n	8068c8c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8068c6a:	6839      	ldr	r1, [r7, #0]
 8068c6c:	6938      	ldr	r0, [r7, #16]
 8068c6e:	f001 f911 	bl	8069e94 <xQueueSemaphoreTake>
 8068c72:	4603      	mov	r3, r0
 8068c74:	2b01      	cmp	r3, #1
 8068c76:	d009      	beq.n	8068c8c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8068c78:	683b      	ldr	r3, [r7, #0]
 8068c7a:	2b00      	cmp	r3, #0
 8068c7c:	d003      	beq.n	8068c86 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8068c7e:	f06f 0301 	mvn.w	r3, #1
 8068c82:	617b      	str	r3, [r7, #20]
 8068c84:	e002      	b.n	8068c8c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8068c86:	f06f 0302 	mvn.w	r3, #2
 8068c8a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8068c8c:	697b      	ldr	r3, [r7, #20]
}
 8068c8e:	4618      	mov	r0, r3
 8068c90:	3718      	adds	r7, #24
 8068c92:	46bd      	mov	sp, r7
 8068c94:	bd80      	pop	{r7, pc}

08068c96 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8068c96:	b580      	push	{r7, lr}
 8068c98:	b086      	sub	sp, #24
 8068c9a:	af00      	add	r7, sp, #0
 8068c9c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8068c9e:	687b      	ldr	r3, [r7, #4]
 8068ca0:	f023 0301 	bic.w	r3, r3, #1
 8068ca4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8068ca6:	687b      	ldr	r3, [r7, #4]
 8068ca8:	f003 0301 	and.w	r3, r3, #1
 8068cac:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8068cae:	2300      	movs	r3, #0
 8068cb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8068cb2:	f3ef 8305 	mrs	r3, IPSR
 8068cb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8068cb8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8068cba:	2b00      	cmp	r3, #0
 8068cbc:	d003      	beq.n	8068cc6 <osMutexRelease+0x30>
    stat = osErrorISR;
 8068cbe:	f06f 0305 	mvn.w	r3, #5
 8068cc2:	617b      	str	r3, [r7, #20]
 8068cc4:	e01f      	b.n	8068d06 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8068cc6:	693b      	ldr	r3, [r7, #16]
 8068cc8:	2b00      	cmp	r3, #0
 8068cca:	d103      	bne.n	8068cd4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8068ccc:	f06f 0303 	mvn.w	r3, #3
 8068cd0:	617b      	str	r3, [r7, #20]
 8068cd2:	e018      	b.n	8068d06 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8068cd4:	68fb      	ldr	r3, [r7, #12]
 8068cd6:	2b00      	cmp	r3, #0
 8068cd8:	d009      	beq.n	8068cee <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8068cda:	6938      	ldr	r0, [r7, #16]
 8068cdc:	f000 fd00 	bl	80696e0 <xQueueGiveMutexRecursive>
 8068ce0:	4603      	mov	r3, r0
 8068ce2:	2b01      	cmp	r3, #1
 8068ce4:	d00f      	beq.n	8068d06 <osMutexRelease+0x70>
        stat = osErrorResource;
 8068ce6:	f06f 0302 	mvn.w	r3, #2
 8068cea:	617b      	str	r3, [r7, #20]
 8068cec:	e00b      	b.n	8068d06 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8068cee:	2300      	movs	r3, #0
 8068cf0:	2200      	movs	r2, #0
 8068cf2:	2100      	movs	r1, #0
 8068cf4:	6938      	ldr	r0, [r7, #16]
 8068cf6:	f000 fdc7 	bl	8069888 <xQueueGenericSend>
 8068cfa:	4603      	mov	r3, r0
 8068cfc:	2b01      	cmp	r3, #1
 8068cfe:	d002      	beq.n	8068d06 <osMutexRelease+0x70>
        stat = osErrorResource;
 8068d00:	f06f 0302 	mvn.w	r3, #2
 8068d04:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8068d06:	697b      	ldr	r3, [r7, #20]
}
 8068d08:	4618      	mov	r0, r3
 8068d0a:	3718      	adds	r7, #24
 8068d0c:	46bd      	mov	sp, r7
 8068d0e:	bd80      	pop	{r7, pc}

08068d10 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8068d10:	b580      	push	{r7, lr}
 8068d12:	b08a      	sub	sp, #40	; 0x28
 8068d14:	af02      	add	r7, sp, #8
 8068d16:	60f8      	str	r0, [r7, #12]
 8068d18:	60b9      	str	r1, [r7, #8]
 8068d1a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8068d1c:	2300      	movs	r3, #0
 8068d1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8068d20:	f3ef 8305 	mrs	r3, IPSR
 8068d24:	613b      	str	r3, [r7, #16]
  return(result);
 8068d26:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8068d28:	2b00      	cmp	r3, #0
 8068d2a:	d175      	bne.n	8068e18 <osSemaphoreNew+0x108>
 8068d2c:	68fb      	ldr	r3, [r7, #12]
 8068d2e:	2b00      	cmp	r3, #0
 8068d30:	d072      	beq.n	8068e18 <osSemaphoreNew+0x108>
 8068d32:	68ba      	ldr	r2, [r7, #8]
 8068d34:	68fb      	ldr	r3, [r7, #12]
 8068d36:	429a      	cmp	r2, r3
 8068d38:	d86e      	bhi.n	8068e18 <osSemaphoreNew+0x108>
    mem = -1;
 8068d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8068d3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8068d40:	687b      	ldr	r3, [r7, #4]
 8068d42:	2b00      	cmp	r3, #0
 8068d44:	d015      	beq.n	8068d72 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8068d46:	687b      	ldr	r3, [r7, #4]
 8068d48:	689b      	ldr	r3, [r3, #8]
 8068d4a:	2b00      	cmp	r3, #0
 8068d4c:	d006      	beq.n	8068d5c <osSemaphoreNew+0x4c>
 8068d4e:	687b      	ldr	r3, [r7, #4]
 8068d50:	68db      	ldr	r3, [r3, #12]
 8068d52:	2b4f      	cmp	r3, #79	; 0x4f
 8068d54:	d902      	bls.n	8068d5c <osSemaphoreNew+0x4c>
        mem = 1;
 8068d56:	2301      	movs	r3, #1
 8068d58:	61bb      	str	r3, [r7, #24]
 8068d5a:	e00c      	b.n	8068d76 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8068d5c:	687b      	ldr	r3, [r7, #4]
 8068d5e:	689b      	ldr	r3, [r3, #8]
 8068d60:	2b00      	cmp	r3, #0
 8068d62:	d108      	bne.n	8068d76 <osSemaphoreNew+0x66>
 8068d64:	687b      	ldr	r3, [r7, #4]
 8068d66:	68db      	ldr	r3, [r3, #12]
 8068d68:	2b00      	cmp	r3, #0
 8068d6a:	d104      	bne.n	8068d76 <osSemaphoreNew+0x66>
          mem = 0;
 8068d6c:	2300      	movs	r3, #0
 8068d6e:	61bb      	str	r3, [r7, #24]
 8068d70:	e001      	b.n	8068d76 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8068d72:	2300      	movs	r3, #0
 8068d74:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8068d76:	69bb      	ldr	r3, [r7, #24]
 8068d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8068d7c:	d04c      	beq.n	8068e18 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8068d7e:	68fb      	ldr	r3, [r7, #12]
 8068d80:	2b01      	cmp	r3, #1
 8068d82:	d128      	bne.n	8068dd6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8068d84:	69bb      	ldr	r3, [r7, #24]
 8068d86:	2b01      	cmp	r3, #1
 8068d88:	d10a      	bne.n	8068da0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8068d8a:	687b      	ldr	r3, [r7, #4]
 8068d8c:	689b      	ldr	r3, [r3, #8]
 8068d8e:	2203      	movs	r2, #3
 8068d90:	9200      	str	r2, [sp, #0]
 8068d92:	2200      	movs	r2, #0
 8068d94:	2100      	movs	r1, #0
 8068d96:	2001      	movs	r0, #1
 8068d98:	f000 fb80 	bl	806949c <xQueueGenericCreateStatic>
 8068d9c:	61f8      	str	r0, [r7, #28]
 8068d9e:	e005      	b.n	8068dac <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8068da0:	2203      	movs	r2, #3
 8068da2:	2100      	movs	r1, #0
 8068da4:	2001      	movs	r0, #1
 8068da6:	f000 fbf1 	bl	806958c <xQueueGenericCreate>
 8068daa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8068dac:	69fb      	ldr	r3, [r7, #28]
 8068dae:	2b00      	cmp	r3, #0
 8068db0:	d022      	beq.n	8068df8 <osSemaphoreNew+0xe8>
 8068db2:	68bb      	ldr	r3, [r7, #8]
 8068db4:	2b00      	cmp	r3, #0
 8068db6:	d01f      	beq.n	8068df8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8068db8:	2300      	movs	r3, #0
 8068dba:	2200      	movs	r2, #0
 8068dbc:	2100      	movs	r1, #0
 8068dbe:	69f8      	ldr	r0, [r7, #28]
 8068dc0:	f000 fd62 	bl	8069888 <xQueueGenericSend>
 8068dc4:	4603      	mov	r3, r0
 8068dc6:	2b01      	cmp	r3, #1
 8068dc8:	d016      	beq.n	8068df8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8068dca:	69f8      	ldr	r0, [r7, #28]
 8068dcc:	f001 f9ee 	bl	806a1ac <vQueueDelete>
            hSemaphore = NULL;
 8068dd0:	2300      	movs	r3, #0
 8068dd2:	61fb      	str	r3, [r7, #28]
 8068dd4:	e010      	b.n	8068df8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8068dd6:	69bb      	ldr	r3, [r7, #24]
 8068dd8:	2b01      	cmp	r3, #1
 8068dda:	d108      	bne.n	8068dee <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8068ddc:	687b      	ldr	r3, [r7, #4]
 8068dde:	689b      	ldr	r3, [r3, #8]
 8068de0:	461a      	mov	r2, r3
 8068de2:	68b9      	ldr	r1, [r7, #8]
 8068de4:	68f8      	ldr	r0, [r7, #12]
 8068de6:	f000 fce5 	bl	80697b4 <xQueueCreateCountingSemaphoreStatic>
 8068dea:	61f8      	str	r0, [r7, #28]
 8068dec:	e004      	b.n	8068df8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8068dee:	68b9      	ldr	r1, [r7, #8]
 8068df0:	68f8      	ldr	r0, [r7, #12]
 8068df2:	f000 fd16 	bl	8069822 <xQueueCreateCountingSemaphore>
 8068df6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8068df8:	69fb      	ldr	r3, [r7, #28]
 8068dfa:	2b00      	cmp	r3, #0
 8068dfc:	d00c      	beq.n	8068e18 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8068dfe:	687b      	ldr	r3, [r7, #4]
 8068e00:	2b00      	cmp	r3, #0
 8068e02:	d003      	beq.n	8068e0c <osSemaphoreNew+0xfc>
          name = attr->name;
 8068e04:	687b      	ldr	r3, [r7, #4]
 8068e06:	681b      	ldr	r3, [r3, #0]
 8068e08:	617b      	str	r3, [r7, #20]
 8068e0a:	e001      	b.n	8068e10 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8068e0c:	2300      	movs	r3, #0
 8068e0e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8068e10:	6979      	ldr	r1, [r7, #20]
 8068e12:	69f8      	ldr	r0, [r7, #28]
 8068e14:	f001 fb16 	bl	806a444 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8068e18:	69fb      	ldr	r3, [r7, #28]
}
 8068e1a:	4618      	mov	r0, r3
 8068e1c:	3720      	adds	r7, #32
 8068e1e:	46bd      	mov	sp, r7
 8068e20:	bd80      	pop	{r7, pc}
	...

08068e24 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8068e24:	b580      	push	{r7, lr}
 8068e26:	b086      	sub	sp, #24
 8068e28:	af00      	add	r7, sp, #0
 8068e2a:	6078      	str	r0, [r7, #4]
 8068e2c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8068e2e:	687b      	ldr	r3, [r7, #4]
 8068e30:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8068e32:	2300      	movs	r3, #0
 8068e34:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8068e36:	693b      	ldr	r3, [r7, #16]
 8068e38:	2b00      	cmp	r3, #0
 8068e3a:	d103      	bne.n	8068e44 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8068e3c:	f06f 0303 	mvn.w	r3, #3
 8068e40:	617b      	str	r3, [r7, #20]
 8068e42:	e039      	b.n	8068eb8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8068e44:	f3ef 8305 	mrs	r3, IPSR
 8068e48:	60fb      	str	r3, [r7, #12]
  return(result);
 8068e4a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8068e4c:	2b00      	cmp	r3, #0
 8068e4e:	d022      	beq.n	8068e96 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8068e50:	683b      	ldr	r3, [r7, #0]
 8068e52:	2b00      	cmp	r3, #0
 8068e54:	d003      	beq.n	8068e5e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8068e56:	f06f 0303 	mvn.w	r3, #3
 8068e5a:	617b      	str	r3, [r7, #20]
 8068e5c:	e02c      	b.n	8068eb8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8068e5e:	2300      	movs	r3, #0
 8068e60:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8068e62:	f107 0308 	add.w	r3, r7, #8
 8068e66:	461a      	mov	r2, r3
 8068e68:	2100      	movs	r1, #0
 8068e6a:	6938      	ldr	r0, [r7, #16]
 8068e6c:	f001 f91e 	bl	806a0ac <xQueueReceiveFromISR>
 8068e70:	4603      	mov	r3, r0
 8068e72:	2b01      	cmp	r3, #1
 8068e74:	d003      	beq.n	8068e7e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8068e76:	f06f 0302 	mvn.w	r3, #2
 8068e7a:	617b      	str	r3, [r7, #20]
 8068e7c:	e01c      	b.n	8068eb8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8068e7e:	68bb      	ldr	r3, [r7, #8]
 8068e80:	2b00      	cmp	r3, #0
 8068e82:	d019      	beq.n	8068eb8 <osSemaphoreAcquire+0x94>
 8068e84:	4b0f      	ldr	r3, [pc, #60]	; (8068ec4 <osSemaphoreAcquire+0xa0>)
 8068e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8068e8a:	601a      	str	r2, [r3, #0]
 8068e8c:	f3bf 8f4f 	dsb	sy
 8068e90:	f3bf 8f6f 	isb	sy
 8068e94:	e010      	b.n	8068eb8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8068e96:	6839      	ldr	r1, [r7, #0]
 8068e98:	6938      	ldr	r0, [r7, #16]
 8068e9a:	f000 fffb 	bl	8069e94 <xQueueSemaphoreTake>
 8068e9e:	4603      	mov	r3, r0
 8068ea0:	2b01      	cmp	r3, #1
 8068ea2:	d009      	beq.n	8068eb8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8068ea4:	683b      	ldr	r3, [r7, #0]
 8068ea6:	2b00      	cmp	r3, #0
 8068ea8:	d003      	beq.n	8068eb2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8068eaa:	f06f 0301 	mvn.w	r3, #1
 8068eae:	617b      	str	r3, [r7, #20]
 8068eb0:	e002      	b.n	8068eb8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8068eb2:	f06f 0302 	mvn.w	r3, #2
 8068eb6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8068eb8:	697b      	ldr	r3, [r7, #20]
}
 8068eba:	4618      	mov	r0, r3
 8068ebc:	3718      	adds	r7, #24
 8068ebe:	46bd      	mov	sp, r7
 8068ec0:	bd80      	pop	{r7, pc}
 8068ec2:	bf00      	nop
 8068ec4:	e000ed04 	.word	0xe000ed04

08068ec8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8068ec8:	b580      	push	{r7, lr}
 8068eca:	b086      	sub	sp, #24
 8068ecc:	af00      	add	r7, sp, #0
 8068ece:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8068ed0:	687b      	ldr	r3, [r7, #4]
 8068ed2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8068ed4:	2300      	movs	r3, #0
 8068ed6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8068ed8:	693b      	ldr	r3, [r7, #16]
 8068eda:	2b00      	cmp	r3, #0
 8068edc:	d103      	bne.n	8068ee6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8068ede:	f06f 0303 	mvn.w	r3, #3
 8068ee2:	617b      	str	r3, [r7, #20]
 8068ee4:	e02c      	b.n	8068f40 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8068ee6:	f3ef 8305 	mrs	r3, IPSR
 8068eea:	60fb      	str	r3, [r7, #12]
  return(result);
 8068eec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8068eee:	2b00      	cmp	r3, #0
 8068ef0:	d01a      	beq.n	8068f28 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8068ef2:	2300      	movs	r3, #0
 8068ef4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8068ef6:	f107 0308 	add.w	r3, r7, #8
 8068efa:	4619      	mov	r1, r3
 8068efc:	6938      	ldr	r0, [r7, #16]
 8068efe:	f000 fe5c 	bl	8069bba <xQueueGiveFromISR>
 8068f02:	4603      	mov	r3, r0
 8068f04:	2b01      	cmp	r3, #1
 8068f06:	d003      	beq.n	8068f10 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8068f08:	f06f 0302 	mvn.w	r3, #2
 8068f0c:	617b      	str	r3, [r7, #20]
 8068f0e:	e017      	b.n	8068f40 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8068f10:	68bb      	ldr	r3, [r7, #8]
 8068f12:	2b00      	cmp	r3, #0
 8068f14:	d014      	beq.n	8068f40 <osSemaphoreRelease+0x78>
 8068f16:	4b0d      	ldr	r3, [pc, #52]	; (8068f4c <osSemaphoreRelease+0x84>)
 8068f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8068f1c:	601a      	str	r2, [r3, #0]
 8068f1e:	f3bf 8f4f 	dsb	sy
 8068f22:	f3bf 8f6f 	isb	sy
 8068f26:	e00b      	b.n	8068f40 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8068f28:	2300      	movs	r3, #0
 8068f2a:	2200      	movs	r2, #0
 8068f2c:	2100      	movs	r1, #0
 8068f2e:	6938      	ldr	r0, [r7, #16]
 8068f30:	f000 fcaa 	bl	8069888 <xQueueGenericSend>
 8068f34:	4603      	mov	r3, r0
 8068f36:	2b01      	cmp	r3, #1
 8068f38:	d002      	beq.n	8068f40 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8068f3a:	f06f 0302 	mvn.w	r3, #2
 8068f3e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8068f40:	697b      	ldr	r3, [r7, #20]
}
 8068f42:	4618      	mov	r0, r3
 8068f44:	3718      	adds	r7, #24
 8068f46:	46bd      	mov	sp, r7
 8068f48:	bd80      	pop	{r7, pc}
 8068f4a:	bf00      	nop
 8068f4c:	e000ed04 	.word	0xe000ed04

08068f50 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8068f50:	b580      	push	{r7, lr}
 8068f52:	b086      	sub	sp, #24
 8068f54:	af00      	add	r7, sp, #0
 8068f56:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8068f58:	687b      	ldr	r3, [r7, #4]
 8068f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8068f5c:	f3ef 8305 	mrs	r3, IPSR
 8068f60:	60fb      	str	r3, [r7, #12]
  return(result);
 8068f62:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8068f64:	2b00      	cmp	r3, #0
 8068f66:	d003      	beq.n	8068f70 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8068f68:	f06f 0305 	mvn.w	r3, #5
 8068f6c:	617b      	str	r3, [r7, #20]
 8068f6e:	e00e      	b.n	8068f8e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8068f70:	693b      	ldr	r3, [r7, #16]
 8068f72:	2b00      	cmp	r3, #0
 8068f74:	d103      	bne.n	8068f7e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8068f76:	f06f 0303 	mvn.w	r3, #3
 8068f7a:	617b      	str	r3, [r7, #20]
 8068f7c:	e007      	b.n	8068f8e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8068f7e:	6938      	ldr	r0, [r7, #16]
 8068f80:	f001 fa8a 	bl	806a498 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8068f84:	2300      	movs	r3, #0
 8068f86:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8068f88:	6938      	ldr	r0, [r7, #16]
 8068f8a:	f001 f90f 	bl	806a1ac <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8068f8e:	697b      	ldr	r3, [r7, #20]
}
 8068f90:	4618      	mov	r0, r3
 8068f92:	3718      	adds	r7, #24
 8068f94:	46bd      	mov	sp, r7
 8068f96:	bd80      	pop	{r7, pc}

08068f98 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8068f98:	b580      	push	{r7, lr}
 8068f9a:	b08a      	sub	sp, #40	; 0x28
 8068f9c:	af02      	add	r7, sp, #8
 8068f9e:	60f8      	str	r0, [r7, #12]
 8068fa0:	60b9      	str	r1, [r7, #8]
 8068fa2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8068fa4:	2300      	movs	r3, #0
 8068fa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8068fa8:	f3ef 8305 	mrs	r3, IPSR
 8068fac:	613b      	str	r3, [r7, #16]
  return(result);
 8068fae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8068fb0:	2b00      	cmp	r3, #0
 8068fb2:	d15f      	bne.n	8069074 <osMessageQueueNew+0xdc>
 8068fb4:	68fb      	ldr	r3, [r7, #12]
 8068fb6:	2b00      	cmp	r3, #0
 8068fb8:	d05c      	beq.n	8069074 <osMessageQueueNew+0xdc>
 8068fba:	68bb      	ldr	r3, [r7, #8]
 8068fbc:	2b00      	cmp	r3, #0
 8068fbe:	d059      	beq.n	8069074 <osMessageQueueNew+0xdc>
    mem = -1;
 8068fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8068fc4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8068fc6:	687b      	ldr	r3, [r7, #4]
 8068fc8:	2b00      	cmp	r3, #0
 8068fca:	d029      	beq.n	8069020 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8068fcc:	687b      	ldr	r3, [r7, #4]
 8068fce:	689b      	ldr	r3, [r3, #8]
 8068fd0:	2b00      	cmp	r3, #0
 8068fd2:	d012      	beq.n	8068ffa <osMessageQueueNew+0x62>
 8068fd4:	687b      	ldr	r3, [r7, #4]
 8068fd6:	68db      	ldr	r3, [r3, #12]
 8068fd8:	2b4f      	cmp	r3, #79	; 0x4f
 8068fda:	d90e      	bls.n	8068ffa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8068fdc:	687b      	ldr	r3, [r7, #4]
 8068fde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8068fe0:	2b00      	cmp	r3, #0
 8068fe2:	d00a      	beq.n	8068ffa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8068fe4:	687b      	ldr	r3, [r7, #4]
 8068fe6:	695a      	ldr	r2, [r3, #20]
 8068fe8:	68fb      	ldr	r3, [r7, #12]
 8068fea:	68b9      	ldr	r1, [r7, #8]
 8068fec:	fb01 f303 	mul.w	r3, r1, r3
 8068ff0:	429a      	cmp	r2, r3
 8068ff2:	d302      	bcc.n	8068ffa <osMessageQueueNew+0x62>
        mem = 1;
 8068ff4:	2301      	movs	r3, #1
 8068ff6:	61bb      	str	r3, [r7, #24]
 8068ff8:	e014      	b.n	8069024 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8068ffa:	687b      	ldr	r3, [r7, #4]
 8068ffc:	689b      	ldr	r3, [r3, #8]
 8068ffe:	2b00      	cmp	r3, #0
 8069000:	d110      	bne.n	8069024 <osMessageQueueNew+0x8c>
 8069002:	687b      	ldr	r3, [r7, #4]
 8069004:	68db      	ldr	r3, [r3, #12]
 8069006:	2b00      	cmp	r3, #0
 8069008:	d10c      	bne.n	8069024 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 806900a:	687b      	ldr	r3, [r7, #4]
 806900c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 806900e:	2b00      	cmp	r3, #0
 8069010:	d108      	bne.n	8069024 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8069012:	687b      	ldr	r3, [r7, #4]
 8069014:	695b      	ldr	r3, [r3, #20]
 8069016:	2b00      	cmp	r3, #0
 8069018:	d104      	bne.n	8069024 <osMessageQueueNew+0x8c>
          mem = 0;
 806901a:	2300      	movs	r3, #0
 806901c:	61bb      	str	r3, [r7, #24]
 806901e:	e001      	b.n	8069024 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8069020:	2300      	movs	r3, #0
 8069022:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8069024:	69bb      	ldr	r3, [r7, #24]
 8069026:	2b01      	cmp	r3, #1
 8069028:	d10b      	bne.n	8069042 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 806902a:	687b      	ldr	r3, [r7, #4]
 806902c:	691a      	ldr	r2, [r3, #16]
 806902e:	687b      	ldr	r3, [r7, #4]
 8069030:	689b      	ldr	r3, [r3, #8]
 8069032:	2100      	movs	r1, #0
 8069034:	9100      	str	r1, [sp, #0]
 8069036:	68b9      	ldr	r1, [r7, #8]
 8069038:	68f8      	ldr	r0, [r7, #12]
 806903a:	f000 fa2f 	bl	806949c <xQueueGenericCreateStatic>
 806903e:	61f8      	str	r0, [r7, #28]
 8069040:	e008      	b.n	8069054 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8069042:	69bb      	ldr	r3, [r7, #24]
 8069044:	2b00      	cmp	r3, #0
 8069046:	d105      	bne.n	8069054 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8069048:	2200      	movs	r2, #0
 806904a:	68b9      	ldr	r1, [r7, #8]
 806904c:	68f8      	ldr	r0, [r7, #12]
 806904e:	f000 fa9d 	bl	806958c <xQueueGenericCreate>
 8069052:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8069054:	69fb      	ldr	r3, [r7, #28]
 8069056:	2b00      	cmp	r3, #0
 8069058:	d00c      	beq.n	8069074 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 806905a:	687b      	ldr	r3, [r7, #4]
 806905c:	2b00      	cmp	r3, #0
 806905e:	d003      	beq.n	8069068 <osMessageQueueNew+0xd0>
        name = attr->name;
 8069060:	687b      	ldr	r3, [r7, #4]
 8069062:	681b      	ldr	r3, [r3, #0]
 8069064:	617b      	str	r3, [r7, #20]
 8069066:	e001      	b.n	806906c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8069068:	2300      	movs	r3, #0
 806906a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 806906c:	6979      	ldr	r1, [r7, #20]
 806906e:	69f8      	ldr	r0, [r7, #28]
 8069070:	f001 f9e8 	bl	806a444 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8069074:	69fb      	ldr	r3, [r7, #28]
}
 8069076:	4618      	mov	r0, r3
 8069078:	3720      	adds	r7, #32
 806907a:	46bd      	mov	sp, r7
 806907c:	bd80      	pop	{r7, pc}
	...

08069080 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8069080:	b580      	push	{r7, lr}
 8069082:	b088      	sub	sp, #32
 8069084:	af00      	add	r7, sp, #0
 8069086:	60f8      	str	r0, [r7, #12]
 8069088:	60b9      	str	r1, [r7, #8]
 806908a:	603b      	str	r3, [r7, #0]
 806908c:	4613      	mov	r3, r2
 806908e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8069090:	68fb      	ldr	r3, [r7, #12]
 8069092:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8069094:	2300      	movs	r3, #0
 8069096:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8069098:	f3ef 8305 	mrs	r3, IPSR
 806909c:	617b      	str	r3, [r7, #20]
  return(result);
 806909e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80690a0:	2b00      	cmp	r3, #0
 80690a2:	d028      	beq.n	80690f6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80690a4:	69bb      	ldr	r3, [r7, #24]
 80690a6:	2b00      	cmp	r3, #0
 80690a8:	d005      	beq.n	80690b6 <osMessageQueuePut+0x36>
 80690aa:	68bb      	ldr	r3, [r7, #8]
 80690ac:	2b00      	cmp	r3, #0
 80690ae:	d002      	beq.n	80690b6 <osMessageQueuePut+0x36>
 80690b0:	683b      	ldr	r3, [r7, #0]
 80690b2:	2b00      	cmp	r3, #0
 80690b4:	d003      	beq.n	80690be <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80690b6:	f06f 0303 	mvn.w	r3, #3
 80690ba:	61fb      	str	r3, [r7, #28]
 80690bc:	e038      	b.n	8069130 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80690be:	2300      	movs	r3, #0
 80690c0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80690c2:	f107 0210 	add.w	r2, r7, #16
 80690c6:	2300      	movs	r3, #0
 80690c8:	68b9      	ldr	r1, [r7, #8]
 80690ca:	69b8      	ldr	r0, [r7, #24]
 80690cc:	f000 fcda 	bl	8069a84 <xQueueGenericSendFromISR>
 80690d0:	4603      	mov	r3, r0
 80690d2:	2b01      	cmp	r3, #1
 80690d4:	d003      	beq.n	80690de <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80690d6:	f06f 0302 	mvn.w	r3, #2
 80690da:	61fb      	str	r3, [r7, #28]
 80690dc:	e028      	b.n	8069130 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80690de:	693b      	ldr	r3, [r7, #16]
 80690e0:	2b00      	cmp	r3, #0
 80690e2:	d025      	beq.n	8069130 <osMessageQueuePut+0xb0>
 80690e4:	4b15      	ldr	r3, [pc, #84]	; (806913c <osMessageQueuePut+0xbc>)
 80690e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80690ea:	601a      	str	r2, [r3, #0]
 80690ec:	f3bf 8f4f 	dsb	sy
 80690f0:	f3bf 8f6f 	isb	sy
 80690f4:	e01c      	b.n	8069130 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80690f6:	69bb      	ldr	r3, [r7, #24]
 80690f8:	2b00      	cmp	r3, #0
 80690fa:	d002      	beq.n	8069102 <osMessageQueuePut+0x82>
 80690fc:	68bb      	ldr	r3, [r7, #8]
 80690fe:	2b00      	cmp	r3, #0
 8069100:	d103      	bne.n	806910a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8069102:	f06f 0303 	mvn.w	r3, #3
 8069106:	61fb      	str	r3, [r7, #28]
 8069108:	e012      	b.n	8069130 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 806910a:	2300      	movs	r3, #0
 806910c:	683a      	ldr	r2, [r7, #0]
 806910e:	68b9      	ldr	r1, [r7, #8]
 8069110:	69b8      	ldr	r0, [r7, #24]
 8069112:	f000 fbb9 	bl	8069888 <xQueueGenericSend>
 8069116:	4603      	mov	r3, r0
 8069118:	2b01      	cmp	r3, #1
 806911a:	d009      	beq.n	8069130 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 806911c:	683b      	ldr	r3, [r7, #0]
 806911e:	2b00      	cmp	r3, #0
 8069120:	d003      	beq.n	806912a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8069122:	f06f 0301 	mvn.w	r3, #1
 8069126:	61fb      	str	r3, [r7, #28]
 8069128:	e002      	b.n	8069130 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 806912a:	f06f 0302 	mvn.w	r3, #2
 806912e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8069130:	69fb      	ldr	r3, [r7, #28]
}
 8069132:	4618      	mov	r0, r3
 8069134:	3720      	adds	r7, #32
 8069136:	46bd      	mov	sp, r7
 8069138:	bd80      	pop	{r7, pc}
 806913a:	bf00      	nop
 806913c:	e000ed04 	.word	0xe000ed04

08069140 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8069140:	b580      	push	{r7, lr}
 8069142:	b088      	sub	sp, #32
 8069144:	af00      	add	r7, sp, #0
 8069146:	60f8      	str	r0, [r7, #12]
 8069148:	60b9      	str	r1, [r7, #8]
 806914a:	607a      	str	r2, [r7, #4]
 806914c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 806914e:	68fb      	ldr	r3, [r7, #12]
 8069150:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8069152:	2300      	movs	r3, #0
 8069154:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8069156:	f3ef 8305 	mrs	r3, IPSR
 806915a:	617b      	str	r3, [r7, #20]
  return(result);
 806915c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 806915e:	2b00      	cmp	r3, #0
 8069160:	d028      	beq.n	80691b4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8069162:	69bb      	ldr	r3, [r7, #24]
 8069164:	2b00      	cmp	r3, #0
 8069166:	d005      	beq.n	8069174 <osMessageQueueGet+0x34>
 8069168:	68bb      	ldr	r3, [r7, #8]
 806916a:	2b00      	cmp	r3, #0
 806916c:	d002      	beq.n	8069174 <osMessageQueueGet+0x34>
 806916e:	683b      	ldr	r3, [r7, #0]
 8069170:	2b00      	cmp	r3, #0
 8069172:	d003      	beq.n	806917c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8069174:	f06f 0303 	mvn.w	r3, #3
 8069178:	61fb      	str	r3, [r7, #28]
 806917a:	e037      	b.n	80691ec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 806917c:	2300      	movs	r3, #0
 806917e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8069180:	f107 0310 	add.w	r3, r7, #16
 8069184:	461a      	mov	r2, r3
 8069186:	68b9      	ldr	r1, [r7, #8]
 8069188:	69b8      	ldr	r0, [r7, #24]
 806918a:	f000 ff8f 	bl	806a0ac <xQueueReceiveFromISR>
 806918e:	4603      	mov	r3, r0
 8069190:	2b01      	cmp	r3, #1
 8069192:	d003      	beq.n	806919c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8069194:	f06f 0302 	mvn.w	r3, #2
 8069198:	61fb      	str	r3, [r7, #28]
 806919a:	e027      	b.n	80691ec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 806919c:	693b      	ldr	r3, [r7, #16]
 806919e:	2b00      	cmp	r3, #0
 80691a0:	d024      	beq.n	80691ec <osMessageQueueGet+0xac>
 80691a2:	4b15      	ldr	r3, [pc, #84]	; (80691f8 <osMessageQueueGet+0xb8>)
 80691a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80691a8:	601a      	str	r2, [r3, #0]
 80691aa:	f3bf 8f4f 	dsb	sy
 80691ae:	f3bf 8f6f 	isb	sy
 80691b2:	e01b      	b.n	80691ec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80691b4:	69bb      	ldr	r3, [r7, #24]
 80691b6:	2b00      	cmp	r3, #0
 80691b8:	d002      	beq.n	80691c0 <osMessageQueueGet+0x80>
 80691ba:	68bb      	ldr	r3, [r7, #8]
 80691bc:	2b00      	cmp	r3, #0
 80691be:	d103      	bne.n	80691c8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80691c0:	f06f 0303 	mvn.w	r3, #3
 80691c4:	61fb      	str	r3, [r7, #28]
 80691c6:	e011      	b.n	80691ec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80691c8:	683a      	ldr	r2, [r7, #0]
 80691ca:	68b9      	ldr	r1, [r7, #8]
 80691cc:	69b8      	ldr	r0, [r7, #24]
 80691ce:	f000 fd81 	bl	8069cd4 <xQueueReceive>
 80691d2:	4603      	mov	r3, r0
 80691d4:	2b01      	cmp	r3, #1
 80691d6:	d009      	beq.n	80691ec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80691d8:	683b      	ldr	r3, [r7, #0]
 80691da:	2b00      	cmp	r3, #0
 80691dc:	d003      	beq.n	80691e6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80691de:	f06f 0301 	mvn.w	r3, #1
 80691e2:	61fb      	str	r3, [r7, #28]
 80691e4:	e002      	b.n	80691ec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80691e6:	f06f 0302 	mvn.w	r3, #2
 80691ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80691ec:	69fb      	ldr	r3, [r7, #28]
}
 80691ee:	4618      	mov	r0, r3
 80691f0:	3720      	adds	r7, #32
 80691f2:	46bd      	mov	sp, r7
 80691f4:	bd80      	pop	{r7, pc}
 80691f6:	bf00      	nop
 80691f8:	e000ed04 	.word	0xe000ed04

080691fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80691fc:	b480      	push	{r7}
 80691fe:	b085      	sub	sp, #20
 8069200:	af00      	add	r7, sp, #0
 8069202:	60f8      	str	r0, [r7, #12]
 8069204:	60b9      	str	r1, [r7, #8]
 8069206:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8069208:	68fb      	ldr	r3, [r7, #12]
 806920a:	4a07      	ldr	r2, [pc, #28]	; (8069228 <vApplicationGetIdleTaskMemory+0x2c>)
 806920c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 806920e:	68bb      	ldr	r3, [r7, #8]
 8069210:	4a06      	ldr	r2, [pc, #24]	; (806922c <vApplicationGetIdleTaskMemory+0x30>)
 8069212:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8069214:	687b      	ldr	r3, [r7, #4]
 8069216:	2280      	movs	r2, #128	; 0x80
 8069218:	601a      	str	r2, [r3, #0]
}
 806921a:	bf00      	nop
 806921c:	3714      	adds	r7, #20
 806921e:	46bd      	mov	sp, r7
 8069220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069224:	4770      	bx	lr
 8069226:	bf00      	nop
 8069228:	200001e8 	.word	0x200001e8
 806922c:	200002a4 	.word	0x200002a4

08069230 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8069230:	b480      	push	{r7}
 8069232:	b085      	sub	sp, #20
 8069234:	af00      	add	r7, sp, #0
 8069236:	60f8      	str	r0, [r7, #12]
 8069238:	60b9      	str	r1, [r7, #8]
 806923a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 806923c:	68fb      	ldr	r3, [r7, #12]
 806923e:	4a07      	ldr	r2, [pc, #28]	; (806925c <vApplicationGetTimerTaskMemory+0x2c>)
 8069240:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8069242:	68bb      	ldr	r3, [r7, #8]
 8069244:	4a06      	ldr	r2, [pc, #24]	; (8069260 <vApplicationGetTimerTaskMemory+0x30>)
 8069246:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8069248:	687b      	ldr	r3, [r7, #4]
 806924a:	f44f 7280 	mov.w	r2, #256	; 0x100
 806924e:	601a      	str	r2, [r3, #0]
}
 8069250:	bf00      	nop
 8069252:	3714      	adds	r7, #20
 8069254:	46bd      	mov	sp, r7
 8069256:	f85d 7b04 	ldr.w	r7, [sp], #4
 806925a:	4770      	bx	lr
 806925c:	200004a4 	.word	0x200004a4
 8069260:	20000560 	.word	0x20000560

08069264 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8069264:	b480      	push	{r7}
 8069266:	b083      	sub	sp, #12
 8069268:	af00      	add	r7, sp, #0
 806926a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806926c:	687b      	ldr	r3, [r7, #4]
 806926e:	f103 0208 	add.w	r2, r3, #8
 8069272:	687b      	ldr	r3, [r7, #4]
 8069274:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8069276:	687b      	ldr	r3, [r7, #4]
 8069278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806927c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806927e:	687b      	ldr	r3, [r7, #4]
 8069280:	f103 0208 	add.w	r2, r3, #8
 8069284:	687b      	ldr	r3, [r7, #4]
 8069286:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8069288:	687b      	ldr	r3, [r7, #4]
 806928a:	f103 0208 	add.w	r2, r3, #8
 806928e:	687b      	ldr	r3, [r7, #4]
 8069290:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8069292:	687b      	ldr	r3, [r7, #4]
 8069294:	2200      	movs	r2, #0
 8069296:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8069298:	bf00      	nop
 806929a:	370c      	adds	r7, #12
 806929c:	46bd      	mov	sp, r7
 806929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80692a2:	4770      	bx	lr

080692a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80692a4:	b480      	push	{r7}
 80692a6:	b083      	sub	sp, #12
 80692a8:	af00      	add	r7, sp, #0
 80692aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80692ac:	687b      	ldr	r3, [r7, #4]
 80692ae:	2200      	movs	r2, #0
 80692b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80692b2:	bf00      	nop
 80692b4:	370c      	adds	r7, #12
 80692b6:	46bd      	mov	sp, r7
 80692b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80692bc:	4770      	bx	lr

080692be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80692be:	b480      	push	{r7}
 80692c0:	b085      	sub	sp, #20
 80692c2:	af00      	add	r7, sp, #0
 80692c4:	6078      	str	r0, [r7, #4]
 80692c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80692c8:	687b      	ldr	r3, [r7, #4]
 80692ca:	685b      	ldr	r3, [r3, #4]
 80692cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80692ce:	683b      	ldr	r3, [r7, #0]
 80692d0:	68fa      	ldr	r2, [r7, #12]
 80692d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80692d4:	68fb      	ldr	r3, [r7, #12]
 80692d6:	689a      	ldr	r2, [r3, #8]
 80692d8:	683b      	ldr	r3, [r7, #0]
 80692da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80692dc:	68fb      	ldr	r3, [r7, #12]
 80692de:	689b      	ldr	r3, [r3, #8]
 80692e0:	683a      	ldr	r2, [r7, #0]
 80692e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80692e4:	68fb      	ldr	r3, [r7, #12]
 80692e6:	683a      	ldr	r2, [r7, #0]
 80692e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80692ea:	683b      	ldr	r3, [r7, #0]
 80692ec:	687a      	ldr	r2, [r7, #4]
 80692ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80692f0:	687b      	ldr	r3, [r7, #4]
 80692f2:	681b      	ldr	r3, [r3, #0]
 80692f4:	1c5a      	adds	r2, r3, #1
 80692f6:	687b      	ldr	r3, [r7, #4]
 80692f8:	601a      	str	r2, [r3, #0]
}
 80692fa:	bf00      	nop
 80692fc:	3714      	adds	r7, #20
 80692fe:	46bd      	mov	sp, r7
 8069300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069304:	4770      	bx	lr

08069306 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8069306:	b480      	push	{r7}
 8069308:	b085      	sub	sp, #20
 806930a:	af00      	add	r7, sp, #0
 806930c:	6078      	str	r0, [r7, #4]
 806930e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8069310:	683b      	ldr	r3, [r7, #0]
 8069312:	681b      	ldr	r3, [r3, #0]
 8069314:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8069316:	68bb      	ldr	r3, [r7, #8]
 8069318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806931c:	d103      	bne.n	8069326 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 806931e:	687b      	ldr	r3, [r7, #4]
 8069320:	691b      	ldr	r3, [r3, #16]
 8069322:	60fb      	str	r3, [r7, #12]
 8069324:	e00c      	b.n	8069340 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8069326:	687b      	ldr	r3, [r7, #4]
 8069328:	3308      	adds	r3, #8
 806932a:	60fb      	str	r3, [r7, #12]
 806932c:	e002      	b.n	8069334 <vListInsert+0x2e>
 806932e:	68fb      	ldr	r3, [r7, #12]
 8069330:	685b      	ldr	r3, [r3, #4]
 8069332:	60fb      	str	r3, [r7, #12]
 8069334:	68fb      	ldr	r3, [r7, #12]
 8069336:	685b      	ldr	r3, [r3, #4]
 8069338:	681b      	ldr	r3, [r3, #0]
 806933a:	68ba      	ldr	r2, [r7, #8]
 806933c:	429a      	cmp	r2, r3
 806933e:	d2f6      	bcs.n	806932e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8069340:	68fb      	ldr	r3, [r7, #12]
 8069342:	685a      	ldr	r2, [r3, #4]
 8069344:	683b      	ldr	r3, [r7, #0]
 8069346:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8069348:	683b      	ldr	r3, [r7, #0]
 806934a:	685b      	ldr	r3, [r3, #4]
 806934c:	683a      	ldr	r2, [r7, #0]
 806934e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8069350:	683b      	ldr	r3, [r7, #0]
 8069352:	68fa      	ldr	r2, [r7, #12]
 8069354:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8069356:	68fb      	ldr	r3, [r7, #12]
 8069358:	683a      	ldr	r2, [r7, #0]
 806935a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 806935c:	683b      	ldr	r3, [r7, #0]
 806935e:	687a      	ldr	r2, [r7, #4]
 8069360:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8069362:	687b      	ldr	r3, [r7, #4]
 8069364:	681b      	ldr	r3, [r3, #0]
 8069366:	1c5a      	adds	r2, r3, #1
 8069368:	687b      	ldr	r3, [r7, #4]
 806936a:	601a      	str	r2, [r3, #0]
}
 806936c:	bf00      	nop
 806936e:	3714      	adds	r7, #20
 8069370:	46bd      	mov	sp, r7
 8069372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069376:	4770      	bx	lr

08069378 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8069378:	b480      	push	{r7}
 806937a:	b085      	sub	sp, #20
 806937c:	af00      	add	r7, sp, #0
 806937e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8069380:	687b      	ldr	r3, [r7, #4]
 8069382:	691b      	ldr	r3, [r3, #16]
 8069384:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8069386:	687b      	ldr	r3, [r7, #4]
 8069388:	685b      	ldr	r3, [r3, #4]
 806938a:	687a      	ldr	r2, [r7, #4]
 806938c:	6892      	ldr	r2, [r2, #8]
 806938e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8069390:	687b      	ldr	r3, [r7, #4]
 8069392:	689b      	ldr	r3, [r3, #8]
 8069394:	687a      	ldr	r2, [r7, #4]
 8069396:	6852      	ldr	r2, [r2, #4]
 8069398:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 806939a:	68fb      	ldr	r3, [r7, #12]
 806939c:	685b      	ldr	r3, [r3, #4]
 806939e:	687a      	ldr	r2, [r7, #4]
 80693a0:	429a      	cmp	r2, r3
 80693a2:	d103      	bne.n	80693ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80693a4:	687b      	ldr	r3, [r7, #4]
 80693a6:	689a      	ldr	r2, [r3, #8]
 80693a8:	68fb      	ldr	r3, [r7, #12]
 80693aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80693ac:	687b      	ldr	r3, [r7, #4]
 80693ae:	2200      	movs	r2, #0
 80693b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80693b2:	68fb      	ldr	r3, [r7, #12]
 80693b4:	681b      	ldr	r3, [r3, #0]
 80693b6:	1e5a      	subs	r2, r3, #1
 80693b8:	68fb      	ldr	r3, [r7, #12]
 80693ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80693bc:	68fb      	ldr	r3, [r7, #12]
 80693be:	681b      	ldr	r3, [r3, #0]
}
 80693c0:	4618      	mov	r0, r3
 80693c2:	3714      	adds	r7, #20
 80693c4:	46bd      	mov	sp, r7
 80693c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80693ca:	4770      	bx	lr

080693cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80693cc:	b580      	push	{r7, lr}
 80693ce:	b084      	sub	sp, #16
 80693d0:	af00      	add	r7, sp, #0
 80693d2:	6078      	str	r0, [r7, #4]
 80693d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80693d6:	687b      	ldr	r3, [r7, #4]
 80693d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80693da:	68fb      	ldr	r3, [r7, #12]
 80693dc:	2b00      	cmp	r3, #0
 80693de:	d10a      	bne.n	80693f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80693e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80693e4:	f383 8811 	msr	BASEPRI, r3
 80693e8:	f3bf 8f6f 	isb	sy
 80693ec:	f3bf 8f4f 	dsb	sy
 80693f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80693f2:	bf00      	nop
 80693f4:	e7fe      	b.n	80693f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80693f6:	f002 fe15 	bl	806c024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80693fa:	68fb      	ldr	r3, [r7, #12]
 80693fc:	681a      	ldr	r2, [r3, #0]
 80693fe:	68fb      	ldr	r3, [r7, #12]
 8069400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8069402:	68f9      	ldr	r1, [r7, #12]
 8069404:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8069406:	fb01 f303 	mul.w	r3, r1, r3
 806940a:	441a      	add	r2, r3
 806940c:	68fb      	ldr	r3, [r7, #12]
 806940e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8069410:	68fb      	ldr	r3, [r7, #12]
 8069412:	2200      	movs	r2, #0
 8069414:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8069416:	68fb      	ldr	r3, [r7, #12]
 8069418:	681a      	ldr	r2, [r3, #0]
 806941a:	68fb      	ldr	r3, [r7, #12]
 806941c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806941e:	68fb      	ldr	r3, [r7, #12]
 8069420:	681a      	ldr	r2, [r3, #0]
 8069422:	68fb      	ldr	r3, [r7, #12]
 8069424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8069426:	3b01      	subs	r3, #1
 8069428:	68f9      	ldr	r1, [r7, #12]
 806942a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 806942c:	fb01 f303 	mul.w	r3, r1, r3
 8069430:	441a      	add	r2, r3
 8069432:	68fb      	ldr	r3, [r7, #12]
 8069434:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8069436:	68fb      	ldr	r3, [r7, #12]
 8069438:	22ff      	movs	r2, #255	; 0xff
 806943a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 806943e:	68fb      	ldr	r3, [r7, #12]
 8069440:	22ff      	movs	r2, #255	; 0xff
 8069442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8069446:	683b      	ldr	r3, [r7, #0]
 8069448:	2b00      	cmp	r3, #0
 806944a:	d114      	bne.n	8069476 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806944c:	68fb      	ldr	r3, [r7, #12]
 806944e:	691b      	ldr	r3, [r3, #16]
 8069450:	2b00      	cmp	r3, #0
 8069452:	d01a      	beq.n	806948a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8069454:	68fb      	ldr	r3, [r7, #12]
 8069456:	3310      	adds	r3, #16
 8069458:	4618      	mov	r0, r3
 806945a:	f001 fd01 	bl	806ae60 <xTaskRemoveFromEventList>
 806945e:	4603      	mov	r3, r0
 8069460:	2b00      	cmp	r3, #0
 8069462:	d012      	beq.n	806948a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8069464:	4b0c      	ldr	r3, [pc, #48]	; (8069498 <xQueueGenericReset+0xcc>)
 8069466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806946a:	601a      	str	r2, [r3, #0]
 806946c:	f3bf 8f4f 	dsb	sy
 8069470:	f3bf 8f6f 	isb	sy
 8069474:	e009      	b.n	806948a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8069476:	68fb      	ldr	r3, [r7, #12]
 8069478:	3310      	adds	r3, #16
 806947a:	4618      	mov	r0, r3
 806947c:	f7ff fef2 	bl	8069264 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8069480:	68fb      	ldr	r3, [r7, #12]
 8069482:	3324      	adds	r3, #36	; 0x24
 8069484:	4618      	mov	r0, r3
 8069486:	f7ff feed 	bl	8069264 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 806948a:	f002 fdfb 	bl	806c084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 806948e:	2301      	movs	r3, #1
}
 8069490:	4618      	mov	r0, r3
 8069492:	3710      	adds	r7, #16
 8069494:	46bd      	mov	sp, r7
 8069496:	bd80      	pop	{r7, pc}
 8069498:	e000ed04 	.word	0xe000ed04

0806949c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 806949c:	b580      	push	{r7, lr}
 806949e:	b08e      	sub	sp, #56	; 0x38
 80694a0:	af02      	add	r7, sp, #8
 80694a2:	60f8      	str	r0, [r7, #12]
 80694a4:	60b9      	str	r1, [r7, #8]
 80694a6:	607a      	str	r2, [r7, #4]
 80694a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80694aa:	68fb      	ldr	r3, [r7, #12]
 80694ac:	2b00      	cmp	r3, #0
 80694ae:	d10a      	bne.n	80694c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80694b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80694b4:	f383 8811 	msr	BASEPRI, r3
 80694b8:	f3bf 8f6f 	isb	sy
 80694bc:	f3bf 8f4f 	dsb	sy
 80694c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80694c2:	bf00      	nop
 80694c4:	e7fe      	b.n	80694c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80694c6:	683b      	ldr	r3, [r7, #0]
 80694c8:	2b00      	cmp	r3, #0
 80694ca:	d10a      	bne.n	80694e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80694cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80694d0:	f383 8811 	msr	BASEPRI, r3
 80694d4:	f3bf 8f6f 	isb	sy
 80694d8:	f3bf 8f4f 	dsb	sy
 80694dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80694de:	bf00      	nop
 80694e0:	e7fe      	b.n	80694e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80694e2:	687b      	ldr	r3, [r7, #4]
 80694e4:	2b00      	cmp	r3, #0
 80694e6:	d002      	beq.n	80694ee <xQueueGenericCreateStatic+0x52>
 80694e8:	68bb      	ldr	r3, [r7, #8]
 80694ea:	2b00      	cmp	r3, #0
 80694ec:	d001      	beq.n	80694f2 <xQueueGenericCreateStatic+0x56>
 80694ee:	2301      	movs	r3, #1
 80694f0:	e000      	b.n	80694f4 <xQueueGenericCreateStatic+0x58>
 80694f2:	2300      	movs	r3, #0
 80694f4:	2b00      	cmp	r3, #0
 80694f6:	d10a      	bne.n	806950e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80694f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80694fc:	f383 8811 	msr	BASEPRI, r3
 8069500:	f3bf 8f6f 	isb	sy
 8069504:	f3bf 8f4f 	dsb	sy
 8069508:	623b      	str	r3, [r7, #32]
}
 806950a:	bf00      	nop
 806950c:	e7fe      	b.n	806950c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 806950e:	687b      	ldr	r3, [r7, #4]
 8069510:	2b00      	cmp	r3, #0
 8069512:	d102      	bne.n	806951a <xQueueGenericCreateStatic+0x7e>
 8069514:	68bb      	ldr	r3, [r7, #8]
 8069516:	2b00      	cmp	r3, #0
 8069518:	d101      	bne.n	806951e <xQueueGenericCreateStatic+0x82>
 806951a:	2301      	movs	r3, #1
 806951c:	e000      	b.n	8069520 <xQueueGenericCreateStatic+0x84>
 806951e:	2300      	movs	r3, #0
 8069520:	2b00      	cmp	r3, #0
 8069522:	d10a      	bne.n	806953a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8069524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069528:	f383 8811 	msr	BASEPRI, r3
 806952c:	f3bf 8f6f 	isb	sy
 8069530:	f3bf 8f4f 	dsb	sy
 8069534:	61fb      	str	r3, [r7, #28]
}
 8069536:	bf00      	nop
 8069538:	e7fe      	b.n	8069538 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 806953a:	2350      	movs	r3, #80	; 0x50
 806953c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 806953e:	697b      	ldr	r3, [r7, #20]
 8069540:	2b50      	cmp	r3, #80	; 0x50
 8069542:	d00a      	beq.n	806955a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8069544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069548:	f383 8811 	msr	BASEPRI, r3
 806954c:	f3bf 8f6f 	isb	sy
 8069550:	f3bf 8f4f 	dsb	sy
 8069554:	61bb      	str	r3, [r7, #24]
}
 8069556:	bf00      	nop
 8069558:	e7fe      	b.n	8069558 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 806955a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 806955c:	683b      	ldr	r3, [r7, #0]
 806955e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8069560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069562:	2b00      	cmp	r3, #0
 8069564:	d00d      	beq.n	8069582 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8069566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069568:	2201      	movs	r2, #1
 806956a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 806956e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8069572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069574:	9300      	str	r3, [sp, #0]
 8069576:	4613      	mov	r3, r2
 8069578:	687a      	ldr	r2, [r7, #4]
 806957a:	68b9      	ldr	r1, [r7, #8]
 806957c:	68f8      	ldr	r0, [r7, #12]
 806957e:	f000 f83f 	bl	8069600 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8069582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8069584:	4618      	mov	r0, r3
 8069586:	3730      	adds	r7, #48	; 0x30
 8069588:	46bd      	mov	sp, r7
 806958a:	bd80      	pop	{r7, pc}

0806958c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 806958c:	b580      	push	{r7, lr}
 806958e:	b08a      	sub	sp, #40	; 0x28
 8069590:	af02      	add	r7, sp, #8
 8069592:	60f8      	str	r0, [r7, #12]
 8069594:	60b9      	str	r1, [r7, #8]
 8069596:	4613      	mov	r3, r2
 8069598:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 806959a:	68fb      	ldr	r3, [r7, #12]
 806959c:	2b00      	cmp	r3, #0
 806959e:	d10a      	bne.n	80695b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80695a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80695a4:	f383 8811 	msr	BASEPRI, r3
 80695a8:	f3bf 8f6f 	isb	sy
 80695ac:	f3bf 8f4f 	dsb	sy
 80695b0:	613b      	str	r3, [r7, #16]
}
 80695b2:	bf00      	nop
 80695b4:	e7fe      	b.n	80695b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80695b6:	68fb      	ldr	r3, [r7, #12]
 80695b8:	68ba      	ldr	r2, [r7, #8]
 80695ba:	fb02 f303 	mul.w	r3, r2, r3
 80695be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80695c0:	69fb      	ldr	r3, [r7, #28]
 80695c2:	3350      	adds	r3, #80	; 0x50
 80695c4:	4618      	mov	r0, r3
 80695c6:	f002 fe4f 	bl	806c268 <pvPortMalloc>
 80695ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80695cc:	69bb      	ldr	r3, [r7, #24]
 80695ce:	2b00      	cmp	r3, #0
 80695d0:	d011      	beq.n	80695f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80695d2:	69bb      	ldr	r3, [r7, #24]
 80695d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80695d6:	697b      	ldr	r3, [r7, #20]
 80695d8:	3350      	adds	r3, #80	; 0x50
 80695da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80695dc:	69bb      	ldr	r3, [r7, #24]
 80695de:	2200      	movs	r2, #0
 80695e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80695e4:	79fa      	ldrb	r2, [r7, #7]
 80695e6:	69bb      	ldr	r3, [r7, #24]
 80695e8:	9300      	str	r3, [sp, #0]
 80695ea:	4613      	mov	r3, r2
 80695ec:	697a      	ldr	r2, [r7, #20]
 80695ee:	68b9      	ldr	r1, [r7, #8]
 80695f0:	68f8      	ldr	r0, [r7, #12]
 80695f2:	f000 f805 	bl	8069600 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80695f6:	69bb      	ldr	r3, [r7, #24]
	}
 80695f8:	4618      	mov	r0, r3
 80695fa:	3720      	adds	r7, #32
 80695fc:	46bd      	mov	sp, r7
 80695fe:	bd80      	pop	{r7, pc}

08069600 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8069600:	b580      	push	{r7, lr}
 8069602:	b084      	sub	sp, #16
 8069604:	af00      	add	r7, sp, #0
 8069606:	60f8      	str	r0, [r7, #12]
 8069608:	60b9      	str	r1, [r7, #8]
 806960a:	607a      	str	r2, [r7, #4]
 806960c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 806960e:	68bb      	ldr	r3, [r7, #8]
 8069610:	2b00      	cmp	r3, #0
 8069612:	d103      	bne.n	806961c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8069614:	69bb      	ldr	r3, [r7, #24]
 8069616:	69ba      	ldr	r2, [r7, #24]
 8069618:	601a      	str	r2, [r3, #0]
 806961a:	e002      	b.n	8069622 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 806961c:	69bb      	ldr	r3, [r7, #24]
 806961e:	687a      	ldr	r2, [r7, #4]
 8069620:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8069622:	69bb      	ldr	r3, [r7, #24]
 8069624:	68fa      	ldr	r2, [r7, #12]
 8069626:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8069628:	69bb      	ldr	r3, [r7, #24]
 806962a:	68ba      	ldr	r2, [r7, #8]
 806962c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 806962e:	2101      	movs	r1, #1
 8069630:	69b8      	ldr	r0, [r7, #24]
 8069632:	f7ff fecb 	bl	80693cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8069636:	69bb      	ldr	r3, [r7, #24]
 8069638:	78fa      	ldrb	r2, [r7, #3]
 806963a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 806963e:	bf00      	nop
 8069640:	3710      	adds	r7, #16
 8069642:	46bd      	mov	sp, r7
 8069644:	bd80      	pop	{r7, pc}

08069646 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8069646:	b580      	push	{r7, lr}
 8069648:	b082      	sub	sp, #8
 806964a:	af00      	add	r7, sp, #0
 806964c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 806964e:	687b      	ldr	r3, [r7, #4]
 8069650:	2b00      	cmp	r3, #0
 8069652:	d00e      	beq.n	8069672 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8069654:	687b      	ldr	r3, [r7, #4]
 8069656:	2200      	movs	r2, #0
 8069658:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 806965a:	687b      	ldr	r3, [r7, #4]
 806965c:	2200      	movs	r2, #0
 806965e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8069660:	687b      	ldr	r3, [r7, #4]
 8069662:	2200      	movs	r2, #0
 8069664:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8069666:	2300      	movs	r3, #0
 8069668:	2200      	movs	r2, #0
 806966a:	2100      	movs	r1, #0
 806966c:	6878      	ldr	r0, [r7, #4]
 806966e:	f000 f90b 	bl	8069888 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8069672:	bf00      	nop
 8069674:	3708      	adds	r7, #8
 8069676:	46bd      	mov	sp, r7
 8069678:	bd80      	pop	{r7, pc}

0806967a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 806967a:	b580      	push	{r7, lr}
 806967c:	b086      	sub	sp, #24
 806967e:	af00      	add	r7, sp, #0
 8069680:	4603      	mov	r3, r0
 8069682:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8069684:	2301      	movs	r3, #1
 8069686:	617b      	str	r3, [r7, #20]
 8069688:	2300      	movs	r3, #0
 806968a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 806968c:	79fb      	ldrb	r3, [r7, #7]
 806968e:	461a      	mov	r2, r3
 8069690:	6939      	ldr	r1, [r7, #16]
 8069692:	6978      	ldr	r0, [r7, #20]
 8069694:	f7ff ff7a 	bl	806958c <xQueueGenericCreate>
 8069698:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 806969a:	68f8      	ldr	r0, [r7, #12]
 806969c:	f7ff ffd3 	bl	8069646 <prvInitialiseMutex>

		return xNewQueue;
 80696a0:	68fb      	ldr	r3, [r7, #12]
	}
 80696a2:	4618      	mov	r0, r3
 80696a4:	3718      	adds	r7, #24
 80696a6:	46bd      	mov	sp, r7
 80696a8:	bd80      	pop	{r7, pc}

080696aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80696aa:	b580      	push	{r7, lr}
 80696ac:	b088      	sub	sp, #32
 80696ae:	af02      	add	r7, sp, #8
 80696b0:	4603      	mov	r3, r0
 80696b2:	6039      	str	r1, [r7, #0]
 80696b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80696b6:	2301      	movs	r3, #1
 80696b8:	617b      	str	r3, [r7, #20]
 80696ba:	2300      	movs	r3, #0
 80696bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80696be:	79fb      	ldrb	r3, [r7, #7]
 80696c0:	9300      	str	r3, [sp, #0]
 80696c2:	683b      	ldr	r3, [r7, #0]
 80696c4:	2200      	movs	r2, #0
 80696c6:	6939      	ldr	r1, [r7, #16]
 80696c8:	6978      	ldr	r0, [r7, #20]
 80696ca:	f7ff fee7 	bl	806949c <xQueueGenericCreateStatic>
 80696ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80696d0:	68f8      	ldr	r0, [r7, #12]
 80696d2:	f7ff ffb8 	bl	8069646 <prvInitialiseMutex>

		return xNewQueue;
 80696d6:	68fb      	ldr	r3, [r7, #12]
	}
 80696d8:	4618      	mov	r0, r3
 80696da:	3718      	adds	r7, #24
 80696dc:	46bd      	mov	sp, r7
 80696de:	bd80      	pop	{r7, pc}

080696e0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80696e0:	b590      	push	{r4, r7, lr}
 80696e2:	b087      	sub	sp, #28
 80696e4:	af00      	add	r7, sp, #0
 80696e6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80696e8:	687b      	ldr	r3, [r7, #4]
 80696ea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80696ec:	693b      	ldr	r3, [r7, #16]
 80696ee:	2b00      	cmp	r3, #0
 80696f0:	d10a      	bne.n	8069708 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80696f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80696f6:	f383 8811 	msr	BASEPRI, r3
 80696fa:	f3bf 8f6f 	isb	sy
 80696fe:	f3bf 8f4f 	dsb	sy
 8069702:	60fb      	str	r3, [r7, #12]
}
 8069704:	bf00      	nop
 8069706:	e7fe      	b.n	8069706 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8069708:	693b      	ldr	r3, [r7, #16]
 806970a:	689c      	ldr	r4, [r3, #8]
 806970c:	f001 fd6a 	bl	806b1e4 <xTaskGetCurrentTaskHandle>
 8069710:	4603      	mov	r3, r0
 8069712:	429c      	cmp	r4, r3
 8069714:	d111      	bne.n	806973a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8069716:	693b      	ldr	r3, [r7, #16]
 8069718:	68db      	ldr	r3, [r3, #12]
 806971a:	1e5a      	subs	r2, r3, #1
 806971c:	693b      	ldr	r3, [r7, #16]
 806971e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8069720:	693b      	ldr	r3, [r7, #16]
 8069722:	68db      	ldr	r3, [r3, #12]
 8069724:	2b00      	cmp	r3, #0
 8069726:	d105      	bne.n	8069734 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8069728:	2300      	movs	r3, #0
 806972a:	2200      	movs	r2, #0
 806972c:	2100      	movs	r1, #0
 806972e:	6938      	ldr	r0, [r7, #16]
 8069730:	f000 f8aa 	bl	8069888 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8069734:	2301      	movs	r3, #1
 8069736:	617b      	str	r3, [r7, #20]
 8069738:	e001      	b.n	806973e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 806973a:	2300      	movs	r3, #0
 806973c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 806973e:	697b      	ldr	r3, [r7, #20]
	}
 8069740:	4618      	mov	r0, r3
 8069742:	371c      	adds	r7, #28
 8069744:	46bd      	mov	sp, r7
 8069746:	bd90      	pop	{r4, r7, pc}

08069748 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8069748:	b590      	push	{r4, r7, lr}
 806974a:	b087      	sub	sp, #28
 806974c:	af00      	add	r7, sp, #0
 806974e:	6078      	str	r0, [r7, #4]
 8069750:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8069752:	687b      	ldr	r3, [r7, #4]
 8069754:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8069756:	693b      	ldr	r3, [r7, #16]
 8069758:	2b00      	cmp	r3, #0
 806975a:	d10a      	bne.n	8069772 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 806975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069760:	f383 8811 	msr	BASEPRI, r3
 8069764:	f3bf 8f6f 	isb	sy
 8069768:	f3bf 8f4f 	dsb	sy
 806976c:	60fb      	str	r3, [r7, #12]
}
 806976e:	bf00      	nop
 8069770:	e7fe      	b.n	8069770 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8069772:	693b      	ldr	r3, [r7, #16]
 8069774:	689c      	ldr	r4, [r3, #8]
 8069776:	f001 fd35 	bl	806b1e4 <xTaskGetCurrentTaskHandle>
 806977a:	4603      	mov	r3, r0
 806977c:	429c      	cmp	r4, r3
 806977e:	d107      	bne.n	8069790 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8069780:	693b      	ldr	r3, [r7, #16]
 8069782:	68db      	ldr	r3, [r3, #12]
 8069784:	1c5a      	adds	r2, r3, #1
 8069786:	693b      	ldr	r3, [r7, #16]
 8069788:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 806978a:	2301      	movs	r3, #1
 806978c:	617b      	str	r3, [r7, #20]
 806978e:	e00c      	b.n	80697aa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8069790:	6839      	ldr	r1, [r7, #0]
 8069792:	6938      	ldr	r0, [r7, #16]
 8069794:	f000 fb7e 	bl	8069e94 <xQueueSemaphoreTake>
 8069798:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 806979a:	697b      	ldr	r3, [r7, #20]
 806979c:	2b00      	cmp	r3, #0
 806979e:	d004      	beq.n	80697aa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80697a0:	693b      	ldr	r3, [r7, #16]
 80697a2:	68db      	ldr	r3, [r3, #12]
 80697a4:	1c5a      	adds	r2, r3, #1
 80697a6:	693b      	ldr	r3, [r7, #16]
 80697a8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80697aa:	697b      	ldr	r3, [r7, #20]
	}
 80697ac:	4618      	mov	r0, r3
 80697ae:	371c      	adds	r7, #28
 80697b0:	46bd      	mov	sp, r7
 80697b2:	bd90      	pop	{r4, r7, pc}

080697b4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80697b4:	b580      	push	{r7, lr}
 80697b6:	b08a      	sub	sp, #40	; 0x28
 80697b8:	af02      	add	r7, sp, #8
 80697ba:	60f8      	str	r0, [r7, #12]
 80697bc:	60b9      	str	r1, [r7, #8]
 80697be:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80697c0:	68fb      	ldr	r3, [r7, #12]
 80697c2:	2b00      	cmp	r3, #0
 80697c4:	d10a      	bne.n	80697dc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80697c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80697ca:	f383 8811 	msr	BASEPRI, r3
 80697ce:	f3bf 8f6f 	isb	sy
 80697d2:	f3bf 8f4f 	dsb	sy
 80697d6:	61bb      	str	r3, [r7, #24]
}
 80697d8:	bf00      	nop
 80697da:	e7fe      	b.n	80697da <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80697dc:	68ba      	ldr	r2, [r7, #8]
 80697de:	68fb      	ldr	r3, [r7, #12]
 80697e0:	429a      	cmp	r2, r3
 80697e2:	d90a      	bls.n	80697fa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80697e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80697e8:	f383 8811 	msr	BASEPRI, r3
 80697ec:	f3bf 8f6f 	isb	sy
 80697f0:	f3bf 8f4f 	dsb	sy
 80697f4:	617b      	str	r3, [r7, #20]
}
 80697f6:	bf00      	nop
 80697f8:	e7fe      	b.n	80697f8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80697fa:	2302      	movs	r3, #2
 80697fc:	9300      	str	r3, [sp, #0]
 80697fe:	687b      	ldr	r3, [r7, #4]
 8069800:	2200      	movs	r2, #0
 8069802:	2100      	movs	r1, #0
 8069804:	68f8      	ldr	r0, [r7, #12]
 8069806:	f7ff fe49 	bl	806949c <xQueueGenericCreateStatic>
 806980a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 806980c:	69fb      	ldr	r3, [r7, #28]
 806980e:	2b00      	cmp	r3, #0
 8069810:	d002      	beq.n	8069818 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8069812:	69fb      	ldr	r3, [r7, #28]
 8069814:	68ba      	ldr	r2, [r7, #8]
 8069816:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8069818:	69fb      	ldr	r3, [r7, #28]
	}
 806981a:	4618      	mov	r0, r3
 806981c:	3720      	adds	r7, #32
 806981e:	46bd      	mov	sp, r7
 8069820:	bd80      	pop	{r7, pc}

08069822 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8069822:	b580      	push	{r7, lr}
 8069824:	b086      	sub	sp, #24
 8069826:	af00      	add	r7, sp, #0
 8069828:	6078      	str	r0, [r7, #4]
 806982a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 806982c:	687b      	ldr	r3, [r7, #4]
 806982e:	2b00      	cmp	r3, #0
 8069830:	d10a      	bne.n	8069848 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8069832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069836:	f383 8811 	msr	BASEPRI, r3
 806983a:	f3bf 8f6f 	isb	sy
 806983e:	f3bf 8f4f 	dsb	sy
 8069842:	613b      	str	r3, [r7, #16]
}
 8069844:	bf00      	nop
 8069846:	e7fe      	b.n	8069846 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8069848:	683a      	ldr	r2, [r7, #0]
 806984a:	687b      	ldr	r3, [r7, #4]
 806984c:	429a      	cmp	r2, r3
 806984e:	d90a      	bls.n	8069866 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8069850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069854:	f383 8811 	msr	BASEPRI, r3
 8069858:	f3bf 8f6f 	isb	sy
 806985c:	f3bf 8f4f 	dsb	sy
 8069860:	60fb      	str	r3, [r7, #12]
}
 8069862:	bf00      	nop
 8069864:	e7fe      	b.n	8069864 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8069866:	2202      	movs	r2, #2
 8069868:	2100      	movs	r1, #0
 806986a:	6878      	ldr	r0, [r7, #4]
 806986c:	f7ff fe8e 	bl	806958c <xQueueGenericCreate>
 8069870:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8069872:	697b      	ldr	r3, [r7, #20]
 8069874:	2b00      	cmp	r3, #0
 8069876:	d002      	beq.n	806987e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8069878:	697b      	ldr	r3, [r7, #20]
 806987a:	683a      	ldr	r2, [r7, #0]
 806987c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 806987e:	697b      	ldr	r3, [r7, #20]
	}
 8069880:	4618      	mov	r0, r3
 8069882:	3718      	adds	r7, #24
 8069884:	46bd      	mov	sp, r7
 8069886:	bd80      	pop	{r7, pc}

08069888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8069888:	b580      	push	{r7, lr}
 806988a:	b08e      	sub	sp, #56	; 0x38
 806988c:	af00      	add	r7, sp, #0
 806988e:	60f8      	str	r0, [r7, #12]
 8069890:	60b9      	str	r1, [r7, #8]
 8069892:	607a      	str	r2, [r7, #4]
 8069894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8069896:	2300      	movs	r3, #0
 8069898:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806989a:	68fb      	ldr	r3, [r7, #12]
 806989c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 806989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80698a0:	2b00      	cmp	r3, #0
 80698a2:	d10a      	bne.n	80698ba <xQueueGenericSend+0x32>
	__asm volatile
 80698a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80698a8:	f383 8811 	msr	BASEPRI, r3
 80698ac:	f3bf 8f6f 	isb	sy
 80698b0:	f3bf 8f4f 	dsb	sy
 80698b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80698b6:	bf00      	nop
 80698b8:	e7fe      	b.n	80698b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80698ba:	68bb      	ldr	r3, [r7, #8]
 80698bc:	2b00      	cmp	r3, #0
 80698be:	d103      	bne.n	80698c8 <xQueueGenericSend+0x40>
 80698c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80698c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80698c4:	2b00      	cmp	r3, #0
 80698c6:	d101      	bne.n	80698cc <xQueueGenericSend+0x44>
 80698c8:	2301      	movs	r3, #1
 80698ca:	e000      	b.n	80698ce <xQueueGenericSend+0x46>
 80698cc:	2300      	movs	r3, #0
 80698ce:	2b00      	cmp	r3, #0
 80698d0:	d10a      	bne.n	80698e8 <xQueueGenericSend+0x60>
	__asm volatile
 80698d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80698d6:	f383 8811 	msr	BASEPRI, r3
 80698da:	f3bf 8f6f 	isb	sy
 80698de:	f3bf 8f4f 	dsb	sy
 80698e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80698e4:	bf00      	nop
 80698e6:	e7fe      	b.n	80698e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80698e8:	683b      	ldr	r3, [r7, #0]
 80698ea:	2b02      	cmp	r3, #2
 80698ec:	d103      	bne.n	80698f6 <xQueueGenericSend+0x6e>
 80698ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80698f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80698f2:	2b01      	cmp	r3, #1
 80698f4:	d101      	bne.n	80698fa <xQueueGenericSend+0x72>
 80698f6:	2301      	movs	r3, #1
 80698f8:	e000      	b.n	80698fc <xQueueGenericSend+0x74>
 80698fa:	2300      	movs	r3, #0
 80698fc:	2b00      	cmp	r3, #0
 80698fe:	d10a      	bne.n	8069916 <xQueueGenericSend+0x8e>
	__asm volatile
 8069900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069904:	f383 8811 	msr	BASEPRI, r3
 8069908:	f3bf 8f6f 	isb	sy
 806990c:	f3bf 8f4f 	dsb	sy
 8069910:	623b      	str	r3, [r7, #32]
}
 8069912:	bf00      	nop
 8069914:	e7fe      	b.n	8069914 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8069916:	f001 fc75 	bl	806b204 <xTaskGetSchedulerState>
 806991a:	4603      	mov	r3, r0
 806991c:	2b00      	cmp	r3, #0
 806991e:	d102      	bne.n	8069926 <xQueueGenericSend+0x9e>
 8069920:	687b      	ldr	r3, [r7, #4]
 8069922:	2b00      	cmp	r3, #0
 8069924:	d101      	bne.n	806992a <xQueueGenericSend+0xa2>
 8069926:	2301      	movs	r3, #1
 8069928:	e000      	b.n	806992c <xQueueGenericSend+0xa4>
 806992a:	2300      	movs	r3, #0
 806992c:	2b00      	cmp	r3, #0
 806992e:	d10a      	bne.n	8069946 <xQueueGenericSend+0xbe>
	__asm volatile
 8069930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069934:	f383 8811 	msr	BASEPRI, r3
 8069938:	f3bf 8f6f 	isb	sy
 806993c:	f3bf 8f4f 	dsb	sy
 8069940:	61fb      	str	r3, [r7, #28]
}
 8069942:	bf00      	nop
 8069944:	e7fe      	b.n	8069944 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8069946:	f002 fb6d 	bl	806c024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 806994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806994c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806994e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8069952:	429a      	cmp	r2, r3
 8069954:	d302      	bcc.n	806995c <xQueueGenericSend+0xd4>
 8069956:	683b      	ldr	r3, [r7, #0]
 8069958:	2b02      	cmp	r3, #2
 806995a:	d129      	bne.n	80699b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 806995c:	683a      	ldr	r2, [r7, #0]
 806995e:	68b9      	ldr	r1, [r7, #8]
 8069960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8069962:	f000 fc5e 	bl	806a222 <prvCopyDataToQueue>
 8069966:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8069968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806996c:	2b00      	cmp	r3, #0
 806996e:	d010      	beq.n	8069992 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8069970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069972:	3324      	adds	r3, #36	; 0x24
 8069974:	4618      	mov	r0, r3
 8069976:	f001 fa73 	bl	806ae60 <xTaskRemoveFromEventList>
 806997a:	4603      	mov	r3, r0
 806997c:	2b00      	cmp	r3, #0
 806997e:	d013      	beq.n	80699a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8069980:	4b3f      	ldr	r3, [pc, #252]	; (8069a80 <xQueueGenericSend+0x1f8>)
 8069982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8069986:	601a      	str	r2, [r3, #0]
 8069988:	f3bf 8f4f 	dsb	sy
 806998c:	f3bf 8f6f 	isb	sy
 8069990:	e00a      	b.n	80699a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8069992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069994:	2b00      	cmp	r3, #0
 8069996:	d007      	beq.n	80699a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8069998:	4b39      	ldr	r3, [pc, #228]	; (8069a80 <xQueueGenericSend+0x1f8>)
 806999a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806999e:	601a      	str	r2, [r3, #0]
 80699a0:	f3bf 8f4f 	dsb	sy
 80699a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80699a8:	f002 fb6c 	bl	806c084 <vPortExitCritical>
				return pdPASS;
 80699ac:	2301      	movs	r3, #1
 80699ae:	e063      	b.n	8069a78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80699b0:	687b      	ldr	r3, [r7, #4]
 80699b2:	2b00      	cmp	r3, #0
 80699b4:	d103      	bne.n	80699be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80699b6:	f002 fb65 	bl	806c084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80699ba:	2300      	movs	r3, #0
 80699bc:	e05c      	b.n	8069a78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80699be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80699c0:	2b00      	cmp	r3, #0
 80699c2:	d106      	bne.n	80699d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80699c4:	f107 0314 	add.w	r3, r7, #20
 80699c8:	4618      	mov	r0, r3
 80699ca:	f001 faad 	bl	806af28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80699ce:	2301      	movs	r3, #1
 80699d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80699d2:	f002 fb57 	bl	806c084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80699d6:	f001 f819 	bl	806aa0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80699da:	f002 fb23 	bl	806c024 <vPortEnterCritical>
 80699de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80699e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80699e4:	b25b      	sxtb	r3, r3
 80699e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80699ea:	d103      	bne.n	80699f4 <xQueueGenericSend+0x16c>
 80699ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80699ee:	2200      	movs	r2, #0
 80699f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80699f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80699f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80699fa:	b25b      	sxtb	r3, r3
 80699fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8069a00:	d103      	bne.n	8069a0a <xQueueGenericSend+0x182>
 8069a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069a04:	2200      	movs	r2, #0
 8069a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8069a0a:	f002 fb3b 	bl	806c084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8069a0e:	1d3a      	adds	r2, r7, #4
 8069a10:	f107 0314 	add.w	r3, r7, #20
 8069a14:	4611      	mov	r1, r2
 8069a16:	4618      	mov	r0, r3
 8069a18:	f001 fa9c 	bl	806af54 <xTaskCheckForTimeOut>
 8069a1c:	4603      	mov	r3, r0
 8069a1e:	2b00      	cmp	r3, #0
 8069a20:	d124      	bne.n	8069a6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8069a22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8069a24:	f000 fcf5 	bl	806a412 <prvIsQueueFull>
 8069a28:	4603      	mov	r3, r0
 8069a2a:	2b00      	cmp	r3, #0
 8069a2c:	d018      	beq.n	8069a60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8069a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069a30:	3310      	adds	r3, #16
 8069a32:	687a      	ldr	r2, [r7, #4]
 8069a34:	4611      	mov	r1, r2
 8069a36:	4618      	mov	r0, r3
 8069a38:	f001 f9c2 	bl	806adc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8069a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8069a3e:	f000 fc80 	bl	806a342 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8069a42:	f000 fff1 	bl	806aa28 <xTaskResumeAll>
 8069a46:	4603      	mov	r3, r0
 8069a48:	2b00      	cmp	r3, #0
 8069a4a:	f47f af7c 	bne.w	8069946 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8069a4e:	4b0c      	ldr	r3, [pc, #48]	; (8069a80 <xQueueGenericSend+0x1f8>)
 8069a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8069a54:	601a      	str	r2, [r3, #0]
 8069a56:	f3bf 8f4f 	dsb	sy
 8069a5a:	f3bf 8f6f 	isb	sy
 8069a5e:	e772      	b.n	8069946 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8069a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8069a62:	f000 fc6e 	bl	806a342 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8069a66:	f000 ffdf 	bl	806aa28 <xTaskResumeAll>
 8069a6a:	e76c      	b.n	8069946 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8069a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8069a6e:	f000 fc68 	bl	806a342 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8069a72:	f000 ffd9 	bl	806aa28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8069a76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8069a78:	4618      	mov	r0, r3
 8069a7a:	3738      	adds	r7, #56	; 0x38
 8069a7c:	46bd      	mov	sp, r7
 8069a7e:	bd80      	pop	{r7, pc}
 8069a80:	e000ed04 	.word	0xe000ed04

08069a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8069a84:	b580      	push	{r7, lr}
 8069a86:	b090      	sub	sp, #64	; 0x40
 8069a88:	af00      	add	r7, sp, #0
 8069a8a:	60f8      	str	r0, [r7, #12]
 8069a8c:	60b9      	str	r1, [r7, #8]
 8069a8e:	607a      	str	r2, [r7, #4]
 8069a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8069a92:	68fb      	ldr	r3, [r7, #12]
 8069a94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8069a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069a98:	2b00      	cmp	r3, #0
 8069a9a:	d10a      	bne.n	8069ab2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8069a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069aa0:	f383 8811 	msr	BASEPRI, r3
 8069aa4:	f3bf 8f6f 	isb	sy
 8069aa8:	f3bf 8f4f 	dsb	sy
 8069aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8069aae:	bf00      	nop
 8069ab0:	e7fe      	b.n	8069ab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8069ab2:	68bb      	ldr	r3, [r7, #8]
 8069ab4:	2b00      	cmp	r3, #0
 8069ab6:	d103      	bne.n	8069ac0 <xQueueGenericSendFromISR+0x3c>
 8069ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069abc:	2b00      	cmp	r3, #0
 8069abe:	d101      	bne.n	8069ac4 <xQueueGenericSendFromISR+0x40>
 8069ac0:	2301      	movs	r3, #1
 8069ac2:	e000      	b.n	8069ac6 <xQueueGenericSendFromISR+0x42>
 8069ac4:	2300      	movs	r3, #0
 8069ac6:	2b00      	cmp	r3, #0
 8069ac8:	d10a      	bne.n	8069ae0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8069aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069ace:	f383 8811 	msr	BASEPRI, r3
 8069ad2:	f3bf 8f6f 	isb	sy
 8069ad6:	f3bf 8f4f 	dsb	sy
 8069ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8069adc:	bf00      	nop
 8069ade:	e7fe      	b.n	8069ade <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8069ae0:	683b      	ldr	r3, [r7, #0]
 8069ae2:	2b02      	cmp	r3, #2
 8069ae4:	d103      	bne.n	8069aee <xQueueGenericSendFromISR+0x6a>
 8069ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8069aea:	2b01      	cmp	r3, #1
 8069aec:	d101      	bne.n	8069af2 <xQueueGenericSendFromISR+0x6e>
 8069aee:	2301      	movs	r3, #1
 8069af0:	e000      	b.n	8069af4 <xQueueGenericSendFromISR+0x70>
 8069af2:	2300      	movs	r3, #0
 8069af4:	2b00      	cmp	r3, #0
 8069af6:	d10a      	bne.n	8069b0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8069af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069afc:	f383 8811 	msr	BASEPRI, r3
 8069b00:	f3bf 8f6f 	isb	sy
 8069b04:	f3bf 8f4f 	dsb	sy
 8069b08:	623b      	str	r3, [r7, #32]
}
 8069b0a:	bf00      	nop
 8069b0c:	e7fe      	b.n	8069b0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8069b0e:	f002 fb6b 	bl	806c1e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8069b12:	f3ef 8211 	mrs	r2, BASEPRI
 8069b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069b1a:	f383 8811 	msr	BASEPRI, r3
 8069b1e:	f3bf 8f6f 	isb	sy
 8069b22:	f3bf 8f4f 	dsb	sy
 8069b26:	61fa      	str	r2, [r7, #28]
 8069b28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8069b2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8069b2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8069b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8069b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8069b36:	429a      	cmp	r2, r3
 8069b38:	d302      	bcc.n	8069b40 <xQueueGenericSendFromISR+0xbc>
 8069b3a:	683b      	ldr	r3, [r7, #0]
 8069b3c:	2b02      	cmp	r3, #2
 8069b3e:	d12f      	bne.n	8069ba0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8069b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8069b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8069b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8069b50:	683a      	ldr	r2, [r7, #0]
 8069b52:	68b9      	ldr	r1, [r7, #8]
 8069b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8069b56:	f000 fb64 	bl	806a222 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8069b5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8069b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8069b62:	d112      	bne.n	8069b8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8069b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8069b68:	2b00      	cmp	r3, #0
 8069b6a:	d016      	beq.n	8069b9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8069b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069b6e:	3324      	adds	r3, #36	; 0x24
 8069b70:	4618      	mov	r0, r3
 8069b72:	f001 f975 	bl	806ae60 <xTaskRemoveFromEventList>
 8069b76:	4603      	mov	r3, r0
 8069b78:	2b00      	cmp	r3, #0
 8069b7a:	d00e      	beq.n	8069b9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8069b7c:	687b      	ldr	r3, [r7, #4]
 8069b7e:	2b00      	cmp	r3, #0
 8069b80:	d00b      	beq.n	8069b9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8069b82:	687b      	ldr	r3, [r7, #4]
 8069b84:	2201      	movs	r2, #1
 8069b86:	601a      	str	r2, [r3, #0]
 8069b88:	e007      	b.n	8069b9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8069b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8069b8e:	3301      	adds	r3, #1
 8069b90:	b2db      	uxtb	r3, r3
 8069b92:	b25a      	sxtb	r2, r3
 8069b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8069b9a:	2301      	movs	r3, #1
 8069b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8069b9e:	e001      	b.n	8069ba4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8069ba0:	2300      	movs	r3, #0
 8069ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8069ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8069ba6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8069ba8:	697b      	ldr	r3, [r7, #20]
 8069baa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8069bae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8069bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8069bb2:	4618      	mov	r0, r3
 8069bb4:	3740      	adds	r7, #64	; 0x40
 8069bb6:	46bd      	mov	sp, r7
 8069bb8:	bd80      	pop	{r7, pc}

08069bba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8069bba:	b580      	push	{r7, lr}
 8069bbc:	b08e      	sub	sp, #56	; 0x38
 8069bbe:	af00      	add	r7, sp, #0
 8069bc0:	6078      	str	r0, [r7, #4]
 8069bc2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8069bc4:	687b      	ldr	r3, [r7, #4]
 8069bc6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8069bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069bca:	2b00      	cmp	r3, #0
 8069bcc:	d10a      	bne.n	8069be4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8069bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069bd2:	f383 8811 	msr	BASEPRI, r3
 8069bd6:	f3bf 8f6f 	isb	sy
 8069bda:	f3bf 8f4f 	dsb	sy
 8069bde:	623b      	str	r3, [r7, #32]
}
 8069be0:	bf00      	nop
 8069be2:	e7fe      	b.n	8069be2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8069be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069be8:	2b00      	cmp	r3, #0
 8069bea:	d00a      	beq.n	8069c02 <xQueueGiveFromISR+0x48>
	__asm volatile
 8069bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069bf0:	f383 8811 	msr	BASEPRI, r3
 8069bf4:	f3bf 8f6f 	isb	sy
 8069bf8:	f3bf 8f4f 	dsb	sy
 8069bfc:	61fb      	str	r3, [r7, #28]
}
 8069bfe:	bf00      	nop
 8069c00:	e7fe      	b.n	8069c00 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8069c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069c04:	681b      	ldr	r3, [r3, #0]
 8069c06:	2b00      	cmp	r3, #0
 8069c08:	d103      	bne.n	8069c12 <xQueueGiveFromISR+0x58>
 8069c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069c0c:	689b      	ldr	r3, [r3, #8]
 8069c0e:	2b00      	cmp	r3, #0
 8069c10:	d101      	bne.n	8069c16 <xQueueGiveFromISR+0x5c>
 8069c12:	2301      	movs	r3, #1
 8069c14:	e000      	b.n	8069c18 <xQueueGiveFromISR+0x5e>
 8069c16:	2300      	movs	r3, #0
 8069c18:	2b00      	cmp	r3, #0
 8069c1a:	d10a      	bne.n	8069c32 <xQueueGiveFromISR+0x78>
	__asm volatile
 8069c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069c20:	f383 8811 	msr	BASEPRI, r3
 8069c24:	f3bf 8f6f 	isb	sy
 8069c28:	f3bf 8f4f 	dsb	sy
 8069c2c:	61bb      	str	r3, [r7, #24]
}
 8069c2e:	bf00      	nop
 8069c30:	e7fe      	b.n	8069c30 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8069c32:	f002 fad9 	bl	806c1e8 <vPortValidateInterruptPriority>
	__asm volatile
 8069c36:	f3ef 8211 	mrs	r2, BASEPRI
 8069c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069c3e:	f383 8811 	msr	BASEPRI, r3
 8069c42:	f3bf 8f6f 	isb	sy
 8069c46:	f3bf 8f4f 	dsb	sy
 8069c4a:	617a      	str	r2, [r7, #20]
 8069c4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8069c4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8069c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8069c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069c56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8069c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8069c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8069c5e:	429a      	cmp	r2, r3
 8069c60:	d22b      	bcs.n	8069cba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8069c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8069c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8069c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069c6e:	1c5a      	adds	r2, r3, #1
 8069c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069c72:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8069c74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8069c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8069c7c:	d112      	bne.n	8069ca4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8069c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8069c82:	2b00      	cmp	r3, #0
 8069c84:	d016      	beq.n	8069cb4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8069c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069c88:	3324      	adds	r3, #36	; 0x24
 8069c8a:	4618      	mov	r0, r3
 8069c8c:	f001 f8e8 	bl	806ae60 <xTaskRemoveFromEventList>
 8069c90:	4603      	mov	r3, r0
 8069c92:	2b00      	cmp	r3, #0
 8069c94:	d00e      	beq.n	8069cb4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8069c96:	683b      	ldr	r3, [r7, #0]
 8069c98:	2b00      	cmp	r3, #0
 8069c9a:	d00b      	beq.n	8069cb4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8069c9c:	683b      	ldr	r3, [r7, #0]
 8069c9e:	2201      	movs	r2, #1
 8069ca0:	601a      	str	r2, [r3, #0]
 8069ca2:	e007      	b.n	8069cb4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8069ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8069ca8:	3301      	adds	r3, #1
 8069caa:	b2db      	uxtb	r3, r3
 8069cac:	b25a      	sxtb	r2, r3
 8069cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8069cb4:	2301      	movs	r3, #1
 8069cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8069cb8:	e001      	b.n	8069cbe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8069cba:	2300      	movs	r3, #0
 8069cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8069cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069cc0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8069cc2:	68fb      	ldr	r3, [r7, #12]
 8069cc4:	f383 8811 	msr	BASEPRI, r3
}
 8069cc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8069cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8069ccc:	4618      	mov	r0, r3
 8069cce:	3738      	adds	r7, #56	; 0x38
 8069cd0:	46bd      	mov	sp, r7
 8069cd2:	bd80      	pop	{r7, pc}

08069cd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8069cd4:	b580      	push	{r7, lr}
 8069cd6:	b08c      	sub	sp, #48	; 0x30
 8069cd8:	af00      	add	r7, sp, #0
 8069cda:	60f8      	str	r0, [r7, #12]
 8069cdc:	60b9      	str	r1, [r7, #8]
 8069cde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8069ce0:	2300      	movs	r3, #0
 8069ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8069ce4:	68fb      	ldr	r3, [r7, #12]
 8069ce6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8069ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069cea:	2b00      	cmp	r3, #0
 8069cec:	d10a      	bne.n	8069d04 <xQueueReceive+0x30>
	__asm volatile
 8069cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069cf2:	f383 8811 	msr	BASEPRI, r3
 8069cf6:	f3bf 8f6f 	isb	sy
 8069cfa:	f3bf 8f4f 	dsb	sy
 8069cfe:	623b      	str	r3, [r7, #32]
}
 8069d00:	bf00      	nop
 8069d02:	e7fe      	b.n	8069d02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8069d04:	68bb      	ldr	r3, [r7, #8]
 8069d06:	2b00      	cmp	r3, #0
 8069d08:	d103      	bne.n	8069d12 <xQueueReceive+0x3e>
 8069d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069d0e:	2b00      	cmp	r3, #0
 8069d10:	d101      	bne.n	8069d16 <xQueueReceive+0x42>
 8069d12:	2301      	movs	r3, #1
 8069d14:	e000      	b.n	8069d18 <xQueueReceive+0x44>
 8069d16:	2300      	movs	r3, #0
 8069d18:	2b00      	cmp	r3, #0
 8069d1a:	d10a      	bne.n	8069d32 <xQueueReceive+0x5e>
	__asm volatile
 8069d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069d20:	f383 8811 	msr	BASEPRI, r3
 8069d24:	f3bf 8f6f 	isb	sy
 8069d28:	f3bf 8f4f 	dsb	sy
 8069d2c:	61fb      	str	r3, [r7, #28]
}
 8069d2e:	bf00      	nop
 8069d30:	e7fe      	b.n	8069d30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8069d32:	f001 fa67 	bl	806b204 <xTaskGetSchedulerState>
 8069d36:	4603      	mov	r3, r0
 8069d38:	2b00      	cmp	r3, #0
 8069d3a:	d102      	bne.n	8069d42 <xQueueReceive+0x6e>
 8069d3c:	687b      	ldr	r3, [r7, #4]
 8069d3e:	2b00      	cmp	r3, #0
 8069d40:	d101      	bne.n	8069d46 <xQueueReceive+0x72>
 8069d42:	2301      	movs	r3, #1
 8069d44:	e000      	b.n	8069d48 <xQueueReceive+0x74>
 8069d46:	2300      	movs	r3, #0
 8069d48:	2b00      	cmp	r3, #0
 8069d4a:	d10a      	bne.n	8069d62 <xQueueReceive+0x8e>
	__asm volatile
 8069d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069d50:	f383 8811 	msr	BASEPRI, r3
 8069d54:	f3bf 8f6f 	isb	sy
 8069d58:	f3bf 8f4f 	dsb	sy
 8069d5c:	61bb      	str	r3, [r7, #24]
}
 8069d5e:	bf00      	nop
 8069d60:	e7fe      	b.n	8069d60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8069d62:	f002 f95f 	bl	806c024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8069d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069d6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8069d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8069d6e:	2b00      	cmp	r3, #0
 8069d70:	d01f      	beq.n	8069db2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8069d72:	68b9      	ldr	r1, [r7, #8]
 8069d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8069d76:	f000 fabe 	bl	806a2f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8069d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8069d7c:	1e5a      	subs	r2, r3, #1
 8069d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069d80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8069d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069d84:	691b      	ldr	r3, [r3, #16]
 8069d86:	2b00      	cmp	r3, #0
 8069d88:	d00f      	beq.n	8069daa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8069d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069d8c:	3310      	adds	r3, #16
 8069d8e:	4618      	mov	r0, r3
 8069d90:	f001 f866 	bl	806ae60 <xTaskRemoveFromEventList>
 8069d94:	4603      	mov	r3, r0
 8069d96:	2b00      	cmp	r3, #0
 8069d98:	d007      	beq.n	8069daa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8069d9a:	4b3d      	ldr	r3, [pc, #244]	; (8069e90 <xQueueReceive+0x1bc>)
 8069d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8069da0:	601a      	str	r2, [r3, #0]
 8069da2:	f3bf 8f4f 	dsb	sy
 8069da6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8069daa:	f002 f96b 	bl	806c084 <vPortExitCritical>
				return pdPASS;
 8069dae:	2301      	movs	r3, #1
 8069db0:	e069      	b.n	8069e86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8069db2:	687b      	ldr	r3, [r7, #4]
 8069db4:	2b00      	cmp	r3, #0
 8069db6:	d103      	bne.n	8069dc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8069db8:	f002 f964 	bl	806c084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8069dbc:	2300      	movs	r3, #0
 8069dbe:	e062      	b.n	8069e86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8069dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069dc2:	2b00      	cmp	r3, #0
 8069dc4:	d106      	bne.n	8069dd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8069dc6:	f107 0310 	add.w	r3, r7, #16
 8069dca:	4618      	mov	r0, r3
 8069dcc:	f001 f8ac 	bl	806af28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8069dd0:	2301      	movs	r3, #1
 8069dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8069dd4:	f002 f956 	bl	806c084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8069dd8:	f000 fe18 	bl	806aa0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8069ddc:	f002 f922 	bl	806c024 <vPortEnterCritical>
 8069de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8069de6:	b25b      	sxtb	r3, r3
 8069de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8069dec:	d103      	bne.n	8069df6 <xQueueReceive+0x122>
 8069dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069df0:	2200      	movs	r2, #0
 8069df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8069df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8069dfc:	b25b      	sxtb	r3, r3
 8069dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8069e02:	d103      	bne.n	8069e0c <xQueueReceive+0x138>
 8069e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069e06:	2200      	movs	r2, #0
 8069e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8069e0c:	f002 f93a 	bl	806c084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8069e10:	1d3a      	adds	r2, r7, #4
 8069e12:	f107 0310 	add.w	r3, r7, #16
 8069e16:	4611      	mov	r1, r2
 8069e18:	4618      	mov	r0, r3
 8069e1a:	f001 f89b 	bl	806af54 <xTaskCheckForTimeOut>
 8069e1e:	4603      	mov	r3, r0
 8069e20:	2b00      	cmp	r3, #0
 8069e22:	d123      	bne.n	8069e6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8069e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8069e26:	f000 fade 	bl	806a3e6 <prvIsQueueEmpty>
 8069e2a:	4603      	mov	r3, r0
 8069e2c:	2b00      	cmp	r3, #0
 8069e2e:	d017      	beq.n	8069e60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8069e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069e32:	3324      	adds	r3, #36	; 0x24
 8069e34:	687a      	ldr	r2, [r7, #4]
 8069e36:	4611      	mov	r1, r2
 8069e38:	4618      	mov	r0, r3
 8069e3a:	f000 ffc1 	bl	806adc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8069e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8069e40:	f000 fa7f 	bl	806a342 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8069e44:	f000 fdf0 	bl	806aa28 <xTaskResumeAll>
 8069e48:	4603      	mov	r3, r0
 8069e4a:	2b00      	cmp	r3, #0
 8069e4c:	d189      	bne.n	8069d62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8069e4e:	4b10      	ldr	r3, [pc, #64]	; (8069e90 <xQueueReceive+0x1bc>)
 8069e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8069e54:	601a      	str	r2, [r3, #0]
 8069e56:	f3bf 8f4f 	dsb	sy
 8069e5a:	f3bf 8f6f 	isb	sy
 8069e5e:	e780      	b.n	8069d62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8069e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8069e62:	f000 fa6e 	bl	806a342 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8069e66:	f000 fddf 	bl	806aa28 <xTaskResumeAll>
 8069e6a:	e77a      	b.n	8069d62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8069e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8069e6e:	f000 fa68 	bl	806a342 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8069e72:	f000 fdd9 	bl	806aa28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8069e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8069e78:	f000 fab5 	bl	806a3e6 <prvIsQueueEmpty>
 8069e7c:	4603      	mov	r3, r0
 8069e7e:	2b00      	cmp	r3, #0
 8069e80:	f43f af6f 	beq.w	8069d62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8069e84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8069e86:	4618      	mov	r0, r3
 8069e88:	3730      	adds	r7, #48	; 0x30
 8069e8a:	46bd      	mov	sp, r7
 8069e8c:	bd80      	pop	{r7, pc}
 8069e8e:	bf00      	nop
 8069e90:	e000ed04 	.word	0xe000ed04

08069e94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8069e94:	b580      	push	{r7, lr}
 8069e96:	b08e      	sub	sp, #56	; 0x38
 8069e98:	af00      	add	r7, sp, #0
 8069e9a:	6078      	str	r0, [r7, #4]
 8069e9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8069e9e:	2300      	movs	r3, #0
 8069ea0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8069ea2:	687b      	ldr	r3, [r7, #4]
 8069ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8069ea6:	2300      	movs	r3, #0
 8069ea8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8069eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069eac:	2b00      	cmp	r3, #0
 8069eae:	d10a      	bne.n	8069ec6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8069eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069eb4:	f383 8811 	msr	BASEPRI, r3
 8069eb8:	f3bf 8f6f 	isb	sy
 8069ebc:	f3bf 8f4f 	dsb	sy
 8069ec0:	623b      	str	r3, [r7, #32]
}
 8069ec2:	bf00      	nop
 8069ec4:	e7fe      	b.n	8069ec4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8069ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069eca:	2b00      	cmp	r3, #0
 8069ecc:	d00a      	beq.n	8069ee4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8069ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069ed2:	f383 8811 	msr	BASEPRI, r3
 8069ed6:	f3bf 8f6f 	isb	sy
 8069eda:	f3bf 8f4f 	dsb	sy
 8069ede:	61fb      	str	r3, [r7, #28]
}
 8069ee0:	bf00      	nop
 8069ee2:	e7fe      	b.n	8069ee2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8069ee4:	f001 f98e 	bl	806b204 <xTaskGetSchedulerState>
 8069ee8:	4603      	mov	r3, r0
 8069eea:	2b00      	cmp	r3, #0
 8069eec:	d102      	bne.n	8069ef4 <xQueueSemaphoreTake+0x60>
 8069eee:	683b      	ldr	r3, [r7, #0]
 8069ef0:	2b00      	cmp	r3, #0
 8069ef2:	d101      	bne.n	8069ef8 <xQueueSemaphoreTake+0x64>
 8069ef4:	2301      	movs	r3, #1
 8069ef6:	e000      	b.n	8069efa <xQueueSemaphoreTake+0x66>
 8069ef8:	2300      	movs	r3, #0
 8069efa:	2b00      	cmp	r3, #0
 8069efc:	d10a      	bne.n	8069f14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8069efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069f02:	f383 8811 	msr	BASEPRI, r3
 8069f06:	f3bf 8f6f 	isb	sy
 8069f0a:	f3bf 8f4f 	dsb	sy
 8069f0e:	61bb      	str	r3, [r7, #24]
}
 8069f10:	bf00      	nop
 8069f12:	e7fe      	b.n	8069f12 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8069f14:	f002 f886 	bl	806c024 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8069f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069f1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8069f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069f20:	2b00      	cmp	r3, #0
 8069f22:	d024      	beq.n	8069f6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8069f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069f26:	1e5a      	subs	r2, r3, #1
 8069f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069f2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8069f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069f2e:	681b      	ldr	r3, [r3, #0]
 8069f30:	2b00      	cmp	r3, #0
 8069f32:	d104      	bne.n	8069f3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8069f34:	f001 fadc 	bl	806b4f0 <pvTaskIncrementMutexHeldCount>
 8069f38:	4602      	mov	r2, r0
 8069f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069f3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8069f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069f40:	691b      	ldr	r3, [r3, #16]
 8069f42:	2b00      	cmp	r3, #0
 8069f44:	d00f      	beq.n	8069f66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8069f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069f48:	3310      	adds	r3, #16
 8069f4a:	4618      	mov	r0, r3
 8069f4c:	f000 ff88 	bl	806ae60 <xTaskRemoveFromEventList>
 8069f50:	4603      	mov	r3, r0
 8069f52:	2b00      	cmp	r3, #0
 8069f54:	d007      	beq.n	8069f66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8069f56:	4b54      	ldr	r3, [pc, #336]	; (806a0a8 <xQueueSemaphoreTake+0x214>)
 8069f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8069f5c:	601a      	str	r2, [r3, #0]
 8069f5e:	f3bf 8f4f 	dsb	sy
 8069f62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8069f66:	f002 f88d 	bl	806c084 <vPortExitCritical>
				return pdPASS;
 8069f6a:	2301      	movs	r3, #1
 8069f6c:	e097      	b.n	806a09e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8069f6e:	683b      	ldr	r3, [r7, #0]
 8069f70:	2b00      	cmp	r3, #0
 8069f72:	d111      	bne.n	8069f98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8069f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069f76:	2b00      	cmp	r3, #0
 8069f78:	d00a      	beq.n	8069f90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8069f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8069f7e:	f383 8811 	msr	BASEPRI, r3
 8069f82:	f3bf 8f6f 	isb	sy
 8069f86:	f3bf 8f4f 	dsb	sy
 8069f8a:	617b      	str	r3, [r7, #20]
}
 8069f8c:	bf00      	nop
 8069f8e:	e7fe      	b.n	8069f8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8069f90:	f002 f878 	bl	806c084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8069f94:	2300      	movs	r3, #0
 8069f96:	e082      	b.n	806a09e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8069f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8069f9a:	2b00      	cmp	r3, #0
 8069f9c:	d106      	bne.n	8069fac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8069f9e:	f107 030c 	add.w	r3, r7, #12
 8069fa2:	4618      	mov	r0, r3
 8069fa4:	f000 ffc0 	bl	806af28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8069fa8:	2301      	movs	r3, #1
 8069faa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8069fac:	f002 f86a 	bl	806c084 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8069fb0:	f000 fd2c 	bl	806aa0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8069fb4:	f002 f836 	bl	806c024 <vPortEnterCritical>
 8069fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8069fbe:	b25b      	sxtb	r3, r3
 8069fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8069fc4:	d103      	bne.n	8069fce <xQueueSemaphoreTake+0x13a>
 8069fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069fc8:	2200      	movs	r2, #0
 8069fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8069fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8069fd4:	b25b      	sxtb	r3, r3
 8069fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8069fda:	d103      	bne.n	8069fe4 <xQueueSemaphoreTake+0x150>
 8069fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069fde:	2200      	movs	r2, #0
 8069fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8069fe4:	f002 f84e 	bl	806c084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8069fe8:	463a      	mov	r2, r7
 8069fea:	f107 030c 	add.w	r3, r7, #12
 8069fee:	4611      	mov	r1, r2
 8069ff0:	4618      	mov	r0, r3
 8069ff2:	f000 ffaf 	bl	806af54 <xTaskCheckForTimeOut>
 8069ff6:	4603      	mov	r3, r0
 8069ff8:	2b00      	cmp	r3, #0
 8069ffa:	d132      	bne.n	806a062 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8069ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8069ffe:	f000 f9f2 	bl	806a3e6 <prvIsQueueEmpty>
 806a002:	4603      	mov	r3, r0
 806a004:	2b00      	cmp	r3, #0
 806a006:	d026      	beq.n	806a056 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806a008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a00a:	681b      	ldr	r3, [r3, #0]
 806a00c:	2b00      	cmp	r3, #0
 806a00e:	d109      	bne.n	806a024 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 806a010:	f002 f808 	bl	806c024 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 806a014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a016:	689b      	ldr	r3, [r3, #8]
 806a018:	4618      	mov	r0, r3
 806a01a:	f001 f911 	bl	806b240 <xTaskPriorityInherit>
 806a01e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 806a020:	f002 f830 	bl	806c084 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 806a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a026:	3324      	adds	r3, #36	; 0x24
 806a028:	683a      	ldr	r2, [r7, #0]
 806a02a:	4611      	mov	r1, r2
 806a02c:	4618      	mov	r0, r3
 806a02e:	f000 fec7 	bl	806adc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 806a032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806a034:	f000 f985 	bl	806a342 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 806a038:	f000 fcf6 	bl	806aa28 <xTaskResumeAll>
 806a03c:	4603      	mov	r3, r0
 806a03e:	2b00      	cmp	r3, #0
 806a040:	f47f af68 	bne.w	8069f14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 806a044:	4b18      	ldr	r3, [pc, #96]	; (806a0a8 <xQueueSemaphoreTake+0x214>)
 806a046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806a04a:	601a      	str	r2, [r3, #0]
 806a04c:	f3bf 8f4f 	dsb	sy
 806a050:	f3bf 8f6f 	isb	sy
 806a054:	e75e      	b.n	8069f14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 806a056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806a058:	f000 f973 	bl	806a342 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806a05c:	f000 fce4 	bl	806aa28 <xTaskResumeAll>
 806a060:	e758      	b.n	8069f14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 806a062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806a064:	f000 f96d 	bl	806a342 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806a068:	f000 fcde 	bl	806aa28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806a06c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806a06e:	f000 f9ba 	bl	806a3e6 <prvIsQueueEmpty>
 806a072:	4603      	mov	r3, r0
 806a074:	2b00      	cmp	r3, #0
 806a076:	f43f af4d 	beq.w	8069f14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 806a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a07c:	2b00      	cmp	r3, #0
 806a07e:	d00d      	beq.n	806a09c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 806a080:	f001 ffd0 	bl	806c024 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 806a084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806a086:	f000 f8b4 	bl	806a1f2 <prvGetDisinheritPriorityAfterTimeout>
 806a08a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 806a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a08e:	689b      	ldr	r3, [r3, #8]
 806a090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806a092:	4618      	mov	r0, r3
 806a094:	f001 f9aa 	bl	806b3ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 806a098:	f001 fff4 	bl	806c084 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 806a09c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 806a09e:	4618      	mov	r0, r3
 806a0a0:	3738      	adds	r7, #56	; 0x38
 806a0a2:	46bd      	mov	sp, r7
 806a0a4:	bd80      	pop	{r7, pc}
 806a0a6:	bf00      	nop
 806a0a8:	e000ed04 	.word	0xe000ed04

0806a0ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 806a0ac:	b580      	push	{r7, lr}
 806a0ae:	b08e      	sub	sp, #56	; 0x38
 806a0b0:	af00      	add	r7, sp, #0
 806a0b2:	60f8      	str	r0, [r7, #12]
 806a0b4:	60b9      	str	r1, [r7, #8]
 806a0b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806a0b8:	68fb      	ldr	r3, [r7, #12]
 806a0ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 806a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a0be:	2b00      	cmp	r3, #0
 806a0c0:	d10a      	bne.n	806a0d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 806a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a0c6:	f383 8811 	msr	BASEPRI, r3
 806a0ca:	f3bf 8f6f 	isb	sy
 806a0ce:	f3bf 8f4f 	dsb	sy
 806a0d2:	623b      	str	r3, [r7, #32]
}
 806a0d4:	bf00      	nop
 806a0d6:	e7fe      	b.n	806a0d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806a0d8:	68bb      	ldr	r3, [r7, #8]
 806a0da:	2b00      	cmp	r3, #0
 806a0dc:	d103      	bne.n	806a0e6 <xQueueReceiveFromISR+0x3a>
 806a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806a0e2:	2b00      	cmp	r3, #0
 806a0e4:	d101      	bne.n	806a0ea <xQueueReceiveFromISR+0x3e>
 806a0e6:	2301      	movs	r3, #1
 806a0e8:	e000      	b.n	806a0ec <xQueueReceiveFromISR+0x40>
 806a0ea:	2300      	movs	r3, #0
 806a0ec:	2b00      	cmp	r3, #0
 806a0ee:	d10a      	bne.n	806a106 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 806a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a0f4:	f383 8811 	msr	BASEPRI, r3
 806a0f8:	f3bf 8f6f 	isb	sy
 806a0fc:	f3bf 8f4f 	dsb	sy
 806a100:	61fb      	str	r3, [r7, #28]
}
 806a102:	bf00      	nop
 806a104:	e7fe      	b.n	806a104 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806a106:	f002 f86f 	bl	806c1e8 <vPortValidateInterruptPriority>
	__asm volatile
 806a10a:	f3ef 8211 	mrs	r2, BASEPRI
 806a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a112:	f383 8811 	msr	BASEPRI, r3
 806a116:	f3bf 8f6f 	isb	sy
 806a11a:	f3bf 8f4f 	dsb	sy
 806a11e:	61ba      	str	r2, [r7, #24]
 806a120:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 806a122:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806a124:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806a12a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806a12e:	2b00      	cmp	r3, #0
 806a130:	d02f      	beq.n	806a192 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 806a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806a138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 806a13c:	68b9      	ldr	r1, [r7, #8]
 806a13e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806a140:	f000 f8d9 	bl	806a2f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 806a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806a146:	1e5a      	subs	r2, r3, #1
 806a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a14a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 806a14c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 806a150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806a154:	d112      	bne.n	806a17c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a158:	691b      	ldr	r3, [r3, #16]
 806a15a:	2b00      	cmp	r3, #0
 806a15c:	d016      	beq.n	806a18c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a160:	3310      	adds	r3, #16
 806a162:	4618      	mov	r0, r3
 806a164:	f000 fe7c 	bl	806ae60 <xTaskRemoveFromEventList>
 806a168:	4603      	mov	r3, r0
 806a16a:	2b00      	cmp	r3, #0
 806a16c:	d00e      	beq.n	806a18c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 806a16e:	687b      	ldr	r3, [r7, #4]
 806a170:	2b00      	cmp	r3, #0
 806a172:	d00b      	beq.n	806a18c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 806a174:	687b      	ldr	r3, [r7, #4]
 806a176:	2201      	movs	r2, #1
 806a178:	601a      	str	r2, [r3, #0]
 806a17a:	e007      	b.n	806a18c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 806a17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 806a180:	3301      	adds	r3, #1
 806a182:	b2db      	uxtb	r3, r3
 806a184:	b25a      	sxtb	r2, r3
 806a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 806a18c:	2301      	movs	r3, #1
 806a18e:	637b      	str	r3, [r7, #52]	; 0x34
 806a190:	e001      	b.n	806a196 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 806a192:	2300      	movs	r3, #0
 806a194:	637b      	str	r3, [r7, #52]	; 0x34
 806a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a198:	613b      	str	r3, [r7, #16]
	__asm volatile
 806a19a:	693b      	ldr	r3, [r7, #16]
 806a19c:	f383 8811 	msr	BASEPRI, r3
}
 806a1a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 806a1a4:	4618      	mov	r0, r3
 806a1a6:	3738      	adds	r7, #56	; 0x38
 806a1a8:	46bd      	mov	sp, r7
 806a1aa:	bd80      	pop	{r7, pc}

0806a1ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 806a1ac:	b580      	push	{r7, lr}
 806a1ae:	b084      	sub	sp, #16
 806a1b0:	af00      	add	r7, sp, #0
 806a1b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 806a1b4:	687b      	ldr	r3, [r7, #4]
 806a1b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 806a1b8:	68fb      	ldr	r3, [r7, #12]
 806a1ba:	2b00      	cmp	r3, #0
 806a1bc:	d10a      	bne.n	806a1d4 <vQueueDelete+0x28>
	__asm volatile
 806a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a1c2:	f383 8811 	msr	BASEPRI, r3
 806a1c6:	f3bf 8f6f 	isb	sy
 806a1ca:	f3bf 8f4f 	dsb	sy
 806a1ce:	60bb      	str	r3, [r7, #8]
}
 806a1d0:	bf00      	nop
 806a1d2:	e7fe      	b.n	806a1d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 806a1d4:	68f8      	ldr	r0, [r7, #12]
 806a1d6:	f000 f95f 	bl	806a498 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 806a1da:	68fb      	ldr	r3, [r7, #12]
 806a1dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 806a1e0:	2b00      	cmp	r3, #0
 806a1e2:	d102      	bne.n	806a1ea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 806a1e4:	68f8      	ldr	r0, [r7, #12]
 806a1e6:	f002 f90b 	bl	806c400 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 806a1ea:	bf00      	nop
 806a1ec:	3710      	adds	r7, #16
 806a1ee:	46bd      	mov	sp, r7
 806a1f0:	bd80      	pop	{r7, pc}

0806a1f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 806a1f2:	b480      	push	{r7}
 806a1f4:	b085      	sub	sp, #20
 806a1f6:	af00      	add	r7, sp, #0
 806a1f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 806a1fa:	687b      	ldr	r3, [r7, #4]
 806a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806a1fe:	2b00      	cmp	r3, #0
 806a200:	d006      	beq.n	806a210 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 806a202:	687b      	ldr	r3, [r7, #4]
 806a204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806a206:	681b      	ldr	r3, [r3, #0]
 806a208:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 806a20c:	60fb      	str	r3, [r7, #12]
 806a20e:	e001      	b.n	806a214 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 806a210:	2300      	movs	r3, #0
 806a212:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 806a214:	68fb      	ldr	r3, [r7, #12]
	}
 806a216:	4618      	mov	r0, r3
 806a218:	3714      	adds	r7, #20
 806a21a:	46bd      	mov	sp, r7
 806a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a220:	4770      	bx	lr

0806a222 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 806a222:	b580      	push	{r7, lr}
 806a224:	b086      	sub	sp, #24
 806a226:	af00      	add	r7, sp, #0
 806a228:	60f8      	str	r0, [r7, #12]
 806a22a:	60b9      	str	r1, [r7, #8]
 806a22c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 806a22e:	2300      	movs	r3, #0
 806a230:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806a232:	68fb      	ldr	r3, [r7, #12]
 806a234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806a236:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 806a238:	68fb      	ldr	r3, [r7, #12]
 806a23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806a23c:	2b00      	cmp	r3, #0
 806a23e:	d10d      	bne.n	806a25c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806a240:	68fb      	ldr	r3, [r7, #12]
 806a242:	681b      	ldr	r3, [r3, #0]
 806a244:	2b00      	cmp	r3, #0
 806a246:	d14d      	bne.n	806a2e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 806a248:	68fb      	ldr	r3, [r7, #12]
 806a24a:	689b      	ldr	r3, [r3, #8]
 806a24c:	4618      	mov	r0, r3
 806a24e:	f001 f85f 	bl	806b310 <xTaskPriorityDisinherit>
 806a252:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 806a254:	68fb      	ldr	r3, [r7, #12]
 806a256:	2200      	movs	r2, #0
 806a258:	609a      	str	r2, [r3, #8]
 806a25a:	e043      	b.n	806a2e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 806a25c:	687b      	ldr	r3, [r7, #4]
 806a25e:	2b00      	cmp	r3, #0
 806a260:	d119      	bne.n	806a296 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 806a262:	68fb      	ldr	r3, [r7, #12]
 806a264:	6858      	ldr	r0, [r3, #4]
 806a266:	68fb      	ldr	r3, [r7, #12]
 806a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806a26a:	461a      	mov	r2, r3
 806a26c:	68b9      	ldr	r1, [r7, #8]
 806a26e:	f002 fa11 	bl	806c694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 806a272:	68fb      	ldr	r3, [r7, #12]
 806a274:	685a      	ldr	r2, [r3, #4]
 806a276:	68fb      	ldr	r3, [r7, #12]
 806a278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806a27a:	441a      	add	r2, r3
 806a27c:	68fb      	ldr	r3, [r7, #12]
 806a27e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 806a280:	68fb      	ldr	r3, [r7, #12]
 806a282:	685a      	ldr	r2, [r3, #4]
 806a284:	68fb      	ldr	r3, [r7, #12]
 806a286:	689b      	ldr	r3, [r3, #8]
 806a288:	429a      	cmp	r2, r3
 806a28a:	d32b      	bcc.n	806a2e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 806a28c:	68fb      	ldr	r3, [r7, #12]
 806a28e:	681a      	ldr	r2, [r3, #0]
 806a290:	68fb      	ldr	r3, [r7, #12]
 806a292:	605a      	str	r2, [r3, #4]
 806a294:	e026      	b.n	806a2e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 806a296:	68fb      	ldr	r3, [r7, #12]
 806a298:	68d8      	ldr	r0, [r3, #12]
 806a29a:	68fb      	ldr	r3, [r7, #12]
 806a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806a29e:	461a      	mov	r2, r3
 806a2a0:	68b9      	ldr	r1, [r7, #8]
 806a2a2:	f002 f9f7 	bl	806c694 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 806a2a6:	68fb      	ldr	r3, [r7, #12]
 806a2a8:	68da      	ldr	r2, [r3, #12]
 806a2aa:	68fb      	ldr	r3, [r7, #12]
 806a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806a2ae:	425b      	negs	r3, r3
 806a2b0:	441a      	add	r2, r3
 806a2b2:	68fb      	ldr	r3, [r7, #12]
 806a2b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 806a2b6:	68fb      	ldr	r3, [r7, #12]
 806a2b8:	68da      	ldr	r2, [r3, #12]
 806a2ba:	68fb      	ldr	r3, [r7, #12]
 806a2bc:	681b      	ldr	r3, [r3, #0]
 806a2be:	429a      	cmp	r2, r3
 806a2c0:	d207      	bcs.n	806a2d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 806a2c2:	68fb      	ldr	r3, [r7, #12]
 806a2c4:	689a      	ldr	r2, [r3, #8]
 806a2c6:	68fb      	ldr	r3, [r7, #12]
 806a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806a2ca:	425b      	negs	r3, r3
 806a2cc:	441a      	add	r2, r3
 806a2ce:	68fb      	ldr	r3, [r7, #12]
 806a2d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 806a2d2:	687b      	ldr	r3, [r7, #4]
 806a2d4:	2b02      	cmp	r3, #2
 806a2d6:	d105      	bne.n	806a2e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806a2d8:	693b      	ldr	r3, [r7, #16]
 806a2da:	2b00      	cmp	r3, #0
 806a2dc:	d002      	beq.n	806a2e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 806a2de:	693b      	ldr	r3, [r7, #16]
 806a2e0:	3b01      	subs	r3, #1
 806a2e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 806a2e4:	693b      	ldr	r3, [r7, #16]
 806a2e6:	1c5a      	adds	r2, r3, #1
 806a2e8:	68fb      	ldr	r3, [r7, #12]
 806a2ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 806a2ec:	697b      	ldr	r3, [r7, #20]
}
 806a2ee:	4618      	mov	r0, r3
 806a2f0:	3718      	adds	r7, #24
 806a2f2:	46bd      	mov	sp, r7
 806a2f4:	bd80      	pop	{r7, pc}

0806a2f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 806a2f6:	b580      	push	{r7, lr}
 806a2f8:	b082      	sub	sp, #8
 806a2fa:	af00      	add	r7, sp, #0
 806a2fc:	6078      	str	r0, [r7, #4]
 806a2fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 806a300:	687b      	ldr	r3, [r7, #4]
 806a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806a304:	2b00      	cmp	r3, #0
 806a306:	d018      	beq.n	806a33a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 806a308:	687b      	ldr	r3, [r7, #4]
 806a30a:	68da      	ldr	r2, [r3, #12]
 806a30c:	687b      	ldr	r3, [r7, #4]
 806a30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806a310:	441a      	add	r2, r3
 806a312:	687b      	ldr	r3, [r7, #4]
 806a314:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 806a316:	687b      	ldr	r3, [r7, #4]
 806a318:	68da      	ldr	r2, [r3, #12]
 806a31a:	687b      	ldr	r3, [r7, #4]
 806a31c:	689b      	ldr	r3, [r3, #8]
 806a31e:	429a      	cmp	r2, r3
 806a320:	d303      	bcc.n	806a32a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 806a322:	687b      	ldr	r3, [r7, #4]
 806a324:	681a      	ldr	r2, [r3, #0]
 806a326:	687b      	ldr	r3, [r7, #4]
 806a328:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 806a32a:	687b      	ldr	r3, [r7, #4]
 806a32c:	68d9      	ldr	r1, [r3, #12]
 806a32e:	687b      	ldr	r3, [r7, #4]
 806a330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806a332:	461a      	mov	r2, r3
 806a334:	6838      	ldr	r0, [r7, #0]
 806a336:	f002 f9ad 	bl	806c694 <memcpy>
	}
}
 806a33a:	bf00      	nop
 806a33c:	3708      	adds	r7, #8
 806a33e:	46bd      	mov	sp, r7
 806a340:	bd80      	pop	{r7, pc}

0806a342 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 806a342:	b580      	push	{r7, lr}
 806a344:	b084      	sub	sp, #16
 806a346:	af00      	add	r7, sp, #0
 806a348:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 806a34a:	f001 fe6b 	bl	806c024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 806a34e:	687b      	ldr	r3, [r7, #4]
 806a350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806a354:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 806a356:	e011      	b.n	806a37c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806a358:	687b      	ldr	r3, [r7, #4]
 806a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806a35c:	2b00      	cmp	r3, #0
 806a35e:	d012      	beq.n	806a386 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806a360:	687b      	ldr	r3, [r7, #4]
 806a362:	3324      	adds	r3, #36	; 0x24
 806a364:	4618      	mov	r0, r3
 806a366:	f000 fd7b 	bl	806ae60 <xTaskRemoveFromEventList>
 806a36a:	4603      	mov	r3, r0
 806a36c:	2b00      	cmp	r3, #0
 806a36e:	d001      	beq.n	806a374 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 806a370:	f000 fe52 	bl	806b018 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 806a374:	7bfb      	ldrb	r3, [r7, #15]
 806a376:	3b01      	subs	r3, #1
 806a378:	b2db      	uxtb	r3, r3
 806a37a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 806a37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 806a380:	2b00      	cmp	r3, #0
 806a382:	dce9      	bgt.n	806a358 <prvUnlockQueue+0x16>
 806a384:	e000      	b.n	806a388 <prvUnlockQueue+0x46>
					break;
 806a386:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 806a388:	687b      	ldr	r3, [r7, #4]
 806a38a:	22ff      	movs	r2, #255	; 0xff
 806a38c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 806a390:	f001 fe78 	bl	806c084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 806a394:	f001 fe46 	bl	806c024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 806a398:	687b      	ldr	r3, [r7, #4]
 806a39a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806a39e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 806a3a0:	e011      	b.n	806a3c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806a3a2:	687b      	ldr	r3, [r7, #4]
 806a3a4:	691b      	ldr	r3, [r3, #16]
 806a3a6:	2b00      	cmp	r3, #0
 806a3a8:	d012      	beq.n	806a3d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806a3aa:	687b      	ldr	r3, [r7, #4]
 806a3ac:	3310      	adds	r3, #16
 806a3ae:	4618      	mov	r0, r3
 806a3b0:	f000 fd56 	bl	806ae60 <xTaskRemoveFromEventList>
 806a3b4:	4603      	mov	r3, r0
 806a3b6:	2b00      	cmp	r3, #0
 806a3b8:	d001      	beq.n	806a3be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 806a3ba:	f000 fe2d 	bl	806b018 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 806a3be:	7bbb      	ldrb	r3, [r7, #14]
 806a3c0:	3b01      	subs	r3, #1
 806a3c2:	b2db      	uxtb	r3, r3
 806a3c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 806a3c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 806a3ca:	2b00      	cmp	r3, #0
 806a3cc:	dce9      	bgt.n	806a3a2 <prvUnlockQueue+0x60>
 806a3ce:	e000      	b.n	806a3d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 806a3d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 806a3d2:	687b      	ldr	r3, [r7, #4]
 806a3d4:	22ff      	movs	r2, #255	; 0xff
 806a3d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 806a3da:	f001 fe53 	bl	806c084 <vPortExitCritical>
}
 806a3de:	bf00      	nop
 806a3e0:	3710      	adds	r7, #16
 806a3e2:	46bd      	mov	sp, r7
 806a3e4:	bd80      	pop	{r7, pc}

0806a3e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 806a3e6:	b580      	push	{r7, lr}
 806a3e8:	b084      	sub	sp, #16
 806a3ea:	af00      	add	r7, sp, #0
 806a3ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 806a3ee:	f001 fe19 	bl	806c024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 806a3f2:	687b      	ldr	r3, [r7, #4]
 806a3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806a3f6:	2b00      	cmp	r3, #0
 806a3f8:	d102      	bne.n	806a400 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 806a3fa:	2301      	movs	r3, #1
 806a3fc:	60fb      	str	r3, [r7, #12]
 806a3fe:	e001      	b.n	806a404 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 806a400:	2300      	movs	r3, #0
 806a402:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 806a404:	f001 fe3e 	bl	806c084 <vPortExitCritical>

	return xReturn;
 806a408:	68fb      	ldr	r3, [r7, #12]
}
 806a40a:	4618      	mov	r0, r3
 806a40c:	3710      	adds	r7, #16
 806a40e:	46bd      	mov	sp, r7
 806a410:	bd80      	pop	{r7, pc}

0806a412 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 806a412:	b580      	push	{r7, lr}
 806a414:	b084      	sub	sp, #16
 806a416:	af00      	add	r7, sp, #0
 806a418:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 806a41a:	f001 fe03 	bl	806c024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 806a41e:	687b      	ldr	r3, [r7, #4]
 806a420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806a422:	687b      	ldr	r3, [r7, #4]
 806a424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806a426:	429a      	cmp	r2, r3
 806a428:	d102      	bne.n	806a430 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 806a42a:	2301      	movs	r3, #1
 806a42c:	60fb      	str	r3, [r7, #12]
 806a42e:	e001      	b.n	806a434 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 806a430:	2300      	movs	r3, #0
 806a432:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 806a434:	f001 fe26 	bl	806c084 <vPortExitCritical>

	return xReturn;
 806a438:	68fb      	ldr	r3, [r7, #12]
}
 806a43a:	4618      	mov	r0, r3
 806a43c:	3710      	adds	r7, #16
 806a43e:	46bd      	mov	sp, r7
 806a440:	bd80      	pop	{r7, pc}
	...

0806a444 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 806a444:	b480      	push	{r7}
 806a446:	b085      	sub	sp, #20
 806a448:	af00      	add	r7, sp, #0
 806a44a:	6078      	str	r0, [r7, #4]
 806a44c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806a44e:	2300      	movs	r3, #0
 806a450:	60fb      	str	r3, [r7, #12]
 806a452:	e014      	b.n	806a47e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 806a454:	4a0f      	ldr	r2, [pc, #60]	; (806a494 <vQueueAddToRegistry+0x50>)
 806a456:	68fb      	ldr	r3, [r7, #12]
 806a458:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 806a45c:	2b00      	cmp	r3, #0
 806a45e:	d10b      	bne.n	806a478 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 806a460:	490c      	ldr	r1, [pc, #48]	; (806a494 <vQueueAddToRegistry+0x50>)
 806a462:	68fb      	ldr	r3, [r7, #12]
 806a464:	683a      	ldr	r2, [r7, #0]
 806a466:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 806a46a:	4a0a      	ldr	r2, [pc, #40]	; (806a494 <vQueueAddToRegistry+0x50>)
 806a46c:	68fb      	ldr	r3, [r7, #12]
 806a46e:	00db      	lsls	r3, r3, #3
 806a470:	4413      	add	r3, r2
 806a472:	687a      	ldr	r2, [r7, #4]
 806a474:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 806a476:	e006      	b.n	806a486 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806a478:	68fb      	ldr	r3, [r7, #12]
 806a47a:	3301      	adds	r3, #1
 806a47c:	60fb      	str	r3, [r7, #12]
 806a47e:	68fb      	ldr	r3, [r7, #12]
 806a480:	2b07      	cmp	r3, #7
 806a482:	d9e7      	bls.n	806a454 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 806a484:	bf00      	nop
 806a486:	bf00      	nop
 806a488:	3714      	adds	r7, #20
 806a48a:	46bd      	mov	sp, r7
 806a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a490:	4770      	bx	lr
 806a492:	bf00      	nop
 806a494:	20005838 	.word	0x20005838

0806a498 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 806a498:	b480      	push	{r7}
 806a49a:	b085      	sub	sp, #20
 806a49c:	af00      	add	r7, sp, #0
 806a49e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806a4a0:	2300      	movs	r3, #0
 806a4a2:	60fb      	str	r3, [r7, #12]
 806a4a4:	e016      	b.n	806a4d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 806a4a6:	4a10      	ldr	r2, [pc, #64]	; (806a4e8 <vQueueUnregisterQueue+0x50>)
 806a4a8:	68fb      	ldr	r3, [r7, #12]
 806a4aa:	00db      	lsls	r3, r3, #3
 806a4ac:	4413      	add	r3, r2
 806a4ae:	685b      	ldr	r3, [r3, #4]
 806a4b0:	687a      	ldr	r2, [r7, #4]
 806a4b2:	429a      	cmp	r2, r3
 806a4b4:	d10b      	bne.n	806a4ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 806a4b6:	4a0c      	ldr	r2, [pc, #48]	; (806a4e8 <vQueueUnregisterQueue+0x50>)
 806a4b8:	68fb      	ldr	r3, [r7, #12]
 806a4ba:	2100      	movs	r1, #0
 806a4bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 806a4c0:	4a09      	ldr	r2, [pc, #36]	; (806a4e8 <vQueueUnregisterQueue+0x50>)
 806a4c2:	68fb      	ldr	r3, [r7, #12]
 806a4c4:	00db      	lsls	r3, r3, #3
 806a4c6:	4413      	add	r3, r2
 806a4c8:	2200      	movs	r2, #0
 806a4ca:	605a      	str	r2, [r3, #4]
				break;
 806a4cc:	e006      	b.n	806a4dc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806a4ce:	68fb      	ldr	r3, [r7, #12]
 806a4d0:	3301      	adds	r3, #1
 806a4d2:	60fb      	str	r3, [r7, #12]
 806a4d4:	68fb      	ldr	r3, [r7, #12]
 806a4d6:	2b07      	cmp	r3, #7
 806a4d8:	d9e5      	bls.n	806a4a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 806a4da:	bf00      	nop
 806a4dc:	bf00      	nop
 806a4de:	3714      	adds	r7, #20
 806a4e0:	46bd      	mov	sp, r7
 806a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a4e6:	4770      	bx	lr
 806a4e8:	20005838 	.word	0x20005838

0806a4ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 806a4ec:	b580      	push	{r7, lr}
 806a4ee:	b086      	sub	sp, #24
 806a4f0:	af00      	add	r7, sp, #0
 806a4f2:	60f8      	str	r0, [r7, #12]
 806a4f4:	60b9      	str	r1, [r7, #8]
 806a4f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 806a4f8:	68fb      	ldr	r3, [r7, #12]
 806a4fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 806a4fc:	f001 fd92 	bl	806c024 <vPortEnterCritical>
 806a500:	697b      	ldr	r3, [r7, #20]
 806a502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806a506:	b25b      	sxtb	r3, r3
 806a508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806a50c:	d103      	bne.n	806a516 <vQueueWaitForMessageRestricted+0x2a>
 806a50e:	697b      	ldr	r3, [r7, #20]
 806a510:	2200      	movs	r2, #0
 806a512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806a516:	697b      	ldr	r3, [r7, #20]
 806a518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806a51c:	b25b      	sxtb	r3, r3
 806a51e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806a522:	d103      	bne.n	806a52c <vQueueWaitForMessageRestricted+0x40>
 806a524:	697b      	ldr	r3, [r7, #20]
 806a526:	2200      	movs	r2, #0
 806a528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806a52c:	f001 fdaa 	bl	806c084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 806a530:	697b      	ldr	r3, [r7, #20]
 806a532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806a534:	2b00      	cmp	r3, #0
 806a536:	d106      	bne.n	806a546 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 806a538:	697b      	ldr	r3, [r7, #20]
 806a53a:	3324      	adds	r3, #36	; 0x24
 806a53c:	687a      	ldr	r2, [r7, #4]
 806a53e:	68b9      	ldr	r1, [r7, #8]
 806a540:	4618      	mov	r0, r3
 806a542:	f000 fc61 	bl	806ae08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 806a546:	6978      	ldr	r0, [r7, #20]
 806a548:	f7ff fefb 	bl	806a342 <prvUnlockQueue>
	}
 806a54c:	bf00      	nop
 806a54e:	3718      	adds	r7, #24
 806a550:	46bd      	mov	sp, r7
 806a552:	bd80      	pop	{r7, pc}

0806a554 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 806a554:	b580      	push	{r7, lr}
 806a556:	b08e      	sub	sp, #56	; 0x38
 806a558:	af04      	add	r7, sp, #16
 806a55a:	60f8      	str	r0, [r7, #12]
 806a55c:	60b9      	str	r1, [r7, #8]
 806a55e:	607a      	str	r2, [r7, #4]
 806a560:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 806a562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806a564:	2b00      	cmp	r3, #0
 806a566:	d10a      	bne.n	806a57e <xTaskCreateStatic+0x2a>
	__asm volatile
 806a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a56c:	f383 8811 	msr	BASEPRI, r3
 806a570:	f3bf 8f6f 	isb	sy
 806a574:	f3bf 8f4f 	dsb	sy
 806a578:	623b      	str	r3, [r7, #32]
}
 806a57a:	bf00      	nop
 806a57c:	e7fe      	b.n	806a57c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 806a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806a580:	2b00      	cmp	r3, #0
 806a582:	d10a      	bne.n	806a59a <xTaskCreateStatic+0x46>
	__asm volatile
 806a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a588:	f383 8811 	msr	BASEPRI, r3
 806a58c:	f3bf 8f6f 	isb	sy
 806a590:	f3bf 8f4f 	dsb	sy
 806a594:	61fb      	str	r3, [r7, #28]
}
 806a596:	bf00      	nop
 806a598:	e7fe      	b.n	806a598 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 806a59a:	23bc      	movs	r3, #188	; 0xbc
 806a59c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 806a59e:	693b      	ldr	r3, [r7, #16]
 806a5a0:	2bbc      	cmp	r3, #188	; 0xbc
 806a5a2:	d00a      	beq.n	806a5ba <xTaskCreateStatic+0x66>
	__asm volatile
 806a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a5a8:	f383 8811 	msr	BASEPRI, r3
 806a5ac:	f3bf 8f6f 	isb	sy
 806a5b0:	f3bf 8f4f 	dsb	sy
 806a5b4:	61bb      	str	r3, [r7, #24]
}
 806a5b6:	bf00      	nop
 806a5b8:	e7fe      	b.n	806a5b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 806a5ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 806a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806a5be:	2b00      	cmp	r3, #0
 806a5c0:	d01e      	beq.n	806a600 <xTaskCreateStatic+0xac>
 806a5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806a5c4:	2b00      	cmp	r3, #0
 806a5c6:	d01b      	beq.n	806a600 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 806a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806a5ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 806a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806a5ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806a5d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 806a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806a5d4:	2202      	movs	r2, #2
 806a5d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 806a5da:	2300      	movs	r3, #0
 806a5dc:	9303      	str	r3, [sp, #12]
 806a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806a5e0:	9302      	str	r3, [sp, #8]
 806a5e2:	f107 0314 	add.w	r3, r7, #20
 806a5e6:	9301      	str	r3, [sp, #4]
 806a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a5ea:	9300      	str	r3, [sp, #0]
 806a5ec:	683b      	ldr	r3, [r7, #0]
 806a5ee:	687a      	ldr	r2, [r7, #4]
 806a5f0:	68b9      	ldr	r1, [r7, #8]
 806a5f2:	68f8      	ldr	r0, [r7, #12]
 806a5f4:	f000 f850 	bl	806a698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 806a5f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806a5fa:	f000 f8f3 	bl	806a7e4 <prvAddNewTaskToReadyList>
 806a5fe:	e001      	b.n	806a604 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 806a600:	2300      	movs	r3, #0
 806a602:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 806a604:	697b      	ldr	r3, [r7, #20]
	}
 806a606:	4618      	mov	r0, r3
 806a608:	3728      	adds	r7, #40	; 0x28
 806a60a:	46bd      	mov	sp, r7
 806a60c:	bd80      	pop	{r7, pc}

0806a60e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 806a60e:	b580      	push	{r7, lr}
 806a610:	b08c      	sub	sp, #48	; 0x30
 806a612:	af04      	add	r7, sp, #16
 806a614:	60f8      	str	r0, [r7, #12]
 806a616:	60b9      	str	r1, [r7, #8]
 806a618:	603b      	str	r3, [r7, #0]
 806a61a:	4613      	mov	r3, r2
 806a61c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 806a61e:	88fb      	ldrh	r3, [r7, #6]
 806a620:	009b      	lsls	r3, r3, #2
 806a622:	4618      	mov	r0, r3
 806a624:	f001 fe20 	bl	806c268 <pvPortMalloc>
 806a628:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 806a62a:	697b      	ldr	r3, [r7, #20]
 806a62c:	2b00      	cmp	r3, #0
 806a62e:	d00e      	beq.n	806a64e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 806a630:	20bc      	movs	r0, #188	; 0xbc
 806a632:	f001 fe19 	bl	806c268 <pvPortMalloc>
 806a636:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 806a638:	69fb      	ldr	r3, [r7, #28]
 806a63a:	2b00      	cmp	r3, #0
 806a63c:	d003      	beq.n	806a646 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 806a63e:	69fb      	ldr	r3, [r7, #28]
 806a640:	697a      	ldr	r2, [r7, #20]
 806a642:	631a      	str	r2, [r3, #48]	; 0x30
 806a644:	e005      	b.n	806a652 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 806a646:	6978      	ldr	r0, [r7, #20]
 806a648:	f001 feda 	bl	806c400 <vPortFree>
 806a64c:	e001      	b.n	806a652 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 806a64e:	2300      	movs	r3, #0
 806a650:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 806a652:	69fb      	ldr	r3, [r7, #28]
 806a654:	2b00      	cmp	r3, #0
 806a656:	d017      	beq.n	806a688 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806a658:	69fb      	ldr	r3, [r7, #28]
 806a65a:	2200      	movs	r2, #0
 806a65c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 806a660:	88fa      	ldrh	r2, [r7, #6]
 806a662:	2300      	movs	r3, #0
 806a664:	9303      	str	r3, [sp, #12]
 806a666:	69fb      	ldr	r3, [r7, #28]
 806a668:	9302      	str	r3, [sp, #8]
 806a66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a66c:	9301      	str	r3, [sp, #4]
 806a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806a670:	9300      	str	r3, [sp, #0]
 806a672:	683b      	ldr	r3, [r7, #0]
 806a674:	68b9      	ldr	r1, [r7, #8]
 806a676:	68f8      	ldr	r0, [r7, #12]
 806a678:	f000 f80e 	bl	806a698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 806a67c:	69f8      	ldr	r0, [r7, #28]
 806a67e:	f000 f8b1 	bl	806a7e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 806a682:	2301      	movs	r3, #1
 806a684:	61bb      	str	r3, [r7, #24]
 806a686:	e002      	b.n	806a68e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 806a688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806a68c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 806a68e:	69bb      	ldr	r3, [r7, #24]
	}
 806a690:	4618      	mov	r0, r3
 806a692:	3720      	adds	r7, #32
 806a694:	46bd      	mov	sp, r7
 806a696:	bd80      	pop	{r7, pc}

0806a698 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 806a698:	b580      	push	{r7, lr}
 806a69a:	b088      	sub	sp, #32
 806a69c:	af00      	add	r7, sp, #0
 806a69e:	60f8      	str	r0, [r7, #12]
 806a6a0:	60b9      	str	r1, [r7, #8]
 806a6a2:	607a      	str	r2, [r7, #4]
 806a6a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 806a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a6a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 806a6aa:	687b      	ldr	r3, [r7, #4]
 806a6ac:	009b      	lsls	r3, r3, #2
 806a6ae:	461a      	mov	r2, r3
 806a6b0:	21a5      	movs	r1, #165	; 0xa5
 806a6b2:	f001 fffd 	bl	806c6b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 806a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a6b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806a6ba:	687b      	ldr	r3, [r7, #4]
 806a6bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 806a6c0:	3b01      	subs	r3, #1
 806a6c2:	009b      	lsls	r3, r3, #2
 806a6c4:	4413      	add	r3, r2
 806a6c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 806a6c8:	69bb      	ldr	r3, [r7, #24]
 806a6ca:	f023 0307 	bic.w	r3, r3, #7
 806a6ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 806a6d0:	69bb      	ldr	r3, [r7, #24]
 806a6d2:	f003 0307 	and.w	r3, r3, #7
 806a6d6:	2b00      	cmp	r3, #0
 806a6d8:	d00a      	beq.n	806a6f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 806a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a6de:	f383 8811 	msr	BASEPRI, r3
 806a6e2:	f3bf 8f6f 	isb	sy
 806a6e6:	f3bf 8f4f 	dsb	sy
 806a6ea:	617b      	str	r3, [r7, #20]
}
 806a6ec:	bf00      	nop
 806a6ee:	e7fe      	b.n	806a6ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 806a6f0:	68bb      	ldr	r3, [r7, #8]
 806a6f2:	2b00      	cmp	r3, #0
 806a6f4:	d01f      	beq.n	806a736 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 806a6f6:	2300      	movs	r3, #0
 806a6f8:	61fb      	str	r3, [r7, #28]
 806a6fa:	e012      	b.n	806a722 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 806a6fc:	68ba      	ldr	r2, [r7, #8]
 806a6fe:	69fb      	ldr	r3, [r7, #28]
 806a700:	4413      	add	r3, r2
 806a702:	7819      	ldrb	r1, [r3, #0]
 806a704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806a706:	69fb      	ldr	r3, [r7, #28]
 806a708:	4413      	add	r3, r2
 806a70a:	3334      	adds	r3, #52	; 0x34
 806a70c:	460a      	mov	r2, r1
 806a70e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 806a710:	68ba      	ldr	r2, [r7, #8]
 806a712:	69fb      	ldr	r3, [r7, #28]
 806a714:	4413      	add	r3, r2
 806a716:	781b      	ldrb	r3, [r3, #0]
 806a718:	2b00      	cmp	r3, #0
 806a71a:	d006      	beq.n	806a72a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 806a71c:	69fb      	ldr	r3, [r7, #28]
 806a71e:	3301      	adds	r3, #1
 806a720:	61fb      	str	r3, [r7, #28]
 806a722:	69fb      	ldr	r3, [r7, #28]
 806a724:	2b0f      	cmp	r3, #15
 806a726:	d9e9      	bls.n	806a6fc <prvInitialiseNewTask+0x64>
 806a728:	e000      	b.n	806a72c <prvInitialiseNewTask+0x94>
			{
				break;
 806a72a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 806a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a72e:	2200      	movs	r2, #0
 806a730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 806a734:	e003      	b.n	806a73e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 806a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a738:	2200      	movs	r2, #0
 806a73a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 806a73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806a740:	2b37      	cmp	r3, #55	; 0x37
 806a742:	d901      	bls.n	806a748 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 806a744:	2337      	movs	r3, #55	; 0x37
 806a746:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 806a748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806a74c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 806a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806a752:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 806a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a756:	2200      	movs	r2, #0
 806a758:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 806a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a75c:	3304      	adds	r3, #4
 806a75e:	4618      	mov	r0, r3
 806a760:	f7fe fda0 	bl	80692a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 806a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a766:	3318      	adds	r3, #24
 806a768:	4618      	mov	r0, r3
 806a76a:	f7fe fd9b 	bl	80692a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 806a76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806a772:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806a776:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 806a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a77c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 806a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806a782:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 806a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a786:	2200      	movs	r2, #0
 806a788:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 806a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a78e:	2200      	movs	r2, #0
 806a790:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 806a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a796:	3354      	adds	r3, #84	; 0x54
 806a798:	2260      	movs	r2, #96	; 0x60
 806a79a:	2100      	movs	r1, #0
 806a79c:	4618      	mov	r0, r3
 806a79e:	f001 ff87 	bl	806c6b0 <memset>
 806a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a7a4:	4a0c      	ldr	r2, [pc, #48]	; (806a7d8 <prvInitialiseNewTask+0x140>)
 806a7a6:	659a      	str	r2, [r3, #88]	; 0x58
 806a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a7aa:	4a0c      	ldr	r2, [pc, #48]	; (806a7dc <prvInitialiseNewTask+0x144>)
 806a7ac:	65da      	str	r2, [r3, #92]	; 0x5c
 806a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a7b0:	4a0b      	ldr	r2, [pc, #44]	; (806a7e0 <prvInitialiseNewTask+0x148>)
 806a7b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 806a7b4:	683a      	ldr	r2, [r7, #0]
 806a7b6:	68f9      	ldr	r1, [r7, #12]
 806a7b8:	69b8      	ldr	r0, [r7, #24]
 806a7ba:	f001 fb09 	bl	806bdd0 <pxPortInitialiseStack>
 806a7be:	4602      	mov	r2, r0
 806a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a7c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 806a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a7c6:	2b00      	cmp	r3, #0
 806a7c8:	d002      	beq.n	806a7d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 806a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a7cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806a7ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 806a7d0:	bf00      	nop
 806a7d2:	3720      	adds	r7, #32
 806a7d4:	46bd      	mov	sp, r7
 806a7d6:	bd80      	pop	{r7, pc}
 806a7d8:	0806d66c 	.word	0x0806d66c
 806a7dc:	0806d68c 	.word	0x0806d68c
 806a7e0:	0806d64c 	.word	0x0806d64c

0806a7e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 806a7e4:	b580      	push	{r7, lr}
 806a7e6:	b082      	sub	sp, #8
 806a7e8:	af00      	add	r7, sp, #0
 806a7ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 806a7ec:	f001 fc1a 	bl	806c024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 806a7f0:	4b2d      	ldr	r3, [pc, #180]	; (806a8a8 <prvAddNewTaskToReadyList+0xc4>)
 806a7f2:	681b      	ldr	r3, [r3, #0]
 806a7f4:	3301      	adds	r3, #1
 806a7f6:	4a2c      	ldr	r2, [pc, #176]	; (806a8a8 <prvAddNewTaskToReadyList+0xc4>)
 806a7f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 806a7fa:	4b2c      	ldr	r3, [pc, #176]	; (806a8ac <prvAddNewTaskToReadyList+0xc8>)
 806a7fc:	681b      	ldr	r3, [r3, #0]
 806a7fe:	2b00      	cmp	r3, #0
 806a800:	d109      	bne.n	806a816 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 806a802:	4a2a      	ldr	r2, [pc, #168]	; (806a8ac <prvAddNewTaskToReadyList+0xc8>)
 806a804:	687b      	ldr	r3, [r7, #4]
 806a806:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 806a808:	4b27      	ldr	r3, [pc, #156]	; (806a8a8 <prvAddNewTaskToReadyList+0xc4>)
 806a80a:	681b      	ldr	r3, [r3, #0]
 806a80c:	2b01      	cmp	r3, #1
 806a80e:	d110      	bne.n	806a832 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 806a810:	f000 fc26 	bl	806b060 <prvInitialiseTaskLists>
 806a814:	e00d      	b.n	806a832 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 806a816:	4b26      	ldr	r3, [pc, #152]	; (806a8b0 <prvAddNewTaskToReadyList+0xcc>)
 806a818:	681b      	ldr	r3, [r3, #0]
 806a81a:	2b00      	cmp	r3, #0
 806a81c:	d109      	bne.n	806a832 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 806a81e:	4b23      	ldr	r3, [pc, #140]	; (806a8ac <prvAddNewTaskToReadyList+0xc8>)
 806a820:	681b      	ldr	r3, [r3, #0]
 806a822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806a824:	687b      	ldr	r3, [r7, #4]
 806a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806a828:	429a      	cmp	r2, r3
 806a82a:	d802      	bhi.n	806a832 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 806a82c:	4a1f      	ldr	r2, [pc, #124]	; (806a8ac <prvAddNewTaskToReadyList+0xc8>)
 806a82e:	687b      	ldr	r3, [r7, #4]
 806a830:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 806a832:	4b20      	ldr	r3, [pc, #128]	; (806a8b4 <prvAddNewTaskToReadyList+0xd0>)
 806a834:	681b      	ldr	r3, [r3, #0]
 806a836:	3301      	adds	r3, #1
 806a838:	4a1e      	ldr	r2, [pc, #120]	; (806a8b4 <prvAddNewTaskToReadyList+0xd0>)
 806a83a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 806a83c:	4b1d      	ldr	r3, [pc, #116]	; (806a8b4 <prvAddNewTaskToReadyList+0xd0>)
 806a83e:	681a      	ldr	r2, [r3, #0]
 806a840:	687b      	ldr	r3, [r7, #4]
 806a842:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 806a844:	687b      	ldr	r3, [r7, #4]
 806a846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806a848:	4b1b      	ldr	r3, [pc, #108]	; (806a8b8 <prvAddNewTaskToReadyList+0xd4>)
 806a84a:	681b      	ldr	r3, [r3, #0]
 806a84c:	429a      	cmp	r2, r3
 806a84e:	d903      	bls.n	806a858 <prvAddNewTaskToReadyList+0x74>
 806a850:	687b      	ldr	r3, [r7, #4]
 806a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806a854:	4a18      	ldr	r2, [pc, #96]	; (806a8b8 <prvAddNewTaskToReadyList+0xd4>)
 806a856:	6013      	str	r3, [r2, #0]
 806a858:	687b      	ldr	r3, [r7, #4]
 806a85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806a85c:	4613      	mov	r3, r2
 806a85e:	009b      	lsls	r3, r3, #2
 806a860:	4413      	add	r3, r2
 806a862:	009b      	lsls	r3, r3, #2
 806a864:	4a15      	ldr	r2, [pc, #84]	; (806a8bc <prvAddNewTaskToReadyList+0xd8>)
 806a866:	441a      	add	r2, r3
 806a868:	687b      	ldr	r3, [r7, #4]
 806a86a:	3304      	adds	r3, #4
 806a86c:	4619      	mov	r1, r3
 806a86e:	4610      	mov	r0, r2
 806a870:	f7fe fd25 	bl	80692be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 806a874:	f001 fc06 	bl	806c084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 806a878:	4b0d      	ldr	r3, [pc, #52]	; (806a8b0 <prvAddNewTaskToReadyList+0xcc>)
 806a87a:	681b      	ldr	r3, [r3, #0]
 806a87c:	2b00      	cmp	r3, #0
 806a87e:	d00e      	beq.n	806a89e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 806a880:	4b0a      	ldr	r3, [pc, #40]	; (806a8ac <prvAddNewTaskToReadyList+0xc8>)
 806a882:	681b      	ldr	r3, [r3, #0]
 806a884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806a886:	687b      	ldr	r3, [r7, #4]
 806a888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806a88a:	429a      	cmp	r2, r3
 806a88c:	d207      	bcs.n	806a89e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 806a88e:	4b0c      	ldr	r3, [pc, #48]	; (806a8c0 <prvAddNewTaskToReadyList+0xdc>)
 806a890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806a894:	601a      	str	r2, [r3, #0]
 806a896:	f3bf 8f4f 	dsb	sy
 806a89a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 806a89e:	bf00      	nop
 806a8a0:	3708      	adds	r7, #8
 806a8a2:	46bd      	mov	sp, r7
 806a8a4:	bd80      	pop	{r7, pc}
 806a8a6:	bf00      	nop
 806a8a8:	20000e34 	.word	0x20000e34
 806a8ac:	20000960 	.word	0x20000960
 806a8b0:	20000e40 	.word	0x20000e40
 806a8b4:	20000e50 	.word	0x20000e50
 806a8b8:	20000e3c 	.word	0x20000e3c
 806a8bc:	20000964 	.word	0x20000964
 806a8c0:	e000ed04 	.word	0xe000ed04

0806a8c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 806a8c4:	b580      	push	{r7, lr}
 806a8c6:	b084      	sub	sp, #16
 806a8c8:	af00      	add	r7, sp, #0
 806a8ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 806a8cc:	2300      	movs	r3, #0
 806a8ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 806a8d0:	687b      	ldr	r3, [r7, #4]
 806a8d2:	2b00      	cmp	r3, #0
 806a8d4:	d017      	beq.n	806a906 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 806a8d6:	4b13      	ldr	r3, [pc, #76]	; (806a924 <vTaskDelay+0x60>)
 806a8d8:	681b      	ldr	r3, [r3, #0]
 806a8da:	2b00      	cmp	r3, #0
 806a8dc:	d00a      	beq.n	806a8f4 <vTaskDelay+0x30>
	__asm volatile
 806a8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a8e2:	f383 8811 	msr	BASEPRI, r3
 806a8e6:	f3bf 8f6f 	isb	sy
 806a8ea:	f3bf 8f4f 	dsb	sy
 806a8ee:	60bb      	str	r3, [r7, #8]
}
 806a8f0:	bf00      	nop
 806a8f2:	e7fe      	b.n	806a8f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 806a8f4:	f000 f88a 	bl	806aa0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 806a8f8:	2100      	movs	r1, #0
 806a8fa:	6878      	ldr	r0, [r7, #4]
 806a8fc:	f000 fe0c 	bl	806b518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 806a900:	f000 f892 	bl	806aa28 <xTaskResumeAll>
 806a904:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 806a906:	68fb      	ldr	r3, [r7, #12]
 806a908:	2b00      	cmp	r3, #0
 806a90a:	d107      	bne.n	806a91c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 806a90c:	4b06      	ldr	r3, [pc, #24]	; (806a928 <vTaskDelay+0x64>)
 806a90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806a912:	601a      	str	r2, [r3, #0]
 806a914:	f3bf 8f4f 	dsb	sy
 806a918:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 806a91c:	bf00      	nop
 806a91e:	3710      	adds	r7, #16
 806a920:	46bd      	mov	sp, r7
 806a922:	bd80      	pop	{r7, pc}
 806a924:	20000e5c 	.word	0x20000e5c
 806a928:	e000ed04 	.word	0xe000ed04

0806a92c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 806a92c:	b580      	push	{r7, lr}
 806a92e:	b08a      	sub	sp, #40	; 0x28
 806a930:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 806a932:	2300      	movs	r3, #0
 806a934:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 806a936:	2300      	movs	r3, #0
 806a938:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 806a93a:	463a      	mov	r2, r7
 806a93c:	1d39      	adds	r1, r7, #4
 806a93e:	f107 0308 	add.w	r3, r7, #8
 806a942:	4618      	mov	r0, r3
 806a944:	f7fe fc5a 	bl	80691fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 806a948:	6839      	ldr	r1, [r7, #0]
 806a94a:	687b      	ldr	r3, [r7, #4]
 806a94c:	68ba      	ldr	r2, [r7, #8]
 806a94e:	9202      	str	r2, [sp, #8]
 806a950:	9301      	str	r3, [sp, #4]
 806a952:	2300      	movs	r3, #0
 806a954:	9300      	str	r3, [sp, #0]
 806a956:	2300      	movs	r3, #0
 806a958:	460a      	mov	r2, r1
 806a95a:	4924      	ldr	r1, [pc, #144]	; (806a9ec <vTaskStartScheduler+0xc0>)
 806a95c:	4824      	ldr	r0, [pc, #144]	; (806a9f0 <vTaskStartScheduler+0xc4>)
 806a95e:	f7ff fdf9 	bl	806a554 <xTaskCreateStatic>
 806a962:	4603      	mov	r3, r0
 806a964:	4a23      	ldr	r2, [pc, #140]	; (806a9f4 <vTaskStartScheduler+0xc8>)
 806a966:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 806a968:	4b22      	ldr	r3, [pc, #136]	; (806a9f4 <vTaskStartScheduler+0xc8>)
 806a96a:	681b      	ldr	r3, [r3, #0]
 806a96c:	2b00      	cmp	r3, #0
 806a96e:	d002      	beq.n	806a976 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 806a970:	2301      	movs	r3, #1
 806a972:	617b      	str	r3, [r7, #20]
 806a974:	e001      	b.n	806a97a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 806a976:	2300      	movs	r3, #0
 806a978:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 806a97a:	697b      	ldr	r3, [r7, #20]
 806a97c:	2b01      	cmp	r3, #1
 806a97e:	d102      	bne.n	806a986 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 806a980:	f000 fe1e 	bl	806b5c0 <xTimerCreateTimerTask>
 806a984:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 806a986:	697b      	ldr	r3, [r7, #20]
 806a988:	2b01      	cmp	r3, #1
 806a98a:	d11b      	bne.n	806a9c4 <vTaskStartScheduler+0x98>
	__asm volatile
 806a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a990:	f383 8811 	msr	BASEPRI, r3
 806a994:	f3bf 8f6f 	isb	sy
 806a998:	f3bf 8f4f 	dsb	sy
 806a99c:	613b      	str	r3, [r7, #16]
}
 806a99e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 806a9a0:	4b15      	ldr	r3, [pc, #84]	; (806a9f8 <vTaskStartScheduler+0xcc>)
 806a9a2:	681b      	ldr	r3, [r3, #0]
 806a9a4:	3354      	adds	r3, #84	; 0x54
 806a9a6:	4a15      	ldr	r2, [pc, #84]	; (806a9fc <vTaskStartScheduler+0xd0>)
 806a9a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 806a9aa:	4b15      	ldr	r3, [pc, #84]	; (806aa00 <vTaskStartScheduler+0xd4>)
 806a9ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806a9b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 806a9b2:	4b14      	ldr	r3, [pc, #80]	; (806aa04 <vTaskStartScheduler+0xd8>)
 806a9b4:	2201      	movs	r2, #1
 806a9b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 806a9b8:	4b13      	ldr	r3, [pc, #76]	; (806aa08 <vTaskStartScheduler+0xdc>)
 806a9ba:	2200      	movs	r2, #0
 806a9bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 806a9be:	f001 fa8f 	bl	806bee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 806a9c2:	e00e      	b.n	806a9e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 806a9c4:	697b      	ldr	r3, [r7, #20]
 806a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806a9ca:	d10a      	bne.n	806a9e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 806a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 806a9d0:	f383 8811 	msr	BASEPRI, r3
 806a9d4:	f3bf 8f6f 	isb	sy
 806a9d8:	f3bf 8f4f 	dsb	sy
 806a9dc:	60fb      	str	r3, [r7, #12]
}
 806a9de:	bf00      	nop
 806a9e0:	e7fe      	b.n	806a9e0 <vTaskStartScheduler+0xb4>
}
 806a9e2:	bf00      	nop
 806a9e4:	3718      	adds	r7, #24
 806a9e6:	46bd      	mov	sp, r7
 806a9e8:	bd80      	pop	{r7, pc}
 806a9ea:	bf00      	nop
 806a9ec:	0806d4a4 	.word	0x0806d4a4
 806a9f0:	0806b031 	.word	0x0806b031
 806a9f4:	20000e58 	.word	0x20000e58
 806a9f8:	20000960 	.word	0x20000960
 806a9fc:	20000028 	.word	0x20000028
 806aa00:	20000e54 	.word	0x20000e54
 806aa04:	20000e40 	.word	0x20000e40
 806aa08:	20000e38 	.word	0x20000e38

0806aa0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 806aa0c:	b480      	push	{r7}
 806aa0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 806aa10:	4b04      	ldr	r3, [pc, #16]	; (806aa24 <vTaskSuspendAll+0x18>)
 806aa12:	681b      	ldr	r3, [r3, #0]
 806aa14:	3301      	adds	r3, #1
 806aa16:	4a03      	ldr	r2, [pc, #12]	; (806aa24 <vTaskSuspendAll+0x18>)
 806aa18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 806aa1a:	bf00      	nop
 806aa1c:	46bd      	mov	sp, r7
 806aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806aa22:	4770      	bx	lr
 806aa24:	20000e5c 	.word	0x20000e5c

0806aa28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 806aa28:	b580      	push	{r7, lr}
 806aa2a:	b084      	sub	sp, #16
 806aa2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 806aa2e:	2300      	movs	r3, #0
 806aa30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 806aa32:	2300      	movs	r3, #0
 806aa34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 806aa36:	4b42      	ldr	r3, [pc, #264]	; (806ab40 <xTaskResumeAll+0x118>)
 806aa38:	681b      	ldr	r3, [r3, #0]
 806aa3a:	2b00      	cmp	r3, #0
 806aa3c:	d10a      	bne.n	806aa54 <xTaskResumeAll+0x2c>
	__asm volatile
 806aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806aa42:	f383 8811 	msr	BASEPRI, r3
 806aa46:	f3bf 8f6f 	isb	sy
 806aa4a:	f3bf 8f4f 	dsb	sy
 806aa4e:	603b      	str	r3, [r7, #0]
}
 806aa50:	bf00      	nop
 806aa52:	e7fe      	b.n	806aa52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 806aa54:	f001 fae6 	bl	806c024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 806aa58:	4b39      	ldr	r3, [pc, #228]	; (806ab40 <xTaskResumeAll+0x118>)
 806aa5a:	681b      	ldr	r3, [r3, #0]
 806aa5c:	3b01      	subs	r3, #1
 806aa5e:	4a38      	ldr	r2, [pc, #224]	; (806ab40 <xTaskResumeAll+0x118>)
 806aa60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 806aa62:	4b37      	ldr	r3, [pc, #220]	; (806ab40 <xTaskResumeAll+0x118>)
 806aa64:	681b      	ldr	r3, [r3, #0]
 806aa66:	2b00      	cmp	r3, #0
 806aa68:	d162      	bne.n	806ab30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 806aa6a:	4b36      	ldr	r3, [pc, #216]	; (806ab44 <xTaskResumeAll+0x11c>)
 806aa6c:	681b      	ldr	r3, [r3, #0]
 806aa6e:	2b00      	cmp	r3, #0
 806aa70:	d05e      	beq.n	806ab30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 806aa72:	e02f      	b.n	806aad4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806aa74:	4b34      	ldr	r3, [pc, #208]	; (806ab48 <xTaskResumeAll+0x120>)
 806aa76:	68db      	ldr	r3, [r3, #12]
 806aa78:	68db      	ldr	r3, [r3, #12]
 806aa7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 806aa7c:	68fb      	ldr	r3, [r7, #12]
 806aa7e:	3318      	adds	r3, #24
 806aa80:	4618      	mov	r0, r3
 806aa82:	f7fe fc79 	bl	8069378 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 806aa86:	68fb      	ldr	r3, [r7, #12]
 806aa88:	3304      	adds	r3, #4
 806aa8a:	4618      	mov	r0, r3
 806aa8c:	f7fe fc74 	bl	8069378 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 806aa90:	68fb      	ldr	r3, [r7, #12]
 806aa92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806aa94:	4b2d      	ldr	r3, [pc, #180]	; (806ab4c <xTaskResumeAll+0x124>)
 806aa96:	681b      	ldr	r3, [r3, #0]
 806aa98:	429a      	cmp	r2, r3
 806aa9a:	d903      	bls.n	806aaa4 <xTaskResumeAll+0x7c>
 806aa9c:	68fb      	ldr	r3, [r7, #12]
 806aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806aaa0:	4a2a      	ldr	r2, [pc, #168]	; (806ab4c <xTaskResumeAll+0x124>)
 806aaa2:	6013      	str	r3, [r2, #0]
 806aaa4:	68fb      	ldr	r3, [r7, #12]
 806aaa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806aaa8:	4613      	mov	r3, r2
 806aaaa:	009b      	lsls	r3, r3, #2
 806aaac:	4413      	add	r3, r2
 806aaae:	009b      	lsls	r3, r3, #2
 806aab0:	4a27      	ldr	r2, [pc, #156]	; (806ab50 <xTaskResumeAll+0x128>)
 806aab2:	441a      	add	r2, r3
 806aab4:	68fb      	ldr	r3, [r7, #12]
 806aab6:	3304      	adds	r3, #4
 806aab8:	4619      	mov	r1, r3
 806aaba:	4610      	mov	r0, r2
 806aabc:	f7fe fbff 	bl	80692be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 806aac0:	68fb      	ldr	r3, [r7, #12]
 806aac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806aac4:	4b23      	ldr	r3, [pc, #140]	; (806ab54 <xTaskResumeAll+0x12c>)
 806aac6:	681b      	ldr	r3, [r3, #0]
 806aac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806aaca:	429a      	cmp	r2, r3
 806aacc:	d302      	bcc.n	806aad4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 806aace:	4b22      	ldr	r3, [pc, #136]	; (806ab58 <xTaskResumeAll+0x130>)
 806aad0:	2201      	movs	r2, #1
 806aad2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 806aad4:	4b1c      	ldr	r3, [pc, #112]	; (806ab48 <xTaskResumeAll+0x120>)
 806aad6:	681b      	ldr	r3, [r3, #0]
 806aad8:	2b00      	cmp	r3, #0
 806aada:	d1cb      	bne.n	806aa74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 806aadc:	68fb      	ldr	r3, [r7, #12]
 806aade:	2b00      	cmp	r3, #0
 806aae0:	d001      	beq.n	806aae6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 806aae2:	f000 fb5f 	bl	806b1a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 806aae6:	4b1d      	ldr	r3, [pc, #116]	; (806ab5c <xTaskResumeAll+0x134>)
 806aae8:	681b      	ldr	r3, [r3, #0]
 806aaea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 806aaec:	687b      	ldr	r3, [r7, #4]
 806aaee:	2b00      	cmp	r3, #0
 806aaf0:	d010      	beq.n	806ab14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 806aaf2:	f000 f847 	bl	806ab84 <xTaskIncrementTick>
 806aaf6:	4603      	mov	r3, r0
 806aaf8:	2b00      	cmp	r3, #0
 806aafa:	d002      	beq.n	806ab02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 806aafc:	4b16      	ldr	r3, [pc, #88]	; (806ab58 <xTaskResumeAll+0x130>)
 806aafe:	2201      	movs	r2, #1
 806ab00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 806ab02:	687b      	ldr	r3, [r7, #4]
 806ab04:	3b01      	subs	r3, #1
 806ab06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 806ab08:	687b      	ldr	r3, [r7, #4]
 806ab0a:	2b00      	cmp	r3, #0
 806ab0c:	d1f1      	bne.n	806aaf2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 806ab0e:	4b13      	ldr	r3, [pc, #76]	; (806ab5c <xTaskResumeAll+0x134>)
 806ab10:	2200      	movs	r2, #0
 806ab12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 806ab14:	4b10      	ldr	r3, [pc, #64]	; (806ab58 <xTaskResumeAll+0x130>)
 806ab16:	681b      	ldr	r3, [r3, #0]
 806ab18:	2b00      	cmp	r3, #0
 806ab1a:	d009      	beq.n	806ab30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 806ab1c:	2301      	movs	r3, #1
 806ab1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 806ab20:	4b0f      	ldr	r3, [pc, #60]	; (806ab60 <xTaskResumeAll+0x138>)
 806ab22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806ab26:	601a      	str	r2, [r3, #0]
 806ab28:	f3bf 8f4f 	dsb	sy
 806ab2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 806ab30:	f001 faa8 	bl	806c084 <vPortExitCritical>

	return xAlreadyYielded;
 806ab34:	68bb      	ldr	r3, [r7, #8]
}
 806ab36:	4618      	mov	r0, r3
 806ab38:	3710      	adds	r7, #16
 806ab3a:	46bd      	mov	sp, r7
 806ab3c:	bd80      	pop	{r7, pc}
 806ab3e:	bf00      	nop
 806ab40:	20000e5c 	.word	0x20000e5c
 806ab44:	20000e34 	.word	0x20000e34
 806ab48:	20000df4 	.word	0x20000df4
 806ab4c:	20000e3c 	.word	0x20000e3c
 806ab50:	20000964 	.word	0x20000964
 806ab54:	20000960 	.word	0x20000960
 806ab58:	20000e48 	.word	0x20000e48
 806ab5c:	20000e44 	.word	0x20000e44
 806ab60:	e000ed04 	.word	0xe000ed04

0806ab64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 806ab64:	b480      	push	{r7}
 806ab66:	b083      	sub	sp, #12
 806ab68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 806ab6a:	4b05      	ldr	r3, [pc, #20]	; (806ab80 <xTaskGetTickCount+0x1c>)
 806ab6c:	681b      	ldr	r3, [r3, #0]
 806ab6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 806ab70:	687b      	ldr	r3, [r7, #4]
}
 806ab72:	4618      	mov	r0, r3
 806ab74:	370c      	adds	r7, #12
 806ab76:	46bd      	mov	sp, r7
 806ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ab7c:	4770      	bx	lr
 806ab7e:	bf00      	nop
 806ab80:	20000e38 	.word	0x20000e38

0806ab84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 806ab84:	b580      	push	{r7, lr}
 806ab86:	b086      	sub	sp, #24
 806ab88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 806ab8a:	2300      	movs	r3, #0
 806ab8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 806ab8e:	4b4f      	ldr	r3, [pc, #316]	; (806accc <xTaskIncrementTick+0x148>)
 806ab90:	681b      	ldr	r3, [r3, #0]
 806ab92:	2b00      	cmp	r3, #0
 806ab94:	f040 808f 	bne.w	806acb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 806ab98:	4b4d      	ldr	r3, [pc, #308]	; (806acd0 <xTaskIncrementTick+0x14c>)
 806ab9a:	681b      	ldr	r3, [r3, #0]
 806ab9c:	3301      	adds	r3, #1
 806ab9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 806aba0:	4a4b      	ldr	r2, [pc, #300]	; (806acd0 <xTaskIncrementTick+0x14c>)
 806aba2:	693b      	ldr	r3, [r7, #16]
 806aba4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 806aba6:	693b      	ldr	r3, [r7, #16]
 806aba8:	2b00      	cmp	r3, #0
 806abaa:	d120      	bne.n	806abee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 806abac:	4b49      	ldr	r3, [pc, #292]	; (806acd4 <xTaskIncrementTick+0x150>)
 806abae:	681b      	ldr	r3, [r3, #0]
 806abb0:	681b      	ldr	r3, [r3, #0]
 806abb2:	2b00      	cmp	r3, #0
 806abb4:	d00a      	beq.n	806abcc <xTaskIncrementTick+0x48>
	__asm volatile
 806abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 806abba:	f383 8811 	msr	BASEPRI, r3
 806abbe:	f3bf 8f6f 	isb	sy
 806abc2:	f3bf 8f4f 	dsb	sy
 806abc6:	603b      	str	r3, [r7, #0]
}
 806abc8:	bf00      	nop
 806abca:	e7fe      	b.n	806abca <xTaskIncrementTick+0x46>
 806abcc:	4b41      	ldr	r3, [pc, #260]	; (806acd4 <xTaskIncrementTick+0x150>)
 806abce:	681b      	ldr	r3, [r3, #0]
 806abd0:	60fb      	str	r3, [r7, #12]
 806abd2:	4b41      	ldr	r3, [pc, #260]	; (806acd8 <xTaskIncrementTick+0x154>)
 806abd4:	681b      	ldr	r3, [r3, #0]
 806abd6:	4a3f      	ldr	r2, [pc, #252]	; (806acd4 <xTaskIncrementTick+0x150>)
 806abd8:	6013      	str	r3, [r2, #0]
 806abda:	4a3f      	ldr	r2, [pc, #252]	; (806acd8 <xTaskIncrementTick+0x154>)
 806abdc:	68fb      	ldr	r3, [r7, #12]
 806abde:	6013      	str	r3, [r2, #0]
 806abe0:	4b3e      	ldr	r3, [pc, #248]	; (806acdc <xTaskIncrementTick+0x158>)
 806abe2:	681b      	ldr	r3, [r3, #0]
 806abe4:	3301      	adds	r3, #1
 806abe6:	4a3d      	ldr	r2, [pc, #244]	; (806acdc <xTaskIncrementTick+0x158>)
 806abe8:	6013      	str	r3, [r2, #0]
 806abea:	f000 fadb 	bl	806b1a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 806abee:	4b3c      	ldr	r3, [pc, #240]	; (806ace0 <xTaskIncrementTick+0x15c>)
 806abf0:	681b      	ldr	r3, [r3, #0]
 806abf2:	693a      	ldr	r2, [r7, #16]
 806abf4:	429a      	cmp	r2, r3
 806abf6:	d349      	bcc.n	806ac8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 806abf8:	4b36      	ldr	r3, [pc, #216]	; (806acd4 <xTaskIncrementTick+0x150>)
 806abfa:	681b      	ldr	r3, [r3, #0]
 806abfc:	681b      	ldr	r3, [r3, #0]
 806abfe:	2b00      	cmp	r3, #0
 806ac00:	d104      	bne.n	806ac0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806ac02:	4b37      	ldr	r3, [pc, #220]	; (806ace0 <xTaskIncrementTick+0x15c>)
 806ac04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806ac08:	601a      	str	r2, [r3, #0]
					break;
 806ac0a:	e03f      	b.n	806ac8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806ac0c:	4b31      	ldr	r3, [pc, #196]	; (806acd4 <xTaskIncrementTick+0x150>)
 806ac0e:	681b      	ldr	r3, [r3, #0]
 806ac10:	68db      	ldr	r3, [r3, #12]
 806ac12:	68db      	ldr	r3, [r3, #12]
 806ac14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 806ac16:	68bb      	ldr	r3, [r7, #8]
 806ac18:	685b      	ldr	r3, [r3, #4]
 806ac1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 806ac1c:	693a      	ldr	r2, [r7, #16]
 806ac1e:	687b      	ldr	r3, [r7, #4]
 806ac20:	429a      	cmp	r2, r3
 806ac22:	d203      	bcs.n	806ac2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 806ac24:	4a2e      	ldr	r2, [pc, #184]	; (806ace0 <xTaskIncrementTick+0x15c>)
 806ac26:	687b      	ldr	r3, [r7, #4]
 806ac28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 806ac2a:	e02f      	b.n	806ac8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 806ac2c:	68bb      	ldr	r3, [r7, #8]
 806ac2e:	3304      	adds	r3, #4
 806ac30:	4618      	mov	r0, r3
 806ac32:	f7fe fba1 	bl	8069378 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 806ac36:	68bb      	ldr	r3, [r7, #8]
 806ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806ac3a:	2b00      	cmp	r3, #0
 806ac3c:	d004      	beq.n	806ac48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 806ac3e:	68bb      	ldr	r3, [r7, #8]
 806ac40:	3318      	adds	r3, #24
 806ac42:	4618      	mov	r0, r3
 806ac44:	f7fe fb98 	bl	8069378 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 806ac48:	68bb      	ldr	r3, [r7, #8]
 806ac4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806ac4c:	4b25      	ldr	r3, [pc, #148]	; (806ace4 <xTaskIncrementTick+0x160>)
 806ac4e:	681b      	ldr	r3, [r3, #0]
 806ac50:	429a      	cmp	r2, r3
 806ac52:	d903      	bls.n	806ac5c <xTaskIncrementTick+0xd8>
 806ac54:	68bb      	ldr	r3, [r7, #8]
 806ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806ac58:	4a22      	ldr	r2, [pc, #136]	; (806ace4 <xTaskIncrementTick+0x160>)
 806ac5a:	6013      	str	r3, [r2, #0]
 806ac5c:	68bb      	ldr	r3, [r7, #8]
 806ac5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806ac60:	4613      	mov	r3, r2
 806ac62:	009b      	lsls	r3, r3, #2
 806ac64:	4413      	add	r3, r2
 806ac66:	009b      	lsls	r3, r3, #2
 806ac68:	4a1f      	ldr	r2, [pc, #124]	; (806ace8 <xTaskIncrementTick+0x164>)
 806ac6a:	441a      	add	r2, r3
 806ac6c:	68bb      	ldr	r3, [r7, #8]
 806ac6e:	3304      	adds	r3, #4
 806ac70:	4619      	mov	r1, r3
 806ac72:	4610      	mov	r0, r2
 806ac74:	f7fe fb23 	bl	80692be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 806ac78:	68bb      	ldr	r3, [r7, #8]
 806ac7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806ac7c:	4b1b      	ldr	r3, [pc, #108]	; (806acec <xTaskIncrementTick+0x168>)
 806ac7e:	681b      	ldr	r3, [r3, #0]
 806ac80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806ac82:	429a      	cmp	r2, r3
 806ac84:	d3b8      	bcc.n	806abf8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 806ac86:	2301      	movs	r3, #1
 806ac88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 806ac8a:	e7b5      	b.n	806abf8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 806ac8c:	4b17      	ldr	r3, [pc, #92]	; (806acec <xTaskIncrementTick+0x168>)
 806ac8e:	681b      	ldr	r3, [r3, #0]
 806ac90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806ac92:	4915      	ldr	r1, [pc, #84]	; (806ace8 <xTaskIncrementTick+0x164>)
 806ac94:	4613      	mov	r3, r2
 806ac96:	009b      	lsls	r3, r3, #2
 806ac98:	4413      	add	r3, r2
 806ac9a:	009b      	lsls	r3, r3, #2
 806ac9c:	440b      	add	r3, r1
 806ac9e:	681b      	ldr	r3, [r3, #0]
 806aca0:	2b01      	cmp	r3, #1
 806aca2:	d901      	bls.n	806aca8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 806aca4:	2301      	movs	r3, #1
 806aca6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 806aca8:	4b11      	ldr	r3, [pc, #68]	; (806acf0 <xTaskIncrementTick+0x16c>)
 806acaa:	681b      	ldr	r3, [r3, #0]
 806acac:	2b00      	cmp	r3, #0
 806acae:	d007      	beq.n	806acc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 806acb0:	2301      	movs	r3, #1
 806acb2:	617b      	str	r3, [r7, #20]
 806acb4:	e004      	b.n	806acc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 806acb6:	4b0f      	ldr	r3, [pc, #60]	; (806acf4 <xTaskIncrementTick+0x170>)
 806acb8:	681b      	ldr	r3, [r3, #0]
 806acba:	3301      	adds	r3, #1
 806acbc:	4a0d      	ldr	r2, [pc, #52]	; (806acf4 <xTaskIncrementTick+0x170>)
 806acbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 806acc0:	697b      	ldr	r3, [r7, #20]
}
 806acc2:	4618      	mov	r0, r3
 806acc4:	3718      	adds	r7, #24
 806acc6:	46bd      	mov	sp, r7
 806acc8:	bd80      	pop	{r7, pc}
 806acca:	bf00      	nop
 806accc:	20000e5c 	.word	0x20000e5c
 806acd0:	20000e38 	.word	0x20000e38
 806acd4:	20000dec 	.word	0x20000dec
 806acd8:	20000df0 	.word	0x20000df0
 806acdc:	20000e4c 	.word	0x20000e4c
 806ace0:	20000e54 	.word	0x20000e54
 806ace4:	20000e3c 	.word	0x20000e3c
 806ace8:	20000964 	.word	0x20000964
 806acec:	20000960 	.word	0x20000960
 806acf0:	20000e48 	.word	0x20000e48
 806acf4:	20000e44 	.word	0x20000e44

0806acf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 806acf8:	b480      	push	{r7}
 806acfa:	b085      	sub	sp, #20
 806acfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 806acfe:	4b2a      	ldr	r3, [pc, #168]	; (806ada8 <vTaskSwitchContext+0xb0>)
 806ad00:	681b      	ldr	r3, [r3, #0]
 806ad02:	2b00      	cmp	r3, #0
 806ad04:	d003      	beq.n	806ad0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 806ad06:	4b29      	ldr	r3, [pc, #164]	; (806adac <vTaskSwitchContext+0xb4>)
 806ad08:	2201      	movs	r2, #1
 806ad0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 806ad0c:	e046      	b.n	806ad9c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 806ad0e:	4b27      	ldr	r3, [pc, #156]	; (806adac <vTaskSwitchContext+0xb4>)
 806ad10:	2200      	movs	r2, #0
 806ad12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806ad14:	4b26      	ldr	r3, [pc, #152]	; (806adb0 <vTaskSwitchContext+0xb8>)
 806ad16:	681b      	ldr	r3, [r3, #0]
 806ad18:	60fb      	str	r3, [r7, #12]
 806ad1a:	e010      	b.n	806ad3e <vTaskSwitchContext+0x46>
 806ad1c:	68fb      	ldr	r3, [r7, #12]
 806ad1e:	2b00      	cmp	r3, #0
 806ad20:	d10a      	bne.n	806ad38 <vTaskSwitchContext+0x40>
	__asm volatile
 806ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ad26:	f383 8811 	msr	BASEPRI, r3
 806ad2a:	f3bf 8f6f 	isb	sy
 806ad2e:	f3bf 8f4f 	dsb	sy
 806ad32:	607b      	str	r3, [r7, #4]
}
 806ad34:	bf00      	nop
 806ad36:	e7fe      	b.n	806ad36 <vTaskSwitchContext+0x3e>
 806ad38:	68fb      	ldr	r3, [r7, #12]
 806ad3a:	3b01      	subs	r3, #1
 806ad3c:	60fb      	str	r3, [r7, #12]
 806ad3e:	491d      	ldr	r1, [pc, #116]	; (806adb4 <vTaskSwitchContext+0xbc>)
 806ad40:	68fa      	ldr	r2, [r7, #12]
 806ad42:	4613      	mov	r3, r2
 806ad44:	009b      	lsls	r3, r3, #2
 806ad46:	4413      	add	r3, r2
 806ad48:	009b      	lsls	r3, r3, #2
 806ad4a:	440b      	add	r3, r1
 806ad4c:	681b      	ldr	r3, [r3, #0]
 806ad4e:	2b00      	cmp	r3, #0
 806ad50:	d0e4      	beq.n	806ad1c <vTaskSwitchContext+0x24>
 806ad52:	68fa      	ldr	r2, [r7, #12]
 806ad54:	4613      	mov	r3, r2
 806ad56:	009b      	lsls	r3, r3, #2
 806ad58:	4413      	add	r3, r2
 806ad5a:	009b      	lsls	r3, r3, #2
 806ad5c:	4a15      	ldr	r2, [pc, #84]	; (806adb4 <vTaskSwitchContext+0xbc>)
 806ad5e:	4413      	add	r3, r2
 806ad60:	60bb      	str	r3, [r7, #8]
 806ad62:	68bb      	ldr	r3, [r7, #8]
 806ad64:	685b      	ldr	r3, [r3, #4]
 806ad66:	685a      	ldr	r2, [r3, #4]
 806ad68:	68bb      	ldr	r3, [r7, #8]
 806ad6a:	605a      	str	r2, [r3, #4]
 806ad6c:	68bb      	ldr	r3, [r7, #8]
 806ad6e:	685a      	ldr	r2, [r3, #4]
 806ad70:	68bb      	ldr	r3, [r7, #8]
 806ad72:	3308      	adds	r3, #8
 806ad74:	429a      	cmp	r2, r3
 806ad76:	d104      	bne.n	806ad82 <vTaskSwitchContext+0x8a>
 806ad78:	68bb      	ldr	r3, [r7, #8]
 806ad7a:	685b      	ldr	r3, [r3, #4]
 806ad7c:	685a      	ldr	r2, [r3, #4]
 806ad7e:	68bb      	ldr	r3, [r7, #8]
 806ad80:	605a      	str	r2, [r3, #4]
 806ad82:	68bb      	ldr	r3, [r7, #8]
 806ad84:	685b      	ldr	r3, [r3, #4]
 806ad86:	68db      	ldr	r3, [r3, #12]
 806ad88:	4a0b      	ldr	r2, [pc, #44]	; (806adb8 <vTaskSwitchContext+0xc0>)
 806ad8a:	6013      	str	r3, [r2, #0]
 806ad8c:	4a08      	ldr	r2, [pc, #32]	; (806adb0 <vTaskSwitchContext+0xb8>)
 806ad8e:	68fb      	ldr	r3, [r7, #12]
 806ad90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 806ad92:	4b09      	ldr	r3, [pc, #36]	; (806adb8 <vTaskSwitchContext+0xc0>)
 806ad94:	681b      	ldr	r3, [r3, #0]
 806ad96:	3354      	adds	r3, #84	; 0x54
 806ad98:	4a08      	ldr	r2, [pc, #32]	; (806adbc <vTaskSwitchContext+0xc4>)
 806ad9a:	6013      	str	r3, [r2, #0]
}
 806ad9c:	bf00      	nop
 806ad9e:	3714      	adds	r7, #20
 806ada0:	46bd      	mov	sp, r7
 806ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ada6:	4770      	bx	lr
 806ada8:	20000e5c 	.word	0x20000e5c
 806adac:	20000e48 	.word	0x20000e48
 806adb0:	20000e3c 	.word	0x20000e3c
 806adb4:	20000964 	.word	0x20000964
 806adb8:	20000960 	.word	0x20000960
 806adbc:	20000028 	.word	0x20000028

0806adc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 806adc0:	b580      	push	{r7, lr}
 806adc2:	b084      	sub	sp, #16
 806adc4:	af00      	add	r7, sp, #0
 806adc6:	6078      	str	r0, [r7, #4]
 806adc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 806adca:	687b      	ldr	r3, [r7, #4]
 806adcc:	2b00      	cmp	r3, #0
 806adce:	d10a      	bne.n	806ade6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 806add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 806add4:	f383 8811 	msr	BASEPRI, r3
 806add8:	f3bf 8f6f 	isb	sy
 806addc:	f3bf 8f4f 	dsb	sy
 806ade0:	60fb      	str	r3, [r7, #12]
}
 806ade2:	bf00      	nop
 806ade4:	e7fe      	b.n	806ade4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 806ade6:	4b07      	ldr	r3, [pc, #28]	; (806ae04 <vTaskPlaceOnEventList+0x44>)
 806ade8:	681b      	ldr	r3, [r3, #0]
 806adea:	3318      	adds	r3, #24
 806adec:	4619      	mov	r1, r3
 806adee:	6878      	ldr	r0, [r7, #4]
 806adf0:	f7fe fa89 	bl	8069306 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 806adf4:	2101      	movs	r1, #1
 806adf6:	6838      	ldr	r0, [r7, #0]
 806adf8:	f000 fb8e 	bl	806b518 <prvAddCurrentTaskToDelayedList>
}
 806adfc:	bf00      	nop
 806adfe:	3710      	adds	r7, #16
 806ae00:	46bd      	mov	sp, r7
 806ae02:	bd80      	pop	{r7, pc}
 806ae04:	20000960 	.word	0x20000960

0806ae08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 806ae08:	b580      	push	{r7, lr}
 806ae0a:	b086      	sub	sp, #24
 806ae0c:	af00      	add	r7, sp, #0
 806ae0e:	60f8      	str	r0, [r7, #12]
 806ae10:	60b9      	str	r1, [r7, #8]
 806ae12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 806ae14:	68fb      	ldr	r3, [r7, #12]
 806ae16:	2b00      	cmp	r3, #0
 806ae18:	d10a      	bne.n	806ae30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 806ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ae1e:	f383 8811 	msr	BASEPRI, r3
 806ae22:	f3bf 8f6f 	isb	sy
 806ae26:	f3bf 8f4f 	dsb	sy
 806ae2a:	617b      	str	r3, [r7, #20]
}
 806ae2c:	bf00      	nop
 806ae2e:	e7fe      	b.n	806ae2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 806ae30:	4b0a      	ldr	r3, [pc, #40]	; (806ae5c <vTaskPlaceOnEventListRestricted+0x54>)
 806ae32:	681b      	ldr	r3, [r3, #0]
 806ae34:	3318      	adds	r3, #24
 806ae36:	4619      	mov	r1, r3
 806ae38:	68f8      	ldr	r0, [r7, #12]
 806ae3a:	f7fe fa40 	bl	80692be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 806ae3e:	687b      	ldr	r3, [r7, #4]
 806ae40:	2b00      	cmp	r3, #0
 806ae42:	d002      	beq.n	806ae4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 806ae44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806ae48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 806ae4a:	6879      	ldr	r1, [r7, #4]
 806ae4c:	68b8      	ldr	r0, [r7, #8]
 806ae4e:	f000 fb63 	bl	806b518 <prvAddCurrentTaskToDelayedList>
	}
 806ae52:	bf00      	nop
 806ae54:	3718      	adds	r7, #24
 806ae56:	46bd      	mov	sp, r7
 806ae58:	bd80      	pop	{r7, pc}
 806ae5a:	bf00      	nop
 806ae5c:	20000960 	.word	0x20000960

0806ae60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 806ae60:	b580      	push	{r7, lr}
 806ae62:	b086      	sub	sp, #24
 806ae64:	af00      	add	r7, sp, #0
 806ae66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806ae68:	687b      	ldr	r3, [r7, #4]
 806ae6a:	68db      	ldr	r3, [r3, #12]
 806ae6c:	68db      	ldr	r3, [r3, #12]
 806ae6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 806ae70:	693b      	ldr	r3, [r7, #16]
 806ae72:	2b00      	cmp	r3, #0
 806ae74:	d10a      	bne.n	806ae8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 806ae76:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ae7a:	f383 8811 	msr	BASEPRI, r3
 806ae7e:	f3bf 8f6f 	isb	sy
 806ae82:	f3bf 8f4f 	dsb	sy
 806ae86:	60fb      	str	r3, [r7, #12]
}
 806ae88:	bf00      	nop
 806ae8a:	e7fe      	b.n	806ae8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 806ae8c:	693b      	ldr	r3, [r7, #16]
 806ae8e:	3318      	adds	r3, #24
 806ae90:	4618      	mov	r0, r3
 806ae92:	f7fe fa71 	bl	8069378 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 806ae96:	4b1e      	ldr	r3, [pc, #120]	; (806af10 <xTaskRemoveFromEventList+0xb0>)
 806ae98:	681b      	ldr	r3, [r3, #0]
 806ae9a:	2b00      	cmp	r3, #0
 806ae9c:	d11d      	bne.n	806aeda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 806ae9e:	693b      	ldr	r3, [r7, #16]
 806aea0:	3304      	adds	r3, #4
 806aea2:	4618      	mov	r0, r3
 806aea4:	f7fe fa68 	bl	8069378 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 806aea8:	693b      	ldr	r3, [r7, #16]
 806aeaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806aeac:	4b19      	ldr	r3, [pc, #100]	; (806af14 <xTaskRemoveFromEventList+0xb4>)
 806aeae:	681b      	ldr	r3, [r3, #0]
 806aeb0:	429a      	cmp	r2, r3
 806aeb2:	d903      	bls.n	806aebc <xTaskRemoveFromEventList+0x5c>
 806aeb4:	693b      	ldr	r3, [r7, #16]
 806aeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806aeb8:	4a16      	ldr	r2, [pc, #88]	; (806af14 <xTaskRemoveFromEventList+0xb4>)
 806aeba:	6013      	str	r3, [r2, #0]
 806aebc:	693b      	ldr	r3, [r7, #16]
 806aebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806aec0:	4613      	mov	r3, r2
 806aec2:	009b      	lsls	r3, r3, #2
 806aec4:	4413      	add	r3, r2
 806aec6:	009b      	lsls	r3, r3, #2
 806aec8:	4a13      	ldr	r2, [pc, #76]	; (806af18 <xTaskRemoveFromEventList+0xb8>)
 806aeca:	441a      	add	r2, r3
 806aecc:	693b      	ldr	r3, [r7, #16]
 806aece:	3304      	adds	r3, #4
 806aed0:	4619      	mov	r1, r3
 806aed2:	4610      	mov	r0, r2
 806aed4:	f7fe f9f3 	bl	80692be <vListInsertEnd>
 806aed8:	e005      	b.n	806aee6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 806aeda:	693b      	ldr	r3, [r7, #16]
 806aedc:	3318      	adds	r3, #24
 806aede:	4619      	mov	r1, r3
 806aee0:	480e      	ldr	r0, [pc, #56]	; (806af1c <xTaskRemoveFromEventList+0xbc>)
 806aee2:	f7fe f9ec 	bl	80692be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 806aee6:	693b      	ldr	r3, [r7, #16]
 806aee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806aeea:	4b0d      	ldr	r3, [pc, #52]	; (806af20 <xTaskRemoveFromEventList+0xc0>)
 806aeec:	681b      	ldr	r3, [r3, #0]
 806aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806aef0:	429a      	cmp	r2, r3
 806aef2:	d905      	bls.n	806af00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 806aef4:	2301      	movs	r3, #1
 806aef6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 806aef8:	4b0a      	ldr	r3, [pc, #40]	; (806af24 <xTaskRemoveFromEventList+0xc4>)
 806aefa:	2201      	movs	r2, #1
 806aefc:	601a      	str	r2, [r3, #0]
 806aefe:	e001      	b.n	806af04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 806af00:	2300      	movs	r3, #0
 806af02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 806af04:	697b      	ldr	r3, [r7, #20]
}
 806af06:	4618      	mov	r0, r3
 806af08:	3718      	adds	r7, #24
 806af0a:	46bd      	mov	sp, r7
 806af0c:	bd80      	pop	{r7, pc}
 806af0e:	bf00      	nop
 806af10:	20000e5c 	.word	0x20000e5c
 806af14:	20000e3c 	.word	0x20000e3c
 806af18:	20000964 	.word	0x20000964
 806af1c:	20000df4 	.word	0x20000df4
 806af20:	20000960 	.word	0x20000960
 806af24:	20000e48 	.word	0x20000e48

0806af28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 806af28:	b480      	push	{r7}
 806af2a:	b083      	sub	sp, #12
 806af2c:	af00      	add	r7, sp, #0
 806af2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 806af30:	4b06      	ldr	r3, [pc, #24]	; (806af4c <vTaskInternalSetTimeOutState+0x24>)
 806af32:	681a      	ldr	r2, [r3, #0]
 806af34:	687b      	ldr	r3, [r7, #4]
 806af36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 806af38:	4b05      	ldr	r3, [pc, #20]	; (806af50 <vTaskInternalSetTimeOutState+0x28>)
 806af3a:	681a      	ldr	r2, [r3, #0]
 806af3c:	687b      	ldr	r3, [r7, #4]
 806af3e:	605a      	str	r2, [r3, #4]
}
 806af40:	bf00      	nop
 806af42:	370c      	adds	r7, #12
 806af44:	46bd      	mov	sp, r7
 806af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 806af4a:	4770      	bx	lr
 806af4c:	20000e4c 	.word	0x20000e4c
 806af50:	20000e38 	.word	0x20000e38

0806af54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 806af54:	b580      	push	{r7, lr}
 806af56:	b088      	sub	sp, #32
 806af58:	af00      	add	r7, sp, #0
 806af5a:	6078      	str	r0, [r7, #4]
 806af5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 806af5e:	687b      	ldr	r3, [r7, #4]
 806af60:	2b00      	cmp	r3, #0
 806af62:	d10a      	bne.n	806af7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 806af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 806af68:	f383 8811 	msr	BASEPRI, r3
 806af6c:	f3bf 8f6f 	isb	sy
 806af70:	f3bf 8f4f 	dsb	sy
 806af74:	613b      	str	r3, [r7, #16]
}
 806af76:	bf00      	nop
 806af78:	e7fe      	b.n	806af78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 806af7a:	683b      	ldr	r3, [r7, #0]
 806af7c:	2b00      	cmp	r3, #0
 806af7e:	d10a      	bne.n	806af96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 806af80:	f04f 0350 	mov.w	r3, #80	; 0x50
 806af84:	f383 8811 	msr	BASEPRI, r3
 806af88:	f3bf 8f6f 	isb	sy
 806af8c:	f3bf 8f4f 	dsb	sy
 806af90:	60fb      	str	r3, [r7, #12]
}
 806af92:	bf00      	nop
 806af94:	e7fe      	b.n	806af94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 806af96:	f001 f845 	bl	806c024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 806af9a:	4b1d      	ldr	r3, [pc, #116]	; (806b010 <xTaskCheckForTimeOut+0xbc>)
 806af9c:	681b      	ldr	r3, [r3, #0]
 806af9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 806afa0:	687b      	ldr	r3, [r7, #4]
 806afa2:	685b      	ldr	r3, [r3, #4]
 806afa4:	69ba      	ldr	r2, [r7, #24]
 806afa6:	1ad3      	subs	r3, r2, r3
 806afa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 806afaa:	683b      	ldr	r3, [r7, #0]
 806afac:	681b      	ldr	r3, [r3, #0]
 806afae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806afb2:	d102      	bne.n	806afba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 806afb4:	2300      	movs	r3, #0
 806afb6:	61fb      	str	r3, [r7, #28]
 806afb8:	e023      	b.n	806b002 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 806afba:	687b      	ldr	r3, [r7, #4]
 806afbc:	681a      	ldr	r2, [r3, #0]
 806afbe:	4b15      	ldr	r3, [pc, #84]	; (806b014 <xTaskCheckForTimeOut+0xc0>)
 806afc0:	681b      	ldr	r3, [r3, #0]
 806afc2:	429a      	cmp	r2, r3
 806afc4:	d007      	beq.n	806afd6 <xTaskCheckForTimeOut+0x82>
 806afc6:	687b      	ldr	r3, [r7, #4]
 806afc8:	685b      	ldr	r3, [r3, #4]
 806afca:	69ba      	ldr	r2, [r7, #24]
 806afcc:	429a      	cmp	r2, r3
 806afce:	d302      	bcc.n	806afd6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 806afd0:	2301      	movs	r3, #1
 806afd2:	61fb      	str	r3, [r7, #28]
 806afd4:	e015      	b.n	806b002 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 806afd6:	683b      	ldr	r3, [r7, #0]
 806afd8:	681b      	ldr	r3, [r3, #0]
 806afda:	697a      	ldr	r2, [r7, #20]
 806afdc:	429a      	cmp	r2, r3
 806afde:	d20b      	bcs.n	806aff8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 806afe0:	683b      	ldr	r3, [r7, #0]
 806afe2:	681a      	ldr	r2, [r3, #0]
 806afe4:	697b      	ldr	r3, [r7, #20]
 806afe6:	1ad2      	subs	r2, r2, r3
 806afe8:	683b      	ldr	r3, [r7, #0]
 806afea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 806afec:	6878      	ldr	r0, [r7, #4]
 806afee:	f7ff ff9b 	bl	806af28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 806aff2:	2300      	movs	r3, #0
 806aff4:	61fb      	str	r3, [r7, #28]
 806aff6:	e004      	b.n	806b002 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 806aff8:	683b      	ldr	r3, [r7, #0]
 806affa:	2200      	movs	r2, #0
 806affc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 806affe:	2301      	movs	r3, #1
 806b000:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 806b002:	f001 f83f 	bl	806c084 <vPortExitCritical>

	return xReturn;
 806b006:	69fb      	ldr	r3, [r7, #28]
}
 806b008:	4618      	mov	r0, r3
 806b00a:	3720      	adds	r7, #32
 806b00c:	46bd      	mov	sp, r7
 806b00e:	bd80      	pop	{r7, pc}
 806b010:	20000e38 	.word	0x20000e38
 806b014:	20000e4c 	.word	0x20000e4c

0806b018 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 806b018:	b480      	push	{r7}
 806b01a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 806b01c:	4b03      	ldr	r3, [pc, #12]	; (806b02c <vTaskMissedYield+0x14>)
 806b01e:	2201      	movs	r2, #1
 806b020:	601a      	str	r2, [r3, #0]
}
 806b022:	bf00      	nop
 806b024:	46bd      	mov	sp, r7
 806b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b02a:	4770      	bx	lr
 806b02c:	20000e48 	.word	0x20000e48

0806b030 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 806b030:	b580      	push	{r7, lr}
 806b032:	b082      	sub	sp, #8
 806b034:	af00      	add	r7, sp, #0
 806b036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 806b038:	f000 f852 	bl	806b0e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 806b03c:	4b06      	ldr	r3, [pc, #24]	; (806b058 <prvIdleTask+0x28>)
 806b03e:	681b      	ldr	r3, [r3, #0]
 806b040:	2b01      	cmp	r3, #1
 806b042:	d9f9      	bls.n	806b038 <prvIdleTask+0x8>
			{
				taskYIELD();
 806b044:	4b05      	ldr	r3, [pc, #20]	; (806b05c <prvIdleTask+0x2c>)
 806b046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806b04a:	601a      	str	r2, [r3, #0]
 806b04c:	f3bf 8f4f 	dsb	sy
 806b050:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 806b054:	e7f0      	b.n	806b038 <prvIdleTask+0x8>
 806b056:	bf00      	nop
 806b058:	20000964 	.word	0x20000964
 806b05c:	e000ed04 	.word	0xe000ed04

0806b060 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 806b060:	b580      	push	{r7, lr}
 806b062:	b082      	sub	sp, #8
 806b064:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 806b066:	2300      	movs	r3, #0
 806b068:	607b      	str	r3, [r7, #4]
 806b06a:	e00c      	b.n	806b086 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 806b06c:	687a      	ldr	r2, [r7, #4]
 806b06e:	4613      	mov	r3, r2
 806b070:	009b      	lsls	r3, r3, #2
 806b072:	4413      	add	r3, r2
 806b074:	009b      	lsls	r3, r3, #2
 806b076:	4a12      	ldr	r2, [pc, #72]	; (806b0c0 <prvInitialiseTaskLists+0x60>)
 806b078:	4413      	add	r3, r2
 806b07a:	4618      	mov	r0, r3
 806b07c:	f7fe f8f2 	bl	8069264 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 806b080:	687b      	ldr	r3, [r7, #4]
 806b082:	3301      	adds	r3, #1
 806b084:	607b      	str	r3, [r7, #4]
 806b086:	687b      	ldr	r3, [r7, #4]
 806b088:	2b37      	cmp	r3, #55	; 0x37
 806b08a:	d9ef      	bls.n	806b06c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 806b08c:	480d      	ldr	r0, [pc, #52]	; (806b0c4 <prvInitialiseTaskLists+0x64>)
 806b08e:	f7fe f8e9 	bl	8069264 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 806b092:	480d      	ldr	r0, [pc, #52]	; (806b0c8 <prvInitialiseTaskLists+0x68>)
 806b094:	f7fe f8e6 	bl	8069264 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 806b098:	480c      	ldr	r0, [pc, #48]	; (806b0cc <prvInitialiseTaskLists+0x6c>)
 806b09a:	f7fe f8e3 	bl	8069264 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 806b09e:	480c      	ldr	r0, [pc, #48]	; (806b0d0 <prvInitialiseTaskLists+0x70>)
 806b0a0:	f7fe f8e0 	bl	8069264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 806b0a4:	480b      	ldr	r0, [pc, #44]	; (806b0d4 <prvInitialiseTaskLists+0x74>)
 806b0a6:	f7fe f8dd 	bl	8069264 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 806b0aa:	4b0b      	ldr	r3, [pc, #44]	; (806b0d8 <prvInitialiseTaskLists+0x78>)
 806b0ac:	4a05      	ldr	r2, [pc, #20]	; (806b0c4 <prvInitialiseTaskLists+0x64>)
 806b0ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 806b0b0:	4b0a      	ldr	r3, [pc, #40]	; (806b0dc <prvInitialiseTaskLists+0x7c>)
 806b0b2:	4a05      	ldr	r2, [pc, #20]	; (806b0c8 <prvInitialiseTaskLists+0x68>)
 806b0b4:	601a      	str	r2, [r3, #0]
}
 806b0b6:	bf00      	nop
 806b0b8:	3708      	adds	r7, #8
 806b0ba:	46bd      	mov	sp, r7
 806b0bc:	bd80      	pop	{r7, pc}
 806b0be:	bf00      	nop
 806b0c0:	20000964 	.word	0x20000964
 806b0c4:	20000dc4 	.word	0x20000dc4
 806b0c8:	20000dd8 	.word	0x20000dd8
 806b0cc:	20000df4 	.word	0x20000df4
 806b0d0:	20000e08 	.word	0x20000e08
 806b0d4:	20000e20 	.word	0x20000e20
 806b0d8:	20000dec 	.word	0x20000dec
 806b0dc:	20000df0 	.word	0x20000df0

0806b0e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 806b0e0:	b580      	push	{r7, lr}
 806b0e2:	b082      	sub	sp, #8
 806b0e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 806b0e6:	e019      	b.n	806b11c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 806b0e8:	f000 ff9c 	bl	806c024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806b0ec:	4b10      	ldr	r3, [pc, #64]	; (806b130 <prvCheckTasksWaitingTermination+0x50>)
 806b0ee:	68db      	ldr	r3, [r3, #12]
 806b0f0:	68db      	ldr	r3, [r3, #12]
 806b0f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 806b0f4:	687b      	ldr	r3, [r7, #4]
 806b0f6:	3304      	adds	r3, #4
 806b0f8:	4618      	mov	r0, r3
 806b0fa:	f7fe f93d 	bl	8069378 <uxListRemove>
				--uxCurrentNumberOfTasks;
 806b0fe:	4b0d      	ldr	r3, [pc, #52]	; (806b134 <prvCheckTasksWaitingTermination+0x54>)
 806b100:	681b      	ldr	r3, [r3, #0]
 806b102:	3b01      	subs	r3, #1
 806b104:	4a0b      	ldr	r2, [pc, #44]	; (806b134 <prvCheckTasksWaitingTermination+0x54>)
 806b106:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 806b108:	4b0b      	ldr	r3, [pc, #44]	; (806b138 <prvCheckTasksWaitingTermination+0x58>)
 806b10a:	681b      	ldr	r3, [r3, #0]
 806b10c:	3b01      	subs	r3, #1
 806b10e:	4a0a      	ldr	r2, [pc, #40]	; (806b138 <prvCheckTasksWaitingTermination+0x58>)
 806b110:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 806b112:	f000 ffb7 	bl	806c084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 806b116:	6878      	ldr	r0, [r7, #4]
 806b118:	f000 f810 	bl	806b13c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 806b11c:	4b06      	ldr	r3, [pc, #24]	; (806b138 <prvCheckTasksWaitingTermination+0x58>)
 806b11e:	681b      	ldr	r3, [r3, #0]
 806b120:	2b00      	cmp	r3, #0
 806b122:	d1e1      	bne.n	806b0e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 806b124:	bf00      	nop
 806b126:	bf00      	nop
 806b128:	3708      	adds	r7, #8
 806b12a:	46bd      	mov	sp, r7
 806b12c:	bd80      	pop	{r7, pc}
 806b12e:	bf00      	nop
 806b130:	20000e08 	.word	0x20000e08
 806b134:	20000e34 	.word	0x20000e34
 806b138:	20000e1c 	.word	0x20000e1c

0806b13c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 806b13c:	b580      	push	{r7, lr}
 806b13e:	b084      	sub	sp, #16
 806b140:	af00      	add	r7, sp, #0
 806b142:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 806b144:	687b      	ldr	r3, [r7, #4]
 806b146:	3354      	adds	r3, #84	; 0x54
 806b148:	4618      	mov	r0, r3
 806b14a:	f001 fb21 	bl	806c790 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 806b14e:	687b      	ldr	r3, [r7, #4]
 806b150:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 806b154:	2b00      	cmp	r3, #0
 806b156:	d108      	bne.n	806b16a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 806b158:	687b      	ldr	r3, [r7, #4]
 806b15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806b15c:	4618      	mov	r0, r3
 806b15e:	f001 f94f 	bl	806c400 <vPortFree>
				vPortFree( pxTCB );
 806b162:	6878      	ldr	r0, [r7, #4]
 806b164:	f001 f94c 	bl	806c400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 806b168:	e018      	b.n	806b19c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 806b16a:	687b      	ldr	r3, [r7, #4]
 806b16c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 806b170:	2b01      	cmp	r3, #1
 806b172:	d103      	bne.n	806b17c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 806b174:	6878      	ldr	r0, [r7, #4]
 806b176:	f001 f943 	bl	806c400 <vPortFree>
	}
 806b17a:	e00f      	b.n	806b19c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 806b17c:	687b      	ldr	r3, [r7, #4]
 806b17e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 806b182:	2b02      	cmp	r3, #2
 806b184:	d00a      	beq.n	806b19c <prvDeleteTCB+0x60>
	__asm volatile
 806b186:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b18a:	f383 8811 	msr	BASEPRI, r3
 806b18e:	f3bf 8f6f 	isb	sy
 806b192:	f3bf 8f4f 	dsb	sy
 806b196:	60fb      	str	r3, [r7, #12]
}
 806b198:	bf00      	nop
 806b19a:	e7fe      	b.n	806b19a <prvDeleteTCB+0x5e>
	}
 806b19c:	bf00      	nop
 806b19e:	3710      	adds	r7, #16
 806b1a0:	46bd      	mov	sp, r7
 806b1a2:	bd80      	pop	{r7, pc}

0806b1a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 806b1a4:	b480      	push	{r7}
 806b1a6:	b083      	sub	sp, #12
 806b1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 806b1aa:	4b0c      	ldr	r3, [pc, #48]	; (806b1dc <prvResetNextTaskUnblockTime+0x38>)
 806b1ac:	681b      	ldr	r3, [r3, #0]
 806b1ae:	681b      	ldr	r3, [r3, #0]
 806b1b0:	2b00      	cmp	r3, #0
 806b1b2:	d104      	bne.n	806b1be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 806b1b4:	4b0a      	ldr	r3, [pc, #40]	; (806b1e0 <prvResetNextTaskUnblockTime+0x3c>)
 806b1b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806b1ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 806b1bc:	e008      	b.n	806b1d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806b1be:	4b07      	ldr	r3, [pc, #28]	; (806b1dc <prvResetNextTaskUnblockTime+0x38>)
 806b1c0:	681b      	ldr	r3, [r3, #0]
 806b1c2:	68db      	ldr	r3, [r3, #12]
 806b1c4:	68db      	ldr	r3, [r3, #12]
 806b1c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 806b1c8:	687b      	ldr	r3, [r7, #4]
 806b1ca:	685b      	ldr	r3, [r3, #4]
 806b1cc:	4a04      	ldr	r2, [pc, #16]	; (806b1e0 <prvResetNextTaskUnblockTime+0x3c>)
 806b1ce:	6013      	str	r3, [r2, #0]
}
 806b1d0:	bf00      	nop
 806b1d2:	370c      	adds	r7, #12
 806b1d4:	46bd      	mov	sp, r7
 806b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b1da:	4770      	bx	lr
 806b1dc:	20000dec 	.word	0x20000dec
 806b1e0:	20000e54 	.word	0x20000e54

0806b1e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 806b1e4:	b480      	push	{r7}
 806b1e6:	b083      	sub	sp, #12
 806b1e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 806b1ea:	4b05      	ldr	r3, [pc, #20]	; (806b200 <xTaskGetCurrentTaskHandle+0x1c>)
 806b1ec:	681b      	ldr	r3, [r3, #0]
 806b1ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 806b1f0:	687b      	ldr	r3, [r7, #4]
	}
 806b1f2:	4618      	mov	r0, r3
 806b1f4:	370c      	adds	r7, #12
 806b1f6:	46bd      	mov	sp, r7
 806b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b1fc:	4770      	bx	lr
 806b1fe:	bf00      	nop
 806b200:	20000960 	.word	0x20000960

0806b204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 806b204:	b480      	push	{r7}
 806b206:	b083      	sub	sp, #12
 806b208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 806b20a:	4b0b      	ldr	r3, [pc, #44]	; (806b238 <xTaskGetSchedulerState+0x34>)
 806b20c:	681b      	ldr	r3, [r3, #0]
 806b20e:	2b00      	cmp	r3, #0
 806b210:	d102      	bne.n	806b218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 806b212:	2301      	movs	r3, #1
 806b214:	607b      	str	r3, [r7, #4]
 806b216:	e008      	b.n	806b22a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 806b218:	4b08      	ldr	r3, [pc, #32]	; (806b23c <xTaskGetSchedulerState+0x38>)
 806b21a:	681b      	ldr	r3, [r3, #0]
 806b21c:	2b00      	cmp	r3, #0
 806b21e:	d102      	bne.n	806b226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 806b220:	2302      	movs	r3, #2
 806b222:	607b      	str	r3, [r7, #4]
 806b224:	e001      	b.n	806b22a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 806b226:	2300      	movs	r3, #0
 806b228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 806b22a:	687b      	ldr	r3, [r7, #4]
	}
 806b22c:	4618      	mov	r0, r3
 806b22e:	370c      	adds	r7, #12
 806b230:	46bd      	mov	sp, r7
 806b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b236:	4770      	bx	lr
 806b238:	20000e40 	.word	0x20000e40
 806b23c:	20000e5c 	.word	0x20000e5c

0806b240 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 806b240:	b580      	push	{r7, lr}
 806b242:	b084      	sub	sp, #16
 806b244:	af00      	add	r7, sp, #0
 806b246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 806b248:	687b      	ldr	r3, [r7, #4]
 806b24a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 806b24c:	2300      	movs	r3, #0
 806b24e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 806b250:	687b      	ldr	r3, [r7, #4]
 806b252:	2b00      	cmp	r3, #0
 806b254:	d051      	beq.n	806b2fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 806b256:	68bb      	ldr	r3, [r7, #8]
 806b258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b25a:	4b2a      	ldr	r3, [pc, #168]	; (806b304 <xTaskPriorityInherit+0xc4>)
 806b25c:	681b      	ldr	r3, [r3, #0]
 806b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b260:	429a      	cmp	r2, r3
 806b262:	d241      	bcs.n	806b2e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 806b264:	68bb      	ldr	r3, [r7, #8]
 806b266:	699b      	ldr	r3, [r3, #24]
 806b268:	2b00      	cmp	r3, #0
 806b26a:	db06      	blt.n	806b27a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806b26c:	4b25      	ldr	r3, [pc, #148]	; (806b304 <xTaskPriorityInherit+0xc4>)
 806b26e:	681b      	ldr	r3, [r3, #0]
 806b270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b272:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 806b276:	68bb      	ldr	r3, [r7, #8]
 806b278:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 806b27a:	68bb      	ldr	r3, [r7, #8]
 806b27c:	6959      	ldr	r1, [r3, #20]
 806b27e:	68bb      	ldr	r3, [r7, #8]
 806b280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b282:	4613      	mov	r3, r2
 806b284:	009b      	lsls	r3, r3, #2
 806b286:	4413      	add	r3, r2
 806b288:	009b      	lsls	r3, r3, #2
 806b28a:	4a1f      	ldr	r2, [pc, #124]	; (806b308 <xTaskPriorityInherit+0xc8>)
 806b28c:	4413      	add	r3, r2
 806b28e:	4299      	cmp	r1, r3
 806b290:	d122      	bne.n	806b2d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 806b292:	68bb      	ldr	r3, [r7, #8]
 806b294:	3304      	adds	r3, #4
 806b296:	4618      	mov	r0, r3
 806b298:	f7fe f86e 	bl	8069378 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 806b29c:	4b19      	ldr	r3, [pc, #100]	; (806b304 <xTaskPriorityInherit+0xc4>)
 806b29e:	681b      	ldr	r3, [r3, #0]
 806b2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b2a2:	68bb      	ldr	r3, [r7, #8]
 806b2a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 806b2a6:	68bb      	ldr	r3, [r7, #8]
 806b2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b2aa:	4b18      	ldr	r3, [pc, #96]	; (806b30c <xTaskPriorityInherit+0xcc>)
 806b2ac:	681b      	ldr	r3, [r3, #0]
 806b2ae:	429a      	cmp	r2, r3
 806b2b0:	d903      	bls.n	806b2ba <xTaskPriorityInherit+0x7a>
 806b2b2:	68bb      	ldr	r3, [r7, #8]
 806b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b2b6:	4a15      	ldr	r2, [pc, #84]	; (806b30c <xTaskPriorityInherit+0xcc>)
 806b2b8:	6013      	str	r3, [r2, #0]
 806b2ba:	68bb      	ldr	r3, [r7, #8]
 806b2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b2be:	4613      	mov	r3, r2
 806b2c0:	009b      	lsls	r3, r3, #2
 806b2c2:	4413      	add	r3, r2
 806b2c4:	009b      	lsls	r3, r3, #2
 806b2c6:	4a10      	ldr	r2, [pc, #64]	; (806b308 <xTaskPriorityInherit+0xc8>)
 806b2c8:	441a      	add	r2, r3
 806b2ca:	68bb      	ldr	r3, [r7, #8]
 806b2cc:	3304      	adds	r3, #4
 806b2ce:	4619      	mov	r1, r3
 806b2d0:	4610      	mov	r0, r2
 806b2d2:	f7fd fff4 	bl	80692be <vListInsertEnd>
 806b2d6:	e004      	b.n	806b2e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 806b2d8:	4b0a      	ldr	r3, [pc, #40]	; (806b304 <xTaskPriorityInherit+0xc4>)
 806b2da:	681b      	ldr	r3, [r3, #0]
 806b2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b2de:	68bb      	ldr	r3, [r7, #8]
 806b2e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 806b2e2:	2301      	movs	r3, #1
 806b2e4:	60fb      	str	r3, [r7, #12]
 806b2e6:	e008      	b.n	806b2fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 806b2e8:	68bb      	ldr	r3, [r7, #8]
 806b2ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 806b2ec:	4b05      	ldr	r3, [pc, #20]	; (806b304 <xTaskPriorityInherit+0xc4>)
 806b2ee:	681b      	ldr	r3, [r3, #0]
 806b2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b2f2:	429a      	cmp	r2, r3
 806b2f4:	d201      	bcs.n	806b2fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 806b2f6:	2301      	movs	r3, #1
 806b2f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 806b2fa:	68fb      	ldr	r3, [r7, #12]
	}
 806b2fc:	4618      	mov	r0, r3
 806b2fe:	3710      	adds	r7, #16
 806b300:	46bd      	mov	sp, r7
 806b302:	bd80      	pop	{r7, pc}
 806b304:	20000960 	.word	0x20000960
 806b308:	20000964 	.word	0x20000964
 806b30c:	20000e3c 	.word	0x20000e3c

0806b310 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 806b310:	b580      	push	{r7, lr}
 806b312:	b086      	sub	sp, #24
 806b314:	af00      	add	r7, sp, #0
 806b316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 806b318:	687b      	ldr	r3, [r7, #4]
 806b31a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 806b31c:	2300      	movs	r3, #0
 806b31e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 806b320:	687b      	ldr	r3, [r7, #4]
 806b322:	2b00      	cmp	r3, #0
 806b324:	d056      	beq.n	806b3d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 806b326:	4b2e      	ldr	r3, [pc, #184]	; (806b3e0 <xTaskPriorityDisinherit+0xd0>)
 806b328:	681b      	ldr	r3, [r3, #0]
 806b32a:	693a      	ldr	r2, [r7, #16]
 806b32c:	429a      	cmp	r2, r3
 806b32e:	d00a      	beq.n	806b346 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 806b330:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b334:	f383 8811 	msr	BASEPRI, r3
 806b338:	f3bf 8f6f 	isb	sy
 806b33c:	f3bf 8f4f 	dsb	sy
 806b340:	60fb      	str	r3, [r7, #12]
}
 806b342:	bf00      	nop
 806b344:	e7fe      	b.n	806b344 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 806b346:	693b      	ldr	r3, [r7, #16]
 806b348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 806b34a:	2b00      	cmp	r3, #0
 806b34c:	d10a      	bne.n	806b364 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 806b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b352:	f383 8811 	msr	BASEPRI, r3
 806b356:	f3bf 8f6f 	isb	sy
 806b35a:	f3bf 8f4f 	dsb	sy
 806b35e:	60bb      	str	r3, [r7, #8]
}
 806b360:	bf00      	nop
 806b362:	e7fe      	b.n	806b362 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 806b364:	693b      	ldr	r3, [r7, #16]
 806b366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 806b368:	1e5a      	subs	r2, r3, #1
 806b36a:	693b      	ldr	r3, [r7, #16]
 806b36c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 806b36e:	693b      	ldr	r3, [r7, #16]
 806b370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b372:	693b      	ldr	r3, [r7, #16]
 806b374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 806b376:	429a      	cmp	r2, r3
 806b378:	d02c      	beq.n	806b3d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 806b37a:	693b      	ldr	r3, [r7, #16]
 806b37c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 806b37e:	2b00      	cmp	r3, #0
 806b380:	d128      	bne.n	806b3d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 806b382:	693b      	ldr	r3, [r7, #16]
 806b384:	3304      	adds	r3, #4
 806b386:	4618      	mov	r0, r3
 806b388:	f7fd fff6 	bl	8069378 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 806b38c:	693b      	ldr	r3, [r7, #16]
 806b38e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 806b390:	693b      	ldr	r3, [r7, #16]
 806b392:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806b394:	693b      	ldr	r3, [r7, #16]
 806b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b398:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 806b39c:	693b      	ldr	r3, [r7, #16]
 806b39e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 806b3a0:	693b      	ldr	r3, [r7, #16]
 806b3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b3a4:	4b0f      	ldr	r3, [pc, #60]	; (806b3e4 <xTaskPriorityDisinherit+0xd4>)
 806b3a6:	681b      	ldr	r3, [r3, #0]
 806b3a8:	429a      	cmp	r2, r3
 806b3aa:	d903      	bls.n	806b3b4 <xTaskPriorityDisinherit+0xa4>
 806b3ac:	693b      	ldr	r3, [r7, #16]
 806b3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b3b0:	4a0c      	ldr	r2, [pc, #48]	; (806b3e4 <xTaskPriorityDisinherit+0xd4>)
 806b3b2:	6013      	str	r3, [r2, #0]
 806b3b4:	693b      	ldr	r3, [r7, #16]
 806b3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b3b8:	4613      	mov	r3, r2
 806b3ba:	009b      	lsls	r3, r3, #2
 806b3bc:	4413      	add	r3, r2
 806b3be:	009b      	lsls	r3, r3, #2
 806b3c0:	4a09      	ldr	r2, [pc, #36]	; (806b3e8 <xTaskPriorityDisinherit+0xd8>)
 806b3c2:	441a      	add	r2, r3
 806b3c4:	693b      	ldr	r3, [r7, #16]
 806b3c6:	3304      	adds	r3, #4
 806b3c8:	4619      	mov	r1, r3
 806b3ca:	4610      	mov	r0, r2
 806b3cc:	f7fd ff77 	bl	80692be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 806b3d0:	2301      	movs	r3, #1
 806b3d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 806b3d4:	697b      	ldr	r3, [r7, #20]
	}
 806b3d6:	4618      	mov	r0, r3
 806b3d8:	3718      	adds	r7, #24
 806b3da:	46bd      	mov	sp, r7
 806b3dc:	bd80      	pop	{r7, pc}
 806b3de:	bf00      	nop
 806b3e0:	20000960 	.word	0x20000960
 806b3e4:	20000e3c 	.word	0x20000e3c
 806b3e8:	20000964 	.word	0x20000964

0806b3ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 806b3ec:	b580      	push	{r7, lr}
 806b3ee:	b088      	sub	sp, #32
 806b3f0:	af00      	add	r7, sp, #0
 806b3f2:	6078      	str	r0, [r7, #4]
 806b3f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 806b3f6:	687b      	ldr	r3, [r7, #4]
 806b3f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 806b3fa:	2301      	movs	r3, #1
 806b3fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 806b3fe:	687b      	ldr	r3, [r7, #4]
 806b400:	2b00      	cmp	r3, #0
 806b402:	d06a      	beq.n	806b4da <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 806b404:	69bb      	ldr	r3, [r7, #24]
 806b406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 806b408:	2b00      	cmp	r3, #0
 806b40a:	d10a      	bne.n	806b422 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 806b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b410:	f383 8811 	msr	BASEPRI, r3
 806b414:	f3bf 8f6f 	isb	sy
 806b418:	f3bf 8f4f 	dsb	sy
 806b41c:	60fb      	str	r3, [r7, #12]
}
 806b41e:	bf00      	nop
 806b420:	e7fe      	b.n	806b420 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 806b422:	69bb      	ldr	r3, [r7, #24]
 806b424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 806b426:	683a      	ldr	r2, [r7, #0]
 806b428:	429a      	cmp	r2, r3
 806b42a:	d902      	bls.n	806b432 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 806b42c:	683b      	ldr	r3, [r7, #0]
 806b42e:	61fb      	str	r3, [r7, #28]
 806b430:	e002      	b.n	806b438 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 806b432:	69bb      	ldr	r3, [r7, #24]
 806b434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 806b436:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 806b438:	69bb      	ldr	r3, [r7, #24]
 806b43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b43c:	69fa      	ldr	r2, [r7, #28]
 806b43e:	429a      	cmp	r2, r3
 806b440:	d04b      	beq.n	806b4da <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 806b442:	69bb      	ldr	r3, [r7, #24]
 806b444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 806b446:	697a      	ldr	r2, [r7, #20]
 806b448:	429a      	cmp	r2, r3
 806b44a:	d146      	bne.n	806b4da <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 806b44c:	4b25      	ldr	r3, [pc, #148]	; (806b4e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 806b44e:	681b      	ldr	r3, [r3, #0]
 806b450:	69ba      	ldr	r2, [r7, #24]
 806b452:	429a      	cmp	r2, r3
 806b454:	d10a      	bne.n	806b46c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 806b456:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b45a:	f383 8811 	msr	BASEPRI, r3
 806b45e:	f3bf 8f6f 	isb	sy
 806b462:	f3bf 8f4f 	dsb	sy
 806b466:	60bb      	str	r3, [r7, #8]
}
 806b468:	bf00      	nop
 806b46a:	e7fe      	b.n	806b46a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 806b46c:	69bb      	ldr	r3, [r7, #24]
 806b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b470:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 806b472:	69bb      	ldr	r3, [r7, #24]
 806b474:	69fa      	ldr	r2, [r7, #28]
 806b476:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 806b478:	69bb      	ldr	r3, [r7, #24]
 806b47a:	699b      	ldr	r3, [r3, #24]
 806b47c:	2b00      	cmp	r3, #0
 806b47e:	db04      	blt.n	806b48a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806b480:	69fb      	ldr	r3, [r7, #28]
 806b482:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 806b486:	69bb      	ldr	r3, [r7, #24]
 806b488:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 806b48a:	69bb      	ldr	r3, [r7, #24]
 806b48c:	6959      	ldr	r1, [r3, #20]
 806b48e:	693a      	ldr	r2, [r7, #16]
 806b490:	4613      	mov	r3, r2
 806b492:	009b      	lsls	r3, r3, #2
 806b494:	4413      	add	r3, r2
 806b496:	009b      	lsls	r3, r3, #2
 806b498:	4a13      	ldr	r2, [pc, #76]	; (806b4e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 806b49a:	4413      	add	r3, r2
 806b49c:	4299      	cmp	r1, r3
 806b49e:	d11c      	bne.n	806b4da <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 806b4a0:	69bb      	ldr	r3, [r7, #24]
 806b4a2:	3304      	adds	r3, #4
 806b4a4:	4618      	mov	r0, r3
 806b4a6:	f7fd ff67 	bl	8069378 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 806b4aa:	69bb      	ldr	r3, [r7, #24]
 806b4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b4ae:	4b0f      	ldr	r3, [pc, #60]	; (806b4ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 806b4b0:	681b      	ldr	r3, [r3, #0]
 806b4b2:	429a      	cmp	r2, r3
 806b4b4:	d903      	bls.n	806b4be <vTaskPriorityDisinheritAfterTimeout+0xd2>
 806b4b6:	69bb      	ldr	r3, [r7, #24]
 806b4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b4ba:	4a0c      	ldr	r2, [pc, #48]	; (806b4ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 806b4bc:	6013      	str	r3, [r2, #0]
 806b4be:	69bb      	ldr	r3, [r7, #24]
 806b4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806b4c2:	4613      	mov	r3, r2
 806b4c4:	009b      	lsls	r3, r3, #2
 806b4c6:	4413      	add	r3, r2
 806b4c8:	009b      	lsls	r3, r3, #2
 806b4ca:	4a07      	ldr	r2, [pc, #28]	; (806b4e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 806b4cc:	441a      	add	r2, r3
 806b4ce:	69bb      	ldr	r3, [r7, #24]
 806b4d0:	3304      	adds	r3, #4
 806b4d2:	4619      	mov	r1, r3
 806b4d4:	4610      	mov	r0, r2
 806b4d6:	f7fd fef2 	bl	80692be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 806b4da:	bf00      	nop
 806b4dc:	3720      	adds	r7, #32
 806b4de:	46bd      	mov	sp, r7
 806b4e0:	bd80      	pop	{r7, pc}
 806b4e2:	bf00      	nop
 806b4e4:	20000960 	.word	0x20000960
 806b4e8:	20000964 	.word	0x20000964
 806b4ec:	20000e3c 	.word	0x20000e3c

0806b4f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 806b4f0:	b480      	push	{r7}
 806b4f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 806b4f4:	4b07      	ldr	r3, [pc, #28]	; (806b514 <pvTaskIncrementMutexHeldCount+0x24>)
 806b4f6:	681b      	ldr	r3, [r3, #0]
 806b4f8:	2b00      	cmp	r3, #0
 806b4fa:	d004      	beq.n	806b506 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 806b4fc:	4b05      	ldr	r3, [pc, #20]	; (806b514 <pvTaskIncrementMutexHeldCount+0x24>)
 806b4fe:	681b      	ldr	r3, [r3, #0]
 806b500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 806b502:	3201      	adds	r2, #1
 806b504:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 806b506:	4b03      	ldr	r3, [pc, #12]	; (806b514 <pvTaskIncrementMutexHeldCount+0x24>)
 806b508:	681b      	ldr	r3, [r3, #0]
	}
 806b50a:	4618      	mov	r0, r3
 806b50c:	46bd      	mov	sp, r7
 806b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b512:	4770      	bx	lr
 806b514:	20000960 	.word	0x20000960

0806b518 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 806b518:	b580      	push	{r7, lr}
 806b51a:	b084      	sub	sp, #16
 806b51c:	af00      	add	r7, sp, #0
 806b51e:	6078      	str	r0, [r7, #4]
 806b520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 806b522:	4b21      	ldr	r3, [pc, #132]	; (806b5a8 <prvAddCurrentTaskToDelayedList+0x90>)
 806b524:	681b      	ldr	r3, [r3, #0]
 806b526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 806b528:	4b20      	ldr	r3, [pc, #128]	; (806b5ac <prvAddCurrentTaskToDelayedList+0x94>)
 806b52a:	681b      	ldr	r3, [r3, #0]
 806b52c:	3304      	adds	r3, #4
 806b52e:	4618      	mov	r0, r3
 806b530:	f7fd ff22 	bl	8069378 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 806b534:	687b      	ldr	r3, [r7, #4]
 806b536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806b53a:	d10a      	bne.n	806b552 <prvAddCurrentTaskToDelayedList+0x3a>
 806b53c:	683b      	ldr	r3, [r7, #0]
 806b53e:	2b00      	cmp	r3, #0
 806b540:	d007      	beq.n	806b552 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 806b542:	4b1a      	ldr	r3, [pc, #104]	; (806b5ac <prvAddCurrentTaskToDelayedList+0x94>)
 806b544:	681b      	ldr	r3, [r3, #0]
 806b546:	3304      	adds	r3, #4
 806b548:	4619      	mov	r1, r3
 806b54a:	4819      	ldr	r0, [pc, #100]	; (806b5b0 <prvAddCurrentTaskToDelayedList+0x98>)
 806b54c:	f7fd feb7 	bl	80692be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 806b550:	e026      	b.n	806b5a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 806b552:	68fa      	ldr	r2, [r7, #12]
 806b554:	687b      	ldr	r3, [r7, #4]
 806b556:	4413      	add	r3, r2
 806b558:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 806b55a:	4b14      	ldr	r3, [pc, #80]	; (806b5ac <prvAddCurrentTaskToDelayedList+0x94>)
 806b55c:	681b      	ldr	r3, [r3, #0]
 806b55e:	68ba      	ldr	r2, [r7, #8]
 806b560:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 806b562:	68ba      	ldr	r2, [r7, #8]
 806b564:	68fb      	ldr	r3, [r7, #12]
 806b566:	429a      	cmp	r2, r3
 806b568:	d209      	bcs.n	806b57e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 806b56a:	4b12      	ldr	r3, [pc, #72]	; (806b5b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 806b56c:	681a      	ldr	r2, [r3, #0]
 806b56e:	4b0f      	ldr	r3, [pc, #60]	; (806b5ac <prvAddCurrentTaskToDelayedList+0x94>)
 806b570:	681b      	ldr	r3, [r3, #0]
 806b572:	3304      	adds	r3, #4
 806b574:	4619      	mov	r1, r3
 806b576:	4610      	mov	r0, r2
 806b578:	f7fd fec5 	bl	8069306 <vListInsert>
}
 806b57c:	e010      	b.n	806b5a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 806b57e:	4b0e      	ldr	r3, [pc, #56]	; (806b5b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 806b580:	681a      	ldr	r2, [r3, #0]
 806b582:	4b0a      	ldr	r3, [pc, #40]	; (806b5ac <prvAddCurrentTaskToDelayedList+0x94>)
 806b584:	681b      	ldr	r3, [r3, #0]
 806b586:	3304      	adds	r3, #4
 806b588:	4619      	mov	r1, r3
 806b58a:	4610      	mov	r0, r2
 806b58c:	f7fd febb 	bl	8069306 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 806b590:	4b0a      	ldr	r3, [pc, #40]	; (806b5bc <prvAddCurrentTaskToDelayedList+0xa4>)
 806b592:	681b      	ldr	r3, [r3, #0]
 806b594:	68ba      	ldr	r2, [r7, #8]
 806b596:	429a      	cmp	r2, r3
 806b598:	d202      	bcs.n	806b5a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 806b59a:	4a08      	ldr	r2, [pc, #32]	; (806b5bc <prvAddCurrentTaskToDelayedList+0xa4>)
 806b59c:	68bb      	ldr	r3, [r7, #8]
 806b59e:	6013      	str	r3, [r2, #0]
}
 806b5a0:	bf00      	nop
 806b5a2:	3710      	adds	r7, #16
 806b5a4:	46bd      	mov	sp, r7
 806b5a6:	bd80      	pop	{r7, pc}
 806b5a8:	20000e38 	.word	0x20000e38
 806b5ac:	20000960 	.word	0x20000960
 806b5b0:	20000e20 	.word	0x20000e20
 806b5b4:	20000df0 	.word	0x20000df0
 806b5b8:	20000dec 	.word	0x20000dec
 806b5bc:	20000e54 	.word	0x20000e54

0806b5c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 806b5c0:	b580      	push	{r7, lr}
 806b5c2:	b08a      	sub	sp, #40	; 0x28
 806b5c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 806b5c6:	2300      	movs	r3, #0
 806b5c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 806b5ca:	f000 fba1 	bl	806bd10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 806b5ce:	4b1c      	ldr	r3, [pc, #112]	; (806b640 <xTimerCreateTimerTask+0x80>)
 806b5d0:	681b      	ldr	r3, [r3, #0]
 806b5d2:	2b00      	cmp	r3, #0
 806b5d4:	d021      	beq.n	806b61a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 806b5d6:	2300      	movs	r3, #0
 806b5d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 806b5da:	2300      	movs	r3, #0
 806b5dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 806b5de:	1d3a      	adds	r2, r7, #4
 806b5e0:	f107 0108 	add.w	r1, r7, #8
 806b5e4:	f107 030c 	add.w	r3, r7, #12
 806b5e8:	4618      	mov	r0, r3
 806b5ea:	f7fd fe21 	bl	8069230 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 806b5ee:	6879      	ldr	r1, [r7, #4]
 806b5f0:	68bb      	ldr	r3, [r7, #8]
 806b5f2:	68fa      	ldr	r2, [r7, #12]
 806b5f4:	9202      	str	r2, [sp, #8]
 806b5f6:	9301      	str	r3, [sp, #4]
 806b5f8:	2302      	movs	r3, #2
 806b5fa:	9300      	str	r3, [sp, #0]
 806b5fc:	2300      	movs	r3, #0
 806b5fe:	460a      	mov	r2, r1
 806b600:	4910      	ldr	r1, [pc, #64]	; (806b644 <xTimerCreateTimerTask+0x84>)
 806b602:	4811      	ldr	r0, [pc, #68]	; (806b648 <xTimerCreateTimerTask+0x88>)
 806b604:	f7fe ffa6 	bl	806a554 <xTaskCreateStatic>
 806b608:	4603      	mov	r3, r0
 806b60a:	4a10      	ldr	r2, [pc, #64]	; (806b64c <xTimerCreateTimerTask+0x8c>)
 806b60c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 806b60e:	4b0f      	ldr	r3, [pc, #60]	; (806b64c <xTimerCreateTimerTask+0x8c>)
 806b610:	681b      	ldr	r3, [r3, #0]
 806b612:	2b00      	cmp	r3, #0
 806b614:	d001      	beq.n	806b61a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 806b616:	2301      	movs	r3, #1
 806b618:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 806b61a:	697b      	ldr	r3, [r7, #20]
 806b61c:	2b00      	cmp	r3, #0
 806b61e:	d10a      	bne.n	806b636 <xTimerCreateTimerTask+0x76>
	__asm volatile
 806b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b624:	f383 8811 	msr	BASEPRI, r3
 806b628:	f3bf 8f6f 	isb	sy
 806b62c:	f3bf 8f4f 	dsb	sy
 806b630:	613b      	str	r3, [r7, #16]
}
 806b632:	bf00      	nop
 806b634:	e7fe      	b.n	806b634 <xTimerCreateTimerTask+0x74>
	return xReturn;
 806b636:	697b      	ldr	r3, [r7, #20]
}
 806b638:	4618      	mov	r0, r3
 806b63a:	3718      	adds	r7, #24
 806b63c:	46bd      	mov	sp, r7
 806b63e:	bd80      	pop	{r7, pc}
 806b640:	20000e90 	.word	0x20000e90
 806b644:	0806d4ac 	.word	0x0806d4ac
 806b648:	0806b8b9 	.word	0x0806b8b9
 806b64c:	20000e94 	.word	0x20000e94

0806b650 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 806b650:	b580      	push	{r7, lr}
 806b652:	b088      	sub	sp, #32
 806b654:	af02      	add	r7, sp, #8
 806b656:	60f8      	str	r0, [r7, #12]
 806b658:	60b9      	str	r1, [r7, #8]
 806b65a:	607a      	str	r2, [r7, #4]
 806b65c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 806b65e:	202c      	movs	r0, #44	; 0x2c
 806b660:	f000 fe02 	bl	806c268 <pvPortMalloc>
 806b664:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 806b666:	697b      	ldr	r3, [r7, #20]
 806b668:	2b00      	cmp	r3, #0
 806b66a:	d00d      	beq.n	806b688 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 806b66c:	697b      	ldr	r3, [r7, #20]
 806b66e:	2200      	movs	r2, #0
 806b670:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 806b674:	697b      	ldr	r3, [r7, #20]
 806b676:	9301      	str	r3, [sp, #4]
 806b678:	6a3b      	ldr	r3, [r7, #32]
 806b67a:	9300      	str	r3, [sp, #0]
 806b67c:	683b      	ldr	r3, [r7, #0]
 806b67e:	687a      	ldr	r2, [r7, #4]
 806b680:	68b9      	ldr	r1, [r7, #8]
 806b682:	68f8      	ldr	r0, [r7, #12]
 806b684:	f000 f843 	bl	806b70e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 806b688:	697b      	ldr	r3, [r7, #20]
	}
 806b68a:	4618      	mov	r0, r3
 806b68c:	3718      	adds	r7, #24
 806b68e:	46bd      	mov	sp, r7
 806b690:	bd80      	pop	{r7, pc}

0806b692 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 806b692:	b580      	push	{r7, lr}
 806b694:	b08a      	sub	sp, #40	; 0x28
 806b696:	af02      	add	r7, sp, #8
 806b698:	60f8      	str	r0, [r7, #12]
 806b69a:	60b9      	str	r1, [r7, #8]
 806b69c:	607a      	str	r2, [r7, #4]
 806b69e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 806b6a0:	232c      	movs	r3, #44	; 0x2c
 806b6a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 806b6a4:	693b      	ldr	r3, [r7, #16]
 806b6a6:	2b2c      	cmp	r3, #44	; 0x2c
 806b6a8:	d00a      	beq.n	806b6c0 <xTimerCreateStatic+0x2e>
	__asm volatile
 806b6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b6ae:	f383 8811 	msr	BASEPRI, r3
 806b6b2:	f3bf 8f6f 	isb	sy
 806b6b6:	f3bf 8f4f 	dsb	sy
 806b6ba:	61bb      	str	r3, [r7, #24]
}
 806b6bc:	bf00      	nop
 806b6be:	e7fe      	b.n	806b6be <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 806b6c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 806b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806b6c4:	2b00      	cmp	r3, #0
 806b6c6:	d10a      	bne.n	806b6de <xTimerCreateStatic+0x4c>
	__asm volatile
 806b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b6cc:	f383 8811 	msr	BASEPRI, r3
 806b6d0:	f3bf 8f6f 	isb	sy
 806b6d4:	f3bf 8f4f 	dsb	sy
 806b6d8:	617b      	str	r3, [r7, #20]
}
 806b6da:	bf00      	nop
 806b6dc:	e7fe      	b.n	806b6dc <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 806b6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806b6e0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 806b6e2:	69fb      	ldr	r3, [r7, #28]
 806b6e4:	2b00      	cmp	r3, #0
 806b6e6:	d00d      	beq.n	806b704 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 806b6e8:	69fb      	ldr	r3, [r7, #28]
 806b6ea:	2202      	movs	r2, #2
 806b6ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 806b6f0:	69fb      	ldr	r3, [r7, #28]
 806b6f2:	9301      	str	r3, [sp, #4]
 806b6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806b6f6:	9300      	str	r3, [sp, #0]
 806b6f8:	683b      	ldr	r3, [r7, #0]
 806b6fa:	687a      	ldr	r2, [r7, #4]
 806b6fc:	68b9      	ldr	r1, [r7, #8]
 806b6fe:	68f8      	ldr	r0, [r7, #12]
 806b700:	f000 f805 	bl	806b70e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 806b704:	69fb      	ldr	r3, [r7, #28]
	}
 806b706:	4618      	mov	r0, r3
 806b708:	3720      	adds	r7, #32
 806b70a:	46bd      	mov	sp, r7
 806b70c:	bd80      	pop	{r7, pc}

0806b70e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 806b70e:	b580      	push	{r7, lr}
 806b710:	b086      	sub	sp, #24
 806b712:	af00      	add	r7, sp, #0
 806b714:	60f8      	str	r0, [r7, #12]
 806b716:	60b9      	str	r1, [r7, #8]
 806b718:	607a      	str	r2, [r7, #4]
 806b71a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 806b71c:	68bb      	ldr	r3, [r7, #8]
 806b71e:	2b00      	cmp	r3, #0
 806b720:	d10a      	bne.n	806b738 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 806b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b726:	f383 8811 	msr	BASEPRI, r3
 806b72a:	f3bf 8f6f 	isb	sy
 806b72e:	f3bf 8f4f 	dsb	sy
 806b732:	617b      	str	r3, [r7, #20]
}
 806b734:	bf00      	nop
 806b736:	e7fe      	b.n	806b736 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 806b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806b73a:	2b00      	cmp	r3, #0
 806b73c:	d01e      	beq.n	806b77c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 806b73e:	f000 fae7 	bl	806bd10 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 806b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806b744:	68fa      	ldr	r2, [r7, #12]
 806b746:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 806b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806b74a:	68ba      	ldr	r2, [r7, #8]
 806b74c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 806b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806b750:	683a      	ldr	r2, [r7, #0]
 806b752:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 806b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806b756:	6a3a      	ldr	r2, [r7, #32]
 806b758:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 806b75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806b75c:	3304      	adds	r3, #4
 806b75e:	4618      	mov	r0, r3
 806b760:	f7fd fda0 	bl	80692a4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 806b764:	687b      	ldr	r3, [r7, #4]
 806b766:	2b00      	cmp	r3, #0
 806b768:	d008      	beq.n	806b77c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 806b76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806b76c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 806b770:	f043 0304 	orr.w	r3, r3, #4
 806b774:	b2da      	uxtb	r2, r3
 806b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806b778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 806b77c:	bf00      	nop
 806b77e:	3718      	adds	r7, #24
 806b780:	46bd      	mov	sp, r7
 806b782:	bd80      	pop	{r7, pc}

0806b784 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 806b784:	b580      	push	{r7, lr}
 806b786:	b08a      	sub	sp, #40	; 0x28
 806b788:	af00      	add	r7, sp, #0
 806b78a:	60f8      	str	r0, [r7, #12]
 806b78c:	60b9      	str	r1, [r7, #8]
 806b78e:	607a      	str	r2, [r7, #4]
 806b790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 806b792:	2300      	movs	r3, #0
 806b794:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 806b796:	68fb      	ldr	r3, [r7, #12]
 806b798:	2b00      	cmp	r3, #0
 806b79a:	d10a      	bne.n	806b7b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 806b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b7a0:	f383 8811 	msr	BASEPRI, r3
 806b7a4:	f3bf 8f6f 	isb	sy
 806b7a8:	f3bf 8f4f 	dsb	sy
 806b7ac:	623b      	str	r3, [r7, #32]
}
 806b7ae:	bf00      	nop
 806b7b0:	e7fe      	b.n	806b7b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 806b7b2:	4b1a      	ldr	r3, [pc, #104]	; (806b81c <xTimerGenericCommand+0x98>)
 806b7b4:	681b      	ldr	r3, [r3, #0]
 806b7b6:	2b00      	cmp	r3, #0
 806b7b8:	d02a      	beq.n	806b810 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 806b7ba:	68bb      	ldr	r3, [r7, #8]
 806b7bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 806b7be:	687b      	ldr	r3, [r7, #4]
 806b7c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 806b7c2:	68fb      	ldr	r3, [r7, #12]
 806b7c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 806b7c6:	68bb      	ldr	r3, [r7, #8]
 806b7c8:	2b05      	cmp	r3, #5
 806b7ca:	dc18      	bgt.n	806b7fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 806b7cc:	f7ff fd1a 	bl	806b204 <xTaskGetSchedulerState>
 806b7d0:	4603      	mov	r3, r0
 806b7d2:	2b02      	cmp	r3, #2
 806b7d4:	d109      	bne.n	806b7ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 806b7d6:	4b11      	ldr	r3, [pc, #68]	; (806b81c <xTimerGenericCommand+0x98>)
 806b7d8:	6818      	ldr	r0, [r3, #0]
 806b7da:	f107 0110 	add.w	r1, r7, #16
 806b7de:	2300      	movs	r3, #0
 806b7e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806b7e2:	f7fe f851 	bl	8069888 <xQueueGenericSend>
 806b7e6:	6278      	str	r0, [r7, #36]	; 0x24
 806b7e8:	e012      	b.n	806b810 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 806b7ea:	4b0c      	ldr	r3, [pc, #48]	; (806b81c <xTimerGenericCommand+0x98>)
 806b7ec:	6818      	ldr	r0, [r3, #0]
 806b7ee:	f107 0110 	add.w	r1, r7, #16
 806b7f2:	2300      	movs	r3, #0
 806b7f4:	2200      	movs	r2, #0
 806b7f6:	f7fe f847 	bl	8069888 <xQueueGenericSend>
 806b7fa:	6278      	str	r0, [r7, #36]	; 0x24
 806b7fc:	e008      	b.n	806b810 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 806b7fe:	4b07      	ldr	r3, [pc, #28]	; (806b81c <xTimerGenericCommand+0x98>)
 806b800:	6818      	ldr	r0, [r3, #0]
 806b802:	f107 0110 	add.w	r1, r7, #16
 806b806:	2300      	movs	r3, #0
 806b808:	683a      	ldr	r2, [r7, #0]
 806b80a:	f7fe f93b 	bl	8069a84 <xQueueGenericSendFromISR>
 806b80e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 806b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 806b812:	4618      	mov	r0, r3
 806b814:	3728      	adds	r7, #40	; 0x28
 806b816:	46bd      	mov	sp, r7
 806b818:	bd80      	pop	{r7, pc}
 806b81a:	bf00      	nop
 806b81c:	20000e90 	.word	0x20000e90

0806b820 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 806b820:	b580      	push	{r7, lr}
 806b822:	b088      	sub	sp, #32
 806b824:	af02      	add	r7, sp, #8
 806b826:	6078      	str	r0, [r7, #4]
 806b828:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806b82a:	4b22      	ldr	r3, [pc, #136]	; (806b8b4 <prvProcessExpiredTimer+0x94>)
 806b82c:	681b      	ldr	r3, [r3, #0]
 806b82e:	68db      	ldr	r3, [r3, #12]
 806b830:	68db      	ldr	r3, [r3, #12]
 806b832:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 806b834:	697b      	ldr	r3, [r7, #20]
 806b836:	3304      	adds	r3, #4
 806b838:	4618      	mov	r0, r3
 806b83a:	f7fd fd9d 	bl	8069378 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 806b83e:	697b      	ldr	r3, [r7, #20]
 806b840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 806b844:	f003 0304 	and.w	r3, r3, #4
 806b848:	2b00      	cmp	r3, #0
 806b84a:	d022      	beq.n	806b892 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 806b84c:	697b      	ldr	r3, [r7, #20]
 806b84e:	699a      	ldr	r2, [r3, #24]
 806b850:	687b      	ldr	r3, [r7, #4]
 806b852:	18d1      	adds	r1, r2, r3
 806b854:	687b      	ldr	r3, [r7, #4]
 806b856:	683a      	ldr	r2, [r7, #0]
 806b858:	6978      	ldr	r0, [r7, #20]
 806b85a:	f000 f8d1 	bl	806ba00 <prvInsertTimerInActiveList>
 806b85e:	4603      	mov	r3, r0
 806b860:	2b00      	cmp	r3, #0
 806b862:	d01f      	beq.n	806b8a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 806b864:	2300      	movs	r3, #0
 806b866:	9300      	str	r3, [sp, #0]
 806b868:	2300      	movs	r3, #0
 806b86a:	687a      	ldr	r2, [r7, #4]
 806b86c:	2100      	movs	r1, #0
 806b86e:	6978      	ldr	r0, [r7, #20]
 806b870:	f7ff ff88 	bl	806b784 <xTimerGenericCommand>
 806b874:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 806b876:	693b      	ldr	r3, [r7, #16]
 806b878:	2b00      	cmp	r3, #0
 806b87a:	d113      	bne.n	806b8a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 806b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806b880:	f383 8811 	msr	BASEPRI, r3
 806b884:	f3bf 8f6f 	isb	sy
 806b888:	f3bf 8f4f 	dsb	sy
 806b88c:	60fb      	str	r3, [r7, #12]
}
 806b88e:	bf00      	nop
 806b890:	e7fe      	b.n	806b890 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 806b892:	697b      	ldr	r3, [r7, #20]
 806b894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 806b898:	f023 0301 	bic.w	r3, r3, #1
 806b89c:	b2da      	uxtb	r2, r3
 806b89e:	697b      	ldr	r3, [r7, #20]
 806b8a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 806b8a4:	697b      	ldr	r3, [r7, #20]
 806b8a6:	6a1b      	ldr	r3, [r3, #32]
 806b8a8:	6978      	ldr	r0, [r7, #20]
 806b8aa:	4798      	blx	r3
}
 806b8ac:	bf00      	nop
 806b8ae:	3718      	adds	r7, #24
 806b8b0:	46bd      	mov	sp, r7
 806b8b2:	bd80      	pop	{r7, pc}
 806b8b4:	20000e88 	.word	0x20000e88

0806b8b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 806b8b8:	b580      	push	{r7, lr}
 806b8ba:	b084      	sub	sp, #16
 806b8bc:	af00      	add	r7, sp, #0
 806b8be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 806b8c0:	f107 0308 	add.w	r3, r7, #8
 806b8c4:	4618      	mov	r0, r3
 806b8c6:	f000 f857 	bl	806b978 <prvGetNextExpireTime>
 806b8ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 806b8cc:	68bb      	ldr	r3, [r7, #8]
 806b8ce:	4619      	mov	r1, r3
 806b8d0:	68f8      	ldr	r0, [r7, #12]
 806b8d2:	f000 f803 	bl	806b8dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 806b8d6:	f000 f8d5 	bl	806ba84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 806b8da:	e7f1      	b.n	806b8c0 <prvTimerTask+0x8>

0806b8dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 806b8dc:	b580      	push	{r7, lr}
 806b8de:	b084      	sub	sp, #16
 806b8e0:	af00      	add	r7, sp, #0
 806b8e2:	6078      	str	r0, [r7, #4]
 806b8e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 806b8e6:	f7ff f891 	bl	806aa0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 806b8ea:	f107 0308 	add.w	r3, r7, #8
 806b8ee:	4618      	mov	r0, r3
 806b8f0:	f000 f866 	bl	806b9c0 <prvSampleTimeNow>
 806b8f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 806b8f6:	68bb      	ldr	r3, [r7, #8]
 806b8f8:	2b00      	cmp	r3, #0
 806b8fa:	d130      	bne.n	806b95e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 806b8fc:	683b      	ldr	r3, [r7, #0]
 806b8fe:	2b00      	cmp	r3, #0
 806b900:	d10a      	bne.n	806b918 <prvProcessTimerOrBlockTask+0x3c>
 806b902:	687a      	ldr	r2, [r7, #4]
 806b904:	68fb      	ldr	r3, [r7, #12]
 806b906:	429a      	cmp	r2, r3
 806b908:	d806      	bhi.n	806b918 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 806b90a:	f7ff f88d 	bl	806aa28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 806b90e:	68f9      	ldr	r1, [r7, #12]
 806b910:	6878      	ldr	r0, [r7, #4]
 806b912:	f7ff ff85 	bl	806b820 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 806b916:	e024      	b.n	806b962 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 806b918:	683b      	ldr	r3, [r7, #0]
 806b91a:	2b00      	cmp	r3, #0
 806b91c:	d008      	beq.n	806b930 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 806b91e:	4b13      	ldr	r3, [pc, #76]	; (806b96c <prvProcessTimerOrBlockTask+0x90>)
 806b920:	681b      	ldr	r3, [r3, #0]
 806b922:	681b      	ldr	r3, [r3, #0]
 806b924:	2b00      	cmp	r3, #0
 806b926:	d101      	bne.n	806b92c <prvProcessTimerOrBlockTask+0x50>
 806b928:	2301      	movs	r3, #1
 806b92a:	e000      	b.n	806b92e <prvProcessTimerOrBlockTask+0x52>
 806b92c:	2300      	movs	r3, #0
 806b92e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 806b930:	4b0f      	ldr	r3, [pc, #60]	; (806b970 <prvProcessTimerOrBlockTask+0x94>)
 806b932:	6818      	ldr	r0, [r3, #0]
 806b934:	687a      	ldr	r2, [r7, #4]
 806b936:	68fb      	ldr	r3, [r7, #12]
 806b938:	1ad3      	subs	r3, r2, r3
 806b93a:	683a      	ldr	r2, [r7, #0]
 806b93c:	4619      	mov	r1, r3
 806b93e:	f7fe fdd5 	bl	806a4ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 806b942:	f7ff f871 	bl	806aa28 <xTaskResumeAll>
 806b946:	4603      	mov	r3, r0
 806b948:	2b00      	cmp	r3, #0
 806b94a:	d10a      	bne.n	806b962 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 806b94c:	4b09      	ldr	r3, [pc, #36]	; (806b974 <prvProcessTimerOrBlockTask+0x98>)
 806b94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806b952:	601a      	str	r2, [r3, #0]
 806b954:	f3bf 8f4f 	dsb	sy
 806b958:	f3bf 8f6f 	isb	sy
}
 806b95c:	e001      	b.n	806b962 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 806b95e:	f7ff f863 	bl	806aa28 <xTaskResumeAll>
}
 806b962:	bf00      	nop
 806b964:	3710      	adds	r7, #16
 806b966:	46bd      	mov	sp, r7
 806b968:	bd80      	pop	{r7, pc}
 806b96a:	bf00      	nop
 806b96c:	20000e8c 	.word	0x20000e8c
 806b970:	20000e90 	.word	0x20000e90
 806b974:	e000ed04 	.word	0xe000ed04

0806b978 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 806b978:	b480      	push	{r7}
 806b97a:	b085      	sub	sp, #20
 806b97c:	af00      	add	r7, sp, #0
 806b97e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 806b980:	4b0e      	ldr	r3, [pc, #56]	; (806b9bc <prvGetNextExpireTime+0x44>)
 806b982:	681b      	ldr	r3, [r3, #0]
 806b984:	681b      	ldr	r3, [r3, #0]
 806b986:	2b00      	cmp	r3, #0
 806b988:	d101      	bne.n	806b98e <prvGetNextExpireTime+0x16>
 806b98a:	2201      	movs	r2, #1
 806b98c:	e000      	b.n	806b990 <prvGetNextExpireTime+0x18>
 806b98e:	2200      	movs	r2, #0
 806b990:	687b      	ldr	r3, [r7, #4]
 806b992:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 806b994:	687b      	ldr	r3, [r7, #4]
 806b996:	681b      	ldr	r3, [r3, #0]
 806b998:	2b00      	cmp	r3, #0
 806b99a:	d105      	bne.n	806b9a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 806b99c:	4b07      	ldr	r3, [pc, #28]	; (806b9bc <prvGetNextExpireTime+0x44>)
 806b99e:	681b      	ldr	r3, [r3, #0]
 806b9a0:	68db      	ldr	r3, [r3, #12]
 806b9a2:	681b      	ldr	r3, [r3, #0]
 806b9a4:	60fb      	str	r3, [r7, #12]
 806b9a6:	e001      	b.n	806b9ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 806b9a8:	2300      	movs	r3, #0
 806b9aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 806b9ac:	68fb      	ldr	r3, [r7, #12]
}
 806b9ae:	4618      	mov	r0, r3
 806b9b0:	3714      	adds	r7, #20
 806b9b2:	46bd      	mov	sp, r7
 806b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b9b8:	4770      	bx	lr
 806b9ba:	bf00      	nop
 806b9bc:	20000e88 	.word	0x20000e88

0806b9c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 806b9c0:	b580      	push	{r7, lr}
 806b9c2:	b084      	sub	sp, #16
 806b9c4:	af00      	add	r7, sp, #0
 806b9c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 806b9c8:	f7ff f8cc 	bl	806ab64 <xTaskGetTickCount>
 806b9cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 806b9ce:	4b0b      	ldr	r3, [pc, #44]	; (806b9fc <prvSampleTimeNow+0x3c>)
 806b9d0:	681b      	ldr	r3, [r3, #0]
 806b9d2:	68fa      	ldr	r2, [r7, #12]
 806b9d4:	429a      	cmp	r2, r3
 806b9d6:	d205      	bcs.n	806b9e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 806b9d8:	f000 f936 	bl	806bc48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 806b9dc:	687b      	ldr	r3, [r7, #4]
 806b9de:	2201      	movs	r2, #1
 806b9e0:	601a      	str	r2, [r3, #0]
 806b9e2:	e002      	b.n	806b9ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 806b9e4:	687b      	ldr	r3, [r7, #4]
 806b9e6:	2200      	movs	r2, #0
 806b9e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 806b9ea:	4a04      	ldr	r2, [pc, #16]	; (806b9fc <prvSampleTimeNow+0x3c>)
 806b9ec:	68fb      	ldr	r3, [r7, #12]
 806b9ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 806b9f0:	68fb      	ldr	r3, [r7, #12]
}
 806b9f2:	4618      	mov	r0, r3
 806b9f4:	3710      	adds	r7, #16
 806b9f6:	46bd      	mov	sp, r7
 806b9f8:	bd80      	pop	{r7, pc}
 806b9fa:	bf00      	nop
 806b9fc:	20000e98 	.word	0x20000e98

0806ba00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 806ba00:	b580      	push	{r7, lr}
 806ba02:	b086      	sub	sp, #24
 806ba04:	af00      	add	r7, sp, #0
 806ba06:	60f8      	str	r0, [r7, #12]
 806ba08:	60b9      	str	r1, [r7, #8]
 806ba0a:	607a      	str	r2, [r7, #4]
 806ba0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 806ba0e:	2300      	movs	r3, #0
 806ba10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 806ba12:	68fb      	ldr	r3, [r7, #12]
 806ba14:	68ba      	ldr	r2, [r7, #8]
 806ba16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 806ba18:	68fb      	ldr	r3, [r7, #12]
 806ba1a:	68fa      	ldr	r2, [r7, #12]
 806ba1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 806ba1e:	68ba      	ldr	r2, [r7, #8]
 806ba20:	687b      	ldr	r3, [r7, #4]
 806ba22:	429a      	cmp	r2, r3
 806ba24:	d812      	bhi.n	806ba4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806ba26:	687a      	ldr	r2, [r7, #4]
 806ba28:	683b      	ldr	r3, [r7, #0]
 806ba2a:	1ad2      	subs	r2, r2, r3
 806ba2c:	68fb      	ldr	r3, [r7, #12]
 806ba2e:	699b      	ldr	r3, [r3, #24]
 806ba30:	429a      	cmp	r2, r3
 806ba32:	d302      	bcc.n	806ba3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 806ba34:	2301      	movs	r3, #1
 806ba36:	617b      	str	r3, [r7, #20]
 806ba38:	e01b      	b.n	806ba72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 806ba3a:	4b10      	ldr	r3, [pc, #64]	; (806ba7c <prvInsertTimerInActiveList+0x7c>)
 806ba3c:	681a      	ldr	r2, [r3, #0]
 806ba3e:	68fb      	ldr	r3, [r7, #12]
 806ba40:	3304      	adds	r3, #4
 806ba42:	4619      	mov	r1, r3
 806ba44:	4610      	mov	r0, r2
 806ba46:	f7fd fc5e 	bl	8069306 <vListInsert>
 806ba4a:	e012      	b.n	806ba72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 806ba4c:	687a      	ldr	r2, [r7, #4]
 806ba4e:	683b      	ldr	r3, [r7, #0]
 806ba50:	429a      	cmp	r2, r3
 806ba52:	d206      	bcs.n	806ba62 <prvInsertTimerInActiveList+0x62>
 806ba54:	68ba      	ldr	r2, [r7, #8]
 806ba56:	683b      	ldr	r3, [r7, #0]
 806ba58:	429a      	cmp	r2, r3
 806ba5a:	d302      	bcc.n	806ba62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 806ba5c:	2301      	movs	r3, #1
 806ba5e:	617b      	str	r3, [r7, #20]
 806ba60:	e007      	b.n	806ba72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 806ba62:	4b07      	ldr	r3, [pc, #28]	; (806ba80 <prvInsertTimerInActiveList+0x80>)
 806ba64:	681a      	ldr	r2, [r3, #0]
 806ba66:	68fb      	ldr	r3, [r7, #12]
 806ba68:	3304      	adds	r3, #4
 806ba6a:	4619      	mov	r1, r3
 806ba6c:	4610      	mov	r0, r2
 806ba6e:	f7fd fc4a 	bl	8069306 <vListInsert>
		}
	}

	return xProcessTimerNow;
 806ba72:	697b      	ldr	r3, [r7, #20]
}
 806ba74:	4618      	mov	r0, r3
 806ba76:	3718      	adds	r7, #24
 806ba78:	46bd      	mov	sp, r7
 806ba7a:	bd80      	pop	{r7, pc}
 806ba7c:	20000e8c 	.word	0x20000e8c
 806ba80:	20000e88 	.word	0x20000e88

0806ba84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 806ba84:	b580      	push	{r7, lr}
 806ba86:	b08e      	sub	sp, #56	; 0x38
 806ba88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 806ba8a:	e0ca      	b.n	806bc22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 806ba8c:	687b      	ldr	r3, [r7, #4]
 806ba8e:	2b00      	cmp	r3, #0
 806ba90:	da18      	bge.n	806bac4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 806ba92:	1d3b      	adds	r3, r7, #4
 806ba94:	3304      	adds	r3, #4
 806ba96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 806ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806ba9a:	2b00      	cmp	r3, #0
 806ba9c:	d10a      	bne.n	806bab4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 806ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806baa2:	f383 8811 	msr	BASEPRI, r3
 806baa6:	f3bf 8f6f 	isb	sy
 806baaa:	f3bf 8f4f 	dsb	sy
 806baae:	61fb      	str	r3, [r7, #28]
}
 806bab0:	bf00      	nop
 806bab2:	e7fe      	b.n	806bab2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 806bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806bab6:	681b      	ldr	r3, [r3, #0]
 806bab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806baba:	6850      	ldr	r0, [r2, #4]
 806babc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806babe:	6892      	ldr	r2, [r2, #8]
 806bac0:	4611      	mov	r1, r2
 806bac2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 806bac4:	687b      	ldr	r3, [r7, #4]
 806bac6:	2b00      	cmp	r3, #0
 806bac8:	f2c0 80aa 	blt.w	806bc20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 806bacc:	68fb      	ldr	r3, [r7, #12]
 806bace:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 806bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bad2:	695b      	ldr	r3, [r3, #20]
 806bad4:	2b00      	cmp	r3, #0
 806bad6:	d004      	beq.n	806bae2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 806bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bada:	3304      	adds	r3, #4
 806badc:	4618      	mov	r0, r3
 806bade:	f7fd fc4b 	bl	8069378 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 806bae2:	463b      	mov	r3, r7
 806bae4:	4618      	mov	r0, r3
 806bae6:	f7ff ff6b 	bl	806b9c0 <prvSampleTimeNow>
 806baea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 806baec:	687b      	ldr	r3, [r7, #4]
 806baee:	2b09      	cmp	r3, #9
 806baf0:	f200 8097 	bhi.w	806bc22 <prvProcessReceivedCommands+0x19e>
 806baf4:	a201      	add	r2, pc, #4	; (adr r2, 806bafc <prvProcessReceivedCommands+0x78>)
 806baf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806bafa:	bf00      	nop
 806bafc:	0806bb25 	.word	0x0806bb25
 806bb00:	0806bb25 	.word	0x0806bb25
 806bb04:	0806bb25 	.word	0x0806bb25
 806bb08:	0806bb99 	.word	0x0806bb99
 806bb0c:	0806bbad 	.word	0x0806bbad
 806bb10:	0806bbf7 	.word	0x0806bbf7
 806bb14:	0806bb25 	.word	0x0806bb25
 806bb18:	0806bb25 	.word	0x0806bb25
 806bb1c:	0806bb99 	.word	0x0806bb99
 806bb20:	0806bbad 	.word	0x0806bbad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 806bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bb26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 806bb2a:	f043 0301 	orr.w	r3, r3, #1
 806bb2e:	b2da      	uxtb	r2, r3
 806bb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bb32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 806bb36:	68ba      	ldr	r2, [r7, #8]
 806bb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bb3a:	699b      	ldr	r3, [r3, #24]
 806bb3c:	18d1      	adds	r1, r2, r3
 806bb3e:	68bb      	ldr	r3, [r7, #8]
 806bb40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806bb42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806bb44:	f7ff ff5c 	bl	806ba00 <prvInsertTimerInActiveList>
 806bb48:	4603      	mov	r3, r0
 806bb4a:	2b00      	cmp	r3, #0
 806bb4c:	d069      	beq.n	806bc22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 806bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bb50:	6a1b      	ldr	r3, [r3, #32]
 806bb52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806bb54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 806bb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bb58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 806bb5c:	f003 0304 	and.w	r3, r3, #4
 806bb60:	2b00      	cmp	r3, #0
 806bb62:	d05e      	beq.n	806bc22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 806bb64:	68ba      	ldr	r2, [r7, #8]
 806bb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bb68:	699b      	ldr	r3, [r3, #24]
 806bb6a:	441a      	add	r2, r3
 806bb6c:	2300      	movs	r3, #0
 806bb6e:	9300      	str	r3, [sp, #0]
 806bb70:	2300      	movs	r3, #0
 806bb72:	2100      	movs	r1, #0
 806bb74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806bb76:	f7ff fe05 	bl	806b784 <xTimerGenericCommand>
 806bb7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 806bb7c:	6a3b      	ldr	r3, [r7, #32]
 806bb7e:	2b00      	cmp	r3, #0
 806bb80:	d14f      	bne.n	806bc22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 806bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 806bb86:	f383 8811 	msr	BASEPRI, r3
 806bb8a:	f3bf 8f6f 	isb	sy
 806bb8e:	f3bf 8f4f 	dsb	sy
 806bb92:	61bb      	str	r3, [r7, #24]
}
 806bb94:	bf00      	nop
 806bb96:	e7fe      	b.n	806bb96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 806bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bb9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 806bb9e:	f023 0301 	bic.w	r3, r3, #1
 806bba2:	b2da      	uxtb	r2, r3
 806bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 806bbaa:	e03a      	b.n	806bc22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 806bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bbae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 806bbb2:	f043 0301 	orr.w	r3, r3, #1
 806bbb6:	b2da      	uxtb	r2, r3
 806bbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bbba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 806bbbe:	68ba      	ldr	r2, [r7, #8]
 806bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bbc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 806bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bbc6:	699b      	ldr	r3, [r3, #24]
 806bbc8:	2b00      	cmp	r3, #0
 806bbca:	d10a      	bne.n	806bbe2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 806bbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 806bbd0:	f383 8811 	msr	BASEPRI, r3
 806bbd4:	f3bf 8f6f 	isb	sy
 806bbd8:	f3bf 8f4f 	dsb	sy
 806bbdc:	617b      	str	r3, [r7, #20]
}
 806bbde:	bf00      	nop
 806bbe0:	e7fe      	b.n	806bbe0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 806bbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bbe4:	699a      	ldr	r2, [r3, #24]
 806bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806bbe8:	18d1      	adds	r1, r2, r3
 806bbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806bbec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806bbee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806bbf0:	f7ff ff06 	bl	806ba00 <prvInsertTimerInActiveList>
					break;
 806bbf4:	e015      	b.n	806bc22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 806bbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bbf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 806bbfc:	f003 0302 	and.w	r3, r3, #2
 806bc00:	2b00      	cmp	r3, #0
 806bc02:	d103      	bne.n	806bc0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 806bc04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806bc06:	f000 fbfb 	bl	806c400 <vPortFree>
 806bc0a:	e00a      	b.n	806bc22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 806bc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bc0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 806bc12:	f023 0301 	bic.w	r3, r3, #1
 806bc16:	b2da      	uxtb	r2, r3
 806bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806bc1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 806bc1e:	e000      	b.n	806bc22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 806bc20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 806bc22:	4b08      	ldr	r3, [pc, #32]	; (806bc44 <prvProcessReceivedCommands+0x1c0>)
 806bc24:	681b      	ldr	r3, [r3, #0]
 806bc26:	1d39      	adds	r1, r7, #4
 806bc28:	2200      	movs	r2, #0
 806bc2a:	4618      	mov	r0, r3
 806bc2c:	f7fe f852 	bl	8069cd4 <xQueueReceive>
 806bc30:	4603      	mov	r3, r0
 806bc32:	2b00      	cmp	r3, #0
 806bc34:	f47f af2a 	bne.w	806ba8c <prvProcessReceivedCommands+0x8>
	}
}
 806bc38:	bf00      	nop
 806bc3a:	bf00      	nop
 806bc3c:	3730      	adds	r7, #48	; 0x30
 806bc3e:	46bd      	mov	sp, r7
 806bc40:	bd80      	pop	{r7, pc}
 806bc42:	bf00      	nop
 806bc44:	20000e90 	.word	0x20000e90

0806bc48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 806bc48:	b580      	push	{r7, lr}
 806bc4a:	b088      	sub	sp, #32
 806bc4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 806bc4e:	e048      	b.n	806bce2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 806bc50:	4b2d      	ldr	r3, [pc, #180]	; (806bd08 <prvSwitchTimerLists+0xc0>)
 806bc52:	681b      	ldr	r3, [r3, #0]
 806bc54:	68db      	ldr	r3, [r3, #12]
 806bc56:	681b      	ldr	r3, [r3, #0]
 806bc58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806bc5a:	4b2b      	ldr	r3, [pc, #172]	; (806bd08 <prvSwitchTimerLists+0xc0>)
 806bc5c:	681b      	ldr	r3, [r3, #0]
 806bc5e:	68db      	ldr	r3, [r3, #12]
 806bc60:	68db      	ldr	r3, [r3, #12]
 806bc62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 806bc64:	68fb      	ldr	r3, [r7, #12]
 806bc66:	3304      	adds	r3, #4
 806bc68:	4618      	mov	r0, r3
 806bc6a:	f7fd fb85 	bl	8069378 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 806bc6e:	68fb      	ldr	r3, [r7, #12]
 806bc70:	6a1b      	ldr	r3, [r3, #32]
 806bc72:	68f8      	ldr	r0, [r7, #12]
 806bc74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 806bc76:	68fb      	ldr	r3, [r7, #12]
 806bc78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 806bc7c:	f003 0304 	and.w	r3, r3, #4
 806bc80:	2b00      	cmp	r3, #0
 806bc82:	d02e      	beq.n	806bce2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 806bc84:	68fb      	ldr	r3, [r7, #12]
 806bc86:	699b      	ldr	r3, [r3, #24]
 806bc88:	693a      	ldr	r2, [r7, #16]
 806bc8a:	4413      	add	r3, r2
 806bc8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 806bc8e:	68ba      	ldr	r2, [r7, #8]
 806bc90:	693b      	ldr	r3, [r7, #16]
 806bc92:	429a      	cmp	r2, r3
 806bc94:	d90e      	bls.n	806bcb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 806bc96:	68fb      	ldr	r3, [r7, #12]
 806bc98:	68ba      	ldr	r2, [r7, #8]
 806bc9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 806bc9c:	68fb      	ldr	r3, [r7, #12]
 806bc9e:	68fa      	ldr	r2, [r7, #12]
 806bca0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 806bca2:	4b19      	ldr	r3, [pc, #100]	; (806bd08 <prvSwitchTimerLists+0xc0>)
 806bca4:	681a      	ldr	r2, [r3, #0]
 806bca6:	68fb      	ldr	r3, [r7, #12]
 806bca8:	3304      	adds	r3, #4
 806bcaa:	4619      	mov	r1, r3
 806bcac:	4610      	mov	r0, r2
 806bcae:	f7fd fb2a 	bl	8069306 <vListInsert>
 806bcb2:	e016      	b.n	806bce2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 806bcb4:	2300      	movs	r3, #0
 806bcb6:	9300      	str	r3, [sp, #0]
 806bcb8:	2300      	movs	r3, #0
 806bcba:	693a      	ldr	r2, [r7, #16]
 806bcbc:	2100      	movs	r1, #0
 806bcbe:	68f8      	ldr	r0, [r7, #12]
 806bcc0:	f7ff fd60 	bl	806b784 <xTimerGenericCommand>
 806bcc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 806bcc6:	687b      	ldr	r3, [r7, #4]
 806bcc8:	2b00      	cmp	r3, #0
 806bcca:	d10a      	bne.n	806bce2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 806bccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 806bcd0:	f383 8811 	msr	BASEPRI, r3
 806bcd4:	f3bf 8f6f 	isb	sy
 806bcd8:	f3bf 8f4f 	dsb	sy
 806bcdc:	603b      	str	r3, [r7, #0]
}
 806bcde:	bf00      	nop
 806bce0:	e7fe      	b.n	806bce0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 806bce2:	4b09      	ldr	r3, [pc, #36]	; (806bd08 <prvSwitchTimerLists+0xc0>)
 806bce4:	681b      	ldr	r3, [r3, #0]
 806bce6:	681b      	ldr	r3, [r3, #0]
 806bce8:	2b00      	cmp	r3, #0
 806bcea:	d1b1      	bne.n	806bc50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 806bcec:	4b06      	ldr	r3, [pc, #24]	; (806bd08 <prvSwitchTimerLists+0xc0>)
 806bcee:	681b      	ldr	r3, [r3, #0]
 806bcf0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 806bcf2:	4b06      	ldr	r3, [pc, #24]	; (806bd0c <prvSwitchTimerLists+0xc4>)
 806bcf4:	681b      	ldr	r3, [r3, #0]
 806bcf6:	4a04      	ldr	r2, [pc, #16]	; (806bd08 <prvSwitchTimerLists+0xc0>)
 806bcf8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 806bcfa:	4a04      	ldr	r2, [pc, #16]	; (806bd0c <prvSwitchTimerLists+0xc4>)
 806bcfc:	697b      	ldr	r3, [r7, #20]
 806bcfe:	6013      	str	r3, [r2, #0]
}
 806bd00:	bf00      	nop
 806bd02:	3718      	adds	r7, #24
 806bd04:	46bd      	mov	sp, r7
 806bd06:	bd80      	pop	{r7, pc}
 806bd08:	20000e88 	.word	0x20000e88
 806bd0c:	20000e8c 	.word	0x20000e8c

0806bd10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 806bd10:	b580      	push	{r7, lr}
 806bd12:	b082      	sub	sp, #8
 806bd14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 806bd16:	f000 f985 	bl	806c024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 806bd1a:	4b15      	ldr	r3, [pc, #84]	; (806bd70 <prvCheckForValidListAndQueue+0x60>)
 806bd1c:	681b      	ldr	r3, [r3, #0]
 806bd1e:	2b00      	cmp	r3, #0
 806bd20:	d120      	bne.n	806bd64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 806bd22:	4814      	ldr	r0, [pc, #80]	; (806bd74 <prvCheckForValidListAndQueue+0x64>)
 806bd24:	f7fd fa9e 	bl	8069264 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 806bd28:	4813      	ldr	r0, [pc, #76]	; (806bd78 <prvCheckForValidListAndQueue+0x68>)
 806bd2a:	f7fd fa9b 	bl	8069264 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 806bd2e:	4b13      	ldr	r3, [pc, #76]	; (806bd7c <prvCheckForValidListAndQueue+0x6c>)
 806bd30:	4a10      	ldr	r2, [pc, #64]	; (806bd74 <prvCheckForValidListAndQueue+0x64>)
 806bd32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 806bd34:	4b12      	ldr	r3, [pc, #72]	; (806bd80 <prvCheckForValidListAndQueue+0x70>)
 806bd36:	4a10      	ldr	r2, [pc, #64]	; (806bd78 <prvCheckForValidListAndQueue+0x68>)
 806bd38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 806bd3a:	2300      	movs	r3, #0
 806bd3c:	9300      	str	r3, [sp, #0]
 806bd3e:	4b11      	ldr	r3, [pc, #68]	; (806bd84 <prvCheckForValidListAndQueue+0x74>)
 806bd40:	4a11      	ldr	r2, [pc, #68]	; (806bd88 <prvCheckForValidListAndQueue+0x78>)
 806bd42:	2110      	movs	r1, #16
 806bd44:	200a      	movs	r0, #10
 806bd46:	f7fd fba9 	bl	806949c <xQueueGenericCreateStatic>
 806bd4a:	4603      	mov	r3, r0
 806bd4c:	4a08      	ldr	r2, [pc, #32]	; (806bd70 <prvCheckForValidListAndQueue+0x60>)
 806bd4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 806bd50:	4b07      	ldr	r3, [pc, #28]	; (806bd70 <prvCheckForValidListAndQueue+0x60>)
 806bd52:	681b      	ldr	r3, [r3, #0]
 806bd54:	2b00      	cmp	r3, #0
 806bd56:	d005      	beq.n	806bd64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 806bd58:	4b05      	ldr	r3, [pc, #20]	; (806bd70 <prvCheckForValidListAndQueue+0x60>)
 806bd5a:	681b      	ldr	r3, [r3, #0]
 806bd5c:	490b      	ldr	r1, [pc, #44]	; (806bd8c <prvCheckForValidListAndQueue+0x7c>)
 806bd5e:	4618      	mov	r0, r3
 806bd60:	f7fe fb70 	bl	806a444 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 806bd64:	f000 f98e 	bl	806c084 <vPortExitCritical>
}
 806bd68:	bf00      	nop
 806bd6a:	46bd      	mov	sp, r7
 806bd6c:	bd80      	pop	{r7, pc}
 806bd6e:	bf00      	nop
 806bd70:	20000e90 	.word	0x20000e90
 806bd74:	20000e60 	.word	0x20000e60
 806bd78:	20000e74 	.word	0x20000e74
 806bd7c:	20000e88 	.word	0x20000e88
 806bd80:	20000e8c 	.word	0x20000e8c
 806bd84:	20000f3c 	.word	0x20000f3c
 806bd88:	20000e9c 	.word	0x20000e9c
 806bd8c:	0806d4b4 	.word	0x0806d4b4

0806bd90 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 806bd90:	b580      	push	{r7, lr}
 806bd92:	b086      	sub	sp, #24
 806bd94:	af00      	add	r7, sp, #0
 806bd96:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 806bd98:	687b      	ldr	r3, [r7, #4]
 806bd9a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 806bd9c:	687b      	ldr	r3, [r7, #4]
 806bd9e:	2b00      	cmp	r3, #0
 806bda0:	d10a      	bne.n	806bdb8 <pvTimerGetTimerID+0x28>
	__asm volatile
 806bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 806bda6:	f383 8811 	msr	BASEPRI, r3
 806bdaa:	f3bf 8f6f 	isb	sy
 806bdae:	f3bf 8f4f 	dsb	sy
 806bdb2:	60fb      	str	r3, [r7, #12]
}
 806bdb4:	bf00      	nop
 806bdb6:	e7fe      	b.n	806bdb6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 806bdb8:	f000 f934 	bl	806c024 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 806bdbc:	697b      	ldr	r3, [r7, #20]
 806bdbe:	69db      	ldr	r3, [r3, #28]
 806bdc0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 806bdc2:	f000 f95f 	bl	806c084 <vPortExitCritical>

	return pvReturn;
 806bdc6:	693b      	ldr	r3, [r7, #16]
}
 806bdc8:	4618      	mov	r0, r3
 806bdca:	3718      	adds	r7, #24
 806bdcc:	46bd      	mov	sp, r7
 806bdce:	bd80      	pop	{r7, pc}

0806bdd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 806bdd0:	b480      	push	{r7}
 806bdd2:	b085      	sub	sp, #20
 806bdd4:	af00      	add	r7, sp, #0
 806bdd6:	60f8      	str	r0, [r7, #12]
 806bdd8:	60b9      	str	r1, [r7, #8]
 806bdda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 806bddc:	68fb      	ldr	r3, [r7, #12]
 806bdde:	3b04      	subs	r3, #4
 806bde0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 806bde2:	68fb      	ldr	r3, [r7, #12]
 806bde4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 806bde8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 806bdea:	68fb      	ldr	r3, [r7, #12]
 806bdec:	3b04      	subs	r3, #4
 806bdee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 806bdf0:	68bb      	ldr	r3, [r7, #8]
 806bdf2:	f023 0201 	bic.w	r2, r3, #1
 806bdf6:	68fb      	ldr	r3, [r7, #12]
 806bdf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 806bdfa:	68fb      	ldr	r3, [r7, #12]
 806bdfc:	3b04      	subs	r3, #4
 806bdfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 806be00:	4a0c      	ldr	r2, [pc, #48]	; (806be34 <pxPortInitialiseStack+0x64>)
 806be02:	68fb      	ldr	r3, [r7, #12]
 806be04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 806be06:	68fb      	ldr	r3, [r7, #12]
 806be08:	3b14      	subs	r3, #20
 806be0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 806be0c:	687a      	ldr	r2, [r7, #4]
 806be0e:	68fb      	ldr	r3, [r7, #12]
 806be10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 806be12:	68fb      	ldr	r3, [r7, #12]
 806be14:	3b04      	subs	r3, #4
 806be16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 806be18:	68fb      	ldr	r3, [r7, #12]
 806be1a:	f06f 0202 	mvn.w	r2, #2
 806be1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 806be20:	68fb      	ldr	r3, [r7, #12]
 806be22:	3b20      	subs	r3, #32
 806be24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 806be26:	68fb      	ldr	r3, [r7, #12]
}
 806be28:	4618      	mov	r0, r3
 806be2a:	3714      	adds	r7, #20
 806be2c:	46bd      	mov	sp, r7
 806be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806be32:	4770      	bx	lr
 806be34:	0806be39 	.word	0x0806be39

0806be38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 806be38:	b480      	push	{r7}
 806be3a:	b085      	sub	sp, #20
 806be3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 806be3e:	2300      	movs	r3, #0
 806be40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 806be42:	4b12      	ldr	r3, [pc, #72]	; (806be8c <prvTaskExitError+0x54>)
 806be44:	681b      	ldr	r3, [r3, #0]
 806be46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806be4a:	d00a      	beq.n	806be62 <prvTaskExitError+0x2a>
	__asm volatile
 806be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806be50:	f383 8811 	msr	BASEPRI, r3
 806be54:	f3bf 8f6f 	isb	sy
 806be58:	f3bf 8f4f 	dsb	sy
 806be5c:	60fb      	str	r3, [r7, #12]
}
 806be5e:	bf00      	nop
 806be60:	e7fe      	b.n	806be60 <prvTaskExitError+0x28>
	__asm volatile
 806be62:	f04f 0350 	mov.w	r3, #80	; 0x50
 806be66:	f383 8811 	msr	BASEPRI, r3
 806be6a:	f3bf 8f6f 	isb	sy
 806be6e:	f3bf 8f4f 	dsb	sy
 806be72:	60bb      	str	r3, [r7, #8]
}
 806be74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 806be76:	bf00      	nop
 806be78:	687b      	ldr	r3, [r7, #4]
 806be7a:	2b00      	cmp	r3, #0
 806be7c:	d0fc      	beq.n	806be78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 806be7e:	bf00      	nop
 806be80:	bf00      	nop
 806be82:	3714      	adds	r7, #20
 806be84:	46bd      	mov	sp, r7
 806be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 806be8a:	4770      	bx	lr
 806be8c:	20000024 	.word	0x20000024

0806be90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 806be90:	4b07      	ldr	r3, [pc, #28]	; (806beb0 <pxCurrentTCBConst2>)
 806be92:	6819      	ldr	r1, [r3, #0]
 806be94:	6808      	ldr	r0, [r1, #0]
 806be96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 806be9a:	f380 8809 	msr	PSP, r0
 806be9e:	f3bf 8f6f 	isb	sy
 806bea2:	f04f 0000 	mov.w	r0, #0
 806bea6:	f380 8811 	msr	BASEPRI, r0
 806beaa:	4770      	bx	lr
 806beac:	f3af 8000 	nop.w

0806beb0 <pxCurrentTCBConst2>:
 806beb0:	20000960 	.word	0x20000960
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 806beb4:	bf00      	nop
 806beb6:	bf00      	nop

0806beb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 806beb8:	4808      	ldr	r0, [pc, #32]	; (806bedc <prvPortStartFirstTask+0x24>)
 806beba:	6800      	ldr	r0, [r0, #0]
 806bebc:	6800      	ldr	r0, [r0, #0]
 806bebe:	f380 8808 	msr	MSP, r0
 806bec2:	f04f 0000 	mov.w	r0, #0
 806bec6:	f380 8814 	msr	CONTROL, r0
 806beca:	b662      	cpsie	i
 806becc:	b661      	cpsie	f
 806bece:	f3bf 8f4f 	dsb	sy
 806bed2:	f3bf 8f6f 	isb	sy
 806bed6:	df00      	svc	0
 806bed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 806beda:	bf00      	nop
 806bedc:	e000ed08 	.word	0xe000ed08

0806bee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 806bee0:	b580      	push	{r7, lr}
 806bee2:	b086      	sub	sp, #24
 806bee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 806bee6:	4b46      	ldr	r3, [pc, #280]	; (806c000 <xPortStartScheduler+0x120>)
 806bee8:	681b      	ldr	r3, [r3, #0]
 806beea:	4a46      	ldr	r2, [pc, #280]	; (806c004 <xPortStartScheduler+0x124>)
 806beec:	4293      	cmp	r3, r2
 806beee:	d10a      	bne.n	806bf06 <xPortStartScheduler+0x26>
	__asm volatile
 806bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 806bef4:	f383 8811 	msr	BASEPRI, r3
 806bef8:	f3bf 8f6f 	isb	sy
 806befc:	f3bf 8f4f 	dsb	sy
 806bf00:	613b      	str	r3, [r7, #16]
}
 806bf02:	bf00      	nop
 806bf04:	e7fe      	b.n	806bf04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 806bf06:	4b3e      	ldr	r3, [pc, #248]	; (806c000 <xPortStartScheduler+0x120>)
 806bf08:	681b      	ldr	r3, [r3, #0]
 806bf0a:	4a3f      	ldr	r2, [pc, #252]	; (806c008 <xPortStartScheduler+0x128>)
 806bf0c:	4293      	cmp	r3, r2
 806bf0e:	d10a      	bne.n	806bf26 <xPortStartScheduler+0x46>
	__asm volatile
 806bf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 806bf14:	f383 8811 	msr	BASEPRI, r3
 806bf18:	f3bf 8f6f 	isb	sy
 806bf1c:	f3bf 8f4f 	dsb	sy
 806bf20:	60fb      	str	r3, [r7, #12]
}
 806bf22:	bf00      	nop
 806bf24:	e7fe      	b.n	806bf24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 806bf26:	4b39      	ldr	r3, [pc, #228]	; (806c00c <xPortStartScheduler+0x12c>)
 806bf28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 806bf2a:	697b      	ldr	r3, [r7, #20]
 806bf2c:	781b      	ldrb	r3, [r3, #0]
 806bf2e:	b2db      	uxtb	r3, r3
 806bf30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 806bf32:	697b      	ldr	r3, [r7, #20]
 806bf34:	22ff      	movs	r2, #255	; 0xff
 806bf36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 806bf38:	697b      	ldr	r3, [r7, #20]
 806bf3a:	781b      	ldrb	r3, [r3, #0]
 806bf3c:	b2db      	uxtb	r3, r3
 806bf3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 806bf40:	78fb      	ldrb	r3, [r7, #3]
 806bf42:	b2db      	uxtb	r3, r3
 806bf44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 806bf48:	b2da      	uxtb	r2, r3
 806bf4a:	4b31      	ldr	r3, [pc, #196]	; (806c010 <xPortStartScheduler+0x130>)
 806bf4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 806bf4e:	4b31      	ldr	r3, [pc, #196]	; (806c014 <xPortStartScheduler+0x134>)
 806bf50:	2207      	movs	r2, #7
 806bf52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 806bf54:	e009      	b.n	806bf6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 806bf56:	4b2f      	ldr	r3, [pc, #188]	; (806c014 <xPortStartScheduler+0x134>)
 806bf58:	681b      	ldr	r3, [r3, #0]
 806bf5a:	3b01      	subs	r3, #1
 806bf5c:	4a2d      	ldr	r2, [pc, #180]	; (806c014 <xPortStartScheduler+0x134>)
 806bf5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 806bf60:	78fb      	ldrb	r3, [r7, #3]
 806bf62:	b2db      	uxtb	r3, r3
 806bf64:	005b      	lsls	r3, r3, #1
 806bf66:	b2db      	uxtb	r3, r3
 806bf68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 806bf6a:	78fb      	ldrb	r3, [r7, #3]
 806bf6c:	b2db      	uxtb	r3, r3
 806bf6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 806bf72:	2b80      	cmp	r3, #128	; 0x80
 806bf74:	d0ef      	beq.n	806bf56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 806bf76:	4b27      	ldr	r3, [pc, #156]	; (806c014 <xPortStartScheduler+0x134>)
 806bf78:	681b      	ldr	r3, [r3, #0]
 806bf7a:	f1c3 0307 	rsb	r3, r3, #7
 806bf7e:	2b04      	cmp	r3, #4
 806bf80:	d00a      	beq.n	806bf98 <xPortStartScheduler+0xb8>
	__asm volatile
 806bf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 806bf86:	f383 8811 	msr	BASEPRI, r3
 806bf8a:	f3bf 8f6f 	isb	sy
 806bf8e:	f3bf 8f4f 	dsb	sy
 806bf92:	60bb      	str	r3, [r7, #8]
}
 806bf94:	bf00      	nop
 806bf96:	e7fe      	b.n	806bf96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 806bf98:	4b1e      	ldr	r3, [pc, #120]	; (806c014 <xPortStartScheduler+0x134>)
 806bf9a:	681b      	ldr	r3, [r3, #0]
 806bf9c:	021b      	lsls	r3, r3, #8
 806bf9e:	4a1d      	ldr	r2, [pc, #116]	; (806c014 <xPortStartScheduler+0x134>)
 806bfa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 806bfa2:	4b1c      	ldr	r3, [pc, #112]	; (806c014 <xPortStartScheduler+0x134>)
 806bfa4:	681b      	ldr	r3, [r3, #0]
 806bfa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 806bfaa:	4a1a      	ldr	r2, [pc, #104]	; (806c014 <xPortStartScheduler+0x134>)
 806bfac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 806bfae:	687b      	ldr	r3, [r7, #4]
 806bfb0:	b2da      	uxtb	r2, r3
 806bfb2:	697b      	ldr	r3, [r7, #20]
 806bfb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 806bfb6:	4b18      	ldr	r3, [pc, #96]	; (806c018 <xPortStartScheduler+0x138>)
 806bfb8:	681b      	ldr	r3, [r3, #0]
 806bfba:	4a17      	ldr	r2, [pc, #92]	; (806c018 <xPortStartScheduler+0x138>)
 806bfbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 806bfc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 806bfc2:	4b15      	ldr	r3, [pc, #84]	; (806c018 <xPortStartScheduler+0x138>)
 806bfc4:	681b      	ldr	r3, [r3, #0]
 806bfc6:	4a14      	ldr	r2, [pc, #80]	; (806c018 <xPortStartScheduler+0x138>)
 806bfc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 806bfcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 806bfce:	f000 f8dd 	bl	806c18c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 806bfd2:	4b12      	ldr	r3, [pc, #72]	; (806c01c <xPortStartScheduler+0x13c>)
 806bfd4:	2200      	movs	r2, #0
 806bfd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 806bfd8:	f000 f8fc 	bl	806c1d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 806bfdc:	4b10      	ldr	r3, [pc, #64]	; (806c020 <xPortStartScheduler+0x140>)
 806bfde:	681b      	ldr	r3, [r3, #0]
 806bfe0:	4a0f      	ldr	r2, [pc, #60]	; (806c020 <xPortStartScheduler+0x140>)
 806bfe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 806bfe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 806bfe8:	f7ff ff66 	bl	806beb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 806bfec:	f7fe fe84 	bl	806acf8 <vTaskSwitchContext>
	prvTaskExitError();
 806bff0:	f7ff ff22 	bl	806be38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 806bff4:	2300      	movs	r3, #0
}
 806bff6:	4618      	mov	r0, r3
 806bff8:	3718      	adds	r7, #24
 806bffa:	46bd      	mov	sp, r7
 806bffc:	bd80      	pop	{r7, pc}
 806bffe:	bf00      	nop
 806c000:	e000ed00 	.word	0xe000ed00
 806c004:	410fc271 	.word	0x410fc271
 806c008:	410fc270 	.word	0x410fc270
 806c00c:	e000e400 	.word	0xe000e400
 806c010:	20000f8c 	.word	0x20000f8c
 806c014:	20000f90 	.word	0x20000f90
 806c018:	e000ed20 	.word	0xe000ed20
 806c01c:	20000024 	.word	0x20000024
 806c020:	e000ef34 	.word	0xe000ef34

0806c024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 806c024:	b480      	push	{r7}
 806c026:	b083      	sub	sp, #12
 806c028:	af00      	add	r7, sp, #0
	__asm volatile
 806c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c02e:	f383 8811 	msr	BASEPRI, r3
 806c032:	f3bf 8f6f 	isb	sy
 806c036:	f3bf 8f4f 	dsb	sy
 806c03a:	607b      	str	r3, [r7, #4]
}
 806c03c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 806c03e:	4b0f      	ldr	r3, [pc, #60]	; (806c07c <vPortEnterCritical+0x58>)
 806c040:	681b      	ldr	r3, [r3, #0]
 806c042:	3301      	adds	r3, #1
 806c044:	4a0d      	ldr	r2, [pc, #52]	; (806c07c <vPortEnterCritical+0x58>)
 806c046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 806c048:	4b0c      	ldr	r3, [pc, #48]	; (806c07c <vPortEnterCritical+0x58>)
 806c04a:	681b      	ldr	r3, [r3, #0]
 806c04c:	2b01      	cmp	r3, #1
 806c04e:	d10f      	bne.n	806c070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 806c050:	4b0b      	ldr	r3, [pc, #44]	; (806c080 <vPortEnterCritical+0x5c>)
 806c052:	681b      	ldr	r3, [r3, #0]
 806c054:	b2db      	uxtb	r3, r3
 806c056:	2b00      	cmp	r3, #0
 806c058:	d00a      	beq.n	806c070 <vPortEnterCritical+0x4c>
	__asm volatile
 806c05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c05e:	f383 8811 	msr	BASEPRI, r3
 806c062:	f3bf 8f6f 	isb	sy
 806c066:	f3bf 8f4f 	dsb	sy
 806c06a:	603b      	str	r3, [r7, #0]
}
 806c06c:	bf00      	nop
 806c06e:	e7fe      	b.n	806c06e <vPortEnterCritical+0x4a>
	}
}
 806c070:	bf00      	nop
 806c072:	370c      	adds	r7, #12
 806c074:	46bd      	mov	sp, r7
 806c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c07a:	4770      	bx	lr
 806c07c:	20000024 	.word	0x20000024
 806c080:	e000ed04 	.word	0xe000ed04

0806c084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 806c084:	b480      	push	{r7}
 806c086:	b083      	sub	sp, #12
 806c088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 806c08a:	4b12      	ldr	r3, [pc, #72]	; (806c0d4 <vPortExitCritical+0x50>)
 806c08c:	681b      	ldr	r3, [r3, #0]
 806c08e:	2b00      	cmp	r3, #0
 806c090:	d10a      	bne.n	806c0a8 <vPortExitCritical+0x24>
	__asm volatile
 806c092:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c096:	f383 8811 	msr	BASEPRI, r3
 806c09a:	f3bf 8f6f 	isb	sy
 806c09e:	f3bf 8f4f 	dsb	sy
 806c0a2:	607b      	str	r3, [r7, #4]
}
 806c0a4:	bf00      	nop
 806c0a6:	e7fe      	b.n	806c0a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 806c0a8:	4b0a      	ldr	r3, [pc, #40]	; (806c0d4 <vPortExitCritical+0x50>)
 806c0aa:	681b      	ldr	r3, [r3, #0]
 806c0ac:	3b01      	subs	r3, #1
 806c0ae:	4a09      	ldr	r2, [pc, #36]	; (806c0d4 <vPortExitCritical+0x50>)
 806c0b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 806c0b2:	4b08      	ldr	r3, [pc, #32]	; (806c0d4 <vPortExitCritical+0x50>)
 806c0b4:	681b      	ldr	r3, [r3, #0]
 806c0b6:	2b00      	cmp	r3, #0
 806c0b8:	d105      	bne.n	806c0c6 <vPortExitCritical+0x42>
 806c0ba:	2300      	movs	r3, #0
 806c0bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 806c0be:	683b      	ldr	r3, [r7, #0]
 806c0c0:	f383 8811 	msr	BASEPRI, r3
}
 806c0c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 806c0c6:	bf00      	nop
 806c0c8:	370c      	adds	r7, #12
 806c0ca:	46bd      	mov	sp, r7
 806c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c0d0:	4770      	bx	lr
 806c0d2:	bf00      	nop
 806c0d4:	20000024 	.word	0x20000024
	...

0806c0e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 806c0e0:	f3ef 8009 	mrs	r0, PSP
 806c0e4:	f3bf 8f6f 	isb	sy
 806c0e8:	4b15      	ldr	r3, [pc, #84]	; (806c140 <pxCurrentTCBConst>)
 806c0ea:	681a      	ldr	r2, [r3, #0]
 806c0ec:	f01e 0f10 	tst.w	lr, #16
 806c0f0:	bf08      	it	eq
 806c0f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 806c0f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 806c0fa:	6010      	str	r0, [r2, #0]
 806c0fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 806c100:	f04f 0050 	mov.w	r0, #80	; 0x50
 806c104:	f380 8811 	msr	BASEPRI, r0
 806c108:	f3bf 8f4f 	dsb	sy
 806c10c:	f3bf 8f6f 	isb	sy
 806c110:	f7fe fdf2 	bl	806acf8 <vTaskSwitchContext>
 806c114:	f04f 0000 	mov.w	r0, #0
 806c118:	f380 8811 	msr	BASEPRI, r0
 806c11c:	bc09      	pop	{r0, r3}
 806c11e:	6819      	ldr	r1, [r3, #0]
 806c120:	6808      	ldr	r0, [r1, #0]
 806c122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 806c126:	f01e 0f10 	tst.w	lr, #16
 806c12a:	bf08      	it	eq
 806c12c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 806c130:	f380 8809 	msr	PSP, r0
 806c134:	f3bf 8f6f 	isb	sy
 806c138:	4770      	bx	lr
 806c13a:	bf00      	nop
 806c13c:	f3af 8000 	nop.w

0806c140 <pxCurrentTCBConst>:
 806c140:	20000960 	.word	0x20000960
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 806c144:	bf00      	nop
 806c146:	bf00      	nop

0806c148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 806c148:	b580      	push	{r7, lr}
 806c14a:	b082      	sub	sp, #8
 806c14c:	af00      	add	r7, sp, #0
	__asm volatile
 806c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c152:	f383 8811 	msr	BASEPRI, r3
 806c156:	f3bf 8f6f 	isb	sy
 806c15a:	f3bf 8f4f 	dsb	sy
 806c15e:	607b      	str	r3, [r7, #4]
}
 806c160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 806c162:	f7fe fd0f 	bl	806ab84 <xTaskIncrementTick>
 806c166:	4603      	mov	r3, r0
 806c168:	2b00      	cmp	r3, #0
 806c16a:	d003      	beq.n	806c174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 806c16c:	4b06      	ldr	r3, [pc, #24]	; (806c188 <xPortSysTickHandler+0x40>)
 806c16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806c172:	601a      	str	r2, [r3, #0]
 806c174:	2300      	movs	r3, #0
 806c176:	603b      	str	r3, [r7, #0]
	__asm volatile
 806c178:	683b      	ldr	r3, [r7, #0]
 806c17a:	f383 8811 	msr	BASEPRI, r3
}
 806c17e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 806c180:	bf00      	nop
 806c182:	3708      	adds	r7, #8
 806c184:	46bd      	mov	sp, r7
 806c186:	bd80      	pop	{r7, pc}
 806c188:	e000ed04 	.word	0xe000ed04

0806c18c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 806c18c:	b480      	push	{r7}
 806c18e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 806c190:	4b0b      	ldr	r3, [pc, #44]	; (806c1c0 <vPortSetupTimerInterrupt+0x34>)
 806c192:	2200      	movs	r2, #0
 806c194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 806c196:	4b0b      	ldr	r3, [pc, #44]	; (806c1c4 <vPortSetupTimerInterrupt+0x38>)
 806c198:	2200      	movs	r2, #0
 806c19a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 806c19c:	4b0a      	ldr	r3, [pc, #40]	; (806c1c8 <vPortSetupTimerInterrupt+0x3c>)
 806c19e:	681b      	ldr	r3, [r3, #0]
 806c1a0:	4a0a      	ldr	r2, [pc, #40]	; (806c1cc <vPortSetupTimerInterrupt+0x40>)
 806c1a2:	fba2 2303 	umull	r2, r3, r2, r3
 806c1a6:	099b      	lsrs	r3, r3, #6
 806c1a8:	4a09      	ldr	r2, [pc, #36]	; (806c1d0 <vPortSetupTimerInterrupt+0x44>)
 806c1aa:	3b01      	subs	r3, #1
 806c1ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 806c1ae:	4b04      	ldr	r3, [pc, #16]	; (806c1c0 <vPortSetupTimerInterrupt+0x34>)
 806c1b0:	2207      	movs	r2, #7
 806c1b2:	601a      	str	r2, [r3, #0]
}
 806c1b4:	bf00      	nop
 806c1b6:	46bd      	mov	sp, r7
 806c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c1bc:	4770      	bx	lr
 806c1be:	bf00      	nop
 806c1c0:	e000e010 	.word	0xe000e010
 806c1c4:	e000e018 	.word	0xe000e018
 806c1c8:	20000000 	.word	0x20000000
 806c1cc:	10624dd3 	.word	0x10624dd3
 806c1d0:	e000e014 	.word	0xe000e014

0806c1d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 806c1d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 806c1e4 <vPortEnableVFP+0x10>
 806c1d8:	6801      	ldr	r1, [r0, #0]
 806c1da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 806c1de:	6001      	str	r1, [r0, #0]
 806c1e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 806c1e2:	bf00      	nop
 806c1e4:	e000ed88 	.word	0xe000ed88

0806c1e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 806c1e8:	b480      	push	{r7}
 806c1ea:	b085      	sub	sp, #20
 806c1ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 806c1ee:	f3ef 8305 	mrs	r3, IPSR
 806c1f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 806c1f4:	68fb      	ldr	r3, [r7, #12]
 806c1f6:	2b0f      	cmp	r3, #15
 806c1f8:	d914      	bls.n	806c224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 806c1fa:	4a17      	ldr	r2, [pc, #92]	; (806c258 <vPortValidateInterruptPriority+0x70>)
 806c1fc:	68fb      	ldr	r3, [r7, #12]
 806c1fe:	4413      	add	r3, r2
 806c200:	781b      	ldrb	r3, [r3, #0]
 806c202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 806c204:	4b15      	ldr	r3, [pc, #84]	; (806c25c <vPortValidateInterruptPriority+0x74>)
 806c206:	781b      	ldrb	r3, [r3, #0]
 806c208:	7afa      	ldrb	r2, [r7, #11]
 806c20a:	429a      	cmp	r2, r3
 806c20c:	d20a      	bcs.n	806c224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 806c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c212:	f383 8811 	msr	BASEPRI, r3
 806c216:	f3bf 8f6f 	isb	sy
 806c21a:	f3bf 8f4f 	dsb	sy
 806c21e:	607b      	str	r3, [r7, #4]
}
 806c220:	bf00      	nop
 806c222:	e7fe      	b.n	806c222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 806c224:	4b0e      	ldr	r3, [pc, #56]	; (806c260 <vPortValidateInterruptPriority+0x78>)
 806c226:	681b      	ldr	r3, [r3, #0]
 806c228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 806c22c:	4b0d      	ldr	r3, [pc, #52]	; (806c264 <vPortValidateInterruptPriority+0x7c>)
 806c22e:	681b      	ldr	r3, [r3, #0]
 806c230:	429a      	cmp	r2, r3
 806c232:	d90a      	bls.n	806c24a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 806c234:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c238:	f383 8811 	msr	BASEPRI, r3
 806c23c:	f3bf 8f6f 	isb	sy
 806c240:	f3bf 8f4f 	dsb	sy
 806c244:	603b      	str	r3, [r7, #0]
}
 806c246:	bf00      	nop
 806c248:	e7fe      	b.n	806c248 <vPortValidateInterruptPriority+0x60>
	}
 806c24a:	bf00      	nop
 806c24c:	3714      	adds	r7, #20
 806c24e:	46bd      	mov	sp, r7
 806c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c254:	4770      	bx	lr
 806c256:	bf00      	nop
 806c258:	e000e3f0 	.word	0xe000e3f0
 806c25c:	20000f8c 	.word	0x20000f8c
 806c260:	e000ed0c 	.word	0xe000ed0c
 806c264:	20000f90 	.word	0x20000f90

0806c268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 806c268:	b580      	push	{r7, lr}
 806c26a:	b08a      	sub	sp, #40	; 0x28
 806c26c:	af00      	add	r7, sp, #0
 806c26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 806c270:	2300      	movs	r3, #0
 806c272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 806c274:	f7fe fbca 	bl	806aa0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 806c278:	4b5b      	ldr	r3, [pc, #364]	; (806c3e8 <pvPortMalloc+0x180>)
 806c27a:	681b      	ldr	r3, [r3, #0]
 806c27c:	2b00      	cmp	r3, #0
 806c27e:	d101      	bne.n	806c284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 806c280:	f000 f920 	bl	806c4c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 806c284:	4b59      	ldr	r3, [pc, #356]	; (806c3ec <pvPortMalloc+0x184>)
 806c286:	681a      	ldr	r2, [r3, #0]
 806c288:	687b      	ldr	r3, [r7, #4]
 806c28a:	4013      	ands	r3, r2
 806c28c:	2b00      	cmp	r3, #0
 806c28e:	f040 8093 	bne.w	806c3b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 806c292:	687b      	ldr	r3, [r7, #4]
 806c294:	2b00      	cmp	r3, #0
 806c296:	d01d      	beq.n	806c2d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 806c298:	2208      	movs	r2, #8
 806c29a:	687b      	ldr	r3, [r7, #4]
 806c29c:	4413      	add	r3, r2
 806c29e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 806c2a0:	687b      	ldr	r3, [r7, #4]
 806c2a2:	f003 0307 	and.w	r3, r3, #7
 806c2a6:	2b00      	cmp	r3, #0
 806c2a8:	d014      	beq.n	806c2d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 806c2aa:	687b      	ldr	r3, [r7, #4]
 806c2ac:	f023 0307 	bic.w	r3, r3, #7
 806c2b0:	3308      	adds	r3, #8
 806c2b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 806c2b4:	687b      	ldr	r3, [r7, #4]
 806c2b6:	f003 0307 	and.w	r3, r3, #7
 806c2ba:	2b00      	cmp	r3, #0
 806c2bc:	d00a      	beq.n	806c2d4 <pvPortMalloc+0x6c>
	__asm volatile
 806c2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c2c2:	f383 8811 	msr	BASEPRI, r3
 806c2c6:	f3bf 8f6f 	isb	sy
 806c2ca:	f3bf 8f4f 	dsb	sy
 806c2ce:	617b      	str	r3, [r7, #20]
}
 806c2d0:	bf00      	nop
 806c2d2:	e7fe      	b.n	806c2d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 806c2d4:	687b      	ldr	r3, [r7, #4]
 806c2d6:	2b00      	cmp	r3, #0
 806c2d8:	d06e      	beq.n	806c3b8 <pvPortMalloc+0x150>
 806c2da:	4b45      	ldr	r3, [pc, #276]	; (806c3f0 <pvPortMalloc+0x188>)
 806c2dc:	681b      	ldr	r3, [r3, #0]
 806c2de:	687a      	ldr	r2, [r7, #4]
 806c2e0:	429a      	cmp	r2, r3
 806c2e2:	d869      	bhi.n	806c3b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 806c2e4:	4b43      	ldr	r3, [pc, #268]	; (806c3f4 <pvPortMalloc+0x18c>)
 806c2e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 806c2e8:	4b42      	ldr	r3, [pc, #264]	; (806c3f4 <pvPortMalloc+0x18c>)
 806c2ea:	681b      	ldr	r3, [r3, #0]
 806c2ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 806c2ee:	e004      	b.n	806c2fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 806c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c2f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 806c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c2f6:	681b      	ldr	r3, [r3, #0]
 806c2f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 806c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c2fc:	685b      	ldr	r3, [r3, #4]
 806c2fe:	687a      	ldr	r2, [r7, #4]
 806c300:	429a      	cmp	r2, r3
 806c302:	d903      	bls.n	806c30c <pvPortMalloc+0xa4>
 806c304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c306:	681b      	ldr	r3, [r3, #0]
 806c308:	2b00      	cmp	r3, #0
 806c30a:	d1f1      	bne.n	806c2f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 806c30c:	4b36      	ldr	r3, [pc, #216]	; (806c3e8 <pvPortMalloc+0x180>)
 806c30e:	681b      	ldr	r3, [r3, #0]
 806c310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806c312:	429a      	cmp	r2, r3
 806c314:	d050      	beq.n	806c3b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 806c316:	6a3b      	ldr	r3, [r7, #32]
 806c318:	681b      	ldr	r3, [r3, #0]
 806c31a:	2208      	movs	r2, #8
 806c31c:	4413      	add	r3, r2
 806c31e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 806c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c322:	681a      	ldr	r2, [r3, #0]
 806c324:	6a3b      	ldr	r3, [r7, #32]
 806c326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 806c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c32a:	685a      	ldr	r2, [r3, #4]
 806c32c:	687b      	ldr	r3, [r7, #4]
 806c32e:	1ad2      	subs	r2, r2, r3
 806c330:	2308      	movs	r3, #8
 806c332:	005b      	lsls	r3, r3, #1
 806c334:	429a      	cmp	r2, r3
 806c336:	d91f      	bls.n	806c378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 806c338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806c33a:	687b      	ldr	r3, [r7, #4]
 806c33c:	4413      	add	r3, r2
 806c33e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 806c340:	69bb      	ldr	r3, [r7, #24]
 806c342:	f003 0307 	and.w	r3, r3, #7
 806c346:	2b00      	cmp	r3, #0
 806c348:	d00a      	beq.n	806c360 <pvPortMalloc+0xf8>
	__asm volatile
 806c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c34e:	f383 8811 	msr	BASEPRI, r3
 806c352:	f3bf 8f6f 	isb	sy
 806c356:	f3bf 8f4f 	dsb	sy
 806c35a:	613b      	str	r3, [r7, #16]
}
 806c35c:	bf00      	nop
 806c35e:	e7fe      	b.n	806c35e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 806c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c362:	685a      	ldr	r2, [r3, #4]
 806c364:	687b      	ldr	r3, [r7, #4]
 806c366:	1ad2      	subs	r2, r2, r3
 806c368:	69bb      	ldr	r3, [r7, #24]
 806c36a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 806c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c36e:	687a      	ldr	r2, [r7, #4]
 806c370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 806c372:	69b8      	ldr	r0, [r7, #24]
 806c374:	f000 f908 	bl	806c588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 806c378:	4b1d      	ldr	r3, [pc, #116]	; (806c3f0 <pvPortMalloc+0x188>)
 806c37a:	681a      	ldr	r2, [r3, #0]
 806c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c37e:	685b      	ldr	r3, [r3, #4]
 806c380:	1ad3      	subs	r3, r2, r3
 806c382:	4a1b      	ldr	r2, [pc, #108]	; (806c3f0 <pvPortMalloc+0x188>)
 806c384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 806c386:	4b1a      	ldr	r3, [pc, #104]	; (806c3f0 <pvPortMalloc+0x188>)
 806c388:	681a      	ldr	r2, [r3, #0]
 806c38a:	4b1b      	ldr	r3, [pc, #108]	; (806c3f8 <pvPortMalloc+0x190>)
 806c38c:	681b      	ldr	r3, [r3, #0]
 806c38e:	429a      	cmp	r2, r3
 806c390:	d203      	bcs.n	806c39a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 806c392:	4b17      	ldr	r3, [pc, #92]	; (806c3f0 <pvPortMalloc+0x188>)
 806c394:	681b      	ldr	r3, [r3, #0]
 806c396:	4a18      	ldr	r2, [pc, #96]	; (806c3f8 <pvPortMalloc+0x190>)
 806c398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 806c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c39c:	685a      	ldr	r2, [r3, #4]
 806c39e:	4b13      	ldr	r3, [pc, #76]	; (806c3ec <pvPortMalloc+0x184>)
 806c3a0:	681b      	ldr	r3, [r3, #0]
 806c3a2:	431a      	orrs	r2, r3
 806c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c3a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 806c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c3aa:	2200      	movs	r2, #0
 806c3ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 806c3ae:	4b13      	ldr	r3, [pc, #76]	; (806c3fc <pvPortMalloc+0x194>)
 806c3b0:	681b      	ldr	r3, [r3, #0]
 806c3b2:	3301      	adds	r3, #1
 806c3b4:	4a11      	ldr	r2, [pc, #68]	; (806c3fc <pvPortMalloc+0x194>)
 806c3b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 806c3b8:	f7fe fb36 	bl	806aa28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 806c3bc:	69fb      	ldr	r3, [r7, #28]
 806c3be:	f003 0307 	and.w	r3, r3, #7
 806c3c2:	2b00      	cmp	r3, #0
 806c3c4:	d00a      	beq.n	806c3dc <pvPortMalloc+0x174>
	__asm volatile
 806c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c3ca:	f383 8811 	msr	BASEPRI, r3
 806c3ce:	f3bf 8f6f 	isb	sy
 806c3d2:	f3bf 8f4f 	dsb	sy
 806c3d6:	60fb      	str	r3, [r7, #12]
}
 806c3d8:	bf00      	nop
 806c3da:	e7fe      	b.n	806c3da <pvPortMalloc+0x172>
	return pvReturn;
 806c3dc:	69fb      	ldr	r3, [r7, #28]
}
 806c3de:	4618      	mov	r0, r3
 806c3e0:	3728      	adds	r7, #40	; 0x28
 806c3e2:	46bd      	mov	sp, r7
 806c3e4:	bd80      	pop	{r7, pc}
 806c3e6:	bf00      	nop
 806c3e8:	20004b9c 	.word	0x20004b9c
 806c3ec:	20004bb0 	.word	0x20004bb0
 806c3f0:	20004ba0 	.word	0x20004ba0
 806c3f4:	20004b94 	.word	0x20004b94
 806c3f8:	20004ba4 	.word	0x20004ba4
 806c3fc:	20004ba8 	.word	0x20004ba8

0806c400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 806c400:	b580      	push	{r7, lr}
 806c402:	b086      	sub	sp, #24
 806c404:	af00      	add	r7, sp, #0
 806c406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 806c408:	687b      	ldr	r3, [r7, #4]
 806c40a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 806c40c:	687b      	ldr	r3, [r7, #4]
 806c40e:	2b00      	cmp	r3, #0
 806c410:	d04d      	beq.n	806c4ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 806c412:	2308      	movs	r3, #8
 806c414:	425b      	negs	r3, r3
 806c416:	697a      	ldr	r2, [r7, #20]
 806c418:	4413      	add	r3, r2
 806c41a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 806c41c:	697b      	ldr	r3, [r7, #20]
 806c41e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 806c420:	693b      	ldr	r3, [r7, #16]
 806c422:	685a      	ldr	r2, [r3, #4]
 806c424:	4b24      	ldr	r3, [pc, #144]	; (806c4b8 <vPortFree+0xb8>)
 806c426:	681b      	ldr	r3, [r3, #0]
 806c428:	4013      	ands	r3, r2
 806c42a:	2b00      	cmp	r3, #0
 806c42c:	d10a      	bne.n	806c444 <vPortFree+0x44>
	__asm volatile
 806c42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c432:	f383 8811 	msr	BASEPRI, r3
 806c436:	f3bf 8f6f 	isb	sy
 806c43a:	f3bf 8f4f 	dsb	sy
 806c43e:	60fb      	str	r3, [r7, #12]
}
 806c440:	bf00      	nop
 806c442:	e7fe      	b.n	806c442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 806c444:	693b      	ldr	r3, [r7, #16]
 806c446:	681b      	ldr	r3, [r3, #0]
 806c448:	2b00      	cmp	r3, #0
 806c44a:	d00a      	beq.n	806c462 <vPortFree+0x62>
	__asm volatile
 806c44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806c450:	f383 8811 	msr	BASEPRI, r3
 806c454:	f3bf 8f6f 	isb	sy
 806c458:	f3bf 8f4f 	dsb	sy
 806c45c:	60bb      	str	r3, [r7, #8]
}
 806c45e:	bf00      	nop
 806c460:	e7fe      	b.n	806c460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 806c462:	693b      	ldr	r3, [r7, #16]
 806c464:	685a      	ldr	r2, [r3, #4]
 806c466:	4b14      	ldr	r3, [pc, #80]	; (806c4b8 <vPortFree+0xb8>)
 806c468:	681b      	ldr	r3, [r3, #0]
 806c46a:	4013      	ands	r3, r2
 806c46c:	2b00      	cmp	r3, #0
 806c46e:	d01e      	beq.n	806c4ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 806c470:	693b      	ldr	r3, [r7, #16]
 806c472:	681b      	ldr	r3, [r3, #0]
 806c474:	2b00      	cmp	r3, #0
 806c476:	d11a      	bne.n	806c4ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 806c478:	693b      	ldr	r3, [r7, #16]
 806c47a:	685a      	ldr	r2, [r3, #4]
 806c47c:	4b0e      	ldr	r3, [pc, #56]	; (806c4b8 <vPortFree+0xb8>)
 806c47e:	681b      	ldr	r3, [r3, #0]
 806c480:	43db      	mvns	r3, r3
 806c482:	401a      	ands	r2, r3
 806c484:	693b      	ldr	r3, [r7, #16]
 806c486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 806c488:	f7fe fac0 	bl	806aa0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 806c48c:	693b      	ldr	r3, [r7, #16]
 806c48e:	685a      	ldr	r2, [r3, #4]
 806c490:	4b0a      	ldr	r3, [pc, #40]	; (806c4bc <vPortFree+0xbc>)
 806c492:	681b      	ldr	r3, [r3, #0]
 806c494:	4413      	add	r3, r2
 806c496:	4a09      	ldr	r2, [pc, #36]	; (806c4bc <vPortFree+0xbc>)
 806c498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 806c49a:	6938      	ldr	r0, [r7, #16]
 806c49c:	f000 f874 	bl	806c588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 806c4a0:	4b07      	ldr	r3, [pc, #28]	; (806c4c0 <vPortFree+0xc0>)
 806c4a2:	681b      	ldr	r3, [r3, #0]
 806c4a4:	3301      	adds	r3, #1
 806c4a6:	4a06      	ldr	r2, [pc, #24]	; (806c4c0 <vPortFree+0xc0>)
 806c4a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 806c4aa:	f7fe fabd 	bl	806aa28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 806c4ae:	bf00      	nop
 806c4b0:	3718      	adds	r7, #24
 806c4b2:	46bd      	mov	sp, r7
 806c4b4:	bd80      	pop	{r7, pc}
 806c4b6:	bf00      	nop
 806c4b8:	20004bb0 	.word	0x20004bb0
 806c4bc:	20004ba0 	.word	0x20004ba0
 806c4c0:	20004bac 	.word	0x20004bac

0806c4c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 806c4c4:	b480      	push	{r7}
 806c4c6:	b085      	sub	sp, #20
 806c4c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 806c4ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 806c4ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 806c4d0:	4b27      	ldr	r3, [pc, #156]	; (806c570 <prvHeapInit+0xac>)
 806c4d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 806c4d4:	68fb      	ldr	r3, [r7, #12]
 806c4d6:	f003 0307 	and.w	r3, r3, #7
 806c4da:	2b00      	cmp	r3, #0
 806c4dc:	d00c      	beq.n	806c4f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 806c4de:	68fb      	ldr	r3, [r7, #12]
 806c4e0:	3307      	adds	r3, #7
 806c4e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 806c4e4:	68fb      	ldr	r3, [r7, #12]
 806c4e6:	f023 0307 	bic.w	r3, r3, #7
 806c4ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 806c4ec:	68ba      	ldr	r2, [r7, #8]
 806c4ee:	68fb      	ldr	r3, [r7, #12]
 806c4f0:	1ad3      	subs	r3, r2, r3
 806c4f2:	4a1f      	ldr	r2, [pc, #124]	; (806c570 <prvHeapInit+0xac>)
 806c4f4:	4413      	add	r3, r2
 806c4f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 806c4f8:	68fb      	ldr	r3, [r7, #12]
 806c4fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 806c4fc:	4a1d      	ldr	r2, [pc, #116]	; (806c574 <prvHeapInit+0xb0>)
 806c4fe:	687b      	ldr	r3, [r7, #4]
 806c500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 806c502:	4b1c      	ldr	r3, [pc, #112]	; (806c574 <prvHeapInit+0xb0>)
 806c504:	2200      	movs	r2, #0
 806c506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 806c508:	687b      	ldr	r3, [r7, #4]
 806c50a:	68ba      	ldr	r2, [r7, #8]
 806c50c:	4413      	add	r3, r2
 806c50e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 806c510:	2208      	movs	r2, #8
 806c512:	68fb      	ldr	r3, [r7, #12]
 806c514:	1a9b      	subs	r3, r3, r2
 806c516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 806c518:	68fb      	ldr	r3, [r7, #12]
 806c51a:	f023 0307 	bic.w	r3, r3, #7
 806c51e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 806c520:	68fb      	ldr	r3, [r7, #12]
 806c522:	4a15      	ldr	r2, [pc, #84]	; (806c578 <prvHeapInit+0xb4>)
 806c524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 806c526:	4b14      	ldr	r3, [pc, #80]	; (806c578 <prvHeapInit+0xb4>)
 806c528:	681b      	ldr	r3, [r3, #0]
 806c52a:	2200      	movs	r2, #0
 806c52c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 806c52e:	4b12      	ldr	r3, [pc, #72]	; (806c578 <prvHeapInit+0xb4>)
 806c530:	681b      	ldr	r3, [r3, #0]
 806c532:	2200      	movs	r2, #0
 806c534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 806c536:	687b      	ldr	r3, [r7, #4]
 806c538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 806c53a:	683b      	ldr	r3, [r7, #0]
 806c53c:	68fa      	ldr	r2, [r7, #12]
 806c53e:	1ad2      	subs	r2, r2, r3
 806c540:	683b      	ldr	r3, [r7, #0]
 806c542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 806c544:	4b0c      	ldr	r3, [pc, #48]	; (806c578 <prvHeapInit+0xb4>)
 806c546:	681a      	ldr	r2, [r3, #0]
 806c548:	683b      	ldr	r3, [r7, #0]
 806c54a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 806c54c:	683b      	ldr	r3, [r7, #0]
 806c54e:	685b      	ldr	r3, [r3, #4]
 806c550:	4a0a      	ldr	r2, [pc, #40]	; (806c57c <prvHeapInit+0xb8>)
 806c552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 806c554:	683b      	ldr	r3, [r7, #0]
 806c556:	685b      	ldr	r3, [r3, #4]
 806c558:	4a09      	ldr	r2, [pc, #36]	; (806c580 <prvHeapInit+0xbc>)
 806c55a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 806c55c:	4b09      	ldr	r3, [pc, #36]	; (806c584 <prvHeapInit+0xc0>)
 806c55e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 806c562:	601a      	str	r2, [r3, #0]
}
 806c564:	bf00      	nop
 806c566:	3714      	adds	r7, #20
 806c568:	46bd      	mov	sp, r7
 806c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c56e:	4770      	bx	lr
 806c570:	20000f94 	.word	0x20000f94
 806c574:	20004b94 	.word	0x20004b94
 806c578:	20004b9c 	.word	0x20004b9c
 806c57c:	20004ba4 	.word	0x20004ba4
 806c580:	20004ba0 	.word	0x20004ba0
 806c584:	20004bb0 	.word	0x20004bb0

0806c588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 806c588:	b480      	push	{r7}
 806c58a:	b085      	sub	sp, #20
 806c58c:	af00      	add	r7, sp, #0
 806c58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 806c590:	4b28      	ldr	r3, [pc, #160]	; (806c634 <prvInsertBlockIntoFreeList+0xac>)
 806c592:	60fb      	str	r3, [r7, #12]
 806c594:	e002      	b.n	806c59c <prvInsertBlockIntoFreeList+0x14>
 806c596:	68fb      	ldr	r3, [r7, #12]
 806c598:	681b      	ldr	r3, [r3, #0]
 806c59a:	60fb      	str	r3, [r7, #12]
 806c59c:	68fb      	ldr	r3, [r7, #12]
 806c59e:	681b      	ldr	r3, [r3, #0]
 806c5a0:	687a      	ldr	r2, [r7, #4]
 806c5a2:	429a      	cmp	r2, r3
 806c5a4:	d8f7      	bhi.n	806c596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 806c5a6:	68fb      	ldr	r3, [r7, #12]
 806c5a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 806c5aa:	68fb      	ldr	r3, [r7, #12]
 806c5ac:	685b      	ldr	r3, [r3, #4]
 806c5ae:	68ba      	ldr	r2, [r7, #8]
 806c5b0:	4413      	add	r3, r2
 806c5b2:	687a      	ldr	r2, [r7, #4]
 806c5b4:	429a      	cmp	r2, r3
 806c5b6:	d108      	bne.n	806c5ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 806c5b8:	68fb      	ldr	r3, [r7, #12]
 806c5ba:	685a      	ldr	r2, [r3, #4]
 806c5bc:	687b      	ldr	r3, [r7, #4]
 806c5be:	685b      	ldr	r3, [r3, #4]
 806c5c0:	441a      	add	r2, r3
 806c5c2:	68fb      	ldr	r3, [r7, #12]
 806c5c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 806c5c6:	68fb      	ldr	r3, [r7, #12]
 806c5c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 806c5ca:	687b      	ldr	r3, [r7, #4]
 806c5cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 806c5ce:	687b      	ldr	r3, [r7, #4]
 806c5d0:	685b      	ldr	r3, [r3, #4]
 806c5d2:	68ba      	ldr	r2, [r7, #8]
 806c5d4:	441a      	add	r2, r3
 806c5d6:	68fb      	ldr	r3, [r7, #12]
 806c5d8:	681b      	ldr	r3, [r3, #0]
 806c5da:	429a      	cmp	r2, r3
 806c5dc:	d118      	bne.n	806c610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 806c5de:	68fb      	ldr	r3, [r7, #12]
 806c5e0:	681a      	ldr	r2, [r3, #0]
 806c5e2:	4b15      	ldr	r3, [pc, #84]	; (806c638 <prvInsertBlockIntoFreeList+0xb0>)
 806c5e4:	681b      	ldr	r3, [r3, #0]
 806c5e6:	429a      	cmp	r2, r3
 806c5e8:	d00d      	beq.n	806c606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 806c5ea:	687b      	ldr	r3, [r7, #4]
 806c5ec:	685a      	ldr	r2, [r3, #4]
 806c5ee:	68fb      	ldr	r3, [r7, #12]
 806c5f0:	681b      	ldr	r3, [r3, #0]
 806c5f2:	685b      	ldr	r3, [r3, #4]
 806c5f4:	441a      	add	r2, r3
 806c5f6:	687b      	ldr	r3, [r7, #4]
 806c5f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 806c5fa:	68fb      	ldr	r3, [r7, #12]
 806c5fc:	681b      	ldr	r3, [r3, #0]
 806c5fe:	681a      	ldr	r2, [r3, #0]
 806c600:	687b      	ldr	r3, [r7, #4]
 806c602:	601a      	str	r2, [r3, #0]
 806c604:	e008      	b.n	806c618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 806c606:	4b0c      	ldr	r3, [pc, #48]	; (806c638 <prvInsertBlockIntoFreeList+0xb0>)
 806c608:	681a      	ldr	r2, [r3, #0]
 806c60a:	687b      	ldr	r3, [r7, #4]
 806c60c:	601a      	str	r2, [r3, #0]
 806c60e:	e003      	b.n	806c618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 806c610:	68fb      	ldr	r3, [r7, #12]
 806c612:	681a      	ldr	r2, [r3, #0]
 806c614:	687b      	ldr	r3, [r7, #4]
 806c616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 806c618:	68fa      	ldr	r2, [r7, #12]
 806c61a:	687b      	ldr	r3, [r7, #4]
 806c61c:	429a      	cmp	r2, r3
 806c61e:	d002      	beq.n	806c626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 806c620:	68fb      	ldr	r3, [r7, #12]
 806c622:	687a      	ldr	r2, [r7, #4]
 806c624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 806c626:	bf00      	nop
 806c628:	3714      	adds	r7, #20
 806c62a:	46bd      	mov	sp, r7
 806c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c630:	4770      	bx	lr
 806c632:	bf00      	nop
 806c634:	20004b94 	.word	0x20004b94
 806c638:	20004b9c 	.word	0x20004b9c

0806c63c <__errno>:
 806c63c:	4b01      	ldr	r3, [pc, #4]	; (806c644 <__errno+0x8>)
 806c63e:	6818      	ldr	r0, [r3, #0]
 806c640:	4770      	bx	lr
 806c642:	bf00      	nop
 806c644:	20000028 	.word	0x20000028

0806c648 <__libc_init_array>:
 806c648:	b570      	push	{r4, r5, r6, lr}
 806c64a:	4d0d      	ldr	r5, [pc, #52]	; (806c680 <__libc_init_array+0x38>)
 806c64c:	4c0d      	ldr	r4, [pc, #52]	; (806c684 <__libc_init_array+0x3c>)
 806c64e:	1b64      	subs	r4, r4, r5
 806c650:	10a4      	asrs	r4, r4, #2
 806c652:	2600      	movs	r6, #0
 806c654:	42a6      	cmp	r6, r4
 806c656:	d109      	bne.n	806c66c <__libc_init_array+0x24>
 806c658:	4d0b      	ldr	r5, [pc, #44]	; (806c688 <__libc_init_array+0x40>)
 806c65a:	4c0c      	ldr	r4, [pc, #48]	; (806c68c <__libc_init_array+0x44>)
 806c65c:	f000 fcb8 	bl	806cfd0 <_init>
 806c660:	1b64      	subs	r4, r4, r5
 806c662:	10a4      	asrs	r4, r4, #2
 806c664:	2600      	movs	r6, #0
 806c666:	42a6      	cmp	r6, r4
 806c668:	d105      	bne.n	806c676 <__libc_init_array+0x2e>
 806c66a:	bd70      	pop	{r4, r5, r6, pc}
 806c66c:	f855 3b04 	ldr.w	r3, [r5], #4
 806c670:	4798      	blx	r3
 806c672:	3601      	adds	r6, #1
 806c674:	e7ee      	b.n	806c654 <__libc_init_array+0xc>
 806c676:	f855 3b04 	ldr.w	r3, [r5], #4
 806c67a:	4798      	blx	r3
 806c67c:	3601      	adds	r6, #1
 806c67e:	e7f2      	b.n	806c666 <__libc_init_array+0x1e>
 806c680:	0806d6e8 	.word	0x0806d6e8
 806c684:	0806d6e8 	.word	0x0806d6e8
 806c688:	0806d6e8 	.word	0x0806d6e8
 806c68c:	0806d6ec 	.word	0x0806d6ec

0806c690 <__retarget_lock_acquire_recursive>:
 806c690:	4770      	bx	lr

0806c692 <__retarget_lock_release_recursive>:
 806c692:	4770      	bx	lr

0806c694 <memcpy>:
 806c694:	440a      	add	r2, r1
 806c696:	4291      	cmp	r1, r2
 806c698:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 806c69c:	d100      	bne.n	806c6a0 <memcpy+0xc>
 806c69e:	4770      	bx	lr
 806c6a0:	b510      	push	{r4, lr}
 806c6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 806c6a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 806c6aa:	4291      	cmp	r1, r2
 806c6ac:	d1f9      	bne.n	806c6a2 <memcpy+0xe>
 806c6ae:	bd10      	pop	{r4, pc}

0806c6b0 <memset>:
 806c6b0:	4402      	add	r2, r0
 806c6b2:	4603      	mov	r3, r0
 806c6b4:	4293      	cmp	r3, r2
 806c6b6:	d100      	bne.n	806c6ba <memset+0xa>
 806c6b8:	4770      	bx	lr
 806c6ba:	f803 1b01 	strb.w	r1, [r3], #1
 806c6be:	e7f9      	b.n	806c6b4 <memset+0x4>

0806c6c0 <_malloc_r>:
 806c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 806c6c2:	1ccd      	adds	r5, r1, #3
 806c6c4:	f025 0503 	bic.w	r5, r5, #3
 806c6c8:	3508      	adds	r5, #8
 806c6ca:	2d0c      	cmp	r5, #12
 806c6cc:	bf38      	it	cc
 806c6ce:	250c      	movcc	r5, #12
 806c6d0:	2d00      	cmp	r5, #0
 806c6d2:	4606      	mov	r6, r0
 806c6d4:	db01      	blt.n	806c6da <_malloc_r+0x1a>
 806c6d6:	42a9      	cmp	r1, r5
 806c6d8:	d903      	bls.n	806c6e2 <_malloc_r+0x22>
 806c6da:	230c      	movs	r3, #12
 806c6dc:	6033      	str	r3, [r6, #0]
 806c6de:	2000      	movs	r0, #0
 806c6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 806c6e2:	f000 f8e1 	bl	806c8a8 <__malloc_lock>
 806c6e6:	4921      	ldr	r1, [pc, #132]	; (806c76c <_malloc_r+0xac>)
 806c6e8:	680a      	ldr	r2, [r1, #0]
 806c6ea:	4614      	mov	r4, r2
 806c6ec:	b99c      	cbnz	r4, 806c716 <_malloc_r+0x56>
 806c6ee:	4f20      	ldr	r7, [pc, #128]	; (806c770 <_malloc_r+0xb0>)
 806c6f0:	683b      	ldr	r3, [r7, #0]
 806c6f2:	b923      	cbnz	r3, 806c6fe <_malloc_r+0x3e>
 806c6f4:	4621      	mov	r1, r4
 806c6f6:	4630      	mov	r0, r6
 806c6f8:	f000 f8a6 	bl	806c848 <_sbrk_r>
 806c6fc:	6038      	str	r0, [r7, #0]
 806c6fe:	4629      	mov	r1, r5
 806c700:	4630      	mov	r0, r6
 806c702:	f000 f8a1 	bl	806c848 <_sbrk_r>
 806c706:	1c43      	adds	r3, r0, #1
 806c708:	d123      	bne.n	806c752 <_malloc_r+0x92>
 806c70a:	230c      	movs	r3, #12
 806c70c:	6033      	str	r3, [r6, #0]
 806c70e:	4630      	mov	r0, r6
 806c710:	f000 f8d0 	bl	806c8b4 <__malloc_unlock>
 806c714:	e7e3      	b.n	806c6de <_malloc_r+0x1e>
 806c716:	6823      	ldr	r3, [r4, #0]
 806c718:	1b5b      	subs	r3, r3, r5
 806c71a:	d417      	bmi.n	806c74c <_malloc_r+0x8c>
 806c71c:	2b0b      	cmp	r3, #11
 806c71e:	d903      	bls.n	806c728 <_malloc_r+0x68>
 806c720:	6023      	str	r3, [r4, #0]
 806c722:	441c      	add	r4, r3
 806c724:	6025      	str	r5, [r4, #0]
 806c726:	e004      	b.n	806c732 <_malloc_r+0x72>
 806c728:	6863      	ldr	r3, [r4, #4]
 806c72a:	42a2      	cmp	r2, r4
 806c72c:	bf0c      	ite	eq
 806c72e:	600b      	streq	r3, [r1, #0]
 806c730:	6053      	strne	r3, [r2, #4]
 806c732:	4630      	mov	r0, r6
 806c734:	f000 f8be 	bl	806c8b4 <__malloc_unlock>
 806c738:	f104 000b 	add.w	r0, r4, #11
 806c73c:	1d23      	adds	r3, r4, #4
 806c73e:	f020 0007 	bic.w	r0, r0, #7
 806c742:	1ac2      	subs	r2, r0, r3
 806c744:	d0cc      	beq.n	806c6e0 <_malloc_r+0x20>
 806c746:	1a1b      	subs	r3, r3, r0
 806c748:	50a3      	str	r3, [r4, r2]
 806c74a:	e7c9      	b.n	806c6e0 <_malloc_r+0x20>
 806c74c:	4622      	mov	r2, r4
 806c74e:	6864      	ldr	r4, [r4, #4]
 806c750:	e7cc      	b.n	806c6ec <_malloc_r+0x2c>
 806c752:	1cc4      	adds	r4, r0, #3
 806c754:	f024 0403 	bic.w	r4, r4, #3
 806c758:	42a0      	cmp	r0, r4
 806c75a:	d0e3      	beq.n	806c724 <_malloc_r+0x64>
 806c75c:	1a21      	subs	r1, r4, r0
 806c75e:	4630      	mov	r0, r6
 806c760:	f000 f872 	bl	806c848 <_sbrk_r>
 806c764:	3001      	adds	r0, #1
 806c766:	d1dd      	bne.n	806c724 <_malloc_r+0x64>
 806c768:	e7cf      	b.n	806c70a <_malloc_r+0x4a>
 806c76a:	bf00      	nop
 806c76c:	20004bb4 	.word	0x20004bb4
 806c770:	20004bb8 	.word	0x20004bb8

0806c774 <cleanup_glue>:
 806c774:	b538      	push	{r3, r4, r5, lr}
 806c776:	460c      	mov	r4, r1
 806c778:	6809      	ldr	r1, [r1, #0]
 806c77a:	4605      	mov	r5, r0
 806c77c:	b109      	cbz	r1, 806c782 <cleanup_glue+0xe>
 806c77e:	f7ff fff9 	bl	806c774 <cleanup_glue>
 806c782:	4621      	mov	r1, r4
 806c784:	4628      	mov	r0, r5
 806c786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 806c78a:	f000 b899 	b.w	806c8c0 <_free_r>
	...

0806c790 <_reclaim_reent>:
 806c790:	4b2c      	ldr	r3, [pc, #176]	; (806c844 <_reclaim_reent+0xb4>)
 806c792:	681b      	ldr	r3, [r3, #0]
 806c794:	4283      	cmp	r3, r0
 806c796:	b570      	push	{r4, r5, r6, lr}
 806c798:	4604      	mov	r4, r0
 806c79a:	d051      	beq.n	806c840 <_reclaim_reent+0xb0>
 806c79c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 806c79e:	b143      	cbz	r3, 806c7b2 <_reclaim_reent+0x22>
 806c7a0:	68db      	ldr	r3, [r3, #12]
 806c7a2:	2b00      	cmp	r3, #0
 806c7a4:	d14a      	bne.n	806c83c <_reclaim_reent+0xac>
 806c7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 806c7a8:	6819      	ldr	r1, [r3, #0]
 806c7aa:	b111      	cbz	r1, 806c7b2 <_reclaim_reent+0x22>
 806c7ac:	4620      	mov	r0, r4
 806c7ae:	f000 f887 	bl	806c8c0 <_free_r>
 806c7b2:	6961      	ldr	r1, [r4, #20]
 806c7b4:	b111      	cbz	r1, 806c7bc <_reclaim_reent+0x2c>
 806c7b6:	4620      	mov	r0, r4
 806c7b8:	f000 f882 	bl	806c8c0 <_free_r>
 806c7bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 806c7be:	b111      	cbz	r1, 806c7c6 <_reclaim_reent+0x36>
 806c7c0:	4620      	mov	r0, r4
 806c7c2:	f000 f87d 	bl	806c8c0 <_free_r>
 806c7c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 806c7c8:	b111      	cbz	r1, 806c7d0 <_reclaim_reent+0x40>
 806c7ca:	4620      	mov	r0, r4
 806c7cc:	f000 f878 	bl	806c8c0 <_free_r>
 806c7d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 806c7d2:	b111      	cbz	r1, 806c7da <_reclaim_reent+0x4a>
 806c7d4:	4620      	mov	r0, r4
 806c7d6:	f000 f873 	bl	806c8c0 <_free_r>
 806c7da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 806c7dc:	b111      	cbz	r1, 806c7e4 <_reclaim_reent+0x54>
 806c7de:	4620      	mov	r0, r4
 806c7e0:	f000 f86e 	bl	806c8c0 <_free_r>
 806c7e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 806c7e6:	b111      	cbz	r1, 806c7ee <_reclaim_reent+0x5e>
 806c7e8:	4620      	mov	r0, r4
 806c7ea:	f000 f869 	bl	806c8c0 <_free_r>
 806c7ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 806c7f0:	b111      	cbz	r1, 806c7f8 <_reclaim_reent+0x68>
 806c7f2:	4620      	mov	r0, r4
 806c7f4:	f000 f864 	bl	806c8c0 <_free_r>
 806c7f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 806c7fa:	b111      	cbz	r1, 806c802 <_reclaim_reent+0x72>
 806c7fc:	4620      	mov	r0, r4
 806c7fe:	f000 f85f 	bl	806c8c0 <_free_r>
 806c802:	69a3      	ldr	r3, [r4, #24]
 806c804:	b1e3      	cbz	r3, 806c840 <_reclaim_reent+0xb0>
 806c806:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 806c808:	4620      	mov	r0, r4
 806c80a:	4798      	blx	r3
 806c80c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 806c80e:	b1b9      	cbz	r1, 806c840 <_reclaim_reent+0xb0>
 806c810:	4620      	mov	r0, r4
 806c812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 806c816:	f7ff bfad 	b.w	806c774 <cleanup_glue>
 806c81a:	5949      	ldr	r1, [r1, r5]
 806c81c:	b941      	cbnz	r1, 806c830 <_reclaim_reent+0xa0>
 806c81e:	3504      	adds	r5, #4
 806c820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 806c822:	2d80      	cmp	r5, #128	; 0x80
 806c824:	68d9      	ldr	r1, [r3, #12]
 806c826:	d1f8      	bne.n	806c81a <_reclaim_reent+0x8a>
 806c828:	4620      	mov	r0, r4
 806c82a:	f000 f849 	bl	806c8c0 <_free_r>
 806c82e:	e7ba      	b.n	806c7a6 <_reclaim_reent+0x16>
 806c830:	680e      	ldr	r6, [r1, #0]
 806c832:	4620      	mov	r0, r4
 806c834:	f000 f844 	bl	806c8c0 <_free_r>
 806c838:	4631      	mov	r1, r6
 806c83a:	e7ef      	b.n	806c81c <_reclaim_reent+0x8c>
 806c83c:	2500      	movs	r5, #0
 806c83e:	e7ef      	b.n	806c820 <_reclaim_reent+0x90>
 806c840:	bd70      	pop	{r4, r5, r6, pc}
 806c842:	bf00      	nop
 806c844:	20000028 	.word	0x20000028

0806c848 <_sbrk_r>:
 806c848:	b538      	push	{r3, r4, r5, lr}
 806c84a:	4d06      	ldr	r5, [pc, #24]	; (806c864 <_sbrk_r+0x1c>)
 806c84c:	2300      	movs	r3, #0
 806c84e:	4604      	mov	r4, r0
 806c850:	4608      	mov	r0, r1
 806c852:	602b      	str	r3, [r5, #0]
 806c854:	f7f4 febe 	bl	80615d4 <_sbrk>
 806c858:	1c43      	adds	r3, r0, #1
 806c85a:	d102      	bne.n	806c862 <_sbrk_r+0x1a>
 806c85c:	682b      	ldr	r3, [r5, #0]
 806c85e:	b103      	cbz	r3, 806c862 <_sbrk_r+0x1a>
 806c860:	6023      	str	r3, [r4, #0]
 806c862:	bd38      	pop	{r3, r4, r5, pc}
 806c864:	20005884 	.word	0x20005884

0806c868 <siprintf>:
 806c868:	b40e      	push	{r1, r2, r3}
 806c86a:	b500      	push	{lr}
 806c86c:	b09c      	sub	sp, #112	; 0x70
 806c86e:	ab1d      	add	r3, sp, #116	; 0x74
 806c870:	9002      	str	r0, [sp, #8]
 806c872:	9006      	str	r0, [sp, #24]
 806c874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 806c878:	4809      	ldr	r0, [pc, #36]	; (806c8a0 <siprintf+0x38>)
 806c87a:	9107      	str	r1, [sp, #28]
 806c87c:	9104      	str	r1, [sp, #16]
 806c87e:	4909      	ldr	r1, [pc, #36]	; (806c8a4 <siprintf+0x3c>)
 806c880:	f853 2b04 	ldr.w	r2, [r3], #4
 806c884:	9105      	str	r1, [sp, #20]
 806c886:	6800      	ldr	r0, [r0, #0]
 806c888:	9301      	str	r3, [sp, #4]
 806c88a:	a902      	add	r1, sp, #8
 806c88c:	f000 f8c4 	bl	806ca18 <_svfiprintf_r>
 806c890:	9b02      	ldr	r3, [sp, #8]
 806c892:	2200      	movs	r2, #0
 806c894:	701a      	strb	r2, [r3, #0]
 806c896:	b01c      	add	sp, #112	; 0x70
 806c898:	f85d eb04 	ldr.w	lr, [sp], #4
 806c89c:	b003      	add	sp, #12
 806c89e:	4770      	bx	lr
 806c8a0:	20000028 	.word	0x20000028
 806c8a4:	ffff0208 	.word	0xffff0208

0806c8a8 <__malloc_lock>:
 806c8a8:	4801      	ldr	r0, [pc, #4]	; (806c8b0 <__malloc_lock+0x8>)
 806c8aa:	f7ff bef1 	b.w	806c690 <__retarget_lock_acquire_recursive>
 806c8ae:	bf00      	nop
 806c8b0:	2000587c 	.word	0x2000587c

0806c8b4 <__malloc_unlock>:
 806c8b4:	4801      	ldr	r0, [pc, #4]	; (806c8bc <__malloc_unlock+0x8>)
 806c8b6:	f7ff beec 	b.w	806c692 <__retarget_lock_release_recursive>
 806c8ba:	bf00      	nop
 806c8bc:	2000587c 	.word	0x2000587c

0806c8c0 <_free_r>:
 806c8c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 806c8c2:	2900      	cmp	r1, #0
 806c8c4:	d048      	beq.n	806c958 <_free_r+0x98>
 806c8c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 806c8ca:	9001      	str	r0, [sp, #4]
 806c8cc:	2b00      	cmp	r3, #0
 806c8ce:	f1a1 0404 	sub.w	r4, r1, #4
 806c8d2:	bfb8      	it	lt
 806c8d4:	18e4      	addlt	r4, r4, r3
 806c8d6:	f7ff ffe7 	bl	806c8a8 <__malloc_lock>
 806c8da:	4a20      	ldr	r2, [pc, #128]	; (806c95c <_free_r+0x9c>)
 806c8dc:	9801      	ldr	r0, [sp, #4]
 806c8de:	6813      	ldr	r3, [r2, #0]
 806c8e0:	4615      	mov	r5, r2
 806c8e2:	b933      	cbnz	r3, 806c8f2 <_free_r+0x32>
 806c8e4:	6063      	str	r3, [r4, #4]
 806c8e6:	6014      	str	r4, [r2, #0]
 806c8e8:	b003      	add	sp, #12
 806c8ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 806c8ee:	f7ff bfe1 	b.w	806c8b4 <__malloc_unlock>
 806c8f2:	42a3      	cmp	r3, r4
 806c8f4:	d90b      	bls.n	806c90e <_free_r+0x4e>
 806c8f6:	6821      	ldr	r1, [r4, #0]
 806c8f8:	1862      	adds	r2, r4, r1
 806c8fa:	4293      	cmp	r3, r2
 806c8fc:	bf04      	itt	eq
 806c8fe:	681a      	ldreq	r2, [r3, #0]
 806c900:	685b      	ldreq	r3, [r3, #4]
 806c902:	6063      	str	r3, [r4, #4]
 806c904:	bf04      	itt	eq
 806c906:	1852      	addeq	r2, r2, r1
 806c908:	6022      	streq	r2, [r4, #0]
 806c90a:	602c      	str	r4, [r5, #0]
 806c90c:	e7ec      	b.n	806c8e8 <_free_r+0x28>
 806c90e:	461a      	mov	r2, r3
 806c910:	685b      	ldr	r3, [r3, #4]
 806c912:	b10b      	cbz	r3, 806c918 <_free_r+0x58>
 806c914:	42a3      	cmp	r3, r4
 806c916:	d9fa      	bls.n	806c90e <_free_r+0x4e>
 806c918:	6811      	ldr	r1, [r2, #0]
 806c91a:	1855      	adds	r5, r2, r1
 806c91c:	42a5      	cmp	r5, r4
 806c91e:	d10b      	bne.n	806c938 <_free_r+0x78>
 806c920:	6824      	ldr	r4, [r4, #0]
 806c922:	4421      	add	r1, r4
 806c924:	1854      	adds	r4, r2, r1
 806c926:	42a3      	cmp	r3, r4
 806c928:	6011      	str	r1, [r2, #0]
 806c92a:	d1dd      	bne.n	806c8e8 <_free_r+0x28>
 806c92c:	681c      	ldr	r4, [r3, #0]
 806c92e:	685b      	ldr	r3, [r3, #4]
 806c930:	6053      	str	r3, [r2, #4]
 806c932:	4421      	add	r1, r4
 806c934:	6011      	str	r1, [r2, #0]
 806c936:	e7d7      	b.n	806c8e8 <_free_r+0x28>
 806c938:	d902      	bls.n	806c940 <_free_r+0x80>
 806c93a:	230c      	movs	r3, #12
 806c93c:	6003      	str	r3, [r0, #0]
 806c93e:	e7d3      	b.n	806c8e8 <_free_r+0x28>
 806c940:	6825      	ldr	r5, [r4, #0]
 806c942:	1961      	adds	r1, r4, r5
 806c944:	428b      	cmp	r3, r1
 806c946:	bf04      	itt	eq
 806c948:	6819      	ldreq	r1, [r3, #0]
 806c94a:	685b      	ldreq	r3, [r3, #4]
 806c94c:	6063      	str	r3, [r4, #4]
 806c94e:	bf04      	itt	eq
 806c950:	1949      	addeq	r1, r1, r5
 806c952:	6021      	streq	r1, [r4, #0]
 806c954:	6054      	str	r4, [r2, #4]
 806c956:	e7c7      	b.n	806c8e8 <_free_r+0x28>
 806c958:	b003      	add	sp, #12
 806c95a:	bd30      	pop	{r4, r5, pc}
 806c95c:	20004bb4 	.word	0x20004bb4

0806c960 <__ssputs_r>:
 806c960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 806c964:	688e      	ldr	r6, [r1, #8]
 806c966:	429e      	cmp	r6, r3
 806c968:	4682      	mov	sl, r0
 806c96a:	460c      	mov	r4, r1
 806c96c:	4690      	mov	r8, r2
 806c96e:	461f      	mov	r7, r3
 806c970:	d838      	bhi.n	806c9e4 <__ssputs_r+0x84>
 806c972:	898a      	ldrh	r2, [r1, #12]
 806c974:	f412 6f90 	tst.w	r2, #1152	; 0x480
 806c978:	d032      	beq.n	806c9e0 <__ssputs_r+0x80>
 806c97a:	6825      	ldr	r5, [r4, #0]
 806c97c:	6909      	ldr	r1, [r1, #16]
 806c97e:	eba5 0901 	sub.w	r9, r5, r1
 806c982:	6965      	ldr	r5, [r4, #20]
 806c984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 806c988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 806c98c:	3301      	adds	r3, #1
 806c98e:	444b      	add	r3, r9
 806c990:	106d      	asrs	r5, r5, #1
 806c992:	429d      	cmp	r5, r3
 806c994:	bf38      	it	cc
 806c996:	461d      	movcc	r5, r3
 806c998:	0553      	lsls	r3, r2, #21
 806c99a:	d531      	bpl.n	806ca00 <__ssputs_r+0xa0>
 806c99c:	4629      	mov	r1, r5
 806c99e:	f7ff fe8f 	bl	806c6c0 <_malloc_r>
 806c9a2:	4606      	mov	r6, r0
 806c9a4:	b950      	cbnz	r0, 806c9bc <__ssputs_r+0x5c>
 806c9a6:	230c      	movs	r3, #12
 806c9a8:	f8ca 3000 	str.w	r3, [sl]
 806c9ac:	89a3      	ldrh	r3, [r4, #12]
 806c9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806c9b2:	81a3      	strh	r3, [r4, #12]
 806c9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 806c9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806c9bc:	6921      	ldr	r1, [r4, #16]
 806c9be:	464a      	mov	r2, r9
 806c9c0:	f7ff fe68 	bl	806c694 <memcpy>
 806c9c4:	89a3      	ldrh	r3, [r4, #12]
 806c9c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 806c9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 806c9ce:	81a3      	strh	r3, [r4, #12]
 806c9d0:	6126      	str	r6, [r4, #16]
 806c9d2:	6165      	str	r5, [r4, #20]
 806c9d4:	444e      	add	r6, r9
 806c9d6:	eba5 0509 	sub.w	r5, r5, r9
 806c9da:	6026      	str	r6, [r4, #0]
 806c9dc:	60a5      	str	r5, [r4, #8]
 806c9de:	463e      	mov	r6, r7
 806c9e0:	42be      	cmp	r6, r7
 806c9e2:	d900      	bls.n	806c9e6 <__ssputs_r+0x86>
 806c9e4:	463e      	mov	r6, r7
 806c9e6:	4632      	mov	r2, r6
 806c9e8:	6820      	ldr	r0, [r4, #0]
 806c9ea:	4641      	mov	r1, r8
 806c9ec:	f000 faa8 	bl	806cf40 <memmove>
 806c9f0:	68a3      	ldr	r3, [r4, #8]
 806c9f2:	6822      	ldr	r2, [r4, #0]
 806c9f4:	1b9b      	subs	r3, r3, r6
 806c9f6:	4432      	add	r2, r6
 806c9f8:	60a3      	str	r3, [r4, #8]
 806c9fa:	6022      	str	r2, [r4, #0]
 806c9fc:	2000      	movs	r0, #0
 806c9fe:	e7db      	b.n	806c9b8 <__ssputs_r+0x58>
 806ca00:	462a      	mov	r2, r5
 806ca02:	f000 fab7 	bl	806cf74 <_realloc_r>
 806ca06:	4606      	mov	r6, r0
 806ca08:	2800      	cmp	r0, #0
 806ca0a:	d1e1      	bne.n	806c9d0 <__ssputs_r+0x70>
 806ca0c:	6921      	ldr	r1, [r4, #16]
 806ca0e:	4650      	mov	r0, sl
 806ca10:	f7ff ff56 	bl	806c8c0 <_free_r>
 806ca14:	e7c7      	b.n	806c9a6 <__ssputs_r+0x46>
	...

0806ca18 <_svfiprintf_r>:
 806ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 806ca1c:	4698      	mov	r8, r3
 806ca1e:	898b      	ldrh	r3, [r1, #12]
 806ca20:	061b      	lsls	r3, r3, #24
 806ca22:	b09d      	sub	sp, #116	; 0x74
 806ca24:	4607      	mov	r7, r0
 806ca26:	460d      	mov	r5, r1
 806ca28:	4614      	mov	r4, r2
 806ca2a:	d50e      	bpl.n	806ca4a <_svfiprintf_r+0x32>
 806ca2c:	690b      	ldr	r3, [r1, #16]
 806ca2e:	b963      	cbnz	r3, 806ca4a <_svfiprintf_r+0x32>
 806ca30:	2140      	movs	r1, #64	; 0x40
 806ca32:	f7ff fe45 	bl	806c6c0 <_malloc_r>
 806ca36:	6028      	str	r0, [r5, #0]
 806ca38:	6128      	str	r0, [r5, #16]
 806ca3a:	b920      	cbnz	r0, 806ca46 <_svfiprintf_r+0x2e>
 806ca3c:	230c      	movs	r3, #12
 806ca3e:	603b      	str	r3, [r7, #0]
 806ca40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 806ca44:	e0d1      	b.n	806cbea <_svfiprintf_r+0x1d2>
 806ca46:	2340      	movs	r3, #64	; 0x40
 806ca48:	616b      	str	r3, [r5, #20]
 806ca4a:	2300      	movs	r3, #0
 806ca4c:	9309      	str	r3, [sp, #36]	; 0x24
 806ca4e:	2320      	movs	r3, #32
 806ca50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 806ca54:	f8cd 800c 	str.w	r8, [sp, #12]
 806ca58:	2330      	movs	r3, #48	; 0x30
 806ca5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 806cc04 <_svfiprintf_r+0x1ec>
 806ca5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 806ca62:	f04f 0901 	mov.w	r9, #1
 806ca66:	4623      	mov	r3, r4
 806ca68:	469a      	mov	sl, r3
 806ca6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 806ca6e:	b10a      	cbz	r2, 806ca74 <_svfiprintf_r+0x5c>
 806ca70:	2a25      	cmp	r2, #37	; 0x25
 806ca72:	d1f9      	bne.n	806ca68 <_svfiprintf_r+0x50>
 806ca74:	ebba 0b04 	subs.w	fp, sl, r4
 806ca78:	d00b      	beq.n	806ca92 <_svfiprintf_r+0x7a>
 806ca7a:	465b      	mov	r3, fp
 806ca7c:	4622      	mov	r2, r4
 806ca7e:	4629      	mov	r1, r5
 806ca80:	4638      	mov	r0, r7
 806ca82:	f7ff ff6d 	bl	806c960 <__ssputs_r>
 806ca86:	3001      	adds	r0, #1
 806ca88:	f000 80aa 	beq.w	806cbe0 <_svfiprintf_r+0x1c8>
 806ca8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 806ca8e:	445a      	add	r2, fp
 806ca90:	9209      	str	r2, [sp, #36]	; 0x24
 806ca92:	f89a 3000 	ldrb.w	r3, [sl]
 806ca96:	2b00      	cmp	r3, #0
 806ca98:	f000 80a2 	beq.w	806cbe0 <_svfiprintf_r+0x1c8>
 806ca9c:	2300      	movs	r3, #0
 806ca9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806caa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 806caa6:	f10a 0a01 	add.w	sl, sl, #1
 806caaa:	9304      	str	r3, [sp, #16]
 806caac:	9307      	str	r3, [sp, #28]
 806caae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 806cab2:	931a      	str	r3, [sp, #104]	; 0x68
 806cab4:	4654      	mov	r4, sl
 806cab6:	2205      	movs	r2, #5
 806cab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 806cabc:	4851      	ldr	r0, [pc, #324]	; (806cc04 <_svfiprintf_r+0x1ec>)
 806cabe:	f7f3 fba7 	bl	8060210 <memchr>
 806cac2:	9a04      	ldr	r2, [sp, #16]
 806cac4:	b9d8      	cbnz	r0, 806cafe <_svfiprintf_r+0xe6>
 806cac6:	06d0      	lsls	r0, r2, #27
 806cac8:	bf44      	itt	mi
 806caca:	2320      	movmi	r3, #32
 806cacc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 806cad0:	0711      	lsls	r1, r2, #28
 806cad2:	bf44      	itt	mi
 806cad4:	232b      	movmi	r3, #43	; 0x2b
 806cad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 806cada:	f89a 3000 	ldrb.w	r3, [sl]
 806cade:	2b2a      	cmp	r3, #42	; 0x2a
 806cae0:	d015      	beq.n	806cb0e <_svfiprintf_r+0xf6>
 806cae2:	9a07      	ldr	r2, [sp, #28]
 806cae4:	4654      	mov	r4, sl
 806cae6:	2000      	movs	r0, #0
 806cae8:	f04f 0c0a 	mov.w	ip, #10
 806caec:	4621      	mov	r1, r4
 806caee:	f811 3b01 	ldrb.w	r3, [r1], #1
 806caf2:	3b30      	subs	r3, #48	; 0x30
 806caf4:	2b09      	cmp	r3, #9
 806caf6:	d94e      	bls.n	806cb96 <_svfiprintf_r+0x17e>
 806caf8:	b1b0      	cbz	r0, 806cb28 <_svfiprintf_r+0x110>
 806cafa:	9207      	str	r2, [sp, #28]
 806cafc:	e014      	b.n	806cb28 <_svfiprintf_r+0x110>
 806cafe:	eba0 0308 	sub.w	r3, r0, r8
 806cb02:	fa09 f303 	lsl.w	r3, r9, r3
 806cb06:	4313      	orrs	r3, r2
 806cb08:	9304      	str	r3, [sp, #16]
 806cb0a:	46a2      	mov	sl, r4
 806cb0c:	e7d2      	b.n	806cab4 <_svfiprintf_r+0x9c>
 806cb0e:	9b03      	ldr	r3, [sp, #12]
 806cb10:	1d19      	adds	r1, r3, #4
 806cb12:	681b      	ldr	r3, [r3, #0]
 806cb14:	9103      	str	r1, [sp, #12]
 806cb16:	2b00      	cmp	r3, #0
 806cb18:	bfbb      	ittet	lt
 806cb1a:	425b      	neglt	r3, r3
 806cb1c:	f042 0202 	orrlt.w	r2, r2, #2
 806cb20:	9307      	strge	r3, [sp, #28]
 806cb22:	9307      	strlt	r3, [sp, #28]
 806cb24:	bfb8      	it	lt
 806cb26:	9204      	strlt	r2, [sp, #16]
 806cb28:	7823      	ldrb	r3, [r4, #0]
 806cb2a:	2b2e      	cmp	r3, #46	; 0x2e
 806cb2c:	d10c      	bne.n	806cb48 <_svfiprintf_r+0x130>
 806cb2e:	7863      	ldrb	r3, [r4, #1]
 806cb30:	2b2a      	cmp	r3, #42	; 0x2a
 806cb32:	d135      	bne.n	806cba0 <_svfiprintf_r+0x188>
 806cb34:	9b03      	ldr	r3, [sp, #12]
 806cb36:	1d1a      	adds	r2, r3, #4
 806cb38:	681b      	ldr	r3, [r3, #0]
 806cb3a:	9203      	str	r2, [sp, #12]
 806cb3c:	2b00      	cmp	r3, #0
 806cb3e:	bfb8      	it	lt
 806cb40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 806cb44:	3402      	adds	r4, #2
 806cb46:	9305      	str	r3, [sp, #20]
 806cb48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 806cc14 <_svfiprintf_r+0x1fc>
 806cb4c:	7821      	ldrb	r1, [r4, #0]
 806cb4e:	2203      	movs	r2, #3
 806cb50:	4650      	mov	r0, sl
 806cb52:	f7f3 fb5d 	bl	8060210 <memchr>
 806cb56:	b140      	cbz	r0, 806cb6a <_svfiprintf_r+0x152>
 806cb58:	2340      	movs	r3, #64	; 0x40
 806cb5a:	eba0 000a 	sub.w	r0, r0, sl
 806cb5e:	fa03 f000 	lsl.w	r0, r3, r0
 806cb62:	9b04      	ldr	r3, [sp, #16]
 806cb64:	4303      	orrs	r3, r0
 806cb66:	3401      	adds	r4, #1
 806cb68:	9304      	str	r3, [sp, #16]
 806cb6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 806cb6e:	4826      	ldr	r0, [pc, #152]	; (806cc08 <_svfiprintf_r+0x1f0>)
 806cb70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 806cb74:	2206      	movs	r2, #6
 806cb76:	f7f3 fb4b 	bl	8060210 <memchr>
 806cb7a:	2800      	cmp	r0, #0
 806cb7c:	d038      	beq.n	806cbf0 <_svfiprintf_r+0x1d8>
 806cb7e:	4b23      	ldr	r3, [pc, #140]	; (806cc0c <_svfiprintf_r+0x1f4>)
 806cb80:	bb1b      	cbnz	r3, 806cbca <_svfiprintf_r+0x1b2>
 806cb82:	9b03      	ldr	r3, [sp, #12]
 806cb84:	3307      	adds	r3, #7
 806cb86:	f023 0307 	bic.w	r3, r3, #7
 806cb8a:	3308      	adds	r3, #8
 806cb8c:	9303      	str	r3, [sp, #12]
 806cb8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 806cb90:	4433      	add	r3, r6
 806cb92:	9309      	str	r3, [sp, #36]	; 0x24
 806cb94:	e767      	b.n	806ca66 <_svfiprintf_r+0x4e>
 806cb96:	fb0c 3202 	mla	r2, ip, r2, r3
 806cb9a:	460c      	mov	r4, r1
 806cb9c:	2001      	movs	r0, #1
 806cb9e:	e7a5      	b.n	806caec <_svfiprintf_r+0xd4>
 806cba0:	2300      	movs	r3, #0
 806cba2:	3401      	adds	r4, #1
 806cba4:	9305      	str	r3, [sp, #20]
 806cba6:	4619      	mov	r1, r3
 806cba8:	f04f 0c0a 	mov.w	ip, #10
 806cbac:	4620      	mov	r0, r4
 806cbae:	f810 2b01 	ldrb.w	r2, [r0], #1
 806cbb2:	3a30      	subs	r2, #48	; 0x30
 806cbb4:	2a09      	cmp	r2, #9
 806cbb6:	d903      	bls.n	806cbc0 <_svfiprintf_r+0x1a8>
 806cbb8:	2b00      	cmp	r3, #0
 806cbba:	d0c5      	beq.n	806cb48 <_svfiprintf_r+0x130>
 806cbbc:	9105      	str	r1, [sp, #20]
 806cbbe:	e7c3      	b.n	806cb48 <_svfiprintf_r+0x130>
 806cbc0:	fb0c 2101 	mla	r1, ip, r1, r2
 806cbc4:	4604      	mov	r4, r0
 806cbc6:	2301      	movs	r3, #1
 806cbc8:	e7f0      	b.n	806cbac <_svfiprintf_r+0x194>
 806cbca:	ab03      	add	r3, sp, #12
 806cbcc:	9300      	str	r3, [sp, #0]
 806cbce:	462a      	mov	r2, r5
 806cbd0:	4b0f      	ldr	r3, [pc, #60]	; (806cc10 <_svfiprintf_r+0x1f8>)
 806cbd2:	a904      	add	r1, sp, #16
 806cbd4:	4638      	mov	r0, r7
 806cbd6:	f3af 8000 	nop.w
 806cbda:	1c42      	adds	r2, r0, #1
 806cbdc:	4606      	mov	r6, r0
 806cbde:	d1d6      	bne.n	806cb8e <_svfiprintf_r+0x176>
 806cbe0:	89ab      	ldrh	r3, [r5, #12]
 806cbe2:	065b      	lsls	r3, r3, #25
 806cbe4:	f53f af2c 	bmi.w	806ca40 <_svfiprintf_r+0x28>
 806cbe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 806cbea:	b01d      	add	sp, #116	; 0x74
 806cbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 806cbf0:	ab03      	add	r3, sp, #12
 806cbf2:	9300      	str	r3, [sp, #0]
 806cbf4:	462a      	mov	r2, r5
 806cbf6:	4b06      	ldr	r3, [pc, #24]	; (806cc10 <_svfiprintf_r+0x1f8>)
 806cbf8:	a904      	add	r1, sp, #16
 806cbfa:	4638      	mov	r0, r7
 806cbfc:	f000 f87a 	bl	806ccf4 <_printf_i>
 806cc00:	e7eb      	b.n	806cbda <_svfiprintf_r+0x1c2>
 806cc02:	bf00      	nop
 806cc04:	0806d6ac 	.word	0x0806d6ac
 806cc08:	0806d6b6 	.word	0x0806d6b6
 806cc0c:	00000000 	.word	0x00000000
 806cc10:	0806c961 	.word	0x0806c961
 806cc14:	0806d6b2 	.word	0x0806d6b2

0806cc18 <_printf_common>:
 806cc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 806cc1c:	4616      	mov	r6, r2
 806cc1e:	4699      	mov	r9, r3
 806cc20:	688a      	ldr	r2, [r1, #8]
 806cc22:	690b      	ldr	r3, [r1, #16]
 806cc24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 806cc28:	4293      	cmp	r3, r2
 806cc2a:	bfb8      	it	lt
 806cc2c:	4613      	movlt	r3, r2
 806cc2e:	6033      	str	r3, [r6, #0]
 806cc30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 806cc34:	4607      	mov	r7, r0
 806cc36:	460c      	mov	r4, r1
 806cc38:	b10a      	cbz	r2, 806cc3e <_printf_common+0x26>
 806cc3a:	3301      	adds	r3, #1
 806cc3c:	6033      	str	r3, [r6, #0]
 806cc3e:	6823      	ldr	r3, [r4, #0]
 806cc40:	0699      	lsls	r1, r3, #26
 806cc42:	bf42      	ittt	mi
 806cc44:	6833      	ldrmi	r3, [r6, #0]
 806cc46:	3302      	addmi	r3, #2
 806cc48:	6033      	strmi	r3, [r6, #0]
 806cc4a:	6825      	ldr	r5, [r4, #0]
 806cc4c:	f015 0506 	ands.w	r5, r5, #6
 806cc50:	d106      	bne.n	806cc60 <_printf_common+0x48>
 806cc52:	f104 0a19 	add.w	sl, r4, #25
 806cc56:	68e3      	ldr	r3, [r4, #12]
 806cc58:	6832      	ldr	r2, [r6, #0]
 806cc5a:	1a9b      	subs	r3, r3, r2
 806cc5c:	42ab      	cmp	r3, r5
 806cc5e:	dc26      	bgt.n	806ccae <_printf_common+0x96>
 806cc60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 806cc64:	1e13      	subs	r3, r2, #0
 806cc66:	6822      	ldr	r2, [r4, #0]
 806cc68:	bf18      	it	ne
 806cc6a:	2301      	movne	r3, #1
 806cc6c:	0692      	lsls	r2, r2, #26
 806cc6e:	d42b      	bmi.n	806ccc8 <_printf_common+0xb0>
 806cc70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 806cc74:	4649      	mov	r1, r9
 806cc76:	4638      	mov	r0, r7
 806cc78:	47c0      	blx	r8
 806cc7a:	3001      	adds	r0, #1
 806cc7c:	d01e      	beq.n	806ccbc <_printf_common+0xa4>
 806cc7e:	6823      	ldr	r3, [r4, #0]
 806cc80:	68e5      	ldr	r5, [r4, #12]
 806cc82:	6832      	ldr	r2, [r6, #0]
 806cc84:	f003 0306 	and.w	r3, r3, #6
 806cc88:	2b04      	cmp	r3, #4
 806cc8a:	bf08      	it	eq
 806cc8c:	1aad      	subeq	r5, r5, r2
 806cc8e:	68a3      	ldr	r3, [r4, #8]
 806cc90:	6922      	ldr	r2, [r4, #16]
 806cc92:	bf0c      	ite	eq
 806cc94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 806cc98:	2500      	movne	r5, #0
 806cc9a:	4293      	cmp	r3, r2
 806cc9c:	bfc4      	itt	gt
 806cc9e:	1a9b      	subgt	r3, r3, r2
 806cca0:	18ed      	addgt	r5, r5, r3
 806cca2:	2600      	movs	r6, #0
 806cca4:	341a      	adds	r4, #26
 806cca6:	42b5      	cmp	r5, r6
 806cca8:	d11a      	bne.n	806cce0 <_printf_common+0xc8>
 806ccaa:	2000      	movs	r0, #0
 806ccac:	e008      	b.n	806ccc0 <_printf_common+0xa8>
 806ccae:	2301      	movs	r3, #1
 806ccb0:	4652      	mov	r2, sl
 806ccb2:	4649      	mov	r1, r9
 806ccb4:	4638      	mov	r0, r7
 806ccb6:	47c0      	blx	r8
 806ccb8:	3001      	adds	r0, #1
 806ccba:	d103      	bne.n	806ccc4 <_printf_common+0xac>
 806ccbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 806ccc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806ccc4:	3501      	adds	r5, #1
 806ccc6:	e7c6      	b.n	806cc56 <_printf_common+0x3e>
 806ccc8:	18e1      	adds	r1, r4, r3
 806ccca:	1c5a      	adds	r2, r3, #1
 806cccc:	2030      	movs	r0, #48	; 0x30
 806ccce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 806ccd2:	4422      	add	r2, r4
 806ccd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 806ccd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 806ccdc:	3302      	adds	r3, #2
 806ccde:	e7c7      	b.n	806cc70 <_printf_common+0x58>
 806cce0:	2301      	movs	r3, #1
 806cce2:	4622      	mov	r2, r4
 806cce4:	4649      	mov	r1, r9
 806cce6:	4638      	mov	r0, r7
 806cce8:	47c0      	blx	r8
 806ccea:	3001      	adds	r0, #1
 806ccec:	d0e6      	beq.n	806ccbc <_printf_common+0xa4>
 806ccee:	3601      	adds	r6, #1
 806ccf0:	e7d9      	b.n	806cca6 <_printf_common+0x8e>
	...

0806ccf4 <_printf_i>:
 806ccf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 806ccf8:	460c      	mov	r4, r1
 806ccfa:	4691      	mov	r9, r2
 806ccfc:	7e27      	ldrb	r7, [r4, #24]
 806ccfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 806cd00:	2f78      	cmp	r7, #120	; 0x78
 806cd02:	4680      	mov	r8, r0
 806cd04:	469a      	mov	sl, r3
 806cd06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 806cd0a:	d807      	bhi.n	806cd1c <_printf_i+0x28>
 806cd0c:	2f62      	cmp	r7, #98	; 0x62
 806cd0e:	d80a      	bhi.n	806cd26 <_printf_i+0x32>
 806cd10:	2f00      	cmp	r7, #0
 806cd12:	f000 80d8 	beq.w	806cec6 <_printf_i+0x1d2>
 806cd16:	2f58      	cmp	r7, #88	; 0x58
 806cd18:	f000 80a3 	beq.w	806ce62 <_printf_i+0x16e>
 806cd1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 806cd20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 806cd24:	e03a      	b.n	806cd9c <_printf_i+0xa8>
 806cd26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 806cd2a:	2b15      	cmp	r3, #21
 806cd2c:	d8f6      	bhi.n	806cd1c <_printf_i+0x28>
 806cd2e:	a001      	add	r0, pc, #4	; (adr r0, 806cd34 <_printf_i+0x40>)
 806cd30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 806cd34:	0806cd8d 	.word	0x0806cd8d
 806cd38:	0806cda1 	.word	0x0806cda1
 806cd3c:	0806cd1d 	.word	0x0806cd1d
 806cd40:	0806cd1d 	.word	0x0806cd1d
 806cd44:	0806cd1d 	.word	0x0806cd1d
 806cd48:	0806cd1d 	.word	0x0806cd1d
 806cd4c:	0806cda1 	.word	0x0806cda1
 806cd50:	0806cd1d 	.word	0x0806cd1d
 806cd54:	0806cd1d 	.word	0x0806cd1d
 806cd58:	0806cd1d 	.word	0x0806cd1d
 806cd5c:	0806cd1d 	.word	0x0806cd1d
 806cd60:	0806cead 	.word	0x0806cead
 806cd64:	0806cdd1 	.word	0x0806cdd1
 806cd68:	0806ce8f 	.word	0x0806ce8f
 806cd6c:	0806cd1d 	.word	0x0806cd1d
 806cd70:	0806cd1d 	.word	0x0806cd1d
 806cd74:	0806cecf 	.word	0x0806cecf
 806cd78:	0806cd1d 	.word	0x0806cd1d
 806cd7c:	0806cdd1 	.word	0x0806cdd1
 806cd80:	0806cd1d 	.word	0x0806cd1d
 806cd84:	0806cd1d 	.word	0x0806cd1d
 806cd88:	0806ce97 	.word	0x0806ce97
 806cd8c:	680b      	ldr	r3, [r1, #0]
 806cd8e:	1d1a      	adds	r2, r3, #4
 806cd90:	681b      	ldr	r3, [r3, #0]
 806cd92:	600a      	str	r2, [r1, #0]
 806cd94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 806cd98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 806cd9c:	2301      	movs	r3, #1
 806cd9e:	e0a3      	b.n	806cee8 <_printf_i+0x1f4>
 806cda0:	6825      	ldr	r5, [r4, #0]
 806cda2:	6808      	ldr	r0, [r1, #0]
 806cda4:	062e      	lsls	r6, r5, #24
 806cda6:	f100 0304 	add.w	r3, r0, #4
 806cdaa:	d50a      	bpl.n	806cdc2 <_printf_i+0xce>
 806cdac:	6805      	ldr	r5, [r0, #0]
 806cdae:	600b      	str	r3, [r1, #0]
 806cdb0:	2d00      	cmp	r5, #0
 806cdb2:	da03      	bge.n	806cdbc <_printf_i+0xc8>
 806cdb4:	232d      	movs	r3, #45	; 0x2d
 806cdb6:	426d      	negs	r5, r5
 806cdb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 806cdbc:	485e      	ldr	r0, [pc, #376]	; (806cf38 <_printf_i+0x244>)
 806cdbe:	230a      	movs	r3, #10
 806cdc0:	e019      	b.n	806cdf6 <_printf_i+0x102>
 806cdc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 806cdc6:	6805      	ldr	r5, [r0, #0]
 806cdc8:	600b      	str	r3, [r1, #0]
 806cdca:	bf18      	it	ne
 806cdcc:	b22d      	sxthne	r5, r5
 806cdce:	e7ef      	b.n	806cdb0 <_printf_i+0xbc>
 806cdd0:	680b      	ldr	r3, [r1, #0]
 806cdd2:	6825      	ldr	r5, [r4, #0]
 806cdd4:	1d18      	adds	r0, r3, #4
 806cdd6:	6008      	str	r0, [r1, #0]
 806cdd8:	0628      	lsls	r0, r5, #24
 806cdda:	d501      	bpl.n	806cde0 <_printf_i+0xec>
 806cddc:	681d      	ldr	r5, [r3, #0]
 806cdde:	e002      	b.n	806cde6 <_printf_i+0xf2>
 806cde0:	0669      	lsls	r1, r5, #25
 806cde2:	d5fb      	bpl.n	806cddc <_printf_i+0xe8>
 806cde4:	881d      	ldrh	r5, [r3, #0]
 806cde6:	4854      	ldr	r0, [pc, #336]	; (806cf38 <_printf_i+0x244>)
 806cde8:	2f6f      	cmp	r7, #111	; 0x6f
 806cdea:	bf0c      	ite	eq
 806cdec:	2308      	moveq	r3, #8
 806cdee:	230a      	movne	r3, #10
 806cdf0:	2100      	movs	r1, #0
 806cdf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 806cdf6:	6866      	ldr	r6, [r4, #4]
 806cdf8:	60a6      	str	r6, [r4, #8]
 806cdfa:	2e00      	cmp	r6, #0
 806cdfc:	bfa2      	ittt	ge
 806cdfe:	6821      	ldrge	r1, [r4, #0]
 806ce00:	f021 0104 	bicge.w	r1, r1, #4
 806ce04:	6021      	strge	r1, [r4, #0]
 806ce06:	b90d      	cbnz	r5, 806ce0c <_printf_i+0x118>
 806ce08:	2e00      	cmp	r6, #0
 806ce0a:	d04d      	beq.n	806cea8 <_printf_i+0x1b4>
 806ce0c:	4616      	mov	r6, r2
 806ce0e:	fbb5 f1f3 	udiv	r1, r5, r3
 806ce12:	fb03 5711 	mls	r7, r3, r1, r5
 806ce16:	5dc7      	ldrb	r7, [r0, r7]
 806ce18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 806ce1c:	462f      	mov	r7, r5
 806ce1e:	42bb      	cmp	r3, r7
 806ce20:	460d      	mov	r5, r1
 806ce22:	d9f4      	bls.n	806ce0e <_printf_i+0x11a>
 806ce24:	2b08      	cmp	r3, #8
 806ce26:	d10b      	bne.n	806ce40 <_printf_i+0x14c>
 806ce28:	6823      	ldr	r3, [r4, #0]
 806ce2a:	07df      	lsls	r7, r3, #31
 806ce2c:	d508      	bpl.n	806ce40 <_printf_i+0x14c>
 806ce2e:	6923      	ldr	r3, [r4, #16]
 806ce30:	6861      	ldr	r1, [r4, #4]
 806ce32:	4299      	cmp	r1, r3
 806ce34:	bfde      	ittt	le
 806ce36:	2330      	movle	r3, #48	; 0x30
 806ce38:	f806 3c01 	strble.w	r3, [r6, #-1]
 806ce3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 806ce40:	1b92      	subs	r2, r2, r6
 806ce42:	6122      	str	r2, [r4, #16]
 806ce44:	f8cd a000 	str.w	sl, [sp]
 806ce48:	464b      	mov	r3, r9
 806ce4a:	aa03      	add	r2, sp, #12
 806ce4c:	4621      	mov	r1, r4
 806ce4e:	4640      	mov	r0, r8
 806ce50:	f7ff fee2 	bl	806cc18 <_printf_common>
 806ce54:	3001      	adds	r0, #1
 806ce56:	d14c      	bne.n	806cef2 <_printf_i+0x1fe>
 806ce58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 806ce5c:	b004      	add	sp, #16
 806ce5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 806ce62:	4835      	ldr	r0, [pc, #212]	; (806cf38 <_printf_i+0x244>)
 806ce64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 806ce68:	6823      	ldr	r3, [r4, #0]
 806ce6a:	680e      	ldr	r6, [r1, #0]
 806ce6c:	061f      	lsls	r7, r3, #24
 806ce6e:	f856 5b04 	ldr.w	r5, [r6], #4
 806ce72:	600e      	str	r6, [r1, #0]
 806ce74:	d514      	bpl.n	806cea0 <_printf_i+0x1ac>
 806ce76:	07d9      	lsls	r1, r3, #31
 806ce78:	bf44      	itt	mi
 806ce7a:	f043 0320 	orrmi.w	r3, r3, #32
 806ce7e:	6023      	strmi	r3, [r4, #0]
 806ce80:	b91d      	cbnz	r5, 806ce8a <_printf_i+0x196>
 806ce82:	6823      	ldr	r3, [r4, #0]
 806ce84:	f023 0320 	bic.w	r3, r3, #32
 806ce88:	6023      	str	r3, [r4, #0]
 806ce8a:	2310      	movs	r3, #16
 806ce8c:	e7b0      	b.n	806cdf0 <_printf_i+0xfc>
 806ce8e:	6823      	ldr	r3, [r4, #0]
 806ce90:	f043 0320 	orr.w	r3, r3, #32
 806ce94:	6023      	str	r3, [r4, #0]
 806ce96:	2378      	movs	r3, #120	; 0x78
 806ce98:	4828      	ldr	r0, [pc, #160]	; (806cf3c <_printf_i+0x248>)
 806ce9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 806ce9e:	e7e3      	b.n	806ce68 <_printf_i+0x174>
 806cea0:	065e      	lsls	r6, r3, #25
 806cea2:	bf48      	it	mi
 806cea4:	b2ad      	uxthmi	r5, r5
 806cea6:	e7e6      	b.n	806ce76 <_printf_i+0x182>
 806cea8:	4616      	mov	r6, r2
 806ceaa:	e7bb      	b.n	806ce24 <_printf_i+0x130>
 806ceac:	680b      	ldr	r3, [r1, #0]
 806ceae:	6826      	ldr	r6, [r4, #0]
 806ceb0:	6960      	ldr	r0, [r4, #20]
 806ceb2:	1d1d      	adds	r5, r3, #4
 806ceb4:	600d      	str	r5, [r1, #0]
 806ceb6:	0635      	lsls	r5, r6, #24
 806ceb8:	681b      	ldr	r3, [r3, #0]
 806ceba:	d501      	bpl.n	806cec0 <_printf_i+0x1cc>
 806cebc:	6018      	str	r0, [r3, #0]
 806cebe:	e002      	b.n	806cec6 <_printf_i+0x1d2>
 806cec0:	0671      	lsls	r1, r6, #25
 806cec2:	d5fb      	bpl.n	806cebc <_printf_i+0x1c8>
 806cec4:	8018      	strh	r0, [r3, #0]
 806cec6:	2300      	movs	r3, #0
 806cec8:	6123      	str	r3, [r4, #16]
 806ceca:	4616      	mov	r6, r2
 806cecc:	e7ba      	b.n	806ce44 <_printf_i+0x150>
 806cece:	680b      	ldr	r3, [r1, #0]
 806ced0:	1d1a      	adds	r2, r3, #4
 806ced2:	600a      	str	r2, [r1, #0]
 806ced4:	681e      	ldr	r6, [r3, #0]
 806ced6:	6862      	ldr	r2, [r4, #4]
 806ced8:	2100      	movs	r1, #0
 806ceda:	4630      	mov	r0, r6
 806cedc:	f7f3 f998 	bl	8060210 <memchr>
 806cee0:	b108      	cbz	r0, 806cee6 <_printf_i+0x1f2>
 806cee2:	1b80      	subs	r0, r0, r6
 806cee4:	6060      	str	r0, [r4, #4]
 806cee6:	6863      	ldr	r3, [r4, #4]
 806cee8:	6123      	str	r3, [r4, #16]
 806ceea:	2300      	movs	r3, #0
 806ceec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 806cef0:	e7a8      	b.n	806ce44 <_printf_i+0x150>
 806cef2:	6923      	ldr	r3, [r4, #16]
 806cef4:	4632      	mov	r2, r6
 806cef6:	4649      	mov	r1, r9
 806cef8:	4640      	mov	r0, r8
 806cefa:	47d0      	blx	sl
 806cefc:	3001      	adds	r0, #1
 806cefe:	d0ab      	beq.n	806ce58 <_printf_i+0x164>
 806cf00:	6823      	ldr	r3, [r4, #0]
 806cf02:	079b      	lsls	r3, r3, #30
 806cf04:	d413      	bmi.n	806cf2e <_printf_i+0x23a>
 806cf06:	68e0      	ldr	r0, [r4, #12]
 806cf08:	9b03      	ldr	r3, [sp, #12]
 806cf0a:	4298      	cmp	r0, r3
 806cf0c:	bfb8      	it	lt
 806cf0e:	4618      	movlt	r0, r3
 806cf10:	e7a4      	b.n	806ce5c <_printf_i+0x168>
 806cf12:	2301      	movs	r3, #1
 806cf14:	4632      	mov	r2, r6
 806cf16:	4649      	mov	r1, r9
 806cf18:	4640      	mov	r0, r8
 806cf1a:	47d0      	blx	sl
 806cf1c:	3001      	adds	r0, #1
 806cf1e:	d09b      	beq.n	806ce58 <_printf_i+0x164>
 806cf20:	3501      	adds	r5, #1
 806cf22:	68e3      	ldr	r3, [r4, #12]
 806cf24:	9903      	ldr	r1, [sp, #12]
 806cf26:	1a5b      	subs	r3, r3, r1
 806cf28:	42ab      	cmp	r3, r5
 806cf2a:	dcf2      	bgt.n	806cf12 <_printf_i+0x21e>
 806cf2c:	e7eb      	b.n	806cf06 <_printf_i+0x212>
 806cf2e:	2500      	movs	r5, #0
 806cf30:	f104 0619 	add.w	r6, r4, #25
 806cf34:	e7f5      	b.n	806cf22 <_printf_i+0x22e>
 806cf36:	bf00      	nop
 806cf38:	0806d6bd 	.word	0x0806d6bd
 806cf3c:	0806d6ce 	.word	0x0806d6ce

0806cf40 <memmove>:
 806cf40:	4288      	cmp	r0, r1
 806cf42:	b510      	push	{r4, lr}
 806cf44:	eb01 0402 	add.w	r4, r1, r2
 806cf48:	d902      	bls.n	806cf50 <memmove+0x10>
 806cf4a:	4284      	cmp	r4, r0
 806cf4c:	4623      	mov	r3, r4
 806cf4e:	d807      	bhi.n	806cf60 <memmove+0x20>
 806cf50:	1e43      	subs	r3, r0, #1
 806cf52:	42a1      	cmp	r1, r4
 806cf54:	d008      	beq.n	806cf68 <memmove+0x28>
 806cf56:	f811 2b01 	ldrb.w	r2, [r1], #1
 806cf5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 806cf5e:	e7f8      	b.n	806cf52 <memmove+0x12>
 806cf60:	4402      	add	r2, r0
 806cf62:	4601      	mov	r1, r0
 806cf64:	428a      	cmp	r2, r1
 806cf66:	d100      	bne.n	806cf6a <memmove+0x2a>
 806cf68:	bd10      	pop	{r4, pc}
 806cf6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 806cf6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 806cf72:	e7f7      	b.n	806cf64 <memmove+0x24>

0806cf74 <_realloc_r>:
 806cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 806cf76:	4607      	mov	r7, r0
 806cf78:	4614      	mov	r4, r2
 806cf7a:	460e      	mov	r6, r1
 806cf7c:	b921      	cbnz	r1, 806cf88 <_realloc_r+0x14>
 806cf7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 806cf82:	4611      	mov	r1, r2
 806cf84:	f7ff bb9c 	b.w	806c6c0 <_malloc_r>
 806cf88:	b922      	cbnz	r2, 806cf94 <_realloc_r+0x20>
 806cf8a:	f7ff fc99 	bl	806c8c0 <_free_r>
 806cf8e:	4625      	mov	r5, r4
 806cf90:	4628      	mov	r0, r5
 806cf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 806cf94:	f000 f814 	bl	806cfc0 <_malloc_usable_size_r>
 806cf98:	42a0      	cmp	r0, r4
 806cf9a:	d20f      	bcs.n	806cfbc <_realloc_r+0x48>
 806cf9c:	4621      	mov	r1, r4
 806cf9e:	4638      	mov	r0, r7
 806cfa0:	f7ff fb8e 	bl	806c6c0 <_malloc_r>
 806cfa4:	4605      	mov	r5, r0
 806cfa6:	2800      	cmp	r0, #0
 806cfa8:	d0f2      	beq.n	806cf90 <_realloc_r+0x1c>
 806cfaa:	4631      	mov	r1, r6
 806cfac:	4622      	mov	r2, r4
 806cfae:	f7ff fb71 	bl	806c694 <memcpy>
 806cfb2:	4631      	mov	r1, r6
 806cfb4:	4638      	mov	r0, r7
 806cfb6:	f7ff fc83 	bl	806c8c0 <_free_r>
 806cfba:	e7e9      	b.n	806cf90 <_realloc_r+0x1c>
 806cfbc:	4635      	mov	r5, r6
 806cfbe:	e7e7      	b.n	806cf90 <_realloc_r+0x1c>

0806cfc0 <_malloc_usable_size_r>:
 806cfc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 806cfc4:	1f18      	subs	r0, r3, #4
 806cfc6:	2b00      	cmp	r3, #0
 806cfc8:	bfbc      	itt	lt
 806cfca:	580b      	ldrlt	r3, [r1, r0]
 806cfcc:	18c0      	addlt	r0, r0, r3
 806cfce:	4770      	bx	lr

0806cfd0 <_init>:
 806cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 806cfd2:	bf00      	nop
 806cfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 806cfd6:	bc08      	pop	{r3}
 806cfd8:	469e      	mov	lr, r3
 806cfda:	4770      	bx	lr

0806cfdc <_fini>:
 806cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 806cfde:	bf00      	nop
 806cfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 806cfe2:	bc08      	pop	{r3}
 806cfe4:	469e      	mov	lr, r3
 806cfe6:	4770      	bx	lr
