
rtocs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08060000  08060000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016478  080601a0  080601a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d2c  08076618  08076618  00026618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08077344  08077344  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08077344  08077344  00027344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807734c  0807734c  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807734c  0807734c  0002734c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08077350  08077350  00027350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08077354  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b18  200001fc  08077550  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d14  08077550  00035d14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004604a  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f63  00000000  00000000  00076276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002138  00000000  00000000  0007d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec8  00000000  00000000  0007f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cb7  00000000  00000000  000811e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032e27  00000000  00000000  000a2e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad72f  00000000  00000000  000d5cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001833ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f14  00000000  00000000  00183440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080601a0 <__do_global_dtors_aux>:
 80601a0:	b510      	push	{r4, lr}
 80601a2:	4c05      	ldr	r4, [pc, #20]	; (80601b8 <__do_global_dtors_aux+0x18>)
 80601a4:	7823      	ldrb	r3, [r4, #0]
 80601a6:	b933      	cbnz	r3, 80601b6 <__do_global_dtors_aux+0x16>
 80601a8:	4b04      	ldr	r3, [pc, #16]	; (80601bc <__do_global_dtors_aux+0x1c>)
 80601aa:	b113      	cbz	r3, 80601b2 <__do_global_dtors_aux+0x12>
 80601ac:	4804      	ldr	r0, [pc, #16]	; (80601c0 <__do_global_dtors_aux+0x20>)
 80601ae:	f3af 8000 	nop.w
 80601b2:	2301      	movs	r3, #1
 80601b4:	7023      	strb	r3, [r4, #0]
 80601b6:	bd10      	pop	{r4, pc}
 80601b8:	200001fc 	.word	0x200001fc
 80601bc:	00000000 	.word	0x00000000
 80601c0:	08076600 	.word	0x08076600

080601c4 <frame_dummy>:
 80601c4:	b508      	push	{r3, lr}
 80601c6:	4b03      	ldr	r3, [pc, #12]	; (80601d4 <frame_dummy+0x10>)
 80601c8:	b11b      	cbz	r3, 80601d2 <frame_dummy+0xe>
 80601ca:	4903      	ldr	r1, [pc, #12]	; (80601d8 <frame_dummy+0x14>)
 80601cc:	4803      	ldr	r0, [pc, #12]	; (80601dc <frame_dummy+0x18>)
 80601ce:	f3af 8000 	nop.w
 80601d2:	bd08      	pop	{r3, pc}
 80601d4:	00000000 	.word	0x00000000
 80601d8:	20000200 	.word	0x20000200
 80601dc:	08076600 	.word	0x08076600

080601e0 <strcmp>:
 80601e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80601e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80601e8:	2a01      	cmp	r2, #1
 80601ea:	bf28      	it	cs
 80601ec:	429a      	cmpcs	r2, r3
 80601ee:	d0f7      	beq.n	80601e0 <strcmp>
 80601f0:	1ad0      	subs	r0, r2, r3
 80601f2:	4770      	bx	lr

080601f4 <strlen>:
 80601f4:	4603      	mov	r3, r0
 80601f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80601fa:	2a00      	cmp	r2, #0
 80601fc:	d1fb      	bne.n	80601f6 <strlen+0x2>
 80601fe:	1a18      	subs	r0, r3, r0
 8060200:	3801      	subs	r0, #1
 8060202:	4770      	bx	lr
	...

08060210 <memchr>:
 8060210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8060214:	2a10      	cmp	r2, #16
 8060216:	db2b      	blt.n	8060270 <memchr+0x60>
 8060218:	f010 0f07 	tst.w	r0, #7
 806021c:	d008      	beq.n	8060230 <memchr+0x20>
 806021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8060222:	3a01      	subs	r2, #1
 8060224:	428b      	cmp	r3, r1
 8060226:	d02d      	beq.n	8060284 <memchr+0x74>
 8060228:	f010 0f07 	tst.w	r0, #7
 806022c:	b342      	cbz	r2, 8060280 <memchr+0x70>
 806022e:	d1f6      	bne.n	806021e <memchr+0xe>
 8060230:	b4f0      	push	{r4, r5, r6, r7}
 8060232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8060236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 806023a:	f022 0407 	bic.w	r4, r2, #7
 806023e:	f07f 0700 	mvns.w	r7, #0
 8060242:	2300      	movs	r3, #0
 8060244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8060248:	3c08      	subs	r4, #8
 806024a:	ea85 0501 	eor.w	r5, r5, r1
 806024e:	ea86 0601 	eor.w	r6, r6, r1
 8060252:	fa85 f547 	uadd8	r5, r5, r7
 8060256:	faa3 f587 	sel	r5, r3, r7
 806025a:	fa86 f647 	uadd8	r6, r6, r7
 806025e:	faa5 f687 	sel	r6, r5, r7
 8060262:	b98e      	cbnz	r6, 8060288 <memchr+0x78>
 8060264:	d1ee      	bne.n	8060244 <memchr+0x34>
 8060266:	bcf0      	pop	{r4, r5, r6, r7}
 8060268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 806026c:	f002 0207 	and.w	r2, r2, #7
 8060270:	b132      	cbz	r2, 8060280 <memchr+0x70>
 8060272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8060276:	3a01      	subs	r2, #1
 8060278:	ea83 0301 	eor.w	r3, r3, r1
 806027c:	b113      	cbz	r3, 8060284 <memchr+0x74>
 806027e:	d1f8      	bne.n	8060272 <memchr+0x62>
 8060280:	2000      	movs	r0, #0
 8060282:	4770      	bx	lr
 8060284:	3801      	subs	r0, #1
 8060286:	4770      	bx	lr
 8060288:	2d00      	cmp	r5, #0
 806028a:	bf06      	itte	eq
 806028c:	4635      	moveq	r5, r6
 806028e:	3803      	subeq	r0, #3
 8060290:	3807      	subne	r0, #7
 8060292:	f015 0f01 	tst.w	r5, #1
 8060296:	d107      	bne.n	80602a8 <memchr+0x98>
 8060298:	3001      	adds	r0, #1
 806029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 806029e:	bf02      	ittt	eq
 80602a0:	3001      	addeq	r0, #1
 80602a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80602a6:	3001      	addeq	r0, #1
 80602a8:	bcf0      	pop	{r4, r5, r6, r7}
 80602aa:	3801      	subs	r0, #1
 80602ac:	4770      	bx	lr
 80602ae:	bf00      	nop

080602b0 <__aeabi_drsub>:
 80602b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80602b4:	e002      	b.n	80602bc <__adddf3>
 80602b6:	bf00      	nop

080602b8 <__aeabi_dsub>:
 80602b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080602bc <__adddf3>:
 80602bc:	b530      	push	{r4, r5, lr}
 80602be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80602c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80602c6:	ea94 0f05 	teq	r4, r5
 80602ca:	bf08      	it	eq
 80602cc:	ea90 0f02 	teqeq	r0, r2
 80602d0:	bf1f      	itttt	ne
 80602d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80602d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80602da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80602de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80602e2:	f000 80e2 	beq.w	80604aa <__adddf3+0x1ee>
 80602e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80602ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80602ee:	bfb8      	it	lt
 80602f0:	426d      	neglt	r5, r5
 80602f2:	dd0c      	ble.n	806030e <__adddf3+0x52>
 80602f4:	442c      	add	r4, r5
 80602f6:	ea80 0202 	eor.w	r2, r0, r2
 80602fa:	ea81 0303 	eor.w	r3, r1, r3
 80602fe:	ea82 0000 	eor.w	r0, r2, r0
 8060302:	ea83 0101 	eor.w	r1, r3, r1
 8060306:	ea80 0202 	eor.w	r2, r0, r2
 806030a:	ea81 0303 	eor.w	r3, r1, r3
 806030e:	2d36      	cmp	r5, #54	; 0x36
 8060310:	bf88      	it	hi
 8060312:	bd30      	pophi	{r4, r5, pc}
 8060314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8060318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 806031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8060320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8060324:	d002      	beq.n	806032c <__adddf3+0x70>
 8060326:	4240      	negs	r0, r0
 8060328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 806032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8060330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8060334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8060338:	d002      	beq.n	8060340 <__adddf3+0x84>
 806033a:	4252      	negs	r2, r2
 806033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060340:	ea94 0f05 	teq	r4, r5
 8060344:	f000 80a7 	beq.w	8060496 <__adddf3+0x1da>
 8060348:	f1a4 0401 	sub.w	r4, r4, #1
 806034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8060350:	db0d      	blt.n	806036e <__adddf3+0xb2>
 8060352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8060356:	fa22 f205 	lsr.w	r2, r2, r5
 806035a:	1880      	adds	r0, r0, r2
 806035c:	f141 0100 	adc.w	r1, r1, #0
 8060360:	fa03 f20e 	lsl.w	r2, r3, lr
 8060364:	1880      	adds	r0, r0, r2
 8060366:	fa43 f305 	asr.w	r3, r3, r5
 806036a:	4159      	adcs	r1, r3
 806036c:	e00e      	b.n	806038c <__adddf3+0xd0>
 806036e:	f1a5 0520 	sub.w	r5, r5, #32
 8060372:	f10e 0e20 	add.w	lr, lr, #32
 8060376:	2a01      	cmp	r2, #1
 8060378:	fa03 fc0e 	lsl.w	ip, r3, lr
 806037c:	bf28      	it	cs
 806037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8060382:	fa43 f305 	asr.w	r3, r3, r5
 8060386:	18c0      	adds	r0, r0, r3
 8060388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 806038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8060390:	d507      	bpl.n	80603a2 <__adddf3+0xe6>
 8060392:	f04f 0e00 	mov.w	lr, #0
 8060396:	f1dc 0c00 	rsbs	ip, ip, #0
 806039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 806039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80603a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80603a6:	d31b      	bcc.n	80603e0 <__adddf3+0x124>
 80603a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80603ac:	d30c      	bcc.n	80603c8 <__adddf3+0x10c>
 80603ae:	0849      	lsrs	r1, r1, #1
 80603b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80603b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80603b8:	f104 0401 	add.w	r4, r4, #1
 80603bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80603c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80603c4:	f080 809a 	bcs.w	80604fc <__adddf3+0x240>
 80603c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80603cc:	bf08      	it	eq
 80603ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80603d2:	f150 0000 	adcs.w	r0, r0, #0
 80603d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80603da:	ea41 0105 	orr.w	r1, r1, r5
 80603de:	bd30      	pop	{r4, r5, pc}
 80603e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80603e4:	4140      	adcs	r0, r0
 80603e6:	eb41 0101 	adc.w	r1, r1, r1
 80603ea:	3c01      	subs	r4, #1
 80603ec:	bf28      	it	cs
 80603ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80603f2:	d2e9      	bcs.n	80603c8 <__adddf3+0x10c>
 80603f4:	f091 0f00 	teq	r1, #0
 80603f8:	bf04      	itt	eq
 80603fa:	4601      	moveq	r1, r0
 80603fc:	2000      	moveq	r0, #0
 80603fe:	fab1 f381 	clz	r3, r1
 8060402:	bf08      	it	eq
 8060404:	3320      	addeq	r3, #32
 8060406:	f1a3 030b 	sub.w	r3, r3, #11
 806040a:	f1b3 0220 	subs.w	r2, r3, #32
 806040e:	da0c      	bge.n	806042a <__adddf3+0x16e>
 8060410:	320c      	adds	r2, #12
 8060412:	dd08      	ble.n	8060426 <__adddf3+0x16a>
 8060414:	f102 0c14 	add.w	ip, r2, #20
 8060418:	f1c2 020c 	rsb	r2, r2, #12
 806041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8060420:	fa21 f102 	lsr.w	r1, r1, r2
 8060424:	e00c      	b.n	8060440 <__adddf3+0x184>
 8060426:	f102 0214 	add.w	r2, r2, #20
 806042a:	bfd8      	it	le
 806042c:	f1c2 0c20 	rsble	ip, r2, #32
 8060430:	fa01 f102 	lsl.w	r1, r1, r2
 8060434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8060438:	bfdc      	itt	le
 806043a:	ea41 010c 	orrle.w	r1, r1, ip
 806043e:	4090      	lslle	r0, r2
 8060440:	1ae4      	subs	r4, r4, r3
 8060442:	bfa2      	ittt	ge
 8060444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8060448:	4329      	orrge	r1, r5
 806044a:	bd30      	popge	{r4, r5, pc}
 806044c:	ea6f 0404 	mvn.w	r4, r4
 8060450:	3c1f      	subs	r4, #31
 8060452:	da1c      	bge.n	806048e <__adddf3+0x1d2>
 8060454:	340c      	adds	r4, #12
 8060456:	dc0e      	bgt.n	8060476 <__adddf3+0x1ba>
 8060458:	f104 0414 	add.w	r4, r4, #20
 806045c:	f1c4 0220 	rsb	r2, r4, #32
 8060460:	fa20 f004 	lsr.w	r0, r0, r4
 8060464:	fa01 f302 	lsl.w	r3, r1, r2
 8060468:	ea40 0003 	orr.w	r0, r0, r3
 806046c:	fa21 f304 	lsr.w	r3, r1, r4
 8060470:	ea45 0103 	orr.w	r1, r5, r3
 8060474:	bd30      	pop	{r4, r5, pc}
 8060476:	f1c4 040c 	rsb	r4, r4, #12
 806047a:	f1c4 0220 	rsb	r2, r4, #32
 806047e:	fa20 f002 	lsr.w	r0, r0, r2
 8060482:	fa01 f304 	lsl.w	r3, r1, r4
 8060486:	ea40 0003 	orr.w	r0, r0, r3
 806048a:	4629      	mov	r1, r5
 806048c:	bd30      	pop	{r4, r5, pc}
 806048e:	fa21 f004 	lsr.w	r0, r1, r4
 8060492:	4629      	mov	r1, r5
 8060494:	bd30      	pop	{r4, r5, pc}
 8060496:	f094 0f00 	teq	r4, #0
 806049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 806049e:	bf06      	itte	eq
 80604a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80604a4:	3401      	addeq	r4, #1
 80604a6:	3d01      	subne	r5, #1
 80604a8:	e74e      	b.n	8060348 <__adddf3+0x8c>
 80604aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80604ae:	bf18      	it	ne
 80604b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80604b4:	d029      	beq.n	806050a <__adddf3+0x24e>
 80604b6:	ea94 0f05 	teq	r4, r5
 80604ba:	bf08      	it	eq
 80604bc:	ea90 0f02 	teqeq	r0, r2
 80604c0:	d005      	beq.n	80604ce <__adddf3+0x212>
 80604c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80604c6:	bf04      	itt	eq
 80604c8:	4619      	moveq	r1, r3
 80604ca:	4610      	moveq	r0, r2
 80604cc:	bd30      	pop	{r4, r5, pc}
 80604ce:	ea91 0f03 	teq	r1, r3
 80604d2:	bf1e      	ittt	ne
 80604d4:	2100      	movne	r1, #0
 80604d6:	2000      	movne	r0, #0
 80604d8:	bd30      	popne	{r4, r5, pc}
 80604da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80604de:	d105      	bne.n	80604ec <__adddf3+0x230>
 80604e0:	0040      	lsls	r0, r0, #1
 80604e2:	4149      	adcs	r1, r1
 80604e4:	bf28      	it	cs
 80604e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80604ea:	bd30      	pop	{r4, r5, pc}
 80604ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80604f0:	bf3c      	itt	cc
 80604f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80604f6:	bd30      	popcc	{r4, r5, pc}
 80604f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80604fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8060500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8060504:	f04f 0000 	mov.w	r0, #0
 8060508:	bd30      	pop	{r4, r5, pc}
 806050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 806050e:	bf1a      	itte	ne
 8060510:	4619      	movne	r1, r3
 8060512:	4610      	movne	r0, r2
 8060514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8060518:	bf1c      	itt	ne
 806051a:	460b      	movne	r3, r1
 806051c:	4602      	movne	r2, r0
 806051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8060522:	bf06      	itte	eq
 8060524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8060528:	ea91 0f03 	teqeq	r1, r3
 806052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8060530:	bd30      	pop	{r4, r5, pc}
 8060532:	bf00      	nop

08060534 <__aeabi_ui2d>:
 8060534:	f090 0f00 	teq	r0, #0
 8060538:	bf04      	itt	eq
 806053a:	2100      	moveq	r1, #0
 806053c:	4770      	bxeq	lr
 806053e:	b530      	push	{r4, r5, lr}
 8060540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8060544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8060548:	f04f 0500 	mov.w	r5, #0
 806054c:	f04f 0100 	mov.w	r1, #0
 8060550:	e750      	b.n	80603f4 <__adddf3+0x138>
 8060552:	bf00      	nop

08060554 <__aeabi_i2d>:
 8060554:	f090 0f00 	teq	r0, #0
 8060558:	bf04      	itt	eq
 806055a:	2100      	moveq	r1, #0
 806055c:	4770      	bxeq	lr
 806055e:	b530      	push	{r4, r5, lr}
 8060560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8060564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8060568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 806056c:	bf48      	it	mi
 806056e:	4240      	negmi	r0, r0
 8060570:	f04f 0100 	mov.w	r1, #0
 8060574:	e73e      	b.n	80603f4 <__adddf3+0x138>
 8060576:	bf00      	nop

08060578 <__aeabi_f2d>:
 8060578:	0042      	lsls	r2, r0, #1
 806057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 806057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8060582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8060586:	bf1f      	itttt	ne
 8060588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 806058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8060590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8060594:	4770      	bxne	lr
 8060596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 806059a:	bf08      	it	eq
 806059c:	4770      	bxeq	lr
 806059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80605a2:	bf04      	itt	eq
 80605a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80605a8:	4770      	bxeq	lr
 80605aa:	b530      	push	{r4, r5, lr}
 80605ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80605b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80605b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80605b8:	e71c      	b.n	80603f4 <__adddf3+0x138>
 80605ba:	bf00      	nop

080605bc <__aeabi_ul2d>:
 80605bc:	ea50 0201 	orrs.w	r2, r0, r1
 80605c0:	bf08      	it	eq
 80605c2:	4770      	bxeq	lr
 80605c4:	b530      	push	{r4, r5, lr}
 80605c6:	f04f 0500 	mov.w	r5, #0
 80605ca:	e00a      	b.n	80605e2 <__aeabi_l2d+0x16>

080605cc <__aeabi_l2d>:
 80605cc:	ea50 0201 	orrs.w	r2, r0, r1
 80605d0:	bf08      	it	eq
 80605d2:	4770      	bxeq	lr
 80605d4:	b530      	push	{r4, r5, lr}
 80605d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80605da:	d502      	bpl.n	80605e2 <__aeabi_l2d+0x16>
 80605dc:	4240      	negs	r0, r0
 80605de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80605e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80605e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80605ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80605ee:	f43f aed8 	beq.w	80603a2 <__adddf3+0xe6>
 80605f2:	f04f 0203 	mov.w	r2, #3
 80605f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80605fa:	bf18      	it	ne
 80605fc:	3203      	addne	r2, #3
 80605fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8060602:	bf18      	it	ne
 8060604:	3203      	addne	r2, #3
 8060606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 806060a:	f1c2 0320 	rsb	r3, r2, #32
 806060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8060612:	fa20 f002 	lsr.w	r0, r0, r2
 8060616:	fa01 fe03 	lsl.w	lr, r1, r3
 806061a:	ea40 000e 	orr.w	r0, r0, lr
 806061e:	fa21 f102 	lsr.w	r1, r1, r2
 8060622:	4414      	add	r4, r2
 8060624:	e6bd      	b.n	80603a2 <__adddf3+0xe6>
 8060626:	bf00      	nop

08060628 <__aeabi_dmul>:
 8060628:	b570      	push	{r4, r5, r6, lr}
 806062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 806062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8060632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8060636:	bf1d      	ittte	ne
 8060638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 806063c:	ea94 0f0c 	teqne	r4, ip
 8060640:	ea95 0f0c 	teqne	r5, ip
 8060644:	f000 f8de 	bleq	8060804 <__aeabi_dmul+0x1dc>
 8060648:	442c      	add	r4, r5
 806064a:	ea81 0603 	eor.w	r6, r1, r3
 806064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8060652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8060656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 806065a:	bf18      	it	ne
 806065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8060660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8060664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8060668:	d038      	beq.n	80606dc <__aeabi_dmul+0xb4>
 806066a:	fba0 ce02 	umull	ip, lr, r0, r2
 806066e:	f04f 0500 	mov.w	r5, #0
 8060672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8060676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 806067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 806067e:	f04f 0600 	mov.w	r6, #0
 8060682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8060686:	f09c 0f00 	teq	ip, #0
 806068a:	bf18      	it	ne
 806068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8060690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8060694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8060698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 806069c:	d204      	bcs.n	80606a8 <__aeabi_dmul+0x80>
 806069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80606a2:	416d      	adcs	r5, r5
 80606a4:	eb46 0606 	adc.w	r6, r6, r6
 80606a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80606ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80606b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80606b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80606b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80606bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80606c0:	bf88      	it	hi
 80606c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80606c6:	d81e      	bhi.n	8060706 <__aeabi_dmul+0xde>
 80606c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80606cc:	bf08      	it	eq
 80606ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80606d2:	f150 0000 	adcs.w	r0, r0, #0
 80606d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80606da:	bd70      	pop	{r4, r5, r6, pc}
 80606dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80606e0:	ea46 0101 	orr.w	r1, r6, r1
 80606e4:	ea40 0002 	orr.w	r0, r0, r2
 80606e8:	ea81 0103 	eor.w	r1, r1, r3
 80606ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80606f0:	bfc2      	ittt	gt
 80606f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80606f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80606fa:	bd70      	popgt	{r4, r5, r6, pc}
 80606fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8060700:	f04f 0e00 	mov.w	lr, #0
 8060704:	3c01      	subs	r4, #1
 8060706:	f300 80ab 	bgt.w	8060860 <__aeabi_dmul+0x238>
 806070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 806070e:	bfde      	ittt	le
 8060710:	2000      	movle	r0, #0
 8060712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8060716:	bd70      	pople	{r4, r5, r6, pc}
 8060718:	f1c4 0400 	rsb	r4, r4, #0
 806071c:	3c20      	subs	r4, #32
 806071e:	da35      	bge.n	806078c <__aeabi_dmul+0x164>
 8060720:	340c      	adds	r4, #12
 8060722:	dc1b      	bgt.n	806075c <__aeabi_dmul+0x134>
 8060724:	f104 0414 	add.w	r4, r4, #20
 8060728:	f1c4 0520 	rsb	r5, r4, #32
 806072c:	fa00 f305 	lsl.w	r3, r0, r5
 8060730:	fa20 f004 	lsr.w	r0, r0, r4
 8060734:	fa01 f205 	lsl.w	r2, r1, r5
 8060738:	ea40 0002 	orr.w	r0, r0, r2
 806073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8060740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8060744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8060748:	fa21 f604 	lsr.w	r6, r1, r4
 806074c:	eb42 0106 	adc.w	r1, r2, r6
 8060750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8060754:	bf08      	it	eq
 8060756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 806075a:	bd70      	pop	{r4, r5, r6, pc}
 806075c:	f1c4 040c 	rsb	r4, r4, #12
 8060760:	f1c4 0520 	rsb	r5, r4, #32
 8060764:	fa00 f304 	lsl.w	r3, r0, r4
 8060768:	fa20 f005 	lsr.w	r0, r0, r5
 806076c:	fa01 f204 	lsl.w	r2, r1, r4
 8060770:	ea40 0002 	orr.w	r0, r0, r2
 8060774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8060778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 806077c:	f141 0100 	adc.w	r1, r1, #0
 8060780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8060784:	bf08      	it	eq
 8060786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 806078a:	bd70      	pop	{r4, r5, r6, pc}
 806078c:	f1c4 0520 	rsb	r5, r4, #32
 8060790:	fa00 f205 	lsl.w	r2, r0, r5
 8060794:	ea4e 0e02 	orr.w	lr, lr, r2
 8060798:	fa20 f304 	lsr.w	r3, r0, r4
 806079c:	fa01 f205 	lsl.w	r2, r1, r5
 80607a0:	ea43 0302 	orr.w	r3, r3, r2
 80607a4:	fa21 f004 	lsr.w	r0, r1, r4
 80607a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80607ac:	fa21 f204 	lsr.w	r2, r1, r4
 80607b0:	ea20 0002 	bic.w	r0, r0, r2
 80607b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80607b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80607bc:	bf08      	it	eq
 80607be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80607c2:	bd70      	pop	{r4, r5, r6, pc}
 80607c4:	f094 0f00 	teq	r4, #0
 80607c8:	d10f      	bne.n	80607ea <__aeabi_dmul+0x1c2>
 80607ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80607ce:	0040      	lsls	r0, r0, #1
 80607d0:	eb41 0101 	adc.w	r1, r1, r1
 80607d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80607d8:	bf08      	it	eq
 80607da:	3c01      	subeq	r4, #1
 80607dc:	d0f7      	beq.n	80607ce <__aeabi_dmul+0x1a6>
 80607de:	ea41 0106 	orr.w	r1, r1, r6
 80607e2:	f095 0f00 	teq	r5, #0
 80607e6:	bf18      	it	ne
 80607e8:	4770      	bxne	lr
 80607ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80607ee:	0052      	lsls	r2, r2, #1
 80607f0:	eb43 0303 	adc.w	r3, r3, r3
 80607f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80607f8:	bf08      	it	eq
 80607fa:	3d01      	subeq	r5, #1
 80607fc:	d0f7      	beq.n	80607ee <__aeabi_dmul+0x1c6>
 80607fe:	ea43 0306 	orr.w	r3, r3, r6
 8060802:	4770      	bx	lr
 8060804:	ea94 0f0c 	teq	r4, ip
 8060808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 806080c:	bf18      	it	ne
 806080e:	ea95 0f0c 	teqne	r5, ip
 8060812:	d00c      	beq.n	806082e <__aeabi_dmul+0x206>
 8060814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8060818:	bf18      	it	ne
 806081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 806081e:	d1d1      	bne.n	80607c4 <__aeabi_dmul+0x19c>
 8060820:	ea81 0103 	eor.w	r1, r1, r3
 8060824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8060828:	f04f 0000 	mov.w	r0, #0
 806082c:	bd70      	pop	{r4, r5, r6, pc}
 806082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8060832:	bf06      	itte	eq
 8060834:	4610      	moveq	r0, r2
 8060836:	4619      	moveq	r1, r3
 8060838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 806083c:	d019      	beq.n	8060872 <__aeabi_dmul+0x24a>
 806083e:	ea94 0f0c 	teq	r4, ip
 8060842:	d102      	bne.n	806084a <__aeabi_dmul+0x222>
 8060844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8060848:	d113      	bne.n	8060872 <__aeabi_dmul+0x24a>
 806084a:	ea95 0f0c 	teq	r5, ip
 806084e:	d105      	bne.n	806085c <__aeabi_dmul+0x234>
 8060850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8060854:	bf1c      	itt	ne
 8060856:	4610      	movne	r0, r2
 8060858:	4619      	movne	r1, r3
 806085a:	d10a      	bne.n	8060872 <__aeabi_dmul+0x24a>
 806085c:	ea81 0103 	eor.w	r1, r1, r3
 8060860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8060864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8060868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 806086c:	f04f 0000 	mov.w	r0, #0
 8060870:	bd70      	pop	{r4, r5, r6, pc}
 8060872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8060876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 806087a:	bd70      	pop	{r4, r5, r6, pc}

0806087c <__aeabi_ddiv>:
 806087c:	b570      	push	{r4, r5, r6, lr}
 806087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8060882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8060886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 806088a:	bf1d      	ittte	ne
 806088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8060890:	ea94 0f0c 	teqne	r4, ip
 8060894:	ea95 0f0c 	teqne	r5, ip
 8060898:	f000 f8a7 	bleq	80609ea <__aeabi_ddiv+0x16e>
 806089c:	eba4 0405 	sub.w	r4, r4, r5
 80608a0:	ea81 0e03 	eor.w	lr, r1, r3
 80608a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80608a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80608ac:	f000 8088 	beq.w	80609c0 <__aeabi_ddiv+0x144>
 80608b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80608b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80608b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80608bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80608c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80608c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80608c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80608cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80608d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80608d4:	429d      	cmp	r5, r3
 80608d6:	bf08      	it	eq
 80608d8:	4296      	cmpeq	r6, r2
 80608da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80608de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80608e2:	d202      	bcs.n	80608ea <__aeabi_ddiv+0x6e>
 80608e4:	085b      	lsrs	r3, r3, #1
 80608e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80608ea:	1ab6      	subs	r6, r6, r2
 80608ec:	eb65 0503 	sbc.w	r5, r5, r3
 80608f0:	085b      	lsrs	r3, r3, #1
 80608f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80608f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80608fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80608fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8060902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8060906:	bf22      	ittt	cs
 8060908:	1ab6      	subcs	r6, r6, r2
 806090a:	4675      	movcs	r5, lr
 806090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8060910:	085b      	lsrs	r3, r3, #1
 8060912:	ea4f 0232 	mov.w	r2, r2, rrx
 8060916:	ebb6 0e02 	subs.w	lr, r6, r2
 806091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 806091e:	bf22      	ittt	cs
 8060920:	1ab6      	subcs	r6, r6, r2
 8060922:	4675      	movcs	r5, lr
 8060924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8060928:	085b      	lsrs	r3, r3, #1
 806092a:	ea4f 0232 	mov.w	r2, r2, rrx
 806092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8060932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8060936:	bf22      	ittt	cs
 8060938:	1ab6      	subcs	r6, r6, r2
 806093a:	4675      	movcs	r5, lr
 806093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8060940:	085b      	lsrs	r3, r3, #1
 8060942:	ea4f 0232 	mov.w	r2, r2, rrx
 8060946:	ebb6 0e02 	subs.w	lr, r6, r2
 806094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 806094e:	bf22      	ittt	cs
 8060950:	1ab6      	subcs	r6, r6, r2
 8060952:	4675      	movcs	r5, lr
 8060954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8060958:	ea55 0e06 	orrs.w	lr, r5, r6
 806095c:	d018      	beq.n	8060990 <__aeabi_ddiv+0x114>
 806095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8060962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8060966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 806096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 806096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8060972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8060976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 806097a:	d1c0      	bne.n	80608fe <__aeabi_ddiv+0x82>
 806097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8060980:	d10b      	bne.n	806099a <__aeabi_ddiv+0x11e>
 8060982:	ea41 0100 	orr.w	r1, r1, r0
 8060986:	f04f 0000 	mov.w	r0, #0
 806098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 806098e:	e7b6      	b.n	80608fe <__aeabi_ddiv+0x82>
 8060990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8060994:	bf04      	itt	eq
 8060996:	4301      	orreq	r1, r0
 8060998:	2000      	moveq	r0, #0
 806099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 806099e:	bf88      	it	hi
 80609a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80609a4:	f63f aeaf 	bhi.w	8060706 <__aeabi_dmul+0xde>
 80609a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80609ac:	bf04      	itt	eq
 80609ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80609b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80609b6:	f150 0000 	adcs.w	r0, r0, #0
 80609ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80609be:	bd70      	pop	{r4, r5, r6, pc}
 80609c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80609c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80609c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80609cc:	bfc2      	ittt	gt
 80609ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80609d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80609d6:	bd70      	popgt	{r4, r5, r6, pc}
 80609d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80609dc:	f04f 0e00 	mov.w	lr, #0
 80609e0:	3c01      	subs	r4, #1
 80609e2:	e690      	b.n	8060706 <__aeabi_dmul+0xde>
 80609e4:	ea45 0e06 	orr.w	lr, r5, r6
 80609e8:	e68d      	b.n	8060706 <__aeabi_dmul+0xde>
 80609ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80609ee:	ea94 0f0c 	teq	r4, ip
 80609f2:	bf08      	it	eq
 80609f4:	ea95 0f0c 	teqeq	r5, ip
 80609f8:	f43f af3b 	beq.w	8060872 <__aeabi_dmul+0x24a>
 80609fc:	ea94 0f0c 	teq	r4, ip
 8060a00:	d10a      	bne.n	8060a18 <__aeabi_ddiv+0x19c>
 8060a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8060a06:	f47f af34 	bne.w	8060872 <__aeabi_dmul+0x24a>
 8060a0a:	ea95 0f0c 	teq	r5, ip
 8060a0e:	f47f af25 	bne.w	806085c <__aeabi_dmul+0x234>
 8060a12:	4610      	mov	r0, r2
 8060a14:	4619      	mov	r1, r3
 8060a16:	e72c      	b.n	8060872 <__aeabi_dmul+0x24a>
 8060a18:	ea95 0f0c 	teq	r5, ip
 8060a1c:	d106      	bne.n	8060a2c <__aeabi_ddiv+0x1b0>
 8060a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8060a22:	f43f aefd 	beq.w	8060820 <__aeabi_dmul+0x1f8>
 8060a26:	4610      	mov	r0, r2
 8060a28:	4619      	mov	r1, r3
 8060a2a:	e722      	b.n	8060872 <__aeabi_dmul+0x24a>
 8060a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8060a30:	bf18      	it	ne
 8060a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8060a36:	f47f aec5 	bne.w	80607c4 <__aeabi_dmul+0x19c>
 8060a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8060a3e:	f47f af0d 	bne.w	806085c <__aeabi_dmul+0x234>
 8060a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8060a46:	f47f aeeb 	bne.w	8060820 <__aeabi_dmul+0x1f8>
 8060a4a:	e712      	b.n	8060872 <__aeabi_dmul+0x24a>

08060a4c <__gedf2>:
 8060a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8060a50:	e006      	b.n	8060a60 <__cmpdf2+0x4>
 8060a52:	bf00      	nop

08060a54 <__ledf2>:
 8060a54:	f04f 0c01 	mov.w	ip, #1
 8060a58:	e002      	b.n	8060a60 <__cmpdf2+0x4>
 8060a5a:	bf00      	nop

08060a5c <__cmpdf2>:
 8060a5c:	f04f 0c01 	mov.w	ip, #1
 8060a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8060a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8060a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8060a70:	bf18      	it	ne
 8060a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8060a76:	d01b      	beq.n	8060ab0 <__cmpdf2+0x54>
 8060a78:	b001      	add	sp, #4
 8060a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8060a7e:	bf0c      	ite	eq
 8060a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8060a84:	ea91 0f03 	teqne	r1, r3
 8060a88:	bf02      	ittt	eq
 8060a8a:	ea90 0f02 	teqeq	r0, r2
 8060a8e:	2000      	moveq	r0, #0
 8060a90:	4770      	bxeq	lr
 8060a92:	f110 0f00 	cmn.w	r0, #0
 8060a96:	ea91 0f03 	teq	r1, r3
 8060a9a:	bf58      	it	pl
 8060a9c:	4299      	cmppl	r1, r3
 8060a9e:	bf08      	it	eq
 8060aa0:	4290      	cmpeq	r0, r2
 8060aa2:	bf2c      	ite	cs
 8060aa4:	17d8      	asrcs	r0, r3, #31
 8060aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8060aaa:	f040 0001 	orr.w	r0, r0, #1
 8060aae:	4770      	bx	lr
 8060ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8060ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060ab8:	d102      	bne.n	8060ac0 <__cmpdf2+0x64>
 8060aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8060abe:	d107      	bne.n	8060ad0 <__cmpdf2+0x74>
 8060ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8060ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060ac8:	d1d6      	bne.n	8060a78 <__cmpdf2+0x1c>
 8060aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8060ace:	d0d3      	beq.n	8060a78 <__cmpdf2+0x1c>
 8060ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8060ad4:	4770      	bx	lr
 8060ad6:	bf00      	nop

08060ad8 <__aeabi_cdrcmple>:
 8060ad8:	4684      	mov	ip, r0
 8060ada:	4610      	mov	r0, r2
 8060adc:	4662      	mov	r2, ip
 8060ade:	468c      	mov	ip, r1
 8060ae0:	4619      	mov	r1, r3
 8060ae2:	4663      	mov	r3, ip
 8060ae4:	e000      	b.n	8060ae8 <__aeabi_cdcmpeq>
 8060ae6:	bf00      	nop

08060ae8 <__aeabi_cdcmpeq>:
 8060ae8:	b501      	push	{r0, lr}
 8060aea:	f7ff ffb7 	bl	8060a5c <__cmpdf2>
 8060aee:	2800      	cmp	r0, #0
 8060af0:	bf48      	it	mi
 8060af2:	f110 0f00 	cmnmi.w	r0, #0
 8060af6:	bd01      	pop	{r0, pc}

08060af8 <__aeabi_dcmpeq>:
 8060af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060afc:	f7ff fff4 	bl	8060ae8 <__aeabi_cdcmpeq>
 8060b00:	bf0c      	ite	eq
 8060b02:	2001      	moveq	r0, #1
 8060b04:	2000      	movne	r0, #0
 8060b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b0a:	bf00      	nop

08060b0c <__aeabi_dcmplt>:
 8060b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b10:	f7ff ffea 	bl	8060ae8 <__aeabi_cdcmpeq>
 8060b14:	bf34      	ite	cc
 8060b16:	2001      	movcc	r0, #1
 8060b18:	2000      	movcs	r0, #0
 8060b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b1e:	bf00      	nop

08060b20 <__aeabi_dcmple>:
 8060b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b24:	f7ff ffe0 	bl	8060ae8 <__aeabi_cdcmpeq>
 8060b28:	bf94      	ite	ls
 8060b2a:	2001      	movls	r0, #1
 8060b2c:	2000      	movhi	r0, #0
 8060b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b32:	bf00      	nop

08060b34 <__aeabi_dcmpge>:
 8060b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b38:	f7ff ffce 	bl	8060ad8 <__aeabi_cdrcmple>
 8060b3c:	bf94      	ite	ls
 8060b3e:	2001      	movls	r0, #1
 8060b40:	2000      	movhi	r0, #0
 8060b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b46:	bf00      	nop

08060b48 <__aeabi_dcmpgt>:
 8060b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b4c:	f7ff ffc4 	bl	8060ad8 <__aeabi_cdrcmple>
 8060b50:	bf34      	ite	cc
 8060b52:	2001      	movcc	r0, #1
 8060b54:	2000      	movcs	r0, #0
 8060b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b5a:	bf00      	nop

08060b5c <__aeabi_dcmpun>:
 8060b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8060b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060b64:	d102      	bne.n	8060b6c <__aeabi_dcmpun+0x10>
 8060b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8060b6a:	d10a      	bne.n	8060b82 <__aeabi_dcmpun+0x26>
 8060b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8060b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060b74:	d102      	bne.n	8060b7c <__aeabi_dcmpun+0x20>
 8060b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8060b7a:	d102      	bne.n	8060b82 <__aeabi_dcmpun+0x26>
 8060b7c:	f04f 0000 	mov.w	r0, #0
 8060b80:	4770      	bx	lr
 8060b82:	f04f 0001 	mov.w	r0, #1
 8060b86:	4770      	bx	lr

08060b88 <__aeabi_d2iz>:
 8060b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8060b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8060b90:	d215      	bcs.n	8060bbe <__aeabi_d2iz+0x36>
 8060b92:	d511      	bpl.n	8060bb8 <__aeabi_d2iz+0x30>
 8060b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8060b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8060b9c:	d912      	bls.n	8060bc4 <__aeabi_d2iz+0x3c>
 8060b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8060ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8060ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8060baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8060bae:	fa23 f002 	lsr.w	r0, r3, r2
 8060bb2:	bf18      	it	ne
 8060bb4:	4240      	negne	r0, r0
 8060bb6:	4770      	bx	lr
 8060bb8:	f04f 0000 	mov.w	r0, #0
 8060bbc:	4770      	bx	lr
 8060bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8060bc2:	d105      	bne.n	8060bd0 <__aeabi_d2iz+0x48>
 8060bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8060bc8:	bf08      	it	eq
 8060bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8060bce:	4770      	bx	lr
 8060bd0:	f04f 0000 	mov.w	r0, #0
 8060bd4:	4770      	bx	lr
 8060bd6:	bf00      	nop

08060bd8 <__aeabi_d2uiz>:
 8060bd8:	004a      	lsls	r2, r1, #1
 8060bda:	d211      	bcs.n	8060c00 <__aeabi_d2uiz+0x28>
 8060bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8060be0:	d211      	bcs.n	8060c06 <__aeabi_d2uiz+0x2e>
 8060be2:	d50d      	bpl.n	8060c00 <__aeabi_d2uiz+0x28>
 8060be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8060be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8060bec:	d40e      	bmi.n	8060c0c <__aeabi_d2uiz+0x34>
 8060bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8060bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8060bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8060bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8060bfe:	4770      	bx	lr
 8060c00:	f04f 0000 	mov.w	r0, #0
 8060c04:	4770      	bx	lr
 8060c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8060c0a:	d102      	bne.n	8060c12 <__aeabi_d2uiz+0x3a>
 8060c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8060c10:	4770      	bx	lr
 8060c12:	f04f 0000 	mov.w	r0, #0
 8060c16:	4770      	bx	lr

08060c18 <__aeabi_d2f>:
 8060c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8060c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8060c20:	bf24      	itt	cs
 8060c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8060c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8060c2a:	d90d      	bls.n	8060c48 <__aeabi_d2f+0x30>
 8060c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8060c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8060c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8060c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8060c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8060c40:	bf08      	it	eq
 8060c42:	f020 0001 	biceq.w	r0, r0, #1
 8060c46:	4770      	bx	lr
 8060c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8060c4c:	d121      	bne.n	8060c92 <__aeabi_d2f+0x7a>
 8060c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8060c52:	bfbc      	itt	lt
 8060c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8060c58:	4770      	bxlt	lr
 8060c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8060c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8060c62:	f1c2 0218 	rsb	r2, r2, #24
 8060c66:	f1c2 0c20 	rsb	ip, r2, #32
 8060c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8060c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8060c72:	bf18      	it	ne
 8060c74:	f040 0001 	orrne.w	r0, r0, #1
 8060c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8060c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8060c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8060c84:	ea40 000c 	orr.w	r0, r0, ip
 8060c88:	fa23 f302 	lsr.w	r3, r3, r2
 8060c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8060c90:	e7cc      	b.n	8060c2c <__aeabi_d2f+0x14>
 8060c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8060c96:	d107      	bne.n	8060ca8 <__aeabi_d2f+0x90>
 8060c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8060c9c:	bf1e      	ittt	ne
 8060c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8060ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8060ca6:	4770      	bxne	lr
 8060ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8060cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8060cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8060cb4:	4770      	bx	lr
 8060cb6:	bf00      	nop

08060cb8 <__aeabi_ldivmod>:
 8060cb8:	b97b      	cbnz	r3, 8060cda <__aeabi_ldivmod+0x22>
 8060cba:	b972      	cbnz	r2, 8060cda <__aeabi_ldivmod+0x22>
 8060cbc:	2900      	cmp	r1, #0
 8060cbe:	bfbe      	ittt	lt
 8060cc0:	2000      	movlt	r0, #0
 8060cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8060cc6:	e006      	blt.n	8060cd6 <__aeabi_ldivmod+0x1e>
 8060cc8:	bf08      	it	eq
 8060cca:	2800      	cmpeq	r0, #0
 8060ccc:	bf1c      	itt	ne
 8060cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8060cd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8060cd6:	f000 b9ef 	b.w	80610b8 <__aeabi_idiv0>
 8060cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8060cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8060ce2:	2900      	cmp	r1, #0
 8060ce4:	db09      	blt.n	8060cfa <__aeabi_ldivmod+0x42>
 8060ce6:	2b00      	cmp	r3, #0
 8060ce8:	db1a      	blt.n	8060d20 <__aeabi_ldivmod+0x68>
 8060cea:	f000 f883 	bl	8060df4 <__udivmoddi4>
 8060cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060cf6:	b004      	add	sp, #16
 8060cf8:	4770      	bx	lr
 8060cfa:	4240      	negs	r0, r0
 8060cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060d00:	2b00      	cmp	r3, #0
 8060d02:	db1b      	blt.n	8060d3c <__aeabi_ldivmod+0x84>
 8060d04:	f000 f876 	bl	8060df4 <__udivmoddi4>
 8060d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d10:	b004      	add	sp, #16
 8060d12:	4240      	negs	r0, r0
 8060d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060d18:	4252      	negs	r2, r2
 8060d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d1e:	4770      	bx	lr
 8060d20:	4252      	negs	r2, r2
 8060d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d26:	f000 f865 	bl	8060df4 <__udivmoddi4>
 8060d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d32:	b004      	add	sp, #16
 8060d34:	4240      	negs	r0, r0
 8060d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060d3a:	4770      	bx	lr
 8060d3c:	4252      	negs	r2, r2
 8060d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d42:	f000 f857 	bl	8060df4 <__udivmoddi4>
 8060d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d4e:	b004      	add	sp, #16
 8060d50:	4252      	negs	r2, r2
 8060d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d56:	4770      	bx	lr

08060d58 <__aeabi_uldivmod>:
 8060d58:	b953      	cbnz	r3, 8060d70 <__aeabi_uldivmod+0x18>
 8060d5a:	b94a      	cbnz	r2, 8060d70 <__aeabi_uldivmod+0x18>
 8060d5c:	2900      	cmp	r1, #0
 8060d5e:	bf08      	it	eq
 8060d60:	2800      	cmpeq	r0, #0
 8060d62:	bf1c      	itt	ne
 8060d64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8060d68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8060d6c:	f000 b9a4 	b.w	80610b8 <__aeabi_idiv0>
 8060d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8060d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8060d78:	f000 f83c 	bl	8060df4 <__udivmoddi4>
 8060d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d84:	b004      	add	sp, #16
 8060d86:	4770      	bx	lr

08060d88 <__aeabi_d2lz>:
 8060d88:	b538      	push	{r3, r4, r5, lr}
 8060d8a:	2200      	movs	r2, #0
 8060d8c:	2300      	movs	r3, #0
 8060d8e:	4604      	mov	r4, r0
 8060d90:	460d      	mov	r5, r1
 8060d92:	f7ff febb 	bl	8060b0c <__aeabi_dcmplt>
 8060d96:	b928      	cbnz	r0, 8060da4 <__aeabi_d2lz+0x1c>
 8060d98:	4620      	mov	r0, r4
 8060d9a:	4629      	mov	r1, r5
 8060d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8060da0:	f000 b80a 	b.w	8060db8 <__aeabi_d2ulz>
 8060da4:	4620      	mov	r0, r4
 8060da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8060daa:	f000 f805 	bl	8060db8 <__aeabi_d2ulz>
 8060dae:	4240      	negs	r0, r0
 8060db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060db4:	bd38      	pop	{r3, r4, r5, pc}
 8060db6:	bf00      	nop

08060db8 <__aeabi_d2ulz>:
 8060db8:	b5d0      	push	{r4, r6, r7, lr}
 8060dba:	4b0c      	ldr	r3, [pc, #48]	; (8060dec <__aeabi_d2ulz+0x34>)
 8060dbc:	2200      	movs	r2, #0
 8060dbe:	4606      	mov	r6, r0
 8060dc0:	460f      	mov	r7, r1
 8060dc2:	f7ff fc31 	bl	8060628 <__aeabi_dmul>
 8060dc6:	f7ff ff07 	bl	8060bd8 <__aeabi_d2uiz>
 8060dca:	4604      	mov	r4, r0
 8060dcc:	f7ff fbb2 	bl	8060534 <__aeabi_ui2d>
 8060dd0:	4b07      	ldr	r3, [pc, #28]	; (8060df0 <__aeabi_d2ulz+0x38>)
 8060dd2:	2200      	movs	r2, #0
 8060dd4:	f7ff fc28 	bl	8060628 <__aeabi_dmul>
 8060dd8:	4602      	mov	r2, r0
 8060dda:	460b      	mov	r3, r1
 8060ddc:	4630      	mov	r0, r6
 8060dde:	4639      	mov	r1, r7
 8060de0:	f7ff fa6a 	bl	80602b8 <__aeabi_dsub>
 8060de4:	f7ff fef8 	bl	8060bd8 <__aeabi_d2uiz>
 8060de8:	4621      	mov	r1, r4
 8060dea:	bdd0      	pop	{r4, r6, r7, pc}
 8060dec:	3df00000 	.word	0x3df00000
 8060df0:	41f00000 	.word	0x41f00000

08060df4 <__udivmoddi4>:
 8060df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8060df8:	9d08      	ldr	r5, [sp, #32]
 8060dfa:	4604      	mov	r4, r0
 8060dfc:	468c      	mov	ip, r1
 8060dfe:	2b00      	cmp	r3, #0
 8060e00:	f040 8083 	bne.w	8060f0a <__udivmoddi4+0x116>
 8060e04:	428a      	cmp	r2, r1
 8060e06:	4617      	mov	r7, r2
 8060e08:	d947      	bls.n	8060e9a <__udivmoddi4+0xa6>
 8060e0a:	fab2 f282 	clz	r2, r2
 8060e0e:	b142      	cbz	r2, 8060e22 <__udivmoddi4+0x2e>
 8060e10:	f1c2 0020 	rsb	r0, r2, #32
 8060e14:	fa24 f000 	lsr.w	r0, r4, r0
 8060e18:	4091      	lsls	r1, r2
 8060e1a:	4097      	lsls	r7, r2
 8060e1c:	ea40 0c01 	orr.w	ip, r0, r1
 8060e20:	4094      	lsls	r4, r2
 8060e22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8060e26:	0c23      	lsrs	r3, r4, #16
 8060e28:	fbbc f6f8 	udiv	r6, ip, r8
 8060e2c:	fa1f fe87 	uxth.w	lr, r7
 8060e30:	fb08 c116 	mls	r1, r8, r6, ip
 8060e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060e38:	fb06 f10e 	mul.w	r1, r6, lr
 8060e3c:	4299      	cmp	r1, r3
 8060e3e:	d909      	bls.n	8060e54 <__udivmoddi4+0x60>
 8060e40:	18fb      	adds	r3, r7, r3
 8060e42:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8060e46:	f080 8119 	bcs.w	806107c <__udivmoddi4+0x288>
 8060e4a:	4299      	cmp	r1, r3
 8060e4c:	f240 8116 	bls.w	806107c <__udivmoddi4+0x288>
 8060e50:	3e02      	subs	r6, #2
 8060e52:	443b      	add	r3, r7
 8060e54:	1a5b      	subs	r3, r3, r1
 8060e56:	b2a4      	uxth	r4, r4
 8060e58:	fbb3 f0f8 	udiv	r0, r3, r8
 8060e5c:	fb08 3310 	mls	r3, r8, r0, r3
 8060e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8060e64:	fb00 fe0e 	mul.w	lr, r0, lr
 8060e68:	45a6      	cmp	lr, r4
 8060e6a:	d909      	bls.n	8060e80 <__udivmoddi4+0x8c>
 8060e6c:	193c      	adds	r4, r7, r4
 8060e6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8060e72:	f080 8105 	bcs.w	8061080 <__udivmoddi4+0x28c>
 8060e76:	45a6      	cmp	lr, r4
 8060e78:	f240 8102 	bls.w	8061080 <__udivmoddi4+0x28c>
 8060e7c:	3802      	subs	r0, #2
 8060e7e:	443c      	add	r4, r7
 8060e80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8060e84:	eba4 040e 	sub.w	r4, r4, lr
 8060e88:	2600      	movs	r6, #0
 8060e8a:	b11d      	cbz	r5, 8060e94 <__udivmoddi4+0xa0>
 8060e8c:	40d4      	lsrs	r4, r2
 8060e8e:	2300      	movs	r3, #0
 8060e90:	e9c5 4300 	strd	r4, r3, [r5]
 8060e94:	4631      	mov	r1, r6
 8060e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060e9a:	b902      	cbnz	r2, 8060e9e <__udivmoddi4+0xaa>
 8060e9c:	deff      	udf	#255	; 0xff
 8060e9e:	fab2 f282 	clz	r2, r2
 8060ea2:	2a00      	cmp	r2, #0
 8060ea4:	d150      	bne.n	8060f48 <__udivmoddi4+0x154>
 8060ea6:	1bcb      	subs	r3, r1, r7
 8060ea8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060eac:	fa1f f887 	uxth.w	r8, r7
 8060eb0:	2601      	movs	r6, #1
 8060eb2:	fbb3 fcfe 	udiv	ip, r3, lr
 8060eb6:	0c21      	lsrs	r1, r4, #16
 8060eb8:	fb0e 331c 	mls	r3, lr, ip, r3
 8060ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8060ec0:	fb08 f30c 	mul.w	r3, r8, ip
 8060ec4:	428b      	cmp	r3, r1
 8060ec6:	d907      	bls.n	8060ed8 <__udivmoddi4+0xe4>
 8060ec8:	1879      	adds	r1, r7, r1
 8060eca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8060ece:	d202      	bcs.n	8060ed6 <__udivmoddi4+0xe2>
 8060ed0:	428b      	cmp	r3, r1
 8060ed2:	f200 80e9 	bhi.w	80610a8 <__udivmoddi4+0x2b4>
 8060ed6:	4684      	mov	ip, r0
 8060ed8:	1ac9      	subs	r1, r1, r3
 8060eda:	b2a3      	uxth	r3, r4
 8060edc:	fbb1 f0fe 	udiv	r0, r1, lr
 8060ee0:	fb0e 1110 	mls	r1, lr, r0, r1
 8060ee4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8060ee8:	fb08 f800 	mul.w	r8, r8, r0
 8060eec:	45a0      	cmp	r8, r4
 8060eee:	d907      	bls.n	8060f00 <__udivmoddi4+0x10c>
 8060ef0:	193c      	adds	r4, r7, r4
 8060ef2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8060ef6:	d202      	bcs.n	8060efe <__udivmoddi4+0x10a>
 8060ef8:	45a0      	cmp	r8, r4
 8060efa:	f200 80d9 	bhi.w	80610b0 <__udivmoddi4+0x2bc>
 8060efe:	4618      	mov	r0, r3
 8060f00:	eba4 0408 	sub.w	r4, r4, r8
 8060f04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8060f08:	e7bf      	b.n	8060e8a <__udivmoddi4+0x96>
 8060f0a:	428b      	cmp	r3, r1
 8060f0c:	d909      	bls.n	8060f22 <__udivmoddi4+0x12e>
 8060f0e:	2d00      	cmp	r5, #0
 8060f10:	f000 80b1 	beq.w	8061076 <__udivmoddi4+0x282>
 8060f14:	2600      	movs	r6, #0
 8060f16:	e9c5 0100 	strd	r0, r1, [r5]
 8060f1a:	4630      	mov	r0, r6
 8060f1c:	4631      	mov	r1, r6
 8060f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060f22:	fab3 f683 	clz	r6, r3
 8060f26:	2e00      	cmp	r6, #0
 8060f28:	d14a      	bne.n	8060fc0 <__udivmoddi4+0x1cc>
 8060f2a:	428b      	cmp	r3, r1
 8060f2c:	d302      	bcc.n	8060f34 <__udivmoddi4+0x140>
 8060f2e:	4282      	cmp	r2, r0
 8060f30:	f200 80b8 	bhi.w	80610a4 <__udivmoddi4+0x2b0>
 8060f34:	1a84      	subs	r4, r0, r2
 8060f36:	eb61 0103 	sbc.w	r1, r1, r3
 8060f3a:	2001      	movs	r0, #1
 8060f3c:	468c      	mov	ip, r1
 8060f3e:	2d00      	cmp	r5, #0
 8060f40:	d0a8      	beq.n	8060e94 <__udivmoddi4+0xa0>
 8060f42:	e9c5 4c00 	strd	r4, ip, [r5]
 8060f46:	e7a5      	b.n	8060e94 <__udivmoddi4+0xa0>
 8060f48:	f1c2 0320 	rsb	r3, r2, #32
 8060f4c:	fa20 f603 	lsr.w	r6, r0, r3
 8060f50:	4097      	lsls	r7, r2
 8060f52:	fa01 f002 	lsl.w	r0, r1, r2
 8060f56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060f5a:	40d9      	lsrs	r1, r3
 8060f5c:	4330      	orrs	r0, r6
 8060f5e:	0c03      	lsrs	r3, r0, #16
 8060f60:	fbb1 f6fe 	udiv	r6, r1, lr
 8060f64:	fa1f f887 	uxth.w	r8, r7
 8060f68:	fb0e 1116 	mls	r1, lr, r6, r1
 8060f6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060f70:	fb06 f108 	mul.w	r1, r6, r8
 8060f74:	4299      	cmp	r1, r3
 8060f76:	fa04 f402 	lsl.w	r4, r4, r2
 8060f7a:	d909      	bls.n	8060f90 <__udivmoddi4+0x19c>
 8060f7c:	18fb      	adds	r3, r7, r3
 8060f7e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8060f82:	f080 808d 	bcs.w	80610a0 <__udivmoddi4+0x2ac>
 8060f86:	4299      	cmp	r1, r3
 8060f88:	f240 808a 	bls.w	80610a0 <__udivmoddi4+0x2ac>
 8060f8c:	3e02      	subs	r6, #2
 8060f8e:	443b      	add	r3, r7
 8060f90:	1a5b      	subs	r3, r3, r1
 8060f92:	b281      	uxth	r1, r0
 8060f94:	fbb3 f0fe 	udiv	r0, r3, lr
 8060f98:	fb0e 3310 	mls	r3, lr, r0, r3
 8060f9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8060fa0:	fb00 f308 	mul.w	r3, r0, r8
 8060fa4:	428b      	cmp	r3, r1
 8060fa6:	d907      	bls.n	8060fb8 <__udivmoddi4+0x1c4>
 8060fa8:	1879      	adds	r1, r7, r1
 8060faa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8060fae:	d273      	bcs.n	8061098 <__udivmoddi4+0x2a4>
 8060fb0:	428b      	cmp	r3, r1
 8060fb2:	d971      	bls.n	8061098 <__udivmoddi4+0x2a4>
 8060fb4:	3802      	subs	r0, #2
 8060fb6:	4439      	add	r1, r7
 8060fb8:	1acb      	subs	r3, r1, r3
 8060fba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8060fbe:	e778      	b.n	8060eb2 <__udivmoddi4+0xbe>
 8060fc0:	f1c6 0c20 	rsb	ip, r6, #32
 8060fc4:	fa03 f406 	lsl.w	r4, r3, r6
 8060fc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8060fcc:	431c      	orrs	r4, r3
 8060fce:	fa20 f70c 	lsr.w	r7, r0, ip
 8060fd2:	fa01 f306 	lsl.w	r3, r1, r6
 8060fd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8060fda:	fa21 f10c 	lsr.w	r1, r1, ip
 8060fde:	431f      	orrs	r7, r3
 8060fe0:	0c3b      	lsrs	r3, r7, #16
 8060fe2:	fbb1 f9fe 	udiv	r9, r1, lr
 8060fe6:	fa1f f884 	uxth.w	r8, r4
 8060fea:	fb0e 1119 	mls	r1, lr, r9, r1
 8060fee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8060ff2:	fb09 fa08 	mul.w	sl, r9, r8
 8060ff6:	458a      	cmp	sl, r1
 8060ff8:	fa02 f206 	lsl.w	r2, r2, r6
 8060ffc:	fa00 f306 	lsl.w	r3, r0, r6
 8061000:	d908      	bls.n	8061014 <__udivmoddi4+0x220>
 8061002:	1861      	adds	r1, r4, r1
 8061004:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8061008:	d248      	bcs.n	806109c <__udivmoddi4+0x2a8>
 806100a:	458a      	cmp	sl, r1
 806100c:	d946      	bls.n	806109c <__udivmoddi4+0x2a8>
 806100e:	f1a9 0902 	sub.w	r9, r9, #2
 8061012:	4421      	add	r1, r4
 8061014:	eba1 010a 	sub.w	r1, r1, sl
 8061018:	b2bf      	uxth	r7, r7
 806101a:	fbb1 f0fe 	udiv	r0, r1, lr
 806101e:	fb0e 1110 	mls	r1, lr, r0, r1
 8061022:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8061026:	fb00 f808 	mul.w	r8, r0, r8
 806102a:	45b8      	cmp	r8, r7
 806102c:	d907      	bls.n	806103e <__udivmoddi4+0x24a>
 806102e:	19e7      	adds	r7, r4, r7
 8061030:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8061034:	d22e      	bcs.n	8061094 <__udivmoddi4+0x2a0>
 8061036:	45b8      	cmp	r8, r7
 8061038:	d92c      	bls.n	8061094 <__udivmoddi4+0x2a0>
 806103a:	3802      	subs	r0, #2
 806103c:	4427      	add	r7, r4
 806103e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8061042:	eba7 0708 	sub.w	r7, r7, r8
 8061046:	fba0 8902 	umull	r8, r9, r0, r2
 806104a:	454f      	cmp	r7, r9
 806104c:	46c6      	mov	lr, r8
 806104e:	4649      	mov	r1, r9
 8061050:	d31a      	bcc.n	8061088 <__udivmoddi4+0x294>
 8061052:	d017      	beq.n	8061084 <__udivmoddi4+0x290>
 8061054:	b15d      	cbz	r5, 806106e <__udivmoddi4+0x27a>
 8061056:	ebb3 020e 	subs.w	r2, r3, lr
 806105a:	eb67 0701 	sbc.w	r7, r7, r1
 806105e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8061062:	40f2      	lsrs	r2, r6
 8061064:	ea4c 0202 	orr.w	r2, ip, r2
 8061068:	40f7      	lsrs	r7, r6
 806106a:	e9c5 2700 	strd	r2, r7, [r5]
 806106e:	2600      	movs	r6, #0
 8061070:	4631      	mov	r1, r6
 8061072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8061076:	462e      	mov	r6, r5
 8061078:	4628      	mov	r0, r5
 806107a:	e70b      	b.n	8060e94 <__udivmoddi4+0xa0>
 806107c:	4606      	mov	r6, r0
 806107e:	e6e9      	b.n	8060e54 <__udivmoddi4+0x60>
 8061080:	4618      	mov	r0, r3
 8061082:	e6fd      	b.n	8060e80 <__udivmoddi4+0x8c>
 8061084:	4543      	cmp	r3, r8
 8061086:	d2e5      	bcs.n	8061054 <__udivmoddi4+0x260>
 8061088:	ebb8 0e02 	subs.w	lr, r8, r2
 806108c:	eb69 0104 	sbc.w	r1, r9, r4
 8061090:	3801      	subs	r0, #1
 8061092:	e7df      	b.n	8061054 <__udivmoddi4+0x260>
 8061094:	4608      	mov	r0, r1
 8061096:	e7d2      	b.n	806103e <__udivmoddi4+0x24a>
 8061098:	4660      	mov	r0, ip
 806109a:	e78d      	b.n	8060fb8 <__udivmoddi4+0x1c4>
 806109c:	4681      	mov	r9, r0
 806109e:	e7b9      	b.n	8061014 <__udivmoddi4+0x220>
 80610a0:	4666      	mov	r6, ip
 80610a2:	e775      	b.n	8060f90 <__udivmoddi4+0x19c>
 80610a4:	4630      	mov	r0, r6
 80610a6:	e74a      	b.n	8060f3e <__udivmoddi4+0x14a>
 80610a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80610ac:	4439      	add	r1, r7
 80610ae:	e713      	b.n	8060ed8 <__udivmoddi4+0xe4>
 80610b0:	3802      	subs	r0, #2
 80610b2:	443c      	add	r4, r7
 80610b4:	e724      	b.n	8060f00 <__udivmoddi4+0x10c>
 80610b6:	bf00      	nop

080610b8 <__aeabi_idiv0>:
 80610b8:	4770      	bx	lr
 80610ba:	bf00      	nop

080610bc <GPS_read>:

uint8_t rx_data = 0;
uint8_t rx_buffer[GPSBUFSIZE];
uint8_t rx_index = 0;

int GPS_read() {
 80610bc:	b580      	push	{r7, lr}
 80610be:	b082      	sub	sp, #8
 80610c0:	af00      	add	r7, sp, #0
	int statusCode = 0;
 80610c2:	2300      	movs	r3, #0
 80610c4:	607b      	str	r3, [r7, #4]

	while (HAL_UART_Receive(GPS_USART, &rx_data, 1, HAL_MAX_DELAY) &&
 80610c6:	e00a      	b.n	80610de <GPS_read+0x22>
			rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
		rx_buffer[rx_index++] = rx_data;
 80610c8:	4b19      	ldr	r3, [pc, #100]	; (8061130 <GPS_read+0x74>)
 80610ca:	781b      	ldrb	r3, [r3, #0]
 80610cc:	1c5a      	adds	r2, r3, #1
 80610ce:	b2d1      	uxtb	r1, r2
 80610d0:	4a17      	ldr	r2, [pc, #92]	; (8061130 <GPS_read+0x74>)
 80610d2:	7011      	strb	r1, [r2, #0]
 80610d4:	461a      	mov	r2, r3
 80610d6:	4b17      	ldr	r3, [pc, #92]	; (8061134 <GPS_read+0x78>)
 80610d8:	7819      	ldrb	r1, [r3, #0]
 80610da:	4b17      	ldr	r3, [pc, #92]	; (8061138 <GPS_read+0x7c>)
 80610dc:	5499      	strb	r1, [r3, r2]
	while (HAL_UART_Receive(GPS_USART, &rx_data, 1, HAL_MAX_DELAY) &&
 80610de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80610e2:	2201      	movs	r2, #1
 80610e4:	4913      	ldr	r1, [pc, #76]	; (8061134 <GPS_read+0x78>)
 80610e6:	4815      	ldr	r0, [pc, #84]	; (806113c <GPS_read+0x80>)
 80610e8:	f008 f890 	bl	806920c <HAL_UART_Receive>
 80610ec:	4603      	mov	r3, r0
 80610ee:	2b00      	cmp	r3, #0
 80610f0:	d008      	beq.n	8061104 <GPS_read+0x48>
			rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80610f2:	4b10      	ldr	r3, [pc, #64]	; (8061134 <GPS_read+0x78>)
 80610f4:	781b      	ldrb	r3, [r3, #0]
	while (HAL_UART_Receive(GPS_USART, &rx_data, 1, HAL_MAX_DELAY) &&
 80610f6:	2b0a      	cmp	r3, #10
 80610f8:	d004      	beq.n	8061104 <GPS_read+0x48>
			rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80610fa:	4b0d      	ldr	r3, [pc, #52]	; (8061130 <GPS_read+0x74>)
 80610fc:	781b      	ldrb	r3, [r3, #0]
 80610fe:	b25b      	sxtb	r3, r3
 8061100:	2b00      	cmp	r3, #0
 8061102:	dae1      	bge.n	80610c8 <GPS_read+0xc>
	}

	if (!GPS_validate((char*) rx_buffer)) {
 8061104:	480c      	ldr	r0, [pc, #48]	; (8061138 <GPS_read+0x7c>)
 8061106:	f000 f81b 	bl	8061140 <GPS_validate>
 806110a:	4603      	mov	r3, r0
 806110c:	2b00      	cmp	r3, #0
 806110e:	d101      	bne.n	8061114 <GPS_read+0x58>
		statusCode = 1;
 8061110:	2301      	movs	r3, #1
 8061112:	607b      	str	r3, [r7, #4]
	}

	rx_index = 0;
 8061114:	4b06      	ldr	r3, [pc, #24]	; (8061130 <GPS_read+0x74>)
 8061116:	2200      	movs	r2, #0
 8061118:	701a      	strb	r2, [r3, #0]
	memset(rx_buffer, 0, sizeof(rx_buffer));
 806111a:	2280      	movs	r2, #128	; 0x80
 806111c:	2100      	movs	r1, #0
 806111e:	4806      	ldr	r0, [pc, #24]	; (8061138 <GPS_read+0x7c>)
 8061120:	f010 fedd 	bl	8071ede <memset>

	return statusCode;
 8061124:	687b      	ldr	r3, [r7, #4]
}
 8061126:	4618      	mov	r0, r3
 8061128:	3708      	adds	r7, #8
 806112a:	46bd      	mov	sp, r7
 806112c:	bd80      	pop	{r7, pc}
 806112e:	bf00      	nop
 8061130:	20000219 	.word	0x20000219
 8061134:	20000218 	.word	0x20000218
 8061138:	20004e94 	.word	0x20004e94
 806113c:	200057c4 	.word	0x200057c4

08061140 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8061140:	b580      	push	{r7, lr}
 8061142:	b086      	sub	sp, #24
 8061144:	af00      	add	r7, sp, #0
 8061146:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8061148:	2300      	movs	r3, #0
 806114a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 806114c:	2300      	movs	r3, #0
 806114e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8061150:	697b      	ldr	r3, [r7, #20]
 8061152:	687a      	ldr	r2, [r7, #4]
 8061154:	4413      	add	r3, r2
 8061156:	781b      	ldrb	r3, [r3, #0]
 8061158:	2b24      	cmp	r3, #36	; 0x24
 806115a:	d103      	bne.n	8061164 <GPS_validate+0x24>
        i++;
 806115c:	697b      	ldr	r3, [r7, #20]
 806115e:	3301      	adds	r3, #1
 8061160:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8061162:	e00c      	b.n	806117e <GPS_validate+0x3e>
        return 0;
 8061164:	2300      	movs	r3, #0
 8061166:	e047      	b.n	80611f8 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8061168:	697b      	ldr	r3, [r7, #20]
 806116a:	687a      	ldr	r2, [r7, #4]
 806116c:	4413      	add	r3, r2
 806116e:	781b      	ldrb	r3, [r3, #0]
 8061170:	461a      	mov	r2, r3
 8061172:	693b      	ldr	r3, [r7, #16]
 8061174:	4053      	eors	r3, r2
 8061176:	613b      	str	r3, [r7, #16]
        i++;
 8061178:	697b      	ldr	r3, [r7, #20]
 806117a:	3301      	adds	r3, #1
 806117c:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 806117e:	697b      	ldr	r3, [r7, #20]
 8061180:	687a      	ldr	r2, [r7, #4]
 8061182:	4413      	add	r3, r2
 8061184:	781b      	ldrb	r3, [r3, #0]
 8061186:	2b00      	cmp	r3, #0
 8061188:	d008      	beq.n	806119c <GPS_validate+0x5c>
 806118a:	697b      	ldr	r3, [r7, #20]
 806118c:	687a      	ldr	r2, [r7, #4]
 806118e:	4413      	add	r3, r2
 8061190:	781b      	ldrb	r3, [r3, #0]
 8061192:	2b2a      	cmp	r3, #42	; 0x2a
 8061194:	d002      	beq.n	806119c <GPS_validate+0x5c>
 8061196:	697b      	ldr	r3, [r7, #20]
 8061198:	2b4a      	cmp	r3, #74	; 0x4a
 806119a:	dde5      	ble.n	8061168 <GPS_validate+0x28>
    }

    if(i >= 75){
 806119c:	697b      	ldr	r3, [r7, #20]
 806119e:	2b4a      	cmp	r3, #74	; 0x4a
 80611a0:	dd01      	ble.n	80611a6 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80611a2:	2300      	movs	r3, #0
 80611a4:	e028      	b.n	80611f8 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80611a6:	697b      	ldr	r3, [r7, #20]
 80611a8:	687a      	ldr	r2, [r7, #4]
 80611aa:	4413      	add	r3, r2
 80611ac:	781b      	ldrb	r3, [r3, #0]
 80611ae:	2b2a      	cmp	r3, #42	; 0x2a
 80611b0:	d119      	bne.n	80611e6 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80611b2:	697b      	ldr	r3, [r7, #20]
 80611b4:	3301      	adds	r3, #1
 80611b6:	687a      	ldr	r2, [r7, #4]
 80611b8:	4413      	add	r3, r2
 80611ba:	781b      	ldrb	r3, [r3, #0]
 80611bc:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80611be:	697b      	ldr	r3, [r7, #20]
 80611c0:	3302      	adds	r3, #2
 80611c2:	687a      	ldr	r2, [r7, #4]
 80611c4:	4413      	add	r3, r2
 80611c6:	781b      	ldrb	r3, [r3, #0]
 80611c8:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80611ca:	2300      	movs	r3, #0
 80611cc:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80611ce:	f107 0308 	add.w	r3, r7, #8
 80611d2:	693a      	ldr	r2, [r7, #16]
 80611d4:	490a      	ldr	r1, [pc, #40]	; (8061200 <GPS_validate+0xc0>)
 80611d6:	4618      	mov	r0, r3
 80611d8:	f011 fdde 	bl	8072d98 <siprintf>
    return((checkcalcstr[0] == check[0])
 80611dc:	7a3a      	ldrb	r2, [r7, #8]
 80611de:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80611e0:	429a      	cmp	r2, r3
 80611e2:	d108      	bne.n	80611f6 <GPS_validate+0xb6>
 80611e4:	e001      	b.n	80611ea <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80611e6:	2300      	movs	r3, #0
 80611e8:	e006      	b.n	80611f8 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80611ea:	7a7a      	ldrb	r2, [r7, #9]
 80611ec:	7b7b      	ldrb	r3, [r7, #13]
 80611ee:	429a      	cmp	r2, r3
 80611f0:	d101      	bne.n	80611f6 <GPS_validate+0xb6>
 80611f2:	2301      	movs	r3, #1
 80611f4:	e000      	b.n	80611f8 <GPS_validate+0xb8>
 80611f6:	2300      	movs	r3, #0
}
 80611f8:	4618      	mov	r0, r3
 80611fa:	3718      	adds	r7, #24
 80611fc:	46bd      	mov	sp, r7
 80611fe:	bd80      	pop	{r7, pc}
 8061200:	08076618 	.word	0x08076618

08061204 <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8061204:	b480      	push	{r7}
 8061206:	b087      	sub	sp, #28
 8061208:	af00      	add	r7, sp, #0
 806120a:	ed87 0a01 	vstr	s0, [r7, #4]
 806120e:	4603      	mov	r3, r0
 8061210:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8061212:	ed97 7a01 	vldr	s14, [r7, #4]
 8061216:	eddf 6a20 	vldr	s13, [pc, #128]	; 8061298 <GPS_nmea_to_dec+0x94>
 806121a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 806121e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8061222:	ee17 3a90 	vmov	r3, s15
 8061226:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8061228:	693b      	ldr	r3, [r7, #16]
 806122a:	2264      	movs	r2, #100	; 0x64
 806122c:	fb02 f303 	mul.w	r3, r2, r3
 8061230:	ee07 3a90 	vmov	s15, r3
 8061234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8061238:	ed97 7a01 	vldr	s14, [r7, #4]
 806123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8061240:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8061244:	ed97 7a03 	vldr	s14, [r7, #12]
 8061248:	eddf 6a14 	vldr	s13, [pc, #80]	; 806129c <GPS_nmea_to_dec+0x98>
 806124c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061250:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8061254:	693b      	ldr	r3, [r7, #16]
 8061256:	ee07 3a90 	vmov	s15, r3
 806125a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 806125e:	ed97 7a02 	vldr	s14, [r7, #8]
 8061262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8061266:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 806126a:	78fb      	ldrb	r3, [r7, #3]
 806126c:	2b53      	cmp	r3, #83	; 0x53
 806126e:	d002      	beq.n	8061276 <GPS_nmea_to_dec+0x72>
 8061270:	78fb      	ldrb	r3, [r7, #3]
 8061272:	2b57      	cmp	r3, #87	; 0x57
 8061274:	d105      	bne.n	8061282 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8061276:	edd7 7a05 	vldr	s15, [r7, #20]
 806127a:	eef1 7a67 	vneg.f32	s15, s15
 806127e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8061282:	697b      	ldr	r3, [r7, #20]
 8061284:	ee07 3a90 	vmov	s15, r3
}
 8061288:	eeb0 0a67 	vmov.f32	s0, s15
 806128c:	371c      	adds	r7, #28
 806128e:	46bd      	mov	sp, r7
 8061290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061294:	4770      	bx	lr
 8061296:	bf00      	nop
 8061298:	42c80000 	.word	0x42c80000
 806129c:	42700000 	.word	0x42700000

080612a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80612a0:	b580      	push	{r7, lr}
 80612a2:	b084      	sub	sp, #16
 80612a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80612a6:	463b      	mov	r3, r7
 80612a8:	2200      	movs	r2, #0
 80612aa:	601a      	str	r2, [r3, #0]
 80612ac:	605a      	str	r2, [r3, #4]
 80612ae:	609a      	str	r2, [r3, #8]
 80612b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80612b2:	4b21      	ldr	r3, [pc, #132]	; (8061338 <MX_ADC1_Init+0x98>)
 80612b4:	4a21      	ldr	r2, [pc, #132]	; (806133c <MX_ADC1_Init+0x9c>)
 80612b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80612b8:	4b1f      	ldr	r3, [pc, #124]	; (8061338 <MX_ADC1_Init+0x98>)
 80612ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80612be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80612c0:	4b1d      	ldr	r3, [pc, #116]	; (8061338 <MX_ADC1_Init+0x98>)
 80612c2:	2200      	movs	r2, #0
 80612c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80612c6:	4b1c      	ldr	r3, [pc, #112]	; (8061338 <MX_ADC1_Init+0x98>)
 80612c8:	2200      	movs	r2, #0
 80612ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80612cc:	4b1a      	ldr	r3, [pc, #104]	; (8061338 <MX_ADC1_Init+0x98>)
 80612ce:	2200      	movs	r2, #0
 80612d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80612d2:	4b19      	ldr	r3, [pc, #100]	; (8061338 <MX_ADC1_Init+0x98>)
 80612d4:	2200      	movs	r2, #0
 80612d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80612da:	4b17      	ldr	r3, [pc, #92]	; (8061338 <MX_ADC1_Init+0x98>)
 80612dc:	2200      	movs	r2, #0
 80612de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80612e0:	4b15      	ldr	r3, [pc, #84]	; (8061338 <MX_ADC1_Init+0x98>)
 80612e2:	4a17      	ldr	r2, [pc, #92]	; (8061340 <MX_ADC1_Init+0xa0>)
 80612e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80612e6:	4b14      	ldr	r3, [pc, #80]	; (8061338 <MX_ADC1_Init+0x98>)
 80612e8:	2200      	movs	r2, #0
 80612ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80612ec:	4b12      	ldr	r3, [pc, #72]	; (8061338 <MX_ADC1_Init+0x98>)
 80612ee:	2201      	movs	r2, #1
 80612f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80612f2:	4b11      	ldr	r3, [pc, #68]	; (8061338 <MX_ADC1_Init+0x98>)
 80612f4:	2200      	movs	r2, #0
 80612f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80612fa:	4b0f      	ldr	r3, [pc, #60]	; (8061338 <MX_ADC1_Init+0x98>)
 80612fc:	2201      	movs	r2, #1
 80612fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8061300:	480d      	ldr	r0, [pc, #52]	; (8061338 <MX_ADC1_Init+0x98>)
 8061302:	f002 fb83 	bl	8063a0c <HAL_ADC_Init>
 8061306:	4603      	mov	r3, r0
 8061308:	2b00      	cmp	r3, #0
 806130a:	d001      	beq.n	8061310 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 806130c:	f001 fed0 	bl	80630b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8061310:	2301      	movs	r3, #1
 8061312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8061314:	2301      	movs	r3, #1
 8061316:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8061318:	2300      	movs	r3, #0
 806131a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 806131c:	463b      	mov	r3, r7
 806131e:	4619      	mov	r1, r3
 8061320:	4805      	ldr	r0, [pc, #20]	; (8061338 <MX_ADC1_Init+0x98>)
 8061322:	f002 ff81 	bl	8064228 <HAL_ADC_ConfigChannel>
 8061326:	4603      	mov	r3, r0
 8061328:	2b00      	cmp	r3, #0
 806132a:	d001      	beq.n	8061330 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 806132c:	f001 fec0 	bl	80630b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8061330:	bf00      	nop
 8061332:	3710      	adds	r7, #16
 8061334:	46bd      	mov	sp, r7
 8061336:	bd80      	pop	{r7, pc}
 8061338:	20004f48 	.word	0x20004f48
 806133c:	40012000 	.word	0x40012000
 8061340:	0f000001 	.word	0x0f000001

08061344 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8061344:	b580      	push	{r7, lr}
 8061346:	b08a      	sub	sp, #40	; 0x28
 8061348:	af00      	add	r7, sp, #0
 806134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 806134c:	f107 0314 	add.w	r3, r7, #20
 8061350:	2200      	movs	r2, #0
 8061352:	601a      	str	r2, [r3, #0]
 8061354:	605a      	str	r2, [r3, #4]
 8061356:	609a      	str	r2, [r3, #8]
 8061358:	60da      	str	r2, [r3, #12]
 806135a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 806135c:	687b      	ldr	r3, [r7, #4]
 806135e:	681b      	ldr	r3, [r3, #0]
 8061360:	4a32      	ldr	r2, [pc, #200]	; (806142c <HAL_ADC_MspInit+0xe8>)
 8061362:	4293      	cmp	r3, r2
 8061364:	d15e      	bne.n	8061424 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8061366:	2300      	movs	r3, #0
 8061368:	613b      	str	r3, [r7, #16]
 806136a:	4b31      	ldr	r3, [pc, #196]	; (8061430 <HAL_ADC_MspInit+0xec>)
 806136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806136e:	4a30      	ldr	r2, [pc, #192]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8061374:	6453      	str	r3, [r2, #68]	; 0x44
 8061376:	4b2e      	ldr	r3, [pc, #184]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806137a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806137e:	613b      	str	r3, [r7, #16]
 8061380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8061382:	2300      	movs	r3, #0
 8061384:	60fb      	str	r3, [r7, #12]
 8061386:	4b2a      	ldr	r3, [pc, #168]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806138a:	4a29      	ldr	r2, [pc, #164]	; (8061430 <HAL_ADC_MspInit+0xec>)
 806138c:	f043 0301 	orr.w	r3, r3, #1
 8061390:	6313      	str	r3, [r2, #48]	; 0x30
 8061392:	4b27      	ldr	r3, [pc, #156]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061396:	f003 0301 	and.w	r3, r3, #1
 806139a:	60fb      	str	r3, [r7, #12]
 806139c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 806139e:	2302      	movs	r3, #2
 80613a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80613a2:	2303      	movs	r3, #3
 80613a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80613a6:	2300      	movs	r3, #0
 80613a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80613aa:	f107 0314 	add.w	r3, r7, #20
 80613ae:	4619      	mov	r1, r3
 80613b0:	4820      	ldr	r0, [pc, #128]	; (8061434 <HAL_ADC_MspInit+0xf0>)
 80613b2:	f004 f8ef 	bl	8065594 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80613b6:	4b20      	ldr	r3, [pc, #128]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613b8:	4a20      	ldr	r2, [pc, #128]	; (806143c <HAL_ADC_MspInit+0xf8>)
 80613ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80613bc:	4b1e      	ldr	r3, [pc, #120]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613be:	2200      	movs	r2, #0
 80613c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80613c2:	4b1d      	ldr	r3, [pc, #116]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613c4:	2200      	movs	r2, #0
 80613c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80613c8:	4b1b      	ldr	r3, [pc, #108]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613ca:	2200      	movs	r2, #0
 80613cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80613ce:	4b1a      	ldr	r3, [pc, #104]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80613d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80613d6:	4b18      	ldr	r3, [pc, #96]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80613dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80613de:	4b16      	ldr	r3, [pc, #88]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80613e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80613e6:	4b14      	ldr	r3, [pc, #80]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613e8:	2200      	movs	r2, #0
 80613ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80613ec:	4b12      	ldr	r3, [pc, #72]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613ee:	2200      	movs	r2, #0
 80613f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80613f2:	4b11      	ldr	r3, [pc, #68]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613f4:	2200      	movs	r2, #0
 80613f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80613f8:	480f      	ldr	r0, [pc, #60]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613fa:	f003 fb4d 	bl	8064a98 <HAL_DMA_Init>
 80613fe:	4603      	mov	r3, r0
 8061400:	2b00      	cmp	r3, #0
 8061402:	d001      	beq.n	8061408 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8061404:	f001 fe54 	bl	80630b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8061408:	687b      	ldr	r3, [r7, #4]
 806140a:	4a0b      	ldr	r2, [pc, #44]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 806140c:	639a      	str	r2, [r3, #56]	; 0x38
 806140e:	4a0a      	ldr	r2, [pc, #40]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 8061410:	687b      	ldr	r3, [r7, #4]
 8061412:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8061414:	2200      	movs	r2, #0
 8061416:	2105      	movs	r1, #5
 8061418:	2012      	movs	r0, #18
 806141a:	f003 faf5 	bl	8064a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 806141e:	2012      	movs	r0, #18
 8061420:	f003 fb1e 	bl	8064a60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8061424:	bf00      	nop
 8061426:	3728      	adds	r7, #40	; 0x28
 8061428:	46bd      	mov	sp, r7
 806142a:	bd80      	pop	{r7, pc}
 806142c:	40012000 	.word	0x40012000
 8061430:	40023800 	.word	0x40023800
 8061434:	40020000 	.word	0x40020000
 8061438:	20004f90 	.word	0x20004f90
 806143c:	40026410 	.word	0x40026410

08061440 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8061440:	b480      	push	{r7}
 8061442:	b083      	sub	sp, #12
 8061444:	af00      	add	r7, sp, #0
 8061446:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8061448:	687b      	ldr	r3, [r7, #4]
 806144a:	2203      	movs	r2, #3
 806144c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 806144e:	687b      	ldr	r3, [r7, #4]
 8061450:	2200      	movs	r2, #0
 8061452:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8061454:	687b      	ldr	r3, [r7, #4]
 8061456:	2203      	movs	r2, #3
 8061458:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 806145a:	687b      	ldr	r3, [r7, #4]
 806145c:	2203      	movs	r2, #3
 806145e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8061460:	687b      	ldr	r3, [r7, #4]
 8061462:	2203      	movs	r2, #3
 8061464:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8061466:	687b      	ldr	r3, [r7, #4]
 8061468:	2203      	movs	r2, #3
 806146a:	715a      	strb	r2, [r3, #5]
}
 806146c:	bf00      	nop
 806146e:	370c      	adds	r7, #12
 8061470:	46bd      	mov	sp, r7
 8061472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061476:	4770      	bx	lr

08061478 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8061478:	b580      	push	{r7, lr}
 806147a:	b08a      	sub	sp, #40	; 0x28
 806147c:	af04      	add	r7, sp, #16
 806147e:	60f8      	str	r0, [r7, #12]
 8061480:	460b      	mov	r3, r1
 8061482:	607a      	str	r2, [r7, #4]
 8061484:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8061486:	68fb      	ldr	r3, [r7, #12]
 8061488:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 806148a:	005b      	lsls	r3, r3, #1
 806148c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 806148e:	68fb      	ldr	r3, [r7, #12]
 8061490:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8061492:	7afb      	ldrb	r3, [r7, #11]
 8061494:	b29a      	uxth	r2, r3
 8061496:	8af9      	ldrh	r1, [r7, #22]
 8061498:	f241 3388 	movw	r3, #5000	; 0x1388
 806149c:	9302      	str	r3, [sp, #8]
 806149e:	2302      	movs	r3, #2
 80614a0:	9301      	str	r3, [sp, #4]
 80614a2:	f107 0314 	add.w	r3, r7, #20
 80614a6:	9300      	str	r3, [sp, #0]
 80614a8:	2301      	movs	r3, #1
 80614aa:	f005 f937 	bl	806671c <HAL_I2C_Mem_Read>
 80614ae:	4603      	mov	r3, r0
 80614b0:	2b00      	cmp	r3, #0
 80614b2:	d10b      	bne.n	80614cc <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80614b4:	7d7b      	ldrb	r3, [r7, #21]
 80614b6:	021b      	lsls	r3, r3, #8
 80614b8:	b21a      	sxth	r2, r3
 80614ba:	7d3b      	ldrb	r3, [r7, #20]
 80614bc:	b21b      	sxth	r3, r3
 80614be:	4313      	orrs	r3, r2
 80614c0:	b21b      	sxth	r3, r3
 80614c2:	b29a      	uxth	r2, r3
 80614c4:	687b      	ldr	r3, [r7, #4]
 80614c6:	801a      	strh	r2, [r3, #0]
		return true;
 80614c8:	2301      	movs	r3, #1
 80614ca:	e000      	b.n	80614ce <read_register16+0x56>
	} else
		return false;
 80614cc:	2300      	movs	r3, #0

}
 80614ce:	4618      	mov	r0, r3
 80614d0:	3718      	adds	r7, #24
 80614d2:	46bd      	mov	sp, r7
 80614d4:	bd80      	pop	{r7, pc}

080614d6 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80614d6:	b590      	push	{r4, r7, lr}
 80614d8:	b08b      	sub	sp, #44	; 0x2c
 80614da:	af04      	add	r7, sp, #16
 80614dc:	60f8      	str	r0, [r7, #12]
 80614de:	607a      	str	r2, [r7, #4]
 80614e0:	461a      	mov	r2, r3
 80614e2:	460b      	mov	r3, r1
 80614e4:	72fb      	strb	r3, [r7, #11]
 80614e6:	4613      	mov	r3, r2
 80614e8:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80614ea:	68fb      	ldr	r3, [r7, #12]
 80614ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80614ee:	005b      	lsls	r3, r3, #1
 80614f0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80614f2:	68fb      	ldr	r3, [r7, #12]
 80614f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80614f6:	7afb      	ldrb	r3, [r7, #11]
 80614f8:	b29a      	uxth	r2, r3
 80614fa:	7abb      	ldrb	r3, [r7, #10]
 80614fc:	b29b      	uxth	r3, r3
 80614fe:	8af9      	ldrh	r1, [r7, #22]
 8061500:	f241 3488 	movw	r4, #5000	; 0x1388
 8061504:	9402      	str	r4, [sp, #8]
 8061506:	9301      	str	r3, [sp, #4]
 8061508:	687b      	ldr	r3, [r7, #4]
 806150a:	9300      	str	r3, [sp, #0]
 806150c:	2301      	movs	r3, #1
 806150e:	f005 f905 	bl	806671c <HAL_I2C_Mem_Read>
 8061512:	4603      	mov	r3, r0
 8061514:	2b00      	cmp	r3, #0
 8061516:	d101      	bne.n	806151c <read_data+0x46>
		return 0;
 8061518:	2300      	movs	r3, #0
 806151a:	e000      	b.n	806151e <read_data+0x48>
	else
		return 1;
 806151c:	2301      	movs	r3, #1

}
 806151e:	4618      	mov	r0, r3
 8061520:	371c      	adds	r7, #28
 8061522:	46bd      	mov	sp, r7
 8061524:	bd90      	pop	{r4, r7, pc}

08061526 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8061526:	b580      	push	{r7, lr}
 8061528:	b082      	sub	sp, #8
 806152a:	af00      	add	r7, sp, #0
 806152c:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 806152e:	687b      	ldr	r3, [r7, #4]
 8061530:	461a      	mov	r2, r3
 8061532:	2188      	movs	r1, #136	; 0x88
 8061534:	6878      	ldr	r0, [r7, #4]
 8061536:	f7ff ff9f 	bl	8061478 <read_register16>
 806153a:	4603      	mov	r3, r0
 806153c:	2b00      	cmp	r3, #0
 806153e:	d06f      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8061540:	687b      	ldr	r3, [r7, #4]
 8061542:	3302      	adds	r3, #2
 8061544:	461a      	mov	r2, r3
 8061546:	218a      	movs	r1, #138	; 0x8a
 8061548:	6878      	ldr	r0, [r7, #4]
 806154a:	f7ff ff95 	bl	8061478 <read_register16>
 806154e:	4603      	mov	r3, r0
 8061550:	2b00      	cmp	r3, #0
 8061552:	d065      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8061554:	687b      	ldr	r3, [r7, #4]
 8061556:	3304      	adds	r3, #4
 8061558:	461a      	mov	r2, r3
 806155a:	218c      	movs	r1, #140	; 0x8c
 806155c:	6878      	ldr	r0, [r7, #4]
 806155e:	f7ff ff8b 	bl	8061478 <read_register16>
 8061562:	4603      	mov	r3, r0
 8061564:	2b00      	cmp	r3, #0
 8061566:	d05b      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8061568:	687b      	ldr	r3, [r7, #4]
 806156a:	3306      	adds	r3, #6
 806156c:	461a      	mov	r2, r3
 806156e:	218e      	movs	r1, #142	; 0x8e
 8061570:	6878      	ldr	r0, [r7, #4]
 8061572:	f7ff ff81 	bl	8061478 <read_register16>
 8061576:	4603      	mov	r3, r0
 8061578:	2b00      	cmp	r3, #0
 806157a:	d051      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 806157c:	687b      	ldr	r3, [r7, #4]
 806157e:	3308      	adds	r3, #8
 8061580:	461a      	mov	r2, r3
 8061582:	2190      	movs	r1, #144	; 0x90
 8061584:	6878      	ldr	r0, [r7, #4]
 8061586:	f7ff ff77 	bl	8061478 <read_register16>
 806158a:	4603      	mov	r3, r0
 806158c:	2b00      	cmp	r3, #0
 806158e:	d047      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8061590:	687b      	ldr	r3, [r7, #4]
 8061592:	330a      	adds	r3, #10
 8061594:	461a      	mov	r2, r3
 8061596:	2192      	movs	r1, #146	; 0x92
 8061598:	6878      	ldr	r0, [r7, #4]
 806159a:	f7ff ff6d 	bl	8061478 <read_register16>
 806159e:	4603      	mov	r3, r0
 80615a0:	2b00      	cmp	r3, #0
 80615a2:	d03d      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80615a4:	687b      	ldr	r3, [r7, #4]
 80615a6:	330c      	adds	r3, #12
 80615a8:	461a      	mov	r2, r3
 80615aa:	2194      	movs	r1, #148	; 0x94
 80615ac:	6878      	ldr	r0, [r7, #4]
 80615ae:	f7ff ff63 	bl	8061478 <read_register16>
 80615b2:	4603      	mov	r3, r0
 80615b4:	2b00      	cmp	r3, #0
 80615b6:	d033      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80615b8:	687b      	ldr	r3, [r7, #4]
 80615ba:	330e      	adds	r3, #14
 80615bc:	461a      	mov	r2, r3
 80615be:	2196      	movs	r1, #150	; 0x96
 80615c0:	6878      	ldr	r0, [r7, #4]
 80615c2:	f7ff ff59 	bl	8061478 <read_register16>
 80615c6:	4603      	mov	r3, r0
 80615c8:	2b00      	cmp	r3, #0
 80615ca:	d029      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80615cc:	687b      	ldr	r3, [r7, #4]
 80615ce:	3310      	adds	r3, #16
 80615d0:	461a      	mov	r2, r3
 80615d2:	2198      	movs	r1, #152	; 0x98
 80615d4:	6878      	ldr	r0, [r7, #4]
 80615d6:	f7ff ff4f 	bl	8061478 <read_register16>
 80615da:	4603      	mov	r3, r0
 80615dc:	2b00      	cmp	r3, #0
 80615de:	d01f      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80615e0:	687b      	ldr	r3, [r7, #4]
 80615e2:	3312      	adds	r3, #18
 80615e4:	461a      	mov	r2, r3
 80615e6:	219a      	movs	r1, #154	; 0x9a
 80615e8:	6878      	ldr	r0, [r7, #4]
 80615ea:	f7ff ff45 	bl	8061478 <read_register16>
 80615ee:	4603      	mov	r3, r0
 80615f0:	2b00      	cmp	r3, #0
 80615f2:	d015      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80615f4:	687b      	ldr	r3, [r7, #4]
 80615f6:	3314      	adds	r3, #20
 80615f8:	461a      	mov	r2, r3
 80615fa:	219c      	movs	r1, #156	; 0x9c
 80615fc:	6878      	ldr	r0, [r7, #4]
 80615fe:	f7ff ff3b 	bl	8061478 <read_register16>
 8061602:	4603      	mov	r3, r0
 8061604:	2b00      	cmp	r3, #0
 8061606:	d00b      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8061608:	687b      	ldr	r3, [r7, #4]
 806160a:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 806160c:	461a      	mov	r2, r3
 806160e:	219e      	movs	r1, #158	; 0x9e
 8061610:	6878      	ldr	r0, [r7, #4]
 8061612:	f7ff ff31 	bl	8061478 <read_register16>
 8061616:	4603      	mov	r3, r0
 8061618:	2b00      	cmp	r3, #0
 806161a:	d001      	beq.n	8061620 <read_calibration_data+0xfa>

		return true;
 806161c:	2301      	movs	r3, #1
 806161e:	e000      	b.n	8061622 <read_calibration_data+0xfc>
	}

	return false;
 8061620:	2300      	movs	r3, #0
}
 8061622:	4618      	mov	r0, r3
 8061624:	3708      	adds	r7, #8
 8061626:	46bd      	mov	sp, r7
 8061628:	bd80      	pop	{r7, pc}

0806162a <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 806162a:	b580      	push	{r7, lr}
 806162c:	b084      	sub	sp, #16
 806162e:	af00      	add	r7, sp, #0
 8061630:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8061632:	687b      	ldr	r3, [r7, #4]
 8061634:	f103 0218 	add.w	r2, r3, #24
 8061638:	2301      	movs	r3, #1
 806163a:	21a1      	movs	r1, #161	; 0xa1
 806163c:	6878      	ldr	r0, [r7, #4]
 806163e:	f7ff ff4a 	bl	80614d6 <read_data>
 8061642:	4603      	mov	r3, r0
 8061644:	2b00      	cmp	r3, #0
 8061646:	d14b      	bne.n	80616e0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8061648:	687b      	ldr	r3, [r7, #4]
 806164a:	331a      	adds	r3, #26
 806164c:	461a      	mov	r2, r3
 806164e:	21e1      	movs	r1, #225	; 0xe1
 8061650:	6878      	ldr	r0, [r7, #4]
 8061652:	f7ff ff11 	bl	8061478 <read_register16>
 8061656:	4603      	mov	r3, r0
 8061658:	2b00      	cmp	r3, #0
 806165a:	d041      	beq.n	80616e0 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 806165c:	687b      	ldr	r3, [r7, #4]
 806165e:	f103 021c 	add.w	r2, r3, #28
 8061662:	2301      	movs	r3, #1
 8061664:	21e3      	movs	r1, #227	; 0xe3
 8061666:	6878      	ldr	r0, [r7, #4]
 8061668:	f7ff ff35 	bl	80614d6 <read_data>
 806166c:	4603      	mov	r3, r0
 806166e:	2b00      	cmp	r3, #0
 8061670:	d136      	bne.n	80616e0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8061672:	f107 030e 	add.w	r3, r7, #14
 8061676:	461a      	mov	r2, r3
 8061678:	21e4      	movs	r1, #228	; 0xe4
 806167a:	6878      	ldr	r0, [r7, #4]
 806167c:	f7ff fefc 	bl	8061478 <read_register16>
 8061680:	4603      	mov	r3, r0
 8061682:	2b00      	cmp	r3, #0
 8061684:	d02c      	beq.n	80616e0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8061686:	f107 030c 	add.w	r3, r7, #12
 806168a:	461a      	mov	r2, r3
 806168c:	21e5      	movs	r1, #229	; 0xe5
 806168e:	6878      	ldr	r0, [r7, #4]
 8061690:	f7ff fef2 	bl	8061478 <read_register16>
 8061694:	4603      	mov	r3, r0
 8061696:	2b00      	cmp	r3, #0
 8061698:	d022      	beq.n	80616e0 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 806169a:	687b      	ldr	r3, [r7, #4]
 806169c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80616a0:	2301      	movs	r3, #1
 80616a2:	21e7      	movs	r1, #231	; 0xe7
 80616a4:	6878      	ldr	r0, [r7, #4]
 80616a6:	f7ff ff16 	bl	80614d6 <read_data>
 80616aa:	4603      	mov	r3, r0
 80616ac:	2b00      	cmp	r3, #0
 80616ae:	d117      	bne.n	80616e0 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80616b0:	89fb      	ldrh	r3, [r7, #14]
 80616b2:	011b      	lsls	r3, r3, #4
 80616b4:	b21b      	sxth	r3, r3
 80616b6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80616ba:	b21a      	sxth	r2, r3
 80616bc:	89fb      	ldrh	r3, [r7, #14]
 80616be:	121b      	asrs	r3, r3, #8
 80616c0:	b21b      	sxth	r3, r3
 80616c2:	f003 030f 	and.w	r3, r3, #15
 80616c6:	b21b      	sxth	r3, r3
 80616c8:	4313      	orrs	r3, r2
 80616ca:	b21a      	sxth	r2, r3
 80616cc:	687b      	ldr	r3, [r7, #4]
 80616ce:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80616d0:	89bb      	ldrh	r3, [r7, #12]
 80616d2:	091b      	lsrs	r3, r3, #4
 80616d4:	b29b      	uxth	r3, r3
 80616d6:	b21a      	sxth	r2, r3
 80616d8:	687b      	ldr	r3, [r7, #4]
 80616da:	841a      	strh	r2, [r3, #32]

		return true;
 80616dc:	2301      	movs	r3, #1
 80616de:	e000      	b.n	80616e2 <read_hum_calibration_data+0xb8>
	}

	return false;
 80616e0:	2300      	movs	r3, #0
}
 80616e2:	4618      	mov	r0, r3
 80616e4:	3710      	adds	r7, #16
 80616e6:	46bd      	mov	sp, r7
 80616e8:	bd80      	pop	{r7, pc}

080616ea <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80616ea:	b580      	push	{r7, lr}
 80616ec:	b088      	sub	sp, #32
 80616ee:	af04      	add	r7, sp, #16
 80616f0:	6078      	str	r0, [r7, #4]
 80616f2:	460b      	mov	r3, r1
 80616f4:	70fb      	strb	r3, [r7, #3]
 80616f6:	4613      	mov	r3, r2
 80616f8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80616fa:	687b      	ldr	r3, [r7, #4]
 80616fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80616fe:	005b      	lsls	r3, r3, #1
 8061700:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8061702:	687b      	ldr	r3, [r7, #4]
 8061704:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8061706:	78fb      	ldrb	r3, [r7, #3]
 8061708:	b29a      	uxth	r2, r3
 806170a:	89f9      	ldrh	r1, [r7, #14]
 806170c:	f242 7310 	movw	r3, #10000	; 0x2710
 8061710:	9302      	str	r3, [sp, #8]
 8061712:	2301      	movs	r3, #1
 8061714:	9301      	str	r3, [sp, #4]
 8061716:	1cbb      	adds	r3, r7, #2
 8061718:	9300      	str	r3, [sp, #0]
 806171a:	2301      	movs	r3, #1
 806171c:	f004 fef8 	bl	8066510 <HAL_I2C_Mem_Write>
 8061720:	4603      	mov	r3, r0
 8061722:	2b00      	cmp	r3, #0
 8061724:	d101      	bne.n	806172a <write_register8+0x40>
		return false;
 8061726:	2300      	movs	r3, #0
 8061728:	e000      	b.n	806172c <write_register8+0x42>
	else
		return true;
 806172a:	2301      	movs	r3, #1
}
 806172c:	4618      	mov	r0, r3
 806172e:	3710      	adds	r7, #16
 8061730:	46bd      	mov	sp, r7
 8061732:	bd80      	pop	{r7, pc}

08061734 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8061734:	b580      	push	{r7, lr}
 8061736:	b084      	sub	sp, #16
 8061738:	af00      	add	r7, sp, #0
 806173a:	6078      	str	r0, [r7, #4]
 806173c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 806173e:	687b      	ldr	r3, [r7, #4]
 8061740:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8061742:	2b76      	cmp	r3, #118	; 0x76
 8061744:	d005      	beq.n	8061752 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8061746:	687b      	ldr	r3, [r7, #4]
 8061748:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 806174a:	2b77      	cmp	r3, #119	; 0x77
 806174c:	d001      	beq.n	8061752 <bmp280_init+0x1e>

		return false;
 806174e:	2300      	movs	r3, #0
 8061750:	e099      	b.n	8061886 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8061752:	687b      	ldr	r3, [r7, #4]
 8061754:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8061758:	2301      	movs	r3, #1
 806175a:	21d0      	movs	r1, #208	; 0xd0
 806175c:	6878      	ldr	r0, [r7, #4]
 806175e:	f7ff feba 	bl	80614d6 <read_data>
 8061762:	4603      	mov	r3, r0
 8061764:	2b00      	cmp	r3, #0
 8061766:	d001      	beq.n	806176c <bmp280_init+0x38>
		return false;
 8061768:	2300      	movs	r3, #0
 806176a:	e08c      	b.n	8061886 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 806176c:	687b      	ldr	r3, [r7, #4]
 806176e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8061772:	2b58      	cmp	r3, #88	; 0x58
 8061774:	d006      	beq.n	8061784 <bmp280_init+0x50>
 8061776:	687b      	ldr	r3, [r7, #4]
 8061778:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 806177c:	2b60      	cmp	r3, #96	; 0x60
 806177e:	d001      	beq.n	8061784 <bmp280_init+0x50>

		return false;
 8061780:	2300      	movs	r3, #0
 8061782:	e080      	b.n	8061886 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8061784:	22b6      	movs	r2, #182	; 0xb6
 8061786:	21e0      	movs	r1, #224	; 0xe0
 8061788:	6878      	ldr	r0, [r7, #4]
 806178a:	f7ff ffae 	bl	80616ea <write_register8>
 806178e:	4603      	mov	r3, r0
 8061790:	2b00      	cmp	r3, #0
 8061792:	d001      	beq.n	8061798 <bmp280_init+0x64>
		return false;
 8061794:	2300      	movs	r3, #0
 8061796:	e076      	b.n	8061886 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8061798:	f107 020c 	add.w	r2, r7, #12
 806179c:	2301      	movs	r3, #1
 806179e:	21f3      	movs	r1, #243	; 0xf3
 80617a0:	6878      	ldr	r0, [r7, #4]
 80617a2:	f7ff fe98 	bl	80614d6 <read_data>
 80617a6:	4603      	mov	r3, r0
 80617a8:	2b00      	cmp	r3, #0
 80617aa:	d1f5      	bne.n	8061798 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80617ac:	7b3b      	ldrb	r3, [r7, #12]
 80617ae:	f003 0301 	and.w	r3, r3, #1
 80617b2:	2b00      	cmp	r3, #0
 80617b4:	d1f0      	bne.n	8061798 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80617b6:	6878      	ldr	r0, [r7, #4]
 80617b8:	f7ff feb5 	bl	8061526 <read_calibration_data>
 80617bc:	4603      	mov	r3, r0
 80617be:	f083 0301 	eor.w	r3, r3, #1
 80617c2:	b2db      	uxtb	r3, r3
 80617c4:	2b00      	cmp	r3, #0
 80617c6:	d100      	bne.n	80617ca <bmp280_init+0x96>
 80617c8:	e001      	b.n	80617ce <bmp280_init+0x9a>
		return false;
 80617ca:	2300      	movs	r3, #0
 80617cc:	e05b      	b.n	8061886 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80617ce:	687b      	ldr	r3, [r7, #4]
 80617d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80617d4:	2b60      	cmp	r3, #96	; 0x60
 80617d6:	d10a      	bne.n	80617ee <bmp280_init+0xba>
 80617d8:	6878      	ldr	r0, [r7, #4]
 80617da:	f7ff ff26 	bl	806162a <read_hum_calibration_data>
 80617de:	4603      	mov	r3, r0
 80617e0:	f083 0301 	eor.w	r3, r3, #1
 80617e4:	b2db      	uxtb	r3, r3
 80617e6:	2b00      	cmp	r3, #0
 80617e8:	d001      	beq.n	80617ee <bmp280_init+0xba>
		return false;
 80617ea:	2300      	movs	r3, #0
 80617ec:	e04b      	b.n	8061886 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80617ee:	683b      	ldr	r3, [r7, #0]
 80617f0:	795b      	ldrb	r3, [r3, #5]
 80617f2:	015b      	lsls	r3, r3, #5
 80617f4:	b25a      	sxtb	r2, r3
 80617f6:	683b      	ldr	r3, [r7, #0]
 80617f8:	785b      	ldrb	r3, [r3, #1]
 80617fa:	009b      	lsls	r3, r3, #2
 80617fc:	b25b      	sxtb	r3, r3
 80617fe:	4313      	orrs	r3, r2
 8061800:	b25b      	sxtb	r3, r3
 8061802:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8061804:	7bfb      	ldrb	r3, [r7, #15]
 8061806:	461a      	mov	r2, r3
 8061808:	21f5      	movs	r1, #245	; 0xf5
 806180a:	6878      	ldr	r0, [r7, #4]
 806180c:	f7ff ff6d 	bl	80616ea <write_register8>
 8061810:	4603      	mov	r3, r0
 8061812:	2b00      	cmp	r3, #0
 8061814:	d001      	beq.n	806181a <bmp280_init+0xe6>
		return false;
 8061816:	2300      	movs	r3, #0
 8061818:	e035      	b.n	8061886 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 806181a:	683b      	ldr	r3, [r7, #0]
 806181c:	781b      	ldrb	r3, [r3, #0]
 806181e:	2b01      	cmp	r3, #1
 8061820:	d102      	bne.n	8061828 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8061822:	683b      	ldr	r3, [r7, #0]
 8061824:	2200      	movs	r2, #0
 8061826:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8061828:	683b      	ldr	r3, [r7, #0]
 806182a:	78db      	ldrb	r3, [r3, #3]
 806182c:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 806182e:	b25a      	sxtb	r2, r3
 8061830:	683b      	ldr	r3, [r7, #0]
 8061832:	789b      	ldrb	r3, [r3, #2]
 8061834:	009b      	lsls	r3, r3, #2
 8061836:	b25b      	sxtb	r3, r3
 8061838:	4313      	orrs	r3, r2
 806183a:	b25a      	sxtb	r2, r3
 806183c:	683b      	ldr	r3, [r7, #0]
 806183e:	781b      	ldrb	r3, [r3, #0]
 8061840:	b25b      	sxtb	r3, r3
 8061842:	4313      	orrs	r3, r2
 8061844:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8061846:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8061848:	687b      	ldr	r3, [r7, #4]
 806184a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 806184e:	2b60      	cmp	r3, #96	; 0x60
 8061850:	d10d      	bne.n	806186e <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8061852:	683b      	ldr	r3, [r7, #0]
 8061854:	791b      	ldrb	r3, [r3, #4]
 8061856:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8061858:	7b7b      	ldrb	r3, [r7, #13]
 806185a:	461a      	mov	r2, r3
 806185c:	21f2      	movs	r1, #242	; 0xf2
 806185e:	6878      	ldr	r0, [r7, #4]
 8061860:	f7ff ff43 	bl	80616ea <write_register8>
 8061864:	4603      	mov	r3, r0
 8061866:	2b00      	cmp	r3, #0
 8061868:	d001      	beq.n	806186e <bmp280_init+0x13a>
			return false;
 806186a:	2300      	movs	r3, #0
 806186c:	e00b      	b.n	8061886 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 806186e:	7bbb      	ldrb	r3, [r7, #14]
 8061870:	461a      	mov	r2, r3
 8061872:	21f4      	movs	r1, #244	; 0xf4
 8061874:	6878      	ldr	r0, [r7, #4]
 8061876:	f7ff ff38 	bl	80616ea <write_register8>
 806187a:	4603      	mov	r3, r0
 806187c:	2b00      	cmp	r3, #0
 806187e:	d001      	beq.n	8061884 <bmp280_init+0x150>
		return false;
 8061880:	2300      	movs	r3, #0
 8061882:	e000      	b.n	8061886 <bmp280_init+0x152>
	}

	return true;
 8061884:	2301      	movs	r3, #1
}
 8061886:	4618      	mov	r0, r3
 8061888:	3710      	adds	r7, #16
 806188a:	46bd      	mov	sp, r7
 806188c:	bd80      	pop	{r7, pc}

0806188e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 806188e:	b480      	push	{r7}
 8061890:	b087      	sub	sp, #28
 8061892:	af00      	add	r7, sp, #0
 8061894:	60f8      	str	r0, [r7, #12]
 8061896:	60b9      	str	r1, [r7, #8]
 8061898:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 806189a:	68bb      	ldr	r3, [r7, #8]
 806189c:	10da      	asrs	r2, r3, #3
 806189e:	68fb      	ldr	r3, [r7, #12]
 80618a0:	881b      	ldrh	r3, [r3, #0]
 80618a2:	005b      	lsls	r3, r3, #1
 80618a4:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80618a6:	68fa      	ldr	r2, [r7, #12]
 80618a8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80618ac:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80618b0:	12db      	asrs	r3, r3, #11
 80618b2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80618b4:	68bb      	ldr	r3, [r7, #8]
 80618b6:	111b      	asrs	r3, r3, #4
 80618b8:	68fa      	ldr	r2, [r7, #12]
 80618ba:	8812      	ldrh	r2, [r2, #0]
 80618bc:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80618be:	68ba      	ldr	r2, [r7, #8]
 80618c0:	1112      	asrs	r2, r2, #4
 80618c2:	68f9      	ldr	r1, [r7, #12]
 80618c4:	8809      	ldrh	r1, [r1, #0]
 80618c6:	1a52      	subs	r2, r2, r1
 80618c8:	fb02 f303 	mul.w	r3, r2, r3
 80618cc:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80618ce:	68fa      	ldr	r2, [r7, #12]
 80618d0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80618d4:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80618d8:	139b      	asrs	r3, r3, #14
 80618da:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80618dc:	697a      	ldr	r2, [r7, #20]
 80618de:	693b      	ldr	r3, [r7, #16]
 80618e0:	441a      	add	r2, r3
 80618e2:	687b      	ldr	r3, [r7, #4]
 80618e4:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80618e6:	687b      	ldr	r3, [r7, #4]
 80618e8:	681a      	ldr	r2, [r3, #0]
 80618ea:	4613      	mov	r3, r2
 80618ec:	009b      	lsls	r3, r3, #2
 80618ee:	4413      	add	r3, r2
 80618f0:	3380      	adds	r3, #128	; 0x80
 80618f2:	121b      	asrs	r3, r3, #8
}
 80618f4:	4618      	mov	r0, r3
 80618f6:	371c      	adds	r7, #28
 80618f8:	46bd      	mov	sp, r7
 80618fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80618fe:	4770      	bx	lr

08061900 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8061900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8061904:	b09c      	sub	sp, #112	; 0x70
 8061906:	af00      	add	r7, sp, #0
 8061908:	6578      	str	r0, [r7, #84]	; 0x54
 806190a:	6539      	str	r1, [r7, #80]	; 0x50
 806190c:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 806190e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8061910:	461a      	mov	r2, r3
 8061912:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061916:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 806191a:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 806191e:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8061922:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8061924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8061926:	fb03 f102 	mul.w	r1, r3, r2
 806192a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 806192c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 806192e:	fb03 f302 	mul.w	r3, r3, r2
 8061932:	18ca      	adds	r2, r1, r3
 8061934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8061936:	fba3 4503 	umull	r4, r5, r3, r3
 806193a:	1953      	adds	r3, r2, r5
 806193c:	461d      	mov	r5, r3
 806193e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061940:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8061944:	b21a      	sxth	r2, r3
 8061946:	ea4f 73e2 	mov.w	r3, r2, asr #31
 806194a:	fb02 f005 	mul.w	r0, r2, r5
 806194e:	fb04 f103 	mul.w	r1, r4, r3
 8061952:	4401      	add	r1, r0
 8061954:	fba4 2302 	umull	r2, r3, r4, r2
 8061958:	4419      	add	r1, r3
 806195a:	460b      	mov	r3, r1
 806195c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8061960:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8061964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061966:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 806196a:	b21a      	sxth	r2, r3
 806196c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061970:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061972:	fb03 f001 	mul.w	r0, r3, r1
 8061976:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8061978:	fb02 f101 	mul.w	r1, r2, r1
 806197c:	4408      	add	r0, r1
 806197e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061980:	fba1 2302 	umull	r2, r3, r1, r2
 8061984:	18c1      	adds	r1, r0, r3
 8061986:	460b      	mov	r3, r1
 8061988:	f04f 0000 	mov.w	r0, #0
 806198c:	f04f 0100 	mov.w	r1, #0
 8061990:	0459      	lsls	r1, r3, #17
 8061992:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8061996:	0450      	lsls	r0, r2, #17
 8061998:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 806199c:	eb12 0800 	adds.w	r8, r2, r0
 80619a0:	eb43 0901 	adc.w	r9, r3, r1
 80619a4:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80619a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80619aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80619ae:	b21a      	sxth	r2, r3
 80619b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80619b4:	f04f 0000 	mov.w	r0, #0
 80619b8:	f04f 0100 	mov.w	r1, #0
 80619bc:	00d1      	lsls	r1, r2, #3
 80619be:	2000      	movs	r0, #0
 80619c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80619c4:	1814      	adds	r4, r2, r0
 80619c6:	61bc      	str	r4, [r7, #24]
 80619c8:	414b      	adcs	r3, r1
 80619ca:	61fb      	str	r3, [r7, #28]
 80619cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80619d0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80619d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80619d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80619d8:	fb03 f102 	mul.w	r1, r3, r2
 80619dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80619de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80619e0:	fb03 f302 	mul.w	r3, r3, r2
 80619e4:	18ca      	adds	r2, r1, r3
 80619e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80619e8:	fba3 4503 	umull	r4, r5, r3, r3
 80619ec:	1953      	adds	r3, r2, r5
 80619ee:	461d      	mov	r5, r3
 80619f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80619f2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80619f6:	b21a      	sxth	r2, r3
 80619f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80619fc:	fb02 f005 	mul.w	r0, r2, r5
 8061a00:	fb04 f103 	mul.w	r1, r4, r3
 8061a04:	4401      	add	r1, r0
 8061a06:	fba4 2302 	umull	r2, r3, r4, r2
 8061a0a:	4419      	add	r1, r3
 8061a0c:	460b      	mov	r3, r1
 8061a0e:	f04f 0800 	mov.w	r8, #0
 8061a12:	f04f 0900 	mov.w	r9, #0
 8061a16:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8061a1a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8061a1e:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8061a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061a24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8061a28:	b21a      	sxth	r2, r3
 8061a2a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061a30:	fb03 f001 	mul.w	r0, r3, r1
 8061a34:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8061a36:	fb02 f101 	mul.w	r1, r2, r1
 8061a3a:	1844      	adds	r4, r0, r1
 8061a3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061a3e:	fba1 0102 	umull	r0, r1, r1, r2
 8061a42:	1863      	adds	r3, r4, r1
 8061a44:	4619      	mov	r1, r3
 8061a46:	f04f 0200 	mov.w	r2, #0
 8061a4a:	f04f 0300 	mov.w	r3, #0
 8061a4e:	030b      	lsls	r3, r1, #12
 8061a50:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8061a54:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8061a56:	eb18 0102 	adds.w	r1, r8, r2
 8061a5a:	6139      	str	r1, [r7, #16]
 8061a5c:	eb49 0303 	adc.w	r3, r9, r3
 8061a60:	617b      	str	r3, [r7, #20]
 8061a62:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8061a66:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8061a6a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061a6e:	1c11      	adds	r1, r2, #0
 8061a70:	6439      	str	r1, [r7, #64]	; 0x40
 8061a72:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8061a76:	647b      	str	r3, [r7, #68]	; 0x44
 8061a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061a7a:	88db      	ldrh	r3, [r3, #6]
 8061a7c:	b29a      	uxth	r2, r3
 8061a7e:	f04f 0300 	mov.w	r3, #0
 8061a82:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8061a86:	4629      	mov	r1, r5
 8061a88:	fb02 f001 	mul.w	r0, r2, r1
 8061a8c:	4621      	mov	r1, r4
 8061a8e:	fb01 f103 	mul.w	r1, r1, r3
 8061a92:	4401      	add	r1, r0
 8061a94:	4620      	mov	r0, r4
 8061a96:	fba0 2302 	umull	r2, r3, r0, r2
 8061a9a:	4419      	add	r1, r3
 8061a9c:	460b      	mov	r3, r1
 8061a9e:	f04f 0000 	mov.w	r0, #0
 8061aa2:	f04f 0100 	mov.w	r1, #0
 8061aa6:	1058      	asrs	r0, r3, #1
 8061aa8:	17d9      	asrs	r1, r3, #31
 8061aaa:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 8061aae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061ab2:	4313      	orrs	r3, r2
 8061ab4:	d101      	bne.n	8061aba <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8061ab6:	2300      	movs	r3, #0
 8061ab8:	e0e1      	b.n	8061c7e <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8061aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8061abc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8061ac0:	461a      	mov	r2, r3
 8061ac2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061ac6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8061aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8061acc:	105b      	asrs	r3, r3, #1
 8061ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8061ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8061ad2:	07db      	lsls	r3, r3, #31
 8061ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8061ad6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8061ada:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8061ade:	4621      	mov	r1, r4
 8061ae0:	ebb1 0a02 	subs.w	sl, r1, r2
 8061ae4:	4629      	mov	r1, r5
 8061ae6:	eb61 0b03 	sbc.w	fp, r1, r3
 8061aea:	4652      	mov	r2, sl
 8061aec:	465b      	mov	r3, fp
 8061aee:	1891      	adds	r1, r2, r2
 8061af0:	60b9      	str	r1, [r7, #8]
 8061af2:	415b      	adcs	r3, r3
 8061af4:	60fb      	str	r3, [r7, #12]
 8061af6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8061afa:	eb12 020a 	adds.w	r2, r2, sl
 8061afe:	eb43 030b 	adc.w	r3, r3, fp
 8061b02:	f04f 0000 	mov.w	r0, #0
 8061b06:	f04f 0100 	mov.w	r1, #0
 8061b0a:	0199      	lsls	r1, r3, #6
 8061b0c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8061b10:	0190      	lsls	r0, r2, #6
 8061b12:	1812      	adds	r2, r2, r0
 8061b14:	eb41 0303 	adc.w	r3, r1, r3
 8061b18:	f04f 0000 	mov.w	r0, #0
 8061b1c:	f04f 0100 	mov.w	r1, #0
 8061b20:	0099      	lsls	r1, r3, #2
 8061b22:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8061b26:	0090      	lsls	r0, r2, #2
 8061b28:	4602      	mov	r2, r0
 8061b2a:	460b      	mov	r3, r1
 8061b2c:	eb12 020a 	adds.w	r2, r2, sl
 8061b30:	eb43 030b 	adc.w	r3, r3, fp
 8061b34:	f04f 0000 	mov.w	r0, #0
 8061b38:	f04f 0100 	mov.w	r1, #0
 8061b3c:	0099      	lsls	r1, r3, #2
 8061b3e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8061b42:	0090      	lsls	r0, r2, #2
 8061b44:	4602      	mov	r2, r0
 8061b46:	460b      	mov	r3, r1
 8061b48:	eb12 010a 	adds.w	r1, r2, sl
 8061b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8061b4e:	eb43 030b 	adc.w	r3, r3, fp
 8061b52:	637b      	str	r3, [r7, #52]	; 0x34
 8061b54:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061b58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8061b5c:	f7ff f8ac 	bl	8060cb8 <__aeabi_ldivmod>
 8061b60:	4602      	mov	r2, r0
 8061b62:	460b      	mov	r3, r1
 8061b64:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8061b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061b6a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8061b6e:	b218      	sxth	r0, r3
 8061b70:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8061b74:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8061b78:	f04f 0200 	mov.w	r2, #0
 8061b7c:	f04f 0300 	mov.w	r3, #0
 8061b80:	0b62      	lsrs	r2, r4, #13
 8061b82:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8061b86:	136b      	asrs	r3, r5, #13
 8061b88:	fb02 f501 	mul.w	r5, r2, r1
 8061b8c:	fb00 f403 	mul.w	r4, r0, r3
 8061b90:	442c      	add	r4, r5
 8061b92:	fba0 0102 	umull	r0, r1, r0, r2
 8061b96:	1863      	adds	r3, r4, r1
 8061b98:	4619      	mov	r1, r3
 8061b9a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8061b9e:	f04f 0200 	mov.w	r2, #0
 8061ba2:	f04f 0300 	mov.w	r3, #0
 8061ba6:	0b62      	lsrs	r2, r4, #13
 8061ba8:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8061bac:	136b      	asrs	r3, r5, #13
 8061bae:	fb02 f501 	mul.w	r5, r2, r1
 8061bb2:	fb00 f403 	mul.w	r4, r0, r3
 8061bb6:	442c      	add	r4, r5
 8061bb8:	fba0 0102 	umull	r0, r1, r0, r2
 8061bbc:	1863      	adds	r3, r4, r1
 8061bbe:	4619      	mov	r1, r3
 8061bc0:	f04f 0200 	mov.w	r2, #0
 8061bc4:	f04f 0300 	mov.w	r3, #0
 8061bc8:	0e42      	lsrs	r2, r0, #25
 8061bca:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8061bce:	164b      	asrs	r3, r1, #25
 8061bd0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8061bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061bd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8061bda:	b21a      	sxth	r2, r3
 8061bdc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061be0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8061be2:	fb03 f001 	mul.w	r0, r3, r1
 8061be6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8061be8:	fb02 f101 	mul.w	r1, r2, r1
 8061bec:	1844      	adds	r4, r0, r1
 8061bee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8061bf0:	fba1 0102 	umull	r0, r1, r1, r2
 8061bf4:	1863      	adds	r3, r4, r1
 8061bf6:	4619      	mov	r1, r3
 8061bf8:	f04f 0200 	mov.w	r2, #0
 8061bfc:	f04f 0300 	mov.w	r3, #0
 8061c00:	0cc2      	lsrs	r2, r0, #19
 8061c02:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8061c06:	14cb      	asrs	r3, r1, #19
 8061c08:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8061c0c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8061c10:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061c14:	1884      	adds	r4, r0, r2
 8061c16:	62bc      	str	r4, [r7, #40]	; 0x28
 8061c18:	eb41 0303 	adc.w	r3, r1, r3
 8061c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8061c1e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8061c22:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8061c26:	4621      	mov	r1, r4
 8061c28:	1889      	adds	r1, r1, r2
 8061c2a:	6239      	str	r1, [r7, #32]
 8061c2c:	4629      	mov	r1, r5
 8061c2e:	eb43 0101 	adc.w	r1, r3, r1
 8061c32:	6279      	str	r1, [r7, #36]	; 0x24
 8061c34:	f04f 0000 	mov.w	r0, #0
 8061c38:	f04f 0100 	mov.w	r1, #0
 8061c3c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8061c40:	4623      	mov	r3, r4
 8061c42:	0a18      	lsrs	r0, r3, #8
 8061c44:	462b      	mov	r3, r5
 8061c46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8061c4a:	462b      	mov	r3, r5
 8061c4c:	1219      	asrs	r1, r3, #8
 8061c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061c50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8061c54:	b21c      	sxth	r4, r3
 8061c56:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8061c5a:	f04f 0200 	mov.w	r2, #0
 8061c5e:	f04f 0300 	mov.w	r3, #0
 8061c62:	012b      	lsls	r3, r5, #4
 8061c64:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8061c68:	0122      	lsls	r2, r4, #4
 8061c6a:	1884      	adds	r4, r0, r2
 8061c6c:	603c      	str	r4, [r7, #0]
 8061c6e:	eb41 0303 	adc.w	r3, r1, r3
 8061c72:	607b      	str	r3, [r7, #4]
 8061c74:	e9d7 3400 	ldrd	r3, r4, [r7]
 8061c78:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8061c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8061c7e:	4618      	mov	r0, r3
 8061c80:	3770      	adds	r7, #112	; 0x70
 8061c82:	46bd      	mov	sp, r7
 8061c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08061c88 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8061c88:	b480      	push	{r7}
 8061c8a:	b087      	sub	sp, #28
 8061c8c:	af00      	add	r7, sp, #0
 8061c8e:	60f8      	str	r0, [r7, #12]
 8061c90:	60b9      	str	r1, [r7, #8]
 8061c92:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8061c94:	687b      	ldr	r3, [r7, #4]
 8061c96:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8061c9a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8061c9c:	68bb      	ldr	r3, [r7, #8]
 8061c9e:	039a      	lsls	r2, r3, #14
 8061ca0:	68fb      	ldr	r3, [r7, #12]
 8061ca2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8061ca6:	051b      	lsls	r3, r3, #20
 8061ca8:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8061caa:	68fb      	ldr	r3, [r7, #12]
 8061cac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8061cb0:	4619      	mov	r1, r3
 8061cb2:	697b      	ldr	r3, [r7, #20]
 8061cb4:	fb03 f301 	mul.w	r3, r3, r1
 8061cb8:	1ad3      	subs	r3, r2, r3
 8061cba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8061cbe:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8061cc0:	68fa      	ldr	r2, [r7, #12]
 8061cc2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8061cc6:	4611      	mov	r1, r2
 8061cc8:	697a      	ldr	r2, [r7, #20]
 8061cca:	fb02 f201 	mul.w	r2, r2, r1
 8061cce:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8061cd0:	68f9      	ldr	r1, [r7, #12]
 8061cd2:	7f09      	ldrb	r1, [r1, #28]
 8061cd4:	4608      	mov	r0, r1
 8061cd6:	6979      	ldr	r1, [r7, #20]
 8061cd8:	fb01 f100 	mul.w	r1, r1, r0
 8061cdc:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8061cde:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8061ce2:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8061ce6:	1292      	asrs	r2, r2, #10
 8061ce8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8061cec:	68f9      	ldr	r1, [r7, #12]
 8061cee:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8061cf2:	fb01 f202 	mul.w	r2, r1, r2
 8061cf6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8061cfa:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8061cfc:	fb02 f303 	mul.w	r3, r2, r3
 8061d00:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8061d02:	697b      	ldr	r3, [r7, #20]
 8061d04:	13db      	asrs	r3, r3, #15
 8061d06:	697a      	ldr	r2, [r7, #20]
 8061d08:	13d2      	asrs	r2, r2, #15
 8061d0a:	fb02 f303 	mul.w	r3, r2, r3
 8061d0e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8061d10:	68fa      	ldr	r2, [r7, #12]
 8061d12:	7e12      	ldrb	r2, [r2, #24]
 8061d14:	fb02 f303 	mul.w	r3, r2, r3
 8061d18:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8061d1a:	697a      	ldr	r2, [r7, #20]
 8061d1c:	1ad3      	subs	r3, r2, r3
 8061d1e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8061d20:	697b      	ldr	r3, [r7, #20]
 8061d22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8061d26:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8061d28:	697b      	ldr	r3, [r7, #20]
 8061d2a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8061d2e:	bfa8      	it	ge
 8061d30:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8061d34:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8061d36:	697b      	ldr	r3, [r7, #20]
 8061d38:	131b      	asrs	r3, r3, #12
}
 8061d3a:	4618      	mov	r0, r3
 8061d3c:	371c      	adds	r7, #28
 8061d3e:	46bd      	mov	sp, r7
 8061d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061d44:	4770      	bx	lr

08061d46 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8061d46:	b580      	push	{r7, lr}
 8061d48:	b08c      	sub	sp, #48	; 0x30
 8061d4a:	af00      	add	r7, sp, #0
 8061d4c:	60f8      	str	r0, [r7, #12]
 8061d4e:	60b9      	str	r1, [r7, #8]
 8061d50:	607a      	str	r2, [r7, #4]
 8061d52:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8061d54:	68fb      	ldr	r3, [r7, #12]
 8061d56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8061d5a:	2b60      	cmp	r3, #96	; 0x60
 8061d5c:	d007      	beq.n	8061d6e <bmp280_read_fixed+0x28>
		if (humidity)
 8061d5e:	683b      	ldr	r3, [r7, #0]
 8061d60:	2b00      	cmp	r3, #0
 8061d62:	d002      	beq.n	8061d6a <bmp280_read_fixed+0x24>
			*humidity = 0;
 8061d64:	683b      	ldr	r3, [r7, #0]
 8061d66:	2200      	movs	r2, #0
 8061d68:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8061d6a:	2300      	movs	r3, #0
 8061d6c:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8061d6e:	683b      	ldr	r3, [r7, #0]
 8061d70:	2b00      	cmp	r3, #0
 8061d72:	d001      	beq.n	8061d78 <bmp280_read_fixed+0x32>
 8061d74:	2308      	movs	r3, #8
 8061d76:	e000      	b.n	8061d7a <bmp280_read_fixed+0x34>
 8061d78:	2306      	movs	r3, #6
 8061d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8061d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8061d7e:	b2db      	uxtb	r3, r3
 8061d80:	f107 0218 	add.w	r2, r7, #24
 8061d84:	21f7      	movs	r1, #247	; 0xf7
 8061d86:	68f8      	ldr	r0, [r7, #12]
 8061d88:	f7ff fba5 	bl	80614d6 <read_data>
 8061d8c:	4603      	mov	r3, r0
 8061d8e:	2b00      	cmp	r3, #0
 8061d90:	d001      	beq.n	8061d96 <bmp280_read_fixed+0x50>
		return false;
 8061d92:	2300      	movs	r3, #0
 8061d94:	e038      	b.n	8061e08 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8061d96:	7e3b      	ldrb	r3, [r7, #24]
 8061d98:	031a      	lsls	r2, r3, #12
 8061d9a:	7e7b      	ldrb	r3, [r7, #25]
 8061d9c:	011b      	lsls	r3, r3, #4
 8061d9e:	4313      	orrs	r3, r2
 8061da0:	7eba      	ldrb	r2, [r7, #26]
 8061da2:	0912      	lsrs	r2, r2, #4
 8061da4:	b2d2      	uxtb	r2, r2
 8061da6:	4313      	orrs	r3, r2
 8061da8:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8061daa:	7efb      	ldrb	r3, [r7, #27]
 8061dac:	031a      	lsls	r2, r3, #12
 8061dae:	7f3b      	ldrb	r3, [r7, #28]
 8061db0:	011b      	lsls	r3, r3, #4
 8061db2:	4313      	orrs	r3, r2
 8061db4:	7f7a      	ldrb	r2, [r7, #29]
 8061db6:	0912      	lsrs	r2, r2, #4
 8061db8:	b2d2      	uxtb	r2, r2
 8061dba:	4313      	orrs	r3, r2
 8061dbc:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8061dbe:	f107 0314 	add.w	r3, r7, #20
 8061dc2:	461a      	mov	r2, r3
 8061dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8061dc6:	68f8      	ldr	r0, [r7, #12]
 8061dc8:	f7ff fd61 	bl	806188e <compensate_temperature>
 8061dcc:	4602      	mov	r2, r0
 8061dce:	68bb      	ldr	r3, [r7, #8]
 8061dd0:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8061dd2:	697b      	ldr	r3, [r7, #20]
 8061dd4:	461a      	mov	r2, r3
 8061dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8061dd8:	68f8      	ldr	r0, [r7, #12]
 8061dda:	f7ff fd91 	bl	8061900 <compensate_pressure>
 8061dde:	4602      	mov	r2, r0
 8061de0:	687b      	ldr	r3, [r7, #4]
 8061de2:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8061de4:	683b      	ldr	r3, [r7, #0]
 8061de6:	2b00      	cmp	r3, #0
 8061de8:	d00d      	beq.n	8061e06 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8061dea:	7fbb      	ldrb	r3, [r7, #30]
 8061dec:	021b      	lsls	r3, r3, #8
 8061dee:	7ffa      	ldrb	r2, [r7, #31]
 8061df0:	4313      	orrs	r3, r2
 8061df2:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8061df4:	697b      	ldr	r3, [r7, #20]
 8061df6:	461a      	mov	r2, r3
 8061df8:	6a39      	ldr	r1, [r7, #32]
 8061dfa:	68f8      	ldr	r0, [r7, #12]
 8061dfc:	f7ff ff44 	bl	8061c88 <compensate_humidity>
 8061e00:	4602      	mov	r2, r0
 8061e02:	683b      	ldr	r3, [r7, #0]
 8061e04:	601a      	str	r2, [r3, #0]
	}

	return true;
 8061e06:	2301      	movs	r3, #1
}
 8061e08:	4618      	mov	r0, r3
 8061e0a:	3730      	adds	r7, #48	; 0x30
 8061e0c:	46bd      	mov	sp, r7
 8061e0e:	bd80      	pop	{r7, pc}

08061e10 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8061e10:	b580      	push	{r7, lr}
 8061e12:	b088      	sub	sp, #32
 8061e14:	af00      	add	r7, sp, #0
 8061e16:	60f8      	str	r0, [r7, #12]
 8061e18:	60b9      	str	r1, [r7, #8]
 8061e1a:	607a      	str	r2, [r7, #4]
 8061e1c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8061e1e:	683b      	ldr	r3, [r7, #0]
 8061e20:	2b00      	cmp	r3, #0
 8061e22:	d002      	beq.n	8061e2a <bmp280_read_float+0x1a>
 8061e24:	f107 0314 	add.w	r3, r7, #20
 8061e28:	e000      	b.n	8061e2c <bmp280_read_float+0x1c>
 8061e2a:	2300      	movs	r3, #0
 8061e2c:	f107 0218 	add.w	r2, r7, #24
 8061e30:	f107 011c 	add.w	r1, r7, #28
 8061e34:	68f8      	ldr	r0, [r7, #12]
 8061e36:	f7ff ff86 	bl	8061d46 <bmp280_read_fixed>
 8061e3a:	4603      	mov	r3, r0
 8061e3c:	2b00      	cmp	r3, #0
 8061e3e:	d028      	beq.n	8061e92 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8061e40:	69fb      	ldr	r3, [r7, #28]
 8061e42:	ee07 3a90 	vmov	s15, r3
 8061e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8061e4a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8061e9c <bmp280_read_float+0x8c>
 8061e4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061e52:	68bb      	ldr	r3, [r7, #8]
 8061e54:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8061e58:	69bb      	ldr	r3, [r7, #24]
 8061e5a:	ee07 3a90 	vmov	s15, r3
 8061e5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8061e62:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8061ea0 <bmp280_read_float+0x90>
 8061e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061e6a:	687b      	ldr	r3, [r7, #4]
 8061e6c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8061e70:	683b      	ldr	r3, [r7, #0]
 8061e72:	2b00      	cmp	r3, #0
 8061e74:	d00b      	beq.n	8061e8e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8061e76:	697b      	ldr	r3, [r7, #20]
 8061e78:	ee07 3a90 	vmov	s15, r3
 8061e7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8061e80:	eddf 6a08 	vldr	s13, [pc, #32]	; 8061ea4 <bmp280_read_float+0x94>
 8061e84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061e88:	683b      	ldr	r3, [r7, #0]
 8061e8a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8061e8e:	2301      	movs	r3, #1
 8061e90:	e000      	b.n	8061e94 <bmp280_read_float+0x84>
	}

	return false;
 8061e92:	2300      	movs	r3, #0
}
 8061e94:	4618      	mov	r0, r3
 8061e96:	3720      	adds	r7, #32
 8061e98:	46bd      	mov	sp, r7
 8061e9a:	bd80      	pop	{r7, pc}
 8061e9c:	42c80000 	.word	0x42c80000
 8061ea0:	43800000 	.word	0x43800000
 8061ea4:	44800000 	.word	0x44800000

08061ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8061ea8:	b580      	push	{r7, lr}
 8061eaa:	b082      	sub	sp, #8
 8061eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8061eae:	2300      	movs	r3, #0
 8061eb0:	607b      	str	r3, [r7, #4]
 8061eb2:	4b0c      	ldr	r3, [pc, #48]	; (8061ee4 <MX_DMA_Init+0x3c>)
 8061eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061eb6:	4a0b      	ldr	r2, [pc, #44]	; (8061ee4 <MX_DMA_Init+0x3c>)
 8061eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8061ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8061ebe:	4b09      	ldr	r3, [pc, #36]	; (8061ee4 <MX_DMA_Init+0x3c>)
 8061ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8061ec6:	607b      	str	r3, [r7, #4]
 8061ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8061eca:	2200      	movs	r2, #0
 8061ecc:	2105      	movs	r1, #5
 8061ece:	2038      	movs	r0, #56	; 0x38
 8061ed0:	f002 fd9a 	bl	8064a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8061ed4:	2038      	movs	r0, #56	; 0x38
 8061ed6:	f002 fdc3 	bl	8064a60 <HAL_NVIC_EnableIRQ>

}
 8061eda:	bf00      	nop
 8061edc:	3708      	adds	r7, #8
 8061ede:	46bd      	mov	sp, r7
 8061ee0:	bd80      	pop	{r7, pc}
 8061ee2:	bf00      	nop
 8061ee4:	40023800 	.word	0x40023800

08061ee8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8061ee8:	b580      	push	{r7, lr}
 8061eea:	b082      	sub	sp, #8
 8061eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// initialize sd card now to check whether it is working
	// second arg is basically prefic of path to file
	FRESULT fres = f_mount(&FatFs, "", 1);
 8061eee:	2201      	movs	r2, #1
 8061ef0:	4980      	ldr	r1, [pc, #512]	; (80620f4 <MX_FREERTOS_Init+0x20c>)
 8061ef2:	4881      	ldr	r0, [pc, #516]	; (80620f8 <MX_FREERTOS_Init+0x210>)
 8061ef4:	f00a fcaa 	bl	806c84c <f_mount>
 8061ef8:	4603      	mov	r3, r0
 8061efa:	71fb      	strb	r3, [r7, #7]
	if (fres != FR_OK) {
 8061efc:	79fb      	ldrb	r3, [r7, #7]
 8061efe:	2b00      	cmp	r3, #0
 8061f00:	d013      	beq.n	8061f2a <MX_FREERTOS_Init+0x42>
		myprintf("f_mount error (%i)\r\n", fres);
 8061f02:	79fb      	ldrb	r3, [r7, #7]
 8061f04:	461a      	mov	r2, r3
 8061f06:	497d      	ldr	r1, [pc, #500]	; (80620fc <MX_FREERTOS_Init+0x214>)
 8061f08:	487d      	ldr	r0, [pc, #500]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f0a:	f010 ff45 	bl	8072d98 <siprintf>
 8061f0e:	487c      	ldr	r0, [pc, #496]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f10:	f7fe f970 	bl	80601f4 <strlen>
 8061f14:	4603      	mov	r3, r0
 8061f16:	b29a      	uxth	r2, r3
 8061f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8061f1c:	4978      	ldr	r1, [pc, #480]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f1e:	4879      	ldr	r0, [pc, #484]	; (8062104 <MX_FREERTOS_Init+0x21c>)
 8061f20:	f007 f8e2 	bl	80690e8 <HAL_UART_Transmit>
		Error_Handler();
 8061f24:	f001 f8c4 	bl	80630b0 <Error_Handler>
 8061f28:	e00e      	b.n	8061f48 <MX_FREERTOS_Init+0x60>
	} else {
		myprintf("SD card mounted\n");
 8061f2a:	4977      	ldr	r1, [pc, #476]	; (8062108 <MX_FREERTOS_Init+0x220>)
 8061f2c:	4874      	ldr	r0, [pc, #464]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f2e:	f010 ff33 	bl	8072d98 <siprintf>
 8061f32:	4873      	ldr	r0, [pc, #460]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f34:	f7fe f95e 	bl	80601f4 <strlen>
 8061f38:	4603      	mov	r3, r0
 8061f3a:	b29a      	uxth	r2, r3
 8061f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8061f40:	496f      	ldr	r1, [pc, #444]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f42:	4870      	ldr	r0, [pc, #448]	; (8062104 <MX_FREERTOS_Init+0x21c>)
 8061f44:	f007 f8d0 	bl	80690e8 <HAL_UART_Transmit>
	}
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  telemetryFileMutexHandle = osMutexNew(&telemetryFileMutex_attributes);
 8061f48:	4870      	ldr	r0, [pc, #448]	; (806210c <MX_FREERTOS_Init+0x224>)
 8061f4a:	f00b feef 	bl	806dd2c <osMutexNew>
 8061f4e:	4603      	mov	r3, r0
 8061f50:	4a6f      	ldr	r2, [pc, #444]	; (8062110 <MX_FREERTOS_Init+0x228>)
 8061f52:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txThreadSem */
  txThreadSemHandle = osSemaphoreNew(1, 1, &txThreadSem_attributes);
 8061f54:	4a6f      	ldr	r2, [pc, #444]	; (8062114 <MX_FREERTOS_Init+0x22c>)
 8061f56:	2101      	movs	r1, #1
 8061f58:	2001      	movs	r0, #1
 8061f5a:	f00b fff5 	bl	806df48 <osSemaphoreNew>
 8061f5e:	4603      	mov	r3, r0
 8061f60:	4a6d      	ldr	r2, [pc, #436]	; (8062118 <MX_FREERTOS_Init+0x230>)
 8061f62:	6013      	str	r3, [r2, #0]

  /* creation of rxThreadSem */
  rxThreadSemHandle = osSemaphoreNew(1, 1, &rxThreadSem_attributes);
 8061f64:	4a6d      	ldr	r2, [pc, #436]	; (806211c <MX_FREERTOS_Init+0x234>)
 8061f66:	2101      	movs	r1, #1
 8061f68:	2001      	movs	r0, #1
 8061f6a:	f00b ffed 	bl	806df48 <osSemaphoreNew>
 8061f6e:	4603      	mov	r3, r0
 8061f70:	4a6b      	ldr	r2, [pc, #428]	; (8062120 <MX_FREERTOS_Init+0x238>)
 8061f72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreAcquire(txThreadSemHandle, 0);
 8061f74:	4b68      	ldr	r3, [pc, #416]	; (8062118 <MX_FREERTOS_Init+0x230>)
 8061f76:	681b      	ldr	r3, [r3, #0]
 8061f78:	2100      	movs	r1, #0
 8061f7a:	4618      	mov	r0, r3
 8061f7c:	f00c f86e 	bl	806e05c <osSemaphoreAcquire>
  osSemaphoreAcquire(rxThreadSemHandle, 0);
 8061f80:	4b67      	ldr	r3, [pc, #412]	; (8062120 <MX_FREERTOS_Init+0x238>)
 8061f82:	681b      	ldr	r3, [r3, #0]
 8061f84:	2100      	movs	r1, #0
 8061f86:	4618      	mov	r0, r3
 8061f88:	f00c f868 	bl	806e05c <osSemaphoreAcquire>
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of accTimer */
  accTimerHandle = osTimerNew(accTimerCallback, osTimerPeriodic, NULL, &accTimer_attributes);
 8061f8c:	4b65      	ldr	r3, [pc, #404]	; (8062124 <MX_FREERTOS_Init+0x23c>)
 8061f8e:	2200      	movs	r2, #0
 8061f90:	2101      	movs	r1, #1
 8061f92:	4865      	ldr	r0, [pc, #404]	; (8062128 <MX_FREERTOS_Init+0x240>)
 8061f94:	f00b fe20 	bl	806dbd8 <osTimerNew>
 8061f98:	4603      	mov	r3, r0
 8061f9a:	4a64      	ldr	r2, [pc, #400]	; (806212c <MX_FREERTOS_Init+0x244>)
 8061f9c:	6013      	str	r3, [r2, #0]

  /* creation of temperatureTimer */
  temperatureTimerHandle = osTimerNew(temperatureTimerCallback, osTimerPeriodic, NULL, &temperatureTimer_attributes);
 8061f9e:	4b64      	ldr	r3, [pc, #400]	; (8062130 <MX_FREERTOS_Init+0x248>)
 8061fa0:	2200      	movs	r2, #0
 8061fa2:	2101      	movs	r1, #1
 8061fa4:	4863      	ldr	r0, [pc, #396]	; (8062134 <MX_FREERTOS_Init+0x24c>)
 8061fa6:	f00b fe17 	bl	806dbd8 <osTimerNew>
 8061faa:	4603      	mov	r3, r0
 8061fac:	4a62      	ldr	r2, [pc, #392]	; (8062138 <MX_FREERTOS_Init+0x250>)
 8061fae:	6013      	str	r3, [r2, #0]

  /* creation of gpsTimer */
  gpsTimerHandle = osTimerNew(gpsTimerCallback, osTimerPeriodic, NULL, &gpsTimer_attributes);
 8061fb0:	4b62      	ldr	r3, [pc, #392]	; (806213c <MX_FREERTOS_Init+0x254>)
 8061fb2:	2200      	movs	r2, #0
 8061fb4:	2101      	movs	r1, #1
 8061fb6:	4862      	ldr	r0, [pc, #392]	; (8062140 <MX_FREERTOS_Init+0x258>)
 8061fb8:	f00b fe0e 	bl	806dbd8 <osTimerNew>
 8061fbc:	4603      	mov	r3, r0
 8061fbe:	4a61      	ldr	r2, [pc, #388]	; (8062144 <MX_FREERTOS_Init+0x25c>)
 8061fc0:	6013      	str	r3, [r2, #0]

  /* creation of lightTimer */
  lightTimerHandle = osTimerNew(lightTimerCallback, osTimerPeriodic, NULL, &lightTimer_attributes);
 8061fc2:	4b61      	ldr	r3, [pc, #388]	; (8062148 <MX_FREERTOS_Init+0x260>)
 8061fc4:	2200      	movs	r2, #0
 8061fc6:	2101      	movs	r1, #1
 8061fc8:	4860      	ldr	r0, [pc, #384]	; (806214c <MX_FREERTOS_Init+0x264>)
 8061fca:	f00b fe05 	bl	806dbd8 <osTimerNew>
 8061fce:	4603      	mov	r3, r0
 8061fd0:	4a5f      	ldr	r2, [pc, #380]	; (8062150 <MX_FREERTOS_Init+0x268>)
 8061fd2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  if (accTimerHandle != NULL)  {
 8061fd4:	4b55      	ldr	r3, [pc, #340]	; (806212c <MX_FREERTOS_Init+0x244>)
 8061fd6:	681b      	ldr	r3, [r3, #0]
 8061fd8:	2b00      	cmp	r3, #0
 8061fda:	d010      	beq.n	8061ffe <MX_FREERTOS_Init+0x116>
      status = osTimerStart(accTimerHandle, 10000U);       // start timer
 8061fdc:	4b53      	ldr	r3, [pc, #332]	; (806212c <MX_FREERTOS_Init+0x244>)
 8061fde:	681b      	ldr	r3, [r3, #0]
 8061fe0:	f242 7110 	movw	r1, #10000	; 0x2710
 8061fe4:	4618      	mov	r0, r3
 8061fe6:	f00b fe73 	bl	806dcd0 <osTimerStart>
 8061fea:	4603      	mov	r3, r0
 8061fec:	4a59      	ldr	r2, [pc, #356]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 8061fee:	6013      	str	r3, [r2, #0]
      if (status != osOK) {
 8061ff0:	4b58      	ldr	r3, [pc, #352]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 8061ff2:	681b      	ldr	r3, [r3, #0]
 8061ff4:	2b00      	cmp	r3, #0
 8061ff6:	d004      	beq.n	8062002 <MX_FREERTOS_Init+0x11a>
        // Timer could not be started
    	Error_Handler();
 8061ff8:	f001 f85a 	bl	80630b0 <Error_Handler>
 8061ffc:	e001      	b.n	8062002 <MX_FREERTOS_Init+0x11a>
      }
  } else {
	  Error_Handler();
 8061ffe:	f001 f857 	bl	80630b0 <Error_Handler>
  }

  if (temperatureTimerHandle != NULL)  {
 8062002:	4b4d      	ldr	r3, [pc, #308]	; (8062138 <MX_FREERTOS_Init+0x250>)
 8062004:	681b      	ldr	r3, [r3, #0]
 8062006:	2b00      	cmp	r3, #0
 8062008:	d010      	beq.n	806202c <MX_FREERTOS_Init+0x144>
        status = osTimerStart(temperatureTimerHandle, 10000U);       // start timer
 806200a:	4b4b      	ldr	r3, [pc, #300]	; (8062138 <MX_FREERTOS_Init+0x250>)
 806200c:	681b      	ldr	r3, [r3, #0]
 806200e:	f242 7110 	movw	r1, #10000	; 0x2710
 8062012:	4618      	mov	r0, r3
 8062014:	f00b fe5c 	bl	806dcd0 <osTimerStart>
 8062018:	4603      	mov	r3, r0
 806201a:	4a4e      	ldr	r2, [pc, #312]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 806201c:	6013      	str	r3, [r2, #0]
        if (status != osOK) {
 806201e:	4b4d      	ldr	r3, [pc, #308]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 8062020:	681b      	ldr	r3, [r3, #0]
 8062022:	2b00      	cmp	r3, #0
 8062024:	d004      	beq.n	8062030 <MX_FREERTOS_Init+0x148>
          // Timer could not be started
      	Error_Handler();
 8062026:	f001 f843 	bl	80630b0 <Error_Handler>
 806202a:	e001      	b.n	8062030 <MX_FREERTOS_Init+0x148>
        }
    } else {
  	  Error_Handler();
 806202c:	f001 f840 	bl	80630b0 <Error_Handler>
    }

  if (gpsTimerHandle != NULL)  {
 8062030:	4b44      	ldr	r3, [pc, #272]	; (8062144 <MX_FREERTOS_Init+0x25c>)
 8062032:	681b      	ldr	r3, [r3, #0]
 8062034:	2b00      	cmp	r3, #0
 8062036:	d010      	beq.n	806205a <MX_FREERTOS_Init+0x172>
          status = osTimerStart(gpsTimerHandle, 10000U);       // start timer
 8062038:	4b42      	ldr	r3, [pc, #264]	; (8062144 <MX_FREERTOS_Init+0x25c>)
 806203a:	681b      	ldr	r3, [r3, #0]
 806203c:	f242 7110 	movw	r1, #10000	; 0x2710
 8062040:	4618      	mov	r0, r3
 8062042:	f00b fe45 	bl	806dcd0 <osTimerStart>
 8062046:	4603      	mov	r3, r0
 8062048:	4a42      	ldr	r2, [pc, #264]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 806204a:	6013      	str	r3, [r2, #0]
          if (status != osOK) {
 806204c:	4b41      	ldr	r3, [pc, #260]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 806204e:	681b      	ldr	r3, [r3, #0]
 8062050:	2b00      	cmp	r3, #0
 8062052:	d004      	beq.n	806205e <MX_FREERTOS_Init+0x176>
            // Timer could not be started
        	Error_Handler();
 8062054:	f001 f82c 	bl	80630b0 <Error_Handler>
 8062058:	e001      	b.n	806205e <MX_FREERTOS_Init+0x176>
          }
      } else {
    	  Error_Handler();
 806205a:	f001 f829 	bl	80630b0 <Error_Handler>
      }

  if (lightTimerHandle != NULL)  {
 806205e:	4b3c      	ldr	r3, [pc, #240]	; (8062150 <MX_FREERTOS_Init+0x268>)
 8062060:	681b      	ldr	r3, [r3, #0]
 8062062:	2b00      	cmp	r3, #0
 8062064:	d010      	beq.n	8062088 <MX_FREERTOS_Init+0x1a0>
      status = osTimerStart(lightTimerHandle, 10000U);       // start timer
 8062066:	4b3a      	ldr	r3, [pc, #232]	; (8062150 <MX_FREERTOS_Init+0x268>)
 8062068:	681b      	ldr	r3, [r3, #0]
 806206a:	f242 7110 	movw	r1, #10000	; 0x2710
 806206e:	4618      	mov	r0, r3
 8062070:	f00b fe2e 	bl	806dcd0 <osTimerStart>
 8062074:	4603      	mov	r3, r0
 8062076:	4a37      	ldr	r2, [pc, #220]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 8062078:	6013      	str	r3, [r2, #0]
      if (status != osOK) {
 806207a:	4b36      	ldr	r3, [pc, #216]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 806207c:	681b      	ldr	r3, [r3, #0]
 806207e:	2b00      	cmp	r3, #0
 8062080:	d004      	beq.n	806208c <MX_FREERTOS_Init+0x1a4>
          // Timer could not be started
          Error_Handler();
 8062082:	f001 f815 	bl	80630b0 <Error_Handler>
 8062086:	e001      	b.n	806208c <MX_FREERTOS_Init+0x1a4>
      }
   } else {
      Error_Handler();
 8062088:	f001 f812 	bl	80630b0 <Error_Handler>
   }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  telemetryQueueHandle = osMessageQueueNew(16, sizeof(TelemetryBase), &telemetryQueue_attributes);
 806208c:	4a32      	ldr	r2, [pc, #200]	; (8062158 <MX_FREERTOS_Init+0x270>)
 806208e:	2138      	movs	r1, #56	; 0x38
 8062090:	2010      	movs	r0, #16
 8062092:	f00c f89d 	bl	806e1d0 <osMessageQueueNew>
 8062096:	4603      	mov	r3, r0
 8062098:	4a30      	ldr	r2, [pc, #192]	; (806215c <MX_FREERTOS_Init+0x274>)
 806209a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 806209c:	4a30      	ldr	r2, [pc, #192]	; (8062160 <MX_FREERTOS_Init+0x278>)
 806209e:	2100      	movs	r1, #0
 80620a0:	4830      	ldr	r0, [pc, #192]	; (8062164 <MX_FREERTOS_Init+0x27c>)
 80620a2:	f00b fba9 	bl	806d7f8 <osThreadNew>
 80620a6:	4603      	mov	r3, r0
 80620a8:	4a2f      	ldr	r2, [pc, #188]	; (8062168 <MX_FREERTOS_Init+0x280>)
 80620aa:	6013      	str	r3, [r2, #0]

  /* creation of rxDataThread */
  rxDataThreadHandle = osThreadNew(startRxDataThread, NULL, &rxDataThread_attributes);
 80620ac:	4a2f      	ldr	r2, [pc, #188]	; (806216c <MX_FREERTOS_Init+0x284>)
 80620ae:	2100      	movs	r1, #0
 80620b0:	482f      	ldr	r0, [pc, #188]	; (8062170 <MX_FREERTOS_Init+0x288>)
 80620b2:	f00b fba1 	bl	806d7f8 <osThreadNew>
 80620b6:	4603      	mov	r3, r0
 80620b8:	4a2e      	ldr	r2, [pc, #184]	; (8062174 <MX_FREERTOS_Init+0x28c>)
 80620ba:	6013      	str	r3, [r2, #0]

  /* creation of txDataThread */
  txDataThreadHandle = osThreadNew(startTxDataThread, NULL, &txDataThread_attributes);
 80620bc:	4a2e      	ldr	r2, [pc, #184]	; (8062178 <MX_FREERTOS_Init+0x290>)
 80620be:	2100      	movs	r1, #0
 80620c0:	482e      	ldr	r0, [pc, #184]	; (806217c <MX_FREERTOS_Init+0x294>)
 80620c2:	f00b fb99 	bl	806d7f8 <osThreadNew>
 80620c6:	4603      	mov	r3, r0
 80620c8:	4a2d      	ldr	r2, [pc, #180]	; (8062180 <MX_FREERTOS_Init+0x298>)
 80620ca:	6013      	str	r3, [r2, #0]

  /* creation of telemetryThread */
  telemetryThreadHandle = osThreadNew(startTelemetryThread, NULL, &telemetryThread_attributes);
 80620cc:	4a2d      	ldr	r2, [pc, #180]	; (8062184 <MX_FREERTOS_Init+0x29c>)
 80620ce:	2100      	movs	r1, #0
 80620d0:	482d      	ldr	r0, [pc, #180]	; (8062188 <MX_FREERTOS_Init+0x2a0>)
 80620d2:	f00b fb91 	bl	806d7f8 <osThreadNew>
 80620d6:	4603      	mov	r3, r0
 80620d8:	4a2c      	ldr	r2, [pc, #176]	; (806218c <MX_FREERTOS_Init+0x2a4>)
 80620da:	6013      	str	r3, [r2, #0]

  /* creation of peripheryThread */
  peripheryThreadHandle = osThreadNew(startPeripheryThread, NULL, &peripheryThread_attributes);
 80620dc:	4a2c      	ldr	r2, [pc, #176]	; (8062190 <MX_FREERTOS_Init+0x2a8>)
 80620de:	2100      	movs	r1, #0
 80620e0:	482c      	ldr	r0, [pc, #176]	; (8062194 <MX_FREERTOS_Init+0x2ac>)
 80620e2:	f00b fb89 	bl	806d7f8 <osThreadNew>
 80620e6:	4603      	mov	r3, r0
 80620e8:	4a2b      	ldr	r2, [pc, #172]	; (8062198 <MX_FREERTOS_Init+0x2b0>)
 80620ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80620ec:	bf00      	nop
 80620ee:	3708      	adds	r7, #8
 80620f0:	46bd      	mov	sp, r7
 80620f2:	bd80      	pop	{r7, pc}
 80620f4:	08076784 	.word	0x08076784
 80620f8:	20004ff4 	.word	0x20004ff4
 80620fc:	08076788 	.word	0x08076788
 8062100:	2000021c 	.word	0x2000021c
 8062104:	20005808 	.word	0x20005808
 8062108:	080767a0 	.word	0x080767a0
 806210c:	08076de0 	.word	0x08076de0
 8062110:	2000522c 	.word	0x2000522c
 8062114:	08076da8 	.word	0x08076da8
 8062118:	20005478 	.word	0x20005478
 806211c:	08076db8 	.word	0x08076db8
 8062120:	20005228 	.word	0x20005228
 8062124:	08076d68 	.word	0x08076d68
 8062128:	08062895 	.word	0x08062895
 806212c:	20005230 	.word	0x20005230
 8062130:	08076d78 	.word	0x08076d78
 8062134:	080628b5 	.word	0x080628b5
 8062138:	20005240 	.word	0x20005240
 806213c:	08076d88 	.word	0x08076d88
 8062140:	080628d5 	.word	0x080628d5
 8062144:	20005474 	.word	0x20005474
 8062148:	08076d98 	.word	0x08076d98
 806214c:	080628f9 	.word	0x080628f9
 8062150:	20005484 	.word	0x20005484
 8062154:	200056b8 	.word	0x200056b8
 8062158:	08076dc8 	.word	0x08076dc8
 806215c:	2000523c 	.word	0x2000523c
 8062160:	08076cb4 	.word	0x08076cb4
 8062164:	0806219d 	.word	0x0806219d
 8062168:	20004ff0 	.word	0x20004ff0
 806216c:	08076cd8 	.word	0x08076cd8
 8062170:	080621ad 	.word	0x080621ad
 8062174:	20005234 	.word	0x20005234
 8062178:	08076cfc 	.word	0x08076cfc
 806217c:	08062375 	.word	0x08062375
 8062180:	20005480 	.word	0x20005480
 8062184:	08076d20 	.word	0x08076d20
 8062188:	080624fd 	.word	0x080624fd
 806218c:	20005238 	.word	0x20005238
 8062190:	08076d44 	.word	0x08076d44
 8062194:	080626dd 	.word	0x080626dd
 8062198:	2000547c 	.word	0x2000547c

0806219c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 806219c:	b580      	push	{r7, lr}
 806219e:	b082      	sub	sp, #8
 80621a0:	af00      	add	r7, sp, #0
 80621a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80621a4:	2001      	movs	r0, #1
 80621a6:	f00b fce7 	bl	806db78 <osDelay>
 80621aa:	e7fb      	b.n	80621a4 <StartDefaultTask+0x8>

080621ac <startRxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRxDataThread */
void startRxDataThread(void *argument)
{
 80621ac:	b580      	push	{r7, lr}
 80621ae:	b08a      	sub	sp, #40	; 0x28
 80621b0:	af00      	add	r7, sp, #0
 80621b2:	6078      	str	r0, [r7, #4]
	 // thread is with the highest priority, as after the signal about new firmware
	 // has come, we are not interested in data anymore
	FRESULT wr;
	UINT bytesWrote;
	int cmpRes;
	int safeToBoot = 0;
 80621b4:	2300      	movs	r3, #0
 80621b6:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t firmwareChunk[16];
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 80621b8:	4b60      	ldr	r3, [pc, #384]	; (806233c <startRxDataThread+0x190>)
 80621ba:	681b      	ldr	r3, [r3, #0]
 80621bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80621c0:	4618      	mov	r0, r3
 80621c2:	f00b ff4b 	bl	806e05c <osSemaphoreAcquire>

	  myprintf("Firmware to be uploaded...\n");
 80621c6:	495e      	ldr	r1, [pc, #376]	; (8062340 <startRxDataThread+0x194>)
 80621c8:	485e      	ldr	r0, [pc, #376]	; (8062344 <startRxDataThread+0x198>)
 80621ca:	f010 fde5 	bl	8072d98 <siprintf>
 80621ce:	485d      	ldr	r0, [pc, #372]	; (8062344 <startRxDataThread+0x198>)
 80621d0:	f7fe f810 	bl	80601f4 <strlen>
 80621d4:	4603      	mov	r3, r0
 80621d6:	b29a      	uxth	r2, r3
 80621d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80621dc:	4959      	ldr	r1, [pc, #356]	; (8062344 <startRxDataThread+0x198>)
 80621de:	485a      	ldr	r0, [pc, #360]	; (8062348 <startRxDataThread+0x19c>)
 80621e0:	f006 ff82 	bl	80690e8 <HAL_UART_Transmit>

	  status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80621e4:	4b59      	ldr	r3, [pc, #356]	; (806234c <startRxDataThread+0x1a0>)
 80621e6:	681b      	ldr	r3, [r3, #0]
 80621e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80621ec:	4618      	mov	r0, r3
 80621ee:	f00b fe23 	bl	806de38 <osMutexAcquire>
 80621f2:	4603      	mov	r3, r0
 80621f4:	4a56      	ldr	r2, [pc, #344]	; (8062350 <startRxDataThread+0x1a4>)
 80621f6:	6013      	str	r3, [r2, #0]
	  if (status != osOK) {
 80621f8:	4b55      	ldr	r3, [pc, #340]	; (8062350 <startRxDataThread+0x1a4>)
 80621fa:	681b      	ldr	r3, [r3, #0]
 80621fc:	2b00      	cmp	r3, #0
 80621fe:	d00f      	beq.n	8062220 <startRxDataThread+0x74>
		  myprintf("Could not take mutex for writing into file");
 8062200:	4954      	ldr	r1, [pc, #336]	; (8062354 <startRxDataThread+0x1a8>)
 8062202:	4850      	ldr	r0, [pc, #320]	; (8062344 <startRxDataThread+0x198>)
 8062204:	f010 fdc8 	bl	8072d98 <siprintf>
 8062208:	484e      	ldr	r0, [pc, #312]	; (8062344 <startRxDataThread+0x198>)
 806220a:	f7fd fff3 	bl	80601f4 <strlen>
 806220e:	4603      	mov	r3, r0
 8062210:	b29a      	uxth	r2, r3
 8062212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062216:	494b      	ldr	r1, [pc, #300]	; (8062344 <startRxDataThread+0x198>)
 8062218:	484b      	ldr	r0, [pc, #300]	; (8062348 <startRxDataThread+0x19c>)
 806221a:	f006 ff65 	bl	80690e8 <HAL_UART_Transmit>
 806221e:	e07b      	b.n	8062318 <startRxDataThread+0x16c>
	  } else {
		  wr = f_open(&firmwareFile, "f.bin", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8062220:	221a      	movs	r2, #26
 8062222:	494d      	ldr	r1, [pc, #308]	; (8062358 <startRxDataThread+0x1ac>)
 8062224:	484d      	ldr	r0, [pc, #308]	; (806235c <startRxDataThread+0x1b0>)
 8062226:	f00a fb75 	bl	806c914 <f_open>
 806222a:	4603      	mov	r3, r0
 806222c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  osMutexRelease(telemetryFileMutexHandle);
 8062230:	4b46      	ldr	r3, [pc, #280]	; (806234c <startRxDataThread+0x1a0>)
 8062232:	681b      	ldr	r3, [r3, #0]
 8062234:	4618      	mov	r0, r3
 8062236:	f00b fe4a 	bl	806dece <osMutexRelease>

		  if(wr != FR_OK) {
 806223a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 806223e:	2b00      	cmp	r3, #0
 8062240:	d012      	beq.n	8062268 <startRxDataThread+0xbc>
			  myprintf("f_open error (%i)\n", wr);
 8062242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8062246:	461a      	mov	r2, r3
 8062248:	4945      	ldr	r1, [pc, #276]	; (8062360 <startRxDataThread+0x1b4>)
 806224a:	483e      	ldr	r0, [pc, #248]	; (8062344 <startRxDataThread+0x198>)
 806224c:	f010 fda4 	bl	8072d98 <siprintf>
 8062250:	483c      	ldr	r0, [pc, #240]	; (8062344 <startRxDataThread+0x198>)
 8062252:	f7fd ffcf 	bl	80601f4 <strlen>
 8062256:	4603      	mov	r3, r0
 8062258:	b29a      	uxth	r2, r3
 806225a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806225e:	4939      	ldr	r1, [pc, #228]	; (8062344 <startRxDataThread+0x198>)
 8062260:	4839      	ldr	r0, [pc, #228]	; (8062348 <startRxDataThread+0x19c>)
 8062262:	f006 ff41 	bl	80690e8 <HAL_UART_Transmit>
 8062266:	e057      	b.n	8062318 <startRxDataThread+0x16c>
		  } else {
			  for (;;) {
				  memset(firmwareChunk, 0, sizeof(firmwareChunk));
 8062268:	f107 0308 	add.w	r3, r7, #8
 806226c:	2210      	movs	r2, #16
 806226e:	2100      	movs	r1, #0
 8062270:	4618      	mov	r0, r3
 8062272:	f00f fe34 	bl	8071ede <memset>
				  HAL_UART_Receive(&huart2, firmwareChunk, 4, HAL_MAX_DELAY);
 8062276:	f107 0108 	add.w	r1, r7, #8
 806227a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806227e:	2204      	movs	r2, #4
 8062280:	4831      	ldr	r0, [pc, #196]	; (8062348 <startRxDataThread+0x19c>)
 8062282:	f006 ffc3 	bl	806920c <HAL_UART_Receive>
				  cmpRes = strcmp(firmwareChunk, "$END");
 8062286:	f107 0308 	add.w	r3, r7, #8
 806228a:	4936      	ldr	r1, [pc, #216]	; (8062364 <startRxDataThread+0x1b8>)
 806228c:	4618      	mov	r0, r3
 806228e:	f7fd ffa7 	bl	80601e0 <strcmp>
 8062292:	61f8      	str	r0, [r7, #28]
				  if (cmpRes == 0) {
 8062294:	69fb      	ldr	r3, [r7, #28]
 8062296:	2b00      	cmp	r3, #0
 8062298:	d102      	bne.n	80622a0 <startRxDataThread+0xf4>
					  safeToBoot = 1;
 806229a:	2301      	movs	r3, #1
 806229c:	627b      	str	r3, [r7, #36]	; 0x24
					  break;
 806229e:	e02c      	b.n	80622fa <startRxDataThread+0x14e>
				  }

				  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80622a0:	4b2a      	ldr	r3, [pc, #168]	; (806234c <startRxDataThread+0x1a0>)
 80622a2:	681b      	ldr	r3, [r3, #0]
 80622a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80622a8:	4618      	mov	r0, r3
 80622aa:	f00b fdc5 	bl	806de38 <osMutexAcquire>
				  wr = f_write(&firmwareFile, firmwareChunk, 4, &bytesWrote);
 80622ae:	f107 0318 	add.w	r3, r7, #24
 80622b2:	f107 0108 	add.w	r1, r7, #8
 80622b6:	2204      	movs	r2, #4
 80622b8:	4828      	ldr	r0, [pc, #160]	; (806235c <startRxDataThread+0x1b0>)
 80622ba:	f00a fe5e 	bl	806cf7a <f_write>
 80622be:	4603      	mov	r3, r0
 80622c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				  osMutexRelease(telemetryFileMutexHandle);
 80622c4:	4b21      	ldr	r3, [pc, #132]	; (806234c <startRxDataThread+0x1a0>)
 80622c6:	681b      	ldr	r3, [r3, #0]
 80622c8:	4618      	mov	r0, r3
 80622ca:	f00b fe00 	bl	806dece <osMutexRelease>

				  if (wr != FR_OK) {
 80622ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80622d2:	2b00      	cmp	r3, #0
 80622d4:	d0c8      	beq.n	8062268 <startRxDataThread+0xbc>
					  myprintf("[ERROR]: f_write firmware (%d)\n", wr);
 80622d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80622da:	461a      	mov	r2, r3
 80622dc:	4922      	ldr	r1, [pc, #136]	; (8062368 <startRxDataThread+0x1bc>)
 80622de:	4819      	ldr	r0, [pc, #100]	; (8062344 <startRxDataThread+0x198>)
 80622e0:	f010 fd5a 	bl	8072d98 <siprintf>
 80622e4:	4817      	ldr	r0, [pc, #92]	; (8062344 <startRxDataThread+0x198>)
 80622e6:	f7fd ff85 	bl	80601f4 <strlen>
 80622ea:	4603      	mov	r3, r0
 80622ec:	b29a      	uxth	r2, r3
 80622ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80622f2:	4914      	ldr	r1, [pc, #80]	; (8062344 <startRxDataThread+0x198>)
 80622f4:	4814      	ldr	r0, [pc, #80]	; (8062348 <startRxDataThread+0x19c>)
 80622f6:	f006 fef7 	bl	80690e8 <HAL_UART_Transmit>
					  break;
				  }
			  }


			  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80622fa:	4b14      	ldr	r3, [pc, #80]	; (806234c <startRxDataThread+0x1a0>)
 80622fc:	681b      	ldr	r3, [r3, #0]
 80622fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8062302:	4618      	mov	r0, r3
 8062304:	f00b fd98 	bl	806de38 <osMutexAcquire>
			  f_close(&firmwareFile);
 8062308:	4814      	ldr	r0, [pc, #80]	; (806235c <startRxDataThread+0x1b0>)
 806230a:	f00b f863 	bl	806d3d4 <f_close>
			  osMutexRelease(telemetryFileMutexHandle);
 806230e:	4b0f      	ldr	r3, [pc, #60]	; (806234c <startRxDataThread+0x1a0>)
 8062310:	681b      	ldr	r3, [r3, #0]
 8062312:	4618      	mov	r0, r3
 8062314:	f00b fddb 	bl	806dece <osMutexRelease>
		  }
	  }

	 if (safeToBoot) {
 8062318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806231a:	2b00      	cmp	r3, #0
 806231c:	d008      	beq.n	8062330 <startRxDataThread+0x184>
		 // toglle boot pin and software reset
		 HAL_GPIO_WritePin(BootPin_GPIO_Port, BootPin_Pin, GPIO_PIN_SET);
 806231e:	2201      	movs	r2, #1
 8062320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8062324:	4811      	ldr	r0, [pc, #68]	; (806236c <startRxDataThread+0x1c0>)
 8062326:	f003 fbd1 	bl	8065acc <HAL_GPIO_WritePin>
		 HAL_NVIC_SystemReset();
 806232a:	f002 fbb1 	bl	8064a90 <HAL_NVIC_SystemReset>
 806232e:	e743      	b.n	80621b8 <startRxDataThread+0xc>
	 } else {
		 // try one more time
		 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 8062330:	2201      	movs	r2, #1
 8062332:	490f      	ldr	r1, [pc, #60]	; (8062370 <startRxDataThread+0x1c4>)
 8062334:	4804      	ldr	r0, [pc, #16]	; (8062348 <startRxDataThread+0x19c>)
 8062336:	f007 f80b 	bl	8069350 <HAL_UART_Receive_IT>
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 806233a:	e73d      	b.n	80621b8 <startRxDataThread+0xc>
 806233c:	20005228 	.word	0x20005228
 8062340:	080767b4 	.word	0x080767b4
 8062344:	2000021c 	.word	0x2000021c
 8062348:	20005808 	.word	0x20005808
 806234c:	2000522c 	.word	0x2000522c
 8062350:	200056b8 	.word	0x200056b8
 8062354:	080767d0 	.word	0x080767d0
 8062358:	080767fc 	.word	0x080767fc
 806235c:	20005488 	.word	0x20005488
 8062360:	08076804 	.word	0x08076804
 8062364:	08076818 	.word	0x08076818
 8062368:	08076820 	.word	0x08076820
 806236c:	40020000 	.word	0x40020000
 8062370:	20004e30 	.word	0x20004e30

08062374 <startTxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTxDataThread */
void startTxDataThread(void *argument)
{
 8062374:	b580      	push	{r7, lr}
 8062376:	b08c      	sub	sp, #48	; 0x30
 8062378:	af00      	add	r7, sp, #0
 806237a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTxDataThread */
	FRESULT rr;
	// TODO: get rid of magic constants
	BYTE rbuf[32] = {0};
 806237c:	2300      	movs	r3, #0
 806237e:	60fb      	str	r3, [r7, #12]
 8062380:	f107 0310 	add.w	r3, r7, #16
 8062384:	2200      	movs	r2, #0
 8062386:	601a      	str	r2, [r3, #0]
 8062388:	605a      	str	r2, [r3, #4]
 806238a:	609a      	str	r2, [r3, #8]
 806238c:	60da      	str	r2, [r3, #12]
 806238e:	611a      	str	r2, [r3, #16]
 8062390:	615a      	str	r2, [r3, #20]
 8062392:	619a      	str	r2, [r3, #24]
  /* Infinite loop */
  for(;;)
  {
	  status = osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 8062394:	4b4d      	ldr	r3, [pc, #308]	; (80624cc <startTxDataThread+0x158>)
 8062396:	681b      	ldr	r3, [r3, #0]
 8062398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 806239c:	4618      	mov	r0, r3
 806239e:	f00b fe5d 	bl	806e05c <osSemaphoreAcquire>
 80623a2:	4603      	mov	r3, r0
 80623a4:	4a4a      	ldr	r2, [pc, #296]	; (80624d0 <startTxDataThread+0x15c>)
 80623a6:	6013      	str	r3, [r2, #0]
	  myprintf("[INFO]: txDataThread : sem acquire : (%d)\n", status);
 80623a8:	4b49      	ldr	r3, [pc, #292]	; (80624d0 <startTxDataThread+0x15c>)
 80623aa:	681b      	ldr	r3, [r3, #0]
 80623ac:	461a      	mov	r2, r3
 80623ae:	4949      	ldr	r1, [pc, #292]	; (80624d4 <startTxDataThread+0x160>)
 80623b0:	4849      	ldr	r0, [pc, #292]	; (80624d8 <startTxDataThread+0x164>)
 80623b2:	f010 fcf1 	bl	8072d98 <siprintf>
 80623b6:	4848      	ldr	r0, [pc, #288]	; (80624d8 <startTxDataThread+0x164>)
 80623b8:	f7fd ff1c 	bl	80601f4 <strlen>
 80623bc:	4603      	mov	r3, r0
 80623be:	b29a      	uxth	r2, r3
 80623c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80623c4:	4944      	ldr	r1, [pc, #272]	; (80624d8 <startTxDataThread+0x164>)
 80623c6:	4845      	ldr	r0, [pc, #276]	; (80624dc <startTxDataThread+0x168>)
 80623c8:	f006 fe8e 	bl	80690e8 <HAL_UART_Transmit>

	  // there is no need to take mutex, as currenlty this is the only task
	  // that actually uses uart (if we omit the debug part)

	  // read from sd and write the info into uart (mock gprs)
	  status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80623cc:	4b44      	ldr	r3, [pc, #272]	; (80624e0 <startTxDataThread+0x16c>)
 80623ce:	681b      	ldr	r3, [r3, #0]
 80623d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80623d4:	4618      	mov	r0, r3
 80623d6:	f00b fd2f 	bl	806de38 <osMutexAcquire>
 80623da:	4603      	mov	r3, r0
 80623dc:	4a3c      	ldr	r2, [pc, #240]	; (80624d0 <startTxDataThread+0x15c>)
 80623de:	6013      	str	r3, [r2, #0]
	  if (status != osOK) {
 80623e0:	4b3b      	ldr	r3, [pc, #236]	; (80624d0 <startTxDataThread+0x15c>)
 80623e2:	681b      	ldr	r3, [r3, #0]
 80623e4:	2b00      	cmp	r3, #0
 80623e6:	d00f      	beq.n	8062408 <startTxDataThread+0x94>
		  myprintf("Could not take mutex for reading into file");
 80623e8:	493e      	ldr	r1, [pc, #248]	; (80624e4 <startTxDataThread+0x170>)
 80623ea:	483b      	ldr	r0, [pc, #236]	; (80624d8 <startTxDataThread+0x164>)
 80623ec:	f010 fcd4 	bl	8072d98 <siprintf>
 80623f0:	4839      	ldr	r0, [pc, #228]	; (80624d8 <startTxDataThread+0x164>)
 80623f2:	f7fd feff 	bl	80601f4 <strlen>
 80623f6:	4603      	mov	r3, r0
 80623f8:	b29a      	uxth	r2, r3
 80623fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80623fe:	4936      	ldr	r1, [pc, #216]	; (80624d8 <startTxDataThread+0x164>)
 8062400:	4836      	ldr	r0, [pc, #216]	; (80624dc <startTxDataThread+0x168>)
 8062402:	f006 fe71 	bl	80690e8 <HAL_UART_Transmit>
 8062406:	e05a      	b.n	80624be <startTxDataThread+0x14a>
	  } else {
		  rr = f_open(&telemetryFile, "write.txt", FA_READ);
 8062408:	2201      	movs	r2, #1
 806240a:	4937      	ldr	r1, [pc, #220]	; (80624e8 <startTxDataThread+0x174>)
 806240c:	4837      	ldr	r0, [pc, #220]	; (80624ec <startTxDataThread+0x178>)
 806240e:	f00a fa81 	bl	806c914 <f_open>
 8062412:	4603      	mov	r3, r0
 8062414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		  if(rr != FR_OK) {
 8062418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806241c:	2b00      	cmp	r3, #0
 806241e:	d017      	beq.n	8062450 <startTxDataThread+0xdc>
			  osMutexRelease(telemetryFileMutexHandle);
 8062420:	4b2f      	ldr	r3, [pc, #188]	; (80624e0 <startTxDataThread+0x16c>)
 8062422:	681b      	ldr	r3, [r3, #0]
 8062424:	4618      	mov	r0, r3
 8062426:	f00b fd52 	bl	806dece <osMutexRelease>
			  myprintf("[ERROR]: (reading) f_open (%i)\n", rr);
 806242a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806242e:	461a      	mov	r2, r3
 8062430:	492f      	ldr	r1, [pc, #188]	; (80624f0 <startTxDataThread+0x17c>)
 8062432:	4829      	ldr	r0, [pc, #164]	; (80624d8 <startTxDataThread+0x164>)
 8062434:	f010 fcb0 	bl	8072d98 <siprintf>
 8062438:	4827      	ldr	r0, [pc, #156]	; (80624d8 <startTxDataThread+0x164>)
 806243a:	f7fd fedb 	bl	80601f4 <strlen>
 806243e:	4603      	mov	r3, r0
 8062440:	b29a      	uxth	r2, r3
 8062442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062446:	4924      	ldr	r1, [pc, #144]	; (80624d8 <startTxDataThread+0x164>)
 8062448:	4824      	ldr	r0, [pc, #144]	; (80624dc <startTxDataThread+0x168>)
 806244a:	f006 fe4d 	bl	80690e8 <HAL_UART_Transmit>
 806244e:	e036      	b.n	80624be <startTxDataThread+0x14a>
		  } else {
			  // TODO: do we really need this one here ?
			  // f_lseek(&telemetryFile, 0);

			  unsigned int bytesRead = 1;
 8062450:	2301      	movs	r3, #1
 8062452:	60bb      	str	r3, [r7, #8]
		  	  while (bytesRead != 0) {
 8062454:	e025      	b.n	80624a2 <startTxDataThread+0x12e>
			  	  f_read(&telemetryFile, &rbuf, sizeof(rbuf), &bytesRead);
 8062456:	f107 0308 	add.w	r3, r7, #8
 806245a:	f107 010c 	add.w	r1, r7, #12
 806245e:	2220      	movs	r2, #32
 8062460:	4822      	ldr	r0, [pc, #136]	; (80624ec <startTxDataThread+0x178>)
 8062462:	f00a fc1c 	bl	806cc9e <f_read>
			  	  osMutexRelease(telemetryFileMutexHandle);
 8062466:	4b1e      	ldr	r3, [pc, #120]	; (80624e0 <startTxDataThread+0x16c>)
 8062468:	681b      	ldr	r3, [r3, #0]
 806246a:	4618      	mov	r0, r3
 806246c:	f00b fd2f 	bl	806dece <osMutexRelease>
			  	  myprintf("[READ]: %s\n", rbuf);
 8062470:	f107 030c 	add.w	r3, r7, #12
 8062474:	461a      	mov	r2, r3
 8062476:	491f      	ldr	r1, [pc, #124]	; (80624f4 <startTxDataThread+0x180>)
 8062478:	4817      	ldr	r0, [pc, #92]	; (80624d8 <startTxDataThread+0x164>)
 806247a:	f010 fc8d 	bl	8072d98 <siprintf>
 806247e:	4816      	ldr	r0, [pc, #88]	; (80624d8 <startTxDataThread+0x164>)
 8062480:	f7fd feb8 	bl	80601f4 <strlen>
 8062484:	4603      	mov	r3, r0
 8062486:	b29a      	uxth	r2, r3
 8062488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806248c:	4912      	ldr	r1, [pc, #72]	; (80624d8 <startTxDataThread+0x164>)
 806248e:	4813      	ldr	r0, [pc, #76]	; (80624dc <startTxDataThread+0x168>)
 8062490:	f006 fe2a 	bl	80690e8 <HAL_UART_Transmit>
			  	  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 8062494:	4b12      	ldr	r3, [pc, #72]	; (80624e0 <startTxDataThread+0x16c>)
 8062496:	681b      	ldr	r3, [r3, #0]
 8062498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 806249c:	4618      	mov	r0, r3
 806249e:	f00b fccb 	bl	806de38 <osMutexAcquire>
		  	  while (bytesRead != 0) {
 80624a2:	68bb      	ldr	r3, [r7, #8]
 80624a4:	2b00      	cmp	r3, #0
 80624a6:	d1d6      	bne.n	8062456 <startTxDataThread+0xe2>
		  	  }

		  	  f_close(&telemetryFile);
 80624a8:	4810      	ldr	r0, [pc, #64]	; (80624ec <startTxDataThread+0x178>)
 80624aa:	f00a ff93 	bl	806d3d4 <f_close>
		  	  f_unlink("write.txt");
 80624ae:	480e      	ldr	r0, [pc, #56]	; (80624e8 <startTxDataThread+0x174>)
 80624b0:	f00a ffbf 	bl	806d432 <f_unlink>

		  	  osMutexRelease(telemetryFileMutexHandle);
 80624b4:	4b0a      	ldr	r3, [pc, #40]	; (80624e0 <startTxDataThread+0x16c>)
 80624b6:	681b      	ldr	r3, [r3, #0]
 80624b8:	4618      	mov	r0, r3
 80624ba:	f00b fd08 	bl	806dece <osMutexRelease>
		  }
	  }

	  HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 80624be:	2201      	movs	r2, #1
 80624c0:	490d      	ldr	r1, [pc, #52]	; (80624f8 <startTxDataThread+0x184>)
 80624c2:	4806      	ldr	r0, [pc, #24]	; (80624dc <startTxDataThread+0x168>)
 80624c4:	f006 ff44 	bl	8069350 <HAL_UART_Receive_IT>
	  status = osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 80624c8:	e764      	b.n	8062394 <startTxDataThread+0x20>
 80624ca:	bf00      	nop
 80624cc:	20005478 	.word	0x20005478
 80624d0:	200056b8 	.word	0x200056b8
 80624d4:	08076840 	.word	0x08076840
 80624d8:	2000021c 	.word	0x2000021c
 80624dc:	20005808 	.word	0x20005808
 80624e0:	2000522c 	.word	0x2000522c
 80624e4:	0807686c 	.word	0x0807686c
 80624e8:	08076898 	.word	0x08076898
 80624ec:	20005244 	.word	0x20005244
 80624f0:	080768a4 	.word	0x080768a4
 80624f4:	080768c4 	.word	0x080768c4
 80624f8:	20004e30 	.word	0x20004e30

080624fc <startTelemetryThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTelemetryThread */
void startTelemetryThread(void *argument)
{
 80624fc:	b5b0      	push	{r4, r5, r7, lr}
 80624fe:	b0b6      	sub	sp, #216	; 0xd8
 8062500:	af04      	add	r7, sp, #16
 8062502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTelemetryThread */
  TelemetryBase tb;
  FRESULT wr;
  // TODO: get rid of magic constant
  BYTE wbuf[128] = {0};
 8062504:	2300      	movs	r3, #0
 8062506:	60fb      	str	r3, [r7, #12]
 8062508:	f107 0310 	add.w	r3, r7, #16
 806250c:	227c      	movs	r2, #124	; 0x7c
 806250e:	2100      	movs	r1, #0
 8062510:	4618      	mov	r0, r3
 8062512:	f00f fce4 	bl	8071ede <memset>

  /* Infinite loop */
  for(;;)
  {
	 status = osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 8062516:	4b62      	ldr	r3, [pc, #392]	; (80626a0 <startTelemetryThread+0x1a4>)
 8062518:	6818      	ldr	r0, [r3, #0]
 806251a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 806251e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062522:	2200      	movs	r2, #0
 8062524:	f00b ff28 	bl	806e378 <osMessageQueueGet>
 8062528:	4603      	mov	r3, r0
 806252a:	4a5e      	ldr	r2, [pc, #376]	; (80626a4 <startTelemetryThread+0x1a8>)
 806252c:	6013      	str	r3, [r2, #0]
	 if (status == osOK) {
 806252e:	4b5d      	ldr	r3, [pc, #372]	; (80626a4 <startTelemetryThread+0x1a8>)
 8062530:	681b      	ldr	r3, [r3, #0]
 8062532:	2b00      	cmp	r3, #0
 8062534:	d1ef      	bne.n	8062516 <startTelemetryThread+0x1a>
		 // write into sd card

		 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
				 tb.id, tb.data_size, tb.data[0],
 8062536:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
		 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
 806253a:	461d      	mov	r5, r3
 806253c:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8062540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8062544:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8062548:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 806254c:	f107 000c 	add.w	r0, r7, #12
 8062550:	9102      	str	r1, [sp, #8]
 8062552:	9201      	str	r2, [sp, #4]
 8062554:	9300      	str	r3, [sp, #0]
 8062556:	4623      	mov	r3, r4
 8062558:	462a      	mov	r2, r5
 806255a:	4953      	ldr	r1, [pc, #332]	; (80626a8 <startTelemetryThread+0x1ac>)
 806255c:	f010 fc1c 	bl	8072d98 <siprintf>
				 tb.data[1], tb.data[2]);
		 myprintf("Writing following string to sd: %s", wbuf);
 8062560:	f107 030c 	add.w	r3, r7, #12
 8062564:	461a      	mov	r2, r3
 8062566:	4951      	ldr	r1, [pc, #324]	; (80626ac <startTelemetryThread+0x1b0>)
 8062568:	4851      	ldr	r0, [pc, #324]	; (80626b0 <startTelemetryThread+0x1b4>)
 806256a:	f010 fc15 	bl	8072d98 <siprintf>
 806256e:	4850      	ldr	r0, [pc, #320]	; (80626b0 <startTelemetryThread+0x1b4>)
 8062570:	f7fd fe40 	bl	80601f4 <strlen>
 8062574:	4603      	mov	r3, r0
 8062576:	b29a      	uxth	r2, r3
 8062578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806257c:	494c      	ldr	r1, [pc, #304]	; (80626b0 <startTelemetryThread+0x1b4>)
 806257e:	484d      	ldr	r0, [pc, #308]	; (80626b4 <startTelemetryThread+0x1b8>)
 8062580:	f006 fdb2 	bl	80690e8 <HAL_UART_Transmit>


		 // TODO: add mutex here
		 status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 8062584:	4b4c      	ldr	r3, [pc, #304]	; (80626b8 <startTelemetryThread+0x1bc>)
 8062586:	681b      	ldr	r3, [r3, #0]
 8062588:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 806258c:	4618      	mov	r0, r3
 806258e:	f00b fc53 	bl	806de38 <osMutexAcquire>
 8062592:	4603      	mov	r3, r0
 8062594:	4a43      	ldr	r2, [pc, #268]	; (80626a4 <startTelemetryThread+0x1a8>)
 8062596:	6013      	str	r3, [r2, #0]
		 if (status != osOK) {
 8062598:	4b42      	ldr	r3, [pc, #264]	; (80626a4 <startTelemetryThread+0x1a8>)
 806259a:	681b      	ldr	r3, [r3, #0]
 806259c:	2b00      	cmp	r3, #0
 806259e:	d00f      	beq.n	80625c0 <startTelemetryThread+0xc4>
			 myprintf("Could not take mutex for writing into file");
 80625a0:	4946      	ldr	r1, [pc, #280]	; (80626bc <startTelemetryThread+0x1c0>)
 80625a2:	4843      	ldr	r0, [pc, #268]	; (80626b0 <startTelemetryThread+0x1b4>)
 80625a4:	f010 fbf8 	bl	8072d98 <siprintf>
 80625a8:	4841      	ldr	r0, [pc, #260]	; (80626b0 <startTelemetryThread+0x1b4>)
 80625aa:	f7fd fe23 	bl	80601f4 <strlen>
 80625ae:	4603      	mov	r3, r0
 80625b0:	b29a      	uxth	r2, r3
 80625b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80625b6:	493e      	ldr	r1, [pc, #248]	; (80626b0 <startTelemetryThread+0x1b4>)
 80625b8:	483e      	ldr	r0, [pc, #248]	; (80626b4 <startTelemetryThread+0x1b8>)
 80625ba:	f006 fd95 	bl	80690e8 <HAL_UART_Transmit>
 80625be:	e068      	b.n	8062692 <startTelemetryThread+0x196>
		 } else {
		 	 wr = f_open(&telemetryFile, "write.txt", FA_OPEN_APPEND | FA_WRITE | FA_OPEN_ALWAYS);
 80625c0:	2232      	movs	r2, #50	; 0x32
 80625c2:	493f      	ldr	r1, [pc, #252]	; (80626c0 <startTelemetryThread+0x1c4>)
 80625c4:	483f      	ldr	r0, [pc, #252]	; (80626c4 <startTelemetryThread+0x1c8>)
 80625c6:	f00a f9a5 	bl	806c914 <f_open>
 80625ca:	4603      	mov	r3, r0
 80625cc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7


		 	 if(wr == FR_OK) {
 80625d0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80625d4:	2b00      	cmp	r3, #0
 80625d6:	d110      	bne.n	80625fa <startTelemetryThread+0xfe>
		 		 myprintf("I was able to open '%s' for writing\n", TELEMETRY_FILE);
 80625d8:	4a3b      	ldr	r2, [pc, #236]	; (80626c8 <startTelemetryThread+0x1cc>)
 80625da:	493c      	ldr	r1, [pc, #240]	; (80626cc <startTelemetryThread+0x1d0>)
 80625dc:	4834      	ldr	r0, [pc, #208]	; (80626b0 <startTelemetryThread+0x1b4>)
 80625de:	f010 fbdb 	bl	8072d98 <siprintf>
 80625e2:	4833      	ldr	r0, [pc, #204]	; (80626b0 <startTelemetryThread+0x1b4>)
 80625e4:	f7fd fe06 	bl	80601f4 <strlen>
 80625e8:	4603      	mov	r3, r0
 80625ea:	b29a      	uxth	r2, r3
 80625ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80625f0:	492f      	ldr	r1, [pc, #188]	; (80626b0 <startTelemetryThread+0x1b4>)
 80625f2:	4830      	ldr	r0, [pc, #192]	; (80626b4 <startTelemetryThread+0x1b8>)
 80625f4:	f006 fd78 	bl	80690e8 <HAL_UART_Transmit>
 80625f8:	e011      	b.n	806261e <startTelemetryThread+0x122>
		 	 } else {
		 		 myprintf("f_open error (%i)\n", wr);
 80625fa:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80625fe:	461a      	mov	r2, r3
 8062600:	4933      	ldr	r1, [pc, #204]	; (80626d0 <startTelemetryThread+0x1d4>)
 8062602:	482b      	ldr	r0, [pc, #172]	; (80626b0 <startTelemetryThread+0x1b4>)
 8062604:	f010 fbc8 	bl	8072d98 <siprintf>
 8062608:	4829      	ldr	r0, [pc, #164]	; (80626b0 <startTelemetryThread+0x1b4>)
 806260a:	f7fd fdf3 	bl	80601f4 <strlen>
 806260e:	4603      	mov	r3, r0
 8062610:	b29a      	uxth	r2, r3
 8062612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062616:	4926      	ldr	r1, [pc, #152]	; (80626b0 <startTelemetryThread+0x1b4>)
 8062618:	4826      	ldr	r0, [pc, #152]	; (80626b4 <startTelemetryThread+0x1b8>)
 806261a:	f006 fd65 	bl	80690e8 <HAL_UART_Transmit>
		 	 }


		 	 UINT bytesWrote;
		 	 // TODO: and also I assume we should add mutex here
		 	 wr = f_write(&telemetryFile, wbuf, strlen(wbuf), &bytesWrote);
 806261e:	f107 030c 	add.w	r3, r7, #12
 8062622:	4618      	mov	r0, r3
 8062624:	f7fd fde6 	bl	80601f4 <strlen>
 8062628:	4602      	mov	r2, r0
 806262a:	f107 0308 	add.w	r3, r7, #8
 806262e:	f107 010c 	add.w	r1, r7, #12
 8062632:	4824      	ldr	r0, [pc, #144]	; (80626c4 <startTelemetryThread+0x1c8>)
 8062634:	f00a fca1 	bl	806cf7a <f_write>
 8062638:	4603      	mov	r3, r0
 806263a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		 	 if(wr == FR_OK) {
 806263e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8062642:	2b00      	cmp	r3, #0
 8062644:	d111      	bne.n	806266a <startTelemetryThread+0x16e>
		 		 myprintf("Wrote %i bytes to 'write.txt'!\n", bytesWrote);
 8062646:	68bb      	ldr	r3, [r7, #8]
 8062648:	461a      	mov	r2, r3
 806264a:	4922      	ldr	r1, [pc, #136]	; (80626d4 <startTelemetryThread+0x1d8>)
 806264c:	4818      	ldr	r0, [pc, #96]	; (80626b0 <startTelemetryThread+0x1b4>)
 806264e:	f010 fba3 	bl	8072d98 <siprintf>
 8062652:	4817      	ldr	r0, [pc, #92]	; (80626b0 <startTelemetryThread+0x1b4>)
 8062654:	f7fd fdce 	bl	80601f4 <strlen>
 8062658:	4603      	mov	r3, r0
 806265a:	b29a      	uxth	r2, r3
 806265c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062660:	4913      	ldr	r1, [pc, #76]	; (80626b0 <startTelemetryThread+0x1b4>)
 8062662:	4814      	ldr	r0, [pc, #80]	; (80626b4 <startTelemetryThread+0x1b8>)
 8062664:	f006 fd40 	bl	80690e8 <HAL_UART_Transmit>
 8062668:	e010      	b.n	806268c <startTelemetryThread+0x190>
		 	 } else {
		 		 myprintf("f_write error (%d)\n", (int) bytesWrote);
 806266a:	68bb      	ldr	r3, [r7, #8]
 806266c:	461a      	mov	r2, r3
 806266e:	491a      	ldr	r1, [pc, #104]	; (80626d8 <startTelemetryThread+0x1dc>)
 8062670:	480f      	ldr	r0, [pc, #60]	; (80626b0 <startTelemetryThread+0x1b4>)
 8062672:	f010 fb91 	bl	8072d98 <siprintf>
 8062676:	480e      	ldr	r0, [pc, #56]	; (80626b0 <startTelemetryThread+0x1b4>)
 8062678:	f7fd fdbc 	bl	80601f4 <strlen>
 806267c:	4603      	mov	r3, r0
 806267e:	b29a      	uxth	r2, r3
 8062680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062684:	490a      	ldr	r1, [pc, #40]	; (80626b0 <startTelemetryThread+0x1b4>)
 8062686:	480b      	ldr	r0, [pc, #44]	; (80626b4 <startTelemetryThread+0x1b8>)
 8062688:	f006 fd2e 	bl	80690e8 <HAL_UART_Transmit>
		 	 }

		 	 f_close(&telemetryFile);
 806268c:	480d      	ldr	r0, [pc, #52]	; (80626c4 <startTelemetryThread+0x1c8>)
 806268e:	f00a fea1 	bl	806d3d4 <f_close>
	 	 }

		 osMutexRelease(telemetryFileMutexHandle);
 8062692:	4b09      	ldr	r3, [pc, #36]	; (80626b8 <startTelemetryThread+0x1bc>)
 8062694:	681b      	ldr	r3, [r3, #0]
 8062696:	4618      	mov	r0, r3
 8062698:	f00b fc19 	bl	806dece <osMutexRelease>
	 status = osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 806269c:	e73b      	b.n	8062516 <startTelemetryThread+0x1a>
 806269e:	bf00      	nop
 80626a0:	2000523c 	.word	0x2000523c
 80626a4:	200056b8 	.word	0x200056b8
 80626a8:	080768d0 	.word	0x080768d0
 80626ac:	080768f4 	.word	0x080768f4
 80626b0:	2000021c 	.word	0x2000021c
 80626b4:	20005808 	.word	0x20005808
 80626b8:	2000522c 	.word	0x2000522c
 80626bc:	080767d0 	.word	0x080767d0
 80626c0:	08076898 	.word	0x08076898
 80626c4:	20005244 	.word	0x20005244
 80626c8:	08076918 	.word	0x08076918
 80626cc:	08076928 	.word	0x08076928
 80626d0:	08076804 	.word	0x08076804
 80626d4:	08076950 	.word	0x08076950
 80626d8:	08076970 	.word	0x08076970

080626dc <startPeripheryThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPeripheryThread */
void startPeripheryThread(void *argument)
{
 80626dc:	b580      	push	{r7, lr}
 80626de:	b098      	sub	sp, #96	; 0x60
 80626e0:	af00      	add	r7, sp, #0
 80626e2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  osThreadFlagsWait(0x11111111U, osFlagsNoClear, osWaitForever);
 80626e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80626e8:	2102      	movs	r1, #2
 80626ea:	f04f 3011 	mov.w	r0, #286331153	; 0x11111111
 80626ee:	f00b f9c2 	bl	806da76 <osThreadFlagsWait>
	  flags = osThreadFlagsGet();
 80626f2:	f00b f99f 	bl	806da34 <osThreadFlagsGet>
 80626f6:	65f8      	str	r0, [r7, #92]	; 0x5c
	  osThreadFlagsClear(flags);
 80626f8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80626fa:	f00b f95d 	bl	806d9b8 <osThreadFlagsClear>

	  switch (flags) {
 80626fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8062700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8062704:	f000 80a0 	beq.w	8062848 <startPeripheryThread+0x16c>
 8062708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 806270a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806270e:	f200 80b1 	bhi.w	8062874 <startPeripheryThread+0x198>
 8062712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8062714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8062718:	d060      	beq.n	80627dc <startPeripheryThread+0x100>
 806271a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 806271c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8062720:	f200 80a8 	bhi.w	8062874 <startPeripheryThread+0x198>
 8062724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8062726:	2b01      	cmp	r3, #1
 8062728:	d003      	beq.n	8062732 <startPeripheryThread+0x56>
 806272a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 806272c:	2b10      	cmp	r3, #16
 806272e:	d02a      	beq.n	8062786 <startPeripheryThread+0xaa>

	  	    tb.data[0] = (int) TEMT6000_lux;

			break;
	  default:
		  break;
 8062730:	e0a0      	b.n	8062874 <startPeripheryThread+0x198>
	  	    MPU6050_GetAllData(Data);
 8062732:	f107 0318 	add.w	r3, r7, #24
 8062736:	4618      	mov	r0, r3
 8062738:	f000 fcff 	bl	806313a <MPU6050_GetAllData>
			tb.id = ACC;
 806273c:	2300      	movs	r3, #0
 806273e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 3;
 8062742:	2303      	movs	r3, #3
 8062744:	65bb      	str	r3, [r7, #88]	; 0x58
	  	  	tb.data[0] = Data[0];
 8062746:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 806274a:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  	tb.data[1] = Data[1];
 806274c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8062750:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  	tb.data[2] = Data[2];
 8062752:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8062756:	633b      	str	r3, [r7, #48]	; 0x30
	  	  	osMessageQueuePut(telemetryQueueHandle, &tb, 0U, 0U);
 8062758:	4b4b      	ldr	r3, [pc, #300]	; (8062888 <startPeripheryThread+0x1ac>)
 806275a:	6818      	ldr	r0, [r3, #0]
 806275c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8062760:	2300      	movs	r3, #0
 8062762:	2200      	movs	r2, #0
 8062764:	f00b fda8 	bl	806e2b8 <osMessageQueuePut>
	  	  	tb.id = GYRO;
 8062768:	2301      	movs	r3, #1
 806276a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 3;
 806276e:	2303      	movs	r3, #3
 8062770:	65bb      	str	r3, [r7, #88]	; 0x58
	  	  	tb.data[0] = Data[3];
 8062772:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8062776:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  	tb.data[1] = Data[4];
 8062778:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 806277c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  	tb.data[2] = Data[5];
 806277e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8062782:	633b      	str	r3, [r7, #48]	; 0x30
	  	  	break;
 8062784:	e077      	b.n	8062876 <startPeripheryThread+0x19a>
			tb.id = HTP;
 8062786:	2302      	movs	r3, #2
 8062788:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 3;
 806278c:	2303      	movs	r3, #3
 806278e:	65bb      	str	r3, [r7, #88]	; 0x58
			while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity));
 8062790:	bf00      	nop
 8062792:	f107 030c 	add.w	r3, r7, #12
 8062796:	f107 0214 	add.w	r2, r7, #20
 806279a:	f107 0110 	add.w	r1, r7, #16
 806279e:	483b      	ldr	r0, [pc, #236]	; (806288c <startPeripheryThread+0x1b0>)
 80627a0:	f7ff fb36 	bl	8061e10 <bmp280_read_float>
 80627a4:	4603      	mov	r3, r0
 80627a6:	f083 0301 	eor.w	r3, r3, #1
 80627aa:	b2db      	uxtb	r3, r3
 80627ac:	2b00      	cmp	r3, #0
 80627ae:	d1f0      	bne.n	8062792 <startPeripheryThread+0xb6>
			tb.data[0] = (int) temperature;
 80627b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80627b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80627b8:	ee17 3a90 	vmov	r3, s15
 80627bc:	62bb      	str	r3, [r7, #40]	; 0x28
			tb.data[1] = (int) pressure;
 80627be:	edd7 7a05 	vldr	s15, [r7, #20]
 80627c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80627c6:	ee17 3a90 	vmov	r3, s15
 80627ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			tb.data[2] = (int) humidity;
 80627cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80627d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80627d4:	ee17 3a90 	vmov	r3, s15
 80627d8:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 80627da:	e04c      	b.n	8062876 <startPeripheryThread+0x19a>
			while (!GPS_read());
 80627dc:	bf00      	nop
 80627de:	f7fe fc6d 	bl	80610bc <GPS_read>
 80627e2:	4603      	mov	r3, r0
 80627e4:	2b00      	cmp	r3, #0
 80627e6:	d0fa      	beq.n	80627de <startPeripheryThread+0x102>
			tb.id = NEO6M;
 80627e8:	2304      	movs	r3, #4
 80627ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			tb.data_size = 3;
 80627ee:	2303      	movs	r3, #3
 80627f0:	65bb      	str	r3, [r7, #88]	; 0x58
			tb.data[0] = (int) GPS.utc_time;
 80627f2:	4b27      	ldr	r3, [pc, #156]	; (8062890 <startPeripheryThread+0x1b4>)
 80627f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80627f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80627fc:	ee17 3a90 	vmov	r3, s15
 8062800:	62bb      	str	r3, [r7, #40]	; 0x28
			tb.data[1] = (int) GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8062802:	4b23      	ldr	r3, [pc, #140]	; (8062890 <startPeripheryThread+0x1b4>)
 8062804:	edd3 7a04 	vldr	s15, [r3, #16]
 8062808:	4b21      	ldr	r3, [pc, #132]	; (8062890 <startPeripheryThread+0x1b4>)
 806280a:	7e1b      	ldrb	r3, [r3, #24]
 806280c:	4618      	mov	r0, r3
 806280e:	eeb0 0a67 	vmov.f32	s0, s15
 8062812:	f7fe fcf7 	bl	8061204 <GPS_nmea_to_dec>
 8062816:	eef0 7a40 	vmov.f32	s15, s0
 806281a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 806281e:	ee17 3a90 	vmov	r3, s15
 8062822:	62fb      	str	r3, [r7, #44]	; 0x2c
			tb.data[2] = (int) GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8062824:	4b1a      	ldr	r3, [pc, #104]	; (8062890 <startPeripheryThread+0x1b4>)
 8062826:	edd3 7a03 	vldr	s15, [r3, #12]
 806282a:	4b19      	ldr	r3, [pc, #100]	; (8062890 <startPeripheryThread+0x1b4>)
 806282c:	7e5b      	ldrb	r3, [r3, #25]
 806282e:	4618      	mov	r0, r3
 8062830:	eeb0 0a67 	vmov.f32	s0, s15
 8062834:	f7fe fce6 	bl	8061204 <GPS_nmea_to_dec>
 8062838:	eef0 7a40 	vmov.f32	s15, s0
 806283c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8062840:	ee17 3a90 	vmov	r3, s15
 8062844:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8062846:	e016      	b.n	8062876 <startPeripheryThread+0x19a>
			tb.id = LIGHT;
 8062848:	2303      	movs	r3, #3
 806284a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 1;
 806284e:	2301      	movs	r3, #1
 8062850:	65bb      	str	r3, [r7, #88]	; 0x58
	  	    while (TEMT6000_OK != TEMT6000_ReadLight(&TEMT6000_lux));
 8062852:	bf00      	nop
 8062854:	f107 0308 	add.w	r3, r7, #8
 8062858:	4618      	mov	r0, r3
 806285a:	f000 ff01 	bl	8063660 <TEMT6000_ReadLight>
 806285e:	4603      	mov	r3, r0
 8062860:	2b00      	cmp	r3, #0
 8062862:	d1f7      	bne.n	8062854 <startPeripheryThread+0x178>
	  	    tb.data[0] = (int) TEMT6000_lux;
 8062864:	edd7 7a02 	vldr	s15, [r7, #8]
 8062868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 806286c:	ee17 3a90 	vmov	r3, s15
 8062870:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8062872:	e000      	b.n	8062876 <startPeripheryThread+0x19a>
		  break;
 8062874:	bf00      	nop

	  }

	  osMessageQueuePut(telemetryQueueHandle, &tb, 0U, 0U);
 8062876:	4b04      	ldr	r3, [pc, #16]	; (8062888 <startPeripheryThread+0x1ac>)
 8062878:	6818      	ldr	r0, [r3, #0]
 806287a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 806287e:	2300      	movs	r3, #0
 8062880:	2200      	movs	r2, #0
 8062882:	f00b fd19 	bl	806e2b8 <osMessageQueuePut>
	  osThreadFlagsWait(0x11111111U, osFlagsNoClear, osWaitForever);
 8062886:	e72d      	b.n	80626e4 <startPeripheryThread+0x8>
 8062888:	2000523c 	.word	0x2000523c
 806288c:	20004f14 	.word	0x20004f14
 8062890:	20004e3c 	.word	0x20004e3c

08062894 <accTimerCallback>:
  /* USER CODE END startPeripheryThread */
}

/* accTimerCallback function */
void accTimerCallback(void *argument)
{
 8062894:	b580      	push	{r7, lr}
 8062896:	b082      	sub	sp, #8
 8062898:	af00      	add	r7, sp, #0
 806289a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00000001U);
 806289c:	4b04      	ldr	r3, [pc, #16]	; (80628b0 <accTimerCallback+0x1c>)
 806289e:	681b      	ldr	r3, [r3, #0]
 80628a0:	2101      	movs	r1, #1
 80628a2:	4618      	mov	r0, r3
 80628a4:	f00b f83a 	bl	806d91c <osThreadFlagsSet>
  /* USER CODE END accTimerCallback */
}
 80628a8:	bf00      	nop
 80628aa:	3708      	adds	r7, #8
 80628ac:	46bd      	mov	sp, r7
 80628ae:	bd80      	pop	{r7, pc}
 80628b0:	2000547c 	.word	0x2000547c

080628b4 <temperatureTimerCallback>:

/* temperatureTimerCallback function */
void temperatureTimerCallback(void *argument)
{
 80628b4:	b580      	push	{r7, lr}
 80628b6:	b082      	sub	sp, #8
 80628b8:	af00      	add	r7, sp, #0
 80628ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temperatureTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00000010U);
 80628bc:	4b04      	ldr	r3, [pc, #16]	; (80628d0 <temperatureTimerCallback+0x1c>)
 80628be:	681b      	ldr	r3, [r3, #0]
 80628c0:	2110      	movs	r1, #16
 80628c2:	4618      	mov	r0, r3
 80628c4:	f00b f82a 	bl	806d91c <osThreadFlagsSet>
  /* USER CODE END temperatureTimerCallback */
}
 80628c8:	bf00      	nop
 80628ca:	3708      	adds	r7, #8
 80628cc:	46bd      	mov	sp, r7
 80628ce:	bd80      	pop	{r7, pc}
 80628d0:	2000547c 	.word	0x2000547c

080628d4 <gpsTimerCallback>:

/* gpsTimerCallback function */
void gpsTimerCallback(void *argument)
{
 80628d4:	b580      	push	{r7, lr}
 80628d6:	b082      	sub	sp, #8
 80628d8:	af00      	add	r7, sp, #0
 80628da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gpsTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00000100U);
 80628dc:	4b05      	ldr	r3, [pc, #20]	; (80628f4 <gpsTimerCallback+0x20>)
 80628de:	681b      	ldr	r3, [r3, #0]
 80628e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80628e4:	4618      	mov	r0, r3
 80628e6:	f00b f819 	bl	806d91c <osThreadFlagsSet>
  /* USER CODE END gpsTimerCallback */
}
 80628ea:	bf00      	nop
 80628ec:	3708      	adds	r7, #8
 80628ee:	46bd      	mov	sp, r7
 80628f0:	bd80      	pop	{r7, pc}
 80628f2:	bf00      	nop
 80628f4:	2000547c 	.word	0x2000547c

080628f8 <lightTimerCallback>:

/* lightTimerCallback function */
void lightTimerCallback(void *argument)
{
 80628f8:	b580      	push	{r7, lr}
 80628fa:	b082      	sub	sp, #8
 80628fc:	af00      	add	r7, sp, #0
 80628fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lightTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00001000U);
 8062900:	4b05      	ldr	r3, [pc, #20]	; (8062918 <lightTimerCallback+0x20>)
 8062902:	681b      	ldr	r3, [r3, #0]
 8062904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8062908:	4618      	mov	r0, r3
 806290a:	f00b f807 	bl	806d91c <osThreadFlagsSet>
  /* USER CODE END lightTimerCallback */
}
 806290e:	bf00      	nop
 8062910:	3708      	adds	r7, #8
 8062912:	46bd      	mov	sp, r7
 8062914:	bd80      	pop	{r7, pc}
 8062916:	bf00      	nop
 8062918:	2000547c 	.word	0x2000547c

0806291c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN Application */
/*
 * [IMPORTANT] TODO: Note that this functoin is unsafe (as we might interrupt uart usage)
 * Actually not, as we would transmit only after this
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 806291c:	b580      	push	{r7, lr}
 806291e:	b084      	sub	sp, #16
 8062920:	af00      	add	r7, sp, #0
 8062922:	6078      	str	r0, [r7, #4]
     if (huart == &huart2) {
 8062924:	687b      	ldr	r3, [r7, #4]
 8062926:	4a25      	ldr	r2, [pc, #148]	; (80629bc <HAL_UART_RxCpltCallback+0xa0>)
 8062928:	4293      	cmp	r3, r2
 806292a:	d141      	bne.n	80629b0 <HAL_UART_RxCpltCallback+0x94>
    	 int val = (int) (notification_buffer[0] - '0');
 806292c:	4b24      	ldr	r3, [pc, #144]	; (80629c0 <HAL_UART_RxCpltCallback+0xa4>)
 806292e:	781b      	ldrb	r3, [r3, #0]
 8062930:	3b30      	subs	r3, #48	; 0x30
 8062932:	60fb      	str	r3, [r7, #12]
		 switch (val) {
 8062934:	68fb      	ldr	r3, [r7, #12]
 8062936:	2b00      	cmp	r3, #0
 8062938:	d003      	beq.n	8062942 <HAL_UART_RxCpltCallback+0x26>
 806293a:	68fb      	ldr	r3, [r7, #12]
 806293c:	2b01      	cmp	r3, #1
 806293e:	d006      	beq.n	806294e <HAL_UART_RxCpltCallback+0x32>
 8062940:	e020      	b.n	8062984 <HAL_UART_RxCpltCallback+0x68>
		 case 0:
			 osSemaphoreRelease(rxThreadSemHandle);
 8062942:	4b20      	ldr	r3, [pc, #128]	; (80629c4 <HAL_UART_RxCpltCallback+0xa8>)
 8062944:	681b      	ldr	r3, [r3, #0]
 8062946:	4618      	mov	r0, r3
 8062948:	f00b fbda 	bl	806e100 <osSemaphoreRelease>
			 break;
 806294c:	e031      	b.n	80629b2 <HAL_UART_RxCpltCallback+0x96>
		 case 1:
			 status = osSemaphoreRelease(txThreadSemHandle);
 806294e:	4b1e      	ldr	r3, [pc, #120]	; (80629c8 <HAL_UART_RxCpltCallback+0xac>)
 8062950:	681b      	ldr	r3, [r3, #0]
 8062952:	4618      	mov	r0, r3
 8062954:	f00b fbd4 	bl	806e100 <osSemaphoreRelease>
 8062958:	4603      	mov	r3, r0
 806295a:	4a1c      	ldr	r2, [pc, #112]	; (80629cc <HAL_UART_RxCpltCallback+0xb0>)
 806295c:	6013      	str	r3, [r2, #0]
			 myprintf("[INFO]: status of semaphore release: %d\n", status);
 806295e:	4b1b      	ldr	r3, [pc, #108]	; (80629cc <HAL_UART_RxCpltCallback+0xb0>)
 8062960:	681b      	ldr	r3, [r3, #0]
 8062962:	461a      	mov	r2, r3
 8062964:	491a      	ldr	r1, [pc, #104]	; (80629d0 <HAL_UART_RxCpltCallback+0xb4>)
 8062966:	481b      	ldr	r0, [pc, #108]	; (80629d4 <HAL_UART_RxCpltCallback+0xb8>)
 8062968:	f010 fa16 	bl	8072d98 <siprintf>
 806296c:	4819      	ldr	r0, [pc, #100]	; (80629d4 <HAL_UART_RxCpltCallback+0xb8>)
 806296e:	f7fd fc41 	bl	80601f4 <strlen>
 8062972:	4603      	mov	r3, r0
 8062974:	b29a      	uxth	r2, r3
 8062976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806297a:	4916      	ldr	r1, [pc, #88]	; (80629d4 <HAL_UART_RxCpltCallback+0xb8>)
 806297c:	480f      	ldr	r0, [pc, #60]	; (80629bc <HAL_UART_RxCpltCallback+0xa0>)
 806297e:	f006 fbb3 	bl	80690e8 <HAL_UART_Transmit>
			 break;
 8062982:	e016      	b.n	80629b2 <HAL_UART_RxCpltCallback+0x96>
		 default:
			 myprintf("[ERROR]: Op not allowed: %d\n", val);
 8062984:	68fa      	ldr	r2, [r7, #12]
 8062986:	4914      	ldr	r1, [pc, #80]	; (80629d8 <HAL_UART_RxCpltCallback+0xbc>)
 8062988:	4812      	ldr	r0, [pc, #72]	; (80629d4 <HAL_UART_RxCpltCallback+0xb8>)
 806298a:	f010 fa05 	bl	8072d98 <siprintf>
 806298e:	4811      	ldr	r0, [pc, #68]	; (80629d4 <HAL_UART_RxCpltCallback+0xb8>)
 8062990:	f7fd fc30 	bl	80601f4 <strlen>
 8062994:	4603      	mov	r3, r0
 8062996:	b29a      	uxth	r2, r3
 8062998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806299c:	490d      	ldr	r1, [pc, #52]	; (80629d4 <HAL_UART_RxCpltCallback+0xb8>)
 806299e:	4807      	ldr	r0, [pc, #28]	; (80629bc <HAL_UART_RxCpltCallback+0xa0>)
 80629a0:	f006 fba2 	bl	80690e8 <HAL_UART_Transmit>
			 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 80629a4:	2201      	movs	r2, #1
 80629a6:	4906      	ldr	r1, [pc, #24]	; (80629c0 <HAL_UART_RxCpltCallback+0xa4>)
 80629a8:	4804      	ldr	r0, [pc, #16]	; (80629bc <HAL_UART_RxCpltCallback+0xa0>)
 80629aa:	f006 fcd1 	bl	8069350 <HAL_UART_Receive_IT>
			 break;
 80629ae:	e000      	b.n	80629b2 <HAL_UART_RxCpltCallback+0x96>
		 };
 80629b0:	bf00      	nop

     }
}
 80629b2:	bf00      	nop
 80629b4:	3710      	adds	r7, #16
 80629b6:	46bd      	mov	sp, r7
 80629b8:	bd80      	pop	{r7, pc}
 80629ba:	bf00      	nop
 80629bc:	20005808 	.word	0x20005808
 80629c0:	20004e30 	.word	0x20004e30
 80629c4:	20005228 	.word	0x20005228
 80629c8:	20005478 	.word	0x20005478
 80629cc:	200056b8 	.word	0x200056b8
 80629d0:	08076984 	.word	0x08076984
 80629d4:	2000021c 	.word	0x2000021c
 80629d8:	080769b0 	.word	0x080769b0

080629dc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80629dc:	b580      	push	{r7, lr}
 80629de:	b08c      	sub	sp, #48	; 0x30
 80629e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80629e2:	f107 031c 	add.w	r3, r7, #28
 80629e6:	2200      	movs	r2, #0
 80629e8:	601a      	str	r2, [r3, #0]
 80629ea:	605a      	str	r2, [r3, #4]
 80629ec:	609a      	str	r2, [r3, #8]
 80629ee:	60da      	str	r2, [r3, #12]
 80629f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80629f2:	2300      	movs	r3, #0
 80629f4:	61bb      	str	r3, [r7, #24]
 80629f6:	4ba5      	ldr	r3, [pc, #660]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 80629f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80629fa:	4aa4      	ldr	r2, [pc, #656]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 80629fc:	f043 0310 	orr.w	r3, r3, #16
 8062a00:	6313      	str	r3, [r2, #48]	; 0x30
 8062a02:	4ba2      	ldr	r3, [pc, #648]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a06:	f003 0310 	and.w	r3, r3, #16
 8062a0a:	61bb      	str	r3, [r7, #24]
 8062a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8062a0e:	2300      	movs	r3, #0
 8062a10:	617b      	str	r3, [r7, #20]
 8062a12:	4b9e      	ldr	r3, [pc, #632]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a16:	4a9d      	ldr	r2, [pc, #628]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a18:	f043 0304 	orr.w	r3, r3, #4
 8062a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8062a1e:	4b9b      	ldr	r3, [pc, #620]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a22:	f003 0304 	and.w	r3, r3, #4
 8062a26:	617b      	str	r3, [r7, #20]
 8062a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8062a2a:	2300      	movs	r3, #0
 8062a2c:	613b      	str	r3, [r7, #16]
 8062a2e:	4b97      	ldr	r3, [pc, #604]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a32:	4a96      	ldr	r2, [pc, #600]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8062a38:	6313      	str	r3, [r2, #48]	; 0x30
 8062a3a:	4b94      	ldr	r3, [pc, #592]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8062a42:	613b      	str	r3, [r7, #16]
 8062a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8062a46:	2300      	movs	r3, #0
 8062a48:	60fb      	str	r3, [r7, #12]
 8062a4a:	4b90      	ldr	r3, [pc, #576]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a4e:	4a8f      	ldr	r2, [pc, #572]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a50:	f043 0301 	orr.w	r3, r3, #1
 8062a54:	6313      	str	r3, [r2, #48]	; 0x30
 8062a56:	4b8d      	ldr	r3, [pc, #564]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a5a:	f003 0301 	and.w	r3, r3, #1
 8062a5e:	60fb      	str	r3, [r7, #12]
 8062a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8062a62:	2300      	movs	r3, #0
 8062a64:	60bb      	str	r3, [r7, #8]
 8062a66:	4b89      	ldr	r3, [pc, #548]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a6a:	4a88      	ldr	r2, [pc, #544]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a6c:	f043 0302 	orr.w	r3, r3, #2
 8062a70:	6313      	str	r3, [r2, #48]	; 0x30
 8062a72:	4b86      	ldr	r3, [pc, #536]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a76:	f003 0302 	and.w	r3, r3, #2
 8062a7a:	60bb      	str	r3, [r7, #8]
 8062a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8062a7e:	2300      	movs	r3, #0
 8062a80:	607b      	str	r3, [r7, #4]
 8062a82:	4b82      	ldr	r3, [pc, #520]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a86:	4a81      	ldr	r2, [pc, #516]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a88:	f043 0308 	orr.w	r3, r3, #8
 8062a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8062a8e:	4b7f      	ldr	r3, [pc, #508]	; (8062c8c <MX_GPIO_Init+0x2b0>)
 8062a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a92:	f003 0308 	and.w	r3, r3, #8
 8062a96:	607b      	str	r3, [r7, #4]
 8062a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8062a9a:	2200      	movs	r2, #0
 8062a9c:	2108      	movs	r1, #8
 8062a9e:	487c      	ldr	r0, [pc, #496]	; (8062c90 <MX_GPIO_Init+0x2b4>)
 8062aa0:	f003 f814 	bl	8065acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8062aa4:	2201      	movs	r2, #1
 8062aa6:	2101      	movs	r1, #1
 8062aa8:	487a      	ldr	r0, [pc, #488]	; (8062c94 <MX_GPIO_Init+0x2b8>)
 8062aaa:	f003 f80f 	bl	8065acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8062aae:	2200      	movs	r2, #0
 8062ab0:	2102      	movs	r1, #2
 8062ab2:	4879      	ldr	r0, [pc, #484]	; (8062c98 <MX_GPIO_Init+0x2bc>)
 8062ab4:	f003 f80a 	bl	8065acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8062ab8:	2200      	movs	r2, #0
 8062aba:	f24f 0110 	movw	r1, #61456	; 0xf010
 8062abe:	4877      	ldr	r0, [pc, #476]	; (8062c9c <MX_GPIO_Init+0x2c0>)
 8062ac0:	f003 f804 	bl	8065acc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BootPin_GPIO_Port, BootPin_Pin, GPIO_PIN_RESET);
 8062ac4:	2200      	movs	r2, #0
 8062ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8062aca:	4875      	ldr	r0, [pc, #468]	; (8062ca0 <MX_GPIO_Init+0x2c4>)
 8062acc:	f002 fffe 	bl	8065acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8062ad0:	2304      	movs	r3, #4
 8062ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8062ad4:	2300      	movs	r3, #0
 8062ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062ad8:	2300      	movs	r3, #0
 8062ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8062adc:	f107 031c 	add.w	r3, r7, #28
 8062ae0:	4619      	mov	r1, r3
 8062ae2:	486b      	ldr	r0, [pc, #428]	; (8062c90 <MX_GPIO_Init+0x2b4>)
 8062ae4:	f002 fd56 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8062ae8:	2308      	movs	r3, #8
 8062aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062aec:	2301      	movs	r3, #1
 8062aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062af0:	2300      	movs	r3, #0
 8062af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062af4:	2300      	movs	r3, #0
 8062af6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8062af8:	f107 031c 	add.w	r3, r7, #28
 8062afc:	4619      	mov	r1, r3
 8062afe:	4864      	ldr	r0, [pc, #400]	; (8062c90 <MX_GPIO_Init+0x2b4>)
 8062b00:	f002 fd48 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8062b04:	2330      	movs	r3, #48	; 0x30
 8062b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8062b08:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8062b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b0e:	2300      	movs	r3, #0
 8062b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8062b12:	f107 031c 	add.w	r3, r7, #28
 8062b16:	4619      	mov	r1, r3
 8062b18:	485d      	ldr	r0, [pc, #372]	; (8062c90 <MX_GPIO_Init+0x2b4>)
 8062b1a:	f002 fd3b 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8062b1e:	2301      	movs	r3, #1
 8062b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062b22:	2301      	movs	r3, #1
 8062b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b26:	2300      	movs	r3, #0
 8062b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062b2a:	2300      	movs	r3, #0
 8062b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8062b2e:	f107 031c 	add.w	r3, r7, #28
 8062b32:	4619      	mov	r1, r3
 8062b34:	4857      	ldr	r0, [pc, #348]	; (8062c94 <MX_GPIO_Init+0x2b8>)
 8062b36:	f002 fd2d 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8062b3a:	2308      	movs	r3, #8
 8062b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062b3e:	2302      	movs	r3, #2
 8062b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b42:	2300      	movs	r3, #0
 8062b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062b46:	2300      	movs	r3, #0
 8062b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8062b4a:	2305      	movs	r3, #5
 8062b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8062b4e:	f107 031c 	add.w	r3, r7, #28
 8062b52:	4619      	mov	r1, r3
 8062b54:	484f      	ldr	r0, [pc, #316]	; (8062c94 <MX_GPIO_Init+0x2b8>)
 8062b56:	f002 fd1d 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8062b5a:	2301      	movs	r3, #1
 8062b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8062b5e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8062b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b64:	2300      	movs	r3, #0
 8062b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8062b68:	f107 031c 	add.w	r3, r7, #28
 8062b6c:	4619      	mov	r1, r3
 8062b6e:	484c      	ldr	r0, [pc, #304]	; (8062ca0 <MX_GPIO_Init+0x2c4>)
 8062b70:	f002 fd10 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8062b74:	2310      	movs	r3, #16
 8062b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062b78:	2302      	movs	r3, #2
 8062b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b7c:	2300      	movs	r3, #0
 8062b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062b80:	2300      	movs	r3, #0
 8062b82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8062b84:	2306      	movs	r3, #6
 8062b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8062b88:	f107 031c 	add.w	r3, r7, #28
 8062b8c:	4619      	mov	r1, r3
 8062b8e:	4844      	ldr	r0, [pc, #272]	; (8062ca0 <MX_GPIO_Init+0x2c4>)
 8062b90:	f002 fd00 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8062b94:	2302      	movs	r3, #2
 8062b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062b98:	2301      	movs	r3, #1
 8062b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b9c:	2300      	movs	r3, #0
 8062b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062ba0:	2300      	movs	r3, #0
 8062ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8062ba4:	f107 031c 	add.w	r3, r7, #28
 8062ba8:	4619      	mov	r1, r3
 8062baa:	483b      	ldr	r0, [pc, #236]	; (8062c98 <MX_GPIO_Init+0x2bc>)
 8062bac:	f002 fcf2 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8062bb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8062bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062bb6:	2302      	movs	r3, #2
 8062bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062bba:	2300      	movs	r3, #0
 8062bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062bbe:	2300      	movs	r3, #0
 8062bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8062bc2:	2305      	movs	r3, #5
 8062bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8062bc6:	f107 031c 	add.w	r3, r7, #28
 8062bca:	4619      	mov	r1, r3
 8062bcc:	4832      	ldr	r0, [pc, #200]	; (8062c98 <MX_GPIO_Init+0x2bc>)
 8062bce:	f002 fce1 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8062bd2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8062bd6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062bd8:	2301      	movs	r3, #1
 8062bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062bdc:	2300      	movs	r3, #0
 8062bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062be0:	2300      	movs	r3, #0
 8062be2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8062be4:	f107 031c 	add.w	r3, r7, #28
 8062be8:	4619      	mov	r1, r3
 8062bea:	482c      	ldr	r0, [pc, #176]	; (8062c9c <MX_GPIO_Init+0x2c0>)
 8062bec:	f002 fcd2 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8062bf0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8062bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062bf6:	2302      	movs	r3, #2
 8062bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062bfa:	2300      	movs	r3, #0
 8062bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062bfe:	2300      	movs	r3, #0
 8062c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8062c02:	2306      	movs	r3, #6
 8062c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8062c06:	f107 031c 	add.w	r3, r7, #28
 8062c0a:	4619      	mov	r1, r3
 8062c0c:	4821      	ldr	r0, [pc, #132]	; (8062c94 <MX_GPIO_Init+0x2b8>)
 8062c0e:	f002 fcc1 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BootPin_Pin;
 8062c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8062c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062c18:	2301      	movs	r3, #1
 8062c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062c1c:	2300      	movs	r3, #0
 8062c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062c20:	2300      	movs	r3, #0
 8062c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BootPin_GPIO_Port, &GPIO_InitStruct);
 8062c24:	f107 031c 	add.w	r3, r7, #28
 8062c28:	4619      	mov	r1, r3
 8062c2a:	481d      	ldr	r0, [pc, #116]	; (8062ca0 <MX_GPIO_Init+0x2c4>)
 8062c2c:	f002 fcb2 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8062c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8062c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8062c36:	2300      	movs	r3, #0
 8062c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062c3a:	2300      	movs	r3, #0
 8062c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8062c3e:	f107 031c 	add.w	r3, r7, #28
 8062c42:	4619      	mov	r1, r3
 8062c44:	4816      	ldr	r0, [pc, #88]	; (8062ca0 <MX_GPIO_Init+0x2c4>)
 8062c46:	f002 fca5 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8062c4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8062c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062c50:	2302      	movs	r3, #2
 8062c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062c54:	2300      	movs	r3, #0
 8062c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8062c58:	2303      	movs	r3, #3
 8062c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8062c5c:	230a      	movs	r3, #10
 8062c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8062c60:	f107 031c 	add.w	r3, r7, #28
 8062c64:	4619      	mov	r1, r3
 8062c66:	480e      	ldr	r0, [pc, #56]	; (8062ca0 <MX_GPIO_Init+0x2c4>)
 8062c68:	f002 fc94 	bl	8065594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8062c6c:	2320      	movs	r3, #32
 8062c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8062c70:	2300      	movs	r3, #0
 8062c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062c74:	2300      	movs	r3, #0
 8062c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8062c78:	f107 031c 	add.w	r3, r7, #28
 8062c7c:	4619      	mov	r1, r3
 8062c7e:	4807      	ldr	r0, [pc, #28]	; (8062c9c <MX_GPIO_Init+0x2c0>)
 8062c80:	f002 fc88 	bl	8065594 <HAL_GPIO_Init>

}
 8062c84:	bf00      	nop
 8062c86:	3730      	adds	r7, #48	; 0x30
 8062c88:	46bd      	mov	sp, r7
 8062c8a:	bd80      	pop	{r7, pc}
 8062c8c:	40023800 	.word	0x40023800
 8062c90:	40021000 	.word	0x40021000
 8062c94:	40020800 	.word	0x40020800
 8062c98:	40020400 	.word	0x40020400
 8062c9c:	40020c00 	.word	0x40020c00
 8062ca0:	40020000 	.word	0x40020000

08062ca4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8062ca4:	b580      	push	{r7, lr}
 8062ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8062ca8:	4b12      	ldr	r3, [pc, #72]	; (8062cf4 <MX_I2C1_Init+0x50>)
 8062caa:	4a13      	ldr	r2, [pc, #76]	; (8062cf8 <MX_I2C1_Init+0x54>)
 8062cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8062cae:	4b11      	ldr	r3, [pc, #68]	; (8062cf4 <MX_I2C1_Init+0x50>)
 8062cb0:	4a12      	ldr	r2, [pc, #72]	; (8062cfc <MX_I2C1_Init+0x58>)
 8062cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8062cb4:	4b0f      	ldr	r3, [pc, #60]	; (8062cf4 <MX_I2C1_Init+0x50>)
 8062cb6:	2200      	movs	r2, #0
 8062cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8062cba:	4b0e      	ldr	r3, [pc, #56]	; (8062cf4 <MX_I2C1_Init+0x50>)
 8062cbc:	2200      	movs	r2, #0
 8062cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8062cc0:	4b0c      	ldr	r3, [pc, #48]	; (8062cf4 <MX_I2C1_Init+0x50>)
 8062cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8062cc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8062cc8:	4b0a      	ldr	r3, [pc, #40]	; (8062cf4 <MX_I2C1_Init+0x50>)
 8062cca:	2200      	movs	r2, #0
 8062ccc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8062cce:	4b09      	ldr	r3, [pc, #36]	; (8062cf4 <MX_I2C1_Init+0x50>)
 8062cd0:	2200      	movs	r2, #0
 8062cd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8062cd4:	4b07      	ldr	r3, [pc, #28]	; (8062cf4 <MX_I2C1_Init+0x50>)
 8062cd6:	2200      	movs	r2, #0
 8062cd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8062cda:	4b06      	ldr	r3, [pc, #24]	; (8062cf4 <MX_I2C1_Init+0x50>)
 8062cdc:	2200      	movs	r2, #0
 8062cde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8062ce0:	4804      	ldr	r0, [pc, #16]	; (8062cf4 <MX_I2C1_Init+0x50>)
 8062ce2:	f002 ff25 	bl	8065b30 <HAL_I2C_Init>
 8062ce6:	4603      	mov	r3, r0
 8062ce8:	2b00      	cmp	r3, #0
 8062cea:	d001      	beq.n	8062cf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8062cec:	f000 f9e0 	bl	80630b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8062cf0:	bf00      	nop
 8062cf2:	bd80      	pop	{r7, pc}
 8062cf4:	200056bc 	.word	0x200056bc
 8062cf8:	40005400 	.word	0x40005400
 8062cfc:	000186a0 	.word	0x000186a0

08062d00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8062d00:	b580      	push	{r7, lr}
 8062d02:	b08a      	sub	sp, #40	; 0x28
 8062d04:	af00      	add	r7, sp, #0
 8062d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8062d08:	f107 0314 	add.w	r3, r7, #20
 8062d0c:	2200      	movs	r2, #0
 8062d0e:	601a      	str	r2, [r3, #0]
 8062d10:	605a      	str	r2, [r3, #4]
 8062d12:	609a      	str	r2, [r3, #8]
 8062d14:	60da      	str	r2, [r3, #12]
 8062d16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8062d18:	687b      	ldr	r3, [r7, #4]
 8062d1a:	681b      	ldr	r3, [r3, #0]
 8062d1c:	4a19      	ldr	r2, [pc, #100]	; (8062d84 <HAL_I2C_MspInit+0x84>)
 8062d1e:	4293      	cmp	r3, r2
 8062d20:	d12c      	bne.n	8062d7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8062d22:	2300      	movs	r3, #0
 8062d24:	613b      	str	r3, [r7, #16]
 8062d26:	4b18      	ldr	r3, [pc, #96]	; (8062d88 <HAL_I2C_MspInit+0x88>)
 8062d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062d2a:	4a17      	ldr	r2, [pc, #92]	; (8062d88 <HAL_I2C_MspInit+0x88>)
 8062d2c:	f043 0302 	orr.w	r3, r3, #2
 8062d30:	6313      	str	r3, [r2, #48]	; 0x30
 8062d32:	4b15      	ldr	r3, [pc, #84]	; (8062d88 <HAL_I2C_MspInit+0x88>)
 8062d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062d36:	f003 0302 	and.w	r3, r3, #2
 8062d3a:	613b      	str	r3, [r7, #16]
 8062d3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8062d3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8062d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8062d44:	2312      	movs	r3, #18
 8062d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062d48:	2300      	movs	r3, #0
 8062d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8062d4c:	2303      	movs	r3, #3
 8062d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8062d50:	2304      	movs	r3, #4
 8062d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8062d54:	f107 0314 	add.w	r3, r7, #20
 8062d58:	4619      	mov	r1, r3
 8062d5a:	480c      	ldr	r0, [pc, #48]	; (8062d8c <HAL_I2C_MspInit+0x8c>)
 8062d5c:	f002 fc1a 	bl	8065594 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8062d60:	2300      	movs	r3, #0
 8062d62:	60fb      	str	r3, [r7, #12]
 8062d64:	4b08      	ldr	r3, [pc, #32]	; (8062d88 <HAL_I2C_MspInit+0x88>)
 8062d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062d68:	4a07      	ldr	r2, [pc, #28]	; (8062d88 <HAL_I2C_MspInit+0x88>)
 8062d6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8062d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8062d70:	4b05      	ldr	r3, [pc, #20]	; (8062d88 <HAL_I2C_MspInit+0x88>)
 8062d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8062d78:	60fb      	str	r3, [r7, #12]
 8062d7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8062d7c:	bf00      	nop
 8062d7e:	3728      	adds	r7, #40	; 0x28
 8062d80:	46bd      	mov	sp, r7
 8062d82:	bd80      	pop	{r7, pc}
 8062d84:	40005400 	.word	0x40005400
 8062d88:	40023800 	.word	0x40023800
 8062d8c:	40020400 	.word	0x40020400

08062d90 <I2C_WriteBuffer>:
  /* USER CODE END I2C1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int I2C_WriteBuffer(uint8_t I2C_ADDRESS, uint8_t *aTxBuffer, uint8_t TXBUFFERSIZE) {
 8062d90:	b580      	push	{r7, lr}
 8062d92:	b084      	sub	sp, #16
 8062d94:	af02      	add	r7, sp, #8
 8062d96:	4603      	mov	r3, r0
 8062d98:	6039      	str	r1, [r7, #0]
 8062d9a:	71fb      	strb	r3, [r7, #7]
 8062d9c:	4613      	mov	r3, r2
 8062d9e:	71bb      	strb	r3, [r7, #6]
    while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 8062da0:	e007      	b.n	8062db2 <I2C_WriteBuffer+0x22>
        if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF){
 8062da2:	4812      	ldr	r0, [pc, #72]	; (8062dec <I2C_WriteBuffer+0x5c>)
 8062da4:	f003 fefa 	bl	8066b9c <HAL_I2C_GetError>
 8062da8:	4603      	mov	r3, r0
 8062daa:	2b04      	cmp	r3, #4
 8062dac:	d001      	beq.n	8062db2 <I2C_WriteBuffer+0x22>
            // _Error_Handler(__FILE__, aTxBuffer[0]);
        	return 1;
 8062dae:	2301      	movs	r3, #1
 8062db0:	e017      	b.n	8062de2 <I2C_WriteBuffer+0x52>
    while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 8062db2:	79fb      	ldrb	r3, [r7, #7]
 8062db4:	b29b      	uxth	r3, r3
 8062db6:	005b      	lsls	r3, r3, #1
 8062db8:	b299      	uxth	r1, r3
 8062dba:	79bb      	ldrb	r3, [r7, #6]
 8062dbc:	b29b      	uxth	r3, r3
 8062dbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8062dc2:	9200      	str	r2, [sp, #0]
 8062dc4:	683a      	ldr	r2, [r7, #0]
 8062dc6:	4809      	ldr	r0, [pc, #36]	; (8062dec <I2C_WriteBuffer+0x5c>)
 8062dc8:	f003 f87e 	bl	8065ec8 <HAL_I2C_Master_Transmit>
 8062dcc:	4603      	mov	r3, r0
 8062dce:	2b00      	cmp	r3, #0
 8062dd0:	d1e7      	bne.n	8062da2 <I2C_WriteBuffer+0x12>
        }

    }

      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8062dd2:	bf00      	nop
 8062dd4:	4805      	ldr	r0, [pc, #20]	; (8062dec <I2C_WriteBuffer+0x5c>)
 8062dd6:	f003 fed3 	bl	8066b80 <HAL_I2C_GetState>
 8062dda:	4603      	mov	r3, r0
 8062ddc:	2b20      	cmp	r3, #32
 8062dde:	d1f9      	bne.n	8062dd4 <I2C_WriteBuffer+0x44>

      return 0;
 8062de0:	2300      	movs	r3, #0
}
 8062de2:	4618      	mov	r0, r3
 8062de4:	3708      	adds	r7, #8
 8062de6:	46bd      	mov	sp, r7
 8062de8:	bd80      	pop	{r7, pc}
 8062dea:	bf00      	nop
 8062dec:	200056bc 	.word	0x200056bc

08062df0 <I2C_ReadBuffer>:

int I2C_ReadBuffer(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t *aRxBuffer, uint8_t RXBUFFERSIZE){
 8062df0:	b580      	push	{r7, lr}
 8062df2:	b084      	sub	sp, #16
 8062df4:	af02      	add	r7, sp, #8
 8062df6:	603a      	str	r2, [r7, #0]
 8062df8:	461a      	mov	r2, r3
 8062dfa:	4603      	mov	r3, r0
 8062dfc:	71fb      	strb	r3, [r7, #7]
 8062dfe:	460b      	mov	r3, r1
 8062e00:	71bb      	strb	r3, [r7, #6]
 8062e02:	4613      	mov	r3, r2
 8062e04:	717b      	strb	r3, [r7, #5]

    I2C_WriteBuffer(I2C_ADDRESS, &RegAddr, 1);
 8062e06:	1db9      	adds	r1, r7, #6
 8062e08:	79fb      	ldrb	r3, [r7, #7]
 8062e0a:	2201      	movs	r2, #1
 8062e0c:	4618      	mov	r0, r3
 8062e0e:	f7ff ffbf 	bl	8062d90 <I2C_WriteBuffer>

    while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 8062e12:	e007      	b.n	8062e24 <I2C_ReadBuffer+0x34>
        if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF){
 8062e14:	4811      	ldr	r0, [pc, #68]	; (8062e5c <I2C_ReadBuffer+0x6c>)
 8062e16:	f003 fec1 	bl	8066b9c <HAL_I2C_GetError>
 8062e1a:	4603      	mov	r3, r0
 8062e1c:	2b04      	cmp	r3, #4
 8062e1e:	d001      	beq.n	8062e24 <I2C_ReadBuffer+0x34>
            // _Error_Handler(__FILE__, __LINE__);
        	return 1;
 8062e20:	2301      	movs	r3, #1
 8062e22:	e017      	b.n	8062e54 <I2C_ReadBuffer+0x64>
    while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 8062e24:	79fb      	ldrb	r3, [r7, #7]
 8062e26:	b29b      	uxth	r3, r3
 8062e28:	005b      	lsls	r3, r3, #1
 8062e2a:	b299      	uxth	r1, r3
 8062e2c:	797b      	ldrb	r3, [r7, #5]
 8062e2e:	b29b      	uxth	r3, r3
 8062e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8062e34:	9200      	str	r2, [sp, #0]
 8062e36:	683a      	ldr	r2, [r7, #0]
 8062e38:	4808      	ldr	r0, [pc, #32]	; (8062e5c <I2C_ReadBuffer+0x6c>)
 8062e3a:	f003 f943 	bl	80660c4 <HAL_I2C_Master_Receive>
 8062e3e:	4603      	mov	r3, r0
 8062e40:	2b00      	cmp	r3, #0
 8062e42:	d1e7      	bne.n	8062e14 <I2C_ReadBuffer+0x24>
        }
    }

    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8062e44:	bf00      	nop
 8062e46:	4805      	ldr	r0, [pc, #20]	; (8062e5c <I2C_ReadBuffer+0x6c>)
 8062e48:	f003 fe9a 	bl	8066b80 <HAL_I2C_GetState>
 8062e4c:	4603      	mov	r3, r0
 8062e4e:	2b20      	cmp	r3, #32
 8062e50:	d1f9      	bne.n	8062e46 <I2C_ReadBuffer+0x56>

    return 0;
 8062e52:	2300      	movs	r3, #0
}
 8062e54:	4618      	mov	r0, r3
 8062e56:	3708      	adds	r7, #8
 8062e58:	46bd      	mov	sp, r7
 8062e5a:	bd80      	pop	{r7, pc}
 8062e5c:	200056bc 	.word	0x200056bc

08062e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8062e60:	b580      	push	{r7, lr}
 8062e62:	b082      	sub	sp, #8
 8062e64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8062e66:	f000 fd6b 	bl	8063940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8062e6a:	f000 f8a7 	bl	8062fbc <SystemClock_Config>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8062e6e:	b672      	cpsid	i
}
 8062e70:	bf00      	nop

  /* USER CODE BEGIN SysInit */
  __disable_irq();
  SCB->VTOR = (FLASH_BASE | 0x60000U);
 8062e72:	4b45      	ldr	r3, [pc, #276]	; (8062f88 <main+0x128>)
 8062e74:	4a45      	ldr	r2, [pc, #276]	; (8062f8c <main+0x12c>)
 8062e76:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8062e78:	b662      	cpsie	i
}
 8062e7a:	bf00      	nop
  __enable_irq();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8062e7c:	f7ff fdae 	bl	80629dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8062e80:	f7ff ff10 	bl	8062ca4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8062e84:	f000 f9b2 	bl	80631ec <MX_SPI1_Init>
  MX_FATFS_Init();
 8062e88:	f007 f98c 	bl	806a1a4 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8062e8c:	f000 fc60 	bl	8063750 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8062e90:	f7ff f80a 	bl	8061ea8 <MX_DMA_Init>
  MX_ADC1_Init();
 8062e94:	f7fe fa04 	bl	80612a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8062e98:	f000 fc30 	bl	80636fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // delay needed for sd to stabilize as well as to make the upload
  // of new firmware possible (boot related issue);
  HAL_Delay(2000);
 8062e9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8062ea0:	f000 fd90 	bl	80639c4 <HAL_Delay>

  int initStatus = -1;
 8062ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062ea8:	607b      	str	r3, [r7, #4]

  initStatus = MPU6050_Init();
 8062eaa:	f000 f911 	bl	80630d0 <MPU6050_Init>
 8062eae:	6078      	str	r0, [r7, #4]
  myprintf("[INFO]: acc, gyro initialisation status: %d\n", initStatus);
 8062eb0:	687a      	ldr	r2, [r7, #4]
 8062eb2:	4937      	ldr	r1, [pc, #220]	; (8062f90 <main+0x130>)
 8062eb4:	4837      	ldr	r0, [pc, #220]	; (8062f94 <main+0x134>)
 8062eb6:	f00f ff6f 	bl	8072d98 <siprintf>
 8062eba:	4836      	ldr	r0, [pc, #216]	; (8062f94 <main+0x134>)
 8062ebc:	f7fd f99a 	bl	80601f4 <strlen>
 8062ec0:	4603      	mov	r3, r0
 8062ec2:	b29a      	uxth	r2, r3
 8062ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062ec8:	4932      	ldr	r1, [pc, #200]	; (8062f94 <main+0x134>)
 8062eca:	4833      	ldr	r0, [pc, #204]	; (8062f98 <main+0x138>)
 8062ecc:	f006 f90c 	bl	80690e8 <HAL_UART_Transmit>

  bmp280_init_default_params(&bmp280.params);
 8062ed0:	4832      	ldr	r0, [pc, #200]	; (8062f9c <main+0x13c>)
 8062ed2:	f7fe fab5 	bl	8061440 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8062ed6:	4b32      	ldr	r3, [pc, #200]	; (8062fa0 <main+0x140>)
 8062ed8:	2276      	movs	r2, #118	; 0x76
 8062eda:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8062edc:	4b30      	ldr	r3, [pc, #192]	; (8062fa0 <main+0x140>)
 8062ede:	4a31      	ldr	r2, [pc, #196]	; (8062fa4 <main+0x144>)
 8062ee0:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8062ee2:	e012      	b.n	8062f0a <main+0xaa>
      	myprintf("[ERROR]: bmp280 init failed\n");
 8062ee4:	4930      	ldr	r1, [pc, #192]	; (8062fa8 <main+0x148>)
 8062ee6:	482b      	ldr	r0, [pc, #172]	; (8062f94 <main+0x134>)
 8062ee8:	f00f ff56 	bl	8072d98 <siprintf>
 8062eec:	4829      	ldr	r0, [pc, #164]	; (8062f94 <main+0x134>)
 8062eee:	f7fd f981 	bl	80601f4 <strlen>
 8062ef2:	4603      	mov	r3, r0
 8062ef4:	b29a      	uxth	r2, r3
 8062ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062efa:	4926      	ldr	r1, [pc, #152]	; (8062f94 <main+0x134>)
 8062efc:	4826      	ldr	r0, [pc, #152]	; (8062f98 <main+0x138>)
 8062efe:	f006 f8f3 	bl	80690e8 <HAL_UART_Transmit>
      	HAL_Delay(2000);
 8062f02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8062f06:	f000 fd5d 	bl	80639c4 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8062f0a:	4924      	ldr	r1, [pc, #144]	; (8062f9c <main+0x13c>)
 8062f0c:	4824      	ldr	r0, [pc, #144]	; (8062fa0 <main+0x140>)
 8062f0e:	f7fe fc11 	bl	8061734 <bmp280_init>
 8062f12:	4603      	mov	r3, r0
 8062f14:	f083 0301 	eor.w	r3, r3, #1
 8062f18:	b2db      	uxtb	r3, r3
 8062f1a:	2b00      	cmp	r3, #0
 8062f1c:	d1e2      	bne.n	8062ee4 <main+0x84>
  }

  myprintf("bmp280 initialized\n");
 8062f1e:	4923      	ldr	r1, [pc, #140]	; (8062fac <main+0x14c>)
 8062f20:	481c      	ldr	r0, [pc, #112]	; (8062f94 <main+0x134>)
 8062f22:	f00f ff39 	bl	8072d98 <siprintf>
 8062f26:	481b      	ldr	r0, [pc, #108]	; (8062f94 <main+0x134>)
 8062f28:	f7fd f964 	bl	80601f4 <strlen>
 8062f2c:	4603      	mov	r3, r0
 8062f2e:	b29a      	uxth	r2, r3
 8062f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062f34:	4917      	ldr	r1, [pc, #92]	; (8062f94 <main+0x134>)
 8062f36:	4818      	ldr	r0, [pc, #96]	; (8062f98 <main+0x138>)
 8062f38:	f006 f8d6 	bl	80690e8 <HAL_UART_Transmit>

  while (TEMT6000_Init(&hadc1) != TEMT6000_OK) {
 8062f3c:	e012      	b.n	8062f64 <main+0x104>
	  myprintf("[ERROR]: temt6000 init failed\n");
 8062f3e:	491c      	ldr	r1, [pc, #112]	; (8062fb0 <main+0x150>)
 8062f40:	4814      	ldr	r0, [pc, #80]	; (8062f94 <main+0x134>)
 8062f42:	f00f ff29 	bl	8072d98 <siprintf>
 8062f46:	4813      	ldr	r0, [pc, #76]	; (8062f94 <main+0x134>)
 8062f48:	f7fd f954 	bl	80601f4 <strlen>
 8062f4c:	4603      	mov	r3, r0
 8062f4e:	b29a      	uxth	r2, r3
 8062f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062f54:	490f      	ldr	r1, [pc, #60]	; (8062f94 <main+0x134>)
 8062f56:	4810      	ldr	r0, [pc, #64]	; (8062f98 <main+0x138>)
 8062f58:	f006 f8c6 	bl	80690e8 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8062f5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8062f60:	f000 fd30 	bl	80639c4 <HAL_Delay>
  while (TEMT6000_Init(&hadc1) != TEMT6000_OK) {
 8062f64:	4813      	ldr	r0, [pc, #76]	; (8062fb4 <main+0x154>)
 8062f66:	f000 fb5f 	bl	8063628 <TEMT6000_Init>
 8062f6a:	4603      	mov	r3, r0
 8062f6c:	2b00      	cmp	r3, #0
 8062f6e:	d1e6      	bne.n	8062f3e <main+0xde>
  }

  // run in the background receive from uart
  // in order to implment possibility to wake up
  HAL_UART_Receive_IT(&huart2, (uint8_t *)notification_buffer, 1);
 8062f70:	2201      	movs	r2, #1
 8062f72:	4911      	ldr	r1, [pc, #68]	; (8062fb8 <main+0x158>)
 8062f74:	4808      	ldr	r0, [pc, #32]	; (8062f98 <main+0x138>)
 8062f76:	f006 f9eb 	bl	8069350 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8062f7a:	f00a fbf3 	bl	806d764 <osKernelInitialize>
  MX_FREERTOS_Init();
 8062f7e:	f7fe ffb3 	bl	8061ee8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8062f82:	f00a fc13 	bl	806d7ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8062f86:	e7fe      	b.n	8062f86 <main+0x126>
 8062f88:	e000ed00 	.word	0xe000ed00
 8062f8c:	08060000 	.word	0x08060000
 8062f90:	080769d0 	.word	0x080769d0
 8062f94:	2000031c 	.word	0x2000031c
 8062f98:	20005808 	.word	0x20005808
 8062f9c:	20004f40 	.word	0x20004f40
 8062fa0:	20004f14 	.word	0x20004f14
 8062fa4:	200056bc 	.word	0x200056bc
 8062fa8:	08076a00 	.word	0x08076a00
 8062fac:	08076a20 	.word	0x08076a20
 8062fb0:	08076a34 	.word	0x08076a34
 8062fb4:	20004f48 	.word	0x20004f48
 8062fb8:	20004e30 	.word	0x20004e30

08062fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8062fbc:	b580      	push	{r7, lr}
 8062fbe:	b094      	sub	sp, #80	; 0x50
 8062fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8062fc2:	f107 0320 	add.w	r3, r7, #32
 8062fc6:	2230      	movs	r2, #48	; 0x30
 8062fc8:	2100      	movs	r1, #0
 8062fca:	4618      	mov	r0, r3
 8062fcc:	f00e ff87 	bl	8071ede <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8062fd0:	f107 030c 	add.w	r3, r7, #12
 8062fd4:	2200      	movs	r2, #0
 8062fd6:	601a      	str	r2, [r3, #0]
 8062fd8:	605a      	str	r2, [r3, #4]
 8062fda:	609a      	str	r2, [r3, #8]
 8062fdc:	60da      	str	r2, [r3, #12]
 8062fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8062fe0:	2300      	movs	r3, #0
 8062fe2:	60bb      	str	r3, [r7, #8]
 8062fe4:	4b27      	ldr	r3, [pc, #156]	; (8063084 <SystemClock_Config+0xc8>)
 8062fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062fe8:	4a26      	ldr	r2, [pc, #152]	; (8063084 <SystemClock_Config+0xc8>)
 8062fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8062fee:	6413      	str	r3, [r2, #64]	; 0x40
 8062ff0:	4b24      	ldr	r3, [pc, #144]	; (8063084 <SystemClock_Config+0xc8>)
 8062ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8062ff8:	60bb      	str	r3, [r7, #8]
 8062ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8062ffc:	2300      	movs	r3, #0
 8062ffe:	607b      	str	r3, [r7, #4]
 8063000:	4b21      	ldr	r3, [pc, #132]	; (8063088 <SystemClock_Config+0xcc>)
 8063002:	681b      	ldr	r3, [r3, #0]
 8063004:	4a20      	ldr	r2, [pc, #128]	; (8063088 <SystemClock_Config+0xcc>)
 8063006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 806300a:	6013      	str	r3, [r2, #0]
 806300c:	4b1e      	ldr	r3, [pc, #120]	; (8063088 <SystemClock_Config+0xcc>)
 806300e:	681b      	ldr	r3, [r3, #0]
 8063010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8063014:	607b      	str	r3, [r7, #4]
 8063016:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8063018:	2301      	movs	r3, #1
 806301a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 806301c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8063020:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8063022:	2302      	movs	r3, #2
 8063024:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8063026:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 806302a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 806302c:	2304      	movs	r3, #4
 806302e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8063030:	23c0      	movs	r3, #192	; 0xc0
 8063032:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8063034:	2304      	movs	r3, #4
 8063036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8063038:	2308      	movs	r3, #8
 806303a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 806303c:	f107 0320 	add.w	r3, r7, #32
 8063040:	4618      	mov	r0, r3
 8063042:	f004 fa63 	bl	806750c <HAL_RCC_OscConfig>
 8063046:	4603      	mov	r3, r0
 8063048:	2b00      	cmp	r3, #0
 806304a:	d001      	beq.n	8063050 <SystemClock_Config+0x94>
  {
    Error_Handler();
 806304c:	f000 f830 	bl	80630b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8063050:	230f      	movs	r3, #15
 8063052:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8063054:	2302      	movs	r3, #2
 8063056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8063058:	2300      	movs	r3, #0
 806305a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 806305c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8063060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8063062:	2300      	movs	r3, #0
 8063064:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8063066:	f107 030c 	add.w	r3, r7, #12
 806306a:	2103      	movs	r1, #3
 806306c:	4618      	mov	r0, r3
 806306e:	f004 fd75 	bl	8067b5c <HAL_RCC_ClockConfig>
 8063072:	4603      	mov	r3, r0
 8063074:	2b00      	cmp	r3, #0
 8063076:	d001      	beq.n	806307c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8063078:	f000 f81a 	bl	80630b0 <Error_Handler>
  }
}
 806307c:	bf00      	nop
 806307e:	3750      	adds	r7, #80	; 0x50
 8063080:	46bd      	mov	sp, r7
 8063082:	bd80      	pop	{r7, pc}
 8063084:	40023800 	.word	0x40023800
 8063088:	40007000 	.word	0x40007000

0806308c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 806308c:	b580      	push	{r7, lr}
 806308e:	b082      	sub	sp, #8
 8063090:	af00      	add	r7, sp, #0
 8063092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8063094:	687b      	ldr	r3, [r7, #4]
 8063096:	681b      	ldr	r3, [r3, #0]
 8063098:	4a04      	ldr	r2, [pc, #16]	; (80630ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 806309a:	4293      	cmp	r3, r2
 806309c:	d101      	bne.n	80630a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 806309e:	f000 fc71 	bl	8063984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80630a2:	bf00      	nop
 80630a4:	3708      	adds	r7, #8
 80630a6:	46bd      	mov	sp, r7
 80630a8:	bd80      	pop	{r7, pc}
 80630aa:	bf00      	nop
 80630ac:	40000c00 	.word	0x40000c00

080630b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80630b0:	b480      	push	{r7}
 80630b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80630b4:	b672      	cpsid	i
}
 80630b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80630b8:	e7fe      	b.n	80630b8 <Error_Handler+0x8>

080630ba <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80630ba:	b480      	push	{r7}
 80630bc:	b083      	sub	sp, #12
 80630be:	af00      	add	r7, sp, #0
 80630c0:	6078      	str	r0, [r7, #4]
 80630c2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80630c4:	bf00      	nop
 80630c6:	370c      	adds	r7, #12
 80630c8:	46bd      	mov	sp, r7
 80630ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80630ce:	4770      	bx	lr

080630d0 <MPU6050_Init>:
#include "mpu6050.h"
#include "i2c.h"
#include <stdio.h>

int MPU6050_Init(void){
 80630d0:	b580      	push	{r7, lr}
 80630d2:	b084      	sub	sp, #16
 80630d4:	af00      	add	r7, sp, #0

    uint8_t buffer[7];
    int res = 0;
 80630d6:	2300      	movs	r3, #0
 80630d8:	60fb      	str	r3, [r7, #12]

    buffer[0] = MPU6050_RA_PWR_MGMT_1;
 80630da:	236b      	movs	r3, #107	; 0x6b
 80630dc:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x00;
 80630de:	2300      	movs	r3, #0
 80630e0:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 80630e2:	1d3b      	adds	r3, r7, #4
 80630e4:	2202      	movs	r2, #2
 80630e6:	4619      	mov	r1, r3
 80630e8:	2068      	movs	r0, #104	; 0x68
 80630ea:	f7ff fe51 	bl	8062d90 <I2C_WriteBuffer>
 80630ee:	60f8      	str	r0, [r7, #12]
    if (res != 0) return res;
 80630f0:	68fb      	ldr	r3, [r7, #12]
 80630f2:	2b00      	cmp	r3, #0
 80630f4:	d001      	beq.n	80630fa <MPU6050_Init+0x2a>
 80630f6:	68fb      	ldr	r3, [r7, #12]
 80630f8:	e01b      	b.n	8063132 <MPU6050_Init+0x62>

    buffer[0] = MPU6050_RA_GYRO_CONFIG;
 80630fa:	231b      	movs	r3, #27
 80630fc:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x8;
 80630fe:	2308      	movs	r3, #8
 8063100:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8063102:	1d3b      	adds	r3, r7, #4
 8063104:	2202      	movs	r2, #2
 8063106:	4619      	mov	r1, r3
 8063108:	2068      	movs	r0, #104	; 0x68
 806310a:	f7ff fe41 	bl	8062d90 <I2C_WriteBuffer>
 806310e:	60f8      	str	r0, [r7, #12]
    if (res != 0) return res;
 8063110:	68fb      	ldr	r3, [r7, #12]
 8063112:	2b00      	cmp	r3, #0
 8063114:	d001      	beq.n	806311a <MPU6050_Init+0x4a>
 8063116:	68fb      	ldr	r3, [r7, #12]
 8063118:	e00b      	b.n	8063132 <MPU6050_Init+0x62>

    buffer[0] = MPU6050_RA_ACCEL_CONFIG;
 806311a:	231c      	movs	r3, #28
 806311c:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x10;
 806311e:	2310      	movs	r3, #16
 8063120:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8063122:	1d3b      	adds	r3, r7, #4
 8063124:	2202      	movs	r2, #2
 8063126:	4619      	mov	r1, r3
 8063128:	2068      	movs	r0, #104	; 0x68
 806312a:	f7ff fe31 	bl	8062d90 <I2C_WriteBuffer>
 806312e:	60f8      	str	r0, [r7, #12]

    return res;
 8063130:	68fb      	ldr	r3, [r7, #12]
}
 8063132:	4618      	mov	r0, r3
 8063134:	3710      	adds	r7, #16
 8063136:	46bd      	mov	sp, r7
 8063138:	bd80      	pop	{r7, pc}

0806313a <MPU6050_GetAllData>:

void MPU6050_GetAllData(int16_t *Data){
 806313a:	b580      	push	{r7, lr}
 806313c:	b088      	sub	sp, #32
 806313e:	af00      	add	r7, sp, #0
 8063140:	6078      	str	r0, [r7, #4]

  uint8_t accelbuffer[14];

  I2C_ReadBuffer(MPU6050_ADDRESS_AD0_LOW,MPU6050_RA_ACCEL_XOUT_H, accelbuffer, 14);
 8063142:	f107 0208 	add.w	r2, r7, #8
 8063146:	230e      	movs	r3, #14
 8063148:	213b      	movs	r1, #59	; 0x3b
 806314a:	2068      	movs	r0, #104	; 0x68
 806314c:	f7ff fe50 	bl	8062df0 <I2C_ReadBuffer>

  /* Registers 59 to 64 – Accelerometer Measurements */
  for (int i = 0; i< 3; i++)
 8063150:	2300      	movs	r3, #0
 8063152:	61fb      	str	r3, [r7, #28]
 8063154:	e01c      	b.n	8063190 <MPU6050_GetAllData+0x56>
      Data[i] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 8063156:	69fb      	ldr	r3, [r7, #28]
 8063158:	005b      	lsls	r3, r3, #1
 806315a:	f107 0220 	add.w	r2, r7, #32
 806315e:	4413      	add	r3, r2
 8063160:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8063164:	021b      	lsls	r3, r3, #8
 8063166:	b29a      	uxth	r2, r3
 8063168:	69fb      	ldr	r3, [r7, #28]
 806316a:	005b      	lsls	r3, r3, #1
 806316c:	3301      	adds	r3, #1
 806316e:	f107 0120 	add.w	r1, r7, #32
 8063172:	440b      	add	r3, r1
 8063174:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8063178:	b29b      	uxth	r3, r3
 806317a:	4413      	add	r3, r2
 806317c:	b299      	uxth	r1, r3
 806317e:	69fb      	ldr	r3, [r7, #28]
 8063180:	005b      	lsls	r3, r3, #1
 8063182:	687a      	ldr	r2, [r7, #4]
 8063184:	4413      	add	r3, r2
 8063186:	b20a      	sxth	r2, r1
 8063188:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i< 3; i++)
 806318a:	69fb      	ldr	r3, [r7, #28]
 806318c:	3301      	adds	r3, #1
 806318e:	61fb      	str	r3, [r7, #28]
 8063190:	69fb      	ldr	r3, [r7, #28]
 8063192:	2b02      	cmp	r3, #2
 8063194:	dddf      	ble.n	8063156 <MPU6050_GetAllData+0x1c>

  /* Registers 65 and 66 – Temperature Measurement */

  /* Registers 67 to 72 – Gyroscope Measurements */
  for (int i = 4; i < 7; i++)
 8063196:	2304      	movs	r3, #4
 8063198:	61bb      	str	r3, [r7, #24]
 806319a:	e01f      	b.n	80631dc <MPU6050_GetAllData+0xa2>
      Data[i - 1] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 806319c:	69bb      	ldr	r3, [r7, #24]
 806319e:	005b      	lsls	r3, r3, #1
 80631a0:	f107 0220 	add.w	r2, r7, #32
 80631a4:	4413      	add	r3, r2
 80631a6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80631aa:	021b      	lsls	r3, r3, #8
 80631ac:	b29a      	uxth	r2, r3
 80631ae:	69bb      	ldr	r3, [r7, #24]
 80631b0:	005b      	lsls	r3, r3, #1
 80631b2:	3301      	adds	r3, #1
 80631b4:	f107 0120 	add.w	r1, r7, #32
 80631b8:	440b      	add	r3, r1
 80631ba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80631be:	b29b      	uxth	r3, r3
 80631c0:	4413      	add	r3, r2
 80631c2:	b299      	uxth	r1, r3
 80631c4:	69bb      	ldr	r3, [r7, #24]
 80631c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80631ca:	3b01      	subs	r3, #1
 80631cc:	005b      	lsls	r3, r3, #1
 80631ce:	687a      	ldr	r2, [r7, #4]
 80631d0:	4413      	add	r3, r2
 80631d2:	b20a      	sxth	r2, r1
 80631d4:	801a      	strh	r2, [r3, #0]
  for (int i = 4; i < 7; i++)
 80631d6:	69bb      	ldr	r3, [r7, #24]
 80631d8:	3301      	adds	r3, #1
 80631da:	61bb      	str	r3, [r7, #24]
 80631dc:	69bb      	ldr	r3, [r7, #24]
 80631de:	2b06      	cmp	r3, #6
 80631e0:	dddc      	ble.n	806319c <MPU6050_GetAllData+0x62>

}
 80631e2:	bf00      	nop
 80631e4:	bf00      	nop
 80631e6:	3720      	adds	r7, #32
 80631e8:	46bd      	mov	sp, r7
 80631ea:	bd80      	pop	{r7, pc}

080631ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80631ec:	b580      	push	{r7, lr}
 80631ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80631f0:	4b17      	ldr	r3, [pc, #92]	; (8063250 <MX_SPI1_Init+0x64>)
 80631f2:	4a18      	ldr	r2, [pc, #96]	; (8063254 <MX_SPI1_Init+0x68>)
 80631f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80631f6:	4b16      	ldr	r3, [pc, #88]	; (8063250 <MX_SPI1_Init+0x64>)
 80631f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80631fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80631fe:	4b14      	ldr	r3, [pc, #80]	; (8063250 <MX_SPI1_Init+0x64>)
 8063200:	2200      	movs	r2, #0
 8063202:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8063204:	4b12      	ldr	r3, [pc, #72]	; (8063250 <MX_SPI1_Init+0x64>)
 8063206:	2200      	movs	r2, #0
 8063208:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 806320a:	4b11      	ldr	r3, [pc, #68]	; (8063250 <MX_SPI1_Init+0x64>)
 806320c:	2200      	movs	r2, #0
 806320e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8063210:	4b0f      	ldr	r3, [pc, #60]	; (8063250 <MX_SPI1_Init+0x64>)
 8063212:	2200      	movs	r2, #0
 8063214:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8063216:	4b0e      	ldr	r3, [pc, #56]	; (8063250 <MX_SPI1_Init+0x64>)
 8063218:	f44f 7200 	mov.w	r2, #512	; 0x200
 806321c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 806321e:	4b0c      	ldr	r3, [pc, #48]	; (8063250 <MX_SPI1_Init+0x64>)
 8063220:	2230      	movs	r2, #48	; 0x30
 8063222:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8063224:	4b0a      	ldr	r3, [pc, #40]	; (8063250 <MX_SPI1_Init+0x64>)
 8063226:	2200      	movs	r2, #0
 8063228:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 806322a:	4b09      	ldr	r3, [pc, #36]	; (8063250 <MX_SPI1_Init+0x64>)
 806322c:	2200      	movs	r2, #0
 806322e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8063230:	4b07      	ldr	r3, [pc, #28]	; (8063250 <MX_SPI1_Init+0x64>)
 8063232:	2200      	movs	r2, #0
 8063234:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8063236:	4b06      	ldr	r3, [pc, #24]	; (8063250 <MX_SPI1_Init+0x64>)
 8063238:	220a      	movs	r2, #10
 806323a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 806323c:	4804      	ldr	r0, [pc, #16]	; (8063250 <MX_SPI1_Init+0x64>)
 806323e:	f004 ff63 	bl	8068108 <HAL_SPI_Init>
 8063242:	4603      	mov	r3, r0
 8063244:	2b00      	cmp	r3, #0
 8063246:	d001      	beq.n	806324c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8063248:	f7ff ff32 	bl	80630b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 806324c:	bf00      	nop
 806324e:	bd80      	pop	{r7, pc}
 8063250:	20005710 	.word	0x20005710
 8063254:	40013000 	.word	0x40013000

08063258 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8063258:	b580      	push	{r7, lr}
 806325a:	b08a      	sub	sp, #40	; 0x28
 806325c:	af00      	add	r7, sp, #0
 806325e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8063260:	f107 0314 	add.w	r3, r7, #20
 8063264:	2200      	movs	r2, #0
 8063266:	601a      	str	r2, [r3, #0]
 8063268:	605a      	str	r2, [r3, #4]
 806326a:	609a      	str	r2, [r3, #8]
 806326c:	60da      	str	r2, [r3, #12]
 806326e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8063270:	687b      	ldr	r3, [r7, #4]
 8063272:	681b      	ldr	r3, [r3, #0]
 8063274:	4a19      	ldr	r2, [pc, #100]	; (80632dc <HAL_SPI_MspInit+0x84>)
 8063276:	4293      	cmp	r3, r2
 8063278:	d12b      	bne.n	80632d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 806327a:	2300      	movs	r3, #0
 806327c:	613b      	str	r3, [r7, #16]
 806327e:	4b18      	ldr	r3, [pc, #96]	; (80632e0 <HAL_SPI_MspInit+0x88>)
 8063280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8063282:	4a17      	ldr	r2, [pc, #92]	; (80632e0 <HAL_SPI_MspInit+0x88>)
 8063284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8063288:	6453      	str	r3, [r2, #68]	; 0x44
 806328a:	4b15      	ldr	r3, [pc, #84]	; (80632e0 <HAL_SPI_MspInit+0x88>)
 806328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806328e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8063292:	613b      	str	r3, [r7, #16]
 8063294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8063296:	2300      	movs	r3, #0
 8063298:	60fb      	str	r3, [r7, #12]
 806329a:	4b11      	ldr	r3, [pc, #68]	; (80632e0 <HAL_SPI_MspInit+0x88>)
 806329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806329e:	4a10      	ldr	r2, [pc, #64]	; (80632e0 <HAL_SPI_MspInit+0x88>)
 80632a0:	f043 0301 	orr.w	r3, r3, #1
 80632a4:	6313      	str	r3, [r2, #48]	; 0x30
 80632a6:	4b0e      	ldr	r3, [pc, #56]	; (80632e0 <HAL_SPI_MspInit+0x88>)
 80632a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80632aa:	f003 0301 	and.w	r3, r3, #1
 80632ae:	60fb      	str	r3, [r7, #12]
 80632b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80632b2:	23e0      	movs	r3, #224	; 0xe0
 80632b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80632b6:	2302      	movs	r3, #2
 80632b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80632ba:	2301      	movs	r3, #1
 80632bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80632be:	2303      	movs	r3, #3
 80632c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80632c2:	2305      	movs	r3, #5
 80632c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80632c6:	f107 0314 	add.w	r3, r7, #20
 80632ca:	4619      	mov	r1, r3
 80632cc:	4805      	ldr	r0, [pc, #20]	; (80632e4 <HAL_SPI_MspInit+0x8c>)
 80632ce:	f002 f961 	bl	8065594 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80632d2:	bf00      	nop
 80632d4:	3728      	adds	r7, #40	; 0x28
 80632d6:	46bd      	mov	sp, r7
 80632d8:	bd80      	pop	{r7, pc}
 80632da:	bf00      	nop
 80632dc:	40013000 	.word	0x40013000
 80632e0:	40023800 	.word	0x40023800
 80632e4:	40020000 	.word	0x40020000

080632e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80632e8:	b580      	push	{r7, lr}
 80632ea:	b082      	sub	sp, #8
 80632ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80632ee:	2300      	movs	r3, #0
 80632f0:	607b      	str	r3, [r7, #4]
 80632f2:	4b12      	ldr	r3, [pc, #72]	; (806333c <HAL_MspInit+0x54>)
 80632f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80632f6:	4a11      	ldr	r2, [pc, #68]	; (806333c <HAL_MspInit+0x54>)
 80632f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80632fc:	6453      	str	r3, [r2, #68]	; 0x44
 80632fe:	4b0f      	ldr	r3, [pc, #60]	; (806333c <HAL_MspInit+0x54>)
 8063300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8063302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8063306:	607b      	str	r3, [r7, #4]
 8063308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 806330a:	2300      	movs	r3, #0
 806330c:	603b      	str	r3, [r7, #0]
 806330e:	4b0b      	ldr	r3, [pc, #44]	; (806333c <HAL_MspInit+0x54>)
 8063310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063312:	4a0a      	ldr	r2, [pc, #40]	; (806333c <HAL_MspInit+0x54>)
 8063314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8063318:	6413      	str	r3, [r2, #64]	; 0x40
 806331a:	4b08      	ldr	r3, [pc, #32]	; (806333c <HAL_MspInit+0x54>)
 806331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8063322:	603b      	str	r3, [r7, #0]
 8063324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8063326:	2200      	movs	r2, #0
 8063328:	210f      	movs	r1, #15
 806332a:	f06f 0001 	mvn.w	r0, #1
 806332e:	f001 fb6b 	bl	8064a08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8063332:	bf00      	nop
 8063334:	3708      	adds	r7, #8
 8063336:	46bd      	mov	sp, r7
 8063338:	bd80      	pop	{r7, pc}
 806333a:	bf00      	nop
 806333c:	40023800 	.word	0x40023800

08063340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8063340:	b580      	push	{r7, lr}
 8063342:	b08c      	sub	sp, #48	; 0x30
 8063344:	af00      	add	r7, sp, #0
 8063346:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8063348:	2300      	movs	r3, #0
 806334a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 806334c:	2300      	movs	r3, #0
 806334e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8063350:	2200      	movs	r2, #0
 8063352:	6879      	ldr	r1, [r7, #4]
 8063354:	2032      	movs	r0, #50	; 0x32
 8063356:	f001 fb57 	bl	8064a08 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 806335a:	2032      	movs	r0, #50	; 0x32
 806335c:	f001 fb80 	bl	8064a60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8063360:	2300      	movs	r3, #0
 8063362:	60fb      	str	r3, [r7, #12]
 8063364:	4b1f      	ldr	r3, [pc, #124]	; (80633e4 <HAL_InitTick+0xa4>)
 8063366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063368:	4a1e      	ldr	r2, [pc, #120]	; (80633e4 <HAL_InitTick+0xa4>)
 806336a:	f043 0308 	orr.w	r3, r3, #8
 806336e:	6413      	str	r3, [r2, #64]	; 0x40
 8063370:	4b1c      	ldr	r3, [pc, #112]	; (80633e4 <HAL_InitTick+0xa4>)
 8063372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063374:	f003 0308 	and.w	r3, r3, #8
 8063378:	60fb      	str	r3, [r7, #12]
 806337a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 806337c:	f107 0210 	add.w	r2, r7, #16
 8063380:	f107 0314 	add.w	r3, r7, #20
 8063384:	4611      	mov	r1, r2
 8063386:	4618      	mov	r0, r3
 8063388:	f004 fe8c 	bl	80680a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 806338c:	f004 fe62 	bl	8068054 <HAL_RCC_GetPCLK1Freq>
 8063390:	4603      	mov	r3, r0
 8063392:	005b      	lsls	r3, r3, #1
 8063394:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8063396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8063398:	4a13      	ldr	r2, [pc, #76]	; (80633e8 <HAL_InitTick+0xa8>)
 806339a:	fba2 2303 	umull	r2, r3, r2, r3
 806339e:	0c9b      	lsrs	r3, r3, #18
 80633a0:	3b01      	subs	r3, #1
 80633a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80633a4:	4b11      	ldr	r3, [pc, #68]	; (80633ec <HAL_InitTick+0xac>)
 80633a6:	4a12      	ldr	r2, [pc, #72]	; (80633f0 <HAL_InitTick+0xb0>)
 80633a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80633aa:	4b10      	ldr	r3, [pc, #64]	; (80633ec <HAL_InitTick+0xac>)
 80633ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80633b0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80633b2:	4a0e      	ldr	r2, [pc, #56]	; (80633ec <HAL_InitTick+0xac>)
 80633b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80633b6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80633b8:	4b0c      	ldr	r3, [pc, #48]	; (80633ec <HAL_InitTick+0xac>)
 80633ba:	2200      	movs	r2, #0
 80633bc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80633be:	4b0b      	ldr	r3, [pc, #44]	; (80633ec <HAL_InitTick+0xac>)
 80633c0:	2200      	movs	r2, #0
 80633c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80633c4:	4809      	ldr	r0, [pc, #36]	; (80633ec <HAL_InitTick+0xac>)
 80633c6:	f005 fab3 	bl	8068930 <HAL_TIM_Base_Init>
 80633ca:	4603      	mov	r3, r0
 80633cc:	2b00      	cmp	r3, #0
 80633ce:	d104      	bne.n	80633da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80633d0:	4806      	ldr	r0, [pc, #24]	; (80633ec <HAL_InitTick+0xac>)
 80633d2:	f005 fb7d 	bl	8068ad0 <HAL_TIM_Base_Start_IT>
 80633d6:	4603      	mov	r3, r0
 80633d8:	e000      	b.n	80633dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80633da:	2301      	movs	r3, #1
}
 80633dc:	4618      	mov	r0, r3
 80633de:	3730      	adds	r7, #48	; 0x30
 80633e0:	46bd      	mov	sp, r7
 80633e2:	bd80      	pop	{r7, pc}
 80633e4:	40023800 	.word	0x40023800
 80633e8:	431bde83 	.word	0x431bde83
 80633ec:	20005768 	.word	0x20005768
 80633f0:	40000c00 	.word	0x40000c00

080633f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80633f4:	b480      	push	{r7}
 80633f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80633f8:	e7fe      	b.n	80633f8 <NMI_Handler+0x4>

080633fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80633fa:	b480      	push	{r7}
 80633fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80633fe:	e7fe      	b.n	80633fe <HardFault_Handler+0x4>

08063400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8063400:	b480      	push	{r7}
 8063402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8063404:	e7fe      	b.n	8063404 <MemManage_Handler+0x4>

08063406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8063406:	b480      	push	{r7}
 8063408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 806340a:	e7fe      	b.n	806340a <BusFault_Handler+0x4>

0806340c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 806340c:	b480      	push	{r7}
 806340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8063410:	e7fe      	b.n	8063410 <UsageFault_Handler+0x4>

08063412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8063412:	b480      	push	{r7}
 8063414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8063416:	bf00      	nop
 8063418:	46bd      	mov	sp, r7
 806341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806341e:	4770      	bx	lr

08063420 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8063420:	b580      	push	{r7, lr}
 8063422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8063424:	4802      	ldr	r0, [pc, #8]	; (8063430 <ADC_IRQHandler+0x10>)
 8063426:	f000 fc4f 	bl	8063cc8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 806342a:	bf00      	nop
 806342c:	bd80      	pop	{r7, pc}
 806342e:	bf00      	nop
 8063430:	20004f48 	.word	0x20004f48

08063434 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8063434:	b580      	push	{r7, lr}
 8063436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8063438:	4802      	ldr	r0, [pc, #8]	; (8063444 <USART2_IRQHandler+0x10>)
 806343a:	f005 ffb9 	bl	80693b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 806343e:	bf00      	nop
 8063440:	bd80      	pop	{r7, pc}
 8063442:	bf00      	nop
 8063444:	20005808 	.word	0x20005808

08063448 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8063448:	b580      	push	{r7, lr}
 806344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 806344c:	4802      	ldr	r0, [pc, #8]	; (8063458 <TIM5_IRQHandler+0x10>)
 806344e:	f005 fbd1 	bl	8068bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8063452:	bf00      	nop
 8063454:	bd80      	pop	{r7, pc}
 8063456:	bf00      	nop
 8063458:	20005768 	.word	0x20005768

0806345c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 806345c:	b580      	push	{r7, lr}
 806345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8063460:	4802      	ldr	r0, [pc, #8]	; (806346c <DMA2_Stream0_IRQHandler+0x10>)
 8063462:	f001 fe2d 	bl	80650c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8063466:	bf00      	nop
 8063468:	bd80      	pop	{r7, pc}
 806346a:	bf00      	nop
 806346c:	20004f90 	.word	0x20004f90

08063470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8063470:	b480      	push	{r7}
 8063472:	af00      	add	r7, sp, #0
	return 1;
 8063474:	2301      	movs	r3, #1
}
 8063476:	4618      	mov	r0, r3
 8063478:	46bd      	mov	sp, r7
 806347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806347e:	4770      	bx	lr

08063480 <_kill>:

int _kill(int pid, int sig)
{
 8063480:	b580      	push	{r7, lr}
 8063482:	b082      	sub	sp, #8
 8063484:	af00      	add	r7, sp, #0
 8063486:	6078      	str	r0, [r7, #4]
 8063488:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 806348a:	f00e fbf7 	bl	8071c7c <__errno>
 806348e:	4603      	mov	r3, r0
 8063490:	2216      	movs	r2, #22
 8063492:	601a      	str	r2, [r3, #0]
	return -1;
 8063494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8063498:	4618      	mov	r0, r3
 806349a:	3708      	adds	r7, #8
 806349c:	46bd      	mov	sp, r7
 806349e:	bd80      	pop	{r7, pc}

080634a0 <_exit>:

void _exit (int status)
{
 80634a0:	b580      	push	{r7, lr}
 80634a2:	b082      	sub	sp, #8
 80634a4:	af00      	add	r7, sp, #0
 80634a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80634a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80634ac:	6878      	ldr	r0, [r7, #4]
 80634ae:	f7ff ffe7 	bl	8063480 <_kill>
	while (1) {}		/* Make sure we hang here */
 80634b2:	e7fe      	b.n	80634b2 <_exit+0x12>

080634b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80634b4:	b580      	push	{r7, lr}
 80634b6:	b086      	sub	sp, #24
 80634b8:	af00      	add	r7, sp, #0
 80634ba:	60f8      	str	r0, [r7, #12]
 80634bc:	60b9      	str	r1, [r7, #8]
 80634be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80634c0:	2300      	movs	r3, #0
 80634c2:	617b      	str	r3, [r7, #20]
 80634c4:	e00a      	b.n	80634dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80634c6:	f3af 8000 	nop.w
 80634ca:	4601      	mov	r1, r0
 80634cc:	68bb      	ldr	r3, [r7, #8]
 80634ce:	1c5a      	adds	r2, r3, #1
 80634d0:	60ba      	str	r2, [r7, #8]
 80634d2:	b2ca      	uxtb	r2, r1
 80634d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80634d6:	697b      	ldr	r3, [r7, #20]
 80634d8:	3301      	adds	r3, #1
 80634da:	617b      	str	r3, [r7, #20]
 80634dc:	697a      	ldr	r2, [r7, #20]
 80634de:	687b      	ldr	r3, [r7, #4]
 80634e0:	429a      	cmp	r2, r3
 80634e2:	dbf0      	blt.n	80634c6 <_read+0x12>
	}

return len;
 80634e4:	687b      	ldr	r3, [r7, #4]
}
 80634e6:	4618      	mov	r0, r3
 80634e8:	3718      	adds	r7, #24
 80634ea:	46bd      	mov	sp, r7
 80634ec:	bd80      	pop	{r7, pc}

080634ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80634ee:	b580      	push	{r7, lr}
 80634f0:	b086      	sub	sp, #24
 80634f2:	af00      	add	r7, sp, #0
 80634f4:	60f8      	str	r0, [r7, #12]
 80634f6:	60b9      	str	r1, [r7, #8]
 80634f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80634fa:	2300      	movs	r3, #0
 80634fc:	617b      	str	r3, [r7, #20]
 80634fe:	e009      	b.n	8063514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8063500:	68bb      	ldr	r3, [r7, #8]
 8063502:	1c5a      	adds	r2, r3, #1
 8063504:	60ba      	str	r2, [r7, #8]
 8063506:	781b      	ldrb	r3, [r3, #0]
 8063508:	4618      	mov	r0, r3
 806350a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 806350e:	697b      	ldr	r3, [r7, #20]
 8063510:	3301      	adds	r3, #1
 8063512:	617b      	str	r3, [r7, #20]
 8063514:	697a      	ldr	r2, [r7, #20]
 8063516:	687b      	ldr	r3, [r7, #4]
 8063518:	429a      	cmp	r2, r3
 806351a:	dbf1      	blt.n	8063500 <_write+0x12>
	}
	return len;
 806351c:	687b      	ldr	r3, [r7, #4]
}
 806351e:	4618      	mov	r0, r3
 8063520:	3718      	adds	r7, #24
 8063522:	46bd      	mov	sp, r7
 8063524:	bd80      	pop	{r7, pc}

08063526 <_close>:

int _close(int file)
{
 8063526:	b480      	push	{r7}
 8063528:	b083      	sub	sp, #12
 806352a:	af00      	add	r7, sp, #0
 806352c:	6078      	str	r0, [r7, #4]
	return -1;
 806352e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8063532:	4618      	mov	r0, r3
 8063534:	370c      	adds	r7, #12
 8063536:	46bd      	mov	sp, r7
 8063538:	f85d 7b04 	ldr.w	r7, [sp], #4
 806353c:	4770      	bx	lr

0806353e <_fstat>:


int _fstat(int file, struct stat *st)
{
 806353e:	b480      	push	{r7}
 8063540:	b083      	sub	sp, #12
 8063542:	af00      	add	r7, sp, #0
 8063544:	6078      	str	r0, [r7, #4]
 8063546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8063548:	683b      	ldr	r3, [r7, #0]
 806354a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 806354e:	605a      	str	r2, [r3, #4]
	return 0;
 8063550:	2300      	movs	r3, #0
}
 8063552:	4618      	mov	r0, r3
 8063554:	370c      	adds	r7, #12
 8063556:	46bd      	mov	sp, r7
 8063558:	f85d 7b04 	ldr.w	r7, [sp], #4
 806355c:	4770      	bx	lr

0806355e <_isatty>:

int _isatty(int file)
{
 806355e:	b480      	push	{r7}
 8063560:	b083      	sub	sp, #12
 8063562:	af00      	add	r7, sp, #0
 8063564:	6078      	str	r0, [r7, #4]
	return 1;
 8063566:	2301      	movs	r3, #1
}
 8063568:	4618      	mov	r0, r3
 806356a:	370c      	adds	r7, #12
 806356c:	46bd      	mov	sp, r7
 806356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063572:	4770      	bx	lr

08063574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8063574:	b480      	push	{r7}
 8063576:	b085      	sub	sp, #20
 8063578:	af00      	add	r7, sp, #0
 806357a:	60f8      	str	r0, [r7, #12]
 806357c:	60b9      	str	r1, [r7, #8]
 806357e:	607a      	str	r2, [r7, #4]
	return 0;
 8063580:	2300      	movs	r3, #0
}
 8063582:	4618      	mov	r0, r3
 8063584:	3714      	adds	r7, #20
 8063586:	46bd      	mov	sp, r7
 8063588:	f85d 7b04 	ldr.w	r7, [sp], #4
 806358c:	4770      	bx	lr
	...

08063590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8063590:	b580      	push	{r7, lr}
 8063592:	b086      	sub	sp, #24
 8063594:	af00      	add	r7, sp, #0
 8063596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8063598:	4a14      	ldr	r2, [pc, #80]	; (80635ec <_sbrk+0x5c>)
 806359a:	4b15      	ldr	r3, [pc, #84]	; (80635f0 <_sbrk+0x60>)
 806359c:	1ad3      	subs	r3, r2, r3
 806359e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80635a0:	697b      	ldr	r3, [r7, #20]
 80635a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80635a4:	4b13      	ldr	r3, [pc, #76]	; (80635f4 <_sbrk+0x64>)
 80635a6:	681b      	ldr	r3, [r3, #0]
 80635a8:	2b00      	cmp	r3, #0
 80635aa:	d102      	bne.n	80635b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80635ac:	4b11      	ldr	r3, [pc, #68]	; (80635f4 <_sbrk+0x64>)
 80635ae:	4a12      	ldr	r2, [pc, #72]	; (80635f8 <_sbrk+0x68>)
 80635b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80635b2:	4b10      	ldr	r3, [pc, #64]	; (80635f4 <_sbrk+0x64>)
 80635b4:	681a      	ldr	r2, [r3, #0]
 80635b6:	687b      	ldr	r3, [r7, #4]
 80635b8:	4413      	add	r3, r2
 80635ba:	693a      	ldr	r2, [r7, #16]
 80635bc:	429a      	cmp	r2, r3
 80635be:	d207      	bcs.n	80635d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80635c0:	f00e fb5c 	bl	8071c7c <__errno>
 80635c4:	4603      	mov	r3, r0
 80635c6:	220c      	movs	r2, #12
 80635c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80635ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80635ce:	e009      	b.n	80635e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80635d0:	4b08      	ldr	r3, [pc, #32]	; (80635f4 <_sbrk+0x64>)
 80635d2:	681b      	ldr	r3, [r3, #0]
 80635d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80635d6:	4b07      	ldr	r3, [pc, #28]	; (80635f4 <_sbrk+0x64>)
 80635d8:	681a      	ldr	r2, [r3, #0]
 80635da:	687b      	ldr	r3, [r7, #4]
 80635dc:	4413      	add	r3, r2
 80635de:	4a05      	ldr	r2, [pc, #20]	; (80635f4 <_sbrk+0x64>)
 80635e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80635e2:	68fb      	ldr	r3, [r7, #12]
}
 80635e4:	4618      	mov	r0, r3
 80635e6:	3718      	adds	r7, #24
 80635e8:	46bd      	mov	sp, r7
 80635ea:	bd80      	pop	{r7, pc}
 80635ec:	20020000 	.word	0x20020000
 80635f0:	00000400 	.word	0x00000400
 80635f4:	2000041c 	.word	0x2000041c
 80635f8:	20005d18 	.word	0x20005d18

080635fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80635fc:	b480      	push	{r7}
 80635fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8063600:	4b07      	ldr	r3, [pc, #28]	; (8063620 <SystemInit+0x24>)
 8063602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8063606:	4a06      	ldr	r2, [pc, #24]	; (8063620 <SystemInit+0x24>)
 8063608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 806360c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8063610:	4b03      	ldr	r3, [pc, #12]	; (8063620 <SystemInit+0x24>)
 8063612:	4a04      	ldr	r2, [pc, #16]	; (8063624 <SystemInit+0x28>)
 8063614:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8063616:	bf00      	nop
 8063618:	46bd      	mov	sp, r7
 806361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806361e:	4770      	bx	lr
 8063620:	e000ed00 	.word	0xe000ed00
 8063624:	08060000 	.word	0x08060000

08063628 <TEMT6000_Init>:
ADC_HandleTypeDef *temt6000_adc;

volatile uint16_t AdcValue[TEMT6000_ADC_SAMPLES];

TEMT6000_STATUS TEMT6000_Init(ADC_HandleTypeDef *hadc)
{
 8063628:	b580      	push	{r7, lr}
 806362a:	b082      	sub	sp, #8
 806362c:	af00      	add	r7, sp, #0
 806362e:	6078      	str	r0, [r7, #4]
	temt6000_adc = hadc;
 8063630:	4a09      	ldr	r2, [pc, #36]	; (8063658 <TEMT6000_Init+0x30>)
 8063632:	687b      	ldr	r3, [r7, #4]
 8063634:	6013      	str	r3, [r2, #0]

	if(HAL_OK == HAL_ADC_Start_DMA(temt6000_adc, (uint32_t*)AdcValue, TEMT6000_ADC_SAMPLES))
 8063636:	4b08      	ldr	r3, [pc, #32]	; (8063658 <TEMT6000_Init+0x30>)
 8063638:	681b      	ldr	r3, [r3, #0]
 806363a:	2208      	movs	r2, #8
 806363c:	4907      	ldr	r1, [pc, #28]	; (806365c <TEMT6000_Init+0x34>)
 806363e:	4618      	mov	r0, r3
 8063640:	f000 fcb2 	bl	8063fa8 <HAL_ADC_Start_DMA>
 8063644:	4603      	mov	r3, r0
 8063646:	2b00      	cmp	r3, #0
 8063648:	d101      	bne.n	806364e <TEMT6000_Init+0x26>
		return TEMT6000_OK;
 806364a:	2300      	movs	r3, #0
 806364c:	e000      	b.n	8063650 <TEMT6000_Init+0x28>

	return TEMT6000_ERROR;
 806364e:	2301      	movs	r3, #1
}
 8063650:	4618      	mov	r0, r3
 8063652:	3708      	adds	r7, #8
 8063654:	46bd      	mov	sp, r7
 8063656:	bd80      	pop	{r7, pc}
 8063658:	200057b0 	.word	0x200057b0
 806365c:	200057b4 	.word	0x200057b4

08063660 <TEMT6000_ReadLight>:

TEMT6000_STATUS TEMT6000_ReadLight(float *Result)
{
 8063660:	b580      	push	{r7, lr}
 8063662:	b084      	sub	sp, #16
 8063664:	af00      	add	r7, sp, #0
 8063666:	6078      	str	r0, [r7, #4]
	uint32_t AdcAverage;
	uint8_t i;

	AdcAverage = 0;
 8063668:	2300      	movs	r3, #0
 806366a:	60fb      	str	r3, [r7, #12]

	if(HAL_OK !=HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcValue, TEMT6000_ADC_SAMPLES))return TEMT6000_ERROR;
 806366c:	2208      	movs	r2, #8
 806366e:	491d      	ldr	r1, [pc, #116]	; (80636e4 <TEMT6000_ReadLight+0x84>)
 8063670:	481d      	ldr	r0, [pc, #116]	; (80636e8 <TEMT6000_ReadLight+0x88>)
 8063672:	f000 fc99 	bl	8063fa8 <HAL_ADC_Start_DMA>
 8063676:	4603      	mov	r3, r0
 8063678:	2b00      	cmp	r3, #0
 806367a:	d001      	beq.n	8063680 <TEMT6000_ReadLight+0x20>
 806367c:	2301      	movs	r3, #1
 806367e:	e02d      	b.n	80636dc <TEMT6000_ReadLight+0x7c>


	for(i = 0; i < TEMT6000_ADC_SAMPLES; i++)
 8063680:	2300      	movs	r3, #0
 8063682:	72fb      	strb	r3, [r7, #11]
 8063684:	e00b      	b.n	806369e <TEMT6000_ReadLight+0x3e>
	{
		AdcAverage += AdcValue[i];
 8063686:	7afb      	ldrb	r3, [r7, #11]
 8063688:	4a16      	ldr	r2, [pc, #88]	; (80636e4 <TEMT6000_ReadLight+0x84>)
 806368a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 806368e:	b29b      	uxth	r3, r3
 8063690:	461a      	mov	r2, r3
 8063692:	68fb      	ldr	r3, [r7, #12]
 8063694:	4413      	add	r3, r2
 8063696:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < TEMT6000_ADC_SAMPLES; i++)
 8063698:	7afb      	ldrb	r3, [r7, #11]
 806369a:	3301      	adds	r3, #1
 806369c:	72fb      	strb	r3, [r7, #11]
 806369e:	7afb      	ldrb	r3, [r7, #11]
 80636a0:	2b07      	cmp	r3, #7
 80636a2:	d9f0      	bls.n	8063686 <TEMT6000_ReadLight+0x26>
	}

	AdcAverage /= TEMT6000_ADC_SAMPLES;
 80636a4:	68fb      	ldr	r3, [r7, #12]
 80636a6:	08db      	lsrs	r3, r3, #3
 80636a8:	60fb      	str	r3, [r7, #12]

	*Result = ((((float)AdcAverage / (float)TEMT6000_ADC_MAX_VALUE) * (float)TEMT6000_POWER_SUPPLY) / TEMT6000_RESISTOR_OHMS) * 2000000.0;
 80636aa:	68fb      	ldr	r3, [r7, #12]
 80636ac:	ee07 3a90 	vmov	s15, r3
 80636b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80636b4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80636ec <TEMT6000_ReadLight+0x8c>
 80636b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80636bc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80636f0 <TEMT6000_ReadLight+0x90>
 80636c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80636c4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80636f4 <TEMT6000_ReadLight+0x94>
 80636c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80636cc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80636f8 <TEMT6000_ReadLight+0x98>
 80636d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80636d4:	687b      	ldr	r3, [r7, #4]
 80636d6:	edc3 7a00 	vstr	s15, [r3]

	return TEMT6000_OK;
 80636da:	2300      	movs	r3, #0
}
 80636dc:	4618      	mov	r0, r3
 80636de:	3710      	adds	r7, #16
 80636e0:	46bd      	mov	sp, r7
 80636e2:	bd80      	pop	{r7, pc}
 80636e4:	200057b4 	.word	0x200057b4
 80636e8:	20004f48 	.word	0x20004f48
 80636ec:	45800000 	.word	0x45800000
 80636f0:	40533333 	.word	0x40533333
 80636f4:	447a0000 	.word	0x447a0000
 80636f8:	49f42400 	.word	0x49f42400

080636fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80636fc:	b580      	push	{r7, lr}
 80636fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8063700:	4b11      	ldr	r3, [pc, #68]	; (8063748 <MX_USART1_UART_Init+0x4c>)
 8063702:	4a12      	ldr	r2, [pc, #72]	; (806374c <MX_USART1_UART_Init+0x50>)
 8063704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8063706:	4b10      	ldr	r3, [pc, #64]	; (8063748 <MX_USART1_UART_Init+0x4c>)
 8063708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 806370c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 806370e:	4b0e      	ldr	r3, [pc, #56]	; (8063748 <MX_USART1_UART_Init+0x4c>)
 8063710:	2200      	movs	r2, #0
 8063712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8063714:	4b0c      	ldr	r3, [pc, #48]	; (8063748 <MX_USART1_UART_Init+0x4c>)
 8063716:	2200      	movs	r2, #0
 8063718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 806371a:	4b0b      	ldr	r3, [pc, #44]	; (8063748 <MX_USART1_UART_Init+0x4c>)
 806371c:	2200      	movs	r2, #0
 806371e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8063720:	4b09      	ldr	r3, [pc, #36]	; (8063748 <MX_USART1_UART_Init+0x4c>)
 8063722:	220c      	movs	r2, #12
 8063724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8063726:	4b08      	ldr	r3, [pc, #32]	; (8063748 <MX_USART1_UART_Init+0x4c>)
 8063728:	2200      	movs	r2, #0
 806372a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 806372c:	4b06      	ldr	r3, [pc, #24]	; (8063748 <MX_USART1_UART_Init+0x4c>)
 806372e:	2200      	movs	r2, #0
 8063730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8063732:	4805      	ldr	r0, [pc, #20]	; (8063748 <MX_USART1_UART_Init+0x4c>)
 8063734:	f005 fc22 	bl	8068f7c <HAL_UART_Init>
 8063738:	4603      	mov	r3, r0
 806373a:	2b00      	cmp	r3, #0
 806373c:	d001      	beq.n	8063742 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 806373e:	f7ff fcb7 	bl	80630b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8063742:	bf00      	nop
 8063744:	bd80      	pop	{r7, pc}
 8063746:	bf00      	nop
 8063748:	200057c4 	.word	0x200057c4
 806374c:	40011000 	.word	0x40011000

08063750 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8063750:	b580      	push	{r7, lr}
 8063752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8063754:	4b11      	ldr	r3, [pc, #68]	; (806379c <MX_USART2_UART_Init+0x4c>)
 8063756:	4a12      	ldr	r2, [pc, #72]	; (80637a0 <MX_USART2_UART_Init+0x50>)
 8063758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 806375a:	4b10      	ldr	r3, [pc, #64]	; (806379c <MX_USART2_UART_Init+0x4c>)
 806375c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8063760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8063762:	4b0e      	ldr	r3, [pc, #56]	; (806379c <MX_USART2_UART_Init+0x4c>)
 8063764:	2200      	movs	r2, #0
 8063766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8063768:	4b0c      	ldr	r3, [pc, #48]	; (806379c <MX_USART2_UART_Init+0x4c>)
 806376a:	2200      	movs	r2, #0
 806376c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 806376e:	4b0b      	ldr	r3, [pc, #44]	; (806379c <MX_USART2_UART_Init+0x4c>)
 8063770:	2200      	movs	r2, #0
 8063772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8063774:	4b09      	ldr	r3, [pc, #36]	; (806379c <MX_USART2_UART_Init+0x4c>)
 8063776:	220c      	movs	r2, #12
 8063778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 806377a:	4b08      	ldr	r3, [pc, #32]	; (806379c <MX_USART2_UART_Init+0x4c>)
 806377c:	2200      	movs	r2, #0
 806377e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8063780:	4b06      	ldr	r3, [pc, #24]	; (806379c <MX_USART2_UART_Init+0x4c>)
 8063782:	2200      	movs	r2, #0
 8063784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8063786:	4805      	ldr	r0, [pc, #20]	; (806379c <MX_USART2_UART_Init+0x4c>)
 8063788:	f005 fbf8 	bl	8068f7c <HAL_UART_Init>
 806378c:	4603      	mov	r3, r0
 806378e:	2b00      	cmp	r3, #0
 8063790:	d001      	beq.n	8063796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8063792:	f7ff fc8d 	bl	80630b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8063796:	bf00      	nop
 8063798:	bd80      	pop	{r7, pc}
 806379a:	bf00      	nop
 806379c:	20005808 	.word	0x20005808
 80637a0:	40004400 	.word	0x40004400

080637a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80637a4:	b580      	push	{r7, lr}
 80637a6:	b08c      	sub	sp, #48	; 0x30
 80637a8:	af00      	add	r7, sp, #0
 80637aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80637ac:	f107 031c 	add.w	r3, r7, #28
 80637b0:	2200      	movs	r2, #0
 80637b2:	601a      	str	r2, [r3, #0]
 80637b4:	605a      	str	r2, [r3, #4]
 80637b6:	609a      	str	r2, [r3, #8]
 80637b8:	60da      	str	r2, [r3, #12]
 80637ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80637bc:	687b      	ldr	r3, [r7, #4]
 80637be:	681b      	ldr	r3, [r3, #0]
 80637c0:	4a45      	ldr	r2, [pc, #276]	; (80638d8 <HAL_UART_MspInit+0x134>)
 80637c2:	4293      	cmp	r3, r2
 80637c4:	d14b      	bne.n	806385e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80637c6:	2300      	movs	r3, #0
 80637c8:	61bb      	str	r3, [r7, #24]
 80637ca:	4b44      	ldr	r3, [pc, #272]	; (80638dc <HAL_UART_MspInit+0x138>)
 80637cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80637ce:	4a43      	ldr	r2, [pc, #268]	; (80638dc <HAL_UART_MspInit+0x138>)
 80637d0:	f043 0310 	orr.w	r3, r3, #16
 80637d4:	6453      	str	r3, [r2, #68]	; 0x44
 80637d6:	4b41      	ldr	r3, [pc, #260]	; (80638dc <HAL_UART_MspInit+0x138>)
 80637d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80637da:	f003 0310 	and.w	r3, r3, #16
 80637de:	61bb      	str	r3, [r7, #24]
 80637e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80637e2:	2300      	movs	r3, #0
 80637e4:	617b      	str	r3, [r7, #20]
 80637e6:	4b3d      	ldr	r3, [pc, #244]	; (80638dc <HAL_UART_MspInit+0x138>)
 80637e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80637ea:	4a3c      	ldr	r2, [pc, #240]	; (80638dc <HAL_UART_MspInit+0x138>)
 80637ec:	f043 0301 	orr.w	r3, r3, #1
 80637f0:	6313      	str	r3, [r2, #48]	; 0x30
 80637f2:	4b3a      	ldr	r3, [pc, #232]	; (80638dc <HAL_UART_MspInit+0x138>)
 80637f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80637f6:	f003 0301 	and.w	r3, r3, #1
 80637fa:	617b      	str	r3, [r7, #20]
 80637fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80637fe:	2300      	movs	r3, #0
 8063800:	613b      	str	r3, [r7, #16]
 8063802:	4b36      	ldr	r3, [pc, #216]	; (80638dc <HAL_UART_MspInit+0x138>)
 8063804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063806:	4a35      	ldr	r2, [pc, #212]	; (80638dc <HAL_UART_MspInit+0x138>)
 8063808:	f043 0302 	orr.w	r3, r3, #2
 806380c:	6313      	str	r3, [r2, #48]	; 0x30
 806380e:	4b33      	ldr	r3, [pc, #204]	; (80638dc <HAL_UART_MspInit+0x138>)
 8063810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063812:	f003 0302 	and.w	r3, r3, #2
 8063816:	613b      	str	r3, [r7, #16]
 8063818:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 806381a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 806381e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8063820:	2302      	movs	r3, #2
 8063822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8063824:	2300      	movs	r3, #0
 8063826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8063828:	2303      	movs	r3, #3
 806382a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 806382c:	2307      	movs	r3, #7
 806382e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8063830:	f107 031c 	add.w	r3, r7, #28
 8063834:	4619      	mov	r1, r3
 8063836:	482a      	ldr	r0, [pc, #168]	; (80638e0 <HAL_UART_MspInit+0x13c>)
 8063838:	f001 feac 	bl	8065594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 806383c:	2380      	movs	r3, #128	; 0x80
 806383e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8063840:	2302      	movs	r3, #2
 8063842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8063844:	2300      	movs	r3, #0
 8063846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8063848:	2303      	movs	r3, #3
 806384a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 806384c:	2307      	movs	r3, #7
 806384e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8063850:	f107 031c 	add.w	r3, r7, #28
 8063854:	4619      	mov	r1, r3
 8063856:	4823      	ldr	r0, [pc, #140]	; (80638e4 <HAL_UART_MspInit+0x140>)
 8063858:	f001 fe9c 	bl	8065594 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 806385c:	e038      	b.n	80638d0 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 806385e:	687b      	ldr	r3, [r7, #4]
 8063860:	681b      	ldr	r3, [r3, #0]
 8063862:	4a21      	ldr	r2, [pc, #132]	; (80638e8 <HAL_UART_MspInit+0x144>)
 8063864:	4293      	cmp	r3, r2
 8063866:	d133      	bne.n	80638d0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8063868:	2300      	movs	r3, #0
 806386a:	60fb      	str	r3, [r7, #12]
 806386c:	4b1b      	ldr	r3, [pc, #108]	; (80638dc <HAL_UART_MspInit+0x138>)
 806386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063870:	4a1a      	ldr	r2, [pc, #104]	; (80638dc <HAL_UART_MspInit+0x138>)
 8063872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8063876:	6413      	str	r3, [r2, #64]	; 0x40
 8063878:	4b18      	ldr	r3, [pc, #96]	; (80638dc <HAL_UART_MspInit+0x138>)
 806387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806387c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8063880:	60fb      	str	r3, [r7, #12]
 8063882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8063884:	2300      	movs	r3, #0
 8063886:	60bb      	str	r3, [r7, #8]
 8063888:	4b14      	ldr	r3, [pc, #80]	; (80638dc <HAL_UART_MspInit+0x138>)
 806388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806388c:	4a13      	ldr	r2, [pc, #76]	; (80638dc <HAL_UART_MspInit+0x138>)
 806388e:	f043 0301 	orr.w	r3, r3, #1
 8063892:	6313      	str	r3, [r2, #48]	; 0x30
 8063894:	4b11      	ldr	r3, [pc, #68]	; (80638dc <HAL_UART_MspInit+0x138>)
 8063896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063898:	f003 0301 	and.w	r3, r3, #1
 806389c:	60bb      	str	r3, [r7, #8]
 806389e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80638a0:	230c      	movs	r3, #12
 80638a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80638a4:	2302      	movs	r3, #2
 80638a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80638a8:	2300      	movs	r3, #0
 80638aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80638ac:	2303      	movs	r3, #3
 80638ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80638b0:	2307      	movs	r3, #7
 80638b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80638b4:	f107 031c 	add.w	r3, r7, #28
 80638b8:	4619      	mov	r1, r3
 80638ba:	4809      	ldr	r0, [pc, #36]	; (80638e0 <HAL_UART_MspInit+0x13c>)
 80638bc:	f001 fe6a 	bl	8065594 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80638c0:	2200      	movs	r2, #0
 80638c2:	2105      	movs	r1, #5
 80638c4:	2026      	movs	r0, #38	; 0x26
 80638c6:	f001 f89f 	bl	8064a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80638ca:	2026      	movs	r0, #38	; 0x26
 80638cc:	f001 f8c8 	bl	8064a60 <HAL_NVIC_EnableIRQ>
}
 80638d0:	bf00      	nop
 80638d2:	3730      	adds	r7, #48	; 0x30
 80638d4:	46bd      	mov	sp, r7
 80638d6:	bd80      	pop	{r7, pc}
 80638d8:	40011000 	.word	0x40011000
 80638dc:	40023800 	.word	0x40023800
 80638e0:	40020000 	.word	0x40020000
 80638e4:	40020400 	.word	0x40020400
 80638e8:	40004400 	.word	0x40004400

080638ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80638ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8063924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80638f0:	480d      	ldr	r0, [pc, #52]	; (8063928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80638f2:	490e      	ldr	r1, [pc, #56]	; (806392c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80638f4:	4a0e      	ldr	r2, [pc, #56]	; (8063930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80638f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80638f8:	e002      	b.n	8063900 <LoopCopyDataInit>

080638fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80638fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80638fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80638fe:	3304      	adds	r3, #4

08063900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8063900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8063902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8063904:	d3f9      	bcc.n	80638fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8063906:	4a0b      	ldr	r2, [pc, #44]	; (8063934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8063908:	4c0b      	ldr	r4, [pc, #44]	; (8063938 <LoopFillZerobss+0x26>)
  movs r3, #0
 806390a:	2300      	movs	r3, #0
  b LoopFillZerobss
 806390c:	e001      	b.n	8063912 <LoopFillZerobss>

0806390e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 806390e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8063910:	3204      	adds	r2, #4

08063912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8063912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8063914:	d3fb      	bcc.n	806390e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8063916:	f7ff fe71 	bl	80635fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 806391a:	f00e faab 	bl	8071e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 806391e:	f7ff fa9f 	bl	8062e60 <main>
  bx  lr    
 8063922:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8063924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8063928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 806392c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8063930:	08077354 	.word	0x08077354
  ldr r2, =_sbss
 8063934:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8063938:	20005d14 	.word	0x20005d14

0806393c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 806393c:	e7fe      	b.n	806393c <DMA1_Stream0_IRQHandler>
	...

08063940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8063940:	b580      	push	{r7, lr}
 8063942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8063944:	4b0e      	ldr	r3, [pc, #56]	; (8063980 <HAL_Init+0x40>)
 8063946:	681b      	ldr	r3, [r3, #0]
 8063948:	4a0d      	ldr	r2, [pc, #52]	; (8063980 <HAL_Init+0x40>)
 806394a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 806394e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8063950:	4b0b      	ldr	r3, [pc, #44]	; (8063980 <HAL_Init+0x40>)
 8063952:	681b      	ldr	r3, [r3, #0]
 8063954:	4a0a      	ldr	r2, [pc, #40]	; (8063980 <HAL_Init+0x40>)
 8063956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 806395a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 806395c:	4b08      	ldr	r3, [pc, #32]	; (8063980 <HAL_Init+0x40>)
 806395e:	681b      	ldr	r3, [r3, #0]
 8063960:	4a07      	ldr	r2, [pc, #28]	; (8063980 <HAL_Init+0x40>)
 8063962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8063966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8063968:	2003      	movs	r0, #3
 806396a:	f001 f82d 	bl	80649c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 806396e:	200f      	movs	r0, #15
 8063970:	f7ff fce6 	bl	8063340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8063974:	f7ff fcb8 	bl	80632e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8063978:	2300      	movs	r3, #0
}
 806397a:	4618      	mov	r0, r3
 806397c:	bd80      	pop	{r7, pc}
 806397e:	bf00      	nop
 8063980:	40023c00 	.word	0x40023c00

08063984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8063984:	b480      	push	{r7}
 8063986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8063988:	4b06      	ldr	r3, [pc, #24]	; (80639a4 <HAL_IncTick+0x20>)
 806398a:	781b      	ldrb	r3, [r3, #0]
 806398c:	461a      	mov	r2, r3
 806398e:	4b06      	ldr	r3, [pc, #24]	; (80639a8 <HAL_IncTick+0x24>)
 8063990:	681b      	ldr	r3, [r3, #0]
 8063992:	4413      	add	r3, r2
 8063994:	4a04      	ldr	r2, [pc, #16]	; (80639a8 <HAL_IncTick+0x24>)
 8063996:	6013      	str	r3, [r2, #0]
}
 8063998:	bf00      	nop
 806399a:	46bd      	mov	sp, r7
 806399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80639a0:	4770      	bx	lr
 80639a2:	bf00      	nop
 80639a4:	20000008 	.word	0x20000008
 80639a8:	2000584c 	.word	0x2000584c

080639ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80639ac:	b480      	push	{r7}
 80639ae:	af00      	add	r7, sp, #0
  return uwTick;
 80639b0:	4b03      	ldr	r3, [pc, #12]	; (80639c0 <HAL_GetTick+0x14>)
 80639b2:	681b      	ldr	r3, [r3, #0]
}
 80639b4:	4618      	mov	r0, r3
 80639b6:	46bd      	mov	sp, r7
 80639b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80639bc:	4770      	bx	lr
 80639be:	bf00      	nop
 80639c0:	2000584c 	.word	0x2000584c

080639c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80639c4:	b580      	push	{r7, lr}
 80639c6:	b084      	sub	sp, #16
 80639c8:	af00      	add	r7, sp, #0
 80639ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80639cc:	f7ff ffee 	bl	80639ac <HAL_GetTick>
 80639d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80639d2:	687b      	ldr	r3, [r7, #4]
 80639d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80639d6:	68fb      	ldr	r3, [r7, #12]
 80639d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80639dc:	d005      	beq.n	80639ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80639de:	4b0a      	ldr	r3, [pc, #40]	; (8063a08 <HAL_Delay+0x44>)
 80639e0:	781b      	ldrb	r3, [r3, #0]
 80639e2:	461a      	mov	r2, r3
 80639e4:	68fb      	ldr	r3, [r7, #12]
 80639e6:	4413      	add	r3, r2
 80639e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80639ea:	bf00      	nop
 80639ec:	f7ff ffde 	bl	80639ac <HAL_GetTick>
 80639f0:	4602      	mov	r2, r0
 80639f2:	68bb      	ldr	r3, [r7, #8]
 80639f4:	1ad3      	subs	r3, r2, r3
 80639f6:	68fa      	ldr	r2, [r7, #12]
 80639f8:	429a      	cmp	r2, r3
 80639fa:	d8f7      	bhi.n	80639ec <HAL_Delay+0x28>
  {
  }
}
 80639fc:	bf00      	nop
 80639fe:	bf00      	nop
 8063a00:	3710      	adds	r7, #16
 8063a02:	46bd      	mov	sp, r7
 8063a04:	bd80      	pop	{r7, pc}
 8063a06:	bf00      	nop
 8063a08:	20000008 	.word	0x20000008

08063a0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8063a0c:	b580      	push	{r7, lr}
 8063a0e:	b084      	sub	sp, #16
 8063a10:	af00      	add	r7, sp, #0
 8063a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8063a14:	2300      	movs	r3, #0
 8063a16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8063a18:	687b      	ldr	r3, [r7, #4]
 8063a1a:	2b00      	cmp	r3, #0
 8063a1c:	d101      	bne.n	8063a22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8063a1e:	2301      	movs	r3, #1
 8063a20:	e147      	b.n	8063cb2 <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8063a22:	687b      	ldr	r3, [r7, #4]
 8063a24:	681b      	ldr	r3, [r3, #0]
 8063a26:	4aa5      	ldr	r2, [pc, #660]	; (8063cbc <HAL_ADC_Init+0x2b0>)
 8063a28:	4293      	cmp	r3, r2
 8063a2a:	d004      	beq.n	8063a36 <HAL_ADC_Init+0x2a>
 8063a2c:	f240 1143 	movw	r1, #323	; 0x143
 8063a30:	48a3      	ldr	r0, [pc, #652]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063a32:	f7ff fb42 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8063a36:	687b      	ldr	r3, [r7, #4]
 8063a38:	685b      	ldr	r3, [r3, #4]
 8063a3a:	2b00      	cmp	r3, #0
 8063a3c:	d013      	beq.n	8063a66 <HAL_ADC_Init+0x5a>
 8063a3e:	687b      	ldr	r3, [r7, #4]
 8063a40:	685b      	ldr	r3, [r3, #4]
 8063a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8063a46:	d00e      	beq.n	8063a66 <HAL_ADC_Init+0x5a>
 8063a48:	687b      	ldr	r3, [r7, #4]
 8063a4a:	685b      	ldr	r3, [r3, #4]
 8063a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8063a50:	d009      	beq.n	8063a66 <HAL_ADC_Init+0x5a>
 8063a52:	687b      	ldr	r3, [r7, #4]
 8063a54:	685b      	ldr	r3, [r3, #4]
 8063a56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8063a5a:	d004      	beq.n	8063a66 <HAL_ADC_Init+0x5a>
 8063a5c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8063a60:	4897      	ldr	r0, [pc, #604]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063a62:	f7ff fb2a 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8063a66:	687b      	ldr	r3, [r7, #4]
 8063a68:	689b      	ldr	r3, [r3, #8]
 8063a6a:	2b00      	cmp	r3, #0
 8063a6c:	d013      	beq.n	8063a96 <HAL_ADC_Init+0x8a>
 8063a6e:	687b      	ldr	r3, [r7, #4]
 8063a70:	689b      	ldr	r3, [r3, #8]
 8063a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8063a76:	d00e      	beq.n	8063a96 <HAL_ADC_Init+0x8a>
 8063a78:	687b      	ldr	r3, [r7, #4]
 8063a7a:	689b      	ldr	r3, [r3, #8]
 8063a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8063a80:	d009      	beq.n	8063a96 <HAL_ADC_Init+0x8a>
 8063a82:	687b      	ldr	r3, [r7, #4]
 8063a84:	689b      	ldr	r3, [r3, #8]
 8063a86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8063a8a:	d004      	beq.n	8063a96 <HAL_ADC_Init+0x8a>
 8063a8c:	f240 1145 	movw	r1, #325	; 0x145
 8063a90:	488b      	ldr	r0, [pc, #556]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063a92:	f7ff fb12 	bl	80630ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8063a96:	687b      	ldr	r3, [r7, #4]
 8063a98:	691b      	ldr	r3, [r3, #16]
 8063a9a:	2b00      	cmp	r3, #0
 8063a9c:	d008      	beq.n	8063ab0 <HAL_ADC_Init+0xa4>
 8063a9e:	687b      	ldr	r3, [r7, #4]
 8063aa0:	691b      	ldr	r3, [r3, #16]
 8063aa2:	2b01      	cmp	r3, #1
 8063aa4:	d004      	beq.n	8063ab0 <HAL_ADC_Init+0xa4>
 8063aa6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8063aaa:	4885      	ldr	r0, [pc, #532]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063aac:	f7ff fb05 	bl	80630ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8063ab0:	687b      	ldr	r3, [r7, #4]
 8063ab2:	7e1b      	ldrb	r3, [r3, #24]
 8063ab4:	2b00      	cmp	r3, #0
 8063ab6:	d008      	beq.n	8063aca <HAL_ADC_Init+0xbe>
 8063ab8:	687b      	ldr	r3, [r7, #4]
 8063aba:	7e1b      	ldrb	r3, [r3, #24]
 8063abc:	2b01      	cmp	r3, #1
 8063abe:	d004      	beq.n	8063aca <HAL_ADC_Init+0xbe>
 8063ac0:	f240 1147 	movw	r1, #327	; 0x147
 8063ac4:	487e      	ldr	r0, [pc, #504]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063ac6:	f7ff faf8 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8063aca:	687b      	ldr	r3, [r7, #4]
 8063acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063ace:	2b00      	cmp	r3, #0
 8063ad0:	d054      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063ad2:	687b      	ldr	r3, [r7, #4]
 8063ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8063ada:	d04f      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063adc:	687b      	ldr	r3, [r7, #4]
 8063ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063ae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8063ae4:	d04a      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063ae6:	687b      	ldr	r3, [r7, #4]
 8063ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063aea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8063aee:	d045      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063af0:	687b      	ldr	r3, [r7, #4]
 8063af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8063af8:	d040      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063afa:	687b      	ldr	r3, [r7, #4]
 8063afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063afe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8063b02:	d03b      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b04:	687b      	ldr	r3, [r7, #4]
 8063b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b08:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8063b0c:	d036      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b0e:	687b      	ldr	r3, [r7, #4]
 8063b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b12:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8063b16:	d031      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b18:	687b      	ldr	r3, [r7, #4]
 8063b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8063b20:	d02c      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b22:	687b      	ldr	r3, [r7, #4]
 8063b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b26:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8063b2a:	d027      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b2c:	687b      	ldr	r3, [r7, #4]
 8063b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b30:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8063b34:	d022      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b36:	687b      	ldr	r3, [r7, #4]
 8063b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b3a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8063b3e:	d01d      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b40:	687b      	ldr	r3, [r7, #4]
 8063b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b44:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8063b48:	d018      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b4a:	687b      	ldr	r3, [r7, #4]
 8063b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b4e:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8063b52:	d013      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b54:	687b      	ldr	r3, [r7, #4]
 8063b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b58:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8063b5c:	d00e      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b5e:	687b      	ldr	r3, [r7, #4]
 8063b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b62:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8063b66:	d009      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b68:	687b      	ldr	r3, [r7, #4]
 8063b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b6c:	4a55      	ldr	r2, [pc, #340]	; (8063cc4 <HAL_ADC_Init+0x2b8>)
 8063b6e:	4293      	cmp	r3, r2
 8063b70:	d004      	beq.n	8063b7c <HAL_ADC_Init+0x170>
 8063b72:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8063b76:	4852      	ldr	r0, [pc, #328]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063b78:	f7ff fa9f 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8063b7c:	687b      	ldr	r3, [r7, #4]
 8063b7e:	68db      	ldr	r3, [r3, #12]
 8063b80:	2b00      	cmp	r3, #0
 8063b82:	d009      	beq.n	8063b98 <HAL_ADC_Init+0x18c>
 8063b84:	687b      	ldr	r3, [r7, #4]
 8063b86:	68db      	ldr	r3, [r3, #12]
 8063b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8063b8c:	d004      	beq.n	8063b98 <HAL_ADC_Init+0x18c>
 8063b8e:	f240 1149 	movw	r1, #329	; 0x149
 8063b92:	484b      	ldr	r0, [pc, #300]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063b94:	f7ff fa91 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8063b98:	687b      	ldr	r3, [r7, #4]
 8063b9a:	69db      	ldr	r3, [r3, #28]
 8063b9c:	2b00      	cmp	r3, #0
 8063b9e:	d003      	beq.n	8063ba8 <HAL_ADC_Init+0x19c>
 8063ba0:	687b      	ldr	r3, [r7, #4]
 8063ba2:	69db      	ldr	r3, [r3, #28]
 8063ba4:	2b10      	cmp	r3, #16
 8063ba6:	d904      	bls.n	8063bb2 <HAL_ADC_Init+0x1a6>
 8063ba8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8063bac:	4844      	ldr	r0, [pc, #272]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063bae:	f7ff fa84 	bl	80630ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8063bb2:	687b      	ldr	r3, [r7, #4]
 8063bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8063bb8:	2b00      	cmp	r3, #0
 8063bba:	d009      	beq.n	8063bd0 <HAL_ADC_Init+0x1c4>
 8063bbc:	687b      	ldr	r3, [r7, #4]
 8063bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8063bc2:	2b01      	cmp	r3, #1
 8063bc4:	d004      	beq.n	8063bd0 <HAL_ADC_Init+0x1c4>
 8063bc6:	f240 114b 	movw	r1, #331	; 0x14b
 8063bca:	483d      	ldr	r0, [pc, #244]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063bcc:	f7ff fa75 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8063bd0:	687b      	ldr	r3, [r7, #4]
 8063bd2:	695b      	ldr	r3, [r3, #20]
 8063bd4:	2b01      	cmp	r3, #1
 8063bd6:	d00c      	beq.n	8063bf2 <HAL_ADC_Init+0x1e6>
 8063bd8:	687b      	ldr	r3, [r7, #4]
 8063bda:	695b      	ldr	r3, [r3, #20]
 8063bdc:	2b00      	cmp	r3, #0
 8063bde:	d008      	beq.n	8063bf2 <HAL_ADC_Init+0x1e6>
 8063be0:	687b      	ldr	r3, [r7, #4]
 8063be2:	695b      	ldr	r3, [r3, #20]
 8063be4:	2b02      	cmp	r3, #2
 8063be6:	d004      	beq.n	8063bf2 <HAL_ADC_Init+0x1e6>
 8063be8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8063bec:	4834      	ldr	r0, [pc, #208]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063bee:	f7ff fa64 	bl	80630ba <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8063bf2:	687b      	ldr	r3, [r7, #4]
 8063bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8063bf8:	2b00      	cmp	r3, #0
 8063bfa:	d009      	beq.n	8063c10 <HAL_ADC_Init+0x204>
 8063bfc:	687b      	ldr	r3, [r7, #4]
 8063bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8063c02:	2b01      	cmp	r3, #1
 8063c04:	d004      	beq.n	8063c10 <HAL_ADC_Init+0x204>
 8063c06:	f240 114d 	movw	r1, #333	; 0x14d
 8063c0a:	482d      	ldr	r0, [pc, #180]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063c0c:	f7ff fa55 	bl	80630ba <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8063c10:	687b      	ldr	r3, [r7, #4]
 8063c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063c14:	4a2b      	ldr	r2, [pc, #172]	; (8063cc4 <HAL_ADC_Init+0x2b8>)
 8063c16:	4293      	cmp	r3, r2
 8063c18:	d017      	beq.n	8063c4a <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8063c1a:	687b      	ldr	r3, [r7, #4]
 8063c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063c1e:	2b00      	cmp	r3, #0
 8063c20:	d013      	beq.n	8063c4a <HAL_ADC_Init+0x23e>
 8063c22:	687b      	ldr	r3, [r7, #4]
 8063c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8063c2a:	d00e      	beq.n	8063c4a <HAL_ADC_Init+0x23e>
 8063c2c:	687b      	ldr	r3, [r7, #4]
 8063c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8063c34:	d009      	beq.n	8063c4a <HAL_ADC_Init+0x23e>
 8063c36:	687b      	ldr	r3, [r7, #4]
 8063c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063c3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8063c3e:	d004      	beq.n	8063c4a <HAL_ADC_Init+0x23e>
 8063c40:	f240 1151 	movw	r1, #337	; 0x151
 8063c44:	481e      	ldr	r0, [pc, #120]	; (8063cc0 <HAL_ADC_Init+0x2b4>)
 8063c46:	f7ff fa38 	bl	80630ba <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8063c4a:	687b      	ldr	r3, [r7, #4]
 8063c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063c4e:	2b00      	cmp	r3, #0
 8063c50:	d109      	bne.n	8063c66 <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8063c52:	6878      	ldr	r0, [r7, #4]
 8063c54:	f7fd fb76 	bl	8061344 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8063c58:	687b      	ldr	r3, [r7, #4]
 8063c5a:	2200      	movs	r2, #0
 8063c5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8063c5e:	687b      	ldr	r3, [r7, #4]
 8063c60:	2200      	movs	r2, #0
 8063c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8063c66:	687b      	ldr	r3, [r7, #4]
 8063c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063c6a:	f003 0310 	and.w	r3, r3, #16
 8063c6e:	2b00      	cmp	r3, #0
 8063c70:	d118      	bne.n	8063ca4 <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8063c72:	687b      	ldr	r3, [r7, #4]
 8063c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063c76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8063c7a:	f023 0302 	bic.w	r3, r3, #2
 8063c7e:	f043 0202 	orr.w	r2, r3, #2
 8063c82:	687b      	ldr	r3, [r7, #4]
 8063c84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8063c86:	6878      	ldr	r0, [r7, #4]
 8063c88:	f000 fc44 	bl	8064514 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8063c8c:	687b      	ldr	r3, [r7, #4]
 8063c8e:	2200      	movs	r2, #0
 8063c90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8063c92:	687b      	ldr	r3, [r7, #4]
 8063c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063c96:	f023 0303 	bic.w	r3, r3, #3
 8063c9a:	f043 0201 	orr.w	r2, r3, #1
 8063c9e:	687b      	ldr	r3, [r7, #4]
 8063ca0:	641a      	str	r2, [r3, #64]	; 0x40
 8063ca2:	e001      	b.n	8063ca8 <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8063ca4:	2301      	movs	r3, #1
 8063ca6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8063ca8:	687b      	ldr	r3, [r7, #4]
 8063caa:	2200      	movs	r2, #0
 8063cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8063cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8063cb2:	4618      	mov	r0, r3
 8063cb4:	3710      	adds	r7, #16
 8063cb6:	46bd      	mov	sp, r7
 8063cb8:	bd80      	pop	{r7, pc}
 8063cba:	bf00      	nop
 8063cbc:	40012000 	.word	0x40012000
 8063cc0:	08076a54 	.word	0x08076a54
 8063cc4:	0f000001 	.word	0x0f000001

08063cc8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8063cc8:	b580      	push	{r7, lr}
 8063cca:	b084      	sub	sp, #16
 8063ccc:	af00      	add	r7, sp, #0
 8063cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8063cd0:	2300      	movs	r3, #0
 8063cd2:	60fb      	str	r3, [r7, #12]
 8063cd4:	2300      	movs	r3, #0
 8063cd6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8063cd8:	687b      	ldr	r3, [r7, #4]
 8063cda:	7e1b      	ldrb	r3, [r3, #24]
 8063cdc:	2b00      	cmp	r3, #0
 8063cde:	d008      	beq.n	8063cf2 <HAL_ADC_IRQHandler+0x2a>
 8063ce0:	687b      	ldr	r3, [r7, #4]
 8063ce2:	7e1b      	ldrb	r3, [r3, #24]
 8063ce4:	2b01      	cmp	r3, #1
 8063ce6:	d004      	beq.n	8063cf2 <HAL_ADC_IRQHandler+0x2a>
 8063ce8:	f240 41b5 	movw	r1, #1205	; 0x4b5
 8063cec:	4860      	ldr	r0, [pc, #384]	; (8063e70 <HAL_ADC_IRQHandler+0x1a8>)
 8063cee:	f7ff f9e4 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8063cf2:	687b      	ldr	r3, [r7, #4]
 8063cf4:	69db      	ldr	r3, [r3, #28]
 8063cf6:	2b00      	cmp	r3, #0
 8063cf8:	d003      	beq.n	8063d02 <HAL_ADC_IRQHandler+0x3a>
 8063cfa:	687b      	ldr	r3, [r7, #4]
 8063cfc:	69db      	ldr	r3, [r3, #28]
 8063cfe:	2b10      	cmp	r3, #16
 8063d00:	d904      	bls.n	8063d0c <HAL_ADC_IRQHandler+0x44>
 8063d02:	f240 41b6 	movw	r1, #1206	; 0x4b6
 8063d06:	485a      	ldr	r0, [pc, #360]	; (8063e70 <HAL_ADC_IRQHandler+0x1a8>)
 8063d08:	f7ff f9d7 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8063d0c:	687b      	ldr	r3, [r7, #4]
 8063d0e:	695b      	ldr	r3, [r3, #20]
 8063d10:	2b01      	cmp	r3, #1
 8063d12:	d00c      	beq.n	8063d2e <HAL_ADC_IRQHandler+0x66>
 8063d14:	687b      	ldr	r3, [r7, #4]
 8063d16:	695b      	ldr	r3, [r3, #20]
 8063d18:	2b00      	cmp	r3, #0
 8063d1a:	d008      	beq.n	8063d2e <HAL_ADC_IRQHandler+0x66>
 8063d1c:	687b      	ldr	r3, [r7, #4]
 8063d1e:	695b      	ldr	r3, [r3, #20]
 8063d20:	2b02      	cmp	r3, #2
 8063d22:	d004      	beq.n	8063d2e <HAL_ADC_IRQHandler+0x66>
 8063d24:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8063d28:	4851      	ldr	r0, [pc, #324]	; (8063e70 <HAL_ADC_IRQHandler+0x1a8>)
 8063d2a:	f7ff f9c6 	bl	80630ba <assert_failed>
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8063d2e:	687b      	ldr	r3, [r7, #4]
 8063d30:	681b      	ldr	r3, [r3, #0]
 8063d32:	681b      	ldr	r3, [r3, #0]
 8063d34:	f003 0302 	and.w	r3, r3, #2
 8063d38:	2b02      	cmp	r3, #2
 8063d3a:	bf0c      	ite	eq
 8063d3c:	2301      	moveq	r3, #1
 8063d3e:	2300      	movne	r3, #0
 8063d40:	b2db      	uxtb	r3, r3
 8063d42:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8063d44:	687b      	ldr	r3, [r7, #4]
 8063d46:	681b      	ldr	r3, [r3, #0]
 8063d48:	685b      	ldr	r3, [r3, #4]
 8063d4a:	f003 0320 	and.w	r3, r3, #32
 8063d4e:	2b20      	cmp	r3, #32
 8063d50:	bf0c      	ite	eq
 8063d52:	2301      	moveq	r3, #1
 8063d54:	2300      	movne	r3, #0
 8063d56:	b2db      	uxtb	r3, r3
 8063d58:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8063d5a:	68fb      	ldr	r3, [r7, #12]
 8063d5c:	2b00      	cmp	r3, #0
 8063d5e:	d049      	beq.n	8063df4 <HAL_ADC_IRQHandler+0x12c>
 8063d60:	68bb      	ldr	r3, [r7, #8]
 8063d62:	2b00      	cmp	r3, #0
 8063d64:	d046      	beq.n	8063df4 <HAL_ADC_IRQHandler+0x12c>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8063d66:	687b      	ldr	r3, [r7, #4]
 8063d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063d6a:	f003 0310 	and.w	r3, r3, #16
 8063d6e:	2b00      	cmp	r3, #0
 8063d70:	d105      	bne.n	8063d7e <HAL_ADC_IRQHandler+0xb6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8063d72:	687b      	ldr	r3, [r7, #4]
 8063d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063d76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8063d7a:	687b      	ldr	r3, [r7, #4]
 8063d7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8063d7e:	687b      	ldr	r3, [r7, #4]
 8063d80:	681b      	ldr	r3, [r3, #0]
 8063d82:	689b      	ldr	r3, [r3, #8]
 8063d84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8063d88:	2b00      	cmp	r3, #0
 8063d8a:	d12b      	bne.n	8063de4 <HAL_ADC_IRQHandler+0x11c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8063d8c:	687b      	ldr	r3, [r7, #4]
 8063d8e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8063d90:	2b00      	cmp	r3, #0
 8063d92:	d127      	bne.n	8063de4 <HAL_ADC_IRQHandler+0x11c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8063d94:	687b      	ldr	r3, [r7, #4]
 8063d96:	681b      	ldr	r3, [r3, #0]
 8063d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063d9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8063d9e:	2b00      	cmp	r3, #0
 8063da0:	d006      	beq.n	8063db0 <HAL_ADC_IRQHandler+0xe8>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8063da2:	687b      	ldr	r3, [r7, #4]
 8063da4:	681b      	ldr	r3, [r3, #0]
 8063da6:	689b      	ldr	r3, [r3, #8]
 8063da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8063dac:	2b00      	cmp	r3, #0
 8063dae:	d119      	bne.n	8063de4 <HAL_ADC_IRQHandler+0x11c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8063db0:	687b      	ldr	r3, [r7, #4]
 8063db2:	681b      	ldr	r3, [r3, #0]
 8063db4:	685a      	ldr	r2, [r3, #4]
 8063db6:	687b      	ldr	r3, [r7, #4]
 8063db8:	681b      	ldr	r3, [r3, #0]
 8063dba:	f022 0220 	bic.w	r2, r2, #32
 8063dbe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8063dc0:	687b      	ldr	r3, [r7, #4]
 8063dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063dc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8063dc8:	687b      	ldr	r3, [r7, #4]
 8063dca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8063dcc:	687b      	ldr	r3, [r7, #4]
 8063dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8063dd4:	2b00      	cmp	r3, #0
 8063dd6:	d105      	bne.n	8063de4 <HAL_ADC_IRQHandler+0x11c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8063dd8:	687b      	ldr	r3, [r7, #4]
 8063dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063ddc:	f043 0201 	orr.w	r2, r3, #1
 8063de0:	687b      	ldr	r3, [r7, #4]
 8063de2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8063de4:	6878      	ldr	r0, [r7, #4]
 8063de6:	f000 f9f7 	bl	80641d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8063dea:	687b      	ldr	r3, [r7, #4]
 8063dec:	681b      	ldr	r3, [r3, #0]
 8063dee:	f06f 0212 	mvn.w	r2, #18
 8063df2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8063df4:	687b      	ldr	r3, [r7, #4]
 8063df6:	681b      	ldr	r3, [r3, #0]
 8063df8:	681b      	ldr	r3, [r3, #0]
 8063dfa:	f003 0304 	and.w	r3, r3, #4
 8063dfe:	2b04      	cmp	r3, #4
 8063e00:	bf0c      	ite	eq
 8063e02:	2301      	moveq	r3, #1
 8063e04:	2300      	movne	r3, #0
 8063e06:	b2db      	uxtb	r3, r3
 8063e08:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8063e0a:	687b      	ldr	r3, [r7, #4]
 8063e0c:	681b      	ldr	r3, [r3, #0]
 8063e0e:	685b      	ldr	r3, [r3, #4]
 8063e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8063e14:	2b80      	cmp	r3, #128	; 0x80
 8063e16:	bf0c      	ite	eq
 8063e18:	2301      	moveq	r3, #1
 8063e1a:	2300      	movne	r3, #0
 8063e1c:	b2db      	uxtb	r3, r3
 8063e1e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8063e20:	68fb      	ldr	r3, [r7, #12]
 8063e22:	2b00      	cmp	r3, #0
 8063e24:	d05a      	beq.n	8063edc <HAL_ADC_IRQHandler+0x214>
 8063e26:	68bb      	ldr	r3, [r7, #8]
 8063e28:	2b00      	cmp	r3, #0
 8063e2a:	d057      	beq.n	8063edc <HAL_ADC_IRQHandler+0x214>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8063e2c:	687b      	ldr	r3, [r7, #4]
 8063e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063e30:	f003 0310 	and.w	r3, r3, #16
 8063e34:	2b00      	cmp	r3, #0
 8063e36:	d105      	bne.n	8063e44 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8063e38:	687b      	ldr	r3, [r7, #4]
 8063e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063e3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8063e40:	687b      	ldr	r3, [r7, #4]
 8063e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8063e44:	687b      	ldr	r3, [r7, #4]
 8063e46:	681b      	ldr	r3, [r3, #0]
 8063e48:	689b      	ldr	r3, [r3, #8]
 8063e4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8063e4e:	2b00      	cmp	r3, #0
 8063e50:	d13c      	bne.n	8063ecc <HAL_ADC_IRQHandler+0x204>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8063e52:	687b      	ldr	r3, [r7, #4]
 8063e54:	681b      	ldr	r3, [r3, #0]
 8063e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8063e58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8063e5c:	2b00      	cmp	r3, #0
 8063e5e:	d009      	beq.n	8063e74 <HAL_ADC_IRQHandler+0x1ac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8063e60:	687b      	ldr	r3, [r7, #4]
 8063e62:	681b      	ldr	r3, [r3, #0]
 8063e64:	689b      	ldr	r3, [r3, #8]
 8063e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8063e6a:	2b00      	cmp	r3, #0
 8063e6c:	d12e      	bne.n	8063ecc <HAL_ADC_IRQHandler+0x204>
 8063e6e:	e001      	b.n	8063e74 <HAL_ADC_IRQHandler+0x1ac>
 8063e70:	08076a54 	.word	0x08076a54
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8063e74:	687b      	ldr	r3, [r7, #4]
 8063e76:	681b      	ldr	r3, [r3, #0]
 8063e78:	685b      	ldr	r3, [r3, #4]
 8063e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8063e7e:	2b00      	cmp	r3, #0
 8063e80:	d124      	bne.n	8063ecc <HAL_ADC_IRQHandler+0x204>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8063e82:	687b      	ldr	r3, [r7, #4]
 8063e84:	681b      	ldr	r3, [r3, #0]
 8063e86:	689b      	ldr	r3, [r3, #8]
 8063e88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8063e8c:	2b00      	cmp	r3, #0
 8063e8e:	d11d      	bne.n	8063ecc <HAL_ADC_IRQHandler+0x204>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8063e90:	687b      	ldr	r3, [r7, #4]
 8063e92:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8063e94:	2b00      	cmp	r3, #0
 8063e96:	d119      	bne.n	8063ecc <HAL_ADC_IRQHandler+0x204>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8063e98:	687b      	ldr	r3, [r7, #4]
 8063e9a:	681b      	ldr	r3, [r3, #0]
 8063e9c:	685a      	ldr	r2, [r3, #4]
 8063e9e:	687b      	ldr	r3, [r7, #4]
 8063ea0:	681b      	ldr	r3, [r3, #0]
 8063ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8063ea6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8063ea8:	687b      	ldr	r3, [r7, #4]
 8063eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063eac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8063eb0:	687b      	ldr	r3, [r7, #4]
 8063eb2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8063eb4:	687b      	ldr	r3, [r7, #4]
 8063eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8063ebc:	2b00      	cmp	r3, #0
 8063ebe:	d105      	bne.n	8063ecc <HAL_ADC_IRQHandler+0x204>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8063ec0:	687b      	ldr	r3, [r7, #4]
 8063ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063ec4:	f043 0201 	orr.w	r2, r3, #1
 8063ec8:	687b      	ldr	r3, [r7, #4]
 8063eca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8063ecc:	6878      	ldr	r0, [r7, #4]
 8063ece:	f000 fcad 	bl	806482c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8063ed2:	687b      	ldr	r3, [r7, #4]
 8063ed4:	681b      	ldr	r3, [r3, #0]
 8063ed6:	f06f 020c 	mvn.w	r2, #12
 8063eda:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8063edc:	687b      	ldr	r3, [r7, #4]
 8063ede:	681b      	ldr	r3, [r3, #0]
 8063ee0:	681b      	ldr	r3, [r3, #0]
 8063ee2:	f003 0301 	and.w	r3, r3, #1
 8063ee6:	2b01      	cmp	r3, #1
 8063ee8:	bf0c      	ite	eq
 8063eea:	2301      	moveq	r3, #1
 8063eec:	2300      	movne	r3, #0
 8063eee:	b2db      	uxtb	r3, r3
 8063ef0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8063ef2:	687b      	ldr	r3, [r7, #4]
 8063ef4:	681b      	ldr	r3, [r3, #0]
 8063ef6:	685b      	ldr	r3, [r3, #4]
 8063ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8063efc:	2b40      	cmp	r3, #64	; 0x40
 8063efe:	bf0c      	ite	eq
 8063f00:	2301      	moveq	r3, #1
 8063f02:	2300      	movne	r3, #0
 8063f04:	b2db      	uxtb	r3, r3
 8063f06:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8063f08:	68fb      	ldr	r3, [r7, #12]
 8063f0a:	2b00      	cmp	r3, #0
 8063f0c:	d017      	beq.n	8063f3e <HAL_ADC_IRQHandler+0x276>
 8063f0e:	68bb      	ldr	r3, [r7, #8]
 8063f10:	2b00      	cmp	r3, #0
 8063f12:	d014      	beq.n	8063f3e <HAL_ADC_IRQHandler+0x276>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8063f14:	687b      	ldr	r3, [r7, #4]
 8063f16:	681b      	ldr	r3, [r3, #0]
 8063f18:	681b      	ldr	r3, [r3, #0]
 8063f1a:	f003 0301 	and.w	r3, r3, #1
 8063f1e:	2b01      	cmp	r3, #1
 8063f20:	d10d      	bne.n	8063f3e <HAL_ADC_IRQHandler+0x276>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8063f22:	687b      	ldr	r3, [r7, #4]
 8063f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063f26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8063f2a:	687b      	ldr	r3, [r7, #4]
 8063f2c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8063f2e:	6878      	ldr	r0, [r7, #4]
 8063f30:	f000 f966 	bl	8064200 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8063f34:	687b      	ldr	r3, [r7, #4]
 8063f36:	681b      	ldr	r3, [r3, #0]
 8063f38:	f06f 0201 	mvn.w	r2, #1
 8063f3c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8063f3e:	687b      	ldr	r3, [r7, #4]
 8063f40:	681b      	ldr	r3, [r3, #0]
 8063f42:	681b      	ldr	r3, [r3, #0]
 8063f44:	f003 0320 	and.w	r3, r3, #32
 8063f48:	2b20      	cmp	r3, #32
 8063f4a:	bf0c      	ite	eq
 8063f4c:	2301      	moveq	r3, #1
 8063f4e:	2300      	movne	r3, #0
 8063f50:	b2db      	uxtb	r3, r3
 8063f52:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8063f54:	687b      	ldr	r3, [r7, #4]
 8063f56:	681b      	ldr	r3, [r3, #0]
 8063f58:	685b      	ldr	r3, [r3, #4]
 8063f5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8063f5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8063f62:	bf0c      	ite	eq
 8063f64:	2301      	moveq	r3, #1
 8063f66:	2300      	movne	r3, #0
 8063f68:	b2db      	uxtb	r3, r3
 8063f6a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8063f6c:	68fb      	ldr	r3, [r7, #12]
 8063f6e:	2b00      	cmp	r3, #0
 8063f70:	d015      	beq.n	8063f9e <HAL_ADC_IRQHandler+0x2d6>
 8063f72:	68bb      	ldr	r3, [r7, #8]
 8063f74:	2b00      	cmp	r3, #0
 8063f76:	d012      	beq.n	8063f9e <HAL_ADC_IRQHandler+0x2d6>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8063f78:	687b      	ldr	r3, [r7, #4]
 8063f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8063f7c:	f043 0202 	orr.w	r2, r3, #2
 8063f80:	687b      	ldr	r3, [r7, #4]
 8063f82:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8063f84:	687b      	ldr	r3, [r7, #4]
 8063f86:	681b      	ldr	r3, [r3, #0]
 8063f88:	f06f 0220 	mvn.w	r2, #32
 8063f8c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8063f8e:	6878      	ldr	r0, [r7, #4]
 8063f90:	f000 f940 	bl	8064214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8063f94:	687b      	ldr	r3, [r7, #4]
 8063f96:	681b      	ldr	r3, [r3, #0]
 8063f98:	f06f 0220 	mvn.w	r2, #32
 8063f9c:	601a      	str	r2, [r3, #0]
  }
}
 8063f9e:	bf00      	nop
 8063fa0:	3710      	adds	r7, #16
 8063fa2:	46bd      	mov	sp, r7
 8063fa4:	bd80      	pop	{r7, pc}
 8063fa6:	bf00      	nop

08063fa8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8063fa8:	b580      	push	{r7, lr}
 8063faa:	b086      	sub	sp, #24
 8063fac:	af00      	add	r7, sp, #0
 8063fae:	60f8      	str	r0, [r7, #12]
 8063fb0:	60b9      	str	r1, [r7, #8]
 8063fb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8063fb4:	2300      	movs	r3, #0
 8063fb6:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8063fb8:	68fb      	ldr	r3, [r7, #12]
 8063fba:	7e1b      	ldrb	r3, [r3, #24]
 8063fbc:	2b00      	cmp	r3, #0
 8063fbe:	d008      	beq.n	8063fd2 <HAL_ADC_Start_DMA+0x2a>
 8063fc0:	68fb      	ldr	r3, [r7, #12]
 8063fc2:	7e1b      	ldrb	r3, [r3, #24]
 8063fc4:	2b01      	cmp	r3, #1
 8063fc6:	d004      	beq.n	8063fd2 <HAL_ADC_Start_DMA+0x2a>
 8063fc8:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 8063fcc:	487a      	ldr	r0, [pc, #488]	; (80641b8 <HAL_ADC_Start_DMA+0x210>)
 8063fce:	f7ff f874 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8063fd2:	68fb      	ldr	r3, [r7, #12]
 8063fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063fd6:	2b00      	cmp	r3, #0
 8063fd8:	d013      	beq.n	8064002 <HAL_ADC_Start_DMA+0x5a>
 8063fda:	68fb      	ldr	r3, [r7, #12]
 8063fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8063fe2:	d00e      	beq.n	8064002 <HAL_ADC_Start_DMA+0x5a>
 8063fe4:	68fb      	ldr	r3, [r7, #12]
 8063fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8063fec:	d009      	beq.n	8064002 <HAL_ADC_Start_DMA+0x5a>
 8063fee:	68fb      	ldr	r3, [r7, #12]
 8063ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063ff2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8063ff6:	d004      	beq.n	8064002 <HAL_ADC_Start_DMA+0x5a>
 8063ff8:	f240 5159 	movw	r1, #1369	; 0x559
 8063ffc:	486e      	ldr	r0, [pc, #440]	; (80641b8 <HAL_ADC_Start_DMA+0x210>)
 8063ffe:	f7ff f85c 	bl	80630ba <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8064002:	68fb      	ldr	r3, [r7, #12]
 8064004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8064008:	2b01      	cmp	r3, #1
 806400a:	d101      	bne.n	8064010 <HAL_ADC_Start_DMA+0x68>
 806400c:	2302      	movs	r3, #2
 806400e:	e0ce      	b.n	80641ae <HAL_ADC_Start_DMA+0x206>
 8064010:	68fb      	ldr	r3, [r7, #12]
 8064012:	2201      	movs	r2, #1
 8064014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8064018:	68fb      	ldr	r3, [r7, #12]
 806401a:	681b      	ldr	r3, [r3, #0]
 806401c:	689b      	ldr	r3, [r3, #8]
 806401e:	f003 0301 	and.w	r3, r3, #1
 8064022:	2b01      	cmp	r3, #1
 8064024:	d018      	beq.n	8064058 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8064026:	68fb      	ldr	r3, [r7, #12]
 8064028:	681b      	ldr	r3, [r3, #0]
 806402a:	689a      	ldr	r2, [r3, #8]
 806402c:	68fb      	ldr	r3, [r7, #12]
 806402e:	681b      	ldr	r3, [r3, #0]
 8064030:	f042 0201 	orr.w	r2, r2, #1
 8064034:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8064036:	4b61      	ldr	r3, [pc, #388]	; (80641bc <HAL_ADC_Start_DMA+0x214>)
 8064038:	681b      	ldr	r3, [r3, #0]
 806403a:	4a61      	ldr	r2, [pc, #388]	; (80641c0 <HAL_ADC_Start_DMA+0x218>)
 806403c:	fba2 2303 	umull	r2, r3, r2, r3
 8064040:	0c9a      	lsrs	r2, r3, #18
 8064042:	4613      	mov	r3, r2
 8064044:	005b      	lsls	r3, r3, #1
 8064046:	4413      	add	r3, r2
 8064048:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 806404a:	e002      	b.n	8064052 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 806404c:	693b      	ldr	r3, [r7, #16]
 806404e:	3b01      	subs	r3, #1
 8064050:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8064052:	693b      	ldr	r3, [r7, #16]
 8064054:	2b00      	cmp	r3, #0
 8064056:	d1f9      	bne.n	806404c <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8064058:	68fb      	ldr	r3, [r7, #12]
 806405a:	681b      	ldr	r3, [r3, #0]
 806405c:	689b      	ldr	r3, [r3, #8]
 806405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8064062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8064066:	d107      	bne.n	8064078 <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8064068:	68fb      	ldr	r3, [r7, #12]
 806406a:	681b      	ldr	r3, [r3, #0]
 806406c:	689a      	ldr	r2, [r3, #8]
 806406e:	68fb      	ldr	r3, [r7, #12]
 8064070:	681b      	ldr	r3, [r3, #0]
 8064072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8064076:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8064078:	68fb      	ldr	r3, [r7, #12]
 806407a:	681b      	ldr	r3, [r3, #0]
 806407c:	689b      	ldr	r3, [r3, #8]
 806407e:	f003 0301 	and.w	r3, r3, #1
 8064082:	2b01      	cmp	r3, #1
 8064084:	f040 8086 	bne.w	8064194 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8064088:	68fb      	ldr	r3, [r7, #12]
 806408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806408c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8064090:	f023 0301 	bic.w	r3, r3, #1
 8064094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8064098:	68fb      	ldr	r3, [r7, #12]
 806409a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 806409c:	68fb      	ldr	r3, [r7, #12]
 806409e:	681b      	ldr	r3, [r3, #0]
 80640a0:	685b      	ldr	r3, [r3, #4]
 80640a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80640a6:	2b00      	cmp	r3, #0
 80640a8:	d007      	beq.n	80640ba <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80640aa:	68fb      	ldr	r3, [r7, #12]
 80640ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80640ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80640b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80640b6:	68fb      	ldr	r3, [r7, #12]
 80640b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80640ba:	68fb      	ldr	r3, [r7, #12]
 80640bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80640be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80640c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80640c6:	d106      	bne.n	80640d6 <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80640c8:	68fb      	ldr	r3, [r7, #12]
 80640ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80640cc:	f023 0206 	bic.w	r2, r3, #6
 80640d0:	68fb      	ldr	r3, [r7, #12]
 80640d2:	645a      	str	r2, [r3, #68]	; 0x44
 80640d4:	e002      	b.n	80640dc <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80640d6:	68fb      	ldr	r3, [r7, #12]
 80640d8:	2200      	movs	r2, #0
 80640da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80640dc:	68fb      	ldr	r3, [r7, #12]
 80640de:	2200      	movs	r2, #0
 80640e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80640e4:	4b37      	ldr	r3, [pc, #220]	; (80641c4 <HAL_ADC_Start_DMA+0x21c>)
 80640e6:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80640e8:	68fb      	ldr	r3, [r7, #12]
 80640ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80640ec:	4a36      	ldr	r2, [pc, #216]	; (80641c8 <HAL_ADC_Start_DMA+0x220>)
 80640ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80640f0:	68fb      	ldr	r3, [r7, #12]
 80640f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80640f4:	4a35      	ldr	r2, [pc, #212]	; (80641cc <HAL_ADC_Start_DMA+0x224>)
 80640f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80640f8:	68fb      	ldr	r3, [r7, #12]
 80640fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80640fc:	4a34      	ldr	r2, [pc, #208]	; (80641d0 <HAL_ADC_Start_DMA+0x228>)
 80640fe:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8064100:	68fb      	ldr	r3, [r7, #12]
 8064102:	681b      	ldr	r3, [r3, #0]
 8064104:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8064108:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 806410a:	68fb      	ldr	r3, [r7, #12]
 806410c:	681b      	ldr	r3, [r3, #0]
 806410e:	685a      	ldr	r2, [r3, #4]
 8064110:	68fb      	ldr	r3, [r7, #12]
 8064112:	681b      	ldr	r3, [r3, #0]
 8064114:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8064118:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 806411a:	68fb      	ldr	r3, [r7, #12]
 806411c:	681b      	ldr	r3, [r3, #0]
 806411e:	689a      	ldr	r2, [r3, #8]
 8064120:	68fb      	ldr	r3, [r7, #12]
 8064122:	681b      	ldr	r3, [r3, #0]
 8064124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8064128:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 806412a:	68fb      	ldr	r3, [r7, #12]
 806412c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 806412e:	68fb      	ldr	r3, [r7, #12]
 8064130:	681b      	ldr	r3, [r3, #0]
 8064132:	334c      	adds	r3, #76	; 0x4c
 8064134:	4619      	mov	r1, r3
 8064136:	68ba      	ldr	r2, [r7, #8]
 8064138:	687b      	ldr	r3, [r7, #4]
 806413a:	f000 fec9 	bl	8064ed0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 806413e:	697b      	ldr	r3, [r7, #20]
 8064140:	685b      	ldr	r3, [r3, #4]
 8064142:	f003 031f 	and.w	r3, r3, #31
 8064146:	2b00      	cmp	r3, #0
 8064148:	d10f      	bne.n	806416a <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 806414a:	68fb      	ldr	r3, [r7, #12]
 806414c:	681b      	ldr	r3, [r3, #0]
 806414e:	689b      	ldr	r3, [r3, #8]
 8064150:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8064154:	2b00      	cmp	r3, #0
 8064156:	d129      	bne.n	80641ac <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8064158:	68fb      	ldr	r3, [r7, #12]
 806415a:	681b      	ldr	r3, [r3, #0]
 806415c:	689a      	ldr	r2, [r3, #8]
 806415e:	68fb      	ldr	r3, [r7, #12]
 8064160:	681b      	ldr	r3, [r3, #0]
 8064162:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8064166:	609a      	str	r2, [r3, #8]
 8064168:	e020      	b.n	80641ac <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 806416a:	68fb      	ldr	r3, [r7, #12]
 806416c:	681b      	ldr	r3, [r3, #0]
 806416e:	4a19      	ldr	r2, [pc, #100]	; (80641d4 <HAL_ADC_Start_DMA+0x22c>)
 8064170:	4293      	cmp	r3, r2
 8064172:	d11b      	bne.n	80641ac <HAL_ADC_Start_DMA+0x204>
 8064174:	68fb      	ldr	r3, [r7, #12]
 8064176:	681b      	ldr	r3, [r3, #0]
 8064178:	689b      	ldr	r3, [r3, #8]
 806417a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 806417e:	2b00      	cmp	r3, #0
 8064180:	d114      	bne.n	80641ac <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8064182:	68fb      	ldr	r3, [r7, #12]
 8064184:	681b      	ldr	r3, [r3, #0]
 8064186:	689a      	ldr	r2, [r3, #8]
 8064188:	68fb      	ldr	r3, [r7, #12]
 806418a:	681b      	ldr	r3, [r3, #0]
 806418c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8064190:	609a      	str	r2, [r3, #8]
 8064192:	e00b      	b.n	80641ac <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8064194:	68fb      	ldr	r3, [r7, #12]
 8064196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064198:	f043 0210 	orr.w	r2, r3, #16
 806419c:	68fb      	ldr	r3, [r7, #12]
 806419e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80641a0:	68fb      	ldr	r3, [r7, #12]
 80641a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80641a4:	f043 0201 	orr.w	r2, r3, #1
 80641a8:	68fb      	ldr	r3, [r7, #12]
 80641aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80641ac:	2300      	movs	r3, #0
}
 80641ae:	4618      	mov	r0, r3
 80641b0:	3718      	adds	r7, #24
 80641b2:	46bd      	mov	sp, r7
 80641b4:	bd80      	pop	{r7, pc}
 80641b6:	bf00      	nop
 80641b8:	08076a54 	.word	0x08076a54
 80641bc:	20000000 	.word	0x20000000
 80641c0:	431bde83 	.word	0x431bde83
 80641c4:	40012300 	.word	0x40012300
 80641c8:	08064729 	.word	0x08064729
 80641cc:	080647e3 	.word	0x080647e3
 80641d0:	080647ff 	.word	0x080647ff
 80641d4:	40012000 	.word	0x40012000

080641d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80641d8:	b480      	push	{r7}
 80641da:	b083      	sub	sp, #12
 80641dc:	af00      	add	r7, sp, #0
 80641de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80641e0:	bf00      	nop
 80641e2:	370c      	adds	r7, #12
 80641e4:	46bd      	mov	sp, r7
 80641e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80641ea:	4770      	bx	lr

080641ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80641ec:	b480      	push	{r7}
 80641ee:	b083      	sub	sp, #12
 80641f0:	af00      	add	r7, sp, #0
 80641f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80641f4:	bf00      	nop
 80641f6:	370c      	adds	r7, #12
 80641f8:	46bd      	mov	sp, r7
 80641fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80641fe:	4770      	bx	lr

08064200 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8064200:	b480      	push	{r7}
 8064202:	b083      	sub	sp, #12
 8064204:	af00      	add	r7, sp, #0
 8064206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8064208:	bf00      	nop
 806420a:	370c      	adds	r7, #12
 806420c:	46bd      	mov	sp, r7
 806420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064212:	4770      	bx	lr

08064214 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8064214:	b480      	push	{r7}
 8064216:	b083      	sub	sp, #12
 8064218:	af00      	add	r7, sp, #0
 806421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 806421c:	bf00      	nop
 806421e:	370c      	adds	r7, #12
 8064220:	46bd      	mov	sp, r7
 8064222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064226:	4770      	bx	lr

08064228 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8064228:	b580      	push	{r7, lr}
 806422a:	b084      	sub	sp, #16
 806422c:	af00      	add	r7, sp, #0
 806422e:	6078      	str	r0, [r7, #4]
 8064230:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8064232:	2300      	movs	r3, #0
 8064234:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8064236:	683b      	ldr	r3, [r7, #0]
 8064238:	681b      	ldr	r3, [r3, #0]
 806423a:	2b12      	cmp	r3, #18
 806423c:	d909      	bls.n	8064252 <HAL_ADC_ConfigChannel+0x2a>
 806423e:	683b      	ldr	r3, [r7, #0]
 8064240:	681b      	ldr	r3, [r3, #0]
 8064242:	4a72      	ldr	r2, [pc, #456]	; (806440c <HAL_ADC_ConfigChannel+0x1e4>)
 8064244:	4293      	cmp	r3, r2
 8064246:	d004      	beq.n	8064252 <HAL_ADC_ConfigChannel+0x2a>
 8064248:	f240 6189 	movw	r1, #1673	; 0x689
 806424c:	4870      	ldr	r0, [pc, #448]	; (8064410 <HAL_ADC_ConfigChannel+0x1e8>)
 806424e:	f7fe ff34 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8064252:	683b      	ldr	r3, [r7, #0]
 8064254:	685b      	ldr	r3, [r3, #4]
 8064256:	2b00      	cmp	r3, #0
 8064258:	d003      	beq.n	8064262 <HAL_ADC_ConfigChannel+0x3a>
 806425a:	683b      	ldr	r3, [r7, #0]
 806425c:	685b      	ldr	r3, [r3, #4]
 806425e:	2b10      	cmp	r3, #16
 8064260:	d904      	bls.n	806426c <HAL_ADC_ConfigChannel+0x44>
 8064262:	f240 618a 	movw	r1, #1674	; 0x68a
 8064266:	486a      	ldr	r0, [pc, #424]	; (8064410 <HAL_ADC_ConfigChannel+0x1e8>)
 8064268:	f7fe ff27 	bl	80630ba <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 806426c:	683b      	ldr	r3, [r7, #0]
 806426e:	689b      	ldr	r3, [r3, #8]
 8064270:	2b00      	cmp	r3, #0
 8064272:	d020      	beq.n	80642b6 <HAL_ADC_ConfigChannel+0x8e>
 8064274:	683b      	ldr	r3, [r7, #0]
 8064276:	689b      	ldr	r3, [r3, #8]
 8064278:	2b01      	cmp	r3, #1
 806427a:	d01c      	beq.n	80642b6 <HAL_ADC_ConfigChannel+0x8e>
 806427c:	683b      	ldr	r3, [r7, #0]
 806427e:	689b      	ldr	r3, [r3, #8]
 8064280:	2b02      	cmp	r3, #2
 8064282:	d018      	beq.n	80642b6 <HAL_ADC_ConfigChannel+0x8e>
 8064284:	683b      	ldr	r3, [r7, #0]
 8064286:	689b      	ldr	r3, [r3, #8]
 8064288:	2b03      	cmp	r3, #3
 806428a:	d014      	beq.n	80642b6 <HAL_ADC_ConfigChannel+0x8e>
 806428c:	683b      	ldr	r3, [r7, #0]
 806428e:	689b      	ldr	r3, [r3, #8]
 8064290:	2b04      	cmp	r3, #4
 8064292:	d010      	beq.n	80642b6 <HAL_ADC_ConfigChannel+0x8e>
 8064294:	683b      	ldr	r3, [r7, #0]
 8064296:	689b      	ldr	r3, [r3, #8]
 8064298:	2b05      	cmp	r3, #5
 806429a:	d00c      	beq.n	80642b6 <HAL_ADC_ConfigChannel+0x8e>
 806429c:	683b      	ldr	r3, [r7, #0]
 806429e:	689b      	ldr	r3, [r3, #8]
 80642a0:	2b06      	cmp	r3, #6
 80642a2:	d008      	beq.n	80642b6 <HAL_ADC_ConfigChannel+0x8e>
 80642a4:	683b      	ldr	r3, [r7, #0]
 80642a6:	689b      	ldr	r3, [r3, #8]
 80642a8:	2b07      	cmp	r3, #7
 80642aa:	d004      	beq.n	80642b6 <HAL_ADC_ConfigChannel+0x8e>
 80642ac:	f240 618b 	movw	r1, #1675	; 0x68b
 80642b0:	4857      	ldr	r0, [pc, #348]	; (8064410 <HAL_ADC_ConfigChannel+0x1e8>)
 80642b2:	f7fe ff02 	bl	80630ba <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80642b6:	687b      	ldr	r3, [r7, #4]
 80642b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80642bc:	2b01      	cmp	r3, #1
 80642be:	d101      	bne.n	80642c4 <HAL_ADC_ConfigChannel+0x9c>
 80642c0:	2302      	movs	r3, #2
 80642c2:	e118      	b.n	80644f6 <HAL_ADC_ConfigChannel+0x2ce>
 80642c4:	687b      	ldr	r3, [r7, #4]
 80642c6:	2201      	movs	r2, #1
 80642c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80642cc:	683b      	ldr	r3, [r7, #0]
 80642ce:	681b      	ldr	r3, [r3, #0]
 80642d0:	2b09      	cmp	r3, #9
 80642d2:	d925      	bls.n	8064320 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80642d4:	687b      	ldr	r3, [r7, #4]
 80642d6:	681b      	ldr	r3, [r3, #0]
 80642d8:	68d9      	ldr	r1, [r3, #12]
 80642da:	683b      	ldr	r3, [r7, #0]
 80642dc:	681b      	ldr	r3, [r3, #0]
 80642de:	b29b      	uxth	r3, r3
 80642e0:	461a      	mov	r2, r3
 80642e2:	4613      	mov	r3, r2
 80642e4:	005b      	lsls	r3, r3, #1
 80642e6:	4413      	add	r3, r2
 80642e8:	3b1e      	subs	r3, #30
 80642ea:	2207      	movs	r2, #7
 80642ec:	fa02 f303 	lsl.w	r3, r2, r3
 80642f0:	43da      	mvns	r2, r3
 80642f2:	687b      	ldr	r3, [r7, #4]
 80642f4:	681b      	ldr	r3, [r3, #0]
 80642f6:	400a      	ands	r2, r1
 80642f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80642fa:	687b      	ldr	r3, [r7, #4]
 80642fc:	681b      	ldr	r3, [r3, #0]
 80642fe:	68d9      	ldr	r1, [r3, #12]
 8064300:	683b      	ldr	r3, [r7, #0]
 8064302:	689a      	ldr	r2, [r3, #8]
 8064304:	683b      	ldr	r3, [r7, #0]
 8064306:	681b      	ldr	r3, [r3, #0]
 8064308:	b29b      	uxth	r3, r3
 806430a:	4618      	mov	r0, r3
 806430c:	4603      	mov	r3, r0
 806430e:	005b      	lsls	r3, r3, #1
 8064310:	4403      	add	r3, r0
 8064312:	3b1e      	subs	r3, #30
 8064314:	409a      	lsls	r2, r3
 8064316:	687b      	ldr	r3, [r7, #4]
 8064318:	681b      	ldr	r3, [r3, #0]
 806431a:	430a      	orrs	r2, r1
 806431c:	60da      	str	r2, [r3, #12]
 806431e:	e022      	b.n	8064366 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8064320:	687b      	ldr	r3, [r7, #4]
 8064322:	681b      	ldr	r3, [r3, #0]
 8064324:	6919      	ldr	r1, [r3, #16]
 8064326:	683b      	ldr	r3, [r7, #0]
 8064328:	681b      	ldr	r3, [r3, #0]
 806432a:	b29b      	uxth	r3, r3
 806432c:	461a      	mov	r2, r3
 806432e:	4613      	mov	r3, r2
 8064330:	005b      	lsls	r3, r3, #1
 8064332:	4413      	add	r3, r2
 8064334:	2207      	movs	r2, #7
 8064336:	fa02 f303 	lsl.w	r3, r2, r3
 806433a:	43da      	mvns	r2, r3
 806433c:	687b      	ldr	r3, [r7, #4]
 806433e:	681b      	ldr	r3, [r3, #0]
 8064340:	400a      	ands	r2, r1
 8064342:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8064344:	687b      	ldr	r3, [r7, #4]
 8064346:	681b      	ldr	r3, [r3, #0]
 8064348:	6919      	ldr	r1, [r3, #16]
 806434a:	683b      	ldr	r3, [r7, #0]
 806434c:	689a      	ldr	r2, [r3, #8]
 806434e:	683b      	ldr	r3, [r7, #0]
 8064350:	681b      	ldr	r3, [r3, #0]
 8064352:	b29b      	uxth	r3, r3
 8064354:	4618      	mov	r0, r3
 8064356:	4603      	mov	r3, r0
 8064358:	005b      	lsls	r3, r3, #1
 806435a:	4403      	add	r3, r0
 806435c:	409a      	lsls	r2, r3
 806435e:	687b      	ldr	r3, [r7, #4]
 8064360:	681b      	ldr	r3, [r3, #0]
 8064362:	430a      	orrs	r2, r1
 8064364:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8064366:	683b      	ldr	r3, [r7, #0]
 8064368:	685b      	ldr	r3, [r3, #4]
 806436a:	2b06      	cmp	r3, #6
 806436c:	d824      	bhi.n	80643b8 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 806436e:	687b      	ldr	r3, [r7, #4]
 8064370:	681b      	ldr	r3, [r3, #0]
 8064372:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8064374:	683b      	ldr	r3, [r7, #0]
 8064376:	685a      	ldr	r2, [r3, #4]
 8064378:	4613      	mov	r3, r2
 806437a:	009b      	lsls	r3, r3, #2
 806437c:	4413      	add	r3, r2
 806437e:	3b05      	subs	r3, #5
 8064380:	221f      	movs	r2, #31
 8064382:	fa02 f303 	lsl.w	r3, r2, r3
 8064386:	43da      	mvns	r2, r3
 8064388:	687b      	ldr	r3, [r7, #4]
 806438a:	681b      	ldr	r3, [r3, #0]
 806438c:	400a      	ands	r2, r1
 806438e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8064390:	687b      	ldr	r3, [r7, #4]
 8064392:	681b      	ldr	r3, [r3, #0]
 8064394:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8064396:	683b      	ldr	r3, [r7, #0]
 8064398:	681b      	ldr	r3, [r3, #0]
 806439a:	b29b      	uxth	r3, r3
 806439c:	4618      	mov	r0, r3
 806439e:	683b      	ldr	r3, [r7, #0]
 80643a0:	685a      	ldr	r2, [r3, #4]
 80643a2:	4613      	mov	r3, r2
 80643a4:	009b      	lsls	r3, r3, #2
 80643a6:	4413      	add	r3, r2
 80643a8:	3b05      	subs	r3, #5
 80643aa:	fa00 f203 	lsl.w	r2, r0, r3
 80643ae:	687b      	ldr	r3, [r7, #4]
 80643b0:	681b      	ldr	r3, [r3, #0]
 80643b2:	430a      	orrs	r2, r1
 80643b4:	635a      	str	r2, [r3, #52]	; 0x34
 80643b6:	e051      	b.n	806445c <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80643b8:	683b      	ldr	r3, [r7, #0]
 80643ba:	685b      	ldr	r3, [r3, #4]
 80643bc:	2b0c      	cmp	r3, #12
 80643be:	d829      	bhi.n	8064414 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80643c0:	687b      	ldr	r3, [r7, #4]
 80643c2:	681b      	ldr	r3, [r3, #0]
 80643c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80643c6:	683b      	ldr	r3, [r7, #0]
 80643c8:	685a      	ldr	r2, [r3, #4]
 80643ca:	4613      	mov	r3, r2
 80643cc:	009b      	lsls	r3, r3, #2
 80643ce:	4413      	add	r3, r2
 80643d0:	3b23      	subs	r3, #35	; 0x23
 80643d2:	221f      	movs	r2, #31
 80643d4:	fa02 f303 	lsl.w	r3, r2, r3
 80643d8:	43da      	mvns	r2, r3
 80643da:	687b      	ldr	r3, [r7, #4]
 80643dc:	681b      	ldr	r3, [r3, #0]
 80643de:	400a      	ands	r2, r1
 80643e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80643e2:	687b      	ldr	r3, [r7, #4]
 80643e4:	681b      	ldr	r3, [r3, #0]
 80643e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80643e8:	683b      	ldr	r3, [r7, #0]
 80643ea:	681b      	ldr	r3, [r3, #0]
 80643ec:	b29b      	uxth	r3, r3
 80643ee:	4618      	mov	r0, r3
 80643f0:	683b      	ldr	r3, [r7, #0]
 80643f2:	685a      	ldr	r2, [r3, #4]
 80643f4:	4613      	mov	r3, r2
 80643f6:	009b      	lsls	r3, r3, #2
 80643f8:	4413      	add	r3, r2
 80643fa:	3b23      	subs	r3, #35	; 0x23
 80643fc:	fa00 f203 	lsl.w	r2, r0, r3
 8064400:	687b      	ldr	r3, [r7, #4]
 8064402:	681b      	ldr	r3, [r3, #0]
 8064404:	430a      	orrs	r2, r1
 8064406:	631a      	str	r2, [r3, #48]	; 0x30
 8064408:	e028      	b.n	806445c <HAL_ADC_ConfigChannel+0x234>
 806440a:	bf00      	nop
 806440c:	10000012 	.word	0x10000012
 8064410:	08076a54 	.word	0x08076a54
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8064414:	687b      	ldr	r3, [r7, #4]
 8064416:	681b      	ldr	r3, [r3, #0]
 8064418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 806441a:	683b      	ldr	r3, [r7, #0]
 806441c:	685a      	ldr	r2, [r3, #4]
 806441e:	4613      	mov	r3, r2
 8064420:	009b      	lsls	r3, r3, #2
 8064422:	4413      	add	r3, r2
 8064424:	3b41      	subs	r3, #65	; 0x41
 8064426:	221f      	movs	r2, #31
 8064428:	fa02 f303 	lsl.w	r3, r2, r3
 806442c:	43da      	mvns	r2, r3
 806442e:	687b      	ldr	r3, [r7, #4]
 8064430:	681b      	ldr	r3, [r3, #0]
 8064432:	400a      	ands	r2, r1
 8064434:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8064436:	687b      	ldr	r3, [r7, #4]
 8064438:	681b      	ldr	r3, [r3, #0]
 806443a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 806443c:	683b      	ldr	r3, [r7, #0]
 806443e:	681b      	ldr	r3, [r3, #0]
 8064440:	b29b      	uxth	r3, r3
 8064442:	4618      	mov	r0, r3
 8064444:	683b      	ldr	r3, [r7, #0]
 8064446:	685a      	ldr	r2, [r3, #4]
 8064448:	4613      	mov	r3, r2
 806444a:	009b      	lsls	r3, r3, #2
 806444c:	4413      	add	r3, r2
 806444e:	3b41      	subs	r3, #65	; 0x41
 8064450:	fa00 f203 	lsl.w	r2, r0, r3
 8064454:	687b      	ldr	r3, [r7, #4]
 8064456:	681b      	ldr	r3, [r3, #0]
 8064458:	430a      	orrs	r2, r1
 806445a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 806445c:	4b28      	ldr	r3, [pc, #160]	; (8064500 <HAL_ADC_ConfigChannel+0x2d8>)
 806445e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8064460:	687b      	ldr	r3, [r7, #4]
 8064462:	681b      	ldr	r3, [r3, #0]
 8064464:	4a27      	ldr	r2, [pc, #156]	; (8064504 <HAL_ADC_ConfigChannel+0x2dc>)
 8064466:	4293      	cmp	r3, r2
 8064468:	d10f      	bne.n	806448a <HAL_ADC_ConfigChannel+0x262>
 806446a:	683b      	ldr	r3, [r7, #0]
 806446c:	681b      	ldr	r3, [r3, #0]
 806446e:	2b12      	cmp	r3, #18
 8064470:	d10b      	bne.n	806448a <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8064472:	68fb      	ldr	r3, [r7, #12]
 8064474:	685b      	ldr	r3, [r3, #4]
 8064476:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 806447a:	68fb      	ldr	r3, [r7, #12]
 806447c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 806447e:	68fb      	ldr	r3, [r7, #12]
 8064480:	685b      	ldr	r3, [r3, #4]
 8064482:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8064486:	68fb      	ldr	r3, [r7, #12]
 8064488:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 806448a:	687b      	ldr	r3, [r7, #4]
 806448c:	681b      	ldr	r3, [r3, #0]
 806448e:	4a1d      	ldr	r2, [pc, #116]	; (8064504 <HAL_ADC_ConfigChannel+0x2dc>)
 8064490:	4293      	cmp	r3, r2
 8064492:	d12b      	bne.n	80644ec <HAL_ADC_ConfigChannel+0x2c4>
 8064494:	683b      	ldr	r3, [r7, #0]
 8064496:	681b      	ldr	r3, [r3, #0]
 8064498:	4a1b      	ldr	r2, [pc, #108]	; (8064508 <HAL_ADC_ConfigChannel+0x2e0>)
 806449a:	4293      	cmp	r3, r2
 806449c:	d003      	beq.n	80644a6 <HAL_ADC_ConfigChannel+0x27e>
 806449e:	683b      	ldr	r3, [r7, #0]
 80644a0:	681b      	ldr	r3, [r3, #0]
 80644a2:	2b11      	cmp	r3, #17
 80644a4:	d122      	bne.n	80644ec <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80644a6:	68fb      	ldr	r3, [r7, #12]
 80644a8:	685b      	ldr	r3, [r3, #4]
 80644aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80644ae:	68fb      	ldr	r3, [r7, #12]
 80644b0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80644b2:	68fb      	ldr	r3, [r7, #12]
 80644b4:	685b      	ldr	r3, [r3, #4]
 80644b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80644ba:	68fb      	ldr	r3, [r7, #12]
 80644bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80644be:	683b      	ldr	r3, [r7, #0]
 80644c0:	681b      	ldr	r3, [r3, #0]
 80644c2:	4a11      	ldr	r2, [pc, #68]	; (8064508 <HAL_ADC_ConfigChannel+0x2e0>)
 80644c4:	4293      	cmp	r3, r2
 80644c6:	d111      	bne.n	80644ec <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80644c8:	4b10      	ldr	r3, [pc, #64]	; (806450c <HAL_ADC_ConfigChannel+0x2e4>)
 80644ca:	681b      	ldr	r3, [r3, #0]
 80644cc:	4a10      	ldr	r2, [pc, #64]	; (8064510 <HAL_ADC_ConfigChannel+0x2e8>)
 80644ce:	fba2 2303 	umull	r2, r3, r2, r3
 80644d2:	0c9a      	lsrs	r2, r3, #18
 80644d4:	4613      	mov	r3, r2
 80644d6:	009b      	lsls	r3, r3, #2
 80644d8:	4413      	add	r3, r2
 80644da:	005b      	lsls	r3, r3, #1
 80644dc:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80644de:	e002      	b.n	80644e6 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80644e0:	68bb      	ldr	r3, [r7, #8]
 80644e2:	3b01      	subs	r3, #1
 80644e4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80644e6:	68bb      	ldr	r3, [r7, #8]
 80644e8:	2b00      	cmp	r3, #0
 80644ea:	d1f9      	bne.n	80644e0 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80644ec:	687b      	ldr	r3, [r7, #4]
 80644ee:	2200      	movs	r2, #0
 80644f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80644f4:	2300      	movs	r3, #0
}
 80644f6:	4618      	mov	r0, r3
 80644f8:	3710      	adds	r7, #16
 80644fa:	46bd      	mov	sp, r7
 80644fc:	bd80      	pop	{r7, pc}
 80644fe:	bf00      	nop
 8064500:	40012300 	.word	0x40012300
 8064504:	40012000 	.word	0x40012000
 8064508:	10000012 	.word	0x10000012
 806450c:	20000000 	.word	0x20000000
 8064510:	431bde83 	.word	0x431bde83

08064514 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8064514:	b580      	push	{r7, lr}
 8064516:	b084      	sub	sp, #16
 8064518:	af00      	add	r7, sp, #0
 806451a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 806451c:	4b7f      	ldr	r3, [pc, #508]	; (806471c <ADC_Init+0x208>)
 806451e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8064520:	68fb      	ldr	r3, [r7, #12]
 8064522:	685b      	ldr	r3, [r3, #4]
 8064524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8064528:	68fb      	ldr	r3, [r7, #12]
 806452a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 806452c:	68fb      	ldr	r3, [r7, #12]
 806452e:	685a      	ldr	r2, [r3, #4]
 8064530:	687b      	ldr	r3, [r7, #4]
 8064532:	685b      	ldr	r3, [r3, #4]
 8064534:	431a      	orrs	r2, r3
 8064536:	68fb      	ldr	r3, [r7, #12]
 8064538:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 806453a:	687b      	ldr	r3, [r7, #4]
 806453c:	681b      	ldr	r3, [r3, #0]
 806453e:	685a      	ldr	r2, [r3, #4]
 8064540:	687b      	ldr	r3, [r7, #4]
 8064542:	681b      	ldr	r3, [r3, #0]
 8064544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8064548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 806454a:	687b      	ldr	r3, [r7, #4]
 806454c:	681b      	ldr	r3, [r3, #0]
 806454e:	6859      	ldr	r1, [r3, #4]
 8064550:	687b      	ldr	r3, [r7, #4]
 8064552:	691b      	ldr	r3, [r3, #16]
 8064554:	021a      	lsls	r2, r3, #8
 8064556:	687b      	ldr	r3, [r7, #4]
 8064558:	681b      	ldr	r3, [r3, #0]
 806455a:	430a      	orrs	r2, r1
 806455c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 806455e:	687b      	ldr	r3, [r7, #4]
 8064560:	681b      	ldr	r3, [r3, #0]
 8064562:	685a      	ldr	r2, [r3, #4]
 8064564:	687b      	ldr	r3, [r7, #4]
 8064566:	681b      	ldr	r3, [r3, #0]
 8064568:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 806456c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 806456e:	687b      	ldr	r3, [r7, #4]
 8064570:	681b      	ldr	r3, [r3, #0]
 8064572:	6859      	ldr	r1, [r3, #4]
 8064574:	687b      	ldr	r3, [r7, #4]
 8064576:	689a      	ldr	r2, [r3, #8]
 8064578:	687b      	ldr	r3, [r7, #4]
 806457a:	681b      	ldr	r3, [r3, #0]
 806457c:	430a      	orrs	r2, r1
 806457e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8064580:	687b      	ldr	r3, [r7, #4]
 8064582:	681b      	ldr	r3, [r3, #0]
 8064584:	689a      	ldr	r2, [r3, #8]
 8064586:	687b      	ldr	r3, [r7, #4]
 8064588:	681b      	ldr	r3, [r3, #0]
 806458a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 806458e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8064590:	687b      	ldr	r3, [r7, #4]
 8064592:	681b      	ldr	r3, [r3, #0]
 8064594:	6899      	ldr	r1, [r3, #8]
 8064596:	687b      	ldr	r3, [r7, #4]
 8064598:	68da      	ldr	r2, [r3, #12]
 806459a:	687b      	ldr	r3, [r7, #4]
 806459c:	681b      	ldr	r3, [r3, #0]
 806459e:	430a      	orrs	r2, r1
 80645a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80645a2:	687b      	ldr	r3, [r7, #4]
 80645a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80645a6:	4a5e      	ldr	r2, [pc, #376]	; (8064720 <ADC_Init+0x20c>)
 80645a8:	4293      	cmp	r3, r2
 80645aa:	d022      	beq.n	80645f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80645ac:	687b      	ldr	r3, [r7, #4]
 80645ae:	681b      	ldr	r3, [r3, #0]
 80645b0:	689a      	ldr	r2, [r3, #8]
 80645b2:	687b      	ldr	r3, [r7, #4]
 80645b4:	681b      	ldr	r3, [r3, #0]
 80645b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80645ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80645bc:	687b      	ldr	r3, [r7, #4]
 80645be:	681b      	ldr	r3, [r3, #0]
 80645c0:	6899      	ldr	r1, [r3, #8]
 80645c2:	687b      	ldr	r3, [r7, #4]
 80645c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80645c6:	687b      	ldr	r3, [r7, #4]
 80645c8:	681b      	ldr	r3, [r3, #0]
 80645ca:	430a      	orrs	r2, r1
 80645cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80645ce:	687b      	ldr	r3, [r7, #4]
 80645d0:	681b      	ldr	r3, [r3, #0]
 80645d2:	689a      	ldr	r2, [r3, #8]
 80645d4:	687b      	ldr	r3, [r7, #4]
 80645d6:	681b      	ldr	r3, [r3, #0]
 80645d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80645dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80645de:	687b      	ldr	r3, [r7, #4]
 80645e0:	681b      	ldr	r3, [r3, #0]
 80645e2:	6899      	ldr	r1, [r3, #8]
 80645e4:	687b      	ldr	r3, [r7, #4]
 80645e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80645e8:	687b      	ldr	r3, [r7, #4]
 80645ea:	681b      	ldr	r3, [r3, #0]
 80645ec:	430a      	orrs	r2, r1
 80645ee:	609a      	str	r2, [r3, #8]
 80645f0:	e00f      	b.n	8064612 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80645f2:	687b      	ldr	r3, [r7, #4]
 80645f4:	681b      	ldr	r3, [r3, #0]
 80645f6:	689a      	ldr	r2, [r3, #8]
 80645f8:	687b      	ldr	r3, [r7, #4]
 80645fa:	681b      	ldr	r3, [r3, #0]
 80645fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8064600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8064602:	687b      	ldr	r3, [r7, #4]
 8064604:	681b      	ldr	r3, [r3, #0]
 8064606:	689a      	ldr	r2, [r3, #8]
 8064608:	687b      	ldr	r3, [r7, #4]
 806460a:	681b      	ldr	r3, [r3, #0]
 806460c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8064610:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8064612:	687b      	ldr	r3, [r7, #4]
 8064614:	681b      	ldr	r3, [r3, #0]
 8064616:	689a      	ldr	r2, [r3, #8]
 8064618:	687b      	ldr	r3, [r7, #4]
 806461a:	681b      	ldr	r3, [r3, #0]
 806461c:	f022 0202 	bic.w	r2, r2, #2
 8064620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8064622:	687b      	ldr	r3, [r7, #4]
 8064624:	681b      	ldr	r3, [r3, #0]
 8064626:	6899      	ldr	r1, [r3, #8]
 8064628:	687b      	ldr	r3, [r7, #4]
 806462a:	7e1b      	ldrb	r3, [r3, #24]
 806462c:	005a      	lsls	r2, r3, #1
 806462e:	687b      	ldr	r3, [r7, #4]
 8064630:	681b      	ldr	r3, [r3, #0]
 8064632:	430a      	orrs	r2, r1
 8064634:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8064636:	687b      	ldr	r3, [r7, #4]
 8064638:	f893 3020 	ldrb.w	r3, [r3, #32]
 806463c:	2b00      	cmp	r3, #0
 806463e:	d028      	beq.n	8064692 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8064640:	687b      	ldr	r3, [r7, #4]
 8064642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064644:	2b00      	cmp	r3, #0
 8064646:	d003      	beq.n	8064650 <ADC_Init+0x13c>
 8064648:	687b      	ldr	r3, [r7, #4]
 806464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806464c:	2b08      	cmp	r3, #8
 806464e:	d904      	bls.n	806465a <ADC_Init+0x146>
 8064650:	f240 71a6 	movw	r1, #1958	; 0x7a6
 8064654:	4833      	ldr	r0, [pc, #204]	; (8064724 <ADC_Init+0x210>)
 8064656:	f7fe fd30 	bl	80630ba <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 806465a:	687b      	ldr	r3, [r7, #4]
 806465c:	681b      	ldr	r3, [r3, #0]
 806465e:	685a      	ldr	r2, [r3, #4]
 8064660:	687b      	ldr	r3, [r7, #4]
 8064662:	681b      	ldr	r3, [r3, #0]
 8064664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8064668:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 806466a:	687b      	ldr	r3, [r7, #4]
 806466c:	681b      	ldr	r3, [r3, #0]
 806466e:	685a      	ldr	r2, [r3, #4]
 8064670:	687b      	ldr	r3, [r7, #4]
 8064672:	681b      	ldr	r3, [r3, #0]
 8064674:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8064678:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 806467a:	687b      	ldr	r3, [r7, #4]
 806467c:	681b      	ldr	r3, [r3, #0]
 806467e:	6859      	ldr	r1, [r3, #4]
 8064680:	687b      	ldr	r3, [r7, #4]
 8064682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064684:	3b01      	subs	r3, #1
 8064686:	035a      	lsls	r2, r3, #13
 8064688:	687b      	ldr	r3, [r7, #4]
 806468a:	681b      	ldr	r3, [r3, #0]
 806468c:	430a      	orrs	r2, r1
 806468e:	605a      	str	r2, [r3, #4]
 8064690:	e007      	b.n	80646a2 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8064692:	687b      	ldr	r3, [r7, #4]
 8064694:	681b      	ldr	r3, [r3, #0]
 8064696:	685a      	ldr	r2, [r3, #4]
 8064698:	687b      	ldr	r3, [r7, #4]
 806469a:	681b      	ldr	r3, [r3, #0]
 806469c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80646a0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80646a2:	687b      	ldr	r3, [r7, #4]
 80646a4:	681b      	ldr	r3, [r3, #0]
 80646a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80646a8:	687b      	ldr	r3, [r7, #4]
 80646aa:	681b      	ldr	r3, [r3, #0]
 80646ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80646b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80646b2:	687b      	ldr	r3, [r7, #4]
 80646b4:	681b      	ldr	r3, [r3, #0]
 80646b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80646b8:	687b      	ldr	r3, [r7, #4]
 80646ba:	69db      	ldr	r3, [r3, #28]
 80646bc:	3b01      	subs	r3, #1
 80646be:	051a      	lsls	r2, r3, #20
 80646c0:	687b      	ldr	r3, [r7, #4]
 80646c2:	681b      	ldr	r3, [r3, #0]
 80646c4:	430a      	orrs	r2, r1
 80646c6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80646c8:	687b      	ldr	r3, [r7, #4]
 80646ca:	681b      	ldr	r3, [r3, #0]
 80646cc:	689a      	ldr	r2, [r3, #8]
 80646ce:	687b      	ldr	r3, [r7, #4]
 80646d0:	681b      	ldr	r3, [r3, #0]
 80646d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80646d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80646d8:	687b      	ldr	r3, [r7, #4]
 80646da:	681b      	ldr	r3, [r3, #0]
 80646dc:	6899      	ldr	r1, [r3, #8]
 80646de:	687b      	ldr	r3, [r7, #4]
 80646e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80646e4:	025a      	lsls	r2, r3, #9
 80646e6:	687b      	ldr	r3, [r7, #4]
 80646e8:	681b      	ldr	r3, [r3, #0]
 80646ea:	430a      	orrs	r2, r1
 80646ec:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80646ee:	687b      	ldr	r3, [r7, #4]
 80646f0:	681b      	ldr	r3, [r3, #0]
 80646f2:	689a      	ldr	r2, [r3, #8]
 80646f4:	687b      	ldr	r3, [r7, #4]
 80646f6:	681b      	ldr	r3, [r3, #0]
 80646f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80646fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80646fe:	687b      	ldr	r3, [r7, #4]
 8064700:	681b      	ldr	r3, [r3, #0]
 8064702:	6899      	ldr	r1, [r3, #8]
 8064704:	687b      	ldr	r3, [r7, #4]
 8064706:	695b      	ldr	r3, [r3, #20]
 8064708:	029a      	lsls	r2, r3, #10
 806470a:	687b      	ldr	r3, [r7, #4]
 806470c:	681b      	ldr	r3, [r3, #0]
 806470e:	430a      	orrs	r2, r1
 8064710:	609a      	str	r2, [r3, #8]
}
 8064712:	bf00      	nop
 8064714:	3710      	adds	r7, #16
 8064716:	46bd      	mov	sp, r7
 8064718:	bd80      	pop	{r7, pc}
 806471a:	bf00      	nop
 806471c:	40012300 	.word	0x40012300
 8064720:	0f000001 	.word	0x0f000001
 8064724:	08076a54 	.word	0x08076a54

08064728 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8064728:	b580      	push	{r7, lr}
 806472a:	b084      	sub	sp, #16
 806472c:	af00      	add	r7, sp, #0
 806472e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8064730:	687b      	ldr	r3, [r7, #4]
 8064732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8064734:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8064736:	68fb      	ldr	r3, [r7, #12]
 8064738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806473a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 806473e:	2b00      	cmp	r3, #0
 8064740:	d13c      	bne.n	80647bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8064742:	68fb      	ldr	r3, [r7, #12]
 8064744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064746:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 806474a:	68fb      	ldr	r3, [r7, #12]
 806474c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 806474e:	68fb      	ldr	r3, [r7, #12]
 8064750:	681b      	ldr	r3, [r3, #0]
 8064752:	689b      	ldr	r3, [r3, #8]
 8064754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8064758:	2b00      	cmp	r3, #0
 806475a:	d12b      	bne.n	80647b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 806475c:	68fb      	ldr	r3, [r7, #12]
 806475e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8064760:	2b00      	cmp	r3, #0
 8064762:	d127      	bne.n	80647b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8064764:	68fb      	ldr	r3, [r7, #12]
 8064766:	681b      	ldr	r3, [r3, #0]
 8064768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806476a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 806476e:	2b00      	cmp	r3, #0
 8064770:	d006      	beq.n	8064780 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8064772:	68fb      	ldr	r3, [r7, #12]
 8064774:	681b      	ldr	r3, [r3, #0]
 8064776:	689b      	ldr	r3, [r3, #8]
 8064778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 806477c:	2b00      	cmp	r3, #0
 806477e:	d119      	bne.n	80647b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8064780:	68fb      	ldr	r3, [r7, #12]
 8064782:	681b      	ldr	r3, [r3, #0]
 8064784:	685a      	ldr	r2, [r3, #4]
 8064786:	68fb      	ldr	r3, [r7, #12]
 8064788:	681b      	ldr	r3, [r3, #0]
 806478a:	f022 0220 	bic.w	r2, r2, #32
 806478e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8064790:	68fb      	ldr	r3, [r7, #12]
 8064792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064794:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8064798:	68fb      	ldr	r3, [r7, #12]
 806479a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 806479c:	68fb      	ldr	r3, [r7, #12]
 806479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80647a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80647a4:	2b00      	cmp	r3, #0
 80647a6:	d105      	bne.n	80647b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80647a8:	68fb      	ldr	r3, [r7, #12]
 80647aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80647ac:	f043 0201 	orr.w	r2, r3, #1
 80647b0:	68fb      	ldr	r3, [r7, #12]
 80647b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80647b4:	68f8      	ldr	r0, [r7, #12]
 80647b6:	f7ff fd0f 	bl	80641d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80647ba:	e00e      	b.n	80647da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80647bc:	68fb      	ldr	r3, [r7, #12]
 80647be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80647c0:	f003 0310 	and.w	r3, r3, #16
 80647c4:	2b00      	cmp	r3, #0
 80647c6:	d003      	beq.n	80647d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80647c8:	68f8      	ldr	r0, [r7, #12]
 80647ca:	f7ff fd23 	bl	8064214 <HAL_ADC_ErrorCallback>
}
 80647ce:	e004      	b.n	80647da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80647d0:	68fb      	ldr	r3, [r7, #12]
 80647d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80647d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80647d6:	6878      	ldr	r0, [r7, #4]
 80647d8:	4798      	blx	r3
}
 80647da:	bf00      	nop
 80647dc:	3710      	adds	r7, #16
 80647de:	46bd      	mov	sp, r7
 80647e0:	bd80      	pop	{r7, pc}

080647e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80647e2:	b580      	push	{r7, lr}
 80647e4:	b084      	sub	sp, #16
 80647e6:	af00      	add	r7, sp, #0
 80647e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80647ea:	687b      	ldr	r3, [r7, #4]
 80647ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80647ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80647f0:	68f8      	ldr	r0, [r7, #12]
 80647f2:	f7ff fcfb 	bl	80641ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80647f6:	bf00      	nop
 80647f8:	3710      	adds	r7, #16
 80647fa:	46bd      	mov	sp, r7
 80647fc:	bd80      	pop	{r7, pc}

080647fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80647fe:	b580      	push	{r7, lr}
 8064800:	b084      	sub	sp, #16
 8064802:	af00      	add	r7, sp, #0
 8064804:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8064806:	687b      	ldr	r3, [r7, #4]
 8064808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806480a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 806480c:	68fb      	ldr	r3, [r7, #12]
 806480e:	2240      	movs	r2, #64	; 0x40
 8064810:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8064812:	68fb      	ldr	r3, [r7, #12]
 8064814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8064816:	f043 0204 	orr.w	r2, r3, #4
 806481a:	68fb      	ldr	r3, [r7, #12]
 806481c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 806481e:	68f8      	ldr	r0, [r7, #12]
 8064820:	f7ff fcf8 	bl	8064214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8064824:	bf00      	nop
 8064826:	3710      	adds	r7, #16
 8064828:	46bd      	mov	sp, r7
 806482a:	bd80      	pop	{r7, pc}

0806482c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 806482c:	b480      	push	{r7}
 806482e:	b083      	sub	sp, #12
 8064830:	af00      	add	r7, sp, #0
 8064832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8064834:	bf00      	nop
 8064836:	370c      	adds	r7, #12
 8064838:	46bd      	mov	sp, r7
 806483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806483e:	4770      	bx	lr

08064840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8064840:	b480      	push	{r7}
 8064842:	b085      	sub	sp, #20
 8064844:	af00      	add	r7, sp, #0
 8064846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8064848:	687b      	ldr	r3, [r7, #4]
 806484a:	f003 0307 	and.w	r3, r3, #7
 806484e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8064850:	4b0c      	ldr	r3, [pc, #48]	; (8064884 <__NVIC_SetPriorityGrouping+0x44>)
 8064852:	68db      	ldr	r3, [r3, #12]
 8064854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8064856:	68ba      	ldr	r2, [r7, #8]
 8064858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 806485c:	4013      	ands	r3, r2
 806485e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8064860:	68fb      	ldr	r3, [r7, #12]
 8064862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8064864:	68bb      	ldr	r3, [r7, #8]
 8064866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8064868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 806486c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8064870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8064872:	4a04      	ldr	r2, [pc, #16]	; (8064884 <__NVIC_SetPriorityGrouping+0x44>)
 8064874:	68bb      	ldr	r3, [r7, #8]
 8064876:	60d3      	str	r3, [r2, #12]
}
 8064878:	bf00      	nop
 806487a:	3714      	adds	r7, #20
 806487c:	46bd      	mov	sp, r7
 806487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064882:	4770      	bx	lr
 8064884:	e000ed00 	.word	0xe000ed00

08064888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8064888:	b480      	push	{r7}
 806488a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 806488c:	4b04      	ldr	r3, [pc, #16]	; (80648a0 <__NVIC_GetPriorityGrouping+0x18>)
 806488e:	68db      	ldr	r3, [r3, #12]
 8064890:	0a1b      	lsrs	r3, r3, #8
 8064892:	f003 0307 	and.w	r3, r3, #7
}
 8064896:	4618      	mov	r0, r3
 8064898:	46bd      	mov	sp, r7
 806489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806489e:	4770      	bx	lr
 80648a0:	e000ed00 	.word	0xe000ed00

080648a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80648a4:	b480      	push	{r7}
 80648a6:	b083      	sub	sp, #12
 80648a8:	af00      	add	r7, sp, #0
 80648aa:	4603      	mov	r3, r0
 80648ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80648ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80648b2:	2b00      	cmp	r3, #0
 80648b4:	db0b      	blt.n	80648ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80648b6:	79fb      	ldrb	r3, [r7, #7]
 80648b8:	f003 021f 	and.w	r2, r3, #31
 80648bc:	4907      	ldr	r1, [pc, #28]	; (80648dc <__NVIC_EnableIRQ+0x38>)
 80648be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80648c2:	095b      	lsrs	r3, r3, #5
 80648c4:	2001      	movs	r0, #1
 80648c6:	fa00 f202 	lsl.w	r2, r0, r2
 80648ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80648ce:	bf00      	nop
 80648d0:	370c      	adds	r7, #12
 80648d2:	46bd      	mov	sp, r7
 80648d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80648d8:	4770      	bx	lr
 80648da:	bf00      	nop
 80648dc:	e000e100 	.word	0xe000e100

080648e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80648e0:	b480      	push	{r7}
 80648e2:	b083      	sub	sp, #12
 80648e4:	af00      	add	r7, sp, #0
 80648e6:	4603      	mov	r3, r0
 80648e8:	6039      	str	r1, [r7, #0]
 80648ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80648ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80648f0:	2b00      	cmp	r3, #0
 80648f2:	db0a      	blt.n	806490a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80648f4:	683b      	ldr	r3, [r7, #0]
 80648f6:	b2da      	uxtb	r2, r3
 80648f8:	490c      	ldr	r1, [pc, #48]	; (806492c <__NVIC_SetPriority+0x4c>)
 80648fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80648fe:	0112      	lsls	r2, r2, #4
 8064900:	b2d2      	uxtb	r2, r2
 8064902:	440b      	add	r3, r1
 8064904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8064908:	e00a      	b.n	8064920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806490a:	683b      	ldr	r3, [r7, #0]
 806490c:	b2da      	uxtb	r2, r3
 806490e:	4908      	ldr	r1, [pc, #32]	; (8064930 <__NVIC_SetPriority+0x50>)
 8064910:	79fb      	ldrb	r3, [r7, #7]
 8064912:	f003 030f 	and.w	r3, r3, #15
 8064916:	3b04      	subs	r3, #4
 8064918:	0112      	lsls	r2, r2, #4
 806491a:	b2d2      	uxtb	r2, r2
 806491c:	440b      	add	r3, r1
 806491e:	761a      	strb	r2, [r3, #24]
}
 8064920:	bf00      	nop
 8064922:	370c      	adds	r7, #12
 8064924:	46bd      	mov	sp, r7
 8064926:	f85d 7b04 	ldr.w	r7, [sp], #4
 806492a:	4770      	bx	lr
 806492c:	e000e100 	.word	0xe000e100
 8064930:	e000ed00 	.word	0xe000ed00

08064934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8064934:	b480      	push	{r7}
 8064936:	b089      	sub	sp, #36	; 0x24
 8064938:	af00      	add	r7, sp, #0
 806493a:	60f8      	str	r0, [r7, #12]
 806493c:	60b9      	str	r1, [r7, #8]
 806493e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8064940:	68fb      	ldr	r3, [r7, #12]
 8064942:	f003 0307 	and.w	r3, r3, #7
 8064946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8064948:	69fb      	ldr	r3, [r7, #28]
 806494a:	f1c3 0307 	rsb	r3, r3, #7
 806494e:	2b04      	cmp	r3, #4
 8064950:	bf28      	it	cs
 8064952:	2304      	movcs	r3, #4
 8064954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8064956:	69fb      	ldr	r3, [r7, #28]
 8064958:	3304      	adds	r3, #4
 806495a:	2b06      	cmp	r3, #6
 806495c:	d902      	bls.n	8064964 <NVIC_EncodePriority+0x30>
 806495e:	69fb      	ldr	r3, [r7, #28]
 8064960:	3b03      	subs	r3, #3
 8064962:	e000      	b.n	8064966 <NVIC_EncodePriority+0x32>
 8064964:	2300      	movs	r3, #0
 8064966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8064968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806496c:	69bb      	ldr	r3, [r7, #24]
 806496e:	fa02 f303 	lsl.w	r3, r2, r3
 8064972:	43da      	mvns	r2, r3
 8064974:	68bb      	ldr	r3, [r7, #8]
 8064976:	401a      	ands	r2, r3
 8064978:	697b      	ldr	r3, [r7, #20]
 806497a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 806497c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8064980:	697b      	ldr	r3, [r7, #20]
 8064982:	fa01 f303 	lsl.w	r3, r1, r3
 8064986:	43d9      	mvns	r1, r3
 8064988:	687b      	ldr	r3, [r7, #4]
 806498a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 806498c:	4313      	orrs	r3, r2
         );
}
 806498e:	4618      	mov	r0, r3
 8064990:	3724      	adds	r7, #36	; 0x24
 8064992:	46bd      	mov	sp, r7
 8064994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064998:	4770      	bx	lr
	...

0806499c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 806499c:	b480      	push	{r7}
 806499e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80649a0:	f3bf 8f4f 	dsb	sy
}
 80649a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80649a6:	4b06      	ldr	r3, [pc, #24]	; (80649c0 <__NVIC_SystemReset+0x24>)
 80649a8:	68db      	ldr	r3, [r3, #12]
 80649aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80649ae:	4904      	ldr	r1, [pc, #16]	; (80649c0 <__NVIC_SystemReset+0x24>)
 80649b0:	4b04      	ldr	r3, [pc, #16]	; (80649c4 <__NVIC_SystemReset+0x28>)
 80649b2:	4313      	orrs	r3, r2
 80649b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80649b6:	f3bf 8f4f 	dsb	sy
}
 80649ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80649bc:	bf00      	nop
 80649be:	e7fd      	b.n	80649bc <__NVIC_SystemReset+0x20>
 80649c0:	e000ed00 	.word	0xe000ed00
 80649c4:	05fa0004 	.word	0x05fa0004

080649c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80649c8:	b580      	push	{r7, lr}
 80649ca:	b082      	sub	sp, #8
 80649cc:	af00      	add	r7, sp, #0
 80649ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80649d0:	687b      	ldr	r3, [r7, #4]
 80649d2:	2b07      	cmp	r3, #7
 80649d4:	d00f      	beq.n	80649f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80649d6:	687b      	ldr	r3, [r7, #4]
 80649d8:	2b06      	cmp	r3, #6
 80649da:	d00c      	beq.n	80649f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80649dc:	687b      	ldr	r3, [r7, #4]
 80649de:	2b05      	cmp	r3, #5
 80649e0:	d009      	beq.n	80649f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80649e2:	687b      	ldr	r3, [r7, #4]
 80649e4:	2b04      	cmp	r3, #4
 80649e6:	d006      	beq.n	80649f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80649e8:	687b      	ldr	r3, [r7, #4]
 80649ea:	2b03      	cmp	r3, #3
 80649ec:	d003      	beq.n	80649f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80649ee:	2192      	movs	r1, #146	; 0x92
 80649f0:	4804      	ldr	r0, [pc, #16]	; (8064a04 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80649f2:	f7fe fb62 	bl	80630ba <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80649f6:	6878      	ldr	r0, [r7, #4]
 80649f8:	f7ff ff22 	bl	8064840 <__NVIC_SetPriorityGrouping>
}
 80649fc:	bf00      	nop
 80649fe:	3708      	adds	r7, #8
 8064a00:	46bd      	mov	sp, r7
 8064a02:	bd80      	pop	{r7, pc}
 8064a04:	08076a8c 	.word	0x08076a8c

08064a08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8064a08:	b580      	push	{r7, lr}
 8064a0a:	b086      	sub	sp, #24
 8064a0c:	af00      	add	r7, sp, #0
 8064a0e:	4603      	mov	r3, r0
 8064a10:	60b9      	str	r1, [r7, #8]
 8064a12:	607a      	str	r2, [r7, #4]
 8064a14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8064a16:	2300      	movs	r3, #0
 8064a18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8064a1a:	687b      	ldr	r3, [r7, #4]
 8064a1c:	2b0f      	cmp	r3, #15
 8064a1e:	d903      	bls.n	8064a28 <HAL_NVIC_SetPriority+0x20>
 8064a20:	21aa      	movs	r1, #170	; 0xaa
 8064a22:	480e      	ldr	r0, [pc, #56]	; (8064a5c <HAL_NVIC_SetPriority+0x54>)
 8064a24:	f7fe fb49 	bl	80630ba <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8064a28:	68bb      	ldr	r3, [r7, #8]
 8064a2a:	2b0f      	cmp	r3, #15
 8064a2c:	d903      	bls.n	8064a36 <HAL_NVIC_SetPriority+0x2e>
 8064a2e:	21ab      	movs	r1, #171	; 0xab
 8064a30:	480a      	ldr	r0, [pc, #40]	; (8064a5c <HAL_NVIC_SetPriority+0x54>)
 8064a32:	f7fe fb42 	bl	80630ba <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8064a36:	f7ff ff27 	bl	8064888 <__NVIC_GetPriorityGrouping>
 8064a3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8064a3c:	687a      	ldr	r2, [r7, #4]
 8064a3e:	68b9      	ldr	r1, [r7, #8]
 8064a40:	6978      	ldr	r0, [r7, #20]
 8064a42:	f7ff ff77 	bl	8064934 <NVIC_EncodePriority>
 8064a46:	4602      	mov	r2, r0
 8064a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8064a4c:	4611      	mov	r1, r2
 8064a4e:	4618      	mov	r0, r3
 8064a50:	f7ff ff46 	bl	80648e0 <__NVIC_SetPriority>
}
 8064a54:	bf00      	nop
 8064a56:	3718      	adds	r7, #24
 8064a58:	46bd      	mov	sp, r7
 8064a5a:	bd80      	pop	{r7, pc}
 8064a5c:	08076a8c 	.word	0x08076a8c

08064a60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8064a60:	b580      	push	{r7, lr}
 8064a62:	b082      	sub	sp, #8
 8064a64:	af00      	add	r7, sp, #0
 8064a66:	4603      	mov	r3, r0
 8064a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8064a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8064a6e:	2b00      	cmp	r3, #0
 8064a70:	da03      	bge.n	8064a7a <HAL_NVIC_EnableIRQ+0x1a>
 8064a72:	21be      	movs	r1, #190	; 0xbe
 8064a74:	4805      	ldr	r0, [pc, #20]	; (8064a8c <HAL_NVIC_EnableIRQ+0x2c>)
 8064a76:	f7fe fb20 	bl	80630ba <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8064a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8064a7e:	4618      	mov	r0, r3
 8064a80:	f7ff ff10 	bl	80648a4 <__NVIC_EnableIRQ>
}
 8064a84:	bf00      	nop
 8064a86:	3708      	adds	r7, #8
 8064a88:	46bd      	mov	sp, r7
 8064a8a:	bd80      	pop	{r7, pc}
 8064a8c:	08076a8c 	.word	0x08076a8c

08064a90 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8064a90:	b580      	push	{r7, lr}
 8064a92:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8064a94:	f7ff ff82 	bl	806499c <__NVIC_SystemReset>

08064a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8064a98:	b580      	push	{r7, lr}
 8064a9a:	b086      	sub	sp, #24
 8064a9c:	af00      	add	r7, sp, #0
 8064a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8064aa0:	2300      	movs	r3, #0
 8064aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8064aa4:	f7fe ff82 	bl	80639ac <HAL_GetTick>
 8064aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8064aaa:	687b      	ldr	r3, [r7, #4]
 8064aac:	2b00      	cmp	r3, #0
 8064aae:	d101      	bne.n	8064ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8064ab0:	2301      	movs	r3, #1
 8064ab2:	e204      	b.n	8064ebe <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8064ab4:	687b      	ldr	r3, [r7, #4]
 8064ab6:	681b      	ldr	r3, [r3, #0]
 8064ab8:	4a97      	ldr	r2, [pc, #604]	; (8064d18 <HAL_DMA_Init+0x280>)
 8064aba:	4293      	cmp	r3, r2
 8064abc:	d04e      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064abe:	687b      	ldr	r3, [r7, #4]
 8064ac0:	681b      	ldr	r3, [r3, #0]
 8064ac2:	4a96      	ldr	r2, [pc, #600]	; (8064d1c <HAL_DMA_Init+0x284>)
 8064ac4:	4293      	cmp	r3, r2
 8064ac6:	d049      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064ac8:	687b      	ldr	r3, [r7, #4]
 8064aca:	681b      	ldr	r3, [r3, #0]
 8064acc:	4a94      	ldr	r2, [pc, #592]	; (8064d20 <HAL_DMA_Init+0x288>)
 8064ace:	4293      	cmp	r3, r2
 8064ad0:	d044      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064ad2:	687b      	ldr	r3, [r7, #4]
 8064ad4:	681b      	ldr	r3, [r3, #0]
 8064ad6:	4a93      	ldr	r2, [pc, #588]	; (8064d24 <HAL_DMA_Init+0x28c>)
 8064ad8:	4293      	cmp	r3, r2
 8064ada:	d03f      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064adc:	687b      	ldr	r3, [r7, #4]
 8064ade:	681b      	ldr	r3, [r3, #0]
 8064ae0:	4a91      	ldr	r2, [pc, #580]	; (8064d28 <HAL_DMA_Init+0x290>)
 8064ae2:	4293      	cmp	r3, r2
 8064ae4:	d03a      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064ae6:	687b      	ldr	r3, [r7, #4]
 8064ae8:	681b      	ldr	r3, [r3, #0]
 8064aea:	4a90      	ldr	r2, [pc, #576]	; (8064d2c <HAL_DMA_Init+0x294>)
 8064aec:	4293      	cmp	r3, r2
 8064aee:	d035      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064af0:	687b      	ldr	r3, [r7, #4]
 8064af2:	681b      	ldr	r3, [r3, #0]
 8064af4:	4a8e      	ldr	r2, [pc, #568]	; (8064d30 <HAL_DMA_Init+0x298>)
 8064af6:	4293      	cmp	r3, r2
 8064af8:	d030      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064afa:	687b      	ldr	r3, [r7, #4]
 8064afc:	681b      	ldr	r3, [r3, #0]
 8064afe:	4a8d      	ldr	r2, [pc, #564]	; (8064d34 <HAL_DMA_Init+0x29c>)
 8064b00:	4293      	cmp	r3, r2
 8064b02:	d02b      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064b04:	687b      	ldr	r3, [r7, #4]
 8064b06:	681b      	ldr	r3, [r3, #0]
 8064b08:	4a8b      	ldr	r2, [pc, #556]	; (8064d38 <HAL_DMA_Init+0x2a0>)
 8064b0a:	4293      	cmp	r3, r2
 8064b0c:	d026      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064b0e:	687b      	ldr	r3, [r7, #4]
 8064b10:	681b      	ldr	r3, [r3, #0]
 8064b12:	4a8a      	ldr	r2, [pc, #552]	; (8064d3c <HAL_DMA_Init+0x2a4>)
 8064b14:	4293      	cmp	r3, r2
 8064b16:	d021      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064b18:	687b      	ldr	r3, [r7, #4]
 8064b1a:	681b      	ldr	r3, [r3, #0]
 8064b1c:	4a88      	ldr	r2, [pc, #544]	; (8064d40 <HAL_DMA_Init+0x2a8>)
 8064b1e:	4293      	cmp	r3, r2
 8064b20:	d01c      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064b22:	687b      	ldr	r3, [r7, #4]
 8064b24:	681b      	ldr	r3, [r3, #0]
 8064b26:	4a87      	ldr	r2, [pc, #540]	; (8064d44 <HAL_DMA_Init+0x2ac>)
 8064b28:	4293      	cmp	r3, r2
 8064b2a:	d017      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064b2c:	687b      	ldr	r3, [r7, #4]
 8064b2e:	681b      	ldr	r3, [r3, #0]
 8064b30:	4a85      	ldr	r2, [pc, #532]	; (8064d48 <HAL_DMA_Init+0x2b0>)
 8064b32:	4293      	cmp	r3, r2
 8064b34:	d012      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064b36:	687b      	ldr	r3, [r7, #4]
 8064b38:	681b      	ldr	r3, [r3, #0]
 8064b3a:	4a84      	ldr	r2, [pc, #528]	; (8064d4c <HAL_DMA_Init+0x2b4>)
 8064b3c:	4293      	cmp	r3, r2
 8064b3e:	d00d      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064b40:	687b      	ldr	r3, [r7, #4]
 8064b42:	681b      	ldr	r3, [r3, #0]
 8064b44:	4a82      	ldr	r2, [pc, #520]	; (8064d50 <HAL_DMA_Init+0x2b8>)
 8064b46:	4293      	cmp	r3, r2
 8064b48:	d008      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064b4a:	687b      	ldr	r3, [r7, #4]
 8064b4c:	681b      	ldr	r3, [r3, #0]
 8064b4e:	4a81      	ldr	r2, [pc, #516]	; (8064d54 <HAL_DMA_Init+0x2bc>)
 8064b50:	4293      	cmp	r3, r2
 8064b52:	d003      	beq.n	8064b5c <HAL_DMA_Init+0xc4>
 8064b54:	21b8      	movs	r1, #184	; 0xb8
 8064b56:	4880      	ldr	r0, [pc, #512]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064b58:	f7fe faaf 	bl	80630ba <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8064b5c:	687b      	ldr	r3, [r7, #4]
 8064b5e:	685b      	ldr	r3, [r3, #4]
 8064b60:	2b00      	cmp	r3, #0
 8064b62:	d026      	beq.n	8064bb2 <HAL_DMA_Init+0x11a>
 8064b64:	687b      	ldr	r3, [r7, #4]
 8064b66:	685b      	ldr	r3, [r3, #4]
 8064b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8064b6c:	d021      	beq.n	8064bb2 <HAL_DMA_Init+0x11a>
 8064b6e:	687b      	ldr	r3, [r7, #4]
 8064b70:	685b      	ldr	r3, [r3, #4]
 8064b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8064b76:	d01c      	beq.n	8064bb2 <HAL_DMA_Init+0x11a>
 8064b78:	687b      	ldr	r3, [r7, #4]
 8064b7a:	685b      	ldr	r3, [r3, #4]
 8064b7c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8064b80:	d017      	beq.n	8064bb2 <HAL_DMA_Init+0x11a>
 8064b82:	687b      	ldr	r3, [r7, #4]
 8064b84:	685b      	ldr	r3, [r3, #4]
 8064b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8064b8a:	d012      	beq.n	8064bb2 <HAL_DMA_Init+0x11a>
 8064b8c:	687b      	ldr	r3, [r7, #4]
 8064b8e:	685b      	ldr	r3, [r3, #4]
 8064b90:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8064b94:	d00d      	beq.n	8064bb2 <HAL_DMA_Init+0x11a>
 8064b96:	687b      	ldr	r3, [r7, #4]
 8064b98:	685b      	ldr	r3, [r3, #4]
 8064b9a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8064b9e:	d008      	beq.n	8064bb2 <HAL_DMA_Init+0x11a>
 8064ba0:	687b      	ldr	r3, [r7, #4]
 8064ba2:	685b      	ldr	r3, [r3, #4]
 8064ba4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8064ba8:	d003      	beq.n	8064bb2 <HAL_DMA_Init+0x11a>
 8064baa:	21b9      	movs	r1, #185	; 0xb9
 8064bac:	486a      	ldr	r0, [pc, #424]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064bae:	f7fe fa84 	bl	80630ba <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8064bb2:	687b      	ldr	r3, [r7, #4]
 8064bb4:	689b      	ldr	r3, [r3, #8]
 8064bb6:	2b00      	cmp	r3, #0
 8064bb8:	d00b      	beq.n	8064bd2 <HAL_DMA_Init+0x13a>
 8064bba:	687b      	ldr	r3, [r7, #4]
 8064bbc:	689b      	ldr	r3, [r3, #8]
 8064bbe:	2b40      	cmp	r3, #64	; 0x40
 8064bc0:	d007      	beq.n	8064bd2 <HAL_DMA_Init+0x13a>
 8064bc2:	687b      	ldr	r3, [r7, #4]
 8064bc4:	689b      	ldr	r3, [r3, #8]
 8064bc6:	2b80      	cmp	r3, #128	; 0x80
 8064bc8:	d003      	beq.n	8064bd2 <HAL_DMA_Init+0x13a>
 8064bca:	21ba      	movs	r1, #186	; 0xba
 8064bcc:	4862      	ldr	r0, [pc, #392]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064bce:	f7fe fa74 	bl	80630ba <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8064bd2:	687b      	ldr	r3, [r7, #4]
 8064bd4:	68db      	ldr	r3, [r3, #12]
 8064bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8064bda:	d007      	beq.n	8064bec <HAL_DMA_Init+0x154>
 8064bdc:	687b      	ldr	r3, [r7, #4]
 8064bde:	68db      	ldr	r3, [r3, #12]
 8064be0:	2b00      	cmp	r3, #0
 8064be2:	d003      	beq.n	8064bec <HAL_DMA_Init+0x154>
 8064be4:	21bb      	movs	r1, #187	; 0xbb
 8064be6:	485c      	ldr	r0, [pc, #368]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064be8:	f7fe fa67 	bl	80630ba <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8064bec:	687b      	ldr	r3, [r7, #4]
 8064bee:	691b      	ldr	r3, [r3, #16]
 8064bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8064bf4:	d007      	beq.n	8064c06 <HAL_DMA_Init+0x16e>
 8064bf6:	687b      	ldr	r3, [r7, #4]
 8064bf8:	691b      	ldr	r3, [r3, #16]
 8064bfa:	2b00      	cmp	r3, #0
 8064bfc:	d003      	beq.n	8064c06 <HAL_DMA_Init+0x16e>
 8064bfe:	21bc      	movs	r1, #188	; 0xbc
 8064c00:	4855      	ldr	r0, [pc, #340]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064c02:	f7fe fa5a 	bl	80630ba <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8064c06:	687b      	ldr	r3, [r7, #4]
 8064c08:	695b      	ldr	r3, [r3, #20]
 8064c0a:	2b00      	cmp	r3, #0
 8064c0c:	d00d      	beq.n	8064c2a <HAL_DMA_Init+0x192>
 8064c0e:	687b      	ldr	r3, [r7, #4]
 8064c10:	695b      	ldr	r3, [r3, #20]
 8064c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8064c16:	d008      	beq.n	8064c2a <HAL_DMA_Init+0x192>
 8064c18:	687b      	ldr	r3, [r7, #4]
 8064c1a:	695b      	ldr	r3, [r3, #20]
 8064c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8064c20:	d003      	beq.n	8064c2a <HAL_DMA_Init+0x192>
 8064c22:	21bd      	movs	r1, #189	; 0xbd
 8064c24:	484c      	ldr	r0, [pc, #304]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064c26:	f7fe fa48 	bl	80630ba <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8064c2a:	687b      	ldr	r3, [r7, #4]
 8064c2c:	699b      	ldr	r3, [r3, #24]
 8064c2e:	2b00      	cmp	r3, #0
 8064c30:	d00d      	beq.n	8064c4e <HAL_DMA_Init+0x1b6>
 8064c32:	687b      	ldr	r3, [r7, #4]
 8064c34:	699b      	ldr	r3, [r3, #24]
 8064c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8064c3a:	d008      	beq.n	8064c4e <HAL_DMA_Init+0x1b6>
 8064c3c:	687b      	ldr	r3, [r7, #4]
 8064c3e:	699b      	ldr	r3, [r3, #24]
 8064c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8064c44:	d003      	beq.n	8064c4e <HAL_DMA_Init+0x1b6>
 8064c46:	21be      	movs	r1, #190	; 0xbe
 8064c48:	4843      	ldr	r0, [pc, #268]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064c4a:	f7fe fa36 	bl	80630ba <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8064c4e:	687b      	ldr	r3, [r7, #4]
 8064c50:	69db      	ldr	r3, [r3, #28]
 8064c52:	2b00      	cmp	r3, #0
 8064c54:	d00c      	beq.n	8064c70 <HAL_DMA_Init+0x1d8>
 8064c56:	687b      	ldr	r3, [r7, #4]
 8064c58:	69db      	ldr	r3, [r3, #28]
 8064c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8064c5e:	d007      	beq.n	8064c70 <HAL_DMA_Init+0x1d8>
 8064c60:	687b      	ldr	r3, [r7, #4]
 8064c62:	69db      	ldr	r3, [r3, #28]
 8064c64:	2b20      	cmp	r3, #32
 8064c66:	d003      	beq.n	8064c70 <HAL_DMA_Init+0x1d8>
 8064c68:	21bf      	movs	r1, #191	; 0xbf
 8064c6a:	483b      	ldr	r0, [pc, #236]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064c6c:	f7fe fa25 	bl	80630ba <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8064c70:	687b      	ldr	r3, [r7, #4]
 8064c72:	6a1b      	ldr	r3, [r3, #32]
 8064c74:	2b00      	cmp	r3, #0
 8064c76:	d012      	beq.n	8064c9e <HAL_DMA_Init+0x206>
 8064c78:	687b      	ldr	r3, [r7, #4]
 8064c7a:	6a1b      	ldr	r3, [r3, #32]
 8064c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8064c80:	d00d      	beq.n	8064c9e <HAL_DMA_Init+0x206>
 8064c82:	687b      	ldr	r3, [r7, #4]
 8064c84:	6a1b      	ldr	r3, [r3, #32]
 8064c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8064c8a:	d008      	beq.n	8064c9e <HAL_DMA_Init+0x206>
 8064c8c:	687b      	ldr	r3, [r7, #4]
 8064c8e:	6a1b      	ldr	r3, [r3, #32]
 8064c90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8064c94:	d003      	beq.n	8064c9e <HAL_DMA_Init+0x206>
 8064c96:	21c0      	movs	r1, #192	; 0xc0
 8064c98:	482f      	ldr	r0, [pc, #188]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064c9a:	f7fe fa0e 	bl	80630ba <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8064c9e:	687b      	ldr	r3, [r7, #4]
 8064ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064ca2:	2b00      	cmp	r3, #0
 8064ca4:	d007      	beq.n	8064cb6 <HAL_DMA_Init+0x21e>
 8064ca6:	687b      	ldr	r3, [r7, #4]
 8064ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064caa:	2b04      	cmp	r3, #4
 8064cac:	d003      	beq.n	8064cb6 <HAL_DMA_Init+0x21e>
 8064cae:	21c1      	movs	r1, #193	; 0xc1
 8064cb0:	4829      	ldr	r0, [pc, #164]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064cb2:	f7fe fa02 	bl	80630ba <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8064cb6:	687b      	ldr	r3, [r7, #4]
 8064cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064cba:	2b00      	cmp	r3, #0
 8064cbc:	d065      	beq.n	8064d8a <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8064cbe:	687b      	ldr	r3, [r7, #4]
 8064cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064cc2:	2b00      	cmp	r3, #0
 8064cc4:	d00f      	beq.n	8064ce6 <HAL_DMA_Init+0x24e>
 8064cc6:	687b      	ldr	r3, [r7, #4]
 8064cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064cca:	2b01      	cmp	r3, #1
 8064ccc:	d00b      	beq.n	8064ce6 <HAL_DMA_Init+0x24e>
 8064cce:	687b      	ldr	r3, [r7, #4]
 8064cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064cd2:	2b02      	cmp	r3, #2
 8064cd4:	d007      	beq.n	8064ce6 <HAL_DMA_Init+0x24e>
 8064cd6:	687b      	ldr	r3, [r7, #4]
 8064cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064cda:	2b03      	cmp	r3, #3
 8064cdc:	d003      	beq.n	8064ce6 <HAL_DMA_Init+0x24e>
 8064cde:	21c6      	movs	r1, #198	; 0xc6
 8064ce0:	481d      	ldr	r0, [pc, #116]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064ce2:	f7fe f9ea 	bl	80630ba <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8064ce6:	687b      	ldr	r3, [r7, #4]
 8064ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064cea:	2b00      	cmp	r3, #0
 8064cec:	d036      	beq.n	8064d5c <HAL_DMA_Init+0x2c4>
 8064cee:	687b      	ldr	r3, [r7, #4]
 8064cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064cf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8064cf6:	d031      	beq.n	8064d5c <HAL_DMA_Init+0x2c4>
 8064cf8:	687b      	ldr	r3, [r7, #4]
 8064cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8064d00:	d02c      	beq.n	8064d5c <HAL_DMA_Init+0x2c4>
 8064d02:	687b      	ldr	r3, [r7, #4]
 8064d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064d06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8064d0a:	d027      	beq.n	8064d5c <HAL_DMA_Init+0x2c4>
 8064d0c:	21c7      	movs	r1, #199	; 0xc7
 8064d0e:	4812      	ldr	r0, [pc, #72]	; (8064d58 <HAL_DMA_Init+0x2c0>)
 8064d10:	f7fe f9d3 	bl	80630ba <assert_failed>
 8064d14:	e022      	b.n	8064d5c <HAL_DMA_Init+0x2c4>
 8064d16:	bf00      	nop
 8064d18:	40026010 	.word	0x40026010
 8064d1c:	40026028 	.word	0x40026028
 8064d20:	40026040 	.word	0x40026040
 8064d24:	40026058 	.word	0x40026058
 8064d28:	40026070 	.word	0x40026070
 8064d2c:	40026088 	.word	0x40026088
 8064d30:	400260a0 	.word	0x400260a0
 8064d34:	400260b8 	.word	0x400260b8
 8064d38:	40026410 	.word	0x40026410
 8064d3c:	40026428 	.word	0x40026428
 8064d40:	40026440 	.word	0x40026440
 8064d44:	40026458 	.word	0x40026458
 8064d48:	40026470 	.word	0x40026470
 8064d4c:	40026488 	.word	0x40026488
 8064d50:	400264a0 	.word	0x400264a0
 8064d54:	400264b8 	.word	0x400264b8
 8064d58:	08076ac8 	.word	0x08076ac8
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8064d5c:	687b      	ldr	r3, [r7, #4]
 8064d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064d60:	2b00      	cmp	r3, #0
 8064d62:	d012      	beq.n	8064d8a <HAL_DMA_Init+0x2f2>
 8064d64:	687b      	ldr	r3, [r7, #4]
 8064d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8064d6c:	d00d      	beq.n	8064d8a <HAL_DMA_Init+0x2f2>
 8064d6e:	687b      	ldr	r3, [r7, #4]
 8064d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8064d76:	d008      	beq.n	8064d8a <HAL_DMA_Init+0x2f2>
 8064d78:	687b      	ldr	r3, [r7, #4]
 8064d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064d7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8064d80:	d003      	beq.n	8064d8a <HAL_DMA_Init+0x2f2>
 8064d82:	21c8      	movs	r1, #200	; 0xc8
 8064d84:	4850      	ldr	r0, [pc, #320]	; (8064ec8 <HAL_DMA_Init+0x430>)
 8064d86:	f7fe f998 	bl	80630ba <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8064d8a:	687b      	ldr	r3, [r7, #4]
 8064d8c:	2202      	movs	r2, #2
 8064d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8064d92:	687b      	ldr	r3, [r7, #4]
 8064d94:	2200      	movs	r2, #0
 8064d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8064d9a:	687b      	ldr	r3, [r7, #4]
 8064d9c:	681b      	ldr	r3, [r3, #0]
 8064d9e:	681a      	ldr	r2, [r3, #0]
 8064da0:	687b      	ldr	r3, [r7, #4]
 8064da2:	681b      	ldr	r3, [r3, #0]
 8064da4:	f022 0201 	bic.w	r2, r2, #1
 8064da8:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8064daa:	e00f      	b.n	8064dcc <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8064dac:	f7fe fdfe 	bl	80639ac <HAL_GetTick>
 8064db0:	4602      	mov	r2, r0
 8064db2:	693b      	ldr	r3, [r7, #16]
 8064db4:	1ad3      	subs	r3, r2, r3
 8064db6:	2b05      	cmp	r3, #5
 8064db8:	d908      	bls.n	8064dcc <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8064dba:	687b      	ldr	r3, [r7, #4]
 8064dbc:	2220      	movs	r2, #32
 8064dbe:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8064dc0:	687b      	ldr	r3, [r7, #4]
 8064dc2:	2203      	movs	r2, #3
 8064dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8064dc8:	2303      	movs	r3, #3
 8064dca:	e078      	b.n	8064ebe <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8064dcc:	687b      	ldr	r3, [r7, #4]
 8064dce:	681b      	ldr	r3, [r3, #0]
 8064dd0:	681b      	ldr	r3, [r3, #0]
 8064dd2:	f003 0301 	and.w	r3, r3, #1
 8064dd6:	2b00      	cmp	r3, #0
 8064dd8:	d1e8      	bne.n	8064dac <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8064dda:	687b      	ldr	r3, [r7, #4]
 8064ddc:	681b      	ldr	r3, [r3, #0]
 8064dde:	681b      	ldr	r3, [r3, #0]
 8064de0:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8064de2:	697a      	ldr	r2, [r7, #20]
 8064de4:	4b39      	ldr	r3, [pc, #228]	; (8064ecc <HAL_DMA_Init+0x434>)
 8064de6:	4013      	ands	r3, r2
 8064de8:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8064dea:	687b      	ldr	r3, [r7, #4]
 8064dec:	685a      	ldr	r2, [r3, #4]
 8064dee:	687b      	ldr	r3, [r7, #4]
 8064df0:	689b      	ldr	r3, [r3, #8]
 8064df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8064df4:	687b      	ldr	r3, [r7, #4]
 8064df6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8064df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8064dfa:	687b      	ldr	r3, [r7, #4]
 8064dfc:	691b      	ldr	r3, [r3, #16]
 8064dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8064e00:	687b      	ldr	r3, [r7, #4]
 8064e02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8064e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8064e06:	687b      	ldr	r3, [r7, #4]
 8064e08:	699b      	ldr	r3, [r3, #24]
 8064e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8064e0c:	687b      	ldr	r3, [r7, #4]
 8064e0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8064e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8064e12:	687b      	ldr	r3, [r7, #4]
 8064e14:	6a1b      	ldr	r3, [r3, #32]
 8064e16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8064e18:	697a      	ldr	r2, [r7, #20]
 8064e1a:	4313      	orrs	r3, r2
 8064e1c:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8064e1e:	687b      	ldr	r3, [r7, #4]
 8064e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064e22:	2b04      	cmp	r3, #4
 8064e24:	d107      	bne.n	8064e36 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8064e26:	687b      	ldr	r3, [r7, #4]
 8064e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8064e2a:	687b      	ldr	r3, [r7, #4]
 8064e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064e2e:	4313      	orrs	r3, r2
 8064e30:	697a      	ldr	r2, [r7, #20]
 8064e32:	4313      	orrs	r3, r2
 8064e34:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8064e36:	687b      	ldr	r3, [r7, #4]
 8064e38:	681b      	ldr	r3, [r3, #0]
 8064e3a:	697a      	ldr	r2, [r7, #20]
 8064e3c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8064e3e:	687b      	ldr	r3, [r7, #4]
 8064e40:	681b      	ldr	r3, [r3, #0]
 8064e42:	695b      	ldr	r3, [r3, #20]
 8064e44:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8064e46:	697b      	ldr	r3, [r7, #20]
 8064e48:	f023 0307 	bic.w	r3, r3, #7
 8064e4c:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8064e4e:	687b      	ldr	r3, [r7, #4]
 8064e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064e52:	697a      	ldr	r2, [r7, #20]
 8064e54:	4313      	orrs	r3, r2
 8064e56:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8064e58:	687b      	ldr	r3, [r7, #4]
 8064e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064e5c:	2b04      	cmp	r3, #4
 8064e5e:	d117      	bne.n	8064e90 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8064e60:	687b      	ldr	r3, [r7, #4]
 8064e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064e64:	697a      	ldr	r2, [r7, #20]
 8064e66:	4313      	orrs	r3, r2
 8064e68:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8064e6a:	687b      	ldr	r3, [r7, #4]
 8064e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064e6e:	2b00      	cmp	r3, #0
 8064e70:	d00e      	beq.n	8064e90 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8064e72:	6878      	ldr	r0, [r7, #4]
 8064e74:	f000 fb12 	bl	806549c <DMA_CheckFifoParam>
 8064e78:	4603      	mov	r3, r0
 8064e7a:	2b00      	cmp	r3, #0
 8064e7c:	d008      	beq.n	8064e90 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8064e7e:	687b      	ldr	r3, [r7, #4]
 8064e80:	2240      	movs	r2, #64	; 0x40
 8064e82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8064e84:	687b      	ldr	r3, [r7, #4]
 8064e86:	2201      	movs	r2, #1
 8064e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8064e8c:	2301      	movs	r3, #1
 8064e8e:	e016      	b.n	8064ebe <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8064e90:	687b      	ldr	r3, [r7, #4]
 8064e92:	681b      	ldr	r3, [r3, #0]
 8064e94:	697a      	ldr	r2, [r7, #20]
 8064e96:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8064e98:	6878      	ldr	r0, [r7, #4]
 8064e9a:	f000 fac9 	bl	8065430 <DMA_CalcBaseAndBitshift>
 8064e9e:	4603      	mov	r3, r0
 8064ea0:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8064ea2:	687b      	ldr	r3, [r7, #4]
 8064ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8064ea6:	223f      	movs	r2, #63	; 0x3f
 8064ea8:	409a      	lsls	r2, r3
 8064eaa:	68fb      	ldr	r3, [r7, #12]
 8064eac:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8064eae:	687b      	ldr	r3, [r7, #4]
 8064eb0:	2200      	movs	r2, #0
 8064eb2:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8064eb4:	687b      	ldr	r3, [r7, #4]
 8064eb6:	2201      	movs	r2, #1
 8064eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8064ebc:	2300      	movs	r3, #0
}
 8064ebe:	4618      	mov	r0, r3
 8064ec0:	3718      	adds	r7, #24
 8064ec2:	46bd      	mov	sp, r7
 8064ec4:	bd80      	pop	{r7, pc}
 8064ec6:	bf00      	nop
 8064ec8:	08076ac8 	.word	0x08076ac8
 8064ecc:	f010803f 	.word	0xf010803f

08064ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8064ed0:	b580      	push	{r7, lr}
 8064ed2:	b086      	sub	sp, #24
 8064ed4:	af00      	add	r7, sp, #0
 8064ed6:	60f8      	str	r0, [r7, #12]
 8064ed8:	60b9      	str	r1, [r7, #8]
 8064eda:	607a      	str	r2, [r7, #4]
 8064edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8064ede:	2300      	movs	r3, #0
 8064ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8064ee2:	68fb      	ldr	r3, [r7, #12]
 8064ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8064ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8064ee8:	683b      	ldr	r3, [r7, #0]
 8064eea:	2b00      	cmp	r3, #0
 8064eec:	d003      	beq.n	8064ef6 <HAL_DMA_Start_IT+0x26>
 8064eee:	683b      	ldr	r3, [r7, #0]
 8064ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8064ef4:	d304      	bcc.n	8064f00 <HAL_DMA_Start_IT+0x30>
 8064ef6:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8064efa:	4827      	ldr	r0, [pc, #156]	; (8064f98 <HAL_DMA_Start_IT+0xc8>)
 8064efc:	f7fe f8dd 	bl	80630ba <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8064f00:	68fb      	ldr	r3, [r7, #12]
 8064f02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8064f06:	2b01      	cmp	r3, #1
 8064f08:	d101      	bne.n	8064f0e <HAL_DMA_Start_IT+0x3e>
 8064f0a:	2302      	movs	r3, #2
 8064f0c:	e040      	b.n	8064f90 <HAL_DMA_Start_IT+0xc0>
 8064f0e:	68fb      	ldr	r3, [r7, #12]
 8064f10:	2201      	movs	r2, #1
 8064f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8064f16:	68fb      	ldr	r3, [r7, #12]
 8064f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8064f1c:	b2db      	uxtb	r3, r3
 8064f1e:	2b01      	cmp	r3, #1
 8064f20:	d12f      	bne.n	8064f82 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8064f22:	68fb      	ldr	r3, [r7, #12]
 8064f24:	2202      	movs	r2, #2
 8064f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8064f2a:	68fb      	ldr	r3, [r7, #12]
 8064f2c:	2200      	movs	r2, #0
 8064f2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8064f30:	683b      	ldr	r3, [r7, #0]
 8064f32:	687a      	ldr	r2, [r7, #4]
 8064f34:	68b9      	ldr	r1, [r7, #8]
 8064f36:	68f8      	ldr	r0, [r7, #12]
 8064f38:	f000 fa4c 	bl	80653d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8064f3c:	68fb      	ldr	r3, [r7, #12]
 8064f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8064f40:	223f      	movs	r2, #63	; 0x3f
 8064f42:	409a      	lsls	r2, r3
 8064f44:	693b      	ldr	r3, [r7, #16]
 8064f46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8064f48:	68fb      	ldr	r3, [r7, #12]
 8064f4a:	681b      	ldr	r3, [r3, #0]
 8064f4c:	681a      	ldr	r2, [r3, #0]
 8064f4e:	68fb      	ldr	r3, [r7, #12]
 8064f50:	681b      	ldr	r3, [r3, #0]
 8064f52:	f042 0216 	orr.w	r2, r2, #22
 8064f56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8064f58:	68fb      	ldr	r3, [r7, #12]
 8064f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064f5c:	2b00      	cmp	r3, #0
 8064f5e:	d007      	beq.n	8064f70 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8064f60:	68fb      	ldr	r3, [r7, #12]
 8064f62:	681b      	ldr	r3, [r3, #0]
 8064f64:	681a      	ldr	r2, [r3, #0]
 8064f66:	68fb      	ldr	r3, [r7, #12]
 8064f68:	681b      	ldr	r3, [r3, #0]
 8064f6a:	f042 0208 	orr.w	r2, r2, #8
 8064f6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8064f70:	68fb      	ldr	r3, [r7, #12]
 8064f72:	681b      	ldr	r3, [r3, #0]
 8064f74:	681a      	ldr	r2, [r3, #0]
 8064f76:	68fb      	ldr	r3, [r7, #12]
 8064f78:	681b      	ldr	r3, [r3, #0]
 8064f7a:	f042 0201 	orr.w	r2, r2, #1
 8064f7e:	601a      	str	r2, [r3, #0]
 8064f80:	e005      	b.n	8064f8e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8064f82:	68fb      	ldr	r3, [r7, #12]
 8064f84:	2200      	movs	r2, #0
 8064f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8064f8a:	2302      	movs	r3, #2
 8064f8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8064f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8064f90:	4618      	mov	r0, r3
 8064f92:	3718      	adds	r7, #24
 8064f94:	46bd      	mov	sp, r7
 8064f96:	bd80      	pop	{r7, pc}
 8064f98:	08076ac8 	.word	0x08076ac8

08064f9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8064f9c:	b580      	push	{r7, lr}
 8064f9e:	b084      	sub	sp, #16
 8064fa0:	af00      	add	r7, sp, #0
 8064fa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8064fa4:	687b      	ldr	r3, [r7, #4]
 8064fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8064fa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8064faa:	f7fe fcff 	bl	80639ac <HAL_GetTick>
 8064fae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8064fb0:	687b      	ldr	r3, [r7, #4]
 8064fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8064fb6:	b2db      	uxtb	r3, r3
 8064fb8:	2b02      	cmp	r3, #2
 8064fba:	d008      	beq.n	8064fce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8064fbc:	687b      	ldr	r3, [r7, #4]
 8064fbe:	2280      	movs	r2, #128	; 0x80
 8064fc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8064fc2:	687b      	ldr	r3, [r7, #4]
 8064fc4:	2200      	movs	r2, #0
 8064fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8064fca:	2301      	movs	r3, #1
 8064fcc:	e052      	b.n	8065074 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8064fce:	687b      	ldr	r3, [r7, #4]
 8064fd0:	681b      	ldr	r3, [r3, #0]
 8064fd2:	681a      	ldr	r2, [r3, #0]
 8064fd4:	687b      	ldr	r3, [r7, #4]
 8064fd6:	681b      	ldr	r3, [r3, #0]
 8064fd8:	f022 0216 	bic.w	r2, r2, #22
 8064fdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8064fde:	687b      	ldr	r3, [r7, #4]
 8064fe0:	681b      	ldr	r3, [r3, #0]
 8064fe2:	695a      	ldr	r2, [r3, #20]
 8064fe4:	687b      	ldr	r3, [r7, #4]
 8064fe6:	681b      	ldr	r3, [r3, #0]
 8064fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8064fec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8064fee:	687b      	ldr	r3, [r7, #4]
 8064ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064ff2:	2b00      	cmp	r3, #0
 8064ff4:	d103      	bne.n	8064ffe <HAL_DMA_Abort+0x62>
 8064ff6:	687b      	ldr	r3, [r7, #4]
 8064ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8064ffa:	2b00      	cmp	r3, #0
 8064ffc:	d007      	beq.n	806500e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8064ffe:	687b      	ldr	r3, [r7, #4]
 8065000:	681b      	ldr	r3, [r3, #0]
 8065002:	681a      	ldr	r2, [r3, #0]
 8065004:	687b      	ldr	r3, [r7, #4]
 8065006:	681b      	ldr	r3, [r3, #0]
 8065008:	f022 0208 	bic.w	r2, r2, #8
 806500c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 806500e:	687b      	ldr	r3, [r7, #4]
 8065010:	681b      	ldr	r3, [r3, #0]
 8065012:	681a      	ldr	r2, [r3, #0]
 8065014:	687b      	ldr	r3, [r7, #4]
 8065016:	681b      	ldr	r3, [r3, #0]
 8065018:	f022 0201 	bic.w	r2, r2, #1
 806501c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 806501e:	e013      	b.n	8065048 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8065020:	f7fe fcc4 	bl	80639ac <HAL_GetTick>
 8065024:	4602      	mov	r2, r0
 8065026:	68bb      	ldr	r3, [r7, #8]
 8065028:	1ad3      	subs	r3, r2, r3
 806502a:	2b05      	cmp	r3, #5
 806502c:	d90c      	bls.n	8065048 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 806502e:	687b      	ldr	r3, [r7, #4]
 8065030:	2220      	movs	r2, #32
 8065032:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8065034:	687b      	ldr	r3, [r7, #4]
 8065036:	2203      	movs	r2, #3
 8065038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 806503c:	687b      	ldr	r3, [r7, #4]
 806503e:	2200      	movs	r2, #0
 8065040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8065044:	2303      	movs	r3, #3
 8065046:	e015      	b.n	8065074 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8065048:	687b      	ldr	r3, [r7, #4]
 806504a:	681b      	ldr	r3, [r3, #0]
 806504c:	681b      	ldr	r3, [r3, #0]
 806504e:	f003 0301 	and.w	r3, r3, #1
 8065052:	2b00      	cmp	r3, #0
 8065054:	d1e4      	bne.n	8065020 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8065056:	687b      	ldr	r3, [r7, #4]
 8065058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 806505a:	223f      	movs	r2, #63	; 0x3f
 806505c:	409a      	lsls	r2, r3
 806505e:	68fb      	ldr	r3, [r7, #12]
 8065060:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8065062:	687b      	ldr	r3, [r7, #4]
 8065064:	2201      	movs	r2, #1
 8065066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 806506a:	687b      	ldr	r3, [r7, #4]
 806506c:	2200      	movs	r2, #0
 806506e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8065072:	2300      	movs	r3, #0
}
 8065074:	4618      	mov	r0, r3
 8065076:	3710      	adds	r7, #16
 8065078:	46bd      	mov	sp, r7
 806507a:	bd80      	pop	{r7, pc}

0806507c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 806507c:	b480      	push	{r7}
 806507e:	b083      	sub	sp, #12
 8065080:	af00      	add	r7, sp, #0
 8065082:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8065084:	687b      	ldr	r3, [r7, #4]
 8065086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 806508a:	b2db      	uxtb	r3, r3
 806508c:	2b02      	cmp	r3, #2
 806508e:	d004      	beq.n	806509a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8065090:	687b      	ldr	r3, [r7, #4]
 8065092:	2280      	movs	r2, #128	; 0x80
 8065094:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8065096:	2301      	movs	r3, #1
 8065098:	e00c      	b.n	80650b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 806509a:	687b      	ldr	r3, [r7, #4]
 806509c:	2205      	movs	r2, #5
 806509e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80650a2:	687b      	ldr	r3, [r7, #4]
 80650a4:	681b      	ldr	r3, [r3, #0]
 80650a6:	681a      	ldr	r2, [r3, #0]
 80650a8:	687b      	ldr	r3, [r7, #4]
 80650aa:	681b      	ldr	r3, [r3, #0]
 80650ac:	f022 0201 	bic.w	r2, r2, #1
 80650b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80650b2:	2300      	movs	r3, #0
}
 80650b4:	4618      	mov	r0, r3
 80650b6:	370c      	adds	r7, #12
 80650b8:	46bd      	mov	sp, r7
 80650ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80650be:	4770      	bx	lr

080650c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80650c0:	b580      	push	{r7, lr}
 80650c2:	b086      	sub	sp, #24
 80650c4:	af00      	add	r7, sp, #0
 80650c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80650c8:	2300      	movs	r3, #0
 80650ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80650cc:	4b92      	ldr	r3, [pc, #584]	; (8065318 <HAL_DMA_IRQHandler+0x258>)
 80650ce:	681b      	ldr	r3, [r3, #0]
 80650d0:	4a92      	ldr	r2, [pc, #584]	; (806531c <HAL_DMA_IRQHandler+0x25c>)
 80650d2:	fba2 2303 	umull	r2, r3, r2, r3
 80650d6:	0a9b      	lsrs	r3, r3, #10
 80650d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80650da:	687b      	ldr	r3, [r7, #4]
 80650dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80650de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80650e0:	693b      	ldr	r3, [r7, #16]
 80650e2:	681b      	ldr	r3, [r3, #0]
 80650e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80650e6:	687b      	ldr	r3, [r7, #4]
 80650e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80650ea:	2208      	movs	r2, #8
 80650ec:	409a      	lsls	r2, r3
 80650ee:	68fb      	ldr	r3, [r7, #12]
 80650f0:	4013      	ands	r3, r2
 80650f2:	2b00      	cmp	r3, #0
 80650f4:	d01a      	beq.n	806512c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80650f6:	687b      	ldr	r3, [r7, #4]
 80650f8:	681b      	ldr	r3, [r3, #0]
 80650fa:	681b      	ldr	r3, [r3, #0]
 80650fc:	f003 0304 	and.w	r3, r3, #4
 8065100:	2b00      	cmp	r3, #0
 8065102:	d013      	beq.n	806512c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8065104:	687b      	ldr	r3, [r7, #4]
 8065106:	681b      	ldr	r3, [r3, #0]
 8065108:	681a      	ldr	r2, [r3, #0]
 806510a:	687b      	ldr	r3, [r7, #4]
 806510c:	681b      	ldr	r3, [r3, #0]
 806510e:	f022 0204 	bic.w	r2, r2, #4
 8065112:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8065114:	687b      	ldr	r3, [r7, #4]
 8065116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065118:	2208      	movs	r2, #8
 806511a:	409a      	lsls	r2, r3
 806511c:	693b      	ldr	r3, [r7, #16]
 806511e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8065120:	687b      	ldr	r3, [r7, #4]
 8065122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8065124:	f043 0201 	orr.w	r2, r3, #1
 8065128:	687b      	ldr	r3, [r7, #4]
 806512a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 806512c:	687b      	ldr	r3, [r7, #4]
 806512e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065130:	2201      	movs	r2, #1
 8065132:	409a      	lsls	r2, r3
 8065134:	68fb      	ldr	r3, [r7, #12]
 8065136:	4013      	ands	r3, r2
 8065138:	2b00      	cmp	r3, #0
 806513a:	d012      	beq.n	8065162 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 806513c:	687b      	ldr	r3, [r7, #4]
 806513e:	681b      	ldr	r3, [r3, #0]
 8065140:	695b      	ldr	r3, [r3, #20]
 8065142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8065146:	2b00      	cmp	r3, #0
 8065148:	d00b      	beq.n	8065162 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 806514a:	687b      	ldr	r3, [r7, #4]
 806514c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 806514e:	2201      	movs	r2, #1
 8065150:	409a      	lsls	r2, r3
 8065152:	693b      	ldr	r3, [r7, #16]
 8065154:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8065156:	687b      	ldr	r3, [r7, #4]
 8065158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 806515a:	f043 0202 	orr.w	r2, r3, #2
 806515e:	687b      	ldr	r3, [r7, #4]
 8065160:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8065162:	687b      	ldr	r3, [r7, #4]
 8065164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065166:	2204      	movs	r2, #4
 8065168:	409a      	lsls	r2, r3
 806516a:	68fb      	ldr	r3, [r7, #12]
 806516c:	4013      	ands	r3, r2
 806516e:	2b00      	cmp	r3, #0
 8065170:	d012      	beq.n	8065198 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8065172:	687b      	ldr	r3, [r7, #4]
 8065174:	681b      	ldr	r3, [r3, #0]
 8065176:	681b      	ldr	r3, [r3, #0]
 8065178:	f003 0302 	and.w	r3, r3, #2
 806517c:	2b00      	cmp	r3, #0
 806517e:	d00b      	beq.n	8065198 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8065180:	687b      	ldr	r3, [r7, #4]
 8065182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065184:	2204      	movs	r2, #4
 8065186:	409a      	lsls	r2, r3
 8065188:	693b      	ldr	r3, [r7, #16]
 806518a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 806518c:	687b      	ldr	r3, [r7, #4]
 806518e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8065190:	f043 0204 	orr.w	r2, r3, #4
 8065194:	687b      	ldr	r3, [r7, #4]
 8065196:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8065198:	687b      	ldr	r3, [r7, #4]
 806519a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 806519c:	2210      	movs	r2, #16
 806519e:	409a      	lsls	r2, r3
 80651a0:	68fb      	ldr	r3, [r7, #12]
 80651a2:	4013      	ands	r3, r2
 80651a4:	2b00      	cmp	r3, #0
 80651a6:	d043      	beq.n	8065230 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80651a8:	687b      	ldr	r3, [r7, #4]
 80651aa:	681b      	ldr	r3, [r3, #0]
 80651ac:	681b      	ldr	r3, [r3, #0]
 80651ae:	f003 0308 	and.w	r3, r3, #8
 80651b2:	2b00      	cmp	r3, #0
 80651b4:	d03c      	beq.n	8065230 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80651b6:	687b      	ldr	r3, [r7, #4]
 80651b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80651ba:	2210      	movs	r2, #16
 80651bc:	409a      	lsls	r2, r3
 80651be:	693b      	ldr	r3, [r7, #16]
 80651c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80651c2:	687b      	ldr	r3, [r7, #4]
 80651c4:	681b      	ldr	r3, [r3, #0]
 80651c6:	681b      	ldr	r3, [r3, #0]
 80651c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80651cc:	2b00      	cmp	r3, #0
 80651ce:	d018      	beq.n	8065202 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80651d0:	687b      	ldr	r3, [r7, #4]
 80651d2:	681b      	ldr	r3, [r3, #0]
 80651d4:	681b      	ldr	r3, [r3, #0]
 80651d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80651da:	2b00      	cmp	r3, #0
 80651dc:	d108      	bne.n	80651f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80651de:	687b      	ldr	r3, [r7, #4]
 80651e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80651e2:	2b00      	cmp	r3, #0
 80651e4:	d024      	beq.n	8065230 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80651e6:	687b      	ldr	r3, [r7, #4]
 80651e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80651ea:	6878      	ldr	r0, [r7, #4]
 80651ec:	4798      	blx	r3
 80651ee:	e01f      	b.n	8065230 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80651f0:	687b      	ldr	r3, [r7, #4]
 80651f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80651f4:	2b00      	cmp	r3, #0
 80651f6:	d01b      	beq.n	8065230 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80651f8:	687b      	ldr	r3, [r7, #4]
 80651fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80651fc:	6878      	ldr	r0, [r7, #4]
 80651fe:	4798      	blx	r3
 8065200:	e016      	b.n	8065230 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8065202:	687b      	ldr	r3, [r7, #4]
 8065204:	681b      	ldr	r3, [r3, #0]
 8065206:	681b      	ldr	r3, [r3, #0]
 8065208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806520c:	2b00      	cmp	r3, #0
 806520e:	d107      	bne.n	8065220 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8065210:	687b      	ldr	r3, [r7, #4]
 8065212:	681b      	ldr	r3, [r3, #0]
 8065214:	681a      	ldr	r2, [r3, #0]
 8065216:	687b      	ldr	r3, [r7, #4]
 8065218:	681b      	ldr	r3, [r3, #0]
 806521a:	f022 0208 	bic.w	r2, r2, #8
 806521e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8065220:	687b      	ldr	r3, [r7, #4]
 8065222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8065224:	2b00      	cmp	r3, #0
 8065226:	d003      	beq.n	8065230 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8065228:	687b      	ldr	r3, [r7, #4]
 806522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806522c:	6878      	ldr	r0, [r7, #4]
 806522e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8065230:	687b      	ldr	r3, [r7, #4]
 8065232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065234:	2220      	movs	r2, #32
 8065236:	409a      	lsls	r2, r3
 8065238:	68fb      	ldr	r3, [r7, #12]
 806523a:	4013      	ands	r3, r2
 806523c:	2b00      	cmp	r3, #0
 806523e:	f000 808e 	beq.w	806535e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8065242:	687b      	ldr	r3, [r7, #4]
 8065244:	681b      	ldr	r3, [r3, #0]
 8065246:	681b      	ldr	r3, [r3, #0]
 8065248:	f003 0310 	and.w	r3, r3, #16
 806524c:	2b00      	cmp	r3, #0
 806524e:	f000 8086 	beq.w	806535e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8065252:	687b      	ldr	r3, [r7, #4]
 8065254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065256:	2220      	movs	r2, #32
 8065258:	409a      	lsls	r2, r3
 806525a:	693b      	ldr	r3, [r7, #16]
 806525c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 806525e:	687b      	ldr	r3, [r7, #4]
 8065260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8065264:	b2db      	uxtb	r3, r3
 8065266:	2b05      	cmp	r3, #5
 8065268:	d136      	bne.n	80652d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 806526a:	687b      	ldr	r3, [r7, #4]
 806526c:	681b      	ldr	r3, [r3, #0]
 806526e:	681a      	ldr	r2, [r3, #0]
 8065270:	687b      	ldr	r3, [r7, #4]
 8065272:	681b      	ldr	r3, [r3, #0]
 8065274:	f022 0216 	bic.w	r2, r2, #22
 8065278:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 806527a:	687b      	ldr	r3, [r7, #4]
 806527c:	681b      	ldr	r3, [r3, #0]
 806527e:	695a      	ldr	r2, [r3, #20]
 8065280:	687b      	ldr	r3, [r7, #4]
 8065282:	681b      	ldr	r3, [r3, #0]
 8065284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8065288:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 806528a:	687b      	ldr	r3, [r7, #4]
 806528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806528e:	2b00      	cmp	r3, #0
 8065290:	d103      	bne.n	806529a <HAL_DMA_IRQHandler+0x1da>
 8065292:	687b      	ldr	r3, [r7, #4]
 8065294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8065296:	2b00      	cmp	r3, #0
 8065298:	d007      	beq.n	80652aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 806529a:	687b      	ldr	r3, [r7, #4]
 806529c:	681b      	ldr	r3, [r3, #0]
 806529e:	681a      	ldr	r2, [r3, #0]
 80652a0:	687b      	ldr	r3, [r7, #4]
 80652a2:	681b      	ldr	r3, [r3, #0]
 80652a4:	f022 0208 	bic.w	r2, r2, #8
 80652a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80652aa:	687b      	ldr	r3, [r7, #4]
 80652ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80652ae:	223f      	movs	r2, #63	; 0x3f
 80652b0:	409a      	lsls	r2, r3
 80652b2:	693b      	ldr	r3, [r7, #16]
 80652b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80652b6:	687b      	ldr	r3, [r7, #4]
 80652b8:	2201      	movs	r2, #1
 80652ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80652be:	687b      	ldr	r3, [r7, #4]
 80652c0:	2200      	movs	r2, #0
 80652c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80652c6:	687b      	ldr	r3, [r7, #4]
 80652c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80652ca:	2b00      	cmp	r3, #0
 80652cc:	d07d      	beq.n	80653ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80652ce:	687b      	ldr	r3, [r7, #4]
 80652d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80652d2:	6878      	ldr	r0, [r7, #4]
 80652d4:	4798      	blx	r3
        }
        return;
 80652d6:	e078      	b.n	80653ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80652d8:	687b      	ldr	r3, [r7, #4]
 80652da:	681b      	ldr	r3, [r3, #0]
 80652dc:	681b      	ldr	r3, [r3, #0]
 80652de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80652e2:	2b00      	cmp	r3, #0
 80652e4:	d01c      	beq.n	8065320 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80652e6:	687b      	ldr	r3, [r7, #4]
 80652e8:	681b      	ldr	r3, [r3, #0]
 80652ea:	681b      	ldr	r3, [r3, #0]
 80652ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80652f0:	2b00      	cmp	r3, #0
 80652f2:	d108      	bne.n	8065306 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80652f4:	687b      	ldr	r3, [r7, #4]
 80652f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80652f8:	2b00      	cmp	r3, #0
 80652fa:	d030      	beq.n	806535e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80652fc:	687b      	ldr	r3, [r7, #4]
 80652fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8065300:	6878      	ldr	r0, [r7, #4]
 8065302:	4798      	blx	r3
 8065304:	e02b      	b.n	806535e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8065306:	687b      	ldr	r3, [r7, #4]
 8065308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806530a:	2b00      	cmp	r3, #0
 806530c:	d027      	beq.n	806535e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 806530e:	687b      	ldr	r3, [r7, #4]
 8065310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8065312:	6878      	ldr	r0, [r7, #4]
 8065314:	4798      	blx	r3
 8065316:	e022      	b.n	806535e <HAL_DMA_IRQHandler+0x29e>
 8065318:	20000000 	.word	0x20000000
 806531c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8065320:	687b      	ldr	r3, [r7, #4]
 8065322:	681b      	ldr	r3, [r3, #0]
 8065324:	681b      	ldr	r3, [r3, #0]
 8065326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806532a:	2b00      	cmp	r3, #0
 806532c:	d10f      	bne.n	806534e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 806532e:	687b      	ldr	r3, [r7, #4]
 8065330:	681b      	ldr	r3, [r3, #0]
 8065332:	681a      	ldr	r2, [r3, #0]
 8065334:	687b      	ldr	r3, [r7, #4]
 8065336:	681b      	ldr	r3, [r3, #0]
 8065338:	f022 0210 	bic.w	r2, r2, #16
 806533c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 806533e:	687b      	ldr	r3, [r7, #4]
 8065340:	2201      	movs	r2, #1
 8065342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8065346:	687b      	ldr	r3, [r7, #4]
 8065348:	2200      	movs	r2, #0
 806534a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 806534e:	687b      	ldr	r3, [r7, #4]
 8065350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8065352:	2b00      	cmp	r3, #0
 8065354:	d003      	beq.n	806535e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8065356:	687b      	ldr	r3, [r7, #4]
 8065358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806535a:	6878      	ldr	r0, [r7, #4]
 806535c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 806535e:	687b      	ldr	r3, [r7, #4]
 8065360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8065362:	2b00      	cmp	r3, #0
 8065364:	d032      	beq.n	80653cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8065366:	687b      	ldr	r3, [r7, #4]
 8065368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 806536a:	f003 0301 	and.w	r3, r3, #1
 806536e:	2b00      	cmp	r3, #0
 8065370:	d022      	beq.n	80653b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8065372:	687b      	ldr	r3, [r7, #4]
 8065374:	2205      	movs	r2, #5
 8065376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 806537a:	687b      	ldr	r3, [r7, #4]
 806537c:	681b      	ldr	r3, [r3, #0]
 806537e:	681a      	ldr	r2, [r3, #0]
 8065380:	687b      	ldr	r3, [r7, #4]
 8065382:	681b      	ldr	r3, [r3, #0]
 8065384:	f022 0201 	bic.w	r2, r2, #1
 8065388:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 806538a:	68bb      	ldr	r3, [r7, #8]
 806538c:	3301      	adds	r3, #1
 806538e:	60bb      	str	r3, [r7, #8]
 8065390:	697a      	ldr	r2, [r7, #20]
 8065392:	429a      	cmp	r2, r3
 8065394:	d307      	bcc.n	80653a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8065396:	687b      	ldr	r3, [r7, #4]
 8065398:	681b      	ldr	r3, [r3, #0]
 806539a:	681b      	ldr	r3, [r3, #0]
 806539c:	f003 0301 	and.w	r3, r3, #1
 80653a0:	2b00      	cmp	r3, #0
 80653a2:	d1f2      	bne.n	806538a <HAL_DMA_IRQHandler+0x2ca>
 80653a4:	e000      	b.n	80653a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80653a6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80653a8:	687b      	ldr	r3, [r7, #4]
 80653aa:	2201      	movs	r2, #1
 80653ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80653b0:	687b      	ldr	r3, [r7, #4]
 80653b2:	2200      	movs	r2, #0
 80653b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80653b8:	687b      	ldr	r3, [r7, #4]
 80653ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80653bc:	2b00      	cmp	r3, #0
 80653be:	d005      	beq.n	80653cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80653c0:	687b      	ldr	r3, [r7, #4]
 80653c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80653c4:	6878      	ldr	r0, [r7, #4]
 80653c6:	4798      	blx	r3
 80653c8:	e000      	b.n	80653cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80653ca:	bf00      	nop
    }
  }
}
 80653cc:	3718      	adds	r7, #24
 80653ce:	46bd      	mov	sp, r7
 80653d0:	bd80      	pop	{r7, pc}
 80653d2:	bf00      	nop

080653d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80653d4:	b480      	push	{r7}
 80653d6:	b085      	sub	sp, #20
 80653d8:	af00      	add	r7, sp, #0
 80653da:	60f8      	str	r0, [r7, #12]
 80653dc:	60b9      	str	r1, [r7, #8]
 80653de:	607a      	str	r2, [r7, #4]
 80653e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80653e2:	68fb      	ldr	r3, [r7, #12]
 80653e4:	681b      	ldr	r3, [r3, #0]
 80653e6:	681a      	ldr	r2, [r3, #0]
 80653e8:	68fb      	ldr	r3, [r7, #12]
 80653ea:	681b      	ldr	r3, [r3, #0]
 80653ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80653f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80653f2:	68fb      	ldr	r3, [r7, #12]
 80653f4:	681b      	ldr	r3, [r3, #0]
 80653f6:	683a      	ldr	r2, [r7, #0]
 80653f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80653fa:	68fb      	ldr	r3, [r7, #12]
 80653fc:	689b      	ldr	r3, [r3, #8]
 80653fe:	2b40      	cmp	r3, #64	; 0x40
 8065400:	d108      	bne.n	8065414 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8065402:	68fb      	ldr	r3, [r7, #12]
 8065404:	681b      	ldr	r3, [r3, #0]
 8065406:	687a      	ldr	r2, [r7, #4]
 8065408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 806540a:	68fb      	ldr	r3, [r7, #12]
 806540c:	681b      	ldr	r3, [r3, #0]
 806540e:	68ba      	ldr	r2, [r7, #8]
 8065410:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8065412:	e007      	b.n	8065424 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8065414:	68fb      	ldr	r3, [r7, #12]
 8065416:	681b      	ldr	r3, [r3, #0]
 8065418:	68ba      	ldr	r2, [r7, #8]
 806541a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 806541c:	68fb      	ldr	r3, [r7, #12]
 806541e:	681b      	ldr	r3, [r3, #0]
 8065420:	687a      	ldr	r2, [r7, #4]
 8065422:	60da      	str	r2, [r3, #12]
}
 8065424:	bf00      	nop
 8065426:	3714      	adds	r7, #20
 8065428:	46bd      	mov	sp, r7
 806542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806542e:	4770      	bx	lr

08065430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8065430:	b480      	push	{r7}
 8065432:	b085      	sub	sp, #20
 8065434:	af00      	add	r7, sp, #0
 8065436:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8065438:	687b      	ldr	r3, [r7, #4]
 806543a:	681b      	ldr	r3, [r3, #0]
 806543c:	b2db      	uxtb	r3, r3
 806543e:	3b10      	subs	r3, #16
 8065440:	4a14      	ldr	r2, [pc, #80]	; (8065494 <DMA_CalcBaseAndBitshift+0x64>)
 8065442:	fba2 2303 	umull	r2, r3, r2, r3
 8065446:	091b      	lsrs	r3, r3, #4
 8065448:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 806544a:	4a13      	ldr	r2, [pc, #76]	; (8065498 <DMA_CalcBaseAndBitshift+0x68>)
 806544c:	68fb      	ldr	r3, [r7, #12]
 806544e:	4413      	add	r3, r2
 8065450:	781b      	ldrb	r3, [r3, #0]
 8065452:	461a      	mov	r2, r3
 8065454:	687b      	ldr	r3, [r7, #4]
 8065456:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8065458:	68fb      	ldr	r3, [r7, #12]
 806545a:	2b03      	cmp	r3, #3
 806545c:	d909      	bls.n	8065472 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 806545e:	687b      	ldr	r3, [r7, #4]
 8065460:	681b      	ldr	r3, [r3, #0]
 8065462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8065466:	f023 0303 	bic.w	r3, r3, #3
 806546a:	1d1a      	adds	r2, r3, #4
 806546c:	687b      	ldr	r3, [r7, #4]
 806546e:	659a      	str	r2, [r3, #88]	; 0x58
 8065470:	e007      	b.n	8065482 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8065472:	687b      	ldr	r3, [r7, #4]
 8065474:	681b      	ldr	r3, [r3, #0]
 8065476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 806547a:	f023 0303 	bic.w	r3, r3, #3
 806547e:	687a      	ldr	r2, [r7, #4]
 8065480:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8065482:	687b      	ldr	r3, [r7, #4]
 8065484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8065486:	4618      	mov	r0, r3
 8065488:	3714      	adds	r7, #20
 806548a:	46bd      	mov	sp, r7
 806548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065490:	4770      	bx	lr
 8065492:	bf00      	nop
 8065494:	aaaaaaab 	.word	0xaaaaaaab
 8065498:	08076e08 	.word	0x08076e08

0806549c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 806549c:	b480      	push	{r7}
 806549e:	b085      	sub	sp, #20
 80654a0:	af00      	add	r7, sp, #0
 80654a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80654a4:	2300      	movs	r3, #0
 80654a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80654a8:	687b      	ldr	r3, [r7, #4]
 80654aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80654ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80654ae:	687b      	ldr	r3, [r7, #4]
 80654b0:	699b      	ldr	r3, [r3, #24]
 80654b2:	2b00      	cmp	r3, #0
 80654b4:	d11f      	bne.n	80654f6 <DMA_CheckFifoParam+0x5a>
 80654b6:	68bb      	ldr	r3, [r7, #8]
 80654b8:	2b03      	cmp	r3, #3
 80654ba:	d856      	bhi.n	806556a <DMA_CheckFifoParam+0xce>
 80654bc:	a201      	add	r2, pc, #4	; (adr r2, 80654c4 <DMA_CheckFifoParam+0x28>)
 80654be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80654c2:	bf00      	nop
 80654c4:	080654d5 	.word	0x080654d5
 80654c8:	080654e7 	.word	0x080654e7
 80654cc:	080654d5 	.word	0x080654d5
 80654d0:	0806556b 	.word	0x0806556b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80654d4:	687b      	ldr	r3, [r7, #4]
 80654d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80654d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80654dc:	2b00      	cmp	r3, #0
 80654de:	d046      	beq.n	806556e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80654e0:	2301      	movs	r3, #1
 80654e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80654e4:	e043      	b.n	806556e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80654e6:	687b      	ldr	r3, [r7, #4]
 80654e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80654ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80654ee:	d140      	bne.n	8065572 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80654f0:	2301      	movs	r3, #1
 80654f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80654f4:	e03d      	b.n	8065572 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80654f6:	687b      	ldr	r3, [r7, #4]
 80654f8:	699b      	ldr	r3, [r3, #24]
 80654fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80654fe:	d121      	bne.n	8065544 <DMA_CheckFifoParam+0xa8>
 8065500:	68bb      	ldr	r3, [r7, #8]
 8065502:	2b03      	cmp	r3, #3
 8065504:	d837      	bhi.n	8065576 <DMA_CheckFifoParam+0xda>
 8065506:	a201      	add	r2, pc, #4	; (adr r2, 806550c <DMA_CheckFifoParam+0x70>)
 8065508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806550c:	0806551d 	.word	0x0806551d
 8065510:	08065523 	.word	0x08065523
 8065514:	0806551d 	.word	0x0806551d
 8065518:	08065535 	.word	0x08065535
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 806551c:	2301      	movs	r3, #1
 806551e:	73fb      	strb	r3, [r7, #15]
      break;
 8065520:	e030      	b.n	8065584 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8065522:	687b      	ldr	r3, [r7, #4]
 8065524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8065526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 806552a:	2b00      	cmp	r3, #0
 806552c:	d025      	beq.n	806557a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 806552e:	2301      	movs	r3, #1
 8065530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8065532:	e022      	b.n	806557a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8065534:	687b      	ldr	r3, [r7, #4]
 8065536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8065538:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 806553c:	d11f      	bne.n	806557e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 806553e:	2301      	movs	r3, #1
 8065540:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8065542:	e01c      	b.n	806557e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8065544:	68bb      	ldr	r3, [r7, #8]
 8065546:	2b02      	cmp	r3, #2
 8065548:	d903      	bls.n	8065552 <DMA_CheckFifoParam+0xb6>
 806554a:	68bb      	ldr	r3, [r7, #8]
 806554c:	2b03      	cmp	r3, #3
 806554e:	d003      	beq.n	8065558 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8065550:	e018      	b.n	8065584 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8065552:	2301      	movs	r3, #1
 8065554:	73fb      	strb	r3, [r7, #15]
      break;
 8065556:	e015      	b.n	8065584 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8065558:	687b      	ldr	r3, [r7, #4]
 806555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806555c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8065560:	2b00      	cmp	r3, #0
 8065562:	d00e      	beq.n	8065582 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8065564:	2301      	movs	r3, #1
 8065566:	73fb      	strb	r3, [r7, #15]
      break;
 8065568:	e00b      	b.n	8065582 <DMA_CheckFifoParam+0xe6>
      break;
 806556a:	bf00      	nop
 806556c:	e00a      	b.n	8065584 <DMA_CheckFifoParam+0xe8>
      break;
 806556e:	bf00      	nop
 8065570:	e008      	b.n	8065584 <DMA_CheckFifoParam+0xe8>
      break;
 8065572:	bf00      	nop
 8065574:	e006      	b.n	8065584 <DMA_CheckFifoParam+0xe8>
      break;
 8065576:	bf00      	nop
 8065578:	e004      	b.n	8065584 <DMA_CheckFifoParam+0xe8>
      break;
 806557a:	bf00      	nop
 806557c:	e002      	b.n	8065584 <DMA_CheckFifoParam+0xe8>
      break;   
 806557e:	bf00      	nop
 8065580:	e000      	b.n	8065584 <DMA_CheckFifoParam+0xe8>
      break;
 8065582:	bf00      	nop
    }
  } 
  
  return status; 
 8065584:	7bfb      	ldrb	r3, [r7, #15]
}
 8065586:	4618      	mov	r0, r3
 8065588:	3714      	adds	r7, #20
 806558a:	46bd      	mov	sp, r7
 806558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065590:	4770      	bx	lr
 8065592:	bf00      	nop

08065594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8065594:	b580      	push	{r7, lr}
 8065596:	b088      	sub	sp, #32
 8065598:	af00      	add	r7, sp, #0
 806559a:	6078      	str	r0, [r7, #4]
 806559c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 806559e:	2300      	movs	r3, #0
 80655a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80655a2:	2300      	movs	r3, #0
 80655a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80655a6:	2300      	movs	r3, #0
 80655a8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80655aa:	687b      	ldr	r3, [r7, #4]
 80655ac:	4a33      	ldr	r2, [pc, #204]	; (806567c <HAL_GPIO_Init+0xe8>)
 80655ae:	4293      	cmp	r3, r2
 80655b0:	d017      	beq.n	80655e2 <HAL_GPIO_Init+0x4e>
 80655b2:	687b      	ldr	r3, [r7, #4]
 80655b4:	4a32      	ldr	r2, [pc, #200]	; (8065680 <HAL_GPIO_Init+0xec>)
 80655b6:	4293      	cmp	r3, r2
 80655b8:	d013      	beq.n	80655e2 <HAL_GPIO_Init+0x4e>
 80655ba:	687b      	ldr	r3, [r7, #4]
 80655bc:	4a31      	ldr	r2, [pc, #196]	; (8065684 <HAL_GPIO_Init+0xf0>)
 80655be:	4293      	cmp	r3, r2
 80655c0:	d00f      	beq.n	80655e2 <HAL_GPIO_Init+0x4e>
 80655c2:	687b      	ldr	r3, [r7, #4]
 80655c4:	4a30      	ldr	r2, [pc, #192]	; (8065688 <HAL_GPIO_Init+0xf4>)
 80655c6:	4293      	cmp	r3, r2
 80655c8:	d00b      	beq.n	80655e2 <HAL_GPIO_Init+0x4e>
 80655ca:	687b      	ldr	r3, [r7, #4]
 80655cc:	4a2f      	ldr	r2, [pc, #188]	; (806568c <HAL_GPIO_Init+0xf8>)
 80655ce:	4293      	cmp	r3, r2
 80655d0:	d007      	beq.n	80655e2 <HAL_GPIO_Init+0x4e>
 80655d2:	687b      	ldr	r3, [r7, #4]
 80655d4:	4a2e      	ldr	r2, [pc, #184]	; (8065690 <HAL_GPIO_Init+0xfc>)
 80655d6:	4293      	cmp	r3, r2
 80655d8:	d003      	beq.n	80655e2 <HAL_GPIO_Init+0x4e>
 80655da:	21ac      	movs	r1, #172	; 0xac
 80655dc:	482d      	ldr	r0, [pc, #180]	; (8065694 <HAL_GPIO_Init+0x100>)
 80655de:	f7fd fd6c 	bl	80630ba <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80655e2:	683b      	ldr	r3, [r7, #0]
 80655e4:	681b      	ldr	r3, [r3, #0]
 80655e6:	b29b      	uxth	r3, r3
 80655e8:	2b00      	cmp	r3, #0
 80655ea:	d005      	beq.n	80655f8 <HAL_GPIO_Init+0x64>
 80655ec:	683b      	ldr	r3, [r7, #0]
 80655ee:	681b      	ldr	r3, [r3, #0]
 80655f0:	0c1b      	lsrs	r3, r3, #16
 80655f2:	041b      	lsls	r3, r3, #16
 80655f4:	2b00      	cmp	r3, #0
 80655f6:	d003      	beq.n	8065600 <HAL_GPIO_Init+0x6c>
 80655f8:	21ad      	movs	r1, #173	; 0xad
 80655fa:	4826      	ldr	r0, [pc, #152]	; (8065694 <HAL_GPIO_Init+0x100>)
 80655fc:	f7fd fd5d 	bl	80630ba <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8065600:	683b      	ldr	r3, [r7, #0]
 8065602:	685b      	ldr	r3, [r3, #4]
 8065604:	2b00      	cmp	r3, #0
 8065606:	d035      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 8065608:	683b      	ldr	r3, [r7, #0]
 806560a:	685b      	ldr	r3, [r3, #4]
 806560c:	2b01      	cmp	r3, #1
 806560e:	d031      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 8065610:	683b      	ldr	r3, [r7, #0]
 8065612:	685b      	ldr	r3, [r3, #4]
 8065614:	2b11      	cmp	r3, #17
 8065616:	d02d      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 8065618:	683b      	ldr	r3, [r7, #0]
 806561a:	685b      	ldr	r3, [r3, #4]
 806561c:	2b02      	cmp	r3, #2
 806561e:	d029      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 8065620:	683b      	ldr	r3, [r7, #0]
 8065622:	685b      	ldr	r3, [r3, #4]
 8065624:	2b12      	cmp	r3, #18
 8065626:	d025      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 8065628:	683b      	ldr	r3, [r7, #0]
 806562a:	685b      	ldr	r3, [r3, #4]
 806562c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8065630:	d020      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 8065632:	683b      	ldr	r3, [r7, #0]
 8065634:	685b      	ldr	r3, [r3, #4]
 8065636:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 806563a:	d01b      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 806563c:	683b      	ldr	r3, [r7, #0]
 806563e:	685b      	ldr	r3, [r3, #4]
 8065640:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8065644:	d016      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 8065646:	683b      	ldr	r3, [r7, #0]
 8065648:	685b      	ldr	r3, [r3, #4]
 806564a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 806564e:	d011      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 8065650:	683b      	ldr	r3, [r7, #0]
 8065652:	685b      	ldr	r3, [r3, #4]
 8065654:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8065658:	d00c      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 806565a:	683b      	ldr	r3, [r7, #0]
 806565c:	685b      	ldr	r3, [r3, #4]
 806565e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8065662:	d007      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 8065664:	683b      	ldr	r3, [r7, #0]
 8065666:	685b      	ldr	r3, [r3, #4]
 8065668:	2b03      	cmp	r3, #3
 806566a:	d003      	beq.n	8065674 <HAL_GPIO_Init+0xe0>
 806566c:	21ae      	movs	r1, #174	; 0xae
 806566e:	4809      	ldr	r0, [pc, #36]	; (8065694 <HAL_GPIO_Init+0x100>)
 8065670:	f7fd fd23 	bl	80630ba <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8065674:	2300      	movs	r3, #0
 8065676:	61fb      	str	r3, [r7, #28]
 8065678:	e211      	b.n	8065a9e <HAL_GPIO_Init+0x50a>
 806567a:	bf00      	nop
 806567c:	40020000 	.word	0x40020000
 8065680:	40020400 	.word	0x40020400
 8065684:	40020800 	.word	0x40020800
 8065688:	40020c00 	.word	0x40020c00
 806568c:	40021000 	.word	0x40021000
 8065690:	40021c00 	.word	0x40021c00
 8065694:	08076b00 	.word	0x08076b00
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8065698:	2201      	movs	r2, #1
 806569a:	69fb      	ldr	r3, [r7, #28]
 806569c:	fa02 f303 	lsl.w	r3, r2, r3
 80656a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80656a2:	683b      	ldr	r3, [r7, #0]
 80656a4:	681b      	ldr	r3, [r3, #0]
 80656a6:	697a      	ldr	r2, [r7, #20]
 80656a8:	4013      	ands	r3, r2
 80656aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80656ac:	693a      	ldr	r2, [r7, #16]
 80656ae:	697b      	ldr	r3, [r7, #20]
 80656b0:	429a      	cmp	r2, r3
 80656b2:	f040 81f1 	bne.w	8065a98 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80656b6:	683b      	ldr	r3, [r7, #0]
 80656b8:	685b      	ldr	r3, [r3, #4]
 80656ba:	f003 0303 	and.w	r3, r3, #3
 80656be:	2b01      	cmp	r3, #1
 80656c0:	d005      	beq.n	80656ce <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80656c2:	683b      	ldr	r3, [r7, #0]
 80656c4:	685b      	ldr	r3, [r3, #4]
 80656c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80656ca:	2b02      	cmp	r3, #2
 80656cc:	d144      	bne.n	8065758 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80656ce:	683b      	ldr	r3, [r7, #0]
 80656d0:	68db      	ldr	r3, [r3, #12]
 80656d2:	2b00      	cmp	r3, #0
 80656d4:	d00f      	beq.n	80656f6 <HAL_GPIO_Init+0x162>
 80656d6:	683b      	ldr	r3, [r7, #0]
 80656d8:	68db      	ldr	r3, [r3, #12]
 80656da:	2b01      	cmp	r3, #1
 80656dc:	d00b      	beq.n	80656f6 <HAL_GPIO_Init+0x162>
 80656de:	683b      	ldr	r3, [r7, #0]
 80656e0:	68db      	ldr	r3, [r3, #12]
 80656e2:	2b02      	cmp	r3, #2
 80656e4:	d007      	beq.n	80656f6 <HAL_GPIO_Init+0x162>
 80656e6:	683b      	ldr	r3, [r7, #0]
 80656e8:	68db      	ldr	r3, [r3, #12]
 80656ea:	2b03      	cmp	r3, #3
 80656ec:	d003      	beq.n	80656f6 <HAL_GPIO_Init+0x162>
 80656ee:	21c0      	movs	r1, #192	; 0xc0
 80656f0:	489f      	ldr	r0, [pc, #636]	; (8065970 <HAL_GPIO_Init+0x3dc>)
 80656f2:	f7fd fce2 	bl	80630ba <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80656f6:	687b      	ldr	r3, [r7, #4]
 80656f8:	689b      	ldr	r3, [r3, #8]
 80656fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80656fc:	69fb      	ldr	r3, [r7, #28]
 80656fe:	005b      	lsls	r3, r3, #1
 8065700:	2203      	movs	r2, #3
 8065702:	fa02 f303 	lsl.w	r3, r2, r3
 8065706:	43db      	mvns	r3, r3
 8065708:	69ba      	ldr	r2, [r7, #24]
 806570a:	4013      	ands	r3, r2
 806570c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 806570e:	683b      	ldr	r3, [r7, #0]
 8065710:	68da      	ldr	r2, [r3, #12]
 8065712:	69fb      	ldr	r3, [r7, #28]
 8065714:	005b      	lsls	r3, r3, #1
 8065716:	fa02 f303 	lsl.w	r3, r2, r3
 806571a:	69ba      	ldr	r2, [r7, #24]
 806571c:	4313      	orrs	r3, r2
 806571e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8065720:	687b      	ldr	r3, [r7, #4]
 8065722:	69ba      	ldr	r2, [r7, #24]
 8065724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8065726:	687b      	ldr	r3, [r7, #4]
 8065728:	685b      	ldr	r3, [r3, #4]
 806572a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 806572c:	2201      	movs	r2, #1
 806572e:	69fb      	ldr	r3, [r7, #28]
 8065730:	fa02 f303 	lsl.w	r3, r2, r3
 8065734:	43db      	mvns	r3, r3
 8065736:	69ba      	ldr	r2, [r7, #24]
 8065738:	4013      	ands	r3, r2
 806573a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 806573c:	683b      	ldr	r3, [r7, #0]
 806573e:	685b      	ldr	r3, [r3, #4]
 8065740:	091b      	lsrs	r3, r3, #4
 8065742:	f003 0201 	and.w	r2, r3, #1
 8065746:	69fb      	ldr	r3, [r7, #28]
 8065748:	fa02 f303 	lsl.w	r3, r2, r3
 806574c:	69ba      	ldr	r2, [r7, #24]
 806574e:	4313      	orrs	r3, r2
 8065750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8065752:	687b      	ldr	r3, [r7, #4]
 8065754:	69ba      	ldr	r2, [r7, #24]
 8065756:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8065758:	683b      	ldr	r3, [r7, #0]
 806575a:	685b      	ldr	r3, [r3, #4]
 806575c:	f003 0303 	and.w	r3, r3, #3
 8065760:	2b03      	cmp	r3, #3
 8065762:	d027      	beq.n	80657b4 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8065764:	683b      	ldr	r3, [r7, #0]
 8065766:	689b      	ldr	r3, [r3, #8]
 8065768:	2b00      	cmp	r3, #0
 806576a:	d00b      	beq.n	8065784 <HAL_GPIO_Init+0x1f0>
 806576c:	683b      	ldr	r3, [r7, #0]
 806576e:	689b      	ldr	r3, [r3, #8]
 8065770:	2b01      	cmp	r3, #1
 8065772:	d007      	beq.n	8065784 <HAL_GPIO_Init+0x1f0>
 8065774:	683b      	ldr	r3, [r7, #0]
 8065776:	689b      	ldr	r3, [r3, #8]
 8065778:	2b02      	cmp	r3, #2
 806577a:	d003      	beq.n	8065784 <HAL_GPIO_Init+0x1f0>
 806577c:	21d1      	movs	r1, #209	; 0xd1
 806577e:	487c      	ldr	r0, [pc, #496]	; (8065970 <HAL_GPIO_Init+0x3dc>)
 8065780:	f7fd fc9b 	bl	80630ba <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8065784:	687b      	ldr	r3, [r7, #4]
 8065786:	68db      	ldr	r3, [r3, #12]
 8065788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 806578a:	69fb      	ldr	r3, [r7, #28]
 806578c:	005b      	lsls	r3, r3, #1
 806578e:	2203      	movs	r2, #3
 8065790:	fa02 f303 	lsl.w	r3, r2, r3
 8065794:	43db      	mvns	r3, r3
 8065796:	69ba      	ldr	r2, [r7, #24]
 8065798:	4013      	ands	r3, r2
 806579a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 806579c:	683b      	ldr	r3, [r7, #0]
 806579e:	689a      	ldr	r2, [r3, #8]
 80657a0:	69fb      	ldr	r3, [r7, #28]
 80657a2:	005b      	lsls	r3, r3, #1
 80657a4:	fa02 f303 	lsl.w	r3, r2, r3
 80657a8:	69ba      	ldr	r2, [r7, #24]
 80657aa:	4313      	orrs	r3, r2
 80657ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80657ae:	687b      	ldr	r3, [r7, #4]
 80657b0:	69ba      	ldr	r2, [r7, #24]
 80657b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80657b4:	683b      	ldr	r3, [r7, #0]
 80657b6:	685b      	ldr	r3, [r3, #4]
 80657b8:	f003 0303 	and.w	r3, r3, #3
 80657bc:	2b02      	cmp	r3, #2
 80657be:	f040 80a0 	bne.w	8065902 <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80657c2:	683b      	ldr	r3, [r7, #0]
 80657c4:	691b      	ldr	r3, [r3, #16]
 80657c6:	2b00      	cmp	r3, #0
 80657c8:	d077      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 80657ca:	683b      	ldr	r3, [r7, #0]
 80657cc:	691b      	ldr	r3, [r3, #16]
 80657ce:	2b09      	cmp	r3, #9
 80657d0:	d073      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 80657d2:	683b      	ldr	r3, [r7, #0]
 80657d4:	691b      	ldr	r3, [r3, #16]
 80657d6:	2b00      	cmp	r3, #0
 80657d8:	d06f      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 80657da:	683b      	ldr	r3, [r7, #0]
 80657dc:	691b      	ldr	r3, [r3, #16]
 80657de:	2b00      	cmp	r3, #0
 80657e0:	d06b      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 80657e2:	683b      	ldr	r3, [r7, #0]
 80657e4:	691b      	ldr	r3, [r3, #16]
 80657e6:	2b00      	cmp	r3, #0
 80657e8:	d067      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 80657ea:	683b      	ldr	r3, [r7, #0]
 80657ec:	691b      	ldr	r3, [r3, #16]
 80657ee:	2b00      	cmp	r3, #0
 80657f0:	d063      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 80657f2:	683b      	ldr	r3, [r7, #0]
 80657f4:	691b      	ldr	r3, [r3, #16]
 80657f6:	2b01      	cmp	r3, #1
 80657f8:	d05f      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 80657fa:	683b      	ldr	r3, [r7, #0]
 80657fc:	691b      	ldr	r3, [r3, #16]
 80657fe:	2b01      	cmp	r3, #1
 8065800:	d05b      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 8065802:	683b      	ldr	r3, [r7, #0]
 8065804:	691b      	ldr	r3, [r3, #16]
 8065806:	2b02      	cmp	r3, #2
 8065808:	d057      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 806580a:	683b      	ldr	r3, [r7, #0]
 806580c:	691b      	ldr	r3, [r3, #16]
 806580e:	2b02      	cmp	r3, #2
 8065810:	d053      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 8065812:	683b      	ldr	r3, [r7, #0]
 8065814:	691b      	ldr	r3, [r3, #16]
 8065816:	2b02      	cmp	r3, #2
 8065818:	d04f      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 806581a:	683b      	ldr	r3, [r7, #0]
 806581c:	691b      	ldr	r3, [r3, #16]
 806581e:	2b04      	cmp	r3, #4
 8065820:	d04b      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 8065822:	683b      	ldr	r3, [r7, #0]
 8065824:	691b      	ldr	r3, [r3, #16]
 8065826:	2b04      	cmp	r3, #4
 8065828:	d047      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 806582a:	683b      	ldr	r3, [r7, #0]
 806582c:	691b      	ldr	r3, [r3, #16]
 806582e:	2b04      	cmp	r3, #4
 8065830:	d043      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 8065832:	683b      	ldr	r3, [r7, #0]
 8065834:	691b      	ldr	r3, [r3, #16]
 8065836:	2b05      	cmp	r3, #5
 8065838:	d03f      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 806583a:	683b      	ldr	r3, [r7, #0]
 806583c:	691b      	ldr	r3, [r3, #16]
 806583e:	2b05      	cmp	r3, #5
 8065840:	d03b      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 8065842:	683b      	ldr	r3, [r7, #0]
 8065844:	691b      	ldr	r3, [r3, #16]
 8065846:	2b05      	cmp	r3, #5
 8065848:	d037      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 806584a:	683b      	ldr	r3, [r7, #0]
 806584c:	691b      	ldr	r3, [r3, #16]
 806584e:	2b06      	cmp	r3, #6
 8065850:	d033      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 8065852:	683b      	ldr	r3, [r7, #0]
 8065854:	691b      	ldr	r3, [r3, #16]
 8065856:	2b06      	cmp	r3, #6
 8065858:	d02f      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 806585a:	683b      	ldr	r3, [r7, #0]
 806585c:	691b      	ldr	r3, [r3, #16]
 806585e:	2b05      	cmp	r3, #5
 8065860:	d02b      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 8065862:	683b      	ldr	r3, [r7, #0]
 8065864:	691b      	ldr	r3, [r3, #16]
 8065866:	2b06      	cmp	r3, #6
 8065868:	d027      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 806586a:	683b      	ldr	r3, [r7, #0]
 806586c:	691b      	ldr	r3, [r3, #16]
 806586e:	2b07      	cmp	r3, #7
 8065870:	d023      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 8065872:	683b      	ldr	r3, [r7, #0]
 8065874:	691b      	ldr	r3, [r3, #16]
 8065876:	2b07      	cmp	r3, #7
 8065878:	d01f      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 806587a:	683b      	ldr	r3, [r7, #0]
 806587c:	691b      	ldr	r3, [r3, #16]
 806587e:	2b07      	cmp	r3, #7
 8065880:	d01b      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 8065882:	683b      	ldr	r3, [r7, #0]
 8065884:	691b      	ldr	r3, [r3, #16]
 8065886:	2b08      	cmp	r3, #8
 8065888:	d017      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 806588a:	683b      	ldr	r3, [r7, #0]
 806588c:	691b      	ldr	r3, [r3, #16]
 806588e:	2b0a      	cmp	r3, #10
 8065890:	d013      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 8065892:	683b      	ldr	r3, [r7, #0]
 8065894:	691b      	ldr	r3, [r3, #16]
 8065896:	2b09      	cmp	r3, #9
 8065898:	d00f      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 806589a:	683b      	ldr	r3, [r7, #0]
 806589c:	691b      	ldr	r3, [r3, #16]
 806589e:	2b09      	cmp	r3, #9
 80658a0:	d00b      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 80658a2:	683b      	ldr	r3, [r7, #0]
 80658a4:	691b      	ldr	r3, [r3, #16]
 80658a6:	2b0c      	cmp	r3, #12
 80658a8:	d007      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 80658aa:	683b      	ldr	r3, [r7, #0]
 80658ac:	691b      	ldr	r3, [r3, #16]
 80658ae:	2b0f      	cmp	r3, #15
 80658b0:	d003      	beq.n	80658ba <HAL_GPIO_Init+0x326>
 80658b2:	21de      	movs	r1, #222	; 0xde
 80658b4:	482e      	ldr	r0, [pc, #184]	; (8065970 <HAL_GPIO_Init+0x3dc>)
 80658b6:	f7fd fc00 	bl	80630ba <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80658ba:	69fb      	ldr	r3, [r7, #28]
 80658bc:	08da      	lsrs	r2, r3, #3
 80658be:	687b      	ldr	r3, [r7, #4]
 80658c0:	3208      	adds	r2, #8
 80658c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80658c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80658c8:	69fb      	ldr	r3, [r7, #28]
 80658ca:	f003 0307 	and.w	r3, r3, #7
 80658ce:	009b      	lsls	r3, r3, #2
 80658d0:	220f      	movs	r2, #15
 80658d2:	fa02 f303 	lsl.w	r3, r2, r3
 80658d6:	43db      	mvns	r3, r3
 80658d8:	69ba      	ldr	r2, [r7, #24]
 80658da:	4013      	ands	r3, r2
 80658dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80658de:	683b      	ldr	r3, [r7, #0]
 80658e0:	691a      	ldr	r2, [r3, #16]
 80658e2:	69fb      	ldr	r3, [r7, #28]
 80658e4:	f003 0307 	and.w	r3, r3, #7
 80658e8:	009b      	lsls	r3, r3, #2
 80658ea:	fa02 f303 	lsl.w	r3, r2, r3
 80658ee:	69ba      	ldr	r2, [r7, #24]
 80658f0:	4313      	orrs	r3, r2
 80658f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80658f4:	69fb      	ldr	r3, [r7, #28]
 80658f6:	08da      	lsrs	r2, r3, #3
 80658f8:	687b      	ldr	r3, [r7, #4]
 80658fa:	3208      	adds	r2, #8
 80658fc:	69b9      	ldr	r1, [r7, #24]
 80658fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8065902:	687b      	ldr	r3, [r7, #4]
 8065904:	681b      	ldr	r3, [r3, #0]
 8065906:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8065908:	69fb      	ldr	r3, [r7, #28]
 806590a:	005b      	lsls	r3, r3, #1
 806590c:	2203      	movs	r2, #3
 806590e:	fa02 f303 	lsl.w	r3, r2, r3
 8065912:	43db      	mvns	r3, r3
 8065914:	69ba      	ldr	r2, [r7, #24]
 8065916:	4013      	ands	r3, r2
 8065918:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 806591a:	683b      	ldr	r3, [r7, #0]
 806591c:	685b      	ldr	r3, [r3, #4]
 806591e:	f003 0203 	and.w	r2, r3, #3
 8065922:	69fb      	ldr	r3, [r7, #28]
 8065924:	005b      	lsls	r3, r3, #1
 8065926:	fa02 f303 	lsl.w	r3, r2, r3
 806592a:	69ba      	ldr	r2, [r7, #24]
 806592c:	4313      	orrs	r3, r2
 806592e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8065930:	687b      	ldr	r3, [r7, #4]
 8065932:	69ba      	ldr	r2, [r7, #24]
 8065934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8065936:	683b      	ldr	r3, [r7, #0]
 8065938:	685b      	ldr	r3, [r3, #4]
 806593a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 806593e:	2b00      	cmp	r3, #0
 8065940:	f000 80aa 	beq.w	8065a98 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8065944:	2300      	movs	r3, #0
 8065946:	60fb      	str	r3, [r7, #12]
 8065948:	4b0a      	ldr	r3, [pc, #40]	; (8065974 <HAL_GPIO_Init+0x3e0>)
 806594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806594c:	4a09      	ldr	r2, [pc, #36]	; (8065974 <HAL_GPIO_Init+0x3e0>)
 806594e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8065952:	6453      	str	r3, [r2, #68]	; 0x44
 8065954:	4b07      	ldr	r3, [pc, #28]	; (8065974 <HAL_GPIO_Init+0x3e0>)
 8065956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8065958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 806595c:	60fb      	str	r3, [r7, #12]
 806595e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8065960:	4a05      	ldr	r2, [pc, #20]	; (8065978 <HAL_GPIO_Init+0x3e4>)
 8065962:	69fb      	ldr	r3, [r7, #28]
 8065964:	089b      	lsrs	r3, r3, #2
 8065966:	3302      	adds	r3, #2
 8065968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 806596c:	e006      	b.n	806597c <HAL_GPIO_Init+0x3e8>
 806596e:	bf00      	nop
 8065970:	08076b00 	.word	0x08076b00
 8065974:	40023800 	.word	0x40023800
 8065978:	40013800 	.word	0x40013800
 806597c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 806597e:	69fb      	ldr	r3, [r7, #28]
 8065980:	f003 0303 	and.w	r3, r3, #3
 8065984:	009b      	lsls	r3, r3, #2
 8065986:	220f      	movs	r2, #15
 8065988:	fa02 f303 	lsl.w	r3, r2, r3
 806598c:	43db      	mvns	r3, r3
 806598e:	69ba      	ldr	r2, [r7, #24]
 8065990:	4013      	ands	r3, r2
 8065992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8065994:	687b      	ldr	r3, [r7, #4]
 8065996:	4a46      	ldr	r2, [pc, #280]	; (8065ab0 <HAL_GPIO_Init+0x51c>)
 8065998:	4293      	cmp	r3, r2
 806599a:	d019      	beq.n	80659d0 <HAL_GPIO_Init+0x43c>
 806599c:	687b      	ldr	r3, [r7, #4]
 806599e:	4a45      	ldr	r2, [pc, #276]	; (8065ab4 <HAL_GPIO_Init+0x520>)
 80659a0:	4293      	cmp	r3, r2
 80659a2:	d013      	beq.n	80659cc <HAL_GPIO_Init+0x438>
 80659a4:	687b      	ldr	r3, [r7, #4]
 80659a6:	4a44      	ldr	r2, [pc, #272]	; (8065ab8 <HAL_GPIO_Init+0x524>)
 80659a8:	4293      	cmp	r3, r2
 80659aa:	d00d      	beq.n	80659c8 <HAL_GPIO_Init+0x434>
 80659ac:	687b      	ldr	r3, [r7, #4]
 80659ae:	4a43      	ldr	r2, [pc, #268]	; (8065abc <HAL_GPIO_Init+0x528>)
 80659b0:	4293      	cmp	r3, r2
 80659b2:	d007      	beq.n	80659c4 <HAL_GPIO_Init+0x430>
 80659b4:	687b      	ldr	r3, [r7, #4]
 80659b6:	4a42      	ldr	r2, [pc, #264]	; (8065ac0 <HAL_GPIO_Init+0x52c>)
 80659b8:	4293      	cmp	r3, r2
 80659ba:	d101      	bne.n	80659c0 <HAL_GPIO_Init+0x42c>
 80659bc:	2304      	movs	r3, #4
 80659be:	e008      	b.n	80659d2 <HAL_GPIO_Init+0x43e>
 80659c0:	2307      	movs	r3, #7
 80659c2:	e006      	b.n	80659d2 <HAL_GPIO_Init+0x43e>
 80659c4:	2303      	movs	r3, #3
 80659c6:	e004      	b.n	80659d2 <HAL_GPIO_Init+0x43e>
 80659c8:	2302      	movs	r3, #2
 80659ca:	e002      	b.n	80659d2 <HAL_GPIO_Init+0x43e>
 80659cc:	2301      	movs	r3, #1
 80659ce:	e000      	b.n	80659d2 <HAL_GPIO_Init+0x43e>
 80659d0:	2300      	movs	r3, #0
 80659d2:	69fa      	ldr	r2, [r7, #28]
 80659d4:	f002 0203 	and.w	r2, r2, #3
 80659d8:	0092      	lsls	r2, r2, #2
 80659da:	4093      	lsls	r3, r2
 80659dc:	69ba      	ldr	r2, [r7, #24]
 80659de:	4313      	orrs	r3, r2
 80659e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80659e2:	4938      	ldr	r1, [pc, #224]	; (8065ac4 <HAL_GPIO_Init+0x530>)
 80659e4:	69fb      	ldr	r3, [r7, #28]
 80659e6:	089b      	lsrs	r3, r3, #2
 80659e8:	3302      	adds	r3, #2
 80659ea:	69ba      	ldr	r2, [r7, #24]
 80659ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80659f0:	4b35      	ldr	r3, [pc, #212]	; (8065ac8 <HAL_GPIO_Init+0x534>)
 80659f2:	681b      	ldr	r3, [r3, #0]
 80659f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80659f6:	693b      	ldr	r3, [r7, #16]
 80659f8:	43db      	mvns	r3, r3
 80659fa:	69ba      	ldr	r2, [r7, #24]
 80659fc:	4013      	ands	r3, r2
 80659fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8065a00:	683b      	ldr	r3, [r7, #0]
 8065a02:	685b      	ldr	r3, [r3, #4]
 8065a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8065a08:	2b00      	cmp	r3, #0
 8065a0a:	d003      	beq.n	8065a14 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8065a0c:	69ba      	ldr	r2, [r7, #24]
 8065a0e:	693b      	ldr	r3, [r7, #16]
 8065a10:	4313      	orrs	r3, r2
 8065a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8065a14:	4a2c      	ldr	r2, [pc, #176]	; (8065ac8 <HAL_GPIO_Init+0x534>)
 8065a16:	69bb      	ldr	r3, [r7, #24]
 8065a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8065a1a:	4b2b      	ldr	r3, [pc, #172]	; (8065ac8 <HAL_GPIO_Init+0x534>)
 8065a1c:	685b      	ldr	r3, [r3, #4]
 8065a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8065a20:	693b      	ldr	r3, [r7, #16]
 8065a22:	43db      	mvns	r3, r3
 8065a24:	69ba      	ldr	r2, [r7, #24]
 8065a26:	4013      	ands	r3, r2
 8065a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8065a2a:	683b      	ldr	r3, [r7, #0]
 8065a2c:	685b      	ldr	r3, [r3, #4]
 8065a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8065a32:	2b00      	cmp	r3, #0
 8065a34:	d003      	beq.n	8065a3e <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8065a36:	69ba      	ldr	r2, [r7, #24]
 8065a38:	693b      	ldr	r3, [r7, #16]
 8065a3a:	4313      	orrs	r3, r2
 8065a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8065a3e:	4a22      	ldr	r2, [pc, #136]	; (8065ac8 <HAL_GPIO_Init+0x534>)
 8065a40:	69bb      	ldr	r3, [r7, #24]
 8065a42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8065a44:	4b20      	ldr	r3, [pc, #128]	; (8065ac8 <HAL_GPIO_Init+0x534>)
 8065a46:	689b      	ldr	r3, [r3, #8]
 8065a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8065a4a:	693b      	ldr	r3, [r7, #16]
 8065a4c:	43db      	mvns	r3, r3
 8065a4e:	69ba      	ldr	r2, [r7, #24]
 8065a50:	4013      	ands	r3, r2
 8065a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8065a54:	683b      	ldr	r3, [r7, #0]
 8065a56:	685b      	ldr	r3, [r3, #4]
 8065a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8065a5c:	2b00      	cmp	r3, #0
 8065a5e:	d003      	beq.n	8065a68 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8065a60:	69ba      	ldr	r2, [r7, #24]
 8065a62:	693b      	ldr	r3, [r7, #16]
 8065a64:	4313      	orrs	r3, r2
 8065a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8065a68:	4a17      	ldr	r2, [pc, #92]	; (8065ac8 <HAL_GPIO_Init+0x534>)
 8065a6a:	69bb      	ldr	r3, [r7, #24]
 8065a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8065a6e:	4b16      	ldr	r3, [pc, #88]	; (8065ac8 <HAL_GPIO_Init+0x534>)
 8065a70:	68db      	ldr	r3, [r3, #12]
 8065a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8065a74:	693b      	ldr	r3, [r7, #16]
 8065a76:	43db      	mvns	r3, r3
 8065a78:	69ba      	ldr	r2, [r7, #24]
 8065a7a:	4013      	ands	r3, r2
 8065a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8065a7e:	683b      	ldr	r3, [r7, #0]
 8065a80:	685b      	ldr	r3, [r3, #4]
 8065a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8065a86:	2b00      	cmp	r3, #0
 8065a88:	d003      	beq.n	8065a92 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8065a8a:	69ba      	ldr	r2, [r7, #24]
 8065a8c:	693b      	ldr	r3, [r7, #16]
 8065a8e:	4313      	orrs	r3, r2
 8065a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8065a92:	4a0d      	ldr	r2, [pc, #52]	; (8065ac8 <HAL_GPIO_Init+0x534>)
 8065a94:	69bb      	ldr	r3, [r7, #24]
 8065a96:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8065a98:	69fb      	ldr	r3, [r7, #28]
 8065a9a:	3301      	adds	r3, #1
 8065a9c:	61fb      	str	r3, [r7, #28]
 8065a9e:	69fb      	ldr	r3, [r7, #28]
 8065aa0:	2b0f      	cmp	r3, #15
 8065aa2:	f67f adf9 	bls.w	8065698 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8065aa6:	bf00      	nop
 8065aa8:	bf00      	nop
 8065aaa:	3720      	adds	r7, #32
 8065aac:	46bd      	mov	sp, r7
 8065aae:	bd80      	pop	{r7, pc}
 8065ab0:	40020000 	.word	0x40020000
 8065ab4:	40020400 	.word	0x40020400
 8065ab8:	40020800 	.word	0x40020800
 8065abc:	40020c00 	.word	0x40020c00
 8065ac0:	40021000 	.word	0x40021000
 8065ac4:	40013800 	.word	0x40013800
 8065ac8:	40013c00 	.word	0x40013c00

08065acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8065acc:	b580      	push	{r7, lr}
 8065ace:	b082      	sub	sp, #8
 8065ad0:	af00      	add	r7, sp, #0
 8065ad2:	6078      	str	r0, [r7, #4]
 8065ad4:	460b      	mov	r3, r1
 8065ad6:	807b      	strh	r3, [r7, #2]
 8065ad8:	4613      	mov	r3, r2
 8065ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8065adc:	887b      	ldrh	r3, [r7, #2]
 8065ade:	2b00      	cmp	r3, #0
 8065ae0:	d004      	beq.n	8065aec <HAL_GPIO_WritePin+0x20>
 8065ae2:	887b      	ldrh	r3, [r7, #2]
 8065ae4:	0c1b      	lsrs	r3, r3, #16
 8065ae6:	041b      	lsls	r3, r3, #16
 8065ae8:	2b00      	cmp	r3, #0
 8065aea:	d004      	beq.n	8065af6 <HAL_GPIO_WritePin+0x2a>
 8065aec:	f240 119d 	movw	r1, #413	; 0x19d
 8065af0:	480e      	ldr	r0, [pc, #56]	; (8065b2c <HAL_GPIO_WritePin+0x60>)
 8065af2:	f7fd fae2 	bl	80630ba <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8065af6:	787b      	ldrb	r3, [r7, #1]
 8065af8:	2b00      	cmp	r3, #0
 8065afa:	d007      	beq.n	8065b0c <HAL_GPIO_WritePin+0x40>
 8065afc:	787b      	ldrb	r3, [r7, #1]
 8065afe:	2b01      	cmp	r3, #1
 8065b00:	d004      	beq.n	8065b0c <HAL_GPIO_WritePin+0x40>
 8065b02:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8065b06:	4809      	ldr	r0, [pc, #36]	; (8065b2c <HAL_GPIO_WritePin+0x60>)
 8065b08:	f7fd fad7 	bl	80630ba <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8065b0c:	787b      	ldrb	r3, [r7, #1]
 8065b0e:	2b00      	cmp	r3, #0
 8065b10:	d003      	beq.n	8065b1a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8065b12:	887a      	ldrh	r2, [r7, #2]
 8065b14:	687b      	ldr	r3, [r7, #4]
 8065b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8065b18:	e003      	b.n	8065b22 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8065b1a:	887b      	ldrh	r3, [r7, #2]
 8065b1c:	041a      	lsls	r2, r3, #16
 8065b1e:	687b      	ldr	r3, [r7, #4]
 8065b20:	619a      	str	r2, [r3, #24]
}
 8065b22:	bf00      	nop
 8065b24:	3708      	adds	r7, #8
 8065b26:	46bd      	mov	sp, r7
 8065b28:	bd80      	pop	{r7, pc}
 8065b2a:	bf00      	nop
 8065b2c:	08076b00 	.word	0x08076b00

08065b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8065b30:	b580      	push	{r7, lr}
 8065b32:	b084      	sub	sp, #16
 8065b34:	af00      	add	r7, sp, #0
 8065b36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8065b38:	687b      	ldr	r3, [r7, #4]
 8065b3a:	2b00      	cmp	r3, #0
 8065b3c:	d101      	bne.n	8065b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8065b3e:	2301      	movs	r3, #1
 8065b40:	e1be      	b.n	8065ec0 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8065b42:	687b      	ldr	r3, [r7, #4]
 8065b44:	681b      	ldr	r3, [r3, #0]
 8065b46:	4a9f      	ldr	r2, [pc, #636]	; (8065dc4 <HAL_I2C_Init+0x294>)
 8065b48:	4293      	cmp	r3, r2
 8065b4a:	d00e      	beq.n	8065b6a <HAL_I2C_Init+0x3a>
 8065b4c:	687b      	ldr	r3, [r7, #4]
 8065b4e:	681b      	ldr	r3, [r3, #0]
 8065b50:	4a9d      	ldr	r2, [pc, #628]	; (8065dc8 <HAL_I2C_Init+0x298>)
 8065b52:	4293      	cmp	r3, r2
 8065b54:	d009      	beq.n	8065b6a <HAL_I2C_Init+0x3a>
 8065b56:	687b      	ldr	r3, [r7, #4]
 8065b58:	681b      	ldr	r3, [r3, #0]
 8065b5a:	4a9c      	ldr	r2, [pc, #624]	; (8065dcc <HAL_I2C_Init+0x29c>)
 8065b5c:	4293      	cmp	r3, r2
 8065b5e:	d004      	beq.n	8065b6a <HAL_I2C_Init+0x3a>
 8065b60:	f240 11bf 	movw	r1, #447	; 0x1bf
 8065b64:	489a      	ldr	r0, [pc, #616]	; (8065dd0 <HAL_I2C_Init+0x2a0>)
 8065b66:	f7fd faa8 	bl	80630ba <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8065b6a:	687b      	ldr	r3, [r7, #4]
 8065b6c:	685b      	ldr	r3, [r3, #4]
 8065b6e:	2b00      	cmp	r3, #0
 8065b70:	d004      	beq.n	8065b7c <HAL_I2C_Init+0x4c>
 8065b72:	687b      	ldr	r3, [r7, #4]
 8065b74:	685b      	ldr	r3, [r3, #4]
 8065b76:	4a97      	ldr	r2, [pc, #604]	; (8065dd4 <HAL_I2C_Init+0x2a4>)
 8065b78:	4293      	cmp	r3, r2
 8065b7a:	d904      	bls.n	8065b86 <HAL_I2C_Init+0x56>
 8065b7c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8065b80:	4893      	ldr	r0, [pc, #588]	; (8065dd0 <HAL_I2C_Init+0x2a0>)
 8065b82:	f7fd fa9a 	bl	80630ba <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8065b86:	687b      	ldr	r3, [r7, #4]
 8065b88:	689b      	ldr	r3, [r3, #8]
 8065b8a:	2b00      	cmp	r3, #0
 8065b8c:	d009      	beq.n	8065ba2 <HAL_I2C_Init+0x72>
 8065b8e:	687b      	ldr	r3, [r7, #4]
 8065b90:	689b      	ldr	r3, [r3, #8]
 8065b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8065b96:	d004      	beq.n	8065ba2 <HAL_I2C_Init+0x72>
 8065b98:	f240 11c1 	movw	r1, #449	; 0x1c1
 8065b9c:	488c      	ldr	r0, [pc, #560]	; (8065dd0 <HAL_I2C_Init+0x2a0>)
 8065b9e:	f7fd fa8c 	bl	80630ba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8065ba2:	687b      	ldr	r3, [r7, #4]
 8065ba4:	68db      	ldr	r3, [r3, #12]
 8065ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8065baa:	f023 0303 	bic.w	r3, r3, #3
 8065bae:	2b00      	cmp	r3, #0
 8065bb0:	d004      	beq.n	8065bbc <HAL_I2C_Init+0x8c>
 8065bb2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8065bb6:	4886      	ldr	r0, [pc, #536]	; (8065dd0 <HAL_I2C_Init+0x2a0>)
 8065bb8:	f7fd fa7f 	bl	80630ba <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8065bbc:	687b      	ldr	r3, [r7, #4]
 8065bbe:	691b      	ldr	r3, [r3, #16]
 8065bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8065bc4:	d009      	beq.n	8065bda <HAL_I2C_Init+0xaa>
 8065bc6:	687b      	ldr	r3, [r7, #4]
 8065bc8:	691b      	ldr	r3, [r3, #16]
 8065bca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8065bce:	d004      	beq.n	8065bda <HAL_I2C_Init+0xaa>
 8065bd0:	f240 11c3 	movw	r1, #451	; 0x1c3
 8065bd4:	487e      	ldr	r0, [pc, #504]	; (8065dd0 <HAL_I2C_Init+0x2a0>)
 8065bd6:	f7fd fa70 	bl	80630ba <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8065bda:	687b      	ldr	r3, [r7, #4]
 8065bdc:	695b      	ldr	r3, [r3, #20]
 8065bde:	2b00      	cmp	r3, #0
 8065be0:	d008      	beq.n	8065bf4 <HAL_I2C_Init+0xc4>
 8065be2:	687b      	ldr	r3, [r7, #4]
 8065be4:	695b      	ldr	r3, [r3, #20]
 8065be6:	2b01      	cmp	r3, #1
 8065be8:	d004      	beq.n	8065bf4 <HAL_I2C_Init+0xc4>
 8065bea:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8065bee:	4878      	ldr	r0, [pc, #480]	; (8065dd0 <HAL_I2C_Init+0x2a0>)
 8065bf0:	f7fd fa63 	bl	80630ba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8065bf4:	687b      	ldr	r3, [r7, #4]
 8065bf6:	699b      	ldr	r3, [r3, #24]
 8065bf8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8065bfc:	2b00      	cmp	r3, #0
 8065bfe:	d004      	beq.n	8065c0a <HAL_I2C_Init+0xda>
 8065c00:	f240 11c5 	movw	r1, #453	; 0x1c5
 8065c04:	4872      	ldr	r0, [pc, #456]	; (8065dd0 <HAL_I2C_Init+0x2a0>)
 8065c06:	f7fd fa58 	bl	80630ba <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8065c0a:	687b      	ldr	r3, [r7, #4]
 8065c0c:	69db      	ldr	r3, [r3, #28]
 8065c0e:	2b00      	cmp	r3, #0
 8065c10:	d008      	beq.n	8065c24 <HAL_I2C_Init+0xf4>
 8065c12:	687b      	ldr	r3, [r7, #4]
 8065c14:	69db      	ldr	r3, [r3, #28]
 8065c16:	2b40      	cmp	r3, #64	; 0x40
 8065c18:	d004      	beq.n	8065c24 <HAL_I2C_Init+0xf4>
 8065c1a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8065c1e:	486c      	ldr	r0, [pc, #432]	; (8065dd0 <HAL_I2C_Init+0x2a0>)
 8065c20:	f7fd fa4b 	bl	80630ba <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8065c24:	687b      	ldr	r3, [r7, #4]
 8065c26:	6a1b      	ldr	r3, [r3, #32]
 8065c28:	2b00      	cmp	r3, #0
 8065c2a:	d008      	beq.n	8065c3e <HAL_I2C_Init+0x10e>
 8065c2c:	687b      	ldr	r3, [r7, #4]
 8065c2e:	6a1b      	ldr	r3, [r3, #32]
 8065c30:	2b80      	cmp	r3, #128	; 0x80
 8065c32:	d004      	beq.n	8065c3e <HAL_I2C_Init+0x10e>
 8065c34:	f240 11c7 	movw	r1, #455	; 0x1c7
 8065c38:	4865      	ldr	r0, [pc, #404]	; (8065dd0 <HAL_I2C_Init+0x2a0>)
 8065c3a:	f7fd fa3e 	bl	80630ba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8065c3e:	687b      	ldr	r3, [r7, #4]
 8065c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8065c44:	b2db      	uxtb	r3, r3
 8065c46:	2b00      	cmp	r3, #0
 8065c48:	d106      	bne.n	8065c58 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8065c4a:	687b      	ldr	r3, [r7, #4]
 8065c4c:	2200      	movs	r2, #0
 8065c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8065c52:	6878      	ldr	r0, [r7, #4]
 8065c54:	f7fd f854 	bl	8062d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8065c58:	687b      	ldr	r3, [r7, #4]
 8065c5a:	2224      	movs	r2, #36	; 0x24
 8065c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8065c60:	687b      	ldr	r3, [r7, #4]
 8065c62:	681b      	ldr	r3, [r3, #0]
 8065c64:	681a      	ldr	r2, [r3, #0]
 8065c66:	687b      	ldr	r3, [r7, #4]
 8065c68:	681b      	ldr	r3, [r3, #0]
 8065c6a:	f022 0201 	bic.w	r2, r2, #1
 8065c6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8065c70:	687b      	ldr	r3, [r7, #4]
 8065c72:	681b      	ldr	r3, [r3, #0]
 8065c74:	681a      	ldr	r2, [r3, #0]
 8065c76:	687b      	ldr	r3, [r7, #4]
 8065c78:	681b      	ldr	r3, [r3, #0]
 8065c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8065c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8065c80:	687b      	ldr	r3, [r7, #4]
 8065c82:	681b      	ldr	r3, [r3, #0]
 8065c84:	681a      	ldr	r2, [r3, #0]
 8065c86:	687b      	ldr	r3, [r7, #4]
 8065c88:	681b      	ldr	r3, [r3, #0]
 8065c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8065c8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8065c90:	f002 f9e0 	bl	8068054 <HAL_RCC_GetPCLK1Freq>
 8065c94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8065c96:	687b      	ldr	r3, [r7, #4]
 8065c98:	685b      	ldr	r3, [r3, #4]
 8065c9a:	4a4f      	ldr	r2, [pc, #316]	; (8065dd8 <HAL_I2C_Init+0x2a8>)
 8065c9c:	4293      	cmp	r3, r2
 8065c9e:	d807      	bhi.n	8065cb0 <HAL_I2C_Init+0x180>
 8065ca0:	68fb      	ldr	r3, [r7, #12]
 8065ca2:	4a4e      	ldr	r2, [pc, #312]	; (8065ddc <HAL_I2C_Init+0x2ac>)
 8065ca4:	4293      	cmp	r3, r2
 8065ca6:	bf94      	ite	ls
 8065ca8:	2301      	movls	r3, #1
 8065caa:	2300      	movhi	r3, #0
 8065cac:	b2db      	uxtb	r3, r3
 8065cae:	e006      	b.n	8065cbe <HAL_I2C_Init+0x18e>
 8065cb0:	68fb      	ldr	r3, [r7, #12]
 8065cb2:	4a4b      	ldr	r2, [pc, #300]	; (8065de0 <HAL_I2C_Init+0x2b0>)
 8065cb4:	4293      	cmp	r3, r2
 8065cb6:	bf94      	ite	ls
 8065cb8:	2301      	movls	r3, #1
 8065cba:	2300      	movhi	r3, #0
 8065cbc:	b2db      	uxtb	r3, r3
 8065cbe:	2b00      	cmp	r3, #0
 8065cc0:	d001      	beq.n	8065cc6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8065cc2:	2301      	movs	r3, #1
 8065cc4:	e0fc      	b.n	8065ec0 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8065cc6:	68fb      	ldr	r3, [r7, #12]
 8065cc8:	4a46      	ldr	r2, [pc, #280]	; (8065de4 <HAL_I2C_Init+0x2b4>)
 8065cca:	fba2 2303 	umull	r2, r3, r2, r3
 8065cce:	0c9b      	lsrs	r3, r3, #18
 8065cd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8065cd2:	687b      	ldr	r3, [r7, #4]
 8065cd4:	681b      	ldr	r3, [r3, #0]
 8065cd6:	685b      	ldr	r3, [r3, #4]
 8065cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8065cdc:	687b      	ldr	r3, [r7, #4]
 8065cde:	681b      	ldr	r3, [r3, #0]
 8065ce0:	68ba      	ldr	r2, [r7, #8]
 8065ce2:	430a      	orrs	r2, r1
 8065ce4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8065ce6:	687b      	ldr	r3, [r7, #4]
 8065ce8:	681b      	ldr	r3, [r3, #0]
 8065cea:	6a1b      	ldr	r3, [r3, #32]
 8065cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8065cf0:	687b      	ldr	r3, [r7, #4]
 8065cf2:	685b      	ldr	r3, [r3, #4]
 8065cf4:	4a38      	ldr	r2, [pc, #224]	; (8065dd8 <HAL_I2C_Init+0x2a8>)
 8065cf6:	4293      	cmp	r3, r2
 8065cf8:	d802      	bhi.n	8065d00 <HAL_I2C_Init+0x1d0>
 8065cfa:	68bb      	ldr	r3, [r7, #8]
 8065cfc:	3301      	adds	r3, #1
 8065cfe:	e009      	b.n	8065d14 <HAL_I2C_Init+0x1e4>
 8065d00:	68bb      	ldr	r3, [r7, #8]
 8065d02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8065d06:	fb02 f303 	mul.w	r3, r2, r3
 8065d0a:	4a37      	ldr	r2, [pc, #220]	; (8065de8 <HAL_I2C_Init+0x2b8>)
 8065d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8065d10:	099b      	lsrs	r3, r3, #6
 8065d12:	3301      	adds	r3, #1
 8065d14:	687a      	ldr	r2, [r7, #4]
 8065d16:	6812      	ldr	r2, [r2, #0]
 8065d18:	430b      	orrs	r3, r1
 8065d1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8065d1c:	687b      	ldr	r3, [r7, #4]
 8065d1e:	681b      	ldr	r3, [r3, #0]
 8065d20:	69db      	ldr	r3, [r3, #28]
 8065d22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8065d26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8065d2a:	687b      	ldr	r3, [r7, #4]
 8065d2c:	685b      	ldr	r3, [r3, #4]
 8065d2e:	492a      	ldr	r1, [pc, #168]	; (8065dd8 <HAL_I2C_Init+0x2a8>)
 8065d30:	428b      	cmp	r3, r1
 8065d32:	d819      	bhi.n	8065d68 <HAL_I2C_Init+0x238>
 8065d34:	68fb      	ldr	r3, [r7, #12]
 8065d36:	1e59      	subs	r1, r3, #1
 8065d38:	687b      	ldr	r3, [r7, #4]
 8065d3a:	685b      	ldr	r3, [r3, #4]
 8065d3c:	005b      	lsls	r3, r3, #1
 8065d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8065d42:	1c59      	adds	r1, r3, #1
 8065d44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8065d48:	400b      	ands	r3, r1
 8065d4a:	2b00      	cmp	r3, #0
 8065d4c:	d00a      	beq.n	8065d64 <HAL_I2C_Init+0x234>
 8065d4e:	68fb      	ldr	r3, [r7, #12]
 8065d50:	1e59      	subs	r1, r3, #1
 8065d52:	687b      	ldr	r3, [r7, #4]
 8065d54:	685b      	ldr	r3, [r3, #4]
 8065d56:	005b      	lsls	r3, r3, #1
 8065d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8065d5c:	3301      	adds	r3, #1
 8065d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065d62:	e066      	b.n	8065e32 <HAL_I2C_Init+0x302>
 8065d64:	2304      	movs	r3, #4
 8065d66:	e064      	b.n	8065e32 <HAL_I2C_Init+0x302>
 8065d68:	687b      	ldr	r3, [r7, #4]
 8065d6a:	689b      	ldr	r3, [r3, #8]
 8065d6c:	2b00      	cmp	r3, #0
 8065d6e:	d111      	bne.n	8065d94 <HAL_I2C_Init+0x264>
 8065d70:	68fb      	ldr	r3, [r7, #12]
 8065d72:	1e58      	subs	r0, r3, #1
 8065d74:	687b      	ldr	r3, [r7, #4]
 8065d76:	6859      	ldr	r1, [r3, #4]
 8065d78:	460b      	mov	r3, r1
 8065d7a:	005b      	lsls	r3, r3, #1
 8065d7c:	440b      	add	r3, r1
 8065d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8065d82:	3301      	adds	r3, #1
 8065d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065d88:	2b00      	cmp	r3, #0
 8065d8a:	bf0c      	ite	eq
 8065d8c:	2301      	moveq	r3, #1
 8065d8e:	2300      	movne	r3, #0
 8065d90:	b2db      	uxtb	r3, r3
 8065d92:	e012      	b.n	8065dba <HAL_I2C_Init+0x28a>
 8065d94:	68fb      	ldr	r3, [r7, #12]
 8065d96:	1e58      	subs	r0, r3, #1
 8065d98:	687b      	ldr	r3, [r7, #4]
 8065d9a:	6859      	ldr	r1, [r3, #4]
 8065d9c:	460b      	mov	r3, r1
 8065d9e:	009b      	lsls	r3, r3, #2
 8065da0:	440b      	add	r3, r1
 8065da2:	0099      	lsls	r1, r3, #2
 8065da4:	440b      	add	r3, r1
 8065da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8065daa:	3301      	adds	r3, #1
 8065dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065db0:	2b00      	cmp	r3, #0
 8065db2:	bf0c      	ite	eq
 8065db4:	2301      	moveq	r3, #1
 8065db6:	2300      	movne	r3, #0
 8065db8:	b2db      	uxtb	r3, r3
 8065dba:	2b00      	cmp	r3, #0
 8065dbc:	d016      	beq.n	8065dec <HAL_I2C_Init+0x2bc>
 8065dbe:	2301      	movs	r3, #1
 8065dc0:	e037      	b.n	8065e32 <HAL_I2C_Init+0x302>
 8065dc2:	bf00      	nop
 8065dc4:	40005400 	.word	0x40005400
 8065dc8:	40005800 	.word	0x40005800
 8065dcc:	40005c00 	.word	0x40005c00
 8065dd0:	08076b3c 	.word	0x08076b3c
 8065dd4:	00061a80 	.word	0x00061a80
 8065dd8:	000186a0 	.word	0x000186a0
 8065ddc:	001e847f 	.word	0x001e847f
 8065de0:	003d08ff 	.word	0x003d08ff
 8065de4:	431bde83 	.word	0x431bde83
 8065de8:	10624dd3 	.word	0x10624dd3
 8065dec:	687b      	ldr	r3, [r7, #4]
 8065dee:	689b      	ldr	r3, [r3, #8]
 8065df0:	2b00      	cmp	r3, #0
 8065df2:	d10e      	bne.n	8065e12 <HAL_I2C_Init+0x2e2>
 8065df4:	68fb      	ldr	r3, [r7, #12]
 8065df6:	1e58      	subs	r0, r3, #1
 8065df8:	687b      	ldr	r3, [r7, #4]
 8065dfa:	6859      	ldr	r1, [r3, #4]
 8065dfc:	460b      	mov	r3, r1
 8065dfe:	005b      	lsls	r3, r3, #1
 8065e00:	440b      	add	r3, r1
 8065e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8065e06:	3301      	adds	r3, #1
 8065e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8065e10:	e00f      	b.n	8065e32 <HAL_I2C_Init+0x302>
 8065e12:	68fb      	ldr	r3, [r7, #12]
 8065e14:	1e58      	subs	r0, r3, #1
 8065e16:	687b      	ldr	r3, [r7, #4]
 8065e18:	6859      	ldr	r1, [r3, #4]
 8065e1a:	460b      	mov	r3, r1
 8065e1c:	009b      	lsls	r3, r3, #2
 8065e1e:	440b      	add	r3, r1
 8065e20:	0099      	lsls	r1, r3, #2
 8065e22:	440b      	add	r3, r1
 8065e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8065e28:	3301      	adds	r3, #1
 8065e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8065e32:	6879      	ldr	r1, [r7, #4]
 8065e34:	6809      	ldr	r1, [r1, #0]
 8065e36:	4313      	orrs	r3, r2
 8065e38:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8065e3a:	687b      	ldr	r3, [r7, #4]
 8065e3c:	681b      	ldr	r3, [r3, #0]
 8065e3e:	681b      	ldr	r3, [r3, #0]
 8065e40:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8065e44:	687b      	ldr	r3, [r7, #4]
 8065e46:	69da      	ldr	r2, [r3, #28]
 8065e48:	687b      	ldr	r3, [r7, #4]
 8065e4a:	6a1b      	ldr	r3, [r3, #32]
 8065e4c:	431a      	orrs	r2, r3
 8065e4e:	687b      	ldr	r3, [r7, #4]
 8065e50:	681b      	ldr	r3, [r3, #0]
 8065e52:	430a      	orrs	r2, r1
 8065e54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8065e56:	687b      	ldr	r3, [r7, #4]
 8065e58:	681b      	ldr	r3, [r3, #0]
 8065e5a:	689b      	ldr	r3, [r3, #8]
 8065e5c:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8065e60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8065e64:	687a      	ldr	r2, [r7, #4]
 8065e66:	6911      	ldr	r1, [r2, #16]
 8065e68:	687a      	ldr	r2, [r7, #4]
 8065e6a:	68d2      	ldr	r2, [r2, #12]
 8065e6c:	4311      	orrs	r1, r2
 8065e6e:	687a      	ldr	r2, [r7, #4]
 8065e70:	6812      	ldr	r2, [r2, #0]
 8065e72:	430b      	orrs	r3, r1
 8065e74:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8065e76:	687b      	ldr	r3, [r7, #4]
 8065e78:	681b      	ldr	r3, [r3, #0]
 8065e7a:	68db      	ldr	r3, [r3, #12]
 8065e7c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8065e80:	687b      	ldr	r3, [r7, #4]
 8065e82:	695a      	ldr	r2, [r3, #20]
 8065e84:	687b      	ldr	r3, [r7, #4]
 8065e86:	699b      	ldr	r3, [r3, #24]
 8065e88:	431a      	orrs	r2, r3
 8065e8a:	687b      	ldr	r3, [r7, #4]
 8065e8c:	681b      	ldr	r3, [r3, #0]
 8065e8e:	430a      	orrs	r2, r1
 8065e90:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8065e92:	687b      	ldr	r3, [r7, #4]
 8065e94:	681b      	ldr	r3, [r3, #0]
 8065e96:	681a      	ldr	r2, [r3, #0]
 8065e98:	687b      	ldr	r3, [r7, #4]
 8065e9a:	681b      	ldr	r3, [r3, #0]
 8065e9c:	f042 0201 	orr.w	r2, r2, #1
 8065ea0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8065ea2:	687b      	ldr	r3, [r7, #4]
 8065ea4:	2200      	movs	r2, #0
 8065ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8065ea8:	687b      	ldr	r3, [r7, #4]
 8065eaa:	2220      	movs	r2, #32
 8065eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8065eb0:	687b      	ldr	r3, [r7, #4]
 8065eb2:	2200      	movs	r2, #0
 8065eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8065eb6:	687b      	ldr	r3, [r7, #4]
 8065eb8:	2200      	movs	r2, #0
 8065eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8065ebe:	2300      	movs	r3, #0
}
 8065ec0:	4618      	mov	r0, r3
 8065ec2:	3710      	adds	r7, #16
 8065ec4:	46bd      	mov	sp, r7
 8065ec6:	bd80      	pop	{r7, pc}

08065ec8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8065ec8:	b580      	push	{r7, lr}
 8065eca:	b088      	sub	sp, #32
 8065ecc:	af02      	add	r7, sp, #8
 8065ece:	60f8      	str	r0, [r7, #12]
 8065ed0:	607a      	str	r2, [r7, #4]
 8065ed2:	461a      	mov	r2, r3
 8065ed4:	460b      	mov	r3, r1
 8065ed6:	817b      	strh	r3, [r7, #10]
 8065ed8:	4613      	mov	r3, r2
 8065eda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8065edc:	f7fd fd66 	bl	80639ac <HAL_GetTick>
 8065ee0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8065ee2:	68fb      	ldr	r3, [r7, #12]
 8065ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8065ee8:	b2db      	uxtb	r3, r3
 8065eea:	2b20      	cmp	r3, #32
 8065eec:	f040 80e0 	bne.w	80660b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8065ef0:	697b      	ldr	r3, [r7, #20]
 8065ef2:	9300      	str	r3, [sp, #0]
 8065ef4:	2319      	movs	r3, #25
 8065ef6:	2201      	movs	r2, #1
 8065ef8:	4970      	ldr	r1, [pc, #448]	; (80660bc <HAL_I2C_Master_Transmit+0x1f4>)
 8065efa:	68f8      	ldr	r0, [r7, #12]
 8065efc:	f001 f928 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 8065f00:	4603      	mov	r3, r0
 8065f02:	2b00      	cmp	r3, #0
 8065f04:	d001      	beq.n	8065f0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8065f06:	2302      	movs	r3, #2
 8065f08:	e0d3      	b.n	80660b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8065f0a:	68fb      	ldr	r3, [r7, #12]
 8065f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8065f10:	2b01      	cmp	r3, #1
 8065f12:	d101      	bne.n	8065f18 <HAL_I2C_Master_Transmit+0x50>
 8065f14:	2302      	movs	r3, #2
 8065f16:	e0cc      	b.n	80660b2 <HAL_I2C_Master_Transmit+0x1ea>
 8065f18:	68fb      	ldr	r3, [r7, #12]
 8065f1a:	2201      	movs	r2, #1
 8065f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8065f20:	68fb      	ldr	r3, [r7, #12]
 8065f22:	681b      	ldr	r3, [r3, #0]
 8065f24:	681b      	ldr	r3, [r3, #0]
 8065f26:	f003 0301 	and.w	r3, r3, #1
 8065f2a:	2b01      	cmp	r3, #1
 8065f2c:	d007      	beq.n	8065f3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8065f2e:	68fb      	ldr	r3, [r7, #12]
 8065f30:	681b      	ldr	r3, [r3, #0]
 8065f32:	681a      	ldr	r2, [r3, #0]
 8065f34:	68fb      	ldr	r3, [r7, #12]
 8065f36:	681b      	ldr	r3, [r3, #0]
 8065f38:	f042 0201 	orr.w	r2, r2, #1
 8065f3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8065f3e:	68fb      	ldr	r3, [r7, #12]
 8065f40:	681b      	ldr	r3, [r3, #0]
 8065f42:	681a      	ldr	r2, [r3, #0]
 8065f44:	68fb      	ldr	r3, [r7, #12]
 8065f46:	681b      	ldr	r3, [r3, #0]
 8065f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8065f4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8065f4e:	68fb      	ldr	r3, [r7, #12]
 8065f50:	2221      	movs	r2, #33	; 0x21
 8065f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8065f56:	68fb      	ldr	r3, [r7, #12]
 8065f58:	2210      	movs	r2, #16
 8065f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8065f5e:	68fb      	ldr	r3, [r7, #12]
 8065f60:	2200      	movs	r2, #0
 8065f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8065f64:	68fb      	ldr	r3, [r7, #12]
 8065f66:	687a      	ldr	r2, [r7, #4]
 8065f68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8065f6a:	68fb      	ldr	r3, [r7, #12]
 8065f6c:	893a      	ldrh	r2, [r7, #8]
 8065f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8065f70:	68fb      	ldr	r3, [r7, #12]
 8065f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8065f74:	b29a      	uxth	r2, r3
 8065f76:	68fb      	ldr	r3, [r7, #12]
 8065f78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8065f7a:	68fb      	ldr	r3, [r7, #12]
 8065f7c:	4a50      	ldr	r2, [pc, #320]	; (80660c0 <HAL_I2C_Master_Transmit+0x1f8>)
 8065f7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8065f80:	8979      	ldrh	r1, [r7, #10]
 8065f82:	697b      	ldr	r3, [r7, #20]
 8065f84:	6a3a      	ldr	r2, [r7, #32]
 8065f86:	68f8      	ldr	r0, [r7, #12]
 8065f88:	f000 fe14 	bl	8066bb4 <I2C_MasterRequestWrite>
 8065f8c:	4603      	mov	r3, r0
 8065f8e:	2b00      	cmp	r3, #0
 8065f90:	d001      	beq.n	8065f96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8065f92:	2301      	movs	r3, #1
 8065f94:	e08d      	b.n	80660b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8065f96:	2300      	movs	r3, #0
 8065f98:	613b      	str	r3, [r7, #16]
 8065f9a:	68fb      	ldr	r3, [r7, #12]
 8065f9c:	681b      	ldr	r3, [r3, #0]
 8065f9e:	695b      	ldr	r3, [r3, #20]
 8065fa0:	613b      	str	r3, [r7, #16]
 8065fa2:	68fb      	ldr	r3, [r7, #12]
 8065fa4:	681b      	ldr	r3, [r3, #0]
 8065fa6:	699b      	ldr	r3, [r3, #24]
 8065fa8:	613b      	str	r3, [r7, #16]
 8065faa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8065fac:	e066      	b.n	806607c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8065fae:	697a      	ldr	r2, [r7, #20]
 8065fb0:	6a39      	ldr	r1, [r7, #32]
 8065fb2:	68f8      	ldr	r0, [r7, #12]
 8065fb4:	f001 f9a2 	bl	80672fc <I2C_WaitOnTXEFlagUntilTimeout>
 8065fb8:	4603      	mov	r3, r0
 8065fba:	2b00      	cmp	r3, #0
 8065fbc:	d00d      	beq.n	8065fda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8065fbe:	68fb      	ldr	r3, [r7, #12]
 8065fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8065fc2:	2b04      	cmp	r3, #4
 8065fc4:	d107      	bne.n	8065fd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8065fc6:	68fb      	ldr	r3, [r7, #12]
 8065fc8:	681b      	ldr	r3, [r3, #0]
 8065fca:	681a      	ldr	r2, [r3, #0]
 8065fcc:	68fb      	ldr	r3, [r7, #12]
 8065fce:	681b      	ldr	r3, [r3, #0]
 8065fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8065fd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8065fd6:	2301      	movs	r3, #1
 8065fd8:	e06b      	b.n	80660b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8065fda:	68fb      	ldr	r3, [r7, #12]
 8065fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8065fde:	781a      	ldrb	r2, [r3, #0]
 8065fe0:	68fb      	ldr	r3, [r7, #12]
 8065fe2:	681b      	ldr	r3, [r3, #0]
 8065fe4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8065fe6:	68fb      	ldr	r3, [r7, #12]
 8065fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8065fea:	1c5a      	adds	r2, r3, #1
 8065fec:	68fb      	ldr	r3, [r7, #12]
 8065fee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8065ff0:	68fb      	ldr	r3, [r7, #12]
 8065ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8065ff4:	b29b      	uxth	r3, r3
 8065ff6:	3b01      	subs	r3, #1
 8065ff8:	b29a      	uxth	r2, r3
 8065ffa:	68fb      	ldr	r3, [r7, #12]
 8065ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8065ffe:	68fb      	ldr	r3, [r7, #12]
 8066000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066002:	3b01      	subs	r3, #1
 8066004:	b29a      	uxth	r2, r3
 8066006:	68fb      	ldr	r3, [r7, #12]
 8066008:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 806600a:	68fb      	ldr	r3, [r7, #12]
 806600c:	681b      	ldr	r3, [r3, #0]
 806600e:	695b      	ldr	r3, [r3, #20]
 8066010:	f003 0304 	and.w	r3, r3, #4
 8066014:	2b04      	cmp	r3, #4
 8066016:	d11b      	bne.n	8066050 <HAL_I2C_Master_Transmit+0x188>
 8066018:	68fb      	ldr	r3, [r7, #12]
 806601a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806601c:	2b00      	cmp	r3, #0
 806601e:	d017      	beq.n	8066050 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8066020:	68fb      	ldr	r3, [r7, #12]
 8066022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066024:	781a      	ldrb	r2, [r3, #0]
 8066026:	68fb      	ldr	r3, [r7, #12]
 8066028:	681b      	ldr	r3, [r3, #0]
 806602a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 806602c:	68fb      	ldr	r3, [r7, #12]
 806602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066030:	1c5a      	adds	r2, r3, #1
 8066032:	68fb      	ldr	r3, [r7, #12]
 8066034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8066036:	68fb      	ldr	r3, [r7, #12]
 8066038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806603a:	b29b      	uxth	r3, r3
 806603c:	3b01      	subs	r3, #1
 806603e:	b29a      	uxth	r2, r3
 8066040:	68fb      	ldr	r3, [r7, #12]
 8066042:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8066044:	68fb      	ldr	r3, [r7, #12]
 8066046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066048:	3b01      	subs	r3, #1
 806604a:	b29a      	uxth	r2, r3
 806604c:	68fb      	ldr	r3, [r7, #12]
 806604e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066050:	697a      	ldr	r2, [r7, #20]
 8066052:	6a39      	ldr	r1, [r7, #32]
 8066054:	68f8      	ldr	r0, [r7, #12]
 8066056:	f001 f992 	bl	806737e <I2C_WaitOnBTFFlagUntilTimeout>
 806605a:	4603      	mov	r3, r0
 806605c:	2b00      	cmp	r3, #0
 806605e:	d00d      	beq.n	806607c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066060:	68fb      	ldr	r3, [r7, #12]
 8066062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8066064:	2b04      	cmp	r3, #4
 8066066:	d107      	bne.n	8066078 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066068:	68fb      	ldr	r3, [r7, #12]
 806606a:	681b      	ldr	r3, [r3, #0]
 806606c:	681a      	ldr	r2, [r3, #0]
 806606e:	68fb      	ldr	r3, [r7, #12]
 8066070:	681b      	ldr	r3, [r3, #0]
 8066072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066076:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8066078:	2301      	movs	r3, #1
 806607a:	e01a      	b.n	80660b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 806607c:	68fb      	ldr	r3, [r7, #12]
 806607e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066080:	2b00      	cmp	r3, #0
 8066082:	d194      	bne.n	8065fae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066084:	68fb      	ldr	r3, [r7, #12]
 8066086:	681b      	ldr	r3, [r3, #0]
 8066088:	681a      	ldr	r2, [r3, #0]
 806608a:	68fb      	ldr	r3, [r7, #12]
 806608c:	681b      	ldr	r3, [r3, #0]
 806608e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8066094:	68fb      	ldr	r3, [r7, #12]
 8066096:	2220      	movs	r2, #32
 8066098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 806609c:	68fb      	ldr	r3, [r7, #12]
 806609e:	2200      	movs	r2, #0
 80660a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80660a4:	68fb      	ldr	r3, [r7, #12]
 80660a6:	2200      	movs	r2, #0
 80660a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80660ac:	2300      	movs	r3, #0
 80660ae:	e000      	b.n	80660b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80660b0:	2302      	movs	r3, #2
  }
}
 80660b2:	4618      	mov	r0, r3
 80660b4:	3718      	adds	r7, #24
 80660b6:	46bd      	mov	sp, r7
 80660b8:	bd80      	pop	{r7, pc}
 80660ba:	bf00      	nop
 80660bc:	00100002 	.word	0x00100002
 80660c0:	ffff0000 	.word	0xffff0000

080660c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80660c4:	b580      	push	{r7, lr}
 80660c6:	b08c      	sub	sp, #48	; 0x30
 80660c8:	af02      	add	r7, sp, #8
 80660ca:	60f8      	str	r0, [r7, #12]
 80660cc:	607a      	str	r2, [r7, #4]
 80660ce:	461a      	mov	r2, r3
 80660d0:	460b      	mov	r3, r1
 80660d2:	817b      	strh	r3, [r7, #10]
 80660d4:	4613      	mov	r3, r2
 80660d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80660d8:	f7fd fc68 	bl	80639ac <HAL_GetTick>
 80660dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80660de:	68fb      	ldr	r3, [r7, #12]
 80660e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80660e4:	b2db      	uxtb	r3, r3
 80660e6:	2b20      	cmp	r3, #32
 80660e8:	f040 820b 	bne.w	8066502 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80660ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80660ee:	9300      	str	r3, [sp, #0]
 80660f0:	2319      	movs	r3, #25
 80660f2:	2201      	movs	r2, #1
 80660f4:	497c      	ldr	r1, [pc, #496]	; (80662e8 <HAL_I2C_Master_Receive+0x224>)
 80660f6:	68f8      	ldr	r0, [r7, #12]
 80660f8:	f001 f82a 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 80660fc:	4603      	mov	r3, r0
 80660fe:	2b00      	cmp	r3, #0
 8066100:	d001      	beq.n	8066106 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8066102:	2302      	movs	r3, #2
 8066104:	e1fe      	b.n	8066504 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8066106:	68fb      	ldr	r3, [r7, #12]
 8066108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 806610c:	2b01      	cmp	r3, #1
 806610e:	d101      	bne.n	8066114 <HAL_I2C_Master_Receive+0x50>
 8066110:	2302      	movs	r3, #2
 8066112:	e1f7      	b.n	8066504 <HAL_I2C_Master_Receive+0x440>
 8066114:	68fb      	ldr	r3, [r7, #12]
 8066116:	2201      	movs	r2, #1
 8066118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 806611c:	68fb      	ldr	r3, [r7, #12]
 806611e:	681b      	ldr	r3, [r3, #0]
 8066120:	681b      	ldr	r3, [r3, #0]
 8066122:	f003 0301 	and.w	r3, r3, #1
 8066126:	2b01      	cmp	r3, #1
 8066128:	d007      	beq.n	806613a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 806612a:	68fb      	ldr	r3, [r7, #12]
 806612c:	681b      	ldr	r3, [r3, #0]
 806612e:	681a      	ldr	r2, [r3, #0]
 8066130:	68fb      	ldr	r3, [r7, #12]
 8066132:	681b      	ldr	r3, [r3, #0]
 8066134:	f042 0201 	orr.w	r2, r2, #1
 8066138:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 806613a:	68fb      	ldr	r3, [r7, #12]
 806613c:	681b      	ldr	r3, [r3, #0]
 806613e:	681a      	ldr	r2, [r3, #0]
 8066140:	68fb      	ldr	r3, [r7, #12]
 8066142:	681b      	ldr	r3, [r3, #0]
 8066144:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8066148:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 806614a:	68fb      	ldr	r3, [r7, #12]
 806614c:	2222      	movs	r2, #34	; 0x22
 806614e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8066152:	68fb      	ldr	r3, [r7, #12]
 8066154:	2210      	movs	r2, #16
 8066156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 806615a:	68fb      	ldr	r3, [r7, #12]
 806615c:	2200      	movs	r2, #0
 806615e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8066160:	68fb      	ldr	r3, [r7, #12]
 8066162:	687a      	ldr	r2, [r7, #4]
 8066164:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8066166:	68fb      	ldr	r3, [r7, #12]
 8066168:	893a      	ldrh	r2, [r7, #8]
 806616a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 806616c:	68fb      	ldr	r3, [r7, #12]
 806616e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066170:	b29a      	uxth	r2, r3
 8066172:	68fb      	ldr	r3, [r7, #12]
 8066174:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8066176:	68fb      	ldr	r3, [r7, #12]
 8066178:	4a5c      	ldr	r2, [pc, #368]	; (80662ec <HAL_I2C_Master_Receive+0x228>)
 806617a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 806617c:	8979      	ldrh	r1, [r7, #10]
 806617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8066182:	68f8      	ldr	r0, [r7, #12]
 8066184:	f000 fd98 	bl	8066cb8 <I2C_MasterRequestRead>
 8066188:	4603      	mov	r3, r0
 806618a:	2b00      	cmp	r3, #0
 806618c:	d001      	beq.n	8066192 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 806618e:	2301      	movs	r3, #1
 8066190:	e1b8      	b.n	8066504 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8066192:	68fb      	ldr	r3, [r7, #12]
 8066194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066196:	2b00      	cmp	r3, #0
 8066198:	d113      	bne.n	80661c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 806619a:	2300      	movs	r3, #0
 806619c:	623b      	str	r3, [r7, #32]
 806619e:	68fb      	ldr	r3, [r7, #12]
 80661a0:	681b      	ldr	r3, [r3, #0]
 80661a2:	695b      	ldr	r3, [r3, #20]
 80661a4:	623b      	str	r3, [r7, #32]
 80661a6:	68fb      	ldr	r3, [r7, #12]
 80661a8:	681b      	ldr	r3, [r3, #0]
 80661aa:	699b      	ldr	r3, [r3, #24]
 80661ac:	623b      	str	r3, [r7, #32]
 80661ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80661b0:	68fb      	ldr	r3, [r7, #12]
 80661b2:	681b      	ldr	r3, [r3, #0]
 80661b4:	681a      	ldr	r2, [r3, #0]
 80661b6:	68fb      	ldr	r3, [r7, #12]
 80661b8:	681b      	ldr	r3, [r3, #0]
 80661ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80661be:	601a      	str	r2, [r3, #0]
 80661c0:	e18c      	b.n	80664dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80661c2:	68fb      	ldr	r3, [r7, #12]
 80661c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80661c6:	2b01      	cmp	r3, #1
 80661c8:	d11b      	bne.n	8066202 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80661ca:	68fb      	ldr	r3, [r7, #12]
 80661cc:	681b      	ldr	r3, [r3, #0]
 80661ce:	681a      	ldr	r2, [r3, #0]
 80661d0:	68fb      	ldr	r3, [r7, #12]
 80661d2:	681b      	ldr	r3, [r3, #0]
 80661d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80661d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80661da:	2300      	movs	r3, #0
 80661dc:	61fb      	str	r3, [r7, #28]
 80661de:	68fb      	ldr	r3, [r7, #12]
 80661e0:	681b      	ldr	r3, [r3, #0]
 80661e2:	695b      	ldr	r3, [r3, #20]
 80661e4:	61fb      	str	r3, [r7, #28]
 80661e6:	68fb      	ldr	r3, [r7, #12]
 80661e8:	681b      	ldr	r3, [r3, #0]
 80661ea:	699b      	ldr	r3, [r3, #24]
 80661ec:	61fb      	str	r3, [r7, #28]
 80661ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80661f0:	68fb      	ldr	r3, [r7, #12]
 80661f2:	681b      	ldr	r3, [r3, #0]
 80661f4:	681a      	ldr	r2, [r3, #0]
 80661f6:	68fb      	ldr	r3, [r7, #12]
 80661f8:	681b      	ldr	r3, [r3, #0]
 80661fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80661fe:	601a      	str	r2, [r3, #0]
 8066200:	e16c      	b.n	80664dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8066202:	68fb      	ldr	r3, [r7, #12]
 8066204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066206:	2b02      	cmp	r3, #2
 8066208:	d11b      	bne.n	8066242 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 806620a:	68fb      	ldr	r3, [r7, #12]
 806620c:	681b      	ldr	r3, [r3, #0]
 806620e:	681a      	ldr	r2, [r3, #0]
 8066210:	68fb      	ldr	r3, [r7, #12]
 8066212:	681b      	ldr	r3, [r3, #0]
 8066214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8066218:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 806621a:	68fb      	ldr	r3, [r7, #12]
 806621c:	681b      	ldr	r3, [r3, #0]
 806621e:	681a      	ldr	r2, [r3, #0]
 8066220:	68fb      	ldr	r3, [r7, #12]
 8066222:	681b      	ldr	r3, [r3, #0]
 8066224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8066228:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 806622a:	2300      	movs	r3, #0
 806622c:	61bb      	str	r3, [r7, #24]
 806622e:	68fb      	ldr	r3, [r7, #12]
 8066230:	681b      	ldr	r3, [r3, #0]
 8066232:	695b      	ldr	r3, [r3, #20]
 8066234:	61bb      	str	r3, [r7, #24]
 8066236:	68fb      	ldr	r3, [r7, #12]
 8066238:	681b      	ldr	r3, [r3, #0]
 806623a:	699b      	ldr	r3, [r3, #24]
 806623c:	61bb      	str	r3, [r7, #24]
 806623e:	69bb      	ldr	r3, [r7, #24]
 8066240:	e14c      	b.n	80664dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066242:	68fb      	ldr	r3, [r7, #12]
 8066244:	681b      	ldr	r3, [r3, #0]
 8066246:	681a      	ldr	r2, [r3, #0]
 8066248:	68fb      	ldr	r3, [r7, #12]
 806624a:	681b      	ldr	r3, [r3, #0]
 806624c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8066250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066252:	2300      	movs	r3, #0
 8066254:	617b      	str	r3, [r7, #20]
 8066256:	68fb      	ldr	r3, [r7, #12]
 8066258:	681b      	ldr	r3, [r3, #0]
 806625a:	695b      	ldr	r3, [r3, #20]
 806625c:	617b      	str	r3, [r7, #20]
 806625e:	68fb      	ldr	r3, [r7, #12]
 8066260:	681b      	ldr	r3, [r3, #0]
 8066262:	699b      	ldr	r3, [r3, #24]
 8066264:	617b      	str	r3, [r7, #20]
 8066266:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8066268:	e138      	b.n	80664dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 806626a:	68fb      	ldr	r3, [r7, #12]
 806626c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806626e:	2b03      	cmp	r3, #3
 8066270:	f200 80f1 	bhi.w	8066456 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8066274:	68fb      	ldr	r3, [r7, #12]
 8066276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066278:	2b01      	cmp	r3, #1
 806627a:	d123      	bne.n	80662c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 806627c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806627e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8066280:	68f8      	ldr	r0, [r7, #12]
 8066282:	f001 f8bd 	bl	8067400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8066286:	4603      	mov	r3, r0
 8066288:	2b00      	cmp	r3, #0
 806628a:	d001      	beq.n	8066290 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 806628c:	2301      	movs	r3, #1
 806628e:	e139      	b.n	8066504 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066290:	68fb      	ldr	r3, [r7, #12]
 8066292:	681b      	ldr	r3, [r3, #0]
 8066294:	691a      	ldr	r2, [r3, #16]
 8066296:	68fb      	ldr	r3, [r7, #12]
 8066298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806629a:	b2d2      	uxtb	r2, r2
 806629c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 806629e:	68fb      	ldr	r3, [r7, #12]
 80662a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80662a2:	1c5a      	adds	r2, r3, #1
 80662a4:	68fb      	ldr	r3, [r7, #12]
 80662a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80662a8:	68fb      	ldr	r3, [r7, #12]
 80662aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80662ac:	3b01      	subs	r3, #1
 80662ae:	b29a      	uxth	r2, r3
 80662b0:	68fb      	ldr	r3, [r7, #12]
 80662b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80662b4:	68fb      	ldr	r3, [r7, #12]
 80662b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80662b8:	b29b      	uxth	r3, r3
 80662ba:	3b01      	subs	r3, #1
 80662bc:	b29a      	uxth	r2, r3
 80662be:	68fb      	ldr	r3, [r7, #12]
 80662c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80662c2:	e10b      	b.n	80664dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80662c4:	68fb      	ldr	r3, [r7, #12]
 80662c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80662c8:	2b02      	cmp	r3, #2
 80662ca:	d14e      	bne.n	806636a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80662cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80662ce:	9300      	str	r3, [sp, #0]
 80662d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80662d2:	2200      	movs	r2, #0
 80662d4:	4906      	ldr	r1, [pc, #24]	; (80662f0 <HAL_I2C_Master_Receive+0x22c>)
 80662d6:	68f8      	ldr	r0, [r7, #12]
 80662d8:	f000 ff3a 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 80662dc:	4603      	mov	r3, r0
 80662de:	2b00      	cmp	r3, #0
 80662e0:	d008      	beq.n	80662f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80662e2:	2301      	movs	r3, #1
 80662e4:	e10e      	b.n	8066504 <HAL_I2C_Master_Receive+0x440>
 80662e6:	bf00      	nop
 80662e8:	00100002 	.word	0x00100002
 80662ec:	ffff0000 	.word	0xffff0000
 80662f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80662f4:	68fb      	ldr	r3, [r7, #12]
 80662f6:	681b      	ldr	r3, [r3, #0]
 80662f8:	681a      	ldr	r2, [r3, #0]
 80662fa:	68fb      	ldr	r3, [r7, #12]
 80662fc:	681b      	ldr	r3, [r3, #0]
 80662fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066304:	68fb      	ldr	r3, [r7, #12]
 8066306:	681b      	ldr	r3, [r3, #0]
 8066308:	691a      	ldr	r2, [r3, #16]
 806630a:	68fb      	ldr	r3, [r7, #12]
 806630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806630e:	b2d2      	uxtb	r2, r2
 8066310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066312:	68fb      	ldr	r3, [r7, #12]
 8066314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066316:	1c5a      	adds	r2, r3, #1
 8066318:	68fb      	ldr	r3, [r7, #12]
 806631a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 806631c:	68fb      	ldr	r3, [r7, #12]
 806631e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066320:	3b01      	subs	r3, #1
 8066322:	b29a      	uxth	r2, r3
 8066324:	68fb      	ldr	r3, [r7, #12]
 8066326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066328:	68fb      	ldr	r3, [r7, #12]
 806632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806632c:	b29b      	uxth	r3, r3
 806632e:	3b01      	subs	r3, #1
 8066330:	b29a      	uxth	r2, r3
 8066332:	68fb      	ldr	r3, [r7, #12]
 8066334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066336:	68fb      	ldr	r3, [r7, #12]
 8066338:	681b      	ldr	r3, [r3, #0]
 806633a:	691a      	ldr	r2, [r3, #16]
 806633c:	68fb      	ldr	r3, [r7, #12]
 806633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066340:	b2d2      	uxtb	r2, r2
 8066342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066344:	68fb      	ldr	r3, [r7, #12]
 8066346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066348:	1c5a      	adds	r2, r3, #1
 806634a:	68fb      	ldr	r3, [r7, #12]
 806634c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 806634e:	68fb      	ldr	r3, [r7, #12]
 8066350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066352:	3b01      	subs	r3, #1
 8066354:	b29a      	uxth	r2, r3
 8066356:	68fb      	ldr	r3, [r7, #12]
 8066358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 806635a:	68fb      	ldr	r3, [r7, #12]
 806635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806635e:	b29b      	uxth	r3, r3
 8066360:	3b01      	subs	r3, #1
 8066362:	b29a      	uxth	r2, r3
 8066364:	68fb      	ldr	r3, [r7, #12]
 8066366:	855a      	strh	r2, [r3, #42]	; 0x2a
 8066368:	e0b8      	b.n	80664dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 806636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806636c:	9300      	str	r3, [sp, #0]
 806636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8066370:	2200      	movs	r2, #0
 8066372:	4966      	ldr	r1, [pc, #408]	; (806650c <HAL_I2C_Master_Receive+0x448>)
 8066374:	68f8      	ldr	r0, [r7, #12]
 8066376:	f000 feeb 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 806637a:	4603      	mov	r3, r0
 806637c:	2b00      	cmp	r3, #0
 806637e:	d001      	beq.n	8066384 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8066380:	2301      	movs	r3, #1
 8066382:	e0bf      	b.n	8066504 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066384:	68fb      	ldr	r3, [r7, #12]
 8066386:	681b      	ldr	r3, [r3, #0]
 8066388:	681a      	ldr	r2, [r3, #0]
 806638a:	68fb      	ldr	r3, [r7, #12]
 806638c:	681b      	ldr	r3, [r3, #0]
 806638e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8066392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066394:	68fb      	ldr	r3, [r7, #12]
 8066396:	681b      	ldr	r3, [r3, #0]
 8066398:	691a      	ldr	r2, [r3, #16]
 806639a:	68fb      	ldr	r3, [r7, #12]
 806639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806639e:	b2d2      	uxtb	r2, r2
 80663a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80663a2:	68fb      	ldr	r3, [r7, #12]
 80663a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80663a6:	1c5a      	adds	r2, r3, #1
 80663a8:	68fb      	ldr	r3, [r7, #12]
 80663aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80663ac:	68fb      	ldr	r3, [r7, #12]
 80663ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80663b0:	3b01      	subs	r3, #1
 80663b2:	b29a      	uxth	r2, r3
 80663b4:	68fb      	ldr	r3, [r7, #12]
 80663b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80663b8:	68fb      	ldr	r3, [r7, #12]
 80663ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80663bc:	b29b      	uxth	r3, r3
 80663be:	3b01      	subs	r3, #1
 80663c0:	b29a      	uxth	r2, r3
 80663c2:	68fb      	ldr	r3, [r7, #12]
 80663c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80663c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80663c8:	9300      	str	r3, [sp, #0]
 80663ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80663cc:	2200      	movs	r2, #0
 80663ce:	494f      	ldr	r1, [pc, #316]	; (806650c <HAL_I2C_Master_Receive+0x448>)
 80663d0:	68f8      	ldr	r0, [r7, #12]
 80663d2:	f000 febd 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 80663d6:	4603      	mov	r3, r0
 80663d8:	2b00      	cmp	r3, #0
 80663da:	d001      	beq.n	80663e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80663dc:	2301      	movs	r3, #1
 80663de:	e091      	b.n	8066504 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80663e0:	68fb      	ldr	r3, [r7, #12]
 80663e2:	681b      	ldr	r3, [r3, #0]
 80663e4:	681a      	ldr	r2, [r3, #0]
 80663e6:	68fb      	ldr	r3, [r7, #12]
 80663e8:	681b      	ldr	r3, [r3, #0]
 80663ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80663ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80663f0:	68fb      	ldr	r3, [r7, #12]
 80663f2:	681b      	ldr	r3, [r3, #0]
 80663f4:	691a      	ldr	r2, [r3, #16]
 80663f6:	68fb      	ldr	r3, [r7, #12]
 80663f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80663fa:	b2d2      	uxtb	r2, r2
 80663fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80663fe:	68fb      	ldr	r3, [r7, #12]
 8066400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066402:	1c5a      	adds	r2, r3, #1
 8066404:	68fb      	ldr	r3, [r7, #12]
 8066406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066408:	68fb      	ldr	r3, [r7, #12]
 806640a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806640c:	3b01      	subs	r3, #1
 806640e:	b29a      	uxth	r2, r3
 8066410:	68fb      	ldr	r3, [r7, #12]
 8066412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066414:	68fb      	ldr	r3, [r7, #12]
 8066416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066418:	b29b      	uxth	r3, r3
 806641a:	3b01      	subs	r3, #1
 806641c:	b29a      	uxth	r2, r3
 806641e:	68fb      	ldr	r3, [r7, #12]
 8066420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066422:	68fb      	ldr	r3, [r7, #12]
 8066424:	681b      	ldr	r3, [r3, #0]
 8066426:	691a      	ldr	r2, [r3, #16]
 8066428:	68fb      	ldr	r3, [r7, #12]
 806642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806642c:	b2d2      	uxtb	r2, r2
 806642e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066430:	68fb      	ldr	r3, [r7, #12]
 8066432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066434:	1c5a      	adds	r2, r3, #1
 8066436:	68fb      	ldr	r3, [r7, #12]
 8066438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 806643a:	68fb      	ldr	r3, [r7, #12]
 806643c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806643e:	3b01      	subs	r3, #1
 8066440:	b29a      	uxth	r2, r3
 8066442:	68fb      	ldr	r3, [r7, #12]
 8066444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066446:	68fb      	ldr	r3, [r7, #12]
 8066448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806644a:	b29b      	uxth	r3, r3
 806644c:	3b01      	subs	r3, #1
 806644e:	b29a      	uxth	r2, r3
 8066450:	68fb      	ldr	r3, [r7, #12]
 8066452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8066454:	e042      	b.n	80664dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 806645a:	68f8      	ldr	r0, [r7, #12]
 806645c:	f000 ffd0 	bl	8067400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8066460:	4603      	mov	r3, r0
 8066462:	2b00      	cmp	r3, #0
 8066464:	d001      	beq.n	806646a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8066466:	2301      	movs	r3, #1
 8066468:	e04c      	b.n	8066504 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 806646a:	68fb      	ldr	r3, [r7, #12]
 806646c:	681b      	ldr	r3, [r3, #0]
 806646e:	691a      	ldr	r2, [r3, #16]
 8066470:	68fb      	ldr	r3, [r7, #12]
 8066472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066474:	b2d2      	uxtb	r2, r2
 8066476:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8066478:	68fb      	ldr	r3, [r7, #12]
 806647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806647c:	1c5a      	adds	r2, r3, #1
 806647e:	68fb      	ldr	r3, [r7, #12]
 8066480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8066482:	68fb      	ldr	r3, [r7, #12]
 8066484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066486:	3b01      	subs	r3, #1
 8066488:	b29a      	uxth	r2, r3
 806648a:	68fb      	ldr	r3, [r7, #12]
 806648c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 806648e:	68fb      	ldr	r3, [r7, #12]
 8066490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066492:	b29b      	uxth	r3, r3
 8066494:	3b01      	subs	r3, #1
 8066496:	b29a      	uxth	r2, r3
 8066498:	68fb      	ldr	r3, [r7, #12]
 806649a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 806649c:	68fb      	ldr	r3, [r7, #12]
 806649e:	681b      	ldr	r3, [r3, #0]
 80664a0:	695b      	ldr	r3, [r3, #20]
 80664a2:	f003 0304 	and.w	r3, r3, #4
 80664a6:	2b04      	cmp	r3, #4
 80664a8:	d118      	bne.n	80664dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80664aa:	68fb      	ldr	r3, [r7, #12]
 80664ac:	681b      	ldr	r3, [r3, #0]
 80664ae:	691a      	ldr	r2, [r3, #16]
 80664b0:	68fb      	ldr	r3, [r7, #12]
 80664b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80664b4:	b2d2      	uxtb	r2, r2
 80664b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80664b8:	68fb      	ldr	r3, [r7, #12]
 80664ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80664bc:	1c5a      	adds	r2, r3, #1
 80664be:	68fb      	ldr	r3, [r7, #12]
 80664c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80664c2:	68fb      	ldr	r3, [r7, #12]
 80664c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80664c6:	3b01      	subs	r3, #1
 80664c8:	b29a      	uxth	r2, r3
 80664ca:	68fb      	ldr	r3, [r7, #12]
 80664cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80664ce:	68fb      	ldr	r3, [r7, #12]
 80664d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80664d2:	b29b      	uxth	r3, r3
 80664d4:	3b01      	subs	r3, #1
 80664d6:	b29a      	uxth	r2, r3
 80664d8:	68fb      	ldr	r3, [r7, #12]
 80664da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80664dc:	68fb      	ldr	r3, [r7, #12]
 80664de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80664e0:	2b00      	cmp	r3, #0
 80664e2:	f47f aec2 	bne.w	806626a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80664e6:	68fb      	ldr	r3, [r7, #12]
 80664e8:	2220      	movs	r2, #32
 80664ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80664ee:	68fb      	ldr	r3, [r7, #12]
 80664f0:	2200      	movs	r2, #0
 80664f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80664f6:	68fb      	ldr	r3, [r7, #12]
 80664f8:	2200      	movs	r2, #0
 80664fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80664fe:	2300      	movs	r3, #0
 8066500:	e000      	b.n	8066504 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8066502:	2302      	movs	r3, #2
  }
}
 8066504:	4618      	mov	r0, r3
 8066506:	3728      	adds	r7, #40	; 0x28
 8066508:	46bd      	mov	sp, r7
 806650a:	bd80      	pop	{r7, pc}
 806650c:	00010004 	.word	0x00010004

08066510 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8066510:	b580      	push	{r7, lr}
 8066512:	b088      	sub	sp, #32
 8066514:	af02      	add	r7, sp, #8
 8066516:	60f8      	str	r0, [r7, #12]
 8066518:	4608      	mov	r0, r1
 806651a:	4611      	mov	r1, r2
 806651c:	461a      	mov	r2, r3
 806651e:	4603      	mov	r3, r0
 8066520:	817b      	strh	r3, [r7, #10]
 8066522:	460b      	mov	r3, r1
 8066524:	813b      	strh	r3, [r7, #8]
 8066526:	4613      	mov	r3, r2
 8066528:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 806652a:	f7fd fa3f 	bl	80639ac <HAL_GetTick>
 806652e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8066530:	88fb      	ldrh	r3, [r7, #6]
 8066532:	2b01      	cmp	r3, #1
 8066534:	d007      	beq.n	8066546 <HAL_I2C_Mem_Write+0x36>
 8066536:	88fb      	ldrh	r3, [r7, #6]
 8066538:	2b10      	cmp	r3, #16
 806653a:	d004      	beq.n	8066546 <HAL_I2C_Mem_Write+0x36>
 806653c:	f640 11ba 	movw	r1, #2490	; 0x9ba
 8066540:	4873      	ldr	r0, [pc, #460]	; (8066710 <HAL_I2C_Mem_Write+0x200>)
 8066542:	f7fc fdba 	bl	80630ba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8066546:	68fb      	ldr	r3, [r7, #12]
 8066548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 806654c:	b2db      	uxtb	r3, r3
 806654e:	2b20      	cmp	r3, #32
 8066550:	f040 80d9 	bne.w	8066706 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8066554:	697b      	ldr	r3, [r7, #20]
 8066556:	9300      	str	r3, [sp, #0]
 8066558:	2319      	movs	r3, #25
 806655a:	2201      	movs	r2, #1
 806655c:	496d      	ldr	r1, [pc, #436]	; (8066714 <HAL_I2C_Mem_Write+0x204>)
 806655e:	68f8      	ldr	r0, [r7, #12]
 8066560:	f000 fdf6 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 8066564:	4603      	mov	r3, r0
 8066566:	2b00      	cmp	r3, #0
 8066568:	d001      	beq.n	806656e <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 806656a:	2302      	movs	r3, #2
 806656c:	e0cc      	b.n	8066708 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 806656e:	68fb      	ldr	r3, [r7, #12]
 8066570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8066574:	2b01      	cmp	r3, #1
 8066576:	d101      	bne.n	806657c <HAL_I2C_Mem_Write+0x6c>
 8066578:	2302      	movs	r3, #2
 806657a:	e0c5      	b.n	8066708 <HAL_I2C_Mem_Write+0x1f8>
 806657c:	68fb      	ldr	r3, [r7, #12]
 806657e:	2201      	movs	r2, #1
 8066580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8066584:	68fb      	ldr	r3, [r7, #12]
 8066586:	681b      	ldr	r3, [r3, #0]
 8066588:	681b      	ldr	r3, [r3, #0]
 806658a:	f003 0301 	and.w	r3, r3, #1
 806658e:	2b01      	cmp	r3, #1
 8066590:	d007      	beq.n	80665a2 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8066592:	68fb      	ldr	r3, [r7, #12]
 8066594:	681b      	ldr	r3, [r3, #0]
 8066596:	681a      	ldr	r2, [r3, #0]
 8066598:	68fb      	ldr	r3, [r7, #12]
 806659a:	681b      	ldr	r3, [r3, #0]
 806659c:	f042 0201 	orr.w	r2, r2, #1
 80665a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80665a2:	68fb      	ldr	r3, [r7, #12]
 80665a4:	681b      	ldr	r3, [r3, #0]
 80665a6:	681a      	ldr	r2, [r3, #0]
 80665a8:	68fb      	ldr	r3, [r7, #12]
 80665aa:	681b      	ldr	r3, [r3, #0]
 80665ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80665b0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80665b2:	68fb      	ldr	r3, [r7, #12]
 80665b4:	2221      	movs	r2, #33	; 0x21
 80665b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80665ba:	68fb      	ldr	r3, [r7, #12]
 80665bc:	2240      	movs	r2, #64	; 0x40
 80665be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80665c2:	68fb      	ldr	r3, [r7, #12]
 80665c4:	2200      	movs	r2, #0
 80665c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80665c8:	68fb      	ldr	r3, [r7, #12]
 80665ca:	6a3a      	ldr	r2, [r7, #32]
 80665cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80665ce:	68fb      	ldr	r3, [r7, #12]
 80665d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80665d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80665d4:	68fb      	ldr	r3, [r7, #12]
 80665d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80665d8:	b29a      	uxth	r2, r3
 80665da:	68fb      	ldr	r3, [r7, #12]
 80665dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80665de:	68fb      	ldr	r3, [r7, #12]
 80665e0:	4a4d      	ldr	r2, [pc, #308]	; (8066718 <HAL_I2C_Mem_Write+0x208>)
 80665e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80665e4:	88f8      	ldrh	r0, [r7, #6]
 80665e6:	893a      	ldrh	r2, [r7, #8]
 80665e8:	8979      	ldrh	r1, [r7, #10]
 80665ea:	697b      	ldr	r3, [r7, #20]
 80665ec:	9301      	str	r3, [sp, #4]
 80665ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80665f0:	9300      	str	r3, [sp, #0]
 80665f2:	4603      	mov	r3, r0
 80665f4:	68f8      	ldr	r0, [r7, #12]
 80665f6:	f000 fc2d 	bl	8066e54 <I2C_RequestMemoryWrite>
 80665fa:	4603      	mov	r3, r0
 80665fc:	2b00      	cmp	r3, #0
 80665fe:	d052      	beq.n	80666a6 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8066600:	2301      	movs	r3, #1
 8066602:	e081      	b.n	8066708 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066604:	697a      	ldr	r2, [r7, #20]
 8066606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8066608:	68f8      	ldr	r0, [r7, #12]
 806660a:	f000 fe77 	bl	80672fc <I2C_WaitOnTXEFlagUntilTimeout>
 806660e:	4603      	mov	r3, r0
 8066610:	2b00      	cmp	r3, #0
 8066612:	d00d      	beq.n	8066630 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066614:	68fb      	ldr	r3, [r7, #12]
 8066616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8066618:	2b04      	cmp	r3, #4
 806661a:	d107      	bne.n	806662c <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806661c:	68fb      	ldr	r3, [r7, #12]
 806661e:	681b      	ldr	r3, [r3, #0]
 8066620:	681a      	ldr	r2, [r3, #0]
 8066622:	68fb      	ldr	r3, [r7, #12]
 8066624:	681b      	ldr	r3, [r3, #0]
 8066626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806662a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 806662c:	2301      	movs	r3, #1
 806662e:	e06b      	b.n	8066708 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8066630:	68fb      	ldr	r3, [r7, #12]
 8066632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066634:	781a      	ldrb	r2, [r3, #0]
 8066636:	68fb      	ldr	r3, [r7, #12]
 8066638:	681b      	ldr	r3, [r3, #0]
 806663a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 806663c:	68fb      	ldr	r3, [r7, #12]
 806663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066640:	1c5a      	adds	r2, r3, #1
 8066642:	68fb      	ldr	r3, [r7, #12]
 8066644:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8066646:	68fb      	ldr	r3, [r7, #12]
 8066648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806664a:	3b01      	subs	r3, #1
 806664c:	b29a      	uxth	r2, r3
 806664e:	68fb      	ldr	r3, [r7, #12]
 8066650:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8066652:	68fb      	ldr	r3, [r7, #12]
 8066654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066656:	b29b      	uxth	r3, r3
 8066658:	3b01      	subs	r3, #1
 806665a:	b29a      	uxth	r2, r3
 806665c:	68fb      	ldr	r3, [r7, #12]
 806665e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8066660:	68fb      	ldr	r3, [r7, #12]
 8066662:	681b      	ldr	r3, [r3, #0]
 8066664:	695b      	ldr	r3, [r3, #20]
 8066666:	f003 0304 	and.w	r3, r3, #4
 806666a:	2b04      	cmp	r3, #4
 806666c:	d11b      	bne.n	80666a6 <HAL_I2C_Mem_Write+0x196>
 806666e:	68fb      	ldr	r3, [r7, #12]
 8066670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066672:	2b00      	cmp	r3, #0
 8066674:	d017      	beq.n	80666a6 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8066676:	68fb      	ldr	r3, [r7, #12]
 8066678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806667a:	781a      	ldrb	r2, [r3, #0]
 806667c:	68fb      	ldr	r3, [r7, #12]
 806667e:	681b      	ldr	r3, [r3, #0]
 8066680:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8066682:	68fb      	ldr	r3, [r7, #12]
 8066684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066686:	1c5a      	adds	r2, r3, #1
 8066688:	68fb      	ldr	r3, [r7, #12]
 806668a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 806668c:	68fb      	ldr	r3, [r7, #12]
 806668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066690:	3b01      	subs	r3, #1
 8066692:	b29a      	uxth	r2, r3
 8066694:	68fb      	ldr	r3, [r7, #12]
 8066696:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8066698:	68fb      	ldr	r3, [r7, #12]
 806669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806669c:	b29b      	uxth	r3, r3
 806669e:	3b01      	subs	r3, #1
 80666a0:	b29a      	uxth	r2, r3
 80666a2:	68fb      	ldr	r3, [r7, #12]
 80666a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80666a6:	68fb      	ldr	r3, [r7, #12]
 80666a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80666aa:	2b00      	cmp	r3, #0
 80666ac:	d1aa      	bne.n	8066604 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80666ae:	697a      	ldr	r2, [r7, #20]
 80666b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80666b2:	68f8      	ldr	r0, [r7, #12]
 80666b4:	f000 fe63 	bl	806737e <I2C_WaitOnBTFFlagUntilTimeout>
 80666b8:	4603      	mov	r3, r0
 80666ba:	2b00      	cmp	r3, #0
 80666bc:	d00d      	beq.n	80666da <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80666be:	68fb      	ldr	r3, [r7, #12]
 80666c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80666c2:	2b04      	cmp	r3, #4
 80666c4:	d107      	bne.n	80666d6 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80666c6:	68fb      	ldr	r3, [r7, #12]
 80666c8:	681b      	ldr	r3, [r3, #0]
 80666ca:	681a      	ldr	r2, [r3, #0]
 80666cc:	68fb      	ldr	r3, [r7, #12]
 80666ce:	681b      	ldr	r3, [r3, #0]
 80666d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80666d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80666d6:	2301      	movs	r3, #1
 80666d8:	e016      	b.n	8066708 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80666da:	68fb      	ldr	r3, [r7, #12]
 80666dc:	681b      	ldr	r3, [r3, #0]
 80666de:	681a      	ldr	r2, [r3, #0]
 80666e0:	68fb      	ldr	r3, [r7, #12]
 80666e2:	681b      	ldr	r3, [r3, #0]
 80666e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80666e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80666ea:	68fb      	ldr	r3, [r7, #12]
 80666ec:	2220      	movs	r2, #32
 80666ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80666f2:	68fb      	ldr	r3, [r7, #12]
 80666f4:	2200      	movs	r2, #0
 80666f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80666fa:	68fb      	ldr	r3, [r7, #12]
 80666fc:	2200      	movs	r2, #0
 80666fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8066702:	2300      	movs	r3, #0
 8066704:	e000      	b.n	8066708 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8066706:	2302      	movs	r3, #2
  }
}
 8066708:	4618      	mov	r0, r3
 806670a:	3718      	adds	r7, #24
 806670c:	46bd      	mov	sp, r7
 806670e:	bd80      	pop	{r7, pc}
 8066710:	08076b3c 	.word	0x08076b3c
 8066714:	00100002 	.word	0x00100002
 8066718:	ffff0000 	.word	0xffff0000

0806671c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 806671c:	b580      	push	{r7, lr}
 806671e:	b08c      	sub	sp, #48	; 0x30
 8066720:	af02      	add	r7, sp, #8
 8066722:	60f8      	str	r0, [r7, #12]
 8066724:	4608      	mov	r0, r1
 8066726:	4611      	mov	r1, r2
 8066728:	461a      	mov	r2, r3
 806672a:	4603      	mov	r3, r0
 806672c:	817b      	strh	r3, [r7, #10]
 806672e:	460b      	mov	r3, r1
 8066730:	813b      	strh	r3, [r7, #8]
 8066732:	4613      	mov	r3, r2
 8066734:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8066736:	f7fd f939 	bl	80639ac <HAL_GetTick>
 806673a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 806673c:	88fb      	ldrh	r3, [r7, #6]
 806673e:	2b01      	cmp	r3, #1
 8066740:	d007      	beq.n	8066752 <HAL_I2C_Mem_Read+0x36>
 8066742:	88fb      	ldrh	r3, [r7, #6]
 8066744:	2b10      	cmp	r3, #16
 8066746:	d004      	beq.n	8066752 <HAL_I2C_Mem_Read+0x36>
 8066748:	f640 2135 	movw	r1, #2613	; 0xa35
 806674c:	4881      	ldr	r0, [pc, #516]	; (8066954 <HAL_I2C_Mem_Read+0x238>)
 806674e:	f7fc fcb4 	bl	80630ba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8066752:	68fb      	ldr	r3, [r7, #12]
 8066754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8066758:	b2db      	uxtb	r3, r3
 806675a:	2b20      	cmp	r3, #32
 806675c:	f040 8209 	bne.w	8066b72 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8066760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066762:	9300      	str	r3, [sp, #0]
 8066764:	2319      	movs	r3, #25
 8066766:	2201      	movs	r2, #1
 8066768:	497b      	ldr	r1, [pc, #492]	; (8066958 <HAL_I2C_Mem_Read+0x23c>)
 806676a:	68f8      	ldr	r0, [r7, #12]
 806676c:	f000 fcf0 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 8066770:	4603      	mov	r3, r0
 8066772:	2b00      	cmp	r3, #0
 8066774:	d001      	beq.n	806677a <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8066776:	2302      	movs	r3, #2
 8066778:	e1fc      	b.n	8066b74 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 806677a:	68fb      	ldr	r3, [r7, #12]
 806677c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8066780:	2b01      	cmp	r3, #1
 8066782:	d101      	bne.n	8066788 <HAL_I2C_Mem_Read+0x6c>
 8066784:	2302      	movs	r3, #2
 8066786:	e1f5      	b.n	8066b74 <HAL_I2C_Mem_Read+0x458>
 8066788:	68fb      	ldr	r3, [r7, #12]
 806678a:	2201      	movs	r2, #1
 806678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8066790:	68fb      	ldr	r3, [r7, #12]
 8066792:	681b      	ldr	r3, [r3, #0]
 8066794:	681b      	ldr	r3, [r3, #0]
 8066796:	f003 0301 	and.w	r3, r3, #1
 806679a:	2b01      	cmp	r3, #1
 806679c:	d007      	beq.n	80667ae <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 806679e:	68fb      	ldr	r3, [r7, #12]
 80667a0:	681b      	ldr	r3, [r3, #0]
 80667a2:	681a      	ldr	r2, [r3, #0]
 80667a4:	68fb      	ldr	r3, [r7, #12]
 80667a6:	681b      	ldr	r3, [r3, #0]
 80667a8:	f042 0201 	orr.w	r2, r2, #1
 80667ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80667ae:	68fb      	ldr	r3, [r7, #12]
 80667b0:	681b      	ldr	r3, [r3, #0]
 80667b2:	681a      	ldr	r2, [r3, #0]
 80667b4:	68fb      	ldr	r3, [r7, #12]
 80667b6:	681b      	ldr	r3, [r3, #0]
 80667b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80667bc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80667be:	68fb      	ldr	r3, [r7, #12]
 80667c0:	2222      	movs	r2, #34	; 0x22
 80667c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80667c6:	68fb      	ldr	r3, [r7, #12]
 80667c8:	2240      	movs	r2, #64	; 0x40
 80667ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80667ce:	68fb      	ldr	r3, [r7, #12]
 80667d0:	2200      	movs	r2, #0
 80667d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80667d4:	68fb      	ldr	r3, [r7, #12]
 80667d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80667d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80667da:	68fb      	ldr	r3, [r7, #12]
 80667dc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80667de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80667e0:	68fb      	ldr	r3, [r7, #12]
 80667e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80667e4:	b29a      	uxth	r2, r3
 80667e6:	68fb      	ldr	r3, [r7, #12]
 80667e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80667ea:	68fb      	ldr	r3, [r7, #12]
 80667ec:	4a5b      	ldr	r2, [pc, #364]	; (806695c <HAL_I2C_Mem_Read+0x240>)
 80667ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80667f0:	88f8      	ldrh	r0, [r7, #6]
 80667f2:	893a      	ldrh	r2, [r7, #8]
 80667f4:	8979      	ldrh	r1, [r7, #10]
 80667f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80667f8:	9301      	str	r3, [sp, #4]
 80667fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80667fc:	9300      	str	r3, [sp, #0]
 80667fe:	4603      	mov	r3, r0
 8066800:	68f8      	ldr	r0, [r7, #12]
 8066802:	f000 fbbd 	bl	8066f80 <I2C_RequestMemoryRead>
 8066806:	4603      	mov	r3, r0
 8066808:	2b00      	cmp	r3, #0
 806680a:	d001      	beq.n	8066810 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 806680c:	2301      	movs	r3, #1
 806680e:	e1b1      	b.n	8066b74 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8066810:	68fb      	ldr	r3, [r7, #12]
 8066812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066814:	2b00      	cmp	r3, #0
 8066816:	d113      	bne.n	8066840 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066818:	2300      	movs	r3, #0
 806681a:	623b      	str	r3, [r7, #32]
 806681c:	68fb      	ldr	r3, [r7, #12]
 806681e:	681b      	ldr	r3, [r3, #0]
 8066820:	695b      	ldr	r3, [r3, #20]
 8066822:	623b      	str	r3, [r7, #32]
 8066824:	68fb      	ldr	r3, [r7, #12]
 8066826:	681b      	ldr	r3, [r3, #0]
 8066828:	699b      	ldr	r3, [r3, #24]
 806682a:	623b      	str	r3, [r7, #32]
 806682c:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806682e:	68fb      	ldr	r3, [r7, #12]
 8066830:	681b      	ldr	r3, [r3, #0]
 8066832:	681a      	ldr	r2, [r3, #0]
 8066834:	68fb      	ldr	r3, [r7, #12]
 8066836:	681b      	ldr	r3, [r3, #0]
 8066838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806683c:	601a      	str	r2, [r3, #0]
 806683e:	e185      	b.n	8066b4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8066840:	68fb      	ldr	r3, [r7, #12]
 8066842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066844:	2b01      	cmp	r3, #1
 8066846:	d11b      	bne.n	8066880 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066848:	68fb      	ldr	r3, [r7, #12]
 806684a:	681b      	ldr	r3, [r3, #0]
 806684c:	681a      	ldr	r2, [r3, #0]
 806684e:	68fb      	ldr	r3, [r7, #12]
 8066850:	681b      	ldr	r3, [r3, #0]
 8066852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8066856:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066858:	2300      	movs	r3, #0
 806685a:	61fb      	str	r3, [r7, #28]
 806685c:	68fb      	ldr	r3, [r7, #12]
 806685e:	681b      	ldr	r3, [r3, #0]
 8066860:	695b      	ldr	r3, [r3, #20]
 8066862:	61fb      	str	r3, [r7, #28]
 8066864:	68fb      	ldr	r3, [r7, #12]
 8066866:	681b      	ldr	r3, [r3, #0]
 8066868:	699b      	ldr	r3, [r3, #24]
 806686a:	61fb      	str	r3, [r7, #28]
 806686c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806686e:	68fb      	ldr	r3, [r7, #12]
 8066870:	681b      	ldr	r3, [r3, #0]
 8066872:	681a      	ldr	r2, [r3, #0]
 8066874:	68fb      	ldr	r3, [r7, #12]
 8066876:	681b      	ldr	r3, [r3, #0]
 8066878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806687c:	601a      	str	r2, [r3, #0]
 806687e:	e165      	b.n	8066b4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8066880:	68fb      	ldr	r3, [r7, #12]
 8066882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066884:	2b02      	cmp	r3, #2
 8066886:	d11b      	bne.n	80668c0 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066888:	68fb      	ldr	r3, [r7, #12]
 806688a:	681b      	ldr	r3, [r3, #0]
 806688c:	681a      	ldr	r2, [r3, #0]
 806688e:	68fb      	ldr	r3, [r7, #12]
 8066890:	681b      	ldr	r3, [r3, #0]
 8066892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8066896:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8066898:	68fb      	ldr	r3, [r7, #12]
 806689a:	681b      	ldr	r3, [r3, #0]
 806689c:	681a      	ldr	r2, [r3, #0]
 806689e:	68fb      	ldr	r3, [r7, #12]
 80668a0:	681b      	ldr	r3, [r3, #0]
 80668a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80668a6:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80668a8:	2300      	movs	r3, #0
 80668aa:	61bb      	str	r3, [r7, #24]
 80668ac:	68fb      	ldr	r3, [r7, #12]
 80668ae:	681b      	ldr	r3, [r3, #0]
 80668b0:	695b      	ldr	r3, [r3, #20]
 80668b2:	61bb      	str	r3, [r7, #24]
 80668b4:	68fb      	ldr	r3, [r7, #12]
 80668b6:	681b      	ldr	r3, [r3, #0]
 80668b8:	699b      	ldr	r3, [r3, #24]
 80668ba:	61bb      	str	r3, [r7, #24]
 80668bc:	69bb      	ldr	r3, [r7, #24]
 80668be:	e145      	b.n	8066b4c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80668c0:	2300      	movs	r3, #0
 80668c2:	617b      	str	r3, [r7, #20]
 80668c4:	68fb      	ldr	r3, [r7, #12]
 80668c6:	681b      	ldr	r3, [r3, #0]
 80668c8:	695b      	ldr	r3, [r3, #20]
 80668ca:	617b      	str	r3, [r7, #20]
 80668cc:	68fb      	ldr	r3, [r7, #12]
 80668ce:	681b      	ldr	r3, [r3, #0]
 80668d0:	699b      	ldr	r3, [r3, #24]
 80668d2:	617b      	str	r3, [r7, #20]
 80668d4:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80668d6:	e139      	b.n	8066b4c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80668d8:	68fb      	ldr	r3, [r7, #12]
 80668da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80668dc:	2b03      	cmp	r3, #3
 80668de:	f200 80f2 	bhi.w	8066ac6 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80668e2:	68fb      	ldr	r3, [r7, #12]
 80668e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80668e6:	2b01      	cmp	r3, #1
 80668e8:	d123      	bne.n	8066932 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80668ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80668ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80668ee:	68f8      	ldr	r0, [r7, #12]
 80668f0:	f000 fd86 	bl	8067400 <I2C_WaitOnRXNEFlagUntilTimeout>
 80668f4:	4603      	mov	r3, r0
 80668f6:	2b00      	cmp	r3, #0
 80668f8:	d001      	beq.n	80668fe <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 80668fa:	2301      	movs	r3, #1
 80668fc:	e13a      	b.n	8066b74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80668fe:	68fb      	ldr	r3, [r7, #12]
 8066900:	681b      	ldr	r3, [r3, #0]
 8066902:	691a      	ldr	r2, [r3, #16]
 8066904:	68fb      	ldr	r3, [r7, #12]
 8066906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066908:	b2d2      	uxtb	r2, r2
 806690a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 806690c:	68fb      	ldr	r3, [r7, #12]
 806690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066910:	1c5a      	adds	r2, r3, #1
 8066912:	68fb      	ldr	r3, [r7, #12]
 8066914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066916:	68fb      	ldr	r3, [r7, #12]
 8066918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806691a:	3b01      	subs	r3, #1
 806691c:	b29a      	uxth	r2, r3
 806691e:	68fb      	ldr	r3, [r7, #12]
 8066920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066922:	68fb      	ldr	r3, [r7, #12]
 8066924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066926:	b29b      	uxth	r3, r3
 8066928:	3b01      	subs	r3, #1
 806692a:	b29a      	uxth	r2, r3
 806692c:	68fb      	ldr	r3, [r7, #12]
 806692e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8066930:	e10c      	b.n	8066b4c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8066932:	68fb      	ldr	r3, [r7, #12]
 8066934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066936:	2b02      	cmp	r3, #2
 8066938:	d14f      	bne.n	80669da <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 806693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806693c:	9300      	str	r3, [sp, #0]
 806693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8066940:	2200      	movs	r2, #0
 8066942:	4907      	ldr	r1, [pc, #28]	; (8066960 <HAL_I2C_Mem_Read+0x244>)
 8066944:	68f8      	ldr	r0, [r7, #12]
 8066946:	f000 fc03 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 806694a:	4603      	mov	r3, r0
 806694c:	2b00      	cmp	r3, #0
 806694e:	d009      	beq.n	8066964 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8066950:	2301      	movs	r3, #1
 8066952:	e10f      	b.n	8066b74 <HAL_I2C_Mem_Read+0x458>
 8066954:	08076b3c 	.word	0x08076b3c
 8066958:	00100002 	.word	0x00100002
 806695c:	ffff0000 	.word	0xffff0000
 8066960:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066964:	68fb      	ldr	r3, [r7, #12]
 8066966:	681b      	ldr	r3, [r3, #0]
 8066968:	681a      	ldr	r2, [r3, #0]
 806696a:	68fb      	ldr	r3, [r7, #12]
 806696c:	681b      	ldr	r3, [r3, #0]
 806696e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066974:	68fb      	ldr	r3, [r7, #12]
 8066976:	681b      	ldr	r3, [r3, #0]
 8066978:	691a      	ldr	r2, [r3, #16]
 806697a:	68fb      	ldr	r3, [r7, #12]
 806697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806697e:	b2d2      	uxtb	r2, r2
 8066980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066982:	68fb      	ldr	r3, [r7, #12]
 8066984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066986:	1c5a      	adds	r2, r3, #1
 8066988:	68fb      	ldr	r3, [r7, #12]
 806698a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 806698c:	68fb      	ldr	r3, [r7, #12]
 806698e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066990:	3b01      	subs	r3, #1
 8066992:	b29a      	uxth	r2, r3
 8066994:	68fb      	ldr	r3, [r7, #12]
 8066996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066998:	68fb      	ldr	r3, [r7, #12]
 806699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806699c:	b29b      	uxth	r3, r3
 806699e:	3b01      	subs	r3, #1
 80669a0:	b29a      	uxth	r2, r3
 80669a2:	68fb      	ldr	r3, [r7, #12]
 80669a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80669a6:	68fb      	ldr	r3, [r7, #12]
 80669a8:	681b      	ldr	r3, [r3, #0]
 80669aa:	691a      	ldr	r2, [r3, #16]
 80669ac:	68fb      	ldr	r3, [r7, #12]
 80669ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80669b0:	b2d2      	uxtb	r2, r2
 80669b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80669b4:	68fb      	ldr	r3, [r7, #12]
 80669b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80669b8:	1c5a      	adds	r2, r3, #1
 80669ba:	68fb      	ldr	r3, [r7, #12]
 80669bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80669be:	68fb      	ldr	r3, [r7, #12]
 80669c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80669c2:	3b01      	subs	r3, #1
 80669c4:	b29a      	uxth	r2, r3
 80669c6:	68fb      	ldr	r3, [r7, #12]
 80669c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80669ca:	68fb      	ldr	r3, [r7, #12]
 80669cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80669ce:	b29b      	uxth	r3, r3
 80669d0:	3b01      	subs	r3, #1
 80669d2:	b29a      	uxth	r2, r3
 80669d4:	68fb      	ldr	r3, [r7, #12]
 80669d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80669d8:	e0b8      	b.n	8066b4c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80669da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80669dc:	9300      	str	r3, [sp, #0]
 80669de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80669e0:	2200      	movs	r2, #0
 80669e2:	4966      	ldr	r1, [pc, #408]	; (8066b7c <HAL_I2C_Mem_Read+0x460>)
 80669e4:	68f8      	ldr	r0, [r7, #12]
 80669e6:	f000 fbb3 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 80669ea:	4603      	mov	r3, r0
 80669ec:	2b00      	cmp	r3, #0
 80669ee:	d001      	beq.n	80669f4 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 80669f0:	2301      	movs	r3, #1
 80669f2:	e0bf      	b.n	8066b74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80669f4:	68fb      	ldr	r3, [r7, #12]
 80669f6:	681b      	ldr	r3, [r3, #0]
 80669f8:	681a      	ldr	r2, [r3, #0]
 80669fa:	68fb      	ldr	r3, [r7, #12]
 80669fc:	681b      	ldr	r3, [r3, #0]
 80669fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8066a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066a04:	68fb      	ldr	r3, [r7, #12]
 8066a06:	681b      	ldr	r3, [r3, #0]
 8066a08:	691a      	ldr	r2, [r3, #16]
 8066a0a:	68fb      	ldr	r3, [r7, #12]
 8066a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a0e:	b2d2      	uxtb	r2, r2
 8066a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066a12:	68fb      	ldr	r3, [r7, #12]
 8066a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a16:	1c5a      	adds	r2, r3, #1
 8066a18:	68fb      	ldr	r3, [r7, #12]
 8066a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066a1c:	68fb      	ldr	r3, [r7, #12]
 8066a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066a20:	3b01      	subs	r3, #1
 8066a22:	b29a      	uxth	r2, r3
 8066a24:	68fb      	ldr	r3, [r7, #12]
 8066a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066a28:	68fb      	ldr	r3, [r7, #12]
 8066a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066a2c:	b29b      	uxth	r3, r3
 8066a2e:	3b01      	subs	r3, #1
 8066a30:	b29a      	uxth	r2, r3
 8066a32:	68fb      	ldr	r3, [r7, #12]
 8066a34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8066a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066a38:	9300      	str	r3, [sp, #0]
 8066a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8066a3c:	2200      	movs	r2, #0
 8066a3e:	494f      	ldr	r1, [pc, #316]	; (8066b7c <HAL_I2C_Mem_Read+0x460>)
 8066a40:	68f8      	ldr	r0, [r7, #12]
 8066a42:	f000 fb85 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 8066a46:	4603      	mov	r3, r0
 8066a48:	2b00      	cmp	r3, #0
 8066a4a:	d001      	beq.n	8066a50 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8066a4c:	2301      	movs	r3, #1
 8066a4e:	e091      	b.n	8066b74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066a50:	68fb      	ldr	r3, [r7, #12]
 8066a52:	681b      	ldr	r3, [r3, #0]
 8066a54:	681a      	ldr	r2, [r3, #0]
 8066a56:	68fb      	ldr	r3, [r7, #12]
 8066a58:	681b      	ldr	r3, [r3, #0]
 8066a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066a60:	68fb      	ldr	r3, [r7, #12]
 8066a62:	681b      	ldr	r3, [r3, #0]
 8066a64:	691a      	ldr	r2, [r3, #16]
 8066a66:	68fb      	ldr	r3, [r7, #12]
 8066a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a6a:	b2d2      	uxtb	r2, r2
 8066a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066a6e:	68fb      	ldr	r3, [r7, #12]
 8066a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a72:	1c5a      	adds	r2, r3, #1
 8066a74:	68fb      	ldr	r3, [r7, #12]
 8066a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066a78:	68fb      	ldr	r3, [r7, #12]
 8066a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066a7c:	3b01      	subs	r3, #1
 8066a7e:	b29a      	uxth	r2, r3
 8066a80:	68fb      	ldr	r3, [r7, #12]
 8066a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066a84:	68fb      	ldr	r3, [r7, #12]
 8066a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066a88:	b29b      	uxth	r3, r3
 8066a8a:	3b01      	subs	r3, #1
 8066a8c:	b29a      	uxth	r2, r3
 8066a8e:	68fb      	ldr	r3, [r7, #12]
 8066a90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066a92:	68fb      	ldr	r3, [r7, #12]
 8066a94:	681b      	ldr	r3, [r3, #0]
 8066a96:	691a      	ldr	r2, [r3, #16]
 8066a98:	68fb      	ldr	r3, [r7, #12]
 8066a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a9c:	b2d2      	uxtb	r2, r2
 8066a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066aa0:	68fb      	ldr	r3, [r7, #12]
 8066aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066aa4:	1c5a      	adds	r2, r3, #1
 8066aa6:	68fb      	ldr	r3, [r7, #12]
 8066aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066aaa:	68fb      	ldr	r3, [r7, #12]
 8066aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066aae:	3b01      	subs	r3, #1
 8066ab0:	b29a      	uxth	r2, r3
 8066ab2:	68fb      	ldr	r3, [r7, #12]
 8066ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066ab6:	68fb      	ldr	r3, [r7, #12]
 8066ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066aba:	b29b      	uxth	r3, r3
 8066abc:	3b01      	subs	r3, #1
 8066abe:	b29a      	uxth	r2, r3
 8066ac0:	68fb      	ldr	r3, [r7, #12]
 8066ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8066ac4:	e042      	b.n	8066b4c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066ac8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8066aca:	68f8      	ldr	r0, [r7, #12]
 8066acc:	f000 fc98 	bl	8067400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8066ad0:	4603      	mov	r3, r0
 8066ad2:	2b00      	cmp	r3, #0
 8066ad4:	d001      	beq.n	8066ada <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8066ad6:	2301      	movs	r3, #1
 8066ad8:	e04c      	b.n	8066b74 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066ada:	68fb      	ldr	r3, [r7, #12]
 8066adc:	681b      	ldr	r3, [r3, #0]
 8066ade:	691a      	ldr	r2, [r3, #16]
 8066ae0:	68fb      	ldr	r3, [r7, #12]
 8066ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066ae4:	b2d2      	uxtb	r2, r2
 8066ae6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8066ae8:	68fb      	ldr	r3, [r7, #12]
 8066aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066aec:	1c5a      	adds	r2, r3, #1
 8066aee:	68fb      	ldr	r3, [r7, #12]
 8066af0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8066af2:	68fb      	ldr	r3, [r7, #12]
 8066af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066af6:	3b01      	subs	r3, #1
 8066af8:	b29a      	uxth	r2, r3
 8066afa:	68fb      	ldr	r3, [r7, #12]
 8066afc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8066afe:	68fb      	ldr	r3, [r7, #12]
 8066b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066b02:	b29b      	uxth	r3, r3
 8066b04:	3b01      	subs	r3, #1
 8066b06:	b29a      	uxth	r2, r3
 8066b08:	68fb      	ldr	r3, [r7, #12]
 8066b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8066b0c:	68fb      	ldr	r3, [r7, #12]
 8066b0e:	681b      	ldr	r3, [r3, #0]
 8066b10:	695b      	ldr	r3, [r3, #20]
 8066b12:	f003 0304 	and.w	r3, r3, #4
 8066b16:	2b04      	cmp	r3, #4
 8066b18:	d118      	bne.n	8066b4c <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066b1a:	68fb      	ldr	r3, [r7, #12]
 8066b1c:	681b      	ldr	r3, [r3, #0]
 8066b1e:	691a      	ldr	r2, [r3, #16]
 8066b20:	68fb      	ldr	r3, [r7, #12]
 8066b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066b24:	b2d2      	uxtb	r2, r2
 8066b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066b28:	68fb      	ldr	r3, [r7, #12]
 8066b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066b2c:	1c5a      	adds	r2, r3, #1
 8066b2e:	68fb      	ldr	r3, [r7, #12]
 8066b30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066b32:	68fb      	ldr	r3, [r7, #12]
 8066b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066b36:	3b01      	subs	r3, #1
 8066b38:	b29a      	uxth	r2, r3
 8066b3a:	68fb      	ldr	r3, [r7, #12]
 8066b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066b3e:	68fb      	ldr	r3, [r7, #12]
 8066b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066b42:	b29b      	uxth	r3, r3
 8066b44:	3b01      	subs	r3, #1
 8066b46:	b29a      	uxth	r2, r3
 8066b48:	68fb      	ldr	r3, [r7, #12]
 8066b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8066b4c:	68fb      	ldr	r3, [r7, #12]
 8066b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066b50:	2b00      	cmp	r3, #0
 8066b52:	f47f aec1 	bne.w	80668d8 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8066b56:	68fb      	ldr	r3, [r7, #12]
 8066b58:	2220      	movs	r2, #32
 8066b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8066b5e:	68fb      	ldr	r3, [r7, #12]
 8066b60:	2200      	movs	r2, #0
 8066b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8066b66:	68fb      	ldr	r3, [r7, #12]
 8066b68:	2200      	movs	r2, #0
 8066b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8066b6e:	2300      	movs	r3, #0
 8066b70:	e000      	b.n	8066b74 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8066b72:	2302      	movs	r3, #2
  }
}
 8066b74:	4618      	mov	r0, r3
 8066b76:	3728      	adds	r7, #40	; 0x28
 8066b78:	46bd      	mov	sp, r7
 8066b7a:	bd80      	pop	{r7, pc}
 8066b7c:	00010004 	.word	0x00010004

08066b80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8066b80:	b480      	push	{r7}
 8066b82:	b083      	sub	sp, #12
 8066b84:	af00      	add	r7, sp, #0
 8066b86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8066b88:	687b      	ldr	r3, [r7, #4]
 8066b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8066b8e:	b2db      	uxtb	r3, r3
}
 8066b90:	4618      	mov	r0, r3
 8066b92:	370c      	adds	r7, #12
 8066b94:	46bd      	mov	sp, r7
 8066b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066b9a:	4770      	bx	lr

08066b9c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8066b9c:	b480      	push	{r7}
 8066b9e:	b083      	sub	sp, #12
 8066ba0:	af00      	add	r7, sp, #0
 8066ba2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8066ba4:	687b      	ldr	r3, [r7, #4]
 8066ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8066ba8:	4618      	mov	r0, r3
 8066baa:	370c      	adds	r7, #12
 8066bac:	46bd      	mov	sp, r7
 8066bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066bb2:	4770      	bx	lr

08066bb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8066bb4:	b580      	push	{r7, lr}
 8066bb6:	b088      	sub	sp, #32
 8066bb8:	af02      	add	r7, sp, #8
 8066bba:	60f8      	str	r0, [r7, #12]
 8066bbc:	607a      	str	r2, [r7, #4]
 8066bbe:	603b      	str	r3, [r7, #0]
 8066bc0:	460b      	mov	r3, r1
 8066bc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8066bc4:	68fb      	ldr	r3, [r7, #12]
 8066bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8066bc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8066bca:	697b      	ldr	r3, [r7, #20]
 8066bcc:	2b08      	cmp	r3, #8
 8066bce:	d006      	beq.n	8066bde <I2C_MasterRequestWrite+0x2a>
 8066bd0:	697b      	ldr	r3, [r7, #20]
 8066bd2:	2b01      	cmp	r3, #1
 8066bd4:	d003      	beq.n	8066bde <I2C_MasterRequestWrite+0x2a>
 8066bd6:	697b      	ldr	r3, [r7, #20]
 8066bd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8066bdc:	d108      	bne.n	8066bf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066bde:	68fb      	ldr	r3, [r7, #12]
 8066be0:	681b      	ldr	r3, [r3, #0]
 8066be2:	681a      	ldr	r2, [r3, #0]
 8066be4:	68fb      	ldr	r3, [r7, #12]
 8066be6:	681b      	ldr	r3, [r3, #0]
 8066be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066bec:	601a      	str	r2, [r3, #0]
 8066bee:	e00b      	b.n	8066c08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8066bf0:	68fb      	ldr	r3, [r7, #12]
 8066bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8066bf4:	2b12      	cmp	r3, #18
 8066bf6:	d107      	bne.n	8066c08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066bf8:	68fb      	ldr	r3, [r7, #12]
 8066bfa:	681b      	ldr	r3, [r3, #0]
 8066bfc:	681a      	ldr	r2, [r3, #0]
 8066bfe:	68fb      	ldr	r3, [r7, #12]
 8066c00:	681b      	ldr	r3, [r3, #0]
 8066c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066c06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066c08:	683b      	ldr	r3, [r7, #0]
 8066c0a:	9300      	str	r3, [sp, #0]
 8066c0c:	687b      	ldr	r3, [r7, #4]
 8066c0e:	2200      	movs	r2, #0
 8066c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066c14:	68f8      	ldr	r0, [r7, #12]
 8066c16:	f000 fa9b 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 8066c1a:	4603      	mov	r3, r0
 8066c1c:	2b00      	cmp	r3, #0
 8066c1e:	d00d      	beq.n	8066c3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066c20:	68fb      	ldr	r3, [r7, #12]
 8066c22:	681b      	ldr	r3, [r3, #0]
 8066c24:	681b      	ldr	r3, [r3, #0]
 8066c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066c2e:	d103      	bne.n	8066c38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066c30:	68fb      	ldr	r3, [r7, #12]
 8066c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066c38:	2303      	movs	r3, #3
 8066c3a:	e035      	b.n	8066ca8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8066c3c:	68fb      	ldr	r3, [r7, #12]
 8066c3e:	691b      	ldr	r3, [r3, #16]
 8066c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8066c44:	d108      	bne.n	8066c58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8066c46:	897b      	ldrh	r3, [r7, #10]
 8066c48:	b2db      	uxtb	r3, r3
 8066c4a:	461a      	mov	r2, r3
 8066c4c:	68fb      	ldr	r3, [r7, #12]
 8066c4e:	681b      	ldr	r3, [r3, #0]
 8066c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8066c54:	611a      	str	r2, [r3, #16]
 8066c56:	e01b      	b.n	8066c90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8066c58:	897b      	ldrh	r3, [r7, #10]
 8066c5a:	11db      	asrs	r3, r3, #7
 8066c5c:	b2db      	uxtb	r3, r3
 8066c5e:	f003 0306 	and.w	r3, r3, #6
 8066c62:	b2db      	uxtb	r3, r3
 8066c64:	f063 030f 	orn	r3, r3, #15
 8066c68:	b2da      	uxtb	r2, r3
 8066c6a:	68fb      	ldr	r3, [r7, #12]
 8066c6c:	681b      	ldr	r3, [r3, #0]
 8066c6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8066c70:	683b      	ldr	r3, [r7, #0]
 8066c72:	687a      	ldr	r2, [r7, #4]
 8066c74:	490e      	ldr	r1, [pc, #56]	; (8066cb0 <I2C_MasterRequestWrite+0xfc>)
 8066c76:	68f8      	ldr	r0, [r7, #12]
 8066c78:	f000 fac1 	bl	80671fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066c7c:	4603      	mov	r3, r0
 8066c7e:	2b00      	cmp	r3, #0
 8066c80:	d001      	beq.n	8066c86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8066c82:	2301      	movs	r3, #1
 8066c84:	e010      	b.n	8066ca8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8066c86:	897b      	ldrh	r3, [r7, #10]
 8066c88:	b2da      	uxtb	r2, r3
 8066c8a:	68fb      	ldr	r3, [r7, #12]
 8066c8c:	681b      	ldr	r3, [r3, #0]
 8066c8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066c90:	683b      	ldr	r3, [r7, #0]
 8066c92:	687a      	ldr	r2, [r7, #4]
 8066c94:	4907      	ldr	r1, [pc, #28]	; (8066cb4 <I2C_MasterRequestWrite+0x100>)
 8066c96:	68f8      	ldr	r0, [r7, #12]
 8066c98:	f000 fab1 	bl	80671fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066c9c:	4603      	mov	r3, r0
 8066c9e:	2b00      	cmp	r3, #0
 8066ca0:	d001      	beq.n	8066ca6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8066ca2:	2301      	movs	r3, #1
 8066ca4:	e000      	b.n	8066ca8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8066ca6:	2300      	movs	r3, #0
}
 8066ca8:	4618      	mov	r0, r3
 8066caa:	3718      	adds	r7, #24
 8066cac:	46bd      	mov	sp, r7
 8066cae:	bd80      	pop	{r7, pc}
 8066cb0:	00010008 	.word	0x00010008
 8066cb4:	00010002 	.word	0x00010002

08066cb8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8066cb8:	b580      	push	{r7, lr}
 8066cba:	b088      	sub	sp, #32
 8066cbc:	af02      	add	r7, sp, #8
 8066cbe:	60f8      	str	r0, [r7, #12]
 8066cc0:	607a      	str	r2, [r7, #4]
 8066cc2:	603b      	str	r3, [r7, #0]
 8066cc4:	460b      	mov	r3, r1
 8066cc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8066cc8:	68fb      	ldr	r3, [r7, #12]
 8066cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8066ccc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066cce:	68fb      	ldr	r3, [r7, #12]
 8066cd0:	681b      	ldr	r3, [r3, #0]
 8066cd2:	681a      	ldr	r2, [r3, #0]
 8066cd4:	68fb      	ldr	r3, [r7, #12]
 8066cd6:	681b      	ldr	r3, [r3, #0]
 8066cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8066cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8066cde:	697b      	ldr	r3, [r7, #20]
 8066ce0:	2b08      	cmp	r3, #8
 8066ce2:	d006      	beq.n	8066cf2 <I2C_MasterRequestRead+0x3a>
 8066ce4:	697b      	ldr	r3, [r7, #20]
 8066ce6:	2b01      	cmp	r3, #1
 8066ce8:	d003      	beq.n	8066cf2 <I2C_MasterRequestRead+0x3a>
 8066cea:	697b      	ldr	r3, [r7, #20]
 8066cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8066cf0:	d108      	bne.n	8066d04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066cf2:	68fb      	ldr	r3, [r7, #12]
 8066cf4:	681b      	ldr	r3, [r3, #0]
 8066cf6:	681a      	ldr	r2, [r3, #0]
 8066cf8:	68fb      	ldr	r3, [r7, #12]
 8066cfa:	681b      	ldr	r3, [r3, #0]
 8066cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066d00:	601a      	str	r2, [r3, #0]
 8066d02:	e00b      	b.n	8066d1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8066d04:	68fb      	ldr	r3, [r7, #12]
 8066d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8066d08:	2b11      	cmp	r3, #17
 8066d0a:	d107      	bne.n	8066d1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066d0c:	68fb      	ldr	r3, [r7, #12]
 8066d0e:	681b      	ldr	r3, [r3, #0]
 8066d10:	681a      	ldr	r2, [r3, #0]
 8066d12:	68fb      	ldr	r3, [r7, #12]
 8066d14:	681b      	ldr	r3, [r3, #0]
 8066d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066d1c:	683b      	ldr	r3, [r7, #0]
 8066d1e:	9300      	str	r3, [sp, #0]
 8066d20:	687b      	ldr	r3, [r7, #4]
 8066d22:	2200      	movs	r2, #0
 8066d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066d28:	68f8      	ldr	r0, [r7, #12]
 8066d2a:	f000 fa11 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 8066d2e:	4603      	mov	r3, r0
 8066d30:	2b00      	cmp	r3, #0
 8066d32:	d00d      	beq.n	8066d50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066d34:	68fb      	ldr	r3, [r7, #12]
 8066d36:	681b      	ldr	r3, [r3, #0]
 8066d38:	681b      	ldr	r3, [r3, #0]
 8066d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066d42:	d103      	bne.n	8066d4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066d44:	68fb      	ldr	r3, [r7, #12]
 8066d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066d4c:	2303      	movs	r3, #3
 8066d4e:	e079      	b.n	8066e44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8066d50:	68fb      	ldr	r3, [r7, #12]
 8066d52:	691b      	ldr	r3, [r3, #16]
 8066d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8066d58:	d108      	bne.n	8066d6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8066d5a:	897b      	ldrh	r3, [r7, #10]
 8066d5c:	b2db      	uxtb	r3, r3
 8066d5e:	f043 0301 	orr.w	r3, r3, #1
 8066d62:	b2da      	uxtb	r2, r3
 8066d64:	68fb      	ldr	r3, [r7, #12]
 8066d66:	681b      	ldr	r3, [r3, #0]
 8066d68:	611a      	str	r2, [r3, #16]
 8066d6a:	e05f      	b.n	8066e2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8066d6c:	897b      	ldrh	r3, [r7, #10]
 8066d6e:	11db      	asrs	r3, r3, #7
 8066d70:	b2db      	uxtb	r3, r3
 8066d72:	f003 0306 	and.w	r3, r3, #6
 8066d76:	b2db      	uxtb	r3, r3
 8066d78:	f063 030f 	orn	r3, r3, #15
 8066d7c:	b2da      	uxtb	r2, r3
 8066d7e:	68fb      	ldr	r3, [r7, #12]
 8066d80:	681b      	ldr	r3, [r3, #0]
 8066d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8066d84:	683b      	ldr	r3, [r7, #0]
 8066d86:	687a      	ldr	r2, [r7, #4]
 8066d88:	4930      	ldr	r1, [pc, #192]	; (8066e4c <I2C_MasterRequestRead+0x194>)
 8066d8a:	68f8      	ldr	r0, [r7, #12]
 8066d8c:	f000 fa37 	bl	80671fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066d90:	4603      	mov	r3, r0
 8066d92:	2b00      	cmp	r3, #0
 8066d94:	d001      	beq.n	8066d9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8066d96:	2301      	movs	r3, #1
 8066d98:	e054      	b.n	8066e44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8066d9a:	897b      	ldrh	r3, [r7, #10]
 8066d9c:	b2da      	uxtb	r2, r3
 8066d9e:	68fb      	ldr	r3, [r7, #12]
 8066da0:	681b      	ldr	r3, [r3, #0]
 8066da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066da4:	683b      	ldr	r3, [r7, #0]
 8066da6:	687a      	ldr	r2, [r7, #4]
 8066da8:	4929      	ldr	r1, [pc, #164]	; (8066e50 <I2C_MasterRequestRead+0x198>)
 8066daa:	68f8      	ldr	r0, [r7, #12]
 8066dac:	f000 fa27 	bl	80671fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066db0:	4603      	mov	r3, r0
 8066db2:	2b00      	cmp	r3, #0
 8066db4:	d001      	beq.n	8066dba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8066db6:	2301      	movs	r3, #1
 8066db8:	e044      	b.n	8066e44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066dba:	2300      	movs	r3, #0
 8066dbc:	613b      	str	r3, [r7, #16]
 8066dbe:	68fb      	ldr	r3, [r7, #12]
 8066dc0:	681b      	ldr	r3, [r3, #0]
 8066dc2:	695b      	ldr	r3, [r3, #20]
 8066dc4:	613b      	str	r3, [r7, #16]
 8066dc6:	68fb      	ldr	r3, [r7, #12]
 8066dc8:	681b      	ldr	r3, [r3, #0]
 8066dca:	699b      	ldr	r3, [r3, #24]
 8066dcc:	613b      	str	r3, [r7, #16]
 8066dce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066dd0:	68fb      	ldr	r3, [r7, #12]
 8066dd2:	681b      	ldr	r3, [r3, #0]
 8066dd4:	681a      	ldr	r2, [r3, #0]
 8066dd6:	68fb      	ldr	r3, [r7, #12]
 8066dd8:	681b      	ldr	r3, [r3, #0]
 8066dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066dde:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066de0:	683b      	ldr	r3, [r7, #0]
 8066de2:	9300      	str	r3, [sp, #0]
 8066de4:	687b      	ldr	r3, [r7, #4]
 8066de6:	2200      	movs	r2, #0
 8066de8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066dec:	68f8      	ldr	r0, [r7, #12]
 8066dee:	f000 f9af 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 8066df2:	4603      	mov	r3, r0
 8066df4:	2b00      	cmp	r3, #0
 8066df6:	d00d      	beq.n	8066e14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066df8:	68fb      	ldr	r3, [r7, #12]
 8066dfa:	681b      	ldr	r3, [r3, #0]
 8066dfc:	681b      	ldr	r3, [r3, #0]
 8066dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066e06:	d103      	bne.n	8066e10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066e08:	68fb      	ldr	r3, [r7, #12]
 8066e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066e0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8066e10:	2303      	movs	r3, #3
 8066e12:	e017      	b.n	8066e44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8066e14:	897b      	ldrh	r3, [r7, #10]
 8066e16:	11db      	asrs	r3, r3, #7
 8066e18:	b2db      	uxtb	r3, r3
 8066e1a:	f003 0306 	and.w	r3, r3, #6
 8066e1e:	b2db      	uxtb	r3, r3
 8066e20:	f063 030e 	orn	r3, r3, #14
 8066e24:	b2da      	uxtb	r2, r3
 8066e26:	68fb      	ldr	r3, [r7, #12]
 8066e28:	681b      	ldr	r3, [r3, #0]
 8066e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066e2c:	683b      	ldr	r3, [r7, #0]
 8066e2e:	687a      	ldr	r2, [r7, #4]
 8066e30:	4907      	ldr	r1, [pc, #28]	; (8066e50 <I2C_MasterRequestRead+0x198>)
 8066e32:	68f8      	ldr	r0, [r7, #12]
 8066e34:	f000 f9e3 	bl	80671fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066e38:	4603      	mov	r3, r0
 8066e3a:	2b00      	cmp	r3, #0
 8066e3c:	d001      	beq.n	8066e42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8066e3e:	2301      	movs	r3, #1
 8066e40:	e000      	b.n	8066e44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8066e42:	2300      	movs	r3, #0
}
 8066e44:	4618      	mov	r0, r3
 8066e46:	3718      	adds	r7, #24
 8066e48:	46bd      	mov	sp, r7
 8066e4a:	bd80      	pop	{r7, pc}
 8066e4c:	00010008 	.word	0x00010008
 8066e50:	00010002 	.word	0x00010002

08066e54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8066e54:	b580      	push	{r7, lr}
 8066e56:	b088      	sub	sp, #32
 8066e58:	af02      	add	r7, sp, #8
 8066e5a:	60f8      	str	r0, [r7, #12]
 8066e5c:	4608      	mov	r0, r1
 8066e5e:	4611      	mov	r1, r2
 8066e60:	461a      	mov	r2, r3
 8066e62:	4603      	mov	r3, r0
 8066e64:	817b      	strh	r3, [r7, #10]
 8066e66:	460b      	mov	r3, r1
 8066e68:	813b      	strh	r3, [r7, #8]
 8066e6a:	4613      	mov	r3, r2
 8066e6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066e6e:	68fb      	ldr	r3, [r7, #12]
 8066e70:	681b      	ldr	r3, [r3, #0]
 8066e72:	681a      	ldr	r2, [r3, #0]
 8066e74:	68fb      	ldr	r3, [r7, #12]
 8066e76:	681b      	ldr	r3, [r3, #0]
 8066e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066e7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066e80:	9300      	str	r3, [sp, #0]
 8066e82:	6a3b      	ldr	r3, [r7, #32]
 8066e84:	2200      	movs	r2, #0
 8066e86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066e8a:	68f8      	ldr	r0, [r7, #12]
 8066e8c:	f000 f960 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 8066e90:	4603      	mov	r3, r0
 8066e92:	2b00      	cmp	r3, #0
 8066e94:	d00d      	beq.n	8066eb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066e96:	68fb      	ldr	r3, [r7, #12]
 8066e98:	681b      	ldr	r3, [r3, #0]
 8066e9a:	681b      	ldr	r3, [r3, #0]
 8066e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066ea4:	d103      	bne.n	8066eae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066ea6:	68fb      	ldr	r3, [r7, #12]
 8066ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066eac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066eae:	2303      	movs	r3, #3
 8066eb0:	e05f      	b.n	8066f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8066eb2:	897b      	ldrh	r3, [r7, #10]
 8066eb4:	b2db      	uxtb	r3, r3
 8066eb6:	461a      	mov	r2, r3
 8066eb8:	68fb      	ldr	r3, [r7, #12]
 8066eba:	681b      	ldr	r3, [r3, #0]
 8066ebc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8066ec0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066ec4:	6a3a      	ldr	r2, [r7, #32]
 8066ec6:	492d      	ldr	r1, [pc, #180]	; (8066f7c <I2C_RequestMemoryWrite+0x128>)
 8066ec8:	68f8      	ldr	r0, [r7, #12]
 8066eca:	f000 f998 	bl	80671fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066ece:	4603      	mov	r3, r0
 8066ed0:	2b00      	cmp	r3, #0
 8066ed2:	d001      	beq.n	8066ed8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8066ed4:	2301      	movs	r3, #1
 8066ed6:	e04c      	b.n	8066f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066ed8:	2300      	movs	r3, #0
 8066eda:	617b      	str	r3, [r7, #20]
 8066edc:	68fb      	ldr	r3, [r7, #12]
 8066ede:	681b      	ldr	r3, [r3, #0]
 8066ee0:	695b      	ldr	r3, [r3, #20]
 8066ee2:	617b      	str	r3, [r7, #20]
 8066ee4:	68fb      	ldr	r3, [r7, #12]
 8066ee6:	681b      	ldr	r3, [r3, #0]
 8066ee8:	699b      	ldr	r3, [r3, #24]
 8066eea:	617b      	str	r3, [r7, #20]
 8066eec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8066eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066ef0:	6a39      	ldr	r1, [r7, #32]
 8066ef2:	68f8      	ldr	r0, [r7, #12]
 8066ef4:	f000 fa02 	bl	80672fc <I2C_WaitOnTXEFlagUntilTimeout>
 8066ef8:	4603      	mov	r3, r0
 8066efa:	2b00      	cmp	r3, #0
 8066efc:	d00d      	beq.n	8066f1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066efe:	68fb      	ldr	r3, [r7, #12]
 8066f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8066f02:	2b04      	cmp	r3, #4
 8066f04:	d107      	bne.n	8066f16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066f06:	68fb      	ldr	r3, [r7, #12]
 8066f08:	681b      	ldr	r3, [r3, #0]
 8066f0a:	681a      	ldr	r2, [r3, #0]
 8066f0c:	68fb      	ldr	r3, [r7, #12]
 8066f0e:	681b      	ldr	r3, [r3, #0]
 8066f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066f14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8066f16:	2301      	movs	r3, #1
 8066f18:	e02b      	b.n	8066f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8066f1a:	88fb      	ldrh	r3, [r7, #6]
 8066f1c:	2b01      	cmp	r3, #1
 8066f1e:	d105      	bne.n	8066f2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8066f20:	893b      	ldrh	r3, [r7, #8]
 8066f22:	b2da      	uxtb	r2, r3
 8066f24:	68fb      	ldr	r3, [r7, #12]
 8066f26:	681b      	ldr	r3, [r3, #0]
 8066f28:	611a      	str	r2, [r3, #16]
 8066f2a:	e021      	b.n	8066f70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8066f2c:	893b      	ldrh	r3, [r7, #8]
 8066f2e:	0a1b      	lsrs	r3, r3, #8
 8066f30:	b29b      	uxth	r3, r3
 8066f32:	b2da      	uxtb	r2, r3
 8066f34:	68fb      	ldr	r3, [r7, #12]
 8066f36:	681b      	ldr	r3, [r3, #0]
 8066f38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8066f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066f3c:	6a39      	ldr	r1, [r7, #32]
 8066f3e:	68f8      	ldr	r0, [r7, #12]
 8066f40:	f000 f9dc 	bl	80672fc <I2C_WaitOnTXEFlagUntilTimeout>
 8066f44:	4603      	mov	r3, r0
 8066f46:	2b00      	cmp	r3, #0
 8066f48:	d00d      	beq.n	8066f66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066f4a:	68fb      	ldr	r3, [r7, #12]
 8066f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8066f4e:	2b04      	cmp	r3, #4
 8066f50:	d107      	bne.n	8066f62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066f52:	68fb      	ldr	r3, [r7, #12]
 8066f54:	681b      	ldr	r3, [r3, #0]
 8066f56:	681a      	ldr	r2, [r3, #0]
 8066f58:	68fb      	ldr	r3, [r7, #12]
 8066f5a:	681b      	ldr	r3, [r3, #0]
 8066f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066f60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8066f62:	2301      	movs	r3, #1
 8066f64:	e005      	b.n	8066f72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8066f66:	893b      	ldrh	r3, [r7, #8]
 8066f68:	b2da      	uxtb	r2, r3
 8066f6a:	68fb      	ldr	r3, [r7, #12]
 8066f6c:	681b      	ldr	r3, [r3, #0]
 8066f6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8066f70:	2300      	movs	r3, #0
}
 8066f72:	4618      	mov	r0, r3
 8066f74:	3718      	adds	r7, #24
 8066f76:	46bd      	mov	sp, r7
 8066f78:	bd80      	pop	{r7, pc}
 8066f7a:	bf00      	nop
 8066f7c:	00010002 	.word	0x00010002

08066f80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8066f80:	b580      	push	{r7, lr}
 8066f82:	b088      	sub	sp, #32
 8066f84:	af02      	add	r7, sp, #8
 8066f86:	60f8      	str	r0, [r7, #12]
 8066f88:	4608      	mov	r0, r1
 8066f8a:	4611      	mov	r1, r2
 8066f8c:	461a      	mov	r2, r3
 8066f8e:	4603      	mov	r3, r0
 8066f90:	817b      	strh	r3, [r7, #10]
 8066f92:	460b      	mov	r3, r1
 8066f94:	813b      	strh	r3, [r7, #8]
 8066f96:	4613      	mov	r3, r2
 8066f98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066f9a:	68fb      	ldr	r3, [r7, #12]
 8066f9c:	681b      	ldr	r3, [r3, #0]
 8066f9e:	681a      	ldr	r2, [r3, #0]
 8066fa0:	68fb      	ldr	r3, [r7, #12]
 8066fa2:	681b      	ldr	r3, [r3, #0]
 8066fa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8066fa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066faa:	68fb      	ldr	r3, [r7, #12]
 8066fac:	681b      	ldr	r3, [r3, #0]
 8066fae:	681a      	ldr	r2, [r3, #0]
 8066fb0:	68fb      	ldr	r3, [r7, #12]
 8066fb2:	681b      	ldr	r3, [r3, #0]
 8066fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066fb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066fbc:	9300      	str	r3, [sp, #0]
 8066fbe:	6a3b      	ldr	r3, [r7, #32]
 8066fc0:	2200      	movs	r2, #0
 8066fc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066fc6:	68f8      	ldr	r0, [r7, #12]
 8066fc8:	f000 f8c2 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 8066fcc:	4603      	mov	r3, r0
 8066fce:	2b00      	cmp	r3, #0
 8066fd0:	d00d      	beq.n	8066fee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066fd2:	68fb      	ldr	r3, [r7, #12]
 8066fd4:	681b      	ldr	r3, [r3, #0]
 8066fd6:	681b      	ldr	r3, [r3, #0]
 8066fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066fe0:	d103      	bne.n	8066fea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066fe2:	68fb      	ldr	r3, [r7, #12]
 8066fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066fea:	2303      	movs	r3, #3
 8066fec:	e0aa      	b.n	8067144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8066fee:	897b      	ldrh	r3, [r7, #10]
 8066ff0:	b2db      	uxtb	r3, r3
 8066ff2:	461a      	mov	r2, r3
 8066ff4:	68fb      	ldr	r3, [r7, #12]
 8066ff6:	681b      	ldr	r3, [r3, #0]
 8066ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8066ffc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8067000:	6a3a      	ldr	r2, [r7, #32]
 8067002:	4952      	ldr	r1, [pc, #328]	; (806714c <I2C_RequestMemoryRead+0x1cc>)
 8067004:	68f8      	ldr	r0, [r7, #12]
 8067006:	f000 f8fa 	bl	80671fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 806700a:	4603      	mov	r3, r0
 806700c:	2b00      	cmp	r3, #0
 806700e:	d001      	beq.n	8067014 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8067010:	2301      	movs	r3, #1
 8067012:	e097      	b.n	8067144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8067014:	2300      	movs	r3, #0
 8067016:	617b      	str	r3, [r7, #20]
 8067018:	68fb      	ldr	r3, [r7, #12]
 806701a:	681b      	ldr	r3, [r3, #0]
 806701c:	695b      	ldr	r3, [r3, #20]
 806701e:	617b      	str	r3, [r7, #20]
 8067020:	68fb      	ldr	r3, [r7, #12]
 8067022:	681b      	ldr	r3, [r3, #0]
 8067024:	699b      	ldr	r3, [r3, #24]
 8067026:	617b      	str	r3, [r7, #20]
 8067028:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 806702a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806702c:	6a39      	ldr	r1, [r7, #32]
 806702e:	68f8      	ldr	r0, [r7, #12]
 8067030:	f000 f964 	bl	80672fc <I2C_WaitOnTXEFlagUntilTimeout>
 8067034:	4603      	mov	r3, r0
 8067036:	2b00      	cmp	r3, #0
 8067038:	d00d      	beq.n	8067056 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 806703a:	68fb      	ldr	r3, [r7, #12]
 806703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806703e:	2b04      	cmp	r3, #4
 8067040:	d107      	bne.n	8067052 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8067042:	68fb      	ldr	r3, [r7, #12]
 8067044:	681b      	ldr	r3, [r3, #0]
 8067046:	681a      	ldr	r2, [r3, #0]
 8067048:	68fb      	ldr	r3, [r7, #12]
 806704a:	681b      	ldr	r3, [r3, #0]
 806704c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8067050:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8067052:	2301      	movs	r3, #1
 8067054:	e076      	b.n	8067144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8067056:	88fb      	ldrh	r3, [r7, #6]
 8067058:	2b01      	cmp	r3, #1
 806705a:	d105      	bne.n	8067068 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 806705c:	893b      	ldrh	r3, [r7, #8]
 806705e:	b2da      	uxtb	r2, r3
 8067060:	68fb      	ldr	r3, [r7, #12]
 8067062:	681b      	ldr	r3, [r3, #0]
 8067064:	611a      	str	r2, [r3, #16]
 8067066:	e021      	b.n	80670ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8067068:	893b      	ldrh	r3, [r7, #8]
 806706a:	0a1b      	lsrs	r3, r3, #8
 806706c:	b29b      	uxth	r3, r3
 806706e:	b2da      	uxtb	r2, r3
 8067070:	68fb      	ldr	r3, [r7, #12]
 8067072:	681b      	ldr	r3, [r3, #0]
 8067074:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8067076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8067078:	6a39      	ldr	r1, [r7, #32]
 806707a:	68f8      	ldr	r0, [r7, #12]
 806707c:	f000 f93e 	bl	80672fc <I2C_WaitOnTXEFlagUntilTimeout>
 8067080:	4603      	mov	r3, r0
 8067082:	2b00      	cmp	r3, #0
 8067084:	d00d      	beq.n	80670a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8067086:	68fb      	ldr	r3, [r7, #12]
 8067088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806708a:	2b04      	cmp	r3, #4
 806708c:	d107      	bne.n	806709e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806708e:	68fb      	ldr	r3, [r7, #12]
 8067090:	681b      	ldr	r3, [r3, #0]
 8067092:	681a      	ldr	r2, [r3, #0]
 8067094:	68fb      	ldr	r3, [r7, #12]
 8067096:	681b      	ldr	r3, [r3, #0]
 8067098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806709c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 806709e:	2301      	movs	r3, #1
 80670a0:	e050      	b.n	8067144 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80670a2:	893b      	ldrh	r3, [r7, #8]
 80670a4:	b2da      	uxtb	r2, r3
 80670a6:	68fb      	ldr	r3, [r7, #12]
 80670a8:	681b      	ldr	r3, [r3, #0]
 80670aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80670ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80670ae:	6a39      	ldr	r1, [r7, #32]
 80670b0:	68f8      	ldr	r0, [r7, #12]
 80670b2:	f000 f923 	bl	80672fc <I2C_WaitOnTXEFlagUntilTimeout>
 80670b6:	4603      	mov	r3, r0
 80670b8:	2b00      	cmp	r3, #0
 80670ba:	d00d      	beq.n	80670d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80670bc:	68fb      	ldr	r3, [r7, #12]
 80670be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80670c0:	2b04      	cmp	r3, #4
 80670c2:	d107      	bne.n	80670d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80670c4:	68fb      	ldr	r3, [r7, #12]
 80670c6:	681b      	ldr	r3, [r3, #0]
 80670c8:	681a      	ldr	r2, [r3, #0]
 80670ca:	68fb      	ldr	r3, [r7, #12]
 80670cc:	681b      	ldr	r3, [r3, #0]
 80670ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80670d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80670d4:	2301      	movs	r3, #1
 80670d6:	e035      	b.n	8067144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80670d8:	68fb      	ldr	r3, [r7, #12]
 80670da:	681b      	ldr	r3, [r3, #0]
 80670dc:	681a      	ldr	r2, [r3, #0]
 80670de:	68fb      	ldr	r3, [r7, #12]
 80670e0:	681b      	ldr	r3, [r3, #0]
 80670e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80670e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80670e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80670ea:	9300      	str	r3, [sp, #0]
 80670ec:	6a3b      	ldr	r3, [r7, #32]
 80670ee:	2200      	movs	r2, #0
 80670f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80670f4:	68f8      	ldr	r0, [r7, #12]
 80670f6:	f000 f82b 	bl	8067150 <I2C_WaitOnFlagUntilTimeout>
 80670fa:	4603      	mov	r3, r0
 80670fc:	2b00      	cmp	r3, #0
 80670fe:	d00d      	beq.n	806711c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8067100:	68fb      	ldr	r3, [r7, #12]
 8067102:	681b      	ldr	r3, [r3, #0]
 8067104:	681b      	ldr	r3, [r3, #0]
 8067106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806710a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806710e:	d103      	bne.n	8067118 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8067110:	68fb      	ldr	r3, [r7, #12]
 8067112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8067116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8067118:	2303      	movs	r3, #3
 806711a:	e013      	b.n	8067144 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 806711c:	897b      	ldrh	r3, [r7, #10]
 806711e:	b2db      	uxtb	r3, r3
 8067120:	f043 0301 	orr.w	r3, r3, #1
 8067124:	b2da      	uxtb	r2, r3
 8067126:	68fb      	ldr	r3, [r7, #12]
 8067128:	681b      	ldr	r3, [r3, #0]
 806712a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 806712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806712e:	6a3a      	ldr	r2, [r7, #32]
 8067130:	4906      	ldr	r1, [pc, #24]	; (806714c <I2C_RequestMemoryRead+0x1cc>)
 8067132:	68f8      	ldr	r0, [r7, #12]
 8067134:	f000 f863 	bl	80671fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8067138:	4603      	mov	r3, r0
 806713a:	2b00      	cmp	r3, #0
 806713c:	d001      	beq.n	8067142 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 806713e:	2301      	movs	r3, #1
 8067140:	e000      	b.n	8067144 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8067142:	2300      	movs	r3, #0
}
 8067144:	4618      	mov	r0, r3
 8067146:	3718      	adds	r7, #24
 8067148:	46bd      	mov	sp, r7
 806714a:	bd80      	pop	{r7, pc}
 806714c:	00010002 	.word	0x00010002

08067150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8067150:	b580      	push	{r7, lr}
 8067152:	b084      	sub	sp, #16
 8067154:	af00      	add	r7, sp, #0
 8067156:	60f8      	str	r0, [r7, #12]
 8067158:	60b9      	str	r1, [r7, #8]
 806715a:	603b      	str	r3, [r7, #0]
 806715c:	4613      	mov	r3, r2
 806715e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8067160:	e025      	b.n	80671ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8067162:	683b      	ldr	r3, [r7, #0]
 8067164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8067168:	d021      	beq.n	80671ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 806716a:	f7fc fc1f 	bl	80639ac <HAL_GetTick>
 806716e:	4602      	mov	r2, r0
 8067170:	69bb      	ldr	r3, [r7, #24]
 8067172:	1ad3      	subs	r3, r2, r3
 8067174:	683a      	ldr	r2, [r7, #0]
 8067176:	429a      	cmp	r2, r3
 8067178:	d302      	bcc.n	8067180 <I2C_WaitOnFlagUntilTimeout+0x30>
 806717a:	683b      	ldr	r3, [r7, #0]
 806717c:	2b00      	cmp	r3, #0
 806717e:	d116      	bne.n	80671ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8067180:	68fb      	ldr	r3, [r7, #12]
 8067182:	2200      	movs	r2, #0
 8067184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8067186:	68fb      	ldr	r3, [r7, #12]
 8067188:	2220      	movs	r2, #32
 806718a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 806718e:	68fb      	ldr	r3, [r7, #12]
 8067190:	2200      	movs	r2, #0
 8067192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8067196:	68fb      	ldr	r3, [r7, #12]
 8067198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806719a:	f043 0220 	orr.w	r2, r3, #32
 806719e:	68fb      	ldr	r3, [r7, #12]
 80671a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80671a2:	68fb      	ldr	r3, [r7, #12]
 80671a4:	2200      	movs	r2, #0
 80671a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80671aa:	2301      	movs	r3, #1
 80671ac:	e023      	b.n	80671f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80671ae:	68bb      	ldr	r3, [r7, #8]
 80671b0:	0c1b      	lsrs	r3, r3, #16
 80671b2:	b2db      	uxtb	r3, r3
 80671b4:	2b01      	cmp	r3, #1
 80671b6:	d10d      	bne.n	80671d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80671b8:	68fb      	ldr	r3, [r7, #12]
 80671ba:	681b      	ldr	r3, [r3, #0]
 80671bc:	695b      	ldr	r3, [r3, #20]
 80671be:	43da      	mvns	r2, r3
 80671c0:	68bb      	ldr	r3, [r7, #8]
 80671c2:	4013      	ands	r3, r2
 80671c4:	b29b      	uxth	r3, r3
 80671c6:	2b00      	cmp	r3, #0
 80671c8:	bf0c      	ite	eq
 80671ca:	2301      	moveq	r3, #1
 80671cc:	2300      	movne	r3, #0
 80671ce:	b2db      	uxtb	r3, r3
 80671d0:	461a      	mov	r2, r3
 80671d2:	e00c      	b.n	80671ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80671d4:	68fb      	ldr	r3, [r7, #12]
 80671d6:	681b      	ldr	r3, [r3, #0]
 80671d8:	699b      	ldr	r3, [r3, #24]
 80671da:	43da      	mvns	r2, r3
 80671dc:	68bb      	ldr	r3, [r7, #8]
 80671de:	4013      	ands	r3, r2
 80671e0:	b29b      	uxth	r3, r3
 80671e2:	2b00      	cmp	r3, #0
 80671e4:	bf0c      	ite	eq
 80671e6:	2301      	moveq	r3, #1
 80671e8:	2300      	movne	r3, #0
 80671ea:	b2db      	uxtb	r3, r3
 80671ec:	461a      	mov	r2, r3
 80671ee:	79fb      	ldrb	r3, [r7, #7]
 80671f0:	429a      	cmp	r2, r3
 80671f2:	d0b6      	beq.n	8067162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80671f4:	2300      	movs	r3, #0
}
 80671f6:	4618      	mov	r0, r3
 80671f8:	3710      	adds	r7, #16
 80671fa:	46bd      	mov	sp, r7
 80671fc:	bd80      	pop	{r7, pc}

080671fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80671fe:	b580      	push	{r7, lr}
 8067200:	b084      	sub	sp, #16
 8067202:	af00      	add	r7, sp, #0
 8067204:	60f8      	str	r0, [r7, #12]
 8067206:	60b9      	str	r1, [r7, #8]
 8067208:	607a      	str	r2, [r7, #4]
 806720a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 806720c:	e051      	b.n	80672b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 806720e:	68fb      	ldr	r3, [r7, #12]
 8067210:	681b      	ldr	r3, [r3, #0]
 8067212:	695b      	ldr	r3, [r3, #20]
 8067214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8067218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 806721c:	d123      	bne.n	8067266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806721e:	68fb      	ldr	r3, [r7, #12]
 8067220:	681b      	ldr	r3, [r3, #0]
 8067222:	681a      	ldr	r2, [r3, #0]
 8067224:	68fb      	ldr	r3, [r7, #12]
 8067226:	681b      	ldr	r3, [r3, #0]
 8067228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806722c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 806722e:	68fb      	ldr	r3, [r7, #12]
 8067230:	681b      	ldr	r3, [r3, #0]
 8067232:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8067236:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8067238:	68fb      	ldr	r3, [r7, #12]
 806723a:	2200      	movs	r2, #0
 806723c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 806723e:	68fb      	ldr	r3, [r7, #12]
 8067240:	2220      	movs	r2, #32
 8067242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8067246:	68fb      	ldr	r3, [r7, #12]
 8067248:	2200      	movs	r2, #0
 806724a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 806724e:	68fb      	ldr	r3, [r7, #12]
 8067250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067252:	f043 0204 	orr.w	r2, r3, #4
 8067256:	68fb      	ldr	r3, [r7, #12]
 8067258:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 806725a:	68fb      	ldr	r3, [r7, #12]
 806725c:	2200      	movs	r2, #0
 806725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8067262:	2301      	movs	r3, #1
 8067264:	e046      	b.n	80672f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8067266:	687b      	ldr	r3, [r7, #4]
 8067268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806726c:	d021      	beq.n	80672b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 806726e:	f7fc fb9d 	bl	80639ac <HAL_GetTick>
 8067272:	4602      	mov	r2, r0
 8067274:	683b      	ldr	r3, [r7, #0]
 8067276:	1ad3      	subs	r3, r2, r3
 8067278:	687a      	ldr	r2, [r7, #4]
 806727a:	429a      	cmp	r2, r3
 806727c:	d302      	bcc.n	8067284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 806727e:	687b      	ldr	r3, [r7, #4]
 8067280:	2b00      	cmp	r3, #0
 8067282:	d116      	bne.n	80672b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8067284:	68fb      	ldr	r3, [r7, #12]
 8067286:	2200      	movs	r2, #0
 8067288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 806728a:	68fb      	ldr	r3, [r7, #12]
 806728c:	2220      	movs	r2, #32
 806728e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8067292:	68fb      	ldr	r3, [r7, #12]
 8067294:	2200      	movs	r2, #0
 8067296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 806729a:	68fb      	ldr	r3, [r7, #12]
 806729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806729e:	f043 0220 	orr.w	r2, r3, #32
 80672a2:	68fb      	ldr	r3, [r7, #12]
 80672a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80672a6:	68fb      	ldr	r3, [r7, #12]
 80672a8:	2200      	movs	r2, #0
 80672aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80672ae:	2301      	movs	r3, #1
 80672b0:	e020      	b.n	80672f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80672b2:	68bb      	ldr	r3, [r7, #8]
 80672b4:	0c1b      	lsrs	r3, r3, #16
 80672b6:	b2db      	uxtb	r3, r3
 80672b8:	2b01      	cmp	r3, #1
 80672ba:	d10c      	bne.n	80672d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80672bc:	68fb      	ldr	r3, [r7, #12]
 80672be:	681b      	ldr	r3, [r3, #0]
 80672c0:	695b      	ldr	r3, [r3, #20]
 80672c2:	43da      	mvns	r2, r3
 80672c4:	68bb      	ldr	r3, [r7, #8]
 80672c6:	4013      	ands	r3, r2
 80672c8:	b29b      	uxth	r3, r3
 80672ca:	2b00      	cmp	r3, #0
 80672cc:	bf14      	ite	ne
 80672ce:	2301      	movne	r3, #1
 80672d0:	2300      	moveq	r3, #0
 80672d2:	b2db      	uxtb	r3, r3
 80672d4:	e00b      	b.n	80672ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80672d6:	68fb      	ldr	r3, [r7, #12]
 80672d8:	681b      	ldr	r3, [r3, #0]
 80672da:	699b      	ldr	r3, [r3, #24]
 80672dc:	43da      	mvns	r2, r3
 80672de:	68bb      	ldr	r3, [r7, #8]
 80672e0:	4013      	ands	r3, r2
 80672e2:	b29b      	uxth	r3, r3
 80672e4:	2b00      	cmp	r3, #0
 80672e6:	bf14      	ite	ne
 80672e8:	2301      	movne	r3, #1
 80672ea:	2300      	moveq	r3, #0
 80672ec:	b2db      	uxtb	r3, r3
 80672ee:	2b00      	cmp	r3, #0
 80672f0:	d18d      	bne.n	806720e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80672f2:	2300      	movs	r3, #0
}
 80672f4:	4618      	mov	r0, r3
 80672f6:	3710      	adds	r7, #16
 80672f8:	46bd      	mov	sp, r7
 80672fa:	bd80      	pop	{r7, pc}

080672fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80672fc:	b580      	push	{r7, lr}
 80672fe:	b084      	sub	sp, #16
 8067300:	af00      	add	r7, sp, #0
 8067302:	60f8      	str	r0, [r7, #12]
 8067304:	60b9      	str	r1, [r7, #8]
 8067306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8067308:	e02d      	b.n	8067366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 806730a:	68f8      	ldr	r0, [r7, #12]
 806730c:	f000 f8ce 	bl	80674ac <I2C_IsAcknowledgeFailed>
 8067310:	4603      	mov	r3, r0
 8067312:	2b00      	cmp	r3, #0
 8067314:	d001      	beq.n	806731a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8067316:	2301      	movs	r3, #1
 8067318:	e02d      	b.n	8067376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 806731a:	68bb      	ldr	r3, [r7, #8]
 806731c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8067320:	d021      	beq.n	8067366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8067322:	f7fc fb43 	bl	80639ac <HAL_GetTick>
 8067326:	4602      	mov	r2, r0
 8067328:	687b      	ldr	r3, [r7, #4]
 806732a:	1ad3      	subs	r3, r2, r3
 806732c:	68ba      	ldr	r2, [r7, #8]
 806732e:	429a      	cmp	r2, r3
 8067330:	d302      	bcc.n	8067338 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8067332:	68bb      	ldr	r3, [r7, #8]
 8067334:	2b00      	cmp	r3, #0
 8067336:	d116      	bne.n	8067366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8067338:	68fb      	ldr	r3, [r7, #12]
 806733a:	2200      	movs	r2, #0
 806733c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 806733e:	68fb      	ldr	r3, [r7, #12]
 8067340:	2220      	movs	r2, #32
 8067342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8067346:	68fb      	ldr	r3, [r7, #12]
 8067348:	2200      	movs	r2, #0
 806734a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 806734e:	68fb      	ldr	r3, [r7, #12]
 8067350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067352:	f043 0220 	orr.w	r2, r3, #32
 8067356:	68fb      	ldr	r3, [r7, #12]
 8067358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 806735a:	68fb      	ldr	r3, [r7, #12]
 806735c:	2200      	movs	r2, #0
 806735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8067362:	2301      	movs	r3, #1
 8067364:	e007      	b.n	8067376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8067366:	68fb      	ldr	r3, [r7, #12]
 8067368:	681b      	ldr	r3, [r3, #0]
 806736a:	695b      	ldr	r3, [r3, #20]
 806736c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8067370:	2b80      	cmp	r3, #128	; 0x80
 8067372:	d1ca      	bne.n	806730a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8067374:	2300      	movs	r3, #0
}
 8067376:	4618      	mov	r0, r3
 8067378:	3710      	adds	r7, #16
 806737a:	46bd      	mov	sp, r7
 806737c:	bd80      	pop	{r7, pc}

0806737e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 806737e:	b580      	push	{r7, lr}
 8067380:	b084      	sub	sp, #16
 8067382:	af00      	add	r7, sp, #0
 8067384:	60f8      	str	r0, [r7, #12]
 8067386:	60b9      	str	r1, [r7, #8]
 8067388:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 806738a:	e02d      	b.n	80673e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 806738c:	68f8      	ldr	r0, [r7, #12]
 806738e:	f000 f88d 	bl	80674ac <I2C_IsAcknowledgeFailed>
 8067392:	4603      	mov	r3, r0
 8067394:	2b00      	cmp	r3, #0
 8067396:	d001      	beq.n	806739c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8067398:	2301      	movs	r3, #1
 806739a:	e02d      	b.n	80673f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 806739c:	68bb      	ldr	r3, [r7, #8]
 806739e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80673a2:	d021      	beq.n	80673e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80673a4:	f7fc fb02 	bl	80639ac <HAL_GetTick>
 80673a8:	4602      	mov	r2, r0
 80673aa:	687b      	ldr	r3, [r7, #4]
 80673ac:	1ad3      	subs	r3, r2, r3
 80673ae:	68ba      	ldr	r2, [r7, #8]
 80673b0:	429a      	cmp	r2, r3
 80673b2:	d302      	bcc.n	80673ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80673b4:	68bb      	ldr	r3, [r7, #8]
 80673b6:	2b00      	cmp	r3, #0
 80673b8:	d116      	bne.n	80673e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80673ba:	68fb      	ldr	r3, [r7, #12]
 80673bc:	2200      	movs	r2, #0
 80673be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80673c0:	68fb      	ldr	r3, [r7, #12]
 80673c2:	2220      	movs	r2, #32
 80673c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80673c8:	68fb      	ldr	r3, [r7, #12]
 80673ca:	2200      	movs	r2, #0
 80673cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80673d0:	68fb      	ldr	r3, [r7, #12]
 80673d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80673d4:	f043 0220 	orr.w	r2, r3, #32
 80673d8:	68fb      	ldr	r3, [r7, #12]
 80673da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80673dc:	68fb      	ldr	r3, [r7, #12]
 80673de:	2200      	movs	r2, #0
 80673e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80673e4:	2301      	movs	r3, #1
 80673e6:	e007      	b.n	80673f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80673e8:	68fb      	ldr	r3, [r7, #12]
 80673ea:	681b      	ldr	r3, [r3, #0]
 80673ec:	695b      	ldr	r3, [r3, #20]
 80673ee:	f003 0304 	and.w	r3, r3, #4
 80673f2:	2b04      	cmp	r3, #4
 80673f4:	d1ca      	bne.n	806738c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80673f6:	2300      	movs	r3, #0
}
 80673f8:	4618      	mov	r0, r3
 80673fa:	3710      	adds	r7, #16
 80673fc:	46bd      	mov	sp, r7
 80673fe:	bd80      	pop	{r7, pc}

08067400 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8067400:	b580      	push	{r7, lr}
 8067402:	b084      	sub	sp, #16
 8067404:	af00      	add	r7, sp, #0
 8067406:	60f8      	str	r0, [r7, #12]
 8067408:	60b9      	str	r1, [r7, #8]
 806740a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 806740c:	e042      	b.n	8067494 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 806740e:	68fb      	ldr	r3, [r7, #12]
 8067410:	681b      	ldr	r3, [r3, #0]
 8067412:	695b      	ldr	r3, [r3, #20]
 8067414:	f003 0310 	and.w	r3, r3, #16
 8067418:	2b10      	cmp	r3, #16
 806741a:	d119      	bne.n	8067450 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 806741c:	68fb      	ldr	r3, [r7, #12]
 806741e:	681b      	ldr	r3, [r3, #0]
 8067420:	f06f 0210 	mvn.w	r2, #16
 8067424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8067426:	68fb      	ldr	r3, [r7, #12]
 8067428:	2200      	movs	r2, #0
 806742a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 806742c:	68fb      	ldr	r3, [r7, #12]
 806742e:	2220      	movs	r2, #32
 8067430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8067434:	68fb      	ldr	r3, [r7, #12]
 8067436:	2200      	movs	r2, #0
 8067438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 806743c:	68fb      	ldr	r3, [r7, #12]
 806743e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8067440:	68fb      	ldr	r3, [r7, #12]
 8067442:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8067444:	68fb      	ldr	r3, [r7, #12]
 8067446:	2200      	movs	r2, #0
 8067448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 806744c:	2301      	movs	r3, #1
 806744e:	e029      	b.n	80674a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8067450:	f7fc faac 	bl	80639ac <HAL_GetTick>
 8067454:	4602      	mov	r2, r0
 8067456:	687b      	ldr	r3, [r7, #4]
 8067458:	1ad3      	subs	r3, r2, r3
 806745a:	68ba      	ldr	r2, [r7, #8]
 806745c:	429a      	cmp	r2, r3
 806745e:	d302      	bcc.n	8067466 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8067460:	68bb      	ldr	r3, [r7, #8]
 8067462:	2b00      	cmp	r3, #0
 8067464:	d116      	bne.n	8067494 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8067466:	68fb      	ldr	r3, [r7, #12]
 8067468:	2200      	movs	r2, #0
 806746a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 806746c:	68fb      	ldr	r3, [r7, #12]
 806746e:	2220      	movs	r2, #32
 8067470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8067474:	68fb      	ldr	r3, [r7, #12]
 8067476:	2200      	movs	r2, #0
 8067478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 806747c:	68fb      	ldr	r3, [r7, #12]
 806747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067480:	f043 0220 	orr.w	r2, r3, #32
 8067484:	68fb      	ldr	r3, [r7, #12]
 8067486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8067488:	68fb      	ldr	r3, [r7, #12]
 806748a:	2200      	movs	r2, #0
 806748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8067490:	2301      	movs	r3, #1
 8067492:	e007      	b.n	80674a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8067494:	68fb      	ldr	r3, [r7, #12]
 8067496:	681b      	ldr	r3, [r3, #0]
 8067498:	695b      	ldr	r3, [r3, #20]
 806749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806749e:	2b40      	cmp	r3, #64	; 0x40
 80674a0:	d1b5      	bne.n	806740e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80674a2:	2300      	movs	r3, #0
}
 80674a4:	4618      	mov	r0, r3
 80674a6:	3710      	adds	r7, #16
 80674a8:	46bd      	mov	sp, r7
 80674aa:	bd80      	pop	{r7, pc}

080674ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80674ac:	b480      	push	{r7}
 80674ae:	b083      	sub	sp, #12
 80674b0:	af00      	add	r7, sp, #0
 80674b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80674b4:	687b      	ldr	r3, [r7, #4]
 80674b6:	681b      	ldr	r3, [r3, #0]
 80674b8:	695b      	ldr	r3, [r3, #20]
 80674ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80674be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80674c2:	d11b      	bne.n	80674fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80674c4:	687b      	ldr	r3, [r7, #4]
 80674c6:	681b      	ldr	r3, [r3, #0]
 80674c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80674cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80674ce:	687b      	ldr	r3, [r7, #4]
 80674d0:	2200      	movs	r2, #0
 80674d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80674d4:	687b      	ldr	r3, [r7, #4]
 80674d6:	2220      	movs	r2, #32
 80674d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80674dc:	687b      	ldr	r3, [r7, #4]
 80674de:	2200      	movs	r2, #0
 80674e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80674e4:	687b      	ldr	r3, [r7, #4]
 80674e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80674e8:	f043 0204 	orr.w	r2, r3, #4
 80674ec:	687b      	ldr	r3, [r7, #4]
 80674ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80674f0:	687b      	ldr	r3, [r7, #4]
 80674f2:	2200      	movs	r2, #0
 80674f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80674f8:	2301      	movs	r3, #1
 80674fa:	e000      	b.n	80674fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80674fc:	2300      	movs	r3, #0
}
 80674fe:	4618      	mov	r0, r3
 8067500:	370c      	adds	r7, #12
 8067502:	46bd      	mov	sp, r7
 8067504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067508:	4770      	bx	lr
	...

0806750c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 806750c:	b580      	push	{r7, lr}
 806750e:	b086      	sub	sp, #24
 8067510:	af00      	add	r7, sp, #0
 8067512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8067514:	687b      	ldr	r3, [r7, #4]
 8067516:	2b00      	cmp	r3, #0
 8067518:	d101      	bne.n	806751e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 806751a:	2301      	movs	r3, #1
 806751c:	e316      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 806751e:	687b      	ldr	r3, [r7, #4]
 8067520:	681b      	ldr	r3, [r3, #0]
 8067522:	2b0f      	cmp	r3, #15
 8067524:	d903      	bls.n	806752e <HAL_RCC_OscConfig+0x22>
 8067526:	21e8      	movs	r1, #232	; 0xe8
 8067528:	48a3      	ldr	r0, [pc, #652]	; (80677b8 <HAL_RCC_OscConfig+0x2ac>)
 806752a:	f7fb fdc6 	bl	80630ba <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 806752e:	687b      	ldr	r3, [r7, #4]
 8067530:	681b      	ldr	r3, [r3, #0]
 8067532:	f003 0301 	and.w	r3, r3, #1
 8067536:	2b00      	cmp	r3, #0
 8067538:	f000 8088 	beq.w	806764c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 806753c:	687b      	ldr	r3, [r7, #4]
 806753e:	685b      	ldr	r3, [r3, #4]
 8067540:	2b00      	cmp	r3, #0
 8067542:	d00d      	beq.n	8067560 <HAL_RCC_OscConfig+0x54>
 8067544:	687b      	ldr	r3, [r7, #4]
 8067546:	685b      	ldr	r3, [r3, #4]
 8067548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 806754c:	d008      	beq.n	8067560 <HAL_RCC_OscConfig+0x54>
 806754e:	687b      	ldr	r3, [r7, #4]
 8067550:	685b      	ldr	r3, [r3, #4]
 8067552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8067556:	d003      	beq.n	8067560 <HAL_RCC_OscConfig+0x54>
 8067558:	21ed      	movs	r1, #237	; 0xed
 806755a:	4897      	ldr	r0, [pc, #604]	; (80677b8 <HAL_RCC_OscConfig+0x2ac>)
 806755c:	f7fb fdad 	bl	80630ba <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8067560:	4b96      	ldr	r3, [pc, #600]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 8067562:	689b      	ldr	r3, [r3, #8]
 8067564:	f003 030c 	and.w	r3, r3, #12
 8067568:	2b04      	cmp	r3, #4
 806756a:	d00c      	beq.n	8067586 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 806756c:	4b93      	ldr	r3, [pc, #588]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 806756e:	689b      	ldr	r3, [r3, #8]
 8067570:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8067574:	2b08      	cmp	r3, #8
 8067576:	d112      	bne.n	806759e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8067578:	4b90      	ldr	r3, [pc, #576]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 806757a:	685b      	ldr	r3, [r3, #4]
 806757c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8067580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8067584:	d10b      	bne.n	806759e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8067586:	4b8d      	ldr	r3, [pc, #564]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 8067588:	681b      	ldr	r3, [r3, #0]
 806758a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 806758e:	2b00      	cmp	r3, #0
 8067590:	d05b      	beq.n	806764a <HAL_RCC_OscConfig+0x13e>
 8067592:	687b      	ldr	r3, [r7, #4]
 8067594:	685b      	ldr	r3, [r3, #4]
 8067596:	2b00      	cmp	r3, #0
 8067598:	d157      	bne.n	806764a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 806759a:	2301      	movs	r3, #1
 806759c:	e2d6      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 806759e:	687b      	ldr	r3, [r7, #4]
 80675a0:	685b      	ldr	r3, [r3, #4]
 80675a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80675a6:	d106      	bne.n	80675b6 <HAL_RCC_OscConfig+0xaa>
 80675a8:	4b84      	ldr	r3, [pc, #528]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80675aa:	681b      	ldr	r3, [r3, #0]
 80675ac:	4a83      	ldr	r2, [pc, #524]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80675ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80675b2:	6013      	str	r3, [r2, #0]
 80675b4:	e01d      	b.n	80675f2 <HAL_RCC_OscConfig+0xe6>
 80675b6:	687b      	ldr	r3, [r7, #4]
 80675b8:	685b      	ldr	r3, [r3, #4]
 80675ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80675be:	d10c      	bne.n	80675da <HAL_RCC_OscConfig+0xce>
 80675c0:	4b7e      	ldr	r3, [pc, #504]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80675c2:	681b      	ldr	r3, [r3, #0]
 80675c4:	4a7d      	ldr	r2, [pc, #500]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80675c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80675ca:	6013      	str	r3, [r2, #0]
 80675cc:	4b7b      	ldr	r3, [pc, #492]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80675ce:	681b      	ldr	r3, [r3, #0]
 80675d0:	4a7a      	ldr	r2, [pc, #488]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80675d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80675d6:	6013      	str	r3, [r2, #0]
 80675d8:	e00b      	b.n	80675f2 <HAL_RCC_OscConfig+0xe6>
 80675da:	4b78      	ldr	r3, [pc, #480]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80675dc:	681b      	ldr	r3, [r3, #0]
 80675de:	4a77      	ldr	r2, [pc, #476]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80675e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80675e4:	6013      	str	r3, [r2, #0]
 80675e6:	4b75      	ldr	r3, [pc, #468]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80675e8:	681b      	ldr	r3, [r3, #0]
 80675ea:	4a74      	ldr	r2, [pc, #464]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80675ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80675f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80675f2:	687b      	ldr	r3, [r7, #4]
 80675f4:	685b      	ldr	r3, [r3, #4]
 80675f6:	2b00      	cmp	r3, #0
 80675f8:	d013      	beq.n	8067622 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80675fa:	f7fc f9d7 	bl	80639ac <HAL_GetTick>
 80675fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8067600:	e008      	b.n	8067614 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8067602:	f7fc f9d3 	bl	80639ac <HAL_GetTick>
 8067606:	4602      	mov	r2, r0
 8067608:	693b      	ldr	r3, [r7, #16]
 806760a:	1ad3      	subs	r3, r2, r3
 806760c:	2b64      	cmp	r3, #100	; 0x64
 806760e:	d901      	bls.n	8067614 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8067610:	2303      	movs	r3, #3
 8067612:	e29b      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8067614:	4b69      	ldr	r3, [pc, #420]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 8067616:	681b      	ldr	r3, [r3, #0]
 8067618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 806761c:	2b00      	cmp	r3, #0
 806761e:	d0f0      	beq.n	8067602 <HAL_RCC_OscConfig+0xf6>
 8067620:	e014      	b.n	806764c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067622:	f7fc f9c3 	bl	80639ac <HAL_GetTick>
 8067626:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8067628:	e008      	b.n	806763c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 806762a:	f7fc f9bf 	bl	80639ac <HAL_GetTick>
 806762e:	4602      	mov	r2, r0
 8067630:	693b      	ldr	r3, [r7, #16]
 8067632:	1ad3      	subs	r3, r2, r3
 8067634:	2b64      	cmp	r3, #100	; 0x64
 8067636:	d901      	bls.n	806763c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8067638:	2303      	movs	r3, #3
 806763a:	e287      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 806763c:	4b5f      	ldr	r3, [pc, #380]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 806763e:	681b      	ldr	r3, [r3, #0]
 8067640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8067644:	2b00      	cmp	r3, #0
 8067646:	d1f0      	bne.n	806762a <HAL_RCC_OscConfig+0x11e>
 8067648:	e000      	b.n	806764c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 806764a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 806764c:	687b      	ldr	r3, [r7, #4]
 806764e:	681b      	ldr	r3, [r3, #0]
 8067650:	f003 0302 	and.w	r3, r3, #2
 8067654:	2b00      	cmp	r3, #0
 8067656:	d079      	beq.n	806774c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8067658:	687b      	ldr	r3, [r7, #4]
 806765a:	68db      	ldr	r3, [r3, #12]
 806765c:	2b00      	cmp	r3, #0
 806765e:	d008      	beq.n	8067672 <HAL_RCC_OscConfig+0x166>
 8067660:	687b      	ldr	r3, [r7, #4]
 8067662:	68db      	ldr	r3, [r3, #12]
 8067664:	2b01      	cmp	r3, #1
 8067666:	d004      	beq.n	8067672 <HAL_RCC_OscConfig+0x166>
 8067668:	f240 111f 	movw	r1, #287	; 0x11f
 806766c:	4852      	ldr	r0, [pc, #328]	; (80677b8 <HAL_RCC_OscConfig+0x2ac>)
 806766e:	f7fb fd24 	bl	80630ba <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8067672:	687b      	ldr	r3, [r7, #4]
 8067674:	691b      	ldr	r3, [r3, #16]
 8067676:	2b1f      	cmp	r3, #31
 8067678:	d904      	bls.n	8067684 <HAL_RCC_OscConfig+0x178>
 806767a:	f44f 7190 	mov.w	r1, #288	; 0x120
 806767e:	484e      	ldr	r0, [pc, #312]	; (80677b8 <HAL_RCC_OscConfig+0x2ac>)
 8067680:	f7fb fd1b 	bl	80630ba <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8067684:	4b4d      	ldr	r3, [pc, #308]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 8067686:	689b      	ldr	r3, [r3, #8]
 8067688:	f003 030c 	and.w	r3, r3, #12
 806768c:	2b00      	cmp	r3, #0
 806768e:	d00b      	beq.n	80676a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8067690:	4b4a      	ldr	r3, [pc, #296]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 8067692:	689b      	ldr	r3, [r3, #8]
 8067694:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8067698:	2b08      	cmp	r3, #8
 806769a:	d11c      	bne.n	80676d6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 806769c:	4b47      	ldr	r3, [pc, #284]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 806769e:	685b      	ldr	r3, [r3, #4]
 80676a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80676a4:	2b00      	cmp	r3, #0
 80676a6:	d116      	bne.n	80676d6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80676a8:	4b44      	ldr	r3, [pc, #272]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80676aa:	681b      	ldr	r3, [r3, #0]
 80676ac:	f003 0302 	and.w	r3, r3, #2
 80676b0:	2b00      	cmp	r3, #0
 80676b2:	d005      	beq.n	80676c0 <HAL_RCC_OscConfig+0x1b4>
 80676b4:	687b      	ldr	r3, [r7, #4]
 80676b6:	68db      	ldr	r3, [r3, #12]
 80676b8:	2b01      	cmp	r3, #1
 80676ba:	d001      	beq.n	80676c0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80676bc:	2301      	movs	r3, #1
 80676be:	e245      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80676c0:	4b3e      	ldr	r3, [pc, #248]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80676c2:	681b      	ldr	r3, [r3, #0]
 80676c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80676c8:	687b      	ldr	r3, [r7, #4]
 80676ca:	691b      	ldr	r3, [r3, #16]
 80676cc:	00db      	lsls	r3, r3, #3
 80676ce:	493b      	ldr	r1, [pc, #236]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 80676d0:	4313      	orrs	r3, r2
 80676d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80676d4:	e03a      	b.n	806774c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80676d6:	687b      	ldr	r3, [r7, #4]
 80676d8:	68db      	ldr	r3, [r3, #12]
 80676da:	2b00      	cmp	r3, #0
 80676dc:	d020      	beq.n	8067720 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80676de:	4b38      	ldr	r3, [pc, #224]	; (80677c0 <HAL_RCC_OscConfig+0x2b4>)
 80676e0:	2201      	movs	r2, #1
 80676e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80676e4:	f7fc f962 	bl	80639ac <HAL_GetTick>
 80676e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80676ea:	e008      	b.n	80676fe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80676ec:	f7fc f95e 	bl	80639ac <HAL_GetTick>
 80676f0:	4602      	mov	r2, r0
 80676f2:	693b      	ldr	r3, [r7, #16]
 80676f4:	1ad3      	subs	r3, r2, r3
 80676f6:	2b02      	cmp	r3, #2
 80676f8:	d901      	bls.n	80676fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80676fa:	2303      	movs	r3, #3
 80676fc:	e226      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80676fe:	4b2f      	ldr	r3, [pc, #188]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 8067700:	681b      	ldr	r3, [r3, #0]
 8067702:	f003 0302 	and.w	r3, r3, #2
 8067706:	2b00      	cmp	r3, #0
 8067708:	d0f0      	beq.n	80676ec <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 806770a:	4b2c      	ldr	r3, [pc, #176]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 806770c:	681b      	ldr	r3, [r3, #0]
 806770e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8067712:	687b      	ldr	r3, [r7, #4]
 8067714:	691b      	ldr	r3, [r3, #16]
 8067716:	00db      	lsls	r3, r3, #3
 8067718:	4928      	ldr	r1, [pc, #160]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 806771a:	4313      	orrs	r3, r2
 806771c:	600b      	str	r3, [r1, #0]
 806771e:	e015      	b.n	806774c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8067720:	4b27      	ldr	r3, [pc, #156]	; (80677c0 <HAL_RCC_OscConfig+0x2b4>)
 8067722:	2200      	movs	r2, #0
 8067724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8067726:	f7fc f941 	bl	80639ac <HAL_GetTick>
 806772a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 806772c:	e008      	b.n	8067740 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 806772e:	f7fc f93d 	bl	80639ac <HAL_GetTick>
 8067732:	4602      	mov	r2, r0
 8067734:	693b      	ldr	r3, [r7, #16]
 8067736:	1ad3      	subs	r3, r2, r3
 8067738:	2b02      	cmp	r3, #2
 806773a:	d901      	bls.n	8067740 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 806773c:	2303      	movs	r3, #3
 806773e:	e205      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8067740:	4b1e      	ldr	r3, [pc, #120]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 8067742:	681b      	ldr	r3, [r3, #0]
 8067744:	f003 0302 	and.w	r3, r3, #2
 8067748:	2b00      	cmp	r3, #0
 806774a:	d1f0      	bne.n	806772e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 806774c:	687b      	ldr	r3, [r7, #4]
 806774e:	681b      	ldr	r3, [r3, #0]
 8067750:	f003 0308 	and.w	r3, r3, #8
 8067754:	2b00      	cmp	r3, #0
 8067756:	d046      	beq.n	80677e6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8067758:	687b      	ldr	r3, [r7, #4]
 806775a:	695b      	ldr	r3, [r3, #20]
 806775c:	2b00      	cmp	r3, #0
 806775e:	d008      	beq.n	8067772 <HAL_RCC_OscConfig+0x266>
 8067760:	687b      	ldr	r3, [r7, #4]
 8067762:	695b      	ldr	r3, [r3, #20]
 8067764:	2b01      	cmp	r3, #1
 8067766:	d004      	beq.n	8067772 <HAL_RCC_OscConfig+0x266>
 8067768:	f44f 71b0 	mov.w	r1, #352	; 0x160
 806776c:	4812      	ldr	r0, [pc, #72]	; (80677b8 <HAL_RCC_OscConfig+0x2ac>)
 806776e:	f7fb fca4 	bl	80630ba <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8067772:	687b      	ldr	r3, [r7, #4]
 8067774:	695b      	ldr	r3, [r3, #20]
 8067776:	2b00      	cmp	r3, #0
 8067778:	d016      	beq.n	80677a8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 806777a:	4b12      	ldr	r3, [pc, #72]	; (80677c4 <HAL_RCC_OscConfig+0x2b8>)
 806777c:	2201      	movs	r2, #1
 806777e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8067780:	f7fc f914 	bl	80639ac <HAL_GetTick>
 8067784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8067786:	e008      	b.n	806779a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8067788:	f7fc f910 	bl	80639ac <HAL_GetTick>
 806778c:	4602      	mov	r2, r0
 806778e:	693b      	ldr	r3, [r7, #16]
 8067790:	1ad3      	subs	r3, r2, r3
 8067792:	2b02      	cmp	r3, #2
 8067794:	d901      	bls.n	806779a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8067796:	2303      	movs	r3, #3
 8067798:	e1d8      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 806779a:	4b08      	ldr	r3, [pc, #32]	; (80677bc <HAL_RCC_OscConfig+0x2b0>)
 806779c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 806779e:	f003 0302 	and.w	r3, r3, #2
 80677a2:	2b00      	cmp	r3, #0
 80677a4:	d0f0      	beq.n	8067788 <HAL_RCC_OscConfig+0x27c>
 80677a6:	e01e      	b.n	80677e6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80677a8:	4b06      	ldr	r3, [pc, #24]	; (80677c4 <HAL_RCC_OscConfig+0x2b8>)
 80677aa:	2200      	movs	r2, #0
 80677ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80677ae:	f7fc f8fd 	bl	80639ac <HAL_GetTick>
 80677b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80677b4:	e011      	b.n	80677da <HAL_RCC_OscConfig+0x2ce>
 80677b6:	bf00      	nop
 80677b8:	08076b74 	.word	0x08076b74
 80677bc:	40023800 	.word	0x40023800
 80677c0:	42470000 	.word	0x42470000
 80677c4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80677c8:	f7fc f8f0 	bl	80639ac <HAL_GetTick>
 80677cc:	4602      	mov	r2, r0
 80677ce:	693b      	ldr	r3, [r7, #16]
 80677d0:	1ad3      	subs	r3, r2, r3
 80677d2:	2b02      	cmp	r3, #2
 80677d4:	d901      	bls.n	80677da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80677d6:	2303      	movs	r3, #3
 80677d8:	e1b8      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80677da:	4b97      	ldr	r3, [pc, #604]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 80677dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80677de:	f003 0302 	and.w	r3, r3, #2
 80677e2:	2b00      	cmp	r3, #0
 80677e4:	d1f0      	bne.n	80677c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80677e6:	687b      	ldr	r3, [r7, #4]
 80677e8:	681b      	ldr	r3, [r3, #0]
 80677ea:	f003 0304 	and.w	r3, r3, #4
 80677ee:	2b00      	cmp	r3, #0
 80677f0:	f000 80a8 	beq.w	8067944 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80677f4:	2300      	movs	r3, #0
 80677f6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80677f8:	687b      	ldr	r3, [r7, #4]
 80677fa:	689b      	ldr	r3, [r3, #8]
 80677fc:	2b00      	cmp	r3, #0
 80677fe:	d00c      	beq.n	806781a <HAL_RCC_OscConfig+0x30e>
 8067800:	687b      	ldr	r3, [r7, #4]
 8067802:	689b      	ldr	r3, [r3, #8]
 8067804:	2b01      	cmp	r3, #1
 8067806:	d008      	beq.n	806781a <HAL_RCC_OscConfig+0x30e>
 8067808:	687b      	ldr	r3, [r7, #4]
 806780a:	689b      	ldr	r3, [r3, #8]
 806780c:	2b05      	cmp	r3, #5
 806780e:	d004      	beq.n	806781a <HAL_RCC_OscConfig+0x30e>
 8067810:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8067814:	4889      	ldr	r0, [pc, #548]	; (8067a3c <HAL_RCC_OscConfig+0x530>)
 8067816:	f7fb fc50 	bl	80630ba <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 806781a:	4b87      	ldr	r3, [pc, #540]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 806781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806781e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8067822:	2b00      	cmp	r3, #0
 8067824:	d10f      	bne.n	8067846 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8067826:	2300      	movs	r3, #0
 8067828:	60bb      	str	r3, [r7, #8]
 806782a:	4b83      	ldr	r3, [pc, #524]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 806782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806782e:	4a82      	ldr	r2, [pc, #520]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 8067830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8067834:	6413      	str	r3, [r2, #64]	; 0x40
 8067836:	4b80      	ldr	r3, [pc, #512]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 8067838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806783a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 806783e:	60bb      	str	r3, [r7, #8]
 8067840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8067842:	2301      	movs	r3, #1
 8067844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8067846:	4b7e      	ldr	r3, [pc, #504]	; (8067a40 <HAL_RCC_OscConfig+0x534>)
 8067848:	681b      	ldr	r3, [r3, #0]
 806784a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806784e:	2b00      	cmp	r3, #0
 8067850:	d118      	bne.n	8067884 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8067852:	4b7b      	ldr	r3, [pc, #492]	; (8067a40 <HAL_RCC_OscConfig+0x534>)
 8067854:	681b      	ldr	r3, [r3, #0]
 8067856:	4a7a      	ldr	r2, [pc, #488]	; (8067a40 <HAL_RCC_OscConfig+0x534>)
 8067858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 806785c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 806785e:	f7fc f8a5 	bl	80639ac <HAL_GetTick>
 8067862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8067864:	e008      	b.n	8067878 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8067866:	f7fc f8a1 	bl	80639ac <HAL_GetTick>
 806786a:	4602      	mov	r2, r0
 806786c:	693b      	ldr	r3, [r7, #16]
 806786e:	1ad3      	subs	r3, r2, r3
 8067870:	2b02      	cmp	r3, #2
 8067872:	d901      	bls.n	8067878 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8067874:	2303      	movs	r3, #3
 8067876:	e169      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8067878:	4b71      	ldr	r3, [pc, #452]	; (8067a40 <HAL_RCC_OscConfig+0x534>)
 806787a:	681b      	ldr	r3, [r3, #0]
 806787c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8067880:	2b00      	cmp	r3, #0
 8067882:	d0f0      	beq.n	8067866 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8067884:	687b      	ldr	r3, [r7, #4]
 8067886:	689b      	ldr	r3, [r3, #8]
 8067888:	2b01      	cmp	r3, #1
 806788a:	d106      	bne.n	806789a <HAL_RCC_OscConfig+0x38e>
 806788c:	4b6a      	ldr	r3, [pc, #424]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 806788e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8067890:	4a69      	ldr	r2, [pc, #420]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 8067892:	f043 0301 	orr.w	r3, r3, #1
 8067896:	6713      	str	r3, [r2, #112]	; 0x70
 8067898:	e01c      	b.n	80678d4 <HAL_RCC_OscConfig+0x3c8>
 806789a:	687b      	ldr	r3, [r7, #4]
 806789c:	689b      	ldr	r3, [r3, #8]
 806789e:	2b05      	cmp	r3, #5
 80678a0:	d10c      	bne.n	80678bc <HAL_RCC_OscConfig+0x3b0>
 80678a2:	4b65      	ldr	r3, [pc, #404]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 80678a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80678a6:	4a64      	ldr	r2, [pc, #400]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 80678a8:	f043 0304 	orr.w	r3, r3, #4
 80678ac:	6713      	str	r3, [r2, #112]	; 0x70
 80678ae:	4b62      	ldr	r3, [pc, #392]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 80678b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80678b2:	4a61      	ldr	r2, [pc, #388]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 80678b4:	f043 0301 	orr.w	r3, r3, #1
 80678b8:	6713      	str	r3, [r2, #112]	; 0x70
 80678ba:	e00b      	b.n	80678d4 <HAL_RCC_OscConfig+0x3c8>
 80678bc:	4b5e      	ldr	r3, [pc, #376]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 80678be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80678c0:	4a5d      	ldr	r2, [pc, #372]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 80678c2:	f023 0301 	bic.w	r3, r3, #1
 80678c6:	6713      	str	r3, [r2, #112]	; 0x70
 80678c8:	4b5b      	ldr	r3, [pc, #364]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 80678ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80678cc:	4a5a      	ldr	r2, [pc, #360]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 80678ce:	f023 0304 	bic.w	r3, r3, #4
 80678d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80678d4:	687b      	ldr	r3, [r7, #4]
 80678d6:	689b      	ldr	r3, [r3, #8]
 80678d8:	2b00      	cmp	r3, #0
 80678da:	d015      	beq.n	8067908 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80678dc:	f7fc f866 	bl	80639ac <HAL_GetTick>
 80678e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80678e2:	e00a      	b.n	80678fa <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80678e4:	f7fc f862 	bl	80639ac <HAL_GetTick>
 80678e8:	4602      	mov	r2, r0
 80678ea:	693b      	ldr	r3, [r7, #16]
 80678ec:	1ad3      	subs	r3, r2, r3
 80678ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80678f2:	4293      	cmp	r3, r2
 80678f4:	d901      	bls.n	80678fa <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80678f6:	2303      	movs	r3, #3
 80678f8:	e128      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80678fa:	4b4f      	ldr	r3, [pc, #316]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 80678fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80678fe:	f003 0302 	and.w	r3, r3, #2
 8067902:	2b00      	cmp	r3, #0
 8067904:	d0ee      	beq.n	80678e4 <HAL_RCC_OscConfig+0x3d8>
 8067906:	e014      	b.n	8067932 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8067908:	f7fc f850 	bl	80639ac <HAL_GetTick>
 806790c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 806790e:	e00a      	b.n	8067926 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8067910:	f7fc f84c 	bl	80639ac <HAL_GetTick>
 8067914:	4602      	mov	r2, r0
 8067916:	693b      	ldr	r3, [r7, #16]
 8067918:	1ad3      	subs	r3, r2, r3
 806791a:	f241 3288 	movw	r2, #5000	; 0x1388
 806791e:	4293      	cmp	r3, r2
 8067920:	d901      	bls.n	8067926 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8067922:	2303      	movs	r3, #3
 8067924:	e112      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8067926:	4b44      	ldr	r3, [pc, #272]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 8067928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 806792a:	f003 0302 	and.w	r3, r3, #2
 806792e:	2b00      	cmp	r3, #0
 8067930:	d1ee      	bne.n	8067910 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8067932:	7dfb      	ldrb	r3, [r7, #23]
 8067934:	2b01      	cmp	r3, #1
 8067936:	d105      	bne.n	8067944 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8067938:	4b3f      	ldr	r3, [pc, #252]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 806793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806793c:	4a3e      	ldr	r2, [pc, #248]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 806793e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8067942:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8067944:	687b      	ldr	r3, [r7, #4]
 8067946:	699b      	ldr	r3, [r3, #24]
 8067948:	2b00      	cmp	r3, #0
 806794a:	d00c      	beq.n	8067966 <HAL_RCC_OscConfig+0x45a>
 806794c:	687b      	ldr	r3, [r7, #4]
 806794e:	699b      	ldr	r3, [r3, #24]
 8067950:	2b01      	cmp	r3, #1
 8067952:	d008      	beq.n	8067966 <HAL_RCC_OscConfig+0x45a>
 8067954:	687b      	ldr	r3, [r7, #4]
 8067956:	699b      	ldr	r3, [r3, #24]
 8067958:	2b02      	cmp	r3, #2
 806795a:	d004      	beq.n	8067966 <HAL_RCC_OscConfig+0x45a>
 806795c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8067960:	4836      	ldr	r0, [pc, #216]	; (8067a3c <HAL_RCC_OscConfig+0x530>)
 8067962:	f7fb fbaa 	bl	80630ba <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8067966:	687b      	ldr	r3, [r7, #4]
 8067968:	699b      	ldr	r3, [r3, #24]
 806796a:	2b00      	cmp	r3, #0
 806796c:	f000 80ed 	beq.w	8067b4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8067970:	4b31      	ldr	r3, [pc, #196]	; (8067a38 <HAL_RCC_OscConfig+0x52c>)
 8067972:	689b      	ldr	r3, [r3, #8]
 8067974:	f003 030c 	and.w	r3, r3, #12
 8067978:	2b08      	cmp	r3, #8
 806797a:	f000 80ae 	beq.w	8067ada <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 806797e:	687b      	ldr	r3, [r7, #4]
 8067980:	699b      	ldr	r3, [r3, #24]
 8067982:	2b02      	cmp	r3, #2
 8067984:	f040 8092 	bne.w	8067aac <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8067988:	687b      	ldr	r3, [r7, #4]
 806798a:	69db      	ldr	r3, [r3, #28]
 806798c:	2b00      	cmp	r3, #0
 806798e:	d009      	beq.n	80679a4 <HAL_RCC_OscConfig+0x498>
 8067990:	687b      	ldr	r3, [r7, #4]
 8067992:	69db      	ldr	r3, [r3, #28]
 8067994:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8067998:	d004      	beq.n	80679a4 <HAL_RCC_OscConfig+0x498>
 806799a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 806799e:	4827      	ldr	r0, [pc, #156]	; (8067a3c <HAL_RCC_OscConfig+0x530>)
 80679a0:	f7fb fb8b 	bl	80630ba <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80679a4:	687b      	ldr	r3, [r7, #4]
 80679a6:	6a1b      	ldr	r3, [r3, #32]
 80679a8:	2b3f      	cmp	r3, #63	; 0x3f
 80679aa:	d904      	bls.n	80679b6 <HAL_RCC_OscConfig+0x4aa>
 80679ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80679b0:	4822      	ldr	r0, [pc, #136]	; (8067a3c <HAL_RCC_OscConfig+0x530>)
 80679b2:	f7fb fb82 	bl	80630ba <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80679b6:	687b      	ldr	r3, [r7, #4]
 80679b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80679ba:	2b31      	cmp	r3, #49	; 0x31
 80679bc:	d904      	bls.n	80679c8 <HAL_RCC_OscConfig+0x4bc>
 80679be:	687b      	ldr	r3, [r7, #4]
 80679c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80679c2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80679c6:	d904      	bls.n	80679d2 <HAL_RCC_OscConfig+0x4c6>
 80679c8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80679cc:	481b      	ldr	r0, [pc, #108]	; (8067a3c <HAL_RCC_OscConfig+0x530>)
 80679ce:	f7fb fb74 	bl	80630ba <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80679d2:	687b      	ldr	r3, [r7, #4]
 80679d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80679d6:	2b02      	cmp	r3, #2
 80679d8:	d010      	beq.n	80679fc <HAL_RCC_OscConfig+0x4f0>
 80679da:	687b      	ldr	r3, [r7, #4]
 80679dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80679de:	2b04      	cmp	r3, #4
 80679e0:	d00c      	beq.n	80679fc <HAL_RCC_OscConfig+0x4f0>
 80679e2:	687b      	ldr	r3, [r7, #4]
 80679e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80679e6:	2b06      	cmp	r3, #6
 80679e8:	d008      	beq.n	80679fc <HAL_RCC_OscConfig+0x4f0>
 80679ea:	687b      	ldr	r3, [r7, #4]
 80679ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80679ee:	2b08      	cmp	r3, #8
 80679f0:	d004      	beq.n	80679fc <HAL_RCC_OscConfig+0x4f0>
 80679f2:	f240 11db 	movw	r1, #475	; 0x1db
 80679f6:	4811      	ldr	r0, [pc, #68]	; (8067a3c <HAL_RCC_OscConfig+0x530>)
 80679f8:	f7fb fb5f 	bl	80630ba <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80679fc:	687b      	ldr	r3, [r7, #4]
 80679fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067a00:	2b01      	cmp	r3, #1
 8067a02:	d903      	bls.n	8067a0c <HAL_RCC_OscConfig+0x500>
 8067a04:	687b      	ldr	r3, [r7, #4]
 8067a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067a08:	2b0f      	cmp	r3, #15
 8067a0a:	d904      	bls.n	8067a16 <HAL_RCC_OscConfig+0x50a>
 8067a0c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8067a10:	480a      	ldr	r0, [pc, #40]	; (8067a3c <HAL_RCC_OscConfig+0x530>)
 8067a12:	f7fb fb52 	bl	80630ba <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8067a16:	4b0b      	ldr	r3, [pc, #44]	; (8067a44 <HAL_RCC_OscConfig+0x538>)
 8067a18:	2200      	movs	r2, #0
 8067a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067a1c:	f7fb ffc6 	bl	80639ac <HAL_GetTick>
 8067a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067a22:	e011      	b.n	8067a48 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8067a24:	f7fb ffc2 	bl	80639ac <HAL_GetTick>
 8067a28:	4602      	mov	r2, r0
 8067a2a:	693b      	ldr	r3, [r7, #16]
 8067a2c:	1ad3      	subs	r3, r2, r3
 8067a2e:	2b02      	cmp	r3, #2
 8067a30:	d90a      	bls.n	8067a48 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8067a32:	2303      	movs	r3, #3
 8067a34:	e08a      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
 8067a36:	bf00      	nop
 8067a38:	40023800 	.word	0x40023800
 8067a3c:	08076b74 	.word	0x08076b74
 8067a40:	40007000 	.word	0x40007000
 8067a44:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067a48:	4b42      	ldr	r3, [pc, #264]	; (8067b54 <HAL_RCC_OscConfig+0x648>)
 8067a4a:	681b      	ldr	r3, [r3, #0]
 8067a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067a50:	2b00      	cmp	r3, #0
 8067a52:	d1e7      	bne.n	8067a24 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8067a54:	687b      	ldr	r3, [r7, #4]
 8067a56:	69da      	ldr	r2, [r3, #28]
 8067a58:	687b      	ldr	r3, [r7, #4]
 8067a5a:	6a1b      	ldr	r3, [r3, #32]
 8067a5c:	431a      	orrs	r2, r3
 8067a5e:	687b      	ldr	r3, [r7, #4]
 8067a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8067a62:	019b      	lsls	r3, r3, #6
 8067a64:	431a      	orrs	r2, r3
 8067a66:	687b      	ldr	r3, [r7, #4]
 8067a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067a6a:	085b      	lsrs	r3, r3, #1
 8067a6c:	3b01      	subs	r3, #1
 8067a6e:	041b      	lsls	r3, r3, #16
 8067a70:	431a      	orrs	r2, r3
 8067a72:	687b      	ldr	r3, [r7, #4]
 8067a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067a76:	061b      	lsls	r3, r3, #24
 8067a78:	4936      	ldr	r1, [pc, #216]	; (8067b54 <HAL_RCC_OscConfig+0x648>)
 8067a7a:	4313      	orrs	r3, r2
 8067a7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8067a7e:	4b36      	ldr	r3, [pc, #216]	; (8067b58 <HAL_RCC_OscConfig+0x64c>)
 8067a80:	2201      	movs	r2, #1
 8067a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067a84:	f7fb ff92 	bl	80639ac <HAL_GetTick>
 8067a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8067a8a:	e008      	b.n	8067a9e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8067a8c:	f7fb ff8e 	bl	80639ac <HAL_GetTick>
 8067a90:	4602      	mov	r2, r0
 8067a92:	693b      	ldr	r3, [r7, #16]
 8067a94:	1ad3      	subs	r3, r2, r3
 8067a96:	2b02      	cmp	r3, #2
 8067a98:	d901      	bls.n	8067a9e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8067a9a:	2303      	movs	r3, #3
 8067a9c:	e056      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8067a9e:	4b2d      	ldr	r3, [pc, #180]	; (8067b54 <HAL_RCC_OscConfig+0x648>)
 8067aa0:	681b      	ldr	r3, [r3, #0]
 8067aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067aa6:	2b00      	cmp	r3, #0
 8067aa8:	d0f0      	beq.n	8067a8c <HAL_RCC_OscConfig+0x580>
 8067aaa:	e04e      	b.n	8067b4a <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8067aac:	4b2a      	ldr	r3, [pc, #168]	; (8067b58 <HAL_RCC_OscConfig+0x64c>)
 8067aae:	2200      	movs	r2, #0
 8067ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067ab2:	f7fb ff7b 	bl	80639ac <HAL_GetTick>
 8067ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067ab8:	e008      	b.n	8067acc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8067aba:	f7fb ff77 	bl	80639ac <HAL_GetTick>
 8067abe:	4602      	mov	r2, r0
 8067ac0:	693b      	ldr	r3, [r7, #16]
 8067ac2:	1ad3      	subs	r3, r2, r3
 8067ac4:	2b02      	cmp	r3, #2
 8067ac6:	d901      	bls.n	8067acc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8067ac8:	2303      	movs	r3, #3
 8067aca:	e03f      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067acc:	4b21      	ldr	r3, [pc, #132]	; (8067b54 <HAL_RCC_OscConfig+0x648>)
 8067ace:	681b      	ldr	r3, [r3, #0]
 8067ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067ad4:	2b00      	cmp	r3, #0
 8067ad6:	d1f0      	bne.n	8067aba <HAL_RCC_OscConfig+0x5ae>
 8067ad8:	e037      	b.n	8067b4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8067ada:	687b      	ldr	r3, [r7, #4]
 8067adc:	699b      	ldr	r3, [r3, #24]
 8067ade:	2b01      	cmp	r3, #1
 8067ae0:	d101      	bne.n	8067ae6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8067ae2:	2301      	movs	r3, #1
 8067ae4:	e032      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8067ae6:	4b1b      	ldr	r3, [pc, #108]	; (8067b54 <HAL_RCC_OscConfig+0x648>)
 8067ae8:	685b      	ldr	r3, [r3, #4]
 8067aea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8067aec:	687b      	ldr	r3, [r7, #4]
 8067aee:	699b      	ldr	r3, [r3, #24]
 8067af0:	2b01      	cmp	r3, #1
 8067af2:	d028      	beq.n	8067b46 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8067af4:	68fb      	ldr	r3, [r7, #12]
 8067af6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8067afa:	687b      	ldr	r3, [r7, #4]
 8067afc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8067afe:	429a      	cmp	r2, r3
 8067b00:	d121      	bne.n	8067b46 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8067b02:	68fb      	ldr	r3, [r7, #12]
 8067b04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8067b08:	687b      	ldr	r3, [r7, #4]
 8067b0a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8067b0c:	429a      	cmp	r2, r3
 8067b0e:	d11a      	bne.n	8067b46 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8067b10:	68fa      	ldr	r2, [r7, #12]
 8067b12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8067b16:	4013      	ands	r3, r2
 8067b18:	687a      	ldr	r2, [r7, #4]
 8067b1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8067b1c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8067b1e:	4293      	cmp	r3, r2
 8067b20:	d111      	bne.n	8067b46 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8067b22:	68fb      	ldr	r3, [r7, #12]
 8067b24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8067b28:	687b      	ldr	r3, [r7, #4]
 8067b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067b2c:	085b      	lsrs	r3, r3, #1
 8067b2e:	3b01      	subs	r3, #1
 8067b30:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8067b32:	429a      	cmp	r2, r3
 8067b34:	d107      	bne.n	8067b46 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8067b36:	68fb      	ldr	r3, [r7, #12]
 8067b38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8067b3c:	687b      	ldr	r3, [r7, #4]
 8067b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067b40:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8067b42:	429a      	cmp	r2, r3
 8067b44:	d001      	beq.n	8067b4a <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8067b46:	2301      	movs	r3, #1
 8067b48:	e000      	b.n	8067b4c <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8067b4a:	2300      	movs	r3, #0
}
 8067b4c:	4618      	mov	r0, r3
 8067b4e:	3718      	adds	r7, #24
 8067b50:	46bd      	mov	sp, r7
 8067b52:	bd80      	pop	{r7, pc}
 8067b54:	40023800 	.word	0x40023800
 8067b58:	42470060 	.word	0x42470060

08067b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8067b5c:	b580      	push	{r7, lr}
 8067b5e:	b084      	sub	sp, #16
 8067b60:	af00      	add	r7, sp, #0
 8067b62:	6078      	str	r0, [r7, #4]
 8067b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8067b66:	687b      	ldr	r3, [r7, #4]
 8067b68:	2b00      	cmp	r3, #0
 8067b6a:	d101      	bne.n	8067b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8067b6c:	2301      	movs	r3, #1
 8067b6e:	e174      	b.n	8067e5a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8067b70:	687b      	ldr	r3, [r7, #4]
 8067b72:	681b      	ldr	r3, [r3, #0]
 8067b74:	2b00      	cmp	r3, #0
 8067b76:	d003      	beq.n	8067b80 <HAL_RCC_ClockConfig+0x24>
 8067b78:	687b      	ldr	r3, [r7, #4]
 8067b7a:	681b      	ldr	r3, [r3, #0]
 8067b7c:	2b0f      	cmp	r3, #15
 8067b7e:	d904      	bls.n	8067b8a <HAL_RCC_ClockConfig+0x2e>
 8067b80:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8067b84:	487b      	ldr	r0, [pc, #492]	; (8067d74 <HAL_RCC_ClockConfig+0x218>)
 8067b86:	f7fb fa98 	bl	80630ba <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8067b8a:	683b      	ldr	r3, [r7, #0]
 8067b8c:	2b00      	cmp	r3, #0
 8067b8e:	d019      	beq.n	8067bc4 <HAL_RCC_ClockConfig+0x68>
 8067b90:	683b      	ldr	r3, [r7, #0]
 8067b92:	2b01      	cmp	r3, #1
 8067b94:	d016      	beq.n	8067bc4 <HAL_RCC_ClockConfig+0x68>
 8067b96:	683b      	ldr	r3, [r7, #0]
 8067b98:	2b02      	cmp	r3, #2
 8067b9a:	d013      	beq.n	8067bc4 <HAL_RCC_ClockConfig+0x68>
 8067b9c:	683b      	ldr	r3, [r7, #0]
 8067b9e:	2b03      	cmp	r3, #3
 8067ba0:	d010      	beq.n	8067bc4 <HAL_RCC_ClockConfig+0x68>
 8067ba2:	683b      	ldr	r3, [r7, #0]
 8067ba4:	2b04      	cmp	r3, #4
 8067ba6:	d00d      	beq.n	8067bc4 <HAL_RCC_ClockConfig+0x68>
 8067ba8:	683b      	ldr	r3, [r7, #0]
 8067baa:	2b05      	cmp	r3, #5
 8067bac:	d00a      	beq.n	8067bc4 <HAL_RCC_ClockConfig+0x68>
 8067bae:	683b      	ldr	r3, [r7, #0]
 8067bb0:	2b06      	cmp	r3, #6
 8067bb2:	d007      	beq.n	8067bc4 <HAL_RCC_ClockConfig+0x68>
 8067bb4:	683b      	ldr	r3, [r7, #0]
 8067bb6:	2b07      	cmp	r3, #7
 8067bb8:	d004      	beq.n	8067bc4 <HAL_RCC_ClockConfig+0x68>
 8067bba:	f240 215d 	movw	r1, #605	; 0x25d
 8067bbe:	486d      	ldr	r0, [pc, #436]	; (8067d74 <HAL_RCC_ClockConfig+0x218>)
 8067bc0:	f7fb fa7b 	bl	80630ba <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8067bc4:	4b6c      	ldr	r3, [pc, #432]	; (8067d78 <HAL_RCC_ClockConfig+0x21c>)
 8067bc6:	681b      	ldr	r3, [r3, #0]
 8067bc8:	f003 0307 	and.w	r3, r3, #7
 8067bcc:	683a      	ldr	r2, [r7, #0]
 8067bce:	429a      	cmp	r2, r3
 8067bd0:	d90c      	bls.n	8067bec <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8067bd2:	4b69      	ldr	r3, [pc, #420]	; (8067d78 <HAL_RCC_ClockConfig+0x21c>)
 8067bd4:	683a      	ldr	r2, [r7, #0]
 8067bd6:	b2d2      	uxtb	r2, r2
 8067bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8067bda:	4b67      	ldr	r3, [pc, #412]	; (8067d78 <HAL_RCC_ClockConfig+0x21c>)
 8067bdc:	681b      	ldr	r3, [r3, #0]
 8067bde:	f003 0307 	and.w	r3, r3, #7
 8067be2:	683a      	ldr	r2, [r7, #0]
 8067be4:	429a      	cmp	r2, r3
 8067be6:	d001      	beq.n	8067bec <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8067be8:	2301      	movs	r3, #1
 8067bea:	e136      	b.n	8067e5a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8067bec:	687b      	ldr	r3, [r7, #4]
 8067bee:	681b      	ldr	r3, [r3, #0]
 8067bf0:	f003 0302 	and.w	r3, r3, #2
 8067bf4:	2b00      	cmp	r3, #0
 8067bf6:	d049      	beq.n	8067c8c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8067bf8:	687b      	ldr	r3, [r7, #4]
 8067bfa:	681b      	ldr	r3, [r3, #0]
 8067bfc:	f003 0304 	and.w	r3, r3, #4
 8067c00:	2b00      	cmp	r3, #0
 8067c02:	d005      	beq.n	8067c10 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8067c04:	4b5d      	ldr	r3, [pc, #372]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067c06:	689b      	ldr	r3, [r3, #8]
 8067c08:	4a5c      	ldr	r2, [pc, #368]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8067c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8067c10:	687b      	ldr	r3, [r7, #4]
 8067c12:	681b      	ldr	r3, [r3, #0]
 8067c14:	f003 0308 	and.w	r3, r3, #8
 8067c18:	2b00      	cmp	r3, #0
 8067c1a:	d005      	beq.n	8067c28 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8067c1c:	4b57      	ldr	r3, [pc, #348]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067c1e:	689b      	ldr	r3, [r3, #8]
 8067c20:	4a56      	ldr	r2, [pc, #344]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8067c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8067c28:	687b      	ldr	r3, [r7, #4]
 8067c2a:	689b      	ldr	r3, [r3, #8]
 8067c2c:	2b00      	cmp	r3, #0
 8067c2e:	d024      	beq.n	8067c7a <HAL_RCC_ClockConfig+0x11e>
 8067c30:	687b      	ldr	r3, [r7, #4]
 8067c32:	689b      	ldr	r3, [r3, #8]
 8067c34:	2b80      	cmp	r3, #128	; 0x80
 8067c36:	d020      	beq.n	8067c7a <HAL_RCC_ClockConfig+0x11e>
 8067c38:	687b      	ldr	r3, [r7, #4]
 8067c3a:	689b      	ldr	r3, [r3, #8]
 8067c3c:	2b90      	cmp	r3, #144	; 0x90
 8067c3e:	d01c      	beq.n	8067c7a <HAL_RCC_ClockConfig+0x11e>
 8067c40:	687b      	ldr	r3, [r7, #4]
 8067c42:	689b      	ldr	r3, [r3, #8]
 8067c44:	2ba0      	cmp	r3, #160	; 0xa0
 8067c46:	d018      	beq.n	8067c7a <HAL_RCC_ClockConfig+0x11e>
 8067c48:	687b      	ldr	r3, [r7, #4]
 8067c4a:	689b      	ldr	r3, [r3, #8]
 8067c4c:	2bb0      	cmp	r3, #176	; 0xb0
 8067c4e:	d014      	beq.n	8067c7a <HAL_RCC_ClockConfig+0x11e>
 8067c50:	687b      	ldr	r3, [r7, #4]
 8067c52:	689b      	ldr	r3, [r3, #8]
 8067c54:	2bc0      	cmp	r3, #192	; 0xc0
 8067c56:	d010      	beq.n	8067c7a <HAL_RCC_ClockConfig+0x11e>
 8067c58:	687b      	ldr	r3, [r7, #4]
 8067c5a:	689b      	ldr	r3, [r3, #8]
 8067c5c:	2bd0      	cmp	r3, #208	; 0xd0
 8067c5e:	d00c      	beq.n	8067c7a <HAL_RCC_ClockConfig+0x11e>
 8067c60:	687b      	ldr	r3, [r7, #4]
 8067c62:	689b      	ldr	r3, [r3, #8]
 8067c64:	2be0      	cmp	r3, #224	; 0xe0
 8067c66:	d008      	beq.n	8067c7a <HAL_RCC_ClockConfig+0x11e>
 8067c68:	687b      	ldr	r3, [r7, #4]
 8067c6a:	689b      	ldr	r3, [r3, #8]
 8067c6c:	2bf0      	cmp	r3, #240	; 0xf0
 8067c6e:	d004      	beq.n	8067c7a <HAL_RCC_ClockConfig+0x11e>
 8067c70:	f44f 7120 	mov.w	r1, #640	; 0x280
 8067c74:	483f      	ldr	r0, [pc, #252]	; (8067d74 <HAL_RCC_ClockConfig+0x218>)
 8067c76:	f7fb fa20 	bl	80630ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8067c7a:	4b40      	ldr	r3, [pc, #256]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067c7c:	689b      	ldr	r3, [r3, #8]
 8067c7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8067c82:	687b      	ldr	r3, [r7, #4]
 8067c84:	689b      	ldr	r3, [r3, #8]
 8067c86:	493d      	ldr	r1, [pc, #244]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067c88:	4313      	orrs	r3, r2
 8067c8a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8067c8c:	687b      	ldr	r3, [r7, #4]
 8067c8e:	681b      	ldr	r3, [r3, #0]
 8067c90:	f003 0301 	and.w	r3, r3, #1
 8067c94:	2b00      	cmp	r3, #0
 8067c96:	d059      	beq.n	8067d4c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8067c98:	687b      	ldr	r3, [r7, #4]
 8067c9a:	685b      	ldr	r3, [r3, #4]
 8067c9c:	2b00      	cmp	r3, #0
 8067c9e:	d010      	beq.n	8067cc2 <HAL_RCC_ClockConfig+0x166>
 8067ca0:	687b      	ldr	r3, [r7, #4]
 8067ca2:	685b      	ldr	r3, [r3, #4]
 8067ca4:	2b01      	cmp	r3, #1
 8067ca6:	d00c      	beq.n	8067cc2 <HAL_RCC_ClockConfig+0x166>
 8067ca8:	687b      	ldr	r3, [r7, #4]
 8067caa:	685b      	ldr	r3, [r3, #4]
 8067cac:	2b02      	cmp	r3, #2
 8067cae:	d008      	beq.n	8067cc2 <HAL_RCC_ClockConfig+0x166>
 8067cb0:	687b      	ldr	r3, [r7, #4]
 8067cb2:	685b      	ldr	r3, [r3, #4]
 8067cb4:	2b03      	cmp	r3, #3
 8067cb6:	d004      	beq.n	8067cc2 <HAL_RCC_ClockConfig+0x166>
 8067cb8:	f240 2187 	movw	r1, #647	; 0x287
 8067cbc:	482d      	ldr	r0, [pc, #180]	; (8067d74 <HAL_RCC_ClockConfig+0x218>)
 8067cbe:	f7fb f9fc 	bl	80630ba <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8067cc2:	687b      	ldr	r3, [r7, #4]
 8067cc4:	685b      	ldr	r3, [r3, #4]
 8067cc6:	2b01      	cmp	r3, #1
 8067cc8:	d107      	bne.n	8067cda <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8067cca:	4b2c      	ldr	r3, [pc, #176]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067ccc:	681b      	ldr	r3, [r3, #0]
 8067cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8067cd2:	2b00      	cmp	r3, #0
 8067cd4:	d119      	bne.n	8067d0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8067cd6:	2301      	movs	r3, #1
 8067cd8:	e0bf      	b.n	8067e5a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8067cda:	687b      	ldr	r3, [r7, #4]
 8067cdc:	685b      	ldr	r3, [r3, #4]
 8067cde:	2b02      	cmp	r3, #2
 8067ce0:	d003      	beq.n	8067cea <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8067ce2:	687b      	ldr	r3, [r7, #4]
 8067ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8067ce6:	2b03      	cmp	r3, #3
 8067ce8:	d107      	bne.n	8067cfa <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8067cea:	4b24      	ldr	r3, [pc, #144]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067cec:	681b      	ldr	r3, [r3, #0]
 8067cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067cf2:	2b00      	cmp	r3, #0
 8067cf4:	d109      	bne.n	8067d0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8067cf6:	2301      	movs	r3, #1
 8067cf8:	e0af      	b.n	8067e5a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8067cfa:	4b20      	ldr	r3, [pc, #128]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067cfc:	681b      	ldr	r3, [r3, #0]
 8067cfe:	f003 0302 	and.w	r3, r3, #2
 8067d02:	2b00      	cmp	r3, #0
 8067d04:	d101      	bne.n	8067d0a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8067d06:	2301      	movs	r3, #1
 8067d08:	e0a7      	b.n	8067e5a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8067d0a:	4b1c      	ldr	r3, [pc, #112]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067d0c:	689b      	ldr	r3, [r3, #8]
 8067d0e:	f023 0203 	bic.w	r2, r3, #3
 8067d12:	687b      	ldr	r3, [r7, #4]
 8067d14:	685b      	ldr	r3, [r3, #4]
 8067d16:	4919      	ldr	r1, [pc, #100]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067d18:	4313      	orrs	r3, r2
 8067d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8067d1c:	f7fb fe46 	bl	80639ac <HAL_GetTick>
 8067d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8067d22:	e00a      	b.n	8067d3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8067d24:	f7fb fe42 	bl	80639ac <HAL_GetTick>
 8067d28:	4602      	mov	r2, r0
 8067d2a:	68fb      	ldr	r3, [r7, #12]
 8067d2c:	1ad3      	subs	r3, r2, r3
 8067d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8067d32:	4293      	cmp	r3, r2
 8067d34:	d901      	bls.n	8067d3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8067d36:	2303      	movs	r3, #3
 8067d38:	e08f      	b.n	8067e5a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8067d3a:	4b10      	ldr	r3, [pc, #64]	; (8067d7c <HAL_RCC_ClockConfig+0x220>)
 8067d3c:	689b      	ldr	r3, [r3, #8]
 8067d3e:	f003 020c 	and.w	r2, r3, #12
 8067d42:	687b      	ldr	r3, [r7, #4]
 8067d44:	685b      	ldr	r3, [r3, #4]
 8067d46:	009b      	lsls	r3, r3, #2
 8067d48:	429a      	cmp	r2, r3
 8067d4a:	d1eb      	bne.n	8067d24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8067d4c:	4b0a      	ldr	r3, [pc, #40]	; (8067d78 <HAL_RCC_ClockConfig+0x21c>)
 8067d4e:	681b      	ldr	r3, [r3, #0]
 8067d50:	f003 0307 	and.w	r3, r3, #7
 8067d54:	683a      	ldr	r2, [r7, #0]
 8067d56:	429a      	cmp	r2, r3
 8067d58:	d212      	bcs.n	8067d80 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8067d5a:	4b07      	ldr	r3, [pc, #28]	; (8067d78 <HAL_RCC_ClockConfig+0x21c>)
 8067d5c:	683a      	ldr	r2, [r7, #0]
 8067d5e:	b2d2      	uxtb	r2, r2
 8067d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8067d62:	4b05      	ldr	r3, [pc, #20]	; (8067d78 <HAL_RCC_ClockConfig+0x21c>)
 8067d64:	681b      	ldr	r3, [r3, #0]
 8067d66:	f003 0307 	and.w	r3, r3, #7
 8067d6a:	683a      	ldr	r2, [r7, #0]
 8067d6c:	429a      	cmp	r2, r3
 8067d6e:	d007      	beq.n	8067d80 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8067d70:	2301      	movs	r3, #1
 8067d72:	e072      	b.n	8067e5a <HAL_RCC_ClockConfig+0x2fe>
 8067d74:	08076b74 	.word	0x08076b74
 8067d78:	40023c00 	.word	0x40023c00
 8067d7c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8067d80:	687b      	ldr	r3, [r7, #4]
 8067d82:	681b      	ldr	r3, [r3, #0]
 8067d84:	f003 0304 	and.w	r3, r3, #4
 8067d88:	2b00      	cmp	r3, #0
 8067d8a:	d025      	beq.n	8067dd8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8067d8c:	687b      	ldr	r3, [r7, #4]
 8067d8e:	68db      	ldr	r3, [r3, #12]
 8067d90:	2b00      	cmp	r3, #0
 8067d92:	d018      	beq.n	8067dc6 <HAL_RCC_ClockConfig+0x26a>
 8067d94:	687b      	ldr	r3, [r7, #4]
 8067d96:	68db      	ldr	r3, [r3, #12]
 8067d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8067d9c:	d013      	beq.n	8067dc6 <HAL_RCC_ClockConfig+0x26a>
 8067d9e:	687b      	ldr	r3, [r7, #4]
 8067da0:	68db      	ldr	r3, [r3, #12]
 8067da2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8067da6:	d00e      	beq.n	8067dc6 <HAL_RCC_ClockConfig+0x26a>
 8067da8:	687b      	ldr	r3, [r7, #4]
 8067daa:	68db      	ldr	r3, [r3, #12]
 8067dac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8067db0:	d009      	beq.n	8067dc6 <HAL_RCC_ClockConfig+0x26a>
 8067db2:	687b      	ldr	r3, [r7, #4]
 8067db4:	68db      	ldr	r3, [r3, #12]
 8067db6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8067dba:	d004      	beq.n	8067dc6 <HAL_RCC_ClockConfig+0x26a>
 8067dbc:	f240 21c5 	movw	r1, #709	; 0x2c5
 8067dc0:	4828      	ldr	r0, [pc, #160]	; (8067e64 <HAL_RCC_ClockConfig+0x308>)
 8067dc2:	f7fb f97a 	bl	80630ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8067dc6:	4b28      	ldr	r3, [pc, #160]	; (8067e68 <HAL_RCC_ClockConfig+0x30c>)
 8067dc8:	689b      	ldr	r3, [r3, #8]
 8067dca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8067dce:	687b      	ldr	r3, [r7, #4]
 8067dd0:	68db      	ldr	r3, [r3, #12]
 8067dd2:	4925      	ldr	r1, [pc, #148]	; (8067e68 <HAL_RCC_ClockConfig+0x30c>)
 8067dd4:	4313      	orrs	r3, r2
 8067dd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8067dd8:	687b      	ldr	r3, [r7, #4]
 8067dda:	681b      	ldr	r3, [r3, #0]
 8067ddc:	f003 0308 	and.w	r3, r3, #8
 8067de0:	2b00      	cmp	r3, #0
 8067de2:	d026      	beq.n	8067e32 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8067de4:	687b      	ldr	r3, [r7, #4]
 8067de6:	691b      	ldr	r3, [r3, #16]
 8067de8:	2b00      	cmp	r3, #0
 8067dea:	d018      	beq.n	8067e1e <HAL_RCC_ClockConfig+0x2c2>
 8067dec:	687b      	ldr	r3, [r7, #4]
 8067dee:	691b      	ldr	r3, [r3, #16]
 8067df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8067df4:	d013      	beq.n	8067e1e <HAL_RCC_ClockConfig+0x2c2>
 8067df6:	687b      	ldr	r3, [r7, #4]
 8067df8:	691b      	ldr	r3, [r3, #16]
 8067dfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8067dfe:	d00e      	beq.n	8067e1e <HAL_RCC_ClockConfig+0x2c2>
 8067e00:	687b      	ldr	r3, [r7, #4]
 8067e02:	691b      	ldr	r3, [r3, #16]
 8067e04:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8067e08:	d009      	beq.n	8067e1e <HAL_RCC_ClockConfig+0x2c2>
 8067e0a:	687b      	ldr	r3, [r7, #4]
 8067e0c:	691b      	ldr	r3, [r3, #16]
 8067e0e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8067e12:	d004      	beq.n	8067e1e <HAL_RCC_ClockConfig+0x2c2>
 8067e14:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8067e18:	4812      	ldr	r0, [pc, #72]	; (8067e64 <HAL_RCC_ClockConfig+0x308>)
 8067e1a:	f7fb f94e 	bl	80630ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8067e1e:	4b12      	ldr	r3, [pc, #72]	; (8067e68 <HAL_RCC_ClockConfig+0x30c>)
 8067e20:	689b      	ldr	r3, [r3, #8]
 8067e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8067e26:	687b      	ldr	r3, [r7, #4]
 8067e28:	691b      	ldr	r3, [r3, #16]
 8067e2a:	00db      	lsls	r3, r3, #3
 8067e2c:	490e      	ldr	r1, [pc, #56]	; (8067e68 <HAL_RCC_ClockConfig+0x30c>)
 8067e2e:	4313      	orrs	r3, r2
 8067e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8067e32:	f000 f821 	bl	8067e78 <HAL_RCC_GetSysClockFreq>
 8067e36:	4602      	mov	r2, r0
 8067e38:	4b0b      	ldr	r3, [pc, #44]	; (8067e68 <HAL_RCC_ClockConfig+0x30c>)
 8067e3a:	689b      	ldr	r3, [r3, #8]
 8067e3c:	091b      	lsrs	r3, r3, #4
 8067e3e:	f003 030f 	and.w	r3, r3, #15
 8067e42:	490a      	ldr	r1, [pc, #40]	; (8067e6c <HAL_RCC_ClockConfig+0x310>)
 8067e44:	5ccb      	ldrb	r3, [r1, r3]
 8067e46:	fa22 f303 	lsr.w	r3, r2, r3
 8067e4a:	4a09      	ldr	r2, [pc, #36]	; (8067e70 <HAL_RCC_ClockConfig+0x314>)
 8067e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8067e4e:	4b09      	ldr	r3, [pc, #36]	; (8067e74 <HAL_RCC_ClockConfig+0x318>)
 8067e50:	681b      	ldr	r3, [r3, #0]
 8067e52:	4618      	mov	r0, r3
 8067e54:	f7fb fa74 	bl	8063340 <HAL_InitTick>

  return HAL_OK;
 8067e58:	2300      	movs	r3, #0
}
 8067e5a:	4618      	mov	r0, r3
 8067e5c:	3710      	adds	r7, #16
 8067e5e:	46bd      	mov	sp, r7
 8067e60:	bd80      	pop	{r7, pc}
 8067e62:	bf00      	nop
 8067e64:	08076b74 	.word	0x08076b74
 8067e68:	40023800 	.word	0x40023800
 8067e6c:	08076df0 	.word	0x08076df0
 8067e70:	20000000 	.word	0x20000000
 8067e74:	20000004 	.word	0x20000004

08067e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8067e78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8067e7c:	b084      	sub	sp, #16
 8067e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8067e80:	2300      	movs	r3, #0
 8067e82:	607b      	str	r3, [r7, #4]
 8067e84:	2300      	movs	r3, #0
 8067e86:	60fb      	str	r3, [r7, #12]
 8067e88:	2300      	movs	r3, #0
 8067e8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8067e8c:	2300      	movs	r3, #0
 8067e8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8067e90:	4b67      	ldr	r3, [pc, #412]	; (8068030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067e92:	689b      	ldr	r3, [r3, #8]
 8067e94:	f003 030c 	and.w	r3, r3, #12
 8067e98:	2b08      	cmp	r3, #8
 8067e9a:	d00d      	beq.n	8067eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8067e9c:	2b08      	cmp	r3, #8
 8067e9e:	f200 80bd 	bhi.w	806801c <HAL_RCC_GetSysClockFreq+0x1a4>
 8067ea2:	2b00      	cmp	r3, #0
 8067ea4:	d002      	beq.n	8067eac <HAL_RCC_GetSysClockFreq+0x34>
 8067ea6:	2b04      	cmp	r3, #4
 8067ea8:	d003      	beq.n	8067eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8067eaa:	e0b7      	b.n	806801c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8067eac:	4b61      	ldr	r3, [pc, #388]	; (8068034 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8067eae:	60bb      	str	r3, [r7, #8]
       break;
 8067eb0:	e0b7      	b.n	8068022 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8067eb2:	4b61      	ldr	r3, [pc, #388]	; (8068038 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8067eb4:	60bb      	str	r3, [r7, #8]
      break;
 8067eb6:	e0b4      	b.n	8068022 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8067eb8:	4b5d      	ldr	r3, [pc, #372]	; (8068030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067eba:	685b      	ldr	r3, [r3, #4]
 8067ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8067ec0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8067ec2:	4b5b      	ldr	r3, [pc, #364]	; (8068030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067ec4:	685b      	ldr	r3, [r3, #4]
 8067ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8067eca:	2b00      	cmp	r3, #0
 8067ecc:	d04d      	beq.n	8067f6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8067ece:	4b58      	ldr	r3, [pc, #352]	; (8068030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067ed0:	685b      	ldr	r3, [r3, #4]
 8067ed2:	099b      	lsrs	r3, r3, #6
 8067ed4:	461a      	mov	r2, r3
 8067ed6:	f04f 0300 	mov.w	r3, #0
 8067eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8067ede:	f04f 0100 	mov.w	r1, #0
 8067ee2:	ea02 0800 	and.w	r8, r2, r0
 8067ee6:	ea03 0901 	and.w	r9, r3, r1
 8067eea:	4640      	mov	r0, r8
 8067eec:	4649      	mov	r1, r9
 8067eee:	f04f 0200 	mov.w	r2, #0
 8067ef2:	f04f 0300 	mov.w	r3, #0
 8067ef6:	014b      	lsls	r3, r1, #5
 8067ef8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8067efc:	0142      	lsls	r2, r0, #5
 8067efe:	4610      	mov	r0, r2
 8067f00:	4619      	mov	r1, r3
 8067f02:	ebb0 0008 	subs.w	r0, r0, r8
 8067f06:	eb61 0109 	sbc.w	r1, r1, r9
 8067f0a:	f04f 0200 	mov.w	r2, #0
 8067f0e:	f04f 0300 	mov.w	r3, #0
 8067f12:	018b      	lsls	r3, r1, #6
 8067f14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8067f18:	0182      	lsls	r2, r0, #6
 8067f1a:	1a12      	subs	r2, r2, r0
 8067f1c:	eb63 0301 	sbc.w	r3, r3, r1
 8067f20:	f04f 0000 	mov.w	r0, #0
 8067f24:	f04f 0100 	mov.w	r1, #0
 8067f28:	00d9      	lsls	r1, r3, #3
 8067f2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8067f2e:	00d0      	lsls	r0, r2, #3
 8067f30:	4602      	mov	r2, r0
 8067f32:	460b      	mov	r3, r1
 8067f34:	eb12 0208 	adds.w	r2, r2, r8
 8067f38:	eb43 0309 	adc.w	r3, r3, r9
 8067f3c:	f04f 0000 	mov.w	r0, #0
 8067f40:	f04f 0100 	mov.w	r1, #0
 8067f44:	0259      	lsls	r1, r3, #9
 8067f46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8067f4a:	0250      	lsls	r0, r2, #9
 8067f4c:	4602      	mov	r2, r0
 8067f4e:	460b      	mov	r3, r1
 8067f50:	4610      	mov	r0, r2
 8067f52:	4619      	mov	r1, r3
 8067f54:	687b      	ldr	r3, [r7, #4]
 8067f56:	461a      	mov	r2, r3
 8067f58:	f04f 0300 	mov.w	r3, #0
 8067f5c:	f7f8 fefc 	bl	8060d58 <__aeabi_uldivmod>
 8067f60:	4602      	mov	r2, r0
 8067f62:	460b      	mov	r3, r1
 8067f64:	4613      	mov	r3, r2
 8067f66:	60fb      	str	r3, [r7, #12]
 8067f68:	e04a      	b.n	8068000 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8067f6a:	4b31      	ldr	r3, [pc, #196]	; (8068030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067f6c:	685b      	ldr	r3, [r3, #4]
 8067f6e:	099b      	lsrs	r3, r3, #6
 8067f70:	461a      	mov	r2, r3
 8067f72:	f04f 0300 	mov.w	r3, #0
 8067f76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8067f7a:	f04f 0100 	mov.w	r1, #0
 8067f7e:	ea02 0400 	and.w	r4, r2, r0
 8067f82:	ea03 0501 	and.w	r5, r3, r1
 8067f86:	4620      	mov	r0, r4
 8067f88:	4629      	mov	r1, r5
 8067f8a:	f04f 0200 	mov.w	r2, #0
 8067f8e:	f04f 0300 	mov.w	r3, #0
 8067f92:	014b      	lsls	r3, r1, #5
 8067f94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8067f98:	0142      	lsls	r2, r0, #5
 8067f9a:	4610      	mov	r0, r2
 8067f9c:	4619      	mov	r1, r3
 8067f9e:	1b00      	subs	r0, r0, r4
 8067fa0:	eb61 0105 	sbc.w	r1, r1, r5
 8067fa4:	f04f 0200 	mov.w	r2, #0
 8067fa8:	f04f 0300 	mov.w	r3, #0
 8067fac:	018b      	lsls	r3, r1, #6
 8067fae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8067fb2:	0182      	lsls	r2, r0, #6
 8067fb4:	1a12      	subs	r2, r2, r0
 8067fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8067fba:	f04f 0000 	mov.w	r0, #0
 8067fbe:	f04f 0100 	mov.w	r1, #0
 8067fc2:	00d9      	lsls	r1, r3, #3
 8067fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8067fc8:	00d0      	lsls	r0, r2, #3
 8067fca:	4602      	mov	r2, r0
 8067fcc:	460b      	mov	r3, r1
 8067fce:	1912      	adds	r2, r2, r4
 8067fd0:	eb45 0303 	adc.w	r3, r5, r3
 8067fd4:	f04f 0000 	mov.w	r0, #0
 8067fd8:	f04f 0100 	mov.w	r1, #0
 8067fdc:	0299      	lsls	r1, r3, #10
 8067fde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8067fe2:	0290      	lsls	r0, r2, #10
 8067fe4:	4602      	mov	r2, r0
 8067fe6:	460b      	mov	r3, r1
 8067fe8:	4610      	mov	r0, r2
 8067fea:	4619      	mov	r1, r3
 8067fec:	687b      	ldr	r3, [r7, #4]
 8067fee:	461a      	mov	r2, r3
 8067ff0:	f04f 0300 	mov.w	r3, #0
 8067ff4:	f7f8 feb0 	bl	8060d58 <__aeabi_uldivmod>
 8067ff8:	4602      	mov	r2, r0
 8067ffa:	460b      	mov	r3, r1
 8067ffc:	4613      	mov	r3, r2
 8067ffe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8068000:	4b0b      	ldr	r3, [pc, #44]	; (8068030 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8068002:	685b      	ldr	r3, [r3, #4]
 8068004:	0c1b      	lsrs	r3, r3, #16
 8068006:	f003 0303 	and.w	r3, r3, #3
 806800a:	3301      	adds	r3, #1
 806800c:	005b      	lsls	r3, r3, #1
 806800e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8068010:	68fa      	ldr	r2, [r7, #12]
 8068012:	683b      	ldr	r3, [r7, #0]
 8068014:	fbb2 f3f3 	udiv	r3, r2, r3
 8068018:	60bb      	str	r3, [r7, #8]
      break;
 806801a:	e002      	b.n	8068022 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 806801c:	4b05      	ldr	r3, [pc, #20]	; (8068034 <HAL_RCC_GetSysClockFreq+0x1bc>)
 806801e:	60bb      	str	r3, [r7, #8]
      break;
 8068020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8068022:	68bb      	ldr	r3, [r7, #8]
}
 8068024:	4618      	mov	r0, r3
 8068026:	3710      	adds	r7, #16
 8068028:	46bd      	mov	sp, r7
 806802a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 806802e:	bf00      	nop
 8068030:	40023800 	.word	0x40023800
 8068034:	00f42400 	.word	0x00f42400
 8068038:	007a1200 	.word	0x007a1200

0806803c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 806803c:	b480      	push	{r7}
 806803e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8068040:	4b03      	ldr	r3, [pc, #12]	; (8068050 <HAL_RCC_GetHCLKFreq+0x14>)
 8068042:	681b      	ldr	r3, [r3, #0]
}
 8068044:	4618      	mov	r0, r3
 8068046:	46bd      	mov	sp, r7
 8068048:	f85d 7b04 	ldr.w	r7, [sp], #4
 806804c:	4770      	bx	lr
 806804e:	bf00      	nop
 8068050:	20000000 	.word	0x20000000

08068054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8068054:	b580      	push	{r7, lr}
 8068056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8068058:	f7ff fff0 	bl	806803c <HAL_RCC_GetHCLKFreq>
 806805c:	4602      	mov	r2, r0
 806805e:	4b05      	ldr	r3, [pc, #20]	; (8068074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8068060:	689b      	ldr	r3, [r3, #8]
 8068062:	0a9b      	lsrs	r3, r3, #10
 8068064:	f003 0307 	and.w	r3, r3, #7
 8068068:	4903      	ldr	r1, [pc, #12]	; (8068078 <HAL_RCC_GetPCLK1Freq+0x24>)
 806806a:	5ccb      	ldrb	r3, [r1, r3]
 806806c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8068070:	4618      	mov	r0, r3
 8068072:	bd80      	pop	{r7, pc}
 8068074:	40023800 	.word	0x40023800
 8068078:	08076e00 	.word	0x08076e00

0806807c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 806807c:	b580      	push	{r7, lr}
 806807e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8068080:	f7ff ffdc 	bl	806803c <HAL_RCC_GetHCLKFreq>
 8068084:	4602      	mov	r2, r0
 8068086:	4b05      	ldr	r3, [pc, #20]	; (806809c <HAL_RCC_GetPCLK2Freq+0x20>)
 8068088:	689b      	ldr	r3, [r3, #8]
 806808a:	0b5b      	lsrs	r3, r3, #13
 806808c:	f003 0307 	and.w	r3, r3, #7
 8068090:	4903      	ldr	r1, [pc, #12]	; (80680a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8068092:	5ccb      	ldrb	r3, [r1, r3]
 8068094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8068098:	4618      	mov	r0, r3
 806809a:	bd80      	pop	{r7, pc}
 806809c:	40023800 	.word	0x40023800
 80680a0:	08076e00 	.word	0x08076e00

080680a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80680a4:	b480      	push	{r7}
 80680a6:	b083      	sub	sp, #12
 80680a8:	af00      	add	r7, sp, #0
 80680aa:	6078      	str	r0, [r7, #4]
 80680ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80680ae:	687b      	ldr	r3, [r7, #4]
 80680b0:	220f      	movs	r2, #15
 80680b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80680b4:	4b12      	ldr	r3, [pc, #72]	; (8068100 <HAL_RCC_GetClockConfig+0x5c>)
 80680b6:	689b      	ldr	r3, [r3, #8]
 80680b8:	f003 0203 	and.w	r2, r3, #3
 80680bc:	687b      	ldr	r3, [r7, #4]
 80680be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80680c0:	4b0f      	ldr	r3, [pc, #60]	; (8068100 <HAL_RCC_GetClockConfig+0x5c>)
 80680c2:	689b      	ldr	r3, [r3, #8]
 80680c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80680c8:	687b      	ldr	r3, [r7, #4]
 80680ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80680cc:	4b0c      	ldr	r3, [pc, #48]	; (8068100 <HAL_RCC_GetClockConfig+0x5c>)
 80680ce:	689b      	ldr	r3, [r3, #8]
 80680d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80680d4:	687b      	ldr	r3, [r7, #4]
 80680d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80680d8:	4b09      	ldr	r3, [pc, #36]	; (8068100 <HAL_RCC_GetClockConfig+0x5c>)
 80680da:	689b      	ldr	r3, [r3, #8]
 80680dc:	08db      	lsrs	r3, r3, #3
 80680de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80680e2:	687b      	ldr	r3, [r7, #4]
 80680e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80680e6:	4b07      	ldr	r3, [pc, #28]	; (8068104 <HAL_RCC_GetClockConfig+0x60>)
 80680e8:	681b      	ldr	r3, [r3, #0]
 80680ea:	f003 0207 	and.w	r2, r3, #7
 80680ee:	683b      	ldr	r3, [r7, #0]
 80680f0:	601a      	str	r2, [r3, #0]
}
 80680f2:	bf00      	nop
 80680f4:	370c      	adds	r7, #12
 80680f6:	46bd      	mov	sp, r7
 80680f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80680fc:	4770      	bx	lr
 80680fe:	bf00      	nop
 8068100:	40023800 	.word	0x40023800
 8068104:	40023c00 	.word	0x40023c00

08068108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8068108:	b580      	push	{r7, lr}
 806810a:	b082      	sub	sp, #8
 806810c:	af00      	add	r7, sp, #0
 806810e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8068110:	687b      	ldr	r3, [r7, #4]
 8068112:	2b00      	cmp	r3, #0
 8068114:	d101      	bne.n	806811a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8068116:	2301      	movs	r3, #1
 8068118:	e18c      	b.n	8068434 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 806811a:	687b      	ldr	r3, [r7, #4]
 806811c:	681b      	ldr	r3, [r3, #0]
 806811e:	4a75      	ldr	r2, [pc, #468]	; (80682f4 <HAL_SPI_Init+0x1ec>)
 8068120:	4293      	cmp	r3, r2
 8068122:	d018      	beq.n	8068156 <HAL_SPI_Init+0x4e>
 8068124:	687b      	ldr	r3, [r7, #4]
 8068126:	681b      	ldr	r3, [r3, #0]
 8068128:	4a73      	ldr	r2, [pc, #460]	; (80682f8 <HAL_SPI_Init+0x1f0>)
 806812a:	4293      	cmp	r3, r2
 806812c:	d013      	beq.n	8068156 <HAL_SPI_Init+0x4e>
 806812e:	687b      	ldr	r3, [r7, #4]
 8068130:	681b      	ldr	r3, [r3, #0]
 8068132:	4a72      	ldr	r2, [pc, #456]	; (80682fc <HAL_SPI_Init+0x1f4>)
 8068134:	4293      	cmp	r3, r2
 8068136:	d00e      	beq.n	8068156 <HAL_SPI_Init+0x4e>
 8068138:	687b      	ldr	r3, [r7, #4]
 806813a:	681b      	ldr	r3, [r3, #0]
 806813c:	4a70      	ldr	r2, [pc, #448]	; (8068300 <HAL_SPI_Init+0x1f8>)
 806813e:	4293      	cmp	r3, r2
 8068140:	d009      	beq.n	8068156 <HAL_SPI_Init+0x4e>
 8068142:	687b      	ldr	r3, [r7, #4]
 8068144:	681b      	ldr	r3, [r3, #0]
 8068146:	4a6f      	ldr	r2, [pc, #444]	; (8068304 <HAL_SPI_Init+0x1fc>)
 8068148:	4293      	cmp	r3, r2
 806814a:	d004      	beq.n	8068156 <HAL_SPI_Init+0x4e>
 806814c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8068150:	486d      	ldr	r0, [pc, #436]	; (8068308 <HAL_SPI_Init+0x200>)
 8068152:	f7fa ffb2 	bl	80630ba <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8068156:	687b      	ldr	r3, [r7, #4]
 8068158:	685b      	ldr	r3, [r3, #4]
 806815a:	2b00      	cmp	r3, #0
 806815c:	d009      	beq.n	8068172 <HAL_SPI_Init+0x6a>
 806815e:	687b      	ldr	r3, [r7, #4]
 8068160:	685b      	ldr	r3, [r3, #4]
 8068162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8068166:	d004      	beq.n	8068172 <HAL_SPI_Init+0x6a>
 8068168:	f240 1143 	movw	r1, #323	; 0x143
 806816c:	4866      	ldr	r0, [pc, #408]	; (8068308 <HAL_SPI_Init+0x200>)
 806816e:	f7fa ffa4 	bl	80630ba <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8068172:	687b      	ldr	r3, [r7, #4]
 8068174:	689b      	ldr	r3, [r3, #8]
 8068176:	2b00      	cmp	r3, #0
 8068178:	d00e      	beq.n	8068198 <HAL_SPI_Init+0x90>
 806817a:	687b      	ldr	r3, [r7, #4]
 806817c:	689b      	ldr	r3, [r3, #8]
 806817e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8068182:	d009      	beq.n	8068198 <HAL_SPI_Init+0x90>
 8068184:	687b      	ldr	r3, [r7, #4]
 8068186:	689b      	ldr	r3, [r3, #8]
 8068188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 806818c:	d004      	beq.n	8068198 <HAL_SPI_Init+0x90>
 806818e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8068192:	485d      	ldr	r0, [pc, #372]	; (8068308 <HAL_SPI_Init+0x200>)
 8068194:	f7fa ff91 	bl	80630ba <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8068198:	687b      	ldr	r3, [r7, #4]
 806819a:	68db      	ldr	r3, [r3, #12]
 806819c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80681a0:	d008      	beq.n	80681b4 <HAL_SPI_Init+0xac>
 80681a2:	687b      	ldr	r3, [r7, #4]
 80681a4:	68db      	ldr	r3, [r3, #12]
 80681a6:	2b00      	cmp	r3, #0
 80681a8:	d004      	beq.n	80681b4 <HAL_SPI_Init+0xac>
 80681aa:	f240 1145 	movw	r1, #325	; 0x145
 80681ae:	4856      	ldr	r0, [pc, #344]	; (8068308 <HAL_SPI_Init+0x200>)
 80681b0:	f7fa ff83 	bl	80630ba <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80681b4:	687b      	ldr	r3, [r7, #4]
 80681b6:	699b      	ldr	r3, [r3, #24]
 80681b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80681bc:	d00d      	beq.n	80681da <HAL_SPI_Init+0xd2>
 80681be:	687b      	ldr	r3, [r7, #4]
 80681c0:	699b      	ldr	r3, [r3, #24]
 80681c2:	2b00      	cmp	r3, #0
 80681c4:	d009      	beq.n	80681da <HAL_SPI_Init+0xd2>
 80681c6:	687b      	ldr	r3, [r7, #4]
 80681c8:	699b      	ldr	r3, [r3, #24]
 80681ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80681ce:	d004      	beq.n	80681da <HAL_SPI_Init+0xd2>
 80681d0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80681d4:	484c      	ldr	r0, [pc, #304]	; (8068308 <HAL_SPI_Init+0x200>)
 80681d6:	f7fa ff70 	bl	80630ba <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80681da:	687b      	ldr	r3, [r7, #4]
 80681dc:	69db      	ldr	r3, [r3, #28]
 80681de:	2b00      	cmp	r3, #0
 80681e0:	d020      	beq.n	8068224 <HAL_SPI_Init+0x11c>
 80681e2:	687b      	ldr	r3, [r7, #4]
 80681e4:	69db      	ldr	r3, [r3, #28]
 80681e6:	2b08      	cmp	r3, #8
 80681e8:	d01c      	beq.n	8068224 <HAL_SPI_Init+0x11c>
 80681ea:	687b      	ldr	r3, [r7, #4]
 80681ec:	69db      	ldr	r3, [r3, #28]
 80681ee:	2b10      	cmp	r3, #16
 80681f0:	d018      	beq.n	8068224 <HAL_SPI_Init+0x11c>
 80681f2:	687b      	ldr	r3, [r7, #4]
 80681f4:	69db      	ldr	r3, [r3, #28]
 80681f6:	2b18      	cmp	r3, #24
 80681f8:	d014      	beq.n	8068224 <HAL_SPI_Init+0x11c>
 80681fa:	687b      	ldr	r3, [r7, #4]
 80681fc:	69db      	ldr	r3, [r3, #28]
 80681fe:	2b20      	cmp	r3, #32
 8068200:	d010      	beq.n	8068224 <HAL_SPI_Init+0x11c>
 8068202:	687b      	ldr	r3, [r7, #4]
 8068204:	69db      	ldr	r3, [r3, #28]
 8068206:	2b28      	cmp	r3, #40	; 0x28
 8068208:	d00c      	beq.n	8068224 <HAL_SPI_Init+0x11c>
 806820a:	687b      	ldr	r3, [r7, #4]
 806820c:	69db      	ldr	r3, [r3, #28]
 806820e:	2b30      	cmp	r3, #48	; 0x30
 8068210:	d008      	beq.n	8068224 <HAL_SPI_Init+0x11c>
 8068212:	687b      	ldr	r3, [r7, #4]
 8068214:	69db      	ldr	r3, [r3, #28]
 8068216:	2b38      	cmp	r3, #56	; 0x38
 8068218:	d004      	beq.n	8068224 <HAL_SPI_Init+0x11c>
 806821a:	f240 1147 	movw	r1, #327	; 0x147
 806821e:	483a      	ldr	r0, [pc, #232]	; (8068308 <HAL_SPI_Init+0x200>)
 8068220:	f7fa ff4b 	bl	80630ba <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8068224:	687b      	ldr	r3, [r7, #4]
 8068226:	6a1b      	ldr	r3, [r3, #32]
 8068228:	2b00      	cmp	r3, #0
 806822a:	d008      	beq.n	806823e <HAL_SPI_Init+0x136>
 806822c:	687b      	ldr	r3, [r7, #4]
 806822e:	6a1b      	ldr	r3, [r3, #32]
 8068230:	2b80      	cmp	r3, #128	; 0x80
 8068232:	d004      	beq.n	806823e <HAL_SPI_Init+0x136>
 8068234:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8068238:	4833      	ldr	r0, [pc, #204]	; (8068308 <HAL_SPI_Init+0x200>)
 806823a:	f7fa ff3e 	bl	80630ba <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 806823e:	687b      	ldr	r3, [r7, #4]
 8068240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8068242:	2b00      	cmp	r3, #0
 8068244:	d008      	beq.n	8068258 <HAL_SPI_Init+0x150>
 8068246:	687b      	ldr	r3, [r7, #4]
 8068248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806824a:	2b10      	cmp	r3, #16
 806824c:	d004      	beq.n	8068258 <HAL_SPI_Init+0x150>
 806824e:	f240 1149 	movw	r1, #329	; 0x149
 8068252:	482d      	ldr	r0, [pc, #180]	; (8068308 <HAL_SPI_Init+0x200>)
 8068254:	f7fa ff31 	bl	80630ba <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8068258:	687b      	ldr	r3, [r7, #4]
 806825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806825c:	2b00      	cmp	r3, #0
 806825e:	d155      	bne.n	806830c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8068260:	687b      	ldr	r3, [r7, #4]
 8068262:	691b      	ldr	r3, [r3, #16]
 8068264:	2b00      	cmp	r3, #0
 8068266:	d008      	beq.n	806827a <HAL_SPI_Init+0x172>
 8068268:	687b      	ldr	r3, [r7, #4]
 806826a:	691b      	ldr	r3, [r3, #16]
 806826c:	2b02      	cmp	r3, #2
 806826e:	d004      	beq.n	806827a <HAL_SPI_Init+0x172>
 8068270:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8068274:	4824      	ldr	r0, [pc, #144]	; (8068308 <HAL_SPI_Init+0x200>)
 8068276:	f7fa ff20 	bl	80630ba <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 806827a:	687b      	ldr	r3, [r7, #4]
 806827c:	695b      	ldr	r3, [r3, #20]
 806827e:	2b00      	cmp	r3, #0
 8068280:	d008      	beq.n	8068294 <HAL_SPI_Init+0x18c>
 8068282:	687b      	ldr	r3, [r7, #4]
 8068284:	695b      	ldr	r3, [r3, #20]
 8068286:	2b01      	cmp	r3, #1
 8068288:	d004      	beq.n	8068294 <HAL_SPI_Init+0x18c>
 806828a:	f240 114d 	movw	r1, #333	; 0x14d
 806828e:	481e      	ldr	r0, [pc, #120]	; (8068308 <HAL_SPI_Init+0x200>)
 8068290:	f7fa ff13 	bl	80630ba <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8068294:	687b      	ldr	r3, [r7, #4]
 8068296:	685b      	ldr	r3, [r3, #4]
 8068298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 806829c:	d125      	bne.n	80682ea <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 806829e:	687b      	ldr	r3, [r7, #4]
 80682a0:	69db      	ldr	r3, [r3, #28]
 80682a2:	2b00      	cmp	r3, #0
 80682a4:	d05d      	beq.n	8068362 <HAL_SPI_Init+0x25a>
 80682a6:	687b      	ldr	r3, [r7, #4]
 80682a8:	69db      	ldr	r3, [r3, #28]
 80682aa:	2b08      	cmp	r3, #8
 80682ac:	d059      	beq.n	8068362 <HAL_SPI_Init+0x25a>
 80682ae:	687b      	ldr	r3, [r7, #4]
 80682b0:	69db      	ldr	r3, [r3, #28]
 80682b2:	2b10      	cmp	r3, #16
 80682b4:	d055      	beq.n	8068362 <HAL_SPI_Init+0x25a>
 80682b6:	687b      	ldr	r3, [r7, #4]
 80682b8:	69db      	ldr	r3, [r3, #28]
 80682ba:	2b18      	cmp	r3, #24
 80682bc:	d051      	beq.n	8068362 <HAL_SPI_Init+0x25a>
 80682be:	687b      	ldr	r3, [r7, #4]
 80682c0:	69db      	ldr	r3, [r3, #28]
 80682c2:	2b20      	cmp	r3, #32
 80682c4:	d04d      	beq.n	8068362 <HAL_SPI_Init+0x25a>
 80682c6:	687b      	ldr	r3, [r7, #4]
 80682c8:	69db      	ldr	r3, [r3, #28]
 80682ca:	2b28      	cmp	r3, #40	; 0x28
 80682cc:	d049      	beq.n	8068362 <HAL_SPI_Init+0x25a>
 80682ce:	687b      	ldr	r3, [r7, #4]
 80682d0:	69db      	ldr	r3, [r3, #28]
 80682d2:	2b30      	cmp	r3, #48	; 0x30
 80682d4:	d045      	beq.n	8068362 <HAL_SPI_Init+0x25a>
 80682d6:	687b      	ldr	r3, [r7, #4]
 80682d8:	69db      	ldr	r3, [r3, #28]
 80682da:	2b38      	cmp	r3, #56	; 0x38
 80682dc:	d041      	beq.n	8068362 <HAL_SPI_Init+0x25a>
 80682de:	f240 1151 	movw	r1, #337	; 0x151
 80682e2:	4809      	ldr	r0, [pc, #36]	; (8068308 <HAL_SPI_Init+0x200>)
 80682e4:	f7fa fee9 	bl	80630ba <assert_failed>
 80682e8:	e03b      	b.n	8068362 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80682ea:	687b      	ldr	r3, [r7, #4]
 80682ec:	2200      	movs	r2, #0
 80682ee:	61da      	str	r2, [r3, #28]
 80682f0:	e037      	b.n	8068362 <HAL_SPI_Init+0x25a>
 80682f2:	bf00      	nop
 80682f4:	40013000 	.word	0x40013000
 80682f8:	40003800 	.word	0x40003800
 80682fc:	40003c00 	.word	0x40003c00
 8068300:	40013400 	.word	0x40013400
 8068304:	40015000 	.word	0x40015000
 8068308:	08076bac 	.word	0x08076bac
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 806830c:	687b      	ldr	r3, [r7, #4]
 806830e:	69db      	ldr	r3, [r3, #28]
 8068310:	2b00      	cmp	r3, #0
 8068312:	d020      	beq.n	8068356 <HAL_SPI_Init+0x24e>
 8068314:	687b      	ldr	r3, [r7, #4]
 8068316:	69db      	ldr	r3, [r3, #28]
 8068318:	2b08      	cmp	r3, #8
 806831a:	d01c      	beq.n	8068356 <HAL_SPI_Init+0x24e>
 806831c:	687b      	ldr	r3, [r7, #4]
 806831e:	69db      	ldr	r3, [r3, #28]
 8068320:	2b10      	cmp	r3, #16
 8068322:	d018      	beq.n	8068356 <HAL_SPI_Init+0x24e>
 8068324:	687b      	ldr	r3, [r7, #4]
 8068326:	69db      	ldr	r3, [r3, #28]
 8068328:	2b18      	cmp	r3, #24
 806832a:	d014      	beq.n	8068356 <HAL_SPI_Init+0x24e>
 806832c:	687b      	ldr	r3, [r7, #4]
 806832e:	69db      	ldr	r3, [r3, #28]
 8068330:	2b20      	cmp	r3, #32
 8068332:	d010      	beq.n	8068356 <HAL_SPI_Init+0x24e>
 8068334:	687b      	ldr	r3, [r7, #4]
 8068336:	69db      	ldr	r3, [r3, #28]
 8068338:	2b28      	cmp	r3, #40	; 0x28
 806833a:	d00c      	beq.n	8068356 <HAL_SPI_Init+0x24e>
 806833c:	687b      	ldr	r3, [r7, #4]
 806833e:	69db      	ldr	r3, [r3, #28]
 8068340:	2b30      	cmp	r3, #48	; 0x30
 8068342:	d008      	beq.n	8068356 <HAL_SPI_Init+0x24e>
 8068344:	687b      	ldr	r3, [r7, #4]
 8068346:	69db      	ldr	r3, [r3, #28]
 8068348:	2b38      	cmp	r3, #56	; 0x38
 806834a:	d004      	beq.n	8068356 <HAL_SPI_Init+0x24e>
 806834c:	f240 115b 	movw	r1, #347	; 0x15b
 8068350:	483a      	ldr	r0, [pc, #232]	; (806843c <HAL_SPI_Init+0x334>)
 8068352:	f7fa feb2 	bl	80630ba <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8068356:	687b      	ldr	r3, [r7, #4]
 8068358:	2200      	movs	r2, #0
 806835a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 806835c:	687b      	ldr	r3, [r7, #4]
 806835e:	2200      	movs	r2, #0
 8068360:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8068362:	687b      	ldr	r3, [r7, #4]
 8068364:	2200      	movs	r2, #0
 8068366:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8068368:	687b      	ldr	r3, [r7, #4]
 806836a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 806836e:	b2db      	uxtb	r3, r3
 8068370:	2b00      	cmp	r3, #0
 8068372:	d106      	bne.n	8068382 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8068374:	687b      	ldr	r3, [r7, #4]
 8068376:	2200      	movs	r2, #0
 8068378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 806837c:	6878      	ldr	r0, [r7, #4]
 806837e:	f7fa ff6b 	bl	8063258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8068382:	687b      	ldr	r3, [r7, #4]
 8068384:	2202      	movs	r2, #2
 8068386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 806838a:	687b      	ldr	r3, [r7, #4]
 806838c:	681b      	ldr	r3, [r3, #0]
 806838e:	681a      	ldr	r2, [r3, #0]
 8068390:	687b      	ldr	r3, [r7, #4]
 8068392:	681b      	ldr	r3, [r3, #0]
 8068394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8068398:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 806839a:	687b      	ldr	r3, [r7, #4]
 806839c:	685b      	ldr	r3, [r3, #4]
 806839e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80683a2:	687b      	ldr	r3, [r7, #4]
 80683a4:	689b      	ldr	r3, [r3, #8]
 80683a6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80683aa:	431a      	orrs	r2, r3
 80683ac:	687b      	ldr	r3, [r7, #4]
 80683ae:	68db      	ldr	r3, [r3, #12]
 80683b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80683b4:	431a      	orrs	r2, r3
 80683b6:	687b      	ldr	r3, [r7, #4]
 80683b8:	691b      	ldr	r3, [r3, #16]
 80683ba:	f003 0302 	and.w	r3, r3, #2
 80683be:	431a      	orrs	r2, r3
 80683c0:	687b      	ldr	r3, [r7, #4]
 80683c2:	695b      	ldr	r3, [r3, #20]
 80683c4:	f003 0301 	and.w	r3, r3, #1
 80683c8:	431a      	orrs	r2, r3
 80683ca:	687b      	ldr	r3, [r7, #4]
 80683cc:	699b      	ldr	r3, [r3, #24]
 80683ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80683d2:	431a      	orrs	r2, r3
 80683d4:	687b      	ldr	r3, [r7, #4]
 80683d6:	69db      	ldr	r3, [r3, #28]
 80683d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80683dc:	431a      	orrs	r2, r3
 80683de:	687b      	ldr	r3, [r7, #4]
 80683e0:	6a1b      	ldr	r3, [r3, #32]
 80683e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80683e6:	ea42 0103 	orr.w	r1, r2, r3
 80683ea:	687b      	ldr	r3, [r7, #4]
 80683ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80683ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80683f2:	687b      	ldr	r3, [r7, #4]
 80683f4:	681b      	ldr	r3, [r3, #0]
 80683f6:	430a      	orrs	r2, r1
 80683f8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80683fa:	687b      	ldr	r3, [r7, #4]
 80683fc:	699b      	ldr	r3, [r3, #24]
 80683fe:	0c1b      	lsrs	r3, r3, #16
 8068400:	f003 0104 	and.w	r1, r3, #4
 8068404:	687b      	ldr	r3, [r7, #4]
 8068406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8068408:	f003 0210 	and.w	r2, r3, #16
 806840c:	687b      	ldr	r3, [r7, #4]
 806840e:	681b      	ldr	r3, [r3, #0]
 8068410:	430a      	orrs	r2, r1
 8068412:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8068414:	687b      	ldr	r3, [r7, #4]
 8068416:	681b      	ldr	r3, [r3, #0]
 8068418:	69da      	ldr	r2, [r3, #28]
 806841a:	687b      	ldr	r3, [r7, #4]
 806841c:	681b      	ldr	r3, [r3, #0]
 806841e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8068422:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8068424:	687b      	ldr	r3, [r7, #4]
 8068426:	2200      	movs	r2, #0
 8068428:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 806842a:	687b      	ldr	r3, [r7, #4]
 806842c:	2201      	movs	r2, #1
 806842e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8068432:	2300      	movs	r3, #0
}
 8068434:	4618      	mov	r0, r3
 8068436:	3708      	adds	r7, #8
 8068438:	46bd      	mov	sp, r7
 806843a:	bd80      	pop	{r7, pc}
 806843c:	08076bac 	.word	0x08076bac

08068440 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8068440:	b580      	push	{r7, lr}
 8068442:	b08c      	sub	sp, #48	; 0x30
 8068444:	af00      	add	r7, sp, #0
 8068446:	60f8      	str	r0, [r7, #12]
 8068448:	60b9      	str	r1, [r7, #8]
 806844a:	607a      	str	r2, [r7, #4]
 806844c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 806844e:	2301      	movs	r3, #1
 8068450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8068452:	2300      	movs	r3, #0
 8068454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8068458:	68fb      	ldr	r3, [r7, #12]
 806845a:	689b      	ldr	r3, [r3, #8]
 806845c:	2b00      	cmp	r3, #0
 806845e:	d004      	beq.n	806846a <HAL_SPI_TransmitReceive+0x2a>
 8068460:	f240 417e 	movw	r1, #1150	; 0x47e
 8068464:	4884      	ldr	r0, [pc, #528]	; (8068678 <HAL_SPI_TransmitReceive+0x238>)
 8068466:	f7fa fe28 	bl	80630ba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 806846a:	68fb      	ldr	r3, [r7, #12]
 806846c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8068470:	2b01      	cmp	r3, #1
 8068472:	d101      	bne.n	8068478 <HAL_SPI_TransmitReceive+0x38>
 8068474:	2302      	movs	r3, #2
 8068476:	e18d      	b.n	8068794 <HAL_SPI_TransmitReceive+0x354>
 8068478:	68fb      	ldr	r3, [r7, #12]
 806847a:	2201      	movs	r2, #1
 806847c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8068480:	f7fb fa94 	bl	80639ac <HAL_GetTick>
 8068484:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8068486:	68fb      	ldr	r3, [r7, #12]
 8068488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 806848c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8068490:	68fb      	ldr	r3, [r7, #12]
 8068492:	685b      	ldr	r3, [r3, #4]
 8068494:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8068496:	887b      	ldrh	r3, [r7, #2]
 8068498:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 806849a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 806849e:	2b01      	cmp	r3, #1
 80684a0:	d00f      	beq.n	80684c2 <HAL_SPI_TransmitReceive+0x82>
 80684a2:	69fb      	ldr	r3, [r7, #28]
 80684a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80684a8:	d107      	bne.n	80684ba <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80684aa:	68fb      	ldr	r3, [r7, #12]
 80684ac:	689b      	ldr	r3, [r3, #8]
 80684ae:	2b00      	cmp	r3, #0
 80684b0:	d103      	bne.n	80684ba <HAL_SPI_TransmitReceive+0x7a>
 80684b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80684b6:	2b04      	cmp	r3, #4
 80684b8:	d003      	beq.n	80684c2 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80684ba:	2302      	movs	r3, #2
 80684bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80684c0:	e15e      	b.n	8068780 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80684c2:	68bb      	ldr	r3, [r7, #8]
 80684c4:	2b00      	cmp	r3, #0
 80684c6:	d005      	beq.n	80684d4 <HAL_SPI_TransmitReceive+0x94>
 80684c8:	687b      	ldr	r3, [r7, #4]
 80684ca:	2b00      	cmp	r3, #0
 80684cc:	d002      	beq.n	80684d4 <HAL_SPI_TransmitReceive+0x94>
 80684ce:	887b      	ldrh	r3, [r7, #2]
 80684d0:	2b00      	cmp	r3, #0
 80684d2:	d103      	bne.n	80684dc <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 80684d4:	2301      	movs	r3, #1
 80684d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80684da:	e151      	b.n	8068780 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80684dc:	68fb      	ldr	r3, [r7, #12]
 80684de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80684e2:	b2db      	uxtb	r3, r3
 80684e4:	2b04      	cmp	r3, #4
 80684e6:	d003      	beq.n	80684f0 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80684e8:	68fb      	ldr	r3, [r7, #12]
 80684ea:	2205      	movs	r2, #5
 80684ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80684f0:	68fb      	ldr	r3, [r7, #12]
 80684f2:	2200      	movs	r2, #0
 80684f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80684f6:	68fb      	ldr	r3, [r7, #12]
 80684f8:	687a      	ldr	r2, [r7, #4]
 80684fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80684fc:	68fb      	ldr	r3, [r7, #12]
 80684fe:	887a      	ldrh	r2, [r7, #2]
 8068500:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8068502:	68fb      	ldr	r3, [r7, #12]
 8068504:	887a      	ldrh	r2, [r7, #2]
 8068506:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8068508:	68fb      	ldr	r3, [r7, #12]
 806850a:	68ba      	ldr	r2, [r7, #8]
 806850c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 806850e:	68fb      	ldr	r3, [r7, #12]
 8068510:	887a      	ldrh	r2, [r7, #2]
 8068512:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8068514:	68fb      	ldr	r3, [r7, #12]
 8068516:	887a      	ldrh	r2, [r7, #2]
 8068518:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 806851a:	68fb      	ldr	r3, [r7, #12]
 806851c:	2200      	movs	r2, #0
 806851e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8068520:	68fb      	ldr	r3, [r7, #12]
 8068522:	2200      	movs	r2, #0
 8068524:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8068526:	68fb      	ldr	r3, [r7, #12]
 8068528:	681b      	ldr	r3, [r3, #0]
 806852a:	681b      	ldr	r3, [r3, #0]
 806852c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8068530:	2b40      	cmp	r3, #64	; 0x40
 8068532:	d007      	beq.n	8068544 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8068534:	68fb      	ldr	r3, [r7, #12]
 8068536:	681b      	ldr	r3, [r3, #0]
 8068538:	681a      	ldr	r2, [r3, #0]
 806853a:	68fb      	ldr	r3, [r7, #12]
 806853c:	681b      	ldr	r3, [r3, #0]
 806853e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8068542:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8068544:	68fb      	ldr	r3, [r7, #12]
 8068546:	68db      	ldr	r3, [r3, #12]
 8068548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 806854c:	d178      	bne.n	8068640 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 806854e:	68fb      	ldr	r3, [r7, #12]
 8068550:	685b      	ldr	r3, [r3, #4]
 8068552:	2b00      	cmp	r3, #0
 8068554:	d002      	beq.n	806855c <HAL_SPI_TransmitReceive+0x11c>
 8068556:	8b7b      	ldrh	r3, [r7, #26]
 8068558:	2b01      	cmp	r3, #1
 806855a:	d166      	bne.n	806862a <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 806855c:	68fb      	ldr	r3, [r7, #12]
 806855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068560:	881a      	ldrh	r2, [r3, #0]
 8068562:	68fb      	ldr	r3, [r7, #12]
 8068564:	681b      	ldr	r3, [r3, #0]
 8068566:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8068568:	68fb      	ldr	r3, [r7, #12]
 806856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806856c:	1c9a      	adds	r2, r3, #2
 806856e:	68fb      	ldr	r3, [r7, #12]
 8068570:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8068572:	68fb      	ldr	r3, [r7, #12]
 8068574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068576:	b29b      	uxth	r3, r3
 8068578:	3b01      	subs	r3, #1
 806857a:	b29a      	uxth	r2, r3
 806857c:	68fb      	ldr	r3, [r7, #12]
 806857e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8068580:	e053      	b.n	806862a <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8068582:	68fb      	ldr	r3, [r7, #12]
 8068584:	681b      	ldr	r3, [r3, #0]
 8068586:	689b      	ldr	r3, [r3, #8]
 8068588:	f003 0302 	and.w	r3, r3, #2
 806858c:	2b02      	cmp	r3, #2
 806858e:	d11b      	bne.n	80685c8 <HAL_SPI_TransmitReceive+0x188>
 8068590:	68fb      	ldr	r3, [r7, #12]
 8068592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068594:	b29b      	uxth	r3, r3
 8068596:	2b00      	cmp	r3, #0
 8068598:	d016      	beq.n	80685c8 <HAL_SPI_TransmitReceive+0x188>
 806859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806859c:	2b01      	cmp	r3, #1
 806859e:	d113      	bne.n	80685c8 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80685a0:	68fb      	ldr	r3, [r7, #12]
 80685a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80685a4:	881a      	ldrh	r2, [r3, #0]
 80685a6:	68fb      	ldr	r3, [r7, #12]
 80685a8:	681b      	ldr	r3, [r3, #0]
 80685aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80685ac:	68fb      	ldr	r3, [r7, #12]
 80685ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80685b0:	1c9a      	adds	r2, r3, #2
 80685b2:	68fb      	ldr	r3, [r7, #12]
 80685b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80685b6:	68fb      	ldr	r3, [r7, #12]
 80685b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80685ba:	b29b      	uxth	r3, r3
 80685bc:	3b01      	subs	r3, #1
 80685be:	b29a      	uxth	r2, r3
 80685c0:	68fb      	ldr	r3, [r7, #12]
 80685c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80685c4:	2300      	movs	r3, #0
 80685c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80685c8:	68fb      	ldr	r3, [r7, #12]
 80685ca:	681b      	ldr	r3, [r3, #0]
 80685cc:	689b      	ldr	r3, [r3, #8]
 80685ce:	f003 0301 	and.w	r3, r3, #1
 80685d2:	2b01      	cmp	r3, #1
 80685d4:	d119      	bne.n	806860a <HAL_SPI_TransmitReceive+0x1ca>
 80685d6:	68fb      	ldr	r3, [r7, #12]
 80685d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80685da:	b29b      	uxth	r3, r3
 80685dc:	2b00      	cmp	r3, #0
 80685de:	d014      	beq.n	806860a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80685e0:	68fb      	ldr	r3, [r7, #12]
 80685e2:	681b      	ldr	r3, [r3, #0]
 80685e4:	68da      	ldr	r2, [r3, #12]
 80685e6:	68fb      	ldr	r3, [r7, #12]
 80685e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80685ea:	b292      	uxth	r2, r2
 80685ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80685ee:	68fb      	ldr	r3, [r7, #12]
 80685f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80685f2:	1c9a      	adds	r2, r3, #2
 80685f4:	68fb      	ldr	r3, [r7, #12]
 80685f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80685f8:	68fb      	ldr	r3, [r7, #12]
 80685fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80685fc:	b29b      	uxth	r3, r3
 80685fe:	3b01      	subs	r3, #1
 8068600:	b29a      	uxth	r2, r3
 8068602:	68fb      	ldr	r3, [r7, #12]
 8068604:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8068606:	2301      	movs	r3, #1
 8068608:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 806860a:	f7fb f9cf 	bl	80639ac <HAL_GetTick>
 806860e:	4602      	mov	r2, r0
 8068610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8068612:	1ad3      	subs	r3, r2, r3
 8068614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8068616:	429a      	cmp	r2, r3
 8068618:	d807      	bhi.n	806862a <HAL_SPI_TransmitReceive+0x1ea>
 806861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806861c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8068620:	d003      	beq.n	806862a <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8068622:	2303      	movs	r3, #3
 8068624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8068628:	e0aa      	b.n	8068780 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 806862a:	68fb      	ldr	r3, [r7, #12]
 806862c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 806862e:	b29b      	uxth	r3, r3
 8068630:	2b00      	cmp	r3, #0
 8068632:	d1a6      	bne.n	8068582 <HAL_SPI_TransmitReceive+0x142>
 8068634:	68fb      	ldr	r3, [r7, #12]
 8068636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068638:	b29b      	uxth	r3, r3
 806863a:	2b00      	cmp	r3, #0
 806863c:	d1a1      	bne.n	8068582 <HAL_SPI_TransmitReceive+0x142>
 806863e:	e07f      	b.n	8068740 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8068640:	68fb      	ldr	r3, [r7, #12]
 8068642:	685b      	ldr	r3, [r3, #4]
 8068644:	2b00      	cmp	r3, #0
 8068646:	d002      	beq.n	806864e <HAL_SPI_TransmitReceive+0x20e>
 8068648:	8b7b      	ldrh	r3, [r7, #26]
 806864a:	2b01      	cmp	r3, #1
 806864c:	d16e      	bne.n	806872c <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 806864e:	68fb      	ldr	r3, [r7, #12]
 8068650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8068652:	68fb      	ldr	r3, [r7, #12]
 8068654:	681b      	ldr	r3, [r3, #0]
 8068656:	330c      	adds	r3, #12
 8068658:	7812      	ldrb	r2, [r2, #0]
 806865a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 806865c:	68fb      	ldr	r3, [r7, #12]
 806865e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068660:	1c5a      	adds	r2, r3, #1
 8068662:	68fb      	ldr	r3, [r7, #12]
 8068664:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8068666:	68fb      	ldr	r3, [r7, #12]
 8068668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 806866a:	b29b      	uxth	r3, r3
 806866c:	3b01      	subs	r3, #1
 806866e:	b29a      	uxth	r2, r3
 8068670:	68fb      	ldr	r3, [r7, #12]
 8068672:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8068674:	e05a      	b.n	806872c <HAL_SPI_TransmitReceive+0x2ec>
 8068676:	bf00      	nop
 8068678:	08076bac 	.word	0x08076bac
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 806867c:	68fb      	ldr	r3, [r7, #12]
 806867e:	681b      	ldr	r3, [r3, #0]
 8068680:	689b      	ldr	r3, [r3, #8]
 8068682:	f003 0302 	and.w	r3, r3, #2
 8068686:	2b02      	cmp	r3, #2
 8068688:	d11c      	bne.n	80686c4 <HAL_SPI_TransmitReceive+0x284>
 806868a:	68fb      	ldr	r3, [r7, #12]
 806868c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 806868e:	b29b      	uxth	r3, r3
 8068690:	2b00      	cmp	r3, #0
 8068692:	d017      	beq.n	80686c4 <HAL_SPI_TransmitReceive+0x284>
 8068694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8068696:	2b01      	cmp	r3, #1
 8068698:	d114      	bne.n	80686c4 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 806869a:	68fb      	ldr	r3, [r7, #12]
 806869c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806869e:	68fb      	ldr	r3, [r7, #12]
 80686a0:	681b      	ldr	r3, [r3, #0]
 80686a2:	330c      	adds	r3, #12
 80686a4:	7812      	ldrb	r2, [r2, #0]
 80686a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80686a8:	68fb      	ldr	r3, [r7, #12]
 80686aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80686ac:	1c5a      	adds	r2, r3, #1
 80686ae:	68fb      	ldr	r3, [r7, #12]
 80686b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80686b2:	68fb      	ldr	r3, [r7, #12]
 80686b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80686b6:	b29b      	uxth	r3, r3
 80686b8:	3b01      	subs	r3, #1
 80686ba:	b29a      	uxth	r2, r3
 80686bc:	68fb      	ldr	r3, [r7, #12]
 80686be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80686c0:	2300      	movs	r3, #0
 80686c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80686c4:	68fb      	ldr	r3, [r7, #12]
 80686c6:	681b      	ldr	r3, [r3, #0]
 80686c8:	689b      	ldr	r3, [r3, #8]
 80686ca:	f003 0301 	and.w	r3, r3, #1
 80686ce:	2b01      	cmp	r3, #1
 80686d0:	d119      	bne.n	8068706 <HAL_SPI_TransmitReceive+0x2c6>
 80686d2:	68fb      	ldr	r3, [r7, #12]
 80686d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80686d6:	b29b      	uxth	r3, r3
 80686d8:	2b00      	cmp	r3, #0
 80686da:	d014      	beq.n	8068706 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80686dc:	68fb      	ldr	r3, [r7, #12]
 80686de:	681b      	ldr	r3, [r3, #0]
 80686e0:	68da      	ldr	r2, [r3, #12]
 80686e2:	68fb      	ldr	r3, [r7, #12]
 80686e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80686e6:	b2d2      	uxtb	r2, r2
 80686e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80686ea:	68fb      	ldr	r3, [r7, #12]
 80686ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80686ee:	1c5a      	adds	r2, r3, #1
 80686f0:	68fb      	ldr	r3, [r7, #12]
 80686f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80686f4:	68fb      	ldr	r3, [r7, #12]
 80686f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80686f8:	b29b      	uxth	r3, r3
 80686fa:	3b01      	subs	r3, #1
 80686fc:	b29a      	uxth	r2, r3
 80686fe:	68fb      	ldr	r3, [r7, #12]
 8068700:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8068702:	2301      	movs	r3, #1
 8068704:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8068706:	f7fb f951 	bl	80639ac <HAL_GetTick>
 806870a:	4602      	mov	r2, r0
 806870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806870e:	1ad3      	subs	r3, r2, r3
 8068710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8068712:	429a      	cmp	r2, r3
 8068714:	d803      	bhi.n	806871e <HAL_SPI_TransmitReceive+0x2de>
 8068716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8068718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806871c:	d102      	bne.n	8068724 <HAL_SPI_TransmitReceive+0x2e4>
 806871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8068720:	2b00      	cmp	r3, #0
 8068722:	d103      	bne.n	806872c <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8068724:	2303      	movs	r3, #3
 8068726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 806872a:	e029      	b.n	8068780 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 806872c:	68fb      	ldr	r3, [r7, #12]
 806872e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068730:	b29b      	uxth	r3, r3
 8068732:	2b00      	cmp	r3, #0
 8068734:	d1a2      	bne.n	806867c <HAL_SPI_TransmitReceive+0x23c>
 8068736:	68fb      	ldr	r3, [r7, #12]
 8068738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 806873a:	b29b      	uxth	r3, r3
 806873c:	2b00      	cmp	r3, #0
 806873e:	d19d      	bne.n	806867c <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8068740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8068742:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8068744:	68f8      	ldr	r0, [r7, #12]
 8068746:	f000 f8b1 	bl	80688ac <SPI_EndRxTxTransaction>
 806874a:	4603      	mov	r3, r0
 806874c:	2b00      	cmp	r3, #0
 806874e:	d006      	beq.n	806875e <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8068750:	2301      	movs	r3, #1
 8068752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8068756:	68fb      	ldr	r3, [r7, #12]
 8068758:	2220      	movs	r2, #32
 806875a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 806875c:	e010      	b.n	8068780 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 806875e:	68fb      	ldr	r3, [r7, #12]
 8068760:	689b      	ldr	r3, [r3, #8]
 8068762:	2b00      	cmp	r3, #0
 8068764:	d10b      	bne.n	806877e <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8068766:	2300      	movs	r3, #0
 8068768:	617b      	str	r3, [r7, #20]
 806876a:	68fb      	ldr	r3, [r7, #12]
 806876c:	681b      	ldr	r3, [r3, #0]
 806876e:	68db      	ldr	r3, [r3, #12]
 8068770:	617b      	str	r3, [r7, #20]
 8068772:	68fb      	ldr	r3, [r7, #12]
 8068774:	681b      	ldr	r3, [r3, #0]
 8068776:	689b      	ldr	r3, [r3, #8]
 8068778:	617b      	str	r3, [r7, #20]
 806877a:	697b      	ldr	r3, [r7, #20]
 806877c:	e000      	b.n	8068780 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 806877e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8068780:	68fb      	ldr	r3, [r7, #12]
 8068782:	2201      	movs	r2, #1
 8068784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8068788:	68fb      	ldr	r3, [r7, #12]
 806878a:	2200      	movs	r2, #0
 806878c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8068790:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8068794:	4618      	mov	r0, r3
 8068796:	3730      	adds	r7, #48	; 0x30
 8068798:	46bd      	mov	sp, r7
 806879a:	bd80      	pop	{r7, pc}

0806879c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 806879c:	b580      	push	{r7, lr}
 806879e:	b088      	sub	sp, #32
 80687a0:	af00      	add	r7, sp, #0
 80687a2:	60f8      	str	r0, [r7, #12]
 80687a4:	60b9      	str	r1, [r7, #8]
 80687a6:	603b      	str	r3, [r7, #0]
 80687a8:	4613      	mov	r3, r2
 80687aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80687ac:	f7fb f8fe 	bl	80639ac <HAL_GetTick>
 80687b0:	4602      	mov	r2, r0
 80687b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80687b4:	1a9b      	subs	r3, r3, r2
 80687b6:	683a      	ldr	r2, [r7, #0]
 80687b8:	4413      	add	r3, r2
 80687ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80687bc:	f7fb f8f6 	bl	80639ac <HAL_GetTick>
 80687c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80687c2:	4b39      	ldr	r3, [pc, #228]	; (80688a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80687c4:	681b      	ldr	r3, [r3, #0]
 80687c6:	015b      	lsls	r3, r3, #5
 80687c8:	0d1b      	lsrs	r3, r3, #20
 80687ca:	69fa      	ldr	r2, [r7, #28]
 80687cc:	fb02 f303 	mul.w	r3, r2, r3
 80687d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80687d2:	e054      	b.n	806887e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80687d4:	683b      	ldr	r3, [r7, #0]
 80687d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80687da:	d050      	beq.n	806887e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80687dc:	f7fb f8e6 	bl	80639ac <HAL_GetTick>
 80687e0:	4602      	mov	r2, r0
 80687e2:	69bb      	ldr	r3, [r7, #24]
 80687e4:	1ad3      	subs	r3, r2, r3
 80687e6:	69fa      	ldr	r2, [r7, #28]
 80687e8:	429a      	cmp	r2, r3
 80687ea:	d902      	bls.n	80687f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80687ec:	69fb      	ldr	r3, [r7, #28]
 80687ee:	2b00      	cmp	r3, #0
 80687f0:	d13d      	bne.n	806886e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80687f2:	68fb      	ldr	r3, [r7, #12]
 80687f4:	681b      	ldr	r3, [r3, #0]
 80687f6:	685a      	ldr	r2, [r3, #4]
 80687f8:	68fb      	ldr	r3, [r7, #12]
 80687fa:	681b      	ldr	r3, [r3, #0]
 80687fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8068800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8068802:	68fb      	ldr	r3, [r7, #12]
 8068804:	685b      	ldr	r3, [r3, #4]
 8068806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 806880a:	d111      	bne.n	8068830 <SPI_WaitFlagStateUntilTimeout+0x94>
 806880c:	68fb      	ldr	r3, [r7, #12]
 806880e:	689b      	ldr	r3, [r3, #8]
 8068810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8068814:	d004      	beq.n	8068820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8068816:	68fb      	ldr	r3, [r7, #12]
 8068818:	689b      	ldr	r3, [r3, #8]
 806881a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 806881e:	d107      	bne.n	8068830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8068820:	68fb      	ldr	r3, [r7, #12]
 8068822:	681b      	ldr	r3, [r3, #0]
 8068824:	681a      	ldr	r2, [r3, #0]
 8068826:	68fb      	ldr	r3, [r7, #12]
 8068828:	681b      	ldr	r3, [r3, #0]
 806882a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 806882e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8068830:	68fb      	ldr	r3, [r7, #12]
 8068832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8068834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8068838:	d10f      	bne.n	806885a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 806883a:	68fb      	ldr	r3, [r7, #12]
 806883c:	681b      	ldr	r3, [r3, #0]
 806883e:	681a      	ldr	r2, [r3, #0]
 8068840:	68fb      	ldr	r3, [r7, #12]
 8068842:	681b      	ldr	r3, [r3, #0]
 8068844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8068848:	601a      	str	r2, [r3, #0]
 806884a:	68fb      	ldr	r3, [r7, #12]
 806884c:	681b      	ldr	r3, [r3, #0]
 806884e:	681a      	ldr	r2, [r3, #0]
 8068850:	68fb      	ldr	r3, [r7, #12]
 8068852:	681b      	ldr	r3, [r3, #0]
 8068854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8068858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 806885a:	68fb      	ldr	r3, [r7, #12]
 806885c:	2201      	movs	r2, #1
 806885e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8068862:	68fb      	ldr	r3, [r7, #12]
 8068864:	2200      	movs	r2, #0
 8068866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 806886a:	2303      	movs	r3, #3
 806886c:	e017      	b.n	806889e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 806886e:	697b      	ldr	r3, [r7, #20]
 8068870:	2b00      	cmp	r3, #0
 8068872:	d101      	bne.n	8068878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8068874:	2300      	movs	r3, #0
 8068876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8068878:	697b      	ldr	r3, [r7, #20]
 806887a:	3b01      	subs	r3, #1
 806887c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 806887e:	68fb      	ldr	r3, [r7, #12]
 8068880:	681b      	ldr	r3, [r3, #0]
 8068882:	689a      	ldr	r2, [r3, #8]
 8068884:	68bb      	ldr	r3, [r7, #8]
 8068886:	4013      	ands	r3, r2
 8068888:	68ba      	ldr	r2, [r7, #8]
 806888a:	429a      	cmp	r2, r3
 806888c:	bf0c      	ite	eq
 806888e:	2301      	moveq	r3, #1
 8068890:	2300      	movne	r3, #0
 8068892:	b2db      	uxtb	r3, r3
 8068894:	461a      	mov	r2, r3
 8068896:	79fb      	ldrb	r3, [r7, #7]
 8068898:	429a      	cmp	r2, r3
 806889a:	d19b      	bne.n	80687d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 806889c:	2300      	movs	r3, #0
}
 806889e:	4618      	mov	r0, r3
 80688a0:	3720      	adds	r7, #32
 80688a2:	46bd      	mov	sp, r7
 80688a4:	bd80      	pop	{r7, pc}
 80688a6:	bf00      	nop
 80688a8:	20000000 	.word	0x20000000

080688ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80688ac:	b580      	push	{r7, lr}
 80688ae:	b088      	sub	sp, #32
 80688b0:	af02      	add	r7, sp, #8
 80688b2:	60f8      	str	r0, [r7, #12]
 80688b4:	60b9      	str	r1, [r7, #8]
 80688b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80688b8:	4b1b      	ldr	r3, [pc, #108]	; (8068928 <SPI_EndRxTxTransaction+0x7c>)
 80688ba:	681b      	ldr	r3, [r3, #0]
 80688bc:	4a1b      	ldr	r2, [pc, #108]	; (806892c <SPI_EndRxTxTransaction+0x80>)
 80688be:	fba2 2303 	umull	r2, r3, r2, r3
 80688c2:	0d5b      	lsrs	r3, r3, #21
 80688c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80688c8:	fb02 f303 	mul.w	r3, r2, r3
 80688cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80688ce:	68fb      	ldr	r3, [r7, #12]
 80688d0:	685b      	ldr	r3, [r3, #4]
 80688d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80688d6:	d112      	bne.n	80688fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80688d8:	687b      	ldr	r3, [r7, #4]
 80688da:	9300      	str	r3, [sp, #0]
 80688dc:	68bb      	ldr	r3, [r7, #8]
 80688de:	2200      	movs	r2, #0
 80688e0:	2180      	movs	r1, #128	; 0x80
 80688e2:	68f8      	ldr	r0, [r7, #12]
 80688e4:	f7ff ff5a 	bl	806879c <SPI_WaitFlagStateUntilTimeout>
 80688e8:	4603      	mov	r3, r0
 80688ea:	2b00      	cmp	r3, #0
 80688ec:	d016      	beq.n	806891c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80688ee:	68fb      	ldr	r3, [r7, #12]
 80688f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80688f2:	f043 0220 	orr.w	r2, r3, #32
 80688f6:	68fb      	ldr	r3, [r7, #12]
 80688f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80688fa:	2303      	movs	r3, #3
 80688fc:	e00f      	b.n	806891e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80688fe:	697b      	ldr	r3, [r7, #20]
 8068900:	2b00      	cmp	r3, #0
 8068902:	d00a      	beq.n	806891a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8068904:	697b      	ldr	r3, [r7, #20]
 8068906:	3b01      	subs	r3, #1
 8068908:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 806890a:	68fb      	ldr	r3, [r7, #12]
 806890c:	681b      	ldr	r3, [r3, #0]
 806890e:	689b      	ldr	r3, [r3, #8]
 8068910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8068914:	2b80      	cmp	r3, #128	; 0x80
 8068916:	d0f2      	beq.n	80688fe <SPI_EndRxTxTransaction+0x52>
 8068918:	e000      	b.n	806891c <SPI_EndRxTxTransaction+0x70>
        break;
 806891a:	bf00      	nop
  }

  return HAL_OK;
 806891c:	2300      	movs	r3, #0
}
 806891e:	4618      	mov	r0, r3
 8068920:	3718      	adds	r7, #24
 8068922:	46bd      	mov	sp, r7
 8068924:	bd80      	pop	{r7, pc}
 8068926:	bf00      	nop
 8068928:	20000000 	.word	0x20000000
 806892c:	165e9f81 	.word	0x165e9f81

08068930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8068930:	b580      	push	{r7, lr}
 8068932:	b082      	sub	sp, #8
 8068934:	af00      	add	r7, sp, #0
 8068936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8068938:	687b      	ldr	r3, [r7, #4]
 806893a:	2b00      	cmp	r3, #0
 806893c:	d101      	bne.n	8068942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 806893e:	2301      	movs	r3, #1
 8068940:	e0a7      	b.n	8068a92 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8068942:	687b      	ldr	r3, [r7, #4]
 8068944:	681b      	ldr	r3, [r3, #0]
 8068946:	4a55      	ldr	r2, [pc, #340]	; (8068a9c <HAL_TIM_Base_Init+0x16c>)
 8068948:	4293      	cmp	r3, r2
 806894a:	d027      	beq.n	806899c <HAL_TIM_Base_Init+0x6c>
 806894c:	687b      	ldr	r3, [r7, #4]
 806894e:	681b      	ldr	r3, [r3, #0]
 8068950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8068954:	d022      	beq.n	806899c <HAL_TIM_Base_Init+0x6c>
 8068956:	687b      	ldr	r3, [r7, #4]
 8068958:	681b      	ldr	r3, [r3, #0]
 806895a:	4a51      	ldr	r2, [pc, #324]	; (8068aa0 <HAL_TIM_Base_Init+0x170>)
 806895c:	4293      	cmp	r3, r2
 806895e:	d01d      	beq.n	806899c <HAL_TIM_Base_Init+0x6c>
 8068960:	687b      	ldr	r3, [r7, #4]
 8068962:	681b      	ldr	r3, [r3, #0]
 8068964:	4a4f      	ldr	r2, [pc, #316]	; (8068aa4 <HAL_TIM_Base_Init+0x174>)
 8068966:	4293      	cmp	r3, r2
 8068968:	d018      	beq.n	806899c <HAL_TIM_Base_Init+0x6c>
 806896a:	687b      	ldr	r3, [r7, #4]
 806896c:	681b      	ldr	r3, [r3, #0]
 806896e:	4a4e      	ldr	r2, [pc, #312]	; (8068aa8 <HAL_TIM_Base_Init+0x178>)
 8068970:	4293      	cmp	r3, r2
 8068972:	d013      	beq.n	806899c <HAL_TIM_Base_Init+0x6c>
 8068974:	687b      	ldr	r3, [r7, #4]
 8068976:	681b      	ldr	r3, [r3, #0]
 8068978:	4a4c      	ldr	r2, [pc, #304]	; (8068aac <HAL_TIM_Base_Init+0x17c>)
 806897a:	4293      	cmp	r3, r2
 806897c:	d00e      	beq.n	806899c <HAL_TIM_Base_Init+0x6c>
 806897e:	687b      	ldr	r3, [r7, #4]
 8068980:	681b      	ldr	r3, [r3, #0]
 8068982:	4a4b      	ldr	r2, [pc, #300]	; (8068ab0 <HAL_TIM_Base_Init+0x180>)
 8068984:	4293      	cmp	r3, r2
 8068986:	d009      	beq.n	806899c <HAL_TIM_Base_Init+0x6c>
 8068988:	687b      	ldr	r3, [r7, #4]
 806898a:	681b      	ldr	r3, [r3, #0]
 806898c:	4a49      	ldr	r2, [pc, #292]	; (8068ab4 <HAL_TIM_Base_Init+0x184>)
 806898e:	4293      	cmp	r3, r2
 8068990:	d004      	beq.n	806899c <HAL_TIM_Base_Init+0x6c>
 8068992:	f240 1113 	movw	r1, #275	; 0x113
 8068996:	4848      	ldr	r0, [pc, #288]	; (8068ab8 <HAL_TIM_Base_Init+0x188>)
 8068998:	f7fa fb8f 	bl	80630ba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 806899c:	687b      	ldr	r3, [r7, #4]
 806899e:	689b      	ldr	r3, [r3, #8]
 80689a0:	2b00      	cmp	r3, #0
 80689a2:	d014      	beq.n	80689ce <HAL_TIM_Base_Init+0x9e>
 80689a4:	687b      	ldr	r3, [r7, #4]
 80689a6:	689b      	ldr	r3, [r3, #8]
 80689a8:	2b10      	cmp	r3, #16
 80689aa:	d010      	beq.n	80689ce <HAL_TIM_Base_Init+0x9e>
 80689ac:	687b      	ldr	r3, [r7, #4]
 80689ae:	689b      	ldr	r3, [r3, #8]
 80689b0:	2b20      	cmp	r3, #32
 80689b2:	d00c      	beq.n	80689ce <HAL_TIM_Base_Init+0x9e>
 80689b4:	687b      	ldr	r3, [r7, #4]
 80689b6:	689b      	ldr	r3, [r3, #8]
 80689b8:	2b40      	cmp	r3, #64	; 0x40
 80689ba:	d008      	beq.n	80689ce <HAL_TIM_Base_Init+0x9e>
 80689bc:	687b      	ldr	r3, [r7, #4]
 80689be:	689b      	ldr	r3, [r3, #8]
 80689c0:	2b60      	cmp	r3, #96	; 0x60
 80689c2:	d004      	beq.n	80689ce <HAL_TIM_Base_Init+0x9e>
 80689c4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80689c8:	483b      	ldr	r0, [pc, #236]	; (8068ab8 <HAL_TIM_Base_Init+0x188>)
 80689ca:	f7fa fb76 	bl	80630ba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80689ce:	687b      	ldr	r3, [r7, #4]
 80689d0:	691b      	ldr	r3, [r3, #16]
 80689d2:	2b00      	cmp	r3, #0
 80689d4:	d00e      	beq.n	80689f4 <HAL_TIM_Base_Init+0xc4>
 80689d6:	687b      	ldr	r3, [r7, #4]
 80689d8:	691b      	ldr	r3, [r3, #16]
 80689da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80689de:	d009      	beq.n	80689f4 <HAL_TIM_Base_Init+0xc4>
 80689e0:	687b      	ldr	r3, [r7, #4]
 80689e2:	691b      	ldr	r3, [r3, #16]
 80689e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80689e8:	d004      	beq.n	80689f4 <HAL_TIM_Base_Init+0xc4>
 80689ea:	f240 1115 	movw	r1, #277	; 0x115
 80689ee:	4832      	ldr	r0, [pc, #200]	; (8068ab8 <HAL_TIM_Base_Init+0x188>)
 80689f0:	f7fa fb63 	bl	80630ba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80689f4:	687b      	ldr	r3, [r7, #4]
 80689f6:	699b      	ldr	r3, [r3, #24]
 80689f8:	2b00      	cmp	r3, #0
 80689fa:	d008      	beq.n	8068a0e <HAL_TIM_Base_Init+0xde>
 80689fc:	687b      	ldr	r3, [r7, #4]
 80689fe:	699b      	ldr	r3, [r3, #24]
 8068a00:	2b80      	cmp	r3, #128	; 0x80
 8068a02:	d004      	beq.n	8068a0e <HAL_TIM_Base_Init+0xde>
 8068a04:	f44f 718b 	mov.w	r1, #278	; 0x116
 8068a08:	482b      	ldr	r0, [pc, #172]	; (8068ab8 <HAL_TIM_Base_Init+0x188>)
 8068a0a:	f7fa fb56 	bl	80630ba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8068a0e:	687b      	ldr	r3, [r7, #4]
 8068a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8068a14:	b2db      	uxtb	r3, r3
 8068a16:	2b00      	cmp	r3, #0
 8068a18:	d106      	bne.n	8068a28 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8068a1a:	687b      	ldr	r3, [r7, #4]
 8068a1c:	2200      	movs	r2, #0
 8068a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8068a22:	6878      	ldr	r0, [r7, #4]
 8068a24:	f000 f84a 	bl	8068abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8068a28:	687b      	ldr	r3, [r7, #4]
 8068a2a:	2202      	movs	r2, #2
 8068a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8068a30:	687b      	ldr	r3, [r7, #4]
 8068a32:	681a      	ldr	r2, [r3, #0]
 8068a34:	687b      	ldr	r3, [r7, #4]
 8068a36:	3304      	adds	r3, #4
 8068a38:	4619      	mov	r1, r3
 8068a3a:	4610      	mov	r0, r2
 8068a3c:	f000 fa0a 	bl	8068e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8068a40:	687b      	ldr	r3, [r7, #4]
 8068a42:	2201      	movs	r2, #1
 8068a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8068a48:	687b      	ldr	r3, [r7, #4]
 8068a4a:	2201      	movs	r2, #1
 8068a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8068a50:	687b      	ldr	r3, [r7, #4]
 8068a52:	2201      	movs	r2, #1
 8068a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8068a58:	687b      	ldr	r3, [r7, #4]
 8068a5a:	2201      	movs	r2, #1
 8068a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8068a60:	687b      	ldr	r3, [r7, #4]
 8068a62:	2201      	movs	r2, #1
 8068a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8068a68:	687b      	ldr	r3, [r7, #4]
 8068a6a:	2201      	movs	r2, #1
 8068a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8068a70:	687b      	ldr	r3, [r7, #4]
 8068a72:	2201      	movs	r2, #1
 8068a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8068a78:	687b      	ldr	r3, [r7, #4]
 8068a7a:	2201      	movs	r2, #1
 8068a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8068a80:	687b      	ldr	r3, [r7, #4]
 8068a82:	2201      	movs	r2, #1
 8068a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8068a88:	687b      	ldr	r3, [r7, #4]
 8068a8a:	2201      	movs	r2, #1
 8068a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8068a90:	2300      	movs	r3, #0
}
 8068a92:	4618      	mov	r0, r3
 8068a94:	3708      	adds	r7, #8
 8068a96:	46bd      	mov	sp, r7
 8068a98:	bd80      	pop	{r7, pc}
 8068a9a:	bf00      	nop
 8068a9c:	40010000 	.word	0x40010000
 8068aa0:	40000400 	.word	0x40000400
 8068aa4:	40000800 	.word	0x40000800
 8068aa8:	40000c00 	.word	0x40000c00
 8068aac:	40014000 	.word	0x40014000
 8068ab0:	40014400 	.word	0x40014400
 8068ab4:	40014800 	.word	0x40014800
 8068ab8:	08076be4 	.word	0x08076be4

08068abc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8068abc:	b480      	push	{r7}
 8068abe:	b083      	sub	sp, #12
 8068ac0:	af00      	add	r7, sp, #0
 8068ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8068ac4:	bf00      	nop
 8068ac6:	370c      	adds	r7, #12
 8068ac8:	46bd      	mov	sp, r7
 8068aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068ace:	4770      	bx	lr

08068ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8068ad0:	b580      	push	{r7, lr}
 8068ad2:	b084      	sub	sp, #16
 8068ad4:	af00      	add	r7, sp, #0
 8068ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8068ad8:	687b      	ldr	r3, [r7, #4]
 8068ada:	681b      	ldr	r3, [r3, #0]
 8068adc:	4a3d      	ldr	r2, [pc, #244]	; (8068bd4 <HAL_TIM_Base_Start_IT+0x104>)
 8068ade:	4293      	cmp	r3, r2
 8068ae0:	d027      	beq.n	8068b32 <HAL_TIM_Base_Start_IT+0x62>
 8068ae2:	687b      	ldr	r3, [r7, #4]
 8068ae4:	681b      	ldr	r3, [r3, #0]
 8068ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8068aea:	d022      	beq.n	8068b32 <HAL_TIM_Base_Start_IT+0x62>
 8068aec:	687b      	ldr	r3, [r7, #4]
 8068aee:	681b      	ldr	r3, [r3, #0]
 8068af0:	4a39      	ldr	r2, [pc, #228]	; (8068bd8 <HAL_TIM_Base_Start_IT+0x108>)
 8068af2:	4293      	cmp	r3, r2
 8068af4:	d01d      	beq.n	8068b32 <HAL_TIM_Base_Start_IT+0x62>
 8068af6:	687b      	ldr	r3, [r7, #4]
 8068af8:	681b      	ldr	r3, [r3, #0]
 8068afa:	4a38      	ldr	r2, [pc, #224]	; (8068bdc <HAL_TIM_Base_Start_IT+0x10c>)
 8068afc:	4293      	cmp	r3, r2
 8068afe:	d018      	beq.n	8068b32 <HAL_TIM_Base_Start_IT+0x62>
 8068b00:	687b      	ldr	r3, [r7, #4]
 8068b02:	681b      	ldr	r3, [r3, #0]
 8068b04:	4a36      	ldr	r2, [pc, #216]	; (8068be0 <HAL_TIM_Base_Start_IT+0x110>)
 8068b06:	4293      	cmp	r3, r2
 8068b08:	d013      	beq.n	8068b32 <HAL_TIM_Base_Start_IT+0x62>
 8068b0a:	687b      	ldr	r3, [r7, #4]
 8068b0c:	681b      	ldr	r3, [r3, #0]
 8068b0e:	4a35      	ldr	r2, [pc, #212]	; (8068be4 <HAL_TIM_Base_Start_IT+0x114>)
 8068b10:	4293      	cmp	r3, r2
 8068b12:	d00e      	beq.n	8068b32 <HAL_TIM_Base_Start_IT+0x62>
 8068b14:	687b      	ldr	r3, [r7, #4]
 8068b16:	681b      	ldr	r3, [r3, #0]
 8068b18:	4a33      	ldr	r2, [pc, #204]	; (8068be8 <HAL_TIM_Base_Start_IT+0x118>)
 8068b1a:	4293      	cmp	r3, r2
 8068b1c:	d009      	beq.n	8068b32 <HAL_TIM_Base_Start_IT+0x62>
 8068b1e:	687b      	ldr	r3, [r7, #4]
 8068b20:	681b      	ldr	r3, [r3, #0]
 8068b22:	4a32      	ldr	r2, [pc, #200]	; (8068bec <HAL_TIM_Base_Start_IT+0x11c>)
 8068b24:	4293      	cmp	r3, r2
 8068b26:	d004      	beq.n	8068b32 <HAL_TIM_Base_Start_IT+0x62>
 8068b28:	f240 11cf 	movw	r1, #463	; 0x1cf
 8068b2c:	4830      	ldr	r0, [pc, #192]	; (8068bf0 <HAL_TIM_Base_Start_IT+0x120>)
 8068b2e:	f7fa fac4 	bl	80630ba <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8068b32:	687b      	ldr	r3, [r7, #4]
 8068b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8068b38:	b2db      	uxtb	r3, r3
 8068b3a:	2b01      	cmp	r3, #1
 8068b3c:	d001      	beq.n	8068b42 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8068b3e:	2301      	movs	r3, #1
 8068b40:	e044      	b.n	8068bcc <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8068b42:	687b      	ldr	r3, [r7, #4]
 8068b44:	2202      	movs	r2, #2
 8068b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8068b4a:	687b      	ldr	r3, [r7, #4]
 8068b4c:	681b      	ldr	r3, [r3, #0]
 8068b4e:	68da      	ldr	r2, [r3, #12]
 8068b50:	687b      	ldr	r3, [r7, #4]
 8068b52:	681b      	ldr	r3, [r3, #0]
 8068b54:	f042 0201 	orr.w	r2, r2, #1
 8068b58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8068b5a:	687b      	ldr	r3, [r7, #4]
 8068b5c:	681b      	ldr	r3, [r3, #0]
 8068b5e:	4a1d      	ldr	r2, [pc, #116]	; (8068bd4 <HAL_TIM_Base_Start_IT+0x104>)
 8068b60:	4293      	cmp	r3, r2
 8068b62:	d018      	beq.n	8068b96 <HAL_TIM_Base_Start_IT+0xc6>
 8068b64:	687b      	ldr	r3, [r7, #4]
 8068b66:	681b      	ldr	r3, [r3, #0]
 8068b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8068b6c:	d013      	beq.n	8068b96 <HAL_TIM_Base_Start_IT+0xc6>
 8068b6e:	687b      	ldr	r3, [r7, #4]
 8068b70:	681b      	ldr	r3, [r3, #0]
 8068b72:	4a19      	ldr	r2, [pc, #100]	; (8068bd8 <HAL_TIM_Base_Start_IT+0x108>)
 8068b74:	4293      	cmp	r3, r2
 8068b76:	d00e      	beq.n	8068b96 <HAL_TIM_Base_Start_IT+0xc6>
 8068b78:	687b      	ldr	r3, [r7, #4]
 8068b7a:	681b      	ldr	r3, [r3, #0]
 8068b7c:	4a17      	ldr	r2, [pc, #92]	; (8068bdc <HAL_TIM_Base_Start_IT+0x10c>)
 8068b7e:	4293      	cmp	r3, r2
 8068b80:	d009      	beq.n	8068b96 <HAL_TIM_Base_Start_IT+0xc6>
 8068b82:	687b      	ldr	r3, [r7, #4]
 8068b84:	681b      	ldr	r3, [r3, #0]
 8068b86:	4a16      	ldr	r2, [pc, #88]	; (8068be0 <HAL_TIM_Base_Start_IT+0x110>)
 8068b88:	4293      	cmp	r3, r2
 8068b8a:	d004      	beq.n	8068b96 <HAL_TIM_Base_Start_IT+0xc6>
 8068b8c:	687b      	ldr	r3, [r7, #4]
 8068b8e:	681b      	ldr	r3, [r3, #0]
 8068b90:	4a14      	ldr	r2, [pc, #80]	; (8068be4 <HAL_TIM_Base_Start_IT+0x114>)
 8068b92:	4293      	cmp	r3, r2
 8068b94:	d111      	bne.n	8068bba <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8068b96:	687b      	ldr	r3, [r7, #4]
 8068b98:	681b      	ldr	r3, [r3, #0]
 8068b9a:	689b      	ldr	r3, [r3, #8]
 8068b9c:	f003 0307 	and.w	r3, r3, #7
 8068ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8068ba2:	68fb      	ldr	r3, [r7, #12]
 8068ba4:	2b06      	cmp	r3, #6
 8068ba6:	d010      	beq.n	8068bca <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8068ba8:	687b      	ldr	r3, [r7, #4]
 8068baa:	681b      	ldr	r3, [r3, #0]
 8068bac:	681a      	ldr	r2, [r3, #0]
 8068bae:	687b      	ldr	r3, [r7, #4]
 8068bb0:	681b      	ldr	r3, [r3, #0]
 8068bb2:	f042 0201 	orr.w	r2, r2, #1
 8068bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8068bb8:	e007      	b.n	8068bca <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8068bba:	687b      	ldr	r3, [r7, #4]
 8068bbc:	681b      	ldr	r3, [r3, #0]
 8068bbe:	681a      	ldr	r2, [r3, #0]
 8068bc0:	687b      	ldr	r3, [r7, #4]
 8068bc2:	681b      	ldr	r3, [r3, #0]
 8068bc4:	f042 0201 	orr.w	r2, r2, #1
 8068bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8068bca:	2300      	movs	r3, #0
}
 8068bcc:	4618      	mov	r0, r3
 8068bce:	3710      	adds	r7, #16
 8068bd0:	46bd      	mov	sp, r7
 8068bd2:	bd80      	pop	{r7, pc}
 8068bd4:	40010000 	.word	0x40010000
 8068bd8:	40000400 	.word	0x40000400
 8068bdc:	40000800 	.word	0x40000800
 8068be0:	40000c00 	.word	0x40000c00
 8068be4:	40014000 	.word	0x40014000
 8068be8:	40014400 	.word	0x40014400
 8068bec:	40014800 	.word	0x40014800
 8068bf0:	08076be4 	.word	0x08076be4

08068bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8068bf4:	b580      	push	{r7, lr}
 8068bf6:	b082      	sub	sp, #8
 8068bf8:	af00      	add	r7, sp, #0
 8068bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8068bfc:	687b      	ldr	r3, [r7, #4]
 8068bfe:	681b      	ldr	r3, [r3, #0]
 8068c00:	691b      	ldr	r3, [r3, #16]
 8068c02:	f003 0302 	and.w	r3, r3, #2
 8068c06:	2b02      	cmp	r3, #2
 8068c08:	d122      	bne.n	8068c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8068c0a:	687b      	ldr	r3, [r7, #4]
 8068c0c:	681b      	ldr	r3, [r3, #0]
 8068c0e:	68db      	ldr	r3, [r3, #12]
 8068c10:	f003 0302 	and.w	r3, r3, #2
 8068c14:	2b02      	cmp	r3, #2
 8068c16:	d11b      	bne.n	8068c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8068c18:	687b      	ldr	r3, [r7, #4]
 8068c1a:	681b      	ldr	r3, [r3, #0]
 8068c1c:	f06f 0202 	mvn.w	r2, #2
 8068c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8068c22:	687b      	ldr	r3, [r7, #4]
 8068c24:	2201      	movs	r2, #1
 8068c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8068c28:	687b      	ldr	r3, [r7, #4]
 8068c2a:	681b      	ldr	r3, [r3, #0]
 8068c2c:	699b      	ldr	r3, [r3, #24]
 8068c2e:	f003 0303 	and.w	r3, r3, #3
 8068c32:	2b00      	cmp	r3, #0
 8068c34:	d003      	beq.n	8068c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8068c36:	6878      	ldr	r0, [r7, #4]
 8068c38:	f000 f8ee 	bl	8068e18 <HAL_TIM_IC_CaptureCallback>
 8068c3c:	e005      	b.n	8068c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8068c3e:	6878      	ldr	r0, [r7, #4]
 8068c40:	f000 f8e0 	bl	8068e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8068c44:	6878      	ldr	r0, [r7, #4]
 8068c46:	f000 f8f1 	bl	8068e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8068c4a:	687b      	ldr	r3, [r7, #4]
 8068c4c:	2200      	movs	r2, #0
 8068c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8068c50:	687b      	ldr	r3, [r7, #4]
 8068c52:	681b      	ldr	r3, [r3, #0]
 8068c54:	691b      	ldr	r3, [r3, #16]
 8068c56:	f003 0304 	and.w	r3, r3, #4
 8068c5a:	2b04      	cmp	r3, #4
 8068c5c:	d122      	bne.n	8068ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8068c5e:	687b      	ldr	r3, [r7, #4]
 8068c60:	681b      	ldr	r3, [r3, #0]
 8068c62:	68db      	ldr	r3, [r3, #12]
 8068c64:	f003 0304 	and.w	r3, r3, #4
 8068c68:	2b04      	cmp	r3, #4
 8068c6a:	d11b      	bne.n	8068ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8068c6c:	687b      	ldr	r3, [r7, #4]
 8068c6e:	681b      	ldr	r3, [r3, #0]
 8068c70:	f06f 0204 	mvn.w	r2, #4
 8068c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8068c76:	687b      	ldr	r3, [r7, #4]
 8068c78:	2202      	movs	r2, #2
 8068c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8068c7c:	687b      	ldr	r3, [r7, #4]
 8068c7e:	681b      	ldr	r3, [r3, #0]
 8068c80:	699b      	ldr	r3, [r3, #24]
 8068c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8068c86:	2b00      	cmp	r3, #0
 8068c88:	d003      	beq.n	8068c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8068c8a:	6878      	ldr	r0, [r7, #4]
 8068c8c:	f000 f8c4 	bl	8068e18 <HAL_TIM_IC_CaptureCallback>
 8068c90:	e005      	b.n	8068c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8068c92:	6878      	ldr	r0, [r7, #4]
 8068c94:	f000 f8b6 	bl	8068e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8068c98:	6878      	ldr	r0, [r7, #4]
 8068c9a:	f000 f8c7 	bl	8068e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8068c9e:	687b      	ldr	r3, [r7, #4]
 8068ca0:	2200      	movs	r2, #0
 8068ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8068ca4:	687b      	ldr	r3, [r7, #4]
 8068ca6:	681b      	ldr	r3, [r3, #0]
 8068ca8:	691b      	ldr	r3, [r3, #16]
 8068caa:	f003 0308 	and.w	r3, r3, #8
 8068cae:	2b08      	cmp	r3, #8
 8068cb0:	d122      	bne.n	8068cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8068cb2:	687b      	ldr	r3, [r7, #4]
 8068cb4:	681b      	ldr	r3, [r3, #0]
 8068cb6:	68db      	ldr	r3, [r3, #12]
 8068cb8:	f003 0308 	and.w	r3, r3, #8
 8068cbc:	2b08      	cmp	r3, #8
 8068cbe:	d11b      	bne.n	8068cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8068cc0:	687b      	ldr	r3, [r7, #4]
 8068cc2:	681b      	ldr	r3, [r3, #0]
 8068cc4:	f06f 0208 	mvn.w	r2, #8
 8068cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8068cca:	687b      	ldr	r3, [r7, #4]
 8068ccc:	2204      	movs	r2, #4
 8068cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8068cd0:	687b      	ldr	r3, [r7, #4]
 8068cd2:	681b      	ldr	r3, [r3, #0]
 8068cd4:	69db      	ldr	r3, [r3, #28]
 8068cd6:	f003 0303 	and.w	r3, r3, #3
 8068cda:	2b00      	cmp	r3, #0
 8068cdc:	d003      	beq.n	8068ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8068cde:	6878      	ldr	r0, [r7, #4]
 8068ce0:	f000 f89a 	bl	8068e18 <HAL_TIM_IC_CaptureCallback>
 8068ce4:	e005      	b.n	8068cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8068ce6:	6878      	ldr	r0, [r7, #4]
 8068ce8:	f000 f88c 	bl	8068e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8068cec:	6878      	ldr	r0, [r7, #4]
 8068cee:	f000 f89d 	bl	8068e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8068cf2:	687b      	ldr	r3, [r7, #4]
 8068cf4:	2200      	movs	r2, #0
 8068cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8068cf8:	687b      	ldr	r3, [r7, #4]
 8068cfa:	681b      	ldr	r3, [r3, #0]
 8068cfc:	691b      	ldr	r3, [r3, #16]
 8068cfe:	f003 0310 	and.w	r3, r3, #16
 8068d02:	2b10      	cmp	r3, #16
 8068d04:	d122      	bne.n	8068d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8068d06:	687b      	ldr	r3, [r7, #4]
 8068d08:	681b      	ldr	r3, [r3, #0]
 8068d0a:	68db      	ldr	r3, [r3, #12]
 8068d0c:	f003 0310 	and.w	r3, r3, #16
 8068d10:	2b10      	cmp	r3, #16
 8068d12:	d11b      	bne.n	8068d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8068d14:	687b      	ldr	r3, [r7, #4]
 8068d16:	681b      	ldr	r3, [r3, #0]
 8068d18:	f06f 0210 	mvn.w	r2, #16
 8068d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8068d1e:	687b      	ldr	r3, [r7, #4]
 8068d20:	2208      	movs	r2, #8
 8068d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8068d24:	687b      	ldr	r3, [r7, #4]
 8068d26:	681b      	ldr	r3, [r3, #0]
 8068d28:	69db      	ldr	r3, [r3, #28]
 8068d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8068d2e:	2b00      	cmp	r3, #0
 8068d30:	d003      	beq.n	8068d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8068d32:	6878      	ldr	r0, [r7, #4]
 8068d34:	f000 f870 	bl	8068e18 <HAL_TIM_IC_CaptureCallback>
 8068d38:	e005      	b.n	8068d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8068d3a:	6878      	ldr	r0, [r7, #4]
 8068d3c:	f000 f862 	bl	8068e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8068d40:	6878      	ldr	r0, [r7, #4]
 8068d42:	f000 f873 	bl	8068e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8068d46:	687b      	ldr	r3, [r7, #4]
 8068d48:	2200      	movs	r2, #0
 8068d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8068d4c:	687b      	ldr	r3, [r7, #4]
 8068d4e:	681b      	ldr	r3, [r3, #0]
 8068d50:	691b      	ldr	r3, [r3, #16]
 8068d52:	f003 0301 	and.w	r3, r3, #1
 8068d56:	2b01      	cmp	r3, #1
 8068d58:	d10e      	bne.n	8068d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8068d5a:	687b      	ldr	r3, [r7, #4]
 8068d5c:	681b      	ldr	r3, [r3, #0]
 8068d5e:	68db      	ldr	r3, [r3, #12]
 8068d60:	f003 0301 	and.w	r3, r3, #1
 8068d64:	2b01      	cmp	r3, #1
 8068d66:	d107      	bne.n	8068d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8068d68:	687b      	ldr	r3, [r7, #4]
 8068d6a:	681b      	ldr	r3, [r3, #0]
 8068d6c:	f06f 0201 	mvn.w	r2, #1
 8068d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8068d72:	6878      	ldr	r0, [r7, #4]
 8068d74:	f7fa f98a 	bl	806308c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8068d78:	687b      	ldr	r3, [r7, #4]
 8068d7a:	681b      	ldr	r3, [r3, #0]
 8068d7c:	691b      	ldr	r3, [r3, #16]
 8068d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8068d82:	2b80      	cmp	r3, #128	; 0x80
 8068d84:	d10e      	bne.n	8068da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8068d86:	687b      	ldr	r3, [r7, #4]
 8068d88:	681b      	ldr	r3, [r3, #0]
 8068d8a:	68db      	ldr	r3, [r3, #12]
 8068d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8068d90:	2b80      	cmp	r3, #128	; 0x80
 8068d92:	d107      	bne.n	8068da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8068d94:	687b      	ldr	r3, [r7, #4]
 8068d96:	681b      	ldr	r3, [r3, #0]
 8068d98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8068d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8068d9e:	6878      	ldr	r0, [r7, #4]
 8068da0:	f000 f8e2 	bl	8068f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8068da4:	687b      	ldr	r3, [r7, #4]
 8068da6:	681b      	ldr	r3, [r3, #0]
 8068da8:	691b      	ldr	r3, [r3, #16]
 8068daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8068dae:	2b40      	cmp	r3, #64	; 0x40
 8068db0:	d10e      	bne.n	8068dd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8068db2:	687b      	ldr	r3, [r7, #4]
 8068db4:	681b      	ldr	r3, [r3, #0]
 8068db6:	68db      	ldr	r3, [r3, #12]
 8068db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8068dbc:	2b40      	cmp	r3, #64	; 0x40
 8068dbe:	d107      	bne.n	8068dd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8068dc0:	687b      	ldr	r3, [r7, #4]
 8068dc2:	681b      	ldr	r3, [r3, #0]
 8068dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8068dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8068dca:	6878      	ldr	r0, [r7, #4]
 8068dcc:	f000 f838 	bl	8068e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8068dd0:	687b      	ldr	r3, [r7, #4]
 8068dd2:	681b      	ldr	r3, [r3, #0]
 8068dd4:	691b      	ldr	r3, [r3, #16]
 8068dd6:	f003 0320 	and.w	r3, r3, #32
 8068dda:	2b20      	cmp	r3, #32
 8068ddc:	d10e      	bne.n	8068dfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8068dde:	687b      	ldr	r3, [r7, #4]
 8068de0:	681b      	ldr	r3, [r3, #0]
 8068de2:	68db      	ldr	r3, [r3, #12]
 8068de4:	f003 0320 	and.w	r3, r3, #32
 8068de8:	2b20      	cmp	r3, #32
 8068dea:	d107      	bne.n	8068dfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8068dec:	687b      	ldr	r3, [r7, #4]
 8068dee:	681b      	ldr	r3, [r3, #0]
 8068df0:	f06f 0220 	mvn.w	r2, #32
 8068df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8068df6:	6878      	ldr	r0, [r7, #4]
 8068df8:	f000 f8ac 	bl	8068f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8068dfc:	bf00      	nop
 8068dfe:	3708      	adds	r7, #8
 8068e00:	46bd      	mov	sp, r7
 8068e02:	bd80      	pop	{r7, pc}

08068e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8068e04:	b480      	push	{r7}
 8068e06:	b083      	sub	sp, #12
 8068e08:	af00      	add	r7, sp, #0
 8068e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8068e0c:	bf00      	nop
 8068e0e:	370c      	adds	r7, #12
 8068e10:	46bd      	mov	sp, r7
 8068e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068e16:	4770      	bx	lr

08068e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8068e18:	b480      	push	{r7}
 8068e1a:	b083      	sub	sp, #12
 8068e1c:	af00      	add	r7, sp, #0
 8068e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8068e20:	bf00      	nop
 8068e22:	370c      	adds	r7, #12
 8068e24:	46bd      	mov	sp, r7
 8068e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068e2a:	4770      	bx	lr

08068e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8068e2c:	b480      	push	{r7}
 8068e2e:	b083      	sub	sp, #12
 8068e30:	af00      	add	r7, sp, #0
 8068e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8068e34:	bf00      	nop
 8068e36:	370c      	adds	r7, #12
 8068e38:	46bd      	mov	sp, r7
 8068e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068e3e:	4770      	bx	lr

08068e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8068e40:	b480      	push	{r7}
 8068e42:	b083      	sub	sp, #12
 8068e44:	af00      	add	r7, sp, #0
 8068e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8068e48:	bf00      	nop
 8068e4a:	370c      	adds	r7, #12
 8068e4c:	46bd      	mov	sp, r7
 8068e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068e52:	4770      	bx	lr

08068e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8068e54:	b480      	push	{r7}
 8068e56:	b085      	sub	sp, #20
 8068e58:	af00      	add	r7, sp, #0
 8068e5a:	6078      	str	r0, [r7, #4]
 8068e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8068e5e:	687b      	ldr	r3, [r7, #4]
 8068e60:	681b      	ldr	r3, [r3, #0]
 8068e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8068e64:	687b      	ldr	r3, [r7, #4]
 8068e66:	4a34      	ldr	r2, [pc, #208]	; (8068f38 <TIM_Base_SetConfig+0xe4>)
 8068e68:	4293      	cmp	r3, r2
 8068e6a:	d00f      	beq.n	8068e8c <TIM_Base_SetConfig+0x38>
 8068e6c:	687b      	ldr	r3, [r7, #4]
 8068e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8068e72:	d00b      	beq.n	8068e8c <TIM_Base_SetConfig+0x38>
 8068e74:	687b      	ldr	r3, [r7, #4]
 8068e76:	4a31      	ldr	r2, [pc, #196]	; (8068f3c <TIM_Base_SetConfig+0xe8>)
 8068e78:	4293      	cmp	r3, r2
 8068e7a:	d007      	beq.n	8068e8c <TIM_Base_SetConfig+0x38>
 8068e7c:	687b      	ldr	r3, [r7, #4]
 8068e7e:	4a30      	ldr	r2, [pc, #192]	; (8068f40 <TIM_Base_SetConfig+0xec>)
 8068e80:	4293      	cmp	r3, r2
 8068e82:	d003      	beq.n	8068e8c <TIM_Base_SetConfig+0x38>
 8068e84:	687b      	ldr	r3, [r7, #4]
 8068e86:	4a2f      	ldr	r2, [pc, #188]	; (8068f44 <TIM_Base_SetConfig+0xf0>)
 8068e88:	4293      	cmp	r3, r2
 8068e8a:	d108      	bne.n	8068e9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8068e8c:	68fb      	ldr	r3, [r7, #12]
 8068e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8068e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8068e94:	683b      	ldr	r3, [r7, #0]
 8068e96:	685b      	ldr	r3, [r3, #4]
 8068e98:	68fa      	ldr	r2, [r7, #12]
 8068e9a:	4313      	orrs	r3, r2
 8068e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8068e9e:	687b      	ldr	r3, [r7, #4]
 8068ea0:	4a25      	ldr	r2, [pc, #148]	; (8068f38 <TIM_Base_SetConfig+0xe4>)
 8068ea2:	4293      	cmp	r3, r2
 8068ea4:	d01b      	beq.n	8068ede <TIM_Base_SetConfig+0x8a>
 8068ea6:	687b      	ldr	r3, [r7, #4]
 8068ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8068eac:	d017      	beq.n	8068ede <TIM_Base_SetConfig+0x8a>
 8068eae:	687b      	ldr	r3, [r7, #4]
 8068eb0:	4a22      	ldr	r2, [pc, #136]	; (8068f3c <TIM_Base_SetConfig+0xe8>)
 8068eb2:	4293      	cmp	r3, r2
 8068eb4:	d013      	beq.n	8068ede <TIM_Base_SetConfig+0x8a>
 8068eb6:	687b      	ldr	r3, [r7, #4]
 8068eb8:	4a21      	ldr	r2, [pc, #132]	; (8068f40 <TIM_Base_SetConfig+0xec>)
 8068eba:	4293      	cmp	r3, r2
 8068ebc:	d00f      	beq.n	8068ede <TIM_Base_SetConfig+0x8a>
 8068ebe:	687b      	ldr	r3, [r7, #4]
 8068ec0:	4a20      	ldr	r2, [pc, #128]	; (8068f44 <TIM_Base_SetConfig+0xf0>)
 8068ec2:	4293      	cmp	r3, r2
 8068ec4:	d00b      	beq.n	8068ede <TIM_Base_SetConfig+0x8a>
 8068ec6:	687b      	ldr	r3, [r7, #4]
 8068ec8:	4a1f      	ldr	r2, [pc, #124]	; (8068f48 <TIM_Base_SetConfig+0xf4>)
 8068eca:	4293      	cmp	r3, r2
 8068ecc:	d007      	beq.n	8068ede <TIM_Base_SetConfig+0x8a>
 8068ece:	687b      	ldr	r3, [r7, #4]
 8068ed0:	4a1e      	ldr	r2, [pc, #120]	; (8068f4c <TIM_Base_SetConfig+0xf8>)
 8068ed2:	4293      	cmp	r3, r2
 8068ed4:	d003      	beq.n	8068ede <TIM_Base_SetConfig+0x8a>
 8068ed6:	687b      	ldr	r3, [r7, #4]
 8068ed8:	4a1d      	ldr	r2, [pc, #116]	; (8068f50 <TIM_Base_SetConfig+0xfc>)
 8068eda:	4293      	cmp	r3, r2
 8068edc:	d108      	bne.n	8068ef0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8068ede:	68fb      	ldr	r3, [r7, #12]
 8068ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8068ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8068ee6:	683b      	ldr	r3, [r7, #0]
 8068ee8:	68db      	ldr	r3, [r3, #12]
 8068eea:	68fa      	ldr	r2, [r7, #12]
 8068eec:	4313      	orrs	r3, r2
 8068eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8068ef0:	68fb      	ldr	r3, [r7, #12]
 8068ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8068ef6:	683b      	ldr	r3, [r7, #0]
 8068ef8:	695b      	ldr	r3, [r3, #20]
 8068efa:	4313      	orrs	r3, r2
 8068efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8068efe:	687b      	ldr	r3, [r7, #4]
 8068f00:	68fa      	ldr	r2, [r7, #12]
 8068f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8068f04:	683b      	ldr	r3, [r7, #0]
 8068f06:	689a      	ldr	r2, [r3, #8]
 8068f08:	687b      	ldr	r3, [r7, #4]
 8068f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8068f0c:	683b      	ldr	r3, [r7, #0]
 8068f0e:	681a      	ldr	r2, [r3, #0]
 8068f10:	687b      	ldr	r3, [r7, #4]
 8068f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8068f14:	687b      	ldr	r3, [r7, #4]
 8068f16:	4a08      	ldr	r2, [pc, #32]	; (8068f38 <TIM_Base_SetConfig+0xe4>)
 8068f18:	4293      	cmp	r3, r2
 8068f1a:	d103      	bne.n	8068f24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8068f1c:	683b      	ldr	r3, [r7, #0]
 8068f1e:	691a      	ldr	r2, [r3, #16]
 8068f20:	687b      	ldr	r3, [r7, #4]
 8068f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8068f24:	687b      	ldr	r3, [r7, #4]
 8068f26:	2201      	movs	r2, #1
 8068f28:	615a      	str	r2, [r3, #20]
}
 8068f2a:	bf00      	nop
 8068f2c:	3714      	adds	r7, #20
 8068f2e:	46bd      	mov	sp, r7
 8068f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068f34:	4770      	bx	lr
 8068f36:	bf00      	nop
 8068f38:	40010000 	.word	0x40010000
 8068f3c:	40000400 	.word	0x40000400
 8068f40:	40000800 	.word	0x40000800
 8068f44:	40000c00 	.word	0x40000c00
 8068f48:	40014000 	.word	0x40014000
 8068f4c:	40014400 	.word	0x40014400
 8068f50:	40014800 	.word	0x40014800

08068f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8068f54:	b480      	push	{r7}
 8068f56:	b083      	sub	sp, #12
 8068f58:	af00      	add	r7, sp, #0
 8068f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8068f5c:	bf00      	nop
 8068f5e:	370c      	adds	r7, #12
 8068f60:	46bd      	mov	sp, r7
 8068f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068f66:	4770      	bx	lr

08068f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8068f68:	b480      	push	{r7}
 8068f6a:	b083      	sub	sp, #12
 8068f6c:	af00      	add	r7, sp, #0
 8068f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8068f70:	bf00      	nop
 8068f72:	370c      	adds	r7, #12
 8068f74:	46bd      	mov	sp, r7
 8068f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068f7a:	4770      	bx	lr

08068f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8068f7c:	b580      	push	{r7, lr}
 8068f7e:	b082      	sub	sp, #8
 8068f80:	af00      	add	r7, sp, #0
 8068f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8068f84:	687b      	ldr	r3, [r7, #4]
 8068f86:	2b00      	cmp	r3, #0
 8068f88:	d101      	bne.n	8068f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8068f8a:	2301      	movs	r3, #1
 8068f8c:	e0a0      	b.n	80690d0 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8068f8e:	687b      	ldr	r3, [r7, #4]
 8068f90:	699b      	ldr	r3, [r3, #24]
 8068f92:	2b00      	cmp	r3, #0
 8068f94:	d02c      	beq.n	8068ff0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8068f96:	687b      	ldr	r3, [r7, #4]
 8068f98:	681b      	ldr	r3, [r3, #0]
 8068f9a:	4a4f      	ldr	r2, [pc, #316]	; (80690d8 <HAL_UART_Init+0x15c>)
 8068f9c:	4293      	cmp	r3, r2
 8068f9e:	d00e      	beq.n	8068fbe <HAL_UART_Init+0x42>
 8068fa0:	687b      	ldr	r3, [r7, #4]
 8068fa2:	681b      	ldr	r3, [r3, #0]
 8068fa4:	4a4d      	ldr	r2, [pc, #308]	; (80690dc <HAL_UART_Init+0x160>)
 8068fa6:	4293      	cmp	r3, r2
 8068fa8:	d009      	beq.n	8068fbe <HAL_UART_Init+0x42>
 8068faa:	687b      	ldr	r3, [r7, #4]
 8068fac:	681b      	ldr	r3, [r3, #0]
 8068fae:	4a4c      	ldr	r2, [pc, #304]	; (80690e0 <HAL_UART_Init+0x164>)
 8068fb0:	4293      	cmp	r3, r2
 8068fb2:	d004      	beq.n	8068fbe <HAL_UART_Init+0x42>
 8068fb4:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8068fb8:	484a      	ldr	r0, [pc, #296]	; (80690e4 <HAL_UART_Init+0x168>)
 8068fba:	f7fa f87e 	bl	80630ba <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8068fbe:	687b      	ldr	r3, [r7, #4]
 8068fc0:	699b      	ldr	r3, [r3, #24]
 8068fc2:	2b00      	cmp	r3, #0
 8068fc4:	d028      	beq.n	8069018 <HAL_UART_Init+0x9c>
 8068fc6:	687b      	ldr	r3, [r7, #4]
 8068fc8:	699b      	ldr	r3, [r3, #24]
 8068fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8068fce:	d023      	beq.n	8069018 <HAL_UART_Init+0x9c>
 8068fd0:	687b      	ldr	r3, [r7, #4]
 8068fd2:	699b      	ldr	r3, [r3, #24]
 8068fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8068fd8:	d01e      	beq.n	8069018 <HAL_UART_Init+0x9c>
 8068fda:	687b      	ldr	r3, [r7, #4]
 8068fdc:	699b      	ldr	r3, [r3, #24]
 8068fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8068fe2:	d019      	beq.n	8069018 <HAL_UART_Init+0x9c>
 8068fe4:	f240 1173 	movw	r1, #371	; 0x173
 8068fe8:	483e      	ldr	r0, [pc, #248]	; (80690e4 <HAL_UART_Init+0x168>)
 8068fea:	f7fa f866 	bl	80630ba <assert_failed>
 8068fee:	e013      	b.n	8069018 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8068ff0:	687b      	ldr	r3, [r7, #4]
 8068ff2:	681b      	ldr	r3, [r3, #0]
 8068ff4:	4a38      	ldr	r2, [pc, #224]	; (80690d8 <HAL_UART_Init+0x15c>)
 8068ff6:	4293      	cmp	r3, r2
 8068ff8:	d00e      	beq.n	8069018 <HAL_UART_Init+0x9c>
 8068ffa:	687b      	ldr	r3, [r7, #4]
 8068ffc:	681b      	ldr	r3, [r3, #0]
 8068ffe:	4a37      	ldr	r2, [pc, #220]	; (80690dc <HAL_UART_Init+0x160>)
 8069000:	4293      	cmp	r3, r2
 8069002:	d009      	beq.n	8069018 <HAL_UART_Init+0x9c>
 8069004:	687b      	ldr	r3, [r7, #4]
 8069006:	681b      	ldr	r3, [r3, #0]
 8069008:	4a35      	ldr	r2, [pc, #212]	; (80690e0 <HAL_UART_Init+0x164>)
 806900a:	4293      	cmp	r3, r2
 806900c:	d004      	beq.n	8069018 <HAL_UART_Init+0x9c>
 806900e:	f240 1177 	movw	r1, #375	; 0x177
 8069012:	4834      	ldr	r0, [pc, #208]	; (80690e4 <HAL_UART_Init+0x168>)
 8069014:	f7fa f851 	bl	80630ba <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8069018:	687b      	ldr	r3, [r7, #4]
 806901a:	689b      	ldr	r3, [r3, #8]
 806901c:	2b00      	cmp	r3, #0
 806901e:	d009      	beq.n	8069034 <HAL_UART_Init+0xb8>
 8069020:	687b      	ldr	r3, [r7, #4]
 8069022:	689b      	ldr	r3, [r3, #8]
 8069024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8069028:	d004      	beq.n	8069034 <HAL_UART_Init+0xb8>
 806902a:	f240 1179 	movw	r1, #377	; 0x179
 806902e:	482d      	ldr	r0, [pc, #180]	; (80690e4 <HAL_UART_Init+0x168>)
 8069030:	f7fa f843 	bl	80630ba <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8069034:	687b      	ldr	r3, [r7, #4]
 8069036:	69db      	ldr	r3, [r3, #28]
 8069038:	2b00      	cmp	r3, #0
 806903a:	d009      	beq.n	8069050 <HAL_UART_Init+0xd4>
 806903c:	687b      	ldr	r3, [r7, #4]
 806903e:	69db      	ldr	r3, [r3, #28]
 8069040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8069044:	d004      	beq.n	8069050 <HAL_UART_Init+0xd4>
 8069046:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 806904a:	4826      	ldr	r0, [pc, #152]	; (80690e4 <HAL_UART_Init+0x168>)
 806904c:	f7fa f835 	bl	80630ba <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8069050:	687b      	ldr	r3, [r7, #4]
 8069052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8069056:	b2db      	uxtb	r3, r3
 8069058:	2b00      	cmp	r3, #0
 806905a:	d106      	bne.n	806906a <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 806905c:	687b      	ldr	r3, [r7, #4]
 806905e:	2200      	movs	r2, #0
 8069060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8069064:	6878      	ldr	r0, [r7, #4]
 8069066:	f7fa fb9d 	bl	80637a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 806906a:	687b      	ldr	r3, [r7, #4]
 806906c:	2224      	movs	r2, #36	; 0x24
 806906e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8069072:	687b      	ldr	r3, [r7, #4]
 8069074:	681b      	ldr	r3, [r3, #0]
 8069076:	68da      	ldr	r2, [r3, #12]
 8069078:	687b      	ldr	r3, [r7, #4]
 806907a:	681b      	ldr	r3, [r3, #0]
 806907c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8069080:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8069082:	6878      	ldr	r0, [r7, #4]
 8069084:	f000 fe84 	bl	8069d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8069088:	687b      	ldr	r3, [r7, #4]
 806908a:	681b      	ldr	r3, [r3, #0]
 806908c:	691a      	ldr	r2, [r3, #16]
 806908e:	687b      	ldr	r3, [r7, #4]
 8069090:	681b      	ldr	r3, [r3, #0]
 8069092:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8069096:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8069098:	687b      	ldr	r3, [r7, #4]
 806909a:	681b      	ldr	r3, [r3, #0]
 806909c:	695a      	ldr	r2, [r3, #20]
 806909e:	687b      	ldr	r3, [r7, #4]
 80690a0:	681b      	ldr	r3, [r3, #0]
 80690a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80690a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80690a8:	687b      	ldr	r3, [r7, #4]
 80690aa:	681b      	ldr	r3, [r3, #0]
 80690ac:	68da      	ldr	r2, [r3, #12]
 80690ae:	687b      	ldr	r3, [r7, #4]
 80690b0:	681b      	ldr	r3, [r3, #0]
 80690b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80690b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80690b8:	687b      	ldr	r3, [r7, #4]
 80690ba:	2200      	movs	r2, #0
 80690bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80690be:	687b      	ldr	r3, [r7, #4]
 80690c0:	2220      	movs	r2, #32
 80690c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80690c6:	687b      	ldr	r3, [r7, #4]
 80690c8:	2220      	movs	r2, #32
 80690ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80690ce:	2300      	movs	r3, #0
}
 80690d0:	4618      	mov	r0, r3
 80690d2:	3708      	adds	r7, #8
 80690d4:	46bd      	mov	sp, r7
 80690d6:	bd80      	pop	{r7, pc}
 80690d8:	40011000 	.word	0x40011000
 80690dc:	40004400 	.word	0x40004400
 80690e0:	40011400 	.word	0x40011400
 80690e4:	08076c1c 	.word	0x08076c1c

080690e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80690e8:	b580      	push	{r7, lr}
 80690ea:	b08a      	sub	sp, #40	; 0x28
 80690ec:	af02      	add	r7, sp, #8
 80690ee:	60f8      	str	r0, [r7, #12]
 80690f0:	60b9      	str	r1, [r7, #8]
 80690f2:	603b      	str	r3, [r7, #0]
 80690f4:	4613      	mov	r3, r2
 80690f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80690f8:	2300      	movs	r3, #0
 80690fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80690fc:	68fb      	ldr	r3, [r7, #12]
 80690fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8069102:	b2db      	uxtb	r3, r3
 8069104:	2b20      	cmp	r3, #32
 8069106:	d17c      	bne.n	8069202 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8069108:	68bb      	ldr	r3, [r7, #8]
 806910a:	2b00      	cmp	r3, #0
 806910c:	d002      	beq.n	8069114 <HAL_UART_Transmit+0x2c>
 806910e:	88fb      	ldrh	r3, [r7, #6]
 8069110:	2b00      	cmp	r3, #0
 8069112:	d101      	bne.n	8069118 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8069114:	2301      	movs	r3, #1
 8069116:	e075      	b.n	8069204 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8069118:	68fb      	ldr	r3, [r7, #12]
 806911a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 806911e:	2b01      	cmp	r3, #1
 8069120:	d101      	bne.n	8069126 <HAL_UART_Transmit+0x3e>
 8069122:	2302      	movs	r3, #2
 8069124:	e06e      	b.n	8069204 <HAL_UART_Transmit+0x11c>
 8069126:	68fb      	ldr	r3, [r7, #12]
 8069128:	2201      	movs	r2, #1
 806912a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 806912e:	68fb      	ldr	r3, [r7, #12]
 8069130:	2200      	movs	r2, #0
 8069132:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8069134:	68fb      	ldr	r3, [r7, #12]
 8069136:	2221      	movs	r2, #33	; 0x21
 8069138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 806913c:	f7fa fc36 	bl	80639ac <HAL_GetTick>
 8069140:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8069142:	68fb      	ldr	r3, [r7, #12]
 8069144:	88fa      	ldrh	r2, [r7, #6]
 8069146:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8069148:	68fb      	ldr	r3, [r7, #12]
 806914a:	88fa      	ldrh	r2, [r7, #6]
 806914c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 806914e:	68fb      	ldr	r3, [r7, #12]
 8069150:	689b      	ldr	r3, [r3, #8]
 8069152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8069156:	d108      	bne.n	806916a <HAL_UART_Transmit+0x82>
 8069158:	68fb      	ldr	r3, [r7, #12]
 806915a:	691b      	ldr	r3, [r3, #16]
 806915c:	2b00      	cmp	r3, #0
 806915e:	d104      	bne.n	806916a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8069160:	2300      	movs	r3, #0
 8069162:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8069164:	68bb      	ldr	r3, [r7, #8]
 8069166:	61bb      	str	r3, [r7, #24]
 8069168:	e003      	b.n	8069172 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 806916a:	68bb      	ldr	r3, [r7, #8]
 806916c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 806916e:	2300      	movs	r3, #0
 8069170:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8069172:	68fb      	ldr	r3, [r7, #12]
 8069174:	2200      	movs	r2, #0
 8069176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 806917a:	e02a      	b.n	80691d2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 806917c:	683b      	ldr	r3, [r7, #0]
 806917e:	9300      	str	r3, [sp, #0]
 8069180:	697b      	ldr	r3, [r7, #20]
 8069182:	2200      	movs	r2, #0
 8069184:	2180      	movs	r1, #128	; 0x80
 8069186:	68f8      	ldr	r0, [r7, #12]
 8069188:	f000 fbc0 	bl	806990c <UART_WaitOnFlagUntilTimeout>
 806918c:	4603      	mov	r3, r0
 806918e:	2b00      	cmp	r3, #0
 8069190:	d001      	beq.n	8069196 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8069192:	2303      	movs	r3, #3
 8069194:	e036      	b.n	8069204 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8069196:	69fb      	ldr	r3, [r7, #28]
 8069198:	2b00      	cmp	r3, #0
 806919a:	d10b      	bne.n	80691b4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 806919c:	69bb      	ldr	r3, [r7, #24]
 806919e:	881b      	ldrh	r3, [r3, #0]
 80691a0:	461a      	mov	r2, r3
 80691a2:	68fb      	ldr	r3, [r7, #12]
 80691a4:	681b      	ldr	r3, [r3, #0]
 80691a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80691aa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80691ac:	69bb      	ldr	r3, [r7, #24]
 80691ae:	3302      	adds	r3, #2
 80691b0:	61bb      	str	r3, [r7, #24]
 80691b2:	e007      	b.n	80691c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80691b4:	69fb      	ldr	r3, [r7, #28]
 80691b6:	781a      	ldrb	r2, [r3, #0]
 80691b8:	68fb      	ldr	r3, [r7, #12]
 80691ba:	681b      	ldr	r3, [r3, #0]
 80691bc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80691be:	69fb      	ldr	r3, [r7, #28]
 80691c0:	3301      	adds	r3, #1
 80691c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80691c4:	68fb      	ldr	r3, [r7, #12]
 80691c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80691c8:	b29b      	uxth	r3, r3
 80691ca:	3b01      	subs	r3, #1
 80691cc:	b29a      	uxth	r2, r3
 80691ce:	68fb      	ldr	r3, [r7, #12]
 80691d0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80691d2:	68fb      	ldr	r3, [r7, #12]
 80691d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80691d6:	b29b      	uxth	r3, r3
 80691d8:	2b00      	cmp	r3, #0
 80691da:	d1cf      	bne.n	806917c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80691dc:	683b      	ldr	r3, [r7, #0]
 80691de:	9300      	str	r3, [sp, #0]
 80691e0:	697b      	ldr	r3, [r7, #20]
 80691e2:	2200      	movs	r2, #0
 80691e4:	2140      	movs	r1, #64	; 0x40
 80691e6:	68f8      	ldr	r0, [r7, #12]
 80691e8:	f000 fb90 	bl	806990c <UART_WaitOnFlagUntilTimeout>
 80691ec:	4603      	mov	r3, r0
 80691ee:	2b00      	cmp	r3, #0
 80691f0:	d001      	beq.n	80691f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80691f2:	2303      	movs	r3, #3
 80691f4:	e006      	b.n	8069204 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80691f6:	68fb      	ldr	r3, [r7, #12]
 80691f8:	2220      	movs	r2, #32
 80691fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80691fe:	2300      	movs	r3, #0
 8069200:	e000      	b.n	8069204 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8069202:	2302      	movs	r3, #2
  }
}
 8069204:	4618      	mov	r0, r3
 8069206:	3720      	adds	r7, #32
 8069208:	46bd      	mov	sp, r7
 806920a:	bd80      	pop	{r7, pc}

0806920c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 806920c:	b580      	push	{r7, lr}
 806920e:	b08a      	sub	sp, #40	; 0x28
 8069210:	af02      	add	r7, sp, #8
 8069212:	60f8      	str	r0, [r7, #12]
 8069214:	60b9      	str	r1, [r7, #8]
 8069216:	603b      	str	r3, [r7, #0]
 8069218:	4613      	mov	r3, r2
 806921a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 806921c:	2300      	movs	r3, #0
 806921e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8069220:	68fb      	ldr	r3, [r7, #12]
 8069222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8069226:	b2db      	uxtb	r3, r3
 8069228:	2b20      	cmp	r3, #32
 806922a:	f040 808c 	bne.w	8069346 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 806922e:	68bb      	ldr	r3, [r7, #8]
 8069230:	2b00      	cmp	r3, #0
 8069232:	d002      	beq.n	806923a <HAL_UART_Receive+0x2e>
 8069234:	88fb      	ldrh	r3, [r7, #6]
 8069236:	2b00      	cmp	r3, #0
 8069238:	d101      	bne.n	806923e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 806923a:	2301      	movs	r3, #1
 806923c:	e084      	b.n	8069348 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 806923e:	68fb      	ldr	r3, [r7, #12]
 8069240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8069244:	2b01      	cmp	r3, #1
 8069246:	d101      	bne.n	806924c <HAL_UART_Receive+0x40>
 8069248:	2302      	movs	r3, #2
 806924a:	e07d      	b.n	8069348 <HAL_UART_Receive+0x13c>
 806924c:	68fb      	ldr	r3, [r7, #12]
 806924e:	2201      	movs	r2, #1
 8069250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8069254:	68fb      	ldr	r3, [r7, #12]
 8069256:	2200      	movs	r2, #0
 8069258:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 806925a:	68fb      	ldr	r3, [r7, #12]
 806925c:	2222      	movs	r2, #34	; 0x22
 806925e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8069262:	68fb      	ldr	r3, [r7, #12]
 8069264:	2200      	movs	r2, #0
 8069266:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8069268:	f7fa fba0 	bl	80639ac <HAL_GetTick>
 806926c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 806926e:	68fb      	ldr	r3, [r7, #12]
 8069270:	88fa      	ldrh	r2, [r7, #6]
 8069272:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8069274:	68fb      	ldr	r3, [r7, #12]
 8069276:	88fa      	ldrh	r2, [r7, #6]
 8069278:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 806927a:	68fb      	ldr	r3, [r7, #12]
 806927c:	689b      	ldr	r3, [r3, #8]
 806927e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8069282:	d108      	bne.n	8069296 <HAL_UART_Receive+0x8a>
 8069284:	68fb      	ldr	r3, [r7, #12]
 8069286:	691b      	ldr	r3, [r3, #16]
 8069288:	2b00      	cmp	r3, #0
 806928a:	d104      	bne.n	8069296 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 806928c:	2300      	movs	r3, #0
 806928e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8069290:	68bb      	ldr	r3, [r7, #8]
 8069292:	61bb      	str	r3, [r7, #24]
 8069294:	e003      	b.n	806929e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8069296:	68bb      	ldr	r3, [r7, #8]
 8069298:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 806929a:	2300      	movs	r3, #0
 806929c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 806929e:	68fb      	ldr	r3, [r7, #12]
 80692a0:	2200      	movs	r2, #0
 80692a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80692a6:	e043      	b.n	8069330 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80692a8:	683b      	ldr	r3, [r7, #0]
 80692aa:	9300      	str	r3, [sp, #0]
 80692ac:	697b      	ldr	r3, [r7, #20]
 80692ae:	2200      	movs	r2, #0
 80692b0:	2120      	movs	r1, #32
 80692b2:	68f8      	ldr	r0, [r7, #12]
 80692b4:	f000 fb2a 	bl	806990c <UART_WaitOnFlagUntilTimeout>
 80692b8:	4603      	mov	r3, r0
 80692ba:	2b00      	cmp	r3, #0
 80692bc:	d001      	beq.n	80692c2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80692be:	2303      	movs	r3, #3
 80692c0:	e042      	b.n	8069348 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80692c2:	69fb      	ldr	r3, [r7, #28]
 80692c4:	2b00      	cmp	r3, #0
 80692c6:	d10c      	bne.n	80692e2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80692c8:	68fb      	ldr	r3, [r7, #12]
 80692ca:	681b      	ldr	r3, [r3, #0]
 80692cc:	685b      	ldr	r3, [r3, #4]
 80692ce:	b29b      	uxth	r3, r3
 80692d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80692d4:	b29a      	uxth	r2, r3
 80692d6:	69bb      	ldr	r3, [r7, #24]
 80692d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80692da:	69bb      	ldr	r3, [r7, #24]
 80692dc:	3302      	adds	r3, #2
 80692de:	61bb      	str	r3, [r7, #24]
 80692e0:	e01f      	b.n	8069322 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80692e2:	68fb      	ldr	r3, [r7, #12]
 80692e4:	689b      	ldr	r3, [r3, #8]
 80692e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80692ea:	d007      	beq.n	80692fc <HAL_UART_Receive+0xf0>
 80692ec:	68fb      	ldr	r3, [r7, #12]
 80692ee:	689b      	ldr	r3, [r3, #8]
 80692f0:	2b00      	cmp	r3, #0
 80692f2:	d10a      	bne.n	806930a <HAL_UART_Receive+0xfe>
 80692f4:	68fb      	ldr	r3, [r7, #12]
 80692f6:	691b      	ldr	r3, [r3, #16]
 80692f8:	2b00      	cmp	r3, #0
 80692fa:	d106      	bne.n	806930a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80692fc:	68fb      	ldr	r3, [r7, #12]
 80692fe:	681b      	ldr	r3, [r3, #0]
 8069300:	685b      	ldr	r3, [r3, #4]
 8069302:	b2da      	uxtb	r2, r3
 8069304:	69fb      	ldr	r3, [r7, #28]
 8069306:	701a      	strb	r2, [r3, #0]
 8069308:	e008      	b.n	806931c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 806930a:	68fb      	ldr	r3, [r7, #12]
 806930c:	681b      	ldr	r3, [r3, #0]
 806930e:	685b      	ldr	r3, [r3, #4]
 8069310:	b2db      	uxtb	r3, r3
 8069312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8069316:	b2da      	uxtb	r2, r3
 8069318:	69fb      	ldr	r3, [r7, #28]
 806931a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 806931c:	69fb      	ldr	r3, [r7, #28]
 806931e:	3301      	adds	r3, #1
 8069320:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8069322:	68fb      	ldr	r3, [r7, #12]
 8069324:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8069326:	b29b      	uxth	r3, r3
 8069328:	3b01      	subs	r3, #1
 806932a:	b29a      	uxth	r2, r3
 806932c:	68fb      	ldr	r3, [r7, #12]
 806932e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8069330:	68fb      	ldr	r3, [r7, #12]
 8069332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8069334:	b29b      	uxth	r3, r3
 8069336:	2b00      	cmp	r3, #0
 8069338:	d1b6      	bne.n	80692a8 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 806933a:	68fb      	ldr	r3, [r7, #12]
 806933c:	2220      	movs	r2, #32
 806933e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8069342:	2300      	movs	r3, #0
 8069344:	e000      	b.n	8069348 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8069346:	2302      	movs	r3, #2
  }
}
 8069348:	4618      	mov	r0, r3
 806934a:	3720      	adds	r7, #32
 806934c:	46bd      	mov	sp, r7
 806934e:	bd80      	pop	{r7, pc}

08069350 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8069350:	b580      	push	{r7, lr}
 8069352:	b084      	sub	sp, #16
 8069354:	af00      	add	r7, sp, #0
 8069356:	60f8      	str	r0, [r7, #12]
 8069358:	60b9      	str	r1, [r7, #8]
 806935a:	4613      	mov	r3, r2
 806935c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 806935e:	68fb      	ldr	r3, [r7, #12]
 8069360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8069364:	b2db      	uxtb	r3, r3
 8069366:	2b20      	cmp	r3, #32
 8069368:	d11d      	bne.n	80693a6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 806936a:	68bb      	ldr	r3, [r7, #8]
 806936c:	2b00      	cmp	r3, #0
 806936e:	d002      	beq.n	8069376 <HAL_UART_Receive_IT+0x26>
 8069370:	88fb      	ldrh	r3, [r7, #6]
 8069372:	2b00      	cmp	r3, #0
 8069374:	d101      	bne.n	806937a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8069376:	2301      	movs	r3, #1
 8069378:	e016      	b.n	80693a8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 806937a:	68fb      	ldr	r3, [r7, #12]
 806937c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8069380:	2b01      	cmp	r3, #1
 8069382:	d101      	bne.n	8069388 <HAL_UART_Receive_IT+0x38>
 8069384:	2302      	movs	r3, #2
 8069386:	e00f      	b.n	80693a8 <HAL_UART_Receive_IT+0x58>
 8069388:	68fb      	ldr	r3, [r7, #12]
 806938a:	2201      	movs	r2, #1
 806938c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8069390:	68fb      	ldr	r3, [r7, #12]
 8069392:	2200      	movs	r2, #0
 8069394:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8069396:	88fb      	ldrh	r3, [r7, #6]
 8069398:	461a      	mov	r2, r3
 806939a:	68b9      	ldr	r1, [r7, #8]
 806939c:	68f8      	ldr	r0, [r7, #12]
 806939e:	f000 fb23 	bl	80699e8 <UART_Start_Receive_IT>
 80693a2:	4603      	mov	r3, r0
 80693a4:	e000      	b.n	80693a8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80693a6:	2302      	movs	r3, #2
  }
}
 80693a8:	4618      	mov	r0, r3
 80693aa:	3710      	adds	r7, #16
 80693ac:	46bd      	mov	sp, r7
 80693ae:	bd80      	pop	{r7, pc}

080693b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80693b0:	b580      	push	{r7, lr}
 80693b2:	b0ba      	sub	sp, #232	; 0xe8
 80693b4:	af00      	add	r7, sp, #0
 80693b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80693b8:	687b      	ldr	r3, [r7, #4]
 80693ba:	681b      	ldr	r3, [r3, #0]
 80693bc:	681b      	ldr	r3, [r3, #0]
 80693be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80693c2:	687b      	ldr	r3, [r7, #4]
 80693c4:	681b      	ldr	r3, [r3, #0]
 80693c6:	68db      	ldr	r3, [r3, #12]
 80693c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80693cc:	687b      	ldr	r3, [r7, #4]
 80693ce:	681b      	ldr	r3, [r3, #0]
 80693d0:	695b      	ldr	r3, [r3, #20]
 80693d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80693d6:	2300      	movs	r3, #0
 80693d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80693dc:	2300      	movs	r3, #0
 80693de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80693e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80693e6:	f003 030f 	and.w	r3, r3, #15
 80693ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80693ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80693f2:	2b00      	cmp	r3, #0
 80693f4:	d10f      	bne.n	8069416 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80693f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80693fa:	f003 0320 	and.w	r3, r3, #32
 80693fe:	2b00      	cmp	r3, #0
 8069400:	d009      	beq.n	8069416 <HAL_UART_IRQHandler+0x66>
 8069402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069406:	f003 0320 	and.w	r3, r3, #32
 806940a:	2b00      	cmp	r3, #0
 806940c:	d003      	beq.n	8069416 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 806940e:	6878      	ldr	r0, [r7, #4]
 8069410:	f000 fc03 	bl	8069c1a <UART_Receive_IT>
      return;
 8069414:	e256      	b.n	80698c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8069416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 806941a:	2b00      	cmp	r3, #0
 806941c:	f000 80de 	beq.w	80695dc <HAL_UART_IRQHandler+0x22c>
 8069420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8069424:	f003 0301 	and.w	r3, r3, #1
 8069428:	2b00      	cmp	r3, #0
 806942a:	d106      	bne.n	806943a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 806942c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069430:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8069434:	2b00      	cmp	r3, #0
 8069436:	f000 80d1 	beq.w	80695dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 806943a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 806943e:	f003 0301 	and.w	r3, r3, #1
 8069442:	2b00      	cmp	r3, #0
 8069444:	d00b      	beq.n	806945e <HAL_UART_IRQHandler+0xae>
 8069446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 806944a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806944e:	2b00      	cmp	r3, #0
 8069450:	d005      	beq.n	806945e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8069452:	687b      	ldr	r3, [r7, #4]
 8069454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069456:	f043 0201 	orr.w	r2, r3, #1
 806945a:	687b      	ldr	r3, [r7, #4]
 806945c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 806945e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069462:	f003 0304 	and.w	r3, r3, #4
 8069466:	2b00      	cmp	r3, #0
 8069468:	d00b      	beq.n	8069482 <HAL_UART_IRQHandler+0xd2>
 806946a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 806946e:	f003 0301 	and.w	r3, r3, #1
 8069472:	2b00      	cmp	r3, #0
 8069474:	d005      	beq.n	8069482 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8069476:	687b      	ldr	r3, [r7, #4]
 8069478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806947a:	f043 0202 	orr.w	r2, r3, #2
 806947e:	687b      	ldr	r3, [r7, #4]
 8069480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8069482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069486:	f003 0302 	and.w	r3, r3, #2
 806948a:	2b00      	cmp	r3, #0
 806948c:	d00b      	beq.n	80694a6 <HAL_UART_IRQHandler+0xf6>
 806948e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8069492:	f003 0301 	and.w	r3, r3, #1
 8069496:	2b00      	cmp	r3, #0
 8069498:	d005      	beq.n	80694a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 806949a:	687b      	ldr	r3, [r7, #4]
 806949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806949e:	f043 0204 	orr.w	r2, r3, #4
 80694a2:	687b      	ldr	r3, [r7, #4]
 80694a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80694a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80694aa:	f003 0308 	and.w	r3, r3, #8
 80694ae:	2b00      	cmp	r3, #0
 80694b0:	d011      	beq.n	80694d6 <HAL_UART_IRQHandler+0x126>
 80694b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80694b6:	f003 0320 	and.w	r3, r3, #32
 80694ba:	2b00      	cmp	r3, #0
 80694bc:	d105      	bne.n	80694ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80694be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80694c2:	f003 0301 	and.w	r3, r3, #1
 80694c6:	2b00      	cmp	r3, #0
 80694c8:	d005      	beq.n	80694d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80694ca:	687b      	ldr	r3, [r7, #4]
 80694cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80694ce:	f043 0208 	orr.w	r2, r3, #8
 80694d2:	687b      	ldr	r3, [r7, #4]
 80694d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80694d6:	687b      	ldr	r3, [r7, #4]
 80694d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80694da:	2b00      	cmp	r3, #0
 80694dc:	f000 81ed 	beq.w	80698ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80694e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80694e4:	f003 0320 	and.w	r3, r3, #32
 80694e8:	2b00      	cmp	r3, #0
 80694ea:	d008      	beq.n	80694fe <HAL_UART_IRQHandler+0x14e>
 80694ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80694f0:	f003 0320 	and.w	r3, r3, #32
 80694f4:	2b00      	cmp	r3, #0
 80694f6:	d002      	beq.n	80694fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80694f8:	6878      	ldr	r0, [r7, #4]
 80694fa:	f000 fb8e 	bl	8069c1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80694fe:	687b      	ldr	r3, [r7, #4]
 8069500:	681b      	ldr	r3, [r3, #0]
 8069502:	695b      	ldr	r3, [r3, #20]
 8069504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069508:	2b40      	cmp	r3, #64	; 0x40
 806950a:	bf0c      	ite	eq
 806950c:	2301      	moveq	r3, #1
 806950e:	2300      	movne	r3, #0
 8069510:	b2db      	uxtb	r3, r3
 8069512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8069516:	687b      	ldr	r3, [r7, #4]
 8069518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806951a:	f003 0308 	and.w	r3, r3, #8
 806951e:	2b00      	cmp	r3, #0
 8069520:	d103      	bne.n	806952a <HAL_UART_IRQHandler+0x17a>
 8069522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8069526:	2b00      	cmp	r3, #0
 8069528:	d04f      	beq.n	80695ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 806952a:	6878      	ldr	r0, [r7, #4]
 806952c:	f000 fa96 	bl	8069a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069530:	687b      	ldr	r3, [r7, #4]
 8069532:	681b      	ldr	r3, [r3, #0]
 8069534:	695b      	ldr	r3, [r3, #20]
 8069536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806953a:	2b40      	cmp	r3, #64	; 0x40
 806953c:	d141      	bne.n	80695c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 806953e:	687b      	ldr	r3, [r7, #4]
 8069540:	681b      	ldr	r3, [r3, #0]
 8069542:	3314      	adds	r3, #20
 8069544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 806954c:	e853 3f00 	ldrex	r3, [r3]
 8069550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8069554:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8069558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 806955c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8069560:	687b      	ldr	r3, [r7, #4]
 8069562:	681b      	ldr	r3, [r3, #0]
 8069564:	3314      	adds	r3, #20
 8069566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 806956a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 806956e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8069576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 806957a:	e841 2300 	strex	r3, r2, [r1]
 806957e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8069582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8069586:	2b00      	cmp	r3, #0
 8069588:	d1d9      	bne.n	806953e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 806958a:	687b      	ldr	r3, [r7, #4]
 806958c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806958e:	2b00      	cmp	r3, #0
 8069590:	d013      	beq.n	80695ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8069592:	687b      	ldr	r3, [r7, #4]
 8069594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069596:	4a7d      	ldr	r2, [pc, #500]	; (806978c <HAL_UART_IRQHandler+0x3dc>)
 8069598:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 806959a:	687b      	ldr	r3, [r7, #4]
 806959c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806959e:	4618      	mov	r0, r3
 80695a0:	f7fb fd6c 	bl	806507c <HAL_DMA_Abort_IT>
 80695a4:	4603      	mov	r3, r0
 80695a6:	2b00      	cmp	r3, #0
 80695a8:	d016      	beq.n	80695d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80695aa:	687b      	ldr	r3, [r7, #4]
 80695ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80695ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80695b0:	687a      	ldr	r2, [r7, #4]
 80695b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80695b4:	4610      	mov	r0, r2
 80695b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80695b8:	e00e      	b.n	80695d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80695ba:	6878      	ldr	r0, [r7, #4]
 80695bc:	f000 f990 	bl	80698e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80695c0:	e00a      	b.n	80695d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80695c2:	6878      	ldr	r0, [r7, #4]
 80695c4:	f000 f98c 	bl	80698e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80695c8:	e006      	b.n	80695d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80695ca:	6878      	ldr	r0, [r7, #4]
 80695cc:	f000 f988 	bl	80698e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80695d0:	687b      	ldr	r3, [r7, #4]
 80695d2:	2200      	movs	r2, #0
 80695d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80695d6:	e170      	b.n	80698ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80695d8:	bf00      	nop
    return;
 80695da:	e16e      	b.n	80698ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80695dc:	687b      	ldr	r3, [r7, #4]
 80695de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80695e0:	2b01      	cmp	r3, #1
 80695e2:	f040 814a 	bne.w	806987a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80695e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80695ea:	f003 0310 	and.w	r3, r3, #16
 80695ee:	2b00      	cmp	r3, #0
 80695f0:	f000 8143 	beq.w	806987a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80695f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80695f8:	f003 0310 	and.w	r3, r3, #16
 80695fc:	2b00      	cmp	r3, #0
 80695fe:	f000 813c 	beq.w	806987a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8069602:	2300      	movs	r3, #0
 8069604:	60bb      	str	r3, [r7, #8]
 8069606:	687b      	ldr	r3, [r7, #4]
 8069608:	681b      	ldr	r3, [r3, #0]
 806960a:	681b      	ldr	r3, [r3, #0]
 806960c:	60bb      	str	r3, [r7, #8]
 806960e:	687b      	ldr	r3, [r7, #4]
 8069610:	681b      	ldr	r3, [r3, #0]
 8069612:	685b      	ldr	r3, [r3, #4]
 8069614:	60bb      	str	r3, [r7, #8]
 8069616:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069618:	687b      	ldr	r3, [r7, #4]
 806961a:	681b      	ldr	r3, [r3, #0]
 806961c:	695b      	ldr	r3, [r3, #20]
 806961e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069622:	2b40      	cmp	r3, #64	; 0x40
 8069624:	f040 80b4 	bne.w	8069790 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8069628:	687b      	ldr	r3, [r7, #4]
 806962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806962c:	681b      	ldr	r3, [r3, #0]
 806962e:	685b      	ldr	r3, [r3, #4]
 8069630:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8069634:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8069638:	2b00      	cmp	r3, #0
 806963a:	f000 8140 	beq.w	80698be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 806963e:	687b      	ldr	r3, [r7, #4]
 8069640:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8069642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8069646:	429a      	cmp	r2, r3
 8069648:	f080 8139 	bcs.w	80698be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 806964c:	687b      	ldr	r3, [r7, #4]
 806964e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8069652:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8069654:	687b      	ldr	r3, [r7, #4]
 8069656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069658:	69db      	ldr	r3, [r3, #28]
 806965a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806965e:	f000 8088 	beq.w	8069772 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8069662:	687b      	ldr	r3, [r7, #4]
 8069664:	681b      	ldr	r3, [r3, #0]
 8069666:	330c      	adds	r3, #12
 8069668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806966c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8069670:	e853 3f00 	ldrex	r3, [r3]
 8069674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8069678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 806967c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8069680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8069684:	687b      	ldr	r3, [r7, #4]
 8069686:	681b      	ldr	r3, [r3, #0]
 8069688:	330c      	adds	r3, #12
 806968a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 806968e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8069692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069696:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 806969a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 806969e:	e841 2300 	strex	r3, r2, [r1]
 80696a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80696a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80696aa:	2b00      	cmp	r3, #0
 80696ac:	d1d9      	bne.n	8069662 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80696ae:	687b      	ldr	r3, [r7, #4]
 80696b0:	681b      	ldr	r3, [r3, #0]
 80696b2:	3314      	adds	r3, #20
 80696b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80696b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80696b8:	e853 3f00 	ldrex	r3, [r3]
 80696bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80696be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80696c0:	f023 0301 	bic.w	r3, r3, #1
 80696c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80696c8:	687b      	ldr	r3, [r7, #4]
 80696ca:	681b      	ldr	r3, [r3, #0]
 80696cc:	3314      	adds	r3, #20
 80696ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80696d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80696d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80696d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80696da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80696de:	e841 2300 	strex	r3, r2, [r1]
 80696e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80696e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80696e6:	2b00      	cmp	r3, #0
 80696e8:	d1e1      	bne.n	80696ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80696ea:	687b      	ldr	r3, [r7, #4]
 80696ec:	681b      	ldr	r3, [r3, #0]
 80696ee:	3314      	adds	r3, #20
 80696f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80696f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80696f4:	e853 3f00 	ldrex	r3, [r3]
 80696f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80696fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80696fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8069700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8069704:	687b      	ldr	r3, [r7, #4]
 8069706:	681b      	ldr	r3, [r3, #0]
 8069708:	3314      	adds	r3, #20
 806970a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 806970e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8069710:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069712:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8069714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8069716:	e841 2300 	strex	r3, r2, [r1]
 806971a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 806971c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 806971e:	2b00      	cmp	r3, #0
 8069720:	d1e3      	bne.n	80696ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8069722:	687b      	ldr	r3, [r7, #4]
 8069724:	2220      	movs	r2, #32
 8069726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806972a:	687b      	ldr	r3, [r7, #4]
 806972c:	2200      	movs	r2, #0
 806972e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8069730:	687b      	ldr	r3, [r7, #4]
 8069732:	681b      	ldr	r3, [r3, #0]
 8069734:	330c      	adds	r3, #12
 8069736:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806973a:	e853 3f00 	ldrex	r3, [r3]
 806973e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8069740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8069742:	f023 0310 	bic.w	r3, r3, #16
 8069746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 806974a:	687b      	ldr	r3, [r7, #4]
 806974c:	681b      	ldr	r3, [r3, #0]
 806974e:	330c      	adds	r3, #12
 8069750:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8069754:	65ba      	str	r2, [r7, #88]	; 0x58
 8069756:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069758:	6d79      	ldr	r1, [r7, #84]	; 0x54
 806975a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 806975c:	e841 2300 	strex	r3, r2, [r1]
 8069760:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8069762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8069764:	2b00      	cmp	r3, #0
 8069766:	d1e3      	bne.n	8069730 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8069768:	687b      	ldr	r3, [r7, #4]
 806976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806976c:	4618      	mov	r0, r3
 806976e:	f7fb fc15 	bl	8064f9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8069772:	687b      	ldr	r3, [r7, #4]
 8069774:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8069776:	687b      	ldr	r3, [r7, #4]
 8069778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 806977a:	b29b      	uxth	r3, r3
 806977c:	1ad3      	subs	r3, r2, r3
 806977e:	b29b      	uxth	r3, r3
 8069780:	4619      	mov	r1, r3
 8069782:	6878      	ldr	r0, [r7, #4]
 8069784:	f000 f8b6 	bl	80698f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8069788:	e099      	b.n	80698be <HAL_UART_IRQHandler+0x50e>
 806978a:	bf00      	nop
 806978c:	08069b23 	.word	0x08069b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8069790:	687b      	ldr	r3, [r7, #4]
 8069792:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8069794:	687b      	ldr	r3, [r7, #4]
 8069796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8069798:	b29b      	uxth	r3, r3
 806979a:	1ad3      	subs	r3, r2, r3
 806979c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80697a0:	687b      	ldr	r3, [r7, #4]
 80697a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80697a4:	b29b      	uxth	r3, r3
 80697a6:	2b00      	cmp	r3, #0
 80697a8:	f000 808b 	beq.w	80698c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80697ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80697b0:	2b00      	cmp	r3, #0
 80697b2:	f000 8086 	beq.w	80698c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80697b6:	687b      	ldr	r3, [r7, #4]
 80697b8:	681b      	ldr	r3, [r3, #0]
 80697ba:	330c      	adds	r3, #12
 80697bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80697be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80697c0:	e853 3f00 	ldrex	r3, [r3]
 80697c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80697c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80697c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80697cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80697d0:	687b      	ldr	r3, [r7, #4]
 80697d2:	681b      	ldr	r3, [r3, #0]
 80697d4:	330c      	adds	r3, #12
 80697d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80697da:	647a      	str	r2, [r7, #68]	; 0x44
 80697dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80697de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80697e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80697e2:	e841 2300 	strex	r3, r2, [r1]
 80697e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80697e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80697ea:	2b00      	cmp	r3, #0
 80697ec:	d1e3      	bne.n	80697b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80697ee:	687b      	ldr	r3, [r7, #4]
 80697f0:	681b      	ldr	r3, [r3, #0]
 80697f2:	3314      	adds	r3, #20
 80697f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80697f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80697f8:	e853 3f00 	ldrex	r3, [r3]
 80697fc:	623b      	str	r3, [r7, #32]
   return(result);
 80697fe:	6a3b      	ldr	r3, [r7, #32]
 8069800:	f023 0301 	bic.w	r3, r3, #1
 8069804:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8069808:	687b      	ldr	r3, [r7, #4]
 806980a:	681b      	ldr	r3, [r3, #0]
 806980c:	3314      	adds	r3, #20
 806980e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8069812:	633a      	str	r2, [r7, #48]	; 0x30
 8069814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8069818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806981a:	e841 2300 	strex	r3, r2, [r1]
 806981e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8069820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069822:	2b00      	cmp	r3, #0
 8069824:	d1e3      	bne.n	80697ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8069826:	687b      	ldr	r3, [r7, #4]
 8069828:	2220      	movs	r2, #32
 806982a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806982e:	687b      	ldr	r3, [r7, #4]
 8069830:	2200      	movs	r2, #0
 8069832:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8069834:	687b      	ldr	r3, [r7, #4]
 8069836:	681b      	ldr	r3, [r3, #0]
 8069838:	330c      	adds	r3, #12
 806983a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806983c:	693b      	ldr	r3, [r7, #16]
 806983e:	e853 3f00 	ldrex	r3, [r3]
 8069842:	60fb      	str	r3, [r7, #12]
   return(result);
 8069844:	68fb      	ldr	r3, [r7, #12]
 8069846:	f023 0310 	bic.w	r3, r3, #16
 806984a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 806984e:	687b      	ldr	r3, [r7, #4]
 8069850:	681b      	ldr	r3, [r3, #0]
 8069852:	330c      	adds	r3, #12
 8069854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8069858:	61fa      	str	r2, [r7, #28]
 806985a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806985c:	69b9      	ldr	r1, [r7, #24]
 806985e:	69fa      	ldr	r2, [r7, #28]
 8069860:	e841 2300 	strex	r3, r2, [r1]
 8069864:	617b      	str	r3, [r7, #20]
   return(result);
 8069866:	697b      	ldr	r3, [r7, #20]
 8069868:	2b00      	cmp	r3, #0
 806986a:	d1e3      	bne.n	8069834 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 806986c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8069870:	4619      	mov	r1, r3
 8069872:	6878      	ldr	r0, [r7, #4]
 8069874:	f000 f83e 	bl	80698f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8069878:	e023      	b.n	80698c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 806987a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 806987e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8069882:	2b00      	cmp	r3, #0
 8069884:	d009      	beq.n	806989a <HAL_UART_IRQHandler+0x4ea>
 8069886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 806988a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 806988e:	2b00      	cmp	r3, #0
 8069890:	d003      	beq.n	806989a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8069892:	6878      	ldr	r0, [r7, #4]
 8069894:	f000 f959 	bl	8069b4a <UART_Transmit_IT>
    return;
 8069898:	e014      	b.n	80698c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 806989a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 806989e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80698a2:	2b00      	cmp	r3, #0
 80698a4:	d00e      	beq.n	80698c4 <HAL_UART_IRQHandler+0x514>
 80698a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80698aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80698ae:	2b00      	cmp	r3, #0
 80698b0:	d008      	beq.n	80698c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80698b2:	6878      	ldr	r0, [r7, #4]
 80698b4:	f000 f999 	bl	8069bea <UART_EndTransmit_IT>
    return;
 80698b8:	e004      	b.n	80698c4 <HAL_UART_IRQHandler+0x514>
    return;
 80698ba:	bf00      	nop
 80698bc:	e002      	b.n	80698c4 <HAL_UART_IRQHandler+0x514>
      return;
 80698be:	bf00      	nop
 80698c0:	e000      	b.n	80698c4 <HAL_UART_IRQHandler+0x514>
      return;
 80698c2:	bf00      	nop
  }
}
 80698c4:	37e8      	adds	r7, #232	; 0xe8
 80698c6:	46bd      	mov	sp, r7
 80698c8:	bd80      	pop	{r7, pc}
 80698ca:	bf00      	nop

080698cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80698cc:	b480      	push	{r7}
 80698ce:	b083      	sub	sp, #12
 80698d0:	af00      	add	r7, sp, #0
 80698d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80698d4:	bf00      	nop
 80698d6:	370c      	adds	r7, #12
 80698d8:	46bd      	mov	sp, r7
 80698da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80698de:	4770      	bx	lr

080698e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80698e0:	b480      	push	{r7}
 80698e2:	b083      	sub	sp, #12
 80698e4:	af00      	add	r7, sp, #0
 80698e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80698e8:	bf00      	nop
 80698ea:	370c      	adds	r7, #12
 80698ec:	46bd      	mov	sp, r7
 80698ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80698f2:	4770      	bx	lr

080698f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80698f4:	b480      	push	{r7}
 80698f6:	b083      	sub	sp, #12
 80698f8:	af00      	add	r7, sp, #0
 80698fa:	6078      	str	r0, [r7, #4]
 80698fc:	460b      	mov	r3, r1
 80698fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8069900:	bf00      	nop
 8069902:	370c      	adds	r7, #12
 8069904:	46bd      	mov	sp, r7
 8069906:	f85d 7b04 	ldr.w	r7, [sp], #4
 806990a:	4770      	bx	lr

0806990c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 806990c:	b580      	push	{r7, lr}
 806990e:	b090      	sub	sp, #64	; 0x40
 8069910:	af00      	add	r7, sp, #0
 8069912:	60f8      	str	r0, [r7, #12]
 8069914:	60b9      	str	r1, [r7, #8]
 8069916:	603b      	str	r3, [r7, #0]
 8069918:	4613      	mov	r3, r2
 806991a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 806991c:	e050      	b.n	80699c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 806991e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8069920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8069924:	d04c      	beq.n	80699c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8069926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8069928:	2b00      	cmp	r3, #0
 806992a:	d007      	beq.n	806993c <UART_WaitOnFlagUntilTimeout+0x30>
 806992c:	f7fa f83e 	bl	80639ac <HAL_GetTick>
 8069930:	4602      	mov	r2, r0
 8069932:	683b      	ldr	r3, [r7, #0]
 8069934:	1ad3      	subs	r3, r2, r3
 8069936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8069938:	429a      	cmp	r2, r3
 806993a:	d241      	bcs.n	80699c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 806993c:	68fb      	ldr	r3, [r7, #12]
 806993e:	681b      	ldr	r3, [r3, #0]
 8069940:	330c      	adds	r3, #12
 8069942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069946:	e853 3f00 	ldrex	r3, [r3]
 806994a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 806994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806994e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8069952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8069954:	68fb      	ldr	r3, [r7, #12]
 8069956:	681b      	ldr	r3, [r3, #0]
 8069958:	330c      	adds	r3, #12
 806995a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 806995c:	637a      	str	r2, [r7, #52]	; 0x34
 806995e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8069962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8069964:	e841 2300 	strex	r3, r2, [r1]
 8069968:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 806996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806996c:	2b00      	cmp	r3, #0
 806996e:	d1e5      	bne.n	806993c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8069970:	68fb      	ldr	r3, [r7, #12]
 8069972:	681b      	ldr	r3, [r3, #0]
 8069974:	3314      	adds	r3, #20
 8069976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069978:	697b      	ldr	r3, [r7, #20]
 806997a:	e853 3f00 	ldrex	r3, [r3]
 806997e:	613b      	str	r3, [r7, #16]
   return(result);
 8069980:	693b      	ldr	r3, [r7, #16]
 8069982:	f023 0301 	bic.w	r3, r3, #1
 8069986:	63bb      	str	r3, [r7, #56]	; 0x38
 8069988:	68fb      	ldr	r3, [r7, #12]
 806998a:	681b      	ldr	r3, [r3, #0]
 806998c:	3314      	adds	r3, #20
 806998e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8069990:	623a      	str	r2, [r7, #32]
 8069992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069994:	69f9      	ldr	r1, [r7, #28]
 8069996:	6a3a      	ldr	r2, [r7, #32]
 8069998:	e841 2300 	strex	r3, r2, [r1]
 806999c:	61bb      	str	r3, [r7, #24]
   return(result);
 806999e:	69bb      	ldr	r3, [r7, #24]
 80699a0:	2b00      	cmp	r3, #0
 80699a2:	d1e5      	bne.n	8069970 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80699a4:	68fb      	ldr	r3, [r7, #12]
 80699a6:	2220      	movs	r2, #32
 80699a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80699ac:	68fb      	ldr	r3, [r7, #12]
 80699ae:	2220      	movs	r2, #32
 80699b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80699b4:	68fb      	ldr	r3, [r7, #12]
 80699b6:	2200      	movs	r2, #0
 80699b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80699bc:	2303      	movs	r3, #3
 80699be:	e00f      	b.n	80699e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80699c0:	68fb      	ldr	r3, [r7, #12]
 80699c2:	681b      	ldr	r3, [r3, #0]
 80699c4:	681a      	ldr	r2, [r3, #0]
 80699c6:	68bb      	ldr	r3, [r7, #8]
 80699c8:	4013      	ands	r3, r2
 80699ca:	68ba      	ldr	r2, [r7, #8]
 80699cc:	429a      	cmp	r2, r3
 80699ce:	bf0c      	ite	eq
 80699d0:	2301      	moveq	r3, #1
 80699d2:	2300      	movne	r3, #0
 80699d4:	b2db      	uxtb	r3, r3
 80699d6:	461a      	mov	r2, r3
 80699d8:	79fb      	ldrb	r3, [r7, #7]
 80699da:	429a      	cmp	r2, r3
 80699dc:	d09f      	beq.n	806991e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80699de:	2300      	movs	r3, #0
}
 80699e0:	4618      	mov	r0, r3
 80699e2:	3740      	adds	r7, #64	; 0x40
 80699e4:	46bd      	mov	sp, r7
 80699e6:	bd80      	pop	{r7, pc}

080699e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80699e8:	b480      	push	{r7}
 80699ea:	b085      	sub	sp, #20
 80699ec:	af00      	add	r7, sp, #0
 80699ee:	60f8      	str	r0, [r7, #12]
 80699f0:	60b9      	str	r1, [r7, #8]
 80699f2:	4613      	mov	r3, r2
 80699f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80699f6:	68fb      	ldr	r3, [r7, #12]
 80699f8:	68ba      	ldr	r2, [r7, #8]
 80699fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80699fc:	68fb      	ldr	r3, [r7, #12]
 80699fe:	88fa      	ldrh	r2, [r7, #6]
 8069a00:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8069a02:	68fb      	ldr	r3, [r7, #12]
 8069a04:	88fa      	ldrh	r2, [r7, #6]
 8069a06:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8069a08:	68fb      	ldr	r3, [r7, #12]
 8069a0a:	2200      	movs	r2, #0
 8069a0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8069a0e:	68fb      	ldr	r3, [r7, #12]
 8069a10:	2222      	movs	r2, #34	; 0x22
 8069a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8069a16:	68fb      	ldr	r3, [r7, #12]
 8069a18:	2200      	movs	r2, #0
 8069a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8069a1e:	68fb      	ldr	r3, [r7, #12]
 8069a20:	681b      	ldr	r3, [r3, #0]
 8069a22:	68da      	ldr	r2, [r3, #12]
 8069a24:	68fb      	ldr	r3, [r7, #12]
 8069a26:	681b      	ldr	r3, [r3, #0]
 8069a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8069a2c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8069a2e:	68fb      	ldr	r3, [r7, #12]
 8069a30:	681b      	ldr	r3, [r3, #0]
 8069a32:	695a      	ldr	r2, [r3, #20]
 8069a34:	68fb      	ldr	r3, [r7, #12]
 8069a36:	681b      	ldr	r3, [r3, #0]
 8069a38:	f042 0201 	orr.w	r2, r2, #1
 8069a3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8069a3e:	68fb      	ldr	r3, [r7, #12]
 8069a40:	681b      	ldr	r3, [r3, #0]
 8069a42:	68da      	ldr	r2, [r3, #12]
 8069a44:	68fb      	ldr	r3, [r7, #12]
 8069a46:	681b      	ldr	r3, [r3, #0]
 8069a48:	f042 0220 	orr.w	r2, r2, #32
 8069a4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8069a4e:	2300      	movs	r3, #0
}
 8069a50:	4618      	mov	r0, r3
 8069a52:	3714      	adds	r7, #20
 8069a54:	46bd      	mov	sp, r7
 8069a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069a5a:	4770      	bx	lr

08069a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8069a5c:	b480      	push	{r7}
 8069a5e:	b095      	sub	sp, #84	; 0x54
 8069a60:	af00      	add	r7, sp, #0
 8069a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8069a64:	687b      	ldr	r3, [r7, #4]
 8069a66:	681b      	ldr	r3, [r3, #0]
 8069a68:	330c      	adds	r3, #12
 8069a6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8069a6e:	e853 3f00 	ldrex	r3, [r3]
 8069a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8069a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8069a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8069a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8069a7c:	687b      	ldr	r3, [r7, #4]
 8069a7e:	681b      	ldr	r3, [r3, #0]
 8069a80:	330c      	adds	r3, #12
 8069a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8069a84:	643a      	str	r2, [r7, #64]	; 0x40
 8069a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8069a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8069a8c:	e841 2300 	strex	r3, r2, [r1]
 8069a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8069a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069a94:	2b00      	cmp	r3, #0
 8069a96:	d1e5      	bne.n	8069a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8069a98:	687b      	ldr	r3, [r7, #4]
 8069a9a:	681b      	ldr	r3, [r3, #0]
 8069a9c:	3314      	adds	r3, #20
 8069a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069aa0:	6a3b      	ldr	r3, [r7, #32]
 8069aa2:	e853 3f00 	ldrex	r3, [r3]
 8069aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8069aa8:	69fb      	ldr	r3, [r7, #28]
 8069aaa:	f023 0301 	bic.w	r3, r3, #1
 8069aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8069ab0:	687b      	ldr	r3, [r7, #4]
 8069ab2:	681b      	ldr	r3, [r3, #0]
 8069ab4:	3314      	adds	r3, #20
 8069ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8069ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8069aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8069abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8069ac0:	e841 2300 	strex	r3, r2, [r1]
 8069ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8069ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8069ac8:	2b00      	cmp	r3, #0
 8069aca:	d1e5      	bne.n	8069a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8069acc:	687b      	ldr	r3, [r7, #4]
 8069ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8069ad0:	2b01      	cmp	r3, #1
 8069ad2:	d119      	bne.n	8069b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8069ad4:	687b      	ldr	r3, [r7, #4]
 8069ad6:	681b      	ldr	r3, [r3, #0]
 8069ad8:	330c      	adds	r3, #12
 8069ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069adc:	68fb      	ldr	r3, [r7, #12]
 8069ade:	e853 3f00 	ldrex	r3, [r3]
 8069ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8069ae4:	68bb      	ldr	r3, [r7, #8]
 8069ae6:	f023 0310 	bic.w	r3, r3, #16
 8069aea:	647b      	str	r3, [r7, #68]	; 0x44
 8069aec:	687b      	ldr	r3, [r7, #4]
 8069aee:	681b      	ldr	r3, [r3, #0]
 8069af0:	330c      	adds	r3, #12
 8069af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8069af4:	61ba      	str	r2, [r7, #24]
 8069af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069af8:	6979      	ldr	r1, [r7, #20]
 8069afa:	69ba      	ldr	r2, [r7, #24]
 8069afc:	e841 2300 	strex	r3, r2, [r1]
 8069b00:	613b      	str	r3, [r7, #16]
   return(result);
 8069b02:	693b      	ldr	r3, [r7, #16]
 8069b04:	2b00      	cmp	r3, #0
 8069b06:	d1e5      	bne.n	8069ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8069b08:	687b      	ldr	r3, [r7, #4]
 8069b0a:	2220      	movs	r2, #32
 8069b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8069b10:	687b      	ldr	r3, [r7, #4]
 8069b12:	2200      	movs	r2, #0
 8069b14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8069b16:	bf00      	nop
 8069b18:	3754      	adds	r7, #84	; 0x54
 8069b1a:	46bd      	mov	sp, r7
 8069b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069b20:	4770      	bx	lr

08069b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8069b22:	b580      	push	{r7, lr}
 8069b24:	b084      	sub	sp, #16
 8069b26:	af00      	add	r7, sp, #0
 8069b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8069b2a:	687b      	ldr	r3, [r7, #4]
 8069b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8069b30:	68fb      	ldr	r3, [r7, #12]
 8069b32:	2200      	movs	r2, #0
 8069b34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8069b36:	68fb      	ldr	r3, [r7, #12]
 8069b38:	2200      	movs	r2, #0
 8069b3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8069b3c:	68f8      	ldr	r0, [r7, #12]
 8069b3e:	f7ff fecf 	bl	80698e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8069b42:	bf00      	nop
 8069b44:	3710      	adds	r7, #16
 8069b46:	46bd      	mov	sp, r7
 8069b48:	bd80      	pop	{r7, pc}

08069b4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8069b4a:	b480      	push	{r7}
 8069b4c:	b085      	sub	sp, #20
 8069b4e:	af00      	add	r7, sp, #0
 8069b50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8069b52:	687b      	ldr	r3, [r7, #4]
 8069b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8069b58:	b2db      	uxtb	r3, r3
 8069b5a:	2b21      	cmp	r3, #33	; 0x21
 8069b5c:	d13e      	bne.n	8069bdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8069b5e:	687b      	ldr	r3, [r7, #4]
 8069b60:	689b      	ldr	r3, [r3, #8]
 8069b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8069b66:	d114      	bne.n	8069b92 <UART_Transmit_IT+0x48>
 8069b68:	687b      	ldr	r3, [r7, #4]
 8069b6a:	691b      	ldr	r3, [r3, #16]
 8069b6c:	2b00      	cmp	r3, #0
 8069b6e:	d110      	bne.n	8069b92 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8069b70:	687b      	ldr	r3, [r7, #4]
 8069b72:	6a1b      	ldr	r3, [r3, #32]
 8069b74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8069b76:	68fb      	ldr	r3, [r7, #12]
 8069b78:	881b      	ldrh	r3, [r3, #0]
 8069b7a:	461a      	mov	r2, r3
 8069b7c:	687b      	ldr	r3, [r7, #4]
 8069b7e:	681b      	ldr	r3, [r3, #0]
 8069b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8069b84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8069b86:	687b      	ldr	r3, [r7, #4]
 8069b88:	6a1b      	ldr	r3, [r3, #32]
 8069b8a:	1c9a      	adds	r2, r3, #2
 8069b8c:	687b      	ldr	r3, [r7, #4]
 8069b8e:	621a      	str	r2, [r3, #32]
 8069b90:	e008      	b.n	8069ba4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8069b92:	687b      	ldr	r3, [r7, #4]
 8069b94:	6a1b      	ldr	r3, [r3, #32]
 8069b96:	1c59      	adds	r1, r3, #1
 8069b98:	687a      	ldr	r2, [r7, #4]
 8069b9a:	6211      	str	r1, [r2, #32]
 8069b9c:	781a      	ldrb	r2, [r3, #0]
 8069b9e:	687b      	ldr	r3, [r7, #4]
 8069ba0:	681b      	ldr	r3, [r3, #0]
 8069ba2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8069ba4:	687b      	ldr	r3, [r7, #4]
 8069ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8069ba8:	b29b      	uxth	r3, r3
 8069baa:	3b01      	subs	r3, #1
 8069bac:	b29b      	uxth	r3, r3
 8069bae:	687a      	ldr	r2, [r7, #4]
 8069bb0:	4619      	mov	r1, r3
 8069bb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8069bb4:	2b00      	cmp	r3, #0
 8069bb6:	d10f      	bne.n	8069bd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8069bb8:	687b      	ldr	r3, [r7, #4]
 8069bba:	681b      	ldr	r3, [r3, #0]
 8069bbc:	68da      	ldr	r2, [r3, #12]
 8069bbe:	687b      	ldr	r3, [r7, #4]
 8069bc0:	681b      	ldr	r3, [r3, #0]
 8069bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8069bc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8069bc8:	687b      	ldr	r3, [r7, #4]
 8069bca:	681b      	ldr	r3, [r3, #0]
 8069bcc:	68da      	ldr	r2, [r3, #12]
 8069bce:	687b      	ldr	r3, [r7, #4]
 8069bd0:	681b      	ldr	r3, [r3, #0]
 8069bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8069bd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8069bd8:	2300      	movs	r3, #0
 8069bda:	e000      	b.n	8069bde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8069bdc:	2302      	movs	r3, #2
  }
}
 8069bde:	4618      	mov	r0, r3
 8069be0:	3714      	adds	r7, #20
 8069be2:	46bd      	mov	sp, r7
 8069be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069be8:	4770      	bx	lr

08069bea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8069bea:	b580      	push	{r7, lr}
 8069bec:	b082      	sub	sp, #8
 8069bee:	af00      	add	r7, sp, #0
 8069bf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8069bf2:	687b      	ldr	r3, [r7, #4]
 8069bf4:	681b      	ldr	r3, [r3, #0]
 8069bf6:	68da      	ldr	r2, [r3, #12]
 8069bf8:	687b      	ldr	r3, [r7, #4]
 8069bfa:	681b      	ldr	r3, [r3, #0]
 8069bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8069c00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8069c02:	687b      	ldr	r3, [r7, #4]
 8069c04:	2220      	movs	r2, #32
 8069c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8069c0a:	6878      	ldr	r0, [r7, #4]
 8069c0c:	f7ff fe5e 	bl	80698cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8069c10:	2300      	movs	r3, #0
}
 8069c12:	4618      	mov	r0, r3
 8069c14:	3708      	adds	r7, #8
 8069c16:	46bd      	mov	sp, r7
 8069c18:	bd80      	pop	{r7, pc}

08069c1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8069c1a:	b580      	push	{r7, lr}
 8069c1c:	b08c      	sub	sp, #48	; 0x30
 8069c1e:	af00      	add	r7, sp, #0
 8069c20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8069c22:	687b      	ldr	r3, [r7, #4]
 8069c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8069c28:	b2db      	uxtb	r3, r3
 8069c2a:	2b22      	cmp	r3, #34	; 0x22
 8069c2c:	f040 80ab 	bne.w	8069d86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8069c30:	687b      	ldr	r3, [r7, #4]
 8069c32:	689b      	ldr	r3, [r3, #8]
 8069c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8069c38:	d117      	bne.n	8069c6a <UART_Receive_IT+0x50>
 8069c3a:	687b      	ldr	r3, [r7, #4]
 8069c3c:	691b      	ldr	r3, [r3, #16]
 8069c3e:	2b00      	cmp	r3, #0
 8069c40:	d113      	bne.n	8069c6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8069c42:	2300      	movs	r3, #0
 8069c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8069c46:	687b      	ldr	r3, [r7, #4]
 8069c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8069c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8069c4c:	687b      	ldr	r3, [r7, #4]
 8069c4e:	681b      	ldr	r3, [r3, #0]
 8069c50:	685b      	ldr	r3, [r3, #4]
 8069c52:	b29b      	uxth	r3, r3
 8069c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8069c58:	b29a      	uxth	r2, r3
 8069c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069c5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8069c5e:	687b      	ldr	r3, [r7, #4]
 8069c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8069c62:	1c9a      	adds	r2, r3, #2
 8069c64:	687b      	ldr	r3, [r7, #4]
 8069c66:	629a      	str	r2, [r3, #40]	; 0x28
 8069c68:	e026      	b.n	8069cb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8069c6a:	687b      	ldr	r3, [r7, #4]
 8069c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8069c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8069c70:	2300      	movs	r3, #0
 8069c72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8069c74:	687b      	ldr	r3, [r7, #4]
 8069c76:	689b      	ldr	r3, [r3, #8]
 8069c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8069c7c:	d007      	beq.n	8069c8e <UART_Receive_IT+0x74>
 8069c7e:	687b      	ldr	r3, [r7, #4]
 8069c80:	689b      	ldr	r3, [r3, #8]
 8069c82:	2b00      	cmp	r3, #0
 8069c84:	d10a      	bne.n	8069c9c <UART_Receive_IT+0x82>
 8069c86:	687b      	ldr	r3, [r7, #4]
 8069c88:	691b      	ldr	r3, [r3, #16]
 8069c8a:	2b00      	cmp	r3, #0
 8069c8c:	d106      	bne.n	8069c9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8069c8e:	687b      	ldr	r3, [r7, #4]
 8069c90:	681b      	ldr	r3, [r3, #0]
 8069c92:	685b      	ldr	r3, [r3, #4]
 8069c94:	b2da      	uxtb	r2, r3
 8069c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069c98:	701a      	strb	r2, [r3, #0]
 8069c9a:	e008      	b.n	8069cae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8069c9c:	687b      	ldr	r3, [r7, #4]
 8069c9e:	681b      	ldr	r3, [r3, #0]
 8069ca0:	685b      	ldr	r3, [r3, #4]
 8069ca2:	b2db      	uxtb	r3, r3
 8069ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8069ca8:	b2da      	uxtb	r2, r3
 8069caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8069cac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8069cae:	687b      	ldr	r3, [r7, #4]
 8069cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8069cb2:	1c5a      	adds	r2, r3, #1
 8069cb4:	687b      	ldr	r3, [r7, #4]
 8069cb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8069cb8:	687b      	ldr	r3, [r7, #4]
 8069cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8069cbc:	b29b      	uxth	r3, r3
 8069cbe:	3b01      	subs	r3, #1
 8069cc0:	b29b      	uxth	r3, r3
 8069cc2:	687a      	ldr	r2, [r7, #4]
 8069cc4:	4619      	mov	r1, r3
 8069cc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8069cc8:	2b00      	cmp	r3, #0
 8069cca:	d15a      	bne.n	8069d82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8069ccc:	687b      	ldr	r3, [r7, #4]
 8069cce:	681b      	ldr	r3, [r3, #0]
 8069cd0:	68da      	ldr	r2, [r3, #12]
 8069cd2:	687b      	ldr	r3, [r7, #4]
 8069cd4:	681b      	ldr	r3, [r3, #0]
 8069cd6:	f022 0220 	bic.w	r2, r2, #32
 8069cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8069cdc:	687b      	ldr	r3, [r7, #4]
 8069cde:	681b      	ldr	r3, [r3, #0]
 8069ce0:	68da      	ldr	r2, [r3, #12]
 8069ce2:	687b      	ldr	r3, [r7, #4]
 8069ce4:	681b      	ldr	r3, [r3, #0]
 8069ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8069cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8069cec:	687b      	ldr	r3, [r7, #4]
 8069cee:	681b      	ldr	r3, [r3, #0]
 8069cf0:	695a      	ldr	r2, [r3, #20]
 8069cf2:	687b      	ldr	r3, [r7, #4]
 8069cf4:	681b      	ldr	r3, [r3, #0]
 8069cf6:	f022 0201 	bic.w	r2, r2, #1
 8069cfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8069cfc:	687b      	ldr	r3, [r7, #4]
 8069cfe:	2220      	movs	r2, #32
 8069d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8069d04:	687b      	ldr	r3, [r7, #4]
 8069d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8069d08:	2b01      	cmp	r3, #1
 8069d0a:	d135      	bne.n	8069d78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8069d0c:	687b      	ldr	r3, [r7, #4]
 8069d0e:	2200      	movs	r2, #0
 8069d10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8069d12:	687b      	ldr	r3, [r7, #4]
 8069d14:	681b      	ldr	r3, [r3, #0]
 8069d16:	330c      	adds	r3, #12
 8069d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069d1a:	697b      	ldr	r3, [r7, #20]
 8069d1c:	e853 3f00 	ldrex	r3, [r3]
 8069d20:	613b      	str	r3, [r7, #16]
   return(result);
 8069d22:	693b      	ldr	r3, [r7, #16]
 8069d24:	f023 0310 	bic.w	r3, r3, #16
 8069d28:	627b      	str	r3, [r7, #36]	; 0x24
 8069d2a:	687b      	ldr	r3, [r7, #4]
 8069d2c:	681b      	ldr	r3, [r3, #0]
 8069d2e:	330c      	adds	r3, #12
 8069d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8069d32:	623a      	str	r2, [r7, #32]
 8069d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069d36:	69f9      	ldr	r1, [r7, #28]
 8069d38:	6a3a      	ldr	r2, [r7, #32]
 8069d3a:	e841 2300 	strex	r3, r2, [r1]
 8069d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8069d40:	69bb      	ldr	r3, [r7, #24]
 8069d42:	2b00      	cmp	r3, #0
 8069d44:	d1e5      	bne.n	8069d12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8069d46:	687b      	ldr	r3, [r7, #4]
 8069d48:	681b      	ldr	r3, [r3, #0]
 8069d4a:	681b      	ldr	r3, [r3, #0]
 8069d4c:	f003 0310 	and.w	r3, r3, #16
 8069d50:	2b10      	cmp	r3, #16
 8069d52:	d10a      	bne.n	8069d6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8069d54:	2300      	movs	r3, #0
 8069d56:	60fb      	str	r3, [r7, #12]
 8069d58:	687b      	ldr	r3, [r7, #4]
 8069d5a:	681b      	ldr	r3, [r3, #0]
 8069d5c:	681b      	ldr	r3, [r3, #0]
 8069d5e:	60fb      	str	r3, [r7, #12]
 8069d60:	687b      	ldr	r3, [r7, #4]
 8069d62:	681b      	ldr	r3, [r3, #0]
 8069d64:	685b      	ldr	r3, [r3, #4]
 8069d66:	60fb      	str	r3, [r7, #12]
 8069d68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8069d6a:	687b      	ldr	r3, [r7, #4]
 8069d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8069d6e:	4619      	mov	r1, r3
 8069d70:	6878      	ldr	r0, [r7, #4]
 8069d72:	f7ff fdbf 	bl	80698f4 <HAL_UARTEx_RxEventCallback>
 8069d76:	e002      	b.n	8069d7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8069d78:	6878      	ldr	r0, [r7, #4]
 8069d7a:	f7f8 fdcf 	bl	806291c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8069d7e:	2300      	movs	r3, #0
 8069d80:	e002      	b.n	8069d88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8069d82:	2300      	movs	r3, #0
 8069d84:	e000      	b.n	8069d88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8069d86:	2302      	movs	r3, #2
  }
}
 8069d88:	4618      	mov	r0, r3
 8069d8a:	3730      	adds	r7, #48	; 0x30
 8069d8c:	46bd      	mov	sp, r7
 8069d8e:	bd80      	pop	{r7, pc}

08069d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8069d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8069d94:	b09f      	sub	sp, #124	; 0x7c
 8069d96:	af00      	add	r7, sp, #0
 8069d98:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8069d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069d9c:	685a      	ldr	r2, [r3, #4]
 8069d9e:	4b9b      	ldr	r3, [pc, #620]	; (806a00c <UART_SetConfig+0x27c>)
 8069da0:	429a      	cmp	r2, r3
 8069da2:	d904      	bls.n	8069dae <UART_SetConfig+0x1e>
 8069da4:	f640 6156 	movw	r1, #3670	; 0xe56
 8069da8:	4899      	ldr	r0, [pc, #612]	; (806a010 <UART_SetConfig+0x280>)
 8069daa:	f7f9 f986 	bl	80630ba <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8069dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069db0:	68db      	ldr	r3, [r3, #12]
 8069db2:	2b00      	cmp	r3, #0
 8069db4:	d009      	beq.n	8069dca <UART_SetConfig+0x3a>
 8069db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069db8:	68db      	ldr	r3, [r3, #12]
 8069dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8069dbe:	d004      	beq.n	8069dca <UART_SetConfig+0x3a>
 8069dc0:	f640 6157 	movw	r1, #3671	; 0xe57
 8069dc4:	4892      	ldr	r0, [pc, #584]	; (806a010 <UART_SetConfig+0x280>)
 8069dc6:	f7f9 f978 	bl	80630ba <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8069dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069dcc:	691b      	ldr	r3, [r3, #16]
 8069dce:	2b00      	cmp	r3, #0
 8069dd0:	d00e      	beq.n	8069df0 <UART_SetConfig+0x60>
 8069dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069dd4:	691b      	ldr	r3, [r3, #16]
 8069dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8069dda:	d009      	beq.n	8069df0 <UART_SetConfig+0x60>
 8069ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069dde:	691b      	ldr	r3, [r3, #16]
 8069de0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8069de4:	d004      	beq.n	8069df0 <UART_SetConfig+0x60>
 8069de6:	f640 6158 	movw	r1, #3672	; 0xe58
 8069dea:	4889      	ldr	r0, [pc, #548]	; (806a010 <UART_SetConfig+0x280>)
 8069dec:	f7f9 f965 	bl	80630ba <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8069df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069df2:	695a      	ldr	r2, [r3, #20]
 8069df4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8069df8:	4013      	ands	r3, r2
 8069dfa:	2b00      	cmp	r3, #0
 8069dfc:	d103      	bne.n	8069e06 <UART_SetConfig+0x76>
 8069dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e00:	695b      	ldr	r3, [r3, #20]
 8069e02:	2b00      	cmp	r3, #0
 8069e04:	d104      	bne.n	8069e10 <UART_SetConfig+0x80>
 8069e06:	f640 6159 	movw	r1, #3673	; 0xe59
 8069e0a:	4881      	ldr	r0, [pc, #516]	; (806a010 <UART_SetConfig+0x280>)
 8069e0c:	f7f9 f955 	bl	80630ba <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8069e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e12:	681b      	ldr	r3, [r3, #0]
 8069e14:	691b      	ldr	r3, [r3, #16]
 8069e16:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8069e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e1c:	68d9      	ldr	r1, [r3, #12]
 8069e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e20:	681a      	ldr	r2, [r3, #0]
 8069e22:	ea40 0301 	orr.w	r3, r0, r1
 8069e26:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8069e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e2a:	689a      	ldr	r2, [r3, #8]
 8069e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e2e:	691b      	ldr	r3, [r3, #16]
 8069e30:	431a      	orrs	r2, r3
 8069e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e34:	695b      	ldr	r3, [r3, #20]
 8069e36:	431a      	orrs	r2, r3
 8069e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e3a:	69db      	ldr	r3, [r3, #28]
 8069e3c:	4313      	orrs	r3, r2
 8069e3e:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8069e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e42:	681b      	ldr	r3, [r3, #0]
 8069e44:	68db      	ldr	r3, [r3, #12]
 8069e46:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8069e4a:	f021 010c 	bic.w	r1, r1, #12
 8069e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e50:	681a      	ldr	r2, [r3, #0]
 8069e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8069e54:	430b      	orrs	r3, r1
 8069e56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8069e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e5a:	681b      	ldr	r3, [r3, #0]
 8069e5c:	695b      	ldr	r3, [r3, #20]
 8069e5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8069e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e64:	6999      	ldr	r1, [r3, #24]
 8069e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e68:	681a      	ldr	r2, [r3, #0]
 8069e6a:	ea40 0301 	orr.w	r3, r0, r1
 8069e6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8069e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e72:	681a      	ldr	r2, [r3, #0]
 8069e74:	4b67      	ldr	r3, [pc, #412]	; (806a014 <UART_SetConfig+0x284>)
 8069e76:	429a      	cmp	r2, r3
 8069e78:	d004      	beq.n	8069e84 <UART_SetConfig+0xf4>
 8069e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e7c:	681a      	ldr	r2, [r3, #0]
 8069e7e:	4b66      	ldr	r3, [pc, #408]	; (806a018 <UART_SetConfig+0x288>)
 8069e80:	429a      	cmp	r2, r3
 8069e82:	d103      	bne.n	8069e8c <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8069e84:	f7fe f8fa 	bl	806807c <HAL_RCC_GetPCLK2Freq>
 8069e88:	6778      	str	r0, [r7, #116]	; 0x74
 8069e8a:	e002      	b.n	8069e92 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8069e8c:	f7fe f8e2 	bl	8068054 <HAL_RCC_GetPCLK1Freq>
 8069e90:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8069e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069e94:	69db      	ldr	r3, [r3, #28]
 8069e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8069e9a:	f040 80c1 	bne.w	806a020 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8069e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8069ea0:	461c      	mov	r4, r3
 8069ea2:	f04f 0500 	mov.w	r5, #0
 8069ea6:	4622      	mov	r2, r4
 8069ea8:	462b      	mov	r3, r5
 8069eaa:	1891      	adds	r1, r2, r2
 8069eac:	6439      	str	r1, [r7, #64]	; 0x40
 8069eae:	415b      	adcs	r3, r3
 8069eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8069eb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8069eb6:	1912      	adds	r2, r2, r4
 8069eb8:	eb45 0303 	adc.w	r3, r5, r3
 8069ebc:	f04f 0000 	mov.w	r0, #0
 8069ec0:	f04f 0100 	mov.w	r1, #0
 8069ec4:	00d9      	lsls	r1, r3, #3
 8069ec6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8069eca:	00d0      	lsls	r0, r2, #3
 8069ecc:	4602      	mov	r2, r0
 8069ece:	460b      	mov	r3, r1
 8069ed0:	1911      	adds	r1, r2, r4
 8069ed2:	6639      	str	r1, [r7, #96]	; 0x60
 8069ed4:	416b      	adcs	r3, r5
 8069ed6:	667b      	str	r3, [r7, #100]	; 0x64
 8069ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069eda:	685b      	ldr	r3, [r3, #4]
 8069edc:	461a      	mov	r2, r3
 8069ede:	f04f 0300 	mov.w	r3, #0
 8069ee2:	1891      	adds	r1, r2, r2
 8069ee4:	63b9      	str	r1, [r7, #56]	; 0x38
 8069ee6:	415b      	adcs	r3, r3
 8069ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8069eea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8069eee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8069ef2:	f7f6 ff31 	bl	8060d58 <__aeabi_uldivmod>
 8069ef6:	4602      	mov	r2, r0
 8069ef8:	460b      	mov	r3, r1
 8069efa:	4b48      	ldr	r3, [pc, #288]	; (806a01c <UART_SetConfig+0x28c>)
 8069efc:	fba3 2302 	umull	r2, r3, r3, r2
 8069f00:	095b      	lsrs	r3, r3, #5
 8069f02:	011e      	lsls	r6, r3, #4
 8069f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8069f06:	461c      	mov	r4, r3
 8069f08:	f04f 0500 	mov.w	r5, #0
 8069f0c:	4622      	mov	r2, r4
 8069f0e:	462b      	mov	r3, r5
 8069f10:	1891      	adds	r1, r2, r2
 8069f12:	6339      	str	r1, [r7, #48]	; 0x30
 8069f14:	415b      	adcs	r3, r3
 8069f16:	637b      	str	r3, [r7, #52]	; 0x34
 8069f18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8069f1c:	1912      	adds	r2, r2, r4
 8069f1e:	eb45 0303 	adc.w	r3, r5, r3
 8069f22:	f04f 0000 	mov.w	r0, #0
 8069f26:	f04f 0100 	mov.w	r1, #0
 8069f2a:	00d9      	lsls	r1, r3, #3
 8069f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8069f30:	00d0      	lsls	r0, r2, #3
 8069f32:	4602      	mov	r2, r0
 8069f34:	460b      	mov	r3, r1
 8069f36:	1911      	adds	r1, r2, r4
 8069f38:	65b9      	str	r1, [r7, #88]	; 0x58
 8069f3a:	416b      	adcs	r3, r5
 8069f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8069f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069f40:	685b      	ldr	r3, [r3, #4]
 8069f42:	461a      	mov	r2, r3
 8069f44:	f04f 0300 	mov.w	r3, #0
 8069f48:	1891      	adds	r1, r2, r2
 8069f4a:	62b9      	str	r1, [r7, #40]	; 0x28
 8069f4c:	415b      	adcs	r3, r3
 8069f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8069f50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8069f54:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8069f58:	f7f6 fefe 	bl	8060d58 <__aeabi_uldivmod>
 8069f5c:	4602      	mov	r2, r0
 8069f5e:	460b      	mov	r3, r1
 8069f60:	4b2e      	ldr	r3, [pc, #184]	; (806a01c <UART_SetConfig+0x28c>)
 8069f62:	fba3 1302 	umull	r1, r3, r3, r2
 8069f66:	095b      	lsrs	r3, r3, #5
 8069f68:	2164      	movs	r1, #100	; 0x64
 8069f6a:	fb01 f303 	mul.w	r3, r1, r3
 8069f6e:	1ad3      	subs	r3, r2, r3
 8069f70:	00db      	lsls	r3, r3, #3
 8069f72:	3332      	adds	r3, #50	; 0x32
 8069f74:	4a29      	ldr	r2, [pc, #164]	; (806a01c <UART_SetConfig+0x28c>)
 8069f76:	fba2 2303 	umull	r2, r3, r2, r3
 8069f7a:	095b      	lsrs	r3, r3, #5
 8069f7c:	005b      	lsls	r3, r3, #1
 8069f7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8069f82:	441e      	add	r6, r3
 8069f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8069f86:	4618      	mov	r0, r3
 8069f88:	f04f 0100 	mov.w	r1, #0
 8069f8c:	4602      	mov	r2, r0
 8069f8e:	460b      	mov	r3, r1
 8069f90:	1894      	adds	r4, r2, r2
 8069f92:	623c      	str	r4, [r7, #32]
 8069f94:	415b      	adcs	r3, r3
 8069f96:	627b      	str	r3, [r7, #36]	; 0x24
 8069f98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8069f9c:	1812      	adds	r2, r2, r0
 8069f9e:	eb41 0303 	adc.w	r3, r1, r3
 8069fa2:	f04f 0400 	mov.w	r4, #0
 8069fa6:	f04f 0500 	mov.w	r5, #0
 8069faa:	00dd      	lsls	r5, r3, #3
 8069fac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8069fb0:	00d4      	lsls	r4, r2, #3
 8069fb2:	4622      	mov	r2, r4
 8069fb4:	462b      	mov	r3, r5
 8069fb6:	1814      	adds	r4, r2, r0
 8069fb8:	653c      	str	r4, [r7, #80]	; 0x50
 8069fba:	414b      	adcs	r3, r1
 8069fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8069fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8069fc0:	685b      	ldr	r3, [r3, #4]
 8069fc2:	461a      	mov	r2, r3
 8069fc4:	f04f 0300 	mov.w	r3, #0
 8069fc8:	1891      	adds	r1, r2, r2
 8069fca:	61b9      	str	r1, [r7, #24]
 8069fcc:	415b      	adcs	r3, r3
 8069fce:	61fb      	str	r3, [r7, #28]
 8069fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8069fd4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8069fd8:	f7f6 febe 	bl	8060d58 <__aeabi_uldivmod>
 8069fdc:	4602      	mov	r2, r0
 8069fde:	460b      	mov	r3, r1
 8069fe0:	4b0e      	ldr	r3, [pc, #56]	; (806a01c <UART_SetConfig+0x28c>)
 8069fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8069fe6:	095b      	lsrs	r3, r3, #5
 8069fe8:	2164      	movs	r1, #100	; 0x64
 8069fea:	fb01 f303 	mul.w	r3, r1, r3
 8069fee:	1ad3      	subs	r3, r2, r3
 8069ff0:	00db      	lsls	r3, r3, #3
 8069ff2:	3332      	adds	r3, #50	; 0x32
 8069ff4:	4a09      	ldr	r2, [pc, #36]	; (806a01c <UART_SetConfig+0x28c>)
 8069ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8069ffa:	095b      	lsrs	r3, r3, #5
 8069ffc:	f003 0207 	and.w	r2, r3, #7
 806a000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a002:	681b      	ldr	r3, [r3, #0]
 806a004:	4432      	add	r2, r6
 806a006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 806a008:	e0c4      	b.n	806a194 <UART_SetConfig+0x404>
 806a00a:	bf00      	nop
 806a00c:	00a037a0 	.word	0x00a037a0
 806a010:	08076c1c 	.word	0x08076c1c
 806a014:	40011000 	.word	0x40011000
 806a018:	40011400 	.word	0x40011400
 806a01c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 806a020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a022:	461c      	mov	r4, r3
 806a024:	f04f 0500 	mov.w	r5, #0
 806a028:	4622      	mov	r2, r4
 806a02a:	462b      	mov	r3, r5
 806a02c:	1891      	adds	r1, r2, r2
 806a02e:	6139      	str	r1, [r7, #16]
 806a030:	415b      	adcs	r3, r3
 806a032:	617b      	str	r3, [r7, #20]
 806a034:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 806a038:	1912      	adds	r2, r2, r4
 806a03a:	eb45 0303 	adc.w	r3, r5, r3
 806a03e:	f04f 0000 	mov.w	r0, #0
 806a042:	f04f 0100 	mov.w	r1, #0
 806a046:	00d9      	lsls	r1, r3, #3
 806a048:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 806a04c:	00d0      	lsls	r0, r2, #3
 806a04e:	4602      	mov	r2, r0
 806a050:	460b      	mov	r3, r1
 806a052:	eb12 0804 	adds.w	r8, r2, r4
 806a056:	eb43 0905 	adc.w	r9, r3, r5
 806a05a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a05c:	685b      	ldr	r3, [r3, #4]
 806a05e:	4618      	mov	r0, r3
 806a060:	f04f 0100 	mov.w	r1, #0
 806a064:	f04f 0200 	mov.w	r2, #0
 806a068:	f04f 0300 	mov.w	r3, #0
 806a06c:	008b      	lsls	r3, r1, #2
 806a06e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 806a072:	0082      	lsls	r2, r0, #2
 806a074:	4640      	mov	r0, r8
 806a076:	4649      	mov	r1, r9
 806a078:	f7f6 fe6e 	bl	8060d58 <__aeabi_uldivmod>
 806a07c:	4602      	mov	r2, r0
 806a07e:	460b      	mov	r3, r1
 806a080:	4b47      	ldr	r3, [pc, #284]	; (806a1a0 <UART_SetConfig+0x410>)
 806a082:	fba3 2302 	umull	r2, r3, r3, r2
 806a086:	095b      	lsrs	r3, r3, #5
 806a088:	011e      	lsls	r6, r3, #4
 806a08a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a08c:	4618      	mov	r0, r3
 806a08e:	f04f 0100 	mov.w	r1, #0
 806a092:	4602      	mov	r2, r0
 806a094:	460b      	mov	r3, r1
 806a096:	1894      	adds	r4, r2, r2
 806a098:	60bc      	str	r4, [r7, #8]
 806a09a:	415b      	adcs	r3, r3
 806a09c:	60fb      	str	r3, [r7, #12]
 806a09e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 806a0a2:	1812      	adds	r2, r2, r0
 806a0a4:	eb41 0303 	adc.w	r3, r1, r3
 806a0a8:	f04f 0400 	mov.w	r4, #0
 806a0ac:	f04f 0500 	mov.w	r5, #0
 806a0b0:	00dd      	lsls	r5, r3, #3
 806a0b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 806a0b6:	00d4      	lsls	r4, r2, #3
 806a0b8:	4622      	mov	r2, r4
 806a0ba:	462b      	mov	r3, r5
 806a0bc:	1814      	adds	r4, r2, r0
 806a0be:	64bc      	str	r4, [r7, #72]	; 0x48
 806a0c0:	414b      	adcs	r3, r1
 806a0c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 806a0c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a0c6:	685b      	ldr	r3, [r3, #4]
 806a0c8:	4618      	mov	r0, r3
 806a0ca:	f04f 0100 	mov.w	r1, #0
 806a0ce:	f04f 0200 	mov.w	r2, #0
 806a0d2:	f04f 0300 	mov.w	r3, #0
 806a0d6:	008b      	lsls	r3, r1, #2
 806a0d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 806a0dc:	0082      	lsls	r2, r0, #2
 806a0de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 806a0e2:	f7f6 fe39 	bl	8060d58 <__aeabi_uldivmod>
 806a0e6:	4602      	mov	r2, r0
 806a0e8:	460b      	mov	r3, r1
 806a0ea:	4b2d      	ldr	r3, [pc, #180]	; (806a1a0 <UART_SetConfig+0x410>)
 806a0ec:	fba3 1302 	umull	r1, r3, r3, r2
 806a0f0:	095b      	lsrs	r3, r3, #5
 806a0f2:	2164      	movs	r1, #100	; 0x64
 806a0f4:	fb01 f303 	mul.w	r3, r1, r3
 806a0f8:	1ad3      	subs	r3, r2, r3
 806a0fa:	011b      	lsls	r3, r3, #4
 806a0fc:	3332      	adds	r3, #50	; 0x32
 806a0fe:	4a28      	ldr	r2, [pc, #160]	; (806a1a0 <UART_SetConfig+0x410>)
 806a100:	fba2 2303 	umull	r2, r3, r2, r3
 806a104:	095b      	lsrs	r3, r3, #5
 806a106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 806a10a:	441e      	add	r6, r3
 806a10c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a10e:	4618      	mov	r0, r3
 806a110:	f04f 0100 	mov.w	r1, #0
 806a114:	4602      	mov	r2, r0
 806a116:	460b      	mov	r3, r1
 806a118:	1894      	adds	r4, r2, r2
 806a11a:	603c      	str	r4, [r7, #0]
 806a11c:	415b      	adcs	r3, r3
 806a11e:	607b      	str	r3, [r7, #4]
 806a120:	e9d7 2300 	ldrd	r2, r3, [r7]
 806a124:	1812      	adds	r2, r2, r0
 806a126:	eb41 0303 	adc.w	r3, r1, r3
 806a12a:	f04f 0400 	mov.w	r4, #0
 806a12e:	f04f 0500 	mov.w	r5, #0
 806a132:	00dd      	lsls	r5, r3, #3
 806a134:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 806a138:	00d4      	lsls	r4, r2, #3
 806a13a:	4622      	mov	r2, r4
 806a13c:	462b      	mov	r3, r5
 806a13e:	eb12 0a00 	adds.w	sl, r2, r0
 806a142:	eb43 0b01 	adc.w	fp, r3, r1
 806a146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a148:	685b      	ldr	r3, [r3, #4]
 806a14a:	4618      	mov	r0, r3
 806a14c:	f04f 0100 	mov.w	r1, #0
 806a150:	f04f 0200 	mov.w	r2, #0
 806a154:	f04f 0300 	mov.w	r3, #0
 806a158:	008b      	lsls	r3, r1, #2
 806a15a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 806a15e:	0082      	lsls	r2, r0, #2
 806a160:	4650      	mov	r0, sl
 806a162:	4659      	mov	r1, fp
 806a164:	f7f6 fdf8 	bl	8060d58 <__aeabi_uldivmod>
 806a168:	4602      	mov	r2, r0
 806a16a:	460b      	mov	r3, r1
 806a16c:	4b0c      	ldr	r3, [pc, #48]	; (806a1a0 <UART_SetConfig+0x410>)
 806a16e:	fba3 1302 	umull	r1, r3, r3, r2
 806a172:	095b      	lsrs	r3, r3, #5
 806a174:	2164      	movs	r1, #100	; 0x64
 806a176:	fb01 f303 	mul.w	r3, r1, r3
 806a17a:	1ad3      	subs	r3, r2, r3
 806a17c:	011b      	lsls	r3, r3, #4
 806a17e:	3332      	adds	r3, #50	; 0x32
 806a180:	4a07      	ldr	r2, [pc, #28]	; (806a1a0 <UART_SetConfig+0x410>)
 806a182:	fba2 2303 	umull	r2, r3, r2, r3
 806a186:	095b      	lsrs	r3, r3, #5
 806a188:	f003 020f 	and.w	r2, r3, #15
 806a18c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a18e:	681b      	ldr	r3, [r3, #0]
 806a190:	4432      	add	r2, r6
 806a192:	609a      	str	r2, [r3, #8]
}
 806a194:	bf00      	nop
 806a196:	377c      	adds	r7, #124	; 0x7c
 806a198:	46bd      	mov	sp, r7
 806a19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 806a19e:	bf00      	nop
 806a1a0:	51eb851f 	.word	0x51eb851f

0806a1a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 806a1a4:	b580      	push	{r7, lr}
 806a1a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 806a1a8:	4904      	ldr	r1, [pc, #16]	; (806a1bc <MX_FATFS_Init+0x18>)
 806a1aa:	4805      	ldr	r0, [pc, #20]	; (806a1c0 <MX_FATFS_Init+0x1c>)
 806a1ac:	f003 fa40 	bl	806d630 <FATFS_LinkDriver>
 806a1b0:	4603      	mov	r3, r0
 806a1b2:	461a      	mov	r2, r3
 806a1b4:	4b03      	ldr	r3, [pc, #12]	; (806a1c4 <MX_FATFS_Init+0x20>)
 806a1b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 806a1b8:	bf00      	nop
 806a1ba:	bd80      	pop	{r7, pc}
 806a1bc:	20005850 	.word	0x20005850
 806a1c0:	2000000c 	.word	0x2000000c
 806a1c4:	20005854 	.word	0x20005854

0806a1c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 806a1c8:	b480      	push	{r7}
 806a1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 806a1cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 806a1ce:	4618      	mov	r0, r3
 806a1d0:	46bd      	mov	sp, r7
 806a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a1d6:	4770      	bx	lr

0806a1d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 806a1d8:	b580      	push	{r7, lr}
 806a1da:	b082      	sub	sp, #8
 806a1dc:	af00      	add	r7, sp, #0
 806a1de:	4603      	mov	r3, r0
 806a1e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 806a1e2:	79fb      	ldrb	r3, [r7, #7]
 806a1e4:	4618      	mov	r0, r3
 806a1e6:	f000 f9d9 	bl	806a59c <USER_SPI_initialize>
 806a1ea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 806a1ec:	4618      	mov	r0, r3
 806a1ee:	3708      	adds	r7, #8
 806a1f0:	46bd      	mov	sp, r7
 806a1f2:	bd80      	pop	{r7, pc}

0806a1f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 806a1f4:	b580      	push	{r7, lr}
 806a1f6:	b082      	sub	sp, #8
 806a1f8:	af00      	add	r7, sp, #0
 806a1fa:	4603      	mov	r3, r0
 806a1fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 806a1fe:	79fb      	ldrb	r3, [r7, #7]
 806a200:	4618      	mov	r0, r3
 806a202:	f000 fab7 	bl	806a774 <USER_SPI_status>
 806a206:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 806a208:	4618      	mov	r0, r3
 806a20a:	3708      	adds	r7, #8
 806a20c:	46bd      	mov	sp, r7
 806a20e:	bd80      	pop	{r7, pc}

0806a210 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 806a210:	b580      	push	{r7, lr}
 806a212:	b084      	sub	sp, #16
 806a214:	af00      	add	r7, sp, #0
 806a216:	60b9      	str	r1, [r7, #8]
 806a218:	607a      	str	r2, [r7, #4]
 806a21a:	603b      	str	r3, [r7, #0]
 806a21c:	4603      	mov	r3, r0
 806a21e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 806a220:	7bf8      	ldrb	r0, [r7, #15]
 806a222:	683b      	ldr	r3, [r7, #0]
 806a224:	687a      	ldr	r2, [r7, #4]
 806a226:	68b9      	ldr	r1, [r7, #8]
 806a228:	f000 faba 	bl	806a7a0 <USER_SPI_read>
 806a22c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 806a22e:	4618      	mov	r0, r3
 806a230:	3710      	adds	r7, #16
 806a232:	46bd      	mov	sp, r7
 806a234:	bd80      	pop	{r7, pc}

0806a236 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 806a236:	b580      	push	{r7, lr}
 806a238:	b084      	sub	sp, #16
 806a23a:	af00      	add	r7, sp, #0
 806a23c:	60b9      	str	r1, [r7, #8]
 806a23e:	607a      	str	r2, [r7, #4]
 806a240:	603b      	str	r3, [r7, #0]
 806a242:	4603      	mov	r3, r0
 806a244:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 806a246:	7bf8      	ldrb	r0, [r7, #15]
 806a248:	683b      	ldr	r3, [r7, #0]
 806a24a:	687a      	ldr	r2, [r7, #4]
 806a24c:	68b9      	ldr	r1, [r7, #8]
 806a24e:	f000 fb0d 	bl	806a86c <USER_SPI_write>
 806a252:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 806a254:	4618      	mov	r0, r3
 806a256:	3710      	adds	r7, #16
 806a258:	46bd      	mov	sp, r7
 806a25a:	bd80      	pop	{r7, pc}

0806a25c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 806a25c:	b580      	push	{r7, lr}
 806a25e:	b082      	sub	sp, #8
 806a260:	af00      	add	r7, sp, #0
 806a262:	4603      	mov	r3, r0
 806a264:	603a      	str	r2, [r7, #0]
 806a266:	71fb      	strb	r3, [r7, #7]
 806a268:	460b      	mov	r3, r1
 806a26a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 806a26c:	79b9      	ldrb	r1, [r7, #6]
 806a26e:	79fb      	ldrb	r3, [r7, #7]
 806a270:	683a      	ldr	r2, [r7, #0]
 806a272:	4618      	mov	r0, r3
 806a274:	f000 fb76 	bl	806a964 <USER_SPI_ioctl>
 806a278:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 806a27a:	4618      	mov	r0, r3
 806a27c:	3708      	adds	r7, #8
 806a27e:	46bd      	mov	sp, r7
 806a280:	bd80      	pop	{r7, pc}
	...

0806a284 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 806a284:	b580      	push	{r7, lr}
 806a286:	b082      	sub	sp, #8
 806a288:	af00      	add	r7, sp, #0
 806a28a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 806a28c:	f7f9 fb8e 	bl	80639ac <HAL_GetTick>
 806a290:	4603      	mov	r3, r0
 806a292:	4a04      	ldr	r2, [pc, #16]	; (806a2a4 <SPI_Timer_On+0x20>)
 806a294:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 806a296:	4a04      	ldr	r2, [pc, #16]	; (806a2a8 <SPI_Timer_On+0x24>)
 806a298:	687b      	ldr	r3, [r7, #4]
 806a29a:	6013      	str	r3, [r2, #0]
}
 806a29c:	bf00      	nop
 806a29e:	3708      	adds	r7, #8
 806a2a0:	46bd      	mov	sp, r7
 806a2a2:	bd80      	pop	{r7, pc}
 806a2a4:	20005cbc 	.word	0x20005cbc
 806a2a8:	20005cc0 	.word	0x20005cc0

0806a2ac <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 806a2ac:	b580      	push	{r7, lr}
 806a2ae:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 806a2b0:	f7f9 fb7c 	bl	80639ac <HAL_GetTick>
 806a2b4:	4602      	mov	r2, r0
 806a2b6:	4b06      	ldr	r3, [pc, #24]	; (806a2d0 <SPI_Timer_Status+0x24>)
 806a2b8:	681b      	ldr	r3, [r3, #0]
 806a2ba:	1ad2      	subs	r2, r2, r3
 806a2bc:	4b05      	ldr	r3, [pc, #20]	; (806a2d4 <SPI_Timer_Status+0x28>)
 806a2be:	681b      	ldr	r3, [r3, #0]
 806a2c0:	429a      	cmp	r2, r3
 806a2c2:	bf34      	ite	cc
 806a2c4:	2301      	movcc	r3, #1
 806a2c6:	2300      	movcs	r3, #0
 806a2c8:	b2db      	uxtb	r3, r3
}
 806a2ca:	4618      	mov	r0, r3
 806a2cc:	bd80      	pop	{r7, pc}
 806a2ce:	bf00      	nop
 806a2d0:	20005cbc 	.word	0x20005cbc
 806a2d4:	20005cc0 	.word	0x20005cc0

0806a2d8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 806a2d8:	b580      	push	{r7, lr}
 806a2da:	b086      	sub	sp, #24
 806a2dc:	af02      	add	r7, sp, #8
 806a2de:	4603      	mov	r3, r0
 806a2e0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 806a2e2:	f107 020f 	add.w	r2, r7, #15
 806a2e6:	1df9      	adds	r1, r7, #7
 806a2e8:	2332      	movs	r3, #50	; 0x32
 806a2ea:	9300      	str	r3, [sp, #0]
 806a2ec:	2301      	movs	r3, #1
 806a2ee:	4804      	ldr	r0, [pc, #16]	; (806a300 <xchg_spi+0x28>)
 806a2f0:	f7fe f8a6 	bl	8068440 <HAL_SPI_TransmitReceive>
    return rxDat;
 806a2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 806a2f6:	4618      	mov	r0, r3
 806a2f8:	3710      	adds	r7, #16
 806a2fa:	46bd      	mov	sp, r7
 806a2fc:	bd80      	pop	{r7, pc}
 806a2fe:	bf00      	nop
 806a300:	20005710 	.word	0x20005710

0806a304 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 806a304:	b590      	push	{r4, r7, lr}
 806a306:	b085      	sub	sp, #20
 806a308:	af00      	add	r7, sp, #0
 806a30a:	6078      	str	r0, [r7, #4]
 806a30c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 806a30e:	2300      	movs	r3, #0
 806a310:	60fb      	str	r3, [r7, #12]
 806a312:	e00a      	b.n	806a32a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 806a314:	687a      	ldr	r2, [r7, #4]
 806a316:	68fb      	ldr	r3, [r7, #12]
 806a318:	18d4      	adds	r4, r2, r3
 806a31a:	20ff      	movs	r0, #255	; 0xff
 806a31c:	f7ff ffdc 	bl	806a2d8 <xchg_spi>
 806a320:	4603      	mov	r3, r0
 806a322:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 806a324:	68fb      	ldr	r3, [r7, #12]
 806a326:	3301      	adds	r3, #1
 806a328:	60fb      	str	r3, [r7, #12]
 806a32a:	68fa      	ldr	r2, [r7, #12]
 806a32c:	683b      	ldr	r3, [r7, #0]
 806a32e:	429a      	cmp	r2, r3
 806a330:	d3f0      	bcc.n	806a314 <rcvr_spi_multi+0x10>
	}
}
 806a332:	bf00      	nop
 806a334:	bf00      	nop
 806a336:	3714      	adds	r7, #20
 806a338:	46bd      	mov	sp, r7
 806a33a:	bd90      	pop	{r4, r7, pc}

0806a33c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 806a33c:	b580      	push	{r7, lr}
 806a33e:	b084      	sub	sp, #16
 806a340:	af00      	add	r7, sp, #0
 806a342:	6078      	str	r0, [r7, #4]
 806a344:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 806a346:	2300      	movs	r3, #0
 806a348:	60fb      	str	r3, [r7, #12]
 806a34a:	e009      	b.n	806a360 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 806a34c:	687a      	ldr	r2, [r7, #4]
 806a34e:	68fb      	ldr	r3, [r7, #12]
 806a350:	4413      	add	r3, r2
 806a352:	781b      	ldrb	r3, [r3, #0]
 806a354:	4618      	mov	r0, r3
 806a356:	f7ff ffbf 	bl	806a2d8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 806a35a:	68fb      	ldr	r3, [r7, #12]
 806a35c:	3301      	adds	r3, #1
 806a35e:	60fb      	str	r3, [r7, #12]
 806a360:	68fa      	ldr	r2, [r7, #12]
 806a362:	683b      	ldr	r3, [r7, #0]
 806a364:	429a      	cmp	r2, r3
 806a366:	d3f1      	bcc.n	806a34c <xmit_spi_multi+0x10>
	}
}
 806a368:	bf00      	nop
 806a36a:	bf00      	nop
 806a36c:	3710      	adds	r7, #16
 806a36e:	46bd      	mov	sp, r7
 806a370:	bd80      	pop	{r7, pc}

0806a372 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 806a372:	b580      	push	{r7, lr}
 806a374:	b086      	sub	sp, #24
 806a376:	af00      	add	r7, sp, #0
 806a378:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 806a37a:	f7f9 fb17 	bl	80639ac <HAL_GetTick>
 806a37e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 806a380:	687b      	ldr	r3, [r7, #4]
 806a382:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 806a384:	20ff      	movs	r0, #255	; 0xff
 806a386:	f7ff ffa7 	bl	806a2d8 <xchg_spi>
 806a38a:	4603      	mov	r3, r0
 806a38c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 806a38e:	7bfb      	ldrb	r3, [r7, #15]
 806a390:	2bff      	cmp	r3, #255	; 0xff
 806a392:	d007      	beq.n	806a3a4 <wait_ready+0x32>
 806a394:	f7f9 fb0a 	bl	80639ac <HAL_GetTick>
 806a398:	4602      	mov	r2, r0
 806a39a:	697b      	ldr	r3, [r7, #20]
 806a39c:	1ad3      	subs	r3, r2, r3
 806a39e:	693a      	ldr	r2, [r7, #16]
 806a3a0:	429a      	cmp	r2, r3
 806a3a2:	d8ef      	bhi.n	806a384 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 806a3a4:	7bfb      	ldrb	r3, [r7, #15]
 806a3a6:	2bff      	cmp	r3, #255	; 0xff
 806a3a8:	bf0c      	ite	eq
 806a3aa:	2301      	moveq	r3, #1
 806a3ac:	2300      	movne	r3, #0
 806a3ae:	b2db      	uxtb	r3, r3
}
 806a3b0:	4618      	mov	r0, r3
 806a3b2:	3718      	adds	r7, #24
 806a3b4:	46bd      	mov	sp, r7
 806a3b6:	bd80      	pop	{r7, pc}

0806a3b8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 806a3b8:	b580      	push	{r7, lr}
 806a3ba:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 806a3bc:	2201      	movs	r2, #1
 806a3be:	2102      	movs	r1, #2
 806a3c0:	4803      	ldr	r0, [pc, #12]	; (806a3d0 <despiselect+0x18>)
 806a3c2:	f7fb fb83 	bl	8065acc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 806a3c6:	20ff      	movs	r0, #255	; 0xff
 806a3c8:	f7ff ff86 	bl	806a2d8 <xchg_spi>

}
 806a3cc:	bf00      	nop
 806a3ce:	bd80      	pop	{r7, pc}
 806a3d0:	40020400 	.word	0x40020400

0806a3d4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 806a3d4:	b580      	push	{r7, lr}
 806a3d6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 806a3d8:	2200      	movs	r2, #0
 806a3da:	2102      	movs	r1, #2
 806a3dc:	4809      	ldr	r0, [pc, #36]	; (806a404 <spiselect+0x30>)
 806a3de:	f7fb fb75 	bl	8065acc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 806a3e2:	20ff      	movs	r0, #255	; 0xff
 806a3e4:	f7ff ff78 	bl	806a2d8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 806a3e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 806a3ec:	f7ff ffc1 	bl	806a372 <wait_ready>
 806a3f0:	4603      	mov	r3, r0
 806a3f2:	2b00      	cmp	r3, #0
 806a3f4:	d001      	beq.n	806a3fa <spiselect+0x26>
 806a3f6:	2301      	movs	r3, #1
 806a3f8:	e002      	b.n	806a400 <spiselect+0x2c>

	despiselect();
 806a3fa:	f7ff ffdd 	bl	806a3b8 <despiselect>
	return 0;	/* Timeout */
 806a3fe:	2300      	movs	r3, #0
}
 806a400:	4618      	mov	r0, r3
 806a402:	bd80      	pop	{r7, pc}
 806a404:	40020400 	.word	0x40020400

0806a408 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 806a408:	b580      	push	{r7, lr}
 806a40a:	b084      	sub	sp, #16
 806a40c:	af00      	add	r7, sp, #0
 806a40e:	6078      	str	r0, [r7, #4]
 806a410:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 806a412:	20c8      	movs	r0, #200	; 0xc8
 806a414:	f7ff ff36 	bl	806a284 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 806a418:	20ff      	movs	r0, #255	; 0xff
 806a41a:	f7ff ff5d 	bl	806a2d8 <xchg_spi>
 806a41e:	4603      	mov	r3, r0
 806a420:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 806a422:	7bfb      	ldrb	r3, [r7, #15]
 806a424:	2bff      	cmp	r3, #255	; 0xff
 806a426:	d104      	bne.n	806a432 <rcvr_datablock+0x2a>
 806a428:	f7ff ff40 	bl	806a2ac <SPI_Timer_Status>
 806a42c:	4603      	mov	r3, r0
 806a42e:	2b00      	cmp	r3, #0
 806a430:	d1f2      	bne.n	806a418 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 806a432:	7bfb      	ldrb	r3, [r7, #15]
 806a434:	2bfe      	cmp	r3, #254	; 0xfe
 806a436:	d001      	beq.n	806a43c <rcvr_datablock+0x34>
 806a438:	2300      	movs	r3, #0
 806a43a:	e00a      	b.n	806a452 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 806a43c:	6839      	ldr	r1, [r7, #0]
 806a43e:	6878      	ldr	r0, [r7, #4]
 806a440:	f7ff ff60 	bl	806a304 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 806a444:	20ff      	movs	r0, #255	; 0xff
 806a446:	f7ff ff47 	bl	806a2d8 <xchg_spi>
 806a44a:	20ff      	movs	r0, #255	; 0xff
 806a44c:	f7ff ff44 	bl	806a2d8 <xchg_spi>

	return 1;						/* Function succeeded */
 806a450:	2301      	movs	r3, #1
}
 806a452:	4618      	mov	r0, r3
 806a454:	3710      	adds	r7, #16
 806a456:	46bd      	mov	sp, r7
 806a458:	bd80      	pop	{r7, pc}

0806a45a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 806a45a:	b580      	push	{r7, lr}
 806a45c:	b084      	sub	sp, #16
 806a45e:	af00      	add	r7, sp, #0
 806a460:	6078      	str	r0, [r7, #4]
 806a462:	460b      	mov	r3, r1
 806a464:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 806a466:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 806a46a:	f7ff ff82 	bl	806a372 <wait_ready>
 806a46e:	4603      	mov	r3, r0
 806a470:	2b00      	cmp	r3, #0
 806a472:	d101      	bne.n	806a478 <xmit_datablock+0x1e>
 806a474:	2300      	movs	r3, #0
 806a476:	e01e      	b.n	806a4b6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 806a478:	78fb      	ldrb	r3, [r7, #3]
 806a47a:	4618      	mov	r0, r3
 806a47c:	f7ff ff2c 	bl	806a2d8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 806a480:	78fb      	ldrb	r3, [r7, #3]
 806a482:	2bfd      	cmp	r3, #253	; 0xfd
 806a484:	d016      	beq.n	806a4b4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 806a486:	f44f 7100 	mov.w	r1, #512	; 0x200
 806a48a:	6878      	ldr	r0, [r7, #4]
 806a48c:	f7ff ff56 	bl	806a33c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 806a490:	20ff      	movs	r0, #255	; 0xff
 806a492:	f7ff ff21 	bl	806a2d8 <xchg_spi>
 806a496:	20ff      	movs	r0, #255	; 0xff
 806a498:	f7ff ff1e 	bl	806a2d8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 806a49c:	20ff      	movs	r0, #255	; 0xff
 806a49e:	f7ff ff1b 	bl	806a2d8 <xchg_spi>
 806a4a2:	4603      	mov	r3, r0
 806a4a4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 806a4a6:	7bfb      	ldrb	r3, [r7, #15]
 806a4a8:	f003 031f 	and.w	r3, r3, #31
 806a4ac:	2b05      	cmp	r3, #5
 806a4ae:	d001      	beq.n	806a4b4 <xmit_datablock+0x5a>
 806a4b0:	2300      	movs	r3, #0
 806a4b2:	e000      	b.n	806a4b6 <xmit_datablock+0x5c>
	}
	return 1;
 806a4b4:	2301      	movs	r3, #1
}
 806a4b6:	4618      	mov	r0, r3
 806a4b8:	3710      	adds	r7, #16
 806a4ba:	46bd      	mov	sp, r7
 806a4bc:	bd80      	pop	{r7, pc}

0806a4be <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 806a4be:	b580      	push	{r7, lr}
 806a4c0:	b084      	sub	sp, #16
 806a4c2:	af00      	add	r7, sp, #0
 806a4c4:	4603      	mov	r3, r0
 806a4c6:	6039      	str	r1, [r7, #0]
 806a4c8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 806a4ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806a4ce:	2b00      	cmp	r3, #0
 806a4d0:	da0e      	bge.n	806a4f0 <send_cmd+0x32>
		cmd &= 0x7F;
 806a4d2:	79fb      	ldrb	r3, [r7, #7]
 806a4d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806a4d8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 806a4da:	2100      	movs	r1, #0
 806a4dc:	2037      	movs	r0, #55	; 0x37
 806a4de:	f7ff ffee 	bl	806a4be <send_cmd>
 806a4e2:	4603      	mov	r3, r0
 806a4e4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 806a4e6:	7bbb      	ldrb	r3, [r7, #14]
 806a4e8:	2b01      	cmp	r3, #1
 806a4ea:	d901      	bls.n	806a4f0 <send_cmd+0x32>
 806a4ec:	7bbb      	ldrb	r3, [r7, #14]
 806a4ee:	e051      	b.n	806a594 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 806a4f0:	79fb      	ldrb	r3, [r7, #7]
 806a4f2:	2b0c      	cmp	r3, #12
 806a4f4:	d008      	beq.n	806a508 <send_cmd+0x4a>
		despiselect();
 806a4f6:	f7ff ff5f 	bl	806a3b8 <despiselect>
		if (!spiselect()) return 0xFF;
 806a4fa:	f7ff ff6b 	bl	806a3d4 <spiselect>
 806a4fe:	4603      	mov	r3, r0
 806a500:	2b00      	cmp	r3, #0
 806a502:	d101      	bne.n	806a508 <send_cmd+0x4a>
 806a504:	23ff      	movs	r3, #255	; 0xff
 806a506:	e045      	b.n	806a594 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 806a508:	79fb      	ldrb	r3, [r7, #7]
 806a50a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806a50e:	b2db      	uxtb	r3, r3
 806a510:	4618      	mov	r0, r3
 806a512:	f7ff fee1 	bl	806a2d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 806a516:	683b      	ldr	r3, [r7, #0]
 806a518:	0e1b      	lsrs	r3, r3, #24
 806a51a:	b2db      	uxtb	r3, r3
 806a51c:	4618      	mov	r0, r3
 806a51e:	f7ff fedb 	bl	806a2d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 806a522:	683b      	ldr	r3, [r7, #0]
 806a524:	0c1b      	lsrs	r3, r3, #16
 806a526:	b2db      	uxtb	r3, r3
 806a528:	4618      	mov	r0, r3
 806a52a:	f7ff fed5 	bl	806a2d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 806a52e:	683b      	ldr	r3, [r7, #0]
 806a530:	0a1b      	lsrs	r3, r3, #8
 806a532:	b2db      	uxtb	r3, r3
 806a534:	4618      	mov	r0, r3
 806a536:	f7ff fecf 	bl	806a2d8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 806a53a:	683b      	ldr	r3, [r7, #0]
 806a53c:	b2db      	uxtb	r3, r3
 806a53e:	4618      	mov	r0, r3
 806a540:	f7ff feca 	bl	806a2d8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 806a544:	2301      	movs	r3, #1
 806a546:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 806a548:	79fb      	ldrb	r3, [r7, #7]
 806a54a:	2b00      	cmp	r3, #0
 806a54c:	d101      	bne.n	806a552 <send_cmd+0x94>
 806a54e:	2395      	movs	r3, #149	; 0x95
 806a550:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 806a552:	79fb      	ldrb	r3, [r7, #7]
 806a554:	2b08      	cmp	r3, #8
 806a556:	d101      	bne.n	806a55c <send_cmd+0x9e>
 806a558:	2387      	movs	r3, #135	; 0x87
 806a55a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 806a55c:	7bfb      	ldrb	r3, [r7, #15]
 806a55e:	4618      	mov	r0, r3
 806a560:	f7ff feba 	bl	806a2d8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 806a564:	79fb      	ldrb	r3, [r7, #7]
 806a566:	2b0c      	cmp	r3, #12
 806a568:	d102      	bne.n	806a570 <send_cmd+0xb2>
 806a56a:	20ff      	movs	r0, #255	; 0xff
 806a56c:	f7ff feb4 	bl	806a2d8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 806a570:	230a      	movs	r3, #10
 806a572:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 806a574:	20ff      	movs	r0, #255	; 0xff
 806a576:	f7ff feaf 	bl	806a2d8 <xchg_spi>
 806a57a:	4603      	mov	r3, r0
 806a57c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 806a57e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 806a582:	2b00      	cmp	r3, #0
 806a584:	da05      	bge.n	806a592 <send_cmd+0xd4>
 806a586:	7bfb      	ldrb	r3, [r7, #15]
 806a588:	3b01      	subs	r3, #1
 806a58a:	73fb      	strb	r3, [r7, #15]
 806a58c:	7bfb      	ldrb	r3, [r7, #15]
 806a58e:	2b00      	cmp	r3, #0
 806a590:	d1f0      	bne.n	806a574 <send_cmd+0xb6>

	return res;							/* Return received response */
 806a592:	7bbb      	ldrb	r3, [r7, #14]
}
 806a594:	4618      	mov	r0, r3
 806a596:	3710      	adds	r7, #16
 806a598:	46bd      	mov	sp, r7
 806a59a:	bd80      	pop	{r7, pc}

0806a59c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 806a59c:	b590      	push	{r4, r7, lr}
 806a59e:	b085      	sub	sp, #20
 806a5a0:	af00      	add	r7, sp, #0
 806a5a2:	4603      	mov	r3, r0
 806a5a4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 806a5a6:	79fb      	ldrb	r3, [r7, #7]
 806a5a8:	2b00      	cmp	r3, #0
 806a5aa:	d001      	beq.n	806a5b0 <USER_SPI_initialize+0x14>
 806a5ac:	2301      	movs	r3, #1
 806a5ae:	e0d6      	b.n	806a75e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 806a5b0:	4b6d      	ldr	r3, [pc, #436]	; (806a768 <USER_SPI_initialize+0x1cc>)
 806a5b2:	781b      	ldrb	r3, [r3, #0]
 806a5b4:	b2db      	uxtb	r3, r3
 806a5b6:	f003 0302 	and.w	r3, r3, #2
 806a5ba:	2b00      	cmp	r3, #0
 806a5bc:	d003      	beq.n	806a5c6 <USER_SPI_initialize+0x2a>
 806a5be:	4b6a      	ldr	r3, [pc, #424]	; (806a768 <USER_SPI_initialize+0x1cc>)
 806a5c0:	781b      	ldrb	r3, [r3, #0]
 806a5c2:	b2db      	uxtb	r3, r3
 806a5c4:	e0cb      	b.n	806a75e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 806a5c6:	4b69      	ldr	r3, [pc, #420]	; (806a76c <USER_SPI_initialize+0x1d0>)
 806a5c8:	681b      	ldr	r3, [r3, #0]
 806a5ca:	681b      	ldr	r3, [r3, #0]
 806a5cc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 806a5d0:	4b66      	ldr	r3, [pc, #408]	; (806a76c <USER_SPI_initialize+0x1d0>)
 806a5d2:	681b      	ldr	r3, [r3, #0]
 806a5d4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 806a5d8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 806a5da:	230a      	movs	r3, #10
 806a5dc:	73fb      	strb	r3, [r7, #15]
 806a5de:	e005      	b.n	806a5ec <USER_SPI_initialize+0x50>
 806a5e0:	20ff      	movs	r0, #255	; 0xff
 806a5e2:	f7ff fe79 	bl	806a2d8 <xchg_spi>
 806a5e6:	7bfb      	ldrb	r3, [r7, #15]
 806a5e8:	3b01      	subs	r3, #1
 806a5ea:	73fb      	strb	r3, [r7, #15]
 806a5ec:	7bfb      	ldrb	r3, [r7, #15]
 806a5ee:	2b00      	cmp	r3, #0
 806a5f0:	d1f6      	bne.n	806a5e0 <USER_SPI_initialize+0x44>

	ty = 0;
 806a5f2:	2300      	movs	r3, #0
 806a5f4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 806a5f6:	2100      	movs	r1, #0
 806a5f8:	2000      	movs	r0, #0
 806a5fa:	f7ff ff60 	bl	806a4be <send_cmd>
 806a5fe:	4603      	mov	r3, r0
 806a600:	2b01      	cmp	r3, #1
 806a602:	f040 808b 	bne.w	806a71c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 806a606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 806a60a:	f7ff fe3b 	bl	806a284 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 806a60e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 806a612:	2008      	movs	r0, #8
 806a614:	f7ff ff53 	bl	806a4be <send_cmd>
 806a618:	4603      	mov	r3, r0
 806a61a:	2b01      	cmp	r3, #1
 806a61c:	d151      	bne.n	806a6c2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 806a61e:	2300      	movs	r3, #0
 806a620:	73fb      	strb	r3, [r7, #15]
 806a622:	e00d      	b.n	806a640 <USER_SPI_initialize+0xa4>
 806a624:	7bfc      	ldrb	r4, [r7, #15]
 806a626:	20ff      	movs	r0, #255	; 0xff
 806a628:	f7ff fe56 	bl	806a2d8 <xchg_spi>
 806a62c:	4603      	mov	r3, r0
 806a62e:	461a      	mov	r2, r3
 806a630:	f107 0310 	add.w	r3, r7, #16
 806a634:	4423      	add	r3, r4
 806a636:	f803 2c08 	strb.w	r2, [r3, #-8]
 806a63a:	7bfb      	ldrb	r3, [r7, #15]
 806a63c:	3301      	adds	r3, #1
 806a63e:	73fb      	strb	r3, [r7, #15]
 806a640:	7bfb      	ldrb	r3, [r7, #15]
 806a642:	2b03      	cmp	r3, #3
 806a644:	d9ee      	bls.n	806a624 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 806a646:	7abb      	ldrb	r3, [r7, #10]
 806a648:	2b01      	cmp	r3, #1
 806a64a:	d167      	bne.n	806a71c <USER_SPI_initialize+0x180>
 806a64c:	7afb      	ldrb	r3, [r7, #11]
 806a64e:	2baa      	cmp	r3, #170	; 0xaa
 806a650:	d164      	bne.n	806a71c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 806a652:	bf00      	nop
 806a654:	f7ff fe2a 	bl	806a2ac <SPI_Timer_Status>
 806a658:	4603      	mov	r3, r0
 806a65a:	2b00      	cmp	r3, #0
 806a65c:	d007      	beq.n	806a66e <USER_SPI_initialize+0xd2>
 806a65e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 806a662:	20a9      	movs	r0, #169	; 0xa9
 806a664:	f7ff ff2b 	bl	806a4be <send_cmd>
 806a668:	4603      	mov	r3, r0
 806a66a:	2b00      	cmp	r3, #0
 806a66c:	d1f2      	bne.n	806a654 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 806a66e:	f7ff fe1d 	bl	806a2ac <SPI_Timer_Status>
 806a672:	4603      	mov	r3, r0
 806a674:	2b00      	cmp	r3, #0
 806a676:	d051      	beq.n	806a71c <USER_SPI_initialize+0x180>
 806a678:	2100      	movs	r1, #0
 806a67a:	203a      	movs	r0, #58	; 0x3a
 806a67c:	f7ff ff1f 	bl	806a4be <send_cmd>
 806a680:	4603      	mov	r3, r0
 806a682:	2b00      	cmp	r3, #0
 806a684:	d14a      	bne.n	806a71c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 806a686:	2300      	movs	r3, #0
 806a688:	73fb      	strb	r3, [r7, #15]
 806a68a:	e00d      	b.n	806a6a8 <USER_SPI_initialize+0x10c>
 806a68c:	7bfc      	ldrb	r4, [r7, #15]
 806a68e:	20ff      	movs	r0, #255	; 0xff
 806a690:	f7ff fe22 	bl	806a2d8 <xchg_spi>
 806a694:	4603      	mov	r3, r0
 806a696:	461a      	mov	r2, r3
 806a698:	f107 0310 	add.w	r3, r7, #16
 806a69c:	4423      	add	r3, r4
 806a69e:	f803 2c08 	strb.w	r2, [r3, #-8]
 806a6a2:	7bfb      	ldrb	r3, [r7, #15]
 806a6a4:	3301      	adds	r3, #1
 806a6a6:	73fb      	strb	r3, [r7, #15]
 806a6a8:	7bfb      	ldrb	r3, [r7, #15]
 806a6aa:	2b03      	cmp	r3, #3
 806a6ac:	d9ee      	bls.n	806a68c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 806a6ae:	7a3b      	ldrb	r3, [r7, #8]
 806a6b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806a6b4:	2b00      	cmp	r3, #0
 806a6b6:	d001      	beq.n	806a6bc <USER_SPI_initialize+0x120>
 806a6b8:	230c      	movs	r3, #12
 806a6ba:	e000      	b.n	806a6be <USER_SPI_initialize+0x122>
 806a6bc:	2304      	movs	r3, #4
 806a6be:	737b      	strb	r3, [r7, #13]
 806a6c0:	e02c      	b.n	806a71c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 806a6c2:	2100      	movs	r1, #0
 806a6c4:	20a9      	movs	r0, #169	; 0xa9
 806a6c6:	f7ff fefa 	bl	806a4be <send_cmd>
 806a6ca:	4603      	mov	r3, r0
 806a6cc:	2b01      	cmp	r3, #1
 806a6ce:	d804      	bhi.n	806a6da <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 806a6d0:	2302      	movs	r3, #2
 806a6d2:	737b      	strb	r3, [r7, #13]
 806a6d4:	23a9      	movs	r3, #169	; 0xa9
 806a6d6:	73bb      	strb	r3, [r7, #14]
 806a6d8:	e003      	b.n	806a6e2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 806a6da:	2301      	movs	r3, #1
 806a6dc:	737b      	strb	r3, [r7, #13]
 806a6de:	2301      	movs	r3, #1
 806a6e0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 806a6e2:	bf00      	nop
 806a6e4:	f7ff fde2 	bl	806a2ac <SPI_Timer_Status>
 806a6e8:	4603      	mov	r3, r0
 806a6ea:	2b00      	cmp	r3, #0
 806a6ec:	d007      	beq.n	806a6fe <USER_SPI_initialize+0x162>
 806a6ee:	7bbb      	ldrb	r3, [r7, #14]
 806a6f0:	2100      	movs	r1, #0
 806a6f2:	4618      	mov	r0, r3
 806a6f4:	f7ff fee3 	bl	806a4be <send_cmd>
 806a6f8:	4603      	mov	r3, r0
 806a6fa:	2b00      	cmp	r3, #0
 806a6fc:	d1f2      	bne.n	806a6e4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 806a6fe:	f7ff fdd5 	bl	806a2ac <SPI_Timer_Status>
 806a702:	4603      	mov	r3, r0
 806a704:	2b00      	cmp	r3, #0
 806a706:	d007      	beq.n	806a718 <USER_SPI_initialize+0x17c>
 806a708:	f44f 7100 	mov.w	r1, #512	; 0x200
 806a70c:	2010      	movs	r0, #16
 806a70e:	f7ff fed6 	bl	806a4be <send_cmd>
 806a712:	4603      	mov	r3, r0
 806a714:	2b00      	cmp	r3, #0
 806a716:	d001      	beq.n	806a71c <USER_SPI_initialize+0x180>
				ty = 0;
 806a718:	2300      	movs	r3, #0
 806a71a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 806a71c:	4a14      	ldr	r2, [pc, #80]	; (806a770 <USER_SPI_initialize+0x1d4>)
 806a71e:	7b7b      	ldrb	r3, [r7, #13]
 806a720:	7013      	strb	r3, [r2, #0]
	despiselect();
 806a722:	f7ff fe49 	bl	806a3b8 <despiselect>

	if (ty) {			/* OK */
 806a726:	7b7b      	ldrb	r3, [r7, #13]
 806a728:	2b00      	cmp	r3, #0
 806a72a:	d012      	beq.n	806a752 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 806a72c:	4b0f      	ldr	r3, [pc, #60]	; (806a76c <USER_SPI_initialize+0x1d0>)
 806a72e:	681b      	ldr	r3, [r3, #0]
 806a730:	681b      	ldr	r3, [r3, #0]
 806a732:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 806a736:	4b0d      	ldr	r3, [pc, #52]	; (806a76c <USER_SPI_initialize+0x1d0>)
 806a738:	681b      	ldr	r3, [r3, #0]
 806a73a:	f042 0210 	orr.w	r2, r2, #16
 806a73e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 806a740:	4b09      	ldr	r3, [pc, #36]	; (806a768 <USER_SPI_initialize+0x1cc>)
 806a742:	781b      	ldrb	r3, [r3, #0]
 806a744:	b2db      	uxtb	r3, r3
 806a746:	f023 0301 	bic.w	r3, r3, #1
 806a74a:	b2da      	uxtb	r2, r3
 806a74c:	4b06      	ldr	r3, [pc, #24]	; (806a768 <USER_SPI_initialize+0x1cc>)
 806a74e:	701a      	strb	r2, [r3, #0]
 806a750:	e002      	b.n	806a758 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 806a752:	4b05      	ldr	r3, [pc, #20]	; (806a768 <USER_SPI_initialize+0x1cc>)
 806a754:	2201      	movs	r2, #1
 806a756:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 806a758:	4b03      	ldr	r3, [pc, #12]	; (806a768 <USER_SPI_initialize+0x1cc>)
 806a75a:	781b      	ldrb	r3, [r3, #0]
 806a75c:	b2db      	uxtb	r3, r3
}
 806a75e:	4618      	mov	r0, r3
 806a760:	3714      	adds	r7, #20
 806a762:	46bd      	mov	sp, r7
 806a764:	bd90      	pop	{r4, r7, pc}
 806a766:	bf00      	nop
 806a768:	20000020 	.word	0x20000020
 806a76c:	20005710 	.word	0x20005710
 806a770:	20000420 	.word	0x20000420

0806a774 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 806a774:	b480      	push	{r7}
 806a776:	b083      	sub	sp, #12
 806a778:	af00      	add	r7, sp, #0
 806a77a:	4603      	mov	r3, r0
 806a77c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 806a77e:	79fb      	ldrb	r3, [r7, #7]
 806a780:	2b00      	cmp	r3, #0
 806a782:	d001      	beq.n	806a788 <USER_SPI_status+0x14>
 806a784:	2301      	movs	r3, #1
 806a786:	e002      	b.n	806a78e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 806a788:	4b04      	ldr	r3, [pc, #16]	; (806a79c <USER_SPI_status+0x28>)
 806a78a:	781b      	ldrb	r3, [r3, #0]
 806a78c:	b2db      	uxtb	r3, r3
}
 806a78e:	4618      	mov	r0, r3
 806a790:	370c      	adds	r7, #12
 806a792:	46bd      	mov	sp, r7
 806a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a798:	4770      	bx	lr
 806a79a:	bf00      	nop
 806a79c:	20000020 	.word	0x20000020

0806a7a0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 806a7a0:	b580      	push	{r7, lr}
 806a7a2:	b084      	sub	sp, #16
 806a7a4:	af00      	add	r7, sp, #0
 806a7a6:	60b9      	str	r1, [r7, #8]
 806a7a8:	607a      	str	r2, [r7, #4]
 806a7aa:	603b      	str	r3, [r7, #0]
 806a7ac:	4603      	mov	r3, r0
 806a7ae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 806a7b0:	7bfb      	ldrb	r3, [r7, #15]
 806a7b2:	2b00      	cmp	r3, #0
 806a7b4:	d102      	bne.n	806a7bc <USER_SPI_read+0x1c>
 806a7b6:	683b      	ldr	r3, [r7, #0]
 806a7b8:	2b00      	cmp	r3, #0
 806a7ba:	d101      	bne.n	806a7c0 <USER_SPI_read+0x20>
 806a7bc:	2304      	movs	r3, #4
 806a7be:	e04d      	b.n	806a85c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 806a7c0:	4b28      	ldr	r3, [pc, #160]	; (806a864 <USER_SPI_read+0xc4>)
 806a7c2:	781b      	ldrb	r3, [r3, #0]
 806a7c4:	b2db      	uxtb	r3, r3
 806a7c6:	f003 0301 	and.w	r3, r3, #1
 806a7ca:	2b00      	cmp	r3, #0
 806a7cc:	d001      	beq.n	806a7d2 <USER_SPI_read+0x32>
 806a7ce:	2303      	movs	r3, #3
 806a7d0:	e044      	b.n	806a85c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 806a7d2:	4b25      	ldr	r3, [pc, #148]	; (806a868 <USER_SPI_read+0xc8>)
 806a7d4:	781b      	ldrb	r3, [r3, #0]
 806a7d6:	f003 0308 	and.w	r3, r3, #8
 806a7da:	2b00      	cmp	r3, #0
 806a7dc:	d102      	bne.n	806a7e4 <USER_SPI_read+0x44>
 806a7de:	687b      	ldr	r3, [r7, #4]
 806a7e0:	025b      	lsls	r3, r3, #9
 806a7e2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 806a7e4:	683b      	ldr	r3, [r7, #0]
 806a7e6:	2b01      	cmp	r3, #1
 806a7e8:	d111      	bne.n	806a80e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 806a7ea:	6879      	ldr	r1, [r7, #4]
 806a7ec:	2011      	movs	r0, #17
 806a7ee:	f7ff fe66 	bl	806a4be <send_cmd>
 806a7f2:	4603      	mov	r3, r0
 806a7f4:	2b00      	cmp	r3, #0
 806a7f6:	d129      	bne.n	806a84c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 806a7f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 806a7fc:	68b8      	ldr	r0, [r7, #8]
 806a7fe:	f7ff fe03 	bl	806a408 <rcvr_datablock>
 806a802:	4603      	mov	r3, r0
 806a804:	2b00      	cmp	r3, #0
 806a806:	d021      	beq.n	806a84c <USER_SPI_read+0xac>
			count = 0;
 806a808:	2300      	movs	r3, #0
 806a80a:	603b      	str	r3, [r7, #0]
 806a80c:	e01e      	b.n	806a84c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 806a80e:	6879      	ldr	r1, [r7, #4]
 806a810:	2012      	movs	r0, #18
 806a812:	f7ff fe54 	bl	806a4be <send_cmd>
 806a816:	4603      	mov	r3, r0
 806a818:	2b00      	cmp	r3, #0
 806a81a:	d117      	bne.n	806a84c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 806a81c:	f44f 7100 	mov.w	r1, #512	; 0x200
 806a820:	68b8      	ldr	r0, [r7, #8]
 806a822:	f7ff fdf1 	bl	806a408 <rcvr_datablock>
 806a826:	4603      	mov	r3, r0
 806a828:	2b00      	cmp	r3, #0
 806a82a:	d00a      	beq.n	806a842 <USER_SPI_read+0xa2>
				buff += 512;
 806a82c:	68bb      	ldr	r3, [r7, #8]
 806a82e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 806a832:	60bb      	str	r3, [r7, #8]
			} while (--count);
 806a834:	683b      	ldr	r3, [r7, #0]
 806a836:	3b01      	subs	r3, #1
 806a838:	603b      	str	r3, [r7, #0]
 806a83a:	683b      	ldr	r3, [r7, #0]
 806a83c:	2b00      	cmp	r3, #0
 806a83e:	d1ed      	bne.n	806a81c <USER_SPI_read+0x7c>
 806a840:	e000      	b.n	806a844 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 806a842:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 806a844:	2100      	movs	r1, #0
 806a846:	200c      	movs	r0, #12
 806a848:	f7ff fe39 	bl	806a4be <send_cmd>
		}
	}
	despiselect();
 806a84c:	f7ff fdb4 	bl	806a3b8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 806a850:	683b      	ldr	r3, [r7, #0]
 806a852:	2b00      	cmp	r3, #0
 806a854:	bf14      	ite	ne
 806a856:	2301      	movne	r3, #1
 806a858:	2300      	moveq	r3, #0
 806a85a:	b2db      	uxtb	r3, r3
}
 806a85c:	4618      	mov	r0, r3
 806a85e:	3710      	adds	r7, #16
 806a860:	46bd      	mov	sp, r7
 806a862:	bd80      	pop	{r7, pc}
 806a864:	20000020 	.word	0x20000020
 806a868:	20000420 	.word	0x20000420

0806a86c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 806a86c:	b580      	push	{r7, lr}
 806a86e:	b084      	sub	sp, #16
 806a870:	af00      	add	r7, sp, #0
 806a872:	60b9      	str	r1, [r7, #8]
 806a874:	607a      	str	r2, [r7, #4]
 806a876:	603b      	str	r3, [r7, #0]
 806a878:	4603      	mov	r3, r0
 806a87a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 806a87c:	7bfb      	ldrb	r3, [r7, #15]
 806a87e:	2b00      	cmp	r3, #0
 806a880:	d102      	bne.n	806a888 <USER_SPI_write+0x1c>
 806a882:	683b      	ldr	r3, [r7, #0]
 806a884:	2b00      	cmp	r3, #0
 806a886:	d101      	bne.n	806a88c <USER_SPI_write+0x20>
 806a888:	2304      	movs	r3, #4
 806a88a:	e063      	b.n	806a954 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 806a88c:	4b33      	ldr	r3, [pc, #204]	; (806a95c <USER_SPI_write+0xf0>)
 806a88e:	781b      	ldrb	r3, [r3, #0]
 806a890:	b2db      	uxtb	r3, r3
 806a892:	f003 0301 	and.w	r3, r3, #1
 806a896:	2b00      	cmp	r3, #0
 806a898:	d001      	beq.n	806a89e <USER_SPI_write+0x32>
 806a89a:	2303      	movs	r3, #3
 806a89c:	e05a      	b.n	806a954 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 806a89e:	4b2f      	ldr	r3, [pc, #188]	; (806a95c <USER_SPI_write+0xf0>)
 806a8a0:	781b      	ldrb	r3, [r3, #0]
 806a8a2:	b2db      	uxtb	r3, r3
 806a8a4:	f003 0304 	and.w	r3, r3, #4
 806a8a8:	2b00      	cmp	r3, #0
 806a8aa:	d001      	beq.n	806a8b0 <USER_SPI_write+0x44>
 806a8ac:	2302      	movs	r3, #2
 806a8ae:	e051      	b.n	806a954 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 806a8b0:	4b2b      	ldr	r3, [pc, #172]	; (806a960 <USER_SPI_write+0xf4>)
 806a8b2:	781b      	ldrb	r3, [r3, #0]
 806a8b4:	f003 0308 	and.w	r3, r3, #8
 806a8b8:	2b00      	cmp	r3, #0
 806a8ba:	d102      	bne.n	806a8c2 <USER_SPI_write+0x56>
 806a8bc:	687b      	ldr	r3, [r7, #4]
 806a8be:	025b      	lsls	r3, r3, #9
 806a8c0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 806a8c2:	683b      	ldr	r3, [r7, #0]
 806a8c4:	2b01      	cmp	r3, #1
 806a8c6:	d110      	bne.n	806a8ea <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 806a8c8:	6879      	ldr	r1, [r7, #4]
 806a8ca:	2018      	movs	r0, #24
 806a8cc:	f7ff fdf7 	bl	806a4be <send_cmd>
 806a8d0:	4603      	mov	r3, r0
 806a8d2:	2b00      	cmp	r3, #0
 806a8d4:	d136      	bne.n	806a944 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 806a8d6:	21fe      	movs	r1, #254	; 0xfe
 806a8d8:	68b8      	ldr	r0, [r7, #8]
 806a8da:	f7ff fdbe 	bl	806a45a <xmit_datablock>
 806a8de:	4603      	mov	r3, r0
 806a8e0:	2b00      	cmp	r3, #0
 806a8e2:	d02f      	beq.n	806a944 <USER_SPI_write+0xd8>
			count = 0;
 806a8e4:	2300      	movs	r3, #0
 806a8e6:	603b      	str	r3, [r7, #0]
 806a8e8:	e02c      	b.n	806a944 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 806a8ea:	4b1d      	ldr	r3, [pc, #116]	; (806a960 <USER_SPI_write+0xf4>)
 806a8ec:	781b      	ldrb	r3, [r3, #0]
 806a8ee:	f003 0306 	and.w	r3, r3, #6
 806a8f2:	2b00      	cmp	r3, #0
 806a8f4:	d003      	beq.n	806a8fe <USER_SPI_write+0x92>
 806a8f6:	6839      	ldr	r1, [r7, #0]
 806a8f8:	2097      	movs	r0, #151	; 0x97
 806a8fa:	f7ff fde0 	bl	806a4be <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 806a8fe:	6879      	ldr	r1, [r7, #4]
 806a900:	2019      	movs	r0, #25
 806a902:	f7ff fddc 	bl	806a4be <send_cmd>
 806a906:	4603      	mov	r3, r0
 806a908:	2b00      	cmp	r3, #0
 806a90a:	d11b      	bne.n	806a944 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 806a90c:	21fc      	movs	r1, #252	; 0xfc
 806a90e:	68b8      	ldr	r0, [r7, #8]
 806a910:	f7ff fda3 	bl	806a45a <xmit_datablock>
 806a914:	4603      	mov	r3, r0
 806a916:	2b00      	cmp	r3, #0
 806a918:	d00a      	beq.n	806a930 <USER_SPI_write+0xc4>
				buff += 512;
 806a91a:	68bb      	ldr	r3, [r7, #8]
 806a91c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 806a920:	60bb      	str	r3, [r7, #8]
			} while (--count);
 806a922:	683b      	ldr	r3, [r7, #0]
 806a924:	3b01      	subs	r3, #1
 806a926:	603b      	str	r3, [r7, #0]
 806a928:	683b      	ldr	r3, [r7, #0]
 806a92a:	2b00      	cmp	r3, #0
 806a92c:	d1ee      	bne.n	806a90c <USER_SPI_write+0xa0>
 806a92e:	e000      	b.n	806a932 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 806a930:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 806a932:	21fd      	movs	r1, #253	; 0xfd
 806a934:	2000      	movs	r0, #0
 806a936:	f7ff fd90 	bl	806a45a <xmit_datablock>
 806a93a:	4603      	mov	r3, r0
 806a93c:	2b00      	cmp	r3, #0
 806a93e:	d101      	bne.n	806a944 <USER_SPI_write+0xd8>
 806a940:	2301      	movs	r3, #1
 806a942:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 806a944:	f7ff fd38 	bl	806a3b8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 806a948:	683b      	ldr	r3, [r7, #0]
 806a94a:	2b00      	cmp	r3, #0
 806a94c:	bf14      	ite	ne
 806a94e:	2301      	movne	r3, #1
 806a950:	2300      	moveq	r3, #0
 806a952:	b2db      	uxtb	r3, r3
}
 806a954:	4618      	mov	r0, r3
 806a956:	3710      	adds	r7, #16
 806a958:	46bd      	mov	sp, r7
 806a95a:	bd80      	pop	{r7, pc}
 806a95c:	20000020 	.word	0x20000020
 806a960:	20000420 	.word	0x20000420

0806a964 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 806a964:	b580      	push	{r7, lr}
 806a966:	b08c      	sub	sp, #48	; 0x30
 806a968:	af00      	add	r7, sp, #0
 806a96a:	4603      	mov	r3, r0
 806a96c:	603a      	str	r2, [r7, #0]
 806a96e:	71fb      	strb	r3, [r7, #7]
 806a970:	460b      	mov	r3, r1
 806a972:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 806a974:	79fb      	ldrb	r3, [r7, #7]
 806a976:	2b00      	cmp	r3, #0
 806a978:	d001      	beq.n	806a97e <USER_SPI_ioctl+0x1a>
 806a97a:	2304      	movs	r3, #4
 806a97c:	e15a      	b.n	806ac34 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 806a97e:	4baf      	ldr	r3, [pc, #700]	; (806ac3c <USER_SPI_ioctl+0x2d8>)
 806a980:	781b      	ldrb	r3, [r3, #0]
 806a982:	b2db      	uxtb	r3, r3
 806a984:	f003 0301 	and.w	r3, r3, #1
 806a988:	2b00      	cmp	r3, #0
 806a98a:	d001      	beq.n	806a990 <USER_SPI_ioctl+0x2c>
 806a98c:	2303      	movs	r3, #3
 806a98e:	e151      	b.n	806ac34 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 806a990:	2301      	movs	r3, #1
 806a992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 806a996:	79bb      	ldrb	r3, [r7, #6]
 806a998:	2b04      	cmp	r3, #4
 806a99a:	f200 8136 	bhi.w	806ac0a <USER_SPI_ioctl+0x2a6>
 806a99e:	a201      	add	r2, pc, #4	; (adr r2, 806a9a4 <USER_SPI_ioctl+0x40>)
 806a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806a9a4:	0806a9b9 	.word	0x0806a9b9
 806a9a8:	0806a9cd 	.word	0x0806a9cd
 806a9ac:	0806ac0b 	.word	0x0806ac0b
 806a9b0:	0806aa79 	.word	0x0806aa79
 806a9b4:	0806ab6f 	.word	0x0806ab6f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 806a9b8:	f7ff fd0c 	bl	806a3d4 <spiselect>
 806a9bc:	4603      	mov	r3, r0
 806a9be:	2b00      	cmp	r3, #0
 806a9c0:	f000 8127 	beq.w	806ac12 <USER_SPI_ioctl+0x2ae>
 806a9c4:	2300      	movs	r3, #0
 806a9c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 806a9ca:	e122      	b.n	806ac12 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 806a9cc:	2100      	movs	r1, #0
 806a9ce:	2009      	movs	r0, #9
 806a9d0:	f7ff fd75 	bl	806a4be <send_cmd>
 806a9d4:	4603      	mov	r3, r0
 806a9d6:	2b00      	cmp	r3, #0
 806a9d8:	f040 811d 	bne.w	806ac16 <USER_SPI_ioctl+0x2b2>
 806a9dc:	f107 030c 	add.w	r3, r7, #12
 806a9e0:	2110      	movs	r1, #16
 806a9e2:	4618      	mov	r0, r3
 806a9e4:	f7ff fd10 	bl	806a408 <rcvr_datablock>
 806a9e8:	4603      	mov	r3, r0
 806a9ea:	2b00      	cmp	r3, #0
 806a9ec:	f000 8113 	beq.w	806ac16 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 806a9f0:	7b3b      	ldrb	r3, [r7, #12]
 806a9f2:	099b      	lsrs	r3, r3, #6
 806a9f4:	b2db      	uxtb	r3, r3
 806a9f6:	2b01      	cmp	r3, #1
 806a9f8:	d111      	bne.n	806aa1e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 806a9fa:	7d7b      	ldrb	r3, [r7, #21]
 806a9fc:	461a      	mov	r2, r3
 806a9fe:	7d3b      	ldrb	r3, [r7, #20]
 806aa00:	021b      	lsls	r3, r3, #8
 806aa02:	4413      	add	r3, r2
 806aa04:	461a      	mov	r2, r3
 806aa06:	7cfb      	ldrb	r3, [r7, #19]
 806aa08:	041b      	lsls	r3, r3, #16
 806aa0a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 806aa0e:	4413      	add	r3, r2
 806aa10:	3301      	adds	r3, #1
 806aa12:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 806aa14:	69fb      	ldr	r3, [r7, #28]
 806aa16:	029a      	lsls	r2, r3, #10
 806aa18:	683b      	ldr	r3, [r7, #0]
 806aa1a:	601a      	str	r2, [r3, #0]
 806aa1c:	e028      	b.n	806aa70 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 806aa1e:	7c7b      	ldrb	r3, [r7, #17]
 806aa20:	f003 030f 	and.w	r3, r3, #15
 806aa24:	b2da      	uxtb	r2, r3
 806aa26:	7dbb      	ldrb	r3, [r7, #22]
 806aa28:	09db      	lsrs	r3, r3, #7
 806aa2a:	b2db      	uxtb	r3, r3
 806aa2c:	4413      	add	r3, r2
 806aa2e:	b2da      	uxtb	r2, r3
 806aa30:	7d7b      	ldrb	r3, [r7, #21]
 806aa32:	005b      	lsls	r3, r3, #1
 806aa34:	b2db      	uxtb	r3, r3
 806aa36:	f003 0306 	and.w	r3, r3, #6
 806aa3a:	b2db      	uxtb	r3, r3
 806aa3c:	4413      	add	r3, r2
 806aa3e:	b2db      	uxtb	r3, r3
 806aa40:	3302      	adds	r3, #2
 806aa42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 806aa46:	7d3b      	ldrb	r3, [r7, #20]
 806aa48:	099b      	lsrs	r3, r3, #6
 806aa4a:	b2db      	uxtb	r3, r3
 806aa4c:	461a      	mov	r2, r3
 806aa4e:	7cfb      	ldrb	r3, [r7, #19]
 806aa50:	009b      	lsls	r3, r3, #2
 806aa52:	441a      	add	r2, r3
 806aa54:	7cbb      	ldrb	r3, [r7, #18]
 806aa56:	029b      	lsls	r3, r3, #10
 806aa58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 806aa5c:	4413      	add	r3, r2
 806aa5e:	3301      	adds	r3, #1
 806aa60:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 806aa62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 806aa66:	3b09      	subs	r3, #9
 806aa68:	69fa      	ldr	r2, [r7, #28]
 806aa6a:	409a      	lsls	r2, r3
 806aa6c:	683b      	ldr	r3, [r7, #0]
 806aa6e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 806aa70:	2300      	movs	r3, #0
 806aa72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 806aa76:	e0ce      	b.n	806ac16 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 806aa78:	4b71      	ldr	r3, [pc, #452]	; (806ac40 <USER_SPI_ioctl+0x2dc>)
 806aa7a:	781b      	ldrb	r3, [r3, #0]
 806aa7c:	f003 0304 	and.w	r3, r3, #4
 806aa80:	2b00      	cmp	r3, #0
 806aa82:	d031      	beq.n	806aae8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 806aa84:	2100      	movs	r1, #0
 806aa86:	208d      	movs	r0, #141	; 0x8d
 806aa88:	f7ff fd19 	bl	806a4be <send_cmd>
 806aa8c:	4603      	mov	r3, r0
 806aa8e:	2b00      	cmp	r3, #0
 806aa90:	f040 80c3 	bne.w	806ac1a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 806aa94:	20ff      	movs	r0, #255	; 0xff
 806aa96:	f7ff fc1f 	bl	806a2d8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 806aa9a:	f107 030c 	add.w	r3, r7, #12
 806aa9e:	2110      	movs	r1, #16
 806aaa0:	4618      	mov	r0, r3
 806aaa2:	f7ff fcb1 	bl	806a408 <rcvr_datablock>
 806aaa6:	4603      	mov	r3, r0
 806aaa8:	2b00      	cmp	r3, #0
 806aaaa:	f000 80b6 	beq.w	806ac1a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 806aaae:	2330      	movs	r3, #48	; 0x30
 806aab0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 806aab4:	e007      	b.n	806aac6 <USER_SPI_ioctl+0x162>
 806aab6:	20ff      	movs	r0, #255	; 0xff
 806aab8:	f7ff fc0e 	bl	806a2d8 <xchg_spi>
 806aabc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 806aac0:	3b01      	subs	r3, #1
 806aac2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 806aac6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 806aaca:	2b00      	cmp	r3, #0
 806aacc:	d1f3      	bne.n	806aab6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 806aace:	7dbb      	ldrb	r3, [r7, #22]
 806aad0:	091b      	lsrs	r3, r3, #4
 806aad2:	b2db      	uxtb	r3, r3
 806aad4:	461a      	mov	r2, r3
 806aad6:	2310      	movs	r3, #16
 806aad8:	fa03 f202 	lsl.w	r2, r3, r2
 806aadc:	683b      	ldr	r3, [r7, #0]
 806aade:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 806aae0:	2300      	movs	r3, #0
 806aae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 806aae6:	e098      	b.n	806ac1a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 806aae8:	2100      	movs	r1, #0
 806aaea:	2009      	movs	r0, #9
 806aaec:	f7ff fce7 	bl	806a4be <send_cmd>
 806aaf0:	4603      	mov	r3, r0
 806aaf2:	2b00      	cmp	r3, #0
 806aaf4:	f040 8091 	bne.w	806ac1a <USER_SPI_ioctl+0x2b6>
 806aaf8:	f107 030c 	add.w	r3, r7, #12
 806aafc:	2110      	movs	r1, #16
 806aafe:	4618      	mov	r0, r3
 806ab00:	f7ff fc82 	bl	806a408 <rcvr_datablock>
 806ab04:	4603      	mov	r3, r0
 806ab06:	2b00      	cmp	r3, #0
 806ab08:	f000 8087 	beq.w	806ac1a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 806ab0c:	4b4c      	ldr	r3, [pc, #304]	; (806ac40 <USER_SPI_ioctl+0x2dc>)
 806ab0e:	781b      	ldrb	r3, [r3, #0]
 806ab10:	f003 0302 	and.w	r3, r3, #2
 806ab14:	2b00      	cmp	r3, #0
 806ab16:	d012      	beq.n	806ab3e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 806ab18:	7dbb      	ldrb	r3, [r7, #22]
 806ab1a:	005b      	lsls	r3, r3, #1
 806ab1c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 806ab20:	7dfa      	ldrb	r2, [r7, #23]
 806ab22:	09d2      	lsrs	r2, r2, #7
 806ab24:	b2d2      	uxtb	r2, r2
 806ab26:	4413      	add	r3, r2
 806ab28:	1c5a      	adds	r2, r3, #1
 806ab2a:	7e7b      	ldrb	r3, [r7, #25]
 806ab2c:	099b      	lsrs	r3, r3, #6
 806ab2e:	b2db      	uxtb	r3, r3
 806ab30:	3b01      	subs	r3, #1
 806ab32:	fa02 f303 	lsl.w	r3, r2, r3
 806ab36:	461a      	mov	r2, r3
 806ab38:	683b      	ldr	r3, [r7, #0]
 806ab3a:	601a      	str	r2, [r3, #0]
 806ab3c:	e013      	b.n	806ab66 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 806ab3e:	7dbb      	ldrb	r3, [r7, #22]
 806ab40:	109b      	asrs	r3, r3, #2
 806ab42:	b29b      	uxth	r3, r3
 806ab44:	f003 031f 	and.w	r3, r3, #31
 806ab48:	3301      	adds	r3, #1
 806ab4a:	7dfa      	ldrb	r2, [r7, #23]
 806ab4c:	00d2      	lsls	r2, r2, #3
 806ab4e:	f002 0218 	and.w	r2, r2, #24
 806ab52:	7df9      	ldrb	r1, [r7, #23]
 806ab54:	0949      	lsrs	r1, r1, #5
 806ab56:	b2c9      	uxtb	r1, r1
 806ab58:	440a      	add	r2, r1
 806ab5a:	3201      	adds	r2, #1
 806ab5c:	fb02 f303 	mul.w	r3, r2, r3
 806ab60:	461a      	mov	r2, r3
 806ab62:	683b      	ldr	r3, [r7, #0]
 806ab64:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 806ab66:	2300      	movs	r3, #0
 806ab68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 806ab6c:	e055      	b.n	806ac1a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 806ab6e:	4b34      	ldr	r3, [pc, #208]	; (806ac40 <USER_SPI_ioctl+0x2dc>)
 806ab70:	781b      	ldrb	r3, [r3, #0]
 806ab72:	f003 0306 	and.w	r3, r3, #6
 806ab76:	2b00      	cmp	r3, #0
 806ab78:	d051      	beq.n	806ac1e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 806ab7a:	f107 020c 	add.w	r2, r7, #12
 806ab7e:	79fb      	ldrb	r3, [r7, #7]
 806ab80:	210b      	movs	r1, #11
 806ab82:	4618      	mov	r0, r3
 806ab84:	f7ff feee 	bl	806a964 <USER_SPI_ioctl>
 806ab88:	4603      	mov	r3, r0
 806ab8a:	2b00      	cmp	r3, #0
 806ab8c:	d149      	bne.n	806ac22 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 806ab8e:	7b3b      	ldrb	r3, [r7, #12]
 806ab90:	099b      	lsrs	r3, r3, #6
 806ab92:	b2db      	uxtb	r3, r3
 806ab94:	2b00      	cmp	r3, #0
 806ab96:	d104      	bne.n	806aba2 <USER_SPI_ioctl+0x23e>
 806ab98:	7dbb      	ldrb	r3, [r7, #22]
 806ab9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806ab9e:	2b00      	cmp	r3, #0
 806aba0:	d041      	beq.n	806ac26 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 806aba2:	683b      	ldr	r3, [r7, #0]
 806aba4:	623b      	str	r3, [r7, #32]
 806aba6:	6a3b      	ldr	r3, [r7, #32]
 806aba8:	681b      	ldr	r3, [r3, #0]
 806abaa:	62bb      	str	r3, [r7, #40]	; 0x28
 806abac:	6a3b      	ldr	r3, [r7, #32]
 806abae:	685b      	ldr	r3, [r3, #4]
 806abb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 806abb2:	4b23      	ldr	r3, [pc, #140]	; (806ac40 <USER_SPI_ioctl+0x2dc>)
 806abb4:	781b      	ldrb	r3, [r3, #0]
 806abb6:	f003 0308 	and.w	r3, r3, #8
 806abba:	2b00      	cmp	r3, #0
 806abbc:	d105      	bne.n	806abca <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 806abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806abc0:	025b      	lsls	r3, r3, #9
 806abc2:	62bb      	str	r3, [r7, #40]	; 0x28
 806abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806abc6:	025b      	lsls	r3, r3, #9
 806abc8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 806abca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 806abcc:	2020      	movs	r0, #32
 806abce:	f7ff fc76 	bl	806a4be <send_cmd>
 806abd2:	4603      	mov	r3, r0
 806abd4:	2b00      	cmp	r3, #0
 806abd6:	d128      	bne.n	806ac2a <USER_SPI_ioctl+0x2c6>
 806abd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806abda:	2021      	movs	r0, #33	; 0x21
 806abdc:	f7ff fc6f 	bl	806a4be <send_cmd>
 806abe0:	4603      	mov	r3, r0
 806abe2:	2b00      	cmp	r3, #0
 806abe4:	d121      	bne.n	806ac2a <USER_SPI_ioctl+0x2c6>
 806abe6:	2100      	movs	r1, #0
 806abe8:	2026      	movs	r0, #38	; 0x26
 806abea:	f7ff fc68 	bl	806a4be <send_cmd>
 806abee:	4603      	mov	r3, r0
 806abf0:	2b00      	cmp	r3, #0
 806abf2:	d11a      	bne.n	806ac2a <USER_SPI_ioctl+0x2c6>
 806abf4:	f247 5030 	movw	r0, #30000	; 0x7530
 806abf8:	f7ff fbbb 	bl	806a372 <wait_ready>
 806abfc:	4603      	mov	r3, r0
 806abfe:	2b00      	cmp	r3, #0
 806ac00:	d013      	beq.n	806ac2a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 806ac02:	2300      	movs	r3, #0
 806ac04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 806ac08:	e00f      	b.n	806ac2a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 806ac0a:	2304      	movs	r3, #4
 806ac0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 806ac10:	e00c      	b.n	806ac2c <USER_SPI_ioctl+0x2c8>
		break;
 806ac12:	bf00      	nop
 806ac14:	e00a      	b.n	806ac2c <USER_SPI_ioctl+0x2c8>
		break;
 806ac16:	bf00      	nop
 806ac18:	e008      	b.n	806ac2c <USER_SPI_ioctl+0x2c8>
		break;
 806ac1a:	bf00      	nop
 806ac1c:	e006      	b.n	806ac2c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 806ac1e:	bf00      	nop
 806ac20:	e004      	b.n	806ac2c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 806ac22:	bf00      	nop
 806ac24:	e002      	b.n	806ac2c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 806ac26:	bf00      	nop
 806ac28:	e000      	b.n	806ac2c <USER_SPI_ioctl+0x2c8>
		break;
 806ac2a:	bf00      	nop
	}

	despiselect();
 806ac2c:	f7ff fbc4 	bl	806a3b8 <despiselect>

	return res;
 806ac30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 806ac34:	4618      	mov	r0, r3
 806ac36:	3730      	adds	r7, #48	; 0x30
 806ac38:	46bd      	mov	sp, r7
 806ac3a:	bd80      	pop	{r7, pc}
 806ac3c:	20000020 	.word	0x20000020
 806ac40:	20000420 	.word	0x20000420

0806ac44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 806ac44:	b580      	push	{r7, lr}
 806ac46:	b084      	sub	sp, #16
 806ac48:	af00      	add	r7, sp, #0
 806ac4a:	4603      	mov	r3, r0
 806ac4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 806ac4e:	79fb      	ldrb	r3, [r7, #7]
 806ac50:	4a08      	ldr	r2, [pc, #32]	; (806ac74 <disk_status+0x30>)
 806ac52:	009b      	lsls	r3, r3, #2
 806ac54:	4413      	add	r3, r2
 806ac56:	685b      	ldr	r3, [r3, #4]
 806ac58:	685b      	ldr	r3, [r3, #4]
 806ac5a:	79fa      	ldrb	r2, [r7, #7]
 806ac5c:	4905      	ldr	r1, [pc, #20]	; (806ac74 <disk_status+0x30>)
 806ac5e:	440a      	add	r2, r1
 806ac60:	7a12      	ldrb	r2, [r2, #8]
 806ac62:	4610      	mov	r0, r2
 806ac64:	4798      	blx	r3
 806ac66:	4603      	mov	r3, r0
 806ac68:	73fb      	strb	r3, [r7, #15]
  return stat;
 806ac6a:	7bfb      	ldrb	r3, [r7, #15]
}
 806ac6c:	4618      	mov	r0, r3
 806ac6e:	3710      	adds	r7, #16
 806ac70:	46bd      	mov	sp, r7
 806ac72:	bd80      	pop	{r7, pc}
 806ac74:	2000044c 	.word	0x2000044c

0806ac78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 806ac78:	b580      	push	{r7, lr}
 806ac7a:	b084      	sub	sp, #16
 806ac7c:	af00      	add	r7, sp, #0
 806ac7e:	4603      	mov	r3, r0
 806ac80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 806ac82:	2300      	movs	r3, #0
 806ac84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 806ac86:	79fb      	ldrb	r3, [r7, #7]
 806ac88:	4a0d      	ldr	r2, [pc, #52]	; (806acc0 <disk_initialize+0x48>)
 806ac8a:	5cd3      	ldrb	r3, [r2, r3]
 806ac8c:	2b00      	cmp	r3, #0
 806ac8e:	d111      	bne.n	806acb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 806ac90:	79fb      	ldrb	r3, [r7, #7]
 806ac92:	4a0b      	ldr	r2, [pc, #44]	; (806acc0 <disk_initialize+0x48>)
 806ac94:	2101      	movs	r1, #1
 806ac96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 806ac98:	79fb      	ldrb	r3, [r7, #7]
 806ac9a:	4a09      	ldr	r2, [pc, #36]	; (806acc0 <disk_initialize+0x48>)
 806ac9c:	009b      	lsls	r3, r3, #2
 806ac9e:	4413      	add	r3, r2
 806aca0:	685b      	ldr	r3, [r3, #4]
 806aca2:	681b      	ldr	r3, [r3, #0]
 806aca4:	79fa      	ldrb	r2, [r7, #7]
 806aca6:	4906      	ldr	r1, [pc, #24]	; (806acc0 <disk_initialize+0x48>)
 806aca8:	440a      	add	r2, r1
 806acaa:	7a12      	ldrb	r2, [r2, #8]
 806acac:	4610      	mov	r0, r2
 806acae:	4798      	blx	r3
 806acb0:	4603      	mov	r3, r0
 806acb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 806acb4:	7bfb      	ldrb	r3, [r7, #15]
}
 806acb6:	4618      	mov	r0, r3
 806acb8:	3710      	adds	r7, #16
 806acba:	46bd      	mov	sp, r7
 806acbc:	bd80      	pop	{r7, pc}
 806acbe:	bf00      	nop
 806acc0:	2000044c 	.word	0x2000044c

0806acc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 806acc4:	b590      	push	{r4, r7, lr}
 806acc6:	b087      	sub	sp, #28
 806acc8:	af00      	add	r7, sp, #0
 806acca:	60b9      	str	r1, [r7, #8]
 806accc:	607a      	str	r2, [r7, #4]
 806acce:	603b      	str	r3, [r7, #0]
 806acd0:	4603      	mov	r3, r0
 806acd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 806acd4:	7bfb      	ldrb	r3, [r7, #15]
 806acd6:	4a0a      	ldr	r2, [pc, #40]	; (806ad00 <disk_read+0x3c>)
 806acd8:	009b      	lsls	r3, r3, #2
 806acda:	4413      	add	r3, r2
 806acdc:	685b      	ldr	r3, [r3, #4]
 806acde:	689c      	ldr	r4, [r3, #8]
 806ace0:	7bfb      	ldrb	r3, [r7, #15]
 806ace2:	4a07      	ldr	r2, [pc, #28]	; (806ad00 <disk_read+0x3c>)
 806ace4:	4413      	add	r3, r2
 806ace6:	7a18      	ldrb	r0, [r3, #8]
 806ace8:	683b      	ldr	r3, [r7, #0]
 806acea:	687a      	ldr	r2, [r7, #4]
 806acec:	68b9      	ldr	r1, [r7, #8]
 806acee:	47a0      	blx	r4
 806acf0:	4603      	mov	r3, r0
 806acf2:	75fb      	strb	r3, [r7, #23]
  return res;
 806acf4:	7dfb      	ldrb	r3, [r7, #23]
}
 806acf6:	4618      	mov	r0, r3
 806acf8:	371c      	adds	r7, #28
 806acfa:	46bd      	mov	sp, r7
 806acfc:	bd90      	pop	{r4, r7, pc}
 806acfe:	bf00      	nop
 806ad00:	2000044c 	.word	0x2000044c

0806ad04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 806ad04:	b590      	push	{r4, r7, lr}
 806ad06:	b087      	sub	sp, #28
 806ad08:	af00      	add	r7, sp, #0
 806ad0a:	60b9      	str	r1, [r7, #8]
 806ad0c:	607a      	str	r2, [r7, #4]
 806ad0e:	603b      	str	r3, [r7, #0]
 806ad10:	4603      	mov	r3, r0
 806ad12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 806ad14:	7bfb      	ldrb	r3, [r7, #15]
 806ad16:	4a0a      	ldr	r2, [pc, #40]	; (806ad40 <disk_write+0x3c>)
 806ad18:	009b      	lsls	r3, r3, #2
 806ad1a:	4413      	add	r3, r2
 806ad1c:	685b      	ldr	r3, [r3, #4]
 806ad1e:	68dc      	ldr	r4, [r3, #12]
 806ad20:	7bfb      	ldrb	r3, [r7, #15]
 806ad22:	4a07      	ldr	r2, [pc, #28]	; (806ad40 <disk_write+0x3c>)
 806ad24:	4413      	add	r3, r2
 806ad26:	7a18      	ldrb	r0, [r3, #8]
 806ad28:	683b      	ldr	r3, [r7, #0]
 806ad2a:	687a      	ldr	r2, [r7, #4]
 806ad2c:	68b9      	ldr	r1, [r7, #8]
 806ad2e:	47a0      	blx	r4
 806ad30:	4603      	mov	r3, r0
 806ad32:	75fb      	strb	r3, [r7, #23]
  return res;
 806ad34:	7dfb      	ldrb	r3, [r7, #23]
}
 806ad36:	4618      	mov	r0, r3
 806ad38:	371c      	adds	r7, #28
 806ad3a:	46bd      	mov	sp, r7
 806ad3c:	bd90      	pop	{r4, r7, pc}
 806ad3e:	bf00      	nop
 806ad40:	2000044c 	.word	0x2000044c

0806ad44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 806ad44:	b580      	push	{r7, lr}
 806ad46:	b084      	sub	sp, #16
 806ad48:	af00      	add	r7, sp, #0
 806ad4a:	4603      	mov	r3, r0
 806ad4c:	603a      	str	r2, [r7, #0]
 806ad4e:	71fb      	strb	r3, [r7, #7]
 806ad50:	460b      	mov	r3, r1
 806ad52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 806ad54:	79fb      	ldrb	r3, [r7, #7]
 806ad56:	4a09      	ldr	r2, [pc, #36]	; (806ad7c <disk_ioctl+0x38>)
 806ad58:	009b      	lsls	r3, r3, #2
 806ad5a:	4413      	add	r3, r2
 806ad5c:	685b      	ldr	r3, [r3, #4]
 806ad5e:	691b      	ldr	r3, [r3, #16]
 806ad60:	79fa      	ldrb	r2, [r7, #7]
 806ad62:	4906      	ldr	r1, [pc, #24]	; (806ad7c <disk_ioctl+0x38>)
 806ad64:	440a      	add	r2, r1
 806ad66:	7a10      	ldrb	r0, [r2, #8]
 806ad68:	79b9      	ldrb	r1, [r7, #6]
 806ad6a:	683a      	ldr	r2, [r7, #0]
 806ad6c:	4798      	blx	r3
 806ad6e:	4603      	mov	r3, r0
 806ad70:	73fb      	strb	r3, [r7, #15]
  return res;
 806ad72:	7bfb      	ldrb	r3, [r7, #15]
}
 806ad74:	4618      	mov	r0, r3
 806ad76:	3710      	adds	r7, #16
 806ad78:	46bd      	mov	sp, r7
 806ad7a:	bd80      	pop	{r7, pc}
 806ad7c:	2000044c 	.word	0x2000044c

0806ad80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 806ad80:	b480      	push	{r7}
 806ad82:	b085      	sub	sp, #20
 806ad84:	af00      	add	r7, sp, #0
 806ad86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 806ad88:	687b      	ldr	r3, [r7, #4]
 806ad8a:	3301      	adds	r3, #1
 806ad8c:	781b      	ldrb	r3, [r3, #0]
 806ad8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 806ad90:	89fb      	ldrh	r3, [r7, #14]
 806ad92:	021b      	lsls	r3, r3, #8
 806ad94:	b21a      	sxth	r2, r3
 806ad96:	687b      	ldr	r3, [r7, #4]
 806ad98:	781b      	ldrb	r3, [r3, #0]
 806ad9a:	b21b      	sxth	r3, r3
 806ad9c:	4313      	orrs	r3, r2
 806ad9e:	b21b      	sxth	r3, r3
 806ada0:	81fb      	strh	r3, [r7, #14]
	return rv;
 806ada2:	89fb      	ldrh	r3, [r7, #14]
}
 806ada4:	4618      	mov	r0, r3
 806ada6:	3714      	adds	r7, #20
 806ada8:	46bd      	mov	sp, r7
 806adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 806adae:	4770      	bx	lr

0806adb0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 806adb0:	b480      	push	{r7}
 806adb2:	b085      	sub	sp, #20
 806adb4:	af00      	add	r7, sp, #0
 806adb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 806adb8:	687b      	ldr	r3, [r7, #4]
 806adba:	3303      	adds	r3, #3
 806adbc:	781b      	ldrb	r3, [r3, #0]
 806adbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 806adc0:	68fb      	ldr	r3, [r7, #12]
 806adc2:	021b      	lsls	r3, r3, #8
 806adc4:	687a      	ldr	r2, [r7, #4]
 806adc6:	3202      	adds	r2, #2
 806adc8:	7812      	ldrb	r2, [r2, #0]
 806adca:	4313      	orrs	r3, r2
 806adcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 806adce:	68fb      	ldr	r3, [r7, #12]
 806add0:	021b      	lsls	r3, r3, #8
 806add2:	687a      	ldr	r2, [r7, #4]
 806add4:	3201      	adds	r2, #1
 806add6:	7812      	ldrb	r2, [r2, #0]
 806add8:	4313      	orrs	r3, r2
 806adda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 806addc:	68fb      	ldr	r3, [r7, #12]
 806adde:	021b      	lsls	r3, r3, #8
 806ade0:	687a      	ldr	r2, [r7, #4]
 806ade2:	7812      	ldrb	r2, [r2, #0]
 806ade4:	4313      	orrs	r3, r2
 806ade6:	60fb      	str	r3, [r7, #12]
	return rv;
 806ade8:	68fb      	ldr	r3, [r7, #12]
}
 806adea:	4618      	mov	r0, r3
 806adec:	3714      	adds	r7, #20
 806adee:	46bd      	mov	sp, r7
 806adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 806adf4:	4770      	bx	lr

0806adf6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 806adf6:	b480      	push	{r7}
 806adf8:	b083      	sub	sp, #12
 806adfa:	af00      	add	r7, sp, #0
 806adfc:	6078      	str	r0, [r7, #4]
 806adfe:	460b      	mov	r3, r1
 806ae00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 806ae02:	687b      	ldr	r3, [r7, #4]
 806ae04:	1c5a      	adds	r2, r3, #1
 806ae06:	607a      	str	r2, [r7, #4]
 806ae08:	887a      	ldrh	r2, [r7, #2]
 806ae0a:	b2d2      	uxtb	r2, r2
 806ae0c:	701a      	strb	r2, [r3, #0]
 806ae0e:	887b      	ldrh	r3, [r7, #2]
 806ae10:	0a1b      	lsrs	r3, r3, #8
 806ae12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 806ae14:	687b      	ldr	r3, [r7, #4]
 806ae16:	1c5a      	adds	r2, r3, #1
 806ae18:	607a      	str	r2, [r7, #4]
 806ae1a:	887a      	ldrh	r2, [r7, #2]
 806ae1c:	b2d2      	uxtb	r2, r2
 806ae1e:	701a      	strb	r2, [r3, #0]
}
 806ae20:	bf00      	nop
 806ae22:	370c      	adds	r7, #12
 806ae24:	46bd      	mov	sp, r7
 806ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ae2a:	4770      	bx	lr

0806ae2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 806ae2c:	b480      	push	{r7}
 806ae2e:	b083      	sub	sp, #12
 806ae30:	af00      	add	r7, sp, #0
 806ae32:	6078      	str	r0, [r7, #4]
 806ae34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 806ae36:	687b      	ldr	r3, [r7, #4]
 806ae38:	1c5a      	adds	r2, r3, #1
 806ae3a:	607a      	str	r2, [r7, #4]
 806ae3c:	683a      	ldr	r2, [r7, #0]
 806ae3e:	b2d2      	uxtb	r2, r2
 806ae40:	701a      	strb	r2, [r3, #0]
 806ae42:	683b      	ldr	r3, [r7, #0]
 806ae44:	0a1b      	lsrs	r3, r3, #8
 806ae46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 806ae48:	687b      	ldr	r3, [r7, #4]
 806ae4a:	1c5a      	adds	r2, r3, #1
 806ae4c:	607a      	str	r2, [r7, #4]
 806ae4e:	683a      	ldr	r2, [r7, #0]
 806ae50:	b2d2      	uxtb	r2, r2
 806ae52:	701a      	strb	r2, [r3, #0]
 806ae54:	683b      	ldr	r3, [r7, #0]
 806ae56:	0a1b      	lsrs	r3, r3, #8
 806ae58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 806ae5a:	687b      	ldr	r3, [r7, #4]
 806ae5c:	1c5a      	adds	r2, r3, #1
 806ae5e:	607a      	str	r2, [r7, #4]
 806ae60:	683a      	ldr	r2, [r7, #0]
 806ae62:	b2d2      	uxtb	r2, r2
 806ae64:	701a      	strb	r2, [r3, #0]
 806ae66:	683b      	ldr	r3, [r7, #0]
 806ae68:	0a1b      	lsrs	r3, r3, #8
 806ae6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 806ae6c:	687b      	ldr	r3, [r7, #4]
 806ae6e:	1c5a      	adds	r2, r3, #1
 806ae70:	607a      	str	r2, [r7, #4]
 806ae72:	683a      	ldr	r2, [r7, #0]
 806ae74:	b2d2      	uxtb	r2, r2
 806ae76:	701a      	strb	r2, [r3, #0]
}
 806ae78:	bf00      	nop
 806ae7a:	370c      	adds	r7, #12
 806ae7c:	46bd      	mov	sp, r7
 806ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ae82:	4770      	bx	lr

0806ae84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 806ae84:	b480      	push	{r7}
 806ae86:	b087      	sub	sp, #28
 806ae88:	af00      	add	r7, sp, #0
 806ae8a:	60f8      	str	r0, [r7, #12]
 806ae8c:	60b9      	str	r1, [r7, #8]
 806ae8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 806ae90:	68fb      	ldr	r3, [r7, #12]
 806ae92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 806ae94:	68bb      	ldr	r3, [r7, #8]
 806ae96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 806ae98:	687b      	ldr	r3, [r7, #4]
 806ae9a:	2b00      	cmp	r3, #0
 806ae9c:	d00d      	beq.n	806aeba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 806ae9e:	693a      	ldr	r2, [r7, #16]
 806aea0:	1c53      	adds	r3, r2, #1
 806aea2:	613b      	str	r3, [r7, #16]
 806aea4:	697b      	ldr	r3, [r7, #20]
 806aea6:	1c59      	adds	r1, r3, #1
 806aea8:	6179      	str	r1, [r7, #20]
 806aeaa:	7812      	ldrb	r2, [r2, #0]
 806aeac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 806aeae:	687b      	ldr	r3, [r7, #4]
 806aeb0:	3b01      	subs	r3, #1
 806aeb2:	607b      	str	r3, [r7, #4]
 806aeb4:	687b      	ldr	r3, [r7, #4]
 806aeb6:	2b00      	cmp	r3, #0
 806aeb8:	d1f1      	bne.n	806ae9e <mem_cpy+0x1a>
	}
}
 806aeba:	bf00      	nop
 806aebc:	371c      	adds	r7, #28
 806aebe:	46bd      	mov	sp, r7
 806aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 806aec4:	4770      	bx	lr

0806aec6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 806aec6:	b480      	push	{r7}
 806aec8:	b087      	sub	sp, #28
 806aeca:	af00      	add	r7, sp, #0
 806aecc:	60f8      	str	r0, [r7, #12]
 806aece:	60b9      	str	r1, [r7, #8]
 806aed0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 806aed2:	68fb      	ldr	r3, [r7, #12]
 806aed4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 806aed6:	697b      	ldr	r3, [r7, #20]
 806aed8:	1c5a      	adds	r2, r3, #1
 806aeda:	617a      	str	r2, [r7, #20]
 806aedc:	68ba      	ldr	r2, [r7, #8]
 806aede:	b2d2      	uxtb	r2, r2
 806aee0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 806aee2:	687b      	ldr	r3, [r7, #4]
 806aee4:	3b01      	subs	r3, #1
 806aee6:	607b      	str	r3, [r7, #4]
 806aee8:	687b      	ldr	r3, [r7, #4]
 806aeea:	2b00      	cmp	r3, #0
 806aeec:	d1f3      	bne.n	806aed6 <mem_set+0x10>
}
 806aeee:	bf00      	nop
 806aef0:	bf00      	nop
 806aef2:	371c      	adds	r7, #28
 806aef4:	46bd      	mov	sp, r7
 806aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 806aefa:	4770      	bx	lr

0806aefc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 806aefc:	b480      	push	{r7}
 806aefe:	b089      	sub	sp, #36	; 0x24
 806af00:	af00      	add	r7, sp, #0
 806af02:	60f8      	str	r0, [r7, #12]
 806af04:	60b9      	str	r1, [r7, #8]
 806af06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 806af08:	68fb      	ldr	r3, [r7, #12]
 806af0a:	61fb      	str	r3, [r7, #28]
 806af0c:	68bb      	ldr	r3, [r7, #8]
 806af0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 806af10:	2300      	movs	r3, #0
 806af12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 806af14:	69fb      	ldr	r3, [r7, #28]
 806af16:	1c5a      	adds	r2, r3, #1
 806af18:	61fa      	str	r2, [r7, #28]
 806af1a:	781b      	ldrb	r3, [r3, #0]
 806af1c:	4619      	mov	r1, r3
 806af1e:	69bb      	ldr	r3, [r7, #24]
 806af20:	1c5a      	adds	r2, r3, #1
 806af22:	61ba      	str	r2, [r7, #24]
 806af24:	781b      	ldrb	r3, [r3, #0]
 806af26:	1acb      	subs	r3, r1, r3
 806af28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 806af2a:	687b      	ldr	r3, [r7, #4]
 806af2c:	3b01      	subs	r3, #1
 806af2e:	607b      	str	r3, [r7, #4]
 806af30:	687b      	ldr	r3, [r7, #4]
 806af32:	2b00      	cmp	r3, #0
 806af34:	d002      	beq.n	806af3c <mem_cmp+0x40>
 806af36:	697b      	ldr	r3, [r7, #20]
 806af38:	2b00      	cmp	r3, #0
 806af3a:	d0eb      	beq.n	806af14 <mem_cmp+0x18>

	return r;
 806af3c:	697b      	ldr	r3, [r7, #20]
}
 806af3e:	4618      	mov	r0, r3
 806af40:	3724      	adds	r7, #36	; 0x24
 806af42:	46bd      	mov	sp, r7
 806af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 806af48:	4770      	bx	lr

0806af4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 806af4a:	b480      	push	{r7}
 806af4c:	b083      	sub	sp, #12
 806af4e:	af00      	add	r7, sp, #0
 806af50:	6078      	str	r0, [r7, #4]
 806af52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 806af54:	e002      	b.n	806af5c <chk_chr+0x12>
 806af56:	687b      	ldr	r3, [r7, #4]
 806af58:	3301      	adds	r3, #1
 806af5a:	607b      	str	r3, [r7, #4]
 806af5c:	687b      	ldr	r3, [r7, #4]
 806af5e:	781b      	ldrb	r3, [r3, #0]
 806af60:	2b00      	cmp	r3, #0
 806af62:	d005      	beq.n	806af70 <chk_chr+0x26>
 806af64:	687b      	ldr	r3, [r7, #4]
 806af66:	781b      	ldrb	r3, [r3, #0]
 806af68:	461a      	mov	r2, r3
 806af6a:	683b      	ldr	r3, [r7, #0]
 806af6c:	4293      	cmp	r3, r2
 806af6e:	d1f2      	bne.n	806af56 <chk_chr+0xc>
	return *str;
 806af70:	687b      	ldr	r3, [r7, #4]
 806af72:	781b      	ldrb	r3, [r3, #0]
}
 806af74:	4618      	mov	r0, r3
 806af76:	370c      	adds	r7, #12
 806af78:	46bd      	mov	sp, r7
 806af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806af7e:	4770      	bx	lr

0806af80 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 806af80:	b580      	push	{r7, lr}
 806af82:	b082      	sub	sp, #8
 806af84:	af00      	add	r7, sp, #0
 806af86:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 806af88:	687b      	ldr	r3, [r7, #4]
 806af8a:	2b00      	cmp	r3, #0
 806af8c:	d009      	beq.n	806afa2 <lock_fs+0x22>
 806af8e:	687b      	ldr	r3, [r7, #4]
 806af90:	68db      	ldr	r3, [r3, #12]
 806af92:	4618      	mov	r0, r3
 806af94:	f002 fb82 	bl	806d69c <ff_req_grant>
 806af98:	4603      	mov	r3, r0
 806af9a:	2b00      	cmp	r3, #0
 806af9c:	d001      	beq.n	806afa2 <lock_fs+0x22>
 806af9e:	2301      	movs	r3, #1
 806afa0:	e000      	b.n	806afa4 <lock_fs+0x24>
 806afa2:	2300      	movs	r3, #0
}
 806afa4:	4618      	mov	r0, r3
 806afa6:	3708      	adds	r7, #8
 806afa8:	46bd      	mov	sp, r7
 806afaa:	bd80      	pop	{r7, pc}

0806afac <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 806afac:	b580      	push	{r7, lr}
 806afae:	b082      	sub	sp, #8
 806afb0:	af00      	add	r7, sp, #0
 806afb2:	6078      	str	r0, [r7, #4]
 806afb4:	460b      	mov	r3, r1
 806afb6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 806afb8:	687b      	ldr	r3, [r7, #4]
 806afba:	2b00      	cmp	r3, #0
 806afbc:	d00d      	beq.n	806afda <unlock_fs+0x2e>
 806afbe:	78fb      	ldrb	r3, [r7, #3]
 806afc0:	2b0c      	cmp	r3, #12
 806afc2:	d00a      	beq.n	806afda <unlock_fs+0x2e>
 806afc4:	78fb      	ldrb	r3, [r7, #3]
 806afc6:	2b0b      	cmp	r3, #11
 806afc8:	d007      	beq.n	806afda <unlock_fs+0x2e>
 806afca:	78fb      	ldrb	r3, [r7, #3]
 806afcc:	2b0f      	cmp	r3, #15
 806afce:	d004      	beq.n	806afda <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 806afd0:	687b      	ldr	r3, [r7, #4]
 806afd2:	68db      	ldr	r3, [r3, #12]
 806afd4:	4618      	mov	r0, r3
 806afd6:	f002 fb76 	bl	806d6c6 <ff_rel_grant>
	}
}
 806afda:	bf00      	nop
 806afdc:	3708      	adds	r7, #8
 806afde:	46bd      	mov	sp, r7
 806afe0:	bd80      	pop	{r7, pc}
	...

0806afe4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 806afe4:	b480      	push	{r7}
 806afe6:	b085      	sub	sp, #20
 806afe8:	af00      	add	r7, sp, #0
 806afea:	6078      	str	r0, [r7, #4]
 806afec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 806afee:	2300      	movs	r3, #0
 806aff0:	60bb      	str	r3, [r7, #8]
 806aff2:	68bb      	ldr	r3, [r7, #8]
 806aff4:	60fb      	str	r3, [r7, #12]
 806aff6:	e029      	b.n	806b04c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 806aff8:	4a27      	ldr	r2, [pc, #156]	; (806b098 <chk_lock+0xb4>)
 806affa:	68fb      	ldr	r3, [r7, #12]
 806affc:	011b      	lsls	r3, r3, #4
 806affe:	4413      	add	r3, r2
 806b000:	681b      	ldr	r3, [r3, #0]
 806b002:	2b00      	cmp	r3, #0
 806b004:	d01d      	beq.n	806b042 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 806b006:	4a24      	ldr	r2, [pc, #144]	; (806b098 <chk_lock+0xb4>)
 806b008:	68fb      	ldr	r3, [r7, #12]
 806b00a:	011b      	lsls	r3, r3, #4
 806b00c:	4413      	add	r3, r2
 806b00e:	681a      	ldr	r2, [r3, #0]
 806b010:	687b      	ldr	r3, [r7, #4]
 806b012:	681b      	ldr	r3, [r3, #0]
 806b014:	429a      	cmp	r2, r3
 806b016:	d116      	bne.n	806b046 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 806b018:	4a1f      	ldr	r2, [pc, #124]	; (806b098 <chk_lock+0xb4>)
 806b01a:	68fb      	ldr	r3, [r7, #12]
 806b01c:	011b      	lsls	r3, r3, #4
 806b01e:	4413      	add	r3, r2
 806b020:	3304      	adds	r3, #4
 806b022:	681a      	ldr	r2, [r3, #0]
 806b024:	687b      	ldr	r3, [r7, #4]
 806b026:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 806b028:	429a      	cmp	r2, r3
 806b02a:	d10c      	bne.n	806b046 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 806b02c:	4a1a      	ldr	r2, [pc, #104]	; (806b098 <chk_lock+0xb4>)
 806b02e:	68fb      	ldr	r3, [r7, #12]
 806b030:	011b      	lsls	r3, r3, #4
 806b032:	4413      	add	r3, r2
 806b034:	3308      	adds	r3, #8
 806b036:	681a      	ldr	r2, [r3, #0]
 806b038:	687b      	ldr	r3, [r7, #4]
 806b03a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 806b03c:	429a      	cmp	r2, r3
 806b03e:	d102      	bne.n	806b046 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 806b040:	e007      	b.n	806b052 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 806b042:	2301      	movs	r3, #1
 806b044:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 806b046:	68fb      	ldr	r3, [r7, #12]
 806b048:	3301      	adds	r3, #1
 806b04a:	60fb      	str	r3, [r7, #12]
 806b04c:	68fb      	ldr	r3, [r7, #12]
 806b04e:	2b01      	cmp	r3, #1
 806b050:	d9d2      	bls.n	806aff8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 806b052:	68fb      	ldr	r3, [r7, #12]
 806b054:	2b02      	cmp	r3, #2
 806b056:	d109      	bne.n	806b06c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 806b058:	68bb      	ldr	r3, [r7, #8]
 806b05a:	2b00      	cmp	r3, #0
 806b05c:	d102      	bne.n	806b064 <chk_lock+0x80>
 806b05e:	683b      	ldr	r3, [r7, #0]
 806b060:	2b02      	cmp	r3, #2
 806b062:	d101      	bne.n	806b068 <chk_lock+0x84>
 806b064:	2300      	movs	r3, #0
 806b066:	e010      	b.n	806b08a <chk_lock+0xa6>
 806b068:	2312      	movs	r3, #18
 806b06a:	e00e      	b.n	806b08a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 806b06c:	683b      	ldr	r3, [r7, #0]
 806b06e:	2b00      	cmp	r3, #0
 806b070:	d108      	bne.n	806b084 <chk_lock+0xa0>
 806b072:	4a09      	ldr	r2, [pc, #36]	; (806b098 <chk_lock+0xb4>)
 806b074:	68fb      	ldr	r3, [r7, #12]
 806b076:	011b      	lsls	r3, r3, #4
 806b078:	4413      	add	r3, r2
 806b07a:	330c      	adds	r3, #12
 806b07c:	881b      	ldrh	r3, [r3, #0]
 806b07e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806b082:	d101      	bne.n	806b088 <chk_lock+0xa4>
 806b084:	2310      	movs	r3, #16
 806b086:	e000      	b.n	806b08a <chk_lock+0xa6>
 806b088:	2300      	movs	r3, #0
}
 806b08a:	4618      	mov	r0, r3
 806b08c:	3714      	adds	r7, #20
 806b08e:	46bd      	mov	sp, r7
 806b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b094:	4770      	bx	lr
 806b096:	bf00      	nop
 806b098:	2000042c 	.word	0x2000042c

0806b09c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 806b09c:	b480      	push	{r7}
 806b09e:	b083      	sub	sp, #12
 806b0a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 806b0a2:	2300      	movs	r3, #0
 806b0a4:	607b      	str	r3, [r7, #4]
 806b0a6:	e002      	b.n	806b0ae <enq_lock+0x12>
 806b0a8:	687b      	ldr	r3, [r7, #4]
 806b0aa:	3301      	adds	r3, #1
 806b0ac:	607b      	str	r3, [r7, #4]
 806b0ae:	687b      	ldr	r3, [r7, #4]
 806b0b0:	2b01      	cmp	r3, #1
 806b0b2:	d806      	bhi.n	806b0c2 <enq_lock+0x26>
 806b0b4:	4a09      	ldr	r2, [pc, #36]	; (806b0dc <enq_lock+0x40>)
 806b0b6:	687b      	ldr	r3, [r7, #4]
 806b0b8:	011b      	lsls	r3, r3, #4
 806b0ba:	4413      	add	r3, r2
 806b0bc:	681b      	ldr	r3, [r3, #0]
 806b0be:	2b00      	cmp	r3, #0
 806b0c0:	d1f2      	bne.n	806b0a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 806b0c2:	687b      	ldr	r3, [r7, #4]
 806b0c4:	2b02      	cmp	r3, #2
 806b0c6:	bf14      	ite	ne
 806b0c8:	2301      	movne	r3, #1
 806b0ca:	2300      	moveq	r3, #0
 806b0cc:	b2db      	uxtb	r3, r3
}
 806b0ce:	4618      	mov	r0, r3
 806b0d0:	370c      	adds	r7, #12
 806b0d2:	46bd      	mov	sp, r7
 806b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b0d8:	4770      	bx	lr
 806b0da:	bf00      	nop
 806b0dc:	2000042c 	.word	0x2000042c

0806b0e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 806b0e0:	b480      	push	{r7}
 806b0e2:	b085      	sub	sp, #20
 806b0e4:	af00      	add	r7, sp, #0
 806b0e6:	6078      	str	r0, [r7, #4]
 806b0e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 806b0ea:	2300      	movs	r3, #0
 806b0ec:	60fb      	str	r3, [r7, #12]
 806b0ee:	e01f      	b.n	806b130 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 806b0f0:	4a41      	ldr	r2, [pc, #260]	; (806b1f8 <inc_lock+0x118>)
 806b0f2:	68fb      	ldr	r3, [r7, #12]
 806b0f4:	011b      	lsls	r3, r3, #4
 806b0f6:	4413      	add	r3, r2
 806b0f8:	681a      	ldr	r2, [r3, #0]
 806b0fa:	687b      	ldr	r3, [r7, #4]
 806b0fc:	681b      	ldr	r3, [r3, #0]
 806b0fe:	429a      	cmp	r2, r3
 806b100:	d113      	bne.n	806b12a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 806b102:	4a3d      	ldr	r2, [pc, #244]	; (806b1f8 <inc_lock+0x118>)
 806b104:	68fb      	ldr	r3, [r7, #12]
 806b106:	011b      	lsls	r3, r3, #4
 806b108:	4413      	add	r3, r2
 806b10a:	3304      	adds	r3, #4
 806b10c:	681a      	ldr	r2, [r3, #0]
 806b10e:	687b      	ldr	r3, [r7, #4]
 806b110:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 806b112:	429a      	cmp	r2, r3
 806b114:	d109      	bne.n	806b12a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 806b116:	4a38      	ldr	r2, [pc, #224]	; (806b1f8 <inc_lock+0x118>)
 806b118:	68fb      	ldr	r3, [r7, #12]
 806b11a:	011b      	lsls	r3, r3, #4
 806b11c:	4413      	add	r3, r2
 806b11e:	3308      	adds	r3, #8
 806b120:	681a      	ldr	r2, [r3, #0]
 806b122:	687b      	ldr	r3, [r7, #4]
 806b124:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 806b126:	429a      	cmp	r2, r3
 806b128:	d006      	beq.n	806b138 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 806b12a:	68fb      	ldr	r3, [r7, #12]
 806b12c:	3301      	adds	r3, #1
 806b12e:	60fb      	str	r3, [r7, #12]
 806b130:	68fb      	ldr	r3, [r7, #12]
 806b132:	2b01      	cmp	r3, #1
 806b134:	d9dc      	bls.n	806b0f0 <inc_lock+0x10>
 806b136:	e000      	b.n	806b13a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 806b138:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 806b13a:	68fb      	ldr	r3, [r7, #12]
 806b13c:	2b02      	cmp	r3, #2
 806b13e:	d132      	bne.n	806b1a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 806b140:	2300      	movs	r3, #0
 806b142:	60fb      	str	r3, [r7, #12]
 806b144:	e002      	b.n	806b14c <inc_lock+0x6c>
 806b146:	68fb      	ldr	r3, [r7, #12]
 806b148:	3301      	adds	r3, #1
 806b14a:	60fb      	str	r3, [r7, #12]
 806b14c:	68fb      	ldr	r3, [r7, #12]
 806b14e:	2b01      	cmp	r3, #1
 806b150:	d806      	bhi.n	806b160 <inc_lock+0x80>
 806b152:	4a29      	ldr	r2, [pc, #164]	; (806b1f8 <inc_lock+0x118>)
 806b154:	68fb      	ldr	r3, [r7, #12]
 806b156:	011b      	lsls	r3, r3, #4
 806b158:	4413      	add	r3, r2
 806b15a:	681b      	ldr	r3, [r3, #0]
 806b15c:	2b00      	cmp	r3, #0
 806b15e:	d1f2      	bne.n	806b146 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 806b160:	68fb      	ldr	r3, [r7, #12]
 806b162:	2b02      	cmp	r3, #2
 806b164:	d101      	bne.n	806b16a <inc_lock+0x8a>
 806b166:	2300      	movs	r3, #0
 806b168:	e040      	b.n	806b1ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 806b16a:	687b      	ldr	r3, [r7, #4]
 806b16c:	681a      	ldr	r2, [r3, #0]
 806b16e:	4922      	ldr	r1, [pc, #136]	; (806b1f8 <inc_lock+0x118>)
 806b170:	68fb      	ldr	r3, [r7, #12]
 806b172:	011b      	lsls	r3, r3, #4
 806b174:	440b      	add	r3, r1
 806b176:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 806b178:	687b      	ldr	r3, [r7, #4]
 806b17a:	689a      	ldr	r2, [r3, #8]
 806b17c:	491e      	ldr	r1, [pc, #120]	; (806b1f8 <inc_lock+0x118>)
 806b17e:	68fb      	ldr	r3, [r7, #12]
 806b180:	011b      	lsls	r3, r3, #4
 806b182:	440b      	add	r3, r1
 806b184:	3304      	adds	r3, #4
 806b186:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 806b188:	687b      	ldr	r3, [r7, #4]
 806b18a:	695a      	ldr	r2, [r3, #20]
 806b18c:	491a      	ldr	r1, [pc, #104]	; (806b1f8 <inc_lock+0x118>)
 806b18e:	68fb      	ldr	r3, [r7, #12]
 806b190:	011b      	lsls	r3, r3, #4
 806b192:	440b      	add	r3, r1
 806b194:	3308      	adds	r3, #8
 806b196:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 806b198:	4a17      	ldr	r2, [pc, #92]	; (806b1f8 <inc_lock+0x118>)
 806b19a:	68fb      	ldr	r3, [r7, #12]
 806b19c:	011b      	lsls	r3, r3, #4
 806b19e:	4413      	add	r3, r2
 806b1a0:	330c      	adds	r3, #12
 806b1a2:	2200      	movs	r2, #0
 806b1a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 806b1a6:	683b      	ldr	r3, [r7, #0]
 806b1a8:	2b00      	cmp	r3, #0
 806b1aa:	d009      	beq.n	806b1c0 <inc_lock+0xe0>
 806b1ac:	4a12      	ldr	r2, [pc, #72]	; (806b1f8 <inc_lock+0x118>)
 806b1ae:	68fb      	ldr	r3, [r7, #12]
 806b1b0:	011b      	lsls	r3, r3, #4
 806b1b2:	4413      	add	r3, r2
 806b1b4:	330c      	adds	r3, #12
 806b1b6:	881b      	ldrh	r3, [r3, #0]
 806b1b8:	2b00      	cmp	r3, #0
 806b1ba:	d001      	beq.n	806b1c0 <inc_lock+0xe0>
 806b1bc:	2300      	movs	r3, #0
 806b1be:	e015      	b.n	806b1ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 806b1c0:	683b      	ldr	r3, [r7, #0]
 806b1c2:	2b00      	cmp	r3, #0
 806b1c4:	d108      	bne.n	806b1d8 <inc_lock+0xf8>
 806b1c6:	4a0c      	ldr	r2, [pc, #48]	; (806b1f8 <inc_lock+0x118>)
 806b1c8:	68fb      	ldr	r3, [r7, #12]
 806b1ca:	011b      	lsls	r3, r3, #4
 806b1cc:	4413      	add	r3, r2
 806b1ce:	330c      	adds	r3, #12
 806b1d0:	881b      	ldrh	r3, [r3, #0]
 806b1d2:	3301      	adds	r3, #1
 806b1d4:	b29a      	uxth	r2, r3
 806b1d6:	e001      	b.n	806b1dc <inc_lock+0xfc>
 806b1d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 806b1dc:	4906      	ldr	r1, [pc, #24]	; (806b1f8 <inc_lock+0x118>)
 806b1de:	68fb      	ldr	r3, [r7, #12]
 806b1e0:	011b      	lsls	r3, r3, #4
 806b1e2:	440b      	add	r3, r1
 806b1e4:	330c      	adds	r3, #12
 806b1e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 806b1e8:	68fb      	ldr	r3, [r7, #12]
 806b1ea:	3301      	adds	r3, #1
}
 806b1ec:	4618      	mov	r0, r3
 806b1ee:	3714      	adds	r7, #20
 806b1f0:	46bd      	mov	sp, r7
 806b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b1f6:	4770      	bx	lr
 806b1f8:	2000042c 	.word	0x2000042c

0806b1fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 806b1fc:	b480      	push	{r7}
 806b1fe:	b085      	sub	sp, #20
 806b200:	af00      	add	r7, sp, #0
 806b202:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 806b204:	687b      	ldr	r3, [r7, #4]
 806b206:	3b01      	subs	r3, #1
 806b208:	607b      	str	r3, [r7, #4]
 806b20a:	687b      	ldr	r3, [r7, #4]
 806b20c:	2b01      	cmp	r3, #1
 806b20e:	d825      	bhi.n	806b25c <dec_lock+0x60>
		n = Files[i].ctr;
 806b210:	4a17      	ldr	r2, [pc, #92]	; (806b270 <dec_lock+0x74>)
 806b212:	687b      	ldr	r3, [r7, #4]
 806b214:	011b      	lsls	r3, r3, #4
 806b216:	4413      	add	r3, r2
 806b218:	330c      	adds	r3, #12
 806b21a:	881b      	ldrh	r3, [r3, #0]
 806b21c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 806b21e:	89fb      	ldrh	r3, [r7, #14]
 806b220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806b224:	d101      	bne.n	806b22a <dec_lock+0x2e>
 806b226:	2300      	movs	r3, #0
 806b228:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 806b22a:	89fb      	ldrh	r3, [r7, #14]
 806b22c:	2b00      	cmp	r3, #0
 806b22e:	d002      	beq.n	806b236 <dec_lock+0x3a>
 806b230:	89fb      	ldrh	r3, [r7, #14]
 806b232:	3b01      	subs	r3, #1
 806b234:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 806b236:	4a0e      	ldr	r2, [pc, #56]	; (806b270 <dec_lock+0x74>)
 806b238:	687b      	ldr	r3, [r7, #4]
 806b23a:	011b      	lsls	r3, r3, #4
 806b23c:	4413      	add	r3, r2
 806b23e:	330c      	adds	r3, #12
 806b240:	89fa      	ldrh	r2, [r7, #14]
 806b242:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 806b244:	89fb      	ldrh	r3, [r7, #14]
 806b246:	2b00      	cmp	r3, #0
 806b248:	d105      	bne.n	806b256 <dec_lock+0x5a>
 806b24a:	4a09      	ldr	r2, [pc, #36]	; (806b270 <dec_lock+0x74>)
 806b24c:	687b      	ldr	r3, [r7, #4]
 806b24e:	011b      	lsls	r3, r3, #4
 806b250:	4413      	add	r3, r2
 806b252:	2200      	movs	r2, #0
 806b254:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 806b256:	2300      	movs	r3, #0
 806b258:	737b      	strb	r3, [r7, #13]
 806b25a:	e001      	b.n	806b260 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 806b25c:	2302      	movs	r3, #2
 806b25e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 806b260:	7b7b      	ldrb	r3, [r7, #13]
}
 806b262:	4618      	mov	r0, r3
 806b264:	3714      	adds	r7, #20
 806b266:	46bd      	mov	sp, r7
 806b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b26c:	4770      	bx	lr
 806b26e:	bf00      	nop
 806b270:	2000042c 	.word	0x2000042c

0806b274 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 806b274:	b480      	push	{r7}
 806b276:	b085      	sub	sp, #20
 806b278:	af00      	add	r7, sp, #0
 806b27a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 806b27c:	2300      	movs	r3, #0
 806b27e:	60fb      	str	r3, [r7, #12]
 806b280:	e010      	b.n	806b2a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 806b282:	4a0d      	ldr	r2, [pc, #52]	; (806b2b8 <clear_lock+0x44>)
 806b284:	68fb      	ldr	r3, [r7, #12]
 806b286:	011b      	lsls	r3, r3, #4
 806b288:	4413      	add	r3, r2
 806b28a:	681b      	ldr	r3, [r3, #0]
 806b28c:	687a      	ldr	r2, [r7, #4]
 806b28e:	429a      	cmp	r2, r3
 806b290:	d105      	bne.n	806b29e <clear_lock+0x2a>
 806b292:	4a09      	ldr	r2, [pc, #36]	; (806b2b8 <clear_lock+0x44>)
 806b294:	68fb      	ldr	r3, [r7, #12]
 806b296:	011b      	lsls	r3, r3, #4
 806b298:	4413      	add	r3, r2
 806b29a:	2200      	movs	r2, #0
 806b29c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 806b29e:	68fb      	ldr	r3, [r7, #12]
 806b2a0:	3301      	adds	r3, #1
 806b2a2:	60fb      	str	r3, [r7, #12]
 806b2a4:	68fb      	ldr	r3, [r7, #12]
 806b2a6:	2b01      	cmp	r3, #1
 806b2a8:	d9eb      	bls.n	806b282 <clear_lock+0xe>
	}
}
 806b2aa:	bf00      	nop
 806b2ac:	bf00      	nop
 806b2ae:	3714      	adds	r7, #20
 806b2b0:	46bd      	mov	sp, r7
 806b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b2b6:	4770      	bx	lr
 806b2b8:	2000042c 	.word	0x2000042c

0806b2bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 806b2bc:	b580      	push	{r7, lr}
 806b2be:	b086      	sub	sp, #24
 806b2c0:	af00      	add	r7, sp, #0
 806b2c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 806b2c4:	2300      	movs	r3, #0
 806b2c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 806b2c8:	687b      	ldr	r3, [r7, #4]
 806b2ca:	78db      	ldrb	r3, [r3, #3]
 806b2cc:	2b00      	cmp	r3, #0
 806b2ce:	d034      	beq.n	806b33a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 806b2d0:	687b      	ldr	r3, [r7, #4]
 806b2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806b2d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 806b2d6:	687b      	ldr	r3, [r7, #4]
 806b2d8:	7858      	ldrb	r0, [r3, #1]
 806b2da:	687b      	ldr	r3, [r7, #4]
 806b2dc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806b2e0:	2301      	movs	r3, #1
 806b2e2:	697a      	ldr	r2, [r7, #20]
 806b2e4:	f7ff fd0e 	bl	806ad04 <disk_write>
 806b2e8:	4603      	mov	r3, r0
 806b2ea:	2b00      	cmp	r3, #0
 806b2ec:	d002      	beq.n	806b2f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 806b2ee:	2301      	movs	r3, #1
 806b2f0:	73fb      	strb	r3, [r7, #15]
 806b2f2:	e022      	b.n	806b33a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 806b2f4:	687b      	ldr	r3, [r7, #4]
 806b2f6:	2200      	movs	r2, #0
 806b2f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 806b2fa:	687b      	ldr	r3, [r7, #4]
 806b2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806b2fe:	697a      	ldr	r2, [r7, #20]
 806b300:	1ad2      	subs	r2, r2, r3
 806b302:	687b      	ldr	r3, [r7, #4]
 806b304:	69db      	ldr	r3, [r3, #28]
 806b306:	429a      	cmp	r2, r3
 806b308:	d217      	bcs.n	806b33a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 806b30a:	687b      	ldr	r3, [r7, #4]
 806b30c:	789b      	ldrb	r3, [r3, #2]
 806b30e:	613b      	str	r3, [r7, #16]
 806b310:	e010      	b.n	806b334 <sync_window+0x78>
					wsect += fs->fsize;
 806b312:	687b      	ldr	r3, [r7, #4]
 806b314:	69db      	ldr	r3, [r3, #28]
 806b316:	697a      	ldr	r2, [r7, #20]
 806b318:	4413      	add	r3, r2
 806b31a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 806b31c:	687b      	ldr	r3, [r7, #4]
 806b31e:	7858      	ldrb	r0, [r3, #1]
 806b320:	687b      	ldr	r3, [r7, #4]
 806b322:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806b326:	2301      	movs	r3, #1
 806b328:	697a      	ldr	r2, [r7, #20]
 806b32a:	f7ff fceb 	bl	806ad04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 806b32e:	693b      	ldr	r3, [r7, #16]
 806b330:	3b01      	subs	r3, #1
 806b332:	613b      	str	r3, [r7, #16]
 806b334:	693b      	ldr	r3, [r7, #16]
 806b336:	2b01      	cmp	r3, #1
 806b338:	d8eb      	bhi.n	806b312 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 806b33a:	7bfb      	ldrb	r3, [r7, #15]
}
 806b33c:	4618      	mov	r0, r3
 806b33e:	3718      	adds	r7, #24
 806b340:	46bd      	mov	sp, r7
 806b342:	bd80      	pop	{r7, pc}

0806b344 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 806b344:	b580      	push	{r7, lr}
 806b346:	b084      	sub	sp, #16
 806b348:	af00      	add	r7, sp, #0
 806b34a:	6078      	str	r0, [r7, #4]
 806b34c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 806b34e:	2300      	movs	r3, #0
 806b350:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 806b352:	687b      	ldr	r3, [r7, #4]
 806b354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806b356:	683a      	ldr	r2, [r7, #0]
 806b358:	429a      	cmp	r2, r3
 806b35a:	d01b      	beq.n	806b394 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 806b35c:	6878      	ldr	r0, [r7, #4]
 806b35e:	f7ff ffad 	bl	806b2bc <sync_window>
 806b362:	4603      	mov	r3, r0
 806b364:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 806b366:	7bfb      	ldrb	r3, [r7, #15]
 806b368:	2b00      	cmp	r3, #0
 806b36a:	d113      	bne.n	806b394 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 806b36c:	687b      	ldr	r3, [r7, #4]
 806b36e:	7858      	ldrb	r0, [r3, #1]
 806b370:	687b      	ldr	r3, [r7, #4]
 806b372:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806b376:	2301      	movs	r3, #1
 806b378:	683a      	ldr	r2, [r7, #0]
 806b37a:	f7ff fca3 	bl	806acc4 <disk_read>
 806b37e:	4603      	mov	r3, r0
 806b380:	2b00      	cmp	r3, #0
 806b382:	d004      	beq.n	806b38e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 806b384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806b388:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 806b38a:	2301      	movs	r3, #1
 806b38c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 806b38e:	687b      	ldr	r3, [r7, #4]
 806b390:	683a      	ldr	r2, [r7, #0]
 806b392:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 806b394:	7bfb      	ldrb	r3, [r7, #15]
}
 806b396:	4618      	mov	r0, r3
 806b398:	3710      	adds	r7, #16
 806b39a:	46bd      	mov	sp, r7
 806b39c:	bd80      	pop	{r7, pc}
	...

0806b3a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 806b3a0:	b580      	push	{r7, lr}
 806b3a2:	b084      	sub	sp, #16
 806b3a4:	af00      	add	r7, sp, #0
 806b3a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 806b3a8:	6878      	ldr	r0, [r7, #4]
 806b3aa:	f7ff ff87 	bl	806b2bc <sync_window>
 806b3ae:	4603      	mov	r3, r0
 806b3b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 806b3b2:	7bfb      	ldrb	r3, [r7, #15]
 806b3b4:	2b00      	cmp	r3, #0
 806b3b6:	d158      	bne.n	806b46a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 806b3b8:	687b      	ldr	r3, [r7, #4]
 806b3ba:	781b      	ldrb	r3, [r3, #0]
 806b3bc:	2b03      	cmp	r3, #3
 806b3be:	d148      	bne.n	806b452 <sync_fs+0xb2>
 806b3c0:	687b      	ldr	r3, [r7, #4]
 806b3c2:	791b      	ldrb	r3, [r3, #4]
 806b3c4:	2b01      	cmp	r3, #1
 806b3c6:	d144      	bne.n	806b452 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 806b3c8:	687b      	ldr	r3, [r7, #4]
 806b3ca:	3334      	adds	r3, #52	; 0x34
 806b3cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 806b3d0:	2100      	movs	r1, #0
 806b3d2:	4618      	mov	r0, r3
 806b3d4:	f7ff fd77 	bl	806aec6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 806b3d8:	687b      	ldr	r3, [r7, #4]
 806b3da:	3334      	adds	r3, #52	; 0x34
 806b3dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 806b3e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 806b3e4:	4618      	mov	r0, r3
 806b3e6:	f7ff fd06 	bl	806adf6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 806b3ea:	687b      	ldr	r3, [r7, #4]
 806b3ec:	3334      	adds	r3, #52	; 0x34
 806b3ee:	4921      	ldr	r1, [pc, #132]	; (806b474 <sync_fs+0xd4>)
 806b3f0:	4618      	mov	r0, r3
 806b3f2:	f7ff fd1b 	bl	806ae2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 806b3f6:	687b      	ldr	r3, [r7, #4]
 806b3f8:	3334      	adds	r3, #52	; 0x34
 806b3fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 806b3fe:	491e      	ldr	r1, [pc, #120]	; (806b478 <sync_fs+0xd8>)
 806b400:	4618      	mov	r0, r3
 806b402:	f7ff fd13 	bl	806ae2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 806b406:	687b      	ldr	r3, [r7, #4]
 806b408:	3334      	adds	r3, #52	; 0x34
 806b40a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 806b40e:	687b      	ldr	r3, [r7, #4]
 806b410:	695b      	ldr	r3, [r3, #20]
 806b412:	4619      	mov	r1, r3
 806b414:	4610      	mov	r0, r2
 806b416:	f7ff fd09 	bl	806ae2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 806b41a:	687b      	ldr	r3, [r7, #4]
 806b41c:	3334      	adds	r3, #52	; 0x34
 806b41e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 806b422:	687b      	ldr	r3, [r7, #4]
 806b424:	691b      	ldr	r3, [r3, #16]
 806b426:	4619      	mov	r1, r3
 806b428:	4610      	mov	r0, r2
 806b42a:	f7ff fcff 	bl	806ae2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 806b42e:	687b      	ldr	r3, [r7, #4]
 806b430:	6a1b      	ldr	r3, [r3, #32]
 806b432:	1c5a      	adds	r2, r3, #1
 806b434:	687b      	ldr	r3, [r7, #4]
 806b436:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 806b438:	687b      	ldr	r3, [r7, #4]
 806b43a:	7858      	ldrb	r0, [r3, #1]
 806b43c:	687b      	ldr	r3, [r7, #4]
 806b43e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806b442:	687b      	ldr	r3, [r7, #4]
 806b444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806b446:	2301      	movs	r3, #1
 806b448:	f7ff fc5c 	bl	806ad04 <disk_write>
			fs->fsi_flag = 0;
 806b44c:	687b      	ldr	r3, [r7, #4]
 806b44e:	2200      	movs	r2, #0
 806b450:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 806b452:	687b      	ldr	r3, [r7, #4]
 806b454:	785b      	ldrb	r3, [r3, #1]
 806b456:	2200      	movs	r2, #0
 806b458:	2100      	movs	r1, #0
 806b45a:	4618      	mov	r0, r3
 806b45c:	f7ff fc72 	bl	806ad44 <disk_ioctl>
 806b460:	4603      	mov	r3, r0
 806b462:	2b00      	cmp	r3, #0
 806b464:	d001      	beq.n	806b46a <sync_fs+0xca>
 806b466:	2301      	movs	r3, #1
 806b468:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 806b46a:	7bfb      	ldrb	r3, [r7, #15]
}
 806b46c:	4618      	mov	r0, r3
 806b46e:	3710      	adds	r7, #16
 806b470:	46bd      	mov	sp, r7
 806b472:	bd80      	pop	{r7, pc}
 806b474:	41615252 	.word	0x41615252
 806b478:	61417272 	.word	0x61417272

0806b47c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 806b47c:	b480      	push	{r7}
 806b47e:	b083      	sub	sp, #12
 806b480:	af00      	add	r7, sp, #0
 806b482:	6078      	str	r0, [r7, #4]
 806b484:	6039      	str	r1, [r7, #0]
	clst -= 2;
 806b486:	683b      	ldr	r3, [r7, #0]
 806b488:	3b02      	subs	r3, #2
 806b48a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 806b48c:	687b      	ldr	r3, [r7, #4]
 806b48e:	699b      	ldr	r3, [r3, #24]
 806b490:	3b02      	subs	r3, #2
 806b492:	683a      	ldr	r2, [r7, #0]
 806b494:	429a      	cmp	r2, r3
 806b496:	d301      	bcc.n	806b49c <clust2sect+0x20>
 806b498:	2300      	movs	r3, #0
 806b49a:	e008      	b.n	806b4ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 806b49c:	687b      	ldr	r3, [r7, #4]
 806b49e:	895b      	ldrh	r3, [r3, #10]
 806b4a0:	461a      	mov	r2, r3
 806b4a2:	683b      	ldr	r3, [r7, #0]
 806b4a4:	fb03 f202 	mul.w	r2, r3, r2
 806b4a8:	687b      	ldr	r3, [r7, #4]
 806b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b4ac:	4413      	add	r3, r2
}
 806b4ae:	4618      	mov	r0, r3
 806b4b0:	370c      	adds	r7, #12
 806b4b2:	46bd      	mov	sp, r7
 806b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b4b8:	4770      	bx	lr

0806b4ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 806b4ba:	b580      	push	{r7, lr}
 806b4bc:	b086      	sub	sp, #24
 806b4be:	af00      	add	r7, sp, #0
 806b4c0:	6078      	str	r0, [r7, #4]
 806b4c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 806b4c4:	687b      	ldr	r3, [r7, #4]
 806b4c6:	681b      	ldr	r3, [r3, #0]
 806b4c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 806b4ca:	683b      	ldr	r3, [r7, #0]
 806b4cc:	2b01      	cmp	r3, #1
 806b4ce:	d904      	bls.n	806b4da <get_fat+0x20>
 806b4d0:	693b      	ldr	r3, [r7, #16]
 806b4d2:	699b      	ldr	r3, [r3, #24]
 806b4d4:	683a      	ldr	r2, [r7, #0]
 806b4d6:	429a      	cmp	r2, r3
 806b4d8:	d302      	bcc.n	806b4e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 806b4da:	2301      	movs	r3, #1
 806b4dc:	617b      	str	r3, [r7, #20]
 806b4de:	e08f      	b.n	806b600 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 806b4e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806b4e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 806b4e6:	693b      	ldr	r3, [r7, #16]
 806b4e8:	781b      	ldrb	r3, [r3, #0]
 806b4ea:	2b03      	cmp	r3, #3
 806b4ec:	d062      	beq.n	806b5b4 <get_fat+0xfa>
 806b4ee:	2b03      	cmp	r3, #3
 806b4f0:	dc7c      	bgt.n	806b5ec <get_fat+0x132>
 806b4f2:	2b01      	cmp	r3, #1
 806b4f4:	d002      	beq.n	806b4fc <get_fat+0x42>
 806b4f6:	2b02      	cmp	r3, #2
 806b4f8:	d042      	beq.n	806b580 <get_fat+0xc6>
 806b4fa:	e077      	b.n	806b5ec <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 806b4fc:	683b      	ldr	r3, [r7, #0]
 806b4fe:	60fb      	str	r3, [r7, #12]
 806b500:	68fb      	ldr	r3, [r7, #12]
 806b502:	085b      	lsrs	r3, r3, #1
 806b504:	68fa      	ldr	r2, [r7, #12]
 806b506:	4413      	add	r3, r2
 806b508:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806b50a:	693b      	ldr	r3, [r7, #16]
 806b50c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806b50e:	68fb      	ldr	r3, [r7, #12]
 806b510:	0a5b      	lsrs	r3, r3, #9
 806b512:	4413      	add	r3, r2
 806b514:	4619      	mov	r1, r3
 806b516:	6938      	ldr	r0, [r7, #16]
 806b518:	f7ff ff14 	bl	806b344 <move_window>
 806b51c:	4603      	mov	r3, r0
 806b51e:	2b00      	cmp	r3, #0
 806b520:	d167      	bne.n	806b5f2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 806b522:	68fb      	ldr	r3, [r7, #12]
 806b524:	1c5a      	adds	r2, r3, #1
 806b526:	60fa      	str	r2, [r7, #12]
 806b528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806b52c:	693a      	ldr	r2, [r7, #16]
 806b52e:	4413      	add	r3, r2
 806b530:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806b534:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806b536:	693b      	ldr	r3, [r7, #16]
 806b538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806b53a:	68fb      	ldr	r3, [r7, #12]
 806b53c:	0a5b      	lsrs	r3, r3, #9
 806b53e:	4413      	add	r3, r2
 806b540:	4619      	mov	r1, r3
 806b542:	6938      	ldr	r0, [r7, #16]
 806b544:	f7ff fefe 	bl	806b344 <move_window>
 806b548:	4603      	mov	r3, r0
 806b54a:	2b00      	cmp	r3, #0
 806b54c:	d153      	bne.n	806b5f6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 806b54e:	68fb      	ldr	r3, [r7, #12]
 806b550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806b554:	693a      	ldr	r2, [r7, #16]
 806b556:	4413      	add	r3, r2
 806b558:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806b55c:	021b      	lsls	r3, r3, #8
 806b55e:	461a      	mov	r2, r3
 806b560:	68bb      	ldr	r3, [r7, #8]
 806b562:	4313      	orrs	r3, r2
 806b564:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 806b566:	683b      	ldr	r3, [r7, #0]
 806b568:	f003 0301 	and.w	r3, r3, #1
 806b56c:	2b00      	cmp	r3, #0
 806b56e:	d002      	beq.n	806b576 <get_fat+0xbc>
 806b570:	68bb      	ldr	r3, [r7, #8]
 806b572:	091b      	lsrs	r3, r3, #4
 806b574:	e002      	b.n	806b57c <get_fat+0xc2>
 806b576:	68bb      	ldr	r3, [r7, #8]
 806b578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 806b57c:	617b      	str	r3, [r7, #20]
			break;
 806b57e:	e03f      	b.n	806b600 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 806b580:	693b      	ldr	r3, [r7, #16]
 806b582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806b584:	683b      	ldr	r3, [r7, #0]
 806b586:	0a1b      	lsrs	r3, r3, #8
 806b588:	4413      	add	r3, r2
 806b58a:	4619      	mov	r1, r3
 806b58c:	6938      	ldr	r0, [r7, #16]
 806b58e:	f7ff fed9 	bl	806b344 <move_window>
 806b592:	4603      	mov	r3, r0
 806b594:	2b00      	cmp	r3, #0
 806b596:	d130      	bne.n	806b5fa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 806b598:	693b      	ldr	r3, [r7, #16]
 806b59a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806b59e:	683b      	ldr	r3, [r7, #0]
 806b5a0:	005b      	lsls	r3, r3, #1
 806b5a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 806b5a6:	4413      	add	r3, r2
 806b5a8:	4618      	mov	r0, r3
 806b5aa:	f7ff fbe9 	bl	806ad80 <ld_word>
 806b5ae:	4603      	mov	r3, r0
 806b5b0:	617b      	str	r3, [r7, #20]
			break;
 806b5b2:	e025      	b.n	806b600 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 806b5b4:	693b      	ldr	r3, [r7, #16]
 806b5b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806b5b8:	683b      	ldr	r3, [r7, #0]
 806b5ba:	09db      	lsrs	r3, r3, #7
 806b5bc:	4413      	add	r3, r2
 806b5be:	4619      	mov	r1, r3
 806b5c0:	6938      	ldr	r0, [r7, #16]
 806b5c2:	f7ff febf 	bl	806b344 <move_window>
 806b5c6:	4603      	mov	r3, r0
 806b5c8:	2b00      	cmp	r3, #0
 806b5ca:	d118      	bne.n	806b5fe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 806b5cc:	693b      	ldr	r3, [r7, #16]
 806b5ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806b5d2:	683b      	ldr	r3, [r7, #0]
 806b5d4:	009b      	lsls	r3, r3, #2
 806b5d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 806b5da:	4413      	add	r3, r2
 806b5dc:	4618      	mov	r0, r3
 806b5de:	f7ff fbe7 	bl	806adb0 <ld_dword>
 806b5e2:	4603      	mov	r3, r0
 806b5e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 806b5e8:	617b      	str	r3, [r7, #20]
			break;
 806b5ea:	e009      	b.n	806b600 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 806b5ec:	2301      	movs	r3, #1
 806b5ee:	617b      	str	r3, [r7, #20]
 806b5f0:	e006      	b.n	806b600 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806b5f2:	bf00      	nop
 806b5f4:	e004      	b.n	806b600 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806b5f6:	bf00      	nop
 806b5f8:	e002      	b.n	806b600 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 806b5fa:	bf00      	nop
 806b5fc:	e000      	b.n	806b600 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 806b5fe:	bf00      	nop
		}
	}

	return val;
 806b600:	697b      	ldr	r3, [r7, #20]
}
 806b602:	4618      	mov	r0, r3
 806b604:	3718      	adds	r7, #24
 806b606:	46bd      	mov	sp, r7
 806b608:	bd80      	pop	{r7, pc}

0806b60a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 806b60a:	b590      	push	{r4, r7, lr}
 806b60c:	b089      	sub	sp, #36	; 0x24
 806b60e:	af00      	add	r7, sp, #0
 806b610:	60f8      	str	r0, [r7, #12]
 806b612:	60b9      	str	r1, [r7, #8]
 806b614:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 806b616:	2302      	movs	r3, #2
 806b618:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 806b61a:	68bb      	ldr	r3, [r7, #8]
 806b61c:	2b01      	cmp	r3, #1
 806b61e:	f240 80d2 	bls.w	806b7c6 <put_fat+0x1bc>
 806b622:	68fb      	ldr	r3, [r7, #12]
 806b624:	699b      	ldr	r3, [r3, #24]
 806b626:	68ba      	ldr	r2, [r7, #8]
 806b628:	429a      	cmp	r2, r3
 806b62a:	f080 80cc 	bcs.w	806b7c6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 806b62e:	68fb      	ldr	r3, [r7, #12]
 806b630:	781b      	ldrb	r3, [r3, #0]
 806b632:	2b03      	cmp	r3, #3
 806b634:	f000 8096 	beq.w	806b764 <put_fat+0x15a>
 806b638:	2b03      	cmp	r3, #3
 806b63a:	f300 80cd 	bgt.w	806b7d8 <put_fat+0x1ce>
 806b63e:	2b01      	cmp	r3, #1
 806b640:	d002      	beq.n	806b648 <put_fat+0x3e>
 806b642:	2b02      	cmp	r3, #2
 806b644:	d06e      	beq.n	806b724 <put_fat+0x11a>
 806b646:	e0c7      	b.n	806b7d8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 806b648:	68bb      	ldr	r3, [r7, #8]
 806b64a:	61bb      	str	r3, [r7, #24]
 806b64c:	69bb      	ldr	r3, [r7, #24]
 806b64e:	085b      	lsrs	r3, r3, #1
 806b650:	69ba      	ldr	r2, [r7, #24]
 806b652:	4413      	add	r3, r2
 806b654:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 806b656:	68fb      	ldr	r3, [r7, #12]
 806b658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806b65a:	69bb      	ldr	r3, [r7, #24]
 806b65c:	0a5b      	lsrs	r3, r3, #9
 806b65e:	4413      	add	r3, r2
 806b660:	4619      	mov	r1, r3
 806b662:	68f8      	ldr	r0, [r7, #12]
 806b664:	f7ff fe6e 	bl	806b344 <move_window>
 806b668:	4603      	mov	r3, r0
 806b66a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806b66c:	7ffb      	ldrb	r3, [r7, #31]
 806b66e:	2b00      	cmp	r3, #0
 806b670:	f040 80ab 	bne.w	806b7ca <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 806b674:	68fb      	ldr	r3, [r7, #12]
 806b676:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806b67a:	69bb      	ldr	r3, [r7, #24]
 806b67c:	1c59      	adds	r1, r3, #1
 806b67e:	61b9      	str	r1, [r7, #24]
 806b680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806b684:	4413      	add	r3, r2
 806b686:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 806b688:	68bb      	ldr	r3, [r7, #8]
 806b68a:	f003 0301 	and.w	r3, r3, #1
 806b68e:	2b00      	cmp	r3, #0
 806b690:	d00d      	beq.n	806b6ae <put_fat+0xa4>
 806b692:	697b      	ldr	r3, [r7, #20]
 806b694:	781b      	ldrb	r3, [r3, #0]
 806b696:	b25b      	sxtb	r3, r3
 806b698:	f003 030f 	and.w	r3, r3, #15
 806b69c:	b25a      	sxtb	r2, r3
 806b69e:	687b      	ldr	r3, [r7, #4]
 806b6a0:	b2db      	uxtb	r3, r3
 806b6a2:	011b      	lsls	r3, r3, #4
 806b6a4:	b25b      	sxtb	r3, r3
 806b6a6:	4313      	orrs	r3, r2
 806b6a8:	b25b      	sxtb	r3, r3
 806b6aa:	b2db      	uxtb	r3, r3
 806b6ac:	e001      	b.n	806b6b2 <put_fat+0xa8>
 806b6ae:	687b      	ldr	r3, [r7, #4]
 806b6b0:	b2db      	uxtb	r3, r3
 806b6b2:	697a      	ldr	r2, [r7, #20]
 806b6b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 806b6b6:	68fb      	ldr	r3, [r7, #12]
 806b6b8:	2201      	movs	r2, #1
 806b6ba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 806b6bc:	68fb      	ldr	r3, [r7, #12]
 806b6be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806b6c0:	69bb      	ldr	r3, [r7, #24]
 806b6c2:	0a5b      	lsrs	r3, r3, #9
 806b6c4:	4413      	add	r3, r2
 806b6c6:	4619      	mov	r1, r3
 806b6c8:	68f8      	ldr	r0, [r7, #12]
 806b6ca:	f7ff fe3b 	bl	806b344 <move_window>
 806b6ce:	4603      	mov	r3, r0
 806b6d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806b6d2:	7ffb      	ldrb	r3, [r7, #31]
 806b6d4:	2b00      	cmp	r3, #0
 806b6d6:	d17a      	bne.n	806b7ce <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 806b6d8:	68fb      	ldr	r3, [r7, #12]
 806b6da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806b6de:	69bb      	ldr	r3, [r7, #24]
 806b6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806b6e4:	4413      	add	r3, r2
 806b6e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 806b6e8:	68bb      	ldr	r3, [r7, #8]
 806b6ea:	f003 0301 	and.w	r3, r3, #1
 806b6ee:	2b00      	cmp	r3, #0
 806b6f0:	d003      	beq.n	806b6fa <put_fat+0xf0>
 806b6f2:	687b      	ldr	r3, [r7, #4]
 806b6f4:	091b      	lsrs	r3, r3, #4
 806b6f6:	b2db      	uxtb	r3, r3
 806b6f8:	e00e      	b.n	806b718 <put_fat+0x10e>
 806b6fa:	697b      	ldr	r3, [r7, #20]
 806b6fc:	781b      	ldrb	r3, [r3, #0]
 806b6fe:	b25b      	sxtb	r3, r3
 806b700:	f023 030f 	bic.w	r3, r3, #15
 806b704:	b25a      	sxtb	r2, r3
 806b706:	687b      	ldr	r3, [r7, #4]
 806b708:	0a1b      	lsrs	r3, r3, #8
 806b70a:	b25b      	sxtb	r3, r3
 806b70c:	f003 030f 	and.w	r3, r3, #15
 806b710:	b25b      	sxtb	r3, r3
 806b712:	4313      	orrs	r3, r2
 806b714:	b25b      	sxtb	r3, r3
 806b716:	b2db      	uxtb	r3, r3
 806b718:	697a      	ldr	r2, [r7, #20]
 806b71a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 806b71c:	68fb      	ldr	r3, [r7, #12]
 806b71e:	2201      	movs	r2, #1
 806b720:	70da      	strb	r2, [r3, #3]
			break;
 806b722:	e059      	b.n	806b7d8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 806b724:	68fb      	ldr	r3, [r7, #12]
 806b726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806b728:	68bb      	ldr	r3, [r7, #8]
 806b72a:	0a1b      	lsrs	r3, r3, #8
 806b72c:	4413      	add	r3, r2
 806b72e:	4619      	mov	r1, r3
 806b730:	68f8      	ldr	r0, [r7, #12]
 806b732:	f7ff fe07 	bl	806b344 <move_window>
 806b736:	4603      	mov	r3, r0
 806b738:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806b73a:	7ffb      	ldrb	r3, [r7, #31]
 806b73c:	2b00      	cmp	r3, #0
 806b73e:	d148      	bne.n	806b7d2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 806b740:	68fb      	ldr	r3, [r7, #12]
 806b742:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806b746:	68bb      	ldr	r3, [r7, #8]
 806b748:	005b      	lsls	r3, r3, #1
 806b74a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 806b74e:	4413      	add	r3, r2
 806b750:	687a      	ldr	r2, [r7, #4]
 806b752:	b292      	uxth	r2, r2
 806b754:	4611      	mov	r1, r2
 806b756:	4618      	mov	r0, r3
 806b758:	f7ff fb4d 	bl	806adf6 <st_word>
			fs->wflag = 1;
 806b75c:	68fb      	ldr	r3, [r7, #12]
 806b75e:	2201      	movs	r2, #1
 806b760:	70da      	strb	r2, [r3, #3]
			break;
 806b762:	e039      	b.n	806b7d8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 806b764:	68fb      	ldr	r3, [r7, #12]
 806b766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806b768:	68bb      	ldr	r3, [r7, #8]
 806b76a:	09db      	lsrs	r3, r3, #7
 806b76c:	4413      	add	r3, r2
 806b76e:	4619      	mov	r1, r3
 806b770:	68f8      	ldr	r0, [r7, #12]
 806b772:	f7ff fde7 	bl	806b344 <move_window>
 806b776:	4603      	mov	r3, r0
 806b778:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806b77a:	7ffb      	ldrb	r3, [r7, #31]
 806b77c:	2b00      	cmp	r3, #0
 806b77e:	d12a      	bne.n	806b7d6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 806b780:	687b      	ldr	r3, [r7, #4]
 806b782:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 806b786:	68fb      	ldr	r3, [r7, #12]
 806b788:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806b78c:	68bb      	ldr	r3, [r7, #8]
 806b78e:	009b      	lsls	r3, r3, #2
 806b790:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 806b794:	4413      	add	r3, r2
 806b796:	4618      	mov	r0, r3
 806b798:	f7ff fb0a 	bl	806adb0 <ld_dword>
 806b79c:	4603      	mov	r3, r0
 806b79e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 806b7a2:	4323      	orrs	r3, r4
 806b7a4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 806b7a6:	68fb      	ldr	r3, [r7, #12]
 806b7a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806b7ac:	68bb      	ldr	r3, [r7, #8]
 806b7ae:	009b      	lsls	r3, r3, #2
 806b7b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 806b7b4:	4413      	add	r3, r2
 806b7b6:	6879      	ldr	r1, [r7, #4]
 806b7b8:	4618      	mov	r0, r3
 806b7ba:	f7ff fb37 	bl	806ae2c <st_dword>
			fs->wflag = 1;
 806b7be:	68fb      	ldr	r3, [r7, #12]
 806b7c0:	2201      	movs	r2, #1
 806b7c2:	70da      	strb	r2, [r3, #3]
			break;
 806b7c4:	e008      	b.n	806b7d8 <put_fat+0x1ce>
		}
	}
 806b7c6:	bf00      	nop
 806b7c8:	e006      	b.n	806b7d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806b7ca:	bf00      	nop
 806b7cc:	e004      	b.n	806b7d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806b7ce:	bf00      	nop
 806b7d0:	e002      	b.n	806b7d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806b7d2:	bf00      	nop
 806b7d4:	e000      	b.n	806b7d8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806b7d6:	bf00      	nop
	return res;
 806b7d8:	7ffb      	ldrb	r3, [r7, #31]
}
 806b7da:	4618      	mov	r0, r3
 806b7dc:	3724      	adds	r7, #36	; 0x24
 806b7de:	46bd      	mov	sp, r7
 806b7e0:	bd90      	pop	{r4, r7, pc}

0806b7e2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 806b7e2:	b580      	push	{r7, lr}
 806b7e4:	b088      	sub	sp, #32
 806b7e6:	af00      	add	r7, sp, #0
 806b7e8:	60f8      	str	r0, [r7, #12]
 806b7ea:	60b9      	str	r1, [r7, #8]
 806b7ec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 806b7ee:	2300      	movs	r3, #0
 806b7f0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 806b7f2:	68fb      	ldr	r3, [r7, #12]
 806b7f4:	681b      	ldr	r3, [r3, #0]
 806b7f6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 806b7f8:	68bb      	ldr	r3, [r7, #8]
 806b7fa:	2b01      	cmp	r3, #1
 806b7fc:	d904      	bls.n	806b808 <remove_chain+0x26>
 806b7fe:	69bb      	ldr	r3, [r7, #24]
 806b800:	699b      	ldr	r3, [r3, #24]
 806b802:	68ba      	ldr	r2, [r7, #8]
 806b804:	429a      	cmp	r2, r3
 806b806:	d301      	bcc.n	806b80c <remove_chain+0x2a>
 806b808:	2302      	movs	r3, #2
 806b80a:	e04b      	b.n	806b8a4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 806b80c:	687b      	ldr	r3, [r7, #4]
 806b80e:	2b00      	cmp	r3, #0
 806b810:	d00c      	beq.n	806b82c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 806b812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806b816:	6879      	ldr	r1, [r7, #4]
 806b818:	69b8      	ldr	r0, [r7, #24]
 806b81a:	f7ff fef6 	bl	806b60a <put_fat>
 806b81e:	4603      	mov	r3, r0
 806b820:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 806b822:	7ffb      	ldrb	r3, [r7, #31]
 806b824:	2b00      	cmp	r3, #0
 806b826:	d001      	beq.n	806b82c <remove_chain+0x4a>
 806b828:	7ffb      	ldrb	r3, [r7, #31]
 806b82a:	e03b      	b.n	806b8a4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 806b82c:	68b9      	ldr	r1, [r7, #8]
 806b82e:	68f8      	ldr	r0, [r7, #12]
 806b830:	f7ff fe43 	bl	806b4ba <get_fat>
 806b834:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 806b836:	697b      	ldr	r3, [r7, #20]
 806b838:	2b00      	cmp	r3, #0
 806b83a:	d031      	beq.n	806b8a0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 806b83c:	697b      	ldr	r3, [r7, #20]
 806b83e:	2b01      	cmp	r3, #1
 806b840:	d101      	bne.n	806b846 <remove_chain+0x64>
 806b842:	2302      	movs	r3, #2
 806b844:	e02e      	b.n	806b8a4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 806b846:	697b      	ldr	r3, [r7, #20]
 806b848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806b84c:	d101      	bne.n	806b852 <remove_chain+0x70>
 806b84e:	2301      	movs	r3, #1
 806b850:	e028      	b.n	806b8a4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 806b852:	2200      	movs	r2, #0
 806b854:	68b9      	ldr	r1, [r7, #8]
 806b856:	69b8      	ldr	r0, [r7, #24]
 806b858:	f7ff fed7 	bl	806b60a <put_fat>
 806b85c:	4603      	mov	r3, r0
 806b85e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 806b860:	7ffb      	ldrb	r3, [r7, #31]
 806b862:	2b00      	cmp	r3, #0
 806b864:	d001      	beq.n	806b86a <remove_chain+0x88>
 806b866:	7ffb      	ldrb	r3, [r7, #31]
 806b868:	e01c      	b.n	806b8a4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 806b86a:	69bb      	ldr	r3, [r7, #24]
 806b86c:	695a      	ldr	r2, [r3, #20]
 806b86e:	69bb      	ldr	r3, [r7, #24]
 806b870:	699b      	ldr	r3, [r3, #24]
 806b872:	3b02      	subs	r3, #2
 806b874:	429a      	cmp	r2, r3
 806b876:	d20b      	bcs.n	806b890 <remove_chain+0xae>
			fs->free_clst++;
 806b878:	69bb      	ldr	r3, [r7, #24]
 806b87a:	695b      	ldr	r3, [r3, #20]
 806b87c:	1c5a      	adds	r2, r3, #1
 806b87e:	69bb      	ldr	r3, [r7, #24]
 806b880:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 806b882:	69bb      	ldr	r3, [r7, #24]
 806b884:	791b      	ldrb	r3, [r3, #4]
 806b886:	f043 0301 	orr.w	r3, r3, #1
 806b88a:	b2da      	uxtb	r2, r3
 806b88c:	69bb      	ldr	r3, [r7, #24]
 806b88e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 806b890:	697b      	ldr	r3, [r7, #20]
 806b892:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 806b894:	69bb      	ldr	r3, [r7, #24]
 806b896:	699b      	ldr	r3, [r3, #24]
 806b898:	68ba      	ldr	r2, [r7, #8]
 806b89a:	429a      	cmp	r2, r3
 806b89c:	d3c6      	bcc.n	806b82c <remove_chain+0x4a>
 806b89e:	e000      	b.n	806b8a2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 806b8a0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 806b8a2:	2300      	movs	r3, #0
}
 806b8a4:	4618      	mov	r0, r3
 806b8a6:	3720      	adds	r7, #32
 806b8a8:	46bd      	mov	sp, r7
 806b8aa:	bd80      	pop	{r7, pc}

0806b8ac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 806b8ac:	b580      	push	{r7, lr}
 806b8ae:	b088      	sub	sp, #32
 806b8b0:	af00      	add	r7, sp, #0
 806b8b2:	6078      	str	r0, [r7, #4]
 806b8b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 806b8b6:	687b      	ldr	r3, [r7, #4]
 806b8b8:	681b      	ldr	r3, [r3, #0]
 806b8ba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 806b8bc:	683b      	ldr	r3, [r7, #0]
 806b8be:	2b00      	cmp	r3, #0
 806b8c0:	d10d      	bne.n	806b8de <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 806b8c2:	693b      	ldr	r3, [r7, #16]
 806b8c4:	691b      	ldr	r3, [r3, #16]
 806b8c6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 806b8c8:	69bb      	ldr	r3, [r7, #24]
 806b8ca:	2b00      	cmp	r3, #0
 806b8cc:	d004      	beq.n	806b8d8 <create_chain+0x2c>
 806b8ce:	693b      	ldr	r3, [r7, #16]
 806b8d0:	699b      	ldr	r3, [r3, #24]
 806b8d2:	69ba      	ldr	r2, [r7, #24]
 806b8d4:	429a      	cmp	r2, r3
 806b8d6:	d31b      	bcc.n	806b910 <create_chain+0x64>
 806b8d8:	2301      	movs	r3, #1
 806b8da:	61bb      	str	r3, [r7, #24]
 806b8dc:	e018      	b.n	806b910 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 806b8de:	6839      	ldr	r1, [r7, #0]
 806b8e0:	6878      	ldr	r0, [r7, #4]
 806b8e2:	f7ff fdea 	bl	806b4ba <get_fat>
 806b8e6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 806b8e8:	68fb      	ldr	r3, [r7, #12]
 806b8ea:	2b01      	cmp	r3, #1
 806b8ec:	d801      	bhi.n	806b8f2 <create_chain+0x46>
 806b8ee:	2301      	movs	r3, #1
 806b8f0:	e070      	b.n	806b9d4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 806b8f2:	68fb      	ldr	r3, [r7, #12]
 806b8f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806b8f8:	d101      	bne.n	806b8fe <create_chain+0x52>
 806b8fa:	68fb      	ldr	r3, [r7, #12]
 806b8fc:	e06a      	b.n	806b9d4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 806b8fe:	693b      	ldr	r3, [r7, #16]
 806b900:	699b      	ldr	r3, [r3, #24]
 806b902:	68fa      	ldr	r2, [r7, #12]
 806b904:	429a      	cmp	r2, r3
 806b906:	d201      	bcs.n	806b90c <create_chain+0x60>
 806b908:	68fb      	ldr	r3, [r7, #12]
 806b90a:	e063      	b.n	806b9d4 <create_chain+0x128>
		scl = clst;
 806b90c:	683b      	ldr	r3, [r7, #0]
 806b90e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 806b910:	69bb      	ldr	r3, [r7, #24]
 806b912:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 806b914:	69fb      	ldr	r3, [r7, #28]
 806b916:	3301      	adds	r3, #1
 806b918:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 806b91a:	693b      	ldr	r3, [r7, #16]
 806b91c:	699b      	ldr	r3, [r3, #24]
 806b91e:	69fa      	ldr	r2, [r7, #28]
 806b920:	429a      	cmp	r2, r3
 806b922:	d307      	bcc.n	806b934 <create_chain+0x88>
				ncl = 2;
 806b924:	2302      	movs	r3, #2
 806b926:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 806b928:	69fa      	ldr	r2, [r7, #28]
 806b92a:	69bb      	ldr	r3, [r7, #24]
 806b92c:	429a      	cmp	r2, r3
 806b92e:	d901      	bls.n	806b934 <create_chain+0x88>
 806b930:	2300      	movs	r3, #0
 806b932:	e04f      	b.n	806b9d4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 806b934:	69f9      	ldr	r1, [r7, #28]
 806b936:	6878      	ldr	r0, [r7, #4]
 806b938:	f7ff fdbf 	bl	806b4ba <get_fat>
 806b93c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 806b93e:	68fb      	ldr	r3, [r7, #12]
 806b940:	2b00      	cmp	r3, #0
 806b942:	d00e      	beq.n	806b962 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 806b944:	68fb      	ldr	r3, [r7, #12]
 806b946:	2b01      	cmp	r3, #1
 806b948:	d003      	beq.n	806b952 <create_chain+0xa6>
 806b94a:	68fb      	ldr	r3, [r7, #12]
 806b94c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806b950:	d101      	bne.n	806b956 <create_chain+0xaa>
 806b952:	68fb      	ldr	r3, [r7, #12]
 806b954:	e03e      	b.n	806b9d4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 806b956:	69fa      	ldr	r2, [r7, #28]
 806b958:	69bb      	ldr	r3, [r7, #24]
 806b95a:	429a      	cmp	r2, r3
 806b95c:	d1da      	bne.n	806b914 <create_chain+0x68>
 806b95e:	2300      	movs	r3, #0
 806b960:	e038      	b.n	806b9d4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 806b962:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 806b964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806b968:	69f9      	ldr	r1, [r7, #28]
 806b96a:	6938      	ldr	r0, [r7, #16]
 806b96c:	f7ff fe4d 	bl	806b60a <put_fat>
 806b970:	4603      	mov	r3, r0
 806b972:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 806b974:	7dfb      	ldrb	r3, [r7, #23]
 806b976:	2b00      	cmp	r3, #0
 806b978:	d109      	bne.n	806b98e <create_chain+0xe2>
 806b97a:	683b      	ldr	r3, [r7, #0]
 806b97c:	2b00      	cmp	r3, #0
 806b97e:	d006      	beq.n	806b98e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 806b980:	69fa      	ldr	r2, [r7, #28]
 806b982:	6839      	ldr	r1, [r7, #0]
 806b984:	6938      	ldr	r0, [r7, #16]
 806b986:	f7ff fe40 	bl	806b60a <put_fat>
 806b98a:	4603      	mov	r3, r0
 806b98c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 806b98e:	7dfb      	ldrb	r3, [r7, #23]
 806b990:	2b00      	cmp	r3, #0
 806b992:	d116      	bne.n	806b9c2 <create_chain+0x116>
		fs->last_clst = ncl;
 806b994:	693b      	ldr	r3, [r7, #16]
 806b996:	69fa      	ldr	r2, [r7, #28]
 806b998:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 806b99a:	693b      	ldr	r3, [r7, #16]
 806b99c:	695a      	ldr	r2, [r3, #20]
 806b99e:	693b      	ldr	r3, [r7, #16]
 806b9a0:	699b      	ldr	r3, [r3, #24]
 806b9a2:	3b02      	subs	r3, #2
 806b9a4:	429a      	cmp	r2, r3
 806b9a6:	d804      	bhi.n	806b9b2 <create_chain+0x106>
 806b9a8:	693b      	ldr	r3, [r7, #16]
 806b9aa:	695b      	ldr	r3, [r3, #20]
 806b9ac:	1e5a      	subs	r2, r3, #1
 806b9ae:	693b      	ldr	r3, [r7, #16]
 806b9b0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 806b9b2:	693b      	ldr	r3, [r7, #16]
 806b9b4:	791b      	ldrb	r3, [r3, #4]
 806b9b6:	f043 0301 	orr.w	r3, r3, #1
 806b9ba:	b2da      	uxtb	r2, r3
 806b9bc:	693b      	ldr	r3, [r7, #16]
 806b9be:	711a      	strb	r2, [r3, #4]
 806b9c0:	e007      	b.n	806b9d2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 806b9c2:	7dfb      	ldrb	r3, [r7, #23]
 806b9c4:	2b01      	cmp	r3, #1
 806b9c6:	d102      	bne.n	806b9ce <create_chain+0x122>
 806b9c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806b9cc:	e000      	b.n	806b9d0 <create_chain+0x124>
 806b9ce:	2301      	movs	r3, #1
 806b9d0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 806b9d2:	69fb      	ldr	r3, [r7, #28]
}
 806b9d4:	4618      	mov	r0, r3
 806b9d6:	3720      	adds	r7, #32
 806b9d8:	46bd      	mov	sp, r7
 806b9da:	bd80      	pop	{r7, pc}

0806b9dc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 806b9dc:	b480      	push	{r7}
 806b9de:	b087      	sub	sp, #28
 806b9e0:	af00      	add	r7, sp, #0
 806b9e2:	6078      	str	r0, [r7, #4]
 806b9e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 806b9e6:	687b      	ldr	r3, [r7, #4]
 806b9e8:	681b      	ldr	r3, [r3, #0]
 806b9ea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 806b9ec:	687b      	ldr	r3, [r7, #4]
 806b9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806b9f0:	3304      	adds	r3, #4
 806b9f2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 806b9f4:	683b      	ldr	r3, [r7, #0]
 806b9f6:	0a5b      	lsrs	r3, r3, #9
 806b9f8:	68fa      	ldr	r2, [r7, #12]
 806b9fa:	8952      	ldrh	r2, [r2, #10]
 806b9fc:	fbb3 f3f2 	udiv	r3, r3, r2
 806ba00:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 806ba02:	693b      	ldr	r3, [r7, #16]
 806ba04:	1d1a      	adds	r2, r3, #4
 806ba06:	613a      	str	r2, [r7, #16]
 806ba08:	681b      	ldr	r3, [r3, #0]
 806ba0a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 806ba0c:	68bb      	ldr	r3, [r7, #8]
 806ba0e:	2b00      	cmp	r3, #0
 806ba10:	d101      	bne.n	806ba16 <clmt_clust+0x3a>
 806ba12:	2300      	movs	r3, #0
 806ba14:	e010      	b.n	806ba38 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 806ba16:	697a      	ldr	r2, [r7, #20]
 806ba18:	68bb      	ldr	r3, [r7, #8]
 806ba1a:	429a      	cmp	r2, r3
 806ba1c:	d307      	bcc.n	806ba2e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 806ba1e:	697a      	ldr	r2, [r7, #20]
 806ba20:	68bb      	ldr	r3, [r7, #8]
 806ba22:	1ad3      	subs	r3, r2, r3
 806ba24:	617b      	str	r3, [r7, #20]
 806ba26:	693b      	ldr	r3, [r7, #16]
 806ba28:	3304      	adds	r3, #4
 806ba2a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 806ba2c:	e7e9      	b.n	806ba02 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 806ba2e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 806ba30:	693b      	ldr	r3, [r7, #16]
 806ba32:	681a      	ldr	r2, [r3, #0]
 806ba34:	697b      	ldr	r3, [r7, #20]
 806ba36:	4413      	add	r3, r2
}
 806ba38:	4618      	mov	r0, r3
 806ba3a:	371c      	adds	r7, #28
 806ba3c:	46bd      	mov	sp, r7
 806ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ba42:	4770      	bx	lr

0806ba44 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 806ba44:	b580      	push	{r7, lr}
 806ba46:	b086      	sub	sp, #24
 806ba48:	af00      	add	r7, sp, #0
 806ba4a:	6078      	str	r0, [r7, #4]
 806ba4c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 806ba4e:	687b      	ldr	r3, [r7, #4]
 806ba50:	681b      	ldr	r3, [r3, #0]
 806ba52:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 806ba54:	683b      	ldr	r3, [r7, #0]
 806ba56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 806ba5a:	d204      	bcs.n	806ba66 <dir_sdi+0x22>
 806ba5c:	683b      	ldr	r3, [r7, #0]
 806ba5e:	f003 031f 	and.w	r3, r3, #31
 806ba62:	2b00      	cmp	r3, #0
 806ba64:	d001      	beq.n	806ba6a <dir_sdi+0x26>
		return FR_INT_ERR;
 806ba66:	2302      	movs	r3, #2
 806ba68:	e063      	b.n	806bb32 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 806ba6a:	687b      	ldr	r3, [r7, #4]
 806ba6c:	683a      	ldr	r2, [r7, #0]
 806ba6e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 806ba70:	687b      	ldr	r3, [r7, #4]
 806ba72:	689b      	ldr	r3, [r3, #8]
 806ba74:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 806ba76:	697b      	ldr	r3, [r7, #20]
 806ba78:	2b00      	cmp	r3, #0
 806ba7a:	d106      	bne.n	806ba8a <dir_sdi+0x46>
 806ba7c:	693b      	ldr	r3, [r7, #16]
 806ba7e:	781b      	ldrb	r3, [r3, #0]
 806ba80:	2b02      	cmp	r3, #2
 806ba82:	d902      	bls.n	806ba8a <dir_sdi+0x46>
		clst = fs->dirbase;
 806ba84:	693b      	ldr	r3, [r7, #16]
 806ba86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806ba88:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 806ba8a:	697b      	ldr	r3, [r7, #20]
 806ba8c:	2b00      	cmp	r3, #0
 806ba8e:	d10c      	bne.n	806baaa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 806ba90:	683b      	ldr	r3, [r7, #0]
 806ba92:	095b      	lsrs	r3, r3, #5
 806ba94:	693a      	ldr	r2, [r7, #16]
 806ba96:	8912      	ldrh	r2, [r2, #8]
 806ba98:	4293      	cmp	r3, r2
 806ba9a:	d301      	bcc.n	806baa0 <dir_sdi+0x5c>
 806ba9c:	2302      	movs	r3, #2
 806ba9e:	e048      	b.n	806bb32 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 806baa0:	693b      	ldr	r3, [r7, #16]
 806baa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 806baa4:	687b      	ldr	r3, [r7, #4]
 806baa6:	61da      	str	r2, [r3, #28]
 806baa8:	e029      	b.n	806bafe <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 806baaa:	693b      	ldr	r3, [r7, #16]
 806baac:	895b      	ldrh	r3, [r3, #10]
 806baae:	025b      	lsls	r3, r3, #9
 806bab0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 806bab2:	e019      	b.n	806bae8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 806bab4:	687b      	ldr	r3, [r7, #4]
 806bab6:	6979      	ldr	r1, [r7, #20]
 806bab8:	4618      	mov	r0, r3
 806baba:	f7ff fcfe 	bl	806b4ba <get_fat>
 806babe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 806bac0:	697b      	ldr	r3, [r7, #20]
 806bac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806bac6:	d101      	bne.n	806bacc <dir_sdi+0x88>
 806bac8:	2301      	movs	r3, #1
 806baca:	e032      	b.n	806bb32 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 806bacc:	697b      	ldr	r3, [r7, #20]
 806bace:	2b01      	cmp	r3, #1
 806bad0:	d904      	bls.n	806badc <dir_sdi+0x98>
 806bad2:	693b      	ldr	r3, [r7, #16]
 806bad4:	699b      	ldr	r3, [r3, #24]
 806bad6:	697a      	ldr	r2, [r7, #20]
 806bad8:	429a      	cmp	r2, r3
 806bada:	d301      	bcc.n	806bae0 <dir_sdi+0x9c>
 806badc:	2302      	movs	r3, #2
 806bade:	e028      	b.n	806bb32 <dir_sdi+0xee>
			ofs -= csz;
 806bae0:	683a      	ldr	r2, [r7, #0]
 806bae2:	68fb      	ldr	r3, [r7, #12]
 806bae4:	1ad3      	subs	r3, r2, r3
 806bae6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 806bae8:	683a      	ldr	r2, [r7, #0]
 806baea:	68fb      	ldr	r3, [r7, #12]
 806baec:	429a      	cmp	r2, r3
 806baee:	d2e1      	bcs.n	806bab4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 806baf0:	6979      	ldr	r1, [r7, #20]
 806baf2:	6938      	ldr	r0, [r7, #16]
 806baf4:	f7ff fcc2 	bl	806b47c <clust2sect>
 806baf8:	4602      	mov	r2, r0
 806bafa:	687b      	ldr	r3, [r7, #4]
 806bafc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 806bafe:	687b      	ldr	r3, [r7, #4]
 806bb00:	697a      	ldr	r2, [r7, #20]
 806bb02:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 806bb04:	687b      	ldr	r3, [r7, #4]
 806bb06:	69db      	ldr	r3, [r3, #28]
 806bb08:	2b00      	cmp	r3, #0
 806bb0a:	d101      	bne.n	806bb10 <dir_sdi+0xcc>
 806bb0c:	2302      	movs	r3, #2
 806bb0e:	e010      	b.n	806bb32 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 806bb10:	687b      	ldr	r3, [r7, #4]
 806bb12:	69da      	ldr	r2, [r3, #28]
 806bb14:	683b      	ldr	r3, [r7, #0]
 806bb16:	0a5b      	lsrs	r3, r3, #9
 806bb18:	441a      	add	r2, r3
 806bb1a:	687b      	ldr	r3, [r7, #4]
 806bb1c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 806bb1e:	693b      	ldr	r3, [r7, #16]
 806bb20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bb24:	683b      	ldr	r3, [r7, #0]
 806bb26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bb2a:	441a      	add	r2, r3
 806bb2c:	687b      	ldr	r3, [r7, #4]
 806bb2e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 806bb30:	2300      	movs	r3, #0
}
 806bb32:	4618      	mov	r0, r3
 806bb34:	3718      	adds	r7, #24
 806bb36:	46bd      	mov	sp, r7
 806bb38:	bd80      	pop	{r7, pc}

0806bb3a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 806bb3a:	b580      	push	{r7, lr}
 806bb3c:	b086      	sub	sp, #24
 806bb3e:	af00      	add	r7, sp, #0
 806bb40:	6078      	str	r0, [r7, #4]
 806bb42:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 806bb44:	687b      	ldr	r3, [r7, #4]
 806bb46:	681b      	ldr	r3, [r3, #0]
 806bb48:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 806bb4a:	687b      	ldr	r3, [r7, #4]
 806bb4c:	695b      	ldr	r3, [r3, #20]
 806bb4e:	3320      	adds	r3, #32
 806bb50:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 806bb52:	687b      	ldr	r3, [r7, #4]
 806bb54:	69db      	ldr	r3, [r3, #28]
 806bb56:	2b00      	cmp	r3, #0
 806bb58:	d003      	beq.n	806bb62 <dir_next+0x28>
 806bb5a:	68bb      	ldr	r3, [r7, #8]
 806bb5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 806bb60:	d301      	bcc.n	806bb66 <dir_next+0x2c>
 806bb62:	2304      	movs	r3, #4
 806bb64:	e0aa      	b.n	806bcbc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 806bb66:	68bb      	ldr	r3, [r7, #8]
 806bb68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bb6c:	2b00      	cmp	r3, #0
 806bb6e:	f040 8098 	bne.w	806bca2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 806bb72:	687b      	ldr	r3, [r7, #4]
 806bb74:	69db      	ldr	r3, [r3, #28]
 806bb76:	1c5a      	adds	r2, r3, #1
 806bb78:	687b      	ldr	r3, [r7, #4]
 806bb7a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 806bb7c:	687b      	ldr	r3, [r7, #4]
 806bb7e:	699b      	ldr	r3, [r3, #24]
 806bb80:	2b00      	cmp	r3, #0
 806bb82:	d10b      	bne.n	806bb9c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 806bb84:	68bb      	ldr	r3, [r7, #8]
 806bb86:	095b      	lsrs	r3, r3, #5
 806bb88:	68fa      	ldr	r2, [r7, #12]
 806bb8a:	8912      	ldrh	r2, [r2, #8]
 806bb8c:	4293      	cmp	r3, r2
 806bb8e:	f0c0 8088 	bcc.w	806bca2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 806bb92:	687b      	ldr	r3, [r7, #4]
 806bb94:	2200      	movs	r2, #0
 806bb96:	61da      	str	r2, [r3, #28]
 806bb98:	2304      	movs	r3, #4
 806bb9a:	e08f      	b.n	806bcbc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 806bb9c:	68bb      	ldr	r3, [r7, #8]
 806bb9e:	0a5b      	lsrs	r3, r3, #9
 806bba0:	68fa      	ldr	r2, [r7, #12]
 806bba2:	8952      	ldrh	r2, [r2, #10]
 806bba4:	3a01      	subs	r2, #1
 806bba6:	4013      	ands	r3, r2
 806bba8:	2b00      	cmp	r3, #0
 806bbaa:	d17a      	bne.n	806bca2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 806bbac:	687a      	ldr	r2, [r7, #4]
 806bbae:	687b      	ldr	r3, [r7, #4]
 806bbb0:	699b      	ldr	r3, [r3, #24]
 806bbb2:	4619      	mov	r1, r3
 806bbb4:	4610      	mov	r0, r2
 806bbb6:	f7ff fc80 	bl	806b4ba <get_fat>
 806bbba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 806bbbc:	697b      	ldr	r3, [r7, #20]
 806bbbe:	2b01      	cmp	r3, #1
 806bbc0:	d801      	bhi.n	806bbc6 <dir_next+0x8c>
 806bbc2:	2302      	movs	r3, #2
 806bbc4:	e07a      	b.n	806bcbc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 806bbc6:	697b      	ldr	r3, [r7, #20]
 806bbc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806bbcc:	d101      	bne.n	806bbd2 <dir_next+0x98>
 806bbce:	2301      	movs	r3, #1
 806bbd0:	e074      	b.n	806bcbc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 806bbd2:	68fb      	ldr	r3, [r7, #12]
 806bbd4:	699b      	ldr	r3, [r3, #24]
 806bbd6:	697a      	ldr	r2, [r7, #20]
 806bbd8:	429a      	cmp	r2, r3
 806bbda:	d358      	bcc.n	806bc8e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 806bbdc:	683b      	ldr	r3, [r7, #0]
 806bbde:	2b00      	cmp	r3, #0
 806bbe0:	d104      	bne.n	806bbec <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 806bbe2:	687b      	ldr	r3, [r7, #4]
 806bbe4:	2200      	movs	r2, #0
 806bbe6:	61da      	str	r2, [r3, #28]
 806bbe8:	2304      	movs	r3, #4
 806bbea:	e067      	b.n	806bcbc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 806bbec:	687a      	ldr	r2, [r7, #4]
 806bbee:	687b      	ldr	r3, [r7, #4]
 806bbf0:	699b      	ldr	r3, [r3, #24]
 806bbf2:	4619      	mov	r1, r3
 806bbf4:	4610      	mov	r0, r2
 806bbf6:	f7ff fe59 	bl	806b8ac <create_chain>
 806bbfa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 806bbfc:	697b      	ldr	r3, [r7, #20]
 806bbfe:	2b00      	cmp	r3, #0
 806bc00:	d101      	bne.n	806bc06 <dir_next+0xcc>
 806bc02:	2307      	movs	r3, #7
 806bc04:	e05a      	b.n	806bcbc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 806bc06:	697b      	ldr	r3, [r7, #20]
 806bc08:	2b01      	cmp	r3, #1
 806bc0a:	d101      	bne.n	806bc10 <dir_next+0xd6>
 806bc0c:	2302      	movs	r3, #2
 806bc0e:	e055      	b.n	806bcbc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 806bc10:	697b      	ldr	r3, [r7, #20]
 806bc12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806bc16:	d101      	bne.n	806bc1c <dir_next+0xe2>
 806bc18:	2301      	movs	r3, #1
 806bc1a:	e04f      	b.n	806bcbc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 806bc1c:	68f8      	ldr	r0, [r7, #12]
 806bc1e:	f7ff fb4d 	bl	806b2bc <sync_window>
 806bc22:	4603      	mov	r3, r0
 806bc24:	2b00      	cmp	r3, #0
 806bc26:	d001      	beq.n	806bc2c <dir_next+0xf2>
 806bc28:	2301      	movs	r3, #1
 806bc2a:	e047      	b.n	806bcbc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 806bc2c:	68fb      	ldr	r3, [r7, #12]
 806bc2e:	3334      	adds	r3, #52	; 0x34
 806bc30:	f44f 7200 	mov.w	r2, #512	; 0x200
 806bc34:	2100      	movs	r1, #0
 806bc36:	4618      	mov	r0, r3
 806bc38:	f7ff f945 	bl	806aec6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 806bc3c:	2300      	movs	r3, #0
 806bc3e:	613b      	str	r3, [r7, #16]
 806bc40:	6979      	ldr	r1, [r7, #20]
 806bc42:	68f8      	ldr	r0, [r7, #12]
 806bc44:	f7ff fc1a 	bl	806b47c <clust2sect>
 806bc48:	4602      	mov	r2, r0
 806bc4a:	68fb      	ldr	r3, [r7, #12]
 806bc4c:	631a      	str	r2, [r3, #48]	; 0x30
 806bc4e:	e012      	b.n	806bc76 <dir_next+0x13c>
						fs->wflag = 1;
 806bc50:	68fb      	ldr	r3, [r7, #12]
 806bc52:	2201      	movs	r2, #1
 806bc54:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 806bc56:	68f8      	ldr	r0, [r7, #12]
 806bc58:	f7ff fb30 	bl	806b2bc <sync_window>
 806bc5c:	4603      	mov	r3, r0
 806bc5e:	2b00      	cmp	r3, #0
 806bc60:	d001      	beq.n	806bc66 <dir_next+0x12c>
 806bc62:	2301      	movs	r3, #1
 806bc64:	e02a      	b.n	806bcbc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 806bc66:	693b      	ldr	r3, [r7, #16]
 806bc68:	3301      	adds	r3, #1
 806bc6a:	613b      	str	r3, [r7, #16]
 806bc6c:	68fb      	ldr	r3, [r7, #12]
 806bc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806bc70:	1c5a      	adds	r2, r3, #1
 806bc72:	68fb      	ldr	r3, [r7, #12]
 806bc74:	631a      	str	r2, [r3, #48]	; 0x30
 806bc76:	68fb      	ldr	r3, [r7, #12]
 806bc78:	895b      	ldrh	r3, [r3, #10]
 806bc7a:	461a      	mov	r2, r3
 806bc7c:	693b      	ldr	r3, [r7, #16]
 806bc7e:	4293      	cmp	r3, r2
 806bc80:	d3e6      	bcc.n	806bc50 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 806bc82:	68fb      	ldr	r3, [r7, #12]
 806bc84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806bc86:	693b      	ldr	r3, [r7, #16]
 806bc88:	1ad2      	subs	r2, r2, r3
 806bc8a:	68fb      	ldr	r3, [r7, #12]
 806bc8c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 806bc8e:	687b      	ldr	r3, [r7, #4]
 806bc90:	697a      	ldr	r2, [r7, #20]
 806bc92:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 806bc94:	6979      	ldr	r1, [r7, #20]
 806bc96:	68f8      	ldr	r0, [r7, #12]
 806bc98:	f7ff fbf0 	bl	806b47c <clust2sect>
 806bc9c:	4602      	mov	r2, r0
 806bc9e:	687b      	ldr	r3, [r7, #4]
 806bca0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 806bca2:	687b      	ldr	r3, [r7, #4]
 806bca4:	68ba      	ldr	r2, [r7, #8]
 806bca6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 806bca8:	68fb      	ldr	r3, [r7, #12]
 806bcaa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bcae:	68bb      	ldr	r3, [r7, #8]
 806bcb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bcb4:	441a      	add	r2, r3
 806bcb6:	687b      	ldr	r3, [r7, #4]
 806bcb8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 806bcba:	2300      	movs	r3, #0
}
 806bcbc:	4618      	mov	r0, r3
 806bcbe:	3718      	adds	r7, #24
 806bcc0:	46bd      	mov	sp, r7
 806bcc2:	bd80      	pop	{r7, pc}

0806bcc4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 806bcc4:	b580      	push	{r7, lr}
 806bcc6:	b086      	sub	sp, #24
 806bcc8:	af00      	add	r7, sp, #0
 806bcca:	6078      	str	r0, [r7, #4]
 806bccc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 806bcce:	687b      	ldr	r3, [r7, #4]
 806bcd0:	681b      	ldr	r3, [r3, #0]
 806bcd2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 806bcd4:	2100      	movs	r1, #0
 806bcd6:	6878      	ldr	r0, [r7, #4]
 806bcd8:	f7ff feb4 	bl	806ba44 <dir_sdi>
 806bcdc:	4603      	mov	r3, r0
 806bcde:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 806bce0:	7dfb      	ldrb	r3, [r7, #23]
 806bce2:	2b00      	cmp	r3, #0
 806bce4:	d12b      	bne.n	806bd3e <dir_alloc+0x7a>
		n = 0;
 806bce6:	2300      	movs	r3, #0
 806bce8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 806bcea:	687b      	ldr	r3, [r7, #4]
 806bcec:	69db      	ldr	r3, [r3, #28]
 806bcee:	4619      	mov	r1, r3
 806bcf0:	68f8      	ldr	r0, [r7, #12]
 806bcf2:	f7ff fb27 	bl	806b344 <move_window>
 806bcf6:	4603      	mov	r3, r0
 806bcf8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 806bcfa:	7dfb      	ldrb	r3, [r7, #23]
 806bcfc:	2b00      	cmp	r3, #0
 806bcfe:	d11d      	bne.n	806bd3c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 806bd00:	687b      	ldr	r3, [r7, #4]
 806bd02:	6a1b      	ldr	r3, [r3, #32]
 806bd04:	781b      	ldrb	r3, [r3, #0]
 806bd06:	2be5      	cmp	r3, #229	; 0xe5
 806bd08:	d004      	beq.n	806bd14 <dir_alloc+0x50>
 806bd0a:	687b      	ldr	r3, [r7, #4]
 806bd0c:	6a1b      	ldr	r3, [r3, #32]
 806bd0e:	781b      	ldrb	r3, [r3, #0]
 806bd10:	2b00      	cmp	r3, #0
 806bd12:	d107      	bne.n	806bd24 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 806bd14:	693b      	ldr	r3, [r7, #16]
 806bd16:	3301      	adds	r3, #1
 806bd18:	613b      	str	r3, [r7, #16]
 806bd1a:	693a      	ldr	r2, [r7, #16]
 806bd1c:	683b      	ldr	r3, [r7, #0]
 806bd1e:	429a      	cmp	r2, r3
 806bd20:	d102      	bne.n	806bd28 <dir_alloc+0x64>
 806bd22:	e00c      	b.n	806bd3e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 806bd24:	2300      	movs	r3, #0
 806bd26:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 806bd28:	2101      	movs	r1, #1
 806bd2a:	6878      	ldr	r0, [r7, #4]
 806bd2c:	f7ff ff05 	bl	806bb3a <dir_next>
 806bd30:	4603      	mov	r3, r0
 806bd32:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 806bd34:	7dfb      	ldrb	r3, [r7, #23]
 806bd36:	2b00      	cmp	r3, #0
 806bd38:	d0d7      	beq.n	806bcea <dir_alloc+0x26>
 806bd3a:	e000      	b.n	806bd3e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 806bd3c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 806bd3e:	7dfb      	ldrb	r3, [r7, #23]
 806bd40:	2b04      	cmp	r3, #4
 806bd42:	d101      	bne.n	806bd48 <dir_alloc+0x84>
 806bd44:	2307      	movs	r3, #7
 806bd46:	75fb      	strb	r3, [r7, #23]
	return res;
 806bd48:	7dfb      	ldrb	r3, [r7, #23]
}
 806bd4a:	4618      	mov	r0, r3
 806bd4c:	3718      	adds	r7, #24
 806bd4e:	46bd      	mov	sp, r7
 806bd50:	bd80      	pop	{r7, pc}

0806bd52 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 806bd52:	b580      	push	{r7, lr}
 806bd54:	b084      	sub	sp, #16
 806bd56:	af00      	add	r7, sp, #0
 806bd58:	6078      	str	r0, [r7, #4]
 806bd5a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 806bd5c:	683b      	ldr	r3, [r7, #0]
 806bd5e:	331a      	adds	r3, #26
 806bd60:	4618      	mov	r0, r3
 806bd62:	f7ff f80d 	bl	806ad80 <ld_word>
 806bd66:	4603      	mov	r3, r0
 806bd68:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 806bd6a:	687b      	ldr	r3, [r7, #4]
 806bd6c:	781b      	ldrb	r3, [r3, #0]
 806bd6e:	2b03      	cmp	r3, #3
 806bd70:	d109      	bne.n	806bd86 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 806bd72:	683b      	ldr	r3, [r7, #0]
 806bd74:	3314      	adds	r3, #20
 806bd76:	4618      	mov	r0, r3
 806bd78:	f7ff f802 	bl	806ad80 <ld_word>
 806bd7c:	4603      	mov	r3, r0
 806bd7e:	041b      	lsls	r3, r3, #16
 806bd80:	68fa      	ldr	r2, [r7, #12]
 806bd82:	4313      	orrs	r3, r2
 806bd84:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 806bd86:	68fb      	ldr	r3, [r7, #12]
}
 806bd88:	4618      	mov	r0, r3
 806bd8a:	3710      	adds	r7, #16
 806bd8c:	46bd      	mov	sp, r7
 806bd8e:	bd80      	pop	{r7, pc}

0806bd90 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 806bd90:	b580      	push	{r7, lr}
 806bd92:	b084      	sub	sp, #16
 806bd94:	af00      	add	r7, sp, #0
 806bd96:	60f8      	str	r0, [r7, #12]
 806bd98:	60b9      	str	r1, [r7, #8]
 806bd9a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 806bd9c:	68bb      	ldr	r3, [r7, #8]
 806bd9e:	331a      	adds	r3, #26
 806bda0:	687a      	ldr	r2, [r7, #4]
 806bda2:	b292      	uxth	r2, r2
 806bda4:	4611      	mov	r1, r2
 806bda6:	4618      	mov	r0, r3
 806bda8:	f7ff f825 	bl	806adf6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 806bdac:	68fb      	ldr	r3, [r7, #12]
 806bdae:	781b      	ldrb	r3, [r3, #0]
 806bdb0:	2b03      	cmp	r3, #3
 806bdb2:	d109      	bne.n	806bdc8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 806bdb4:	68bb      	ldr	r3, [r7, #8]
 806bdb6:	f103 0214 	add.w	r2, r3, #20
 806bdba:	687b      	ldr	r3, [r7, #4]
 806bdbc:	0c1b      	lsrs	r3, r3, #16
 806bdbe:	b29b      	uxth	r3, r3
 806bdc0:	4619      	mov	r1, r3
 806bdc2:	4610      	mov	r0, r2
 806bdc4:	f7ff f817 	bl	806adf6 <st_word>
	}
}
 806bdc8:	bf00      	nop
 806bdca:	3710      	adds	r7, #16
 806bdcc:	46bd      	mov	sp, r7
 806bdce:	bd80      	pop	{r7, pc}

0806bdd0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 806bdd0:	b580      	push	{r7, lr}
 806bdd2:	b086      	sub	sp, #24
 806bdd4:	af00      	add	r7, sp, #0
 806bdd6:	6078      	str	r0, [r7, #4]
 806bdd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 806bdda:	2304      	movs	r3, #4
 806bddc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 806bdde:	687b      	ldr	r3, [r7, #4]
 806bde0:	681b      	ldr	r3, [r3, #0]
 806bde2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 806bde4:	e03c      	b.n	806be60 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 806bde6:	687b      	ldr	r3, [r7, #4]
 806bde8:	69db      	ldr	r3, [r3, #28]
 806bdea:	4619      	mov	r1, r3
 806bdec:	6938      	ldr	r0, [r7, #16]
 806bdee:	f7ff faa9 	bl	806b344 <move_window>
 806bdf2:	4603      	mov	r3, r0
 806bdf4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 806bdf6:	7dfb      	ldrb	r3, [r7, #23]
 806bdf8:	2b00      	cmp	r3, #0
 806bdfa:	d136      	bne.n	806be6a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 806bdfc:	687b      	ldr	r3, [r7, #4]
 806bdfe:	6a1b      	ldr	r3, [r3, #32]
 806be00:	781b      	ldrb	r3, [r3, #0]
 806be02:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 806be04:	7bfb      	ldrb	r3, [r7, #15]
 806be06:	2b00      	cmp	r3, #0
 806be08:	d102      	bne.n	806be10 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 806be0a:	2304      	movs	r3, #4
 806be0c:	75fb      	strb	r3, [r7, #23]
 806be0e:	e031      	b.n	806be74 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 806be10:	687b      	ldr	r3, [r7, #4]
 806be12:	6a1b      	ldr	r3, [r3, #32]
 806be14:	330b      	adds	r3, #11
 806be16:	781b      	ldrb	r3, [r3, #0]
 806be18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 806be1c:	73bb      	strb	r3, [r7, #14]
 806be1e:	687b      	ldr	r3, [r7, #4]
 806be20:	7bba      	ldrb	r2, [r7, #14]
 806be22:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 806be24:	7bfb      	ldrb	r3, [r7, #15]
 806be26:	2be5      	cmp	r3, #229	; 0xe5
 806be28:	d011      	beq.n	806be4e <dir_read+0x7e>
 806be2a:	7bfb      	ldrb	r3, [r7, #15]
 806be2c:	2b2e      	cmp	r3, #46	; 0x2e
 806be2e:	d00e      	beq.n	806be4e <dir_read+0x7e>
 806be30:	7bbb      	ldrb	r3, [r7, #14]
 806be32:	2b0f      	cmp	r3, #15
 806be34:	d00b      	beq.n	806be4e <dir_read+0x7e>
 806be36:	7bbb      	ldrb	r3, [r7, #14]
 806be38:	f023 0320 	bic.w	r3, r3, #32
 806be3c:	2b08      	cmp	r3, #8
 806be3e:	bf0c      	ite	eq
 806be40:	2301      	moveq	r3, #1
 806be42:	2300      	movne	r3, #0
 806be44:	b2db      	uxtb	r3, r3
 806be46:	461a      	mov	r2, r3
 806be48:	683b      	ldr	r3, [r7, #0]
 806be4a:	4293      	cmp	r3, r2
 806be4c:	d00f      	beq.n	806be6e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 806be4e:	2100      	movs	r1, #0
 806be50:	6878      	ldr	r0, [r7, #4]
 806be52:	f7ff fe72 	bl	806bb3a <dir_next>
 806be56:	4603      	mov	r3, r0
 806be58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 806be5a:	7dfb      	ldrb	r3, [r7, #23]
 806be5c:	2b00      	cmp	r3, #0
 806be5e:	d108      	bne.n	806be72 <dir_read+0xa2>
	while (dp->sect) {
 806be60:	687b      	ldr	r3, [r7, #4]
 806be62:	69db      	ldr	r3, [r3, #28]
 806be64:	2b00      	cmp	r3, #0
 806be66:	d1be      	bne.n	806bde6 <dir_read+0x16>
 806be68:	e004      	b.n	806be74 <dir_read+0xa4>
		if (res != FR_OK) break;
 806be6a:	bf00      	nop
 806be6c:	e002      	b.n	806be74 <dir_read+0xa4>
				break;
 806be6e:	bf00      	nop
 806be70:	e000      	b.n	806be74 <dir_read+0xa4>
		if (res != FR_OK) break;
 806be72:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 806be74:	7dfb      	ldrb	r3, [r7, #23]
 806be76:	2b00      	cmp	r3, #0
 806be78:	d002      	beq.n	806be80 <dir_read+0xb0>
 806be7a:	687b      	ldr	r3, [r7, #4]
 806be7c:	2200      	movs	r2, #0
 806be7e:	61da      	str	r2, [r3, #28]
	return res;
 806be80:	7dfb      	ldrb	r3, [r7, #23]
}
 806be82:	4618      	mov	r0, r3
 806be84:	3718      	adds	r7, #24
 806be86:	46bd      	mov	sp, r7
 806be88:	bd80      	pop	{r7, pc}

0806be8a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 806be8a:	b580      	push	{r7, lr}
 806be8c:	b086      	sub	sp, #24
 806be8e:	af00      	add	r7, sp, #0
 806be90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 806be92:	687b      	ldr	r3, [r7, #4]
 806be94:	681b      	ldr	r3, [r3, #0]
 806be96:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 806be98:	2100      	movs	r1, #0
 806be9a:	6878      	ldr	r0, [r7, #4]
 806be9c:	f7ff fdd2 	bl	806ba44 <dir_sdi>
 806bea0:	4603      	mov	r3, r0
 806bea2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 806bea4:	7dfb      	ldrb	r3, [r7, #23]
 806bea6:	2b00      	cmp	r3, #0
 806bea8:	d001      	beq.n	806beae <dir_find+0x24>
 806beaa:	7dfb      	ldrb	r3, [r7, #23]
 806beac:	e03e      	b.n	806bf2c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 806beae:	687b      	ldr	r3, [r7, #4]
 806beb0:	69db      	ldr	r3, [r3, #28]
 806beb2:	4619      	mov	r1, r3
 806beb4:	6938      	ldr	r0, [r7, #16]
 806beb6:	f7ff fa45 	bl	806b344 <move_window>
 806beba:	4603      	mov	r3, r0
 806bebc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 806bebe:	7dfb      	ldrb	r3, [r7, #23]
 806bec0:	2b00      	cmp	r3, #0
 806bec2:	d12f      	bne.n	806bf24 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 806bec4:	687b      	ldr	r3, [r7, #4]
 806bec6:	6a1b      	ldr	r3, [r3, #32]
 806bec8:	781b      	ldrb	r3, [r3, #0]
 806beca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 806becc:	7bfb      	ldrb	r3, [r7, #15]
 806bece:	2b00      	cmp	r3, #0
 806bed0:	d102      	bne.n	806bed8 <dir_find+0x4e>
 806bed2:	2304      	movs	r3, #4
 806bed4:	75fb      	strb	r3, [r7, #23]
 806bed6:	e028      	b.n	806bf2a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 806bed8:	687b      	ldr	r3, [r7, #4]
 806beda:	6a1b      	ldr	r3, [r3, #32]
 806bedc:	330b      	adds	r3, #11
 806bede:	781b      	ldrb	r3, [r3, #0]
 806bee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 806bee4:	b2da      	uxtb	r2, r3
 806bee6:	687b      	ldr	r3, [r7, #4]
 806bee8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 806beea:	687b      	ldr	r3, [r7, #4]
 806beec:	6a1b      	ldr	r3, [r3, #32]
 806beee:	330b      	adds	r3, #11
 806bef0:	781b      	ldrb	r3, [r3, #0]
 806bef2:	f003 0308 	and.w	r3, r3, #8
 806bef6:	2b00      	cmp	r3, #0
 806bef8:	d10a      	bne.n	806bf10 <dir_find+0x86>
 806befa:	687b      	ldr	r3, [r7, #4]
 806befc:	6a18      	ldr	r0, [r3, #32]
 806befe:	687b      	ldr	r3, [r7, #4]
 806bf00:	3324      	adds	r3, #36	; 0x24
 806bf02:	220b      	movs	r2, #11
 806bf04:	4619      	mov	r1, r3
 806bf06:	f7fe fff9 	bl	806aefc <mem_cmp>
 806bf0a:	4603      	mov	r3, r0
 806bf0c:	2b00      	cmp	r3, #0
 806bf0e:	d00b      	beq.n	806bf28 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 806bf10:	2100      	movs	r1, #0
 806bf12:	6878      	ldr	r0, [r7, #4]
 806bf14:	f7ff fe11 	bl	806bb3a <dir_next>
 806bf18:	4603      	mov	r3, r0
 806bf1a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 806bf1c:	7dfb      	ldrb	r3, [r7, #23]
 806bf1e:	2b00      	cmp	r3, #0
 806bf20:	d0c5      	beq.n	806beae <dir_find+0x24>
 806bf22:	e002      	b.n	806bf2a <dir_find+0xa0>
		if (res != FR_OK) break;
 806bf24:	bf00      	nop
 806bf26:	e000      	b.n	806bf2a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 806bf28:	bf00      	nop

	return res;
 806bf2a:	7dfb      	ldrb	r3, [r7, #23]
}
 806bf2c:	4618      	mov	r0, r3
 806bf2e:	3718      	adds	r7, #24
 806bf30:	46bd      	mov	sp, r7
 806bf32:	bd80      	pop	{r7, pc}

0806bf34 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 806bf34:	b580      	push	{r7, lr}
 806bf36:	b084      	sub	sp, #16
 806bf38:	af00      	add	r7, sp, #0
 806bf3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 806bf3c:	687b      	ldr	r3, [r7, #4]
 806bf3e:	681b      	ldr	r3, [r3, #0]
 806bf40:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 806bf42:	2101      	movs	r1, #1
 806bf44:	6878      	ldr	r0, [r7, #4]
 806bf46:	f7ff febd 	bl	806bcc4 <dir_alloc>
 806bf4a:	4603      	mov	r3, r0
 806bf4c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 806bf4e:	7bfb      	ldrb	r3, [r7, #15]
 806bf50:	2b00      	cmp	r3, #0
 806bf52:	d11c      	bne.n	806bf8e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 806bf54:	687b      	ldr	r3, [r7, #4]
 806bf56:	69db      	ldr	r3, [r3, #28]
 806bf58:	4619      	mov	r1, r3
 806bf5a:	68b8      	ldr	r0, [r7, #8]
 806bf5c:	f7ff f9f2 	bl	806b344 <move_window>
 806bf60:	4603      	mov	r3, r0
 806bf62:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 806bf64:	7bfb      	ldrb	r3, [r7, #15]
 806bf66:	2b00      	cmp	r3, #0
 806bf68:	d111      	bne.n	806bf8e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 806bf6a:	687b      	ldr	r3, [r7, #4]
 806bf6c:	6a1b      	ldr	r3, [r3, #32]
 806bf6e:	2220      	movs	r2, #32
 806bf70:	2100      	movs	r1, #0
 806bf72:	4618      	mov	r0, r3
 806bf74:	f7fe ffa7 	bl	806aec6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 806bf78:	687b      	ldr	r3, [r7, #4]
 806bf7a:	6a18      	ldr	r0, [r3, #32]
 806bf7c:	687b      	ldr	r3, [r7, #4]
 806bf7e:	3324      	adds	r3, #36	; 0x24
 806bf80:	220b      	movs	r2, #11
 806bf82:	4619      	mov	r1, r3
 806bf84:	f7fe ff7e 	bl	806ae84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 806bf88:	68bb      	ldr	r3, [r7, #8]
 806bf8a:	2201      	movs	r2, #1
 806bf8c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 806bf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 806bf90:	4618      	mov	r0, r3
 806bf92:	3710      	adds	r7, #16
 806bf94:	46bd      	mov	sp, r7
 806bf96:	bd80      	pop	{r7, pc}

0806bf98 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 806bf98:	b580      	push	{r7, lr}
 806bf9a:	b084      	sub	sp, #16
 806bf9c:	af00      	add	r7, sp, #0
 806bf9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 806bfa0:	687b      	ldr	r3, [r7, #4]
 806bfa2:	681b      	ldr	r3, [r3, #0]
 806bfa4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 806bfa6:	687b      	ldr	r3, [r7, #4]
 806bfa8:	69db      	ldr	r3, [r3, #28]
 806bfaa:	4619      	mov	r1, r3
 806bfac:	68f8      	ldr	r0, [r7, #12]
 806bfae:	f7ff f9c9 	bl	806b344 <move_window>
 806bfb2:	4603      	mov	r3, r0
 806bfb4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 806bfb6:	7afb      	ldrb	r3, [r7, #11]
 806bfb8:	2b00      	cmp	r3, #0
 806bfba:	d106      	bne.n	806bfca <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 806bfbc:	687b      	ldr	r3, [r7, #4]
 806bfbe:	6a1b      	ldr	r3, [r3, #32]
 806bfc0:	22e5      	movs	r2, #229	; 0xe5
 806bfc2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 806bfc4:	68fb      	ldr	r3, [r7, #12]
 806bfc6:	2201      	movs	r2, #1
 806bfc8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 806bfca:	7afb      	ldrb	r3, [r7, #11]
}
 806bfcc:	4618      	mov	r0, r3
 806bfce:	3710      	adds	r7, #16
 806bfd0:	46bd      	mov	sp, r7
 806bfd2:	bd80      	pop	{r7, pc}

0806bfd4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 806bfd4:	b580      	push	{r7, lr}
 806bfd6:	b088      	sub	sp, #32
 806bfd8:	af00      	add	r7, sp, #0
 806bfda:	6078      	str	r0, [r7, #4]
 806bfdc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 806bfde:	683b      	ldr	r3, [r7, #0]
 806bfe0:	681b      	ldr	r3, [r3, #0]
 806bfe2:	60fb      	str	r3, [r7, #12]
 806bfe4:	687b      	ldr	r3, [r7, #4]
 806bfe6:	3324      	adds	r3, #36	; 0x24
 806bfe8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 806bfea:	220b      	movs	r2, #11
 806bfec:	2120      	movs	r1, #32
 806bfee:	68b8      	ldr	r0, [r7, #8]
 806bff0:	f7fe ff69 	bl	806aec6 <mem_set>
	si = i = 0; ni = 8;
 806bff4:	2300      	movs	r3, #0
 806bff6:	613b      	str	r3, [r7, #16]
 806bff8:	693b      	ldr	r3, [r7, #16]
 806bffa:	61fb      	str	r3, [r7, #28]
 806bffc:	2308      	movs	r3, #8
 806bffe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 806c000:	69fb      	ldr	r3, [r7, #28]
 806c002:	1c5a      	adds	r2, r3, #1
 806c004:	61fa      	str	r2, [r7, #28]
 806c006:	68fa      	ldr	r2, [r7, #12]
 806c008:	4413      	add	r3, r2
 806c00a:	781b      	ldrb	r3, [r3, #0]
 806c00c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 806c00e:	7efb      	ldrb	r3, [r7, #27]
 806c010:	2b20      	cmp	r3, #32
 806c012:	d94e      	bls.n	806c0b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 806c014:	7efb      	ldrb	r3, [r7, #27]
 806c016:	2b2f      	cmp	r3, #47	; 0x2f
 806c018:	d006      	beq.n	806c028 <create_name+0x54>
 806c01a:	7efb      	ldrb	r3, [r7, #27]
 806c01c:	2b5c      	cmp	r3, #92	; 0x5c
 806c01e:	d110      	bne.n	806c042 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 806c020:	e002      	b.n	806c028 <create_name+0x54>
 806c022:	69fb      	ldr	r3, [r7, #28]
 806c024:	3301      	adds	r3, #1
 806c026:	61fb      	str	r3, [r7, #28]
 806c028:	68fa      	ldr	r2, [r7, #12]
 806c02a:	69fb      	ldr	r3, [r7, #28]
 806c02c:	4413      	add	r3, r2
 806c02e:	781b      	ldrb	r3, [r3, #0]
 806c030:	2b2f      	cmp	r3, #47	; 0x2f
 806c032:	d0f6      	beq.n	806c022 <create_name+0x4e>
 806c034:	68fa      	ldr	r2, [r7, #12]
 806c036:	69fb      	ldr	r3, [r7, #28]
 806c038:	4413      	add	r3, r2
 806c03a:	781b      	ldrb	r3, [r3, #0]
 806c03c:	2b5c      	cmp	r3, #92	; 0x5c
 806c03e:	d0f0      	beq.n	806c022 <create_name+0x4e>
			break;
 806c040:	e038      	b.n	806c0b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 806c042:	7efb      	ldrb	r3, [r7, #27]
 806c044:	2b2e      	cmp	r3, #46	; 0x2e
 806c046:	d003      	beq.n	806c050 <create_name+0x7c>
 806c048:	693a      	ldr	r2, [r7, #16]
 806c04a:	697b      	ldr	r3, [r7, #20]
 806c04c:	429a      	cmp	r2, r3
 806c04e:	d30c      	bcc.n	806c06a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 806c050:	697b      	ldr	r3, [r7, #20]
 806c052:	2b0b      	cmp	r3, #11
 806c054:	d002      	beq.n	806c05c <create_name+0x88>
 806c056:	7efb      	ldrb	r3, [r7, #27]
 806c058:	2b2e      	cmp	r3, #46	; 0x2e
 806c05a:	d001      	beq.n	806c060 <create_name+0x8c>
 806c05c:	2306      	movs	r3, #6
 806c05e:	e044      	b.n	806c0ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 806c060:	2308      	movs	r3, #8
 806c062:	613b      	str	r3, [r7, #16]
 806c064:	230b      	movs	r3, #11
 806c066:	617b      	str	r3, [r7, #20]
			continue;
 806c068:	e022      	b.n	806c0b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 806c06a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 806c06e:	2b00      	cmp	r3, #0
 806c070:	da04      	bge.n	806c07c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 806c072:	7efb      	ldrb	r3, [r7, #27]
 806c074:	3b80      	subs	r3, #128	; 0x80
 806c076:	4a1f      	ldr	r2, [pc, #124]	; (806c0f4 <create_name+0x120>)
 806c078:	5cd3      	ldrb	r3, [r2, r3]
 806c07a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 806c07c:	7efb      	ldrb	r3, [r7, #27]
 806c07e:	4619      	mov	r1, r3
 806c080:	481d      	ldr	r0, [pc, #116]	; (806c0f8 <create_name+0x124>)
 806c082:	f7fe ff62 	bl	806af4a <chk_chr>
 806c086:	4603      	mov	r3, r0
 806c088:	2b00      	cmp	r3, #0
 806c08a:	d001      	beq.n	806c090 <create_name+0xbc>
 806c08c:	2306      	movs	r3, #6
 806c08e:	e02c      	b.n	806c0ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 806c090:	7efb      	ldrb	r3, [r7, #27]
 806c092:	2b60      	cmp	r3, #96	; 0x60
 806c094:	d905      	bls.n	806c0a2 <create_name+0xce>
 806c096:	7efb      	ldrb	r3, [r7, #27]
 806c098:	2b7a      	cmp	r3, #122	; 0x7a
 806c09a:	d802      	bhi.n	806c0a2 <create_name+0xce>
 806c09c:	7efb      	ldrb	r3, [r7, #27]
 806c09e:	3b20      	subs	r3, #32
 806c0a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 806c0a2:	693b      	ldr	r3, [r7, #16]
 806c0a4:	1c5a      	adds	r2, r3, #1
 806c0a6:	613a      	str	r2, [r7, #16]
 806c0a8:	68ba      	ldr	r2, [r7, #8]
 806c0aa:	4413      	add	r3, r2
 806c0ac:	7efa      	ldrb	r2, [r7, #27]
 806c0ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 806c0b0:	e7a6      	b.n	806c000 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 806c0b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 806c0b4:	68fa      	ldr	r2, [r7, #12]
 806c0b6:	69fb      	ldr	r3, [r7, #28]
 806c0b8:	441a      	add	r2, r3
 806c0ba:	683b      	ldr	r3, [r7, #0]
 806c0bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 806c0be:	693b      	ldr	r3, [r7, #16]
 806c0c0:	2b00      	cmp	r3, #0
 806c0c2:	d101      	bne.n	806c0c8 <create_name+0xf4>
 806c0c4:	2306      	movs	r3, #6
 806c0c6:	e010      	b.n	806c0ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 806c0c8:	68bb      	ldr	r3, [r7, #8]
 806c0ca:	781b      	ldrb	r3, [r3, #0]
 806c0cc:	2be5      	cmp	r3, #229	; 0xe5
 806c0ce:	d102      	bne.n	806c0d6 <create_name+0x102>
 806c0d0:	68bb      	ldr	r3, [r7, #8]
 806c0d2:	2205      	movs	r2, #5
 806c0d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 806c0d6:	7efb      	ldrb	r3, [r7, #27]
 806c0d8:	2b20      	cmp	r3, #32
 806c0da:	d801      	bhi.n	806c0e0 <create_name+0x10c>
 806c0dc:	2204      	movs	r2, #4
 806c0de:	e000      	b.n	806c0e2 <create_name+0x10e>
 806c0e0:	2200      	movs	r2, #0
 806c0e2:	68bb      	ldr	r3, [r7, #8]
 806c0e4:	330b      	adds	r3, #11
 806c0e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 806c0e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 806c0ea:	4618      	mov	r0, r3
 806c0ec:	3720      	adds	r7, #32
 806c0ee:	46bd      	mov	sp, r7
 806c0f0:	bd80      	pop	{r7, pc}
 806c0f2:	bf00      	nop
 806c0f4:	08076e10 	.word	0x08076e10
 806c0f8:	08076c58 	.word	0x08076c58

0806c0fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 806c0fc:	b580      	push	{r7, lr}
 806c0fe:	b086      	sub	sp, #24
 806c100:	af00      	add	r7, sp, #0
 806c102:	6078      	str	r0, [r7, #4]
 806c104:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 806c106:	687b      	ldr	r3, [r7, #4]
 806c108:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 806c10a:	693b      	ldr	r3, [r7, #16]
 806c10c:	681b      	ldr	r3, [r3, #0]
 806c10e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 806c110:	e002      	b.n	806c118 <follow_path+0x1c>
 806c112:	683b      	ldr	r3, [r7, #0]
 806c114:	3301      	adds	r3, #1
 806c116:	603b      	str	r3, [r7, #0]
 806c118:	683b      	ldr	r3, [r7, #0]
 806c11a:	781b      	ldrb	r3, [r3, #0]
 806c11c:	2b2f      	cmp	r3, #47	; 0x2f
 806c11e:	d0f8      	beq.n	806c112 <follow_path+0x16>
 806c120:	683b      	ldr	r3, [r7, #0]
 806c122:	781b      	ldrb	r3, [r3, #0]
 806c124:	2b5c      	cmp	r3, #92	; 0x5c
 806c126:	d0f4      	beq.n	806c112 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 806c128:	693b      	ldr	r3, [r7, #16]
 806c12a:	2200      	movs	r2, #0
 806c12c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 806c12e:	683b      	ldr	r3, [r7, #0]
 806c130:	781b      	ldrb	r3, [r3, #0]
 806c132:	2b1f      	cmp	r3, #31
 806c134:	d80a      	bhi.n	806c14c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 806c136:	687b      	ldr	r3, [r7, #4]
 806c138:	2280      	movs	r2, #128	; 0x80
 806c13a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 806c13e:	2100      	movs	r1, #0
 806c140:	6878      	ldr	r0, [r7, #4]
 806c142:	f7ff fc7f 	bl	806ba44 <dir_sdi>
 806c146:	4603      	mov	r3, r0
 806c148:	75fb      	strb	r3, [r7, #23]
 806c14a:	e043      	b.n	806c1d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 806c14c:	463b      	mov	r3, r7
 806c14e:	4619      	mov	r1, r3
 806c150:	6878      	ldr	r0, [r7, #4]
 806c152:	f7ff ff3f 	bl	806bfd4 <create_name>
 806c156:	4603      	mov	r3, r0
 806c158:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 806c15a:	7dfb      	ldrb	r3, [r7, #23]
 806c15c:	2b00      	cmp	r3, #0
 806c15e:	d134      	bne.n	806c1ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 806c160:	6878      	ldr	r0, [r7, #4]
 806c162:	f7ff fe92 	bl	806be8a <dir_find>
 806c166:	4603      	mov	r3, r0
 806c168:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 806c16a:	687b      	ldr	r3, [r7, #4]
 806c16c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 806c170:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 806c172:	7dfb      	ldrb	r3, [r7, #23]
 806c174:	2b00      	cmp	r3, #0
 806c176:	d00a      	beq.n	806c18e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 806c178:	7dfb      	ldrb	r3, [r7, #23]
 806c17a:	2b04      	cmp	r3, #4
 806c17c:	d127      	bne.n	806c1ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 806c17e:	7afb      	ldrb	r3, [r7, #11]
 806c180:	f003 0304 	and.w	r3, r3, #4
 806c184:	2b00      	cmp	r3, #0
 806c186:	d122      	bne.n	806c1ce <follow_path+0xd2>
 806c188:	2305      	movs	r3, #5
 806c18a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 806c18c:	e01f      	b.n	806c1ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 806c18e:	7afb      	ldrb	r3, [r7, #11]
 806c190:	f003 0304 	and.w	r3, r3, #4
 806c194:	2b00      	cmp	r3, #0
 806c196:	d11c      	bne.n	806c1d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 806c198:	693b      	ldr	r3, [r7, #16]
 806c19a:	799b      	ldrb	r3, [r3, #6]
 806c19c:	f003 0310 	and.w	r3, r3, #16
 806c1a0:	2b00      	cmp	r3, #0
 806c1a2:	d102      	bne.n	806c1aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 806c1a4:	2305      	movs	r3, #5
 806c1a6:	75fb      	strb	r3, [r7, #23]
 806c1a8:	e014      	b.n	806c1d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 806c1aa:	68fb      	ldr	r3, [r7, #12]
 806c1ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806c1b0:	687b      	ldr	r3, [r7, #4]
 806c1b2:	695b      	ldr	r3, [r3, #20]
 806c1b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806c1b8:	4413      	add	r3, r2
 806c1ba:	4619      	mov	r1, r3
 806c1bc:	68f8      	ldr	r0, [r7, #12]
 806c1be:	f7ff fdc8 	bl	806bd52 <ld_clust>
 806c1c2:	4602      	mov	r2, r0
 806c1c4:	693b      	ldr	r3, [r7, #16]
 806c1c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 806c1c8:	e7c0      	b.n	806c14c <follow_path+0x50>
			if (res != FR_OK) break;
 806c1ca:	bf00      	nop
 806c1cc:	e002      	b.n	806c1d4 <follow_path+0xd8>
				break;
 806c1ce:	bf00      	nop
 806c1d0:	e000      	b.n	806c1d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 806c1d2:	bf00      	nop
			}
		}
	}

	return res;
 806c1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 806c1d6:	4618      	mov	r0, r3
 806c1d8:	3718      	adds	r7, #24
 806c1da:	46bd      	mov	sp, r7
 806c1dc:	bd80      	pop	{r7, pc}

0806c1de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 806c1de:	b480      	push	{r7}
 806c1e0:	b087      	sub	sp, #28
 806c1e2:	af00      	add	r7, sp, #0
 806c1e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 806c1e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806c1ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 806c1ec:	687b      	ldr	r3, [r7, #4]
 806c1ee:	681b      	ldr	r3, [r3, #0]
 806c1f0:	2b00      	cmp	r3, #0
 806c1f2:	d031      	beq.n	806c258 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 806c1f4:	687b      	ldr	r3, [r7, #4]
 806c1f6:	681b      	ldr	r3, [r3, #0]
 806c1f8:	617b      	str	r3, [r7, #20]
 806c1fa:	e002      	b.n	806c202 <get_ldnumber+0x24>
 806c1fc:	697b      	ldr	r3, [r7, #20]
 806c1fe:	3301      	adds	r3, #1
 806c200:	617b      	str	r3, [r7, #20]
 806c202:	697b      	ldr	r3, [r7, #20]
 806c204:	781b      	ldrb	r3, [r3, #0]
 806c206:	2b20      	cmp	r3, #32
 806c208:	d903      	bls.n	806c212 <get_ldnumber+0x34>
 806c20a:	697b      	ldr	r3, [r7, #20]
 806c20c:	781b      	ldrb	r3, [r3, #0]
 806c20e:	2b3a      	cmp	r3, #58	; 0x3a
 806c210:	d1f4      	bne.n	806c1fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 806c212:	697b      	ldr	r3, [r7, #20]
 806c214:	781b      	ldrb	r3, [r3, #0]
 806c216:	2b3a      	cmp	r3, #58	; 0x3a
 806c218:	d11c      	bne.n	806c254 <get_ldnumber+0x76>
			tp = *path;
 806c21a:	687b      	ldr	r3, [r7, #4]
 806c21c:	681b      	ldr	r3, [r3, #0]
 806c21e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 806c220:	68fb      	ldr	r3, [r7, #12]
 806c222:	1c5a      	adds	r2, r3, #1
 806c224:	60fa      	str	r2, [r7, #12]
 806c226:	781b      	ldrb	r3, [r3, #0]
 806c228:	3b30      	subs	r3, #48	; 0x30
 806c22a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 806c22c:	68bb      	ldr	r3, [r7, #8]
 806c22e:	2b09      	cmp	r3, #9
 806c230:	d80e      	bhi.n	806c250 <get_ldnumber+0x72>
 806c232:	68fa      	ldr	r2, [r7, #12]
 806c234:	697b      	ldr	r3, [r7, #20]
 806c236:	429a      	cmp	r2, r3
 806c238:	d10a      	bne.n	806c250 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 806c23a:	68bb      	ldr	r3, [r7, #8]
 806c23c:	2b00      	cmp	r3, #0
 806c23e:	d107      	bne.n	806c250 <get_ldnumber+0x72>
					vol = (int)i;
 806c240:	68bb      	ldr	r3, [r7, #8]
 806c242:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 806c244:	697b      	ldr	r3, [r7, #20]
 806c246:	3301      	adds	r3, #1
 806c248:	617b      	str	r3, [r7, #20]
 806c24a:	687b      	ldr	r3, [r7, #4]
 806c24c:	697a      	ldr	r2, [r7, #20]
 806c24e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 806c250:	693b      	ldr	r3, [r7, #16]
 806c252:	e002      	b.n	806c25a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 806c254:	2300      	movs	r3, #0
 806c256:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 806c258:	693b      	ldr	r3, [r7, #16]
}
 806c25a:	4618      	mov	r0, r3
 806c25c:	371c      	adds	r7, #28
 806c25e:	46bd      	mov	sp, r7
 806c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c264:	4770      	bx	lr
	...

0806c268 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 806c268:	b580      	push	{r7, lr}
 806c26a:	b082      	sub	sp, #8
 806c26c:	af00      	add	r7, sp, #0
 806c26e:	6078      	str	r0, [r7, #4]
 806c270:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 806c272:	687b      	ldr	r3, [r7, #4]
 806c274:	2200      	movs	r2, #0
 806c276:	70da      	strb	r2, [r3, #3]
 806c278:	687b      	ldr	r3, [r7, #4]
 806c27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806c27e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 806c280:	6839      	ldr	r1, [r7, #0]
 806c282:	6878      	ldr	r0, [r7, #4]
 806c284:	f7ff f85e 	bl	806b344 <move_window>
 806c288:	4603      	mov	r3, r0
 806c28a:	2b00      	cmp	r3, #0
 806c28c:	d001      	beq.n	806c292 <check_fs+0x2a>
 806c28e:	2304      	movs	r3, #4
 806c290:	e038      	b.n	806c304 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 806c292:	687b      	ldr	r3, [r7, #4]
 806c294:	3334      	adds	r3, #52	; 0x34
 806c296:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 806c29a:	4618      	mov	r0, r3
 806c29c:	f7fe fd70 	bl	806ad80 <ld_word>
 806c2a0:	4603      	mov	r3, r0
 806c2a2:	461a      	mov	r2, r3
 806c2a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 806c2a8:	429a      	cmp	r2, r3
 806c2aa:	d001      	beq.n	806c2b0 <check_fs+0x48>
 806c2ac:	2303      	movs	r3, #3
 806c2ae:	e029      	b.n	806c304 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 806c2b0:	687b      	ldr	r3, [r7, #4]
 806c2b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806c2b6:	2be9      	cmp	r3, #233	; 0xe9
 806c2b8:	d009      	beq.n	806c2ce <check_fs+0x66>
 806c2ba:	687b      	ldr	r3, [r7, #4]
 806c2bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806c2c0:	2beb      	cmp	r3, #235	; 0xeb
 806c2c2:	d11e      	bne.n	806c302 <check_fs+0x9a>
 806c2c4:	687b      	ldr	r3, [r7, #4]
 806c2c6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 806c2ca:	2b90      	cmp	r3, #144	; 0x90
 806c2cc:	d119      	bne.n	806c302 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 806c2ce:	687b      	ldr	r3, [r7, #4]
 806c2d0:	3334      	adds	r3, #52	; 0x34
 806c2d2:	3336      	adds	r3, #54	; 0x36
 806c2d4:	4618      	mov	r0, r3
 806c2d6:	f7fe fd6b 	bl	806adb0 <ld_dword>
 806c2da:	4603      	mov	r3, r0
 806c2dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 806c2e0:	4a0a      	ldr	r2, [pc, #40]	; (806c30c <check_fs+0xa4>)
 806c2e2:	4293      	cmp	r3, r2
 806c2e4:	d101      	bne.n	806c2ea <check_fs+0x82>
 806c2e6:	2300      	movs	r3, #0
 806c2e8:	e00c      	b.n	806c304 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 806c2ea:	687b      	ldr	r3, [r7, #4]
 806c2ec:	3334      	adds	r3, #52	; 0x34
 806c2ee:	3352      	adds	r3, #82	; 0x52
 806c2f0:	4618      	mov	r0, r3
 806c2f2:	f7fe fd5d 	bl	806adb0 <ld_dword>
 806c2f6:	4603      	mov	r3, r0
 806c2f8:	4a05      	ldr	r2, [pc, #20]	; (806c310 <check_fs+0xa8>)
 806c2fa:	4293      	cmp	r3, r2
 806c2fc:	d101      	bne.n	806c302 <check_fs+0x9a>
 806c2fe:	2300      	movs	r3, #0
 806c300:	e000      	b.n	806c304 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 806c302:	2302      	movs	r3, #2
}
 806c304:	4618      	mov	r0, r3
 806c306:	3708      	adds	r7, #8
 806c308:	46bd      	mov	sp, r7
 806c30a:	bd80      	pop	{r7, pc}
 806c30c:	00544146 	.word	0x00544146
 806c310:	33544146 	.word	0x33544146

0806c314 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 806c314:	b580      	push	{r7, lr}
 806c316:	b096      	sub	sp, #88	; 0x58
 806c318:	af00      	add	r7, sp, #0
 806c31a:	60f8      	str	r0, [r7, #12]
 806c31c:	60b9      	str	r1, [r7, #8]
 806c31e:	4613      	mov	r3, r2
 806c320:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 806c322:	68bb      	ldr	r3, [r7, #8]
 806c324:	2200      	movs	r2, #0
 806c326:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 806c328:	68f8      	ldr	r0, [r7, #12]
 806c32a:	f7ff ff58 	bl	806c1de <get_ldnumber>
 806c32e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 806c330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806c332:	2b00      	cmp	r3, #0
 806c334:	da01      	bge.n	806c33a <find_volume+0x26>
 806c336:	230b      	movs	r3, #11
 806c338:	e236      	b.n	806c7a8 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 806c33a:	4aac      	ldr	r2, [pc, #688]	; (806c5ec <find_volume+0x2d8>)
 806c33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806c33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 806c342:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 806c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c346:	2b00      	cmp	r3, #0
 806c348:	d101      	bne.n	806c34e <find_volume+0x3a>
 806c34a:	230c      	movs	r3, #12
 806c34c:	e22c      	b.n	806c7a8 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 806c34e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806c350:	f7fe fe16 	bl	806af80 <lock_fs>
 806c354:	4603      	mov	r3, r0
 806c356:	2b00      	cmp	r3, #0
 806c358:	d101      	bne.n	806c35e <find_volume+0x4a>
 806c35a:	230f      	movs	r3, #15
 806c35c:	e224      	b.n	806c7a8 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 806c35e:	68bb      	ldr	r3, [r7, #8]
 806c360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806c362:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 806c364:	79fb      	ldrb	r3, [r7, #7]
 806c366:	f023 0301 	bic.w	r3, r3, #1
 806c36a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 806c36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c36e:	781b      	ldrb	r3, [r3, #0]
 806c370:	2b00      	cmp	r3, #0
 806c372:	d01a      	beq.n	806c3aa <find_volume+0x96>
		stat = disk_status(fs->drv);
 806c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c376:	785b      	ldrb	r3, [r3, #1]
 806c378:	4618      	mov	r0, r3
 806c37a:	f7fe fc63 	bl	806ac44 <disk_status>
 806c37e:	4603      	mov	r3, r0
 806c380:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 806c384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806c388:	f003 0301 	and.w	r3, r3, #1
 806c38c:	2b00      	cmp	r3, #0
 806c38e:	d10c      	bne.n	806c3aa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 806c390:	79fb      	ldrb	r3, [r7, #7]
 806c392:	2b00      	cmp	r3, #0
 806c394:	d007      	beq.n	806c3a6 <find_volume+0x92>
 806c396:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806c39a:	f003 0304 	and.w	r3, r3, #4
 806c39e:	2b00      	cmp	r3, #0
 806c3a0:	d001      	beq.n	806c3a6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 806c3a2:	230a      	movs	r3, #10
 806c3a4:	e200      	b.n	806c7a8 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 806c3a6:	2300      	movs	r3, #0
 806c3a8:	e1fe      	b.n	806c7a8 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 806c3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c3ac:	2200      	movs	r2, #0
 806c3ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 806c3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806c3b2:	b2da      	uxtb	r2, r3
 806c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c3b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 806c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c3ba:	785b      	ldrb	r3, [r3, #1]
 806c3bc:	4618      	mov	r0, r3
 806c3be:	f7fe fc5b 	bl	806ac78 <disk_initialize>
 806c3c2:	4603      	mov	r3, r0
 806c3c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 806c3c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806c3cc:	f003 0301 	and.w	r3, r3, #1
 806c3d0:	2b00      	cmp	r3, #0
 806c3d2:	d001      	beq.n	806c3d8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 806c3d4:	2303      	movs	r3, #3
 806c3d6:	e1e7      	b.n	806c7a8 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 806c3d8:	79fb      	ldrb	r3, [r7, #7]
 806c3da:	2b00      	cmp	r3, #0
 806c3dc:	d007      	beq.n	806c3ee <find_volume+0xda>
 806c3de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806c3e2:	f003 0304 	and.w	r3, r3, #4
 806c3e6:	2b00      	cmp	r3, #0
 806c3e8:	d001      	beq.n	806c3ee <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 806c3ea:	230a      	movs	r3, #10
 806c3ec:	e1dc      	b.n	806c7a8 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 806c3ee:	2300      	movs	r3, #0
 806c3f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 806c3f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806c3f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806c3f6:	f7ff ff37 	bl	806c268 <check_fs>
 806c3fa:	4603      	mov	r3, r0
 806c3fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 806c400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806c404:	2b02      	cmp	r3, #2
 806c406:	d14b      	bne.n	806c4a0 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 806c408:	2300      	movs	r3, #0
 806c40a:	643b      	str	r3, [r7, #64]	; 0x40
 806c40c:	e01f      	b.n	806c44e <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 806c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c410:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806c414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806c416:	011b      	lsls	r3, r3, #4
 806c418:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 806c41c:	4413      	add	r3, r2
 806c41e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 806c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806c422:	3304      	adds	r3, #4
 806c424:	781b      	ldrb	r3, [r3, #0]
 806c426:	2b00      	cmp	r3, #0
 806c428:	d006      	beq.n	806c438 <find_volume+0x124>
 806c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806c42c:	3308      	adds	r3, #8
 806c42e:	4618      	mov	r0, r3
 806c430:	f7fe fcbe 	bl	806adb0 <ld_dword>
 806c434:	4602      	mov	r2, r0
 806c436:	e000      	b.n	806c43a <find_volume+0x126>
 806c438:	2200      	movs	r2, #0
 806c43a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806c43c:	009b      	lsls	r3, r3, #2
 806c43e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 806c442:	440b      	add	r3, r1
 806c444:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 806c448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806c44a:	3301      	adds	r3, #1
 806c44c:	643b      	str	r3, [r7, #64]	; 0x40
 806c44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806c450:	2b03      	cmp	r3, #3
 806c452:	d9dc      	bls.n	806c40e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 806c454:	2300      	movs	r3, #0
 806c456:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 806c458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806c45a:	2b00      	cmp	r3, #0
 806c45c:	d002      	beq.n	806c464 <find_volume+0x150>
 806c45e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806c460:	3b01      	subs	r3, #1
 806c462:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 806c464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806c466:	009b      	lsls	r3, r3, #2
 806c468:	f107 0258 	add.w	r2, r7, #88	; 0x58
 806c46c:	4413      	add	r3, r2
 806c46e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 806c472:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 806c474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806c476:	2b00      	cmp	r3, #0
 806c478:	d005      	beq.n	806c486 <find_volume+0x172>
 806c47a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806c47c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806c47e:	f7ff fef3 	bl	806c268 <check_fs>
 806c482:	4603      	mov	r3, r0
 806c484:	e000      	b.n	806c488 <find_volume+0x174>
 806c486:	2303      	movs	r3, #3
 806c488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 806c48c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806c490:	2b01      	cmp	r3, #1
 806c492:	d905      	bls.n	806c4a0 <find_volume+0x18c>
 806c494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806c496:	3301      	adds	r3, #1
 806c498:	643b      	str	r3, [r7, #64]	; 0x40
 806c49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806c49c:	2b03      	cmp	r3, #3
 806c49e:	d9e1      	bls.n	806c464 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 806c4a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806c4a4:	2b04      	cmp	r3, #4
 806c4a6:	d101      	bne.n	806c4ac <find_volume+0x198>
 806c4a8:	2301      	movs	r3, #1
 806c4aa:	e17d      	b.n	806c7a8 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 806c4ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806c4b0:	2b01      	cmp	r3, #1
 806c4b2:	d901      	bls.n	806c4b8 <find_volume+0x1a4>
 806c4b4:	230d      	movs	r3, #13
 806c4b6:	e177      	b.n	806c7a8 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 806c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c4ba:	3334      	adds	r3, #52	; 0x34
 806c4bc:	330b      	adds	r3, #11
 806c4be:	4618      	mov	r0, r3
 806c4c0:	f7fe fc5e 	bl	806ad80 <ld_word>
 806c4c4:	4603      	mov	r3, r0
 806c4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 806c4ca:	d001      	beq.n	806c4d0 <find_volume+0x1bc>
 806c4cc:	230d      	movs	r3, #13
 806c4ce:	e16b      	b.n	806c7a8 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 806c4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c4d2:	3334      	adds	r3, #52	; 0x34
 806c4d4:	3316      	adds	r3, #22
 806c4d6:	4618      	mov	r0, r3
 806c4d8:	f7fe fc52 	bl	806ad80 <ld_word>
 806c4dc:	4603      	mov	r3, r0
 806c4de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 806c4e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806c4e2:	2b00      	cmp	r3, #0
 806c4e4:	d106      	bne.n	806c4f4 <find_volume+0x1e0>
 806c4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c4e8:	3334      	adds	r3, #52	; 0x34
 806c4ea:	3324      	adds	r3, #36	; 0x24
 806c4ec:	4618      	mov	r0, r3
 806c4ee:	f7fe fc5f 	bl	806adb0 <ld_dword>
 806c4f2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 806c4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c4f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 806c4f8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 806c4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c4fc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 806c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c502:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 806c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c506:	789b      	ldrb	r3, [r3, #2]
 806c508:	2b01      	cmp	r3, #1
 806c50a:	d005      	beq.n	806c518 <find_volume+0x204>
 806c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c50e:	789b      	ldrb	r3, [r3, #2]
 806c510:	2b02      	cmp	r3, #2
 806c512:	d001      	beq.n	806c518 <find_volume+0x204>
 806c514:	230d      	movs	r3, #13
 806c516:	e147      	b.n	806c7a8 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 806c518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c51a:	789b      	ldrb	r3, [r3, #2]
 806c51c:	461a      	mov	r2, r3
 806c51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806c520:	fb02 f303 	mul.w	r3, r2, r3
 806c524:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 806c526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 806c52c:	b29a      	uxth	r2, r3
 806c52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c530:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 806c532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c534:	895b      	ldrh	r3, [r3, #10]
 806c536:	2b00      	cmp	r3, #0
 806c538:	d008      	beq.n	806c54c <find_volume+0x238>
 806c53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c53c:	895b      	ldrh	r3, [r3, #10]
 806c53e:	461a      	mov	r2, r3
 806c540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c542:	895b      	ldrh	r3, [r3, #10]
 806c544:	3b01      	subs	r3, #1
 806c546:	4013      	ands	r3, r2
 806c548:	2b00      	cmp	r3, #0
 806c54a:	d001      	beq.n	806c550 <find_volume+0x23c>
 806c54c:	230d      	movs	r3, #13
 806c54e:	e12b      	b.n	806c7a8 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 806c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c552:	3334      	adds	r3, #52	; 0x34
 806c554:	3311      	adds	r3, #17
 806c556:	4618      	mov	r0, r3
 806c558:	f7fe fc12 	bl	806ad80 <ld_word>
 806c55c:	4603      	mov	r3, r0
 806c55e:	461a      	mov	r2, r3
 806c560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c562:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 806c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c566:	891b      	ldrh	r3, [r3, #8]
 806c568:	f003 030f 	and.w	r3, r3, #15
 806c56c:	b29b      	uxth	r3, r3
 806c56e:	2b00      	cmp	r3, #0
 806c570:	d001      	beq.n	806c576 <find_volume+0x262>
 806c572:	230d      	movs	r3, #13
 806c574:	e118      	b.n	806c7a8 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 806c576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c578:	3334      	adds	r3, #52	; 0x34
 806c57a:	3313      	adds	r3, #19
 806c57c:	4618      	mov	r0, r3
 806c57e:	f7fe fbff 	bl	806ad80 <ld_word>
 806c582:	4603      	mov	r3, r0
 806c584:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 806c586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806c588:	2b00      	cmp	r3, #0
 806c58a:	d106      	bne.n	806c59a <find_volume+0x286>
 806c58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c58e:	3334      	adds	r3, #52	; 0x34
 806c590:	3320      	adds	r3, #32
 806c592:	4618      	mov	r0, r3
 806c594:	f7fe fc0c 	bl	806adb0 <ld_dword>
 806c598:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 806c59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c59c:	3334      	adds	r3, #52	; 0x34
 806c59e:	330e      	adds	r3, #14
 806c5a0:	4618      	mov	r0, r3
 806c5a2:	f7fe fbed 	bl	806ad80 <ld_word>
 806c5a6:	4603      	mov	r3, r0
 806c5a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 806c5aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 806c5ac:	2b00      	cmp	r3, #0
 806c5ae:	d101      	bne.n	806c5b4 <find_volume+0x2a0>
 806c5b0:	230d      	movs	r3, #13
 806c5b2:	e0f9      	b.n	806c7a8 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 806c5b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 806c5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806c5b8:	4413      	add	r3, r2
 806c5ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806c5bc:	8912      	ldrh	r2, [r2, #8]
 806c5be:	0912      	lsrs	r2, r2, #4
 806c5c0:	b292      	uxth	r2, r2
 806c5c2:	4413      	add	r3, r2
 806c5c4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 806c5c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 806c5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806c5ca:	429a      	cmp	r2, r3
 806c5cc:	d201      	bcs.n	806c5d2 <find_volume+0x2be>
 806c5ce:	230d      	movs	r3, #13
 806c5d0:	e0ea      	b.n	806c7a8 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 806c5d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 806c5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806c5d6:	1ad3      	subs	r3, r2, r3
 806c5d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806c5da:	8952      	ldrh	r2, [r2, #10]
 806c5dc:	fbb3 f3f2 	udiv	r3, r3, r2
 806c5e0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 806c5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c5e4:	2b00      	cmp	r3, #0
 806c5e6:	d103      	bne.n	806c5f0 <find_volume+0x2dc>
 806c5e8:	230d      	movs	r3, #13
 806c5ea:	e0dd      	b.n	806c7a8 <find_volume+0x494>
 806c5ec:	20000424 	.word	0x20000424
		fmt = FS_FAT32;
 806c5f0:	2303      	movs	r3, #3
 806c5f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 806c5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c5f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 806c5fc:	4293      	cmp	r3, r2
 806c5fe:	d802      	bhi.n	806c606 <find_volume+0x2f2>
 806c600:	2302      	movs	r3, #2
 806c602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 806c606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c608:	f640 72f5 	movw	r2, #4085	; 0xff5
 806c60c:	4293      	cmp	r3, r2
 806c60e:	d802      	bhi.n	806c616 <find_volume+0x302>
 806c610:	2301      	movs	r3, #1
 806c612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 806c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806c618:	1c9a      	adds	r2, r3, #2
 806c61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c61c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 806c61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c620:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 806c622:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 806c624:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 806c626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806c628:	441a      	add	r2, r3
 806c62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c62c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 806c62e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 806c630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806c632:	441a      	add	r2, r3
 806c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c636:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 806c638:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806c63c:	2b03      	cmp	r3, #3
 806c63e:	d11e      	bne.n	806c67e <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 806c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c642:	3334      	adds	r3, #52	; 0x34
 806c644:	332a      	adds	r3, #42	; 0x2a
 806c646:	4618      	mov	r0, r3
 806c648:	f7fe fb9a 	bl	806ad80 <ld_word>
 806c64c:	4603      	mov	r3, r0
 806c64e:	2b00      	cmp	r3, #0
 806c650:	d001      	beq.n	806c656 <find_volume+0x342>
 806c652:	230d      	movs	r3, #13
 806c654:	e0a8      	b.n	806c7a8 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 806c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c658:	891b      	ldrh	r3, [r3, #8]
 806c65a:	2b00      	cmp	r3, #0
 806c65c:	d001      	beq.n	806c662 <find_volume+0x34e>
 806c65e:	230d      	movs	r3, #13
 806c660:	e0a2      	b.n	806c7a8 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 806c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c664:	3334      	adds	r3, #52	; 0x34
 806c666:	332c      	adds	r3, #44	; 0x2c
 806c668:	4618      	mov	r0, r3
 806c66a:	f7fe fba1 	bl	806adb0 <ld_dword>
 806c66e:	4602      	mov	r2, r0
 806c670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c672:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 806c674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c676:	699b      	ldr	r3, [r3, #24]
 806c678:	009b      	lsls	r3, r3, #2
 806c67a:	647b      	str	r3, [r7, #68]	; 0x44
 806c67c:	e01f      	b.n	806c6be <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 806c67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c680:	891b      	ldrh	r3, [r3, #8]
 806c682:	2b00      	cmp	r3, #0
 806c684:	d101      	bne.n	806c68a <find_volume+0x376>
 806c686:	230d      	movs	r3, #13
 806c688:	e08e      	b.n	806c7a8 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 806c68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c68c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806c68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806c690:	441a      	add	r2, r3
 806c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c694:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 806c696:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806c69a:	2b02      	cmp	r3, #2
 806c69c:	d103      	bne.n	806c6a6 <find_volume+0x392>
 806c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c6a0:	699b      	ldr	r3, [r3, #24]
 806c6a2:	005b      	lsls	r3, r3, #1
 806c6a4:	e00a      	b.n	806c6bc <find_volume+0x3a8>
 806c6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c6a8:	699a      	ldr	r2, [r3, #24]
 806c6aa:	4613      	mov	r3, r2
 806c6ac:	005b      	lsls	r3, r3, #1
 806c6ae:	4413      	add	r3, r2
 806c6b0:	085a      	lsrs	r2, r3, #1
 806c6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c6b4:	699b      	ldr	r3, [r3, #24]
 806c6b6:	f003 0301 	and.w	r3, r3, #1
 806c6ba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 806c6bc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 806c6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c6c0:	69da      	ldr	r2, [r3, #28]
 806c6c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 806c6c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 806c6c8:	0a5b      	lsrs	r3, r3, #9
 806c6ca:	429a      	cmp	r2, r3
 806c6cc:	d201      	bcs.n	806c6d2 <find_volume+0x3be>
 806c6ce:	230d      	movs	r3, #13
 806c6d0:	e06a      	b.n	806c7a8 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 806c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c6d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806c6d8:	615a      	str	r2, [r3, #20]
 806c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c6dc:	695a      	ldr	r2, [r3, #20]
 806c6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c6e0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 806c6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c6e4:	2280      	movs	r2, #128	; 0x80
 806c6e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 806c6e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806c6ec:	2b03      	cmp	r3, #3
 806c6ee:	d149      	bne.n	806c784 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 806c6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c6f2:	3334      	adds	r3, #52	; 0x34
 806c6f4:	3330      	adds	r3, #48	; 0x30
 806c6f6:	4618      	mov	r0, r3
 806c6f8:	f7fe fb42 	bl	806ad80 <ld_word>
 806c6fc:	4603      	mov	r3, r0
 806c6fe:	2b01      	cmp	r3, #1
 806c700:	d140      	bne.n	806c784 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 806c702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806c704:	3301      	adds	r3, #1
 806c706:	4619      	mov	r1, r3
 806c708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806c70a:	f7fe fe1b 	bl	806b344 <move_window>
 806c70e:	4603      	mov	r3, r0
 806c710:	2b00      	cmp	r3, #0
 806c712:	d137      	bne.n	806c784 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 806c714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c716:	2200      	movs	r2, #0
 806c718:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 806c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c71c:	3334      	adds	r3, #52	; 0x34
 806c71e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 806c722:	4618      	mov	r0, r3
 806c724:	f7fe fb2c 	bl	806ad80 <ld_word>
 806c728:	4603      	mov	r3, r0
 806c72a:	461a      	mov	r2, r3
 806c72c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 806c730:	429a      	cmp	r2, r3
 806c732:	d127      	bne.n	806c784 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 806c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c736:	3334      	adds	r3, #52	; 0x34
 806c738:	4618      	mov	r0, r3
 806c73a:	f7fe fb39 	bl	806adb0 <ld_dword>
 806c73e:	4603      	mov	r3, r0
 806c740:	4a1b      	ldr	r2, [pc, #108]	; (806c7b0 <find_volume+0x49c>)
 806c742:	4293      	cmp	r3, r2
 806c744:	d11e      	bne.n	806c784 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 806c746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c748:	3334      	adds	r3, #52	; 0x34
 806c74a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 806c74e:	4618      	mov	r0, r3
 806c750:	f7fe fb2e 	bl	806adb0 <ld_dword>
 806c754:	4603      	mov	r3, r0
 806c756:	4a17      	ldr	r2, [pc, #92]	; (806c7b4 <find_volume+0x4a0>)
 806c758:	4293      	cmp	r3, r2
 806c75a:	d113      	bne.n	806c784 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 806c75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c75e:	3334      	adds	r3, #52	; 0x34
 806c760:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 806c764:	4618      	mov	r0, r3
 806c766:	f7fe fb23 	bl	806adb0 <ld_dword>
 806c76a:	4602      	mov	r2, r0
 806c76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c76e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 806c770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c772:	3334      	adds	r3, #52	; 0x34
 806c774:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 806c778:	4618      	mov	r0, r3
 806c77a:	f7fe fb19 	bl	806adb0 <ld_dword>
 806c77e:	4602      	mov	r2, r0
 806c780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c782:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 806c784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c786:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 806c78a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 806c78c:	4b0a      	ldr	r3, [pc, #40]	; (806c7b8 <find_volume+0x4a4>)
 806c78e:	881b      	ldrh	r3, [r3, #0]
 806c790:	3301      	adds	r3, #1
 806c792:	b29a      	uxth	r2, r3
 806c794:	4b08      	ldr	r3, [pc, #32]	; (806c7b8 <find_volume+0x4a4>)
 806c796:	801a      	strh	r2, [r3, #0]
 806c798:	4b07      	ldr	r3, [pc, #28]	; (806c7b8 <find_volume+0x4a4>)
 806c79a:	881a      	ldrh	r2, [r3, #0]
 806c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c79e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 806c7a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806c7a2:	f7fe fd67 	bl	806b274 <clear_lock>
#endif
	return FR_OK;
 806c7a6:	2300      	movs	r3, #0
}
 806c7a8:	4618      	mov	r0, r3
 806c7aa:	3758      	adds	r7, #88	; 0x58
 806c7ac:	46bd      	mov	sp, r7
 806c7ae:	bd80      	pop	{r7, pc}
 806c7b0:	41615252 	.word	0x41615252
 806c7b4:	61417272 	.word	0x61417272
 806c7b8:	20000428 	.word	0x20000428

0806c7bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 806c7bc:	b580      	push	{r7, lr}
 806c7be:	b084      	sub	sp, #16
 806c7c0:	af00      	add	r7, sp, #0
 806c7c2:	6078      	str	r0, [r7, #4]
 806c7c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 806c7c6:	2309      	movs	r3, #9
 806c7c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 806c7ca:	687b      	ldr	r3, [r7, #4]
 806c7cc:	2b00      	cmp	r3, #0
 806c7ce:	d02e      	beq.n	806c82e <validate+0x72>
 806c7d0:	687b      	ldr	r3, [r7, #4]
 806c7d2:	681b      	ldr	r3, [r3, #0]
 806c7d4:	2b00      	cmp	r3, #0
 806c7d6:	d02a      	beq.n	806c82e <validate+0x72>
 806c7d8:	687b      	ldr	r3, [r7, #4]
 806c7da:	681b      	ldr	r3, [r3, #0]
 806c7dc:	781b      	ldrb	r3, [r3, #0]
 806c7de:	2b00      	cmp	r3, #0
 806c7e0:	d025      	beq.n	806c82e <validate+0x72>
 806c7e2:	687b      	ldr	r3, [r7, #4]
 806c7e4:	889a      	ldrh	r2, [r3, #4]
 806c7e6:	687b      	ldr	r3, [r7, #4]
 806c7e8:	681b      	ldr	r3, [r3, #0]
 806c7ea:	88db      	ldrh	r3, [r3, #6]
 806c7ec:	429a      	cmp	r2, r3
 806c7ee:	d11e      	bne.n	806c82e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 806c7f0:	687b      	ldr	r3, [r7, #4]
 806c7f2:	681b      	ldr	r3, [r3, #0]
 806c7f4:	4618      	mov	r0, r3
 806c7f6:	f7fe fbc3 	bl	806af80 <lock_fs>
 806c7fa:	4603      	mov	r3, r0
 806c7fc:	2b00      	cmp	r3, #0
 806c7fe:	d014      	beq.n	806c82a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 806c800:	687b      	ldr	r3, [r7, #4]
 806c802:	681b      	ldr	r3, [r3, #0]
 806c804:	785b      	ldrb	r3, [r3, #1]
 806c806:	4618      	mov	r0, r3
 806c808:	f7fe fa1c 	bl	806ac44 <disk_status>
 806c80c:	4603      	mov	r3, r0
 806c80e:	f003 0301 	and.w	r3, r3, #1
 806c812:	2b00      	cmp	r3, #0
 806c814:	d102      	bne.n	806c81c <validate+0x60>
				res = FR_OK;
 806c816:	2300      	movs	r3, #0
 806c818:	73fb      	strb	r3, [r7, #15]
 806c81a:	e008      	b.n	806c82e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 806c81c:	687b      	ldr	r3, [r7, #4]
 806c81e:	681b      	ldr	r3, [r3, #0]
 806c820:	2100      	movs	r1, #0
 806c822:	4618      	mov	r0, r3
 806c824:	f7fe fbc2 	bl	806afac <unlock_fs>
 806c828:	e001      	b.n	806c82e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 806c82a:	230f      	movs	r3, #15
 806c82c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 806c82e:	7bfb      	ldrb	r3, [r7, #15]
 806c830:	2b00      	cmp	r3, #0
 806c832:	d102      	bne.n	806c83a <validate+0x7e>
 806c834:	687b      	ldr	r3, [r7, #4]
 806c836:	681b      	ldr	r3, [r3, #0]
 806c838:	e000      	b.n	806c83c <validate+0x80>
 806c83a:	2300      	movs	r3, #0
 806c83c:	683a      	ldr	r2, [r7, #0]
 806c83e:	6013      	str	r3, [r2, #0]
	return res;
 806c840:	7bfb      	ldrb	r3, [r7, #15]
}
 806c842:	4618      	mov	r0, r3
 806c844:	3710      	adds	r7, #16
 806c846:	46bd      	mov	sp, r7
 806c848:	bd80      	pop	{r7, pc}
	...

0806c84c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 806c84c:	b580      	push	{r7, lr}
 806c84e:	b088      	sub	sp, #32
 806c850:	af00      	add	r7, sp, #0
 806c852:	60f8      	str	r0, [r7, #12]
 806c854:	60b9      	str	r1, [r7, #8]
 806c856:	4613      	mov	r3, r2
 806c858:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 806c85a:	68bb      	ldr	r3, [r7, #8]
 806c85c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 806c85e:	f107 0310 	add.w	r3, r7, #16
 806c862:	4618      	mov	r0, r3
 806c864:	f7ff fcbb 	bl	806c1de <get_ldnumber>
 806c868:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 806c86a:	69fb      	ldr	r3, [r7, #28]
 806c86c:	2b00      	cmp	r3, #0
 806c86e:	da01      	bge.n	806c874 <f_mount+0x28>
 806c870:	230b      	movs	r3, #11
 806c872:	e048      	b.n	806c906 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 806c874:	4a26      	ldr	r2, [pc, #152]	; (806c910 <f_mount+0xc4>)
 806c876:	69fb      	ldr	r3, [r7, #28]
 806c878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 806c87c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 806c87e:	69bb      	ldr	r3, [r7, #24]
 806c880:	2b00      	cmp	r3, #0
 806c882:	d00f      	beq.n	806c8a4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 806c884:	69b8      	ldr	r0, [r7, #24]
 806c886:	f7fe fcf5 	bl	806b274 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 806c88a:	69bb      	ldr	r3, [r7, #24]
 806c88c:	68db      	ldr	r3, [r3, #12]
 806c88e:	4618      	mov	r0, r3
 806c890:	f000 fef8 	bl	806d684 <ff_del_syncobj>
 806c894:	4603      	mov	r3, r0
 806c896:	2b00      	cmp	r3, #0
 806c898:	d101      	bne.n	806c89e <f_mount+0x52>
 806c89a:	2302      	movs	r3, #2
 806c89c:	e033      	b.n	806c906 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 806c89e:	69bb      	ldr	r3, [r7, #24]
 806c8a0:	2200      	movs	r2, #0
 806c8a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 806c8a4:	68fb      	ldr	r3, [r7, #12]
 806c8a6:	2b00      	cmp	r3, #0
 806c8a8:	d00f      	beq.n	806c8ca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 806c8aa:	68fb      	ldr	r3, [r7, #12]
 806c8ac:	2200      	movs	r2, #0
 806c8ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 806c8b0:	69fb      	ldr	r3, [r7, #28]
 806c8b2:	b2da      	uxtb	r2, r3
 806c8b4:	68fb      	ldr	r3, [r7, #12]
 806c8b6:	330c      	adds	r3, #12
 806c8b8:	4619      	mov	r1, r3
 806c8ba:	4610      	mov	r0, r2
 806c8bc:	f000 fec7 	bl	806d64e <ff_cre_syncobj>
 806c8c0:	4603      	mov	r3, r0
 806c8c2:	2b00      	cmp	r3, #0
 806c8c4:	d101      	bne.n	806c8ca <f_mount+0x7e>
 806c8c6:	2302      	movs	r3, #2
 806c8c8:	e01d      	b.n	806c906 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 806c8ca:	68fa      	ldr	r2, [r7, #12]
 806c8cc:	4910      	ldr	r1, [pc, #64]	; (806c910 <f_mount+0xc4>)
 806c8ce:	69fb      	ldr	r3, [r7, #28]
 806c8d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 806c8d4:	68fb      	ldr	r3, [r7, #12]
 806c8d6:	2b00      	cmp	r3, #0
 806c8d8:	d002      	beq.n	806c8e0 <f_mount+0x94>
 806c8da:	79fb      	ldrb	r3, [r7, #7]
 806c8dc:	2b01      	cmp	r3, #1
 806c8de:	d001      	beq.n	806c8e4 <f_mount+0x98>
 806c8e0:	2300      	movs	r3, #0
 806c8e2:	e010      	b.n	806c906 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 806c8e4:	f107 010c 	add.w	r1, r7, #12
 806c8e8:	f107 0308 	add.w	r3, r7, #8
 806c8ec:	2200      	movs	r2, #0
 806c8ee:	4618      	mov	r0, r3
 806c8f0:	f7ff fd10 	bl	806c314 <find_volume>
 806c8f4:	4603      	mov	r3, r0
 806c8f6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 806c8f8:	68fb      	ldr	r3, [r7, #12]
 806c8fa:	7dfa      	ldrb	r2, [r7, #23]
 806c8fc:	4611      	mov	r1, r2
 806c8fe:	4618      	mov	r0, r3
 806c900:	f7fe fb54 	bl	806afac <unlock_fs>
 806c904:	7dfb      	ldrb	r3, [r7, #23]
}
 806c906:	4618      	mov	r0, r3
 806c908:	3720      	adds	r7, #32
 806c90a:	46bd      	mov	sp, r7
 806c90c:	bd80      	pop	{r7, pc}
 806c90e:	bf00      	nop
 806c910:	20000424 	.word	0x20000424

0806c914 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 806c914:	b580      	push	{r7, lr}
 806c916:	b098      	sub	sp, #96	; 0x60
 806c918:	af00      	add	r7, sp, #0
 806c91a:	60f8      	str	r0, [r7, #12]
 806c91c:	60b9      	str	r1, [r7, #8]
 806c91e:	4613      	mov	r3, r2
 806c920:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 806c922:	68fb      	ldr	r3, [r7, #12]
 806c924:	2b00      	cmp	r3, #0
 806c926:	d101      	bne.n	806c92c <f_open+0x18>
 806c928:	2309      	movs	r3, #9
 806c92a:	e1b4      	b.n	806cc96 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 806c92c:	79fb      	ldrb	r3, [r7, #7]
 806c92e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 806c932:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 806c934:	79fa      	ldrb	r2, [r7, #7]
 806c936:	f107 0110 	add.w	r1, r7, #16
 806c93a:	f107 0308 	add.w	r3, r7, #8
 806c93e:	4618      	mov	r0, r3
 806c940:	f7ff fce8 	bl	806c314 <find_volume>
 806c944:	4603      	mov	r3, r0
 806c946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 806c94a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806c94e:	2b00      	cmp	r3, #0
 806c950:	f040 8191 	bne.w	806cc76 <f_open+0x362>
		dj.obj.fs = fs;
 806c954:	693b      	ldr	r3, [r7, #16]
 806c956:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 806c958:	68ba      	ldr	r2, [r7, #8]
 806c95a:	f107 0314 	add.w	r3, r7, #20
 806c95e:	4611      	mov	r1, r2
 806c960:	4618      	mov	r0, r3
 806c962:	f7ff fbcb 	bl	806c0fc <follow_path>
 806c966:	4603      	mov	r3, r0
 806c968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 806c96c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806c970:	2b00      	cmp	r3, #0
 806c972:	d11a      	bne.n	806c9aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 806c974:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 806c978:	b25b      	sxtb	r3, r3
 806c97a:	2b00      	cmp	r3, #0
 806c97c:	da03      	bge.n	806c986 <f_open+0x72>
				res = FR_INVALID_NAME;
 806c97e:	2306      	movs	r3, #6
 806c980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806c984:	e011      	b.n	806c9aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 806c986:	79fb      	ldrb	r3, [r7, #7]
 806c988:	f023 0301 	bic.w	r3, r3, #1
 806c98c:	2b00      	cmp	r3, #0
 806c98e:	bf14      	ite	ne
 806c990:	2301      	movne	r3, #1
 806c992:	2300      	moveq	r3, #0
 806c994:	b2db      	uxtb	r3, r3
 806c996:	461a      	mov	r2, r3
 806c998:	f107 0314 	add.w	r3, r7, #20
 806c99c:	4611      	mov	r1, r2
 806c99e:	4618      	mov	r0, r3
 806c9a0:	f7fe fb20 	bl	806afe4 <chk_lock>
 806c9a4:	4603      	mov	r3, r0
 806c9a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 806c9aa:	79fb      	ldrb	r3, [r7, #7]
 806c9ac:	f003 031c 	and.w	r3, r3, #28
 806c9b0:	2b00      	cmp	r3, #0
 806c9b2:	d07f      	beq.n	806cab4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 806c9b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806c9b8:	2b00      	cmp	r3, #0
 806c9ba:	d017      	beq.n	806c9ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 806c9bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806c9c0:	2b04      	cmp	r3, #4
 806c9c2:	d10e      	bne.n	806c9e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 806c9c4:	f7fe fb6a 	bl	806b09c <enq_lock>
 806c9c8:	4603      	mov	r3, r0
 806c9ca:	2b00      	cmp	r3, #0
 806c9cc:	d006      	beq.n	806c9dc <f_open+0xc8>
 806c9ce:	f107 0314 	add.w	r3, r7, #20
 806c9d2:	4618      	mov	r0, r3
 806c9d4:	f7ff faae 	bl	806bf34 <dir_register>
 806c9d8:	4603      	mov	r3, r0
 806c9da:	e000      	b.n	806c9de <f_open+0xca>
 806c9dc:	2312      	movs	r3, #18
 806c9de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 806c9e2:	79fb      	ldrb	r3, [r7, #7]
 806c9e4:	f043 0308 	orr.w	r3, r3, #8
 806c9e8:	71fb      	strb	r3, [r7, #7]
 806c9ea:	e010      	b.n	806ca0e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 806c9ec:	7ebb      	ldrb	r3, [r7, #26]
 806c9ee:	f003 0311 	and.w	r3, r3, #17
 806c9f2:	2b00      	cmp	r3, #0
 806c9f4:	d003      	beq.n	806c9fe <f_open+0xea>
					res = FR_DENIED;
 806c9f6:	2307      	movs	r3, #7
 806c9f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806c9fc:	e007      	b.n	806ca0e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 806c9fe:	79fb      	ldrb	r3, [r7, #7]
 806ca00:	f003 0304 	and.w	r3, r3, #4
 806ca04:	2b00      	cmp	r3, #0
 806ca06:	d002      	beq.n	806ca0e <f_open+0xfa>
 806ca08:	2308      	movs	r3, #8
 806ca0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 806ca0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806ca12:	2b00      	cmp	r3, #0
 806ca14:	d168      	bne.n	806cae8 <f_open+0x1d4>
 806ca16:	79fb      	ldrb	r3, [r7, #7]
 806ca18:	f003 0308 	and.w	r3, r3, #8
 806ca1c:	2b00      	cmp	r3, #0
 806ca1e:	d063      	beq.n	806cae8 <f_open+0x1d4>
				dw = GET_FATTIME();
 806ca20:	f7fd fbd2 	bl	806a1c8 <get_fattime>
 806ca24:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 806ca26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806ca28:	330e      	adds	r3, #14
 806ca2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806ca2c:	4618      	mov	r0, r3
 806ca2e:	f7fe f9fd 	bl	806ae2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 806ca32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806ca34:	3316      	adds	r3, #22
 806ca36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806ca38:	4618      	mov	r0, r3
 806ca3a:	f7fe f9f7 	bl	806ae2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 806ca3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806ca40:	330b      	adds	r3, #11
 806ca42:	2220      	movs	r2, #32
 806ca44:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 806ca46:	693b      	ldr	r3, [r7, #16]
 806ca48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806ca4a:	4611      	mov	r1, r2
 806ca4c:	4618      	mov	r0, r3
 806ca4e:	f7ff f980 	bl	806bd52 <ld_clust>
 806ca52:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 806ca54:	693b      	ldr	r3, [r7, #16]
 806ca56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 806ca58:	2200      	movs	r2, #0
 806ca5a:	4618      	mov	r0, r3
 806ca5c:	f7ff f998 	bl	806bd90 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 806ca60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806ca62:	331c      	adds	r3, #28
 806ca64:	2100      	movs	r1, #0
 806ca66:	4618      	mov	r0, r3
 806ca68:	f7fe f9e0 	bl	806ae2c <st_dword>
					fs->wflag = 1;
 806ca6c:	693b      	ldr	r3, [r7, #16]
 806ca6e:	2201      	movs	r2, #1
 806ca70:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 806ca72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806ca74:	2b00      	cmp	r3, #0
 806ca76:	d037      	beq.n	806cae8 <f_open+0x1d4>
						dw = fs->winsect;
 806ca78:	693b      	ldr	r3, [r7, #16]
 806ca7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806ca7c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 806ca7e:	f107 0314 	add.w	r3, r7, #20
 806ca82:	2200      	movs	r2, #0
 806ca84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 806ca86:	4618      	mov	r0, r3
 806ca88:	f7fe feab 	bl	806b7e2 <remove_chain>
 806ca8c:	4603      	mov	r3, r0
 806ca8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 806ca92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806ca96:	2b00      	cmp	r3, #0
 806ca98:	d126      	bne.n	806cae8 <f_open+0x1d4>
							res = move_window(fs, dw);
 806ca9a:	693b      	ldr	r3, [r7, #16]
 806ca9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806ca9e:	4618      	mov	r0, r3
 806caa0:	f7fe fc50 	bl	806b344 <move_window>
 806caa4:	4603      	mov	r3, r0
 806caa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 806caaa:	693b      	ldr	r3, [r7, #16]
 806caac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 806caae:	3a01      	subs	r2, #1
 806cab0:	611a      	str	r2, [r3, #16]
 806cab2:	e019      	b.n	806cae8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 806cab4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806cab8:	2b00      	cmp	r3, #0
 806caba:	d115      	bne.n	806cae8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 806cabc:	7ebb      	ldrb	r3, [r7, #26]
 806cabe:	f003 0310 	and.w	r3, r3, #16
 806cac2:	2b00      	cmp	r3, #0
 806cac4:	d003      	beq.n	806cace <f_open+0x1ba>
					res = FR_NO_FILE;
 806cac6:	2304      	movs	r3, #4
 806cac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806cacc:	e00c      	b.n	806cae8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 806cace:	79fb      	ldrb	r3, [r7, #7]
 806cad0:	f003 0302 	and.w	r3, r3, #2
 806cad4:	2b00      	cmp	r3, #0
 806cad6:	d007      	beq.n	806cae8 <f_open+0x1d4>
 806cad8:	7ebb      	ldrb	r3, [r7, #26]
 806cada:	f003 0301 	and.w	r3, r3, #1
 806cade:	2b00      	cmp	r3, #0
 806cae0:	d002      	beq.n	806cae8 <f_open+0x1d4>
						res = FR_DENIED;
 806cae2:	2307      	movs	r3, #7
 806cae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 806cae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806caec:	2b00      	cmp	r3, #0
 806caee:	d128      	bne.n	806cb42 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 806caf0:	79fb      	ldrb	r3, [r7, #7]
 806caf2:	f003 0308 	and.w	r3, r3, #8
 806caf6:	2b00      	cmp	r3, #0
 806caf8:	d003      	beq.n	806cb02 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 806cafa:	79fb      	ldrb	r3, [r7, #7]
 806cafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806cb00:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 806cb02:	693b      	ldr	r3, [r7, #16]
 806cb04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806cb06:	68fb      	ldr	r3, [r7, #12]
 806cb08:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 806cb0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806cb0c:	68fb      	ldr	r3, [r7, #12]
 806cb0e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 806cb10:	79fb      	ldrb	r3, [r7, #7]
 806cb12:	f023 0301 	bic.w	r3, r3, #1
 806cb16:	2b00      	cmp	r3, #0
 806cb18:	bf14      	ite	ne
 806cb1a:	2301      	movne	r3, #1
 806cb1c:	2300      	moveq	r3, #0
 806cb1e:	b2db      	uxtb	r3, r3
 806cb20:	461a      	mov	r2, r3
 806cb22:	f107 0314 	add.w	r3, r7, #20
 806cb26:	4611      	mov	r1, r2
 806cb28:	4618      	mov	r0, r3
 806cb2a:	f7fe fad9 	bl	806b0e0 <inc_lock>
 806cb2e:	4602      	mov	r2, r0
 806cb30:	68fb      	ldr	r3, [r7, #12]
 806cb32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 806cb34:	68fb      	ldr	r3, [r7, #12]
 806cb36:	691b      	ldr	r3, [r3, #16]
 806cb38:	2b00      	cmp	r3, #0
 806cb3a:	d102      	bne.n	806cb42 <f_open+0x22e>
 806cb3c:	2302      	movs	r3, #2
 806cb3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 806cb42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806cb46:	2b00      	cmp	r3, #0
 806cb48:	f040 8095 	bne.w	806cc76 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 806cb4c:	693b      	ldr	r3, [r7, #16]
 806cb4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806cb50:	4611      	mov	r1, r2
 806cb52:	4618      	mov	r0, r3
 806cb54:	f7ff f8fd 	bl	806bd52 <ld_clust>
 806cb58:	4602      	mov	r2, r0
 806cb5a:	68fb      	ldr	r3, [r7, #12]
 806cb5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 806cb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806cb60:	331c      	adds	r3, #28
 806cb62:	4618      	mov	r0, r3
 806cb64:	f7fe f924 	bl	806adb0 <ld_dword>
 806cb68:	4602      	mov	r2, r0
 806cb6a:	68fb      	ldr	r3, [r7, #12]
 806cb6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 806cb6e:	68fb      	ldr	r3, [r7, #12]
 806cb70:	2200      	movs	r2, #0
 806cb72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 806cb74:	693a      	ldr	r2, [r7, #16]
 806cb76:	68fb      	ldr	r3, [r7, #12]
 806cb78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 806cb7a:	693b      	ldr	r3, [r7, #16]
 806cb7c:	88da      	ldrh	r2, [r3, #6]
 806cb7e:	68fb      	ldr	r3, [r7, #12]
 806cb80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 806cb82:	68fb      	ldr	r3, [r7, #12]
 806cb84:	79fa      	ldrb	r2, [r7, #7]
 806cb86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 806cb88:	68fb      	ldr	r3, [r7, #12]
 806cb8a:	2200      	movs	r2, #0
 806cb8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 806cb8e:	68fb      	ldr	r3, [r7, #12]
 806cb90:	2200      	movs	r2, #0
 806cb92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 806cb94:	68fb      	ldr	r3, [r7, #12]
 806cb96:	2200      	movs	r2, #0
 806cb98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 806cb9a:	68fb      	ldr	r3, [r7, #12]
 806cb9c:	3330      	adds	r3, #48	; 0x30
 806cb9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 806cba2:	2100      	movs	r1, #0
 806cba4:	4618      	mov	r0, r3
 806cba6:	f7fe f98e 	bl	806aec6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 806cbaa:	79fb      	ldrb	r3, [r7, #7]
 806cbac:	f003 0320 	and.w	r3, r3, #32
 806cbb0:	2b00      	cmp	r3, #0
 806cbb2:	d060      	beq.n	806cc76 <f_open+0x362>
 806cbb4:	68fb      	ldr	r3, [r7, #12]
 806cbb6:	68db      	ldr	r3, [r3, #12]
 806cbb8:	2b00      	cmp	r3, #0
 806cbba:	d05c      	beq.n	806cc76 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 806cbbc:	68fb      	ldr	r3, [r7, #12]
 806cbbe:	68da      	ldr	r2, [r3, #12]
 806cbc0:	68fb      	ldr	r3, [r7, #12]
 806cbc2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 806cbc4:	693b      	ldr	r3, [r7, #16]
 806cbc6:	895b      	ldrh	r3, [r3, #10]
 806cbc8:	025b      	lsls	r3, r3, #9
 806cbca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 806cbcc:	68fb      	ldr	r3, [r7, #12]
 806cbce:	689b      	ldr	r3, [r3, #8]
 806cbd0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 806cbd2:	68fb      	ldr	r3, [r7, #12]
 806cbd4:	68db      	ldr	r3, [r3, #12]
 806cbd6:	657b      	str	r3, [r7, #84]	; 0x54
 806cbd8:	e016      	b.n	806cc08 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 806cbda:	68fb      	ldr	r3, [r7, #12]
 806cbdc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 806cbde:	4618      	mov	r0, r3
 806cbe0:	f7fe fc6b 	bl	806b4ba <get_fat>
 806cbe4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 806cbe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 806cbe8:	2b01      	cmp	r3, #1
 806cbea:	d802      	bhi.n	806cbf2 <f_open+0x2de>
 806cbec:	2302      	movs	r3, #2
 806cbee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 806cbf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 806cbf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806cbf8:	d102      	bne.n	806cc00 <f_open+0x2ec>
 806cbfa:	2301      	movs	r3, #1
 806cbfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 806cc00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 806cc02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806cc04:	1ad3      	subs	r3, r2, r3
 806cc06:	657b      	str	r3, [r7, #84]	; 0x54
 806cc08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806cc0c:	2b00      	cmp	r3, #0
 806cc0e:	d103      	bne.n	806cc18 <f_open+0x304>
 806cc10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 806cc12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806cc14:	429a      	cmp	r2, r3
 806cc16:	d8e0      	bhi.n	806cbda <f_open+0x2c6>
				}
				fp->clust = clst;
 806cc18:	68fb      	ldr	r3, [r7, #12]
 806cc1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 806cc1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 806cc1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806cc22:	2b00      	cmp	r3, #0
 806cc24:	d127      	bne.n	806cc76 <f_open+0x362>
 806cc26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 806cc28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806cc2c:	2b00      	cmp	r3, #0
 806cc2e:	d022      	beq.n	806cc76 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 806cc30:	693b      	ldr	r3, [r7, #16]
 806cc32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 806cc34:	4618      	mov	r0, r3
 806cc36:	f7fe fc21 	bl	806b47c <clust2sect>
 806cc3a:	6478      	str	r0, [r7, #68]	; 0x44
 806cc3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 806cc3e:	2b00      	cmp	r3, #0
 806cc40:	d103      	bne.n	806cc4a <f_open+0x336>
						res = FR_INT_ERR;
 806cc42:	2302      	movs	r3, #2
 806cc44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806cc48:	e015      	b.n	806cc76 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 806cc4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 806cc4c:	0a5a      	lsrs	r2, r3, #9
 806cc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 806cc50:	441a      	add	r2, r3
 806cc52:	68fb      	ldr	r3, [r7, #12]
 806cc54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 806cc56:	693b      	ldr	r3, [r7, #16]
 806cc58:	7858      	ldrb	r0, [r3, #1]
 806cc5a:	68fb      	ldr	r3, [r7, #12]
 806cc5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806cc60:	68fb      	ldr	r3, [r7, #12]
 806cc62:	6a1a      	ldr	r2, [r3, #32]
 806cc64:	2301      	movs	r3, #1
 806cc66:	f7fe f82d 	bl	806acc4 <disk_read>
 806cc6a:	4603      	mov	r3, r0
 806cc6c:	2b00      	cmp	r3, #0
 806cc6e:	d002      	beq.n	806cc76 <f_open+0x362>
 806cc70:	2301      	movs	r3, #1
 806cc72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 806cc76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806cc7a:	2b00      	cmp	r3, #0
 806cc7c:	d002      	beq.n	806cc84 <f_open+0x370>
 806cc7e:	68fb      	ldr	r3, [r7, #12]
 806cc80:	2200      	movs	r2, #0
 806cc82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 806cc84:	693b      	ldr	r3, [r7, #16]
 806cc86:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 806cc8a:	4611      	mov	r1, r2
 806cc8c:	4618      	mov	r0, r3
 806cc8e:	f7fe f98d 	bl	806afac <unlock_fs>
 806cc92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 806cc96:	4618      	mov	r0, r3
 806cc98:	3760      	adds	r7, #96	; 0x60
 806cc9a:	46bd      	mov	sp, r7
 806cc9c:	bd80      	pop	{r7, pc}

0806cc9e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 806cc9e:	b580      	push	{r7, lr}
 806cca0:	b08e      	sub	sp, #56	; 0x38
 806cca2:	af00      	add	r7, sp, #0
 806cca4:	60f8      	str	r0, [r7, #12]
 806cca6:	60b9      	str	r1, [r7, #8]
 806cca8:	607a      	str	r2, [r7, #4]
 806ccaa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 806ccac:	68bb      	ldr	r3, [r7, #8]
 806ccae:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 806ccb0:	683b      	ldr	r3, [r7, #0]
 806ccb2:	2200      	movs	r2, #0
 806ccb4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 806ccb6:	68fb      	ldr	r3, [r7, #12]
 806ccb8:	f107 0214 	add.w	r2, r7, #20
 806ccbc:	4611      	mov	r1, r2
 806ccbe:	4618      	mov	r0, r3
 806ccc0:	f7ff fd7c 	bl	806c7bc <validate>
 806ccc4:	4603      	mov	r3, r0
 806ccc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 806ccca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806ccce:	2b00      	cmp	r3, #0
 806ccd0:	d107      	bne.n	806cce2 <f_read+0x44>
 806ccd2:	68fb      	ldr	r3, [r7, #12]
 806ccd4:	7d5b      	ldrb	r3, [r3, #21]
 806ccd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 806ccda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806ccde:	2b00      	cmp	r3, #0
 806cce0:	d009      	beq.n	806ccf6 <f_read+0x58>
 806cce2:	697b      	ldr	r3, [r7, #20]
 806cce4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 806cce8:	4611      	mov	r1, r2
 806ccea:	4618      	mov	r0, r3
 806ccec:	f7fe f95e 	bl	806afac <unlock_fs>
 806ccf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806ccf4:	e13d      	b.n	806cf72 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 806ccf6:	68fb      	ldr	r3, [r7, #12]
 806ccf8:	7d1b      	ldrb	r3, [r3, #20]
 806ccfa:	f003 0301 	and.w	r3, r3, #1
 806ccfe:	2b00      	cmp	r3, #0
 806cd00:	d106      	bne.n	806cd10 <f_read+0x72>
 806cd02:	697b      	ldr	r3, [r7, #20]
 806cd04:	2107      	movs	r1, #7
 806cd06:	4618      	mov	r0, r3
 806cd08:	f7fe f950 	bl	806afac <unlock_fs>
 806cd0c:	2307      	movs	r3, #7
 806cd0e:	e130      	b.n	806cf72 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 806cd10:	68fb      	ldr	r3, [r7, #12]
 806cd12:	68da      	ldr	r2, [r3, #12]
 806cd14:	68fb      	ldr	r3, [r7, #12]
 806cd16:	699b      	ldr	r3, [r3, #24]
 806cd18:	1ad3      	subs	r3, r2, r3
 806cd1a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 806cd1c:	687a      	ldr	r2, [r7, #4]
 806cd1e:	6a3b      	ldr	r3, [r7, #32]
 806cd20:	429a      	cmp	r2, r3
 806cd22:	f240 811c 	bls.w	806cf5e <f_read+0x2c0>
 806cd26:	6a3b      	ldr	r3, [r7, #32]
 806cd28:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 806cd2a:	e118      	b.n	806cf5e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 806cd2c:	68fb      	ldr	r3, [r7, #12]
 806cd2e:	699b      	ldr	r3, [r3, #24]
 806cd30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806cd34:	2b00      	cmp	r3, #0
 806cd36:	f040 80e4 	bne.w	806cf02 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 806cd3a:	68fb      	ldr	r3, [r7, #12]
 806cd3c:	699b      	ldr	r3, [r3, #24]
 806cd3e:	0a5b      	lsrs	r3, r3, #9
 806cd40:	697a      	ldr	r2, [r7, #20]
 806cd42:	8952      	ldrh	r2, [r2, #10]
 806cd44:	3a01      	subs	r2, #1
 806cd46:	4013      	ands	r3, r2
 806cd48:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 806cd4a:	69fb      	ldr	r3, [r7, #28]
 806cd4c:	2b00      	cmp	r3, #0
 806cd4e:	d139      	bne.n	806cdc4 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 806cd50:	68fb      	ldr	r3, [r7, #12]
 806cd52:	699b      	ldr	r3, [r3, #24]
 806cd54:	2b00      	cmp	r3, #0
 806cd56:	d103      	bne.n	806cd60 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 806cd58:	68fb      	ldr	r3, [r7, #12]
 806cd5a:	689b      	ldr	r3, [r3, #8]
 806cd5c:	633b      	str	r3, [r7, #48]	; 0x30
 806cd5e:	e013      	b.n	806cd88 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 806cd60:	68fb      	ldr	r3, [r7, #12]
 806cd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806cd64:	2b00      	cmp	r3, #0
 806cd66:	d007      	beq.n	806cd78 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 806cd68:	68fb      	ldr	r3, [r7, #12]
 806cd6a:	699b      	ldr	r3, [r3, #24]
 806cd6c:	4619      	mov	r1, r3
 806cd6e:	68f8      	ldr	r0, [r7, #12]
 806cd70:	f7fe fe34 	bl	806b9dc <clmt_clust>
 806cd74:	6338      	str	r0, [r7, #48]	; 0x30
 806cd76:	e007      	b.n	806cd88 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 806cd78:	68fa      	ldr	r2, [r7, #12]
 806cd7a:	68fb      	ldr	r3, [r7, #12]
 806cd7c:	69db      	ldr	r3, [r3, #28]
 806cd7e:	4619      	mov	r1, r3
 806cd80:	4610      	mov	r0, r2
 806cd82:	f7fe fb9a 	bl	806b4ba <get_fat>
 806cd86:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 806cd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806cd8a:	2b01      	cmp	r3, #1
 806cd8c:	d809      	bhi.n	806cda2 <f_read+0x104>
 806cd8e:	68fb      	ldr	r3, [r7, #12]
 806cd90:	2202      	movs	r2, #2
 806cd92:	755a      	strb	r2, [r3, #21]
 806cd94:	697b      	ldr	r3, [r7, #20]
 806cd96:	2102      	movs	r1, #2
 806cd98:	4618      	mov	r0, r3
 806cd9a:	f7fe f907 	bl	806afac <unlock_fs>
 806cd9e:	2302      	movs	r3, #2
 806cda0:	e0e7      	b.n	806cf72 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 806cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806cda4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806cda8:	d109      	bne.n	806cdbe <f_read+0x120>
 806cdaa:	68fb      	ldr	r3, [r7, #12]
 806cdac:	2201      	movs	r2, #1
 806cdae:	755a      	strb	r2, [r3, #21]
 806cdb0:	697b      	ldr	r3, [r7, #20]
 806cdb2:	2101      	movs	r1, #1
 806cdb4:	4618      	mov	r0, r3
 806cdb6:	f7fe f8f9 	bl	806afac <unlock_fs>
 806cdba:	2301      	movs	r3, #1
 806cdbc:	e0d9      	b.n	806cf72 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 806cdbe:	68fb      	ldr	r3, [r7, #12]
 806cdc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806cdc2:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 806cdc4:	697a      	ldr	r2, [r7, #20]
 806cdc6:	68fb      	ldr	r3, [r7, #12]
 806cdc8:	69db      	ldr	r3, [r3, #28]
 806cdca:	4619      	mov	r1, r3
 806cdcc:	4610      	mov	r0, r2
 806cdce:	f7fe fb55 	bl	806b47c <clust2sect>
 806cdd2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 806cdd4:	69bb      	ldr	r3, [r7, #24]
 806cdd6:	2b00      	cmp	r3, #0
 806cdd8:	d109      	bne.n	806cdee <f_read+0x150>
 806cdda:	68fb      	ldr	r3, [r7, #12]
 806cddc:	2202      	movs	r2, #2
 806cdde:	755a      	strb	r2, [r3, #21]
 806cde0:	697b      	ldr	r3, [r7, #20]
 806cde2:	2102      	movs	r1, #2
 806cde4:	4618      	mov	r0, r3
 806cde6:	f7fe f8e1 	bl	806afac <unlock_fs>
 806cdea:	2302      	movs	r3, #2
 806cdec:	e0c1      	b.n	806cf72 <f_read+0x2d4>
			sect += csect;
 806cdee:	69ba      	ldr	r2, [r7, #24]
 806cdf0:	69fb      	ldr	r3, [r7, #28]
 806cdf2:	4413      	add	r3, r2
 806cdf4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 806cdf6:	687b      	ldr	r3, [r7, #4]
 806cdf8:	0a5b      	lsrs	r3, r3, #9
 806cdfa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 806cdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806cdfe:	2b00      	cmp	r3, #0
 806ce00:	d03e      	beq.n	806ce80 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 806ce02:	69fa      	ldr	r2, [r7, #28]
 806ce04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806ce06:	4413      	add	r3, r2
 806ce08:	697a      	ldr	r2, [r7, #20]
 806ce0a:	8952      	ldrh	r2, [r2, #10]
 806ce0c:	4293      	cmp	r3, r2
 806ce0e:	d905      	bls.n	806ce1c <f_read+0x17e>
					cc = fs->csize - csect;
 806ce10:	697b      	ldr	r3, [r7, #20]
 806ce12:	895b      	ldrh	r3, [r3, #10]
 806ce14:	461a      	mov	r2, r3
 806ce16:	69fb      	ldr	r3, [r7, #28]
 806ce18:	1ad3      	subs	r3, r2, r3
 806ce1a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806ce1c:	697b      	ldr	r3, [r7, #20]
 806ce1e:	7858      	ldrb	r0, [r3, #1]
 806ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806ce22:	69ba      	ldr	r2, [r7, #24]
 806ce24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806ce26:	f7fd ff4d 	bl	806acc4 <disk_read>
 806ce2a:	4603      	mov	r3, r0
 806ce2c:	2b00      	cmp	r3, #0
 806ce2e:	d009      	beq.n	806ce44 <f_read+0x1a6>
 806ce30:	68fb      	ldr	r3, [r7, #12]
 806ce32:	2201      	movs	r2, #1
 806ce34:	755a      	strb	r2, [r3, #21]
 806ce36:	697b      	ldr	r3, [r7, #20]
 806ce38:	2101      	movs	r1, #1
 806ce3a:	4618      	mov	r0, r3
 806ce3c:	f7fe f8b6 	bl	806afac <unlock_fs>
 806ce40:	2301      	movs	r3, #1
 806ce42:	e096      	b.n	806cf72 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 806ce44:	68fb      	ldr	r3, [r7, #12]
 806ce46:	7d1b      	ldrb	r3, [r3, #20]
 806ce48:	b25b      	sxtb	r3, r3
 806ce4a:	2b00      	cmp	r3, #0
 806ce4c:	da14      	bge.n	806ce78 <f_read+0x1da>
 806ce4e:	68fb      	ldr	r3, [r7, #12]
 806ce50:	6a1a      	ldr	r2, [r3, #32]
 806ce52:	69bb      	ldr	r3, [r7, #24]
 806ce54:	1ad3      	subs	r3, r2, r3
 806ce56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806ce58:	429a      	cmp	r2, r3
 806ce5a:	d90d      	bls.n	806ce78 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 806ce5c:	68fb      	ldr	r3, [r7, #12]
 806ce5e:	6a1a      	ldr	r2, [r3, #32]
 806ce60:	69bb      	ldr	r3, [r7, #24]
 806ce62:	1ad3      	subs	r3, r2, r3
 806ce64:	025b      	lsls	r3, r3, #9
 806ce66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806ce68:	18d0      	adds	r0, r2, r3
 806ce6a:	68fb      	ldr	r3, [r7, #12]
 806ce6c:	3330      	adds	r3, #48	; 0x30
 806ce6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 806ce72:	4619      	mov	r1, r3
 806ce74:	f7fe f806 	bl	806ae84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 806ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806ce7a:	025b      	lsls	r3, r3, #9
 806ce7c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 806ce7e:	e05a      	b.n	806cf36 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 806ce80:	68fb      	ldr	r3, [r7, #12]
 806ce82:	6a1b      	ldr	r3, [r3, #32]
 806ce84:	69ba      	ldr	r2, [r7, #24]
 806ce86:	429a      	cmp	r2, r3
 806ce88:	d038      	beq.n	806cefc <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 806ce8a:	68fb      	ldr	r3, [r7, #12]
 806ce8c:	7d1b      	ldrb	r3, [r3, #20]
 806ce8e:	b25b      	sxtb	r3, r3
 806ce90:	2b00      	cmp	r3, #0
 806ce92:	da1d      	bge.n	806ced0 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806ce94:	697b      	ldr	r3, [r7, #20]
 806ce96:	7858      	ldrb	r0, [r3, #1]
 806ce98:	68fb      	ldr	r3, [r7, #12]
 806ce9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806ce9e:	68fb      	ldr	r3, [r7, #12]
 806cea0:	6a1a      	ldr	r2, [r3, #32]
 806cea2:	2301      	movs	r3, #1
 806cea4:	f7fd ff2e 	bl	806ad04 <disk_write>
 806cea8:	4603      	mov	r3, r0
 806ceaa:	2b00      	cmp	r3, #0
 806ceac:	d009      	beq.n	806cec2 <f_read+0x224>
 806ceae:	68fb      	ldr	r3, [r7, #12]
 806ceb0:	2201      	movs	r2, #1
 806ceb2:	755a      	strb	r2, [r3, #21]
 806ceb4:	697b      	ldr	r3, [r7, #20]
 806ceb6:	2101      	movs	r1, #1
 806ceb8:	4618      	mov	r0, r3
 806ceba:	f7fe f877 	bl	806afac <unlock_fs>
 806cebe:	2301      	movs	r3, #1
 806cec0:	e057      	b.n	806cf72 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 806cec2:	68fb      	ldr	r3, [r7, #12]
 806cec4:	7d1b      	ldrb	r3, [r3, #20]
 806cec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806ceca:	b2da      	uxtb	r2, r3
 806cecc:	68fb      	ldr	r3, [r7, #12]
 806cece:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 806ced0:	697b      	ldr	r3, [r7, #20]
 806ced2:	7858      	ldrb	r0, [r3, #1]
 806ced4:	68fb      	ldr	r3, [r7, #12]
 806ced6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806ceda:	2301      	movs	r3, #1
 806cedc:	69ba      	ldr	r2, [r7, #24]
 806cede:	f7fd fef1 	bl	806acc4 <disk_read>
 806cee2:	4603      	mov	r3, r0
 806cee4:	2b00      	cmp	r3, #0
 806cee6:	d009      	beq.n	806cefc <f_read+0x25e>
 806cee8:	68fb      	ldr	r3, [r7, #12]
 806ceea:	2201      	movs	r2, #1
 806ceec:	755a      	strb	r2, [r3, #21]
 806ceee:	697b      	ldr	r3, [r7, #20]
 806cef0:	2101      	movs	r1, #1
 806cef2:	4618      	mov	r0, r3
 806cef4:	f7fe f85a 	bl	806afac <unlock_fs>
 806cef8:	2301      	movs	r3, #1
 806cefa:	e03a      	b.n	806cf72 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 806cefc:	68fb      	ldr	r3, [r7, #12]
 806cefe:	69ba      	ldr	r2, [r7, #24]
 806cf00:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 806cf02:	68fb      	ldr	r3, [r7, #12]
 806cf04:	699b      	ldr	r3, [r3, #24]
 806cf06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806cf0a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 806cf0e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 806cf10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806cf12:	687b      	ldr	r3, [r7, #4]
 806cf14:	429a      	cmp	r2, r3
 806cf16:	d901      	bls.n	806cf1c <f_read+0x27e>
 806cf18:	687b      	ldr	r3, [r7, #4]
 806cf1a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 806cf1c:	68fb      	ldr	r3, [r7, #12]
 806cf1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 806cf22:	68fb      	ldr	r3, [r7, #12]
 806cf24:	699b      	ldr	r3, [r3, #24]
 806cf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806cf2a:	4413      	add	r3, r2
 806cf2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806cf2e:	4619      	mov	r1, r3
 806cf30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806cf32:	f7fd ffa7 	bl	806ae84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 806cf36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806cf3a:	4413      	add	r3, r2
 806cf3c:	627b      	str	r3, [r7, #36]	; 0x24
 806cf3e:	68fb      	ldr	r3, [r7, #12]
 806cf40:	699a      	ldr	r2, [r3, #24]
 806cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806cf44:	441a      	add	r2, r3
 806cf46:	68fb      	ldr	r3, [r7, #12]
 806cf48:	619a      	str	r2, [r3, #24]
 806cf4a:	683b      	ldr	r3, [r7, #0]
 806cf4c:	681a      	ldr	r2, [r3, #0]
 806cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806cf50:	441a      	add	r2, r3
 806cf52:	683b      	ldr	r3, [r7, #0]
 806cf54:	601a      	str	r2, [r3, #0]
 806cf56:	687a      	ldr	r2, [r7, #4]
 806cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806cf5a:	1ad3      	subs	r3, r2, r3
 806cf5c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 806cf5e:	687b      	ldr	r3, [r7, #4]
 806cf60:	2b00      	cmp	r3, #0
 806cf62:	f47f aee3 	bne.w	806cd2c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 806cf66:	697b      	ldr	r3, [r7, #20]
 806cf68:	2100      	movs	r1, #0
 806cf6a:	4618      	mov	r0, r3
 806cf6c:	f7fe f81e 	bl	806afac <unlock_fs>
 806cf70:	2300      	movs	r3, #0
}
 806cf72:	4618      	mov	r0, r3
 806cf74:	3738      	adds	r7, #56	; 0x38
 806cf76:	46bd      	mov	sp, r7
 806cf78:	bd80      	pop	{r7, pc}

0806cf7a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 806cf7a:	b580      	push	{r7, lr}
 806cf7c:	b08c      	sub	sp, #48	; 0x30
 806cf7e:	af00      	add	r7, sp, #0
 806cf80:	60f8      	str	r0, [r7, #12]
 806cf82:	60b9      	str	r1, [r7, #8]
 806cf84:	607a      	str	r2, [r7, #4]
 806cf86:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 806cf88:	68bb      	ldr	r3, [r7, #8]
 806cf8a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 806cf8c:	683b      	ldr	r3, [r7, #0]
 806cf8e:	2200      	movs	r2, #0
 806cf90:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 806cf92:	68fb      	ldr	r3, [r7, #12]
 806cf94:	f107 0210 	add.w	r2, r7, #16
 806cf98:	4611      	mov	r1, r2
 806cf9a:	4618      	mov	r0, r3
 806cf9c:	f7ff fc0e 	bl	806c7bc <validate>
 806cfa0:	4603      	mov	r3, r0
 806cfa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 806cfa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806cfaa:	2b00      	cmp	r3, #0
 806cfac:	d107      	bne.n	806cfbe <f_write+0x44>
 806cfae:	68fb      	ldr	r3, [r7, #12]
 806cfb0:	7d5b      	ldrb	r3, [r3, #21]
 806cfb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 806cfb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806cfba:	2b00      	cmp	r3, #0
 806cfbc:	d009      	beq.n	806cfd2 <f_write+0x58>
 806cfbe:	693b      	ldr	r3, [r7, #16]
 806cfc0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 806cfc4:	4611      	mov	r1, r2
 806cfc6:	4618      	mov	r0, r3
 806cfc8:	f7fd fff0 	bl	806afac <unlock_fs>
 806cfcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806cfd0:	e173      	b.n	806d2ba <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 806cfd2:	68fb      	ldr	r3, [r7, #12]
 806cfd4:	7d1b      	ldrb	r3, [r3, #20]
 806cfd6:	f003 0302 	and.w	r3, r3, #2
 806cfda:	2b00      	cmp	r3, #0
 806cfdc:	d106      	bne.n	806cfec <f_write+0x72>
 806cfde:	693b      	ldr	r3, [r7, #16]
 806cfe0:	2107      	movs	r1, #7
 806cfe2:	4618      	mov	r0, r3
 806cfe4:	f7fd ffe2 	bl	806afac <unlock_fs>
 806cfe8:	2307      	movs	r3, #7
 806cfea:	e166      	b.n	806d2ba <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 806cfec:	68fb      	ldr	r3, [r7, #12]
 806cfee:	699a      	ldr	r2, [r3, #24]
 806cff0:	687b      	ldr	r3, [r7, #4]
 806cff2:	441a      	add	r2, r3
 806cff4:	68fb      	ldr	r3, [r7, #12]
 806cff6:	699b      	ldr	r3, [r3, #24]
 806cff8:	429a      	cmp	r2, r3
 806cffa:	f080 814b 	bcs.w	806d294 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 806cffe:	68fb      	ldr	r3, [r7, #12]
 806d000:	699b      	ldr	r3, [r3, #24]
 806d002:	43db      	mvns	r3, r3
 806d004:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 806d006:	e145      	b.n	806d294 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 806d008:	68fb      	ldr	r3, [r7, #12]
 806d00a:	699b      	ldr	r3, [r3, #24]
 806d00c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d010:	2b00      	cmp	r3, #0
 806d012:	f040 8101 	bne.w	806d218 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 806d016:	68fb      	ldr	r3, [r7, #12]
 806d018:	699b      	ldr	r3, [r3, #24]
 806d01a:	0a5b      	lsrs	r3, r3, #9
 806d01c:	693a      	ldr	r2, [r7, #16]
 806d01e:	8952      	ldrh	r2, [r2, #10]
 806d020:	3a01      	subs	r2, #1
 806d022:	4013      	ands	r3, r2
 806d024:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 806d026:	69bb      	ldr	r3, [r7, #24]
 806d028:	2b00      	cmp	r3, #0
 806d02a:	d14d      	bne.n	806d0c8 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 806d02c:	68fb      	ldr	r3, [r7, #12]
 806d02e:	699b      	ldr	r3, [r3, #24]
 806d030:	2b00      	cmp	r3, #0
 806d032:	d10c      	bne.n	806d04e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 806d034:	68fb      	ldr	r3, [r7, #12]
 806d036:	689b      	ldr	r3, [r3, #8]
 806d038:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 806d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d03c:	2b00      	cmp	r3, #0
 806d03e:	d11a      	bne.n	806d076 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 806d040:	68fb      	ldr	r3, [r7, #12]
 806d042:	2100      	movs	r1, #0
 806d044:	4618      	mov	r0, r3
 806d046:	f7fe fc31 	bl	806b8ac <create_chain>
 806d04a:	62b8      	str	r0, [r7, #40]	; 0x28
 806d04c:	e013      	b.n	806d076 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 806d04e:	68fb      	ldr	r3, [r7, #12]
 806d050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806d052:	2b00      	cmp	r3, #0
 806d054:	d007      	beq.n	806d066 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 806d056:	68fb      	ldr	r3, [r7, #12]
 806d058:	699b      	ldr	r3, [r3, #24]
 806d05a:	4619      	mov	r1, r3
 806d05c:	68f8      	ldr	r0, [r7, #12]
 806d05e:	f7fe fcbd 	bl	806b9dc <clmt_clust>
 806d062:	62b8      	str	r0, [r7, #40]	; 0x28
 806d064:	e007      	b.n	806d076 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 806d066:	68fa      	ldr	r2, [r7, #12]
 806d068:	68fb      	ldr	r3, [r7, #12]
 806d06a:	69db      	ldr	r3, [r3, #28]
 806d06c:	4619      	mov	r1, r3
 806d06e:	4610      	mov	r0, r2
 806d070:	f7fe fc1c 	bl	806b8ac <create_chain>
 806d074:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 806d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d078:	2b00      	cmp	r3, #0
 806d07a:	f000 8110 	beq.w	806d29e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 806d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d080:	2b01      	cmp	r3, #1
 806d082:	d109      	bne.n	806d098 <f_write+0x11e>
 806d084:	68fb      	ldr	r3, [r7, #12]
 806d086:	2202      	movs	r2, #2
 806d088:	755a      	strb	r2, [r3, #21]
 806d08a:	693b      	ldr	r3, [r7, #16]
 806d08c:	2102      	movs	r1, #2
 806d08e:	4618      	mov	r0, r3
 806d090:	f7fd ff8c 	bl	806afac <unlock_fs>
 806d094:	2302      	movs	r3, #2
 806d096:	e110      	b.n	806d2ba <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 806d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d09a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806d09e:	d109      	bne.n	806d0b4 <f_write+0x13a>
 806d0a0:	68fb      	ldr	r3, [r7, #12]
 806d0a2:	2201      	movs	r2, #1
 806d0a4:	755a      	strb	r2, [r3, #21]
 806d0a6:	693b      	ldr	r3, [r7, #16]
 806d0a8:	2101      	movs	r1, #1
 806d0aa:	4618      	mov	r0, r3
 806d0ac:	f7fd ff7e 	bl	806afac <unlock_fs>
 806d0b0:	2301      	movs	r3, #1
 806d0b2:	e102      	b.n	806d2ba <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 806d0b4:	68fb      	ldr	r3, [r7, #12]
 806d0b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806d0b8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 806d0ba:	68fb      	ldr	r3, [r7, #12]
 806d0bc:	689b      	ldr	r3, [r3, #8]
 806d0be:	2b00      	cmp	r3, #0
 806d0c0:	d102      	bne.n	806d0c8 <f_write+0x14e>
 806d0c2:	68fb      	ldr	r3, [r7, #12]
 806d0c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806d0c6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 806d0c8:	68fb      	ldr	r3, [r7, #12]
 806d0ca:	7d1b      	ldrb	r3, [r3, #20]
 806d0cc:	b25b      	sxtb	r3, r3
 806d0ce:	2b00      	cmp	r3, #0
 806d0d0:	da1d      	bge.n	806d10e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806d0d2:	693b      	ldr	r3, [r7, #16]
 806d0d4:	7858      	ldrb	r0, [r3, #1]
 806d0d6:	68fb      	ldr	r3, [r7, #12]
 806d0d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d0dc:	68fb      	ldr	r3, [r7, #12]
 806d0de:	6a1a      	ldr	r2, [r3, #32]
 806d0e0:	2301      	movs	r3, #1
 806d0e2:	f7fd fe0f 	bl	806ad04 <disk_write>
 806d0e6:	4603      	mov	r3, r0
 806d0e8:	2b00      	cmp	r3, #0
 806d0ea:	d009      	beq.n	806d100 <f_write+0x186>
 806d0ec:	68fb      	ldr	r3, [r7, #12]
 806d0ee:	2201      	movs	r2, #1
 806d0f0:	755a      	strb	r2, [r3, #21]
 806d0f2:	693b      	ldr	r3, [r7, #16]
 806d0f4:	2101      	movs	r1, #1
 806d0f6:	4618      	mov	r0, r3
 806d0f8:	f7fd ff58 	bl	806afac <unlock_fs>
 806d0fc:	2301      	movs	r3, #1
 806d0fe:	e0dc      	b.n	806d2ba <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 806d100:	68fb      	ldr	r3, [r7, #12]
 806d102:	7d1b      	ldrb	r3, [r3, #20]
 806d104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806d108:	b2da      	uxtb	r2, r3
 806d10a:	68fb      	ldr	r3, [r7, #12]
 806d10c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 806d10e:	693a      	ldr	r2, [r7, #16]
 806d110:	68fb      	ldr	r3, [r7, #12]
 806d112:	69db      	ldr	r3, [r3, #28]
 806d114:	4619      	mov	r1, r3
 806d116:	4610      	mov	r0, r2
 806d118:	f7fe f9b0 	bl	806b47c <clust2sect>
 806d11c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 806d11e:	697b      	ldr	r3, [r7, #20]
 806d120:	2b00      	cmp	r3, #0
 806d122:	d109      	bne.n	806d138 <f_write+0x1be>
 806d124:	68fb      	ldr	r3, [r7, #12]
 806d126:	2202      	movs	r2, #2
 806d128:	755a      	strb	r2, [r3, #21]
 806d12a:	693b      	ldr	r3, [r7, #16]
 806d12c:	2102      	movs	r1, #2
 806d12e:	4618      	mov	r0, r3
 806d130:	f7fd ff3c 	bl	806afac <unlock_fs>
 806d134:	2302      	movs	r3, #2
 806d136:	e0c0      	b.n	806d2ba <f_write+0x340>
			sect += csect;
 806d138:	697a      	ldr	r2, [r7, #20]
 806d13a:	69bb      	ldr	r3, [r7, #24]
 806d13c:	4413      	add	r3, r2
 806d13e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 806d140:	687b      	ldr	r3, [r7, #4]
 806d142:	0a5b      	lsrs	r3, r3, #9
 806d144:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 806d146:	6a3b      	ldr	r3, [r7, #32]
 806d148:	2b00      	cmp	r3, #0
 806d14a:	d041      	beq.n	806d1d0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 806d14c:	69ba      	ldr	r2, [r7, #24]
 806d14e:	6a3b      	ldr	r3, [r7, #32]
 806d150:	4413      	add	r3, r2
 806d152:	693a      	ldr	r2, [r7, #16]
 806d154:	8952      	ldrh	r2, [r2, #10]
 806d156:	4293      	cmp	r3, r2
 806d158:	d905      	bls.n	806d166 <f_write+0x1ec>
					cc = fs->csize - csect;
 806d15a:	693b      	ldr	r3, [r7, #16]
 806d15c:	895b      	ldrh	r3, [r3, #10]
 806d15e:	461a      	mov	r2, r3
 806d160:	69bb      	ldr	r3, [r7, #24]
 806d162:	1ad3      	subs	r3, r2, r3
 806d164:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806d166:	693b      	ldr	r3, [r7, #16]
 806d168:	7858      	ldrb	r0, [r3, #1]
 806d16a:	6a3b      	ldr	r3, [r7, #32]
 806d16c:	697a      	ldr	r2, [r7, #20]
 806d16e:	69f9      	ldr	r1, [r7, #28]
 806d170:	f7fd fdc8 	bl	806ad04 <disk_write>
 806d174:	4603      	mov	r3, r0
 806d176:	2b00      	cmp	r3, #0
 806d178:	d009      	beq.n	806d18e <f_write+0x214>
 806d17a:	68fb      	ldr	r3, [r7, #12]
 806d17c:	2201      	movs	r2, #1
 806d17e:	755a      	strb	r2, [r3, #21]
 806d180:	693b      	ldr	r3, [r7, #16]
 806d182:	2101      	movs	r1, #1
 806d184:	4618      	mov	r0, r3
 806d186:	f7fd ff11 	bl	806afac <unlock_fs>
 806d18a:	2301      	movs	r3, #1
 806d18c:	e095      	b.n	806d2ba <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 806d18e:	68fb      	ldr	r3, [r7, #12]
 806d190:	6a1a      	ldr	r2, [r3, #32]
 806d192:	697b      	ldr	r3, [r7, #20]
 806d194:	1ad3      	subs	r3, r2, r3
 806d196:	6a3a      	ldr	r2, [r7, #32]
 806d198:	429a      	cmp	r2, r3
 806d19a:	d915      	bls.n	806d1c8 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 806d19c:	68fb      	ldr	r3, [r7, #12]
 806d19e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 806d1a2:	68fb      	ldr	r3, [r7, #12]
 806d1a4:	6a1a      	ldr	r2, [r3, #32]
 806d1a6:	697b      	ldr	r3, [r7, #20]
 806d1a8:	1ad3      	subs	r3, r2, r3
 806d1aa:	025b      	lsls	r3, r3, #9
 806d1ac:	69fa      	ldr	r2, [r7, #28]
 806d1ae:	4413      	add	r3, r2
 806d1b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 806d1b4:	4619      	mov	r1, r3
 806d1b6:	f7fd fe65 	bl	806ae84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 806d1ba:	68fb      	ldr	r3, [r7, #12]
 806d1bc:	7d1b      	ldrb	r3, [r3, #20]
 806d1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806d1c2:	b2da      	uxtb	r2, r3
 806d1c4:	68fb      	ldr	r3, [r7, #12]
 806d1c6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 806d1c8:	6a3b      	ldr	r3, [r7, #32]
 806d1ca:	025b      	lsls	r3, r3, #9
 806d1cc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 806d1ce:	e044      	b.n	806d25a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 806d1d0:	68fb      	ldr	r3, [r7, #12]
 806d1d2:	6a1b      	ldr	r3, [r3, #32]
 806d1d4:	697a      	ldr	r2, [r7, #20]
 806d1d6:	429a      	cmp	r2, r3
 806d1d8:	d01b      	beq.n	806d212 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 806d1da:	68fb      	ldr	r3, [r7, #12]
 806d1dc:	699a      	ldr	r2, [r3, #24]
 806d1de:	68fb      	ldr	r3, [r7, #12]
 806d1e0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 806d1e2:	429a      	cmp	r2, r3
 806d1e4:	d215      	bcs.n	806d212 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 806d1e6:	693b      	ldr	r3, [r7, #16]
 806d1e8:	7858      	ldrb	r0, [r3, #1]
 806d1ea:	68fb      	ldr	r3, [r7, #12]
 806d1ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d1f0:	2301      	movs	r3, #1
 806d1f2:	697a      	ldr	r2, [r7, #20]
 806d1f4:	f7fd fd66 	bl	806acc4 <disk_read>
 806d1f8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 806d1fa:	2b00      	cmp	r3, #0
 806d1fc:	d009      	beq.n	806d212 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 806d1fe:	68fb      	ldr	r3, [r7, #12]
 806d200:	2201      	movs	r2, #1
 806d202:	755a      	strb	r2, [r3, #21]
 806d204:	693b      	ldr	r3, [r7, #16]
 806d206:	2101      	movs	r1, #1
 806d208:	4618      	mov	r0, r3
 806d20a:	f7fd fecf 	bl	806afac <unlock_fs>
 806d20e:	2301      	movs	r3, #1
 806d210:	e053      	b.n	806d2ba <f_write+0x340>
			}
#endif
			fp->sect = sect;
 806d212:	68fb      	ldr	r3, [r7, #12]
 806d214:	697a      	ldr	r2, [r7, #20]
 806d216:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 806d218:	68fb      	ldr	r3, [r7, #12]
 806d21a:	699b      	ldr	r3, [r3, #24]
 806d21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d220:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 806d224:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 806d226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806d228:	687b      	ldr	r3, [r7, #4]
 806d22a:	429a      	cmp	r2, r3
 806d22c:	d901      	bls.n	806d232 <f_write+0x2b8>
 806d22e:	687b      	ldr	r3, [r7, #4]
 806d230:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 806d232:	68fb      	ldr	r3, [r7, #12]
 806d234:	f103 0230 	add.w	r2, r3, #48	; 0x30
 806d238:	68fb      	ldr	r3, [r7, #12]
 806d23a:	699b      	ldr	r3, [r3, #24]
 806d23c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d240:	4413      	add	r3, r2
 806d242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806d244:	69f9      	ldr	r1, [r7, #28]
 806d246:	4618      	mov	r0, r3
 806d248:	f7fd fe1c 	bl	806ae84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 806d24c:	68fb      	ldr	r3, [r7, #12]
 806d24e:	7d1b      	ldrb	r3, [r3, #20]
 806d250:	f063 037f 	orn	r3, r3, #127	; 0x7f
 806d254:	b2da      	uxtb	r2, r3
 806d256:	68fb      	ldr	r3, [r7, #12]
 806d258:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 806d25a:	69fa      	ldr	r2, [r7, #28]
 806d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806d25e:	4413      	add	r3, r2
 806d260:	61fb      	str	r3, [r7, #28]
 806d262:	68fb      	ldr	r3, [r7, #12]
 806d264:	699a      	ldr	r2, [r3, #24]
 806d266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806d268:	441a      	add	r2, r3
 806d26a:	68fb      	ldr	r3, [r7, #12]
 806d26c:	619a      	str	r2, [r3, #24]
 806d26e:	68fb      	ldr	r3, [r7, #12]
 806d270:	68da      	ldr	r2, [r3, #12]
 806d272:	68fb      	ldr	r3, [r7, #12]
 806d274:	699b      	ldr	r3, [r3, #24]
 806d276:	429a      	cmp	r2, r3
 806d278:	bf38      	it	cc
 806d27a:	461a      	movcc	r2, r3
 806d27c:	68fb      	ldr	r3, [r7, #12]
 806d27e:	60da      	str	r2, [r3, #12]
 806d280:	683b      	ldr	r3, [r7, #0]
 806d282:	681a      	ldr	r2, [r3, #0]
 806d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806d286:	441a      	add	r2, r3
 806d288:	683b      	ldr	r3, [r7, #0]
 806d28a:	601a      	str	r2, [r3, #0]
 806d28c:	687a      	ldr	r2, [r7, #4]
 806d28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806d290:	1ad3      	subs	r3, r2, r3
 806d292:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 806d294:	687b      	ldr	r3, [r7, #4]
 806d296:	2b00      	cmp	r3, #0
 806d298:	f47f aeb6 	bne.w	806d008 <f_write+0x8e>
 806d29c:	e000      	b.n	806d2a0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 806d29e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 806d2a0:	68fb      	ldr	r3, [r7, #12]
 806d2a2:	7d1b      	ldrb	r3, [r3, #20]
 806d2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806d2a8:	b2da      	uxtb	r2, r3
 806d2aa:	68fb      	ldr	r3, [r7, #12]
 806d2ac:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 806d2ae:	693b      	ldr	r3, [r7, #16]
 806d2b0:	2100      	movs	r1, #0
 806d2b2:	4618      	mov	r0, r3
 806d2b4:	f7fd fe7a 	bl	806afac <unlock_fs>
 806d2b8:	2300      	movs	r3, #0
}
 806d2ba:	4618      	mov	r0, r3
 806d2bc:	3730      	adds	r7, #48	; 0x30
 806d2be:	46bd      	mov	sp, r7
 806d2c0:	bd80      	pop	{r7, pc}

0806d2c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 806d2c2:	b580      	push	{r7, lr}
 806d2c4:	b086      	sub	sp, #24
 806d2c6:	af00      	add	r7, sp, #0
 806d2c8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 806d2ca:	687b      	ldr	r3, [r7, #4]
 806d2cc:	f107 0208 	add.w	r2, r7, #8
 806d2d0:	4611      	mov	r1, r2
 806d2d2:	4618      	mov	r0, r3
 806d2d4:	f7ff fa72 	bl	806c7bc <validate>
 806d2d8:	4603      	mov	r3, r0
 806d2da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 806d2dc:	7dfb      	ldrb	r3, [r7, #23]
 806d2de:	2b00      	cmp	r3, #0
 806d2e0:	d16d      	bne.n	806d3be <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 806d2e2:	687b      	ldr	r3, [r7, #4]
 806d2e4:	7d1b      	ldrb	r3, [r3, #20]
 806d2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806d2ea:	2b00      	cmp	r3, #0
 806d2ec:	d067      	beq.n	806d3be <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 806d2ee:	687b      	ldr	r3, [r7, #4]
 806d2f0:	7d1b      	ldrb	r3, [r3, #20]
 806d2f2:	b25b      	sxtb	r3, r3
 806d2f4:	2b00      	cmp	r3, #0
 806d2f6:	da1a      	bge.n	806d32e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 806d2f8:	68bb      	ldr	r3, [r7, #8]
 806d2fa:	7858      	ldrb	r0, [r3, #1]
 806d2fc:	687b      	ldr	r3, [r7, #4]
 806d2fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d302:	687b      	ldr	r3, [r7, #4]
 806d304:	6a1a      	ldr	r2, [r3, #32]
 806d306:	2301      	movs	r3, #1
 806d308:	f7fd fcfc 	bl	806ad04 <disk_write>
 806d30c:	4603      	mov	r3, r0
 806d30e:	2b00      	cmp	r3, #0
 806d310:	d006      	beq.n	806d320 <f_sync+0x5e>
 806d312:	68bb      	ldr	r3, [r7, #8]
 806d314:	2101      	movs	r1, #1
 806d316:	4618      	mov	r0, r3
 806d318:	f7fd fe48 	bl	806afac <unlock_fs>
 806d31c:	2301      	movs	r3, #1
 806d31e:	e055      	b.n	806d3cc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 806d320:	687b      	ldr	r3, [r7, #4]
 806d322:	7d1b      	ldrb	r3, [r3, #20]
 806d324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806d328:	b2da      	uxtb	r2, r3
 806d32a:	687b      	ldr	r3, [r7, #4]
 806d32c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 806d32e:	f7fc ff4b 	bl	806a1c8 <get_fattime>
 806d332:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 806d334:	68ba      	ldr	r2, [r7, #8]
 806d336:	687b      	ldr	r3, [r7, #4]
 806d338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806d33a:	4619      	mov	r1, r3
 806d33c:	4610      	mov	r0, r2
 806d33e:	f7fe f801 	bl	806b344 <move_window>
 806d342:	4603      	mov	r3, r0
 806d344:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 806d346:	7dfb      	ldrb	r3, [r7, #23]
 806d348:	2b00      	cmp	r3, #0
 806d34a:	d138      	bne.n	806d3be <f_sync+0xfc>
					dir = fp->dir_ptr;
 806d34c:	687b      	ldr	r3, [r7, #4]
 806d34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806d350:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 806d352:	68fb      	ldr	r3, [r7, #12]
 806d354:	330b      	adds	r3, #11
 806d356:	781a      	ldrb	r2, [r3, #0]
 806d358:	68fb      	ldr	r3, [r7, #12]
 806d35a:	330b      	adds	r3, #11
 806d35c:	f042 0220 	orr.w	r2, r2, #32
 806d360:	b2d2      	uxtb	r2, r2
 806d362:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 806d364:	687b      	ldr	r3, [r7, #4]
 806d366:	6818      	ldr	r0, [r3, #0]
 806d368:	687b      	ldr	r3, [r7, #4]
 806d36a:	689b      	ldr	r3, [r3, #8]
 806d36c:	461a      	mov	r2, r3
 806d36e:	68f9      	ldr	r1, [r7, #12]
 806d370:	f7fe fd0e 	bl	806bd90 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 806d374:	68fb      	ldr	r3, [r7, #12]
 806d376:	f103 021c 	add.w	r2, r3, #28
 806d37a:	687b      	ldr	r3, [r7, #4]
 806d37c:	68db      	ldr	r3, [r3, #12]
 806d37e:	4619      	mov	r1, r3
 806d380:	4610      	mov	r0, r2
 806d382:	f7fd fd53 	bl	806ae2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 806d386:	68fb      	ldr	r3, [r7, #12]
 806d388:	3316      	adds	r3, #22
 806d38a:	6939      	ldr	r1, [r7, #16]
 806d38c:	4618      	mov	r0, r3
 806d38e:	f7fd fd4d 	bl	806ae2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 806d392:	68fb      	ldr	r3, [r7, #12]
 806d394:	3312      	adds	r3, #18
 806d396:	2100      	movs	r1, #0
 806d398:	4618      	mov	r0, r3
 806d39a:	f7fd fd2c 	bl	806adf6 <st_word>
					fs->wflag = 1;
 806d39e:	68bb      	ldr	r3, [r7, #8]
 806d3a0:	2201      	movs	r2, #1
 806d3a2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 806d3a4:	68bb      	ldr	r3, [r7, #8]
 806d3a6:	4618      	mov	r0, r3
 806d3a8:	f7fd fffa 	bl	806b3a0 <sync_fs>
 806d3ac:	4603      	mov	r3, r0
 806d3ae:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 806d3b0:	687b      	ldr	r3, [r7, #4]
 806d3b2:	7d1b      	ldrb	r3, [r3, #20]
 806d3b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 806d3b8:	b2da      	uxtb	r2, r3
 806d3ba:	687b      	ldr	r3, [r7, #4]
 806d3bc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 806d3be:	68bb      	ldr	r3, [r7, #8]
 806d3c0:	7dfa      	ldrb	r2, [r7, #23]
 806d3c2:	4611      	mov	r1, r2
 806d3c4:	4618      	mov	r0, r3
 806d3c6:	f7fd fdf1 	bl	806afac <unlock_fs>
 806d3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 806d3cc:	4618      	mov	r0, r3
 806d3ce:	3718      	adds	r7, #24
 806d3d0:	46bd      	mov	sp, r7
 806d3d2:	bd80      	pop	{r7, pc}

0806d3d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 806d3d4:	b580      	push	{r7, lr}
 806d3d6:	b084      	sub	sp, #16
 806d3d8:	af00      	add	r7, sp, #0
 806d3da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 806d3dc:	6878      	ldr	r0, [r7, #4]
 806d3de:	f7ff ff70 	bl	806d2c2 <f_sync>
 806d3e2:	4603      	mov	r3, r0
 806d3e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 806d3e6:	7bfb      	ldrb	r3, [r7, #15]
 806d3e8:	2b00      	cmp	r3, #0
 806d3ea:	d11d      	bne.n	806d428 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 806d3ec:	687b      	ldr	r3, [r7, #4]
 806d3ee:	f107 0208 	add.w	r2, r7, #8
 806d3f2:	4611      	mov	r1, r2
 806d3f4:	4618      	mov	r0, r3
 806d3f6:	f7ff f9e1 	bl	806c7bc <validate>
 806d3fa:	4603      	mov	r3, r0
 806d3fc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 806d3fe:	7bfb      	ldrb	r3, [r7, #15]
 806d400:	2b00      	cmp	r3, #0
 806d402:	d111      	bne.n	806d428 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 806d404:	687b      	ldr	r3, [r7, #4]
 806d406:	691b      	ldr	r3, [r3, #16]
 806d408:	4618      	mov	r0, r3
 806d40a:	f7fd fef7 	bl	806b1fc <dec_lock>
 806d40e:	4603      	mov	r3, r0
 806d410:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 806d412:	7bfb      	ldrb	r3, [r7, #15]
 806d414:	2b00      	cmp	r3, #0
 806d416:	d102      	bne.n	806d41e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 806d418:	687b      	ldr	r3, [r7, #4]
 806d41a:	2200      	movs	r2, #0
 806d41c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 806d41e:	68bb      	ldr	r3, [r7, #8]
 806d420:	2100      	movs	r1, #0
 806d422:	4618      	mov	r0, r3
 806d424:	f7fd fdc2 	bl	806afac <unlock_fs>
#endif
		}
	}
	return res;
 806d428:	7bfb      	ldrb	r3, [r7, #15]
}
 806d42a:	4618      	mov	r0, r3
 806d42c:	3710      	adds	r7, #16
 806d42e:	46bd      	mov	sp, r7
 806d430:	bd80      	pop	{r7, pc}

0806d432 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 806d432:	b580      	push	{r7, lr}
 806d434:	b09e      	sub	sp, #120	; 0x78
 806d436:	af00      	add	r7, sp, #0
 806d438:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 806d43a:	2300      	movs	r3, #0
 806d43c:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 806d43e:	f107 010c 	add.w	r1, r7, #12
 806d442:	1d3b      	adds	r3, r7, #4
 806d444:	2202      	movs	r2, #2
 806d446:	4618      	mov	r0, r3
 806d448:	f7fe ff64 	bl	806c314 <find_volume>
 806d44c:	4603      	mov	r3, r0
 806d44e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 806d452:	68fb      	ldr	r3, [r7, #12]
 806d454:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 806d456:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806d45a:	2b00      	cmp	r3, #0
 806d45c:	f040 808e 	bne.w	806d57c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 806d460:	687a      	ldr	r2, [r7, #4]
 806d462:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806d466:	4611      	mov	r1, r2
 806d468:	4618      	mov	r0, r3
 806d46a:	f7fe fe47 	bl	806c0fc <follow_path>
 806d46e:	4603      	mov	r3, r0
 806d470:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 806d474:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806d478:	2b00      	cmp	r3, #0
 806d47a:	d108      	bne.n	806d48e <f_unlink+0x5c>
 806d47c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806d480:	2102      	movs	r1, #2
 806d482:	4618      	mov	r0, r3
 806d484:	f7fd fdae 	bl	806afe4 <chk_lock>
 806d488:	4603      	mov	r3, r0
 806d48a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 806d48e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806d492:	2b00      	cmp	r3, #0
 806d494:	d172      	bne.n	806d57c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 806d496:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 806d49a:	b25b      	sxtb	r3, r3
 806d49c:	2b00      	cmp	r3, #0
 806d49e:	da03      	bge.n	806d4a8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 806d4a0:	2306      	movs	r3, #6
 806d4a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 806d4a6:	e008      	b.n	806d4ba <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 806d4a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 806d4ac:	f003 0301 	and.w	r3, r3, #1
 806d4b0:	2b00      	cmp	r3, #0
 806d4b2:	d002      	beq.n	806d4ba <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 806d4b4:	2307      	movs	r3, #7
 806d4b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 806d4ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806d4be:	2b00      	cmp	r3, #0
 806d4c0:	d134      	bne.n	806d52c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 806d4c2:	68fb      	ldr	r3, [r7, #12]
 806d4c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 806d4c6:	4611      	mov	r1, r2
 806d4c8:	4618      	mov	r0, r3
 806d4ca:	f7fe fc42 	bl	806bd52 <ld_clust>
 806d4ce:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 806d4d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 806d4d4:	f003 0310 	and.w	r3, r3, #16
 806d4d8:	2b00      	cmp	r3, #0
 806d4da:	d027      	beq.n	806d52c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 806d4dc:	68fb      	ldr	r3, [r7, #12]
 806d4de:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 806d4e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 806d4e2:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 806d4e4:	f107 0310 	add.w	r3, r7, #16
 806d4e8:	2100      	movs	r1, #0
 806d4ea:	4618      	mov	r0, r3
 806d4ec:	f7fe faaa 	bl	806ba44 <dir_sdi>
 806d4f0:	4603      	mov	r3, r0
 806d4f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 806d4f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806d4fa:	2b00      	cmp	r3, #0
 806d4fc:	d116      	bne.n	806d52c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 806d4fe:	f107 0310 	add.w	r3, r7, #16
 806d502:	2100      	movs	r1, #0
 806d504:	4618      	mov	r0, r3
 806d506:	f7fe fc63 	bl	806bdd0 <dir_read>
 806d50a:	4603      	mov	r3, r0
 806d50c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 806d510:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806d514:	2b00      	cmp	r3, #0
 806d516:	d102      	bne.n	806d51e <f_unlink+0xec>
 806d518:	2307      	movs	r3, #7
 806d51a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 806d51e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806d522:	2b04      	cmp	r3, #4
 806d524:	d102      	bne.n	806d52c <f_unlink+0xfa>
 806d526:	2300      	movs	r3, #0
 806d528:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 806d52c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806d530:	2b00      	cmp	r3, #0
 806d532:	d123      	bne.n	806d57c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 806d534:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806d538:	4618      	mov	r0, r3
 806d53a:	f7fe fd2d 	bl	806bf98 <dir_remove>
 806d53e:	4603      	mov	r3, r0
 806d540:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 806d544:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806d548:	2b00      	cmp	r3, #0
 806d54a:	d10c      	bne.n	806d566 <f_unlink+0x134>
 806d54c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 806d54e:	2b00      	cmp	r3, #0
 806d550:	d009      	beq.n	806d566 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 806d552:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806d556:	2200      	movs	r2, #0
 806d558:	6f39      	ldr	r1, [r7, #112]	; 0x70
 806d55a:	4618      	mov	r0, r3
 806d55c:	f7fe f941 	bl	806b7e2 <remove_chain>
 806d560:	4603      	mov	r3, r0
 806d562:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 806d566:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806d56a:	2b00      	cmp	r3, #0
 806d56c:	d106      	bne.n	806d57c <f_unlink+0x14a>
 806d56e:	68fb      	ldr	r3, [r7, #12]
 806d570:	4618      	mov	r0, r3
 806d572:	f7fd ff15 	bl	806b3a0 <sync_fs>
 806d576:	4603      	mov	r3, r0
 806d578:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 806d57c:	68fb      	ldr	r3, [r7, #12]
 806d57e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 806d582:	4611      	mov	r1, r2
 806d584:	4618      	mov	r0, r3
 806d586:	f7fd fd11 	bl	806afac <unlock_fs>
 806d58a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 806d58e:	4618      	mov	r0, r3
 806d590:	3778      	adds	r7, #120	; 0x78
 806d592:	46bd      	mov	sp, r7
 806d594:	bd80      	pop	{r7, pc}
	...

0806d598 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 806d598:	b480      	push	{r7}
 806d59a:	b087      	sub	sp, #28
 806d59c:	af00      	add	r7, sp, #0
 806d59e:	60f8      	str	r0, [r7, #12]
 806d5a0:	60b9      	str	r1, [r7, #8]
 806d5a2:	4613      	mov	r3, r2
 806d5a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 806d5a6:	2301      	movs	r3, #1
 806d5a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 806d5aa:	2300      	movs	r3, #0
 806d5ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 806d5ae:	4b1f      	ldr	r3, [pc, #124]	; (806d62c <FATFS_LinkDriverEx+0x94>)
 806d5b0:	7a5b      	ldrb	r3, [r3, #9]
 806d5b2:	b2db      	uxtb	r3, r3
 806d5b4:	2b00      	cmp	r3, #0
 806d5b6:	d131      	bne.n	806d61c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 806d5b8:	4b1c      	ldr	r3, [pc, #112]	; (806d62c <FATFS_LinkDriverEx+0x94>)
 806d5ba:	7a5b      	ldrb	r3, [r3, #9]
 806d5bc:	b2db      	uxtb	r3, r3
 806d5be:	461a      	mov	r2, r3
 806d5c0:	4b1a      	ldr	r3, [pc, #104]	; (806d62c <FATFS_LinkDriverEx+0x94>)
 806d5c2:	2100      	movs	r1, #0
 806d5c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 806d5c6:	4b19      	ldr	r3, [pc, #100]	; (806d62c <FATFS_LinkDriverEx+0x94>)
 806d5c8:	7a5b      	ldrb	r3, [r3, #9]
 806d5ca:	b2db      	uxtb	r3, r3
 806d5cc:	4a17      	ldr	r2, [pc, #92]	; (806d62c <FATFS_LinkDriverEx+0x94>)
 806d5ce:	009b      	lsls	r3, r3, #2
 806d5d0:	4413      	add	r3, r2
 806d5d2:	68fa      	ldr	r2, [r7, #12]
 806d5d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 806d5d6:	4b15      	ldr	r3, [pc, #84]	; (806d62c <FATFS_LinkDriverEx+0x94>)
 806d5d8:	7a5b      	ldrb	r3, [r3, #9]
 806d5da:	b2db      	uxtb	r3, r3
 806d5dc:	461a      	mov	r2, r3
 806d5de:	4b13      	ldr	r3, [pc, #76]	; (806d62c <FATFS_LinkDriverEx+0x94>)
 806d5e0:	4413      	add	r3, r2
 806d5e2:	79fa      	ldrb	r2, [r7, #7]
 806d5e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 806d5e6:	4b11      	ldr	r3, [pc, #68]	; (806d62c <FATFS_LinkDriverEx+0x94>)
 806d5e8:	7a5b      	ldrb	r3, [r3, #9]
 806d5ea:	b2db      	uxtb	r3, r3
 806d5ec:	1c5a      	adds	r2, r3, #1
 806d5ee:	b2d1      	uxtb	r1, r2
 806d5f0:	4a0e      	ldr	r2, [pc, #56]	; (806d62c <FATFS_LinkDriverEx+0x94>)
 806d5f2:	7251      	strb	r1, [r2, #9]
 806d5f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 806d5f6:	7dbb      	ldrb	r3, [r7, #22]
 806d5f8:	3330      	adds	r3, #48	; 0x30
 806d5fa:	b2da      	uxtb	r2, r3
 806d5fc:	68bb      	ldr	r3, [r7, #8]
 806d5fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 806d600:	68bb      	ldr	r3, [r7, #8]
 806d602:	3301      	adds	r3, #1
 806d604:	223a      	movs	r2, #58	; 0x3a
 806d606:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 806d608:	68bb      	ldr	r3, [r7, #8]
 806d60a:	3302      	adds	r3, #2
 806d60c:	222f      	movs	r2, #47	; 0x2f
 806d60e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 806d610:	68bb      	ldr	r3, [r7, #8]
 806d612:	3303      	adds	r3, #3
 806d614:	2200      	movs	r2, #0
 806d616:	701a      	strb	r2, [r3, #0]
    ret = 0;
 806d618:	2300      	movs	r3, #0
 806d61a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 806d61c:	7dfb      	ldrb	r3, [r7, #23]
}
 806d61e:	4618      	mov	r0, r3
 806d620:	371c      	adds	r7, #28
 806d622:	46bd      	mov	sp, r7
 806d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d628:	4770      	bx	lr
 806d62a:	bf00      	nop
 806d62c:	2000044c 	.word	0x2000044c

0806d630 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 806d630:	b580      	push	{r7, lr}
 806d632:	b082      	sub	sp, #8
 806d634:	af00      	add	r7, sp, #0
 806d636:	6078      	str	r0, [r7, #4]
 806d638:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 806d63a:	2200      	movs	r2, #0
 806d63c:	6839      	ldr	r1, [r7, #0]
 806d63e:	6878      	ldr	r0, [r7, #4]
 806d640:	f7ff ffaa 	bl	806d598 <FATFS_LinkDriverEx>
 806d644:	4603      	mov	r3, r0
}
 806d646:	4618      	mov	r0, r3
 806d648:	3708      	adds	r7, #8
 806d64a:	46bd      	mov	sp, r7
 806d64c:	bd80      	pop	{r7, pc}

0806d64e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 806d64e:	b580      	push	{r7, lr}
 806d650:	b084      	sub	sp, #16
 806d652:	af00      	add	r7, sp, #0
 806d654:	4603      	mov	r3, r0
 806d656:	6039      	str	r1, [r7, #0]
 806d658:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 806d65a:	2200      	movs	r2, #0
 806d65c:	2101      	movs	r1, #1
 806d65e:	2001      	movs	r0, #1
 806d660:	f000 fc72 	bl	806df48 <osSemaphoreNew>
 806d664:	4602      	mov	r2, r0
 806d666:	683b      	ldr	r3, [r7, #0]
 806d668:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 806d66a:	683b      	ldr	r3, [r7, #0]
 806d66c:	681b      	ldr	r3, [r3, #0]
 806d66e:	2b00      	cmp	r3, #0
 806d670:	bf14      	ite	ne
 806d672:	2301      	movne	r3, #1
 806d674:	2300      	moveq	r3, #0
 806d676:	b2db      	uxtb	r3, r3
 806d678:	60fb      	str	r3, [r7, #12]

    return ret;
 806d67a:	68fb      	ldr	r3, [r7, #12]
}
 806d67c:	4618      	mov	r0, r3
 806d67e:	3710      	adds	r7, #16
 806d680:	46bd      	mov	sp, r7
 806d682:	bd80      	pop	{r7, pc}

0806d684 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 806d684:	b580      	push	{r7, lr}
 806d686:	b082      	sub	sp, #8
 806d688:	af00      	add	r7, sp, #0
 806d68a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 806d68c:	6878      	ldr	r0, [r7, #4]
 806d68e:	f000 fd7b 	bl	806e188 <osSemaphoreDelete>
#endif
    return 1;
 806d692:	2301      	movs	r3, #1
}
 806d694:	4618      	mov	r0, r3
 806d696:	3708      	adds	r7, #8
 806d698:	46bd      	mov	sp, r7
 806d69a:	bd80      	pop	{r7, pc}

0806d69c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 806d69c:	b580      	push	{r7, lr}
 806d69e:	b084      	sub	sp, #16
 806d6a0:	af00      	add	r7, sp, #0
 806d6a2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 806d6a4:	2300      	movs	r3, #0
 806d6a6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 806d6a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 806d6ac:	6878      	ldr	r0, [r7, #4]
 806d6ae:	f000 fcd5 	bl	806e05c <osSemaphoreAcquire>
 806d6b2:	4603      	mov	r3, r0
 806d6b4:	2b00      	cmp	r3, #0
 806d6b6:	d101      	bne.n	806d6bc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 806d6b8:	2301      	movs	r3, #1
 806d6ba:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 806d6bc:	68fb      	ldr	r3, [r7, #12]
}
 806d6be:	4618      	mov	r0, r3
 806d6c0:	3710      	adds	r7, #16
 806d6c2:	46bd      	mov	sp, r7
 806d6c4:	bd80      	pop	{r7, pc}

0806d6c6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 806d6c6:	b580      	push	{r7, lr}
 806d6c8:	b082      	sub	sp, #8
 806d6ca:	af00      	add	r7, sp, #0
 806d6cc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 806d6ce:	6878      	ldr	r0, [r7, #4]
 806d6d0:	f000 fd16 	bl	806e100 <osSemaphoreRelease>
#endif
}
 806d6d4:	bf00      	nop
 806d6d6:	3708      	adds	r7, #8
 806d6d8:	46bd      	mov	sp, r7
 806d6da:	bd80      	pop	{r7, pc}

0806d6dc <__NVIC_SetPriority>:
{
 806d6dc:	b480      	push	{r7}
 806d6de:	b083      	sub	sp, #12
 806d6e0:	af00      	add	r7, sp, #0
 806d6e2:	4603      	mov	r3, r0
 806d6e4:	6039      	str	r1, [r7, #0]
 806d6e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 806d6e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806d6ec:	2b00      	cmp	r3, #0
 806d6ee:	db0a      	blt.n	806d706 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806d6f0:	683b      	ldr	r3, [r7, #0]
 806d6f2:	b2da      	uxtb	r2, r3
 806d6f4:	490c      	ldr	r1, [pc, #48]	; (806d728 <__NVIC_SetPriority+0x4c>)
 806d6f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806d6fa:	0112      	lsls	r2, r2, #4
 806d6fc:	b2d2      	uxtb	r2, r2
 806d6fe:	440b      	add	r3, r1
 806d700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 806d704:	e00a      	b.n	806d71c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806d706:	683b      	ldr	r3, [r7, #0]
 806d708:	b2da      	uxtb	r2, r3
 806d70a:	4908      	ldr	r1, [pc, #32]	; (806d72c <__NVIC_SetPriority+0x50>)
 806d70c:	79fb      	ldrb	r3, [r7, #7]
 806d70e:	f003 030f 	and.w	r3, r3, #15
 806d712:	3b04      	subs	r3, #4
 806d714:	0112      	lsls	r2, r2, #4
 806d716:	b2d2      	uxtb	r2, r2
 806d718:	440b      	add	r3, r1
 806d71a:	761a      	strb	r2, [r3, #24]
}
 806d71c:	bf00      	nop
 806d71e:	370c      	adds	r7, #12
 806d720:	46bd      	mov	sp, r7
 806d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d726:	4770      	bx	lr
 806d728:	e000e100 	.word	0xe000e100
 806d72c:	e000ed00 	.word	0xe000ed00

0806d730 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 806d730:	b580      	push	{r7, lr}
 806d732:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 806d734:	4b05      	ldr	r3, [pc, #20]	; (806d74c <SysTick_Handler+0x1c>)
 806d736:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 806d738:	f002 fe80 	bl	807043c <xTaskGetSchedulerState>
 806d73c:	4603      	mov	r3, r0
 806d73e:	2b01      	cmp	r3, #1
 806d740:	d001      	beq.n	806d746 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 806d742:	f004 f821 	bl	8071788 <xPortSysTickHandler>
  }
}
 806d746:	bf00      	nop
 806d748:	bd80      	pop	{r7, pc}
 806d74a:	bf00      	nop
 806d74c:	e000e010 	.word	0xe000e010

0806d750 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 806d750:	b580      	push	{r7, lr}
 806d752:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 806d754:	2100      	movs	r1, #0
 806d756:	f06f 0004 	mvn.w	r0, #4
 806d75a:	f7ff ffbf 	bl	806d6dc <__NVIC_SetPriority>
#endif
}
 806d75e:	bf00      	nop
 806d760:	bd80      	pop	{r7, pc}
	...

0806d764 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 806d764:	b480      	push	{r7}
 806d766:	b083      	sub	sp, #12
 806d768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806d76a:	f3ef 8305 	mrs	r3, IPSR
 806d76e:	603b      	str	r3, [r7, #0]
  return(result);
 806d770:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 806d772:	2b00      	cmp	r3, #0
 806d774:	d003      	beq.n	806d77e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 806d776:	f06f 0305 	mvn.w	r3, #5
 806d77a:	607b      	str	r3, [r7, #4]
 806d77c:	e00c      	b.n	806d798 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 806d77e:	4b0a      	ldr	r3, [pc, #40]	; (806d7a8 <osKernelInitialize+0x44>)
 806d780:	681b      	ldr	r3, [r3, #0]
 806d782:	2b00      	cmp	r3, #0
 806d784:	d105      	bne.n	806d792 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 806d786:	4b08      	ldr	r3, [pc, #32]	; (806d7a8 <osKernelInitialize+0x44>)
 806d788:	2201      	movs	r2, #1
 806d78a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 806d78c:	2300      	movs	r3, #0
 806d78e:	607b      	str	r3, [r7, #4]
 806d790:	e002      	b.n	806d798 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 806d792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806d796:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 806d798:	687b      	ldr	r3, [r7, #4]
}
 806d79a:	4618      	mov	r0, r3
 806d79c:	370c      	adds	r7, #12
 806d79e:	46bd      	mov	sp, r7
 806d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 806d7a4:	4770      	bx	lr
 806d7a6:	bf00      	nop
 806d7a8:	20000458 	.word	0x20000458

0806d7ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 806d7ac:	b580      	push	{r7, lr}
 806d7ae:	b082      	sub	sp, #8
 806d7b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806d7b2:	f3ef 8305 	mrs	r3, IPSR
 806d7b6:	603b      	str	r3, [r7, #0]
  return(result);
 806d7b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 806d7ba:	2b00      	cmp	r3, #0
 806d7bc:	d003      	beq.n	806d7c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 806d7be:	f06f 0305 	mvn.w	r3, #5
 806d7c2:	607b      	str	r3, [r7, #4]
 806d7c4:	e010      	b.n	806d7e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 806d7c6:	4b0b      	ldr	r3, [pc, #44]	; (806d7f4 <osKernelStart+0x48>)
 806d7c8:	681b      	ldr	r3, [r3, #0]
 806d7ca:	2b01      	cmp	r3, #1
 806d7cc:	d109      	bne.n	806d7e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 806d7ce:	f7ff ffbf 	bl	806d750 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 806d7d2:	4b08      	ldr	r3, [pc, #32]	; (806d7f4 <osKernelStart+0x48>)
 806d7d4:	2202      	movs	r2, #2
 806d7d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 806d7d8:	f002 f9c4 	bl	806fb64 <vTaskStartScheduler>
      stat = osOK;
 806d7dc:	2300      	movs	r3, #0
 806d7de:	607b      	str	r3, [r7, #4]
 806d7e0:	e002      	b.n	806d7e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 806d7e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806d7e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 806d7e8:	687b      	ldr	r3, [r7, #4]
}
 806d7ea:	4618      	mov	r0, r3
 806d7ec:	3708      	adds	r7, #8
 806d7ee:	46bd      	mov	sp, r7
 806d7f0:	bd80      	pop	{r7, pc}
 806d7f2:	bf00      	nop
 806d7f4:	20000458 	.word	0x20000458

0806d7f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 806d7f8:	b580      	push	{r7, lr}
 806d7fa:	b08e      	sub	sp, #56	; 0x38
 806d7fc:	af04      	add	r7, sp, #16
 806d7fe:	60f8      	str	r0, [r7, #12]
 806d800:	60b9      	str	r1, [r7, #8]
 806d802:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 806d804:	2300      	movs	r3, #0
 806d806:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806d808:	f3ef 8305 	mrs	r3, IPSR
 806d80c:	617b      	str	r3, [r7, #20]
  return(result);
 806d80e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 806d810:	2b00      	cmp	r3, #0
 806d812:	d17e      	bne.n	806d912 <osThreadNew+0x11a>
 806d814:	68fb      	ldr	r3, [r7, #12]
 806d816:	2b00      	cmp	r3, #0
 806d818:	d07b      	beq.n	806d912 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 806d81a:	2380      	movs	r3, #128	; 0x80
 806d81c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 806d81e:	2318      	movs	r3, #24
 806d820:	61fb      	str	r3, [r7, #28]

    name = NULL;
 806d822:	2300      	movs	r3, #0
 806d824:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 806d826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806d82a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 806d82c:	687b      	ldr	r3, [r7, #4]
 806d82e:	2b00      	cmp	r3, #0
 806d830:	d045      	beq.n	806d8be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 806d832:	687b      	ldr	r3, [r7, #4]
 806d834:	681b      	ldr	r3, [r3, #0]
 806d836:	2b00      	cmp	r3, #0
 806d838:	d002      	beq.n	806d840 <osThreadNew+0x48>
        name = attr->name;
 806d83a:	687b      	ldr	r3, [r7, #4]
 806d83c:	681b      	ldr	r3, [r3, #0]
 806d83e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 806d840:	687b      	ldr	r3, [r7, #4]
 806d842:	699b      	ldr	r3, [r3, #24]
 806d844:	2b00      	cmp	r3, #0
 806d846:	d002      	beq.n	806d84e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 806d848:	687b      	ldr	r3, [r7, #4]
 806d84a:	699b      	ldr	r3, [r3, #24]
 806d84c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 806d84e:	69fb      	ldr	r3, [r7, #28]
 806d850:	2b00      	cmp	r3, #0
 806d852:	d008      	beq.n	806d866 <osThreadNew+0x6e>
 806d854:	69fb      	ldr	r3, [r7, #28]
 806d856:	2b38      	cmp	r3, #56	; 0x38
 806d858:	d805      	bhi.n	806d866 <osThreadNew+0x6e>
 806d85a:	687b      	ldr	r3, [r7, #4]
 806d85c:	685b      	ldr	r3, [r3, #4]
 806d85e:	f003 0301 	and.w	r3, r3, #1
 806d862:	2b00      	cmp	r3, #0
 806d864:	d001      	beq.n	806d86a <osThreadNew+0x72>
        return (NULL);
 806d866:	2300      	movs	r3, #0
 806d868:	e054      	b.n	806d914 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 806d86a:	687b      	ldr	r3, [r7, #4]
 806d86c:	695b      	ldr	r3, [r3, #20]
 806d86e:	2b00      	cmp	r3, #0
 806d870:	d003      	beq.n	806d87a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 806d872:	687b      	ldr	r3, [r7, #4]
 806d874:	695b      	ldr	r3, [r3, #20]
 806d876:	089b      	lsrs	r3, r3, #2
 806d878:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 806d87a:	687b      	ldr	r3, [r7, #4]
 806d87c:	689b      	ldr	r3, [r3, #8]
 806d87e:	2b00      	cmp	r3, #0
 806d880:	d00e      	beq.n	806d8a0 <osThreadNew+0xa8>
 806d882:	687b      	ldr	r3, [r7, #4]
 806d884:	68db      	ldr	r3, [r3, #12]
 806d886:	2bbb      	cmp	r3, #187	; 0xbb
 806d888:	d90a      	bls.n	806d8a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 806d88a:	687b      	ldr	r3, [r7, #4]
 806d88c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 806d88e:	2b00      	cmp	r3, #0
 806d890:	d006      	beq.n	806d8a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 806d892:	687b      	ldr	r3, [r7, #4]
 806d894:	695b      	ldr	r3, [r3, #20]
 806d896:	2b00      	cmp	r3, #0
 806d898:	d002      	beq.n	806d8a0 <osThreadNew+0xa8>
        mem = 1;
 806d89a:	2301      	movs	r3, #1
 806d89c:	61bb      	str	r3, [r7, #24]
 806d89e:	e010      	b.n	806d8c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 806d8a0:	687b      	ldr	r3, [r7, #4]
 806d8a2:	689b      	ldr	r3, [r3, #8]
 806d8a4:	2b00      	cmp	r3, #0
 806d8a6:	d10c      	bne.n	806d8c2 <osThreadNew+0xca>
 806d8a8:	687b      	ldr	r3, [r7, #4]
 806d8aa:	68db      	ldr	r3, [r3, #12]
 806d8ac:	2b00      	cmp	r3, #0
 806d8ae:	d108      	bne.n	806d8c2 <osThreadNew+0xca>
 806d8b0:	687b      	ldr	r3, [r7, #4]
 806d8b2:	691b      	ldr	r3, [r3, #16]
 806d8b4:	2b00      	cmp	r3, #0
 806d8b6:	d104      	bne.n	806d8c2 <osThreadNew+0xca>
          mem = 0;
 806d8b8:	2300      	movs	r3, #0
 806d8ba:	61bb      	str	r3, [r7, #24]
 806d8bc:	e001      	b.n	806d8c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 806d8be:	2300      	movs	r3, #0
 806d8c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 806d8c2:	69bb      	ldr	r3, [r7, #24]
 806d8c4:	2b01      	cmp	r3, #1
 806d8c6:	d110      	bne.n	806d8ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 806d8c8:	687b      	ldr	r3, [r7, #4]
 806d8ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 806d8cc:	687a      	ldr	r2, [r7, #4]
 806d8ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 806d8d0:	9202      	str	r2, [sp, #8]
 806d8d2:	9301      	str	r3, [sp, #4]
 806d8d4:	69fb      	ldr	r3, [r7, #28]
 806d8d6:	9300      	str	r3, [sp, #0]
 806d8d8:	68bb      	ldr	r3, [r7, #8]
 806d8da:	6a3a      	ldr	r2, [r7, #32]
 806d8dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806d8de:	68f8      	ldr	r0, [r7, #12]
 806d8e0:	f001 ff54 	bl	806f78c <xTaskCreateStatic>
 806d8e4:	4603      	mov	r3, r0
 806d8e6:	613b      	str	r3, [r7, #16]
 806d8e8:	e013      	b.n	806d912 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 806d8ea:	69bb      	ldr	r3, [r7, #24]
 806d8ec:	2b00      	cmp	r3, #0
 806d8ee:	d110      	bne.n	806d912 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 806d8f0:	6a3b      	ldr	r3, [r7, #32]
 806d8f2:	b29a      	uxth	r2, r3
 806d8f4:	f107 0310 	add.w	r3, r7, #16
 806d8f8:	9301      	str	r3, [sp, #4]
 806d8fa:	69fb      	ldr	r3, [r7, #28]
 806d8fc:	9300      	str	r3, [sp, #0]
 806d8fe:	68bb      	ldr	r3, [r7, #8]
 806d900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806d902:	68f8      	ldr	r0, [r7, #12]
 806d904:	f001 ff9f 	bl	806f846 <xTaskCreate>
 806d908:	4603      	mov	r3, r0
 806d90a:	2b01      	cmp	r3, #1
 806d90c:	d001      	beq.n	806d912 <osThreadNew+0x11a>
            hTask = NULL;
 806d90e:	2300      	movs	r3, #0
 806d910:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 806d912:	693b      	ldr	r3, [r7, #16]
}
 806d914:	4618      	mov	r0, r3
 806d916:	3728      	adds	r7, #40	; 0x28
 806d918:	46bd      	mov	sp, r7
 806d91a:	bd80      	pop	{r7, pc}

0806d91c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 806d91c:	b580      	push	{r7, lr}
 806d91e:	b088      	sub	sp, #32
 806d920:	af02      	add	r7, sp, #8
 806d922:	6078      	str	r0, [r7, #4]
 806d924:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 806d926:	687b      	ldr	r3, [r7, #4]
 806d928:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 806d92a:	697b      	ldr	r3, [r7, #20]
 806d92c:	2b00      	cmp	r3, #0
 806d92e:	d002      	beq.n	806d936 <osThreadFlagsSet+0x1a>
 806d930:	683b      	ldr	r3, [r7, #0]
 806d932:	2b00      	cmp	r3, #0
 806d934:	da03      	bge.n	806d93e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 806d936:	f06f 0303 	mvn.w	r3, #3
 806d93a:	60fb      	str	r3, [r7, #12]
 806d93c:	e035      	b.n	806d9aa <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 806d93e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806d942:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806d944:	f3ef 8305 	mrs	r3, IPSR
 806d948:	613b      	str	r3, [r7, #16]
  return(result);
 806d94a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 806d94c:	2b00      	cmp	r3, #0
 806d94e:	d01f      	beq.n	806d990 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 806d950:	2300      	movs	r3, #0
 806d952:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 806d954:	f107 0308 	add.w	r3, r7, #8
 806d958:	9300      	str	r3, [sp, #0]
 806d95a:	2300      	movs	r3, #0
 806d95c:	2201      	movs	r2, #1
 806d95e:	6839      	ldr	r1, [r7, #0]
 806d960:	6978      	ldr	r0, [r7, #20]
 806d962:	f003 f813 	bl	807098c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 806d966:	f107 030c 	add.w	r3, r7, #12
 806d96a:	2200      	movs	r2, #0
 806d96c:	9200      	str	r2, [sp, #0]
 806d96e:	2200      	movs	r2, #0
 806d970:	2100      	movs	r1, #0
 806d972:	6978      	ldr	r0, [r7, #20]
 806d974:	f003 f80a 	bl	807098c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 806d978:	68bb      	ldr	r3, [r7, #8]
 806d97a:	2b00      	cmp	r3, #0
 806d97c:	d015      	beq.n	806d9aa <osThreadFlagsSet+0x8e>
 806d97e:	4b0d      	ldr	r3, [pc, #52]	; (806d9b4 <osThreadFlagsSet+0x98>)
 806d980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806d984:	601a      	str	r2, [r3, #0]
 806d986:	f3bf 8f4f 	dsb	sy
 806d98a:	f3bf 8f6f 	isb	sy
 806d98e:	e00c      	b.n	806d9aa <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 806d990:	2300      	movs	r3, #0
 806d992:	2201      	movs	r2, #1
 806d994:	6839      	ldr	r1, [r7, #0]
 806d996:	6978      	ldr	r0, [r7, #20]
 806d998:	f002 ff3a 	bl	8070810 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 806d99c:	f107 030c 	add.w	r3, r7, #12
 806d9a0:	2200      	movs	r2, #0
 806d9a2:	2100      	movs	r1, #0
 806d9a4:	6978      	ldr	r0, [r7, #20]
 806d9a6:	f002 ff33 	bl	8070810 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 806d9aa:	68fb      	ldr	r3, [r7, #12]
}
 806d9ac:	4618      	mov	r0, r3
 806d9ae:	3718      	adds	r7, #24
 806d9b0:	46bd      	mov	sp, r7
 806d9b2:	bd80      	pop	{r7, pc}
 806d9b4:	e000ed04 	.word	0xe000ed04

0806d9b8 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 806d9b8:	b580      	push	{r7, lr}
 806d9ba:	b086      	sub	sp, #24
 806d9bc:	af00      	add	r7, sp, #0
 806d9be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806d9c0:	f3ef 8305 	mrs	r3, IPSR
 806d9c4:	60fb      	str	r3, [r7, #12]
  return(result);
 806d9c6:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 806d9c8:	2b00      	cmp	r3, #0
 806d9ca:	d003      	beq.n	806d9d4 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 806d9cc:	f06f 0305 	mvn.w	r3, #5
 806d9d0:	617b      	str	r3, [r7, #20]
 806d9d2:	e02a      	b.n	806da2a <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 806d9d4:	687b      	ldr	r3, [r7, #4]
 806d9d6:	2b00      	cmp	r3, #0
 806d9d8:	da03      	bge.n	806d9e2 <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 806d9da:	f06f 0303 	mvn.w	r3, #3
 806d9de:	617b      	str	r3, [r7, #20]
 806d9e0:	e023      	b.n	806da2a <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 806d9e2:	f002 fd1b 	bl	807041c <xTaskGetCurrentTaskHandle>
 806d9e6:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 806d9e8:	f107 0308 	add.w	r3, r7, #8
 806d9ec:	2200      	movs	r2, #0
 806d9ee:	2100      	movs	r1, #0
 806d9f0:	6938      	ldr	r0, [r7, #16]
 806d9f2:	f002 ff0d 	bl	8070810 <xTaskGenericNotify>
 806d9f6:	4603      	mov	r3, r0
 806d9f8:	2b01      	cmp	r3, #1
 806d9fa:	d113      	bne.n	806da24 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 806d9fc:	68bb      	ldr	r3, [r7, #8]
 806d9fe:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 806da00:	687b      	ldr	r3, [r7, #4]
 806da02:	43da      	mvns	r2, r3
 806da04:	68bb      	ldr	r3, [r7, #8]
 806da06:	4013      	ands	r3, r2
 806da08:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 806da0a:	68b9      	ldr	r1, [r7, #8]
 806da0c:	2300      	movs	r3, #0
 806da0e:	2203      	movs	r2, #3
 806da10:	6938      	ldr	r0, [r7, #16]
 806da12:	f002 fefd 	bl	8070810 <xTaskGenericNotify>
 806da16:	4603      	mov	r3, r0
 806da18:	2b01      	cmp	r3, #1
 806da1a:	d006      	beq.n	806da2a <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 806da1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806da20:	617b      	str	r3, [r7, #20]
 806da22:	e002      	b.n	806da2a <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 806da24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806da28:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 806da2a:	697b      	ldr	r3, [r7, #20]
}
 806da2c:	4618      	mov	r0, r3
 806da2e:	3718      	adds	r7, #24
 806da30:	46bd      	mov	sp, r7
 806da32:	bd80      	pop	{r7, pc}

0806da34 <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 806da34:	b580      	push	{r7, lr}
 806da36:	b084      	sub	sp, #16
 806da38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806da3a:	f3ef 8305 	mrs	r3, IPSR
 806da3e:	60bb      	str	r3, [r7, #8]
  return(result);
 806da40:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 806da42:	2b00      	cmp	r3, #0
 806da44:	d003      	beq.n	806da4e <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 806da46:	f06f 0305 	mvn.w	r3, #5
 806da4a:	607b      	str	r3, [r7, #4]
 806da4c:	e00e      	b.n	806da6c <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 806da4e:	f002 fce5 	bl	807041c <xTaskGetCurrentTaskHandle>
 806da52:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 806da54:	1d3b      	adds	r3, r7, #4
 806da56:	2200      	movs	r2, #0
 806da58:	2100      	movs	r1, #0
 806da5a:	68f8      	ldr	r0, [r7, #12]
 806da5c:	f002 fed8 	bl	8070810 <xTaskGenericNotify>
 806da60:	4603      	mov	r3, r0
 806da62:	2b01      	cmp	r3, #1
 806da64:	d002      	beq.n	806da6c <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 806da66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806da6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 806da6c:	687b      	ldr	r3, [r7, #4]
}
 806da6e:	4618      	mov	r0, r3
 806da70:	3710      	adds	r7, #16
 806da72:	46bd      	mov	sp, r7
 806da74:	bd80      	pop	{r7, pc}

0806da76 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 806da76:	b580      	push	{r7, lr}
 806da78:	b08c      	sub	sp, #48	; 0x30
 806da7a:	af00      	add	r7, sp, #0
 806da7c:	60f8      	str	r0, [r7, #12]
 806da7e:	60b9      	str	r1, [r7, #8]
 806da80:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806da82:	f3ef 8305 	mrs	r3, IPSR
 806da86:	617b      	str	r3, [r7, #20]
  return(result);
 806da88:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 806da8a:	2b00      	cmp	r3, #0
 806da8c:	d003      	beq.n	806da96 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 806da8e:	f06f 0305 	mvn.w	r3, #5
 806da92:	62fb      	str	r3, [r7, #44]	; 0x2c
 806da94:	e06b      	b.n	806db6e <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 806da96:	68fb      	ldr	r3, [r7, #12]
 806da98:	2b00      	cmp	r3, #0
 806da9a:	da03      	bge.n	806daa4 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 806da9c:	f06f 0303 	mvn.w	r3, #3
 806daa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 806daa2:	e064      	b.n	806db6e <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 806daa4:	68bb      	ldr	r3, [r7, #8]
 806daa6:	f003 0302 	and.w	r3, r3, #2
 806daaa:	2b00      	cmp	r3, #0
 806daac:	d002      	beq.n	806dab4 <osThreadFlagsWait+0x3e>
      clear = 0U;
 806daae:	2300      	movs	r3, #0
 806dab0:	62bb      	str	r3, [r7, #40]	; 0x28
 806dab2:	e001      	b.n	806dab8 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 806dab4:	68fb      	ldr	r3, [r7, #12]
 806dab6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 806dab8:	2300      	movs	r3, #0
 806daba:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 806dabc:	687b      	ldr	r3, [r7, #4]
 806dabe:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 806dac0:	f002 f96c 	bl	806fd9c <xTaskGetTickCount>
 806dac4:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 806dac6:	f107 0210 	add.w	r2, r7, #16
 806daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806dacc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 806dace:	2000      	movs	r0, #0
 806dad0:	f002 fe3e 	bl	8070750 <xTaskNotifyWait>
 806dad4:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 806dad6:	69fb      	ldr	r3, [r7, #28]
 806dad8:	2b01      	cmp	r3, #1
 806dada:	d137      	bne.n	806db4c <osThreadFlagsWait+0xd6>
        rflags &= flags;
 806dadc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806dade:	68fb      	ldr	r3, [r7, #12]
 806dae0:	4013      	ands	r3, r2
 806dae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 806dae4:	693b      	ldr	r3, [r7, #16]
 806dae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806dae8:	4313      	orrs	r3, r2
 806daea:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 806daec:	68bb      	ldr	r3, [r7, #8]
 806daee:	f003 0301 	and.w	r3, r3, #1
 806daf2:	2b00      	cmp	r3, #0
 806daf4:	d00c      	beq.n	806db10 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 806daf6:	68fa      	ldr	r2, [r7, #12]
 806daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806dafa:	4013      	ands	r3, r2
 806dafc:	68fa      	ldr	r2, [r7, #12]
 806dafe:	429a      	cmp	r2, r3
 806db00:	d032      	beq.n	806db68 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 806db02:	687b      	ldr	r3, [r7, #4]
 806db04:	2b00      	cmp	r3, #0
 806db06:	d10f      	bne.n	806db28 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 806db08:	f06f 0302 	mvn.w	r3, #2
 806db0c:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 806db0e:	e02e      	b.n	806db6e <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 806db10:	68fa      	ldr	r2, [r7, #12]
 806db12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806db14:	4013      	ands	r3, r2
 806db16:	2b00      	cmp	r3, #0
 806db18:	d128      	bne.n	806db6c <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 806db1a:	687b      	ldr	r3, [r7, #4]
 806db1c:	2b00      	cmp	r3, #0
 806db1e:	d103      	bne.n	806db28 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 806db20:	f06f 0302 	mvn.w	r3, #2
 806db24:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 806db26:	e022      	b.n	806db6e <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 806db28:	f002 f938 	bl	806fd9c <xTaskGetTickCount>
 806db2c:	4602      	mov	r2, r0
 806db2e:	6a3b      	ldr	r3, [r7, #32]
 806db30:	1ad3      	subs	r3, r2, r3
 806db32:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 806db34:	69ba      	ldr	r2, [r7, #24]
 806db36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806db38:	429a      	cmp	r2, r3
 806db3a:	d902      	bls.n	806db42 <osThreadFlagsWait+0xcc>
          tout  = 0;
 806db3c:	2300      	movs	r3, #0
 806db3e:	627b      	str	r3, [r7, #36]	; 0x24
 806db40:	e00e      	b.n	806db60 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 806db42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806db44:	69bb      	ldr	r3, [r7, #24]
 806db46:	1ad3      	subs	r3, r2, r3
 806db48:	627b      	str	r3, [r7, #36]	; 0x24
 806db4a:	e009      	b.n	806db60 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 806db4c:	687b      	ldr	r3, [r7, #4]
 806db4e:	2b00      	cmp	r3, #0
 806db50:	d103      	bne.n	806db5a <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 806db52:	f06f 0302 	mvn.w	r3, #2
 806db56:	62fb      	str	r3, [r7, #44]	; 0x2c
 806db58:	e002      	b.n	806db60 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 806db5a:	f06f 0301 	mvn.w	r3, #1
 806db5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 806db60:	69fb      	ldr	r3, [r7, #28]
 806db62:	2b00      	cmp	r3, #0
 806db64:	d1af      	bne.n	806dac6 <osThreadFlagsWait+0x50>
 806db66:	e002      	b.n	806db6e <osThreadFlagsWait+0xf8>
            break;
 806db68:	bf00      	nop
 806db6a:	e000      	b.n	806db6e <osThreadFlagsWait+0xf8>
            break;
 806db6c:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 806db6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 806db70:	4618      	mov	r0, r3
 806db72:	3730      	adds	r7, #48	; 0x30
 806db74:	46bd      	mov	sp, r7
 806db76:	bd80      	pop	{r7, pc}

0806db78 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 806db78:	b580      	push	{r7, lr}
 806db7a:	b084      	sub	sp, #16
 806db7c:	af00      	add	r7, sp, #0
 806db7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806db80:	f3ef 8305 	mrs	r3, IPSR
 806db84:	60bb      	str	r3, [r7, #8]
  return(result);
 806db86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 806db88:	2b00      	cmp	r3, #0
 806db8a:	d003      	beq.n	806db94 <osDelay+0x1c>
    stat = osErrorISR;
 806db8c:	f06f 0305 	mvn.w	r3, #5
 806db90:	60fb      	str	r3, [r7, #12]
 806db92:	e007      	b.n	806dba4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 806db94:	2300      	movs	r3, #0
 806db96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 806db98:	687b      	ldr	r3, [r7, #4]
 806db9a:	2b00      	cmp	r3, #0
 806db9c:	d002      	beq.n	806dba4 <osDelay+0x2c>
      vTaskDelay(ticks);
 806db9e:	6878      	ldr	r0, [r7, #4]
 806dba0:	f001 ffac 	bl	806fafc <vTaskDelay>
    }
  }

  return (stat);
 806dba4:	68fb      	ldr	r3, [r7, #12]
}
 806dba6:	4618      	mov	r0, r3
 806dba8:	3710      	adds	r7, #16
 806dbaa:	46bd      	mov	sp, r7
 806dbac:	bd80      	pop	{r7, pc}

0806dbae <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 806dbae:	b580      	push	{r7, lr}
 806dbb0:	b084      	sub	sp, #16
 806dbb2:	af00      	add	r7, sp, #0
 806dbb4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 806dbb6:	6878      	ldr	r0, [r7, #4]
 806dbb8:	f003 fc08 	bl	80713cc <pvTimerGetTimerID>
 806dbbc:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 806dbbe:	68fb      	ldr	r3, [r7, #12]
 806dbc0:	2b00      	cmp	r3, #0
 806dbc2:	d005      	beq.n	806dbd0 <TimerCallback+0x22>
    callb->func (callb->arg);
 806dbc4:	68fb      	ldr	r3, [r7, #12]
 806dbc6:	681b      	ldr	r3, [r3, #0]
 806dbc8:	68fa      	ldr	r2, [r7, #12]
 806dbca:	6852      	ldr	r2, [r2, #4]
 806dbcc:	4610      	mov	r0, r2
 806dbce:	4798      	blx	r3
  }
}
 806dbd0:	bf00      	nop
 806dbd2:	3710      	adds	r7, #16
 806dbd4:	46bd      	mov	sp, r7
 806dbd6:	bd80      	pop	{r7, pc}

0806dbd8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 806dbd8:	b580      	push	{r7, lr}
 806dbda:	b08c      	sub	sp, #48	; 0x30
 806dbdc:	af02      	add	r7, sp, #8
 806dbde:	60f8      	str	r0, [r7, #12]
 806dbe0:	607a      	str	r2, [r7, #4]
 806dbe2:	603b      	str	r3, [r7, #0]
 806dbe4:	460b      	mov	r3, r1
 806dbe6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 806dbe8:	2300      	movs	r3, #0
 806dbea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806dbec:	f3ef 8305 	mrs	r3, IPSR
 806dbf0:	613b      	str	r3, [r7, #16]
  return(result);
 806dbf2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 806dbf4:	2b00      	cmp	r3, #0
 806dbf6:	d163      	bne.n	806dcc0 <osTimerNew+0xe8>
 806dbf8:	68fb      	ldr	r3, [r7, #12]
 806dbfa:	2b00      	cmp	r3, #0
 806dbfc:	d060      	beq.n	806dcc0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 806dbfe:	2008      	movs	r0, #8
 806dc00:	f003 fe52 	bl	80718a8 <pvPortMalloc>
 806dc04:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 806dc06:	697b      	ldr	r3, [r7, #20]
 806dc08:	2b00      	cmp	r3, #0
 806dc0a:	d059      	beq.n	806dcc0 <osTimerNew+0xe8>
      callb->func = func;
 806dc0c:	697b      	ldr	r3, [r7, #20]
 806dc0e:	68fa      	ldr	r2, [r7, #12]
 806dc10:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 806dc12:	697b      	ldr	r3, [r7, #20]
 806dc14:	687a      	ldr	r2, [r7, #4]
 806dc16:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 806dc18:	7afb      	ldrb	r3, [r7, #11]
 806dc1a:	2b00      	cmp	r3, #0
 806dc1c:	d102      	bne.n	806dc24 <osTimerNew+0x4c>
        reload = pdFALSE;
 806dc1e:	2300      	movs	r3, #0
 806dc20:	61fb      	str	r3, [r7, #28]
 806dc22:	e001      	b.n	806dc28 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 806dc24:	2301      	movs	r3, #1
 806dc26:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 806dc28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806dc2c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 806dc2e:	2300      	movs	r3, #0
 806dc30:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 806dc32:	683b      	ldr	r3, [r7, #0]
 806dc34:	2b00      	cmp	r3, #0
 806dc36:	d01c      	beq.n	806dc72 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 806dc38:	683b      	ldr	r3, [r7, #0]
 806dc3a:	681b      	ldr	r3, [r3, #0]
 806dc3c:	2b00      	cmp	r3, #0
 806dc3e:	d002      	beq.n	806dc46 <osTimerNew+0x6e>
          name = attr->name;
 806dc40:	683b      	ldr	r3, [r7, #0]
 806dc42:	681b      	ldr	r3, [r3, #0]
 806dc44:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 806dc46:	683b      	ldr	r3, [r7, #0]
 806dc48:	689b      	ldr	r3, [r3, #8]
 806dc4a:	2b00      	cmp	r3, #0
 806dc4c:	d006      	beq.n	806dc5c <osTimerNew+0x84>
 806dc4e:	683b      	ldr	r3, [r7, #0]
 806dc50:	68db      	ldr	r3, [r3, #12]
 806dc52:	2b2b      	cmp	r3, #43	; 0x2b
 806dc54:	d902      	bls.n	806dc5c <osTimerNew+0x84>
          mem = 1;
 806dc56:	2301      	movs	r3, #1
 806dc58:	61bb      	str	r3, [r7, #24]
 806dc5a:	e00c      	b.n	806dc76 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 806dc5c:	683b      	ldr	r3, [r7, #0]
 806dc5e:	689b      	ldr	r3, [r3, #8]
 806dc60:	2b00      	cmp	r3, #0
 806dc62:	d108      	bne.n	806dc76 <osTimerNew+0x9e>
 806dc64:	683b      	ldr	r3, [r7, #0]
 806dc66:	68db      	ldr	r3, [r3, #12]
 806dc68:	2b00      	cmp	r3, #0
 806dc6a:	d104      	bne.n	806dc76 <osTimerNew+0x9e>
            mem = 0;
 806dc6c:	2300      	movs	r3, #0
 806dc6e:	61bb      	str	r3, [r7, #24]
 806dc70:	e001      	b.n	806dc76 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 806dc72:	2300      	movs	r3, #0
 806dc74:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 806dc76:	69bb      	ldr	r3, [r7, #24]
 806dc78:	2b01      	cmp	r3, #1
 806dc7a:	d10c      	bne.n	806dc96 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 806dc7c:	683b      	ldr	r3, [r7, #0]
 806dc7e:	689b      	ldr	r3, [r3, #8]
 806dc80:	9301      	str	r3, [sp, #4]
 806dc82:	4b12      	ldr	r3, [pc, #72]	; (806dccc <osTimerNew+0xf4>)
 806dc84:	9300      	str	r3, [sp, #0]
 806dc86:	697b      	ldr	r3, [r7, #20]
 806dc88:	69fa      	ldr	r2, [r7, #28]
 806dc8a:	2101      	movs	r1, #1
 806dc8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806dc8e:	f003 f81e 	bl	8070cce <xTimerCreateStatic>
 806dc92:	6238      	str	r0, [r7, #32]
 806dc94:	e00b      	b.n	806dcae <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 806dc96:	69bb      	ldr	r3, [r7, #24]
 806dc98:	2b00      	cmp	r3, #0
 806dc9a:	d108      	bne.n	806dcae <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 806dc9c:	4b0b      	ldr	r3, [pc, #44]	; (806dccc <osTimerNew+0xf4>)
 806dc9e:	9300      	str	r3, [sp, #0]
 806dca0:	697b      	ldr	r3, [r7, #20]
 806dca2:	69fa      	ldr	r2, [r7, #28]
 806dca4:	2101      	movs	r1, #1
 806dca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806dca8:	f002 fff0 	bl	8070c8c <xTimerCreate>
 806dcac:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 806dcae:	6a3b      	ldr	r3, [r7, #32]
 806dcb0:	2b00      	cmp	r3, #0
 806dcb2:	d105      	bne.n	806dcc0 <osTimerNew+0xe8>
 806dcb4:	697b      	ldr	r3, [r7, #20]
 806dcb6:	2b00      	cmp	r3, #0
 806dcb8:	d002      	beq.n	806dcc0 <osTimerNew+0xe8>
        vPortFree (callb);
 806dcba:	6978      	ldr	r0, [r7, #20]
 806dcbc:	f003 fec0 	bl	8071a40 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 806dcc0:	6a3b      	ldr	r3, [r7, #32]
}
 806dcc2:	4618      	mov	r0, r3
 806dcc4:	3728      	adds	r7, #40	; 0x28
 806dcc6:	46bd      	mov	sp, r7
 806dcc8:	bd80      	pop	{r7, pc}
 806dcca:	bf00      	nop
 806dccc:	0806dbaf 	.word	0x0806dbaf

0806dcd0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 806dcd0:	b580      	push	{r7, lr}
 806dcd2:	b088      	sub	sp, #32
 806dcd4:	af02      	add	r7, sp, #8
 806dcd6:	6078      	str	r0, [r7, #4]
 806dcd8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 806dcda:	687b      	ldr	r3, [r7, #4]
 806dcdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806dcde:	f3ef 8305 	mrs	r3, IPSR
 806dce2:	60fb      	str	r3, [r7, #12]
  return(result);
 806dce4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 806dce6:	2b00      	cmp	r3, #0
 806dce8:	d003      	beq.n	806dcf2 <osTimerStart+0x22>
    stat = osErrorISR;
 806dcea:	f06f 0305 	mvn.w	r3, #5
 806dcee:	617b      	str	r3, [r7, #20]
 806dcf0:	e017      	b.n	806dd22 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 806dcf2:	693b      	ldr	r3, [r7, #16]
 806dcf4:	2b00      	cmp	r3, #0
 806dcf6:	d103      	bne.n	806dd00 <osTimerStart+0x30>
    stat = osErrorParameter;
 806dcf8:	f06f 0303 	mvn.w	r3, #3
 806dcfc:	617b      	str	r3, [r7, #20]
 806dcfe:	e010      	b.n	806dd22 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 806dd00:	2300      	movs	r3, #0
 806dd02:	9300      	str	r3, [sp, #0]
 806dd04:	2300      	movs	r3, #0
 806dd06:	683a      	ldr	r2, [r7, #0]
 806dd08:	2104      	movs	r1, #4
 806dd0a:	6938      	ldr	r0, [r7, #16]
 806dd0c:	f003 f858 	bl	8070dc0 <xTimerGenericCommand>
 806dd10:	4603      	mov	r3, r0
 806dd12:	2b01      	cmp	r3, #1
 806dd14:	d102      	bne.n	806dd1c <osTimerStart+0x4c>
      stat = osOK;
 806dd16:	2300      	movs	r3, #0
 806dd18:	617b      	str	r3, [r7, #20]
 806dd1a:	e002      	b.n	806dd22 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 806dd1c:	f06f 0302 	mvn.w	r3, #2
 806dd20:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 806dd22:	697b      	ldr	r3, [r7, #20]
}
 806dd24:	4618      	mov	r0, r3
 806dd26:	3718      	adds	r7, #24
 806dd28:	46bd      	mov	sp, r7
 806dd2a:	bd80      	pop	{r7, pc}

0806dd2c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 806dd2c:	b580      	push	{r7, lr}
 806dd2e:	b088      	sub	sp, #32
 806dd30:	af00      	add	r7, sp, #0
 806dd32:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 806dd34:	2300      	movs	r3, #0
 806dd36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806dd38:	f3ef 8305 	mrs	r3, IPSR
 806dd3c:	60bb      	str	r3, [r7, #8]
  return(result);
 806dd3e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 806dd40:	2b00      	cmp	r3, #0
 806dd42:	d174      	bne.n	806de2e <osMutexNew+0x102>
    if (attr != NULL) {
 806dd44:	687b      	ldr	r3, [r7, #4]
 806dd46:	2b00      	cmp	r3, #0
 806dd48:	d003      	beq.n	806dd52 <osMutexNew+0x26>
      type = attr->attr_bits;
 806dd4a:	687b      	ldr	r3, [r7, #4]
 806dd4c:	685b      	ldr	r3, [r3, #4]
 806dd4e:	61bb      	str	r3, [r7, #24]
 806dd50:	e001      	b.n	806dd56 <osMutexNew+0x2a>
    } else {
      type = 0U;
 806dd52:	2300      	movs	r3, #0
 806dd54:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 806dd56:	69bb      	ldr	r3, [r7, #24]
 806dd58:	f003 0301 	and.w	r3, r3, #1
 806dd5c:	2b00      	cmp	r3, #0
 806dd5e:	d002      	beq.n	806dd66 <osMutexNew+0x3a>
      rmtx = 1U;
 806dd60:	2301      	movs	r3, #1
 806dd62:	617b      	str	r3, [r7, #20]
 806dd64:	e001      	b.n	806dd6a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 806dd66:	2300      	movs	r3, #0
 806dd68:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 806dd6a:	69bb      	ldr	r3, [r7, #24]
 806dd6c:	f003 0308 	and.w	r3, r3, #8
 806dd70:	2b00      	cmp	r3, #0
 806dd72:	d15c      	bne.n	806de2e <osMutexNew+0x102>
      mem = -1;
 806dd74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806dd78:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 806dd7a:	687b      	ldr	r3, [r7, #4]
 806dd7c:	2b00      	cmp	r3, #0
 806dd7e:	d015      	beq.n	806ddac <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 806dd80:	687b      	ldr	r3, [r7, #4]
 806dd82:	689b      	ldr	r3, [r3, #8]
 806dd84:	2b00      	cmp	r3, #0
 806dd86:	d006      	beq.n	806dd96 <osMutexNew+0x6a>
 806dd88:	687b      	ldr	r3, [r7, #4]
 806dd8a:	68db      	ldr	r3, [r3, #12]
 806dd8c:	2b4f      	cmp	r3, #79	; 0x4f
 806dd8e:	d902      	bls.n	806dd96 <osMutexNew+0x6a>
          mem = 1;
 806dd90:	2301      	movs	r3, #1
 806dd92:	613b      	str	r3, [r7, #16]
 806dd94:	e00c      	b.n	806ddb0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 806dd96:	687b      	ldr	r3, [r7, #4]
 806dd98:	689b      	ldr	r3, [r3, #8]
 806dd9a:	2b00      	cmp	r3, #0
 806dd9c:	d108      	bne.n	806ddb0 <osMutexNew+0x84>
 806dd9e:	687b      	ldr	r3, [r7, #4]
 806dda0:	68db      	ldr	r3, [r3, #12]
 806dda2:	2b00      	cmp	r3, #0
 806dda4:	d104      	bne.n	806ddb0 <osMutexNew+0x84>
            mem = 0;
 806dda6:	2300      	movs	r3, #0
 806dda8:	613b      	str	r3, [r7, #16]
 806ddaa:	e001      	b.n	806ddb0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 806ddac:	2300      	movs	r3, #0
 806ddae:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 806ddb0:	693b      	ldr	r3, [r7, #16]
 806ddb2:	2b01      	cmp	r3, #1
 806ddb4:	d112      	bne.n	806dddc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 806ddb6:	697b      	ldr	r3, [r7, #20]
 806ddb8:	2b00      	cmp	r3, #0
 806ddba:	d007      	beq.n	806ddcc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 806ddbc:	687b      	ldr	r3, [r7, #4]
 806ddbe:	689b      	ldr	r3, [r3, #8]
 806ddc0:	4619      	mov	r1, r3
 806ddc2:	2004      	movs	r0, #4
 806ddc4:	f000 fd8d 	bl	806e8e2 <xQueueCreateMutexStatic>
 806ddc8:	61f8      	str	r0, [r7, #28]
 806ddca:	e016      	b.n	806ddfa <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 806ddcc:	687b      	ldr	r3, [r7, #4]
 806ddce:	689b      	ldr	r3, [r3, #8]
 806ddd0:	4619      	mov	r1, r3
 806ddd2:	2001      	movs	r0, #1
 806ddd4:	f000 fd85 	bl	806e8e2 <xQueueCreateMutexStatic>
 806ddd8:	61f8      	str	r0, [r7, #28]
 806ddda:	e00e      	b.n	806ddfa <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 806dddc:	693b      	ldr	r3, [r7, #16]
 806ddde:	2b00      	cmp	r3, #0
 806dde0:	d10b      	bne.n	806ddfa <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 806dde2:	697b      	ldr	r3, [r7, #20]
 806dde4:	2b00      	cmp	r3, #0
 806dde6:	d004      	beq.n	806ddf2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 806dde8:	2004      	movs	r0, #4
 806ddea:	f000 fd62 	bl	806e8b2 <xQueueCreateMutex>
 806ddee:	61f8      	str	r0, [r7, #28]
 806ddf0:	e003      	b.n	806ddfa <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 806ddf2:	2001      	movs	r0, #1
 806ddf4:	f000 fd5d 	bl	806e8b2 <xQueueCreateMutex>
 806ddf8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 806ddfa:	69fb      	ldr	r3, [r7, #28]
 806ddfc:	2b00      	cmp	r3, #0
 806ddfe:	d00c      	beq.n	806de1a <osMutexNew+0xee>
        if (attr != NULL) {
 806de00:	687b      	ldr	r3, [r7, #4]
 806de02:	2b00      	cmp	r3, #0
 806de04:	d003      	beq.n	806de0e <osMutexNew+0xe2>
          name = attr->name;
 806de06:	687b      	ldr	r3, [r7, #4]
 806de08:	681b      	ldr	r3, [r3, #0]
 806de0a:	60fb      	str	r3, [r7, #12]
 806de0c:	e001      	b.n	806de12 <osMutexNew+0xe6>
        } else {
          name = NULL;
 806de0e:	2300      	movs	r3, #0
 806de10:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 806de12:	68f9      	ldr	r1, [r7, #12]
 806de14:	69f8      	ldr	r0, [r7, #28]
 806de16:	f001 fc31 	bl	806f67c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 806de1a:	69fb      	ldr	r3, [r7, #28]
 806de1c:	2b00      	cmp	r3, #0
 806de1e:	d006      	beq.n	806de2e <osMutexNew+0x102>
 806de20:	697b      	ldr	r3, [r7, #20]
 806de22:	2b00      	cmp	r3, #0
 806de24:	d003      	beq.n	806de2e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 806de26:	69fb      	ldr	r3, [r7, #28]
 806de28:	f043 0301 	orr.w	r3, r3, #1
 806de2c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 806de2e:	69fb      	ldr	r3, [r7, #28]
}
 806de30:	4618      	mov	r0, r3
 806de32:	3720      	adds	r7, #32
 806de34:	46bd      	mov	sp, r7
 806de36:	bd80      	pop	{r7, pc}

0806de38 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 806de38:	b580      	push	{r7, lr}
 806de3a:	b086      	sub	sp, #24
 806de3c:	af00      	add	r7, sp, #0
 806de3e:	6078      	str	r0, [r7, #4]
 806de40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 806de42:	687b      	ldr	r3, [r7, #4]
 806de44:	f023 0301 	bic.w	r3, r3, #1
 806de48:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 806de4a:	687b      	ldr	r3, [r7, #4]
 806de4c:	f003 0301 	and.w	r3, r3, #1
 806de50:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 806de52:	2300      	movs	r3, #0
 806de54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806de56:	f3ef 8305 	mrs	r3, IPSR
 806de5a:	60bb      	str	r3, [r7, #8]
  return(result);
 806de5c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 806de5e:	2b00      	cmp	r3, #0
 806de60:	d003      	beq.n	806de6a <osMutexAcquire+0x32>
    stat = osErrorISR;
 806de62:	f06f 0305 	mvn.w	r3, #5
 806de66:	617b      	str	r3, [r7, #20]
 806de68:	e02c      	b.n	806dec4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 806de6a:	693b      	ldr	r3, [r7, #16]
 806de6c:	2b00      	cmp	r3, #0
 806de6e:	d103      	bne.n	806de78 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 806de70:	f06f 0303 	mvn.w	r3, #3
 806de74:	617b      	str	r3, [r7, #20]
 806de76:	e025      	b.n	806dec4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 806de78:	68fb      	ldr	r3, [r7, #12]
 806de7a:	2b00      	cmp	r3, #0
 806de7c:	d011      	beq.n	806dea2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 806de7e:	6839      	ldr	r1, [r7, #0]
 806de80:	6938      	ldr	r0, [r7, #16]
 806de82:	f000 fd7d 	bl	806e980 <xQueueTakeMutexRecursive>
 806de86:	4603      	mov	r3, r0
 806de88:	2b01      	cmp	r3, #1
 806de8a:	d01b      	beq.n	806dec4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 806de8c:	683b      	ldr	r3, [r7, #0]
 806de8e:	2b00      	cmp	r3, #0
 806de90:	d003      	beq.n	806de9a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 806de92:	f06f 0301 	mvn.w	r3, #1
 806de96:	617b      	str	r3, [r7, #20]
 806de98:	e014      	b.n	806dec4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 806de9a:	f06f 0302 	mvn.w	r3, #2
 806de9e:	617b      	str	r3, [r7, #20]
 806dea0:	e010      	b.n	806dec4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 806dea2:	6839      	ldr	r1, [r7, #0]
 806dea4:	6938      	ldr	r0, [r7, #16]
 806dea6:	f001 f911 	bl	806f0cc <xQueueSemaphoreTake>
 806deaa:	4603      	mov	r3, r0
 806deac:	2b01      	cmp	r3, #1
 806deae:	d009      	beq.n	806dec4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 806deb0:	683b      	ldr	r3, [r7, #0]
 806deb2:	2b00      	cmp	r3, #0
 806deb4:	d003      	beq.n	806debe <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 806deb6:	f06f 0301 	mvn.w	r3, #1
 806deba:	617b      	str	r3, [r7, #20]
 806debc:	e002      	b.n	806dec4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 806debe:	f06f 0302 	mvn.w	r3, #2
 806dec2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 806dec4:	697b      	ldr	r3, [r7, #20]
}
 806dec6:	4618      	mov	r0, r3
 806dec8:	3718      	adds	r7, #24
 806deca:	46bd      	mov	sp, r7
 806decc:	bd80      	pop	{r7, pc}

0806dece <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 806dece:	b580      	push	{r7, lr}
 806ded0:	b086      	sub	sp, #24
 806ded2:	af00      	add	r7, sp, #0
 806ded4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 806ded6:	687b      	ldr	r3, [r7, #4]
 806ded8:	f023 0301 	bic.w	r3, r3, #1
 806dedc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 806dede:	687b      	ldr	r3, [r7, #4]
 806dee0:	f003 0301 	and.w	r3, r3, #1
 806dee4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 806dee6:	2300      	movs	r3, #0
 806dee8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806deea:	f3ef 8305 	mrs	r3, IPSR
 806deee:	60bb      	str	r3, [r7, #8]
  return(result);
 806def0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 806def2:	2b00      	cmp	r3, #0
 806def4:	d003      	beq.n	806defe <osMutexRelease+0x30>
    stat = osErrorISR;
 806def6:	f06f 0305 	mvn.w	r3, #5
 806defa:	617b      	str	r3, [r7, #20]
 806defc:	e01f      	b.n	806df3e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 806defe:	693b      	ldr	r3, [r7, #16]
 806df00:	2b00      	cmp	r3, #0
 806df02:	d103      	bne.n	806df0c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 806df04:	f06f 0303 	mvn.w	r3, #3
 806df08:	617b      	str	r3, [r7, #20]
 806df0a:	e018      	b.n	806df3e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 806df0c:	68fb      	ldr	r3, [r7, #12]
 806df0e:	2b00      	cmp	r3, #0
 806df10:	d009      	beq.n	806df26 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 806df12:	6938      	ldr	r0, [r7, #16]
 806df14:	f000 fd00 	bl	806e918 <xQueueGiveMutexRecursive>
 806df18:	4603      	mov	r3, r0
 806df1a:	2b01      	cmp	r3, #1
 806df1c:	d00f      	beq.n	806df3e <osMutexRelease+0x70>
        stat = osErrorResource;
 806df1e:	f06f 0302 	mvn.w	r3, #2
 806df22:	617b      	str	r3, [r7, #20]
 806df24:	e00b      	b.n	806df3e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 806df26:	2300      	movs	r3, #0
 806df28:	2200      	movs	r2, #0
 806df2a:	2100      	movs	r1, #0
 806df2c:	6938      	ldr	r0, [r7, #16]
 806df2e:	f000 fdc7 	bl	806eac0 <xQueueGenericSend>
 806df32:	4603      	mov	r3, r0
 806df34:	2b01      	cmp	r3, #1
 806df36:	d002      	beq.n	806df3e <osMutexRelease+0x70>
        stat = osErrorResource;
 806df38:	f06f 0302 	mvn.w	r3, #2
 806df3c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 806df3e:	697b      	ldr	r3, [r7, #20]
}
 806df40:	4618      	mov	r0, r3
 806df42:	3718      	adds	r7, #24
 806df44:	46bd      	mov	sp, r7
 806df46:	bd80      	pop	{r7, pc}

0806df48 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 806df48:	b580      	push	{r7, lr}
 806df4a:	b08a      	sub	sp, #40	; 0x28
 806df4c:	af02      	add	r7, sp, #8
 806df4e:	60f8      	str	r0, [r7, #12]
 806df50:	60b9      	str	r1, [r7, #8]
 806df52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 806df54:	2300      	movs	r3, #0
 806df56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806df58:	f3ef 8305 	mrs	r3, IPSR
 806df5c:	613b      	str	r3, [r7, #16]
  return(result);
 806df5e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 806df60:	2b00      	cmp	r3, #0
 806df62:	d175      	bne.n	806e050 <osSemaphoreNew+0x108>
 806df64:	68fb      	ldr	r3, [r7, #12]
 806df66:	2b00      	cmp	r3, #0
 806df68:	d072      	beq.n	806e050 <osSemaphoreNew+0x108>
 806df6a:	68ba      	ldr	r2, [r7, #8]
 806df6c:	68fb      	ldr	r3, [r7, #12]
 806df6e:	429a      	cmp	r2, r3
 806df70:	d86e      	bhi.n	806e050 <osSemaphoreNew+0x108>
    mem = -1;
 806df72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806df76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 806df78:	687b      	ldr	r3, [r7, #4]
 806df7a:	2b00      	cmp	r3, #0
 806df7c:	d015      	beq.n	806dfaa <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 806df7e:	687b      	ldr	r3, [r7, #4]
 806df80:	689b      	ldr	r3, [r3, #8]
 806df82:	2b00      	cmp	r3, #0
 806df84:	d006      	beq.n	806df94 <osSemaphoreNew+0x4c>
 806df86:	687b      	ldr	r3, [r7, #4]
 806df88:	68db      	ldr	r3, [r3, #12]
 806df8a:	2b4f      	cmp	r3, #79	; 0x4f
 806df8c:	d902      	bls.n	806df94 <osSemaphoreNew+0x4c>
        mem = 1;
 806df8e:	2301      	movs	r3, #1
 806df90:	61bb      	str	r3, [r7, #24]
 806df92:	e00c      	b.n	806dfae <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 806df94:	687b      	ldr	r3, [r7, #4]
 806df96:	689b      	ldr	r3, [r3, #8]
 806df98:	2b00      	cmp	r3, #0
 806df9a:	d108      	bne.n	806dfae <osSemaphoreNew+0x66>
 806df9c:	687b      	ldr	r3, [r7, #4]
 806df9e:	68db      	ldr	r3, [r3, #12]
 806dfa0:	2b00      	cmp	r3, #0
 806dfa2:	d104      	bne.n	806dfae <osSemaphoreNew+0x66>
          mem = 0;
 806dfa4:	2300      	movs	r3, #0
 806dfa6:	61bb      	str	r3, [r7, #24]
 806dfa8:	e001      	b.n	806dfae <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 806dfaa:	2300      	movs	r3, #0
 806dfac:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 806dfae:	69bb      	ldr	r3, [r7, #24]
 806dfb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806dfb4:	d04c      	beq.n	806e050 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 806dfb6:	68fb      	ldr	r3, [r7, #12]
 806dfb8:	2b01      	cmp	r3, #1
 806dfba:	d128      	bne.n	806e00e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 806dfbc:	69bb      	ldr	r3, [r7, #24]
 806dfbe:	2b01      	cmp	r3, #1
 806dfc0:	d10a      	bne.n	806dfd8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 806dfc2:	687b      	ldr	r3, [r7, #4]
 806dfc4:	689b      	ldr	r3, [r3, #8]
 806dfc6:	2203      	movs	r2, #3
 806dfc8:	9200      	str	r2, [sp, #0]
 806dfca:	2200      	movs	r2, #0
 806dfcc:	2100      	movs	r1, #0
 806dfce:	2001      	movs	r0, #1
 806dfd0:	f000 fb80 	bl	806e6d4 <xQueueGenericCreateStatic>
 806dfd4:	61f8      	str	r0, [r7, #28]
 806dfd6:	e005      	b.n	806dfe4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 806dfd8:	2203      	movs	r2, #3
 806dfda:	2100      	movs	r1, #0
 806dfdc:	2001      	movs	r0, #1
 806dfde:	f000 fbf1 	bl	806e7c4 <xQueueGenericCreate>
 806dfe2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 806dfe4:	69fb      	ldr	r3, [r7, #28]
 806dfe6:	2b00      	cmp	r3, #0
 806dfe8:	d022      	beq.n	806e030 <osSemaphoreNew+0xe8>
 806dfea:	68bb      	ldr	r3, [r7, #8]
 806dfec:	2b00      	cmp	r3, #0
 806dfee:	d01f      	beq.n	806e030 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 806dff0:	2300      	movs	r3, #0
 806dff2:	2200      	movs	r2, #0
 806dff4:	2100      	movs	r1, #0
 806dff6:	69f8      	ldr	r0, [r7, #28]
 806dff8:	f000 fd62 	bl	806eac0 <xQueueGenericSend>
 806dffc:	4603      	mov	r3, r0
 806dffe:	2b01      	cmp	r3, #1
 806e000:	d016      	beq.n	806e030 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 806e002:	69f8      	ldr	r0, [r7, #28]
 806e004:	f001 f9ee 	bl	806f3e4 <vQueueDelete>
            hSemaphore = NULL;
 806e008:	2300      	movs	r3, #0
 806e00a:	61fb      	str	r3, [r7, #28]
 806e00c:	e010      	b.n	806e030 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 806e00e:	69bb      	ldr	r3, [r7, #24]
 806e010:	2b01      	cmp	r3, #1
 806e012:	d108      	bne.n	806e026 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 806e014:	687b      	ldr	r3, [r7, #4]
 806e016:	689b      	ldr	r3, [r3, #8]
 806e018:	461a      	mov	r2, r3
 806e01a:	68b9      	ldr	r1, [r7, #8]
 806e01c:	68f8      	ldr	r0, [r7, #12]
 806e01e:	f000 fce5 	bl	806e9ec <xQueueCreateCountingSemaphoreStatic>
 806e022:	61f8      	str	r0, [r7, #28]
 806e024:	e004      	b.n	806e030 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 806e026:	68b9      	ldr	r1, [r7, #8]
 806e028:	68f8      	ldr	r0, [r7, #12]
 806e02a:	f000 fd16 	bl	806ea5a <xQueueCreateCountingSemaphore>
 806e02e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 806e030:	69fb      	ldr	r3, [r7, #28]
 806e032:	2b00      	cmp	r3, #0
 806e034:	d00c      	beq.n	806e050 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 806e036:	687b      	ldr	r3, [r7, #4]
 806e038:	2b00      	cmp	r3, #0
 806e03a:	d003      	beq.n	806e044 <osSemaphoreNew+0xfc>
          name = attr->name;
 806e03c:	687b      	ldr	r3, [r7, #4]
 806e03e:	681b      	ldr	r3, [r3, #0]
 806e040:	617b      	str	r3, [r7, #20]
 806e042:	e001      	b.n	806e048 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 806e044:	2300      	movs	r3, #0
 806e046:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 806e048:	6979      	ldr	r1, [r7, #20]
 806e04a:	69f8      	ldr	r0, [r7, #28]
 806e04c:	f001 fb16 	bl	806f67c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 806e050:	69fb      	ldr	r3, [r7, #28]
}
 806e052:	4618      	mov	r0, r3
 806e054:	3720      	adds	r7, #32
 806e056:	46bd      	mov	sp, r7
 806e058:	bd80      	pop	{r7, pc}
	...

0806e05c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 806e05c:	b580      	push	{r7, lr}
 806e05e:	b086      	sub	sp, #24
 806e060:	af00      	add	r7, sp, #0
 806e062:	6078      	str	r0, [r7, #4]
 806e064:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 806e066:	687b      	ldr	r3, [r7, #4]
 806e068:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 806e06a:	2300      	movs	r3, #0
 806e06c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 806e06e:	693b      	ldr	r3, [r7, #16]
 806e070:	2b00      	cmp	r3, #0
 806e072:	d103      	bne.n	806e07c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 806e074:	f06f 0303 	mvn.w	r3, #3
 806e078:	617b      	str	r3, [r7, #20]
 806e07a:	e039      	b.n	806e0f0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e07c:	f3ef 8305 	mrs	r3, IPSR
 806e080:	60fb      	str	r3, [r7, #12]
  return(result);
 806e082:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 806e084:	2b00      	cmp	r3, #0
 806e086:	d022      	beq.n	806e0ce <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 806e088:	683b      	ldr	r3, [r7, #0]
 806e08a:	2b00      	cmp	r3, #0
 806e08c:	d003      	beq.n	806e096 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 806e08e:	f06f 0303 	mvn.w	r3, #3
 806e092:	617b      	str	r3, [r7, #20]
 806e094:	e02c      	b.n	806e0f0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 806e096:	2300      	movs	r3, #0
 806e098:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 806e09a:	f107 0308 	add.w	r3, r7, #8
 806e09e:	461a      	mov	r2, r3
 806e0a0:	2100      	movs	r1, #0
 806e0a2:	6938      	ldr	r0, [r7, #16]
 806e0a4:	f001 f91e 	bl	806f2e4 <xQueueReceiveFromISR>
 806e0a8:	4603      	mov	r3, r0
 806e0aa:	2b01      	cmp	r3, #1
 806e0ac:	d003      	beq.n	806e0b6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 806e0ae:	f06f 0302 	mvn.w	r3, #2
 806e0b2:	617b      	str	r3, [r7, #20]
 806e0b4:	e01c      	b.n	806e0f0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 806e0b6:	68bb      	ldr	r3, [r7, #8]
 806e0b8:	2b00      	cmp	r3, #0
 806e0ba:	d019      	beq.n	806e0f0 <osSemaphoreAcquire+0x94>
 806e0bc:	4b0f      	ldr	r3, [pc, #60]	; (806e0fc <osSemaphoreAcquire+0xa0>)
 806e0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e0c2:	601a      	str	r2, [r3, #0]
 806e0c4:	f3bf 8f4f 	dsb	sy
 806e0c8:	f3bf 8f6f 	isb	sy
 806e0cc:	e010      	b.n	806e0f0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 806e0ce:	6839      	ldr	r1, [r7, #0]
 806e0d0:	6938      	ldr	r0, [r7, #16]
 806e0d2:	f000 fffb 	bl	806f0cc <xQueueSemaphoreTake>
 806e0d6:	4603      	mov	r3, r0
 806e0d8:	2b01      	cmp	r3, #1
 806e0da:	d009      	beq.n	806e0f0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 806e0dc:	683b      	ldr	r3, [r7, #0]
 806e0de:	2b00      	cmp	r3, #0
 806e0e0:	d003      	beq.n	806e0ea <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 806e0e2:	f06f 0301 	mvn.w	r3, #1
 806e0e6:	617b      	str	r3, [r7, #20]
 806e0e8:	e002      	b.n	806e0f0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 806e0ea:	f06f 0302 	mvn.w	r3, #2
 806e0ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 806e0f0:	697b      	ldr	r3, [r7, #20]
}
 806e0f2:	4618      	mov	r0, r3
 806e0f4:	3718      	adds	r7, #24
 806e0f6:	46bd      	mov	sp, r7
 806e0f8:	bd80      	pop	{r7, pc}
 806e0fa:	bf00      	nop
 806e0fc:	e000ed04 	.word	0xe000ed04

0806e100 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 806e100:	b580      	push	{r7, lr}
 806e102:	b086      	sub	sp, #24
 806e104:	af00      	add	r7, sp, #0
 806e106:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 806e108:	687b      	ldr	r3, [r7, #4]
 806e10a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 806e10c:	2300      	movs	r3, #0
 806e10e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 806e110:	693b      	ldr	r3, [r7, #16]
 806e112:	2b00      	cmp	r3, #0
 806e114:	d103      	bne.n	806e11e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 806e116:	f06f 0303 	mvn.w	r3, #3
 806e11a:	617b      	str	r3, [r7, #20]
 806e11c:	e02c      	b.n	806e178 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e11e:	f3ef 8305 	mrs	r3, IPSR
 806e122:	60fb      	str	r3, [r7, #12]
  return(result);
 806e124:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 806e126:	2b00      	cmp	r3, #0
 806e128:	d01a      	beq.n	806e160 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 806e12a:	2300      	movs	r3, #0
 806e12c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 806e12e:	f107 0308 	add.w	r3, r7, #8
 806e132:	4619      	mov	r1, r3
 806e134:	6938      	ldr	r0, [r7, #16]
 806e136:	f000 fe5c 	bl	806edf2 <xQueueGiveFromISR>
 806e13a:	4603      	mov	r3, r0
 806e13c:	2b01      	cmp	r3, #1
 806e13e:	d003      	beq.n	806e148 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 806e140:	f06f 0302 	mvn.w	r3, #2
 806e144:	617b      	str	r3, [r7, #20]
 806e146:	e017      	b.n	806e178 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 806e148:	68bb      	ldr	r3, [r7, #8]
 806e14a:	2b00      	cmp	r3, #0
 806e14c:	d014      	beq.n	806e178 <osSemaphoreRelease+0x78>
 806e14e:	4b0d      	ldr	r3, [pc, #52]	; (806e184 <osSemaphoreRelease+0x84>)
 806e150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e154:	601a      	str	r2, [r3, #0]
 806e156:	f3bf 8f4f 	dsb	sy
 806e15a:	f3bf 8f6f 	isb	sy
 806e15e:	e00b      	b.n	806e178 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 806e160:	2300      	movs	r3, #0
 806e162:	2200      	movs	r2, #0
 806e164:	2100      	movs	r1, #0
 806e166:	6938      	ldr	r0, [r7, #16]
 806e168:	f000 fcaa 	bl	806eac0 <xQueueGenericSend>
 806e16c:	4603      	mov	r3, r0
 806e16e:	2b01      	cmp	r3, #1
 806e170:	d002      	beq.n	806e178 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 806e172:	f06f 0302 	mvn.w	r3, #2
 806e176:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 806e178:	697b      	ldr	r3, [r7, #20]
}
 806e17a:	4618      	mov	r0, r3
 806e17c:	3718      	adds	r7, #24
 806e17e:	46bd      	mov	sp, r7
 806e180:	bd80      	pop	{r7, pc}
 806e182:	bf00      	nop
 806e184:	e000ed04 	.word	0xe000ed04

0806e188 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 806e188:	b580      	push	{r7, lr}
 806e18a:	b086      	sub	sp, #24
 806e18c:	af00      	add	r7, sp, #0
 806e18e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 806e190:	687b      	ldr	r3, [r7, #4]
 806e192:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e194:	f3ef 8305 	mrs	r3, IPSR
 806e198:	60fb      	str	r3, [r7, #12]
  return(result);
 806e19a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 806e19c:	2b00      	cmp	r3, #0
 806e19e:	d003      	beq.n	806e1a8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 806e1a0:	f06f 0305 	mvn.w	r3, #5
 806e1a4:	617b      	str	r3, [r7, #20]
 806e1a6:	e00e      	b.n	806e1c6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 806e1a8:	693b      	ldr	r3, [r7, #16]
 806e1aa:	2b00      	cmp	r3, #0
 806e1ac:	d103      	bne.n	806e1b6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 806e1ae:	f06f 0303 	mvn.w	r3, #3
 806e1b2:	617b      	str	r3, [r7, #20]
 806e1b4:	e007      	b.n	806e1c6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 806e1b6:	6938      	ldr	r0, [r7, #16]
 806e1b8:	f001 fa8a 	bl	806f6d0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 806e1bc:	2300      	movs	r3, #0
 806e1be:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 806e1c0:	6938      	ldr	r0, [r7, #16]
 806e1c2:	f001 f90f 	bl	806f3e4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 806e1c6:	697b      	ldr	r3, [r7, #20]
}
 806e1c8:	4618      	mov	r0, r3
 806e1ca:	3718      	adds	r7, #24
 806e1cc:	46bd      	mov	sp, r7
 806e1ce:	bd80      	pop	{r7, pc}

0806e1d0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 806e1d0:	b580      	push	{r7, lr}
 806e1d2:	b08a      	sub	sp, #40	; 0x28
 806e1d4:	af02      	add	r7, sp, #8
 806e1d6:	60f8      	str	r0, [r7, #12]
 806e1d8:	60b9      	str	r1, [r7, #8]
 806e1da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 806e1dc:	2300      	movs	r3, #0
 806e1de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e1e0:	f3ef 8305 	mrs	r3, IPSR
 806e1e4:	613b      	str	r3, [r7, #16]
  return(result);
 806e1e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 806e1e8:	2b00      	cmp	r3, #0
 806e1ea:	d15f      	bne.n	806e2ac <osMessageQueueNew+0xdc>
 806e1ec:	68fb      	ldr	r3, [r7, #12]
 806e1ee:	2b00      	cmp	r3, #0
 806e1f0:	d05c      	beq.n	806e2ac <osMessageQueueNew+0xdc>
 806e1f2:	68bb      	ldr	r3, [r7, #8]
 806e1f4:	2b00      	cmp	r3, #0
 806e1f6:	d059      	beq.n	806e2ac <osMessageQueueNew+0xdc>
    mem = -1;
 806e1f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e1fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 806e1fe:	687b      	ldr	r3, [r7, #4]
 806e200:	2b00      	cmp	r3, #0
 806e202:	d029      	beq.n	806e258 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 806e204:	687b      	ldr	r3, [r7, #4]
 806e206:	689b      	ldr	r3, [r3, #8]
 806e208:	2b00      	cmp	r3, #0
 806e20a:	d012      	beq.n	806e232 <osMessageQueueNew+0x62>
 806e20c:	687b      	ldr	r3, [r7, #4]
 806e20e:	68db      	ldr	r3, [r3, #12]
 806e210:	2b4f      	cmp	r3, #79	; 0x4f
 806e212:	d90e      	bls.n	806e232 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 806e214:	687b      	ldr	r3, [r7, #4]
 806e216:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 806e218:	2b00      	cmp	r3, #0
 806e21a:	d00a      	beq.n	806e232 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 806e21c:	687b      	ldr	r3, [r7, #4]
 806e21e:	695a      	ldr	r2, [r3, #20]
 806e220:	68fb      	ldr	r3, [r7, #12]
 806e222:	68b9      	ldr	r1, [r7, #8]
 806e224:	fb01 f303 	mul.w	r3, r1, r3
 806e228:	429a      	cmp	r2, r3
 806e22a:	d302      	bcc.n	806e232 <osMessageQueueNew+0x62>
        mem = 1;
 806e22c:	2301      	movs	r3, #1
 806e22e:	61bb      	str	r3, [r7, #24]
 806e230:	e014      	b.n	806e25c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 806e232:	687b      	ldr	r3, [r7, #4]
 806e234:	689b      	ldr	r3, [r3, #8]
 806e236:	2b00      	cmp	r3, #0
 806e238:	d110      	bne.n	806e25c <osMessageQueueNew+0x8c>
 806e23a:	687b      	ldr	r3, [r7, #4]
 806e23c:	68db      	ldr	r3, [r3, #12]
 806e23e:	2b00      	cmp	r3, #0
 806e240:	d10c      	bne.n	806e25c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 806e242:	687b      	ldr	r3, [r7, #4]
 806e244:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 806e246:	2b00      	cmp	r3, #0
 806e248:	d108      	bne.n	806e25c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 806e24a:	687b      	ldr	r3, [r7, #4]
 806e24c:	695b      	ldr	r3, [r3, #20]
 806e24e:	2b00      	cmp	r3, #0
 806e250:	d104      	bne.n	806e25c <osMessageQueueNew+0x8c>
          mem = 0;
 806e252:	2300      	movs	r3, #0
 806e254:	61bb      	str	r3, [r7, #24]
 806e256:	e001      	b.n	806e25c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 806e258:	2300      	movs	r3, #0
 806e25a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 806e25c:	69bb      	ldr	r3, [r7, #24]
 806e25e:	2b01      	cmp	r3, #1
 806e260:	d10b      	bne.n	806e27a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 806e262:	687b      	ldr	r3, [r7, #4]
 806e264:	691a      	ldr	r2, [r3, #16]
 806e266:	687b      	ldr	r3, [r7, #4]
 806e268:	689b      	ldr	r3, [r3, #8]
 806e26a:	2100      	movs	r1, #0
 806e26c:	9100      	str	r1, [sp, #0]
 806e26e:	68b9      	ldr	r1, [r7, #8]
 806e270:	68f8      	ldr	r0, [r7, #12]
 806e272:	f000 fa2f 	bl	806e6d4 <xQueueGenericCreateStatic>
 806e276:	61f8      	str	r0, [r7, #28]
 806e278:	e008      	b.n	806e28c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 806e27a:	69bb      	ldr	r3, [r7, #24]
 806e27c:	2b00      	cmp	r3, #0
 806e27e:	d105      	bne.n	806e28c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 806e280:	2200      	movs	r2, #0
 806e282:	68b9      	ldr	r1, [r7, #8]
 806e284:	68f8      	ldr	r0, [r7, #12]
 806e286:	f000 fa9d 	bl	806e7c4 <xQueueGenericCreate>
 806e28a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 806e28c:	69fb      	ldr	r3, [r7, #28]
 806e28e:	2b00      	cmp	r3, #0
 806e290:	d00c      	beq.n	806e2ac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 806e292:	687b      	ldr	r3, [r7, #4]
 806e294:	2b00      	cmp	r3, #0
 806e296:	d003      	beq.n	806e2a0 <osMessageQueueNew+0xd0>
        name = attr->name;
 806e298:	687b      	ldr	r3, [r7, #4]
 806e29a:	681b      	ldr	r3, [r3, #0]
 806e29c:	617b      	str	r3, [r7, #20]
 806e29e:	e001      	b.n	806e2a4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 806e2a0:	2300      	movs	r3, #0
 806e2a2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 806e2a4:	6979      	ldr	r1, [r7, #20]
 806e2a6:	69f8      	ldr	r0, [r7, #28]
 806e2a8:	f001 f9e8 	bl	806f67c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 806e2ac:	69fb      	ldr	r3, [r7, #28]
}
 806e2ae:	4618      	mov	r0, r3
 806e2b0:	3720      	adds	r7, #32
 806e2b2:	46bd      	mov	sp, r7
 806e2b4:	bd80      	pop	{r7, pc}
	...

0806e2b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 806e2b8:	b580      	push	{r7, lr}
 806e2ba:	b088      	sub	sp, #32
 806e2bc:	af00      	add	r7, sp, #0
 806e2be:	60f8      	str	r0, [r7, #12]
 806e2c0:	60b9      	str	r1, [r7, #8]
 806e2c2:	603b      	str	r3, [r7, #0]
 806e2c4:	4613      	mov	r3, r2
 806e2c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 806e2c8:	68fb      	ldr	r3, [r7, #12]
 806e2ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 806e2cc:	2300      	movs	r3, #0
 806e2ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e2d0:	f3ef 8305 	mrs	r3, IPSR
 806e2d4:	617b      	str	r3, [r7, #20]
  return(result);
 806e2d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 806e2d8:	2b00      	cmp	r3, #0
 806e2da:	d028      	beq.n	806e32e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 806e2dc:	69bb      	ldr	r3, [r7, #24]
 806e2de:	2b00      	cmp	r3, #0
 806e2e0:	d005      	beq.n	806e2ee <osMessageQueuePut+0x36>
 806e2e2:	68bb      	ldr	r3, [r7, #8]
 806e2e4:	2b00      	cmp	r3, #0
 806e2e6:	d002      	beq.n	806e2ee <osMessageQueuePut+0x36>
 806e2e8:	683b      	ldr	r3, [r7, #0]
 806e2ea:	2b00      	cmp	r3, #0
 806e2ec:	d003      	beq.n	806e2f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 806e2ee:	f06f 0303 	mvn.w	r3, #3
 806e2f2:	61fb      	str	r3, [r7, #28]
 806e2f4:	e038      	b.n	806e368 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 806e2f6:	2300      	movs	r3, #0
 806e2f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 806e2fa:	f107 0210 	add.w	r2, r7, #16
 806e2fe:	2300      	movs	r3, #0
 806e300:	68b9      	ldr	r1, [r7, #8]
 806e302:	69b8      	ldr	r0, [r7, #24]
 806e304:	f000 fcda 	bl	806ecbc <xQueueGenericSendFromISR>
 806e308:	4603      	mov	r3, r0
 806e30a:	2b01      	cmp	r3, #1
 806e30c:	d003      	beq.n	806e316 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 806e30e:	f06f 0302 	mvn.w	r3, #2
 806e312:	61fb      	str	r3, [r7, #28]
 806e314:	e028      	b.n	806e368 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 806e316:	693b      	ldr	r3, [r7, #16]
 806e318:	2b00      	cmp	r3, #0
 806e31a:	d025      	beq.n	806e368 <osMessageQueuePut+0xb0>
 806e31c:	4b15      	ldr	r3, [pc, #84]	; (806e374 <osMessageQueuePut+0xbc>)
 806e31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e322:	601a      	str	r2, [r3, #0]
 806e324:	f3bf 8f4f 	dsb	sy
 806e328:	f3bf 8f6f 	isb	sy
 806e32c:	e01c      	b.n	806e368 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 806e32e:	69bb      	ldr	r3, [r7, #24]
 806e330:	2b00      	cmp	r3, #0
 806e332:	d002      	beq.n	806e33a <osMessageQueuePut+0x82>
 806e334:	68bb      	ldr	r3, [r7, #8]
 806e336:	2b00      	cmp	r3, #0
 806e338:	d103      	bne.n	806e342 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 806e33a:	f06f 0303 	mvn.w	r3, #3
 806e33e:	61fb      	str	r3, [r7, #28]
 806e340:	e012      	b.n	806e368 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 806e342:	2300      	movs	r3, #0
 806e344:	683a      	ldr	r2, [r7, #0]
 806e346:	68b9      	ldr	r1, [r7, #8]
 806e348:	69b8      	ldr	r0, [r7, #24]
 806e34a:	f000 fbb9 	bl	806eac0 <xQueueGenericSend>
 806e34e:	4603      	mov	r3, r0
 806e350:	2b01      	cmp	r3, #1
 806e352:	d009      	beq.n	806e368 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 806e354:	683b      	ldr	r3, [r7, #0]
 806e356:	2b00      	cmp	r3, #0
 806e358:	d003      	beq.n	806e362 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 806e35a:	f06f 0301 	mvn.w	r3, #1
 806e35e:	61fb      	str	r3, [r7, #28]
 806e360:	e002      	b.n	806e368 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 806e362:	f06f 0302 	mvn.w	r3, #2
 806e366:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 806e368:	69fb      	ldr	r3, [r7, #28]
}
 806e36a:	4618      	mov	r0, r3
 806e36c:	3720      	adds	r7, #32
 806e36e:	46bd      	mov	sp, r7
 806e370:	bd80      	pop	{r7, pc}
 806e372:	bf00      	nop
 806e374:	e000ed04 	.word	0xe000ed04

0806e378 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 806e378:	b580      	push	{r7, lr}
 806e37a:	b088      	sub	sp, #32
 806e37c:	af00      	add	r7, sp, #0
 806e37e:	60f8      	str	r0, [r7, #12]
 806e380:	60b9      	str	r1, [r7, #8]
 806e382:	607a      	str	r2, [r7, #4]
 806e384:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 806e386:	68fb      	ldr	r3, [r7, #12]
 806e388:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 806e38a:	2300      	movs	r3, #0
 806e38c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e38e:	f3ef 8305 	mrs	r3, IPSR
 806e392:	617b      	str	r3, [r7, #20]
  return(result);
 806e394:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 806e396:	2b00      	cmp	r3, #0
 806e398:	d028      	beq.n	806e3ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 806e39a:	69bb      	ldr	r3, [r7, #24]
 806e39c:	2b00      	cmp	r3, #0
 806e39e:	d005      	beq.n	806e3ac <osMessageQueueGet+0x34>
 806e3a0:	68bb      	ldr	r3, [r7, #8]
 806e3a2:	2b00      	cmp	r3, #0
 806e3a4:	d002      	beq.n	806e3ac <osMessageQueueGet+0x34>
 806e3a6:	683b      	ldr	r3, [r7, #0]
 806e3a8:	2b00      	cmp	r3, #0
 806e3aa:	d003      	beq.n	806e3b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 806e3ac:	f06f 0303 	mvn.w	r3, #3
 806e3b0:	61fb      	str	r3, [r7, #28]
 806e3b2:	e037      	b.n	806e424 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 806e3b4:	2300      	movs	r3, #0
 806e3b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 806e3b8:	f107 0310 	add.w	r3, r7, #16
 806e3bc:	461a      	mov	r2, r3
 806e3be:	68b9      	ldr	r1, [r7, #8]
 806e3c0:	69b8      	ldr	r0, [r7, #24]
 806e3c2:	f000 ff8f 	bl	806f2e4 <xQueueReceiveFromISR>
 806e3c6:	4603      	mov	r3, r0
 806e3c8:	2b01      	cmp	r3, #1
 806e3ca:	d003      	beq.n	806e3d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 806e3cc:	f06f 0302 	mvn.w	r3, #2
 806e3d0:	61fb      	str	r3, [r7, #28]
 806e3d2:	e027      	b.n	806e424 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 806e3d4:	693b      	ldr	r3, [r7, #16]
 806e3d6:	2b00      	cmp	r3, #0
 806e3d8:	d024      	beq.n	806e424 <osMessageQueueGet+0xac>
 806e3da:	4b15      	ldr	r3, [pc, #84]	; (806e430 <osMessageQueueGet+0xb8>)
 806e3dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e3e0:	601a      	str	r2, [r3, #0]
 806e3e2:	f3bf 8f4f 	dsb	sy
 806e3e6:	f3bf 8f6f 	isb	sy
 806e3ea:	e01b      	b.n	806e424 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 806e3ec:	69bb      	ldr	r3, [r7, #24]
 806e3ee:	2b00      	cmp	r3, #0
 806e3f0:	d002      	beq.n	806e3f8 <osMessageQueueGet+0x80>
 806e3f2:	68bb      	ldr	r3, [r7, #8]
 806e3f4:	2b00      	cmp	r3, #0
 806e3f6:	d103      	bne.n	806e400 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 806e3f8:	f06f 0303 	mvn.w	r3, #3
 806e3fc:	61fb      	str	r3, [r7, #28]
 806e3fe:	e011      	b.n	806e424 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 806e400:	683a      	ldr	r2, [r7, #0]
 806e402:	68b9      	ldr	r1, [r7, #8]
 806e404:	69b8      	ldr	r0, [r7, #24]
 806e406:	f000 fd81 	bl	806ef0c <xQueueReceive>
 806e40a:	4603      	mov	r3, r0
 806e40c:	2b01      	cmp	r3, #1
 806e40e:	d009      	beq.n	806e424 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 806e410:	683b      	ldr	r3, [r7, #0]
 806e412:	2b00      	cmp	r3, #0
 806e414:	d003      	beq.n	806e41e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 806e416:	f06f 0301 	mvn.w	r3, #1
 806e41a:	61fb      	str	r3, [r7, #28]
 806e41c:	e002      	b.n	806e424 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 806e41e:	f06f 0302 	mvn.w	r3, #2
 806e422:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 806e424:	69fb      	ldr	r3, [r7, #28]
}
 806e426:	4618      	mov	r0, r3
 806e428:	3720      	adds	r7, #32
 806e42a:	46bd      	mov	sp, r7
 806e42c:	bd80      	pop	{r7, pc}
 806e42e:	bf00      	nop
 806e430:	e000ed04 	.word	0xe000ed04

0806e434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 806e434:	b480      	push	{r7}
 806e436:	b085      	sub	sp, #20
 806e438:	af00      	add	r7, sp, #0
 806e43a:	60f8      	str	r0, [r7, #12]
 806e43c:	60b9      	str	r1, [r7, #8]
 806e43e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 806e440:	68fb      	ldr	r3, [r7, #12]
 806e442:	4a07      	ldr	r2, [pc, #28]	; (806e460 <vApplicationGetIdleTaskMemory+0x2c>)
 806e444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 806e446:	68bb      	ldr	r3, [r7, #8]
 806e448:	4a06      	ldr	r2, [pc, #24]	; (806e464 <vApplicationGetIdleTaskMemory+0x30>)
 806e44a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 806e44c:	687b      	ldr	r3, [r7, #4]
 806e44e:	2280      	movs	r2, #128	; 0x80
 806e450:	601a      	str	r2, [r3, #0]
}
 806e452:	bf00      	nop
 806e454:	3714      	adds	r7, #20
 806e456:	46bd      	mov	sp, r7
 806e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e45c:	4770      	bx	lr
 806e45e:	bf00      	nop
 806e460:	2000045c 	.word	0x2000045c
 806e464:	20000518 	.word	0x20000518

0806e468 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 806e468:	b480      	push	{r7}
 806e46a:	b085      	sub	sp, #20
 806e46c:	af00      	add	r7, sp, #0
 806e46e:	60f8      	str	r0, [r7, #12]
 806e470:	60b9      	str	r1, [r7, #8]
 806e472:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 806e474:	68fb      	ldr	r3, [r7, #12]
 806e476:	4a07      	ldr	r2, [pc, #28]	; (806e494 <vApplicationGetTimerTaskMemory+0x2c>)
 806e478:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 806e47a:	68bb      	ldr	r3, [r7, #8]
 806e47c:	4a06      	ldr	r2, [pc, #24]	; (806e498 <vApplicationGetTimerTaskMemory+0x30>)
 806e47e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 806e480:	687b      	ldr	r3, [r7, #4]
 806e482:	f44f 7280 	mov.w	r2, #256	; 0x100
 806e486:	601a      	str	r2, [r3, #0]
}
 806e488:	bf00      	nop
 806e48a:	3714      	adds	r7, #20
 806e48c:	46bd      	mov	sp, r7
 806e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e492:	4770      	bx	lr
 806e494:	20000718 	.word	0x20000718
 806e498:	200007d4 	.word	0x200007d4

0806e49c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 806e49c:	b480      	push	{r7}
 806e49e:	b083      	sub	sp, #12
 806e4a0:	af00      	add	r7, sp, #0
 806e4a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806e4a4:	687b      	ldr	r3, [r7, #4]
 806e4a6:	f103 0208 	add.w	r2, r3, #8
 806e4aa:	687b      	ldr	r3, [r7, #4]
 806e4ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 806e4ae:	687b      	ldr	r3, [r7, #4]
 806e4b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806e4b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806e4b6:	687b      	ldr	r3, [r7, #4]
 806e4b8:	f103 0208 	add.w	r2, r3, #8
 806e4bc:	687b      	ldr	r3, [r7, #4]
 806e4be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806e4c0:	687b      	ldr	r3, [r7, #4]
 806e4c2:	f103 0208 	add.w	r2, r3, #8
 806e4c6:	687b      	ldr	r3, [r7, #4]
 806e4c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 806e4ca:	687b      	ldr	r3, [r7, #4]
 806e4cc:	2200      	movs	r2, #0
 806e4ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 806e4d0:	bf00      	nop
 806e4d2:	370c      	adds	r7, #12
 806e4d4:	46bd      	mov	sp, r7
 806e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e4da:	4770      	bx	lr

0806e4dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 806e4dc:	b480      	push	{r7}
 806e4de:	b083      	sub	sp, #12
 806e4e0:	af00      	add	r7, sp, #0
 806e4e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 806e4e4:	687b      	ldr	r3, [r7, #4]
 806e4e6:	2200      	movs	r2, #0
 806e4e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 806e4ea:	bf00      	nop
 806e4ec:	370c      	adds	r7, #12
 806e4ee:	46bd      	mov	sp, r7
 806e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e4f4:	4770      	bx	lr

0806e4f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 806e4f6:	b480      	push	{r7}
 806e4f8:	b085      	sub	sp, #20
 806e4fa:	af00      	add	r7, sp, #0
 806e4fc:	6078      	str	r0, [r7, #4]
 806e4fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 806e500:	687b      	ldr	r3, [r7, #4]
 806e502:	685b      	ldr	r3, [r3, #4]
 806e504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 806e506:	683b      	ldr	r3, [r7, #0]
 806e508:	68fa      	ldr	r2, [r7, #12]
 806e50a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 806e50c:	68fb      	ldr	r3, [r7, #12]
 806e50e:	689a      	ldr	r2, [r3, #8]
 806e510:	683b      	ldr	r3, [r7, #0]
 806e512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 806e514:	68fb      	ldr	r3, [r7, #12]
 806e516:	689b      	ldr	r3, [r3, #8]
 806e518:	683a      	ldr	r2, [r7, #0]
 806e51a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 806e51c:	68fb      	ldr	r3, [r7, #12]
 806e51e:	683a      	ldr	r2, [r7, #0]
 806e520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 806e522:	683b      	ldr	r3, [r7, #0]
 806e524:	687a      	ldr	r2, [r7, #4]
 806e526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 806e528:	687b      	ldr	r3, [r7, #4]
 806e52a:	681b      	ldr	r3, [r3, #0]
 806e52c:	1c5a      	adds	r2, r3, #1
 806e52e:	687b      	ldr	r3, [r7, #4]
 806e530:	601a      	str	r2, [r3, #0]
}
 806e532:	bf00      	nop
 806e534:	3714      	adds	r7, #20
 806e536:	46bd      	mov	sp, r7
 806e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e53c:	4770      	bx	lr

0806e53e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 806e53e:	b480      	push	{r7}
 806e540:	b085      	sub	sp, #20
 806e542:	af00      	add	r7, sp, #0
 806e544:	6078      	str	r0, [r7, #4]
 806e546:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 806e548:	683b      	ldr	r3, [r7, #0]
 806e54a:	681b      	ldr	r3, [r3, #0]
 806e54c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 806e54e:	68bb      	ldr	r3, [r7, #8]
 806e550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806e554:	d103      	bne.n	806e55e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 806e556:	687b      	ldr	r3, [r7, #4]
 806e558:	691b      	ldr	r3, [r3, #16]
 806e55a:	60fb      	str	r3, [r7, #12]
 806e55c:	e00c      	b.n	806e578 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 806e55e:	687b      	ldr	r3, [r7, #4]
 806e560:	3308      	adds	r3, #8
 806e562:	60fb      	str	r3, [r7, #12]
 806e564:	e002      	b.n	806e56c <vListInsert+0x2e>
 806e566:	68fb      	ldr	r3, [r7, #12]
 806e568:	685b      	ldr	r3, [r3, #4]
 806e56a:	60fb      	str	r3, [r7, #12]
 806e56c:	68fb      	ldr	r3, [r7, #12]
 806e56e:	685b      	ldr	r3, [r3, #4]
 806e570:	681b      	ldr	r3, [r3, #0]
 806e572:	68ba      	ldr	r2, [r7, #8]
 806e574:	429a      	cmp	r2, r3
 806e576:	d2f6      	bcs.n	806e566 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 806e578:	68fb      	ldr	r3, [r7, #12]
 806e57a:	685a      	ldr	r2, [r3, #4]
 806e57c:	683b      	ldr	r3, [r7, #0]
 806e57e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 806e580:	683b      	ldr	r3, [r7, #0]
 806e582:	685b      	ldr	r3, [r3, #4]
 806e584:	683a      	ldr	r2, [r7, #0]
 806e586:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 806e588:	683b      	ldr	r3, [r7, #0]
 806e58a:	68fa      	ldr	r2, [r7, #12]
 806e58c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 806e58e:	68fb      	ldr	r3, [r7, #12]
 806e590:	683a      	ldr	r2, [r7, #0]
 806e592:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 806e594:	683b      	ldr	r3, [r7, #0]
 806e596:	687a      	ldr	r2, [r7, #4]
 806e598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 806e59a:	687b      	ldr	r3, [r7, #4]
 806e59c:	681b      	ldr	r3, [r3, #0]
 806e59e:	1c5a      	adds	r2, r3, #1
 806e5a0:	687b      	ldr	r3, [r7, #4]
 806e5a2:	601a      	str	r2, [r3, #0]
}
 806e5a4:	bf00      	nop
 806e5a6:	3714      	adds	r7, #20
 806e5a8:	46bd      	mov	sp, r7
 806e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e5ae:	4770      	bx	lr

0806e5b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 806e5b0:	b480      	push	{r7}
 806e5b2:	b085      	sub	sp, #20
 806e5b4:	af00      	add	r7, sp, #0
 806e5b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 806e5b8:	687b      	ldr	r3, [r7, #4]
 806e5ba:	691b      	ldr	r3, [r3, #16]
 806e5bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 806e5be:	687b      	ldr	r3, [r7, #4]
 806e5c0:	685b      	ldr	r3, [r3, #4]
 806e5c2:	687a      	ldr	r2, [r7, #4]
 806e5c4:	6892      	ldr	r2, [r2, #8]
 806e5c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 806e5c8:	687b      	ldr	r3, [r7, #4]
 806e5ca:	689b      	ldr	r3, [r3, #8]
 806e5cc:	687a      	ldr	r2, [r7, #4]
 806e5ce:	6852      	ldr	r2, [r2, #4]
 806e5d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 806e5d2:	68fb      	ldr	r3, [r7, #12]
 806e5d4:	685b      	ldr	r3, [r3, #4]
 806e5d6:	687a      	ldr	r2, [r7, #4]
 806e5d8:	429a      	cmp	r2, r3
 806e5da:	d103      	bne.n	806e5e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 806e5dc:	687b      	ldr	r3, [r7, #4]
 806e5de:	689a      	ldr	r2, [r3, #8]
 806e5e0:	68fb      	ldr	r3, [r7, #12]
 806e5e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 806e5e4:	687b      	ldr	r3, [r7, #4]
 806e5e6:	2200      	movs	r2, #0
 806e5e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 806e5ea:	68fb      	ldr	r3, [r7, #12]
 806e5ec:	681b      	ldr	r3, [r3, #0]
 806e5ee:	1e5a      	subs	r2, r3, #1
 806e5f0:	68fb      	ldr	r3, [r7, #12]
 806e5f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 806e5f4:	68fb      	ldr	r3, [r7, #12]
 806e5f6:	681b      	ldr	r3, [r3, #0]
}
 806e5f8:	4618      	mov	r0, r3
 806e5fa:	3714      	adds	r7, #20
 806e5fc:	46bd      	mov	sp, r7
 806e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e602:	4770      	bx	lr

0806e604 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 806e604:	b580      	push	{r7, lr}
 806e606:	b084      	sub	sp, #16
 806e608:	af00      	add	r7, sp, #0
 806e60a:	6078      	str	r0, [r7, #4]
 806e60c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 806e60e:	687b      	ldr	r3, [r7, #4]
 806e610:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 806e612:	68fb      	ldr	r3, [r7, #12]
 806e614:	2b00      	cmp	r3, #0
 806e616:	d10a      	bne.n	806e62e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 806e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 806e61c:	f383 8811 	msr	BASEPRI, r3
 806e620:	f3bf 8f6f 	isb	sy
 806e624:	f3bf 8f4f 	dsb	sy
 806e628:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 806e62a:	bf00      	nop
 806e62c:	e7fe      	b.n	806e62c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 806e62e:	f003 f819 	bl	8071664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806e632:	68fb      	ldr	r3, [r7, #12]
 806e634:	681a      	ldr	r2, [r3, #0]
 806e636:	68fb      	ldr	r3, [r7, #12]
 806e638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806e63a:	68f9      	ldr	r1, [r7, #12]
 806e63c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 806e63e:	fb01 f303 	mul.w	r3, r1, r3
 806e642:	441a      	add	r2, r3
 806e644:	68fb      	ldr	r3, [r7, #12]
 806e646:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 806e648:	68fb      	ldr	r3, [r7, #12]
 806e64a:	2200      	movs	r2, #0
 806e64c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 806e64e:	68fb      	ldr	r3, [r7, #12]
 806e650:	681a      	ldr	r2, [r3, #0]
 806e652:	68fb      	ldr	r3, [r7, #12]
 806e654:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806e656:	68fb      	ldr	r3, [r7, #12]
 806e658:	681a      	ldr	r2, [r3, #0]
 806e65a:	68fb      	ldr	r3, [r7, #12]
 806e65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806e65e:	3b01      	subs	r3, #1
 806e660:	68f9      	ldr	r1, [r7, #12]
 806e662:	6c09      	ldr	r1, [r1, #64]	; 0x40
 806e664:	fb01 f303 	mul.w	r3, r1, r3
 806e668:	441a      	add	r2, r3
 806e66a:	68fb      	ldr	r3, [r7, #12]
 806e66c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 806e66e:	68fb      	ldr	r3, [r7, #12]
 806e670:	22ff      	movs	r2, #255	; 0xff
 806e672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 806e676:	68fb      	ldr	r3, [r7, #12]
 806e678:	22ff      	movs	r2, #255	; 0xff
 806e67a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 806e67e:	683b      	ldr	r3, [r7, #0]
 806e680:	2b00      	cmp	r3, #0
 806e682:	d114      	bne.n	806e6ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806e684:	68fb      	ldr	r3, [r7, #12]
 806e686:	691b      	ldr	r3, [r3, #16]
 806e688:	2b00      	cmp	r3, #0
 806e68a:	d01a      	beq.n	806e6c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806e68c:	68fb      	ldr	r3, [r7, #12]
 806e68e:	3310      	adds	r3, #16
 806e690:	4618      	mov	r0, r3
 806e692:	f001 fd01 	bl	8070098 <xTaskRemoveFromEventList>
 806e696:	4603      	mov	r3, r0
 806e698:	2b00      	cmp	r3, #0
 806e69a:	d012      	beq.n	806e6c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 806e69c:	4b0c      	ldr	r3, [pc, #48]	; (806e6d0 <xQueueGenericReset+0xcc>)
 806e69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e6a2:	601a      	str	r2, [r3, #0]
 806e6a4:	f3bf 8f4f 	dsb	sy
 806e6a8:	f3bf 8f6f 	isb	sy
 806e6ac:	e009      	b.n	806e6c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 806e6ae:	68fb      	ldr	r3, [r7, #12]
 806e6b0:	3310      	adds	r3, #16
 806e6b2:	4618      	mov	r0, r3
 806e6b4:	f7ff fef2 	bl	806e49c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 806e6b8:	68fb      	ldr	r3, [r7, #12]
 806e6ba:	3324      	adds	r3, #36	; 0x24
 806e6bc:	4618      	mov	r0, r3
 806e6be:	f7ff feed 	bl	806e49c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 806e6c2:	f002 ffff 	bl	80716c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 806e6c6:	2301      	movs	r3, #1
}
 806e6c8:	4618      	mov	r0, r3
 806e6ca:	3710      	adds	r7, #16
 806e6cc:	46bd      	mov	sp, r7
 806e6ce:	bd80      	pop	{r7, pc}
 806e6d0:	e000ed04 	.word	0xe000ed04

0806e6d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 806e6d4:	b580      	push	{r7, lr}
 806e6d6:	b08e      	sub	sp, #56	; 0x38
 806e6d8:	af02      	add	r7, sp, #8
 806e6da:	60f8      	str	r0, [r7, #12]
 806e6dc:	60b9      	str	r1, [r7, #8]
 806e6de:	607a      	str	r2, [r7, #4]
 806e6e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 806e6e2:	68fb      	ldr	r3, [r7, #12]
 806e6e4:	2b00      	cmp	r3, #0
 806e6e6:	d10a      	bne.n	806e6fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 806e6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 806e6ec:	f383 8811 	msr	BASEPRI, r3
 806e6f0:	f3bf 8f6f 	isb	sy
 806e6f4:	f3bf 8f4f 	dsb	sy
 806e6f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 806e6fa:	bf00      	nop
 806e6fc:	e7fe      	b.n	806e6fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 806e6fe:	683b      	ldr	r3, [r7, #0]
 806e700:	2b00      	cmp	r3, #0
 806e702:	d10a      	bne.n	806e71a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 806e704:	f04f 0350 	mov.w	r3, #80	; 0x50
 806e708:	f383 8811 	msr	BASEPRI, r3
 806e70c:	f3bf 8f6f 	isb	sy
 806e710:	f3bf 8f4f 	dsb	sy
 806e714:	627b      	str	r3, [r7, #36]	; 0x24
}
 806e716:	bf00      	nop
 806e718:	e7fe      	b.n	806e718 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 806e71a:	687b      	ldr	r3, [r7, #4]
 806e71c:	2b00      	cmp	r3, #0
 806e71e:	d002      	beq.n	806e726 <xQueueGenericCreateStatic+0x52>
 806e720:	68bb      	ldr	r3, [r7, #8]
 806e722:	2b00      	cmp	r3, #0
 806e724:	d001      	beq.n	806e72a <xQueueGenericCreateStatic+0x56>
 806e726:	2301      	movs	r3, #1
 806e728:	e000      	b.n	806e72c <xQueueGenericCreateStatic+0x58>
 806e72a:	2300      	movs	r3, #0
 806e72c:	2b00      	cmp	r3, #0
 806e72e:	d10a      	bne.n	806e746 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 806e730:	f04f 0350 	mov.w	r3, #80	; 0x50
 806e734:	f383 8811 	msr	BASEPRI, r3
 806e738:	f3bf 8f6f 	isb	sy
 806e73c:	f3bf 8f4f 	dsb	sy
 806e740:	623b      	str	r3, [r7, #32]
}
 806e742:	bf00      	nop
 806e744:	e7fe      	b.n	806e744 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 806e746:	687b      	ldr	r3, [r7, #4]
 806e748:	2b00      	cmp	r3, #0
 806e74a:	d102      	bne.n	806e752 <xQueueGenericCreateStatic+0x7e>
 806e74c:	68bb      	ldr	r3, [r7, #8]
 806e74e:	2b00      	cmp	r3, #0
 806e750:	d101      	bne.n	806e756 <xQueueGenericCreateStatic+0x82>
 806e752:	2301      	movs	r3, #1
 806e754:	e000      	b.n	806e758 <xQueueGenericCreateStatic+0x84>
 806e756:	2300      	movs	r3, #0
 806e758:	2b00      	cmp	r3, #0
 806e75a:	d10a      	bne.n	806e772 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 806e75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806e760:	f383 8811 	msr	BASEPRI, r3
 806e764:	f3bf 8f6f 	isb	sy
 806e768:	f3bf 8f4f 	dsb	sy
 806e76c:	61fb      	str	r3, [r7, #28]
}
 806e76e:	bf00      	nop
 806e770:	e7fe      	b.n	806e770 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 806e772:	2350      	movs	r3, #80	; 0x50
 806e774:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 806e776:	697b      	ldr	r3, [r7, #20]
 806e778:	2b50      	cmp	r3, #80	; 0x50
 806e77a:	d00a      	beq.n	806e792 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 806e77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806e780:	f383 8811 	msr	BASEPRI, r3
 806e784:	f3bf 8f6f 	isb	sy
 806e788:	f3bf 8f4f 	dsb	sy
 806e78c:	61bb      	str	r3, [r7, #24]
}
 806e78e:	bf00      	nop
 806e790:	e7fe      	b.n	806e790 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 806e792:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 806e794:	683b      	ldr	r3, [r7, #0]
 806e796:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 806e798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806e79a:	2b00      	cmp	r3, #0
 806e79c:	d00d      	beq.n	806e7ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 806e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806e7a0:	2201      	movs	r2, #1
 806e7a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 806e7a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 806e7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806e7ac:	9300      	str	r3, [sp, #0]
 806e7ae:	4613      	mov	r3, r2
 806e7b0:	687a      	ldr	r2, [r7, #4]
 806e7b2:	68b9      	ldr	r1, [r7, #8]
 806e7b4:	68f8      	ldr	r0, [r7, #12]
 806e7b6:	f000 f83f 	bl	806e838 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 806e7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 806e7bc:	4618      	mov	r0, r3
 806e7be:	3730      	adds	r7, #48	; 0x30
 806e7c0:	46bd      	mov	sp, r7
 806e7c2:	bd80      	pop	{r7, pc}

0806e7c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 806e7c4:	b580      	push	{r7, lr}
 806e7c6:	b08a      	sub	sp, #40	; 0x28
 806e7c8:	af02      	add	r7, sp, #8
 806e7ca:	60f8      	str	r0, [r7, #12]
 806e7cc:	60b9      	str	r1, [r7, #8]
 806e7ce:	4613      	mov	r3, r2
 806e7d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 806e7d2:	68fb      	ldr	r3, [r7, #12]
 806e7d4:	2b00      	cmp	r3, #0
 806e7d6:	d10a      	bne.n	806e7ee <xQueueGenericCreate+0x2a>
	__asm volatile
 806e7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 806e7dc:	f383 8811 	msr	BASEPRI, r3
 806e7e0:	f3bf 8f6f 	isb	sy
 806e7e4:	f3bf 8f4f 	dsb	sy
 806e7e8:	613b      	str	r3, [r7, #16]
}
 806e7ea:	bf00      	nop
 806e7ec:	e7fe      	b.n	806e7ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806e7ee:	68fb      	ldr	r3, [r7, #12]
 806e7f0:	68ba      	ldr	r2, [r7, #8]
 806e7f2:	fb02 f303 	mul.w	r3, r2, r3
 806e7f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 806e7f8:	69fb      	ldr	r3, [r7, #28]
 806e7fa:	3350      	adds	r3, #80	; 0x50
 806e7fc:	4618      	mov	r0, r3
 806e7fe:	f003 f853 	bl	80718a8 <pvPortMalloc>
 806e802:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 806e804:	69bb      	ldr	r3, [r7, #24]
 806e806:	2b00      	cmp	r3, #0
 806e808:	d011      	beq.n	806e82e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 806e80a:	69bb      	ldr	r3, [r7, #24]
 806e80c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806e80e:	697b      	ldr	r3, [r7, #20]
 806e810:	3350      	adds	r3, #80	; 0x50
 806e812:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 806e814:	69bb      	ldr	r3, [r7, #24]
 806e816:	2200      	movs	r2, #0
 806e818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 806e81c:	79fa      	ldrb	r2, [r7, #7]
 806e81e:	69bb      	ldr	r3, [r7, #24]
 806e820:	9300      	str	r3, [sp, #0]
 806e822:	4613      	mov	r3, r2
 806e824:	697a      	ldr	r2, [r7, #20]
 806e826:	68b9      	ldr	r1, [r7, #8]
 806e828:	68f8      	ldr	r0, [r7, #12]
 806e82a:	f000 f805 	bl	806e838 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 806e82e:	69bb      	ldr	r3, [r7, #24]
	}
 806e830:	4618      	mov	r0, r3
 806e832:	3720      	adds	r7, #32
 806e834:	46bd      	mov	sp, r7
 806e836:	bd80      	pop	{r7, pc}

0806e838 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 806e838:	b580      	push	{r7, lr}
 806e83a:	b084      	sub	sp, #16
 806e83c:	af00      	add	r7, sp, #0
 806e83e:	60f8      	str	r0, [r7, #12]
 806e840:	60b9      	str	r1, [r7, #8]
 806e842:	607a      	str	r2, [r7, #4]
 806e844:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 806e846:	68bb      	ldr	r3, [r7, #8]
 806e848:	2b00      	cmp	r3, #0
 806e84a:	d103      	bne.n	806e854 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 806e84c:	69bb      	ldr	r3, [r7, #24]
 806e84e:	69ba      	ldr	r2, [r7, #24]
 806e850:	601a      	str	r2, [r3, #0]
 806e852:	e002      	b.n	806e85a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 806e854:	69bb      	ldr	r3, [r7, #24]
 806e856:	687a      	ldr	r2, [r7, #4]
 806e858:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 806e85a:	69bb      	ldr	r3, [r7, #24]
 806e85c:	68fa      	ldr	r2, [r7, #12]
 806e85e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 806e860:	69bb      	ldr	r3, [r7, #24]
 806e862:	68ba      	ldr	r2, [r7, #8]
 806e864:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 806e866:	2101      	movs	r1, #1
 806e868:	69b8      	ldr	r0, [r7, #24]
 806e86a:	f7ff fecb 	bl	806e604 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 806e86e:	69bb      	ldr	r3, [r7, #24]
 806e870:	78fa      	ldrb	r2, [r7, #3]
 806e872:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 806e876:	bf00      	nop
 806e878:	3710      	adds	r7, #16
 806e87a:	46bd      	mov	sp, r7
 806e87c:	bd80      	pop	{r7, pc}

0806e87e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 806e87e:	b580      	push	{r7, lr}
 806e880:	b082      	sub	sp, #8
 806e882:	af00      	add	r7, sp, #0
 806e884:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 806e886:	687b      	ldr	r3, [r7, #4]
 806e888:	2b00      	cmp	r3, #0
 806e88a:	d00e      	beq.n	806e8aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 806e88c:	687b      	ldr	r3, [r7, #4]
 806e88e:	2200      	movs	r2, #0
 806e890:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 806e892:	687b      	ldr	r3, [r7, #4]
 806e894:	2200      	movs	r2, #0
 806e896:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 806e898:	687b      	ldr	r3, [r7, #4]
 806e89a:	2200      	movs	r2, #0
 806e89c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 806e89e:	2300      	movs	r3, #0
 806e8a0:	2200      	movs	r2, #0
 806e8a2:	2100      	movs	r1, #0
 806e8a4:	6878      	ldr	r0, [r7, #4]
 806e8a6:	f000 f90b 	bl	806eac0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 806e8aa:	bf00      	nop
 806e8ac:	3708      	adds	r7, #8
 806e8ae:	46bd      	mov	sp, r7
 806e8b0:	bd80      	pop	{r7, pc}

0806e8b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 806e8b2:	b580      	push	{r7, lr}
 806e8b4:	b086      	sub	sp, #24
 806e8b6:	af00      	add	r7, sp, #0
 806e8b8:	4603      	mov	r3, r0
 806e8ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 806e8bc:	2301      	movs	r3, #1
 806e8be:	617b      	str	r3, [r7, #20]
 806e8c0:	2300      	movs	r3, #0
 806e8c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 806e8c4:	79fb      	ldrb	r3, [r7, #7]
 806e8c6:	461a      	mov	r2, r3
 806e8c8:	6939      	ldr	r1, [r7, #16]
 806e8ca:	6978      	ldr	r0, [r7, #20]
 806e8cc:	f7ff ff7a 	bl	806e7c4 <xQueueGenericCreate>
 806e8d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 806e8d2:	68f8      	ldr	r0, [r7, #12]
 806e8d4:	f7ff ffd3 	bl	806e87e <prvInitialiseMutex>

		return xNewQueue;
 806e8d8:	68fb      	ldr	r3, [r7, #12]
	}
 806e8da:	4618      	mov	r0, r3
 806e8dc:	3718      	adds	r7, #24
 806e8de:	46bd      	mov	sp, r7
 806e8e0:	bd80      	pop	{r7, pc}

0806e8e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 806e8e2:	b580      	push	{r7, lr}
 806e8e4:	b088      	sub	sp, #32
 806e8e6:	af02      	add	r7, sp, #8
 806e8e8:	4603      	mov	r3, r0
 806e8ea:	6039      	str	r1, [r7, #0]
 806e8ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 806e8ee:	2301      	movs	r3, #1
 806e8f0:	617b      	str	r3, [r7, #20]
 806e8f2:	2300      	movs	r3, #0
 806e8f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 806e8f6:	79fb      	ldrb	r3, [r7, #7]
 806e8f8:	9300      	str	r3, [sp, #0]
 806e8fa:	683b      	ldr	r3, [r7, #0]
 806e8fc:	2200      	movs	r2, #0
 806e8fe:	6939      	ldr	r1, [r7, #16]
 806e900:	6978      	ldr	r0, [r7, #20]
 806e902:	f7ff fee7 	bl	806e6d4 <xQueueGenericCreateStatic>
 806e906:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 806e908:	68f8      	ldr	r0, [r7, #12]
 806e90a:	f7ff ffb8 	bl	806e87e <prvInitialiseMutex>

		return xNewQueue;
 806e90e:	68fb      	ldr	r3, [r7, #12]
	}
 806e910:	4618      	mov	r0, r3
 806e912:	3718      	adds	r7, #24
 806e914:	46bd      	mov	sp, r7
 806e916:	bd80      	pop	{r7, pc}

0806e918 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 806e918:	b590      	push	{r4, r7, lr}
 806e91a:	b087      	sub	sp, #28
 806e91c:	af00      	add	r7, sp, #0
 806e91e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 806e920:	687b      	ldr	r3, [r7, #4]
 806e922:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 806e924:	693b      	ldr	r3, [r7, #16]
 806e926:	2b00      	cmp	r3, #0
 806e928:	d10a      	bne.n	806e940 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 806e92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806e92e:	f383 8811 	msr	BASEPRI, r3
 806e932:	f3bf 8f6f 	isb	sy
 806e936:	f3bf 8f4f 	dsb	sy
 806e93a:	60fb      	str	r3, [r7, #12]
}
 806e93c:	bf00      	nop
 806e93e:	e7fe      	b.n	806e93e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 806e940:	693b      	ldr	r3, [r7, #16]
 806e942:	689c      	ldr	r4, [r3, #8]
 806e944:	f001 fd6a 	bl	807041c <xTaskGetCurrentTaskHandle>
 806e948:	4603      	mov	r3, r0
 806e94a:	429c      	cmp	r4, r3
 806e94c:	d111      	bne.n	806e972 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 806e94e:	693b      	ldr	r3, [r7, #16]
 806e950:	68db      	ldr	r3, [r3, #12]
 806e952:	1e5a      	subs	r2, r3, #1
 806e954:	693b      	ldr	r3, [r7, #16]
 806e956:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 806e958:	693b      	ldr	r3, [r7, #16]
 806e95a:	68db      	ldr	r3, [r3, #12]
 806e95c:	2b00      	cmp	r3, #0
 806e95e:	d105      	bne.n	806e96c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 806e960:	2300      	movs	r3, #0
 806e962:	2200      	movs	r2, #0
 806e964:	2100      	movs	r1, #0
 806e966:	6938      	ldr	r0, [r7, #16]
 806e968:	f000 f8aa 	bl	806eac0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 806e96c:	2301      	movs	r3, #1
 806e96e:	617b      	str	r3, [r7, #20]
 806e970:	e001      	b.n	806e976 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 806e972:	2300      	movs	r3, #0
 806e974:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 806e976:	697b      	ldr	r3, [r7, #20]
	}
 806e978:	4618      	mov	r0, r3
 806e97a:	371c      	adds	r7, #28
 806e97c:	46bd      	mov	sp, r7
 806e97e:	bd90      	pop	{r4, r7, pc}

0806e980 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 806e980:	b590      	push	{r4, r7, lr}
 806e982:	b087      	sub	sp, #28
 806e984:	af00      	add	r7, sp, #0
 806e986:	6078      	str	r0, [r7, #4]
 806e988:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 806e98a:	687b      	ldr	r3, [r7, #4]
 806e98c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 806e98e:	693b      	ldr	r3, [r7, #16]
 806e990:	2b00      	cmp	r3, #0
 806e992:	d10a      	bne.n	806e9aa <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 806e994:	f04f 0350 	mov.w	r3, #80	; 0x50
 806e998:	f383 8811 	msr	BASEPRI, r3
 806e99c:	f3bf 8f6f 	isb	sy
 806e9a0:	f3bf 8f4f 	dsb	sy
 806e9a4:	60fb      	str	r3, [r7, #12]
}
 806e9a6:	bf00      	nop
 806e9a8:	e7fe      	b.n	806e9a8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 806e9aa:	693b      	ldr	r3, [r7, #16]
 806e9ac:	689c      	ldr	r4, [r3, #8]
 806e9ae:	f001 fd35 	bl	807041c <xTaskGetCurrentTaskHandle>
 806e9b2:	4603      	mov	r3, r0
 806e9b4:	429c      	cmp	r4, r3
 806e9b6:	d107      	bne.n	806e9c8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 806e9b8:	693b      	ldr	r3, [r7, #16]
 806e9ba:	68db      	ldr	r3, [r3, #12]
 806e9bc:	1c5a      	adds	r2, r3, #1
 806e9be:	693b      	ldr	r3, [r7, #16]
 806e9c0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 806e9c2:	2301      	movs	r3, #1
 806e9c4:	617b      	str	r3, [r7, #20]
 806e9c6:	e00c      	b.n	806e9e2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 806e9c8:	6839      	ldr	r1, [r7, #0]
 806e9ca:	6938      	ldr	r0, [r7, #16]
 806e9cc:	f000 fb7e 	bl	806f0cc <xQueueSemaphoreTake>
 806e9d0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 806e9d2:	697b      	ldr	r3, [r7, #20]
 806e9d4:	2b00      	cmp	r3, #0
 806e9d6:	d004      	beq.n	806e9e2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 806e9d8:	693b      	ldr	r3, [r7, #16]
 806e9da:	68db      	ldr	r3, [r3, #12]
 806e9dc:	1c5a      	adds	r2, r3, #1
 806e9de:	693b      	ldr	r3, [r7, #16]
 806e9e0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 806e9e2:	697b      	ldr	r3, [r7, #20]
	}
 806e9e4:	4618      	mov	r0, r3
 806e9e6:	371c      	adds	r7, #28
 806e9e8:	46bd      	mov	sp, r7
 806e9ea:	bd90      	pop	{r4, r7, pc}

0806e9ec <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 806e9ec:	b580      	push	{r7, lr}
 806e9ee:	b08a      	sub	sp, #40	; 0x28
 806e9f0:	af02      	add	r7, sp, #8
 806e9f2:	60f8      	str	r0, [r7, #12]
 806e9f4:	60b9      	str	r1, [r7, #8]
 806e9f6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 806e9f8:	68fb      	ldr	r3, [r7, #12]
 806e9fa:	2b00      	cmp	r3, #0
 806e9fc:	d10a      	bne.n	806ea14 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 806e9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ea02:	f383 8811 	msr	BASEPRI, r3
 806ea06:	f3bf 8f6f 	isb	sy
 806ea0a:	f3bf 8f4f 	dsb	sy
 806ea0e:	61bb      	str	r3, [r7, #24]
}
 806ea10:	bf00      	nop
 806ea12:	e7fe      	b.n	806ea12 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 806ea14:	68ba      	ldr	r2, [r7, #8]
 806ea16:	68fb      	ldr	r3, [r7, #12]
 806ea18:	429a      	cmp	r2, r3
 806ea1a:	d90a      	bls.n	806ea32 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 806ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ea20:	f383 8811 	msr	BASEPRI, r3
 806ea24:	f3bf 8f6f 	isb	sy
 806ea28:	f3bf 8f4f 	dsb	sy
 806ea2c:	617b      	str	r3, [r7, #20]
}
 806ea2e:	bf00      	nop
 806ea30:	e7fe      	b.n	806ea30 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 806ea32:	2302      	movs	r3, #2
 806ea34:	9300      	str	r3, [sp, #0]
 806ea36:	687b      	ldr	r3, [r7, #4]
 806ea38:	2200      	movs	r2, #0
 806ea3a:	2100      	movs	r1, #0
 806ea3c:	68f8      	ldr	r0, [r7, #12]
 806ea3e:	f7ff fe49 	bl	806e6d4 <xQueueGenericCreateStatic>
 806ea42:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 806ea44:	69fb      	ldr	r3, [r7, #28]
 806ea46:	2b00      	cmp	r3, #0
 806ea48:	d002      	beq.n	806ea50 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 806ea4a:	69fb      	ldr	r3, [r7, #28]
 806ea4c:	68ba      	ldr	r2, [r7, #8]
 806ea4e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 806ea50:	69fb      	ldr	r3, [r7, #28]
	}
 806ea52:	4618      	mov	r0, r3
 806ea54:	3720      	adds	r7, #32
 806ea56:	46bd      	mov	sp, r7
 806ea58:	bd80      	pop	{r7, pc}

0806ea5a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 806ea5a:	b580      	push	{r7, lr}
 806ea5c:	b086      	sub	sp, #24
 806ea5e:	af00      	add	r7, sp, #0
 806ea60:	6078      	str	r0, [r7, #4]
 806ea62:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 806ea64:	687b      	ldr	r3, [r7, #4]
 806ea66:	2b00      	cmp	r3, #0
 806ea68:	d10a      	bne.n	806ea80 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 806ea6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ea6e:	f383 8811 	msr	BASEPRI, r3
 806ea72:	f3bf 8f6f 	isb	sy
 806ea76:	f3bf 8f4f 	dsb	sy
 806ea7a:	613b      	str	r3, [r7, #16]
}
 806ea7c:	bf00      	nop
 806ea7e:	e7fe      	b.n	806ea7e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 806ea80:	683a      	ldr	r2, [r7, #0]
 806ea82:	687b      	ldr	r3, [r7, #4]
 806ea84:	429a      	cmp	r2, r3
 806ea86:	d90a      	bls.n	806ea9e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 806ea88:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ea8c:	f383 8811 	msr	BASEPRI, r3
 806ea90:	f3bf 8f6f 	isb	sy
 806ea94:	f3bf 8f4f 	dsb	sy
 806ea98:	60fb      	str	r3, [r7, #12]
}
 806ea9a:	bf00      	nop
 806ea9c:	e7fe      	b.n	806ea9c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 806ea9e:	2202      	movs	r2, #2
 806eaa0:	2100      	movs	r1, #0
 806eaa2:	6878      	ldr	r0, [r7, #4]
 806eaa4:	f7ff fe8e 	bl	806e7c4 <xQueueGenericCreate>
 806eaa8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 806eaaa:	697b      	ldr	r3, [r7, #20]
 806eaac:	2b00      	cmp	r3, #0
 806eaae:	d002      	beq.n	806eab6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 806eab0:	697b      	ldr	r3, [r7, #20]
 806eab2:	683a      	ldr	r2, [r7, #0]
 806eab4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 806eab6:	697b      	ldr	r3, [r7, #20]
	}
 806eab8:	4618      	mov	r0, r3
 806eaba:	3718      	adds	r7, #24
 806eabc:	46bd      	mov	sp, r7
 806eabe:	bd80      	pop	{r7, pc}

0806eac0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 806eac0:	b580      	push	{r7, lr}
 806eac2:	b08e      	sub	sp, #56	; 0x38
 806eac4:	af00      	add	r7, sp, #0
 806eac6:	60f8      	str	r0, [r7, #12]
 806eac8:	60b9      	str	r1, [r7, #8]
 806eaca:	607a      	str	r2, [r7, #4]
 806eacc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 806eace:	2300      	movs	r3, #0
 806ead0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806ead2:	68fb      	ldr	r3, [r7, #12]
 806ead4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 806ead6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ead8:	2b00      	cmp	r3, #0
 806eada:	d10a      	bne.n	806eaf2 <xQueueGenericSend+0x32>
	__asm volatile
 806eadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 806eae0:	f383 8811 	msr	BASEPRI, r3
 806eae4:	f3bf 8f6f 	isb	sy
 806eae8:	f3bf 8f4f 	dsb	sy
 806eaec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 806eaee:	bf00      	nop
 806eaf0:	e7fe      	b.n	806eaf0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806eaf2:	68bb      	ldr	r3, [r7, #8]
 806eaf4:	2b00      	cmp	r3, #0
 806eaf6:	d103      	bne.n	806eb00 <xQueueGenericSend+0x40>
 806eaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806eafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806eafc:	2b00      	cmp	r3, #0
 806eafe:	d101      	bne.n	806eb04 <xQueueGenericSend+0x44>
 806eb00:	2301      	movs	r3, #1
 806eb02:	e000      	b.n	806eb06 <xQueueGenericSend+0x46>
 806eb04:	2300      	movs	r3, #0
 806eb06:	2b00      	cmp	r3, #0
 806eb08:	d10a      	bne.n	806eb20 <xQueueGenericSend+0x60>
	__asm volatile
 806eb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806eb0e:	f383 8811 	msr	BASEPRI, r3
 806eb12:	f3bf 8f6f 	isb	sy
 806eb16:	f3bf 8f4f 	dsb	sy
 806eb1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 806eb1c:	bf00      	nop
 806eb1e:	e7fe      	b.n	806eb1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 806eb20:	683b      	ldr	r3, [r7, #0]
 806eb22:	2b02      	cmp	r3, #2
 806eb24:	d103      	bne.n	806eb2e <xQueueGenericSend+0x6e>
 806eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806eb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806eb2a:	2b01      	cmp	r3, #1
 806eb2c:	d101      	bne.n	806eb32 <xQueueGenericSend+0x72>
 806eb2e:	2301      	movs	r3, #1
 806eb30:	e000      	b.n	806eb34 <xQueueGenericSend+0x74>
 806eb32:	2300      	movs	r3, #0
 806eb34:	2b00      	cmp	r3, #0
 806eb36:	d10a      	bne.n	806eb4e <xQueueGenericSend+0x8e>
	__asm volatile
 806eb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 806eb3c:	f383 8811 	msr	BASEPRI, r3
 806eb40:	f3bf 8f6f 	isb	sy
 806eb44:	f3bf 8f4f 	dsb	sy
 806eb48:	623b      	str	r3, [r7, #32]
}
 806eb4a:	bf00      	nop
 806eb4c:	e7fe      	b.n	806eb4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806eb4e:	f001 fc75 	bl	807043c <xTaskGetSchedulerState>
 806eb52:	4603      	mov	r3, r0
 806eb54:	2b00      	cmp	r3, #0
 806eb56:	d102      	bne.n	806eb5e <xQueueGenericSend+0x9e>
 806eb58:	687b      	ldr	r3, [r7, #4]
 806eb5a:	2b00      	cmp	r3, #0
 806eb5c:	d101      	bne.n	806eb62 <xQueueGenericSend+0xa2>
 806eb5e:	2301      	movs	r3, #1
 806eb60:	e000      	b.n	806eb64 <xQueueGenericSend+0xa4>
 806eb62:	2300      	movs	r3, #0
 806eb64:	2b00      	cmp	r3, #0
 806eb66:	d10a      	bne.n	806eb7e <xQueueGenericSend+0xbe>
	__asm volatile
 806eb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 806eb6c:	f383 8811 	msr	BASEPRI, r3
 806eb70:	f3bf 8f6f 	isb	sy
 806eb74:	f3bf 8f4f 	dsb	sy
 806eb78:	61fb      	str	r3, [r7, #28]
}
 806eb7a:	bf00      	nop
 806eb7c:	e7fe      	b.n	806eb7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806eb7e:	f002 fd71 	bl	8071664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 806eb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806eb84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806eb88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806eb8a:	429a      	cmp	r2, r3
 806eb8c:	d302      	bcc.n	806eb94 <xQueueGenericSend+0xd4>
 806eb8e:	683b      	ldr	r3, [r7, #0]
 806eb90:	2b02      	cmp	r3, #2
 806eb92:	d129      	bne.n	806ebe8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 806eb94:	683a      	ldr	r2, [r7, #0]
 806eb96:	68b9      	ldr	r1, [r7, #8]
 806eb98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806eb9a:	f000 fc5e 	bl	806f45a <prvCopyDataToQueue>
 806eb9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806eba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806eba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806eba4:	2b00      	cmp	r3, #0
 806eba6:	d010      	beq.n	806ebca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ebaa:	3324      	adds	r3, #36	; 0x24
 806ebac:	4618      	mov	r0, r3
 806ebae:	f001 fa73 	bl	8070098 <xTaskRemoveFromEventList>
 806ebb2:	4603      	mov	r3, r0
 806ebb4:	2b00      	cmp	r3, #0
 806ebb6:	d013      	beq.n	806ebe0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 806ebb8:	4b3f      	ldr	r3, [pc, #252]	; (806ecb8 <xQueueGenericSend+0x1f8>)
 806ebba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806ebbe:	601a      	str	r2, [r3, #0]
 806ebc0:	f3bf 8f4f 	dsb	sy
 806ebc4:	f3bf 8f6f 	isb	sy
 806ebc8:	e00a      	b.n	806ebe0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 806ebca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806ebcc:	2b00      	cmp	r3, #0
 806ebce:	d007      	beq.n	806ebe0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 806ebd0:	4b39      	ldr	r3, [pc, #228]	; (806ecb8 <xQueueGenericSend+0x1f8>)
 806ebd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806ebd6:	601a      	str	r2, [r3, #0]
 806ebd8:	f3bf 8f4f 	dsb	sy
 806ebdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 806ebe0:	f002 fd70 	bl	80716c4 <vPortExitCritical>
				return pdPASS;
 806ebe4:	2301      	movs	r3, #1
 806ebe6:	e063      	b.n	806ecb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806ebe8:	687b      	ldr	r3, [r7, #4]
 806ebea:	2b00      	cmp	r3, #0
 806ebec:	d103      	bne.n	806ebf6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 806ebee:	f002 fd69 	bl	80716c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 806ebf2:	2300      	movs	r3, #0
 806ebf4:	e05c      	b.n	806ecb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 806ebf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806ebf8:	2b00      	cmp	r3, #0
 806ebfa:	d106      	bne.n	806ec0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806ebfc:	f107 0314 	add.w	r3, r7, #20
 806ec00:	4618      	mov	r0, r3
 806ec02:	f001 faad 	bl	8070160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806ec06:	2301      	movs	r3, #1
 806ec08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806ec0a:	f002 fd5b 	bl	80716c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 806ec0e:	f001 f819 	bl	806fc44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806ec12:	f002 fd27 	bl	8071664 <vPortEnterCritical>
 806ec16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ec18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806ec1c:	b25b      	sxtb	r3, r3
 806ec1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806ec22:	d103      	bne.n	806ec2c <xQueueGenericSend+0x16c>
 806ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ec26:	2200      	movs	r2, #0
 806ec28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806ec2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ec2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806ec32:	b25b      	sxtb	r3, r3
 806ec34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806ec38:	d103      	bne.n	806ec42 <xQueueGenericSend+0x182>
 806ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ec3c:	2200      	movs	r2, #0
 806ec3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806ec42:	f002 fd3f 	bl	80716c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806ec46:	1d3a      	adds	r2, r7, #4
 806ec48:	f107 0314 	add.w	r3, r7, #20
 806ec4c:	4611      	mov	r1, r2
 806ec4e:	4618      	mov	r0, r3
 806ec50:	f001 fa9c 	bl	807018c <xTaskCheckForTimeOut>
 806ec54:	4603      	mov	r3, r0
 806ec56:	2b00      	cmp	r3, #0
 806ec58:	d124      	bne.n	806eca4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 806ec5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806ec5c:	f000 fcf5 	bl	806f64a <prvIsQueueFull>
 806ec60:	4603      	mov	r3, r0
 806ec62:	2b00      	cmp	r3, #0
 806ec64:	d018      	beq.n	806ec98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 806ec66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ec68:	3310      	adds	r3, #16
 806ec6a:	687a      	ldr	r2, [r7, #4]
 806ec6c:	4611      	mov	r1, r2
 806ec6e:	4618      	mov	r0, r3
 806ec70:	f001 f9c2 	bl	806fff8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 806ec74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806ec76:	f000 fc80 	bl	806f57a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 806ec7a:	f000 fff1 	bl	806fc60 <xTaskResumeAll>
 806ec7e:	4603      	mov	r3, r0
 806ec80:	2b00      	cmp	r3, #0
 806ec82:	f47f af7c 	bne.w	806eb7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 806ec86:	4b0c      	ldr	r3, [pc, #48]	; (806ecb8 <xQueueGenericSend+0x1f8>)
 806ec88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806ec8c:	601a      	str	r2, [r3, #0]
 806ec8e:	f3bf 8f4f 	dsb	sy
 806ec92:	f3bf 8f6f 	isb	sy
 806ec96:	e772      	b.n	806eb7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 806ec98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806ec9a:	f000 fc6e 	bl	806f57a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806ec9e:	f000 ffdf 	bl	806fc60 <xTaskResumeAll>
 806eca2:	e76c      	b.n	806eb7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 806eca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806eca6:	f000 fc68 	bl	806f57a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806ecaa:	f000 ffd9 	bl	806fc60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 806ecae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 806ecb0:	4618      	mov	r0, r3
 806ecb2:	3738      	adds	r7, #56	; 0x38
 806ecb4:	46bd      	mov	sp, r7
 806ecb6:	bd80      	pop	{r7, pc}
 806ecb8:	e000ed04 	.word	0xe000ed04

0806ecbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 806ecbc:	b580      	push	{r7, lr}
 806ecbe:	b090      	sub	sp, #64	; 0x40
 806ecc0:	af00      	add	r7, sp, #0
 806ecc2:	60f8      	str	r0, [r7, #12]
 806ecc4:	60b9      	str	r1, [r7, #8]
 806ecc6:	607a      	str	r2, [r7, #4]
 806ecc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806ecca:	68fb      	ldr	r3, [r7, #12]
 806eccc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 806ecce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ecd0:	2b00      	cmp	r3, #0
 806ecd2:	d10a      	bne.n	806ecea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 806ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ecd8:	f383 8811 	msr	BASEPRI, r3
 806ecdc:	f3bf 8f6f 	isb	sy
 806ece0:	f3bf 8f4f 	dsb	sy
 806ece4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 806ece6:	bf00      	nop
 806ece8:	e7fe      	b.n	806ece8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806ecea:	68bb      	ldr	r3, [r7, #8]
 806ecec:	2b00      	cmp	r3, #0
 806ecee:	d103      	bne.n	806ecf8 <xQueueGenericSendFromISR+0x3c>
 806ecf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ecf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806ecf4:	2b00      	cmp	r3, #0
 806ecf6:	d101      	bne.n	806ecfc <xQueueGenericSendFromISR+0x40>
 806ecf8:	2301      	movs	r3, #1
 806ecfa:	e000      	b.n	806ecfe <xQueueGenericSendFromISR+0x42>
 806ecfc:	2300      	movs	r3, #0
 806ecfe:	2b00      	cmp	r3, #0
 806ed00:	d10a      	bne.n	806ed18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 806ed02:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ed06:	f383 8811 	msr	BASEPRI, r3
 806ed0a:	f3bf 8f6f 	isb	sy
 806ed0e:	f3bf 8f4f 	dsb	sy
 806ed12:	627b      	str	r3, [r7, #36]	; 0x24
}
 806ed14:	bf00      	nop
 806ed16:	e7fe      	b.n	806ed16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 806ed18:	683b      	ldr	r3, [r7, #0]
 806ed1a:	2b02      	cmp	r3, #2
 806ed1c:	d103      	bne.n	806ed26 <xQueueGenericSendFromISR+0x6a>
 806ed1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ed20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806ed22:	2b01      	cmp	r3, #1
 806ed24:	d101      	bne.n	806ed2a <xQueueGenericSendFromISR+0x6e>
 806ed26:	2301      	movs	r3, #1
 806ed28:	e000      	b.n	806ed2c <xQueueGenericSendFromISR+0x70>
 806ed2a:	2300      	movs	r3, #0
 806ed2c:	2b00      	cmp	r3, #0
 806ed2e:	d10a      	bne.n	806ed46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 806ed30:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ed34:	f383 8811 	msr	BASEPRI, r3
 806ed38:	f3bf 8f6f 	isb	sy
 806ed3c:	f3bf 8f4f 	dsb	sy
 806ed40:	623b      	str	r3, [r7, #32]
}
 806ed42:	bf00      	nop
 806ed44:	e7fe      	b.n	806ed44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806ed46:	f002 fd6f 	bl	8071828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 806ed4a:	f3ef 8211 	mrs	r2, BASEPRI
 806ed4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ed52:	f383 8811 	msr	BASEPRI, r3
 806ed56:	f3bf 8f6f 	isb	sy
 806ed5a:	f3bf 8f4f 	dsb	sy
 806ed5e:	61fa      	str	r2, [r7, #28]
 806ed60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 806ed62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806ed64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 806ed66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ed68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806ed6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ed6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806ed6e:	429a      	cmp	r2, r3
 806ed70:	d302      	bcc.n	806ed78 <xQueueGenericSendFromISR+0xbc>
 806ed72:	683b      	ldr	r3, [r7, #0]
 806ed74:	2b02      	cmp	r3, #2
 806ed76:	d12f      	bne.n	806edd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 806ed78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ed7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806ed7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 806ed82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ed84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806ed86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 806ed88:	683a      	ldr	r2, [r7, #0]
 806ed8a:	68b9      	ldr	r1, [r7, #8]
 806ed8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806ed8e:	f000 fb64 	bl	806f45a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 806ed92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 806ed96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806ed9a:	d112      	bne.n	806edc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806ed9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ed9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806eda0:	2b00      	cmp	r3, #0
 806eda2:	d016      	beq.n	806edd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806eda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806eda6:	3324      	adds	r3, #36	; 0x24
 806eda8:	4618      	mov	r0, r3
 806edaa:	f001 f975 	bl	8070098 <xTaskRemoveFromEventList>
 806edae:	4603      	mov	r3, r0
 806edb0:	2b00      	cmp	r3, #0
 806edb2:	d00e      	beq.n	806edd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 806edb4:	687b      	ldr	r3, [r7, #4]
 806edb6:	2b00      	cmp	r3, #0
 806edb8:	d00b      	beq.n	806edd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 806edba:	687b      	ldr	r3, [r7, #4]
 806edbc:	2201      	movs	r2, #1
 806edbe:	601a      	str	r2, [r3, #0]
 806edc0:	e007      	b.n	806edd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 806edc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 806edc6:	3301      	adds	r3, #1
 806edc8:	b2db      	uxtb	r3, r3
 806edca:	b25a      	sxtb	r2, r3
 806edcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806edce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 806edd2:	2301      	movs	r3, #1
 806edd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 806edd6:	e001      	b.n	806eddc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 806edd8:	2300      	movs	r3, #0
 806edda:	63fb      	str	r3, [r7, #60]	; 0x3c
 806eddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806edde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 806ede0:	697b      	ldr	r3, [r7, #20]
 806ede2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 806ede6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806ede8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 806edea:	4618      	mov	r0, r3
 806edec:	3740      	adds	r7, #64	; 0x40
 806edee:	46bd      	mov	sp, r7
 806edf0:	bd80      	pop	{r7, pc}

0806edf2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 806edf2:	b580      	push	{r7, lr}
 806edf4:	b08e      	sub	sp, #56	; 0x38
 806edf6:	af00      	add	r7, sp, #0
 806edf8:	6078      	str	r0, [r7, #4]
 806edfa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806edfc:	687b      	ldr	r3, [r7, #4]
 806edfe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 806ee00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ee02:	2b00      	cmp	r3, #0
 806ee04:	d10a      	bne.n	806ee1c <xQueueGiveFromISR+0x2a>
	__asm volatile
 806ee06:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ee0a:	f383 8811 	msr	BASEPRI, r3
 806ee0e:	f3bf 8f6f 	isb	sy
 806ee12:	f3bf 8f4f 	dsb	sy
 806ee16:	623b      	str	r3, [r7, #32]
}
 806ee18:	bf00      	nop
 806ee1a:	e7fe      	b.n	806ee1a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 806ee1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ee1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806ee20:	2b00      	cmp	r3, #0
 806ee22:	d00a      	beq.n	806ee3a <xQueueGiveFromISR+0x48>
	__asm volatile
 806ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ee28:	f383 8811 	msr	BASEPRI, r3
 806ee2c:	f3bf 8f6f 	isb	sy
 806ee30:	f3bf 8f4f 	dsb	sy
 806ee34:	61fb      	str	r3, [r7, #28]
}
 806ee36:	bf00      	nop
 806ee38:	e7fe      	b.n	806ee38 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 806ee3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ee3c:	681b      	ldr	r3, [r3, #0]
 806ee3e:	2b00      	cmp	r3, #0
 806ee40:	d103      	bne.n	806ee4a <xQueueGiveFromISR+0x58>
 806ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ee44:	689b      	ldr	r3, [r3, #8]
 806ee46:	2b00      	cmp	r3, #0
 806ee48:	d101      	bne.n	806ee4e <xQueueGiveFromISR+0x5c>
 806ee4a:	2301      	movs	r3, #1
 806ee4c:	e000      	b.n	806ee50 <xQueueGiveFromISR+0x5e>
 806ee4e:	2300      	movs	r3, #0
 806ee50:	2b00      	cmp	r3, #0
 806ee52:	d10a      	bne.n	806ee6a <xQueueGiveFromISR+0x78>
	__asm volatile
 806ee54:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ee58:	f383 8811 	msr	BASEPRI, r3
 806ee5c:	f3bf 8f6f 	isb	sy
 806ee60:	f3bf 8f4f 	dsb	sy
 806ee64:	61bb      	str	r3, [r7, #24]
}
 806ee66:	bf00      	nop
 806ee68:	e7fe      	b.n	806ee68 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806ee6a:	f002 fcdd 	bl	8071828 <vPortValidateInterruptPriority>
	__asm volatile
 806ee6e:	f3ef 8211 	mrs	r2, BASEPRI
 806ee72:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ee76:	f383 8811 	msr	BASEPRI, r3
 806ee7a:	f3bf 8f6f 	isb	sy
 806ee7e:	f3bf 8f4f 	dsb	sy
 806ee82:	617a      	str	r2, [r7, #20]
 806ee84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 806ee86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806ee88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806ee8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ee8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806ee8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 806ee90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ee92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806ee94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806ee96:	429a      	cmp	r2, r3
 806ee98:	d22b      	bcs.n	806eef2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 806ee9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ee9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806eea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 806eea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806eea6:	1c5a      	adds	r2, r3, #1
 806eea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806eeaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 806eeac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 806eeb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806eeb4:	d112      	bne.n	806eedc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806eeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806eeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806eeba:	2b00      	cmp	r3, #0
 806eebc:	d016      	beq.n	806eeec <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806eebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806eec0:	3324      	adds	r3, #36	; 0x24
 806eec2:	4618      	mov	r0, r3
 806eec4:	f001 f8e8 	bl	8070098 <xTaskRemoveFromEventList>
 806eec8:	4603      	mov	r3, r0
 806eeca:	2b00      	cmp	r3, #0
 806eecc:	d00e      	beq.n	806eeec <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 806eece:	683b      	ldr	r3, [r7, #0]
 806eed0:	2b00      	cmp	r3, #0
 806eed2:	d00b      	beq.n	806eeec <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 806eed4:	683b      	ldr	r3, [r7, #0]
 806eed6:	2201      	movs	r2, #1
 806eed8:	601a      	str	r2, [r3, #0]
 806eeda:	e007      	b.n	806eeec <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 806eedc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 806eee0:	3301      	adds	r3, #1
 806eee2:	b2db      	uxtb	r3, r3
 806eee4:	b25a      	sxtb	r2, r3
 806eee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806eee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 806eeec:	2301      	movs	r3, #1
 806eeee:	637b      	str	r3, [r7, #52]	; 0x34
 806eef0:	e001      	b.n	806eef6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 806eef2:	2300      	movs	r3, #0
 806eef4:	637b      	str	r3, [r7, #52]	; 0x34
 806eef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806eef8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 806eefa:	68fb      	ldr	r3, [r7, #12]
 806eefc:	f383 8811 	msr	BASEPRI, r3
}
 806ef00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806ef02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 806ef04:	4618      	mov	r0, r3
 806ef06:	3738      	adds	r7, #56	; 0x38
 806ef08:	46bd      	mov	sp, r7
 806ef0a:	bd80      	pop	{r7, pc}

0806ef0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 806ef0c:	b580      	push	{r7, lr}
 806ef0e:	b08c      	sub	sp, #48	; 0x30
 806ef10:	af00      	add	r7, sp, #0
 806ef12:	60f8      	str	r0, [r7, #12]
 806ef14:	60b9      	str	r1, [r7, #8]
 806ef16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 806ef18:	2300      	movs	r3, #0
 806ef1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806ef1c:	68fb      	ldr	r3, [r7, #12]
 806ef1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 806ef20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806ef22:	2b00      	cmp	r3, #0
 806ef24:	d10a      	bne.n	806ef3c <xQueueReceive+0x30>
	__asm volatile
 806ef26:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ef2a:	f383 8811 	msr	BASEPRI, r3
 806ef2e:	f3bf 8f6f 	isb	sy
 806ef32:	f3bf 8f4f 	dsb	sy
 806ef36:	623b      	str	r3, [r7, #32]
}
 806ef38:	bf00      	nop
 806ef3a:	e7fe      	b.n	806ef3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806ef3c:	68bb      	ldr	r3, [r7, #8]
 806ef3e:	2b00      	cmp	r3, #0
 806ef40:	d103      	bne.n	806ef4a <xQueueReceive+0x3e>
 806ef42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806ef44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806ef46:	2b00      	cmp	r3, #0
 806ef48:	d101      	bne.n	806ef4e <xQueueReceive+0x42>
 806ef4a:	2301      	movs	r3, #1
 806ef4c:	e000      	b.n	806ef50 <xQueueReceive+0x44>
 806ef4e:	2300      	movs	r3, #0
 806ef50:	2b00      	cmp	r3, #0
 806ef52:	d10a      	bne.n	806ef6a <xQueueReceive+0x5e>
	__asm volatile
 806ef54:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ef58:	f383 8811 	msr	BASEPRI, r3
 806ef5c:	f3bf 8f6f 	isb	sy
 806ef60:	f3bf 8f4f 	dsb	sy
 806ef64:	61fb      	str	r3, [r7, #28]
}
 806ef66:	bf00      	nop
 806ef68:	e7fe      	b.n	806ef68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806ef6a:	f001 fa67 	bl	807043c <xTaskGetSchedulerState>
 806ef6e:	4603      	mov	r3, r0
 806ef70:	2b00      	cmp	r3, #0
 806ef72:	d102      	bne.n	806ef7a <xQueueReceive+0x6e>
 806ef74:	687b      	ldr	r3, [r7, #4]
 806ef76:	2b00      	cmp	r3, #0
 806ef78:	d101      	bne.n	806ef7e <xQueueReceive+0x72>
 806ef7a:	2301      	movs	r3, #1
 806ef7c:	e000      	b.n	806ef80 <xQueueReceive+0x74>
 806ef7e:	2300      	movs	r3, #0
 806ef80:	2b00      	cmp	r3, #0
 806ef82:	d10a      	bne.n	806ef9a <xQueueReceive+0x8e>
	__asm volatile
 806ef84:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ef88:	f383 8811 	msr	BASEPRI, r3
 806ef8c:	f3bf 8f6f 	isb	sy
 806ef90:	f3bf 8f4f 	dsb	sy
 806ef94:	61bb      	str	r3, [r7, #24]
}
 806ef96:	bf00      	nop
 806ef98:	e7fe      	b.n	806ef98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806ef9a:	f002 fb63 	bl	8071664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806ef9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806efa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806efa2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806efa6:	2b00      	cmp	r3, #0
 806efa8:	d01f      	beq.n	806efea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 806efaa:	68b9      	ldr	r1, [r7, #8]
 806efac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806efae:	f000 fabe 	bl	806f52e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 806efb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806efb4:	1e5a      	subs	r2, r3, #1
 806efb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806efb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806efba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806efbc:	691b      	ldr	r3, [r3, #16]
 806efbe:	2b00      	cmp	r3, #0
 806efc0:	d00f      	beq.n	806efe2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806efc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806efc4:	3310      	adds	r3, #16
 806efc6:	4618      	mov	r0, r3
 806efc8:	f001 f866 	bl	8070098 <xTaskRemoveFromEventList>
 806efcc:	4603      	mov	r3, r0
 806efce:	2b00      	cmp	r3, #0
 806efd0:	d007      	beq.n	806efe2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 806efd2:	4b3d      	ldr	r3, [pc, #244]	; (806f0c8 <xQueueReceive+0x1bc>)
 806efd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806efd8:	601a      	str	r2, [r3, #0]
 806efda:	f3bf 8f4f 	dsb	sy
 806efde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 806efe2:	f002 fb6f 	bl	80716c4 <vPortExitCritical>
				return pdPASS;
 806efe6:	2301      	movs	r3, #1
 806efe8:	e069      	b.n	806f0be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806efea:	687b      	ldr	r3, [r7, #4]
 806efec:	2b00      	cmp	r3, #0
 806efee:	d103      	bne.n	806eff8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 806eff0:	f002 fb68 	bl	80716c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 806eff4:	2300      	movs	r3, #0
 806eff6:	e062      	b.n	806f0be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 806eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806effa:	2b00      	cmp	r3, #0
 806effc:	d106      	bne.n	806f00c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806effe:	f107 0310 	add.w	r3, r7, #16
 806f002:	4618      	mov	r0, r3
 806f004:	f001 f8ac 	bl	8070160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806f008:	2301      	movs	r3, #1
 806f00a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806f00c:	f002 fb5a 	bl	80716c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 806f010:	f000 fe18 	bl	806fc44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806f014:	f002 fb26 	bl	8071664 <vPortEnterCritical>
 806f018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f01a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806f01e:	b25b      	sxtb	r3, r3
 806f020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f024:	d103      	bne.n	806f02e <xQueueReceive+0x122>
 806f026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f028:	2200      	movs	r2, #0
 806f02a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806f02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f034:	b25b      	sxtb	r3, r3
 806f036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f03a:	d103      	bne.n	806f044 <xQueueReceive+0x138>
 806f03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f03e:	2200      	movs	r2, #0
 806f040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806f044:	f002 fb3e 	bl	80716c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806f048:	1d3a      	adds	r2, r7, #4
 806f04a:	f107 0310 	add.w	r3, r7, #16
 806f04e:	4611      	mov	r1, r2
 806f050:	4618      	mov	r0, r3
 806f052:	f001 f89b 	bl	807018c <xTaskCheckForTimeOut>
 806f056:	4603      	mov	r3, r0
 806f058:	2b00      	cmp	r3, #0
 806f05a:	d123      	bne.n	806f0a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f05c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f05e:	f000 fade 	bl	806f61e <prvIsQueueEmpty>
 806f062:	4603      	mov	r3, r0
 806f064:	2b00      	cmp	r3, #0
 806f066:	d017      	beq.n	806f098 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 806f068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f06a:	3324      	adds	r3, #36	; 0x24
 806f06c:	687a      	ldr	r2, [r7, #4]
 806f06e:	4611      	mov	r1, r2
 806f070:	4618      	mov	r0, r3
 806f072:	f000 ffc1 	bl	806fff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 806f076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f078:	f000 fa7f 	bl	806f57a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 806f07c:	f000 fdf0 	bl	806fc60 <xTaskResumeAll>
 806f080:	4603      	mov	r3, r0
 806f082:	2b00      	cmp	r3, #0
 806f084:	d189      	bne.n	806ef9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 806f086:	4b10      	ldr	r3, [pc, #64]	; (806f0c8 <xQueueReceive+0x1bc>)
 806f088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f08c:	601a      	str	r2, [r3, #0]
 806f08e:	f3bf 8f4f 	dsb	sy
 806f092:	f3bf 8f6f 	isb	sy
 806f096:	e780      	b.n	806ef9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 806f098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f09a:	f000 fa6e 	bl	806f57a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806f09e:	f000 fddf 	bl	806fc60 <xTaskResumeAll>
 806f0a2:	e77a      	b.n	806ef9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 806f0a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f0a6:	f000 fa68 	bl	806f57a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806f0aa:	f000 fdd9 	bl	806fc60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f0ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f0b0:	f000 fab5 	bl	806f61e <prvIsQueueEmpty>
 806f0b4:	4603      	mov	r3, r0
 806f0b6:	2b00      	cmp	r3, #0
 806f0b8:	f43f af6f 	beq.w	806ef9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 806f0bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 806f0be:	4618      	mov	r0, r3
 806f0c0:	3730      	adds	r7, #48	; 0x30
 806f0c2:	46bd      	mov	sp, r7
 806f0c4:	bd80      	pop	{r7, pc}
 806f0c6:	bf00      	nop
 806f0c8:	e000ed04 	.word	0xe000ed04

0806f0cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 806f0cc:	b580      	push	{r7, lr}
 806f0ce:	b08e      	sub	sp, #56	; 0x38
 806f0d0:	af00      	add	r7, sp, #0
 806f0d2:	6078      	str	r0, [r7, #4]
 806f0d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 806f0d6:	2300      	movs	r3, #0
 806f0d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806f0da:	687b      	ldr	r3, [r7, #4]
 806f0dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 806f0de:	2300      	movs	r3, #0
 806f0e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 806f0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f0e4:	2b00      	cmp	r3, #0
 806f0e6:	d10a      	bne.n	806f0fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 806f0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f0ec:	f383 8811 	msr	BASEPRI, r3
 806f0f0:	f3bf 8f6f 	isb	sy
 806f0f4:	f3bf 8f4f 	dsb	sy
 806f0f8:	623b      	str	r3, [r7, #32]
}
 806f0fa:	bf00      	nop
 806f0fc:	e7fe      	b.n	806f0fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 806f0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f102:	2b00      	cmp	r3, #0
 806f104:	d00a      	beq.n	806f11c <xQueueSemaphoreTake+0x50>
	__asm volatile
 806f106:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f10a:	f383 8811 	msr	BASEPRI, r3
 806f10e:	f3bf 8f6f 	isb	sy
 806f112:	f3bf 8f4f 	dsb	sy
 806f116:	61fb      	str	r3, [r7, #28]
}
 806f118:	bf00      	nop
 806f11a:	e7fe      	b.n	806f11a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806f11c:	f001 f98e 	bl	807043c <xTaskGetSchedulerState>
 806f120:	4603      	mov	r3, r0
 806f122:	2b00      	cmp	r3, #0
 806f124:	d102      	bne.n	806f12c <xQueueSemaphoreTake+0x60>
 806f126:	683b      	ldr	r3, [r7, #0]
 806f128:	2b00      	cmp	r3, #0
 806f12a:	d101      	bne.n	806f130 <xQueueSemaphoreTake+0x64>
 806f12c:	2301      	movs	r3, #1
 806f12e:	e000      	b.n	806f132 <xQueueSemaphoreTake+0x66>
 806f130:	2300      	movs	r3, #0
 806f132:	2b00      	cmp	r3, #0
 806f134:	d10a      	bne.n	806f14c <xQueueSemaphoreTake+0x80>
	__asm volatile
 806f136:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f13a:	f383 8811 	msr	BASEPRI, r3
 806f13e:	f3bf 8f6f 	isb	sy
 806f142:	f3bf 8f4f 	dsb	sy
 806f146:	61bb      	str	r3, [r7, #24]
}
 806f148:	bf00      	nop
 806f14a:	e7fe      	b.n	806f14a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806f14c:	f002 fa8a 	bl	8071664 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 806f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f154:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 806f156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f158:	2b00      	cmp	r3, #0
 806f15a:	d024      	beq.n	806f1a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 806f15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f15e:	1e5a      	subs	r2, r3, #1
 806f160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f162:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f166:	681b      	ldr	r3, [r3, #0]
 806f168:	2b00      	cmp	r3, #0
 806f16a:	d104      	bne.n	806f176 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 806f16c:	f001 fadc 	bl	8070728 <pvTaskIncrementMutexHeldCount>
 806f170:	4602      	mov	r2, r0
 806f172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f174:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806f176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f178:	691b      	ldr	r3, [r3, #16]
 806f17a:	2b00      	cmp	r3, #0
 806f17c:	d00f      	beq.n	806f19e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806f17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f180:	3310      	adds	r3, #16
 806f182:	4618      	mov	r0, r3
 806f184:	f000 ff88 	bl	8070098 <xTaskRemoveFromEventList>
 806f188:	4603      	mov	r3, r0
 806f18a:	2b00      	cmp	r3, #0
 806f18c:	d007      	beq.n	806f19e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 806f18e:	4b54      	ldr	r3, [pc, #336]	; (806f2e0 <xQueueSemaphoreTake+0x214>)
 806f190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f194:	601a      	str	r2, [r3, #0]
 806f196:	f3bf 8f4f 	dsb	sy
 806f19a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 806f19e:	f002 fa91 	bl	80716c4 <vPortExitCritical>
				return pdPASS;
 806f1a2:	2301      	movs	r3, #1
 806f1a4:	e097      	b.n	806f2d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806f1a6:	683b      	ldr	r3, [r7, #0]
 806f1a8:	2b00      	cmp	r3, #0
 806f1aa:	d111      	bne.n	806f1d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 806f1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f1ae:	2b00      	cmp	r3, #0
 806f1b0:	d00a      	beq.n	806f1c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 806f1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f1b6:	f383 8811 	msr	BASEPRI, r3
 806f1ba:	f3bf 8f6f 	isb	sy
 806f1be:	f3bf 8f4f 	dsb	sy
 806f1c2:	617b      	str	r3, [r7, #20]
}
 806f1c4:	bf00      	nop
 806f1c6:	e7fe      	b.n	806f1c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 806f1c8:	f002 fa7c 	bl	80716c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 806f1cc:	2300      	movs	r3, #0
 806f1ce:	e082      	b.n	806f2d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 806f1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806f1d2:	2b00      	cmp	r3, #0
 806f1d4:	d106      	bne.n	806f1e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806f1d6:	f107 030c 	add.w	r3, r7, #12
 806f1da:	4618      	mov	r0, r3
 806f1dc:	f000 ffc0 	bl	8070160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806f1e0:	2301      	movs	r3, #1
 806f1e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806f1e4:	f002 fa6e 	bl	80716c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 806f1e8:	f000 fd2c 	bl	806fc44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806f1ec:	f002 fa3a 	bl	8071664 <vPortEnterCritical>
 806f1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f1f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806f1f6:	b25b      	sxtb	r3, r3
 806f1f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f1fc:	d103      	bne.n	806f206 <xQueueSemaphoreTake+0x13a>
 806f1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f200:	2200      	movs	r2, #0
 806f202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f20c:	b25b      	sxtb	r3, r3
 806f20e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f212:	d103      	bne.n	806f21c <xQueueSemaphoreTake+0x150>
 806f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f216:	2200      	movs	r2, #0
 806f218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806f21c:	f002 fa52 	bl	80716c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806f220:	463a      	mov	r2, r7
 806f222:	f107 030c 	add.w	r3, r7, #12
 806f226:	4611      	mov	r1, r2
 806f228:	4618      	mov	r0, r3
 806f22a:	f000 ffaf 	bl	807018c <xTaskCheckForTimeOut>
 806f22e:	4603      	mov	r3, r0
 806f230:	2b00      	cmp	r3, #0
 806f232:	d132      	bne.n	806f29a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f236:	f000 f9f2 	bl	806f61e <prvIsQueueEmpty>
 806f23a:	4603      	mov	r3, r0
 806f23c:	2b00      	cmp	r3, #0
 806f23e:	d026      	beq.n	806f28e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f242:	681b      	ldr	r3, [r3, #0]
 806f244:	2b00      	cmp	r3, #0
 806f246:	d109      	bne.n	806f25c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 806f248:	f002 fa0c 	bl	8071664 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 806f24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f24e:	689b      	ldr	r3, [r3, #8]
 806f250:	4618      	mov	r0, r3
 806f252:	f001 f911 	bl	8070478 <xTaskPriorityInherit>
 806f256:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 806f258:	f002 fa34 	bl	80716c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 806f25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f25e:	3324      	adds	r3, #36	; 0x24
 806f260:	683a      	ldr	r2, [r7, #0]
 806f262:	4611      	mov	r1, r2
 806f264:	4618      	mov	r0, r3
 806f266:	f000 fec7 	bl	806fff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 806f26a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f26c:	f000 f985 	bl	806f57a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 806f270:	f000 fcf6 	bl	806fc60 <xTaskResumeAll>
 806f274:	4603      	mov	r3, r0
 806f276:	2b00      	cmp	r3, #0
 806f278:	f47f af68 	bne.w	806f14c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 806f27c:	4b18      	ldr	r3, [pc, #96]	; (806f2e0 <xQueueSemaphoreTake+0x214>)
 806f27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f282:	601a      	str	r2, [r3, #0]
 806f284:	f3bf 8f4f 	dsb	sy
 806f288:	f3bf 8f6f 	isb	sy
 806f28c:	e75e      	b.n	806f14c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 806f28e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f290:	f000 f973 	bl	806f57a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806f294:	f000 fce4 	bl	806fc60 <xTaskResumeAll>
 806f298:	e758      	b.n	806f14c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 806f29a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f29c:	f000 f96d 	bl	806f57a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806f2a0:	f000 fcde 	bl	806fc60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f2a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f2a6:	f000 f9ba 	bl	806f61e <prvIsQueueEmpty>
 806f2aa:	4603      	mov	r3, r0
 806f2ac:	2b00      	cmp	r3, #0
 806f2ae:	f43f af4d 	beq.w	806f14c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 806f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f2b4:	2b00      	cmp	r3, #0
 806f2b6:	d00d      	beq.n	806f2d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 806f2b8:	f002 f9d4 	bl	8071664 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 806f2bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f2be:	f000 f8b4 	bl	806f42a <prvGetDisinheritPriorityAfterTimeout>
 806f2c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 806f2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f2c6:	689b      	ldr	r3, [r3, #8]
 806f2c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806f2ca:	4618      	mov	r0, r3
 806f2cc:	f001 f9aa 	bl	8070624 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 806f2d0:	f002 f9f8 	bl	80716c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 806f2d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 806f2d6:	4618      	mov	r0, r3
 806f2d8:	3738      	adds	r7, #56	; 0x38
 806f2da:	46bd      	mov	sp, r7
 806f2dc:	bd80      	pop	{r7, pc}
 806f2de:	bf00      	nop
 806f2e0:	e000ed04 	.word	0xe000ed04

0806f2e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 806f2e4:	b580      	push	{r7, lr}
 806f2e6:	b08e      	sub	sp, #56	; 0x38
 806f2e8:	af00      	add	r7, sp, #0
 806f2ea:	60f8      	str	r0, [r7, #12]
 806f2ec:	60b9      	str	r1, [r7, #8]
 806f2ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806f2f0:	68fb      	ldr	r3, [r7, #12]
 806f2f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 806f2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f2f6:	2b00      	cmp	r3, #0
 806f2f8:	d10a      	bne.n	806f310 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 806f2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f2fe:	f383 8811 	msr	BASEPRI, r3
 806f302:	f3bf 8f6f 	isb	sy
 806f306:	f3bf 8f4f 	dsb	sy
 806f30a:	623b      	str	r3, [r7, #32]
}
 806f30c:	bf00      	nop
 806f30e:	e7fe      	b.n	806f30e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806f310:	68bb      	ldr	r3, [r7, #8]
 806f312:	2b00      	cmp	r3, #0
 806f314:	d103      	bne.n	806f31e <xQueueReceiveFromISR+0x3a>
 806f316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f31a:	2b00      	cmp	r3, #0
 806f31c:	d101      	bne.n	806f322 <xQueueReceiveFromISR+0x3e>
 806f31e:	2301      	movs	r3, #1
 806f320:	e000      	b.n	806f324 <xQueueReceiveFromISR+0x40>
 806f322:	2300      	movs	r3, #0
 806f324:	2b00      	cmp	r3, #0
 806f326:	d10a      	bne.n	806f33e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 806f328:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f32c:	f383 8811 	msr	BASEPRI, r3
 806f330:	f3bf 8f6f 	isb	sy
 806f334:	f3bf 8f4f 	dsb	sy
 806f338:	61fb      	str	r3, [r7, #28]
}
 806f33a:	bf00      	nop
 806f33c:	e7fe      	b.n	806f33c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806f33e:	f002 fa73 	bl	8071828 <vPortValidateInterruptPriority>
	__asm volatile
 806f342:	f3ef 8211 	mrs	r2, BASEPRI
 806f346:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f34a:	f383 8811 	msr	BASEPRI, r3
 806f34e:	f3bf 8f6f 	isb	sy
 806f352:	f3bf 8f4f 	dsb	sy
 806f356:	61ba      	str	r2, [r7, #24]
 806f358:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 806f35a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806f35c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806f35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f362:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806f364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f366:	2b00      	cmp	r3, #0
 806f368:	d02f      	beq.n	806f3ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 806f36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f36c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806f370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 806f374:	68b9      	ldr	r1, [r7, #8]
 806f376:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f378:	f000 f8d9 	bl	806f52e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 806f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f37e:	1e5a      	subs	r2, r3, #1
 806f380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f382:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 806f384:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 806f388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f38c:	d112      	bne.n	806f3b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806f38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f390:	691b      	ldr	r3, [r3, #16]
 806f392:	2b00      	cmp	r3, #0
 806f394:	d016      	beq.n	806f3c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806f396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f398:	3310      	adds	r3, #16
 806f39a:	4618      	mov	r0, r3
 806f39c:	f000 fe7c 	bl	8070098 <xTaskRemoveFromEventList>
 806f3a0:	4603      	mov	r3, r0
 806f3a2:	2b00      	cmp	r3, #0
 806f3a4:	d00e      	beq.n	806f3c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 806f3a6:	687b      	ldr	r3, [r7, #4]
 806f3a8:	2b00      	cmp	r3, #0
 806f3aa:	d00b      	beq.n	806f3c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 806f3ac:	687b      	ldr	r3, [r7, #4]
 806f3ae:	2201      	movs	r2, #1
 806f3b0:	601a      	str	r2, [r3, #0]
 806f3b2:	e007      	b.n	806f3c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 806f3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 806f3b8:	3301      	adds	r3, #1
 806f3ba:	b2db      	uxtb	r3, r3
 806f3bc:	b25a      	sxtb	r2, r3
 806f3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f3c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 806f3c4:	2301      	movs	r3, #1
 806f3c6:	637b      	str	r3, [r7, #52]	; 0x34
 806f3c8:	e001      	b.n	806f3ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 806f3ca:	2300      	movs	r3, #0
 806f3cc:	637b      	str	r3, [r7, #52]	; 0x34
 806f3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f3d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 806f3d2:	693b      	ldr	r3, [r7, #16]
 806f3d4:	f383 8811 	msr	BASEPRI, r3
}
 806f3d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806f3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 806f3dc:	4618      	mov	r0, r3
 806f3de:	3738      	adds	r7, #56	; 0x38
 806f3e0:	46bd      	mov	sp, r7
 806f3e2:	bd80      	pop	{r7, pc}

0806f3e4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 806f3e4:	b580      	push	{r7, lr}
 806f3e6:	b084      	sub	sp, #16
 806f3e8:	af00      	add	r7, sp, #0
 806f3ea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 806f3ec:	687b      	ldr	r3, [r7, #4]
 806f3ee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 806f3f0:	68fb      	ldr	r3, [r7, #12]
 806f3f2:	2b00      	cmp	r3, #0
 806f3f4:	d10a      	bne.n	806f40c <vQueueDelete+0x28>
	__asm volatile
 806f3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f3fa:	f383 8811 	msr	BASEPRI, r3
 806f3fe:	f3bf 8f6f 	isb	sy
 806f402:	f3bf 8f4f 	dsb	sy
 806f406:	60bb      	str	r3, [r7, #8]
}
 806f408:	bf00      	nop
 806f40a:	e7fe      	b.n	806f40a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 806f40c:	68f8      	ldr	r0, [r7, #12]
 806f40e:	f000 f95f 	bl	806f6d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 806f412:	68fb      	ldr	r3, [r7, #12]
 806f414:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 806f418:	2b00      	cmp	r3, #0
 806f41a:	d102      	bne.n	806f422 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 806f41c:	68f8      	ldr	r0, [r7, #12]
 806f41e:	f002 fb0f 	bl	8071a40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 806f422:	bf00      	nop
 806f424:	3710      	adds	r7, #16
 806f426:	46bd      	mov	sp, r7
 806f428:	bd80      	pop	{r7, pc}

0806f42a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 806f42a:	b480      	push	{r7}
 806f42c:	b085      	sub	sp, #20
 806f42e:	af00      	add	r7, sp, #0
 806f430:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 806f432:	687b      	ldr	r3, [r7, #4]
 806f434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806f436:	2b00      	cmp	r3, #0
 806f438:	d006      	beq.n	806f448 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 806f43a:	687b      	ldr	r3, [r7, #4]
 806f43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806f43e:	681b      	ldr	r3, [r3, #0]
 806f440:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 806f444:	60fb      	str	r3, [r7, #12]
 806f446:	e001      	b.n	806f44c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 806f448:	2300      	movs	r3, #0
 806f44a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 806f44c:	68fb      	ldr	r3, [r7, #12]
	}
 806f44e:	4618      	mov	r0, r3
 806f450:	3714      	adds	r7, #20
 806f452:	46bd      	mov	sp, r7
 806f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 806f458:	4770      	bx	lr

0806f45a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 806f45a:	b580      	push	{r7, lr}
 806f45c:	b086      	sub	sp, #24
 806f45e:	af00      	add	r7, sp, #0
 806f460:	60f8      	str	r0, [r7, #12]
 806f462:	60b9      	str	r1, [r7, #8]
 806f464:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 806f466:	2300      	movs	r3, #0
 806f468:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806f46a:	68fb      	ldr	r3, [r7, #12]
 806f46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f46e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 806f470:	68fb      	ldr	r3, [r7, #12]
 806f472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f474:	2b00      	cmp	r3, #0
 806f476:	d10d      	bne.n	806f494 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806f478:	68fb      	ldr	r3, [r7, #12]
 806f47a:	681b      	ldr	r3, [r3, #0]
 806f47c:	2b00      	cmp	r3, #0
 806f47e:	d14d      	bne.n	806f51c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 806f480:	68fb      	ldr	r3, [r7, #12]
 806f482:	689b      	ldr	r3, [r3, #8]
 806f484:	4618      	mov	r0, r3
 806f486:	f001 f85f 	bl	8070548 <xTaskPriorityDisinherit>
 806f48a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 806f48c:	68fb      	ldr	r3, [r7, #12]
 806f48e:	2200      	movs	r2, #0
 806f490:	609a      	str	r2, [r3, #8]
 806f492:	e043      	b.n	806f51c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 806f494:	687b      	ldr	r3, [r7, #4]
 806f496:	2b00      	cmp	r3, #0
 806f498:	d119      	bne.n	806f4ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 806f49a:	68fb      	ldr	r3, [r7, #12]
 806f49c:	6858      	ldr	r0, [r3, #4]
 806f49e:	68fb      	ldr	r3, [r7, #12]
 806f4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f4a2:	461a      	mov	r2, r3
 806f4a4:	68b9      	ldr	r1, [r7, #8]
 806f4a6:	f002 fd0c 	bl	8071ec2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 806f4aa:	68fb      	ldr	r3, [r7, #12]
 806f4ac:	685a      	ldr	r2, [r3, #4]
 806f4ae:	68fb      	ldr	r3, [r7, #12]
 806f4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f4b2:	441a      	add	r2, r3
 806f4b4:	68fb      	ldr	r3, [r7, #12]
 806f4b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 806f4b8:	68fb      	ldr	r3, [r7, #12]
 806f4ba:	685a      	ldr	r2, [r3, #4]
 806f4bc:	68fb      	ldr	r3, [r7, #12]
 806f4be:	689b      	ldr	r3, [r3, #8]
 806f4c0:	429a      	cmp	r2, r3
 806f4c2:	d32b      	bcc.n	806f51c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 806f4c4:	68fb      	ldr	r3, [r7, #12]
 806f4c6:	681a      	ldr	r2, [r3, #0]
 806f4c8:	68fb      	ldr	r3, [r7, #12]
 806f4ca:	605a      	str	r2, [r3, #4]
 806f4cc:	e026      	b.n	806f51c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 806f4ce:	68fb      	ldr	r3, [r7, #12]
 806f4d0:	68d8      	ldr	r0, [r3, #12]
 806f4d2:	68fb      	ldr	r3, [r7, #12]
 806f4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f4d6:	461a      	mov	r2, r3
 806f4d8:	68b9      	ldr	r1, [r7, #8]
 806f4da:	f002 fcf2 	bl	8071ec2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 806f4de:	68fb      	ldr	r3, [r7, #12]
 806f4e0:	68da      	ldr	r2, [r3, #12]
 806f4e2:	68fb      	ldr	r3, [r7, #12]
 806f4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f4e6:	425b      	negs	r3, r3
 806f4e8:	441a      	add	r2, r3
 806f4ea:	68fb      	ldr	r3, [r7, #12]
 806f4ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 806f4ee:	68fb      	ldr	r3, [r7, #12]
 806f4f0:	68da      	ldr	r2, [r3, #12]
 806f4f2:	68fb      	ldr	r3, [r7, #12]
 806f4f4:	681b      	ldr	r3, [r3, #0]
 806f4f6:	429a      	cmp	r2, r3
 806f4f8:	d207      	bcs.n	806f50a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 806f4fa:	68fb      	ldr	r3, [r7, #12]
 806f4fc:	689a      	ldr	r2, [r3, #8]
 806f4fe:	68fb      	ldr	r3, [r7, #12]
 806f500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f502:	425b      	negs	r3, r3
 806f504:	441a      	add	r2, r3
 806f506:	68fb      	ldr	r3, [r7, #12]
 806f508:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 806f50a:	687b      	ldr	r3, [r7, #4]
 806f50c:	2b02      	cmp	r3, #2
 806f50e:	d105      	bne.n	806f51c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806f510:	693b      	ldr	r3, [r7, #16]
 806f512:	2b00      	cmp	r3, #0
 806f514:	d002      	beq.n	806f51c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 806f516:	693b      	ldr	r3, [r7, #16]
 806f518:	3b01      	subs	r3, #1
 806f51a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 806f51c:	693b      	ldr	r3, [r7, #16]
 806f51e:	1c5a      	adds	r2, r3, #1
 806f520:	68fb      	ldr	r3, [r7, #12]
 806f522:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 806f524:	697b      	ldr	r3, [r7, #20]
}
 806f526:	4618      	mov	r0, r3
 806f528:	3718      	adds	r7, #24
 806f52a:	46bd      	mov	sp, r7
 806f52c:	bd80      	pop	{r7, pc}

0806f52e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 806f52e:	b580      	push	{r7, lr}
 806f530:	b082      	sub	sp, #8
 806f532:	af00      	add	r7, sp, #0
 806f534:	6078      	str	r0, [r7, #4]
 806f536:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 806f538:	687b      	ldr	r3, [r7, #4]
 806f53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f53c:	2b00      	cmp	r3, #0
 806f53e:	d018      	beq.n	806f572 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 806f540:	687b      	ldr	r3, [r7, #4]
 806f542:	68da      	ldr	r2, [r3, #12]
 806f544:	687b      	ldr	r3, [r7, #4]
 806f546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f548:	441a      	add	r2, r3
 806f54a:	687b      	ldr	r3, [r7, #4]
 806f54c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 806f54e:	687b      	ldr	r3, [r7, #4]
 806f550:	68da      	ldr	r2, [r3, #12]
 806f552:	687b      	ldr	r3, [r7, #4]
 806f554:	689b      	ldr	r3, [r3, #8]
 806f556:	429a      	cmp	r2, r3
 806f558:	d303      	bcc.n	806f562 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 806f55a:	687b      	ldr	r3, [r7, #4]
 806f55c:	681a      	ldr	r2, [r3, #0]
 806f55e:	687b      	ldr	r3, [r7, #4]
 806f560:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 806f562:	687b      	ldr	r3, [r7, #4]
 806f564:	68d9      	ldr	r1, [r3, #12]
 806f566:	687b      	ldr	r3, [r7, #4]
 806f568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f56a:	461a      	mov	r2, r3
 806f56c:	6838      	ldr	r0, [r7, #0]
 806f56e:	f002 fca8 	bl	8071ec2 <memcpy>
	}
}
 806f572:	bf00      	nop
 806f574:	3708      	adds	r7, #8
 806f576:	46bd      	mov	sp, r7
 806f578:	bd80      	pop	{r7, pc}

0806f57a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 806f57a:	b580      	push	{r7, lr}
 806f57c:	b084      	sub	sp, #16
 806f57e:	af00      	add	r7, sp, #0
 806f580:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 806f582:	f002 f86f 	bl	8071664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 806f586:	687b      	ldr	r3, [r7, #4]
 806f588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f58c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 806f58e:	e011      	b.n	806f5b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806f590:	687b      	ldr	r3, [r7, #4]
 806f592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806f594:	2b00      	cmp	r3, #0
 806f596:	d012      	beq.n	806f5be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806f598:	687b      	ldr	r3, [r7, #4]
 806f59a:	3324      	adds	r3, #36	; 0x24
 806f59c:	4618      	mov	r0, r3
 806f59e:	f000 fd7b 	bl	8070098 <xTaskRemoveFromEventList>
 806f5a2:	4603      	mov	r3, r0
 806f5a4:	2b00      	cmp	r3, #0
 806f5a6:	d001      	beq.n	806f5ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 806f5a8:	f000 fe52 	bl	8070250 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 806f5ac:	7bfb      	ldrb	r3, [r7, #15]
 806f5ae:	3b01      	subs	r3, #1
 806f5b0:	b2db      	uxtb	r3, r3
 806f5b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 806f5b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 806f5b8:	2b00      	cmp	r3, #0
 806f5ba:	dce9      	bgt.n	806f590 <prvUnlockQueue+0x16>
 806f5bc:	e000      	b.n	806f5c0 <prvUnlockQueue+0x46>
					break;
 806f5be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 806f5c0:	687b      	ldr	r3, [r7, #4]
 806f5c2:	22ff      	movs	r2, #255	; 0xff
 806f5c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 806f5c8:	f002 f87c 	bl	80716c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 806f5cc:	f002 f84a 	bl	8071664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 806f5d0:	687b      	ldr	r3, [r7, #4]
 806f5d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806f5d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 806f5d8:	e011      	b.n	806f5fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806f5da:	687b      	ldr	r3, [r7, #4]
 806f5dc:	691b      	ldr	r3, [r3, #16]
 806f5de:	2b00      	cmp	r3, #0
 806f5e0:	d012      	beq.n	806f608 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806f5e2:	687b      	ldr	r3, [r7, #4]
 806f5e4:	3310      	adds	r3, #16
 806f5e6:	4618      	mov	r0, r3
 806f5e8:	f000 fd56 	bl	8070098 <xTaskRemoveFromEventList>
 806f5ec:	4603      	mov	r3, r0
 806f5ee:	2b00      	cmp	r3, #0
 806f5f0:	d001      	beq.n	806f5f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 806f5f2:	f000 fe2d 	bl	8070250 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 806f5f6:	7bbb      	ldrb	r3, [r7, #14]
 806f5f8:	3b01      	subs	r3, #1
 806f5fa:	b2db      	uxtb	r3, r3
 806f5fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 806f5fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 806f602:	2b00      	cmp	r3, #0
 806f604:	dce9      	bgt.n	806f5da <prvUnlockQueue+0x60>
 806f606:	e000      	b.n	806f60a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 806f608:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 806f60a:	687b      	ldr	r3, [r7, #4]
 806f60c:	22ff      	movs	r2, #255	; 0xff
 806f60e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 806f612:	f002 f857 	bl	80716c4 <vPortExitCritical>
}
 806f616:	bf00      	nop
 806f618:	3710      	adds	r7, #16
 806f61a:	46bd      	mov	sp, r7
 806f61c:	bd80      	pop	{r7, pc}

0806f61e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 806f61e:	b580      	push	{r7, lr}
 806f620:	b084      	sub	sp, #16
 806f622:	af00      	add	r7, sp, #0
 806f624:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 806f626:	f002 f81d 	bl	8071664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 806f62a:	687b      	ldr	r3, [r7, #4]
 806f62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f62e:	2b00      	cmp	r3, #0
 806f630:	d102      	bne.n	806f638 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 806f632:	2301      	movs	r3, #1
 806f634:	60fb      	str	r3, [r7, #12]
 806f636:	e001      	b.n	806f63c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 806f638:	2300      	movs	r3, #0
 806f63a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 806f63c:	f002 f842 	bl	80716c4 <vPortExitCritical>

	return xReturn;
 806f640:	68fb      	ldr	r3, [r7, #12]
}
 806f642:	4618      	mov	r0, r3
 806f644:	3710      	adds	r7, #16
 806f646:	46bd      	mov	sp, r7
 806f648:	bd80      	pop	{r7, pc}

0806f64a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 806f64a:	b580      	push	{r7, lr}
 806f64c:	b084      	sub	sp, #16
 806f64e:	af00      	add	r7, sp, #0
 806f650:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 806f652:	f002 f807 	bl	8071664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 806f656:	687b      	ldr	r3, [r7, #4]
 806f658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806f65a:	687b      	ldr	r3, [r7, #4]
 806f65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f65e:	429a      	cmp	r2, r3
 806f660:	d102      	bne.n	806f668 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 806f662:	2301      	movs	r3, #1
 806f664:	60fb      	str	r3, [r7, #12]
 806f666:	e001      	b.n	806f66c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 806f668:	2300      	movs	r3, #0
 806f66a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 806f66c:	f002 f82a 	bl	80716c4 <vPortExitCritical>

	return xReturn;
 806f670:	68fb      	ldr	r3, [r7, #12]
}
 806f672:	4618      	mov	r0, r3
 806f674:	3710      	adds	r7, #16
 806f676:	46bd      	mov	sp, r7
 806f678:	bd80      	pop	{r7, pc}
	...

0806f67c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 806f67c:	b480      	push	{r7}
 806f67e:	b085      	sub	sp, #20
 806f680:	af00      	add	r7, sp, #0
 806f682:	6078      	str	r0, [r7, #4]
 806f684:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806f686:	2300      	movs	r3, #0
 806f688:	60fb      	str	r3, [r7, #12]
 806f68a:	e014      	b.n	806f6b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 806f68c:	4a0f      	ldr	r2, [pc, #60]	; (806f6cc <vQueueAddToRegistry+0x50>)
 806f68e:	68fb      	ldr	r3, [r7, #12]
 806f690:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 806f694:	2b00      	cmp	r3, #0
 806f696:	d10b      	bne.n	806f6b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 806f698:	490c      	ldr	r1, [pc, #48]	; (806f6cc <vQueueAddToRegistry+0x50>)
 806f69a:	68fb      	ldr	r3, [r7, #12]
 806f69c:	683a      	ldr	r2, [r7, #0]
 806f69e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 806f6a2:	4a0a      	ldr	r2, [pc, #40]	; (806f6cc <vQueueAddToRegistry+0x50>)
 806f6a4:	68fb      	ldr	r3, [r7, #12]
 806f6a6:	00db      	lsls	r3, r3, #3
 806f6a8:	4413      	add	r3, r2
 806f6aa:	687a      	ldr	r2, [r7, #4]
 806f6ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 806f6ae:	e006      	b.n	806f6be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806f6b0:	68fb      	ldr	r3, [r7, #12]
 806f6b2:	3301      	adds	r3, #1
 806f6b4:	60fb      	str	r3, [r7, #12]
 806f6b6:	68fb      	ldr	r3, [r7, #12]
 806f6b8:	2b07      	cmp	r3, #7
 806f6ba:	d9e7      	bls.n	806f68c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 806f6bc:	bf00      	nop
 806f6be:	bf00      	nop
 806f6c0:	3714      	adds	r7, #20
 806f6c2:	46bd      	mov	sp, r7
 806f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 806f6c8:	4770      	bx	lr
 806f6ca:	bf00      	nop
 806f6cc:	20005cc4 	.word	0x20005cc4

0806f6d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 806f6d0:	b480      	push	{r7}
 806f6d2:	b085      	sub	sp, #20
 806f6d4:	af00      	add	r7, sp, #0
 806f6d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806f6d8:	2300      	movs	r3, #0
 806f6da:	60fb      	str	r3, [r7, #12]
 806f6dc:	e016      	b.n	806f70c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 806f6de:	4a10      	ldr	r2, [pc, #64]	; (806f720 <vQueueUnregisterQueue+0x50>)
 806f6e0:	68fb      	ldr	r3, [r7, #12]
 806f6e2:	00db      	lsls	r3, r3, #3
 806f6e4:	4413      	add	r3, r2
 806f6e6:	685b      	ldr	r3, [r3, #4]
 806f6e8:	687a      	ldr	r2, [r7, #4]
 806f6ea:	429a      	cmp	r2, r3
 806f6ec:	d10b      	bne.n	806f706 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 806f6ee:	4a0c      	ldr	r2, [pc, #48]	; (806f720 <vQueueUnregisterQueue+0x50>)
 806f6f0:	68fb      	ldr	r3, [r7, #12]
 806f6f2:	2100      	movs	r1, #0
 806f6f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 806f6f8:	4a09      	ldr	r2, [pc, #36]	; (806f720 <vQueueUnregisterQueue+0x50>)
 806f6fa:	68fb      	ldr	r3, [r7, #12]
 806f6fc:	00db      	lsls	r3, r3, #3
 806f6fe:	4413      	add	r3, r2
 806f700:	2200      	movs	r2, #0
 806f702:	605a      	str	r2, [r3, #4]
				break;
 806f704:	e006      	b.n	806f714 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806f706:	68fb      	ldr	r3, [r7, #12]
 806f708:	3301      	adds	r3, #1
 806f70a:	60fb      	str	r3, [r7, #12]
 806f70c:	68fb      	ldr	r3, [r7, #12]
 806f70e:	2b07      	cmp	r3, #7
 806f710:	d9e5      	bls.n	806f6de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 806f712:	bf00      	nop
 806f714:	bf00      	nop
 806f716:	3714      	adds	r7, #20
 806f718:	46bd      	mov	sp, r7
 806f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806f71e:	4770      	bx	lr
 806f720:	20005cc4 	.word	0x20005cc4

0806f724 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 806f724:	b580      	push	{r7, lr}
 806f726:	b086      	sub	sp, #24
 806f728:	af00      	add	r7, sp, #0
 806f72a:	60f8      	str	r0, [r7, #12]
 806f72c:	60b9      	str	r1, [r7, #8]
 806f72e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 806f730:	68fb      	ldr	r3, [r7, #12]
 806f732:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 806f734:	f001 ff96 	bl	8071664 <vPortEnterCritical>
 806f738:	697b      	ldr	r3, [r7, #20]
 806f73a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806f73e:	b25b      	sxtb	r3, r3
 806f740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f744:	d103      	bne.n	806f74e <vQueueWaitForMessageRestricted+0x2a>
 806f746:	697b      	ldr	r3, [r7, #20]
 806f748:	2200      	movs	r2, #0
 806f74a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806f74e:	697b      	ldr	r3, [r7, #20]
 806f750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f754:	b25b      	sxtb	r3, r3
 806f756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f75a:	d103      	bne.n	806f764 <vQueueWaitForMessageRestricted+0x40>
 806f75c:	697b      	ldr	r3, [r7, #20]
 806f75e:	2200      	movs	r2, #0
 806f760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806f764:	f001 ffae 	bl	80716c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 806f768:	697b      	ldr	r3, [r7, #20]
 806f76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f76c:	2b00      	cmp	r3, #0
 806f76e:	d106      	bne.n	806f77e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 806f770:	697b      	ldr	r3, [r7, #20]
 806f772:	3324      	adds	r3, #36	; 0x24
 806f774:	687a      	ldr	r2, [r7, #4]
 806f776:	68b9      	ldr	r1, [r7, #8]
 806f778:	4618      	mov	r0, r3
 806f77a:	f000 fc61 	bl	8070040 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 806f77e:	6978      	ldr	r0, [r7, #20]
 806f780:	f7ff fefb 	bl	806f57a <prvUnlockQueue>
	}
 806f784:	bf00      	nop
 806f786:	3718      	adds	r7, #24
 806f788:	46bd      	mov	sp, r7
 806f78a:	bd80      	pop	{r7, pc}

0806f78c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 806f78c:	b580      	push	{r7, lr}
 806f78e:	b08e      	sub	sp, #56	; 0x38
 806f790:	af04      	add	r7, sp, #16
 806f792:	60f8      	str	r0, [r7, #12]
 806f794:	60b9      	str	r1, [r7, #8]
 806f796:	607a      	str	r2, [r7, #4]
 806f798:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 806f79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806f79c:	2b00      	cmp	r3, #0
 806f79e:	d10a      	bne.n	806f7b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 806f7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f7a4:	f383 8811 	msr	BASEPRI, r3
 806f7a8:	f3bf 8f6f 	isb	sy
 806f7ac:	f3bf 8f4f 	dsb	sy
 806f7b0:	623b      	str	r3, [r7, #32]
}
 806f7b2:	bf00      	nop
 806f7b4:	e7fe      	b.n	806f7b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 806f7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f7b8:	2b00      	cmp	r3, #0
 806f7ba:	d10a      	bne.n	806f7d2 <xTaskCreateStatic+0x46>
	__asm volatile
 806f7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f7c0:	f383 8811 	msr	BASEPRI, r3
 806f7c4:	f3bf 8f6f 	isb	sy
 806f7c8:	f3bf 8f4f 	dsb	sy
 806f7cc:	61fb      	str	r3, [r7, #28]
}
 806f7ce:	bf00      	nop
 806f7d0:	e7fe      	b.n	806f7d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 806f7d2:	23bc      	movs	r3, #188	; 0xbc
 806f7d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 806f7d6:	693b      	ldr	r3, [r7, #16]
 806f7d8:	2bbc      	cmp	r3, #188	; 0xbc
 806f7da:	d00a      	beq.n	806f7f2 <xTaskCreateStatic+0x66>
	__asm volatile
 806f7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f7e0:	f383 8811 	msr	BASEPRI, r3
 806f7e4:	f3bf 8f6f 	isb	sy
 806f7e8:	f3bf 8f4f 	dsb	sy
 806f7ec:	61bb      	str	r3, [r7, #24]
}
 806f7ee:	bf00      	nop
 806f7f0:	e7fe      	b.n	806f7f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 806f7f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 806f7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f7f6:	2b00      	cmp	r3, #0
 806f7f8:	d01e      	beq.n	806f838 <xTaskCreateStatic+0xac>
 806f7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806f7fc:	2b00      	cmp	r3, #0
 806f7fe:	d01b      	beq.n	806f838 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 806f800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f802:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 806f804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806f806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806f808:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 806f80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806f80c:	2202      	movs	r2, #2
 806f80e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 806f812:	2300      	movs	r3, #0
 806f814:	9303      	str	r3, [sp, #12]
 806f816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806f818:	9302      	str	r3, [sp, #8]
 806f81a:	f107 0314 	add.w	r3, r7, #20
 806f81e:	9301      	str	r3, [sp, #4]
 806f820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f822:	9300      	str	r3, [sp, #0]
 806f824:	683b      	ldr	r3, [r7, #0]
 806f826:	687a      	ldr	r2, [r7, #4]
 806f828:	68b9      	ldr	r1, [r7, #8]
 806f82a:	68f8      	ldr	r0, [r7, #12]
 806f82c:	f000 f850 	bl	806f8d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 806f830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806f832:	f000 f8f3 	bl	806fa1c <prvAddNewTaskToReadyList>
 806f836:	e001      	b.n	806f83c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 806f838:	2300      	movs	r3, #0
 806f83a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 806f83c:	697b      	ldr	r3, [r7, #20]
	}
 806f83e:	4618      	mov	r0, r3
 806f840:	3728      	adds	r7, #40	; 0x28
 806f842:	46bd      	mov	sp, r7
 806f844:	bd80      	pop	{r7, pc}

0806f846 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 806f846:	b580      	push	{r7, lr}
 806f848:	b08c      	sub	sp, #48	; 0x30
 806f84a:	af04      	add	r7, sp, #16
 806f84c:	60f8      	str	r0, [r7, #12]
 806f84e:	60b9      	str	r1, [r7, #8]
 806f850:	603b      	str	r3, [r7, #0]
 806f852:	4613      	mov	r3, r2
 806f854:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 806f856:	88fb      	ldrh	r3, [r7, #6]
 806f858:	009b      	lsls	r3, r3, #2
 806f85a:	4618      	mov	r0, r3
 806f85c:	f002 f824 	bl	80718a8 <pvPortMalloc>
 806f860:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 806f862:	697b      	ldr	r3, [r7, #20]
 806f864:	2b00      	cmp	r3, #0
 806f866:	d00e      	beq.n	806f886 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 806f868:	20bc      	movs	r0, #188	; 0xbc
 806f86a:	f002 f81d 	bl	80718a8 <pvPortMalloc>
 806f86e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 806f870:	69fb      	ldr	r3, [r7, #28]
 806f872:	2b00      	cmp	r3, #0
 806f874:	d003      	beq.n	806f87e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 806f876:	69fb      	ldr	r3, [r7, #28]
 806f878:	697a      	ldr	r2, [r7, #20]
 806f87a:	631a      	str	r2, [r3, #48]	; 0x30
 806f87c:	e005      	b.n	806f88a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 806f87e:	6978      	ldr	r0, [r7, #20]
 806f880:	f002 f8de 	bl	8071a40 <vPortFree>
 806f884:	e001      	b.n	806f88a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 806f886:	2300      	movs	r3, #0
 806f888:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 806f88a:	69fb      	ldr	r3, [r7, #28]
 806f88c:	2b00      	cmp	r3, #0
 806f88e:	d017      	beq.n	806f8c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806f890:	69fb      	ldr	r3, [r7, #28]
 806f892:	2200      	movs	r2, #0
 806f894:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 806f898:	88fa      	ldrh	r2, [r7, #6]
 806f89a:	2300      	movs	r3, #0
 806f89c:	9303      	str	r3, [sp, #12]
 806f89e:	69fb      	ldr	r3, [r7, #28]
 806f8a0:	9302      	str	r3, [sp, #8]
 806f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f8a4:	9301      	str	r3, [sp, #4]
 806f8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f8a8:	9300      	str	r3, [sp, #0]
 806f8aa:	683b      	ldr	r3, [r7, #0]
 806f8ac:	68b9      	ldr	r1, [r7, #8]
 806f8ae:	68f8      	ldr	r0, [r7, #12]
 806f8b0:	f000 f80e 	bl	806f8d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 806f8b4:	69f8      	ldr	r0, [r7, #28]
 806f8b6:	f000 f8b1 	bl	806fa1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 806f8ba:	2301      	movs	r3, #1
 806f8bc:	61bb      	str	r3, [r7, #24]
 806f8be:	e002      	b.n	806f8c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 806f8c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806f8c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 806f8c6:	69bb      	ldr	r3, [r7, #24]
	}
 806f8c8:	4618      	mov	r0, r3
 806f8ca:	3720      	adds	r7, #32
 806f8cc:	46bd      	mov	sp, r7
 806f8ce:	bd80      	pop	{r7, pc}

0806f8d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 806f8d0:	b580      	push	{r7, lr}
 806f8d2:	b088      	sub	sp, #32
 806f8d4:	af00      	add	r7, sp, #0
 806f8d6:	60f8      	str	r0, [r7, #12]
 806f8d8:	60b9      	str	r1, [r7, #8]
 806f8da:	607a      	str	r2, [r7, #4]
 806f8dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 806f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f8e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 806f8e2:	687b      	ldr	r3, [r7, #4]
 806f8e4:	009b      	lsls	r3, r3, #2
 806f8e6:	461a      	mov	r2, r3
 806f8e8:	21a5      	movs	r1, #165	; 0xa5
 806f8ea:	f002 faf8 	bl	8071ede <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 806f8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f8f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806f8f2:	687b      	ldr	r3, [r7, #4]
 806f8f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 806f8f8:	3b01      	subs	r3, #1
 806f8fa:	009b      	lsls	r3, r3, #2
 806f8fc:	4413      	add	r3, r2
 806f8fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 806f900:	69bb      	ldr	r3, [r7, #24]
 806f902:	f023 0307 	bic.w	r3, r3, #7
 806f906:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 806f908:	69bb      	ldr	r3, [r7, #24]
 806f90a:	f003 0307 	and.w	r3, r3, #7
 806f90e:	2b00      	cmp	r3, #0
 806f910:	d00a      	beq.n	806f928 <prvInitialiseNewTask+0x58>
	__asm volatile
 806f912:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f916:	f383 8811 	msr	BASEPRI, r3
 806f91a:	f3bf 8f6f 	isb	sy
 806f91e:	f3bf 8f4f 	dsb	sy
 806f922:	617b      	str	r3, [r7, #20]
}
 806f924:	bf00      	nop
 806f926:	e7fe      	b.n	806f926 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 806f928:	68bb      	ldr	r3, [r7, #8]
 806f92a:	2b00      	cmp	r3, #0
 806f92c:	d01f      	beq.n	806f96e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 806f92e:	2300      	movs	r3, #0
 806f930:	61fb      	str	r3, [r7, #28]
 806f932:	e012      	b.n	806f95a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 806f934:	68ba      	ldr	r2, [r7, #8]
 806f936:	69fb      	ldr	r3, [r7, #28]
 806f938:	4413      	add	r3, r2
 806f93a:	7819      	ldrb	r1, [r3, #0]
 806f93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806f93e:	69fb      	ldr	r3, [r7, #28]
 806f940:	4413      	add	r3, r2
 806f942:	3334      	adds	r3, #52	; 0x34
 806f944:	460a      	mov	r2, r1
 806f946:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 806f948:	68ba      	ldr	r2, [r7, #8]
 806f94a:	69fb      	ldr	r3, [r7, #28]
 806f94c:	4413      	add	r3, r2
 806f94e:	781b      	ldrb	r3, [r3, #0]
 806f950:	2b00      	cmp	r3, #0
 806f952:	d006      	beq.n	806f962 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 806f954:	69fb      	ldr	r3, [r7, #28]
 806f956:	3301      	adds	r3, #1
 806f958:	61fb      	str	r3, [r7, #28]
 806f95a:	69fb      	ldr	r3, [r7, #28]
 806f95c:	2b0f      	cmp	r3, #15
 806f95e:	d9e9      	bls.n	806f934 <prvInitialiseNewTask+0x64>
 806f960:	e000      	b.n	806f964 <prvInitialiseNewTask+0x94>
			{
				break;
 806f962:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 806f964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f966:	2200      	movs	r2, #0
 806f968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 806f96c:	e003      	b.n	806f976 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 806f96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f970:	2200      	movs	r2, #0
 806f972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 806f976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f978:	2b37      	cmp	r3, #55	; 0x37
 806f97a:	d901      	bls.n	806f980 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 806f97c:	2337      	movs	r3, #55	; 0x37
 806f97e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 806f980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806f984:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 806f986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806f98a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 806f98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f98e:	2200      	movs	r2, #0
 806f990:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 806f992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f994:	3304      	adds	r3, #4
 806f996:	4618      	mov	r0, r3
 806f998:	f7fe fda0 	bl	806e4dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 806f99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f99e:	3318      	adds	r3, #24
 806f9a0:	4618      	mov	r0, r3
 806f9a2:	f7fe fd9b 	bl	806e4dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 806f9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806f9aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806f9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f9ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 806f9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 806f9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806f9ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 806f9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9be:	2200      	movs	r2, #0
 806f9c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 806f9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9c6:	2200      	movs	r2, #0
 806f9c8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 806f9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9ce:	3354      	adds	r3, #84	; 0x54
 806f9d0:	2260      	movs	r2, #96	; 0x60
 806f9d2:	2100      	movs	r1, #0
 806f9d4:	4618      	mov	r0, r3
 806f9d6:	f002 fa82 	bl	8071ede <memset>
 806f9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9dc:	4a0c      	ldr	r2, [pc, #48]	; (806fa10 <prvInitialiseNewTask+0x140>)
 806f9de:	659a      	str	r2, [r3, #88]	; 0x58
 806f9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9e2:	4a0c      	ldr	r2, [pc, #48]	; (806fa14 <prvInitialiseNewTask+0x144>)
 806f9e4:	65da      	str	r2, [r3, #92]	; 0x5c
 806f9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9e8:	4a0b      	ldr	r2, [pc, #44]	; (806fa18 <prvInitialiseNewTask+0x148>)
 806f9ea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 806f9ec:	683a      	ldr	r2, [r7, #0]
 806f9ee:	68f9      	ldr	r1, [r7, #12]
 806f9f0:	69b8      	ldr	r0, [r7, #24]
 806f9f2:	f001 fd0b 	bl	807140c <pxPortInitialiseStack>
 806f9f6:	4602      	mov	r2, r0
 806f9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 806f9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f9fe:	2b00      	cmp	r3, #0
 806fa00:	d002      	beq.n	806fa08 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 806fa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806fa04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806fa06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 806fa08:	bf00      	nop
 806fa0a:	3720      	adds	r7, #32
 806fa0c:	46bd      	mov	sp, r7
 806fa0e:	bd80      	pop	{r7, pc}
 806fa10:	08076eb0 	.word	0x08076eb0
 806fa14:	08076ed0 	.word	0x08076ed0
 806fa18:	08076e90 	.word	0x08076e90

0806fa1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 806fa1c:	b580      	push	{r7, lr}
 806fa1e:	b082      	sub	sp, #8
 806fa20:	af00      	add	r7, sp, #0
 806fa22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 806fa24:	f001 fe1e 	bl	8071664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 806fa28:	4b2d      	ldr	r3, [pc, #180]	; (806fae0 <prvAddNewTaskToReadyList+0xc4>)
 806fa2a:	681b      	ldr	r3, [r3, #0]
 806fa2c:	3301      	adds	r3, #1
 806fa2e:	4a2c      	ldr	r2, [pc, #176]	; (806fae0 <prvAddNewTaskToReadyList+0xc4>)
 806fa30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 806fa32:	4b2c      	ldr	r3, [pc, #176]	; (806fae4 <prvAddNewTaskToReadyList+0xc8>)
 806fa34:	681b      	ldr	r3, [r3, #0]
 806fa36:	2b00      	cmp	r3, #0
 806fa38:	d109      	bne.n	806fa4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 806fa3a:	4a2a      	ldr	r2, [pc, #168]	; (806fae4 <prvAddNewTaskToReadyList+0xc8>)
 806fa3c:	687b      	ldr	r3, [r7, #4]
 806fa3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 806fa40:	4b27      	ldr	r3, [pc, #156]	; (806fae0 <prvAddNewTaskToReadyList+0xc4>)
 806fa42:	681b      	ldr	r3, [r3, #0]
 806fa44:	2b01      	cmp	r3, #1
 806fa46:	d110      	bne.n	806fa6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 806fa48:	f000 fc26 	bl	8070298 <prvInitialiseTaskLists>
 806fa4c:	e00d      	b.n	806fa6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 806fa4e:	4b26      	ldr	r3, [pc, #152]	; (806fae8 <prvAddNewTaskToReadyList+0xcc>)
 806fa50:	681b      	ldr	r3, [r3, #0]
 806fa52:	2b00      	cmp	r3, #0
 806fa54:	d109      	bne.n	806fa6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 806fa56:	4b23      	ldr	r3, [pc, #140]	; (806fae4 <prvAddNewTaskToReadyList+0xc8>)
 806fa58:	681b      	ldr	r3, [r3, #0]
 806fa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806fa5c:	687b      	ldr	r3, [r7, #4]
 806fa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806fa60:	429a      	cmp	r2, r3
 806fa62:	d802      	bhi.n	806fa6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 806fa64:	4a1f      	ldr	r2, [pc, #124]	; (806fae4 <prvAddNewTaskToReadyList+0xc8>)
 806fa66:	687b      	ldr	r3, [r7, #4]
 806fa68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 806fa6a:	4b20      	ldr	r3, [pc, #128]	; (806faec <prvAddNewTaskToReadyList+0xd0>)
 806fa6c:	681b      	ldr	r3, [r3, #0]
 806fa6e:	3301      	adds	r3, #1
 806fa70:	4a1e      	ldr	r2, [pc, #120]	; (806faec <prvAddNewTaskToReadyList+0xd0>)
 806fa72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 806fa74:	4b1d      	ldr	r3, [pc, #116]	; (806faec <prvAddNewTaskToReadyList+0xd0>)
 806fa76:	681a      	ldr	r2, [r3, #0]
 806fa78:	687b      	ldr	r3, [r7, #4]
 806fa7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 806fa7c:	687b      	ldr	r3, [r7, #4]
 806fa7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806fa80:	4b1b      	ldr	r3, [pc, #108]	; (806faf0 <prvAddNewTaskToReadyList+0xd4>)
 806fa82:	681b      	ldr	r3, [r3, #0]
 806fa84:	429a      	cmp	r2, r3
 806fa86:	d903      	bls.n	806fa90 <prvAddNewTaskToReadyList+0x74>
 806fa88:	687b      	ldr	r3, [r7, #4]
 806fa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806fa8c:	4a18      	ldr	r2, [pc, #96]	; (806faf0 <prvAddNewTaskToReadyList+0xd4>)
 806fa8e:	6013      	str	r3, [r2, #0]
 806fa90:	687b      	ldr	r3, [r7, #4]
 806fa92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806fa94:	4613      	mov	r3, r2
 806fa96:	009b      	lsls	r3, r3, #2
 806fa98:	4413      	add	r3, r2
 806fa9a:	009b      	lsls	r3, r3, #2
 806fa9c:	4a15      	ldr	r2, [pc, #84]	; (806faf4 <prvAddNewTaskToReadyList+0xd8>)
 806fa9e:	441a      	add	r2, r3
 806faa0:	687b      	ldr	r3, [r7, #4]
 806faa2:	3304      	adds	r3, #4
 806faa4:	4619      	mov	r1, r3
 806faa6:	4610      	mov	r0, r2
 806faa8:	f7fe fd25 	bl	806e4f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 806faac:	f001 fe0a 	bl	80716c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 806fab0:	4b0d      	ldr	r3, [pc, #52]	; (806fae8 <prvAddNewTaskToReadyList+0xcc>)
 806fab2:	681b      	ldr	r3, [r3, #0]
 806fab4:	2b00      	cmp	r3, #0
 806fab6:	d00e      	beq.n	806fad6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 806fab8:	4b0a      	ldr	r3, [pc, #40]	; (806fae4 <prvAddNewTaskToReadyList+0xc8>)
 806faba:	681b      	ldr	r3, [r3, #0]
 806fabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806fabe:	687b      	ldr	r3, [r7, #4]
 806fac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806fac2:	429a      	cmp	r2, r3
 806fac4:	d207      	bcs.n	806fad6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 806fac6:	4b0c      	ldr	r3, [pc, #48]	; (806faf8 <prvAddNewTaskToReadyList+0xdc>)
 806fac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806facc:	601a      	str	r2, [r3, #0]
 806face:	f3bf 8f4f 	dsb	sy
 806fad2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 806fad6:	bf00      	nop
 806fad8:	3708      	adds	r7, #8
 806fada:	46bd      	mov	sp, r7
 806fadc:	bd80      	pop	{r7, pc}
 806fade:	bf00      	nop
 806fae0:	200010a8 	.word	0x200010a8
 806fae4:	20000bd4 	.word	0x20000bd4
 806fae8:	200010b4 	.word	0x200010b4
 806faec:	200010c4 	.word	0x200010c4
 806faf0:	200010b0 	.word	0x200010b0
 806faf4:	20000bd8 	.word	0x20000bd8
 806faf8:	e000ed04 	.word	0xe000ed04

0806fafc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 806fafc:	b580      	push	{r7, lr}
 806fafe:	b084      	sub	sp, #16
 806fb00:	af00      	add	r7, sp, #0
 806fb02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 806fb04:	2300      	movs	r3, #0
 806fb06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 806fb08:	687b      	ldr	r3, [r7, #4]
 806fb0a:	2b00      	cmp	r3, #0
 806fb0c:	d017      	beq.n	806fb3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 806fb0e:	4b13      	ldr	r3, [pc, #76]	; (806fb5c <vTaskDelay+0x60>)
 806fb10:	681b      	ldr	r3, [r3, #0]
 806fb12:	2b00      	cmp	r3, #0
 806fb14:	d00a      	beq.n	806fb2c <vTaskDelay+0x30>
	__asm volatile
 806fb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fb1a:	f383 8811 	msr	BASEPRI, r3
 806fb1e:	f3bf 8f6f 	isb	sy
 806fb22:	f3bf 8f4f 	dsb	sy
 806fb26:	60bb      	str	r3, [r7, #8]
}
 806fb28:	bf00      	nop
 806fb2a:	e7fe      	b.n	806fb2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 806fb2c:	f000 f88a 	bl	806fc44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 806fb30:	2100      	movs	r1, #0
 806fb32:	6878      	ldr	r0, [r7, #4]
 806fb34:	f001 f80e 	bl	8070b54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 806fb38:	f000 f892 	bl	806fc60 <xTaskResumeAll>
 806fb3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 806fb3e:	68fb      	ldr	r3, [r7, #12]
 806fb40:	2b00      	cmp	r3, #0
 806fb42:	d107      	bne.n	806fb54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 806fb44:	4b06      	ldr	r3, [pc, #24]	; (806fb60 <vTaskDelay+0x64>)
 806fb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806fb4a:	601a      	str	r2, [r3, #0]
 806fb4c:	f3bf 8f4f 	dsb	sy
 806fb50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 806fb54:	bf00      	nop
 806fb56:	3710      	adds	r7, #16
 806fb58:	46bd      	mov	sp, r7
 806fb5a:	bd80      	pop	{r7, pc}
 806fb5c:	200010d0 	.word	0x200010d0
 806fb60:	e000ed04 	.word	0xe000ed04

0806fb64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 806fb64:	b580      	push	{r7, lr}
 806fb66:	b08a      	sub	sp, #40	; 0x28
 806fb68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 806fb6a:	2300      	movs	r3, #0
 806fb6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 806fb6e:	2300      	movs	r3, #0
 806fb70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 806fb72:	463a      	mov	r2, r7
 806fb74:	1d39      	adds	r1, r7, #4
 806fb76:	f107 0308 	add.w	r3, r7, #8
 806fb7a:	4618      	mov	r0, r3
 806fb7c:	f7fe fc5a 	bl	806e434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 806fb80:	6839      	ldr	r1, [r7, #0]
 806fb82:	687b      	ldr	r3, [r7, #4]
 806fb84:	68ba      	ldr	r2, [r7, #8]
 806fb86:	9202      	str	r2, [sp, #8]
 806fb88:	9301      	str	r3, [sp, #4]
 806fb8a:	2300      	movs	r3, #0
 806fb8c:	9300      	str	r3, [sp, #0]
 806fb8e:	2300      	movs	r3, #0
 806fb90:	460a      	mov	r2, r1
 806fb92:	4924      	ldr	r1, [pc, #144]	; (806fc24 <vTaskStartScheduler+0xc0>)
 806fb94:	4824      	ldr	r0, [pc, #144]	; (806fc28 <vTaskStartScheduler+0xc4>)
 806fb96:	f7ff fdf9 	bl	806f78c <xTaskCreateStatic>
 806fb9a:	4603      	mov	r3, r0
 806fb9c:	4a23      	ldr	r2, [pc, #140]	; (806fc2c <vTaskStartScheduler+0xc8>)
 806fb9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 806fba0:	4b22      	ldr	r3, [pc, #136]	; (806fc2c <vTaskStartScheduler+0xc8>)
 806fba2:	681b      	ldr	r3, [r3, #0]
 806fba4:	2b00      	cmp	r3, #0
 806fba6:	d002      	beq.n	806fbae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 806fba8:	2301      	movs	r3, #1
 806fbaa:	617b      	str	r3, [r7, #20]
 806fbac:	e001      	b.n	806fbb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 806fbae:	2300      	movs	r3, #0
 806fbb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 806fbb2:	697b      	ldr	r3, [r7, #20]
 806fbb4:	2b01      	cmp	r3, #1
 806fbb6:	d102      	bne.n	806fbbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 806fbb8:	f001 f820 	bl	8070bfc <xTimerCreateTimerTask>
 806fbbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 806fbbe:	697b      	ldr	r3, [r7, #20]
 806fbc0:	2b01      	cmp	r3, #1
 806fbc2:	d11b      	bne.n	806fbfc <vTaskStartScheduler+0x98>
	__asm volatile
 806fbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fbc8:	f383 8811 	msr	BASEPRI, r3
 806fbcc:	f3bf 8f6f 	isb	sy
 806fbd0:	f3bf 8f4f 	dsb	sy
 806fbd4:	613b      	str	r3, [r7, #16]
}
 806fbd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 806fbd8:	4b15      	ldr	r3, [pc, #84]	; (806fc30 <vTaskStartScheduler+0xcc>)
 806fbda:	681b      	ldr	r3, [r3, #0]
 806fbdc:	3354      	adds	r3, #84	; 0x54
 806fbde:	4a15      	ldr	r2, [pc, #84]	; (806fc34 <vTaskStartScheduler+0xd0>)
 806fbe0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 806fbe2:	4b15      	ldr	r3, [pc, #84]	; (806fc38 <vTaskStartScheduler+0xd4>)
 806fbe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806fbe8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 806fbea:	4b14      	ldr	r3, [pc, #80]	; (806fc3c <vTaskStartScheduler+0xd8>)
 806fbec:	2201      	movs	r2, #1
 806fbee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 806fbf0:	4b13      	ldr	r3, [pc, #76]	; (806fc40 <vTaskStartScheduler+0xdc>)
 806fbf2:	2200      	movs	r2, #0
 806fbf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 806fbf6:	f001 fc93 	bl	8071520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 806fbfa:	e00e      	b.n	806fc1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 806fbfc:	697b      	ldr	r3, [r7, #20]
 806fbfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806fc02:	d10a      	bne.n	806fc1a <vTaskStartScheduler+0xb6>
	__asm volatile
 806fc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fc08:	f383 8811 	msr	BASEPRI, r3
 806fc0c:	f3bf 8f6f 	isb	sy
 806fc10:	f3bf 8f4f 	dsb	sy
 806fc14:	60fb      	str	r3, [r7, #12]
}
 806fc16:	bf00      	nop
 806fc18:	e7fe      	b.n	806fc18 <vTaskStartScheduler+0xb4>
}
 806fc1a:	bf00      	nop
 806fc1c:	3718      	adds	r7, #24
 806fc1e:	46bd      	mov	sp, r7
 806fc20:	bd80      	pop	{r7, pc}
 806fc22:	bf00      	nop
 806fc24:	08076c9c 	.word	0x08076c9c
 806fc28:	08070269 	.word	0x08070269
 806fc2c:	200010cc 	.word	0x200010cc
 806fc30:	20000bd4 	.word	0x20000bd4
 806fc34:	20000028 	.word	0x20000028
 806fc38:	200010c8 	.word	0x200010c8
 806fc3c:	200010b4 	.word	0x200010b4
 806fc40:	200010ac 	.word	0x200010ac

0806fc44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 806fc44:	b480      	push	{r7}
 806fc46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 806fc48:	4b04      	ldr	r3, [pc, #16]	; (806fc5c <vTaskSuspendAll+0x18>)
 806fc4a:	681b      	ldr	r3, [r3, #0]
 806fc4c:	3301      	adds	r3, #1
 806fc4e:	4a03      	ldr	r2, [pc, #12]	; (806fc5c <vTaskSuspendAll+0x18>)
 806fc50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 806fc52:	bf00      	nop
 806fc54:	46bd      	mov	sp, r7
 806fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 806fc5a:	4770      	bx	lr
 806fc5c:	200010d0 	.word	0x200010d0

0806fc60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 806fc60:	b580      	push	{r7, lr}
 806fc62:	b084      	sub	sp, #16
 806fc64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 806fc66:	2300      	movs	r3, #0
 806fc68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 806fc6a:	2300      	movs	r3, #0
 806fc6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 806fc6e:	4b42      	ldr	r3, [pc, #264]	; (806fd78 <xTaskResumeAll+0x118>)
 806fc70:	681b      	ldr	r3, [r3, #0]
 806fc72:	2b00      	cmp	r3, #0
 806fc74:	d10a      	bne.n	806fc8c <xTaskResumeAll+0x2c>
	__asm volatile
 806fc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fc7a:	f383 8811 	msr	BASEPRI, r3
 806fc7e:	f3bf 8f6f 	isb	sy
 806fc82:	f3bf 8f4f 	dsb	sy
 806fc86:	603b      	str	r3, [r7, #0]
}
 806fc88:	bf00      	nop
 806fc8a:	e7fe      	b.n	806fc8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 806fc8c:	f001 fcea 	bl	8071664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 806fc90:	4b39      	ldr	r3, [pc, #228]	; (806fd78 <xTaskResumeAll+0x118>)
 806fc92:	681b      	ldr	r3, [r3, #0]
 806fc94:	3b01      	subs	r3, #1
 806fc96:	4a38      	ldr	r2, [pc, #224]	; (806fd78 <xTaskResumeAll+0x118>)
 806fc98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 806fc9a:	4b37      	ldr	r3, [pc, #220]	; (806fd78 <xTaskResumeAll+0x118>)
 806fc9c:	681b      	ldr	r3, [r3, #0]
 806fc9e:	2b00      	cmp	r3, #0
 806fca0:	d162      	bne.n	806fd68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 806fca2:	4b36      	ldr	r3, [pc, #216]	; (806fd7c <xTaskResumeAll+0x11c>)
 806fca4:	681b      	ldr	r3, [r3, #0]
 806fca6:	2b00      	cmp	r3, #0
 806fca8:	d05e      	beq.n	806fd68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 806fcaa:	e02f      	b.n	806fd0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806fcac:	4b34      	ldr	r3, [pc, #208]	; (806fd80 <xTaskResumeAll+0x120>)
 806fcae:	68db      	ldr	r3, [r3, #12]
 806fcb0:	68db      	ldr	r3, [r3, #12]
 806fcb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 806fcb4:	68fb      	ldr	r3, [r7, #12]
 806fcb6:	3318      	adds	r3, #24
 806fcb8:	4618      	mov	r0, r3
 806fcba:	f7fe fc79 	bl	806e5b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 806fcbe:	68fb      	ldr	r3, [r7, #12]
 806fcc0:	3304      	adds	r3, #4
 806fcc2:	4618      	mov	r0, r3
 806fcc4:	f7fe fc74 	bl	806e5b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 806fcc8:	68fb      	ldr	r3, [r7, #12]
 806fcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806fccc:	4b2d      	ldr	r3, [pc, #180]	; (806fd84 <xTaskResumeAll+0x124>)
 806fcce:	681b      	ldr	r3, [r3, #0]
 806fcd0:	429a      	cmp	r2, r3
 806fcd2:	d903      	bls.n	806fcdc <xTaskResumeAll+0x7c>
 806fcd4:	68fb      	ldr	r3, [r7, #12]
 806fcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806fcd8:	4a2a      	ldr	r2, [pc, #168]	; (806fd84 <xTaskResumeAll+0x124>)
 806fcda:	6013      	str	r3, [r2, #0]
 806fcdc:	68fb      	ldr	r3, [r7, #12]
 806fcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806fce0:	4613      	mov	r3, r2
 806fce2:	009b      	lsls	r3, r3, #2
 806fce4:	4413      	add	r3, r2
 806fce6:	009b      	lsls	r3, r3, #2
 806fce8:	4a27      	ldr	r2, [pc, #156]	; (806fd88 <xTaskResumeAll+0x128>)
 806fcea:	441a      	add	r2, r3
 806fcec:	68fb      	ldr	r3, [r7, #12]
 806fcee:	3304      	adds	r3, #4
 806fcf0:	4619      	mov	r1, r3
 806fcf2:	4610      	mov	r0, r2
 806fcf4:	f7fe fbff 	bl	806e4f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 806fcf8:	68fb      	ldr	r3, [r7, #12]
 806fcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806fcfc:	4b23      	ldr	r3, [pc, #140]	; (806fd8c <xTaskResumeAll+0x12c>)
 806fcfe:	681b      	ldr	r3, [r3, #0]
 806fd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806fd02:	429a      	cmp	r2, r3
 806fd04:	d302      	bcc.n	806fd0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 806fd06:	4b22      	ldr	r3, [pc, #136]	; (806fd90 <xTaskResumeAll+0x130>)
 806fd08:	2201      	movs	r2, #1
 806fd0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 806fd0c:	4b1c      	ldr	r3, [pc, #112]	; (806fd80 <xTaskResumeAll+0x120>)
 806fd0e:	681b      	ldr	r3, [r3, #0]
 806fd10:	2b00      	cmp	r3, #0
 806fd12:	d1cb      	bne.n	806fcac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 806fd14:	68fb      	ldr	r3, [r7, #12]
 806fd16:	2b00      	cmp	r3, #0
 806fd18:	d001      	beq.n	806fd1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 806fd1a:	f000 fb5f 	bl	80703dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 806fd1e:	4b1d      	ldr	r3, [pc, #116]	; (806fd94 <xTaskResumeAll+0x134>)
 806fd20:	681b      	ldr	r3, [r3, #0]
 806fd22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 806fd24:	687b      	ldr	r3, [r7, #4]
 806fd26:	2b00      	cmp	r3, #0
 806fd28:	d010      	beq.n	806fd4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 806fd2a:	f000 f847 	bl	806fdbc <xTaskIncrementTick>
 806fd2e:	4603      	mov	r3, r0
 806fd30:	2b00      	cmp	r3, #0
 806fd32:	d002      	beq.n	806fd3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 806fd34:	4b16      	ldr	r3, [pc, #88]	; (806fd90 <xTaskResumeAll+0x130>)
 806fd36:	2201      	movs	r2, #1
 806fd38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 806fd3a:	687b      	ldr	r3, [r7, #4]
 806fd3c:	3b01      	subs	r3, #1
 806fd3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 806fd40:	687b      	ldr	r3, [r7, #4]
 806fd42:	2b00      	cmp	r3, #0
 806fd44:	d1f1      	bne.n	806fd2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 806fd46:	4b13      	ldr	r3, [pc, #76]	; (806fd94 <xTaskResumeAll+0x134>)
 806fd48:	2200      	movs	r2, #0
 806fd4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 806fd4c:	4b10      	ldr	r3, [pc, #64]	; (806fd90 <xTaskResumeAll+0x130>)
 806fd4e:	681b      	ldr	r3, [r3, #0]
 806fd50:	2b00      	cmp	r3, #0
 806fd52:	d009      	beq.n	806fd68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 806fd54:	2301      	movs	r3, #1
 806fd56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 806fd58:	4b0f      	ldr	r3, [pc, #60]	; (806fd98 <xTaskResumeAll+0x138>)
 806fd5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806fd5e:	601a      	str	r2, [r3, #0]
 806fd60:	f3bf 8f4f 	dsb	sy
 806fd64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 806fd68:	f001 fcac 	bl	80716c4 <vPortExitCritical>

	return xAlreadyYielded;
 806fd6c:	68bb      	ldr	r3, [r7, #8]
}
 806fd6e:	4618      	mov	r0, r3
 806fd70:	3710      	adds	r7, #16
 806fd72:	46bd      	mov	sp, r7
 806fd74:	bd80      	pop	{r7, pc}
 806fd76:	bf00      	nop
 806fd78:	200010d0 	.word	0x200010d0
 806fd7c:	200010a8 	.word	0x200010a8
 806fd80:	20001068 	.word	0x20001068
 806fd84:	200010b0 	.word	0x200010b0
 806fd88:	20000bd8 	.word	0x20000bd8
 806fd8c:	20000bd4 	.word	0x20000bd4
 806fd90:	200010bc 	.word	0x200010bc
 806fd94:	200010b8 	.word	0x200010b8
 806fd98:	e000ed04 	.word	0xe000ed04

0806fd9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 806fd9c:	b480      	push	{r7}
 806fd9e:	b083      	sub	sp, #12
 806fda0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 806fda2:	4b05      	ldr	r3, [pc, #20]	; (806fdb8 <xTaskGetTickCount+0x1c>)
 806fda4:	681b      	ldr	r3, [r3, #0]
 806fda6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 806fda8:	687b      	ldr	r3, [r7, #4]
}
 806fdaa:	4618      	mov	r0, r3
 806fdac:	370c      	adds	r7, #12
 806fdae:	46bd      	mov	sp, r7
 806fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 806fdb4:	4770      	bx	lr
 806fdb6:	bf00      	nop
 806fdb8:	200010ac 	.word	0x200010ac

0806fdbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 806fdbc:	b580      	push	{r7, lr}
 806fdbe:	b086      	sub	sp, #24
 806fdc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 806fdc2:	2300      	movs	r3, #0
 806fdc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 806fdc6:	4b4f      	ldr	r3, [pc, #316]	; (806ff04 <xTaskIncrementTick+0x148>)
 806fdc8:	681b      	ldr	r3, [r3, #0]
 806fdca:	2b00      	cmp	r3, #0
 806fdcc:	f040 808f 	bne.w	806feee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 806fdd0:	4b4d      	ldr	r3, [pc, #308]	; (806ff08 <xTaskIncrementTick+0x14c>)
 806fdd2:	681b      	ldr	r3, [r3, #0]
 806fdd4:	3301      	adds	r3, #1
 806fdd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 806fdd8:	4a4b      	ldr	r2, [pc, #300]	; (806ff08 <xTaskIncrementTick+0x14c>)
 806fdda:	693b      	ldr	r3, [r7, #16]
 806fddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 806fdde:	693b      	ldr	r3, [r7, #16]
 806fde0:	2b00      	cmp	r3, #0
 806fde2:	d120      	bne.n	806fe26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 806fde4:	4b49      	ldr	r3, [pc, #292]	; (806ff0c <xTaskIncrementTick+0x150>)
 806fde6:	681b      	ldr	r3, [r3, #0]
 806fde8:	681b      	ldr	r3, [r3, #0]
 806fdea:	2b00      	cmp	r3, #0
 806fdec:	d00a      	beq.n	806fe04 <xTaskIncrementTick+0x48>
	__asm volatile
 806fdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fdf2:	f383 8811 	msr	BASEPRI, r3
 806fdf6:	f3bf 8f6f 	isb	sy
 806fdfa:	f3bf 8f4f 	dsb	sy
 806fdfe:	603b      	str	r3, [r7, #0]
}
 806fe00:	bf00      	nop
 806fe02:	e7fe      	b.n	806fe02 <xTaskIncrementTick+0x46>
 806fe04:	4b41      	ldr	r3, [pc, #260]	; (806ff0c <xTaskIncrementTick+0x150>)
 806fe06:	681b      	ldr	r3, [r3, #0]
 806fe08:	60fb      	str	r3, [r7, #12]
 806fe0a:	4b41      	ldr	r3, [pc, #260]	; (806ff10 <xTaskIncrementTick+0x154>)
 806fe0c:	681b      	ldr	r3, [r3, #0]
 806fe0e:	4a3f      	ldr	r2, [pc, #252]	; (806ff0c <xTaskIncrementTick+0x150>)
 806fe10:	6013      	str	r3, [r2, #0]
 806fe12:	4a3f      	ldr	r2, [pc, #252]	; (806ff10 <xTaskIncrementTick+0x154>)
 806fe14:	68fb      	ldr	r3, [r7, #12]
 806fe16:	6013      	str	r3, [r2, #0]
 806fe18:	4b3e      	ldr	r3, [pc, #248]	; (806ff14 <xTaskIncrementTick+0x158>)
 806fe1a:	681b      	ldr	r3, [r3, #0]
 806fe1c:	3301      	adds	r3, #1
 806fe1e:	4a3d      	ldr	r2, [pc, #244]	; (806ff14 <xTaskIncrementTick+0x158>)
 806fe20:	6013      	str	r3, [r2, #0]
 806fe22:	f000 fadb 	bl	80703dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 806fe26:	4b3c      	ldr	r3, [pc, #240]	; (806ff18 <xTaskIncrementTick+0x15c>)
 806fe28:	681b      	ldr	r3, [r3, #0]
 806fe2a:	693a      	ldr	r2, [r7, #16]
 806fe2c:	429a      	cmp	r2, r3
 806fe2e:	d349      	bcc.n	806fec4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 806fe30:	4b36      	ldr	r3, [pc, #216]	; (806ff0c <xTaskIncrementTick+0x150>)
 806fe32:	681b      	ldr	r3, [r3, #0]
 806fe34:	681b      	ldr	r3, [r3, #0]
 806fe36:	2b00      	cmp	r3, #0
 806fe38:	d104      	bne.n	806fe44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806fe3a:	4b37      	ldr	r3, [pc, #220]	; (806ff18 <xTaskIncrementTick+0x15c>)
 806fe3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806fe40:	601a      	str	r2, [r3, #0]
					break;
 806fe42:	e03f      	b.n	806fec4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806fe44:	4b31      	ldr	r3, [pc, #196]	; (806ff0c <xTaskIncrementTick+0x150>)
 806fe46:	681b      	ldr	r3, [r3, #0]
 806fe48:	68db      	ldr	r3, [r3, #12]
 806fe4a:	68db      	ldr	r3, [r3, #12]
 806fe4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 806fe4e:	68bb      	ldr	r3, [r7, #8]
 806fe50:	685b      	ldr	r3, [r3, #4]
 806fe52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 806fe54:	693a      	ldr	r2, [r7, #16]
 806fe56:	687b      	ldr	r3, [r7, #4]
 806fe58:	429a      	cmp	r2, r3
 806fe5a:	d203      	bcs.n	806fe64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 806fe5c:	4a2e      	ldr	r2, [pc, #184]	; (806ff18 <xTaskIncrementTick+0x15c>)
 806fe5e:	687b      	ldr	r3, [r7, #4]
 806fe60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 806fe62:	e02f      	b.n	806fec4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 806fe64:	68bb      	ldr	r3, [r7, #8]
 806fe66:	3304      	adds	r3, #4
 806fe68:	4618      	mov	r0, r3
 806fe6a:	f7fe fba1 	bl	806e5b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 806fe6e:	68bb      	ldr	r3, [r7, #8]
 806fe70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806fe72:	2b00      	cmp	r3, #0
 806fe74:	d004      	beq.n	806fe80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 806fe76:	68bb      	ldr	r3, [r7, #8]
 806fe78:	3318      	adds	r3, #24
 806fe7a:	4618      	mov	r0, r3
 806fe7c:	f7fe fb98 	bl	806e5b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 806fe80:	68bb      	ldr	r3, [r7, #8]
 806fe82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806fe84:	4b25      	ldr	r3, [pc, #148]	; (806ff1c <xTaskIncrementTick+0x160>)
 806fe86:	681b      	ldr	r3, [r3, #0]
 806fe88:	429a      	cmp	r2, r3
 806fe8a:	d903      	bls.n	806fe94 <xTaskIncrementTick+0xd8>
 806fe8c:	68bb      	ldr	r3, [r7, #8]
 806fe8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806fe90:	4a22      	ldr	r2, [pc, #136]	; (806ff1c <xTaskIncrementTick+0x160>)
 806fe92:	6013      	str	r3, [r2, #0]
 806fe94:	68bb      	ldr	r3, [r7, #8]
 806fe96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806fe98:	4613      	mov	r3, r2
 806fe9a:	009b      	lsls	r3, r3, #2
 806fe9c:	4413      	add	r3, r2
 806fe9e:	009b      	lsls	r3, r3, #2
 806fea0:	4a1f      	ldr	r2, [pc, #124]	; (806ff20 <xTaskIncrementTick+0x164>)
 806fea2:	441a      	add	r2, r3
 806fea4:	68bb      	ldr	r3, [r7, #8]
 806fea6:	3304      	adds	r3, #4
 806fea8:	4619      	mov	r1, r3
 806feaa:	4610      	mov	r0, r2
 806feac:	f7fe fb23 	bl	806e4f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 806feb0:	68bb      	ldr	r3, [r7, #8]
 806feb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806feb4:	4b1b      	ldr	r3, [pc, #108]	; (806ff24 <xTaskIncrementTick+0x168>)
 806feb6:	681b      	ldr	r3, [r3, #0]
 806feb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806feba:	429a      	cmp	r2, r3
 806febc:	d3b8      	bcc.n	806fe30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 806febe:	2301      	movs	r3, #1
 806fec0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 806fec2:	e7b5      	b.n	806fe30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 806fec4:	4b17      	ldr	r3, [pc, #92]	; (806ff24 <xTaskIncrementTick+0x168>)
 806fec6:	681b      	ldr	r3, [r3, #0]
 806fec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 806feca:	4915      	ldr	r1, [pc, #84]	; (806ff20 <xTaskIncrementTick+0x164>)
 806fecc:	4613      	mov	r3, r2
 806fece:	009b      	lsls	r3, r3, #2
 806fed0:	4413      	add	r3, r2
 806fed2:	009b      	lsls	r3, r3, #2
 806fed4:	440b      	add	r3, r1
 806fed6:	681b      	ldr	r3, [r3, #0]
 806fed8:	2b01      	cmp	r3, #1
 806feda:	d901      	bls.n	806fee0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 806fedc:	2301      	movs	r3, #1
 806fede:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 806fee0:	4b11      	ldr	r3, [pc, #68]	; (806ff28 <xTaskIncrementTick+0x16c>)
 806fee2:	681b      	ldr	r3, [r3, #0]
 806fee4:	2b00      	cmp	r3, #0
 806fee6:	d007      	beq.n	806fef8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 806fee8:	2301      	movs	r3, #1
 806feea:	617b      	str	r3, [r7, #20]
 806feec:	e004      	b.n	806fef8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 806feee:	4b0f      	ldr	r3, [pc, #60]	; (806ff2c <xTaskIncrementTick+0x170>)
 806fef0:	681b      	ldr	r3, [r3, #0]
 806fef2:	3301      	adds	r3, #1
 806fef4:	4a0d      	ldr	r2, [pc, #52]	; (806ff2c <xTaskIncrementTick+0x170>)
 806fef6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 806fef8:	697b      	ldr	r3, [r7, #20]
}
 806fefa:	4618      	mov	r0, r3
 806fefc:	3718      	adds	r7, #24
 806fefe:	46bd      	mov	sp, r7
 806ff00:	bd80      	pop	{r7, pc}
 806ff02:	bf00      	nop
 806ff04:	200010d0 	.word	0x200010d0
 806ff08:	200010ac 	.word	0x200010ac
 806ff0c:	20001060 	.word	0x20001060
 806ff10:	20001064 	.word	0x20001064
 806ff14:	200010c0 	.word	0x200010c0
 806ff18:	200010c8 	.word	0x200010c8
 806ff1c:	200010b0 	.word	0x200010b0
 806ff20:	20000bd8 	.word	0x20000bd8
 806ff24:	20000bd4 	.word	0x20000bd4
 806ff28:	200010bc 	.word	0x200010bc
 806ff2c:	200010b8 	.word	0x200010b8

0806ff30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 806ff30:	b480      	push	{r7}
 806ff32:	b085      	sub	sp, #20
 806ff34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 806ff36:	4b2a      	ldr	r3, [pc, #168]	; (806ffe0 <vTaskSwitchContext+0xb0>)
 806ff38:	681b      	ldr	r3, [r3, #0]
 806ff3a:	2b00      	cmp	r3, #0
 806ff3c:	d003      	beq.n	806ff46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 806ff3e:	4b29      	ldr	r3, [pc, #164]	; (806ffe4 <vTaskSwitchContext+0xb4>)
 806ff40:	2201      	movs	r2, #1
 806ff42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 806ff44:	e046      	b.n	806ffd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 806ff46:	4b27      	ldr	r3, [pc, #156]	; (806ffe4 <vTaskSwitchContext+0xb4>)
 806ff48:	2200      	movs	r2, #0
 806ff4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 806ff4c:	4b26      	ldr	r3, [pc, #152]	; (806ffe8 <vTaskSwitchContext+0xb8>)
 806ff4e:	681b      	ldr	r3, [r3, #0]
 806ff50:	60fb      	str	r3, [r7, #12]
 806ff52:	e010      	b.n	806ff76 <vTaskSwitchContext+0x46>
 806ff54:	68fb      	ldr	r3, [r7, #12]
 806ff56:	2b00      	cmp	r3, #0
 806ff58:	d10a      	bne.n	806ff70 <vTaskSwitchContext+0x40>
	__asm volatile
 806ff5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ff5e:	f383 8811 	msr	BASEPRI, r3
 806ff62:	f3bf 8f6f 	isb	sy
 806ff66:	f3bf 8f4f 	dsb	sy
 806ff6a:	607b      	str	r3, [r7, #4]
}
 806ff6c:	bf00      	nop
 806ff6e:	e7fe      	b.n	806ff6e <vTaskSwitchContext+0x3e>
 806ff70:	68fb      	ldr	r3, [r7, #12]
 806ff72:	3b01      	subs	r3, #1
 806ff74:	60fb      	str	r3, [r7, #12]
 806ff76:	491d      	ldr	r1, [pc, #116]	; (806ffec <vTaskSwitchContext+0xbc>)
 806ff78:	68fa      	ldr	r2, [r7, #12]
 806ff7a:	4613      	mov	r3, r2
 806ff7c:	009b      	lsls	r3, r3, #2
 806ff7e:	4413      	add	r3, r2
 806ff80:	009b      	lsls	r3, r3, #2
 806ff82:	440b      	add	r3, r1
 806ff84:	681b      	ldr	r3, [r3, #0]
 806ff86:	2b00      	cmp	r3, #0
 806ff88:	d0e4      	beq.n	806ff54 <vTaskSwitchContext+0x24>
 806ff8a:	68fa      	ldr	r2, [r7, #12]
 806ff8c:	4613      	mov	r3, r2
 806ff8e:	009b      	lsls	r3, r3, #2
 806ff90:	4413      	add	r3, r2
 806ff92:	009b      	lsls	r3, r3, #2
 806ff94:	4a15      	ldr	r2, [pc, #84]	; (806ffec <vTaskSwitchContext+0xbc>)
 806ff96:	4413      	add	r3, r2
 806ff98:	60bb      	str	r3, [r7, #8]
 806ff9a:	68bb      	ldr	r3, [r7, #8]
 806ff9c:	685b      	ldr	r3, [r3, #4]
 806ff9e:	685a      	ldr	r2, [r3, #4]
 806ffa0:	68bb      	ldr	r3, [r7, #8]
 806ffa2:	605a      	str	r2, [r3, #4]
 806ffa4:	68bb      	ldr	r3, [r7, #8]
 806ffa6:	685a      	ldr	r2, [r3, #4]
 806ffa8:	68bb      	ldr	r3, [r7, #8]
 806ffaa:	3308      	adds	r3, #8
 806ffac:	429a      	cmp	r2, r3
 806ffae:	d104      	bne.n	806ffba <vTaskSwitchContext+0x8a>
 806ffb0:	68bb      	ldr	r3, [r7, #8]
 806ffb2:	685b      	ldr	r3, [r3, #4]
 806ffb4:	685a      	ldr	r2, [r3, #4]
 806ffb6:	68bb      	ldr	r3, [r7, #8]
 806ffb8:	605a      	str	r2, [r3, #4]
 806ffba:	68bb      	ldr	r3, [r7, #8]
 806ffbc:	685b      	ldr	r3, [r3, #4]
 806ffbe:	68db      	ldr	r3, [r3, #12]
 806ffc0:	4a0b      	ldr	r2, [pc, #44]	; (806fff0 <vTaskSwitchContext+0xc0>)
 806ffc2:	6013      	str	r3, [r2, #0]
 806ffc4:	4a08      	ldr	r2, [pc, #32]	; (806ffe8 <vTaskSwitchContext+0xb8>)
 806ffc6:	68fb      	ldr	r3, [r7, #12]
 806ffc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 806ffca:	4b09      	ldr	r3, [pc, #36]	; (806fff0 <vTaskSwitchContext+0xc0>)
 806ffcc:	681b      	ldr	r3, [r3, #0]
 806ffce:	3354      	adds	r3, #84	; 0x54
 806ffd0:	4a08      	ldr	r2, [pc, #32]	; (806fff4 <vTaskSwitchContext+0xc4>)
 806ffd2:	6013      	str	r3, [r2, #0]
}
 806ffd4:	bf00      	nop
 806ffd6:	3714      	adds	r7, #20
 806ffd8:	46bd      	mov	sp, r7
 806ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ffde:	4770      	bx	lr
 806ffe0:	200010d0 	.word	0x200010d0
 806ffe4:	200010bc 	.word	0x200010bc
 806ffe8:	200010b0 	.word	0x200010b0
 806ffec:	20000bd8 	.word	0x20000bd8
 806fff0:	20000bd4 	.word	0x20000bd4
 806fff4:	20000028 	.word	0x20000028

0806fff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 806fff8:	b580      	push	{r7, lr}
 806fffa:	b084      	sub	sp, #16
 806fffc:	af00      	add	r7, sp, #0
 806fffe:	6078      	str	r0, [r7, #4]
 8070000:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8070002:	687b      	ldr	r3, [r7, #4]
 8070004:	2b00      	cmp	r3, #0
 8070006:	d10a      	bne.n	807001e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8070008:	f04f 0350 	mov.w	r3, #80	; 0x50
 807000c:	f383 8811 	msr	BASEPRI, r3
 8070010:	f3bf 8f6f 	isb	sy
 8070014:	f3bf 8f4f 	dsb	sy
 8070018:	60fb      	str	r3, [r7, #12]
}
 807001a:	bf00      	nop
 807001c:	e7fe      	b.n	807001c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 807001e:	4b07      	ldr	r3, [pc, #28]	; (807003c <vTaskPlaceOnEventList+0x44>)
 8070020:	681b      	ldr	r3, [r3, #0]
 8070022:	3318      	adds	r3, #24
 8070024:	4619      	mov	r1, r3
 8070026:	6878      	ldr	r0, [r7, #4]
 8070028:	f7fe fa89 	bl	806e53e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 807002c:	2101      	movs	r1, #1
 807002e:	6838      	ldr	r0, [r7, #0]
 8070030:	f000 fd90 	bl	8070b54 <prvAddCurrentTaskToDelayedList>
}
 8070034:	bf00      	nop
 8070036:	3710      	adds	r7, #16
 8070038:	46bd      	mov	sp, r7
 807003a:	bd80      	pop	{r7, pc}
 807003c:	20000bd4 	.word	0x20000bd4

08070040 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8070040:	b580      	push	{r7, lr}
 8070042:	b086      	sub	sp, #24
 8070044:	af00      	add	r7, sp, #0
 8070046:	60f8      	str	r0, [r7, #12]
 8070048:	60b9      	str	r1, [r7, #8]
 807004a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 807004c:	68fb      	ldr	r3, [r7, #12]
 807004e:	2b00      	cmp	r3, #0
 8070050:	d10a      	bne.n	8070068 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8070052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070056:	f383 8811 	msr	BASEPRI, r3
 807005a:	f3bf 8f6f 	isb	sy
 807005e:	f3bf 8f4f 	dsb	sy
 8070062:	617b      	str	r3, [r7, #20]
}
 8070064:	bf00      	nop
 8070066:	e7fe      	b.n	8070066 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8070068:	4b0a      	ldr	r3, [pc, #40]	; (8070094 <vTaskPlaceOnEventListRestricted+0x54>)
 807006a:	681b      	ldr	r3, [r3, #0]
 807006c:	3318      	adds	r3, #24
 807006e:	4619      	mov	r1, r3
 8070070:	68f8      	ldr	r0, [r7, #12]
 8070072:	f7fe fa40 	bl	806e4f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8070076:	687b      	ldr	r3, [r7, #4]
 8070078:	2b00      	cmp	r3, #0
 807007a:	d002      	beq.n	8070082 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 807007c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8070080:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8070082:	6879      	ldr	r1, [r7, #4]
 8070084:	68b8      	ldr	r0, [r7, #8]
 8070086:	f000 fd65 	bl	8070b54 <prvAddCurrentTaskToDelayedList>
	}
 807008a:	bf00      	nop
 807008c:	3718      	adds	r7, #24
 807008e:	46bd      	mov	sp, r7
 8070090:	bd80      	pop	{r7, pc}
 8070092:	bf00      	nop
 8070094:	20000bd4 	.word	0x20000bd4

08070098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8070098:	b580      	push	{r7, lr}
 807009a:	b086      	sub	sp, #24
 807009c:	af00      	add	r7, sp, #0
 807009e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80700a0:	687b      	ldr	r3, [r7, #4]
 80700a2:	68db      	ldr	r3, [r3, #12]
 80700a4:	68db      	ldr	r3, [r3, #12]
 80700a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80700a8:	693b      	ldr	r3, [r7, #16]
 80700aa:	2b00      	cmp	r3, #0
 80700ac:	d10a      	bne.n	80700c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80700ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80700b2:	f383 8811 	msr	BASEPRI, r3
 80700b6:	f3bf 8f6f 	isb	sy
 80700ba:	f3bf 8f4f 	dsb	sy
 80700be:	60fb      	str	r3, [r7, #12]
}
 80700c0:	bf00      	nop
 80700c2:	e7fe      	b.n	80700c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80700c4:	693b      	ldr	r3, [r7, #16]
 80700c6:	3318      	adds	r3, #24
 80700c8:	4618      	mov	r0, r3
 80700ca:	f7fe fa71 	bl	806e5b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80700ce:	4b1e      	ldr	r3, [pc, #120]	; (8070148 <xTaskRemoveFromEventList+0xb0>)
 80700d0:	681b      	ldr	r3, [r3, #0]
 80700d2:	2b00      	cmp	r3, #0
 80700d4:	d11d      	bne.n	8070112 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80700d6:	693b      	ldr	r3, [r7, #16]
 80700d8:	3304      	adds	r3, #4
 80700da:	4618      	mov	r0, r3
 80700dc:	f7fe fa68 	bl	806e5b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80700e0:	693b      	ldr	r3, [r7, #16]
 80700e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80700e4:	4b19      	ldr	r3, [pc, #100]	; (807014c <xTaskRemoveFromEventList+0xb4>)
 80700e6:	681b      	ldr	r3, [r3, #0]
 80700e8:	429a      	cmp	r2, r3
 80700ea:	d903      	bls.n	80700f4 <xTaskRemoveFromEventList+0x5c>
 80700ec:	693b      	ldr	r3, [r7, #16]
 80700ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80700f0:	4a16      	ldr	r2, [pc, #88]	; (807014c <xTaskRemoveFromEventList+0xb4>)
 80700f2:	6013      	str	r3, [r2, #0]
 80700f4:	693b      	ldr	r3, [r7, #16]
 80700f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80700f8:	4613      	mov	r3, r2
 80700fa:	009b      	lsls	r3, r3, #2
 80700fc:	4413      	add	r3, r2
 80700fe:	009b      	lsls	r3, r3, #2
 8070100:	4a13      	ldr	r2, [pc, #76]	; (8070150 <xTaskRemoveFromEventList+0xb8>)
 8070102:	441a      	add	r2, r3
 8070104:	693b      	ldr	r3, [r7, #16]
 8070106:	3304      	adds	r3, #4
 8070108:	4619      	mov	r1, r3
 807010a:	4610      	mov	r0, r2
 807010c:	f7fe f9f3 	bl	806e4f6 <vListInsertEnd>
 8070110:	e005      	b.n	807011e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8070112:	693b      	ldr	r3, [r7, #16]
 8070114:	3318      	adds	r3, #24
 8070116:	4619      	mov	r1, r3
 8070118:	480e      	ldr	r0, [pc, #56]	; (8070154 <xTaskRemoveFromEventList+0xbc>)
 807011a:	f7fe f9ec 	bl	806e4f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 807011e:	693b      	ldr	r3, [r7, #16]
 8070120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070122:	4b0d      	ldr	r3, [pc, #52]	; (8070158 <xTaskRemoveFromEventList+0xc0>)
 8070124:	681b      	ldr	r3, [r3, #0]
 8070126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070128:	429a      	cmp	r2, r3
 807012a:	d905      	bls.n	8070138 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 807012c:	2301      	movs	r3, #1
 807012e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8070130:	4b0a      	ldr	r3, [pc, #40]	; (807015c <xTaskRemoveFromEventList+0xc4>)
 8070132:	2201      	movs	r2, #1
 8070134:	601a      	str	r2, [r3, #0]
 8070136:	e001      	b.n	807013c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8070138:	2300      	movs	r3, #0
 807013a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 807013c:	697b      	ldr	r3, [r7, #20]
}
 807013e:	4618      	mov	r0, r3
 8070140:	3718      	adds	r7, #24
 8070142:	46bd      	mov	sp, r7
 8070144:	bd80      	pop	{r7, pc}
 8070146:	bf00      	nop
 8070148:	200010d0 	.word	0x200010d0
 807014c:	200010b0 	.word	0x200010b0
 8070150:	20000bd8 	.word	0x20000bd8
 8070154:	20001068 	.word	0x20001068
 8070158:	20000bd4 	.word	0x20000bd4
 807015c:	200010bc 	.word	0x200010bc

08070160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8070160:	b480      	push	{r7}
 8070162:	b083      	sub	sp, #12
 8070164:	af00      	add	r7, sp, #0
 8070166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8070168:	4b06      	ldr	r3, [pc, #24]	; (8070184 <vTaskInternalSetTimeOutState+0x24>)
 807016a:	681a      	ldr	r2, [r3, #0]
 807016c:	687b      	ldr	r3, [r7, #4]
 807016e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8070170:	4b05      	ldr	r3, [pc, #20]	; (8070188 <vTaskInternalSetTimeOutState+0x28>)
 8070172:	681a      	ldr	r2, [r3, #0]
 8070174:	687b      	ldr	r3, [r7, #4]
 8070176:	605a      	str	r2, [r3, #4]
}
 8070178:	bf00      	nop
 807017a:	370c      	adds	r7, #12
 807017c:	46bd      	mov	sp, r7
 807017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070182:	4770      	bx	lr
 8070184:	200010c0 	.word	0x200010c0
 8070188:	200010ac 	.word	0x200010ac

0807018c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 807018c:	b580      	push	{r7, lr}
 807018e:	b088      	sub	sp, #32
 8070190:	af00      	add	r7, sp, #0
 8070192:	6078      	str	r0, [r7, #4]
 8070194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8070196:	687b      	ldr	r3, [r7, #4]
 8070198:	2b00      	cmp	r3, #0
 807019a:	d10a      	bne.n	80701b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 807019c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80701a0:	f383 8811 	msr	BASEPRI, r3
 80701a4:	f3bf 8f6f 	isb	sy
 80701a8:	f3bf 8f4f 	dsb	sy
 80701ac:	613b      	str	r3, [r7, #16]
}
 80701ae:	bf00      	nop
 80701b0:	e7fe      	b.n	80701b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80701b2:	683b      	ldr	r3, [r7, #0]
 80701b4:	2b00      	cmp	r3, #0
 80701b6:	d10a      	bne.n	80701ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80701b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80701bc:	f383 8811 	msr	BASEPRI, r3
 80701c0:	f3bf 8f6f 	isb	sy
 80701c4:	f3bf 8f4f 	dsb	sy
 80701c8:	60fb      	str	r3, [r7, #12]
}
 80701ca:	bf00      	nop
 80701cc:	e7fe      	b.n	80701cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80701ce:	f001 fa49 	bl	8071664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80701d2:	4b1d      	ldr	r3, [pc, #116]	; (8070248 <xTaskCheckForTimeOut+0xbc>)
 80701d4:	681b      	ldr	r3, [r3, #0]
 80701d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80701d8:	687b      	ldr	r3, [r7, #4]
 80701da:	685b      	ldr	r3, [r3, #4]
 80701dc:	69ba      	ldr	r2, [r7, #24]
 80701de:	1ad3      	subs	r3, r2, r3
 80701e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80701e2:	683b      	ldr	r3, [r7, #0]
 80701e4:	681b      	ldr	r3, [r3, #0]
 80701e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80701ea:	d102      	bne.n	80701f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80701ec:	2300      	movs	r3, #0
 80701ee:	61fb      	str	r3, [r7, #28]
 80701f0:	e023      	b.n	807023a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80701f2:	687b      	ldr	r3, [r7, #4]
 80701f4:	681a      	ldr	r2, [r3, #0]
 80701f6:	4b15      	ldr	r3, [pc, #84]	; (807024c <xTaskCheckForTimeOut+0xc0>)
 80701f8:	681b      	ldr	r3, [r3, #0]
 80701fa:	429a      	cmp	r2, r3
 80701fc:	d007      	beq.n	807020e <xTaskCheckForTimeOut+0x82>
 80701fe:	687b      	ldr	r3, [r7, #4]
 8070200:	685b      	ldr	r3, [r3, #4]
 8070202:	69ba      	ldr	r2, [r7, #24]
 8070204:	429a      	cmp	r2, r3
 8070206:	d302      	bcc.n	807020e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8070208:	2301      	movs	r3, #1
 807020a:	61fb      	str	r3, [r7, #28]
 807020c:	e015      	b.n	807023a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 807020e:	683b      	ldr	r3, [r7, #0]
 8070210:	681b      	ldr	r3, [r3, #0]
 8070212:	697a      	ldr	r2, [r7, #20]
 8070214:	429a      	cmp	r2, r3
 8070216:	d20b      	bcs.n	8070230 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8070218:	683b      	ldr	r3, [r7, #0]
 807021a:	681a      	ldr	r2, [r3, #0]
 807021c:	697b      	ldr	r3, [r7, #20]
 807021e:	1ad2      	subs	r2, r2, r3
 8070220:	683b      	ldr	r3, [r7, #0]
 8070222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8070224:	6878      	ldr	r0, [r7, #4]
 8070226:	f7ff ff9b 	bl	8070160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 807022a:	2300      	movs	r3, #0
 807022c:	61fb      	str	r3, [r7, #28]
 807022e:	e004      	b.n	807023a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8070230:	683b      	ldr	r3, [r7, #0]
 8070232:	2200      	movs	r2, #0
 8070234:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8070236:	2301      	movs	r3, #1
 8070238:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 807023a:	f001 fa43 	bl	80716c4 <vPortExitCritical>

	return xReturn;
 807023e:	69fb      	ldr	r3, [r7, #28]
}
 8070240:	4618      	mov	r0, r3
 8070242:	3720      	adds	r7, #32
 8070244:	46bd      	mov	sp, r7
 8070246:	bd80      	pop	{r7, pc}
 8070248:	200010ac 	.word	0x200010ac
 807024c:	200010c0 	.word	0x200010c0

08070250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8070250:	b480      	push	{r7}
 8070252:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8070254:	4b03      	ldr	r3, [pc, #12]	; (8070264 <vTaskMissedYield+0x14>)
 8070256:	2201      	movs	r2, #1
 8070258:	601a      	str	r2, [r3, #0]
}
 807025a:	bf00      	nop
 807025c:	46bd      	mov	sp, r7
 807025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070262:	4770      	bx	lr
 8070264:	200010bc 	.word	0x200010bc

08070268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8070268:	b580      	push	{r7, lr}
 807026a:	b082      	sub	sp, #8
 807026c:	af00      	add	r7, sp, #0
 807026e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8070270:	f000 f852 	bl	8070318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8070274:	4b06      	ldr	r3, [pc, #24]	; (8070290 <prvIdleTask+0x28>)
 8070276:	681b      	ldr	r3, [r3, #0]
 8070278:	2b01      	cmp	r3, #1
 807027a:	d9f9      	bls.n	8070270 <prvIdleTask+0x8>
			{
				taskYIELD();
 807027c:	4b05      	ldr	r3, [pc, #20]	; (8070294 <prvIdleTask+0x2c>)
 807027e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8070282:	601a      	str	r2, [r3, #0]
 8070284:	f3bf 8f4f 	dsb	sy
 8070288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 807028c:	e7f0      	b.n	8070270 <prvIdleTask+0x8>
 807028e:	bf00      	nop
 8070290:	20000bd8 	.word	0x20000bd8
 8070294:	e000ed04 	.word	0xe000ed04

08070298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8070298:	b580      	push	{r7, lr}
 807029a:	b082      	sub	sp, #8
 807029c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 807029e:	2300      	movs	r3, #0
 80702a0:	607b      	str	r3, [r7, #4]
 80702a2:	e00c      	b.n	80702be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80702a4:	687a      	ldr	r2, [r7, #4]
 80702a6:	4613      	mov	r3, r2
 80702a8:	009b      	lsls	r3, r3, #2
 80702aa:	4413      	add	r3, r2
 80702ac:	009b      	lsls	r3, r3, #2
 80702ae:	4a12      	ldr	r2, [pc, #72]	; (80702f8 <prvInitialiseTaskLists+0x60>)
 80702b0:	4413      	add	r3, r2
 80702b2:	4618      	mov	r0, r3
 80702b4:	f7fe f8f2 	bl	806e49c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80702b8:	687b      	ldr	r3, [r7, #4]
 80702ba:	3301      	adds	r3, #1
 80702bc:	607b      	str	r3, [r7, #4]
 80702be:	687b      	ldr	r3, [r7, #4]
 80702c0:	2b37      	cmp	r3, #55	; 0x37
 80702c2:	d9ef      	bls.n	80702a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80702c4:	480d      	ldr	r0, [pc, #52]	; (80702fc <prvInitialiseTaskLists+0x64>)
 80702c6:	f7fe f8e9 	bl	806e49c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80702ca:	480d      	ldr	r0, [pc, #52]	; (8070300 <prvInitialiseTaskLists+0x68>)
 80702cc:	f7fe f8e6 	bl	806e49c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80702d0:	480c      	ldr	r0, [pc, #48]	; (8070304 <prvInitialiseTaskLists+0x6c>)
 80702d2:	f7fe f8e3 	bl	806e49c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80702d6:	480c      	ldr	r0, [pc, #48]	; (8070308 <prvInitialiseTaskLists+0x70>)
 80702d8:	f7fe f8e0 	bl	806e49c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80702dc:	480b      	ldr	r0, [pc, #44]	; (807030c <prvInitialiseTaskLists+0x74>)
 80702de:	f7fe f8dd 	bl	806e49c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80702e2:	4b0b      	ldr	r3, [pc, #44]	; (8070310 <prvInitialiseTaskLists+0x78>)
 80702e4:	4a05      	ldr	r2, [pc, #20]	; (80702fc <prvInitialiseTaskLists+0x64>)
 80702e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80702e8:	4b0a      	ldr	r3, [pc, #40]	; (8070314 <prvInitialiseTaskLists+0x7c>)
 80702ea:	4a05      	ldr	r2, [pc, #20]	; (8070300 <prvInitialiseTaskLists+0x68>)
 80702ec:	601a      	str	r2, [r3, #0]
}
 80702ee:	bf00      	nop
 80702f0:	3708      	adds	r7, #8
 80702f2:	46bd      	mov	sp, r7
 80702f4:	bd80      	pop	{r7, pc}
 80702f6:	bf00      	nop
 80702f8:	20000bd8 	.word	0x20000bd8
 80702fc:	20001038 	.word	0x20001038
 8070300:	2000104c 	.word	0x2000104c
 8070304:	20001068 	.word	0x20001068
 8070308:	2000107c 	.word	0x2000107c
 807030c:	20001094 	.word	0x20001094
 8070310:	20001060 	.word	0x20001060
 8070314:	20001064 	.word	0x20001064

08070318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8070318:	b580      	push	{r7, lr}
 807031a:	b082      	sub	sp, #8
 807031c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 807031e:	e019      	b.n	8070354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8070320:	f001 f9a0 	bl	8071664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070324:	4b10      	ldr	r3, [pc, #64]	; (8070368 <prvCheckTasksWaitingTermination+0x50>)
 8070326:	68db      	ldr	r3, [r3, #12]
 8070328:	68db      	ldr	r3, [r3, #12]
 807032a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 807032c:	687b      	ldr	r3, [r7, #4]
 807032e:	3304      	adds	r3, #4
 8070330:	4618      	mov	r0, r3
 8070332:	f7fe f93d 	bl	806e5b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8070336:	4b0d      	ldr	r3, [pc, #52]	; (807036c <prvCheckTasksWaitingTermination+0x54>)
 8070338:	681b      	ldr	r3, [r3, #0]
 807033a:	3b01      	subs	r3, #1
 807033c:	4a0b      	ldr	r2, [pc, #44]	; (807036c <prvCheckTasksWaitingTermination+0x54>)
 807033e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8070340:	4b0b      	ldr	r3, [pc, #44]	; (8070370 <prvCheckTasksWaitingTermination+0x58>)
 8070342:	681b      	ldr	r3, [r3, #0]
 8070344:	3b01      	subs	r3, #1
 8070346:	4a0a      	ldr	r2, [pc, #40]	; (8070370 <prvCheckTasksWaitingTermination+0x58>)
 8070348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 807034a:	f001 f9bb 	bl	80716c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 807034e:	6878      	ldr	r0, [r7, #4]
 8070350:	f000 f810 	bl	8070374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8070354:	4b06      	ldr	r3, [pc, #24]	; (8070370 <prvCheckTasksWaitingTermination+0x58>)
 8070356:	681b      	ldr	r3, [r3, #0]
 8070358:	2b00      	cmp	r3, #0
 807035a:	d1e1      	bne.n	8070320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 807035c:	bf00      	nop
 807035e:	bf00      	nop
 8070360:	3708      	adds	r7, #8
 8070362:	46bd      	mov	sp, r7
 8070364:	bd80      	pop	{r7, pc}
 8070366:	bf00      	nop
 8070368:	2000107c 	.word	0x2000107c
 807036c:	200010a8 	.word	0x200010a8
 8070370:	20001090 	.word	0x20001090

08070374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8070374:	b580      	push	{r7, lr}
 8070376:	b084      	sub	sp, #16
 8070378:	af00      	add	r7, sp, #0
 807037a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 807037c:	687b      	ldr	r3, [r7, #4]
 807037e:	3354      	adds	r3, #84	; 0x54
 8070380:	4618      	mov	r0, r3
 8070382:	f002 fc97 	bl	8072cb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8070386:	687b      	ldr	r3, [r7, #4]
 8070388:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 807038c:	2b00      	cmp	r3, #0
 807038e:	d108      	bne.n	80703a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8070390:	687b      	ldr	r3, [r7, #4]
 8070392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8070394:	4618      	mov	r0, r3
 8070396:	f001 fb53 	bl	8071a40 <vPortFree>
				vPortFree( pxTCB );
 807039a:	6878      	ldr	r0, [r7, #4]
 807039c:	f001 fb50 	bl	8071a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80703a0:	e018      	b.n	80703d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80703a2:	687b      	ldr	r3, [r7, #4]
 80703a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80703a8:	2b01      	cmp	r3, #1
 80703aa:	d103      	bne.n	80703b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80703ac:	6878      	ldr	r0, [r7, #4]
 80703ae:	f001 fb47 	bl	8071a40 <vPortFree>
	}
 80703b2:	e00f      	b.n	80703d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80703b4:	687b      	ldr	r3, [r7, #4]
 80703b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80703ba:	2b02      	cmp	r3, #2
 80703bc:	d00a      	beq.n	80703d4 <prvDeleteTCB+0x60>
	__asm volatile
 80703be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80703c2:	f383 8811 	msr	BASEPRI, r3
 80703c6:	f3bf 8f6f 	isb	sy
 80703ca:	f3bf 8f4f 	dsb	sy
 80703ce:	60fb      	str	r3, [r7, #12]
}
 80703d0:	bf00      	nop
 80703d2:	e7fe      	b.n	80703d2 <prvDeleteTCB+0x5e>
	}
 80703d4:	bf00      	nop
 80703d6:	3710      	adds	r7, #16
 80703d8:	46bd      	mov	sp, r7
 80703da:	bd80      	pop	{r7, pc}

080703dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80703dc:	b480      	push	{r7}
 80703de:	b083      	sub	sp, #12
 80703e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80703e2:	4b0c      	ldr	r3, [pc, #48]	; (8070414 <prvResetNextTaskUnblockTime+0x38>)
 80703e4:	681b      	ldr	r3, [r3, #0]
 80703e6:	681b      	ldr	r3, [r3, #0]
 80703e8:	2b00      	cmp	r3, #0
 80703ea:	d104      	bne.n	80703f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80703ec:	4b0a      	ldr	r3, [pc, #40]	; (8070418 <prvResetNextTaskUnblockTime+0x3c>)
 80703ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80703f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80703f4:	e008      	b.n	8070408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80703f6:	4b07      	ldr	r3, [pc, #28]	; (8070414 <prvResetNextTaskUnblockTime+0x38>)
 80703f8:	681b      	ldr	r3, [r3, #0]
 80703fa:	68db      	ldr	r3, [r3, #12]
 80703fc:	68db      	ldr	r3, [r3, #12]
 80703fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8070400:	687b      	ldr	r3, [r7, #4]
 8070402:	685b      	ldr	r3, [r3, #4]
 8070404:	4a04      	ldr	r2, [pc, #16]	; (8070418 <prvResetNextTaskUnblockTime+0x3c>)
 8070406:	6013      	str	r3, [r2, #0]
}
 8070408:	bf00      	nop
 807040a:	370c      	adds	r7, #12
 807040c:	46bd      	mov	sp, r7
 807040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070412:	4770      	bx	lr
 8070414:	20001060 	.word	0x20001060
 8070418:	200010c8 	.word	0x200010c8

0807041c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 807041c:	b480      	push	{r7}
 807041e:	b083      	sub	sp, #12
 8070420:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8070422:	4b05      	ldr	r3, [pc, #20]	; (8070438 <xTaskGetCurrentTaskHandle+0x1c>)
 8070424:	681b      	ldr	r3, [r3, #0]
 8070426:	607b      	str	r3, [r7, #4]

		return xReturn;
 8070428:	687b      	ldr	r3, [r7, #4]
	}
 807042a:	4618      	mov	r0, r3
 807042c:	370c      	adds	r7, #12
 807042e:	46bd      	mov	sp, r7
 8070430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070434:	4770      	bx	lr
 8070436:	bf00      	nop
 8070438:	20000bd4 	.word	0x20000bd4

0807043c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 807043c:	b480      	push	{r7}
 807043e:	b083      	sub	sp, #12
 8070440:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8070442:	4b0b      	ldr	r3, [pc, #44]	; (8070470 <xTaskGetSchedulerState+0x34>)
 8070444:	681b      	ldr	r3, [r3, #0]
 8070446:	2b00      	cmp	r3, #0
 8070448:	d102      	bne.n	8070450 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 807044a:	2301      	movs	r3, #1
 807044c:	607b      	str	r3, [r7, #4]
 807044e:	e008      	b.n	8070462 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8070450:	4b08      	ldr	r3, [pc, #32]	; (8070474 <xTaskGetSchedulerState+0x38>)
 8070452:	681b      	ldr	r3, [r3, #0]
 8070454:	2b00      	cmp	r3, #0
 8070456:	d102      	bne.n	807045e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8070458:	2302      	movs	r3, #2
 807045a:	607b      	str	r3, [r7, #4]
 807045c:	e001      	b.n	8070462 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 807045e:	2300      	movs	r3, #0
 8070460:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8070462:	687b      	ldr	r3, [r7, #4]
	}
 8070464:	4618      	mov	r0, r3
 8070466:	370c      	adds	r7, #12
 8070468:	46bd      	mov	sp, r7
 807046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807046e:	4770      	bx	lr
 8070470:	200010b4 	.word	0x200010b4
 8070474:	200010d0 	.word	0x200010d0

08070478 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8070478:	b580      	push	{r7, lr}
 807047a:	b084      	sub	sp, #16
 807047c:	af00      	add	r7, sp, #0
 807047e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8070480:	687b      	ldr	r3, [r7, #4]
 8070482:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8070484:	2300      	movs	r3, #0
 8070486:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8070488:	687b      	ldr	r3, [r7, #4]
 807048a:	2b00      	cmp	r3, #0
 807048c:	d051      	beq.n	8070532 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 807048e:	68bb      	ldr	r3, [r7, #8]
 8070490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070492:	4b2a      	ldr	r3, [pc, #168]	; (807053c <xTaskPriorityInherit+0xc4>)
 8070494:	681b      	ldr	r3, [r3, #0]
 8070496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070498:	429a      	cmp	r2, r3
 807049a:	d241      	bcs.n	8070520 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 807049c:	68bb      	ldr	r3, [r7, #8]
 807049e:	699b      	ldr	r3, [r3, #24]
 80704a0:	2b00      	cmp	r3, #0
 80704a2:	db06      	blt.n	80704b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80704a4:	4b25      	ldr	r3, [pc, #148]	; (807053c <xTaskPriorityInherit+0xc4>)
 80704a6:	681b      	ldr	r3, [r3, #0]
 80704a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80704aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80704ae:	68bb      	ldr	r3, [r7, #8]
 80704b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80704b2:	68bb      	ldr	r3, [r7, #8]
 80704b4:	6959      	ldr	r1, [r3, #20]
 80704b6:	68bb      	ldr	r3, [r7, #8]
 80704b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80704ba:	4613      	mov	r3, r2
 80704bc:	009b      	lsls	r3, r3, #2
 80704be:	4413      	add	r3, r2
 80704c0:	009b      	lsls	r3, r3, #2
 80704c2:	4a1f      	ldr	r2, [pc, #124]	; (8070540 <xTaskPriorityInherit+0xc8>)
 80704c4:	4413      	add	r3, r2
 80704c6:	4299      	cmp	r1, r3
 80704c8:	d122      	bne.n	8070510 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80704ca:	68bb      	ldr	r3, [r7, #8]
 80704cc:	3304      	adds	r3, #4
 80704ce:	4618      	mov	r0, r3
 80704d0:	f7fe f86e 	bl	806e5b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80704d4:	4b19      	ldr	r3, [pc, #100]	; (807053c <xTaskPriorityInherit+0xc4>)
 80704d6:	681b      	ldr	r3, [r3, #0]
 80704d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80704da:	68bb      	ldr	r3, [r7, #8]
 80704dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80704de:	68bb      	ldr	r3, [r7, #8]
 80704e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80704e2:	4b18      	ldr	r3, [pc, #96]	; (8070544 <xTaskPriorityInherit+0xcc>)
 80704e4:	681b      	ldr	r3, [r3, #0]
 80704e6:	429a      	cmp	r2, r3
 80704e8:	d903      	bls.n	80704f2 <xTaskPriorityInherit+0x7a>
 80704ea:	68bb      	ldr	r3, [r7, #8]
 80704ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80704ee:	4a15      	ldr	r2, [pc, #84]	; (8070544 <xTaskPriorityInherit+0xcc>)
 80704f0:	6013      	str	r3, [r2, #0]
 80704f2:	68bb      	ldr	r3, [r7, #8]
 80704f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80704f6:	4613      	mov	r3, r2
 80704f8:	009b      	lsls	r3, r3, #2
 80704fa:	4413      	add	r3, r2
 80704fc:	009b      	lsls	r3, r3, #2
 80704fe:	4a10      	ldr	r2, [pc, #64]	; (8070540 <xTaskPriorityInherit+0xc8>)
 8070500:	441a      	add	r2, r3
 8070502:	68bb      	ldr	r3, [r7, #8]
 8070504:	3304      	adds	r3, #4
 8070506:	4619      	mov	r1, r3
 8070508:	4610      	mov	r0, r2
 807050a:	f7fd fff4 	bl	806e4f6 <vListInsertEnd>
 807050e:	e004      	b.n	807051a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8070510:	4b0a      	ldr	r3, [pc, #40]	; (807053c <xTaskPriorityInherit+0xc4>)
 8070512:	681b      	ldr	r3, [r3, #0]
 8070514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070516:	68bb      	ldr	r3, [r7, #8]
 8070518:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 807051a:	2301      	movs	r3, #1
 807051c:	60fb      	str	r3, [r7, #12]
 807051e:	e008      	b.n	8070532 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8070520:	68bb      	ldr	r3, [r7, #8]
 8070522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8070524:	4b05      	ldr	r3, [pc, #20]	; (807053c <xTaskPriorityInherit+0xc4>)
 8070526:	681b      	ldr	r3, [r3, #0]
 8070528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807052a:	429a      	cmp	r2, r3
 807052c:	d201      	bcs.n	8070532 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 807052e:	2301      	movs	r3, #1
 8070530:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8070532:	68fb      	ldr	r3, [r7, #12]
	}
 8070534:	4618      	mov	r0, r3
 8070536:	3710      	adds	r7, #16
 8070538:	46bd      	mov	sp, r7
 807053a:	bd80      	pop	{r7, pc}
 807053c:	20000bd4 	.word	0x20000bd4
 8070540:	20000bd8 	.word	0x20000bd8
 8070544:	200010b0 	.word	0x200010b0

08070548 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8070548:	b580      	push	{r7, lr}
 807054a:	b086      	sub	sp, #24
 807054c:	af00      	add	r7, sp, #0
 807054e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8070550:	687b      	ldr	r3, [r7, #4]
 8070552:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8070554:	2300      	movs	r3, #0
 8070556:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8070558:	687b      	ldr	r3, [r7, #4]
 807055a:	2b00      	cmp	r3, #0
 807055c:	d056      	beq.n	807060c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 807055e:	4b2e      	ldr	r3, [pc, #184]	; (8070618 <xTaskPriorityDisinherit+0xd0>)
 8070560:	681b      	ldr	r3, [r3, #0]
 8070562:	693a      	ldr	r2, [r7, #16]
 8070564:	429a      	cmp	r2, r3
 8070566:	d00a      	beq.n	807057e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8070568:	f04f 0350 	mov.w	r3, #80	; 0x50
 807056c:	f383 8811 	msr	BASEPRI, r3
 8070570:	f3bf 8f6f 	isb	sy
 8070574:	f3bf 8f4f 	dsb	sy
 8070578:	60fb      	str	r3, [r7, #12]
}
 807057a:	bf00      	nop
 807057c:	e7fe      	b.n	807057c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 807057e:	693b      	ldr	r3, [r7, #16]
 8070580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070582:	2b00      	cmp	r3, #0
 8070584:	d10a      	bne.n	807059c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8070586:	f04f 0350 	mov.w	r3, #80	; 0x50
 807058a:	f383 8811 	msr	BASEPRI, r3
 807058e:	f3bf 8f6f 	isb	sy
 8070592:	f3bf 8f4f 	dsb	sy
 8070596:	60bb      	str	r3, [r7, #8]
}
 8070598:	bf00      	nop
 807059a:	e7fe      	b.n	807059a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 807059c:	693b      	ldr	r3, [r7, #16]
 807059e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80705a0:	1e5a      	subs	r2, r3, #1
 80705a2:	693b      	ldr	r3, [r7, #16]
 80705a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80705a6:	693b      	ldr	r3, [r7, #16]
 80705a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80705aa:	693b      	ldr	r3, [r7, #16]
 80705ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80705ae:	429a      	cmp	r2, r3
 80705b0:	d02c      	beq.n	807060c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80705b2:	693b      	ldr	r3, [r7, #16]
 80705b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80705b6:	2b00      	cmp	r3, #0
 80705b8:	d128      	bne.n	807060c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80705ba:	693b      	ldr	r3, [r7, #16]
 80705bc:	3304      	adds	r3, #4
 80705be:	4618      	mov	r0, r3
 80705c0:	f7fd fff6 	bl	806e5b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80705c4:	693b      	ldr	r3, [r7, #16]
 80705c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80705c8:	693b      	ldr	r3, [r7, #16]
 80705ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80705cc:	693b      	ldr	r3, [r7, #16]
 80705ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80705d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80705d4:	693b      	ldr	r3, [r7, #16]
 80705d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80705d8:	693b      	ldr	r3, [r7, #16]
 80705da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80705dc:	4b0f      	ldr	r3, [pc, #60]	; (807061c <xTaskPriorityDisinherit+0xd4>)
 80705de:	681b      	ldr	r3, [r3, #0]
 80705e0:	429a      	cmp	r2, r3
 80705e2:	d903      	bls.n	80705ec <xTaskPriorityDisinherit+0xa4>
 80705e4:	693b      	ldr	r3, [r7, #16]
 80705e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80705e8:	4a0c      	ldr	r2, [pc, #48]	; (807061c <xTaskPriorityDisinherit+0xd4>)
 80705ea:	6013      	str	r3, [r2, #0]
 80705ec:	693b      	ldr	r3, [r7, #16]
 80705ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80705f0:	4613      	mov	r3, r2
 80705f2:	009b      	lsls	r3, r3, #2
 80705f4:	4413      	add	r3, r2
 80705f6:	009b      	lsls	r3, r3, #2
 80705f8:	4a09      	ldr	r2, [pc, #36]	; (8070620 <xTaskPriorityDisinherit+0xd8>)
 80705fa:	441a      	add	r2, r3
 80705fc:	693b      	ldr	r3, [r7, #16]
 80705fe:	3304      	adds	r3, #4
 8070600:	4619      	mov	r1, r3
 8070602:	4610      	mov	r0, r2
 8070604:	f7fd ff77 	bl	806e4f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8070608:	2301      	movs	r3, #1
 807060a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 807060c:	697b      	ldr	r3, [r7, #20]
	}
 807060e:	4618      	mov	r0, r3
 8070610:	3718      	adds	r7, #24
 8070612:	46bd      	mov	sp, r7
 8070614:	bd80      	pop	{r7, pc}
 8070616:	bf00      	nop
 8070618:	20000bd4 	.word	0x20000bd4
 807061c:	200010b0 	.word	0x200010b0
 8070620:	20000bd8 	.word	0x20000bd8

08070624 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8070624:	b580      	push	{r7, lr}
 8070626:	b088      	sub	sp, #32
 8070628:	af00      	add	r7, sp, #0
 807062a:	6078      	str	r0, [r7, #4]
 807062c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 807062e:	687b      	ldr	r3, [r7, #4]
 8070630:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8070632:	2301      	movs	r3, #1
 8070634:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8070636:	687b      	ldr	r3, [r7, #4]
 8070638:	2b00      	cmp	r3, #0
 807063a:	d06a      	beq.n	8070712 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 807063c:	69bb      	ldr	r3, [r7, #24]
 807063e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070640:	2b00      	cmp	r3, #0
 8070642:	d10a      	bne.n	807065a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8070644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070648:	f383 8811 	msr	BASEPRI, r3
 807064c:	f3bf 8f6f 	isb	sy
 8070650:	f3bf 8f4f 	dsb	sy
 8070654:	60fb      	str	r3, [r7, #12]
}
 8070656:	bf00      	nop
 8070658:	e7fe      	b.n	8070658 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 807065a:	69bb      	ldr	r3, [r7, #24]
 807065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 807065e:	683a      	ldr	r2, [r7, #0]
 8070660:	429a      	cmp	r2, r3
 8070662:	d902      	bls.n	807066a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8070664:	683b      	ldr	r3, [r7, #0]
 8070666:	61fb      	str	r3, [r7, #28]
 8070668:	e002      	b.n	8070670 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 807066a:	69bb      	ldr	r3, [r7, #24]
 807066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 807066e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8070670:	69bb      	ldr	r3, [r7, #24]
 8070672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070674:	69fa      	ldr	r2, [r7, #28]
 8070676:	429a      	cmp	r2, r3
 8070678:	d04b      	beq.n	8070712 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 807067a:	69bb      	ldr	r3, [r7, #24]
 807067c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 807067e:	697a      	ldr	r2, [r7, #20]
 8070680:	429a      	cmp	r2, r3
 8070682:	d146      	bne.n	8070712 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8070684:	4b25      	ldr	r3, [pc, #148]	; (807071c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8070686:	681b      	ldr	r3, [r3, #0]
 8070688:	69ba      	ldr	r2, [r7, #24]
 807068a:	429a      	cmp	r2, r3
 807068c:	d10a      	bne.n	80706a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 807068e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070692:	f383 8811 	msr	BASEPRI, r3
 8070696:	f3bf 8f6f 	isb	sy
 807069a:	f3bf 8f4f 	dsb	sy
 807069e:	60bb      	str	r3, [r7, #8]
}
 80706a0:	bf00      	nop
 80706a2:	e7fe      	b.n	80706a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80706a4:	69bb      	ldr	r3, [r7, #24]
 80706a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80706a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80706aa:	69bb      	ldr	r3, [r7, #24]
 80706ac:	69fa      	ldr	r2, [r7, #28]
 80706ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80706b0:	69bb      	ldr	r3, [r7, #24]
 80706b2:	699b      	ldr	r3, [r3, #24]
 80706b4:	2b00      	cmp	r3, #0
 80706b6:	db04      	blt.n	80706c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80706b8:	69fb      	ldr	r3, [r7, #28]
 80706ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80706be:	69bb      	ldr	r3, [r7, #24]
 80706c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80706c2:	69bb      	ldr	r3, [r7, #24]
 80706c4:	6959      	ldr	r1, [r3, #20]
 80706c6:	693a      	ldr	r2, [r7, #16]
 80706c8:	4613      	mov	r3, r2
 80706ca:	009b      	lsls	r3, r3, #2
 80706cc:	4413      	add	r3, r2
 80706ce:	009b      	lsls	r3, r3, #2
 80706d0:	4a13      	ldr	r2, [pc, #76]	; (8070720 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80706d2:	4413      	add	r3, r2
 80706d4:	4299      	cmp	r1, r3
 80706d6:	d11c      	bne.n	8070712 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80706d8:	69bb      	ldr	r3, [r7, #24]
 80706da:	3304      	adds	r3, #4
 80706dc:	4618      	mov	r0, r3
 80706de:	f7fd ff67 	bl	806e5b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80706e2:	69bb      	ldr	r3, [r7, #24]
 80706e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80706e6:	4b0f      	ldr	r3, [pc, #60]	; (8070724 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80706e8:	681b      	ldr	r3, [r3, #0]
 80706ea:	429a      	cmp	r2, r3
 80706ec:	d903      	bls.n	80706f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80706ee:	69bb      	ldr	r3, [r7, #24]
 80706f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80706f2:	4a0c      	ldr	r2, [pc, #48]	; (8070724 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80706f4:	6013      	str	r3, [r2, #0]
 80706f6:	69bb      	ldr	r3, [r7, #24]
 80706f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80706fa:	4613      	mov	r3, r2
 80706fc:	009b      	lsls	r3, r3, #2
 80706fe:	4413      	add	r3, r2
 8070700:	009b      	lsls	r3, r3, #2
 8070702:	4a07      	ldr	r2, [pc, #28]	; (8070720 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8070704:	441a      	add	r2, r3
 8070706:	69bb      	ldr	r3, [r7, #24]
 8070708:	3304      	adds	r3, #4
 807070a:	4619      	mov	r1, r3
 807070c:	4610      	mov	r0, r2
 807070e:	f7fd fef2 	bl	806e4f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8070712:	bf00      	nop
 8070714:	3720      	adds	r7, #32
 8070716:	46bd      	mov	sp, r7
 8070718:	bd80      	pop	{r7, pc}
 807071a:	bf00      	nop
 807071c:	20000bd4 	.word	0x20000bd4
 8070720:	20000bd8 	.word	0x20000bd8
 8070724:	200010b0 	.word	0x200010b0

08070728 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8070728:	b480      	push	{r7}
 807072a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 807072c:	4b07      	ldr	r3, [pc, #28]	; (807074c <pvTaskIncrementMutexHeldCount+0x24>)
 807072e:	681b      	ldr	r3, [r3, #0]
 8070730:	2b00      	cmp	r3, #0
 8070732:	d004      	beq.n	807073e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8070734:	4b05      	ldr	r3, [pc, #20]	; (807074c <pvTaskIncrementMutexHeldCount+0x24>)
 8070736:	681b      	ldr	r3, [r3, #0]
 8070738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 807073a:	3201      	adds	r2, #1
 807073c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 807073e:	4b03      	ldr	r3, [pc, #12]	; (807074c <pvTaskIncrementMutexHeldCount+0x24>)
 8070740:	681b      	ldr	r3, [r3, #0]
	}
 8070742:	4618      	mov	r0, r3
 8070744:	46bd      	mov	sp, r7
 8070746:	f85d 7b04 	ldr.w	r7, [sp], #4
 807074a:	4770      	bx	lr
 807074c:	20000bd4 	.word	0x20000bd4

08070750 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8070750:	b580      	push	{r7, lr}
 8070752:	b086      	sub	sp, #24
 8070754:	af00      	add	r7, sp, #0
 8070756:	60f8      	str	r0, [r7, #12]
 8070758:	60b9      	str	r1, [r7, #8]
 807075a:	607a      	str	r2, [r7, #4]
 807075c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 807075e:	f000 ff81 	bl	8071664 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8070762:	4b29      	ldr	r3, [pc, #164]	; (8070808 <xTaskNotifyWait+0xb8>)
 8070764:	681b      	ldr	r3, [r3, #0]
 8070766:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 807076a:	b2db      	uxtb	r3, r3
 807076c:	2b02      	cmp	r3, #2
 807076e:	d01c      	beq.n	80707aa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8070770:	4b25      	ldr	r3, [pc, #148]	; (8070808 <xTaskNotifyWait+0xb8>)
 8070772:	681b      	ldr	r3, [r3, #0]
 8070774:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8070778:	68fa      	ldr	r2, [r7, #12]
 807077a:	43d2      	mvns	r2, r2
 807077c:	400a      	ands	r2, r1
 807077e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8070782:	4b21      	ldr	r3, [pc, #132]	; (8070808 <xTaskNotifyWait+0xb8>)
 8070784:	681b      	ldr	r3, [r3, #0]
 8070786:	2201      	movs	r2, #1
 8070788:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 807078c:	683b      	ldr	r3, [r7, #0]
 807078e:	2b00      	cmp	r3, #0
 8070790:	d00b      	beq.n	80707aa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8070792:	2101      	movs	r1, #1
 8070794:	6838      	ldr	r0, [r7, #0]
 8070796:	f000 f9dd 	bl	8070b54 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 807079a:	4b1c      	ldr	r3, [pc, #112]	; (807080c <xTaskNotifyWait+0xbc>)
 807079c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80707a0:	601a      	str	r2, [r3, #0]
 80707a2:	f3bf 8f4f 	dsb	sy
 80707a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80707aa:	f000 ff8b 	bl	80716c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80707ae:	f000 ff59 	bl	8071664 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80707b2:	687b      	ldr	r3, [r7, #4]
 80707b4:	2b00      	cmp	r3, #0
 80707b6:	d005      	beq.n	80707c4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80707b8:	4b13      	ldr	r3, [pc, #76]	; (8070808 <xTaskNotifyWait+0xb8>)
 80707ba:	681b      	ldr	r3, [r3, #0]
 80707bc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80707c0:	687b      	ldr	r3, [r7, #4]
 80707c2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80707c4:	4b10      	ldr	r3, [pc, #64]	; (8070808 <xTaskNotifyWait+0xb8>)
 80707c6:	681b      	ldr	r3, [r3, #0]
 80707c8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80707cc:	b2db      	uxtb	r3, r3
 80707ce:	2b02      	cmp	r3, #2
 80707d0:	d002      	beq.n	80707d8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80707d2:	2300      	movs	r3, #0
 80707d4:	617b      	str	r3, [r7, #20]
 80707d6:	e00a      	b.n	80707ee <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80707d8:	4b0b      	ldr	r3, [pc, #44]	; (8070808 <xTaskNotifyWait+0xb8>)
 80707da:	681b      	ldr	r3, [r3, #0]
 80707dc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80707e0:	68ba      	ldr	r2, [r7, #8]
 80707e2:	43d2      	mvns	r2, r2
 80707e4:	400a      	ands	r2, r1
 80707e6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80707ea:	2301      	movs	r3, #1
 80707ec:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80707ee:	4b06      	ldr	r3, [pc, #24]	; (8070808 <xTaskNotifyWait+0xb8>)
 80707f0:	681b      	ldr	r3, [r3, #0]
 80707f2:	2200      	movs	r2, #0
 80707f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80707f8:	f000 ff64 	bl	80716c4 <vPortExitCritical>

		return xReturn;
 80707fc:	697b      	ldr	r3, [r7, #20]
	}
 80707fe:	4618      	mov	r0, r3
 8070800:	3718      	adds	r7, #24
 8070802:	46bd      	mov	sp, r7
 8070804:	bd80      	pop	{r7, pc}
 8070806:	bf00      	nop
 8070808:	20000bd4 	.word	0x20000bd4
 807080c:	e000ed04 	.word	0xe000ed04

08070810 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8070810:	b580      	push	{r7, lr}
 8070812:	b08a      	sub	sp, #40	; 0x28
 8070814:	af00      	add	r7, sp, #0
 8070816:	60f8      	str	r0, [r7, #12]
 8070818:	60b9      	str	r1, [r7, #8]
 807081a:	603b      	str	r3, [r7, #0]
 807081c:	4613      	mov	r3, r2
 807081e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8070820:	2301      	movs	r3, #1
 8070822:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8070824:	68fb      	ldr	r3, [r7, #12]
 8070826:	2b00      	cmp	r3, #0
 8070828:	d10a      	bne.n	8070840 <xTaskGenericNotify+0x30>
	__asm volatile
 807082a:	f04f 0350 	mov.w	r3, #80	; 0x50
 807082e:	f383 8811 	msr	BASEPRI, r3
 8070832:	f3bf 8f6f 	isb	sy
 8070836:	f3bf 8f4f 	dsb	sy
 807083a:	61bb      	str	r3, [r7, #24]
}
 807083c:	bf00      	nop
 807083e:	e7fe      	b.n	807083e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8070840:	68fb      	ldr	r3, [r7, #12]
 8070842:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8070844:	f000 ff0e 	bl	8071664 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8070848:	683b      	ldr	r3, [r7, #0]
 807084a:	2b00      	cmp	r3, #0
 807084c:	d004      	beq.n	8070858 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 807084e:	6a3b      	ldr	r3, [r7, #32]
 8070850:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8070854:	683b      	ldr	r3, [r7, #0]
 8070856:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8070858:	6a3b      	ldr	r3, [r7, #32]
 807085a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 807085e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8070860:	6a3b      	ldr	r3, [r7, #32]
 8070862:	2202      	movs	r2, #2
 8070864:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8070868:	79fb      	ldrb	r3, [r7, #7]
 807086a:	2b04      	cmp	r3, #4
 807086c:	d82d      	bhi.n	80708ca <xTaskGenericNotify+0xba>
 807086e:	a201      	add	r2, pc, #4	; (adr r2, 8070874 <xTaskGenericNotify+0x64>)
 8070870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8070874:	080708ed 	.word	0x080708ed
 8070878:	08070889 	.word	0x08070889
 807087c:	0807089b 	.word	0x0807089b
 8070880:	080708ab 	.word	0x080708ab
 8070884:	080708b5 	.word	0x080708b5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8070888:	6a3b      	ldr	r3, [r7, #32]
 807088a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 807088e:	68bb      	ldr	r3, [r7, #8]
 8070890:	431a      	orrs	r2, r3
 8070892:	6a3b      	ldr	r3, [r7, #32]
 8070894:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8070898:	e02b      	b.n	80708f2 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 807089a:	6a3b      	ldr	r3, [r7, #32]
 807089c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80708a0:	1c5a      	adds	r2, r3, #1
 80708a2:	6a3b      	ldr	r3, [r7, #32]
 80708a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80708a8:	e023      	b.n	80708f2 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80708aa:	6a3b      	ldr	r3, [r7, #32]
 80708ac:	68ba      	ldr	r2, [r7, #8]
 80708ae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80708b2:	e01e      	b.n	80708f2 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80708b4:	7ffb      	ldrb	r3, [r7, #31]
 80708b6:	2b02      	cmp	r3, #2
 80708b8:	d004      	beq.n	80708c4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80708ba:	6a3b      	ldr	r3, [r7, #32]
 80708bc:	68ba      	ldr	r2, [r7, #8]
 80708be:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80708c2:	e016      	b.n	80708f2 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80708c4:	2300      	movs	r3, #0
 80708c6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80708c8:	e013      	b.n	80708f2 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80708ca:	6a3b      	ldr	r3, [r7, #32]
 80708cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80708d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80708d4:	d00c      	beq.n	80708f0 <xTaskGenericNotify+0xe0>
	__asm volatile
 80708d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80708da:	f383 8811 	msr	BASEPRI, r3
 80708de:	f3bf 8f6f 	isb	sy
 80708e2:	f3bf 8f4f 	dsb	sy
 80708e6:	617b      	str	r3, [r7, #20]
}
 80708e8:	bf00      	nop
 80708ea:	e7fe      	b.n	80708ea <xTaskGenericNotify+0xda>
					break;
 80708ec:	bf00      	nop
 80708ee:	e000      	b.n	80708f2 <xTaskGenericNotify+0xe2>

					break;
 80708f0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80708f2:	7ffb      	ldrb	r3, [r7, #31]
 80708f4:	2b01      	cmp	r3, #1
 80708f6:	d13a      	bne.n	807096e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80708f8:	6a3b      	ldr	r3, [r7, #32]
 80708fa:	3304      	adds	r3, #4
 80708fc:	4618      	mov	r0, r3
 80708fe:	f7fd fe57 	bl	806e5b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8070902:	6a3b      	ldr	r3, [r7, #32]
 8070904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070906:	4b1d      	ldr	r3, [pc, #116]	; (807097c <xTaskGenericNotify+0x16c>)
 8070908:	681b      	ldr	r3, [r3, #0]
 807090a:	429a      	cmp	r2, r3
 807090c:	d903      	bls.n	8070916 <xTaskGenericNotify+0x106>
 807090e:	6a3b      	ldr	r3, [r7, #32]
 8070910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070912:	4a1a      	ldr	r2, [pc, #104]	; (807097c <xTaskGenericNotify+0x16c>)
 8070914:	6013      	str	r3, [r2, #0]
 8070916:	6a3b      	ldr	r3, [r7, #32]
 8070918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 807091a:	4613      	mov	r3, r2
 807091c:	009b      	lsls	r3, r3, #2
 807091e:	4413      	add	r3, r2
 8070920:	009b      	lsls	r3, r3, #2
 8070922:	4a17      	ldr	r2, [pc, #92]	; (8070980 <xTaskGenericNotify+0x170>)
 8070924:	441a      	add	r2, r3
 8070926:	6a3b      	ldr	r3, [r7, #32]
 8070928:	3304      	adds	r3, #4
 807092a:	4619      	mov	r1, r3
 807092c:	4610      	mov	r0, r2
 807092e:	f7fd fde2 	bl	806e4f6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8070932:	6a3b      	ldr	r3, [r7, #32]
 8070934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8070936:	2b00      	cmp	r3, #0
 8070938:	d00a      	beq.n	8070950 <xTaskGenericNotify+0x140>
	__asm volatile
 807093a:	f04f 0350 	mov.w	r3, #80	; 0x50
 807093e:	f383 8811 	msr	BASEPRI, r3
 8070942:	f3bf 8f6f 	isb	sy
 8070946:	f3bf 8f4f 	dsb	sy
 807094a:	613b      	str	r3, [r7, #16]
}
 807094c:	bf00      	nop
 807094e:	e7fe      	b.n	807094e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8070950:	6a3b      	ldr	r3, [r7, #32]
 8070952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070954:	4b0b      	ldr	r3, [pc, #44]	; (8070984 <xTaskGenericNotify+0x174>)
 8070956:	681b      	ldr	r3, [r3, #0]
 8070958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807095a:	429a      	cmp	r2, r3
 807095c:	d907      	bls.n	807096e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 807095e:	4b0a      	ldr	r3, [pc, #40]	; (8070988 <xTaskGenericNotify+0x178>)
 8070960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8070964:	601a      	str	r2, [r3, #0]
 8070966:	f3bf 8f4f 	dsb	sy
 807096a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 807096e:	f000 fea9 	bl	80716c4 <vPortExitCritical>

		return xReturn;
 8070972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8070974:	4618      	mov	r0, r3
 8070976:	3728      	adds	r7, #40	; 0x28
 8070978:	46bd      	mov	sp, r7
 807097a:	bd80      	pop	{r7, pc}
 807097c:	200010b0 	.word	0x200010b0
 8070980:	20000bd8 	.word	0x20000bd8
 8070984:	20000bd4 	.word	0x20000bd4
 8070988:	e000ed04 	.word	0xe000ed04

0807098c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 807098c:	b580      	push	{r7, lr}
 807098e:	b08e      	sub	sp, #56	; 0x38
 8070990:	af00      	add	r7, sp, #0
 8070992:	60f8      	str	r0, [r7, #12]
 8070994:	60b9      	str	r1, [r7, #8]
 8070996:	603b      	str	r3, [r7, #0]
 8070998:	4613      	mov	r3, r2
 807099a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 807099c:	2301      	movs	r3, #1
 807099e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80709a0:	68fb      	ldr	r3, [r7, #12]
 80709a2:	2b00      	cmp	r3, #0
 80709a4:	d10a      	bne.n	80709bc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80709a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80709aa:	f383 8811 	msr	BASEPRI, r3
 80709ae:	f3bf 8f6f 	isb	sy
 80709b2:	f3bf 8f4f 	dsb	sy
 80709b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80709b8:	bf00      	nop
 80709ba:	e7fe      	b.n	80709ba <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80709bc:	f000 ff34 	bl	8071828 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80709c0:	68fb      	ldr	r3, [r7, #12]
 80709c2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80709c4:	f3ef 8211 	mrs	r2, BASEPRI
 80709c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80709cc:	f383 8811 	msr	BASEPRI, r3
 80709d0:	f3bf 8f6f 	isb	sy
 80709d4:	f3bf 8f4f 	dsb	sy
 80709d8:	623a      	str	r2, [r7, #32]
 80709da:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80709dc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80709de:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80709e0:	683b      	ldr	r3, [r7, #0]
 80709e2:	2b00      	cmp	r3, #0
 80709e4:	d004      	beq.n	80709f0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80709e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80709e8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80709ec:	683b      	ldr	r3, [r7, #0]
 80709ee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80709f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80709f2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80709f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80709fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80709fc:	2202      	movs	r2, #2
 80709fe:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8070a02:	79fb      	ldrb	r3, [r7, #7]
 8070a04:	2b04      	cmp	r3, #4
 8070a06:	d82f      	bhi.n	8070a68 <xTaskGenericNotifyFromISR+0xdc>
 8070a08:	a201      	add	r2, pc, #4	; (adr r2, 8070a10 <xTaskGenericNotifyFromISR+0x84>)
 8070a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8070a0e:	bf00      	nop
 8070a10:	08070a8b 	.word	0x08070a8b
 8070a14:	08070a25 	.word	0x08070a25
 8070a18:	08070a37 	.word	0x08070a37
 8070a1c:	08070a47 	.word	0x08070a47
 8070a20:	08070a51 	.word	0x08070a51
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8070a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070a26:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8070a2a:	68bb      	ldr	r3, [r7, #8]
 8070a2c:	431a      	orrs	r2, r3
 8070a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070a30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8070a34:	e02c      	b.n	8070a90 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8070a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070a38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8070a3c:	1c5a      	adds	r2, r3, #1
 8070a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070a40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8070a44:	e024      	b.n	8070a90 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8070a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070a48:	68ba      	ldr	r2, [r7, #8]
 8070a4a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8070a4e:	e01f      	b.n	8070a90 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8070a50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8070a54:	2b02      	cmp	r3, #2
 8070a56:	d004      	beq.n	8070a62 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8070a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070a5a:	68ba      	ldr	r2, [r7, #8]
 8070a5c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8070a60:	e016      	b.n	8070a90 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8070a62:	2300      	movs	r3, #0
 8070a64:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8070a66:	e013      	b.n	8070a90 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8070a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070a6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8070a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8070a72:	d00c      	beq.n	8070a8e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8070a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070a78:	f383 8811 	msr	BASEPRI, r3
 8070a7c:	f3bf 8f6f 	isb	sy
 8070a80:	f3bf 8f4f 	dsb	sy
 8070a84:	61bb      	str	r3, [r7, #24]
}
 8070a86:	bf00      	nop
 8070a88:	e7fe      	b.n	8070a88 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8070a8a:	bf00      	nop
 8070a8c:	e000      	b.n	8070a90 <xTaskGenericNotifyFromISR+0x104>
					break;
 8070a8e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8070a90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8070a94:	2b01      	cmp	r3, #1
 8070a96:	d146      	bne.n	8070b26 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8070a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8070a9c:	2b00      	cmp	r3, #0
 8070a9e:	d00a      	beq.n	8070ab6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8070aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070aa4:	f383 8811 	msr	BASEPRI, r3
 8070aa8:	f3bf 8f6f 	isb	sy
 8070aac:	f3bf 8f4f 	dsb	sy
 8070ab0:	617b      	str	r3, [r7, #20]
}
 8070ab2:	bf00      	nop
 8070ab4:	e7fe      	b.n	8070ab4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8070ab6:	4b21      	ldr	r3, [pc, #132]	; (8070b3c <xTaskGenericNotifyFromISR+0x1b0>)
 8070ab8:	681b      	ldr	r3, [r3, #0]
 8070aba:	2b00      	cmp	r3, #0
 8070abc:	d11d      	bne.n	8070afa <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8070abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070ac0:	3304      	adds	r3, #4
 8070ac2:	4618      	mov	r0, r3
 8070ac4:	f7fd fd74 	bl	806e5b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8070ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070acc:	4b1c      	ldr	r3, [pc, #112]	; (8070b40 <xTaskGenericNotifyFromISR+0x1b4>)
 8070ace:	681b      	ldr	r3, [r3, #0]
 8070ad0:	429a      	cmp	r2, r3
 8070ad2:	d903      	bls.n	8070adc <xTaskGenericNotifyFromISR+0x150>
 8070ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070ad8:	4a19      	ldr	r2, [pc, #100]	; (8070b40 <xTaskGenericNotifyFromISR+0x1b4>)
 8070ada:	6013      	str	r3, [r2, #0]
 8070adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070ae0:	4613      	mov	r3, r2
 8070ae2:	009b      	lsls	r3, r3, #2
 8070ae4:	4413      	add	r3, r2
 8070ae6:	009b      	lsls	r3, r3, #2
 8070ae8:	4a16      	ldr	r2, [pc, #88]	; (8070b44 <xTaskGenericNotifyFromISR+0x1b8>)
 8070aea:	441a      	add	r2, r3
 8070aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070aee:	3304      	adds	r3, #4
 8070af0:	4619      	mov	r1, r3
 8070af2:	4610      	mov	r0, r2
 8070af4:	f7fd fcff 	bl	806e4f6 <vListInsertEnd>
 8070af8:	e005      	b.n	8070b06 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8070afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070afc:	3318      	adds	r3, #24
 8070afe:	4619      	mov	r1, r3
 8070b00:	4811      	ldr	r0, [pc, #68]	; (8070b48 <xTaskGenericNotifyFromISR+0x1bc>)
 8070b02:	f7fd fcf8 	bl	806e4f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8070b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070b0a:	4b10      	ldr	r3, [pc, #64]	; (8070b4c <xTaskGenericNotifyFromISR+0x1c0>)
 8070b0c:	681b      	ldr	r3, [r3, #0]
 8070b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070b10:	429a      	cmp	r2, r3
 8070b12:	d908      	bls.n	8070b26 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8070b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8070b16:	2b00      	cmp	r3, #0
 8070b18:	d002      	beq.n	8070b20 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8070b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8070b1c:	2201      	movs	r2, #1
 8070b1e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8070b20:	4b0b      	ldr	r3, [pc, #44]	; (8070b50 <xTaskGenericNotifyFromISR+0x1c4>)
 8070b22:	2201      	movs	r2, #1
 8070b24:	601a      	str	r2, [r3, #0]
 8070b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8070b28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8070b2a:	693b      	ldr	r3, [r7, #16]
 8070b2c:	f383 8811 	msr	BASEPRI, r3
}
 8070b30:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8070b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8070b34:	4618      	mov	r0, r3
 8070b36:	3738      	adds	r7, #56	; 0x38
 8070b38:	46bd      	mov	sp, r7
 8070b3a:	bd80      	pop	{r7, pc}
 8070b3c:	200010d0 	.word	0x200010d0
 8070b40:	200010b0 	.word	0x200010b0
 8070b44:	20000bd8 	.word	0x20000bd8
 8070b48:	20001068 	.word	0x20001068
 8070b4c:	20000bd4 	.word	0x20000bd4
 8070b50:	200010bc 	.word	0x200010bc

08070b54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8070b54:	b580      	push	{r7, lr}
 8070b56:	b084      	sub	sp, #16
 8070b58:	af00      	add	r7, sp, #0
 8070b5a:	6078      	str	r0, [r7, #4]
 8070b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8070b5e:	4b21      	ldr	r3, [pc, #132]	; (8070be4 <prvAddCurrentTaskToDelayedList+0x90>)
 8070b60:	681b      	ldr	r3, [r3, #0]
 8070b62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8070b64:	4b20      	ldr	r3, [pc, #128]	; (8070be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8070b66:	681b      	ldr	r3, [r3, #0]
 8070b68:	3304      	adds	r3, #4
 8070b6a:	4618      	mov	r0, r3
 8070b6c:	f7fd fd20 	bl	806e5b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8070b70:	687b      	ldr	r3, [r7, #4]
 8070b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8070b76:	d10a      	bne.n	8070b8e <prvAddCurrentTaskToDelayedList+0x3a>
 8070b78:	683b      	ldr	r3, [r7, #0]
 8070b7a:	2b00      	cmp	r3, #0
 8070b7c:	d007      	beq.n	8070b8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8070b7e:	4b1a      	ldr	r3, [pc, #104]	; (8070be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8070b80:	681b      	ldr	r3, [r3, #0]
 8070b82:	3304      	adds	r3, #4
 8070b84:	4619      	mov	r1, r3
 8070b86:	4819      	ldr	r0, [pc, #100]	; (8070bec <prvAddCurrentTaskToDelayedList+0x98>)
 8070b88:	f7fd fcb5 	bl	806e4f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8070b8c:	e026      	b.n	8070bdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8070b8e:	68fa      	ldr	r2, [r7, #12]
 8070b90:	687b      	ldr	r3, [r7, #4]
 8070b92:	4413      	add	r3, r2
 8070b94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8070b96:	4b14      	ldr	r3, [pc, #80]	; (8070be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8070b98:	681b      	ldr	r3, [r3, #0]
 8070b9a:	68ba      	ldr	r2, [r7, #8]
 8070b9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8070b9e:	68ba      	ldr	r2, [r7, #8]
 8070ba0:	68fb      	ldr	r3, [r7, #12]
 8070ba2:	429a      	cmp	r2, r3
 8070ba4:	d209      	bcs.n	8070bba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8070ba6:	4b12      	ldr	r3, [pc, #72]	; (8070bf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8070ba8:	681a      	ldr	r2, [r3, #0]
 8070baa:	4b0f      	ldr	r3, [pc, #60]	; (8070be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8070bac:	681b      	ldr	r3, [r3, #0]
 8070bae:	3304      	adds	r3, #4
 8070bb0:	4619      	mov	r1, r3
 8070bb2:	4610      	mov	r0, r2
 8070bb4:	f7fd fcc3 	bl	806e53e <vListInsert>
}
 8070bb8:	e010      	b.n	8070bdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8070bba:	4b0e      	ldr	r3, [pc, #56]	; (8070bf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8070bbc:	681a      	ldr	r2, [r3, #0]
 8070bbe:	4b0a      	ldr	r3, [pc, #40]	; (8070be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8070bc0:	681b      	ldr	r3, [r3, #0]
 8070bc2:	3304      	adds	r3, #4
 8070bc4:	4619      	mov	r1, r3
 8070bc6:	4610      	mov	r0, r2
 8070bc8:	f7fd fcb9 	bl	806e53e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8070bcc:	4b0a      	ldr	r3, [pc, #40]	; (8070bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8070bce:	681b      	ldr	r3, [r3, #0]
 8070bd0:	68ba      	ldr	r2, [r7, #8]
 8070bd2:	429a      	cmp	r2, r3
 8070bd4:	d202      	bcs.n	8070bdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8070bd6:	4a08      	ldr	r2, [pc, #32]	; (8070bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8070bd8:	68bb      	ldr	r3, [r7, #8]
 8070bda:	6013      	str	r3, [r2, #0]
}
 8070bdc:	bf00      	nop
 8070bde:	3710      	adds	r7, #16
 8070be0:	46bd      	mov	sp, r7
 8070be2:	bd80      	pop	{r7, pc}
 8070be4:	200010ac 	.word	0x200010ac
 8070be8:	20000bd4 	.word	0x20000bd4
 8070bec:	20001094 	.word	0x20001094
 8070bf0:	20001064 	.word	0x20001064
 8070bf4:	20001060 	.word	0x20001060
 8070bf8:	200010c8 	.word	0x200010c8

08070bfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8070bfc:	b580      	push	{r7, lr}
 8070bfe:	b08a      	sub	sp, #40	; 0x28
 8070c00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8070c02:	2300      	movs	r3, #0
 8070c04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8070c06:	f000 fba1 	bl	807134c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8070c0a:	4b1c      	ldr	r3, [pc, #112]	; (8070c7c <xTimerCreateTimerTask+0x80>)
 8070c0c:	681b      	ldr	r3, [r3, #0]
 8070c0e:	2b00      	cmp	r3, #0
 8070c10:	d021      	beq.n	8070c56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8070c12:	2300      	movs	r3, #0
 8070c14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8070c16:	2300      	movs	r3, #0
 8070c18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8070c1a:	1d3a      	adds	r2, r7, #4
 8070c1c:	f107 0108 	add.w	r1, r7, #8
 8070c20:	f107 030c 	add.w	r3, r7, #12
 8070c24:	4618      	mov	r0, r3
 8070c26:	f7fd fc1f 	bl	806e468 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8070c2a:	6879      	ldr	r1, [r7, #4]
 8070c2c:	68bb      	ldr	r3, [r7, #8]
 8070c2e:	68fa      	ldr	r2, [r7, #12]
 8070c30:	9202      	str	r2, [sp, #8]
 8070c32:	9301      	str	r3, [sp, #4]
 8070c34:	2302      	movs	r3, #2
 8070c36:	9300      	str	r3, [sp, #0]
 8070c38:	2300      	movs	r3, #0
 8070c3a:	460a      	mov	r2, r1
 8070c3c:	4910      	ldr	r1, [pc, #64]	; (8070c80 <xTimerCreateTimerTask+0x84>)
 8070c3e:	4811      	ldr	r0, [pc, #68]	; (8070c84 <xTimerCreateTimerTask+0x88>)
 8070c40:	f7fe fda4 	bl	806f78c <xTaskCreateStatic>
 8070c44:	4603      	mov	r3, r0
 8070c46:	4a10      	ldr	r2, [pc, #64]	; (8070c88 <xTimerCreateTimerTask+0x8c>)
 8070c48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8070c4a:	4b0f      	ldr	r3, [pc, #60]	; (8070c88 <xTimerCreateTimerTask+0x8c>)
 8070c4c:	681b      	ldr	r3, [r3, #0]
 8070c4e:	2b00      	cmp	r3, #0
 8070c50:	d001      	beq.n	8070c56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8070c52:	2301      	movs	r3, #1
 8070c54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8070c56:	697b      	ldr	r3, [r7, #20]
 8070c58:	2b00      	cmp	r3, #0
 8070c5a:	d10a      	bne.n	8070c72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8070c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070c60:	f383 8811 	msr	BASEPRI, r3
 8070c64:	f3bf 8f6f 	isb	sy
 8070c68:	f3bf 8f4f 	dsb	sy
 8070c6c:	613b      	str	r3, [r7, #16]
}
 8070c6e:	bf00      	nop
 8070c70:	e7fe      	b.n	8070c70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8070c72:	697b      	ldr	r3, [r7, #20]
}
 8070c74:	4618      	mov	r0, r3
 8070c76:	3718      	adds	r7, #24
 8070c78:	46bd      	mov	sp, r7
 8070c7a:	bd80      	pop	{r7, pc}
 8070c7c:	20001104 	.word	0x20001104
 8070c80:	08076ca4 	.word	0x08076ca4
 8070c84:	08070ef5 	.word	0x08070ef5
 8070c88:	20001108 	.word	0x20001108

08070c8c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8070c8c:	b580      	push	{r7, lr}
 8070c8e:	b088      	sub	sp, #32
 8070c90:	af02      	add	r7, sp, #8
 8070c92:	60f8      	str	r0, [r7, #12]
 8070c94:	60b9      	str	r1, [r7, #8]
 8070c96:	607a      	str	r2, [r7, #4]
 8070c98:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8070c9a:	202c      	movs	r0, #44	; 0x2c
 8070c9c:	f000 fe04 	bl	80718a8 <pvPortMalloc>
 8070ca0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8070ca2:	697b      	ldr	r3, [r7, #20]
 8070ca4:	2b00      	cmp	r3, #0
 8070ca6:	d00d      	beq.n	8070cc4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8070ca8:	697b      	ldr	r3, [r7, #20]
 8070caa:	2200      	movs	r2, #0
 8070cac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8070cb0:	697b      	ldr	r3, [r7, #20]
 8070cb2:	9301      	str	r3, [sp, #4]
 8070cb4:	6a3b      	ldr	r3, [r7, #32]
 8070cb6:	9300      	str	r3, [sp, #0]
 8070cb8:	683b      	ldr	r3, [r7, #0]
 8070cba:	687a      	ldr	r2, [r7, #4]
 8070cbc:	68b9      	ldr	r1, [r7, #8]
 8070cbe:	68f8      	ldr	r0, [r7, #12]
 8070cc0:	f000 f843 	bl	8070d4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8070cc4:	697b      	ldr	r3, [r7, #20]
	}
 8070cc6:	4618      	mov	r0, r3
 8070cc8:	3718      	adds	r7, #24
 8070cca:	46bd      	mov	sp, r7
 8070ccc:	bd80      	pop	{r7, pc}

08070cce <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8070cce:	b580      	push	{r7, lr}
 8070cd0:	b08a      	sub	sp, #40	; 0x28
 8070cd2:	af02      	add	r7, sp, #8
 8070cd4:	60f8      	str	r0, [r7, #12]
 8070cd6:	60b9      	str	r1, [r7, #8]
 8070cd8:	607a      	str	r2, [r7, #4]
 8070cda:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8070cdc:	232c      	movs	r3, #44	; 0x2c
 8070cde:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8070ce0:	693b      	ldr	r3, [r7, #16]
 8070ce2:	2b2c      	cmp	r3, #44	; 0x2c
 8070ce4:	d00a      	beq.n	8070cfc <xTimerCreateStatic+0x2e>
	__asm volatile
 8070ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070cea:	f383 8811 	msr	BASEPRI, r3
 8070cee:	f3bf 8f6f 	isb	sy
 8070cf2:	f3bf 8f4f 	dsb	sy
 8070cf6:	61bb      	str	r3, [r7, #24]
}
 8070cf8:	bf00      	nop
 8070cfa:	e7fe      	b.n	8070cfa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8070cfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8070cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8070d00:	2b00      	cmp	r3, #0
 8070d02:	d10a      	bne.n	8070d1a <xTimerCreateStatic+0x4c>
	__asm volatile
 8070d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070d08:	f383 8811 	msr	BASEPRI, r3
 8070d0c:	f3bf 8f6f 	isb	sy
 8070d10:	f3bf 8f4f 	dsb	sy
 8070d14:	617b      	str	r3, [r7, #20]
}
 8070d16:	bf00      	nop
 8070d18:	e7fe      	b.n	8070d18 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8070d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8070d1c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8070d1e:	69fb      	ldr	r3, [r7, #28]
 8070d20:	2b00      	cmp	r3, #0
 8070d22:	d00d      	beq.n	8070d40 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8070d24:	69fb      	ldr	r3, [r7, #28]
 8070d26:	2202      	movs	r2, #2
 8070d28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8070d2c:	69fb      	ldr	r3, [r7, #28]
 8070d2e:	9301      	str	r3, [sp, #4]
 8070d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8070d32:	9300      	str	r3, [sp, #0]
 8070d34:	683b      	ldr	r3, [r7, #0]
 8070d36:	687a      	ldr	r2, [r7, #4]
 8070d38:	68b9      	ldr	r1, [r7, #8]
 8070d3a:	68f8      	ldr	r0, [r7, #12]
 8070d3c:	f000 f805 	bl	8070d4a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8070d40:	69fb      	ldr	r3, [r7, #28]
	}
 8070d42:	4618      	mov	r0, r3
 8070d44:	3720      	adds	r7, #32
 8070d46:	46bd      	mov	sp, r7
 8070d48:	bd80      	pop	{r7, pc}

08070d4a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8070d4a:	b580      	push	{r7, lr}
 8070d4c:	b086      	sub	sp, #24
 8070d4e:	af00      	add	r7, sp, #0
 8070d50:	60f8      	str	r0, [r7, #12]
 8070d52:	60b9      	str	r1, [r7, #8]
 8070d54:	607a      	str	r2, [r7, #4]
 8070d56:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8070d58:	68bb      	ldr	r3, [r7, #8]
 8070d5a:	2b00      	cmp	r3, #0
 8070d5c:	d10a      	bne.n	8070d74 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8070d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070d62:	f383 8811 	msr	BASEPRI, r3
 8070d66:	f3bf 8f6f 	isb	sy
 8070d6a:	f3bf 8f4f 	dsb	sy
 8070d6e:	617b      	str	r3, [r7, #20]
}
 8070d70:	bf00      	nop
 8070d72:	e7fe      	b.n	8070d72 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8070d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070d76:	2b00      	cmp	r3, #0
 8070d78:	d01e      	beq.n	8070db8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8070d7a:	f000 fae7 	bl	807134c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8070d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070d80:	68fa      	ldr	r2, [r7, #12]
 8070d82:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8070d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070d86:	68ba      	ldr	r2, [r7, #8]
 8070d88:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8070d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070d8c:	683a      	ldr	r2, [r7, #0]
 8070d8e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8070d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070d92:	6a3a      	ldr	r2, [r7, #32]
 8070d94:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8070d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070d98:	3304      	adds	r3, #4
 8070d9a:	4618      	mov	r0, r3
 8070d9c:	f7fd fb9e 	bl	806e4dc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8070da0:	687b      	ldr	r3, [r7, #4]
 8070da2:	2b00      	cmp	r3, #0
 8070da4:	d008      	beq.n	8070db8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8070da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8070dac:	f043 0304 	orr.w	r3, r3, #4
 8070db0:	b2da      	uxtb	r2, r3
 8070db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8070db8:	bf00      	nop
 8070dba:	3718      	adds	r7, #24
 8070dbc:	46bd      	mov	sp, r7
 8070dbe:	bd80      	pop	{r7, pc}

08070dc0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8070dc0:	b580      	push	{r7, lr}
 8070dc2:	b08a      	sub	sp, #40	; 0x28
 8070dc4:	af00      	add	r7, sp, #0
 8070dc6:	60f8      	str	r0, [r7, #12]
 8070dc8:	60b9      	str	r1, [r7, #8]
 8070dca:	607a      	str	r2, [r7, #4]
 8070dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8070dce:	2300      	movs	r3, #0
 8070dd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8070dd2:	68fb      	ldr	r3, [r7, #12]
 8070dd4:	2b00      	cmp	r3, #0
 8070dd6:	d10a      	bne.n	8070dee <xTimerGenericCommand+0x2e>
	__asm volatile
 8070dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070ddc:	f383 8811 	msr	BASEPRI, r3
 8070de0:	f3bf 8f6f 	isb	sy
 8070de4:	f3bf 8f4f 	dsb	sy
 8070de8:	623b      	str	r3, [r7, #32]
}
 8070dea:	bf00      	nop
 8070dec:	e7fe      	b.n	8070dec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8070dee:	4b1a      	ldr	r3, [pc, #104]	; (8070e58 <xTimerGenericCommand+0x98>)
 8070df0:	681b      	ldr	r3, [r3, #0]
 8070df2:	2b00      	cmp	r3, #0
 8070df4:	d02a      	beq.n	8070e4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8070df6:	68bb      	ldr	r3, [r7, #8]
 8070df8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8070dfa:	687b      	ldr	r3, [r7, #4]
 8070dfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8070dfe:	68fb      	ldr	r3, [r7, #12]
 8070e00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8070e02:	68bb      	ldr	r3, [r7, #8]
 8070e04:	2b05      	cmp	r3, #5
 8070e06:	dc18      	bgt.n	8070e3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8070e08:	f7ff fb18 	bl	807043c <xTaskGetSchedulerState>
 8070e0c:	4603      	mov	r3, r0
 8070e0e:	2b02      	cmp	r3, #2
 8070e10:	d109      	bne.n	8070e26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8070e12:	4b11      	ldr	r3, [pc, #68]	; (8070e58 <xTimerGenericCommand+0x98>)
 8070e14:	6818      	ldr	r0, [r3, #0]
 8070e16:	f107 0110 	add.w	r1, r7, #16
 8070e1a:	2300      	movs	r3, #0
 8070e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8070e1e:	f7fd fe4f 	bl	806eac0 <xQueueGenericSend>
 8070e22:	6278      	str	r0, [r7, #36]	; 0x24
 8070e24:	e012      	b.n	8070e4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8070e26:	4b0c      	ldr	r3, [pc, #48]	; (8070e58 <xTimerGenericCommand+0x98>)
 8070e28:	6818      	ldr	r0, [r3, #0]
 8070e2a:	f107 0110 	add.w	r1, r7, #16
 8070e2e:	2300      	movs	r3, #0
 8070e30:	2200      	movs	r2, #0
 8070e32:	f7fd fe45 	bl	806eac0 <xQueueGenericSend>
 8070e36:	6278      	str	r0, [r7, #36]	; 0x24
 8070e38:	e008      	b.n	8070e4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8070e3a:	4b07      	ldr	r3, [pc, #28]	; (8070e58 <xTimerGenericCommand+0x98>)
 8070e3c:	6818      	ldr	r0, [r3, #0]
 8070e3e:	f107 0110 	add.w	r1, r7, #16
 8070e42:	2300      	movs	r3, #0
 8070e44:	683a      	ldr	r2, [r7, #0]
 8070e46:	f7fd ff39 	bl	806ecbc <xQueueGenericSendFromISR>
 8070e4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8070e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8070e4e:	4618      	mov	r0, r3
 8070e50:	3728      	adds	r7, #40	; 0x28
 8070e52:	46bd      	mov	sp, r7
 8070e54:	bd80      	pop	{r7, pc}
 8070e56:	bf00      	nop
 8070e58:	20001104 	.word	0x20001104

08070e5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8070e5c:	b580      	push	{r7, lr}
 8070e5e:	b088      	sub	sp, #32
 8070e60:	af02      	add	r7, sp, #8
 8070e62:	6078      	str	r0, [r7, #4]
 8070e64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070e66:	4b22      	ldr	r3, [pc, #136]	; (8070ef0 <prvProcessExpiredTimer+0x94>)
 8070e68:	681b      	ldr	r3, [r3, #0]
 8070e6a:	68db      	ldr	r3, [r3, #12]
 8070e6c:	68db      	ldr	r3, [r3, #12]
 8070e6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8070e70:	697b      	ldr	r3, [r7, #20]
 8070e72:	3304      	adds	r3, #4
 8070e74:	4618      	mov	r0, r3
 8070e76:	f7fd fb9b 	bl	806e5b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8070e7a:	697b      	ldr	r3, [r7, #20]
 8070e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8070e80:	f003 0304 	and.w	r3, r3, #4
 8070e84:	2b00      	cmp	r3, #0
 8070e86:	d022      	beq.n	8070ece <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8070e88:	697b      	ldr	r3, [r7, #20]
 8070e8a:	699a      	ldr	r2, [r3, #24]
 8070e8c:	687b      	ldr	r3, [r7, #4]
 8070e8e:	18d1      	adds	r1, r2, r3
 8070e90:	687b      	ldr	r3, [r7, #4]
 8070e92:	683a      	ldr	r2, [r7, #0]
 8070e94:	6978      	ldr	r0, [r7, #20]
 8070e96:	f000 f8d1 	bl	807103c <prvInsertTimerInActiveList>
 8070e9a:	4603      	mov	r3, r0
 8070e9c:	2b00      	cmp	r3, #0
 8070e9e:	d01f      	beq.n	8070ee0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8070ea0:	2300      	movs	r3, #0
 8070ea2:	9300      	str	r3, [sp, #0]
 8070ea4:	2300      	movs	r3, #0
 8070ea6:	687a      	ldr	r2, [r7, #4]
 8070ea8:	2100      	movs	r1, #0
 8070eaa:	6978      	ldr	r0, [r7, #20]
 8070eac:	f7ff ff88 	bl	8070dc0 <xTimerGenericCommand>
 8070eb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8070eb2:	693b      	ldr	r3, [r7, #16]
 8070eb4:	2b00      	cmp	r3, #0
 8070eb6:	d113      	bne.n	8070ee0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8070eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070ebc:	f383 8811 	msr	BASEPRI, r3
 8070ec0:	f3bf 8f6f 	isb	sy
 8070ec4:	f3bf 8f4f 	dsb	sy
 8070ec8:	60fb      	str	r3, [r7, #12]
}
 8070eca:	bf00      	nop
 8070ecc:	e7fe      	b.n	8070ecc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8070ece:	697b      	ldr	r3, [r7, #20]
 8070ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8070ed4:	f023 0301 	bic.w	r3, r3, #1
 8070ed8:	b2da      	uxtb	r2, r3
 8070eda:	697b      	ldr	r3, [r7, #20]
 8070edc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8070ee0:	697b      	ldr	r3, [r7, #20]
 8070ee2:	6a1b      	ldr	r3, [r3, #32]
 8070ee4:	6978      	ldr	r0, [r7, #20]
 8070ee6:	4798      	blx	r3
}
 8070ee8:	bf00      	nop
 8070eea:	3718      	adds	r7, #24
 8070eec:	46bd      	mov	sp, r7
 8070eee:	bd80      	pop	{r7, pc}
 8070ef0:	200010fc 	.word	0x200010fc

08070ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8070ef4:	b580      	push	{r7, lr}
 8070ef6:	b084      	sub	sp, #16
 8070ef8:	af00      	add	r7, sp, #0
 8070efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8070efc:	f107 0308 	add.w	r3, r7, #8
 8070f00:	4618      	mov	r0, r3
 8070f02:	f000 f857 	bl	8070fb4 <prvGetNextExpireTime>
 8070f06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8070f08:	68bb      	ldr	r3, [r7, #8]
 8070f0a:	4619      	mov	r1, r3
 8070f0c:	68f8      	ldr	r0, [r7, #12]
 8070f0e:	f000 f803 	bl	8070f18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8070f12:	f000 f8d5 	bl	80710c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8070f16:	e7f1      	b.n	8070efc <prvTimerTask+0x8>

08070f18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8070f18:	b580      	push	{r7, lr}
 8070f1a:	b084      	sub	sp, #16
 8070f1c:	af00      	add	r7, sp, #0
 8070f1e:	6078      	str	r0, [r7, #4]
 8070f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8070f22:	f7fe fe8f 	bl	806fc44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8070f26:	f107 0308 	add.w	r3, r7, #8
 8070f2a:	4618      	mov	r0, r3
 8070f2c:	f000 f866 	bl	8070ffc <prvSampleTimeNow>
 8070f30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8070f32:	68bb      	ldr	r3, [r7, #8]
 8070f34:	2b00      	cmp	r3, #0
 8070f36:	d130      	bne.n	8070f9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8070f38:	683b      	ldr	r3, [r7, #0]
 8070f3a:	2b00      	cmp	r3, #0
 8070f3c:	d10a      	bne.n	8070f54 <prvProcessTimerOrBlockTask+0x3c>
 8070f3e:	687a      	ldr	r2, [r7, #4]
 8070f40:	68fb      	ldr	r3, [r7, #12]
 8070f42:	429a      	cmp	r2, r3
 8070f44:	d806      	bhi.n	8070f54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8070f46:	f7fe fe8b 	bl	806fc60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8070f4a:	68f9      	ldr	r1, [r7, #12]
 8070f4c:	6878      	ldr	r0, [r7, #4]
 8070f4e:	f7ff ff85 	bl	8070e5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8070f52:	e024      	b.n	8070f9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8070f54:	683b      	ldr	r3, [r7, #0]
 8070f56:	2b00      	cmp	r3, #0
 8070f58:	d008      	beq.n	8070f6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8070f5a:	4b13      	ldr	r3, [pc, #76]	; (8070fa8 <prvProcessTimerOrBlockTask+0x90>)
 8070f5c:	681b      	ldr	r3, [r3, #0]
 8070f5e:	681b      	ldr	r3, [r3, #0]
 8070f60:	2b00      	cmp	r3, #0
 8070f62:	d101      	bne.n	8070f68 <prvProcessTimerOrBlockTask+0x50>
 8070f64:	2301      	movs	r3, #1
 8070f66:	e000      	b.n	8070f6a <prvProcessTimerOrBlockTask+0x52>
 8070f68:	2300      	movs	r3, #0
 8070f6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8070f6c:	4b0f      	ldr	r3, [pc, #60]	; (8070fac <prvProcessTimerOrBlockTask+0x94>)
 8070f6e:	6818      	ldr	r0, [r3, #0]
 8070f70:	687a      	ldr	r2, [r7, #4]
 8070f72:	68fb      	ldr	r3, [r7, #12]
 8070f74:	1ad3      	subs	r3, r2, r3
 8070f76:	683a      	ldr	r2, [r7, #0]
 8070f78:	4619      	mov	r1, r3
 8070f7a:	f7fe fbd3 	bl	806f724 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8070f7e:	f7fe fe6f 	bl	806fc60 <xTaskResumeAll>
 8070f82:	4603      	mov	r3, r0
 8070f84:	2b00      	cmp	r3, #0
 8070f86:	d10a      	bne.n	8070f9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8070f88:	4b09      	ldr	r3, [pc, #36]	; (8070fb0 <prvProcessTimerOrBlockTask+0x98>)
 8070f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8070f8e:	601a      	str	r2, [r3, #0]
 8070f90:	f3bf 8f4f 	dsb	sy
 8070f94:	f3bf 8f6f 	isb	sy
}
 8070f98:	e001      	b.n	8070f9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8070f9a:	f7fe fe61 	bl	806fc60 <xTaskResumeAll>
}
 8070f9e:	bf00      	nop
 8070fa0:	3710      	adds	r7, #16
 8070fa2:	46bd      	mov	sp, r7
 8070fa4:	bd80      	pop	{r7, pc}
 8070fa6:	bf00      	nop
 8070fa8:	20001100 	.word	0x20001100
 8070fac:	20001104 	.word	0x20001104
 8070fb0:	e000ed04 	.word	0xe000ed04

08070fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8070fb4:	b480      	push	{r7}
 8070fb6:	b085      	sub	sp, #20
 8070fb8:	af00      	add	r7, sp, #0
 8070fba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8070fbc:	4b0e      	ldr	r3, [pc, #56]	; (8070ff8 <prvGetNextExpireTime+0x44>)
 8070fbe:	681b      	ldr	r3, [r3, #0]
 8070fc0:	681b      	ldr	r3, [r3, #0]
 8070fc2:	2b00      	cmp	r3, #0
 8070fc4:	d101      	bne.n	8070fca <prvGetNextExpireTime+0x16>
 8070fc6:	2201      	movs	r2, #1
 8070fc8:	e000      	b.n	8070fcc <prvGetNextExpireTime+0x18>
 8070fca:	2200      	movs	r2, #0
 8070fcc:	687b      	ldr	r3, [r7, #4]
 8070fce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8070fd0:	687b      	ldr	r3, [r7, #4]
 8070fd2:	681b      	ldr	r3, [r3, #0]
 8070fd4:	2b00      	cmp	r3, #0
 8070fd6:	d105      	bne.n	8070fe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8070fd8:	4b07      	ldr	r3, [pc, #28]	; (8070ff8 <prvGetNextExpireTime+0x44>)
 8070fda:	681b      	ldr	r3, [r3, #0]
 8070fdc:	68db      	ldr	r3, [r3, #12]
 8070fde:	681b      	ldr	r3, [r3, #0]
 8070fe0:	60fb      	str	r3, [r7, #12]
 8070fe2:	e001      	b.n	8070fe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8070fe4:	2300      	movs	r3, #0
 8070fe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8070fe8:	68fb      	ldr	r3, [r7, #12]
}
 8070fea:	4618      	mov	r0, r3
 8070fec:	3714      	adds	r7, #20
 8070fee:	46bd      	mov	sp, r7
 8070ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070ff4:	4770      	bx	lr
 8070ff6:	bf00      	nop
 8070ff8:	200010fc 	.word	0x200010fc

08070ffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8070ffc:	b580      	push	{r7, lr}
 8070ffe:	b084      	sub	sp, #16
 8071000:	af00      	add	r7, sp, #0
 8071002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8071004:	f7fe feca 	bl	806fd9c <xTaskGetTickCount>
 8071008:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 807100a:	4b0b      	ldr	r3, [pc, #44]	; (8071038 <prvSampleTimeNow+0x3c>)
 807100c:	681b      	ldr	r3, [r3, #0]
 807100e:	68fa      	ldr	r2, [r7, #12]
 8071010:	429a      	cmp	r2, r3
 8071012:	d205      	bcs.n	8071020 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8071014:	f000 f936 	bl	8071284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8071018:	687b      	ldr	r3, [r7, #4]
 807101a:	2201      	movs	r2, #1
 807101c:	601a      	str	r2, [r3, #0]
 807101e:	e002      	b.n	8071026 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8071020:	687b      	ldr	r3, [r7, #4]
 8071022:	2200      	movs	r2, #0
 8071024:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8071026:	4a04      	ldr	r2, [pc, #16]	; (8071038 <prvSampleTimeNow+0x3c>)
 8071028:	68fb      	ldr	r3, [r7, #12]
 807102a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 807102c:	68fb      	ldr	r3, [r7, #12]
}
 807102e:	4618      	mov	r0, r3
 8071030:	3710      	adds	r7, #16
 8071032:	46bd      	mov	sp, r7
 8071034:	bd80      	pop	{r7, pc}
 8071036:	bf00      	nop
 8071038:	2000110c 	.word	0x2000110c

0807103c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 807103c:	b580      	push	{r7, lr}
 807103e:	b086      	sub	sp, #24
 8071040:	af00      	add	r7, sp, #0
 8071042:	60f8      	str	r0, [r7, #12]
 8071044:	60b9      	str	r1, [r7, #8]
 8071046:	607a      	str	r2, [r7, #4]
 8071048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 807104a:	2300      	movs	r3, #0
 807104c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 807104e:	68fb      	ldr	r3, [r7, #12]
 8071050:	68ba      	ldr	r2, [r7, #8]
 8071052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8071054:	68fb      	ldr	r3, [r7, #12]
 8071056:	68fa      	ldr	r2, [r7, #12]
 8071058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 807105a:	68ba      	ldr	r2, [r7, #8]
 807105c:	687b      	ldr	r3, [r7, #4]
 807105e:	429a      	cmp	r2, r3
 8071060:	d812      	bhi.n	8071088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8071062:	687a      	ldr	r2, [r7, #4]
 8071064:	683b      	ldr	r3, [r7, #0]
 8071066:	1ad2      	subs	r2, r2, r3
 8071068:	68fb      	ldr	r3, [r7, #12]
 807106a:	699b      	ldr	r3, [r3, #24]
 807106c:	429a      	cmp	r2, r3
 807106e:	d302      	bcc.n	8071076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8071070:	2301      	movs	r3, #1
 8071072:	617b      	str	r3, [r7, #20]
 8071074:	e01b      	b.n	80710ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8071076:	4b10      	ldr	r3, [pc, #64]	; (80710b8 <prvInsertTimerInActiveList+0x7c>)
 8071078:	681a      	ldr	r2, [r3, #0]
 807107a:	68fb      	ldr	r3, [r7, #12]
 807107c:	3304      	adds	r3, #4
 807107e:	4619      	mov	r1, r3
 8071080:	4610      	mov	r0, r2
 8071082:	f7fd fa5c 	bl	806e53e <vListInsert>
 8071086:	e012      	b.n	80710ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8071088:	687a      	ldr	r2, [r7, #4]
 807108a:	683b      	ldr	r3, [r7, #0]
 807108c:	429a      	cmp	r2, r3
 807108e:	d206      	bcs.n	807109e <prvInsertTimerInActiveList+0x62>
 8071090:	68ba      	ldr	r2, [r7, #8]
 8071092:	683b      	ldr	r3, [r7, #0]
 8071094:	429a      	cmp	r2, r3
 8071096:	d302      	bcc.n	807109e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8071098:	2301      	movs	r3, #1
 807109a:	617b      	str	r3, [r7, #20]
 807109c:	e007      	b.n	80710ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 807109e:	4b07      	ldr	r3, [pc, #28]	; (80710bc <prvInsertTimerInActiveList+0x80>)
 80710a0:	681a      	ldr	r2, [r3, #0]
 80710a2:	68fb      	ldr	r3, [r7, #12]
 80710a4:	3304      	adds	r3, #4
 80710a6:	4619      	mov	r1, r3
 80710a8:	4610      	mov	r0, r2
 80710aa:	f7fd fa48 	bl	806e53e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80710ae:	697b      	ldr	r3, [r7, #20]
}
 80710b0:	4618      	mov	r0, r3
 80710b2:	3718      	adds	r7, #24
 80710b4:	46bd      	mov	sp, r7
 80710b6:	bd80      	pop	{r7, pc}
 80710b8:	20001100 	.word	0x20001100
 80710bc:	200010fc 	.word	0x200010fc

080710c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80710c0:	b580      	push	{r7, lr}
 80710c2:	b08e      	sub	sp, #56	; 0x38
 80710c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80710c6:	e0ca      	b.n	807125e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80710c8:	687b      	ldr	r3, [r7, #4]
 80710ca:	2b00      	cmp	r3, #0
 80710cc:	da18      	bge.n	8071100 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80710ce:	1d3b      	adds	r3, r7, #4
 80710d0:	3304      	adds	r3, #4
 80710d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80710d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80710d6:	2b00      	cmp	r3, #0
 80710d8:	d10a      	bne.n	80710f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80710da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80710de:	f383 8811 	msr	BASEPRI, r3
 80710e2:	f3bf 8f6f 	isb	sy
 80710e6:	f3bf 8f4f 	dsb	sy
 80710ea:	61fb      	str	r3, [r7, #28]
}
 80710ec:	bf00      	nop
 80710ee:	e7fe      	b.n	80710ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80710f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80710f2:	681b      	ldr	r3, [r3, #0]
 80710f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80710f6:	6850      	ldr	r0, [r2, #4]
 80710f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80710fa:	6892      	ldr	r2, [r2, #8]
 80710fc:	4611      	mov	r1, r2
 80710fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8071100:	687b      	ldr	r3, [r7, #4]
 8071102:	2b00      	cmp	r3, #0
 8071104:	f2c0 80aa 	blt.w	807125c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8071108:	68fb      	ldr	r3, [r7, #12]
 807110a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 807110c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807110e:	695b      	ldr	r3, [r3, #20]
 8071110:	2b00      	cmp	r3, #0
 8071112:	d004      	beq.n	807111e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8071114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071116:	3304      	adds	r3, #4
 8071118:	4618      	mov	r0, r3
 807111a:	f7fd fa49 	bl	806e5b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 807111e:	463b      	mov	r3, r7
 8071120:	4618      	mov	r0, r3
 8071122:	f7ff ff6b 	bl	8070ffc <prvSampleTimeNow>
 8071126:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8071128:	687b      	ldr	r3, [r7, #4]
 807112a:	2b09      	cmp	r3, #9
 807112c:	f200 8097 	bhi.w	807125e <prvProcessReceivedCommands+0x19e>
 8071130:	a201      	add	r2, pc, #4	; (adr r2, 8071138 <prvProcessReceivedCommands+0x78>)
 8071132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8071136:	bf00      	nop
 8071138:	08071161 	.word	0x08071161
 807113c:	08071161 	.word	0x08071161
 8071140:	08071161 	.word	0x08071161
 8071144:	080711d5 	.word	0x080711d5
 8071148:	080711e9 	.word	0x080711e9
 807114c:	08071233 	.word	0x08071233
 8071150:	08071161 	.word	0x08071161
 8071154:	08071161 	.word	0x08071161
 8071158:	080711d5 	.word	0x080711d5
 807115c:	080711e9 	.word	0x080711e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8071160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071166:	f043 0301 	orr.w	r3, r3, #1
 807116a:	b2da      	uxtb	r2, r3
 807116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807116e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8071172:	68ba      	ldr	r2, [r7, #8]
 8071174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071176:	699b      	ldr	r3, [r3, #24]
 8071178:	18d1      	adds	r1, r2, r3
 807117a:	68bb      	ldr	r3, [r7, #8]
 807117c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 807117e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8071180:	f7ff ff5c 	bl	807103c <prvInsertTimerInActiveList>
 8071184:	4603      	mov	r3, r0
 8071186:	2b00      	cmp	r3, #0
 8071188:	d069      	beq.n	807125e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 807118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807118c:	6a1b      	ldr	r3, [r3, #32]
 807118e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8071190:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8071192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071198:	f003 0304 	and.w	r3, r3, #4
 807119c:	2b00      	cmp	r3, #0
 807119e:	d05e      	beq.n	807125e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80711a0:	68ba      	ldr	r2, [r7, #8]
 80711a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80711a4:	699b      	ldr	r3, [r3, #24]
 80711a6:	441a      	add	r2, r3
 80711a8:	2300      	movs	r3, #0
 80711aa:	9300      	str	r3, [sp, #0]
 80711ac:	2300      	movs	r3, #0
 80711ae:	2100      	movs	r1, #0
 80711b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80711b2:	f7ff fe05 	bl	8070dc0 <xTimerGenericCommand>
 80711b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80711b8:	6a3b      	ldr	r3, [r7, #32]
 80711ba:	2b00      	cmp	r3, #0
 80711bc:	d14f      	bne.n	807125e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80711be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80711c2:	f383 8811 	msr	BASEPRI, r3
 80711c6:	f3bf 8f6f 	isb	sy
 80711ca:	f3bf 8f4f 	dsb	sy
 80711ce:	61bb      	str	r3, [r7, #24]
}
 80711d0:	bf00      	nop
 80711d2:	e7fe      	b.n	80711d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80711d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80711d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80711da:	f023 0301 	bic.w	r3, r3, #1
 80711de:	b2da      	uxtb	r2, r3
 80711e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80711e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80711e6:	e03a      	b.n	807125e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80711e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80711ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80711ee:	f043 0301 	orr.w	r3, r3, #1
 80711f2:	b2da      	uxtb	r2, r3
 80711f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80711f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80711fa:	68ba      	ldr	r2, [r7, #8]
 80711fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80711fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8071200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071202:	699b      	ldr	r3, [r3, #24]
 8071204:	2b00      	cmp	r3, #0
 8071206:	d10a      	bne.n	807121e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8071208:	f04f 0350 	mov.w	r3, #80	; 0x50
 807120c:	f383 8811 	msr	BASEPRI, r3
 8071210:	f3bf 8f6f 	isb	sy
 8071214:	f3bf 8f4f 	dsb	sy
 8071218:	617b      	str	r3, [r7, #20]
}
 807121a:	bf00      	nop
 807121c:	e7fe      	b.n	807121c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 807121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071220:	699a      	ldr	r2, [r3, #24]
 8071222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071224:	18d1      	adds	r1, r2, r3
 8071226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 807122a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 807122c:	f7ff ff06 	bl	807103c <prvInsertTimerInActiveList>
					break;
 8071230:	e015      	b.n	807125e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8071232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071238:	f003 0302 	and.w	r3, r3, #2
 807123c:	2b00      	cmp	r3, #0
 807123e:	d103      	bne.n	8071248 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8071240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8071242:	f000 fbfd 	bl	8071a40 <vPortFree>
 8071246:	e00a      	b.n	807125e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8071248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807124a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 807124e:	f023 0301 	bic.w	r3, r3, #1
 8071252:	b2da      	uxtb	r2, r3
 8071254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 807125a:	e000      	b.n	807125e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 807125c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 807125e:	4b08      	ldr	r3, [pc, #32]	; (8071280 <prvProcessReceivedCommands+0x1c0>)
 8071260:	681b      	ldr	r3, [r3, #0]
 8071262:	1d39      	adds	r1, r7, #4
 8071264:	2200      	movs	r2, #0
 8071266:	4618      	mov	r0, r3
 8071268:	f7fd fe50 	bl	806ef0c <xQueueReceive>
 807126c:	4603      	mov	r3, r0
 807126e:	2b00      	cmp	r3, #0
 8071270:	f47f af2a 	bne.w	80710c8 <prvProcessReceivedCommands+0x8>
	}
}
 8071274:	bf00      	nop
 8071276:	bf00      	nop
 8071278:	3730      	adds	r7, #48	; 0x30
 807127a:	46bd      	mov	sp, r7
 807127c:	bd80      	pop	{r7, pc}
 807127e:	bf00      	nop
 8071280:	20001104 	.word	0x20001104

08071284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8071284:	b580      	push	{r7, lr}
 8071286:	b088      	sub	sp, #32
 8071288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 807128a:	e048      	b.n	807131e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 807128c:	4b2d      	ldr	r3, [pc, #180]	; (8071344 <prvSwitchTimerLists+0xc0>)
 807128e:	681b      	ldr	r3, [r3, #0]
 8071290:	68db      	ldr	r3, [r3, #12]
 8071292:	681b      	ldr	r3, [r3, #0]
 8071294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8071296:	4b2b      	ldr	r3, [pc, #172]	; (8071344 <prvSwitchTimerLists+0xc0>)
 8071298:	681b      	ldr	r3, [r3, #0]
 807129a:	68db      	ldr	r3, [r3, #12]
 807129c:	68db      	ldr	r3, [r3, #12]
 807129e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80712a0:	68fb      	ldr	r3, [r7, #12]
 80712a2:	3304      	adds	r3, #4
 80712a4:	4618      	mov	r0, r3
 80712a6:	f7fd f983 	bl	806e5b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80712aa:	68fb      	ldr	r3, [r7, #12]
 80712ac:	6a1b      	ldr	r3, [r3, #32]
 80712ae:	68f8      	ldr	r0, [r7, #12]
 80712b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80712b2:	68fb      	ldr	r3, [r7, #12]
 80712b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80712b8:	f003 0304 	and.w	r3, r3, #4
 80712bc:	2b00      	cmp	r3, #0
 80712be:	d02e      	beq.n	807131e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80712c0:	68fb      	ldr	r3, [r7, #12]
 80712c2:	699b      	ldr	r3, [r3, #24]
 80712c4:	693a      	ldr	r2, [r7, #16]
 80712c6:	4413      	add	r3, r2
 80712c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80712ca:	68ba      	ldr	r2, [r7, #8]
 80712cc:	693b      	ldr	r3, [r7, #16]
 80712ce:	429a      	cmp	r2, r3
 80712d0:	d90e      	bls.n	80712f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80712d2:	68fb      	ldr	r3, [r7, #12]
 80712d4:	68ba      	ldr	r2, [r7, #8]
 80712d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80712d8:	68fb      	ldr	r3, [r7, #12]
 80712da:	68fa      	ldr	r2, [r7, #12]
 80712dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80712de:	4b19      	ldr	r3, [pc, #100]	; (8071344 <prvSwitchTimerLists+0xc0>)
 80712e0:	681a      	ldr	r2, [r3, #0]
 80712e2:	68fb      	ldr	r3, [r7, #12]
 80712e4:	3304      	adds	r3, #4
 80712e6:	4619      	mov	r1, r3
 80712e8:	4610      	mov	r0, r2
 80712ea:	f7fd f928 	bl	806e53e <vListInsert>
 80712ee:	e016      	b.n	807131e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80712f0:	2300      	movs	r3, #0
 80712f2:	9300      	str	r3, [sp, #0]
 80712f4:	2300      	movs	r3, #0
 80712f6:	693a      	ldr	r2, [r7, #16]
 80712f8:	2100      	movs	r1, #0
 80712fa:	68f8      	ldr	r0, [r7, #12]
 80712fc:	f7ff fd60 	bl	8070dc0 <xTimerGenericCommand>
 8071300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8071302:	687b      	ldr	r3, [r7, #4]
 8071304:	2b00      	cmp	r3, #0
 8071306:	d10a      	bne.n	807131e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8071308:	f04f 0350 	mov.w	r3, #80	; 0x50
 807130c:	f383 8811 	msr	BASEPRI, r3
 8071310:	f3bf 8f6f 	isb	sy
 8071314:	f3bf 8f4f 	dsb	sy
 8071318:	603b      	str	r3, [r7, #0]
}
 807131a:	bf00      	nop
 807131c:	e7fe      	b.n	807131c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 807131e:	4b09      	ldr	r3, [pc, #36]	; (8071344 <prvSwitchTimerLists+0xc0>)
 8071320:	681b      	ldr	r3, [r3, #0]
 8071322:	681b      	ldr	r3, [r3, #0]
 8071324:	2b00      	cmp	r3, #0
 8071326:	d1b1      	bne.n	807128c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8071328:	4b06      	ldr	r3, [pc, #24]	; (8071344 <prvSwitchTimerLists+0xc0>)
 807132a:	681b      	ldr	r3, [r3, #0]
 807132c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 807132e:	4b06      	ldr	r3, [pc, #24]	; (8071348 <prvSwitchTimerLists+0xc4>)
 8071330:	681b      	ldr	r3, [r3, #0]
 8071332:	4a04      	ldr	r2, [pc, #16]	; (8071344 <prvSwitchTimerLists+0xc0>)
 8071334:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8071336:	4a04      	ldr	r2, [pc, #16]	; (8071348 <prvSwitchTimerLists+0xc4>)
 8071338:	697b      	ldr	r3, [r7, #20]
 807133a:	6013      	str	r3, [r2, #0]
}
 807133c:	bf00      	nop
 807133e:	3718      	adds	r7, #24
 8071340:	46bd      	mov	sp, r7
 8071342:	bd80      	pop	{r7, pc}
 8071344:	200010fc 	.word	0x200010fc
 8071348:	20001100 	.word	0x20001100

0807134c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 807134c:	b580      	push	{r7, lr}
 807134e:	b082      	sub	sp, #8
 8071350:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8071352:	f000 f987 	bl	8071664 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8071356:	4b15      	ldr	r3, [pc, #84]	; (80713ac <prvCheckForValidListAndQueue+0x60>)
 8071358:	681b      	ldr	r3, [r3, #0]
 807135a:	2b00      	cmp	r3, #0
 807135c:	d120      	bne.n	80713a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 807135e:	4814      	ldr	r0, [pc, #80]	; (80713b0 <prvCheckForValidListAndQueue+0x64>)
 8071360:	f7fd f89c 	bl	806e49c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8071364:	4813      	ldr	r0, [pc, #76]	; (80713b4 <prvCheckForValidListAndQueue+0x68>)
 8071366:	f7fd f899 	bl	806e49c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 807136a:	4b13      	ldr	r3, [pc, #76]	; (80713b8 <prvCheckForValidListAndQueue+0x6c>)
 807136c:	4a10      	ldr	r2, [pc, #64]	; (80713b0 <prvCheckForValidListAndQueue+0x64>)
 807136e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8071370:	4b12      	ldr	r3, [pc, #72]	; (80713bc <prvCheckForValidListAndQueue+0x70>)
 8071372:	4a10      	ldr	r2, [pc, #64]	; (80713b4 <prvCheckForValidListAndQueue+0x68>)
 8071374:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8071376:	2300      	movs	r3, #0
 8071378:	9300      	str	r3, [sp, #0]
 807137a:	4b11      	ldr	r3, [pc, #68]	; (80713c0 <prvCheckForValidListAndQueue+0x74>)
 807137c:	4a11      	ldr	r2, [pc, #68]	; (80713c4 <prvCheckForValidListAndQueue+0x78>)
 807137e:	2110      	movs	r1, #16
 8071380:	200a      	movs	r0, #10
 8071382:	f7fd f9a7 	bl	806e6d4 <xQueueGenericCreateStatic>
 8071386:	4603      	mov	r3, r0
 8071388:	4a08      	ldr	r2, [pc, #32]	; (80713ac <prvCheckForValidListAndQueue+0x60>)
 807138a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 807138c:	4b07      	ldr	r3, [pc, #28]	; (80713ac <prvCheckForValidListAndQueue+0x60>)
 807138e:	681b      	ldr	r3, [r3, #0]
 8071390:	2b00      	cmp	r3, #0
 8071392:	d005      	beq.n	80713a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8071394:	4b05      	ldr	r3, [pc, #20]	; (80713ac <prvCheckForValidListAndQueue+0x60>)
 8071396:	681b      	ldr	r3, [r3, #0]
 8071398:	490b      	ldr	r1, [pc, #44]	; (80713c8 <prvCheckForValidListAndQueue+0x7c>)
 807139a:	4618      	mov	r0, r3
 807139c:	f7fe f96e 	bl	806f67c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80713a0:	f000 f990 	bl	80716c4 <vPortExitCritical>
}
 80713a4:	bf00      	nop
 80713a6:	46bd      	mov	sp, r7
 80713a8:	bd80      	pop	{r7, pc}
 80713aa:	bf00      	nop
 80713ac:	20001104 	.word	0x20001104
 80713b0:	200010d4 	.word	0x200010d4
 80713b4:	200010e8 	.word	0x200010e8
 80713b8:	200010fc 	.word	0x200010fc
 80713bc:	20001100 	.word	0x20001100
 80713c0:	200011b0 	.word	0x200011b0
 80713c4:	20001110 	.word	0x20001110
 80713c8:	08076cac 	.word	0x08076cac

080713cc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80713cc:	b580      	push	{r7, lr}
 80713ce:	b086      	sub	sp, #24
 80713d0:	af00      	add	r7, sp, #0
 80713d2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80713d4:	687b      	ldr	r3, [r7, #4]
 80713d6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80713d8:	687b      	ldr	r3, [r7, #4]
 80713da:	2b00      	cmp	r3, #0
 80713dc:	d10a      	bne.n	80713f4 <pvTimerGetTimerID+0x28>
	__asm volatile
 80713de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80713e2:	f383 8811 	msr	BASEPRI, r3
 80713e6:	f3bf 8f6f 	isb	sy
 80713ea:	f3bf 8f4f 	dsb	sy
 80713ee:	60fb      	str	r3, [r7, #12]
}
 80713f0:	bf00      	nop
 80713f2:	e7fe      	b.n	80713f2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80713f4:	f000 f936 	bl	8071664 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80713f8:	697b      	ldr	r3, [r7, #20]
 80713fa:	69db      	ldr	r3, [r3, #28]
 80713fc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80713fe:	f000 f961 	bl	80716c4 <vPortExitCritical>

	return pvReturn;
 8071402:	693b      	ldr	r3, [r7, #16]
}
 8071404:	4618      	mov	r0, r3
 8071406:	3718      	adds	r7, #24
 8071408:	46bd      	mov	sp, r7
 807140a:	bd80      	pop	{r7, pc}

0807140c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 807140c:	b480      	push	{r7}
 807140e:	b085      	sub	sp, #20
 8071410:	af00      	add	r7, sp, #0
 8071412:	60f8      	str	r0, [r7, #12]
 8071414:	60b9      	str	r1, [r7, #8]
 8071416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8071418:	68fb      	ldr	r3, [r7, #12]
 807141a:	3b04      	subs	r3, #4
 807141c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 807141e:	68fb      	ldr	r3, [r7, #12]
 8071420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8071424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8071426:	68fb      	ldr	r3, [r7, #12]
 8071428:	3b04      	subs	r3, #4
 807142a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 807142c:	68bb      	ldr	r3, [r7, #8]
 807142e:	f023 0201 	bic.w	r2, r3, #1
 8071432:	68fb      	ldr	r3, [r7, #12]
 8071434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8071436:	68fb      	ldr	r3, [r7, #12]
 8071438:	3b04      	subs	r3, #4
 807143a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 807143c:	4a0c      	ldr	r2, [pc, #48]	; (8071470 <pxPortInitialiseStack+0x64>)
 807143e:	68fb      	ldr	r3, [r7, #12]
 8071440:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8071442:	68fb      	ldr	r3, [r7, #12]
 8071444:	3b14      	subs	r3, #20
 8071446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8071448:	687a      	ldr	r2, [r7, #4]
 807144a:	68fb      	ldr	r3, [r7, #12]
 807144c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 807144e:	68fb      	ldr	r3, [r7, #12]
 8071450:	3b04      	subs	r3, #4
 8071452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8071454:	68fb      	ldr	r3, [r7, #12]
 8071456:	f06f 0202 	mvn.w	r2, #2
 807145a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 807145c:	68fb      	ldr	r3, [r7, #12]
 807145e:	3b20      	subs	r3, #32
 8071460:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8071462:	68fb      	ldr	r3, [r7, #12]
}
 8071464:	4618      	mov	r0, r3
 8071466:	3714      	adds	r7, #20
 8071468:	46bd      	mov	sp, r7
 807146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807146e:	4770      	bx	lr
 8071470:	08071475 	.word	0x08071475

08071474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8071474:	b480      	push	{r7}
 8071476:	b085      	sub	sp, #20
 8071478:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 807147a:	2300      	movs	r3, #0
 807147c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 807147e:	4b12      	ldr	r3, [pc, #72]	; (80714c8 <prvTaskExitError+0x54>)
 8071480:	681b      	ldr	r3, [r3, #0]
 8071482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8071486:	d00a      	beq.n	807149e <prvTaskExitError+0x2a>
	__asm volatile
 8071488:	f04f 0350 	mov.w	r3, #80	; 0x50
 807148c:	f383 8811 	msr	BASEPRI, r3
 8071490:	f3bf 8f6f 	isb	sy
 8071494:	f3bf 8f4f 	dsb	sy
 8071498:	60fb      	str	r3, [r7, #12]
}
 807149a:	bf00      	nop
 807149c:	e7fe      	b.n	807149c <prvTaskExitError+0x28>
	__asm volatile
 807149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80714a2:	f383 8811 	msr	BASEPRI, r3
 80714a6:	f3bf 8f6f 	isb	sy
 80714aa:	f3bf 8f4f 	dsb	sy
 80714ae:	60bb      	str	r3, [r7, #8]
}
 80714b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80714b2:	bf00      	nop
 80714b4:	687b      	ldr	r3, [r7, #4]
 80714b6:	2b00      	cmp	r3, #0
 80714b8:	d0fc      	beq.n	80714b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80714ba:	bf00      	nop
 80714bc:	bf00      	nop
 80714be:	3714      	adds	r7, #20
 80714c0:	46bd      	mov	sp, r7
 80714c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80714c6:	4770      	bx	lr
 80714c8:	20000024 	.word	0x20000024
 80714cc:	00000000 	.word	0x00000000

080714d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80714d0:	4b07      	ldr	r3, [pc, #28]	; (80714f0 <pxCurrentTCBConst2>)
 80714d2:	6819      	ldr	r1, [r3, #0]
 80714d4:	6808      	ldr	r0, [r1, #0]
 80714d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80714da:	f380 8809 	msr	PSP, r0
 80714de:	f3bf 8f6f 	isb	sy
 80714e2:	f04f 0000 	mov.w	r0, #0
 80714e6:	f380 8811 	msr	BASEPRI, r0
 80714ea:	4770      	bx	lr
 80714ec:	f3af 8000 	nop.w

080714f0 <pxCurrentTCBConst2>:
 80714f0:	20000bd4 	.word	0x20000bd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80714f4:	bf00      	nop
 80714f6:	bf00      	nop

080714f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80714f8:	4808      	ldr	r0, [pc, #32]	; (807151c <prvPortStartFirstTask+0x24>)
 80714fa:	6800      	ldr	r0, [r0, #0]
 80714fc:	6800      	ldr	r0, [r0, #0]
 80714fe:	f380 8808 	msr	MSP, r0
 8071502:	f04f 0000 	mov.w	r0, #0
 8071506:	f380 8814 	msr	CONTROL, r0
 807150a:	b662      	cpsie	i
 807150c:	b661      	cpsie	f
 807150e:	f3bf 8f4f 	dsb	sy
 8071512:	f3bf 8f6f 	isb	sy
 8071516:	df00      	svc	0
 8071518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 807151a:	bf00      	nop
 807151c:	e000ed08 	.word	0xe000ed08

08071520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8071520:	b580      	push	{r7, lr}
 8071522:	b086      	sub	sp, #24
 8071524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8071526:	4b46      	ldr	r3, [pc, #280]	; (8071640 <xPortStartScheduler+0x120>)
 8071528:	681b      	ldr	r3, [r3, #0]
 807152a:	4a46      	ldr	r2, [pc, #280]	; (8071644 <xPortStartScheduler+0x124>)
 807152c:	4293      	cmp	r3, r2
 807152e:	d10a      	bne.n	8071546 <xPortStartScheduler+0x26>
	__asm volatile
 8071530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071534:	f383 8811 	msr	BASEPRI, r3
 8071538:	f3bf 8f6f 	isb	sy
 807153c:	f3bf 8f4f 	dsb	sy
 8071540:	613b      	str	r3, [r7, #16]
}
 8071542:	bf00      	nop
 8071544:	e7fe      	b.n	8071544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8071546:	4b3e      	ldr	r3, [pc, #248]	; (8071640 <xPortStartScheduler+0x120>)
 8071548:	681b      	ldr	r3, [r3, #0]
 807154a:	4a3f      	ldr	r2, [pc, #252]	; (8071648 <xPortStartScheduler+0x128>)
 807154c:	4293      	cmp	r3, r2
 807154e:	d10a      	bne.n	8071566 <xPortStartScheduler+0x46>
	__asm volatile
 8071550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071554:	f383 8811 	msr	BASEPRI, r3
 8071558:	f3bf 8f6f 	isb	sy
 807155c:	f3bf 8f4f 	dsb	sy
 8071560:	60fb      	str	r3, [r7, #12]
}
 8071562:	bf00      	nop
 8071564:	e7fe      	b.n	8071564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8071566:	4b39      	ldr	r3, [pc, #228]	; (807164c <xPortStartScheduler+0x12c>)
 8071568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 807156a:	697b      	ldr	r3, [r7, #20]
 807156c:	781b      	ldrb	r3, [r3, #0]
 807156e:	b2db      	uxtb	r3, r3
 8071570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8071572:	697b      	ldr	r3, [r7, #20]
 8071574:	22ff      	movs	r2, #255	; 0xff
 8071576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8071578:	697b      	ldr	r3, [r7, #20]
 807157a:	781b      	ldrb	r3, [r3, #0]
 807157c:	b2db      	uxtb	r3, r3
 807157e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8071580:	78fb      	ldrb	r3, [r7, #3]
 8071582:	b2db      	uxtb	r3, r3
 8071584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8071588:	b2da      	uxtb	r2, r3
 807158a:	4b31      	ldr	r3, [pc, #196]	; (8071650 <xPortStartScheduler+0x130>)
 807158c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 807158e:	4b31      	ldr	r3, [pc, #196]	; (8071654 <xPortStartScheduler+0x134>)
 8071590:	2207      	movs	r2, #7
 8071592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8071594:	e009      	b.n	80715aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8071596:	4b2f      	ldr	r3, [pc, #188]	; (8071654 <xPortStartScheduler+0x134>)
 8071598:	681b      	ldr	r3, [r3, #0]
 807159a:	3b01      	subs	r3, #1
 807159c:	4a2d      	ldr	r2, [pc, #180]	; (8071654 <xPortStartScheduler+0x134>)
 807159e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80715a0:	78fb      	ldrb	r3, [r7, #3]
 80715a2:	b2db      	uxtb	r3, r3
 80715a4:	005b      	lsls	r3, r3, #1
 80715a6:	b2db      	uxtb	r3, r3
 80715a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80715aa:	78fb      	ldrb	r3, [r7, #3]
 80715ac:	b2db      	uxtb	r3, r3
 80715ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80715b2:	2b80      	cmp	r3, #128	; 0x80
 80715b4:	d0ef      	beq.n	8071596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80715b6:	4b27      	ldr	r3, [pc, #156]	; (8071654 <xPortStartScheduler+0x134>)
 80715b8:	681b      	ldr	r3, [r3, #0]
 80715ba:	f1c3 0307 	rsb	r3, r3, #7
 80715be:	2b04      	cmp	r3, #4
 80715c0:	d00a      	beq.n	80715d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80715c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80715c6:	f383 8811 	msr	BASEPRI, r3
 80715ca:	f3bf 8f6f 	isb	sy
 80715ce:	f3bf 8f4f 	dsb	sy
 80715d2:	60bb      	str	r3, [r7, #8]
}
 80715d4:	bf00      	nop
 80715d6:	e7fe      	b.n	80715d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80715d8:	4b1e      	ldr	r3, [pc, #120]	; (8071654 <xPortStartScheduler+0x134>)
 80715da:	681b      	ldr	r3, [r3, #0]
 80715dc:	021b      	lsls	r3, r3, #8
 80715de:	4a1d      	ldr	r2, [pc, #116]	; (8071654 <xPortStartScheduler+0x134>)
 80715e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80715e2:	4b1c      	ldr	r3, [pc, #112]	; (8071654 <xPortStartScheduler+0x134>)
 80715e4:	681b      	ldr	r3, [r3, #0]
 80715e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80715ea:	4a1a      	ldr	r2, [pc, #104]	; (8071654 <xPortStartScheduler+0x134>)
 80715ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80715ee:	687b      	ldr	r3, [r7, #4]
 80715f0:	b2da      	uxtb	r2, r3
 80715f2:	697b      	ldr	r3, [r7, #20]
 80715f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80715f6:	4b18      	ldr	r3, [pc, #96]	; (8071658 <xPortStartScheduler+0x138>)
 80715f8:	681b      	ldr	r3, [r3, #0]
 80715fa:	4a17      	ldr	r2, [pc, #92]	; (8071658 <xPortStartScheduler+0x138>)
 80715fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8071600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8071602:	4b15      	ldr	r3, [pc, #84]	; (8071658 <xPortStartScheduler+0x138>)
 8071604:	681b      	ldr	r3, [r3, #0]
 8071606:	4a14      	ldr	r2, [pc, #80]	; (8071658 <xPortStartScheduler+0x138>)
 8071608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 807160c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 807160e:	f000 f8dd 	bl	80717cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8071612:	4b12      	ldr	r3, [pc, #72]	; (807165c <xPortStartScheduler+0x13c>)
 8071614:	2200      	movs	r2, #0
 8071616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8071618:	f000 f8fc 	bl	8071814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 807161c:	4b10      	ldr	r3, [pc, #64]	; (8071660 <xPortStartScheduler+0x140>)
 807161e:	681b      	ldr	r3, [r3, #0]
 8071620:	4a0f      	ldr	r2, [pc, #60]	; (8071660 <xPortStartScheduler+0x140>)
 8071622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8071626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8071628:	f7ff ff66 	bl	80714f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 807162c:	f7fe fc80 	bl	806ff30 <vTaskSwitchContext>
	prvTaskExitError();
 8071630:	f7ff ff20 	bl	8071474 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8071634:	2300      	movs	r3, #0
}
 8071636:	4618      	mov	r0, r3
 8071638:	3718      	adds	r7, #24
 807163a:	46bd      	mov	sp, r7
 807163c:	bd80      	pop	{r7, pc}
 807163e:	bf00      	nop
 8071640:	e000ed00 	.word	0xe000ed00
 8071644:	410fc271 	.word	0x410fc271
 8071648:	410fc270 	.word	0x410fc270
 807164c:	e000e400 	.word	0xe000e400
 8071650:	20001200 	.word	0x20001200
 8071654:	20001204 	.word	0x20001204
 8071658:	e000ed20 	.word	0xe000ed20
 807165c:	20000024 	.word	0x20000024
 8071660:	e000ef34 	.word	0xe000ef34

08071664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8071664:	b480      	push	{r7}
 8071666:	b083      	sub	sp, #12
 8071668:	af00      	add	r7, sp, #0
	__asm volatile
 807166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 807166e:	f383 8811 	msr	BASEPRI, r3
 8071672:	f3bf 8f6f 	isb	sy
 8071676:	f3bf 8f4f 	dsb	sy
 807167a:	607b      	str	r3, [r7, #4]
}
 807167c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 807167e:	4b0f      	ldr	r3, [pc, #60]	; (80716bc <vPortEnterCritical+0x58>)
 8071680:	681b      	ldr	r3, [r3, #0]
 8071682:	3301      	adds	r3, #1
 8071684:	4a0d      	ldr	r2, [pc, #52]	; (80716bc <vPortEnterCritical+0x58>)
 8071686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8071688:	4b0c      	ldr	r3, [pc, #48]	; (80716bc <vPortEnterCritical+0x58>)
 807168a:	681b      	ldr	r3, [r3, #0]
 807168c:	2b01      	cmp	r3, #1
 807168e:	d10f      	bne.n	80716b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8071690:	4b0b      	ldr	r3, [pc, #44]	; (80716c0 <vPortEnterCritical+0x5c>)
 8071692:	681b      	ldr	r3, [r3, #0]
 8071694:	b2db      	uxtb	r3, r3
 8071696:	2b00      	cmp	r3, #0
 8071698:	d00a      	beq.n	80716b0 <vPortEnterCritical+0x4c>
	__asm volatile
 807169a:	f04f 0350 	mov.w	r3, #80	; 0x50
 807169e:	f383 8811 	msr	BASEPRI, r3
 80716a2:	f3bf 8f6f 	isb	sy
 80716a6:	f3bf 8f4f 	dsb	sy
 80716aa:	603b      	str	r3, [r7, #0]
}
 80716ac:	bf00      	nop
 80716ae:	e7fe      	b.n	80716ae <vPortEnterCritical+0x4a>
	}
}
 80716b0:	bf00      	nop
 80716b2:	370c      	adds	r7, #12
 80716b4:	46bd      	mov	sp, r7
 80716b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80716ba:	4770      	bx	lr
 80716bc:	20000024 	.word	0x20000024
 80716c0:	e000ed04 	.word	0xe000ed04

080716c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80716c4:	b480      	push	{r7}
 80716c6:	b083      	sub	sp, #12
 80716c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80716ca:	4b12      	ldr	r3, [pc, #72]	; (8071714 <vPortExitCritical+0x50>)
 80716cc:	681b      	ldr	r3, [r3, #0]
 80716ce:	2b00      	cmp	r3, #0
 80716d0:	d10a      	bne.n	80716e8 <vPortExitCritical+0x24>
	__asm volatile
 80716d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80716d6:	f383 8811 	msr	BASEPRI, r3
 80716da:	f3bf 8f6f 	isb	sy
 80716de:	f3bf 8f4f 	dsb	sy
 80716e2:	607b      	str	r3, [r7, #4]
}
 80716e4:	bf00      	nop
 80716e6:	e7fe      	b.n	80716e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80716e8:	4b0a      	ldr	r3, [pc, #40]	; (8071714 <vPortExitCritical+0x50>)
 80716ea:	681b      	ldr	r3, [r3, #0]
 80716ec:	3b01      	subs	r3, #1
 80716ee:	4a09      	ldr	r2, [pc, #36]	; (8071714 <vPortExitCritical+0x50>)
 80716f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80716f2:	4b08      	ldr	r3, [pc, #32]	; (8071714 <vPortExitCritical+0x50>)
 80716f4:	681b      	ldr	r3, [r3, #0]
 80716f6:	2b00      	cmp	r3, #0
 80716f8:	d105      	bne.n	8071706 <vPortExitCritical+0x42>
 80716fa:	2300      	movs	r3, #0
 80716fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80716fe:	683b      	ldr	r3, [r7, #0]
 8071700:	f383 8811 	msr	BASEPRI, r3
}
 8071704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8071706:	bf00      	nop
 8071708:	370c      	adds	r7, #12
 807170a:	46bd      	mov	sp, r7
 807170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071710:	4770      	bx	lr
 8071712:	bf00      	nop
 8071714:	20000024 	.word	0x20000024
	...

08071720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8071720:	f3ef 8009 	mrs	r0, PSP
 8071724:	f3bf 8f6f 	isb	sy
 8071728:	4b15      	ldr	r3, [pc, #84]	; (8071780 <pxCurrentTCBConst>)
 807172a:	681a      	ldr	r2, [r3, #0]
 807172c:	f01e 0f10 	tst.w	lr, #16
 8071730:	bf08      	it	eq
 8071732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8071736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 807173a:	6010      	str	r0, [r2, #0]
 807173c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8071740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8071744:	f380 8811 	msr	BASEPRI, r0
 8071748:	f3bf 8f4f 	dsb	sy
 807174c:	f3bf 8f6f 	isb	sy
 8071750:	f7fe fbee 	bl	806ff30 <vTaskSwitchContext>
 8071754:	f04f 0000 	mov.w	r0, #0
 8071758:	f380 8811 	msr	BASEPRI, r0
 807175c:	bc09      	pop	{r0, r3}
 807175e:	6819      	ldr	r1, [r3, #0]
 8071760:	6808      	ldr	r0, [r1, #0]
 8071762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8071766:	f01e 0f10 	tst.w	lr, #16
 807176a:	bf08      	it	eq
 807176c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8071770:	f380 8809 	msr	PSP, r0
 8071774:	f3bf 8f6f 	isb	sy
 8071778:	4770      	bx	lr
 807177a:	bf00      	nop
 807177c:	f3af 8000 	nop.w

08071780 <pxCurrentTCBConst>:
 8071780:	20000bd4 	.word	0x20000bd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8071784:	bf00      	nop
 8071786:	bf00      	nop

08071788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8071788:	b580      	push	{r7, lr}
 807178a:	b082      	sub	sp, #8
 807178c:	af00      	add	r7, sp, #0
	__asm volatile
 807178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071792:	f383 8811 	msr	BASEPRI, r3
 8071796:	f3bf 8f6f 	isb	sy
 807179a:	f3bf 8f4f 	dsb	sy
 807179e:	607b      	str	r3, [r7, #4]
}
 80717a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80717a2:	f7fe fb0b 	bl	806fdbc <xTaskIncrementTick>
 80717a6:	4603      	mov	r3, r0
 80717a8:	2b00      	cmp	r3, #0
 80717aa:	d003      	beq.n	80717b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80717ac:	4b06      	ldr	r3, [pc, #24]	; (80717c8 <xPortSysTickHandler+0x40>)
 80717ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80717b2:	601a      	str	r2, [r3, #0]
 80717b4:	2300      	movs	r3, #0
 80717b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80717b8:	683b      	ldr	r3, [r7, #0]
 80717ba:	f383 8811 	msr	BASEPRI, r3
}
 80717be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80717c0:	bf00      	nop
 80717c2:	3708      	adds	r7, #8
 80717c4:	46bd      	mov	sp, r7
 80717c6:	bd80      	pop	{r7, pc}
 80717c8:	e000ed04 	.word	0xe000ed04

080717cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80717cc:	b480      	push	{r7}
 80717ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80717d0:	4b0b      	ldr	r3, [pc, #44]	; (8071800 <vPortSetupTimerInterrupt+0x34>)
 80717d2:	2200      	movs	r2, #0
 80717d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80717d6:	4b0b      	ldr	r3, [pc, #44]	; (8071804 <vPortSetupTimerInterrupt+0x38>)
 80717d8:	2200      	movs	r2, #0
 80717da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80717dc:	4b0a      	ldr	r3, [pc, #40]	; (8071808 <vPortSetupTimerInterrupt+0x3c>)
 80717de:	681b      	ldr	r3, [r3, #0]
 80717e0:	4a0a      	ldr	r2, [pc, #40]	; (807180c <vPortSetupTimerInterrupt+0x40>)
 80717e2:	fba2 2303 	umull	r2, r3, r2, r3
 80717e6:	099b      	lsrs	r3, r3, #6
 80717e8:	4a09      	ldr	r2, [pc, #36]	; (8071810 <vPortSetupTimerInterrupt+0x44>)
 80717ea:	3b01      	subs	r3, #1
 80717ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80717ee:	4b04      	ldr	r3, [pc, #16]	; (8071800 <vPortSetupTimerInterrupt+0x34>)
 80717f0:	2207      	movs	r2, #7
 80717f2:	601a      	str	r2, [r3, #0]
}
 80717f4:	bf00      	nop
 80717f6:	46bd      	mov	sp, r7
 80717f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80717fc:	4770      	bx	lr
 80717fe:	bf00      	nop
 8071800:	e000e010 	.word	0xe000e010
 8071804:	e000e018 	.word	0xe000e018
 8071808:	20000000 	.word	0x20000000
 807180c:	10624dd3 	.word	0x10624dd3
 8071810:	e000e014 	.word	0xe000e014

08071814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8071814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8071824 <vPortEnableVFP+0x10>
 8071818:	6801      	ldr	r1, [r0, #0]
 807181a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 807181e:	6001      	str	r1, [r0, #0]
 8071820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8071822:	bf00      	nop
 8071824:	e000ed88 	.word	0xe000ed88

08071828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8071828:	b480      	push	{r7}
 807182a:	b085      	sub	sp, #20
 807182c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 807182e:	f3ef 8305 	mrs	r3, IPSR
 8071832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8071834:	68fb      	ldr	r3, [r7, #12]
 8071836:	2b0f      	cmp	r3, #15
 8071838:	d914      	bls.n	8071864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 807183a:	4a17      	ldr	r2, [pc, #92]	; (8071898 <vPortValidateInterruptPriority+0x70>)
 807183c:	68fb      	ldr	r3, [r7, #12]
 807183e:	4413      	add	r3, r2
 8071840:	781b      	ldrb	r3, [r3, #0]
 8071842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8071844:	4b15      	ldr	r3, [pc, #84]	; (807189c <vPortValidateInterruptPriority+0x74>)
 8071846:	781b      	ldrb	r3, [r3, #0]
 8071848:	7afa      	ldrb	r2, [r7, #11]
 807184a:	429a      	cmp	r2, r3
 807184c:	d20a      	bcs.n	8071864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 807184e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071852:	f383 8811 	msr	BASEPRI, r3
 8071856:	f3bf 8f6f 	isb	sy
 807185a:	f3bf 8f4f 	dsb	sy
 807185e:	607b      	str	r3, [r7, #4]
}
 8071860:	bf00      	nop
 8071862:	e7fe      	b.n	8071862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8071864:	4b0e      	ldr	r3, [pc, #56]	; (80718a0 <vPortValidateInterruptPriority+0x78>)
 8071866:	681b      	ldr	r3, [r3, #0]
 8071868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 807186c:	4b0d      	ldr	r3, [pc, #52]	; (80718a4 <vPortValidateInterruptPriority+0x7c>)
 807186e:	681b      	ldr	r3, [r3, #0]
 8071870:	429a      	cmp	r2, r3
 8071872:	d90a      	bls.n	807188a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8071874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071878:	f383 8811 	msr	BASEPRI, r3
 807187c:	f3bf 8f6f 	isb	sy
 8071880:	f3bf 8f4f 	dsb	sy
 8071884:	603b      	str	r3, [r7, #0]
}
 8071886:	bf00      	nop
 8071888:	e7fe      	b.n	8071888 <vPortValidateInterruptPriority+0x60>
	}
 807188a:	bf00      	nop
 807188c:	3714      	adds	r7, #20
 807188e:	46bd      	mov	sp, r7
 8071890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071894:	4770      	bx	lr
 8071896:	bf00      	nop
 8071898:	e000e3f0 	.word	0xe000e3f0
 807189c:	20001200 	.word	0x20001200
 80718a0:	e000ed0c 	.word	0xe000ed0c
 80718a4:	20001204 	.word	0x20001204

080718a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80718a8:	b580      	push	{r7, lr}
 80718aa:	b08a      	sub	sp, #40	; 0x28
 80718ac:	af00      	add	r7, sp, #0
 80718ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80718b0:	2300      	movs	r3, #0
 80718b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80718b4:	f7fe f9c6 	bl	806fc44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80718b8:	4b5b      	ldr	r3, [pc, #364]	; (8071a28 <pvPortMalloc+0x180>)
 80718ba:	681b      	ldr	r3, [r3, #0]
 80718bc:	2b00      	cmp	r3, #0
 80718be:	d101      	bne.n	80718c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80718c0:	f000 f920 	bl	8071b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80718c4:	4b59      	ldr	r3, [pc, #356]	; (8071a2c <pvPortMalloc+0x184>)
 80718c6:	681a      	ldr	r2, [r3, #0]
 80718c8:	687b      	ldr	r3, [r7, #4]
 80718ca:	4013      	ands	r3, r2
 80718cc:	2b00      	cmp	r3, #0
 80718ce:	f040 8093 	bne.w	80719f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80718d2:	687b      	ldr	r3, [r7, #4]
 80718d4:	2b00      	cmp	r3, #0
 80718d6:	d01d      	beq.n	8071914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80718d8:	2208      	movs	r2, #8
 80718da:	687b      	ldr	r3, [r7, #4]
 80718dc:	4413      	add	r3, r2
 80718de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80718e0:	687b      	ldr	r3, [r7, #4]
 80718e2:	f003 0307 	and.w	r3, r3, #7
 80718e6:	2b00      	cmp	r3, #0
 80718e8:	d014      	beq.n	8071914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80718ea:	687b      	ldr	r3, [r7, #4]
 80718ec:	f023 0307 	bic.w	r3, r3, #7
 80718f0:	3308      	adds	r3, #8
 80718f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80718f4:	687b      	ldr	r3, [r7, #4]
 80718f6:	f003 0307 	and.w	r3, r3, #7
 80718fa:	2b00      	cmp	r3, #0
 80718fc:	d00a      	beq.n	8071914 <pvPortMalloc+0x6c>
	__asm volatile
 80718fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071902:	f383 8811 	msr	BASEPRI, r3
 8071906:	f3bf 8f6f 	isb	sy
 807190a:	f3bf 8f4f 	dsb	sy
 807190e:	617b      	str	r3, [r7, #20]
}
 8071910:	bf00      	nop
 8071912:	e7fe      	b.n	8071912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8071914:	687b      	ldr	r3, [r7, #4]
 8071916:	2b00      	cmp	r3, #0
 8071918:	d06e      	beq.n	80719f8 <pvPortMalloc+0x150>
 807191a:	4b45      	ldr	r3, [pc, #276]	; (8071a30 <pvPortMalloc+0x188>)
 807191c:	681b      	ldr	r3, [r3, #0]
 807191e:	687a      	ldr	r2, [r7, #4]
 8071920:	429a      	cmp	r2, r3
 8071922:	d869      	bhi.n	80719f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8071924:	4b43      	ldr	r3, [pc, #268]	; (8071a34 <pvPortMalloc+0x18c>)
 8071926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8071928:	4b42      	ldr	r3, [pc, #264]	; (8071a34 <pvPortMalloc+0x18c>)
 807192a:	681b      	ldr	r3, [r3, #0]
 807192c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 807192e:	e004      	b.n	807193a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8071930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8071934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071936:	681b      	ldr	r3, [r3, #0]
 8071938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 807193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807193c:	685b      	ldr	r3, [r3, #4]
 807193e:	687a      	ldr	r2, [r7, #4]
 8071940:	429a      	cmp	r2, r3
 8071942:	d903      	bls.n	807194c <pvPortMalloc+0xa4>
 8071944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071946:	681b      	ldr	r3, [r3, #0]
 8071948:	2b00      	cmp	r3, #0
 807194a:	d1f1      	bne.n	8071930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 807194c:	4b36      	ldr	r3, [pc, #216]	; (8071a28 <pvPortMalloc+0x180>)
 807194e:	681b      	ldr	r3, [r3, #0]
 8071950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8071952:	429a      	cmp	r2, r3
 8071954:	d050      	beq.n	80719f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8071956:	6a3b      	ldr	r3, [r7, #32]
 8071958:	681b      	ldr	r3, [r3, #0]
 807195a:	2208      	movs	r2, #8
 807195c:	4413      	add	r3, r2
 807195e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8071960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071962:	681a      	ldr	r2, [r3, #0]
 8071964:	6a3b      	ldr	r3, [r7, #32]
 8071966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8071968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807196a:	685a      	ldr	r2, [r3, #4]
 807196c:	687b      	ldr	r3, [r7, #4]
 807196e:	1ad2      	subs	r2, r2, r3
 8071970:	2308      	movs	r3, #8
 8071972:	005b      	lsls	r3, r3, #1
 8071974:	429a      	cmp	r2, r3
 8071976:	d91f      	bls.n	80719b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8071978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 807197a:	687b      	ldr	r3, [r7, #4]
 807197c:	4413      	add	r3, r2
 807197e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8071980:	69bb      	ldr	r3, [r7, #24]
 8071982:	f003 0307 	and.w	r3, r3, #7
 8071986:	2b00      	cmp	r3, #0
 8071988:	d00a      	beq.n	80719a0 <pvPortMalloc+0xf8>
	__asm volatile
 807198a:	f04f 0350 	mov.w	r3, #80	; 0x50
 807198e:	f383 8811 	msr	BASEPRI, r3
 8071992:	f3bf 8f6f 	isb	sy
 8071996:	f3bf 8f4f 	dsb	sy
 807199a:	613b      	str	r3, [r7, #16]
}
 807199c:	bf00      	nop
 807199e:	e7fe      	b.n	807199e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80719a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80719a2:	685a      	ldr	r2, [r3, #4]
 80719a4:	687b      	ldr	r3, [r7, #4]
 80719a6:	1ad2      	subs	r2, r2, r3
 80719a8:	69bb      	ldr	r3, [r7, #24]
 80719aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80719ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80719ae:	687a      	ldr	r2, [r7, #4]
 80719b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80719b2:	69b8      	ldr	r0, [r7, #24]
 80719b4:	f000 f908 	bl	8071bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80719b8:	4b1d      	ldr	r3, [pc, #116]	; (8071a30 <pvPortMalloc+0x188>)
 80719ba:	681a      	ldr	r2, [r3, #0]
 80719bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80719be:	685b      	ldr	r3, [r3, #4]
 80719c0:	1ad3      	subs	r3, r2, r3
 80719c2:	4a1b      	ldr	r2, [pc, #108]	; (8071a30 <pvPortMalloc+0x188>)
 80719c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80719c6:	4b1a      	ldr	r3, [pc, #104]	; (8071a30 <pvPortMalloc+0x188>)
 80719c8:	681a      	ldr	r2, [r3, #0]
 80719ca:	4b1b      	ldr	r3, [pc, #108]	; (8071a38 <pvPortMalloc+0x190>)
 80719cc:	681b      	ldr	r3, [r3, #0]
 80719ce:	429a      	cmp	r2, r3
 80719d0:	d203      	bcs.n	80719da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80719d2:	4b17      	ldr	r3, [pc, #92]	; (8071a30 <pvPortMalloc+0x188>)
 80719d4:	681b      	ldr	r3, [r3, #0]
 80719d6:	4a18      	ldr	r2, [pc, #96]	; (8071a38 <pvPortMalloc+0x190>)
 80719d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80719da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80719dc:	685a      	ldr	r2, [r3, #4]
 80719de:	4b13      	ldr	r3, [pc, #76]	; (8071a2c <pvPortMalloc+0x184>)
 80719e0:	681b      	ldr	r3, [r3, #0]
 80719e2:	431a      	orrs	r2, r3
 80719e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80719e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80719e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80719ea:	2200      	movs	r2, #0
 80719ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80719ee:	4b13      	ldr	r3, [pc, #76]	; (8071a3c <pvPortMalloc+0x194>)
 80719f0:	681b      	ldr	r3, [r3, #0]
 80719f2:	3301      	adds	r3, #1
 80719f4:	4a11      	ldr	r2, [pc, #68]	; (8071a3c <pvPortMalloc+0x194>)
 80719f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80719f8:	f7fe f932 	bl	806fc60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80719fc:	69fb      	ldr	r3, [r7, #28]
 80719fe:	f003 0307 	and.w	r3, r3, #7
 8071a02:	2b00      	cmp	r3, #0
 8071a04:	d00a      	beq.n	8071a1c <pvPortMalloc+0x174>
	__asm volatile
 8071a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071a0a:	f383 8811 	msr	BASEPRI, r3
 8071a0e:	f3bf 8f6f 	isb	sy
 8071a12:	f3bf 8f4f 	dsb	sy
 8071a16:	60fb      	str	r3, [r7, #12]
}
 8071a18:	bf00      	nop
 8071a1a:	e7fe      	b.n	8071a1a <pvPortMalloc+0x172>
	return pvReturn;
 8071a1c:	69fb      	ldr	r3, [r7, #28]
}
 8071a1e:	4618      	mov	r0, r3
 8071a20:	3728      	adds	r7, #40	; 0x28
 8071a22:	46bd      	mov	sp, r7
 8071a24:	bd80      	pop	{r7, pc}
 8071a26:	bf00      	nop
 8071a28:	20004e10 	.word	0x20004e10
 8071a2c:	20004e24 	.word	0x20004e24
 8071a30:	20004e14 	.word	0x20004e14
 8071a34:	20004e08 	.word	0x20004e08
 8071a38:	20004e18 	.word	0x20004e18
 8071a3c:	20004e1c 	.word	0x20004e1c

08071a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8071a40:	b580      	push	{r7, lr}
 8071a42:	b086      	sub	sp, #24
 8071a44:	af00      	add	r7, sp, #0
 8071a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8071a48:	687b      	ldr	r3, [r7, #4]
 8071a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8071a4c:	687b      	ldr	r3, [r7, #4]
 8071a4e:	2b00      	cmp	r3, #0
 8071a50:	d04d      	beq.n	8071aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8071a52:	2308      	movs	r3, #8
 8071a54:	425b      	negs	r3, r3
 8071a56:	697a      	ldr	r2, [r7, #20]
 8071a58:	4413      	add	r3, r2
 8071a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8071a5c:	697b      	ldr	r3, [r7, #20]
 8071a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8071a60:	693b      	ldr	r3, [r7, #16]
 8071a62:	685a      	ldr	r2, [r3, #4]
 8071a64:	4b24      	ldr	r3, [pc, #144]	; (8071af8 <vPortFree+0xb8>)
 8071a66:	681b      	ldr	r3, [r3, #0]
 8071a68:	4013      	ands	r3, r2
 8071a6a:	2b00      	cmp	r3, #0
 8071a6c:	d10a      	bne.n	8071a84 <vPortFree+0x44>
	__asm volatile
 8071a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071a72:	f383 8811 	msr	BASEPRI, r3
 8071a76:	f3bf 8f6f 	isb	sy
 8071a7a:	f3bf 8f4f 	dsb	sy
 8071a7e:	60fb      	str	r3, [r7, #12]
}
 8071a80:	bf00      	nop
 8071a82:	e7fe      	b.n	8071a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8071a84:	693b      	ldr	r3, [r7, #16]
 8071a86:	681b      	ldr	r3, [r3, #0]
 8071a88:	2b00      	cmp	r3, #0
 8071a8a:	d00a      	beq.n	8071aa2 <vPortFree+0x62>
	__asm volatile
 8071a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071a90:	f383 8811 	msr	BASEPRI, r3
 8071a94:	f3bf 8f6f 	isb	sy
 8071a98:	f3bf 8f4f 	dsb	sy
 8071a9c:	60bb      	str	r3, [r7, #8]
}
 8071a9e:	bf00      	nop
 8071aa0:	e7fe      	b.n	8071aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8071aa2:	693b      	ldr	r3, [r7, #16]
 8071aa4:	685a      	ldr	r2, [r3, #4]
 8071aa6:	4b14      	ldr	r3, [pc, #80]	; (8071af8 <vPortFree+0xb8>)
 8071aa8:	681b      	ldr	r3, [r3, #0]
 8071aaa:	4013      	ands	r3, r2
 8071aac:	2b00      	cmp	r3, #0
 8071aae:	d01e      	beq.n	8071aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8071ab0:	693b      	ldr	r3, [r7, #16]
 8071ab2:	681b      	ldr	r3, [r3, #0]
 8071ab4:	2b00      	cmp	r3, #0
 8071ab6:	d11a      	bne.n	8071aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8071ab8:	693b      	ldr	r3, [r7, #16]
 8071aba:	685a      	ldr	r2, [r3, #4]
 8071abc:	4b0e      	ldr	r3, [pc, #56]	; (8071af8 <vPortFree+0xb8>)
 8071abe:	681b      	ldr	r3, [r3, #0]
 8071ac0:	43db      	mvns	r3, r3
 8071ac2:	401a      	ands	r2, r3
 8071ac4:	693b      	ldr	r3, [r7, #16]
 8071ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8071ac8:	f7fe f8bc 	bl	806fc44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8071acc:	693b      	ldr	r3, [r7, #16]
 8071ace:	685a      	ldr	r2, [r3, #4]
 8071ad0:	4b0a      	ldr	r3, [pc, #40]	; (8071afc <vPortFree+0xbc>)
 8071ad2:	681b      	ldr	r3, [r3, #0]
 8071ad4:	4413      	add	r3, r2
 8071ad6:	4a09      	ldr	r2, [pc, #36]	; (8071afc <vPortFree+0xbc>)
 8071ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8071ada:	6938      	ldr	r0, [r7, #16]
 8071adc:	f000 f874 	bl	8071bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8071ae0:	4b07      	ldr	r3, [pc, #28]	; (8071b00 <vPortFree+0xc0>)
 8071ae2:	681b      	ldr	r3, [r3, #0]
 8071ae4:	3301      	adds	r3, #1
 8071ae6:	4a06      	ldr	r2, [pc, #24]	; (8071b00 <vPortFree+0xc0>)
 8071ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8071aea:	f7fe f8b9 	bl	806fc60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8071aee:	bf00      	nop
 8071af0:	3718      	adds	r7, #24
 8071af2:	46bd      	mov	sp, r7
 8071af4:	bd80      	pop	{r7, pc}
 8071af6:	bf00      	nop
 8071af8:	20004e24 	.word	0x20004e24
 8071afc:	20004e14 	.word	0x20004e14
 8071b00:	20004e20 	.word	0x20004e20

08071b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8071b04:	b480      	push	{r7}
 8071b06:	b085      	sub	sp, #20
 8071b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8071b0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8071b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8071b10:	4b27      	ldr	r3, [pc, #156]	; (8071bb0 <prvHeapInit+0xac>)
 8071b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8071b14:	68fb      	ldr	r3, [r7, #12]
 8071b16:	f003 0307 	and.w	r3, r3, #7
 8071b1a:	2b00      	cmp	r3, #0
 8071b1c:	d00c      	beq.n	8071b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8071b1e:	68fb      	ldr	r3, [r7, #12]
 8071b20:	3307      	adds	r3, #7
 8071b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8071b24:	68fb      	ldr	r3, [r7, #12]
 8071b26:	f023 0307 	bic.w	r3, r3, #7
 8071b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8071b2c:	68ba      	ldr	r2, [r7, #8]
 8071b2e:	68fb      	ldr	r3, [r7, #12]
 8071b30:	1ad3      	subs	r3, r2, r3
 8071b32:	4a1f      	ldr	r2, [pc, #124]	; (8071bb0 <prvHeapInit+0xac>)
 8071b34:	4413      	add	r3, r2
 8071b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8071b38:	68fb      	ldr	r3, [r7, #12]
 8071b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8071b3c:	4a1d      	ldr	r2, [pc, #116]	; (8071bb4 <prvHeapInit+0xb0>)
 8071b3e:	687b      	ldr	r3, [r7, #4]
 8071b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8071b42:	4b1c      	ldr	r3, [pc, #112]	; (8071bb4 <prvHeapInit+0xb0>)
 8071b44:	2200      	movs	r2, #0
 8071b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8071b48:	687b      	ldr	r3, [r7, #4]
 8071b4a:	68ba      	ldr	r2, [r7, #8]
 8071b4c:	4413      	add	r3, r2
 8071b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8071b50:	2208      	movs	r2, #8
 8071b52:	68fb      	ldr	r3, [r7, #12]
 8071b54:	1a9b      	subs	r3, r3, r2
 8071b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8071b58:	68fb      	ldr	r3, [r7, #12]
 8071b5a:	f023 0307 	bic.w	r3, r3, #7
 8071b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8071b60:	68fb      	ldr	r3, [r7, #12]
 8071b62:	4a15      	ldr	r2, [pc, #84]	; (8071bb8 <prvHeapInit+0xb4>)
 8071b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8071b66:	4b14      	ldr	r3, [pc, #80]	; (8071bb8 <prvHeapInit+0xb4>)
 8071b68:	681b      	ldr	r3, [r3, #0]
 8071b6a:	2200      	movs	r2, #0
 8071b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8071b6e:	4b12      	ldr	r3, [pc, #72]	; (8071bb8 <prvHeapInit+0xb4>)
 8071b70:	681b      	ldr	r3, [r3, #0]
 8071b72:	2200      	movs	r2, #0
 8071b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8071b76:	687b      	ldr	r3, [r7, #4]
 8071b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8071b7a:	683b      	ldr	r3, [r7, #0]
 8071b7c:	68fa      	ldr	r2, [r7, #12]
 8071b7e:	1ad2      	subs	r2, r2, r3
 8071b80:	683b      	ldr	r3, [r7, #0]
 8071b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8071b84:	4b0c      	ldr	r3, [pc, #48]	; (8071bb8 <prvHeapInit+0xb4>)
 8071b86:	681a      	ldr	r2, [r3, #0]
 8071b88:	683b      	ldr	r3, [r7, #0]
 8071b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8071b8c:	683b      	ldr	r3, [r7, #0]
 8071b8e:	685b      	ldr	r3, [r3, #4]
 8071b90:	4a0a      	ldr	r2, [pc, #40]	; (8071bbc <prvHeapInit+0xb8>)
 8071b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8071b94:	683b      	ldr	r3, [r7, #0]
 8071b96:	685b      	ldr	r3, [r3, #4]
 8071b98:	4a09      	ldr	r2, [pc, #36]	; (8071bc0 <prvHeapInit+0xbc>)
 8071b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8071b9c:	4b09      	ldr	r3, [pc, #36]	; (8071bc4 <prvHeapInit+0xc0>)
 8071b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8071ba2:	601a      	str	r2, [r3, #0]
}
 8071ba4:	bf00      	nop
 8071ba6:	3714      	adds	r7, #20
 8071ba8:	46bd      	mov	sp, r7
 8071baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071bae:	4770      	bx	lr
 8071bb0:	20001208 	.word	0x20001208
 8071bb4:	20004e08 	.word	0x20004e08
 8071bb8:	20004e10 	.word	0x20004e10
 8071bbc:	20004e18 	.word	0x20004e18
 8071bc0:	20004e14 	.word	0x20004e14
 8071bc4:	20004e24 	.word	0x20004e24

08071bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8071bc8:	b480      	push	{r7}
 8071bca:	b085      	sub	sp, #20
 8071bcc:	af00      	add	r7, sp, #0
 8071bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8071bd0:	4b28      	ldr	r3, [pc, #160]	; (8071c74 <prvInsertBlockIntoFreeList+0xac>)
 8071bd2:	60fb      	str	r3, [r7, #12]
 8071bd4:	e002      	b.n	8071bdc <prvInsertBlockIntoFreeList+0x14>
 8071bd6:	68fb      	ldr	r3, [r7, #12]
 8071bd8:	681b      	ldr	r3, [r3, #0]
 8071bda:	60fb      	str	r3, [r7, #12]
 8071bdc:	68fb      	ldr	r3, [r7, #12]
 8071bde:	681b      	ldr	r3, [r3, #0]
 8071be0:	687a      	ldr	r2, [r7, #4]
 8071be2:	429a      	cmp	r2, r3
 8071be4:	d8f7      	bhi.n	8071bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8071be6:	68fb      	ldr	r3, [r7, #12]
 8071be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8071bea:	68fb      	ldr	r3, [r7, #12]
 8071bec:	685b      	ldr	r3, [r3, #4]
 8071bee:	68ba      	ldr	r2, [r7, #8]
 8071bf0:	4413      	add	r3, r2
 8071bf2:	687a      	ldr	r2, [r7, #4]
 8071bf4:	429a      	cmp	r2, r3
 8071bf6:	d108      	bne.n	8071c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8071bf8:	68fb      	ldr	r3, [r7, #12]
 8071bfa:	685a      	ldr	r2, [r3, #4]
 8071bfc:	687b      	ldr	r3, [r7, #4]
 8071bfe:	685b      	ldr	r3, [r3, #4]
 8071c00:	441a      	add	r2, r3
 8071c02:	68fb      	ldr	r3, [r7, #12]
 8071c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8071c06:	68fb      	ldr	r3, [r7, #12]
 8071c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8071c0a:	687b      	ldr	r3, [r7, #4]
 8071c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8071c0e:	687b      	ldr	r3, [r7, #4]
 8071c10:	685b      	ldr	r3, [r3, #4]
 8071c12:	68ba      	ldr	r2, [r7, #8]
 8071c14:	441a      	add	r2, r3
 8071c16:	68fb      	ldr	r3, [r7, #12]
 8071c18:	681b      	ldr	r3, [r3, #0]
 8071c1a:	429a      	cmp	r2, r3
 8071c1c:	d118      	bne.n	8071c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8071c1e:	68fb      	ldr	r3, [r7, #12]
 8071c20:	681a      	ldr	r2, [r3, #0]
 8071c22:	4b15      	ldr	r3, [pc, #84]	; (8071c78 <prvInsertBlockIntoFreeList+0xb0>)
 8071c24:	681b      	ldr	r3, [r3, #0]
 8071c26:	429a      	cmp	r2, r3
 8071c28:	d00d      	beq.n	8071c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8071c2a:	687b      	ldr	r3, [r7, #4]
 8071c2c:	685a      	ldr	r2, [r3, #4]
 8071c2e:	68fb      	ldr	r3, [r7, #12]
 8071c30:	681b      	ldr	r3, [r3, #0]
 8071c32:	685b      	ldr	r3, [r3, #4]
 8071c34:	441a      	add	r2, r3
 8071c36:	687b      	ldr	r3, [r7, #4]
 8071c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8071c3a:	68fb      	ldr	r3, [r7, #12]
 8071c3c:	681b      	ldr	r3, [r3, #0]
 8071c3e:	681a      	ldr	r2, [r3, #0]
 8071c40:	687b      	ldr	r3, [r7, #4]
 8071c42:	601a      	str	r2, [r3, #0]
 8071c44:	e008      	b.n	8071c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8071c46:	4b0c      	ldr	r3, [pc, #48]	; (8071c78 <prvInsertBlockIntoFreeList+0xb0>)
 8071c48:	681a      	ldr	r2, [r3, #0]
 8071c4a:	687b      	ldr	r3, [r7, #4]
 8071c4c:	601a      	str	r2, [r3, #0]
 8071c4e:	e003      	b.n	8071c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8071c50:	68fb      	ldr	r3, [r7, #12]
 8071c52:	681a      	ldr	r2, [r3, #0]
 8071c54:	687b      	ldr	r3, [r7, #4]
 8071c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8071c58:	68fa      	ldr	r2, [r7, #12]
 8071c5a:	687b      	ldr	r3, [r7, #4]
 8071c5c:	429a      	cmp	r2, r3
 8071c5e:	d002      	beq.n	8071c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8071c60:	68fb      	ldr	r3, [r7, #12]
 8071c62:	687a      	ldr	r2, [r7, #4]
 8071c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8071c66:	bf00      	nop
 8071c68:	3714      	adds	r7, #20
 8071c6a:	46bd      	mov	sp, r7
 8071c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071c70:	4770      	bx	lr
 8071c72:	bf00      	nop
 8071c74:	20004e08 	.word	0x20004e08
 8071c78:	20004e10 	.word	0x20004e10

08071c7c <__errno>:
 8071c7c:	4b01      	ldr	r3, [pc, #4]	; (8071c84 <__errno+0x8>)
 8071c7e:	6818      	ldr	r0, [r3, #0]
 8071c80:	4770      	bx	lr
 8071c82:	bf00      	nop
 8071c84:	20000028 	.word	0x20000028

08071c88 <std>:
 8071c88:	2300      	movs	r3, #0
 8071c8a:	b510      	push	{r4, lr}
 8071c8c:	4604      	mov	r4, r0
 8071c8e:	e9c0 3300 	strd	r3, r3, [r0]
 8071c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8071c96:	6083      	str	r3, [r0, #8]
 8071c98:	8181      	strh	r1, [r0, #12]
 8071c9a:	6643      	str	r3, [r0, #100]	; 0x64
 8071c9c:	81c2      	strh	r2, [r0, #14]
 8071c9e:	6183      	str	r3, [r0, #24]
 8071ca0:	4619      	mov	r1, r3
 8071ca2:	2208      	movs	r2, #8
 8071ca4:	305c      	adds	r0, #92	; 0x5c
 8071ca6:	f000 f91a 	bl	8071ede <memset>
 8071caa:	4b05      	ldr	r3, [pc, #20]	; (8071cc0 <std+0x38>)
 8071cac:	6263      	str	r3, [r4, #36]	; 0x24
 8071cae:	4b05      	ldr	r3, [pc, #20]	; (8071cc4 <std+0x3c>)
 8071cb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8071cb2:	4b05      	ldr	r3, [pc, #20]	; (8071cc8 <std+0x40>)
 8071cb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8071cb6:	4b05      	ldr	r3, [pc, #20]	; (8071ccc <std+0x44>)
 8071cb8:	6224      	str	r4, [r4, #32]
 8071cba:	6323      	str	r3, [r4, #48]	; 0x30
 8071cbc:	bd10      	pop	{r4, pc}
 8071cbe:	bf00      	nop
 8071cc0:	08072dd9 	.word	0x08072dd9
 8071cc4:	08072dfb 	.word	0x08072dfb
 8071cc8:	08072e33 	.word	0x08072e33
 8071ccc:	08072e57 	.word	0x08072e57

08071cd0 <_cleanup_r>:
 8071cd0:	4901      	ldr	r1, [pc, #4]	; (8071cd8 <_cleanup_r+0x8>)
 8071cd2:	f000 b8af 	b.w	8071e34 <_fwalk_reent>
 8071cd6:	bf00      	nop
 8071cd8:	08074a2d 	.word	0x08074a2d

08071cdc <__sfmoreglue>:
 8071cdc:	b570      	push	{r4, r5, r6, lr}
 8071cde:	1e4a      	subs	r2, r1, #1
 8071ce0:	2568      	movs	r5, #104	; 0x68
 8071ce2:	4355      	muls	r5, r2
 8071ce4:	460e      	mov	r6, r1
 8071ce6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8071cea:	f000 f901 	bl	8071ef0 <_malloc_r>
 8071cee:	4604      	mov	r4, r0
 8071cf0:	b140      	cbz	r0, 8071d04 <__sfmoreglue+0x28>
 8071cf2:	2100      	movs	r1, #0
 8071cf4:	e9c0 1600 	strd	r1, r6, [r0]
 8071cf8:	300c      	adds	r0, #12
 8071cfa:	60a0      	str	r0, [r4, #8]
 8071cfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8071d00:	f000 f8ed 	bl	8071ede <memset>
 8071d04:	4620      	mov	r0, r4
 8071d06:	bd70      	pop	{r4, r5, r6, pc}

08071d08 <__sfp_lock_acquire>:
 8071d08:	4801      	ldr	r0, [pc, #4]	; (8071d10 <__sfp_lock_acquire+0x8>)
 8071d0a:	f000 b8d8 	b.w	8071ebe <__retarget_lock_acquire_recursive>
 8071d0e:	bf00      	nop
 8071d10:	20005d0c 	.word	0x20005d0c

08071d14 <__sfp_lock_release>:
 8071d14:	4801      	ldr	r0, [pc, #4]	; (8071d1c <__sfp_lock_release+0x8>)
 8071d16:	f000 b8d3 	b.w	8071ec0 <__retarget_lock_release_recursive>
 8071d1a:	bf00      	nop
 8071d1c:	20005d0c 	.word	0x20005d0c

08071d20 <__sinit_lock_acquire>:
 8071d20:	4801      	ldr	r0, [pc, #4]	; (8071d28 <__sinit_lock_acquire+0x8>)
 8071d22:	f000 b8cc 	b.w	8071ebe <__retarget_lock_acquire_recursive>
 8071d26:	bf00      	nop
 8071d28:	20005d07 	.word	0x20005d07

08071d2c <__sinit_lock_release>:
 8071d2c:	4801      	ldr	r0, [pc, #4]	; (8071d34 <__sinit_lock_release+0x8>)
 8071d2e:	f000 b8c7 	b.w	8071ec0 <__retarget_lock_release_recursive>
 8071d32:	bf00      	nop
 8071d34:	20005d07 	.word	0x20005d07

08071d38 <__sinit>:
 8071d38:	b510      	push	{r4, lr}
 8071d3a:	4604      	mov	r4, r0
 8071d3c:	f7ff fff0 	bl	8071d20 <__sinit_lock_acquire>
 8071d40:	69a3      	ldr	r3, [r4, #24]
 8071d42:	b11b      	cbz	r3, 8071d4c <__sinit+0x14>
 8071d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8071d48:	f7ff bff0 	b.w	8071d2c <__sinit_lock_release>
 8071d4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8071d50:	6523      	str	r3, [r4, #80]	; 0x50
 8071d52:	4b13      	ldr	r3, [pc, #76]	; (8071da0 <__sinit+0x68>)
 8071d54:	4a13      	ldr	r2, [pc, #76]	; (8071da4 <__sinit+0x6c>)
 8071d56:	681b      	ldr	r3, [r3, #0]
 8071d58:	62a2      	str	r2, [r4, #40]	; 0x28
 8071d5a:	42a3      	cmp	r3, r4
 8071d5c:	bf04      	itt	eq
 8071d5e:	2301      	moveq	r3, #1
 8071d60:	61a3      	streq	r3, [r4, #24]
 8071d62:	4620      	mov	r0, r4
 8071d64:	f000 f820 	bl	8071da8 <__sfp>
 8071d68:	6060      	str	r0, [r4, #4]
 8071d6a:	4620      	mov	r0, r4
 8071d6c:	f000 f81c 	bl	8071da8 <__sfp>
 8071d70:	60a0      	str	r0, [r4, #8]
 8071d72:	4620      	mov	r0, r4
 8071d74:	f000 f818 	bl	8071da8 <__sfp>
 8071d78:	2200      	movs	r2, #0
 8071d7a:	60e0      	str	r0, [r4, #12]
 8071d7c:	2104      	movs	r1, #4
 8071d7e:	6860      	ldr	r0, [r4, #4]
 8071d80:	f7ff ff82 	bl	8071c88 <std>
 8071d84:	68a0      	ldr	r0, [r4, #8]
 8071d86:	2201      	movs	r2, #1
 8071d88:	2109      	movs	r1, #9
 8071d8a:	f7ff ff7d 	bl	8071c88 <std>
 8071d8e:	68e0      	ldr	r0, [r4, #12]
 8071d90:	2202      	movs	r2, #2
 8071d92:	2112      	movs	r1, #18
 8071d94:	f7ff ff78 	bl	8071c88 <std>
 8071d98:	2301      	movs	r3, #1
 8071d9a:	61a3      	str	r3, [r4, #24]
 8071d9c:	e7d2      	b.n	8071d44 <__sinit+0xc>
 8071d9e:	bf00      	nop
 8071da0:	08076ef0 	.word	0x08076ef0
 8071da4:	08071cd1 	.word	0x08071cd1

08071da8 <__sfp>:
 8071da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8071daa:	4607      	mov	r7, r0
 8071dac:	f7ff ffac 	bl	8071d08 <__sfp_lock_acquire>
 8071db0:	4b1e      	ldr	r3, [pc, #120]	; (8071e2c <__sfp+0x84>)
 8071db2:	681e      	ldr	r6, [r3, #0]
 8071db4:	69b3      	ldr	r3, [r6, #24]
 8071db6:	b913      	cbnz	r3, 8071dbe <__sfp+0x16>
 8071db8:	4630      	mov	r0, r6
 8071dba:	f7ff ffbd 	bl	8071d38 <__sinit>
 8071dbe:	3648      	adds	r6, #72	; 0x48
 8071dc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8071dc4:	3b01      	subs	r3, #1
 8071dc6:	d503      	bpl.n	8071dd0 <__sfp+0x28>
 8071dc8:	6833      	ldr	r3, [r6, #0]
 8071dca:	b30b      	cbz	r3, 8071e10 <__sfp+0x68>
 8071dcc:	6836      	ldr	r6, [r6, #0]
 8071dce:	e7f7      	b.n	8071dc0 <__sfp+0x18>
 8071dd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8071dd4:	b9d5      	cbnz	r5, 8071e0c <__sfp+0x64>
 8071dd6:	4b16      	ldr	r3, [pc, #88]	; (8071e30 <__sfp+0x88>)
 8071dd8:	60e3      	str	r3, [r4, #12]
 8071dda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8071dde:	6665      	str	r5, [r4, #100]	; 0x64
 8071de0:	f000 f86c 	bl	8071ebc <__retarget_lock_init_recursive>
 8071de4:	f7ff ff96 	bl	8071d14 <__sfp_lock_release>
 8071de8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8071dec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8071df0:	6025      	str	r5, [r4, #0]
 8071df2:	61a5      	str	r5, [r4, #24]
 8071df4:	2208      	movs	r2, #8
 8071df6:	4629      	mov	r1, r5
 8071df8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8071dfc:	f000 f86f 	bl	8071ede <memset>
 8071e00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8071e04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8071e08:	4620      	mov	r0, r4
 8071e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8071e0c:	3468      	adds	r4, #104	; 0x68
 8071e0e:	e7d9      	b.n	8071dc4 <__sfp+0x1c>
 8071e10:	2104      	movs	r1, #4
 8071e12:	4638      	mov	r0, r7
 8071e14:	f7ff ff62 	bl	8071cdc <__sfmoreglue>
 8071e18:	4604      	mov	r4, r0
 8071e1a:	6030      	str	r0, [r6, #0]
 8071e1c:	2800      	cmp	r0, #0
 8071e1e:	d1d5      	bne.n	8071dcc <__sfp+0x24>
 8071e20:	f7ff ff78 	bl	8071d14 <__sfp_lock_release>
 8071e24:	230c      	movs	r3, #12
 8071e26:	603b      	str	r3, [r7, #0]
 8071e28:	e7ee      	b.n	8071e08 <__sfp+0x60>
 8071e2a:	bf00      	nop
 8071e2c:	08076ef0 	.word	0x08076ef0
 8071e30:	ffff0001 	.word	0xffff0001

08071e34 <_fwalk_reent>:
 8071e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8071e38:	4606      	mov	r6, r0
 8071e3a:	4688      	mov	r8, r1
 8071e3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8071e40:	2700      	movs	r7, #0
 8071e42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8071e46:	f1b9 0901 	subs.w	r9, r9, #1
 8071e4a:	d505      	bpl.n	8071e58 <_fwalk_reent+0x24>
 8071e4c:	6824      	ldr	r4, [r4, #0]
 8071e4e:	2c00      	cmp	r4, #0
 8071e50:	d1f7      	bne.n	8071e42 <_fwalk_reent+0xe>
 8071e52:	4638      	mov	r0, r7
 8071e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8071e58:	89ab      	ldrh	r3, [r5, #12]
 8071e5a:	2b01      	cmp	r3, #1
 8071e5c:	d907      	bls.n	8071e6e <_fwalk_reent+0x3a>
 8071e5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8071e62:	3301      	adds	r3, #1
 8071e64:	d003      	beq.n	8071e6e <_fwalk_reent+0x3a>
 8071e66:	4629      	mov	r1, r5
 8071e68:	4630      	mov	r0, r6
 8071e6a:	47c0      	blx	r8
 8071e6c:	4307      	orrs	r7, r0
 8071e6e:	3568      	adds	r5, #104	; 0x68
 8071e70:	e7e9      	b.n	8071e46 <_fwalk_reent+0x12>
	...

08071e74 <__libc_init_array>:
 8071e74:	b570      	push	{r4, r5, r6, lr}
 8071e76:	4d0d      	ldr	r5, [pc, #52]	; (8071eac <__libc_init_array+0x38>)
 8071e78:	4c0d      	ldr	r4, [pc, #52]	; (8071eb0 <__libc_init_array+0x3c>)
 8071e7a:	1b64      	subs	r4, r4, r5
 8071e7c:	10a4      	asrs	r4, r4, #2
 8071e7e:	2600      	movs	r6, #0
 8071e80:	42a6      	cmp	r6, r4
 8071e82:	d109      	bne.n	8071e98 <__libc_init_array+0x24>
 8071e84:	4d0b      	ldr	r5, [pc, #44]	; (8071eb4 <__libc_init_array+0x40>)
 8071e86:	4c0c      	ldr	r4, [pc, #48]	; (8071eb8 <__libc_init_array+0x44>)
 8071e88:	f004 fbba 	bl	8076600 <_init>
 8071e8c:	1b64      	subs	r4, r4, r5
 8071e8e:	10a4      	asrs	r4, r4, #2
 8071e90:	2600      	movs	r6, #0
 8071e92:	42a6      	cmp	r6, r4
 8071e94:	d105      	bne.n	8071ea2 <__libc_init_array+0x2e>
 8071e96:	bd70      	pop	{r4, r5, r6, pc}
 8071e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8071e9c:	4798      	blx	r3
 8071e9e:	3601      	adds	r6, #1
 8071ea0:	e7ee      	b.n	8071e80 <__libc_init_array+0xc>
 8071ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8071ea6:	4798      	blx	r3
 8071ea8:	3601      	adds	r6, #1
 8071eaa:	e7f2      	b.n	8071e92 <__libc_init_array+0x1e>
 8071eac:	0807734c 	.word	0x0807734c
 8071eb0:	0807734c 	.word	0x0807734c
 8071eb4:	0807734c 	.word	0x0807734c
 8071eb8:	08077350 	.word	0x08077350

08071ebc <__retarget_lock_init_recursive>:
 8071ebc:	4770      	bx	lr

08071ebe <__retarget_lock_acquire_recursive>:
 8071ebe:	4770      	bx	lr

08071ec0 <__retarget_lock_release_recursive>:
 8071ec0:	4770      	bx	lr

08071ec2 <memcpy>:
 8071ec2:	440a      	add	r2, r1
 8071ec4:	4291      	cmp	r1, r2
 8071ec6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8071eca:	d100      	bne.n	8071ece <memcpy+0xc>
 8071ecc:	4770      	bx	lr
 8071ece:	b510      	push	{r4, lr}
 8071ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8071ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8071ed8:	4291      	cmp	r1, r2
 8071eda:	d1f9      	bne.n	8071ed0 <memcpy+0xe>
 8071edc:	bd10      	pop	{r4, pc}

08071ede <memset>:
 8071ede:	4402      	add	r2, r0
 8071ee0:	4603      	mov	r3, r0
 8071ee2:	4293      	cmp	r3, r2
 8071ee4:	d100      	bne.n	8071ee8 <memset+0xa>
 8071ee6:	4770      	bx	lr
 8071ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8071eec:	e7f9      	b.n	8071ee2 <memset+0x4>
	...

08071ef0 <_malloc_r>:
 8071ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8071ef2:	1ccd      	adds	r5, r1, #3
 8071ef4:	f025 0503 	bic.w	r5, r5, #3
 8071ef8:	3508      	adds	r5, #8
 8071efa:	2d0c      	cmp	r5, #12
 8071efc:	bf38      	it	cc
 8071efe:	250c      	movcc	r5, #12
 8071f00:	2d00      	cmp	r5, #0
 8071f02:	4606      	mov	r6, r0
 8071f04:	db01      	blt.n	8071f0a <_malloc_r+0x1a>
 8071f06:	42a9      	cmp	r1, r5
 8071f08:	d903      	bls.n	8071f12 <_malloc_r+0x22>
 8071f0a:	230c      	movs	r3, #12
 8071f0c:	6033      	str	r3, [r6, #0]
 8071f0e:	2000      	movs	r0, #0
 8071f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8071f12:	f003 f967 	bl	80751e4 <__malloc_lock>
 8071f16:	4921      	ldr	r1, [pc, #132]	; (8071f9c <_malloc_r+0xac>)
 8071f18:	680a      	ldr	r2, [r1, #0]
 8071f1a:	4614      	mov	r4, r2
 8071f1c:	b99c      	cbnz	r4, 8071f46 <_malloc_r+0x56>
 8071f1e:	4f20      	ldr	r7, [pc, #128]	; (8071fa0 <_malloc_r+0xb0>)
 8071f20:	683b      	ldr	r3, [r7, #0]
 8071f22:	b923      	cbnz	r3, 8071f2e <_malloc_r+0x3e>
 8071f24:	4621      	mov	r1, r4
 8071f26:	4630      	mov	r0, r6
 8071f28:	f000 ff20 	bl	8072d6c <_sbrk_r>
 8071f2c:	6038      	str	r0, [r7, #0]
 8071f2e:	4629      	mov	r1, r5
 8071f30:	4630      	mov	r0, r6
 8071f32:	f000 ff1b 	bl	8072d6c <_sbrk_r>
 8071f36:	1c43      	adds	r3, r0, #1
 8071f38:	d123      	bne.n	8071f82 <_malloc_r+0x92>
 8071f3a:	230c      	movs	r3, #12
 8071f3c:	6033      	str	r3, [r6, #0]
 8071f3e:	4630      	mov	r0, r6
 8071f40:	f003 f956 	bl	80751f0 <__malloc_unlock>
 8071f44:	e7e3      	b.n	8071f0e <_malloc_r+0x1e>
 8071f46:	6823      	ldr	r3, [r4, #0]
 8071f48:	1b5b      	subs	r3, r3, r5
 8071f4a:	d417      	bmi.n	8071f7c <_malloc_r+0x8c>
 8071f4c:	2b0b      	cmp	r3, #11
 8071f4e:	d903      	bls.n	8071f58 <_malloc_r+0x68>
 8071f50:	6023      	str	r3, [r4, #0]
 8071f52:	441c      	add	r4, r3
 8071f54:	6025      	str	r5, [r4, #0]
 8071f56:	e004      	b.n	8071f62 <_malloc_r+0x72>
 8071f58:	6863      	ldr	r3, [r4, #4]
 8071f5a:	42a2      	cmp	r2, r4
 8071f5c:	bf0c      	ite	eq
 8071f5e:	600b      	streq	r3, [r1, #0]
 8071f60:	6053      	strne	r3, [r2, #4]
 8071f62:	4630      	mov	r0, r6
 8071f64:	f003 f944 	bl	80751f0 <__malloc_unlock>
 8071f68:	f104 000b 	add.w	r0, r4, #11
 8071f6c:	1d23      	adds	r3, r4, #4
 8071f6e:	f020 0007 	bic.w	r0, r0, #7
 8071f72:	1ac2      	subs	r2, r0, r3
 8071f74:	d0cc      	beq.n	8071f10 <_malloc_r+0x20>
 8071f76:	1a1b      	subs	r3, r3, r0
 8071f78:	50a3      	str	r3, [r4, r2]
 8071f7a:	e7c9      	b.n	8071f10 <_malloc_r+0x20>
 8071f7c:	4622      	mov	r2, r4
 8071f7e:	6864      	ldr	r4, [r4, #4]
 8071f80:	e7cc      	b.n	8071f1c <_malloc_r+0x2c>
 8071f82:	1cc4      	adds	r4, r0, #3
 8071f84:	f024 0403 	bic.w	r4, r4, #3
 8071f88:	42a0      	cmp	r0, r4
 8071f8a:	d0e3      	beq.n	8071f54 <_malloc_r+0x64>
 8071f8c:	1a21      	subs	r1, r4, r0
 8071f8e:	4630      	mov	r0, r6
 8071f90:	f000 feec 	bl	8072d6c <_sbrk_r>
 8071f94:	3001      	adds	r0, #1
 8071f96:	d1dd      	bne.n	8071f54 <_malloc_r+0x64>
 8071f98:	e7cf      	b.n	8071f3a <_malloc_r+0x4a>
 8071f9a:	bf00      	nop
 8071f9c:	20004e28 	.word	0x20004e28
 8071fa0:	20004e2c 	.word	0x20004e2c

08071fa4 <__cvt>:
 8071fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8071fa8:	ec55 4b10 	vmov	r4, r5, d0
 8071fac:	2d00      	cmp	r5, #0
 8071fae:	460e      	mov	r6, r1
 8071fb0:	4619      	mov	r1, r3
 8071fb2:	462b      	mov	r3, r5
 8071fb4:	bfbb      	ittet	lt
 8071fb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8071fba:	461d      	movlt	r5, r3
 8071fbc:	2300      	movge	r3, #0
 8071fbe:	232d      	movlt	r3, #45	; 0x2d
 8071fc0:	700b      	strb	r3, [r1, #0]
 8071fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8071fc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8071fc8:	4691      	mov	r9, r2
 8071fca:	f023 0820 	bic.w	r8, r3, #32
 8071fce:	bfbc      	itt	lt
 8071fd0:	4622      	movlt	r2, r4
 8071fd2:	4614      	movlt	r4, r2
 8071fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8071fd8:	d005      	beq.n	8071fe6 <__cvt+0x42>
 8071fda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8071fde:	d100      	bne.n	8071fe2 <__cvt+0x3e>
 8071fe0:	3601      	adds	r6, #1
 8071fe2:	2102      	movs	r1, #2
 8071fe4:	e000      	b.n	8071fe8 <__cvt+0x44>
 8071fe6:	2103      	movs	r1, #3
 8071fe8:	ab03      	add	r3, sp, #12
 8071fea:	9301      	str	r3, [sp, #4]
 8071fec:	ab02      	add	r3, sp, #8
 8071fee:	9300      	str	r3, [sp, #0]
 8071ff0:	ec45 4b10 	vmov	d0, r4, r5
 8071ff4:	4653      	mov	r3, sl
 8071ff6:	4632      	mov	r2, r6
 8071ff8:	f001 fea6 	bl	8073d48 <_dtoa_r>
 8071ffc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8072000:	4607      	mov	r7, r0
 8072002:	d102      	bne.n	807200a <__cvt+0x66>
 8072004:	f019 0f01 	tst.w	r9, #1
 8072008:	d022      	beq.n	8072050 <__cvt+0xac>
 807200a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 807200e:	eb07 0906 	add.w	r9, r7, r6
 8072012:	d110      	bne.n	8072036 <__cvt+0x92>
 8072014:	783b      	ldrb	r3, [r7, #0]
 8072016:	2b30      	cmp	r3, #48	; 0x30
 8072018:	d10a      	bne.n	8072030 <__cvt+0x8c>
 807201a:	2200      	movs	r2, #0
 807201c:	2300      	movs	r3, #0
 807201e:	4620      	mov	r0, r4
 8072020:	4629      	mov	r1, r5
 8072022:	f7ee fd69 	bl	8060af8 <__aeabi_dcmpeq>
 8072026:	b918      	cbnz	r0, 8072030 <__cvt+0x8c>
 8072028:	f1c6 0601 	rsb	r6, r6, #1
 807202c:	f8ca 6000 	str.w	r6, [sl]
 8072030:	f8da 3000 	ldr.w	r3, [sl]
 8072034:	4499      	add	r9, r3
 8072036:	2200      	movs	r2, #0
 8072038:	2300      	movs	r3, #0
 807203a:	4620      	mov	r0, r4
 807203c:	4629      	mov	r1, r5
 807203e:	f7ee fd5b 	bl	8060af8 <__aeabi_dcmpeq>
 8072042:	b108      	cbz	r0, 8072048 <__cvt+0xa4>
 8072044:	f8cd 900c 	str.w	r9, [sp, #12]
 8072048:	2230      	movs	r2, #48	; 0x30
 807204a:	9b03      	ldr	r3, [sp, #12]
 807204c:	454b      	cmp	r3, r9
 807204e:	d307      	bcc.n	8072060 <__cvt+0xbc>
 8072050:	9b03      	ldr	r3, [sp, #12]
 8072052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8072054:	1bdb      	subs	r3, r3, r7
 8072056:	4638      	mov	r0, r7
 8072058:	6013      	str	r3, [r2, #0]
 807205a:	b004      	add	sp, #16
 807205c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8072060:	1c59      	adds	r1, r3, #1
 8072062:	9103      	str	r1, [sp, #12]
 8072064:	701a      	strb	r2, [r3, #0]
 8072066:	e7f0      	b.n	807204a <__cvt+0xa6>

08072068 <__exponent>:
 8072068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 807206a:	4603      	mov	r3, r0
 807206c:	2900      	cmp	r1, #0
 807206e:	bfb8      	it	lt
 8072070:	4249      	neglt	r1, r1
 8072072:	f803 2b02 	strb.w	r2, [r3], #2
 8072076:	bfb4      	ite	lt
 8072078:	222d      	movlt	r2, #45	; 0x2d
 807207a:	222b      	movge	r2, #43	; 0x2b
 807207c:	2909      	cmp	r1, #9
 807207e:	7042      	strb	r2, [r0, #1]
 8072080:	dd2a      	ble.n	80720d8 <__exponent+0x70>
 8072082:	f10d 0407 	add.w	r4, sp, #7
 8072086:	46a4      	mov	ip, r4
 8072088:	270a      	movs	r7, #10
 807208a:	46a6      	mov	lr, r4
 807208c:	460a      	mov	r2, r1
 807208e:	fb91 f6f7 	sdiv	r6, r1, r7
 8072092:	fb07 1516 	mls	r5, r7, r6, r1
 8072096:	3530      	adds	r5, #48	; 0x30
 8072098:	2a63      	cmp	r2, #99	; 0x63
 807209a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 807209e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80720a2:	4631      	mov	r1, r6
 80720a4:	dcf1      	bgt.n	807208a <__exponent+0x22>
 80720a6:	3130      	adds	r1, #48	; 0x30
 80720a8:	f1ae 0502 	sub.w	r5, lr, #2
 80720ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80720b0:	1c44      	adds	r4, r0, #1
 80720b2:	4629      	mov	r1, r5
 80720b4:	4561      	cmp	r1, ip
 80720b6:	d30a      	bcc.n	80720ce <__exponent+0x66>
 80720b8:	f10d 0209 	add.w	r2, sp, #9
 80720bc:	eba2 020e 	sub.w	r2, r2, lr
 80720c0:	4565      	cmp	r5, ip
 80720c2:	bf88      	it	hi
 80720c4:	2200      	movhi	r2, #0
 80720c6:	4413      	add	r3, r2
 80720c8:	1a18      	subs	r0, r3, r0
 80720ca:	b003      	add	sp, #12
 80720cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80720ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80720d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80720d6:	e7ed      	b.n	80720b4 <__exponent+0x4c>
 80720d8:	2330      	movs	r3, #48	; 0x30
 80720da:	3130      	adds	r1, #48	; 0x30
 80720dc:	7083      	strb	r3, [r0, #2]
 80720de:	70c1      	strb	r1, [r0, #3]
 80720e0:	1d03      	adds	r3, r0, #4
 80720e2:	e7f1      	b.n	80720c8 <__exponent+0x60>

080720e4 <_printf_float>:
 80720e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80720e8:	ed2d 8b02 	vpush	{d8}
 80720ec:	b08d      	sub	sp, #52	; 0x34
 80720ee:	460c      	mov	r4, r1
 80720f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80720f4:	4616      	mov	r6, r2
 80720f6:	461f      	mov	r7, r3
 80720f8:	4605      	mov	r5, r0
 80720fa:	f003 f843 	bl	8075184 <_localeconv_r>
 80720fe:	f8d0 a000 	ldr.w	sl, [r0]
 8072102:	4650      	mov	r0, sl
 8072104:	f7ee f876 	bl	80601f4 <strlen>
 8072108:	2300      	movs	r3, #0
 807210a:	930a      	str	r3, [sp, #40]	; 0x28
 807210c:	6823      	ldr	r3, [r4, #0]
 807210e:	9305      	str	r3, [sp, #20]
 8072110:	f8d8 3000 	ldr.w	r3, [r8]
 8072114:	f894 b018 	ldrb.w	fp, [r4, #24]
 8072118:	3307      	adds	r3, #7
 807211a:	f023 0307 	bic.w	r3, r3, #7
 807211e:	f103 0208 	add.w	r2, r3, #8
 8072122:	f8c8 2000 	str.w	r2, [r8]
 8072126:	e9d3 2300 	ldrd	r2, r3, [r3]
 807212a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 807212e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8072132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8072136:	9307      	str	r3, [sp, #28]
 8072138:	f8cd 8018 	str.w	r8, [sp, #24]
 807213c:	ee08 0a10 	vmov	s16, r0
 8072140:	4b9f      	ldr	r3, [pc, #636]	; (80723c0 <_printf_float+0x2dc>)
 8072142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8072146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 807214a:	f7ee fd07 	bl	8060b5c <__aeabi_dcmpun>
 807214e:	bb88      	cbnz	r0, 80721b4 <_printf_float+0xd0>
 8072150:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8072154:	4b9a      	ldr	r3, [pc, #616]	; (80723c0 <_printf_float+0x2dc>)
 8072156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 807215a:	f7ee fce1 	bl	8060b20 <__aeabi_dcmple>
 807215e:	bb48      	cbnz	r0, 80721b4 <_printf_float+0xd0>
 8072160:	2200      	movs	r2, #0
 8072162:	2300      	movs	r3, #0
 8072164:	4640      	mov	r0, r8
 8072166:	4649      	mov	r1, r9
 8072168:	f7ee fcd0 	bl	8060b0c <__aeabi_dcmplt>
 807216c:	b110      	cbz	r0, 8072174 <_printf_float+0x90>
 807216e:	232d      	movs	r3, #45	; 0x2d
 8072170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8072174:	4b93      	ldr	r3, [pc, #588]	; (80723c4 <_printf_float+0x2e0>)
 8072176:	4894      	ldr	r0, [pc, #592]	; (80723c8 <_printf_float+0x2e4>)
 8072178:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 807217c:	bf94      	ite	ls
 807217e:	4698      	movls	r8, r3
 8072180:	4680      	movhi	r8, r0
 8072182:	2303      	movs	r3, #3
 8072184:	6123      	str	r3, [r4, #16]
 8072186:	9b05      	ldr	r3, [sp, #20]
 8072188:	f023 0204 	bic.w	r2, r3, #4
 807218c:	6022      	str	r2, [r4, #0]
 807218e:	f04f 0900 	mov.w	r9, #0
 8072192:	9700      	str	r7, [sp, #0]
 8072194:	4633      	mov	r3, r6
 8072196:	aa0b      	add	r2, sp, #44	; 0x2c
 8072198:	4621      	mov	r1, r4
 807219a:	4628      	mov	r0, r5
 807219c:	f000 f9d8 	bl	8072550 <_printf_common>
 80721a0:	3001      	adds	r0, #1
 80721a2:	f040 8090 	bne.w	80722c6 <_printf_float+0x1e2>
 80721a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80721aa:	b00d      	add	sp, #52	; 0x34
 80721ac:	ecbd 8b02 	vpop	{d8}
 80721b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80721b4:	4642      	mov	r2, r8
 80721b6:	464b      	mov	r3, r9
 80721b8:	4640      	mov	r0, r8
 80721ba:	4649      	mov	r1, r9
 80721bc:	f7ee fcce 	bl	8060b5c <__aeabi_dcmpun>
 80721c0:	b140      	cbz	r0, 80721d4 <_printf_float+0xf0>
 80721c2:	464b      	mov	r3, r9
 80721c4:	2b00      	cmp	r3, #0
 80721c6:	bfbc      	itt	lt
 80721c8:	232d      	movlt	r3, #45	; 0x2d
 80721ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80721ce:	487f      	ldr	r0, [pc, #508]	; (80723cc <_printf_float+0x2e8>)
 80721d0:	4b7f      	ldr	r3, [pc, #508]	; (80723d0 <_printf_float+0x2ec>)
 80721d2:	e7d1      	b.n	8072178 <_printf_float+0x94>
 80721d4:	6863      	ldr	r3, [r4, #4]
 80721d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80721da:	9206      	str	r2, [sp, #24]
 80721dc:	1c5a      	adds	r2, r3, #1
 80721de:	d13f      	bne.n	8072260 <_printf_float+0x17c>
 80721e0:	2306      	movs	r3, #6
 80721e2:	6063      	str	r3, [r4, #4]
 80721e4:	9b05      	ldr	r3, [sp, #20]
 80721e6:	6861      	ldr	r1, [r4, #4]
 80721e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80721ec:	2300      	movs	r3, #0
 80721ee:	9303      	str	r3, [sp, #12]
 80721f0:	ab0a      	add	r3, sp, #40	; 0x28
 80721f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80721f6:	ab09      	add	r3, sp, #36	; 0x24
 80721f8:	ec49 8b10 	vmov	d0, r8, r9
 80721fc:	9300      	str	r3, [sp, #0]
 80721fe:	6022      	str	r2, [r4, #0]
 8072200:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8072204:	4628      	mov	r0, r5
 8072206:	f7ff fecd 	bl	8071fa4 <__cvt>
 807220a:	9b06      	ldr	r3, [sp, #24]
 807220c:	9909      	ldr	r1, [sp, #36]	; 0x24
 807220e:	2b47      	cmp	r3, #71	; 0x47
 8072210:	4680      	mov	r8, r0
 8072212:	d108      	bne.n	8072226 <_printf_float+0x142>
 8072214:	1cc8      	adds	r0, r1, #3
 8072216:	db02      	blt.n	807221e <_printf_float+0x13a>
 8072218:	6863      	ldr	r3, [r4, #4]
 807221a:	4299      	cmp	r1, r3
 807221c:	dd41      	ble.n	80722a2 <_printf_float+0x1be>
 807221e:	f1ab 0b02 	sub.w	fp, fp, #2
 8072222:	fa5f fb8b 	uxtb.w	fp, fp
 8072226:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 807222a:	d820      	bhi.n	807226e <_printf_float+0x18a>
 807222c:	3901      	subs	r1, #1
 807222e:	465a      	mov	r2, fp
 8072230:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8072234:	9109      	str	r1, [sp, #36]	; 0x24
 8072236:	f7ff ff17 	bl	8072068 <__exponent>
 807223a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 807223c:	1813      	adds	r3, r2, r0
 807223e:	2a01      	cmp	r2, #1
 8072240:	4681      	mov	r9, r0
 8072242:	6123      	str	r3, [r4, #16]
 8072244:	dc02      	bgt.n	807224c <_printf_float+0x168>
 8072246:	6822      	ldr	r2, [r4, #0]
 8072248:	07d2      	lsls	r2, r2, #31
 807224a:	d501      	bpl.n	8072250 <_printf_float+0x16c>
 807224c:	3301      	adds	r3, #1
 807224e:	6123      	str	r3, [r4, #16]
 8072250:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8072254:	2b00      	cmp	r3, #0
 8072256:	d09c      	beq.n	8072192 <_printf_float+0xae>
 8072258:	232d      	movs	r3, #45	; 0x2d
 807225a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 807225e:	e798      	b.n	8072192 <_printf_float+0xae>
 8072260:	9a06      	ldr	r2, [sp, #24]
 8072262:	2a47      	cmp	r2, #71	; 0x47
 8072264:	d1be      	bne.n	80721e4 <_printf_float+0x100>
 8072266:	2b00      	cmp	r3, #0
 8072268:	d1bc      	bne.n	80721e4 <_printf_float+0x100>
 807226a:	2301      	movs	r3, #1
 807226c:	e7b9      	b.n	80721e2 <_printf_float+0xfe>
 807226e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8072272:	d118      	bne.n	80722a6 <_printf_float+0x1c2>
 8072274:	2900      	cmp	r1, #0
 8072276:	6863      	ldr	r3, [r4, #4]
 8072278:	dd0b      	ble.n	8072292 <_printf_float+0x1ae>
 807227a:	6121      	str	r1, [r4, #16]
 807227c:	b913      	cbnz	r3, 8072284 <_printf_float+0x1a0>
 807227e:	6822      	ldr	r2, [r4, #0]
 8072280:	07d0      	lsls	r0, r2, #31
 8072282:	d502      	bpl.n	807228a <_printf_float+0x1a6>
 8072284:	3301      	adds	r3, #1
 8072286:	440b      	add	r3, r1
 8072288:	6123      	str	r3, [r4, #16]
 807228a:	65a1      	str	r1, [r4, #88]	; 0x58
 807228c:	f04f 0900 	mov.w	r9, #0
 8072290:	e7de      	b.n	8072250 <_printf_float+0x16c>
 8072292:	b913      	cbnz	r3, 807229a <_printf_float+0x1b6>
 8072294:	6822      	ldr	r2, [r4, #0]
 8072296:	07d2      	lsls	r2, r2, #31
 8072298:	d501      	bpl.n	807229e <_printf_float+0x1ba>
 807229a:	3302      	adds	r3, #2
 807229c:	e7f4      	b.n	8072288 <_printf_float+0x1a4>
 807229e:	2301      	movs	r3, #1
 80722a0:	e7f2      	b.n	8072288 <_printf_float+0x1a4>
 80722a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80722a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80722a8:	4299      	cmp	r1, r3
 80722aa:	db05      	blt.n	80722b8 <_printf_float+0x1d4>
 80722ac:	6823      	ldr	r3, [r4, #0]
 80722ae:	6121      	str	r1, [r4, #16]
 80722b0:	07d8      	lsls	r0, r3, #31
 80722b2:	d5ea      	bpl.n	807228a <_printf_float+0x1a6>
 80722b4:	1c4b      	adds	r3, r1, #1
 80722b6:	e7e7      	b.n	8072288 <_printf_float+0x1a4>
 80722b8:	2900      	cmp	r1, #0
 80722ba:	bfd4      	ite	le
 80722bc:	f1c1 0202 	rsble	r2, r1, #2
 80722c0:	2201      	movgt	r2, #1
 80722c2:	4413      	add	r3, r2
 80722c4:	e7e0      	b.n	8072288 <_printf_float+0x1a4>
 80722c6:	6823      	ldr	r3, [r4, #0]
 80722c8:	055a      	lsls	r2, r3, #21
 80722ca:	d407      	bmi.n	80722dc <_printf_float+0x1f8>
 80722cc:	6923      	ldr	r3, [r4, #16]
 80722ce:	4642      	mov	r2, r8
 80722d0:	4631      	mov	r1, r6
 80722d2:	4628      	mov	r0, r5
 80722d4:	47b8      	blx	r7
 80722d6:	3001      	adds	r0, #1
 80722d8:	d12c      	bne.n	8072334 <_printf_float+0x250>
 80722da:	e764      	b.n	80721a6 <_printf_float+0xc2>
 80722dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80722e0:	f240 80e0 	bls.w	80724a4 <_printf_float+0x3c0>
 80722e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80722e8:	2200      	movs	r2, #0
 80722ea:	2300      	movs	r3, #0
 80722ec:	f7ee fc04 	bl	8060af8 <__aeabi_dcmpeq>
 80722f0:	2800      	cmp	r0, #0
 80722f2:	d034      	beq.n	807235e <_printf_float+0x27a>
 80722f4:	4a37      	ldr	r2, [pc, #220]	; (80723d4 <_printf_float+0x2f0>)
 80722f6:	2301      	movs	r3, #1
 80722f8:	4631      	mov	r1, r6
 80722fa:	4628      	mov	r0, r5
 80722fc:	47b8      	blx	r7
 80722fe:	3001      	adds	r0, #1
 8072300:	f43f af51 	beq.w	80721a6 <_printf_float+0xc2>
 8072304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072308:	429a      	cmp	r2, r3
 807230a:	db02      	blt.n	8072312 <_printf_float+0x22e>
 807230c:	6823      	ldr	r3, [r4, #0]
 807230e:	07d8      	lsls	r0, r3, #31
 8072310:	d510      	bpl.n	8072334 <_printf_float+0x250>
 8072312:	ee18 3a10 	vmov	r3, s16
 8072316:	4652      	mov	r2, sl
 8072318:	4631      	mov	r1, r6
 807231a:	4628      	mov	r0, r5
 807231c:	47b8      	blx	r7
 807231e:	3001      	adds	r0, #1
 8072320:	f43f af41 	beq.w	80721a6 <_printf_float+0xc2>
 8072324:	f04f 0800 	mov.w	r8, #0
 8072328:	f104 091a 	add.w	r9, r4, #26
 807232c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 807232e:	3b01      	subs	r3, #1
 8072330:	4543      	cmp	r3, r8
 8072332:	dc09      	bgt.n	8072348 <_printf_float+0x264>
 8072334:	6823      	ldr	r3, [r4, #0]
 8072336:	079b      	lsls	r3, r3, #30
 8072338:	f100 8105 	bmi.w	8072546 <_printf_float+0x462>
 807233c:	68e0      	ldr	r0, [r4, #12]
 807233e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8072340:	4298      	cmp	r0, r3
 8072342:	bfb8      	it	lt
 8072344:	4618      	movlt	r0, r3
 8072346:	e730      	b.n	80721aa <_printf_float+0xc6>
 8072348:	2301      	movs	r3, #1
 807234a:	464a      	mov	r2, r9
 807234c:	4631      	mov	r1, r6
 807234e:	4628      	mov	r0, r5
 8072350:	47b8      	blx	r7
 8072352:	3001      	adds	r0, #1
 8072354:	f43f af27 	beq.w	80721a6 <_printf_float+0xc2>
 8072358:	f108 0801 	add.w	r8, r8, #1
 807235c:	e7e6      	b.n	807232c <_printf_float+0x248>
 807235e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8072360:	2b00      	cmp	r3, #0
 8072362:	dc39      	bgt.n	80723d8 <_printf_float+0x2f4>
 8072364:	4a1b      	ldr	r2, [pc, #108]	; (80723d4 <_printf_float+0x2f0>)
 8072366:	2301      	movs	r3, #1
 8072368:	4631      	mov	r1, r6
 807236a:	4628      	mov	r0, r5
 807236c:	47b8      	blx	r7
 807236e:	3001      	adds	r0, #1
 8072370:	f43f af19 	beq.w	80721a6 <_printf_float+0xc2>
 8072374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072378:	4313      	orrs	r3, r2
 807237a:	d102      	bne.n	8072382 <_printf_float+0x29e>
 807237c:	6823      	ldr	r3, [r4, #0]
 807237e:	07d9      	lsls	r1, r3, #31
 8072380:	d5d8      	bpl.n	8072334 <_printf_float+0x250>
 8072382:	ee18 3a10 	vmov	r3, s16
 8072386:	4652      	mov	r2, sl
 8072388:	4631      	mov	r1, r6
 807238a:	4628      	mov	r0, r5
 807238c:	47b8      	blx	r7
 807238e:	3001      	adds	r0, #1
 8072390:	f43f af09 	beq.w	80721a6 <_printf_float+0xc2>
 8072394:	f04f 0900 	mov.w	r9, #0
 8072398:	f104 0a1a 	add.w	sl, r4, #26
 807239c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 807239e:	425b      	negs	r3, r3
 80723a0:	454b      	cmp	r3, r9
 80723a2:	dc01      	bgt.n	80723a8 <_printf_float+0x2c4>
 80723a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80723a6:	e792      	b.n	80722ce <_printf_float+0x1ea>
 80723a8:	2301      	movs	r3, #1
 80723aa:	4652      	mov	r2, sl
 80723ac:	4631      	mov	r1, r6
 80723ae:	4628      	mov	r0, r5
 80723b0:	47b8      	blx	r7
 80723b2:	3001      	adds	r0, #1
 80723b4:	f43f aef7 	beq.w	80721a6 <_printf_float+0xc2>
 80723b8:	f109 0901 	add.w	r9, r9, #1
 80723bc:	e7ee      	b.n	807239c <_printf_float+0x2b8>
 80723be:	bf00      	nop
 80723c0:	7fefffff 	.word	0x7fefffff
 80723c4:	08076ef4 	.word	0x08076ef4
 80723c8:	08076ef8 	.word	0x08076ef8
 80723cc:	08076f00 	.word	0x08076f00
 80723d0:	08076efc 	.word	0x08076efc
 80723d4:	08076f04 	.word	0x08076f04
 80723d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80723da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80723dc:	429a      	cmp	r2, r3
 80723de:	bfa8      	it	ge
 80723e0:	461a      	movge	r2, r3
 80723e2:	2a00      	cmp	r2, #0
 80723e4:	4691      	mov	r9, r2
 80723e6:	dc37      	bgt.n	8072458 <_printf_float+0x374>
 80723e8:	f04f 0b00 	mov.w	fp, #0
 80723ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80723f0:	f104 021a 	add.w	r2, r4, #26
 80723f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80723f6:	9305      	str	r3, [sp, #20]
 80723f8:	eba3 0309 	sub.w	r3, r3, r9
 80723fc:	455b      	cmp	r3, fp
 80723fe:	dc33      	bgt.n	8072468 <_printf_float+0x384>
 8072400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072404:	429a      	cmp	r2, r3
 8072406:	db3b      	blt.n	8072480 <_printf_float+0x39c>
 8072408:	6823      	ldr	r3, [r4, #0]
 807240a:	07da      	lsls	r2, r3, #31
 807240c:	d438      	bmi.n	8072480 <_printf_float+0x39c>
 807240e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8072410:	9b05      	ldr	r3, [sp, #20]
 8072412:	9909      	ldr	r1, [sp, #36]	; 0x24
 8072414:	1ad3      	subs	r3, r2, r3
 8072416:	eba2 0901 	sub.w	r9, r2, r1
 807241a:	4599      	cmp	r9, r3
 807241c:	bfa8      	it	ge
 807241e:	4699      	movge	r9, r3
 8072420:	f1b9 0f00 	cmp.w	r9, #0
 8072424:	dc35      	bgt.n	8072492 <_printf_float+0x3ae>
 8072426:	f04f 0800 	mov.w	r8, #0
 807242a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 807242e:	f104 0a1a 	add.w	sl, r4, #26
 8072432:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072436:	1a9b      	subs	r3, r3, r2
 8072438:	eba3 0309 	sub.w	r3, r3, r9
 807243c:	4543      	cmp	r3, r8
 807243e:	f77f af79 	ble.w	8072334 <_printf_float+0x250>
 8072442:	2301      	movs	r3, #1
 8072444:	4652      	mov	r2, sl
 8072446:	4631      	mov	r1, r6
 8072448:	4628      	mov	r0, r5
 807244a:	47b8      	blx	r7
 807244c:	3001      	adds	r0, #1
 807244e:	f43f aeaa 	beq.w	80721a6 <_printf_float+0xc2>
 8072452:	f108 0801 	add.w	r8, r8, #1
 8072456:	e7ec      	b.n	8072432 <_printf_float+0x34e>
 8072458:	4613      	mov	r3, r2
 807245a:	4631      	mov	r1, r6
 807245c:	4642      	mov	r2, r8
 807245e:	4628      	mov	r0, r5
 8072460:	47b8      	blx	r7
 8072462:	3001      	adds	r0, #1
 8072464:	d1c0      	bne.n	80723e8 <_printf_float+0x304>
 8072466:	e69e      	b.n	80721a6 <_printf_float+0xc2>
 8072468:	2301      	movs	r3, #1
 807246a:	4631      	mov	r1, r6
 807246c:	4628      	mov	r0, r5
 807246e:	9205      	str	r2, [sp, #20]
 8072470:	47b8      	blx	r7
 8072472:	3001      	adds	r0, #1
 8072474:	f43f ae97 	beq.w	80721a6 <_printf_float+0xc2>
 8072478:	9a05      	ldr	r2, [sp, #20]
 807247a:	f10b 0b01 	add.w	fp, fp, #1
 807247e:	e7b9      	b.n	80723f4 <_printf_float+0x310>
 8072480:	ee18 3a10 	vmov	r3, s16
 8072484:	4652      	mov	r2, sl
 8072486:	4631      	mov	r1, r6
 8072488:	4628      	mov	r0, r5
 807248a:	47b8      	blx	r7
 807248c:	3001      	adds	r0, #1
 807248e:	d1be      	bne.n	807240e <_printf_float+0x32a>
 8072490:	e689      	b.n	80721a6 <_printf_float+0xc2>
 8072492:	9a05      	ldr	r2, [sp, #20]
 8072494:	464b      	mov	r3, r9
 8072496:	4442      	add	r2, r8
 8072498:	4631      	mov	r1, r6
 807249a:	4628      	mov	r0, r5
 807249c:	47b8      	blx	r7
 807249e:	3001      	adds	r0, #1
 80724a0:	d1c1      	bne.n	8072426 <_printf_float+0x342>
 80724a2:	e680      	b.n	80721a6 <_printf_float+0xc2>
 80724a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80724a6:	2a01      	cmp	r2, #1
 80724a8:	dc01      	bgt.n	80724ae <_printf_float+0x3ca>
 80724aa:	07db      	lsls	r3, r3, #31
 80724ac:	d538      	bpl.n	8072520 <_printf_float+0x43c>
 80724ae:	2301      	movs	r3, #1
 80724b0:	4642      	mov	r2, r8
 80724b2:	4631      	mov	r1, r6
 80724b4:	4628      	mov	r0, r5
 80724b6:	47b8      	blx	r7
 80724b8:	3001      	adds	r0, #1
 80724ba:	f43f ae74 	beq.w	80721a6 <_printf_float+0xc2>
 80724be:	ee18 3a10 	vmov	r3, s16
 80724c2:	4652      	mov	r2, sl
 80724c4:	4631      	mov	r1, r6
 80724c6:	4628      	mov	r0, r5
 80724c8:	47b8      	blx	r7
 80724ca:	3001      	adds	r0, #1
 80724cc:	f43f ae6b 	beq.w	80721a6 <_printf_float+0xc2>
 80724d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80724d4:	2200      	movs	r2, #0
 80724d6:	2300      	movs	r3, #0
 80724d8:	f7ee fb0e 	bl	8060af8 <__aeabi_dcmpeq>
 80724dc:	b9d8      	cbnz	r0, 8072516 <_printf_float+0x432>
 80724de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80724e0:	f108 0201 	add.w	r2, r8, #1
 80724e4:	3b01      	subs	r3, #1
 80724e6:	4631      	mov	r1, r6
 80724e8:	4628      	mov	r0, r5
 80724ea:	47b8      	blx	r7
 80724ec:	3001      	adds	r0, #1
 80724ee:	d10e      	bne.n	807250e <_printf_float+0x42a>
 80724f0:	e659      	b.n	80721a6 <_printf_float+0xc2>
 80724f2:	2301      	movs	r3, #1
 80724f4:	4652      	mov	r2, sl
 80724f6:	4631      	mov	r1, r6
 80724f8:	4628      	mov	r0, r5
 80724fa:	47b8      	blx	r7
 80724fc:	3001      	adds	r0, #1
 80724fe:	f43f ae52 	beq.w	80721a6 <_printf_float+0xc2>
 8072502:	f108 0801 	add.w	r8, r8, #1
 8072506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8072508:	3b01      	subs	r3, #1
 807250a:	4543      	cmp	r3, r8
 807250c:	dcf1      	bgt.n	80724f2 <_printf_float+0x40e>
 807250e:	464b      	mov	r3, r9
 8072510:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8072514:	e6dc      	b.n	80722d0 <_printf_float+0x1ec>
 8072516:	f04f 0800 	mov.w	r8, #0
 807251a:	f104 0a1a 	add.w	sl, r4, #26
 807251e:	e7f2      	b.n	8072506 <_printf_float+0x422>
 8072520:	2301      	movs	r3, #1
 8072522:	4642      	mov	r2, r8
 8072524:	e7df      	b.n	80724e6 <_printf_float+0x402>
 8072526:	2301      	movs	r3, #1
 8072528:	464a      	mov	r2, r9
 807252a:	4631      	mov	r1, r6
 807252c:	4628      	mov	r0, r5
 807252e:	47b8      	blx	r7
 8072530:	3001      	adds	r0, #1
 8072532:	f43f ae38 	beq.w	80721a6 <_printf_float+0xc2>
 8072536:	f108 0801 	add.w	r8, r8, #1
 807253a:	68e3      	ldr	r3, [r4, #12]
 807253c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 807253e:	1a5b      	subs	r3, r3, r1
 8072540:	4543      	cmp	r3, r8
 8072542:	dcf0      	bgt.n	8072526 <_printf_float+0x442>
 8072544:	e6fa      	b.n	807233c <_printf_float+0x258>
 8072546:	f04f 0800 	mov.w	r8, #0
 807254a:	f104 0919 	add.w	r9, r4, #25
 807254e:	e7f4      	b.n	807253a <_printf_float+0x456>

08072550 <_printf_common>:
 8072550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8072554:	4616      	mov	r6, r2
 8072556:	4699      	mov	r9, r3
 8072558:	688a      	ldr	r2, [r1, #8]
 807255a:	690b      	ldr	r3, [r1, #16]
 807255c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8072560:	4293      	cmp	r3, r2
 8072562:	bfb8      	it	lt
 8072564:	4613      	movlt	r3, r2
 8072566:	6033      	str	r3, [r6, #0]
 8072568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 807256c:	4607      	mov	r7, r0
 807256e:	460c      	mov	r4, r1
 8072570:	b10a      	cbz	r2, 8072576 <_printf_common+0x26>
 8072572:	3301      	adds	r3, #1
 8072574:	6033      	str	r3, [r6, #0]
 8072576:	6823      	ldr	r3, [r4, #0]
 8072578:	0699      	lsls	r1, r3, #26
 807257a:	bf42      	ittt	mi
 807257c:	6833      	ldrmi	r3, [r6, #0]
 807257e:	3302      	addmi	r3, #2
 8072580:	6033      	strmi	r3, [r6, #0]
 8072582:	6825      	ldr	r5, [r4, #0]
 8072584:	f015 0506 	ands.w	r5, r5, #6
 8072588:	d106      	bne.n	8072598 <_printf_common+0x48>
 807258a:	f104 0a19 	add.w	sl, r4, #25
 807258e:	68e3      	ldr	r3, [r4, #12]
 8072590:	6832      	ldr	r2, [r6, #0]
 8072592:	1a9b      	subs	r3, r3, r2
 8072594:	42ab      	cmp	r3, r5
 8072596:	dc26      	bgt.n	80725e6 <_printf_common+0x96>
 8072598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 807259c:	1e13      	subs	r3, r2, #0
 807259e:	6822      	ldr	r2, [r4, #0]
 80725a0:	bf18      	it	ne
 80725a2:	2301      	movne	r3, #1
 80725a4:	0692      	lsls	r2, r2, #26
 80725a6:	d42b      	bmi.n	8072600 <_printf_common+0xb0>
 80725a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80725ac:	4649      	mov	r1, r9
 80725ae:	4638      	mov	r0, r7
 80725b0:	47c0      	blx	r8
 80725b2:	3001      	adds	r0, #1
 80725b4:	d01e      	beq.n	80725f4 <_printf_common+0xa4>
 80725b6:	6823      	ldr	r3, [r4, #0]
 80725b8:	68e5      	ldr	r5, [r4, #12]
 80725ba:	6832      	ldr	r2, [r6, #0]
 80725bc:	f003 0306 	and.w	r3, r3, #6
 80725c0:	2b04      	cmp	r3, #4
 80725c2:	bf08      	it	eq
 80725c4:	1aad      	subeq	r5, r5, r2
 80725c6:	68a3      	ldr	r3, [r4, #8]
 80725c8:	6922      	ldr	r2, [r4, #16]
 80725ca:	bf0c      	ite	eq
 80725cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80725d0:	2500      	movne	r5, #0
 80725d2:	4293      	cmp	r3, r2
 80725d4:	bfc4      	itt	gt
 80725d6:	1a9b      	subgt	r3, r3, r2
 80725d8:	18ed      	addgt	r5, r5, r3
 80725da:	2600      	movs	r6, #0
 80725dc:	341a      	adds	r4, #26
 80725de:	42b5      	cmp	r5, r6
 80725e0:	d11a      	bne.n	8072618 <_printf_common+0xc8>
 80725e2:	2000      	movs	r0, #0
 80725e4:	e008      	b.n	80725f8 <_printf_common+0xa8>
 80725e6:	2301      	movs	r3, #1
 80725e8:	4652      	mov	r2, sl
 80725ea:	4649      	mov	r1, r9
 80725ec:	4638      	mov	r0, r7
 80725ee:	47c0      	blx	r8
 80725f0:	3001      	adds	r0, #1
 80725f2:	d103      	bne.n	80725fc <_printf_common+0xac>
 80725f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80725f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80725fc:	3501      	adds	r5, #1
 80725fe:	e7c6      	b.n	807258e <_printf_common+0x3e>
 8072600:	18e1      	adds	r1, r4, r3
 8072602:	1c5a      	adds	r2, r3, #1
 8072604:	2030      	movs	r0, #48	; 0x30
 8072606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 807260a:	4422      	add	r2, r4
 807260c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8072610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8072614:	3302      	adds	r3, #2
 8072616:	e7c7      	b.n	80725a8 <_printf_common+0x58>
 8072618:	2301      	movs	r3, #1
 807261a:	4622      	mov	r2, r4
 807261c:	4649      	mov	r1, r9
 807261e:	4638      	mov	r0, r7
 8072620:	47c0      	blx	r8
 8072622:	3001      	adds	r0, #1
 8072624:	d0e6      	beq.n	80725f4 <_printf_common+0xa4>
 8072626:	3601      	adds	r6, #1
 8072628:	e7d9      	b.n	80725de <_printf_common+0x8e>
	...

0807262c <_printf_i>:
 807262c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8072630:	460c      	mov	r4, r1
 8072632:	4691      	mov	r9, r2
 8072634:	7e27      	ldrb	r7, [r4, #24]
 8072636:	990c      	ldr	r1, [sp, #48]	; 0x30
 8072638:	2f78      	cmp	r7, #120	; 0x78
 807263a:	4680      	mov	r8, r0
 807263c:	469a      	mov	sl, r3
 807263e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8072642:	d807      	bhi.n	8072654 <_printf_i+0x28>
 8072644:	2f62      	cmp	r7, #98	; 0x62
 8072646:	d80a      	bhi.n	807265e <_printf_i+0x32>
 8072648:	2f00      	cmp	r7, #0
 807264a:	f000 80d8 	beq.w	80727fe <_printf_i+0x1d2>
 807264e:	2f58      	cmp	r7, #88	; 0x58
 8072650:	f000 80a3 	beq.w	807279a <_printf_i+0x16e>
 8072654:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8072658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 807265c:	e03a      	b.n	80726d4 <_printf_i+0xa8>
 807265e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8072662:	2b15      	cmp	r3, #21
 8072664:	d8f6      	bhi.n	8072654 <_printf_i+0x28>
 8072666:	a001      	add	r0, pc, #4	; (adr r0, 807266c <_printf_i+0x40>)
 8072668:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 807266c:	080726c5 	.word	0x080726c5
 8072670:	080726d9 	.word	0x080726d9
 8072674:	08072655 	.word	0x08072655
 8072678:	08072655 	.word	0x08072655
 807267c:	08072655 	.word	0x08072655
 8072680:	08072655 	.word	0x08072655
 8072684:	080726d9 	.word	0x080726d9
 8072688:	08072655 	.word	0x08072655
 807268c:	08072655 	.word	0x08072655
 8072690:	08072655 	.word	0x08072655
 8072694:	08072655 	.word	0x08072655
 8072698:	080727e5 	.word	0x080727e5
 807269c:	08072709 	.word	0x08072709
 80726a0:	080727c7 	.word	0x080727c7
 80726a4:	08072655 	.word	0x08072655
 80726a8:	08072655 	.word	0x08072655
 80726ac:	08072807 	.word	0x08072807
 80726b0:	08072655 	.word	0x08072655
 80726b4:	08072709 	.word	0x08072709
 80726b8:	08072655 	.word	0x08072655
 80726bc:	08072655 	.word	0x08072655
 80726c0:	080727cf 	.word	0x080727cf
 80726c4:	680b      	ldr	r3, [r1, #0]
 80726c6:	1d1a      	adds	r2, r3, #4
 80726c8:	681b      	ldr	r3, [r3, #0]
 80726ca:	600a      	str	r2, [r1, #0]
 80726cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80726d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80726d4:	2301      	movs	r3, #1
 80726d6:	e0a3      	b.n	8072820 <_printf_i+0x1f4>
 80726d8:	6825      	ldr	r5, [r4, #0]
 80726da:	6808      	ldr	r0, [r1, #0]
 80726dc:	062e      	lsls	r6, r5, #24
 80726de:	f100 0304 	add.w	r3, r0, #4
 80726e2:	d50a      	bpl.n	80726fa <_printf_i+0xce>
 80726e4:	6805      	ldr	r5, [r0, #0]
 80726e6:	600b      	str	r3, [r1, #0]
 80726e8:	2d00      	cmp	r5, #0
 80726ea:	da03      	bge.n	80726f4 <_printf_i+0xc8>
 80726ec:	232d      	movs	r3, #45	; 0x2d
 80726ee:	426d      	negs	r5, r5
 80726f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80726f4:	485e      	ldr	r0, [pc, #376]	; (8072870 <_printf_i+0x244>)
 80726f6:	230a      	movs	r3, #10
 80726f8:	e019      	b.n	807272e <_printf_i+0x102>
 80726fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80726fe:	6805      	ldr	r5, [r0, #0]
 8072700:	600b      	str	r3, [r1, #0]
 8072702:	bf18      	it	ne
 8072704:	b22d      	sxthne	r5, r5
 8072706:	e7ef      	b.n	80726e8 <_printf_i+0xbc>
 8072708:	680b      	ldr	r3, [r1, #0]
 807270a:	6825      	ldr	r5, [r4, #0]
 807270c:	1d18      	adds	r0, r3, #4
 807270e:	6008      	str	r0, [r1, #0]
 8072710:	0628      	lsls	r0, r5, #24
 8072712:	d501      	bpl.n	8072718 <_printf_i+0xec>
 8072714:	681d      	ldr	r5, [r3, #0]
 8072716:	e002      	b.n	807271e <_printf_i+0xf2>
 8072718:	0669      	lsls	r1, r5, #25
 807271a:	d5fb      	bpl.n	8072714 <_printf_i+0xe8>
 807271c:	881d      	ldrh	r5, [r3, #0]
 807271e:	4854      	ldr	r0, [pc, #336]	; (8072870 <_printf_i+0x244>)
 8072720:	2f6f      	cmp	r7, #111	; 0x6f
 8072722:	bf0c      	ite	eq
 8072724:	2308      	moveq	r3, #8
 8072726:	230a      	movne	r3, #10
 8072728:	2100      	movs	r1, #0
 807272a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 807272e:	6866      	ldr	r6, [r4, #4]
 8072730:	60a6      	str	r6, [r4, #8]
 8072732:	2e00      	cmp	r6, #0
 8072734:	bfa2      	ittt	ge
 8072736:	6821      	ldrge	r1, [r4, #0]
 8072738:	f021 0104 	bicge.w	r1, r1, #4
 807273c:	6021      	strge	r1, [r4, #0]
 807273e:	b90d      	cbnz	r5, 8072744 <_printf_i+0x118>
 8072740:	2e00      	cmp	r6, #0
 8072742:	d04d      	beq.n	80727e0 <_printf_i+0x1b4>
 8072744:	4616      	mov	r6, r2
 8072746:	fbb5 f1f3 	udiv	r1, r5, r3
 807274a:	fb03 5711 	mls	r7, r3, r1, r5
 807274e:	5dc7      	ldrb	r7, [r0, r7]
 8072750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8072754:	462f      	mov	r7, r5
 8072756:	42bb      	cmp	r3, r7
 8072758:	460d      	mov	r5, r1
 807275a:	d9f4      	bls.n	8072746 <_printf_i+0x11a>
 807275c:	2b08      	cmp	r3, #8
 807275e:	d10b      	bne.n	8072778 <_printf_i+0x14c>
 8072760:	6823      	ldr	r3, [r4, #0]
 8072762:	07df      	lsls	r7, r3, #31
 8072764:	d508      	bpl.n	8072778 <_printf_i+0x14c>
 8072766:	6923      	ldr	r3, [r4, #16]
 8072768:	6861      	ldr	r1, [r4, #4]
 807276a:	4299      	cmp	r1, r3
 807276c:	bfde      	ittt	le
 807276e:	2330      	movle	r3, #48	; 0x30
 8072770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8072774:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8072778:	1b92      	subs	r2, r2, r6
 807277a:	6122      	str	r2, [r4, #16]
 807277c:	f8cd a000 	str.w	sl, [sp]
 8072780:	464b      	mov	r3, r9
 8072782:	aa03      	add	r2, sp, #12
 8072784:	4621      	mov	r1, r4
 8072786:	4640      	mov	r0, r8
 8072788:	f7ff fee2 	bl	8072550 <_printf_common>
 807278c:	3001      	adds	r0, #1
 807278e:	d14c      	bne.n	807282a <_printf_i+0x1fe>
 8072790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8072794:	b004      	add	sp, #16
 8072796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 807279a:	4835      	ldr	r0, [pc, #212]	; (8072870 <_printf_i+0x244>)
 807279c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80727a0:	6823      	ldr	r3, [r4, #0]
 80727a2:	680e      	ldr	r6, [r1, #0]
 80727a4:	061f      	lsls	r7, r3, #24
 80727a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80727aa:	600e      	str	r6, [r1, #0]
 80727ac:	d514      	bpl.n	80727d8 <_printf_i+0x1ac>
 80727ae:	07d9      	lsls	r1, r3, #31
 80727b0:	bf44      	itt	mi
 80727b2:	f043 0320 	orrmi.w	r3, r3, #32
 80727b6:	6023      	strmi	r3, [r4, #0]
 80727b8:	b91d      	cbnz	r5, 80727c2 <_printf_i+0x196>
 80727ba:	6823      	ldr	r3, [r4, #0]
 80727bc:	f023 0320 	bic.w	r3, r3, #32
 80727c0:	6023      	str	r3, [r4, #0]
 80727c2:	2310      	movs	r3, #16
 80727c4:	e7b0      	b.n	8072728 <_printf_i+0xfc>
 80727c6:	6823      	ldr	r3, [r4, #0]
 80727c8:	f043 0320 	orr.w	r3, r3, #32
 80727cc:	6023      	str	r3, [r4, #0]
 80727ce:	2378      	movs	r3, #120	; 0x78
 80727d0:	4828      	ldr	r0, [pc, #160]	; (8072874 <_printf_i+0x248>)
 80727d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80727d6:	e7e3      	b.n	80727a0 <_printf_i+0x174>
 80727d8:	065e      	lsls	r6, r3, #25
 80727da:	bf48      	it	mi
 80727dc:	b2ad      	uxthmi	r5, r5
 80727de:	e7e6      	b.n	80727ae <_printf_i+0x182>
 80727e0:	4616      	mov	r6, r2
 80727e2:	e7bb      	b.n	807275c <_printf_i+0x130>
 80727e4:	680b      	ldr	r3, [r1, #0]
 80727e6:	6826      	ldr	r6, [r4, #0]
 80727e8:	6960      	ldr	r0, [r4, #20]
 80727ea:	1d1d      	adds	r5, r3, #4
 80727ec:	600d      	str	r5, [r1, #0]
 80727ee:	0635      	lsls	r5, r6, #24
 80727f0:	681b      	ldr	r3, [r3, #0]
 80727f2:	d501      	bpl.n	80727f8 <_printf_i+0x1cc>
 80727f4:	6018      	str	r0, [r3, #0]
 80727f6:	e002      	b.n	80727fe <_printf_i+0x1d2>
 80727f8:	0671      	lsls	r1, r6, #25
 80727fa:	d5fb      	bpl.n	80727f4 <_printf_i+0x1c8>
 80727fc:	8018      	strh	r0, [r3, #0]
 80727fe:	2300      	movs	r3, #0
 8072800:	6123      	str	r3, [r4, #16]
 8072802:	4616      	mov	r6, r2
 8072804:	e7ba      	b.n	807277c <_printf_i+0x150>
 8072806:	680b      	ldr	r3, [r1, #0]
 8072808:	1d1a      	adds	r2, r3, #4
 807280a:	600a      	str	r2, [r1, #0]
 807280c:	681e      	ldr	r6, [r3, #0]
 807280e:	6862      	ldr	r2, [r4, #4]
 8072810:	2100      	movs	r1, #0
 8072812:	4630      	mov	r0, r6
 8072814:	f7ed fcfc 	bl	8060210 <memchr>
 8072818:	b108      	cbz	r0, 807281e <_printf_i+0x1f2>
 807281a:	1b80      	subs	r0, r0, r6
 807281c:	6060      	str	r0, [r4, #4]
 807281e:	6863      	ldr	r3, [r4, #4]
 8072820:	6123      	str	r3, [r4, #16]
 8072822:	2300      	movs	r3, #0
 8072824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8072828:	e7a8      	b.n	807277c <_printf_i+0x150>
 807282a:	6923      	ldr	r3, [r4, #16]
 807282c:	4632      	mov	r2, r6
 807282e:	4649      	mov	r1, r9
 8072830:	4640      	mov	r0, r8
 8072832:	47d0      	blx	sl
 8072834:	3001      	adds	r0, #1
 8072836:	d0ab      	beq.n	8072790 <_printf_i+0x164>
 8072838:	6823      	ldr	r3, [r4, #0]
 807283a:	079b      	lsls	r3, r3, #30
 807283c:	d413      	bmi.n	8072866 <_printf_i+0x23a>
 807283e:	68e0      	ldr	r0, [r4, #12]
 8072840:	9b03      	ldr	r3, [sp, #12]
 8072842:	4298      	cmp	r0, r3
 8072844:	bfb8      	it	lt
 8072846:	4618      	movlt	r0, r3
 8072848:	e7a4      	b.n	8072794 <_printf_i+0x168>
 807284a:	2301      	movs	r3, #1
 807284c:	4632      	mov	r2, r6
 807284e:	4649      	mov	r1, r9
 8072850:	4640      	mov	r0, r8
 8072852:	47d0      	blx	sl
 8072854:	3001      	adds	r0, #1
 8072856:	d09b      	beq.n	8072790 <_printf_i+0x164>
 8072858:	3501      	adds	r5, #1
 807285a:	68e3      	ldr	r3, [r4, #12]
 807285c:	9903      	ldr	r1, [sp, #12]
 807285e:	1a5b      	subs	r3, r3, r1
 8072860:	42ab      	cmp	r3, r5
 8072862:	dcf2      	bgt.n	807284a <_printf_i+0x21e>
 8072864:	e7eb      	b.n	807283e <_printf_i+0x212>
 8072866:	2500      	movs	r5, #0
 8072868:	f104 0619 	add.w	r6, r4, #25
 807286c:	e7f5      	b.n	807285a <_printf_i+0x22e>
 807286e:	bf00      	nop
 8072870:	08076f06 	.word	0x08076f06
 8072874:	08076f17 	.word	0x08076f17

08072878 <_scanf_float>:
 8072878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 807287c:	b087      	sub	sp, #28
 807287e:	4617      	mov	r7, r2
 8072880:	9303      	str	r3, [sp, #12]
 8072882:	688b      	ldr	r3, [r1, #8]
 8072884:	1e5a      	subs	r2, r3, #1
 8072886:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 807288a:	bf83      	ittte	hi
 807288c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8072890:	195b      	addhi	r3, r3, r5
 8072892:	9302      	strhi	r3, [sp, #8]
 8072894:	2300      	movls	r3, #0
 8072896:	bf86      	itte	hi
 8072898:	f240 135d 	movwhi	r3, #349	; 0x15d
 807289c:	608b      	strhi	r3, [r1, #8]
 807289e:	9302      	strls	r3, [sp, #8]
 80728a0:	680b      	ldr	r3, [r1, #0]
 80728a2:	468b      	mov	fp, r1
 80728a4:	2500      	movs	r5, #0
 80728a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80728aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80728ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80728b2:	4680      	mov	r8, r0
 80728b4:	460c      	mov	r4, r1
 80728b6:	465e      	mov	r6, fp
 80728b8:	46aa      	mov	sl, r5
 80728ba:	46a9      	mov	r9, r5
 80728bc:	9501      	str	r5, [sp, #4]
 80728be:	68a2      	ldr	r2, [r4, #8]
 80728c0:	b152      	cbz	r2, 80728d8 <_scanf_float+0x60>
 80728c2:	683b      	ldr	r3, [r7, #0]
 80728c4:	781b      	ldrb	r3, [r3, #0]
 80728c6:	2b4e      	cmp	r3, #78	; 0x4e
 80728c8:	d864      	bhi.n	8072994 <_scanf_float+0x11c>
 80728ca:	2b40      	cmp	r3, #64	; 0x40
 80728cc:	d83c      	bhi.n	8072948 <_scanf_float+0xd0>
 80728ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80728d2:	b2c8      	uxtb	r0, r1
 80728d4:	280e      	cmp	r0, #14
 80728d6:	d93a      	bls.n	807294e <_scanf_float+0xd6>
 80728d8:	f1b9 0f00 	cmp.w	r9, #0
 80728dc:	d003      	beq.n	80728e6 <_scanf_float+0x6e>
 80728de:	6823      	ldr	r3, [r4, #0]
 80728e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80728e4:	6023      	str	r3, [r4, #0]
 80728e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80728ea:	f1ba 0f01 	cmp.w	sl, #1
 80728ee:	f200 8113 	bhi.w	8072b18 <_scanf_float+0x2a0>
 80728f2:	455e      	cmp	r6, fp
 80728f4:	f200 8105 	bhi.w	8072b02 <_scanf_float+0x28a>
 80728f8:	2501      	movs	r5, #1
 80728fa:	4628      	mov	r0, r5
 80728fc:	b007      	add	sp, #28
 80728fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8072902:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8072906:	2a0d      	cmp	r2, #13
 8072908:	d8e6      	bhi.n	80728d8 <_scanf_float+0x60>
 807290a:	a101      	add	r1, pc, #4	; (adr r1, 8072910 <_scanf_float+0x98>)
 807290c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8072910:	08072a4f 	.word	0x08072a4f
 8072914:	080728d9 	.word	0x080728d9
 8072918:	080728d9 	.word	0x080728d9
 807291c:	080728d9 	.word	0x080728d9
 8072920:	08072aaf 	.word	0x08072aaf
 8072924:	08072a87 	.word	0x08072a87
 8072928:	080728d9 	.word	0x080728d9
 807292c:	080728d9 	.word	0x080728d9
 8072930:	08072a5d 	.word	0x08072a5d
 8072934:	080728d9 	.word	0x080728d9
 8072938:	080728d9 	.word	0x080728d9
 807293c:	080728d9 	.word	0x080728d9
 8072940:	080728d9 	.word	0x080728d9
 8072944:	08072a15 	.word	0x08072a15
 8072948:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 807294c:	e7db      	b.n	8072906 <_scanf_float+0x8e>
 807294e:	290e      	cmp	r1, #14
 8072950:	d8c2      	bhi.n	80728d8 <_scanf_float+0x60>
 8072952:	a001      	add	r0, pc, #4	; (adr r0, 8072958 <_scanf_float+0xe0>)
 8072954:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8072958:	08072a07 	.word	0x08072a07
 807295c:	080728d9 	.word	0x080728d9
 8072960:	08072a07 	.word	0x08072a07
 8072964:	08072a9b 	.word	0x08072a9b
 8072968:	080728d9 	.word	0x080728d9
 807296c:	080729b5 	.word	0x080729b5
 8072970:	080729f1 	.word	0x080729f1
 8072974:	080729f1 	.word	0x080729f1
 8072978:	080729f1 	.word	0x080729f1
 807297c:	080729f1 	.word	0x080729f1
 8072980:	080729f1 	.word	0x080729f1
 8072984:	080729f1 	.word	0x080729f1
 8072988:	080729f1 	.word	0x080729f1
 807298c:	080729f1 	.word	0x080729f1
 8072990:	080729f1 	.word	0x080729f1
 8072994:	2b6e      	cmp	r3, #110	; 0x6e
 8072996:	d809      	bhi.n	80729ac <_scanf_float+0x134>
 8072998:	2b60      	cmp	r3, #96	; 0x60
 807299a:	d8b2      	bhi.n	8072902 <_scanf_float+0x8a>
 807299c:	2b54      	cmp	r3, #84	; 0x54
 807299e:	d077      	beq.n	8072a90 <_scanf_float+0x218>
 80729a0:	2b59      	cmp	r3, #89	; 0x59
 80729a2:	d199      	bne.n	80728d8 <_scanf_float+0x60>
 80729a4:	2d07      	cmp	r5, #7
 80729a6:	d197      	bne.n	80728d8 <_scanf_float+0x60>
 80729a8:	2508      	movs	r5, #8
 80729aa:	e029      	b.n	8072a00 <_scanf_float+0x188>
 80729ac:	2b74      	cmp	r3, #116	; 0x74
 80729ae:	d06f      	beq.n	8072a90 <_scanf_float+0x218>
 80729b0:	2b79      	cmp	r3, #121	; 0x79
 80729b2:	e7f6      	b.n	80729a2 <_scanf_float+0x12a>
 80729b4:	6821      	ldr	r1, [r4, #0]
 80729b6:	05c8      	lsls	r0, r1, #23
 80729b8:	d51a      	bpl.n	80729f0 <_scanf_float+0x178>
 80729ba:	9b02      	ldr	r3, [sp, #8]
 80729bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80729c0:	6021      	str	r1, [r4, #0]
 80729c2:	f109 0901 	add.w	r9, r9, #1
 80729c6:	b11b      	cbz	r3, 80729d0 <_scanf_float+0x158>
 80729c8:	3b01      	subs	r3, #1
 80729ca:	3201      	adds	r2, #1
 80729cc:	9302      	str	r3, [sp, #8]
 80729ce:	60a2      	str	r2, [r4, #8]
 80729d0:	68a3      	ldr	r3, [r4, #8]
 80729d2:	3b01      	subs	r3, #1
 80729d4:	60a3      	str	r3, [r4, #8]
 80729d6:	6923      	ldr	r3, [r4, #16]
 80729d8:	3301      	adds	r3, #1
 80729da:	6123      	str	r3, [r4, #16]
 80729dc:	687b      	ldr	r3, [r7, #4]
 80729de:	3b01      	subs	r3, #1
 80729e0:	2b00      	cmp	r3, #0
 80729e2:	607b      	str	r3, [r7, #4]
 80729e4:	f340 8084 	ble.w	8072af0 <_scanf_float+0x278>
 80729e8:	683b      	ldr	r3, [r7, #0]
 80729ea:	3301      	adds	r3, #1
 80729ec:	603b      	str	r3, [r7, #0]
 80729ee:	e766      	b.n	80728be <_scanf_float+0x46>
 80729f0:	eb1a 0f05 	cmn.w	sl, r5
 80729f4:	f47f af70 	bne.w	80728d8 <_scanf_float+0x60>
 80729f8:	6822      	ldr	r2, [r4, #0]
 80729fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80729fe:	6022      	str	r2, [r4, #0]
 8072a00:	f806 3b01 	strb.w	r3, [r6], #1
 8072a04:	e7e4      	b.n	80729d0 <_scanf_float+0x158>
 8072a06:	6822      	ldr	r2, [r4, #0]
 8072a08:	0610      	lsls	r0, r2, #24
 8072a0a:	f57f af65 	bpl.w	80728d8 <_scanf_float+0x60>
 8072a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8072a12:	e7f4      	b.n	80729fe <_scanf_float+0x186>
 8072a14:	f1ba 0f00 	cmp.w	sl, #0
 8072a18:	d10e      	bne.n	8072a38 <_scanf_float+0x1c0>
 8072a1a:	f1b9 0f00 	cmp.w	r9, #0
 8072a1e:	d10e      	bne.n	8072a3e <_scanf_float+0x1c6>
 8072a20:	6822      	ldr	r2, [r4, #0]
 8072a22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8072a26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8072a2a:	d108      	bne.n	8072a3e <_scanf_float+0x1c6>
 8072a2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8072a30:	6022      	str	r2, [r4, #0]
 8072a32:	f04f 0a01 	mov.w	sl, #1
 8072a36:	e7e3      	b.n	8072a00 <_scanf_float+0x188>
 8072a38:	f1ba 0f02 	cmp.w	sl, #2
 8072a3c:	d055      	beq.n	8072aea <_scanf_float+0x272>
 8072a3e:	2d01      	cmp	r5, #1
 8072a40:	d002      	beq.n	8072a48 <_scanf_float+0x1d0>
 8072a42:	2d04      	cmp	r5, #4
 8072a44:	f47f af48 	bne.w	80728d8 <_scanf_float+0x60>
 8072a48:	3501      	adds	r5, #1
 8072a4a:	b2ed      	uxtb	r5, r5
 8072a4c:	e7d8      	b.n	8072a00 <_scanf_float+0x188>
 8072a4e:	f1ba 0f01 	cmp.w	sl, #1
 8072a52:	f47f af41 	bne.w	80728d8 <_scanf_float+0x60>
 8072a56:	f04f 0a02 	mov.w	sl, #2
 8072a5a:	e7d1      	b.n	8072a00 <_scanf_float+0x188>
 8072a5c:	b97d      	cbnz	r5, 8072a7e <_scanf_float+0x206>
 8072a5e:	f1b9 0f00 	cmp.w	r9, #0
 8072a62:	f47f af3c 	bne.w	80728de <_scanf_float+0x66>
 8072a66:	6822      	ldr	r2, [r4, #0]
 8072a68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8072a6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8072a70:	f47f af39 	bne.w	80728e6 <_scanf_float+0x6e>
 8072a74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8072a78:	6022      	str	r2, [r4, #0]
 8072a7a:	2501      	movs	r5, #1
 8072a7c:	e7c0      	b.n	8072a00 <_scanf_float+0x188>
 8072a7e:	2d03      	cmp	r5, #3
 8072a80:	d0e2      	beq.n	8072a48 <_scanf_float+0x1d0>
 8072a82:	2d05      	cmp	r5, #5
 8072a84:	e7de      	b.n	8072a44 <_scanf_float+0x1cc>
 8072a86:	2d02      	cmp	r5, #2
 8072a88:	f47f af26 	bne.w	80728d8 <_scanf_float+0x60>
 8072a8c:	2503      	movs	r5, #3
 8072a8e:	e7b7      	b.n	8072a00 <_scanf_float+0x188>
 8072a90:	2d06      	cmp	r5, #6
 8072a92:	f47f af21 	bne.w	80728d8 <_scanf_float+0x60>
 8072a96:	2507      	movs	r5, #7
 8072a98:	e7b2      	b.n	8072a00 <_scanf_float+0x188>
 8072a9a:	6822      	ldr	r2, [r4, #0]
 8072a9c:	0591      	lsls	r1, r2, #22
 8072a9e:	f57f af1b 	bpl.w	80728d8 <_scanf_float+0x60>
 8072aa2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8072aa6:	6022      	str	r2, [r4, #0]
 8072aa8:	f8cd 9004 	str.w	r9, [sp, #4]
 8072aac:	e7a8      	b.n	8072a00 <_scanf_float+0x188>
 8072aae:	6822      	ldr	r2, [r4, #0]
 8072ab0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8072ab4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8072ab8:	d006      	beq.n	8072ac8 <_scanf_float+0x250>
 8072aba:	0550      	lsls	r0, r2, #21
 8072abc:	f57f af0c 	bpl.w	80728d8 <_scanf_float+0x60>
 8072ac0:	f1b9 0f00 	cmp.w	r9, #0
 8072ac4:	f43f af0f 	beq.w	80728e6 <_scanf_float+0x6e>
 8072ac8:	0591      	lsls	r1, r2, #22
 8072aca:	bf58      	it	pl
 8072acc:	9901      	ldrpl	r1, [sp, #4]
 8072ace:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8072ad2:	bf58      	it	pl
 8072ad4:	eba9 0101 	subpl.w	r1, r9, r1
 8072ad8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8072adc:	bf58      	it	pl
 8072ade:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8072ae2:	6022      	str	r2, [r4, #0]
 8072ae4:	f04f 0900 	mov.w	r9, #0
 8072ae8:	e78a      	b.n	8072a00 <_scanf_float+0x188>
 8072aea:	f04f 0a03 	mov.w	sl, #3
 8072aee:	e787      	b.n	8072a00 <_scanf_float+0x188>
 8072af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8072af4:	4639      	mov	r1, r7
 8072af6:	4640      	mov	r0, r8
 8072af8:	4798      	blx	r3
 8072afa:	2800      	cmp	r0, #0
 8072afc:	f43f aedf 	beq.w	80728be <_scanf_float+0x46>
 8072b00:	e6ea      	b.n	80728d8 <_scanf_float+0x60>
 8072b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8072b06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8072b0a:	463a      	mov	r2, r7
 8072b0c:	4640      	mov	r0, r8
 8072b0e:	4798      	blx	r3
 8072b10:	6923      	ldr	r3, [r4, #16]
 8072b12:	3b01      	subs	r3, #1
 8072b14:	6123      	str	r3, [r4, #16]
 8072b16:	e6ec      	b.n	80728f2 <_scanf_float+0x7a>
 8072b18:	1e6b      	subs	r3, r5, #1
 8072b1a:	2b06      	cmp	r3, #6
 8072b1c:	d825      	bhi.n	8072b6a <_scanf_float+0x2f2>
 8072b1e:	2d02      	cmp	r5, #2
 8072b20:	d836      	bhi.n	8072b90 <_scanf_float+0x318>
 8072b22:	455e      	cmp	r6, fp
 8072b24:	f67f aee8 	bls.w	80728f8 <_scanf_float+0x80>
 8072b28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8072b2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8072b30:	463a      	mov	r2, r7
 8072b32:	4640      	mov	r0, r8
 8072b34:	4798      	blx	r3
 8072b36:	6923      	ldr	r3, [r4, #16]
 8072b38:	3b01      	subs	r3, #1
 8072b3a:	6123      	str	r3, [r4, #16]
 8072b3c:	e7f1      	b.n	8072b22 <_scanf_float+0x2aa>
 8072b3e:	9802      	ldr	r0, [sp, #8]
 8072b40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8072b44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8072b48:	9002      	str	r0, [sp, #8]
 8072b4a:	463a      	mov	r2, r7
 8072b4c:	4640      	mov	r0, r8
 8072b4e:	4798      	blx	r3
 8072b50:	6923      	ldr	r3, [r4, #16]
 8072b52:	3b01      	subs	r3, #1
 8072b54:	6123      	str	r3, [r4, #16]
 8072b56:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8072b5a:	fa5f fa8a 	uxtb.w	sl, sl
 8072b5e:	f1ba 0f02 	cmp.w	sl, #2
 8072b62:	d1ec      	bne.n	8072b3e <_scanf_float+0x2c6>
 8072b64:	3d03      	subs	r5, #3
 8072b66:	b2ed      	uxtb	r5, r5
 8072b68:	1b76      	subs	r6, r6, r5
 8072b6a:	6823      	ldr	r3, [r4, #0]
 8072b6c:	05da      	lsls	r2, r3, #23
 8072b6e:	d52f      	bpl.n	8072bd0 <_scanf_float+0x358>
 8072b70:	055b      	lsls	r3, r3, #21
 8072b72:	d510      	bpl.n	8072b96 <_scanf_float+0x31e>
 8072b74:	455e      	cmp	r6, fp
 8072b76:	f67f aebf 	bls.w	80728f8 <_scanf_float+0x80>
 8072b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8072b7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8072b82:	463a      	mov	r2, r7
 8072b84:	4640      	mov	r0, r8
 8072b86:	4798      	blx	r3
 8072b88:	6923      	ldr	r3, [r4, #16]
 8072b8a:	3b01      	subs	r3, #1
 8072b8c:	6123      	str	r3, [r4, #16]
 8072b8e:	e7f1      	b.n	8072b74 <_scanf_float+0x2fc>
 8072b90:	46aa      	mov	sl, r5
 8072b92:	9602      	str	r6, [sp, #8]
 8072b94:	e7df      	b.n	8072b56 <_scanf_float+0x2de>
 8072b96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8072b9a:	6923      	ldr	r3, [r4, #16]
 8072b9c:	2965      	cmp	r1, #101	; 0x65
 8072b9e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8072ba2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8072ba6:	6123      	str	r3, [r4, #16]
 8072ba8:	d00c      	beq.n	8072bc4 <_scanf_float+0x34c>
 8072baa:	2945      	cmp	r1, #69	; 0x45
 8072bac:	d00a      	beq.n	8072bc4 <_scanf_float+0x34c>
 8072bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8072bb2:	463a      	mov	r2, r7
 8072bb4:	4640      	mov	r0, r8
 8072bb6:	4798      	blx	r3
 8072bb8:	6923      	ldr	r3, [r4, #16]
 8072bba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8072bbe:	3b01      	subs	r3, #1
 8072bc0:	1eb5      	subs	r5, r6, #2
 8072bc2:	6123      	str	r3, [r4, #16]
 8072bc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8072bc8:	463a      	mov	r2, r7
 8072bca:	4640      	mov	r0, r8
 8072bcc:	4798      	blx	r3
 8072bce:	462e      	mov	r6, r5
 8072bd0:	6825      	ldr	r5, [r4, #0]
 8072bd2:	f015 0510 	ands.w	r5, r5, #16
 8072bd6:	d158      	bne.n	8072c8a <_scanf_float+0x412>
 8072bd8:	7035      	strb	r5, [r6, #0]
 8072bda:	6823      	ldr	r3, [r4, #0]
 8072bdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8072be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8072be4:	d11c      	bne.n	8072c20 <_scanf_float+0x3a8>
 8072be6:	9b01      	ldr	r3, [sp, #4]
 8072be8:	454b      	cmp	r3, r9
 8072bea:	eba3 0209 	sub.w	r2, r3, r9
 8072bee:	d124      	bne.n	8072c3a <_scanf_float+0x3c2>
 8072bf0:	2200      	movs	r2, #0
 8072bf2:	4659      	mov	r1, fp
 8072bf4:	4640      	mov	r0, r8
 8072bf6:	f000 ff6d 	bl	8073ad4 <_strtod_r>
 8072bfa:	9b03      	ldr	r3, [sp, #12]
 8072bfc:	6821      	ldr	r1, [r4, #0]
 8072bfe:	681b      	ldr	r3, [r3, #0]
 8072c00:	f011 0f02 	tst.w	r1, #2
 8072c04:	ec57 6b10 	vmov	r6, r7, d0
 8072c08:	f103 0204 	add.w	r2, r3, #4
 8072c0c:	d020      	beq.n	8072c50 <_scanf_float+0x3d8>
 8072c0e:	9903      	ldr	r1, [sp, #12]
 8072c10:	600a      	str	r2, [r1, #0]
 8072c12:	681b      	ldr	r3, [r3, #0]
 8072c14:	e9c3 6700 	strd	r6, r7, [r3]
 8072c18:	68e3      	ldr	r3, [r4, #12]
 8072c1a:	3301      	adds	r3, #1
 8072c1c:	60e3      	str	r3, [r4, #12]
 8072c1e:	e66c      	b.n	80728fa <_scanf_float+0x82>
 8072c20:	9b04      	ldr	r3, [sp, #16]
 8072c22:	2b00      	cmp	r3, #0
 8072c24:	d0e4      	beq.n	8072bf0 <_scanf_float+0x378>
 8072c26:	9905      	ldr	r1, [sp, #20]
 8072c28:	230a      	movs	r3, #10
 8072c2a:	462a      	mov	r2, r5
 8072c2c:	3101      	adds	r1, #1
 8072c2e:	4640      	mov	r0, r8
 8072c30:	f000 ffda 	bl	8073be8 <_strtol_r>
 8072c34:	9b04      	ldr	r3, [sp, #16]
 8072c36:	9e05      	ldr	r6, [sp, #20]
 8072c38:	1ac2      	subs	r2, r0, r3
 8072c3a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8072c3e:	429e      	cmp	r6, r3
 8072c40:	bf28      	it	cs
 8072c42:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8072c46:	4912      	ldr	r1, [pc, #72]	; (8072c90 <_scanf_float+0x418>)
 8072c48:	4630      	mov	r0, r6
 8072c4a:	f000 f8a5 	bl	8072d98 <siprintf>
 8072c4e:	e7cf      	b.n	8072bf0 <_scanf_float+0x378>
 8072c50:	f011 0f04 	tst.w	r1, #4
 8072c54:	9903      	ldr	r1, [sp, #12]
 8072c56:	600a      	str	r2, [r1, #0]
 8072c58:	d1db      	bne.n	8072c12 <_scanf_float+0x39a>
 8072c5a:	f8d3 8000 	ldr.w	r8, [r3]
 8072c5e:	ee10 2a10 	vmov	r2, s0
 8072c62:	ee10 0a10 	vmov	r0, s0
 8072c66:	463b      	mov	r3, r7
 8072c68:	4639      	mov	r1, r7
 8072c6a:	f7ed ff77 	bl	8060b5c <__aeabi_dcmpun>
 8072c6e:	b128      	cbz	r0, 8072c7c <_scanf_float+0x404>
 8072c70:	4808      	ldr	r0, [pc, #32]	; (8072c94 <_scanf_float+0x41c>)
 8072c72:	f000 f88b 	bl	8072d8c <nanf>
 8072c76:	ed88 0a00 	vstr	s0, [r8]
 8072c7a:	e7cd      	b.n	8072c18 <_scanf_float+0x3a0>
 8072c7c:	4630      	mov	r0, r6
 8072c7e:	4639      	mov	r1, r7
 8072c80:	f7ed ffca 	bl	8060c18 <__aeabi_d2f>
 8072c84:	f8c8 0000 	str.w	r0, [r8]
 8072c88:	e7c6      	b.n	8072c18 <_scanf_float+0x3a0>
 8072c8a:	2500      	movs	r5, #0
 8072c8c:	e635      	b.n	80728fa <_scanf_float+0x82>
 8072c8e:	bf00      	nop
 8072c90:	08076f28 	.word	0x08076f28
 8072c94:	08077340 	.word	0x08077340

08072c98 <cleanup_glue>:
 8072c98:	b538      	push	{r3, r4, r5, lr}
 8072c9a:	460c      	mov	r4, r1
 8072c9c:	6809      	ldr	r1, [r1, #0]
 8072c9e:	4605      	mov	r5, r0
 8072ca0:	b109      	cbz	r1, 8072ca6 <cleanup_glue+0xe>
 8072ca2:	f7ff fff9 	bl	8072c98 <cleanup_glue>
 8072ca6:	4621      	mov	r1, r4
 8072ca8:	4628      	mov	r0, r5
 8072caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8072cae:	f002 bf6f 	b.w	8075b90 <_free_r>
	...

08072cb4 <_reclaim_reent>:
 8072cb4:	4b2c      	ldr	r3, [pc, #176]	; (8072d68 <_reclaim_reent+0xb4>)
 8072cb6:	681b      	ldr	r3, [r3, #0]
 8072cb8:	4283      	cmp	r3, r0
 8072cba:	b570      	push	{r4, r5, r6, lr}
 8072cbc:	4604      	mov	r4, r0
 8072cbe:	d051      	beq.n	8072d64 <_reclaim_reent+0xb0>
 8072cc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8072cc2:	b143      	cbz	r3, 8072cd6 <_reclaim_reent+0x22>
 8072cc4:	68db      	ldr	r3, [r3, #12]
 8072cc6:	2b00      	cmp	r3, #0
 8072cc8:	d14a      	bne.n	8072d60 <_reclaim_reent+0xac>
 8072cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8072ccc:	6819      	ldr	r1, [r3, #0]
 8072cce:	b111      	cbz	r1, 8072cd6 <_reclaim_reent+0x22>
 8072cd0:	4620      	mov	r0, r4
 8072cd2:	f002 ff5d 	bl	8075b90 <_free_r>
 8072cd6:	6961      	ldr	r1, [r4, #20]
 8072cd8:	b111      	cbz	r1, 8072ce0 <_reclaim_reent+0x2c>
 8072cda:	4620      	mov	r0, r4
 8072cdc:	f002 ff58 	bl	8075b90 <_free_r>
 8072ce0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8072ce2:	b111      	cbz	r1, 8072cea <_reclaim_reent+0x36>
 8072ce4:	4620      	mov	r0, r4
 8072ce6:	f002 ff53 	bl	8075b90 <_free_r>
 8072cea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8072cec:	b111      	cbz	r1, 8072cf4 <_reclaim_reent+0x40>
 8072cee:	4620      	mov	r0, r4
 8072cf0:	f002 ff4e 	bl	8075b90 <_free_r>
 8072cf4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8072cf6:	b111      	cbz	r1, 8072cfe <_reclaim_reent+0x4a>
 8072cf8:	4620      	mov	r0, r4
 8072cfa:	f002 ff49 	bl	8075b90 <_free_r>
 8072cfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8072d00:	b111      	cbz	r1, 8072d08 <_reclaim_reent+0x54>
 8072d02:	4620      	mov	r0, r4
 8072d04:	f002 ff44 	bl	8075b90 <_free_r>
 8072d08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8072d0a:	b111      	cbz	r1, 8072d12 <_reclaim_reent+0x5e>
 8072d0c:	4620      	mov	r0, r4
 8072d0e:	f002 ff3f 	bl	8075b90 <_free_r>
 8072d12:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8072d14:	b111      	cbz	r1, 8072d1c <_reclaim_reent+0x68>
 8072d16:	4620      	mov	r0, r4
 8072d18:	f002 ff3a 	bl	8075b90 <_free_r>
 8072d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8072d1e:	b111      	cbz	r1, 8072d26 <_reclaim_reent+0x72>
 8072d20:	4620      	mov	r0, r4
 8072d22:	f002 ff35 	bl	8075b90 <_free_r>
 8072d26:	69a3      	ldr	r3, [r4, #24]
 8072d28:	b1e3      	cbz	r3, 8072d64 <_reclaim_reent+0xb0>
 8072d2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8072d2c:	4620      	mov	r0, r4
 8072d2e:	4798      	blx	r3
 8072d30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8072d32:	b1b9      	cbz	r1, 8072d64 <_reclaim_reent+0xb0>
 8072d34:	4620      	mov	r0, r4
 8072d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8072d3a:	f7ff bfad 	b.w	8072c98 <cleanup_glue>
 8072d3e:	5949      	ldr	r1, [r1, r5]
 8072d40:	b941      	cbnz	r1, 8072d54 <_reclaim_reent+0xa0>
 8072d42:	3504      	adds	r5, #4
 8072d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8072d46:	2d80      	cmp	r5, #128	; 0x80
 8072d48:	68d9      	ldr	r1, [r3, #12]
 8072d4a:	d1f8      	bne.n	8072d3e <_reclaim_reent+0x8a>
 8072d4c:	4620      	mov	r0, r4
 8072d4e:	f002 ff1f 	bl	8075b90 <_free_r>
 8072d52:	e7ba      	b.n	8072cca <_reclaim_reent+0x16>
 8072d54:	680e      	ldr	r6, [r1, #0]
 8072d56:	4620      	mov	r0, r4
 8072d58:	f002 ff1a 	bl	8075b90 <_free_r>
 8072d5c:	4631      	mov	r1, r6
 8072d5e:	e7ef      	b.n	8072d40 <_reclaim_reent+0x8c>
 8072d60:	2500      	movs	r5, #0
 8072d62:	e7ef      	b.n	8072d44 <_reclaim_reent+0x90>
 8072d64:	bd70      	pop	{r4, r5, r6, pc}
 8072d66:	bf00      	nop
 8072d68:	20000028 	.word	0x20000028

08072d6c <_sbrk_r>:
 8072d6c:	b538      	push	{r3, r4, r5, lr}
 8072d6e:	4d06      	ldr	r5, [pc, #24]	; (8072d88 <_sbrk_r+0x1c>)
 8072d70:	2300      	movs	r3, #0
 8072d72:	4604      	mov	r4, r0
 8072d74:	4608      	mov	r0, r1
 8072d76:	602b      	str	r3, [r5, #0]
 8072d78:	f7f0 fc0a 	bl	8063590 <_sbrk>
 8072d7c:	1c43      	adds	r3, r0, #1
 8072d7e:	d102      	bne.n	8072d86 <_sbrk_r+0x1a>
 8072d80:	682b      	ldr	r3, [r5, #0]
 8072d82:	b103      	cbz	r3, 8072d86 <_sbrk_r+0x1a>
 8072d84:	6023      	str	r3, [r4, #0]
 8072d86:	bd38      	pop	{r3, r4, r5, pc}
 8072d88:	20005d10 	.word	0x20005d10

08072d8c <nanf>:
 8072d8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8072d94 <nanf+0x8>
 8072d90:	4770      	bx	lr
 8072d92:	bf00      	nop
 8072d94:	7fc00000 	.word	0x7fc00000

08072d98 <siprintf>:
 8072d98:	b40e      	push	{r1, r2, r3}
 8072d9a:	b500      	push	{lr}
 8072d9c:	b09c      	sub	sp, #112	; 0x70
 8072d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8072da0:	9002      	str	r0, [sp, #8]
 8072da2:	9006      	str	r0, [sp, #24]
 8072da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8072da8:	4809      	ldr	r0, [pc, #36]	; (8072dd0 <siprintf+0x38>)
 8072daa:	9107      	str	r1, [sp, #28]
 8072dac:	9104      	str	r1, [sp, #16]
 8072dae:	4909      	ldr	r1, [pc, #36]	; (8072dd4 <siprintf+0x3c>)
 8072db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8072db4:	9105      	str	r1, [sp, #20]
 8072db6:	6800      	ldr	r0, [r0, #0]
 8072db8:	9301      	str	r3, [sp, #4]
 8072dba:	a902      	add	r1, sp, #8
 8072dbc:	f002 ff94 	bl	8075ce8 <_svfiprintf_r>
 8072dc0:	9b02      	ldr	r3, [sp, #8]
 8072dc2:	2200      	movs	r2, #0
 8072dc4:	701a      	strb	r2, [r3, #0]
 8072dc6:	b01c      	add	sp, #112	; 0x70
 8072dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8072dcc:	b003      	add	sp, #12
 8072dce:	4770      	bx	lr
 8072dd0:	20000028 	.word	0x20000028
 8072dd4:	ffff0208 	.word	0xffff0208

08072dd8 <__sread>:
 8072dd8:	b510      	push	{r4, lr}
 8072dda:	460c      	mov	r4, r1
 8072ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8072de0:	f003 f9dc 	bl	807619c <_read_r>
 8072de4:	2800      	cmp	r0, #0
 8072de6:	bfab      	itete	ge
 8072de8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8072dea:	89a3      	ldrhlt	r3, [r4, #12]
 8072dec:	181b      	addge	r3, r3, r0
 8072dee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8072df2:	bfac      	ite	ge
 8072df4:	6563      	strge	r3, [r4, #84]	; 0x54
 8072df6:	81a3      	strhlt	r3, [r4, #12]
 8072df8:	bd10      	pop	{r4, pc}

08072dfa <__swrite>:
 8072dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8072dfe:	461f      	mov	r7, r3
 8072e00:	898b      	ldrh	r3, [r1, #12]
 8072e02:	05db      	lsls	r3, r3, #23
 8072e04:	4605      	mov	r5, r0
 8072e06:	460c      	mov	r4, r1
 8072e08:	4616      	mov	r6, r2
 8072e0a:	d505      	bpl.n	8072e18 <__swrite+0x1e>
 8072e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8072e10:	2302      	movs	r3, #2
 8072e12:	2200      	movs	r2, #0
 8072e14:	f002 f9ba 	bl	807518c <_lseek_r>
 8072e18:	89a3      	ldrh	r3, [r4, #12]
 8072e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8072e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8072e22:	81a3      	strh	r3, [r4, #12]
 8072e24:	4632      	mov	r2, r6
 8072e26:	463b      	mov	r3, r7
 8072e28:	4628      	mov	r0, r5
 8072e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8072e2e:	f000 bedd 	b.w	8073bec <_write_r>

08072e32 <__sseek>:
 8072e32:	b510      	push	{r4, lr}
 8072e34:	460c      	mov	r4, r1
 8072e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8072e3a:	f002 f9a7 	bl	807518c <_lseek_r>
 8072e3e:	1c43      	adds	r3, r0, #1
 8072e40:	89a3      	ldrh	r3, [r4, #12]
 8072e42:	bf15      	itete	ne
 8072e44:	6560      	strne	r0, [r4, #84]	; 0x54
 8072e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8072e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8072e4e:	81a3      	strheq	r3, [r4, #12]
 8072e50:	bf18      	it	ne
 8072e52:	81a3      	strhne	r3, [r4, #12]
 8072e54:	bd10      	pop	{r4, pc}

08072e56 <__sclose>:
 8072e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8072e5a:	f000 bed9 	b.w	8073c10 <_close_r>

08072e5e <strncmp>:
 8072e5e:	b510      	push	{r4, lr}
 8072e60:	b16a      	cbz	r2, 8072e7e <strncmp+0x20>
 8072e62:	3901      	subs	r1, #1
 8072e64:	1884      	adds	r4, r0, r2
 8072e66:	f810 3b01 	ldrb.w	r3, [r0], #1
 8072e6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8072e6e:	4293      	cmp	r3, r2
 8072e70:	d103      	bne.n	8072e7a <strncmp+0x1c>
 8072e72:	42a0      	cmp	r0, r4
 8072e74:	d001      	beq.n	8072e7a <strncmp+0x1c>
 8072e76:	2b00      	cmp	r3, #0
 8072e78:	d1f5      	bne.n	8072e66 <strncmp+0x8>
 8072e7a:	1a98      	subs	r0, r3, r2
 8072e7c:	bd10      	pop	{r4, pc}
 8072e7e:	4610      	mov	r0, r2
 8072e80:	e7fc      	b.n	8072e7c <strncmp+0x1e>

08072e82 <sulp>:
 8072e82:	b570      	push	{r4, r5, r6, lr}
 8072e84:	4604      	mov	r4, r0
 8072e86:	460d      	mov	r5, r1
 8072e88:	ec45 4b10 	vmov	d0, r4, r5
 8072e8c:	4616      	mov	r6, r2
 8072e8e:	f002 fd21 	bl	80758d4 <__ulp>
 8072e92:	ec51 0b10 	vmov	r0, r1, d0
 8072e96:	b17e      	cbz	r6, 8072eb8 <sulp+0x36>
 8072e98:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8072e9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8072ea0:	2b00      	cmp	r3, #0
 8072ea2:	dd09      	ble.n	8072eb8 <sulp+0x36>
 8072ea4:	051b      	lsls	r3, r3, #20
 8072ea6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8072eaa:	2400      	movs	r4, #0
 8072eac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8072eb0:	4622      	mov	r2, r4
 8072eb2:	462b      	mov	r3, r5
 8072eb4:	f7ed fbb8 	bl	8060628 <__aeabi_dmul>
 8072eb8:	bd70      	pop	{r4, r5, r6, pc}
 8072eba:	0000      	movs	r0, r0
 8072ebc:	0000      	movs	r0, r0
	...

08072ec0 <_strtod_l>:
 8072ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8072ec4:	b0a3      	sub	sp, #140	; 0x8c
 8072ec6:	461f      	mov	r7, r3
 8072ec8:	2300      	movs	r3, #0
 8072eca:	931e      	str	r3, [sp, #120]	; 0x78
 8072ecc:	4ba4      	ldr	r3, [pc, #656]	; (8073160 <_strtod_l+0x2a0>)
 8072ece:	9219      	str	r2, [sp, #100]	; 0x64
 8072ed0:	681b      	ldr	r3, [r3, #0]
 8072ed2:	9307      	str	r3, [sp, #28]
 8072ed4:	4604      	mov	r4, r0
 8072ed6:	4618      	mov	r0, r3
 8072ed8:	4688      	mov	r8, r1
 8072eda:	f7ed f98b 	bl	80601f4 <strlen>
 8072ede:	f04f 0a00 	mov.w	sl, #0
 8072ee2:	4605      	mov	r5, r0
 8072ee4:	f04f 0b00 	mov.w	fp, #0
 8072ee8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8072eec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8072eee:	781a      	ldrb	r2, [r3, #0]
 8072ef0:	2a2b      	cmp	r2, #43	; 0x2b
 8072ef2:	d04c      	beq.n	8072f8e <_strtod_l+0xce>
 8072ef4:	d839      	bhi.n	8072f6a <_strtod_l+0xaa>
 8072ef6:	2a0d      	cmp	r2, #13
 8072ef8:	d832      	bhi.n	8072f60 <_strtod_l+0xa0>
 8072efa:	2a08      	cmp	r2, #8
 8072efc:	d832      	bhi.n	8072f64 <_strtod_l+0xa4>
 8072efe:	2a00      	cmp	r2, #0
 8072f00:	d03c      	beq.n	8072f7c <_strtod_l+0xbc>
 8072f02:	2300      	movs	r3, #0
 8072f04:	930e      	str	r3, [sp, #56]	; 0x38
 8072f06:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8072f08:	7833      	ldrb	r3, [r6, #0]
 8072f0a:	2b30      	cmp	r3, #48	; 0x30
 8072f0c:	f040 80b4 	bne.w	8073078 <_strtod_l+0x1b8>
 8072f10:	7873      	ldrb	r3, [r6, #1]
 8072f12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8072f16:	2b58      	cmp	r3, #88	; 0x58
 8072f18:	d16c      	bne.n	8072ff4 <_strtod_l+0x134>
 8072f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8072f1c:	9301      	str	r3, [sp, #4]
 8072f1e:	ab1e      	add	r3, sp, #120	; 0x78
 8072f20:	9702      	str	r7, [sp, #8]
 8072f22:	9300      	str	r3, [sp, #0]
 8072f24:	4a8f      	ldr	r2, [pc, #572]	; (8073164 <_strtod_l+0x2a4>)
 8072f26:	ab1f      	add	r3, sp, #124	; 0x7c
 8072f28:	a91d      	add	r1, sp, #116	; 0x74
 8072f2a:	4620      	mov	r0, r4
 8072f2c:	f001 fe22 	bl	8074b74 <__gethex>
 8072f30:	f010 0707 	ands.w	r7, r0, #7
 8072f34:	4605      	mov	r5, r0
 8072f36:	d005      	beq.n	8072f44 <_strtod_l+0x84>
 8072f38:	2f06      	cmp	r7, #6
 8072f3a:	d12a      	bne.n	8072f92 <_strtod_l+0xd2>
 8072f3c:	3601      	adds	r6, #1
 8072f3e:	2300      	movs	r3, #0
 8072f40:	961d      	str	r6, [sp, #116]	; 0x74
 8072f42:	930e      	str	r3, [sp, #56]	; 0x38
 8072f44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8072f46:	2b00      	cmp	r3, #0
 8072f48:	f040 8596 	bne.w	8073a78 <_strtod_l+0xbb8>
 8072f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8072f4e:	b1db      	cbz	r3, 8072f88 <_strtod_l+0xc8>
 8072f50:	4652      	mov	r2, sl
 8072f52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8072f56:	ec43 2b10 	vmov	d0, r2, r3
 8072f5a:	b023      	add	sp, #140	; 0x8c
 8072f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8072f60:	2a20      	cmp	r2, #32
 8072f62:	d1ce      	bne.n	8072f02 <_strtod_l+0x42>
 8072f64:	3301      	adds	r3, #1
 8072f66:	931d      	str	r3, [sp, #116]	; 0x74
 8072f68:	e7c0      	b.n	8072eec <_strtod_l+0x2c>
 8072f6a:	2a2d      	cmp	r2, #45	; 0x2d
 8072f6c:	d1c9      	bne.n	8072f02 <_strtod_l+0x42>
 8072f6e:	2201      	movs	r2, #1
 8072f70:	920e      	str	r2, [sp, #56]	; 0x38
 8072f72:	1c5a      	adds	r2, r3, #1
 8072f74:	921d      	str	r2, [sp, #116]	; 0x74
 8072f76:	785b      	ldrb	r3, [r3, #1]
 8072f78:	2b00      	cmp	r3, #0
 8072f7a:	d1c4      	bne.n	8072f06 <_strtod_l+0x46>
 8072f7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8072f7e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8072f82:	2b00      	cmp	r3, #0
 8072f84:	f040 8576 	bne.w	8073a74 <_strtod_l+0xbb4>
 8072f88:	4652      	mov	r2, sl
 8072f8a:	465b      	mov	r3, fp
 8072f8c:	e7e3      	b.n	8072f56 <_strtod_l+0x96>
 8072f8e:	2200      	movs	r2, #0
 8072f90:	e7ee      	b.n	8072f70 <_strtod_l+0xb0>
 8072f92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8072f94:	b13a      	cbz	r2, 8072fa6 <_strtod_l+0xe6>
 8072f96:	2135      	movs	r1, #53	; 0x35
 8072f98:	a820      	add	r0, sp, #128	; 0x80
 8072f9a:	f002 fda6 	bl	8075aea <__copybits>
 8072f9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8072fa0:	4620      	mov	r0, r4
 8072fa2:	f002 f96b 	bl	807527c <_Bfree>
 8072fa6:	3f01      	subs	r7, #1
 8072fa8:	2f05      	cmp	r7, #5
 8072faa:	d807      	bhi.n	8072fbc <_strtod_l+0xfc>
 8072fac:	e8df f007 	tbb	[pc, r7]
 8072fb0:	1d180b0e 	.word	0x1d180b0e
 8072fb4:	030e      	.short	0x030e
 8072fb6:	f04f 0b00 	mov.w	fp, #0
 8072fba:	46da      	mov	sl, fp
 8072fbc:	0728      	lsls	r0, r5, #28
 8072fbe:	d5c1      	bpl.n	8072f44 <_strtod_l+0x84>
 8072fc0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8072fc4:	e7be      	b.n	8072f44 <_strtod_l+0x84>
 8072fc6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8072fca:	e7f7      	b.n	8072fbc <_strtod_l+0xfc>
 8072fcc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8072fd0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8072fd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8072fd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8072fda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8072fde:	e7ed      	b.n	8072fbc <_strtod_l+0xfc>
 8072fe0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8073168 <_strtod_l+0x2a8>
 8072fe4:	f04f 0a00 	mov.w	sl, #0
 8072fe8:	e7e8      	b.n	8072fbc <_strtod_l+0xfc>
 8072fea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8072fee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8072ff2:	e7e3      	b.n	8072fbc <_strtod_l+0xfc>
 8072ff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8072ff6:	1c5a      	adds	r2, r3, #1
 8072ff8:	921d      	str	r2, [sp, #116]	; 0x74
 8072ffa:	785b      	ldrb	r3, [r3, #1]
 8072ffc:	2b30      	cmp	r3, #48	; 0x30
 8072ffe:	d0f9      	beq.n	8072ff4 <_strtod_l+0x134>
 8073000:	2b00      	cmp	r3, #0
 8073002:	d09f      	beq.n	8072f44 <_strtod_l+0x84>
 8073004:	2301      	movs	r3, #1
 8073006:	f04f 0900 	mov.w	r9, #0
 807300a:	9304      	str	r3, [sp, #16]
 807300c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807300e:	930a      	str	r3, [sp, #40]	; 0x28
 8073010:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8073014:	464f      	mov	r7, r9
 8073016:	220a      	movs	r2, #10
 8073018:	981d      	ldr	r0, [sp, #116]	; 0x74
 807301a:	7806      	ldrb	r6, [r0, #0]
 807301c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8073020:	b2d9      	uxtb	r1, r3
 8073022:	2909      	cmp	r1, #9
 8073024:	d92a      	bls.n	807307c <_strtod_l+0x1bc>
 8073026:	9907      	ldr	r1, [sp, #28]
 8073028:	462a      	mov	r2, r5
 807302a:	f7ff ff18 	bl	8072e5e <strncmp>
 807302e:	b398      	cbz	r0, 8073098 <_strtod_l+0x1d8>
 8073030:	2000      	movs	r0, #0
 8073032:	4633      	mov	r3, r6
 8073034:	463d      	mov	r5, r7
 8073036:	9007      	str	r0, [sp, #28]
 8073038:	4602      	mov	r2, r0
 807303a:	2b65      	cmp	r3, #101	; 0x65
 807303c:	d001      	beq.n	8073042 <_strtod_l+0x182>
 807303e:	2b45      	cmp	r3, #69	; 0x45
 8073040:	d118      	bne.n	8073074 <_strtod_l+0x1b4>
 8073042:	b91d      	cbnz	r5, 807304c <_strtod_l+0x18c>
 8073044:	9b04      	ldr	r3, [sp, #16]
 8073046:	4303      	orrs	r3, r0
 8073048:	d098      	beq.n	8072f7c <_strtod_l+0xbc>
 807304a:	2500      	movs	r5, #0
 807304c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8073050:	f108 0301 	add.w	r3, r8, #1
 8073054:	931d      	str	r3, [sp, #116]	; 0x74
 8073056:	f898 3001 	ldrb.w	r3, [r8, #1]
 807305a:	2b2b      	cmp	r3, #43	; 0x2b
 807305c:	d075      	beq.n	807314a <_strtod_l+0x28a>
 807305e:	2b2d      	cmp	r3, #45	; 0x2d
 8073060:	d07b      	beq.n	807315a <_strtod_l+0x29a>
 8073062:	f04f 0c00 	mov.w	ip, #0
 8073066:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 807306a:	2909      	cmp	r1, #9
 807306c:	f240 8082 	bls.w	8073174 <_strtod_l+0x2b4>
 8073070:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8073074:	2600      	movs	r6, #0
 8073076:	e09d      	b.n	80731b4 <_strtod_l+0x2f4>
 8073078:	2300      	movs	r3, #0
 807307a:	e7c4      	b.n	8073006 <_strtod_l+0x146>
 807307c:	2f08      	cmp	r7, #8
 807307e:	bfd8      	it	le
 8073080:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8073082:	f100 0001 	add.w	r0, r0, #1
 8073086:	bfda      	itte	le
 8073088:	fb02 3301 	mlale	r3, r2, r1, r3
 807308c:	9309      	strle	r3, [sp, #36]	; 0x24
 807308e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8073092:	3701      	adds	r7, #1
 8073094:	901d      	str	r0, [sp, #116]	; 0x74
 8073096:	e7bf      	b.n	8073018 <_strtod_l+0x158>
 8073098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807309a:	195a      	adds	r2, r3, r5
 807309c:	921d      	str	r2, [sp, #116]	; 0x74
 807309e:	5d5b      	ldrb	r3, [r3, r5]
 80730a0:	2f00      	cmp	r7, #0
 80730a2:	d037      	beq.n	8073114 <_strtod_l+0x254>
 80730a4:	9007      	str	r0, [sp, #28]
 80730a6:	463d      	mov	r5, r7
 80730a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80730ac:	2a09      	cmp	r2, #9
 80730ae:	d912      	bls.n	80730d6 <_strtod_l+0x216>
 80730b0:	2201      	movs	r2, #1
 80730b2:	e7c2      	b.n	807303a <_strtod_l+0x17a>
 80730b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80730b6:	1c5a      	adds	r2, r3, #1
 80730b8:	921d      	str	r2, [sp, #116]	; 0x74
 80730ba:	785b      	ldrb	r3, [r3, #1]
 80730bc:	3001      	adds	r0, #1
 80730be:	2b30      	cmp	r3, #48	; 0x30
 80730c0:	d0f8      	beq.n	80730b4 <_strtod_l+0x1f4>
 80730c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80730c6:	2a08      	cmp	r2, #8
 80730c8:	f200 84db 	bhi.w	8073a82 <_strtod_l+0xbc2>
 80730cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80730ce:	9007      	str	r0, [sp, #28]
 80730d0:	2000      	movs	r0, #0
 80730d2:	920a      	str	r2, [sp, #40]	; 0x28
 80730d4:	4605      	mov	r5, r0
 80730d6:	3b30      	subs	r3, #48	; 0x30
 80730d8:	f100 0201 	add.w	r2, r0, #1
 80730dc:	d014      	beq.n	8073108 <_strtod_l+0x248>
 80730de:	9907      	ldr	r1, [sp, #28]
 80730e0:	4411      	add	r1, r2
 80730e2:	9107      	str	r1, [sp, #28]
 80730e4:	462a      	mov	r2, r5
 80730e6:	eb00 0e05 	add.w	lr, r0, r5
 80730ea:	210a      	movs	r1, #10
 80730ec:	4572      	cmp	r2, lr
 80730ee:	d113      	bne.n	8073118 <_strtod_l+0x258>
 80730f0:	182a      	adds	r2, r5, r0
 80730f2:	2a08      	cmp	r2, #8
 80730f4:	f105 0501 	add.w	r5, r5, #1
 80730f8:	4405      	add	r5, r0
 80730fa:	dc1c      	bgt.n	8073136 <_strtod_l+0x276>
 80730fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80730fe:	220a      	movs	r2, #10
 8073100:	fb02 3301 	mla	r3, r2, r1, r3
 8073104:	9309      	str	r3, [sp, #36]	; 0x24
 8073106:	2200      	movs	r2, #0
 8073108:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807310a:	1c59      	adds	r1, r3, #1
 807310c:	911d      	str	r1, [sp, #116]	; 0x74
 807310e:	785b      	ldrb	r3, [r3, #1]
 8073110:	4610      	mov	r0, r2
 8073112:	e7c9      	b.n	80730a8 <_strtod_l+0x1e8>
 8073114:	4638      	mov	r0, r7
 8073116:	e7d2      	b.n	80730be <_strtod_l+0x1fe>
 8073118:	2a08      	cmp	r2, #8
 807311a:	dc04      	bgt.n	8073126 <_strtod_l+0x266>
 807311c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 807311e:	434e      	muls	r6, r1
 8073120:	9609      	str	r6, [sp, #36]	; 0x24
 8073122:	3201      	adds	r2, #1
 8073124:	e7e2      	b.n	80730ec <_strtod_l+0x22c>
 8073126:	f102 0c01 	add.w	ip, r2, #1
 807312a:	f1bc 0f10 	cmp.w	ip, #16
 807312e:	bfd8      	it	le
 8073130:	fb01 f909 	mulle.w	r9, r1, r9
 8073134:	e7f5      	b.n	8073122 <_strtod_l+0x262>
 8073136:	2d10      	cmp	r5, #16
 8073138:	bfdc      	itt	le
 807313a:	220a      	movle	r2, #10
 807313c:	fb02 3909 	mlale	r9, r2, r9, r3
 8073140:	e7e1      	b.n	8073106 <_strtod_l+0x246>
 8073142:	2300      	movs	r3, #0
 8073144:	9307      	str	r3, [sp, #28]
 8073146:	2201      	movs	r2, #1
 8073148:	e77c      	b.n	8073044 <_strtod_l+0x184>
 807314a:	f04f 0c00 	mov.w	ip, #0
 807314e:	f108 0302 	add.w	r3, r8, #2
 8073152:	931d      	str	r3, [sp, #116]	; 0x74
 8073154:	f898 3002 	ldrb.w	r3, [r8, #2]
 8073158:	e785      	b.n	8073066 <_strtod_l+0x1a6>
 807315a:	f04f 0c01 	mov.w	ip, #1
 807315e:	e7f6      	b.n	807314e <_strtod_l+0x28e>
 8073160:	08077180 	.word	0x08077180
 8073164:	08076f30 	.word	0x08076f30
 8073168:	7ff00000 	.word	0x7ff00000
 807316c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807316e:	1c59      	adds	r1, r3, #1
 8073170:	911d      	str	r1, [sp, #116]	; 0x74
 8073172:	785b      	ldrb	r3, [r3, #1]
 8073174:	2b30      	cmp	r3, #48	; 0x30
 8073176:	d0f9      	beq.n	807316c <_strtod_l+0x2ac>
 8073178:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 807317c:	2908      	cmp	r1, #8
 807317e:	f63f af79 	bhi.w	8073074 <_strtod_l+0x1b4>
 8073182:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8073186:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8073188:	9308      	str	r3, [sp, #32]
 807318a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807318c:	1c59      	adds	r1, r3, #1
 807318e:	911d      	str	r1, [sp, #116]	; 0x74
 8073190:	785b      	ldrb	r3, [r3, #1]
 8073192:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8073196:	2e09      	cmp	r6, #9
 8073198:	d937      	bls.n	807320a <_strtod_l+0x34a>
 807319a:	9e08      	ldr	r6, [sp, #32]
 807319c:	1b89      	subs	r1, r1, r6
 807319e:	2908      	cmp	r1, #8
 80731a0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80731a4:	dc02      	bgt.n	80731ac <_strtod_l+0x2ec>
 80731a6:	4576      	cmp	r6, lr
 80731a8:	bfa8      	it	ge
 80731aa:	4676      	movge	r6, lr
 80731ac:	f1bc 0f00 	cmp.w	ip, #0
 80731b0:	d000      	beq.n	80731b4 <_strtod_l+0x2f4>
 80731b2:	4276      	negs	r6, r6
 80731b4:	2d00      	cmp	r5, #0
 80731b6:	d14f      	bne.n	8073258 <_strtod_l+0x398>
 80731b8:	9904      	ldr	r1, [sp, #16]
 80731ba:	4301      	orrs	r1, r0
 80731bc:	f47f aec2 	bne.w	8072f44 <_strtod_l+0x84>
 80731c0:	2a00      	cmp	r2, #0
 80731c2:	f47f aedb 	bne.w	8072f7c <_strtod_l+0xbc>
 80731c6:	2b69      	cmp	r3, #105	; 0x69
 80731c8:	d027      	beq.n	807321a <_strtod_l+0x35a>
 80731ca:	dc24      	bgt.n	8073216 <_strtod_l+0x356>
 80731cc:	2b49      	cmp	r3, #73	; 0x49
 80731ce:	d024      	beq.n	807321a <_strtod_l+0x35a>
 80731d0:	2b4e      	cmp	r3, #78	; 0x4e
 80731d2:	f47f aed3 	bne.w	8072f7c <_strtod_l+0xbc>
 80731d6:	499e      	ldr	r1, [pc, #632]	; (8073450 <_strtod_l+0x590>)
 80731d8:	a81d      	add	r0, sp, #116	; 0x74
 80731da:	f001 ff23 	bl	8075024 <__match>
 80731de:	2800      	cmp	r0, #0
 80731e0:	f43f aecc 	beq.w	8072f7c <_strtod_l+0xbc>
 80731e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80731e6:	781b      	ldrb	r3, [r3, #0]
 80731e8:	2b28      	cmp	r3, #40	; 0x28
 80731ea:	d12d      	bne.n	8073248 <_strtod_l+0x388>
 80731ec:	4999      	ldr	r1, [pc, #612]	; (8073454 <_strtod_l+0x594>)
 80731ee:	aa20      	add	r2, sp, #128	; 0x80
 80731f0:	a81d      	add	r0, sp, #116	; 0x74
 80731f2:	f001 ff2b 	bl	807504c <__hexnan>
 80731f6:	2805      	cmp	r0, #5
 80731f8:	d126      	bne.n	8073248 <_strtod_l+0x388>
 80731fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80731fc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8073200:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8073204:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8073208:	e69c      	b.n	8072f44 <_strtod_l+0x84>
 807320a:	210a      	movs	r1, #10
 807320c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8073210:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8073214:	e7b9      	b.n	807318a <_strtod_l+0x2ca>
 8073216:	2b6e      	cmp	r3, #110	; 0x6e
 8073218:	e7db      	b.n	80731d2 <_strtod_l+0x312>
 807321a:	498f      	ldr	r1, [pc, #572]	; (8073458 <_strtod_l+0x598>)
 807321c:	a81d      	add	r0, sp, #116	; 0x74
 807321e:	f001 ff01 	bl	8075024 <__match>
 8073222:	2800      	cmp	r0, #0
 8073224:	f43f aeaa 	beq.w	8072f7c <_strtod_l+0xbc>
 8073228:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807322a:	498c      	ldr	r1, [pc, #560]	; (807345c <_strtod_l+0x59c>)
 807322c:	3b01      	subs	r3, #1
 807322e:	a81d      	add	r0, sp, #116	; 0x74
 8073230:	931d      	str	r3, [sp, #116]	; 0x74
 8073232:	f001 fef7 	bl	8075024 <__match>
 8073236:	b910      	cbnz	r0, 807323e <_strtod_l+0x37e>
 8073238:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807323a:	3301      	adds	r3, #1
 807323c:	931d      	str	r3, [sp, #116]	; 0x74
 807323e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 807346c <_strtod_l+0x5ac>
 8073242:	f04f 0a00 	mov.w	sl, #0
 8073246:	e67d      	b.n	8072f44 <_strtod_l+0x84>
 8073248:	4885      	ldr	r0, [pc, #532]	; (8073460 <_strtod_l+0x5a0>)
 807324a:	f002 ffb9 	bl	80761c0 <nan>
 807324e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8073252:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8073256:	e675      	b.n	8072f44 <_strtod_l+0x84>
 8073258:	9b07      	ldr	r3, [sp, #28]
 807325a:	9809      	ldr	r0, [sp, #36]	; 0x24
 807325c:	1af3      	subs	r3, r6, r3
 807325e:	2f00      	cmp	r7, #0
 8073260:	bf08      	it	eq
 8073262:	462f      	moveq	r7, r5
 8073264:	2d10      	cmp	r5, #16
 8073266:	9308      	str	r3, [sp, #32]
 8073268:	46a8      	mov	r8, r5
 807326a:	bfa8      	it	ge
 807326c:	f04f 0810 	movge.w	r8, #16
 8073270:	f7ed f960 	bl	8060534 <__aeabi_ui2d>
 8073274:	2d09      	cmp	r5, #9
 8073276:	4682      	mov	sl, r0
 8073278:	468b      	mov	fp, r1
 807327a:	dd13      	ble.n	80732a4 <_strtod_l+0x3e4>
 807327c:	4b79      	ldr	r3, [pc, #484]	; (8073464 <_strtod_l+0x5a4>)
 807327e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8073282:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8073286:	f7ed f9cf 	bl	8060628 <__aeabi_dmul>
 807328a:	4682      	mov	sl, r0
 807328c:	4648      	mov	r0, r9
 807328e:	468b      	mov	fp, r1
 8073290:	f7ed f950 	bl	8060534 <__aeabi_ui2d>
 8073294:	4602      	mov	r2, r0
 8073296:	460b      	mov	r3, r1
 8073298:	4650      	mov	r0, sl
 807329a:	4659      	mov	r1, fp
 807329c:	f7ed f80e 	bl	80602bc <__adddf3>
 80732a0:	4682      	mov	sl, r0
 80732a2:	468b      	mov	fp, r1
 80732a4:	2d0f      	cmp	r5, #15
 80732a6:	dc38      	bgt.n	807331a <_strtod_l+0x45a>
 80732a8:	9b08      	ldr	r3, [sp, #32]
 80732aa:	2b00      	cmp	r3, #0
 80732ac:	f43f ae4a 	beq.w	8072f44 <_strtod_l+0x84>
 80732b0:	dd24      	ble.n	80732fc <_strtod_l+0x43c>
 80732b2:	2b16      	cmp	r3, #22
 80732b4:	dc0b      	bgt.n	80732ce <_strtod_l+0x40e>
 80732b6:	4d6b      	ldr	r5, [pc, #428]	; (8073464 <_strtod_l+0x5a4>)
 80732b8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80732bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80732c0:	4652      	mov	r2, sl
 80732c2:	465b      	mov	r3, fp
 80732c4:	f7ed f9b0 	bl	8060628 <__aeabi_dmul>
 80732c8:	4682      	mov	sl, r0
 80732ca:	468b      	mov	fp, r1
 80732cc:	e63a      	b.n	8072f44 <_strtod_l+0x84>
 80732ce:	9a08      	ldr	r2, [sp, #32]
 80732d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80732d4:	4293      	cmp	r3, r2
 80732d6:	db20      	blt.n	807331a <_strtod_l+0x45a>
 80732d8:	4c62      	ldr	r4, [pc, #392]	; (8073464 <_strtod_l+0x5a4>)
 80732da:	f1c5 050f 	rsb	r5, r5, #15
 80732de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80732e2:	4652      	mov	r2, sl
 80732e4:	465b      	mov	r3, fp
 80732e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80732ea:	f7ed f99d 	bl	8060628 <__aeabi_dmul>
 80732ee:	9b08      	ldr	r3, [sp, #32]
 80732f0:	1b5d      	subs	r5, r3, r5
 80732f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80732f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80732fa:	e7e3      	b.n	80732c4 <_strtod_l+0x404>
 80732fc:	9b08      	ldr	r3, [sp, #32]
 80732fe:	3316      	adds	r3, #22
 8073300:	db0b      	blt.n	807331a <_strtod_l+0x45a>
 8073302:	9b07      	ldr	r3, [sp, #28]
 8073304:	4a57      	ldr	r2, [pc, #348]	; (8073464 <_strtod_l+0x5a4>)
 8073306:	1b9e      	subs	r6, r3, r6
 8073308:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 807330c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8073310:	4650      	mov	r0, sl
 8073312:	4659      	mov	r1, fp
 8073314:	f7ed fab2 	bl	806087c <__aeabi_ddiv>
 8073318:	e7d6      	b.n	80732c8 <_strtod_l+0x408>
 807331a:	9b08      	ldr	r3, [sp, #32]
 807331c:	eba5 0808 	sub.w	r8, r5, r8
 8073320:	4498      	add	r8, r3
 8073322:	f1b8 0f00 	cmp.w	r8, #0
 8073326:	dd71      	ble.n	807340c <_strtod_l+0x54c>
 8073328:	f018 030f 	ands.w	r3, r8, #15
 807332c:	d00a      	beq.n	8073344 <_strtod_l+0x484>
 807332e:	494d      	ldr	r1, [pc, #308]	; (8073464 <_strtod_l+0x5a4>)
 8073330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8073334:	4652      	mov	r2, sl
 8073336:	465b      	mov	r3, fp
 8073338:	e9d1 0100 	ldrd	r0, r1, [r1]
 807333c:	f7ed f974 	bl	8060628 <__aeabi_dmul>
 8073340:	4682      	mov	sl, r0
 8073342:	468b      	mov	fp, r1
 8073344:	f038 080f 	bics.w	r8, r8, #15
 8073348:	d04d      	beq.n	80733e6 <_strtod_l+0x526>
 807334a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 807334e:	dd22      	ble.n	8073396 <_strtod_l+0x4d6>
 8073350:	2500      	movs	r5, #0
 8073352:	462e      	mov	r6, r5
 8073354:	9509      	str	r5, [sp, #36]	; 0x24
 8073356:	9507      	str	r5, [sp, #28]
 8073358:	2322      	movs	r3, #34	; 0x22
 807335a:	f8df b110 	ldr.w	fp, [pc, #272]	; 807346c <_strtod_l+0x5ac>
 807335e:	6023      	str	r3, [r4, #0]
 8073360:	f04f 0a00 	mov.w	sl, #0
 8073364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073366:	2b00      	cmp	r3, #0
 8073368:	f43f adec 	beq.w	8072f44 <_strtod_l+0x84>
 807336c:	991e      	ldr	r1, [sp, #120]	; 0x78
 807336e:	4620      	mov	r0, r4
 8073370:	f001 ff84 	bl	807527c <_Bfree>
 8073374:	9907      	ldr	r1, [sp, #28]
 8073376:	4620      	mov	r0, r4
 8073378:	f001 ff80 	bl	807527c <_Bfree>
 807337c:	4631      	mov	r1, r6
 807337e:	4620      	mov	r0, r4
 8073380:	f001 ff7c 	bl	807527c <_Bfree>
 8073384:	9909      	ldr	r1, [sp, #36]	; 0x24
 8073386:	4620      	mov	r0, r4
 8073388:	f001 ff78 	bl	807527c <_Bfree>
 807338c:	4629      	mov	r1, r5
 807338e:	4620      	mov	r0, r4
 8073390:	f001 ff74 	bl	807527c <_Bfree>
 8073394:	e5d6      	b.n	8072f44 <_strtod_l+0x84>
 8073396:	2300      	movs	r3, #0
 8073398:	ea4f 1828 	mov.w	r8, r8, asr #4
 807339c:	4650      	mov	r0, sl
 807339e:	4659      	mov	r1, fp
 80733a0:	4699      	mov	r9, r3
 80733a2:	f1b8 0f01 	cmp.w	r8, #1
 80733a6:	dc21      	bgt.n	80733ec <_strtod_l+0x52c>
 80733a8:	b10b      	cbz	r3, 80733ae <_strtod_l+0x4ee>
 80733aa:	4682      	mov	sl, r0
 80733ac:	468b      	mov	fp, r1
 80733ae:	4b2e      	ldr	r3, [pc, #184]	; (8073468 <_strtod_l+0x5a8>)
 80733b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80733b4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80733b8:	4652      	mov	r2, sl
 80733ba:	465b      	mov	r3, fp
 80733bc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80733c0:	f7ed f932 	bl	8060628 <__aeabi_dmul>
 80733c4:	4b29      	ldr	r3, [pc, #164]	; (807346c <_strtod_l+0x5ac>)
 80733c6:	460a      	mov	r2, r1
 80733c8:	400b      	ands	r3, r1
 80733ca:	4929      	ldr	r1, [pc, #164]	; (8073470 <_strtod_l+0x5b0>)
 80733cc:	428b      	cmp	r3, r1
 80733ce:	4682      	mov	sl, r0
 80733d0:	d8be      	bhi.n	8073350 <_strtod_l+0x490>
 80733d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80733d6:	428b      	cmp	r3, r1
 80733d8:	bf86      	itte	hi
 80733da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8073474 <_strtod_l+0x5b4>
 80733de:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80733e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80733e6:	2300      	movs	r3, #0
 80733e8:	9304      	str	r3, [sp, #16]
 80733ea:	e081      	b.n	80734f0 <_strtod_l+0x630>
 80733ec:	f018 0f01 	tst.w	r8, #1
 80733f0:	d007      	beq.n	8073402 <_strtod_l+0x542>
 80733f2:	4b1d      	ldr	r3, [pc, #116]	; (8073468 <_strtod_l+0x5a8>)
 80733f4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80733f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80733fc:	f7ed f914 	bl	8060628 <__aeabi_dmul>
 8073400:	2301      	movs	r3, #1
 8073402:	f109 0901 	add.w	r9, r9, #1
 8073406:	ea4f 0868 	mov.w	r8, r8, asr #1
 807340a:	e7ca      	b.n	80733a2 <_strtod_l+0x4e2>
 807340c:	d0eb      	beq.n	80733e6 <_strtod_l+0x526>
 807340e:	f1c8 0800 	rsb	r8, r8, #0
 8073412:	f018 020f 	ands.w	r2, r8, #15
 8073416:	d00a      	beq.n	807342e <_strtod_l+0x56e>
 8073418:	4b12      	ldr	r3, [pc, #72]	; (8073464 <_strtod_l+0x5a4>)
 807341a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 807341e:	4650      	mov	r0, sl
 8073420:	4659      	mov	r1, fp
 8073422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8073426:	f7ed fa29 	bl	806087c <__aeabi_ddiv>
 807342a:	4682      	mov	sl, r0
 807342c:	468b      	mov	fp, r1
 807342e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8073432:	d0d8      	beq.n	80733e6 <_strtod_l+0x526>
 8073434:	f1b8 0f1f 	cmp.w	r8, #31
 8073438:	dd1e      	ble.n	8073478 <_strtod_l+0x5b8>
 807343a:	2500      	movs	r5, #0
 807343c:	462e      	mov	r6, r5
 807343e:	9509      	str	r5, [sp, #36]	; 0x24
 8073440:	9507      	str	r5, [sp, #28]
 8073442:	2322      	movs	r3, #34	; 0x22
 8073444:	f04f 0a00 	mov.w	sl, #0
 8073448:	f04f 0b00 	mov.w	fp, #0
 807344c:	6023      	str	r3, [r4, #0]
 807344e:	e789      	b.n	8073364 <_strtod_l+0x4a4>
 8073450:	08076f01 	.word	0x08076f01
 8073454:	08076f44 	.word	0x08076f44
 8073458:	08076ef9 	.word	0x08076ef9
 807345c:	08077084 	.word	0x08077084
 8073460:	08077340 	.word	0x08077340
 8073464:	08077220 	.word	0x08077220
 8073468:	080771f8 	.word	0x080771f8
 807346c:	7ff00000 	.word	0x7ff00000
 8073470:	7ca00000 	.word	0x7ca00000
 8073474:	7fefffff 	.word	0x7fefffff
 8073478:	f018 0310 	ands.w	r3, r8, #16
 807347c:	bf18      	it	ne
 807347e:	236a      	movne	r3, #106	; 0x6a
 8073480:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8073838 <_strtod_l+0x978>
 8073484:	9304      	str	r3, [sp, #16]
 8073486:	4650      	mov	r0, sl
 8073488:	4659      	mov	r1, fp
 807348a:	2300      	movs	r3, #0
 807348c:	f018 0f01 	tst.w	r8, #1
 8073490:	d004      	beq.n	807349c <_strtod_l+0x5dc>
 8073492:	e9d9 2300 	ldrd	r2, r3, [r9]
 8073496:	f7ed f8c7 	bl	8060628 <__aeabi_dmul>
 807349a:	2301      	movs	r3, #1
 807349c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80734a0:	f109 0908 	add.w	r9, r9, #8
 80734a4:	d1f2      	bne.n	807348c <_strtod_l+0x5cc>
 80734a6:	b10b      	cbz	r3, 80734ac <_strtod_l+0x5ec>
 80734a8:	4682      	mov	sl, r0
 80734aa:	468b      	mov	fp, r1
 80734ac:	9b04      	ldr	r3, [sp, #16]
 80734ae:	b1bb      	cbz	r3, 80734e0 <_strtod_l+0x620>
 80734b0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80734b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80734b8:	2b00      	cmp	r3, #0
 80734ba:	4659      	mov	r1, fp
 80734bc:	dd10      	ble.n	80734e0 <_strtod_l+0x620>
 80734be:	2b1f      	cmp	r3, #31
 80734c0:	f340 8128 	ble.w	8073714 <_strtod_l+0x854>
 80734c4:	2b34      	cmp	r3, #52	; 0x34
 80734c6:	bfde      	ittt	le
 80734c8:	3b20      	suble	r3, #32
 80734ca:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80734ce:	fa02 f303 	lslle.w	r3, r2, r3
 80734d2:	f04f 0a00 	mov.w	sl, #0
 80734d6:	bfcc      	ite	gt
 80734d8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80734dc:	ea03 0b01 	andle.w	fp, r3, r1
 80734e0:	2200      	movs	r2, #0
 80734e2:	2300      	movs	r3, #0
 80734e4:	4650      	mov	r0, sl
 80734e6:	4659      	mov	r1, fp
 80734e8:	f7ed fb06 	bl	8060af8 <__aeabi_dcmpeq>
 80734ec:	2800      	cmp	r0, #0
 80734ee:	d1a4      	bne.n	807343a <_strtod_l+0x57a>
 80734f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80734f2:	9300      	str	r3, [sp, #0]
 80734f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80734f6:	462b      	mov	r3, r5
 80734f8:	463a      	mov	r2, r7
 80734fa:	4620      	mov	r0, r4
 80734fc:	f001 ff2a 	bl	8075354 <__s2b>
 8073500:	9009      	str	r0, [sp, #36]	; 0x24
 8073502:	2800      	cmp	r0, #0
 8073504:	f43f af24 	beq.w	8073350 <_strtod_l+0x490>
 8073508:	9b07      	ldr	r3, [sp, #28]
 807350a:	1b9e      	subs	r6, r3, r6
 807350c:	9b08      	ldr	r3, [sp, #32]
 807350e:	2b00      	cmp	r3, #0
 8073510:	bfb4      	ite	lt
 8073512:	4633      	movlt	r3, r6
 8073514:	2300      	movge	r3, #0
 8073516:	9310      	str	r3, [sp, #64]	; 0x40
 8073518:	9b08      	ldr	r3, [sp, #32]
 807351a:	2500      	movs	r5, #0
 807351c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8073520:	9318      	str	r3, [sp, #96]	; 0x60
 8073522:	462e      	mov	r6, r5
 8073524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073526:	4620      	mov	r0, r4
 8073528:	6859      	ldr	r1, [r3, #4]
 807352a:	f001 fe67 	bl	80751fc <_Balloc>
 807352e:	9007      	str	r0, [sp, #28]
 8073530:	2800      	cmp	r0, #0
 8073532:	f43f af11 	beq.w	8073358 <_strtod_l+0x498>
 8073536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073538:	691a      	ldr	r2, [r3, #16]
 807353a:	3202      	adds	r2, #2
 807353c:	f103 010c 	add.w	r1, r3, #12
 8073540:	0092      	lsls	r2, r2, #2
 8073542:	300c      	adds	r0, #12
 8073544:	f7fe fcbd 	bl	8071ec2 <memcpy>
 8073548:	ec4b ab10 	vmov	d0, sl, fp
 807354c:	aa20      	add	r2, sp, #128	; 0x80
 807354e:	a91f      	add	r1, sp, #124	; 0x7c
 8073550:	4620      	mov	r0, r4
 8073552:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8073556:	f002 fa39 	bl	80759cc <__d2b>
 807355a:	901e      	str	r0, [sp, #120]	; 0x78
 807355c:	2800      	cmp	r0, #0
 807355e:	f43f aefb 	beq.w	8073358 <_strtod_l+0x498>
 8073562:	2101      	movs	r1, #1
 8073564:	4620      	mov	r0, r4
 8073566:	f001 ff8f 	bl	8075488 <__i2b>
 807356a:	4606      	mov	r6, r0
 807356c:	2800      	cmp	r0, #0
 807356e:	f43f aef3 	beq.w	8073358 <_strtod_l+0x498>
 8073572:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8073574:	9904      	ldr	r1, [sp, #16]
 8073576:	2b00      	cmp	r3, #0
 8073578:	bfab      	itete	ge
 807357a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 807357c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 807357e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8073580:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8073584:	bfac      	ite	ge
 8073586:	eb03 0902 	addge.w	r9, r3, r2
 807358a:	1ad7      	sublt	r7, r2, r3
 807358c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 807358e:	eba3 0801 	sub.w	r8, r3, r1
 8073592:	4490      	add	r8, r2
 8073594:	4ba3      	ldr	r3, [pc, #652]	; (8073824 <_strtod_l+0x964>)
 8073596:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 807359a:	4598      	cmp	r8, r3
 807359c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80735a0:	f280 80cc 	bge.w	807373c <_strtod_l+0x87c>
 80735a4:	eba3 0308 	sub.w	r3, r3, r8
 80735a8:	2b1f      	cmp	r3, #31
 80735aa:	eba2 0203 	sub.w	r2, r2, r3
 80735ae:	f04f 0101 	mov.w	r1, #1
 80735b2:	f300 80b6 	bgt.w	8073722 <_strtod_l+0x862>
 80735b6:	fa01 f303 	lsl.w	r3, r1, r3
 80735ba:	9311      	str	r3, [sp, #68]	; 0x44
 80735bc:	2300      	movs	r3, #0
 80735be:	930c      	str	r3, [sp, #48]	; 0x30
 80735c0:	eb09 0802 	add.w	r8, r9, r2
 80735c4:	9b04      	ldr	r3, [sp, #16]
 80735c6:	45c1      	cmp	r9, r8
 80735c8:	4417      	add	r7, r2
 80735ca:	441f      	add	r7, r3
 80735cc:	464b      	mov	r3, r9
 80735ce:	bfa8      	it	ge
 80735d0:	4643      	movge	r3, r8
 80735d2:	42bb      	cmp	r3, r7
 80735d4:	bfa8      	it	ge
 80735d6:	463b      	movge	r3, r7
 80735d8:	2b00      	cmp	r3, #0
 80735da:	bfc2      	ittt	gt
 80735dc:	eba8 0803 	subgt.w	r8, r8, r3
 80735e0:	1aff      	subgt	r7, r7, r3
 80735e2:	eba9 0903 	subgt.w	r9, r9, r3
 80735e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80735e8:	2b00      	cmp	r3, #0
 80735ea:	dd17      	ble.n	807361c <_strtod_l+0x75c>
 80735ec:	4631      	mov	r1, r6
 80735ee:	461a      	mov	r2, r3
 80735f0:	4620      	mov	r0, r4
 80735f2:	f002 f805 	bl	8075600 <__pow5mult>
 80735f6:	4606      	mov	r6, r0
 80735f8:	2800      	cmp	r0, #0
 80735fa:	f43f aead 	beq.w	8073358 <_strtod_l+0x498>
 80735fe:	4601      	mov	r1, r0
 8073600:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8073602:	4620      	mov	r0, r4
 8073604:	f001 ff56 	bl	80754b4 <__multiply>
 8073608:	900f      	str	r0, [sp, #60]	; 0x3c
 807360a:	2800      	cmp	r0, #0
 807360c:	f43f aea4 	beq.w	8073358 <_strtod_l+0x498>
 8073610:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073612:	4620      	mov	r0, r4
 8073614:	f001 fe32 	bl	807527c <_Bfree>
 8073618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 807361a:	931e      	str	r3, [sp, #120]	; 0x78
 807361c:	f1b8 0f00 	cmp.w	r8, #0
 8073620:	f300 8091 	bgt.w	8073746 <_strtod_l+0x886>
 8073624:	9b08      	ldr	r3, [sp, #32]
 8073626:	2b00      	cmp	r3, #0
 8073628:	dd08      	ble.n	807363c <_strtod_l+0x77c>
 807362a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 807362c:	9907      	ldr	r1, [sp, #28]
 807362e:	4620      	mov	r0, r4
 8073630:	f001 ffe6 	bl	8075600 <__pow5mult>
 8073634:	9007      	str	r0, [sp, #28]
 8073636:	2800      	cmp	r0, #0
 8073638:	f43f ae8e 	beq.w	8073358 <_strtod_l+0x498>
 807363c:	2f00      	cmp	r7, #0
 807363e:	dd08      	ble.n	8073652 <_strtod_l+0x792>
 8073640:	9907      	ldr	r1, [sp, #28]
 8073642:	463a      	mov	r2, r7
 8073644:	4620      	mov	r0, r4
 8073646:	f002 f835 	bl	80756b4 <__lshift>
 807364a:	9007      	str	r0, [sp, #28]
 807364c:	2800      	cmp	r0, #0
 807364e:	f43f ae83 	beq.w	8073358 <_strtod_l+0x498>
 8073652:	f1b9 0f00 	cmp.w	r9, #0
 8073656:	dd08      	ble.n	807366a <_strtod_l+0x7aa>
 8073658:	4631      	mov	r1, r6
 807365a:	464a      	mov	r2, r9
 807365c:	4620      	mov	r0, r4
 807365e:	f002 f829 	bl	80756b4 <__lshift>
 8073662:	4606      	mov	r6, r0
 8073664:	2800      	cmp	r0, #0
 8073666:	f43f ae77 	beq.w	8073358 <_strtod_l+0x498>
 807366a:	9a07      	ldr	r2, [sp, #28]
 807366c:	991e      	ldr	r1, [sp, #120]	; 0x78
 807366e:	4620      	mov	r0, r4
 8073670:	f002 f8a8 	bl	80757c4 <__mdiff>
 8073674:	4605      	mov	r5, r0
 8073676:	2800      	cmp	r0, #0
 8073678:	f43f ae6e 	beq.w	8073358 <_strtod_l+0x498>
 807367c:	68c3      	ldr	r3, [r0, #12]
 807367e:	930f      	str	r3, [sp, #60]	; 0x3c
 8073680:	2300      	movs	r3, #0
 8073682:	60c3      	str	r3, [r0, #12]
 8073684:	4631      	mov	r1, r6
 8073686:	f002 f881 	bl	807578c <__mcmp>
 807368a:	2800      	cmp	r0, #0
 807368c:	da65      	bge.n	807375a <_strtod_l+0x89a>
 807368e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8073690:	ea53 030a 	orrs.w	r3, r3, sl
 8073694:	f040 8087 	bne.w	80737a6 <_strtod_l+0x8e6>
 8073698:	f3cb 0313 	ubfx	r3, fp, #0, #20
 807369c:	2b00      	cmp	r3, #0
 807369e:	f040 8082 	bne.w	80737a6 <_strtod_l+0x8e6>
 80736a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80736a6:	0d1b      	lsrs	r3, r3, #20
 80736a8:	051b      	lsls	r3, r3, #20
 80736aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80736ae:	d97a      	bls.n	80737a6 <_strtod_l+0x8e6>
 80736b0:	696b      	ldr	r3, [r5, #20]
 80736b2:	b913      	cbnz	r3, 80736ba <_strtod_l+0x7fa>
 80736b4:	692b      	ldr	r3, [r5, #16]
 80736b6:	2b01      	cmp	r3, #1
 80736b8:	dd75      	ble.n	80737a6 <_strtod_l+0x8e6>
 80736ba:	4629      	mov	r1, r5
 80736bc:	2201      	movs	r2, #1
 80736be:	4620      	mov	r0, r4
 80736c0:	f001 fff8 	bl	80756b4 <__lshift>
 80736c4:	4631      	mov	r1, r6
 80736c6:	4605      	mov	r5, r0
 80736c8:	f002 f860 	bl	807578c <__mcmp>
 80736cc:	2800      	cmp	r0, #0
 80736ce:	dd6a      	ble.n	80737a6 <_strtod_l+0x8e6>
 80736d0:	9904      	ldr	r1, [sp, #16]
 80736d2:	4a55      	ldr	r2, [pc, #340]	; (8073828 <_strtod_l+0x968>)
 80736d4:	465b      	mov	r3, fp
 80736d6:	2900      	cmp	r1, #0
 80736d8:	f000 8085 	beq.w	80737e6 <_strtod_l+0x926>
 80736dc:	ea02 010b 	and.w	r1, r2, fp
 80736e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80736e4:	dc7f      	bgt.n	80737e6 <_strtod_l+0x926>
 80736e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80736ea:	f77f aeaa 	ble.w	8073442 <_strtod_l+0x582>
 80736ee:	4a4f      	ldr	r2, [pc, #316]	; (807382c <_strtod_l+0x96c>)
 80736f0:	2300      	movs	r3, #0
 80736f2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80736f6:	4650      	mov	r0, sl
 80736f8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80736fc:	4659      	mov	r1, fp
 80736fe:	f7ec ff93 	bl	8060628 <__aeabi_dmul>
 8073702:	460b      	mov	r3, r1
 8073704:	4303      	orrs	r3, r0
 8073706:	bf08      	it	eq
 8073708:	2322      	moveq	r3, #34	; 0x22
 807370a:	4682      	mov	sl, r0
 807370c:	468b      	mov	fp, r1
 807370e:	bf08      	it	eq
 8073710:	6023      	streq	r3, [r4, #0]
 8073712:	e62b      	b.n	807336c <_strtod_l+0x4ac>
 8073714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8073718:	fa02 f303 	lsl.w	r3, r2, r3
 807371c:	ea03 0a0a 	and.w	sl, r3, sl
 8073720:	e6de      	b.n	80734e0 <_strtod_l+0x620>
 8073722:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8073726:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 807372a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 807372e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8073732:	fa01 f308 	lsl.w	r3, r1, r8
 8073736:	930c      	str	r3, [sp, #48]	; 0x30
 8073738:	9111      	str	r1, [sp, #68]	; 0x44
 807373a:	e741      	b.n	80735c0 <_strtod_l+0x700>
 807373c:	2300      	movs	r3, #0
 807373e:	930c      	str	r3, [sp, #48]	; 0x30
 8073740:	2301      	movs	r3, #1
 8073742:	9311      	str	r3, [sp, #68]	; 0x44
 8073744:	e73c      	b.n	80735c0 <_strtod_l+0x700>
 8073746:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073748:	4642      	mov	r2, r8
 807374a:	4620      	mov	r0, r4
 807374c:	f001 ffb2 	bl	80756b4 <__lshift>
 8073750:	901e      	str	r0, [sp, #120]	; 0x78
 8073752:	2800      	cmp	r0, #0
 8073754:	f47f af66 	bne.w	8073624 <_strtod_l+0x764>
 8073758:	e5fe      	b.n	8073358 <_strtod_l+0x498>
 807375a:	465f      	mov	r7, fp
 807375c:	d16e      	bne.n	807383c <_strtod_l+0x97c>
 807375e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8073760:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8073764:	b342      	cbz	r2, 80737b8 <_strtod_l+0x8f8>
 8073766:	4a32      	ldr	r2, [pc, #200]	; (8073830 <_strtod_l+0x970>)
 8073768:	4293      	cmp	r3, r2
 807376a:	d128      	bne.n	80737be <_strtod_l+0x8fe>
 807376c:	9b04      	ldr	r3, [sp, #16]
 807376e:	4650      	mov	r0, sl
 8073770:	b1eb      	cbz	r3, 80737ae <_strtod_l+0x8ee>
 8073772:	4a2d      	ldr	r2, [pc, #180]	; (8073828 <_strtod_l+0x968>)
 8073774:	403a      	ands	r2, r7
 8073776:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 807377a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 807377e:	d819      	bhi.n	80737b4 <_strtod_l+0x8f4>
 8073780:	0d12      	lsrs	r2, r2, #20
 8073782:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8073786:	fa01 f303 	lsl.w	r3, r1, r3
 807378a:	4298      	cmp	r0, r3
 807378c:	d117      	bne.n	80737be <_strtod_l+0x8fe>
 807378e:	4b29      	ldr	r3, [pc, #164]	; (8073834 <_strtod_l+0x974>)
 8073790:	429f      	cmp	r7, r3
 8073792:	d102      	bne.n	807379a <_strtod_l+0x8da>
 8073794:	3001      	adds	r0, #1
 8073796:	f43f addf 	beq.w	8073358 <_strtod_l+0x498>
 807379a:	4b23      	ldr	r3, [pc, #140]	; (8073828 <_strtod_l+0x968>)
 807379c:	403b      	ands	r3, r7
 807379e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80737a2:	f04f 0a00 	mov.w	sl, #0
 80737a6:	9b04      	ldr	r3, [sp, #16]
 80737a8:	2b00      	cmp	r3, #0
 80737aa:	d1a0      	bne.n	80736ee <_strtod_l+0x82e>
 80737ac:	e5de      	b.n	807336c <_strtod_l+0x4ac>
 80737ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80737b2:	e7ea      	b.n	807378a <_strtod_l+0x8ca>
 80737b4:	460b      	mov	r3, r1
 80737b6:	e7e8      	b.n	807378a <_strtod_l+0x8ca>
 80737b8:	ea53 030a 	orrs.w	r3, r3, sl
 80737bc:	d088      	beq.n	80736d0 <_strtod_l+0x810>
 80737be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80737c0:	b1db      	cbz	r3, 80737fa <_strtod_l+0x93a>
 80737c2:	423b      	tst	r3, r7
 80737c4:	d0ef      	beq.n	80737a6 <_strtod_l+0x8e6>
 80737c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80737c8:	9a04      	ldr	r2, [sp, #16]
 80737ca:	4650      	mov	r0, sl
 80737cc:	4659      	mov	r1, fp
 80737ce:	b1c3      	cbz	r3, 8073802 <_strtod_l+0x942>
 80737d0:	f7ff fb57 	bl	8072e82 <sulp>
 80737d4:	4602      	mov	r2, r0
 80737d6:	460b      	mov	r3, r1
 80737d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80737dc:	f7ec fd6e 	bl	80602bc <__adddf3>
 80737e0:	4682      	mov	sl, r0
 80737e2:	468b      	mov	fp, r1
 80737e4:	e7df      	b.n	80737a6 <_strtod_l+0x8e6>
 80737e6:	4013      	ands	r3, r2
 80737e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80737ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80737f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80737f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80737f8:	e7d5      	b.n	80737a6 <_strtod_l+0x8e6>
 80737fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80737fc:	ea13 0f0a 	tst.w	r3, sl
 8073800:	e7e0      	b.n	80737c4 <_strtod_l+0x904>
 8073802:	f7ff fb3e 	bl	8072e82 <sulp>
 8073806:	4602      	mov	r2, r0
 8073808:	460b      	mov	r3, r1
 807380a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 807380e:	f7ec fd53 	bl	80602b8 <__aeabi_dsub>
 8073812:	2200      	movs	r2, #0
 8073814:	2300      	movs	r3, #0
 8073816:	4682      	mov	sl, r0
 8073818:	468b      	mov	fp, r1
 807381a:	f7ed f96d 	bl	8060af8 <__aeabi_dcmpeq>
 807381e:	2800      	cmp	r0, #0
 8073820:	d0c1      	beq.n	80737a6 <_strtod_l+0x8e6>
 8073822:	e60e      	b.n	8073442 <_strtod_l+0x582>
 8073824:	fffffc02 	.word	0xfffffc02
 8073828:	7ff00000 	.word	0x7ff00000
 807382c:	39500000 	.word	0x39500000
 8073830:	000fffff 	.word	0x000fffff
 8073834:	7fefffff 	.word	0x7fefffff
 8073838:	08076f58 	.word	0x08076f58
 807383c:	4631      	mov	r1, r6
 807383e:	4628      	mov	r0, r5
 8073840:	f002 f920 	bl	8075a84 <__ratio>
 8073844:	ec59 8b10 	vmov	r8, r9, d0
 8073848:	ee10 0a10 	vmov	r0, s0
 807384c:	2200      	movs	r2, #0
 807384e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8073852:	4649      	mov	r1, r9
 8073854:	f7ed f964 	bl	8060b20 <__aeabi_dcmple>
 8073858:	2800      	cmp	r0, #0
 807385a:	d07c      	beq.n	8073956 <_strtod_l+0xa96>
 807385c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 807385e:	2b00      	cmp	r3, #0
 8073860:	d04c      	beq.n	80738fc <_strtod_l+0xa3c>
 8073862:	4b95      	ldr	r3, [pc, #596]	; (8073ab8 <_strtod_l+0xbf8>)
 8073864:	2200      	movs	r2, #0
 8073866:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 807386a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8073ab8 <_strtod_l+0xbf8>
 807386e:	f04f 0800 	mov.w	r8, #0
 8073872:	4b92      	ldr	r3, [pc, #584]	; (8073abc <_strtod_l+0xbfc>)
 8073874:	403b      	ands	r3, r7
 8073876:	9311      	str	r3, [sp, #68]	; 0x44
 8073878:	9a11      	ldr	r2, [sp, #68]	; 0x44
 807387a:	4b91      	ldr	r3, [pc, #580]	; (8073ac0 <_strtod_l+0xc00>)
 807387c:	429a      	cmp	r2, r3
 807387e:	f040 80b2 	bne.w	80739e6 <_strtod_l+0xb26>
 8073882:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8073886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 807388a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 807388e:	ec4b ab10 	vmov	d0, sl, fp
 8073892:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8073896:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 807389a:	f002 f81b 	bl	80758d4 <__ulp>
 807389e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80738a2:	ec53 2b10 	vmov	r2, r3, d0
 80738a6:	f7ec febf 	bl	8060628 <__aeabi_dmul>
 80738aa:	4652      	mov	r2, sl
 80738ac:	465b      	mov	r3, fp
 80738ae:	f7ec fd05 	bl	80602bc <__adddf3>
 80738b2:	460b      	mov	r3, r1
 80738b4:	4981      	ldr	r1, [pc, #516]	; (8073abc <_strtod_l+0xbfc>)
 80738b6:	4a83      	ldr	r2, [pc, #524]	; (8073ac4 <_strtod_l+0xc04>)
 80738b8:	4019      	ands	r1, r3
 80738ba:	4291      	cmp	r1, r2
 80738bc:	4682      	mov	sl, r0
 80738be:	d95e      	bls.n	807397e <_strtod_l+0xabe>
 80738c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80738c2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80738c6:	4293      	cmp	r3, r2
 80738c8:	d103      	bne.n	80738d2 <_strtod_l+0xa12>
 80738ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80738cc:	3301      	adds	r3, #1
 80738ce:	f43f ad43 	beq.w	8073358 <_strtod_l+0x498>
 80738d2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8073ad0 <_strtod_l+0xc10>
 80738d6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80738da:	991e      	ldr	r1, [sp, #120]	; 0x78
 80738dc:	4620      	mov	r0, r4
 80738de:	f001 fccd 	bl	807527c <_Bfree>
 80738e2:	9907      	ldr	r1, [sp, #28]
 80738e4:	4620      	mov	r0, r4
 80738e6:	f001 fcc9 	bl	807527c <_Bfree>
 80738ea:	4631      	mov	r1, r6
 80738ec:	4620      	mov	r0, r4
 80738ee:	f001 fcc5 	bl	807527c <_Bfree>
 80738f2:	4629      	mov	r1, r5
 80738f4:	4620      	mov	r0, r4
 80738f6:	f001 fcc1 	bl	807527c <_Bfree>
 80738fa:	e613      	b.n	8073524 <_strtod_l+0x664>
 80738fc:	f1ba 0f00 	cmp.w	sl, #0
 8073900:	d11b      	bne.n	807393a <_strtod_l+0xa7a>
 8073902:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8073906:	b9f3      	cbnz	r3, 8073946 <_strtod_l+0xa86>
 8073908:	4b6b      	ldr	r3, [pc, #428]	; (8073ab8 <_strtod_l+0xbf8>)
 807390a:	2200      	movs	r2, #0
 807390c:	4640      	mov	r0, r8
 807390e:	4649      	mov	r1, r9
 8073910:	f7ed f8fc 	bl	8060b0c <__aeabi_dcmplt>
 8073914:	b9d0      	cbnz	r0, 807394c <_strtod_l+0xa8c>
 8073916:	4640      	mov	r0, r8
 8073918:	4649      	mov	r1, r9
 807391a:	4b6b      	ldr	r3, [pc, #428]	; (8073ac8 <_strtod_l+0xc08>)
 807391c:	2200      	movs	r2, #0
 807391e:	f7ec fe83 	bl	8060628 <__aeabi_dmul>
 8073922:	4680      	mov	r8, r0
 8073924:	4689      	mov	r9, r1
 8073926:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 807392a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 807392e:	931b      	str	r3, [sp, #108]	; 0x6c
 8073930:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8073934:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8073938:	e79b      	b.n	8073872 <_strtod_l+0x9b2>
 807393a:	f1ba 0f01 	cmp.w	sl, #1
 807393e:	d102      	bne.n	8073946 <_strtod_l+0xa86>
 8073940:	2f00      	cmp	r7, #0
 8073942:	f43f ad7e 	beq.w	8073442 <_strtod_l+0x582>
 8073946:	4b61      	ldr	r3, [pc, #388]	; (8073acc <_strtod_l+0xc0c>)
 8073948:	2200      	movs	r2, #0
 807394a:	e78c      	b.n	8073866 <_strtod_l+0x9a6>
 807394c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8073ac8 <_strtod_l+0xc08>
 8073950:	f04f 0800 	mov.w	r8, #0
 8073954:	e7e7      	b.n	8073926 <_strtod_l+0xa66>
 8073956:	4b5c      	ldr	r3, [pc, #368]	; (8073ac8 <_strtod_l+0xc08>)
 8073958:	4640      	mov	r0, r8
 807395a:	4649      	mov	r1, r9
 807395c:	2200      	movs	r2, #0
 807395e:	f7ec fe63 	bl	8060628 <__aeabi_dmul>
 8073962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8073964:	4680      	mov	r8, r0
 8073966:	4689      	mov	r9, r1
 8073968:	b933      	cbnz	r3, 8073978 <_strtod_l+0xab8>
 807396a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 807396e:	9012      	str	r0, [sp, #72]	; 0x48
 8073970:	9313      	str	r3, [sp, #76]	; 0x4c
 8073972:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8073976:	e7dd      	b.n	8073934 <_strtod_l+0xa74>
 8073978:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 807397c:	e7f9      	b.n	8073972 <_strtod_l+0xab2>
 807397e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8073982:	9b04      	ldr	r3, [sp, #16]
 8073984:	2b00      	cmp	r3, #0
 8073986:	d1a8      	bne.n	80738da <_strtod_l+0xa1a>
 8073988:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 807398c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 807398e:	0d1b      	lsrs	r3, r3, #20
 8073990:	051b      	lsls	r3, r3, #20
 8073992:	429a      	cmp	r2, r3
 8073994:	d1a1      	bne.n	80738da <_strtod_l+0xa1a>
 8073996:	4640      	mov	r0, r8
 8073998:	4649      	mov	r1, r9
 807399a:	f7ed f9f5 	bl	8060d88 <__aeabi_d2lz>
 807399e:	f7ec fe15 	bl	80605cc <__aeabi_l2d>
 80739a2:	4602      	mov	r2, r0
 80739a4:	460b      	mov	r3, r1
 80739a6:	4640      	mov	r0, r8
 80739a8:	4649      	mov	r1, r9
 80739aa:	f7ec fc85 	bl	80602b8 <__aeabi_dsub>
 80739ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80739b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80739b4:	ea43 030a 	orr.w	r3, r3, sl
 80739b8:	4313      	orrs	r3, r2
 80739ba:	4680      	mov	r8, r0
 80739bc:	4689      	mov	r9, r1
 80739be:	d053      	beq.n	8073a68 <_strtod_l+0xba8>
 80739c0:	a335      	add	r3, pc, #212	; (adr r3, 8073a98 <_strtod_l+0xbd8>)
 80739c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80739c6:	f7ed f8a1 	bl	8060b0c <__aeabi_dcmplt>
 80739ca:	2800      	cmp	r0, #0
 80739cc:	f47f acce 	bne.w	807336c <_strtod_l+0x4ac>
 80739d0:	a333      	add	r3, pc, #204	; (adr r3, 8073aa0 <_strtod_l+0xbe0>)
 80739d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80739d6:	4640      	mov	r0, r8
 80739d8:	4649      	mov	r1, r9
 80739da:	f7ed f8b5 	bl	8060b48 <__aeabi_dcmpgt>
 80739de:	2800      	cmp	r0, #0
 80739e0:	f43f af7b 	beq.w	80738da <_strtod_l+0xa1a>
 80739e4:	e4c2      	b.n	807336c <_strtod_l+0x4ac>
 80739e6:	9b04      	ldr	r3, [sp, #16]
 80739e8:	b333      	cbz	r3, 8073a38 <_strtod_l+0xb78>
 80739ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80739ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80739f0:	d822      	bhi.n	8073a38 <_strtod_l+0xb78>
 80739f2:	a32d      	add	r3, pc, #180	; (adr r3, 8073aa8 <_strtod_l+0xbe8>)
 80739f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80739f8:	4640      	mov	r0, r8
 80739fa:	4649      	mov	r1, r9
 80739fc:	f7ed f890 	bl	8060b20 <__aeabi_dcmple>
 8073a00:	b1a0      	cbz	r0, 8073a2c <_strtod_l+0xb6c>
 8073a02:	4649      	mov	r1, r9
 8073a04:	4640      	mov	r0, r8
 8073a06:	f7ed f8e7 	bl	8060bd8 <__aeabi_d2uiz>
 8073a0a:	2801      	cmp	r0, #1
 8073a0c:	bf38      	it	cc
 8073a0e:	2001      	movcc	r0, #1
 8073a10:	f7ec fd90 	bl	8060534 <__aeabi_ui2d>
 8073a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8073a16:	4680      	mov	r8, r0
 8073a18:	4689      	mov	r9, r1
 8073a1a:	bb13      	cbnz	r3, 8073a62 <_strtod_l+0xba2>
 8073a1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8073a20:	9014      	str	r0, [sp, #80]	; 0x50
 8073a22:	9315      	str	r3, [sp, #84]	; 0x54
 8073a24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8073a28:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8073a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8073a2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8073a30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8073a34:	1a9b      	subs	r3, r3, r2
 8073a36:	930d      	str	r3, [sp, #52]	; 0x34
 8073a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8073a3c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8073a40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8073a44:	f001 ff46 	bl	80758d4 <__ulp>
 8073a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8073a4c:	ec53 2b10 	vmov	r2, r3, d0
 8073a50:	f7ec fdea 	bl	8060628 <__aeabi_dmul>
 8073a54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8073a58:	f7ec fc30 	bl	80602bc <__adddf3>
 8073a5c:	4682      	mov	sl, r0
 8073a5e:	468b      	mov	fp, r1
 8073a60:	e78f      	b.n	8073982 <_strtod_l+0xac2>
 8073a62:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8073a66:	e7dd      	b.n	8073a24 <_strtod_l+0xb64>
 8073a68:	a311      	add	r3, pc, #68	; (adr r3, 8073ab0 <_strtod_l+0xbf0>)
 8073a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8073a6e:	f7ed f84d 	bl	8060b0c <__aeabi_dcmplt>
 8073a72:	e7b4      	b.n	80739de <_strtod_l+0xb1e>
 8073a74:	2300      	movs	r3, #0
 8073a76:	930e      	str	r3, [sp, #56]	; 0x38
 8073a78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8073a7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8073a7c:	6013      	str	r3, [r2, #0]
 8073a7e:	f7ff ba65 	b.w	8072f4c <_strtod_l+0x8c>
 8073a82:	2b65      	cmp	r3, #101	; 0x65
 8073a84:	f43f ab5d 	beq.w	8073142 <_strtod_l+0x282>
 8073a88:	2b45      	cmp	r3, #69	; 0x45
 8073a8a:	f43f ab5a 	beq.w	8073142 <_strtod_l+0x282>
 8073a8e:	2201      	movs	r2, #1
 8073a90:	f7ff bb92 	b.w	80731b8 <_strtod_l+0x2f8>
 8073a94:	f3af 8000 	nop.w
 8073a98:	94a03595 	.word	0x94a03595
 8073a9c:	3fdfffff 	.word	0x3fdfffff
 8073aa0:	35afe535 	.word	0x35afe535
 8073aa4:	3fe00000 	.word	0x3fe00000
 8073aa8:	ffc00000 	.word	0xffc00000
 8073aac:	41dfffff 	.word	0x41dfffff
 8073ab0:	94a03595 	.word	0x94a03595
 8073ab4:	3fcfffff 	.word	0x3fcfffff
 8073ab8:	3ff00000 	.word	0x3ff00000
 8073abc:	7ff00000 	.word	0x7ff00000
 8073ac0:	7fe00000 	.word	0x7fe00000
 8073ac4:	7c9fffff 	.word	0x7c9fffff
 8073ac8:	3fe00000 	.word	0x3fe00000
 8073acc:	bff00000 	.word	0xbff00000
 8073ad0:	7fefffff 	.word	0x7fefffff

08073ad4 <_strtod_r>:
 8073ad4:	4b01      	ldr	r3, [pc, #4]	; (8073adc <_strtod_r+0x8>)
 8073ad6:	f7ff b9f3 	b.w	8072ec0 <_strtod_l>
 8073ada:	bf00      	nop
 8073adc:	20000090 	.word	0x20000090

08073ae0 <_strtol_l.isra.0>:
 8073ae0:	2b01      	cmp	r3, #1
 8073ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8073ae6:	d001      	beq.n	8073aec <_strtol_l.isra.0+0xc>
 8073ae8:	2b24      	cmp	r3, #36	; 0x24
 8073aea:	d906      	bls.n	8073afa <_strtol_l.isra.0+0x1a>
 8073aec:	f7fe f8c6 	bl	8071c7c <__errno>
 8073af0:	2316      	movs	r3, #22
 8073af2:	6003      	str	r3, [r0, #0]
 8073af4:	2000      	movs	r0, #0
 8073af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8073afa:	4f3a      	ldr	r7, [pc, #232]	; (8073be4 <_strtol_l.isra.0+0x104>)
 8073afc:	468e      	mov	lr, r1
 8073afe:	4676      	mov	r6, lr
 8073b00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8073b04:	5de5      	ldrb	r5, [r4, r7]
 8073b06:	f015 0508 	ands.w	r5, r5, #8
 8073b0a:	d1f8      	bne.n	8073afe <_strtol_l.isra.0+0x1e>
 8073b0c:	2c2d      	cmp	r4, #45	; 0x2d
 8073b0e:	d134      	bne.n	8073b7a <_strtol_l.isra.0+0x9a>
 8073b10:	f89e 4000 	ldrb.w	r4, [lr]
 8073b14:	f04f 0801 	mov.w	r8, #1
 8073b18:	f106 0e02 	add.w	lr, r6, #2
 8073b1c:	2b00      	cmp	r3, #0
 8073b1e:	d05c      	beq.n	8073bda <_strtol_l.isra.0+0xfa>
 8073b20:	2b10      	cmp	r3, #16
 8073b22:	d10c      	bne.n	8073b3e <_strtol_l.isra.0+0x5e>
 8073b24:	2c30      	cmp	r4, #48	; 0x30
 8073b26:	d10a      	bne.n	8073b3e <_strtol_l.isra.0+0x5e>
 8073b28:	f89e 4000 	ldrb.w	r4, [lr]
 8073b2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8073b30:	2c58      	cmp	r4, #88	; 0x58
 8073b32:	d14d      	bne.n	8073bd0 <_strtol_l.isra.0+0xf0>
 8073b34:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8073b38:	2310      	movs	r3, #16
 8073b3a:	f10e 0e02 	add.w	lr, lr, #2
 8073b3e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8073b42:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8073b46:	2600      	movs	r6, #0
 8073b48:	fbbc f9f3 	udiv	r9, ip, r3
 8073b4c:	4635      	mov	r5, r6
 8073b4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8073b52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8073b56:	2f09      	cmp	r7, #9
 8073b58:	d818      	bhi.n	8073b8c <_strtol_l.isra.0+0xac>
 8073b5a:	463c      	mov	r4, r7
 8073b5c:	42a3      	cmp	r3, r4
 8073b5e:	dd24      	ble.n	8073baa <_strtol_l.isra.0+0xca>
 8073b60:	2e00      	cmp	r6, #0
 8073b62:	db1f      	blt.n	8073ba4 <_strtol_l.isra.0+0xc4>
 8073b64:	45a9      	cmp	r9, r5
 8073b66:	d31d      	bcc.n	8073ba4 <_strtol_l.isra.0+0xc4>
 8073b68:	d101      	bne.n	8073b6e <_strtol_l.isra.0+0x8e>
 8073b6a:	45a2      	cmp	sl, r4
 8073b6c:	db1a      	blt.n	8073ba4 <_strtol_l.isra.0+0xc4>
 8073b6e:	fb05 4503 	mla	r5, r5, r3, r4
 8073b72:	2601      	movs	r6, #1
 8073b74:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8073b78:	e7eb      	b.n	8073b52 <_strtol_l.isra.0+0x72>
 8073b7a:	2c2b      	cmp	r4, #43	; 0x2b
 8073b7c:	bf08      	it	eq
 8073b7e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8073b82:	46a8      	mov	r8, r5
 8073b84:	bf08      	it	eq
 8073b86:	f106 0e02 	addeq.w	lr, r6, #2
 8073b8a:	e7c7      	b.n	8073b1c <_strtol_l.isra.0+0x3c>
 8073b8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8073b90:	2f19      	cmp	r7, #25
 8073b92:	d801      	bhi.n	8073b98 <_strtol_l.isra.0+0xb8>
 8073b94:	3c37      	subs	r4, #55	; 0x37
 8073b96:	e7e1      	b.n	8073b5c <_strtol_l.isra.0+0x7c>
 8073b98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8073b9c:	2f19      	cmp	r7, #25
 8073b9e:	d804      	bhi.n	8073baa <_strtol_l.isra.0+0xca>
 8073ba0:	3c57      	subs	r4, #87	; 0x57
 8073ba2:	e7db      	b.n	8073b5c <_strtol_l.isra.0+0x7c>
 8073ba4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8073ba8:	e7e4      	b.n	8073b74 <_strtol_l.isra.0+0x94>
 8073baa:	2e00      	cmp	r6, #0
 8073bac:	da05      	bge.n	8073bba <_strtol_l.isra.0+0xda>
 8073bae:	2322      	movs	r3, #34	; 0x22
 8073bb0:	6003      	str	r3, [r0, #0]
 8073bb2:	4665      	mov	r5, ip
 8073bb4:	b942      	cbnz	r2, 8073bc8 <_strtol_l.isra.0+0xe8>
 8073bb6:	4628      	mov	r0, r5
 8073bb8:	e79d      	b.n	8073af6 <_strtol_l.isra.0+0x16>
 8073bba:	f1b8 0f00 	cmp.w	r8, #0
 8073bbe:	d000      	beq.n	8073bc2 <_strtol_l.isra.0+0xe2>
 8073bc0:	426d      	negs	r5, r5
 8073bc2:	2a00      	cmp	r2, #0
 8073bc4:	d0f7      	beq.n	8073bb6 <_strtol_l.isra.0+0xd6>
 8073bc6:	b10e      	cbz	r6, 8073bcc <_strtol_l.isra.0+0xec>
 8073bc8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8073bcc:	6011      	str	r1, [r2, #0]
 8073bce:	e7f2      	b.n	8073bb6 <_strtol_l.isra.0+0xd6>
 8073bd0:	2430      	movs	r4, #48	; 0x30
 8073bd2:	2b00      	cmp	r3, #0
 8073bd4:	d1b3      	bne.n	8073b3e <_strtol_l.isra.0+0x5e>
 8073bd6:	2308      	movs	r3, #8
 8073bd8:	e7b1      	b.n	8073b3e <_strtol_l.isra.0+0x5e>
 8073bda:	2c30      	cmp	r4, #48	; 0x30
 8073bdc:	d0a4      	beq.n	8073b28 <_strtol_l.isra.0+0x48>
 8073bde:	230a      	movs	r3, #10
 8073be0:	e7ad      	b.n	8073b3e <_strtol_l.isra.0+0x5e>
 8073be2:	bf00      	nop
 8073be4:	08076f81 	.word	0x08076f81

08073be8 <_strtol_r>:
 8073be8:	f7ff bf7a 	b.w	8073ae0 <_strtol_l.isra.0>

08073bec <_write_r>:
 8073bec:	b538      	push	{r3, r4, r5, lr}
 8073bee:	4d07      	ldr	r5, [pc, #28]	; (8073c0c <_write_r+0x20>)
 8073bf0:	4604      	mov	r4, r0
 8073bf2:	4608      	mov	r0, r1
 8073bf4:	4611      	mov	r1, r2
 8073bf6:	2200      	movs	r2, #0
 8073bf8:	602a      	str	r2, [r5, #0]
 8073bfa:	461a      	mov	r2, r3
 8073bfc:	f7ef fc77 	bl	80634ee <_write>
 8073c00:	1c43      	adds	r3, r0, #1
 8073c02:	d102      	bne.n	8073c0a <_write_r+0x1e>
 8073c04:	682b      	ldr	r3, [r5, #0]
 8073c06:	b103      	cbz	r3, 8073c0a <_write_r+0x1e>
 8073c08:	6023      	str	r3, [r4, #0]
 8073c0a:	bd38      	pop	{r3, r4, r5, pc}
 8073c0c:	20005d10 	.word	0x20005d10

08073c10 <_close_r>:
 8073c10:	b538      	push	{r3, r4, r5, lr}
 8073c12:	4d06      	ldr	r5, [pc, #24]	; (8073c2c <_close_r+0x1c>)
 8073c14:	2300      	movs	r3, #0
 8073c16:	4604      	mov	r4, r0
 8073c18:	4608      	mov	r0, r1
 8073c1a:	602b      	str	r3, [r5, #0]
 8073c1c:	f7ef fc83 	bl	8063526 <_close>
 8073c20:	1c43      	adds	r3, r0, #1
 8073c22:	d102      	bne.n	8073c2a <_close_r+0x1a>
 8073c24:	682b      	ldr	r3, [r5, #0]
 8073c26:	b103      	cbz	r3, 8073c2a <_close_r+0x1a>
 8073c28:	6023      	str	r3, [r4, #0]
 8073c2a:	bd38      	pop	{r3, r4, r5, pc}
 8073c2c:	20005d10 	.word	0x20005d10

08073c30 <quorem>:
 8073c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8073c34:	6903      	ldr	r3, [r0, #16]
 8073c36:	690c      	ldr	r4, [r1, #16]
 8073c38:	42a3      	cmp	r3, r4
 8073c3a:	4607      	mov	r7, r0
 8073c3c:	f2c0 8081 	blt.w	8073d42 <quorem+0x112>
 8073c40:	3c01      	subs	r4, #1
 8073c42:	f101 0814 	add.w	r8, r1, #20
 8073c46:	f100 0514 	add.w	r5, r0, #20
 8073c4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8073c4e:	9301      	str	r3, [sp, #4]
 8073c50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8073c54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8073c58:	3301      	adds	r3, #1
 8073c5a:	429a      	cmp	r2, r3
 8073c5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8073c60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8073c64:	fbb2 f6f3 	udiv	r6, r2, r3
 8073c68:	d331      	bcc.n	8073cce <quorem+0x9e>
 8073c6a:	f04f 0e00 	mov.w	lr, #0
 8073c6e:	4640      	mov	r0, r8
 8073c70:	46ac      	mov	ip, r5
 8073c72:	46f2      	mov	sl, lr
 8073c74:	f850 2b04 	ldr.w	r2, [r0], #4
 8073c78:	b293      	uxth	r3, r2
 8073c7a:	fb06 e303 	mla	r3, r6, r3, lr
 8073c7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8073c82:	b29b      	uxth	r3, r3
 8073c84:	ebaa 0303 	sub.w	r3, sl, r3
 8073c88:	0c12      	lsrs	r2, r2, #16
 8073c8a:	f8dc a000 	ldr.w	sl, [ip]
 8073c8e:	fb06 e202 	mla	r2, r6, r2, lr
 8073c92:	fa13 f38a 	uxtah	r3, r3, sl
 8073c96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8073c9a:	fa1f fa82 	uxth.w	sl, r2
 8073c9e:	f8dc 2000 	ldr.w	r2, [ip]
 8073ca2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8073ca6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8073caa:	b29b      	uxth	r3, r3
 8073cac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8073cb0:	4581      	cmp	r9, r0
 8073cb2:	f84c 3b04 	str.w	r3, [ip], #4
 8073cb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8073cba:	d2db      	bcs.n	8073c74 <quorem+0x44>
 8073cbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8073cc0:	b92b      	cbnz	r3, 8073cce <quorem+0x9e>
 8073cc2:	9b01      	ldr	r3, [sp, #4]
 8073cc4:	3b04      	subs	r3, #4
 8073cc6:	429d      	cmp	r5, r3
 8073cc8:	461a      	mov	r2, r3
 8073cca:	d32e      	bcc.n	8073d2a <quorem+0xfa>
 8073ccc:	613c      	str	r4, [r7, #16]
 8073cce:	4638      	mov	r0, r7
 8073cd0:	f001 fd5c 	bl	807578c <__mcmp>
 8073cd4:	2800      	cmp	r0, #0
 8073cd6:	db24      	blt.n	8073d22 <quorem+0xf2>
 8073cd8:	3601      	adds	r6, #1
 8073cda:	4628      	mov	r0, r5
 8073cdc:	f04f 0c00 	mov.w	ip, #0
 8073ce0:	f858 2b04 	ldr.w	r2, [r8], #4
 8073ce4:	f8d0 e000 	ldr.w	lr, [r0]
 8073ce8:	b293      	uxth	r3, r2
 8073cea:	ebac 0303 	sub.w	r3, ip, r3
 8073cee:	0c12      	lsrs	r2, r2, #16
 8073cf0:	fa13 f38e 	uxtah	r3, r3, lr
 8073cf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8073cf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8073cfc:	b29b      	uxth	r3, r3
 8073cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8073d02:	45c1      	cmp	r9, r8
 8073d04:	f840 3b04 	str.w	r3, [r0], #4
 8073d08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8073d0c:	d2e8      	bcs.n	8073ce0 <quorem+0xb0>
 8073d0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8073d12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8073d16:	b922      	cbnz	r2, 8073d22 <quorem+0xf2>
 8073d18:	3b04      	subs	r3, #4
 8073d1a:	429d      	cmp	r5, r3
 8073d1c:	461a      	mov	r2, r3
 8073d1e:	d30a      	bcc.n	8073d36 <quorem+0x106>
 8073d20:	613c      	str	r4, [r7, #16]
 8073d22:	4630      	mov	r0, r6
 8073d24:	b003      	add	sp, #12
 8073d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8073d2a:	6812      	ldr	r2, [r2, #0]
 8073d2c:	3b04      	subs	r3, #4
 8073d2e:	2a00      	cmp	r2, #0
 8073d30:	d1cc      	bne.n	8073ccc <quorem+0x9c>
 8073d32:	3c01      	subs	r4, #1
 8073d34:	e7c7      	b.n	8073cc6 <quorem+0x96>
 8073d36:	6812      	ldr	r2, [r2, #0]
 8073d38:	3b04      	subs	r3, #4
 8073d3a:	2a00      	cmp	r2, #0
 8073d3c:	d1f0      	bne.n	8073d20 <quorem+0xf0>
 8073d3e:	3c01      	subs	r4, #1
 8073d40:	e7eb      	b.n	8073d1a <quorem+0xea>
 8073d42:	2000      	movs	r0, #0
 8073d44:	e7ee      	b.n	8073d24 <quorem+0xf4>
	...

08073d48 <_dtoa_r>:
 8073d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8073d4c:	ed2d 8b02 	vpush	{d8}
 8073d50:	ec57 6b10 	vmov	r6, r7, d0
 8073d54:	b095      	sub	sp, #84	; 0x54
 8073d56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8073d58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8073d5c:	9105      	str	r1, [sp, #20]
 8073d5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8073d62:	4604      	mov	r4, r0
 8073d64:	9209      	str	r2, [sp, #36]	; 0x24
 8073d66:	930f      	str	r3, [sp, #60]	; 0x3c
 8073d68:	b975      	cbnz	r5, 8073d88 <_dtoa_r+0x40>
 8073d6a:	2010      	movs	r0, #16
 8073d6c:	f001 fa20 	bl	80751b0 <malloc>
 8073d70:	4602      	mov	r2, r0
 8073d72:	6260      	str	r0, [r4, #36]	; 0x24
 8073d74:	b920      	cbnz	r0, 8073d80 <_dtoa_r+0x38>
 8073d76:	4bb2      	ldr	r3, [pc, #712]	; (8074040 <_dtoa_r+0x2f8>)
 8073d78:	21ea      	movs	r1, #234	; 0xea
 8073d7a:	48b2      	ldr	r0, [pc, #712]	; (8074044 <_dtoa_r+0x2fc>)
 8073d7c:	f002 faf6 	bl	807636c <__assert_func>
 8073d80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8073d84:	6005      	str	r5, [r0, #0]
 8073d86:	60c5      	str	r5, [r0, #12]
 8073d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8073d8a:	6819      	ldr	r1, [r3, #0]
 8073d8c:	b151      	cbz	r1, 8073da4 <_dtoa_r+0x5c>
 8073d8e:	685a      	ldr	r2, [r3, #4]
 8073d90:	604a      	str	r2, [r1, #4]
 8073d92:	2301      	movs	r3, #1
 8073d94:	4093      	lsls	r3, r2
 8073d96:	608b      	str	r3, [r1, #8]
 8073d98:	4620      	mov	r0, r4
 8073d9a:	f001 fa6f 	bl	807527c <_Bfree>
 8073d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8073da0:	2200      	movs	r2, #0
 8073da2:	601a      	str	r2, [r3, #0]
 8073da4:	1e3b      	subs	r3, r7, #0
 8073da6:	bfb9      	ittee	lt
 8073da8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8073dac:	9303      	strlt	r3, [sp, #12]
 8073dae:	2300      	movge	r3, #0
 8073db0:	f8c8 3000 	strge.w	r3, [r8]
 8073db4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8073db8:	4ba3      	ldr	r3, [pc, #652]	; (8074048 <_dtoa_r+0x300>)
 8073dba:	bfbc      	itt	lt
 8073dbc:	2201      	movlt	r2, #1
 8073dbe:	f8c8 2000 	strlt.w	r2, [r8]
 8073dc2:	ea33 0309 	bics.w	r3, r3, r9
 8073dc6:	d11b      	bne.n	8073e00 <_dtoa_r+0xb8>
 8073dc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8073dca:	f242 730f 	movw	r3, #9999	; 0x270f
 8073dce:	6013      	str	r3, [r2, #0]
 8073dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8073dd4:	4333      	orrs	r3, r6
 8073dd6:	f000 857a 	beq.w	80748ce <_dtoa_r+0xb86>
 8073dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8073ddc:	b963      	cbnz	r3, 8073df8 <_dtoa_r+0xb0>
 8073dde:	4b9b      	ldr	r3, [pc, #620]	; (807404c <_dtoa_r+0x304>)
 8073de0:	e024      	b.n	8073e2c <_dtoa_r+0xe4>
 8073de2:	4b9b      	ldr	r3, [pc, #620]	; (8074050 <_dtoa_r+0x308>)
 8073de4:	9300      	str	r3, [sp, #0]
 8073de6:	3308      	adds	r3, #8
 8073de8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8073dea:	6013      	str	r3, [r2, #0]
 8073dec:	9800      	ldr	r0, [sp, #0]
 8073dee:	b015      	add	sp, #84	; 0x54
 8073df0:	ecbd 8b02 	vpop	{d8}
 8073df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8073df8:	4b94      	ldr	r3, [pc, #592]	; (807404c <_dtoa_r+0x304>)
 8073dfa:	9300      	str	r3, [sp, #0]
 8073dfc:	3303      	adds	r3, #3
 8073dfe:	e7f3      	b.n	8073de8 <_dtoa_r+0xa0>
 8073e00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8073e04:	2200      	movs	r2, #0
 8073e06:	ec51 0b17 	vmov	r0, r1, d7
 8073e0a:	2300      	movs	r3, #0
 8073e0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8073e10:	f7ec fe72 	bl	8060af8 <__aeabi_dcmpeq>
 8073e14:	4680      	mov	r8, r0
 8073e16:	b158      	cbz	r0, 8073e30 <_dtoa_r+0xe8>
 8073e18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8073e1a:	2301      	movs	r3, #1
 8073e1c:	6013      	str	r3, [r2, #0]
 8073e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8073e20:	2b00      	cmp	r3, #0
 8073e22:	f000 8551 	beq.w	80748c8 <_dtoa_r+0xb80>
 8073e26:	488b      	ldr	r0, [pc, #556]	; (8074054 <_dtoa_r+0x30c>)
 8073e28:	6018      	str	r0, [r3, #0]
 8073e2a:	1e43      	subs	r3, r0, #1
 8073e2c:	9300      	str	r3, [sp, #0]
 8073e2e:	e7dd      	b.n	8073dec <_dtoa_r+0xa4>
 8073e30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8073e34:	aa12      	add	r2, sp, #72	; 0x48
 8073e36:	a913      	add	r1, sp, #76	; 0x4c
 8073e38:	4620      	mov	r0, r4
 8073e3a:	f001 fdc7 	bl	80759cc <__d2b>
 8073e3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8073e42:	4683      	mov	fp, r0
 8073e44:	2d00      	cmp	r5, #0
 8073e46:	d07c      	beq.n	8073f42 <_dtoa_r+0x1fa>
 8073e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8073e4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8073e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8073e52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8073e56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8073e5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8073e5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8073e62:	4b7d      	ldr	r3, [pc, #500]	; (8074058 <_dtoa_r+0x310>)
 8073e64:	2200      	movs	r2, #0
 8073e66:	4630      	mov	r0, r6
 8073e68:	4639      	mov	r1, r7
 8073e6a:	f7ec fa25 	bl	80602b8 <__aeabi_dsub>
 8073e6e:	a36e      	add	r3, pc, #440	; (adr r3, 8074028 <_dtoa_r+0x2e0>)
 8073e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8073e74:	f7ec fbd8 	bl	8060628 <__aeabi_dmul>
 8073e78:	a36d      	add	r3, pc, #436	; (adr r3, 8074030 <_dtoa_r+0x2e8>)
 8073e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8073e7e:	f7ec fa1d 	bl	80602bc <__adddf3>
 8073e82:	4606      	mov	r6, r0
 8073e84:	4628      	mov	r0, r5
 8073e86:	460f      	mov	r7, r1
 8073e88:	f7ec fb64 	bl	8060554 <__aeabi_i2d>
 8073e8c:	a36a      	add	r3, pc, #424	; (adr r3, 8074038 <_dtoa_r+0x2f0>)
 8073e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8073e92:	f7ec fbc9 	bl	8060628 <__aeabi_dmul>
 8073e96:	4602      	mov	r2, r0
 8073e98:	460b      	mov	r3, r1
 8073e9a:	4630      	mov	r0, r6
 8073e9c:	4639      	mov	r1, r7
 8073e9e:	f7ec fa0d 	bl	80602bc <__adddf3>
 8073ea2:	4606      	mov	r6, r0
 8073ea4:	460f      	mov	r7, r1
 8073ea6:	f7ec fe6f 	bl	8060b88 <__aeabi_d2iz>
 8073eaa:	2200      	movs	r2, #0
 8073eac:	4682      	mov	sl, r0
 8073eae:	2300      	movs	r3, #0
 8073eb0:	4630      	mov	r0, r6
 8073eb2:	4639      	mov	r1, r7
 8073eb4:	f7ec fe2a 	bl	8060b0c <__aeabi_dcmplt>
 8073eb8:	b148      	cbz	r0, 8073ece <_dtoa_r+0x186>
 8073eba:	4650      	mov	r0, sl
 8073ebc:	f7ec fb4a 	bl	8060554 <__aeabi_i2d>
 8073ec0:	4632      	mov	r2, r6
 8073ec2:	463b      	mov	r3, r7
 8073ec4:	f7ec fe18 	bl	8060af8 <__aeabi_dcmpeq>
 8073ec8:	b908      	cbnz	r0, 8073ece <_dtoa_r+0x186>
 8073eca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8073ece:	f1ba 0f16 	cmp.w	sl, #22
 8073ed2:	d854      	bhi.n	8073f7e <_dtoa_r+0x236>
 8073ed4:	4b61      	ldr	r3, [pc, #388]	; (807405c <_dtoa_r+0x314>)
 8073ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8073eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8073ede:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8073ee2:	f7ec fe13 	bl	8060b0c <__aeabi_dcmplt>
 8073ee6:	2800      	cmp	r0, #0
 8073ee8:	d04b      	beq.n	8073f82 <_dtoa_r+0x23a>
 8073eea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8073eee:	2300      	movs	r3, #0
 8073ef0:	930e      	str	r3, [sp, #56]	; 0x38
 8073ef2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8073ef4:	1b5d      	subs	r5, r3, r5
 8073ef6:	1e6b      	subs	r3, r5, #1
 8073ef8:	9304      	str	r3, [sp, #16]
 8073efa:	bf43      	ittte	mi
 8073efc:	2300      	movmi	r3, #0
 8073efe:	f1c5 0801 	rsbmi	r8, r5, #1
 8073f02:	9304      	strmi	r3, [sp, #16]
 8073f04:	f04f 0800 	movpl.w	r8, #0
 8073f08:	f1ba 0f00 	cmp.w	sl, #0
 8073f0c:	db3b      	blt.n	8073f86 <_dtoa_r+0x23e>
 8073f0e:	9b04      	ldr	r3, [sp, #16]
 8073f10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8073f14:	4453      	add	r3, sl
 8073f16:	9304      	str	r3, [sp, #16]
 8073f18:	2300      	movs	r3, #0
 8073f1a:	9306      	str	r3, [sp, #24]
 8073f1c:	9b05      	ldr	r3, [sp, #20]
 8073f1e:	2b09      	cmp	r3, #9
 8073f20:	d869      	bhi.n	8073ff6 <_dtoa_r+0x2ae>
 8073f22:	2b05      	cmp	r3, #5
 8073f24:	bfc4      	itt	gt
 8073f26:	3b04      	subgt	r3, #4
 8073f28:	9305      	strgt	r3, [sp, #20]
 8073f2a:	9b05      	ldr	r3, [sp, #20]
 8073f2c:	f1a3 0302 	sub.w	r3, r3, #2
 8073f30:	bfcc      	ite	gt
 8073f32:	2500      	movgt	r5, #0
 8073f34:	2501      	movle	r5, #1
 8073f36:	2b03      	cmp	r3, #3
 8073f38:	d869      	bhi.n	807400e <_dtoa_r+0x2c6>
 8073f3a:	e8df f003 	tbb	[pc, r3]
 8073f3e:	4e2c      	.short	0x4e2c
 8073f40:	5a4c      	.short	0x5a4c
 8073f42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8073f46:	441d      	add	r5, r3
 8073f48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8073f4c:	2b20      	cmp	r3, #32
 8073f4e:	bfc1      	itttt	gt
 8073f50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8073f54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8073f58:	fa09 f303 	lslgt.w	r3, r9, r3
 8073f5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8073f60:	bfda      	itte	le
 8073f62:	f1c3 0320 	rsble	r3, r3, #32
 8073f66:	fa06 f003 	lslle.w	r0, r6, r3
 8073f6a:	4318      	orrgt	r0, r3
 8073f6c:	f7ec fae2 	bl	8060534 <__aeabi_ui2d>
 8073f70:	2301      	movs	r3, #1
 8073f72:	4606      	mov	r6, r0
 8073f74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8073f78:	3d01      	subs	r5, #1
 8073f7a:	9310      	str	r3, [sp, #64]	; 0x40
 8073f7c:	e771      	b.n	8073e62 <_dtoa_r+0x11a>
 8073f7e:	2301      	movs	r3, #1
 8073f80:	e7b6      	b.n	8073ef0 <_dtoa_r+0x1a8>
 8073f82:	900e      	str	r0, [sp, #56]	; 0x38
 8073f84:	e7b5      	b.n	8073ef2 <_dtoa_r+0x1aa>
 8073f86:	f1ca 0300 	rsb	r3, sl, #0
 8073f8a:	9306      	str	r3, [sp, #24]
 8073f8c:	2300      	movs	r3, #0
 8073f8e:	eba8 080a 	sub.w	r8, r8, sl
 8073f92:	930d      	str	r3, [sp, #52]	; 0x34
 8073f94:	e7c2      	b.n	8073f1c <_dtoa_r+0x1d4>
 8073f96:	2300      	movs	r3, #0
 8073f98:	9308      	str	r3, [sp, #32]
 8073f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073f9c:	2b00      	cmp	r3, #0
 8073f9e:	dc39      	bgt.n	8074014 <_dtoa_r+0x2cc>
 8073fa0:	f04f 0901 	mov.w	r9, #1
 8073fa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8073fa8:	464b      	mov	r3, r9
 8073faa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8073fae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8073fb0:	2200      	movs	r2, #0
 8073fb2:	6042      	str	r2, [r0, #4]
 8073fb4:	2204      	movs	r2, #4
 8073fb6:	f102 0614 	add.w	r6, r2, #20
 8073fba:	429e      	cmp	r6, r3
 8073fbc:	6841      	ldr	r1, [r0, #4]
 8073fbe:	d92f      	bls.n	8074020 <_dtoa_r+0x2d8>
 8073fc0:	4620      	mov	r0, r4
 8073fc2:	f001 f91b 	bl	80751fc <_Balloc>
 8073fc6:	9000      	str	r0, [sp, #0]
 8073fc8:	2800      	cmp	r0, #0
 8073fca:	d14b      	bne.n	8074064 <_dtoa_r+0x31c>
 8073fcc:	4b24      	ldr	r3, [pc, #144]	; (8074060 <_dtoa_r+0x318>)
 8073fce:	4602      	mov	r2, r0
 8073fd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8073fd4:	e6d1      	b.n	8073d7a <_dtoa_r+0x32>
 8073fd6:	2301      	movs	r3, #1
 8073fd8:	e7de      	b.n	8073f98 <_dtoa_r+0x250>
 8073fda:	2300      	movs	r3, #0
 8073fdc:	9308      	str	r3, [sp, #32]
 8073fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073fe0:	eb0a 0903 	add.w	r9, sl, r3
 8073fe4:	f109 0301 	add.w	r3, r9, #1
 8073fe8:	2b01      	cmp	r3, #1
 8073fea:	9301      	str	r3, [sp, #4]
 8073fec:	bfb8      	it	lt
 8073fee:	2301      	movlt	r3, #1
 8073ff0:	e7dd      	b.n	8073fae <_dtoa_r+0x266>
 8073ff2:	2301      	movs	r3, #1
 8073ff4:	e7f2      	b.n	8073fdc <_dtoa_r+0x294>
 8073ff6:	2501      	movs	r5, #1
 8073ff8:	2300      	movs	r3, #0
 8073ffa:	9305      	str	r3, [sp, #20]
 8073ffc:	9508      	str	r5, [sp, #32]
 8073ffe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8074002:	2200      	movs	r2, #0
 8074004:	f8cd 9004 	str.w	r9, [sp, #4]
 8074008:	2312      	movs	r3, #18
 807400a:	9209      	str	r2, [sp, #36]	; 0x24
 807400c:	e7cf      	b.n	8073fae <_dtoa_r+0x266>
 807400e:	2301      	movs	r3, #1
 8074010:	9308      	str	r3, [sp, #32]
 8074012:	e7f4      	b.n	8073ffe <_dtoa_r+0x2b6>
 8074014:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8074018:	f8cd 9004 	str.w	r9, [sp, #4]
 807401c:	464b      	mov	r3, r9
 807401e:	e7c6      	b.n	8073fae <_dtoa_r+0x266>
 8074020:	3101      	adds	r1, #1
 8074022:	6041      	str	r1, [r0, #4]
 8074024:	0052      	lsls	r2, r2, #1
 8074026:	e7c6      	b.n	8073fb6 <_dtoa_r+0x26e>
 8074028:	636f4361 	.word	0x636f4361
 807402c:	3fd287a7 	.word	0x3fd287a7
 8074030:	8b60c8b3 	.word	0x8b60c8b3
 8074034:	3fc68a28 	.word	0x3fc68a28
 8074038:	509f79fb 	.word	0x509f79fb
 807403c:	3fd34413 	.word	0x3fd34413
 8074040:	0807708e 	.word	0x0807708e
 8074044:	080770a5 	.word	0x080770a5
 8074048:	7ff00000 	.word	0x7ff00000
 807404c:	0807708a 	.word	0x0807708a
 8074050:	08077081 	.word	0x08077081
 8074054:	08076f05 	.word	0x08076f05
 8074058:	3ff80000 	.word	0x3ff80000
 807405c:	08077220 	.word	0x08077220
 8074060:	08077104 	.word	0x08077104
 8074064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8074066:	9a00      	ldr	r2, [sp, #0]
 8074068:	601a      	str	r2, [r3, #0]
 807406a:	9b01      	ldr	r3, [sp, #4]
 807406c:	2b0e      	cmp	r3, #14
 807406e:	f200 80ad 	bhi.w	80741cc <_dtoa_r+0x484>
 8074072:	2d00      	cmp	r5, #0
 8074074:	f000 80aa 	beq.w	80741cc <_dtoa_r+0x484>
 8074078:	f1ba 0f00 	cmp.w	sl, #0
 807407c:	dd36      	ble.n	80740ec <_dtoa_r+0x3a4>
 807407e:	4ac3      	ldr	r2, [pc, #780]	; (807438c <_dtoa_r+0x644>)
 8074080:	f00a 030f 	and.w	r3, sl, #15
 8074084:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8074088:	ed93 7b00 	vldr	d7, [r3]
 807408c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8074090:	ea4f 172a 	mov.w	r7, sl, asr #4
 8074094:	eeb0 8a47 	vmov.f32	s16, s14
 8074098:	eef0 8a67 	vmov.f32	s17, s15
 807409c:	d016      	beq.n	80740cc <_dtoa_r+0x384>
 807409e:	4bbc      	ldr	r3, [pc, #752]	; (8074390 <_dtoa_r+0x648>)
 80740a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80740a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80740a8:	f7ec fbe8 	bl	806087c <__aeabi_ddiv>
 80740ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80740b0:	f007 070f 	and.w	r7, r7, #15
 80740b4:	2503      	movs	r5, #3
 80740b6:	4eb6      	ldr	r6, [pc, #728]	; (8074390 <_dtoa_r+0x648>)
 80740b8:	b957      	cbnz	r7, 80740d0 <_dtoa_r+0x388>
 80740ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80740be:	ec53 2b18 	vmov	r2, r3, d8
 80740c2:	f7ec fbdb 	bl	806087c <__aeabi_ddiv>
 80740c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80740ca:	e029      	b.n	8074120 <_dtoa_r+0x3d8>
 80740cc:	2502      	movs	r5, #2
 80740ce:	e7f2      	b.n	80740b6 <_dtoa_r+0x36e>
 80740d0:	07f9      	lsls	r1, r7, #31
 80740d2:	d508      	bpl.n	80740e6 <_dtoa_r+0x39e>
 80740d4:	ec51 0b18 	vmov	r0, r1, d8
 80740d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80740dc:	f7ec faa4 	bl	8060628 <__aeabi_dmul>
 80740e0:	ec41 0b18 	vmov	d8, r0, r1
 80740e4:	3501      	adds	r5, #1
 80740e6:	107f      	asrs	r7, r7, #1
 80740e8:	3608      	adds	r6, #8
 80740ea:	e7e5      	b.n	80740b8 <_dtoa_r+0x370>
 80740ec:	f000 80a6 	beq.w	807423c <_dtoa_r+0x4f4>
 80740f0:	f1ca 0600 	rsb	r6, sl, #0
 80740f4:	4ba5      	ldr	r3, [pc, #660]	; (807438c <_dtoa_r+0x644>)
 80740f6:	4fa6      	ldr	r7, [pc, #664]	; (8074390 <_dtoa_r+0x648>)
 80740f8:	f006 020f 	and.w	r2, r6, #15
 80740fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8074100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8074104:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8074108:	f7ec fa8e 	bl	8060628 <__aeabi_dmul>
 807410c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8074110:	1136      	asrs	r6, r6, #4
 8074112:	2300      	movs	r3, #0
 8074114:	2502      	movs	r5, #2
 8074116:	2e00      	cmp	r6, #0
 8074118:	f040 8085 	bne.w	8074226 <_dtoa_r+0x4de>
 807411c:	2b00      	cmp	r3, #0
 807411e:	d1d2      	bne.n	80740c6 <_dtoa_r+0x37e>
 8074120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8074122:	2b00      	cmp	r3, #0
 8074124:	f000 808c 	beq.w	8074240 <_dtoa_r+0x4f8>
 8074128:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 807412c:	4b99      	ldr	r3, [pc, #612]	; (8074394 <_dtoa_r+0x64c>)
 807412e:	2200      	movs	r2, #0
 8074130:	4630      	mov	r0, r6
 8074132:	4639      	mov	r1, r7
 8074134:	f7ec fcea 	bl	8060b0c <__aeabi_dcmplt>
 8074138:	2800      	cmp	r0, #0
 807413a:	f000 8081 	beq.w	8074240 <_dtoa_r+0x4f8>
 807413e:	9b01      	ldr	r3, [sp, #4]
 8074140:	2b00      	cmp	r3, #0
 8074142:	d07d      	beq.n	8074240 <_dtoa_r+0x4f8>
 8074144:	f1b9 0f00 	cmp.w	r9, #0
 8074148:	dd3c      	ble.n	80741c4 <_dtoa_r+0x47c>
 807414a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 807414e:	9307      	str	r3, [sp, #28]
 8074150:	2200      	movs	r2, #0
 8074152:	4b91      	ldr	r3, [pc, #580]	; (8074398 <_dtoa_r+0x650>)
 8074154:	4630      	mov	r0, r6
 8074156:	4639      	mov	r1, r7
 8074158:	f7ec fa66 	bl	8060628 <__aeabi_dmul>
 807415c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8074160:	3501      	adds	r5, #1
 8074162:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8074166:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 807416a:	4628      	mov	r0, r5
 807416c:	f7ec f9f2 	bl	8060554 <__aeabi_i2d>
 8074170:	4632      	mov	r2, r6
 8074172:	463b      	mov	r3, r7
 8074174:	f7ec fa58 	bl	8060628 <__aeabi_dmul>
 8074178:	4b88      	ldr	r3, [pc, #544]	; (807439c <_dtoa_r+0x654>)
 807417a:	2200      	movs	r2, #0
 807417c:	f7ec f89e 	bl	80602bc <__adddf3>
 8074180:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8074184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8074188:	9303      	str	r3, [sp, #12]
 807418a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 807418c:	2b00      	cmp	r3, #0
 807418e:	d15c      	bne.n	807424a <_dtoa_r+0x502>
 8074190:	4b83      	ldr	r3, [pc, #524]	; (80743a0 <_dtoa_r+0x658>)
 8074192:	2200      	movs	r2, #0
 8074194:	4630      	mov	r0, r6
 8074196:	4639      	mov	r1, r7
 8074198:	f7ec f88e 	bl	80602b8 <__aeabi_dsub>
 807419c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80741a0:	4606      	mov	r6, r0
 80741a2:	460f      	mov	r7, r1
 80741a4:	f7ec fcd0 	bl	8060b48 <__aeabi_dcmpgt>
 80741a8:	2800      	cmp	r0, #0
 80741aa:	f040 8296 	bne.w	80746da <_dtoa_r+0x992>
 80741ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80741b2:	4630      	mov	r0, r6
 80741b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80741b8:	4639      	mov	r1, r7
 80741ba:	f7ec fca7 	bl	8060b0c <__aeabi_dcmplt>
 80741be:	2800      	cmp	r0, #0
 80741c0:	f040 8288 	bne.w	80746d4 <_dtoa_r+0x98c>
 80741c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80741c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80741cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80741ce:	2b00      	cmp	r3, #0
 80741d0:	f2c0 8158 	blt.w	8074484 <_dtoa_r+0x73c>
 80741d4:	f1ba 0f0e 	cmp.w	sl, #14
 80741d8:	f300 8154 	bgt.w	8074484 <_dtoa_r+0x73c>
 80741dc:	4b6b      	ldr	r3, [pc, #428]	; (807438c <_dtoa_r+0x644>)
 80741de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80741e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80741e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80741e8:	2b00      	cmp	r3, #0
 80741ea:	f280 80e3 	bge.w	80743b4 <_dtoa_r+0x66c>
 80741ee:	9b01      	ldr	r3, [sp, #4]
 80741f0:	2b00      	cmp	r3, #0
 80741f2:	f300 80df 	bgt.w	80743b4 <_dtoa_r+0x66c>
 80741f6:	f040 826d 	bne.w	80746d4 <_dtoa_r+0x98c>
 80741fa:	4b69      	ldr	r3, [pc, #420]	; (80743a0 <_dtoa_r+0x658>)
 80741fc:	2200      	movs	r2, #0
 80741fe:	4640      	mov	r0, r8
 8074200:	4649      	mov	r1, r9
 8074202:	f7ec fa11 	bl	8060628 <__aeabi_dmul>
 8074206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 807420a:	f7ec fc93 	bl	8060b34 <__aeabi_dcmpge>
 807420e:	9e01      	ldr	r6, [sp, #4]
 8074210:	4637      	mov	r7, r6
 8074212:	2800      	cmp	r0, #0
 8074214:	f040 8243 	bne.w	807469e <_dtoa_r+0x956>
 8074218:	9d00      	ldr	r5, [sp, #0]
 807421a:	2331      	movs	r3, #49	; 0x31
 807421c:	f805 3b01 	strb.w	r3, [r5], #1
 8074220:	f10a 0a01 	add.w	sl, sl, #1
 8074224:	e23f      	b.n	80746a6 <_dtoa_r+0x95e>
 8074226:	07f2      	lsls	r2, r6, #31
 8074228:	d505      	bpl.n	8074236 <_dtoa_r+0x4ee>
 807422a:	e9d7 2300 	ldrd	r2, r3, [r7]
 807422e:	f7ec f9fb 	bl	8060628 <__aeabi_dmul>
 8074232:	3501      	adds	r5, #1
 8074234:	2301      	movs	r3, #1
 8074236:	1076      	asrs	r6, r6, #1
 8074238:	3708      	adds	r7, #8
 807423a:	e76c      	b.n	8074116 <_dtoa_r+0x3ce>
 807423c:	2502      	movs	r5, #2
 807423e:	e76f      	b.n	8074120 <_dtoa_r+0x3d8>
 8074240:	9b01      	ldr	r3, [sp, #4]
 8074242:	f8cd a01c 	str.w	sl, [sp, #28]
 8074246:	930c      	str	r3, [sp, #48]	; 0x30
 8074248:	e78d      	b.n	8074166 <_dtoa_r+0x41e>
 807424a:	9900      	ldr	r1, [sp, #0]
 807424c:	980c      	ldr	r0, [sp, #48]	; 0x30
 807424e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8074250:	4b4e      	ldr	r3, [pc, #312]	; (807438c <_dtoa_r+0x644>)
 8074252:	ed9d 7b02 	vldr	d7, [sp, #8]
 8074256:	4401      	add	r1, r0
 8074258:	9102      	str	r1, [sp, #8]
 807425a:	9908      	ldr	r1, [sp, #32]
 807425c:	eeb0 8a47 	vmov.f32	s16, s14
 8074260:	eef0 8a67 	vmov.f32	s17, s15
 8074264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8074268:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 807426c:	2900      	cmp	r1, #0
 807426e:	d045      	beq.n	80742fc <_dtoa_r+0x5b4>
 8074270:	494c      	ldr	r1, [pc, #304]	; (80743a4 <_dtoa_r+0x65c>)
 8074272:	2000      	movs	r0, #0
 8074274:	f7ec fb02 	bl	806087c <__aeabi_ddiv>
 8074278:	ec53 2b18 	vmov	r2, r3, d8
 807427c:	f7ec f81c 	bl	80602b8 <__aeabi_dsub>
 8074280:	9d00      	ldr	r5, [sp, #0]
 8074282:	ec41 0b18 	vmov	d8, r0, r1
 8074286:	4639      	mov	r1, r7
 8074288:	4630      	mov	r0, r6
 807428a:	f7ec fc7d 	bl	8060b88 <__aeabi_d2iz>
 807428e:	900c      	str	r0, [sp, #48]	; 0x30
 8074290:	f7ec f960 	bl	8060554 <__aeabi_i2d>
 8074294:	4602      	mov	r2, r0
 8074296:	460b      	mov	r3, r1
 8074298:	4630      	mov	r0, r6
 807429a:	4639      	mov	r1, r7
 807429c:	f7ec f80c 	bl	80602b8 <__aeabi_dsub>
 80742a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80742a2:	3330      	adds	r3, #48	; 0x30
 80742a4:	f805 3b01 	strb.w	r3, [r5], #1
 80742a8:	ec53 2b18 	vmov	r2, r3, d8
 80742ac:	4606      	mov	r6, r0
 80742ae:	460f      	mov	r7, r1
 80742b0:	f7ec fc2c 	bl	8060b0c <__aeabi_dcmplt>
 80742b4:	2800      	cmp	r0, #0
 80742b6:	d165      	bne.n	8074384 <_dtoa_r+0x63c>
 80742b8:	4632      	mov	r2, r6
 80742ba:	463b      	mov	r3, r7
 80742bc:	4935      	ldr	r1, [pc, #212]	; (8074394 <_dtoa_r+0x64c>)
 80742be:	2000      	movs	r0, #0
 80742c0:	f7eb fffa 	bl	80602b8 <__aeabi_dsub>
 80742c4:	ec53 2b18 	vmov	r2, r3, d8
 80742c8:	f7ec fc20 	bl	8060b0c <__aeabi_dcmplt>
 80742cc:	2800      	cmp	r0, #0
 80742ce:	f040 80b9 	bne.w	8074444 <_dtoa_r+0x6fc>
 80742d2:	9b02      	ldr	r3, [sp, #8]
 80742d4:	429d      	cmp	r5, r3
 80742d6:	f43f af75 	beq.w	80741c4 <_dtoa_r+0x47c>
 80742da:	4b2f      	ldr	r3, [pc, #188]	; (8074398 <_dtoa_r+0x650>)
 80742dc:	ec51 0b18 	vmov	r0, r1, d8
 80742e0:	2200      	movs	r2, #0
 80742e2:	f7ec f9a1 	bl	8060628 <__aeabi_dmul>
 80742e6:	4b2c      	ldr	r3, [pc, #176]	; (8074398 <_dtoa_r+0x650>)
 80742e8:	ec41 0b18 	vmov	d8, r0, r1
 80742ec:	2200      	movs	r2, #0
 80742ee:	4630      	mov	r0, r6
 80742f0:	4639      	mov	r1, r7
 80742f2:	f7ec f999 	bl	8060628 <__aeabi_dmul>
 80742f6:	4606      	mov	r6, r0
 80742f8:	460f      	mov	r7, r1
 80742fa:	e7c4      	b.n	8074286 <_dtoa_r+0x53e>
 80742fc:	ec51 0b17 	vmov	r0, r1, d7
 8074300:	f7ec f992 	bl	8060628 <__aeabi_dmul>
 8074304:	9b02      	ldr	r3, [sp, #8]
 8074306:	9d00      	ldr	r5, [sp, #0]
 8074308:	930c      	str	r3, [sp, #48]	; 0x30
 807430a:	ec41 0b18 	vmov	d8, r0, r1
 807430e:	4639      	mov	r1, r7
 8074310:	4630      	mov	r0, r6
 8074312:	f7ec fc39 	bl	8060b88 <__aeabi_d2iz>
 8074316:	9011      	str	r0, [sp, #68]	; 0x44
 8074318:	f7ec f91c 	bl	8060554 <__aeabi_i2d>
 807431c:	4602      	mov	r2, r0
 807431e:	460b      	mov	r3, r1
 8074320:	4630      	mov	r0, r6
 8074322:	4639      	mov	r1, r7
 8074324:	f7eb ffc8 	bl	80602b8 <__aeabi_dsub>
 8074328:	9b11      	ldr	r3, [sp, #68]	; 0x44
 807432a:	3330      	adds	r3, #48	; 0x30
 807432c:	f805 3b01 	strb.w	r3, [r5], #1
 8074330:	9b02      	ldr	r3, [sp, #8]
 8074332:	429d      	cmp	r5, r3
 8074334:	4606      	mov	r6, r0
 8074336:	460f      	mov	r7, r1
 8074338:	f04f 0200 	mov.w	r2, #0
 807433c:	d134      	bne.n	80743a8 <_dtoa_r+0x660>
 807433e:	4b19      	ldr	r3, [pc, #100]	; (80743a4 <_dtoa_r+0x65c>)
 8074340:	ec51 0b18 	vmov	r0, r1, d8
 8074344:	f7eb ffba 	bl	80602bc <__adddf3>
 8074348:	4602      	mov	r2, r0
 807434a:	460b      	mov	r3, r1
 807434c:	4630      	mov	r0, r6
 807434e:	4639      	mov	r1, r7
 8074350:	f7ec fbfa 	bl	8060b48 <__aeabi_dcmpgt>
 8074354:	2800      	cmp	r0, #0
 8074356:	d175      	bne.n	8074444 <_dtoa_r+0x6fc>
 8074358:	ec53 2b18 	vmov	r2, r3, d8
 807435c:	4911      	ldr	r1, [pc, #68]	; (80743a4 <_dtoa_r+0x65c>)
 807435e:	2000      	movs	r0, #0
 8074360:	f7eb ffaa 	bl	80602b8 <__aeabi_dsub>
 8074364:	4602      	mov	r2, r0
 8074366:	460b      	mov	r3, r1
 8074368:	4630      	mov	r0, r6
 807436a:	4639      	mov	r1, r7
 807436c:	f7ec fbce 	bl	8060b0c <__aeabi_dcmplt>
 8074370:	2800      	cmp	r0, #0
 8074372:	f43f af27 	beq.w	80741c4 <_dtoa_r+0x47c>
 8074376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8074378:	1e6b      	subs	r3, r5, #1
 807437a:	930c      	str	r3, [sp, #48]	; 0x30
 807437c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8074380:	2b30      	cmp	r3, #48	; 0x30
 8074382:	d0f8      	beq.n	8074376 <_dtoa_r+0x62e>
 8074384:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8074388:	e04a      	b.n	8074420 <_dtoa_r+0x6d8>
 807438a:	bf00      	nop
 807438c:	08077220 	.word	0x08077220
 8074390:	080771f8 	.word	0x080771f8
 8074394:	3ff00000 	.word	0x3ff00000
 8074398:	40240000 	.word	0x40240000
 807439c:	401c0000 	.word	0x401c0000
 80743a0:	40140000 	.word	0x40140000
 80743a4:	3fe00000 	.word	0x3fe00000
 80743a8:	4baf      	ldr	r3, [pc, #700]	; (8074668 <_dtoa_r+0x920>)
 80743aa:	f7ec f93d 	bl	8060628 <__aeabi_dmul>
 80743ae:	4606      	mov	r6, r0
 80743b0:	460f      	mov	r7, r1
 80743b2:	e7ac      	b.n	807430e <_dtoa_r+0x5c6>
 80743b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80743b8:	9d00      	ldr	r5, [sp, #0]
 80743ba:	4642      	mov	r2, r8
 80743bc:	464b      	mov	r3, r9
 80743be:	4630      	mov	r0, r6
 80743c0:	4639      	mov	r1, r7
 80743c2:	f7ec fa5b 	bl	806087c <__aeabi_ddiv>
 80743c6:	f7ec fbdf 	bl	8060b88 <__aeabi_d2iz>
 80743ca:	9002      	str	r0, [sp, #8]
 80743cc:	f7ec f8c2 	bl	8060554 <__aeabi_i2d>
 80743d0:	4642      	mov	r2, r8
 80743d2:	464b      	mov	r3, r9
 80743d4:	f7ec f928 	bl	8060628 <__aeabi_dmul>
 80743d8:	4602      	mov	r2, r0
 80743da:	460b      	mov	r3, r1
 80743dc:	4630      	mov	r0, r6
 80743de:	4639      	mov	r1, r7
 80743e0:	f7eb ff6a 	bl	80602b8 <__aeabi_dsub>
 80743e4:	9e02      	ldr	r6, [sp, #8]
 80743e6:	9f01      	ldr	r7, [sp, #4]
 80743e8:	3630      	adds	r6, #48	; 0x30
 80743ea:	f805 6b01 	strb.w	r6, [r5], #1
 80743ee:	9e00      	ldr	r6, [sp, #0]
 80743f0:	1bae      	subs	r6, r5, r6
 80743f2:	42b7      	cmp	r7, r6
 80743f4:	4602      	mov	r2, r0
 80743f6:	460b      	mov	r3, r1
 80743f8:	d137      	bne.n	807446a <_dtoa_r+0x722>
 80743fa:	f7eb ff5f 	bl	80602bc <__adddf3>
 80743fe:	4642      	mov	r2, r8
 8074400:	464b      	mov	r3, r9
 8074402:	4606      	mov	r6, r0
 8074404:	460f      	mov	r7, r1
 8074406:	f7ec fb9f 	bl	8060b48 <__aeabi_dcmpgt>
 807440a:	b9c8      	cbnz	r0, 8074440 <_dtoa_r+0x6f8>
 807440c:	4642      	mov	r2, r8
 807440e:	464b      	mov	r3, r9
 8074410:	4630      	mov	r0, r6
 8074412:	4639      	mov	r1, r7
 8074414:	f7ec fb70 	bl	8060af8 <__aeabi_dcmpeq>
 8074418:	b110      	cbz	r0, 8074420 <_dtoa_r+0x6d8>
 807441a:	9b02      	ldr	r3, [sp, #8]
 807441c:	07d9      	lsls	r1, r3, #31
 807441e:	d40f      	bmi.n	8074440 <_dtoa_r+0x6f8>
 8074420:	4620      	mov	r0, r4
 8074422:	4659      	mov	r1, fp
 8074424:	f000 ff2a 	bl	807527c <_Bfree>
 8074428:	2300      	movs	r3, #0
 807442a:	702b      	strb	r3, [r5, #0]
 807442c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 807442e:	f10a 0001 	add.w	r0, sl, #1
 8074432:	6018      	str	r0, [r3, #0]
 8074434:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8074436:	2b00      	cmp	r3, #0
 8074438:	f43f acd8 	beq.w	8073dec <_dtoa_r+0xa4>
 807443c:	601d      	str	r5, [r3, #0]
 807443e:	e4d5      	b.n	8073dec <_dtoa_r+0xa4>
 8074440:	f8cd a01c 	str.w	sl, [sp, #28]
 8074444:	462b      	mov	r3, r5
 8074446:	461d      	mov	r5, r3
 8074448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 807444c:	2a39      	cmp	r2, #57	; 0x39
 807444e:	d108      	bne.n	8074462 <_dtoa_r+0x71a>
 8074450:	9a00      	ldr	r2, [sp, #0]
 8074452:	429a      	cmp	r2, r3
 8074454:	d1f7      	bne.n	8074446 <_dtoa_r+0x6fe>
 8074456:	9a07      	ldr	r2, [sp, #28]
 8074458:	9900      	ldr	r1, [sp, #0]
 807445a:	3201      	adds	r2, #1
 807445c:	9207      	str	r2, [sp, #28]
 807445e:	2230      	movs	r2, #48	; 0x30
 8074460:	700a      	strb	r2, [r1, #0]
 8074462:	781a      	ldrb	r2, [r3, #0]
 8074464:	3201      	adds	r2, #1
 8074466:	701a      	strb	r2, [r3, #0]
 8074468:	e78c      	b.n	8074384 <_dtoa_r+0x63c>
 807446a:	4b7f      	ldr	r3, [pc, #508]	; (8074668 <_dtoa_r+0x920>)
 807446c:	2200      	movs	r2, #0
 807446e:	f7ec f8db 	bl	8060628 <__aeabi_dmul>
 8074472:	2200      	movs	r2, #0
 8074474:	2300      	movs	r3, #0
 8074476:	4606      	mov	r6, r0
 8074478:	460f      	mov	r7, r1
 807447a:	f7ec fb3d 	bl	8060af8 <__aeabi_dcmpeq>
 807447e:	2800      	cmp	r0, #0
 8074480:	d09b      	beq.n	80743ba <_dtoa_r+0x672>
 8074482:	e7cd      	b.n	8074420 <_dtoa_r+0x6d8>
 8074484:	9a08      	ldr	r2, [sp, #32]
 8074486:	2a00      	cmp	r2, #0
 8074488:	f000 80c4 	beq.w	8074614 <_dtoa_r+0x8cc>
 807448c:	9a05      	ldr	r2, [sp, #20]
 807448e:	2a01      	cmp	r2, #1
 8074490:	f300 80a8 	bgt.w	80745e4 <_dtoa_r+0x89c>
 8074494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8074496:	2a00      	cmp	r2, #0
 8074498:	f000 80a0 	beq.w	80745dc <_dtoa_r+0x894>
 807449c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80744a0:	9e06      	ldr	r6, [sp, #24]
 80744a2:	4645      	mov	r5, r8
 80744a4:	9a04      	ldr	r2, [sp, #16]
 80744a6:	2101      	movs	r1, #1
 80744a8:	441a      	add	r2, r3
 80744aa:	4620      	mov	r0, r4
 80744ac:	4498      	add	r8, r3
 80744ae:	9204      	str	r2, [sp, #16]
 80744b0:	f000 ffea 	bl	8075488 <__i2b>
 80744b4:	4607      	mov	r7, r0
 80744b6:	2d00      	cmp	r5, #0
 80744b8:	dd0b      	ble.n	80744d2 <_dtoa_r+0x78a>
 80744ba:	9b04      	ldr	r3, [sp, #16]
 80744bc:	2b00      	cmp	r3, #0
 80744be:	dd08      	ble.n	80744d2 <_dtoa_r+0x78a>
 80744c0:	42ab      	cmp	r3, r5
 80744c2:	9a04      	ldr	r2, [sp, #16]
 80744c4:	bfa8      	it	ge
 80744c6:	462b      	movge	r3, r5
 80744c8:	eba8 0803 	sub.w	r8, r8, r3
 80744cc:	1aed      	subs	r5, r5, r3
 80744ce:	1ad3      	subs	r3, r2, r3
 80744d0:	9304      	str	r3, [sp, #16]
 80744d2:	9b06      	ldr	r3, [sp, #24]
 80744d4:	b1fb      	cbz	r3, 8074516 <_dtoa_r+0x7ce>
 80744d6:	9b08      	ldr	r3, [sp, #32]
 80744d8:	2b00      	cmp	r3, #0
 80744da:	f000 809f 	beq.w	807461c <_dtoa_r+0x8d4>
 80744de:	2e00      	cmp	r6, #0
 80744e0:	dd11      	ble.n	8074506 <_dtoa_r+0x7be>
 80744e2:	4639      	mov	r1, r7
 80744e4:	4632      	mov	r2, r6
 80744e6:	4620      	mov	r0, r4
 80744e8:	f001 f88a 	bl	8075600 <__pow5mult>
 80744ec:	465a      	mov	r2, fp
 80744ee:	4601      	mov	r1, r0
 80744f0:	4607      	mov	r7, r0
 80744f2:	4620      	mov	r0, r4
 80744f4:	f000 ffde 	bl	80754b4 <__multiply>
 80744f8:	4659      	mov	r1, fp
 80744fa:	9007      	str	r0, [sp, #28]
 80744fc:	4620      	mov	r0, r4
 80744fe:	f000 febd 	bl	807527c <_Bfree>
 8074502:	9b07      	ldr	r3, [sp, #28]
 8074504:	469b      	mov	fp, r3
 8074506:	9b06      	ldr	r3, [sp, #24]
 8074508:	1b9a      	subs	r2, r3, r6
 807450a:	d004      	beq.n	8074516 <_dtoa_r+0x7ce>
 807450c:	4659      	mov	r1, fp
 807450e:	4620      	mov	r0, r4
 8074510:	f001 f876 	bl	8075600 <__pow5mult>
 8074514:	4683      	mov	fp, r0
 8074516:	2101      	movs	r1, #1
 8074518:	4620      	mov	r0, r4
 807451a:	f000 ffb5 	bl	8075488 <__i2b>
 807451e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8074520:	2b00      	cmp	r3, #0
 8074522:	4606      	mov	r6, r0
 8074524:	dd7c      	ble.n	8074620 <_dtoa_r+0x8d8>
 8074526:	461a      	mov	r2, r3
 8074528:	4601      	mov	r1, r0
 807452a:	4620      	mov	r0, r4
 807452c:	f001 f868 	bl	8075600 <__pow5mult>
 8074530:	9b05      	ldr	r3, [sp, #20]
 8074532:	2b01      	cmp	r3, #1
 8074534:	4606      	mov	r6, r0
 8074536:	dd76      	ble.n	8074626 <_dtoa_r+0x8de>
 8074538:	2300      	movs	r3, #0
 807453a:	9306      	str	r3, [sp, #24]
 807453c:	6933      	ldr	r3, [r6, #16]
 807453e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8074542:	6918      	ldr	r0, [r3, #16]
 8074544:	f000 ff50 	bl	80753e8 <__hi0bits>
 8074548:	f1c0 0020 	rsb	r0, r0, #32
 807454c:	9b04      	ldr	r3, [sp, #16]
 807454e:	4418      	add	r0, r3
 8074550:	f010 001f 	ands.w	r0, r0, #31
 8074554:	f000 8086 	beq.w	8074664 <_dtoa_r+0x91c>
 8074558:	f1c0 0320 	rsb	r3, r0, #32
 807455c:	2b04      	cmp	r3, #4
 807455e:	dd7f      	ble.n	8074660 <_dtoa_r+0x918>
 8074560:	f1c0 001c 	rsb	r0, r0, #28
 8074564:	9b04      	ldr	r3, [sp, #16]
 8074566:	4403      	add	r3, r0
 8074568:	4480      	add	r8, r0
 807456a:	4405      	add	r5, r0
 807456c:	9304      	str	r3, [sp, #16]
 807456e:	f1b8 0f00 	cmp.w	r8, #0
 8074572:	dd05      	ble.n	8074580 <_dtoa_r+0x838>
 8074574:	4659      	mov	r1, fp
 8074576:	4642      	mov	r2, r8
 8074578:	4620      	mov	r0, r4
 807457a:	f001 f89b 	bl	80756b4 <__lshift>
 807457e:	4683      	mov	fp, r0
 8074580:	9b04      	ldr	r3, [sp, #16]
 8074582:	2b00      	cmp	r3, #0
 8074584:	dd05      	ble.n	8074592 <_dtoa_r+0x84a>
 8074586:	4631      	mov	r1, r6
 8074588:	461a      	mov	r2, r3
 807458a:	4620      	mov	r0, r4
 807458c:	f001 f892 	bl	80756b4 <__lshift>
 8074590:	4606      	mov	r6, r0
 8074592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8074594:	2b00      	cmp	r3, #0
 8074596:	d069      	beq.n	807466c <_dtoa_r+0x924>
 8074598:	4631      	mov	r1, r6
 807459a:	4658      	mov	r0, fp
 807459c:	f001 f8f6 	bl	807578c <__mcmp>
 80745a0:	2800      	cmp	r0, #0
 80745a2:	da63      	bge.n	807466c <_dtoa_r+0x924>
 80745a4:	2300      	movs	r3, #0
 80745a6:	4659      	mov	r1, fp
 80745a8:	220a      	movs	r2, #10
 80745aa:	4620      	mov	r0, r4
 80745ac:	f000 fe88 	bl	80752c0 <__multadd>
 80745b0:	9b08      	ldr	r3, [sp, #32]
 80745b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80745b6:	4683      	mov	fp, r0
 80745b8:	2b00      	cmp	r3, #0
 80745ba:	f000 818f 	beq.w	80748dc <_dtoa_r+0xb94>
 80745be:	4639      	mov	r1, r7
 80745c0:	2300      	movs	r3, #0
 80745c2:	220a      	movs	r2, #10
 80745c4:	4620      	mov	r0, r4
 80745c6:	f000 fe7b 	bl	80752c0 <__multadd>
 80745ca:	f1b9 0f00 	cmp.w	r9, #0
 80745ce:	4607      	mov	r7, r0
 80745d0:	f300 808e 	bgt.w	80746f0 <_dtoa_r+0x9a8>
 80745d4:	9b05      	ldr	r3, [sp, #20]
 80745d6:	2b02      	cmp	r3, #2
 80745d8:	dc50      	bgt.n	807467c <_dtoa_r+0x934>
 80745da:	e089      	b.n	80746f0 <_dtoa_r+0x9a8>
 80745dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80745de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80745e2:	e75d      	b.n	80744a0 <_dtoa_r+0x758>
 80745e4:	9b01      	ldr	r3, [sp, #4]
 80745e6:	1e5e      	subs	r6, r3, #1
 80745e8:	9b06      	ldr	r3, [sp, #24]
 80745ea:	42b3      	cmp	r3, r6
 80745ec:	bfbf      	itttt	lt
 80745ee:	9b06      	ldrlt	r3, [sp, #24]
 80745f0:	9606      	strlt	r6, [sp, #24]
 80745f2:	1af2      	sublt	r2, r6, r3
 80745f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80745f6:	bfb6      	itet	lt
 80745f8:	189b      	addlt	r3, r3, r2
 80745fa:	1b9e      	subge	r6, r3, r6
 80745fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80745fe:	9b01      	ldr	r3, [sp, #4]
 8074600:	bfb8      	it	lt
 8074602:	2600      	movlt	r6, #0
 8074604:	2b00      	cmp	r3, #0
 8074606:	bfb5      	itete	lt
 8074608:	eba8 0503 	sublt.w	r5, r8, r3
 807460c:	9b01      	ldrge	r3, [sp, #4]
 807460e:	2300      	movlt	r3, #0
 8074610:	4645      	movge	r5, r8
 8074612:	e747      	b.n	80744a4 <_dtoa_r+0x75c>
 8074614:	9e06      	ldr	r6, [sp, #24]
 8074616:	9f08      	ldr	r7, [sp, #32]
 8074618:	4645      	mov	r5, r8
 807461a:	e74c      	b.n	80744b6 <_dtoa_r+0x76e>
 807461c:	9a06      	ldr	r2, [sp, #24]
 807461e:	e775      	b.n	807450c <_dtoa_r+0x7c4>
 8074620:	9b05      	ldr	r3, [sp, #20]
 8074622:	2b01      	cmp	r3, #1
 8074624:	dc18      	bgt.n	8074658 <_dtoa_r+0x910>
 8074626:	9b02      	ldr	r3, [sp, #8]
 8074628:	b9b3      	cbnz	r3, 8074658 <_dtoa_r+0x910>
 807462a:	9b03      	ldr	r3, [sp, #12]
 807462c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8074630:	b9a3      	cbnz	r3, 807465c <_dtoa_r+0x914>
 8074632:	9b03      	ldr	r3, [sp, #12]
 8074634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8074638:	0d1b      	lsrs	r3, r3, #20
 807463a:	051b      	lsls	r3, r3, #20
 807463c:	b12b      	cbz	r3, 807464a <_dtoa_r+0x902>
 807463e:	9b04      	ldr	r3, [sp, #16]
 8074640:	3301      	adds	r3, #1
 8074642:	9304      	str	r3, [sp, #16]
 8074644:	f108 0801 	add.w	r8, r8, #1
 8074648:	2301      	movs	r3, #1
 807464a:	9306      	str	r3, [sp, #24]
 807464c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 807464e:	2b00      	cmp	r3, #0
 8074650:	f47f af74 	bne.w	807453c <_dtoa_r+0x7f4>
 8074654:	2001      	movs	r0, #1
 8074656:	e779      	b.n	807454c <_dtoa_r+0x804>
 8074658:	2300      	movs	r3, #0
 807465a:	e7f6      	b.n	807464a <_dtoa_r+0x902>
 807465c:	9b02      	ldr	r3, [sp, #8]
 807465e:	e7f4      	b.n	807464a <_dtoa_r+0x902>
 8074660:	d085      	beq.n	807456e <_dtoa_r+0x826>
 8074662:	4618      	mov	r0, r3
 8074664:	301c      	adds	r0, #28
 8074666:	e77d      	b.n	8074564 <_dtoa_r+0x81c>
 8074668:	40240000 	.word	0x40240000
 807466c:	9b01      	ldr	r3, [sp, #4]
 807466e:	2b00      	cmp	r3, #0
 8074670:	dc38      	bgt.n	80746e4 <_dtoa_r+0x99c>
 8074672:	9b05      	ldr	r3, [sp, #20]
 8074674:	2b02      	cmp	r3, #2
 8074676:	dd35      	ble.n	80746e4 <_dtoa_r+0x99c>
 8074678:	f8dd 9004 	ldr.w	r9, [sp, #4]
 807467c:	f1b9 0f00 	cmp.w	r9, #0
 8074680:	d10d      	bne.n	807469e <_dtoa_r+0x956>
 8074682:	4631      	mov	r1, r6
 8074684:	464b      	mov	r3, r9
 8074686:	2205      	movs	r2, #5
 8074688:	4620      	mov	r0, r4
 807468a:	f000 fe19 	bl	80752c0 <__multadd>
 807468e:	4601      	mov	r1, r0
 8074690:	4606      	mov	r6, r0
 8074692:	4658      	mov	r0, fp
 8074694:	f001 f87a 	bl	807578c <__mcmp>
 8074698:	2800      	cmp	r0, #0
 807469a:	f73f adbd 	bgt.w	8074218 <_dtoa_r+0x4d0>
 807469e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80746a0:	9d00      	ldr	r5, [sp, #0]
 80746a2:	ea6f 0a03 	mvn.w	sl, r3
 80746a6:	f04f 0800 	mov.w	r8, #0
 80746aa:	4631      	mov	r1, r6
 80746ac:	4620      	mov	r0, r4
 80746ae:	f000 fde5 	bl	807527c <_Bfree>
 80746b2:	2f00      	cmp	r7, #0
 80746b4:	f43f aeb4 	beq.w	8074420 <_dtoa_r+0x6d8>
 80746b8:	f1b8 0f00 	cmp.w	r8, #0
 80746bc:	d005      	beq.n	80746ca <_dtoa_r+0x982>
 80746be:	45b8      	cmp	r8, r7
 80746c0:	d003      	beq.n	80746ca <_dtoa_r+0x982>
 80746c2:	4641      	mov	r1, r8
 80746c4:	4620      	mov	r0, r4
 80746c6:	f000 fdd9 	bl	807527c <_Bfree>
 80746ca:	4639      	mov	r1, r7
 80746cc:	4620      	mov	r0, r4
 80746ce:	f000 fdd5 	bl	807527c <_Bfree>
 80746d2:	e6a5      	b.n	8074420 <_dtoa_r+0x6d8>
 80746d4:	2600      	movs	r6, #0
 80746d6:	4637      	mov	r7, r6
 80746d8:	e7e1      	b.n	807469e <_dtoa_r+0x956>
 80746da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80746dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80746e0:	4637      	mov	r7, r6
 80746e2:	e599      	b.n	8074218 <_dtoa_r+0x4d0>
 80746e4:	9b08      	ldr	r3, [sp, #32]
 80746e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80746ea:	2b00      	cmp	r3, #0
 80746ec:	f000 80fd 	beq.w	80748ea <_dtoa_r+0xba2>
 80746f0:	2d00      	cmp	r5, #0
 80746f2:	dd05      	ble.n	8074700 <_dtoa_r+0x9b8>
 80746f4:	4639      	mov	r1, r7
 80746f6:	462a      	mov	r2, r5
 80746f8:	4620      	mov	r0, r4
 80746fa:	f000 ffdb 	bl	80756b4 <__lshift>
 80746fe:	4607      	mov	r7, r0
 8074700:	9b06      	ldr	r3, [sp, #24]
 8074702:	2b00      	cmp	r3, #0
 8074704:	d05c      	beq.n	80747c0 <_dtoa_r+0xa78>
 8074706:	6879      	ldr	r1, [r7, #4]
 8074708:	4620      	mov	r0, r4
 807470a:	f000 fd77 	bl	80751fc <_Balloc>
 807470e:	4605      	mov	r5, r0
 8074710:	b928      	cbnz	r0, 807471e <_dtoa_r+0x9d6>
 8074712:	4b80      	ldr	r3, [pc, #512]	; (8074914 <_dtoa_r+0xbcc>)
 8074714:	4602      	mov	r2, r0
 8074716:	f240 21ea 	movw	r1, #746	; 0x2ea
 807471a:	f7ff bb2e 	b.w	8073d7a <_dtoa_r+0x32>
 807471e:	693a      	ldr	r2, [r7, #16]
 8074720:	3202      	adds	r2, #2
 8074722:	0092      	lsls	r2, r2, #2
 8074724:	f107 010c 	add.w	r1, r7, #12
 8074728:	300c      	adds	r0, #12
 807472a:	f7fd fbca 	bl	8071ec2 <memcpy>
 807472e:	2201      	movs	r2, #1
 8074730:	4629      	mov	r1, r5
 8074732:	4620      	mov	r0, r4
 8074734:	f000 ffbe 	bl	80756b4 <__lshift>
 8074738:	9b00      	ldr	r3, [sp, #0]
 807473a:	3301      	adds	r3, #1
 807473c:	9301      	str	r3, [sp, #4]
 807473e:	9b00      	ldr	r3, [sp, #0]
 8074740:	444b      	add	r3, r9
 8074742:	9307      	str	r3, [sp, #28]
 8074744:	9b02      	ldr	r3, [sp, #8]
 8074746:	f003 0301 	and.w	r3, r3, #1
 807474a:	46b8      	mov	r8, r7
 807474c:	9306      	str	r3, [sp, #24]
 807474e:	4607      	mov	r7, r0
 8074750:	9b01      	ldr	r3, [sp, #4]
 8074752:	4631      	mov	r1, r6
 8074754:	3b01      	subs	r3, #1
 8074756:	4658      	mov	r0, fp
 8074758:	9302      	str	r3, [sp, #8]
 807475a:	f7ff fa69 	bl	8073c30 <quorem>
 807475e:	4603      	mov	r3, r0
 8074760:	3330      	adds	r3, #48	; 0x30
 8074762:	9004      	str	r0, [sp, #16]
 8074764:	4641      	mov	r1, r8
 8074766:	4658      	mov	r0, fp
 8074768:	9308      	str	r3, [sp, #32]
 807476a:	f001 f80f 	bl	807578c <__mcmp>
 807476e:	463a      	mov	r2, r7
 8074770:	4681      	mov	r9, r0
 8074772:	4631      	mov	r1, r6
 8074774:	4620      	mov	r0, r4
 8074776:	f001 f825 	bl	80757c4 <__mdiff>
 807477a:	68c2      	ldr	r2, [r0, #12]
 807477c:	9b08      	ldr	r3, [sp, #32]
 807477e:	4605      	mov	r5, r0
 8074780:	bb02      	cbnz	r2, 80747c4 <_dtoa_r+0xa7c>
 8074782:	4601      	mov	r1, r0
 8074784:	4658      	mov	r0, fp
 8074786:	f001 f801 	bl	807578c <__mcmp>
 807478a:	9b08      	ldr	r3, [sp, #32]
 807478c:	4602      	mov	r2, r0
 807478e:	4629      	mov	r1, r5
 8074790:	4620      	mov	r0, r4
 8074792:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8074796:	f000 fd71 	bl	807527c <_Bfree>
 807479a:	9b05      	ldr	r3, [sp, #20]
 807479c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 807479e:	9d01      	ldr	r5, [sp, #4]
 80747a0:	ea43 0102 	orr.w	r1, r3, r2
 80747a4:	9b06      	ldr	r3, [sp, #24]
 80747a6:	430b      	orrs	r3, r1
 80747a8:	9b08      	ldr	r3, [sp, #32]
 80747aa:	d10d      	bne.n	80747c8 <_dtoa_r+0xa80>
 80747ac:	2b39      	cmp	r3, #57	; 0x39
 80747ae:	d029      	beq.n	8074804 <_dtoa_r+0xabc>
 80747b0:	f1b9 0f00 	cmp.w	r9, #0
 80747b4:	dd01      	ble.n	80747ba <_dtoa_r+0xa72>
 80747b6:	9b04      	ldr	r3, [sp, #16]
 80747b8:	3331      	adds	r3, #49	; 0x31
 80747ba:	9a02      	ldr	r2, [sp, #8]
 80747bc:	7013      	strb	r3, [r2, #0]
 80747be:	e774      	b.n	80746aa <_dtoa_r+0x962>
 80747c0:	4638      	mov	r0, r7
 80747c2:	e7b9      	b.n	8074738 <_dtoa_r+0x9f0>
 80747c4:	2201      	movs	r2, #1
 80747c6:	e7e2      	b.n	807478e <_dtoa_r+0xa46>
 80747c8:	f1b9 0f00 	cmp.w	r9, #0
 80747cc:	db06      	blt.n	80747dc <_dtoa_r+0xa94>
 80747ce:	9905      	ldr	r1, [sp, #20]
 80747d0:	ea41 0909 	orr.w	r9, r1, r9
 80747d4:	9906      	ldr	r1, [sp, #24]
 80747d6:	ea59 0101 	orrs.w	r1, r9, r1
 80747da:	d120      	bne.n	807481e <_dtoa_r+0xad6>
 80747dc:	2a00      	cmp	r2, #0
 80747de:	ddec      	ble.n	80747ba <_dtoa_r+0xa72>
 80747e0:	4659      	mov	r1, fp
 80747e2:	2201      	movs	r2, #1
 80747e4:	4620      	mov	r0, r4
 80747e6:	9301      	str	r3, [sp, #4]
 80747e8:	f000 ff64 	bl	80756b4 <__lshift>
 80747ec:	4631      	mov	r1, r6
 80747ee:	4683      	mov	fp, r0
 80747f0:	f000 ffcc 	bl	807578c <__mcmp>
 80747f4:	2800      	cmp	r0, #0
 80747f6:	9b01      	ldr	r3, [sp, #4]
 80747f8:	dc02      	bgt.n	8074800 <_dtoa_r+0xab8>
 80747fa:	d1de      	bne.n	80747ba <_dtoa_r+0xa72>
 80747fc:	07da      	lsls	r2, r3, #31
 80747fe:	d5dc      	bpl.n	80747ba <_dtoa_r+0xa72>
 8074800:	2b39      	cmp	r3, #57	; 0x39
 8074802:	d1d8      	bne.n	80747b6 <_dtoa_r+0xa6e>
 8074804:	9a02      	ldr	r2, [sp, #8]
 8074806:	2339      	movs	r3, #57	; 0x39
 8074808:	7013      	strb	r3, [r2, #0]
 807480a:	462b      	mov	r3, r5
 807480c:	461d      	mov	r5, r3
 807480e:	3b01      	subs	r3, #1
 8074810:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8074814:	2a39      	cmp	r2, #57	; 0x39
 8074816:	d050      	beq.n	80748ba <_dtoa_r+0xb72>
 8074818:	3201      	adds	r2, #1
 807481a:	701a      	strb	r2, [r3, #0]
 807481c:	e745      	b.n	80746aa <_dtoa_r+0x962>
 807481e:	2a00      	cmp	r2, #0
 8074820:	dd03      	ble.n	807482a <_dtoa_r+0xae2>
 8074822:	2b39      	cmp	r3, #57	; 0x39
 8074824:	d0ee      	beq.n	8074804 <_dtoa_r+0xabc>
 8074826:	3301      	adds	r3, #1
 8074828:	e7c7      	b.n	80747ba <_dtoa_r+0xa72>
 807482a:	9a01      	ldr	r2, [sp, #4]
 807482c:	9907      	ldr	r1, [sp, #28]
 807482e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8074832:	428a      	cmp	r2, r1
 8074834:	d02a      	beq.n	807488c <_dtoa_r+0xb44>
 8074836:	4659      	mov	r1, fp
 8074838:	2300      	movs	r3, #0
 807483a:	220a      	movs	r2, #10
 807483c:	4620      	mov	r0, r4
 807483e:	f000 fd3f 	bl	80752c0 <__multadd>
 8074842:	45b8      	cmp	r8, r7
 8074844:	4683      	mov	fp, r0
 8074846:	f04f 0300 	mov.w	r3, #0
 807484a:	f04f 020a 	mov.w	r2, #10
 807484e:	4641      	mov	r1, r8
 8074850:	4620      	mov	r0, r4
 8074852:	d107      	bne.n	8074864 <_dtoa_r+0xb1c>
 8074854:	f000 fd34 	bl	80752c0 <__multadd>
 8074858:	4680      	mov	r8, r0
 807485a:	4607      	mov	r7, r0
 807485c:	9b01      	ldr	r3, [sp, #4]
 807485e:	3301      	adds	r3, #1
 8074860:	9301      	str	r3, [sp, #4]
 8074862:	e775      	b.n	8074750 <_dtoa_r+0xa08>
 8074864:	f000 fd2c 	bl	80752c0 <__multadd>
 8074868:	4639      	mov	r1, r7
 807486a:	4680      	mov	r8, r0
 807486c:	2300      	movs	r3, #0
 807486e:	220a      	movs	r2, #10
 8074870:	4620      	mov	r0, r4
 8074872:	f000 fd25 	bl	80752c0 <__multadd>
 8074876:	4607      	mov	r7, r0
 8074878:	e7f0      	b.n	807485c <_dtoa_r+0xb14>
 807487a:	f1b9 0f00 	cmp.w	r9, #0
 807487e:	9a00      	ldr	r2, [sp, #0]
 8074880:	bfcc      	ite	gt
 8074882:	464d      	movgt	r5, r9
 8074884:	2501      	movle	r5, #1
 8074886:	4415      	add	r5, r2
 8074888:	f04f 0800 	mov.w	r8, #0
 807488c:	4659      	mov	r1, fp
 807488e:	2201      	movs	r2, #1
 8074890:	4620      	mov	r0, r4
 8074892:	9301      	str	r3, [sp, #4]
 8074894:	f000 ff0e 	bl	80756b4 <__lshift>
 8074898:	4631      	mov	r1, r6
 807489a:	4683      	mov	fp, r0
 807489c:	f000 ff76 	bl	807578c <__mcmp>
 80748a0:	2800      	cmp	r0, #0
 80748a2:	dcb2      	bgt.n	807480a <_dtoa_r+0xac2>
 80748a4:	d102      	bne.n	80748ac <_dtoa_r+0xb64>
 80748a6:	9b01      	ldr	r3, [sp, #4]
 80748a8:	07db      	lsls	r3, r3, #31
 80748aa:	d4ae      	bmi.n	807480a <_dtoa_r+0xac2>
 80748ac:	462b      	mov	r3, r5
 80748ae:	461d      	mov	r5, r3
 80748b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80748b4:	2a30      	cmp	r2, #48	; 0x30
 80748b6:	d0fa      	beq.n	80748ae <_dtoa_r+0xb66>
 80748b8:	e6f7      	b.n	80746aa <_dtoa_r+0x962>
 80748ba:	9a00      	ldr	r2, [sp, #0]
 80748bc:	429a      	cmp	r2, r3
 80748be:	d1a5      	bne.n	807480c <_dtoa_r+0xac4>
 80748c0:	f10a 0a01 	add.w	sl, sl, #1
 80748c4:	2331      	movs	r3, #49	; 0x31
 80748c6:	e779      	b.n	80747bc <_dtoa_r+0xa74>
 80748c8:	4b13      	ldr	r3, [pc, #76]	; (8074918 <_dtoa_r+0xbd0>)
 80748ca:	f7ff baaf 	b.w	8073e2c <_dtoa_r+0xe4>
 80748ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80748d0:	2b00      	cmp	r3, #0
 80748d2:	f47f aa86 	bne.w	8073de2 <_dtoa_r+0x9a>
 80748d6:	4b11      	ldr	r3, [pc, #68]	; (807491c <_dtoa_r+0xbd4>)
 80748d8:	f7ff baa8 	b.w	8073e2c <_dtoa_r+0xe4>
 80748dc:	f1b9 0f00 	cmp.w	r9, #0
 80748e0:	dc03      	bgt.n	80748ea <_dtoa_r+0xba2>
 80748e2:	9b05      	ldr	r3, [sp, #20]
 80748e4:	2b02      	cmp	r3, #2
 80748e6:	f73f aec9 	bgt.w	807467c <_dtoa_r+0x934>
 80748ea:	9d00      	ldr	r5, [sp, #0]
 80748ec:	4631      	mov	r1, r6
 80748ee:	4658      	mov	r0, fp
 80748f0:	f7ff f99e 	bl	8073c30 <quorem>
 80748f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80748f8:	f805 3b01 	strb.w	r3, [r5], #1
 80748fc:	9a00      	ldr	r2, [sp, #0]
 80748fe:	1aaa      	subs	r2, r5, r2
 8074900:	4591      	cmp	r9, r2
 8074902:	ddba      	ble.n	807487a <_dtoa_r+0xb32>
 8074904:	4659      	mov	r1, fp
 8074906:	2300      	movs	r3, #0
 8074908:	220a      	movs	r2, #10
 807490a:	4620      	mov	r0, r4
 807490c:	f000 fcd8 	bl	80752c0 <__multadd>
 8074910:	4683      	mov	fp, r0
 8074912:	e7eb      	b.n	80748ec <_dtoa_r+0xba4>
 8074914:	08077104 	.word	0x08077104
 8074918:	08076f04 	.word	0x08076f04
 807491c:	08077081 	.word	0x08077081

08074920 <__sflush_r>:
 8074920:	898a      	ldrh	r2, [r1, #12]
 8074922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8074926:	4605      	mov	r5, r0
 8074928:	0710      	lsls	r0, r2, #28
 807492a:	460c      	mov	r4, r1
 807492c:	d458      	bmi.n	80749e0 <__sflush_r+0xc0>
 807492e:	684b      	ldr	r3, [r1, #4]
 8074930:	2b00      	cmp	r3, #0
 8074932:	dc05      	bgt.n	8074940 <__sflush_r+0x20>
 8074934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8074936:	2b00      	cmp	r3, #0
 8074938:	dc02      	bgt.n	8074940 <__sflush_r+0x20>
 807493a:	2000      	movs	r0, #0
 807493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8074940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8074942:	2e00      	cmp	r6, #0
 8074944:	d0f9      	beq.n	807493a <__sflush_r+0x1a>
 8074946:	2300      	movs	r3, #0
 8074948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 807494c:	682f      	ldr	r7, [r5, #0]
 807494e:	602b      	str	r3, [r5, #0]
 8074950:	d032      	beq.n	80749b8 <__sflush_r+0x98>
 8074952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8074954:	89a3      	ldrh	r3, [r4, #12]
 8074956:	075a      	lsls	r2, r3, #29
 8074958:	d505      	bpl.n	8074966 <__sflush_r+0x46>
 807495a:	6863      	ldr	r3, [r4, #4]
 807495c:	1ac0      	subs	r0, r0, r3
 807495e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8074960:	b10b      	cbz	r3, 8074966 <__sflush_r+0x46>
 8074962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8074964:	1ac0      	subs	r0, r0, r3
 8074966:	2300      	movs	r3, #0
 8074968:	4602      	mov	r2, r0
 807496a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 807496c:	6a21      	ldr	r1, [r4, #32]
 807496e:	4628      	mov	r0, r5
 8074970:	47b0      	blx	r6
 8074972:	1c43      	adds	r3, r0, #1
 8074974:	89a3      	ldrh	r3, [r4, #12]
 8074976:	d106      	bne.n	8074986 <__sflush_r+0x66>
 8074978:	6829      	ldr	r1, [r5, #0]
 807497a:	291d      	cmp	r1, #29
 807497c:	d82c      	bhi.n	80749d8 <__sflush_r+0xb8>
 807497e:	4a2a      	ldr	r2, [pc, #168]	; (8074a28 <__sflush_r+0x108>)
 8074980:	40ca      	lsrs	r2, r1
 8074982:	07d6      	lsls	r6, r2, #31
 8074984:	d528      	bpl.n	80749d8 <__sflush_r+0xb8>
 8074986:	2200      	movs	r2, #0
 8074988:	6062      	str	r2, [r4, #4]
 807498a:	04d9      	lsls	r1, r3, #19
 807498c:	6922      	ldr	r2, [r4, #16]
 807498e:	6022      	str	r2, [r4, #0]
 8074990:	d504      	bpl.n	807499c <__sflush_r+0x7c>
 8074992:	1c42      	adds	r2, r0, #1
 8074994:	d101      	bne.n	807499a <__sflush_r+0x7a>
 8074996:	682b      	ldr	r3, [r5, #0]
 8074998:	b903      	cbnz	r3, 807499c <__sflush_r+0x7c>
 807499a:	6560      	str	r0, [r4, #84]	; 0x54
 807499c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 807499e:	602f      	str	r7, [r5, #0]
 80749a0:	2900      	cmp	r1, #0
 80749a2:	d0ca      	beq.n	807493a <__sflush_r+0x1a>
 80749a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80749a8:	4299      	cmp	r1, r3
 80749aa:	d002      	beq.n	80749b2 <__sflush_r+0x92>
 80749ac:	4628      	mov	r0, r5
 80749ae:	f001 f8ef 	bl	8075b90 <_free_r>
 80749b2:	2000      	movs	r0, #0
 80749b4:	6360      	str	r0, [r4, #52]	; 0x34
 80749b6:	e7c1      	b.n	807493c <__sflush_r+0x1c>
 80749b8:	6a21      	ldr	r1, [r4, #32]
 80749ba:	2301      	movs	r3, #1
 80749bc:	4628      	mov	r0, r5
 80749be:	47b0      	blx	r6
 80749c0:	1c41      	adds	r1, r0, #1
 80749c2:	d1c7      	bne.n	8074954 <__sflush_r+0x34>
 80749c4:	682b      	ldr	r3, [r5, #0]
 80749c6:	2b00      	cmp	r3, #0
 80749c8:	d0c4      	beq.n	8074954 <__sflush_r+0x34>
 80749ca:	2b1d      	cmp	r3, #29
 80749cc:	d001      	beq.n	80749d2 <__sflush_r+0xb2>
 80749ce:	2b16      	cmp	r3, #22
 80749d0:	d101      	bne.n	80749d6 <__sflush_r+0xb6>
 80749d2:	602f      	str	r7, [r5, #0]
 80749d4:	e7b1      	b.n	807493a <__sflush_r+0x1a>
 80749d6:	89a3      	ldrh	r3, [r4, #12]
 80749d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80749dc:	81a3      	strh	r3, [r4, #12]
 80749de:	e7ad      	b.n	807493c <__sflush_r+0x1c>
 80749e0:	690f      	ldr	r7, [r1, #16]
 80749e2:	2f00      	cmp	r7, #0
 80749e4:	d0a9      	beq.n	807493a <__sflush_r+0x1a>
 80749e6:	0793      	lsls	r3, r2, #30
 80749e8:	680e      	ldr	r6, [r1, #0]
 80749ea:	bf08      	it	eq
 80749ec:	694b      	ldreq	r3, [r1, #20]
 80749ee:	600f      	str	r7, [r1, #0]
 80749f0:	bf18      	it	ne
 80749f2:	2300      	movne	r3, #0
 80749f4:	eba6 0807 	sub.w	r8, r6, r7
 80749f8:	608b      	str	r3, [r1, #8]
 80749fa:	f1b8 0f00 	cmp.w	r8, #0
 80749fe:	dd9c      	ble.n	807493a <__sflush_r+0x1a>
 8074a00:	6a21      	ldr	r1, [r4, #32]
 8074a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8074a04:	4643      	mov	r3, r8
 8074a06:	463a      	mov	r2, r7
 8074a08:	4628      	mov	r0, r5
 8074a0a:	47b0      	blx	r6
 8074a0c:	2800      	cmp	r0, #0
 8074a0e:	dc06      	bgt.n	8074a1e <__sflush_r+0xfe>
 8074a10:	89a3      	ldrh	r3, [r4, #12]
 8074a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8074a16:	81a3      	strh	r3, [r4, #12]
 8074a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8074a1c:	e78e      	b.n	807493c <__sflush_r+0x1c>
 8074a1e:	4407      	add	r7, r0
 8074a20:	eba8 0800 	sub.w	r8, r8, r0
 8074a24:	e7e9      	b.n	80749fa <__sflush_r+0xda>
 8074a26:	bf00      	nop
 8074a28:	20400001 	.word	0x20400001

08074a2c <_fflush_r>:
 8074a2c:	b538      	push	{r3, r4, r5, lr}
 8074a2e:	690b      	ldr	r3, [r1, #16]
 8074a30:	4605      	mov	r5, r0
 8074a32:	460c      	mov	r4, r1
 8074a34:	b913      	cbnz	r3, 8074a3c <_fflush_r+0x10>
 8074a36:	2500      	movs	r5, #0
 8074a38:	4628      	mov	r0, r5
 8074a3a:	bd38      	pop	{r3, r4, r5, pc}
 8074a3c:	b118      	cbz	r0, 8074a46 <_fflush_r+0x1a>
 8074a3e:	6983      	ldr	r3, [r0, #24]
 8074a40:	b90b      	cbnz	r3, 8074a46 <_fflush_r+0x1a>
 8074a42:	f7fd f979 	bl	8071d38 <__sinit>
 8074a46:	4b14      	ldr	r3, [pc, #80]	; (8074a98 <_fflush_r+0x6c>)
 8074a48:	429c      	cmp	r4, r3
 8074a4a:	d11b      	bne.n	8074a84 <_fflush_r+0x58>
 8074a4c:	686c      	ldr	r4, [r5, #4]
 8074a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8074a52:	2b00      	cmp	r3, #0
 8074a54:	d0ef      	beq.n	8074a36 <_fflush_r+0xa>
 8074a56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8074a58:	07d0      	lsls	r0, r2, #31
 8074a5a:	d404      	bmi.n	8074a66 <_fflush_r+0x3a>
 8074a5c:	0599      	lsls	r1, r3, #22
 8074a5e:	d402      	bmi.n	8074a66 <_fflush_r+0x3a>
 8074a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8074a62:	f7fd fa2c 	bl	8071ebe <__retarget_lock_acquire_recursive>
 8074a66:	4628      	mov	r0, r5
 8074a68:	4621      	mov	r1, r4
 8074a6a:	f7ff ff59 	bl	8074920 <__sflush_r>
 8074a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8074a70:	07da      	lsls	r2, r3, #31
 8074a72:	4605      	mov	r5, r0
 8074a74:	d4e0      	bmi.n	8074a38 <_fflush_r+0xc>
 8074a76:	89a3      	ldrh	r3, [r4, #12]
 8074a78:	059b      	lsls	r3, r3, #22
 8074a7a:	d4dd      	bmi.n	8074a38 <_fflush_r+0xc>
 8074a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8074a7e:	f7fd fa1f 	bl	8071ec0 <__retarget_lock_release_recursive>
 8074a82:	e7d9      	b.n	8074a38 <_fflush_r+0xc>
 8074a84:	4b05      	ldr	r3, [pc, #20]	; (8074a9c <_fflush_r+0x70>)
 8074a86:	429c      	cmp	r4, r3
 8074a88:	d101      	bne.n	8074a8e <_fflush_r+0x62>
 8074a8a:	68ac      	ldr	r4, [r5, #8]
 8074a8c:	e7df      	b.n	8074a4e <_fflush_r+0x22>
 8074a8e:	4b04      	ldr	r3, [pc, #16]	; (8074aa0 <_fflush_r+0x74>)
 8074a90:	429c      	cmp	r4, r3
 8074a92:	bf08      	it	eq
 8074a94:	68ec      	ldreq	r4, [r5, #12]
 8074a96:	e7da      	b.n	8074a4e <_fflush_r+0x22>
 8074a98:	08076eb0 	.word	0x08076eb0
 8074a9c:	08076ed0 	.word	0x08076ed0
 8074aa0:	08076e90 	.word	0x08076e90

08074aa4 <rshift>:
 8074aa4:	6903      	ldr	r3, [r0, #16]
 8074aa6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8074aaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8074aae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8074ab2:	f100 0414 	add.w	r4, r0, #20
 8074ab6:	dd45      	ble.n	8074b44 <rshift+0xa0>
 8074ab8:	f011 011f 	ands.w	r1, r1, #31
 8074abc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8074ac0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8074ac4:	d10c      	bne.n	8074ae0 <rshift+0x3c>
 8074ac6:	f100 0710 	add.w	r7, r0, #16
 8074aca:	4629      	mov	r1, r5
 8074acc:	42b1      	cmp	r1, r6
 8074ace:	d334      	bcc.n	8074b3a <rshift+0x96>
 8074ad0:	1a9b      	subs	r3, r3, r2
 8074ad2:	009b      	lsls	r3, r3, #2
 8074ad4:	1eea      	subs	r2, r5, #3
 8074ad6:	4296      	cmp	r6, r2
 8074ad8:	bf38      	it	cc
 8074ada:	2300      	movcc	r3, #0
 8074adc:	4423      	add	r3, r4
 8074ade:	e015      	b.n	8074b0c <rshift+0x68>
 8074ae0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8074ae4:	f1c1 0820 	rsb	r8, r1, #32
 8074ae8:	40cf      	lsrs	r7, r1
 8074aea:	f105 0e04 	add.w	lr, r5, #4
 8074aee:	46a1      	mov	r9, r4
 8074af0:	4576      	cmp	r6, lr
 8074af2:	46f4      	mov	ip, lr
 8074af4:	d815      	bhi.n	8074b22 <rshift+0x7e>
 8074af6:	1a9b      	subs	r3, r3, r2
 8074af8:	009a      	lsls	r2, r3, #2
 8074afa:	3a04      	subs	r2, #4
 8074afc:	3501      	adds	r5, #1
 8074afe:	42ae      	cmp	r6, r5
 8074b00:	bf38      	it	cc
 8074b02:	2200      	movcc	r2, #0
 8074b04:	18a3      	adds	r3, r4, r2
 8074b06:	50a7      	str	r7, [r4, r2]
 8074b08:	b107      	cbz	r7, 8074b0c <rshift+0x68>
 8074b0a:	3304      	adds	r3, #4
 8074b0c:	1b1a      	subs	r2, r3, r4
 8074b0e:	42a3      	cmp	r3, r4
 8074b10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8074b14:	bf08      	it	eq
 8074b16:	2300      	moveq	r3, #0
 8074b18:	6102      	str	r2, [r0, #16]
 8074b1a:	bf08      	it	eq
 8074b1c:	6143      	streq	r3, [r0, #20]
 8074b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8074b22:	f8dc c000 	ldr.w	ip, [ip]
 8074b26:	fa0c fc08 	lsl.w	ip, ip, r8
 8074b2a:	ea4c 0707 	orr.w	r7, ip, r7
 8074b2e:	f849 7b04 	str.w	r7, [r9], #4
 8074b32:	f85e 7b04 	ldr.w	r7, [lr], #4
 8074b36:	40cf      	lsrs	r7, r1
 8074b38:	e7da      	b.n	8074af0 <rshift+0x4c>
 8074b3a:	f851 cb04 	ldr.w	ip, [r1], #4
 8074b3e:	f847 cf04 	str.w	ip, [r7, #4]!
 8074b42:	e7c3      	b.n	8074acc <rshift+0x28>
 8074b44:	4623      	mov	r3, r4
 8074b46:	e7e1      	b.n	8074b0c <rshift+0x68>

08074b48 <__hexdig_fun>:
 8074b48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8074b4c:	2b09      	cmp	r3, #9
 8074b4e:	d802      	bhi.n	8074b56 <__hexdig_fun+0xe>
 8074b50:	3820      	subs	r0, #32
 8074b52:	b2c0      	uxtb	r0, r0
 8074b54:	4770      	bx	lr
 8074b56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8074b5a:	2b05      	cmp	r3, #5
 8074b5c:	d801      	bhi.n	8074b62 <__hexdig_fun+0x1a>
 8074b5e:	3847      	subs	r0, #71	; 0x47
 8074b60:	e7f7      	b.n	8074b52 <__hexdig_fun+0xa>
 8074b62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8074b66:	2b05      	cmp	r3, #5
 8074b68:	d801      	bhi.n	8074b6e <__hexdig_fun+0x26>
 8074b6a:	3827      	subs	r0, #39	; 0x27
 8074b6c:	e7f1      	b.n	8074b52 <__hexdig_fun+0xa>
 8074b6e:	2000      	movs	r0, #0
 8074b70:	4770      	bx	lr
	...

08074b74 <__gethex>:
 8074b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8074b78:	ed2d 8b02 	vpush	{d8}
 8074b7c:	b089      	sub	sp, #36	; 0x24
 8074b7e:	ee08 0a10 	vmov	s16, r0
 8074b82:	9304      	str	r3, [sp, #16]
 8074b84:	4bbc      	ldr	r3, [pc, #752]	; (8074e78 <__gethex+0x304>)
 8074b86:	681b      	ldr	r3, [r3, #0]
 8074b88:	9301      	str	r3, [sp, #4]
 8074b8a:	4618      	mov	r0, r3
 8074b8c:	468b      	mov	fp, r1
 8074b8e:	4690      	mov	r8, r2
 8074b90:	f7eb fb30 	bl	80601f4 <strlen>
 8074b94:	9b01      	ldr	r3, [sp, #4]
 8074b96:	f8db 2000 	ldr.w	r2, [fp]
 8074b9a:	4403      	add	r3, r0
 8074b9c:	4682      	mov	sl, r0
 8074b9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8074ba2:	9305      	str	r3, [sp, #20]
 8074ba4:	1c93      	adds	r3, r2, #2
 8074ba6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8074baa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8074bae:	32fe      	adds	r2, #254	; 0xfe
 8074bb0:	18d1      	adds	r1, r2, r3
 8074bb2:	461f      	mov	r7, r3
 8074bb4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8074bb8:	9100      	str	r1, [sp, #0]
 8074bba:	2830      	cmp	r0, #48	; 0x30
 8074bbc:	d0f8      	beq.n	8074bb0 <__gethex+0x3c>
 8074bbe:	f7ff ffc3 	bl	8074b48 <__hexdig_fun>
 8074bc2:	4604      	mov	r4, r0
 8074bc4:	2800      	cmp	r0, #0
 8074bc6:	d13a      	bne.n	8074c3e <__gethex+0xca>
 8074bc8:	9901      	ldr	r1, [sp, #4]
 8074bca:	4652      	mov	r2, sl
 8074bcc:	4638      	mov	r0, r7
 8074bce:	f7fe f946 	bl	8072e5e <strncmp>
 8074bd2:	4605      	mov	r5, r0
 8074bd4:	2800      	cmp	r0, #0
 8074bd6:	d168      	bne.n	8074caa <__gethex+0x136>
 8074bd8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8074bdc:	eb07 060a 	add.w	r6, r7, sl
 8074be0:	f7ff ffb2 	bl	8074b48 <__hexdig_fun>
 8074be4:	2800      	cmp	r0, #0
 8074be6:	d062      	beq.n	8074cae <__gethex+0x13a>
 8074be8:	4633      	mov	r3, r6
 8074bea:	7818      	ldrb	r0, [r3, #0]
 8074bec:	2830      	cmp	r0, #48	; 0x30
 8074bee:	461f      	mov	r7, r3
 8074bf0:	f103 0301 	add.w	r3, r3, #1
 8074bf4:	d0f9      	beq.n	8074bea <__gethex+0x76>
 8074bf6:	f7ff ffa7 	bl	8074b48 <__hexdig_fun>
 8074bfa:	2301      	movs	r3, #1
 8074bfc:	fab0 f480 	clz	r4, r0
 8074c00:	0964      	lsrs	r4, r4, #5
 8074c02:	4635      	mov	r5, r6
 8074c04:	9300      	str	r3, [sp, #0]
 8074c06:	463a      	mov	r2, r7
 8074c08:	4616      	mov	r6, r2
 8074c0a:	3201      	adds	r2, #1
 8074c0c:	7830      	ldrb	r0, [r6, #0]
 8074c0e:	f7ff ff9b 	bl	8074b48 <__hexdig_fun>
 8074c12:	2800      	cmp	r0, #0
 8074c14:	d1f8      	bne.n	8074c08 <__gethex+0x94>
 8074c16:	9901      	ldr	r1, [sp, #4]
 8074c18:	4652      	mov	r2, sl
 8074c1a:	4630      	mov	r0, r6
 8074c1c:	f7fe f91f 	bl	8072e5e <strncmp>
 8074c20:	b980      	cbnz	r0, 8074c44 <__gethex+0xd0>
 8074c22:	b94d      	cbnz	r5, 8074c38 <__gethex+0xc4>
 8074c24:	eb06 050a 	add.w	r5, r6, sl
 8074c28:	462a      	mov	r2, r5
 8074c2a:	4616      	mov	r6, r2
 8074c2c:	3201      	adds	r2, #1
 8074c2e:	7830      	ldrb	r0, [r6, #0]
 8074c30:	f7ff ff8a 	bl	8074b48 <__hexdig_fun>
 8074c34:	2800      	cmp	r0, #0
 8074c36:	d1f8      	bne.n	8074c2a <__gethex+0xb6>
 8074c38:	1bad      	subs	r5, r5, r6
 8074c3a:	00ad      	lsls	r5, r5, #2
 8074c3c:	e004      	b.n	8074c48 <__gethex+0xd4>
 8074c3e:	2400      	movs	r4, #0
 8074c40:	4625      	mov	r5, r4
 8074c42:	e7e0      	b.n	8074c06 <__gethex+0x92>
 8074c44:	2d00      	cmp	r5, #0
 8074c46:	d1f7      	bne.n	8074c38 <__gethex+0xc4>
 8074c48:	7833      	ldrb	r3, [r6, #0]
 8074c4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8074c4e:	2b50      	cmp	r3, #80	; 0x50
 8074c50:	d13b      	bne.n	8074cca <__gethex+0x156>
 8074c52:	7873      	ldrb	r3, [r6, #1]
 8074c54:	2b2b      	cmp	r3, #43	; 0x2b
 8074c56:	d02c      	beq.n	8074cb2 <__gethex+0x13e>
 8074c58:	2b2d      	cmp	r3, #45	; 0x2d
 8074c5a:	d02e      	beq.n	8074cba <__gethex+0x146>
 8074c5c:	1c71      	adds	r1, r6, #1
 8074c5e:	f04f 0900 	mov.w	r9, #0
 8074c62:	7808      	ldrb	r0, [r1, #0]
 8074c64:	f7ff ff70 	bl	8074b48 <__hexdig_fun>
 8074c68:	1e43      	subs	r3, r0, #1
 8074c6a:	b2db      	uxtb	r3, r3
 8074c6c:	2b18      	cmp	r3, #24
 8074c6e:	d82c      	bhi.n	8074cca <__gethex+0x156>
 8074c70:	f1a0 0210 	sub.w	r2, r0, #16
 8074c74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8074c78:	f7ff ff66 	bl	8074b48 <__hexdig_fun>
 8074c7c:	1e43      	subs	r3, r0, #1
 8074c7e:	b2db      	uxtb	r3, r3
 8074c80:	2b18      	cmp	r3, #24
 8074c82:	d91d      	bls.n	8074cc0 <__gethex+0x14c>
 8074c84:	f1b9 0f00 	cmp.w	r9, #0
 8074c88:	d000      	beq.n	8074c8c <__gethex+0x118>
 8074c8a:	4252      	negs	r2, r2
 8074c8c:	4415      	add	r5, r2
 8074c8e:	f8cb 1000 	str.w	r1, [fp]
 8074c92:	b1e4      	cbz	r4, 8074cce <__gethex+0x15a>
 8074c94:	9b00      	ldr	r3, [sp, #0]
 8074c96:	2b00      	cmp	r3, #0
 8074c98:	bf14      	ite	ne
 8074c9a:	2700      	movne	r7, #0
 8074c9c:	2706      	moveq	r7, #6
 8074c9e:	4638      	mov	r0, r7
 8074ca0:	b009      	add	sp, #36	; 0x24
 8074ca2:	ecbd 8b02 	vpop	{d8}
 8074ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8074caa:	463e      	mov	r6, r7
 8074cac:	4625      	mov	r5, r4
 8074cae:	2401      	movs	r4, #1
 8074cb0:	e7ca      	b.n	8074c48 <__gethex+0xd4>
 8074cb2:	f04f 0900 	mov.w	r9, #0
 8074cb6:	1cb1      	adds	r1, r6, #2
 8074cb8:	e7d3      	b.n	8074c62 <__gethex+0xee>
 8074cba:	f04f 0901 	mov.w	r9, #1
 8074cbe:	e7fa      	b.n	8074cb6 <__gethex+0x142>
 8074cc0:	230a      	movs	r3, #10
 8074cc2:	fb03 0202 	mla	r2, r3, r2, r0
 8074cc6:	3a10      	subs	r2, #16
 8074cc8:	e7d4      	b.n	8074c74 <__gethex+0x100>
 8074cca:	4631      	mov	r1, r6
 8074ccc:	e7df      	b.n	8074c8e <__gethex+0x11a>
 8074cce:	1bf3      	subs	r3, r6, r7
 8074cd0:	3b01      	subs	r3, #1
 8074cd2:	4621      	mov	r1, r4
 8074cd4:	2b07      	cmp	r3, #7
 8074cd6:	dc0b      	bgt.n	8074cf0 <__gethex+0x17c>
 8074cd8:	ee18 0a10 	vmov	r0, s16
 8074cdc:	f000 fa8e 	bl	80751fc <_Balloc>
 8074ce0:	4604      	mov	r4, r0
 8074ce2:	b940      	cbnz	r0, 8074cf6 <__gethex+0x182>
 8074ce4:	4b65      	ldr	r3, [pc, #404]	; (8074e7c <__gethex+0x308>)
 8074ce6:	4602      	mov	r2, r0
 8074ce8:	21de      	movs	r1, #222	; 0xde
 8074cea:	4865      	ldr	r0, [pc, #404]	; (8074e80 <__gethex+0x30c>)
 8074cec:	f001 fb3e 	bl	807636c <__assert_func>
 8074cf0:	3101      	adds	r1, #1
 8074cf2:	105b      	asrs	r3, r3, #1
 8074cf4:	e7ee      	b.n	8074cd4 <__gethex+0x160>
 8074cf6:	f100 0914 	add.w	r9, r0, #20
 8074cfa:	f04f 0b00 	mov.w	fp, #0
 8074cfe:	f1ca 0301 	rsb	r3, sl, #1
 8074d02:	f8cd 9008 	str.w	r9, [sp, #8]
 8074d06:	f8cd b000 	str.w	fp, [sp]
 8074d0a:	9306      	str	r3, [sp, #24]
 8074d0c:	42b7      	cmp	r7, r6
 8074d0e:	d340      	bcc.n	8074d92 <__gethex+0x21e>
 8074d10:	9802      	ldr	r0, [sp, #8]
 8074d12:	9b00      	ldr	r3, [sp, #0]
 8074d14:	f840 3b04 	str.w	r3, [r0], #4
 8074d18:	eba0 0009 	sub.w	r0, r0, r9
 8074d1c:	1080      	asrs	r0, r0, #2
 8074d1e:	0146      	lsls	r6, r0, #5
 8074d20:	6120      	str	r0, [r4, #16]
 8074d22:	4618      	mov	r0, r3
 8074d24:	f000 fb60 	bl	80753e8 <__hi0bits>
 8074d28:	1a30      	subs	r0, r6, r0
 8074d2a:	f8d8 6000 	ldr.w	r6, [r8]
 8074d2e:	42b0      	cmp	r0, r6
 8074d30:	dd63      	ble.n	8074dfa <__gethex+0x286>
 8074d32:	1b87      	subs	r7, r0, r6
 8074d34:	4639      	mov	r1, r7
 8074d36:	4620      	mov	r0, r4
 8074d38:	f000 fefa 	bl	8075b30 <__any_on>
 8074d3c:	4682      	mov	sl, r0
 8074d3e:	b1a8      	cbz	r0, 8074d6c <__gethex+0x1f8>
 8074d40:	1e7b      	subs	r3, r7, #1
 8074d42:	1159      	asrs	r1, r3, #5
 8074d44:	f003 021f 	and.w	r2, r3, #31
 8074d48:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8074d4c:	f04f 0a01 	mov.w	sl, #1
 8074d50:	fa0a f202 	lsl.w	r2, sl, r2
 8074d54:	420a      	tst	r2, r1
 8074d56:	d009      	beq.n	8074d6c <__gethex+0x1f8>
 8074d58:	4553      	cmp	r3, sl
 8074d5a:	dd05      	ble.n	8074d68 <__gethex+0x1f4>
 8074d5c:	1eb9      	subs	r1, r7, #2
 8074d5e:	4620      	mov	r0, r4
 8074d60:	f000 fee6 	bl	8075b30 <__any_on>
 8074d64:	2800      	cmp	r0, #0
 8074d66:	d145      	bne.n	8074df4 <__gethex+0x280>
 8074d68:	f04f 0a02 	mov.w	sl, #2
 8074d6c:	4639      	mov	r1, r7
 8074d6e:	4620      	mov	r0, r4
 8074d70:	f7ff fe98 	bl	8074aa4 <rshift>
 8074d74:	443d      	add	r5, r7
 8074d76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8074d7a:	42ab      	cmp	r3, r5
 8074d7c:	da4c      	bge.n	8074e18 <__gethex+0x2a4>
 8074d7e:	ee18 0a10 	vmov	r0, s16
 8074d82:	4621      	mov	r1, r4
 8074d84:	f000 fa7a 	bl	807527c <_Bfree>
 8074d88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8074d8a:	2300      	movs	r3, #0
 8074d8c:	6013      	str	r3, [r2, #0]
 8074d8e:	27a3      	movs	r7, #163	; 0xa3
 8074d90:	e785      	b.n	8074c9e <__gethex+0x12a>
 8074d92:	1e73      	subs	r3, r6, #1
 8074d94:	9a05      	ldr	r2, [sp, #20]
 8074d96:	9303      	str	r3, [sp, #12]
 8074d98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8074d9c:	4293      	cmp	r3, r2
 8074d9e:	d019      	beq.n	8074dd4 <__gethex+0x260>
 8074da0:	f1bb 0f20 	cmp.w	fp, #32
 8074da4:	d107      	bne.n	8074db6 <__gethex+0x242>
 8074da6:	9b02      	ldr	r3, [sp, #8]
 8074da8:	9a00      	ldr	r2, [sp, #0]
 8074daa:	f843 2b04 	str.w	r2, [r3], #4
 8074dae:	9302      	str	r3, [sp, #8]
 8074db0:	2300      	movs	r3, #0
 8074db2:	9300      	str	r3, [sp, #0]
 8074db4:	469b      	mov	fp, r3
 8074db6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8074dba:	f7ff fec5 	bl	8074b48 <__hexdig_fun>
 8074dbe:	9b00      	ldr	r3, [sp, #0]
 8074dc0:	f000 000f 	and.w	r0, r0, #15
 8074dc4:	fa00 f00b 	lsl.w	r0, r0, fp
 8074dc8:	4303      	orrs	r3, r0
 8074dca:	9300      	str	r3, [sp, #0]
 8074dcc:	f10b 0b04 	add.w	fp, fp, #4
 8074dd0:	9b03      	ldr	r3, [sp, #12]
 8074dd2:	e00d      	b.n	8074df0 <__gethex+0x27c>
 8074dd4:	9b03      	ldr	r3, [sp, #12]
 8074dd6:	9a06      	ldr	r2, [sp, #24]
 8074dd8:	4413      	add	r3, r2
 8074dda:	42bb      	cmp	r3, r7
 8074ddc:	d3e0      	bcc.n	8074da0 <__gethex+0x22c>
 8074dde:	4618      	mov	r0, r3
 8074de0:	9901      	ldr	r1, [sp, #4]
 8074de2:	9307      	str	r3, [sp, #28]
 8074de4:	4652      	mov	r2, sl
 8074de6:	f7fe f83a 	bl	8072e5e <strncmp>
 8074dea:	9b07      	ldr	r3, [sp, #28]
 8074dec:	2800      	cmp	r0, #0
 8074dee:	d1d7      	bne.n	8074da0 <__gethex+0x22c>
 8074df0:	461e      	mov	r6, r3
 8074df2:	e78b      	b.n	8074d0c <__gethex+0x198>
 8074df4:	f04f 0a03 	mov.w	sl, #3
 8074df8:	e7b8      	b.n	8074d6c <__gethex+0x1f8>
 8074dfa:	da0a      	bge.n	8074e12 <__gethex+0x29e>
 8074dfc:	1a37      	subs	r7, r6, r0
 8074dfe:	4621      	mov	r1, r4
 8074e00:	ee18 0a10 	vmov	r0, s16
 8074e04:	463a      	mov	r2, r7
 8074e06:	f000 fc55 	bl	80756b4 <__lshift>
 8074e0a:	1bed      	subs	r5, r5, r7
 8074e0c:	4604      	mov	r4, r0
 8074e0e:	f100 0914 	add.w	r9, r0, #20
 8074e12:	f04f 0a00 	mov.w	sl, #0
 8074e16:	e7ae      	b.n	8074d76 <__gethex+0x202>
 8074e18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8074e1c:	42a8      	cmp	r0, r5
 8074e1e:	dd72      	ble.n	8074f06 <__gethex+0x392>
 8074e20:	1b45      	subs	r5, r0, r5
 8074e22:	42ae      	cmp	r6, r5
 8074e24:	dc36      	bgt.n	8074e94 <__gethex+0x320>
 8074e26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8074e2a:	2b02      	cmp	r3, #2
 8074e2c:	d02a      	beq.n	8074e84 <__gethex+0x310>
 8074e2e:	2b03      	cmp	r3, #3
 8074e30:	d02c      	beq.n	8074e8c <__gethex+0x318>
 8074e32:	2b01      	cmp	r3, #1
 8074e34:	d115      	bne.n	8074e62 <__gethex+0x2ee>
 8074e36:	42ae      	cmp	r6, r5
 8074e38:	d113      	bne.n	8074e62 <__gethex+0x2ee>
 8074e3a:	2e01      	cmp	r6, #1
 8074e3c:	d10b      	bne.n	8074e56 <__gethex+0x2e2>
 8074e3e:	9a04      	ldr	r2, [sp, #16]
 8074e40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8074e44:	6013      	str	r3, [r2, #0]
 8074e46:	2301      	movs	r3, #1
 8074e48:	6123      	str	r3, [r4, #16]
 8074e4a:	f8c9 3000 	str.w	r3, [r9]
 8074e4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8074e50:	2762      	movs	r7, #98	; 0x62
 8074e52:	601c      	str	r4, [r3, #0]
 8074e54:	e723      	b.n	8074c9e <__gethex+0x12a>
 8074e56:	1e71      	subs	r1, r6, #1
 8074e58:	4620      	mov	r0, r4
 8074e5a:	f000 fe69 	bl	8075b30 <__any_on>
 8074e5e:	2800      	cmp	r0, #0
 8074e60:	d1ed      	bne.n	8074e3e <__gethex+0x2ca>
 8074e62:	ee18 0a10 	vmov	r0, s16
 8074e66:	4621      	mov	r1, r4
 8074e68:	f000 fa08 	bl	807527c <_Bfree>
 8074e6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8074e6e:	2300      	movs	r3, #0
 8074e70:	6013      	str	r3, [r2, #0]
 8074e72:	2750      	movs	r7, #80	; 0x50
 8074e74:	e713      	b.n	8074c9e <__gethex+0x12a>
 8074e76:	bf00      	nop
 8074e78:	08077180 	.word	0x08077180
 8074e7c:	08077104 	.word	0x08077104
 8074e80:	08077115 	.word	0x08077115
 8074e84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8074e86:	2b00      	cmp	r3, #0
 8074e88:	d1eb      	bne.n	8074e62 <__gethex+0x2ee>
 8074e8a:	e7d8      	b.n	8074e3e <__gethex+0x2ca>
 8074e8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8074e8e:	2b00      	cmp	r3, #0
 8074e90:	d1d5      	bne.n	8074e3e <__gethex+0x2ca>
 8074e92:	e7e6      	b.n	8074e62 <__gethex+0x2ee>
 8074e94:	1e6f      	subs	r7, r5, #1
 8074e96:	f1ba 0f00 	cmp.w	sl, #0
 8074e9a:	d131      	bne.n	8074f00 <__gethex+0x38c>
 8074e9c:	b127      	cbz	r7, 8074ea8 <__gethex+0x334>
 8074e9e:	4639      	mov	r1, r7
 8074ea0:	4620      	mov	r0, r4
 8074ea2:	f000 fe45 	bl	8075b30 <__any_on>
 8074ea6:	4682      	mov	sl, r0
 8074ea8:	117b      	asrs	r3, r7, #5
 8074eaa:	2101      	movs	r1, #1
 8074eac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8074eb0:	f007 071f 	and.w	r7, r7, #31
 8074eb4:	fa01 f707 	lsl.w	r7, r1, r7
 8074eb8:	421f      	tst	r7, r3
 8074eba:	4629      	mov	r1, r5
 8074ebc:	4620      	mov	r0, r4
 8074ebe:	bf18      	it	ne
 8074ec0:	f04a 0a02 	orrne.w	sl, sl, #2
 8074ec4:	1b76      	subs	r6, r6, r5
 8074ec6:	f7ff fded 	bl	8074aa4 <rshift>
 8074eca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8074ece:	2702      	movs	r7, #2
 8074ed0:	f1ba 0f00 	cmp.w	sl, #0
 8074ed4:	d048      	beq.n	8074f68 <__gethex+0x3f4>
 8074ed6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8074eda:	2b02      	cmp	r3, #2
 8074edc:	d015      	beq.n	8074f0a <__gethex+0x396>
 8074ede:	2b03      	cmp	r3, #3
 8074ee0:	d017      	beq.n	8074f12 <__gethex+0x39e>
 8074ee2:	2b01      	cmp	r3, #1
 8074ee4:	d109      	bne.n	8074efa <__gethex+0x386>
 8074ee6:	f01a 0f02 	tst.w	sl, #2
 8074eea:	d006      	beq.n	8074efa <__gethex+0x386>
 8074eec:	f8d9 0000 	ldr.w	r0, [r9]
 8074ef0:	ea4a 0a00 	orr.w	sl, sl, r0
 8074ef4:	f01a 0f01 	tst.w	sl, #1
 8074ef8:	d10e      	bne.n	8074f18 <__gethex+0x3a4>
 8074efa:	f047 0710 	orr.w	r7, r7, #16
 8074efe:	e033      	b.n	8074f68 <__gethex+0x3f4>
 8074f00:	f04f 0a01 	mov.w	sl, #1
 8074f04:	e7d0      	b.n	8074ea8 <__gethex+0x334>
 8074f06:	2701      	movs	r7, #1
 8074f08:	e7e2      	b.n	8074ed0 <__gethex+0x35c>
 8074f0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8074f0c:	f1c3 0301 	rsb	r3, r3, #1
 8074f10:	9315      	str	r3, [sp, #84]	; 0x54
 8074f12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8074f14:	2b00      	cmp	r3, #0
 8074f16:	d0f0      	beq.n	8074efa <__gethex+0x386>
 8074f18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8074f1c:	f104 0314 	add.w	r3, r4, #20
 8074f20:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8074f24:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8074f28:	f04f 0c00 	mov.w	ip, #0
 8074f2c:	4618      	mov	r0, r3
 8074f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8074f32:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8074f36:	d01c      	beq.n	8074f72 <__gethex+0x3fe>
 8074f38:	3201      	adds	r2, #1
 8074f3a:	6002      	str	r2, [r0, #0]
 8074f3c:	2f02      	cmp	r7, #2
 8074f3e:	f104 0314 	add.w	r3, r4, #20
 8074f42:	d13f      	bne.n	8074fc4 <__gethex+0x450>
 8074f44:	f8d8 2000 	ldr.w	r2, [r8]
 8074f48:	3a01      	subs	r2, #1
 8074f4a:	42b2      	cmp	r2, r6
 8074f4c:	d10a      	bne.n	8074f64 <__gethex+0x3f0>
 8074f4e:	1171      	asrs	r1, r6, #5
 8074f50:	2201      	movs	r2, #1
 8074f52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8074f56:	f006 061f 	and.w	r6, r6, #31
 8074f5a:	fa02 f606 	lsl.w	r6, r2, r6
 8074f5e:	421e      	tst	r6, r3
 8074f60:	bf18      	it	ne
 8074f62:	4617      	movne	r7, r2
 8074f64:	f047 0720 	orr.w	r7, r7, #32
 8074f68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8074f6a:	601c      	str	r4, [r3, #0]
 8074f6c:	9b04      	ldr	r3, [sp, #16]
 8074f6e:	601d      	str	r5, [r3, #0]
 8074f70:	e695      	b.n	8074c9e <__gethex+0x12a>
 8074f72:	4299      	cmp	r1, r3
 8074f74:	f843 cc04 	str.w	ip, [r3, #-4]
 8074f78:	d8d8      	bhi.n	8074f2c <__gethex+0x3b8>
 8074f7a:	68a3      	ldr	r3, [r4, #8]
 8074f7c:	459b      	cmp	fp, r3
 8074f7e:	db19      	blt.n	8074fb4 <__gethex+0x440>
 8074f80:	6861      	ldr	r1, [r4, #4]
 8074f82:	ee18 0a10 	vmov	r0, s16
 8074f86:	3101      	adds	r1, #1
 8074f88:	f000 f938 	bl	80751fc <_Balloc>
 8074f8c:	4681      	mov	r9, r0
 8074f8e:	b918      	cbnz	r0, 8074f98 <__gethex+0x424>
 8074f90:	4b1a      	ldr	r3, [pc, #104]	; (8074ffc <__gethex+0x488>)
 8074f92:	4602      	mov	r2, r0
 8074f94:	2184      	movs	r1, #132	; 0x84
 8074f96:	e6a8      	b.n	8074cea <__gethex+0x176>
 8074f98:	6922      	ldr	r2, [r4, #16]
 8074f9a:	3202      	adds	r2, #2
 8074f9c:	f104 010c 	add.w	r1, r4, #12
 8074fa0:	0092      	lsls	r2, r2, #2
 8074fa2:	300c      	adds	r0, #12
 8074fa4:	f7fc ff8d 	bl	8071ec2 <memcpy>
 8074fa8:	4621      	mov	r1, r4
 8074faa:	ee18 0a10 	vmov	r0, s16
 8074fae:	f000 f965 	bl	807527c <_Bfree>
 8074fb2:	464c      	mov	r4, r9
 8074fb4:	6923      	ldr	r3, [r4, #16]
 8074fb6:	1c5a      	adds	r2, r3, #1
 8074fb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8074fbc:	6122      	str	r2, [r4, #16]
 8074fbe:	2201      	movs	r2, #1
 8074fc0:	615a      	str	r2, [r3, #20]
 8074fc2:	e7bb      	b.n	8074f3c <__gethex+0x3c8>
 8074fc4:	6922      	ldr	r2, [r4, #16]
 8074fc6:	455a      	cmp	r2, fp
 8074fc8:	dd0b      	ble.n	8074fe2 <__gethex+0x46e>
 8074fca:	2101      	movs	r1, #1
 8074fcc:	4620      	mov	r0, r4
 8074fce:	f7ff fd69 	bl	8074aa4 <rshift>
 8074fd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8074fd6:	3501      	adds	r5, #1
 8074fd8:	42ab      	cmp	r3, r5
 8074fda:	f6ff aed0 	blt.w	8074d7e <__gethex+0x20a>
 8074fde:	2701      	movs	r7, #1
 8074fe0:	e7c0      	b.n	8074f64 <__gethex+0x3f0>
 8074fe2:	f016 061f 	ands.w	r6, r6, #31
 8074fe6:	d0fa      	beq.n	8074fde <__gethex+0x46a>
 8074fe8:	449a      	add	sl, r3
 8074fea:	f1c6 0620 	rsb	r6, r6, #32
 8074fee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8074ff2:	f000 f9f9 	bl	80753e8 <__hi0bits>
 8074ff6:	42b0      	cmp	r0, r6
 8074ff8:	dbe7      	blt.n	8074fca <__gethex+0x456>
 8074ffa:	e7f0      	b.n	8074fde <__gethex+0x46a>
 8074ffc:	08077104 	.word	0x08077104

08075000 <L_shift>:
 8075000:	f1c2 0208 	rsb	r2, r2, #8
 8075004:	0092      	lsls	r2, r2, #2
 8075006:	b570      	push	{r4, r5, r6, lr}
 8075008:	f1c2 0620 	rsb	r6, r2, #32
 807500c:	6843      	ldr	r3, [r0, #4]
 807500e:	6804      	ldr	r4, [r0, #0]
 8075010:	fa03 f506 	lsl.w	r5, r3, r6
 8075014:	432c      	orrs	r4, r5
 8075016:	40d3      	lsrs	r3, r2
 8075018:	6004      	str	r4, [r0, #0]
 807501a:	f840 3f04 	str.w	r3, [r0, #4]!
 807501e:	4288      	cmp	r0, r1
 8075020:	d3f4      	bcc.n	807500c <L_shift+0xc>
 8075022:	bd70      	pop	{r4, r5, r6, pc}

08075024 <__match>:
 8075024:	b530      	push	{r4, r5, lr}
 8075026:	6803      	ldr	r3, [r0, #0]
 8075028:	3301      	adds	r3, #1
 807502a:	f811 4b01 	ldrb.w	r4, [r1], #1
 807502e:	b914      	cbnz	r4, 8075036 <__match+0x12>
 8075030:	6003      	str	r3, [r0, #0]
 8075032:	2001      	movs	r0, #1
 8075034:	bd30      	pop	{r4, r5, pc}
 8075036:	f813 2b01 	ldrb.w	r2, [r3], #1
 807503a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 807503e:	2d19      	cmp	r5, #25
 8075040:	bf98      	it	ls
 8075042:	3220      	addls	r2, #32
 8075044:	42a2      	cmp	r2, r4
 8075046:	d0f0      	beq.n	807502a <__match+0x6>
 8075048:	2000      	movs	r0, #0
 807504a:	e7f3      	b.n	8075034 <__match+0x10>

0807504c <__hexnan>:
 807504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8075050:	680b      	ldr	r3, [r1, #0]
 8075052:	6801      	ldr	r1, [r0, #0]
 8075054:	115e      	asrs	r6, r3, #5
 8075056:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 807505a:	f013 031f 	ands.w	r3, r3, #31
 807505e:	b087      	sub	sp, #28
 8075060:	bf18      	it	ne
 8075062:	3604      	addne	r6, #4
 8075064:	2500      	movs	r5, #0
 8075066:	1f37      	subs	r7, r6, #4
 8075068:	4682      	mov	sl, r0
 807506a:	4690      	mov	r8, r2
 807506c:	9301      	str	r3, [sp, #4]
 807506e:	f846 5c04 	str.w	r5, [r6, #-4]
 8075072:	46b9      	mov	r9, r7
 8075074:	463c      	mov	r4, r7
 8075076:	9502      	str	r5, [sp, #8]
 8075078:	46ab      	mov	fp, r5
 807507a:	784a      	ldrb	r2, [r1, #1]
 807507c:	1c4b      	adds	r3, r1, #1
 807507e:	9303      	str	r3, [sp, #12]
 8075080:	b342      	cbz	r2, 80750d4 <__hexnan+0x88>
 8075082:	4610      	mov	r0, r2
 8075084:	9105      	str	r1, [sp, #20]
 8075086:	9204      	str	r2, [sp, #16]
 8075088:	f7ff fd5e 	bl	8074b48 <__hexdig_fun>
 807508c:	2800      	cmp	r0, #0
 807508e:	d14f      	bne.n	8075130 <__hexnan+0xe4>
 8075090:	9a04      	ldr	r2, [sp, #16]
 8075092:	9905      	ldr	r1, [sp, #20]
 8075094:	2a20      	cmp	r2, #32
 8075096:	d818      	bhi.n	80750ca <__hexnan+0x7e>
 8075098:	9b02      	ldr	r3, [sp, #8]
 807509a:	459b      	cmp	fp, r3
 807509c:	dd13      	ble.n	80750c6 <__hexnan+0x7a>
 807509e:	454c      	cmp	r4, r9
 80750a0:	d206      	bcs.n	80750b0 <__hexnan+0x64>
 80750a2:	2d07      	cmp	r5, #7
 80750a4:	dc04      	bgt.n	80750b0 <__hexnan+0x64>
 80750a6:	462a      	mov	r2, r5
 80750a8:	4649      	mov	r1, r9
 80750aa:	4620      	mov	r0, r4
 80750ac:	f7ff ffa8 	bl	8075000 <L_shift>
 80750b0:	4544      	cmp	r4, r8
 80750b2:	d950      	bls.n	8075156 <__hexnan+0x10a>
 80750b4:	2300      	movs	r3, #0
 80750b6:	f1a4 0904 	sub.w	r9, r4, #4
 80750ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80750be:	f8cd b008 	str.w	fp, [sp, #8]
 80750c2:	464c      	mov	r4, r9
 80750c4:	461d      	mov	r5, r3
 80750c6:	9903      	ldr	r1, [sp, #12]
 80750c8:	e7d7      	b.n	807507a <__hexnan+0x2e>
 80750ca:	2a29      	cmp	r2, #41	; 0x29
 80750cc:	d156      	bne.n	807517c <__hexnan+0x130>
 80750ce:	3102      	adds	r1, #2
 80750d0:	f8ca 1000 	str.w	r1, [sl]
 80750d4:	f1bb 0f00 	cmp.w	fp, #0
 80750d8:	d050      	beq.n	807517c <__hexnan+0x130>
 80750da:	454c      	cmp	r4, r9
 80750dc:	d206      	bcs.n	80750ec <__hexnan+0xa0>
 80750de:	2d07      	cmp	r5, #7
 80750e0:	dc04      	bgt.n	80750ec <__hexnan+0xa0>
 80750e2:	462a      	mov	r2, r5
 80750e4:	4649      	mov	r1, r9
 80750e6:	4620      	mov	r0, r4
 80750e8:	f7ff ff8a 	bl	8075000 <L_shift>
 80750ec:	4544      	cmp	r4, r8
 80750ee:	d934      	bls.n	807515a <__hexnan+0x10e>
 80750f0:	f1a8 0204 	sub.w	r2, r8, #4
 80750f4:	4623      	mov	r3, r4
 80750f6:	f853 1b04 	ldr.w	r1, [r3], #4
 80750fa:	f842 1f04 	str.w	r1, [r2, #4]!
 80750fe:	429f      	cmp	r7, r3
 8075100:	d2f9      	bcs.n	80750f6 <__hexnan+0xaa>
 8075102:	1b3b      	subs	r3, r7, r4
 8075104:	f023 0303 	bic.w	r3, r3, #3
 8075108:	3304      	adds	r3, #4
 807510a:	3401      	adds	r4, #1
 807510c:	3e03      	subs	r6, #3
 807510e:	42b4      	cmp	r4, r6
 8075110:	bf88      	it	hi
 8075112:	2304      	movhi	r3, #4
 8075114:	4443      	add	r3, r8
 8075116:	2200      	movs	r2, #0
 8075118:	f843 2b04 	str.w	r2, [r3], #4
 807511c:	429f      	cmp	r7, r3
 807511e:	d2fb      	bcs.n	8075118 <__hexnan+0xcc>
 8075120:	683b      	ldr	r3, [r7, #0]
 8075122:	b91b      	cbnz	r3, 807512c <__hexnan+0xe0>
 8075124:	4547      	cmp	r7, r8
 8075126:	d127      	bne.n	8075178 <__hexnan+0x12c>
 8075128:	2301      	movs	r3, #1
 807512a:	603b      	str	r3, [r7, #0]
 807512c:	2005      	movs	r0, #5
 807512e:	e026      	b.n	807517e <__hexnan+0x132>
 8075130:	3501      	adds	r5, #1
 8075132:	2d08      	cmp	r5, #8
 8075134:	f10b 0b01 	add.w	fp, fp, #1
 8075138:	dd06      	ble.n	8075148 <__hexnan+0xfc>
 807513a:	4544      	cmp	r4, r8
 807513c:	d9c3      	bls.n	80750c6 <__hexnan+0x7a>
 807513e:	2300      	movs	r3, #0
 8075140:	f844 3c04 	str.w	r3, [r4, #-4]
 8075144:	2501      	movs	r5, #1
 8075146:	3c04      	subs	r4, #4
 8075148:	6822      	ldr	r2, [r4, #0]
 807514a:	f000 000f 	and.w	r0, r0, #15
 807514e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8075152:	6022      	str	r2, [r4, #0]
 8075154:	e7b7      	b.n	80750c6 <__hexnan+0x7a>
 8075156:	2508      	movs	r5, #8
 8075158:	e7b5      	b.n	80750c6 <__hexnan+0x7a>
 807515a:	9b01      	ldr	r3, [sp, #4]
 807515c:	2b00      	cmp	r3, #0
 807515e:	d0df      	beq.n	8075120 <__hexnan+0xd4>
 8075160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8075164:	f1c3 0320 	rsb	r3, r3, #32
 8075168:	fa22 f303 	lsr.w	r3, r2, r3
 807516c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8075170:	401a      	ands	r2, r3
 8075172:	f846 2c04 	str.w	r2, [r6, #-4]
 8075176:	e7d3      	b.n	8075120 <__hexnan+0xd4>
 8075178:	3f04      	subs	r7, #4
 807517a:	e7d1      	b.n	8075120 <__hexnan+0xd4>
 807517c:	2004      	movs	r0, #4
 807517e:	b007      	add	sp, #28
 8075180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08075184 <_localeconv_r>:
 8075184:	4800      	ldr	r0, [pc, #0]	; (8075188 <_localeconv_r+0x4>)
 8075186:	4770      	bx	lr
 8075188:	20000180 	.word	0x20000180

0807518c <_lseek_r>:
 807518c:	b538      	push	{r3, r4, r5, lr}
 807518e:	4d07      	ldr	r5, [pc, #28]	; (80751ac <_lseek_r+0x20>)
 8075190:	4604      	mov	r4, r0
 8075192:	4608      	mov	r0, r1
 8075194:	4611      	mov	r1, r2
 8075196:	2200      	movs	r2, #0
 8075198:	602a      	str	r2, [r5, #0]
 807519a:	461a      	mov	r2, r3
 807519c:	f7ee f9ea 	bl	8063574 <_lseek>
 80751a0:	1c43      	adds	r3, r0, #1
 80751a2:	d102      	bne.n	80751aa <_lseek_r+0x1e>
 80751a4:	682b      	ldr	r3, [r5, #0]
 80751a6:	b103      	cbz	r3, 80751aa <_lseek_r+0x1e>
 80751a8:	6023      	str	r3, [r4, #0]
 80751aa:	bd38      	pop	{r3, r4, r5, pc}
 80751ac:	20005d10 	.word	0x20005d10

080751b0 <malloc>:
 80751b0:	4b02      	ldr	r3, [pc, #8]	; (80751bc <malloc+0xc>)
 80751b2:	4601      	mov	r1, r0
 80751b4:	6818      	ldr	r0, [r3, #0]
 80751b6:	f7fc be9b 	b.w	8071ef0 <_malloc_r>
 80751ba:	bf00      	nop
 80751bc:	20000028 	.word	0x20000028

080751c0 <__ascii_mbtowc>:
 80751c0:	b082      	sub	sp, #8
 80751c2:	b901      	cbnz	r1, 80751c6 <__ascii_mbtowc+0x6>
 80751c4:	a901      	add	r1, sp, #4
 80751c6:	b142      	cbz	r2, 80751da <__ascii_mbtowc+0x1a>
 80751c8:	b14b      	cbz	r3, 80751de <__ascii_mbtowc+0x1e>
 80751ca:	7813      	ldrb	r3, [r2, #0]
 80751cc:	600b      	str	r3, [r1, #0]
 80751ce:	7812      	ldrb	r2, [r2, #0]
 80751d0:	1e10      	subs	r0, r2, #0
 80751d2:	bf18      	it	ne
 80751d4:	2001      	movne	r0, #1
 80751d6:	b002      	add	sp, #8
 80751d8:	4770      	bx	lr
 80751da:	4610      	mov	r0, r2
 80751dc:	e7fb      	b.n	80751d6 <__ascii_mbtowc+0x16>
 80751de:	f06f 0001 	mvn.w	r0, #1
 80751e2:	e7f8      	b.n	80751d6 <__ascii_mbtowc+0x16>

080751e4 <__malloc_lock>:
 80751e4:	4801      	ldr	r0, [pc, #4]	; (80751ec <__malloc_lock+0x8>)
 80751e6:	f7fc be6a 	b.w	8071ebe <__retarget_lock_acquire_recursive>
 80751ea:	bf00      	nop
 80751ec:	20005d08 	.word	0x20005d08

080751f0 <__malloc_unlock>:
 80751f0:	4801      	ldr	r0, [pc, #4]	; (80751f8 <__malloc_unlock+0x8>)
 80751f2:	f7fc be65 	b.w	8071ec0 <__retarget_lock_release_recursive>
 80751f6:	bf00      	nop
 80751f8:	20005d08 	.word	0x20005d08

080751fc <_Balloc>:
 80751fc:	b570      	push	{r4, r5, r6, lr}
 80751fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8075200:	4604      	mov	r4, r0
 8075202:	460d      	mov	r5, r1
 8075204:	b976      	cbnz	r6, 8075224 <_Balloc+0x28>
 8075206:	2010      	movs	r0, #16
 8075208:	f7ff ffd2 	bl	80751b0 <malloc>
 807520c:	4602      	mov	r2, r0
 807520e:	6260      	str	r0, [r4, #36]	; 0x24
 8075210:	b920      	cbnz	r0, 807521c <_Balloc+0x20>
 8075212:	4b18      	ldr	r3, [pc, #96]	; (8075274 <_Balloc+0x78>)
 8075214:	4818      	ldr	r0, [pc, #96]	; (8075278 <_Balloc+0x7c>)
 8075216:	2166      	movs	r1, #102	; 0x66
 8075218:	f001 f8a8 	bl	807636c <__assert_func>
 807521c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8075220:	6006      	str	r6, [r0, #0]
 8075222:	60c6      	str	r6, [r0, #12]
 8075224:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8075226:	68f3      	ldr	r3, [r6, #12]
 8075228:	b183      	cbz	r3, 807524c <_Balloc+0x50>
 807522a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 807522c:	68db      	ldr	r3, [r3, #12]
 807522e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8075232:	b9b8      	cbnz	r0, 8075264 <_Balloc+0x68>
 8075234:	2101      	movs	r1, #1
 8075236:	fa01 f605 	lsl.w	r6, r1, r5
 807523a:	1d72      	adds	r2, r6, #5
 807523c:	0092      	lsls	r2, r2, #2
 807523e:	4620      	mov	r0, r4
 8075240:	f000 fc97 	bl	8075b72 <_calloc_r>
 8075244:	b160      	cbz	r0, 8075260 <_Balloc+0x64>
 8075246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 807524a:	e00e      	b.n	807526a <_Balloc+0x6e>
 807524c:	2221      	movs	r2, #33	; 0x21
 807524e:	2104      	movs	r1, #4
 8075250:	4620      	mov	r0, r4
 8075252:	f000 fc8e 	bl	8075b72 <_calloc_r>
 8075256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8075258:	60f0      	str	r0, [r6, #12]
 807525a:	68db      	ldr	r3, [r3, #12]
 807525c:	2b00      	cmp	r3, #0
 807525e:	d1e4      	bne.n	807522a <_Balloc+0x2e>
 8075260:	2000      	movs	r0, #0
 8075262:	bd70      	pop	{r4, r5, r6, pc}
 8075264:	6802      	ldr	r2, [r0, #0]
 8075266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 807526a:	2300      	movs	r3, #0
 807526c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8075270:	e7f7      	b.n	8075262 <_Balloc+0x66>
 8075272:	bf00      	nop
 8075274:	0807708e 	.word	0x0807708e
 8075278:	08077194 	.word	0x08077194

0807527c <_Bfree>:
 807527c:	b570      	push	{r4, r5, r6, lr}
 807527e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8075280:	4605      	mov	r5, r0
 8075282:	460c      	mov	r4, r1
 8075284:	b976      	cbnz	r6, 80752a4 <_Bfree+0x28>
 8075286:	2010      	movs	r0, #16
 8075288:	f7ff ff92 	bl	80751b0 <malloc>
 807528c:	4602      	mov	r2, r0
 807528e:	6268      	str	r0, [r5, #36]	; 0x24
 8075290:	b920      	cbnz	r0, 807529c <_Bfree+0x20>
 8075292:	4b09      	ldr	r3, [pc, #36]	; (80752b8 <_Bfree+0x3c>)
 8075294:	4809      	ldr	r0, [pc, #36]	; (80752bc <_Bfree+0x40>)
 8075296:	218a      	movs	r1, #138	; 0x8a
 8075298:	f001 f868 	bl	807636c <__assert_func>
 807529c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80752a0:	6006      	str	r6, [r0, #0]
 80752a2:	60c6      	str	r6, [r0, #12]
 80752a4:	b13c      	cbz	r4, 80752b6 <_Bfree+0x3a>
 80752a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80752a8:	6862      	ldr	r2, [r4, #4]
 80752aa:	68db      	ldr	r3, [r3, #12]
 80752ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80752b0:	6021      	str	r1, [r4, #0]
 80752b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80752b6:	bd70      	pop	{r4, r5, r6, pc}
 80752b8:	0807708e 	.word	0x0807708e
 80752bc:	08077194 	.word	0x08077194

080752c0 <__multadd>:
 80752c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80752c4:	690e      	ldr	r6, [r1, #16]
 80752c6:	4607      	mov	r7, r0
 80752c8:	4698      	mov	r8, r3
 80752ca:	460c      	mov	r4, r1
 80752cc:	f101 0014 	add.w	r0, r1, #20
 80752d0:	2300      	movs	r3, #0
 80752d2:	6805      	ldr	r5, [r0, #0]
 80752d4:	b2a9      	uxth	r1, r5
 80752d6:	fb02 8101 	mla	r1, r2, r1, r8
 80752da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80752de:	0c2d      	lsrs	r5, r5, #16
 80752e0:	fb02 c505 	mla	r5, r2, r5, ip
 80752e4:	b289      	uxth	r1, r1
 80752e6:	3301      	adds	r3, #1
 80752e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80752ec:	429e      	cmp	r6, r3
 80752ee:	f840 1b04 	str.w	r1, [r0], #4
 80752f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80752f6:	dcec      	bgt.n	80752d2 <__multadd+0x12>
 80752f8:	f1b8 0f00 	cmp.w	r8, #0
 80752fc:	d022      	beq.n	8075344 <__multadd+0x84>
 80752fe:	68a3      	ldr	r3, [r4, #8]
 8075300:	42b3      	cmp	r3, r6
 8075302:	dc19      	bgt.n	8075338 <__multadd+0x78>
 8075304:	6861      	ldr	r1, [r4, #4]
 8075306:	4638      	mov	r0, r7
 8075308:	3101      	adds	r1, #1
 807530a:	f7ff ff77 	bl	80751fc <_Balloc>
 807530e:	4605      	mov	r5, r0
 8075310:	b928      	cbnz	r0, 807531e <__multadd+0x5e>
 8075312:	4602      	mov	r2, r0
 8075314:	4b0d      	ldr	r3, [pc, #52]	; (807534c <__multadd+0x8c>)
 8075316:	480e      	ldr	r0, [pc, #56]	; (8075350 <__multadd+0x90>)
 8075318:	21b5      	movs	r1, #181	; 0xb5
 807531a:	f001 f827 	bl	807636c <__assert_func>
 807531e:	6922      	ldr	r2, [r4, #16]
 8075320:	3202      	adds	r2, #2
 8075322:	f104 010c 	add.w	r1, r4, #12
 8075326:	0092      	lsls	r2, r2, #2
 8075328:	300c      	adds	r0, #12
 807532a:	f7fc fdca 	bl	8071ec2 <memcpy>
 807532e:	4621      	mov	r1, r4
 8075330:	4638      	mov	r0, r7
 8075332:	f7ff ffa3 	bl	807527c <_Bfree>
 8075336:	462c      	mov	r4, r5
 8075338:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 807533c:	3601      	adds	r6, #1
 807533e:	f8c3 8014 	str.w	r8, [r3, #20]
 8075342:	6126      	str	r6, [r4, #16]
 8075344:	4620      	mov	r0, r4
 8075346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 807534a:	bf00      	nop
 807534c:	08077104 	.word	0x08077104
 8075350:	08077194 	.word	0x08077194

08075354 <__s2b>:
 8075354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8075358:	460c      	mov	r4, r1
 807535a:	4615      	mov	r5, r2
 807535c:	461f      	mov	r7, r3
 807535e:	2209      	movs	r2, #9
 8075360:	3308      	adds	r3, #8
 8075362:	4606      	mov	r6, r0
 8075364:	fb93 f3f2 	sdiv	r3, r3, r2
 8075368:	2100      	movs	r1, #0
 807536a:	2201      	movs	r2, #1
 807536c:	429a      	cmp	r2, r3
 807536e:	db09      	blt.n	8075384 <__s2b+0x30>
 8075370:	4630      	mov	r0, r6
 8075372:	f7ff ff43 	bl	80751fc <_Balloc>
 8075376:	b940      	cbnz	r0, 807538a <__s2b+0x36>
 8075378:	4602      	mov	r2, r0
 807537a:	4b19      	ldr	r3, [pc, #100]	; (80753e0 <__s2b+0x8c>)
 807537c:	4819      	ldr	r0, [pc, #100]	; (80753e4 <__s2b+0x90>)
 807537e:	21ce      	movs	r1, #206	; 0xce
 8075380:	f000 fff4 	bl	807636c <__assert_func>
 8075384:	0052      	lsls	r2, r2, #1
 8075386:	3101      	adds	r1, #1
 8075388:	e7f0      	b.n	807536c <__s2b+0x18>
 807538a:	9b08      	ldr	r3, [sp, #32]
 807538c:	6143      	str	r3, [r0, #20]
 807538e:	2d09      	cmp	r5, #9
 8075390:	f04f 0301 	mov.w	r3, #1
 8075394:	6103      	str	r3, [r0, #16]
 8075396:	dd16      	ble.n	80753c6 <__s2b+0x72>
 8075398:	f104 0909 	add.w	r9, r4, #9
 807539c:	46c8      	mov	r8, r9
 807539e:	442c      	add	r4, r5
 80753a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80753a4:	4601      	mov	r1, r0
 80753a6:	3b30      	subs	r3, #48	; 0x30
 80753a8:	220a      	movs	r2, #10
 80753aa:	4630      	mov	r0, r6
 80753ac:	f7ff ff88 	bl	80752c0 <__multadd>
 80753b0:	45a0      	cmp	r8, r4
 80753b2:	d1f5      	bne.n	80753a0 <__s2b+0x4c>
 80753b4:	f1a5 0408 	sub.w	r4, r5, #8
 80753b8:	444c      	add	r4, r9
 80753ba:	1b2d      	subs	r5, r5, r4
 80753bc:	1963      	adds	r3, r4, r5
 80753be:	42bb      	cmp	r3, r7
 80753c0:	db04      	blt.n	80753cc <__s2b+0x78>
 80753c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80753c6:	340a      	adds	r4, #10
 80753c8:	2509      	movs	r5, #9
 80753ca:	e7f6      	b.n	80753ba <__s2b+0x66>
 80753cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80753d0:	4601      	mov	r1, r0
 80753d2:	3b30      	subs	r3, #48	; 0x30
 80753d4:	220a      	movs	r2, #10
 80753d6:	4630      	mov	r0, r6
 80753d8:	f7ff ff72 	bl	80752c0 <__multadd>
 80753dc:	e7ee      	b.n	80753bc <__s2b+0x68>
 80753de:	bf00      	nop
 80753e0:	08077104 	.word	0x08077104
 80753e4:	08077194 	.word	0x08077194

080753e8 <__hi0bits>:
 80753e8:	0c03      	lsrs	r3, r0, #16
 80753ea:	041b      	lsls	r3, r3, #16
 80753ec:	b9d3      	cbnz	r3, 8075424 <__hi0bits+0x3c>
 80753ee:	0400      	lsls	r0, r0, #16
 80753f0:	2310      	movs	r3, #16
 80753f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80753f6:	bf04      	itt	eq
 80753f8:	0200      	lsleq	r0, r0, #8
 80753fa:	3308      	addeq	r3, #8
 80753fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8075400:	bf04      	itt	eq
 8075402:	0100      	lsleq	r0, r0, #4
 8075404:	3304      	addeq	r3, #4
 8075406:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 807540a:	bf04      	itt	eq
 807540c:	0080      	lsleq	r0, r0, #2
 807540e:	3302      	addeq	r3, #2
 8075410:	2800      	cmp	r0, #0
 8075412:	db05      	blt.n	8075420 <__hi0bits+0x38>
 8075414:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8075418:	f103 0301 	add.w	r3, r3, #1
 807541c:	bf08      	it	eq
 807541e:	2320      	moveq	r3, #32
 8075420:	4618      	mov	r0, r3
 8075422:	4770      	bx	lr
 8075424:	2300      	movs	r3, #0
 8075426:	e7e4      	b.n	80753f2 <__hi0bits+0xa>

08075428 <__lo0bits>:
 8075428:	6803      	ldr	r3, [r0, #0]
 807542a:	f013 0207 	ands.w	r2, r3, #7
 807542e:	4601      	mov	r1, r0
 8075430:	d00b      	beq.n	807544a <__lo0bits+0x22>
 8075432:	07da      	lsls	r2, r3, #31
 8075434:	d424      	bmi.n	8075480 <__lo0bits+0x58>
 8075436:	0798      	lsls	r0, r3, #30
 8075438:	bf49      	itett	mi
 807543a:	085b      	lsrmi	r3, r3, #1
 807543c:	089b      	lsrpl	r3, r3, #2
 807543e:	2001      	movmi	r0, #1
 8075440:	600b      	strmi	r3, [r1, #0]
 8075442:	bf5c      	itt	pl
 8075444:	600b      	strpl	r3, [r1, #0]
 8075446:	2002      	movpl	r0, #2
 8075448:	4770      	bx	lr
 807544a:	b298      	uxth	r0, r3
 807544c:	b9b0      	cbnz	r0, 807547c <__lo0bits+0x54>
 807544e:	0c1b      	lsrs	r3, r3, #16
 8075450:	2010      	movs	r0, #16
 8075452:	f013 0fff 	tst.w	r3, #255	; 0xff
 8075456:	bf04      	itt	eq
 8075458:	0a1b      	lsreq	r3, r3, #8
 807545a:	3008      	addeq	r0, #8
 807545c:	071a      	lsls	r2, r3, #28
 807545e:	bf04      	itt	eq
 8075460:	091b      	lsreq	r3, r3, #4
 8075462:	3004      	addeq	r0, #4
 8075464:	079a      	lsls	r2, r3, #30
 8075466:	bf04      	itt	eq
 8075468:	089b      	lsreq	r3, r3, #2
 807546a:	3002      	addeq	r0, #2
 807546c:	07da      	lsls	r2, r3, #31
 807546e:	d403      	bmi.n	8075478 <__lo0bits+0x50>
 8075470:	085b      	lsrs	r3, r3, #1
 8075472:	f100 0001 	add.w	r0, r0, #1
 8075476:	d005      	beq.n	8075484 <__lo0bits+0x5c>
 8075478:	600b      	str	r3, [r1, #0]
 807547a:	4770      	bx	lr
 807547c:	4610      	mov	r0, r2
 807547e:	e7e8      	b.n	8075452 <__lo0bits+0x2a>
 8075480:	2000      	movs	r0, #0
 8075482:	4770      	bx	lr
 8075484:	2020      	movs	r0, #32
 8075486:	4770      	bx	lr

08075488 <__i2b>:
 8075488:	b510      	push	{r4, lr}
 807548a:	460c      	mov	r4, r1
 807548c:	2101      	movs	r1, #1
 807548e:	f7ff feb5 	bl	80751fc <_Balloc>
 8075492:	4602      	mov	r2, r0
 8075494:	b928      	cbnz	r0, 80754a2 <__i2b+0x1a>
 8075496:	4b05      	ldr	r3, [pc, #20]	; (80754ac <__i2b+0x24>)
 8075498:	4805      	ldr	r0, [pc, #20]	; (80754b0 <__i2b+0x28>)
 807549a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 807549e:	f000 ff65 	bl	807636c <__assert_func>
 80754a2:	2301      	movs	r3, #1
 80754a4:	6144      	str	r4, [r0, #20]
 80754a6:	6103      	str	r3, [r0, #16]
 80754a8:	bd10      	pop	{r4, pc}
 80754aa:	bf00      	nop
 80754ac:	08077104 	.word	0x08077104
 80754b0:	08077194 	.word	0x08077194

080754b4 <__multiply>:
 80754b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80754b8:	4614      	mov	r4, r2
 80754ba:	690a      	ldr	r2, [r1, #16]
 80754bc:	6923      	ldr	r3, [r4, #16]
 80754be:	429a      	cmp	r2, r3
 80754c0:	bfb8      	it	lt
 80754c2:	460b      	movlt	r3, r1
 80754c4:	460d      	mov	r5, r1
 80754c6:	bfbc      	itt	lt
 80754c8:	4625      	movlt	r5, r4
 80754ca:	461c      	movlt	r4, r3
 80754cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80754d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80754d4:	68ab      	ldr	r3, [r5, #8]
 80754d6:	6869      	ldr	r1, [r5, #4]
 80754d8:	eb0a 0709 	add.w	r7, sl, r9
 80754dc:	42bb      	cmp	r3, r7
 80754de:	b085      	sub	sp, #20
 80754e0:	bfb8      	it	lt
 80754e2:	3101      	addlt	r1, #1
 80754e4:	f7ff fe8a 	bl	80751fc <_Balloc>
 80754e8:	b930      	cbnz	r0, 80754f8 <__multiply+0x44>
 80754ea:	4602      	mov	r2, r0
 80754ec:	4b42      	ldr	r3, [pc, #264]	; (80755f8 <__multiply+0x144>)
 80754ee:	4843      	ldr	r0, [pc, #268]	; (80755fc <__multiply+0x148>)
 80754f0:	f240 115d 	movw	r1, #349	; 0x15d
 80754f4:	f000 ff3a 	bl	807636c <__assert_func>
 80754f8:	f100 0614 	add.w	r6, r0, #20
 80754fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8075500:	4633      	mov	r3, r6
 8075502:	2200      	movs	r2, #0
 8075504:	4543      	cmp	r3, r8
 8075506:	d31e      	bcc.n	8075546 <__multiply+0x92>
 8075508:	f105 0c14 	add.w	ip, r5, #20
 807550c:	f104 0314 	add.w	r3, r4, #20
 8075510:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8075514:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8075518:	9202      	str	r2, [sp, #8]
 807551a:	ebac 0205 	sub.w	r2, ip, r5
 807551e:	3a15      	subs	r2, #21
 8075520:	f022 0203 	bic.w	r2, r2, #3
 8075524:	3204      	adds	r2, #4
 8075526:	f105 0115 	add.w	r1, r5, #21
 807552a:	458c      	cmp	ip, r1
 807552c:	bf38      	it	cc
 807552e:	2204      	movcc	r2, #4
 8075530:	9201      	str	r2, [sp, #4]
 8075532:	9a02      	ldr	r2, [sp, #8]
 8075534:	9303      	str	r3, [sp, #12]
 8075536:	429a      	cmp	r2, r3
 8075538:	d808      	bhi.n	807554c <__multiply+0x98>
 807553a:	2f00      	cmp	r7, #0
 807553c:	dc55      	bgt.n	80755ea <__multiply+0x136>
 807553e:	6107      	str	r7, [r0, #16]
 8075540:	b005      	add	sp, #20
 8075542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8075546:	f843 2b04 	str.w	r2, [r3], #4
 807554a:	e7db      	b.n	8075504 <__multiply+0x50>
 807554c:	f8b3 a000 	ldrh.w	sl, [r3]
 8075550:	f1ba 0f00 	cmp.w	sl, #0
 8075554:	d020      	beq.n	8075598 <__multiply+0xe4>
 8075556:	f105 0e14 	add.w	lr, r5, #20
 807555a:	46b1      	mov	r9, r6
 807555c:	2200      	movs	r2, #0
 807555e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8075562:	f8d9 b000 	ldr.w	fp, [r9]
 8075566:	b2a1      	uxth	r1, r4
 8075568:	fa1f fb8b 	uxth.w	fp, fp
 807556c:	fb0a b101 	mla	r1, sl, r1, fp
 8075570:	4411      	add	r1, r2
 8075572:	f8d9 2000 	ldr.w	r2, [r9]
 8075576:	0c24      	lsrs	r4, r4, #16
 8075578:	0c12      	lsrs	r2, r2, #16
 807557a:	fb0a 2404 	mla	r4, sl, r4, r2
 807557e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8075582:	b289      	uxth	r1, r1
 8075584:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8075588:	45f4      	cmp	ip, lr
 807558a:	f849 1b04 	str.w	r1, [r9], #4
 807558e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8075592:	d8e4      	bhi.n	807555e <__multiply+0xaa>
 8075594:	9901      	ldr	r1, [sp, #4]
 8075596:	5072      	str	r2, [r6, r1]
 8075598:	9a03      	ldr	r2, [sp, #12]
 807559a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 807559e:	3304      	adds	r3, #4
 80755a0:	f1b9 0f00 	cmp.w	r9, #0
 80755a4:	d01f      	beq.n	80755e6 <__multiply+0x132>
 80755a6:	6834      	ldr	r4, [r6, #0]
 80755a8:	f105 0114 	add.w	r1, r5, #20
 80755ac:	46b6      	mov	lr, r6
 80755ae:	f04f 0a00 	mov.w	sl, #0
 80755b2:	880a      	ldrh	r2, [r1, #0]
 80755b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80755b8:	fb09 b202 	mla	r2, r9, r2, fp
 80755bc:	4492      	add	sl, r2
 80755be:	b2a4      	uxth	r4, r4
 80755c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80755c4:	f84e 4b04 	str.w	r4, [lr], #4
 80755c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80755cc:	f8be 2000 	ldrh.w	r2, [lr]
 80755d0:	0c24      	lsrs	r4, r4, #16
 80755d2:	fb09 2404 	mla	r4, r9, r4, r2
 80755d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80755da:	458c      	cmp	ip, r1
 80755dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80755e0:	d8e7      	bhi.n	80755b2 <__multiply+0xfe>
 80755e2:	9a01      	ldr	r2, [sp, #4]
 80755e4:	50b4      	str	r4, [r6, r2]
 80755e6:	3604      	adds	r6, #4
 80755e8:	e7a3      	b.n	8075532 <__multiply+0x7e>
 80755ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80755ee:	2b00      	cmp	r3, #0
 80755f0:	d1a5      	bne.n	807553e <__multiply+0x8a>
 80755f2:	3f01      	subs	r7, #1
 80755f4:	e7a1      	b.n	807553a <__multiply+0x86>
 80755f6:	bf00      	nop
 80755f8:	08077104 	.word	0x08077104
 80755fc:	08077194 	.word	0x08077194

08075600 <__pow5mult>:
 8075600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8075604:	4615      	mov	r5, r2
 8075606:	f012 0203 	ands.w	r2, r2, #3
 807560a:	4606      	mov	r6, r0
 807560c:	460f      	mov	r7, r1
 807560e:	d007      	beq.n	8075620 <__pow5mult+0x20>
 8075610:	4c25      	ldr	r4, [pc, #148]	; (80756a8 <__pow5mult+0xa8>)
 8075612:	3a01      	subs	r2, #1
 8075614:	2300      	movs	r3, #0
 8075616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 807561a:	f7ff fe51 	bl	80752c0 <__multadd>
 807561e:	4607      	mov	r7, r0
 8075620:	10ad      	asrs	r5, r5, #2
 8075622:	d03d      	beq.n	80756a0 <__pow5mult+0xa0>
 8075624:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8075626:	b97c      	cbnz	r4, 8075648 <__pow5mult+0x48>
 8075628:	2010      	movs	r0, #16
 807562a:	f7ff fdc1 	bl	80751b0 <malloc>
 807562e:	4602      	mov	r2, r0
 8075630:	6270      	str	r0, [r6, #36]	; 0x24
 8075632:	b928      	cbnz	r0, 8075640 <__pow5mult+0x40>
 8075634:	4b1d      	ldr	r3, [pc, #116]	; (80756ac <__pow5mult+0xac>)
 8075636:	481e      	ldr	r0, [pc, #120]	; (80756b0 <__pow5mult+0xb0>)
 8075638:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 807563c:	f000 fe96 	bl	807636c <__assert_func>
 8075640:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8075644:	6004      	str	r4, [r0, #0]
 8075646:	60c4      	str	r4, [r0, #12]
 8075648:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 807564c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8075650:	b94c      	cbnz	r4, 8075666 <__pow5mult+0x66>
 8075652:	f240 2171 	movw	r1, #625	; 0x271
 8075656:	4630      	mov	r0, r6
 8075658:	f7ff ff16 	bl	8075488 <__i2b>
 807565c:	2300      	movs	r3, #0
 807565e:	f8c8 0008 	str.w	r0, [r8, #8]
 8075662:	4604      	mov	r4, r0
 8075664:	6003      	str	r3, [r0, #0]
 8075666:	f04f 0900 	mov.w	r9, #0
 807566a:	07eb      	lsls	r3, r5, #31
 807566c:	d50a      	bpl.n	8075684 <__pow5mult+0x84>
 807566e:	4639      	mov	r1, r7
 8075670:	4622      	mov	r2, r4
 8075672:	4630      	mov	r0, r6
 8075674:	f7ff ff1e 	bl	80754b4 <__multiply>
 8075678:	4639      	mov	r1, r7
 807567a:	4680      	mov	r8, r0
 807567c:	4630      	mov	r0, r6
 807567e:	f7ff fdfd 	bl	807527c <_Bfree>
 8075682:	4647      	mov	r7, r8
 8075684:	106d      	asrs	r5, r5, #1
 8075686:	d00b      	beq.n	80756a0 <__pow5mult+0xa0>
 8075688:	6820      	ldr	r0, [r4, #0]
 807568a:	b938      	cbnz	r0, 807569c <__pow5mult+0x9c>
 807568c:	4622      	mov	r2, r4
 807568e:	4621      	mov	r1, r4
 8075690:	4630      	mov	r0, r6
 8075692:	f7ff ff0f 	bl	80754b4 <__multiply>
 8075696:	6020      	str	r0, [r4, #0]
 8075698:	f8c0 9000 	str.w	r9, [r0]
 807569c:	4604      	mov	r4, r0
 807569e:	e7e4      	b.n	807566a <__pow5mult+0x6a>
 80756a0:	4638      	mov	r0, r7
 80756a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80756a6:	bf00      	nop
 80756a8:	080772e8 	.word	0x080772e8
 80756ac:	0807708e 	.word	0x0807708e
 80756b0:	08077194 	.word	0x08077194

080756b4 <__lshift>:
 80756b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80756b8:	460c      	mov	r4, r1
 80756ba:	6849      	ldr	r1, [r1, #4]
 80756bc:	6923      	ldr	r3, [r4, #16]
 80756be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80756c2:	68a3      	ldr	r3, [r4, #8]
 80756c4:	4607      	mov	r7, r0
 80756c6:	4691      	mov	r9, r2
 80756c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80756cc:	f108 0601 	add.w	r6, r8, #1
 80756d0:	42b3      	cmp	r3, r6
 80756d2:	db0b      	blt.n	80756ec <__lshift+0x38>
 80756d4:	4638      	mov	r0, r7
 80756d6:	f7ff fd91 	bl	80751fc <_Balloc>
 80756da:	4605      	mov	r5, r0
 80756dc:	b948      	cbnz	r0, 80756f2 <__lshift+0x3e>
 80756de:	4602      	mov	r2, r0
 80756e0:	4b28      	ldr	r3, [pc, #160]	; (8075784 <__lshift+0xd0>)
 80756e2:	4829      	ldr	r0, [pc, #164]	; (8075788 <__lshift+0xd4>)
 80756e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80756e8:	f000 fe40 	bl	807636c <__assert_func>
 80756ec:	3101      	adds	r1, #1
 80756ee:	005b      	lsls	r3, r3, #1
 80756f0:	e7ee      	b.n	80756d0 <__lshift+0x1c>
 80756f2:	2300      	movs	r3, #0
 80756f4:	f100 0114 	add.w	r1, r0, #20
 80756f8:	f100 0210 	add.w	r2, r0, #16
 80756fc:	4618      	mov	r0, r3
 80756fe:	4553      	cmp	r3, sl
 8075700:	db33      	blt.n	807576a <__lshift+0xb6>
 8075702:	6920      	ldr	r0, [r4, #16]
 8075704:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8075708:	f104 0314 	add.w	r3, r4, #20
 807570c:	f019 091f 	ands.w	r9, r9, #31
 8075710:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8075714:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8075718:	d02b      	beq.n	8075772 <__lshift+0xbe>
 807571a:	f1c9 0e20 	rsb	lr, r9, #32
 807571e:	468a      	mov	sl, r1
 8075720:	2200      	movs	r2, #0
 8075722:	6818      	ldr	r0, [r3, #0]
 8075724:	fa00 f009 	lsl.w	r0, r0, r9
 8075728:	4302      	orrs	r2, r0
 807572a:	f84a 2b04 	str.w	r2, [sl], #4
 807572e:	f853 2b04 	ldr.w	r2, [r3], #4
 8075732:	459c      	cmp	ip, r3
 8075734:	fa22 f20e 	lsr.w	r2, r2, lr
 8075738:	d8f3      	bhi.n	8075722 <__lshift+0x6e>
 807573a:	ebac 0304 	sub.w	r3, ip, r4
 807573e:	3b15      	subs	r3, #21
 8075740:	f023 0303 	bic.w	r3, r3, #3
 8075744:	3304      	adds	r3, #4
 8075746:	f104 0015 	add.w	r0, r4, #21
 807574a:	4584      	cmp	ip, r0
 807574c:	bf38      	it	cc
 807574e:	2304      	movcc	r3, #4
 8075750:	50ca      	str	r2, [r1, r3]
 8075752:	b10a      	cbz	r2, 8075758 <__lshift+0xa4>
 8075754:	f108 0602 	add.w	r6, r8, #2
 8075758:	3e01      	subs	r6, #1
 807575a:	4638      	mov	r0, r7
 807575c:	612e      	str	r6, [r5, #16]
 807575e:	4621      	mov	r1, r4
 8075760:	f7ff fd8c 	bl	807527c <_Bfree>
 8075764:	4628      	mov	r0, r5
 8075766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 807576a:	f842 0f04 	str.w	r0, [r2, #4]!
 807576e:	3301      	adds	r3, #1
 8075770:	e7c5      	b.n	80756fe <__lshift+0x4a>
 8075772:	3904      	subs	r1, #4
 8075774:	f853 2b04 	ldr.w	r2, [r3], #4
 8075778:	f841 2f04 	str.w	r2, [r1, #4]!
 807577c:	459c      	cmp	ip, r3
 807577e:	d8f9      	bhi.n	8075774 <__lshift+0xc0>
 8075780:	e7ea      	b.n	8075758 <__lshift+0xa4>
 8075782:	bf00      	nop
 8075784:	08077104 	.word	0x08077104
 8075788:	08077194 	.word	0x08077194

0807578c <__mcmp>:
 807578c:	b530      	push	{r4, r5, lr}
 807578e:	6902      	ldr	r2, [r0, #16]
 8075790:	690c      	ldr	r4, [r1, #16]
 8075792:	1b12      	subs	r2, r2, r4
 8075794:	d10e      	bne.n	80757b4 <__mcmp+0x28>
 8075796:	f100 0314 	add.w	r3, r0, #20
 807579a:	3114      	adds	r1, #20
 807579c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80757a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80757a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80757a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80757ac:	42a5      	cmp	r5, r4
 80757ae:	d003      	beq.n	80757b8 <__mcmp+0x2c>
 80757b0:	d305      	bcc.n	80757be <__mcmp+0x32>
 80757b2:	2201      	movs	r2, #1
 80757b4:	4610      	mov	r0, r2
 80757b6:	bd30      	pop	{r4, r5, pc}
 80757b8:	4283      	cmp	r3, r0
 80757ba:	d3f3      	bcc.n	80757a4 <__mcmp+0x18>
 80757bc:	e7fa      	b.n	80757b4 <__mcmp+0x28>
 80757be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80757c2:	e7f7      	b.n	80757b4 <__mcmp+0x28>

080757c4 <__mdiff>:
 80757c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80757c8:	460c      	mov	r4, r1
 80757ca:	4606      	mov	r6, r0
 80757cc:	4611      	mov	r1, r2
 80757ce:	4620      	mov	r0, r4
 80757d0:	4617      	mov	r7, r2
 80757d2:	f7ff ffdb 	bl	807578c <__mcmp>
 80757d6:	1e05      	subs	r5, r0, #0
 80757d8:	d110      	bne.n	80757fc <__mdiff+0x38>
 80757da:	4629      	mov	r1, r5
 80757dc:	4630      	mov	r0, r6
 80757de:	f7ff fd0d 	bl	80751fc <_Balloc>
 80757e2:	b930      	cbnz	r0, 80757f2 <__mdiff+0x2e>
 80757e4:	4b39      	ldr	r3, [pc, #228]	; (80758cc <__mdiff+0x108>)
 80757e6:	4602      	mov	r2, r0
 80757e8:	f240 2132 	movw	r1, #562	; 0x232
 80757ec:	4838      	ldr	r0, [pc, #224]	; (80758d0 <__mdiff+0x10c>)
 80757ee:	f000 fdbd 	bl	807636c <__assert_func>
 80757f2:	2301      	movs	r3, #1
 80757f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80757f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80757fc:	bfa4      	itt	ge
 80757fe:	463b      	movge	r3, r7
 8075800:	4627      	movge	r7, r4
 8075802:	4630      	mov	r0, r6
 8075804:	6879      	ldr	r1, [r7, #4]
 8075806:	bfa6      	itte	ge
 8075808:	461c      	movge	r4, r3
 807580a:	2500      	movge	r5, #0
 807580c:	2501      	movlt	r5, #1
 807580e:	f7ff fcf5 	bl	80751fc <_Balloc>
 8075812:	b920      	cbnz	r0, 807581e <__mdiff+0x5a>
 8075814:	4b2d      	ldr	r3, [pc, #180]	; (80758cc <__mdiff+0x108>)
 8075816:	4602      	mov	r2, r0
 8075818:	f44f 7110 	mov.w	r1, #576	; 0x240
 807581c:	e7e6      	b.n	80757ec <__mdiff+0x28>
 807581e:	693e      	ldr	r6, [r7, #16]
 8075820:	60c5      	str	r5, [r0, #12]
 8075822:	6925      	ldr	r5, [r4, #16]
 8075824:	f107 0114 	add.w	r1, r7, #20
 8075828:	f104 0914 	add.w	r9, r4, #20
 807582c:	f100 0e14 	add.w	lr, r0, #20
 8075830:	f107 0210 	add.w	r2, r7, #16
 8075834:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8075838:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 807583c:	46f2      	mov	sl, lr
 807583e:	2700      	movs	r7, #0
 8075840:	f859 3b04 	ldr.w	r3, [r9], #4
 8075844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8075848:	fa1f f883 	uxth.w	r8, r3
 807584c:	fa17 f78b 	uxtah	r7, r7, fp
 8075850:	0c1b      	lsrs	r3, r3, #16
 8075852:	eba7 0808 	sub.w	r8, r7, r8
 8075856:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 807585a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 807585e:	fa1f f888 	uxth.w	r8, r8
 8075862:	141f      	asrs	r7, r3, #16
 8075864:	454d      	cmp	r5, r9
 8075866:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 807586a:	f84a 3b04 	str.w	r3, [sl], #4
 807586e:	d8e7      	bhi.n	8075840 <__mdiff+0x7c>
 8075870:	1b2b      	subs	r3, r5, r4
 8075872:	3b15      	subs	r3, #21
 8075874:	f023 0303 	bic.w	r3, r3, #3
 8075878:	3304      	adds	r3, #4
 807587a:	3415      	adds	r4, #21
 807587c:	42a5      	cmp	r5, r4
 807587e:	bf38      	it	cc
 8075880:	2304      	movcc	r3, #4
 8075882:	4419      	add	r1, r3
 8075884:	4473      	add	r3, lr
 8075886:	469e      	mov	lr, r3
 8075888:	460d      	mov	r5, r1
 807588a:	4565      	cmp	r5, ip
 807588c:	d30e      	bcc.n	80758ac <__mdiff+0xe8>
 807588e:	f10c 0203 	add.w	r2, ip, #3
 8075892:	1a52      	subs	r2, r2, r1
 8075894:	f022 0203 	bic.w	r2, r2, #3
 8075898:	3903      	subs	r1, #3
 807589a:	458c      	cmp	ip, r1
 807589c:	bf38      	it	cc
 807589e:	2200      	movcc	r2, #0
 80758a0:	441a      	add	r2, r3
 80758a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80758a6:	b17b      	cbz	r3, 80758c8 <__mdiff+0x104>
 80758a8:	6106      	str	r6, [r0, #16]
 80758aa:	e7a5      	b.n	80757f8 <__mdiff+0x34>
 80758ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80758b0:	fa17 f488 	uxtah	r4, r7, r8
 80758b4:	1422      	asrs	r2, r4, #16
 80758b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80758ba:	b2a4      	uxth	r4, r4
 80758bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80758c0:	f84e 4b04 	str.w	r4, [lr], #4
 80758c4:	1417      	asrs	r7, r2, #16
 80758c6:	e7e0      	b.n	807588a <__mdiff+0xc6>
 80758c8:	3e01      	subs	r6, #1
 80758ca:	e7ea      	b.n	80758a2 <__mdiff+0xde>
 80758cc:	08077104 	.word	0x08077104
 80758d0:	08077194 	.word	0x08077194

080758d4 <__ulp>:
 80758d4:	b082      	sub	sp, #8
 80758d6:	ed8d 0b00 	vstr	d0, [sp]
 80758da:	9b01      	ldr	r3, [sp, #4]
 80758dc:	4912      	ldr	r1, [pc, #72]	; (8075928 <__ulp+0x54>)
 80758de:	4019      	ands	r1, r3
 80758e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80758e4:	2900      	cmp	r1, #0
 80758e6:	dd05      	ble.n	80758f4 <__ulp+0x20>
 80758e8:	2200      	movs	r2, #0
 80758ea:	460b      	mov	r3, r1
 80758ec:	ec43 2b10 	vmov	d0, r2, r3
 80758f0:	b002      	add	sp, #8
 80758f2:	4770      	bx	lr
 80758f4:	4249      	negs	r1, r1
 80758f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80758fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80758fe:	f04f 0200 	mov.w	r2, #0
 8075902:	f04f 0300 	mov.w	r3, #0
 8075906:	da04      	bge.n	8075912 <__ulp+0x3e>
 8075908:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 807590c:	fa41 f300 	asr.w	r3, r1, r0
 8075910:	e7ec      	b.n	80758ec <__ulp+0x18>
 8075912:	f1a0 0114 	sub.w	r1, r0, #20
 8075916:	291e      	cmp	r1, #30
 8075918:	bfda      	itte	le
 807591a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 807591e:	fa20 f101 	lsrle.w	r1, r0, r1
 8075922:	2101      	movgt	r1, #1
 8075924:	460a      	mov	r2, r1
 8075926:	e7e1      	b.n	80758ec <__ulp+0x18>
 8075928:	7ff00000 	.word	0x7ff00000

0807592c <__b2d>:
 807592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807592e:	6905      	ldr	r5, [r0, #16]
 8075930:	f100 0714 	add.w	r7, r0, #20
 8075934:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8075938:	1f2e      	subs	r6, r5, #4
 807593a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 807593e:	4620      	mov	r0, r4
 8075940:	f7ff fd52 	bl	80753e8 <__hi0bits>
 8075944:	f1c0 0320 	rsb	r3, r0, #32
 8075948:	280a      	cmp	r0, #10
 807594a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80759c8 <__b2d+0x9c>
 807594e:	600b      	str	r3, [r1, #0]
 8075950:	dc14      	bgt.n	807597c <__b2d+0x50>
 8075952:	f1c0 0e0b 	rsb	lr, r0, #11
 8075956:	fa24 f10e 	lsr.w	r1, r4, lr
 807595a:	42b7      	cmp	r7, r6
 807595c:	ea41 030c 	orr.w	r3, r1, ip
 8075960:	bf34      	ite	cc
 8075962:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8075966:	2100      	movcs	r1, #0
 8075968:	3015      	adds	r0, #21
 807596a:	fa04 f000 	lsl.w	r0, r4, r0
 807596e:	fa21 f10e 	lsr.w	r1, r1, lr
 8075972:	ea40 0201 	orr.w	r2, r0, r1
 8075976:	ec43 2b10 	vmov	d0, r2, r3
 807597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 807597c:	42b7      	cmp	r7, r6
 807597e:	bf3a      	itte	cc
 8075980:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8075984:	f1a5 0608 	subcc.w	r6, r5, #8
 8075988:	2100      	movcs	r1, #0
 807598a:	380b      	subs	r0, #11
 807598c:	d017      	beq.n	80759be <__b2d+0x92>
 807598e:	f1c0 0c20 	rsb	ip, r0, #32
 8075992:	fa04 f500 	lsl.w	r5, r4, r0
 8075996:	42be      	cmp	r6, r7
 8075998:	fa21 f40c 	lsr.w	r4, r1, ip
 807599c:	ea45 0504 	orr.w	r5, r5, r4
 80759a0:	bf8c      	ite	hi
 80759a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80759a6:	2400      	movls	r4, #0
 80759a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80759ac:	fa01 f000 	lsl.w	r0, r1, r0
 80759b0:	fa24 f40c 	lsr.w	r4, r4, ip
 80759b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80759b8:	ea40 0204 	orr.w	r2, r0, r4
 80759bc:	e7db      	b.n	8075976 <__b2d+0x4a>
 80759be:	ea44 030c 	orr.w	r3, r4, ip
 80759c2:	460a      	mov	r2, r1
 80759c4:	e7d7      	b.n	8075976 <__b2d+0x4a>
 80759c6:	bf00      	nop
 80759c8:	3ff00000 	.word	0x3ff00000

080759cc <__d2b>:
 80759cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80759d0:	4689      	mov	r9, r1
 80759d2:	2101      	movs	r1, #1
 80759d4:	ec57 6b10 	vmov	r6, r7, d0
 80759d8:	4690      	mov	r8, r2
 80759da:	f7ff fc0f 	bl	80751fc <_Balloc>
 80759de:	4604      	mov	r4, r0
 80759e0:	b930      	cbnz	r0, 80759f0 <__d2b+0x24>
 80759e2:	4602      	mov	r2, r0
 80759e4:	4b25      	ldr	r3, [pc, #148]	; (8075a7c <__d2b+0xb0>)
 80759e6:	4826      	ldr	r0, [pc, #152]	; (8075a80 <__d2b+0xb4>)
 80759e8:	f240 310a 	movw	r1, #778	; 0x30a
 80759ec:	f000 fcbe 	bl	807636c <__assert_func>
 80759f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80759f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80759f8:	bb35      	cbnz	r5, 8075a48 <__d2b+0x7c>
 80759fa:	2e00      	cmp	r6, #0
 80759fc:	9301      	str	r3, [sp, #4]
 80759fe:	d028      	beq.n	8075a52 <__d2b+0x86>
 8075a00:	4668      	mov	r0, sp
 8075a02:	9600      	str	r6, [sp, #0]
 8075a04:	f7ff fd10 	bl	8075428 <__lo0bits>
 8075a08:	9900      	ldr	r1, [sp, #0]
 8075a0a:	b300      	cbz	r0, 8075a4e <__d2b+0x82>
 8075a0c:	9a01      	ldr	r2, [sp, #4]
 8075a0e:	f1c0 0320 	rsb	r3, r0, #32
 8075a12:	fa02 f303 	lsl.w	r3, r2, r3
 8075a16:	430b      	orrs	r3, r1
 8075a18:	40c2      	lsrs	r2, r0
 8075a1a:	6163      	str	r3, [r4, #20]
 8075a1c:	9201      	str	r2, [sp, #4]
 8075a1e:	9b01      	ldr	r3, [sp, #4]
 8075a20:	61a3      	str	r3, [r4, #24]
 8075a22:	2b00      	cmp	r3, #0
 8075a24:	bf14      	ite	ne
 8075a26:	2202      	movne	r2, #2
 8075a28:	2201      	moveq	r2, #1
 8075a2a:	6122      	str	r2, [r4, #16]
 8075a2c:	b1d5      	cbz	r5, 8075a64 <__d2b+0x98>
 8075a2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8075a32:	4405      	add	r5, r0
 8075a34:	f8c9 5000 	str.w	r5, [r9]
 8075a38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8075a3c:	f8c8 0000 	str.w	r0, [r8]
 8075a40:	4620      	mov	r0, r4
 8075a42:	b003      	add	sp, #12
 8075a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8075a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8075a4c:	e7d5      	b.n	80759fa <__d2b+0x2e>
 8075a4e:	6161      	str	r1, [r4, #20]
 8075a50:	e7e5      	b.n	8075a1e <__d2b+0x52>
 8075a52:	a801      	add	r0, sp, #4
 8075a54:	f7ff fce8 	bl	8075428 <__lo0bits>
 8075a58:	9b01      	ldr	r3, [sp, #4]
 8075a5a:	6163      	str	r3, [r4, #20]
 8075a5c:	2201      	movs	r2, #1
 8075a5e:	6122      	str	r2, [r4, #16]
 8075a60:	3020      	adds	r0, #32
 8075a62:	e7e3      	b.n	8075a2c <__d2b+0x60>
 8075a64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8075a68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8075a6c:	f8c9 0000 	str.w	r0, [r9]
 8075a70:	6918      	ldr	r0, [r3, #16]
 8075a72:	f7ff fcb9 	bl	80753e8 <__hi0bits>
 8075a76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8075a7a:	e7df      	b.n	8075a3c <__d2b+0x70>
 8075a7c:	08077104 	.word	0x08077104
 8075a80:	08077194 	.word	0x08077194

08075a84 <__ratio>:
 8075a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8075a88:	4688      	mov	r8, r1
 8075a8a:	4669      	mov	r1, sp
 8075a8c:	4681      	mov	r9, r0
 8075a8e:	f7ff ff4d 	bl	807592c <__b2d>
 8075a92:	a901      	add	r1, sp, #4
 8075a94:	4640      	mov	r0, r8
 8075a96:	ec55 4b10 	vmov	r4, r5, d0
 8075a9a:	f7ff ff47 	bl	807592c <__b2d>
 8075a9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8075aa2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8075aa6:	eba3 0c02 	sub.w	ip, r3, r2
 8075aaa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8075aae:	1a9b      	subs	r3, r3, r2
 8075ab0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8075ab4:	ec51 0b10 	vmov	r0, r1, d0
 8075ab8:	2b00      	cmp	r3, #0
 8075aba:	bfd6      	itet	le
 8075abc:	460a      	movle	r2, r1
 8075abe:	462a      	movgt	r2, r5
 8075ac0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8075ac4:	468b      	mov	fp, r1
 8075ac6:	462f      	mov	r7, r5
 8075ac8:	bfd4      	ite	le
 8075aca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8075ace:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8075ad2:	4620      	mov	r0, r4
 8075ad4:	ee10 2a10 	vmov	r2, s0
 8075ad8:	465b      	mov	r3, fp
 8075ada:	4639      	mov	r1, r7
 8075adc:	f7ea fece 	bl	806087c <__aeabi_ddiv>
 8075ae0:	ec41 0b10 	vmov	d0, r0, r1
 8075ae4:	b003      	add	sp, #12
 8075ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08075aea <__copybits>:
 8075aea:	3901      	subs	r1, #1
 8075aec:	b570      	push	{r4, r5, r6, lr}
 8075aee:	1149      	asrs	r1, r1, #5
 8075af0:	6914      	ldr	r4, [r2, #16]
 8075af2:	3101      	adds	r1, #1
 8075af4:	f102 0314 	add.w	r3, r2, #20
 8075af8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8075afc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8075b00:	1f05      	subs	r5, r0, #4
 8075b02:	42a3      	cmp	r3, r4
 8075b04:	d30c      	bcc.n	8075b20 <__copybits+0x36>
 8075b06:	1aa3      	subs	r3, r4, r2
 8075b08:	3b11      	subs	r3, #17
 8075b0a:	f023 0303 	bic.w	r3, r3, #3
 8075b0e:	3211      	adds	r2, #17
 8075b10:	42a2      	cmp	r2, r4
 8075b12:	bf88      	it	hi
 8075b14:	2300      	movhi	r3, #0
 8075b16:	4418      	add	r0, r3
 8075b18:	2300      	movs	r3, #0
 8075b1a:	4288      	cmp	r0, r1
 8075b1c:	d305      	bcc.n	8075b2a <__copybits+0x40>
 8075b1e:	bd70      	pop	{r4, r5, r6, pc}
 8075b20:	f853 6b04 	ldr.w	r6, [r3], #4
 8075b24:	f845 6f04 	str.w	r6, [r5, #4]!
 8075b28:	e7eb      	b.n	8075b02 <__copybits+0x18>
 8075b2a:	f840 3b04 	str.w	r3, [r0], #4
 8075b2e:	e7f4      	b.n	8075b1a <__copybits+0x30>

08075b30 <__any_on>:
 8075b30:	f100 0214 	add.w	r2, r0, #20
 8075b34:	6900      	ldr	r0, [r0, #16]
 8075b36:	114b      	asrs	r3, r1, #5
 8075b38:	4298      	cmp	r0, r3
 8075b3a:	b510      	push	{r4, lr}
 8075b3c:	db11      	blt.n	8075b62 <__any_on+0x32>
 8075b3e:	dd0a      	ble.n	8075b56 <__any_on+0x26>
 8075b40:	f011 011f 	ands.w	r1, r1, #31
 8075b44:	d007      	beq.n	8075b56 <__any_on+0x26>
 8075b46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8075b4a:	fa24 f001 	lsr.w	r0, r4, r1
 8075b4e:	fa00 f101 	lsl.w	r1, r0, r1
 8075b52:	428c      	cmp	r4, r1
 8075b54:	d10b      	bne.n	8075b6e <__any_on+0x3e>
 8075b56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8075b5a:	4293      	cmp	r3, r2
 8075b5c:	d803      	bhi.n	8075b66 <__any_on+0x36>
 8075b5e:	2000      	movs	r0, #0
 8075b60:	bd10      	pop	{r4, pc}
 8075b62:	4603      	mov	r3, r0
 8075b64:	e7f7      	b.n	8075b56 <__any_on+0x26>
 8075b66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8075b6a:	2900      	cmp	r1, #0
 8075b6c:	d0f5      	beq.n	8075b5a <__any_on+0x2a>
 8075b6e:	2001      	movs	r0, #1
 8075b70:	e7f6      	b.n	8075b60 <__any_on+0x30>

08075b72 <_calloc_r>:
 8075b72:	b513      	push	{r0, r1, r4, lr}
 8075b74:	434a      	muls	r2, r1
 8075b76:	4611      	mov	r1, r2
 8075b78:	9201      	str	r2, [sp, #4]
 8075b7a:	f7fc f9b9 	bl	8071ef0 <_malloc_r>
 8075b7e:	4604      	mov	r4, r0
 8075b80:	b118      	cbz	r0, 8075b8a <_calloc_r+0x18>
 8075b82:	9a01      	ldr	r2, [sp, #4]
 8075b84:	2100      	movs	r1, #0
 8075b86:	f7fc f9aa 	bl	8071ede <memset>
 8075b8a:	4620      	mov	r0, r4
 8075b8c:	b002      	add	sp, #8
 8075b8e:	bd10      	pop	{r4, pc}

08075b90 <_free_r>:
 8075b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8075b92:	2900      	cmp	r1, #0
 8075b94:	d048      	beq.n	8075c28 <_free_r+0x98>
 8075b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8075b9a:	9001      	str	r0, [sp, #4]
 8075b9c:	2b00      	cmp	r3, #0
 8075b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8075ba2:	bfb8      	it	lt
 8075ba4:	18e4      	addlt	r4, r4, r3
 8075ba6:	f7ff fb1d 	bl	80751e4 <__malloc_lock>
 8075baa:	4a20      	ldr	r2, [pc, #128]	; (8075c2c <_free_r+0x9c>)
 8075bac:	9801      	ldr	r0, [sp, #4]
 8075bae:	6813      	ldr	r3, [r2, #0]
 8075bb0:	4615      	mov	r5, r2
 8075bb2:	b933      	cbnz	r3, 8075bc2 <_free_r+0x32>
 8075bb4:	6063      	str	r3, [r4, #4]
 8075bb6:	6014      	str	r4, [r2, #0]
 8075bb8:	b003      	add	sp, #12
 8075bba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8075bbe:	f7ff bb17 	b.w	80751f0 <__malloc_unlock>
 8075bc2:	42a3      	cmp	r3, r4
 8075bc4:	d90b      	bls.n	8075bde <_free_r+0x4e>
 8075bc6:	6821      	ldr	r1, [r4, #0]
 8075bc8:	1862      	adds	r2, r4, r1
 8075bca:	4293      	cmp	r3, r2
 8075bcc:	bf04      	itt	eq
 8075bce:	681a      	ldreq	r2, [r3, #0]
 8075bd0:	685b      	ldreq	r3, [r3, #4]
 8075bd2:	6063      	str	r3, [r4, #4]
 8075bd4:	bf04      	itt	eq
 8075bd6:	1852      	addeq	r2, r2, r1
 8075bd8:	6022      	streq	r2, [r4, #0]
 8075bda:	602c      	str	r4, [r5, #0]
 8075bdc:	e7ec      	b.n	8075bb8 <_free_r+0x28>
 8075bde:	461a      	mov	r2, r3
 8075be0:	685b      	ldr	r3, [r3, #4]
 8075be2:	b10b      	cbz	r3, 8075be8 <_free_r+0x58>
 8075be4:	42a3      	cmp	r3, r4
 8075be6:	d9fa      	bls.n	8075bde <_free_r+0x4e>
 8075be8:	6811      	ldr	r1, [r2, #0]
 8075bea:	1855      	adds	r5, r2, r1
 8075bec:	42a5      	cmp	r5, r4
 8075bee:	d10b      	bne.n	8075c08 <_free_r+0x78>
 8075bf0:	6824      	ldr	r4, [r4, #0]
 8075bf2:	4421      	add	r1, r4
 8075bf4:	1854      	adds	r4, r2, r1
 8075bf6:	42a3      	cmp	r3, r4
 8075bf8:	6011      	str	r1, [r2, #0]
 8075bfa:	d1dd      	bne.n	8075bb8 <_free_r+0x28>
 8075bfc:	681c      	ldr	r4, [r3, #0]
 8075bfe:	685b      	ldr	r3, [r3, #4]
 8075c00:	6053      	str	r3, [r2, #4]
 8075c02:	4421      	add	r1, r4
 8075c04:	6011      	str	r1, [r2, #0]
 8075c06:	e7d7      	b.n	8075bb8 <_free_r+0x28>
 8075c08:	d902      	bls.n	8075c10 <_free_r+0x80>
 8075c0a:	230c      	movs	r3, #12
 8075c0c:	6003      	str	r3, [r0, #0]
 8075c0e:	e7d3      	b.n	8075bb8 <_free_r+0x28>
 8075c10:	6825      	ldr	r5, [r4, #0]
 8075c12:	1961      	adds	r1, r4, r5
 8075c14:	428b      	cmp	r3, r1
 8075c16:	bf04      	itt	eq
 8075c18:	6819      	ldreq	r1, [r3, #0]
 8075c1a:	685b      	ldreq	r3, [r3, #4]
 8075c1c:	6063      	str	r3, [r4, #4]
 8075c1e:	bf04      	itt	eq
 8075c20:	1949      	addeq	r1, r1, r5
 8075c22:	6021      	streq	r1, [r4, #0]
 8075c24:	6054      	str	r4, [r2, #4]
 8075c26:	e7c7      	b.n	8075bb8 <_free_r+0x28>
 8075c28:	b003      	add	sp, #12
 8075c2a:	bd30      	pop	{r4, r5, pc}
 8075c2c:	20004e28 	.word	0x20004e28

08075c30 <__ssputs_r>:
 8075c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8075c34:	688e      	ldr	r6, [r1, #8]
 8075c36:	429e      	cmp	r6, r3
 8075c38:	4682      	mov	sl, r0
 8075c3a:	460c      	mov	r4, r1
 8075c3c:	4690      	mov	r8, r2
 8075c3e:	461f      	mov	r7, r3
 8075c40:	d838      	bhi.n	8075cb4 <__ssputs_r+0x84>
 8075c42:	898a      	ldrh	r2, [r1, #12]
 8075c44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8075c48:	d032      	beq.n	8075cb0 <__ssputs_r+0x80>
 8075c4a:	6825      	ldr	r5, [r4, #0]
 8075c4c:	6909      	ldr	r1, [r1, #16]
 8075c4e:	eba5 0901 	sub.w	r9, r5, r1
 8075c52:	6965      	ldr	r5, [r4, #20]
 8075c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8075c58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8075c5c:	3301      	adds	r3, #1
 8075c5e:	444b      	add	r3, r9
 8075c60:	106d      	asrs	r5, r5, #1
 8075c62:	429d      	cmp	r5, r3
 8075c64:	bf38      	it	cc
 8075c66:	461d      	movcc	r5, r3
 8075c68:	0553      	lsls	r3, r2, #21
 8075c6a:	d531      	bpl.n	8075cd0 <__ssputs_r+0xa0>
 8075c6c:	4629      	mov	r1, r5
 8075c6e:	f7fc f93f 	bl	8071ef0 <_malloc_r>
 8075c72:	4606      	mov	r6, r0
 8075c74:	b950      	cbnz	r0, 8075c8c <__ssputs_r+0x5c>
 8075c76:	230c      	movs	r3, #12
 8075c78:	f8ca 3000 	str.w	r3, [sl]
 8075c7c:	89a3      	ldrh	r3, [r4, #12]
 8075c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8075c82:	81a3      	strh	r3, [r4, #12]
 8075c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8075c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8075c8c:	6921      	ldr	r1, [r4, #16]
 8075c8e:	464a      	mov	r2, r9
 8075c90:	f7fc f917 	bl	8071ec2 <memcpy>
 8075c94:	89a3      	ldrh	r3, [r4, #12]
 8075c96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8075c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8075c9e:	81a3      	strh	r3, [r4, #12]
 8075ca0:	6126      	str	r6, [r4, #16]
 8075ca2:	6165      	str	r5, [r4, #20]
 8075ca4:	444e      	add	r6, r9
 8075ca6:	eba5 0509 	sub.w	r5, r5, r9
 8075caa:	6026      	str	r6, [r4, #0]
 8075cac:	60a5      	str	r5, [r4, #8]
 8075cae:	463e      	mov	r6, r7
 8075cb0:	42be      	cmp	r6, r7
 8075cb2:	d900      	bls.n	8075cb6 <__ssputs_r+0x86>
 8075cb4:	463e      	mov	r6, r7
 8075cb6:	4632      	mov	r2, r6
 8075cb8:	6820      	ldr	r0, [r4, #0]
 8075cba:	4641      	mov	r1, r8
 8075cbc:	f000 fbea 	bl	8076494 <memmove>
 8075cc0:	68a3      	ldr	r3, [r4, #8]
 8075cc2:	6822      	ldr	r2, [r4, #0]
 8075cc4:	1b9b      	subs	r3, r3, r6
 8075cc6:	4432      	add	r2, r6
 8075cc8:	60a3      	str	r3, [r4, #8]
 8075cca:	6022      	str	r2, [r4, #0]
 8075ccc:	2000      	movs	r0, #0
 8075cce:	e7db      	b.n	8075c88 <__ssputs_r+0x58>
 8075cd0:	462a      	mov	r2, r5
 8075cd2:	f000 fbf9 	bl	80764c8 <_realloc_r>
 8075cd6:	4606      	mov	r6, r0
 8075cd8:	2800      	cmp	r0, #0
 8075cda:	d1e1      	bne.n	8075ca0 <__ssputs_r+0x70>
 8075cdc:	6921      	ldr	r1, [r4, #16]
 8075cde:	4650      	mov	r0, sl
 8075ce0:	f7ff ff56 	bl	8075b90 <_free_r>
 8075ce4:	e7c7      	b.n	8075c76 <__ssputs_r+0x46>
	...

08075ce8 <_svfiprintf_r>:
 8075ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8075cec:	4698      	mov	r8, r3
 8075cee:	898b      	ldrh	r3, [r1, #12]
 8075cf0:	061b      	lsls	r3, r3, #24
 8075cf2:	b09d      	sub	sp, #116	; 0x74
 8075cf4:	4607      	mov	r7, r0
 8075cf6:	460d      	mov	r5, r1
 8075cf8:	4614      	mov	r4, r2
 8075cfa:	d50e      	bpl.n	8075d1a <_svfiprintf_r+0x32>
 8075cfc:	690b      	ldr	r3, [r1, #16]
 8075cfe:	b963      	cbnz	r3, 8075d1a <_svfiprintf_r+0x32>
 8075d00:	2140      	movs	r1, #64	; 0x40
 8075d02:	f7fc f8f5 	bl	8071ef0 <_malloc_r>
 8075d06:	6028      	str	r0, [r5, #0]
 8075d08:	6128      	str	r0, [r5, #16]
 8075d0a:	b920      	cbnz	r0, 8075d16 <_svfiprintf_r+0x2e>
 8075d0c:	230c      	movs	r3, #12
 8075d0e:	603b      	str	r3, [r7, #0]
 8075d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8075d14:	e0d1      	b.n	8075eba <_svfiprintf_r+0x1d2>
 8075d16:	2340      	movs	r3, #64	; 0x40
 8075d18:	616b      	str	r3, [r5, #20]
 8075d1a:	2300      	movs	r3, #0
 8075d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8075d1e:	2320      	movs	r3, #32
 8075d20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8075d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8075d28:	2330      	movs	r3, #48	; 0x30
 8075d2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8075ed4 <_svfiprintf_r+0x1ec>
 8075d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8075d32:	f04f 0901 	mov.w	r9, #1
 8075d36:	4623      	mov	r3, r4
 8075d38:	469a      	mov	sl, r3
 8075d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8075d3e:	b10a      	cbz	r2, 8075d44 <_svfiprintf_r+0x5c>
 8075d40:	2a25      	cmp	r2, #37	; 0x25
 8075d42:	d1f9      	bne.n	8075d38 <_svfiprintf_r+0x50>
 8075d44:	ebba 0b04 	subs.w	fp, sl, r4
 8075d48:	d00b      	beq.n	8075d62 <_svfiprintf_r+0x7a>
 8075d4a:	465b      	mov	r3, fp
 8075d4c:	4622      	mov	r2, r4
 8075d4e:	4629      	mov	r1, r5
 8075d50:	4638      	mov	r0, r7
 8075d52:	f7ff ff6d 	bl	8075c30 <__ssputs_r>
 8075d56:	3001      	adds	r0, #1
 8075d58:	f000 80aa 	beq.w	8075eb0 <_svfiprintf_r+0x1c8>
 8075d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8075d5e:	445a      	add	r2, fp
 8075d60:	9209      	str	r2, [sp, #36]	; 0x24
 8075d62:	f89a 3000 	ldrb.w	r3, [sl]
 8075d66:	2b00      	cmp	r3, #0
 8075d68:	f000 80a2 	beq.w	8075eb0 <_svfiprintf_r+0x1c8>
 8075d6c:	2300      	movs	r3, #0
 8075d6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8075d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8075d76:	f10a 0a01 	add.w	sl, sl, #1
 8075d7a:	9304      	str	r3, [sp, #16]
 8075d7c:	9307      	str	r3, [sp, #28]
 8075d7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8075d82:	931a      	str	r3, [sp, #104]	; 0x68
 8075d84:	4654      	mov	r4, sl
 8075d86:	2205      	movs	r2, #5
 8075d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8075d8c:	4851      	ldr	r0, [pc, #324]	; (8075ed4 <_svfiprintf_r+0x1ec>)
 8075d8e:	f7ea fa3f 	bl	8060210 <memchr>
 8075d92:	9a04      	ldr	r2, [sp, #16]
 8075d94:	b9d8      	cbnz	r0, 8075dce <_svfiprintf_r+0xe6>
 8075d96:	06d0      	lsls	r0, r2, #27
 8075d98:	bf44      	itt	mi
 8075d9a:	2320      	movmi	r3, #32
 8075d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8075da0:	0711      	lsls	r1, r2, #28
 8075da2:	bf44      	itt	mi
 8075da4:	232b      	movmi	r3, #43	; 0x2b
 8075da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8075daa:	f89a 3000 	ldrb.w	r3, [sl]
 8075dae:	2b2a      	cmp	r3, #42	; 0x2a
 8075db0:	d015      	beq.n	8075dde <_svfiprintf_r+0xf6>
 8075db2:	9a07      	ldr	r2, [sp, #28]
 8075db4:	4654      	mov	r4, sl
 8075db6:	2000      	movs	r0, #0
 8075db8:	f04f 0c0a 	mov.w	ip, #10
 8075dbc:	4621      	mov	r1, r4
 8075dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8075dc2:	3b30      	subs	r3, #48	; 0x30
 8075dc4:	2b09      	cmp	r3, #9
 8075dc6:	d94e      	bls.n	8075e66 <_svfiprintf_r+0x17e>
 8075dc8:	b1b0      	cbz	r0, 8075df8 <_svfiprintf_r+0x110>
 8075dca:	9207      	str	r2, [sp, #28]
 8075dcc:	e014      	b.n	8075df8 <_svfiprintf_r+0x110>
 8075dce:	eba0 0308 	sub.w	r3, r0, r8
 8075dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8075dd6:	4313      	orrs	r3, r2
 8075dd8:	9304      	str	r3, [sp, #16]
 8075dda:	46a2      	mov	sl, r4
 8075ddc:	e7d2      	b.n	8075d84 <_svfiprintf_r+0x9c>
 8075dde:	9b03      	ldr	r3, [sp, #12]
 8075de0:	1d19      	adds	r1, r3, #4
 8075de2:	681b      	ldr	r3, [r3, #0]
 8075de4:	9103      	str	r1, [sp, #12]
 8075de6:	2b00      	cmp	r3, #0
 8075de8:	bfbb      	ittet	lt
 8075dea:	425b      	neglt	r3, r3
 8075dec:	f042 0202 	orrlt.w	r2, r2, #2
 8075df0:	9307      	strge	r3, [sp, #28]
 8075df2:	9307      	strlt	r3, [sp, #28]
 8075df4:	bfb8      	it	lt
 8075df6:	9204      	strlt	r2, [sp, #16]
 8075df8:	7823      	ldrb	r3, [r4, #0]
 8075dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8075dfc:	d10c      	bne.n	8075e18 <_svfiprintf_r+0x130>
 8075dfe:	7863      	ldrb	r3, [r4, #1]
 8075e00:	2b2a      	cmp	r3, #42	; 0x2a
 8075e02:	d135      	bne.n	8075e70 <_svfiprintf_r+0x188>
 8075e04:	9b03      	ldr	r3, [sp, #12]
 8075e06:	1d1a      	adds	r2, r3, #4
 8075e08:	681b      	ldr	r3, [r3, #0]
 8075e0a:	9203      	str	r2, [sp, #12]
 8075e0c:	2b00      	cmp	r3, #0
 8075e0e:	bfb8      	it	lt
 8075e10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8075e14:	3402      	adds	r4, #2
 8075e16:	9305      	str	r3, [sp, #20]
 8075e18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8075ee4 <_svfiprintf_r+0x1fc>
 8075e1c:	7821      	ldrb	r1, [r4, #0]
 8075e1e:	2203      	movs	r2, #3
 8075e20:	4650      	mov	r0, sl
 8075e22:	f7ea f9f5 	bl	8060210 <memchr>
 8075e26:	b140      	cbz	r0, 8075e3a <_svfiprintf_r+0x152>
 8075e28:	2340      	movs	r3, #64	; 0x40
 8075e2a:	eba0 000a 	sub.w	r0, r0, sl
 8075e2e:	fa03 f000 	lsl.w	r0, r3, r0
 8075e32:	9b04      	ldr	r3, [sp, #16]
 8075e34:	4303      	orrs	r3, r0
 8075e36:	3401      	adds	r4, #1
 8075e38:	9304      	str	r3, [sp, #16]
 8075e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8075e3e:	4826      	ldr	r0, [pc, #152]	; (8075ed8 <_svfiprintf_r+0x1f0>)
 8075e40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8075e44:	2206      	movs	r2, #6
 8075e46:	f7ea f9e3 	bl	8060210 <memchr>
 8075e4a:	2800      	cmp	r0, #0
 8075e4c:	d038      	beq.n	8075ec0 <_svfiprintf_r+0x1d8>
 8075e4e:	4b23      	ldr	r3, [pc, #140]	; (8075edc <_svfiprintf_r+0x1f4>)
 8075e50:	bb1b      	cbnz	r3, 8075e9a <_svfiprintf_r+0x1b2>
 8075e52:	9b03      	ldr	r3, [sp, #12]
 8075e54:	3307      	adds	r3, #7
 8075e56:	f023 0307 	bic.w	r3, r3, #7
 8075e5a:	3308      	adds	r3, #8
 8075e5c:	9303      	str	r3, [sp, #12]
 8075e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8075e60:	4433      	add	r3, r6
 8075e62:	9309      	str	r3, [sp, #36]	; 0x24
 8075e64:	e767      	b.n	8075d36 <_svfiprintf_r+0x4e>
 8075e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8075e6a:	460c      	mov	r4, r1
 8075e6c:	2001      	movs	r0, #1
 8075e6e:	e7a5      	b.n	8075dbc <_svfiprintf_r+0xd4>
 8075e70:	2300      	movs	r3, #0
 8075e72:	3401      	adds	r4, #1
 8075e74:	9305      	str	r3, [sp, #20]
 8075e76:	4619      	mov	r1, r3
 8075e78:	f04f 0c0a 	mov.w	ip, #10
 8075e7c:	4620      	mov	r0, r4
 8075e7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8075e82:	3a30      	subs	r2, #48	; 0x30
 8075e84:	2a09      	cmp	r2, #9
 8075e86:	d903      	bls.n	8075e90 <_svfiprintf_r+0x1a8>
 8075e88:	2b00      	cmp	r3, #0
 8075e8a:	d0c5      	beq.n	8075e18 <_svfiprintf_r+0x130>
 8075e8c:	9105      	str	r1, [sp, #20]
 8075e8e:	e7c3      	b.n	8075e18 <_svfiprintf_r+0x130>
 8075e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8075e94:	4604      	mov	r4, r0
 8075e96:	2301      	movs	r3, #1
 8075e98:	e7f0      	b.n	8075e7c <_svfiprintf_r+0x194>
 8075e9a:	ab03      	add	r3, sp, #12
 8075e9c:	9300      	str	r3, [sp, #0]
 8075e9e:	462a      	mov	r2, r5
 8075ea0:	4b0f      	ldr	r3, [pc, #60]	; (8075ee0 <_svfiprintf_r+0x1f8>)
 8075ea2:	a904      	add	r1, sp, #16
 8075ea4:	4638      	mov	r0, r7
 8075ea6:	f7fc f91d 	bl	80720e4 <_printf_float>
 8075eaa:	1c42      	adds	r2, r0, #1
 8075eac:	4606      	mov	r6, r0
 8075eae:	d1d6      	bne.n	8075e5e <_svfiprintf_r+0x176>
 8075eb0:	89ab      	ldrh	r3, [r5, #12]
 8075eb2:	065b      	lsls	r3, r3, #25
 8075eb4:	f53f af2c 	bmi.w	8075d10 <_svfiprintf_r+0x28>
 8075eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8075eba:	b01d      	add	sp, #116	; 0x74
 8075ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8075ec0:	ab03      	add	r3, sp, #12
 8075ec2:	9300      	str	r3, [sp, #0]
 8075ec4:	462a      	mov	r2, r5
 8075ec6:	4b06      	ldr	r3, [pc, #24]	; (8075ee0 <_svfiprintf_r+0x1f8>)
 8075ec8:	a904      	add	r1, sp, #16
 8075eca:	4638      	mov	r0, r7
 8075ecc:	f7fc fbae 	bl	807262c <_printf_i>
 8075ed0:	e7eb      	b.n	8075eaa <_svfiprintf_r+0x1c2>
 8075ed2:	bf00      	nop
 8075ed4:	080772f4 	.word	0x080772f4
 8075ed8:	080772fe 	.word	0x080772fe
 8075edc:	080720e5 	.word	0x080720e5
 8075ee0:	08075c31 	.word	0x08075c31
 8075ee4:	080772fa 	.word	0x080772fa

08075ee8 <__sfputc_r>:
 8075ee8:	6893      	ldr	r3, [r2, #8]
 8075eea:	3b01      	subs	r3, #1
 8075eec:	2b00      	cmp	r3, #0
 8075eee:	b410      	push	{r4}
 8075ef0:	6093      	str	r3, [r2, #8]
 8075ef2:	da08      	bge.n	8075f06 <__sfputc_r+0x1e>
 8075ef4:	6994      	ldr	r4, [r2, #24]
 8075ef6:	42a3      	cmp	r3, r4
 8075ef8:	db01      	blt.n	8075efe <__sfputc_r+0x16>
 8075efa:	290a      	cmp	r1, #10
 8075efc:	d103      	bne.n	8075f06 <__sfputc_r+0x1e>
 8075efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8075f02:	f000 b965 	b.w	80761d0 <__swbuf_r>
 8075f06:	6813      	ldr	r3, [r2, #0]
 8075f08:	1c58      	adds	r0, r3, #1
 8075f0a:	6010      	str	r0, [r2, #0]
 8075f0c:	7019      	strb	r1, [r3, #0]
 8075f0e:	4608      	mov	r0, r1
 8075f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8075f14:	4770      	bx	lr

08075f16 <__sfputs_r>:
 8075f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8075f18:	4606      	mov	r6, r0
 8075f1a:	460f      	mov	r7, r1
 8075f1c:	4614      	mov	r4, r2
 8075f1e:	18d5      	adds	r5, r2, r3
 8075f20:	42ac      	cmp	r4, r5
 8075f22:	d101      	bne.n	8075f28 <__sfputs_r+0x12>
 8075f24:	2000      	movs	r0, #0
 8075f26:	e007      	b.n	8075f38 <__sfputs_r+0x22>
 8075f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8075f2c:	463a      	mov	r2, r7
 8075f2e:	4630      	mov	r0, r6
 8075f30:	f7ff ffda 	bl	8075ee8 <__sfputc_r>
 8075f34:	1c43      	adds	r3, r0, #1
 8075f36:	d1f3      	bne.n	8075f20 <__sfputs_r+0xa>
 8075f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08075f3c <_vfiprintf_r>:
 8075f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8075f40:	460d      	mov	r5, r1
 8075f42:	b09d      	sub	sp, #116	; 0x74
 8075f44:	4614      	mov	r4, r2
 8075f46:	4698      	mov	r8, r3
 8075f48:	4606      	mov	r6, r0
 8075f4a:	b118      	cbz	r0, 8075f54 <_vfiprintf_r+0x18>
 8075f4c:	6983      	ldr	r3, [r0, #24]
 8075f4e:	b90b      	cbnz	r3, 8075f54 <_vfiprintf_r+0x18>
 8075f50:	f7fb fef2 	bl	8071d38 <__sinit>
 8075f54:	4b89      	ldr	r3, [pc, #548]	; (807617c <_vfiprintf_r+0x240>)
 8075f56:	429d      	cmp	r5, r3
 8075f58:	d11b      	bne.n	8075f92 <_vfiprintf_r+0x56>
 8075f5a:	6875      	ldr	r5, [r6, #4]
 8075f5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8075f5e:	07d9      	lsls	r1, r3, #31
 8075f60:	d405      	bmi.n	8075f6e <_vfiprintf_r+0x32>
 8075f62:	89ab      	ldrh	r3, [r5, #12]
 8075f64:	059a      	lsls	r2, r3, #22
 8075f66:	d402      	bmi.n	8075f6e <_vfiprintf_r+0x32>
 8075f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8075f6a:	f7fb ffa8 	bl	8071ebe <__retarget_lock_acquire_recursive>
 8075f6e:	89ab      	ldrh	r3, [r5, #12]
 8075f70:	071b      	lsls	r3, r3, #28
 8075f72:	d501      	bpl.n	8075f78 <_vfiprintf_r+0x3c>
 8075f74:	692b      	ldr	r3, [r5, #16]
 8075f76:	b9eb      	cbnz	r3, 8075fb4 <_vfiprintf_r+0x78>
 8075f78:	4629      	mov	r1, r5
 8075f7a:	4630      	mov	r0, r6
 8075f7c:	f000 f988 	bl	8076290 <__swsetup_r>
 8075f80:	b1c0      	cbz	r0, 8075fb4 <_vfiprintf_r+0x78>
 8075f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8075f84:	07dc      	lsls	r4, r3, #31
 8075f86:	d50e      	bpl.n	8075fa6 <_vfiprintf_r+0x6a>
 8075f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8075f8c:	b01d      	add	sp, #116	; 0x74
 8075f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8075f92:	4b7b      	ldr	r3, [pc, #492]	; (8076180 <_vfiprintf_r+0x244>)
 8075f94:	429d      	cmp	r5, r3
 8075f96:	d101      	bne.n	8075f9c <_vfiprintf_r+0x60>
 8075f98:	68b5      	ldr	r5, [r6, #8]
 8075f9a:	e7df      	b.n	8075f5c <_vfiprintf_r+0x20>
 8075f9c:	4b79      	ldr	r3, [pc, #484]	; (8076184 <_vfiprintf_r+0x248>)
 8075f9e:	429d      	cmp	r5, r3
 8075fa0:	bf08      	it	eq
 8075fa2:	68f5      	ldreq	r5, [r6, #12]
 8075fa4:	e7da      	b.n	8075f5c <_vfiprintf_r+0x20>
 8075fa6:	89ab      	ldrh	r3, [r5, #12]
 8075fa8:	0598      	lsls	r0, r3, #22
 8075faa:	d4ed      	bmi.n	8075f88 <_vfiprintf_r+0x4c>
 8075fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8075fae:	f7fb ff87 	bl	8071ec0 <__retarget_lock_release_recursive>
 8075fb2:	e7e9      	b.n	8075f88 <_vfiprintf_r+0x4c>
 8075fb4:	2300      	movs	r3, #0
 8075fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8075fb8:	2320      	movs	r3, #32
 8075fba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8075fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8075fc2:	2330      	movs	r3, #48	; 0x30
 8075fc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8076188 <_vfiprintf_r+0x24c>
 8075fc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8075fcc:	f04f 0901 	mov.w	r9, #1
 8075fd0:	4623      	mov	r3, r4
 8075fd2:	469a      	mov	sl, r3
 8075fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8075fd8:	b10a      	cbz	r2, 8075fde <_vfiprintf_r+0xa2>
 8075fda:	2a25      	cmp	r2, #37	; 0x25
 8075fdc:	d1f9      	bne.n	8075fd2 <_vfiprintf_r+0x96>
 8075fde:	ebba 0b04 	subs.w	fp, sl, r4
 8075fe2:	d00b      	beq.n	8075ffc <_vfiprintf_r+0xc0>
 8075fe4:	465b      	mov	r3, fp
 8075fe6:	4622      	mov	r2, r4
 8075fe8:	4629      	mov	r1, r5
 8075fea:	4630      	mov	r0, r6
 8075fec:	f7ff ff93 	bl	8075f16 <__sfputs_r>
 8075ff0:	3001      	adds	r0, #1
 8075ff2:	f000 80aa 	beq.w	807614a <_vfiprintf_r+0x20e>
 8075ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8075ff8:	445a      	add	r2, fp
 8075ffa:	9209      	str	r2, [sp, #36]	; 0x24
 8075ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8076000:	2b00      	cmp	r3, #0
 8076002:	f000 80a2 	beq.w	807614a <_vfiprintf_r+0x20e>
 8076006:	2300      	movs	r3, #0
 8076008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 807600c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8076010:	f10a 0a01 	add.w	sl, sl, #1
 8076014:	9304      	str	r3, [sp, #16]
 8076016:	9307      	str	r3, [sp, #28]
 8076018:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 807601c:	931a      	str	r3, [sp, #104]	; 0x68
 807601e:	4654      	mov	r4, sl
 8076020:	2205      	movs	r2, #5
 8076022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8076026:	4858      	ldr	r0, [pc, #352]	; (8076188 <_vfiprintf_r+0x24c>)
 8076028:	f7ea f8f2 	bl	8060210 <memchr>
 807602c:	9a04      	ldr	r2, [sp, #16]
 807602e:	b9d8      	cbnz	r0, 8076068 <_vfiprintf_r+0x12c>
 8076030:	06d1      	lsls	r1, r2, #27
 8076032:	bf44      	itt	mi
 8076034:	2320      	movmi	r3, #32
 8076036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 807603a:	0713      	lsls	r3, r2, #28
 807603c:	bf44      	itt	mi
 807603e:	232b      	movmi	r3, #43	; 0x2b
 8076040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8076044:	f89a 3000 	ldrb.w	r3, [sl]
 8076048:	2b2a      	cmp	r3, #42	; 0x2a
 807604a:	d015      	beq.n	8076078 <_vfiprintf_r+0x13c>
 807604c:	9a07      	ldr	r2, [sp, #28]
 807604e:	4654      	mov	r4, sl
 8076050:	2000      	movs	r0, #0
 8076052:	f04f 0c0a 	mov.w	ip, #10
 8076056:	4621      	mov	r1, r4
 8076058:	f811 3b01 	ldrb.w	r3, [r1], #1
 807605c:	3b30      	subs	r3, #48	; 0x30
 807605e:	2b09      	cmp	r3, #9
 8076060:	d94e      	bls.n	8076100 <_vfiprintf_r+0x1c4>
 8076062:	b1b0      	cbz	r0, 8076092 <_vfiprintf_r+0x156>
 8076064:	9207      	str	r2, [sp, #28]
 8076066:	e014      	b.n	8076092 <_vfiprintf_r+0x156>
 8076068:	eba0 0308 	sub.w	r3, r0, r8
 807606c:	fa09 f303 	lsl.w	r3, r9, r3
 8076070:	4313      	orrs	r3, r2
 8076072:	9304      	str	r3, [sp, #16]
 8076074:	46a2      	mov	sl, r4
 8076076:	e7d2      	b.n	807601e <_vfiprintf_r+0xe2>
 8076078:	9b03      	ldr	r3, [sp, #12]
 807607a:	1d19      	adds	r1, r3, #4
 807607c:	681b      	ldr	r3, [r3, #0]
 807607e:	9103      	str	r1, [sp, #12]
 8076080:	2b00      	cmp	r3, #0
 8076082:	bfbb      	ittet	lt
 8076084:	425b      	neglt	r3, r3
 8076086:	f042 0202 	orrlt.w	r2, r2, #2
 807608a:	9307      	strge	r3, [sp, #28]
 807608c:	9307      	strlt	r3, [sp, #28]
 807608e:	bfb8      	it	lt
 8076090:	9204      	strlt	r2, [sp, #16]
 8076092:	7823      	ldrb	r3, [r4, #0]
 8076094:	2b2e      	cmp	r3, #46	; 0x2e
 8076096:	d10c      	bne.n	80760b2 <_vfiprintf_r+0x176>
 8076098:	7863      	ldrb	r3, [r4, #1]
 807609a:	2b2a      	cmp	r3, #42	; 0x2a
 807609c:	d135      	bne.n	807610a <_vfiprintf_r+0x1ce>
 807609e:	9b03      	ldr	r3, [sp, #12]
 80760a0:	1d1a      	adds	r2, r3, #4
 80760a2:	681b      	ldr	r3, [r3, #0]
 80760a4:	9203      	str	r2, [sp, #12]
 80760a6:	2b00      	cmp	r3, #0
 80760a8:	bfb8      	it	lt
 80760aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80760ae:	3402      	adds	r4, #2
 80760b0:	9305      	str	r3, [sp, #20]
 80760b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8076198 <_vfiprintf_r+0x25c>
 80760b6:	7821      	ldrb	r1, [r4, #0]
 80760b8:	2203      	movs	r2, #3
 80760ba:	4650      	mov	r0, sl
 80760bc:	f7ea f8a8 	bl	8060210 <memchr>
 80760c0:	b140      	cbz	r0, 80760d4 <_vfiprintf_r+0x198>
 80760c2:	2340      	movs	r3, #64	; 0x40
 80760c4:	eba0 000a 	sub.w	r0, r0, sl
 80760c8:	fa03 f000 	lsl.w	r0, r3, r0
 80760cc:	9b04      	ldr	r3, [sp, #16]
 80760ce:	4303      	orrs	r3, r0
 80760d0:	3401      	adds	r4, #1
 80760d2:	9304      	str	r3, [sp, #16]
 80760d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80760d8:	482c      	ldr	r0, [pc, #176]	; (807618c <_vfiprintf_r+0x250>)
 80760da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80760de:	2206      	movs	r2, #6
 80760e0:	f7ea f896 	bl	8060210 <memchr>
 80760e4:	2800      	cmp	r0, #0
 80760e6:	d03f      	beq.n	8076168 <_vfiprintf_r+0x22c>
 80760e8:	4b29      	ldr	r3, [pc, #164]	; (8076190 <_vfiprintf_r+0x254>)
 80760ea:	bb1b      	cbnz	r3, 8076134 <_vfiprintf_r+0x1f8>
 80760ec:	9b03      	ldr	r3, [sp, #12]
 80760ee:	3307      	adds	r3, #7
 80760f0:	f023 0307 	bic.w	r3, r3, #7
 80760f4:	3308      	adds	r3, #8
 80760f6:	9303      	str	r3, [sp, #12]
 80760f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80760fa:	443b      	add	r3, r7
 80760fc:	9309      	str	r3, [sp, #36]	; 0x24
 80760fe:	e767      	b.n	8075fd0 <_vfiprintf_r+0x94>
 8076100:	fb0c 3202 	mla	r2, ip, r2, r3
 8076104:	460c      	mov	r4, r1
 8076106:	2001      	movs	r0, #1
 8076108:	e7a5      	b.n	8076056 <_vfiprintf_r+0x11a>
 807610a:	2300      	movs	r3, #0
 807610c:	3401      	adds	r4, #1
 807610e:	9305      	str	r3, [sp, #20]
 8076110:	4619      	mov	r1, r3
 8076112:	f04f 0c0a 	mov.w	ip, #10
 8076116:	4620      	mov	r0, r4
 8076118:	f810 2b01 	ldrb.w	r2, [r0], #1
 807611c:	3a30      	subs	r2, #48	; 0x30
 807611e:	2a09      	cmp	r2, #9
 8076120:	d903      	bls.n	807612a <_vfiprintf_r+0x1ee>
 8076122:	2b00      	cmp	r3, #0
 8076124:	d0c5      	beq.n	80760b2 <_vfiprintf_r+0x176>
 8076126:	9105      	str	r1, [sp, #20]
 8076128:	e7c3      	b.n	80760b2 <_vfiprintf_r+0x176>
 807612a:	fb0c 2101 	mla	r1, ip, r1, r2
 807612e:	4604      	mov	r4, r0
 8076130:	2301      	movs	r3, #1
 8076132:	e7f0      	b.n	8076116 <_vfiprintf_r+0x1da>
 8076134:	ab03      	add	r3, sp, #12
 8076136:	9300      	str	r3, [sp, #0]
 8076138:	462a      	mov	r2, r5
 807613a:	4b16      	ldr	r3, [pc, #88]	; (8076194 <_vfiprintf_r+0x258>)
 807613c:	a904      	add	r1, sp, #16
 807613e:	4630      	mov	r0, r6
 8076140:	f7fb ffd0 	bl	80720e4 <_printf_float>
 8076144:	4607      	mov	r7, r0
 8076146:	1c78      	adds	r0, r7, #1
 8076148:	d1d6      	bne.n	80760f8 <_vfiprintf_r+0x1bc>
 807614a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 807614c:	07d9      	lsls	r1, r3, #31
 807614e:	d405      	bmi.n	807615c <_vfiprintf_r+0x220>
 8076150:	89ab      	ldrh	r3, [r5, #12]
 8076152:	059a      	lsls	r2, r3, #22
 8076154:	d402      	bmi.n	807615c <_vfiprintf_r+0x220>
 8076156:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8076158:	f7fb feb2 	bl	8071ec0 <__retarget_lock_release_recursive>
 807615c:	89ab      	ldrh	r3, [r5, #12]
 807615e:	065b      	lsls	r3, r3, #25
 8076160:	f53f af12 	bmi.w	8075f88 <_vfiprintf_r+0x4c>
 8076164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8076166:	e711      	b.n	8075f8c <_vfiprintf_r+0x50>
 8076168:	ab03      	add	r3, sp, #12
 807616a:	9300      	str	r3, [sp, #0]
 807616c:	462a      	mov	r2, r5
 807616e:	4b09      	ldr	r3, [pc, #36]	; (8076194 <_vfiprintf_r+0x258>)
 8076170:	a904      	add	r1, sp, #16
 8076172:	4630      	mov	r0, r6
 8076174:	f7fc fa5a 	bl	807262c <_printf_i>
 8076178:	e7e4      	b.n	8076144 <_vfiprintf_r+0x208>
 807617a:	bf00      	nop
 807617c:	08076eb0 	.word	0x08076eb0
 8076180:	08076ed0 	.word	0x08076ed0
 8076184:	08076e90 	.word	0x08076e90
 8076188:	080772f4 	.word	0x080772f4
 807618c:	080772fe 	.word	0x080772fe
 8076190:	080720e5 	.word	0x080720e5
 8076194:	08075f17 	.word	0x08075f17
 8076198:	080772fa 	.word	0x080772fa

0807619c <_read_r>:
 807619c:	b538      	push	{r3, r4, r5, lr}
 807619e:	4d07      	ldr	r5, [pc, #28]	; (80761bc <_read_r+0x20>)
 80761a0:	4604      	mov	r4, r0
 80761a2:	4608      	mov	r0, r1
 80761a4:	4611      	mov	r1, r2
 80761a6:	2200      	movs	r2, #0
 80761a8:	602a      	str	r2, [r5, #0]
 80761aa:	461a      	mov	r2, r3
 80761ac:	f7ed f982 	bl	80634b4 <_read>
 80761b0:	1c43      	adds	r3, r0, #1
 80761b2:	d102      	bne.n	80761ba <_read_r+0x1e>
 80761b4:	682b      	ldr	r3, [r5, #0]
 80761b6:	b103      	cbz	r3, 80761ba <_read_r+0x1e>
 80761b8:	6023      	str	r3, [r4, #0]
 80761ba:	bd38      	pop	{r3, r4, r5, pc}
 80761bc:	20005d10 	.word	0x20005d10

080761c0 <nan>:
 80761c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80761c8 <nan+0x8>
 80761c4:	4770      	bx	lr
 80761c6:	bf00      	nop
 80761c8:	00000000 	.word	0x00000000
 80761cc:	7ff80000 	.word	0x7ff80000

080761d0 <__swbuf_r>:
 80761d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80761d2:	460e      	mov	r6, r1
 80761d4:	4614      	mov	r4, r2
 80761d6:	4605      	mov	r5, r0
 80761d8:	b118      	cbz	r0, 80761e2 <__swbuf_r+0x12>
 80761da:	6983      	ldr	r3, [r0, #24]
 80761dc:	b90b      	cbnz	r3, 80761e2 <__swbuf_r+0x12>
 80761de:	f7fb fdab 	bl	8071d38 <__sinit>
 80761e2:	4b21      	ldr	r3, [pc, #132]	; (8076268 <__swbuf_r+0x98>)
 80761e4:	429c      	cmp	r4, r3
 80761e6:	d12b      	bne.n	8076240 <__swbuf_r+0x70>
 80761e8:	686c      	ldr	r4, [r5, #4]
 80761ea:	69a3      	ldr	r3, [r4, #24]
 80761ec:	60a3      	str	r3, [r4, #8]
 80761ee:	89a3      	ldrh	r3, [r4, #12]
 80761f0:	071a      	lsls	r2, r3, #28
 80761f2:	d52f      	bpl.n	8076254 <__swbuf_r+0x84>
 80761f4:	6923      	ldr	r3, [r4, #16]
 80761f6:	b36b      	cbz	r3, 8076254 <__swbuf_r+0x84>
 80761f8:	6923      	ldr	r3, [r4, #16]
 80761fa:	6820      	ldr	r0, [r4, #0]
 80761fc:	1ac0      	subs	r0, r0, r3
 80761fe:	6963      	ldr	r3, [r4, #20]
 8076200:	b2f6      	uxtb	r6, r6
 8076202:	4283      	cmp	r3, r0
 8076204:	4637      	mov	r7, r6
 8076206:	dc04      	bgt.n	8076212 <__swbuf_r+0x42>
 8076208:	4621      	mov	r1, r4
 807620a:	4628      	mov	r0, r5
 807620c:	f7fe fc0e 	bl	8074a2c <_fflush_r>
 8076210:	bb30      	cbnz	r0, 8076260 <__swbuf_r+0x90>
 8076212:	68a3      	ldr	r3, [r4, #8]
 8076214:	3b01      	subs	r3, #1
 8076216:	60a3      	str	r3, [r4, #8]
 8076218:	6823      	ldr	r3, [r4, #0]
 807621a:	1c5a      	adds	r2, r3, #1
 807621c:	6022      	str	r2, [r4, #0]
 807621e:	701e      	strb	r6, [r3, #0]
 8076220:	6963      	ldr	r3, [r4, #20]
 8076222:	3001      	adds	r0, #1
 8076224:	4283      	cmp	r3, r0
 8076226:	d004      	beq.n	8076232 <__swbuf_r+0x62>
 8076228:	89a3      	ldrh	r3, [r4, #12]
 807622a:	07db      	lsls	r3, r3, #31
 807622c:	d506      	bpl.n	807623c <__swbuf_r+0x6c>
 807622e:	2e0a      	cmp	r6, #10
 8076230:	d104      	bne.n	807623c <__swbuf_r+0x6c>
 8076232:	4621      	mov	r1, r4
 8076234:	4628      	mov	r0, r5
 8076236:	f7fe fbf9 	bl	8074a2c <_fflush_r>
 807623a:	b988      	cbnz	r0, 8076260 <__swbuf_r+0x90>
 807623c:	4638      	mov	r0, r7
 807623e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8076240:	4b0a      	ldr	r3, [pc, #40]	; (807626c <__swbuf_r+0x9c>)
 8076242:	429c      	cmp	r4, r3
 8076244:	d101      	bne.n	807624a <__swbuf_r+0x7a>
 8076246:	68ac      	ldr	r4, [r5, #8]
 8076248:	e7cf      	b.n	80761ea <__swbuf_r+0x1a>
 807624a:	4b09      	ldr	r3, [pc, #36]	; (8076270 <__swbuf_r+0xa0>)
 807624c:	429c      	cmp	r4, r3
 807624e:	bf08      	it	eq
 8076250:	68ec      	ldreq	r4, [r5, #12]
 8076252:	e7ca      	b.n	80761ea <__swbuf_r+0x1a>
 8076254:	4621      	mov	r1, r4
 8076256:	4628      	mov	r0, r5
 8076258:	f000 f81a 	bl	8076290 <__swsetup_r>
 807625c:	2800      	cmp	r0, #0
 807625e:	d0cb      	beq.n	80761f8 <__swbuf_r+0x28>
 8076260:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8076264:	e7ea      	b.n	807623c <__swbuf_r+0x6c>
 8076266:	bf00      	nop
 8076268:	08076eb0 	.word	0x08076eb0
 807626c:	08076ed0 	.word	0x08076ed0
 8076270:	08076e90 	.word	0x08076e90

08076274 <__ascii_wctomb>:
 8076274:	b149      	cbz	r1, 807628a <__ascii_wctomb+0x16>
 8076276:	2aff      	cmp	r2, #255	; 0xff
 8076278:	bf85      	ittet	hi
 807627a:	238a      	movhi	r3, #138	; 0x8a
 807627c:	6003      	strhi	r3, [r0, #0]
 807627e:	700a      	strbls	r2, [r1, #0]
 8076280:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8076284:	bf98      	it	ls
 8076286:	2001      	movls	r0, #1
 8076288:	4770      	bx	lr
 807628a:	4608      	mov	r0, r1
 807628c:	4770      	bx	lr
	...

08076290 <__swsetup_r>:
 8076290:	4b32      	ldr	r3, [pc, #200]	; (807635c <__swsetup_r+0xcc>)
 8076292:	b570      	push	{r4, r5, r6, lr}
 8076294:	681d      	ldr	r5, [r3, #0]
 8076296:	4606      	mov	r6, r0
 8076298:	460c      	mov	r4, r1
 807629a:	b125      	cbz	r5, 80762a6 <__swsetup_r+0x16>
 807629c:	69ab      	ldr	r3, [r5, #24]
 807629e:	b913      	cbnz	r3, 80762a6 <__swsetup_r+0x16>
 80762a0:	4628      	mov	r0, r5
 80762a2:	f7fb fd49 	bl	8071d38 <__sinit>
 80762a6:	4b2e      	ldr	r3, [pc, #184]	; (8076360 <__swsetup_r+0xd0>)
 80762a8:	429c      	cmp	r4, r3
 80762aa:	d10f      	bne.n	80762cc <__swsetup_r+0x3c>
 80762ac:	686c      	ldr	r4, [r5, #4]
 80762ae:	89a3      	ldrh	r3, [r4, #12]
 80762b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80762b4:	0719      	lsls	r1, r3, #28
 80762b6:	d42c      	bmi.n	8076312 <__swsetup_r+0x82>
 80762b8:	06dd      	lsls	r5, r3, #27
 80762ba:	d411      	bmi.n	80762e0 <__swsetup_r+0x50>
 80762bc:	2309      	movs	r3, #9
 80762be:	6033      	str	r3, [r6, #0]
 80762c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80762c4:	81a3      	strh	r3, [r4, #12]
 80762c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80762ca:	e03e      	b.n	807634a <__swsetup_r+0xba>
 80762cc:	4b25      	ldr	r3, [pc, #148]	; (8076364 <__swsetup_r+0xd4>)
 80762ce:	429c      	cmp	r4, r3
 80762d0:	d101      	bne.n	80762d6 <__swsetup_r+0x46>
 80762d2:	68ac      	ldr	r4, [r5, #8]
 80762d4:	e7eb      	b.n	80762ae <__swsetup_r+0x1e>
 80762d6:	4b24      	ldr	r3, [pc, #144]	; (8076368 <__swsetup_r+0xd8>)
 80762d8:	429c      	cmp	r4, r3
 80762da:	bf08      	it	eq
 80762dc:	68ec      	ldreq	r4, [r5, #12]
 80762de:	e7e6      	b.n	80762ae <__swsetup_r+0x1e>
 80762e0:	0758      	lsls	r0, r3, #29
 80762e2:	d512      	bpl.n	807630a <__swsetup_r+0x7a>
 80762e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80762e6:	b141      	cbz	r1, 80762fa <__swsetup_r+0x6a>
 80762e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80762ec:	4299      	cmp	r1, r3
 80762ee:	d002      	beq.n	80762f6 <__swsetup_r+0x66>
 80762f0:	4630      	mov	r0, r6
 80762f2:	f7ff fc4d 	bl	8075b90 <_free_r>
 80762f6:	2300      	movs	r3, #0
 80762f8:	6363      	str	r3, [r4, #52]	; 0x34
 80762fa:	89a3      	ldrh	r3, [r4, #12]
 80762fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8076300:	81a3      	strh	r3, [r4, #12]
 8076302:	2300      	movs	r3, #0
 8076304:	6063      	str	r3, [r4, #4]
 8076306:	6923      	ldr	r3, [r4, #16]
 8076308:	6023      	str	r3, [r4, #0]
 807630a:	89a3      	ldrh	r3, [r4, #12]
 807630c:	f043 0308 	orr.w	r3, r3, #8
 8076310:	81a3      	strh	r3, [r4, #12]
 8076312:	6923      	ldr	r3, [r4, #16]
 8076314:	b94b      	cbnz	r3, 807632a <__swsetup_r+0x9a>
 8076316:	89a3      	ldrh	r3, [r4, #12]
 8076318:	f403 7320 	and.w	r3, r3, #640	; 0x280
 807631c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8076320:	d003      	beq.n	807632a <__swsetup_r+0x9a>
 8076322:	4621      	mov	r1, r4
 8076324:	4630      	mov	r0, r6
 8076326:	f000 f875 	bl	8076414 <__smakebuf_r>
 807632a:	89a0      	ldrh	r0, [r4, #12]
 807632c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8076330:	f010 0301 	ands.w	r3, r0, #1
 8076334:	d00a      	beq.n	807634c <__swsetup_r+0xbc>
 8076336:	2300      	movs	r3, #0
 8076338:	60a3      	str	r3, [r4, #8]
 807633a:	6963      	ldr	r3, [r4, #20]
 807633c:	425b      	negs	r3, r3
 807633e:	61a3      	str	r3, [r4, #24]
 8076340:	6923      	ldr	r3, [r4, #16]
 8076342:	b943      	cbnz	r3, 8076356 <__swsetup_r+0xc6>
 8076344:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8076348:	d1ba      	bne.n	80762c0 <__swsetup_r+0x30>
 807634a:	bd70      	pop	{r4, r5, r6, pc}
 807634c:	0781      	lsls	r1, r0, #30
 807634e:	bf58      	it	pl
 8076350:	6963      	ldrpl	r3, [r4, #20]
 8076352:	60a3      	str	r3, [r4, #8]
 8076354:	e7f4      	b.n	8076340 <__swsetup_r+0xb0>
 8076356:	2000      	movs	r0, #0
 8076358:	e7f7      	b.n	807634a <__swsetup_r+0xba>
 807635a:	bf00      	nop
 807635c:	20000028 	.word	0x20000028
 8076360:	08076eb0 	.word	0x08076eb0
 8076364:	08076ed0 	.word	0x08076ed0
 8076368:	08076e90 	.word	0x08076e90

0807636c <__assert_func>:
 807636c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 807636e:	4614      	mov	r4, r2
 8076370:	461a      	mov	r2, r3
 8076372:	4b09      	ldr	r3, [pc, #36]	; (8076398 <__assert_func+0x2c>)
 8076374:	681b      	ldr	r3, [r3, #0]
 8076376:	4605      	mov	r5, r0
 8076378:	68d8      	ldr	r0, [r3, #12]
 807637a:	b14c      	cbz	r4, 8076390 <__assert_func+0x24>
 807637c:	4b07      	ldr	r3, [pc, #28]	; (807639c <__assert_func+0x30>)
 807637e:	9100      	str	r1, [sp, #0]
 8076380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8076384:	4906      	ldr	r1, [pc, #24]	; (80763a0 <__assert_func+0x34>)
 8076386:	462b      	mov	r3, r5
 8076388:	f000 f80e 	bl	80763a8 <fiprintf>
 807638c:	f000 f8c2 	bl	8076514 <abort>
 8076390:	4b04      	ldr	r3, [pc, #16]	; (80763a4 <__assert_func+0x38>)
 8076392:	461c      	mov	r4, r3
 8076394:	e7f3      	b.n	807637e <__assert_func+0x12>
 8076396:	bf00      	nop
 8076398:	20000028 	.word	0x20000028
 807639c:	08077305 	.word	0x08077305
 80763a0:	08077312 	.word	0x08077312
 80763a4:	08077340 	.word	0x08077340

080763a8 <fiprintf>:
 80763a8:	b40e      	push	{r1, r2, r3}
 80763aa:	b503      	push	{r0, r1, lr}
 80763ac:	4601      	mov	r1, r0
 80763ae:	ab03      	add	r3, sp, #12
 80763b0:	4805      	ldr	r0, [pc, #20]	; (80763c8 <fiprintf+0x20>)
 80763b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80763b6:	6800      	ldr	r0, [r0, #0]
 80763b8:	9301      	str	r3, [sp, #4]
 80763ba:	f7ff fdbf 	bl	8075f3c <_vfiprintf_r>
 80763be:	b002      	add	sp, #8
 80763c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80763c4:	b003      	add	sp, #12
 80763c6:	4770      	bx	lr
 80763c8:	20000028 	.word	0x20000028

080763cc <__swhatbuf_r>:
 80763cc:	b570      	push	{r4, r5, r6, lr}
 80763ce:	460e      	mov	r6, r1
 80763d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80763d4:	2900      	cmp	r1, #0
 80763d6:	b096      	sub	sp, #88	; 0x58
 80763d8:	4614      	mov	r4, r2
 80763da:	461d      	mov	r5, r3
 80763dc:	da07      	bge.n	80763ee <__swhatbuf_r+0x22>
 80763de:	2300      	movs	r3, #0
 80763e0:	602b      	str	r3, [r5, #0]
 80763e2:	89b3      	ldrh	r3, [r6, #12]
 80763e4:	061a      	lsls	r2, r3, #24
 80763e6:	d410      	bmi.n	807640a <__swhatbuf_r+0x3e>
 80763e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80763ec:	e00e      	b.n	807640c <__swhatbuf_r+0x40>
 80763ee:	466a      	mov	r2, sp
 80763f0:	f000 f898 	bl	8076524 <_fstat_r>
 80763f4:	2800      	cmp	r0, #0
 80763f6:	dbf2      	blt.n	80763de <__swhatbuf_r+0x12>
 80763f8:	9a01      	ldr	r2, [sp, #4]
 80763fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80763fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8076402:	425a      	negs	r2, r3
 8076404:	415a      	adcs	r2, r3
 8076406:	602a      	str	r2, [r5, #0]
 8076408:	e7ee      	b.n	80763e8 <__swhatbuf_r+0x1c>
 807640a:	2340      	movs	r3, #64	; 0x40
 807640c:	2000      	movs	r0, #0
 807640e:	6023      	str	r3, [r4, #0]
 8076410:	b016      	add	sp, #88	; 0x58
 8076412:	bd70      	pop	{r4, r5, r6, pc}

08076414 <__smakebuf_r>:
 8076414:	898b      	ldrh	r3, [r1, #12]
 8076416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8076418:	079d      	lsls	r5, r3, #30
 807641a:	4606      	mov	r6, r0
 807641c:	460c      	mov	r4, r1
 807641e:	d507      	bpl.n	8076430 <__smakebuf_r+0x1c>
 8076420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8076424:	6023      	str	r3, [r4, #0]
 8076426:	6123      	str	r3, [r4, #16]
 8076428:	2301      	movs	r3, #1
 807642a:	6163      	str	r3, [r4, #20]
 807642c:	b002      	add	sp, #8
 807642e:	bd70      	pop	{r4, r5, r6, pc}
 8076430:	ab01      	add	r3, sp, #4
 8076432:	466a      	mov	r2, sp
 8076434:	f7ff ffca 	bl	80763cc <__swhatbuf_r>
 8076438:	9900      	ldr	r1, [sp, #0]
 807643a:	4605      	mov	r5, r0
 807643c:	4630      	mov	r0, r6
 807643e:	f7fb fd57 	bl	8071ef0 <_malloc_r>
 8076442:	b948      	cbnz	r0, 8076458 <__smakebuf_r+0x44>
 8076444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8076448:	059a      	lsls	r2, r3, #22
 807644a:	d4ef      	bmi.n	807642c <__smakebuf_r+0x18>
 807644c:	f023 0303 	bic.w	r3, r3, #3
 8076450:	f043 0302 	orr.w	r3, r3, #2
 8076454:	81a3      	strh	r3, [r4, #12]
 8076456:	e7e3      	b.n	8076420 <__smakebuf_r+0xc>
 8076458:	4b0d      	ldr	r3, [pc, #52]	; (8076490 <__smakebuf_r+0x7c>)
 807645a:	62b3      	str	r3, [r6, #40]	; 0x28
 807645c:	89a3      	ldrh	r3, [r4, #12]
 807645e:	6020      	str	r0, [r4, #0]
 8076460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8076464:	81a3      	strh	r3, [r4, #12]
 8076466:	9b00      	ldr	r3, [sp, #0]
 8076468:	6163      	str	r3, [r4, #20]
 807646a:	9b01      	ldr	r3, [sp, #4]
 807646c:	6120      	str	r0, [r4, #16]
 807646e:	b15b      	cbz	r3, 8076488 <__smakebuf_r+0x74>
 8076470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8076474:	4630      	mov	r0, r6
 8076476:	f000 f867 	bl	8076548 <_isatty_r>
 807647a:	b128      	cbz	r0, 8076488 <__smakebuf_r+0x74>
 807647c:	89a3      	ldrh	r3, [r4, #12]
 807647e:	f023 0303 	bic.w	r3, r3, #3
 8076482:	f043 0301 	orr.w	r3, r3, #1
 8076486:	81a3      	strh	r3, [r4, #12]
 8076488:	89a0      	ldrh	r0, [r4, #12]
 807648a:	4305      	orrs	r5, r0
 807648c:	81a5      	strh	r5, [r4, #12]
 807648e:	e7cd      	b.n	807642c <__smakebuf_r+0x18>
 8076490:	08071cd1 	.word	0x08071cd1

08076494 <memmove>:
 8076494:	4288      	cmp	r0, r1
 8076496:	b510      	push	{r4, lr}
 8076498:	eb01 0402 	add.w	r4, r1, r2
 807649c:	d902      	bls.n	80764a4 <memmove+0x10>
 807649e:	4284      	cmp	r4, r0
 80764a0:	4623      	mov	r3, r4
 80764a2:	d807      	bhi.n	80764b4 <memmove+0x20>
 80764a4:	1e43      	subs	r3, r0, #1
 80764a6:	42a1      	cmp	r1, r4
 80764a8:	d008      	beq.n	80764bc <memmove+0x28>
 80764aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80764ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80764b2:	e7f8      	b.n	80764a6 <memmove+0x12>
 80764b4:	4402      	add	r2, r0
 80764b6:	4601      	mov	r1, r0
 80764b8:	428a      	cmp	r2, r1
 80764ba:	d100      	bne.n	80764be <memmove+0x2a>
 80764bc:	bd10      	pop	{r4, pc}
 80764be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80764c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80764c6:	e7f7      	b.n	80764b8 <memmove+0x24>

080764c8 <_realloc_r>:
 80764c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80764ca:	4607      	mov	r7, r0
 80764cc:	4614      	mov	r4, r2
 80764ce:	460e      	mov	r6, r1
 80764d0:	b921      	cbnz	r1, 80764dc <_realloc_r+0x14>
 80764d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80764d6:	4611      	mov	r1, r2
 80764d8:	f7fb bd0a 	b.w	8071ef0 <_malloc_r>
 80764dc:	b922      	cbnz	r2, 80764e8 <_realloc_r+0x20>
 80764de:	f7ff fb57 	bl	8075b90 <_free_r>
 80764e2:	4625      	mov	r5, r4
 80764e4:	4628      	mov	r0, r5
 80764e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80764e8:	f000 f83e 	bl	8076568 <_malloc_usable_size_r>
 80764ec:	42a0      	cmp	r0, r4
 80764ee:	d20f      	bcs.n	8076510 <_realloc_r+0x48>
 80764f0:	4621      	mov	r1, r4
 80764f2:	4638      	mov	r0, r7
 80764f4:	f7fb fcfc 	bl	8071ef0 <_malloc_r>
 80764f8:	4605      	mov	r5, r0
 80764fa:	2800      	cmp	r0, #0
 80764fc:	d0f2      	beq.n	80764e4 <_realloc_r+0x1c>
 80764fe:	4631      	mov	r1, r6
 8076500:	4622      	mov	r2, r4
 8076502:	f7fb fcde 	bl	8071ec2 <memcpy>
 8076506:	4631      	mov	r1, r6
 8076508:	4638      	mov	r0, r7
 807650a:	f7ff fb41 	bl	8075b90 <_free_r>
 807650e:	e7e9      	b.n	80764e4 <_realloc_r+0x1c>
 8076510:	4635      	mov	r5, r6
 8076512:	e7e7      	b.n	80764e4 <_realloc_r+0x1c>

08076514 <abort>:
 8076514:	b508      	push	{r3, lr}
 8076516:	2006      	movs	r0, #6
 8076518:	f000 f856 	bl	80765c8 <raise>
 807651c:	2001      	movs	r0, #1
 807651e:	f7ec ffbf 	bl	80634a0 <_exit>
	...

08076524 <_fstat_r>:
 8076524:	b538      	push	{r3, r4, r5, lr}
 8076526:	4d07      	ldr	r5, [pc, #28]	; (8076544 <_fstat_r+0x20>)
 8076528:	2300      	movs	r3, #0
 807652a:	4604      	mov	r4, r0
 807652c:	4608      	mov	r0, r1
 807652e:	4611      	mov	r1, r2
 8076530:	602b      	str	r3, [r5, #0]
 8076532:	f7ed f804 	bl	806353e <_fstat>
 8076536:	1c43      	adds	r3, r0, #1
 8076538:	d102      	bne.n	8076540 <_fstat_r+0x1c>
 807653a:	682b      	ldr	r3, [r5, #0]
 807653c:	b103      	cbz	r3, 8076540 <_fstat_r+0x1c>
 807653e:	6023      	str	r3, [r4, #0]
 8076540:	bd38      	pop	{r3, r4, r5, pc}
 8076542:	bf00      	nop
 8076544:	20005d10 	.word	0x20005d10

08076548 <_isatty_r>:
 8076548:	b538      	push	{r3, r4, r5, lr}
 807654a:	4d06      	ldr	r5, [pc, #24]	; (8076564 <_isatty_r+0x1c>)
 807654c:	2300      	movs	r3, #0
 807654e:	4604      	mov	r4, r0
 8076550:	4608      	mov	r0, r1
 8076552:	602b      	str	r3, [r5, #0]
 8076554:	f7ed f803 	bl	806355e <_isatty>
 8076558:	1c43      	adds	r3, r0, #1
 807655a:	d102      	bne.n	8076562 <_isatty_r+0x1a>
 807655c:	682b      	ldr	r3, [r5, #0]
 807655e:	b103      	cbz	r3, 8076562 <_isatty_r+0x1a>
 8076560:	6023      	str	r3, [r4, #0]
 8076562:	bd38      	pop	{r3, r4, r5, pc}
 8076564:	20005d10 	.word	0x20005d10

08076568 <_malloc_usable_size_r>:
 8076568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 807656c:	1f18      	subs	r0, r3, #4
 807656e:	2b00      	cmp	r3, #0
 8076570:	bfbc      	itt	lt
 8076572:	580b      	ldrlt	r3, [r1, r0]
 8076574:	18c0      	addlt	r0, r0, r3
 8076576:	4770      	bx	lr

08076578 <_raise_r>:
 8076578:	291f      	cmp	r1, #31
 807657a:	b538      	push	{r3, r4, r5, lr}
 807657c:	4604      	mov	r4, r0
 807657e:	460d      	mov	r5, r1
 8076580:	d904      	bls.n	807658c <_raise_r+0x14>
 8076582:	2316      	movs	r3, #22
 8076584:	6003      	str	r3, [r0, #0]
 8076586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 807658a:	bd38      	pop	{r3, r4, r5, pc}
 807658c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 807658e:	b112      	cbz	r2, 8076596 <_raise_r+0x1e>
 8076590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8076594:	b94b      	cbnz	r3, 80765aa <_raise_r+0x32>
 8076596:	4620      	mov	r0, r4
 8076598:	f000 f830 	bl	80765fc <_getpid_r>
 807659c:	462a      	mov	r2, r5
 807659e:	4601      	mov	r1, r0
 80765a0:	4620      	mov	r0, r4
 80765a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80765a6:	f000 b817 	b.w	80765d8 <_kill_r>
 80765aa:	2b01      	cmp	r3, #1
 80765ac:	d00a      	beq.n	80765c4 <_raise_r+0x4c>
 80765ae:	1c59      	adds	r1, r3, #1
 80765b0:	d103      	bne.n	80765ba <_raise_r+0x42>
 80765b2:	2316      	movs	r3, #22
 80765b4:	6003      	str	r3, [r0, #0]
 80765b6:	2001      	movs	r0, #1
 80765b8:	e7e7      	b.n	807658a <_raise_r+0x12>
 80765ba:	2400      	movs	r4, #0
 80765bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80765c0:	4628      	mov	r0, r5
 80765c2:	4798      	blx	r3
 80765c4:	2000      	movs	r0, #0
 80765c6:	e7e0      	b.n	807658a <_raise_r+0x12>

080765c8 <raise>:
 80765c8:	4b02      	ldr	r3, [pc, #8]	; (80765d4 <raise+0xc>)
 80765ca:	4601      	mov	r1, r0
 80765cc:	6818      	ldr	r0, [r3, #0]
 80765ce:	f7ff bfd3 	b.w	8076578 <_raise_r>
 80765d2:	bf00      	nop
 80765d4:	20000028 	.word	0x20000028

080765d8 <_kill_r>:
 80765d8:	b538      	push	{r3, r4, r5, lr}
 80765da:	4d07      	ldr	r5, [pc, #28]	; (80765f8 <_kill_r+0x20>)
 80765dc:	2300      	movs	r3, #0
 80765de:	4604      	mov	r4, r0
 80765e0:	4608      	mov	r0, r1
 80765e2:	4611      	mov	r1, r2
 80765e4:	602b      	str	r3, [r5, #0]
 80765e6:	f7ec ff4b 	bl	8063480 <_kill>
 80765ea:	1c43      	adds	r3, r0, #1
 80765ec:	d102      	bne.n	80765f4 <_kill_r+0x1c>
 80765ee:	682b      	ldr	r3, [r5, #0]
 80765f0:	b103      	cbz	r3, 80765f4 <_kill_r+0x1c>
 80765f2:	6023      	str	r3, [r4, #0]
 80765f4:	bd38      	pop	{r3, r4, r5, pc}
 80765f6:	bf00      	nop
 80765f8:	20005d10 	.word	0x20005d10

080765fc <_getpid_r>:
 80765fc:	f7ec bf38 	b.w	8063470 <_getpid>

08076600 <_init>:
 8076600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076602:	bf00      	nop
 8076604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8076606:	bc08      	pop	{r3}
 8076608:	469e      	mov	lr, r3
 807660a:	4770      	bx	lr

0807660c <_fini>:
 807660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807660e:	bf00      	nop
 8076610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8076612:	bc08      	pop	{r3}
 8076614:	469e      	mov	lr, r3
 8076616:	4770      	bx	lr
