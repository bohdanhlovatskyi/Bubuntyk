
rtocs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08060000  08060000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ce8  080601a0  080601a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ddc  08076e88  08076e88  00026e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08077c64  08077c64  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08077c64  08077c64  00027c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08077c6c  08077c6c  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08077c6c  08077c6c  00027c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08077c70  08077c70  00027c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08077c74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b38  200001fc  08077e70  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d34  08077e70  00035d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ac88  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007956  00000000  00000000  0007aeb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002468  00000000  00000000  00082810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021a8  00000000  00000000  00084c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002355e  00000000  00000000  00086e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000384dd  00000000  00000000  000aa37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3a19  00000000  00000000  000e285b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196274  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000abec  00000000  00000000  001962c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080601a0 <__do_global_dtors_aux>:
 80601a0:	b510      	push	{r4, lr}
 80601a2:	4c05      	ldr	r4, [pc, #20]	; (80601b8 <__do_global_dtors_aux+0x18>)
 80601a4:	7823      	ldrb	r3, [r4, #0]
 80601a6:	b933      	cbnz	r3, 80601b6 <__do_global_dtors_aux+0x16>
 80601a8:	4b04      	ldr	r3, [pc, #16]	; (80601bc <__do_global_dtors_aux+0x1c>)
 80601aa:	b113      	cbz	r3, 80601b2 <__do_global_dtors_aux+0x12>
 80601ac:	4804      	ldr	r0, [pc, #16]	; (80601c0 <__do_global_dtors_aux+0x20>)
 80601ae:	f3af 8000 	nop.w
 80601b2:	2301      	movs	r3, #1
 80601b4:	7023      	strb	r3, [r4, #0]
 80601b6:	bd10      	pop	{r4, pc}
 80601b8:	200001fc 	.word	0x200001fc
 80601bc:	00000000 	.word	0x00000000
 80601c0:	08076e70 	.word	0x08076e70

080601c4 <frame_dummy>:
 80601c4:	b508      	push	{r3, lr}
 80601c6:	4b03      	ldr	r3, [pc, #12]	; (80601d4 <frame_dummy+0x10>)
 80601c8:	b11b      	cbz	r3, 80601d2 <frame_dummy+0xe>
 80601ca:	4903      	ldr	r1, [pc, #12]	; (80601d8 <frame_dummy+0x14>)
 80601cc:	4803      	ldr	r0, [pc, #12]	; (80601dc <frame_dummy+0x18>)
 80601ce:	f3af 8000 	nop.w
 80601d2:	bd08      	pop	{r3, pc}
 80601d4:	00000000 	.word	0x00000000
 80601d8:	20000200 	.word	0x20000200
 80601dc:	08076e70 	.word	0x08076e70

080601e0 <strcmp>:
 80601e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80601e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80601e8:	2a01      	cmp	r2, #1
 80601ea:	bf28      	it	cs
 80601ec:	429a      	cmpcs	r2, r3
 80601ee:	d0f7      	beq.n	80601e0 <strcmp>
 80601f0:	1ad0      	subs	r0, r2, r3
 80601f2:	4770      	bx	lr

080601f4 <strlen>:
 80601f4:	4603      	mov	r3, r0
 80601f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80601fa:	2a00      	cmp	r2, #0
 80601fc:	d1fb      	bne.n	80601f6 <strlen+0x2>
 80601fe:	1a18      	subs	r0, r3, r0
 8060200:	3801      	subs	r0, #1
 8060202:	4770      	bx	lr
	...

08060210 <memchr>:
 8060210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8060214:	2a10      	cmp	r2, #16
 8060216:	db2b      	blt.n	8060270 <memchr+0x60>
 8060218:	f010 0f07 	tst.w	r0, #7
 806021c:	d008      	beq.n	8060230 <memchr+0x20>
 806021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8060222:	3a01      	subs	r2, #1
 8060224:	428b      	cmp	r3, r1
 8060226:	d02d      	beq.n	8060284 <memchr+0x74>
 8060228:	f010 0f07 	tst.w	r0, #7
 806022c:	b342      	cbz	r2, 8060280 <memchr+0x70>
 806022e:	d1f6      	bne.n	806021e <memchr+0xe>
 8060230:	b4f0      	push	{r4, r5, r6, r7}
 8060232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8060236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 806023a:	f022 0407 	bic.w	r4, r2, #7
 806023e:	f07f 0700 	mvns.w	r7, #0
 8060242:	2300      	movs	r3, #0
 8060244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8060248:	3c08      	subs	r4, #8
 806024a:	ea85 0501 	eor.w	r5, r5, r1
 806024e:	ea86 0601 	eor.w	r6, r6, r1
 8060252:	fa85 f547 	uadd8	r5, r5, r7
 8060256:	faa3 f587 	sel	r5, r3, r7
 806025a:	fa86 f647 	uadd8	r6, r6, r7
 806025e:	faa5 f687 	sel	r6, r5, r7
 8060262:	b98e      	cbnz	r6, 8060288 <memchr+0x78>
 8060264:	d1ee      	bne.n	8060244 <memchr+0x34>
 8060266:	bcf0      	pop	{r4, r5, r6, r7}
 8060268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 806026c:	f002 0207 	and.w	r2, r2, #7
 8060270:	b132      	cbz	r2, 8060280 <memchr+0x70>
 8060272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8060276:	3a01      	subs	r2, #1
 8060278:	ea83 0301 	eor.w	r3, r3, r1
 806027c:	b113      	cbz	r3, 8060284 <memchr+0x74>
 806027e:	d1f8      	bne.n	8060272 <memchr+0x62>
 8060280:	2000      	movs	r0, #0
 8060282:	4770      	bx	lr
 8060284:	3801      	subs	r0, #1
 8060286:	4770      	bx	lr
 8060288:	2d00      	cmp	r5, #0
 806028a:	bf06      	itte	eq
 806028c:	4635      	moveq	r5, r6
 806028e:	3803      	subeq	r0, #3
 8060290:	3807      	subne	r0, #7
 8060292:	f015 0f01 	tst.w	r5, #1
 8060296:	d107      	bne.n	80602a8 <memchr+0x98>
 8060298:	3001      	adds	r0, #1
 806029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 806029e:	bf02      	ittt	eq
 80602a0:	3001      	addeq	r0, #1
 80602a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80602a6:	3001      	addeq	r0, #1
 80602a8:	bcf0      	pop	{r4, r5, r6, r7}
 80602aa:	3801      	subs	r0, #1
 80602ac:	4770      	bx	lr
 80602ae:	bf00      	nop

080602b0 <__aeabi_drsub>:
 80602b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80602b4:	e002      	b.n	80602bc <__adddf3>
 80602b6:	bf00      	nop

080602b8 <__aeabi_dsub>:
 80602b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080602bc <__adddf3>:
 80602bc:	b530      	push	{r4, r5, lr}
 80602be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80602c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80602c6:	ea94 0f05 	teq	r4, r5
 80602ca:	bf08      	it	eq
 80602cc:	ea90 0f02 	teqeq	r0, r2
 80602d0:	bf1f      	itttt	ne
 80602d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80602d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80602da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80602de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80602e2:	f000 80e2 	beq.w	80604aa <__adddf3+0x1ee>
 80602e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80602ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80602ee:	bfb8      	it	lt
 80602f0:	426d      	neglt	r5, r5
 80602f2:	dd0c      	ble.n	806030e <__adddf3+0x52>
 80602f4:	442c      	add	r4, r5
 80602f6:	ea80 0202 	eor.w	r2, r0, r2
 80602fa:	ea81 0303 	eor.w	r3, r1, r3
 80602fe:	ea82 0000 	eor.w	r0, r2, r0
 8060302:	ea83 0101 	eor.w	r1, r3, r1
 8060306:	ea80 0202 	eor.w	r2, r0, r2
 806030a:	ea81 0303 	eor.w	r3, r1, r3
 806030e:	2d36      	cmp	r5, #54	; 0x36
 8060310:	bf88      	it	hi
 8060312:	bd30      	pophi	{r4, r5, pc}
 8060314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8060318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 806031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8060320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8060324:	d002      	beq.n	806032c <__adddf3+0x70>
 8060326:	4240      	negs	r0, r0
 8060328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 806032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8060330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8060334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8060338:	d002      	beq.n	8060340 <__adddf3+0x84>
 806033a:	4252      	negs	r2, r2
 806033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060340:	ea94 0f05 	teq	r4, r5
 8060344:	f000 80a7 	beq.w	8060496 <__adddf3+0x1da>
 8060348:	f1a4 0401 	sub.w	r4, r4, #1
 806034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8060350:	db0d      	blt.n	806036e <__adddf3+0xb2>
 8060352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8060356:	fa22 f205 	lsr.w	r2, r2, r5
 806035a:	1880      	adds	r0, r0, r2
 806035c:	f141 0100 	adc.w	r1, r1, #0
 8060360:	fa03 f20e 	lsl.w	r2, r3, lr
 8060364:	1880      	adds	r0, r0, r2
 8060366:	fa43 f305 	asr.w	r3, r3, r5
 806036a:	4159      	adcs	r1, r3
 806036c:	e00e      	b.n	806038c <__adddf3+0xd0>
 806036e:	f1a5 0520 	sub.w	r5, r5, #32
 8060372:	f10e 0e20 	add.w	lr, lr, #32
 8060376:	2a01      	cmp	r2, #1
 8060378:	fa03 fc0e 	lsl.w	ip, r3, lr
 806037c:	bf28      	it	cs
 806037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8060382:	fa43 f305 	asr.w	r3, r3, r5
 8060386:	18c0      	adds	r0, r0, r3
 8060388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 806038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8060390:	d507      	bpl.n	80603a2 <__adddf3+0xe6>
 8060392:	f04f 0e00 	mov.w	lr, #0
 8060396:	f1dc 0c00 	rsbs	ip, ip, #0
 806039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 806039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80603a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80603a6:	d31b      	bcc.n	80603e0 <__adddf3+0x124>
 80603a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80603ac:	d30c      	bcc.n	80603c8 <__adddf3+0x10c>
 80603ae:	0849      	lsrs	r1, r1, #1
 80603b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80603b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80603b8:	f104 0401 	add.w	r4, r4, #1
 80603bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80603c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80603c4:	f080 809a 	bcs.w	80604fc <__adddf3+0x240>
 80603c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80603cc:	bf08      	it	eq
 80603ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80603d2:	f150 0000 	adcs.w	r0, r0, #0
 80603d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80603da:	ea41 0105 	orr.w	r1, r1, r5
 80603de:	bd30      	pop	{r4, r5, pc}
 80603e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80603e4:	4140      	adcs	r0, r0
 80603e6:	eb41 0101 	adc.w	r1, r1, r1
 80603ea:	3c01      	subs	r4, #1
 80603ec:	bf28      	it	cs
 80603ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80603f2:	d2e9      	bcs.n	80603c8 <__adddf3+0x10c>
 80603f4:	f091 0f00 	teq	r1, #0
 80603f8:	bf04      	itt	eq
 80603fa:	4601      	moveq	r1, r0
 80603fc:	2000      	moveq	r0, #0
 80603fe:	fab1 f381 	clz	r3, r1
 8060402:	bf08      	it	eq
 8060404:	3320      	addeq	r3, #32
 8060406:	f1a3 030b 	sub.w	r3, r3, #11
 806040a:	f1b3 0220 	subs.w	r2, r3, #32
 806040e:	da0c      	bge.n	806042a <__adddf3+0x16e>
 8060410:	320c      	adds	r2, #12
 8060412:	dd08      	ble.n	8060426 <__adddf3+0x16a>
 8060414:	f102 0c14 	add.w	ip, r2, #20
 8060418:	f1c2 020c 	rsb	r2, r2, #12
 806041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8060420:	fa21 f102 	lsr.w	r1, r1, r2
 8060424:	e00c      	b.n	8060440 <__adddf3+0x184>
 8060426:	f102 0214 	add.w	r2, r2, #20
 806042a:	bfd8      	it	le
 806042c:	f1c2 0c20 	rsble	ip, r2, #32
 8060430:	fa01 f102 	lsl.w	r1, r1, r2
 8060434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8060438:	bfdc      	itt	le
 806043a:	ea41 010c 	orrle.w	r1, r1, ip
 806043e:	4090      	lslle	r0, r2
 8060440:	1ae4      	subs	r4, r4, r3
 8060442:	bfa2      	ittt	ge
 8060444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8060448:	4329      	orrge	r1, r5
 806044a:	bd30      	popge	{r4, r5, pc}
 806044c:	ea6f 0404 	mvn.w	r4, r4
 8060450:	3c1f      	subs	r4, #31
 8060452:	da1c      	bge.n	806048e <__adddf3+0x1d2>
 8060454:	340c      	adds	r4, #12
 8060456:	dc0e      	bgt.n	8060476 <__adddf3+0x1ba>
 8060458:	f104 0414 	add.w	r4, r4, #20
 806045c:	f1c4 0220 	rsb	r2, r4, #32
 8060460:	fa20 f004 	lsr.w	r0, r0, r4
 8060464:	fa01 f302 	lsl.w	r3, r1, r2
 8060468:	ea40 0003 	orr.w	r0, r0, r3
 806046c:	fa21 f304 	lsr.w	r3, r1, r4
 8060470:	ea45 0103 	orr.w	r1, r5, r3
 8060474:	bd30      	pop	{r4, r5, pc}
 8060476:	f1c4 040c 	rsb	r4, r4, #12
 806047a:	f1c4 0220 	rsb	r2, r4, #32
 806047e:	fa20 f002 	lsr.w	r0, r0, r2
 8060482:	fa01 f304 	lsl.w	r3, r1, r4
 8060486:	ea40 0003 	orr.w	r0, r0, r3
 806048a:	4629      	mov	r1, r5
 806048c:	bd30      	pop	{r4, r5, pc}
 806048e:	fa21 f004 	lsr.w	r0, r1, r4
 8060492:	4629      	mov	r1, r5
 8060494:	bd30      	pop	{r4, r5, pc}
 8060496:	f094 0f00 	teq	r4, #0
 806049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 806049e:	bf06      	itte	eq
 80604a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80604a4:	3401      	addeq	r4, #1
 80604a6:	3d01      	subne	r5, #1
 80604a8:	e74e      	b.n	8060348 <__adddf3+0x8c>
 80604aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80604ae:	bf18      	it	ne
 80604b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80604b4:	d029      	beq.n	806050a <__adddf3+0x24e>
 80604b6:	ea94 0f05 	teq	r4, r5
 80604ba:	bf08      	it	eq
 80604bc:	ea90 0f02 	teqeq	r0, r2
 80604c0:	d005      	beq.n	80604ce <__adddf3+0x212>
 80604c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80604c6:	bf04      	itt	eq
 80604c8:	4619      	moveq	r1, r3
 80604ca:	4610      	moveq	r0, r2
 80604cc:	bd30      	pop	{r4, r5, pc}
 80604ce:	ea91 0f03 	teq	r1, r3
 80604d2:	bf1e      	ittt	ne
 80604d4:	2100      	movne	r1, #0
 80604d6:	2000      	movne	r0, #0
 80604d8:	bd30      	popne	{r4, r5, pc}
 80604da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80604de:	d105      	bne.n	80604ec <__adddf3+0x230>
 80604e0:	0040      	lsls	r0, r0, #1
 80604e2:	4149      	adcs	r1, r1
 80604e4:	bf28      	it	cs
 80604e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80604ea:	bd30      	pop	{r4, r5, pc}
 80604ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80604f0:	bf3c      	itt	cc
 80604f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80604f6:	bd30      	popcc	{r4, r5, pc}
 80604f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80604fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8060500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8060504:	f04f 0000 	mov.w	r0, #0
 8060508:	bd30      	pop	{r4, r5, pc}
 806050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 806050e:	bf1a      	itte	ne
 8060510:	4619      	movne	r1, r3
 8060512:	4610      	movne	r0, r2
 8060514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8060518:	bf1c      	itt	ne
 806051a:	460b      	movne	r3, r1
 806051c:	4602      	movne	r2, r0
 806051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8060522:	bf06      	itte	eq
 8060524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8060528:	ea91 0f03 	teqeq	r1, r3
 806052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8060530:	bd30      	pop	{r4, r5, pc}
 8060532:	bf00      	nop

08060534 <__aeabi_ui2d>:
 8060534:	f090 0f00 	teq	r0, #0
 8060538:	bf04      	itt	eq
 806053a:	2100      	moveq	r1, #0
 806053c:	4770      	bxeq	lr
 806053e:	b530      	push	{r4, r5, lr}
 8060540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8060544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8060548:	f04f 0500 	mov.w	r5, #0
 806054c:	f04f 0100 	mov.w	r1, #0
 8060550:	e750      	b.n	80603f4 <__adddf3+0x138>
 8060552:	bf00      	nop

08060554 <__aeabi_i2d>:
 8060554:	f090 0f00 	teq	r0, #0
 8060558:	bf04      	itt	eq
 806055a:	2100      	moveq	r1, #0
 806055c:	4770      	bxeq	lr
 806055e:	b530      	push	{r4, r5, lr}
 8060560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8060564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8060568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 806056c:	bf48      	it	mi
 806056e:	4240      	negmi	r0, r0
 8060570:	f04f 0100 	mov.w	r1, #0
 8060574:	e73e      	b.n	80603f4 <__adddf3+0x138>
 8060576:	bf00      	nop

08060578 <__aeabi_f2d>:
 8060578:	0042      	lsls	r2, r0, #1
 806057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 806057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8060582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8060586:	bf1f      	itttt	ne
 8060588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 806058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8060590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8060594:	4770      	bxne	lr
 8060596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 806059a:	bf08      	it	eq
 806059c:	4770      	bxeq	lr
 806059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80605a2:	bf04      	itt	eq
 80605a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80605a8:	4770      	bxeq	lr
 80605aa:	b530      	push	{r4, r5, lr}
 80605ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80605b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80605b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80605b8:	e71c      	b.n	80603f4 <__adddf3+0x138>
 80605ba:	bf00      	nop

080605bc <__aeabi_ul2d>:
 80605bc:	ea50 0201 	orrs.w	r2, r0, r1
 80605c0:	bf08      	it	eq
 80605c2:	4770      	bxeq	lr
 80605c4:	b530      	push	{r4, r5, lr}
 80605c6:	f04f 0500 	mov.w	r5, #0
 80605ca:	e00a      	b.n	80605e2 <__aeabi_l2d+0x16>

080605cc <__aeabi_l2d>:
 80605cc:	ea50 0201 	orrs.w	r2, r0, r1
 80605d0:	bf08      	it	eq
 80605d2:	4770      	bxeq	lr
 80605d4:	b530      	push	{r4, r5, lr}
 80605d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80605da:	d502      	bpl.n	80605e2 <__aeabi_l2d+0x16>
 80605dc:	4240      	negs	r0, r0
 80605de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80605e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80605e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80605ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80605ee:	f43f aed8 	beq.w	80603a2 <__adddf3+0xe6>
 80605f2:	f04f 0203 	mov.w	r2, #3
 80605f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80605fa:	bf18      	it	ne
 80605fc:	3203      	addne	r2, #3
 80605fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8060602:	bf18      	it	ne
 8060604:	3203      	addne	r2, #3
 8060606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 806060a:	f1c2 0320 	rsb	r3, r2, #32
 806060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8060612:	fa20 f002 	lsr.w	r0, r0, r2
 8060616:	fa01 fe03 	lsl.w	lr, r1, r3
 806061a:	ea40 000e 	orr.w	r0, r0, lr
 806061e:	fa21 f102 	lsr.w	r1, r1, r2
 8060622:	4414      	add	r4, r2
 8060624:	e6bd      	b.n	80603a2 <__adddf3+0xe6>
 8060626:	bf00      	nop

08060628 <__aeabi_dmul>:
 8060628:	b570      	push	{r4, r5, r6, lr}
 806062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 806062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8060632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8060636:	bf1d      	ittte	ne
 8060638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 806063c:	ea94 0f0c 	teqne	r4, ip
 8060640:	ea95 0f0c 	teqne	r5, ip
 8060644:	f000 f8de 	bleq	8060804 <__aeabi_dmul+0x1dc>
 8060648:	442c      	add	r4, r5
 806064a:	ea81 0603 	eor.w	r6, r1, r3
 806064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8060652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8060656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 806065a:	bf18      	it	ne
 806065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8060660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8060664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8060668:	d038      	beq.n	80606dc <__aeabi_dmul+0xb4>
 806066a:	fba0 ce02 	umull	ip, lr, r0, r2
 806066e:	f04f 0500 	mov.w	r5, #0
 8060672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8060676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 806067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 806067e:	f04f 0600 	mov.w	r6, #0
 8060682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8060686:	f09c 0f00 	teq	ip, #0
 806068a:	bf18      	it	ne
 806068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8060690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8060694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8060698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 806069c:	d204      	bcs.n	80606a8 <__aeabi_dmul+0x80>
 806069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80606a2:	416d      	adcs	r5, r5
 80606a4:	eb46 0606 	adc.w	r6, r6, r6
 80606a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80606ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80606b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80606b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80606b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80606bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80606c0:	bf88      	it	hi
 80606c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80606c6:	d81e      	bhi.n	8060706 <__aeabi_dmul+0xde>
 80606c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80606cc:	bf08      	it	eq
 80606ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80606d2:	f150 0000 	adcs.w	r0, r0, #0
 80606d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80606da:	bd70      	pop	{r4, r5, r6, pc}
 80606dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80606e0:	ea46 0101 	orr.w	r1, r6, r1
 80606e4:	ea40 0002 	orr.w	r0, r0, r2
 80606e8:	ea81 0103 	eor.w	r1, r1, r3
 80606ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80606f0:	bfc2      	ittt	gt
 80606f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80606f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80606fa:	bd70      	popgt	{r4, r5, r6, pc}
 80606fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8060700:	f04f 0e00 	mov.w	lr, #0
 8060704:	3c01      	subs	r4, #1
 8060706:	f300 80ab 	bgt.w	8060860 <__aeabi_dmul+0x238>
 806070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 806070e:	bfde      	ittt	le
 8060710:	2000      	movle	r0, #0
 8060712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8060716:	bd70      	pople	{r4, r5, r6, pc}
 8060718:	f1c4 0400 	rsb	r4, r4, #0
 806071c:	3c20      	subs	r4, #32
 806071e:	da35      	bge.n	806078c <__aeabi_dmul+0x164>
 8060720:	340c      	adds	r4, #12
 8060722:	dc1b      	bgt.n	806075c <__aeabi_dmul+0x134>
 8060724:	f104 0414 	add.w	r4, r4, #20
 8060728:	f1c4 0520 	rsb	r5, r4, #32
 806072c:	fa00 f305 	lsl.w	r3, r0, r5
 8060730:	fa20 f004 	lsr.w	r0, r0, r4
 8060734:	fa01 f205 	lsl.w	r2, r1, r5
 8060738:	ea40 0002 	orr.w	r0, r0, r2
 806073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8060740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8060744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8060748:	fa21 f604 	lsr.w	r6, r1, r4
 806074c:	eb42 0106 	adc.w	r1, r2, r6
 8060750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8060754:	bf08      	it	eq
 8060756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 806075a:	bd70      	pop	{r4, r5, r6, pc}
 806075c:	f1c4 040c 	rsb	r4, r4, #12
 8060760:	f1c4 0520 	rsb	r5, r4, #32
 8060764:	fa00 f304 	lsl.w	r3, r0, r4
 8060768:	fa20 f005 	lsr.w	r0, r0, r5
 806076c:	fa01 f204 	lsl.w	r2, r1, r4
 8060770:	ea40 0002 	orr.w	r0, r0, r2
 8060774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8060778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 806077c:	f141 0100 	adc.w	r1, r1, #0
 8060780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8060784:	bf08      	it	eq
 8060786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 806078a:	bd70      	pop	{r4, r5, r6, pc}
 806078c:	f1c4 0520 	rsb	r5, r4, #32
 8060790:	fa00 f205 	lsl.w	r2, r0, r5
 8060794:	ea4e 0e02 	orr.w	lr, lr, r2
 8060798:	fa20 f304 	lsr.w	r3, r0, r4
 806079c:	fa01 f205 	lsl.w	r2, r1, r5
 80607a0:	ea43 0302 	orr.w	r3, r3, r2
 80607a4:	fa21 f004 	lsr.w	r0, r1, r4
 80607a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80607ac:	fa21 f204 	lsr.w	r2, r1, r4
 80607b0:	ea20 0002 	bic.w	r0, r0, r2
 80607b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80607b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80607bc:	bf08      	it	eq
 80607be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80607c2:	bd70      	pop	{r4, r5, r6, pc}
 80607c4:	f094 0f00 	teq	r4, #0
 80607c8:	d10f      	bne.n	80607ea <__aeabi_dmul+0x1c2>
 80607ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80607ce:	0040      	lsls	r0, r0, #1
 80607d0:	eb41 0101 	adc.w	r1, r1, r1
 80607d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80607d8:	bf08      	it	eq
 80607da:	3c01      	subeq	r4, #1
 80607dc:	d0f7      	beq.n	80607ce <__aeabi_dmul+0x1a6>
 80607de:	ea41 0106 	orr.w	r1, r1, r6
 80607e2:	f095 0f00 	teq	r5, #0
 80607e6:	bf18      	it	ne
 80607e8:	4770      	bxne	lr
 80607ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80607ee:	0052      	lsls	r2, r2, #1
 80607f0:	eb43 0303 	adc.w	r3, r3, r3
 80607f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80607f8:	bf08      	it	eq
 80607fa:	3d01      	subeq	r5, #1
 80607fc:	d0f7      	beq.n	80607ee <__aeabi_dmul+0x1c6>
 80607fe:	ea43 0306 	orr.w	r3, r3, r6
 8060802:	4770      	bx	lr
 8060804:	ea94 0f0c 	teq	r4, ip
 8060808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 806080c:	bf18      	it	ne
 806080e:	ea95 0f0c 	teqne	r5, ip
 8060812:	d00c      	beq.n	806082e <__aeabi_dmul+0x206>
 8060814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8060818:	bf18      	it	ne
 806081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 806081e:	d1d1      	bne.n	80607c4 <__aeabi_dmul+0x19c>
 8060820:	ea81 0103 	eor.w	r1, r1, r3
 8060824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8060828:	f04f 0000 	mov.w	r0, #0
 806082c:	bd70      	pop	{r4, r5, r6, pc}
 806082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8060832:	bf06      	itte	eq
 8060834:	4610      	moveq	r0, r2
 8060836:	4619      	moveq	r1, r3
 8060838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 806083c:	d019      	beq.n	8060872 <__aeabi_dmul+0x24a>
 806083e:	ea94 0f0c 	teq	r4, ip
 8060842:	d102      	bne.n	806084a <__aeabi_dmul+0x222>
 8060844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8060848:	d113      	bne.n	8060872 <__aeabi_dmul+0x24a>
 806084a:	ea95 0f0c 	teq	r5, ip
 806084e:	d105      	bne.n	806085c <__aeabi_dmul+0x234>
 8060850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8060854:	bf1c      	itt	ne
 8060856:	4610      	movne	r0, r2
 8060858:	4619      	movne	r1, r3
 806085a:	d10a      	bne.n	8060872 <__aeabi_dmul+0x24a>
 806085c:	ea81 0103 	eor.w	r1, r1, r3
 8060860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8060864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8060868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 806086c:	f04f 0000 	mov.w	r0, #0
 8060870:	bd70      	pop	{r4, r5, r6, pc}
 8060872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8060876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 806087a:	bd70      	pop	{r4, r5, r6, pc}

0806087c <__aeabi_ddiv>:
 806087c:	b570      	push	{r4, r5, r6, lr}
 806087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8060882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8060886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 806088a:	bf1d      	ittte	ne
 806088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8060890:	ea94 0f0c 	teqne	r4, ip
 8060894:	ea95 0f0c 	teqne	r5, ip
 8060898:	f000 f8a7 	bleq	80609ea <__aeabi_ddiv+0x16e>
 806089c:	eba4 0405 	sub.w	r4, r4, r5
 80608a0:	ea81 0e03 	eor.w	lr, r1, r3
 80608a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80608a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80608ac:	f000 8088 	beq.w	80609c0 <__aeabi_ddiv+0x144>
 80608b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80608b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80608b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80608bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80608c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80608c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80608c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80608cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80608d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80608d4:	429d      	cmp	r5, r3
 80608d6:	bf08      	it	eq
 80608d8:	4296      	cmpeq	r6, r2
 80608da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80608de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80608e2:	d202      	bcs.n	80608ea <__aeabi_ddiv+0x6e>
 80608e4:	085b      	lsrs	r3, r3, #1
 80608e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80608ea:	1ab6      	subs	r6, r6, r2
 80608ec:	eb65 0503 	sbc.w	r5, r5, r3
 80608f0:	085b      	lsrs	r3, r3, #1
 80608f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80608f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80608fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80608fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8060902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8060906:	bf22      	ittt	cs
 8060908:	1ab6      	subcs	r6, r6, r2
 806090a:	4675      	movcs	r5, lr
 806090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8060910:	085b      	lsrs	r3, r3, #1
 8060912:	ea4f 0232 	mov.w	r2, r2, rrx
 8060916:	ebb6 0e02 	subs.w	lr, r6, r2
 806091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 806091e:	bf22      	ittt	cs
 8060920:	1ab6      	subcs	r6, r6, r2
 8060922:	4675      	movcs	r5, lr
 8060924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8060928:	085b      	lsrs	r3, r3, #1
 806092a:	ea4f 0232 	mov.w	r2, r2, rrx
 806092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8060932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8060936:	bf22      	ittt	cs
 8060938:	1ab6      	subcs	r6, r6, r2
 806093a:	4675      	movcs	r5, lr
 806093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8060940:	085b      	lsrs	r3, r3, #1
 8060942:	ea4f 0232 	mov.w	r2, r2, rrx
 8060946:	ebb6 0e02 	subs.w	lr, r6, r2
 806094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 806094e:	bf22      	ittt	cs
 8060950:	1ab6      	subcs	r6, r6, r2
 8060952:	4675      	movcs	r5, lr
 8060954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8060958:	ea55 0e06 	orrs.w	lr, r5, r6
 806095c:	d018      	beq.n	8060990 <__aeabi_ddiv+0x114>
 806095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8060962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8060966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 806096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 806096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8060972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8060976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 806097a:	d1c0      	bne.n	80608fe <__aeabi_ddiv+0x82>
 806097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8060980:	d10b      	bne.n	806099a <__aeabi_ddiv+0x11e>
 8060982:	ea41 0100 	orr.w	r1, r1, r0
 8060986:	f04f 0000 	mov.w	r0, #0
 806098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 806098e:	e7b6      	b.n	80608fe <__aeabi_ddiv+0x82>
 8060990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8060994:	bf04      	itt	eq
 8060996:	4301      	orreq	r1, r0
 8060998:	2000      	moveq	r0, #0
 806099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 806099e:	bf88      	it	hi
 80609a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80609a4:	f63f aeaf 	bhi.w	8060706 <__aeabi_dmul+0xde>
 80609a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80609ac:	bf04      	itt	eq
 80609ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80609b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80609b6:	f150 0000 	adcs.w	r0, r0, #0
 80609ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80609be:	bd70      	pop	{r4, r5, r6, pc}
 80609c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80609c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80609c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80609cc:	bfc2      	ittt	gt
 80609ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80609d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80609d6:	bd70      	popgt	{r4, r5, r6, pc}
 80609d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80609dc:	f04f 0e00 	mov.w	lr, #0
 80609e0:	3c01      	subs	r4, #1
 80609e2:	e690      	b.n	8060706 <__aeabi_dmul+0xde>
 80609e4:	ea45 0e06 	orr.w	lr, r5, r6
 80609e8:	e68d      	b.n	8060706 <__aeabi_dmul+0xde>
 80609ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80609ee:	ea94 0f0c 	teq	r4, ip
 80609f2:	bf08      	it	eq
 80609f4:	ea95 0f0c 	teqeq	r5, ip
 80609f8:	f43f af3b 	beq.w	8060872 <__aeabi_dmul+0x24a>
 80609fc:	ea94 0f0c 	teq	r4, ip
 8060a00:	d10a      	bne.n	8060a18 <__aeabi_ddiv+0x19c>
 8060a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8060a06:	f47f af34 	bne.w	8060872 <__aeabi_dmul+0x24a>
 8060a0a:	ea95 0f0c 	teq	r5, ip
 8060a0e:	f47f af25 	bne.w	806085c <__aeabi_dmul+0x234>
 8060a12:	4610      	mov	r0, r2
 8060a14:	4619      	mov	r1, r3
 8060a16:	e72c      	b.n	8060872 <__aeabi_dmul+0x24a>
 8060a18:	ea95 0f0c 	teq	r5, ip
 8060a1c:	d106      	bne.n	8060a2c <__aeabi_ddiv+0x1b0>
 8060a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8060a22:	f43f aefd 	beq.w	8060820 <__aeabi_dmul+0x1f8>
 8060a26:	4610      	mov	r0, r2
 8060a28:	4619      	mov	r1, r3
 8060a2a:	e722      	b.n	8060872 <__aeabi_dmul+0x24a>
 8060a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8060a30:	bf18      	it	ne
 8060a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8060a36:	f47f aec5 	bne.w	80607c4 <__aeabi_dmul+0x19c>
 8060a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8060a3e:	f47f af0d 	bne.w	806085c <__aeabi_dmul+0x234>
 8060a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8060a46:	f47f aeeb 	bne.w	8060820 <__aeabi_dmul+0x1f8>
 8060a4a:	e712      	b.n	8060872 <__aeabi_dmul+0x24a>

08060a4c <__gedf2>:
 8060a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8060a50:	e006      	b.n	8060a60 <__cmpdf2+0x4>
 8060a52:	bf00      	nop

08060a54 <__ledf2>:
 8060a54:	f04f 0c01 	mov.w	ip, #1
 8060a58:	e002      	b.n	8060a60 <__cmpdf2+0x4>
 8060a5a:	bf00      	nop

08060a5c <__cmpdf2>:
 8060a5c:	f04f 0c01 	mov.w	ip, #1
 8060a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8060a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8060a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8060a70:	bf18      	it	ne
 8060a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8060a76:	d01b      	beq.n	8060ab0 <__cmpdf2+0x54>
 8060a78:	b001      	add	sp, #4
 8060a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8060a7e:	bf0c      	ite	eq
 8060a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8060a84:	ea91 0f03 	teqne	r1, r3
 8060a88:	bf02      	ittt	eq
 8060a8a:	ea90 0f02 	teqeq	r0, r2
 8060a8e:	2000      	moveq	r0, #0
 8060a90:	4770      	bxeq	lr
 8060a92:	f110 0f00 	cmn.w	r0, #0
 8060a96:	ea91 0f03 	teq	r1, r3
 8060a9a:	bf58      	it	pl
 8060a9c:	4299      	cmppl	r1, r3
 8060a9e:	bf08      	it	eq
 8060aa0:	4290      	cmpeq	r0, r2
 8060aa2:	bf2c      	ite	cs
 8060aa4:	17d8      	asrcs	r0, r3, #31
 8060aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8060aaa:	f040 0001 	orr.w	r0, r0, #1
 8060aae:	4770      	bx	lr
 8060ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8060ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060ab8:	d102      	bne.n	8060ac0 <__cmpdf2+0x64>
 8060aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8060abe:	d107      	bne.n	8060ad0 <__cmpdf2+0x74>
 8060ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8060ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060ac8:	d1d6      	bne.n	8060a78 <__cmpdf2+0x1c>
 8060aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8060ace:	d0d3      	beq.n	8060a78 <__cmpdf2+0x1c>
 8060ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8060ad4:	4770      	bx	lr
 8060ad6:	bf00      	nop

08060ad8 <__aeabi_cdrcmple>:
 8060ad8:	4684      	mov	ip, r0
 8060ada:	4610      	mov	r0, r2
 8060adc:	4662      	mov	r2, ip
 8060ade:	468c      	mov	ip, r1
 8060ae0:	4619      	mov	r1, r3
 8060ae2:	4663      	mov	r3, ip
 8060ae4:	e000      	b.n	8060ae8 <__aeabi_cdcmpeq>
 8060ae6:	bf00      	nop

08060ae8 <__aeabi_cdcmpeq>:
 8060ae8:	b501      	push	{r0, lr}
 8060aea:	f7ff ffb7 	bl	8060a5c <__cmpdf2>
 8060aee:	2800      	cmp	r0, #0
 8060af0:	bf48      	it	mi
 8060af2:	f110 0f00 	cmnmi.w	r0, #0
 8060af6:	bd01      	pop	{r0, pc}

08060af8 <__aeabi_dcmpeq>:
 8060af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060afc:	f7ff fff4 	bl	8060ae8 <__aeabi_cdcmpeq>
 8060b00:	bf0c      	ite	eq
 8060b02:	2001      	moveq	r0, #1
 8060b04:	2000      	movne	r0, #0
 8060b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b0a:	bf00      	nop

08060b0c <__aeabi_dcmplt>:
 8060b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b10:	f7ff ffea 	bl	8060ae8 <__aeabi_cdcmpeq>
 8060b14:	bf34      	ite	cc
 8060b16:	2001      	movcc	r0, #1
 8060b18:	2000      	movcs	r0, #0
 8060b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b1e:	bf00      	nop

08060b20 <__aeabi_dcmple>:
 8060b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b24:	f7ff ffe0 	bl	8060ae8 <__aeabi_cdcmpeq>
 8060b28:	bf94      	ite	ls
 8060b2a:	2001      	movls	r0, #1
 8060b2c:	2000      	movhi	r0, #0
 8060b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b32:	bf00      	nop

08060b34 <__aeabi_dcmpge>:
 8060b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b38:	f7ff ffce 	bl	8060ad8 <__aeabi_cdrcmple>
 8060b3c:	bf94      	ite	ls
 8060b3e:	2001      	movls	r0, #1
 8060b40:	2000      	movhi	r0, #0
 8060b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b46:	bf00      	nop

08060b48 <__aeabi_dcmpgt>:
 8060b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b4c:	f7ff ffc4 	bl	8060ad8 <__aeabi_cdrcmple>
 8060b50:	bf34      	ite	cc
 8060b52:	2001      	movcc	r0, #1
 8060b54:	2000      	movcs	r0, #0
 8060b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b5a:	bf00      	nop

08060b5c <__aeabi_dcmpun>:
 8060b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8060b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060b64:	d102      	bne.n	8060b6c <__aeabi_dcmpun+0x10>
 8060b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8060b6a:	d10a      	bne.n	8060b82 <__aeabi_dcmpun+0x26>
 8060b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8060b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060b74:	d102      	bne.n	8060b7c <__aeabi_dcmpun+0x20>
 8060b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8060b7a:	d102      	bne.n	8060b82 <__aeabi_dcmpun+0x26>
 8060b7c:	f04f 0000 	mov.w	r0, #0
 8060b80:	4770      	bx	lr
 8060b82:	f04f 0001 	mov.w	r0, #1
 8060b86:	4770      	bx	lr

08060b88 <__aeabi_d2iz>:
 8060b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8060b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8060b90:	d215      	bcs.n	8060bbe <__aeabi_d2iz+0x36>
 8060b92:	d511      	bpl.n	8060bb8 <__aeabi_d2iz+0x30>
 8060b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8060b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8060b9c:	d912      	bls.n	8060bc4 <__aeabi_d2iz+0x3c>
 8060b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8060ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8060ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8060baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8060bae:	fa23 f002 	lsr.w	r0, r3, r2
 8060bb2:	bf18      	it	ne
 8060bb4:	4240      	negne	r0, r0
 8060bb6:	4770      	bx	lr
 8060bb8:	f04f 0000 	mov.w	r0, #0
 8060bbc:	4770      	bx	lr
 8060bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8060bc2:	d105      	bne.n	8060bd0 <__aeabi_d2iz+0x48>
 8060bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8060bc8:	bf08      	it	eq
 8060bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8060bce:	4770      	bx	lr
 8060bd0:	f04f 0000 	mov.w	r0, #0
 8060bd4:	4770      	bx	lr
 8060bd6:	bf00      	nop

08060bd8 <__aeabi_d2uiz>:
 8060bd8:	004a      	lsls	r2, r1, #1
 8060bda:	d211      	bcs.n	8060c00 <__aeabi_d2uiz+0x28>
 8060bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8060be0:	d211      	bcs.n	8060c06 <__aeabi_d2uiz+0x2e>
 8060be2:	d50d      	bpl.n	8060c00 <__aeabi_d2uiz+0x28>
 8060be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8060be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8060bec:	d40e      	bmi.n	8060c0c <__aeabi_d2uiz+0x34>
 8060bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8060bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8060bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8060bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8060bfe:	4770      	bx	lr
 8060c00:	f04f 0000 	mov.w	r0, #0
 8060c04:	4770      	bx	lr
 8060c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8060c0a:	d102      	bne.n	8060c12 <__aeabi_d2uiz+0x3a>
 8060c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8060c10:	4770      	bx	lr
 8060c12:	f04f 0000 	mov.w	r0, #0
 8060c16:	4770      	bx	lr

08060c18 <__aeabi_d2f>:
 8060c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8060c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8060c20:	bf24      	itt	cs
 8060c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8060c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8060c2a:	d90d      	bls.n	8060c48 <__aeabi_d2f+0x30>
 8060c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8060c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8060c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8060c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8060c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8060c40:	bf08      	it	eq
 8060c42:	f020 0001 	biceq.w	r0, r0, #1
 8060c46:	4770      	bx	lr
 8060c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8060c4c:	d121      	bne.n	8060c92 <__aeabi_d2f+0x7a>
 8060c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8060c52:	bfbc      	itt	lt
 8060c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8060c58:	4770      	bxlt	lr
 8060c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8060c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8060c62:	f1c2 0218 	rsb	r2, r2, #24
 8060c66:	f1c2 0c20 	rsb	ip, r2, #32
 8060c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8060c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8060c72:	bf18      	it	ne
 8060c74:	f040 0001 	orrne.w	r0, r0, #1
 8060c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8060c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8060c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8060c84:	ea40 000c 	orr.w	r0, r0, ip
 8060c88:	fa23 f302 	lsr.w	r3, r3, r2
 8060c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8060c90:	e7cc      	b.n	8060c2c <__aeabi_d2f+0x14>
 8060c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8060c96:	d107      	bne.n	8060ca8 <__aeabi_d2f+0x90>
 8060c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8060c9c:	bf1e      	ittt	ne
 8060c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8060ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8060ca6:	4770      	bxne	lr
 8060ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8060cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8060cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8060cb4:	4770      	bx	lr
 8060cb6:	bf00      	nop

08060cb8 <__aeabi_ldivmod>:
 8060cb8:	b97b      	cbnz	r3, 8060cda <__aeabi_ldivmod+0x22>
 8060cba:	b972      	cbnz	r2, 8060cda <__aeabi_ldivmod+0x22>
 8060cbc:	2900      	cmp	r1, #0
 8060cbe:	bfbe      	ittt	lt
 8060cc0:	2000      	movlt	r0, #0
 8060cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8060cc6:	e006      	blt.n	8060cd6 <__aeabi_ldivmod+0x1e>
 8060cc8:	bf08      	it	eq
 8060cca:	2800      	cmpeq	r0, #0
 8060ccc:	bf1c      	itt	ne
 8060cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8060cd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8060cd6:	f000 b9ef 	b.w	80610b8 <__aeabi_idiv0>
 8060cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8060cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8060ce2:	2900      	cmp	r1, #0
 8060ce4:	db09      	blt.n	8060cfa <__aeabi_ldivmod+0x42>
 8060ce6:	2b00      	cmp	r3, #0
 8060ce8:	db1a      	blt.n	8060d20 <__aeabi_ldivmod+0x68>
 8060cea:	f000 f883 	bl	8060df4 <__udivmoddi4>
 8060cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060cf6:	b004      	add	sp, #16
 8060cf8:	4770      	bx	lr
 8060cfa:	4240      	negs	r0, r0
 8060cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060d00:	2b00      	cmp	r3, #0
 8060d02:	db1b      	blt.n	8060d3c <__aeabi_ldivmod+0x84>
 8060d04:	f000 f876 	bl	8060df4 <__udivmoddi4>
 8060d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d10:	b004      	add	sp, #16
 8060d12:	4240      	negs	r0, r0
 8060d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060d18:	4252      	negs	r2, r2
 8060d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d1e:	4770      	bx	lr
 8060d20:	4252      	negs	r2, r2
 8060d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d26:	f000 f865 	bl	8060df4 <__udivmoddi4>
 8060d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d32:	b004      	add	sp, #16
 8060d34:	4240      	negs	r0, r0
 8060d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060d3a:	4770      	bx	lr
 8060d3c:	4252      	negs	r2, r2
 8060d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d42:	f000 f857 	bl	8060df4 <__udivmoddi4>
 8060d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d4e:	b004      	add	sp, #16
 8060d50:	4252      	negs	r2, r2
 8060d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d56:	4770      	bx	lr

08060d58 <__aeabi_uldivmod>:
 8060d58:	b953      	cbnz	r3, 8060d70 <__aeabi_uldivmod+0x18>
 8060d5a:	b94a      	cbnz	r2, 8060d70 <__aeabi_uldivmod+0x18>
 8060d5c:	2900      	cmp	r1, #0
 8060d5e:	bf08      	it	eq
 8060d60:	2800      	cmpeq	r0, #0
 8060d62:	bf1c      	itt	ne
 8060d64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8060d68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8060d6c:	f000 b9a4 	b.w	80610b8 <__aeabi_idiv0>
 8060d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8060d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8060d78:	f000 f83c 	bl	8060df4 <__udivmoddi4>
 8060d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d84:	b004      	add	sp, #16
 8060d86:	4770      	bx	lr

08060d88 <__aeabi_d2lz>:
 8060d88:	b538      	push	{r3, r4, r5, lr}
 8060d8a:	2200      	movs	r2, #0
 8060d8c:	2300      	movs	r3, #0
 8060d8e:	4604      	mov	r4, r0
 8060d90:	460d      	mov	r5, r1
 8060d92:	f7ff febb 	bl	8060b0c <__aeabi_dcmplt>
 8060d96:	b928      	cbnz	r0, 8060da4 <__aeabi_d2lz+0x1c>
 8060d98:	4620      	mov	r0, r4
 8060d9a:	4629      	mov	r1, r5
 8060d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8060da0:	f000 b80a 	b.w	8060db8 <__aeabi_d2ulz>
 8060da4:	4620      	mov	r0, r4
 8060da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8060daa:	f000 f805 	bl	8060db8 <__aeabi_d2ulz>
 8060dae:	4240      	negs	r0, r0
 8060db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060db4:	bd38      	pop	{r3, r4, r5, pc}
 8060db6:	bf00      	nop

08060db8 <__aeabi_d2ulz>:
 8060db8:	b5d0      	push	{r4, r6, r7, lr}
 8060dba:	4b0c      	ldr	r3, [pc, #48]	; (8060dec <__aeabi_d2ulz+0x34>)
 8060dbc:	2200      	movs	r2, #0
 8060dbe:	4606      	mov	r6, r0
 8060dc0:	460f      	mov	r7, r1
 8060dc2:	f7ff fc31 	bl	8060628 <__aeabi_dmul>
 8060dc6:	f7ff ff07 	bl	8060bd8 <__aeabi_d2uiz>
 8060dca:	4604      	mov	r4, r0
 8060dcc:	f7ff fbb2 	bl	8060534 <__aeabi_ui2d>
 8060dd0:	4b07      	ldr	r3, [pc, #28]	; (8060df0 <__aeabi_d2ulz+0x38>)
 8060dd2:	2200      	movs	r2, #0
 8060dd4:	f7ff fc28 	bl	8060628 <__aeabi_dmul>
 8060dd8:	4602      	mov	r2, r0
 8060dda:	460b      	mov	r3, r1
 8060ddc:	4630      	mov	r0, r6
 8060dde:	4639      	mov	r1, r7
 8060de0:	f7ff fa6a 	bl	80602b8 <__aeabi_dsub>
 8060de4:	f7ff fef8 	bl	8060bd8 <__aeabi_d2uiz>
 8060de8:	4621      	mov	r1, r4
 8060dea:	bdd0      	pop	{r4, r6, r7, pc}
 8060dec:	3df00000 	.word	0x3df00000
 8060df0:	41f00000 	.word	0x41f00000

08060df4 <__udivmoddi4>:
 8060df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8060df8:	9d08      	ldr	r5, [sp, #32]
 8060dfa:	4604      	mov	r4, r0
 8060dfc:	468c      	mov	ip, r1
 8060dfe:	2b00      	cmp	r3, #0
 8060e00:	f040 8083 	bne.w	8060f0a <__udivmoddi4+0x116>
 8060e04:	428a      	cmp	r2, r1
 8060e06:	4617      	mov	r7, r2
 8060e08:	d947      	bls.n	8060e9a <__udivmoddi4+0xa6>
 8060e0a:	fab2 f282 	clz	r2, r2
 8060e0e:	b142      	cbz	r2, 8060e22 <__udivmoddi4+0x2e>
 8060e10:	f1c2 0020 	rsb	r0, r2, #32
 8060e14:	fa24 f000 	lsr.w	r0, r4, r0
 8060e18:	4091      	lsls	r1, r2
 8060e1a:	4097      	lsls	r7, r2
 8060e1c:	ea40 0c01 	orr.w	ip, r0, r1
 8060e20:	4094      	lsls	r4, r2
 8060e22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8060e26:	0c23      	lsrs	r3, r4, #16
 8060e28:	fbbc f6f8 	udiv	r6, ip, r8
 8060e2c:	fa1f fe87 	uxth.w	lr, r7
 8060e30:	fb08 c116 	mls	r1, r8, r6, ip
 8060e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060e38:	fb06 f10e 	mul.w	r1, r6, lr
 8060e3c:	4299      	cmp	r1, r3
 8060e3e:	d909      	bls.n	8060e54 <__udivmoddi4+0x60>
 8060e40:	18fb      	adds	r3, r7, r3
 8060e42:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8060e46:	f080 8119 	bcs.w	806107c <__udivmoddi4+0x288>
 8060e4a:	4299      	cmp	r1, r3
 8060e4c:	f240 8116 	bls.w	806107c <__udivmoddi4+0x288>
 8060e50:	3e02      	subs	r6, #2
 8060e52:	443b      	add	r3, r7
 8060e54:	1a5b      	subs	r3, r3, r1
 8060e56:	b2a4      	uxth	r4, r4
 8060e58:	fbb3 f0f8 	udiv	r0, r3, r8
 8060e5c:	fb08 3310 	mls	r3, r8, r0, r3
 8060e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8060e64:	fb00 fe0e 	mul.w	lr, r0, lr
 8060e68:	45a6      	cmp	lr, r4
 8060e6a:	d909      	bls.n	8060e80 <__udivmoddi4+0x8c>
 8060e6c:	193c      	adds	r4, r7, r4
 8060e6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8060e72:	f080 8105 	bcs.w	8061080 <__udivmoddi4+0x28c>
 8060e76:	45a6      	cmp	lr, r4
 8060e78:	f240 8102 	bls.w	8061080 <__udivmoddi4+0x28c>
 8060e7c:	3802      	subs	r0, #2
 8060e7e:	443c      	add	r4, r7
 8060e80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8060e84:	eba4 040e 	sub.w	r4, r4, lr
 8060e88:	2600      	movs	r6, #0
 8060e8a:	b11d      	cbz	r5, 8060e94 <__udivmoddi4+0xa0>
 8060e8c:	40d4      	lsrs	r4, r2
 8060e8e:	2300      	movs	r3, #0
 8060e90:	e9c5 4300 	strd	r4, r3, [r5]
 8060e94:	4631      	mov	r1, r6
 8060e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060e9a:	b902      	cbnz	r2, 8060e9e <__udivmoddi4+0xaa>
 8060e9c:	deff      	udf	#255	; 0xff
 8060e9e:	fab2 f282 	clz	r2, r2
 8060ea2:	2a00      	cmp	r2, #0
 8060ea4:	d150      	bne.n	8060f48 <__udivmoddi4+0x154>
 8060ea6:	1bcb      	subs	r3, r1, r7
 8060ea8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060eac:	fa1f f887 	uxth.w	r8, r7
 8060eb0:	2601      	movs	r6, #1
 8060eb2:	fbb3 fcfe 	udiv	ip, r3, lr
 8060eb6:	0c21      	lsrs	r1, r4, #16
 8060eb8:	fb0e 331c 	mls	r3, lr, ip, r3
 8060ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8060ec0:	fb08 f30c 	mul.w	r3, r8, ip
 8060ec4:	428b      	cmp	r3, r1
 8060ec6:	d907      	bls.n	8060ed8 <__udivmoddi4+0xe4>
 8060ec8:	1879      	adds	r1, r7, r1
 8060eca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8060ece:	d202      	bcs.n	8060ed6 <__udivmoddi4+0xe2>
 8060ed0:	428b      	cmp	r3, r1
 8060ed2:	f200 80e9 	bhi.w	80610a8 <__udivmoddi4+0x2b4>
 8060ed6:	4684      	mov	ip, r0
 8060ed8:	1ac9      	subs	r1, r1, r3
 8060eda:	b2a3      	uxth	r3, r4
 8060edc:	fbb1 f0fe 	udiv	r0, r1, lr
 8060ee0:	fb0e 1110 	mls	r1, lr, r0, r1
 8060ee4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8060ee8:	fb08 f800 	mul.w	r8, r8, r0
 8060eec:	45a0      	cmp	r8, r4
 8060eee:	d907      	bls.n	8060f00 <__udivmoddi4+0x10c>
 8060ef0:	193c      	adds	r4, r7, r4
 8060ef2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8060ef6:	d202      	bcs.n	8060efe <__udivmoddi4+0x10a>
 8060ef8:	45a0      	cmp	r8, r4
 8060efa:	f200 80d9 	bhi.w	80610b0 <__udivmoddi4+0x2bc>
 8060efe:	4618      	mov	r0, r3
 8060f00:	eba4 0408 	sub.w	r4, r4, r8
 8060f04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8060f08:	e7bf      	b.n	8060e8a <__udivmoddi4+0x96>
 8060f0a:	428b      	cmp	r3, r1
 8060f0c:	d909      	bls.n	8060f22 <__udivmoddi4+0x12e>
 8060f0e:	2d00      	cmp	r5, #0
 8060f10:	f000 80b1 	beq.w	8061076 <__udivmoddi4+0x282>
 8060f14:	2600      	movs	r6, #0
 8060f16:	e9c5 0100 	strd	r0, r1, [r5]
 8060f1a:	4630      	mov	r0, r6
 8060f1c:	4631      	mov	r1, r6
 8060f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060f22:	fab3 f683 	clz	r6, r3
 8060f26:	2e00      	cmp	r6, #0
 8060f28:	d14a      	bne.n	8060fc0 <__udivmoddi4+0x1cc>
 8060f2a:	428b      	cmp	r3, r1
 8060f2c:	d302      	bcc.n	8060f34 <__udivmoddi4+0x140>
 8060f2e:	4282      	cmp	r2, r0
 8060f30:	f200 80b8 	bhi.w	80610a4 <__udivmoddi4+0x2b0>
 8060f34:	1a84      	subs	r4, r0, r2
 8060f36:	eb61 0103 	sbc.w	r1, r1, r3
 8060f3a:	2001      	movs	r0, #1
 8060f3c:	468c      	mov	ip, r1
 8060f3e:	2d00      	cmp	r5, #0
 8060f40:	d0a8      	beq.n	8060e94 <__udivmoddi4+0xa0>
 8060f42:	e9c5 4c00 	strd	r4, ip, [r5]
 8060f46:	e7a5      	b.n	8060e94 <__udivmoddi4+0xa0>
 8060f48:	f1c2 0320 	rsb	r3, r2, #32
 8060f4c:	fa20 f603 	lsr.w	r6, r0, r3
 8060f50:	4097      	lsls	r7, r2
 8060f52:	fa01 f002 	lsl.w	r0, r1, r2
 8060f56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060f5a:	40d9      	lsrs	r1, r3
 8060f5c:	4330      	orrs	r0, r6
 8060f5e:	0c03      	lsrs	r3, r0, #16
 8060f60:	fbb1 f6fe 	udiv	r6, r1, lr
 8060f64:	fa1f f887 	uxth.w	r8, r7
 8060f68:	fb0e 1116 	mls	r1, lr, r6, r1
 8060f6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060f70:	fb06 f108 	mul.w	r1, r6, r8
 8060f74:	4299      	cmp	r1, r3
 8060f76:	fa04 f402 	lsl.w	r4, r4, r2
 8060f7a:	d909      	bls.n	8060f90 <__udivmoddi4+0x19c>
 8060f7c:	18fb      	adds	r3, r7, r3
 8060f7e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8060f82:	f080 808d 	bcs.w	80610a0 <__udivmoddi4+0x2ac>
 8060f86:	4299      	cmp	r1, r3
 8060f88:	f240 808a 	bls.w	80610a0 <__udivmoddi4+0x2ac>
 8060f8c:	3e02      	subs	r6, #2
 8060f8e:	443b      	add	r3, r7
 8060f90:	1a5b      	subs	r3, r3, r1
 8060f92:	b281      	uxth	r1, r0
 8060f94:	fbb3 f0fe 	udiv	r0, r3, lr
 8060f98:	fb0e 3310 	mls	r3, lr, r0, r3
 8060f9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8060fa0:	fb00 f308 	mul.w	r3, r0, r8
 8060fa4:	428b      	cmp	r3, r1
 8060fa6:	d907      	bls.n	8060fb8 <__udivmoddi4+0x1c4>
 8060fa8:	1879      	adds	r1, r7, r1
 8060faa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8060fae:	d273      	bcs.n	8061098 <__udivmoddi4+0x2a4>
 8060fb0:	428b      	cmp	r3, r1
 8060fb2:	d971      	bls.n	8061098 <__udivmoddi4+0x2a4>
 8060fb4:	3802      	subs	r0, #2
 8060fb6:	4439      	add	r1, r7
 8060fb8:	1acb      	subs	r3, r1, r3
 8060fba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8060fbe:	e778      	b.n	8060eb2 <__udivmoddi4+0xbe>
 8060fc0:	f1c6 0c20 	rsb	ip, r6, #32
 8060fc4:	fa03 f406 	lsl.w	r4, r3, r6
 8060fc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8060fcc:	431c      	orrs	r4, r3
 8060fce:	fa20 f70c 	lsr.w	r7, r0, ip
 8060fd2:	fa01 f306 	lsl.w	r3, r1, r6
 8060fd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8060fda:	fa21 f10c 	lsr.w	r1, r1, ip
 8060fde:	431f      	orrs	r7, r3
 8060fe0:	0c3b      	lsrs	r3, r7, #16
 8060fe2:	fbb1 f9fe 	udiv	r9, r1, lr
 8060fe6:	fa1f f884 	uxth.w	r8, r4
 8060fea:	fb0e 1119 	mls	r1, lr, r9, r1
 8060fee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8060ff2:	fb09 fa08 	mul.w	sl, r9, r8
 8060ff6:	458a      	cmp	sl, r1
 8060ff8:	fa02 f206 	lsl.w	r2, r2, r6
 8060ffc:	fa00 f306 	lsl.w	r3, r0, r6
 8061000:	d908      	bls.n	8061014 <__udivmoddi4+0x220>
 8061002:	1861      	adds	r1, r4, r1
 8061004:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8061008:	d248      	bcs.n	806109c <__udivmoddi4+0x2a8>
 806100a:	458a      	cmp	sl, r1
 806100c:	d946      	bls.n	806109c <__udivmoddi4+0x2a8>
 806100e:	f1a9 0902 	sub.w	r9, r9, #2
 8061012:	4421      	add	r1, r4
 8061014:	eba1 010a 	sub.w	r1, r1, sl
 8061018:	b2bf      	uxth	r7, r7
 806101a:	fbb1 f0fe 	udiv	r0, r1, lr
 806101e:	fb0e 1110 	mls	r1, lr, r0, r1
 8061022:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8061026:	fb00 f808 	mul.w	r8, r0, r8
 806102a:	45b8      	cmp	r8, r7
 806102c:	d907      	bls.n	806103e <__udivmoddi4+0x24a>
 806102e:	19e7      	adds	r7, r4, r7
 8061030:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8061034:	d22e      	bcs.n	8061094 <__udivmoddi4+0x2a0>
 8061036:	45b8      	cmp	r8, r7
 8061038:	d92c      	bls.n	8061094 <__udivmoddi4+0x2a0>
 806103a:	3802      	subs	r0, #2
 806103c:	4427      	add	r7, r4
 806103e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8061042:	eba7 0708 	sub.w	r7, r7, r8
 8061046:	fba0 8902 	umull	r8, r9, r0, r2
 806104a:	454f      	cmp	r7, r9
 806104c:	46c6      	mov	lr, r8
 806104e:	4649      	mov	r1, r9
 8061050:	d31a      	bcc.n	8061088 <__udivmoddi4+0x294>
 8061052:	d017      	beq.n	8061084 <__udivmoddi4+0x290>
 8061054:	b15d      	cbz	r5, 806106e <__udivmoddi4+0x27a>
 8061056:	ebb3 020e 	subs.w	r2, r3, lr
 806105a:	eb67 0701 	sbc.w	r7, r7, r1
 806105e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8061062:	40f2      	lsrs	r2, r6
 8061064:	ea4c 0202 	orr.w	r2, ip, r2
 8061068:	40f7      	lsrs	r7, r6
 806106a:	e9c5 2700 	strd	r2, r7, [r5]
 806106e:	2600      	movs	r6, #0
 8061070:	4631      	mov	r1, r6
 8061072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8061076:	462e      	mov	r6, r5
 8061078:	4628      	mov	r0, r5
 806107a:	e70b      	b.n	8060e94 <__udivmoddi4+0xa0>
 806107c:	4606      	mov	r6, r0
 806107e:	e6e9      	b.n	8060e54 <__udivmoddi4+0x60>
 8061080:	4618      	mov	r0, r3
 8061082:	e6fd      	b.n	8060e80 <__udivmoddi4+0x8c>
 8061084:	4543      	cmp	r3, r8
 8061086:	d2e5      	bcs.n	8061054 <__udivmoddi4+0x260>
 8061088:	ebb8 0e02 	subs.w	lr, r8, r2
 806108c:	eb69 0104 	sbc.w	r1, r9, r4
 8061090:	3801      	subs	r0, #1
 8061092:	e7df      	b.n	8061054 <__udivmoddi4+0x260>
 8061094:	4608      	mov	r0, r1
 8061096:	e7d2      	b.n	806103e <__udivmoddi4+0x24a>
 8061098:	4660      	mov	r0, ip
 806109a:	e78d      	b.n	8060fb8 <__udivmoddi4+0x1c4>
 806109c:	4681      	mov	r9, r0
 806109e:	e7b9      	b.n	8061014 <__udivmoddi4+0x220>
 80610a0:	4666      	mov	r6, ip
 80610a2:	e775      	b.n	8060f90 <__udivmoddi4+0x19c>
 80610a4:	4630      	mov	r0, r6
 80610a6:	e74a      	b.n	8060f3e <__udivmoddi4+0x14a>
 80610a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80610ac:	4439      	add	r1, r7
 80610ae:	e713      	b.n	8060ed8 <__udivmoddi4+0xe4>
 80610b0:	3802      	subs	r0, #2
 80610b2:	443c      	add	r4, r7
 80610b4:	e724      	b.n	8060f00 <__udivmoddi4+0x10c>
 80610b6:	bf00      	nop

080610b8 <__aeabi_idiv0>:
 80610b8:	4770      	bx	lr
 80610ba:	bf00      	nop

080610bc <GPS_read>:

uint8_t rx_data = 0;
uint8_t rx_buffer[GPSBUFSIZE];
uint8_t rx_index = 0;

int GPS_read() {
 80610bc:	b580      	push	{r7, lr}
 80610be:	b082      	sub	sp, #8
 80610c0:	af00      	add	r7, sp, #0
	int statusCode = 0;
 80610c2:	2300      	movs	r3, #0
 80610c4:	607b      	str	r3, [r7, #4]

	while (HAL_UART_Receive(GPS_USART, &rx_data, 1, HAL_MAX_DELAY) &&
 80610c6:	e00a      	b.n	80610de <GPS_read+0x22>
			rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
		rx_buffer[rx_index++] = rx_data;
 80610c8:	4b19      	ldr	r3, [pc, #100]	; (8061130 <GPS_read+0x74>)
 80610ca:	781b      	ldrb	r3, [r3, #0]
 80610cc:	1c5a      	adds	r2, r3, #1
 80610ce:	b2d1      	uxtb	r1, r2
 80610d0:	4a17      	ldr	r2, [pc, #92]	; (8061130 <GPS_read+0x74>)
 80610d2:	7011      	strb	r1, [r2, #0]
 80610d4:	461a      	mov	r2, r3
 80610d6:	4b17      	ldr	r3, [pc, #92]	; (8061134 <GPS_read+0x78>)
 80610d8:	7819      	ldrb	r1, [r3, #0]
 80610da:	4b17      	ldr	r3, [pc, #92]	; (8061138 <GPS_read+0x7c>)
 80610dc:	5499      	strb	r1, [r3, r2]
	while (HAL_UART_Receive(GPS_USART, &rx_data, 1, HAL_MAX_DELAY) &&
 80610de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80610e2:	2201      	movs	r2, #1
 80610e4:	4913      	ldr	r1, [pc, #76]	; (8061134 <GPS_read+0x78>)
 80610e6:	4815      	ldr	r0, [pc, #84]	; (806113c <GPS_read+0x80>)
 80610e8:	f008 fcc6 	bl	8069a78 <HAL_UART_Receive>
 80610ec:	4603      	mov	r3, r0
 80610ee:	2b00      	cmp	r3, #0
 80610f0:	d008      	beq.n	8061104 <GPS_read+0x48>
			rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80610f2:	4b10      	ldr	r3, [pc, #64]	; (8061134 <GPS_read+0x78>)
 80610f4:	781b      	ldrb	r3, [r3, #0]
	while (HAL_UART_Receive(GPS_USART, &rx_data, 1, HAL_MAX_DELAY) &&
 80610f6:	2b0a      	cmp	r3, #10
 80610f8:	d004      	beq.n	8061104 <GPS_read+0x48>
			rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80610fa:	4b0d      	ldr	r3, [pc, #52]	; (8061130 <GPS_read+0x74>)
 80610fc:	781b      	ldrb	r3, [r3, #0]
 80610fe:	b25b      	sxtb	r3, r3
 8061100:	2b00      	cmp	r3, #0
 8061102:	dae1      	bge.n	80610c8 <GPS_read+0xc>
	}

	if (!GPS_validate((char*) rx_buffer)) {
 8061104:	480c      	ldr	r0, [pc, #48]	; (8061138 <GPS_read+0x7c>)
 8061106:	f000 f81b 	bl	8061140 <GPS_validate>
 806110a:	4603      	mov	r3, r0
 806110c:	2b00      	cmp	r3, #0
 806110e:	d101      	bne.n	8061114 <GPS_read+0x58>
		statusCode = 1;
 8061110:	2301      	movs	r3, #1
 8061112:	607b      	str	r3, [r7, #4]
	}

	rx_index = 0;
 8061114:	4b06      	ldr	r3, [pc, #24]	; (8061130 <GPS_read+0x74>)
 8061116:	2200      	movs	r2, #0
 8061118:	701a      	strb	r2, [r3, #0]
	memset(rx_buffer, 0, sizeof(rx_buffer));
 806111a:	2280      	movs	r2, #128	; 0x80
 806111c:	2100      	movs	r1, #0
 806111e:	4806      	ldr	r0, [pc, #24]	; (8061138 <GPS_read+0x7c>)
 8061120:	f011 fb15 	bl	807274e <memset>

	return statusCode;
 8061124:	687b      	ldr	r3, [r7, #4]
}
 8061126:	4618      	mov	r0, r3
 8061128:	3708      	adds	r7, #8
 806112a:	46bd      	mov	sp, r7
 806112c:	bd80      	pop	{r7, pc}
 806112e:	bf00      	nop
 8061130:	20000219 	.word	0x20000219
 8061134:	20000218 	.word	0x20000218
 8061138:	20004e94 	.word	0x20004e94
 806113c:	200057e4 	.word	0x200057e4

08061140 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8061140:	b580      	push	{r7, lr}
 8061142:	b086      	sub	sp, #24
 8061144:	af00      	add	r7, sp, #0
 8061146:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8061148:	2300      	movs	r3, #0
 806114a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 806114c:	2300      	movs	r3, #0
 806114e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8061150:	697b      	ldr	r3, [r7, #20]
 8061152:	687a      	ldr	r2, [r7, #4]
 8061154:	4413      	add	r3, r2
 8061156:	781b      	ldrb	r3, [r3, #0]
 8061158:	2b24      	cmp	r3, #36	; 0x24
 806115a:	d103      	bne.n	8061164 <GPS_validate+0x24>
        i++;
 806115c:	697b      	ldr	r3, [r7, #20]
 806115e:	3301      	adds	r3, #1
 8061160:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8061162:	e00c      	b.n	806117e <GPS_validate+0x3e>
        return 0;
 8061164:	2300      	movs	r3, #0
 8061166:	e047      	b.n	80611f8 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8061168:	697b      	ldr	r3, [r7, #20]
 806116a:	687a      	ldr	r2, [r7, #4]
 806116c:	4413      	add	r3, r2
 806116e:	781b      	ldrb	r3, [r3, #0]
 8061170:	461a      	mov	r2, r3
 8061172:	693b      	ldr	r3, [r7, #16]
 8061174:	4053      	eors	r3, r2
 8061176:	613b      	str	r3, [r7, #16]
        i++;
 8061178:	697b      	ldr	r3, [r7, #20]
 806117a:	3301      	adds	r3, #1
 806117c:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 806117e:	697b      	ldr	r3, [r7, #20]
 8061180:	687a      	ldr	r2, [r7, #4]
 8061182:	4413      	add	r3, r2
 8061184:	781b      	ldrb	r3, [r3, #0]
 8061186:	2b00      	cmp	r3, #0
 8061188:	d008      	beq.n	806119c <GPS_validate+0x5c>
 806118a:	697b      	ldr	r3, [r7, #20]
 806118c:	687a      	ldr	r2, [r7, #4]
 806118e:	4413      	add	r3, r2
 8061190:	781b      	ldrb	r3, [r3, #0]
 8061192:	2b2a      	cmp	r3, #42	; 0x2a
 8061194:	d002      	beq.n	806119c <GPS_validate+0x5c>
 8061196:	697b      	ldr	r3, [r7, #20]
 8061198:	2b4a      	cmp	r3, #74	; 0x4a
 806119a:	dde5      	ble.n	8061168 <GPS_validate+0x28>
    }

    if(i >= 75){
 806119c:	697b      	ldr	r3, [r7, #20]
 806119e:	2b4a      	cmp	r3, #74	; 0x4a
 80611a0:	dd01      	ble.n	80611a6 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80611a2:	2300      	movs	r3, #0
 80611a4:	e028      	b.n	80611f8 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80611a6:	697b      	ldr	r3, [r7, #20]
 80611a8:	687a      	ldr	r2, [r7, #4]
 80611aa:	4413      	add	r3, r2
 80611ac:	781b      	ldrb	r3, [r3, #0]
 80611ae:	2b2a      	cmp	r3, #42	; 0x2a
 80611b0:	d119      	bne.n	80611e6 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80611b2:	697b      	ldr	r3, [r7, #20]
 80611b4:	3301      	adds	r3, #1
 80611b6:	687a      	ldr	r2, [r7, #4]
 80611b8:	4413      	add	r3, r2
 80611ba:	781b      	ldrb	r3, [r3, #0]
 80611bc:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80611be:	697b      	ldr	r3, [r7, #20]
 80611c0:	3302      	adds	r3, #2
 80611c2:	687a      	ldr	r2, [r7, #4]
 80611c4:	4413      	add	r3, r2
 80611c6:	781b      	ldrb	r3, [r3, #0]
 80611c8:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80611ca:	2300      	movs	r3, #0
 80611cc:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80611ce:	f107 0308 	add.w	r3, r7, #8
 80611d2:	693a      	ldr	r2, [r7, #16]
 80611d4:	490a      	ldr	r1, [pc, #40]	; (8061200 <GPS_validate+0xc0>)
 80611d6:	4618      	mov	r0, r3
 80611d8:	f012 fa16 	bl	8073608 <siprintf>
    return((checkcalcstr[0] == check[0])
 80611dc:	7a3a      	ldrb	r2, [r7, #8]
 80611de:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80611e0:	429a      	cmp	r2, r3
 80611e2:	d108      	bne.n	80611f6 <GPS_validate+0xb6>
 80611e4:	e001      	b.n	80611ea <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80611e6:	2300      	movs	r3, #0
 80611e8:	e006      	b.n	80611f8 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80611ea:	7a7a      	ldrb	r2, [r7, #9]
 80611ec:	7b7b      	ldrb	r3, [r7, #13]
 80611ee:	429a      	cmp	r2, r3
 80611f0:	d101      	bne.n	80611f6 <GPS_validate+0xb6>
 80611f2:	2301      	movs	r3, #1
 80611f4:	e000      	b.n	80611f8 <GPS_validate+0xb8>
 80611f6:	2300      	movs	r3, #0
}
 80611f8:	4618      	mov	r0, r3
 80611fa:	3718      	adds	r7, #24
 80611fc:	46bd      	mov	sp, r7
 80611fe:	bd80      	pop	{r7, pc}
 8061200:	08076e88 	.word	0x08076e88

08061204 <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8061204:	b480      	push	{r7}
 8061206:	b087      	sub	sp, #28
 8061208:	af00      	add	r7, sp, #0
 806120a:	ed87 0a01 	vstr	s0, [r7, #4]
 806120e:	4603      	mov	r3, r0
 8061210:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8061212:	ed97 7a01 	vldr	s14, [r7, #4]
 8061216:	eddf 6a20 	vldr	s13, [pc, #128]	; 8061298 <GPS_nmea_to_dec+0x94>
 806121a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 806121e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8061222:	ee17 3a90 	vmov	r3, s15
 8061226:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8061228:	693b      	ldr	r3, [r7, #16]
 806122a:	2264      	movs	r2, #100	; 0x64
 806122c:	fb02 f303 	mul.w	r3, r2, r3
 8061230:	ee07 3a90 	vmov	s15, r3
 8061234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8061238:	ed97 7a01 	vldr	s14, [r7, #4]
 806123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8061240:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8061244:	ed97 7a03 	vldr	s14, [r7, #12]
 8061248:	eddf 6a14 	vldr	s13, [pc, #80]	; 806129c <GPS_nmea_to_dec+0x98>
 806124c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061250:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8061254:	693b      	ldr	r3, [r7, #16]
 8061256:	ee07 3a90 	vmov	s15, r3
 806125a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 806125e:	ed97 7a02 	vldr	s14, [r7, #8]
 8061262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8061266:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 806126a:	78fb      	ldrb	r3, [r7, #3]
 806126c:	2b53      	cmp	r3, #83	; 0x53
 806126e:	d002      	beq.n	8061276 <GPS_nmea_to_dec+0x72>
 8061270:	78fb      	ldrb	r3, [r7, #3]
 8061272:	2b57      	cmp	r3, #87	; 0x57
 8061274:	d105      	bne.n	8061282 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8061276:	edd7 7a05 	vldr	s15, [r7, #20]
 806127a:	eef1 7a67 	vneg.f32	s15, s15
 806127e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8061282:	697b      	ldr	r3, [r7, #20]
 8061284:	ee07 3a90 	vmov	s15, r3
}
 8061288:	eeb0 0a67 	vmov.f32	s0, s15
 806128c:	371c      	adds	r7, #28
 806128e:	46bd      	mov	sp, r7
 8061290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061294:	4770      	bx	lr
 8061296:	bf00      	nop
 8061298:	42c80000 	.word	0x42c80000
 806129c:	42700000 	.word	0x42700000

080612a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80612a0:	b580      	push	{r7, lr}
 80612a2:	b084      	sub	sp, #16
 80612a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80612a6:	463b      	mov	r3, r7
 80612a8:	2200      	movs	r2, #0
 80612aa:	601a      	str	r2, [r3, #0]
 80612ac:	605a      	str	r2, [r3, #4]
 80612ae:	609a      	str	r2, [r3, #8]
 80612b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80612b2:	4b21      	ldr	r3, [pc, #132]	; (8061338 <MX_ADC1_Init+0x98>)
 80612b4:	4a21      	ldr	r2, [pc, #132]	; (806133c <MX_ADC1_Init+0x9c>)
 80612b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80612b8:	4b1f      	ldr	r3, [pc, #124]	; (8061338 <MX_ADC1_Init+0x98>)
 80612ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80612be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80612c0:	4b1d      	ldr	r3, [pc, #116]	; (8061338 <MX_ADC1_Init+0x98>)
 80612c2:	2200      	movs	r2, #0
 80612c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80612c6:	4b1c      	ldr	r3, [pc, #112]	; (8061338 <MX_ADC1_Init+0x98>)
 80612c8:	2200      	movs	r2, #0
 80612ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80612cc:	4b1a      	ldr	r3, [pc, #104]	; (8061338 <MX_ADC1_Init+0x98>)
 80612ce:	2200      	movs	r2, #0
 80612d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80612d2:	4b19      	ldr	r3, [pc, #100]	; (8061338 <MX_ADC1_Init+0x98>)
 80612d4:	2200      	movs	r2, #0
 80612d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80612da:	4b17      	ldr	r3, [pc, #92]	; (8061338 <MX_ADC1_Init+0x98>)
 80612dc:	2200      	movs	r2, #0
 80612de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80612e0:	4b15      	ldr	r3, [pc, #84]	; (8061338 <MX_ADC1_Init+0x98>)
 80612e2:	4a17      	ldr	r2, [pc, #92]	; (8061340 <MX_ADC1_Init+0xa0>)
 80612e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80612e6:	4b14      	ldr	r3, [pc, #80]	; (8061338 <MX_ADC1_Init+0x98>)
 80612e8:	2200      	movs	r2, #0
 80612ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80612ec:	4b12      	ldr	r3, [pc, #72]	; (8061338 <MX_ADC1_Init+0x98>)
 80612ee:	2201      	movs	r2, #1
 80612f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80612f2:	4b11      	ldr	r3, [pc, #68]	; (8061338 <MX_ADC1_Init+0x98>)
 80612f4:	2200      	movs	r2, #0
 80612f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80612fa:	4b0f      	ldr	r3, [pc, #60]	; (8061338 <MX_ADC1_Init+0x98>)
 80612fc:	2201      	movs	r2, #1
 80612fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8061300:	480d      	ldr	r0, [pc, #52]	; (8061338 <MX_ADC1_Init+0x98>)
 8061302:	f002 fbe7 	bl	8063ad4 <HAL_ADC_Init>
 8061306:	4603      	mov	r3, r0
 8061308:	2b00      	cmp	r3, #0
 806130a:	d001      	beq.n	8061310 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 806130c:	f001 fee2 	bl	80630d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8061310:	2301      	movs	r3, #1
 8061312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8061314:	2301      	movs	r3, #1
 8061316:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8061318:	2300      	movs	r3, #0
 806131a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 806131c:	463b      	mov	r3, r7
 806131e:	4619      	mov	r1, r3
 8061320:	4805      	ldr	r0, [pc, #20]	; (8061338 <MX_ADC1_Init+0x98>)
 8061322:	f002 ffe5 	bl	80642f0 <HAL_ADC_ConfigChannel>
 8061326:	4603      	mov	r3, r0
 8061328:	2b00      	cmp	r3, #0
 806132a:	d001      	beq.n	8061330 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 806132c:	f001 fed2 	bl	80630d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8061330:	bf00      	nop
 8061332:	3710      	adds	r7, #16
 8061334:	46bd      	mov	sp, r7
 8061336:	bd80      	pop	{r7, pc}
 8061338:	20004f48 	.word	0x20004f48
 806133c:	40012000 	.word	0x40012000
 8061340:	0f000001 	.word	0x0f000001

08061344 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8061344:	b580      	push	{r7, lr}
 8061346:	b08a      	sub	sp, #40	; 0x28
 8061348:	af00      	add	r7, sp, #0
 806134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 806134c:	f107 0314 	add.w	r3, r7, #20
 8061350:	2200      	movs	r2, #0
 8061352:	601a      	str	r2, [r3, #0]
 8061354:	605a      	str	r2, [r3, #4]
 8061356:	609a      	str	r2, [r3, #8]
 8061358:	60da      	str	r2, [r3, #12]
 806135a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 806135c:	687b      	ldr	r3, [r7, #4]
 806135e:	681b      	ldr	r3, [r3, #0]
 8061360:	4a32      	ldr	r2, [pc, #200]	; (806142c <HAL_ADC_MspInit+0xe8>)
 8061362:	4293      	cmp	r3, r2
 8061364:	d15e      	bne.n	8061424 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8061366:	2300      	movs	r3, #0
 8061368:	613b      	str	r3, [r7, #16]
 806136a:	4b31      	ldr	r3, [pc, #196]	; (8061430 <HAL_ADC_MspInit+0xec>)
 806136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806136e:	4a30      	ldr	r2, [pc, #192]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8061374:	6453      	str	r3, [r2, #68]	; 0x44
 8061376:	4b2e      	ldr	r3, [pc, #184]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806137a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806137e:	613b      	str	r3, [r7, #16]
 8061380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8061382:	2300      	movs	r3, #0
 8061384:	60fb      	str	r3, [r7, #12]
 8061386:	4b2a      	ldr	r3, [pc, #168]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806138a:	4a29      	ldr	r2, [pc, #164]	; (8061430 <HAL_ADC_MspInit+0xec>)
 806138c:	f043 0301 	orr.w	r3, r3, #1
 8061390:	6313      	str	r3, [r2, #48]	; 0x30
 8061392:	4b27      	ldr	r3, [pc, #156]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061396:	f003 0301 	and.w	r3, r3, #1
 806139a:	60fb      	str	r3, [r7, #12]
 806139c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 806139e:	2302      	movs	r3, #2
 80613a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80613a2:	2303      	movs	r3, #3
 80613a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80613a6:	2300      	movs	r3, #0
 80613a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80613aa:	f107 0314 	add.w	r3, r7, #20
 80613ae:	4619      	mov	r1, r3
 80613b0:	4820      	ldr	r0, [pc, #128]	; (8061434 <HAL_ADC_MspInit+0xf0>)
 80613b2:	f004 f953 	bl	806565c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80613b6:	4b20      	ldr	r3, [pc, #128]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613b8:	4a20      	ldr	r2, [pc, #128]	; (806143c <HAL_ADC_MspInit+0xf8>)
 80613ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80613bc:	4b1e      	ldr	r3, [pc, #120]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613be:	2200      	movs	r2, #0
 80613c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80613c2:	4b1d      	ldr	r3, [pc, #116]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613c4:	2200      	movs	r2, #0
 80613c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80613c8:	4b1b      	ldr	r3, [pc, #108]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613ca:	2200      	movs	r2, #0
 80613cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80613ce:	4b1a      	ldr	r3, [pc, #104]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80613d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80613d6:	4b18      	ldr	r3, [pc, #96]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80613dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80613de:	4b16      	ldr	r3, [pc, #88]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80613e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80613e6:	4b14      	ldr	r3, [pc, #80]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613e8:	2200      	movs	r2, #0
 80613ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80613ec:	4b12      	ldr	r3, [pc, #72]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613ee:	2200      	movs	r2, #0
 80613f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80613f2:	4b11      	ldr	r3, [pc, #68]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613f4:	2200      	movs	r2, #0
 80613f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80613f8:	480f      	ldr	r0, [pc, #60]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613fa:	f003 fbb1 	bl	8064b60 <HAL_DMA_Init>
 80613fe:	4603      	mov	r3, r0
 8061400:	2b00      	cmp	r3, #0
 8061402:	d001      	beq.n	8061408 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8061404:	f001 fe66 	bl	80630d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8061408:	687b      	ldr	r3, [r7, #4]
 806140a:	4a0b      	ldr	r2, [pc, #44]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 806140c:	639a      	str	r2, [r3, #56]	; 0x38
 806140e:	4a0a      	ldr	r2, [pc, #40]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 8061410:	687b      	ldr	r3, [r7, #4]
 8061412:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8061414:	2200      	movs	r2, #0
 8061416:	2105      	movs	r1, #5
 8061418:	2012      	movs	r0, #18
 806141a:	f003 fb59 	bl	8064ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 806141e:	2012      	movs	r0, #18
 8061420:	f003 fb82 	bl	8064b28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8061424:	bf00      	nop
 8061426:	3728      	adds	r7, #40	; 0x28
 8061428:	46bd      	mov	sp, r7
 806142a:	bd80      	pop	{r7, pc}
 806142c:	40012000 	.word	0x40012000
 8061430:	40023800 	.word	0x40023800
 8061434:	40020000 	.word	0x40020000
 8061438:	20004f90 	.word	0x20004f90
 806143c:	40026410 	.word	0x40026410

08061440 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8061440:	b480      	push	{r7}
 8061442:	b083      	sub	sp, #12
 8061444:	af00      	add	r7, sp, #0
 8061446:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8061448:	687b      	ldr	r3, [r7, #4]
 806144a:	2203      	movs	r2, #3
 806144c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 806144e:	687b      	ldr	r3, [r7, #4]
 8061450:	2200      	movs	r2, #0
 8061452:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8061454:	687b      	ldr	r3, [r7, #4]
 8061456:	2203      	movs	r2, #3
 8061458:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 806145a:	687b      	ldr	r3, [r7, #4]
 806145c:	2203      	movs	r2, #3
 806145e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8061460:	687b      	ldr	r3, [r7, #4]
 8061462:	2203      	movs	r2, #3
 8061464:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8061466:	687b      	ldr	r3, [r7, #4]
 8061468:	2203      	movs	r2, #3
 806146a:	715a      	strb	r2, [r3, #5]
}
 806146c:	bf00      	nop
 806146e:	370c      	adds	r7, #12
 8061470:	46bd      	mov	sp, r7
 8061472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061476:	4770      	bx	lr

08061478 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8061478:	b580      	push	{r7, lr}
 806147a:	b08a      	sub	sp, #40	; 0x28
 806147c:	af04      	add	r7, sp, #16
 806147e:	60f8      	str	r0, [r7, #12]
 8061480:	460b      	mov	r3, r1
 8061482:	607a      	str	r2, [r7, #4]
 8061484:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8061486:	68fb      	ldr	r3, [r7, #12]
 8061488:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 806148a:	005b      	lsls	r3, r3, #1
 806148c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 806148e:	68fb      	ldr	r3, [r7, #12]
 8061490:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8061492:	7afb      	ldrb	r3, [r7, #11]
 8061494:	b29a      	uxth	r2, r3
 8061496:	8af9      	ldrh	r1, [r7, #22]
 8061498:	f241 3388 	movw	r3, #5000	; 0x1388
 806149c:	9302      	str	r3, [sp, #8]
 806149e:	2302      	movs	r3, #2
 80614a0:	9301      	str	r3, [sp, #4]
 80614a2:	f107 0314 	add.w	r3, r7, #20
 80614a6:	9300      	str	r3, [sp, #0]
 80614a8:	2301      	movs	r3, #1
 80614aa:	f005 f99b 	bl	80667e4 <HAL_I2C_Mem_Read>
 80614ae:	4603      	mov	r3, r0
 80614b0:	2b00      	cmp	r3, #0
 80614b2:	d10b      	bne.n	80614cc <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80614b4:	7d7b      	ldrb	r3, [r7, #21]
 80614b6:	021b      	lsls	r3, r3, #8
 80614b8:	b21a      	sxth	r2, r3
 80614ba:	7d3b      	ldrb	r3, [r7, #20]
 80614bc:	b21b      	sxth	r3, r3
 80614be:	4313      	orrs	r3, r2
 80614c0:	b21b      	sxth	r3, r3
 80614c2:	b29a      	uxth	r2, r3
 80614c4:	687b      	ldr	r3, [r7, #4]
 80614c6:	801a      	strh	r2, [r3, #0]
		return true;
 80614c8:	2301      	movs	r3, #1
 80614ca:	e000      	b.n	80614ce <read_register16+0x56>
	} else
		return false;
 80614cc:	2300      	movs	r3, #0

}
 80614ce:	4618      	mov	r0, r3
 80614d0:	3718      	adds	r7, #24
 80614d2:	46bd      	mov	sp, r7
 80614d4:	bd80      	pop	{r7, pc}

080614d6 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80614d6:	b590      	push	{r4, r7, lr}
 80614d8:	b08b      	sub	sp, #44	; 0x2c
 80614da:	af04      	add	r7, sp, #16
 80614dc:	60f8      	str	r0, [r7, #12]
 80614de:	607a      	str	r2, [r7, #4]
 80614e0:	461a      	mov	r2, r3
 80614e2:	460b      	mov	r3, r1
 80614e4:	72fb      	strb	r3, [r7, #11]
 80614e6:	4613      	mov	r3, r2
 80614e8:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80614ea:	68fb      	ldr	r3, [r7, #12]
 80614ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80614ee:	005b      	lsls	r3, r3, #1
 80614f0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80614f2:	68fb      	ldr	r3, [r7, #12]
 80614f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80614f6:	7afb      	ldrb	r3, [r7, #11]
 80614f8:	b29a      	uxth	r2, r3
 80614fa:	7abb      	ldrb	r3, [r7, #10]
 80614fc:	b29b      	uxth	r3, r3
 80614fe:	8af9      	ldrh	r1, [r7, #22]
 8061500:	f241 3488 	movw	r4, #5000	; 0x1388
 8061504:	9402      	str	r4, [sp, #8]
 8061506:	9301      	str	r3, [sp, #4]
 8061508:	687b      	ldr	r3, [r7, #4]
 806150a:	9300      	str	r3, [sp, #0]
 806150c:	2301      	movs	r3, #1
 806150e:	f005 f969 	bl	80667e4 <HAL_I2C_Mem_Read>
 8061512:	4603      	mov	r3, r0
 8061514:	2b00      	cmp	r3, #0
 8061516:	d101      	bne.n	806151c <read_data+0x46>
		return 0;
 8061518:	2300      	movs	r3, #0
 806151a:	e000      	b.n	806151e <read_data+0x48>
	else
		return 1;
 806151c:	2301      	movs	r3, #1

}
 806151e:	4618      	mov	r0, r3
 8061520:	371c      	adds	r7, #28
 8061522:	46bd      	mov	sp, r7
 8061524:	bd90      	pop	{r4, r7, pc}

08061526 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8061526:	b580      	push	{r7, lr}
 8061528:	b082      	sub	sp, #8
 806152a:	af00      	add	r7, sp, #0
 806152c:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 806152e:	687b      	ldr	r3, [r7, #4]
 8061530:	461a      	mov	r2, r3
 8061532:	2188      	movs	r1, #136	; 0x88
 8061534:	6878      	ldr	r0, [r7, #4]
 8061536:	f7ff ff9f 	bl	8061478 <read_register16>
 806153a:	4603      	mov	r3, r0
 806153c:	2b00      	cmp	r3, #0
 806153e:	d06f      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8061540:	687b      	ldr	r3, [r7, #4]
 8061542:	3302      	adds	r3, #2
 8061544:	461a      	mov	r2, r3
 8061546:	218a      	movs	r1, #138	; 0x8a
 8061548:	6878      	ldr	r0, [r7, #4]
 806154a:	f7ff ff95 	bl	8061478 <read_register16>
 806154e:	4603      	mov	r3, r0
 8061550:	2b00      	cmp	r3, #0
 8061552:	d065      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8061554:	687b      	ldr	r3, [r7, #4]
 8061556:	3304      	adds	r3, #4
 8061558:	461a      	mov	r2, r3
 806155a:	218c      	movs	r1, #140	; 0x8c
 806155c:	6878      	ldr	r0, [r7, #4]
 806155e:	f7ff ff8b 	bl	8061478 <read_register16>
 8061562:	4603      	mov	r3, r0
 8061564:	2b00      	cmp	r3, #0
 8061566:	d05b      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8061568:	687b      	ldr	r3, [r7, #4]
 806156a:	3306      	adds	r3, #6
 806156c:	461a      	mov	r2, r3
 806156e:	218e      	movs	r1, #142	; 0x8e
 8061570:	6878      	ldr	r0, [r7, #4]
 8061572:	f7ff ff81 	bl	8061478 <read_register16>
 8061576:	4603      	mov	r3, r0
 8061578:	2b00      	cmp	r3, #0
 806157a:	d051      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 806157c:	687b      	ldr	r3, [r7, #4]
 806157e:	3308      	adds	r3, #8
 8061580:	461a      	mov	r2, r3
 8061582:	2190      	movs	r1, #144	; 0x90
 8061584:	6878      	ldr	r0, [r7, #4]
 8061586:	f7ff ff77 	bl	8061478 <read_register16>
 806158a:	4603      	mov	r3, r0
 806158c:	2b00      	cmp	r3, #0
 806158e:	d047      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8061590:	687b      	ldr	r3, [r7, #4]
 8061592:	330a      	adds	r3, #10
 8061594:	461a      	mov	r2, r3
 8061596:	2192      	movs	r1, #146	; 0x92
 8061598:	6878      	ldr	r0, [r7, #4]
 806159a:	f7ff ff6d 	bl	8061478 <read_register16>
 806159e:	4603      	mov	r3, r0
 80615a0:	2b00      	cmp	r3, #0
 80615a2:	d03d      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80615a4:	687b      	ldr	r3, [r7, #4]
 80615a6:	330c      	adds	r3, #12
 80615a8:	461a      	mov	r2, r3
 80615aa:	2194      	movs	r1, #148	; 0x94
 80615ac:	6878      	ldr	r0, [r7, #4]
 80615ae:	f7ff ff63 	bl	8061478 <read_register16>
 80615b2:	4603      	mov	r3, r0
 80615b4:	2b00      	cmp	r3, #0
 80615b6:	d033      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80615b8:	687b      	ldr	r3, [r7, #4]
 80615ba:	330e      	adds	r3, #14
 80615bc:	461a      	mov	r2, r3
 80615be:	2196      	movs	r1, #150	; 0x96
 80615c0:	6878      	ldr	r0, [r7, #4]
 80615c2:	f7ff ff59 	bl	8061478 <read_register16>
 80615c6:	4603      	mov	r3, r0
 80615c8:	2b00      	cmp	r3, #0
 80615ca:	d029      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80615cc:	687b      	ldr	r3, [r7, #4]
 80615ce:	3310      	adds	r3, #16
 80615d0:	461a      	mov	r2, r3
 80615d2:	2198      	movs	r1, #152	; 0x98
 80615d4:	6878      	ldr	r0, [r7, #4]
 80615d6:	f7ff ff4f 	bl	8061478 <read_register16>
 80615da:	4603      	mov	r3, r0
 80615dc:	2b00      	cmp	r3, #0
 80615de:	d01f      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80615e0:	687b      	ldr	r3, [r7, #4]
 80615e2:	3312      	adds	r3, #18
 80615e4:	461a      	mov	r2, r3
 80615e6:	219a      	movs	r1, #154	; 0x9a
 80615e8:	6878      	ldr	r0, [r7, #4]
 80615ea:	f7ff ff45 	bl	8061478 <read_register16>
 80615ee:	4603      	mov	r3, r0
 80615f0:	2b00      	cmp	r3, #0
 80615f2:	d015      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80615f4:	687b      	ldr	r3, [r7, #4]
 80615f6:	3314      	adds	r3, #20
 80615f8:	461a      	mov	r2, r3
 80615fa:	219c      	movs	r1, #156	; 0x9c
 80615fc:	6878      	ldr	r0, [r7, #4]
 80615fe:	f7ff ff3b 	bl	8061478 <read_register16>
 8061602:	4603      	mov	r3, r0
 8061604:	2b00      	cmp	r3, #0
 8061606:	d00b      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8061608:	687b      	ldr	r3, [r7, #4]
 806160a:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 806160c:	461a      	mov	r2, r3
 806160e:	219e      	movs	r1, #158	; 0x9e
 8061610:	6878      	ldr	r0, [r7, #4]
 8061612:	f7ff ff31 	bl	8061478 <read_register16>
 8061616:	4603      	mov	r3, r0
 8061618:	2b00      	cmp	r3, #0
 806161a:	d001      	beq.n	8061620 <read_calibration_data+0xfa>

		return true;
 806161c:	2301      	movs	r3, #1
 806161e:	e000      	b.n	8061622 <read_calibration_data+0xfc>
	}

	return false;
 8061620:	2300      	movs	r3, #0
}
 8061622:	4618      	mov	r0, r3
 8061624:	3708      	adds	r7, #8
 8061626:	46bd      	mov	sp, r7
 8061628:	bd80      	pop	{r7, pc}

0806162a <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 806162a:	b580      	push	{r7, lr}
 806162c:	b084      	sub	sp, #16
 806162e:	af00      	add	r7, sp, #0
 8061630:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8061632:	687b      	ldr	r3, [r7, #4]
 8061634:	f103 0218 	add.w	r2, r3, #24
 8061638:	2301      	movs	r3, #1
 806163a:	21a1      	movs	r1, #161	; 0xa1
 806163c:	6878      	ldr	r0, [r7, #4]
 806163e:	f7ff ff4a 	bl	80614d6 <read_data>
 8061642:	4603      	mov	r3, r0
 8061644:	2b00      	cmp	r3, #0
 8061646:	d14b      	bne.n	80616e0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8061648:	687b      	ldr	r3, [r7, #4]
 806164a:	331a      	adds	r3, #26
 806164c:	461a      	mov	r2, r3
 806164e:	21e1      	movs	r1, #225	; 0xe1
 8061650:	6878      	ldr	r0, [r7, #4]
 8061652:	f7ff ff11 	bl	8061478 <read_register16>
 8061656:	4603      	mov	r3, r0
 8061658:	2b00      	cmp	r3, #0
 806165a:	d041      	beq.n	80616e0 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 806165c:	687b      	ldr	r3, [r7, #4]
 806165e:	f103 021c 	add.w	r2, r3, #28
 8061662:	2301      	movs	r3, #1
 8061664:	21e3      	movs	r1, #227	; 0xe3
 8061666:	6878      	ldr	r0, [r7, #4]
 8061668:	f7ff ff35 	bl	80614d6 <read_data>
 806166c:	4603      	mov	r3, r0
 806166e:	2b00      	cmp	r3, #0
 8061670:	d136      	bne.n	80616e0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8061672:	f107 030e 	add.w	r3, r7, #14
 8061676:	461a      	mov	r2, r3
 8061678:	21e4      	movs	r1, #228	; 0xe4
 806167a:	6878      	ldr	r0, [r7, #4]
 806167c:	f7ff fefc 	bl	8061478 <read_register16>
 8061680:	4603      	mov	r3, r0
 8061682:	2b00      	cmp	r3, #0
 8061684:	d02c      	beq.n	80616e0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8061686:	f107 030c 	add.w	r3, r7, #12
 806168a:	461a      	mov	r2, r3
 806168c:	21e5      	movs	r1, #229	; 0xe5
 806168e:	6878      	ldr	r0, [r7, #4]
 8061690:	f7ff fef2 	bl	8061478 <read_register16>
 8061694:	4603      	mov	r3, r0
 8061696:	2b00      	cmp	r3, #0
 8061698:	d022      	beq.n	80616e0 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 806169a:	687b      	ldr	r3, [r7, #4]
 806169c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80616a0:	2301      	movs	r3, #1
 80616a2:	21e7      	movs	r1, #231	; 0xe7
 80616a4:	6878      	ldr	r0, [r7, #4]
 80616a6:	f7ff ff16 	bl	80614d6 <read_data>
 80616aa:	4603      	mov	r3, r0
 80616ac:	2b00      	cmp	r3, #0
 80616ae:	d117      	bne.n	80616e0 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80616b0:	89fb      	ldrh	r3, [r7, #14]
 80616b2:	011b      	lsls	r3, r3, #4
 80616b4:	b21b      	sxth	r3, r3
 80616b6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80616ba:	b21a      	sxth	r2, r3
 80616bc:	89fb      	ldrh	r3, [r7, #14]
 80616be:	121b      	asrs	r3, r3, #8
 80616c0:	b21b      	sxth	r3, r3
 80616c2:	f003 030f 	and.w	r3, r3, #15
 80616c6:	b21b      	sxth	r3, r3
 80616c8:	4313      	orrs	r3, r2
 80616ca:	b21a      	sxth	r2, r3
 80616cc:	687b      	ldr	r3, [r7, #4]
 80616ce:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80616d0:	89bb      	ldrh	r3, [r7, #12]
 80616d2:	091b      	lsrs	r3, r3, #4
 80616d4:	b29b      	uxth	r3, r3
 80616d6:	b21a      	sxth	r2, r3
 80616d8:	687b      	ldr	r3, [r7, #4]
 80616da:	841a      	strh	r2, [r3, #32]

		return true;
 80616dc:	2301      	movs	r3, #1
 80616de:	e000      	b.n	80616e2 <read_hum_calibration_data+0xb8>
	}

	return false;
 80616e0:	2300      	movs	r3, #0
}
 80616e2:	4618      	mov	r0, r3
 80616e4:	3710      	adds	r7, #16
 80616e6:	46bd      	mov	sp, r7
 80616e8:	bd80      	pop	{r7, pc}

080616ea <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80616ea:	b580      	push	{r7, lr}
 80616ec:	b088      	sub	sp, #32
 80616ee:	af04      	add	r7, sp, #16
 80616f0:	6078      	str	r0, [r7, #4]
 80616f2:	460b      	mov	r3, r1
 80616f4:	70fb      	strb	r3, [r7, #3]
 80616f6:	4613      	mov	r3, r2
 80616f8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80616fa:	687b      	ldr	r3, [r7, #4]
 80616fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80616fe:	005b      	lsls	r3, r3, #1
 8061700:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8061702:	687b      	ldr	r3, [r7, #4]
 8061704:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8061706:	78fb      	ldrb	r3, [r7, #3]
 8061708:	b29a      	uxth	r2, r3
 806170a:	89f9      	ldrh	r1, [r7, #14]
 806170c:	f242 7310 	movw	r3, #10000	; 0x2710
 8061710:	9302      	str	r3, [sp, #8]
 8061712:	2301      	movs	r3, #1
 8061714:	9301      	str	r3, [sp, #4]
 8061716:	1cbb      	adds	r3, r7, #2
 8061718:	9300      	str	r3, [sp, #0]
 806171a:	2301      	movs	r3, #1
 806171c:	f004 ff5c 	bl	80665d8 <HAL_I2C_Mem_Write>
 8061720:	4603      	mov	r3, r0
 8061722:	2b00      	cmp	r3, #0
 8061724:	d101      	bne.n	806172a <write_register8+0x40>
		return false;
 8061726:	2300      	movs	r3, #0
 8061728:	e000      	b.n	806172c <write_register8+0x42>
	else
		return true;
 806172a:	2301      	movs	r3, #1
}
 806172c:	4618      	mov	r0, r3
 806172e:	3710      	adds	r7, #16
 8061730:	46bd      	mov	sp, r7
 8061732:	bd80      	pop	{r7, pc}

08061734 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8061734:	b580      	push	{r7, lr}
 8061736:	b084      	sub	sp, #16
 8061738:	af00      	add	r7, sp, #0
 806173a:	6078      	str	r0, [r7, #4]
 806173c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 806173e:	687b      	ldr	r3, [r7, #4]
 8061740:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8061742:	2b76      	cmp	r3, #118	; 0x76
 8061744:	d005      	beq.n	8061752 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8061746:	687b      	ldr	r3, [r7, #4]
 8061748:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 806174a:	2b77      	cmp	r3, #119	; 0x77
 806174c:	d001      	beq.n	8061752 <bmp280_init+0x1e>

		return false;
 806174e:	2300      	movs	r3, #0
 8061750:	e099      	b.n	8061886 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8061752:	687b      	ldr	r3, [r7, #4]
 8061754:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8061758:	2301      	movs	r3, #1
 806175a:	21d0      	movs	r1, #208	; 0xd0
 806175c:	6878      	ldr	r0, [r7, #4]
 806175e:	f7ff feba 	bl	80614d6 <read_data>
 8061762:	4603      	mov	r3, r0
 8061764:	2b00      	cmp	r3, #0
 8061766:	d001      	beq.n	806176c <bmp280_init+0x38>
		return false;
 8061768:	2300      	movs	r3, #0
 806176a:	e08c      	b.n	8061886 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 806176c:	687b      	ldr	r3, [r7, #4]
 806176e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8061772:	2b58      	cmp	r3, #88	; 0x58
 8061774:	d006      	beq.n	8061784 <bmp280_init+0x50>
 8061776:	687b      	ldr	r3, [r7, #4]
 8061778:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 806177c:	2b60      	cmp	r3, #96	; 0x60
 806177e:	d001      	beq.n	8061784 <bmp280_init+0x50>

		return false;
 8061780:	2300      	movs	r3, #0
 8061782:	e080      	b.n	8061886 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8061784:	22b6      	movs	r2, #182	; 0xb6
 8061786:	21e0      	movs	r1, #224	; 0xe0
 8061788:	6878      	ldr	r0, [r7, #4]
 806178a:	f7ff ffae 	bl	80616ea <write_register8>
 806178e:	4603      	mov	r3, r0
 8061790:	2b00      	cmp	r3, #0
 8061792:	d001      	beq.n	8061798 <bmp280_init+0x64>
		return false;
 8061794:	2300      	movs	r3, #0
 8061796:	e076      	b.n	8061886 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8061798:	f107 020c 	add.w	r2, r7, #12
 806179c:	2301      	movs	r3, #1
 806179e:	21f3      	movs	r1, #243	; 0xf3
 80617a0:	6878      	ldr	r0, [r7, #4]
 80617a2:	f7ff fe98 	bl	80614d6 <read_data>
 80617a6:	4603      	mov	r3, r0
 80617a8:	2b00      	cmp	r3, #0
 80617aa:	d1f5      	bne.n	8061798 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80617ac:	7b3b      	ldrb	r3, [r7, #12]
 80617ae:	f003 0301 	and.w	r3, r3, #1
 80617b2:	2b00      	cmp	r3, #0
 80617b4:	d1f0      	bne.n	8061798 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80617b6:	6878      	ldr	r0, [r7, #4]
 80617b8:	f7ff feb5 	bl	8061526 <read_calibration_data>
 80617bc:	4603      	mov	r3, r0
 80617be:	f083 0301 	eor.w	r3, r3, #1
 80617c2:	b2db      	uxtb	r3, r3
 80617c4:	2b00      	cmp	r3, #0
 80617c6:	d100      	bne.n	80617ca <bmp280_init+0x96>
 80617c8:	e001      	b.n	80617ce <bmp280_init+0x9a>
		return false;
 80617ca:	2300      	movs	r3, #0
 80617cc:	e05b      	b.n	8061886 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80617ce:	687b      	ldr	r3, [r7, #4]
 80617d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80617d4:	2b60      	cmp	r3, #96	; 0x60
 80617d6:	d10a      	bne.n	80617ee <bmp280_init+0xba>
 80617d8:	6878      	ldr	r0, [r7, #4]
 80617da:	f7ff ff26 	bl	806162a <read_hum_calibration_data>
 80617de:	4603      	mov	r3, r0
 80617e0:	f083 0301 	eor.w	r3, r3, #1
 80617e4:	b2db      	uxtb	r3, r3
 80617e6:	2b00      	cmp	r3, #0
 80617e8:	d001      	beq.n	80617ee <bmp280_init+0xba>
		return false;
 80617ea:	2300      	movs	r3, #0
 80617ec:	e04b      	b.n	8061886 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80617ee:	683b      	ldr	r3, [r7, #0]
 80617f0:	795b      	ldrb	r3, [r3, #5]
 80617f2:	015b      	lsls	r3, r3, #5
 80617f4:	b25a      	sxtb	r2, r3
 80617f6:	683b      	ldr	r3, [r7, #0]
 80617f8:	785b      	ldrb	r3, [r3, #1]
 80617fa:	009b      	lsls	r3, r3, #2
 80617fc:	b25b      	sxtb	r3, r3
 80617fe:	4313      	orrs	r3, r2
 8061800:	b25b      	sxtb	r3, r3
 8061802:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8061804:	7bfb      	ldrb	r3, [r7, #15]
 8061806:	461a      	mov	r2, r3
 8061808:	21f5      	movs	r1, #245	; 0xf5
 806180a:	6878      	ldr	r0, [r7, #4]
 806180c:	f7ff ff6d 	bl	80616ea <write_register8>
 8061810:	4603      	mov	r3, r0
 8061812:	2b00      	cmp	r3, #0
 8061814:	d001      	beq.n	806181a <bmp280_init+0xe6>
		return false;
 8061816:	2300      	movs	r3, #0
 8061818:	e035      	b.n	8061886 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 806181a:	683b      	ldr	r3, [r7, #0]
 806181c:	781b      	ldrb	r3, [r3, #0]
 806181e:	2b01      	cmp	r3, #1
 8061820:	d102      	bne.n	8061828 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8061822:	683b      	ldr	r3, [r7, #0]
 8061824:	2200      	movs	r2, #0
 8061826:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8061828:	683b      	ldr	r3, [r7, #0]
 806182a:	78db      	ldrb	r3, [r3, #3]
 806182c:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 806182e:	b25a      	sxtb	r2, r3
 8061830:	683b      	ldr	r3, [r7, #0]
 8061832:	789b      	ldrb	r3, [r3, #2]
 8061834:	009b      	lsls	r3, r3, #2
 8061836:	b25b      	sxtb	r3, r3
 8061838:	4313      	orrs	r3, r2
 806183a:	b25a      	sxtb	r2, r3
 806183c:	683b      	ldr	r3, [r7, #0]
 806183e:	781b      	ldrb	r3, [r3, #0]
 8061840:	b25b      	sxtb	r3, r3
 8061842:	4313      	orrs	r3, r2
 8061844:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8061846:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8061848:	687b      	ldr	r3, [r7, #4]
 806184a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 806184e:	2b60      	cmp	r3, #96	; 0x60
 8061850:	d10d      	bne.n	806186e <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8061852:	683b      	ldr	r3, [r7, #0]
 8061854:	791b      	ldrb	r3, [r3, #4]
 8061856:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8061858:	7b7b      	ldrb	r3, [r7, #13]
 806185a:	461a      	mov	r2, r3
 806185c:	21f2      	movs	r1, #242	; 0xf2
 806185e:	6878      	ldr	r0, [r7, #4]
 8061860:	f7ff ff43 	bl	80616ea <write_register8>
 8061864:	4603      	mov	r3, r0
 8061866:	2b00      	cmp	r3, #0
 8061868:	d001      	beq.n	806186e <bmp280_init+0x13a>
			return false;
 806186a:	2300      	movs	r3, #0
 806186c:	e00b      	b.n	8061886 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 806186e:	7bbb      	ldrb	r3, [r7, #14]
 8061870:	461a      	mov	r2, r3
 8061872:	21f4      	movs	r1, #244	; 0xf4
 8061874:	6878      	ldr	r0, [r7, #4]
 8061876:	f7ff ff38 	bl	80616ea <write_register8>
 806187a:	4603      	mov	r3, r0
 806187c:	2b00      	cmp	r3, #0
 806187e:	d001      	beq.n	8061884 <bmp280_init+0x150>
		return false;
 8061880:	2300      	movs	r3, #0
 8061882:	e000      	b.n	8061886 <bmp280_init+0x152>
	}

	return true;
 8061884:	2301      	movs	r3, #1
}
 8061886:	4618      	mov	r0, r3
 8061888:	3710      	adds	r7, #16
 806188a:	46bd      	mov	sp, r7
 806188c:	bd80      	pop	{r7, pc}

0806188e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 806188e:	b480      	push	{r7}
 8061890:	b087      	sub	sp, #28
 8061892:	af00      	add	r7, sp, #0
 8061894:	60f8      	str	r0, [r7, #12]
 8061896:	60b9      	str	r1, [r7, #8]
 8061898:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 806189a:	68bb      	ldr	r3, [r7, #8]
 806189c:	10da      	asrs	r2, r3, #3
 806189e:	68fb      	ldr	r3, [r7, #12]
 80618a0:	881b      	ldrh	r3, [r3, #0]
 80618a2:	005b      	lsls	r3, r3, #1
 80618a4:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80618a6:	68fa      	ldr	r2, [r7, #12]
 80618a8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80618ac:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80618b0:	12db      	asrs	r3, r3, #11
 80618b2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80618b4:	68bb      	ldr	r3, [r7, #8]
 80618b6:	111b      	asrs	r3, r3, #4
 80618b8:	68fa      	ldr	r2, [r7, #12]
 80618ba:	8812      	ldrh	r2, [r2, #0]
 80618bc:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80618be:	68ba      	ldr	r2, [r7, #8]
 80618c0:	1112      	asrs	r2, r2, #4
 80618c2:	68f9      	ldr	r1, [r7, #12]
 80618c4:	8809      	ldrh	r1, [r1, #0]
 80618c6:	1a52      	subs	r2, r2, r1
 80618c8:	fb02 f303 	mul.w	r3, r2, r3
 80618cc:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80618ce:	68fa      	ldr	r2, [r7, #12]
 80618d0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80618d4:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80618d8:	139b      	asrs	r3, r3, #14
 80618da:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80618dc:	697a      	ldr	r2, [r7, #20]
 80618de:	693b      	ldr	r3, [r7, #16]
 80618e0:	441a      	add	r2, r3
 80618e2:	687b      	ldr	r3, [r7, #4]
 80618e4:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80618e6:	687b      	ldr	r3, [r7, #4]
 80618e8:	681a      	ldr	r2, [r3, #0]
 80618ea:	4613      	mov	r3, r2
 80618ec:	009b      	lsls	r3, r3, #2
 80618ee:	4413      	add	r3, r2
 80618f0:	3380      	adds	r3, #128	; 0x80
 80618f2:	121b      	asrs	r3, r3, #8
}
 80618f4:	4618      	mov	r0, r3
 80618f6:	371c      	adds	r7, #28
 80618f8:	46bd      	mov	sp, r7
 80618fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80618fe:	4770      	bx	lr

08061900 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8061900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8061904:	b09c      	sub	sp, #112	; 0x70
 8061906:	af00      	add	r7, sp, #0
 8061908:	6578      	str	r0, [r7, #84]	; 0x54
 806190a:	6539      	str	r1, [r7, #80]	; 0x50
 806190c:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 806190e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8061910:	461a      	mov	r2, r3
 8061912:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061916:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 806191a:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 806191e:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8061922:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8061924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8061926:	fb03 f102 	mul.w	r1, r3, r2
 806192a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 806192c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 806192e:	fb03 f302 	mul.w	r3, r3, r2
 8061932:	18ca      	adds	r2, r1, r3
 8061934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8061936:	fba3 4503 	umull	r4, r5, r3, r3
 806193a:	1953      	adds	r3, r2, r5
 806193c:	461d      	mov	r5, r3
 806193e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061940:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8061944:	b21a      	sxth	r2, r3
 8061946:	ea4f 73e2 	mov.w	r3, r2, asr #31
 806194a:	fb02 f005 	mul.w	r0, r2, r5
 806194e:	fb04 f103 	mul.w	r1, r4, r3
 8061952:	4401      	add	r1, r0
 8061954:	fba4 2302 	umull	r2, r3, r4, r2
 8061958:	4419      	add	r1, r3
 806195a:	460b      	mov	r3, r1
 806195c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8061960:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8061964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061966:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 806196a:	b21a      	sxth	r2, r3
 806196c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061970:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061972:	fb03 f001 	mul.w	r0, r3, r1
 8061976:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8061978:	fb02 f101 	mul.w	r1, r2, r1
 806197c:	4408      	add	r0, r1
 806197e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061980:	fba1 2302 	umull	r2, r3, r1, r2
 8061984:	18c1      	adds	r1, r0, r3
 8061986:	460b      	mov	r3, r1
 8061988:	f04f 0000 	mov.w	r0, #0
 806198c:	f04f 0100 	mov.w	r1, #0
 8061990:	0459      	lsls	r1, r3, #17
 8061992:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8061996:	0450      	lsls	r0, r2, #17
 8061998:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 806199c:	eb12 0800 	adds.w	r8, r2, r0
 80619a0:	eb43 0901 	adc.w	r9, r3, r1
 80619a4:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80619a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80619aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80619ae:	b21a      	sxth	r2, r3
 80619b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80619b4:	f04f 0000 	mov.w	r0, #0
 80619b8:	f04f 0100 	mov.w	r1, #0
 80619bc:	00d1      	lsls	r1, r2, #3
 80619be:	2000      	movs	r0, #0
 80619c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80619c4:	1814      	adds	r4, r2, r0
 80619c6:	61bc      	str	r4, [r7, #24]
 80619c8:	414b      	adcs	r3, r1
 80619ca:	61fb      	str	r3, [r7, #28]
 80619cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80619d0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80619d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80619d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80619d8:	fb03 f102 	mul.w	r1, r3, r2
 80619dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80619de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80619e0:	fb03 f302 	mul.w	r3, r3, r2
 80619e4:	18ca      	adds	r2, r1, r3
 80619e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80619e8:	fba3 4503 	umull	r4, r5, r3, r3
 80619ec:	1953      	adds	r3, r2, r5
 80619ee:	461d      	mov	r5, r3
 80619f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80619f2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80619f6:	b21a      	sxth	r2, r3
 80619f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80619fc:	fb02 f005 	mul.w	r0, r2, r5
 8061a00:	fb04 f103 	mul.w	r1, r4, r3
 8061a04:	4401      	add	r1, r0
 8061a06:	fba4 2302 	umull	r2, r3, r4, r2
 8061a0a:	4419      	add	r1, r3
 8061a0c:	460b      	mov	r3, r1
 8061a0e:	f04f 0800 	mov.w	r8, #0
 8061a12:	f04f 0900 	mov.w	r9, #0
 8061a16:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8061a1a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8061a1e:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8061a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061a24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8061a28:	b21a      	sxth	r2, r3
 8061a2a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061a30:	fb03 f001 	mul.w	r0, r3, r1
 8061a34:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8061a36:	fb02 f101 	mul.w	r1, r2, r1
 8061a3a:	1844      	adds	r4, r0, r1
 8061a3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061a3e:	fba1 0102 	umull	r0, r1, r1, r2
 8061a42:	1863      	adds	r3, r4, r1
 8061a44:	4619      	mov	r1, r3
 8061a46:	f04f 0200 	mov.w	r2, #0
 8061a4a:	f04f 0300 	mov.w	r3, #0
 8061a4e:	030b      	lsls	r3, r1, #12
 8061a50:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8061a54:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8061a56:	eb18 0102 	adds.w	r1, r8, r2
 8061a5a:	6139      	str	r1, [r7, #16]
 8061a5c:	eb49 0303 	adc.w	r3, r9, r3
 8061a60:	617b      	str	r3, [r7, #20]
 8061a62:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8061a66:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8061a6a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061a6e:	1c11      	adds	r1, r2, #0
 8061a70:	6439      	str	r1, [r7, #64]	; 0x40
 8061a72:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8061a76:	647b      	str	r3, [r7, #68]	; 0x44
 8061a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061a7a:	88db      	ldrh	r3, [r3, #6]
 8061a7c:	b29a      	uxth	r2, r3
 8061a7e:	f04f 0300 	mov.w	r3, #0
 8061a82:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8061a86:	4629      	mov	r1, r5
 8061a88:	fb02 f001 	mul.w	r0, r2, r1
 8061a8c:	4621      	mov	r1, r4
 8061a8e:	fb01 f103 	mul.w	r1, r1, r3
 8061a92:	4401      	add	r1, r0
 8061a94:	4620      	mov	r0, r4
 8061a96:	fba0 2302 	umull	r2, r3, r0, r2
 8061a9a:	4419      	add	r1, r3
 8061a9c:	460b      	mov	r3, r1
 8061a9e:	f04f 0000 	mov.w	r0, #0
 8061aa2:	f04f 0100 	mov.w	r1, #0
 8061aa6:	1058      	asrs	r0, r3, #1
 8061aa8:	17d9      	asrs	r1, r3, #31
 8061aaa:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 8061aae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061ab2:	4313      	orrs	r3, r2
 8061ab4:	d101      	bne.n	8061aba <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8061ab6:	2300      	movs	r3, #0
 8061ab8:	e0e1      	b.n	8061c7e <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8061aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8061abc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8061ac0:	461a      	mov	r2, r3
 8061ac2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061ac6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8061aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8061acc:	105b      	asrs	r3, r3, #1
 8061ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8061ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8061ad2:	07db      	lsls	r3, r3, #31
 8061ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8061ad6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8061ada:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8061ade:	4621      	mov	r1, r4
 8061ae0:	ebb1 0a02 	subs.w	sl, r1, r2
 8061ae4:	4629      	mov	r1, r5
 8061ae6:	eb61 0b03 	sbc.w	fp, r1, r3
 8061aea:	4652      	mov	r2, sl
 8061aec:	465b      	mov	r3, fp
 8061aee:	1891      	adds	r1, r2, r2
 8061af0:	60b9      	str	r1, [r7, #8]
 8061af2:	415b      	adcs	r3, r3
 8061af4:	60fb      	str	r3, [r7, #12]
 8061af6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8061afa:	eb12 020a 	adds.w	r2, r2, sl
 8061afe:	eb43 030b 	adc.w	r3, r3, fp
 8061b02:	f04f 0000 	mov.w	r0, #0
 8061b06:	f04f 0100 	mov.w	r1, #0
 8061b0a:	0199      	lsls	r1, r3, #6
 8061b0c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8061b10:	0190      	lsls	r0, r2, #6
 8061b12:	1812      	adds	r2, r2, r0
 8061b14:	eb41 0303 	adc.w	r3, r1, r3
 8061b18:	f04f 0000 	mov.w	r0, #0
 8061b1c:	f04f 0100 	mov.w	r1, #0
 8061b20:	0099      	lsls	r1, r3, #2
 8061b22:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8061b26:	0090      	lsls	r0, r2, #2
 8061b28:	4602      	mov	r2, r0
 8061b2a:	460b      	mov	r3, r1
 8061b2c:	eb12 020a 	adds.w	r2, r2, sl
 8061b30:	eb43 030b 	adc.w	r3, r3, fp
 8061b34:	f04f 0000 	mov.w	r0, #0
 8061b38:	f04f 0100 	mov.w	r1, #0
 8061b3c:	0099      	lsls	r1, r3, #2
 8061b3e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8061b42:	0090      	lsls	r0, r2, #2
 8061b44:	4602      	mov	r2, r0
 8061b46:	460b      	mov	r3, r1
 8061b48:	eb12 010a 	adds.w	r1, r2, sl
 8061b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8061b4e:	eb43 030b 	adc.w	r3, r3, fp
 8061b52:	637b      	str	r3, [r7, #52]	; 0x34
 8061b54:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061b58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8061b5c:	f7ff f8ac 	bl	8060cb8 <__aeabi_ldivmod>
 8061b60:	4602      	mov	r2, r0
 8061b62:	460b      	mov	r3, r1
 8061b64:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8061b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061b6a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8061b6e:	b218      	sxth	r0, r3
 8061b70:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8061b74:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8061b78:	f04f 0200 	mov.w	r2, #0
 8061b7c:	f04f 0300 	mov.w	r3, #0
 8061b80:	0b62      	lsrs	r2, r4, #13
 8061b82:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8061b86:	136b      	asrs	r3, r5, #13
 8061b88:	fb02 f501 	mul.w	r5, r2, r1
 8061b8c:	fb00 f403 	mul.w	r4, r0, r3
 8061b90:	442c      	add	r4, r5
 8061b92:	fba0 0102 	umull	r0, r1, r0, r2
 8061b96:	1863      	adds	r3, r4, r1
 8061b98:	4619      	mov	r1, r3
 8061b9a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8061b9e:	f04f 0200 	mov.w	r2, #0
 8061ba2:	f04f 0300 	mov.w	r3, #0
 8061ba6:	0b62      	lsrs	r2, r4, #13
 8061ba8:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8061bac:	136b      	asrs	r3, r5, #13
 8061bae:	fb02 f501 	mul.w	r5, r2, r1
 8061bb2:	fb00 f403 	mul.w	r4, r0, r3
 8061bb6:	442c      	add	r4, r5
 8061bb8:	fba0 0102 	umull	r0, r1, r0, r2
 8061bbc:	1863      	adds	r3, r4, r1
 8061bbe:	4619      	mov	r1, r3
 8061bc0:	f04f 0200 	mov.w	r2, #0
 8061bc4:	f04f 0300 	mov.w	r3, #0
 8061bc8:	0e42      	lsrs	r2, r0, #25
 8061bca:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8061bce:	164b      	asrs	r3, r1, #25
 8061bd0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8061bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061bd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8061bda:	b21a      	sxth	r2, r3
 8061bdc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061be0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8061be2:	fb03 f001 	mul.w	r0, r3, r1
 8061be6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8061be8:	fb02 f101 	mul.w	r1, r2, r1
 8061bec:	1844      	adds	r4, r0, r1
 8061bee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8061bf0:	fba1 0102 	umull	r0, r1, r1, r2
 8061bf4:	1863      	adds	r3, r4, r1
 8061bf6:	4619      	mov	r1, r3
 8061bf8:	f04f 0200 	mov.w	r2, #0
 8061bfc:	f04f 0300 	mov.w	r3, #0
 8061c00:	0cc2      	lsrs	r2, r0, #19
 8061c02:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8061c06:	14cb      	asrs	r3, r1, #19
 8061c08:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8061c0c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8061c10:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061c14:	1884      	adds	r4, r0, r2
 8061c16:	62bc      	str	r4, [r7, #40]	; 0x28
 8061c18:	eb41 0303 	adc.w	r3, r1, r3
 8061c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8061c1e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8061c22:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8061c26:	4621      	mov	r1, r4
 8061c28:	1889      	adds	r1, r1, r2
 8061c2a:	6239      	str	r1, [r7, #32]
 8061c2c:	4629      	mov	r1, r5
 8061c2e:	eb43 0101 	adc.w	r1, r3, r1
 8061c32:	6279      	str	r1, [r7, #36]	; 0x24
 8061c34:	f04f 0000 	mov.w	r0, #0
 8061c38:	f04f 0100 	mov.w	r1, #0
 8061c3c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8061c40:	4623      	mov	r3, r4
 8061c42:	0a18      	lsrs	r0, r3, #8
 8061c44:	462b      	mov	r3, r5
 8061c46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8061c4a:	462b      	mov	r3, r5
 8061c4c:	1219      	asrs	r1, r3, #8
 8061c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061c50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8061c54:	b21c      	sxth	r4, r3
 8061c56:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8061c5a:	f04f 0200 	mov.w	r2, #0
 8061c5e:	f04f 0300 	mov.w	r3, #0
 8061c62:	012b      	lsls	r3, r5, #4
 8061c64:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8061c68:	0122      	lsls	r2, r4, #4
 8061c6a:	1884      	adds	r4, r0, r2
 8061c6c:	603c      	str	r4, [r7, #0]
 8061c6e:	eb41 0303 	adc.w	r3, r1, r3
 8061c72:	607b      	str	r3, [r7, #4]
 8061c74:	e9d7 3400 	ldrd	r3, r4, [r7]
 8061c78:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8061c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8061c7e:	4618      	mov	r0, r3
 8061c80:	3770      	adds	r7, #112	; 0x70
 8061c82:	46bd      	mov	sp, r7
 8061c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08061c88 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8061c88:	b480      	push	{r7}
 8061c8a:	b087      	sub	sp, #28
 8061c8c:	af00      	add	r7, sp, #0
 8061c8e:	60f8      	str	r0, [r7, #12]
 8061c90:	60b9      	str	r1, [r7, #8]
 8061c92:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8061c94:	687b      	ldr	r3, [r7, #4]
 8061c96:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8061c9a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8061c9c:	68bb      	ldr	r3, [r7, #8]
 8061c9e:	039a      	lsls	r2, r3, #14
 8061ca0:	68fb      	ldr	r3, [r7, #12]
 8061ca2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8061ca6:	051b      	lsls	r3, r3, #20
 8061ca8:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8061caa:	68fb      	ldr	r3, [r7, #12]
 8061cac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8061cb0:	4619      	mov	r1, r3
 8061cb2:	697b      	ldr	r3, [r7, #20]
 8061cb4:	fb03 f301 	mul.w	r3, r3, r1
 8061cb8:	1ad3      	subs	r3, r2, r3
 8061cba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8061cbe:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8061cc0:	68fa      	ldr	r2, [r7, #12]
 8061cc2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8061cc6:	4611      	mov	r1, r2
 8061cc8:	697a      	ldr	r2, [r7, #20]
 8061cca:	fb02 f201 	mul.w	r2, r2, r1
 8061cce:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8061cd0:	68f9      	ldr	r1, [r7, #12]
 8061cd2:	7f09      	ldrb	r1, [r1, #28]
 8061cd4:	4608      	mov	r0, r1
 8061cd6:	6979      	ldr	r1, [r7, #20]
 8061cd8:	fb01 f100 	mul.w	r1, r1, r0
 8061cdc:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8061cde:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8061ce2:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8061ce6:	1292      	asrs	r2, r2, #10
 8061ce8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8061cec:	68f9      	ldr	r1, [r7, #12]
 8061cee:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8061cf2:	fb01 f202 	mul.w	r2, r1, r2
 8061cf6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8061cfa:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8061cfc:	fb02 f303 	mul.w	r3, r2, r3
 8061d00:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8061d02:	697b      	ldr	r3, [r7, #20]
 8061d04:	13db      	asrs	r3, r3, #15
 8061d06:	697a      	ldr	r2, [r7, #20]
 8061d08:	13d2      	asrs	r2, r2, #15
 8061d0a:	fb02 f303 	mul.w	r3, r2, r3
 8061d0e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8061d10:	68fa      	ldr	r2, [r7, #12]
 8061d12:	7e12      	ldrb	r2, [r2, #24]
 8061d14:	fb02 f303 	mul.w	r3, r2, r3
 8061d18:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8061d1a:	697a      	ldr	r2, [r7, #20]
 8061d1c:	1ad3      	subs	r3, r2, r3
 8061d1e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8061d20:	697b      	ldr	r3, [r7, #20]
 8061d22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8061d26:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8061d28:	697b      	ldr	r3, [r7, #20]
 8061d2a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8061d2e:	bfa8      	it	ge
 8061d30:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8061d34:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8061d36:	697b      	ldr	r3, [r7, #20]
 8061d38:	131b      	asrs	r3, r3, #12
}
 8061d3a:	4618      	mov	r0, r3
 8061d3c:	371c      	adds	r7, #28
 8061d3e:	46bd      	mov	sp, r7
 8061d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061d44:	4770      	bx	lr

08061d46 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8061d46:	b580      	push	{r7, lr}
 8061d48:	b08c      	sub	sp, #48	; 0x30
 8061d4a:	af00      	add	r7, sp, #0
 8061d4c:	60f8      	str	r0, [r7, #12]
 8061d4e:	60b9      	str	r1, [r7, #8]
 8061d50:	607a      	str	r2, [r7, #4]
 8061d52:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8061d54:	68fb      	ldr	r3, [r7, #12]
 8061d56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8061d5a:	2b60      	cmp	r3, #96	; 0x60
 8061d5c:	d007      	beq.n	8061d6e <bmp280_read_fixed+0x28>
		if (humidity)
 8061d5e:	683b      	ldr	r3, [r7, #0]
 8061d60:	2b00      	cmp	r3, #0
 8061d62:	d002      	beq.n	8061d6a <bmp280_read_fixed+0x24>
			*humidity = 0;
 8061d64:	683b      	ldr	r3, [r7, #0]
 8061d66:	2200      	movs	r2, #0
 8061d68:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8061d6a:	2300      	movs	r3, #0
 8061d6c:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8061d6e:	683b      	ldr	r3, [r7, #0]
 8061d70:	2b00      	cmp	r3, #0
 8061d72:	d001      	beq.n	8061d78 <bmp280_read_fixed+0x32>
 8061d74:	2308      	movs	r3, #8
 8061d76:	e000      	b.n	8061d7a <bmp280_read_fixed+0x34>
 8061d78:	2306      	movs	r3, #6
 8061d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8061d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8061d7e:	b2db      	uxtb	r3, r3
 8061d80:	f107 0218 	add.w	r2, r7, #24
 8061d84:	21f7      	movs	r1, #247	; 0xf7
 8061d86:	68f8      	ldr	r0, [r7, #12]
 8061d88:	f7ff fba5 	bl	80614d6 <read_data>
 8061d8c:	4603      	mov	r3, r0
 8061d8e:	2b00      	cmp	r3, #0
 8061d90:	d001      	beq.n	8061d96 <bmp280_read_fixed+0x50>
		return false;
 8061d92:	2300      	movs	r3, #0
 8061d94:	e038      	b.n	8061e08 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8061d96:	7e3b      	ldrb	r3, [r7, #24]
 8061d98:	031a      	lsls	r2, r3, #12
 8061d9a:	7e7b      	ldrb	r3, [r7, #25]
 8061d9c:	011b      	lsls	r3, r3, #4
 8061d9e:	4313      	orrs	r3, r2
 8061da0:	7eba      	ldrb	r2, [r7, #26]
 8061da2:	0912      	lsrs	r2, r2, #4
 8061da4:	b2d2      	uxtb	r2, r2
 8061da6:	4313      	orrs	r3, r2
 8061da8:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8061daa:	7efb      	ldrb	r3, [r7, #27]
 8061dac:	031a      	lsls	r2, r3, #12
 8061dae:	7f3b      	ldrb	r3, [r7, #28]
 8061db0:	011b      	lsls	r3, r3, #4
 8061db2:	4313      	orrs	r3, r2
 8061db4:	7f7a      	ldrb	r2, [r7, #29]
 8061db6:	0912      	lsrs	r2, r2, #4
 8061db8:	b2d2      	uxtb	r2, r2
 8061dba:	4313      	orrs	r3, r2
 8061dbc:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8061dbe:	f107 0314 	add.w	r3, r7, #20
 8061dc2:	461a      	mov	r2, r3
 8061dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8061dc6:	68f8      	ldr	r0, [r7, #12]
 8061dc8:	f7ff fd61 	bl	806188e <compensate_temperature>
 8061dcc:	4602      	mov	r2, r0
 8061dce:	68bb      	ldr	r3, [r7, #8]
 8061dd0:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8061dd2:	697b      	ldr	r3, [r7, #20]
 8061dd4:	461a      	mov	r2, r3
 8061dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8061dd8:	68f8      	ldr	r0, [r7, #12]
 8061dda:	f7ff fd91 	bl	8061900 <compensate_pressure>
 8061dde:	4602      	mov	r2, r0
 8061de0:	687b      	ldr	r3, [r7, #4]
 8061de2:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8061de4:	683b      	ldr	r3, [r7, #0]
 8061de6:	2b00      	cmp	r3, #0
 8061de8:	d00d      	beq.n	8061e06 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8061dea:	7fbb      	ldrb	r3, [r7, #30]
 8061dec:	021b      	lsls	r3, r3, #8
 8061dee:	7ffa      	ldrb	r2, [r7, #31]
 8061df0:	4313      	orrs	r3, r2
 8061df2:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8061df4:	697b      	ldr	r3, [r7, #20]
 8061df6:	461a      	mov	r2, r3
 8061df8:	6a39      	ldr	r1, [r7, #32]
 8061dfa:	68f8      	ldr	r0, [r7, #12]
 8061dfc:	f7ff ff44 	bl	8061c88 <compensate_humidity>
 8061e00:	4602      	mov	r2, r0
 8061e02:	683b      	ldr	r3, [r7, #0]
 8061e04:	601a      	str	r2, [r3, #0]
	}

	return true;
 8061e06:	2301      	movs	r3, #1
}
 8061e08:	4618      	mov	r0, r3
 8061e0a:	3730      	adds	r7, #48	; 0x30
 8061e0c:	46bd      	mov	sp, r7
 8061e0e:	bd80      	pop	{r7, pc}

08061e10 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8061e10:	b580      	push	{r7, lr}
 8061e12:	b088      	sub	sp, #32
 8061e14:	af00      	add	r7, sp, #0
 8061e16:	60f8      	str	r0, [r7, #12]
 8061e18:	60b9      	str	r1, [r7, #8]
 8061e1a:	607a      	str	r2, [r7, #4]
 8061e1c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8061e1e:	683b      	ldr	r3, [r7, #0]
 8061e20:	2b00      	cmp	r3, #0
 8061e22:	d002      	beq.n	8061e2a <bmp280_read_float+0x1a>
 8061e24:	f107 0314 	add.w	r3, r7, #20
 8061e28:	e000      	b.n	8061e2c <bmp280_read_float+0x1c>
 8061e2a:	2300      	movs	r3, #0
 8061e2c:	f107 0218 	add.w	r2, r7, #24
 8061e30:	f107 011c 	add.w	r1, r7, #28
 8061e34:	68f8      	ldr	r0, [r7, #12]
 8061e36:	f7ff ff86 	bl	8061d46 <bmp280_read_fixed>
 8061e3a:	4603      	mov	r3, r0
 8061e3c:	2b00      	cmp	r3, #0
 8061e3e:	d028      	beq.n	8061e92 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8061e40:	69fb      	ldr	r3, [r7, #28]
 8061e42:	ee07 3a90 	vmov	s15, r3
 8061e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8061e4a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8061e9c <bmp280_read_float+0x8c>
 8061e4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061e52:	68bb      	ldr	r3, [r7, #8]
 8061e54:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8061e58:	69bb      	ldr	r3, [r7, #24]
 8061e5a:	ee07 3a90 	vmov	s15, r3
 8061e5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8061e62:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8061ea0 <bmp280_read_float+0x90>
 8061e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061e6a:	687b      	ldr	r3, [r7, #4]
 8061e6c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8061e70:	683b      	ldr	r3, [r7, #0]
 8061e72:	2b00      	cmp	r3, #0
 8061e74:	d00b      	beq.n	8061e8e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8061e76:	697b      	ldr	r3, [r7, #20]
 8061e78:	ee07 3a90 	vmov	s15, r3
 8061e7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8061e80:	eddf 6a08 	vldr	s13, [pc, #32]	; 8061ea4 <bmp280_read_float+0x94>
 8061e84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061e88:	683b      	ldr	r3, [r7, #0]
 8061e8a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8061e8e:	2301      	movs	r3, #1
 8061e90:	e000      	b.n	8061e94 <bmp280_read_float+0x84>
	}

	return false;
 8061e92:	2300      	movs	r3, #0
}
 8061e94:	4618      	mov	r0, r3
 8061e96:	3720      	adds	r7, #32
 8061e98:	46bd      	mov	sp, r7
 8061e9a:	bd80      	pop	{r7, pc}
 8061e9c:	42c80000 	.word	0x42c80000
 8061ea0:	43800000 	.word	0x43800000
 8061ea4:	44800000 	.word	0x44800000

08061ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8061ea8:	b580      	push	{r7, lr}
 8061eaa:	b082      	sub	sp, #8
 8061eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8061eae:	2300      	movs	r3, #0
 8061eb0:	607b      	str	r3, [r7, #4]
 8061eb2:	4b0c      	ldr	r3, [pc, #48]	; (8061ee4 <MX_DMA_Init+0x3c>)
 8061eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061eb6:	4a0b      	ldr	r2, [pc, #44]	; (8061ee4 <MX_DMA_Init+0x3c>)
 8061eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8061ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8061ebe:	4b09      	ldr	r3, [pc, #36]	; (8061ee4 <MX_DMA_Init+0x3c>)
 8061ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8061ec6:	607b      	str	r3, [r7, #4]
 8061ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8061eca:	2200      	movs	r2, #0
 8061ecc:	2105      	movs	r1, #5
 8061ece:	2038      	movs	r0, #56	; 0x38
 8061ed0:	f002 fdfe 	bl	8064ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8061ed4:	2038      	movs	r0, #56	; 0x38
 8061ed6:	f002 fe27 	bl	8064b28 <HAL_NVIC_EnableIRQ>

}
 8061eda:	bf00      	nop
 8061edc:	3708      	adds	r7, #8
 8061ede:	46bd      	mov	sp, r7
 8061ee0:	bd80      	pop	{r7, pc}
 8061ee2:	bf00      	nop
 8061ee4:	40023800 	.word	0x40023800

08061ee8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8061ee8:	b580      	push	{r7, lr}
 8061eea:	b082      	sub	sp, #8
 8061eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// initialize sd card now to check whether it is working
	// second arg is basically prefic of path to file
	FRESULT fres = f_mount(&FatFs, "", 1);
 8061eee:	2201      	movs	r2, #1
 8061ef0:	4980      	ldr	r1, [pc, #512]	; (80620f4 <MX_FREERTOS_Init+0x20c>)
 8061ef2:	4881      	ldr	r0, [pc, #516]	; (80620f8 <MX_FREERTOS_Init+0x210>)
 8061ef4:	f00b f8e0 	bl	806d0b8 <f_mount>
 8061ef8:	4603      	mov	r3, r0
 8061efa:	71fb      	strb	r3, [r7, #7]
	if (fres != FR_OK) {
 8061efc:	79fb      	ldrb	r3, [r7, #7]
 8061efe:	2b00      	cmp	r3, #0
 8061f00:	d013      	beq.n	8061f2a <MX_FREERTOS_Init+0x42>
		myprintf("f_mount error (%i)\r\n", fres);
 8061f02:	79fb      	ldrb	r3, [r7, #7]
 8061f04:	461a      	mov	r2, r3
 8061f06:	497d      	ldr	r1, [pc, #500]	; (80620fc <MX_FREERTOS_Init+0x214>)
 8061f08:	487d      	ldr	r0, [pc, #500]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f0a:	f011 fb7d 	bl	8073608 <siprintf>
 8061f0e:	487c      	ldr	r0, [pc, #496]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f10:	f7fe f970 	bl	80601f4 <strlen>
 8061f14:	4603      	mov	r3, r0
 8061f16:	b29a      	uxth	r2, r3
 8061f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8061f1c:	4978      	ldr	r1, [pc, #480]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f1e:	4879      	ldr	r0, [pc, #484]	; (8062104 <MX_FREERTOS_Init+0x21c>)
 8061f20:	f007 fd18 	bl	8069954 <HAL_UART_Transmit>
		Error_Handler();
 8061f24:	f001 f8d6 	bl	80630d4 <Error_Handler>
 8061f28:	e00e      	b.n	8061f48 <MX_FREERTOS_Init+0x60>
	} else {
		myprintf("SD card mounted\n");
 8061f2a:	4977      	ldr	r1, [pc, #476]	; (8062108 <MX_FREERTOS_Init+0x220>)
 8061f2c:	4874      	ldr	r0, [pc, #464]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f2e:	f011 fb6b 	bl	8073608 <siprintf>
 8061f32:	4873      	ldr	r0, [pc, #460]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f34:	f7fe f95e 	bl	80601f4 <strlen>
 8061f38:	4603      	mov	r3, r0
 8061f3a:	b29a      	uxth	r2, r3
 8061f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8061f40:	496f      	ldr	r1, [pc, #444]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061f42:	4870      	ldr	r0, [pc, #448]	; (8062104 <MX_FREERTOS_Init+0x21c>)
 8061f44:	f007 fd06 	bl	8069954 <HAL_UART_Transmit>
	}
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  telemetryFileMutexHandle = osMutexNew(&telemetryFileMutex_attributes);
 8061f48:	4870      	ldr	r0, [pc, #448]	; (806210c <MX_FREERTOS_Init+0x224>)
 8061f4a:	f00c fb25 	bl	806e598 <osMutexNew>
 8061f4e:	4603      	mov	r3, r0
 8061f50:	4a6f      	ldr	r2, [pc, #444]	; (8062110 <MX_FREERTOS_Init+0x228>)
 8061f52:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txThreadSem */
  txThreadSemHandle = osSemaphoreNew(1, 1, &txThreadSem_attributes);
 8061f54:	4a6f      	ldr	r2, [pc, #444]	; (8062114 <MX_FREERTOS_Init+0x22c>)
 8061f56:	2101      	movs	r1, #1
 8061f58:	2001      	movs	r0, #1
 8061f5a:	f00c fc2b 	bl	806e7b4 <osSemaphoreNew>
 8061f5e:	4603      	mov	r3, r0
 8061f60:	4a6d      	ldr	r2, [pc, #436]	; (8062118 <MX_FREERTOS_Init+0x230>)
 8061f62:	6013      	str	r3, [r2, #0]

  /* creation of rxThreadSem */
  rxThreadSemHandle = osSemaphoreNew(1, 1, &rxThreadSem_attributes);
 8061f64:	4a6d      	ldr	r2, [pc, #436]	; (806211c <MX_FREERTOS_Init+0x234>)
 8061f66:	2101      	movs	r1, #1
 8061f68:	2001      	movs	r0, #1
 8061f6a:	f00c fc23 	bl	806e7b4 <osSemaphoreNew>
 8061f6e:	4603      	mov	r3, r0
 8061f70:	4a6b      	ldr	r2, [pc, #428]	; (8062120 <MX_FREERTOS_Init+0x238>)
 8061f72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreAcquire(txThreadSemHandle, 0);
 8061f74:	4b68      	ldr	r3, [pc, #416]	; (8062118 <MX_FREERTOS_Init+0x230>)
 8061f76:	681b      	ldr	r3, [r3, #0]
 8061f78:	2100      	movs	r1, #0
 8061f7a:	4618      	mov	r0, r3
 8061f7c:	f00c fca4 	bl	806e8c8 <osSemaphoreAcquire>
  osSemaphoreAcquire(rxThreadSemHandle, 0);
 8061f80:	4b67      	ldr	r3, [pc, #412]	; (8062120 <MX_FREERTOS_Init+0x238>)
 8061f82:	681b      	ldr	r3, [r3, #0]
 8061f84:	2100      	movs	r1, #0
 8061f86:	4618      	mov	r0, r3
 8061f88:	f00c fc9e 	bl	806e8c8 <osSemaphoreAcquire>
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of accTimer */
  accTimerHandle = osTimerNew(accTimerCallback, osTimerPeriodic, NULL, &accTimer_attributes);
 8061f8c:	4b65      	ldr	r3, [pc, #404]	; (8062124 <MX_FREERTOS_Init+0x23c>)
 8061f8e:	2200      	movs	r2, #0
 8061f90:	2101      	movs	r1, #1
 8061f92:	4865      	ldr	r0, [pc, #404]	; (8062128 <MX_FREERTOS_Init+0x240>)
 8061f94:	f00c fa56 	bl	806e444 <osTimerNew>
 8061f98:	4603      	mov	r3, r0
 8061f9a:	4a64      	ldr	r2, [pc, #400]	; (806212c <MX_FREERTOS_Init+0x244>)
 8061f9c:	6013      	str	r3, [r2, #0]

  /* creation of temperatureTimer */
  temperatureTimerHandle = osTimerNew(temperatureTimerCallback, osTimerPeriodic, NULL, &temperatureTimer_attributes);
 8061f9e:	4b64      	ldr	r3, [pc, #400]	; (8062130 <MX_FREERTOS_Init+0x248>)
 8061fa0:	2200      	movs	r2, #0
 8061fa2:	2101      	movs	r1, #1
 8061fa4:	4863      	ldr	r0, [pc, #396]	; (8062134 <MX_FREERTOS_Init+0x24c>)
 8061fa6:	f00c fa4d 	bl	806e444 <osTimerNew>
 8061faa:	4603      	mov	r3, r0
 8061fac:	4a62      	ldr	r2, [pc, #392]	; (8062138 <MX_FREERTOS_Init+0x250>)
 8061fae:	6013      	str	r3, [r2, #0]

  /* creation of gpsTimer */
  gpsTimerHandle = osTimerNew(gpsTimerCallback, osTimerPeriodic, NULL, &gpsTimer_attributes);
 8061fb0:	4b62      	ldr	r3, [pc, #392]	; (806213c <MX_FREERTOS_Init+0x254>)
 8061fb2:	2200      	movs	r2, #0
 8061fb4:	2101      	movs	r1, #1
 8061fb6:	4862      	ldr	r0, [pc, #392]	; (8062140 <MX_FREERTOS_Init+0x258>)
 8061fb8:	f00c fa44 	bl	806e444 <osTimerNew>
 8061fbc:	4603      	mov	r3, r0
 8061fbe:	4a61      	ldr	r2, [pc, #388]	; (8062144 <MX_FREERTOS_Init+0x25c>)
 8061fc0:	6013      	str	r3, [r2, #0]

  /* creation of lightTimer */
  lightTimerHandle = osTimerNew(lightTimerCallback, osTimerPeriodic, NULL, &lightTimer_attributes);
 8061fc2:	4b61      	ldr	r3, [pc, #388]	; (8062148 <MX_FREERTOS_Init+0x260>)
 8061fc4:	2200      	movs	r2, #0
 8061fc6:	2101      	movs	r1, #1
 8061fc8:	4860      	ldr	r0, [pc, #384]	; (806214c <MX_FREERTOS_Init+0x264>)
 8061fca:	f00c fa3b 	bl	806e444 <osTimerNew>
 8061fce:	4603      	mov	r3, r0
 8061fd0:	4a5f      	ldr	r2, [pc, #380]	; (8062150 <MX_FREERTOS_Init+0x268>)
 8061fd2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  if (accTimerHandle != NULL)  {
 8061fd4:	4b55      	ldr	r3, [pc, #340]	; (806212c <MX_FREERTOS_Init+0x244>)
 8061fd6:	681b      	ldr	r3, [r3, #0]
 8061fd8:	2b00      	cmp	r3, #0
 8061fda:	d010      	beq.n	8061ffe <MX_FREERTOS_Init+0x116>
      status = osTimerStart(accTimerHandle, 10000U);       // start timer
 8061fdc:	4b53      	ldr	r3, [pc, #332]	; (806212c <MX_FREERTOS_Init+0x244>)
 8061fde:	681b      	ldr	r3, [r3, #0]
 8061fe0:	f242 7110 	movw	r1, #10000	; 0x2710
 8061fe4:	4618      	mov	r0, r3
 8061fe6:	f00c faa9 	bl	806e53c <osTimerStart>
 8061fea:	4603      	mov	r3, r0
 8061fec:	4a59      	ldr	r2, [pc, #356]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 8061fee:	6013      	str	r3, [r2, #0]
      if (status != osOK) {
 8061ff0:	4b58      	ldr	r3, [pc, #352]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 8061ff2:	681b      	ldr	r3, [r3, #0]
 8061ff4:	2b00      	cmp	r3, #0
 8061ff6:	d004      	beq.n	8062002 <MX_FREERTOS_Init+0x11a>
        // Timer could not be started
    	Error_Handler();
 8061ff8:	f001 f86c 	bl	80630d4 <Error_Handler>
 8061ffc:	e001      	b.n	8062002 <MX_FREERTOS_Init+0x11a>
      }
  } else {
	  Error_Handler();
 8061ffe:	f001 f869 	bl	80630d4 <Error_Handler>
  }

  if (temperatureTimerHandle != NULL)  {
 8062002:	4b4d      	ldr	r3, [pc, #308]	; (8062138 <MX_FREERTOS_Init+0x250>)
 8062004:	681b      	ldr	r3, [r3, #0]
 8062006:	2b00      	cmp	r3, #0
 8062008:	d010      	beq.n	806202c <MX_FREERTOS_Init+0x144>
        status = osTimerStart(temperatureTimerHandle, 10000U);       // start timer
 806200a:	4b4b      	ldr	r3, [pc, #300]	; (8062138 <MX_FREERTOS_Init+0x250>)
 806200c:	681b      	ldr	r3, [r3, #0]
 806200e:	f242 7110 	movw	r1, #10000	; 0x2710
 8062012:	4618      	mov	r0, r3
 8062014:	f00c fa92 	bl	806e53c <osTimerStart>
 8062018:	4603      	mov	r3, r0
 806201a:	4a4e      	ldr	r2, [pc, #312]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 806201c:	6013      	str	r3, [r2, #0]
        if (status != osOK) {
 806201e:	4b4d      	ldr	r3, [pc, #308]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 8062020:	681b      	ldr	r3, [r3, #0]
 8062022:	2b00      	cmp	r3, #0
 8062024:	d004      	beq.n	8062030 <MX_FREERTOS_Init+0x148>
          // Timer could not be started
      	Error_Handler();
 8062026:	f001 f855 	bl	80630d4 <Error_Handler>
 806202a:	e001      	b.n	8062030 <MX_FREERTOS_Init+0x148>
        }
    } else {
  	  Error_Handler();
 806202c:	f001 f852 	bl	80630d4 <Error_Handler>
    }

  if (gpsTimerHandle != NULL)  {
 8062030:	4b44      	ldr	r3, [pc, #272]	; (8062144 <MX_FREERTOS_Init+0x25c>)
 8062032:	681b      	ldr	r3, [r3, #0]
 8062034:	2b00      	cmp	r3, #0
 8062036:	d010      	beq.n	806205a <MX_FREERTOS_Init+0x172>
          status = osTimerStart(gpsTimerHandle, 10000U);       // start timer
 8062038:	4b42      	ldr	r3, [pc, #264]	; (8062144 <MX_FREERTOS_Init+0x25c>)
 806203a:	681b      	ldr	r3, [r3, #0]
 806203c:	f242 7110 	movw	r1, #10000	; 0x2710
 8062040:	4618      	mov	r0, r3
 8062042:	f00c fa7b 	bl	806e53c <osTimerStart>
 8062046:	4603      	mov	r3, r0
 8062048:	4a42      	ldr	r2, [pc, #264]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 806204a:	6013      	str	r3, [r2, #0]
          if (status != osOK) {
 806204c:	4b41      	ldr	r3, [pc, #260]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 806204e:	681b      	ldr	r3, [r3, #0]
 8062050:	2b00      	cmp	r3, #0
 8062052:	d004      	beq.n	806205e <MX_FREERTOS_Init+0x176>
            // Timer could not be started
        	Error_Handler();
 8062054:	f001 f83e 	bl	80630d4 <Error_Handler>
 8062058:	e001      	b.n	806205e <MX_FREERTOS_Init+0x176>
          }
      } else {
    	  Error_Handler();
 806205a:	f001 f83b 	bl	80630d4 <Error_Handler>
      }

  if (lightTimerHandle != NULL)  {
 806205e:	4b3c      	ldr	r3, [pc, #240]	; (8062150 <MX_FREERTOS_Init+0x268>)
 8062060:	681b      	ldr	r3, [r3, #0]
 8062062:	2b00      	cmp	r3, #0
 8062064:	d010      	beq.n	8062088 <MX_FREERTOS_Init+0x1a0>
      status = osTimerStart(lightTimerHandle, 10000U);       // start timer
 8062066:	4b3a      	ldr	r3, [pc, #232]	; (8062150 <MX_FREERTOS_Init+0x268>)
 8062068:	681b      	ldr	r3, [r3, #0]
 806206a:	f242 7110 	movw	r1, #10000	; 0x2710
 806206e:	4618      	mov	r0, r3
 8062070:	f00c fa64 	bl	806e53c <osTimerStart>
 8062074:	4603      	mov	r3, r0
 8062076:	4a37      	ldr	r2, [pc, #220]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 8062078:	6013      	str	r3, [r2, #0]
      if (status != osOK) {
 806207a:	4b36      	ldr	r3, [pc, #216]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 806207c:	681b      	ldr	r3, [r3, #0]
 806207e:	2b00      	cmp	r3, #0
 8062080:	d004      	beq.n	806208c <MX_FREERTOS_Init+0x1a4>
          // Timer could not be started
          Error_Handler();
 8062082:	f001 f827 	bl	80630d4 <Error_Handler>
 8062086:	e001      	b.n	806208c <MX_FREERTOS_Init+0x1a4>
      }
   } else {
      Error_Handler();
 8062088:	f001 f824 	bl	80630d4 <Error_Handler>
   }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  telemetryQueueHandle = osMessageQueueNew(16, sizeof(TelemetryBase), &telemetryQueue_attributes);
 806208c:	4a32      	ldr	r2, [pc, #200]	; (8062158 <MX_FREERTOS_Init+0x270>)
 806208e:	2138      	movs	r1, #56	; 0x38
 8062090:	2010      	movs	r0, #16
 8062092:	f00c fcd3 	bl	806ea3c <osMessageQueueNew>
 8062096:	4603      	mov	r3, r0
 8062098:	4a30      	ldr	r2, [pc, #192]	; (806215c <MX_FREERTOS_Init+0x274>)
 806209a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 806209c:	4a30      	ldr	r2, [pc, #192]	; (8062160 <MX_FREERTOS_Init+0x278>)
 806209e:	2100      	movs	r1, #0
 80620a0:	4830      	ldr	r0, [pc, #192]	; (8062164 <MX_FREERTOS_Init+0x27c>)
 80620a2:	f00b ffdf 	bl	806e064 <osThreadNew>
 80620a6:	4603      	mov	r3, r0
 80620a8:	4a2f      	ldr	r2, [pc, #188]	; (8062168 <MX_FREERTOS_Init+0x280>)
 80620aa:	6013      	str	r3, [r2, #0]

  /* creation of rxDataThread */
  rxDataThreadHandle = osThreadNew(startRxDataThread, NULL, &rxDataThread_attributes);
 80620ac:	4a2f      	ldr	r2, [pc, #188]	; (806216c <MX_FREERTOS_Init+0x284>)
 80620ae:	2100      	movs	r1, #0
 80620b0:	482f      	ldr	r0, [pc, #188]	; (8062170 <MX_FREERTOS_Init+0x288>)
 80620b2:	f00b ffd7 	bl	806e064 <osThreadNew>
 80620b6:	4603      	mov	r3, r0
 80620b8:	4a2e      	ldr	r2, [pc, #184]	; (8062174 <MX_FREERTOS_Init+0x28c>)
 80620ba:	6013      	str	r3, [r2, #0]

  /* creation of txDataThread */
  txDataThreadHandle = osThreadNew(startTxDataThread, NULL, &txDataThread_attributes);
 80620bc:	4a2e      	ldr	r2, [pc, #184]	; (8062178 <MX_FREERTOS_Init+0x290>)
 80620be:	2100      	movs	r1, #0
 80620c0:	482e      	ldr	r0, [pc, #184]	; (806217c <MX_FREERTOS_Init+0x294>)
 80620c2:	f00b ffcf 	bl	806e064 <osThreadNew>
 80620c6:	4603      	mov	r3, r0
 80620c8:	4a2d      	ldr	r2, [pc, #180]	; (8062180 <MX_FREERTOS_Init+0x298>)
 80620ca:	6013      	str	r3, [r2, #0]

  /* creation of telemetryThread */
  telemetryThreadHandle = osThreadNew(startTelemetryThread, NULL, &telemetryThread_attributes);
 80620cc:	4a2d      	ldr	r2, [pc, #180]	; (8062184 <MX_FREERTOS_Init+0x29c>)
 80620ce:	2100      	movs	r1, #0
 80620d0:	482d      	ldr	r0, [pc, #180]	; (8062188 <MX_FREERTOS_Init+0x2a0>)
 80620d2:	f00b ffc7 	bl	806e064 <osThreadNew>
 80620d6:	4603      	mov	r3, r0
 80620d8:	4a2c      	ldr	r2, [pc, #176]	; (806218c <MX_FREERTOS_Init+0x2a4>)
 80620da:	6013      	str	r3, [r2, #0]

  /* creation of peripheryThread */
  peripheryThreadHandle = osThreadNew(startPeripheryThread, NULL, &peripheryThread_attributes);
 80620dc:	4a2c      	ldr	r2, [pc, #176]	; (8062190 <MX_FREERTOS_Init+0x2a8>)
 80620de:	2100      	movs	r1, #0
 80620e0:	482c      	ldr	r0, [pc, #176]	; (8062194 <MX_FREERTOS_Init+0x2ac>)
 80620e2:	f00b ffbf 	bl	806e064 <osThreadNew>
 80620e6:	4603      	mov	r3, r0
 80620e8:	4a2b      	ldr	r2, [pc, #172]	; (8062198 <MX_FREERTOS_Init+0x2b0>)
 80620ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80620ec:	bf00      	nop
 80620ee:	3708      	adds	r7, #8
 80620f0:	46bd      	mov	sp, r7
 80620f2:	bd80      	pop	{r7, pc}
 80620f4:	08076ff4 	.word	0x08076ff4
 80620f8:	20004ff4 	.word	0x20004ff4
 80620fc:	08076ff8 	.word	0x08076ff8
 8062100:	2000021c 	.word	0x2000021c
 8062104:	20005828 	.word	0x20005828
 8062108:	08077010 	.word	0x08077010
 806210c:	08077700 	.word	0x08077700
 8062110:	2000522c 	.word	0x2000522c
 8062114:	080776c8 	.word	0x080776c8
 8062118:	20005478 	.word	0x20005478
 806211c:	080776d8 	.word	0x080776d8
 8062120:	20005228 	.word	0x20005228
 8062124:	08077688 	.word	0x08077688
 8062128:	080628b1 	.word	0x080628b1
 806212c:	20005230 	.word	0x20005230
 8062130:	08077698 	.word	0x08077698
 8062134:	080628d1 	.word	0x080628d1
 8062138:	20005240 	.word	0x20005240
 806213c:	080776a8 	.word	0x080776a8
 8062140:	080628f1 	.word	0x080628f1
 8062144:	20005474 	.word	0x20005474
 8062148:	080776b8 	.word	0x080776b8
 806214c:	08062915 	.word	0x08062915
 8062150:	20005484 	.word	0x20005484
 8062154:	200056b8 	.word	0x200056b8
 8062158:	080776e8 	.word	0x080776e8
 806215c:	2000523c 	.word	0x2000523c
 8062160:	080775d4 	.word	0x080775d4
 8062164:	0806219d 	.word	0x0806219d
 8062168:	20004ff0 	.word	0x20004ff0
 806216c:	080775f8 	.word	0x080775f8
 8062170:	080621ad 	.word	0x080621ad
 8062174:	20005234 	.word	0x20005234
 8062178:	0807761c 	.word	0x0807761c
 806217c:	08062391 	.word	0x08062391
 8062180:	20005480 	.word	0x20005480
 8062184:	08077640 	.word	0x08077640
 8062188:	08062519 	.word	0x08062519
 806218c:	20005238 	.word	0x20005238
 8062190:	08077664 	.word	0x08077664
 8062194:	080626f9 	.word	0x080626f9
 8062198:	2000547c 	.word	0x2000547c

0806219c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 806219c:	b580      	push	{r7, lr}
 806219e:	b082      	sub	sp, #8
 80621a0:	af00      	add	r7, sp, #0
 80621a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80621a4:	2001      	movs	r0, #1
 80621a6:	f00c f91d 	bl	806e3e4 <osDelay>
 80621aa:	e7fb      	b.n	80621a4 <StartDefaultTask+0x8>

080621ac <startRxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRxDataThread */
void startRxDataThread(void *argument)
{
 80621ac:	b580      	push	{r7, lr}
 80621ae:	b08a      	sub	sp, #40	; 0x28
 80621b0:	af00      	add	r7, sp, #0
 80621b2:	6078      	str	r0, [r7, #4]
	 // thread is with the highest priority, as after the signal about new firmware
	 // has come, we are not interested in data anymore
	FRESULT wr;
	UINT bytesWrote;
	int cmpRes;
	int safeToBoot = 0;
 80621b4:	2300      	movs	r3, #0
 80621b6:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t firmwareChunk[16];
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 80621b8:	4b67      	ldr	r3, [pc, #412]	; (8062358 <startRxDataThread+0x1ac>)
 80621ba:	681b      	ldr	r3, [r3, #0]
 80621bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80621c0:	4618      	mov	r0, r3
 80621c2:	f00c fb81 	bl	806e8c8 <osSemaphoreAcquire>

	  myprintf("Firmware to be uploaded...\n");
 80621c6:	4965      	ldr	r1, [pc, #404]	; (806235c <startRxDataThread+0x1b0>)
 80621c8:	4865      	ldr	r0, [pc, #404]	; (8062360 <startRxDataThread+0x1b4>)
 80621ca:	f011 fa1d 	bl	8073608 <siprintf>
 80621ce:	4864      	ldr	r0, [pc, #400]	; (8062360 <startRxDataThread+0x1b4>)
 80621d0:	f7fe f810 	bl	80601f4 <strlen>
 80621d4:	4603      	mov	r3, r0
 80621d6:	b29a      	uxth	r2, r3
 80621d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80621dc:	4960      	ldr	r1, [pc, #384]	; (8062360 <startRxDataThread+0x1b4>)
 80621de:	4861      	ldr	r0, [pc, #388]	; (8062364 <startRxDataThread+0x1b8>)
 80621e0:	f007 fbb8 	bl	8069954 <HAL_UART_Transmit>

	  status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80621e4:	4b60      	ldr	r3, [pc, #384]	; (8062368 <startRxDataThread+0x1bc>)
 80621e6:	681b      	ldr	r3, [r3, #0]
 80621e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80621ec:	4618      	mov	r0, r3
 80621ee:	f00c fa59 	bl	806e6a4 <osMutexAcquire>
 80621f2:	4603      	mov	r3, r0
 80621f4:	4a5d      	ldr	r2, [pc, #372]	; (806236c <startRxDataThread+0x1c0>)
 80621f6:	6013      	str	r3, [r2, #0]
	  if (status != osOK) {
 80621f8:	4b5c      	ldr	r3, [pc, #368]	; (806236c <startRxDataThread+0x1c0>)
 80621fa:	681b      	ldr	r3, [r3, #0]
 80621fc:	2b00      	cmp	r3, #0
 80621fe:	d00f      	beq.n	8062220 <startRxDataThread+0x74>
		  myprintf("Could not take mutex for writing into file");
 8062200:	495b      	ldr	r1, [pc, #364]	; (8062370 <startRxDataThread+0x1c4>)
 8062202:	4857      	ldr	r0, [pc, #348]	; (8062360 <startRxDataThread+0x1b4>)
 8062204:	f011 fa00 	bl	8073608 <siprintf>
 8062208:	4855      	ldr	r0, [pc, #340]	; (8062360 <startRxDataThread+0x1b4>)
 806220a:	f7fd fff3 	bl	80601f4 <strlen>
 806220e:	4603      	mov	r3, r0
 8062210:	b29a      	uxth	r2, r3
 8062212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062216:	4952      	ldr	r1, [pc, #328]	; (8062360 <startRxDataThread+0x1b4>)
 8062218:	4852      	ldr	r0, [pc, #328]	; (8062364 <startRxDataThread+0x1b8>)
 806221a:	f007 fb9b 	bl	8069954 <HAL_UART_Transmit>
 806221e:	e07b      	b.n	8062318 <startRxDataThread+0x16c>
	  } else {
		  wr = f_open(&firmwareFile, "f.bin", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8062220:	221a      	movs	r2, #26
 8062222:	4954      	ldr	r1, [pc, #336]	; (8062374 <startRxDataThread+0x1c8>)
 8062224:	4854      	ldr	r0, [pc, #336]	; (8062378 <startRxDataThread+0x1cc>)
 8062226:	f00a ffab 	bl	806d180 <f_open>
 806222a:	4603      	mov	r3, r0
 806222c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  osMutexRelease(telemetryFileMutexHandle);
 8062230:	4b4d      	ldr	r3, [pc, #308]	; (8062368 <startRxDataThread+0x1bc>)
 8062232:	681b      	ldr	r3, [r3, #0]
 8062234:	4618      	mov	r0, r3
 8062236:	f00c fa80 	bl	806e73a <osMutexRelease>

		  if(wr != FR_OK) {
 806223a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 806223e:	2b00      	cmp	r3, #0
 8062240:	d012      	beq.n	8062268 <startRxDataThread+0xbc>
			  myprintf("f_open error (%i)\n", wr);
 8062242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8062246:	461a      	mov	r2, r3
 8062248:	494c      	ldr	r1, [pc, #304]	; (806237c <startRxDataThread+0x1d0>)
 806224a:	4845      	ldr	r0, [pc, #276]	; (8062360 <startRxDataThread+0x1b4>)
 806224c:	f011 f9dc 	bl	8073608 <siprintf>
 8062250:	4843      	ldr	r0, [pc, #268]	; (8062360 <startRxDataThread+0x1b4>)
 8062252:	f7fd ffcf 	bl	80601f4 <strlen>
 8062256:	4603      	mov	r3, r0
 8062258:	b29a      	uxth	r2, r3
 806225a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806225e:	4940      	ldr	r1, [pc, #256]	; (8062360 <startRxDataThread+0x1b4>)
 8062260:	4840      	ldr	r0, [pc, #256]	; (8062364 <startRxDataThread+0x1b8>)
 8062262:	f007 fb77 	bl	8069954 <HAL_UART_Transmit>
 8062266:	e057      	b.n	8062318 <startRxDataThread+0x16c>
		  } else {
			  for (;;) {
				  memset(firmwareChunk, 0, sizeof(firmwareChunk));
 8062268:	f107 0308 	add.w	r3, r7, #8
 806226c:	2210      	movs	r2, #16
 806226e:	2100      	movs	r1, #0
 8062270:	4618      	mov	r0, r3
 8062272:	f010 fa6c 	bl	807274e <memset>
				  HAL_UART_Receive(&huart2, firmwareChunk, 4, HAL_MAX_DELAY);
 8062276:	f107 0108 	add.w	r1, r7, #8
 806227a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806227e:	2204      	movs	r2, #4
 8062280:	4838      	ldr	r0, [pc, #224]	; (8062364 <startRxDataThread+0x1b8>)
 8062282:	f007 fbf9 	bl	8069a78 <HAL_UART_Receive>
				  cmpRes = strcmp(firmwareChunk, "$END");
 8062286:	f107 0308 	add.w	r3, r7, #8
 806228a:	493d      	ldr	r1, [pc, #244]	; (8062380 <startRxDataThread+0x1d4>)
 806228c:	4618      	mov	r0, r3
 806228e:	f7fd ffa7 	bl	80601e0 <strcmp>
 8062292:	61f8      	str	r0, [r7, #28]
				  if (cmpRes == 0) {
 8062294:	69fb      	ldr	r3, [r7, #28]
 8062296:	2b00      	cmp	r3, #0
 8062298:	d102      	bne.n	80622a0 <startRxDataThread+0xf4>
					  safeToBoot = 1;
 806229a:	2301      	movs	r3, #1
 806229c:	627b      	str	r3, [r7, #36]	; 0x24
					  break;
 806229e:	e02c      	b.n	80622fa <startRxDataThread+0x14e>
				  }

				  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80622a0:	4b31      	ldr	r3, [pc, #196]	; (8062368 <startRxDataThread+0x1bc>)
 80622a2:	681b      	ldr	r3, [r3, #0]
 80622a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80622a8:	4618      	mov	r0, r3
 80622aa:	f00c f9fb 	bl	806e6a4 <osMutexAcquire>
				  wr = f_write(&firmwareFile, firmwareChunk, 4, &bytesWrote);
 80622ae:	f107 0318 	add.w	r3, r7, #24
 80622b2:	f107 0108 	add.w	r1, r7, #8
 80622b6:	2204      	movs	r2, #4
 80622b8:	482f      	ldr	r0, [pc, #188]	; (8062378 <startRxDataThread+0x1cc>)
 80622ba:	f00b fa94 	bl	806d7e6 <f_write>
 80622be:	4603      	mov	r3, r0
 80622c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				  osMutexRelease(telemetryFileMutexHandle);
 80622c4:	4b28      	ldr	r3, [pc, #160]	; (8062368 <startRxDataThread+0x1bc>)
 80622c6:	681b      	ldr	r3, [r3, #0]
 80622c8:	4618      	mov	r0, r3
 80622ca:	f00c fa36 	bl	806e73a <osMutexRelease>

				  if (wr != FR_OK) {
 80622ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80622d2:	2b00      	cmp	r3, #0
 80622d4:	d0c8      	beq.n	8062268 <startRxDataThread+0xbc>
					  myprintf("[ERROR]: f_write firmware (%d)\n", wr);
 80622d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80622da:	461a      	mov	r2, r3
 80622dc:	4929      	ldr	r1, [pc, #164]	; (8062384 <startRxDataThread+0x1d8>)
 80622de:	4820      	ldr	r0, [pc, #128]	; (8062360 <startRxDataThread+0x1b4>)
 80622e0:	f011 f992 	bl	8073608 <siprintf>
 80622e4:	481e      	ldr	r0, [pc, #120]	; (8062360 <startRxDataThread+0x1b4>)
 80622e6:	f7fd ff85 	bl	80601f4 <strlen>
 80622ea:	4603      	mov	r3, r0
 80622ec:	b29a      	uxth	r2, r3
 80622ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80622f2:	491b      	ldr	r1, [pc, #108]	; (8062360 <startRxDataThread+0x1b4>)
 80622f4:	481b      	ldr	r0, [pc, #108]	; (8062364 <startRxDataThread+0x1b8>)
 80622f6:	f007 fb2d 	bl	8069954 <HAL_UART_Transmit>
					  break;
				  }
			  }


			  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80622fa:	4b1b      	ldr	r3, [pc, #108]	; (8062368 <startRxDataThread+0x1bc>)
 80622fc:	681b      	ldr	r3, [r3, #0]
 80622fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8062302:	4618      	mov	r0, r3
 8062304:	f00c f9ce 	bl	806e6a4 <osMutexAcquire>
			  f_close(&firmwareFile);
 8062308:	481b      	ldr	r0, [pc, #108]	; (8062378 <startRxDataThread+0x1cc>)
 806230a:	f00b fc99 	bl	806dc40 <f_close>
			  osMutexRelease(telemetryFileMutexHandle);
 806230e:	4b16      	ldr	r3, [pc, #88]	; (8062368 <startRxDataThread+0x1bc>)
 8062310:	681b      	ldr	r3, [r3, #0]
 8062312:	4618      	mov	r0, r3
 8062314:	f00c fa11 	bl	806e73a <osMutexRelease>
		  }
	  }

	 if (safeToBoot) {
 8062318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806231a:	2b00      	cmp	r3, #0
 806231c:	d015      	beq.n	806234a <startRxDataThread+0x19e>
		 // toglle boot pin and software reset
		 HAL_PWR_EnableBkUpAccess();
 806231e:	f005 f959 	bl	80675d4 <HAL_PWR_EnableBkUpAccess>
		 HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 1);
 8062322:	2201      	movs	r2, #1
 8062324:	2101      	movs	r1, #1
 8062326:	4818      	ldr	r0, [pc, #96]	; (8062388 <startRxDataThread+0x1dc>)
 8062328:	f006 fac8 	bl	80688bc <HAL_RTCEx_BKUPWrite>
		 HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, 0);
 806232c:	2200      	movs	r2, #0
 806232e:	2102      	movs	r1, #2
 8062330:	4815      	ldr	r0, [pc, #84]	; (8062388 <startRxDataThread+0x1dc>)
 8062332:	f006 fac3 	bl	80688bc <HAL_RTCEx_BKUPWrite>
		 HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, 1);
 8062336:	2201      	movs	r2, #1
 8062338:	2103      	movs	r1, #3
 806233a:	4813      	ldr	r0, [pc, #76]	; (8062388 <startRxDataThread+0x1dc>)
 806233c:	f006 fabe 	bl	80688bc <HAL_RTCEx_BKUPWrite>
		 HAL_PWR_DisableBkUpAccess();
 8062340:	f005 f95c 	bl	80675fc <HAL_PWR_DisableBkUpAccess>

		 HAL_NVIC_SystemReset();
 8062344:	f002 fc08 	bl	8064b58 <HAL_NVIC_SystemReset>
 8062348:	e736      	b.n	80621b8 <startRxDataThread+0xc>
	 } else {
		 // try one more time
		 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 806234a:	2201      	movs	r2, #1
 806234c:	490f      	ldr	r1, [pc, #60]	; (806238c <startRxDataThread+0x1e0>)
 806234e:	4805      	ldr	r0, [pc, #20]	; (8062364 <startRxDataThread+0x1b8>)
 8062350:	f007 fc34 	bl	8069bbc <HAL_UART_Receive_IT>
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 8062354:	e730      	b.n	80621b8 <startRxDataThread+0xc>
 8062356:	bf00      	nop
 8062358:	20005228 	.word	0x20005228
 806235c:	08077024 	.word	0x08077024
 8062360:	2000021c 	.word	0x2000021c
 8062364:	20005828 	.word	0x20005828
 8062368:	2000522c 	.word	0x2000522c
 806236c:	200056b8 	.word	0x200056b8
 8062370:	08077040 	.word	0x08077040
 8062374:	0807706c 	.word	0x0807706c
 8062378:	20005488 	.word	0x20005488
 806237c:	08077074 	.word	0x08077074
 8062380:	08077088 	.word	0x08077088
 8062384:	08077090 	.word	0x08077090
 8062388:	20005710 	.word	0x20005710
 806238c:	20004e30 	.word	0x20004e30

08062390 <startTxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTxDataThread */
void startTxDataThread(void *argument)
{
 8062390:	b580      	push	{r7, lr}
 8062392:	b08c      	sub	sp, #48	; 0x30
 8062394:	af00      	add	r7, sp, #0
 8062396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTxDataThread */
	FRESULT rr;
	// TODO: get rid of magic constants
	BYTE rbuf[32] = {0};
 8062398:	2300      	movs	r3, #0
 806239a:	60fb      	str	r3, [r7, #12]
 806239c:	f107 0310 	add.w	r3, r7, #16
 80623a0:	2200      	movs	r2, #0
 80623a2:	601a      	str	r2, [r3, #0]
 80623a4:	605a      	str	r2, [r3, #4]
 80623a6:	609a      	str	r2, [r3, #8]
 80623a8:	60da      	str	r2, [r3, #12]
 80623aa:	611a      	str	r2, [r3, #16]
 80623ac:	615a      	str	r2, [r3, #20]
 80623ae:	619a      	str	r2, [r3, #24]
  /* Infinite loop */
  for(;;)
  {
	  status = osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 80623b0:	4b4d      	ldr	r3, [pc, #308]	; (80624e8 <startTxDataThread+0x158>)
 80623b2:	681b      	ldr	r3, [r3, #0]
 80623b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80623b8:	4618      	mov	r0, r3
 80623ba:	f00c fa85 	bl	806e8c8 <osSemaphoreAcquire>
 80623be:	4603      	mov	r3, r0
 80623c0:	4a4a      	ldr	r2, [pc, #296]	; (80624ec <startTxDataThread+0x15c>)
 80623c2:	6013      	str	r3, [r2, #0]
	  myprintf("[INFO]: txDataThread : sem acquire : (%d)\n", status);
 80623c4:	4b49      	ldr	r3, [pc, #292]	; (80624ec <startTxDataThread+0x15c>)
 80623c6:	681b      	ldr	r3, [r3, #0]
 80623c8:	461a      	mov	r2, r3
 80623ca:	4949      	ldr	r1, [pc, #292]	; (80624f0 <startTxDataThread+0x160>)
 80623cc:	4849      	ldr	r0, [pc, #292]	; (80624f4 <startTxDataThread+0x164>)
 80623ce:	f011 f91b 	bl	8073608 <siprintf>
 80623d2:	4848      	ldr	r0, [pc, #288]	; (80624f4 <startTxDataThread+0x164>)
 80623d4:	f7fd ff0e 	bl	80601f4 <strlen>
 80623d8:	4603      	mov	r3, r0
 80623da:	b29a      	uxth	r2, r3
 80623dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80623e0:	4944      	ldr	r1, [pc, #272]	; (80624f4 <startTxDataThread+0x164>)
 80623e2:	4845      	ldr	r0, [pc, #276]	; (80624f8 <startTxDataThread+0x168>)
 80623e4:	f007 fab6 	bl	8069954 <HAL_UART_Transmit>

	  // there is no need to take mutex, as currenlty this is the only task
	  // that actually uses uart (if we omit the debug part)

	  // read from sd and write the info into uart (mock gprs)
	  status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80623e8:	4b44      	ldr	r3, [pc, #272]	; (80624fc <startTxDataThread+0x16c>)
 80623ea:	681b      	ldr	r3, [r3, #0]
 80623ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80623f0:	4618      	mov	r0, r3
 80623f2:	f00c f957 	bl	806e6a4 <osMutexAcquire>
 80623f6:	4603      	mov	r3, r0
 80623f8:	4a3c      	ldr	r2, [pc, #240]	; (80624ec <startTxDataThread+0x15c>)
 80623fa:	6013      	str	r3, [r2, #0]
	  if (status != osOK) {
 80623fc:	4b3b      	ldr	r3, [pc, #236]	; (80624ec <startTxDataThread+0x15c>)
 80623fe:	681b      	ldr	r3, [r3, #0]
 8062400:	2b00      	cmp	r3, #0
 8062402:	d00f      	beq.n	8062424 <startTxDataThread+0x94>
		  myprintf("Could not take mutex for reading into file");
 8062404:	493e      	ldr	r1, [pc, #248]	; (8062500 <startTxDataThread+0x170>)
 8062406:	483b      	ldr	r0, [pc, #236]	; (80624f4 <startTxDataThread+0x164>)
 8062408:	f011 f8fe 	bl	8073608 <siprintf>
 806240c:	4839      	ldr	r0, [pc, #228]	; (80624f4 <startTxDataThread+0x164>)
 806240e:	f7fd fef1 	bl	80601f4 <strlen>
 8062412:	4603      	mov	r3, r0
 8062414:	b29a      	uxth	r2, r3
 8062416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806241a:	4936      	ldr	r1, [pc, #216]	; (80624f4 <startTxDataThread+0x164>)
 806241c:	4836      	ldr	r0, [pc, #216]	; (80624f8 <startTxDataThread+0x168>)
 806241e:	f007 fa99 	bl	8069954 <HAL_UART_Transmit>
 8062422:	e05a      	b.n	80624da <startTxDataThread+0x14a>
	  } else {
		  rr = f_open(&telemetryFile, "write.txt", FA_READ);
 8062424:	2201      	movs	r2, #1
 8062426:	4937      	ldr	r1, [pc, #220]	; (8062504 <startTxDataThread+0x174>)
 8062428:	4837      	ldr	r0, [pc, #220]	; (8062508 <startTxDataThread+0x178>)
 806242a:	f00a fea9 	bl	806d180 <f_open>
 806242e:	4603      	mov	r3, r0
 8062430:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		  if(rr != FR_OK) {
 8062434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8062438:	2b00      	cmp	r3, #0
 806243a:	d017      	beq.n	806246c <startTxDataThread+0xdc>
			  osMutexRelease(telemetryFileMutexHandle);
 806243c:	4b2f      	ldr	r3, [pc, #188]	; (80624fc <startTxDataThread+0x16c>)
 806243e:	681b      	ldr	r3, [r3, #0]
 8062440:	4618      	mov	r0, r3
 8062442:	f00c f97a 	bl	806e73a <osMutexRelease>
			  myprintf("[ERROR]: (reading) f_open (%i)\n", rr);
 8062446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806244a:	461a      	mov	r2, r3
 806244c:	492f      	ldr	r1, [pc, #188]	; (806250c <startTxDataThread+0x17c>)
 806244e:	4829      	ldr	r0, [pc, #164]	; (80624f4 <startTxDataThread+0x164>)
 8062450:	f011 f8da 	bl	8073608 <siprintf>
 8062454:	4827      	ldr	r0, [pc, #156]	; (80624f4 <startTxDataThread+0x164>)
 8062456:	f7fd fecd 	bl	80601f4 <strlen>
 806245a:	4603      	mov	r3, r0
 806245c:	b29a      	uxth	r2, r3
 806245e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062462:	4924      	ldr	r1, [pc, #144]	; (80624f4 <startTxDataThread+0x164>)
 8062464:	4824      	ldr	r0, [pc, #144]	; (80624f8 <startTxDataThread+0x168>)
 8062466:	f007 fa75 	bl	8069954 <HAL_UART_Transmit>
 806246a:	e036      	b.n	80624da <startTxDataThread+0x14a>
		  } else {
			  // TODO: do we really need this one here ?
			  // f_lseek(&telemetryFile, 0);

			  unsigned int bytesRead = 1;
 806246c:	2301      	movs	r3, #1
 806246e:	60bb      	str	r3, [r7, #8]
		  	  while (bytesRead != 0) {
 8062470:	e025      	b.n	80624be <startTxDataThread+0x12e>
			  	  f_read(&telemetryFile, &rbuf, sizeof(rbuf), &bytesRead);
 8062472:	f107 0308 	add.w	r3, r7, #8
 8062476:	f107 010c 	add.w	r1, r7, #12
 806247a:	2220      	movs	r2, #32
 806247c:	4822      	ldr	r0, [pc, #136]	; (8062508 <startTxDataThread+0x178>)
 806247e:	f00b f844 	bl	806d50a <f_read>
			  	  osMutexRelease(telemetryFileMutexHandle);
 8062482:	4b1e      	ldr	r3, [pc, #120]	; (80624fc <startTxDataThread+0x16c>)
 8062484:	681b      	ldr	r3, [r3, #0]
 8062486:	4618      	mov	r0, r3
 8062488:	f00c f957 	bl	806e73a <osMutexRelease>
			  	  myprintf("[READ]: %s\n", rbuf);
 806248c:	f107 030c 	add.w	r3, r7, #12
 8062490:	461a      	mov	r2, r3
 8062492:	491f      	ldr	r1, [pc, #124]	; (8062510 <startTxDataThread+0x180>)
 8062494:	4817      	ldr	r0, [pc, #92]	; (80624f4 <startTxDataThread+0x164>)
 8062496:	f011 f8b7 	bl	8073608 <siprintf>
 806249a:	4816      	ldr	r0, [pc, #88]	; (80624f4 <startTxDataThread+0x164>)
 806249c:	f7fd feaa 	bl	80601f4 <strlen>
 80624a0:	4603      	mov	r3, r0
 80624a2:	b29a      	uxth	r2, r3
 80624a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80624a8:	4912      	ldr	r1, [pc, #72]	; (80624f4 <startTxDataThread+0x164>)
 80624aa:	4813      	ldr	r0, [pc, #76]	; (80624f8 <startTxDataThread+0x168>)
 80624ac:	f007 fa52 	bl	8069954 <HAL_UART_Transmit>
			  	  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80624b0:	4b12      	ldr	r3, [pc, #72]	; (80624fc <startTxDataThread+0x16c>)
 80624b2:	681b      	ldr	r3, [r3, #0]
 80624b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80624b8:	4618      	mov	r0, r3
 80624ba:	f00c f8f3 	bl	806e6a4 <osMutexAcquire>
		  	  while (bytesRead != 0) {
 80624be:	68bb      	ldr	r3, [r7, #8]
 80624c0:	2b00      	cmp	r3, #0
 80624c2:	d1d6      	bne.n	8062472 <startTxDataThread+0xe2>
		  	  }

		  	  f_close(&telemetryFile);
 80624c4:	4810      	ldr	r0, [pc, #64]	; (8062508 <startTxDataThread+0x178>)
 80624c6:	f00b fbbb 	bl	806dc40 <f_close>
		  	  f_unlink("write.txt");
 80624ca:	480e      	ldr	r0, [pc, #56]	; (8062504 <startTxDataThread+0x174>)
 80624cc:	f00b fbe7 	bl	806dc9e <f_unlink>

		  	  osMutexRelease(telemetryFileMutexHandle);
 80624d0:	4b0a      	ldr	r3, [pc, #40]	; (80624fc <startTxDataThread+0x16c>)
 80624d2:	681b      	ldr	r3, [r3, #0]
 80624d4:	4618      	mov	r0, r3
 80624d6:	f00c f930 	bl	806e73a <osMutexRelease>
		  }
	  }

	  HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 80624da:	2201      	movs	r2, #1
 80624dc:	490d      	ldr	r1, [pc, #52]	; (8062514 <startTxDataThread+0x184>)
 80624de:	4806      	ldr	r0, [pc, #24]	; (80624f8 <startTxDataThread+0x168>)
 80624e0:	f007 fb6c 	bl	8069bbc <HAL_UART_Receive_IT>
	  status = osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 80624e4:	e764      	b.n	80623b0 <startTxDataThread+0x20>
 80624e6:	bf00      	nop
 80624e8:	20005478 	.word	0x20005478
 80624ec:	200056b8 	.word	0x200056b8
 80624f0:	080770b0 	.word	0x080770b0
 80624f4:	2000021c 	.word	0x2000021c
 80624f8:	20005828 	.word	0x20005828
 80624fc:	2000522c 	.word	0x2000522c
 8062500:	080770dc 	.word	0x080770dc
 8062504:	08077108 	.word	0x08077108
 8062508:	20005244 	.word	0x20005244
 806250c:	08077114 	.word	0x08077114
 8062510:	08077134 	.word	0x08077134
 8062514:	20004e30 	.word	0x20004e30

08062518 <startTelemetryThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTelemetryThread */
void startTelemetryThread(void *argument)
{
 8062518:	b5b0      	push	{r4, r5, r7, lr}
 806251a:	b0b6      	sub	sp, #216	; 0xd8
 806251c:	af04      	add	r7, sp, #16
 806251e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTelemetryThread */
  TelemetryBase tb;
  FRESULT wr;
  // TODO: get rid of magic constant
  BYTE wbuf[128] = {0};
 8062520:	2300      	movs	r3, #0
 8062522:	60fb      	str	r3, [r7, #12]
 8062524:	f107 0310 	add.w	r3, r7, #16
 8062528:	227c      	movs	r2, #124	; 0x7c
 806252a:	2100      	movs	r1, #0
 806252c:	4618      	mov	r0, r3
 806252e:	f010 f90e 	bl	807274e <memset>

  /* Infinite loop */
  for(;;)
  {
	 status = osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 8062532:	4b62      	ldr	r3, [pc, #392]	; (80626bc <startTelemetryThread+0x1a4>)
 8062534:	6818      	ldr	r0, [r3, #0]
 8062536:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 806253a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806253e:	2200      	movs	r2, #0
 8062540:	f00c fb50 	bl	806ebe4 <osMessageQueueGet>
 8062544:	4603      	mov	r3, r0
 8062546:	4a5e      	ldr	r2, [pc, #376]	; (80626c0 <startTelemetryThread+0x1a8>)
 8062548:	6013      	str	r3, [r2, #0]
	 if (status == osOK) {
 806254a:	4b5d      	ldr	r3, [pc, #372]	; (80626c0 <startTelemetryThread+0x1a8>)
 806254c:	681b      	ldr	r3, [r3, #0]
 806254e:	2b00      	cmp	r3, #0
 8062550:	d1ef      	bne.n	8062532 <startTelemetryThread+0x1a>
		 // write into sd card

		 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
				 tb.id, tb.data_size, tb.data[0],
 8062552:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
		 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
 8062556:	461d      	mov	r5, r3
 8062558:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 806255c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8062560:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8062564:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8062568:	f107 000c 	add.w	r0, r7, #12
 806256c:	9102      	str	r1, [sp, #8]
 806256e:	9201      	str	r2, [sp, #4]
 8062570:	9300      	str	r3, [sp, #0]
 8062572:	4623      	mov	r3, r4
 8062574:	462a      	mov	r2, r5
 8062576:	4953      	ldr	r1, [pc, #332]	; (80626c4 <startTelemetryThread+0x1ac>)
 8062578:	f011 f846 	bl	8073608 <siprintf>
				 tb.data[1], tb.data[2]);
		 myprintf("Writing following string to sd: %s", wbuf);
 806257c:	f107 030c 	add.w	r3, r7, #12
 8062580:	461a      	mov	r2, r3
 8062582:	4951      	ldr	r1, [pc, #324]	; (80626c8 <startTelemetryThread+0x1b0>)
 8062584:	4851      	ldr	r0, [pc, #324]	; (80626cc <startTelemetryThread+0x1b4>)
 8062586:	f011 f83f 	bl	8073608 <siprintf>
 806258a:	4850      	ldr	r0, [pc, #320]	; (80626cc <startTelemetryThread+0x1b4>)
 806258c:	f7fd fe32 	bl	80601f4 <strlen>
 8062590:	4603      	mov	r3, r0
 8062592:	b29a      	uxth	r2, r3
 8062594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062598:	494c      	ldr	r1, [pc, #304]	; (80626cc <startTelemetryThread+0x1b4>)
 806259a:	484d      	ldr	r0, [pc, #308]	; (80626d0 <startTelemetryThread+0x1b8>)
 806259c:	f007 f9da 	bl	8069954 <HAL_UART_Transmit>


		 // TODO: add mutex here
		 status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80625a0:	4b4c      	ldr	r3, [pc, #304]	; (80626d4 <startTelemetryThread+0x1bc>)
 80625a2:	681b      	ldr	r3, [r3, #0]
 80625a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80625a8:	4618      	mov	r0, r3
 80625aa:	f00c f87b 	bl	806e6a4 <osMutexAcquire>
 80625ae:	4603      	mov	r3, r0
 80625b0:	4a43      	ldr	r2, [pc, #268]	; (80626c0 <startTelemetryThread+0x1a8>)
 80625b2:	6013      	str	r3, [r2, #0]
		 if (status != osOK) {
 80625b4:	4b42      	ldr	r3, [pc, #264]	; (80626c0 <startTelemetryThread+0x1a8>)
 80625b6:	681b      	ldr	r3, [r3, #0]
 80625b8:	2b00      	cmp	r3, #0
 80625ba:	d00f      	beq.n	80625dc <startTelemetryThread+0xc4>
			 myprintf("Could not take mutex for writing into file");
 80625bc:	4946      	ldr	r1, [pc, #280]	; (80626d8 <startTelemetryThread+0x1c0>)
 80625be:	4843      	ldr	r0, [pc, #268]	; (80626cc <startTelemetryThread+0x1b4>)
 80625c0:	f011 f822 	bl	8073608 <siprintf>
 80625c4:	4841      	ldr	r0, [pc, #260]	; (80626cc <startTelemetryThread+0x1b4>)
 80625c6:	f7fd fe15 	bl	80601f4 <strlen>
 80625ca:	4603      	mov	r3, r0
 80625cc:	b29a      	uxth	r2, r3
 80625ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80625d2:	493e      	ldr	r1, [pc, #248]	; (80626cc <startTelemetryThread+0x1b4>)
 80625d4:	483e      	ldr	r0, [pc, #248]	; (80626d0 <startTelemetryThread+0x1b8>)
 80625d6:	f007 f9bd 	bl	8069954 <HAL_UART_Transmit>
 80625da:	e068      	b.n	80626ae <startTelemetryThread+0x196>
		 } else {
		 	 wr = f_open(&telemetryFile, "write.txt", FA_OPEN_APPEND | FA_WRITE | FA_OPEN_ALWAYS);
 80625dc:	2232      	movs	r2, #50	; 0x32
 80625de:	493f      	ldr	r1, [pc, #252]	; (80626dc <startTelemetryThread+0x1c4>)
 80625e0:	483f      	ldr	r0, [pc, #252]	; (80626e0 <startTelemetryThread+0x1c8>)
 80625e2:	f00a fdcd 	bl	806d180 <f_open>
 80625e6:	4603      	mov	r3, r0
 80625e8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7


		 	 if(wr == FR_OK) {
 80625ec:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80625f0:	2b00      	cmp	r3, #0
 80625f2:	d110      	bne.n	8062616 <startTelemetryThread+0xfe>
		 		 myprintf("I was able to open '%s' for writing\n", TELEMETRY_FILE);
 80625f4:	4a3b      	ldr	r2, [pc, #236]	; (80626e4 <startTelemetryThread+0x1cc>)
 80625f6:	493c      	ldr	r1, [pc, #240]	; (80626e8 <startTelemetryThread+0x1d0>)
 80625f8:	4834      	ldr	r0, [pc, #208]	; (80626cc <startTelemetryThread+0x1b4>)
 80625fa:	f011 f805 	bl	8073608 <siprintf>
 80625fe:	4833      	ldr	r0, [pc, #204]	; (80626cc <startTelemetryThread+0x1b4>)
 8062600:	f7fd fdf8 	bl	80601f4 <strlen>
 8062604:	4603      	mov	r3, r0
 8062606:	b29a      	uxth	r2, r3
 8062608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806260c:	492f      	ldr	r1, [pc, #188]	; (80626cc <startTelemetryThread+0x1b4>)
 806260e:	4830      	ldr	r0, [pc, #192]	; (80626d0 <startTelemetryThread+0x1b8>)
 8062610:	f007 f9a0 	bl	8069954 <HAL_UART_Transmit>
 8062614:	e011      	b.n	806263a <startTelemetryThread+0x122>
		 	 } else {
		 		 myprintf("f_open error (%i)\n", wr);
 8062616:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 806261a:	461a      	mov	r2, r3
 806261c:	4933      	ldr	r1, [pc, #204]	; (80626ec <startTelemetryThread+0x1d4>)
 806261e:	482b      	ldr	r0, [pc, #172]	; (80626cc <startTelemetryThread+0x1b4>)
 8062620:	f010 fff2 	bl	8073608 <siprintf>
 8062624:	4829      	ldr	r0, [pc, #164]	; (80626cc <startTelemetryThread+0x1b4>)
 8062626:	f7fd fde5 	bl	80601f4 <strlen>
 806262a:	4603      	mov	r3, r0
 806262c:	b29a      	uxth	r2, r3
 806262e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062632:	4926      	ldr	r1, [pc, #152]	; (80626cc <startTelemetryThread+0x1b4>)
 8062634:	4826      	ldr	r0, [pc, #152]	; (80626d0 <startTelemetryThread+0x1b8>)
 8062636:	f007 f98d 	bl	8069954 <HAL_UART_Transmit>
		 	 }


		 	 UINT bytesWrote;
		 	 // TODO: and also I assume we should add mutex here
		 	 wr = f_write(&telemetryFile, wbuf, strlen(wbuf), &bytesWrote);
 806263a:	f107 030c 	add.w	r3, r7, #12
 806263e:	4618      	mov	r0, r3
 8062640:	f7fd fdd8 	bl	80601f4 <strlen>
 8062644:	4602      	mov	r2, r0
 8062646:	f107 0308 	add.w	r3, r7, #8
 806264a:	f107 010c 	add.w	r1, r7, #12
 806264e:	4824      	ldr	r0, [pc, #144]	; (80626e0 <startTelemetryThread+0x1c8>)
 8062650:	f00b f8c9 	bl	806d7e6 <f_write>
 8062654:	4603      	mov	r3, r0
 8062656:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		 	 if(wr == FR_OK) {
 806265a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 806265e:	2b00      	cmp	r3, #0
 8062660:	d111      	bne.n	8062686 <startTelemetryThread+0x16e>
		 		 myprintf("Wrote %i bytes to 'write.txt'!\n", bytesWrote);
 8062662:	68bb      	ldr	r3, [r7, #8]
 8062664:	461a      	mov	r2, r3
 8062666:	4922      	ldr	r1, [pc, #136]	; (80626f0 <startTelemetryThread+0x1d8>)
 8062668:	4818      	ldr	r0, [pc, #96]	; (80626cc <startTelemetryThread+0x1b4>)
 806266a:	f010 ffcd 	bl	8073608 <siprintf>
 806266e:	4817      	ldr	r0, [pc, #92]	; (80626cc <startTelemetryThread+0x1b4>)
 8062670:	f7fd fdc0 	bl	80601f4 <strlen>
 8062674:	4603      	mov	r3, r0
 8062676:	b29a      	uxth	r2, r3
 8062678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806267c:	4913      	ldr	r1, [pc, #76]	; (80626cc <startTelemetryThread+0x1b4>)
 806267e:	4814      	ldr	r0, [pc, #80]	; (80626d0 <startTelemetryThread+0x1b8>)
 8062680:	f007 f968 	bl	8069954 <HAL_UART_Transmit>
 8062684:	e010      	b.n	80626a8 <startTelemetryThread+0x190>
		 	 } else {
		 		 myprintf("f_write error (%d)\n", (int) bytesWrote);
 8062686:	68bb      	ldr	r3, [r7, #8]
 8062688:	461a      	mov	r2, r3
 806268a:	491a      	ldr	r1, [pc, #104]	; (80626f4 <startTelemetryThread+0x1dc>)
 806268c:	480f      	ldr	r0, [pc, #60]	; (80626cc <startTelemetryThread+0x1b4>)
 806268e:	f010 ffbb 	bl	8073608 <siprintf>
 8062692:	480e      	ldr	r0, [pc, #56]	; (80626cc <startTelemetryThread+0x1b4>)
 8062694:	f7fd fdae 	bl	80601f4 <strlen>
 8062698:	4603      	mov	r3, r0
 806269a:	b29a      	uxth	r2, r3
 806269c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80626a0:	490a      	ldr	r1, [pc, #40]	; (80626cc <startTelemetryThread+0x1b4>)
 80626a2:	480b      	ldr	r0, [pc, #44]	; (80626d0 <startTelemetryThread+0x1b8>)
 80626a4:	f007 f956 	bl	8069954 <HAL_UART_Transmit>
		 	 }

		 	 f_close(&telemetryFile);
 80626a8:	480d      	ldr	r0, [pc, #52]	; (80626e0 <startTelemetryThread+0x1c8>)
 80626aa:	f00b fac9 	bl	806dc40 <f_close>
	 	 }

		 osMutexRelease(telemetryFileMutexHandle);
 80626ae:	4b09      	ldr	r3, [pc, #36]	; (80626d4 <startTelemetryThread+0x1bc>)
 80626b0:	681b      	ldr	r3, [r3, #0]
 80626b2:	4618      	mov	r0, r3
 80626b4:	f00c f841 	bl	806e73a <osMutexRelease>
	 status = osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 80626b8:	e73b      	b.n	8062532 <startTelemetryThread+0x1a>
 80626ba:	bf00      	nop
 80626bc:	2000523c 	.word	0x2000523c
 80626c0:	200056b8 	.word	0x200056b8
 80626c4:	08077140 	.word	0x08077140
 80626c8:	08077164 	.word	0x08077164
 80626cc:	2000021c 	.word	0x2000021c
 80626d0:	20005828 	.word	0x20005828
 80626d4:	2000522c 	.word	0x2000522c
 80626d8:	08077040 	.word	0x08077040
 80626dc:	08077108 	.word	0x08077108
 80626e0:	20005244 	.word	0x20005244
 80626e4:	08077188 	.word	0x08077188
 80626e8:	08077198 	.word	0x08077198
 80626ec:	08077074 	.word	0x08077074
 80626f0:	080771c0 	.word	0x080771c0
 80626f4:	080771e0 	.word	0x080771e0

080626f8 <startPeripheryThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPeripheryThread */
void startPeripheryThread(void *argument)
{
 80626f8:	b580      	push	{r7, lr}
 80626fa:	b098      	sub	sp, #96	; 0x60
 80626fc:	af00      	add	r7, sp, #0
 80626fe:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  osThreadFlagsWait(0x11111111U, osFlagsNoClear, osWaitForever);
 8062700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8062704:	2102      	movs	r1, #2
 8062706:	f04f 3011 	mov.w	r0, #286331153	; 0x11111111
 806270a:	f00b fdea 	bl	806e2e2 <osThreadFlagsWait>
	  flags = osThreadFlagsGet();
 806270e:	f00b fdc7 	bl	806e2a0 <osThreadFlagsGet>
 8062712:	65f8      	str	r0, [r7, #92]	; 0x5c
	  osThreadFlagsClear(flags);
 8062714:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8062716:	f00b fd85 	bl	806e224 <osThreadFlagsClear>

	  switch (flags) {
 806271a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 806271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8062720:	f000 80a0 	beq.w	8062864 <startPeripheryThread+0x16c>
 8062724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8062726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806272a:	f200 80b1 	bhi.w	8062890 <startPeripheryThread+0x198>
 806272e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8062730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8062734:	d060      	beq.n	80627f8 <startPeripheryThread+0x100>
 8062736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8062738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806273c:	f200 80a8 	bhi.w	8062890 <startPeripheryThread+0x198>
 8062740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8062742:	2b01      	cmp	r3, #1
 8062744:	d003      	beq.n	806274e <startPeripheryThread+0x56>
 8062746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8062748:	2b10      	cmp	r3, #16
 806274a:	d02a      	beq.n	80627a2 <startPeripheryThread+0xaa>

	  	    tb.data[0] = (int) TEMT6000_lux;

			break;
	  default:
		  break;
 806274c:	e0a0      	b.n	8062890 <startPeripheryThread+0x198>
	  	    MPU6050_GetAllData(Data);
 806274e:	f107 0318 	add.w	r3, r7, #24
 8062752:	4618      	mov	r0, r3
 8062754:	f000 fd03 	bl	806315e <MPU6050_GetAllData>
			tb.id = ACC;
 8062758:	2300      	movs	r3, #0
 806275a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 3;
 806275e:	2303      	movs	r3, #3
 8062760:	65bb      	str	r3, [r7, #88]	; 0x58
	  	  	tb.data[0] = Data[0];
 8062762:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8062766:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  	tb.data[1] = Data[1];
 8062768:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 806276c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  	tb.data[2] = Data[2];
 806276e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8062772:	633b      	str	r3, [r7, #48]	; 0x30
	  	  	osMessageQueuePut(telemetryQueueHandle, &tb, 0U, 0U);
 8062774:	4b4b      	ldr	r3, [pc, #300]	; (80628a4 <startPeripheryThread+0x1ac>)
 8062776:	6818      	ldr	r0, [r3, #0]
 8062778:	f107 0124 	add.w	r1, r7, #36	; 0x24
 806277c:	2300      	movs	r3, #0
 806277e:	2200      	movs	r2, #0
 8062780:	f00c f9d0 	bl	806eb24 <osMessageQueuePut>
	  	  	tb.id = GYRO;
 8062784:	2301      	movs	r3, #1
 8062786:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 3;
 806278a:	2303      	movs	r3, #3
 806278c:	65bb      	str	r3, [r7, #88]	; 0x58
	  	  	tb.data[0] = Data[3];
 806278e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8062792:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  	tb.data[1] = Data[4];
 8062794:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8062798:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  	tb.data[2] = Data[5];
 806279a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 806279e:	633b      	str	r3, [r7, #48]	; 0x30
	  	  	break;
 80627a0:	e077      	b.n	8062892 <startPeripheryThread+0x19a>
			tb.id = HTP;
 80627a2:	2302      	movs	r3, #2
 80627a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 3;
 80627a8:	2303      	movs	r3, #3
 80627aa:	65bb      	str	r3, [r7, #88]	; 0x58
			while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity));
 80627ac:	bf00      	nop
 80627ae:	f107 030c 	add.w	r3, r7, #12
 80627b2:	f107 0214 	add.w	r2, r7, #20
 80627b6:	f107 0110 	add.w	r1, r7, #16
 80627ba:	483b      	ldr	r0, [pc, #236]	; (80628a8 <startPeripheryThread+0x1b0>)
 80627bc:	f7ff fb28 	bl	8061e10 <bmp280_read_float>
 80627c0:	4603      	mov	r3, r0
 80627c2:	f083 0301 	eor.w	r3, r3, #1
 80627c6:	b2db      	uxtb	r3, r3
 80627c8:	2b00      	cmp	r3, #0
 80627ca:	d1f0      	bne.n	80627ae <startPeripheryThread+0xb6>
			tb.data[0] = (int) temperature;
 80627cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80627d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80627d4:	ee17 3a90 	vmov	r3, s15
 80627d8:	62bb      	str	r3, [r7, #40]	; 0x28
			tb.data[1] = (int) pressure;
 80627da:	edd7 7a05 	vldr	s15, [r7, #20]
 80627de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80627e2:	ee17 3a90 	vmov	r3, s15
 80627e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			tb.data[2] = (int) humidity;
 80627e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80627ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80627f0:	ee17 3a90 	vmov	r3, s15
 80627f4:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 80627f6:	e04c      	b.n	8062892 <startPeripheryThread+0x19a>
			while (!GPS_read());
 80627f8:	bf00      	nop
 80627fa:	f7fe fc5f 	bl	80610bc <GPS_read>
 80627fe:	4603      	mov	r3, r0
 8062800:	2b00      	cmp	r3, #0
 8062802:	d0fa      	beq.n	80627fa <startPeripheryThread+0x102>
			tb.id = NEO6M;
 8062804:	2304      	movs	r3, #4
 8062806:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			tb.data_size = 3;
 806280a:	2303      	movs	r3, #3
 806280c:	65bb      	str	r3, [r7, #88]	; 0x58
			tb.data[0] = (int) GPS.utc_time;
 806280e:	4b27      	ldr	r3, [pc, #156]	; (80628ac <startPeripheryThread+0x1b4>)
 8062810:	edd3 7a05 	vldr	s15, [r3, #20]
 8062814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8062818:	ee17 3a90 	vmov	r3, s15
 806281c:	62bb      	str	r3, [r7, #40]	; 0x28
			tb.data[1] = (int) GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 806281e:	4b23      	ldr	r3, [pc, #140]	; (80628ac <startPeripheryThread+0x1b4>)
 8062820:	edd3 7a04 	vldr	s15, [r3, #16]
 8062824:	4b21      	ldr	r3, [pc, #132]	; (80628ac <startPeripheryThread+0x1b4>)
 8062826:	7e1b      	ldrb	r3, [r3, #24]
 8062828:	4618      	mov	r0, r3
 806282a:	eeb0 0a67 	vmov.f32	s0, s15
 806282e:	f7fe fce9 	bl	8061204 <GPS_nmea_to_dec>
 8062832:	eef0 7a40 	vmov.f32	s15, s0
 8062836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 806283a:	ee17 3a90 	vmov	r3, s15
 806283e:	62fb      	str	r3, [r7, #44]	; 0x2c
			tb.data[2] = (int) GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8062840:	4b1a      	ldr	r3, [pc, #104]	; (80628ac <startPeripheryThread+0x1b4>)
 8062842:	edd3 7a03 	vldr	s15, [r3, #12]
 8062846:	4b19      	ldr	r3, [pc, #100]	; (80628ac <startPeripheryThread+0x1b4>)
 8062848:	7e5b      	ldrb	r3, [r3, #25]
 806284a:	4618      	mov	r0, r3
 806284c:	eeb0 0a67 	vmov.f32	s0, s15
 8062850:	f7fe fcd8 	bl	8061204 <GPS_nmea_to_dec>
 8062854:	eef0 7a40 	vmov.f32	s15, s0
 8062858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 806285c:	ee17 3a90 	vmov	r3, s15
 8062860:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8062862:	e016      	b.n	8062892 <startPeripheryThread+0x19a>
			tb.id = LIGHT;
 8062864:	2303      	movs	r3, #3
 8062866:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 1;
 806286a:	2301      	movs	r3, #1
 806286c:	65bb      	str	r3, [r7, #88]	; 0x58
	  	    while (TEMT6000_OK != TEMT6000_ReadLight(&TEMT6000_lux));
 806286e:	bf00      	nop
 8062870:	f107 0308 	add.w	r3, r7, #8
 8062874:	4618      	mov	r0, r3
 8062876:	f000 ff57 	bl	8063728 <TEMT6000_ReadLight>
 806287a:	4603      	mov	r3, r0
 806287c:	2b00      	cmp	r3, #0
 806287e:	d1f7      	bne.n	8062870 <startPeripheryThread+0x178>
	  	    tb.data[0] = (int) TEMT6000_lux;
 8062880:	edd7 7a02 	vldr	s15, [r7, #8]
 8062884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8062888:	ee17 3a90 	vmov	r3, s15
 806288c:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 806288e:	e000      	b.n	8062892 <startPeripheryThread+0x19a>
		  break;
 8062890:	bf00      	nop

	  }

	  osMessageQueuePut(telemetryQueueHandle, &tb, 0U, 0U);
 8062892:	4b04      	ldr	r3, [pc, #16]	; (80628a4 <startPeripheryThread+0x1ac>)
 8062894:	6818      	ldr	r0, [r3, #0]
 8062896:	f107 0124 	add.w	r1, r7, #36	; 0x24
 806289a:	2300      	movs	r3, #0
 806289c:	2200      	movs	r2, #0
 806289e:	f00c f941 	bl	806eb24 <osMessageQueuePut>
	  osThreadFlagsWait(0x11111111U, osFlagsNoClear, osWaitForever);
 80628a2:	e72d      	b.n	8062700 <startPeripheryThread+0x8>
 80628a4:	2000523c 	.word	0x2000523c
 80628a8:	20004f14 	.word	0x20004f14
 80628ac:	20004e3c 	.word	0x20004e3c

080628b0 <accTimerCallback>:
  /* USER CODE END startPeripheryThread */
}

/* accTimerCallback function */
void accTimerCallback(void *argument)
{
 80628b0:	b580      	push	{r7, lr}
 80628b2:	b082      	sub	sp, #8
 80628b4:	af00      	add	r7, sp, #0
 80628b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00000001U);
 80628b8:	4b04      	ldr	r3, [pc, #16]	; (80628cc <accTimerCallback+0x1c>)
 80628ba:	681b      	ldr	r3, [r3, #0]
 80628bc:	2101      	movs	r1, #1
 80628be:	4618      	mov	r0, r3
 80628c0:	f00b fc62 	bl	806e188 <osThreadFlagsSet>
  /* USER CODE END accTimerCallback */
}
 80628c4:	bf00      	nop
 80628c6:	3708      	adds	r7, #8
 80628c8:	46bd      	mov	sp, r7
 80628ca:	bd80      	pop	{r7, pc}
 80628cc:	2000547c 	.word	0x2000547c

080628d0 <temperatureTimerCallback>:

/* temperatureTimerCallback function */
void temperatureTimerCallback(void *argument)
{
 80628d0:	b580      	push	{r7, lr}
 80628d2:	b082      	sub	sp, #8
 80628d4:	af00      	add	r7, sp, #0
 80628d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temperatureTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00000010U);
 80628d8:	4b04      	ldr	r3, [pc, #16]	; (80628ec <temperatureTimerCallback+0x1c>)
 80628da:	681b      	ldr	r3, [r3, #0]
 80628dc:	2110      	movs	r1, #16
 80628de:	4618      	mov	r0, r3
 80628e0:	f00b fc52 	bl	806e188 <osThreadFlagsSet>
  /* USER CODE END temperatureTimerCallback */
}
 80628e4:	bf00      	nop
 80628e6:	3708      	adds	r7, #8
 80628e8:	46bd      	mov	sp, r7
 80628ea:	bd80      	pop	{r7, pc}
 80628ec:	2000547c 	.word	0x2000547c

080628f0 <gpsTimerCallback>:

/* gpsTimerCallback function */
void gpsTimerCallback(void *argument)
{
 80628f0:	b580      	push	{r7, lr}
 80628f2:	b082      	sub	sp, #8
 80628f4:	af00      	add	r7, sp, #0
 80628f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gpsTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00000100U);
 80628f8:	4b05      	ldr	r3, [pc, #20]	; (8062910 <gpsTimerCallback+0x20>)
 80628fa:	681b      	ldr	r3, [r3, #0]
 80628fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8062900:	4618      	mov	r0, r3
 8062902:	f00b fc41 	bl	806e188 <osThreadFlagsSet>
  /* USER CODE END gpsTimerCallback */
}
 8062906:	bf00      	nop
 8062908:	3708      	adds	r7, #8
 806290a:	46bd      	mov	sp, r7
 806290c:	bd80      	pop	{r7, pc}
 806290e:	bf00      	nop
 8062910:	2000547c 	.word	0x2000547c

08062914 <lightTimerCallback>:

/* lightTimerCallback function */
void lightTimerCallback(void *argument)
{
 8062914:	b580      	push	{r7, lr}
 8062916:	b082      	sub	sp, #8
 8062918:	af00      	add	r7, sp, #0
 806291a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lightTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00001000U);
 806291c:	4b05      	ldr	r3, [pc, #20]	; (8062934 <lightTimerCallback+0x20>)
 806291e:	681b      	ldr	r3, [r3, #0]
 8062920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8062924:	4618      	mov	r0, r3
 8062926:	f00b fc2f 	bl	806e188 <osThreadFlagsSet>
  /* USER CODE END lightTimerCallback */
}
 806292a:	bf00      	nop
 806292c:	3708      	adds	r7, #8
 806292e:	46bd      	mov	sp, r7
 8062930:	bd80      	pop	{r7, pc}
 8062932:	bf00      	nop
 8062934:	2000547c 	.word	0x2000547c

08062938 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN Application */
/*
 * [IMPORTANT] TODO: Note that this functoin is unsafe (as we might interrupt uart usage)
 * Actually not, as we would transmit only after this
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8062938:	b580      	push	{r7, lr}
 806293a:	b084      	sub	sp, #16
 806293c:	af00      	add	r7, sp, #0
 806293e:	6078      	str	r0, [r7, #4]
     if (huart == &huart2) {
 8062940:	687b      	ldr	r3, [r7, #4]
 8062942:	4a25      	ldr	r2, [pc, #148]	; (80629d8 <HAL_UART_RxCpltCallback+0xa0>)
 8062944:	4293      	cmp	r3, r2
 8062946:	d141      	bne.n	80629cc <HAL_UART_RxCpltCallback+0x94>
    	 int val = (int) (notification_buffer[0] - '0');
 8062948:	4b24      	ldr	r3, [pc, #144]	; (80629dc <HAL_UART_RxCpltCallback+0xa4>)
 806294a:	781b      	ldrb	r3, [r3, #0]
 806294c:	3b30      	subs	r3, #48	; 0x30
 806294e:	60fb      	str	r3, [r7, #12]
		 switch (val) {
 8062950:	68fb      	ldr	r3, [r7, #12]
 8062952:	2b00      	cmp	r3, #0
 8062954:	d003      	beq.n	806295e <HAL_UART_RxCpltCallback+0x26>
 8062956:	68fb      	ldr	r3, [r7, #12]
 8062958:	2b01      	cmp	r3, #1
 806295a:	d006      	beq.n	806296a <HAL_UART_RxCpltCallback+0x32>
 806295c:	e020      	b.n	80629a0 <HAL_UART_RxCpltCallback+0x68>
		 case 0:
			 osSemaphoreRelease(rxThreadSemHandle);
 806295e:	4b20      	ldr	r3, [pc, #128]	; (80629e0 <HAL_UART_RxCpltCallback+0xa8>)
 8062960:	681b      	ldr	r3, [r3, #0]
 8062962:	4618      	mov	r0, r3
 8062964:	f00c f802 	bl	806e96c <osSemaphoreRelease>
			 break;
 8062968:	e031      	b.n	80629ce <HAL_UART_RxCpltCallback+0x96>
		 case 1:
			 status = osSemaphoreRelease(txThreadSemHandle);
 806296a:	4b1e      	ldr	r3, [pc, #120]	; (80629e4 <HAL_UART_RxCpltCallback+0xac>)
 806296c:	681b      	ldr	r3, [r3, #0]
 806296e:	4618      	mov	r0, r3
 8062970:	f00b fffc 	bl	806e96c <osSemaphoreRelease>
 8062974:	4603      	mov	r3, r0
 8062976:	4a1c      	ldr	r2, [pc, #112]	; (80629e8 <HAL_UART_RxCpltCallback+0xb0>)
 8062978:	6013      	str	r3, [r2, #0]
			 myprintf("[INFO]: status of semaphore release: %d\n", status);
 806297a:	4b1b      	ldr	r3, [pc, #108]	; (80629e8 <HAL_UART_RxCpltCallback+0xb0>)
 806297c:	681b      	ldr	r3, [r3, #0]
 806297e:	461a      	mov	r2, r3
 8062980:	491a      	ldr	r1, [pc, #104]	; (80629ec <HAL_UART_RxCpltCallback+0xb4>)
 8062982:	481b      	ldr	r0, [pc, #108]	; (80629f0 <HAL_UART_RxCpltCallback+0xb8>)
 8062984:	f010 fe40 	bl	8073608 <siprintf>
 8062988:	4819      	ldr	r0, [pc, #100]	; (80629f0 <HAL_UART_RxCpltCallback+0xb8>)
 806298a:	f7fd fc33 	bl	80601f4 <strlen>
 806298e:	4603      	mov	r3, r0
 8062990:	b29a      	uxth	r2, r3
 8062992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062996:	4916      	ldr	r1, [pc, #88]	; (80629f0 <HAL_UART_RxCpltCallback+0xb8>)
 8062998:	480f      	ldr	r0, [pc, #60]	; (80629d8 <HAL_UART_RxCpltCallback+0xa0>)
 806299a:	f006 ffdb 	bl	8069954 <HAL_UART_Transmit>
			 break;
 806299e:	e016      	b.n	80629ce <HAL_UART_RxCpltCallback+0x96>
		 default:
			 myprintf("[ERROR]: Op not allowed: %d\n", val);
 80629a0:	68fa      	ldr	r2, [r7, #12]
 80629a2:	4914      	ldr	r1, [pc, #80]	; (80629f4 <HAL_UART_RxCpltCallback+0xbc>)
 80629a4:	4812      	ldr	r0, [pc, #72]	; (80629f0 <HAL_UART_RxCpltCallback+0xb8>)
 80629a6:	f010 fe2f 	bl	8073608 <siprintf>
 80629aa:	4811      	ldr	r0, [pc, #68]	; (80629f0 <HAL_UART_RxCpltCallback+0xb8>)
 80629ac:	f7fd fc22 	bl	80601f4 <strlen>
 80629b0:	4603      	mov	r3, r0
 80629b2:	b29a      	uxth	r2, r3
 80629b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80629b8:	490d      	ldr	r1, [pc, #52]	; (80629f0 <HAL_UART_RxCpltCallback+0xb8>)
 80629ba:	4807      	ldr	r0, [pc, #28]	; (80629d8 <HAL_UART_RxCpltCallback+0xa0>)
 80629bc:	f006 ffca 	bl	8069954 <HAL_UART_Transmit>
			 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 80629c0:	2201      	movs	r2, #1
 80629c2:	4906      	ldr	r1, [pc, #24]	; (80629dc <HAL_UART_RxCpltCallback+0xa4>)
 80629c4:	4804      	ldr	r0, [pc, #16]	; (80629d8 <HAL_UART_RxCpltCallback+0xa0>)
 80629c6:	f007 f8f9 	bl	8069bbc <HAL_UART_Receive_IT>
			 break;
 80629ca:	e000      	b.n	80629ce <HAL_UART_RxCpltCallback+0x96>
		 };
 80629cc:	bf00      	nop

     }
}
 80629ce:	bf00      	nop
 80629d0:	3710      	adds	r7, #16
 80629d2:	46bd      	mov	sp, r7
 80629d4:	bd80      	pop	{r7, pc}
 80629d6:	bf00      	nop
 80629d8:	20005828 	.word	0x20005828
 80629dc:	20004e30 	.word	0x20004e30
 80629e0:	20005228 	.word	0x20005228
 80629e4:	20005478 	.word	0x20005478
 80629e8:	200056b8 	.word	0x200056b8
 80629ec:	080771f4 	.word	0x080771f4
 80629f0:	2000021c 	.word	0x2000021c
 80629f4:	08077220 	.word	0x08077220

080629f8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80629f8:	b580      	push	{r7, lr}
 80629fa:	b08c      	sub	sp, #48	; 0x30
 80629fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80629fe:	f107 031c 	add.w	r3, r7, #28
 8062a02:	2200      	movs	r2, #0
 8062a04:	601a      	str	r2, [r3, #0]
 8062a06:	605a      	str	r2, [r3, #4]
 8062a08:	609a      	str	r2, [r3, #8]
 8062a0a:	60da      	str	r2, [r3, #12]
 8062a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8062a0e:	2300      	movs	r3, #0
 8062a10:	61bb      	str	r3, [r7, #24]
 8062a12:	4ba5      	ldr	r3, [pc, #660]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a16:	4aa4      	ldr	r2, [pc, #656]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a18:	f043 0310 	orr.w	r3, r3, #16
 8062a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8062a1e:	4ba2      	ldr	r3, [pc, #648]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a22:	f003 0310 	and.w	r3, r3, #16
 8062a26:	61bb      	str	r3, [r7, #24]
 8062a28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8062a2a:	2300      	movs	r3, #0
 8062a2c:	617b      	str	r3, [r7, #20]
 8062a2e:	4b9e      	ldr	r3, [pc, #632]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a32:	4a9d      	ldr	r2, [pc, #628]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a34:	f043 0304 	orr.w	r3, r3, #4
 8062a38:	6313      	str	r3, [r2, #48]	; 0x30
 8062a3a:	4b9b      	ldr	r3, [pc, #620]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a3e:	f003 0304 	and.w	r3, r3, #4
 8062a42:	617b      	str	r3, [r7, #20]
 8062a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8062a46:	2300      	movs	r3, #0
 8062a48:	613b      	str	r3, [r7, #16]
 8062a4a:	4b97      	ldr	r3, [pc, #604]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a4e:	4a96      	ldr	r2, [pc, #600]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8062a54:	6313      	str	r3, [r2, #48]	; 0x30
 8062a56:	4b94      	ldr	r3, [pc, #592]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8062a5e:	613b      	str	r3, [r7, #16]
 8062a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8062a62:	2300      	movs	r3, #0
 8062a64:	60fb      	str	r3, [r7, #12]
 8062a66:	4b90      	ldr	r3, [pc, #576]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a6a:	4a8f      	ldr	r2, [pc, #572]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a6c:	f043 0301 	orr.w	r3, r3, #1
 8062a70:	6313      	str	r3, [r2, #48]	; 0x30
 8062a72:	4b8d      	ldr	r3, [pc, #564]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a76:	f003 0301 	and.w	r3, r3, #1
 8062a7a:	60fb      	str	r3, [r7, #12]
 8062a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8062a7e:	2300      	movs	r3, #0
 8062a80:	60bb      	str	r3, [r7, #8]
 8062a82:	4b89      	ldr	r3, [pc, #548]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a86:	4a88      	ldr	r2, [pc, #544]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a88:	f043 0302 	orr.w	r3, r3, #2
 8062a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8062a8e:	4b86      	ldr	r3, [pc, #536]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062a92:	f003 0302 	and.w	r3, r3, #2
 8062a96:	60bb      	str	r3, [r7, #8]
 8062a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8062a9a:	2300      	movs	r3, #0
 8062a9c:	607b      	str	r3, [r7, #4]
 8062a9e:	4b82      	ldr	r3, [pc, #520]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062aa2:	4a81      	ldr	r2, [pc, #516]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062aa4:	f043 0308 	orr.w	r3, r3, #8
 8062aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8062aaa:	4b7f      	ldr	r3, [pc, #508]	; (8062ca8 <MX_GPIO_Init+0x2b0>)
 8062aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062aae:	f003 0308 	and.w	r3, r3, #8
 8062ab2:	607b      	str	r3, [r7, #4]
 8062ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8062ab6:	2200      	movs	r2, #0
 8062ab8:	2108      	movs	r1, #8
 8062aba:	487c      	ldr	r0, [pc, #496]	; (8062cac <MX_GPIO_Init+0x2b4>)
 8062abc:	f003 f86a 	bl	8065b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8062ac0:	2201      	movs	r2, #1
 8062ac2:	2101      	movs	r1, #1
 8062ac4:	487a      	ldr	r0, [pc, #488]	; (8062cb0 <MX_GPIO_Init+0x2b8>)
 8062ac6:	f003 f865 	bl	8065b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8062aca:	2200      	movs	r2, #0
 8062acc:	2102      	movs	r1, #2
 8062ace:	4879      	ldr	r0, [pc, #484]	; (8062cb4 <MX_GPIO_Init+0x2bc>)
 8062ad0:	f003 f860 	bl	8065b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8062ad4:	2200      	movs	r2, #0
 8062ad6:	f24f 0110 	movw	r1, #61456	; 0xf010
 8062ada:	4877      	ldr	r0, [pc, #476]	; (8062cb8 <MX_GPIO_Init+0x2c0>)
 8062adc:	f003 f85a 	bl	8065b94 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BootPin_GPIO_Port, BootPin_Pin, GPIO_PIN_RESET);
 8062ae0:	2200      	movs	r2, #0
 8062ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8062ae6:	4875      	ldr	r0, [pc, #468]	; (8062cbc <MX_GPIO_Init+0x2c4>)
 8062ae8:	f003 f854 	bl	8065b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8062aec:	2304      	movs	r3, #4
 8062aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8062af0:	2300      	movs	r3, #0
 8062af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062af4:	2300      	movs	r3, #0
 8062af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8062af8:	f107 031c 	add.w	r3, r7, #28
 8062afc:	4619      	mov	r1, r3
 8062afe:	486b      	ldr	r0, [pc, #428]	; (8062cac <MX_GPIO_Init+0x2b4>)
 8062b00:	f002 fdac 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8062b04:	2308      	movs	r3, #8
 8062b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062b08:	2301      	movs	r3, #1
 8062b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b0c:	2300      	movs	r3, #0
 8062b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062b10:	2300      	movs	r3, #0
 8062b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8062b14:	f107 031c 	add.w	r3, r7, #28
 8062b18:	4619      	mov	r1, r3
 8062b1a:	4864      	ldr	r0, [pc, #400]	; (8062cac <MX_GPIO_Init+0x2b4>)
 8062b1c:	f002 fd9e 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8062b20:	2330      	movs	r3, #48	; 0x30
 8062b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8062b24:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8062b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b2a:	2300      	movs	r3, #0
 8062b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8062b2e:	f107 031c 	add.w	r3, r7, #28
 8062b32:	4619      	mov	r1, r3
 8062b34:	485d      	ldr	r0, [pc, #372]	; (8062cac <MX_GPIO_Init+0x2b4>)
 8062b36:	f002 fd91 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8062b3a:	2301      	movs	r3, #1
 8062b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062b3e:	2301      	movs	r3, #1
 8062b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b42:	2300      	movs	r3, #0
 8062b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062b46:	2300      	movs	r3, #0
 8062b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8062b4a:	f107 031c 	add.w	r3, r7, #28
 8062b4e:	4619      	mov	r1, r3
 8062b50:	4857      	ldr	r0, [pc, #348]	; (8062cb0 <MX_GPIO_Init+0x2b8>)
 8062b52:	f002 fd83 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8062b56:	2308      	movs	r3, #8
 8062b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062b5a:	2302      	movs	r3, #2
 8062b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b5e:	2300      	movs	r3, #0
 8062b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062b62:	2300      	movs	r3, #0
 8062b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8062b66:	2305      	movs	r3, #5
 8062b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8062b6a:	f107 031c 	add.w	r3, r7, #28
 8062b6e:	4619      	mov	r1, r3
 8062b70:	484f      	ldr	r0, [pc, #316]	; (8062cb0 <MX_GPIO_Init+0x2b8>)
 8062b72:	f002 fd73 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8062b76:	2301      	movs	r3, #1
 8062b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8062b7a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8062b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b80:	2300      	movs	r3, #0
 8062b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8062b84:	f107 031c 	add.w	r3, r7, #28
 8062b88:	4619      	mov	r1, r3
 8062b8a:	484c      	ldr	r0, [pc, #304]	; (8062cbc <MX_GPIO_Init+0x2c4>)
 8062b8c:	f002 fd66 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8062b90:	2310      	movs	r3, #16
 8062b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062b94:	2302      	movs	r3, #2
 8062b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062b98:	2300      	movs	r3, #0
 8062b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062b9c:	2300      	movs	r3, #0
 8062b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8062ba0:	2306      	movs	r3, #6
 8062ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8062ba4:	f107 031c 	add.w	r3, r7, #28
 8062ba8:	4619      	mov	r1, r3
 8062baa:	4844      	ldr	r0, [pc, #272]	; (8062cbc <MX_GPIO_Init+0x2c4>)
 8062bac:	f002 fd56 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8062bb0:	2302      	movs	r3, #2
 8062bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062bb4:	2301      	movs	r3, #1
 8062bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062bb8:	2300      	movs	r3, #0
 8062bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062bbc:	2300      	movs	r3, #0
 8062bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8062bc0:	f107 031c 	add.w	r3, r7, #28
 8062bc4:	4619      	mov	r1, r3
 8062bc6:	483b      	ldr	r0, [pc, #236]	; (8062cb4 <MX_GPIO_Init+0x2bc>)
 8062bc8:	f002 fd48 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8062bcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8062bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062bd2:	2302      	movs	r3, #2
 8062bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062bd6:	2300      	movs	r3, #0
 8062bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062bda:	2300      	movs	r3, #0
 8062bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8062bde:	2305      	movs	r3, #5
 8062be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8062be2:	f107 031c 	add.w	r3, r7, #28
 8062be6:	4619      	mov	r1, r3
 8062be8:	4832      	ldr	r0, [pc, #200]	; (8062cb4 <MX_GPIO_Init+0x2bc>)
 8062bea:	f002 fd37 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8062bee:	f24f 0310 	movw	r3, #61456	; 0xf010
 8062bf2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062bf4:	2301      	movs	r3, #1
 8062bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062bf8:	2300      	movs	r3, #0
 8062bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062bfc:	2300      	movs	r3, #0
 8062bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8062c00:	f107 031c 	add.w	r3, r7, #28
 8062c04:	4619      	mov	r1, r3
 8062c06:	482c      	ldr	r0, [pc, #176]	; (8062cb8 <MX_GPIO_Init+0x2c0>)
 8062c08:	f002 fd28 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8062c0c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8062c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062c12:	2302      	movs	r3, #2
 8062c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062c16:	2300      	movs	r3, #0
 8062c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062c1a:	2300      	movs	r3, #0
 8062c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8062c1e:	2306      	movs	r3, #6
 8062c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8062c22:	f107 031c 	add.w	r3, r7, #28
 8062c26:	4619      	mov	r1, r3
 8062c28:	4821      	ldr	r0, [pc, #132]	; (8062cb0 <MX_GPIO_Init+0x2b8>)
 8062c2a:	f002 fd17 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BootPin_Pin;
 8062c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8062c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062c34:	2301      	movs	r3, #1
 8062c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062c38:	2300      	movs	r3, #0
 8062c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062c3c:	2300      	movs	r3, #0
 8062c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BootPin_GPIO_Port, &GPIO_InitStruct);
 8062c40:	f107 031c 	add.w	r3, r7, #28
 8062c44:	4619      	mov	r1, r3
 8062c46:	481d      	ldr	r0, [pc, #116]	; (8062cbc <MX_GPIO_Init+0x2c4>)
 8062c48:	f002 fd08 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8062c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8062c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8062c52:	2300      	movs	r3, #0
 8062c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062c56:	2300      	movs	r3, #0
 8062c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8062c5a:	f107 031c 	add.w	r3, r7, #28
 8062c5e:	4619      	mov	r1, r3
 8062c60:	4816      	ldr	r0, [pc, #88]	; (8062cbc <MX_GPIO_Init+0x2c4>)
 8062c62:	f002 fcfb 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8062c66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8062c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062c6c:	2302      	movs	r3, #2
 8062c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062c70:	2300      	movs	r3, #0
 8062c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8062c74:	2303      	movs	r3, #3
 8062c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8062c78:	230a      	movs	r3, #10
 8062c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8062c7c:	f107 031c 	add.w	r3, r7, #28
 8062c80:	4619      	mov	r1, r3
 8062c82:	480e      	ldr	r0, [pc, #56]	; (8062cbc <MX_GPIO_Init+0x2c4>)
 8062c84:	f002 fcea 	bl	806565c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8062c88:	2320      	movs	r3, #32
 8062c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8062c8c:	2300      	movs	r3, #0
 8062c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062c90:	2300      	movs	r3, #0
 8062c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8062c94:	f107 031c 	add.w	r3, r7, #28
 8062c98:	4619      	mov	r1, r3
 8062c9a:	4807      	ldr	r0, [pc, #28]	; (8062cb8 <MX_GPIO_Init+0x2c0>)
 8062c9c:	f002 fcde 	bl	806565c <HAL_GPIO_Init>

}
 8062ca0:	bf00      	nop
 8062ca2:	3730      	adds	r7, #48	; 0x30
 8062ca4:	46bd      	mov	sp, r7
 8062ca6:	bd80      	pop	{r7, pc}
 8062ca8:	40023800 	.word	0x40023800
 8062cac:	40021000 	.word	0x40021000
 8062cb0:	40020800 	.word	0x40020800
 8062cb4:	40020400 	.word	0x40020400
 8062cb8:	40020c00 	.word	0x40020c00
 8062cbc:	40020000 	.word	0x40020000

08062cc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8062cc0:	b580      	push	{r7, lr}
 8062cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8062cc4:	4b12      	ldr	r3, [pc, #72]	; (8062d10 <MX_I2C1_Init+0x50>)
 8062cc6:	4a13      	ldr	r2, [pc, #76]	; (8062d14 <MX_I2C1_Init+0x54>)
 8062cc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8062cca:	4b11      	ldr	r3, [pc, #68]	; (8062d10 <MX_I2C1_Init+0x50>)
 8062ccc:	4a12      	ldr	r2, [pc, #72]	; (8062d18 <MX_I2C1_Init+0x58>)
 8062cce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8062cd0:	4b0f      	ldr	r3, [pc, #60]	; (8062d10 <MX_I2C1_Init+0x50>)
 8062cd2:	2200      	movs	r2, #0
 8062cd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8062cd6:	4b0e      	ldr	r3, [pc, #56]	; (8062d10 <MX_I2C1_Init+0x50>)
 8062cd8:	2200      	movs	r2, #0
 8062cda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8062cdc:	4b0c      	ldr	r3, [pc, #48]	; (8062d10 <MX_I2C1_Init+0x50>)
 8062cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8062ce2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8062ce4:	4b0a      	ldr	r3, [pc, #40]	; (8062d10 <MX_I2C1_Init+0x50>)
 8062ce6:	2200      	movs	r2, #0
 8062ce8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8062cea:	4b09      	ldr	r3, [pc, #36]	; (8062d10 <MX_I2C1_Init+0x50>)
 8062cec:	2200      	movs	r2, #0
 8062cee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8062cf0:	4b07      	ldr	r3, [pc, #28]	; (8062d10 <MX_I2C1_Init+0x50>)
 8062cf2:	2200      	movs	r2, #0
 8062cf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8062cf6:	4b06      	ldr	r3, [pc, #24]	; (8062d10 <MX_I2C1_Init+0x50>)
 8062cf8:	2200      	movs	r2, #0
 8062cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8062cfc:	4804      	ldr	r0, [pc, #16]	; (8062d10 <MX_I2C1_Init+0x50>)
 8062cfe:	f002 ff7b 	bl	8065bf8 <HAL_I2C_Init>
 8062d02:	4603      	mov	r3, r0
 8062d04:	2b00      	cmp	r3, #0
 8062d06:	d001      	beq.n	8062d0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8062d08:	f000 f9e4 	bl	80630d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8062d0c:	bf00      	nop
 8062d0e:	bd80      	pop	{r7, pc}
 8062d10:	200056bc 	.word	0x200056bc
 8062d14:	40005400 	.word	0x40005400
 8062d18:	000186a0 	.word	0x000186a0

08062d1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8062d1c:	b580      	push	{r7, lr}
 8062d1e:	b08a      	sub	sp, #40	; 0x28
 8062d20:	af00      	add	r7, sp, #0
 8062d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8062d24:	f107 0314 	add.w	r3, r7, #20
 8062d28:	2200      	movs	r2, #0
 8062d2a:	601a      	str	r2, [r3, #0]
 8062d2c:	605a      	str	r2, [r3, #4]
 8062d2e:	609a      	str	r2, [r3, #8]
 8062d30:	60da      	str	r2, [r3, #12]
 8062d32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8062d34:	687b      	ldr	r3, [r7, #4]
 8062d36:	681b      	ldr	r3, [r3, #0]
 8062d38:	4a19      	ldr	r2, [pc, #100]	; (8062da0 <HAL_I2C_MspInit+0x84>)
 8062d3a:	4293      	cmp	r3, r2
 8062d3c:	d12c      	bne.n	8062d98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8062d3e:	2300      	movs	r3, #0
 8062d40:	613b      	str	r3, [r7, #16]
 8062d42:	4b18      	ldr	r3, [pc, #96]	; (8062da4 <HAL_I2C_MspInit+0x88>)
 8062d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062d46:	4a17      	ldr	r2, [pc, #92]	; (8062da4 <HAL_I2C_MspInit+0x88>)
 8062d48:	f043 0302 	orr.w	r3, r3, #2
 8062d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8062d4e:	4b15      	ldr	r3, [pc, #84]	; (8062da4 <HAL_I2C_MspInit+0x88>)
 8062d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062d52:	f003 0302 	and.w	r3, r3, #2
 8062d56:	613b      	str	r3, [r7, #16]
 8062d58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8062d5a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8062d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8062d60:	2312      	movs	r3, #18
 8062d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062d64:	2300      	movs	r3, #0
 8062d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8062d68:	2303      	movs	r3, #3
 8062d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8062d6c:	2304      	movs	r3, #4
 8062d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8062d70:	f107 0314 	add.w	r3, r7, #20
 8062d74:	4619      	mov	r1, r3
 8062d76:	480c      	ldr	r0, [pc, #48]	; (8062da8 <HAL_I2C_MspInit+0x8c>)
 8062d78:	f002 fc70 	bl	806565c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8062d7c:	2300      	movs	r3, #0
 8062d7e:	60fb      	str	r3, [r7, #12]
 8062d80:	4b08      	ldr	r3, [pc, #32]	; (8062da4 <HAL_I2C_MspInit+0x88>)
 8062d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062d84:	4a07      	ldr	r2, [pc, #28]	; (8062da4 <HAL_I2C_MspInit+0x88>)
 8062d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8062d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8062d8c:	4b05      	ldr	r3, [pc, #20]	; (8062da4 <HAL_I2C_MspInit+0x88>)
 8062d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8062d94:	60fb      	str	r3, [r7, #12]
 8062d96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8062d98:	bf00      	nop
 8062d9a:	3728      	adds	r7, #40	; 0x28
 8062d9c:	46bd      	mov	sp, r7
 8062d9e:	bd80      	pop	{r7, pc}
 8062da0:	40005400 	.word	0x40005400
 8062da4:	40023800 	.word	0x40023800
 8062da8:	40020400 	.word	0x40020400

08062dac <I2C_WriteBuffer>:
  /* USER CODE END I2C1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int I2C_WriteBuffer(uint8_t I2C_ADDRESS, uint8_t *aTxBuffer, uint8_t TXBUFFERSIZE) {
 8062dac:	b580      	push	{r7, lr}
 8062dae:	b084      	sub	sp, #16
 8062db0:	af02      	add	r7, sp, #8
 8062db2:	4603      	mov	r3, r0
 8062db4:	6039      	str	r1, [r7, #0]
 8062db6:	71fb      	strb	r3, [r7, #7]
 8062db8:	4613      	mov	r3, r2
 8062dba:	71bb      	strb	r3, [r7, #6]
    while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 8062dbc:	e007      	b.n	8062dce <I2C_WriteBuffer+0x22>
        if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF){
 8062dbe:	4812      	ldr	r0, [pc, #72]	; (8062e08 <I2C_WriteBuffer+0x5c>)
 8062dc0:	f003 ff50 	bl	8066c64 <HAL_I2C_GetError>
 8062dc4:	4603      	mov	r3, r0
 8062dc6:	2b04      	cmp	r3, #4
 8062dc8:	d001      	beq.n	8062dce <I2C_WriteBuffer+0x22>
            // _Error_Handler(__FILE__, aTxBuffer[0]);
        	return 1;
 8062dca:	2301      	movs	r3, #1
 8062dcc:	e017      	b.n	8062dfe <I2C_WriteBuffer+0x52>
    while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 8062dce:	79fb      	ldrb	r3, [r7, #7]
 8062dd0:	b29b      	uxth	r3, r3
 8062dd2:	005b      	lsls	r3, r3, #1
 8062dd4:	b299      	uxth	r1, r3
 8062dd6:	79bb      	ldrb	r3, [r7, #6]
 8062dd8:	b29b      	uxth	r3, r3
 8062dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8062dde:	9200      	str	r2, [sp, #0]
 8062de0:	683a      	ldr	r2, [r7, #0]
 8062de2:	4809      	ldr	r0, [pc, #36]	; (8062e08 <I2C_WriteBuffer+0x5c>)
 8062de4:	f003 f8d4 	bl	8065f90 <HAL_I2C_Master_Transmit>
 8062de8:	4603      	mov	r3, r0
 8062dea:	2b00      	cmp	r3, #0
 8062dec:	d1e7      	bne.n	8062dbe <I2C_WriteBuffer+0x12>
        }

    }

      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8062dee:	bf00      	nop
 8062df0:	4805      	ldr	r0, [pc, #20]	; (8062e08 <I2C_WriteBuffer+0x5c>)
 8062df2:	f003 ff29 	bl	8066c48 <HAL_I2C_GetState>
 8062df6:	4603      	mov	r3, r0
 8062df8:	2b20      	cmp	r3, #32
 8062dfa:	d1f9      	bne.n	8062df0 <I2C_WriteBuffer+0x44>

      return 0;
 8062dfc:	2300      	movs	r3, #0
}
 8062dfe:	4618      	mov	r0, r3
 8062e00:	3708      	adds	r7, #8
 8062e02:	46bd      	mov	sp, r7
 8062e04:	bd80      	pop	{r7, pc}
 8062e06:	bf00      	nop
 8062e08:	200056bc 	.word	0x200056bc

08062e0c <I2C_ReadBuffer>:

int I2C_ReadBuffer(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t *aRxBuffer, uint8_t RXBUFFERSIZE){
 8062e0c:	b580      	push	{r7, lr}
 8062e0e:	b084      	sub	sp, #16
 8062e10:	af02      	add	r7, sp, #8
 8062e12:	603a      	str	r2, [r7, #0]
 8062e14:	461a      	mov	r2, r3
 8062e16:	4603      	mov	r3, r0
 8062e18:	71fb      	strb	r3, [r7, #7]
 8062e1a:	460b      	mov	r3, r1
 8062e1c:	71bb      	strb	r3, [r7, #6]
 8062e1e:	4613      	mov	r3, r2
 8062e20:	717b      	strb	r3, [r7, #5]

    I2C_WriteBuffer(I2C_ADDRESS, &RegAddr, 1);
 8062e22:	1db9      	adds	r1, r7, #6
 8062e24:	79fb      	ldrb	r3, [r7, #7]
 8062e26:	2201      	movs	r2, #1
 8062e28:	4618      	mov	r0, r3
 8062e2a:	f7ff ffbf 	bl	8062dac <I2C_WriteBuffer>

    while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 8062e2e:	e007      	b.n	8062e40 <I2C_ReadBuffer+0x34>
        if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF){
 8062e30:	4811      	ldr	r0, [pc, #68]	; (8062e78 <I2C_ReadBuffer+0x6c>)
 8062e32:	f003 ff17 	bl	8066c64 <HAL_I2C_GetError>
 8062e36:	4603      	mov	r3, r0
 8062e38:	2b04      	cmp	r3, #4
 8062e3a:	d001      	beq.n	8062e40 <I2C_ReadBuffer+0x34>
            // _Error_Handler(__FILE__, __LINE__);
        	return 1;
 8062e3c:	2301      	movs	r3, #1
 8062e3e:	e017      	b.n	8062e70 <I2C_ReadBuffer+0x64>
    while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 8062e40:	79fb      	ldrb	r3, [r7, #7]
 8062e42:	b29b      	uxth	r3, r3
 8062e44:	005b      	lsls	r3, r3, #1
 8062e46:	b299      	uxth	r1, r3
 8062e48:	797b      	ldrb	r3, [r7, #5]
 8062e4a:	b29b      	uxth	r3, r3
 8062e4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8062e50:	9200      	str	r2, [sp, #0]
 8062e52:	683a      	ldr	r2, [r7, #0]
 8062e54:	4808      	ldr	r0, [pc, #32]	; (8062e78 <I2C_ReadBuffer+0x6c>)
 8062e56:	f003 f999 	bl	806618c <HAL_I2C_Master_Receive>
 8062e5a:	4603      	mov	r3, r0
 8062e5c:	2b00      	cmp	r3, #0
 8062e5e:	d1e7      	bne.n	8062e30 <I2C_ReadBuffer+0x24>
        }
    }

    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8062e60:	bf00      	nop
 8062e62:	4805      	ldr	r0, [pc, #20]	; (8062e78 <I2C_ReadBuffer+0x6c>)
 8062e64:	f003 fef0 	bl	8066c48 <HAL_I2C_GetState>
 8062e68:	4603      	mov	r3, r0
 8062e6a:	2b20      	cmp	r3, #32
 8062e6c:	d1f9      	bne.n	8062e62 <I2C_ReadBuffer+0x56>

    return 0;
 8062e6e:	2300      	movs	r3, #0
}
 8062e70:	4618      	mov	r0, r3
 8062e72:	3708      	adds	r7, #8
 8062e74:	46bd      	mov	sp, r7
 8062e76:	bd80      	pop	{r7, pc}
 8062e78:	200056bc 	.word	0x200056bc

08062e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8062e7c:	b580      	push	{r7, lr}
 8062e7e:	b082      	sub	sp, #8
 8062e80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8062e82:	f000 fdc1 	bl	8063a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8062e86:	f000 f8a9 	bl	8062fdc <SystemClock_Config>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8062e8a:	b672      	cpsid	i
}
 8062e8c:	bf00      	nop

  /* USER CODE BEGIN SysInit */
  __disable_irq();
  SCB->VTOR = (FLASH_BASE | 0x60000U);
 8062e8e:	4b46      	ldr	r3, [pc, #280]	; (8062fa8 <main+0x12c>)
 8062e90:	4a46      	ldr	r2, [pc, #280]	; (8062fac <main+0x130>)
 8062e92:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8062e94:	b662      	cpsie	i
}
 8062e96:	bf00      	nop
  __enable_irq();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8062e98:	f7ff fdae 	bl	80629f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8062e9c:	f7ff ff10 	bl	8062cc0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8062ea0:	f000 fa08 	bl	80632b4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8062ea4:	f007 fdb4 	bl	806aa10 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8062ea8:	f000 fcb6 	bl	8063818 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8062eac:	f7fe fffc 	bl	8061ea8 <MX_DMA_Init>
  MX_ADC1_Init();
 8062eb0:	f7fe f9f6 	bl	80612a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8062eb4:	f000 fc86 	bl	80637c4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8062eb8:	f000 f9aa 	bl	8063210 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // delay needed for sd to stabilize as well as to make the upload
  // of new firmware possible (boot related issue);
  HAL_Delay(2000);
 8062ebc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8062ec0:	f000 fde4 	bl	8063a8c <HAL_Delay>

  int initStatus = -1;
 8062ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062ec8:	607b      	str	r3, [r7, #4]

  initStatus = MPU6050_Init();
 8062eca:	f000 f913 	bl	80630f4 <MPU6050_Init>
 8062ece:	6078      	str	r0, [r7, #4]
  myprintf("[INFO]: acc, gyro initialisation status: %d\n", initStatus);
 8062ed0:	687a      	ldr	r2, [r7, #4]
 8062ed2:	4937      	ldr	r1, [pc, #220]	; (8062fb0 <main+0x134>)
 8062ed4:	4837      	ldr	r0, [pc, #220]	; (8062fb4 <main+0x138>)
 8062ed6:	f010 fb97 	bl	8073608 <siprintf>
 8062eda:	4836      	ldr	r0, [pc, #216]	; (8062fb4 <main+0x138>)
 8062edc:	f7fd f98a 	bl	80601f4 <strlen>
 8062ee0:	4603      	mov	r3, r0
 8062ee2:	b29a      	uxth	r2, r3
 8062ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062ee8:	4932      	ldr	r1, [pc, #200]	; (8062fb4 <main+0x138>)
 8062eea:	4833      	ldr	r0, [pc, #204]	; (8062fb8 <main+0x13c>)
 8062eec:	f006 fd32 	bl	8069954 <HAL_UART_Transmit>

  bmp280_init_default_params(&bmp280.params);
 8062ef0:	4832      	ldr	r0, [pc, #200]	; (8062fbc <main+0x140>)
 8062ef2:	f7fe faa5 	bl	8061440 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8062ef6:	4b32      	ldr	r3, [pc, #200]	; (8062fc0 <main+0x144>)
 8062ef8:	2276      	movs	r2, #118	; 0x76
 8062efa:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8062efc:	4b30      	ldr	r3, [pc, #192]	; (8062fc0 <main+0x144>)
 8062efe:	4a31      	ldr	r2, [pc, #196]	; (8062fc4 <main+0x148>)
 8062f00:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8062f02:	e012      	b.n	8062f2a <main+0xae>
      	myprintf("[ERROR]: bmp280 init failed\n");
 8062f04:	4930      	ldr	r1, [pc, #192]	; (8062fc8 <main+0x14c>)
 8062f06:	482b      	ldr	r0, [pc, #172]	; (8062fb4 <main+0x138>)
 8062f08:	f010 fb7e 	bl	8073608 <siprintf>
 8062f0c:	4829      	ldr	r0, [pc, #164]	; (8062fb4 <main+0x138>)
 8062f0e:	f7fd f971 	bl	80601f4 <strlen>
 8062f12:	4603      	mov	r3, r0
 8062f14:	b29a      	uxth	r2, r3
 8062f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062f1a:	4926      	ldr	r1, [pc, #152]	; (8062fb4 <main+0x138>)
 8062f1c:	4826      	ldr	r0, [pc, #152]	; (8062fb8 <main+0x13c>)
 8062f1e:	f006 fd19 	bl	8069954 <HAL_UART_Transmit>
      	HAL_Delay(2000);
 8062f22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8062f26:	f000 fdb1 	bl	8063a8c <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8062f2a:	4924      	ldr	r1, [pc, #144]	; (8062fbc <main+0x140>)
 8062f2c:	4824      	ldr	r0, [pc, #144]	; (8062fc0 <main+0x144>)
 8062f2e:	f7fe fc01 	bl	8061734 <bmp280_init>
 8062f32:	4603      	mov	r3, r0
 8062f34:	f083 0301 	eor.w	r3, r3, #1
 8062f38:	b2db      	uxtb	r3, r3
 8062f3a:	2b00      	cmp	r3, #0
 8062f3c:	d1e2      	bne.n	8062f04 <main+0x88>
  }

  myprintf("bmp280 initialized\n");
 8062f3e:	4923      	ldr	r1, [pc, #140]	; (8062fcc <main+0x150>)
 8062f40:	481c      	ldr	r0, [pc, #112]	; (8062fb4 <main+0x138>)
 8062f42:	f010 fb61 	bl	8073608 <siprintf>
 8062f46:	481b      	ldr	r0, [pc, #108]	; (8062fb4 <main+0x138>)
 8062f48:	f7fd f954 	bl	80601f4 <strlen>
 8062f4c:	4603      	mov	r3, r0
 8062f4e:	b29a      	uxth	r2, r3
 8062f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062f54:	4917      	ldr	r1, [pc, #92]	; (8062fb4 <main+0x138>)
 8062f56:	4818      	ldr	r0, [pc, #96]	; (8062fb8 <main+0x13c>)
 8062f58:	f006 fcfc 	bl	8069954 <HAL_UART_Transmit>

  while (TEMT6000_Init(&hadc1) != TEMT6000_OK) {
 8062f5c:	e012      	b.n	8062f84 <main+0x108>
	  myprintf("[ERROR]: temt6000 init failed\n");
 8062f5e:	491c      	ldr	r1, [pc, #112]	; (8062fd0 <main+0x154>)
 8062f60:	4814      	ldr	r0, [pc, #80]	; (8062fb4 <main+0x138>)
 8062f62:	f010 fb51 	bl	8073608 <siprintf>
 8062f66:	4813      	ldr	r0, [pc, #76]	; (8062fb4 <main+0x138>)
 8062f68:	f7fd f944 	bl	80601f4 <strlen>
 8062f6c:	4603      	mov	r3, r0
 8062f6e:	b29a      	uxth	r2, r3
 8062f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062f74:	490f      	ldr	r1, [pc, #60]	; (8062fb4 <main+0x138>)
 8062f76:	4810      	ldr	r0, [pc, #64]	; (8062fb8 <main+0x13c>)
 8062f78:	f006 fcec 	bl	8069954 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8062f7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8062f80:	f000 fd84 	bl	8063a8c <HAL_Delay>
  while (TEMT6000_Init(&hadc1) != TEMT6000_OK) {
 8062f84:	4813      	ldr	r0, [pc, #76]	; (8062fd4 <main+0x158>)
 8062f86:	f000 fbb3 	bl	80636f0 <TEMT6000_Init>
 8062f8a:	4603      	mov	r3, r0
 8062f8c:	2b00      	cmp	r3, #0
 8062f8e:	d1e6      	bne.n	8062f5e <main+0xe2>
  }

  // run in the background receive from uart
  // in order to implment possibility to wake up
  HAL_UART_Receive_IT(&huart2, (uint8_t *)notification_buffer, 1);
 8062f90:	2201      	movs	r2, #1
 8062f92:	4911      	ldr	r1, [pc, #68]	; (8062fd8 <main+0x15c>)
 8062f94:	4808      	ldr	r0, [pc, #32]	; (8062fb8 <main+0x13c>)
 8062f96:	f006 fe11 	bl	8069bbc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8062f9a:	f00b f819 	bl	806dfd0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8062f9e:	f7fe ffa3 	bl	8061ee8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8062fa2:	f00b f839 	bl	806e018 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8062fa6:	e7fe      	b.n	8062fa6 <main+0x12a>
 8062fa8:	e000ed00 	.word	0xe000ed00
 8062fac:	08060000 	.word	0x08060000
 8062fb0:	08077240 	.word	0x08077240
 8062fb4:	2000031c 	.word	0x2000031c
 8062fb8:	20005828 	.word	0x20005828
 8062fbc:	20004f40 	.word	0x20004f40
 8062fc0:	20004f14 	.word	0x20004f14
 8062fc4:	200056bc 	.word	0x200056bc
 8062fc8:	08077270 	.word	0x08077270
 8062fcc:	08077290 	.word	0x08077290
 8062fd0:	080772a4 	.word	0x080772a4
 8062fd4:	20004f48 	.word	0x20004f48
 8062fd8:	20004e30 	.word	0x20004e30

08062fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8062fdc:	b580      	push	{r7, lr}
 8062fde:	b094      	sub	sp, #80	; 0x50
 8062fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8062fe2:	f107 0320 	add.w	r3, r7, #32
 8062fe6:	2230      	movs	r2, #48	; 0x30
 8062fe8:	2100      	movs	r1, #0
 8062fea:	4618      	mov	r0, r3
 8062fec:	f00f fbaf 	bl	807274e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8062ff0:	f107 030c 	add.w	r3, r7, #12
 8062ff4:	2200      	movs	r2, #0
 8062ff6:	601a      	str	r2, [r3, #0]
 8062ff8:	605a      	str	r2, [r3, #4]
 8062ffa:	609a      	str	r2, [r3, #8]
 8062ffc:	60da      	str	r2, [r3, #12]
 8062ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8063000:	2300      	movs	r3, #0
 8063002:	60bb      	str	r3, [r7, #8]
 8063004:	4b28      	ldr	r3, [pc, #160]	; (80630a8 <SystemClock_Config+0xcc>)
 8063006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063008:	4a27      	ldr	r2, [pc, #156]	; (80630a8 <SystemClock_Config+0xcc>)
 806300a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 806300e:	6413      	str	r3, [r2, #64]	; 0x40
 8063010:	4b25      	ldr	r3, [pc, #148]	; (80630a8 <SystemClock_Config+0xcc>)
 8063012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8063018:	60bb      	str	r3, [r7, #8]
 806301a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 806301c:	2300      	movs	r3, #0
 806301e:	607b      	str	r3, [r7, #4]
 8063020:	4b22      	ldr	r3, [pc, #136]	; (80630ac <SystemClock_Config+0xd0>)
 8063022:	681b      	ldr	r3, [r3, #0]
 8063024:	4a21      	ldr	r2, [pc, #132]	; (80630ac <SystemClock_Config+0xd0>)
 8063026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 806302a:	6013      	str	r3, [r2, #0]
 806302c:	4b1f      	ldr	r3, [pc, #124]	; (80630ac <SystemClock_Config+0xd0>)
 806302e:	681b      	ldr	r3, [r3, #0]
 8063030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8063034:	607b      	str	r3, [r7, #4]
 8063036:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8063038:	2309      	movs	r3, #9
 806303a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 806303c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8063040:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8063042:	2301      	movs	r3, #1
 8063044:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8063046:	2302      	movs	r3, #2
 8063048:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 806304a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 806304e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8063050:	2304      	movs	r3, #4
 8063052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8063054:	23c0      	movs	r3, #192	; 0xc0
 8063056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8063058:	2304      	movs	r3, #4
 806305a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 806305c:	2308      	movs	r3, #8
 806305e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8063060:	f107 0320 	add.w	r3, r7, #32
 8063064:	4618      	mov	r0, r3
 8063066:	f004 fadd 	bl	8067624 <HAL_RCC_OscConfig>
 806306a:	4603      	mov	r3, r0
 806306c:	2b00      	cmp	r3, #0
 806306e:	d001      	beq.n	8063074 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8063070:	f000 f830 	bl	80630d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8063074:	230f      	movs	r3, #15
 8063076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8063078:	2302      	movs	r3, #2
 806307a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 806307c:	2300      	movs	r3, #0
 806307e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8063080:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8063084:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8063086:	2300      	movs	r3, #0
 8063088:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 806308a:	f107 030c 	add.w	r3, r7, #12
 806308e:	2103      	movs	r1, #3
 8063090:	4618      	mov	r0, r3
 8063092:	f004 fdef 	bl	8067c74 <HAL_RCC_ClockConfig>
 8063096:	4603      	mov	r3, r0
 8063098:	2b00      	cmp	r3, #0
 806309a:	d001      	beq.n	80630a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 806309c:	f000 f81a 	bl	80630d4 <Error_Handler>
  }
}
 80630a0:	bf00      	nop
 80630a2:	3750      	adds	r7, #80	; 0x50
 80630a4:	46bd      	mov	sp, r7
 80630a6:	bd80      	pop	{r7, pc}
 80630a8:	40023800 	.word	0x40023800
 80630ac:	40007000 	.word	0x40007000

080630b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80630b0:	b580      	push	{r7, lr}
 80630b2:	b082      	sub	sp, #8
 80630b4:	af00      	add	r7, sp, #0
 80630b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80630b8:	687b      	ldr	r3, [r7, #4]
 80630ba:	681b      	ldr	r3, [r3, #0]
 80630bc:	4a04      	ldr	r2, [pc, #16]	; (80630d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80630be:	4293      	cmp	r3, r2
 80630c0:	d101      	bne.n	80630c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80630c2:	f000 fcc3 	bl	8063a4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80630c6:	bf00      	nop
 80630c8:	3708      	adds	r7, #8
 80630ca:	46bd      	mov	sp, r7
 80630cc:	bd80      	pop	{r7, pc}
 80630ce:	bf00      	nop
 80630d0:	40000c00 	.word	0x40000c00

080630d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80630d4:	b480      	push	{r7}
 80630d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80630d8:	b672      	cpsid	i
}
 80630da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80630dc:	e7fe      	b.n	80630dc <Error_Handler+0x8>

080630de <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80630de:	b480      	push	{r7}
 80630e0:	b083      	sub	sp, #12
 80630e2:	af00      	add	r7, sp, #0
 80630e4:	6078      	str	r0, [r7, #4]
 80630e6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80630e8:	bf00      	nop
 80630ea:	370c      	adds	r7, #12
 80630ec:	46bd      	mov	sp, r7
 80630ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80630f2:	4770      	bx	lr

080630f4 <MPU6050_Init>:
#include "mpu6050.h"
#include "i2c.h"
#include <stdio.h>

int MPU6050_Init(void){
 80630f4:	b580      	push	{r7, lr}
 80630f6:	b084      	sub	sp, #16
 80630f8:	af00      	add	r7, sp, #0

    uint8_t buffer[7];
    int res = 0;
 80630fa:	2300      	movs	r3, #0
 80630fc:	60fb      	str	r3, [r7, #12]

    buffer[0] = MPU6050_RA_PWR_MGMT_1;
 80630fe:	236b      	movs	r3, #107	; 0x6b
 8063100:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x00;
 8063102:	2300      	movs	r3, #0
 8063104:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8063106:	1d3b      	adds	r3, r7, #4
 8063108:	2202      	movs	r2, #2
 806310a:	4619      	mov	r1, r3
 806310c:	2068      	movs	r0, #104	; 0x68
 806310e:	f7ff fe4d 	bl	8062dac <I2C_WriteBuffer>
 8063112:	60f8      	str	r0, [r7, #12]
    if (res != 0) return res;
 8063114:	68fb      	ldr	r3, [r7, #12]
 8063116:	2b00      	cmp	r3, #0
 8063118:	d001      	beq.n	806311e <MPU6050_Init+0x2a>
 806311a:	68fb      	ldr	r3, [r7, #12]
 806311c:	e01b      	b.n	8063156 <MPU6050_Init+0x62>

    buffer[0] = MPU6050_RA_GYRO_CONFIG;
 806311e:	231b      	movs	r3, #27
 8063120:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x8;
 8063122:	2308      	movs	r3, #8
 8063124:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8063126:	1d3b      	adds	r3, r7, #4
 8063128:	2202      	movs	r2, #2
 806312a:	4619      	mov	r1, r3
 806312c:	2068      	movs	r0, #104	; 0x68
 806312e:	f7ff fe3d 	bl	8062dac <I2C_WriteBuffer>
 8063132:	60f8      	str	r0, [r7, #12]
    if (res != 0) return res;
 8063134:	68fb      	ldr	r3, [r7, #12]
 8063136:	2b00      	cmp	r3, #0
 8063138:	d001      	beq.n	806313e <MPU6050_Init+0x4a>
 806313a:	68fb      	ldr	r3, [r7, #12]
 806313c:	e00b      	b.n	8063156 <MPU6050_Init+0x62>

    buffer[0] = MPU6050_RA_ACCEL_CONFIG;
 806313e:	231c      	movs	r3, #28
 8063140:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x10;
 8063142:	2310      	movs	r3, #16
 8063144:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8063146:	1d3b      	adds	r3, r7, #4
 8063148:	2202      	movs	r2, #2
 806314a:	4619      	mov	r1, r3
 806314c:	2068      	movs	r0, #104	; 0x68
 806314e:	f7ff fe2d 	bl	8062dac <I2C_WriteBuffer>
 8063152:	60f8      	str	r0, [r7, #12]

    return res;
 8063154:	68fb      	ldr	r3, [r7, #12]
}
 8063156:	4618      	mov	r0, r3
 8063158:	3710      	adds	r7, #16
 806315a:	46bd      	mov	sp, r7
 806315c:	bd80      	pop	{r7, pc}

0806315e <MPU6050_GetAllData>:

void MPU6050_GetAllData(int16_t *Data){
 806315e:	b580      	push	{r7, lr}
 8063160:	b088      	sub	sp, #32
 8063162:	af00      	add	r7, sp, #0
 8063164:	6078      	str	r0, [r7, #4]

  uint8_t accelbuffer[14];

  I2C_ReadBuffer(MPU6050_ADDRESS_AD0_LOW,MPU6050_RA_ACCEL_XOUT_H, accelbuffer, 14);
 8063166:	f107 0208 	add.w	r2, r7, #8
 806316a:	230e      	movs	r3, #14
 806316c:	213b      	movs	r1, #59	; 0x3b
 806316e:	2068      	movs	r0, #104	; 0x68
 8063170:	f7ff fe4c 	bl	8062e0c <I2C_ReadBuffer>

  /* Registers 59 to 64 – Accelerometer Measurements */
  for (int i = 0; i< 3; i++)
 8063174:	2300      	movs	r3, #0
 8063176:	61fb      	str	r3, [r7, #28]
 8063178:	e01c      	b.n	80631b4 <MPU6050_GetAllData+0x56>
      Data[i] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 806317a:	69fb      	ldr	r3, [r7, #28]
 806317c:	005b      	lsls	r3, r3, #1
 806317e:	f107 0220 	add.w	r2, r7, #32
 8063182:	4413      	add	r3, r2
 8063184:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8063188:	021b      	lsls	r3, r3, #8
 806318a:	b29a      	uxth	r2, r3
 806318c:	69fb      	ldr	r3, [r7, #28]
 806318e:	005b      	lsls	r3, r3, #1
 8063190:	3301      	adds	r3, #1
 8063192:	f107 0120 	add.w	r1, r7, #32
 8063196:	440b      	add	r3, r1
 8063198:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 806319c:	b29b      	uxth	r3, r3
 806319e:	4413      	add	r3, r2
 80631a0:	b299      	uxth	r1, r3
 80631a2:	69fb      	ldr	r3, [r7, #28]
 80631a4:	005b      	lsls	r3, r3, #1
 80631a6:	687a      	ldr	r2, [r7, #4]
 80631a8:	4413      	add	r3, r2
 80631aa:	b20a      	sxth	r2, r1
 80631ac:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i< 3; i++)
 80631ae:	69fb      	ldr	r3, [r7, #28]
 80631b0:	3301      	adds	r3, #1
 80631b2:	61fb      	str	r3, [r7, #28]
 80631b4:	69fb      	ldr	r3, [r7, #28]
 80631b6:	2b02      	cmp	r3, #2
 80631b8:	dddf      	ble.n	806317a <MPU6050_GetAllData+0x1c>

  /* Registers 65 and 66 – Temperature Measurement */

  /* Registers 67 to 72 – Gyroscope Measurements */
  for (int i = 4; i < 7; i++)
 80631ba:	2304      	movs	r3, #4
 80631bc:	61bb      	str	r3, [r7, #24]
 80631be:	e01f      	b.n	8063200 <MPU6050_GetAllData+0xa2>
      Data[i - 1] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 80631c0:	69bb      	ldr	r3, [r7, #24]
 80631c2:	005b      	lsls	r3, r3, #1
 80631c4:	f107 0220 	add.w	r2, r7, #32
 80631c8:	4413      	add	r3, r2
 80631ca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80631ce:	021b      	lsls	r3, r3, #8
 80631d0:	b29a      	uxth	r2, r3
 80631d2:	69bb      	ldr	r3, [r7, #24]
 80631d4:	005b      	lsls	r3, r3, #1
 80631d6:	3301      	adds	r3, #1
 80631d8:	f107 0120 	add.w	r1, r7, #32
 80631dc:	440b      	add	r3, r1
 80631de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80631e2:	b29b      	uxth	r3, r3
 80631e4:	4413      	add	r3, r2
 80631e6:	b299      	uxth	r1, r3
 80631e8:	69bb      	ldr	r3, [r7, #24]
 80631ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80631ee:	3b01      	subs	r3, #1
 80631f0:	005b      	lsls	r3, r3, #1
 80631f2:	687a      	ldr	r2, [r7, #4]
 80631f4:	4413      	add	r3, r2
 80631f6:	b20a      	sxth	r2, r1
 80631f8:	801a      	strh	r2, [r3, #0]
  for (int i = 4; i < 7; i++)
 80631fa:	69bb      	ldr	r3, [r7, #24]
 80631fc:	3301      	adds	r3, #1
 80631fe:	61bb      	str	r3, [r7, #24]
 8063200:	69bb      	ldr	r3, [r7, #24]
 8063202:	2b06      	cmp	r3, #6
 8063204:	dddc      	ble.n	80631c0 <MPU6050_GetAllData+0x62>

}
 8063206:	bf00      	nop
 8063208:	bf00      	nop
 806320a:	3720      	adds	r7, #32
 806320c:	46bd      	mov	sp, r7
 806320e:	bd80      	pop	{r7, pc}

08063210 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8063210:	b580      	push	{r7, lr}
 8063212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8063214:	4b0f      	ldr	r3, [pc, #60]	; (8063254 <MX_RTC_Init+0x44>)
 8063216:	4a10      	ldr	r2, [pc, #64]	; (8063258 <MX_RTC_Init+0x48>)
 8063218:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 806321a:	4b0e      	ldr	r3, [pc, #56]	; (8063254 <MX_RTC_Init+0x44>)
 806321c:	2200      	movs	r2, #0
 806321e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8063220:	4b0c      	ldr	r3, [pc, #48]	; (8063254 <MX_RTC_Init+0x44>)
 8063222:	227f      	movs	r2, #127	; 0x7f
 8063224:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8063226:	4b0b      	ldr	r3, [pc, #44]	; (8063254 <MX_RTC_Init+0x44>)
 8063228:	22ff      	movs	r2, #255	; 0xff
 806322a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 806322c:	4b09      	ldr	r3, [pc, #36]	; (8063254 <MX_RTC_Init+0x44>)
 806322e:	2200      	movs	r2, #0
 8063230:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8063232:	4b08      	ldr	r3, [pc, #32]	; (8063254 <MX_RTC_Init+0x44>)
 8063234:	2200      	movs	r2, #0
 8063236:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8063238:	4b06      	ldr	r3, [pc, #24]	; (8063254 <MX_RTC_Init+0x44>)
 806323a:	2200      	movs	r2, #0
 806323c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 806323e:	4805      	ldr	r0, [pc, #20]	; (8063254 <MX_RTC_Init+0x44>)
 8063240:	f005 fa02 	bl	8068648 <HAL_RTC_Init>
 8063244:	4603      	mov	r3, r0
 8063246:	2b00      	cmp	r3, #0
 8063248:	d001      	beq.n	806324e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 806324a:	f7ff ff43 	bl	80630d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 806324e:	bf00      	nop
 8063250:	bd80      	pop	{r7, pc}
 8063252:	bf00      	nop
 8063254:	20005710 	.word	0x20005710
 8063258:	40002800 	.word	0x40002800

0806325c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 806325c:	b580      	push	{r7, lr}
 806325e:	b088      	sub	sp, #32
 8063260:	af00      	add	r7, sp, #0
 8063262:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8063264:	f107 0308 	add.w	r3, r7, #8
 8063268:	2200      	movs	r2, #0
 806326a:	601a      	str	r2, [r3, #0]
 806326c:	605a      	str	r2, [r3, #4]
 806326e:	609a      	str	r2, [r3, #8]
 8063270:	60da      	str	r2, [r3, #12]
 8063272:	611a      	str	r2, [r3, #16]
 8063274:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8063276:	687b      	ldr	r3, [r7, #4]
 8063278:	681b      	ldr	r3, [r3, #0]
 806327a:	4a0c      	ldr	r2, [pc, #48]	; (80632ac <HAL_RTC_MspInit+0x50>)
 806327c:	4293      	cmp	r3, r2
 806327e:	d111      	bne.n	80632a4 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8063280:	2302      	movs	r3, #2
 8063282:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8063284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8063288:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 806328a:	f107 0308 	add.w	r3, r7, #8
 806328e:	4618      	mov	r0, r3
 8063290:	f004 ffc6 	bl	8068220 <HAL_RCCEx_PeriphCLKConfig>
 8063294:	4603      	mov	r3, r0
 8063296:	2b00      	cmp	r3, #0
 8063298:	d001      	beq.n	806329e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 806329a:	f7ff ff1b 	bl	80630d4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 806329e:	4b04      	ldr	r3, [pc, #16]	; (80632b0 <HAL_RTC_MspInit+0x54>)
 80632a0:	2201      	movs	r2, #1
 80632a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80632a4:	bf00      	nop
 80632a6:	3720      	adds	r7, #32
 80632a8:	46bd      	mov	sp, r7
 80632aa:	bd80      	pop	{r7, pc}
 80632ac:	40002800 	.word	0x40002800
 80632b0:	42470e3c 	.word	0x42470e3c

080632b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80632b4:	b580      	push	{r7, lr}
 80632b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80632b8:	4b17      	ldr	r3, [pc, #92]	; (8063318 <MX_SPI1_Init+0x64>)
 80632ba:	4a18      	ldr	r2, [pc, #96]	; (806331c <MX_SPI1_Init+0x68>)
 80632bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80632be:	4b16      	ldr	r3, [pc, #88]	; (8063318 <MX_SPI1_Init+0x64>)
 80632c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80632c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80632c6:	4b14      	ldr	r3, [pc, #80]	; (8063318 <MX_SPI1_Init+0x64>)
 80632c8:	2200      	movs	r2, #0
 80632ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80632cc:	4b12      	ldr	r3, [pc, #72]	; (8063318 <MX_SPI1_Init+0x64>)
 80632ce:	2200      	movs	r2, #0
 80632d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80632d2:	4b11      	ldr	r3, [pc, #68]	; (8063318 <MX_SPI1_Init+0x64>)
 80632d4:	2200      	movs	r2, #0
 80632d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80632d8:	4b0f      	ldr	r3, [pc, #60]	; (8063318 <MX_SPI1_Init+0x64>)
 80632da:	2200      	movs	r2, #0
 80632dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80632de:	4b0e      	ldr	r3, [pc, #56]	; (8063318 <MX_SPI1_Init+0x64>)
 80632e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80632e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80632e6:	4b0c      	ldr	r3, [pc, #48]	; (8063318 <MX_SPI1_Init+0x64>)
 80632e8:	2230      	movs	r2, #48	; 0x30
 80632ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80632ec:	4b0a      	ldr	r3, [pc, #40]	; (8063318 <MX_SPI1_Init+0x64>)
 80632ee:	2200      	movs	r2, #0
 80632f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80632f2:	4b09      	ldr	r3, [pc, #36]	; (8063318 <MX_SPI1_Init+0x64>)
 80632f4:	2200      	movs	r2, #0
 80632f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80632f8:	4b07      	ldr	r3, [pc, #28]	; (8063318 <MX_SPI1_Init+0x64>)
 80632fa:	2200      	movs	r2, #0
 80632fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80632fe:	4b06      	ldr	r3, [pc, #24]	; (8063318 <MX_SPI1_Init+0x64>)
 8063300:	220a      	movs	r2, #10
 8063302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8063304:	4804      	ldr	r0, [pc, #16]	; (8063318 <MX_SPI1_Init+0x64>)
 8063306:	f005 fb35 	bl	8068974 <HAL_SPI_Init>
 806330a:	4603      	mov	r3, r0
 806330c:	2b00      	cmp	r3, #0
 806330e:	d001      	beq.n	8063314 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8063310:	f7ff fee0 	bl	80630d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8063314:	bf00      	nop
 8063316:	bd80      	pop	{r7, pc}
 8063318:	20005730 	.word	0x20005730
 806331c:	40013000 	.word	0x40013000

08063320 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8063320:	b580      	push	{r7, lr}
 8063322:	b08a      	sub	sp, #40	; 0x28
 8063324:	af00      	add	r7, sp, #0
 8063326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8063328:	f107 0314 	add.w	r3, r7, #20
 806332c:	2200      	movs	r2, #0
 806332e:	601a      	str	r2, [r3, #0]
 8063330:	605a      	str	r2, [r3, #4]
 8063332:	609a      	str	r2, [r3, #8]
 8063334:	60da      	str	r2, [r3, #12]
 8063336:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8063338:	687b      	ldr	r3, [r7, #4]
 806333a:	681b      	ldr	r3, [r3, #0]
 806333c:	4a19      	ldr	r2, [pc, #100]	; (80633a4 <HAL_SPI_MspInit+0x84>)
 806333e:	4293      	cmp	r3, r2
 8063340:	d12b      	bne.n	806339a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8063342:	2300      	movs	r3, #0
 8063344:	613b      	str	r3, [r7, #16]
 8063346:	4b18      	ldr	r3, [pc, #96]	; (80633a8 <HAL_SPI_MspInit+0x88>)
 8063348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806334a:	4a17      	ldr	r2, [pc, #92]	; (80633a8 <HAL_SPI_MspInit+0x88>)
 806334c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8063350:	6453      	str	r3, [r2, #68]	; 0x44
 8063352:	4b15      	ldr	r3, [pc, #84]	; (80633a8 <HAL_SPI_MspInit+0x88>)
 8063354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8063356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 806335a:	613b      	str	r3, [r7, #16]
 806335c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 806335e:	2300      	movs	r3, #0
 8063360:	60fb      	str	r3, [r7, #12]
 8063362:	4b11      	ldr	r3, [pc, #68]	; (80633a8 <HAL_SPI_MspInit+0x88>)
 8063364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063366:	4a10      	ldr	r2, [pc, #64]	; (80633a8 <HAL_SPI_MspInit+0x88>)
 8063368:	f043 0301 	orr.w	r3, r3, #1
 806336c:	6313      	str	r3, [r2, #48]	; 0x30
 806336e:	4b0e      	ldr	r3, [pc, #56]	; (80633a8 <HAL_SPI_MspInit+0x88>)
 8063370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063372:	f003 0301 	and.w	r3, r3, #1
 8063376:	60fb      	str	r3, [r7, #12]
 8063378:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 806337a:	23e0      	movs	r3, #224	; 0xe0
 806337c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 806337e:	2302      	movs	r3, #2
 8063380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8063382:	2301      	movs	r3, #1
 8063384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8063386:	2303      	movs	r3, #3
 8063388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 806338a:	2305      	movs	r3, #5
 806338c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 806338e:	f107 0314 	add.w	r3, r7, #20
 8063392:	4619      	mov	r1, r3
 8063394:	4805      	ldr	r0, [pc, #20]	; (80633ac <HAL_SPI_MspInit+0x8c>)
 8063396:	f002 f961 	bl	806565c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 806339a:	bf00      	nop
 806339c:	3728      	adds	r7, #40	; 0x28
 806339e:	46bd      	mov	sp, r7
 80633a0:	bd80      	pop	{r7, pc}
 80633a2:	bf00      	nop
 80633a4:	40013000 	.word	0x40013000
 80633a8:	40023800 	.word	0x40023800
 80633ac:	40020000 	.word	0x40020000

080633b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80633b0:	b580      	push	{r7, lr}
 80633b2:	b082      	sub	sp, #8
 80633b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80633b6:	2300      	movs	r3, #0
 80633b8:	607b      	str	r3, [r7, #4]
 80633ba:	4b12      	ldr	r3, [pc, #72]	; (8063404 <HAL_MspInit+0x54>)
 80633bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80633be:	4a11      	ldr	r2, [pc, #68]	; (8063404 <HAL_MspInit+0x54>)
 80633c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80633c4:	6453      	str	r3, [r2, #68]	; 0x44
 80633c6:	4b0f      	ldr	r3, [pc, #60]	; (8063404 <HAL_MspInit+0x54>)
 80633c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80633ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80633ce:	607b      	str	r3, [r7, #4]
 80633d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80633d2:	2300      	movs	r3, #0
 80633d4:	603b      	str	r3, [r7, #0]
 80633d6:	4b0b      	ldr	r3, [pc, #44]	; (8063404 <HAL_MspInit+0x54>)
 80633d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80633da:	4a0a      	ldr	r2, [pc, #40]	; (8063404 <HAL_MspInit+0x54>)
 80633dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80633e0:	6413      	str	r3, [r2, #64]	; 0x40
 80633e2:	4b08      	ldr	r3, [pc, #32]	; (8063404 <HAL_MspInit+0x54>)
 80633e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80633e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80633ea:	603b      	str	r3, [r7, #0]
 80633ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80633ee:	2200      	movs	r2, #0
 80633f0:	210f      	movs	r1, #15
 80633f2:	f06f 0001 	mvn.w	r0, #1
 80633f6:	f001 fb6b 	bl	8064ad0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80633fa:	bf00      	nop
 80633fc:	3708      	adds	r7, #8
 80633fe:	46bd      	mov	sp, r7
 8063400:	bd80      	pop	{r7, pc}
 8063402:	bf00      	nop
 8063404:	40023800 	.word	0x40023800

08063408 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8063408:	b580      	push	{r7, lr}
 806340a:	b08c      	sub	sp, #48	; 0x30
 806340c:	af00      	add	r7, sp, #0
 806340e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8063410:	2300      	movs	r3, #0
 8063412:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8063414:	2300      	movs	r3, #0
 8063416:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8063418:	2200      	movs	r2, #0
 806341a:	6879      	ldr	r1, [r7, #4]
 806341c:	2032      	movs	r0, #50	; 0x32
 806341e:	f001 fb57 	bl	8064ad0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8063422:	2032      	movs	r0, #50	; 0x32
 8063424:	f001 fb80 	bl	8064b28 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8063428:	2300      	movs	r3, #0
 806342a:	60fb      	str	r3, [r7, #12]
 806342c:	4b1f      	ldr	r3, [pc, #124]	; (80634ac <HAL_InitTick+0xa4>)
 806342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063430:	4a1e      	ldr	r2, [pc, #120]	; (80634ac <HAL_InitTick+0xa4>)
 8063432:	f043 0308 	orr.w	r3, r3, #8
 8063436:	6413      	str	r3, [r2, #64]	; 0x40
 8063438:	4b1c      	ldr	r3, [pc, #112]	; (80634ac <HAL_InitTick+0xa4>)
 806343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806343c:	f003 0308 	and.w	r3, r3, #8
 8063440:	60fb      	str	r3, [r7, #12]
 8063442:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8063444:	f107 0210 	add.w	r2, r7, #16
 8063448:	f107 0314 	add.w	r3, r7, #20
 806344c:	4611      	mov	r1, r2
 806344e:	4618      	mov	r0, r3
 8063450:	f004 feb4 	bl	80681bc <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8063454:	f004 fe8a 	bl	806816c <HAL_RCC_GetPCLK1Freq>
 8063458:	4603      	mov	r3, r0
 806345a:	005b      	lsls	r3, r3, #1
 806345c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 806345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8063460:	4a13      	ldr	r2, [pc, #76]	; (80634b0 <HAL_InitTick+0xa8>)
 8063462:	fba2 2303 	umull	r2, r3, r2, r3
 8063466:	0c9b      	lsrs	r3, r3, #18
 8063468:	3b01      	subs	r3, #1
 806346a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 806346c:	4b11      	ldr	r3, [pc, #68]	; (80634b4 <HAL_InitTick+0xac>)
 806346e:	4a12      	ldr	r2, [pc, #72]	; (80634b8 <HAL_InitTick+0xb0>)
 8063470:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8063472:	4b10      	ldr	r3, [pc, #64]	; (80634b4 <HAL_InitTick+0xac>)
 8063474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8063478:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 806347a:	4a0e      	ldr	r2, [pc, #56]	; (80634b4 <HAL_InitTick+0xac>)
 806347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806347e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8063480:	4b0c      	ldr	r3, [pc, #48]	; (80634b4 <HAL_InitTick+0xac>)
 8063482:	2200      	movs	r2, #0
 8063484:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8063486:	4b0b      	ldr	r3, [pc, #44]	; (80634b4 <HAL_InitTick+0xac>)
 8063488:	2200      	movs	r2, #0
 806348a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 806348c:	4809      	ldr	r0, [pc, #36]	; (80634b4 <HAL_InitTick+0xac>)
 806348e:	f005 fe85 	bl	806919c <HAL_TIM_Base_Init>
 8063492:	4603      	mov	r3, r0
 8063494:	2b00      	cmp	r3, #0
 8063496:	d104      	bne.n	80634a2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8063498:	4806      	ldr	r0, [pc, #24]	; (80634b4 <HAL_InitTick+0xac>)
 806349a:	f005 ff4f 	bl	806933c <HAL_TIM_Base_Start_IT>
 806349e:	4603      	mov	r3, r0
 80634a0:	e000      	b.n	80634a4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80634a2:	2301      	movs	r3, #1
}
 80634a4:	4618      	mov	r0, r3
 80634a6:	3730      	adds	r7, #48	; 0x30
 80634a8:	46bd      	mov	sp, r7
 80634aa:	bd80      	pop	{r7, pc}
 80634ac:	40023800 	.word	0x40023800
 80634b0:	431bde83 	.word	0x431bde83
 80634b4:	20005788 	.word	0x20005788
 80634b8:	40000c00 	.word	0x40000c00

080634bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80634bc:	b480      	push	{r7}
 80634be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80634c0:	e7fe      	b.n	80634c0 <NMI_Handler+0x4>

080634c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80634c2:	b480      	push	{r7}
 80634c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80634c6:	e7fe      	b.n	80634c6 <HardFault_Handler+0x4>

080634c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80634c8:	b480      	push	{r7}
 80634ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80634cc:	e7fe      	b.n	80634cc <MemManage_Handler+0x4>

080634ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80634ce:	b480      	push	{r7}
 80634d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80634d2:	e7fe      	b.n	80634d2 <BusFault_Handler+0x4>

080634d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80634d4:	b480      	push	{r7}
 80634d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80634d8:	e7fe      	b.n	80634d8 <UsageFault_Handler+0x4>

080634da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80634da:	b480      	push	{r7}
 80634dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80634de:	bf00      	nop
 80634e0:	46bd      	mov	sp, r7
 80634e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80634e6:	4770      	bx	lr

080634e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80634e8:	b580      	push	{r7, lr}
 80634ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80634ec:	4802      	ldr	r0, [pc, #8]	; (80634f8 <ADC_IRQHandler+0x10>)
 80634ee:	f000 fc4f 	bl	8063d90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80634f2:	bf00      	nop
 80634f4:	bd80      	pop	{r7, pc}
 80634f6:	bf00      	nop
 80634f8:	20004f48 	.word	0x20004f48

080634fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80634fc:	b580      	push	{r7, lr}
 80634fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8063500:	4802      	ldr	r0, [pc, #8]	; (806350c <USART2_IRQHandler+0x10>)
 8063502:	f006 fb8b 	bl	8069c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8063506:	bf00      	nop
 8063508:	bd80      	pop	{r7, pc}
 806350a:	bf00      	nop
 806350c:	20005828 	.word	0x20005828

08063510 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8063510:	b580      	push	{r7, lr}
 8063512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8063514:	4802      	ldr	r0, [pc, #8]	; (8063520 <TIM5_IRQHandler+0x10>)
 8063516:	f005 ffa3 	bl	8069460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 806351a:	bf00      	nop
 806351c:	bd80      	pop	{r7, pc}
 806351e:	bf00      	nop
 8063520:	20005788 	.word	0x20005788

08063524 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8063524:	b580      	push	{r7, lr}
 8063526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8063528:	4802      	ldr	r0, [pc, #8]	; (8063534 <DMA2_Stream0_IRQHandler+0x10>)
 806352a:	f001 fe2d 	bl	8065188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 806352e:	bf00      	nop
 8063530:	bd80      	pop	{r7, pc}
 8063532:	bf00      	nop
 8063534:	20004f90 	.word	0x20004f90

08063538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8063538:	b480      	push	{r7}
 806353a:	af00      	add	r7, sp, #0
	return 1;
 806353c:	2301      	movs	r3, #1
}
 806353e:	4618      	mov	r0, r3
 8063540:	46bd      	mov	sp, r7
 8063542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063546:	4770      	bx	lr

08063548 <_kill>:

int _kill(int pid, int sig)
{
 8063548:	b580      	push	{r7, lr}
 806354a:	b082      	sub	sp, #8
 806354c:	af00      	add	r7, sp, #0
 806354e:	6078      	str	r0, [r7, #4]
 8063550:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8063552:	f00e ffcb 	bl	80724ec <__errno>
 8063556:	4603      	mov	r3, r0
 8063558:	2216      	movs	r2, #22
 806355a:	601a      	str	r2, [r3, #0]
	return -1;
 806355c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8063560:	4618      	mov	r0, r3
 8063562:	3708      	adds	r7, #8
 8063564:	46bd      	mov	sp, r7
 8063566:	bd80      	pop	{r7, pc}

08063568 <_exit>:

void _exit (int status)
{
 8063568:	b580      	push	{r7, lr}
 806356a:	b082      	sub	sp, #8
 806356c:	af00      	add	r7, sp, #0
 806356e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8063570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8063574:	6878      	ldr	r0, [r7, #4]
 8063576:	f7ff ffe7 	bl	8063548 <_kill>
	while (1) {}		/* Make sure we hang here */
 806357a:	e7fe      	b.n	806357a <_exit+0x12>

0806357c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 806357c:	b580      	push	{r7, lr}
 806357e:	b086      	sub	sp, #24
 8063580:	af00      	add	r7, sp, #0
 8063582:	60f8      	str	r0, [r7, #12]
 8063584:	60b9      	str	r1, [r7, #8]
 8063586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8063588:	2300      	movs	r3, #0
 806358a:	617b      	str	r3, [r7, #20]
 806358c:	e00a      	b.n	80635a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 806358e:	f3af 8000 	nop.w
 8063592:	4601      	mov	r1, r0
 8063594:	68bb      	ldr	r3, [r7, #8]
 8063596:	1c5a      	adds	r2, r3, #1
 8063598:	60ba      	str	r2, [r7, #8]
 806359a:	b2ca      	uxtb	r2, r1
 806359c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 806359e:	697b      	ldr	r3, [r7, #20]
 80635a0:	3301      	adds	r3, #1
 80635a2:	617b      	str	r3, [r7, #20]
 80635a4:	697a      	ldr	r2, [r7, #20]
 80635a6:	687b      	ldr	r3, [r7, #4]
 80635a8:	429a      	cmp	r2, r3
 80635aa:	dbf0      	blt.n	806358e <_read+0x12>
	}

return len;
 80635ac:	687b      	ldr	r3, [r7, #4]
}
 80635ae:	4618      	mov	r0, r3
 80635b0:	3718      	adds	r7, #24
 80635b2:	46bd      	mov	sp, r7
 80635b4:	bd80      	pop	{r7, pc}

080635b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80635b6:	b580      	push	{r7, lr}
 80635b8:	b086      	sub	sp, #24
 80635ba:	af00      	add	r7, sp, #0
 80635bc:	60f8      	str	r0, [r7, #12]
 80635be:	60b9      	str	r1, [r7, #8]
 80635c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80635c2:	2300      	movs	r3, #0
 80635c4:	617b      	str	r3, [r7, #20]
 80635c6:	e009      	b.n	80635dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80635c8:	68bb      	ldr	r3, [r7, #8]
 80635ca:	1c5a      	adds	r2, r3, #1
 80635cc:	60ba      	str	r2, [r7, #8]
 80635ce:	781b      	ldrb	r3, [r3, #0]
 80635d0:	4618      	mov	r0, r3
 80635d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80635d6:	697b      	ldr	r3, [r7, #20]
 80635d8:	3301      	adds	r3, #1
 80635da:	617b      	str	r3, [r7, #20]
 80635dc:	697a      	ldr	r2, [r7, #20]
 80635de:	687b      	ldr	r3, [r7, #4]
 80635e0:	429a      	cmp	r2, r3
 80635e2:	dbf1      	blt.n	80635c8 <_write+0x12>
	}
	return len;
 80635e4:	687b      	ldr	r3, [r7, #4]
}
 80635e6:	4618      	mov	r0, r3
 80635e8:	3718      	adds	r7, #24
 80635ea:	46bd      	mov	sp, r7
 80635ec:	bd80      	pop	{r7, pc}

080635ee <_close>:

int _close(int file)
{
 80635ee:	b480      	push	{r7}
 80635f0:	b083      	sub	sp, #12
 80635f2:	af00      	add	r7, sp, #0
 80635f4:	6078      	str	r0, [r7, #4]
	return -1;
 80635f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80635fa:	4618      	mov	r0, r3
 80635fc:	370c      	adds	r7, #12
 80635fe:	46bd      	mov	sp, r7
 8063600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063604:	4770      	bx	lr

08063606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8063606:	b480      	push	{r7}
 8063608:	b083      	sub	sp, #12
 806360a:	af00      	add	r7, sp, #0
 806360c:	6078      	str	r0, [r7, #4]
 806360e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8063610:	683b      	ldr	r3, [r7, #0]
 8063612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8063616:	605a      	str	r2, [r3, #4]
	return 0;
 8063618:	2300      	movs	r3, #0
}
 806361a:	4618      	mov	r0, r3
 806361c:	370c      	adds	r7, #12
 806361e:	46bd      	mov	sp, r7
 8063620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063624:	4770      	bx	lr

08063626 <_isatty>:

int _isatty(int file)
{
 8063626:	b480      	push	{r7}
 8063628:	b083      	sub	sp, #12
 806362a:	af00      	add	r7, sp, #0
 806362c:	6078      	str	r0, [r7, #4]
	return 1;
 806362e:	2301      	movs	r3, #1
}
 8063630:	4618      	mov	r0, r3
 8063632:	370c      	adds	r7, #12
 8063634:	46bd      	mov	sp, r7
 8063636:	f85d 7b04 	ldr.w	r7, [sp], #4
 806363a:	4770      	bx	lr

0806363c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 806363c:	b480      	push	{r7}
 806363e:	b085      	sub	sp, #20
 8063640:	af00      	add	r7, sp, #0
 8063642:	60f8      	str	r0, [r7, #12]
 8063644:	60b9      	str	r1, [r7, #8]
 8063646:	607a      	str	r2, [r7, #4]
	return 0;
 8063648:	2300      	movs	r3, #0
}
 806364a:	4618      	mov	r0, r3
 806364c:	3714      	adds	r7, #20
 806364e:	46bd      	mov	sp, r7
 8063650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063654:	4770      	bx	lr
	...

08063658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8063658:	b580      	push	{r7, lr}
 806365a:	b086      	sub	sp, #24
 806365c:	af00      	add	r7, sp, #0
 806365e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8063660:	4a14      	ldr	r2, [pc, #80]	; (80636b4 <_sbrk+0x5c>)
 8063662:	4b15      	ldr	r3, [pc, #84]	; (80636b8 <_sbrk+0x60>)
 8063664:	1ad3      	subs	r3, r2, r3
 8063666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8063668:	697b      	ldr	r3, [r7, #20]
 806366a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 806366c:	4b13      	ldr	r3, [pc, #76]	; (80636bc <_sbrk+0x64>)
 806366e:	681b      	ldr	r3, [r3, #0]
 8063670:	2b00      	cmp	r3, #0
 8063672:	d102      	bne.n	806367a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8063674:	4b11      	ldr	r3, [pc, #68]	; (80636bc <_sbrk+0x64>)
 8063676:	4a12      	ldr	r2, [pc, #72]	; (80636c0 <_sbrk+0x68>)
 8063678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 806367a:	4b10      	ldr	r3, [pc, #64]	; (80636bc <_sbrk+0x64>)
 806367c:	681a      	ldr	r2, [r3, #0]
 806367e:	687b      	ldr	r3, [r7, #4]
 8063680:	4413      	add	r3, r2
 8063682:	693a      	ldr	r2, [r7, #16]
 8063684:	429a      	cmp	r2, r3
 8063686:	d207      	bcs.n	8063698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8063688:	f00e ff30 	bl	80724ec <__errno>
 806368c:	4603      	mov	r3, r0
 806368e:	220c      	movs	r2, #12
 8063690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8063692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8063696:	e009      	b.n	80636ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8063698:	4b08      	ldr	r3, [pc, #32]	; (80636bc <_sbrk+0x64>)
 806369a:	681b      	ldr	r3, [r3, #0]
 806369c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 806369e:	4b07      	ldr	r3, [pc, #28]	; (80636bc <_sbrk+0x64>)
 80636a0:	681a      	ldr	r2, [r3, #0]
 80636a2:	687b      	ldr	r3, [r7, #4]
 80636a4:	4413      	add	r3, r2
 80636a6:	4a05      	ldr	r2, [pc, #20]	; (80636bc <_sbrk+0x64>)
 80636a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80636aa:	68fb      	ldr	r3, [r7, #12]
}
 80636ac:	4618      	mov	r0, r3
 80636ae:	3718      	adds	r7, #24
 80636b0:	46bd      	mov	sp, r7
 80636b2:	bd80      	pop	{r7, pc}
 80636b4:	20020000 	.word	0x20020000
 80636b8:	00000400 	.word	0x00000400
 80636bc:	2000041c 	.word	0x2000041c
 80636c0:	20005d38 	.word	0x20005d38

080636c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80636c4:	b480      	push	{r7}
 80636c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80636c8:	4b07      	ldr	r3, [pc, #28]	; (80636e8 <SystemInit+0x24>)
 80636ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80636ce:	4a06      	ldr	r2, [pc, #24]	; (80636e8 <SystemInit+0x24>)
 80636d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80636d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80636d8:	4b03      	ldr	r3, [pc, #12]	; (80636e8 <SystemInit+0x24>)
 80636da:	4a04      	ldr	r2, [pc, #16]	; (80636ec <SystemInit+0x28>)
 80636dc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80636de:	bf00      	nop
 80636e0:	46bd      	mov	sp, r7
 80636e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80636e6:	4770      	bx	lr
 80636e8:	e000ed00 	.word	0xe000ed00
 80636ec:	08060000 	.word	0x08060000

080636f0 <TEMT6000_Init>:
ADC_HandleTypeDef *temt6000_adc;

volatile uint16_t AdcValue[TEMT6000_ADC_SAMPLES];

TEMT6000_STATUS TEMT6000_Init(ADC_HandleTypeDef *hadc)
{
 80636f0:	b580      	push	{r7, lr}
 80636f2:	b082      	sub	sp, #8
 80636f4:	af00      	add	r7, sp, #0
 80636f6:	6078      	str	r0, [r7, #4]
	temt6000_adc = hadc;
 80636f8:	4a09      	ldr	r2, [pc, #36]	; (8063720 <TEMT6000_Init+0x30>)
 80636fa:	687b      	ldr	r3, [r7, #4]
 80636fc:	6013      	str	r3, [r2, #0]

	if(HAL_OK == HAL_ADC_Start_DMA(temt6000_adc, (uint32_t*)AdcValue, TEMT6000_ADC_SAMPLES))
 80636fe:	4b08      	ldr	r3, [pc, #32]	; (8063720 <TEMT6000_Init+0x30>)
 8063700:	681b      	ldr	r3, [r3, #0]
 8063702:	2208      	movs	r2, #8
 8063704:	4907      	ldr	r1, [pc, #28]	; (8063724 <TEMT6000_Init+0x34>)
 8063706:	4618      	mov	r0, r3
 8063708:	f000 fcb2 	bl	8064070 <HAL_ADC_Start_DMA>
 806370c:	4603      	mov	r3, r0
 806370e:	2b00      	cmp	r3, #0
 8063710:	d101      	bne.n	8063716 <TEMT6000_Init+0x26>
		return TEMT6000_OK;
 8063712:	2300      	movs	r3, #0
 8063714:	e000      	b.n	8063718 <TEMT6000_Init+0x28>

	return TEMT6000_ERROR;
 8063716:	2301      	movs	r3, #1
}
 8063718:	4618      	mov	r0, r3
 806371a:	3708      	adds	r7, #8
 806371c:	46bd      	mov	sp, r7
 806371e:	bd80      	pop	{r7, pc}
 8063720:	200057d0 	.word	0x200057d0
 8063724:	200057d4 	.word	0x200057d4

08063728 <TEMT6000_ReadLight>:

TEMT6000_STATUS TEMT6000_ReadLight(float *Result)
{
 8063728:	b580      	push	{r7, lr}
 806372a:	b084      	sub	sp, #16
 806372c:	af00      	add	r7, sp, #0
 806372e:	6078      	str	r0, [r7, #4]
	uint32_t AdcAverage;
	uint8_t i;

	AdcAverage = 0;
 8063730:	2300      	movs	r3, #0
 8063732:	60fb      	str	r3, [r7, #12]

	if(HAL_OK !=HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcValue, TEMT6000_ADC_SAMPLES))return TEMT6000_ERROR;
 8063734:	2208      	movs	r2, #8
 8063736:	491d      	ldr	r1, [pc, #116]	; (80637ac <TEMT6000_ReadLight+0x84>)
 8063738:	481d      	ldr	r0, [pc, #116]	; (80637b0 <TEMT6000_ReadLight+0x88>)
 806373a:	f000 fc99 	bl	8064070 <HAL_ADC_Start_DMA>
 806373e:	4603      	mov	r3, r0
 8063740:	2b00      	cmp	r3, #0
 8063742:	d001      	beq.n	8063748 <TEMT6000_ReadLight+0x20>
 8063744:	2301      	movs	r3, #1
 8063746:	e02d      	b.n	80637a4 <TEMT6000_ReadLight+0x7c>


	for(i = 0; i < TEMT6000_ADC_SAMPLES; i++)
 8063748:	2300      	movs	r3, #0
 806374a:	72fb      	strb	r3, [r7, #11]
 806374c:	e00b      	b.n	8063766 <TEMT6000_ReadLight+0x3e>
	{
		AdcAverage += AdcValue[i];
 806374e:	7afb      	ldrb	r3, [r7, #11]
 8063750:	4a16      	ldr	r2, [pc, #88]	; (80637ac <TEMT6000_ReadLight+0x84>)
 8063752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8063756:	b29b      	uxth	r3, r3
 8063758:	461a      	mov	r2, r3
 806375a:	68fb      	ldr	r3, [r7, #12]
 806375c:	4413      	add	r3, r2
 806375e:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < TEMT6000_ADC_SAMPLES; i++)
 8063760:	7afb      	ldrb	r3, [r7, #11]
 8063762:	3301      	adds	r3, #1
 8063764:	72fb      	strb	r3, [r7, #11]
 8063766:	7afb      	ldrb	r3, [r7, #11]
 8063768:	2b07      	cmp	r3, #7
 806376a:	d9f0      	bls.n	806374e <TEMT6000_ReadLight+0x26>
	}

	AdcAverage /= TEMT6000_ADC_SAMPLES;
 806376c:	68fb      	ldr	r3, [r7, #12]
 806376e:	08db      	lsrs	r3, r3, #3
 8063770:	60fb      	str	r3, [r7, #12]

	*Result = ((((float)AdcAverage / (float)TEMT6000_ADC_MAX_VALUE) * (float)TEMT6000_POWER_SUPPLY) / TEMT6000_RESISTOR_OHMS) * 2000000.0;
 8063772:	68fb      	ldr	r3, [r7, #12]
 8063774:	ee07 3a90 	vmov	s15, r3
 8063778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 806377c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80637b4 <TEMT6000_ReadLight+0x8c>
 8063780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8063784:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80637b8 <TEMT6000_ReadLight+0x90>
 8063788:	ee27 7a87 	vmul.f32	s14, s15, s14
 806378c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80637bc <TEMT6000_ReadLight+0x94>
 8063790:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8063794:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80637c0 <TEMT6000_ReadLight+0x98>
 8063798:	ee67 7a87 	vmul.f32	s15, s15, s14
 806379c:	687b      	ldr	r3, [r7, #4]
 806379e:	edc3 7a00 	vstr	s15, [r3]

	return TEMT6000_OK;
 80637a2:	2300      	movs	r3, #0
}
 80637a4:	4618      	mov	r0, r3
 80637a6:	3710      	adds	r7, #16
 80637a8:	46bd      	mov	sp, r7
 80637aa:	bd80      	pop	{r7, pc}
 80637ac:	200057d4 	.word	0x200057d4
 80637b0:	20004f48 	.word	0x20004f48
 80637b4:	45800000 	.word	0x45800000
 80637b8:	40533333 	.word	0x40533333
 80637bc:	447a0000 	.word	0x447a0000
 80637c0:	49f42400 	.word	0x49f42400

080637c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80637c4:	b580      	push	{r7, lr}
 80637c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80637c8:	4b11      	ldr	r3, [pc, #68]	; (8063810 <MX_USART1_UART_Init+0x4c>)
 80637ca:	4a12      	ldr	r2, [pc, #72]	; (8063814 <MX_USART1_UART_Init+0x50>)
 80637cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80637ce:	4b10      	ldr	r3, [pc, #64]	; (8063810 <MX_USART1_UART_Init+0x4c>)
 80637d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80637d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80637d6:	4b0e      	ldr	r3, [pc, #56]	; (8063810 <MX_USART1_UART_Init+0x4c>)
 80637d8:	2200      	movs	r2, #0
 80637da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80637dc:	4b0c      	ldr	r3, [pc, #48]	; (8063810 <MX_USART1_UART_Init+0x4c>)
 80637de:	2200      	movs	r2, #0
 80637e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80637e2:	4b0b      	ldr	r3, [pc, #44]	; (8063810 <MX_USART1_UART_Init+0x4c>)
 80637e4:	2200      	movs	r2, #0
 80637e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80637e8:	4b09      	ldr	r3, [pc, #36]	; (8063810 <MX_USART1_UART_Init+0x4c>)
 80637ea:	220c      	movs	r2, #12
 80637ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80637ee:	4b08      	ldr	r3, [pc, #32]	; (8063810 <MX_USART1_UART_Init+0x4c>)
 80637f0:	2200      	movs	r2, #0
 80637f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80637f4:	4b06      	ldr	r3, [pc, #24]	; (8063810 <MX_USART1_UART_Init+0x4c>)
 80637f6:	2200      	movs	r2, #0
 80637f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80637fa:	4805      	ldr	r0, [pc, #20]	; (8063810 <MX_USART1_UART_Init+0x4c>)
 80637fc:	f005 fff4 	bl	80697e8 <HAL_UART_Init>
 8063800:	4603      	mov	r3, r0
 8063802:	2b00      	cmp	r3, #0
 8063804:	d001      	beq.n	806380a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8063806:	f7ff fc65 	bl	80630d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 806380a:	bf00      	nop
 806380c:	bd80      	pop	{r7, pc}
 806380e:	bf00      	nop
 8063810:	200057e4 	.word	0x200057e4
 8063814:	40011000 	.word	0x40011000

08063818 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8063818:	b580      	push	{r7, lr}
 806381a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 806381c:	4b11      	ldr	r3, [pc, #68]	; (8063864 <MX_USART2_UART_Init+0x4c>)
 806381e:	4a12      	ldr	r2, [pc, #72]	; (8063868 <MX_USART2_UART_Init+0x50>)
 8063820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8063822:	4b10      	ldr	r3, [pc, #64]	; (8063864 <MX_USART2_UART_Init+0x4c>)
 8063824:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8063828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 806382a:	4b0e      	ldr	r3, [pc, #56]	; (8063864 <MX_USART2_UART_Init+0x4c>)
 806382c:	2200      	movs	r2, #0
 806382e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8063830:	4b0c      	ldr	r3, [pc, #48]	; (8063864 <MX_USART2_UART_Init+0x4c>)
 8063832:	2200      	movs	r2, #0
 8063834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8063836:	4b0b      	ldr	r3, [pc, #44]	; (8063864 <MX_USART2_UART_Init+0x4c>)
 8063838:	2200      	movs	r2, #0
 806383a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 806383c:	4b09      	ldr	r3, [pc, #36]	; (8063864 <MX_USART2_UART_Init+0x4c>)
 806383e:	220c      	movs	r2, #12
 8063840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8063842:	4b08      	ldr	r3, [pc, #32]	; (8063864 <MX_USART2_UART_Init+0x4c>)
 8063844:	2200      	movs	r2, #0
 8063846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8063848:	4b06      	ldr	r3, [pc, #24]	; (8063864 <MX_USART2_UART_Init+0x4c>)
 806384a:	2200      	movs	r2, #0
 806384c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 806384e:	4805      	ldr	r0, [pc, #20]	; (8063864 <MX_USART2_UART_Init+0x4c>)
 8063850:	f005 ffca 	bl	80697e8 <HAL_UART_Init>
 8063854:	4603      	mov	r3, r0
 8063856:	2b00      	cmp	r3, #0
 8063858:	d001      	beq.n	806385e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 806385a:	f7ff fc3b 	bl	80630d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 806385e:	bf00      	nop
 8063860:	bd80      	pop	{r7, pc}
 8063862:	bf00      	nop
 8063864:	20005828 	.word	0x20005828
 8063868:	40004400 	.word	0x40004400

0806386c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 806386c:	b580      	push	{r7, lr}
 806386e:	b08c      	sub	sp, #48	; 0x30
 8063870:	af00      	add	r7, sp, #0
 8063872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8063874:	f107 031c 	add.w	r3, r7, #28
 8063878:	2200      	movs	r2, #0
 806387a:	601a      	str	r2, [r3, #0]
 806387c:	605a      	str	r2, [r3, #4]
 806387e:	609a      	str	r2, [r3, #8]
 8063880:	60da      	str	r2, [r3, #12]
 8063882:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8063884:	687b      	ldr	r3, [r7, #4]
 8063886:	681b      	ldr	r3, [r3, #0]
 8063888:	4a45      	ldr	r2, [pc, #276]	; (80639a0 <HAL_UART_MspInit+0x134>)
 806388a:	4293      	cmp	r3, r2
 806388c:	d14b      	bne.n	8063926 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 806388e:	2300      	movs	r3, #0
 8063890:	61bb      	str	r3, [r7, #24]
 8063892:	4b44      	ldr	r3, [pc, #272]	; (80639a4 <HAL_UART_MspInit+0x138>)
 8063894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8063896:	4a43      	ldr	r2, [pc, #268]	; (80639a4 <HAL_UART_MspInit+0x138>)
 8063898:	f043 0310 	orr.w	r3, r3, #16
 806389c:	6453      	str	r3, [r2, #68]	; 0x44
 806389e:	4b41      	ldr	r3, [pc, #260]	; (80639a4 <HAL_UART_MspInit+0x138>)
 80638a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80638a2:	f003 0310 	and.w	r3, r3, #16
 80638a6:	61bb      	str	r3, [r7, #24]
 80638a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80638aa:	2300      	movs	r3, #0
 80638ac:	617b      	str	r3, [r7, #20]
 80638ae:	4b3d      	ldr	r3, [pc, #244]	; (80639a4 <HAL_UART_MspInit+0x138>)
 80638b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80638b2:	4a3c      	ldr	r2, [pc, #240]	; (80639a4 <HAL_UART_MspInit+0x138>)
 80638b4:	f043 0301 	orr.w	r3, r3, #1
 80638b8:	6313      	str	r3, [r2, #48]	; 0x30
 80638ba:	4b3a      	ldr	r3, [pc, #232]	; (80639a4 <HAL_UART_MspInit+0x138>)
 80638bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80638be:	f003 0301 	and.w	r3, r3, #1
 80638c2:	617b      	str	r3, [r7, #20]
 80638c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80638c6:	2300      	movs	r3, #0
 80638c8:	613b      	str	r3, [r7, #16]
 80638ca:	4b36      	ldr	r3, [pc, #216]	; (80639a4 <HAL_UART_MspInit+0x138>)
 80638cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80638ce:	4a35      	ldr	r2, [pc, #212]	; (80639a4 <HAL_UART_MspInit+0x138>)
 80638d0:	f043 0302 	orr.w	r3, r3, #2
 80638d4:	6313      	str	r3, [r2, #48]	; 0x30
 80638d6:	4b33      	ldr	r3, [pc, #204]	; (80639a4 <HAL_UART_MspInit+0x138>)
 80638d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80638da:	f003 0302 	and.w	r3, r3, #2
 80638de:	613b      	str	r3, [r7, #16]
 80638e0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80638e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80638e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80638e8:	2302      	movs	r3, #2
 80638ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80638ec:	2300      	movs	r3, #0
 80638ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80638f0:	2303      	movs	r3, #3
 80638f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80638f4:	2307      	movs	r3, #7
 80638f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80638f8:	f107 031c 	add.w	r3, r7, #28
 80638fc:	4619      	mov	r1, r3
 80638fe:	482a      	ldr	r0, [pc, #168]	; (80639a8 <HAL_UART_MspInit+0x13c>)
 8063900:	f001 feac 	bl	806565c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8063904:	2380      	movs	r3, #128	; 0x80
 8063906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8063908:	2302      	movs	r3, #2
 806390a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 806390c:	2300      	movs	r3, #0
 806390e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8063910:	2303      	movs	r3, #3
 8063912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8063914:	2307      	movs	r3, #7
 8063916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8063918:	f107 031c 	add.w	r3, r7, #28
 806391c:	4619      	mov	r1, r3
 806391e:	4823      	ldr	r0, [pc, #140]	; (80639ac <HAL_UART_MspInit+0x140>)
 8063920:	f001 fe9c 	bl	806565c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8063924:	e038      	b.n	8063998 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8063926:	687b      	ldr	r3, [r7, #4]
 8063928:	681b      	ldr	r3, [r3, #0]
 806392a:	4a21      	ldr	r2, [pc, #132]	; (80639b0 <HAL_UART_MspInit+0x144>)
 806392c:	4293      	cmp	r3, r2
 806392e:	d133      	bne.n	8063998 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8063930:	2300      	movs	r3, #0
 8063932:	60fb      	str	r3, [r7, #12]
 8063934:	4b1b      	ldr	r3, [pc, #108]	; (80639a4 <HAL_UART_MspInit+0x138>)
 8063936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063938:	4a1a      	ldr	r2, [pc, #104]	; (80639a4 <HAL_UART_MspInit+0x138>)
 806393a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 806393e:	6413      	str	r3, [r2, #64]	; 0x40
 8063940:	4b18      	ldr	r3, [pc, #96]	; (80639a4 <HAL_UART_MspInit+0x138>)
 8063942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8063948:	60fb      	str	r3, [r7, #12]
 806394a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 806394c:	2300      	movs	r3, #0
 806394e:	60bb      	str	r3, [r7, #8]
 8063950:	4b14      	ldr	r3, [pc, #80]	; (80639a4 <HAL_UART_MspInit+0x138>)
 8063952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063954:	4a13      	ldr	r2, [pc, #76]	; (80639a4 <HAL_UART_MspInit+0x138>)
 8063956:	f043 0301 	orr.w	r3, r3, #1
 806395a:	6313      	str	r3, [r2, #48]	; 0x30
 806395c:	4b11      	ldr	r3, [pc, #68]	; (80639a4 <HAL_UART_MspInit+0x138>)
 806395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063960:	f003 0301 	and.w	r3, r3, #1
 8063964:	60bb      	str	r3, [r7, #8]
 8063966:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8063968:	230c      	movs	r3, #12
 806396a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 806396c:	2302      	movs	r3, #2
 806396e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8063970:	2300      	movs	r3, #0
 8063972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8063974:	2303      	movs	r3, #3
 8063976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8063978:	2307      	movs	r3, #7
 806397a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 806397c:	f107 031c 	add.w	r3, r7, #28
 8063980:	4619      	mov	r1, r3
 8063982:	4809      	ldr	r0, [pc, #36]	; (80639a8 <HAL_UART_MspInit+0x13c>)
 8063984:	f001 fe6a 	bl	806565c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8063988:	2200      	movs	r2, #0
 806398a:	2105      	movs	r1, #5
 806398c:	2026      	movs	r0, #38	; 0x26
 806398e:	f001 f89f 	bl	8064ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8063992:	2026      	movs	r0, #38	; 0x26
 8063994:	f001 f8c8 	bl	8064b28 <HAL_NVIC_EnableIRQ>
}
 8063998:	bf00      	nop
 806399a:	3730      	adds	r7, #48	; 0x30
 806399c:	46bd      	mov	sp, r7
 806399e:	bd80      	pop	{r7, pc}
 80639a0:	40011000 	.word	0x40011000
 80639a4:	40023800 	.word	0x40023800
 80639a8:	40020000 	.word	0x40020000
 80639ac:	40020400 	.word	0x40020400
 80639b0:	40004400 	.word	0x40004400

080639b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80639b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80639ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80639b8:	480d      	ldr	r0, [pc, #52]	; (80639f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80639ba:	490e      	ldr	r1, [pc, #56]	; (80639f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80639bc:	4a0e      	ldr	r2, [pc, #56]	; (80639f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80639be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80639c0:	e002      	b.n	80639c8 <LoopCopyDataInit>

080639c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80639c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80639c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80639c6:	3304      	adds	r3, #4

080639c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80639c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80639ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80639cc:	d3f9      	bcc.n	80639c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80639ce:	4a0b      	ldr	r2, [pc, #44]	; (80639fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80639d0:	4c0b      	ldr	r4, [pc, #44]	; (8063a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80639d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80639d4:	e001      	b.n	80639da <LoopFillZerobss>

080639d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80639d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80639d8:	3204      	adds	r2, #4

080639da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80639da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80639dc:	d3fb      	bcc.n	80639d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80639de:	f7ff fe71 	bl	80636c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80639e2:	f00e fe7f 	bl	80726e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80639e6:	f7ff fa49 	bl	8062e7c <main>
  bx  lr    
 80639ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80639ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80639f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80639f4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80639f8:	08077c74 	.word	0x08077c74
  ldr r2, =_sbss
 80639fc:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8063a00:	20005d34 	.word	0x20005d34

08063a04 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8063a04:	e7fe      	b.n	8063a04 <DMA1_Stream0_IRQHandler>
	...

08063a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8063a08:	b580      	push	{r7, lr}
 8063a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8063a0c:	4b0e      	ldr	r3, [pc, #56]	; (8063a48 <HAL_Init+0x40>)
 8063a0e:	681b      	ldr	r3, [r3, #0]
 8063a10:	4a0d      	ldr	r2, [pc, #52]	; (8063a48 <HAL_Init+0x40>)
 8063a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8063a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8063a18:	4b0b      	ldr	r3, [pc, #44]	; (8063a48 <HAL_Init+0x40>)
 8063a1a:	681b      	ldr	r3, [r3, #0]
 8063a1c:	4a0a      	ldr	r2, [pc, #40]	; (8063a48 <HAL_Init+0x40>)
 8063a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8063a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8063a24:	4b08      	ldr	r3, [pc, #32]	; (8063a48 <HAL_Init+0x40>)
 8063a26:	681b      	ldr	r3, [r3, #0]
 8063a28:	4a07      	ldr	r2, [pc, #28]	; (8063a48 <HAL_Init+0x40>)
 8063a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8063a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8063a30:	2003      	movs	r0, #3
 8063a32:	f001 f82d 	bl	8064a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8063a36:	200f      	movs	r0, #15
 8063a38:	f7ff fce6 	bl	8063408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8063a3c:	f7ff fcb8 	bl	80633b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8063a40:	2300      	movs	r3, #0
}
 8063a42:	4618      	mov	r0, r3
 8063a44:	bd80      	pop	{r7, pc}
 8063a46:	bf00      	nop
 8063a48:	40023c00 	.word	0x40023c00

08063a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8063a4c:	b480      	push	{r7}
 8063a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8063a50:	4b06      	ldr	r3, [pc, #24]	; (8063a6c <HAL_IncTick+0x20>)
 8063a52:	781b      	ldrb	r3, [r3, #0]
 8063a54:	461a      	mov	r2, r3
 8063a56:	4b06      	ldr	r3, [pc, #24]	; (8063a70 <HAL_IncTick+0x24>)
 8063a58:	681b      	ldr	r3, [r3, #0]
 8063a5a:	4413      	add	r3, r2
 8063a5c:	4a04      	ldr	r2, [pc, #16]	; (8063a70 <HAL_IncTick+0x24>)
 8063a5e:	6013      	str	r3, [r2, #0]
}
 8063a60:	bf00      	nop
 8063a62:	46bd      	mov	sp, r7
 8063a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063a68:	4770      	bx	lr
 8063a6a:	bf00      	nop
 8063a6c:	20000008 	.word	0x20000008
 8063a70:	2000586c 	.word	0x2000586c

08063a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8063a74:	b480      	push	{r7}
 8063a76:	af00      	add	r7, sp, #0
  return uwTick;
 8063a78:	4b03      	ldr	r3, [pc, #12]	; (8063a88 <HAL_GetTick+0x14>)
 8063a7a:	681b      	ldr	r3, [r3, #0]
}
 8063a7c:	4618      	mov	r0, r3
 8063a7e:	46bd      	mov	sp, r7
 8063a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063a84:	4770      	bx	lr
 8063a86:	bf00      	nop
 8063a88:	2000586c 	.word	0x2000586c

08063a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8063a8c:	b580      	push	{r7, lr}
 8063a8e:	b084      	sub	sp, #16
 8063a90:	af00      	add	r7, sp, #0
 8063a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8063a94:	f7ff ffee 	bl	8063a74 <HAL_GetTick>
 8063a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8063a9a:	687b      	ldr	r3, [r7, #4]
 8063a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8063a9e:	68fb      	ldr	r3, [r7, #12]
 8063aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8063aa4:	d005      	beq.n	8063ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8063aa6:	4b0a      	ldr	r3, [pc, #40]	; (8063ad0 <HAL_Delay+0x44>)
 8063aa8:	781b      	ldrb	r3, [r3, #0]
 8063aaa:	461a      	mov	r2, r3
 8063aac:	68fb      	ldr	r3, [r7, #12]
 8063aae:	4413      	add	r3, r2
 8063ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8063ab2:	bf00      	nop
 8063ab4:	f7ff ffde 	bl	8063a74 <HAL_GetTick>
 8063ab8:	4602      	mov	r2, r0
 8063aba:	68bb      	ldr	r3, [r7, #8]
 8063abc:	1ad3      	subs	r3, r2, r3
 8063abe:	68fa      	ldr	r2, [r7, #12]
 8063ac0:	429a      	cmp	r2, r3
 8063ac2:	d8f7      	bhi.n	8063ab4 <HAL_Delay+0x28>
  {
  }
}
 8063ac4:	bf00      	nop
 8063ac6:	bf00      	nop
 8063ac8:	3710      	adds	r7, #16
 8063aca:	46bd      	mov	sp, r7
 8063acc:	bd80      	pop	{r7, pc}
 8063ace:	bf00      	nop
 8063ad0:	20000008 	.word	0x20000008

08063ad4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8063ad4:	b580      	push	{r7, lr}
 8063ad6:	b084      	sub	sp, #16
 8063ad8:	af00      	add	r7, sp, #0
 8063ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8063adc:	2300      	movs	r3, #0
 8063ade:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8063ae0:	687b      	ldr	r3, [r7, #4]
 8063ae2:	2b00      	cmp	r3, #0
 8063ae4:	d101      	bne.n	8063aea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8063ae6:	2301      	movs	r3, #1
 8063ae8:	e147      	b.n	8063d7a <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8063aea:	687b      	ldr	r3, [r7, #4]
 8063aec:	681b      	ldr	r3, [r3, #0]
 8063aee:	4aa5      	ldr	r2, [pc, #660]	; (8063d84 <HAL_ADC_Init+0x2b0>)
 8063af0:	4293      	cmp	r3, r2
 8063af2:	d004      	beq.n	8063afe <HAL_ADC_Init+0x2a>
 8063af4:	f240 1143 	movw	r1, #323	; 0x143
 8063af8:	48a3      	ldr	r0, [pc, #652]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063afa:	f7ff faf0 	bl	80630de <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8063afe:	687b      	ldr	r3, [r7, #4]
 8063b00:	685b      	ldr	r3, [r3, #4]
 8063b02:	2b00      	cmp	r3, #0
 8063b04:	d013      	beq.n	8063b2e <HAL_ADC_Init+0x5a>
 8063b06:	687b      	ldr	r3, [r7, #4]
 8063b08:	685b      	ldr	r3, [r3, #4]
 8063b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8063b0e:	d00e      	beq.n	8063b2e <HAL_ADC_Init+0x5a>
 8063b10:	687b      	ldr	r3, [r7, #4]
 8063b12:	685b      	ldr	r3, [r3, #4]
 8063b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8063b18:	d009      	beq.n	8063b2e <HAL_ADC_Init+0x5a>
 8063b1a:	687b      	ldr	r3, [r7, #4]
 8063b1c:	685b      	ldr	r3, [r3, #4]
 8063b1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8063b22:	d004      	beq.n	8063b2e <HAL_ADC_Init+0x5a>
 8063b24:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8063b28:	4897      	ldr	r0, [pc, #604]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063b2a:	f7ff fad8 	bl	80630de <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8063b2e:	687b      	ldr	r3, [r7, #4]
 8063b30:	689b      	ldr	r3, [r3, #8]
 8063b32:	2b00      	cmp	r3, #0
 8063b34:	d013      	beq.n	8063b5e <HAL_ADC_Init+0x8a>
 8063b36:	687b      	ldr	r3, [r7, #4]
 8063b38:	689b      	ldr	r3, [r3, #8]
 8063b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8063b3e:	d00e      	beq.n	8063b5e <HAL_ADC_Init+0x8a>
 8063b40:	687b      	ldr	r3, [r7, #4]
 8063b42:	689b      	ldr	r3, [r3, #8]
 8063b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8063b48:	d009      	beq.n	8063b5e <HAL_ADC_Init+0x8a>
 8063b4a:	687b      	ldr	r3, [r7, #4]
 8063b4c:	689b      	ldr	r3, [r3, #8]
 8063b4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8063b52:	d004      	beq.n	8063b5e <HAL_ADC_Init+0x8a>
 8063b54:	f240 1145 	movw	r1, #325	; 0x145
 8063b58:	488b      	ldr	r0, [pc, #556]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063b5a:	f7ff fac0 	bl	80630de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8063b5e:	687b      	ldr	r3, [r7, #4]
 8063b60:	691b      	ldr	r3, [r3, #16]
 8063b62:	2b00      	cmp	r3, #0
 8063b64:	d008      	beq.n	8063b78 <HAL_ADC_Init+0xa4>
 8063b66:	687b      	ldr	r3, [r7, #4]
 8063b68:	691b      	ldr	r3, [r3, #16]
 8063b6a:	2b01      	cmp	r3, #1
 8063b6c:	d004      	beq.n	8063b78 <HAL_ADC_Init+0xa4>
 8063b6e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8063b72:	4885      	ldr	r0, [pc, #532]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063b74:	f7ff fab3 	bl	80630de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8063b78:	687b      	ldr	r3, [r7, #4]
 8063b7a:	7e1b      	ldrb	r3, [r3, #24]
 8063b7c:	2b00      	cmp	r3, #0
 8063b7e:	d008      	beq.n	8063b92 <HAL_ADC_Init+0xbe>
 8063b80:	687b      	ldr	r3, [r7, #4]
 8063b82:	7e1b      	ldrb	r3, [r3, #24]
 8063b84:	2b01      	cmp	r3, #1
 8063b86:	d004      	beq.n	8063b92 <HAL_ADC_Init+0xbe>
 8063b88:	f240 1147 	movw	r1, #327	; 0x147
 8063b8c:	487e      	ldr	r0, [pc, #504]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063b8e:	f7ff faa6 	bl	80630de <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8063b92:	687b      	ldr	r3, [r7, #4]
 8063b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b96:	2b00      	cmp	r3, #0
 8063b98:	d054      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063b9a:	687b      	ldr	r3, [r7, #4]
 8063b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8063ba2:	d04f      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063ba4:	687b      	ldr	r3, [r7, #4]
 8063ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8063bac:	d04a      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063bae:	687b      	ldr	r3, [r7, #4]
 8063bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063bb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8063bb6:	d045      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063bb8:	687b      	ldr	r3, [r7, #4]
 8063bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8063bc0:	d040      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063bc2:	687b      	ldr	r3, [r7, #4]
 8063bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063bc6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8063bca:	d03b      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063bcc:	687b      	ldr	r3, [r7, #4]
 8063bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063bd0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8063bd4:	d036      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063bd6:	687b      	ldr	r3, [r7, #4]
 8063bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063bda:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8063bde:	d031      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063be0:	687b      	ldr	r3, [r7, #4]
 8063be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8063be8:	d02c      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063bea:	687b      	ldr	r3, [r7, #4]
 8063bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063bee:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8063bf2:	d027      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063bf4:	687b      	ldr	r3, [r7, #4]
 8063bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063bf8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8063bfc:	d022      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063bfe:	687b      	ldr	r3, [r7, #4]
 8063c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063c02:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8063c06:	d01d      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063c08:	687b      	ldr	r3, [r7, #4]
 8063c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063c0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8063c10:	d018      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063c12:	687b      	ldr	r3, [r7, #4]
 8063c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063c16:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8063c1a:	d013      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063c1c:	687b      	ldr	r3, [r7, #4]
 8063c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063c20:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8063c24:	d00e      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063c26:	687b      	ldr	r3, [r7, #4]
 8063c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063c2a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8063c2e:	d009      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063c30:	687b      	ldr	r3, [r7, #4]
 8063c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063c34:	4a55      	ldr	r2, [pc, #340]	; (8063d8c <HAL_ADC_Init+0x2b8>)
 8063c36:	4293      	cmp	r3, r2
 8063c38:	d004      	beq.n	8063c44 <HAL_ADC_Init+0x170>
 8063c3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8063c3e:	4852      	ldr	r0, [pc, #328]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063c40:	f7ff fa4d 	bl	80630de <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8063c44:	687b      	ldr	r3, [r7, #4]
 8063c46:	68db      	ldr	r3, [r3, #12]
 8063c48:	2b00      	cmp	r3, #0
 8063c4a:	d009      	beq.n	8063c60 <HAL_ADC_Init+0x18c>
 8063c4c:	687b      	ldr	r3, [r7, #4]
 8063c4e:	68db      	ldr	r3, [r3, #12]
 8063c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8063c54:	d004      	beq.n	8063c60 <HAL_ADC_Init+0x18c>
 8063c56:	f240 1149 	movw	r1, #329	; 0x149
 8063c5a:	484b      	ldr	r0, [pc, #300]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063c5c:	f7ff fa3f 	bl	80630de <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8063c60:	687b      	ldr	r3, [r7, #4]
 8063c62:	69db      	ldr	r3, [r3, #28]
 8063c64:	2b00      	cmp	r3, #0
 8063c66:	d003      	beq.n	8063c70 <HAL_ADC_Init+0x19c>
 8063c68:	687b      	ldr	r3, [r7, #4]
 8063c6a:	69db      	ldr	r3, [r3, #28]
 8063c6c:	2b10      	cmp	r3, #16
 8063c6e:	d904      	bls.n	8063c7a <HAL_ADC_Init+0x1a6>
 8063c70:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8063c74:	4844      	ldr	r0, [pc, #272]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063c76:	f7ff fa32 	bl	80630de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8063c7a:	687b      	ldr	r3, [r7, #4]
 8063c7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8063c80:	2b00      	cmp	r3, #0
 8063c82:	d009      	beq.n	8063c98 <HAL_ADC_Init+0x1c4>
 8063c84:	687b      	ldr	r3, [r7, #4]
 8063c86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8063c8a:	2b01      	cmp	r3, #1
 8063c8c:	d004      	beq.n	8063c98 <HAL_ADC_Init+0x1c4>
 8063c8e:	f240 114b 	movw	r1, #331	; 0x14b
 8063c92:	483d      	ldr	r0, [pc, #244]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063c94:	f7ff fa23 	bl	80630de <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8063c98:	687b      	ldr	r3, [r7, #4]
 8063c9a:	695b      	ldr	r3, [r3, #20]
 8063c9c:	2b01      	cmp	r3, #1
 8063c9e:	d00c      	beq.n	8063cba <HAL_ADC_Init+0x1e6>
 8063ca0:	687b      	ldr	r3, [r7, #4]
 8063ca2:	695b      	ldr	r3, [r3, #20]
 8063ca4:	2b00      	cmp	r3, #0
 8063ca6:	d008      	beq.n	8063cba <HAL_ADC_Init+0x1e6>
 8063ca8:	687b      	ldr	r3, [r7, #4]
 8063caa:	695b      	ldr	r3, [r3, #20]
 8063cac:	2b02      	cmp	r3, #2
 8063cae:	d004      	beq.n	8063cba <HAL_ADC_Init+0x1e6>
 8063cb0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8063cb4:	4834      	ldr	r0, [pc, #208]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063cb6:	f7ff fa12 	bl	80630de <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8063cba:	687b      	ldr	r3, [r7, #4]
 8063cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8063cc0:	2b00      	cmp	r3, #0
 8063cc2:	d009      	beq.n	8063cd8 <HAL_ADC_Init+0x204>
 8063cc4:	687b      	ldr	r3, [r7, #4]
 8063cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8063cca:	2b01      	cmp	r3, #1
 8063ccc:	d004      	beq.n	8063cd8 <HAL_ADC_Init+0x204>
 8063cce:	f240 114d 	movw	r1, #333	; 0x14d
 8063cd2:	482d      	ldr	r0, [pc, #180]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063cd4:	f7ff fa03 	bl	80630de <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8063cd8:	687b      	ldr	r3, [r7, #4]
 8063cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063cdc:	4a2b      	ldr	r2, [pc, #172]	; (8063d8c <HAL_ADC_Init+0x2b8>)
 8063cde:	4293      	cmp	r3, r2
 8063ce0:	d017      	beq.n	8063d12 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8063ce2:	687b      	ldr	r3, [r7, #4]
 8063ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063ce6:	2b00      	cmp	r3, #0
 8063ce8:	d013      	beq.n	8063d12 <HAL_ADC_Init+0x23e>
 8063cea:	687b      	ldr	r3, [r7, #4]
 8063cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8063cf2:	d00e      	beq.n	8063d12 <HAL_ADC_Init+0x23e>
 8063cf4:	687b      	ldr	r3, [r7, #4]
 8063cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8063cfc:	d009      	beq.n	8063d12 <HAL_ADC_Init+0x23e>
 8063cfe:	687b      	ldr	r3, [r7, #4]
 8063d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8063d06:	d004      	beq.n	8063d12 <HAL_ADC_Init+0x23e>
 8063d08:	f240 1151 	movw	r1, #337	; 0x151
 8063d0c:	481e      	ldr	r0, [pc, #120]	; (8063d88 <HAL_ADC_Init+0x2b4>)
 8063d0e:	f7ff f9e6 	bl	80630de <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8063d12:	687b      	ldr	r3, [r7, #4]
 8063d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063d16:	2b00      	cmp	r3, #0
 8063d18:	d109      	bne.n	8063d2e <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8063d1a:	6878      	ldr	r0, [r7, #4]
 8063d1c:	f7fd fb12 	bl	8061344 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8063d20:	687b      	ldr	r3, [r7, #4]
 8063d22:	2200      	movs	r2, #0
 8063d24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8063d26:	687b      	ldr	r3, [r7, #4]
 8063d28:	2200      	movs	r2, #0
 8063d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8063d2e:	687b      	ldr	r3, [r7, #4]
 8063d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063d32:	f003 0310 	and.w	r3, r3, #16
 8063d36:	2b00      	cmp	r3, #0
 8063d38:	d118      	bne.n	8063d6c <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8063d3a:	687b      	ldr	r3, [r7, #4]
 8063d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063d3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8063d42:	f023 0302 	bic.w	r3, r3, #2
 8063d46:	f043 0202 	orr.w	r2, r3, #2
 8063d4a:	687b      	ldr	r3, [r7, #4]
 8063d4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8063d4e:	6878      	ldr	r0, [r7, #4]
 8063d50:	f000 fc44 	bl	80645dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8063d54:	687b      	ldr	r3, [r7, #4]
 8063d56:	2200      	movs	r2, #0
 8063d58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8063d5a:	687b      	ldr	r3, [r7, #4]
 8063d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063d5e:	f023 0303 	bic.w	r3, r3, #3
 8063d62:	f043 0201 	orr.w	r2, r3, #1
 8063d66:	687b      	ldr	r3, [r7, #4]
 8063d68:	641a      	str	r2, [r3, #64]	; 0x40
 8063d6a:	e001      	b.n	8063d70 <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8063d6c:	2301      	movs	r3, #1
 8063d6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8063d70:	687b      	ldr	r3, [r7, #4]
 8063d72:	2200      	movs	r2, #0
 8063d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8063d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8063d7a:	4618      	mov	r0, r3
 8063d7c:	3710      	adds	r7, #16
 8063d7e:	46bd      	mov	sp, r7
 8063d80:	bd80      	pop	{r7, pc}
 8063d82:	bf00      	nop
 8063d84:	40012000 	.word	0x40012000
 8063d88:	080772c4 	.word	0x080772c4
 8063d8c:	0f000001 	.word	0x0f000001

08063d90 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8063d90:	b580      	push	{r7, lr}
 8063d92:	b084      	sub	sp, #16
 8063d94:	af00      	add	r7, sp, #0
 8063d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8063d98:	2300      	movs	r3, #0
 8063d9a:	60fb      	str	r3, [r7, #12]
 8063d9c:	2300      	movs	r3, #0
 8063d9e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8063da0:	687b      	ldr	r3, [r7, #4]
 8063da2:	7e1b      	ldrb	r3, [r3, #24]
 8063da4:	2b00      	cmp	r3, #0
 8063da6:	d008      	beq.n	8063dba <HAL_ADC_IRQHandler+0x2a>
 8063da8:	687b      	ldr	r3, [r7, #4]
 8063daa:	7e1b      	ldrb	r3, [r3, #24]
 8063dac:	2b01      	cmp	r3, #1
 8063dae:	d004      	beq.n	8063dba <HAL_ADC_IRQHandler+0x2a>
 8063db0:	f240 41b5 	movw	r1, #1205	; 0x4b5
 8063db4:	4860      	ldr	r0, [pc, #384]	; (8063f38 <HAL_ADC_IRQHandler+0x1a8>)
 8063db6:	f7ff f992 	bl	80630de <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8063dba:	687b      	ldr	r3, [r7, #4]
 8063dbc:	69db      	ldr	r3, [r3, #28]
 8063dbe:	2b00      	cmp	r3, #0
 8063dc0:	d003      	beq.n	8063dca <HAL_ADC_IRQHandler+0x3a>
 8063dc2:	687b      	ldr	r3, [r7, #4]
 8063dc4:	69db      	ldr	r3, [r3, #28]
 8063dc6:	2b10      	cmp	r3, #16
 8063dc8:	d904      	bls.n	8063dd4 <HAL_ADC_IRQHandler+0x44>
 8063dca:	f240 41b6 	movw	r1, #1206	; 0x4b6
 8063dce:	485a      	ldr	r0, [pc, #360]	; (8063f38 <HAL_ADC_IRQHandler+0x1a8>)
 8063dd0:	f7ff f985 	bl	80630de <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8063dd4:	687b      	ldr	r3, [r7, #4]
 8063dd6:	695b      	ldr	r3, [r3, #20]
 8063dd8:	2b01      	cmp	r3, #1
 8063dda:	d00c      	beq.n	8063df6 <HAL_ADC_IRQHandler+0x66>
 8063ddc:	687b      	ldr	r3, [r7, #4]
 8063dde:	695b      	ldr	r3, [r3, #20]
 8063de0:	2b00      	cmp	r3, #0
 8063de2:	d008      	beq.n	8063df6 <HAL_ADC_IRQHandler+0x66>
 8063de4:	687b      	ldr	r3, [r7, #4]
 8063de6:	695b      	ldr	r3, [r3, #20]
 8063de8:	2b02      	cmp	r3, #2
 8063dea:	d004      	beq.n	8063df6 <HAL_ADC_IRQHandler+0x66>
 8063dec:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8063df0:	4851      	ldr	r0, [pc, #324]	; (8063f38 <HAL_ADC_IRQHandler+0x1a8>)
 8063df2:	f7ff f974 	bl	80630de <assert_failed>
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8063df6:	687b      	ldr	r3, [r7, #4]
 8063df8:	681b      	ldr	r3, [r3, #0]
 8063dfa:	681b      	ldr	r3, [r3, #0]
 8063dfc:	f003 0302 	and.w	r3, r3, #2
 8063e00:	2b02      	cmp	r3, #2
 8063e02:	bf0c      	ite	eq
 8063e04:	2301      	moveq	r3, #1
 8063e06:	2300      	movne	r3, #0
 8063e08:	b2db      	uxtb	r3, r3
 8063e0a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8063e0c:	687b      	ldr	r3, [r7, #4]
 8063e0e:	681b      	ldr	r3, [r3, #0]
 8063e10:	685b      	ldr	r3, [r3, #4]
 8063e12:	f003 0320 	and.w	r3, r3, #32
 8063e16:	2b20      	cmp	r3, #32
 8063e18:	bf0c      	ite	eq
 8063e1a:	2301      	moveq	r3, #1
 8063e1c:	2300      	movne	r3, #0
 8063e1e:	b2db      	uxtb	r3, r3
 8063e20:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8063e22:	68fb      	ldr	r3, [r7, #12]
 8063e24:	2b00      	cmp	r3, #0
 8063e26:	d049      	beq.n	8063ebc <HAL_ADC_IRQHandler+0x12c>
 8063e28:	68bb      	ldr	r3, [r7, #8]
 8063e2a:	2b00      	cmp	r3, #0
 8063e2c:	d046      	beq.n	8063ebc <HAL_ADC_IRQHandler+0x12c>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8063e2e:	687b      	ldr	r3, [r7, #4]
 8063e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063e32:	f003 0310 	and.w	r3, r3, #16
 8063e36:	2b00      	cmp	r3, #0
 8063e38:	d105      	bne.n	8063e46 <HAL_ADC_IRQHandler+0xb6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8063e3a:	687b      	ldr	r3, [r7, #4]
 8063e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063e3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8063e42:	687b      	ldr	r3, [r7, #4]
 8063e44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8063e46:	687b      	ldr	r3, [r7, #4]
 8063e48:	681b      	ldr	r3, [r3, #0]
 8063e4a:	689b      	ldr	r3, [r3, #8]
 8063e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8063e50:	2b00      	cmp	r3, #0
 8063e52:	d12b      	bne.n	8063eac <HAL_ADC_IRQHandler+0x11c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8063e54:	687b      	ldr	r3, [r7, #4]
 8063e56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8063e58:	2b00      	cmp	r3, #0
 8063e5a:	d127      	bne.n	8063eac <HAL_ADC_IRQHandler+0x11c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8063e5c:	687b      	ldr	r3, [r7, #4]
 8063e5e:	681b      	ldr	r3, [r3, #0]
 8063e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063e62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8063e66:	2b00      	cmp	r3, #0
 8063e68:	d006      	beq.n	8063e78 <HAL_ADC_IRQHandler+0xe8>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8063e6a:	687b      	ldr	r3, [r7, #4]
 8063e6c:	681b      	ldr	r3, [r3, #0]
 8063e6e:	689b      	ldr	r3, [r3, #8]
 8063e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8063e74:	2b00      	cmp	r3, #0
 8063e76:	d119      	bne.n	8063eac <HAL_ADC_IRQHandler+0x11c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8063e78:	687b      	ldr	r3, [r7, #4]
 8063e7a:	681b      	ldr	r3, [r3, #0]
 8063e7c:	685a      	ldr	r2, [r3, #4]
 8063e7e:	687b      	ldr	r3, [r7, #4]
 8063e80:	681b      	ldr	r3, [r3, #0]
 8063e82:	f022 0220 	bic.w	r2, r2, #32
 8063e86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8063e88:	687b      	ldr	r3, [r7, #4]
 8063e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8063e90:	687b      	ldr	r3, [r7, #4]
 8063e92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8063e94:	687b      	ldr	r3, [r7, #4]
 8063e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8063e9c:	2b00      	cmp	r3, #0
 8063e9e:	d105      	bne.n	8063eac <HAL_ADC_IRQHandler+0x11c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8063ea0:	687b      	ldr	r3, [r7, #4]
 8063ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063ea4:	f043 0201 	orr.w	r2, r3, #1
 8063ea8:	687b      	ldr	r3, [r7, #4]
 8063eaa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8063eac:	6878      	ldr	r0, [r7, #4]
 8063eae:	f000 f9f7 	bl	80642a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8063eb2:	687b      	ldr	r3, [r7, #4]
 8063eb4:	681b      	ldr	r3, [r3, #0]
 8063eb6:	f06f 0212 	mvn.w	r2, #18
 8063eba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8063ebc:	687b      	ldr	r3, [r7, #4]
 8063ebe:	681b      	ldr	r3, [r3, #0]
 8063ec0:	681b      	ldr	r3, [r3, #0]
 8063ec2:	f003 0304 	and.w	r3, r3, #4
 8063ec6:	2b04      	cmp	r3, #4
 8063ec8:	bf0c      	ite	eq
 8063eca:	2301      	moveq	r3, #1
 8063ecc:	2300      	movne	r3, #0
 8063ece:	b2db      	uxtb	r3, r3
 8063ed0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8063ed2:	687b      	ldr	r3, [r7, #4]
 8063ed4:	681b      	ldr	r3, [r3, #0]
 8063ed6:	685b      	ldr	r3, [r3, #4]
 8063ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8063edc:	2b80      	cmp	r3, #128	; 0x80
 8063ede:	bf0c      	ite	eq
 8063ee0:	2301      	moveq	r3, #1
 8063ee2:	2300      	movne	r3, #0
 8063ee4:	b2db      	uxtb	r3, r3
 8063ee6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8063ee8:	68fb      	ldr	r3, [r7, #12]
 8063eea:	2b00      	cmp	r3, #0
 8063eec:	d05a      	beq.n	8063fa4 <HAL_ADC_IRQHandler+0x214>
 8063eee:	68bb      	ldr	r3, [r7, #8]
 8063ef0:	2b00      	cmp	r3, #0
 8063ef2:	d057      	beq.n	8063fa4 <HAL_ADC_IRQHandler+0x214>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8063ef4:	687b      	ldr	r3, [r7, #4]
 8063ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063ef8:	f003 0310 	and.w	r3, r3, #16
 8063efc:	2b00      	cmp	r3, #0
 8063efe:	d105      	bne.n	8063f0c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8063f00:	687b      	ldr	r3, [r7, #4]
 8063f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063f04:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8063f08:	687b      	ldr	r3, [r7, #4]
 8063f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8063f0c:	687b      	ldr	r3, [r7, #4]
 8063f0e:	681b      	ldr	r3, [r3, #0]
 8063f10:	689b      	ldr	r3, [r3, #8]
 8063f12:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8063f16:	2b00      	cmp	r3, #0
 8063f18:	d13c      	bne.n	8063f94 <HAL_ADC_IRQHandler+0x204>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8063f1a:	687b      	ldr	r3, [r7, #4]
 8063f1c:	681b      	ldr	r3, [r3, #0]
 8063f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8063f20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8063f24:	2b00      	cmp	r3, #0
 8063f26:	d009      	beq.n	8063f3c <HAL_ADC_IRQHandler+0x1ac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8063f28:	687b      	ldr	r3, [r7, #4]
 8063f2a:	681b      	ldr	r3, [r3, #0]
 8063f2c:	689b      	ldr	r3, [r3, #8]
 8063f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8063f32:	2b00      	cmp	r3, #0
 8063f34:	d12e      	bne.n	8063f94 <HAL_ADC_IRQHandler+0x204>
 8063f36:	e001      	b.n	8063f3c <HAL_ADC_IRQHandler+0x1ac>
 8063f38:	080772c4 	.word	0x080772c4
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8063f3c:	687b      	ldr	r3, [r7, #4]
 8063f3e:	681b      	ldr	r3, [r3, #0]
 8063f40:	685b      	ldr	r3, [r3, #4]
 8063f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8063f46:	2b00      	cmp	r3, #0
 8063f48:	d124      	bne.n	8063f94 <HAL_ADC_IRQHandler+0x204>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8063f4a:	687b      	ldr	r3, [r7, #4]
 8063f4c:	681b      	ldr	r3, [r3, #0]
 8063f4e:	689b      	ldr	r3, [r3, #8]
 8063f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8063f54:	2b00      	cmp	r3, #0
 8063f56:	d11d      	bne.n	8063f94 <HAL_ADC_IRQHandler+0x204>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8063f58:	687b      	ldr	r3, [r7, #4]
 8063f5a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8063f5c:	2b00      	cmp	r3, #0
 8063f5e:	d119      	bne.n	8063f94 <HAL_ADC_IRQHandler+0x204>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8063f60:	687b      	ldr	r3, [r7, #4]
 8063f62:	681b      	ldr	r3, [r3, #0]
 8063f64:	685a      	ldr	r2, [r3, #4]
 8063f66:	687b      	ldr	r3, [r7, #4]
 8063f68:	681b      	ldr	r3, [r3, #0]
 8063f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8063f6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8063f70:	687b      	ldr	r3, [r7, #4]
 8063f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063f74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8063f78:	687b      	ldr	r3, [r7, #4]
 8063f7a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8063f7c:	687b      	ldr	r3, [r7, #4]
 8063f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8063f84:	2b00      	cmp	r3, #0
 8063f86:	d105      	bne.n	8063f94 <HAL_ADC_IRQHandler+0x204>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8063f88:	687b      	ldr	r3, [r7, #4]
 8063f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063f8c:	f043 0201 	orr.w	r2, r3, #1
 8063f90:	687b      	ldr	r3, [r7, #4]
 8063f92:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8063f94:	6878      	ldr	r0, [r7, #4]
 8063f96:	f000 fcad 	bl	80648f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8063f9a:	687b      	ldr	r3, [r7, #4]
 8063f9c:	681b      	ldr	r3, [r3, #0]
 8063f9e:	f06f 020c 	mvn.w	r2, #12
 8063fa2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8063fa4:	687b      	ldr	r3, [r7, #4]
 8063fa6:	681b      	ldr	r3, [r3, #0]
 8063fa8:	681b      	ldr	r3, [r3, #0]
 8063faa:	f003 0301 	and.w	r3, r3, #1
 8063fae:	2b01      	cmp	r3, #1
 8063fb0:	bf0c      	ite	eq
 8063fb2:	2301      	moveq	r3, #1
 8063fb4:	2300      	movne	r3, #0
 8063fb6:	b2db      	uxtb	r3, r3
 8063fb8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8063fba:	687b      	ldr	r3, [r7, #4]
 8063fbc:	681b      	ldr	r3, [r3, #0]
 8063fbe:	685b      	ldr	r3, [r3, #4]
 8063fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8063fc4:	2b40      	cmp	r3, #64	; 0x40
 8063fc6:	bf0c      	ite	eq
 8063fc8:	2301      	moveq	r3, #1
 8063fca:	2300      	movne	r3, #0
 8063fcc:	b2db      	uxtb	r3, r3
 8063fce:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8063fd0:	68fb      	ldr	r3, [r7, #12]
 8063fd2:	2b00      	cmp	r3, #0
 8063fd4:	d017      	beq.n	8064006 <HAL_ADC_IRQHandler+0x276>
 8063fd6:	68bb      	ldr	r3, [r7, #8]
 8063fd8:	2b00      	cmp	r3, #0
 8063fda:	d014      	beq.n	8064006 <HAL_ADC_IRQHandler+0x276>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8063fdc:	687b      	ldr	r3, [r7, #4]
 8063fde:	681b      	ldr	r3, [r3, #0]
 8063fe0:	681b      	ldr	r3, [r3, #0]
 8063fe2:	f003 0301 	and.w	r3, r3, #1
 8063fe6:	2b01      	cmp	r3, #1
 8063fe8:	d10d      	bne.n	8064006 <HAL_ADC_IRQHandler+0x276>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8063fea:	687b      	ldr	r3, [r7, #4]
 8063fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063fee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8063ff2:	687b      	ldr	r3, [r7, #4]
 8063ff4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8063ff6:	6878      	ldr	r0, [r7, #4]
 8063ff8:	f000 f966 	bl	80642c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8063ffc:	687b      	ldr	r3, [r7, #4]
 8063ffe:	681b      	ldr	r3, [r3, #0]
 8064000:	f06f 0201 	mvn.w	r2, #1
 8064004:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8064006:	687b      	ldr	r3, [r7, #4]
 8064008:	681b      	ldr	r3, [r3, #0]
 806400a:	681b      	ldr	r3, [r3, #0]
 806400c:	f003 0320 	and.w	r3, r3, #32
 8064010:	2b20      	cmp	r3, #32
 8064012:	bf0c      	ite	eq
 8064014:	2301      	moveq	r3, #1
 8064016:	2300      	movne	r3, #0
 8064018:	b2db      	uxtb	r3, r3
 806401a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 806401c:	687b      	ldr	r3, [r7, #4]
 806401e:	681b      	ldr	r3, [r3, #0]
 8064020:	685b      	ldr	r3, [r3, #4]
 8064022:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8064026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 806402a:	bf0c      	ite	eq
 806402c:	2301      	moveq	r3, #1
 806402e:	2300      	movne	r3, #0
 8064030:	b2db      	uxtb	r3, r3
 8064032:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8064034:	68fb      	ldr	r3, [r7, #12]
 8064036:	2b00      	cmp	r3, #0
 8064038:	d015      	beq.n	8064066 <HAL_ADC_IRQHandler+0x2d6>
 806403a:	68bb      	ldr	r3, [r7, #8]
 806403c:	2b00      	cmp	r3, #0
 806403e:	d012      	beq.n	8064066 <HAL_ADC_IRQHandler+0x2d6>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8064040:	687b      	ldr	r3, [r7, #4]
 8064042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8064044:	f043 0202 	orr.w	r2, r3, #2
 8064048:	687b      	ldr	r3, [r7, #4]
 806404a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 806404c:	687b      	ldr	r3, [r7, #4]
 806404e:	681b      	ldr	r3, [r3, #0]
 8064050:	f06f 0220 	mvn.w	r2, #32
 8064054:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8064056:	6878      	ldr	r0, [r7, #4]
 8064058:	f000 f940 	bl	80642dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 806405c:	687b      	ldr	r3, [r7, #4]
 806405e:	681b      	ldr	r3, [r3, #0]
 8064060:	f06f 0220 	mvn.w	r2, #32
 8064064:	601a      	str	r2, [r3, #0]
  }
}
 8064066:	bf00      	nop
 8064068:	3710      	adds	r7, #16
 806406a:	46bd      	mov	sp, r7
 806406c:	bd80      	pop	{r7, pc}
 806406e:	bf00      	nop

08064070 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8064070:	b580      	push	{r7, lr}
 8064072:	b086      	sub	sp, #24
 8064074:	af00      	add	r7, sp, #0
 8064076:	60f8      	str	r0, [r7, #12]
 8064078:	60b9      	str	r1, [r7, #8]
 806407a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 806407c:	2300      	movs	r3, #0
 806407e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8064080:	68fb      	ldr	r3, [r7, #12]
 8064082:	7e1b      	ldrb	r3, [r3, #24]
 8064084:	2b00      	cmp	r3, #0
 8064086:	d008      	beq.n	806409a <HAL_ADC_Start_DMA+0x2a>
 8064088:	68fb      	ldr	r3, [r7, #12]
 806408a:	7e1b      	ldrb	r3, [r3, #24]
 806408c:	2b01      	cmp	r3, #1
 806408e:	d004      	beq.n	806409a <HAL_ADC_Start_DMA+0x2a>
 8064090:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 8064094:	487a      	ldr	r0, [pc, #488]	; (8064280 <HAL_ADC_Start_DMA+0x210>)
 8064096:	f7ff f822 	bl	80630de <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 806409a:	68fb      	ldr	r3, [r7, #12]
 806409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806409e:	2b00      	cmp	r3, #0
 80640a0:	d013      	beq.n	80640ca <HAL_ADC_Start_DMA+0x5a>
 80640a2:	68fb      	ldr	r3, [r7, #12]
 80640a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80640a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80640aa:	d00e      	beq.n	80640ca <HAL_ADC_Start_DMA+0x5a>
 80640ac:	68fb      	ldr	r3, [r7, #12]
 80640ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80640b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80640b4:	d009      	beq.n	80640ca <HAL_ADC_Start_DMA+0x5a>
 80640b6:	68fb      	ldr	r3, [r7, #12]
 80640b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80640ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80640be:	d004      	beq.n	80640ca <HAL_ADC_Start_DMA+0x5a>
 80640c0:	f240 5159 	movw	r1, #1369	; 0x559
 80640c4:	486e      	ldr	r0, [pc, #440]	; (8064280 <HAL_ADC_Start_DMA+0x210>)
 80640c6:	f7ff f80a 	bl	80630de <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80640ca:	68fb      	ldr	r3, [r7, #12]
 80640cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80640d0:	2b01      	cmp	r3, #1
 80640d2:	d101      	bne.n	80640d8 <HAL_ADC_Start_DMA+0x68>
 80640d4:	2302      	movs	r3, #2
 80640d6:	e0ce      	b.n	8064276 <HAL_ADC_Start_DMA+0x206>
 80640d8:	68fb      	ldr	r3, [r7, #12]
 80640da:	2201      	movs	r2, #1
 80640dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80640e0:	68fb      	ldr	r3, [r7, #12]
 80640e2:	681b      	ldr	r3, [r3, #0]
 80640e4:	689b      	ldr	r3, [r3, #8]
 80640e6:	f003 0301 	and.w	r3, r3, #1
 80640ea:	2b01      	cmp	r3, #1
 80640ec:	d018      	beq.n	8064120 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80640ee:	68fb      	ldr	r3, [r7, #12]
 80640f0:	681b      	ldr	r3, [r3, #0]
 80640f2:	689a      	ldr	r2, [r3, #8]
 80640f4:	68fb      	ldr	r3, [r7, #12]
 80640f6:	681b      	ldr	r3, [r3, #0]
 80640f8:	f042 0201 	orr.w	r2, r2, #1
 80640fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80640fe:	4b61      	ldr	r3, [pc, #388]	; (8064284 <HAL_ADC_Start_DMA+0x214>)
 8064100:	681b      	ldr	r3, [r3, #0]
 8064102:	4a61      	ldr	r2, [pc, #388]	; (8064288 <HAL_ADC_Start_DMA+0x218>)
 8064104:	fba2 2303 	umull	r2, r3, r2, r3
 8064108:	0c9a      	lsrs	r2, r3, #18
 806410a:	4613      	mov	r3, r2
 806410c:	005b      	lsls	r3, r3, #1
 806410e:	4413      	add	r3, r2
 8064110:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8064112:	e002      	b.n	806411a <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8064114:	693b      	ldr	r3, [r7, #16]
 8064116:	3b01      	subs	r3, #1
 8064118:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 806411a:	693b      	ldr	r3, [r7, #16]
 806411c:	2b00      	cmp	r3, #0
 806411e:	d1f9      	bne.n	8064114 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8064120:	68fb      	ldr	r3, [r7, #12]
 8064122:	681b      	ldr	r3, [r3, #0]
 8064124:	689b      	ldr	r3, [r3, #8]
 8064126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806412a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806412e:	d107      	bne.n	8064140 <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8064130:	68fb      	ldr	r3, [r7, #12]
 8064132:	681b      	ldr	r3, [r3, #0]
 8064134:	689a      	ldr	r2, [r3, #8]
 8064136:	68fb      	ldr	r3, [r7, #12]
 8064138:	681b      	ldr	r3, [r3, #0]
 806413a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 806413e:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8064140:	68fb      	ldr	r3, [r7, #12]
 8064142:	681b      	ldr	r3, [r3, #0]
 8064144:	689b      	ldr	r3, [r3, #8]
 8064146:	f003 0301 	and.w	r3, r3, #1
 806414a:	2b01      	cmp	r3, #1
 806414c:	f040 8086 	bne.w	806425c <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8064150:	68fb      	ldr	r3, [r7, #12]
 8064152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064154:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8064158:	f023 0301 	bic.w	r3, r3, #1
 806415c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8064160:	68fb      	ldr	r3, [r7, #12]
 8064162:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8064164:	68fb      	ldr	r3, [r7, #12]
 8064166:	681b      	ldr	r3, [r3, #0]
 8064168:	685b      	ldr	r3, [r3, #4]
 806416a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 806416e:	2b00      	cmp	r3, #0
 8064170:	d007      	beq.n	8064182 <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8064172:	68fb      	ldr	r3, [r7, #12]
 8064174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064176:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 806417a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 806417e:	68fb      	ldr	r3, [r7, #12]
 8064180:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8064182:	68fb      	ldr	r3, [r7, #12]
 8064184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 806418a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806418e:	d106      	bne.n	806419e <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8064190:	68fb      	ldr	r3, [r7, #12]
 8064192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8064194:	f023 0206 	bic.w	r2, r3, #6
 8064198:	68fb      	ldr	r3, [r7, #12]
 806419a:	645a      	str	r2, [r3, #68]	; 0x44
 806419c:	e002      	b.n	80641a4 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 806419e:	68fb      	ldr	r3, [r7, #12]
 80641a0:	2200      	movs	r2, #0
 80641a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80641a4:	68fb      	ldr	r3, [r7, #12]
 80641a6:	2200      	movs	r2, #0
 80641a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80641ac:	4b37      	ldr	r3, [pc, #220]	; (806428c <HAL_ADC_Start_DMA+0x21c>)
 80641ae:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80641b0:	68fb      	ldr	r3, [r7, #12]
 80641b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80641b4:	4a36      	ldr	r2, [pc, #216]	; (8064290 <HAL_ADC_Start_DMA+0x220>)
 80641b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80641b8:	68fb      	ldr	r3, [r7, #12]
 80641ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80641bc:	4a35      	ldr	r2, [pc, #212]	; (8064294 <HAL_ADC_Start_DMA+0x224>)
 80641be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80641c0:	68fb      	ldr	r3, [r7, #12]
 80641c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80641c4:	4a34      	ldr	r2, [pc, #208]	; (8064298 <HAL_ADC_Start_DMA+0x228>)
 80641c6:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80641c8:	68fb      	ldr	r3, [r7, #12]
 80641ca:	681b      	ldr	r3, [r3, #0]
 80641cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80641d0:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80641d2:	68fb      	ldr	r3, [r7, #12]
 80641d4:	681b      	ldr	r3, [r3, #0]
 80641d6:	685a      	ldr	r2, [r3, #4]
 80641d8:	68fb      	ldr	r3, [r7, #12]
 80641da:	681b      	ldr	r3, [r3, #0]
 80641dc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80641e0:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80641e2:	68fb      	ldr	r3, [r7, #12]
 80641e4:	681b      	ldr	r3, [r3, #0]
 80641e6:	689a      	ldr	r2, [r3, #8]
 80641e8:	68fb      	ldr	r3, [r7, #12]
 80641ea:	681b      	ldr	r3, [r3, #0]
 80641ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80641f0:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80641f2:	68fb      	ldr	r3, [r7, #12]
 80641f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80641f6:	68fb      	ldr	r3, [r7, #12]
 80641f8:	681b      	ldr	r3, [r3, #0]
 80641fa:	334c      	adds	r3, #76	; 0x4c
 80641fc:	4619      	mov	r1, r3
 80641fe:	68ba      	ldr	r2, [r7, #8]
 8064200:	687b      	ldr	r3, [r7, #4]
 8064202:	f000 fec9 	bl	8064f98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8064206:	697b      	ldr	r3, [r7, #20]
 8064208:	685b      	ldr	r3, [r3, #4]
 806420a:	f003 031f 	and.w	r3, r3, #31
 806420e:	2b00      	cmp	r3, #0
 8064210:	d10f      	bne.n	8064232 <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8064212:	68fb      	ldr	r3, [r7, #12]
 8064214:	681b      	ldr	r3, [r3, #0]
 8064216:	689b      	ldr	r3, [r3, #8]
 8064218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 806421c:	2b00      	cmp	r3, #0
 806421e:	d129      	bne.n	8064274 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8064220:	68fb      	ldr	r3, [r7, #12]
 8064222:	681b      	ldr	r3, [r3, #0]
 8064224:	689a      	ldr	r2, [r3, #8]
 8064226:	68fb      	ldr	r3, [r7, #12]
 8064228:	681b      	ldr	r3, [r3, #0]
 806422a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 806422e:	609a      	str	r2, [r3, #8]
 8064230:	e020      	b.n	8064274 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8064232:	68fb      	ldr	r3, [r7, #12]
 8064234:	681b      	ldr	r3, [r3, #0]
 8064236:	4a19      	ldr	r2, [pc, #100]	; (806429c <HAL_ADC_Start_DMA+0x22c>)
 8064238:	4293      	cmp	r3, r2
 806423a:	d11b      	bne.n	8064274 <HAL_ADC_Start_DMA+0x204>
 806423c:	68fb      	ldr	r3, [r7, #12]
 806423e:	681b      	ldr	r3, [r3, #0]
 8064240:	689b      	ldr	r3, [r3, #8]
 8064242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8064246:	2b00      	cmp	r3, #0
 8064248:	d114      	bne.n	8064274 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 806424a:	68fb      	ldr	r3, [r7, #12]
 806424c:	681b      	ldr	r3, [r3, #0]
 806424e:	689a      	ldr	r2, [r3, #8]
 8064250:	68fb      	ldr	r3, [r7, #12]
 8064252:	681b      	ldr	r3, [r3, #0]
 8064254:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8064258:	609a      	str	r2, [r3, #8]
 806425a:	e00b      	b.n	8064274 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 806425c:	68fb      	ldr	r3, [r7, #12]
 806425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064260:	f043 0210 	orr.w	r2, r3, #16
 8064264:	68fb      	ldr	r3, [r7, #12]
 8064266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8064268:	68fb      	ldr	r3, [r7, #12]
 806426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806426c:	f043 0201 	orr.w	r2, r3, #1
 8064270:	68fb      	ldr	r3, [r7, #12]
 8064272:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8064274:	2300      	movs	r3, #0
}
 8064276:	4618      	mov	r0, r3
 8064278:	3718      	adds	r7, #24
 806427a:	46bd      	mov	sp, r7
 806427c:	bd80      	pop	{r7, pc}
 806427e:	bf00      	nop
 8064280:	080772c4 	.word	0x080772c4
 8064284:	20000000 	.word	0x20000000
 8064288:	431bde83 	.word	0x431bde83
 806428c:	40012300 	.word	0x40012300
 8064290:	080647f1 	.word	0x080647f1
 8064294:	080648ab 	.word	0x080648ab
 8064298:	080648c7 	.word	0x080648c7
 806429c:	40012000 	.word	0x40012000

080642a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80642a0:	b480      	push	{r7}
 80642a2:	b083      	sub	sp, #12
 80642a4:	af00      	add	r7, sp, #0
 80642a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80642a8:	bf00      	nop
 80642aa:	370c      	adds	r7, #12
 80642ac:	46bd      	mov	sp, r7
 80642ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80642b2:	4770      	bx	lr

080642b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80642b4:	b480      	push	{r7}
 80642b6:	b083      	sub	sp, #12
 80642b8:	af00      	add	r7, sp, #0
 80642ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80642bc:	bf00      	nop
 80642be:	370c      	adds	r7, #12
 80642c0:	46bd      	mov	sp, r7
 80642c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80642c6:	4770      	bx	lr

080642c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80642c8:	b480      	push	{r7}
 80642ca:	b083      	sub	sp, #12
 80642cc:	af00      	add	r7, sp, #0
 80642ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80642d0:	bf00      	nop
 80642d2:	370c      	adds	r7, #12
 80642d4:	46bd      	mov	sp, r7
 80642d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80642da:	4770      	bx	lr

080642dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80642dc:	b480      	push	{r7}
 80642de:	b083      	sub	sp, #12
 80642e0:	af00      	add	r7, sp, #0
 80642e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80642e4:	bf00      	nop
 80642e6:	370c      	adds	r7, #12
 80642e8:	46bd      	mov	sp, r7
 80642ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80642ee:	4770      	bx	lr

080642f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80642f0:	b580      	push	{r7, lr}
 80642f2:	b084      	sub	sp, #16
 80642f4:	af00      	add	r7, sp, #0
 80642f6:	6078      	str	r0, [r7, #4]
 80642f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80642fa:	2300      	movs	r3, #0
 80642fc:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80642fe:	683b      	ldr	r3, [r7, #0]
 8064300:	681b      	ldr	r3, [r3, #0]
 8064302:	2b12      	cmp	r3, #18
 8064304:	d909      	bls.n	806431a <HAL_ADC_ConfigChannel+0x2a>
 8064306:	683b      	ldr	r3, [r7, #0]
 8064308:	681b      	ldr	r3, [r3, #0]
 806430a:	4a72      	ldr	r2, [pc, #456]	; (80644d4 <HAL_ADC_ConfigChannel+0x1e4>)
 806430c:	4293      	cmp	r3, r2
 806430e:	d004      	beq.n	806431a <HAL_ADC_ConfigChannel+0x2a>
 8064310:	f240 6189 	movw	r1, #1673	; 0x689
 8064314:	4870      	ldr	r0, [pc, #448]	; (80644d8 <HAL_ADC_ConfigChannel+0x1e8>)
 8064316:	f7fe fee2 	bl	80630de <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 806431a:	683b      	ldr	r3, [r7, #0]
 806431c:	685b      	ldr	r3, [r3, #4]
 806431e:	2b00      	cmp	r3, #0
 8064320:	d003      	beq.n	806432a <HAL_ADC_ConfigChannel+0x3a>
 8064322:	683b      	ldr	r3, [r7, #0]
 8064324:	685b      	ldr	r3, [r3, #4]
 8064326:	2b10      	cmp	r3, #16
 8064328:	d904      	bls.n	8064334 <HAL_ADC_ConfigChannel+0x44>
 806432a:	f240 618a 	movw	r1, #1674	; 0x68a
 806432e:	486a      	ldr	r0, [pc, #424]	; (80644d8 <HAL_ADC_ConfigChannel+0x1e8>)
 8064330:	f7fe fed5 	bl	80630de <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8064334:	683b      	ldr	r3, [r7, #0]
 8064336:	689b      	ldr	r3, [r3, #8]
 8064338:	2b00      	cmp	r3, #0
 806433a:	d020      	beq.n	806437e <HAL_ADC_ConfigChannel+0x8e>
 806433c:	683b      	ldr	r3, [r7, #0]
 806433e:	689b      	ldr	r3, [r3, #8]
 8064340:	2b01      	cmp	r3, #1
 8064342:	d01c      	beq.n	806437e <HAL_ADC_ConfigChannel+0x8e>
 8064344:	683b      	ldr	r3, [r7, #0]
 8064346:	689b      	ldr	r3, [r3, #8]
 8064348:	2b02      	cmp	r3, #2
 806434a:	d018      	beq.n	806437e <HAL_ADC_ConfigChannel+0x8e>
 806434c:	683b      	ldr	r3, [r7, #0]
 806434e:	689b      	ldr	r3, [r3, #8]
 8064350:	2b03      	cmp	r3, #3
 8064352:	d014      	beq.n	806437e <HAL_ADC_ConfigChannel+0x8e>
 8064354:	683b      	ldr	r3, [r7, #0]
 8064356:	689b      	ldr	r3, [r3, #8]
 8064358:	2b04      	cmp	r3, #4
 806435a:	d010      	beq.n	806437e <HAL_ADC_ConfigChannel+0x8e>
 806435c:	683b      	ldr	r3, [r7, #0]
 806435e:	689b      	ldr	r3, [r3, #8]
 8064360:	2b05      	cmp	r3, #5
 8064362:	d00c      	beq.n	806437e <HAL_ADC_ConfigChannel+0x8e>
 8064364:	683b      	ldr	r3, [r7, #0]
 8064366:	689b      	ldr	r3, [r3, #8]
 8064368:	2b06      	cmp	r3, #6
 806436a:	d008      	beq.n	806437e <HAL_ADC_ConfigChannel+0x8e>
 806436c:	683b      	ldr	r3, [r7, #0]
 806436e:	689b      	ldr	r3, [r3, #8]
 8064370:	2b07      	cmp	r3, #7
 8064372:	d004      	beq.n	806437e <HAL_ADC_ConfigChannel+0x8e>
 8064374:	f240 618b 	movw	r1, #1675	; 0x68b
 8064378:	4857      	ldr	r0, [pc, #348]	; (80644d8 <HAL_ADC_ConfigChannel+0x1e8>)
 806437a:	f7fe feb0 	bl	80630de <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 806437e:	687b      	ldr	r3, [r7, #4]
 8064380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8064384:	2b01      	cmp	r3, #1
 8064386:	d101      	bne.n	806438c <HAL_ADC_ConfigChannel+0x9c>
 8064388:	2302      	movs	r3, #2
 806438a:	e118      	b.n	80645be <HAL_ADC_ConfigChannel+0x2ce>
 806438c:	687b      	ldr	r3, [r7, #4]
 806438e:	2201      	movs	r2, #1
 8064390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8064394:	683b      	ldr	r3, [r7, #0]
 8064396:	681b      	ldr	r3, [r3, #0]
 8064398:	2b09      	cmp	r3, #9
 806439a:	d925      	bls.n	80643e8 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 806439c:	687b      	ldr	r3, [r7, #4]
 806439e:	681b      	ldr	r3, [r3, #0]
 80643a0:	68d9      	ldr	r1, [r3, #12]
 80643a2:	683b      	ldr	r3, [r7, #0]
 80643a4:	681b      	ldr	r3, [r3, #0]
 80643a6:	b29b      	uxth	r3, r3
 80643a8:	461a      	mov	r2, r3
 80643aa:	4613      	mov	r3, r2
 80643ac:	005b      	lsls	r3, r3, #1
 80643ae:	4413      	add	r3, r2
 80643b0:	3b1e      	subs	r3, #30
 80643b2:	2207      	movs	r2, #7
 80643b4:	fa02 f303 	lsl.w	r3, r2, r3
 80643b8:	43da      	mvns	r2, r3
 80643ba:	687b      	ldr	r3, [r7, #4]
 80643bc:	681b      	ldr	r3, [r3, #0]
 80643be:	400a      	ands	r2, r1
 80643c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80643c2:	687b      	ldr	r3, [r7, #4]
 80643c4:	681b      	ldr	r3, [r3, #0]
 80643c6:	68d9      	ldr	r1, [r3, #12]
 80643c8:	683b      	ldr	r3, [r7, #0]
 80643ca:	689a      	ldr	r2, [r3, #8]
 80643cc:	683b      	ldr	r3, [r7, #0]
 80643ce:	681b      	ldr	r3, [r3, #0]
 80643d0:	b29b      	uxth	r3, r3
 80643d2:	4618      	mov	r0, r3
 80643d4:	4603      	mov	r3, r0
 80643d6:	005b      	lsls	r3, r3, #1
 80643d8:	4403      	add	r3, r0
 80643da:	3b1e      	subs	r3, #30
 80643dc:	409a      	lsls	r2, r3
 80643de:	687b      	ldr	r3, [r7, #4]
 80643e0:	681b      	ldr	r3, [r3, #0]
 80643e2:	430a      	orrs	r2, r1
 80643e4:	60da      	str	r2, [r3, #12]
 80643e6:	e022      	b.n	806442e <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80643e8:	687b      	ldr	r3, [r7, #4]
 80643ea:	681b      	ldr	r3, [r3, #0]
 80643ec:	6919      	ldr	r1, [r3, #16]
 80643ee:	683b      	ldr	r3, [r7, #0]
 80643f0:	681b      	ldr	r3, [r3, #0]
 80643f2:	b29b      	uxth	r3, r3
 80643f4:	461a      	mov	r2, r3
 80643f6:	4613      	mov	r3, r2
 80643f8:	005b      	lsls	r3, r3, #1
 80643fa:	4413      	add	r3, r2
 80643fc:	2207      	movs	r2, #7
 80643fe:	fa02 f303 	lsl.w	r3, r2, r3
 8064402:	43da      	mvns	r2, r3
 8064404:	687b      	ldr	r3, [r7, #4]
 8064406:	681b      	ldr	r3, [r3, #0]
 8064408:	400a      	ands	r2, r1
 806440a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 806440c:	687b      	ldr	r3, [r7, #4]
 806440e:	681b      	ldr	r3, [r3, #0]
 8064410:	6919      	ldr	r1, [r3, #16]
 8064412:	683b      	ldr	r3, [r7, #0]
 8064414:	689a      	ldr	r2, [r3, #8]
 8064416:	683b      	ldr	r3, [r7, #0]
 8064418:	681b      	ldr	r3, [r3, #0]
 806441a:	b29b      	uxth	r3, r3
 806441c:	4618      	mov	r0, r3
 806441e:	4603      	mov	r3, r0
 8064420:	005b      	lsls	r3, r3, #1
 8064422:	4403      	add	r3, r0
 8064424:	409a      	lsls	r2, r3
 8064426:	687b      	ldr	r3, [r7, #4]
 8064428:	681b      	ldr	r3, [r3, #0]
 806442a:	430a      	orrs	r2, r1
 806442c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 806442e:	683b      	ldr	r3, [r7, #0]
 8064430:	685b      	ldr	r3, [r3, #4]
 8064432:	2b06      	cmp	r3, #6
 8064434:	d824      	bhi.n	8064480 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8064436:	687b      	ldr	r3, [r7, #4]
 8064438:	681b      	ldr	r3, [r3, #0]
 806443a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 806443c:	683b      	ldr	r3, [r7, #0]
 806443e:	685a      	ldr	r2, [r3, #4]
 8064440:	4613      	mov	r3, r2
 8064442:	009b      	lsls	r3, r3, #2
 8064444:	4413      	add	r3, r2
 8064446:	3b05      	subs	r3, #5
 8064448:	221f      	movs	r2, #31
 806444a:	fa02 f303 	lsl.w	r3, r2, r3
 806444e:	43da      	mvns	r2, r3
 8064450:	687b      	ldr	r3, [r7, #4]
 8064452:	681b      	ldr	r3, [r3, #0]
 8064454:	400a      	ands	r2, r1
 8064456:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8064458:	687b      	ldr	r3, [r7, #4]
 806445a:	681b      	ldr	r3, [r3, #0]
 806445c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 806445e:	683b      	ldr	r3, [r7, #0]
 8064460:	681b      	ldr	r3, [r3, #0]
 8064462:	b29b      	uxth	r3, r3
 8064464:	4618      	mov	r0, r3
 8064466:	683b      	ldr	r3, [r7, #0]
 8064468:	685a      	ldr	r2, [r3, #4]
 806446a:	4613      	mov	r3, r2
 806446c:	009b      	lsls	r3, r3, #2
 806446e:	4413      	add	r3, r2
 8064470:	3b05      	subs	r3, #5
 8064472:	fa00 f203 	lsl.w	r2, r0, r3
 8064476:	687b      	ldr	r3, [r7, #4]
 8064478:	681b      	ldr	r3, [r3, #0]
 806447a:	430a      	orrs	r2, r1
 806447c:	635a      	str	r2, [r3, #52]	; 0x34
 806447e:	e051      	b.n	8064524 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8064480:	683b      	ldr	r3, [r7, #0]
 8064482:	685b      	ldr	r3, [r3, #4]
 8064484:	2b0c      	cmp	r3, #12
 8064486:	d829      	bhi.n	80644dc <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8064488:	687b      	ldr	r3, [r7, #4]
 806448a:	681b      	ldr	r3, [r3, #0]
 806448c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 806448e:	683b      	ldr	r3, [r7, #0]
 8064490:	685a      	ldr	r2, [r3, #4]
 8064492:	4613      	mov	r3, r2
 8064494:	009b      	lsls	r3, r3, #2
 8064496:	4413      	add	r3, r2
 8064498:	3b23      	subs	r3, #35	; 0x23
 806449a:	221f      	movs	r2, #31
 806449c:	fa02 f303 	lsl.w	r3, r2, r3
 80644a0:	43da      	mvns	r2, r3
 80644a2:	687b      	ldr	r3, [r7, #4]
 80644a4:	681b      	ldr	r3, [r3, #0]
 80644a6:	400a      	ands	r2, r1
 80644a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80644aa:	687b      	ldr	r3, [r7, #4]
 80644ac:	681b      	ldr	r3, [r3, #0]
 80644ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80644b0:	683b      	ldr	r3, [r7, #0]
 80644b2:	681b      	ldr	r3, [r3, #0]
 80644b4:	b29b      	uxth	r3, r3
 80644b6:	4618      	mov	r0, r3
 80644b8:	683b      	ldr	r3, [r7, #0]
 80644ba:	685a      	ldr	r2, [r3, #4]
 80644bc:	4613      	mov	r3, r2
 80644be:	009b      	lsls	r3, r3, #2
 80644c0:	4413      	add	r3, r2
 80644c2:	3b23      	subs	r3, #35	; 0x23
 80644c4:	fa00 f203 	lsl.w	r2, r0, r3
 80644c8:	687b      	ldr	r3, [r7, #4]
 80644ca:	681b      	ldr	r3, [r3, #0]
 80644cc:	430a      	orrs	r2, r1
 80644ce:	631a      	str	r2, [r3, #48]	; 0x30
 80644d0:	e028      	b.n	8064524 <HAL_ADC_ConfigChannel+0x234>
 80644d2:	bf00      	nop
 80644d4:	10000012 	.word	0x10000012
 80644d8:	080772c4 	.word	0x080772c4
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80644dc:	687b      	ldr	r3, [r7, #4]
 80644de:	681b      	ldr	r3, [r3, #0]
 80644e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80644e2:	683b      	ldr	r3, [r7, #0]
 80644e4:	685a      	ldr	r2, [r3, #4]
 80644e6:	4613      	mov	r3, r2
 80644e8:	009b      	lsls	r3, r3, #2
 80644ea:	4413      	add	r3, r2
 80644ec:	3b41      	subs	r3, #65	; 0x41
 80644ee:	221f      	movs	r2, #31
 80644f0:	fa02 f303 	lsl.w	r3, r2, r3
 80644f4:	43da      	mvns	r2, r3
 80644f6:	687b      	ldr	r3, [r7, #4]
 80644f8:	681b      	ldr	r3, [r3, #0]
 80644fa:	400a      	ands	r2, r1
 80644fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80644fe:	687b      	ldr	r3, [r7, #4]
 8064500:	681b      	ldr	r3, [r3, #0]
 8064502:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8064504:	683b      	ldr	r3, [r7, #0]
 8064506:	681b      	ldr	r3, [r3, #0]
 8064508:	b29b      	uxth	r3, r3
 806450a:	4618      	mov	r0, r3
 806450c:	683b      	ldr	r3, [r7, #0]
 806450e:	685a      	ldr	r2, [r3, #4]
 8064510:	4613      	mov	r3, r2
 8064512:	009b      	lsls	r3, r3, #2
 8064514:	4413      	add	r3, r2
 8064516:	3b41      	subs	r3, #65	; 0x41
 8064518:	fa00 f203 	lsl.w	r2, r0, r3
 806451c:	687b      	ldr	r3, [r7, #4]
 806451e:	681b      	ldr	r3, [r3, #0]
 8064520:	430a      	orrs	r2, r1
 8064522:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8064524:	4b28      	ldr	r3, [pc, #160]	; (80645c8 <HAL_ADC_ConfigChannel+0x2d8>)
 8064526:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8064528:	687b      	ldr	r3, [r7, #4]
 806452a:	681b      	ldr	r3, [r3, #0]
 806452c:	4a27      	ldr	r2, [pc, #156]	; (80645cc <HAL_ADC_ConfigChannel+0x2dc>)
 806452e:	4293      	cmp	r3, r2
 8064530:	d10f      	bne.n	8064552 <HAL_ADC_ConfigChannel+0x262>
 8064532:	683b      	ldr	r3, [r7, #0]
 8064534:	681b      	ldr	r3, [r3, #0]
 8064536:	2b12      	cmp	r3, #18
 8064538:	d10b      	bne.n	8064552 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 806453a:	68fb      	ldr	r3, [r7, #12]
 806453c:	685b      	ldr	r3, [r3, #4]
 806453e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8064542:	68fb      	ldr	r3, [r7, #12]
 8064544:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8064546:	68fb      	ldr	r3, [r7, #12]
 8064548:	685b      	ldr	r3, [r3, #4]
 806454a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 806454e:	68fb      	ldr	r3, [r7, #12]
 8064550:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8064552:	687b      	ldr	r3, [r7, #4]
 8064554:	681b      	ldr	r3, [r3, #0]
 8064556:	4a1d      	ldr	r2, [pc, #116]	; (80645cc <HAL_ADC_ConfigChannel+0x2dc>)
 8064558:	4293      	cmp	r3, r2
 806455a:	d12b      	bne.n	80645b4 <HAL_ADC_ConfigChannel+0x2c4>
 806455c:	683b      	ldr	r3, [r7, #0]
 806455e:	681b      	ldr	r3, [r3, #0]
 8064560:	4a1b      	ldr	r2, [pc, #108]	; (80645d0 <HAL_ADC_ConfigChannel+0x2e0>)
 8064562:	4293      	cmp	r3, r2
 8064564:	d003      	beq.n	806456e <HAL_ADC_ConfigChannel+0x27e>
 8064566:	683b      	ldr	r3, [r7, #0]
 8064568:	681b      	ldr	r3, [r3, #0]
 806456a:	2b11      	cmp	r3, #17
 806456c:	d122      	bne.n	80645b4 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 806456e:	68fb      	ldr	r3, [r7, #12]
 8064570:	685b      	ldr	r3, [r3, #4]
 8064572:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8064576:	68fb      	ldr	r3, [r7, #12]
 8064578:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 806457a:	68fb      	ldr	r3, [r7, #12]
 806457c:	685b      	ldr	r3, [r3, #4]
 806457e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8064582:	68fb      	ldr	r3, [r7, #12]
 8064584:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8064586:	683b      	ldr	r3, [r7, #0]
 8064588:	681b      	ldr	r3, [r3, #0]
 806458a:	4a11      	ldr	r2, [pc, #68]	; (80645d0 <HAL_ADC_ConfigChannel+0x2e0>)
 806458c:	4293      	cmp	r3, r2
 806458e:	d111      	bne.n	80645b4 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8064590:	4b10      	ldr	r3, [pc, #64]	; (80645d4 <HAL_ADC_ConfigChannel+0x2e4>)
 8064592:	681b      	ldr	r3, [r3, #0]
 8064594:	4a10      	ldr	r2, [pc, #64]	; (80645d8 <HAL_ADC_ConfigChannel+0x2e8>)
 8064596:	fba2 2303 	umull	r2, r3, r2, r3
 806459a:	0c9a      	lsrs	r2, r3, #18
 806459c:	4613      	mov	r3, r2
 806459e:	009b      	lsls	r3, r3, #2
 80645a0:	4413      	add	r3, r2
 80645a2:	005b      	lsls	r3, r3, #1
 80645a4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80645a6:	e002      	b.n	80645ae <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80645a8:	68bb      	ldr	r3, [r7, #8]
 80645aa:	3b01      	subs	r3, #1
 80645ac:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80645ae:	68bb      	ldr	r3, [r7, #8]
 80645b0:	2b00      	cmp	r3, #0
 80645b2:	d1f9      	bne.n	80645a8 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80645b4:	687b      	ldr	r3, [r7, #4]
 80645b6:	2200      	movs	r2, #0
 80645b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80645bc:	2300      	movs	r3, #0
}
 80645be:	4618      	mov	r0, r3
 80645c0:	3710      	adds	r7, #16
 80645c2:	46bd      	mov	sp, r7
 80645c4:	bd80      	pop	{r7, pc}
 80645c6:	bf00      	nop
 80645c8:	40012300 	.word	0x40012300
 80645cc:	40012000 	.word	0x40012000
 80645d0:	10000012 	.word	0x10000012
 80645d4:	20000000 	.word	0x20000000
 80645d8:	431bde83 	.word	0x431bde83

080645dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80645dc:	b580      	push	{r7, lr}
 80645de:	b084      	sub	sp, #16
 80645e0:	af00      	add	r7, sp, #0
 80645e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80645e4:	4b7f      	ldr	r3, [pc, #508]	; (80647e4 <ADC_Init+0x208>)
 80645e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80645e8:	68fb      	ldr	r3, [r7, #12]
 80645ea:	685b      	ldr	r3, [r3, #4]
 80645ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80645f0:	68fb      	ldr	r3, [r7, #12]
 80645f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80645f4:	68fb      	ldr	r3, [r7, #12]
 80645f6:	685a      	ldr	r2, [r3, #4]
 80645f8:	687b      	ldr	r3, [r7, #4]
 80645fa:	685b      	ldr	r3, [r3, #4]
 80645fc:	431a      	orrs	r2, r3
 80645fe:	68fb      	ldr	r3, [r7, #12]
 8064600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8064602:	687b      	ldr	r3, [r7, #4]
 8064604:	681b      	ldr	r3, [r3, #0]
 8064606:	685a      	ldr	r2, [r3, #4]
 8064608:	687b      	ldr	r3, [r7, #4]
 806460a:	681b      	ldr	r3, [r3, #0]
 806460c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8064610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8064612:	687b      	ldr	r3, [r7, #4]
 8064614:	681b      	ldr	r3, [r3, #0]
 8064616:	6859      	ldr	r1, [r3, #4]
 8064618:	687b      	ldr	r3, [r7, #4]
 806461a:	691b      	ldr	r3, [r3, #16]
 806461c:	021a      	lsls	r2, r3, #8
 806461e:	687b      	ldr	r3, [r7, #4]
 8064620:	681b      	ldr	r3, [r3, #0]
 8064622:	430a      	orrs	r2, r1
 8064624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8064626:	687b      	ldr	r3, [r7, #4]
 8064628:	681b      	ldr	r3, [r3, #0]
 806462a:	685a      	ldr	r2, [r3, #4]
 806462c:	687b      	ldr	r3, [r7, #4]
 806462e:	681b      	ldr	r3, [r3, #0]
 8064630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8064634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8064636:	687b      	ldr	r3, [r7, #4]
 8064638:	681b      	ldr	r3, [r3, #0]
 806463a:	6859      	ldr	r1, [r3, #4]
 806463c:	687b      	ldr	r3, [r7, #4]
 806463e:	689a      	ldr	r2, [r3, #8]
 8064640:	687b      	ldr	r3, [r7, #4]
 8064642:	681b      	ldr	r3, [r3, #0]
 8064644:	430a      	orrs	r2, r1
 8064646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8064648:	687b      	ldr	r3, [r7, #4]
 806464a:	681b      	ldr	r3, [r3, #0]
 806464c:	689a      	ldr	r2, [r3, #8]
 806464e:	687b      	ldr	r3, [r7, #4]
 8064650:	681b      	ldr	r3, [r3, #0]
 8064652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8064656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8064658:	687b      	ldr	r3, [r7, #4]
 806465a:	681b      	ldr	r3, [r3, #0]
 806465c:	6899      	ldr	r1, [r3, #8]
 806465e:	687b      	ldr	r3, [r7, #4]
 8064660:	68da      	ldr	r2, [r3, #12]
 8064662:	687b      	ldr	r3, [r7, #4]
 8064664:	681b      	ldr	r3, [r3, #0]
 8064666:	430a      	orrs	r2, r1
 8064668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 806466a:	687b      	ldr	r3, [r7, #4]
 806466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806466e:	4a5e      	ldr	r2, [pc, #376]	; (80647e8 <ADC_Init+0x20c>)
 8064670:	4293      	cmp	r3, r2
 8064672:	d022      	beq.n	80646ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8064674:	687b      	ldr	r3, [r7, #4]
 8064676:	681b      	ldr	r3, [r3, #0]
 8064678:	689a      	ldr	r2, [r3, #8]
 806467a:	687b      	ldr	r3, [r7, #4]
 806467c:	681b      	ldr	r3, [r3, #0]
 806467e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8064682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8064684:	687b      	ldr	r3, [r7, #4]
 8064686:	681b      	ldr	r3, [r3, #0]
 8064688:	6899      	ldr	r1, [r3, #8]
 806468a:	687b      	ldr	r3, [r7, #4]
 806468c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 806468e:	687b      	ldr	r3, [r7, #4]
 8064690:	681b      	ldr	r3, [r3, #0]
 8064692:	430a      	orrs	r2, r1
 8064694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8064696:	687b      	ldr	r3, [r7, #4]
 8064698:	681b      	ldr	r3, [r3, #0]
 806469a:	689a      	ldr	r2, [r3, #8]
 806469c:	687b      	ldr	r3, [r7, #4]
 806469e:	681b      	ldr	r3, [r3, #0]
 80646a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80646a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80646a6:	687b      	ldr	r3, [r7, #4]
 80646a8:	681b      	ldr	r3, [r3, #0]
 80646aa:	6899      	ldr	r1, [r3, #8]
 80646ac:	687b      	ldr	r3, [r7, #4]
 80646ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80646b0:	687b      	ldr	r3, [r7, #4]
 80646b2:	681b      	ldr	r3, [r3, #0]
 80646b4:	430a      	orrs	r2, r1
 80646b6:	609a      	str	r2, [r3, #8]
 80646b8:	e00f      	b.n	80646da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80646ba:	687b      	ldr	r3, [r7, #4]
 80646bc:	681b      	ldr	r3, [r3, #0]
 80646be:	689a      	ldr	r2, [r3, #8]
 80646c0:	687b      	ldr	r3, [r7, #4]
 80646c2:	681b      	ldr	r3, [r3, #0]
 80646c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80646c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80646ca:	687b      	ldr	r3, [r7, #4]
 80646cc:	681b      	ldr	r3, [r3, #0]
 80646ce:	689a      	ldr	r2, [r3, #8]
 80646d0:	687b      	ldr	r3, [r7, #4]
 80646d2:	681b      	ldr	r3, [r3, #0]
 80646d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80646d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80646da:	687b      	ldr	r3, [r7, #4]
 80646dc:	681b      	ldr	r3, [r3, #0]
 80646de:	689a      	ldr	r2, [r3, #8]
 80646e0:	687b      	ldr	r3, [r7, #4]
 80646e2:	681b      	ldr	r3, [r3, #0]
 80646e4:	f022 0202 	bic.w	r2, r2, #2
 80646e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80646ea:	687b      	ldr	r3, [r7, #4]
 80646ec:	681b      	ldr	r3, [r3, #0]
 80646ee:	6899      	ldr	r1, [r3, #8]
 80646f0:	687b      	ldr	r3, [r7, #4]
 80646f2:	7e1b      	ldrb	r3, [r3, #24]
 80646f4:	005a      	lsls	r2, r3, #1
 80646f6:	687b      	ldr	r3, [r7, #4]
 80646f8:	681b      	ldr	r3, [r3, #0]
 80646fa:	430a      	orrs	r2, r1
 80646fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80646fe:	687b      	ldr	r3, [r7, #4]
 8064700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8064704:	2b00      	cmp	r3, #0
 8064706:	d028      	beq.n	806475a <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8064708:	687b      	ldr	r3, [r7, #4]
 806470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806470c:	2b00      	cmp	r3, #0
 806470e:	d003      	beq.n	8064718 <ADC_Init+0x13c>
 8064710:	687b      	ldr	r3, [r7, #4]
 8064712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064714:	2b08      	cmp	r3, #8
 8064716:	d904      	bls.n	8064722 <ADC_Init+0x146>
 8064718:	f240 71a6 	movw	r1, #1958	; 0x7a6
 806471c:	4833      	ldr	r0, [pc, #204]	; (80647ec <ADC_Init+0x210>)
 806471e:	f7fe fcde 	bl	80630de <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8064722:	687b      	ldr	r3, [r7, #4]
 8064724:	681b      	ldr	r3, [r3, #0]
 8064726:	685a      	ldr	r2, [r3, #4]
 8064728:	687b      	ldr	r3, [r7, #4]
 806472a:	681b      	ldr	r3, [r3, #0]
 806472c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8064730:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8064732:	687b      	ldr	r3, [r7, #4]
 8064734:	681b      	ldr	r3, [r3, #0]
 8064736:	685a      	ldr	r2, [r3, #4]
 8064738:	687b      	ldr	r3, [r7, #4]
 806473a:	681b      	ldr	r3, [r3, #0]
 806473c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8064740:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8064742:	687b      	ldr	r3, [r7, #4]
 8064744:	681b      	ldr	r3, [r3, #0]
 8064746:	6859      	ldr	r1, [r3, #4]
 8064748:	687b      	ldr	r3, [r7, #4]
 806474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806474c:	3b01      	subs	r3, #1
 806474e:	035a      	lsls	r2, r3, #13
 8064750:	687b      	ldr	r3, [r7, #4]
 8064752:	681b      	ldr	r3, [r3, #0]
 8064754:	430a      	orrs	r2, r1
 8064756:	605a      	str	r2, [r3, #4]
 8064758:	e007      	b.n	806476a <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 806475a:	687b      	ldr	r3, [r7, #4]
 806475c:	681b      	ldr	r3, [r3, #0]
 806475e:	685a      	ldr	r2, [r3, #4]
 8064760:	687b      	ldr	r3, [r7, #4]
 8064762:	681b      	ldr	r3, [r3, #0]
 8064764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8064768:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 806476a:	687b      	ldr	r3, [r7, #4]
 806476c:	681b      	ldr	r3, [r3, #0]
 806476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8064770:	687b      	ldr	r3, [r7, #4]
 8064772:	681b      	ldr	r3, [r3, #0]
 8064774:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8064778:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 806477a:	687b      	ldr	r3, [r7, #4]
 806477c:	681b      	ldr	r3, [r3, #0]
 806477e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8064780:	687b      	ldr	r3, [r7, #4]
 8064782:	69db      	ldr	r3, [r3, #28]
 8064784:	3b01      	subs	r3, #1
 8064786:	051a      	lsls	r2, r3, #20
 8064788:	687b      	ldr	r3, [r7, #4]
 806478a:	681b      	ldr	r3, [r3, #0]
 806478c:	430a      	orrs	r2, r1
 806478e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8064790:	687b      	ldr	r3, [r7, #4]
 8064792:	681b      	ldr	r3, [r3, #0]
 8064794:	689a      	ldr	r2, [r3, #8]
 8064796:	687b      	ldr	r3, [r7, #4]
 8064798:	681b      	ldr	r3, [r3, #0]
 806479a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 806479e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80647a0:	687b      	ldr	r3, [r7, #4]
 80647a2:	681b      	ldr	r3, [r3, #0]
 80647a4:	6899      	ldr	r1, [r3, #8]
 80647a6:	687b      	ldr	r3, [r7, #4]
 80647a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80647ac:	025a      	lsls	r2, r3, #9
 80647ae:	687b      	ldr	r3, [r7, #4]
 80647b0:	681b      	ldr	r3, [r3, #0]
 80647b2:	430a      	orrs	r2, r1
 80647b4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80647b6:	687b      	ldr	r3, [r7, #4]
 80647b8:	681b      	ldr	r3, [r3, #0]
 80647ba:	689a      	ldr	r2, [r3, #8]
 80647bc:	687b      	ldr	r3, [r7, #4]
 80647be:	681b      	ldr	r3, [r3, #0]
 80647c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80647c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80647c6:	687b      	ldr	r3, [r7, #4]
 80647c8:	681b      	ldr	r3, [r3, #0]
 80647ca:	6899      	ldr	r1, [r3, #8]
 80647cc:	687b      	ldr	r3, [r7, #4]
 80647ce:	695b      	ldr	r3, [r3, #20]
 80647d0:	029a      	lsls	r2, r3, #10
 80647d2:	687b      	ldr	r3, [r7, #4]
 80647d4:	681b      	ldr	r3, [r3, #0]
 80647d6:	430a      	orrs	r2, r1
 80647d8:	609a      	str	r2, [r3, #8]
}
 80647da:	bf00      	nop
 80647dc:	3710      	adds	r7, #16
 80647de:	46bd      	mov	sp, r7
 80647e0:	bd80      	pop	{r7, pc}
 80647e2:	bf00      	nop
 80647e4:	40012300 	.word	0x40012300
 80647e8:	0f000001 	.word	0x0f000001
 80647ec:	080772c4 	.word	0x080772c4

080647f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80647f0:	b580      	push	{r7, lr}
 80647f2:	b084      	sub	sp, #16
 80647f4:	af00      	add	r7, sp, #0
 80647f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80647f8:	687b      	ldr	r3, [r7, #4]
 80647fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80647fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80647fe:	68fb      	ldr	r3, [r7, #12]
 8064800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064802:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8064806:	2b00      	cmp	r3, #0
 8064808:	d13c      	bne.n	8064884 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 806480a:	68fb      	ldr	r3, [r7, #12]
 806480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806480e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8064812:	68fb      	ldr	r3, [r7, #12]
 8064814:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8064816:	68fb      	ldr	r3, [r7, #12]
 8064818:	681b      	ldr	r3, [r3, #0]
 806481a:	689b      	ldr	r3, [r3, #8]
 806481c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8064820:	2b00      	cmp	r3, #0
 8064822:	d12b      	bne.n	806487c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8064824:	68fb      	ldr	r3, [r7, #12]
 8064826:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8064828:	2b00      	cmp	r3, #0
 806482a:	d127      	bne.n	806487c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 806482c:	68fb      	ldr	r3, [r7, #12]
 806482e:	681b      	ldr	r3, [r3, #0]
 8064830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064832:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8064836:	2b00      	cmp	r3, #0
 8064838:	d006      	beq.n	8064848 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 806483a:	68fb      	ldr	r3, [r7, #12]
 806483c:	681b      	ldr	r3, [r3, #0]
 806483e:	689b      	ldr	r3, [r3, #8]
 8064840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8064844:	2b00      	cmp	r3, #0
 8064846:	d119      	bne.n	806487c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8064848:	68fb      	ldr	r3, [r7, #12]
 806484a:	681b      	ldr	r3, [r3, #0]
 806484c:	685a      	ldr	r2, [r3, #4]
 806484e:	68fb      	ldr	r3, [r7, #12]
 8064850:	681b      	ldr	r3, [r3, #0]
 8064852:	f022 0220 	bic.w	r2, r2, #32
 8064856:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8064858:	68fb      	ldr	r3, [r7, #12]
 806485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806485c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8064860:	68fb      	ldr	r3, [r7, #12]
 8064862:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8064864:	68fb      	ldr	r3, [r7, #12]
 8064866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 806486c:	2b00      	cmp	r3, #0
 806486e:	d105      	bne.n	806487c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8064870:	68fb      	ldr	r3, [r7, #12]
 8064872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064874:	f043 0201 	orr.w	r2, r3, #1
 8064878:	68fb      	ldr	r3, [r7, #12]
 806487a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 806487c:	68f8      	ldr	r0, [r7, #12]
 806487e:	f7ff fd0f 	bl	80642a0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8064882:	e00e      	b.n	80648a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8064884:	68fb      	ldr	r3, [r7, #12]
 8064886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064888:	f003 0310 	and.w	r3, r3, #16
 806488c:	2b00      	cmp	r3, #0
 806488e:	d003      	beq.n	8064898 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8064890:	68f8      	ldr	r0, [r7, #12]
 8064892:	f7ff fd23 	bl	80642dc <HAL_ADC_ErrorCallback>
}
 8064896:	e004      	b.n	80648a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8064898:	68fb      	ldr	r3, [r7, #12]
 806489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 806489e:	6878      	ldr	r0, [r7, #4]
 80648a0:	4798      	blx	r3
}
 80648a2:	bf00      	nop
 80648a4:	3710      	adds	r7, #16
 80648a6:	46bd      	mov	sp, r7
 80648a8:	bd80      	pop	{r7, pc}

080648aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80648aa:	b580      	push	{r7, lr}
 80648ac:	b084      	sub	sp, #16
 80648ae:	af00      	add	r7, sp, #0
 80648b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80648b2:	687b      	ldr	r3, [r7, #4]
 80648b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80648b6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80648b8:	68f8      	ldr	r0, [r7, #12]
 80648ba:	f7ff fcfb 	bl	80642b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80648be:	bf00      	nop
 80648c0:	3710      	adds	r7, #16
 80648c2:	46bd      	mov	sp, r7
 80648c4:	bd80      	pop	{r7, pc}

080648c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80648c6:	b580      	push	{r7, lr}
 80648c8:	b084      	sub	sp, #16
 80648ca:	af00      	add	r7, sp, #0
 80648cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80648ce:	687b      	ldr	r3, [r7, #4]
 80648d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80648d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80648d4:	68fb      	ldr	r3, [r7, #12]
 80648d6:	2240      	movs	r2, #64	; 0x40
 80648d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80648da:	68fb      	ldr	r3, [r7, #12]
 80648dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80648de:	f043 0204 	orr.w	r2, r3, #4
 80648e2:	68fb      	ldr	r3, [r7, #12]
 80648e4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80648e6:	68f8      	ldr	r0, [r7, #12]
 80648e8:	f7ff fcf8 	bl	80642dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80648ec:	bf00      	nop
 80648ee:	3710      	adds	r7, #16
 80648f0:	46bd      	mov	sp, r7
 80648f2:	bd80      	pop	{r7, pc}

080648f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80648f4:	b480      	push	{r7}
 80648f6:	b083      	sub	sp, #12
 80648f8:	af00      	add	r7, sp, #0
 80648fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80648fc:	bf00      	nop
 80648fe:	370c      	adds	r7, #12
 8064900:	46bd      	mov	sp, r7
 8064902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064906:	4770      	bx	lr

08064908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8064908:	b480      	push	{r7}
 806490a:	b085      	sub	sp, #20
 806490c:	af00      	add	r7, sp, #0
 806490e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8064910:	687b      	ldr	r3, [r7, #4]
 8064912:	f003 0307 	and.w	r3, r3, #7
 8064916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8064918:	4b0c      	ldr	r3, [pc, #48]	; (806494c <__NVIC_SetPriorityGrouping+0x44>)
 806491a:	68db      	ldr	r3, [r3, #12]
 806491c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 806491e:	68ba      	ldr	r2, [r7, #8]
 8064920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8064924:	4013      	ands	r3, r2
 8064926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8064928:	68fb      	ldr	r3, [r7, #12]
 806492a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 806492c:	68bb      	ldr	r3, [r7, #8]
 806492e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8064930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8064934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8064938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 806493a:	4a04      	ldr	r2, [pc, #16]	; (806494c <__NVIC_SetPriorityGrouping+0x44>)
 806493c:	68bb      	ldr	r3, [r7, #8]
 806493e:	60d3      	str	r3, [r2, #12]
}
 8064940:	bf00      	nop
 8064942:	3714      	adds	r7, #20
 8064944:	46bd      	mov	sp, r7
 8064946:	f85d 7b04 	ldr.w	r7, [sp], #4
 806494a:	4770      	bx	lr
 806494c:	e000ed00 	.word	0xe000ed00

08064950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8064950:	b480      	push	{r7}
 8064952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8064954:	4b04      	ldr	r3, [pc, #16]	; (8064968 <__NVIC_GetPriorityGrouping+0x18>)
 8064956:	68db      	ldr	r3, [r3, #12]
 8064958:	0a1b      	lsrs	r3, r3, #8
 806495a:	f003 0307 	and.w	r3, r3, #7
}
 806495e:	4618      	mov	r0, r3
 8064960:	46bd      	mov	sp, r7
 8064962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064966:	4770      	bx	lr
 8064968:	e000ed00 	.word	0xe000ed00

0806496c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 806496c:	b480      	push	{r7}
 806496e:	b083      	sub	sp, #12
 8064970:	af00      	add	r7, sp, #0
 8064972:	4603      	mov	r3, r0
 8064974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8064976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806497a:	2b00      	cmp	r3, #0
 806497c:	db0b      	blt.n	8064996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 806497e:	79fb      	ldrb	r3, [r7, #7]
 8064980:	f003 021f 	and.w	r2, r3, #31
 8064984:	4907      	ldr	r1, [pc, #28]	; (80649a4 <__NVIC_EnableIRQ+0x38>)
 8064986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806498a:	095b      	lsrs	r3, r3, #5
 806498c:	2001      	movs	r0, #1
 806498e:	fa00 f202 	lsl.w	r2, r0, r2
 8064992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8064996:	bf00      	nop
 8064998:	370c      	adds	r7, #12
 806499a:	46bd      	mov	sp, r7
 806499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80649a0:	4770      	bx	lr
 80649a2:	bf00      	nop
 80649a4:	e000e100 	.word	0xe000e100

080649a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80649a8:	b480      	push	{r7}
 80649aa:	b083      	sub	sp, #12
 80649ac:	af00      	add	r7, sp, #0
 80649ae:	4603      	mov	r3, r0
 80649b0:	6039      	str	r1, [r7, #0]
 80649b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80649b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80649b8:	2b00      	cmp	r3, #0
 80649ba:	db0a      	blt.n	80649d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80649bc:	683b      	ldr	r3, [r7, #0]
 80649be:	b2da      	uxtb	r2, r3
 80649c0:	490c      	ldr	r1, [pc, #48]	; (80649f4 <__NVIC_SetPriority+0x4c>)
 80649c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80649c6:	0112      	lsls	r2, r2, #4
 80649c8:	b2d2      	uxtb	r2, r2
 80649ca:	440b      	add	r3, r1
 80649cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80649d0:	e00a      	b.n	80649e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80649d2:	683b      	ldr	r3, [r7, #0]
 80649d4:	b2da      	uxtb	r2, r3
 80649d6:	4908      	ldr	r1, [pc, #32]	; (80649f8 <__NVIC_SetPriority+0x50>)
 80649d8:	79fb      	ldrb	r3, [r7, #7]
 80649da:	f003 030f 	and.w	r3, r3, #15
 80649de:	3b04      	subs	r3, #4
 80649e0:	0112      	lsls	r2, r2, #4
 80649e2:	b2d2      	uxtb	r2, r2
 80649e4:	440b      	add	r3, r1
 80649e6:	761a      	strb	r2, [r3, #24]
}
 80649e8:	bf00      	nop
 80649ea:	370c      	adds	r7, #12
 80649ec:	46bd      	mov	sp, r7
 80649ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80649f2:	4770      	bx	lr
 80649f4:	e000e100 	.word	0xe000e100
 80649f8:	e000ed00 	.word	0xe000ed00

080649fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80649fc:	b480      	push	{r7}
 80649fe:	b089      	sub	sp, #36	; 0x24
 8064a00:	af00      	add	r7, sp, #0
 8064a02:	60f8      	str	r0, [r7, #12]
 8064a04:	60b9      	str	r1, [r7, #8]
 8064a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8064a08:	68fb      	ldr	r3, [r7, #12]
 8064a0a:	f003 0307 	and.w	r3, r3, #7
 8064a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8064a10:	69fb      	ldr	r3, [r7, #28]
 8064a12:	f1c3 0307 	rsb	r3, r3, #7
 8064a16:	2b04      	cmp	r3, #4
 8064a18:	bf28      	it	cs
 8064a1a:	2304      	movcs	r3, #4
 8064a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8064a1e:	69fb      	ldr	r3, [r7, #28]
 8064a20:	3304      	adds	r3, #4
 8064a22:	2b06      	cmp	r3, #6
 8064a24:	d902      	bls.n	8064a2c <NVIC_EncodePriority+0x30>
 8064a26:	69fb      	ldr	r3, [r7, #28]
 8064a28:	3b03      	subs	r3, #3
 8064a2a:	e000      	b.n	8064a2e <NVIC_EncodePriority+0x32>
 8064a2c:	2300      	movs	r3, #0
 8064a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8064a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8064a34:	69bb      	ldr	r3, [r7, #24]
 8064a36:	fa02 f303 	lsl.w	r3, r2, r3
 8064a3a:	43da      	mvns	r2, r3
 8064a3c:	68bb      	ldr	r3, [r7, #8]
 8064a3e:	401a      	ands	r2, r3
 8064a40:	697b      	ldr	r3, [r7, #20]
 8064a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8064a44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8064a48:	697b      	ldr	r3, [r7, #20]
 8064a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8064a4e:	43d9      	mvns	r1, r3
 8064a50:	687b      	ldr	r3, [r7, #4]
 8064a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8064a54:	4313      	orrs	r3, r2
         );
}
 8064a56:	4618      	mov	r0, r3
 8064a58:	3724      	adds	r7, #36	; 0x24
 8064a5a:	46bd      	mov	sp, r7
 8064a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064a60:	4770      	bx	lr
	...

08064a64 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8064a64:	b480      	push	{r7}
 8064a66:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8064a68:	f3bf 8f4f 	dsb	sy
}
 8064a6c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8064a6e:	4b06      	ldr	r3, [pc, #24]	; (8064a88 <__NVIC_SystemReset+0x24>)
 8064a70:	68db      	ldr	r3, [r3, #12]
 8064a72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8064a76:	4904      	ldr	r1, [pc, #16]	; (8064a88 <__NVIC_SystemReset+0x24>)
 8064a78:	4b04      	ldr	r3, [pc, #16]	; (8064a8c <__NVIC_SystemReset+0x28>)
 8064a7a:	4313      	orrs	r3, r2
 8064a7c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8064a7e:	f3bf 8f4f 	dsb	sy
}
 8064a82:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8064a84:	bf00      	nop
 8064a86:	e7fd      	b.n	8064a84 <__NVIC_SystemReset+0x20>
 8064a88:	e000ed00 	.word	0xe000ed00
 8064a8c:	05fa0004 	.word	0x05fa0004

08064a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8064a90:	b580      	push	{r7, lr}
 8064a92:	b082      	sub	sp, #8
 8064a94:	af00      	add	r7, sp, #0
 8064a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8064a98:	687b      	ldr	r3, [r7, #4]
 8064a9a:	2b07      	cmp	r3, #7
 8064a9c:	d00f      	beq.n	8064abe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8064a9e:	687b      	ldr	r3, [r7, #4]
 8064aa0:	2b06      	cmp	r3, #6
 8064aa2:	d00c      	beq.n	8064abe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8064aa4:	687b      	ldr	r3, [r7, #4]
 8064aa6:	2b05      	cmp	r3, #5
 8064aa8:	d009      	beq.n	8064abe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8064aaa:	687b      	ldr	r3, [r7, #4]
 8064aac:	2b04      	cmp	r3, #4
 8064aae:	d006      	beq.n	8064abe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8064ab0:	687b      	ldr	r3, [r7, #4]
 8064ab2:	2b03      	cmp	r3, #3
 8064ab4:	d003      	beq.n	8064abe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8064ab6:	2192      	movs	r1, #146	; 0x92
 8064ab8:	4804      	ldr	r0, [pc, #16]	; (8064acc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8064aba:	f7fe fb10 	bl	80630de <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8064abe:	6878      	ldr	r0, [r7, #4]
 8064ac0:	f7ff ff22 	bl	8064908 <__NVIC_SetPriorityGrouping>
}
 8064ac4:	bf00      	nop
 8064ac6:	3708      	adds	r7, #8
 8064ac8:	46bd      	mov	sp, r7
 8064aca:	bd80      	pop	{r7, pc}
 8064acc:	080772fc 	.word	0x080772fc

08064ad0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8064ad0:	b580      	push	{r7, lr}
 8064ad2:	b086      	sub	sp, #24
 8064ad4:	af00      	add	r7, sp, #0
 8064ad6:	4603      	mov	r3, r0
 8064ad8:	60b9      	str	r1, [r7, #8]
 8064ada:	607a      	str	r2, [r7, #4]
 8064adc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8064ade:	2300      	movs	r3, #0
 8064ae0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8064ae2:	687b      	ldr	r3, [r7, #4]
 8064ae4:	2b0f      	cmp	r3, #15
 8064ae6:	d903      	bls.n	8064af0 <HAL_NVIC_SetPriority+0x20>
 8064ae8:	21aa      	movs	r1, #170	; 0xaa
 8064aea:	480e      	ldr	r0, [pc, #56]	; (8064b24 <HAL_NVIC_SetPriority+0x54>)
 8064aec:	f7fe faf7 	bl	80630de <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8064af0:	68bb      	ldr	r3, [r7, #8]
 8064af2:	2b0f      	cmp	r3, #15
 8064af4:	d903      	bls.n	8064afe <HAL_NVIC_SetPriority+0x2e>
 8064af6:	21ab      	movs	r1, #171	; 0xab
 8064af8:	480a      	ldr	r0, [pc, #40]	; (8064b24 <HAL_NVIC_SetPriority+0x54>)
 8064afa:	f7fe faf0 	bl	80630de <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8064afe:	f7ff ff27 	bl	8064950 <__NVIC_GetPriorityGrouping>
 8064b02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8064b04:	687a      	ldr	r2, [r7, #4]
 8064b06:	68b9      	ldr	r1, [r7, #8]
 8064b08:	6978      	ldr	r0, [r7, #20]
 8064b0a:	f7ff ff77 	bl	80649fc <NVIC_EncodePriority>
 8064b0e:	4602      	mov	r2, r0
 8064b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8064b14:	4611      	mov	r1, r2
 8064b16:	4618      	mov	r0, r3
 8064b18:	f7ff ff46 	bl	80649a8 <__NVIC_SetPriority>
}
 8064b1c:	bf00      	nop
 8064b1e:	3718      	adds	r7, #24
 8064b20:	46bd      	mov	sp, r7
 8064b22:	bd80      	pop	{r7, pc}
 8064b24:	080772fc 	.word	0x080772fc

08064b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8064b28:	b580      	push	{r7, lr}
 8064b2a:	b082      	sub	sp, #8
 8064b2c:	af00      	add	r7, sp, #0
 8064b2e:	4603      	mov	r3, r0
 8064b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8064b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8064b36:	2b00      	cmp	r3, #0
 8064b38:	da03      	bge.n	8064b42 <HAL_NVIC_EnableIRQ+0x1a>
 8064b3a:	21be      	movs	r1, #190	; 0xbe
 8064b3c:	4805      	ldr	r0, [pc, #20]	; (8064b54 <HAL_NVIC_EnableIRQ+0x2c>)
 8064b3e:	f7fe face 	bl	80630de <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8064b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8064b46:	4618      	mov	r0, r3
 8064b48:	f7ff ff10 	bl	806496c <__NVIC_EnableIRQ>
}
 8064b4c:	bf00      	nop
 8064b4e:	3708      	adds	r7, #8
 8064b50:	46bd      	mov	sp, r7
 8064b52:	bd80      	pop	{r7, pc}
 8064b54:	080772fc 	.word	0x080772fc

08064b58 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8064b58:	b580      	push	{r7, lr}
 8064b5a:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8064b5c:	f7ff ff82 	bl	8064a64 <__NVIC_SystemReset>

08064b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8064b60:	b580      	push	{r7, lr}
 8064b62:	b086      	sub	sp, #24
 8064b64:	af00      	add	r7, sp, #0
 8064b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8064b68:	2300      	movs	r3, #0
 8064b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8064b6c:	f7fe ff82 	bl	8063a74 <HAL_GetTick>
 8064b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8064b72:	687b      	ldr	r3, [r7, #4]
 8064b74:	2b00      	cmp	r3, #0
 8064b76:	d101      	bne.n	8064b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8064b78:	2301      	movs	r3, #1
 8064b7a:	e204      	b.n	8064f86 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8064b7c:	687b      	ldr	r3, [r7, #4]
 8064b7e:	681b      	ldr	r3, [r3, #0]
 8064b80:	4a97      	ldr	r2, [pc, #604]	; (8064de0 <HAL_DMA_Init+0x280>)
 8064b82:	4293      	cmp	r3, r2
 8064b84:	d04e      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064b86:	687b      	ldr	r3, [r7, #4]
 8064b88:	681b      	ldr	r3, [r3, #0]
 8064b8a:	4a96      	ldr	r2, [pc, #600]	; (8064de4 <HAL_DMA_Init+0x284>)
 8064b8c:	4293      	cmp	r3, r2
 8064b8e:	d049      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064b90:	687b      	ldr	r3, [r7, #4]
 8064b92:	681b      	ldr	r3, [r3, #0]
 8064b94:	4a94      	ldr	r2, [pc, #592]	; (8064de8 <HAL_DMA_Init+0x288>)
 8064b96:	4293      	cmp	r3, r2
 8064b98:	d044      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064b9a:	687b      	ldr	r3, [r7, #4]
 8064b9c:	681b      	ldr	r3, [r3, #0]
 8064b9e:	4a93      	ldr	r2, [pc, #588]	; (8064dec <HAL_DMA_Init+0x28c>)
 8064ba0:	4293      	cmp	r3, r2
 8064ba2:	d03f      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064ba4:	687b      	ldr	r3, [r7, #4]
 8064ba6:	681b      	ldr	r3, [r3, #0]
 8064ba8:	4a91      	ldr	r2, [pc, #580]	; (8064df0 <HAL_DMA_Init+0x290>)
 8064baa:	4293      	cmp	r3, r2
 8064bac:	d03a      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064bae:	687b      	ldr	r3, [r7, #4]
 8064bb0:	681b      	ldr	r3, [r3, #0]
 8064bb2:	4a90      	ldr	r2, [pc, #576]	; (8064df4 <HAL_DMA_Init+0x294>)
 8064bb4:	4293      	cmp	r3, r2
 8064bb6:	d035      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064bb8:	687b      	ldr	r3, [r7, #4]
 8064bba:	681b      	ldr	r3, [r3, #0]
 8064bbc:	4a8e      	ldr	r2, [pc, #568]	; (8064df8 <HAL_DMA_Init+0x298>)
 8064bbe:	4293      	cmp	r3, r2
 8064bc0:	d030      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064bc2:	687b      	ldr	r3, [r7, #4]
 8064bc4:	681b      	ldr	r3, [r3, #0]
 8064bc6:	4a8d      	ldr	r2, [pc, #564]	; (8064dfc <HAL_DMA_Init+0x29c>)
 8064bc8:	4293      	cmp	r3, r2
 8064bca:	d02b      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064bcc:	687b      	ldr	r3, [r7, #4]
 8064bce:	681b      	ldr	r3, [r3, #0]
 8064bd0:	4a8b      	ldr	r2, [pc, #556]	; (8064e00 <HAL_DMA_Init+0x2a0>)
 8064bd2:	4293      	cmp	r3, r2
 8064bd4:	d026      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064bd6:	687b      	ldr	r3, [r7, #4]
 8064bd8:	681b      	ldr	r3, [r3, #0]
 8064bda:	4a8a      	ldr	r2, [pc, #552]	; (8064e04 <HAL_DMA_Init+0x2a4>)
 8064bdc:	4293      	cmp	r3, r2
 8064bde:	d021      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064be0:	687b      	ldr	r3, [r7, #4]
 8064be2:	681b      	ldr	r3, [r3, #0]
 8064be4:	4a88      	ldr	r2, [pc, #544]	; (8064e08 <HAL_DMA_Init+0x2a8>)
 8064be6:	4293      	cmp	r3, r2
 8064be8:	d01c      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064bea:	687b      	ldr	r3, [r7, #4]
 8064bec:	681b      	ldr	r3, [r3, #0]
 8064bee:	4a87      	ldr	r2, [pc, #540]	; (8064e0c <HAL_DMA_Init+0x2ac>)
 8064bf0:	4293      	cmp	r3, r2
 8064bf2:	d017      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064bf4:	687b      	ldr	r3, [r7, #4]
 8064bf6:	681b      	ldr	r3, [r3, #0]
 8064bf8:	4a85      	ldr	r2, [pc, #532]	; (8064e10 <HAL_DMA_Init+0x2b0>)
 8064bfa:	4293      	cmp	r3, r2
 8064bfc:	d012      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064bfe:	687b      	ldr	r3, [r7, #4]
 8064c00:	681b      	ldr	r3, [r3, #0]
 8064c02:	4a84      	ldr	r2, [pc, #528]	; (8064e14 <HAL_DMA_Init+0x2b4>)
 8064c04:	4293      	cmp	r3, r2
 8064c06:	d00d      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064c08:	687b      	ldr	r3, [r7, #4]
 8064c0a:	681b      	ldr	r3, [r3, #0]
 8064c0c:	4a82      	ldr	r2, [pc, #520]	; (8064e18 <HAL_DMA_Init+0x2b8>)
 8064c0e:	4293      	cmp	r3, r2
 8064c10:	d008      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064c12:	687b      	ldr	r3, [r7, #4]
 8064c14:	681b      	ldr	r3, [r3, #0]
 8064c16:	4a81      	ldr	r2, [pc, #516]	; (8064e1c <HAL_DMA_Init+0x2bc>)
 8064c18:	4293      	cmp	r3, r2
 8064c1a:	d003      	beq.n	8064c24 <HAL_DMA_Init+0xc4>
 8064c1c:	21b8      	movs	r1, #184	; 0xb8
 8064c1e:	4880      	ldr	r0, [pc, #512]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064c20:	f7fe fa5d 	bl	80630de <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8064c24:	687b      	ldr	r3, [r7, #4]
 8064c26:	685b      	ldr	r3, [r3, #4]
 8064c28:	2b00      	cmp	r3, #0
 8064c2a:	d026      	beq.n	8064c7a <HAL_DMA_Init+0x11a>
 8064c2c:	687b      	ldr	r3, [r7, #4]
 8064c2e:	685b      	ldr	r3, [r3, #4]
 8064c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8064c34:	d021      	beq.n	8064c7a <HAL_DMA_Init+0x11a>
 8064c36:	687b      	ldr	r3, [r7, #4]
 8064c38:	685b      	ldr	r3, [r3, #4]
 8064c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8064c3e:	d01c      	beq.n	8064c7a <HAL_DMA_Init+0x11a>
 8064c40:	687b      	ldr	r3, [r7, #4]
 8064c42:	685b      	ldr	r3, [r3, #4]
 8064c44:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8064c48:	d017      	beq.n	8064c7a <HAL_DMA_Init+0x11a>
 8064c4a:	687b      	ldr	r3, [r7, #4]
 8064c4c:	685b      	ldr	r3, [r3, #4]
 8064c4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8064c52:	d012      	beq.n	8064c7a <HAL_DMA_Init+0x11a>
 8064c54:	687b      	ldr	r3, [r7, #4]
 8064c56:	685b      	ldr	r3, [r3, #4]
 8064c58:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8064c5c:	d00d      	beq.n	8064c7a <HAL_DMA_Init+0x11a>
 8064c5e:	687b      	ldr	r3, [r7, #4]
 8064c60:	685b      	ldr	r3, [r3, #4]
 8064c62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8064c66:	d008      	beq.n	8064c7a <HAL_DMA_Init+0x11a>
 8064c68:	687b      	ldr	r3, [r7, #4]
 8064c6a:	685b      	ldr	r3, [r3, #4]
 8064c6c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8064c70:	d003      	beq.n	8064c7a <HAL_DMA_Init+0x11a>
 8064c72:	21b9      	movs	r1, #185	; 0xb9
 8064c74:	486a      	ldr	r0, [pc, #424]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064c76:	f7fe fa32 	bl	80630de <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8064c7a:	687b      	ldr	r3, [r7, #4]
 8064c7c:	689b      	ldr	r3, [r3, #8]
 8064c7e:	2b00      	cmp	r3, #0
 8064c80:	d00b      	beq.n	8064c9a <HAL_DMA_Init+0x13a>
 8064c82:	687b      	ldr	r3, [r7, #4]
 8064c84:	689b      	ldr	r3, [r3, #8]
 8064c86:	2b40      	cmp	r3, #64	; 0x40
 8064c88:	d007      	beq.n	8064c9a <HAL_DMA_Init+0x13a>
 8064c8a:	687b      	ldr	r3, [r7, #4]
 8064c8c:	689b      	ldr	r3, [r3, #8]
 8064c8e:	2b80      	cmp	r3, #128	; 0x80
 8064c90:	d003      	beq.n	8064c9a <HAL_DMA_Init+0x13a>
 8064c92:	21ba      	movs	r1, #186	; 0xba
 8064c94:	4862      	ldr	r0, [pc, #392]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064c96:	f7fe fa22 	bl	80630de <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8064c9a:	687b      	ldr	r3, [r7, #4]
 8064c9c:	68db      	ldr	r3, [r3, #12]
 8064c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8064ca2:	d007      	beq.n	8064cb4 <HAL_DMA_Init+0x154>
 8064ca4:	687b      	ldr	r3, [r7, #4]
 8064ca6:	68db      	ldr	r3, [r3, #12]
 8064ca8:	2b00      	cmp	r3, #0
 8064caa:	d003      	beq.n	8064cb4 <HAL_DMA_Init+0x154>
 8064cac:	21bb      	movs	r1, #187	; 0xbb
 8064cae:	485c      	ldr	r0, [pc, #368]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064cb0:	f7fe fa15 	bl	80630de <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8064cb4:	687b      	ldr	r3, [r7, #4]
 8064cb6:	691b      	ldr	r3, [r3, #16]
 8064cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8064cbc:	d007      	beq.n	8064cce <HAL_DMA_Init+0x16e>
 8064cbe:	687b      	ldr	r3, [r7, #4]
 8064cc0:	691b      	ldr	r3, [r3, #16]
 8064cc2:	2b00      	cmp	r3, #0
 8064cc4:	d003      	beq.n	8064cce <HAL_DMA_Init+0x16e>
 8064cc6:	21bc      	movs	r1, #188	; 0xbc
 8064cc8:	4855      	ldr	r0, [pc, #340]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064cca:	f7fe fa08 	bl	80630de <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8064cce:	687b      	ldr	r3, [r7, #4]
 8064cd0:	695b      	ldr	r3, [r3, #20]
 8064cd2:	2b00      	cmp	r3, #0
 8064cd4:	d00d      	beq.n	8064cf2 <HAL_DMA_Init+0x192>
 8064cd6:	687b      	ldr	r3, [r7, #4]
 8064cd8:	695b      	ldr	r3, [r3, #20]
 8064cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8064cde:	d008      	beq.n	8064cf2 <HAL_DMA_Init+0x192>
 8064ce0:	687b      	ldr	r3, [r7, #4]
 8064ce2:	695b      	ldr	r3, [r3, #20]
 8064ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8064ce8:	d003      	beq.n	8064cf2 <HAL_DMA_Init+0x192>
 8064cea:	21bd      	movs	r1, #189	; 0xbd
 8064cec:	484c      	ldr	r0, [pc, #304]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064cee:	f7fe f9f6 	bl	80630de <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8064cf2:	687b      	ldr	r3, [r7, #4]
 8064cf4:	699b      	ldr	r3, [r3, #24]
 8064cf6:	2b00      	cmp	r3, #0
 8064cf8:	d00d      	beq.n	8064d16 <HAL_DMA_Init+0x1b6>
 8064cfa:	687b      	ldr	r3, [r7, #4]
 8064cfc:	699b      	ldr	r3, [r3, #24]
 8064cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8064d02:	d008      	beq.n	8064d16 <HAL_DMA_Init+0x1b6>
 8064d04:	687b      	ldr	r3, [r7, #4]
 8064d06:	699b      	ldr	r3, [r3, #24]
 8064d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8064d0c:	d003      	beq.n	8064d16 <HAL_DMA_Init+0x1b6>
 8064d0e:	21be      	movs	r1, #190	; 0xbe
 8064d10:	4843      	ldr	r0, [pc, #268]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064d12:	f7fe f9e4 	bl	80630de <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8064d16:	687b      	ldr	r3, [r7, #4]
 8064d18:	69db      	ldr	r3, [r3, #28]
 8064d1a:	2b00      	cmp	r3, #0
 8064d1c:	d00c      	beq.n	8064d38 <HAL_DMA_Init+0x1d8>
 8064d1e:	687b      	ldr	r3, [r7, #4]
 8064d20:	69db      	ldr	r3, [r3, #28]
 8064d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8064d26:	d007      	beq.n	8064d38 <HAL_DMA_Init+0x1d8>
 8064d28:	687b      	ldr	r3, [r7, #4]
 8064d2a:	69db      	ldr	r3, [r3, #28]
 8064d2c:	2b20      	cmp	r3, #32
 8064d2e:	d003      	beq.n	8064d38 <HAL_DMA_Init+0x1d8>
 8064d30:	21bf      	movs	r1, #191	; 0xbf
 8064d32:	483b      	ldr	r0, [pc, #236]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064d34:	f7fe f9d3 	bl	80630de <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8064d38:	687b      	ldr	r3, [r7, #4]
 8064d3a:	6a1b      	ldr	r3, [r3, #32]
 8064d3c:	2b00      	cmp	r3, #0
 8064d3e:	d012      	beq.n	8064d66 <HAL_DMA_Init+0x206>
 8064d40:	687b      	ldr	r3, [r7, #4]
 8064d42:	6a1b      	ldr	r3, [r3, #32]
 8064d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8064d48:	d00d      	beq.n	8064d66 <HAL_DMA_Init+0x206>
 8064d4a:	687b      	ldr	r3, [r7, #4]
 8064d4c:	6a1b      	ldr	r3, [r3, #32]
 8064d4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8064d52:	d008      	beq.n	8064d66 <HAL_DMA_Init+0x206>
 8064d54:	687b      	ldr	r3, [r7, #4]
 8064d56:	6a1b      	ldr	r3, [r3, #32]
 8064d58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8064d5c:	d003      	beq.n	8064d66 <HAL_DMA_Init+0x206>
 8064d5e:	21c0      	movs	r1, #192	; 0xc0
 8064d60:	482f      	ldr	r0, [pc, #188]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064d62:	f7fe f9bc 	bl	80630de <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8064d66:	687b      	ldr	r3, [r7, #4]
 8064d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064d6a:	2b00      	cmp	r3, #0
 8064d6c:	d007      	beq.n	8064d7e <HAL_DMA_Init+0x21e>
 8064d6e:	687b      	ldr	r3, [r7, #4]
 8064d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064d72:	2b04      	cmp	r3, #4
 8064d74:	d003      	beq.n	8064d7e <HAL_DMA_Init+0x21e>
 8064d76:	21c1      	movs	r1, #193	; 0xc1
 8064d78:	4829      	ldr	r0, [pc, #164]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064d7a:	f7fe f9b0 	bl	80630de <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8064d7e:	687b      	ldr	r3, [r7, #4]
 8064d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064d82:	2b00      	cmp	r3, #0
 8064d84:	d065      	beq.n	8064e52 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8064d86:	687b      	ldr	r3, [r7, #4]
 8064d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064d8a:	2b00      	cmp	r3, #0
 8064d8c:	d00f      	beq.n	8064dae <HAL_DMA_Init+0x24e>
 8064d8e:	687b      	ldr	r3, [r7, #4]
 8064d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064d92:	2b01      	cmp	r3, #1
 8064d94:	d00b      	beq.n	8064dae <HAL_DMA_Init+0x24e>
 8064d96:	687b      	ldr	r3, [r7, #4]
 8064d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064d9a:	2b02      	cmp	r3, #2
 8064d9c:	d007      	beq.n	8064dae <HAL_DMA_Init+0x24e>
 8064d9e:	687b      	ldr	r3, [r7, #4]
 8064da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064da2:	2b03      	cmp	r3, #3
 8064da4:	d003      	beq.n	8064dae <HAL_DMA_Init+0x24e>
 8064da6:	21c6      	movs	r1, #198	; 0xc6
 8064da8:	481d      	ldr	r0, [pc, #116]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064daa:	f7fe f998 	bl	80630de <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8064dae:	687b      	ldr	r3, [r7, #4]
 8064db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064db2:	2b00      	cmp	r3, #0
 8064db4:	d036      	beq.n	8064e24 <HAL_DMA_Init+0x2c4>
 8064db6:	687b      	ldr	r3, [r7, #4]
 8064db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064dba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8064dbe:	d031      	beq.n	8064e24 <HAL_DMA_Init+0x2c4>
 8064dc0:	687b      	ldr	r3, [r7, #4]
 8064dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8064dc8:	d02c      	beq.n	8064e24 <HAL_DMA_Init+0x2c4>
 8064dca:	687b      	ldr	r3, [r7, #4]
 8064dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064dce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8064dd2:	d027      	beq.n	8064e24 <HAL_DMA_Init+0x2c4>
 8064dd4:	21c7      	movs	r1, #199	; 0xc7
 8064dd6:	4812      	ldr	r0, [pc, #72]	; (8064e20 <HAL_DMA_Init+0x2c0>)
 8064dd8:	f7fe f981 	bl	80630de <assert_failed>
 8064ddc:	e022      	b.n	8064e24 <HAL_DMA_Init+0x2c4>
 8064dde:	bf00      	nop
 8064de0:	40026010 	.word	0x40026010
 8064de4:	40026028 	.word	0x40026028
 8064de8:	40026040 	.word	0x40026040
 8064dec:	40026058 	.word	0x40026058
 8064df0:	40026070 	.word	0x40026070
 8064df4:	40026088 	.word	0x40026088
 8064df8:	400260a0 	.word	0x400260a0
 8064dfc:	400260b8 	.word	0x400260b8
 8064e00:	40026410 	.word	0x40026410
 8064e04:	40026428 	.word	0x40026428
 8064e08:	40026440 	.word	0x40026440
 8064e0c:	40026458 	.word	0x40026458
 8064e10:	40026470 	.word	0x40026470
 8064e14:	40026488 	.word	0x40026488
 8064e18:	400264a0 	.word	0x400264a0
 8064e1c:	400264b8 	.word	0x400264b8
 8064e20:	08077338 	.word	0x08077338
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8064e24:	687b      	ldr	r3, [r7, #4]
 8064e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064e28:	2b00      	cmp	r3, #0
 8064e2a:	d012      	beq.n	8064e52 <HAL_DMA_Init+0x2f2>
 8064e2c:	687b      	ldr	r3, [r7, #4]
 8064e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8064e34:	d00d      	beq.n	8064e52 <HAL_DMA_Init+0x2f2>
 8064e36:	687b      	ldr	r3, [r7, #4]
 8064e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8064e3e:	d008      	beq.n	8064e52 <HAL_DMA_Init+0x2f2>
 8064e40:	687b      	ldr	r3, [r7, #4]
 8064e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064e44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8064e48:	d003      	beq.n	8064e52 <HAL_DMA_Init+0x2f2>
 8064e4a:	21c8      	movs	r1, #200	; 0xc8
 8064e4c:	4850      	ldr	r0, [pc, #320]	; (8064f90 <HAL_DMA_Init+0x430>)
 8064e4e:	f7fe f946 	bl	80630de <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8064e52:	687b      	ldr	r3, [r7, #4]
 8064e54:	2202      	movs	r2, #2
 8064e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8064e5a:	687b      	ldr	r3, [r7, #4]
 8064e5c:	2200      	movs	r2, #0
 8064e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8064e62:	687b      	ldr	r3, [r7, #4]
 8064e64:	681b      	ldr	r3, [r3, #0]
 8064e66:	681a      	ldr	r2, [r3, #0]
 8064e68:	687b      	ldr	r3, [r7, #4]
 8064e6a:	681b      	ldr	r3, [r3, #0]
 8064e6c:	f022 0201 	bic.w	r2, r2, #1
 8064e70:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8064e72:	e00f      	b.n	8064e94 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8064e74:	f7fe fdfe 	bl	8063a74 <HAL_GetTick>
 8064e78:	4602      	mov	r2, r0
 8064e7a:	693b      	ldr	r3, [r7, #16]
 8064e7c:	1ad3      	subs	r3, r2, r3
 8064e7e:	2b05      	cmp	r3, #5
 8064e80:	d908      	bls.n	8064e94 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8064e82:	687b      	ldr	r3, [r7, #4]
 8064e84:	2220      	movs	r2, #32
 8064e86:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8064e88:	687b      	ldr	r3, [r7, #4]
 8064e8a:	2203      	movs	r2, #3
 8064e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8064e90:	2303      	movs	r3, #3
 8064e92:	e078      	b.n	8064f86 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8064e94:	687b      	ldr	r3, [r7, #4]
 8064e96:	681b      	ldr	r3, [r3, #0]
 8064e98:	681b      	ldr	r3, [r3, #0]
 8064e9a:	f003 0301 	and.w	r3, r3, #1
 8064e9e:	2b00      	cmp	r3, #0
 8064ea0:	d1e8      	bne.n	8064e74 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8064ea2:	687b      	ldr	r3, [r7, #4]
 8064ea4:	681b      	ldr	r3, [r3, #0]
 8064ea6:	681b      	ldr	r3, [r3, #0]
 8064ea8:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8064eaa:	697a      	ldr	r2, [r7, #20]
 8064eac:	4b39      	ldr	r3, [pc, #228]	; (8064f94 <HAL_DMA_Init+0x434>)
 8064eae:	4013      	ands	r3, r2
 8064eb0:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8064eb2:	687b      	ldr	r3, [r7, #4]
 8064eb4:	685a      	ldr	r2, [r3, #4]
 8064eb6:	687b      	ldr	r3, [r7, #4]
 8064eb8:	689b      	ldr	r3, [r3, #8]
 8064eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8064ebc:	687b      	ldr	r3, [r7, #4]
 8064ebe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8064ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8064ec2:	687b      	ldr	r3, [r7, #4]
 8064ec4:	691b      	ldr	r3, [r3, #16]
 8064ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8064ec8:	687b      	ldr	r3, [r7, #4]
 8064eca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8064ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8064ece:	687b      	ldr	r3, [r7, #4]
 8064ed0:	699b      	ldr	r3, [r3, #24]
 8064ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8064ed4:	687b      	ldr	r3, [r7, #4]
 8064ed6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8064ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8064eda:	687b      	ldr	r3, [r7, #4]
 8064edc:	6a1b      	ldr	r3, [r3, #32]
 8064ede:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8064ee0:	697a      	ldr	r2, [r7, #20]
 8064ee2:	4313      	orrs	r3, r2
 8064ee4:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8064ee6:	687b      	ldr	r3, [r7, #4]
 8064ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064eea:	2b04      	cmp	r3, #4
 8064eec:	d107      	bne.n	8064efe <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8064eee:	687b      	ldr	r3, [r7, #4]
 8064ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8064ef2:	687b      	ldr	r3, [r7, #4]
 8064ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064ef6:	4313      	orrs	r3, r2
 8064ef8:	697a      	ldr	r2, [r7, #20]
 8064efa:	4313      	orrs	r3, r2
 8064efc:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8064efe:	687b      	ldr	r3, [r7, #4]
 8064f00:	681b      	ldr	r3, [r3, #0]
 8064f02:	697a      	ldr	r2, [r7, #20]
 8064f04:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8064f06:	687b      	ldr	r3, [r7, #4]
 8064f08:	681b      	ldr	r3, [r3, #0]
 8064f0a:	695b      	ldr	r3, [r3, #20]
 8064f0c:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8064f0e:	697b      	ldr	r3, [r7, #20]
 8064f10:	f023 0307 	bic.w	r3, r3, #7
 8064f14:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8064f16:	687b      	ldr	r3, [r7, #4]
 8064f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064f1a:	697a      	ldr	r2, [r7, #20]
 8064f1c:	4313      	orrs	r3, r2
 8064f1e:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8064f20:	687b      	ldr	r3, [r7, #4]
 8064f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064f24:	2b04      	cmp	r3, #4
 8064f26:	d117      	bne.n	8064f58 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8064f28:	687b      	ldr	r3, [r7, #4]
 8064f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064f2c:	697a      	ldr	r2, [r7, #20]
 8064f2e:	4313      	orrs	r3, r2
 8064f30:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8064f32:	687b      	ldr	r3, [r7, #4]
 8064f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064f36:	2b00      	cmp	r3, #0
 8064f38:	d00e      	beq.n	8064f58 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8064f3a:	6878      	ldr	r0, [r7, #4]
 8064f3c:	f000 fb12 	bl	8065564 <DMA_CheckFifoParam>
 8064f40:	4603      	mov	r3, r0
 8064f42:	2b00      	cmp	r3, #0
 8064f44:	d008      	beq.n	8064f58 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8064f46:	687b      	ldr	r3, [r7, #4]
 8064f48:	2240      	movs	r2, #64	; 0x40
 8064f4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8064f4c:	687b      	ldr	r3, [r7, #4]
 8064f4e:	2201      	movs	r2, #1
 8064f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8064f54:	2301      	movs	r3, #1
 8064f56:	e016      	b.n	8064f86 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8064f58:	687b      	ldr	r3, [r7, #4]
 8064f5a:	681b      	ldr	r3, [r3, #0]
 8064f5c:	697a      	ldr	r2, [r7, #20]
 8064f5e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8064f60:	6878      	ldr	r0, [r7, #4]
 8064f62:	f000 fac9 	bl	80654f8 <DMA_CalcBaseAndBitshift>
 8064f66:	4603      	mov	r3, r0
 8064f68:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8064f6a:	687b      	ldr	r3, [r7, #4]
 8064f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8064f6e:	223f      	movs	r2, #63	; 0x3f
 8064f70:	409a      	lsls	r2, r3
 8064f72:	68fb      	ldr	r3, [r7, #12]
 8064f74:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8064f76:	687b      	ldr	r3, [r7, #4]
 8064f78:	2200      	movs	r2, #0
 8064f7a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8064f7c:	687b      	ldr	r3, [r7, #4]
 8064f7e:	2201      	movs	r2, #1
 8064f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8064f84:	2300      	movs	r3, #0
}
 8064f86:	4618      	mov	r0, r3
 8064f88:	3718      	adds	r7, #24
 8064f8a:	46bd      	mov	sp, r7
 8064f8c:	bd80      	pop	{r7, pc}
 8064f8e:	bf00      	nop
 8064f90:	08077338 	.word	0x08077338
 8064f94:	f010803f 	.word	0xf010803f

08064f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8064f98:	b580      	push	{r7, lr}
 8064f9a:	b086      	sub	sp, #24
 8064f9c:	af00      	add	r7, sp, #0
 8064f9e:	60f8      	str	r0, [r7, #12]
 8064fa0:	60b9      	str	r1, [r7, #8]
 8064fa2:	607a      	str	r2, [r7, #4]
 8064fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8064fa6:	2300      	movs	r3, #0
 8064fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8064faa:	68fb      	ldr	r3, [r7, #12]
 8064fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8064fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8064fb0:	683b      	ldr	r3, [r7, #0]
 8064fb2:	2b00      	cmp	r3, #0
 8064fb4:	d003      	beq.n	8064fbe <HAL_DMA_Start_IT+0x26>
 8064fb6:	683b      	ldr	r3, [r7, #0]
 8064fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8064fbc:	d304      	bcc.n	8064fc8 <HAL_DMA_Start_IT+0x30>
 8064fbe:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8064fc2:	4827      	ldr	r0, [pc, #156]	; (8065060 <HAL_DMA_Start_IT+0xc8>)
 8064fc4:	f7fe f88b 	bl	80630de <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8064fc8:	68fb      	ldr	r3, [r7, #12]
 8064fca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8064fce:	2b01      	cmp	r3, #1
 8064fd0:	d101      	bne.n	8064fd6 <HAL_DMA_Start_IT+0x3e>
 8064fd2:	2302      	movs	r3, #2
 8064fd4:	e040      	b.n	8065058 <HAL_DMA_Start_IT+0xc0>
 8064fd6:	68fb      	ldr	r3, [r7, #12]
 8064fd8:	2201      	movs	r2, #1
 8064fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8064fde:	68fb      	ldr	r3, [r7, #12]
 8064fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8064fe4:	b2db      	uxtb	r3, r3
 8064fe6:	2b01      	cmp	r3, #1
 8064fe8:	d12f      	bne.n	806504a <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8064fea:	68fb      	ldr	r3, [r7, #12]
 8064fec:	2202      	movs	r2, #2
 8064fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8064ff2:	68fb      	ldr	r3, [r7, #12]
 8064ff4:	2200      	movs	r2, #0
 8064ff6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8064ff8:	683b      	ldr	r3, [r7, #0]
 8064ffa:	687a      	ldr	r2, [r7, #4]
 8064ffc:	68b9      	ldr	r1, [r7, #8]
 8064ffe:	68f8      	ldr	r0, [r7, #12]
 8065000:	f000 fa4c 	bl	806549c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8065004:	68fb      	ldr	r3, [r7, #12]
 8065006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065008:	223f      	movs	r2, #63	; 0x3f
 806500a:	409a      	lsls	r2, r3
 806500c:	693b      	ldr	r3, [r7, #16]
 806500e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8065010:	68fb      	ldr	r3, [r7, #12]
 8065012:	681b      	ldr	r3, [r3, #0]
 8065014:	681a      	ldr	r2, [r3, #0]
 8065016:	68fb      	ldr	r3, [r7, #12]
 8065018:	681b      	ldr	r3, [r3, #0]
 806501a:	f042 0216 	orr.w	r2, r2, #22
 806501e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8065020:	68fb      	ldr	r3, [r7, #12]
 8065022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8065024:	2b00      	cmp	r3, #0
 8065026:	d007      	beq.n	8065038 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8065028:	68fb      	ldr	r3, [r7, #12]
 806502a:	681b      	ldr	r3, [r3, #0]
 806502c:	681a      	ldr	r2, [r3, #0]
 806502e:	68fb      	ldr	r3, [r7, #12]
 8065030:	681b      	ldr	r3, [r3, #0]
 8065032:	f042 0208 	orr.w	r2, r2, #8
 8065036:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8065038:	68fb      	ldr	r3, [r7, #12]
 806503a:	681b      	ldr	r3, [r3, #0]
 806503c:	681a      	ldr	r2, [r3, #0]
 806503e:	68fb      	ldr	r3, [r7, #12]
 8065040:	681b      	ldr	r3, [r3, #0]
 8065042:	f042 0201 	orr.w	r2, r2, #1
 8065046:	601a      	str	r2, [r3, #0]
 8065048:	e005      	b.n	8065056 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 806504a:	68fb      	ldr	r3, [r7, #12]
 806504c:	2200      	movs	r2, #0
 806504e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8065052:	2302      	movs	r3, #2
 8065054:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8065056:	7dfb      	ldrb	r3, [r7, #23]
}
 8065058:	4618      	mov	r0, r3
 806505a:	3718      	adds	r7, #24
 806505c:	46bd      	mov	sp, r7
 806505e:	bd80      	pop	{r7, pc}
 8065060:	08077338 	.word	0x08077338

08065064 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8065064:	b580      	push	{r7, lr}
 8065066:	b084      	sub	sp, #16
 8065068:	af00      	add	r7, sp, #0
 806506a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 806506c:	687b      	ldr	r3, [r7, #4]
 806506e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8065070:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8065072:	f7fe fcff 	bl	8063a74 <HAL_GetTick>
 8065076:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8065078:	687b      	ldr	r3, [r7, #4]
 806507a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 806507e:	b2db      	uxtb	r3, r3
 8065080:	2b02      	cmp	r3, #2
 8065082:	d008      	beq.n	8065096 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8065084:	687b      	ldr	r3, [r7, #4]
 8065086:	2280      	movs	r2, #128	; 0x80
 8065088:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 806508a:	687b      	ldr	r3, [r7, #4]
 806508c:	2200      	movs	r2, #0
 806508e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8065092:	2301      	movs	r3, #1
 8065094:	e052      	b.n	806513c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8065096:	687b      	ldr	r3, [r7, #4]
 8065098:	681b      	ldr	r3, [r3, #0]
 806509a:	681a      	ldr	r2, [r3, #0]
 806509c:	687b      	ldr	r3, [r7, #4]
 806509e:	681b      	ldr	r3, [r3, #0]
 80650a0:	f022 0216 	bic.w	r2, r2, #22
 80650a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80650a6:	687b      	ldr	r3, [r7, #4]
 80650a8:	681b      	ldr	r3, [r3, #0]
 80650aa:	695a      	ldr	r2, [r3, #20]
 80650ac:	687b      	ldr	r3, [r7, #4]
 80650ae:	681b      	ldr	r3, [r3, #0]
 80650b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80650b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80650b6:	687b      	ldr	r3, [r7, #4]
 80650b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80650ba:	2b00      	cmp	r3, #0
 80650bc:	d103      	bne.n	80650c6 <HAL_DMA_Abort+0x62>
 80650be:	687b      	ldr	r3, [r7, #4]
 80650c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80650c2:	2b00      	cmp	r3, #0
 80650c4:	d007      	beq.n	80650d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80650c6:	687b      	ldr	r3, [r7, #4]
 80650c8:	681b      	ldr	r3, [r3, #0]
 80650ca:	681a      	ldr	r2, [r3, #0]
 80650cc:	687b      	ldr	r3, [r7, #4]
 80650ce:	681b      	ldr	r3, [r3, #0]
 80650d0:	f022 0208 	bic.w	r2, r2, #8
 80650d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80650d6:	687b      	ldr	r3, [r7, #4]
 80650d8:	681b      	ldr	r3, [r3, #0]
 80650da:	681a      	ldr	r2, [r3, #0]
 80650dc:	687b      	ldr	r3, [r7, #4]
 80650de:	681b      	ldr	r3, [r3, #0]
 80650e0:	f022 0201 	bic.w	r2, r2, #1
 80650e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80650e6:	e013      	b.n	8065110 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80650e8:	f7fe fcc4 	bl	8063a74 <HAL_GetTick>
 80650ec:	4602      	mov	r2, r0
 80650ee:	68bb      	ldr	r3, [r7, #8]
 80650f0:	1ad3      	subs	r3, r2, r3
 80650f2:	2b05      	cmp	r3, #5
 80650f4:	d90c      	bls.n	8065110 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80650f6:	687b      	ldr	r3, [r7, #4]
 80650f8:	2220      	movs	r2, #32
 80650fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80650fc:	687b      	ldr	r3, [r7, #4]
 80650fe:	2203      	movs	r2, #3
 8065100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8065104:	687b      	ldr	r3, [r7, #4]
 8065106:	2200      	movs	r2, #0
 8065108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 806510c:	2303      	movs	r3, #3
 806510e:	e015      	b.n	806513c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8065110:	687b      	ldr	r3, [r7, #4]
 8065112:	681b      	ldr	r3, [r3, #0]
 8065114:	681b      	ldr	r3, [r3, #0]
 8065116:	f003 0301 	and.w	r3, r3, #1
 806511a:	2b00      	cmp	r3, #0
 806511c:	d1e4      	bne.n	80650e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 806511e:	687b      	ldr	r3, [r7, #4]
 8065120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065122:	223f      	movs	r2, #63	; 0x3f
 8065124:	409a      	lsls	r2, r3
 8065126:	68fb      	ldr	r3, [r7, #12]
 8065128:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 806512a:	687b      	ldr	r3, [r7, #4]
 806512c:	2201      	movs	r2, #1
 806512e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8065132:	687b      	ldr	r3, [r7, #4]
 8065134:	2200      	movs	r2, #0
 8065136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 806513a:	2300      	movs	r3, #0
}
 806513c:	4618      	mov	r0, r3
 806513e:	3710      	adds	r7, #16
 8065140:	46bd      	mov	sp, r7
 8065142:	bd80      	pop	{r7, pc}

08065144 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8065144:	b480      	push	{r7}
 8065146:	b083      	sub	sp, #12
 8065148:	af00      	add	r7, sp, #0
 806514a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 806514c:	687b      	ldr	r3, [r7, #4]
 806514e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8065152:	b2db      	uxtb	r3, r3
 8065154:	2b02      	cmp	r3, #2
 8065156:	d004      	beq.n	8065162 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8065158:	687b      	ldr	r3, [r7, #4]
 806515a:	2280      	movs	r2, #128	; 0x80
 806515c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 806515e:	2301      	movs	r3, #1
 8065160:	e00c      	b.n	806517c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8065162:	687b      	ldr	r3, [r7, #4]
 8065164:	2205      	movs	r2, #5
 8065166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 806516a:	687b      	ldr	r3, [r7, #4]
 806516c:	681b      	ldr	r3, [r3, #0]
 806516e:	681a      	ldr	r2, [r3, #0]
 8065170:	687b      	ldr	r3, [r7, #4]
 8065172:	681b      	ldr	r3, [r3, #0]
 8065174:	f022 0201 	bic.w	r2, r2, #1
 8065178:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 806517a:	2300      	movs	r3, #0
}
 806517c:	4618      	mov	r0, r3
 806517e:	370c      	adds	r7, #12
 8065180:	46bd      	mov	sp, r7
 8065182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065186:	4770      	bx	lr

08065188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8065188:	b580      	push	{r7, lr}
 806518a:	b086      	sub	sp, #24
 806518c:	af00      	add	r7, sp, #0
 806518e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8065190:	2300      	movs	r3, #0
 8065192:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8065194:	4b92      	ldr	r3, [pc, #584]	; (80653e0 <HAL_DMA_IRQHandler+0x258>)
 8065196:	681b      	ldr	r3, [r3, #0]
 8065198:	4a92      	ldr	r2, [pc, #584]	; (80653e4 <HAL_DMA_IRQHandler+0x25c>)
 806519a:	fba2 2303 	umull	r2, r3, r2, r3
 806519e:	0a9b      	lsrs	r3, r3, #10
 80651a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80651a2:	687b      	ldr	r3, [r7, #4]
 80651a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80651a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80651a8:	693b      	ldr	r3, [r7, #16]
 80651aa:	681b      	ldr	r3, [r3, #0]
 80651ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80651ae:	687b      	ldr	r3, [r7, #4]
 80651b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80651b2:	2208      	movs	r2, #8
 80651b4:	409a      	lsls	r2, r3
 80651b6:	68fb      	ldr	r3, [r7, #12]
 80651b8:	4013      	ands	r3, r2
 80651ba:	2b00      	cmp	r3, #0
 80651bc:	d01a      	beq.n	80651f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80651be:	687b      	ldr	r3, [r7, #4]
 80651c0:	681b      	ldr	r3, [r3, #0]
 80651c2:	681b      	ldr	r3, [r3, #0]
 80651c4:	f003 0304 	and.w	r3, r3, #4
 80651c8:	2b00      	cmp	r3, #0
 80651ca:	d013      	beq.n	80651f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80651cc:	687b      	ldr	r3, [r7, #4]
 80651ce:	681b      	ldr	r3, [r3, #0]
 80651d0:	681a      	ldr	r2, [r3, #0]
 80651d2:	687b      	ldr	r3, [r7, #4]
 80651d4:	681b      	ldr	r3, [r3, #0]
 80651d6:	f022 0204 	bic.w	r2, r2, #4
 80651da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80651dc:	687b      	ldr	r3, [r7, #4]
 80651de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80651e0:	2208      	movs	r2, #8
 80651e2:	409a      	lsls	r2, r3
 80651e4:	693b      	ldr	r3, [r7, #16]
 80651e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80651e8:	687b      	ldr	r3, [r7, #4]
 80651ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80651ec:	f043 0201 	orr.w	r2, r3, #1
 80651f0:	687b      	ldr	r3, [r7, #4]
 80651f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80651f4:	687b      	ldr	r3, [r7, #4]
 80651f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80651f8:	2201      	movs	r2, #1
 80651fa:	409a      	lsls	r2, r3
 80651fc:	68fb      	ldr	r3, [r7, #12]
 80651fe:	4013      	ands	r3, r2
 8065200:	2b00      	cmp	r3, #0
 8065202:	d012      	beq.n	806522a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8065204:	687b      	ldr	r3, [r7, #4]
 8065206:	681b      	ldr	r3, [r3, #0]
 8065208:	695b      	ldr	r3, [r3, #20]
 806520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 806520e:	2b00      	cmp	r3, #0
 8065210:	d00b      	beq.n	806522a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8065212:	687b      	ldr	r3, [r7, #4]
 8065214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065216:	2201      	movs	r2, #1
 8065218:	409a      	lsls	r2, r3
 806521a:	693b      	ldr	r3, [r7, #16]
 806521c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 806521e:	687b      	ldr	r3, [r7, #4]
 8065220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8065222:	f043 0202 	orr.w	r2, r3, #2
 8065226:	687b      	ldr	r3, [r7, #4]
 8065228:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 806522a:	687b      	ldr	r3, [r7, #4]
 806522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 806522e:	2204      	movs	r2, #4
 8065230:	409a      	lsls	r2, r3
 8065232:	68fb      	ldr	r3, [r7, #12]
 8065234:	4013      	ands	r3, r2
 8065236:	2b00      	cmp	r3, #0
 8065238:	d012      	beq.n	8065260 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 806523a:	687b      	ldr	r3, [r7, #4]
 806523c:	681b      	ldr	r3, [r3, #0]
 806523e:	681b      	ldr	r3, [r3, #0]
 8065240:	f003 0302 	and.w	r3, r3, #2
 8065244:	2b00      	cmp	r3, #0
 8065246:	d00b      	beq.n	8065260 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8065248:	687b      	ldr	r3, [r7, #4]
 806524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 806524c:	2204      	movs	r2, #4
 806524e:	409a      	lsls	r2, r3
 8065250:	693b      	ldr	r3, [r7, #16]
 8065252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8065254:	687b      	ldr	r3, [r7, #4]
 8065256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8065258:	f043 0204 	orr.w	r2, r3, #4
 806525c:	687b      	ldr	r3, [r7, #4]
 806525e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8065260:	687b      	ldr	r3, [r7, #4]
 8065262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065264:	2210      	movs	r2, #16
 8065266:	409a      	lsls	r2, r3
 8065268:	68fb      	ldr	r3, [r7, #12]
 806526a:	4013      	ands	r3, r2
 806526c:	2b00      	cmp	r3, #0
 806526e:	d043      	beq.n	80652f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8065270:	687b      	ldr	r3, [r7, #4]
 8065272:	681b      	ldr	r3, [r3, #0]
 8065274:	681b      	ldr	r3, [r3, #0]
 8065276:	f003 0308 	and.w	r3, r3, #8
 806527a:	2b00      	cmp	r3, #0
 806527c:	d03c      	beq.n	80652f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 806527e:	687b      	ldr	r3, [r7, #4]
 8065280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065282:	2210      	movs	r2, #16
 8065284:	409a      	lsls	r2, r3
 8065286:	693b      	ldr	r3, [r7, #16]
 8065288:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 806528a:	687b      	ldr	r3, [r7, #4]
 806528c:	681b      	ldr	r3, [r3, #0]
 806528e:	681b      	ldr	r3, [r3, #0]
 8065290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8065294:	2b00      	cmp	r3, #0
 8065296:	d018      	beq.n	80652ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8065298:	687b      	ldr	r3, [r7, #4]
 806529a:	681b      	ldr	r3, [r3, #0]
 806529c:	681b      	ldr	r3, [r3, #0]
 806529e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80652a2:	2b00      	cmp	r3, #0
 80652a4:	d108      	bne.n	80652b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80652a6:	687b      	ldr	r3, [r7, #4]
 80652a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80652aa:	2b00      	cmp	r3, #0
 80652ac:	d024      	beq.n	80652f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80652ae:	687b      	ldr	r3, [r7, #4]
 80652b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80652b2:	6878      	ldr	r0, [r7, #4]
 80652b4:	4798      	blx	r3
 80652b6:	e01f      	b.n	80652f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80652b8:	687b      	ldr	r3, [r7, #4]
 80652ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80652bc:	2b00      	cmp	r3, #0
 80652be:	d01b      	beq.n	80652f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80652c0:	687b      	ldr	r3, [r7, #4]
 80652c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80652c4:	6878      	ldr	r0, [r7, #4]
 80652c6:	4798      	blx	r3
 80652c8:	e016      	b.n	80652f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80652ca:	687b      	ldr	r3, [r7, #4]
 80652cc:	681b      	ldr	r3, [r3, #0]
 80652ce:	681b      	ldr	r3, [r3, #0]
 80652d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80652d4:	2b00      	cmp	r3, #0
 80652d6:	d107      	bne.n	80652e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80652d8:	687b      	ldr	r3, [r7, #4]
 80652da:	681b      	ldr	r3, [r3, #0]
 80652dc:	681a      	ldr	r2, [r3, #0]
 80652de:	687b      	ldr	r3, [r7, #4]
 80652e0:	681b      	ldr	r3, [r3, #0]
 80652e2:	f022 0208 	bic.w	r2, r2, #8
 80652e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80652e8:	687b      	ldr	r3, [r7, #4]
 80652ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80652ec:	2b00      	cmp	r3, #0
 80652ee:	d003      	beq.n	80652f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80652f0:	687b      	ldr	r3, [r7, #4]
 80652f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80652f4:	6878      	ldr	r0, [r7, #4]
 80652f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80652f8:	687b      	ldr	r3, [r7, #4]
 80652fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80652fc:	2220      	movs	r2, #32
 80652fe:	409a      	lsls	r2, r3
 8065300:	68fb      	ldr	r3, [r7, #12]
 8065302:	4013      	ands	r3, r2
 8065304:	2b00      	cmp	r3, #0
 8065306:	f000 808e 	beq.w	8065426 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 806530a:	687b      	ldr	r3, [r7, #4]
 806530c:	681b      	ldr	r3, [r3, #0]
 806530e:	681b      	ldr	r3, [r3, #0]
 8065310:	f003 0310 	and.w	r3, r3, #16
 8065314:	2b00      	cmp	r3, #0
 8065316:	f000 8086 	beq.w	8065426 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 806531a:	687b      	ldr	r3, [r7, #4]
 806531c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 806531e:	2220      	movs	r2, #32
 8065320:	409a      	lsls	r2, r3
 8065322:	693b      	ldr	r3, [r7, #16]
 8065324:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8065326:	687b      	ldr	r3, [r7, #4]
 8065328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 806532c:	b2db      	uxtb	r3, r3
 806532e:	2b05      	cmp	r3, #5
 8065330:	d136      	bne.n	80653a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8065332:	687b      	ldr	r3, [r7, #4]
 8065334:	681b      	ldr	r3, [r3, #0]
 8065336:	681a      	ldr	r2, [r3, #0]
 8065338:	687b      	ldr	r3, [r7, #4]
 806533a:	681b      	ldr	r3, [r3, #0]
 806533c:	f022 0216 	bic.w	r2, r2, #22
 8065340:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8065342:	687b      	ldr	r3, [r7, #4]
 8065344:	681b      	ldr	r3, [r3, #0]
 8065346:	695a      	ldr	r2, [r3, #20]
 8065348:	687b      	ldr	r3, [r7, #4]
 806534a:	681b      	ldr	r3, [r3, #0]
 806534c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8065350:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8065352:	687b      	ldr	r3, [r7, #4]
 8065354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8065356:	2b00      	cmp	r3, #0
 8065358:	d103      	bne.n	8065362 <HAL_DMA_IRQHandler+0x1da>
 806535a:	687b      	ldr	r3, [r7, #4]
 806535c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 806535e:	2b00      	cmp	r3, #0
 8065360:	d007      	beq.n	8065372 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8065362:	687b      	ldr	r3, [r7, #4]
 8065364:	681b      	ldr	r3, [r3, #0]
 8065366:	681a      	ldr	r2, [r3, #0]
 8065368:	687b      	ldr	r3, [r7, #4]
 806536a:	681b      	ldr	r3, [r3, #0]
 806536c:	f022 0208 	bic.w	r2, r2, #8
 8065370:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8065372:	687b      	ldr	r3, [r7, #4]
 8065374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065376:	223f      	movs	r2, #63	; 0x3f
 8065378:	409a      	lsls	r2, r3
 806537a:	693b      	ldr	r3, [r7, #16]
 806537c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 806537e:	687b      	ldr	r3, [r7, #4]
 8065380:	2201      	movs	r2, #1
 8065382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8065386:	687b      	ldr	r3, [r7, #4]
 8065388:	2200      	movs	r2, #0
 806538a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 806538e:	687b      	ldr	r3, [r7, #4]
 8065390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8065392:	2b00      	cmp	r3, #0
 8065394:	d07d      	beq.n	8065492 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8065396:	687b      	ldr	r3, [r7, #4]
 8065398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 806539a:	6878      	ldr	r0, [r7, #4]
 806539c:	4798      	blx	r3
        }
        return;
 806539e:	e078      	b.n	8065492 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80653a0:	687b      	ldr	r3, [r7, #4]
 80653a2:	681b      	ldr	r3, [r3, #0]
 80653a4:	681b      	ldr	r3, [r3, #0]
 80653a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80653aa:	2b00      	cmp	r3, #0
 80653ac:	d01c      	beq.n	80653e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80653ae:	687b      	ldr	r3, [r7, #4]
 80653b0:	681b      	ldr	r3, [r3, #0]
 80653b2:	681b      	ldr	r3, [r3, #0]
 80653b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80653b8:	2b00      	cmp	r3, #0
 80653ba:	d108      	bne.n	80653ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80653bc:	687b      	ldr	r3, [r7, #4]
 80653be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80653c0:	2b00      	cmp	r3, #0
 80653c2:	d030      	beq.n	8065426 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80653c4:	687b      	ldr	r3, [r7, #4]
 80653c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80653c8:	6878      	ldr	r0, [r7, #4]
 80653ca:	4798      	blx	r3
 80653cc:	e02b      	b.n	8065426 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80653ce:	687b      	ldr	r3, [r7, #4]
 80653d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80653d2:	2b00      	cmp	r3, #0
 80653d4:	d027      	beq.n	8065426 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80653d6:	687b      	ldr	r3, [r7, #4]
 80653d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80653da:	6878      	ldr	r0, [r7, #4]
 80653dc:	4798      	blx	r3
 80653de:	e022      	b.n	8065426 <HAL_DMA_IRQHandler+0x29e>
 80653e0:	20000000 	.word	0x20000000
 80653e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80653e8:	687b      	ldr	r3, [r7, #4]
 80653ea:	681b      	ldr	r3, [r3, #0]
 80653ec:	681b      	ldr	r3, [r3, #0]
 80653ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80653f2:	2b00      	cmp	r3, #0
 80653f4:	d10f      	bne.n	8065416 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80653f6:	687b      	ldr	r3, [r7, #4]
 80653f8:	681b      	ldr	r3, [r3, #0]
 80653fa:	681a      	ldr	r2, [r3, #0]
 80653fc:	687b      	ldr	r3, [r7, #4]
 80653fe:	681b      	ldr	r3, [r3, #0]
 8065400:	f022 0210 	bic.w	r2, r2, #16
 8065404:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8065406:	687b      	ldr	r3, [r7, #4]
 8065408:	2201      	movs	r2, #1
 806540a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 806540e:	687b      	ldr	r3, [r7, #4]
 8065410:	2200      	movs	r2, #0
 8065412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8065416:	687b      	ldr	r3, [r7, #4]
 8065418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806541a:	2b00      	cmp	r3, #0
 806541c:	d003      	beq.n	8065426 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 806541e:	687b      	ldr	r3, [r7, #4]
 8065420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8065422:	6878      	ldr	r0, [r7, #4]
 8065424:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8065426:	687b      	ldr	r3, [r7, #4]
 8065428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 806542a:	2b00      	cmp	r3, #0
 806542c:	d032      	beq.n	8065494 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 806542e:	687b      	ldr	r3, [r7, #4]
 8065430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8065432:	f003 0301 	and.w	r3, r3, #1
 8065436:	2b00      	cmp	r3, #0
 8065438:	d022      	beq.n	8065480 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 806543a:	687b      	ldr	r3, [r7, #4]
 806543c:	2205      	movs	r2, #5
 806543e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8065442:	687b      	ldr	r3, [r7, #4]
 8065444:	681b      	ldr	r3, [r3, #0]
 8065446:	681a      	ldr	r2, [r3, #0]
 8065448:	687b      	ldr	r3, [r7, #4]
 806544a:	681b      	ldr	r3, [r3, #0]
 806544c:	f022 0201 	bic.w	r2, r2, #1
 8065450:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8065452:	68bb      	ldr	r3, [r7, #8]
 8065454:	3301      	adds	r3, #1
 8065456:	60bb      	str	r3, [r7, #8]
 8065458:	697a      	ldr	r2, [r7, #20]
 806545a:	429a      	cmp	r2, r3
 806545c:	d307      	bcc.n	806546e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 806545e:	687b      	ldr	r3, [r7, #4]
 8065460:	681b      	ldr	r3, [r3, #0]
 8065462:	681b      	ldr	r3, [r3, #0]
 8065464:	f003 0301 	and.w	r3, r3, #1
 8065468:	2b00      	cmp	r3, #0
 806546a:	d1f2      	bne.n	8065452 <HAL_DMA_IRQHandler+0x2ca>
 806546c:	e000      	b.n	8065470 <HAL_DMA_IRQHandler+0x2e8>
          break;
 806546e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8065470:	687b      	ldr	r3, [r7, #4]
 8065472:	2201      	movs	r2, #1
 8065474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8065478:	687b      	ldr	r3, [r7, #4]
 806547a:	2200      	movs	r2, #0
 806547c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8065480:	687b      	ldr	r3, [r7, #4]
 8065482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8065484:	2b00      	cmp	r3, #0
 8065486:	d005      	beq.n	8065494 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8065488:	687b      	ldr	r3, [r7, #4]
 806548a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 806548c:	6878      	ldr	r0, [r7, #4]
 806548e:	4798      	blx	r3
 8065490:	e000      	b.n	8065494 <HAL_DMA_IRQHandler+0x30c>
        return;
 8065492:	bf00      	nop
    }
  }
}
 8065494:	3718      	adds	r7, #24
 8065496:	46bd      	mov	sp, r7
 8065498:	bd80      	pop	{r7, pc}
 806549a:	bf00      	nop

0806549c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 806549c:	b480      	push	{r7}
 806549e:	b085      	sub	sp, #20
 80654a0:	af00      	add	r7, sp, #0
 80654a2:	60f8      	str	r0, [r7, #12]
 80654a4:	60b9      	str	r1, [r7, #8]
 80654a6:	607a      	str	r2, [r7, #4]
 80654a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80654aa:	68fb      	ldr	r3, [r7, #12]
 80654ac:	681b      	ldr	r3, [r3, #0]
 80654ae:	681a      	ldr	r2, [r3, #0]
 80654b0:	68fb      	ldr	r3, [r7, #12]
 80654b2:	681b      	ldr	r3, [r3, #0]
 80654b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80654b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80654ba:	68fb      	ldr	r3, [r7, #12]
 80654bc:	681b      	ldr	r3, [r3, #0]
 80654be:	683a      	ldr	r2, [r7, #0]
 80654c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80654c2:	68fb      	ldr	r3, [r7, #12]
 80654c4:	689b      	ldr	r3, [r3, #8]
 80654c6:	2b40      	cmp	r3, #64	; 0x40
 80654c8:	d108      	bne.n	80654dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80654ca:	68fb      	ldr	r3, [r7, #12]
 80654cc:	681b      	ldr	r3, [r3, #0]
 80654ce:	687a      	ldr	r2, [r7, #4]
 80654d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80654d2:	68fb      	ldr	r3, [r7, #12]
 80654d4:	681b      	ldr	r3, [r3, #0]
 80654d6:	68ba      	ldr	r2, [r7, #8]
 80654d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80654da:	e007      	b.n	80654ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80654dc:	68fb      	ldr	r3, [r7, #12]
 80654de:	681b      	ldr	r3, [r3, #0]
 80654e0:	68ba      	ldr	r2, [r7, #8]
 80654e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80654e4:	68fb      	ldr	r3, [r7, #12]
 80654e6:	681b      	ldr	r3, [r3, #0]
 80654e8:	687a      	ldr	r2, [r7, #4]
 80654ea:	60da      	str	r2, [r3, #12]
}
 80654ec:	bf00      	nop
 80654ee:	3714      	adds	r7, #20
 80654f0:	46bd      	mov	sp, r7
 80654f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80654f6:	4770      	bx	lr

080654f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80654f8:	b480      	push	{r7}
 80654fa:	b085      	sub	sp, #20
 80654fc:	af00      	add	r7, sp, #0
 80654fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8065500:	687b      	ldr	r3, [r7, #4]
 8065502:	681b      	ldr	r3, [r3, #0]
 8065504:	b2db      	uxtb	r3, r3
 8065506:	3b10      	subs	r3, #16
 8065508:	4a14      	ldr	r2, [pc, #80]	; (806555c <DMA_CalcBaseAndBitshift+0x64>)
 806550a:	fba2 2303 	umull	r2, r3, r2, r3
 806550e:	091b      	lsrs	r3, r3, #4
 8065510:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8065512:	4a13      	ldr	r2, [pc, #76]	; (8065560 <DMA_CalcBaseAndBitshift+0x68>)
 8065514:	68fb      	ldr	r3, [r7, #12]
 8065516:	4413      	add	r3, r2
 8065518:	781b      	ldrb	r3, [r3, #0]
 806551a:	461a      	mov	r2, r3
 806551c:	687b      	ldr	r3, [r7, #4]
 806551e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8065520:	68fb      	ldr	r3, [r7, #12]
 8065522:	2b03      	cmp	r3, #3
 8065524:	d909      	bls.n	806553a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8065526:	687b      	ldr	r3, [r7, #4]
 8065528:	681b      	ldr	r3, [r3, #0]
 806552a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 806552e:	f023 0303 	bic.w	r3, r3, #3
 8065532:	1d1a      	adds	r2, r3, #4
 8065534:	687b      	ldr	r3, [r7, #4]
 8065536:	659a      	str	r2, [r3, #88]	; 0x58
 8065538:	e007      	b.n	806554a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 806553a:	687b      	ldr	r3, [r7, #4]
 806553c:	681b      	ldr	r3, [r3, #0]
 806553e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8065542:	f023 0303 	bic.w	r3, r3, #3
 8065546:	687a      	ldr	r2, [r7, #4]
 8065548:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 806554a:	687b      	ldr	r3, [r7, #4]
 806554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 806554e:	4618      	mov	r0, r3
 8065550:	3714      	adds	r7, #20
 8065552:	46bd      	mov	sp, r7
 8065554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065558:	4770      	bx	lr
 806555a:	bf00      	nop
 806555c:	aaaaaaab 	.word	0xaaaaaaab
 8065560:	08077728 	.word	0x08077728

08065564 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8065564:	b480      	push	{r7}
 8065566:	b085      	sub	sp, #20
 8065568:	af00      	add	r7, sp, #0
 806556a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 806556c:	2300      	movs	r3, #0
 806556e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8065570:	687b      	ldr	r3, [r7, #4]
 8065572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8065574:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8065576:	687b      	ldr	r3, [r7, #4]
 8065578:	699b      	ldr	r3, [r3, #24]
 806557a:	2b00      	cmp	r3, #0
 806557c:	d11f      	bne.n	80655be <DMA_CheckFifoParam+0x5a>
 806557e:	68bb      	ldr	r3, [r7, #8]
 8065580:	2b03      	cmp	r3, #3
 8065582:	d856      	bhi.n	8065632 <DMA_CheckFifoParam+0xce>
 8065584:	a201      	add	r2, pc, #4	; (adr r2, 806558c <DMA_CheckFifoParam+0x28>)
 8065586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806558a:	bf00      	nop
 806558c:	0806559d 	.word	0x0806559d
 8065590:	080655af 	.word	0x080655af
 8065594:	0806559d 	.word	0x0806559d
 8065598:	08065633 	.word	0x08065633
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 806559c:	687b      	ldr	r3, [r7, #4]
 806559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80655a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80655a4:	2b00      	cmp	r3, #0
 80655a6:	d046      	beq.n	8065636 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80655a8:	2301      	movs	r3, #1
 80655aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80655ac:	e043      	b.n	8065636 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80655ae:	687b      	ldr	r3, [r7, #4]
 80655b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80655b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80655b6:	d140      	bne.n	806563a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80655b8:	2301      	movs	r3, #1
 80655ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80655bc:	e03d      	b.n	806563a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80655be:	687b      	ldr	r3, [r7, #4]
 80655c0:	699b      	ldr	r3, [r3, #24]
 80655c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80655c6:	d121      	bne.n	806560c <DMA_CheckFifoParam+0xa8>
 80655c8:	68bb      	ldr	r3, [r7, #8]
 80655ca:	2b03      	cmp	r3, #3
 80655cc:	d837      	bhi.n	806563e <DMA_CheckFifoParam+0xda>
 80655ce:	a201      	add	r2, pc, #4	; (adr r2, 80655d4 <DMA_CheckFifoParam+0x70>)
 80655d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80655d4:	080655e5 	.word	0x080655e5
 80655d8:	080655eb 	.word	0x080655eb
 80655dc:	080655e5 	.word	0x080655e5
 80655e0:	080655fd 	.word	0x080655fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80655e4:	2301      	movs	r3, #1
 80655e6:	73fb      	strb	r3, [r7, #15]
      break;
 80655e8:	e030      	b.n	806564c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80655ea:	687b      	ldr	r3, [r7, #4]
 80655ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80655ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80655f2:	2b00      	cmp	r3, #0
 80655f4:	d025      	beq.n	8065642 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80655f6:	2301      	movs	r3, #1
 80655f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80655fa:	e022      	b.n	8065642 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80655fc:	687b      	ldr	r3, [r7, #4]
 80655fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8065600:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8065604:	d11f      	bne.n	8065646 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8065606:	2301      	movs	r3, #1
 8065608:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 806560a:	e01c      	b.n	8065646 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 806560c:	68bb      	ldr	r3, [r7, #8]
 806560e:	2b02      	cmp	r3, #2
 8065610:	d903      	bls.n	806561a <DMA_CheckFifoParam+0xb6>
 8065612:	68bb      	ldr	r3, [r7, #8]
 8065614:	2b03      	cmp	r3, #3
 8065616:	d003      	beq.n	8065620 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8065618:	e018      	b.n	806564c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 806561a:	2301      	movs	r3, #1
 806561c:	73fb      	strb	r3, [r7, #15]
      break;
 806561e:	e015      	b.n	806564c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8065620:	687b      	ldr	r3, [r7, #4]
 8065622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8065624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8065628:	2b00      	cmp	r3, #0
 806562a:	d00e      	beq.n	806564a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 806562c:	2301      	movs	r3, #1
 806562e:	73fb      	strb	r3, [r7, #15]
      break;
 8065630:	e00b      	b.n	806564a <DMA_CheckFifoParam+0xe6>
      break;
 8065632:	bf00      	nop
 8065634:	e00a      	b.n	806564c <DMA_CheckFifoParam+0xe8>
      break;
 8065636:	bf00      	nop
 8065638:	e008      	b.n	806564c <DMA_CheckFifoParam+0xe8>
      break;
 806563a:	bf00      	nop
 806563c:	e006      	b.n	806564c <DMA_CheckFifoParam+0xe8>
      break;
 806563e:	bf00      	nop
 8065640:	e004      	b.n	806564c <DMA_CheckFifoParam+0xe8>
      break;
 8065642:	bf00      	nop
 8065644:	e002      	b.n	806564c <DMA_CheckFifoParam+0xe8>
      break;   
 8065646:	bf00      	nop
 8065648:	e000      	b.n	806564c <DMA_CheckFifoParam+0xe8>
      break;
 806564a:	bf00      	nop
    }
  } 
  
  return status; 
 806564c:	7bfb      	ldrb	r3, [r7, #15]
}
 806564e:	4618      	mov	r0, r3
 8065650:	3714      	adds	r7, #20
 8065652:	46bd      	mov	sp, r7
 8065654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065658:	4770      	bx	lr
 806565a:	bf00      	nop

0806565c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 806565c:	b580      	push	{r7, lr}
 806565e:	b088      	sub	sp, #32
 8065660:	af00      	add	r7, sp, #0
 8065662:	6078      	str	r0, [r7, #4]
 8065664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8065666:	2300      	movs	r3, #0
 8065668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 806566a:	2300      	movs	r3, #0
 806566c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 806566e:	2300      	movs	r3, #0
 8065670:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8065672:	687b      	ldr	r3, [r7, #4]
 8065674:	4a33      	ldr	r2, [pc, #204]	; (8065744 <HAL_GPIO_Init+0xe8>)
 8065676:	4293      	cmp	r3, r2
 8065678:	d017      	beq.n	80656aa <HAL_GPIO_Init+0x4e>
 806567a:	687b      	ldr	r3, [r7, #4]
 806567c:	4a32      	ldr	r2, [pc, #200]	; (8065748 <HAL_GPIO_Init+0xec>)
 806567e:	4293      	cmp	r3, r2
 8065680:	d013      	beq.n	80656aa <HAL_GPIO_Init+0x4e>
 8065682:	687b      	ldr	r3, [r7, #4]
 8065684:	4a31      	ldr	r2, [pc, #196]	; (806574c <HAL_GPIO_Init+0xf0>)
 8065686:	4293      	cmp	r3, r2
 8065688:	d00f      	beq.n	80656aa <HAL_GPIO_Init+0x4e>
 806568a:	687b      	ldr	r3, [r7, #4]
 806568c:	4a30      	ldr	r2, [pc, #192]	; (8065750 <HAL_GPIO_Init+0xf4>)
 806568e:	4293      	cmp	r3, r2
 8065690:	d00b      	beq.n	80656aa <HAL_GPIO_Init+0x4e>
 8065692:	687b      	ldr	r3, [r7, #4]
 8065694:	4a2f      	ldr	r2, [pc, #188]	; (8065754 <HAL_GPIO_Init+0xf8>)
 8065696:	4293      	cmp	r3, r2
 8065698:	d007      	beq.n	80656aa <HAL_GPIO_Init+0x4e>
 806569a:	687b      	ldr	r3, [r7, #4]
 806569c:	4a2e      	ldr	r2, [pc, #184]	; (8065758 <HAL_GPIO_Init+0xfc>)
 806569e:	4293      	cmp	r3, r2
 80656a0:	d003      	beq.n	80656aa <HAL_GPIO_Init+0x4e>
 80656a2:	21ac      	movs	r1, #172	; 0xac
 80656a4:	482d      	ldr	r0, [pc, #180]	; (806575c <HAL_GPIO_Init+0x100>)
 80656a6:	f7fd fd1a 	bl	80630de <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80656aa:	683b      	ldr	r3, [r7, #0]
 80656ac:	681b      	ldr	r3, [r3, #0]
 80656ae:	b29b      	uxth	r3, r3
 80656b0:	2b00      	cmp	r3, #0
 80656b2:	d005      	beq.n	80656c0 <HAL_GPIO_Init+0x64>
 80656b4:	683b      	ldr	r3, [r7, #0]
 80656b6:	681b      	ldr	r3, [r3, #0]
 80656b8:	0c1b      	lsrs	r3, r3, #16
 80656ba:	041b      	lsls	r3, r3, #16
 80656bc:	2b00      	cmp	r3, #0
 80656be:	d003      	beq.n	80656c8 <HAL_GPIO_Init+0x6c>
 80656c0:	21ad      	movs	r1, #173	; 0xad
 80656c2:	4826      	ldr	r0, [pc, #152]	; (806575c <HAL_GPIO_Init+0x100>)
 80656c4:	f7fd fd0b 	bl	80630de <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80656c8:	683b      	ldr	r3, [r7, #0]
 80656ca:	685b      	ldr	r3, [r3, #4]
 80656cc:	2b00      	cmp	r3, #0
 80656ce:	d035      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 80656d0:	683b      	ldr	r3, [r7, #0]
 80656d2:	685b      	ldr	r3, [r3, #4]
 80656d4:	2b01      	cmp	r3, #1
 80656d6:	d031      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 80656d8:	683b      	ldr	r3, [r7, #0]
 80656da:	685b      	ldr	r3, [r3, #4]
 80656dc:	2b11      	cmp	r3, #17
 80656de:	d02d      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 80656e0:	683b      	ldr	r3, [r7, #0]
 80656e2:	685b      	ldr	r3, [r3, #4]
 80656e4:	2b02      	cmp	r3, #2
 80656e6:	d029      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 80656e8:	683b      	ldr	r3, [r7, #0]
 80656ea:	685b      	ldr	r3, [r3, #4]
 80656ec:	2b12      	cmp	r3, #18
 80656ee:	d025      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 80656f0:	683b      	ldr	r3, [r7, #0]
 80656f2:	685b      	ldr	r3, [r3, #4]
 80656f4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80656f8:	d020      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 80656fa:	683b      	ldr	r3, [r7, #0]
 80656fc:	685b      	ldr	r3, [r3, #4]
 80656fe:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8065702:	d01b      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 8065704:	683b      	ldr	r3, [r7, #0]
 8065706:	685b      	ldr	r3, [r3, #4]
 8065708:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 806570c:	d016      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 806570e:	683b      	ldr	r3, [r7, #0]
 8065710:	685b      	ldr	r3, [r3, #4]
 8065712:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8065716:	d011      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 8065718:	683b      	ldr	r3, [r7, #0]
 806571a:	685b      	ldr	r3, [r3, #4]
 806571c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8065720:	d00c      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 8065722:	683b      	ldr	r3, [r7, #0]
 8065724:	685b      	ldr	r3, [r3, #4]
 8065726:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 806572a:	d007      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 806572c:	683b      	ldr	r3, [r7, #0]
 806572e:	685b      	ldr	r3, [r3, #4]
 8065730:	2b03      	cmp	r3, #3
 8065732:	d003      	beq.n	806573c <HAL_GPIO_Init+0xe0>
 8065734:	21ae      	movs	r1, #174	; 0xae
 8065736:	4809      	ldr	r0, [pc, #36]	; (806575c <HAL_GPIO_Init+0x100>)
 8065738:	f7fd fcd1 	bl	80630de <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 806573c:	2300      	movs	r3, #0
 806573e:	61fb      	str	r3, [r7, #28]
 8065740:	e211      	b.n	8065b66 <HAL_GPIO_Init+0x50a>
 8065742:	bf00      	nop
 8065744:	40020000 	.word	0x40020000
 8065748:	40020400 	.word	0x40020400
 806574c:	40020800 	.word	0x40020800
 8065750:	40020c00 	.word	0x40020c00
 8065754:	40021000 	.word	0x40021000
 8065758:	40021c00 	.word	0x40021c00
 806575c:	08077370 	.word	0x08077370
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8065760:	2201      	movs	r2, #1
 8065762:	69fb      	ldr	r3, [r7, #28]
 8065764:	fa02 f303 	lsl.w	r3, r2, r3
 8065768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 806576a:	683b      	ldr	r3, [r7, #0]
 806576c:	681b      	ldr	r3, [r3, #0]
 806576e:	697a      	ldr	r2, [r7, #20]
 8065770:	4013      	ands	r3, r2
 8065772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8065774:	693a      	ldr	r2, [r7, #16]
 8065776:	697b      	ldr	r3, [r7, #20]
 8065778:	429a      	cmp	r2, r3
 806577a:	f040 81f1 	bne.w	8065b60 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 806577e:	683b      	ldr	r3, [r7, #0]
 8065780:	685b      	ldr	r3, [r3, #4]
 8065782:	f003 0303 	and.w	r3, r3, #3
 8065786:	2b01      	cmp	r3, #1
 8065788:	d005      	beq.n	8065796 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 806578a:	683b      	ldr	r3, [r7, #0]
 806578c:	685b      	ldr	r3, [r3, #4]
 806578e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8065792:	2b02      	cmp	r3, #2
 8065794:	d144      	bne.n	8065820 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8065796:	683b      	ldr	r3, [r7, #0]
 8065798:	68db      	ldr	r3, [r3, #12]
 806579a:	2b00      	cmp	r3, #0
 806579c:	d00f      	beq.n	80657be <HAL_GPIO_Init+0x162>
 806579e:	683b      	ldr	r3, [r7, #0]
 80657a0:	68db      	ldr	r3, [r3, #12]
 80657a2:	2b01      	cmp	r3, #1
 80657a4:	d00b      	beq.n	80657be <HAL_GPIO_Init+0x162>
 80657a6:	683b      	ldr	r3, [r7, #0]
 80657a8:	68db      	ldr	r3, [r3, #12]
 80657aa:	2b02      	cmp	r3, #2
 80657ac:	d007      	beq.n	80657be <HAL_GPIO_Init+0x162>
 80657ae:	683b      	ldr	r3, [r7, #0]
 80657b0:	68db      	ldr	r3, [r3, #12]
 80657b2:	2b03      	cmp	r3, #3
 80657b4:	d003      	beq.n	80657be <HAL_GPIO_Init+0x162>
 80657b6:	21c0      	movs	r1, #192	; 0xc0
 80657b8:	489f      	ldr	r0, [pc, #636]	; (8065a38 <HAL_GPIO_Init+0x3dc>)
 80657ba:	f7fd fc90 	bl	80630de <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80657be:	687b      	ldr	r3, [r7, #4]
 80657c0:	689b      	ldr	r3, [r3, #8]
 80657c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80657c4:	69fb      	ldr	r3, [r7, #28]
 80657c6:	005b      	lsls	r3, r3, #1
 80657c8:	2203      	movs	r2, #3
 80657ca:	fa02 f303 	lsl.w	r3, r2, r3
 80657ce:	43db      	mvns	r3, r3
 80657d0:	69ba      	ldr	r2, [r7, #24]
 80657d2:	4013      	ands	r3, r2
 80657d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80657d6:	683b      	ldr	r3, [r7, #0]
 80657d8:	68da      	ldr	r2, [r3, #12]
 80657da:	69fb      	ldr	r3, [r7, #28]
 80657dc:	005b      	lsls	r3, r3, #1
 80657de:	fa02 f303 	lsl.w	r3, r2, r3
 80657e2:	69ba      	ldr	r2, [r7, #24]
 80657e4:	4313      	orrs	r3, r2
 80657e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80657e8:	687b      	ldr	r3, [r7, #4]
 80657ea:	69ba      	ldr	r2, [r7, #24]
 80657ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80657ee:	687b      	ldr	r3, [r7, #4]
 80657f0:	685b      	ldr	r3, [r3, #4]
 80657f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80657f4:	2201      	movs	r2, #1
 80657f6:	69fb      	ldr	r3, [r7, #28]
 80657f8:	fa02 f303 	lsl.w	r3, r2, r3
 80657fc:	43db      	mvns	r3, r3
 80657fe:	69ba      	ldr	r2, [r7, #24]
 8065800:	4013      	ands	r3, r2
 8065802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8065804:	683b      	ldr	r3, [r7, #0]
 8065806:	685b      	ldr	r3, [r3, #4]
 8065808:	091b      	lsrs	r3, r3, #4
 806580a:	f003 0201 	and.w	r2, r3, #1
 806580e:	69fb      	ldr	r3, [r7, #28]
 8065810:	fa02 f303 	lsl.w	r3, r2, r3
 8065814:	69ba      	ldr	r2, [r7, #24]
 8065816:	4313      	orrs	r3, r2
 8065818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 806581a:	687b      	ldr	r3, [r7, #4]
 806581c:	69ba      	ldr	r2, [r7, #24]
 806581e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8065820:	683b      	ldr	r3, [r7, #0]
 8065822:	685b      	ldr	r3, [r3, #4]
 8065824:	f003 0303 	and.w	r3, r3, #3
 8065828:	2b03      	cmp	r3, #3
 806582a:	d027      	beq.n	806587c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 806582c:	683b      	ldr	r3, [r7, #0]
 806582e:	689b      	ldr	r3, [r3, #8]
 8065830:	2b00      	cmp	r3, #0
 8065832:	d00b      	beq.n	806584c <HAL_GPIO_Init+0x1f0>
 8065834:	683b      	ldr	r3, [r7, #0]
 8065836:	689b      	ldr	r3, [r3, #8]
 8065838:	2b01      	cmp	r3, #1
 806583a:	d007      	beq.n	806584c <HAL_GPIO_Init+0x1f0>
 806583c:	683b      	ldr	r3, [r7, #0]
 806583e:	689b      	ldr	r3, [r3, #8]
 8065840:	2b02      	cmp	r3, #2
 8065842:	d003      	beq.n	806584c <HAL_GPIO_Init+0x1f0>
 8065844:	21d1      	movs	r1, #209	; 0xd1
 8065846:	487c      	ldr	r0, [pc, #496]	; (8065a38 <HAL_GPIO_Init+0x3dc>)
 8065848:	f7fd fc49 	bl	80630de <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 806584c:	687b      	ldr	r3, [r7, #4]
 806584e:	68db      	ldr	r3, [r3, #12]
 8065850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8065852:	69fb      	ldr	r3, [r7, #28]
 8065854:	005b      	lsls	r3, r3, #1
 8065856:	2203      	movs	r2, #3
 8065858:	fa02 f303 	lsl.w	r3, r2, r3
 806585c:	43db      	mvns	r3, r3
 806585e:	69ba      	ldr	r2, [r7, #24]
 8065860:	4013      	ands	r3, r2
 8065862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8065864:	683b      	ldr	r3, [r7, #0]
 8065866:	689a      	ldr	r2, [r3, #8]
 8065868:	69fb      	ldr	r3, [r7, #28]
 806586a:	005b      	lsls	r3, r3, #1
 806586c:	fa02 f303 	lsl.w	r3, r2, r3
 8065870:	69ba      	ldr	r2, [r7, #24]
 8065872:	4313      	orrs	r3, r2
 8065874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8065876:	687b      	ldr	r3, [r7, #4]
 8065878:	69ba      	ldr	r2, [r7, #24]
 806587a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 806587c:	683b      	ldr	r3, [r7, #0]
 806587e:	685b      	ldr	r3, [r3, #4]
 8065880:	f003 0303 	and.w	r3, r3, #3
 8065884:	2b02      	cmp	r3, #2
 8065886:	f040 80a0 	bne.w	80659ca <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 806588a:	683b      	ldr	r3, [r7, #0]
 806588c:	691b      	ldr	r3, [r3, #16]
 806588e:	2b00      	cmp	r3, #0
 8065890:	d077      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 8065892:	683b      	ldr	r3, [r7, #0]
 8065894:	691b      	ldr	r3, [r3, #16]
 8065896:	2b09      	cmp	r3, #9
 8065898:	d073      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 806589a:	683b      	ldr	r3, [r7, #0]
 806589c:	691b      	ldr	r3, [r3, #16]
 806589e:	2b00      	cmp	r3, #0
 80658a0:	d06f      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658a2:	683b      	ldr	r3, [r7, #0]
 80658a4:	691b      	ldr	r3, [r3, #16]
 80658a6:	2b00      	cmp	r3, #0
 80658a8:	d06b      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658aa:	683b      	ldr	r3, [r7, #0]
 80658ac:	691b      	ldr	r3, [r3, #16]
 80658ae:	2b00      	cmp	r3, #0
 80658b0:	d067      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658b2:	683b      	ldr	r3, [r7, #0]
 80658b4:	691b      	ldr	r3, [r3, #16]
 80658b6:	2b00      	cmp	r3, #0
 80658b8:	d063      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658ba:	683b      	ldr	r3, [r7, #0]
 80658bc:	691b      	ldr	r3, [r3, #16]
 80658be:	2b01      	cmp	r3, #1
 80658c0:	d05f      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658c2:	683b      	ldr	r3, [r7, #0]
 80658c4:	691b      	ldr	r3, [r3, #16]
 80658c6:	2b01      	cmp	r3, #1
 80658c8:	d05b      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658ca:	683b      	ldr	r3, [r7, #0]
 80658cc:	691b      	ldr	r3, [r3, #16]
 80658ce:	2b02      	cmp	r3, #2
 80658d0:	d057      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658d2:	683b      	ldr	r3, [r7, #0]
 80658d4:	691b      	ldr	r3, [r3, #16]
 80658d6:	2b02      	cmp	r3, #2
 80658d8:	d053      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658da:	683b      	ldr	r3, [r7, #0]
 80658dc:	691b      	ldr	r3, [r3, #16]
 80658de:	2b02      	cmp	r3, #2
 80658e0:	d04f      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658e2:	683b      	ldr	r3, [r7, #0]
 80658e4:	691b      	ldr	r3, [r3, #16]
 80658e6:	2b04      	cmp	r3, #4
 80658e8:	d04b      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658ea:	683b      	ldr	r3, [r7, #0]
 80658ec:	691b      	ldr	r3, [r3, #16]
 80658ee:	2b04      	cmp	r3, #4
 80658f0:	d047      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658f2:	683b      	ldr	r3, [r7, #0]
 80658f4:	691b      	ldr	r3, [r3, #16]
 80658f6:	2b04      	cmp	r3, #4
 80658f8:	d043      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 80658fa:	683b      	ldr	r3, [r7, #0]
 80658fc:	691b      	ldr	r3, [r3, #16]
 80658fe:	2b05      	cmp	r3, #5
 8065900:	d03f      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 8065902:	683b      	ldr	r3, [r7, #0]
 8065904:	691b      	ldr	r3, [r3, #16]
 8065906:	2b05      	cmp	r3, #5
 8065908:	d03b      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 806590a:	683b      	ldr	r3, [r7, #0]
 806590c:	691b      	ldr	r3, [r3, #16]
 806590e:	2b05      	cmp	r3, #5
 8065910:	d037      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 8065912:	683b      	ldr	r3, [r7, #0]
 8065914:	691b      	ldr	r3, [r3, #16]
 8065916:	2b06      	cmp	r3, #6
 8065918:	d033      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 806591a:	683b      	ldr	r3, [r7, #0]
 806591c:	691b      	ldr	r3, [r3, #16]
 806591e:	2b06      	cmp	r3, #6
 8065920:	d02f      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 8065922:	683b      	ldr	r3, [r7, #0]
 8065924:	691b      	ldr	r3, [r3, #16]
 8065926:	2b05      	cmp	r3, #5
 8065928:	d02b      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 806592a:	683b      	ldr	r3, [r7, #0]
 806592c:	691b      	ldr	r3, [r3, #16]
 806592e:	2b06      	cmp	r3, #6
 8065930:	d027      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 8065932:	683b      	ldr	r3, [r7, #0]
 8065934:	691b      	ldr	r3, [r3, #16]
 8065936:	2b07      	cmp	r3, #7
 8065938:	d023      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 806593a:	683b      	ldr	r3, [r7, #0]
 806593c:	691b      	ldr	r3, [r3, #16]
 806593e:	2b07      	cmp	r3, #7
 8065940:	d01f      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 8065942:	683b      	ldr	r3, [r7, #0]
 8065944:	691b      	ldr	r3, [r3, #16]
 8065946:	2b07      	cmp	r3, #7
 8065948:	d01b      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 806594a:	683b      	ldr	r3, [r7, #0]
 806594c:	691b      	ldr	r3, [r3, #16]
 806594e:	2b08      	cmp	r3, #8
 8065950:	d017      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 8065952:	683b      	ldr	r3, [r7, #0]
 8065954:	691b      	ldr	r3, [r3, #16]
 8065956:	2b0a      	cmp	r3, #10
 8065958:	d013      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 806595a:	683b      	ldr	r3, [r7, #0]
 806595c:	691b      	ldr	r3, [r3, #16]
 806595e:	2b09      	cmp	r3, #9
 8065960:	d00f      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 8065962:	683b      	ldr	r3, [r7, #0]
 8065964:	691b      	ldr	r3, [r3, #16]
 8065966:	2b09      	cmp	r3, #9
 8065968:	d00b      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 806596a:	683b      	ldr	r3, [r7, #0]
 806596c:	691b      	ldr	r3, [r3, #16]
 806596e:	2b0c      	cmp	r3, #12
 8065970:	d007      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 8065972:	683b      	ldr	r3, [r7, #0]
 8065974:	691b      	ldr	r3, [r3, #16]
 8065976:	2b0f      	cmp	r3, #15
 8065978:	d003      	beq.n	8065982 <HAL_GPIO_Init+0x326>
 806597a:	21de      	movs	r1, #222	; 0xde
 806597c:	482e      	ldr	r0, [pc, #184]	; (8065a38 <HAL_GPIO_Init+0x3dc>)
 806597e:	f7fd fbae 	bl	80630de <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8065982:	69fb      	ldr	r3, [r7, #28]
 8065984:	08da      	lsrs	r2, r3, #3
 8065986:	687b      	ldr	r3, [r7, #4]
 8065988:	3208      	adds	r2, #8
 806598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 806598e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8065990:	69fb      	ldr	r3, [r7, #28]
 8065992:	f003 0307 	and.w	r3, r3, #7
 8065996:	009b      	lsls	r3, r3, #2
 8065998:	220f      	movs	r2, #15
 806599a:	fa02 f303 	lsl.w	r3, r2, r3
 806599e:	43db      	mvns	r3, r3
 80659a0:	69ba      	ldr	r2, [r7, #24]
 80659a2:	4013      	ands	r3, r2
 80659a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80659a6:	683b      	ldr	r3, [r7, #0]
 80659a8:	691a      	ldr	r2, [r3, #16]
 80659aa:	69fb      	ldr	r3, [r7, #28]
 80659ac:	f003 0307 	and.w	r3, r3, #7
 80659b0:	009b      	lsls	r3, r3, #2
 80659b2:	fa02 f303 	lsl.w	r3, r2, r3
 80659b6:	69ba      	ldr	r2, [r7, #24]
 80659b8:	4313      	orrs	r3, r2
 80659ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80659bc:	69fb      	ldr	r3, [r7, #28]
 80659be:	08da      	lsrs	r2, r3, #3
 80659c0:	687b      	ldr	r3, [r7, #4]
 80659c2:	3208      	adds	r2, #8
 80659c4:	69b9      	ldr	r1, [r7, #24]
 80659c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80659ca:	687b      	ldr	r3, [r7, #4]
 80659cc:	681b      	ldr	r3, [r3, #0]
 80659ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80659d0:	69fb      	ldr	r3, [r7, #28]
 80659d2:	005b      	lsls	r3, r3, #1
 80659d4:	2203      	movs	r2, #3
 80659d6:	fa02 f303 	lsl.w	r3, r2, r3
 80659da:	43db      	mvns	r3, r3
 80659dc:	69ba      	ldr	r2, [r7, #24]
 80659de:	4013      	ands	r3, r2
 80659e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80659e2:	683b      	ldr	r3, [r7, #0]
 80659e4:	685b      	ldr	r3, [r3, #4]
 80659e6:	f003 0203 	and.w	r2, r3, #3
 80659ea:	69fb      	ldr	r3, [r7, #28]
 80659ec:	005b      	lsls	r3, r3, #1
 80659ee:	fa02 f303 	lsl.w	r3, r2, r3
 80659f2:	69ba      	ldr	r2, [r7, #24]
 80659f4:	4313      	orrs	r3, r2
 80659f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80659f8:	687b      	ldr	r3, [r7, #4]
 80659fa:	69ba      	ldr	r2, [r7, #24]
 80659fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80659fe:	683b      	ldr	r3, [r7, #0]
 8065a00:	685b      	ldr	r3, [r3, #4]
 8065a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8065a06:	2b00      	cmp	r3, #0
 8065a08:	f000 80aa 	beq.w	8065b60 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8065a0c:	2300      	movs	r3, #0
 8065a0e:	60fb      	str	r3, [r7, #12]
 8065a10:	4b0a      	ldr	r3, [pc, #40]	; (8065a3c <HAL_GPIO_Init+0x3e0>)
 8065a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8065a14:	4a09      	ldr	r2, [pc, #36]	; (8065a3c <HAL_GPIO_Init+0x3e0>)
 8065a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8065a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8065a1c:	4b07      	ldr	r3, [pc, #28]	; (8065a3c <HAL_GPIO_Init+0x3e0>)
 8065a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8065a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8065a24:	60fb      	str	r3, [r7, #12]
 8065a26:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8065a28:	4a05      	ldr	r2, [pc, #20]	; (8065a40 <HAL_GPIO_Init+0x3e4>)
 8065a2a:	69fb      	ldr	r3, [r7, #28]
 8065a2c:	089b      	lsrs	r3, r3, #2
 8065a2e:	3302      	adds	r3, #2
 8065a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8065a34:	e006      	b.n	8065a44 <HAL_GPIO_Init+0x3e8>
 8065a36:	bf00      	nop
 8065a38:	08077370 	.word	0x08077370
 8065a3c:	40023800 	.word	0x40023800
 8065a40:	40013800 	.word	0x40013800
 8065a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8065a46:	69fb      	ldr	r3, [r7, #28]
 8065a48:	f003 0303 	and.w	r3, r3, #3
 8065a4c:	009b      	lsls	r3, r3, #2
 8065a4e:	220f      	movs	r2, #15
 8065a50:	fa02 f303 	lsl.w	r3, r2, r3
 8065a54:	43db      	mvns	r3, r3
 8065a56:	69ba      	ldr	r2, [r7, #24]
 8065a58:	4013      	ands	r3, r2
 8065a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8065a5c:	687b      	ldr	r3, [r7, #4]
 8065a5e:	4a46      	ldr	r2, [pc, #280]	; (8065b78 <HAL_GPIO_Init+0x51c>)
 8065a60:	4293      	cmp	r3, r2
 8065a62:	d019      	beq.n	8065a98 <HAL_GPIO_Init+0x43c>
 8065a64:	687b      	ldr	r3, [r7, #4]
 8065a66:	4a45      	ldr	r2, [pc, #276]	; (8065b7c <HAL_GPIO_Init+0x520>)
 8065a68:	4293      	cmp	r3, r2
 8065a6a:	d013      	beq.n	8065a94 <HAL_GPIO_Init+0x438>
 8065a6c:	687b      	ldr	r3, [r7, #4]
 8065a6e:	4a44      	ldr	r2, [pc, #272]	; (8065b80 <HAL_GPIO_Init+0x524>)
 8065a70:	4293      	cmp	r3, r2
 8065a72:	d00d      	beq.n	8065a90 <HAL_GPIO_Init+0x434>
 8065a74:	687b      	ldr	r3, [r7, #4]
 8065a76:	4a43      	ldr	r2, [pc, #268]	; (8065b84 <HAL_GPIO_Init+0x528>)
 8065a78:	4293      	cmp	r3, r2
 8065a7a:	d007      	beq.n	8065a8c <HAL_GPIO_Init+0x430>
 8065a7c:	687b      	ldr	r3, [r7, #4]
 8065a7e:	4a42      	ldr	r2, [pc, #264]	; (8065b88 <HAL_GPIO_Init+0x52c>)
 8065a80:	4293      	cmp	r3, r2
 8065a82:	d101      	bne.n	8065a88 <HAL_GPIO_Init+0x42c>
 8065a84:	2304      	movs	r3, #4
 8065a86:	e008      	b.n	8065a9a <HAL_GPIO_Init+0x43e>
 8065a88:	2307      	movs	r3, #7
 8065a8a:	e006      	b.n	8065a9a <HAL_GPIO_Init+0x43e>
 8065a8c:	2303      	movs	r3, #3
 8065a8e:	e004      	b.n	8065a9a <HAL_GPIO_Init+0x43e>
 8065a90:	2302      	movs	r3, #2
 8065a92:	e002      	b.n	8065a9a <HAL_GPIO_Init+0x43e>
 8065a94:	2301      	movs	r3, #1
 8065a96:	e000      	b.n	8065a9a <HAL_GPIO_Init+0x43e>
 8065a98:	2300      	movs	r3, #0
 8065a9a:	69fa      	ldr	r2, [r7, #28]
 8065a9c:	f002 0203 	and.w	r2, r2, #3
 8065aa0:	0092      	lsls	r2, r2, #2
 8065aa2:	4093      	lsls	r3, r2
 8065aa4:	69ba      	ldr	r2, [r7, #24]
 8065aa6:	4313      	orrs	r3, r2
 8065aa8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8065aaa:	4938      	ldr	r1, [pc, #224]	; (8065b8c <HAL_GPIO_Init+0x530>)
 8065aac:	69fb      	ldr	r3, [r7, #28]
 8065aae:	089b      	lsrs	r3, r3, #2
 8065ab0:	3302      	adds	r3, #2
 8065ab2:	69ba      	ldr	r2, [r7, #24]
 8065ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8065ab8:	4b35      	ldr	r3, [pc, #212]	; (8065b90 <HAL_GPIO_Init+0x534>)
 8065aba:	681b      	ldr	r3, [r3, #0]
 8065abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8065abe:	693b      	ldr	r3, [r7, #16]
 8065ac0:	43db      	mvns	r3, r3
 8065ac2:	69ba      	ldr	r2, [r7, #24]
 8065ac4:	4013      	ands	r3, r2
 8065ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8065ac8:	683b      	ldr	r3, [r7, #0]
 8065aca:	685b      	ldr	r3, [r3, #4]
 8065acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8065ad0:	2b00      	cmp	r3, #0
 8065ad2:	d003      	beq.n	8065adc <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8065ad4:	69ba      	ldr	r2, [r7, #24]
 8065ad6:	693b      	ldr	r3, [r7, #16]
 8065ad8:	4313      	orrs	r3, r2
 8065ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8065adc:	4a2c      	ldr	r2, [pc, #176]	; (8065b90 <HAL_GPIO_Init+0x534>)
 8065ade:	69bb      	ldr	r3, [r7, #24]
 8065ae0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8065ae2:	4b2b      	ldr	r3, [pc, #172]	; (8065b90 <HAL_GPIO_Init+0x534>)
 8065ae4:	685b      	ldr	r3, [r3, #4]
 8065ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8065ae8:	693b      	ldr	r3, [r7, #16]
 8065aea:	43db      	mvns	r3, r3
 8065aec:	69ba      	ldr	r2, [r7, #24]
 8065aee:	4013      	ands	r3, r2
 8065af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8065af2:	683b      	ldr	r3, [r7, #0]
 8065af4:	685b      	ldr	r3, [r3, #4]
 8065af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8065afa:	2b00      	cmp	r3, #0
 8065afc:	d003      	beq.n	8065b06 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8065afe:	69ba      	ldr	r2, [r7, #24]
 8065b00:	693b      	ldr	r3, [r7, #16]
 8065b02:	4313      	orrs	r3, r2
 8065b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8065b06:	4a22      	ldr	r2, [pc, #136]	; (8065b90 <HAL_GPIO_Init+0x534>)
 8065b08:	69bb      	ldr	r3, [r7, #24]
 8065b0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8065b0c:	4b20      	ldr	r3, [pc, #128]	; (8065b90 <HAL_GPIO_Init+0x534>)
 8065b0e:	689b      	ldr	r3, [r3, #8]
 8065b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8065b12:	693b      	ldr	r3, [r7, #16]
 8065b14:	43db      	mvns	r3, r3
 8065b16:	69ba      	ldr	r2, [r7, #24]
 8065b18:	4013      	ands	r3, r2
 8065b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8065b1c:	683b      	ldr	r3, [r7, #0]
 8065b1e:	685b      	ldr	r3, [r3, #4]
 8065b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8065b24:	2b00      	cmp	r3, #0
 8065b26:	d003      	beq.n	8065b30 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8065b28:	69ba      	ldr	r2, [r7, #24]
 8065b2a:	693b      	ldr	r3, [r7, #16]
 8065b2c:	4313      	orrs	r3, r2
 8065b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8065b30:	4a17      	ldr	r2, [pc, #92]	; (8065b90 <HAL_GPIO_Init+0x534>)
 8065b32:	69bb      	ldr	r3, [r7, #24]
 8065b34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8065b36:	4b16      	ldr	r3, [pc, #88]	; (8065b90 <HAL_GPIO_Init+0x534>)
 8065b38:	68db      	ldr	r3, [r3, #12]
 8065b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8065b3c:	693b      	ldr	r3, [r7, #16]
 8065b3e:	43db      	mvns	r3, r3
 8065b40:	69ba      	ldr	r2, [r7, #24]
 8065b42:	4013      	ands	r3, r2
 8065b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8065b46:	683b      	ldr	r3, [r7, #0]
 8065b48:	685b      	ldr	r3, [r3, #4]
 8065b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8065b4e:	2b00      	cmp	r3, #0
 8065b50:	d003      	beq.n	8065b5a <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8065b52:	69ba      	ldr	r2, [r7, #24]
 8065b54:	693b      	ldr	r3, [r7, #16]
 8065b56:	4313      	orrs	r3, r2
 8065b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8065b5a:	4a0d      	ldr	r2, [pc, #52]	; (8065b90 <HAL_GPIO_Init+0x534>)
 8065b5c:	69bb      	ldr	r3, [r7, #24]
 8065b5e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8065b60:	69fb      	ldr	r3, [r7, #28]
 8065b62:	3301      	adds	r3, #1
 8065b64:	61fb      	str	r3, [r7, #28]
 8065b66:	69fb      	ldr	r3, [r7, #28]
 8065b68:	2b0f      	cmp	r3, #15
 8065b6a:	f67f adf9 	bls.w	8065760 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8065b6e:	bf00      	nop
 8065b70:	bf00      	nop
 8065b72:	3720      	adds	r7, #32
 8065b74:	46bd      	mov	sp, r7
 8065b76:	bd80      	pop	{r7, pc}
 8065b78:	40020000 	.word	0x40020000
 8065b7c:	40020400 	.word	0x40020400
 8065b80:	40020800 	.word	0x40020800
 8065b84:	40020c00 	.word	0x40020c00
 8065b88:	40021000 	.word	0x40021000
 8065b8c:	40013800 	.word	0x40013800
 8065b90:	40013c00 	.word	0x40013c00

08065b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8065b94:	b580      	push	{r7, lr}
 8065b96:	b082      	sub	sp, #8
 8065b98:	af00      	add	r7, sp, #0
 8065b9a:	6078      	str	r0, [r7, #4]
 8065b9c:	460b      	mov	r3, r1
 8065b9e:	807b      	strh	r3, [r7, #2]
 8065ba0:	4613      	mov	r3, r2
 8065ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8065ba4:	887b      	ldrh	r3, [r7, #2]
 8065ba6:	2b00      	cmp	r3, #0
 8065ba8:	d004      	beq.n	8065bb4 <HAL_GPIO_WritePin+0x20>
 8065baa:	887b      	ldrh	r3, [r7, #2]
 8065bac:	0c1b      	lsrs	r3, r3, #16
 8065bae:	041b      	lsls	r3, r3, #16
 8065bb0:	2b00      	cmp	r3, #0
 8065bb2:	d004      	beq.n	8065bbe <HAL_GPIO_WritePin+0x2a>
 8065bb4:	f240 119d 	movw	r1, #413	; 0x19d
 8065bb8:	480e      	ldr	r0, [pc, #56]	; (8065bf4 <HAL_GPIO_WritePin+0x60>)
 8065bba:	f7fd fa90 	bl	80630de <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8065bbe:	787b      	ldrb	r3, [r7, #1]
 8065bc0:	2b00      	cmp	r3, #0
 8065bc2:	d007      	beq.n	8065bd4 <HAL_GPIO_WritePin+0x40>
 8065bc4:	787b      	ldrb	r3, [r7, #1]
 8065bc6:	2b01      	cmp	r3, #1
 8065bc8:	d004      	beq.n	8065bd4 <HAL_GPIO_WritePin+0x40>
 8065bca:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8065bce:	4809      	ldr	r0, [pc, #36]	; (8065bf4 <HAL_GPIO_WritePin+0x60>)
 8065bd0:	f7fd fa85 	bl	80630de <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8065bd4:	787b      	ldrb	r3, [r7, #1]
 8065bd6:	2b00      	cmp	r3, #0
 8065bd8:	d003      	beq.n	8065be2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8065bda:	887a      	ldrh	r2, [r7, #2]
 8065bdc:	687b      	ldr	r3, [r7, #4]
 8065bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8065be0:	e003      	b.n	8065bea <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8065be2:	887b      	ldrh	r3, [r7, #2]
 8065be4:	041a      	lsls	r2, r3, #16
 8065be6:	687b      	ldr	r3, [r7, #4]
 8065be8:	619a      	str	r2, [r3, #24]
}
 8065bea:	bf00      	nop
 8065bec:	3708      	adds	r7, #8
 8065bee:	46bd      	mov	sp, r7
 8065bf0:	bd80      	pop	{r7, pc}
 8065bf2:	bf00      	nop
 8065bf4:	08077370 	.word	0x08077370

08065bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8065bf8:	b580      	push	{r7, lr}
 8065bfa:	b084      	sub	sp, #16
 8065bfc:	af00      	add	r7, sp, #0
 8065bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8065c00:	687b      	ldr	r3, [r7, #4]
 8065c02:	2b00      	cmp	r3, #0
 8065c04:	d101      	bne.n	8065c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8065c06:	2301      	movs	r3, #1
 8065c08:	e1be      	b.n	8065f88 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8065c0a:	687b      	ldr	r3, [r7, #4]
 8065c0c:	681b      	ldr	r3, [r3, #0]
 8065c0e:	4a9f      	ldr	r2, [pc, #636]	; (8065e8c <HAL_I2C_Init+0x294>)
 8065c10:	4293      	cmp	r3, r2
 8065c12:	d00e      	beq.n	8065c32 <HAL_I2C_Init+0x3a>
 8065c14:	687b      	ldr	r3, [r7, #4]
 8065c16:	681b      	ldr	r3, [r3, #0]
 8065c18:	4a9d      	ldr	r2, [pc, #628]	; (8065e90 <HAL_I2C_Init+0x298>)
 8065c1a:	4293      	cmp	r3, r2
 8065c1c:	d009      	beq.n	8065c32 <HAL_I2C_Init+0x3a>
 8065c1e:	687b      	ldr	r3, [r7, #4]
 8065c20:	681b      	ldr	r3, [r3, #0]
 8065c22:	4a9c      	ldr	r2, [pc, #624]	; (8065e94 <HAL_I2C_Init+0x29c>)
 8065c24:	4293      	cmp	r3, r2
 8065c26:	d004      	beq.n	8065c32 <HAL_I2C_Init+0x3a>
 8065c28:	f240 11bf 	movw	r1, #447	; 0x1bf
 8065c2c:	489a      	ldr	r0, [pc, #616]	; (8065e98 <HAL_I2C_Init+0x2a0>)
 8065c2e:	f7fd fa56 	bl	80630de <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8065c32:	687b      	ldr	r3, [r7, #4]
 8065c34:	685b      	ldr	r3, [r3, #4]
 8065c36:	2b00      	cmp	r3, #0
 8065c38:	d004      	beq.n	8065c44 <HAL_I2C_Init+0x4c>
 8065c3a:	687b      	ldr	r3, [r7, #4]
 8065c3c:	685b      	ldr	r3, [r3, #4]
 8065c3e:	4a97      	ldr	r2, [pc, #604]	; (8065e9c <HAL_I2C_Init+0x2a4>)
 8065c40:	4293      	cmp	r3, r2
 8065c42:	d904      	bls.n	8065c4e <HAL_I2C_Init+0x56>
 8065c44:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8065c48:	4893      	ldr	r0, [pc, #588]	; (8065e98 <HAL_I2C_Init+0x2a0>)
 8065c4a:	f7fd fa48 	bl	80630de <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8065c4e:	687b      	ldr	r3, [r7, #4]
 8065c50:	689b      	ldr	r3, [r3, #8]
 8065c52:	2b00      	cmp	r3, #0
 8065c54:	d009      	beq.n	8065c6a <HAL_I2C_Init+0x72>
 8065c56:	687b      	ldr	r3, [r7, #4]
 8065c58:	689b      	ldr	r3, [r3, #8]
 8065c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8065c5e:	d004      	beq.n	8065c6a <HAL_I2C_Init+0x72>
 8065c60:	f240 11c1 	movw	r1, #449	; 0x1c1
 8065c64:	488c      	ldr	r0, [pc, #560]	; (8065e98 <HAL_I2C_Init+0x2a0>)
 8065c66:	f7fd fa3a 	bl	80630de <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8065c6a:	687b      	ldr	r3, [r7, #4]
 8065c6c:	68db      	ldr	r3, [r3, #12]
 8065c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8065c72:	f023 0303 	bic.w	r3, r3, #3
 8065c76:	2b00      	cmp	r3, #0
 8065c78:	d004      	beq.n	8065c84 <HAL_I2C_Init+0x8c>
 8065c7a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8065c7e:	4886      	ldr	r0, [pc, #536]	; (8065e98 <HAL_I2C_Init+0x2a0>)
 8065c80:	f7fd fa2d 	bl	80630de <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8065c84:	687b      	ldr	r3, [r7, #4]
 8065c86:	691b      	ldr	r3, [r3, #16]
 8065c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8065c8c:	d009      	beq.n	8065ca2 <HAL_I2C_Init+0xaa>
 8065c8e:	687b      	ldr	r3, [r7, #4]
 8065c90:	691b      	ldr	r3, [r3, #16]
 8065c92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8065c96:	d004      	beq.n	8065ca2 <HAL_I2C_Init+0xaa>
 8065c98:	f240 11c3 	movw	r1, #451	; 0x1c3
 8065c9c:	487e      	ldr	r0, [pc, #504]	; (8065e98 <HAL_I2C_Init+0x2a0>)
 8065c9e:	f7fd fa1e 	bl	80630de <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8065ca2:	687b      	ldr	r3, [r7, #4]
 8065ca4:	695b      	ldr	r3, [r3, #20]
 8065ca6:	2b00      	cmp	r3, #0
 8065ca8:	d008      	beq.n	8065cbc <HAL_I2C_Init+0xc4>
 8065caa:	687b      	ldr	r3, [r7, #4]
 8065cac:	695b      	ldr	r3, [r3, #20]
 8065cae:	2b01      	cmp	r3, #1
 8065cb0:	d004      	beq.n	8065cbc <HAL_I2C_Init+0xc4>
 8065cb2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8065cb6:	4878      	ldr	r0, [pc, #480]	; (8065e98 <HAL_I2C_Init+0x2a0>)
 8065cb8:	f7fd fa11 	bl	80630de <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8065cbc:	687b      	ldr	r3, [r7, #4]
 8065cbe:	699b      	ldr	r3, [r3, #24]
 8065cc0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8065cc4:	2b00      	cmp	r3, #0
 8065cc6:	d004      	beq.n	8065cd2 <HAL_I2C_Init+0xda>
 8065cc8:	f240 11c5 	movw	r1, #453	; 0x1c5
 8065ccc:	4872      	ldr	r0, [pc, #456]	; (8065e98 <HAL_I2C_Init+0x2a0>)
 8065cce:	f7fd fa06 	bl	80630de <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8065cd2:	687b      	ldr	r3, [r7, #4]
 8065cd4:	69db      	ldr	r3, [r3, #28]
 8065cd6:	2b00      	cmp	r3, #0
 8065cd8:	d008      	beq.n	8065cec <HAL_I2C_Init+0xf4>
 8065cda:	687b      	ldr	r3, [r7, #4]
 8065cdc:	69db      	ldr	r3, [r3, #28]
 8065cde:	2b40      	cmp	r3, #64	; 0x40
 8065ce0:	d004      	beq.n	8065cec <HAL_I2C_Init+0xf4>
 8065ce2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8065ce6:	486c      	ldr	r0, [pc, #432]	; (8065e98 <HAL_I2C_Init+0x2a0>)
 8065ce8:	f7fd f9f9 	bl	80630de <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8065cec:	687b      	ldr	r3, [r7, #4]
 8065cee:	6a1b      	ldr	r3, [r3, #32]
 8065cf0:	2b00      	cmp	r3, #0
 8065cf2:	d008      	beq.n	8065d06 <HAL_I2C_Init+0x10e>
 8065cf4:	687b      	ldr	r3, [r7, #4]
 8065cf6:	6a1b      	ldr	r3, [r3, #32]
 8065cf8:	2b80      	cmp	r3, #128	; 0x80
 8065cfa:	d004      	beq.n	8065d06 <HAL_I2C_Init+0x10e>
 8065cfc:	f240 11c7 	movw	r1, #455	; 0x1c7
 8065d00:	4865      	ldr	r0, [pc, #404]	; (8065e98 <HAL_I2C_Init+0x2a0>)
 8065d02:	f7fd f9ec 	bl	80630de <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8065d06:	687b      	ldr	r3, [r7, #4]
 8065d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8065d0c:	b2db      	uxtb	r3, r3
 8065d0e:	2b00      	cmp	r3, #0
 8065d10:	d106      	bne.n	8065d20 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8065d12:	687b      	ldr	r3, [r7, #4]
 8065d14:	2200      	movs	r2, #0
 8065d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8065d1a:	6878      	ldr	r0, [r7, #4]
 8065d1c:	f7fc fffe 	bl	8062d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8065d20:	687b      	ldr	r3, [r7, #4]
 8065d22:	2224      	movs	r2, #36	; 0x24
 8065d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8065d28:	687b      	ldr	r3, [r7, #4]
 8065d2a:	681b      	ldr	r3, [r3, #0]
 8065d2c:	681a      	ldr	r2, [r3, #0]
 8065d2e:	687b      	ldr	r3, [r7, #4]
 8065d30:	681b      	ldr	r3, [r3, #0]
 8065d32:	f022 0201 	bic.w	r2, r2, #1
 8065d36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8065d38:	687b      	ldr	r3, [r7, #4]
 8065d3a:	681b      	ldr	r3, [r3, #0]
 8065d3c:	681a      	ldr	r2, [r3, #0]
 8065d3e:	687b      	ldr	r3, [r7, #4]
 8065d40:	681b      	ldr	r3, [r3, #0]
 8065d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8065d46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8065d48:	687b      	ldr	r3, [r7, #4]
 8065d4a:	681b      	ldr	r3, [r3, #0]
 8065d4c:	681a      	ldr	r2, [r3, #0]
 8065d4e:	687b      	ldr	r3, [r7, #4]
 8065d50:	681b      	ldr	r3, [r3, #0]
 8065d52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8065d56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8065d58:	f002 fa08 	bl	806816c <HAL_RCC_GetPCLK1Freq>
 8065d5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8065d5e:	687b      	ldr	r3, [r7, #4]
 8065d60:	685b      	ldr	r3, [r3, #4]
 8065d62:	4a4f      	ldr	r2, [pc, #316]	; (8065ea0 <HAL_I2C_Init+0x2a8>)
 8065d64:	4293      	cmp	r3, r2
 8065d66:	d807      	bhi.n	8065d78 <HAL_I2C_Init+0x180>
 8065d68:	68fb      	ldr	r3, [r7, #12]
 8065d6a:	4a4e      	ldr	r2, [pc, #312]	; (8065ea4 <HAL_I2C_Init+0x2ac>)
 8065d6c:	4293      	cmp	r3, r2
 8065d6e:	bf94      	ite	ls
 8065d70:	2301      	movls	r3, #1
 8065d72:	2300      	movhi	r3, #0
 8065d74:	b2db      	uxtb	r3, r3
 8065d76:	e006      	b.n	8065d86 <HAL_I2C_Init+0x18e>
 8065d78:	68fb      	ldr	r3, [r7, #12]
 8065d7a:	4a4b      	ldr	r2, [pc, #300]	; (8065ea8 <HAL_I2C_Init+0x2b0>)
 8065d7c:	4293      	cmp	r3, r2
 8065d7e:	bf94      	ite	ls
 8065d80:	2301      	movls	r3, #1
 8065d82:	2300      	movhi	r3, #0
 8065d84:	b2db      	uxtb	r3, r3
 8065d86:	2b00      	cmp	r3, #0
 8065d88:	d001      	beq.n	8065d8e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8065d8a:	2301      	movs	r3, #1
 8065d8c:	e0fc      	b.n	8065f88 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8065d8e:	68fb      	ldr	r3, [r7, #12]
 8065d90:	4a46      	ldr	r2, [pc, #280]	; (8065eac <HAL_I2C_Init+0x2b4>)
 8065d92:	fba2 2303 	umull	r2, r3, r2, r3
 8065d96:	0c9b      	lsrs	r3, r3, #18
 8065d98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8065d9a:	687b      	ldr	r3, [r7, #4]
 8065d9c:	681b      	ldr	r3, [r3, #0]
 8065d9e:	685b      	ldr	r3, [r3, #4]
 8065da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8065da4:	687b      	ldr	r3, [r7, #4]
 8065da6:	681b      	ldr	r3, [r3, #0]
 8065da8:	68ba      	ldr	r2, [r7, #8]
 8065daa:	430a      	orrs	r2, r1
 8065dac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8065dae:	687b      	ldr	r3, [r7, #4]
 8065db0:	681b      	ldr	r3, [r3, #0]
 8065db2:	6a1b      	ldr	r3, [r3, #32]
 8065db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8065db8:	687b      	ldr	r3, [r7, #4]
 8065dba:	685b      	ldr	r3, [r3, #4]
 8065dbc:	4a38      	ldr	r2, [pc, #224]	; (8065ea0 <HAL_I2C_Init+0x2a8>)
 8065dbe:	4293      	cmp	r3, r2
 8065dc0:	d802      	bhi.n	8065dc8 <HAL_I2C_Init+0x1d0>
 8065dc2:	68bb      	ldr	r3, [r7, #8]
 8065dc4:	3301      	adds	r3, #1
 8065dc6:	e009      	b.n	8065ddc <HAL_I2C_Init+0x1e4>
 8065dc8:	68bb      	ldr	r3, [r7, #8]
 8065dca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8065dce:	fb02 f303 	mul.w	r3, r2, r3
 8065dd2:	4a37      	ldr	r2, [pc, #220]	; (8065eb0 <HAL_I2C_Init+0x2b8>)
 8065dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8065dd8:	099b      	lsrs	r3, r3, #6
 8065dda:	3301      	adds	r3, #1
 8065ddc:	687a      	ldr	r2, [r7, #4]
 8065dde:	6812      	ldr	r2, [r2, #0]
 8065de0:	430b      	orrs	r3, r1
 8065de2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8065de4:	687b      	ldr	r3, [r7, #4]
 8065de6:	681b      	ldr	r3, [r3, #0]
 8065de8:	69db      	ldr	r3, [r3, #28]
 8065dea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8065dee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8065df2:	687b      	ldr	r3, [r7, #4]
 8065df4:	685b      	ldr	r3, [r3, #4]
 8065df6:	492a      	ldr	r1, [pc, #168]	; (8065ea0 <HAL_I2C_Init+0x2a8>)
 8065df8:	428b      	cmp	r3, r1
 8065dfa:	d819      	bhi.n	8065e30 <HAL_I2C_Init+0x238>
 8065dfc:	68fb      	ldr	r3, [r7, #12]
 8065dfe:	1e59      	subs	r1, r3, #1
 8065e00:	687b      	ldr	r3, [r7, #4]
 8065e02:	685b      	ldr	r3, [r3, #4]
 8065e04:	005b      	lsls	r3, r3, #1
 8065e06:	fbb1 f3f3 	udiv	r3, r1, r3
 8065e0a:	1c59      	adds	r1, r3, #1
 8065e0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8065e10:	400b      	ands	r3, r1
 8065e12:	2b00      	cmp	r3, #0
 8065e14:	d00a      	beq.n	8065e2c <HAL_I2C_Init+0x234>
 8065e16:	68fb      	ldr	r3, [r7, #12]
 8065e18:	1e59      	subs	r1, r3, #1
 8065e1a:	687b      	ldr	r3, [r7, #4]
 8065e1c:	685b      	ldr	r3, [r3, #4]
 8065e1e:	005b      	lsls	r3, r3, #1
 8065e20:	fbb1 f3f3 	udiv	r3, r1, r3
 8065e24:	3301      	adds	r3, #1
 8065e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065e2a:	e066      	b.n	8065efa <HAL_I2C_Init+0x302>
 8065e2c:	2304      	movs	r3, #4
 8065e2e:	e064      	b.n	8065efa <HAL_I2C_Init+0x302>
 8065e30:	687b      	ldr	r3, [r7, #4]
 8065e32:	689b      	ldr	r3, [r3, #8]
 8065e34:	2b00      	cmp	r3, #0
 8065e36:	d111      	bne.n	8065e5c <HAL_I2C_Init+0x264>
 8065e38:	68fb      	ldr	r3, [r7, #12]
 8065e3a:	1e58      	subs	r0, r3, #1
 8065e3c:	687b      	ldr	r3, [r7, #4]
 8065e3e:	6859      	ldr	r1, [r3, #4]
 8065e40:	460b      	mov	r3, r1
 8065e42:	005b      	lsls	r3, r3, #1
 8065e44:	440b      	add	r3, r1
 8065e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8065e4a:	3301      	adds	r3, #1
 8065e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065e50:	2b00      	cmp	r3, #0
 8065e52:	bf0c      	ite	eq
 8065e54:	2301      	moveq	r3, #1
 8065e56:	2300      	movne	r3, #0
 8065e58:	b2db      	uxtb	r3, r3
 8065e5a:	e012      	b.n	8065e82 <HAL_I2C_Init+0x28a>
 8065e5c:	68fb      	ldr	r3, [r7, #12]
 8065e5e:	1e58      	subs	r0, r3, #1
 8065e60:	687b      	ldr	r3, [r7, #4]
 8065e62:	6859      	ldr	r1, [r3, #4]
 8065e64:	460b      	mov	r3, r1
 8065e66:	009b      	lsls	r3, r3, #2
 8065e68:	440b      	add	r3, r1
 8065e6a:	0099      	lsls	r1, r3, #2
 8065e6c:	440b      	add	r3, r1
 8065e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8065e72:	3301      	adds	r3, #1
 8065e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065e78:	2b00      	cmp	r3, #0
 8065e7a:	bf0c      	ite	eq
 8065e7c:	2301      	moveq	r3, #1
 8065e7e:	2300      	movne	r3, #0
 8065e80:	b2db      	uxtb	r3, r3
 8065e82:	2b00      	cmp	r3, #0
 8065e84:	d016      	beq.n	8065eb4 <HAL_I2C_Init+0x2bc>
 8065e86:	2301      	movs	r3, #1
 8065e88:	e037      	b.n	8065efa <HAL_I2C_Init+0x302>
 8065e8a:	bf00      	nop
 8065e8c:	40005400 	.word	0x40005400
 8065e90:	40005800 	.word	0x40005800
 8065e94:	40005c00 	.word	0x40005c00
 8065e98:	080773ac 	.word	0x080773ac
 8065e9c:	00061a80 	.word	0x00061a80
 8065ea0:	000186a0 	.word	0x000186a0
 8065ea4:	001e847f 	.word	0x001e847f
 8065ea8:	003d08ff 	.word	0x003d08ff
 8065eac:	431bde83 	.word	0x431bde83
 8065eb0:	10624dd3 	.word	0x10624dd3
 8065eb4:	687b      	ldr	r3, [r7, #4]
 8065eb6:	689b      	ldr	r3, [r3, #8]
 8065eb8:	2b00      	cmp	r3, #0
 8065eba:	d10e      	bne.n	8065eda <HAL_I2C_Init+0x2e2>
 8065ebc:	68fb      	ldr	r3, [r7, #12]
 8065ebe:	1e58      	subs	r0, r3, #1
 8065ec0:	687b      	ldr	r3, [r7, #4]
 8065ec2:	6859      	ldr	r1, [r3, #4]
 8065ec4:	460b      	mov	r3, r1
 8065ec6:	005b      	lsls	r3, r3, #1
 8065ec8:	440b      	add	r3, r1
 8065eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8065ece:	3301      	adds	r3, #1
 8065ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8065ed8:	e00f      	b.n	8065efa <HAL_I2C_Init+0x302>
 8065eda:	68fb      	ldr	r3, [r7, #12]
 8065edc:	1e58      	subs	r0, r3, #1
 8065ede:	687b      	ldr	r3, [r7, #4]
 8065ee0:	6859      	ldr	r1, [r3, #4]
 8065ee2:	460b      	mov	r3, r1
 8065ee4:	009b      	lsls	r3, r3, #2
 8065ee6:	440b      	add	r3, r1
 8065ee8:	0099      	lsls	r1, r3, #2
 8065eea:	440b      	add	r3, r1
 8065eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8065ef0:	3301      	adds	r3, #1
 8065ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065ef6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8065efa:	6879      	ldr	r1, [r7, #4]
 8065efc:	6809      	ldr	r1, [r1, #0]
 8065efe:	4313      	orrs	r3, r2
 8065f00:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8065f02:	687b      	ldr	r3, [r7, #4]
 8065f04:	681b      	ldr	r3, [r3, #0]
 8065f06:	681b      	ldr	r3, [r3, #0]
 8065f08:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8065f0c:	687b      	ldr	r3, [r7, #4]
 8065f0e:	69da      	ldr	r2, [r3, #28]
 8065f10:	687b      	ldr	r3, [r7, #4]
 8065f12:	6a1b      	ldr	r3, [r3, #32]
 8065f14:	431a      	orrs	r2, r3
 8065f16:	687b      	ldr	r3, [r7, #4]
 8065f18:	681b      	ldr	r3, [r3, #0]
 8065f1a:	430a      	orrs	r2, r1
 8065f1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8065f1e:	687b      	ldr	r3, [r7, #4]
 8065f20:	681b      	ldr	r3, [r3, #0]
 8065f22:	689b      	ldr	r3, [r3, #8]
 8065f24:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8065f28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8065f2c:	687a      	ldr	r2, [r7, #4]
 8065f2e:	6911      	ldr	r1, [r2, #16]
 8065f30:	687a      	ldr	r2, [r7, #4]
 8065f32:	68d2      	ldr	r2, [r2, #12]
 8065f34:	4311      	orrs	r1, r2
 8065f36:	687a      	ldr	r2, [r7, #4]
 8065f38:	6812      	ldr	r2, [r2, #0]
 8065f3a:	430b      	orrs	r3, r1
 8065f3c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8065f3e:	687b      	ldr	r3, [r7, #4]
 8065f40:	681b      	ldr	r3, [r3, #0]
 8065f42:	68db      	ldr	r3, [r3, #12]
 8065f44:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8065f48:	687b      	ldr	r3, [r7, #4]
 8065f4a:	695a      	ldr	r2, [r3, #20]
 8065f4c:	687b      	ldr	r3, [r7, #4]
 8065f4e:	699b      	ldr	r3, [r3, #24]
 8065f50:	431a      	orrs	r2, r3
 8065f52:	687b      	ldr	r3, [r7, #4]
 8065f54:	681b      	ldr	r3, [r3, #0]
 8065f56:	430a      	orrs	r2, r1
 8065f58:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8065f5a:	687b      	ldr	r3, [r7, #4]
 8065f5c:	681b      	ldr	r3, [r3, #0]
 8065f5e:	681a      	ldr	r2, [r3, #0]
 8065f60:	687b      	ldr	r3, [r7, #4]
 8065f62:	681b      	ldr	r3, [r3, #0]
 8065f64:	f042 0201 	orr.w	r2, r2, #1
 8065f68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8065f6a:	687b      	ldr	r3, [r7, #4]
 8065f6c:	2200      	movs	r2, #0
 8065f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8065f70:	687b      	ldr	r3, [r7, #4]
 8065f72:	2220      	movs	r2, #32
 8065f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8065f78:	687b      	ldr	r3, [r7, #4]
 8065f7a:	2200      	movs	r2, #0
 8065f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8065f7e:	687b      	ldr	r3, [r7, #4]
 8065f80:	2200      	movs	r2, #0
 8065f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8065f86:	2300      	movs	r3, #0
}
 8065f88:	4618      	mov	r0, r3
 8065f8a:	3710      	adds	r7, #16
 8065f8c:	46bd      	mov	sp, r7
 8065f8e:	bd80      	pop	{r7, pc}

08065f90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8065f90:	b580      	push	{r7, lr}
 8065f92:	b088      	sub	sp, #32
 8065f94:	af02      	add	r7, sp, #8
 8065f96:	60f8      	str	r0, [r7, #12]
 8065f98:	607a      	str	r2, [r7, #4]
 8065f9a:	461a      	mov	r2, r3
 8065f9c:	460b      	mov	r3, r1
 8065f9e:	817b      	strh	r3, [r7, #10]
 8065fa0:	4613      	mov	r3, r2
 8065fa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8065fa4:	f7fd fd66 	bl	8063a74 <HAL_GetTick>
 8065fa8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8065faa:	68fb      	ldr	r3, [r7, #12]
 8065fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8065fb0:	b2db      	uxtb	r3, r3
 8065fb2:	2b20      	cmp	r3, #32
 8065fb4:	f040 80e0 	bne.w	8066178 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8065fb8:	697b      	ldr	r3, [r7, #20]
 8065fba:	9300      	str	r3, [sp, #0]
 8065fbc:	2319      	movs	r3, #25
 8065fbe:	2201      	movs	r2, #1
 8065fc0:	4970      	ldr	r1, [pc, #448]	; (8066184 <HAL_I2C_Master_Transmit+0x1f4>)
 8065fc2:	68f8      	ldr	r0, [r7, #12]
 8065fc4:	f001 f928 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8065fc8:	4603      	mov	r3, r0
 8065fca:	2b00      	cmp	r3, #0
 8065fcc:	d001      	beq.n	8065fd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8065fce:	2302      	movs	r3, #2
 8065fd0:	e0d3      	b.n	806617a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8065fd2:	68fb      	ldr	r3, [r7, #12]
 8065fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8065fd8:	2b01      	cmp	r3, #1
 8065fda:	d101      	bne.n	8065fe0 <HAL_I2C_Master_Transmit+0x50>
 8065fdc:	2302      	movs	r3, #2
 8065fde:	e0cc      	b.n	806617a <HAL_I2C_Master_Transmit+0x1ea>
 8065fe0:	68fb      	ldr	r3, [r7, #12]
 8065fe2:	2201      	movs	r2, #1
 8065fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8065fe8:	68fb      	ldr	r3, [r7, #12]
 8065fea:	681b      	ldr	r3, [r3, #0]
 8065fec:	681b      	ldr	r3, [r3, #0]
 8065fee:	f003 0301 	and.w	r3, r3, #1
 8065ff2:	2b01      	cmp	r3, #1
 8065ff4:	d007      	beq.n	8066006 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8065ff6:	68fb      	ldr	r3, [r7, #12]
 8065ff8:	681b      	ldr	r3, [r3, #0]
 8065ffa:	681a      	ldr	r2, [r3, #0]
 8065ffc:	68fb      	ldr	r3, [r7, #12]
 8065ffe:	681b      	ldr	r3, [r3, #0]
 8066000:	f042 0201 	orr.w	r2, r2, #1
 8066004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8066006:	68fb      	ldr	r3, [r7, #12]
 8066008:	681b      	ldr	r3, [r3, #0]
 806600a:	681a      	ldr	r2, [r3, #0]
 806600c:	68fb      	ldr	r3, [r7, #12]
 806600e:	681b      	ldr	r3, [r3, #0]
 8066010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8066014:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8066016:	68fb      	ldr	r3, [r7, #12]
 8066018:	2221      	movs	r2, #33	; 0x21
 806601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 806601e:	68fb      	ldr	r3, [r7, #12]
 8066020:	2210      	movs	r2, #16
 8066022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8066026:	68fb      	ldr	r3, [r7, #12]
 8066028:	2200      	movs	r2, #0
 806602a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 806602c:	68fb      	ldr	r3, [r7, #12]
 806602e:	687a      	ldr	r2, [r7, #4]
 8066030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8066032:	68fb      	ldr	r3, [r7, #12]
 8066034:	893a      	ldrh	r2, [r7, #8]
 8066036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8066038:	68fb      	ldr	r3, [r7, #12]
 806603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806603c:	b29a      	uxth	r2, r3
 806603e:	68fb      	ldr	r3, [r7, #12]
 8066040:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8066042:	68fb      	ldr	r3, [r7, #12]
 8066044:	4a50      	ldr	r2, [pc, #320]	; (8066188 <HAL_I2C_Master_Transmit+0x1f8>)
 8066046:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8066048:	8979      	ldrh	r1, [r7, #10]
 806604a:	697b      	ldr	r3, [r7, #20]
 806604c:	6a3a      	ldr	r2, [r7, #32]
 806604e:	68f8      	ldr	r0, [r7, #12]
 8066050:	f000 fe14 	bl	8066c7c <I2C_MasterRequestWrite>
 8066054:	4603      	mov	r3, r0
 8066056:	2b00      	cmp	r3, #0
 8066058:	d001      	beq.n	806605e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 806605a:	2301      	movs	r3, #1
 806605c:	e08d      	b.n	806617a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 806605e:	2300      	movs	r3, #0
 8066060:	613b      	str	r3, [r7, #16]
 8066062:	68fb      	ldr	r3, [r7, #12]
 8066064:	681b      	ldr	r3, [r3, #0]
 8066066:	695b      	ldr	r3, [r3, #20]
 8066068:	613b      	str	r3, [r7, #16]
 806606a:	68fb      	ldr	r3, [r7, #12]
 806606c:	681b      	ldr	r3, [r3, #0]
 806606e:	699b      	ldr	r3, [r3, #24]
 8066070:	613b      	str	r3, [r7, #16]
 8066072:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8066074:	e066      	b.n	8066144 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066076:	697a      	ldr	r2, [r7, #20]
 8066078:	6a39      	ldr	r1, [r7, #32]
 806607a:	68f8      	ldr	r0, [r7, #12]
 806607c:	f001 f9a2 	bl	80673c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8066080:	4603      	mov	r3, r0
 8066082:	2b00      	cmp	r3, #0
 8066084:	d00d      	beq.n	80660a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066086:	68fb      	ldr	r3, [r7, #12]
 8066088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806608a:	2b04      	cmp	r3, #4
 806608c:	d107      	bne.n	806609e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806608e:	68fb      	ldr	r3, [r7, #12]
 8066090:	681b      	ldr	r3, [r3, #0]
 8066092:	681a      	ldr	r2, [r3, #0]
 8066094:	68fb      	ldr	r3, [r7, #12]
 8066096:	681b      	ldr	r3, [r3, #0]
 8066098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806609c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 806609e:	2301      	movs	r3, #1
 80660a0:	e06b      	b.n	806617a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80660a2:	68fb      	ldr	r3, [r7, #12]
 80660a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80660a6:	781a      	ldrb	r2, [r3, #0]
 80660a8:	68fb      	ldr	r3, [r7, #12]
 80660aa:	681b      	ldr	r3, [r3, #0]
 80660ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80660ae:	68fb      	ldr	r3, [r7, #12]
 80660b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80660b2:	1c5a      	adds	r2, r3, #1
 80660b4:	68fb      	ldr	r3, [r7, #12]
 80660b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80660b8:	68fb      	ldr	r3, [r7, #12]
 80660ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80660bc:	b29b      	uxth	r3, r3
 80660be:	3b01      	subs	r3, #1
 80660c0:	b29a      	uxth	r2, r3
 80660c2:	68fb      	ldr	r3, [r7, #12]
 80660c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80660c6:	68fb      	ldr	r3, [r7, #12]
 80660c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80660ca:	3b01      	subs	r3, #1
 80660cc:	b29a      	uxth	r2, r3
 80660ce:	68fb      	ldr	r3, [r7, #12]
 80660d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80660d2:	68fb      	ldr	r3, [r7, #12]
 80660d4:	681b      	ldr	r3, [r3, #0]
 80660d6:	695b      	ldr	r3, [r3, #20]
 80660d8:	f003 0304 	and.w	r3, r3, #4
 80660dc:	2b04      	cmp	r3, #4
 80660de:	d11b      	bne.n	8066118 <HAL_I2C_Master_Transmit+0x188>
 80660e0:	68fb      	ldr	r3, [r7, #12]
 80660e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80660e4:	2b00      	cmp	r3, #0
 80660e6:	d017      	beq.n	8066118 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80660e8:	68fb      	ldr	r3, [r7, #12]
 80660ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80660ec:	781a      	ldrb	r2, [r3, #0]
 80660ee:	68fb      	ldr	r3, [r7, #12]
 80660f0:	681b      	ldr	r3, [r3, #0]
 80660f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80660f4:	68fb      	ldr	r3, [r7, #12]
 80660f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80660f8:	1c5a      	adds	r2, r3, #1
 80660fa:	68fb      	ldr	r3, [r7, #12]
 80660fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80660fe:	68fb      	ldr	r3, [r7, #12]
 8066100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066102:	b29b      	uxth	r3, r3
 8066104:	3b01      	subs	r3, #1
 8066106:	b29a      	uxth	r2, r3
 8066108:	68fb      	ldr	r3, [r7, #12]
 806610a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 806610c:	68fb      	ldr	r3, [r7, #12]
 806610e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066110:	3b01      	subs	r3, #1
 8066112:	b29a      	uxth	r2, r3
 8066114:	68fb      	ldr	r3, [r7, #12]
 8066116:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066118:	697a      	ldr	r2, [r7, #20]
 806611a:	6a39      	ldr	r1, [r7, #32]
 806611c:	68f8      	ldr	r0, [r7, #12]
 806611e:	f001 f992 	bl	8067446 <I2C_WaitOnBTFFlagUntilTimeout>
 8066122:	4603      	mov	r3, r0
 8066124:	2b00      	cmp	r3, #0
 8066126:	d00d      	beq.n	8066144 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066128:	68fb      	ldr	r3, [r7, #12]
 806612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806612c:	2b04      	cmp	r3, #4
 806612e:	d107      	bne.n	8066140 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066130:	68fb      	ldr	r3, [r7, #12]
 8066132:	681b      	ldr	r3, [r3, #0]
 8066134:	681a      	ldr	r2, [r3, #0]
 8066136:	68fb      	ldr	r3, [r7, #12]
 8066138:	681b      	ldr	r3, [r3, #0]
 806613a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806613e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8066140:	2301      	movs	r3, #1
 8066142:	e01a      	b.n	806617a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8066144:	68fb      	ldr	r3, [r7, #12]
 8066146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066148:	2b00      	cmp	r3, #0
 806614a:	d194      	bne.n	8066076 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806614c:	68fb      	ldr	r3, [r7, #12]
 806614e:	681b      	ldr	r3, [r3, #0]
 8066150:	681a      	ldr	r2, [r3, #0]
 8066152:	68fb      	ldr	r3, [r7, #12]
 8066154:	681b      	ldr	r3, [r3, #0]
 8066156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806615a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 806615c:	68fb      	ldr	r3, [r7, #12]
 806615e:	2220      	movs	r2, #32
 8066160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8066164:	68fb      	ldr	r3, [r7, #12]
 8066166:	2200      	movs	r2, #0
 8066168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 806616c:	68fb      	ldr	r3, [r7, #12]
 806616e:	2200      	movs	r2, #0
 8066170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8066174:	2300      	movs	r3, #0
 8066176:	e000      	b.n	806617a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8066178:	2302      	movs	r3, #2
  }
}
 806617a:	4618      	mov	r0, r3
 806617c:	3718      	adds	r7, #24
 806617e:	46bd      	mov	sp, r7
 8066180:	bd80      	pop	{r7, pc}
 8066182:	bf00      	nop
 8066184:	00100002 	.word	0x00100002
 8066188:	ffff0000 	.word	0xffff0000

0806618c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 806618c:	b580      	push	{r7, lr}
 806618e:	b08c      	sub	sp, #48	; 0x30
 8066190:	af02      	add	r7, sp, #8
 8066192:	60f8      	str	r0, [r7, #12]
 8066194:	607a      	str	r2, [r7, #4]
 8066196:	461a      	mov	r2, r3
 8066198:	460b      	mov	r3, r1
 806619a:	817b      	strh	r3, [r7, #10]
 806619c:	4613      	mov	r3, r2
 806619e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80661a0:	f7fd fc68 	bl	8063a74 <HAL_GetTick>
 80661a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80661a6:	68fb      	ldr	r3, [r7, #12]
 80661a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80661ac:	b2db      	uxtb	r3, r3
 80661ae:	2b20      	cmp	r3, #32
 80661b0:	f040 820b 	bne.w	80665ca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80661b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80661b6:	9300      	str	r3, [sp, #0]
 80661b8:	2319      	movs	r3, #25
 80661ba:	2201      	movs	r2, #1
 80661bc:	497c      	ldr	r1, [pc, #496]	; (80663b0 <HAL_I2C_Master_Receive+0x224>)
 80661be:	68f8      	ldr	r0, [r7, #12]
 80661c0:	f001 f82a 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 80661c4:	4603      	mov	r3, r0
 80661c6:	2b00      	cmp	r3, #0
 80661c8:	d001      	beq.n	80661ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80661ca:	2302      	movs	r3, #2
 80661cc:	e1fe      	b.n	80665cc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80661ce:	68fb      	ldr	r3, [r7, #12]
 80661d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80661d4:	2b01      	cmp	r3, #1
 80661d6:	d101      	bne.n	80661dc <HAL_I2C_Master_Receive+0x50>
 80661d8:	2302      	movs	r3, #2
 80661da:	e1f7      	b.n	80665cc <HAL_I2C_Master_Receive+0x440>
 80661dc:	68fb      	ldr	r3, [r7, #12]
 80661de:	2201      	movs	r2, #1
 80661e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80661e4:	68fb      	ldr	r3, [r7, #12]
 80661e6:	681b      	ldr	r3, [r3, #0]
 80661e8:	681b      	ldr	r3, [r3, #0]
 80661ea:	f003 0301 	and.w	r3, r3, #1
 80661ee:	2b01      	cmp	r3, #1
 80661f0:	d007      	beq.n	8066202 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80661f2:	68fb      	ldr	r3, [r7, #12]
 80661f4:	681b      	ldr	r3, [r3, #0]
 80661f6:	681a      	ldr	r2, [r3, #0]
 80661f8:	68fb      	ldr	r3, [r7, #12]
 80661fa:	681b      	ldr	r3, [r3, #0]
 80661fc:	f042 0201 	orr.w	r2, r2, #1
 8066200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8066202:	68fb      	ldr	r3, [r7, #12]
 8066204:	681b      	ldr	r3, [r3, #0]
 8066206:	681a      	ldr	r2, [r3, #0]
 8066208:	68fb      	ldr	r3, [r7, #12]
 806620a:	681b      	ldr	r3, [r3, #0]
 806620c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8066210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8066212:	68fb      	ldr	r3, [r7, #12]
 8066214:	2222      	movs	r2, #34	; 0x22
 8066216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 806621a:	68fb      	ldr	r3, [r7, #12]
 806621c:	2210      	movs	r2, #16
 806621e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8066222:	68fb      	ldr	r3, [r7, #12]
 8066224:	2200      	movs	r2, #0
 8066226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8066228:	68fb      	ldr	r3, [r7, #12]
 806622a:	687a      	ldr	r2, [r7, #4]
 806622c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 806622e:	68fb      	ldr	r3, [r7, #12]
 8066230:	893a      	ldrh	r2, [r7, #8]
 8066232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8066234:	68fb      	ldr	r3, [r7, #12]
 8066236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066238:	b29a      	uxth	r2, r3
 806623a:	68fb      	ldr	r3, [r7, #12]
 806623c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 806623e:	68fb      	ldr	r3, [r7, #12]
 8066240:	4a5c      	ldr	r2, [pc, #368]	; (80663b4 <HAL_I2C_Master_Receive+0x228>)
 8066242:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8066244:	8979      	ldrh	r1, [r7, #10]
 8066246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806624a:	68f8      	ldr	r0, [r7, #12]
 806624c:	f000 fd98 	bl	8066d80 <I2C_MasterRequestRead>
 8066250:	4603      	mov	r3, r0
 8066252:	2b00      	cmp	r3, #0
 8066254:	d001      	beq.n	806625a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8066256:	2301      	movs	r3, #1
 8066258:	e1b8      	b.n	80665cc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 806625a:	68fb      	ldr	r3, [r7, #12]
 806625c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806625e:	2b00      	cmp	r3, #0
 8066260:	d113      	bne.n	806628a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066262:	2300      	movs	r3, #0
 8066264:	623b      	str	r3, [r7, #32]
 8066266:	68fb      	ldr	r3, [r7, #12]
 8066268:	681b      	ldr	r3, [r3, #0]
 806626a:	695b      	ldr	r3, [r3, #20]
 806626c:	623b      	str	r3, [r7, #32]
 806626e:	68fb      	ldr	r3, [r7, #12]
 8066270:	681b      	ldr	r3, [r3, #0]
 8066272:	699b      	ldr	r3, [r3, #24]
 8066274:	623b      	str	r3, [r7, #32]
 8066276:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066278:	68fb      	ldr	r3, [r7, #12]
 806627a:	681b      	ldr	r3, [r3, #0]
 806627c:	681a      	ldr	r2, [r3, #0]
 806627e:	68fb      	ldr	r3, [r7, #12]
 8066280:	681b      	ldr	r3, [r3, #0]
 8066282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066286:	601a      	str	r2, [r3, #0]
 8066288:	e18c      	b.n	80665a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 806628a:	68fb      	ldr	r3, [r7, #12]
 806628c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806628e:	2b01      	cmp	r3, #1
 8066290:	d11b      	bne.n	80662ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066292:	68fb      	ldr	r3, [r7, #12]
 8066294:	681b      	ldr	r3, [r3, #0]
 8066296:	681a      	ldr	r2, [r3, #0]
 8066298:	68fb      	ldr	r3, [r7, #12]
 806629a:	681b      	ldr	r3, [r3, #0]
 806629c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80662a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80662a2:	2300      	movs	r3, #0
 80662a4:	61fb      	str	r3, [r7, #28]
 80662a6:	68fb      	ldr	r3, [r7, #12]
 80662a8:	681b      	ldr	r3, [r3, #0]
 80662aa:	695b      	ldr	r3, [r3, #20]
 80662ac:	61fb      	str	r3, [r7, #28]
 80662ae:	68fb      	ldr	r3, [r7, #12]
 80662b0:	681b      	ldr	r3, [r3, #0]
 80662b2:	699b      	ldr	r3, [r3, #24]
 80662b4:	61fb      	str	r3, [r7, #28]
 80662b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80662b8:	68fb      	ldr	r3, [r7, #12]
 80662ba:	681b      	ldr	r3, [r3, #0]
 80662bc:	681a      	ldr	r2, [r3, #0]
 80662be:	68fb      	ldr	r3, [r7, #12]
 80662c0:	681b      	ldr	r3, [r3, #0]
 80662c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80662c6:	601a      	str	r2, [r3, #0]
 80662c8:	e16c      	b.n	80665a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80662ca:	68fb      	ldr	r3, [r7, #12]
 80662cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80662ce:	2b02      	cmp	r3, #2
 80662d0:	d11b      	bne.n	806630a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80662d2:	68fb      	ldr	r3, [r7, #12]
 80662d4:	681b      	ldr	r3, [r3, #0]
 80662d6:	681a      	ldr	r2, [r3, #0]
 80662d8:	68fb      	ldr	r3, [r7, #12]
 80662da:	681b      	ldr	r3, [r3, #0]
 80662dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80662e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80662e2:	68fb      	ldr	r3, [r7, #12]
 80662e4:	681b      	ldr	r3, [r3, #0]
 80662e6:	681a      	ldr	r2, [r3, #0]
 80662e8:	68fb      	ldr	r3, [r7, #12]
 80662ea:	681b      	ldr	r3, [r3, #0]
 80662ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80662f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80662f2:	2300      	movs	r3, #0
 80662f4:	61bb      	str	r3, [r7, #24]
 80662f6:	68fb      	ldr	r3, [r7, #12]
 80662f8:	681b      	ldr	r3, [r3, #0]
 80662fa:	695b      	ldr	r3, [r3, #20]
 80662fc:	61bb      	str	r3, [r7, #24]
 80662fe:	68fb      	ldr	r3, [r7, #12]
 8066300:	681b      	ldr	r3, [r3, #0]
 8066302:	699b      	ldr	r3, [r3, #24]
 8066304:	61bb      	str	r3, [r7, #24]
 8066306:	69bb      	ldr	r3, [r7, #24]
 8066308:	e14c      	b.n	80665a4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 806630a:	68fb      	ldr	r3, [r7, #12]
 806630c:	681b      	ldr	r3, [r3, #0]
 806630e:	681a      	ldr	r2, [r3, #0]
 8066310:	68fb      	ldr	r3, [r7, #12]
 8066312:	681b      	ldr	r3, [r3, #0]
 8066314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8066318:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 806631a:	2300      	movs	r3, #0
 806631c:	617b      	str	r3, [r7, #20]
 806631e:	68fb      	ldr	r3, [r7, #12]
 8066320:	681b      	ldr	r3, [r3, #0]
 8066322:	695b      	ldr	r3, [r3, #20]
 8066324:	617b      	str	r3, [r7, #20]
 8066326:	68fb      	ldr	r3, [r7, #12]
 8066328:	681b      	ldr	r3, [r3, #0]
 806632a:	699b      	ldr	r3, [r3, #24]
 806632c:	617b      	str	r3, [r7, #20]
 806632e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8066330:	e138      	b.n	80665a4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8066332:	68fb      	ldr	r3, [r7, #12]
 8066334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066336:	2b03      	cmp	r3, #3
 8066338:	f200 80f1 	bhi.w	806651e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 806633c:	68fb      	ldr	r3, [r7, #12]
 806633e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066340:	2b01      	cmp	r3, #1
 8066342:	d123      	bne.n	806638c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066346:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8066348:	68f8      	ldr	r0, [r7, #12]
 806634a:	f001 f8bd 	bl	80674c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 806634e:	4603      	mov	r3, r0
 8066350:	2b00      	cmp	r3, #0
 8066352:	d001      	beq.n	8066358 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8066354:	2301      	movs	r3, #1
 8066356:	e139      	b.n	80665cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066358:	68fb      	ldr	r3, [r7, #12]
 806635a:	681b      	ldr	r3, [r3, #0]
 806635c:	691a      	ldr	r2, [r3, #16]
 806635e:	68fb      	ldr	r3, [r7, #12]
 8066360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066362:	b2d2      	uxtb	r2, r2
 8066364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066366:	68fb      	ldr	r3, [r7, #12]
 8066368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806636a:	1c5a      	adds	r2, r3, #1
 806636c:	68fb      	ldr	r3, [r7, #12]
 806636e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066370:	68fb      	ldr	r3, [r7, #12]
 8066372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066374:	3b01      	subs	r3, #1
 8066376:	b29a      	uxth	r2, r3
 8066378:	68fb      	ldr	r3, [r7, #12]
 806637a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 806637c:	68fb      	ldr	r3, [r7, #12]
 806637e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066380:	b29b      	uxth	r3, r3
 8066382:	3b01      	subs	r3, #1
 8066384:	b29a      	uxth	r2, r3
 8066386:	68fb      	ldr	r3, [r7, #12]
 8066388:	855a      	strh	r2, [r3, #42]	; 0x2a
 806638a:	e10b      	b.n	80665a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 806638c:	68fb      	ldr	r3, [r7, #12]
 806638e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066390:	2b02      	cmp	r3, #2
 8066392:	d14e      	bne.n	8066432 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8066394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066396:	9300      	str	r3, [sp, #0]
 8066398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806639a:	2200      	movs	r2, #0
 806639c:	4906      	ldr	r1, [pc, #24]	; (80663b8 <HAL_I2C_Master_Receive+0x22c>)
 806639e:	68f8      	ldr	r0, [r7, #12]
 80663a0:	f000 ff3a 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 80663a4:	4603      	mov	r3, r0
 80663a6:	2b00      	cmp	r3, #0
 80663a8:	d008      	beq.n	80663bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80663aa:	2301      	movs	r3, #1
 80663ac:	e10e      	b.n	80665cc <HAL_I2C_Master_Receive+0x440>
 80663ae:	bf00      	nop
 80663b0:	00100002 	.word	0x00100002
 80663b4:	ffff0000 	.word	0xffff0000
 80663b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80663bc:	68fb      	ldr	r3, [r7, #12]
 80663be:	681b      	ldr	r3, [r3, #0]
 80663c0:	681a      	ldr	r2, [r3, #0]
 80663c2:	68fb      	ldr	r3, [r7, #12]
 80663c4:	681b      	ldr	r3, [r3, #0]
 80663c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80663ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80663cc:	68fb      	ldr	r3, [r7, #12]
 80663ce:	681b      	ldr	r3, [r3, #0]
 80663d0:	691a      	ldr	r2, [r3, #16]
 80663d2:	68fb      	ldr	r3, [r7, #12]
 80663d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80663d6:	b2d2      	uxtb	r2, r2
 80663d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80663da:	68fb      	ldr	r3, [r7, #12]
 80663dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80663de:	1c5a      	adds	r2, r3, #1
 80663e0:	68fb      	ldr	r3, [r7, #12]
 80663e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80663e4:	68fb      	ldr	r3, [r7, #12]
 80663e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80663e8:	3b01      	subs	r3, #1
 80663ea:	b29a      	uxth	r2, r3
 80663ec:	68fb      	ldr	r3, [r7, #12]
 80663ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80663f0:	68fb      	ldr	r3, [r7, #12]
 80663f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80663f4:	b29b      	uxth	r3, r3
 80663f6:	3b01      	subs	r3, #1
 80663f8:	b29a      	uxth	r2, r3
 80663fa:	68fb      	ldr	r3, [r7, #12]
 80663fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80663fe:	68fb      	ldr	r3, [r7, #12]
 8066400:	681b      	ldr	r3, [r3, #0]
 8066402:	691a      	ldr	r2, [r3, #16]
 8066404:	68fb      	ldr	r3, [r7, #12]
 8066406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066408:	b2d2      	uxtb	r2, r2
 806640a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 806640c:	68fb      	ldr	r3, [r7, #12]
 806640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066410:	1c5a      	adds	r2, r3, #1
 8066412:	68fb      	ldr	r3, [r7, #12]
 8066414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066416:	68fb      	ldr	r3, [r7, #12]
 8066418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806641a:	3b01      	subs	r3, #1
 806641c:	b29a      	uxth	r2, r3
 806641e:	68fb      	ldr	r3, [r7, #12]
 8066420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066422:	68fb      	ldr	r3, [r7, #12]
 8066424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066426:	b29b      	uxth	r3, r3
 8066428:	3b01      	subs	r3, #1
 806642a:	b29a      	uxth	r2, r3
 806642c:	68fb      	ldr	r3, [r7, #12]
 806642e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8066430:	e0b8      	b.n	80665a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8066432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066434:	9300      	str	r3, [sp, #0]
 8066436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8066438:	2200      	movs	r2, #0
 806643a:	4966      	ldr	r1, [pc, #408]	; (80665d4 <HAL_I2C_Master_Receive+0x448>)
 806643c:	68f8      	ldr	r0, [r7, #12]
 806643e:	f000 feeb 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8066442:	4603      	mov	r3, r0
 8066444:	2b00      	cmp	r3, #0
 8066446:	d001      	beq.n	806644c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8066448:	2301      	movs	r3, #1
 806644a:	e0bf      	b.n	80665cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 806644c:	68fb      	ldr	r3, [r7, #12]
 806644e:	681b      	ldr	r3, [r3, #0]
 8066450:	681a      	ldr	r2, [r3, #0]
 8066452:	68fb      	ldr	r3, [r7, #12]
 8066454:	681b      	ldr	r3, [r3, #0]
 8066456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 806645a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 806645c:	68fb      	ldr	r3, [r7, #12]
 806645e:	681b      	ldr	r3, [r3, #0]
 8066460:	691a      	ldr	r2, [r3, #16]
 8066462:	68fb      	ldr	r3, [r7, #12]
 8066464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066466:	b2d2      	uxtb	r2, r2
 8066468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 806646a:	68fb      	ldr	r3, [r7, #12]
 806646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806646e:	1c5a      	adds	r2, r3, #1
 8066470:	68fb      	ldr	r3, [r7, #12]
 8066472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066474:	68fb      	ldr	r3, [r7, #12]
 8066476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066478:	3b01      	subs	r3, #1
 806647a:	b29a      	uxth	r2, r3
 806647c:	68fb      	ldr	r3, [r7, #12]
 806647e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066480:	68fb      	ldr	r3, [r7, #12]
 8066482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066484:	b29b      	uxth	r3, r3
 8066486:	3b01      	subs	r3, #1
 8066488:	b29a      	uxth	r2, r3
 806648a:	68fb      	ldr	r3, [r7, #12]
 806648c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 806648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066490:	9300      	str	r3, [sp, #0]
 8066492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8066494:	2200      	movs	r2, #0
 8066496:	494f      	ldr	r1, [pc, #316]	; (80665d4 <HAL_I2C_Master_Receive+0x448>)
 8066498:	68f8      	ldr	r0, [r7, #12]
 806649a:	f000 febd 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 806649e:	4603      	mov	r3, r0
 80664a0:	2b00      	cmp	r3, #0
 80664a2:	d001      	beq.n	80664a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80664a4:	2301      	movs	r3, #1
 80664a6:	e091      	b.n	80665cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80664a8:	68fb      	ldr	r3, [r7, #12]
 80664aa:	681b      	ldr	r3, [r3, #0]
 80664ac:	681a      	ldr	r2, [r3, #0]
 80664ae:	68fb      	ldr	r3, [r7, #12]
 80664b0:	681b      	ldr	r3, [r3, #0]
 80664b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80664b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80664b8:	68fb      	ldr	r3, [r7, #12]
 80664ba:	681b      	ldr	r3, [r3, #0]
 80664bc:	691a      	ldr	r2, [r3, #16]
 80664be:	68fb      	ldr	r3, [r7, #12]
 80664c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80664c2:	b2d2      	uxtb	r2, r2
 80664c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80664c6:	68fb      	ldr	r3, [r7, #12]
 80664c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80664ca:	1c5a      	adds	r2, r3, #1
 80664cc:	68fb      	ldr	r3, [r7, #12]
 80664ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80664d0:	68fb      	ldr	r3, [r7, #12]
 80664d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80664d4:	3b01      	subs	r3, #1
 80664d6:	b29a      	uxth	r2, r3
 80664d8:	68fb      	ldr	r3, [r7, #12]
 80664da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80664dc:	68fb      	ldr	r3, [r7, #12]
 80664de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80664e0:	b29b      	uxth	r3, r3
 80664e2:	3b01      	subs	r3, #1
 80664e4:	b29a      	uxth	r2, r3
 80664e6:	68fb      	ldr	r3, [r7, #12]
 80664e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80664ea:	68fb      	ldr	r3, [r7, #12]
 80664ec:	681b      	ldr	r3, [r3, #0]
 80664ee:	691a      	ldr	r2, [r3, #16]
 80664f0:	68fb      	ldr	r3, [r7, #12]
 80664f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80664f4:	b2d2      	uxtb	r2, r2
 80664f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80664f8:	68fb      	ldr	r3, [r7, #12]
 80664fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80664fc:	1c5a      	adds	r2, r3, #1
 80664fe:	68fb      	ldr	r3, [r7, #12]
 8066500:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066502:	68fb      	ldr	r3, [r7, #12]
 8066504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066506:	3b01      	subs	r3, #1
 8066508:	b29a      	uxth	r2, r3
 806650a:	68fb      	ldr	r3, [r7, #12]
 806650c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 806650e:	68fb      	ldr	r3, [r7, #12]
 8066510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066512:	b29b      	uxth	r3, r3
 8066514:	3b01      	subs	r3, #1
 8066516:	b29a      	uxth	r2, r3
 8066518:	68fb      	ldr	r3, [r7, #12]
 806651a:	855a      	strh	r2, [r3, #42]	; 0x2a
 806651c:	e042      	b.n	80665a4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 806651e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8066522:	68f8      	ldr	r0, [r7, #12]
 8066524:	f000 ffd0 	bl	80674c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8066528:	4603      	mov	r3, r0
 806652a:	2b00      	cmp	r3, #0
 806652c:	d001      	beq.n	8066532 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 806652e:	2301      	movs	r3, #1
 8066530:	e04c      	b.n	80665cc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066532:	68fb      	ldr	r3, [r7, #12]
 8066534:	681b      	ldr	r3, [r3, #0]
 8066536:	691a      	ldr	r2, [r3, #16]
 8066538:	68fb      	ldr	r3, [r7, #12]
 806653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806653c:	b2d2      	uxtb	r2, r2
 806653e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8066540:	68fb      	ldr	r3, [r7, #12]
 8066542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066544:	1c5a      	adds	r2, r3, #1
 8066546:	68fb      	ldr	r3, [r7, #12]
 8066548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 806654a:	68fb      	ldr	r3, [r7, #12]
 806654c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806654e:	3b01      	subs	r3, #1
 8066550:	b29a      	uxth	r2, r3
 8066552:	68fb      	ldr	r3, [r7, #12]
 8066554:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8066556:	68fb      	ldr	r3, [r7, #12]
 8066558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806655a:	b29b      	uxth	r3, r3
 806655c:	3b01      	subs	r3, #1
 806655e:	b29a      	uxth	r2, r3
 8066560:	68fb      	ldr	r3, [r7, #12]
 8066562:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8066564:	68fb      	ldr	r3, [r7, #12]
 8066566:	681b      	ldr	r3, [r3, #0]
 8066568:	695b      	ldr	r3, [r3, #20]
 806656a:	f003 0304 	and.w	r3, r3, #4
 806656e:	2b04      	cmp	r3, #4
 8066570:	d118      	bne.n	80665a4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066572:	68fb      	ldr	r3, [r7, #12]
 8066574:	681b      	ldr	r3, [r3, #0]
 8066576:	691a      	ldr	r2, [r3, #16]
 8066578:	68fb      	ldr	r3, [r7, #12]
 806657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806657c:	b2d2      	uxtb	r2, r2
 806657e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066580:	68fb      	ldr	r3, [r7, #12]
 8066582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066584:	1c5a      	adds	r2, r3, #1
 8066586:	68fb      	ldr	r3, [r7, #12]
 8066588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 806658a:	68fb      	ldr	r3, [r7, #12]
 806658c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806658e:	3b01      	subs	r3, #1
 8066590:	b29a      	uxth	r2, r3
 8066592:	68fb      	ldr	r3, [r7, #12]
 8066594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066596:	68fb      	ldr	r3, [r7, #12]
 8066598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806659a:	b29b      	uxth	r3, r3
 806659c:	3b01      	subs	r3, #1
 806659e:	b29a      	uxth	r2, r3
 80665a0:	68fb      	ldr	r3, [r7, #12]
 80665a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80665a4:	68fb      	ldr	r3, [r7, #12]
 80665a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80665a8:	2b00      	cmp	r3, #0
 80665aa:	f47f aec2 	bne.w	8066332 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80665ae:	68fb      	ldr	r3, [r7, #12]
 80665b0:	2220      	movs	r2, #32
 80665b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80665b6:	68fb      	ldr	r3, [r7, #12]
 80665b8:	2200      	movs	r2, #0
 80665ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80665be:	68fb      	ldr	r3, [r7, #12]
 80665c0:	2200      	movs	r2, #0
 80665c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80665c6:	2300      	movs	r3, #0
 80665c8:	e000      	b.n	80665cc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80665ca:	2302      	movs	r3, #2
  }
}
 80665cc:	4618      	mov	r0, r3
 80665ce:	3728      	adds	r7, #40	; 0x28
 80665d0:	46bd      	mov	sp, r7
 80665d2:	bd80      	pop	{r7, pc}
 80665d4:	00010004 	.word	0x00010004

080665d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80665d8:	b580      	push	{r7, lr}
 80665da:	b088      	sub	sp, #32
 80665dc:	af02      	add	r7, sp, #8
 80665de:	60f8      	str	r0, [r7, #12]
 80665e0:	4608      	mov	r0, r1
 80665e2:	4611      	mov	r1, r2
 80665e4:	461a      	mov	r2, r3
 80665e6:	4603      	mov	r3, r0
 80665e8:	817b      	strh	r3, [r7, #10]
 80665ea:	460b      	mov	r3, r1
 80665ec:	813b      	strh	r3, [r7, #8]
 80665ee:	4613      	mov	r3, r2
 80665f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80665f2:	f7fd fa3f 	bl	8063a74 <HAL_GetTick>
 80665f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80665f8:	88fb      	ldrh	r3, [r7, #6]
 80665fa:	2b01      	cmp	r3, #1
 80665fc:	d007      	beq.n	806660e <HAL_I2C_Mem_Write+0x36>
 80665fe:	88fb      	ldrh	r3, [r7, #6]
 8066600:	2b10      	cmp	r3, #16
 8066602:	d004      	beq.n	806660e <HAL_I2C_Mem_Write+0x36>
 8066604:	f640 11ba 	movw	r1, #2490	; 0x9ba
 8066608:	4873      	ldr	r0, [pc, #460]	; (80667d8 <HAL_I2C_Mem_Write+0x200>)
 806660a:	f7fc fd68 	bl	80630de <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 806660e:	68fb      	ldr	r3, [r7, #12]
 8066610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8066614:	b2db      	uxtb	r3, r3
 8066616:	2b20      	cmp	r3, #32
 8066618:	f040 80d9 	bne.w	80667ce <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 806661c:	697b      	ldr	r3, [r7, #20]
 806661e:	9300      	str	r3, [sp, #0]
 8066620:	2319      	movs	r3, #25
 8066622:	2201      	movs	r2, #1
 8066624:	496d      	ldr	r1, [pc, #436]	; (80667dc <HAL_I2C_Mem_Write+0x204>)
 8066626:	68f8      	ldr	r0, [r7, #12]
 8066628:	f000 fdf6 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 806662c:	4603      	mov	r3, r0
 806662e:	2b00      	cmp	r3, #0
 8066630:	d001      	beq.n	8066636 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8066632:	2302      	movs	r3, #2
 8066634:	e0cc      	b.n	80667d0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8066636:	68fb      	ldr	r3, [r7, #12]
 8066638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 806663c:	2b01      	cmp	r3, #1
 806663e:	d101      	bne.n	8066644 <HAL_I2C_Mem_Write+0x6c>
 8066640:	2302      	movs	r3, #2
 8066642:	e0c5      	b.n	80667d0 <HAL_I2C_Mem_Write+0x1f8>
 8066644:	68fb      	ldr	r3, [r7, #12]
 8066646:	2201      	movs	r2, #1
 8066648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 806664c:	68fb      	ldr	r3, [r7, #12]
 806664e:	681b      	ldr	r3, [r3, #0]
 8066650:	681b      	ldr	r3, [r3, #0]
 8066652:	f003 0301 	and.w	r3, r3, #1
 8066656:	2b01      	cmp	r3, #1
 8066658:	d007      	beq.n	806666a <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 806665a:	68fb      	ldr	r3, [r7, #12]
 806665c:	681b      	ldr	r3, [r3, #0]
 806665e:	681a      	ldr	r2, [r3, #0]
 8066660:	68fb      	ldr	r3, [r7, #12]
 8066662:	681b      	ldr	r3, [r3, #0]
 8066664:	f042 0201 	orr.w	r2, r2, #1
 8066668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 806666a:	68fb      	ldr	r3, [r7, #12]
 806666c:	681b      	ldr	r3, [r3, #0]
 806666e:	681a      	ldr	r2, [r3, #0]
 8066670:	68fb      	ldr	r3, [r7, #12]
 8066672:	681b      	ldr	r3, [r3, #0]
 8066674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8066678:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 806667a:	68fb      	ldr	r3, [r7, #12]
 806667c:	2221      	movs	r2, #33	; 0x21
 806667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8066682:	68fb      	ldr	r3, [r7, #12]
 8066684:	2240      	movs	r2, #64	; 0x40
 8066686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 806668a:	68fb      	ldr	r3, [r7, #12]
 806668c:	2200      	movs	r2, #0
 806668e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8066690:	68fb      	ldr	r3, [r7, #12]
 8066692:	6a3a      	ldr	r2, [r7, #32]
 8066694:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8066696:	68fb      	ldr	r3, [r7, #12]
 8066698:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 806669a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 806669c:	68fb      	ldr	r3, [r7, #12]
 806669e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80666a0:	b29a      	uxth	r2, r3
 80666a2:	68fb      	ldr	r3, [r7, #12]
 80666a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80666a6:	68fb      	ldr	r3, [r7, #12]
 80666a8:	4a4d      	ldr	r2, [pc, #308]	; (80667e0 <HAL_I2C_Mem_Write+0x208>)
 80666aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80666ac:	88f8      	ldrh	r0, [r7, #6]
 80666ae:	893a      	ldrh	r2, [r7, #8]
 80666b0:	8979      	ldrh	r1, [r7, #10]
 80666b2:	697b      	ldr	r3, [r7, #20]
 80666b4:	9301      	str	r3, [sp, #4]
 80666b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80666b8:	9300      	str	r3, [sp, #0]
 80666ba:	4603      	mov	r3, r0
 80666bc:	68f8      	ldr	r0, [r7, #12]
 80666be:	f000 fc2d 	bl	8066f1c <I2C_RequestMemoryWrite>
 80666c2:	4603      	mov	r3, r0
 80666c4:	2b00      	cmp	r3, #0
 80666c6:	d052      	beq.n	806676e <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80666c8:	2301      	movs	r3, #1
 80666ca:	e081      	b.n	80667d0 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80666cc:	697a      	ldr	r2, [r7, #20]
 80666ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80666d0:	68f8      	ldr	r0, [r7, #12]
 80666d2:	f000 fe77 	bl	80673c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80666d6:	4603      	mov	r3, r0
 80666d8:	2b00      	cmp	r3, #0
 80666da:	d00d      	beq.n	80666f8 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80666dc:	68fb      	ldr	r3, [r7, #12]
 80666de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80666e0:	2b04      	cmp	r3, #4
 80666e2:	d107      	bne.n	80666f4 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80666e4:	68fb      	ldr	r3, [r7, #12]
 80666e6:	681b      	ldr	r3, [r3, #0]
 80666e8:	681a      	ldr	r2, [r3, #0]
 80666ea:	68fb      	ldr	r3, [r7, #12]
 80666ec:	681b      	ldr	r3, [r3, #0]
 80666ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80666f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80666f4:	2301      	movs	r3, #1
 80666f6:	e06b      	b.n	80667d0 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80666f8:	68fb      	ldr	r3, [r7, #12]
 80666fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80666fc:	781a      	ldrb	r2, [r3, #0]
 80666fe:	68fb      	ldr	r3, [r7, #12]
 8066700:	681b      	ldr	r3, [r3, #0]
 8066702:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8066704:	68fb      	ldr	r3, [r7, #12]
 8066706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066708:	1c5a      	adds	r2, r3, #1
 806670a:	68fb      	ldr	r3, [r7, #12]
 806670c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 806670e:	68fb      	ldr	r3, [r7, #12]
 8066710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066712:	3b01      	subs	r3, #1
 8066714:	b29a      	uxth	r2, r3
 8066716:	68fb      	ldr	r3, [r7, #12]
 8066718:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 806671a:	68fb      	ldr	r3, [r7, #12]
 806671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806671e:	b29b      	uxth	r3, r3
 8066720:	3b01      	subs	r3, #1
 8066722:	b29a      	uxth	r2, r3
 8066724:	68fb      	ldr	r3, [r7, #12]
 8066726:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8066728:	68fb      	ldr	r3, [r7, #12]
 806672a:	681b      	ldr	r3, [r3, #0]
 806672c:	695b      	ldr	r3, [r3, #20]
 806672e:	f003 0304 	and.w	r3, r3, #4
 8066732:	2b04      	cmp	r3, #4
 8066734:	d11b      	bne.n	806676e <HAL_I2C_Mem_Write+0x196>
 8066736:	68fb      	ldr	r3, [r7, #12]
 8066738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806673a:	2b00      	cmp	r3, #0
 806673c:	d017      	beq.n	806676e <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 806673e:	68fb      	ldr	r3, [r7, #12]
 8066740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066742:	781a      	ldrb	r2, [r3, #0]
 8066744:	68fb      	ldr	r3, [r7, #12]
 8066746:	681b      	ldr	r3, [r3, #0]
 8066748:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 806674a:	68fb      	ldr	r3, [r7, #12]
 806674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806674e:	1c5a      	adds	r2, r3, #1
 8066750:	68fb      	ldr	r3, [r7, #12]
 8066752:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8066754:	68fb      	ldr	r3, [r7, #12]
 8066756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066758:	3b01      	subs	r3, #1
 806675a:	b29a      	uxth	r2, r3
 806675c:	68fb      	ldr	r3, [r7, #12]
 806675e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8066760:	68fb      	ldr	r3, [r7, #12]
 8066762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066764:	b29b      	uxth	r3, r3
 8066766:	3b01      	subs	r3, #1
 8066768:	b29a      	uxth	r2, r3
 806676a:	68fb      	ldr	r3, [r7, #12]
 806676c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 806676e:	68fb      	ldr	r3, [r7, #12]
 8066770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066772:	2b00      	cmp	r3, #0
 8066774:	d1aa      	bne.n	80666cc <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066776:	697a      	ldr	r2, [r7, #20]
 8066778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 806677a:	68f8      	ldr	r0, [r7, #12]
 806677c:	f000 fe63 	bl	8067446 <I2C_WaitOnBTFFlagUntilTimeout>
 8066780:	4603      	mov	r3, r0
 8066782:	2b00      	cmp	r3, #0
 8066784:	d00d      	beq.n	80667a2 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066786:	68fb      	ldr	r3, [r7, #12]
 8066788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806678a:	2b04      	cmp	r3, #4
 806678c:	d107      	bne.n	806679e <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806678e:	68fb      	ldr	r3, [r7, #12]
 8066790:	681b      	ldr	r3, [r3, #0]
 8066792:	681a      	ldr	r2, [r3, #0]
 8066794:	68fb      	ldr	r3, [r7, #12]
 8066796:	681b      	ldr	r3, [r3, #0]
 8066798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806679c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 806679e:	2301      	movs	r3, #1
 80667a0:	e016      	b.n	80667d0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80667a2:	68fb      	ldr	r3, [r7, #12]
 80667a4:	681b      	ldr	r3, [r3, #0]
 80667a6:	681a      	ldr	r2, [r3, #0]
 80667a8:	68fb      	ldr	r3, [r7, #12]
 80667aa:	681b      	ldr	r3, [r3, #0]
 80667ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80667b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80667b2:	68fb      	ldr	r3, [r7, #12]
 80667b4:	2220      	movs	r2, #32
 80667b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80667ba:	68fb      	ldr	r3, [r7, #12]
 80667bc:	2200      	movs	r2, #0
 80667be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80667c2:	68fb      	ldr	r3, [r7, #12]
 80667c4:	2200      	movs	r2, #0
 80667c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80667ca:	2300      	movs	r3, #0
 80667cc:	e000      	b.n	80667d0 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80667ce:	2302      	movs	r3, #2
  }
}
 80667d0:	4618      	mov	r0, r3
 80667d2:	3718      	adds	r7, #24
 80667d4:	46bd      	mov	sp, r7
 80667d6:	bd80      	pop	{r7, pc}
 80667d8:	080773ac 	.word	0x080773ac
 80667dc:	00100002 	.word	0x00100002
 80667e0:	ffff0000 	.word	0xffff0000

080667e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80667e4:	b580      	push	{r7, lr}
 80667e6:	b08c      	sub	sp, #48	; 0x30
 80667e8:	af02      	add	r7, sp, #8
 80667ea:	60f8      	str	r0, [r7, #12]
 80667ec:	4608      	mov	r0, r1
 80667ee:	4611      	mov	r1, r2
 80667f0:	461a      	mov	r2, r3
 80667f2:	4603      	mov	r3, r0
 80667f4:	817b      	strh	r3, [r7, #10]
 80667f6:	460b      	mov	r3, r1
 80667f8:	813b      	strh	r3, [r7, #8]
 80667fa:	4613      	mov	r3, r2
 80667fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80667fe:	f7fd f939 	bl	8063a74 <HAL_GetTick>
 8066802:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8066804:	88fb      	ldrh	r3, [r7, #6]
 8066806:	2b01      	cmp	r3, #1
 8066808:	d007      	beq.n	806681a <HAL_I2C_Mem_Read+0x36>
 806680a:	88fb      	ldrh	r3, [r7, #6]
 806680c:	2b10      	cmp	r3, #16
 806680e:	d004      	beq.n	806681a <HAL_I2C_Mem_Read+0x36>
 8066810:	f640 2135 	movw	r1, #2613	; 0xa35
 8066814:	4881      	ldr	r0, [pc, #516]	; (8066a1c <HAL_I2C_Mem_Read+0x238>)
 8066816:	f7fc fc62 	bl	80630de <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 806681a:	68fb      	ldr	r3, [r7, #12]
 806681c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8066820:	b2db      	uxtb	r3, r3
 8066822:	2b20      	cmp	r3, #32
 8066824:	f040 8209 	bne.w	8066c3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8066828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806682a:	9300      	str	r3, [sp, #0]
 806682c:	2319      	movs	r3, #25
 806682e:	2201      	movs	r2, #1
 8066830:	497b      	ldr	r1, [pc, #492]	; (8066a20 <HAL_I2C_Mem_Read+0x23c>)
 8066832:	68f8      	ldr	r0, [r7, #12]
 8066834:	f000 fcf0 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8066838:	4603      	mov	r3, r0
 806683a:	2b00      	cmp	r3, #0
 806683c:	d001      	beq.n	8066842 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 806683e:	2302      	movs	r3, #2
 8066840:	e1fc      	b.n	8066c3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8066842:	68fb      	ldr	r3, [r7, #12]
 8066844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8066848:	2b01      	cmp	r3, #1
 806684a:	d101      	bne.n	8066850 <HAL_I2C_Mem_Read+0x6c>
 806684c:	2302      	movs	r3, #2
 806684e:	e1f5      	b.n	8066c3c <HAL_I2C_Mem_Read+0x458>
 8066850:	68fb      	ldr	r3, [r7, #12]
 8066852:	2201      	movs	r2, #1
 8066854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8066858:	68fb      	ldr	r3, [r7, #12]
 806685a:	681b      	ldr	r3, [r3, #0]
 806685c:	681b      	ldr	r3, [r3, #0]
 806685e:	f003 0301 	and.w	r3, r3, #1
 8066862:	2b01      	cmp	r3, #1
 8066864:	d007      	beq.n	8066876 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8066866:	68fb      	ldr	r3, [r7, #12]
 8066868:	681b      	ldr	r3, [r3, #0]
 806686a:	681a      	ldr	r2, [r3, #0]
 806686c:	68fb      	ldr	r3, [r7, #12]
 806686e:	681b      	ldr	r3, [r3, #0]
 8066870:	f042 0201 	orr.w	r2, r2, #1
 8066874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8066876:	68fb      	ldr	r3, [r7, #12]
 8066878:	681b      	ldr	r3, [r3, #0]
 806687a:	681a      	ldr	r2, [r3, #0]
 806687c:	68fb      	ldr	r3, [r7, #12]
 806687e:	681b      	ldr	r3, [r3, #0]
 8066880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8066884:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8066886:	68fb      	ldr	r3, [r7, #12]
 8066888:	2222      	movs	r2, #34	; 0x22
 806688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 806688e:	68fb      	ldr	r3, [r7, #12]
 8066890:	2240      	movs	r2, #64	; 0x40
 8066892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8066896:	68fb      	ldr	r3, [r7, #12]
 8066898:	2200      	movs	r2, #0
 806689a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 806689c:	68fb      	ldr	r3, [r7, #12]
 806689e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80668a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80668a2:	68fb      	ldr	r3, [r7, #12]
 80668a4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80668a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80668a8:	68fb      	ldr	r3, [r7, #12]
 80668aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80668ac:	b29a      	uxth	r2, r3
 80668ae:	68fb      	ldr	r3, [r7, #12]
 80668b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80668b2:	68fb      	ldr	r3, [r7, #12]
 80668b4:	4a5b      	ldr	r2, [pc, #364]	; (8066a24 <HAL_I2C_Mem_Read+0x240>)
 80668b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80668b8:	88f8      	ldrh	r0, [r7, #6]
 80668ba:	893a      	ldrh	r2, [r7, #8]
 80668bc:	8979      	ldrh	r1, [r7, #10]
 80668be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80668c0:	9301      	str	r3, [sp, #4]
 80668c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80668c4:	9300      	str	r3, [sp, #0]
 80668c6:	4603      	mov	r3, r0
 80668c8:	68f8      	ldr	r0, [r7, #12]
 80668ca:	f000 fbbd 	bl	8067048 <I2C_RequestMemoryRead>
 80668ce:	4603      	mov	r3, r0
 80668d0:	2b00      	cmp	r3, #0
 80668d2:	d001      	beq.n	80668d8 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80668d4:	2301      	movs	r3, #1
 80668d6:	e1b1      	b.n	8066c3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80668d8:	68fb      	ldr	r3, [r7, #12]
 80668da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80668dc:	2b00      	cmp	r3, #0
 80668de:	d113      	bne.n	8066908 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80668e0:	2300      	movs	r3, #0
 80668e2:	623b      	str	r3, [r7, #32]
 80668e4:	68fb      	ldr	r3, [r7, #12]
 80668e6:	681b      	ldr	r3, [r3, #0]
 80668e8:	695b      	ldr	r3, [r3, #20]
 80668ea:	623b      	str	r3, [r7, #32]
 80668ec:	68fb      	ldr	r3, [r7, #12]
 80668ee:	681b      	ldr	r3, [r3, #0]
 80668f0:	699b      	ldr	r3, [r3, #24]
 80668f2:	623b      	str	r3, [r7, #32]
 80668f4:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80668f6:	68fb      	ldr	r3, [r7, #12]
 80668f8:	681b      	ldr	r3, [r3, #0]
 80668fa:	681a      	ldr	r2, [r3, #0]
 80668fc:	68fb      	ldr	r3, [r7, #12]
 80668fe:	681b      	ldr	r3, [r3, #0]
 8066900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066904:	601a      	str	r2, [r3, #0]
 8066906:	e185      	b.n	8066c14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8066908:	68fb      	ldr	r3, [r7, #12]
 806690a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806690c:	2b01      	cmp	r3, #1
 806690e:	d11b      	bne.n	8066948 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066910:	68fb      	ldr	r3, [r7, #12]
 8066912:	681b      	ldr	r3, [r3, #0]
 8066914:	681a      	ldr	r2, [r3, #0]
 8066916:	68fb      	ldr	r3, [r7, #12]
 8066918:	681b      	ldr	r3, [r3, #0]
 806691a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 806691e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066920:	2300      	movs	r3, #0
 8066922:	61fb      	str	r3, [r7, #28]
 8066924:	68fb      	ldr	r3, [r7, #12]
 8066926:	681b      	ldr	r3, [r3, #0]
 8066928:	695b      	ldr	r3, [r3, #20]
 806692a:	61fb      	str	r3, [r7, #28]
 806692c:	68fb      	ldr	r3, [r7, #12]
 806692e:	681b      	ldr	r3, [r3, #0]
 8066930:	699b      	ldr	r3, [r3, #24]
 8066932:	61fb      	str	r3, [r7, #28]
 8066934:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066936:	68fb      	ldr	r3, [r7, #12]
 8066938:	681b      	ldr	r3, [r3, #0]
 806693a:	681a      	ldr	r2, [r3, #0]
 806693c:	68fb      	ldr	r3, [r7, #12]
 806693e:	681b      	ldr	r3, [r3, #0]
 8066940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066944:	601a      	str	r2, [r3, #0]
 8066946:	e165      	b.n	8066c14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8066948:	68fb      	ldr	r3, [r7, #12]
 806694a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806694c:	2b02      	cmp	r3, #2
 806694e:	d11b      	bne.n	8066988 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066950:	68fb      	ldr	r3, [r7, #12]
 8066952:	681b      	ldr	r3, [r3, #0]
 8066954:	681a      	ldr	r2, [r3, #0]
 8066956:	68fb      	ldr	r3, [r7, #12]
 8066958:	681b      	ldr	r3, [r3, #0]
 806695a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 806695e:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8066960:	68fb      	ldr	r3, [r7, #12]
 8066962:	681b      	ldr	r3, [r3, #0]
 8066964:	681a      	ldr	r2, [r3, #0]
 8066966:	68fb      	ldr	r3, [r7, #12]
 8066968:	681b      	ldr	r3, [r3, #0]
 806696a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 806696e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066970:	2300      	movs	r3, #0
 8066972:	61bb      	str	r3, [r7, #24]
 8066974:	68fb      	ldr	r3, [r7, #12]
 8066976:	681b      	ldr	r3, [r3, #0]
 8066978:	695b      	ldr	r3, [r3, #20]
 806697a:	61bb      	str	r3, [r7, #24]
 806697c:	68fb      	ldr	r3, [r7, #12]
 806697e:	681b      	ldr	r3, [r3, #0]
 8066980:	699b      	ldr	r3, [r3, #24]
 8066982:	61bb      	str	r3, [r7, #24]
 8066984:	69bb      	ldr	r3, [r7, #24]
 8066986:	e145      	b.n	8066c14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066988:	2300      	movs	r3, #0
 806698a:	617b      	str	r3, [r7, #20]
 806698c:	68fb      	ldr	r3, [r7, #12]
 806698e:	681b      	ldr	r3, [r3, #0]
 8066990:	695b      	ldr	r3, [r3, #20]
 8066992:	617b      	str	r3, [r7, #20]
 8066994:	68fb      	ldr	r3, [r7, #12]
 8066996:	681b      	ldr	r3, [r3, #0]
 8066998:	699b      	ldr	r3, [r3, #24]
 806699a:	617b      	str	r3, [r7, #20]
 806699c:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 806699e:	e139      	b.n	8066c14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80669a0:	68fb      	ldr	r3, [r7, #12]
 80669a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80669a4:	2b03      	cmp	r3, #3
 80669a6:	f200 80f2 	bhi.w	8066b8e <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80669aa:	68fb      	ldr	r3, [r7, #12]
 80669ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80669ae:	2b01      	cmp	r3, #1
 80669b0:	d123      	bne.n	80669fa <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80669b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80669b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80669b6:	68f8      	ldr	r0, [r7, #12]
 80669b8:	f000 fd86 	bl	80674c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80669bc:	4603      	mov	r3, r0
 80669be:	2b00      	cmp	r3, #0
 80669c0:	d001      	beq.n	80669c6 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 80669c2:	2301      	movs	r3, #1
 80669c4:	e13a      	b.n	8066c3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80669c6:	68fb      	ldr	r3, [r7, #12]
 80669c8:	681b      	ldr	r3, [r3, #0]
 80669ca:	691a      	ldr	r2, [r3, #16]
 80669cc:	68fb      	ldr	r3, [r7, #12]
 80669ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80669d0:	b2d2      	uxtb	r2, r2
 80669d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80669d4:	68fb      	ldr	r3, [r7, #12]
 80669d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80669d8:	1c5a      	adds	r2, r3, #1
 80669da:	68fb      	ldr	r3, [r7, #12]
 80669dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80669de:	68fb      	ldr	r3, [r7, #12]
 80669e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80669e2:	3b01      	subs	r3, #1
 80669e4:	b29a      	uxth	r2, r3
 80669e6:	68fb      	ldr	r3, [r7, #12]
 80669e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80669ea:	68fb      	ldr	r3, [r7, #12]
 80669ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80669ee:	b29b      	uxth	r3, r3
 80669f0:	3b01      	subs	r3, #1
 80669f2:	b29a      	uxth	r2, r3
 80669f4:	68fb      	ldr	r3, [r7, #12]
 80669f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80669f8:	e10c      	b.n	8066c14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80669fa:	68fb      	ldr	r3, [r7, #12]
 80669fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80669fe:	2b02      	cmp	r3, #2
 8066a00:	d14f      	bne.n	8066aa2 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8066a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066a04:	9300      	str	r3, [sp, #0]
 8066a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8066a08:	2200      	movs	r2, #0
 8066a0a:	4907      	ldr	r1, [pc, #28]	; (8066a28 <HAL_I2C_Mem_Read+0x244>)
 8066a0c:	68f8      	ldr	r0, [r7, #12]
 8066a0e:	f000 fc03 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8066a12:	4603      	mov	r3, r0
 8066a14:	2b00      	cmp	r3, #0
 8066a16:	d009      	beq.n	8066a2c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8066a18:	2301      	movs	r3, #1
 8066a1a:	e10f      	b.n	8066c3c <HAL_I2C_Mem_Read+0x458>
 8066a1c:	080773ac 	.word	0x080773ac
 8066a20:	00100002 	.word	0x00100002
 8066a24:	ffff0000 	.word	0xffff0000
 8066a28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066a2c:	68fb      	ldr	r3, [r7, #12]
 8066a2e:	681b      	ldr	r3, [r3, #0]
 8066a30:	681a      	ldr	r2, [r3, #0]
 8066a32:	68fb      	ldr	r3, [r7, #12]
 8066a34:	681b      	ldr	r3, [r3, #0]
 8066a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066a3c:	68fb      	ldr	r3, [r7, #12]
 8066a3e:	681b      	ldr	r3, [r3, #0]
 8066a40:	691a      	ldr	r2, [r3, #16]
 8066a42:	68fb      	ldr	r3, [r7, #12]
 8066a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a46:	b2d2      	uxtb	r2, r2
 8066a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066a4a:	68fb      	ldr	r3, [r7, #12]
 8066a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a4e:	1c5a      	adds	r2, r3, #1
 8066a50:	68fb      	ldr	r3, [r7, #12]
 8066a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066a54:	68fb      	ldr	r3, [r7, #12]
 8066a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066a58:	3b01      	subs	r3, #1
 8066a5a:	b29a      	uxth	r2, r3
 8066a5c:	68fb      	ldr	r3, [r7, #12]
 8066a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066a60:	68fb      	ldr	r3, [r7, #12]
 8066a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066a64:	b29b      	uxth	r3, r3
 8066a66:	3b01      	subs	r3, #1
 8066a68:	b29a      	uxth	r2, r3
 8066a6a:	68fb      	ldr	r3, [r7, #12]
 8066a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066a6e:	68fb      	ldr	r3, [r7, #12]
 8066a70:	681b      	ldr	r3, [r3, #0]
 8066a72:	691a      	ldr	r2, [r3, #16]
 8066a74:	68fb      	ldr	r3, [r7, #12]
 8066a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a78:	b2d2      	uxtb	r2, r2
 8066a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066a7c:	68fb      	ldr	r3, [r7, #12]
 8066a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a80:	1c5a      	adds	r2, r3, #1
 8066a82:	68fb      	ldr	r3, [r7, #12]
 8066a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066a86:	68fb      	ldr	r3, [r7, #12]
 8066a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066a8a:	3b01      	subs	r3, #1
 8066a8c:	b29a      	uxth	r2, r3
 8066a8e:	68fb      	ldr	r3, [r7, #12]
 8066a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066a92:	68fb      	ldr	r3, [r7, #12]
 8066a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066a96:	b29b      	uxth	r3, r3
 8066a98:	3b01      	subs	r3, #1
 8066a9a:	b29a      	uxth	r2, r3
 8066a9c:	68fb      	ldr	r3, [r7, #12]
 8066a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8066aa0:	e0b8      	b.n	8066c14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8066aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066aa4:	9300      	str	r3, [sp, #0]
 8066aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8066aa8:	2200      	movs	r2, #0
 8066aaa:	4966      	ldr	r1, [pc, #408]	; (8066c44 <HAL_I2C_Mem_Read+0x460>)
 8066aac:	68f8      	ldr	r0, [r7, #12]
 8066aae:	f000 fbb3 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8066ab2:	4603      	mov	r3, r0
 8066ab4:	2b00      	cmp	r3, #0
 8066ab6:	d001      	beq.n	8066abc <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8066ab8:	2301      	movs	r3, #1
 8066aba:	e0bf      	b.n	8066c3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066abc:	68fb      	ldr	r3, [r7, #12]
 8066abe:	681b      	ldr	r3, [r3, #0]
 8066ac0:	681a      	ldr	r2, [r3, #0]
 8066ac2:	68fb      	ldr	r3, [r7, #12]
 8066ac4:	681b      	ldr	r3, [r3, #0]
 8066ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8066aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066acc:	68fb      	ldr	r3, [r7, #12]
 8066ace:	681b      	ldr	r3, [r3, #0]
 8066ad0:	691a      	ldr	r2, [r3, #16]
 8066ad2:	68fb      	ldr	r3, [r7, #12]
 8066ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066ad6:	b2d2      	uxtb	r2, r2
 8066ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066ada:	68fb      	ldr	r3, [r7, #12]
 8066adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066ade:	1c5a      	adds	r2, r3, #1
 8066ae0:	68fb      	ldr	r3, [r7, #12]
 8066ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066ae4:	68fb      	ldr	r3, [r7, #12]
 8066ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066ae8:	3b01      	subs	r3, #1
 8066aea:	b29a      	uxth	r2, r3
 8066aec:	68fb      	ldr	r3, [r7, #12]
 8066aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066af0:	68fb      	ldr	r3, [r7, #12]
 8066af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066af4:	b29b      	uxth	r3, r3
 8066af6:	3b01      	subs	r3, #1
 8066af8:	b29a      	uxth	r2, r3
 8066afa:	68fb      	ldr	r3, [r7, #12]
 8066afc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8066afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066b00:	9300      	str	r3, [sp, #0]
 8066b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8066b04:	2200      	movs	r2, #0
 8066b06:	494f      	ldr	r1, [pc, #316]	; (8066c44 <HAL_I2C_Mem_Read+0x460>)
 8066b08:	68f8      	ldr	r0, [r7, #12]
 8066b0a:	f000 fb85 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8066b0e:	4603      	mov	r3, r0
 8066b10:	2b00      	cmp	r3, #0
 8066b12:	d001      	beq.n	8066b18 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8066b14:	2301      	movs	r3, #1
 8066b16:	e091      	b.n	8066c3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066b18:	68fb      	ldr	r3, [r7, #12]
 8066b1a:	681b      	ldr	r3, [r3, #0]
 8066b1c:	681a      	ldr	r2, [r3, #0]
 8066b1e:	68fb      	ldr	r3, [r7, #12]
 8066b20:	681b      	ldr	r3, [r3, #0]
 8066b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066b28:	68fb      	ldr	r3, [r7, #12]
 8066b2a:	681b      	ldr	r3, [r3, #0]
 8066b2c:	691a      	ldr	r2, [r3, #16]
 8066b2e:	68fb      	ldr	r3, [r7, #12]
 8066b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066b32:	b2d2      	uxtb	r2, r2
 8066b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066b36:	68fb      	ldr	r3, [r7, #12]
 8066b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066b3a:	1c5a      	adds	r2, r3, #1
 8066b3c:	68fb      	ldr	r3, [r7, #12]
 8066b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066b40:	68fb      	ldr	r3, [r7, #12]
 8066b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066b44:	3b01      	subs	r3, #1
 8066b46:	b29a      	uxth	r2, r3
 8066b48:	68fb      	ldr	r3, [r7, #12]
 8066b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066b4c:	68fb      	ldr	r3, [r7, #12]
 8066b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066b50:	b29b      	uxth	r3, r3
 8066b52:	3b01      	subs	r3, #1
 8066b54:	b29a      	uxth	r2, r3
 8066b56:	68fb      	ldr	r3, [r7, #12]
 8066b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066b5a:	68fb      	ldr	r3, [r7, #12]
 8066b5c:	681b      	ldr	r3, [r3, #0]
 8066b5e:	691a      	ldr	r2, [r3, #16]
 8066b60:	68fb      	ldr	r3, [r7, #12]
 8066b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066b64:	b2d2      	uxtb	r2, r2
 8066b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066b68:	68fb      	ldr	r3, [r7, #12]
 8066b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066b6c:	1c5a      	adds	r2, r3, #1
 8066b6e:	68fb      	ldr	r3, [r7, #12]
 8066b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066b72:	68fb      	ldr	r3, [r7, #12]
 8066b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066b76:	3b01      	subs	r3, #1
 8066b78:	b29a      	uxth	r2, r3
 8066b7a:	68fb      	ldr	r3, [r7, #12]
 8066b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066b7e:	68fb      	ldr	r3, [r7, #12]
 8066b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066b82:	b29b      	uxth	r3, r3
 8066b84:	3b01      	subs	r3, #1
 8066b86:	b29a      	uxth	r2, r3
 8066b88:	68fb      	ldr	r3, [r7, #12]
 8066b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8066b8c:	e042      	b.n	8066c14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066b90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8066b92:	68f8      	ldr	r0, [r7, #12]
 8066b94:	f000 fc98 	bl	80674c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8066b98:	4603      	mov	r3, r0
 8066b9a:	2b00      	cmp	r3, #0
 8066b9c:	d001      	beq.n	8066ba2 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8066b9e:	2301      	movs	r3, #1
 8066ba0:	e04c      	b.n	8066c3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066ba2:	68fb      	ldr	r3, [r7, #12]
 8066ba4:	681b      	ldr	r3, [r3, #0]
 8066ba6:	691a      	ldr	r2, [r3, #16]
 8066ba8:	68fb      	ldr	r3, [r7, #12]
 8066baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066bac:	b2d2      	uxtb	r2, r2
 8066bae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8066bb0:	68fb      	ldr	r3, [r7, #12]
 8066bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066bb4:	1c5a      	adds	r2, r3, #1
 8066bb6:	68fb      	ldr	r3, [r7, #12]
 8066bb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8066bba:	68fb      	ldr	r3, [r7, #12]
 8066bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066bbe:	3b01      	subs	r3, #1
 8066bc0:	b29a      	uxth	r2, r3
 8066bc2:	68fb      	ldr	r3, [r7, #12]
 8066bc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8066bc6:	68fb      	ldr	r3, [r7, #12]
 8066bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066bca:	b29b      	uxth	r3, r3
 8066bcc:	3b01      	subs	r3, #1
 8066bce:	b29a      	uxth	r2, r3
 8066bd0:	68fb      	ldr	r3, [r7, #12]
 8066bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8066bd4:	68fb      	ldr	r3, [r7, #12]
 8066bd6:	681b      	ldr	r3, [r3, #0]
 8066bd8:	695b      	ldr	r3, [r3, #20]
 8066bda:	f003 0304 	and.w	r3, r3, #4
 8066bde:	2b04      	cmp	r3, #4
 8066be0:	d118      	bne.n	8066c14 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066be2:	68fb      	ldr	r3, [r7, #12]
 8066be4:	681b      	ldr	r3, [r3, #0]
 8066be6:	691a      	ldr	r2, [r3, #16]
 8066be8:	68fb      	ldr	r3, [r7, #12]
 8066bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066bec:	b2d2      	uxtb	r2, r2
 8066bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066bf0:	68fb      	ldr	r3, [r7, #12]
 8066bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066bf4:	1c5a      	adds	r2, r3, #1
 8066bf6:	68fb      	ldr	r3, [r7, #12]
 8066bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066bfa:	68fb      	ldr	r3, [r7, #12]
 8066bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066bfe:	3b01      	subs	r3, #1
 8066c00:	b29a      	uxth	r2, r3
 8066c02:	68fb      	ldr	r3, [r7, #12]
 8066c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066c06:	68fb      	ldr	r3, [r7, #12]
 8066c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066c0a:	b29b      	uxth	r3, r3
 8066c0c:	3b01      	subs	r3, #1
 8066c0e:	b29a      	uxth	r2, r3
 8066c10:	68fb      	ldr	r3, [r7, #12]
 8066c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8066c14:	68fb      	ldr	r3, [r7, #12]
 8066c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066c18:	2b00      	cmp	r3, #0
 8066c1a:	f47f aec1 	bne.w	80669a0 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8066c1e:	68fb      	ldr	r3, [r7, #12]
 8066c20:	2220      	movs	r2, #32
 8066c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8066c26:	68fb      	ldr	r3, [r7, #12]
 8066c28:	2200      	movs	r2, #0
 8066c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8066c2e:	68fb      	ldr	r3, [r7, #12]
 8066c30:	2200      	movs	r2, #0
 8066c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8066c36:	2300      	movs	r3, #0
 8066c38:	e000      	b.n	8066c3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8066c3a:	2302      	movs	r3, #2
  }
}
 8066c3c:	4618      	mov	r0, r3
 8066c3e:	3728      	adds	r7, #40	; 0x28
 8066c40:	46bd      	mov	sp, r7
 8066c42:	bd80      	pop	{r7, pc}
 8066c44:	00010004 	.word	0x00010004

08066c48 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8066c48:	b480      	push	{r7}
 8066c4a:	b083      	sub	sp, #12
 8066c4c:	af00      	add	r7, sp, #0
 8066c4e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8066c50:	687b      	ldr	r3, [r7, #4]
 8066c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8066c56:	b2db      	uxtb	r3, r3
}
 8066c58:	4618      	mov	r0, r3
 8066c5a:	370c      	adds	r7, #12
 8066c5c:	46bd      	mov	sp, r7
 8066c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066c62:	4770      	bx	lr

08066c64 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8066c64:	b480      	push	{r7}
 8066c66:	b083      	sub	sp, #12
 8066c68:	af00      	add	r7, sp, #0
 8066c6a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8066c6c:	687b      	ldr	r3, [r7, #4]
 8066c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8066c70:	4618      	mov	r0, r3
 8066c72:	370c      	adds	r7, #12
 8066c74:	46bd      	mov	sp, r7
 8066c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066c7a:	4770      	bx	lr

08066c7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8066c7c:	b580      	push	{r7, lr}
 8066c7e:	b088      	sub	sp, #32
 8066c80:	af02      	add	r7, sp, #8
 8066c82:	60f8      	str	r0, [r7, #12]
 8066c84:	607a      	str	r2, [r7, #4]
 8066c86:	603b      	str	r3, [r7, #0]
 8066c88:	460b      	mov	r3, r1
 8066c8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8066c8c:	68fb      	ldr	r3, [r7, #12]
 8066c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8066c90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8066c92:	697b      	ldr	r3, [r7, #20]
 8066c94:	2b08      	cmp	r3, #8
 8066c96:	d006      	beq.n	8066ca6 <I2C_MasterRequestWrite+0x2a>
 8066c98:	697b      	ldr	r3, [r7, #20]
 8066c9a:	2b01      	cmp	r3, #1
 8066c9c:	d003      	beq.n	8066ca6 <I2C_MasterRequestWrite+0x2a>
 8066c9e:	697b      	ldr	r3, [r7, #20]
 8066ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8066ca4:	d108      	bne.n	8066cb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066ca6:	68fb      	ldr	r3, [r7, #12]
 8066ca8:	681b      	ldr	r3, [r3, #0]
 8066caa:	681a      	ldr	r2, [r3, #0]
 8066cac:	68fb      	ldr	r3, [r7, #12]
 8066cae:	681b      	ldr	r3, [r3, #0]
 8066cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066cb4:	601a      	str	r2, [r3, #0]
 8066cb6:	e00b      	b.n	8066cd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8066cb8:	68fb      	ldr	r3, [r7, #12]
 8066cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8066cbc:	2b12      	cmp	r3, #18
 8066cbe:	d107      	bne.n	8066cd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066cc0:	68fb      	ldr	r3, [r7, #12]
 8066cc2:	681b      	ldr	r3, [r3, #0]
 8066cc4:	681a      	ldr	r2, [r3, #0]
 8066cc6:	68fb      	ldr	r3, [r7, #12]
 8066cc8:	681b      	ldr	r3, [r3, #0]
 8066cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066cce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066cd0:	683b      	ldr	r3, [r7, #0]
 8066cd2:	9300      	str	r3, [sp, #0]
 8066cd4:	687b      	ldr	r3, [r7, #4]
 8066cd6:	2200      	movs	r2, #0
 8066cd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066cdc:	68f8      	ldr	r0, [r7, #12]
 8066cde:	f000 fa9b 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8066ce2:	4603      	mov	r3, r0
 8066ce4:	2b00      	cmp	r3, #0
 8066ce6:	d00d      	beq.n	8066d04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066ce8:	68fb      	ldr	r3, [r7, #12]
 8066cea:	681b      	ldr	r3, [r3, #0]
 8066cec:	681b      	ldr	r3, [r3, #0]
 8066cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066cf6:	d103      	bne.n	8066d00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066cf8:	68fb      	ldr	r3, [r7, #12]
 8066cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066cfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066d00:	2303      	movs	r3, #3
 8066d02:	e035      	b.n	8066d70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8066d04:	68fb      	ldr	r3, [r7, #12]
 8066d06:	691b      	ldr	r3, [r3, #16]
 8066d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8066d0c:	d108      	bne.n	8066d20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8066d0e:	897b      	ldrh	r3, [r7, #10]
 8066d10:	b2db      	uxtb	r3, r3
 8066d12:	461a      	mov	r2, r3
 8066d14:	68fb      	ldr	r3, [r7, #12]
 8066d16:	681b      	ldr	r3, [r3, #0]
 8066d18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8066d1c:	611a      	str	r2, [r3, #16]
 8066d1e:	e01b      	b.n	8066d58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8066d20:	897b      	ldrh	r3, [r7, #10]
 8066d22:	11db      	asrs	r3, r3, #7
 8066d24:	b2db      	uxtb	r3, r3
 8066d26:	f003 0306 	and.w	r3, r3, #6
 8066d2a:	b2db      	uxtb	r3, r3
 8066d2c:	f063 030f 	orn	r3, r3, #15
 8066d30:	b2da      	uxtb	r2, r3
 8066d32:	68fb      	ldr	r3, [r7, #12]
 8066d34:	681b      	ldr	r3, [r3, #0]
 8066d36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8066d38:	683b      	ldr	r3, [r7, #0]
 8066d3a:	687a      	ldr	r2, [r7, #4]
 8066d3c:	490e      	ldr	r1, [pc, #56]	; (8066d78 <I2C_MasterRequestWrite+0xfc>)
 8066d3e:	68f8      	ldr	r0, [r7, #12]
 8066d40:	f000 fac1 	bl	80672c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066d44:	4603      	mov	r3, r0
 8066d46:	2b00      	cmp	r3, #0
 8066d48:	d001      	beq.n	8066d4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8066d4a:	2301      	movs	r3, #1
 8066d4c:	e010      	b.n	8066d70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8066d4e:	897b      	ldrh	r3, [r7, #10]
 8066d50:	b2da      	uxtb	r2, r3
 8066d52:	68fb      	ldr	r3, [r7, #12]
 8066d54:	681b      	ldr	r3, [r3, #0]
 8066d56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066d58:	683b      	ldr	r3, [r7, #0]
 8066d5a:	687a      	ldr	r2, [r7, #4]
 8066d5c:	4907      	ldr	r1, [pc, #28]	; (8066d7c <I2C_MasterRequestWrite+0x100>)
 8066d5e:	68f8      	ldr	r0, [r7, #12]
 8066d60:	f000 fab1 	bl	80672c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066d64:	4603      	mov	r3, r0
 8066d66:	2b00      	cmp	r3, #0
 8066d68:	d001      	beq.n	8066d6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8066d6a:	2301      	movs	r3, #1
 8066d6c:	e000      	b.n	8066d70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8066d6e:	2300      	movs	r3, #0
}
 8066d70:	4618      	mov	r0, r3
 8066d72:	3718      	adds	r7, #24
 8066d74:	46bd      	mov	sp, r7
 8066d76:	bd80      	pop	{r7, pc}
 8066d78:	00010008 	.word	0x00010008
 8066d7c:	00010002 	.word	0x00010002

08066d80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8066d80:	b580      	push	{r7, lr}
 8066d82:	b088      	sub	sp, #32
 8066d84:	af02      	add	r7, sp, #8
 8066d86:	60f8      	str	r0, [r7, #12]
 8066d88:	607a      	str	r2, [r7, #4]
 8066d8a:	603b      	str	r3, [r7, #0]
 8066d8c:	460b      	mov	r3, r1
 8066d8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8066d90:	68fb      	ldr	r3, [r7, #12]
 8066d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8066d94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066d96:	68fb      	ldr	r3, [r7, #12]
 8066d98:	681b      	ldr	r3, [r3, #0]
 8066d9a:	681a      	ldr	r2, [r3, #0]
 8066d9c:	68fb      	ldr	r3, [r7, #12]
 8066d9e:	681b      	ldr	r3, [r3, #0]
 8066da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8066da4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8066da6:	697b      	ldr	r3, [r7, #20]
 8066da8:	2b08      	cmp	r3, #8
 8066daa:	d006      	beq.n	8066dba <I2C_MasterRequestRead+0x3a>
 8066dac:	697b      	ldr	r3, [r7, #20]
 8066dae:	2b01      	cmp	r3, #1
 8066db0:	d003      	beq.n	8066dba <I2C_MasterRequestRead+0x3a>
 8066db2:	697b      	ldr	r3, [r7, #20]
 8066db4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8066db8:	d108      	bne.n	8066dcc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066dba:	68fb      	ldr	r3, [r7, #12]
 8066dbc:	681b      	ldr	r3, [r3, #0]
 8066dbe:	681a      	ldr	r2, [r3, #0]
 8066dc0:	68fb      	ldr	r3, [r7, #12]
 8066dc2:	681b      	ldr	r3, [r3, #0]
 8066dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066dc8:	601a      	str	r2, [r3, #0]
 8066dca:	e00b      	b.n	8066de4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8066dcc:	68fb      	ldr	r3, [r7, #12]
 8066dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8066dd0:	2b11      	cmp	r3, #17
 8066dd2:	d107      	bne.n	8066de4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066dd4:	68fb      	ldr	r3, [r7, #12]
 8066dd6:	681b      	ldr	r3, [r3, #0]
 8066dd8:	681a      	ldr	r2, [r3, #0]
 8066dda:	68fb      	ldr	r3, [r7, #12]
 8066ddc:	681b      	ldr	r3, [r3, #0]
 8066dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066de2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066de4:	683b      	ldr	r3, [r7, #0]
 8066de6:	9300      	str	r3, [sp, #0]
 8066de8:	687b      	ldr	r3, [r7, #4]
 8066dea:	2200      	movs	r2, #0
 8066dec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066df0:	68f8      	ldr	r0, [r7, #12]
 8066df2:	f000 fa11 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8066df6:	4603      	mov	r3, r0
 8066df8:	2b00      	cmp	r3, #0
 8066dfa:	d00d      	beq.n	8066e18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066dfc:	68fb      	ldr	r3, [r7, #12]
 8066dfe:	681b      	ldr	r3, [r3, #0]
 8066e00:	681b      	ldr	r3, [r3, #0]
 8066e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066e0a:	d103      	bne.n	8066e14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066e0c:	68fb      	ldr	r3, [r7, #12]
 8066e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066e12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066e14:	2303      	movs	r3, #3
 8066e16:	e079      	b.n	8066f0c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8066e18:	68fb      	ldr	r3, [r7, #12]
 8066e1a:	691b      	ldr	r3, [r3, #16]
 8066e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8066e20:	d108      	bne.n	8066e34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8066e22:	897b      	ldrh	r3, [r7, #10]
 8066e24:	b2db      	uxtb	r3, r3
 8066e26:	f043 0301 	orr.w	r3, r3, #1
 8066e2a:	b2da      	uxtb	r2, r3
 8066e2c:	68fb      	ldr	r3, [r7, #12]
 8066e2e:	681b      	ldr	r3, [r3, #0]
 8066e30:	611a      	str	r2, [r3, #16]
 8066e32:	e05f      	b.n	8066ef4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8066e34:	897b      	ldrh	r3, [r7, #10]
 8066e36:	11db      	asrs	r3, r3, #7
 8066e38:	b2db      	uxtb	r3, r3
 8066e3a:	f003 0306 	and.w	r3, r3, #6
 8066e3e:	b2db      	uxtb	r3, r3
 8066e40:	f063 030f 	orn	r3, r3, #15
 8066e44:	b2da      	uxtb	r2, r3
 8066e46:	68fb      	ldr	r3, [r7, #12]
 8066e48:	681b      	ldr	r3, [r3, #0]
 8066e4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8066e4c:	683b      	ldr	r3, [r7, #0]
 8066e4e:	687a      	ldr	r2, [r7, #4]
 8066e50:	4930      	ldr	r1, [pc, #192]	; (8066f14 <I2C_MasterRequestRead+0x194>)
 8066e52:	68f8      	ldr	r0, [r7, #12]
 8066e54:	f000 fa37 	bl	80672c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066e58:	4603      	mov	r3, r0
 8066e5a:	2b00      	cmp	r3, #0
 8066e5c:	d001      	beq.n	8066e62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8066e5e:	2301      	movs	r3, #1
 8066e60:	e054      	b.n	8066f0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8066e62:	897b      	ldrh	r3, [r7, #10]
 8066e64:	b2da      	uxtb	r2, r3
 8066e66:	68fb      	ldr	r3, [r7, #12]
 8066e68:	681b      	ldr	r3, [r3, #0]
 8066e6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066e6c:	683b      	ldr	r3, [r7, #0]
 8066e6e:	687a      	ldr	r2, [r7, #4]
 8066e70:	4929      	ldr	r1, [pc, #164]	; (8066f18 <I2C_MasterRequestRead+0x198>)
 8066e72:	68f8      	ldr	r0, [r7, #12]
 8066e74:	f000 fa27 	bl	80672c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066e78:	4603      	mov	r3, r0
 8066e7a:	2b00      	cmp	r3, #0
 8066e7c:	d001      	beq.n	8066e82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8066e7e:	2301      	movs	r3, #1
 8066e80:	e044      	b.n	8066f0c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066e82:	2300      	movs	r3, #0
 8066e84:	613b      	str	r3, [r7, #16]
 8066e86:	68fb      	ldr	r3, [r7, #12]
 8066e88:	681b      	ldr	r3, [r3, #0]
 8066e8a:	695b      	ldr	r3, [r3, #20]
 8066e8c:	613b      	str	r3, [r7, #16]
 8066e8e:	68fb      	ldr	r3, [r7, #12]
 8066e90:	681b      	ldr	r3, [r3, #0]
 8066e92:	699b      	ldr	r3, [r3, #24]
 8066e94:	613b      	str	r3, [r7, #16]
 8066e96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066e98:	68fb      	ldr	r3, [r7, #12]
 8066e9a:	681b      	ldr	r3, [r3, #0]
 8066e9c:	681a      	ldr	r2, [r3, #0]
 8066e9e:	68fb      	ldr	r3, [r7, #12]
 8066ea0:	681b      	ldr	r3, [r3, #0]
 8066ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066ea6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066ea8:	683b      	ldr	r3, [r7, #0]
 8066eaa:	9300      	str	r3, [sp, #0]
 8066eac:	687b      	ldr	r3, [r7, #4]
 8066eae:	2200      	movs	r2, #0
 8066eb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066eb4:	68f8      	ldr	r0, [r7, #12]
 8066eb6:	f000 f9af 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8066eba:	4603      	mov	r3, r0
 8066ebc:	2b00      	cmp	r3, #0
 8066ebe:	d00d      	beq.n	8066edc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066ec0:	68fb      	ldr	r3, [r7, #12]
 8066ec2:	681b      	ldr	r3, [r3, #0]
 8066ec4:	681b      	ldr	r3, [r3, #0]
 8066ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066ece:	d103      	bne.n	8066ed8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066ed0:	68fb      	ldr	r3, [r7, #12]
 8066ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066ed6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8066ed8:	2303      	movs	r3, #3
 8066eda:	e017      	b.n	8066f0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8066edc:	897b      	ldrh	r3, [r7, #10]
 8066ede:	11db      	asrs	r3, r3, #7
 8066ee0:	b2db      	uxtb	r3, r3
 8066ee2:	f003 0306 	and.w	r3, r3, #6
 8066ee6:	b2db      	uxtb	r3, r3
 8066ee8:	f063 030e 	orn	r3, r3, #14
 8066eec:	b2da      	uxtb	r2, r3
 8066eee:	68fb      	ldr	r3, [r7, #12]
 8066ef0:	681b      	ldr	r3, [r3, #0]
 8066ef2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066ef4:	683b      	ldr	r3, [r7, #0]
 8066ef6:	687a      	ldr	r2, [r7, #4]
 8066ef8:	4907      	ldr	r1, [pc, #28]	; (8066f18 <I2C_MasterRequestRead+0x198>)
 8066efa:	68f8      	ldr	r0, [r7, #12]
 8066efc:	f000 f9e3 	bl	80672c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066f00:	4603      	mov	r3, r0
 8066f02:	2b00      	cmp	r3, #0
 8066f04:	d001      	beq.n	8066f0a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8066f06:	2301      	movs	r3, #1
 8066f08:	e000      	b.n	8066f0c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8066f0a:	2300      	movs	r3, #0
}
 8066f0c:	4618      	mov	r0, r3
 8066f0e:	3718      	adds	r7, #24
 8066f10:	46bd      	mov	sp, r7
 8066f12:	bd80      	pop	{r7, pc}
 8066f14:	00010008 	.word	0x00010008
 8066f18:	00010002 	.word	0x00010002

08066f1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8066f1c:	b580      	push	{r7, lr}
 8066f1e:	b088      	sub	sp, #32
 8066f20:	af02      	add	r7, sp, #8
 8066f22:	60f8      	str	r0, [r7, #12]
 8066f24:	4608      	mov	r0, r1
 8066f26:	4611      	mov	r1, r2
 8066f28:	461a      	mov	r2, r3
 8066f2a:	4603      	mov	r3, r0
 8066f2c:	817b      	strh	r3, [r7, #10]
 8066f2e:	460b      	mov	r3, r1
 8066f30:	813b      	strh	r3, [r7, #8]
 8066f32:	4613      	mov	r3, r2
 8066f34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066f36:	68fb      	ldr	r3, [r7, #12]
 8066f38:	681b      	ldr	r3, [r3, #0]
 8066f3a:	681a      	ldr	r2, [r3, #0]
 8066f3c:	68fb      	ldr	r3, [r7, #12]
 8066f3e:	681b      	ldr	r3, [r3, #0]
 8066f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066f44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066f48:	9300      	str	r3, [sp, #0]
 8066f4a:	6a3b      	ldr	r3, [r7, #32]
 8066f4c:	2200      	movs	r2, #0
 8066f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066f52:	68f8      	ldr	r0, [r7, #12]
 8066f54:	f000 f960 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8066f58:	4603      	mov	r3, r0
 8066f5a:	2b00      	cmp	r3, #0
 8066f5c:	d00d      	beq.n	8066f7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066f5e:	68fb      	ldr	r3, [r7, #12]
 8066f60:	681b      	ldr	r3, [r3, #0]
 8066f62:	681b      	ldr	r3, [r3, #0]
 8066f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066f6c:	d103      	bne.n	8066f76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066f6e:	68fb      	ldr	r3, [r7, #12]
 8066f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066f74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066f76:	2303      	movs	r3, #3
 8066f78:	e05f      	b.n	806703a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8066f7a:	897b      	ldrh	r3, [r7, #10]
 8066f7c:	b2db      	uxtb	r3, r3
 8066f7e:	461a      	mov	r2, r3
 8066f80:	68fb      	ldr	r3, [r7, #12]
 8066f82:	681b      	ldr	r3, [r3, #0]
 8066f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8066f88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066f8c:	6a3a      	ldr	r2, [r7, #32]
 8066f8e:	492d      	ldr	r1, [pc, #180]	; (8067044 <I2C_RequestMemoryWrite+0x128>)
 8066f90:	68f8      	ldr	r0, [r7, #12]
 8066f92:	f000 f998 	bl	80672c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066f96:	4603      	mov	r3, r0
 8066f98:	2b00      	cmp	r3, #0
 8066f9a:	d001      	beq.n	8066fa0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8066f9c:	2301      	movs	r3, #1
 8066f9e:	e04c      	b.n	806703a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066fa0:	2300      	movs	r3, #0
 8066fa2:	617b      	str	r3, [r7, #20]
 8066fa4:	68fb      	ldr	r3, [r7, #12]
 8066fa6:	681b      	ldr	r3, [r3, #0]
 8066fa8:	695b      	ldr	r3, [r3, #20]
 8066faa:	617b      	str	r3, [r7, #20]
 8066fac:	68fb      	ldr	r3, [r7, #12]
 8066fae:	681b      	ldr	r3, [r3, #0]
 8066fb0:	699b      	ldr	r3, [r3, #24]
 8066fb2:	617b      	str	r3, [r7, #20]
 8066fb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8066fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066fb8:	6a39      	ldr	r1, [r7, #32]
 8066fba:	68f8      	ldr	r0, [r7, #12]
 8066fbc:	f000 fa02 	bl	80673c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8066fc0:	4603      	mov	r3, r0
 8066fc2:	2b00      	cmp	r3, #0
 8066fc4:	d00d      	beq.n	8066fe2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066fc6:	68fb      	ldr	r3, [r7, #12]
 8066fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8066fca:	2b04      	cmp	r3, #4
 8066fcc:	d107      	bne.n	8066fde <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066fce:	68fb      	ldr	r3, [r7, #12]
 8066fd0:	681b      	ldr	r3, [r3, #0]
 8066fd2:	681a      	ldr	r2, [r3, #0]
 8066fd4:	68fb      	ldr	r3, [r7, #12]
 8066fd6:	681b      	ldr	r3, [r3, #0]
 8066fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066fdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8066fde:	2301      	movs	r3, #1
 8066fe0:	e02b      	b.n	806703a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8066fe2:	88fb      	ldrh	r3, [r7, #6]
 8066fe4:	2b01      	cmp	r3, #1
 8066fe6:	d105      	bne.n	8066ff4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8066fe8:	893b      	ldrh	r3, [r7, #8]
 8066fea:	b2da      	uxtb	r2, r3
 8066fec:	68fb      	ldr	r3, [r7, #12]
 8066fee:	681b      	ldr	r3, [r3, #0]
 8066ff0:	611a      	str	r2, [r3, #16]
 8066ff2:	e021      	b.n	8067038 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8066ff4:	893b      	ldrh	r3, [r7, #8]
 8066ff6:	0a1b      	lsrs	r3, r3, #8
 8066ff8:	b29b      	uxth	r3, r3
 8066ffa:	b2da      	uxtb	r2, r3
 8066ffc:	68fb      	ldr	r3, [r7, #12]
 8066ffe:	681b      	ldr	r3, [r3, #0]
 8067000:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8067002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8067004:	6a39      	ldr	r1, [r7, #32]
 8067006:	68f8      	ldr	r0, [r7, #12]
 8067008:	f000 f9dc 	bl	80673c4 <I2C_WaitOnTXEFlagUntilTimeout>
 806700c:	4603      	mov	r3, r0
 806700e:	2b00      	cmp	r3, #0
 8067010:	d00d      	beq.n	806702e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8067012:	68fb      	ldr	r3, [r7, #12]
 8067014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067016:	2b04      	cmp	r3, #4
 8067018:	d107      	bne.n	806702a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806701a:	68fb      	ldr	r3, [r7, #12]
 806701c:	681b      	ldr	r3, [r3, #0]
 806701e:	681a      	ldr	r2, [r3, #0]
 8067020:	68fb      	ldr	r3, [r7, #12]
 8067022:	681b      	ldr	r3, [r3, #0]
 8067024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8067028:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 806702a:	2301      	movs	r3, #1
 806702c:	e005      	b.n	806703a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 806702e:	893b      	ldrh	r3, [r7, #8]
 8067030:	b2da      	uxtb	r2, r3
 8067032:	68fb      	ldr	r3, [r7, #12]
 8067034:	681b      	ldr	r3, [r3, #0]
 8067036:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8067038:	2300      	movs	r3, #0
}
 806703a:	4618      	mov	r0, r3
 806703c:	3718      	adds	r7, #24
 806703e:	46bd      	mov	sp, r7
 8067040:	bd80      	pop	{r7, pc}
 8067042:	bf00      	nop
 8067044:	00010002 	.word	0x00010002

08067048 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8067048:	b580      	push	{r7, lr}
 806704a:	b088      	sub	sp, #32
 806704c:	af02      	add	r7, sp, #8
 806704e:	60f8      	str	r0, [r7, #12]
 8067050:	4608      	mov	r0, r1
 8067052:	4611      	mov	r1, r2
 8067054:	461a      	mov	r2, r3
 8067056:	4603      	mov	r3, r0
 8067058:	817b      	strh	r3, [r7, #10]
 806705a:	460b      	mov	r3, r1
 806705c:	813b      	strh	r3, [r7, #8]
 806705e:	4613      	mov	r3, r2
 8067060:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8067062:	68fb      	ldr	r3, [r7, #12]
 8067064:	681b      	ldr	r3, [r3, #0]
 8067066:	681a      	ldr	r2, [r3, #0]
 8067068:	68fb      	ldr	r3, [r7, #12]
 806706a:	681b      	ldr	r3, [r3, #0]
 806706c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8067070:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8067072:	68fb      	ldr	r3, [r7, #12]
 8067074:	681b      	ldr	r3, [r3, #0]
 8067076:	681a      	ldr	r2, [r3, #0]
 8067078:	68fb      	ldr	r3, [r7, #12]
 806707a:	681b      	ldr	r3, [r3, #0]
 806707c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8067080:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8067082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8067084:	9300      	str	r3, [sp, #0]
 8067086:	6a3b      	ldr	r3, [r7, #32]
 8067088:	2200      	movs	r2, #0
 806708a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 806708e:	68f8      	ldr	r0, [r7, #12]
 8067090:	f000 f8c2 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 8067094:	4603      	mov	r3, r0
 8067096:	2b00      	cmp	r3, #0
 8067098:	d00d      	beq.n	80670b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 806709a:	68fb      	ldr	r3, [r7, #12]
 806709c:	681b      	ldr	r3, [r3, #0]
 806709e:	681b      	ldr	r3, [r3, #0]
 80670a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80670a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80670a8:	d103      	bne.n	80670b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80670aa:	68fb      	ldr	r3, [r7, #12]
 80670ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80670b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80670b2:	2303      	movs	r3, #3
 80670b4:	e0aa      	b.n	806720c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80670b6:	897b      	ldrh	r3, [r7, #10]
 80670b8:	b2db      	uxtb	r3, r3
 80670ba:	461a      	mov	r2, r3
 80670bc:	68fb      	ldr	r3, [r7, #12]
 80670be:	681b      	ldr	r3, [r3, #0]
 80670c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80670c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80670c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80670c8:	6a3a      	ldr	r2, [r7, #32]
 80670ca:	4952      	ldr	r1, [pc, #328]	; (8067214 <I2C_RequestMemoryRead+0x1cc>)
 80670cc:	68f8      	ldr	r0, [r7, #12]
 80670ce:	f000 f8fa 	bl	80672c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80670d2:	4603      	mov	r3, r0
 80670d4:	2b00      	cmp	r3, #0
 80670d6:	d001      	beq.n	80670dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80670d8:	2301      	movs	r3, #1
 80670da:	e097      	b.n	806720c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80670dc:	2300      	movs	r3, #0
 80670de:	617b      	str	r3, [r7, #20]
 80670e0:	68fb      	ldr	r3, [r7, #12]
 80670e2:	681b      	ldr	r3, [r3, #0]
 80670e4:	695b      	ldr	r3, [r3, #20]
 80670e6:	617b      	str	r3, [r7, #20]
 80670e8:	68fb      	ldr	r3, [r7, #12]
 80670ea:	681b      	ldr	r3, [r3, #0]
 80670ec:	699b      	ldr	r3, [r3, #24]
 80670ee:	617b      	str	r3, [r7, #20]
 80670f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80670f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80670f4:	6a39      	ldr	r1, [r7, #32]
 80670f6:	68f8      	ldr	r0, [r7, #12]
 80670f8:	f000 f964 	bl	80673c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80670fc:	4603      	mov	r3, r0
 80670fe:	2b00      	cmp	r3, #0
 8067100:	d00d      	beq.n	806711e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8067102:	68fb      	ldr	r3, [r7, #12]
 8067104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067106:	2b04      	cmp	r3, #4
 8067108:	d107      	bne.n	806711a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806710a:	68fb      	ldr	r3, [r7, #12]
 806710c:	681b      	ldr	r3, [r3, #0]
 806710e:	681a      	ldr	r2, [r3, #0]
 8067110:	68fb      	ldr	r3, [r7, #12]
 8067112:	681b      	ldr	r3, [r3, #0]
 8067114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8067118:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 806711a:	2301      	movs	r3, #1
 806711c:	e076      	b.n	806720c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 806711e:	88fb      	ldrh	r3, [r7, #6]
 8067120:	2b01      	cmp	r3, #1
 8067122:	d105      	bne.n	8067130 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8067124:	893b      	ldrh	r3, [r7, #8]
 8067126:	b2da      	uxtb	r2, r3
 8067128:	68fb      	ldr	r3, [r7, #12]
 806712a:	681b      	ldr	r3, [r3, #0]
 806712c:	611a      	str	r2, [r3, #16]
 806712e:	e021      	b.n	8067174 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8067130:	893b      	ldrh	r3, [r7, #8]
 8067132:	0a1b      	lsrs	r3, r3, #8
 8067134:	b29b      	uxth	r3, r3
 8067136:	b2da      	uxtb	r2, r3
 8067138:	68fb      	ldr	r3, [r7, #12]
 806713a:	681b      	ldr	r3, [r3, #0]
 806713c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 806713e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8067140:	6a39      	ldr	r1, [r7, #32]
 8067142:	68f8      	ldr	r0, [r7, #12]
 8067144:	f000 f93e 	bl	80673c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8067148:	4603      	mov	r3, r0
 806714a:	2b00      	cmp	r3, #0
 806714c:	d00d      	beq.n	806716a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 806714e:	68fb      	ldr	r3, [r7, #12]
 8067150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067152:	2b04      	cmp	r3, #4
 8067154:	d107      	bne.n	8067166 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8067156:	68fb      	ldr	r3, [r7, #12]
 8067158:	681b      	ldr	r3, [r3, #0]
 806715a:	681a      	ldr	r2, [r3, #0]
 806715c:	68fb      	ldr	r3, [r7, #12]
 806715e:	681b      	ldr	r3, [r3, #0]
 8067160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8067164:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8067166:	2301      	movs	r3, #1
 8067168:	e050      	b.n	806720c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 806716a:	893b      	ldrh	r3, [r7, #8]
 806716c:	b2da      	uxtb	r2, r3
 806716e:	68fb      	ldr	r3, [r7, #12]
 8067170:	681b      	ldr	r3, [r3, #0]
 8067172:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8067174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8067176:	6a39      	ldr	r1, [r7, #32]
 8067178:	68f8      	ldr	r0, [r7, #12]
 806717a:	f000 f923 	bl	80673c4 <I2C_WaitOnTXEFlagUntilTimeout>
 806717e:	4603      	mov	r3, r0
 8067180:	2b00      	cmp	r3, #0
 8067182:	d00d      	beq.n	80671a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8067184:	68fb      	ldr	r3, [r7, #12]
 8067186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067188:	2b04      	cmp	r3, #4
 806718a:	d107      	bne.n	806719c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 806718c:	68fb      	ldr	r3, [r7, #12]
 806718e:	681b      	ldr	r3, [r3, #0]
 8067190:	681a      	ldr	r2, [r3, #0]
 8067192:	68fb      	ldr	r3, [r7, #12]
 8067194:	681b      	ldr	r3, [r3, #0]
 8067196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806719a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 806719c:	2301      	movs	r3, #1
 806719e:	e035      	b.n	806720c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80671a0:	68fb      	ldr	r3, [r7, #12]
 80671a2:	681b      	ldr	r3, [r3, #0]
 80671a4:	681a      	ldr	r2, [r3, #0]
 80671a6:	68fb      	ldr	r3, [r7, #12]
 80671a8:	681b      	ldr	r3, [r3, #0]
 80671aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80671ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80671b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80671b2:	9300      	str	r3, [sp, #0]
 80671b4:	6a3b      	ldr	r3, [r7, #32]
 80671b6:	2200      	movs	r2, #0
 80671b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80671bc:	68f8      	ldr	r0, [r7, #12]
 80671be:	f000 f82b 	bl	8067218 <I2C_WaitOnFlagUntilTimeout>
 80671c2:	4603      	mov	r3, r0
 80671c4:	2b00      	cmp	r3, #0
 80671c6:	d00d      	beq.n	80671e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80671c8:	68fb      	ldr	r3, [r7, #12]
 80671ca:	681b      	ldr	r3, [r3, #0]
 80671cc:	681b      	ldr	r3, [r3, #0]
 80671ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80671d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80671d6:	d103      	bne.n	80671e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80671d8:	68fb      	ldr	r3, [r7, #12]
 80671da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80671de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80671e0:	2303      	movs	r3, #3
 80671e2:	e013      	b.n	806720c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80671e4:	897b      	ldrh	r3, [r7, #10]
 80671e6:	b2db      	uxtb	r3, r3
 80671e8:	f043 0301 	orr.w	r3, r3, #1
 80671ec:	b2da      	uxtb	r2, r3
 80671ee:	68fb      	ldr	r3, [r7, #12]
 80671f0:	681b      	ldr	r3, [r3, #0]
 80671f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80671f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80671f6:	6a3a      	ldr	r2, [r7, #32]
 80671f8:	4906      	ldr	r1, [pc, #24]	; (8067214 <I2C_RequestMemoryRead+0x1cc>)
 80671fa:	68f8      	ldr	r0, [r7, #12]
 80671fc:	f000 f863 	bl	80672c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8067200:	4603      	mov	r3, r0
 8067202:	2b00      	cmp	r3, #0
 8067204:	d001      	beq.n	806720a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8067206:	2301      	movs	r3, #1
 8067208:	e000      	b.n	806720c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 806720a:	2300      	movs	r3, #0
}
 806720c:	4618      	mov	r0, r3
 806720e:	3718      	adds	r7, #24
 8067210:	46bd      	mov	sp, r7
 8067212:	bd80      	pop	{r7, pc}
 8067214:	00010002 	.word	0x00010002

08067218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8067218:	b580      	push	{r7, lr}
 806721a:	b084      	sub	sp, #16
 806721c:	af00      	add	r7, sp, #0
 806721e:	60f8      	str	r0, [r7, #12]
 8067220:	60b9      	str	r1, [r7, #8]
 8067222:	603b      	str	r3, [r7, #0]
 8067224:	4613      	mov	r3, r2
 8067226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8067228:	e025      	b.n	8067276 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 806722a:	683b      	ldr	r3, [r7, #0]
 806722c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8067230:	d021      	beq.n	8067276 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8067232:	f7fc fc1f 	bl	8063a74 <HAL_GetTick>
 8067236:	4602      	mov	r2, r0
 8067238:	69bb      	ldr	r3, [r7, #24]
 806723a:	1ad3      	subs	r3, r2, r3
 806723c:	683a      	ldr	r2, [r7, #0]
 806723e:	429a      	cmp	r2, r3
 8067240:	d302      	bcc.n	8067248 <I2C_WaitOnFlagUntilTimeout+0x30>
 8067242:	683b      	ldr	r3, [r7, #0]
 8067244:	2b00      	cmp	r3, #0
 8067246:	d116      	bne.n	8067276 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8067248:	68fb      	ldr	r3, [r7, #12]
 806724a:	2200      	movs	r2, #0
 806724c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 806724e:	68fb      	ldr	r3, [r7, #12]
 8067250:	2220      	movs	r2, #32
 8067252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8067256:	68fb      	ldr	r3, [r7, #12]
 8067258:	2200      	movs	r2, #0
 806725a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 806725e:	68fb      	ldr	r3, [r7, #12]
 8067260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067262:	f043 0220 	orr.w	r2, r3, #32
 8067266:	68fb      	ldr	r3, [r7, #12]
 8067268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 806726a:	68fb      	ldr	r3, [r7, #12]
 806726c:	2200      	movs	r2, #0
 806726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8067272:	2301      	movs	r3, #1
 8067274:	e023      	b.n	80672be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8067276:	68bb      	ldr	r3, [r7, #8]
 8067278:	0c1b      	lsrs	r3, r3, #16
 806727a:	b2db      	uxtb	r3, r3
 806727c:	2b01      	cmp	r3, #1
 806727e:	d10d      	bne.n	806729c <I2C_WaitOnFlagUntilTimeout+0x84>
 8067280:	68fb      	ldr	r3, [r7, #12]
 8067282:	681b      	ldr	r3, [r3, #0]
 8067284:	695b      	ldr	r3, [r3, #20]
 8067286:	43da      	mvns	r2, r3
 8067288:	68bb      	ldr	r3, [r7, #8]
 806728a:	4013      	ands	r3, r2
 806728c:	b29b      	uxth	r3, r3
 806728e:	2b00      	cmp	r3, #0
 8067290:	bf0c      	ite	eq
 8067292:	2301      	moveq	r3, #1
 8067294:	2300      	movne	r3, #0
 8067296:	b2db      	uxtb	r3, r3
 8067298:	461a      	mov	r2, r3
 806729a:	e00c      	b.n	80672b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 806729c:	68fb      	ldr	r3, [r7, #12]
 806729e:	681b      	ldr	r3, [r3, #0]
 80672a0:	699b      	ldr	r3, [r3, #24]
 80672a2:	43da      	mvns	r2, r3
 80672a4:	68bb      	ldr	r3, [r7, #8]
 80672a6:	4013      	ands	r3, r2
 80672a8:	b29b      	uxth	r3, r3
 80672aa:	2b00      	cmp	r3, #0
 80672ac:	bf0c      	ite	eq
 80672ae:	2301      	moveq	r3, #1
 80672b0:	2300      	movne	r3, #0
 80672b2:	b2db      	uxtb	r3, r3
 80672b4:	461a      	mov	r2, r3
 80672b6:	79fb      	ldrb	r3, [r7, #7]
 80672b8:	429a      	cmp	r2, r3
 80672ba:	d0b6      	beq.n	806722a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80672bc:	2300      	movs	r3, #0
}
 80672be:	4618      	mov	r0, r3
 80672c0:	3710      	adds	r7, #16
 80672c2:	46bd      	mov	sp, r7
 80672c4:	bd80      	pop	{r7, pc}

080672c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80672c6:	b580      	push	{r7, lr}
 80672c8:	b084      	sub	sp, #16
 80672ca:	af00      	add	r7, sp, #0
 80672cc:	60f8      	str	r0, [r7, #12]
 80672ce:	60b9      	str	r1, [r7, #8]
 80672d0:	607a      	str	r2, [r7, #4]
 80672d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80672d4:	e051      	b.n	806737a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80672d6:	68fb      	ldr	r3, [r7, #12]
 80672d8:	681b      	ldr	r3, [r3, #0]
 80672da:	695b      	ldr	r3, [r3, #20]
 80672dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80672e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80672e4:	d123      	bne.n	806732e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80672e6:	68fb      	ldr	r3, [r7, #12]
 80672e8:	681b      	ldr	r3, [r3, #0]
 80672ea:	681a      	ldr	r2, [r3, #0]
 80672ec:	68fb      	ldr	r3, [r7, #12]
 80672ee:	681b      	ldr	r3, [r3, #0]
 80672f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80672f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80672f6:	68fb      	ldr	r3, [r7, #12]
 80672f8:	681b      	ldr	r3, [r3, #0]
 80672fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80672fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8067300:	68fb      	ldr	r3, [r7, #12]
 8067302:	2200      	movs	r2, #0
 8067304:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8067306:	68fb      	ldr	r3, [r7, #12]
 8067308:	2220      	movs	r2, #32
 806730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 806730e:	68fb      	ldr	r3, [r7, #12]
 8067310:	2200      	movs	r2, #0
 8067312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8067316:	68fb      	ldr	r3, [r7, #12]
 8067318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806731a:	f043 0204 	orr.w	r2, r3, #4
 806731e:	68fb      	ldr	r3, [r7, #12]
 8067320:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8067322:	68fb      	ldr	r3, [r7, #12]
 8067324:	2200      	movs	r2, #0
 8067326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 806732a:	2301      	movs	r3, #1
 806732c:	e046      	b.n	80673bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 806732e:	687b      	ldr	r3, [r7, #4]
 8067330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8067334:	d021      	beq.n	806737a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8067336:	f7fc fb9d 	bl	8063a74 <HAL_GetTick>
 806733a:	4602      	mov	r2, r0
 806733c:	683b      	ldr	r3, [r7, #0]
 806733e:	1ad3      	subs	r3, r2, r3
 8067340:	687a      	ldr	r2, [r7, #4]
 8067342:	429a      	cmp	r2, r3
 8067344:	d302      	bcc.n	806734c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8067346:	687b      	ldr	r3, [r7, #4]
 8067348:	2b00      	cmp	r3, #0
 806734a:	d116      	bne.n	806737a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 806734c:	68fb      	ldr	r3, [r7, #12]
 806734e:	2200      	movs	r2, #0
 8067350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8067352:	68fb      	ldr	r3, [r7, #12]
 8067354:	2220      	movs	r2, #32
 8067356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 806735a:	68fb      	ldr	r3, [r7, #12]
 806735c:	2200      	movs	r2, #0
 806735e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8067362:	68fb      	ldr	r3, [r7, #12]
 8067364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067366:	f043 0220 	orr.w	r2, r3, #32
 806736a:	68fb      	ldr	r3, [r7, #12]
 806736c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 806736e:	68fb      	ldr	r3, [r7, #12]
 8067370:	2200      	movs	r2, #0
 8067372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8067376:	2301      	movs	r3, #1
 8067378:	e020      	b.n	80673bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 806737a:	68bb      	ldr	r3, [r7, #8]
 806737c:	0c1b      	lsrs	r3, r3, #16
 806737e:	b2db      	uxtb	r3, r3
 8067380:	2b01      	cmp	r3, #1
 8067382:	d10c      	bne.n	806739e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8067384:	68fb      	ldr	r3, [r7, #12]
 8067386:	681b      	ldr	r3, [r3, #0]
 8067388:	695b      	ldr	r3, [r3, #20]
 806738a:	43da      	mvns	r2, r3
 806738c:	68bb      	ldr	r3, [r7, #8]
 806738e:	4013      	ands	r3, r2
 8067390:	b29b      	uxth	r3, r3
 8067392:	2b00      	cmp	r3, #0
 8067394:	bf14      	ite	ne
 8067396:	2301      	movne	r3, #1
 8067398:	2300      	moveq	r3, #0
 806739a:	b2db      	uxtb	r3, r3
 806739c:	e00b      	b.n	80673b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 806739e:	68fb      	ldr	r3, [r7, #12]
 80673a0:	681b      	ldr	r3, [r3, #0]
 80673a2:	699b      	ldr	r3, [r3, #24]
 80673a4:	43da      	mvns	r2, r3
 80673a6:	68bb      	ldr	r3, [r7, #8]
 80673a8:	4013      	ands	r3, r2
 80673aa:	b29b      	uxth	r3, r3
 80673ac:	2b00      	cmp	r3, #0
 80673ae:	bf14      	ite	ne
 80673b0:	2301      	movne	r3, #1
 80673b2:	2300      	moveq	r3, #0
 80673b4:	b2db      	uxtb	r3, r3
 80673b6:	2b00      	cmp	r3, #0
 80673b8:	d18d      	bne.n	80672d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80673ba:	2300      	movs	r3, #0
}
 80673bc:	4618      	mov	r0, r3
 80673be:	3710      	adds	r7, #16
 80673c0:	46bd      	mov	sp, r7
 80673c2:	bd80      	pop	{r7, pc}

080673c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80673c4:	b580      	push	{r7, lr}
 80673c6:	b084      	sub	sp, #16
 80673c8:	af00      	add	r7, sp, #0
 80673ca:	60f8      	str	r0, [r7, #12]
 80673cc:	60b9      	str	r1, [r7, #8]
 80673ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80673d0:	e02d      	b.n	806742e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80673d2:	68f8      	ldr	r0, [r7, #12]
 80673d4:	f000 f8ce 	bl	8067574 <I2C_IsAcknowledgeFailed>
 80673d8:	4603      	mov	r3, r0
 80673da:	2b00      	cmp	r3, #0
 80673dc:	d001      	beq.n	80673e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80673de:	2301      	movs	r3, #1
 80673e0:	e02d      	b.n	806743e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80673e2:	68bb      	ldr	r3, [r7, #8]
 80673e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80673e8:	d021      	beq.n	806742e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80673ea:	f7fc fb43 	bl	8063a74 <HAL_GetTick>
 80673ee:	4602      	mov	r2, r0
 80673f0:	687b      	ldr	r3, [r7, #4]
 80673f2:	1ad3      	subs	r3, r2, r3
 80673f4:	68ba      	ldr	r2, [r7, #8]
 80673f6:	429a      	cmp	r2, r3
 80673f8:	d302      	bcc.n	8067400 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80673fa:	68bb      	ldr	r3, [r7, #8]
 80673fc:	2b00      	cmp	r3, #0
 80673fe:	d116      	bne.n	806742e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8067400:	68fb      	ldr	r3, [r7, #12]
 8067402:	2200      	movs	r2, #0
 8067404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8067406:	68fb      	ldr	r3, [r7, #12]
 8067408:	2220      	movs	r2, #32
 806740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 806740e:	68fb      	ldr	r3, [r7, #12]
 8067410:	2200      	movs	r2, #0
 8067412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8067416:	68fb      	ldr	r3, [r7, #12]
 8067418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806741a:	f043 0220 	orr.w	r2, r3, #32
 806741e:	68fb      	ldr	r3, [r7, #12]
 8067420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8067422:	68fb      	ldr	r3, [r7, #12]
 8067424:	2200      	movs	r2, #0
 8067426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 806742a:	2301      	movs	r3, #1
 806742c:	e007      	b.n	806743e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 806742e:	68fb      	ldr	r3, [r7, #12]
 8067430:	681b      	ldr	r3, [r3, #0]
 8067432:	695b      	ldr	r3, [r3, #20]
 8067434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8067438:	2b80      	cmp	r3, #128	; 0x80
 806743a:	d1ca      	bne.n	80673d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 806743c:	2300      	movs	r3, #0
}
 806743e:	4618      	mov	r0, r3
 8067440:	3710      	adds	r7, #16
 8067442:	46bd      	mov	sp, r7
 8067444:	bd80      	pop	{r7, pc}

08067446 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8067446:	b580      	push	{r7, lr}
 8067448:	b084      	sub	sp, #16
 806744a:	af00      	add	r7, sp, #0
 806744c:	60f8      	str	r0, [r7, #12]
 806744e:	60b9      	str	r1, [r7, #8]
 8067450:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8067452:	e02d      	b.n	80674b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8067454:	68f8      	ldr	r0, [r7, #12]
 8067456:	f000 f88d 	bl	8067574 <I2C_IsAcknowledgeFailed>
 806745a:	4603      	mov	r3, r0
 806745c:	2b00      	cmp	r3, #0
 806745e:	d001      	beq.n	8067464 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8067460:	2301      	movs	r3, #1
 8067462:	e02d      	b.n	80674c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8067464:	68bb      	ldr	r3, [r7, #8]
 8067466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806746a:	d021      	beq.n	80674b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 806746c:	f7fc fb02 	bl	8063a74 <HAL_GetTick>
 8067470:	4602      	mov	r2, r0
 8067472:	687b      	ldr	r3, [r7, #4]
 8067474:	1ad3      	subs	r3, r2, r3
 8067476:	68ba      	ldr	r2, [r7, #8]
 8067478:	429a      	cmp	r2, r3
 806747a:	d302      	bcc.n	8067482 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 806747c:	68bb      	ldr	r3, [r7, #8]
 806747e:	2b00      	cmp	r3, #0
 8067480:	d116      	bne.n	80674b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8067482:	68fb      	ldr	r3, [r7, #12]
 8067484:	2200      	movs	r2, #0
 8067486:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8067488:	68fb      	ldr	r3, [r7, #12]
 806748a:	2220      	movs	r2, #32
 806748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8067490:	68fb      	ldr	r3, [r7, #12]
 8067492:	2200      	movs	r2, #0
 8067494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8067498:	68fb      	ldr	r3, [r7, #12]
 806749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806749c:	f043 0220 	orr.w	r2, r3, #32
 80674a0:	68fb      	ldr	r3, [r7, #12]
 80674a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80674a4:	68fb      	ldr	r3, [r7, #12]
 80674a6:	2200      	movs	r2, #0
 80674a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80674ac:	2301      	movs	r3, #1
 80674ae:	e007      	b.n	80674c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80674b0:	68fb      	ldr	r3, [r7, #12]
 80674b2:	681b      	ldr	r3, [r3, #0]
 80674b4:	695b      	ldr	r3, [r3, #20]
 80674b6:	f003 0304 	and.w	r3, r3, #4
 80674ba:	2b04      	cmp	r3, #4
 80674bc:	d1ca      	bne.n	8067454 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80674be:	2300      	movs	r3, #0
}
 80674c0:	4618      	mov	r0, r3
 80674c2:	3710      	adds	r7, #16
 80674c4:	46bd      	mov	sp, r7
 80674c6:	bd80      	pop	{r7, pc}

080674c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80674c8:	b580      	push	{r7, lr}
 80674ca:	b084      	sub	sp, #16
 80674cc:	af00      	add	r7, sp, #0
 80674ce:	60f8      	str	r0, [r7, #12]
 80674d0:	60b9      	str	r1, [r7, #8]
 80674d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80674d4:	e042      	b.n	806755c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80674d6:	68fb      	ldr	r3, [r7, #12]
 80674d8:	681b      	ldr	r3, [r3, #0]
 80674da:	695b      	ldr	r3, [r3, #20]
 80674dc:	f003 0310 	and.w	r3, r3, #16
 80674e0:	2b10      	cmp	r3, #16
 80674e2:	d119      	bne.n	8067518 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80674e4:	68fb      	ldr	r3, [r7, #12]
 80674e6:	681b      	ldr	r3, [r3, #0]
 80674e8:	f06f 0210 	mvn.w	r2, #16
 80674ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80674ee:	68fb      	ldr	r3, [r7, #12]
 80674f0:	2200      	movs	r2, #0
 80674f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80674f4:	68fb      	ldr	r3, [r7, #12]
 80674f6:	2220      	movs	r2, #32
 80674f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80674fc:	68fb      	ldr	r3, [r7, #12]
 80674fe:	2200      	movs	r2, #0
 8067500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8067504:	68fb      	ldr	r3, [r7, #12]
 8067506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8067508:	68fb      	ldr	r3, [r7, #12]
 806750a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 806750c:	68fb      	ldr	r3, [r7, #12]
 806750e:	2200      	movs	r2, #0
 8067510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8067514:	2301      	movs	r3, #1
 8067516:	e029      	b.n	806756c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8067518:	f7fc faac 	bl	8063a74 <HAL_GetTick>
 806751c:	4602      	mov	r2, r0
 806751e:	687b      	ldr	r3, [r7, #4]
 8067520:	1ad3      	subs	r3, r2, r3
 8067522:	68ba      	ldr	r2, [r7, #8]
 8067524:	429a      	cmp	r2, r3
 8067526:	d302      	bcc.n	806752e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8067528:	68bb      	ldr	r3, [r7, #8]
 806752a:	2b00      	cmp	r3, #0
 806752c:	d116      	bne.n	806755c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 806752e:	68fb      	ldr	r3, [r7, #12]
 8067530:	2200      	movs	r2, #0
 8067532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8067534:	68fb      	ldr	r3, [r7, #12]
 8067536:	2220      	movs	r2, #32
 8067538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 806753c:	68fb      	ldr	r3, [r7, #12]
 806753e:	2200      	movs	r2, #0
 8067540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8067544:	68fb      	ldr	r3, [r7, #12]
 8067546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067548:	f043 0220 	orr.w	r2, r3, #32
 806754c:	68fb      	ldr	r3, [r7, #12]
 806754e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8067550:	68fb      	ldr	r3, [r7, #12]
 8067552:	2200      	movs	r2, #0
 8067554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8067558:	2301      	movs	r3, #1
 806755a:	e007      	b.n	806756c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 806755c:	68fb      	ldr	r3, [r7, #12]
 806755e:	681b      	ldr	r3, [r3, #0]
 8067560:	695b      	ldr	r3, [r3, #20]
 8067562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8067566:	2b40      	cmp	r3, #64	; 0x40
 8067568:	d1b5      	bne.n	80674d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 806756a:	2300      	movs	r3, #0
}
 806756c:	4618      	mov	r0, r3
 806756e:	3710      	adds	r7, #16
 8067570:	46bd      	mov	sp, r7
 8067572:	bd80      	pop	{r7, pc}

08067574 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8067574:	b480      	push	{r7}
 8067576:	b083      	sub	sp, #12
 8067578:	af00      	add	r7, sp, #0
 806757a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 806757c:	687b      	ldr	r3, [r7, #4]
 806757e:	681b      	ldr	r3, [r3, #0]
 8067580:	695b      	ldr	r3, [r3, #20]
 8067582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8067586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 806758a:	d11b      	bne.n	80675c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 806758c:	687b      	ldr	r3, [r7, #4]
 806758e:	681b      	ldr	r3, [r3, #0]
 8067590:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8067594:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8067596:	687b      	ldr	r3, [r7, #4]
 8067598:	2200      	movs	r2, #0
 806759a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 806759c:	687b      	ldr	r3, [r7, #4]
 806759e:	2220      	movs	r2, #32
 80675a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80675a4:	687b      	ldr	r3, [r7, #4]
 80675a6:	2200      	movs	r2, #0
 80675a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80675ac:	687b      	ldr	r3, [r7, #4]
 80675ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80675b0:	f043 0204 	orr.w	r2, r3, #4
 80675b4:	687b      	ldr	r3, [r7, #4]
 80675b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80675b8:	687b      	ldr	r3, [r7, #4]
 80675ba:	2200      	movs	r2, #0
 80675bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80675c0:	2301      	movs	r3, #1
 80675c2:	e000      	b.n	80675c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80675c4:	2300      	movs	r3, #0
}
 80675c6:	4618      	mov	r0, r3
 80675c8:	370c      	adds	r7, #12
 80675ca:	46bd      	mov	sp, r7
 80675cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80675d0:	4770      	bx	lr
	...

080675d4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80675d4:	b480      	push	{r7}
 80675d6:	b083      	sub	sp, #12
 80675d8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80675da:	4b06      	ldr	r3, [pc, #24]	; (80675f4 <HAL_PWR_EnableBkUpAccess+0x20>)
 80675dc:	2201      	movs	r2, #1
 80675de:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80675e0:	4b05      	ldr	r3, [pc, #20]	; (80675f8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80675e2:	681b      	ldr	r3, [r3, #0]
 80675e4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80675e6:	687b      	ldr	r3, [r7, #4]
}
 80675e8:	bf00      	nop
 80675ea:	370c      	adds	r7, #12
 80675ec:	46bd      	mov	sp, r7
 80675ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80675f2:	4770      	bx	lr
 80675f4:	420e0020 	.word	0x420e0020
 80675f8:	40007000 	.word	0x40007000

080675fc <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80675fc:	b480      	push	{r7}
 80675fe:	b083      	sub	sp, #12
 8067600:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8067602:	4b06      	ldr	r3, [pc, #24]	; (806761c <HAL_PWR_DisableBkUpAccess+0x20>)
 8067604:	2200      	movs	r2, #0
 8067606:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8067608:	4b05      	ldr	r3, [pc, #20]	; (8067620 <HAL_PWR_DisableBkUpAccess+0x24>)
 806760a:	681b      	ldr	r3, [r3, #0]
 806760c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 806760e:	687b      	ldr	r3, [r7, #4]
}
 8067610:	bf00      	nop
 8067612:	370c      	adds	r7, #12
 8067614:	46bd      	mov	sp, r7
 8067616:	f85d 7b04 	ldr.w	r7, [sp], #4
 806761a:	4770      	bx	lr
 806761c:	420e0020 	.word	0x420e0020
 8067620:	40007000 	.word	0x40007000

08067624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8067624:	b580      	push	{r7, lr}
 8067626:	b086      	sub	sp, #24
 8067628:	af00      	add	r7, sp, #0
 806762a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 806762c:	687b      	ldr	r3, [r7, #4]
 806762e:	2b00      	cmp	r3, #0
 8067630:	d101      	bne.n	8067636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8067632:	2301      	movs	r3, #1
 8067634:	e316      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8067636:	687b      	ldr	r3, [r7, #4]
 8067638:	681b      	ldr	r3, [r3, #0]
 806763a:	2b0f      	cmp	r3, #15
 806763c:	d903      	bls.n	8067646 <HAL_RCC_OscConfig+0x22>
 806763e:	21e8      	movs	r1, #232	; 0xe8
 8067640:	48a3      	ldr	r0, [pc, #652]	; (80678d0 <HAL_RCC_OscConfig+0x2ac>)
 8067642:	f7fb fd4c 	bl	80630de <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8067646:	687b      	ldr	r3, [r7, #4]
 8067648:	681b      	ldr	r3, [r3, #0]
 806764a:	f003 0301 	and.w	r3, r3, #1
 806764e:	2b00      	cmp	r3, #0
 8067650:	f000 8088 	beq.w	8067764 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8067654:	687b      	ldr	r3, [r7, #4]
 8067656:	685b      	ldr	r3, [r3, #4]
 8067658:	2b00      	cmp	r3, #0
 806765a:	d00d      	beq.n	8067678 <HAL_RCC_OscConfig+0x54>
 806765c:	687b      	ldr	r3, [r7, #4]
 806765e:	685b      	ldr	r3, [r3, #4]
 8067660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8067664:	d008      	beq.n	8067678 <HAL_RCC_OscConfig+0x54>
 8067666:	687b      	ldr	r3, [r7, #4]
 8067668:	685b      	ldr	r3, [r3, #4]
 806766a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 806766e:	d003      	beq.n	8067678 <HAL_RCC_OscConfig+0x54>
 8067670:	21ed      	movs	r1, #237	; 0xed
 8067672:	4897      	ldr	r0, [pc, #604]	; (80678d0 <HAL_RCC_OscConfig+0x2ac>)
 8067674:	f7fb fd33 	bl	80630de <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8067678:	4b96      	ldr	r3, [pc, #600]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 806767a:	689b      	ldr	r3, [r3, #8]
 806767c:	f003 030c 	and.w	r3, r3, #12
 8067680:	2b04      	cmp	r3, #4
 8067682:	d00c      	beq.n	806769e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8067684:	4b93      	ldr	r3, [pc, #588]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 8067686:	689b      	ldr	r3, [r3, #8]
 8067688:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 806768c:	2b08      	cmp	r3, #8
 806768e:	d112      	bne.n	80676b6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8067690:	4b90      	ldr	r3, [pc, #576]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 8067692:	685b      	ldr	r3, [r3, #4]
 8067694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8067698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 806769c:	d10b      	bne.n	80676b6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 806769e:	4b8d      	ldr	r3, [pc, #564]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80676a0:	681b      	ldr	r3, [r3, #0]
 80676a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80676a6:	2b00      	cmp	r3, #0
 80676a8:	d05b      	beq.n	8067762 <HAL_RCC_OscConfig+0x13e>
 80676aa:	687b      	ldr	r3, [r7, #4]
 80676ac:	685b      	ldr	r3, [r3, #4]
 80676ae:	2b00      	cmp	r3, #0
 80676b0:	d157      	bne.n	8067762 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80676b2:	2301      	movs	r3, #1
 80676b4:	e2d6      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80676b6:	687b      	ldr	r3, [r7, #4]
 80676b8:	685b      	ldr	r3, [r3, #4]
 80676ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80676be:	d106      	bne.n	80676ce <HAL_RCC_OscConfig+0xaa>
 80676c0:	4b84      	ldr	r3, [pc, #528]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80676c2:	681b      	ldr	r3, [r3, #0]
 80676c4:	4a83      	ldr	r2, [pc, #524]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80676c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80676ca:	6013      	str	r3, [r2, #0]
 80676cc:	e01d      	b.n	806770a <HAL_RCC_OscConfig+0xe6>
 80676ce:	687b      	ldr	r3, [r7, #4]
 80676d0:	685b      	ldr	r3, [r3, #4]
 80676d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80676d6:	d10c      	bne.n	80676f2 <HAL_RCC_OscConfig+0xce>
 80676d8:	4b7e      	ldr	r3, [pc, #504]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80676da:	681b      	ldr	r3, [r3, #0]
 80676dc:	4a7d      	ldr	r2, [pc, #500]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80676de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80676e2:	6013      	str	r3, [r2, #0]
 80676e4:	4b7b      	ldr	r3, [pc, #492]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80676e6:	681b      	ldr	r3, [r3, #0]
 80676e8:	4a7a      	ldr	r2, [pc, #488]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80676ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80676ee:	6013      	str	r3, [r2, #0]
 80676f0:	e00b      	b.n	806770a <HAL_RCC_OscConfig+0xe6>
 80676f2:	4b78      	ldr	r3, [pc, #480]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80676f4:	681b      	ldr	r3, [r3, #0]
 80676f6:	4a77      	ldr	r2, [pc, #476]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80676f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80676fc:	6013      	str	r3, [r2, #0]
 80676fe:	4b75      	ldr	r3, [pc, #468]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 8067700:	681b      	ldr	r3, [r3, #0]
 8067702:	4a74      	ldr	r2, [pc, #464]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 8067704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8067708:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 806770a:	687b      	ldr	r3, [r7, #4]
 806770c:	685b      	ldr	r3, [r3, #4]
 806770e:	2b00      	cmp	r3, #0
 8067710:	d013      	beq.n	806773a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067712:	f7fc f9af 	bl	8063a74 <HAL_GetTick>
 8067716:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8067718:	e008      	b.n	806772c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 806771a:	f7fc f9ab 	bl	8063a74 <HAL_GetTick>
 806771e:	4602      	mov	r2, r0
 8067720:	693b      	ldr	r3, [r7, #16]
 8067722:	1ad3      	subs	r3, r2, r3
 8067724:	2b64      	cmp	r3, #100	; 0x64
 8067726:	d901      	bls.n	806772c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8067728:	2303      	movs	r3, #3
 806772a:	e29b      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 806772c:	4b69      	ldr	r3, [pc, #420]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 806772e:	681b      	ldr	r3, [r3, #0]
 8067730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8067734:	2b00      	cmp	r3, #0
 8067736:	d0f0      	beq.n	806771a <HAL_RCC_OscConfig+0xf6>
 8067738:	e014      	b.n	8067764 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 806773a:	f7fc f99b 	bl	8063a74 <HAL_GetTick>
 806773e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8067740:	e008      	b.n	8067754 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8067742:	f7fc f997 	bl	8063a74 <HAL_GetTick>
 8067746:	4602      	mov	r2, r0
 8067748:	693b      	ldr	r3, [r7, #16]
 806774a:	1ad3      	subs	r3, r2, r3
 806774c:	2b64      	cmp	r3, #100	; 0x64
 806774e:	d901      	bls.n	8067754 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8067750:	2303      	movs	r3, #3
 8067752:	e287      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8067754:	4b5f      	ldr	r3, [pc, #380]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 8067756:	681b      	ldr	r3, [r3, #0]
 8067758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 806775c:	2b00      	cmp	r3, #0
 806775e:	d1f0      	bne.n	8067742 <HAL_RCC_OscConfig+0x11e>
 8067760:	e000      	b.n	8067764 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8067762:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8067764:	687b      	ldr	r3, [r7, #4]
 8067766:	681b      	ldr	r3, [r3, #0]
 8067768:	f003 0302 	and.w	r3, r3, #2
 806776c:	2b00      	cmp	r3, #0
 806776e:	d079      	beq.n	8067864 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8067770:	687b      	ldr	r3, [r7, #4]
 8067772:	68db      	ldr	r3, [r3, #12]
 8067774:	2b00      	cmp	r3, #0
 8067776:	d008      	beq.n	806778a <HAL_RCC_OscConfig+0x166>
 8067778:	687b      	ldr	r3, [r7, #4]
 806777a:	68db      	ldr	r3, [r3, #12]
 806777c:	2b01      	cmp	r3, #1
 806777e:	d004      	beq.n	806778a <HAL_RCC_OscConfig+0x166>
 8067780:	f240 111f 	movw	r1, #287	; 0x11f
 8067784:	4852      	ldr	r0, [pc, #328]	; (80678d0 <HAL_RCC_OscConfig+0x2ac>)
 8067786:	f7fb fcaa 	bl	80630de <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 806778a:	687b      	ldr	r3, [r7, #4]
 806778c:	691b      	ldr	r3, [r3, #16]
 806778e:	2b1f      	cmp	r3, #31
 8067790:	d904      	bls.n	806779c <HAL_RCC_OscConfig+0x178>
 8067792:	f44f 7190 	mov.w	r1, #288	; 0x120
 8067796:	484e      	ldr	r0, [pc, #312]	; (80678d0 <HAL_RCC_OscConfig+0x2ac>)
 8067798:	f7fb fca1 	bl	80630de <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 806779c:	4b4d      	ldr	r3, [pc, #308]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 806779e:	689b      	ldr	r3, [r3, #8]
 80677a0:	f003 030c 	and.w	r3, r3, #12
 80677a4:	2b00      	cmp	r3, #0
 80677a6:	d00b      	beq.n	80677c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80677a8:	4b4a      	ldr	r3, [pc, #296]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80677aa:	689b      	ldr	r3, [r3, #8]
 80677ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80677b0:	2b08      	cmp	r3, #8
 80677b2:	d11c      	bne.n	80677ee <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80677b4:	4b47      	ldr	r3, [pc, #284]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80677b6:	685b      	ldr	r3, [r3, #4]
 80677b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80677bc:	2b00      	cmp	r3, #0
 80677be:	d116      	bne.n	80677ee <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80677c0:	4b44      	ldr	r3, [pc, #272]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80677c2:	681b      	ldr	r3, [r3, #0]
 80677c4:	f003 0302 	and.w	r3, r3, #2
 80677c8:	2b00      	cmp	r3, #0
 80677ca:	d005      	beq.n	80677d8 <HAL_RCC_OscConfig+0x1b4>
 80677cc:	687b      	ldr	r3, [r7, #4]
 80677ce:	68db      	ldr	r3, [r3, #12]
 80677d0:	2b01      	cmp	r3, #1
 80677d2:	d001      	beq.n	80677d8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80677d4:	2301      	movs	r3, #1
 80677d6:	e245      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80677d8:	4b3e      	ldr	r3, [pc, #248]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80677da:	681b      	ldr	r3, [r3, #0]
 80677dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80677e0:	687b      	ldr	r3, [r7, #4]
 80677e2:	691b      	ldr	r3, [r3, #16]
 80677e4:	00db      	lsls	r3, r3, #3
 80677e6:	493b      	ldr	r1, [pc, #236]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80677e8:	4313      	orrs	r3, r2
 80677ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80677ec:	e03a      	b.n	8067864 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80677ee:	687b      	ldr	r3, [r7, #4]
 80677f0:	68db      	ldr	r3, [r3, #12]
 80677f2:	2b00      	cmp	r3, #0
 80677f4:	d020      	beq.n	8067838 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80677f6:	4b38      	ldr	r3, [pc, #224]	; (80678d8 <HAL_RCC_OscConfig+0x2b4>)
 80677f8:	2201      	movs	r2, #1
 80677fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80677fc:	f7fc f93a 	bl	8063a74 <HAL_GetTick>
 8067800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8067802:	e008      	b.n	8067816 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8067804:	f7fc f936 	bl	8063a74 <HAL_GetTick>
 8067808:	4602      	mov	r2, r0
 806780a:	693b      	ldr	r3, [r7, #16]
 806780c:	1ad3      	subs	r3, r2, r3
 806780e:	2b02      	cmp	r3, #2
 8067810:	d901      	bls.n	8067816 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8067812:	2303      	movs	r3, #3
 8067814:	e226      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8067816:	4b2f      	ldr	r3, [pc, #188]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 8067818:	681b      	ldr	r3, [r3, #0]
 806781a:	f003 0302 	and.w	r3, r3, #2
 806781e:	2b00      	cmp	r3, #0
 8067820:	d0f0      	beq.n	8067804 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8067822:	4b2c      	ldr	r3, [pc, #176]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 8067824:	681b      	ldr	r3, [r3, #0]
 8067826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 806782a:	687b      	ldr	r3, [r7, #4]
 806782c:	691b      	ldr	r3, [r3, #16]
 806782e:	00db      	lsls	r3, r3, #3
 8067830:	4928      	ldr	r1, [pc, #160]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 8067832:	4313      	orrs	r3, r2
 8067834:	600b      	str	r3, [r1, #0]
 8067836:	e015      	b.n	8067864 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8067838:	4b27      	ldr	r3, [pc, #156]	; (80678d8 <HAL_RCC_OscConfig+0x2b4>)
 806783a:	2200      	movs	r2, #0
 806783c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 806783e:	f7fc f919 	bl	8063a74 <HAL_GetTick>
 8067842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8067844:	e008      	b.n	8067858 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8067846:	f7fc f915 	bl	8063a74 <HAL_GetTick>
 806784a:	4602      	mov	r2, r0
 806784c:	693b      	ldr	r3, [r7, #16]
 806784e:	1ad3      	subs	r3, r2, r3
 8067850:	2b02      	cmp	r3, #2
 8067852:	d901      	bls.n	8067858 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8067854:	2303      	movs	r3, #3
 8067856:	e205      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8067858:	4b1e      	ldr	r3, [pc, #120]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 806785a:	681b      	ldr	r3, [r3, #0]
 806785c:	f003 0302 	and.w	r3, r3, #2
 8067860:	2b00      	cmp	r3, #0
 8067862:	d1f0      	bne.n	8067846 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8067864:	687b      	ldr	r3, [r7, #4]
 8067866:	681b      	ldr	r3, [r3, #0]
 8067868:	f003 0308 	and.w	r3, r3, #8
 806786c:	2b00      	cmp	r3, #0
 806786e:	d046      	beq.n	80678fe <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8067870:	687b      	ldr	r3, [r7, #4]
 8067872:	695b      	ldr	r3, [r3, #20]
 8067874:	2b00      	cmp	r3, #0
 8067876:	d008      	beq.n	806788a <HAL_RCC_OscConfig+0x266>
 8067878:	687b      	ldr	r3, [r7, #4]
 806787a:	695b      	ldr	r3, [r3, #20]
 806787c:	2b01      	cmp	r3, #1
 806787e:	d004      	beq.n	806788a <HAL_RCC_OscConfig+0x266>
 8067880:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8067884:	4812      	ldr	r0, [pc, #72]	; (80678d0 <HAL_RCC_OscConfig+0x2ac>)
 8067886:	f7fb fc2a 	bl	80630de <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 806788a:	687b      	ldr	r3, [r7, #4]
 806788c:	695b      	ldr	r3, [r3, #20]
 806788e:	2b00      	cmp	r3, #0
 8067890:	d016      	beq.n	80678c0 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8067892:	4b12      	ldr	r3, [pc, #72]	; (80678dc <HAL_RCC_OscConfig+0x2b8>)
 8067894:	2201      	movs	r2, #1
 8067896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8067898:	f7fc f8ec 	bl	8063a74 <HAL_GetTick>
 806789c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 806789e:	e008      	b.n	80678b2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80678a0:	f7fc f8e8 	bl	8063a74 <HAL_GetTick>
 80678a4:	4602      	mov	r2, r0
 80678a6:	693b      	ldr	r3, [r7, #16]
 80678a8:	1ad3      	subs	r3, r2, r3
 80678aa:	2b02      	cmp	r3, #2
 80678ac:	d901      	bls.n	80678b2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80678ae:	2303      	movs	r3, #3
 80678b0:	e1d8      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80678b2:	4b08      	ldr	r3, [pc, #32]	; (80678d4 <HAL_RCC_OscConfig+0x2b0>)
 80678b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80678b6:	f003 0302 	and.w	r3, r3, #2
 80678ba:	2b00      	cmp	r3, #0
 80678bc:	d0f0      	beq.n	80678a0 <HAL_RCC_OscConfig+0x27c>
 80678be:	e01e      	b.n	80678fe <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80678c0:	4b06      	ldr	r3, [pc, #24]	; (80678dc <HAL_RCC_OscConfig+0x2b8>)
 80678c2:	2200      	movs	r2, #0
 80678c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80678c6:	f7fc f8d5 	bl	8063a74 <HAL_GetTick>
 80678ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80678cc:	e011      	b.n	80678f2 <HAL_RCC_OscConfig+0x2ce>
 80678ce:	bf00      	nop
 80678d0:	080773e4 	.word	0x080773e4
 80678d4:	40023800 	.word	0x40023800
 80678d8:	42470000 	.word	0x42470000
 80678dc:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80678e0:	f7fc f8c8 	bl	8063a74 <HAL_GetTick>
 80678e4:	4602      	mov	r2, r0
 80678e6:	693b      	ldr	r3, [r7, #16]
 80678e8:	1ad3      	subs	r3, r2, r3
 80678ea:	2b02      	cmp	r3, #2
 80678ec:	d901      	bls.n	80678f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80678ee:	2303      	movs	r3, #3
 80678f0:	e1b8      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80678f2:	4b97      	ldr	r3, [pc, #604]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80678f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80678f6:	f003 0302 	and.w	r3, r3, #2
 80678fa:	2b00      	cmp	r3, #0
 80678fc:	d1f0      	bne.n	80678e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80678fe:	687b      	ldr	r3, [r7, #4]
 8067900:	681b      	ldr	r3, [r3, #0]
 8067902:	f003 0304 	and.w	r3, r3, #4
 8067906:	2b00      	cmp	r3, #0
 8067908:	f000 80a8 	beq.w	8067a5c <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 806790c:	2300      	movs	r3, #0
 806790e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8067910:	687b      	ldr	r3, [r7, #4]
 8067912:	689b      	ldr	r3, [r3, #8]
 8067914:	2b00      	cmp	r3, #0
 8067916:	d00c      	beq.n	8067932 <HAL_RCC_OscConfig+0x30e>
 8067918:	687b      	ldr	r3, [r7, #4]
 806791a:	689b      	ldr	r3, [r3, #8]
 806791c:	2b01      	cmp	r3, #1
 806791e:	d008      	beq.n	8067932 <HAL_RCC_OscConfig+0x30e>
 8067920:	687b      	ldr	r3, [r7, #4]
 8067922:	689b      	ldr	r3, [r3, #8]
 8067924:	2b05      	cmp	r3, #5
 8067926:	d004      	beq.n	8067932 <HAL_RCC_OscConfig+0x30e>
 8067928:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 806792c:	4889      	ldr	r0, [pc, #548]	; (8067b54 <HAL_RCC_OscConfig+0x530>)
 806792e:	f7fb fbd6 	bl	80630de <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8067932:	4b87      	ldr	r3, [pc, #540]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 8067934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 806793a:	2b00      	cmp	r3, #0
 806793c:	d10f      	bne.n	806795e <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 806793e:	2300      	movs	r3, #0
 8067940:	60bb      	str	r3, [r7, #8]
 8067942:	4b83      	ldr	r3, [pc, #524]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 8067944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067946:	4a82      	ldr	r2, [pc, #520]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 8067948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 806794c:	6413      	str	r3, [r2, #64]	; 0x40
 806794e:	4b80      	ldr	r3, [pc, #512]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 8067950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8067956:	60bb      	str	r3, [r7, #8]
 8067958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 806795a:	2301      	movs	r3, #1
 806795c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 806795e:	4b7e      	ldr	r3, [pc, #504]	; (8067b58 <HAL_RCC_OscConfig+0x534>)
 8067960:	681b      	ldr	r3, [r3, #0]
 8067962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8067966:	2b00      	cmp	r3, #0
 8067968:	d118      	bne.n	806799c <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 806796a:	4b7b      	ldr	r3, [pc, #492]	; (8067b58 <HAL_RCC_OscConfig+0x534>)
 806796c:	681b      	ldr	r3, [r3, #0]
 806796e:	4a7a      	ldr	r2, [pc, #488]	; (8067b58 <HAL_RCC_OscConfig+0x534>)
 8067970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8067974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8067976:	f7fc f87d 	bl	8063a74 <HAL_GetTick>
 806797a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 806797c:	e008      	b.n	8067990 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 806797e:	f7fc f879 	bl	8063a74 <HAL_GetTick>
 8067982:	4602      	mov	r2, r0
 8067984:	693b      	ldr	r3, [r7, #16]
 8067986:	1ad3      	subs	r3, r2, r3
 8067988:	2b02      	cmp	r3, #2
 806798a:	d901      	bls.n	8067990 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 806798c:	2303      	movs	r3, #3
 806798e:	e169      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8067990:	4b71      	ldr	r3, [pc, #452]	; (8067b58 <HAL_RCC_OscConfig+0x534>)
 8067992:	681b      	ldr	r3, [r3, #0]
 8067994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8067998:	2b00      	cmp	r3, #0
 806799a:	d0f0      	beq.n	806797e <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 806799c:	687b      	ldr	r3, [r7, #4]
 806799e:	689b      	ldr	r3, [r3, #8]
 80679a0:	2b01      	cmp	r3, #1
 80679a2:	d106      	bne.n	80679b2 <HAL_RCC_OscConfig+0x38e>
 80679a4:	4b6a      	ldr	r3, [pc, #424]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80679a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80679a8:	4a69      	ldr	r2, [pc, #420]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80679aa:	f043 0301 	orr.w	r3, r3, #1
 80679ae:	6713      	str	r3, [r2, #112]	; 0x70
 80679b0:	e01c      	b.n	80679ec <HAL_RCC_OscConfig+0x3c8>
 80679b2:	687b      	ldr	r3, [r7, #4]
 80679b4:	689b      	ldr	r3, [r3, #8]
 80679b6:	2b05      	cmp	r3, #5
 80679b8:	d10c      	bne.n	80679d4 <HAL_RCC_OscConfig+0x3b0>
 80679ba:	4b65      	ldr	r3, [pc, #404]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80679bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80679be:	4a64      	ldr	r2, [pc, #400]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80679c0:	f043 0304 	orr.w	r3, r3, #4
 80679c4:	6713      	str	r3, [r2, #112]	; 0x70
 80679c6:	4b62      	ldr	r3, [pc, #392]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80679c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80679ca:	4a61      	ldr	r2, [pc, #388]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80679cc:	f043 0301 	orr.w	r3, r3, #1
 80679d0:	6713      	str	r3, [r2, #112]	; 0x70
 80679d2:	e00b      	b.n	80679ec <HAL_RCC_OscConfig+0x3c8>
 80679d4:	4b5e      	ldr	r3, [pc, #376]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80679d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80679d8:	4a5d      	ldr	r2, [pc, #372]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80679da:	f023 0301 	bic.w	r3, r3, #1
 80679de:	6713      	str	r3, [r2, #112]	; 0x70
 80679e0:	4b5b      	ldr	r3, [pc, #364]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80679e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80679e4:	4a5a      	ldr	r2, [pc, #360]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 80679e6:	f023 0304 	bic.w	r3, r3, #4
 80679ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80679ec:	687b      	ldr	r3, [r7, #4]
 80679ee:	689b      	ldr	r3, [r3, #8]
 80679f0:	2b00      	cmp	r3, #0
 80679f2:	d015      	beq.n	8067a20 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80679f4:	f7fc f83e 	bl	8063a74 <HAL_GetTick>
 80679f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80679fa:	e00a      	b.n	8067a12 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80679fc:	f7fc f83a 	bl	8063a74 <HAL_GetTick>
 8067a00:	4602      	mov	r2, r0
 8067a02:	693b      	ldr	r3, [r7, #16]
 8067a04:	1ad3      	subs	r3, r2, r3
 8067a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8067a0a:	4293      	cmp	r3, r2
 8067a0c:	d901      	bls.n	8067a12 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8067a0e:	2303      	movs	r3, #3
 8067a10:	e128      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8067a12:	4b4f      	ldr	r3, [pc, #316]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 8067a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8067a16:	f003 0302 	and.w	r3, r3, #2
 8067a1a:	2b00      	cmp	r3, #0
 8067a1c:	d0ee      	beq.n	80679fc <HAL_RCC_OscConfig+0x3d8>
 8067a1e:	e014      	b.n	8067a4a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8067a20:	f7fc f828 	bl	8063a74 <HAL_GetTick>
 8067a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8067a26:	e00a      	b.n	8067a3e <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8067a28:	f7fc f824 	bl	8063a74 <HAL_GetTick>
 8067a2c:	4602      	mov	r2, r0
 8067a2e:	693b      	ldr	r3, [r7, #16]
 8067a30:	1ad3      	subs	r3, r2, r3
 8067a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8067a36:	4293      	cmp	r3, r2
 8067a38:	d901      	bls.n	8067a3e <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8067a3a:	2303      	movs	r3, #3
 8067a3c:	e112      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8067a3e:	4b44      	ldr	r3, [pc, #272]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 8067a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8067a42:	f003 0302 	and.w	r3, r3, #2
 8067a46:	2b00      	cmp	r3, #0
 8067a48:	d1ee      	bne.n	8067a28 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8067a4a:	7dfb      	ldrb	r3, [r7, #23]
 8067a4c:	2b01      	cmp	r3, #1
 8067a4e:	d105      	bne.n	8067a5c <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8067a50:	4b3f      	ldr	r3, [pc, #252]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 8067a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067a54:	4a3e      	ldr	r2, [pc, #248]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 8067a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8067a5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8067a5c:	687b      	ldr	r3, [r7, #4]
 8067a5e:	699b      	ldr	r3, [r3, #24]
 8067a60:	2b00      	cmp	r3, #0
 8067a62:	d00c      	beq.n	8067a7e <HAL_RCC_OscConfig+0x45a>
 8067a64:	687b      	ldr	r3, [r7, #4]
 8067a66:	699b      	ldr	r3, [r3, #24]
 8067a68:	2b01      	cmp	r3, #1
 8067a6a:	d008      	beq.n	8067a7e <HAL_RCC_OscConfig+0x45a>
 8067a6c:	687b      	ldr	r3, [r7, #4]
 8067a6e:	699b      	ldr	r3, [r3, #24]
 8067a70:	2b02      	cmp	r3, #2
 8067a72:	d004      	beq.n	8067a7e <HAL_RCC_OscConfig+0x45a>
 8067a74:	f240 11cf 	movw	r1, #463	; 0x1cf
 8067a78:	4836      	ldr	r0, [pc, #216]	; (8067b54 <HAL_RCC_OscConfig+0x530>)
 8067a7a:	f7fb fb30 	bl	80630de <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8067a7e:	687b      	ldr	r3, [r7, #4]
 8067a80:	699b      	ldr	r3, [r3, #24]
 8067a82:	2b00      	cmp	r3, #0
 8067a84:	f000 80ed 	beq.w	8067c62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8067a88:	4b31      	ldr	r3, [pc, #196]	; (8067b50 <HAL_RCC_OscConfig+0x52c>)
 8067a8a:	689b      	ldr	r3, [r3, #8]
 8067a8c:	f003 030c 	and.w	r3, r3, #12
 8067a90:	2b08      	cmp	r3, #8
 8067a92:	f000 80ae 	beq.w	8067bf2 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8067a96:	687b      	ldr	r3, [r7, #4]
 8067a98:	699b      	ldr	r3, [r3, #24]
 8067a9a:	2b02      	cmp	r3, #2
 8067a9c:	f040 8092 	bne.w	8067bc4 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8067aa0:	687b      	ldr	r3, [r7, #4]
 8067aa2:	69db      	ldr	r3, [r3, #28]
 8067aa4:	2b00      	cmp	r3, #0
 8067aa6:	d009      	beq.n	8067abc <HAL_RCC_OscConfig+0x498>
 8067aa8:	687b      	ldr	r3, [r7, #4]
 8067aaa:	69db      	ldr	r3, [r3, #28]
 8067aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8067ab0:	d004      	beq.n	8067abc <HAL_RCC_OscConfig+0x498>
 8067ab2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8067ab6:	4827      	ldr	r0, [pc, #156]	; (8067b54 <HAL_RCC_OscConfig+0x530>)
 8067ab8:	f7fb fb11 	bl	80630de <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8067abc:	687b      	ldr	r3, [r7, #4]
 8067abe:	6a1b      	ldr	r3, [r3, #32]
 8067ac0:	2b3f      	cmp	r3, #63	; 0x3f
 8067ac2:	d904      	bls.n	8067ace <HAL_RCC_OscConfig+0x4aa>
 8067ac4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8067ac8:	4822      	ldr	r0, [pc, #136]	; (8067b54 <HAL_RCC_OscConfig+0x530>)
 8067aca:	f7fb fb08 	bl	80630de <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8067ace:	687b      	ldr	r3, [r7, #4]
 8067ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8067ad2:	2b31      	cmp	r3, #49	; 0x31
 8067ad4:	d904      	bls.n	8067ae0 <HAL_RCC_OscConfig+0x4bc>
 8067ad6:	687b      	ldr	r3, [r7, #4]
 8067ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8067ada:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8067ade:	d904      	bls.n	8067aea <HAL_RCC_OscConfig+0x4c6>
 8067ae0:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8067ae4:	481b      	ldr	r0, [pc, #108]	; (8067b54 <HAL_RCC_OscConfig+0x530>)
 8067ae6:	f7fb fafa 	bl	80630de <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8067aea:	687b      	ldr	r3, [r7, #4]
 8067aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067aee:	2b02      	cmp	r3, #2
 8067af0:	d010      	beq.n	8067b14 <HAL_RCC_OscConfig+0x4f0>
 8067af2:	687b      	ldr	r3, [r7, #4]
 8067af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067af6:	2b04      	cmp	r3, #4
 8067af8:	d00c      	beq.n	8067b14 <HAL_RCC_OscConfig+0x4f0>
 8067afa:	687b      	ldr	r3, [r7, #4]
 8067afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067afe:	2b06      	cmp	r3, #6
 8067b00:	d008      	beq.n	8067b14 <HAL_RCC_OscConfig+0x4f0>
 8067b02:	687b      	ldr	r3, [r7, #4]
 8067b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067b06:	2b08      	cmp	r3, #8
 8067b08:	d004      	beq.n	8067b14 <HAL_RCC_OscConfig+0x4f0>
 8067b0a:	f240 11db 	movw	r1, #475	; 0x1db
 8067b0e:	4811      	ldr	r0, [pc, #68]	; (8067b54 <HAL_RCC_OscConfig+0x530>)
 8067b10:	f7fb fae5 	bl	80630de <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8067b14:	687b      	ldr	r3, [r7, #4]
 8067b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067b18:	2b01      	cmp	r3, #1
 8067b1a:	d903      	bls.n	8067b24 <HAL_RCC_OscConfig+0x500>
 8067b1c:	687b      	ldr	r3, [r7, #4]
 8067b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067b20:	2b0f      	cmp	r3, #15
 8067b22:	d904      	bls.n	8067b2e <HAL_RCC_OscConfig+0x50a>
 8067b24:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8067b28:	480a      	ldr	r0, [pc, #40]	; (8067b54 <HAL_RCC_OscConfig+0x530>)
 8067b2a:	f7fb fad8 	bl	80630de <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8067b2e:	4b0b      	ldr	r3, [pc, #44]	; (8067b5c <HAL_RCC_OscConfig+0x538>)
 8067b30:	2200      	movs	r2, #0
 8067b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067b34:	f7fb ff9e 	bl	8063a74 <HAL_GetTick>
 8067b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067b3a:	e011      	b.n	8067b60 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8067b3c:	f7fb ff9a 	bl	8063a74 <HAL_GetTick>
 8067b40:	4602      	mov	r2, r0
 8067b42:	693b      	ldr	r3, [r7, #16]
 8067b44:	1ad3      	subs	r3, r2, r3
 8067b46:	2b02      	cmp	r3, #2
 8067b48:	d90a      	bls.n	8067b60 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8067b4a:	2303      	movs	r3, #3
 8067b4c:	e08a      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
 8067b4e:	bf00      	nop
 8067b50:	40023800 	.word	0x40023800
 8067b54:	080773e4 	.word	0x080773e4
 8067b58:	40007000 	.word	0x40007000
 8067b5c:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067b60:	4b42      	ldr	r3, [pc, #264]	; (8067c6c <HAL_RCC_OscConfig+0x648>)
 8067b62:	681b      	ldr	r3, [r3, #0]
 8067b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067b68:	2b00      	cmp	r3, #0
 8067b6a:	d1e7      	bne.n	8067b3c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8067b6c:	687b      	ldr	r3, [r7, #4]
 8067b6e:	69da      	ldr	r2, [r3, #28]
 8067b70:	687b      	ldr	r3, [r7, #4]
 8067b72:	6a1b      	ldr	r3, [r3, #32]
 8067b74:	431a      	orrs	r2, r3
 8067b76:	687b      	ldr	r3, [r7, #4]
 8067b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8067b7a:	019b      	lsls	r3, r3, #6
 8067b7c:	431a      	orrs	r2, r3
 8067b7e:	687b      	ldr	r3, [r7, #4]
 8067b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067b82:	085b      	lsrs	r3, r3, #1
 8067b84:	3b01      	subs	r3, #1
 8067b86:	041b      	lsls	r3, r3, #16
 8067b88:	431a      	orrs	r2, r3
 8067b8a:	687b      	ldr	r3, [r7, #4]
 8067b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067b8e:	061b      	lsls	r3, r3, #24
 8067b90:	4936      	ldr	r1, [pc, #216]	; (8067c6c <HAL_RCC_OscConfig+0x648>)
 8067b92:	4313      	orrs	r3, r2
 8067b94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8067b96:	4b36      	ldr	r3, [pc, #216]	; (8067c70 <HAL_RCC_OscConfig+0x64c>)
 8067b98:	2201      	movs	r2, #1
 8067b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067b9c:	f7fb ff6a 	bl	8063a74 <HAL_GetTick>
 8067ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8067ba2:	e008      	b.n	8067bb6 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8067ba4:	f7fb ff66 	bl	8063a74 <HAL_GetTick>
 8067ba8:	4602      	mov	r2, r0
 8067baa:	693b      	ldr	r3, [r7, #16]
 8067bac:	1ad3      	subs	r3, r2, r3
 8067bae:	2b02      	cmp	r3, #2
 8067bb0:	d901      	bls.n	8067bb6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8067bb2:	2303      	movs	r3, #3
 8067bb4:	e056      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8067bb6:	4b2d      	ldr	r3, [pc, #180]	; (8067c6c <HAL_RCC_OscConfig+0x648>)
 8067bb8:	681b      	ldr	r3, [r3, #0]
 8067bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067bbe:	2b00      	cmp	r3, #0
 8067bc0:	d0f0      	beq.n	8067ba4 <HAL_RCC_OscConfig+0x580>
 8067bc2:	e04e      	b.n	8067c62 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8067bc4:	4b2a      	ldr	r3, [pc, #168]	; (8067c70 <HAL_RCC_OscConfig+0x64c>)
 8067bc6:	2200      	movs	r2, #0
 8067bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067bca:	f7fb ff53 	bl	8063a74 <HAL_GetTick>
 8067bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067bd0:	e008      	b.n	8067be4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8067bd2:	f7fb ff4f 	bl	8063a74 <HAL_GetTick>
 8067bd6:	4602      	mov	r2, r0
 8067bd8:	693b      	ldr	r3, [r7, #16]
 8067bda:	1ad3      	subs	r3, r2, r3
 8067bdc:	2b02      	cmp	r3, #2
 8067bde:	d901      	bls.n	8067be4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8067be0:	2303      	movs	r3, #3
 8067be2:	e03f      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067be4:	4b21      	ldr	r3, [pc, #132]	; (8067c6c <HAL_RCC_OscConfig+0x648>)
 8067be6:	681b      	ldr	r3, [r3, #0]
 8067be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067bec:	2b00      	cmp	r3, #0
 8067bee:	d1f0      	bne.n	8067bd2 <HAL_RCC_OscConfig+0x5ae>
 8067bf0:	e037      	b.n	8067c62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8067bf2:	687b      	ldr	r3, [r7, #4]
 8067bf4:	699b      	ldr	r3, [r3, #24]
 8067bf6:	2b01      	cmp	r3, #1
 8067bf8:	d101      	bne.n	8067bfe <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8067bfa:	2301      	movs	r3, #1
 8067bfc:	e032      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8067bfe:	4b1b      	ldr	r3, [pc, #108]	; (8067c6c <HAL_RCC_OscConfig+0x648>)
 8067c00:	685b      	ldr	r3, [r3, #4]
 8067c02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8067c04:	687b      	ldr	r3, [r7, #4]
 8067c06:	699b      	ldr	r3, [r3, #24]
 8067c08:	2b01      	cmp	r3, #1
 8067c0a:	d028      	beq.n	8067c5e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8067c0c:	68fb      	ldr	r3, [r7, #12]
 8067c0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8067c12:	687b      	ldr	r3, [r7, #4]
 8067c14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8067c16:	429a      	cmp	r2, r3
 8067c18:	d121      	bne.n	8067c5e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8067c1a:	68fb      	ldr	r3, [r7, #12]
 8067c1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8067c20:	687b      	ldr	r3, [r7, #4]
 8067c22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8067c24:	429a      	cmp	r2, r3
 8067c26:	d11a      	bne.n	8067c5e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8067c28:	68fa      	ldr	r2, [r7, #12]
 8067c2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8067c2e:	4013      	ands	r3, r2
 8067c30:	687a      	ldr	r2, [r7, #4]
 8067c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8067c34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8067c36:	4293      	cmp	r3, r2
 8067c38:	d111      	bne.n	8067c5e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8067c3a:	68fb      	ldr	r3, [r7, #12]
 8067c3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8067c40:	687b      	ldr	r3, [r7, #4]
 8067c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067c44:	085b      	lsrs	r3, r3, #1
 8067c46:	3b01      	subs	r3, #1
 8067c48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8067c4a:	429a      	cmp	r2, r3
 8067c4c:	d107      	bne.n	8067c5e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8067c4e:	68fb      	ldr	r3, [r7, #12]
 8067c50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8067c54:	687b      	ldr	r3, [r7, #4]
 8067c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067c58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8067c5a:	429a      	cmp	r2, r3
 8067c5c:	d001      	beq.n	8067c62 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8067c5e:	2301      	movs	r3, #1
 8067c60:	e000      	b.n	8067c64 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8067c62:	2300      	movs	r3, #0
}
 8067c64:	4618      	mov	r0, r3
 8067c66:	3718      	adds	r7, #24
 8067c68:	46bd      	mov	sp, r7
 8067c6a:	bd80      	pop	{r7, pc}
 8067c6c:	40023800 	.word	0x40023800
 8067c70:	42470060 	.word	0x42470060

08067c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8067c74:	b580      	push	{r7, lr}
 8067c76:	b084      	sub	sp, #16
 8067c78:	af00      	add	r7, sp, #0
 8067c7a:	6078      	str	r0, [r7, #4]
 8067c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8067c7e:	687b      	ldr	r3, [r7, #4]
 8067c80:	2b00      	cmp	r3, #0
 8067c82:	d101      	bne.n	8067c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8067c84:	2301      	movs	r3, #1
 8067c86:	e174      	b.n	8067f72 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8067c88:	687b      	ldr	r3, [r7, #4]
 8067c8a:	681b      	ldr	r3, [r3, #0]
 8067c8c:	2b00      	cmp	r3, #0
 8067c8e:	d003      	beq.n	8067c98 <HAL_RCC_ClockConfig+0x24>
 8067c90:	687b      	ldr	r3, [r7, #4]
 8067c92:	681b      	ldr	r3, [r3, #0]
 8067c94:	2b0f      	cmp	r3, #15
 8067c96:	d904      	bls.n	8067ca2 <HAL_RCC_ClockConfig+0x2e>
 8067c98:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8067c9c:	487b      	ldr	r0, [pc, #492]	; (8067e8c <HAL_RCC_ClockConfig+0x218>)
 8067c9e:	f7fb fa1e 	bl	80630de <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8067ca2:	683b      	ldr	r3, [r7, #0]
 8067ca4:	2b00      	cmp	r3, #0
 8067ca6:	d019      	beq.n	8067cdc <HAL_RCC_ClockConfig+0x68>
 8067ca8:	683b      	ldr	r3, [r7, #0]
 8067caa:	2b01      	cmp	r3, #1
 8067cac:	d016      	beq.n	8067cdc <HAL_RCC_ClockConfig+0x68>
 8067cae:	683b      	ldr	r3, [r7, #0]
 8067cb0:	2b02      	cmp	r3, #2
 8067cb2:	d013      	beq.n	8067cdc <HAL_RCC_ClockConfig+0x68>
 8067cb4:	683b      	ldr	r3, [r7, #0]
 8067cb6:	2b03      	cmp	r3, #3
 8067cb8:	d010      	beq.n	8067cdc <HAL_RCC_ClockConfig+0x68>
 8067cba:	683b      	ldr	r3, [r7, #0]
 8067cbc:	2b04      	cmp	r3, #4
 8067cbe:	d00d      	beq.n	8067cdc <HAL_RCC_ClockConfig+0x68>
 8067cc0:	683b      	ldr	r3, [r7, #0]
 8067cc2:	2b05      	cmp	r3, #5
 8067cc4:	d00a      	beq.n	8067cdc <HAL_RCC_ClockConfig+0x68>
 8067cc6:	683b      	ldr	r3, [r7, #0]
 8067cc8:	2b06      	cmp	r3, #6
 8067cca:	d007      	beq.n	8067cdc <HAL_RCC_ClockConfig+0x68>
 8067ccc:	683b      	ldr	r3, [r7, #0]
 8067cce:	2b07      	cmp	r3, #7
 8067cd0:	d004      	beq.n	8067cdc <HAL_RCC_ClockConfig+0x68>
 8067cd2:	f240 215d 	movw	r1, #605	; 0x25d
 8067cd6:	486d      	ldr	r0, [pc, #436]	; (8067e8c <HAL_RCC_ClockConfig+0x218>)
 8067cd8:	f7fb fa01 	bl	80630de <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8067cdc:	4b6c      	ldr	r3, [pc, #432]	; (8067e90 <HAL_RCC_ClockConfig+0x21c>)
 8067cde:	681b      	ldr	r3, [r3, #0]
 8067ce0:	f003 0307 	and.w	r3, r3, #7
 8067ce4:	683a      	ldr	r2, [r7, #0]
 8067ce6:	429a      	cmp	r2, r3
 8067ce8:	d90c      	bls.n	8067d04 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8067cea:	4b69      	ldr	r3, [pc, #420]	; (8067e90 <HAL_RCC_ClockConfig+0x21c>)
 8067cec:	683a      	ldr	r2, [r7, #0]
 8067cee:	b2d2      	uxtb	r2, r2
 8067cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8067cf2:	4b67      	ldr	r3, [pc, #412]	; (8067e90 <HAL_RCC_ClockConfig+0x21c>)
 8067cf4:	681b      	ldr	r3, [r3, #0]
 8067cf6:	f003 0307 	and.w	r3, r3, #7
 8067cfa:	683a      	ldr	r2, [r7, #0]
 8067cfc:	429a      	cmp	r2, r3
 8067cfe:	d001      	beq.n	8067d04 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8067d00:	2301      	movs	r3, #1
 8067d02:	e136      	b.n	8067f72 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8067d04:	687b      	ldr	r3, [r7, #4]
 8067d06:	681b      	ldr	r3, [r3, #0]
 8067d08:	f003 0302 	and.w	r3, r3, #2
 8067d0c:	2b00      	cmp	r3, #0
 8067d0e:	d049      	beq.n	8067da4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8067d10:	687b      	ldr	r3, [r7, #4]
 8067d12:	681b      	ldr	r3, [r3, #0]
 8067d14:	f003 0304 	and.w	r3, r3, #4
 8067d18:	2b00      	cmp	r3, #0
 8067d1a:	d005      	beq.n	8067d28 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8067d1c:	4b5d      	ldr	r3, [pc, #372]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067d1e:	689b      	ldr	r3, [r3, #8]
 8067d20:	4a5c      	ldr	r2, [pc, #368]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8067d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8067d28:	687b      	ldr	r3, [r7, #4]
 8067d2a:	681b      	ldr	r3, [r3, #0]
 8067d2c:	f003 0308 	and.w	r3, r3, #8
 8067d30:	2b00      	cmp	r3, #0
 8067d32:	d005      	beq.n	8067d40 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8067d34:	4b57      	ldr	r3, [pc, #348]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067d36:	689b      	ldr	r3, [r3, #8]
 8067d38:	4a56      	ldr	r2, [pc, #344]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8067d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8067d40:	687b      	ldr	r3, [r7, #4]
 8067d42:	689b      	ldr	r3, [r3, #8]
 8067d44:	2b00      	cmp	r3, #0
 8067d46:	d024      	beq.n	8067d92 <HAL_RCC_ClockConfig+0x11e>
 8067d48:	687b      	ldr	r3, [r7, #4]
 8067d4a:	689b      	ldr	r3, [r3, #8]
 8067d4c:	2b80      	cmp	r3, #128	; 0x80
 8067d4e:	d020      	beq.n	8067d92 <HAL_RCC_ClockConfig+0x11e>
 8067d50:	687b      	ldr	r3, [r7, #4]
 8067d52:	689b      	ldr	r3, [r3, #8]
 8067d54:	2b90      	cmp	r3, #144	; 0x90
 8067d56:	d01c      	beq.n	8067d92 <HAL_RCC_ClockConfig+0x11e>
 8067d58:	687b      	ldr	r3, [r7, #4]
 8067d5a:	689b      	ldr	r3, [r3, #8]
 8067d5c:	2ba0      	cmp	r3, #160	; 0xa0
 8067d5e:	d018      	beq.n	8067d92 <HAL_RCC_ClockConfig+0x11e>
 8067d60:	687b      	ldr	r3, [r7, #4]
 8067d62:	689b      	ldr	r3, [r3, #8]
 8067d64:	2bb0      	cmp	r3, #176	; 0xb0
 8067d66:	d014      	beq.n	8067d92 <HAL_RCC_ClockConfig+0x11e>
 8067d68:	687b      	ldr	r3, [r7, #4]
 8067d6a:	689b      	ldr	r3, [r3, #8]
 8067d6c:	2bc0      	cmp	r3, #192	; 0xc0
 8067d6e:	d010      	beq.n	8067d92 <HAL_RCC_ClockConfig+0x11e>
 8067d70:	687b      	ldr	r3, [r7, #4]
 8067d72:	689b      	ldr	r3, [r3, #8]
 8067d74:	2bd0      	cmp	r3, #208	; 0xd0
 8067d76:	d00c      	beq.n	8067d92 <HAL_RCC_ClockConfig+0x11e>
 8067d78:	687b      	ldr	r3, [r7, #4]
 8067d7a:	689b      	ldr	r3, [r3, #8]
 8067d7c:	2be0      	cmp	r3, #224	; 0xe0
 8067d7e:	d008      	beq.n	8067d92 <HAL_RCC_ClockConfig+0x11e>
 8067d80:	687b      	ldr	r3, [r7, #4]
 8067d82:	689b      	ldr	r3, [r3, #8]
 8067d84:	2bf0      	cmp	r3, #240	; 0xf0
 8067d86:	d004      	beq.n	8067d92 <HAL_RCC_ClockConfig+0x11e>
 8067d88:	f44f 7120 	mov.w	r1, #640	; 0x280
 8067d8c:	483f      	ldr	r0, [pc, #252]	; (8067e8c <HAL_RCC_ClockConfig+0x218>)
 8067d8e:	f7fb f9a6 	bl	80630de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8067d92:	4b40      	ldr	r3, [pc, #256]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067d94:	689b      	ldr	r3, [r3, #8]
 8067d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8067d9a:	687b      	ldr	r3, [r7, #4]
 8067d9c:	689b      	ldr	r3, [r3, #8]
 8067d9e:	493d      	ldr	r1, [pc, #244]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067da0:	4313      	orrs	r3, r2
 8067da2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8067da4:	687b      	ldr	r3, [r7, #4]
 8067da6:	681b      	ldr	r3, [r3, #0]
 8067da8:	f003 0301 	and.w	r3, r3, #1
 8067dac:	2b00      	cmp	r3, #0
 8067dae:	d059      	beq.n	8067e64 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8067db0:	687b      	ldr	r3, [r7, #4]
 8067db2:	685b      	ldr	r3, [r3, #4]
 8067db4:	2b00      	cmp	r3, #0
 8067db6:	d010      	beq.n	8067dda <HAL_RCC_ClockConfig+0x166>
 8067db8:	687b      	ldr	r3, [r7, #4]
 8067dba:	685b      	ldr	r3, [r3, #4]
 8067dbc:	2b01      	cmp	r3, #1
 8067dbe:	d00c      	beq.n	8067dda <HAL_RCC_ClockConfig+0x166>
 8067dc0:	687b      	ldr	r3, [r7, #4]
 8067dc2:	685b      	ldr	r3, [r3, #4]
 8067dc4:	2b02      	cmp	r3, #2
 8067dc6:	d008      	beq.n	8067dda <HAL_RCC_ClockConfig+0x166>
 8067dc8:	687b      	ldr	r3, [r7, #4]
 8067dca:	685b      	ldr	r3, [r3, #4]
 8067dcc:	2b03      	cmp	r3, #3
 8067dce:	d004      	beq.n	8067dda <HAL_RCC_ClockConfig+0x166>
 8067dd0:	f240 2187 	movw	r1, #647	; 0x287
 8067dd4:	482d      	ldr	r0, [pc, #180]	; (8067e8c <HAL_RCC_ClockConfig+0x218>)
 8067dd6:	f7fb f982 	bl	80630de <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8067dda:	687b      	ldr	r3, [r7, #4]
 8067ddc:	685b      	ldr	r3, [r3, #4]
 8067dde:	2b01      	cmp	r3, #1
 8067de0:	d107      	bne.n	8067df2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8067de2:	4b2c      	ldr	r3, [pc, #176]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067de4:	681b      	ldr	r3, [r3, #0]
 8067de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8067dea:	2b00      	cmp	r3, #0
 8067dec:	d119      	bne.n	8067e22 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8067dee:	2301      	movs	r3, #1
 8067df0:	e0bf      	b.n	8067f72 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8067df2:	687b      	ldr	r3, [r7, #4]
 8067df4:	685b      	ldr	r3, [r3, #4]
 8067df6:	2b02      	cmp	r3, #2
 8067df8:	d003      	beq.n	8067e02 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8067dfa:	687b      	ldr	r3, [r7, #4]
 8067dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8067dfe:	2b03      	cmp	r3, #3
 8067e00:	d107      	bne.n	8067e12 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8067e02:	4b24      	ldr	r3, [pc, #144]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067e04:	681b      	ldr	r3, [r3, #0]
 8067e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067e0a:	2b00      	cmp	r3, #0
 8067e0c:	d109      	bne.n	8067e22 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8067e0e:	2301      	movs	r3, #1
 8067e10:	e0af      	b.n	8067f72 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8067e12:	4b20      	ldr	r3, [pc, #128]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067e14:	681b      	ldr	r3, [r3, #0]
 8067e16:	f003 0302 	and.w	r3, r3, #2
 8067e1a:	2b00      	cmp	r3, #0
 8067e1c:	d101      	bne.n	8067e22 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8067e1e:	2301      	movs	r3, #1
 8067e20:	e0a7      	b.n	8067f72 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8067e22:	4b1c      	ldr	r3, [pc, #112]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067e24:	689b      	ldr	r3, [r3, #8]
 8067e26:	f023 0203 	bic.w	r2, r3, #3
 8067e2a:	687b      	ldr	r3, [r7, #4]
 8067e2c:	685b      	ldr	r3, [r3, #4]
 8067e2e:	4919      	ldr	r1, [pc, #100]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067e30:	4313      	orrs	r3, r2
 8067e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8067e34:	f7fb fe1e 	bl	8063a74 <HAL_GetTick>
 8067e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8067e3a:	e00a      	b.n	8067e52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8067e3c:	f7fb fe1a 	bl	8063a74 <HAL_GetTick>
 8067e40:	4602      	mov	r2, r0
 8067e42:	68fb      	ldr	r3, [r7, #12]
 8067e44:	1ad3      	subs	r3, r2, r3
 8067e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8067e4a:	4293      	cmp	r3, r2
 8067e4c:	d901      	bls.n	8067e52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8067e4e:	2303      	movs	r3, #3
 8067e50:	e08f      	b.n	8067f72 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8067e52:	4b10      	ldr	r3, [pc, #64]	; (8067e94 <HAL_RCC_ClockConfig+0x220>)
 8067e54:	689b      	ldr	r3, [r3, #8]
 8067e56:	f003 020c 	and.w	r2, r3, #12
 8067e5a:	687b      	ldr	r3, [r7, #4]
 8067e5c:	685b      	ldr	r3, [r3, #4]
 8067e5e:	009b      	lsls	r3, r3, #2
 8067e60:	429a      	cmp	r2, r3
 8067e62:	d1eb      	bne.n	8067e3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8067e64:	4b0a      	ldr	r3, [pc, #40]	; (8067e90 <HAL_RCC_ClockConfig+0x21c>)
 8067e66:	681b      	ldr	r3, [r3, #0]
 8067e68:	f003 0307 	and.w	r3, r3, #7
 8067e6c:	683a      	ldr	r2, [r7, #0]
 8067e6e:	429a      	cmp	r2, r3
 8067e70:	d212      	bcs.n	8067e98 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8067e72:	4b07      	ldr	r3, [pc, #28]	; (8067e90 <HAL_RCC_ClockConfig+0x21c>)
 8067e74:	683a      	ldr	r2, [r7, #0]
 8067e76:	b2d2      	uxtb	r2, r2
 8067e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8067e7a:	4b05      	ldr	r3, [pc, #20]	; (8067e90 <HAL_RCC_ClockConfig+0x21c>)
 8067e7c:	681b      	ldr	r3, [r3, #0]
 8067e7e:	f003 0307 	and.w	r3, r3, #7
 8067e82:	683a      	ldr	r2, [r7, #0]
 8067e84:	429a      	cmp	r2, r3
 8067e86:	d007      	beq.n	8067e98 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8067e88:	2301      	movs	r3, #1
 8067e8a:	e072      	b.n	8067f72 <HAL_RCC_ClockConfig+0x2fe>
 8067e8c:	080773e4 	.word	0x080773e4
 8067e90:	40023c00 	.word	0x40023c00
 8067e94:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8067e98:	687b      	ldr	r3, [r7, #4]
 8067e9a:	681b      	ldr	r3, [r3, #0]
 8067e9c:	f003 0304 	and.w	r3, r3, #4
 8067ea0:	2b00      	cmp	r3, #0
 8067ea2:	d025      	beq.n	8067ef0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8067ea4:	687b      	ldr	r3, [r7, #4]
 8067ea6:	68db      	ldr	r3, [r3, #12]
 8067ea8:	2b00      	cmp	r3, #0
 8067eaa:	d018      	beq.n	8067ede <HAL_RCC_ClockConfig+0x26a>
 8067eac:	687b      	ldr	r3, [r7, #4]
 8067eae:	68db      	ldr	r3, [r3, #12]
 8067eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8067eb4:	d013      	beq.n	8067ede <HAL_RCC_ClockConfig+0x26a>
 8067eb6:	687b      	ldr	r3, [r7, #4]
 8067eb8:	68db      	ldr	r3, [r3, #12]
 8067eba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8067ebe:	d00e      	beq.n	8067ede <HAL_RCC_ClockConfig+0x26a>
 8067ec0:	687b      	ldr	r3, [r7, #4]
 8067ec2:	68db      	ldr	r3, [r3, #12]
 8067ec4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8067ec8:	d009      	beq.n	8067ede <HAL_RCC_ClockConfig+0x26a>
 8067eca:	687b      	ldr	r3, [r7, #4]
 8067ecc:	68db      	ldr	r3, [r3, #12]
 8067ece:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8067ed2:	d004      	beq.n	8067ede <HAL_RCC_ClockConfig+0x26a>
 8067ed4:	f240 21c5 	movw	r1, #709	; 0x2c5
 8067ed8:	4828      	ldr	r0, [pc, #160]	; (8067f7c <HAL_RCC_ClockConfig+0x308>)
 8067eda:	f7fb f900 	bl	80630de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8067ede:	4b28      	ldr	r3, [pc, #160]	; (8067f80 <HAL_RCC_ClockConfig+0x30c>)
 8067ee0:	689b      	ldr	r3, [r3, #8]
 8067ee2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8067ee6:	687b      	ldr	r3, [r7, #4]
 8067ee8:	68db      	ldr	r3, [r3, #12]
 8067eea:	4925      	ldr	r1, [pc, #148]	; (8067f80 <HAL_RCC_ClockConfig+0x30c>)
 8067eec:	4313      	orrs	r3, r2
 8067eee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8067ef0:	687b      	ldr	r3, [r7, #4]
 8067ef2:	681b      	ldr	r3, [r3, #0]
 8067ef4:	f003 0308 	and.w	r3, r3, #8
 8067ef8:	2b00      	cmp	r3, #0
 8067efa:	d026      	beq.n	8067f4a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8067efc:	687b      	ldr	r3, [r7, #4]
 8067efe:	691b      	ldr	r3, [r3, #16]
 8067f00:	2b00      	cmp	r3, #0
 8067f02:	d018      	beq.n	8067f36 <HAL_RCC_ClockConfig+0x2c2>
 8067f04:	687b      	ldr	r3, [r7, #4]
 8067f06:	691b      	ldr	r3, [r3, #16]
 8067f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8067f0c:	d013      	beq.n	8067f36 <HAL_RCC_ClockConfig+0x2c2>
 8067f0e:	687b      	ldr	r3, [r7, #4]
 8067f10:	691b      	ldr	r3, [r3, #16]
 8067f12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8067f16:	d00e      	beq.n	8067f36 <HAL_RCC_ClockConfig+0x2c2>
 8067f18:	687b      	ldr	r3, [r7, #4]
 8067f1a:	691b      	ldr	r3, [r3, #16]
 8067f1c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8067f20:	d009      	beq.n	8067f36 <HAL_RCC_ClockConfig+0x2c2>
 8067f22:	687b      	ldr	r3, [r7, #4]
 8067f24:	691b      	ldr	r3, [r3, #16]
 8067f26:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8067f2a:	d004      	beq.n	8067f36 <HAL_RCC_ClockConfig+0x2c2>
 8067f2c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8067f30:	4812      	ldr	r0, [pc, #72]	; (8067f7c <HAL_RCC_ClockConfig+0x308>)
 8067f32:	f7fb f8d4 	bl	80630de <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8067f36:	4b12      	ldr	r3, [pc, #72]	; (8067f80 <HAL_RCC_ClockConfig+0x30c>)
 8067f38:	689b      	ldr	r3, [r3, #8]
 8067f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8067f3e:	687b      	ldr	r3, [r7, #4]
 8067f40:	691b      	ldr	r3, [r3, #16]
 8067f42:	00db      	lsls	r3, r3, #3
 8067f44:	490e      	ldr	r1, [pc, #56]	; (8067f80 <HAL_RCC_ClockConfig+0x30c>)
 8067f46:	4313      	orrs	r3, r2
 8067f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8067f4a:	f000 f821 	bl	8067f90 <HAL_RCC_GetSysClockFreq>
 8067f4e:	4602      	mov	r2, r0
 8067f50:	4b0b      	ldr	r3, [pc, #44]	; (8067f80 <HAL_RCC_ClockConfig+0x30c>)
 8067f52:	689b      	ldr	r3, [r3, #8]
 8067f54:	091b      	lsrs	r3, r3, #4
 8067f56:	f003 030f 	and.w	r3, r3, #15
 8067f5a:	490a      	ldr	r1, [pc, #40]	; (8067f84 <HAL_RCC_ClockConfig+0x310>)
 8067f5c:	5ccb      	ldrb	r3, [r1, r3]
 8067f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8067f62:	4a09      	ldr	r2, [pc, #36]	; (8067f88 <HAL_RCC_ClockConfig+0x314>)
 8067f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8067f66:	4b09      	ldr	r3, [pc, #36]	; (8067f8c <HAL_RCC_ClockConfig+0x318>)
 8067f68:	681b      	ldr	r3, [r3, #0]
 8067f6a:	4618      	mov	r0, r3
 8067f6c:	f7fb fa4c 	bl	8063408 <HAL_InitTick>

  return HAL_OK;
 8067f70:	2300      	movs	r3, #0
}
 8067f72:	4618      	mov	r0, r3
 8067f74:	3710      	adds	r7, #16
 8067f76:	46bd      	mov	sp, r7
 8067f78:	bd80      	pop	{r7, pc}
 8067f7a:	bf00      	nop
 8067f7c:	080773e4 	.word	0x080773e4
 8067f80:	40023800 	.word	0x40023800
 8067f84:	08077710 	.word	0x08077710
 8067f88:	20000000 	.word	0x20000000
 8067f8c:	20000004 	.word	0x20000004

08067f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8067f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8067f94:	b084      	sub	sp, #16
 8067f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8067f98:	2300      	movs	r3, #0
 8067f9a:	607b      	str	r3, [r7, #4]
 8067f9c:	2300      	movs	r3, #0
 8067f9e:	60fb      	str	r3, [r7, #12]
 8067fa0:	2300      	movs	r3, #0
 8067fa2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8067fa4:	2300      	movs	r3, #0
 8067fa6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8067fa8:	4b67      	ldr	r3, [pc, #412]	; (8068148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067faa:	689b      	ldr	r3, [r3, #8]
 8067fac:	f003 030c 	and.w	r3, r3, #12
 8067fb0:	2b08      	cmp	r3, #8
 8067fb2:	d00d      	beq.n	8067fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8067fb4:	2b08      	cmp	r3, #8
 8067fb6:	f200 80bd 	bhi.w	8068134 <HAL_RCC_GetSysClockFreq+0x1a4>
 8067fba:	2b00      	cmp	r3, #0
 8067fbc:	d002      	beq.n	8067fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8067fbe:	2b04      	cmp	r3, #4
 8067fc0:	d003      	beq.n	8067fca <HAL_RCC_GetSysClockFreq+0x3a>
 8067fc2:	e0b7      	b.n	8068134 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8067fc4:	4b61      	ldr	r3, [pc, #388]	; (806814c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8067fc6:	60bb      	str	r3, [r7, #8]
       break;
 8067fc8:	e0b7      	b.n	806813a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8067fca:	4b61      	ldr	r3, [pc, #388]	; (8068150 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8067fcc:	60bb      	str	r3, [r7, #8]
      break;
 8067fce:	e0b4      	b.n	806813a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8067fd0:	4b5d      	ldr	r3, [pc, #372]	; (8068148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067fd2:	685b      	ldr	r3, [r3, #4]
 8067fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8067fd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8067fda:	4b5b      	ldr	r3, [pc, #364]	; (8068148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067fdc:	685b      	ldr	r3, [r3, #4]
 8067fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8067fe2:	2b00      	cmp	r3, #0
 8067fe4:	d04d      	beq.n	8068082 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8067fe6:	4b58      	ldr	r3, [pc, #352]	; (8068148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067fe8:	685b      	ldr	r3, [r3, #4]
 8067fea:	099b      	lsrs	r3, r3, #6
 8067fec:	461a      	mov	r2, r3
 8067fee:	f04f 0300 	mov.w	r3, #0
 8067ff2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8067ff6:	f04f 0100 	mov.w	r1, #0
 8067ffa:	ea02 0800 	and.w	r8, r2, r0
 8067ffe:	ea03 0901 	and.w	r9, r3, r1
 8068002:	4640      	mov	r0, r8
 8068004:	4649      	mov	r1, r9
 8068006:	f04f 0200 	mov.w	r2, #0
 806800a:	f04f 0300 	mov.w	r3, #0
 806800e:	014b      	lsls	r3, r1, #5
 8068010:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8068014:	0142      	lsls	r2, r0, #5
 8068016:	4610      	mov	r0, r2
 8068018:	4619      	mov	r1, r3
 806801a:	ebb0 0008 	subs.w	r0, r0, r8
 806801e:	eb61 0109 	sbc.w	r1, r1, r9
 8068022:	f04f 0200 	mov.w	r2, #0
 8068026:	f04f 0300 	mov.w	r3, #0
 806802a:	018b      	lsls	r3, r1, #6
 806802c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8068030:	0182      	lsls	r2, r0, #6
 8068032:	1a12      	subs	r2, r2, r0
 8068034:	eb63 0301 	sbc.w	r3, r3, r1
 8068038:	f04f 0000 	mov.w	r0, #0
 806803c:	f04f 0100 	mov.w	r1, #0
 8068040:	00d9      	lsls	r1, r3, #3
 8068042:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8068046:	00d0      	lsls	r0, r2, #3
 8068048:	4602      	mov	r2, r0
 806804a:	460b      	mov	r3, r1
 806804c:	eb12 0208 	adds.w	r2, r2, r8
 8068050:	eb43 0309 	adc.w	r3, r3, r9
 8068054:	f04f 0000 	mov.w	r0, #0
 8068058:	f04f 0100 	mov.w	r1, #0
 806805c:	0259      	lsls	r1, r3, #9
 806805e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8068062:	0250      	lsls	r0, r2, #9
 8068064:	4602      	mov	r2, r0
 8068066:	460b      	mov	r3, r1
 8068068:	4610      	mov	r0, r2
 806806a:	4619      	mov	r1, r3
 806806c:	687b      	ldr	r3, [r7, #4]
 806806e:	461a      	mov	r2, r3
 8068070:	f04f 0300 	mov.w	r3, #0
 8068074:	f7f8 fe70 	bl	8060d58 <__aeabi_uldivmod>
 8068078:	4602      	mov	r2, r0
 806807a:	460b      	mov	r3, r1
 806807c:	4613      	mov	r3, r2
 806807e:	60fb      	str	r3, [r7, #12]
 8068080:	e04a      	b.n	8068118 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8068082:	4b31      	ldr	r3, [pc, #196]	; (8068148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8068084:	685b      	ldr	r3, [r3, #4]
 8068086:	099b      	lsrs	r3, r3, #6
 8068088:	461a      	mov	r2, r3
 806808a:	f04f 0300 	mov.w	r3, #0
 806808e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8068092:	f04f 0100 	mov.w	r1, #0
 8068096:	ea02 0400 	and.w	r4, r2, r0
 806809a:	ea03 0501 	and.w	r5, r3, r1
 806809e:	4620      	mov	r0, r4
 80680a0:	4629      	mov	r1, r5
 80680a2:	f04f 0200 	mov.w	r2, #0
 80680a6:	f04f 0300 	mov.w	r3, #0
 80680aa:	014b      	lsls	r3, r1, #5
 80680ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80680b0:	0142      	lsls	r2, r0, #5
 80680b2:	4610      	mov	r0, r2
 80680b4:	4619      	mov	r1, r3
 80680b6:	1b00      	subs	r0, r0, r4
 80680b8:	eb61 0105 	sbc.w	r1, r1, r5
 80680bc:	f04f 0200 	mov.w	r2, #0
 80680c0:	f04f 0300 	mov.w	r3, #0
 80680c4:	018b      	lsls	r3, r1, #6
 80680c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80680ca:	0182      	lsls	r2, r0, #6
 80680cc:	1a12      	subs	r2, r2, r0
 80680ce:	eb63 0301 	sbc.w	r3, r3, r1
 80680d2:	f04f 0000 	mov.w	r0, #0
 80680d6:	f04f 0100 	mov.w	r1, #0
 80680da:	00d9      	lsls	r1, r3, #3
 80680dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80680e0:	00d0      	lsls	r0, r2, #3
 80680e2:	4602      	mov	r2, r0
 80680e4:	460b      	mov	r3, r1
 80680e6:	1912      	adds	r2, r2, r4
 80680e8:	eb45 0303 	adc.w	r3, r5, r3
 80680ec:	f04f 0000 	mov.w	r0, #0
 80680f0:	f04f 0100 	mov.w	r1, #0
 80680f4:	0299      	lsls	r1, r3, #10
 80680f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80680fa:	0290      	lsls	r0, r2, #10
 80680fc:	4602      	mov	r2, r0
 80680fe:	460b      	mov	r3, r1
 8068100:	4610      	mov	r0, r2
 8068102:	4619      	mov	r1, r3
 8068104:	687b      	ldr	r3, [r7, #4]
 8068106:	461a      	mov	r2, r3
 8068108:	f04f 0300 	mov.w	r3, #0
 806810c:	f7f8 fe24 	bl	8060d58 <__aeabi_uldivmod>
 8068110:	4602      	mov	r2, r0
 8068112:	460b      	mov	r3, r1
 8068114:	4613      	mov	r3, r2
 8068116:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8068118:	4b0b      	ldr	r3, [pc, #44]	; (8068148 <HAL_RCC_GetSysClockFreq+0x1b8>)
 806811a:	685b      	ldr	r3, [r3, #4]
 806811c:	0c1b      	lsrs	r3, r3, #16
 806811e:	f003 0303 	and.w	r3, r3, #3
 8068122:	3301      	adds	r3, #1
 8068124:	005b      	lsls	r3, r3, #1
 8068126:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8068128:	68fa      	ldr	r2, [r7, #12]
 806812a:	683b      	ldr	r3, [r7, #0]
 806812c:	fbb2 f3f3 	udiv	r3, r2, r3
 8068130:	60bb      	str	r3, [r7, #8]
      break;
 8068132:	e002      	b.n	806813a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8068134:	4b05      	ldr	r3, [pc, #20]	; (806814c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8068136:	60bb      	str	r3, [r7, #8]
      break;
 8068138:	bf00      	nop
    }
  }
  return sysclockfreq;
 806813a:	68bb      	ldr	r3, [r7, #8]
}
 806813c:	4618      	mov	r0, r3
 806813e:	3710      	adds	r7, #16
 8068140:	46bd      	mov	sp, r7
 8068142:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8068146:	bf00      	nop
 8068148:	40023800 	.word	0x40023800
 806814c:	00f42400 	.word	0x00f42400
 8068150:	007a1200 	.word	0x007a1200

08068154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8068154:	b480      	push	{r7}
 8068156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8068158:	4b03      	ldr	r3, [pc, #12]	; (8068168 <HAL_RCC_GetHCLKFreq+0x14>)
 806815a:	681b      	ldr	r3, [r3, #0]
}
 806815c:	4618      	mov	r0, r3
 806815e:	46bd      	mov	sp, r7
 8068160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068164:	4770      	bx	lr
 8068166:	bf00      	nop
 8068168:	20000000 	.word	0x20000000

0806816c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 806816c:	b580      	push	{r7, lr}
 806816e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8068170:	f7ff fff0 	bl	8068154 <HAL_RCC_GetHCLKFreq>
 8068174:	4602      	mov	r2, r0
 8068176:	4b05      	ldr	r3, [pc, #20]	; (806818c <HAL_RCC_GetPCLK1Freq+0x20>)
 8068178:	689b      	ldr	r3, [r3, #8]
 806817a:	0a9b      	lsrs	r3, r3, #10
 806817c:	f003 0307 	and.w	r3, r3, #7
 8068180:	4903      	ldr	r1, [pc, #12]	; (8068190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8068182:	5ccb      	ldrb	r3, [r1, r3]
 8068184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8068188:	4618      	mov	r0, r3
 806818a:	bd80      	pop	{r7, pc}
 806818c:	40023800 	.word	0x40023800
 8068190:	08077720 	.word	0x08077720

08068194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8068194:	b580      	push	{r7, lr}
 8068196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8068198:	f7ff ffdc 	bl	8068154 <HAL_RCC_GetHCLKFreq>
 806819c:	4602      	mov	r2, r0
 806819e:	4b05      	ldr	r3, [pc, #20]	; (80681b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80681a0:	689b      	ldr	r3, [r3, #8]
 80681a2:	0b5b      	lsrs	r3, r3, #13
 80681a4:	f003 0307 	and.w	r3, r3, #7
 80681a8:	4903      	ldr	r1, [pc, #12]	; (80681b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80681aa:	5ccb      	ldrb	r3, [r1, r3]
 80681ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80681b0:	4618      	mov	r0, r3
 80681b2:	bd80      	pop	{r7, pc}
 80681b4:	40023800 	.word	0x40023800
 80681b8:	08077720 	.word	0x08077720

080681bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80681bc:	b480      	push	{r7}
 80681be:	b083      	sub	sp, #12
 80681c0:	af00      	add	r7, sp, #0
 80681c2:	6078      	str	r0, [r7, #4]
 80681c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80681c6:	687b      	ldr	r3, [r7, #4]
 80681c8:	220f      	movs	r2, #15
 80681ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80681cc:	4b12      	ldr	r3, [pc, #72]	; (8068218 <HAL_RCC_GetClockConfig+0x5c>)
 80681ce:	689b      	ldr	r3, [r3, #8]
 80681d0:	f003 0203 	and.w	r2, r3, #3
 80681d4:	687b      	ldr	r3, [r7, #4]
 80681d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80681d8:	4b0f      	ldr	r3, [pc, #60]	; (8068218 <HAL_RCC_GetClockConfig+0x5c>)
 80681da:	689b      	ldr	r3, [r3, #8]
 80681dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80681e0:	687b      	ldr	r3, [r7, #4]
 80681e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80681e4:	4b0c      	ldr	r3, [pc, #48]	; (8068218 <HAL_RCC_GetClockConfig+0x5c>)
 80681e6:	689b      	ldr	r3, [r3, #8]
 80681e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80681ec:	687b      	ldr	r3, [r7, #4]
 80681ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80681f0:	4b09      	ldr	r3, [pc, #36]	; (8068218 <HAL_RCC_GetClockConfig+0x5c>)
 80681f2:	689b      	ldr	r3, [r3, #8]
 80681f4:	08db      	lsrs	r3, r3, #3
 80681f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80681fa:	687b      	ldr	r3, [r7, #4]
 80681fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80681fe:	4b07      	ldr	r3, [pc, #28]	; (806821c <HAL_RCC_GetClockConfig+0x60>)
 8068200:	681b      	ldr	r3, [r3, #0]
 8068202:	f003 0207 	and.w	r2, r3, #7
 8068206:	683b      	ldr	r3, [r7, #0]
 8068208:	601a      	str	r2, [r3, #0]
}
 806820a:	bf00      	nop
 806820c:	370c      	adds	r7, #12
 806820e:	46bd      	mov	sp, r7
 8068210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068214:	4770      	bx	lr
 8068216:	bf00      	nop
 8068218:	40023800 	.word	0x40023800
 806821c:	40023c00 	.word	0x40023c00

08068220 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8068220:	b580      	push	{r7, lr}
 8068222:	b086      	sub	sp, #24
 8068224:	af00      	add	r7, sp, #0
 8068226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8068228:	2300      	movs	r3, #0
 806822a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 806822c:	2300      	movs	r3, #0
 806822e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8068230:	687b      	ldr	r3, [r7, #4]
 8068232:	681b      	ldr	r3, [r3, #0]
 8068234:	2b00      	cmp	r3, #0
 8068236:	d003      	beq.n	8068240 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8068238:	687b      	ldr	r3, [r7, #4]
 806823a:	681b      	ldr	r3, [r3, #0]
 806823c:	2b0f      	cmp	r3, #15
 806823e:	d904      	bls.n	806824a <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8068240:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8068244:	489d      	ldr	r0, [pc, #628]	; (80684bc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8068246:	f7fa ff4a 	bl	80630de <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 806824a:	687b      	ldr	r3, [r7, #4]
 806824c:	681b      	ldr	r3, [r3, #0]
 806824e:	f003 0301 	and.w	r3, r3, #1
 8068252:	2b00      	cmp	r3, #0
 8068254:	d105      	bne.n	8068262 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8068256:	687b      	ldr	r3, [r7, #4]
 8068258:	681b      	ldr	r3, [r3, #0]
 806825a:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 806825e:	2b00      	cmp	r3, #0
 8068260:	d060      	beq.n	8068324 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8068262:	687b      	ldr	r3, [r7, #4]
 8068264:	68db      	ldr	r3, [r3, #12]
 8068266:	2b01      	cmp	r3, #1
 8068268:	d903      	bls.n	8068272 <HAL_RCCEx_PeriphCLKConfig+0x52>
 806826a:	687b      	ldr	r3, [r7, #4]
 806826c:	68db      	ldr	r3, [r3, #12]
 806826e:	2b07      	cmp	r3, #7
 8068270:	d904      	bls.n	806827c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8068272:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8068276:	4891      	ldr	r0, [pc, #580]	; (80684bc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8068278:	f7fa ff31 	bl	80630de <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 806827c:	687b      	ldr	r3, [r7, #4]
 806827e:	689b      	ldr	r3, [r3, #8]
 8068280:	2b31      	cmp	r3, #49	; 0x31
 8068282:	d904      	bls.n	806828e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8068284:	687b      	ldr	r3, [r7, #4]
 8068286:	689b      	ldr	r3, [r3, #8]
 8068288:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 806828c:	d904      	bls.n	8068298 <HAL_RCCEx_PeriphCLKConfig+0x78>
 806828e:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8068292:	488a      	ldr	r0, [pc, #552]	; (80684bc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8068294:	f7fa ff23 	bl	80630de <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8068298:	687b      	ldr	r3, [r7, #4]
 806829a:	685b      	ldr	r3, [r3, #4]
 806829c:	2b01      	cmp	r3, #1
 806829e:	d903      	bls.n	80682a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80682a0:	687b      	ldr	r3, [r7, #4]
 80682a2:	685b      	ldr	r3, [r3, #4]
 80682a4:	2b3f      	cmp	r3, #63	; 0x3f
 80682a6:	d904      	bls.n	80682b2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 80682a8:	f640 11e3 	movw	r1, #2531	; 0x9e3
 80682ac:	4883      	ldr	r0, [pc, #524]	; (80684bc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80682ae:	f7fa ff16 	bl	80630de <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80682b2:	4b83      	ldr	r3, [pc, #524]	; (80684c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80682b4:	2200      	movs	r2, #0
 80682b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80682b8:	f7fb fbdc 	bl	8063a74 <HAL_GetTick>
 80682bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80682be:	e008      	b.n	80682d2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80682c0:	f7fb fbd8 	bl	8063a74 <HAL_GetTick>
 80682c4:	4602      	mov	r2, r0
 80682c6:	697b      	ldr	r3, [r7, #20]
 80682c8:	1ad3      	subs	r3, r2, r3
 80682ca:	2b02      	cmp	r3, #2
 80682cc:	d901      	bls.n	80682d2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80682ce:	2303      	movs	r3, #3
 80682d0:	e1ae      	b.n	8068630 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80682d2:	4b7c      	ldr	r3, [pc, #496]	; (80684c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80682d4:	681b      	ldr	r3, [r3, #0]
 80682d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80682da:	2b00      	cmp	r3, #0
 80682dc:	d1f0      	bne.n	80682c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80682de:	687b      	ldr	r3, [r7, #4]
 80682e0:	685a      	ldr	r2, [r3, #4]
 80682e2:	687b      	ldr	r3, [r7, #4]
 80682e4:	689b      	ldr	r3, [r3, #8]
 80682e6:	019b      	lsls	r3, r3, #6
 80682e8:	431a      	orrs	r2, r3
 80682ea:	687b      	ldr	r3, [r7, #4]
 80682ec:	68db      	ldr	r3, [r3, #12]
 80682ee:	071b      	lsls	r3, r3, #28
 80682f0:	4974      	ldr	r1, [pc, #464]	; (80684c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80682f2:	4313      	orrs	r3, r2
 80682f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80682f8:	4b71      	ldr	r3, [pc, #452]	; (80684c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80682fa:	2201      	movs	r2, #1
 80682fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80682fe:	f7fb fbb9 	bl	8063a74 <HAL_GetTick>
 8068302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8068304:	e008      	b.n	8068318 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8068306:	f7fb fbb5 	bl	8063a74 <HAL_GetTick>
 806830a:	4602      	mov	r2, r0
 806830c:	697b      	ldr	r3, [r7, #20]
 806830e:	1ad3      	subs	r3, r2, r3
 8068310:	2b02      	cmp	r3, #2
 8068312:	d901      	bls.n	8068318 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8068314:	2303      	movs	r3, #3
 8068316:	e18b      	b.n	8068630 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8068318:	4b6a      	ldr	r3, [pc, #424]	; (80684c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 806831a:	681b      	ldr	r3, [r3, #0]
 806831c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8068320:	2b00      	cmp	r3, #0
 8068322:	d0f0      	beq.n	8068306 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8068324:	687b      	ldr	r3, [r7, #4]
 8068326:	681b      	ldr	r3, [r3, #0]
 8068328:	f003 0302 	and.w	r3, r3, #2
 806832c:	2b00      	cmp	r3, #0
 806832e:	f000 8174 	beq.w	806861a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8068332:	687b      	ldr	r3, [r7, #4]
 8068334:	691b      	ldr	r3, [r3, #16]
 8068336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806833a:	f000 80a6 	beq.w	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806833e:	687b      	ldr	r3, [r7, #4]
 8068340:	691b      	ldr	r3, [r3, #16]
 8068342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8068346:	f000 80a0 	beq.w	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806834a:	687b      	ldr	r3, [r7, #4]
 806834c:	691b      	ldr	r3, [r3, #16]
 806834e:	4a5e      	ldr	r2, [pc, #376]	; (80684c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8068350:	4293      	cmp	r3, r2
 8068352:	f000 809a 	beq.w	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068356:	687b      	ldr	r3, [r7, #4]
 8068358:	691b      	ldr	r3, [r3, #16]
 806835a:	4a5c      	ldr	r2, [pc, #368]	; (80684cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 806835c:	4293      	cmp	r3, r2
 806835e:	f000 8094 	beq.w	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068362:	687b      	ldr	r3, [r7, #4]
 8068364:	691b      	ldr	r3, [r3, #16]
 8068366:	4a5a      	ldr	r2, [pc, #360]	; (80684d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8068368:	4293      	cmp	r3, r2
 806836a:	f000 808e 	beq.w	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806836e:	687b      	ldr	r3, [r7, #4]
 8068370:	691b      	ldr	r3, [r3, #16]
 8068372:	4a58      	ldr	r2, [pc, #352]	; (80684d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8068374:	4293      	cmp	r3, r2
 8068376:	f000 8088 	beq.w	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806837a:	687b      	ldr	r3, [r7, #4]
 806837c:	691b      	ldr	r3, [r3, #16]
 806837e:	4a56      	ldr	r2, [pc, #344]	; (80684d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8068380:	4293      	cmp	r3, r2
 8068382:	f000 8082 	beq.w	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068386:	687b      	ldr	r3, [r7, #4]
 8068388:	691b      	ldr	r3, [r3, #16]
 806838a:	4a54      	ldr	r2, [pc, #336]	; (80684dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 806838c:	4293      	cmp	r3, r2
 806838e:	d07c      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068390:	687b      	ldr	r3, [r7, #4]
 8068392:	691b      	ldr	r3, [r3, #16]
 8068394:	4a52      	ldr	r2, [pc, #328]	; (80684e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8068396:	4293      	cmp	r3, r2
 8068398:	d077      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806839a:	687b      	ldr	r3, [r7, #4]
 806839c:	691b      	ldr	r3, [r3, #16]
 806839e:	4a51      	ldr	r2, [pc, #324]	; (80684e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80683a0:	4293      	cmp	r3, r2
 80683a2:	d072      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80683a4:	687b      	ldr	r3, [r7, #4]
 80683a6:	691b      	ldr	r3, [r3, #16]
 80683a8:	4a4f      	ldr	r2, [pc, #316]	; (80684e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80683aa:	4293      	cmp	r3, r2
 80683ac:	d06d      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80683ae:	687b      	ldr	r3, [r7, #4]
 80683b0:	691b      	ldr	r3, [r3, #16]
 80683b2:	4a4e      	ldr	r2, [pc, #312]	; (80684ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80683b4:	4293      	cmp	r3, r2
 80683b6:	d068      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80683b8:	687b      	ldr	r3, [r7, #4]
 80683ba:	691b      	ldr	r3, [r3, #16]
 80683bc:	4a4c      	ldr	r2, [pc, #304]	; (80684f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80683be:	4293      	cmp	r3, r2
 80683c0:	d063      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80683c2:	687b      	ldr	r3, [r7, #4]
 80683c4:	691b      	ldr	r3, [r3, #16]
 80683c6:	4a4b      	ldr	r2, [pc, #300]	; (80684f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80683c8:	4293      	cmp	r3, r2
 80683ca:	d05e      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80683cc:	687b      	ldr	r3, [r7, #4]
 80683ce:	691b      	ldr	r3, [r3, #16]
 80683d0:	4a49      	ldr	r2, [pc, #292]	; (80684f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80683d2:	4293      	cmp	r3, r2
 80683d4:	d059      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80683d6:	687b      	ldr	r3, [r7, #4]
 80683d8:	691b      	ldr	r3, [r3, #16]
 80683da:	4a48      	ldr	r2, [pc, #288]	; (80684fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80683dc:	4293      	cmp	r3, r2
 80683de:	d054      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80683e0:	687b      	ldr	r3, [r7, #4]
 80683e2:	691b      	ldr	r3, [r3, #16]
 80683e4:	4a46      	ldr	r2, [pc, #280]	; (8068500 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80683e6:	4293      	cmp	r3, r2
 80683e8:	d04f      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80683ea:	687b      	ldr	r3, [r7, #4]
 80683ec:	691b      	ldr	r3, [r3, #16]
 80683ee:	4a45      	ldr	r2, [pc, #276]	; (8068504 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80683f0:	4293      	cmp	r3, r2
 80683f2:	d04a      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80683f4:	687b      	ldr	r3, [r7, #4]
 80683f6:	691b      	ldr	r3, [r3, #16]
 80683f8:	4a43      	ldr	r2, [pc, #268]	; (8068508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80683fa:	4293      	cmp	r3, r2
 80683fc:	d045      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80683fe:	687b      	ldr	r3, [r7, #4]
 8068400:	691b      	ldr	r3, [r3, #16]
 8068402:	4a42      	ldr	r2, [pc, #264]	; (806850c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8068404:	4293      	cmp	r3, r2
 8068406:	d040      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068408:	687b      	ldr	r3, [r7, #4]
 806840a:	691b      	ldr	r3, [r3, #16]
 806840c:	4a40      	ldr	r2, [pc, #256]	; (8068510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 806840e:	4293      	cmp	r3, r2
 8068410:	d03b      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068412:	687b      	ldr	r3, [r7, #4]
 8068414:	691b      	ldr	r3, [r3, #16]
 8068416:	4a3f      	ldr	r2, [pc, #252]	; (8068514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8068418:	4293      	cmp	r3, r2
 806841a:	d036      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806841c:	687b      	ldr	r3, [r7, #4]
 806841e:	691b      	ldr	r3, [r3, #16]
 8068420:	4a3d      	ldr	r2, [pc, #244]	; (8068518 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8068422:	4293      	cmp	r3, r2
 8068424:	d031      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068426:	687b      	ldr	r3, [r7, #4]
 8068428:	691b      	ldr	r3, [r3, #16]
 806842a:	4a3c      	ldr	r2, [pc, #240]	; (806851c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 806842c:	4293      	cmp	r3, r2
 806842e:	d02c      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068430:	687b      	ldr	r3, [r7, #4]
 8068432:	691b      	ldr	r3, [r3, #16]
 8068434:	4a3a      	ldr	r2, [pc, #232]	; (8068520 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8068436:	4293      	cmp	r3, r2
 8068438:	d027      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806843a:	687b      	ldr	r3, [r7, #4]
 806843c:	691b      	ldr	r3, [r3, #16]
 806843e:	4a39      	ldr	r2, [pc, #228]	; (8068524 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8068440:	4293      	cmp	r3, r2
 8068442:	d022      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068444:	687b      	ldr	r3, [r7, #4]
 8068446:	691b      	ldr	r3, [r3, #16]
 8068448:	4a37      	ldr	r2, [pc, #220]	; (8068528 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 806844a:	4293      	cmp	r3, r2
 806844c:	d01d      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806844e:	687b      	ldr	r3, [r7, #4]
 8068450:	691b      	ldr	r3, [r3, #16]
 8068452:	4a36      	ldr	r2, [pc, #216]	; (806852c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8068454:	4293      	cmp	r3, r2
 8068456:	d018      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068458:	687b      	ldr	r3, [r7, #4]
 806845a:	691b      	ldr	r3, [r3, #16]
 806845c:	4a34      	ldr	r2, [pc, #208]	; (8068530 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 806845e:	4293      	cmp	r3, r2
 8068460:	d013      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068462:	687b      	ldr	r3, [r7, #4]
 8068464:	691b      	ldr	r3, [r3, #16]
 8068466:	4a33      	ldr	r2, [pc, #204]	; (8068534 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8068468:	4293      	cmp	r3, r2
 806846a:	d00e      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806846c:	687b      	ldr	r3, [r7, #4]
 806846e:	691b      	ldr	r3, [r3, #16]
 8068470:	4a31      	ldr	r2, [pc, #196]	; (8068538 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8068472:	4293      	cmp	r3, r2
 8068474:	d009      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068476:	687b      	ldr	r3, [r7, #4]
 8068478:	691b      	ldr	r3, [r3, #16]
 806847a:	4a30      	ldr	r2, [pc, #192]	; (806853c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 806847c:	4293      	cmp	r3, r2
 806847e:	d004      	beq.n	806848a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068480:	f640 2112 	movw	r1, #2578	; 0xa12
 8068484:	480d      	ldr	r0, [pc, #52]	; (80684bc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8068486:	f7fa fe2a 	bl	80630de <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 806848a:	2300      	movs	r3, #0
 806848c:	60fb      	str	r3, [r7, #12]
 806848e:	4b0d      	ldr	r3, [pc, #52]	; (80684c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8068490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8068492:	4a0c      	ldr	r2, [pc, #48]	; (80684c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8068494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8068498:	6413      	str	r3, [r2, #64]	; 0x40
 806849a:	4b0a      	ldr	r3, [pc, #40]	; (80684c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 806849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806849e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80684a2:	60fb      	str	r3, [r7, #12]
 80684a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80684a6:	4b26      	ldr	r3, [pc, #152]	; (8068540 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80684a8:	681b      	ldr	r3, [r3, #0]
 80684aa:	4a25      	ldr	r2, [pc, #148]	; (8068540 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80684ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80684b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80684b2:	f7fb fadf 	bl	8063a74 <HAL_GetTick>
 80684b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80684b8:	e04d      	b.n	8068556 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80684ba:	bf00      	nop
 80684bc:	0807741c 	.word	0x0807741c
 80684c0:	42470068 	.word	0x42470068
 80684c4:	40023800 	.word	0x40023800
 80684c8:	00020300 	.word	0x00020300
 80684cc:	00030300 	.word	0x00030300
 80684d0:	00040300 	.word	0x00040300
 80684d4:	00050300 	.word	0x00050300
 80684d8:	00060300 	.word	0x00060300
 80684dc:	00070300 	.word	0x00070300
 80684e0:	00080300 	.word	0x00080300
 80684e4:	00090300 	.word	0x00090300
 80684e8:	000a0300 	.word	0x000a0300
 80684ec:	000b0300 	.word	0x000b0300
 80684f0:	000c0300 	.word	0x000c0300
 80684f4:	000d0300 	.word	0x000d0300
 80684f8:	000e0300 	.word	0x000e0300
 80684fc:	000f0300 	.word	0x000f0300
 8068500:	00100300 	.word	0x00100300
 8068504:	00110300 	.word	0x00110300
 8068508:	00120300 	.word	0x00120300
 806850c:	00130300 	.word	0x00130300
 8068510:	00140300 	.word	0x00140300
 8068514:	00150300 	.word	0x00150300
 8068518:	00160300 	.word	0x00160300
 806851c:	00170300 	.word	0x00170300
 8068520:	00180300 	.word	0x00180300
 8068524:	00190300 	.word	0x00190300
 8068528:	001a0300 	.word	0x001a0300
 806852c:	001b0300 	.word	0x001b0300
 8068530:	001c0300 	.word	0x001c0300
 8068534:	001d0300 	.word	0x001d0300
 8068538:	001e0300 	.word	0x001e0300
 806853c:	001f0300 	.word	0x001f0300
 8068540:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8068544:	f7fb fa96 	bl	8063a74 <HAL_GetTick>
 8068548:	4602      	mov	r2, r0
 806854a:	697b      	ldr	r3, [r7, #20]
 806854c:	1ad3      	subs	r3, r2, r3
 806854e:	2b02      	cmp	r3, #2
 8068550:	d901      	bls.n	8068556 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8068552:	2303      	movs	r3, #3
 8068554:	e06c      	b.n	8068630 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8068556:	4b38      	ldr	r3, [pc, #224]	; (8068638 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8068558:	681b      	ldr	r3, [r3, #0]
 806855a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806855e:	2b00      	cmp	r3, #0
 8068560:	d0f0      	beq.n	8068544 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8068562:	4b36      	ldr	r3, [pc, #216]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8068564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8068566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 806856a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 806856c:	693b      	ldr	r3, [r7, #16]
 806856e:	2b00      	cmp	r3, #0
 8068570:	d02f      	beq.n	80685d2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8068572:	687b      	ldr	r3, [r7, #4]
 8068574:	691b      	ldr	r3, [r3, #16]
 8068576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 806857a:	693a      	ldr	r2, [r7, #16]
 806857c:	429a      	cmp	r2, r3
 806857e:	d028      	beq.n	80685d2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8068580:	4b2e      	ldr	r3, [pc, #184]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8068582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8068584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8068588:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 806858a:	4b2d      	ldr	r3, [pc, #180]	; (8068640 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 806858c:	2201      	movs	r2, #1
 806858e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8068590:	4b2b      	ldr	r3, [pc, #172]	; (8068640 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8068592:	2200      	movs	r2, #0
 8068594:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8068596:	4a29      	ldr	r2, [pc, #164]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8068598:	693b      	ldr	r3, [r7, #16]
 806859a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 806859c:	4b27      	ldr	r3, [pc, #156]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 806859e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80685a0:	f003 0301 	and.w	r3, r3, #1
 80685a4:	2b01      	cmp	r3, #1
 80685a6:	d114      	bne.n	80685d2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80685a8:	f7fb fa64 	bl	8063a74 <HAL_GetTick>
 80685ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80685ae:	e00a      	b.n	80685c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80685b0:	f7fb fa60 	bl	8063a74 <HAL_GetTick>
 80685b4:	4602      	mov	r2, r0
 80685b6:	697b      	ldr	r3, [r7, #20]
 80685b8:	1ad3      	subs	r3, r2, r3
 80685ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80685be:	4293      	cmp	r3, r2
 80685c0:	d901      	bls.n	80685c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 80685c2:	2303      	movs	r3, #3
 80685c4:	e034      	b.n	8068630 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80685c6:	4b1d      	ldr	r3, [pc, #116]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80685c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80685ca:	f003 0302 	and.w	r3, r3, #2
 80685ce:	2b00      	cmp	r3, #0
 80685d0:	d0ee      	beq.n	80685b0 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80685d2:	687b      	ldr	r3, [r7, #4]
 80685d4:	691b      	ldr	r3, [r3, #16]
 80685d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80685da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80685de:	d10d      	bne.n	80685fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80685e0:	4b16      	ldr	r3, [pc, #88]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80685e2:	689b      	ldr	r3, [r3, #8]
 80685e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80685e8:	687b      	ldr	r3, [r7, #4]
 80685ea:	691b      	ldr	r3, [r3, #16]
 80685ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80685f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80685f4:	4911      	ldr	r1, [pc, #68]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80685f6:	4313      	orrs	r3, r2
 80685f8:	608b      	str	r3, [r1, #8]
 80685fa:	e005      	b.n	8068608 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80685fc:	4b0f      	ldr	r3, [pc, #60]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80685fe:	689b      	ldr	r3, [r3, #8]
 8068600:	4a0e      	ldr	r2, [pc, #56]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8068602:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8068606:	6093      	str	r3, [r2, #8]
 8068608:	4b0c      	ldr	r3, [pc, #48]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 806860a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 806860c:	687b      	ldr	r3, [r7, #4]
 806860e:	691b      	ldr	r3, [r3, #16]
 8068610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8068614:	4909      	ldr	r1, [pc, #36]	; (806863c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8068616:	4313      	orrs	r3, r2
 8068618:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 806861a:	687b      	ldr	r3, [r7, #4]
 806861c:	681b      	ldr	r3, [r3, #0]
 806861e:	f003 0308 	and.w	r3, r3, #8
 8068622:	2b00      	cmp	r3, #0
 8068624:	d003      	beq.n	806862e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8068626:	687b      	ldr	r3, [r7, #4]
 8068628:	7d1a      	ldrb	r2, [r3, #20]
 806862a:	4b06      	ldr	r3, [pc, #24]	; (8068644 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 806862c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 806862e:	2300      	movs	r3, #0
}
 8068630:	4618      	mov	r0, r3
 8068632:	3718      	adds	r7, #24
 8068634:	46bd      	mov	sp, r7
 8068636:	bd80      	pop	{r7, pc}
 8068638:	40007000 	.word	0x40007000
 806863c:	40023800 	.word	0x40023800
 8068640:	42470e40 	.word	0x42470e40
 8068644:	424711e0 	.word	0x424711e0

08068648 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8068648:	b580      	push	{r7, lr}
 806864a:	b082      	sub	sp, #8
 806864c:	af00      	add	r7, sp, #0
 806864e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8068650:	687b      	ldr	r3, [r7, #4]
 8068652:	2b00      	cmp	r3, #0
 8068654:	d101      	bne.n	806865a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8068656:	2301      	movs	r3, #1
 8068658:	e0d6      	b.n	8068808 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 806865a:	687b      	ldr	r3, [r7, #4]
 806865c:	685b      	ldr	r3, [r3, #4]
 806865e:	2b40      	cmp	r3, #64	; 0x40
 8068660:	d007      	beq.n	8068672 <HAL_RTC_Init+0x2a>
 8068662:	687b      	ldr	r3, [r7, #4]
 8068664:	685b      	ldr	r3, [r3, #4]
 8068666:	2b00      	cmp	r3, #0
 8068668:	d003      	beq.n	8068672 <HAL_RTC_Init+0x2a>
 806866a:	21ff      	movs	r1, #255	; 0xff
 806866c:	4868      	ldr	r0, [pc, #416]	; (8068810 <HAL_RTC_Init+0x1c8>)
 806866e:	f7fa fd36 	bl	80630de <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8068672:	687b      	ldr	r3, [r7, #4]
 8068674:	689b      	ldr	r3, [r3, #8]
 8068676:	2b7f      	cmp	r3, #127	; 0x7f
 8068678:	d904      	bls.n	8068684 <HAL_RTC_Init+0x3c>
 806867a:	f44f 7180 	mov.w	r1, #256	; 0x100
 806867e:	4864      	ldr	r0, [pc, #400]	; (8068810 <HAL_RTC_Init+0x1c8>)
 8068680:	f7fa fd2d 	bl	80630de <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8068684:	687b      	ldr	r3, [r7, #4]
 8068686:	68db      	ldr	r3, [r3, #12]
 8068688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 806868c:	d304      	bcc.n	8068698 <HAL_RTC_Init+0x50>
 806868e:	f240 1101 	movw	r1, #257	; 0x101
 8068692:	485f      	ldr	r0, [pc, #380]	; (8068810 <HAL_RTC_Init+0x1c8>)
 8068694:	f7fa fd23 	bl	80630de <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8068698:	687b      	ldr	r3, [r7, #4]
 806869a:	691b      	ldr	r3, [r3, #16]
 806869c:	2b00      	cmp	r3, #0
 806869e:	d013      	beq.n	80686c8 <HAL_RTC_Init+0x80>
 80686a0:	687b      	ldr	r3, [r7, #4]
 80686a2:	691b      	ldr	r3, [r3, #16]
 80686a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80686a8:	d00e      	beq.n	80686c8 <HAL_RTC_Init+0x80>
 80686aa:	687b      	ldr	r3, [r7, #4]
 80686ac:	691b      	ldr	r3, [r3, #16]
 80686ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80686b2:	d009      	beq.n	80686c8 <HAL_RTC_Init+0x80>
 80686b4:	687b      	ldr	r3, [r7, #4]
 80686b6:	691b      	ldr	r3, [r3, #16]
 80686b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80686bc:	d004      	beq.n	80686c8 <HAL_RTC_Init+0x80>
 80686be:	f44f 7181 	mov.w	r1, #258	; 0x102
 80686c2:	4853      	ldr	r0, [pc, #332]	; (8068810 <HAL_RTC_Init+0x1c8>)
 80686c4:	f7fa fd0b 	bl	80630de <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80686c8:	687b      	ldr	r3, [r7, #4]
 80686ca:	695b      	ldr	r3, [r3, #20]
 80686cc:	2b00      	cmp	r3, #0
 80686ce:	d009      	beq.n	80686e4 <HAL_RTC_Init+0x9c>
 80686d0:	687b      	ldr	r3, [r7, #4]
 80686d2:	695b      	ldr	r3, [r3, #20]
 80686d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80686d8:	d004      	beq.n	80686e4 <HAL_RTC_Init+0x9c>
 80686da:	f240 1103 	movw	r1, #259	; 0x103
 80686de:	484c      	ldr	r0, [pc, #304]	; (8068810 <HAL_RTC_Init+0x1c8>)
 80686e0:	f7fa fcfd 	bl	80630de <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80686e4:	687b      	ldr	r3, [r7, #4]
 80686e6:	699b      	ldr	r3, [r3, #24]
 80686e8:	2b00      	cmp	r3, #0
 80686ea:	d009      	beq.n	8068700 <HAL_RTC_Init+0xb8>
 80686ec:	687b      	ldr	r3, [r7, #4]
 80686ee:	699b      	ldr	r3, [r3, #24]
 80686f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80686f4:	d004      	beq.n	8068700 <HAL_RTC_Init+0xb8>
 80686f6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80686fa:	4845      	ldr	r0, [pc, #276]	; (8068810 <HAL_RTC_Init+0x1c8>)
 80686fc:	f7fa fcef 	bl	80630de <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8068700:	687b      	ldr	r3, [r7, #4]
 8068702:	7f5b      	ldrb	r3, [r3, #29]
 8068704:	b2db      	uxtb	r3, r3
 8068706:	2b00      	cmp	r3, #0
 8068708:	d105      	bne.n	8068716 <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 806870a:	687b      	ldr	r3, [r7, #4]
 806870c:	2200      	movs	r2, #0
 806870e:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8068710:	6878      	ldr	r0, [r7, #4]
 8068712:	f7fa fda3 	bl	806325c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8068716:	687b      	ldr	r3, [r7, #4]
 8068718:	2202      	movs	r2, #2
 806871a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 806871c:	687b      	ldr	r3, [r7, #4]
 806871e:	681b      	ldr	r3, [r3, #0]
 8068720:	22ca      	movs	r2, #202	; 0xca
 8068722:	625a      	str	r2, [r3, #36]	; 0x24
 8068724:	687b      	ldr	r3, [r7, #4]
 8068726:	681b      	ldr	r3, [r3, #0]
 8068728:	2253      	movs	r2, #83	; 0x53
 806872a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 806872c:	6878      	ldr	r0, [r7, #4]
 806872e:	f000 f899 	bl	8068864 <RTC_EnterInitMode>
 8068732:	4603      	mov	r3, r0
 8068734:	2b00      	cmp	r3, #0
 8068736:	d008      	beq.n	806874a <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8068738:	687b      	ldr	r3, [r7, #4]
 806873a:	681b      	ldr	r3, [r3, #0]
 806873c:	22ff      	movs	r2, #255	; 0xff
 806873e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8068740:	687b      	ldr	r3, [r7, #4]
 8068742:	2204      	movs	r2, #4
 8068744:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8068746:	2301      	movs	r3, #1
 8068748:	e05e      	b.n	8068808 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 806874a:	687b      	ldr	r3, [r7, #4]
 806874c:	681b      	ldr	r3, [r3, #0]
 806874e:	689b      	ldr	r3, [r3, #8]
 8068750:	687a      	ldr	r2, [r7, #4]
 8068752:	6812      	ldr	r2, [r2, #0]
 8068754:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8068758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 806875c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 806875e:	687b      	ldr	r3, [r7, #4]
 8068760:	681b      	ldr	r3, [r3, #0]
 8068762:	6899      	ldr	r1, [r3, #8]
 8068764:	687b      	ldr	r3, [r7, #4]
 8068766:	685a      	ldr	r2, [r3, #4]
 8068768:	687b      	ldr	r3, [r7, #4]
 806876a:	691b      	ldr	r3, [r3, #16]
 806876c:	431a      	orrs	r2, r3
 806876e:	687b      	ldr	r3, [r7, #4]
 8068770:	695b      	ldr	r3, [r3, #20]
 8068772:	431a      	orrs	r2, r3
 8068774:	687b      	ldr	r3, [r7, #4]
 8068776:	681b      	ldr	r3, [r3, #0]
 8068778:	430a      	orrs	r2, r1
 806877a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 806877c:	687b      	ldr	r3, [r7, #4]
 806877e:	681b      	ldr	r3, [r3, #0]
 8068780:	687a      	ldr	r2, [r7, #4]
 8068782:	68d2      	ldr	r2, [r2, #12]
 8068784:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8068786:	687b      	ldr	r3, [r7, #4]
 8068788:	681b      	ldr	r3, [r3, #0]
 806878a:	6919      	ldr	r1, [r3, #16]
 806878c:	687b      	ldr	r3, [r7, #4]
 806878e:	689b      	ldr	r3, [r3, #8]
 8068790:	041a      	lsls	r2, r3, #16
 8068792:	687b      	ldr	r3, [r7, #4]
 8068794:	681b      	ldr	r3, [r3, #0]
 8068796:	430a      	orrs	r2, r1
 8068798:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 806879a:	687b      	ldr	r3, [r7, #4]
 806879c:	681b      	ldr	r3, [r3, #0]
 806879e:	68da      	ldr	r2, [r3, #12]
 80687a0:	687b      	ldr	r3, [r7, #4]
 80687a2:	681b      	ldr	r3, [r3, #0]
 80687a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80687a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80687aa:	687b      	ldr	r3, [r7, #4]
 80687ac:	681b      	ldr	r3, [r3, #0]
 80687ae:	689b      	ldr	r3, [r3, #8]
 80687b0:	f003 0320 	and.w	r3, r3, #32
 80687b4:	2b00      	cmp	r3, #0
 80687b6:	d10e      	bne.n	80687d6 <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80687b8:	6878      	ldr	r0, [r7, #4]
 80687ba:	f000 f82b 	bl	8068814 <HAL_RTC_WaitForSynchro>
 80687be:	4603      	mov	r3, r0
 80687c0:	2b00      	cmp	r3, #0
 80687c2:	d008      	beq.n	80687d6 <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80687c4:	687b      	ldr	r3, [r7, #4]
 80687c6:	681b      	ldr	r3, [r3, #0]
 80687c8:	22ff      	movs	r2, #255	; 0xff
 80687ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80687cc:	687b      	ldr	r3, [r7, #4]
 80687ce:	2204      	movs	r2, #4
 80687d0:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80687d2:	2301      	movs	r3, #1
 80687d4:	e018      	b.n	8068808 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80687d6:	687b      	ldr	r3, [r7, #4]
 80687d8:	681b      	ldr	r3, [r3, #0]
 80687da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80687dc:	687b      	ldr	r3, [r7, #4]
 80687de:	681b      	ldr	r3, [r3, #0]
 80687e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80687e4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80687e6:	687b      	ldr	r3, [r7, #4]
 80687e8:	681b      	ldr	r3, [r3, #0]
 80687ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80687ec:	687b      	ldr	r3, [r7, #4]
 80687ee:	699a      	ldr	r2, [r3, #24]
 80687f0:	687b      	ldr	r3, [r7, #4]
 80687f2:	681b      	ldr	r3, [r3, #0]
 80687f4:	430a      	orrs	r2, r1
 80687f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80687f8:	687b      	ldr	r3, [r7, #4]
 80687fa:	681b      	ldr	r3, [r3, #0]
 80687fc:	22ff      	movs	r2, #255	; 0xff
 80687fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8068800:	687b      	ldr	r3, [r7, #4]
 8068802:	2201      	movs	r2, #1
 8068804:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8068806:	2300      	movs	r3, #0
  }
}
 8068808:	4618      	mov	r0, r3
 806880a:	3708      	adds	r7, #8
 806880c:	46bd      	mov	sp, r7
 806880e:	bd80      	pop	{r7, pc}
 8068810:	08077458 	.word	0x08077458

08068814 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8068814:	b580      	push	{r7, lr}
 8068816:	b084      	sub	sp, #16
 8068818:	af00      	add	r7, sp, #0
 806881a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 806881c:	2300      	movs	r3, #0
 806881e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8068820:	687b      	ldr	r3, [r7, #4]
 8068822:	681b      	ldr	r3, [r3, #0]
 8068824:	68da      	ldr	r2, [r3, #12]
 8068826:	687b      	ldr	r3, [r7, #4]
 8068828:	681b      	ldr	r3, [r3, #0]
 806882a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 806882e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8068830:	f7fb f920 	bl	8063a74 <HAL_GetTick>
 8068834:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8068836:	e009      	b.n	806884c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8068838:	f7fb f91c 	bl	8063a74 <HAL_GetTick>
 806883c:	4602      	mov	r2, r0
 806883e:	68fb      	ldr	r3, [r7, #12]
 8068840:	1ad3      	subs	r3, r2, r3
 8068842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8068846:	d901      	bls.n	806884c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8068848:	2303      	movs	r3, #3
 806884a:	e007      	b.n	806885c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 806884c:	687b      	ldr	r3, [r7, #4]
 806884e:	681b      	ldr	r3, [r3, #0]
 8068850:	68db      	ldr	r3, [r3, #12]
 8068852:	f003 0320 	and.w	r3, r3, #32
 8068856:	2b00      	cmp	r3, #0
 8068858:	d0ee      	beq.n	8068838 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 806885a:	2300      	movs	r3, #0
}
 806885c:	4618      	mov	r0, r3
 806885e:	3710      	adds	r7, #16
 8068860:	46bd      	mov	sp, r7
 8068862:	bd80      	pop	{r7, pc}

08068864 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8068864:	b580      	push	{r7, lr}
 8068866:	b084      	sub	sp, #16
 8068868:	af00      	add	r7, sp, #0
 806886a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 806886c:	2300      	movs	r3, #0
 806886e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8068870:	687b      	ldr	r3, [r7, #4]
 8068872:	681b      	ldr	r3, [r3, #0]
 8068874:	68db      	ldr	r3, [r3, #12]
 8068876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806887a:	2b00      	cmp	r3, #0
 806887c:	d119      	bne.n	80688b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 806887e:	687b      	ldr	r3, [r7, #4]
 8068880:	681b      	ldr	r3, [r3, #0]
 8068882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8068886:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8068888:	f7fb f8f4 	bl	8063a74 <HAL_GetTick>
 806888c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 806888e:	e009      	b.n	80688a4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8068890:	f7fb f8f0 	bl	8063a74 <HAL_GetTick>
 8068894:	4602      	mov	r2, r0
 8068896:	68fb      	ldr	r3, [r7, #12]
 8068898:	1ad3      	subs	r3, r2, r3
 806889a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 806889e:	d901      	bls.n	80688a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80688a0:	2303      	movs	r3, #3
 80688a2:	e007      	b.n	80688b4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80688a4:	687b      	ldr	r3, [r7, #4]
 80688a6:	681b      	ldr	r3, [r3, #0]
 80688a8:	68db      	ldr	r3, [r3, #12]
 80688aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80688ae:	2b00      	cmp	r3, #0
 80688b0:	d0ee      	beq.n	8068890 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80688b2:	2300      	movs	r3, #0
}
 80688b4:	4618      	mov	r0, r3
 80688b6:	3710      	adds	r7, #16
 80688b8:	46bd      	mov	sp, r7
 80688ba:	bd80      	pop	{r7, pc}

080688bc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80688bc:	b580      	push	{r7, lr}
 80688be:	b086      	sub	sp, #24
 80688c0:	af00      	add	r7, sp, #0
 80688c2:	60f8      	str	r0, [r7, #12]
 80688c4:	60b9      	str	r1, [r7, #8]
 80688c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80688c8:	2300      	movs	r3, #0
 80688ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 80688cc:	68bb      	ldr	r3, [r7, #8]
 80688ce:	2b00      	cmp	r3, #0
 80688d0:	d03d      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 80688d2:	68bb      	ldr	r3, [r7, #8]
 80688d4:	2b01      	cmp	r3, #1
 80688d6:	d03a      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 80688d8:	68bb      	ldr	r3, [r7, #8]
 80688da:	2b02      	cmp	r3, #2
 80688dc:	d037      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 80688de:	68bb      	ldr	r3, [r7, #8]
 80688e0:	2b03      	cmp	r3, #3
 80688e2:	d034      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 80688e4:	68bb      	ldr	r3, [r7, #8]
 80688e6:	2b04      	cmp	r3, #4
 80688e8:	d031      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 80688ea:	68bb      	ldr	r3, [r7, #8]
 80688ec:	2b05      	cmp	r3, #5
 80688ee:	d02e      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 80688f0:	68bb      	ldr	r3, [r7, #8]
 80688f2:	2b06      	cmp	r3, #6
 80688f4:	d02b      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 80688f6:	68bb      	ldr	r3, [r7, #8]
 80688f8:	2b07      	cmp	r3, #7
 80688fa:	d028      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 80688fc:	68bb      	ldr	r3, [r7, #8]
 80688fe:	2b08      	cmp	r3, #8
 8068900:	d025      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 8068902:	68bb      	ldr	r3, [r7, #8]
 8068904:	2b09      	cmp	r3, #9
 8068906:	d022      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 8068908:	68bb      	ldr	r3, [r7, #8]
 806890a:	2b0a      	cmp	r3, #10
 806890c:	d01f      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 806890e:	68bb      	ldr	r3, [r7, #8]
 8068910:	2b0b      	cmp	r3, #11
 8068912:	d01c      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 8068914:	68bb      	ldr	r3, [r7, #8]
 8068916:	2b0c      	cmp	r3, #12
 8068918:	d019      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 806891a:	68bb      	ldr	r3, [r7, #8]
 806891c:	2b0d      	cmp	r3, #13
 806891e:	d016      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 8068920:	68bb      	ldr	r3, [r7, #8]
 8068922:	2b0e      	cmp	r3, #14
 8068924:	d013      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 8068926:	68bb      	ldr	r3, [r7, #8]
 8068928:	2b0f      	cmp	r3, #15
 806892a:	d010      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 806892c:	68bb      	ldr	r3, [r7, #8]
 806892e:	2b10      	cmp	r3, #16
 8068930:	d00d      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 8068932:	68bb      	ldr	r3, [r7, #8]
 8068934:	2b11      	cmp	r3, #17
 8068936:	d00a      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 8068938:	68bb      	ldr	r3, [r7, #8]
 806893a:	2b12      	cmp	r3, #18
 806893c:	d007      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 806893e:	68bb      	ldr	r3, [r7, #8]
 8068940:	2b13      	cmp	r3, #19
 8068942:	d004      	beq.n	806894e <HAL_RTCEx_BKUPWrite+0x92>
 8068944:	f240 416c 	movw	r1, #1132	; 0x46c
 8068948:	4809      	ldr	r0, [pc, #36]	; (8068970 <HAL_RTCEx_BKUPWrite+0xb4>)
 806894a:	f7fa fbc8 	bl	80630de <assert_failed>

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 806894e:	68fb      	ldr	r3, [r7, #12]
 8068950:	681b      	ldr	r3, [r3, #0]
 8068952:	3350      	adds	r3, #80	; 0x50
 8068954:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8068956:	68bb      	ldr	r3, [r7, #8]
 8068958:	009b      	lsls	r3, r3, #2
 806895a:	697a      	ldr	r2, [r7, #20]
 806895c:	4413      	add	r3, r2
 806895e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8068960:	697b      	ldr	r3, [r7, #20]
 8068962:	687a      	ldr	r2, [r7, #4]
 8068964:	601a      	str	r2, [r3, #0]
}
 8068966:	bf00      	nop
 8068968:	3718      	adds	r7, #24
 806896a:	46bd      	mov	sp, r7
 806896c:	bd80      	pop	{r7, pc}
 806896e:	bf00      	nop
 8068970:	08077490 	.word	0x08077490

08068974 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8068974:	b580      	push	{r7, lr}
 8068976:	b082      	sub	sp, #8
 8068978:	af00      	add	r7, sp, #0
 806897a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 806897c:	687b      	ldr	r3, [r7, #4]
 806897e:	2b00      	cmp	r3, #0
 8068980:	d101      	bne.n	8068986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8068982:	2301      	movs	r3, #1
 8068984:	e18c      	b.n	8068ca0 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8068986:	687b      	ldr	r3, [r7, #4]
 8068988:	681b      	ldr	r3, [r3, #0]
 806898a:	4a75      	ldr	r2, [pc, #468]	; (8068b60 <HAL_SPI_Init+0x1ec>)
 806898c:	4293      	cmp	r3, r2
 806898e:	d018      	beq.n	80689c2 <HAL_SPI_Init+0x4e>
 8068990:	687b      	ldr	r3, [r7, #4]
 8068992:	681b      	ldr	r3, [r3, #0]
 8068994:	4a73      	ldr	r2, [pc, #460]	; (8068b64 <HAL_SPI_Init+0x1f0>)
 8068996:	4293      	cmp	r3, r2
 8068998:	d013      	beq.n	80689c2 <HAL_SPI_Init+0x4e>
 806899a:	687b      	ldr	r3, [r7, #4]
 806899c:	681b      	ldr	r3, [r3, #0]
 806899e:	4a72      	ldr	r2, [pc, #456]	; (8068b68 <HAL_SPI_Init+0x1f4>)
 80689a0:	4293      	cmp	r3, r2
 80689a2:	d00e      	beq.n	80689c2 <HAL_SPI_Init+0x4e>
 80689a4:	687b      	ldr	r3, [r7, #4]
 80689a6:	681b      	ldr	r3, [r3, #0]
 80689a8:	4a70      	ldr	r2, [pc, #448]	; (8068b6c <HAL_SPI_Init+0x1f8>)
 80689aa:	4293      	cmp	r3, r2
 80689ac:	d009      	beq.n	80689c2 <HAL_SPI_Init+0x4e>
 80689ae:	687b      	ldr	r3, [r7, #4]
 80689b0:	681b      	ldr	r3, [r3, #0]
 80689b2:	4a6f      	ldr	r2, [pc, #444]	; (8068b70 <HAL_SPI_Init+0x1fc>)
 80689b4:	4293      	cmp	r3, r2
 80689b6:	d004      	beq.n	80689c2 <HAL_SPI_Init+0x4e>
 80689b8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80689bc:	486d      	ldr	r0, [pc, #436]	; (8068b74 <HAL_SPI_Init+0x200>)
 80689be:	f7fa fb8e 	bl	80630de <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80689c2:	687b      	ldr	r3, [r7, #4]
 80689c4:	685b      	ldr	r3, [r3, #4]
 80689c6:	2b00      	cmp	r3, #0
 80689c8:	d009      	beq.n	80689de <HAL_SPI_Init+0x6a>
 80689ca:	687b      	ldr	r3, [r7, #4]
 80689cc:	685b      	ldr	r3, [r3, #4]
 80689ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80689d2:	d004      	beq.n	80689de <HAL_SPI_Init+0x6a>
 80689d4:	f240 1143 	movw	r1, #323	; 0x143
 80689d8:	4866      	ldr	r0, [pc, #408]	; (8068b74 <HAL_SPI_Init+0x200>)
 80689da:	f7fa fb80 	bl	80630de <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80689de:	687b      	ldr	r3, [r7, #4]
 80689e0:	689b      	ldr	r3, [r3, #8]
 80689e2:	2b00      	cmp	r3, #0
 80689e4:	d00e      	beq.n	8068a04 <HAL_SPI_Init+0x90>
 80689e6:	687b      	ldr	r3, [r7, #4]
 80689e8:	689b      	ldr	r3, [r3, #8]
 80689ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80689ee:	d009      	beq.n	8068a04 <HAL_SPI_Init+0x90>
 80689f0:	687b      	ldr	r3, [r7, #4]
 80689f2:	689b      	ldr	r3, [r3, #8]
 80689f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80689f8:	d004      	beq.n	8068a04 <HAL_SPI_Init+0x90>
 80689fa:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80689fe:	485d      	ldr	r0, [pc, #372]	; (8068b74 <HAL_SPI_Init+0x200>)
 8068a00:	f7fa fb6d 	bl	80630de <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8068a04:	687b      	ldr	r3, [r7, #4]
 8068a06:	68db      	ldr	r3, [r3, #12]
 8068a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8068a0c:	d008      	beq.n	8068a20 <HAL_SPI_Init+0xac>
 8068a0e:	687b      	ldr	r3, [r7, #4]
 8068a10:	68db      	ldr	r3, [r3, #12]
 8068a12:	2b00      	cmp	r3, #0
 8068a14:	d004      	beq.n	8068a20 <HAL_SPI_Init+0xac>
 8068a16:	f240 1145 	movw	r1, #325	; 0x145
 8068a1a:	4856      	ldr	r0, [pc, #344]	; (8068b74 <HAL_SPI_Init+0x200>)
 8068a1c:	f7fa fb5f 	bl	80630de <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8068a20:	687b      	ldr	r3, [r7, #4]
 8068a22:	699b      	ldr	r3, [r3, #24]
 8068a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8068a28:	d00d      	beq.n	8068a46 <HAL_SPI_Init+0xd2>
 8068a2a:	687b      	ldr	r3, [r7, #4]
 8068a2c:	699b      	ldr	r3, [r3, #24]
 8068a2e:	2b00      	cmp	r3, #0
 8068a30:	d009      	beq.n	8068a46 <HAL_SPI_Init+0xd2>
 8068a32:	687b      	ldr	r3, [r7, #4]
 8068a34:	699b      	ldr	r3, [r3, #24]
 8068a36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8068a3a:	d004      	beq.n	8068a46 <HAL_SPI_Init+0xd2>
 8068a3c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8068a40:	484c      	ldr	r0, [pc, #304]	; (8068b74 <HAL_SPI_Init+0x200>)
 8068a42:	f7fa fb4c 	bl	80630de <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8068a46:	687b      	ldr	r3, [r7, #4]
 8068a48:	69db      	ldr	r3, [r3, #28]
 8068a4a:	2b00      	cmp	r3, #0
 8068a4c:	d020      	beq.n	8068a90 <HAL_SPI_Init+0x11c>
 8068a4e:	687b      	ldr	r3, [r7, #4]
 8068a50:	69db      	ldr	r3, [r3, #28]
 8068a52:	2b08      	cmp	r3, #8
 8068a54:	d01c      	beq.n	8068a90 <HAL_SPI_Init+0x11c>
 8068a56:	687b      	ldr	r3, [r7, #4]
 8068a58:	69db      	ldr	r3, [r3, #28]
 8068a5a:	2b10      	cmp	r3, #16
 8068a5c:	d018      	beq.n	8068a90 <HAL_SPI_Init+0x11c>
 8068a5e:	687b      	ldr	r3, [r7, #4]
 8068a60:	69db      	ldr	r3, [r3, #28]
 8068a62:	2b18      	cmp	r3, #24
 8068a64:	d014      	beq.n	8068a90 <HAL_SPI_Init+0x11c>
 8068a66:	687b      	ldr	r3, [r7, #4]
 8068a68:	69db      	ldr	r3, [r3, #28]
 8068a6a:	2b20      	cmp	r3, #32
 8068a6c:	d010      	beq.n	8068a90 <HAL_SPI_Init+0x11c>
 8068a6e:	687b      	ldr	r3, [r7, #4]
 8068a70:	69db      	ldr	r3, [r3, #28]
 8068a72:	2b28      	cmp	r3, #40	; 0x28
 8068a74:	d00c      	beq.n	8068a90 <HAL_SPI_Init+0x11c>
 8068a76:	687b      	ldr	r3, [r7, #4]
 8068a78:	69db      	ldr	r3, [r3, #28]
 8068a7a:	2b30      	cmp	r3, #48	; 0x30
 8068a7c:	d008      	beq.n	8068a90 <HAL_SPI_Init+0x11c>
 8068a7e:	687b      	ldr	r3, [r7, #4]
 8068a80:	69db      	ldr	r3, [r3, #28]
 8068a82:	2b38      	cmp	r3, #56	; 0x38
 8068a84:	d004      	beq.n	8068a90 <HAL_SPI_Init+0x11c>
 8068a86:	f240 1147 	movw	r1, #327	; 0x147
 8068a8a:	483a      	ldr	r0, [pc, #232]	; (8068b74 <HAL_SPI_Init+0x200>)
 8068a8c:	f7fa fb27 	bl	80630de <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8068a90:	687b      	ldr	r3, [r7, #4]
 8068a92:	6a1b      	ldr	r3, [r3, #32]
 8068a94:	2b00      	cmp	r3, #0
 8068a96:	d008      	beq.n	8068aaa <HAL_SPI_Init+0x136>
 8068a98:	687b      	ldr	r3, [r7, #4]
 8068a9a:	6a1b      	ldr	r3, [r3, #32]
 8068a9c:	2b80      	cmp	r3, #128	; 0x80
 8068a9e:	d004      	beq.n	8068aaa <HAL_SPI_Init+0x136>
 8068aa0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8068aa4:	4833      	ldr	r0, [pc, #204]	; (8068b74 <HAL_SPI_Init+0x200>)
 8068aa6:	f7fa fb1a 	bl	80630de <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8068aaa:	687b      	ldr	r3, [r7, #4]
 8068aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8068aae:	2b00      	cmp	r3, #0
 8068ab0:	d008      	beq.n	8068ac4 <HAL_SPI_Init+0x150>
 8068ab2:	687b      	ldr	r3, [r7, #4]
 8068ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8068ab6:	2b10      	cmp	r3, #16
 8068ab8:	d004      	beq.n	8068ac4 <HAL_SPI_Init+0x150>
 8068aba:	f240 1149 	movw	r1, #329	; 0x149
 8068abe:	482d      	ldr	r0, [pc, #180]	; (8068b74 <HAL_SPI_Init+0x200>)
 8068ac0:	f7fa fb0d 	bl	80630de <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8068ac4:	687b      	ldr	r3, [r7, #4]
 8068ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8068ac8:	2b00      	cmp	r3, #0
 8068aca:	d155      	bne.n	8068b78 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8068acc:	687b      	ldr	r3, [r7, #4]
 8068ace:	691b      	ldr	r3, [r3, #16]
 8068ad0:	2b00      	cmp	r3, #0
 8068ad2:	d008      	beq.n	8068ae6 <HAL_SPI_Init+0x172>
 8068ad4:	687b      	ldr	r3, [r7, #4]
 8068ad6:	691b      	ldr	r3, [r3, #16]
 8068ad8:	2b02      	cmp	r3, #2
 8068ada:	d004      	beq.n	8068ae6 <HAL_SPI_Init+0x172>
 8068adc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8068ae0:	4824      	ldr	r0, [pc, #144]	; (8068b74 <HAL_SPI_Init+0x200>)
 8068ae2:	f7fa fafc 	bl	80630de <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8068ae6:	687b      	ldr	r3, [r7, #4]
 8068ae8:	695b      	ldr	r3, [r3, #20]
 8068aea:	2b00      	cmp	r3, #0
 8068aec:	d008      	beq.n	8068b00 <HAL_SPI_Init+0x18c>
 8068aee:	687b      	ldr	r3, [r7, #4]
 8068af0:	695b      	ldr	r3, [r3, #20]
 8068af2:	2b01      	cmp	r3, #1
 8068af4:	d004      	beq.n	8068b00 <HAL_SPI_Init+0x18c>
 8068af6:	f240 114d 	movw	r1, #333	; 0x14d
 8068afa:	481e      	ldr	r0, [pc, #120]	; (8068b74 <HAL_SPI_Init+0x200>)
 8068afc:	f7fa faef 	bl	80630de <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8068b00:	687b      	ldr	r3, [r7, #4]
 8068b02:	685b      	ldr	r3, [r3, #4]
 8068b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8068b08:	d125      	bne.n	8068b56 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8068b0a:	687b      	ldr	r3, [r7, #4]
 8068b0c:	69db      	ldr	r3, [r3, #28]
 8068b0e:	2b00      	cmp	r3, #0
 8068b10:	d05d      	beq.n	8068bce <HAL_SPI_Init+0x25a>
 8068b12:	687b      	ldr	r3, [r7, #4]
 8068b14:	69db      	ldr	r3, [r3, #28]
 8068b16:	2b08      	cmp	r3, #8
 8068b18:	d059      	beq.n	8068bce <HAL_SPI_Init+0x25a>
 8068b1a:	687b      	ldr	r3, [r7, #4]
 8068b1c:	69db      	ldr	r3, [r3, #28]
 8068b1e:	2b10      	cmp	r3, #16
 8068b20:	d055      	beq.n	8068bce <HAL_SPI_Init+0x25a>
 8068b22:	687b      	ldr	r3, [r7, #4]
 8068b24:	69db      	ldr	r3, [r3, #28]
 8068b26:	2b18      	cmp	r3, #24
 8068b28:	d051      	beq.n	8068bce <HAL_SPI_Init+0x25a>
 8068b2a:	687b      	ldr	r3, [r7, #4]
 8068b2c:	69db      	ldr	r3, [r3, #28]
 8068b2e:	2b20      	cmp	r3, #32
 8068b30:	d04d      	beq.n	8068bce <HAL_SPI_Init+0x25a>
 8068b32:	687b      	ldr	r3, [r7, #4]
 8068b34:	69db      	ldr	r3, [r3, #28]
 8068b36:	2b28      	cmp	r3, #40	; 0x28
 8068b38:	d049      	beq.n	8068bce <HAL_SPI_Init+0x25a>
 8068b3a:	687b      	ldr	r3, [r7, #4]
 8068b3c:	69db      	ldr	r3, [r3, #28]
 8068b3e:	2b30      	cmp	r3, #48	; 0x30
 8068b40:	d045      	beq.n	8068bce <HAL_SPI_Init+0x25a>
 8068b42:	687b      	ldr	r3, [r7, #4]
 8068b44:	69db      	ldr	r3, [r3, #28]
 8068b46:	2b38      	cmp	r3, #56	; 0x38
 8068b48:	d041      	beq.n	8068bce <HAL_SPI_Init+0x25a>
 8068b4a:	f240 1151 	movw	r1, #337	; 0x151
 8068b4e:	4809      	ldr	r0, [pc, #36]	; (8068b74 <HAL_SPI_Init+0x200>)
 8068b50:	f7fa fac5 	bl	80630de <assert_failed>
 8068b54:	e03b      	b.n	8068bce <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8068b56:	687b      	ldr	r3, [r7, #4]
 8068b58:	2200      	movs	r2, #0
 8068b5a:	61da      	str	r2, [r3, #28]
 8068b5c:	e037      	b.n	8068bce <HAL_SPI_Init+0x25a>
 8068b5e:	bf00      	nop
 8068b60:	40013000 	.word	0x40013000
 8068b64:	40003800 	.word	0x40003800
 8068b68:	40003c00 	.word	0x40003c00
 8068b6c:	40013400 	.word	0x40013400
 8068b70:	40015000 	.word	0x40015000
 8068b74:	080774cc 	.word	0x080774cc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8068b78:	687b      	ldr	r3, [r7, #4]
 8068b7a:	69db      	ldr	r3, [r3, #28]
 8068b7c:	2b00      	cmp	r3, #0
 8068b7e:	d020      	beq.n	8068bc2 <HAL_SPI_Init+0x24e>
 8068b80:	687b      	ldr	r3, [r7, #4]
 8068b82:	69db      	ldr	r3, [r3, #28]
 8068b84:	2b08      	cmp	r3, #8
 8068b86:	d01c      	beq.n	8068bc2 <HAL_SPI_Init+0x24e>
 8068b88:	687b      	ldr	r3, [r7, #4]
 8068b8a:	69db      	ldr	r3, [r3, #28]
 8068b8c:	2b10      	cmp	r3, #16
 8068b8e:	d018      	beq.n	8068bc2 <HAL_SPI_Init+0x24e>
 8068b90:	687b      	ldr	r3, [r7, #4]
 8068b92:	69db      	ldr	r3, [r3, #28]
 8068b94:	2b18      	cmp	r3, #24
 8068b96:	d014      	beq.n	8068bc2 <HAL_SPI_Init+0x24e>
 8068b98:	687b      	ldr	r3, [r7, #4]
 8068b9a:	69db      	ldr	r3, [r3, #28]
 8068b9c:	2b20      	cmp	r3, #32
 8068b9e:	d010      	beq.n	8068bc2 <HAL_SPI_Init+0x24e>
 8068ba0:	687b      	ldr	r3, [r7, #4]
 8068ba2:	69db      	ldr	r3, [r3, #28]
 8068ba4:	2b28      	cmp	r3, #40	; 0x28
 8068ba6:	d00c      	beq.n	8068bc2 <HAL_SPI_Init+0x24e>
 8068ba8:	687b      	ldr	r3, [r7, #4]
 8068baa:	69db      	ldr	r3, [r3, #28]
 8068bac:	2b30      	cmp	r3, #48	; 0x30
 8068bae:	d008      	beq.n	8068bc2 <HAL_SPI_Init+0x24e>
 8068bb0:	687b      	ldr	r3, [r7, #4]
 8068bb2:	69db      	ldr	r3, [r3, #28]
 8068bb4:	2b38      	cmp	r3, #56	; 0x38
 8068bb6:	d004      	beq.n	8068bc2 <HAL_SPI_Init+0x24e>
 8068bb8:	f240 115b 	movw	r1, #347	; 0x15b
 8068bbc:	483a      	ldr	r0, [pc, #232]	; (8068ca8 <HAL_SPI_Init+0x334>)
 8068bbe:	f7fa fa8e 	bl	80630de <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8068bc2:	687b      	ldr	r3, [r7, #4]
 8068bc4:	2200      	movs	r2, #0
 8068bc6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8068bc8:	687b      	ldr	r3, [r7, #4]
 8068bca:	2200      	movs	r2, #0
 8068bcc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8068bce:	687b      	ldr	r3, [r7, #4]
 8068bd0:	2200      	movs	r2, #0
 8068bd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8068bd4:	687b      	ldr	r3, [r7, #4]
 8068bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8068bda:	b2db      	uxtb	r3, r3
 8068bdc:	2b00      	cmp	r3, #0
 8068bde:	d106      	bne.n	8068bee <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8068be0:	687b      	ldr	r3, [r7, #4]
 8068be2:	2200      	movs	r2, #0
 8068be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8068be8:	6878      	ldr	r0, [r7, #4]
 8068bea:	f7fa fb99 	bl	8063320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8068bee:	687b      	ldr	r3, [r7, #4]
 8068bf0:	2202      	movs	r2, #2
 8068bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8068bf6:	687b      	ldr	r3, [r7, #4]
 8068bf8:	681b      	ldr	r3, [r3, #0]
 8068bfa:	681a      	ldr	r2, [r3, #0]
 8068bfc:	687b      	ldr	r3, [r7, #4]
 8068bfe:	681b      	ldr	r3, [r3, #0]
 8068c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8068c04:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8068c06:	687b      	ldr	r3, [r7, #4]
 8068c08:	685b      	ldr	r3, [r3, #4]
 8068c0a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8068c0e:	687b      	ldr	r3, [r7, #4]
 8068c10:	689b      	ldr	r3, [r3, #8]
 8068c12:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8068c16:	431a      	orrs	r2, r3
 8068c18:	687b      	ldr	r3, [r7, #4]
 8068c1a:	68db      	ldr	r3, [r3, #12]
 8068c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8068c20:	431a      	orrs	r2, r3
 8068c22:	687b      	ldr	r3, [r7, #4]
 8068c24:	691b      	ldr	r3, [r3, #16]
 8068c26:	f003 0302 	and.w	r3, r3, #2
 8068c2a:	431a      	orrs	r2, r3
 8068c2c:	687b      	ldr	r3, [r7, #4]
 8068c2e:	695b      	ldr	r3, [r3, #20]
 8068c30:	f003 0301 	and.w	r3, r3, #1
 8068c34:	431a      	orrs	r2, r3
 8068c36:	687b      	ldr	r3, [r7, #4]
 8068c38:	699b      	ldr	r3, [r3, #24]
 8068c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8068c3e:	431a      	orrs	r2, r3
 8068c40:	687b      	ldr	r3, [r7, #4]
 8068c42:	69db      	ldr	r3, [r3, #28]
 8068c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8068c48:	431a      	orrs	r2, r3
 8068c4a:	687b      	ldr	r3, [r7, #4]
 8068c4c:	6a1b      	ldr	r3, [r3, #32]
 8068c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8068c52:	ea42 0103 	orr.w	r1, r2, r3
 8068c56:	687b      	ldr	r3, [r7, #4]
 8068c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8068c5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8068c5e:	687b      	ldr	r3, [r7, #4]
 8068c60:	681b      	ldr	r3, [r3, #0]
 8068c62:	430a      	orrs	r2, r1
 8068c64:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8068c66:	687b      	ldr	r3, [r7, #4]
 8068c68:	699b      	ldr	r3, [r3, #24]
 8068c6a:	0c1b      	lsrs	r3, r3, #16
 8068c6c:	f003 0104 	and.w	r1, r3, #4
 8068c70:	687b      	ldr	r3, [r7, #4]
 8068c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8068c74:	f003 0210 	and.w	r2, r3, #16
 8068c78:	687b      	ldr	r3, [r7, #4]
 8068c7a:	681b      	ldr	r3, [r3, #0]
 8068c7c:	430a      	orrs	r2, r1
 8068c7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8068c80:	687b      	ldr	r3, [r7, #4]
 8068c82:	681b      	ldr	r3, [r3, #0]
 8068c84:	69da      	ldr	r2, [r3, #28]
 8068c86:	687b      	ldr	r3, [r7, #4]
 8068c88:	681b      	ldr	r3, [r3, #0]
 8068c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8068c8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8068c90:	687b      	ldr	r3, [r7, #4]
 8068c92:	2200      	movs	r2, #0
 8068c94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8068c96:	687b      	ldr	r3, [r7, #4]
 8068c98:	2201      	movs	r2, #1
 8068c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8068c9e:	2300      	movs	r3, #0
}
 8068ca0:	4618      	mov	r0, r3
 8068ca2:	3708      	adds	r7, #8
 8068ca4:	46bd      	mov	sp, r7
 8068ca6:	bd80      	pop	{r7, pc}
 8068ca8:	080774cc 	.word	0x080774cc

08068cac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8068cac:	b580      	push	{r7, lr}
 8068cae:	b08c      	sub	sp, #48	; 0x30
 8068cb0:	af00      	add	r7, sp, #0
 8068cb2:	60f8      	str	r0, [r7, #12]
 8068cb4:	60b9      	str	r1, [r7, #8]
 8068cb6:	607a      	str	r2, [r7, #4]
 8068cb8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8068cba:	2301      	movs	r3, #1
 8068cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8068cbe:	2300      	movs	r3, #0
 8068cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8068cc4:	68fb      	ldr	r3, [r7, #12]
 8068cc6:	689b      	ldr	r3, [r3, #8]
 8068cc8:	2b00      	cmp	r3, #0
 8068cca:	d004      	beq.n	8068cd6 <HAL_SPI_TransmitReceive+0x2a>
 8068ccc:	f240 417e 	movw	r1, #1150	; 0x47e
 8068cd0:	4884      	ldr	r0, [pc, #528]	; (8068ee4 <HAL_SPI_TransmitReceive+0x238>)
 8068cd2:	f7fa fa04 	bl	80630de <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8068cd6:	68fb      	ldr	r3, [r7, #12]
 8068cd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8068cdc:	2b01      	cmp	r3, #1
 8068cde:	d101      	bne.n	8068ce4 <HAL_SPI_TransmitReceive+0x38>
 8068ce0:	2302      	movs	r3, #2
 8068ce2:	e18d      	b.n	8069000 <HAL_SPI_TransmitReceive+0x354>
 8068ce4:	68fb      	ldr	r3, [r7, #12]
 8068ce6:	2201      	movs	r2, #1
 8068ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8068cec:	f7fa fec2 	bl	8063a74 <HAL_GetTick>
 8068cf0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8068cf2:	68fb      	ldr	r3, [r7, #12]
 8068cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8068cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8068cfc:	68fb      	ldr	r3, [r7, #12]
 8068cfe:	685b      	ldr	r3, [r3, #4]
 8068d00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8068d02:	887b      	ldrh	r3, [r7, #2]
 8068d04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8068d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8068d0a:	2b01      	cmp	r3, #1
 8068d0c:	d00f      	beq.n	8068d2e <HAL_SPI_TransmitReceive+0x82>
 8068d0e:	69fb      	ldr	r3, [r7, #28]
 8068d10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8068d14:	d107      	bne.n	8068d26 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8068d16:	68fb      	ldr	r3, [r7, #12]
 8068d18:	689b      	ldr	r3, [r3, #8]
 8068d1a:	2b00      	cmp	r3, #0
 8068d1c:	d103      	bne.n	8068d26 <HAL_SPI_TransmitReceive+0x7a>
 8068d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8068d22:	2b04      	cmp	r3, #4
 8068d24:	d003      	beq.n	8068d2e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8068d26:	2302      	movs	r3, #2
 8068d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8068d2c:	e15e      	b.n	8068fec <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8068d2e:	68bb      	ldr	r3, [r7, #8]
 8068d30:	2b00      	cmp	r3, #0
 8068d32:	d005      	beq.n	8068d40 <HAL_SPI_TransmitReceive+0x94>
 8068d34:	687b      	ldr	r3, [r7, #4]
 8068d36:	2b00      	cmp	r3, #0
 8068d38:	d002      	beq.n	8068d40 <HAL_SPI_TransmitReceive+0x94>
 8068d3a:	887b      	ldrh	r3, [r7, #2]
 8068d3c:	2b00      	cmp	r3, #0
 8068d3e:	d103      	bne.n	8068d48 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8068d40:	2301      	movs	r3, #1
 8068d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8068d46:	e151      	b.n	8068fec <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8068d48:	68fb      	ldr	r3, [r7, #12]
 8068d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8068d4e:	b2db      	uxtb	r3, r3
 8068d50:	2b04      	cmp	r3, #4
 8068d52:	d003      	beq.n	8068d5c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8068d54:	68fb      	ldr	r3, [r7, #12]
 8068d56:	2205      	movs	r2, #5
 8068d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8068d5c:	68fb      	ldr	r3, [r7, #12]
 8068d5e:	2200      	movs	r2, #0
 8068d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8068d62:	68fb      	ldr	r3, [r7, #12]
 8068d64:	687a      	ldr	r2, [r7, #4]
 8068d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8068d68:	68fb      	ldr	r3, [r7, #12]
 8068d6a:	887a      	ldrh	r2, [r7, #2]
 8068d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8068d6e:	68fb      	ldr	r3, [r7, #12]
 8068d70:	887a      	ldrh	r2, [r7, #2]
 8068d72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8068d74:	68fb      	ldr	r3, [r7, #12]
 8068d76:	68ba      	ldr	r2, [r7, #8]
 8068d78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8068d7a:	68fb      	ldr	r3, [r7, #12]
 8068d7c:	887a      	ldrh	r2, [r7, #2]
 8068d7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8068d80:	68fb      	ldr	r3, [r7, #12]
 8068d82:	887a      	ldrh	r2, [r7, #2]
 8068d84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8068d86:	68fb      	ldr	r3, [r7, #12]
 8068d88:	2200      	movs	r2, #0
 8068d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8068d8c:	68fb      	ldr	r3, [r7, #12]
 8068d8e:	2200      	movs	r2, #0
 8068d90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8068d92:	68fb      	ldr	r3, [r7, #12]
 8068d94:	681b      	ldr	r3, [r3, #0]
 8068d96:	681b      	ldr	r3, [r3, #0]
 8068d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8068d9c:	2b40      	cmp	r3, #64	; 0x40
 8068d9e:	d007      	beq.n	8068db0 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8068da0:	68fb      	ldr	r3, [r7, #12]
 8068da2:	681b      	ldr	r3, [r3, #0]
 8068da4:	681a      	ldr	r2, [r3, #0]
 8068da6:	68fb      	ldr	r3, [r7, #12]
 8068da8:	681b      	ldr	r3, [r3, #0]
 8068daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8068dae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8068db0:	68fb      	ldr	r3, [r7, #12]
 8068db2:	68db      	ldr	r3, [r3, #12]
 8068db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8068db8:	d178      	bne.n	8068eac <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8068dba:	68fb      	ldr	r3, [r7, #12]
 8068dbc:	685b      	ldr	r3, [r3, #4]
 8068dbe:	2b00      	cmp	r3, #0
 8068dc0:	d002      	beq.n	8068dc8 <HAL_SPI_TransmitReceive+0x11c>
 8068dc2:	8b7b      	ldrh	r3, [r7, #26]
 8068dc4:	2b01      	cmp	r3, #1
 8068dc6:	d166      	bne.n	8068e96 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8068dc8:	68fb      	ldr	r3, [r7, #12]
 8068dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068dcc:	881a      	ldrh	r2, [r3, #0]
 8068dce:	68fb      	ldr	r3, [r7, #12]
 8068dd0:	681b      	ldr	r3, [r3, #0]
 8068dd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8068dd4:	68fb      	ldr	r3, [r7, #12]
 8068dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068dd8:	1c9a      	adds	r2, r3, #2
 8068dda:	68fb      	ldr	r3, [r7, #12]
 8068ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8068dde:	68fb      	ldr	r3, [r7, #12]
 8068de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068de2:	b29b      	uxth	r3, r3
 8068de4:	3b01      	subs	r3, #1
 8068de6:	b29a      	uxth	r2, r3
 8068de8:	68fb      	ldr	r3, [r7, #12]
 8068dea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8068dec:	e053      	b.n	8068e96 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8068dee:	68fb      	ldr	r3, [r7, #12]
 8068df0:	681b      	ldr	r3, [r3, #0]
 8068df2:	689b      	ldr	r3, [r3, #8]
 8068df4:	f003 0302 	and.w	r3, r3, #2
 8068df8:	2b02      	cmp	r3, #2
 8068dfa:	d11b      	bne.n	8068e34 <HAL_SPI_TransmitReceive+0x188>
 8068dfc:	68fb      	ldr	r3, [r7, #12]
 8068dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068e00:	b29b      	uxth	r3, r3
 8068e02:	2b00      	cmp	r3, #0
 8068e04:	d016      	beq.n	8068e34 <HAL_SPI_TransmitReceive+0x188>
 8068e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8068e08:	2b01      	cmp	r3, #1
 8068e0a:	d113      	bne.n	8068e34 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8068e0c:	68fb      	ldr	r3, [r7, #12]
 8068e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068e10:	881a      	ldrh	r2, [r3, #0]
 8068e12:	68fb      	ldr	r3, [r7, #12]
 8068e14:	681b      	ldr	r3, [r3, #0]
 8068e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8068e18:	68fb      	ldr	r3, [r7, #12]
 8068e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068e1c:	1c9a      	adds	r2, r3, #2
 8068e1e:	68fb      	ldr	r3, [r7, #12]
 8068e20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8068e22:	68fb      	ldr	r3, [r7, #12]
 8068e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068e26:	b29b      	uxth	r3, r3
 8068e28:	3b01      	subs	r3, #1
 8068e2a:	b29a      	uxth	r2, r3
 8068e2c:	68fb      	ldr	r3, [r7, #12]
 8068e2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8068e30:	2300      	movs	r3, #0
 8068e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8068e34:	68fb      	ldr	r3, [r7, #12]
 8068e36:	681b      	ldr	r3, [r3, #0]
 8068e38:	689b      	ldr	r3, [r3, #8]
 8068e3a:	f003 0301 	and.w	r3, r3, #1
 8068e3e:	2b01      	cmp	r3, #1
 8068e40:	d119      	bne.n	8068e76 <HAL_SPI_TransmitReceive+0x1ca>
 8068e42:	68fb      	ldr	r3, [r7, #12]
 8068e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068e46:	b29b      	uxth	r3, r3
 8068e48:	2b00      	cmp	r3, #0
 8068e4a:	d014      	beq.n	8068e76 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8068e4c:	68fb      	ldr	r3, [r7, #12]
 8068e4e:	681b      	ldr	r3, [r3, #0]
 8068e50:	68da      	ldr	r2, [r3, #12]
 8068e52:	68fb      	ldr	r3, [r7, #12]
 8068e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8068e56:	b292      	uxth	r2, r2
 8068e58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8068e5a:	68fb      	ldr	r3, [r7, #12]
 8068e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8068e5e:	1c9a      	adds	r2, r3, #2
 8068e60:	68fb      	ldr	r3, [r7, #12]
 8068e62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8068e64:	68fb      	ldr	r3, [r7, #12]
 8068e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068e68:	b29b      	uxth	r3, r3
 8068e6a:	3b01      	subs	r3, #1
 8068e6c:	b29a      	uxth	r2, r3
 8068e6e:	68fb      	ldr	r3, [r7, #12]
 8068e70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8068e72:	2301      	movs	r3, #1
 8068e74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8068e76:	f7fa fdfd 	bl	8063a74 <HAL_GetTick>
 8068e7a:	4602      	mov	r2, r0
 8068e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8068e7e:	1ad3      	subs	r3, r2, r3
 8068e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8068e82:	429a      	cmp	r2, r3
 8068e84:	d807      	bhi.n	8068e96 <HAL_SPI_TransmitReceive+0x1ea>
 8068e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8068e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8068e8c:	d003      	beq.n	8068e96 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8068e8e:	2303      	movs	r3, #3
 8068e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8068e94:	e0aa      	b.n	8068fec <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8068e96:	68fb      	ldr	r3, [r7, #12]
 8068e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068e9a:	b29b      	uxth	r3, r3
 8068e9c:	2b00      	cmp	r3, #0
 8068e9e:	d1a6      	bne.n	8068dee <HAL_SPI_TransmitReceive+0x142>
 8068ea0:	68fb      	ldr	r3, [r7, #12]
 8068ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068ea4:	b29b      	uxth	r3, r3
 8068ea6:	2b00      	cmp	r3, #0
 8068ea8:	d1a1      	bne.n	8068dee <HAL_SPI_TransmitReceive+0x142>
 8068eaa:	e07f      	b.n	8068fac <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8068eac:	68fb      	ldr	r3, [r7, #12]
 8068eae:	685b      	ldr	r3, [r3, #4]
 8068eb0:	2b00      	cmp	r3, #0
 8068eb2:	d002      	beq.n	8068eba <HAL_SPI_TransmitReceive+0x20e>
 8068eb4:	8b7b      	ldrh	r3, [r7, #26]
 8068eb6:	2b01      	cmp	r3, #1
 8068eb8:	d16e      	bne.n	8068f98 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8068eba:	68fb      	ldr	r3, [r7, #12]
 8068ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8068ebe:	68fb      	ldr	r3, [r7, #12]
 8068ec0:	681b      	ldr	r3, [r3, #0]
 8068ec2:	330c      	adds	r3, #12
 8068ec4:	7812      	ldrb	r2, [r2, #0]
 8068ec6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8068ec8:	68fb      	ldr	r3, [r7, #12]
 8068eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068ecc:	1c5a      	adds	r2, r3, #1
 8068ece:	68fb      	ldr	r3, [r7, #12]
 8068ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8068ed2:	68fb      	ldr	r3, [r7, #12]
 8068ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068ed6:	b29b      	uxth	r3, r3
 8068ed8:	3b01      	subs	r3, #1
 8068eda:	b29a      	uxth	r2, r3
 8068edc:	68fb      	ldr	r3, [r7, #12]
 8068ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8068ee0:	e05a      	b.n	8068f98 <HAL_SPI_TransmitReceive+0x2ec>
 8068ee2:	bf00      	nop
 8068ee4:	080774cc 	.word	0x080774cc
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8068ee8:	68fb      	ldr	r3, [r7, #12]
 8068eea:	681b      	ldr	r3, [r3, #0]
 8068eec:	689b      	ldr	r3, [r3, #8]
 8068eee:	f003 0302 	and.w	r3, r3, #2
 8068ef2:	2b02      	cmp	r3, #2
 8068ef4:	d11c      	bne.n	8068f30 <HAL_SPI_TransmitReceive+0x284>
 8068ef6:	68fb      	ldr	r3, [r7, #12]
 8068ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068efa:	b29b      	uxth	r3, r3
 8068efc:	2b00      	cmp	r3, #0
 8068efe:	d017      	beq.n	8068f30 <HAL_SPI_TransmitReceive+0x284>
 8068f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8068f02:	2b01      	cmp	r3, #1
 8068f04:	d114      	bne.n	8068f30 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8068f06:	68fb      	ldr	r3, [r7, #12]
 8068f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8068f0a:	68fb      	ldr	r3, [r7, #12]
 8068f0c:	681b      	ldr	r3, [r3, #0]
 8068f0e:	330c      	adds	r3, #12
 8068f10:	7812      	ldrb	r2, [r2, #0]
 8068f12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8068f14:	68fb      	ldr	r3, [r7, #12]
 8068f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068f18:	1c5a      	adds	r2, r3, #1
 8068f1a:	68fb      	ldr	r3, [r7, #12]
 8068f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8068f1e:	68fb      	ldr	r3, [r7, #12]
 8068f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068f22:	b29b      	uxth	r3, r3
 8068f24:	3b01      	subs	r3, #1
 8068f26:	b29a      	uxth	r2, r3
 8068f28:	68fb      	ldr	r3, [r7, #12]
 8068f2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8068f2c:	2300      	movs	r3, #0
 8068f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8068f30:	68fb      	ldr	r3, [r7, #12]
 8068f32:	681b      	ldr	r3, [r3, #0]
 8068f34:	689b      	ldr	r3, [r3, #8]
 8068f36:	f003 0301 	and.w	r3, r3, #1
 8068f3a:	2b01      	cmp	r3, #1
 8068f3c:	d119      	bne.n	8068f72 <HAL_SPI_TransmitReceive+0x2c6>
 8068f3e:	68fb      	ldr	r3, [r7, #12]
 8068f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068f42:	b29b      	uxth	r3, r3
 8068f44:	2b00      	cmp	r3, #0
 8068f46:	d014      	beq.n	8068f72 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8068f48:	68fb      	ldr	r3, [r7, #12]
 8068f4a:	681b      	ldr	r3, [r3, #0]
 8068f4c:	68da      	ldr	r2, [r3, #12]
 8068f4e:	68fb      	ldr	r3, [r7, #12]
 8068f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8068f52:	b2d2      	uxtb	r2, r2
 8068f54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8068f56:	68fb      	ldr	r3, [r7, #12]
 8068f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8068f5a:	1c5a      	adds	r2, r3, #1
 8068f5c:	68fb      	ldr	r3, [r7, #12]
 8068f5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8068f60:	68fb      	ldr	r3, [r7, #12]
 8068f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068f64:	b29b      	uxth	r3, r3
 8068f66:	3b01      	subs	r3, #1
 8068f68:	b29a      	uxth	r2, r3
 8068f6a:	68fb      	ldr	r3, [r7, #12]
 8068f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8068f6e:	2301      	movs	r3, #1
 8068f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8068f72:	f7fa fd7f 	bl	8063a74 <HAL_GetTick>
 8068f76:	4602      	mov	r2, r0
 8068f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8068f7a:	1ad3      	subs	r3, r2, r3
 8068f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8068f7e:	429a      	cmp	r2, r3
 8068f80:	d803      	bhi.n	8068f8a <HAL_SPI_TransmitReceive+0x2de>
 8068f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8068f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8068f88:	d102      	bne.n	8068f90 <HAL_SPI_TransmitReceive+0x2e4>
 8068f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8068f8c:	2b00      	cmp	r3, #0
 8068f8e:	d103      	bne.n	8068f98 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8068f90:	2303      	movs	r3, #3
 8068f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8068f96:	e029      	b.n	8068fec <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8068f98:	68fb      	ldr	r3, [r7, #12]
 8068f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068f9c:	b29b      	uxth	r3, r3
 8068f9e:	2b00      	cmp	r3, #0
 8068fa0:	d1a2      	bne.n	8068ee8 <HAL_SPI_TransmitReceive+0x23c>
 8068fa2:	68fb      	ldr	r3, [r7, #12]
 8068fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068fa6:	b29b      	uxth	r3, r3
 8068fa8:	2b00      	cmp	r3, #0
 8068faa:	d19d      	bne.n	8068ee8 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8068fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8068fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8068fb0:	68f8      	ldr	r0, [r7, #12]
 8068fb2:	f000 f8b1 	bl	8069118 <SPI_EndRxTxTransaction>
 8068fb6:	4603      	mov	r3, r0
 8068fb8:	2b00      	cmp	r3, #0
 8068fba:	d006      	beq.n	8068fca <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8068fbc:	2301      	movs	r3, #1
 8068fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8068fc2:	68fb      	ldr	r3, [r7, #12]
 8068fc4:	2220      	movs	r2, #32
 8068fc6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8068fc8:	e010      	b.n	8068fec <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8068fca:	68fb      	ldr	r3, [r7, #12]
 8068fcc:	689b      	ldr	r3, [r3, #8]
 8068fce:	2b00      	cmp	r3, #0
 8068fd0:	d10b      	bne.n	8068fea <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8068fd2:	2300      	movs	r3, #0
 8068fd4:	617b      	str	r3, [r7, #20]
 8068fd6:	68fb      	ldr	r3, [r7, #12]
 8068fd8:	681b      	ldr	r3, [r3, #0]
 8068fda:	68db      	ldr	r3, [r3, #12]
 8068fdc:	617b      	str	r3, [r7, #20]
 8068fde:	68fb      	ldr	r3, [r7, #12]
 8068fe0:	681b      	ldr	r3, [r3, #0]
 8068fe2:	689b      	ldr	r3, [r3, #8]
 8068fe4:	617b      	str	r3, [r7, #20]
 8068fe6:	697b      	ldr	r3, [r7, #20]
 8068fe8:	e000      	b.n	8068fec <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8068fea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8068fec:	68fb      	ldr	r3, [r7, #12]
 8068fee:	2201      	movs	r2, #1
 8068ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8068ff4:	68fb      	ldr	r3, [r7, #12]
 8068ff6:	2200      	movs	r2, #0
 8068ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8068ffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8069000:	4618      	mov	r0, r3
 8069002:	3730      	adds	r7, #48	; 0x30
 8069004:	46bd      	mov	sp, r7
 8069006:	bd80      	pop	{r7, pc}

08069008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8069008:	b580      	push	{r7, lr}
 806900a:	b088      	sub	sp, #32
 806900c:	af00      	add	r7, sp, #0
 806900e:	60f8      	str	r0, [r7, #12]
 8069010:	60b9      	str	r1, [r7, #8]
 8069012:	603b      	str	r3, [r7, #0]
 8069014:	4613      	mov	r3, r2
 8069016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8069018:	f7fa fd2c 	bl	8063a74 <HAL_GetTick>
 806901c:	4602      	mov	r2, r0
 806901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069020:	1a9b      	subs	r3, r3, r2
 8069022:	683a      	ldr	r2, [r7, #0]
 8069024:	4413      	add	r3, r2
 8069026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8069028:	f7fa fd24 	bl	8063a74 <HAL_GetTick>
 806902c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 806902e:	4b39      	ldr	r3, [pc, #228]	; (8069114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8069030:	681b      	ldr	r3, [r3, #0]
 8069032:	015b      	lsls	r3, r3, #5
 8069034:	0d1b      	lsrs	r3, r3, #20
 8069036:	69fa      	ldr	r2, [r7, #28]
 8069038:	fb02 f303 	mul.w	r3, r2, r3
 806903c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 806903e:	e054      	b.n	80690ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8069040:	683b      	ldr	r3, [r7, #0]
 8069042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8069046:	d050      	beq.n	80690ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8069048:	f7fa fd14 	bl	8063a74 <HAL_GetTick>
 806904c:	4602      	mov	r2, r0
 806904e:	69bb      	ldr	r3, [r7, #24]
 8069050:	1ad3      	subs	r3, r2, r3
 8069052:	69fa      	ldr	r2, [r7, #28]
 8069054:	429a      	cmp	r2, r3
 8069056:	d902      	bls.n	806905e <SPI_WaitFlagStateUntilTimeout+0x56>
 8069058:	69fb      	ldr	r3, [r7, #28]
 806905a:	2b00      	cmp	r3, #0
 806905c:	d13d      	bne.n	80690da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 806905e:	68fb      	ldr	r3, [r7, #12]
 8069060:	681b      	ldr	r3, [r3, #0]
 8069062:	685a      	ldr	r2, [r3, #4]
 8069064:	68fb      	ldr	r3, [r7, #12]
 8069066:	681b      	ldr	r3, [r3, #0]
 8069068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 806906c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 806906e:	68fb      	ldr	r3, [r7, #12]
 8069070:	685b      	ldr	r3, [r3, #4]
 8069072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8069076:	d111      	bne.n	806909c <SPI_WaitFlagStateUntilTimeout+0x94>
 8069078:	68fb      	ldr	r3, [r7, #12]
 806907a:	689b      	ldr	r3, [r3, #8]
 806907c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8069080:	d004      	beq.n	806908c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8069082:	68fb      	ldr	r3, [r7, #12]
 8069084:	689b      	ldr	r3, [r3, #8]
 8069086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 806908a:	d107      	bne.n	806909c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 806908c:	68fb      	ldr	r3, [r7, #12]
 806908e:	681b      	ldr	r3, [r3, #0]
 8069090:	681a      	ldr	r2, [r3, #0]
 8069092:	68fb      	ldr	r3, [r7, #12]
 8069094:	681b      	ldr	r3, [r3, #0]
 8069096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 806909a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 806909c:	68fb      	ldr	r3, [r7, #12]
 806909e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80690a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80690a4:	d10f      	bne.n	80690c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80690a6:	68fb      	ldr	r3, [r7, #12]
 80690a8:	681b      	ldr	r3, [r3, #0]
 80690aa:	681a      	ldr	r2, [r3, #0]
 80690ac:	68fb      	ldr	r3, [r7, #12]
 80690ae:	681b      	ldr	r3, [r3, #0]
 80690b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80690b4:	601a      	str	r2, [r3, #0]
 80690b6:	68fb      	ldr	r3, [r7, #12]
 80690b8:	681b      	ldr	r3, [r3, #0]
 80690ba:	681a      	ldr	r2, [r3, #0]
 80690bc:	68fb      	ldr	r3, [r7, #12]
 80690be:	681b      	ldr	r3, [r3, #0]
 80690c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80690c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80690c6:	68fb      	ldr	r3, [r7, #12]
 80690c8:	2201      	movs	r2, #1
 80690ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80690ce:	68fb      	ldr	r3, [r7, #12]
 80690d0:	2200      	movs	r2, #0
 80690d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80690d6:	2303      	movs	r3, #3
 80690d8:	e017      	b.n	806910a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80690da:	697b      	ldr	r3, [r7, #20]
 80690dc:	2b00      	cmp	r3, #0
 80690de:	d101      	bne.n	80690e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80690e0:	2300      	movs	r3, #0
 80690e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80690e4:	697b      	ldr	r3, [r7, #20]
 80690e6:	3b01      	subs	r3, #1
 80690e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80690ea:	68fb      	ldr	r3, [r7, #12]
 80690ec:	681b      	ldr	r3, [r3, #0]
 80690ee:	689a      	ldr	r2, [r3, #8]
 80690f0:	68bb      	ldr	r3, [r7, #8]
 80690f2:	4013      	ands	r3, r2
 80690f4:	68ba      	ldr	r2, [r7, #8]
 80690f6:	429a      	cmp	r2, r3
 80690f8:	bf0c      	ite	eq
 80690fa:	2301      	moveq	r3, #1
 80690fc:	2300      	movne	r3, #0
 80690fe:	b2db      	uxtb	r3, r3
 8069100:	461a      	mov	r2, r3
 8069102:	79fb      	ldrb	r3, [r7, #7]
 8069104:	429a      	cmp	r2, r3
 8069106:	d19b      	bne.n	8069040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8069108:	2300      	movs	r3, #0
}
 806910a:	4618      	mov	r0, r3
 806910c:	3720      	adds	r7, #32
 806910e:	46bd      	mov	sp, r7
 8069110:	bd80      	pop	{r7, pc}
 8069112:	bf00      	nop
 8069114:	20000000 	.word	0x20000000

08069118 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8069118:	b580      	push	{r7, lr}
 806911a:	b088      	sub	sp, #32
 806911c:	af02      	add	r7, sp, #8
 806911e:	60f8      	str	r0, [r7, #12]
 8069120:	60b9      	str	r1, [r7, #8]
 8069122:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8069124:	4b1b      	ldr	r3, [pc, #108]	; (8069194 <SPI_EndRxTxTransaction+0x7c>)
 8069126:	681b      	ldr	r3, [r3, #0]
 8069128:	4a1b      	ldr	r2, [pc, #108]	; (8069198 <SPI_EndRxTxTransaction+0x80>)
 806912a:	fba2 2303 	umull	r2, r3, r2, r3
 806912e:	0d5b      	lsrs	r3, r3, #21
 8069130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8069134:	fb02 f303 	mul.w	r3, r2, r3
 8069138:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 806913a:	68fb      	ldr	r3, [r7, #12]
 806913c:	685b      	ldr	r3, [r3, #4]
 806913e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8069142:	d112      	bne.n	806916a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8069144:	687b      	ldr	r3, [r7, #4]
 8069146:	9300      	str	r3, [sp, #0]
 8069148:	68bb      	ldr	r3, [r7, #8]
 806914a:	2200      	movs	r2, #0
 806914c:	2180      	movs	r1, #128	; 0x80
 806914e:	68f8      	ldr	r0, [r7, #12]
 8069150:	f7ff ff5a 	bl	8069008 <SPI_WaitFlagStateUntilTimeout>
 8069154:	4603      	mov	r3, r0
 8069156:	2b00      	cmp	r3, #0
 8069158:	d016      	beq.n	8069188 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 806915a:	68fb      	ldr	r3, [r7, #12]
 806915c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 806915e:	f043 0220 	orr.w	r2, r3, #32
 8069162:	68fb      	ldr	r3, [r7, #12]
 8069164:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8069166:	2303      	movs	r3, #3
 8069168:	e00f      	b.n	806918a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 806916a:	697b      	ldr	r3, [r7, #20]
 806916c:	2b00      	cmp	r3, #0
 806916e:	d00a      	beq.n	8069186 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8069170:	697b      	ldr	r3, [r7, #20]
 8069172:	3b01      	subs	r3, #1
 8069174:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8069176:	68fb      	ldr	r3, [r7, #12]
 8069178:	681b      	ldr	r3, [r3, #0]
 806917a:	689b      	ldr	r3, [r3, #8]
 806917c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8069180:	2b80      	cmp	r3, #128	; 0x80
 8069182:	d0f2      	beq.n	806916a <SPI_EndRxTxTransaction+0x52>
 8069184:	e000      	b.n	8069188 <SPI_EndRxTxTransaction+0x70>
        break;
 8069186:	bf00      	nop
  }

  return HAL_OK;
 8069188:	2300      	movs	r3, #0
}
 806918a:	4618      	mov	r0, r3
 806918c:	3718      	adds	r7, #24
 806918e:	46bd      	mov	sp, r7
 8069190:	bd80      	pop	{r7, pc}
 8069192:	bf00      	nop
 8069194:	20000000 	.word	0x20000000
 8069198:	165e9f81 	.word	0x165e9f81

0806919c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 806919c:	b580      	push	{r7, lr}
 806919e:	b082      	sub	sp, #8
 80691a0:	af00      	add	r7, sp, #0
 80691a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80691a4:	687b      	ldr	r3, [r7, #4]
 80691a6:	2b00      	cmp	r3, #0
 80691a8:	d101      	bne.n	80691ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80691aa:	2301      	movs	r3, #1
 80691ac:	e0a7      	b.n	80692fe <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80691ae:	687b      	ldr	r3, [r7, #4]
 80691b0:	681b      	ldr	r3, [r3, #0]
 80691b2:	4a55      	ldr	r2, [pc, #340]	; (8069308 <HAL_TIM_Base_Init+0x16c>)
 80691b4:	4293      	cmp	r3, r2
 80691b6:	d027      	beq.n	8069208 <HAL_TIM_Base_Init+0x6c>
 80691b8:	687b      	ldr	r3, [r7, #4]
 80691ba:	681b      	ldr	r3, [r3, #0]
 80691bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80691c0:	d022      	beq.n	8069208 <HAL_TIM_Base_Init+0x6c>
 80691c2:	687b      	ldr	r3, [r7, #4]
 80691c4:	681b      	ldr	r3, [r3, #0]
 80691c6:	4a51      	ldr	r2, [pc, #324]	; (806930c <HAL_TIM_Base_Init+0x170>)
 80691c8:	4293      	cmp	r3, r2
 80691ca:	d01d      	beq.n	8069208 <HAL_TIM_Base_Init+0x6c>
 80691cc:	687b      	ldr	r3, [r7, #4]
 80691ce:	681b      	ldr	r3, [r3, #0]
 80691d0:	4a4f      	ldr	r2, [pc, #316]	; (8069310 <HAL_TIM_Base_Init+0x174>)
 80691d2:	4293      	cmp	r3, r2
 80691d4:	d018      	beq.n	8069208 <HAL_TIM_Base_Init+0x6c>
 80691d6:	687b      	ldr	r3, [r7, #4]
 80691d8:	681b      	ldr	r3, [r3, #0]
 80691da:	4a4e      	ldr	r2, [pc, #312]	; (8069314 <HAL_TIM_Base_Init+0x178>)
 80691dc:	4293      	cmp	r3, r2
 80691de:	d013      	beq.n	8069208 <HAL_TIM_Base_Init+0x6c>
 80691e0:	687b      	ldr	r3, [r7, #4]
 80691e2:	681b      	ldr	r3, [r3, #0]
 80691e4:	4a4c      	ldr	r2, [pc, #304]	; (8069318 <HAL_TIM_Base_Init+0x17c>)
 80691e6:	4293      	cmp	r3, r2
 80691e8:	d00e      	beq.n	8069208 <HAL_TIM_Base_Init+0x6c>
 80691ea:	687b      	ldr	r3, [r7, #4]
 80691ec:	681b      	ldr	r3, [r3, #0]
 80691ee:	4a4b      	ldr	r2, [pc, #300]	; (806931c <HAL_TIM_Base_Init+0x180>)
 80691f0:	4293      	cmp	r3, r2
 80691f2:	d009      	beq.n	8069208 <HAL_TIM_Base_Init+0x6c>
 80691f4:	687b      	ldr	r3, [r7, #4]
 80691f6:	681b      	ldr	r3, [r3, #0]
 80691f8:	4a49      	ldr	r2, [pc, #292]	; (8069320 <HAL_TIM_Base_Init+0x184>)
 80691fa:	4293      	cmp	r3, r2
 80691fc:	d004      	beq.n	8069208 <HAL_TIM_Base_Init+0x6c>
 80691fe:	f240 1113 	movw	r1, #275	; 0x113
 8069202:	4848      	ldr	r0, [pc, #288]	; (8069324 <HAL_TIM_Base_Init+0x188>)
 8069204:	f7f9 ff6b 	bl	80630de <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8069208:	687b      	ldr	r3, [r7, #4]
 806920a:	689b      	ldr	r3, [r3, #8]
 806920c:	2b00      	cmp	r3, #0
 806920e:	d014      	beq.n	806923a <HAL_TIM_Base_Init+0x9e>
 8069210:	687b      	ldr	r3, [r7, #4]
 8069212:	689b      	ldr	r3, [r3, #8]
 8069214:	2b10      	cmp	r3, #16
 8069216:	d010      	beq.n	806923a <HAL_TIM_Base_Init+0x9e>
 8069218:	687b      	ldr	r3, [r7, #4]
 806921a:	689b      	ldr	r3, [r3, #8]
 806921c:	2b20      	cmp	r3, #32
 806921e:	d00c      	beq.n	806923a <HAL_TIM_Base_Init+0x9e>
 8069220:	687b      	ldr	r3, [r7, #4]
 8069222:	689b      	ldr	r3, [r3, #8]
 8069224:	2b40      	cmp	r3, #64	; 0x40
 8069226:	d008      	beq.n	806923a <HAL_TIM_Base_Init+0x9e>
 8069228:	687b      	ldr	r3, [r7, #4]
 806922a:	689b      	ldr	r3, [r3, #8]
 806922c:	2b60      	cmp	r3, #96	; 0x60
 806922e:	d004      	beq.n	806923a <HAL_TIM_Base_Init+0x9e>
 8069230:	f44f 718a 	mov.w	r1, #276	; 0x114
 8069234:	483b      	ldr	r0, [pc, #236]	; (8069324 <HAL_TIM_Base_Init+0x188>)
 8069236:	f7f9 ff52 	bl	80630de <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 806923a:	687b      	ldr	r3, [r7, #4]
 806923c:	691b      	ldr	r3, [r3, #16]
 806923e:	2b00      	cmp	r3, #0
 8069240:	d00e      	beq.n	8069260 <HAL_TIM_Base_Init+0xc4>
 8069242:	687b      	ldr	r3, [r7, #4]
 8069244:	691b      	ldr	r3, [r3, #16]
 8069246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806924a:	d009      	beq.n	8069260 <HAL_TIM_Base_Init+0xc4>
 806924c:	687b      	ldr	r3, [r7, #4]
 806924e:	691b      	ldr	r3, [r3, #16]
 8069250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8069254:	d004      	beq.n	8069260 <HAL_TIM_Base_Init+0xc4>
 8069256:	f240 1115 	movw	r1, #277	; 0x115
 806925a:	4832      	ldr	r0, [pc, #200]	; (8069324 <HAL_TIM_Base_Init+0x188>)
 806925c:	f7f9 ff3f 	bl	80630de <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8069260:	687b      	ldr	r3, [r7, #4]
 8069262:	699b      	ldr	r3, [r3, #24]
 8069264:	2b00      	cmp	r3, #0
 8069266:	d008      	beq.n	806927a <HAL_TIM_Base_Init+0xde>
 8069268:	687b      	ldr	r3, [r7, #4]
 806926a:	699b      	ldr	r3, [r3, #24]
 806926c:	2b80      	cmp	r3, #128	; 0x80
 806926e:	d004      	beq.n	806927a <HAL_TIM_Base_Init+0xde>
 8069270:	f44f 718b 	mov.w	r1, #278	; 0x116
 8069274:	482b      	ldr	r0, [pc, #172]	; (8069324 <HAL_TIM_Base_Init+0x188>)
 8069276:	f7f9 ff32 	bl	80630de <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 806927a:	687b      	ldr	r3, [r7, #4]
 806927c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8069280:	b2db      	uxtb	r3, r3
 8069282:	2b00      	cmp	r3, #0
 8069284:	d106      	bne.n	8069294 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8069286:	687b      	ldr	r3, [r7, #4]
 8069288:	2200      	movs	r2, #0
 806928a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 806928e:	6878      	ldr	r0, [r7, #4]
 8069290:	f000 f84a 	bl	8069328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8069294:	687b      	ldr	r3, [r7, #4]
 8069296:	2202      	movs	r2, #2
 8069298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 806929c:	687b      	ldr	r3, [r7, #4]
 806929e:	681a      	ldr	r2, [r3, #0]
 80692a0:	687b      	ldr	r3, [r7, #4]
 80692a2:	3304      	adds	r3, #4
 80692a4:	4619      	mov	r1, r3
 80692a6:	4610      	mov	r0, r2
 80692a8:	f000 fa0a 	bl	80696c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80692ac:	687b      	ldr	r3, [r7, #4]
 80692ae:	2201      	movs	r2, #1
 80692b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80692b4:	687b      	ldr	r3, [r7, #4]
 80692b6:	2201      	movs	r2, #1
 80692b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80692bc:	687b      	ldr	r3, [r7, #4]
 80692be:	2201      	movs	r2, #1
 80692c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80692c4:	687b      	ldr	r3, [r7, #4]
 80692c6:	2201      	movs	r2, #1
 80692c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80692cc:	687b      	ldr	r3, [r7, #4]
 80692ce:	2201      	movs	r2, #1
 80692d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80692d4:	687b      	ldr	r3, [r7, #4]
 80692d6:	2201      	movs	r2, #1
 80692d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80692dc:	687b      	ldr	r3, [r7, #4]
 80692de:	2201      	movs	r2, #1
 80692e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80692e4:	687b      	ldr	r3, [r7, #4]
 80692e6:	2201      	movs	r2, #1
 80692e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80692ec:	687b      	ldr	r3, [r7, #4]
 80692ee:	2201      	movs	r2, #1
 80692f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80692f4:	687b      	ldr	r3, [r7, #4]
 80692f6:	2201      	movs	r2, #1
 80692f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80692fc:	2300      	movs	r3, #0
}
 80692fe:	4618      	mov	r0, r3
 8069300:	3708      	adds	r7, #8
 8069302:	46bd      	mov	sp, r7
 8069304:	bd80      	pop	{r7, pc}
 8069306:	bf00      	nop
 8069308:	40010000 	.word	0x40010000
 806930c:	40000400 	.word	0x40000400
 8069310:	40000800 	.word	0x40000800
 8069314:	40000c00 	.word	0x40000c00
 8069318:	40014000 	.word	0x40014000
 806931c:	40014400 	.word	0x40014400
 8069320:	40014800 	.word	0x40014800
 8069324:	08077504 	.word	0x08077504

08069328 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8069328:	b480      	push	{r7}
 806932a:	b083      	sub	sp, #12
 806932c:	af00      	add	r7, sp, #0
 806932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8069330:	bf00      	nop
 8069332:	370c      	adds	r7, #12
 8069334:	46bd      	mov	sp, r7
 8069336:	f85d 7b04 	ldr.w	r7, [sp], #4
 806933a:	4770      	bx	lr

0806933c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 806933c:	b580      	push	{r7, lr}
 806933e:	b084      	sub	sp, #16
 8069340:	af00      	add	r7, sp, #0
 8069342:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8069344:	687b      	ldr	r3, [r7, #4]
 8069346:	681b      	ldr	r3, [r3, #0]
 8069348:	4a3d      	ldr	r2, [pc, #244]	; (8069440 <HAL_TIM_Base_Start_IT+0x104>)
 806934a:	4293      	cmp	r3, r2
 806934c:	d027      	beq.n	806939e <HAL_TIM_Base_Start_IT+0x62>
 806934e:	687b      	ldr	r3, [r7, #4]
 8069350:	681b      	ldr	r3, [r3, #0]
 8069352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8069356:	d022      	beq.n	806939e <HAL_TIM_Base_Start_IT+0x62>
 8069358:	687b      	ldr	r3, [r7, #4]
 806935a:	681b      	ldr	r3, [r3, #0]
 806935c:	4a39      	ldr	r2, [pc, #228]	; (8069444 <HAL_TIM_Base_Start_IT+0x108>)
 806935e:	4293      	cmp	r3, r2
 8069360:	d01d      	beq.n	806939e <HAL_TIM_Base_Start_IT+0x62>
 8069362:	687b      	ldr	r3, [r7, #4]
 8069364:	681b      	ldr	r3, [r3, #0]
 8069366:	4a38      	ldr	r2, [pc, #224]	; (8069448 <HAL_TIM_Base_Start_IT+0x10c>)
 8069368:	4293      	cmp	r3, r2
 806936a:	d018      	beq.n	806939e <HAL_TIM_Base_Start_IT+0x62>
 806936c:	687b      	ldr	r3, [r7, #4]
 806936e:	681b      	ldr	r3, [r3, #0]
 8069370:	4a36      	ldr	r2, [pc, #216]	; (806944c <HAL_TIM_Base_Start_IT+0x110>)
 8069372:	4293      	cmp	r3, r2
 8069374:	d013      	beq.n	806939e <HAL_TIM_Base_Start_IT+0x62>
 8069376:	687b      	ldr	r3, [r7, #4]
 8069378:	681b      	ldr	r3, [r3, #0]
 806937a:	4a35      	ldr	r2, [pc, #212]	; (8069450 <HAL_TIM_Base_Start_IT+0x114>)
 806937c:	4293      	cmp	r3, r2
 806937e:	d00e      	beq.n	806939e <HAL_TIM_Base_Start_IT+0x62>
 8069380:	687b      	ldr	r3, [r7, #4]
 8069382:	681b      	ldr	r3, [r3, #0]
 8069384:	4a33      	ldr	r2, [pc, #204]	; (8069454 <HAL_TIM_Base_Start_IT+0x118>)
 8069386:	4293      	cmp	r3, r2
 8069388:	d009      	beq.n	806939e <HAL_TIM_Base_Start_IT+0x62>
 806938a:	687b      	ldr	r3, [r7, #4]
 806938c:	681b      	ldr	r3, [r3, #0]
 806938e:	4a32      	ldr	r2, [pc, #200]	; (8069458 <HAL_TIM_Base_Start_IT+0x11c>)
 8069390:	4293      	cmp	r3, r2
 8069392:	d004      	beq.n	806939e <HAL_TIM_Base_Start_IT+0x62>
 8069394:	f240 11cf 	movw	r1, #463	; 0x1cf
 8069398:	4830      	ldr	r0, [pc, #192]	; (806945c <HAL_TIM_Base_Start_IT+0x120>)
 806939a:	f7f9 fea0 	bl	80630de <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 806939e:	687b      	ldr	r3, [r7, #4]
 80693a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80693a4:	b2db      	uxtb	r3, r3
 80693a6:	2b01      	cmp	r3, #1
 80693a8:	d001      	beq.n	80693ae <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80693aa:	2301      	movs	r3, #1
 80693ac:	e044      	b.n	8069438 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80693ae:	687b      	ldr	r3, [r7, #4]
 80693b0:	2202      	movs	r2, #2
 80693b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80693b6:	687b      	ldr	r3, [r7, #4]
 80693b8:	681b      	ldr	r3, [r3, #0]
 80693ba:	68da      	ldr	r2, [r3, #12]
 80693bc:	687b      	ldr	r3, [r7, #4]
 80693be:	681b      	ldr	r3, [r3, #0]
 80693c0:	f042 0201 	orr.w	r2, r2, #1
 80693c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80693c6:	687b      	ldr	r3, [r7, #4]
 80693c8:	681b      	ldr	r3, [r3, #0]
 80693ca:	4a1d      	ldr	r2, [pc, #116]	; (8069440 <HAL_TIM_Base_Start_IT+0x104>)
 80693cc:	4293      	cmp	r3, r2
 80693ce:	d018      	beq.n	8069402 <HAL_TIM_Base_Start_IT+0xc6>
 80693d0:	687b      	ldr	r3, [r7, #4]
 80693d2:	681b      	ldr	r3, [r3, #0]
 80693d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80693d8:	d013      	beq.n	8069402 <HAL_TIM_Base_Start_IT+0xc6>
 80693da:	687b      	ldr	r3, [r7, #4]
 80693dc:	681b      	ldr	r3, [r3, #0]
 80693de:	4a19      	ldr	r2, [pc, #100]	; (8069444 <HAL_TIM_Base_Start_IT+0x108>)
 80693e0:	4293      	cmp	r3, r2
 80693e2:	d00e      	beq.n	8069402 <HAL_TIM_Base_Start_IT+0xc6>
 80693e4:	687b      	ldr	r3, [r7, #4]
 80693e6:	681b      	ldr	r3, [r3, #0]
 80693e8:	4a17      	ldr	r2, [pc, #92]	; (8069448 <HAL_TIM_Base_Start_IT+0x10c>)
 80693ea:	4293      	cmp	r3, r2
 80693ec:	d009      	beq.n	8069402 <HAL_TIM_Base_Start_IT+0xc6>
 80693ee:	687b      	ldr	r3, [r7, #4]
 80693f0:	681b      	ldr	r3, [r3, #0]
 80693f2:	4a16      	ldr	r2, [pc, #88]	; (806944c <HAL_TIM_Base_Start_IT+0x110>)
 80693f4:	4293      	cmp	r3, r2
 80693f6:	d004      	beq.n	8069402 <HAL_TIM_Base_Start_IT+0xc6>
 80693f8:	687b      	ldr	r3, [r7, #4]
 80693fa:	681b      	ldr	r3, [r3, #0]
 80693fc:	4a14      	ldr	r2, [pc, #80]	; (8069450 <HAL_TIM_Base_Start_IT+0x114>)
 80693fe:	4293      	cmp	r3, r2
 8069400:	d111      	bne.n	8069426 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8069402:	687b      	ldr	r3, [r7, #4]
 8069404:	681b      	ldr	r3, [r3, #0]
 8069406:	689b      	ldr	r3, [r3, #8]
 8069408:	f003 0307 	and.w	r3, r3, #7
 806940c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 806940e:	68fb      	ldr	r3, [r7, #12]
 8069410:	2b06      	cmp	r3, #6
 8069412:	d010      	beq.n	8069436 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8069414:	687b      	ldr	r3, [r7, #4]
 8069416:	681b      	ldr	r3, [r3, #0]
 8069418:	681a      	ldr	r2, [r3, #0]
 806941a:	687b      	ldr	r3, [r7, #4]
 806941c:	681b      	ldr	r3, [r3, #0]
 806941e:	f042 0201 	orr.w	r2, r2, #1
 8069422:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8069424:	e007      	b.n	8069436 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8069426:	687b      	ldr	r3, [r7, #4]
 8069428:	681b      	ldr	r3, [r3, #0]
 806942a:	681a      	ldr	r2, [r3, #0]
 806942c:	687b      	ldr	r3, [r7, #4]
 806942e:	681b      	ldr	r3, [r3, #0]
 8069430:	f042 0201 	orr.w	r2, r2, #1
 8069434:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8069436:	2300      	movs	r3, #0
}
 8069438:	4618      	mov	r0, r3
 806943a:	3710      	adds	r7, #16
 806943c:	46bd      	mov	sp, r7
 806943e:	bd80      	pop	{r7, pc}
 8069440:	40010000 	.word	0x40010000
 8069444:	40000400 	.word	0x40000400
 8069448:	40000800 	.word	0x40000800
 806944c:	40000c00 	.word	0x40000c00
 8069450:	40014000 	.word	0x40014000
 8069454:	40014400 	.word	0x40014400
 8069458:	40014800 	.word	0x40014800
 806945c:	08077504 	.word	0x08077504

08069460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8069460:	b580      	push	{r7, lr}
 8069462:	b082      	sub	sp, #8
 8069464:	af00      	add	r7, sp, #0
 8069466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8069468:	687b      	ldr	r3, [r7, #4]
 806946a:	681b      	ldr	r3, [r3, #0]
 806946c:	691b      	ldr	r3, [r3, #16]
 806946e:	f003 0302 	and.w	r3, r3, #2
 8069472:	2b02      	cmp	r3, #2
 8069474:	d122      	bne.n	80694bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8069476:	687b      	ldr	r3, [r7, #4]
 8069478:	681b      	ldr	r3, [r3, #0]
 806947a:	68db      	ldr	r3, [r3, #12]
 806947c:	f003 0302 	and.w	r3, r3, #2
 8069480:	2b02      	cmp	r3, #2
 8069482:	d11b      	bne.n	80694bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8069484:	687b      	ldr	r3, [r7, #4]
 8069486:	681b      	ldr	r3, [r3, #0]
 8069488:	f06f 0202 	mvn.w	r2, #2
 806948c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 806948e:	687b      	ldr	r3, [r7, #4]
 8069490:	2201      	movs	r2, #1
 8069492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8069494:	687b      	ldr	r3, [r7, #4]
 8069496:	681b      	ldr	r3, [r3, #0]
 8069498:	699b      	ldr	r3, [r3, #24]
 806949a:	f003 0303 	and.w	r3, r3, #3
 806949e:	2b00      	cmp	r3, #0
 80694a0:	d003      	beq.n	80694aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80694a2:	6878      	ldr	r0, [r7, #4]
 80694a4:	f000 f8ee 	bl	8069684 <HAL_TIM_IC_CaptureCallback>
 80694a8:	e005      	b.n	80694b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80694aa:	6878      	ldr	r0, [r7, #4]
 80694ac:	f000 f8e0 	bl	8069670 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80694b0:	6878      	ldr	r0, [r7, #4]
 80694b2:	f000 f8f1 	bl	8069698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80694b6:	687b      	ldr	r3, [r7, #4]
 80694b8:	2200      	movs	r2, #0
 80694ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80694bc:	687b      	ldr	r3, [r7, #4]
 80694be:	681b      	ldr	r3, [r3, #0]
 80694c0:	691b      	ldr	r3, [r3, #16]
 80694c2:	f003 0304 	and.w	r3, r3, #4
 80694c6:	2b04      	cmp	r3, #4
 80694c8:	d122      	bne.n	8069510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80694ca:	687b      	ldr	r3, [r7, #4]
 80694cc:	681b      	ldr	r3, [r3, #0]
 80694ce:	68db      	ldr	r3, [r3, #12]
 80694d0:	f003 0304 	and.w	r3, r3, #4
 80694d4:	2b04      	cmp	r3, #4
 80694d6:	d11b      	bne.n	8069510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80694d8:	687b      	ldr	r3, [r7, #4]
 80694da:	681b      	ldr	r3, [r3, #0]
 80694dc:	f06f 0204 	mvn.w	r2, #4
 80694e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80694e2:	687b      	ldr	r3, [r7, #4]
 80694e4:	2202      	movs	r2, #2
 80694e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80694e8:	687b      	ldr	r3, [r7, #4]
 80694ea:	681b      	ldr	r3, [r3, #0]
 80694ec:	699b      	ldr	r3, [r3, #24]
 80694ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80694f2:	2b00      	cmp	r3, #0
 80694f4:	d003      	beq.n	80694fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80694f6:	6878      	ldr	r0, [r7, #4]
 80694f8:	f000 f8c4 	bl	8069684 <HAL_TIM_IC_CaptureCallback>
 80694fc:	e005      	b.n	806950a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80694fe:	6878      	ldr	r0, [r7, #4]
 8069500:	f000 f8b6 	bl	8069670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8069504:	6878      	ldr	r0, [r7, #4]
 8069506:	f000 f8c7 	bl	8069698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 806950a:	687b      	ldr	r3, [r7, #4]
 806950c:	2200      	movs	r2, #0
 806950e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8069510:	687b      	ldr	r3, [r7, #4]
 8069512:	681b      	ldr	r3, [r3, #0]
 8069514:	691b      	ldr	r3, [r3, #16]
 8069516:	f003 0308 	and.w	r3, r3, #8
 806951a:	2b08      	cmp	r3, #8
 806951c:	d122      	bne.n	8069564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 806951e:	687b      	ldr	r3, [r7, #4]
 8069520:	681b      	ldr	r3, [r3, #0]
 8069522:	68db      	ldr	r3, [r3, #12]
 8069524:	f003 0308 	and.w	r3, r3, #8
 8069528:	2b08      	cmp	r3, #8
 806952a:	d11b      	bne.n	8069564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 806952c:	687b      	ldr	r3, [r7, #4]
 806952e:	681b      	ldr	r3, [r3, #0]
 8069530:	f06f 0208 	mvn.w	r2, #8
 8069534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8069536:	687b      	ldr	r3, [r7, #4]
 8069538:	2204      	movs	r2, #4
 806953a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 806953c:	687b      	ldr	r3, [r7, #4]
 806953e:	681b      	ldr	r3, [r3, #0]
 8069540:	69db      	ldr	r3, [r3, #28]
 8069542:	f003 0303 	and.w	r3, r3, #3
 8069546:	2b00      	cmp	r3, #0
 8069548:	d003      	beq.n	8069552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 806954a:	6878      	ldr	r0, [r7, #4]
 806954c:	f000 f89a 	bl	8069684 <HAL_TIM_IC_CaptureCallback>
 8069550:	e005      	b.n	806955e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8069552:	6878      	ldr	r0, [r7, #4]
 8069554:	f000 f88c 	bl	8069670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8069558:	6878      	ldr	r0, [r7, #4]
 806955a:	f000 f89d 	bl	8069698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 806955e:	687b      	ldr	r3, [r7, #4]
 8069560:	2200      	movs	r2, #0
 8069562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8069564:	687b      	ldr	r3, [r7, #4]
 8069566:	681b      	ldr	r3, [r3, #0]
 8069568:	691b      	ldr	r3, [r3, #16]
 806956a:	f003 0310 	and.w	r3, r3, #16
 806956e:	2b10      	cmp	r3, #16
 8069570:	d122      	bne.n	80695b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8069572:	687b      	ldr	r3, [r7, #4]
 8069574:	681b      	ldr	r3, [r3, #0]
 8069576:	68db      	ldr	r3, [r3, #12]
 8069578:	f003 0310 	and.w	r3, r3, #16
 806957c:	2b10      	cmp	r3, #16
 806957e:	d11b      	bne.n	80695b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8069580:	687b      	ldr	r3, [r7, #4]
 8069582:	681b      	ldr	r3, [r3, #0]
 8069584:	f06f 0210 	mvn.w	r2, #16
 8069588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 806958a:	687b      	ldr	r3, [r7, #4]
 806958c:	2208      	movs	r2, #8
 806958e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8069590:	687b      	ldr	r3, [r7, #4]
 8069592:	681b      	ldr	r3, [r3, #0]
 8069594:	69db      	ldr	r3, [r3, #28]
 8069596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 806959a:	2b00      	cmp	r3, #0
 806959c:	d003      	beq.n	80695a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 806959e:	6878      	ldr	r0, [r7, #4]
 80695a0:	f000 f870 	bl	8069684 <HAL_TIM_IC_CaptureCallback>
 80695a4:	e005      	b.n	80695b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80695a6:	6878      	ldr	r0, [r7, #4]
 80695a8:	f000 f862 	bl	8069670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80695ac:	6878      	ldr	r0, [r7, #4]
 80695ae:	f000 f873 	bl	8069698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80695b2:	687b      	ldr	r3, [r7, #4]
 80695b4:	2200      	movs	r2, #0
 80695b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80695b8:	687b      	ldr	r3, [r7, #4]
 80695ba:	681b      	ldr	r3, [r3, #0]
 80695bc:	691b      	ldr	r3, [r3, #16]
 80695be:	f003 0301 	and.w	r3, r3, #1
 80695c2:	2b01      	cmp	r3, #1
 80695c4:	d10e      	bne.n	80695e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80695c6:	687b      	ldr	r3, [r7, #4]
 80695c8:	681b      	ldr	r3, [r3, #0]
 80695ca:	68db      	ldr	r3, [r3, #12]
 80695cc:	f003 0301 	and.w	r3, r3, #1
 80695d0:	2b01      	cmp	r3, #1
 80695d2:	d107      	bne.n	80695e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80695d4:	687b      	ldr	r3, [r7, #4]
 80695d6:	681b      	ldr	r3, [r3, #0]
 80695d8:	f06f 0201 	mvn.w	r2, #1
 80695dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80695de:	6878      	ldr	r0, [r7, #4]
 80695e0:	f7f9 fd66 	bl	80630b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80695e4:	687b      	ldr	r3, [r7, #4]
 80695e6:	681b      	ldr	r3, [r3, #0]
 80695e8:	691b      	ldr	r3, [r3, #16]
 80695ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80695ee:	2b80      	cmp	r3, #128	; 0x80
 80695f0:	d10e      	bne.n	8069610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80695f2:	687b      	ldr	r3, [r7, #4]
 80695f4:	681b      	ldr	r3, [r3, #0]
 80695f6:	68db      	ldr	r3, [r3, #12]
 80695f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80695fc:	2b80      	cmp	r3, #128	; 0x80
 80695fe:	d107      	bne.n	8069610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8069600:	687b      	ldr	r3, [r7, #4]
 8069602:	681b      	ldr	r3, [r3, #0]
 8069604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8069608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 806960a:	6878      	ldr	r0, [r7, #4]
 806960c:	f000 f8e2 	bl	80697d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8069610:	687b      	ldr	r3, [r7, #4]
 8069612:	681b      	ldr	r3, [r3, #0]
 8069614:	691b      	ldr	r3, [r3, #16]
 8069616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806961a:	2b40      	cmp	r3, #64	; 0x40
 806961c:	d10e      	bne.n	806963c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 806961e:	687b      	ldr	r3, [r7, #4]
 8069620:	681b      	ldr	r3, [r3, #0]
 8069622:	68db      	ldr	r3, [r3, #12]
 8069624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069628:	2b40      	cmp	r3, #64	; 0x40
 806962a:	d107      	bne.n	806963c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 806962c:	687b      	ldr	r3, [r7, #4]
 806962e:	681b      	ldr	r3, [r3, #0]
 8069630:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8069634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8069636:	6878      	ldr	r0, [r7, #4]
 8069638:	f000 f838 	bl	80696ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 806963c:	687b      	ldr	r3, [r7, #4]
 806963e:	681b      	ldr	r3, [r3, #0]
 8069640:	691b      	ldr	r3, [r3, #16]
 8069642:	f003 0320 	and.w	r3, r3, #32
 8069646:	2b20      	cmp	r3, #32
 8069648:	d10e      	bne.n	8069668 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 806964a:	687b      	ldr	r3, [r7, #4]
 806964c:	681b      	ldr	r3, [r3, #0]
 806964e:	68db      	ldr	r3, [r3, #12]
 8069650:	f003 0320 	and.w	r3, r3, #32
 8069654:	2b20      	cmp	r3, #32
 8069656:	d107      	bne.n	8069668 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8069658:	687b      	ldr	r3, [r7, #4]
 806965a:	681b      	ldr	r3, [r3, #0]
 806965c:	f06f 0220 	mvn.w	r2, #32
 8069660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8069662:	6878      	ldr	r0, [r7, #4]
 8069664:	f000 f8ac 	bl	80697c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8069668:	bf00      	nop
 806966a:	3708      	adds	r7, #8
 806966c:	46bd      	mov	sp, r7
 806966e:	bd80      	pop	{r7, pc}

08069670 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8069670:	b480      	push	{r7}
 8069672:	b083      	sub	sp, #12
 8069674:	af00      	add	r7, sp, #0
 8069676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8069678:	bf00      	nop
 806967a:	370c      	adds	r7, #12
 806967c:	46bd      	mov	sp, r7
 806967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069682:	4770      	bx	lr

08069684 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8069684:	b480      	push	{r7}
 8069686:	b083      	sub	sp, #12
 8069688:	af00      	add	r7, sp, #0
 806968a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 806968c:	bf00      	nop
 806968e:	370c      	adds	r7, #12
 8069690:	46bd      	mov	sp, r7
 8069692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069696:	4770      	bx	lr

08069698 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8069698:	b480      	push	{r7}
 806969a:	b083      	sub	sp, #12
 806969c:	af00      	add	r7, sp, #0
 806969e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80696a0:	bf00      	nop
 80696a2:	370c      	adds	r7, #12
 80696a4:	46bd      	mov	sp, r7
 80696a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80696aa:	4770      	bx	lr

080696ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80696ac:	b480      	push	{r7}
 80696ae:	b083      	sub	sp, #12
 80696b0:	af00      	add	r7, sp, #0
 80696b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80696b4:	bf00      	nop
 80696b6:	370c      	adds	r7, #12
 80696b8:	46bd      	mov	sp, r7
 80696ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80696be:	4770      	bx	lr

080696c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80696c0:	b480      	push	{r7}
 80696c2:	b085      	sub	sp, #20
 80696c4:	af00      	add	r7, sp, #0
 80696c6:	6078      	str	r0, [r7, #4]
 80696c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80696ca:	687b      	ldr	r3, [r7, #4]
 80696cc:	681b      	ldr	r3, [r3, #0]
 80696ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80696d0:	687b      	ldr	r3, [r7, #4]
 80696d2:	4a34      	ldr	r2, [pc, #208]	; (80697a4 <TIM_Base_SetConfig+0xe4>)
 80696d4:	4293      	cmp	r3, r2
 80696d6:	d00f      	beq.n	80696f8 <TIM_Base_SetConfig+0x38>
 80696d8:	687b      	ldr	r3, [r7, #4]
 80696da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80696de:	d00b      	beq.n	80696f8 <TIM_Base_SetConfig+0x38>
 80696e0:	687b      	ldr	r3, [r7, #4]
 80696e2:	4a31      	ldr	r2, [pc, #196]	; (80697a8 <TIM_Base_SetConfig+0xe8>)
 80696e4:	4293      	cmp	r3, r2
 80696e6:	d007      	beq.n	80696f8 <TIM_Base_SetConfig+0x38>
 80696e8:	687b      	ldr	r3, [r7, #4]
 80696ea:	4a30      	ldr	r2, [pc, #192]	; (80697ac <TIM_Base_SetConfig+0xec>)
 80696ec:	4293      	cmp	r3, r2
 80696ee:	d003      	beq.n	80696f8 <TIM_Base_SetConfig+0x38>
 80696f0:	687b      	ldr	r3, [r7, #4]
 80696f2:	4a2f      	ldr	r2, [pc, #188]	; (80697b0 <TIM_Base_SetConfig+0xf0>)
 80696f4:	4293      	cmp	r3, r2
 80696f6:	d108      	bne.n	806970a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80696f8:	68fb      	ldr	r3, [r7, #12]
 80696fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80696fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8069700:	683b      	ldr	r3, [r7, #0]
 8069702:	685b      	ldr	r3, [r3, #4]
 8069704:	68fa      	ldr	r2, [r7, #12]
 8069706:	4313      	orrs	r3, r2
 8069708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 806970a:	687b      	ldr	r3, [r7, #4]
 806970c:	4a25      	ldr	r2, [pc, #148]	; (80697a4 <TIM_Base_SetConfig+0xe4>)
 806970e:	4293      	cmp	r3, r2
 8069710:	d01b      	beq.n	806974a <TIM_Base_SetConfig+0x8a>
 8069712:	687b      	ldr	r3, [r7, #4]
 8069714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8069718:	d017      	beq.n	806974a <TIM_Base_SetConfig+0x8a>
 806971a:	687b      	ldr	r3, [r7, #4]
 806971c:	4a22      	ldr	r2, [pc, #136]	; (80697a8 <TIM_Base_SetConfig+0xe8>)
 806971e:	4293      	cmp	r3, r2
 8069720:	d013      	beq.n	806974a <TIM_Base_SetConfig+0x8a>
 8069722:	687b      	ldr	r3, [r7, #4]
 8069724:	4a21      	ldr	r2, [pc, #132]	; (80697ac <TIM_Base_SetConfig+0xec>)
 8069726:	4293      	cmp	r3, r2
 8069728:	d00f      	beq.n	806974a <TIM_Base_SetConfig+0x8a>
 806972a:	687b      	ldr	r3, [r7, #4]
 806972c:	4a20      	ldr	r2, [pc, #128]	; (80697b0 <TIM_Base_SetConfig+0xf0>)
 806972e:	4293      	cmp	r3, r2
 8069730:	d00b      	beq.n	806974a <TIM_Base_SetConfig+0x8a>
 8069732:	687b      	ldr	r3, [r7, #4]
 8069734:	4a1f      	ldr	r2, [pc, #124]	; (80697b4 <TIM_Base_SetConfig+0xf4>)
 8069736:	4293      	cmp	r3, r2
 8069738:	d007      	beq.n	806974a <TIM_Base_SetConfig+0x8a>
 806973a:	687b      	ldr	r3, [r7, #4]
 806973c:	4a1e      	ldr	r2, [pc, #120]	; (80697b8 <TIM_Base_SetConfig+0xf8>)
 806973e:	4293      	cmp	r3, r2
 8069740:	d003      	beq.n	806974a <TIM_Base_SetConfig+0x8a>
 8069742:	687b      	ldr	r3, [r7, #4]
 8069744:	4a1d      	ldr	r2, [pc, #116]	; (80697bc <TIM_Base_SetConfig+0xfc>)
 8069746:	4293      	cmp	r3, r2
 8069748:	d108      	bne.n	806975c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 806974a:	68fb      	ldr	r3, [r7, #12]
 806974c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8069750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8069752:	683b      	ldr	r3, [r7, #0]
 8069754:	68db      	ldr	r3, [r3, #12]
 8069756:	68fa      	ldr	r2, [r7, #12]
 8069758:	4313      	orrs	r3, r2
 806975a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 806975c:	68fb      	ldr	r3, [r7, #12]
 806975e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8069762:	683b      	ldr	r3, [r7, #0]
 8069764:	695b      	ldr	r3, [r3, #20]
 8069766:	4313      	orrs	r3, r2
 8069768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 806976a:	687b      	ldr	r3, [r7, #4]
 806976c:	68fa      	ldr	r2, [r7, #12]
 806976e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8069770:	683b      	ldr	r3, [r7, #0]
 8069772:	689a      	ldr	r2, [r3, #8]
 8069774:	687b      	ldr	r3, [r7, #4]
 8069776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8069778:	683b      	ldr	r3, [r7, #0]
 806977a:	681a      	ldr	r2, [r3, #0]
 806977c:	687b      	ldr	r3, [r7, #4]
 806977e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8069780:	687b      	ldr	r3, [r7, #4]
 8069782:	4a08      	ldr	r2, [pc, #32]	; (80697a4 <TIM_Base_SetConfig+0xe4>)
 8069784:	4293      	cmp	r3, r2
 8069786:	d103      	bne.n	8069790 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8069788:	683b      	ldr	r3, [r7, #0]
 806978a:	691a      	ldr	r2, [r3, #16]
 806978c:	687b      	ldr	r3, [r7, #4]
 806978e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8069790:	687b      	ldr	r3, [r7, #4]
 8069792:	2201      	movs	r2, #1
 8069794:	615a      	str	r2, [r3, #20]
}
 8069796:	bf00      	nop
 8069798:	3714      	adds	r7, #20
 806979a:	46bd      	mov	sp, r7
 806979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80697a0:	4770      	bx	lr
 80697a2:	bf00      	nop
 80697a4:	40010000 	.word	0x40010000
 80697a8:	40000400 	.word	0x40000400
 80697ac:	40000800 	.word	0x40000800
 80697b0:	40000c00 	.word	0x40000c00
 80697b4:	40014000 	.word	0x40014000
 80697b8:	40014400 	.word	0x40014400
 80697bc:	40014800 	.word	0x40014800

080697c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80697c0:	b480      	push	{r7}
 80697c2:	b083      	sub	sp, #12
 80697c4:	af00      	add	r7, sp, #0
 80697c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80697c8:	bf00      	nop
 80697ca:	370c      	adds	r7, #12
 80697cc:	46bd      	mov	sp, r7
 80697ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80697d2:	4770      	bx	lr

080697d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80697d4:	b480      	push	{r7}
 80697d6:	b083      	sub	sp, #12
 80697d8:	af00      	add	r7, sp, #0
 80697da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80697dc:	bf00      	nop
 80697de:	370c      	adds	r7, #12
 80697e0:	46bd      	mov	sp, r7
 80697e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80697e6:	4770      	bx	lr

080697e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80697e8:	b580      	push	{r7, lr}
 80697ea:	b082      	sub	sp, #8
 80697ec:	af00      	add	r7, sp, #0
 80697ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80697f0:	687b      	ldr	r3, [r7, #4]
 80697f2:	2b00      	cmp	r3, #0
 80697f4:	d101      	bne.n	80697fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80697f6:	2301      	movs	r3, #1
 80697f8:	e0a0      	b.n	806993c <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80697fa:	687b      	ldr	r3, [r7, #4]
 80697fc:	699b      	ldr	r3, [r3, #24]
 80697fe:	2b00      	cmp	r3, #0
 8069800:	d02c      	beq.n	806985c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8069802:	687b      	ldr	r3, [r7, #4]
 8069804:	681b      	ldr	r3, [r3, #0]
 8069806:	4a4f      	ldr	r2, [pc, #316]	; (8069944 <HAL_UART_Init+0x15c>)
 8069808:	4293      	cmp	r3, r2
 806980a:	d00e      	beq.n	806982a <HAL_UART_Init+0x42>
 806980c:	687b      	ldr	r3, [r7, #4]
 806980e:	681b      	ldr	r3, [r3, #0]
 8069810:	4a4d      	ldr	r2, [pc, #308]	; (8069948 <HAL_UART_Init+0x160>)
 8069812:	4293      	cmp	r3, r2
 8069814:	d009      	beq.n	806982a <HAL_UART_Init+0x42>
 8069816:	687b      	ldr	r3, [r7, #4]
 8069818:	681b      	ldr	r3, [r3, #0]
 806981a:	4a4c      	ldr	r2, [pc, #304]	; (806994c <HAL_UART_Init+0x164>)
 806981c:	4293      	cmp	r3, r2
 806981e:	d004      	beq.n	806982a <HAL_UART_Init+0x42>
 8069820:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8069824:	484a      	ldr	r0, [pc, #296]	; (8069950 <HAL_UART_Init+0x168>)
 8069826:	f7f9 fc5a 	bl	80630de <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 806982a:	687b      	ldr	r3, [r7, #4]
 806982c:	699b      	ldr	r3, [r3, #24]
 806982e:	2b00      	cmp	r3, #0
 8069830:	d028      	beq.n	8069884 <HAL_UART_Init+0x9c>
 8069832:	687b      	ldr	r3, [r7, #4]
 8069834:	699b      	ldr	r3, [r3, #24]
 8069836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806983a:	d023      	beq.n	8069884 <HAL_UART_Init+0x9c>
 806983c:	687b      	ldr	r3, [r7, #4]
 806983e:	699b      	ldr	r3, [r3, #24]
 8069840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8069844:	d01e      	beq.n	8069884 <HAL_UART_Init+0x9c>
 8069846:	687b      	ldr	r3, [r7, #4]
 8069848:	699b      	ldr	r3, [r3, #24]
 806984a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 806984e:	d019      	beq.n	8069884 <HAL_UART_Init+0x9c>
 8069850:	f240 1173 	movw	r1, #371	; 0x173
 8069854:	483e      	ldr	r0, [pc, #248]	; (8069950 <HAL_UART_Init+0x168>)
 8069856:	f7f9 fc42 	bl	80630de <assert_failed>
 806985a:	e013      	b.n	8069884 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 806985c:	687b      	ldr	r3, [r7, #4]
 806985e:	681b      	ldr	r3, [r3, #0]
 8069860:	4a38      	ldr	r2, [pc, #224]	; (8069944 <HAL_UART_Init+0x15c>)
 8069862:	4293      	cmp	r3, r2
 8069864:	d00e      	beq.n	8069884 <HAL_UART_Init+0x9c>
 8069866:	687b      	ldr	r3, [r7, #4]
 8069868:	681b      	ldr	r3, [r3, #0]
 806986a:	4a37      	ldr	r2, [pc, #220]	; (8069948 <HAL_UART_Init+0x160>)
 806986c:	4293      	cmp	r3, r2
 806986e:	d009      	beq.n	8069884 <HAL_UART_Init+0x9c>
 8069870:	687b      	ldr	r3, [r7, #4]
 8069872:	681b      	ldr	r3, [r3, #0]
 8069874:	4a35      	ldr	r2, [pc, #212]	; (806994c <HAL_UART_Init+0x164>)
 8069876:	4293      	cmp	r3, r2
 8069878:	d004      	beq.n	8069884 <HAL_UART_Init+0x9c>
 806987a:	f240 1177 	movw	r1, #375	; 0x177
 806987e:	4834      	ldr	r0, [pc, #208]	; (8069950 <HAL_UART_Init+0x168>)
 8069880:	f7f9 fc2d 	bl	80630de <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8069884:	687b      	ldr	r3, [r7, #4]
 8069886:	689b      	ldr	r3, [r3, #8]
 8069888:	2b00      	cmp	r3, #0
 806988a:	d009      	beq.n	80698a0 <HAL_UART_Init+0xb8>
 806988c:	687b      	ldr	r3, [r7, #4]
 806988e:	689b      	ldr	r3, [r3, #8]
 8069890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8069894:	d004      	beq.n	80698a0 <HAL_UART_Init+0xb8>
 8069896:	f240 1179 	movw	r1, #377	; 0x179
 806989a:	482d      	ldr	r0, [pc, #180]	; (8069950 <HAL_UART_Init+0x168>)
 806989c:	f7f9 fc1f 	bl	80630de <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80698a0:	687b      	ldr	r3, [r7, #4]
 80698a2:	69db      	ldr	r3, [r3, #28]
 80698a4:	2b00      	cmp	r3, #0
 80698a6:	d009      	beq.n	80698bc <HAL_UART_Init+0xd4>
 80698a8:	687b      	ldr	r3, [r7, #4]
 80698aa:	69db      	ldr	r3, [r3, #28]
 80698ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80698b0:	d004      	beq.n	80698bc <HAL_UART_Init+0xd4>
 80698b2:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80698b6:	4826      	ldr	r0, [pc, #152]	; (8069950 <HAL_UART_Init+0x168>)
 80698b8:	f7f9 fc11 	bl	80630de <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80698bc:	687b      	ldr	r3, [r7, #4]
 80698be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80698c2:	b2db      	uxtb	r3, r3
 80698c4:	2b00      	cmp	r3, #0
 80698c6:	d106      	bne.n	80698d6 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80698c8:	687b      	ldr	r3, [r7, #4]
 80698ca:	2200      	movs	r2, #0
 80698cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80698d0:	6878      	ldr	r0, [r7, #4]
 80698d2:	f7f9 ffcb 	bl	806386c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80698d6:	687b      	ldr	r3, [r7, #4]
 80698d8:	2224      	movs	r2, #36	; 0x24
 80698da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80698de:	687b      	ldr	r3, [r7, #4]
 80698e0:	681b      	ldr	r3, [r3, #0]
 80698e2:	68da      	ldr	r2, [r3, #12]
 80698e4:	687b      	ldr	r3, [r7, #4]
 80698e6:	681b      	ldr	r3, [r3, #0]
 80698e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80698ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80698ee:	6878      	ldr	r0, [r7, #4]
 80698f0:	f000 fe84 	bl	806a5fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80698f4:	687b      	ldr	r3, [r7, #4]
 80698f6:	681b      	ldr	r3, [r3, #0]
 80698f8:	691a      	ldr	r2, [r3, #16]
 80698fa:	687b      	ldr	r3, [r7, #4]
 80698fc:	681b      	ldr	r3, [r3, #0]
 80698fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8069902:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8069904:	687b      	ldr	r3, [r7, #4]
 8069906:	681b      	ldr	r3, [r3, #0]
 8069908:	695a      	ldr	r2, [r3, #20]
 806990a:	687b      	ldr	r3, [r7, #4]
 806990c:	681b      	ldr	r3, [r3, #0]
 806990e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8069912:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8069914:	687b      	ldr	r3, [r7, #4]
 8069916:	681b      	ldr	r3, [r3, #0]
 8069918:	68da      	ldr	r2, [r3, #12]
 806991a:	687b      	ldr	r3, [r7, #4]
 806991c:	681b      	ldr	r3, [r3, #0]
 806991e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8069922:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8069924:	687b      	ldr	r3, [r7, #4]
 8069926:	2200      	movs	r2, #0
 8069928:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 806992a:	687b      	ldr	r3, [r7, #4]
 806992c:	2220      	movs	r2, #32
 806992e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8069932:	687b      	ldr	r3, [r7, #4]
 8069934:	2220      	movs	r2, #32
 8069936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 806993a:	2300      	movs	r3, #0
}
 806993c:	4618      	mov	r0, r3
 806993e:	3708      	adds	r7, #8
 8069940:	46bd      	mov	sp, r7
 8069942:	bd80      	pop	{r7, pc}
 8069944:	40011000 	.word	0x40011000
 8069948:	40004400 	.word	0x40004400
 806994c:	40011400 	.word	0x40011400
 8069950:	0807753c 	.word	0x0807753c

08069954 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8069954:	b580      	push	{r7, lr}
 8069956:	b08a      	sub	sp, #40	; 0x28
 8069958:	af02      	add	r7, sp, #8
 806995a:	60f8      	str	r0, [r7, #12]
 806995c:	60b9      	str	r1, [r7, #8]
 806995e:	603b      	str	r3, [r7, #0]
 8069960:	4613      	mov	r3, r2
 8069962:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8069964:	2300      	movs	r3, #0
 8069966:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8069968:	68fb      	ldr	r3, [r7, #12]
 806996a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 806996e:	b2db      	uxtb	r3, r3
 8069970:	2b20      	cmp	r3, #32
 8069972:	d17c      	bne.n	8069a6e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8069974:	68bb      	ldr	r3, [r7, #8]
 8069976:	2b00      	cmp	r3, #0
 8069978:	d002      	beq.n	8069980 <HAL_UART_Transmit+0x2c>
 806997a:	88fb      	ldrh	r3, [r7, #6]
 806997c:	2b00      	cmp	r3, #0
 806997e:	d101      	bne.n	8069984 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8069980:	2301      	movs	r3, #1
 8069982:	e075      	b.n	8069a70 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8069984:	68fb      	ldr	r3, [r7, #12]
 8069986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 806998a:	2b01      	cmp	r3, #1
 806998c:	d101      	bne.n	8069992 <HAL_UART_Transmit+0x3e>
 806998e:	2302      	movs	r3, #2
 8069990:	e06e      	b.n	8069a70 <HAL_UART_Transmit+0x11c>
 8069992:	68fb      	ldr	r3, [r7, #12]
 8069994:	2201      	movs	r2, #1
 8069996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 806999a:	68fb      	ldr	r3, [r7, #12]
 806999c:	2200      	movs	r2, #0
 806999e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80699a0:	68fb      	ldr	r3, [r7, #12]
 80699a2:	2221      	movs	r2, #33	; 0x21
 80699a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80699a8:	f7fa f864 	bl	8063a74 <HAL_GetTick>
 80699ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80699ae:	68fb      	ldr	r3, [r7, #12]
 80699b0:	88fa      	ldrh	r2, [r7, #6]
 80699b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80699b4:	68fb      	ldr	r3, [r7, #12]
 80699b6:	88fa      	ldrh	r2, [r7, #6]
 80699b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80699ba:	68fb      	ldr	r3, [r7, #12]
 80699bc:	689b      	ldr	r3, [r3, #8]
 80699be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80699c2:	d108      	bne.n	80699d6 <HAL_UART_Transmit+0x82>
 80699c4:	68fb      	ldr	r3, [r7, #12]
 80699c6:	691b      	ldr	r3, [r3, #16]
 80699c8:	2b00      	cmp	r3, #0
 80699ca:	d104      	bne.n	80699d6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80699cc:	2300      	movs	r3, #0
 80699ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80699d0:	68bb      	ldr	r3, [r7, #8]
 80699d2:	61bb      	str	r3, [r7, #24]
 80699d4:	e003      	b.n	80699de <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80699d6:	68bb      	ldr	r3, [r7, #8]
 80699d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80699da:	2300      	movs	r3, #0
 80699dc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80699de:	68fb      	ldr	r3, [r7, #12]
 80699e0:	2200      	movs	r2, #0
 80699e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80699e6:	e02a      	b.n	8069a3e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80699e8:	683b      	ldr	r3, [r7, #0]
 80699ea:	9300      	str	r3, [sp, #0]
 80699ec:	697b      	ldr	r3, [r7, #20]
 80699ee:	2200      	movs	r2, #0
 80699f0:	2180      	movs	r1, #128	; 0x80
 80699f2:	68f8      	ldr	r0, [r7, #12]
 80699f4:	f000 fbc0 	bl	806a178 <UART_WaitOnFlagUntilTimeout>
 80699f8:	4603      	mov	r3, r0
 80699fa:	2b00      	cmp	r3, #0
 80699fc:	d001      	beq.n	8069a02 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80699fe:	2303      	movs	r3, #3
 8069a00:	e036      	b.n	8069a70 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8069a02:	69fb      	ldr	r3, [r7, #28]
 8069a04:	2b00      	cmp	r3, #0
 8069a06:	d10b      	bne.n	8069a20 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8069a08:	69bb      	ldr	r3, [r7, #24]
 8069a0a:	881b      	ldrh	r3, [r3, #0]
 8069a0c:	461a      	mov	r2, r3
 8069a0e:	68fb      	ldr	r3, [r7, #12]
 8069a10:	681b      	ldr	r3, [r3, #0]
 8069a12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8069a16:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8069a18:	69bb      	ldr	r3, [r7, #24]
 8069a1a:	3302      	adds	r3, #2
 8069a1c:	61bb      	str	r3, [r7, #24]
 8069a1e:	e007      	b.n	8069a30 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8069a20:	69fb      	ldr	r3, [r7, #28]
 8069a22:	781a      	ldrb	r2, [r3, #0]
 8069a24:	68fb      	ldr	r3, [r7, #12]
 8069a26:	681b      	ldr	r3, [r3, #0]
 8069a28:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8069a2a:	69fb      	ldr	r3, [r7, #28]
 8069a2c:	3301      	adds	r3, #1
 8069a2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8069a30:	68fb      	ldr	r3, [r7, #12]
 8069a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8069a34:	b29b      	uxth	r3, r3
 8069a36:	3b01      	subs	r3, #1
 8069a38:	b29a      	uxth	r2, r3
 8069a3a:	68fb      	ldr	r3, [r7, #12]
 8069a3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8069a3e:	68fb      	ldr	r3, [r7, #12]
 8069a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8069a42:	b29b      	uxth	r3, r3
 8069a44:	2b00      	cmp	r3, #0
 8069a46:	d1cf      	bne.n	80699e8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8069a48:	683b      	ldr	r3, [r7, #0]
 8069a4a:	9300      	str	r3, [sp, #0]
 8069a4c:	697b      	ldr	r3, [r7, #20]
 8069a4e:	2200      	movs	r2, #0
 8069a50:	2140      	movs	r1, #64	; 0x40
 8069a52:	68f8      	ldr	r0, [r7, #12]
 8069a54:	f000 fb90 	bl	806a178 <UART_WaitOnFlagUntilTimeout>
 8069a58:	4603      	mov	r3, r0
 8069a5a:	2b00      	cmp	r3, #0
 8069a5c:	d001      	beq.n	8069a62 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8069a5e:	2303      	movs	r3, #3
 8069a60:	e006      	b.n	8069a70 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8069a62:	68fb      	ldr	r3, [r7, #12]
 8069a64:	2220      	movs	r2, #32
 8069a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8069a6a:	2300      	movs	r3, #0
 8069a6c:	e000      	b.n	8069a70 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8069a6e:	2302      	movs	r3, #2
  }
}
 8069a70:	4618      	mov	r0, r3
 8069a72:	3720      	adds	r7, #32
 8069a74:	46bd      	mov	sp, r7
 8069a76:	bd80      	pop	{r7, pc}

08069a78 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8069a78:	b580      	push	{r7, lr}
 8069a7a:	b08a      	sub	sp, #40	; 0x28
 8069a7c:	af02      	add	r7, sp, #8
 8069a7e:	60f8      	str	r0, [r7, #12]
 8069a80:	60b9      	str	r1, [r7, #8]
 8069a82:	603b      	str	r3, [r7, #0]
 8069a84:	4613      	mov	r3, r2
 8069a86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8069a88:	2300      	movs	r3, #0
 8069a8a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8069a8c:	68fb      	ldr	r3, [r7, #12]
 8069a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8069a92:	b2db      	uxtb	r3, r3
 8069a94:	2b20      	cmp	r3, #32
 8069a96:	f040 808c 	bne.w	8069bb2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8069a9a:	68bb      	ldr	r3, [r7, #8]
 8069a9c:	2b00      	cmp	r3, #0
 8069a9e:	d002      	beq.n	8069aa6 <HAL_UART_Receive+0x2e>
 8069aa0:	88fb      	ldrh	r3, [r7, #6]
 8069aa2:	2b00      	cmp	r3, #0
 8069aa4:	d101      	bne.n	8069aaa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8069aa6:	2301      	movs	r3, #1
 8069aa8:	e084      	b.n	8069bb4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8069aaa:	68fb      	ldr	r3, [r7, #12]
 8069aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8069ab0:	2b01      	cmp	r3, #1
 8069ab2:	d101      	bne.n	8069ab8 <HAL_UART_Receive+0x40>
 8069ab4:	2302      	movs	r3, #2
 8069ab6:	e07d      	b.n	8069bb4 <HAL_UART_Receive+0x13c>
 8069ab8:	68fb      	ldr	r3, [r7, #12]
 8069aba:	2201      	movs	r2, #1
 8069abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8069ac0:	68fb      	ldr	r3, [r7, #12]
 8069ac2:	2200      	movs	r2, #0
 8069ac4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8069ac6:	68fb      	ldr	r3, [r7, #12]
 8069ac8:	2222      	movs	r2, #34	; 0x22
 8069aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8069ace:	68fb      	ldr	r3, [r7, #12]
 8069ad0:	2200      	movs	r2, #0
 8069ad2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8069ad4:	f7f9 ffce 	bl	8063a74 <HAL_GetTick>
 8069ad8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8069ada:	68fb      	ldr	r3, [r7, #12]
 8069adc:	88fa      	ldrh	r2, [r7, #6]
 8069ade:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8069ae0:	68fb      	ldr	r3, [r7, #12]
 8069ae2:	88fa      	ldrh	r2, [r7, #6]
 8069ae4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8069ae6:	68fb      	ldr	r3, [r7, #12]
 8069ae8:	689b      	ldr	r3, [r3, #8]
 8069aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8069aee:	d108      	bne.n	8069b02 <HAL_UART_Receive+0x8a>
 8069af0:	68fb      	ldr	r3, [r7, #12]
 8069af2:	691b      	ldr	r3, [r3, #16]
 8069af4:	2b00      	cmp	r3, #0
 8069af6:	d104      	bne.n	8069b02 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8069af8:	2300      	movs	r3, #0
 8069afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8069afc:	68bb      	ldr	r3, [r7, #8]
 8069afe:	61bb      	str	r3, [r7, #24]
 8069b00:	e003      	b.n	8069b0a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8069b02:	68bb      	ldr	r3, [r7, #8]
 8069b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8069b06:	2300      	movs	r3, #0
 8069b08:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8069b0a:	68fb      	ldr	r3, [r7, #12]
 8069b0c:	2200      	movs	r2, #0
 8069b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8069b12:	e043      	b.n	8069b9c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8069b14:	683b      	ldr	r3, [r7, #0]
 8069b16:	9300      	str	r3, [sp, #0]
 8069b18:	697b      	ldr	r3, [r7, #20]
 8069b1a:	2200      	movs	r2, #0
 8069b1c:	2120      	movs	r1, #32
 8069b1e:	68f8      	ldr	r0, [r7, #12]
 8069b20:	f000 fb2a 	bl	806a178 <UART_WaitOnFlagUntilTimeout>
 8069b24:	4603      	mov	r3, r0
 8069b26:	2b00      	cmp	r3, #0
 8069b28:	d001      	beq.n	8069b2e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8069b2a:	2303      	movs	r3, #3
 8069b2c:	e042      	b.n	8069bb4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8069b2e:	69fb      	ldr	r3, [r7, #28]
 8069b30:	2b00      	cmp	r3, #0
 8069b32:	d10c      	bne.n	8069b4e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8069b34:	68fb      	ldr	r3, [r7, #12]
 8069b36:	681b      	ldr	r3, [r3, #0]
 8069b38:	685b      	ldr	r3, [r3, #4]
 8069b3a:	b29b      	uxth	r3, r3
 8069b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8069b40:	b29a      	uxth	r2, r3
 8069b42:	69bb      	ldr	r3, [r7, #24]
 8069b44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8069b46:	69bb      	ldr	r3, [r7, #24]
 8069b48:	3302      	adds	r3, #2
 8069b4a:	61bb      	str	r3, [r7, #24]
 8069b4c:	e01f      	b.n	8069b8e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8069b4e:	68fb      	ldr	r3, [r7, #12]
 8069b50:	689b      	ldr	r3, [r3, #8]
 8069b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8069b56:	d007      	beq.n	8069b68 <HAL_UART_Receive+0xf0>
 8069b58:	68fb      	ldr	r3, [r7, #12]
 8069b5a:	689b      	ldr	r3, [r3, #8]
 8069b5c:	2b00      	cmp	r3, #0
 8069b5e:	d10a      	bne.n	8069b76 <HAL_UART_Receive+0xfe>
 8069b60:	68fb      	ldr	r3, [r7, #12]
 8069b62:	691b      	ldr	r3, [r3, #16]
 8069b64:	2b00      	cmp	r3, #0
 8069b66:	d106      	bne.n	8069b76 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8069b68:	68fb      	ldr	r3, [r7, #12]
 8069b6a:	681b      	ldr	r3, [r3, #0]
 8069b6c:	685b      	ldr	r3, [r3, #4]
 8069b6e:	b2da      	uxtb	r2, r3
 8069b70:	69fb      	ldr	r3, [r7, #28]
 8069b72:	701a      	strb	r2, [r3, #0]
 8069b74:	e008      	b.n	8069b88 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8069b76:	68fb      	ldr	r3, [r7, #12]
 8069b78:	681b      	ldr	r3, [r3, #0]
 8069b7a:	685b      	ldr	r3, [r3, #4]
 8069b7c:	b2db      	uxtb	r3, r3
 8069b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8069b82:	b2da      	uxtb	r2, r3
 8069b84:	69fb      	ldr	r3, [r7, #28]
 8069b86:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8069b88:	69fb      	ldr	r3, [r7, #28]
 8069b8a:	3301      	adds	r3, #1
 8069b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8069b8e:	68fb      	ldr	r3, [r7, #12]
 8069b90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8069b92:	b29b      	uxth	r3, r3
 8069b94:	3b01      	subs	r3, #1
 8069b96:	b29a      	uxth	r2, r3
 8069b98:	68fb      	ldr	r3, [r7, #12]
 8069b9a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8069b9c:	68fb      	ldr	r3, [r7, #12]
 8069b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8069ba0:	b29b      	uxth	r3, r3
 8069ba2:	2b00      	cmp	r3, #0
 8069ba4:	d1b6      	bne.n	8069b14 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8069ba6:	68fb      	ldr	r3, [r7, #12]
 8069ba8:	2220      	movs	r2, #32
 8069baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8069bae:	2300      	movs	r3, #0
 8069bb0:	e000      	b.n	8069bb4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8069bb2:	2302      	movs	r3, #2
  }
}
 8069bb4:	4618      	mov	r0, r3
 8069bb6:	3720      	adds	r7, #32
 8069bb8:	46bd      	mov	sp, r7
 8069bba:	bd80      	pop	{r7, pc}

08069bbc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8069bbc:	b580      	push	{r7, lr}
 8069bbe:	b084      	sub	sp, #16
 8069bc0:	af00      	add	r7, sp, #0
 8069bc2:	60f8      	str	r0, [r7, #12]
 8069bc4:	60b9      	str	r1, [r7, #8]
 8069bc6:	4613      	mov	r3, r2
 8069bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8069bca:	68fb      	ldr	r3, [r7, #12]
 8069bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8069bd0:	b2db      	uxtb	r3, r3
 8069bd2:	2b20      	cmp	r3, #32
 8069bd4:	d11d      	bne.n	8069c12 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8069bd6:	68bb      	ldr	r3, [r7, #8]
 8069bd8:	2b00      	cmp	r3, #0
 8069bda:	d002      	beq.n	8069be2 <HAL_UART_Receive_IT+0x26>
 8069bdc:	88fb      	ldrh	r3, [r7, #6]
 8069bde:	2b00      	cmp	r3, #0
 8069be0:	d101      	bne.n	8069be6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8069be2:	2301      	movs	r3, #1
 8069be4:	e016      	b.n	8069c14 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8069be6:	68fb      	ldr	r3, [r7, #12]
 8069be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8069bec:	2b01      	cmp	r3, #1
 8069bee:	d101      	bne.n	8069bf4 <HAL_UART_Receive_IT+0x38>
 8069bf0:	2302      	movs	r3, #2
 8069bf2:	e00f      	b.n	8069c14 <HAL_UART_Receive_IT+0x58>
 8069bf4:	68fb      	ldr	r3, [r7, #12]
 8069bf6:	2201      	movs	r2, #1
 8069bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8069bfc:	68fb      	ldr	r3, [r7, #12]
 8069bfe:	2200      	movs	r2, #0
 8069c00:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8069c02:	88fb      	ldrh	r3, [r7, #6]
 8069c04:	461a      	mov	r2, r3
 8069c06:	68b9      	ldr	r1, [r7, #8]
 8069c08:	68f8      	ldr	r0, [r7, #12]
 8069c0a:	f000 fb23 	bl	806a254 <UART_Start_Receive_IT>
 8069c0e:	4603      	mov	r3, r0
 8069c10:	e000      	b.n	8069c14 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8069c12:	2302      	movs	r3, #2
  }
}
 8069c14:	4618      	mov	r0, r3
 8069c16:	3710      	adds	r7, #16
 8069c18:	46bd      	mov	sp, r7
 8069c1a:	bd80      	pop	{r7, pc}

08069c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8069c1c:	b580      	push	{r7, lr}
 8069c1e:	b0ba      	sub	sp, #232	; 0xe8
 8069c20:	af00      	add	r7, sp, #0
 8069c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8069c24:	687b      	ldr	r3, [r7, #4]
 8069c26:	681b      	ldr	r3, [r3, #0]
 8069c28:	681b      	ldr	r3, [r3, #0]
 8069c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8069c2e:	687b      	ldr	r3, [r7, #4]
 8069c30:	681b      	ldr	r3, [r3, #0]
 8069c32:	68db      	ldr	r3, [r3, #12]
 8069c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8069c38:	687b      	ldr	r3, [r7, #4]
 8069c3a:	681b      	ldr	r3, [r3, #0]
 8069c3c:	695b      	ldr	r3, [r3, #20]
 8069c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8069c42:	2300      	movs	r3, #0
 8069c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8069c48:	2300      	movs	r3, #0
 8069c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8069c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069c52:	f003 030f 	and.w	r3, r3, #15
 8069c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8069c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8069c5e:	2b00      	cmp	r3, #0
 8069c60:	d10f      	bne.n	8069c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8069c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069c66:	f003 0320 	and.w	r3, r3, #32
 8069c6a:	2b00      	cmp	r3, #0
 8069c6c:	d009      	beq.n	8069c82 <HAL_UART_IRQHandler+0x66>
 8069c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069c72:	f003 0320 	and.w	r3, r3, #32
 8069c76:	2b00      	cmp	r3, #0
 8069c78:	d003      	beq.n	8069c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8069c7a:	6878      	ldr	r0, [r7, #4]
 8069c7c:	f000 fc03 	bl	806a486 <UART_Receive_IT>
      return;
 8069c80:	e256      	b.n	806a130 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8069c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8069c86:	2b00      	cmp	r3, #0
 8069c88:	f000 80de 	beq.w	8069e48 <HAL_UART_IRQHandler+0x22c>
 8069c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8069c90:	f003 0301 	and.w	r3, r3, #1
 8069c94:	2b00      	cmp	r3, #0
 8069c96:	d106      	bne.n	8069ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8069c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069c9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8069ca0:	2b00      	cmp	r3, #0
 8069ca2:	f000 80d1 	beq.w	8069e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8069ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069caa:	f003 0301 	and.w	r3, r3, #1
 8069cae:	2b00      	cmp	r3, #0
 8069cb0:	d00b      	beq.n	8069cca <HAL_UART_IRQHandler+0xae>
 8069cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8069cba:	2b00      	cmp	r3, #0
 8069cbc:	d005      	beq.n	8069cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8069cbe:	687b      	ldr	r3, [r7, #4]
 8069cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069cc2:	f043 0201 	orr.w	r2, r3, #1
 8069cc6:	687b      	ldr	r3, [r7, #4]
 8069cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8069cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069cce:	f003 0304 	and.w	r3, r3, #4
 8069cd2:	2b00      	cmp	r3, #0
 8069cd4:	d00b      	beq.n	8069cee <HAL_UART_IRQHandler+0xd2>
 8069cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8069cda:	f003 0301 	and.w	r3, r3, #1
 8069cde:	2b00      	cmp	r3, #0
 8069ce0:	d005      	beq.n	8069cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8069ce2:	687b      	ldr	r3, [r7, #4]
 8069ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069ce6:	f043 0202 	orr.w	r2, r3, #2
 8069cea:	687b      	ldr	r3, [r7, #4]
 8069cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8069cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069cf2:	f003 0302 	and.w	r3, r3, #2
 8069cf6:	2b00      	cmp	r3, #0
 8069cf8:	d00b      	beq.n	8069d12 <HAL_UART_IRQHandler+0xf6>
 8069cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8069cfe:	f003 0301 	and.w	r3, r3, #1
 8069d02:	2b00      	cmp	r3, #0
 8069d04:	d005      	beq.n	8069d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8069d06:	687b      	ldr	r3, [r7, #4]
 8069d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069d0a:	f043 0204 	orr.w	r2, r3, #4
 8069d0e:	687b      	ldr	r3, [r7, #4]
 8069d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8069d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069d16:	f003 0308 	and.w	r3, r3, #8
 8069d1a:	2b00      	cmp	r3, #0
 8069d1c:	d011      	beq.n	8069d42 <HAL_UART_IRQHandler+0x126>
 8069d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069d22:	f003 0320 	and.w	r3, r3, #32
 8069d26:	2b00      	cmp	r3, #0
 8069d28:	d105      	bne.n	8069d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8069d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8069d2e:	f003 0301 	and.w	r3, r3, #1
 8069d32:	2b00      	cmp	r3, #0
 8069d34:	d005      	beq.n	8069d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8069d36:	687b      	ldr	r3, [r7, #4]
 8069d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069d3a:	f043 0208 	orr.w	r2, r3, #8
 8069d3e:	687b      	ldr	r3, [r7, #4]
 8069d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8069d42:	687b      	ldr	r3, [r7, #4]
 8069d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069d46:	2b00      	cmp	r3, #0
 8069d48:	f000 81ed 	beq.w	806a126 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8069d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069d50:	f003 0320 	and.w	r3, r3, #32
 8069d54:	2b00      	cmp	r3, #0
 8069d56:	d008      	beq.n	8069d6a <HAL_UART_IRQHandler+0x14e>
 8069d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069d5c:	f003 0320 	and.w	r3, r3, #32
 8069d60:	2b00      	cmp	r3, #0
 8069d62:	d002      	beq.n	8069d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8069d64:	6878      	ldr	r0, [r7, #4]
 8069d66:	f000 fb8e 	bl	806a486 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8069d6a:	687b      	ldr	r3, [r7, #4]
 8069d6c:	681b      	ldr	r3, [r3, #0]
 8069d6e:	695b      	ldr	r3, [r3, #20]
 8069d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069d74:	2b40      	cmp	r3, #64	; 0x40
 8069d76:	bf0c      	ite	eq
 8069d78:	2301      	moveq	r3, #1
 8069d7a:	2300      	movne	r3, #0
 8069d7c:	b2db      	uxtb	r3, r3
 8069d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8069d82:	687b      	ldr	r3, [r7, #4]
 8069d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069d86:	f003 0308 	and.w	r3, r3, #8
 8069d8a:	2b00      	cmp	r3, #0
 8069d8c:	d103      	bne.n	8069d96 <HAL_UART_IRQHandler+0x17a>
 8069d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8069d92:	2b00      	cmp	r3, #0
 8069d94:	d04f      	beq.n	8069e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8069d96:	6878      	ldr	r0, [r7, #4]
 8069d98:	f000 fa96 	bl	806a2c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069d9c:	687b      	ldr	r3, [r7, #4]
 8069d9e:	681b      	ldr	r3, [r3, #0]
 8069da0:	695b      	ldr	r3, [r3, #20]
 8069da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069da6:	2b40      	cmp	r3, #64	; 0x40
 8069da8:	d141      	bne.n	8069e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8069daa:	687b      	ldr	r3, [r7, #4]
 8069dac:	681b      	ldr	r3, [r3, #0]
 8069dae:	3314      	adds	r3, #20
 8069db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8069db8:	e853 3f00 	ldrex	r3, [r3]
 8069dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8069dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8069dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8069dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8069dcc:	687b      	ldr	r3, [r7, #4]
 8069dce:	681b      	ldr	r3, [r3, #0]
 8069dd0:	3314      	adds	r3, #20
 8069dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8069dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8069dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8069de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8069de6:	e841 2300 	strex	r3, r2, [r1]
 8069dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8069dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8069df2:	2b00      	cmp	r3, #0
 8069df4:	d1d9      	bne.n	8069daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8069df6:	687b      	ldr	r3, [r7, #4]
 8069df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069dfa:	2b00      	cmp	r3, #0
 8069dfc:	d013      	beq.n	8069e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8069dfe:	687b      	ldr	r3, [r7, #4]
 8069e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069e02:	4a7d      	ldr	r2, [pc, #500]	; (8069ff8 <HAL_UART_IRQHandler+0x3dc>)
 8069e04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8069e06:	687b      	ldr	r3, [r7, #4]
 8069e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069e0a:	4618      	mov	r0, r3
 8069e0c:	f7fb f99a 	bl	8065144 <HAL_DMA_Abort_IT>
 8069e10:	4603      	mov	r3, r0
 8069e12:	2b00      	cmp	r3, #0
 8069e14:	d016      	beq.n	8069e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8069e16:	687b      	ldr	r3, [r7, #4]
 8069e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8069e1c:	687a      	ldr	r2, [r7, #4]
 8069e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8069e20:	4610      	mov	r0, r2
 8069e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069e24:	e00e      	b.n	8069e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8069e26:	6878      	ldr	r0, [r7, #4]
 8069e28:	f000 f990 	bl	806a14c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069e2c:	e00a      	b.n	8069e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8069e2e:	6878      	ldr	r0, [r7, #4]
 8069e30:	f000 f98c 	bl	806a14c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069e34:	e006      	b.n	8069e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8069e36:	6878      	ldr	r0, [r7, #4]
 8069e38:	f000 f988 	bl	806a14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8069e3c:	687b      	ldr	r3, [r7, #4]
 8069e3e:	2200      	movs	r2, #0
 8069e40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8069e42:	e170      	b.n	806a126 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069e44:	bf00      	nop
    return;
 8069e46:	e16e      	b.n	806a126 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8069e48:	687b      	ldr	r3, [r7, #4]
 8069e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8069e4c:	2b01      	cmp	r3, #1
 8069e4e:	f040 814a 	bne.w	806a0e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8069e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069e56:	f003 0310 	and.w	r3, r3, #16
 8069e5a:	2b00      	cmp	r3, #0
 8069e5c:	f000 8143 	beq.w	806a0e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8069e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069e64:	f003 0310 	and.w	r3, r3, #16
 8069e68:	2b00      	cmp	r3, #0
 8069e6a:	f000 813c 	beq.w	806a0e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8069e6e:	2300      	movs	r3, #0
 8069e70:	60bb      	str	r3, [r7, #8]
 8069e72:	687b      	ldr	r3, [r7, #4]
 8069e74:	681b      	ldr	r3, [r3, #0]
 8069e76:	681b      	ldr	r3, [r3, #0]
 8069e78:	60bb      	str	r3, [r7, #8]
 8069e7a:	687b      	ldr	r3, [r7, #4]
 8069e7c:	681b      	ldr	r3, [r3, #0]
 8069e7e:	685b      	ldr	r3, [r3, #4]
 8069e80:	60bb      	str	r3, [r7, #8]
 8069e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069e84:	687b      	ldr	r3, [r7, #4]
 8069e86:	681b      	ldr	r3, [r3, #0]
 8069e88:	695b      	ldr	r3, [r3, #20]
 8069e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069e8e:	2b40      	cmp	r3, #64	; 0x40
 8069e90:	f040 80b4 	bne.w	8069ffc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8069e94:	687b      	ldr	r3, [r7, #4]
 8069e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069e98:	681b      	ldr	r3, [r3, #0]
 8069e9a:	685b      	ldr	r3, [r3, #4]
 8069e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8069ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8069ea4:	2b00      	cmp	r3, #0
 8069ea6:	f000 8140 	beq.w	806a12a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8069eaa:	687b      	ldr	r3, [r7, #4]
 8069eac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8069eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8069eb2:	429a      	cmp	r2, r3
 8069eb4:	f080 8139 	bcs.w	806a12a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8069eb8:	687b      	ldr	r3, [r7, #4]
 8069eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8069ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8069ec0:	687b      	ldr	r3, [r7, #4]
 8069ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069ec4:	69db      	ldr	r3, [r3, #28]
 8069ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8069eca:	f000 8088 	beq.w	8069fde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8069ece:	687b      	ldr	r3, [r7, #4]
 8069ed0:	681b      	ldr	r3, [r3, #0]
 8069ed2:	330c      	adds	r3, #12
 8069ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8069edc:	e853 3f00 	ldrex	r3, [r3]
 8069ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8069ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8069ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8069eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8069ef0:	687b      	ldr	r3, [r7, #4]
 8069ef2:	681b      	ldr	r3, [r3, #0]
 8069ef4:	330c      	adds	r3, #12
 8069ef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8069efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8069efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8069f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8069f0a:	e841 2300 	strex	r3, r2, [r1]
 8069f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8069f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8069f16:	2b00      	cmp	r3, #0
 8069f18:	d1d9      	bne.n	8069ece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8069f1a:	687b      	ldr	r3, [r7, #4]
 8069f1c:	681b      	ldr	r3, [r3, #0]
 8069f1e:	3314      	adds	r3, #20
 8069f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8069f24:	e853 3f00 	ldrex	r3, [r3]
 8069f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8069f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8069f2c:	f023 0301 	bic.w	r3, r3, #1
 8069f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8069f34:	687b      	ldr	r3, [r7, #4]
 8069f36:	681b      	ldr	r3, [r3, #0]
 8069f38:	3314      	adds	r3, #20
 8069f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8069f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8069f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8069f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8069f4a:	e841 2300 	strex	r3, r2, [r1]
 8069f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8069f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8069f52:	2b00      	cmp	r3, #0
 8069f54:	d1e1      	bne.n	8069f1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8069f56:	687b      	ldr	r3, [r7, #4]
 8069f58:	681b      	ldr	r3, [r3, #0]
 8069f5a:	3314      	adds	r3, #20
 8069f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8069f60:	e853 3f00 	ldrex	r3, [r3]
 8069f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8069f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8069f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8069f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8069f70:	687b      	ldr	r3, [r7, #4]
 8069f72:	681b      	ldr	r3, [r3, #0]
 8069f74:	3314      	adds	r3, #20
 8069f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8069f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8069f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8069f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8069f82:	e841 2300 	strex	r3, r2, [r1]
 8069f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8069f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8069f8a:	2b00      	cmp	r3, #0
 8069f8c:	d1e3      	bne.n	8069f56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8069f8e:	687b      	ldr	r3, [r7, #4]
 8069f90:	2220      	movs	r2, #32
 8069f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8069f96:	687b      	ldr	r3, [r7, #4]
 8069f98:	2200      	movs	r2, #0
 8069f9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8069f9c:	687b      	ldr	r3, [r7, #4]
 8069f9e:	681b      	ldr	r3, [r3, #0]
 8069fa0:	330c      	adds	r3, #12
 8069fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8069fa6:	e853 3f00 	ldrex	r3, [r3]
 8069faa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8069fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8069fae:	f023 0310 	bic.w	r3, r3, #16
 8069fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8069fb6:	687b      	ldr	r3, [r7, #4]
 8069fb8:	681b      	ldr	r3, [r3, #0]
 8069fba:	330c      	adds	r3, #12
 8069fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8069fc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8069fc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8069fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8069fc8:	e841 2300 	strex	r3, r2, [r1]
 8069fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8069fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8069fd0:	2b00      	cmp	r3, #0
 8069fd2:	d1e3      	bne.n	8069f9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8069fd4:	687b      	ldr	r3, [r7, #4]
 8069fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069fd8:	4618      	mov	r0, r3
 8069fda:	f7fb f843 	bl	8065064 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8069fde:	687b      	ldr	r3, [r7, #4]
 8069fe0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8069fe2:	687b      	ldr	r3, [r7, #4]
 8069fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8069fe6:	b29b      	uxth	r3, r3
 8069fe8:	1ad3      	subs	r3, r2, r3
 8069fea:	b29b      	uxth	r3, r3
 8069fec:	4619      	mov	r1, r3
 8069fee:	6878      	ldr	r0, [r7, #4]
 8069ff0:	f000 f8b6 	bl	806a160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8069ff4:	e099      	b.n	806a12a <HAL_UART_IRQHandler+0x50e>
 8069ff6:	bf00      	nop
 8069ff8:	0806a38f 	.word	0x0806a38f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8069ffc:	687b      	ldr	r3, [r7, #4]
 8069ffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 806a000:	687b      	ldr	r3, [r7, #4]
 806a002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 806a004:	b29b      	uxth	r3, r3
 806a006:	1ad3      	subs	r3, r2, r3
 806a008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 806a00c:	687b      	ldr	r3, [r7, #4]
 806a00e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 806a010:	b29b      	uxth	r3, r3
 806a012:	2b00      	cmp	r3, #0
 806a014:	f000 808b 	beq.w	806a12e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 806a018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 806a01c:	2b00      	cmp	r3, #0
 806a01e:	f000 8086 	beq.w	806a12e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 806a022:	687b      	ldr	r3, [r7, #4]
 806a024:	681b      	ldr	r3, [r3, #0]
 806a026:	330c      	adds	r3, #12
 806a028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806a02c:	e853 3f00 	ldrex	r3, [r3]
 806a030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 806a032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806a034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 806a038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 806a03c:	687b      	ldr	r3, [r7, #4]
 806a03e:	681b      	ldr	r3, [r3, #0]
 806a040:	330c      	adds	r3, #12
 806a042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 806a046:	647a      	str	r2, [r7, #68]	; 0x44
 806a048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a04a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 806a04c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 806a04e:	e841 2300 	strex	r3, r2, [r1]
 806a052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 806a054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806a056:	2b00      	cmp	r3, #0
 806a058:	d1e3      	bne.n	806a022 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 806a05a:	687b      	ldr	r3, [r7, #4]
 806a05c:	681b      	ldr	r3, [r3, #0]
 806a05e:	3314      	adds	r3, #20
 806a060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806a064:	e853 3f00 	ldrex	r3, [r3]
 806a068:	623b      	str	r3, [r7, #32]
   return(result);
 806a06a:	6a3b      	ldr	r3, [r7, #32]
 806a06c:	f023 0301 	bic.w	r3, r3, #1
 806a070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 806a074:	687b      	ldr	r3, [r7, #4]
 806a076:	681b      	ldr	r3, [r3, #0]
 806a078:	3314      	adds	r3, #20
 806a07a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 806a07e:	633a      	str	r2, [r7, #48]	; 0x30
 806a080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 806a084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806a086:	e841 2300 	strex	r3, r2, [r1]
 806a08a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 806a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806a08e:	2b00      	cmp	r3, #0
 806a090:	d1e3      	bne.n	806a05a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 806a092:	687b      	ldr	r3, [r7, #4]
 806a094:	2220      	movs	r2, #32
 806a096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806a09a:	687b      	ldr	r3, [r7, #4]
 806a09c:	2200      	movs	r2, #0
 806a09e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 806a0a0:	687b      	ldr	r3, [r7, #4]
 806a0a2:	681b      	ldr	r3, [r3, #0]
 806a0a4:	330c      	adds	r3, #12
 806a0a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a0a8:	693b      	ldr	r3, [r7, #16]
 806a0aa:	e853 3f00 	ldrex	r3, [r3]
 806a0ae:	60fb      	str	r3, [r7, #12]
   return(result);
 806a0b0:	68fb      	ldr	r3, [r7, #12]
 806a0b2:	f023 0310 	bic.w	r3, r3, #16
 806a0b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 806a0ba:	687b      	ldr	r3, [r7, #4]
 806a0bc:	681b      	ldr	r3, [r3, #0]
 806a0be:	330c      	adds	r3, #12
 806a0c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 806a0c4:	61fa      	str	r2, [r7, #28]
 806a0c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a0c8:	69b9      	ldr	r1, [r7, #24]
 806a0ca:	69fa      	ldr	r2, [r7, #28]
 806a0cc:	e841 2300 	strex	r3, r2, [r1]
 806a0d0:	617b      	str	r3, [r7, #20]
   return(result);
 806a0d2:	697b      	ldr	r3, [r7, #20]
 806a0d4:	2b00      	cmp	r3, #0
 806a0d6:	d1e3      	bne.n	806a0a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 806a0d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 806a0dc:	4619      	mov	r1, r3
 806a0de:	6878      	ldr	r0, [r7, #4]
 806a0e0:	f000 f83e 	bl	806a160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 806a0e4:	e023      	b.n	806a12e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 806a0e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 806a0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 806a0ee:	2b00      	cmp	r3, #0
 806a0f0:	d009      	beq.n	806a106 <HAL_UART_IRQHandler+0x4ea>
 806a0f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 806a0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 806a0fa:	2b00      	cmp	r3, #0
 806a0fc:	d003      	beq.n	806a106 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 806a0fe:	6878      	ldr	r0, [r7, #4]
 806a100:	f000 f959 	bl	806a3b6 <UART_Transmit_IT>
    return;
 806a104:	e014      	b.n	806a130 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 806a106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 806a10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806a10e:	2b00      	cmp	r3, #0
 806a110:	d00e      	beq.n	806a130 <HAL_UART_IRQHandler+0x514>
 806a112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 806a116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806a11a:	2b00      	cmp	r3, #0
 806a11c:	d008      	beq.n	806a130 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 806a11e:	6878      	ldr	r0, [r7, #4]
 806a120:	f000 f999 	bl	806a456 <UART_EndTransmit_IT>
    return;
 806a124:	e004      	b.n	806a130 <HAL_UART_IRQHandler+0x514>
    return;
 806a126:	bf00      	nop
 806a128:	e002      	b.n	806a130 <HAL_UART_IRQHandler+0x514>
      return;
 806a12a:	bf00      	nop
 806a12c:	e000      	b.n	806a130 <HAL_UART_IRQHandler+0x514>
      return;
 806a12e:	bf00      	nop
  }
}
 806a130:	37e8      	adds	r7, #232	; 0xe8
 806a132:	46bd      	mov	sp, r7
 806a134:	bd80      	pop	{r7, pc}
 806a136:	bf00      	nop

0806a138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 806a138:	b480      	push	{r7}
 806a13a:	b083      	sub	sp, #12
 806a13c:	af00      	add	r7, sp, #0
 806a13e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 806a140:	bf00      	nop
 806a142:	370c      	adds	r7, #12
 806a144:	46bd      	mov	sp, r7
 806a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a14a:	4770      	bx	lr

0806a14c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 806a14c:	b480      	push	{r7}
 806a14e:	b083      	sub	sp, #12
 806a150:	af00      	add	r7, sp, #0
 806a152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 806a154:	bf00      	nop
 806a156:	370c      	adds	r7, #12
 806a158:	46bd      	mov	sp, r7
 806a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a15e:	4770      	bx	lr

0806a160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 806a160:	b480      	push	{r7}
 806a162:	b083      	sub	sp, #12
 806a164:	af00      	add	r7, sp, #0
 806a166:	6078      	str	r0, [r7, #4]
 806a168:	460b      	mov	r3, r1
 806a16a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 806a16c:	bf00      	nop
 806a16e:	370c      	adds	r7, #12
 806a170:	46bd      	mov	sp, r7
 806a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a176:	4770      	bx	lr

0806a178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 806a178:	b580      	push	{r7, lr}
 806a17a:	b090      	sub	sp, #64	; 0x40
 806a17c:	af00      	add	r7, sp, #0
 806a17e:	60f8      	str	r0, [r7, #12]
 806a180:	60b9      	str	r1, [r7, #8]
 806a182:	603b      	str	r3, [r7, #0]
 806a184:	4613      	mov	r3, r2
 806a186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 806a188:	e050      	b.n	806a22c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 806a18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806a18c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806a190:	d04c      	beq.n	806a22c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 806a192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806a194:	2b00      	cmp	r3, #0
 806a196:	d007      	beq.n	806a1a8 <UART_WaitOnFlagUntilTimeout+0x30>
 806a198:	f7f9 fc6c 	bl	8063a74 <HAL_GetTick>
 806a19c:	4602      	mov	r2, r0
 806a19e:	683b      	ldr	r3, [r7, #0]
 806a1a0:	1ad3      	subs	r3, r2, r3
 806a1a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 806a1a4:	429a      	cmp	r2, r3
 806a1a6:	d241      	bcs.n	806a22c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 806a1a8:	68fb      	ldr	r3, [r7, #12]
 806a1aa:	681b      	ldr	r3, [r3, #0]
 806a1ac:	330c      	adds	r3, #12
 806a1ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806a1b2:	e853 3f00 	ldrex	r3, [r3]
 806a1b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 806a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806a1ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 806a1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 806a1c0:	68fb      	ldr	r3, [r7, #12]
 806a1c2:	681b      	ldr	r3, [r3, #0]
 806a1c4:	330c      	adds	r3, #12
 806a1c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 806a1c8:	637a      	str	r2, [r7, #52]	; 0x34
 806a1ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a1cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 806a1ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806a1d0:	e841 2300 	strex	r3, r2, [r1]
 806a1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 806a1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a1d8:	2b00      	cmp	r3, #0
 806a1da:	d1e5      	bne.n	806a1a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 806a1dc:	68fb      	ldr	r3, [r7, #12]
 806a1de:	681b      	ldr	r3, [r3, #0]
 806a1e0:	3314      	adds	r3, #20
 806a1e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a1e4:	697b      	ldr	r3, [r7, #20]
 806a1e6:	e853 3f00 	ldrex	r3, [r3]
 806a1ea:	613b      	str	r3, [r7, #16]
   return(result);
 806a1ec:	693b      	ldr	r3, [r7, #16]
 806a1ee:	f023 0301 	bic.w	r3, r3, #1
 806a1f2:	63bb      	str	r3, [r7, #56]	; 0x38
 806a1f4:	68fb      	ldr	r3, [r7, #12]
 806a1f6:	681b      	ldr	r3, [r3, #0]
 806a1f8:	3314      	adds	r3, #20
 806a1fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806a1fc:	623a      	str	r2, [r7, #32]
 806a1fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a200:	69f9      	ldr	r1, [r7, #28]
 806a202:	6a3a      	ldr	r2, [r7, #32]
 806a204:	e841 2300 	strex	r3, r2, [r1]
 806a208:	61bb      	str	r3, [r7, #24]
   return(result);
 806a20a:	69bb      	ldr	r3, [r7, #24]
 806a20c:	2b00      	cmp	r3, #0
 806a20e:	d1e5      	bne.n	806a1dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 806a210:	68fb      	ldr	r3, [r7, #12]
 806a212:	2220      	movs	r2, #32
 806a214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 806a218:	68fb      	ldr	r3, [r7, #12]
 806a21a:	2220      	movs	r2, #32
 806a21c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 806a220:	68fb      	ldr	r3, [r7, #12]
 806a222:	2200      	movs	r2, #0
 806a224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 806a228:	2303      	movs	r3, #3
 806a22a:	e00f      	b.n	806a24c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 806a22c:	68fb      	ldr	r3, [r7, #12]
 806a22e:	681b      	ldr	r3, [r3, #0]
 806a230:	681a      	ldr	r2, [r3, #0]
 806a232:	68bb      	ldr	r3, [r7, #8]
 806a234:	4013      	ands	r3, r2
 806a236:	68ba      	ldr	r2, [r7, #8]
 806a238:	429a      	cmp	r2, r3
 806a23a:	bf0c      	ite	eq
 806a23c:	2301      	moveq	r3, #1
 806a23e:	2300      	movne	r3, #0
 806a240:	b2db      	uxtb	r3, r3
 806a242:	461a      	mov	r2, r3
 806a244:	79fb      	ldrb	r3, [r7, #7]
 806a246:	429a      	cmp	r2, r3
 806a248:	d09f      	beq.n	806a18a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 806a24a:	2300      	movs	r3, #0
}
 806a24c:	4618      	mov	r0, r3
 806a24e:	3740      	adds	r7, #64	; 0x40
 806a250:	46bd      	mov	sp, r7
 806a252:	bd80      	pop	{r7, pc}

0806a254 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 806a254:	b480      	push	{r7}
 806a256:	b085      	sub	sp, #20
 806a258:	af00      	add	r7, sp, #0
 806a25a:	60f8      	str	r0, [r7, #12]
 806a25c:	60b9      	str	r1, [r7, #8]
 806a25e:	4613      	mov	r3, r2
 806a260:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 806a262:	68fb      	ldr	r3, [r7, #12]
 806a264:	68ba      	ldr	r2, [r7, #8]
 806a266:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 806a268:	68fb      	ldr	r3, [r7, #12]
 806a26a:	88fa      	ldrh	r2, [r7, #6]
 806a26c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 806a26e:	68fb      	ldr	r3, [r7, #12]
 806a270:	88fa      	ldrh	r2, [r7, #6]
 806a272:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 806a274:	68fb      	ldr	r3, [r7, #12]
 806a276:	2200      	movs	r2, #0
 806a278:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 806a27a:	68fb      	ldr	r3, [r7, #12]
 806a27c:	2222      	movs	r2, #34	; 0x22
 806a27e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 806a282:	68fb      	ldr	r3, [r7, #12]
 806a284:	2200      	movs	r2, #0
 806a286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 806a28a:	68fb      	ldr	r3, [r7, #12]
 806a28c:	681b      	ldr	r3, [r3, #0]
 806a28e:	68da      	ldr	r2, [r3, #12]
 806a290:	68fb      	ldr	r3, [r7, #12]
 806a292:	681b      	ldr	r3, [r3, #0]
 806a294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 806a298:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 806a29a:	68fb      	ldr	r3, [r7, #12]
 806a29c:	681b      	ldr	r3, [r3, #0]
 806a29e:	695a      	ldr	r2, [r3, #20]
 806a2a0:	68fb      	ldr	r3, [r7, #12]
 806a2a2:	681b      	ldr	r3, [r3, #0]
 806a2a4:	f042 0201 	orr.w	r2, r2, #1
 806a2a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 806a2aa:	68fb      	ldr	r3, [r7, #12]
 806a2ac:	681b      	ldr	r3, [r3, #0]
 806a2ae:	68da      	ldr	r2, [r3, #12]
 806a2b0:	68fb      	ldr	r3, [r7, #12]
 806a2b2:	681b      	ldr	r3, [r3, #0]
 806a2b4:	f042 0220 	orr.w	r2, r2, #32
 806a2b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 806a2ba:	2300      	movs	r3, #0
}
 806a2bc:	4618      	mov	r0, r3
 806a2be:	3714      	adds	r7, #20
 806a2c0:	46bd      	mov	sp, r7
 806a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a2c6:	4770      	bx	lr

0806a2c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 806a2c8:	b480      	push	{r7}
 806a2ca:	b095      	sub	sp, #84	; 0x54
 806a2cc:	af00      	add	r7, sp, #0
 806a2ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 806a2d0:	687b      	ldr	r3, [r7, #4]
 806a2d2:	681b      	ldr	r3, [r3, #0]
 806a2d4:	330c      	adds	r3, #12
 806a2d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806a2da:	e853 3f00 	ldrex	r3, [r3]
 806a2de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 806a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a2e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 806a2e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 806a2e8:	687b      	ldr	r3, [r7, #4]
 806a2ea:	681b      	ldr	r3, [r3, #0]
 806a2ec:	330c      	adds	r3, #12
 806a2ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 806a2f0:	643a      	str	r2, [r7, #64]	; 0x40
 806a2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a2f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 806a2f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 806a2f8:	e841 2300 	strex	r3, r2, [r1]
 806a2fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 806a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806a300:	2b00      	cmp	r3, #0
 806a302:	d1e5      	bne.n	806a2d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 806a304:	687b      	ldr	r3, [r7, #4]
 806a306:	681b      	ldr	r3, [r3, #0]
 806a308:	3314      	adds	r3, #20
 806a30a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a30c:	6a3b      	ldr	r3, [r7, #32]
 806a30e:	e853 3f00 	ldrex	r3, [r3]
 806a312:	61fb      	str	r3, [r7, #28]
   return(result);
 806a314:	69fb      	ldr	r3, [r7, #28]
 806a316:	f023 0301 	bic.w	r3, r3, #1
 806a31a:	64bb      	str	r3, [r7, #72]	; 0x48
 806a31c:	687b      	ldr	r3, [r7, #4]
 806a31e:	681b      	ldr	r3, [r3, #0]
 806a320:	3314      	adds	r3, #20
 806a322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 806a324:	62fa      	str	r2, [r7, #44]	; 0x2c
 806a326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 806a32a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806a32c:	e841 2300 	strex	r3, r2, [r1]
 806a330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 806a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806a334:	2b00      	cmp	r3, #0
 806a336:	d1e5      	bne.n	806a304 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 806a338:	687b      	ldr	r3, [r7, #4]
 806a33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806a33c:	2b01      	cmp	r3, #1
 806a33e:	d119      	bne.n	806a374 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 806a340:	687b      	ldr	r3, [r7, #4]
 806a342:	681b      	ldr	r3, [r3, #0]
 806a344:	330c      	adds	r3, #12
 806a346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a348:	68fb      	ldr	r3, [r7, #12]
 806a34a:	e853 3f00 	ldrex	r3, [r3]
 806a34e:	60bb      	str	r3, [r7, #8]
   return(result);
 806a350:	68bb      	ldr	r3, [r7, #8]
 806a352:	f023 0310 	bic.w	r3, r3, #16
 806a356:	647b      	str	r3, [r7, #68]	; 0x44
 806a358:	687b      	ldr	r3, [r7, #4]
 806a35a:	681b      	ldr	r3, [r3, #0]
 806a35c:	330c      	adds	r3, #12
 806a35e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 806a360:	61ba      	str	r2, [r7, #24]
 806a362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a364:	6979      	ldr	r1, [r7, #20]
 806a366:	69ba      	ldr	r2, [r7, #24]
 806a368:	e841 2300 	strex	r3, r2, [r1]
 806a36c:	613b      	str	r3, [r7, #16]
   return(result);
 806a36e:	693b      	ldr	r3, [r7, #16]
 806a370:	2b00      	cmp	r3, #0
 806a372:	d1e5      	bne.n	806a340 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 806a374:	687b      	ldr	r3, [r7, #4]
 806a376:	2220      	movs	r2, #32
 806a378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806a37c:	687b      	ldr	r3, [r7, #4]
 806a37e:	2200      	movs	r2, #0
 806a380:	631a      	str	r2, [r3, #48]	; 0x30
}
 806a382:	bf00      	nop
 806a384:	3754      	adds	r7, #84	; 0x54
 806a386:	46bd      	mov	sp, r7
 806a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a38c:	4770      	bx	lr

0806a38e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 806a38e:	b580      	push	{r7, lr}
 806a390:	b084      	sub	sp, #16
 806a392:	af00      	add	r7, sp, #0
 806a394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 806a396:	687b      	ldr	r3, [r7, #4]
 806a398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806a39a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 806a39c:	68fb      	ldr	r3, [r7, #12]
 806a39e:	2200      	movs	r2, #0
 806a3a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 806a3a2:	68fb      	ldr	r3, [r7, #12]
 806a3a4:	2200      	movs	r2, #0
 806a3a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 806a3a8:	68f8      	ldr	r0, [r7, #12]
 806a3aa:	f7ff fecf 	bl	806a14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 806a3ae:	bf00      	nop
 806a3b0:	3710      	adds	r7, #16
 806a3b2:	46bd      	mov	sp, r7
 806a3b4:	bd80      	pop	{r7, pc}

0806a3b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 806a3b6:	b480      	push	{r7}
 806a3b8:	b085      	sub	sp, #20
 806a3ba:	af00      	add	r7, sp, #0
 806a3bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 806a3be:	687b      	ldr	r3, [r7, #4]
 806a3c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 806a3c4:	b2db      	uxtb	r3, r3
 806a3c6:	2b21      	cmp	r3, #33	; 0x21
 806a3c8:	d13e      	bne.n	806a448 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 806a3ca:	687b      	ldr	r3, [r7, #4]
 806a3cc:	689b      	ldr	r3, [r3, #8]
 806a3ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806a3d2:	d114      	bne.n	806a3fe <UART_Transmit_IT+0x48>
 806a3d4:	687b      	ldr	r3, [r7, #4]
 806a3d6:	691b      	ldr	r3, [r3, #16]
 806a3d8:	2b00      	cmp	r3, #0
 806a3da:	d110      	bne.n	806a3fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 806a3dc:	687b      	ldr	r3, [r7, #4]
 806a3de:	6a1b      	ldr	r3, [r3, #32]
 806a3e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 806a3e2:	68fb      	ldr	r3, [r7, #12]
 806a3e4:	881b      	ldrh	r3, [r3, #0]
 806a3e6:	461a      	mov	r2, r3
 806a3e8:	687b      	ldr	r3, [r7, #4]
 806a3ea:	681b      	ldr	r3, [r3, #0]
 806a3ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 806a3f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 806a3f2:	687b      	ldr	r3, [r7, #4]
 806a3f4:	6a1b      	ldr	r3, [r3, #32]
 806a3f6:	1c9a      	adds	r2, r3, #2
 806a3f8:	687b      	ldr	r3, [r7, #4]
 806a3fa:	621a      	str	r2, [r3, #32]
 806a3fc:	e008      	b.n	806a410 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 806a3fe:	687b      	ldr	r3, [r7, #4]
 806a400:	6a1b      	ldr	r3, [r3, #32]
 806a402:	1c59      	adds	r1, r3, #1
 806a404:	687a      	ldr	r2, [r7, #4]
 806a406:	6211      	str	r1, [r2, #32]
 806a408:	781a      	ldrb	r2, [r3, #0]
 806a40a:	687b      	ldr	r3, [r7, #4]
 806a40c:	681b      	ldr	r3, [r3, #0]
 806a40e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 806a410:	687b      	ldr	r3, [r7, #4]
 806a412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 806a414:	b29b      	uxth	r3, r3
 806a416:	3b01      	subs	r3, #1
 806a418:	b29b      	uxth	r3, r3
 806a41a:	687a      	ldr	r2, [r7, #4]
 806a41c:	4619      	mov	r1, r3
 806a41e:	84d1      	strh	r1, [r2, #38]	; 0x26
 806a420:	2b00      	cmp	r3, #0
 806a422:	d10f      	bne.n	806a444 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 806a424:	687b      	ldr	r3, [r7, #4]
 806a426:	681b      	ldr	r3, [r3, #0]
 806a428:	68da      	ldr	r2, [r3, #12]
 806a42a:	687b      	ldr	r3, [r7, #4]
 806a42c:	681b      	ldr	r3, [r3, #0]
 806a42e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 806a432:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 806a434:	687b      	ldr	r3, [r7, #4]
 806a436:	681b      	ldr	r3, [r3, #0]
 806a438:	68da      	ldr	r2, [r3, #12]
 806a43a:	687b      	ldr	r3, [r7, #4]
 806a43c:	681b      	ldr	r3, [r3, #0]
 806a43e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 806a442:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 806a444:	2300      	movs	r3, #0
 806a446:	e000      	b.n	806a44a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 806a448:	2302      	movs	r3, #2
  }
}
 806a44a:	4618      	mov	r0, r3
 806a44c:	3714      	adds	r7, #20
 806a44e:	46bd      	mov	sp, r7
 806a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a454:	4770      	bx	lr

0806a456 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 806a456:	b580      	push	{r7, lr}
 806a458:	b082      	sub	sp, #8
 806a45a:	af00      	add	r7, sp, #0
 806a45c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 806a45e:	687b      	ldr	r3, [r7, #4]
 806a460:	681b      	ldr	r3, [r3, #0]
 806a462:	68da      	ldr	r2, [r3, #12]
 806a464:	687b      	ldr	r3, [r7, #4]
 806a466:	681b      	ldr	r3, [r3, #0]
 806a468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 806a46c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 806a46e:	687b      	ldr	r3, [r7, #4]
 806a470:	2220      	movs	r2, #32
 806a472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 806a476:	6878      	ldr	r0, [r7, #4]
 806a478:	f7ff fe5e 	bl	806a138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 806a47c:	2300      	movs	r3, #0
}
 806a47e:	4618      	mov	r0, r3
 806a480:	3708      	adds	r7, #8
 806a482:	46bd      	mov	sp, r7
 806a484:	bd80      	pop	{r7, pc}

0806a486 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 806a486:	b580      	push	{r7, lr}
 806a488:	b08c      	sub	sp, #48	; 0x30
 806a48a:	af00      	add	r7, sp, #0
 806a48c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 806a48e:	687b      	ldr	r3, [r7, #4]
 806a490:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 806a494:	b2db      	uxtb	r3, r3
 806a496:	2b22      	cmp	r3, #34	; 0x22
 806a498:	f040 80ab 	bne.w	806a5f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 806a49c:	687b      	ldr	r3, [r7, #4]
 806a49e:	689b      	ldr	r3, [r3, #8]
 806a4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806a4a4:	d117      	bne.n	806a4d6 <UART_Receive_IT+0x50>
 806a4a6:	687b      	ldr	r3, [r7, #4]
 806a4a8:	691b      	ldr	r3, [r3, #16]
 806a4aa:	2b00      	cmp	r3, #0
 806a4ac:	d113      	bne.n	806a4d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 806a4ae:	2300      	movs	r3, #0
 806a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 806a4b2:	687b      	ldr	r3, [r7, #4]
 806a4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806a4b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 806a4b8:	687b      	ldr	r3, [r7, #4]
 806a4ba:	681b      	ldr	r3, [r3, #0]
 806a4bc:	685b      	ldr	r3, [r3, #4]
 806a4be:	b29b      	uxth	r3, r3
 806a4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806a4c4:	b29a      	uxth	r2, r3
 806a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806a4c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 806a4ca:	687b      	ldr	r3, [r7, #4]
 806a4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806a4ce:	1c9a      	adds	r2, r3, #2
 806a4d0:	687b      	ldr	r3, [r7, #4]
 806a4d2:	629a      	str	r2, [r3, #40]	; 0x28
 806a4d4:	e026      	b.n	806a524 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 806a4d6:	687b      	ldr	r3, [r7, #4]
 806a4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806a4da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 806a4dc:	2300      	movs	r3, #0
 806a4de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 806a4e0:	687b      	ldr	r3, [r7, #4]
 806a4e2:	689b      	ldr	r3, [r3, #8]
 806a4e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806a4e8:	d007      	beq.n	806a4fa <UART_Receive_IT+0x74>
 806a4ea:	687b      	ldr	r3, [r7, #4]
 806a4ec:	689b      	ldr	r3, [r3, #8]
 806a4ee:	2b00      	cmp	r3, #0
 806a4f0:	d10a      	bne.n	806a508 <UART_Receive_IT+0x82>
 806a4f2:	687b      	ldr	r3, [r7, #4]
 806a4f4:	691b      	ldr	r3, [r3, #16]
 806a4f6:	2b00      	cmp	r3, #0
 806a4f8:	d106      	bne.n	806a508 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 806a4fa:	687b      	ldr	r3, [r7, #4]
 806a4fc:	681b      	ldr	r3, [r3, #0]
 806a4fe:	685b      	ldr	r3, [r3, #4]
 806a500:	b2da      	uxtb	r2, r3
 806a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a504:	701a      	strb	r2, [r3, #0]
 806a506:	e008      	b.n	806a51a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 806a508:	687b      	ldr	r3, [r7, #4]
 806a50a:	681b      	ldr	r3, [r3, #0]
 806a50c:	685b      	ldr	r3, [r3, #4]
 806a50e:	b2db      	uxtb	r3, r3
 806a510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806a514:	b2da      	uxtb	r2, r3
 806a516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a518:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 806a51a:	687b      	ldr	r3, [r7, #4]
 806a51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806a51e:	1c5a      	adds	r2, r3, #1
 806a520:	687b      	ldr	r3, [r7, #4]
 806a522:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 806a524:	687b      	ldr	r3, [r7, #4]
 806a526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 806a528:	b29b      	uxth	r3, r3
 806a52a:	3b01      	subs	r3, #1
 806a52c:	b29b      	uxth	r3, r3
 806a52e:	687a      	ldr	r2, [r7, #4]
 806a530:	4619      	mov	r1, r3
 806a532:	85d1      	strh	r1, [r2, #46]	; 0x2e
 806a534:	2b00      	cmp	r3, #0
 806a536:	d15a      	bne.n	806a5ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 806a538:	687b      	ldr	r3, [r7, #4]
 806a53a:	681b      	ldr	r3, [r3, #0]
 806a53c:	68da      	ldr	r2, [r3, #12]
 806a53e:	687b      	ldr	r3, [r7, #4]
 806a540:	681b      	ldr	r3, [r3, #0]
 806a542:	f022 0220 	bic.w	r2, r2, #32
 806a546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 806a548:	687b      	ldr	r3, [r7, #4]
 806a54a:	681b      	ldr	r3, [r3, #0]
 806a54c:	68da      	ldr	r2, [r3, #12]
 806a54e:	687b      	ldr	r3, [r7, #4]
 806a550:	681b      	ldr	r3, [r3, #0]
 806a552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 806a556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 806a558:	687b      	ldr	r3, [r7, #4]
 806a55a:	681b      	ldr	r3, [r3, #0]
 806a55c:	695a      	ldr	r2, [r3, #20]
 806a55e:	687b      	ldr	r3, [r7, #4]
 806a560:	681b      	ldr	r3, [r3, #0]
 806a562:	f022 0201 	bic.w	r2, r2, #1
 806a566:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 806a568:	687b      	ldr	r3, [r7, #4]
 806a56a:	2220      	movs	r2, #32
 806a56c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 806a570:	687b      	ldr	r3, [r7, #4]
 806a572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806a574:	2b01      	cmp	r3, #1
 806a576:	d135      	bne.n	806a5e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806a578:	687b      	ldr	r3, [r7, #4]
 806a57a:	2200      	movs	r2, #0
 806a57c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 806a57e:	687b      	ldr	r3, [r7, #4]
 806a580:	681b      	ldr	r3, [r3, #0]
 806a582:	330c      	adds	r3, #12
 806a584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a586:	697b      	ldr	r3, [r7, #20]
 806a588:	e853 3f00 	ldrex	r3, [r3]
 806a58c:	613b      	str	r3, [r7, #16]
   return(result);
 806a58e:	693b      	ldr	r3, [r7, #16]
 806a590:	f023 0310 	bic.w	r3, r3, #16
 806a594:	627b      	str	r3, [r7, #36]	; 0x24
 806a596:	687b      	ldr	r3, [r7, #4]
 806a598:	681b      	ldr	r3, [r3, #0]
 806a59a:	330c      	adds	r3, #12
 806a59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806a59e:	623a      	str	r2, [r7, #32]
 806a5a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a5a2:	69f9      	ldr	r1, [r7, #28]
 806a5a4:	6a3a      	ldr	r2, [r7, #32]
 806a5a6:	e841 2300 	strex	r3, r2, [r1]
 806a5aa:	61bb      	str	r3, [r7, #24]
   return(result);
 806a5ac:	69bb      	ldr	r3, [r7, #24]
 806a5ae:	2b00      	cmp	r3, #0
 806a5b0:	d1e5      	bne.n	806a57e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 806a5b2:	687b      	ldr	r3, [r7, #4]
 806a5b4:	681b      	ldr	r3, [r3, #0]
 806a5b6:	681b      	ldr	r3, [r3, #0]
 806a5b8:	f003 0310 	and.w	r3, r3, #16
 806a5bc:	2b10      	cmp	r3, #16
 806a5be:	d10a      	bne.n	806a5d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 806a5c0:	2300      	movs	r3, #0
 806a5c2:	60fb      	str	r3, [r7, #12]
 806a5c4:	687b      	ldr	r3, [r7, #4]
 806a5c6:	681b      	ldr	r3, [r3, #0]
 806a5c8:	681b      	ldr	r3, [r3, #0]
 806a5ca:	60fb      	str	r3, [r7, #12]
 806a5cc:	687b      	ldr	r3, [r7, #4]
 806a5ce:	681b      	ldr	r3, [r3, #0]
 806a5d0:	685b      	ldr	r3, [r3, #4]
 806a5d2:	60fb      	str	r3, [r7, #12]
 806a5d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 806a5d6:	687b      	ldr	r3, [r7, #4]
 806a5d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 806a5da:	4619      	mov	r1, r3
 806a5dc:	6878      	ldr	r0, [r7, #4]
 806a5de:	f7ff fdbf 	bl	806a160 <HAL_UARTEx_RxEventCallback>
 806a5e2:	e002      	b.n	806a5ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 806a5e4:	6878      	ldr	r0, [r7, #4]
 806a5e6:	f7f8 f9a7 	bl	8062938 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 806a5ea:	2300      	movs	r3, #0
 806a5ec:	e002      	b.n	806a5f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 806a5ee:	2300      	movs	r3, #0
 806a5f0:	e000      	b.n	806a5f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 806a5f2:	2302      	movs	r3, #2
  }
}
 806a5f4:	4618      	mov	r0, r3
 806a5f6:	3730      	adds	r7, #48	; 0x30
 806a5f8:	46bd      	mov	sp, r7
 806a5fa:	bd80      	pop	{r7, pc}

0806a5fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 806a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 806a600:	b09f      	sub	sp, #124	; 0x7c
 806a602:	af00      	add	r7, sp, #0
 806a604:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 806a606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a608:	685a      	ldr	r2, [r3, #4]
 806a60a:	4b9b      	ldr	r3, [pc, #620]	; (806a878 <UART_SetConfig+0x27c>)
 806a60c:	429a      	cmp	r2, r3
 806a60e:	d904      	bls.n	806a61a <UART_SetConfig+0x1e>
 806a610:	f640 6156 	movw	r1, #3670	; 0xe56
 806a614:	4899      	ldr	r0, [pc, #612]	; (806a87c <UART_SetConfig+0x280>)
 806a616:	f7f8 fd62 	bl	80630de <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 806a61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a61c:	68db      	ldr	r3, [r3, #12]
 806a61e:	2b00      	cmp	r3, #0
 806a620:	d009      	beq.n	806a636 <UART_SetConfig+0x3a>
 806a622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a624:	68db      	ldr	r3, [r3, #12]
 806a626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 806a62a:	d004      	beq.n	806a636 <UART_SetConfig+0x3a>
 806a62c:	f640 6157 	movw	r1, #3671	; 0xe57
 806a630:	4892      	ldr	r0, [pc, #584]	; (806a87c <UART_SetConfig+0x280>)
 806a632:	f7f8 fd54 	bl	80630de <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 806a636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a638:	691b      	ldr	r3, [r3, #16]
 806a63a:	2b00      	cmp	r3, #0
 806a63c:	d00e      	beq.n	806a65c <UART_SetConfig+0x60>
 806a63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a640:	691b      	ldr	r3, [r3, #16]
 806a642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 806a646:	d009      	beq.n	806a65c <UART_SetConfig+0x60>
 806a648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a64a:	691b      	ldr	r3, [r3, #16]
 806a64c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 806a650:	d004      	beq.n	806a65c <UART_SetConfig+0x60>
 806a652:	f640 6158 	movw	r1, #3672	; 0xe58
 806a656:	4889      	ldr	r0, [pc, #548]	; (806a87c <UART_SetConfig+0x280>)
 806a658:	f7f8 fd41 	bl	80630de <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 806a65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a65e:	695a      	ldr	r2, [r3, #20]
 806a660:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 806a664:	4013      	ands	r3, r2
 806a666:	2b00      	cmp	r3, #0
 806a668:	d103      	bne.n	806a672 <UART_SetConfig+0x76>
 806a66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a66c:	695b      	ldr	r3, [r3, #20]
 806a66e:	2b00      	cmp	r3, #0
 806a670:	d104      	bne.n	806a67c <UART_SetConfig+0x80>
 806a672:	f640 6159 	movw	r1, #3673	; 0xe59
 806a676:	4881      	ldr	r0, [pc, #516]	; (806a87c <UART_SetConfig+0x280>)
 806a678:	f7f8 fd31 	bl	80630de <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 806a67c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a67e:	681b      	ldr	r3, [r3, #0]
 806a680:	691b      	ldr	r3, [r3, #16]
 806a682:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 806a686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a688:	68d9      	ldr	r1, [r3, #12]
 806a68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a68c:	681a      	ldr	r2, [r3, #0]
 806a68e:	ea40 0301 	orr.w	r3, r0, r1
 806a692:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 806a694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a696:	689a      	ldr	r2, [r3, #8]
 806a698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a69a:	691b      	ldr	r3, [r3, #16]
 806a69c:	431a      	orrs	r2, r3
 806a69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a6a0:	695b      	ldr	r3, [r3, #20]
 806a6a2:	431a      	orrs	r2, r3
 806a6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a6a6:	69db      	ldr	r3, [r3, #28]
 806a6a8:	4313      	orrs	r3, r2
 806a6aa:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 806a6ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a6ae:	681b      	ldr	r3, [r3, #0]
 806a6b0:	68db      	ldr	r3, [r3, #12]
 806a6b2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 806a6b6:	f021 010c 	bic.w	r1, r1, #12
 806a6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a6bc:	681a      	ldr	r2, [r3, #0]
 806a6be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 806a6c0:	430b      	orrs	r3, r1
 806a6c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 806a6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a6c6:	681b      	ldr	r3, [r3, #0]
 806a6c8:	695b      	ldr	r3, [r3, #20]
 806a6ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 806a6ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a6d0:	6999      	ldr	r1, [r3, #24]
 806a6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a6d4:	681a      	ldr	r2, [r3, #0]
 806a6d6:	ea40 0301 	orr.w	r3, r0, r1
 806a6da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 806a6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a6de:	681a      	ldr	r2, [r3, #0]
 806a6e0:	4b67      	ldr	r3, [pc, #412]	; (806a880 <UART_SetConfig+0x284>)
 806a6e2:	429a      	cmp	r2, r3
 806a6e4:	d004      	beq.n	806a6f0 <UART_SetConfig+0xf4>
 806a6e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a6e8:	681a      	ldr	r2, [r3, #0]
 806a6ea:	4b66      	ldr	r3, [pc, #408]	; (806a884 <UART_SetConfig+0x288>)
 806a6ec:	429a      	cmp	r2, r3
 806a6ee:	d103      	bne.n	806a6f8 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 806a6f0:	f7fd fd50 	bl	8068194 <HAL_RCC_GetPCLK2Freq>
 806a6f4:	6778      	str	r0, [r7, #116]	; 0x74
 806a6f6:	e002      	b.n	806a6fe <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 806a6f8:	f7fd fd38 	bl	806816c <HAL_RCC_GetPCLK1Freq>
 806a6fc:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 806a6fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a700:	69db      	ldr	r3, [r3, #28]
 806a702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 806a706:	f040 80c1 	bne.w	806a88c <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 806a70a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a70c:	461c      	mov	r4, r3
 806a70e:	f04f 0500 	mov.w	r5, #0
 806a712:	4622      	mov	r2, r4
 806a714:	462b      	mov	r3, r5
 806a716:	1891      	adds	r1, r2, r2
 806a718:	6439      	str	r1, [r7, #64]	; 0x40
 806a71a:	415b      	adcs	r3, r3
 806a71c:	647b      	str	r3, [r7, #68]	; 0x44
 806a71e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 806a722:	1912      	adds	r2, r2, r4
 806a724:	eb45 0303 	adc.w	r3, r5, r3
 806a728:	f04f 0000 	mov.w	r0, #0
 806a72c:	f04f 0100 	mov.w	r1, #0
 806a730:	00d9      	lsls	r1, r3, #3
 806a732:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 806a736:	00d0      	lsls	r0, r2, #3
 806a738:	4602      	mov	r2, r0
 806a73a:	460b      	mov	r3, r1
 806a73c:	1911      	adds	r1, r2, r4
 806a73e:	6639      	str	r1, [r7, #96]	; 0x60
 806a740:	416b      	adcs	r3, r5
 806a742:	667b      	str	r3, [r7, #100]	; 0x64
 806a744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a746:	685b      	ldr	r3, [r3, #4]
 806a748:	461a      	mov	r2, r3
 806a74a:	f04f 0300 	mov.w	r3, #0
 806a74e:	1891      	adds	r1, r2, r2
 806a750:	63b9      	str	r1, [r7, #56]	; 0x38
 806a752:	415b      	adcs	r3, r3
 806a754:	63fb      	str	r3, [r7, #60]	; 0x3c
 806a756:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 806a75a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 806a75e:	f7f6 fafb 	bl	8060d58 <__aeabi_uldivmod>
 806a762:	4602      	mov	r2, r0
 806a764:	460b      	mov	r3, r1
 806a766:	4b48      	ldr	r3, [pc, #288]	; (806a888 <UART_SetConfig+0x28c>)
 806a768:	fba3 2302 	umull	r2, r3, r3, r2
 806a76c:	095b      	lsrs	r3, r3, #5
 806a76e:	011e      	lsls	r6, r3, #4
 806a770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a772:	461c      	mov	r4, r3
 806a774:	f04f 0500 	mov.w	r5, #0
 806a778:	4622      	mov	r2, r4
 806a77a:	462b      	mov	r3, r5
 806a77c:	1891      	adds	r1, r2, r2
 806a77e:	6339      	str	r1, [r7, #48]	; 0x30
 806a780:	415b      	adcs	r3, r3
 806a782:	637b      	str	r3, [r7, #52]	; 0x34
 806a784:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 806a788:	1912      	adds	r2, r2, r4
 806a78a:	eb45 0303 	adc.w	r3, r5, r3
 806a78e:	f04f 0000 	mov.w	r0, #0
 806a792:	f04f 0100 	mov.w	r1, #0
 806a796:	00d9      	lsls	r1, r3, #3
 806a798:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 806a79c:	00d0      	lsls	r0, r2, #3
 806a79e:	4602      	mov	r2, r0
 806a7a0:	460b      	mov	r3, r1
 806a7a2:	1911      	adds	r1, r2, r4
 806a7a4:	65b9      	str	r1, [r7, #88]	; 0x58
 806a7a6:	416b      	adcs	r3, r5
 806a7a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 806a7aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a7ac:	685b      	ldr	r3, [r3, #4]
 806a7ae:	461a      	mov	r2, r3
 806a7b0:	f04f 0300 	mov.w	r3, #0
 806a7b4:	1891      	adds	r1, r2, r2
 806a7b6:	62b9      	str	r1, [r7, #40]	; 0x28
 806a7b8:	415b      	adcs	r3, r3
 806a7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 806a7bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 806a7c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 806a7c4:	f7f6 fac8 	bl	8060d58 <__aeabi_uldivmod>
 806a7c8:	4602      	mov	r2, r0
 806a7ca:	460b      	mov	r3, r1
 806a7cc:	4b2e      	ldr	r3, [pc, #184]	; (806a888 <UART_SetConfig+0x28c>)
 806a7ce:	fba3 1302 	umull	r1, r3, r3, r2
 806a7d2:	095b      	lsrs	r3, r3, #5
 806a7d4:	2164      	movs	r1, #100	; 0x64
 806a7d6:	fb01 f303 	mul.w	r3, r1, r3
 806a7da:	1ad3      	subs	r3, r2, r3
 806a7dc:	00db      	lsls	r3, r3, #3
 806a7de:	3332      	adds	r3, #50	; 0x32
 806a7e0:	4a29      	ldr	r2, [pc, #164]	; (806a888 <UART_SetConfig+0x28c>)
 806a7e2:	fba2 2303 	umull	r2, r3, r2, r3
 806a7e6:	095b      	lsrs	r3, r3, #5
 806a7e8:	005b      	lsls	r3, r3, #1
 806a7ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 806a7ee:	441e      	add	r6, r3
 806a7f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a7f2:	4618      	mov	r0, r3
 806a7f4:	f04f 0100 	mov.w	r1, #0
 806a7f8:	4602      	mov	r2, r0
 806a7fa:	460b      	mov	r3, r1
 806a7fc:	1894      	adds	r4, r2, r2
 806a7fe:	623c      	str	r4, [r7, #32]
 806a800:	415b      	adcs	r3, r3
 806a802:	627b      	str	r3, [r7, #36]	; 0x24
 806a804:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 806a808:	1812      	adds	r2, r2, r0
 806a80a:	eb41 0303 	adc.w	r3, r1, r3
 806a80e:	f04f 0400 	mov.w	r4, #0
 806a812:	f04f 0500 	mov.w	r5, #0
 806a816:	00dd      	lsls	r5, r3, #3
 806a818:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 806a81c:	00d4      	lsls	r4, r2, #3
 806a81e:	4622      	mov	r2, r4
 806a820:	462b      	mov	r3, r5
 806a822:	1814      	adds	r4, r2, r0
 806a824:	653c      	str	r4, [r7, #80]	; 0x50
 806a826:	414b      	adcs	r3, r1
 806a828:	657b      	str	r3, [r7, #84]	; 0x54
 806a82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a82c:	685b      	ldr	r3, [r3, #4]
 806a82e:	461a      	mov	r2, r3
 806a830:	f04f 0300 	mov.w	r3, #0
 806a834:	1891      	adds	r1, r2, r2
 806a836:	61b9      	str	r1, [r7, #24]
 806a838:	415b      	adcs	r3, r3
 806a83a:	61fb      	str	r3, [r7, #28]
 806a83c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 806a840:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 806a844:	f7f6 fa88 	bl	8060d58 <__aeabi_uldivmod>
 806a848:	4602      	mov	r2, r0
 806a84a:	460b      	mov	r3, r1
 806a84c:	4b0e      	ldr	r3, [pc, #56]	; (806a888 <UART_SetConfig+0x28c>)
 806a84e:	fba3 1302 	umull	r1, r3, r3, r2
 806a852:	095b      	lsrs	r3, r3, #5
 806a854:	2164      	movs	r1, #100	; 0x64
 806a856:	fb01 f303 	mul.w	r3, r1, r3
 806a85a:	1ad3      	subs	r3, r2, r3
 806a85c:	00db      	lsls	r3, r3, #3
 806a85e:	3332      	adds	r3, #50	; 0x32
 806a860:	4a09      	ldr	r2, [pc, #36]	; (806a888 <UART_SetConfig+0x28c>)
 806a862:	fba2 2303 	umull	r2, r3, r2, r3
 806a866:	095b      	lsrs	r3, r3, #5
 806a868:	f003 0207 	and.w	r2, r3, #7
 806a86c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a86e:	681b      	ldr	r3, [r3, #0]
 806a870:	4432      	add	r2, r6
 806a872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 806a874:	e0c4      	b.n	806aa00 <UART_SetConfig+0x404>
 806a876:	bf00      	nop
 806a878:	00a037a0 	.word	0x00a037a0
 806a87c:	0807753c 	.word	0x0807753c
 806a880:	40011000 	.word	0x40011000
 806a884:	40011400 	.word	0x40011400
 806a888:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 806a88c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a88e:	461c      	mov	r4, r3
 806a890:	f04f 0500 	mov.w	r5, #0
 806a894:	4622      	mov	r2, r4
 806a896:	462b      	mov	r3, r5
 806a898:	1891      	adds	r1, r2, r2
 806a89a:	6139      	str	r1, [r7, #16]
 806a89c:	415b      	adcs	r3, r3
 806a89e:	617b      	str	r3, [r7, #20]
 806a8a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 806a8a4:	1912      	adds	r2, r2, r4
 806a8a6:	eb45 0303 	adc.w	r3, r5, r3
 806a8aa:	f04f 0000 	mov.w	r0, #0
 806a8ae:	f04f 0100 	mov.w	r1, #0
 806a8b2:	00d9      	lsls	r1, r3, #3
 806a8b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 806a8b8:	00d0      	lsls	r0, r2, #3
 806a8ba:	4602      	mov	r2, r0
 806a8bc:	460b      	mov	r3, r1
 806a8be:	eb12 0804 	adds.w	r8, r2, r4
 806a8c2:	eb43 0905 	adc.w	r9, r3, r5
 806a8c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a8c8:	685b      	ldr	r3, [r3, #4]
 806a8ca:	4618      	mov	r0, r3
 806a8cc:	f04f 0100 	mov.w	r1, #0
 806a8d0:	f04f 0200 	mov.w	r2, #0
 806a8d4:	f04f 0300 	mov.w	r3, #0
 806a8d8:	008b      	lsls	r3, r1, #2
 806a8da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 806a8de:	0082      	lsls	r2, r0, #2
 806a8e0:	4640      	mov	r0, r8
 806a8e2:	4649      	mov	r1, r9
 806a8e4:	f7f6 fa38 	bl	8060d58 <__aeabi_uldivmod>
 806a8e8:	4602      	mov	r2, r0
 806a8ea:	460b      	mov	r3, r1
 806a8ec:	4b47      	ldr	r3, [pc, #284]	; (806aa0c <UART_SetConfig+0x410>)
 806a8ee:	fba3 2302 	umull	r2, r3, r3, r2
 806a8f2:	095b      	lsrs	r3, r3, #5
 806a8f4:	011e      	lsls	r6, r3, #4
 806a8f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a8f8:	4618      	mov	r0, r3
 806a8fa:	f04f 0100 	mov.w	r1, #0
 806a8fe:	4602      	mov	r2, r0
 806a900:	460b      	mov	r3, r1
 806a902:	1894      	adds	r4, r2, r2
 806a904:	60bc      	str	r4, [r7, #8]
 806a906:	415b      	adcs	r3, r3
 806a908:	60fb      	str	r3, [r7, #12]
 806a90a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 806a90e:	1812      	adds	r2, r2, r0
 806a910:	eb41 0303 	adc.w	r3, r1, r3
 806a914:	f04f 0400 	mov.w	r4, #0
 806a918:	f04f 0500 	mov.w	r5, #0
 806a91c:	00dd      	lsls	r5, r3, #3
 806a91e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 806a922:	00d4      	lsls	r4, r2, #3
 806a924:	4622      	mov	r2, r4
 806a926:	462b      	mov	r3, r5
 806a928:	1814      	adds	r4, r2, r0
 806a92a:	64bc      	str	r4, [r7, #72]	; 0x48
 806a92c:	414b      	adcs	r3, r1
 806a92e:	64fb      	str	r3, [r7, #76]	; 0x4c
 806a930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a932:	685b      	ldr	r3, [r3, #4]
 806a934:	4618      	mov	r0, r3
 806a936:	f04f 0100 	mov.w	r1, #0
 806a93a:	f04f 0200 	mov.w	r2, #0
 806a93e:	f04f 0300 	mov.w	r3, #0
 806a942:	008b      	lsls	r3, r1, #2
 806a944:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 806a948:	0082      	lsls	r2, r0, #2
 806a94a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 806a94e:	f7f6 fa03 	bl	8060d58 <__aeabi_uldivmod>
 806a952:	4602      	mov	r2, r0
 806a954:	460b      	mov	r3, r1
 806a956:	4b2d      	ldr	r3, [pc, #180]	; (806aa0c <UART_SetConfig+0x410>)
 806a958:	fba3 1302 	umull	r1, r3, r3, r2
 806a95c:	095b      	lsrs	r3, r3, #5
 806a95e:	2164      	movs	r1, #100	; 0x64
 806a960:	fb01 f303 	mul.w	r3, r1, r3
 806a964:	1ad3      	subs	r3, r2, r3
 806a966:	011b      	lsls	r3, r3, #4
 806a968:	3332      	adds	r3, #50	; 0x32
 806a96a:	4a28      	ldr	r2, [pc, #160]	; (806aa0c <UART_SetConfig+0x410>)
 806a96c:	fba2 2303 	umull	r2, r3, r2, r3
 806a970:	095b      	lsrs	r3, r3, #5
 806a972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 806a976:	441e      	add	r6, r3
 806a978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a97a:	4618      	mov	r0, r3
 806a97c:	f04f 0100 	mov.w	r1, #0
 806a980:	4602      	mov	r2, r0
 806a982:	460b      	mov	r3, r1
 806a984:	1894      	adds	r4, r2, r2
 806a986:	603c      	str	r4, [r7, #0]
 806a988:	415b      	adcs	r3, r3
 806a98a:	607b      	str	r3, [r7, #4]
 806a98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 806a990:	1812      	adds	r2, r2, r0
 806a992:	eb41 0303 	adc.w	r3, r1, r3
 806a996:	f04f 0400 	mov.w	r4, #0
 806a99a:	f04f 0500 	mov.w	r5, #0
 806a99e:	00dd      	lsls	r5, r3, #3
 806a9a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 806a9a4:	00d4      	lsls	r4, r2, #3
 806a9a6:	4622      	mov	r2, r4
 806a9a8:	462b      	mov	r3, r5
 806a9aa:	eb12 0a00 	adds.w	sl, r2, r0
 806a9ae:	eb43 0b01 	adc.w	fp, r3, r1
 806a9b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a9b4:	685b      	ldr	r3, [r3, #4]
 806a9b6:	4618      	mov	r0, r3
 806a9b8:	f04f 0100 	mov.w	r1, #0
 806a9bc:	f04f 0200 	mov.w	r2, #0
 806a9c0:	f04f 0300 	mov.w	r3, #0
 806a9c4:	008b      	lsls	r3, r1, #2
 806a9c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 806a9ca:	0082      	lsls	r2, r0, #2
 806a9cc:	4650      	mov	r0, sl
 806a9ce:	4659      	mov	r1, fp
 806a9d0:	f7f6 f9c2 	bl	8060d58 <__aeabi_uldivmod>
 806a9d4:	4602      	mov	r2, r0
 806a9d6:	460b      	mov	r3, r1
 806a9d8:	4b0c      	ldr	r3, [pc, #48]	; (806aa0c <UART_SetConfig+0x410>)
 806a9da:	fba3 1302 	umull	r1, r3, r3, r2
 806a9de:	095b      	lsrs	r3, r3, #5
 806a9e0:	2164      	movs	r1, #100	; 0x64
 806a9e2:	fb01 f303 	mul.w	r3, r1, r3
 806a9e6:	1ad3      	subs	r3, r2, r3
 806a9e8:	011b      	lsls	r3, r3, #4
 806a9ea:	3332      	adds	r3, #50	; 0x32
 806a9ec:	4a07      	ldr	r2, [pc, #28]	; (806aa0c <UART_SetConfig+0x410>)
 806a9ee:	fba2 2303 	umull	r2, r3, r2, r3
 806a9f2:	095b      	lsrs	r3, r3, #5
 806a9f4:	f003 020f 	and.w	r2, r3, #15
 806a9f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a9fa:	681b      	ldr	r3, [r3, #0]
 806a9fc:	4432      	add	r2, r6
 806a9fe:	609a      	str	r2, [r3, #8]
}
 806aa00:	bf00      	nop
 806aa02:	377c      	adds	r7, #124	; 0x7c
 806aa04:	46bd      	mov	sp, r7
 806aa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 806aa0a:	bf00      	nop
 806aa0c:	51eb851f 	.word	0x51eb851f

0806aa10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 806aa10:	b580      	push	{r7, lr}
 806aa12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 806aa14:	4904      	ldr	r1, [pc, #16]	; (806aa28 <MX_FATFS_Init+0x18>)
 806aa16:	4805      	ldr	r0, [pc, #20]	; (806aa2c <MX_FATFS_Init+0x1c>)
 806aa18:	f003 fa40 	bl	806de9c <FATFS_LinkDriver>
 806aa1c:	4603      	mov	r3, r0
 806aa1e:	461a      	mov	r2, r3
 806aa20:	4b03      	ldr	r3, [pc, #12]	; (806aa30 <MX_FATFS_Init+0x20>)
 806aa22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 806aa24:	bf00      	nop
 806aa26:	bd80      	pop	{r7, pc}
 806aa28:	20005870 	.word	0x20005870
 806aa2c:	2000000c 	.word	0x2000000c
 806aa30:	20005874 	.word	0x20005874

0806aa34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 806aa34:	b480      	push	{r7}
 806aa36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 806aa38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 806aa3a:	4618      	mov	r0, r3
 806aa3c:	46bd      	mov	sp, r7
 806aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806aa42:	4770      	bx	lr

0806aa44 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 806aa44:	b580      	push	{r7, lr}
 806aa46:	b082      	sub	sp, #8
 806aa48:	af00      	add	r7, sp, #0
 806aa4a:	4603      	mov	r3, r0
 806aa4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 806aa4e:	79fb      	ldrb	r3, [r7, #7]
 806aa50:	4618      	mov	r0, r3
 806aa52:	f000 f9d9 	bl	806ae08 <USER_SPI_initialize>
 806aa56:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 806aa58:	4618      	mov	r0, r3
 806aa5a:	3708      	adds	r7, #8
 806aa5c:	46bd      	mov	sp, r7
 806aa5e:	bd80      	pop	{r7, pc}

0806aa60 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 806aa60:	b580      	push	{r7, lr}
 806aa62:	b082      	sub	sp, #8
 806aa64:	af00      	add	r7, sp, #0
 806aa66:	4603      	mov	r3, r0
 806aa68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 806aa6a:	79fb      	ldrb	r3, [r7, #7]
 806aa6c:	4618      	mov	r0, r3
 806aa6e:	f000 fab7 	bl	806afe0 <USER_SPI_status>
 806aa72:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 806aa74:	4618      	mov	r0, r3
 806aa76:	3708      	adds	r7, #8
 806aa78:	46bd      	mov	sp, r7
 806aa7a:	bd80      	pop	{r7, pc}

0806aa7c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 806aa7c:	b580      	push	{r7, lr}
 806aa7e:	b084      	sub	sp, #16
 806aa80:	af00      	add	r7, sp, #0
 806aa82:	60b9      	str	r1, [r7, #8]
 806aa84:	607a      	str	r2, [r7, #4]
 806aa86:	603b      	str	r3, [r7, #0]
 806aa88:	4603      	mov	r3, r0
 806aa8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 806aa8c:	7bf8      	ldrb	r0, [r7, #15]
 806aa8e:	683b      	ldr	r3, [r7, #0]
 806aa90:	687a      	ldr	r2, [r7, #4]
 806aa92:	68b9      	ldr	r1, [r7, #8]
 806aa94:	f000 faba 	bl	806b00c <USER_SPI_read>
 806aa98:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 806aa9a:	4618      	mov	r0, r3
 806aa9c:	3710      	adds	r7, #16
 806aa9e:	46bd      	mov	sp, r7
 806aaa0:	bd80      	pop	{r7, pc}

0806aaa2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 806aaa2:	b580      	push	{r7, lr}
 806aaa4:	b084      	sub	sp, #16
 806aaa6:	af00      	add	r7, sp, #0
 806aaa8:	60b9      	str	r1, [r7, #8]
 806aaaa:	607a      	str	r2, [r7, #4]
 806aaac:	603b      	str	r3, [r7, #0]
 806aaae:	4603      	mov	r3, r0
 806aab0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 806aab2:	7bf8      	ldrb	r0, [r7, #15]
 806aab4:	683b      	ldr	r3, [r7, #0]
 806aab6:	687a      	ldr	r2, [r7, #4]
 806aab8:	68b9      	ldr	r1, [r7, #8]
 806aaba:	f000 fb0d 	bl	806b0d8 <USER_SPI_write>
 806aabe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 806aac0:	4618      	mov	r0, r3
 806aac2:	3710      	adds	r7, #16
 806aac4:	46bd      	mov	sp, r7
 806aac6:	bd80      	pop	{r7, pc}

0806aac8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 806aac8:	b580      	push	{r7, lr}
 806aaca:	b082      	sub	sp, #8
 806aacc:	af00      	add	r7, sp, #0
 806aace:	4603      	mov	r3, r0
 806aad0:	603a      	str	r2, [r7, #0]
 806aad2:	71fb      	strb	r3, [r7, #7]
 806aad4:	460b      	mov	r3, r1
 806aad6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 806aad8:	79b9      	ldrb	r1, [r7, #6]
 806aada:	79fb      	ldrb	r3, [r7, #7]
 806aadc:	683a      	ldr	r2, [r7, #0]
 806aade:	4618      	mov	r0, r3
 806aae0:	f000 fb76 	bl	806b1d0 <USER_SPI_ioctl>
 806aae4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 806aae6:	4618      	mov	r0, r3
 806aae8:	3708      	adds	r7, #8
 806aaea:	46bd      	mov	sp, r7
 806aaec:	bd80      	pop	{r7, pc}
	...

0806aaf0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 806aaf0:	b580      	push	{r7, lr}
 806aaf2:	b082      	sub	sp, #8
 806aaf4:	af00      	add	r7, sp, #0
 806aaf6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 806aaf8:	f7f8 ffbc 	bl	8063a74 <HAL_GetTick>
 806aafc:	4603      	mov	r3, r0
 806aafe:	4a04      	ldr	r2, [pc, #16]	; (806ab10 <SPI_Timer_On+0x20>)
 806ab00:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 806ab02:	4a04      	ldr	r2, [pc, #16]	; (806ab14 <SPI_Timer_On+0x24>)
 806ab04:	687b      	ldr	r3, [r7, #4]
 806ab06:	6013      	str	r3, [r2, #0]
}
 806ab08:	bf00      	nop
 806ab0a:	3708      	adds	r7, #8
 806ab0c:	46bd      	mov	sp, r7
 806ab0e:	bd80      	pop	{r7, pc}
 806ab10:	20005cdc 	.word	0x20005cdc
 806ab14:	20005ce0 	.word	0x20005ce0

0806ab18 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 806ab18:	b580      	push	{r7, lr}
 806ab1a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 806ab1c:	f7f8 ffaa 	bl	8063a74 <HAL_GetTick>
 806ab20:	4602      	mov	r2, r0
 806ab22:	4b06      	ldr	r3, [pc, #24]	; (806ab3c <SPI_Timer_Status+0x24>)
 806ab24:	681b      	ldr	r3, [r3, #0]
 806ab26:	1ad2      	subs	r2, r2, r3
 806ab28:	4b05      	ldr	r3, [pc, #20]	; (806ab40 <SPI_Timer_Status+0x28>)
 806ab2a:	681b      	ldr	r3, [r3, #0]
 806ab2c:	429a      	cmp	r2, r3
 806ab2e:	bf34      	ite	cc
 806ab30:	2301      	movcc	r3, #1
 806ab32:	2300      	movcs	r3, #0
 806ab34:	b2db      	uxtb	r3, r3
}
 806ab36:	4618      	mov	r0, r3
 806ab38:	bd80      	pop	{r7, pc}
 806ab3a:	bf00      	nop
 806ab3c:	20005cdc 	.word	0x20005cdc
 806ab40:	20005ce0 	.word	0x20005ce0

0806ab44 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 806ab44:	b580      	push	{r7, lr}
 806ab46:	b086      	sub	sp, #24
 806ab48:	af02      	add	r7, sp, #8
 806ab4a:	4603      	mov	r3, r0
 806ab4c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 806ab4e:	f107 020f 	add.w	r2, r7, #15
 806ab52:	1df9      	adds	r1, r7, #7
 806ab54:	2332      	movs	r3, #50	; 0x32
 806ab56:	9300      	str	r3, [sp, #0]
 806ab58:	2301      	movs	r3, #1
 806ab5a:	4804      	ldr	r0, [pc, #16]	; (806ab6c <xchg_spi+0x28>)
 806ab5c:	f7fe f8a6 	bl	8068cac <HAL_SPI_TransmitReceive>
    return rxDat;
 806ab60:	7bfb      	ldrb	r3, [r7, #15]
}
 806ab62:	4618      	mov	r0, r3
 806ab64:	3710      	adds	r7, #16
 806ab66:	46bd      	mov	sp, r7
 806ab68:	bd80      	pop	{r7, pc}
 806ab6a:	bf00      	nop
 806ab6c:	20005730 	.word	0x20005730

0806ab70 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 806ab70:	b590      	push	{r4, r7, lr}
 806ab72:	b085      	sub	sp, #20
 806ab74:	af00      	add	r7, sp, #0
 806ab76:	6078      	str	r0, [r7, #4]
 806ab78:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 806ab7a:	2300      	movs	r3, #0
 806ab7c:	60fb      	str	r3, [r7, #12]
 806ab7e:	e00a      	b.n	806ab96 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 806ab80:	687a      	ldr	r2, [r7, #4]
 806ab82:	68fb      	ldr	r3, [r7, #12]
 806ab84:	18d4      	adds	r4, r2, r3
 806ab86:	20ff      	movs	r0, #255	; 0xff
 806ab88:	f7ff ffdc 	bl	806ab44 <xchg_spi>
 806ab8c:	4603      	mov	r3, r0
 806ab8e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 806ab90:	68fb      	ldr	r3, [r7, #12]
 806ab92:	3301      	adds	r3, #1
 806ab94:	60fb      	str	r3, [r7, #12]
 806ab96:	68fa      	ldr	r2, [r7, #12]
 806ab98:	683b      	ldr	r3, [r7, #0]
 806ab9a:	429a      	cmp	r2, r3
 806ab9c:	d3f0      	bcc.n	806ab80 <rcvr_spi_multi+0x10>
	}
}
 806ab9e:	bf00      	nop
 806aba0:	bf00      	nop
 806aba2:	3714      	adds	r7, #20
 806aba4:	46bd      	mov	sp, r7
 806aba6:	bd90      	pop	{r4, r7, pc}

0806aba8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 806aba8:	b580      	push	{r7, lr}
 806abaa:	b084      	sub	sp, #16
 806abac:	af00      	add	r7, sp, #0
 806abae:	6078      	str	r0, [r7, #4]
 806abb0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 806abb2:	2300      	movs	r3, #0
 806abb4:	60fb      	str	r3, [r7, #12]
 806abb6:	e009      	b.n	806abcc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 806abb8:	687a      	ldr	r2, [r7, #4]
 806abba:	68fb      	ldr	r3, [r7, #12]
 806abbc:	4413      	add	r3, r2
 806abbe:	781b      	ldrb	r3, [r3, #0]
 806abc0:	4618      	mov	r0, r3
 806abc2:	f7ff ffbf 	bl	806ab44 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 806abc6:	68fb      	ldr	r3, [r7, #12]
 806abc8:	3301      	adds	r3, #1
 806abca:	60fb      	str	r3, [r7, #12]
 806abcc:	68fa      	ldr	r2, [r7, #12]
 806abce:	683b      	ldr	r3, [r7, #0]
 806abd0:	429a      	cmp	r2, r3
 806abd2:	d3f1      	bcc.n	806abb8 <xmit_spi_multi+0x10>
	}
}
 806abd4:	bf00      	nop
 806abd6:	bf00      	nop
 806abd8:	3710      	adds	r7, #16
 806abda:	46bd      	mov	sp, r7
 806abdc:	bd80      	pop	{r7, pc}

0806abde <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 806abde:	b580      	push	{r7, lr}
 806abe0:	b086      	sub	sp, #24
 806abe2:	af00      	add	r7, sp, #0
 806abe4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 806abe6:	f7f8 ff45 	bl	8063a74 <HAL_GetTick>
 806abea:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 806abec:	687b      	ldr	r3, [r7, #4]
 806abee:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 806abf0:	20ff      	movs	r0, #255	; 0xff
 806abf2:	f7ff ffa7 	bl	806ab44 <xchg_spi>
 806abf6:	4603      	mov	r3, r0
 806abf8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 806abfa:	7bfb      	ldrb	r3, [r7, #15]
 806abfc:	2bff      	cmp	r3, #255	; 0xff
 806abfe:	d007      	beq.n	806ac10 <wait_ready+0x32>
 806ac00:	f7f8 ff38 	bl	8063a74 <HAL_GetTick>
 806ac04:	4602      	mov	r2, r0
 806ac06:	697b      	ldr	r3, [r7, #20]
 806ac08:	1ad3      	subs	r3, r2, r3
 806ac0a:	693a      	ldr	r2, [r7, #16]
 806ac0c:	429a      	cmp	r2, r3
 806ac0e:	d8ef      	bhi.n	806abf0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 806ac10:	7bfb      	ldrb	r3, [r7, #15]
 806ac12:	2bff      	cmp	r3, #255	; 0xff
 806ac14:	bf0c      	ite	eq
 806ac16:	2301      	moveq	r3, #1
 806ac18:	2300      	movne	r3, #0
 806ac1a:	b2db      	uxtb	r3, r3
}
 806ac1c:	4618      	mov	r0, r3
 806ac1e:	3718      	adds	r7, #24
 806ac20:	46bd      	mov	sp, r7
 806ac22:	bd80      	pop	{r7, pc}

0806ac24 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 806ac24:	b580      	push	{r7, lr}
 806ac26:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 806ac28:	2201      	movs	r2, #1
 806ac2a:	2102      	movs	r1, #2
 806ac2c:	4803      	ldr	r0, [pc, #12]	; (806ac3c <despiselect+0x18>)
 806ac2e:	f7fa ffb1 	bl	8065b94 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 806ac32:	20ff      	movs	r0, #255	; 0xff
 806ac34:	f7ff ff86 	bl	806ab44 <xchg_spi>

}
 806ac38:	bf00      	nop
 806ac3a:	bd80      	pop	{r7, pc}
 806ac3c:	40020400 	.word	0x40020400

0806ac40 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 806ac40:	b580      	push	{r7, lr}
 806ac42:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 806ac44:	2200      	movs	r2, #0
 806ac46:	2102      	movs	r1, #2
 806ac48:	4809      	ldr	r0, [pc, #36]	; (806ac70 <spiselect+0x30>)
 806ac4a:	f7fa ffa3 	bl	8065b94 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 806ac4e:	20ff      	movs	r0, #255	; 0xff
 806ac50:	f7ff ff78 	bl	806ab44 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 806ac54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 806ac58:	f7ff ffc1 	bl	806abde <wait_ready>
 806ac5c:	4603      	mov	r3, r0
 806ac5e:	2b00      	cmp	r3, #0
 806ac60:	d001      	beq.n	806ac66 <spiselect+0x26>
 806ac62:	2301      	movs	r3, #1
 806ac64:	e002      	b.n	806ac6c <spiselect+0x2c>

	despiselect();
 806ac66:	f7ff ffdd 	bl	806ac24 <despiselect>
	return 0;	/* Timeout */
 806ac6a:	2300      	movs	r3, #0
}
 806ac6c:	4618      	mov	r0, r3
 806ac6e:	bd80      	pop	{r7, pc}
 806ac70:	40020400 	.word	0x40020400

0806ac74 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 806ac74:	b580      	push	{r7, lr}
 806ac76:	b084      	sub	sp, #16
 806ac78:	af00      	add	r7, sp, #0
 806ac7a:	6078      	str	r0, [r7, #4]
 806ac7c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 806ac7e:	20c8      	movs	r0, #200	; 0xc8
 806ac80:	f7ff ff36 	bl	806aaf0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 806ac84:	20ff      	movs	r0, #255	; 0xff
 806ac86:	f7ff ff5d 	bl	806ab44 <xchg_spi>
 806ac8a:	4603      	mov	r3, r0
 806ac8c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 806ac8e:	7bfb      	ldrb	r3, [r7, #15]
 806ac90:	2bff      	cmp	r3, #255	; 0xff
 806ac92:	d104      	bne.n	806ac9e <rcvr_datablock+0x2a>
 806ac94:	f7ff ff40 	bl	806ab18 <SPI_Timer_Status>
 806ac98:	4603      	mov	r3, r0
 806ac9a:	2b00      	cmp	r3, #0
 806ac9c:	d1f2      	bne.n	806ac84 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 806ac9e:	7bfb      	ldrb	r3, [r7, #15]
 806aca0:	2bfe      	cmp	r3, #254	; 0xfe
 806aca2:	d001      	beq.n	806aca8 <rcvr_datablock+0x34>
 806aca4:	2300      	movs	r3, #0
 806aca6:	e00a      	b.n	806acbe <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 806aca8:	6839      	ldr	r1, [r7, #0]
 806acaa:	6878      	ldr	r0, [r7, #4]
 806acac:	f7ff ff60 	bl	806ab70 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 806acb0:	20ff      	movs	r0, #255	; 0xff
 806acb2:	f7ff ff47 	bl	806ab44 <xchg_spi>
 806acb6:	20ff      	movs	r0, #255	; 0xff
 806acb8:	f7ff ff44 	bl	806ab44 <xchg_spi>

	return 1;						/* Function succeeded */
 806acbc:	2301      	movs	r3, #1
}
 806acbe:	4618      	mov	r0, r3
 806acc0:	3710      	adds	r7, #16
 806acc2:	46bd      	mov	sp, r7
 806acc4:	bd80      	pop	{r7, pc}

0806acc6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 806acc6:	b580      	push	{r7, lr}
 806acc8:	b084      	sub	sp, #16
 806acca:	af00      	add	r7, sp, #0
 806accc:	6078      	str	r0, [r7, #4]
 806acce:	460b      	mov	r3, r1
 806acd0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 806acd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 806acd6:	f7ff ff82 	bl	806abde <wait_ready>
 806acda:	4603      	mov	r3, r0
 806acdc:	2b00      	cmp	r3, #0
 806acde:	d101      	bne.n	806ace4 <xmit_datablock+0x1e>
 806ace0:	2300      	movs	r3, #0
 806ace2:	e01e      	b.n	806ad22 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 806ace4:	78fb      	ldrb	r3, [r7, #3]
 806ace6:	4618      	mov	r0, r3
 806ace8:	f7ff ff2c 	bl	806ab44 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 806acec:	78fb      	ldrb	r3, [r7, #3]
 806acee:	2bfd      	cmp	r3, #253	; 0xfd
 806acf0:	d016      	beq.n	806ad20 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 806acf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 806acf6:	6878      	ldr	r0, [r7, #4]
 806acf8:	f7ff ff56 	bl	806aba8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 806acfc:	20ff      	movs	r0, #255	; 0xff
 806acfe:	f7ff ff21 	bl	806ab44 <xchg_spi>
 806ad02:	20ff      	movs	r0, #255	; 0xff
 806ad04:	f7ff ff1e 	bl	806ab44 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 806ad08:	20ff      	movs	r0, #255	; 0xff
 806ad0a:	f7ff ff1b 	bl	806ab44 <xchg_spi>
 806ad0e:	4603      	mov	r3, r0
 806ad10:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 806ad12:	7bfb      	ldrb	r3, [r7, #15]
 806ad14:	f003 031f 	and.w	r3, r3, #31
 806ad18:	2b05      	cmp	r3, #5
 806ad1a:	d001      	beq.n	806ad20 <xmit_datablock+0x5a>
 806ad1c:	2300      	movs	r3, #0
 806ad1e:	e000      	b.n	806ad22 <xmit_datablock+0x5c>
	}
	return 1;
 806ad20:	2301      	movs	r3, #1
}
 806ad22:	4618      	mov	r0, r3
 806ad24:	3710      	adds	r7, #16
 806ad26:	46bd      	mov	sp, r7
 806ad28:	bd80      	pop	{r7, pc}

0806ad2a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 806ad2a:	b580      	push	{r7, lr}
 806ad2c:	b084      	sub	sp, #16
 806ad2e:	af00      	add	r7, sp, #0
 806ad30:	4603      	mov	r3, r0
 806ad32:	6039      	str	r1, [r7, #0]
 806ad34:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 806ad36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806ad3a:	2b00      	cmp	r3, #0
 806ad3c:	da0e      	bge.n	806ad5c <send_cmd+0x32>
		cmd &= 0x7F;
 806ad3e:	79fb      	ldrb	r3, [r7, #7]
 806ad40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806ad44:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 806ad46:	2100      	movs	r1, #0
 806ad48:	2037      	movs	r0, #55	; 0x37
 806ad4a:	f7ff ffee 	bl	806ad2a <send_cmd>
 806ad4e:	4603      	mov	r3, r0
 806ad50:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 806ad52:	7bbb      	ldrb	r3, [r7, #14]
 806ad54:	2b01      	cmp	r3, #1
 806ad56:	d901      	bls.n	806ad5c <send_cmd+0x32>
 806ad58:	7bbb      	ldrb	r3, [r7, #14]
 806ad5a:	e051      	b.n	806ae00 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 806ad5c:	79fb      	ldrb	r3, [r7, #7]
 806ad5e:	2b0c      	cmp	r3, #12
 806ad60:	d008      	beq.n	806ad74 <send_cmd+0x4a>
		despiselect();
 806ad62:	f7ff ff5f 	bl	806ac24 <despiselect>
		if (!spiselect()) return 0xFF;
 806ad66:	f7ff ff6b 	bl	806ac40 <spiselect>
 806ad6a:	4603      	mov	r3, r0
 806ad6c:	2b00      	cmp	r3, #0
 806ad6e:	d101      	bne.n	806ad74 <send_cmd+0x4a>
 806ad70:	23ff      	movs	r3, #255	; 0xff
 806ad72:	e045      	b.n	806ae00 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 806ad74:	79fb      	ldrb	r3, [r7, #7]
 806ad76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806ad7a:	b2db      	uxtb	r3, r3
 806ad7c:	4618      	mov	r0, r3
 806ad7e:	f7ff fee1 	bl	806ab44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 806ad82:	683b      	ldr	r3, [r7, #0]
 806ad84:	0e1b      	lsrs	r3, r3, #24
 806ad86:	b2db      	uxtb	r3, r3
 806ad88:	4618      	mov	r0, r3
 806ad8a:	f7ff fedb 	bl	806ab44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 806ad8e:	683b      	ldr	r3, [r7, #0]
 806ad90:	0c1b      	lsrs	r3, r3, #16
 806ad92:	b2db      	uxtb	r3, r3
 806ad94:	4618      	mov	r0, r3
 806ad96:	f7ff fed5 	bl	806ab44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 806ad9a:	683b      	ldr	r3, [r7, #0]
 806ad9c:	0a1b      	lsrs	r3, r3, #8
 806ad9e:	b2db      	uxtb	r3, r3
 806ada0:	4618      	mov	r0, r3
 806ada2:	f7ff fecf 	bl	806ab44 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 806ada6:	683b      	ldr	r3, [r7, #0]
 806ada8:	b2db      	uxtb	r3, r3
 806adaa:	4618      	mov	r0, r3
 806adac:	f7ff feca 	bl	806ab44 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 806adb0:	2301      	movs	r3, #1
 806adb2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 806adb4:	79fb      	ldrb	r3, [r7, #7]
 806adb6:	2b00      	cmp	r3, #0
 806adb8:	d101      	bne.n	806adbe <send_cmd+0x94>
 806adba:	2395      	movs	r3, #149	; 0x95
 806adbc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 806adbe:	79fb      	ldrb	r3, [r7, #7]
 806adc0:	2b08      	cmp	r3, #8
 806adc2:	d101      	bne.n	806adc8 <send_cmd+0x9e>
 806adc4:	2387      	movs	r3, #135	; 0x87
 806adc6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 806adc8:	7bfb      	ldrb	r3, [r7, #15]
 806adca:	4618      	mov	r0, r3
 806adcc:	f7ff feba 	bl	806ab44 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 806add0:	79fb      	ldrb	r3, [r7, #7]
 806add2:	2b0c      	cmp	r3, #12
 806add4:	d102      	bne.n	806addc <send_cmd+0xb2>
 806add6:	20ff      	movs	r0, #255	; 0xff
 806add8:	f7ff feb4 	bl	806ab44 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 806addc:	230a      	movs	r3, #10
 806adde:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 806ade0:	20ff      	movs	r0, #255	; 0xff
 806ade2:	f7ff feaf 	bl	806ab44 <xchg_spi>
 806ade6:	4603      	mov	r3, r0
 806ade8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 806adea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 806adee:	2b00      	cmp	r3, #0
 806adf0:	da05      	bge.n	806adfe <send_cmd+0xd4>
 806adf2:	7bfb      	ldrb	r3, [r7, #15]
 806adf4:	3b01      	subs	r3, #1
 806adf6:	73fb      	strb	r3, [r7, #15]
 806adf8:	7bfb      	ldrb	r3, [r7, #15]
 806adfa:	2b00      	cmp	r3, #0
 806adfc:	d1f0      	bne.n	806ade0 <send_cmd+0xb6>

	return res;							/* Return received response */
 806adfe:	7bbb      	ldrb	r3, [r7, #14]
}
 806ae00:	4618      	mov	r0, r3
 806ae02:	3710      	adds	r7, #16
 806ae04:	46bd      	mov	sp, r7
 806ae06:	bd80      	pop	{r7, pc}

0806ae08 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 806ae08:	b590      	push	{r4, r7, lr}
 806ae0a:	b085      	sub	sp, #20
 806ae0c:	af00      	add	r7, sp, #0
 806ae0e:	4603      	mov	r3, r0
 806ae10:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 806ae12:	79fb      	ldrb	r3, [r7, #7]
 806ae14:	2b00      	cmp	r3, #0
 806ae16:	d001      	beq.n	806ae1c <USER_SPI_initialize+0x14>
 806ae18:	2301      	movs	r3, #1
 806ae1a:	e0d6      	b.n	806afca <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 806ae1c:	4b6d      	ldr	r3, [pc, #436]	; (806afd4 <USER_SPI_initialize+0x1cc>)
 806ae1e:	781b      	ldrb	r3, [r3, #0]
 806ae20:	b2db      	uxtb	r3, r3
 806ae22:	f003 0302 	and.w	r3, r3, #2
 806ae26:	2b00      	cmp	r3, #0
 806ae28:	d003      	beq.n	806ae32 <USER_SPI_initialize+0x2a>
 806ae2a:	4b6a      	ldr	r3, [pc, #424]	; (806afd4 <USER_SPI_initialize+0x1cc>)
 806ae2c:	781b      	ldrb	r3, [r3, #0]
 806ae2e:	b2db      	uxtb	r3, r3
 806ae30:	e0cb      	b.n	806afca <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 806ae32:	4b69      	ldr	r3, [pc, #420]	; (806afd8 <USER_SPI_initialize+0x1d0>)
 806ae34:	681b      	ldr	r3, [r3, #0]
 806ae36:	681b      	ldr	r3, [r3, #0]
 806ae38:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 806ae3c:	4b66      	ldr	r3, [pc, #408]	; (806afd8 <USER_SPI_initialize+0x1d0>)
 806ae3e:	681b      	ldr	r3, [r3, #0]
 806ae40:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 806ae44:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 806ae46:	230a      	movs	r3, #10
 806ae48:	73fb      	strb	r3, [r7, #15]
 806ae4a:	e005      	b.n	806ae58 <USER_SPI_initialize+0x50>
 806ae4c:	20ff      	movs	r0, #255	; 0xff
 806ae4e:	f7ff fe79 	bl	806ab44 <xchg_spi>
 806ae52:	7bfb      	ldrb	r3, [r7, #15]
 806ae54:	3b01      	subs	r3, #1
 806ae56:	73fb      	strb	r3, [r7, #15]
 806ae58:	7bfb      	ldrb	r3, [r7, #15]
 806ae5a:	2b00      	cmp	r3, #0
 806ae5c:	d1f6      	bne.n	806ae4c <USER_SPI_initialize+0x44>

	ty = 0;
 806ae5e:	2300      	movs	r3, #0
 806ae60:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 806ae62:	2100      	movs	r1, #0
 806ae64:	2000      	movs	r0, #0
 806ae66:	f7ff ff60 	bl	806ad2a <send_cmd>
 806ae6a:	4603      	mov	r3, r0
 806ae6c:	2b01      	cmp	r3, #1
 806ae6e:	f040 808b 	bne.w	806af88 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 806ae72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 806ae76:	f7ff fe3b 	bl	806aaf0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 806ae7a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 806ae7e:	2008      	movs	r0, #8
 806ae80:	f7ff ff53 	bl	806ad2a <send_cmd>
 806ae84:	4603      	mov	r3, r0
 806ae86:	2b01      	cmp	r3, #1
 806ae88:	d151      	bne.n	806af2e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 806ae8a:	2300      	movs	r3, #0
 806ae8c:	73fb      	strb	r3, [r7, #15]
 806ae8e:	e00d      	b.n	806aeac <USER_SPI_initialize+0xa4>
 806ae90:	7bfc      	ldrb	r4, [r7, #15]
 806ae92:	20ff      	movs	r0, #255	; 0xff
 806ae94:	f7ff fe56 	bl	806ab44 <xchg_spi>
 806ae98:	4603      	mov	r3, r0
 806ae9a:	461a      	mov	r2, r3
 806ae9c:	f107 0310 	add.w	r3, r7, #16
 806aea0:	4423      	add	r3, r4
 806aea2:	f803 2c08 	strb.w	r2, [r3, #-8]
 806aea6:	7bfb      	ldrb	r3, [r7, #15]
 806aea8:	3301      	adds	r3, #1
 806aeaa:	73fb      	strb	r3, [r7, #15]
 806aeac:	7bfb      	ldrb	r3, [r7, #15]
 806aeae:	2b03      	cmp	r3, #3
 806aeb0:	d9ee      	bls.n	806ae90 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 806aeb2:	7abb      	ldrb	r3, [r7, #10]
 806aeb4:	2b01      	cmp	r3, #1
 806aeb6:	d167      	bne.n	806af88 <USER_SPI_initialize+0x180>
 806aeb8:	7afb      	ldrb	r3, [r7, #11]
 806aeba:	2baa      	cmp	r3, #170	; 0xaa
 806aebc:	d164      	bne.n	806af88 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 806aebe:	bf00      	nop
 806aec0:	f7ff fe2a 	bl	806ab18 <SPI_Timer_Status>
 806aec4:	4603      	mov	r3, r0
 806aec6:	2b00      	cmp	r3, #0
 806aec8:	d007      	beq.n	806aeda <USER_SPI_initialize+0xd2>
 806aeca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 806aece:	20a9      	movs	r0, #169	; 0xa9
 806aed0:	f7ff ff2b 	bl	806ad2a <send_cmd>
 806aed4:	4603      	mov	r3, r0
 806aed6:	2b00      	cmp	r3, #0
 806aed8:	d1f2      	bne.n	806aec0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 806aeda:	f7ff fe1d 	bl	806ab18 <SPI_Timer_Status>
 806aede:	4603      	mov	r3, r0
 806aee0:	2b00      	cmp	r3, #0
 806aee2:	d051      	beq.n	806af88 <USER_SPI_initialize+0x180>
 806aee4:	2100      	movs	r1, #0
 806aee6:	203a      	movs	r0, #58	; 0x3a
 806aee8:	f7ff ff1f 	bl	806ad2a <send_cmd>
 806aeec:	4603      	mov	r3, r0
 806aeee:	2b00      	cmp	r3, #0
 806aef0:	d14a      	bne.n	806af88 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 806aef2:	2300      	movs	r3, #0
 806aef4:	73fb      	strb	r3, [r7, #15]
 806aef6:	e00d      	b.n	806af14 <USER_SPI_initialize+0x10c>
 806aef8:	7bfc      	ldrb	r4, [r7, #15]
 806aefa:	20ff      	movs	r0, #255	; 0xff
 806aefc:	f7ff fe22 	bl	806ab44 <xchg_spi>
 806af00:	4603      	mov	r3, r0
 806af02:	461a      	mov	r2, r3
 806af04:	f107 0310 	add.w	r3, r7, #16
 806af08:	4423      	add	r3, r4
 806af0a:	f803 2c08 	strb.w	r2, [r3, #-8]
 806af0e:	7bfb      	ldrb	r3, [r7, #15]
 806af10:	3301      	adds	r3, #1
 806af12:	73fb      	strb	r3, [r7, #15]
 806af14:	7bfb      	ldrb	r3, [r7, #15]
 806af16:	2b03      	cmp	r3, #3
 806af18:	d9ee      	bls.n	806aef8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 806af1a:	7a3b      	ldrb	r3, [r7, #8]
 806af1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806af20:	2b00      	cmp	r3, #0
 806af22:	d001      	beq.n	806af28 <USER_SPI_initialize+0x120>
 806af24:	230c      	movs	r3, #12
 806af26:	e000      	b.n	806af2a <USER_SPI_initialize+0x122>
 806af28:	2304      	movs	r3, #4
 806af2a:	737b      	strb	r3, [r7, #13]
 806af2c:	e02c      	b.n	806af88 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 806af2e:	2100      	movs	r1, #0
 806af30:	20a9      	movs	r0, #169	; 0xa9
 806af32:	f7ff fefa 	bl	806ad2a <send_cmd>
 806af36:	4603      	mov	r3, r0
 806af38:	2b01      	cmp	r3, #1
 806af3a:	d804      	bhi.n	806af46 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 806af3c:	2302      	movs	r3, #2
 806af3e:	737b      	strb	r3, [r7, #13]
 806af40:	23a9      	movs	r3, #169	; 0xa9
 806af42:	73bb      	strb	r3, [r7, #14]
 806af44:	e003      	b.n	806af4e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 806af46:	2301      	movs	r3, #1
 806af48:	737b      	strb	r3, [r7, #13]
 806af4a:	2301      	movs	r3, #1
 806af4c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 806af4e:	bf00      	nop
 806af50:	f7ff fde2 	bl	806ab18 <SPI_Timer_Status>
 806af54:	4603      	mov	r3, r0
 806af56:	2b00      	cmp	r3, #0
 806af58:	d007      	beq.n	806af6a <USER_SPI_initialize+0x162>
 806af5a:	7bbb      	ldrb	r3, [r7, #14]
 806af5c:	2100      	movs	r1, #0
 806af5e:	4618      	mov	r0, r3
 806af60:	f7ff fee3 	bl	806ad2a <send_cmd>
 806af64:	4603      	mov	r3, r0
 806af66:	2b00      	cmp	r3, #0
 806af68:	d1f2      	bne.n	806af50 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 806af6a:	f7ff fdd5 	bl	806ab18 <SPI_Timer_Status>
 806af6e:	4603      	mov	r3, r0
 806af70:	2b00      	cmp	r3, #0
 806af72:	d007      	beq.n	806af84 <USER_SPI_initialize+0x17c>
 806af74:	f44f 7100 	mov.w	r1, #512	; 0x200
 806af78:	2010      	movs	r0, #16
 806af7a:	f7ff fed6 	bl	806ad2a <send_cmd>
 806af7e:	4603      	mov	r3, r0
 806af80:	2b00      	cmp	r3, #0
 806af82:	d001      	beq.n	806af88 <USER_SPI_initialize+0x180>
				ty = 0;
 806af84:	2300      	movs	r3, #0
 806af86:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 806af88:	4a14      	ldr	r2, [pc, #80]	; (806afdc <USER_SPI_initialize+0x1d4>)
 806af8a:	7b7b      	ldrb	r3, [r7, #13]
 806af8c:	7013      	strb	r3, [r2, #0]
	despiselect();
 806af8e:	f7ff fe49 	bl	806ac24 <despiselect>

	if (ty) {			/* OK */
 806af92:	7b7b      	ldrb	r3, [r7, #13]
 806af94:	2b00      	cmp	r3, #0
 806af96:	d012      	beq.n	806afbe <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 806af98:	4b0f      	ldr	r3, [pc, #60]	; (806afd8 <USER_SPI_initialize+0x1d0>)
 806af9a:	681b      	ldr	r3, [r3, #0]
 806af9c:	681b      	ldr	r3, [r3, #0]
 806af9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 806afa2:	4b0d      	ldr	r3, [pc, #52]	; (806afd8 <USER_SPI_initialize+0x1d0>)
 806afa4:	681b      	ldr	r3, [r3, #0]
 806afa6:	f042 0210 	orr.w	r2, r2, #16
 806afaa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 806afac:	4b09      	ldr	r3, [pc, #36]	; (806afd4 <USER_SPI_initialize+0x1cc>)
 806afae:	781b      	ldrb	r3, [r3, #0]
 806afb0:	b2db      	uxtb	r3, r3
 806afb2:	f023 0301 	bic.w	r3, r3, #1
 806afb6:	b2da      	uxtb	r2, r3
 806afb8:	4b06      	ldr	r3, [pc, #24]	; (806afd4 <USER_SPI_initialize+0x1cc>)
 806afba:	701a      	strb	r2, [r3, #0]
 806afbc:	e002      	b.n	806afc4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 806afbe:	4b05      	ldr	r3, [pc, #20]	; (806afd4 <USER_SPI_initialize+0x1cc>)
 806afc0:	2201      	movs	r2, #1
 806afc2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 806afc4:	4b03      	ldr	r3, [pc, #12]	; (806afd4 <USER_SPI_initialize+0x1cc>)
 806afc6:	781b      	ldrb	r3, [r3, #0]
 806afc8:	b2db      	uxtb	r3, r3
}
 806afca:	4618      	mov	r0, r3
 806afcc:	3714      	adds	r7, #20
 806afce:	46bd      	mov	sp, r7
 806afd0:	bd90      	pop	{r4, r7, pc}
 806afd2:	bf00      	nop
 806afd4:	20000020 	.word	0x20000020
 806afd8:	20005730 	.word	0x20005730
 806afdc:	20000420 	.word	0x20000420

0806afe0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 806afe0:	b480      	push	{r7}
 806afe2:	b083      	sub	sp, #12
 806afe4:	af00      	add	r7, sp, #0
 806afe6:	4603      	mov	r3, r0
 806afe8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 806afea:	79fb      	ldrb	r3, [r7, #7]
 806afec:	2b00      	cmp	r3, #0
 806afee:	d001      	beq.n	806aff4 <USER_SPI_status+0x14>
 806aff0:	2301      	movs	r3, #1
 806aff2:	e002      	b.n	806affa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 806aff4:	4b04      	ldr	r3, [pc, #16]	; (806b008 <USER_SPI_status+0x28>)
 806aff6:	781b      	ldrb	r3, [r3, #0]
 806aff8:	b2db      	uxtb	r3, r3
}
 806affa:	4618      	mov	r0, r3
 806affc:	370c      	adds	r7, #12
 806affe:	46bd      	mov	sp, r7
 806b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b004:	4770      	bx	lr
 806b006:	bf00      	nop
 806b008:	20000020 	.word	0x20000020

0806b00c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 806b00c:	b580      	push	{r7, lr}
 806b00e:	b084      	sub	sp, #16
 806b010:	af00      	add	r7, sp, #0
 806b012:	60b9      	str	r1, [r7, #8]
 806b014:	607a      	str	r2, [r7, #4]
 806b016:	603b      	str	r3, [r7, #0]
 806b018:	4603      	mov	r3, r0
 806b01a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 806b01c:	7bfb      	ldrb	r3, [r7, #15]
 806b01e:	2b00      	cmp	r3, #0
 806b020:	d102      	bne.n	806b028 <USER_SPI_read+0x1c>
 806b022:	683b      	ldr	r3, [r7, #0]
 806b024:	2b00      	cmp	r3, #0
 806b026:	d101      	bne.n	806b02c <USER_SPI_read+0x20>
 806b028:	2304      	movs	r3, #4
 806b02a:	e04d      	b.n	806b0c8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 806b02c:	4b28      	ldr	r3, [pc, #160]	; (806b0d0 <USER_SPI_read+0xc4>)
 806b02e:	781b      	ldrb	r3, [r3, #0]
 806b030:	b2db      	uxtb	r3, r3
 806b032:	f003 0301 	and.w	r3, r3, #1
 806b036:	2b00      	cmp	r3, #0
 806b038:	d001      	beq.n	806b03e <USER_SPI_read+0x32>
 806b03a:	2303      	movs	r3, #3
 806b03c:	e044      	b.n	806b0c8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 806b03e:	4b25      	ldr	r3, [pc, #148]	; (806b0d4 <USER_SPI_read+0xc8>)
 806b040:	781b      	ldrb	r3, [r3, #0]
 806b042:	f003 0308 	and.w	r3, r3, #8
 806b046:	2b00      	cmp	r3, #0
 806b048:	d102      	bne.n	806b050 <USER_SPI_read+0x44>
 806b04a:	687b      	ldr	r3, [r7, #4]
 806b04c:	025b      	lsls	r3, r3, #9
 806b04e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 806b050:	683b      	ldr	r3, [r7, #0]
 806b052:	2b01      	cmp	r3, #1
 806b054:	d111      	bne.n	806b07a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 806b056:	6879      	ldr	r1, [r7, #4]
 806b058:	2011      	movs	r0, #17
 806b05a:	f7ff fe66 	bl	806ad2a <send_cmd>
 806b05e:	4603      	mov	r3, r0
 806b060:	2b00      	cmp	r3, #0
 806b062:	d129      	bne.n	806b0b8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 806b064:	f44f 7100 	mov.w	r1, #512	; 0x200
 806b068:	68b8      	ldr	r0, [r7, #8]
 806b06a:	f7ff fe03 	bl	806ac74 <rcvr_datablock>
 806b06e:	4603      	mov	r3, r0
 806b070:	2b00      	cmp	r3, #0
 806b072:	d021      	beq.n	806b0b8 <USER_SPI_read+0xac>
			count = 0;
 806b074:	2300      	movs	r3, #0
 806b076:	603b      	str	r3, [r7, #0]
 806b078:	e01e      	b.n	806b0b8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 806b07a:	6879      	ldr	r1, [r7, #4]
 806b07c:	2012      	movs	r0, #18
 806b07e:	f7ff fe54 	bl	806ad2a <send_cmd>
 806b082:	4603      	mov	r3, r0
 806b084:	2b00      	cmp	r3, #0
 806b086:	d117      	bne.n	806b0b8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 806b088:	f44f 7100 	mov.w	r1, #512	; 0x200
 806b08c:	68b8      	ldr	r0, [r7, #8]
 806b08e:	f7ff fdf1 	bl	806ac74 <rcvr_datablock>
 806b092:	4603      	mov	r3, r0
 806b094:	2b00      	cmp	r3, #0
 806b096:	d00a      	beq.n	806b0ae <USER_SPI_read+0xa2>
				buff += 512;
 806b098:	68bb      	ldr	r3, [r7, #8]
 806b09a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 806b09e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 806b0a0:	683b      	ldr	r3, [r7, #0]
 806b0a2:	3b01      	subs	r3, #1
 806b0a4:	603b      	str	r3, [r7, #0]
 806b0a6:	683b      	ldr	r3, [r7, #0]
 806b0a8:	2b00      	cmp	r3, #0
 806b0aa:	d1ed      	bne.n	806b088 <USER_SPI_read+0x7c>
 806b0ac:	e000      	b.n	806b0b0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 806b0ae:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 806b0b0:	2100      	movs	r1, #0
 806b0b2:	200c      	movs	r0, #12
 806b0b4:	f7ff fe39 	bl	806ad2a <send_cmd>
		}
	}
	despiselect();
 806b0b8:	f7ff fdb4 	bl	806ac24 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 806b0bc:	683b      	ldr	r3, [r7, #0]
 806b0be:	2b00      	cmp	r3, #0
 806b0c0:	bf14      	ite	ne
 806b0c2:	2301      	movne	r3, #1
 806b0c4:	2300      	moveq	r3, #0
 806b0c6:	b2db      	uxtb	r3, r3
}
 806b0c8:	4618      	mov	r0, r3
 806b0ca:	3710      	adds	r7, #16
 806b0cc:	46bd      	mov	sp, r7
 806b0ce:	bd80      	pop	{r7, pc}
 806b0d0:	20000020 	.word	0x20000020
 806b0d4:	20000420 	.word	0x20000420

0806b0d8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 806b0d8:	b580      	push	{r7, lr}
 806b0da:	b084      	sub	sp, #16
 806b0dc:	af00      	add	r7, sp, #0
 806b0de:	60b9      	str	r1, [r7, #8]
 806b0e0:	607a      	str	r2, [r7, #4]
 806b0e2:	603b      	str	r3, [r7, #0]
 806b0e4:	4603      	mov	r3, r0
 806b0e6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 806b0e8:	7bfb      	ldrb	r3, [r7, #15]
 806b0ea:	2b00      	cmp	r3, #0
 806b0ec:	d102      	bne.n	806b0f4 <USER_SPI_write+0x1c>
 806b0ee:	683b      	ldr	r3, [r7, #0]
 806b0f0:	2b00      	cmp	r3, #0
 806b0f2:	d101      	bne.n	806b0f8 <USER_SPI_write+0x20>
 806b0f4:	2304      	movs	r3, #4
 806b0f6:	e063      	b.n	806b1c0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 806b0f8:	4b33      	ldr	r3, [pc, #204]	; (806b1c8 <USER_SPI_write+0xf0>)
 806b0fa:	781b      	ldrb	r3, [r3, #0]
 806b0fc:	b2db      	uxtb	r3, r3
 806b0fe:	f003 0301 	and.w	r3, r3, #1
 806b102:	2b00      	cmp	r3, #0
 806b104:	d001      	beq.n	806b10a <USER_SPI_write+0x32>
 806b106:	2303      	movs	r3, #3
 806b108:	e05a      	b.n	806b1c0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 806b10a:	4b2f      	ldr	r3, [pc, #188]	; (806b1c8 <USER_SPI_write+0xf0>)
 806b10c:	781b      	ldrb	r3, [r3, #0]
 806b10e:	b2db      	uxtb	r3, r3
 806b110:	f003 0304 	and.w	r3, r3, #4
 806b114:	2b00      	cmp	r3, #0
 806b116:	d001      	beq.n	806b11c <USER_SPI_write+0x44>
 806b118:	2302      	movs	r3, #2
 806b11a:	e051      	b.n	806b1c0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 806b11c:	4b2b      	ldr	r3, [pc, #172]	; (806b1cc <USER_SPI_write+0xf4>)
 806b11e:	781b      	ldrb	r3, [r3, #0]
 806b120:	f003 0308 	and.w	r3, r3, #8
 806b124:	2b00      	cmp	r3, #0
 806b126:	d102      	bne.n	806b12e <USER_SPI_write+0x56>
 806b128:	687b      	ldr	r3, [r7, #4]
 806b12a:	025b      	lsls	r3, r3, #9
 806b12c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 806b12e:	683b      	ldr	r3, [r7, #0]
 806b130:	2b01      	cmp	r3, #1
 806b132:	d110      	bne.n	806b156 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 806b134:	6879      	ldr	r1, [r7, #4]
 806b136:	2018      	movs	r0, #24
 806b138:	f7ff fdf7 	bl	806ad2a <send_cmd>
 806b13c:	4603      	mov	r3, r0
 806b13e:	2b00      	cmp	r3, #0
 806b140:	d136      	bne.n	806b1b0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 806b142:	21fe      	movs	r1, #254	; 0xfe
 806b144:	68b8      	ldr	r0, [r7, #8]
 806b146:	f7ff fdbe 	bl	806acc6 <xmit_datablock>
 806b14a:	4603      	mov	r3, r0
 806b14c:	2b00      	cmp	r3, #0
 806b14e:	d02f      	beq.n	806b1b0 <USER_SPI_write+0xd8>
			count = 0;
 806b150:	2300      	movs	r3, #0
 806b152:	603b      	str	r3, [r7, #0]
 806b154:	e02c      	b.n	806b1b0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 806b156:	4b1d      	ldr	r3, [pc, #116]	; (806b1cc <USER_SPI_write+0xf4>)
 806b158:	781b      	ldrb	r3, [r3, #0]
 806b15a:	f003 0306 	and.w	r3, r3, #6
 806b15e:	2b00      	cmp	r3, #0
 806b160:	d003      	beq.n	806b16a <USER_SPI_write+0x92>
 806b162:	6839      	ldr	r1, [r7, #0]
 806b164:	2097      	movs	r0, #151	; 0x97
 806b166:	f7ff fde0 	bl	806ad2a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 806b16a:	6879      	ldr	r1, [r7, #4]
 806b16c:	2019      	movs	r0, #25
 806b16e:	f7ff fddc 	bl	806ad2a <send_cmd>
 806b172:	4603      	mov	r3, r0
 806b174:	2b00      	cmp	r3, #0
 806b176:	d11b      	bne.n	806b1b0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 806b178:	21fc      	movs	r1, #252	; 0xfc
 806b17a:	68b8      	ldr	r0, [r7, #8]
 806b17c:	f7ff fda3 	bl	806acc6 <xmit_datablock>
 806b180:	4603      	mov	r3, r0
 806b182:	2b00      	cmp	r3, #0
 806b184:	d00a      	beq.n	806b19c <USER_SPI_write+0xc4>
				buff += 512;
 806b186:	68bb      	ldr	r3, [r7, #8]
 806b188:	f503 7300 	add.w	r3, r3, #512	; 0x200
 806b18c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 806b18e:	683b      	ldr	r3, [r7, #0]
 806b190:	3b01      	subs	r3, #1
 806b192:	603b      	str	r3, [r7, #0]
 806b194:	683b      	ldr	r3, [r7, #0]
 806b196:	2b00      	cmp	r3, #0
 806b198:	d1ee      	bne.n	806b178 <USER_SPI_write+0xa0>
 806b19a:	e000      	b.n	806b19e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 806b19c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 806b19e:	21fd      	movs	r1, #253	; 0xfd
 806b1a0:	2000      	movs	r0, #0
 806b1a2:	f7ff fd90 	bl	806acc6 <xmit_datablock>
 806b1a6:	4603      	mov	r3, r0
 806b1a8:	2b00      	cmp	r3, #0
 806b1aa:	d101      	bne.n	806b1b0 <USER_SPI_write+0xd8>
 806b1ac:	2301      	movs	r3, #1
 806b1ae:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 806b1b0:	f7ff fd38 	bl	806ac24 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 806b1b4:	683b      	ldr	r3, [r7, #0]
 806b1b6:	2b00      	cmp	r3, #0
 806b1b8:	bf14      	ite	ne
 806b1ba:	2301      	movne	r3, #1
 806b1bc:	2300      	moveq	r3, #0
 806b1be:	b2db      	uxtb	r3, r3
}
 806b1c0:	4618      	mov	r0, r3
 806b1c2:	3710      	adds	r7, #16
 806b1c4:	46bd      	mov	sp, r7
 806b1c6:	bd80      	pop	{r7, pc}
 806b1c8:	20000020 	.word	0x20000020
 806b1cc:	20000420 	.word	0x20000420

0806b1d0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 806b1d0:	b580      	push	{r7, lr}
 806b1d2:	b08c      	sub	sp, #48	; 0x30
 806b1d4:	af00      	add	r7, sp, #0
 806b1d6:	4603      	mov	r3, r0
 806b1d8:	603a      	str	r2, [r7, #0]
 806b1da:	71fb      	strb	r3, [r7, #7]
 806b1dc:	460b      	mov	r3, r1
 806b1de:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 806b1e0:	79fb      	ldrb	r3, [r7, #7]
 806b1e2:	2b00      	cmp	r3, #0
 806b1e4:	d001      	beq.n	806b1ea <USER_SPI_ioctl+0x1a>
 806b1e6:	2304      	movs	r3, #4
 806b1e8:	e15a      	b.n	806b4a0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 806b1ea:	4baf      	ldr	r3, [pc, #700]	; (806b4a8 <USER_SPI_ioctl+0x2d8>)
 806b1ec:	781b      	ldrb	r3, [r3, #0]
 806b1ee:	b2db      	uxtb	r3, r3
 806b1f0:	f003 0301 	and.w	r3, r3, #1
 806b1f4:	2b00      	cmp	r3, #0
 806b1f6:	d001      	beq.n	806b1fc <USER_SPI_ioctl+0x2c>
 806b1f8:	2303      	movs	r3, #3
 806b1fa:	e151      	b.n	806b4a0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 806b1fc:	2301      	movs	r3, #1
 806b1fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 806b202:	79bb      	ldrb	r3, [r7, #6]
 806b204:	2b04      	cmp	r3, #4
 806b206:	f200 8136 	bhi.w	806b476 <USER_SPI_ioctl+0x2a6>
 806b20a:	a201      	add	r2, pc, #4	; (adr r2, 806b210 <USER_SPI_ioctl+0x40>)
 806b20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806b210:	0806b225 	.word	0x0806b225
 806b214:	0806b239 	.word	0x0806b239
 806b218:	0806b477 	.word	0x0806b477
 806b21c:	0806b2e5 	.word	0x0806b2e5
 806b220:	0806b3db 	.word	0x0806b3db
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 806b224:	f7ff fd0c 	bl	806ac40 <spiselect>
 806b228:	4603      	mov	r3, r0
 806b22a:	2b00      	cmp	r3, #0
 806b22c:	f000 8127 	beq.w	806b47e <USER_SPI_ioctl+0x2ae>
 806b230:	2300      	movs	r3, #0
 806b232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 806b236:	e122      	b.n	806b47e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 806b238:	2100      	movs	r1, #0
 806b23a:	2009      	movs	r0, #9
 806b23c:	f7ff fd75 	bl	806ad2a <send_cmd>
 806b240:	4603      	mov	r3, r0
 806b242:	2b00      	cmp	r3, #0
 806b244:	f040 811d 	bne.w	806b482 <USER_SPI_ioctl+0x2b2>
 806b248:	f107 030c 	add.w	r3, r7, #12
 806b24c:	2110      	movs	r1, #16
 806b24e:	4618      	mov	r0, r3
 806b250:	f7ff fd10 	bl	806ac74 <rcvr_datablock>
 806b254:	4603      	mov	r3, r0
 806b256:	2b00      	cmp	r3, #0
 806b258:	f000 8113 	beq.w	806b482 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 806b25c:	7b3b      	ldrb	r3, [r7, #12]
 806b25e:	099b      	lsrs	r3, r3, #6
 806b260:	b2db      	uxtb	r3, r3
 806b262:	2b01      	cmp	r3, #1
 806b264:	d111      	bne.n	806b28a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 806b266:	7d7b      	ldrb	r3, [r7, #21]
 806b268:	461a      	mov	r2, r3
 806b26a:	7d3b      	ldrb	r3, [r7, #20]
 806b26c:	021b      	lsls	r3, r3, #8
 806b26e:	4413      	add	r3, r2
 806b270:	461a      	mov	r2, r3
 806b272:	7cfb      	ldrb	r3, [r7, #19]
 806b274:	041b      	lsls	r3, r3, #16
 806b276:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 806b27a:	4413      	add	r3, r2
 806b27c:	3301      	adds	r3, #1
 806b27e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 806b280:	69fb      	ldr	r3, [r7, #28]
 806b282:	029a      	lsls	r2, r3, #10
 806b284:	683b      	ldr	r3, [r7, #0]
 806b286:	601a      	str	r2, [r3, #0]
 806b288:	e028      	b.n	806b2dc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 806b28a:	7c7b      	ldrb	r3, [r7, #17]
 806b28c:	f003 030f 	and.w	r3, r3, #15
 806b290:	b2da      	uxtb	r2, r3
 806b292:	7dbb      	ldrb	r3, [r7, #22]
 806b294:	09db      	lsrs	r3, r3, #7
 806b296:	b2db      	uxtb	r3, r3
 806b298:	4413      	add	r3, r2
 806b29a:	b2da      	uxtb	r2, r3
 806b29c:	7d7b      	ldrb	r3, [r7, #21]
 806b29e:	005b      	lsls	r3, r3, #1
 806b2a0:	b2db      	uxtb	r3, r3
 806b2a2:	f003 0306 	and.w	r3, r3, #6
 806b2a6:	b2db      	uxtb	r3, r3
 806b2a8:	4413      	add	r3, r2
 806b2aa:	b2db      	uxtb	r3, r3
 806b2ac:	3302      	adds	r3, #2
 806b2ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 806b2b2:	7d3b      	ldrb	r3, [r7, #20]
 806b2b4:	099b      	lsrs	r3, r3, #6
 806b2b6:	b2db      	uxtb	r3, r3
 806b2b8:	461a      	mov	r2, r3
 806b2ba:	7cfb      	ldrb	r3, [r7, #19]
 806b2bc:	009b      	lsls	r3, r3, #2
 806b2be:	441a      	add	r2, r3
 806b2c0:	7cbb      	ldrb	r3, [r7, #18]
 806b2c2:	029b      	lsls	r3, r3, #10
 806b2c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 806b2c8:	4413      	add	r3, r2
 806b2ca:	3301      	adds	r3, #1
 806b2cc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 806b2ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 806b2d2:	3b09      	subs	r3, #9
 806b2d4:	69fa      	ldr	r2, [r7, #28]
 806b2d6:	409a      	lsls	r2, r3
 806b2d8:	683b      	ldr	r3, [r7, #0]
 806b2da:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 806b2dc:	2300      	movs	r3, #0
 806b2de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 806b2e2:	e0ce      	b.n	806b482 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 806b2e4:	4b71      	ldr	r3, [pc, #452]	; (806b4ac <USER_SPI_ioctl+0x2dc>)
 806b2e6:	781b      	ldrb	r3, [r3, #0]
 806b2e8:	f003 0304 	and.w	r3, r3, #4
 806b2ec:	2b00      	cmp	r3, #0
 806b2ee:	d031      	beq.n	806b354 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 806b2f0:	2100      	movs	r1, #0
 806b2f2:	208d      	movs	r0, #141	; 0x8d
 806b2f4:	f7ff fd19 	bl	806ad2a <send_cmd>
 806b2f8:	4603      	mov	r3, r0
 806b2fa:	2b00      	cmp	r3, #0
 806b2fc:	f040 80c3 	bne.w	806b486 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 806b300:	20ff      	movs	r0, #255	; 0xff
 806b302:	f7ff fc1f 	bl	806ab44 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 806b306:	f107 030c 	add.w	r3, r7, #12
 806b30a:	2110      	movs	r1, #16
 806b30c:	4618      	mov	r0, r3
 806b30e:	f7ff fcb1 	bl	806ac74 <rcvr_datablock>
 806b312:	4603      	mov	r3, r0
 806b314:	2b00      	cmp	r3, #0
 806b316:	f000 80b6 	beq.w	806b486 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 806b31a:	2330      	movs	r3, #48	; 0x30
 806b31c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 806b320:	e007      	b.n	806b332 <USER_SPI_ioctl+0x162>
 806b322:	20ff      	movs	r0, #255	; 0xff
 806b324:	f7ff fc0e 	bl	806ab44 <xchg_spi>
 806b328:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 806b32c:	3b01      	subs	r3, #1
 806b32e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 806b332:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 806b336:	2b00      	cmp	r3, #0
 806b338:	d1f3      	bne.n	806b322 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 806b33a:	7dbb      	ldrb	r3, [r7, #22]
 806b33c:	091b      	lsrs	r3, r3, #4
 806b33e:	b2db      	uxtb	r3, r3
 806b340:	461a      	mov	r2, r3
 806b342:	2310      	movs	r3, #16
 806b344:	fa03 f202 	lsl.w	r2, r3, r2
 806b348:	683b      	ldr	r3, [r7, #0]
 806b34a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 806b34c:	2300      	movs	r3, #0
 806b34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 806b352:	e098      	b.n	806b486 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 806b354:	2100      	movs	r1, #0
 806b356:	2009      	movs	r0, #9
 806b358:	f7ff fce7 	bl	806ad2a <send_cmd>
 806b35c:	4603      	mov	r3, r0
 806b35e:	2b00      	cmp	r3, #0
 806b360:	f040 8091 	bne.w	806b486 <USER_SPI_ioctl+0x2b6>
 806b364:	f107 030c 	add.w	r3, r7, #12
 806b368:	2110      	movs	r1, #16
 806b36a:	4618      	mov	r0, r3
 806b36c:	f7ff fc82 	bl	806ac74 <rcvr_datablock>
 806b370:	4603      	mov	r3, r0
 806b372:	2b00      	cmp	r3, #0
 806b374:	f000 8087 	beq.w	806b486 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 806b378:	4b4c      	ldr	r3, [pc, #304]	; (806b4ac <USER_SPI_ioctl+0x2dc>)
 806b37a:	781b      	ldrb	r3, [r3, #0]
 806b37c:	f003 0302 	and.w	r3, r3, #2
 806b380:	2b00      	cmp	r3, #0
 806b382:	d012      	beq.n	806b3aa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 806b384:	7dbb      	ldrb	r3, [r7, #22]
 806b386:	005b      	lsls	r3, r3, #1
 806b388:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 806b38c:	7dfa      	ldrb	r2, [r7, #23]
 806b38e:	09d2      	lsrs	r2, r2, #7
 806b390:	b2d2      	uxtb	r2, r2
 806b392:	4413      	add	r3, r2
 806b394:	1c5a      	adds	r2, r3, #1
 806b396:	7e7b      	ldrb	r3, [r7, #25]
 806b398:	099b      	lsrs	r3, r3, #6
 806b39a:	b2db      	uxtb	r3, r3
 806b39c:	3b01      	subs	r3, #1
 806b39e:	fa02 f303 	lsl.w	r3, r2, r3
 806b3a2:	461a      	mov	r2, r3
 806b3a4:	683b      	ldr	r3, [r7, #0]
 806b3a6:	601a      	str	r2, [r3, #0]
 806b3a8:	e013      	b.n	806b3d2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 806b3aa:	7dbb      	ldrb	r3, [r7, #22]
 806b3ac:	109b      	asrs	r3, r3, #2
 806b3ae:	b29b      	uxth	r3, r3
 806b3b0:	f003 031f 	and.w	r3, r3, #31
 806b3b4:	3301      	adds	r3, #1
 806b3b6:	7dfa      	ldrb	r2, [r7, #23]
 806b3b8:	00d2      	lsls	r2, r2, #3
 806b3ba:	f002 0218 	and.w	r2, r2, #24
 806b3be:	7df9      	ldrb	r1, [r7, #23]
 806b3c0:	0949      	lsrs	r1, r1, #5
 806b3c2:	b2c9      	uxtb	r1, r1
 806b3c4:	440a      	add	r2, r1
 806b3c6:	3201      	adds	r2, #1
 806b3c8:	fb02 f303 	mul.w	r3, r2, r3
 806b3cc:	461a      	mov	r2, r3
 806b3ce:	683b      	ldr	r3, [r7, #0]
 806b3d0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 806b3d2:	2300      	movs	r3, #0
 806b3d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 806b3d8:	e055      	b.n	806b486 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 806b3da:	4b34      	ldr	r3, [pc, #208]	; (806b4ac <USER_SPI_ioctl+0x2dc>)
 806b3dc:	781b      	ldrb	r3, [r3, #0]
 806b3de:	f003 0306 	and.w	r3, r3, #6
 806b3e2:	2b00      	cmp	r3, #0
 806b3e4:	d051      	beq.n	806b48a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 806b3e6:	f107 020c 	add.w	r2, r7, #12
 806b3ea:	79fb      	ldrb	r3, [r7, #7]
 806b3ec:	210b      	movs	r1, #11
 806b3ee:	4618      	mov	r0, r3
 806b3f0:	f7ff feee 	bl	806b1d0 <USER_SPI_ioctl>
 806b3f4:	4603      	mov	r3, r0
 806b3f6:	2b00      	cmp	r3, #0
 806b3f8:	d149      	bne.n	806b48e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 806b3fa:	7b3b      	ldrb	r3, [r7, #12]
 806b3fc:	099b      	lsrs	r3, r3, #6
 806b3fe:	b2db      	uxtb	r3, r3
 806b400:	2b00      	cmp	r3, #0
 806b402:	d104      	bne.n	806b40e <USER_SPI_ioctl+0x23e>
 806b404:	7dbb      	ldrb	r3, [r7, #22]
 806b406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806b40a:	2b00      	cmp	r3, #0
 806b40c:	d041      	beq.n	806b492 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 806b40e:	683b      	ldr	r3, [r7, #0]
 806b410:	623b      	str	r3, [r7, #32]
 806b412:	6a3b      	ldr	r3, [r7, #32]
 806b414:	681b      	ldr	r3, [r3, #0]
 806b416:	62bb      	str	r3, [r7, #40]	; 0x28
 806b418:	6a3b      	ldr	r3, [r7, #32]
 806b41a:	685b      	ldr	r3, [r3, #4]
 806b41c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 806b41e:	4b23      	ldr	r3, [pc, #140]	; (806b4ac <USER_SPI_ioctl+0x2dc>)
 806b420:	781b      	ldrb	r3, [r3, #0]
 806b422:	f003 0308 	and.w	r3, r3, #8
 806b426:	2b00      	cmp	r3, #0
 806b428:	d105      	bne.n	806b436 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 806b42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806b42c:	025b      	lsls	r3, r3, #9
 806b42e:	62bb      	str	r3, [r7, #40]	; 0x28
 806b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806b432:	025b      	lsls	r3, r3, #9
 806b434:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 806b436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 806b438:	2020      	movs	r0, #32
 806b43a:	f7ff fc76 	bl	806ad2a <send_cmd>
 806b43e:	4603      	mov	r3, r0
 806b440:	2b00      	cmp	r3, #0
 806b442:	d128      	bne.n	806b496 <USER_SPI_ioctl+0x2c6>
 806b444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806b446:	2021      	movs	r0, #33	; 0x21
 806b448:	f7ff fc6f 	bl	806ad2a <send_cmd>
 806b44c:	4603      	mov	r3, r0
 806b44e:	2b00      	cmp	r3, #0
 806b450:	d121      	bne.n	806b496 <USER_SPI_ioctl+0x2c6>
 806b452:	2100      	movs	r1, #0
 806b454:	2026      	movs	r0, #38	; 0x26
 806b456:	f7ff fc68 	bl	806ad2a <send_cmd>
 806b45a:	4603      	mov	r3, r0
 806b45c:	2b00      	cmp	r3, #0
 806b45e:	d11a      	bne.n	806b496 <USER_SPI_ioctl+0x2c6>
 806b460:	f247 5030 	movw	r0, #30000	; 0x7530
 806b464:	f7ff fbbb 	bl	806abde <wait_ready>
 806b468:	4603      	mov	r3, r0
 806b46a:	2b00      	cmp	r3, #0
 806b46c:	d013      	beq.n	806b496 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 806b46e:	2300      	movs	r3, #0
 806b470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 806b474:	e00f      	b.n	806b496 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 806b476:	2304      	movs	r3, #4
 806b478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 806b47c:	e00c      	b.n	806b498 <USER_SPI_ioctl+0x2c8>
		break;
 806b47e:	bf00      	nop
 806b480:	e00a      	b.n	806b498 <USER_SPI_ioctl+0x2c8>
		break;
 806b482:	bf00      	nop
 806b484:	e008      	b.n	806b498 <USER_SPI_ioctl+0x2c8>
		break;
 806b486:	bf00      	nop
 806b488:	e006      	b.n	806b498 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 806b48a:	bf00      	nop
 806b48c:	e004      	b.n	806b498 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 806b48e:	bf00      	nop
 806b490:	e002      	b.n	806b498 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 806b492:	bf00      	nop
 806b494:	e000      	b.n	806b498 <USER_SPI_ioctl+0x2c8>
		break;
 806b496:	bf00      	nop
	}

	despiselect();
 806b498:	f7ff fbc4 	bl	806ac24 <despiselect>

	return res;
 806b49c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 806b4a0:	4618      	mov	r0, r3
 806b4a2:	3730      	adds	r7, #48	; 0x30
 806b4a4:	46bd      	mov	sp, r7
 806b4a6:	bd80      	pop	{r7, pc}
 806b4a8:	20000020 	.word	0x20000020
 806b4ac:	20000420 	.word	0x20000420

0806b4b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 806b4b0:	b580      	push	{r7, lr}
 806b4b2:	b084      	sub	sp, #16
 806b4b4:	af00      	add	r7, sp, #0
 806b4b6:	4603      	mov	r3, r0
 806b4b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 806b4ba:	79fb      	ldrb	r3, [r7, #7]
 806b4bc:	4a08      	ldr	r2, [pc, #32]	; (806b4e0 <disk_status+0x30>)
 806b4be:	009b      	lsls	r3, r3, #2
 806b4c0:	4413      	add	r3, r2
 806b4c2:	685b      	ldr	r3, [r3, #4]
 806b4c4:	685b      	ldr	r3, [r3, #4]
 806b4c6:	79fa      	ldrb	r2, [r7, #7]
 806b4c8:	4905      	ldr	r1, [pc, #20]	; (806b4e0 <disk_status+0x30>)
 806b4ca:	440a      	add	r2, r1
 806b4cc:	7a12      	ldrb	r2, [r2, #8]
 806b4ce:	4610      	mov	r0, r2
 806b4d0:	4798      	blx	r3
 806b4d2:	4603      	mov	r3, r0
 806b4d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 806b4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 806b4d8:	4618      	mov	r0, r3
 806b4da:	3710      	adds	r7, #16
 806b4dc:	46bd      	mov	sp, r7
 806b4de:	bd80      	pop	{r7, pc}
 806b4e0:	2000044c 	.word	0x2000044c

0806b4e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 806b4e4:	b580      	push	{r7, lr}
 806b4e6:	b084      	sub	sp, #16
 806b4e8:	af00      	add	r7, sp, #0
 806b4ea:	4603      	mov	r3, r0
 806b4ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 806b4ee:	2300      	movs	r3, #0
 806b4f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 806b4f2:	79fb      	ldrb	r3, [r7, #7]
 806b4f4:	4a0d      	ldr	r2, [pc, #52]	; (806b52c <disk_initialize+0x48>)
 806b4f6:	5cd3      	ldrb	r3, [r2, r3]
 806b4f8:	2b00      	cmp	r3, #0
 806b4fa:	d111      	bne.n	806b520 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 806b4fc:	79fb      	ldrb	r3, [r7, #7]
 806b4fe:	4a0b      	ldr	r2, [pc, #44]	; (806b52c <disk_initialize+0x48>)
 806b500:	2101      	movs	r1, #1
 806b502:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 806b504:	79fb      	ldrb	r3, [r7, #7]
 806b506:	4a09      	ldr	r2, [pc, #36]	; (806b52c <disk_initialize+0x48>)
 806b508:	009b      	lsls	r3, r3, #2
 806b50a:	4413      	add	r3, r2
 806b50c:	685b      	ldr	r3, [r3, #4]
 806b50e:	681b      	ldr	r3, [r3, #0]
 806b510:	79fa      	ldrb	r2, [r7, #7]
 806b512:	4906      	ldr	r1, [pc, #24]	; (806b52c <disk_initialize+0x48>)
 806b514:	440a      	add	r2, r1
 806b516:	7a12      	ldrb	r2, [r2, #8]
 806b518:	4610      	mov	r0, r2
 806b51a:	4798      	blx	r3
 806b51c:	4603      	mov	r3, r0
 806b51e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 806b520:	7bfb      	ldrb	r3, [r7, #15]
}
 806b522:	4618      	mov	r0, r3
 806b524:	3710      	adds	r7, #16
 806b526:	46bd      	mov	sp, r7
 806b528:	bd80      	pop	{r7, pc}
 806b52a:	bf00      	nop
 806b52c:	2000044c 	.word	0x2000044c

0806b530 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 806b530:	b590      	push	{r4, r7, lr}
 806b532:	b087      	sub	sp, #28
 806b534:	af00      	add	r7, sp, #0
 806b536:	60b9      	str	r1, [r7, #8]
 806b538:	607a      	str	r2, [r7, #4]
 806b53a:	603b      	str	r3, [r7, #0]
 806b53c:	4603      	mov	r3, r0
 806b53e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 806b540:	7bfb      	ldrb	r3, [r7, #15]
 806b542:	4a0a      	ldr	r2, [pc, #40]	; (806b56c <disk_read+0x3c>)
 806b544:	009b      	lsls	r3, r3, #2
 806b546:	4413      	add	r3, r2
 806b548:	685b      	ldr	r3, [r3, #4]
 806b54a:	689c      	ldr	r4, [r3, #8]
 806b54c:	7bfb      	ldrb	r3, [r7, #15]
 806b54e:	4a07      	ldr	r2, [pc, #28]	; (806b56c <disk_read+0x3c>)
 806b550:	4413      	add	r3, r2
 806b552:	7a18      	ldrb	r0, [r3, #8]
 806b554:	683b      	ldr	r3, [r7, #0]
 806b556:	687a      	ldr	r2, [r7, #4]
 806b558:	68b9      	ldr	r1, [r7, #8]
 806b55a:	47a0      	blx	r4
 806b55c:	4603      	mov	r3, r0
 806b55e:	75fb      	strb	r3, [r7, #23]
  return res;
 806b560:	7dfb      	ldrb	r3, [r7, #23]
}
 806b562:	4618      	mov	r0, r3
 806b564:	371c      	adds	r7, #28
 806b566:	46bd      	mov	sp, r7
 806b568:	bd90      	pop	{r4, r7, pc}
 806b56a:	bf00      	nop
 806b56c:	2000044c 	.word	0x2000044c

0806b570 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 806b570:	b590      	push	{r4, r7, lr}
 806b572:	b087      	sub	sp, #28
 806b574:	af00      	add	r7, sp, #0
 806b576:	60b9      	str	r1, [r7, #8]
 806b578:	607a      	str	r2, [r7, #4]
 806b57a:	603b      	str	r3, [r7, #0]
 806b57c:	4603      	mov	r3, r0
 806b57e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 806b580:	7bfb      	ldrb	r3, [r7, #15]
 806b582:	4a0a      	ldr	r2, [pc, #40]	; (806b5ac <disk_write+0x3c>)
 806b584:	009b      	lsls	r3, r3, #2
 806b586:	4413      	add	r3, r2
 806b588:	685b      	ldr	r3, [r3, #4]
 806b58a:	68dc      	ldr	r4, [r3, #12]
 806b58c:	7bfb      	ldrb	r3, [r7, #15]
 806b58e:	4a07      	ldr	r2, [pc, #28]	; (806b5ac <disk_write+0x3c>)
 806b590:	4413      	add	r3, r2
 806b592:	7a18      	ldrb	r0, [r3, #8]
 806b594:	683b      	ldr	r3, [r7, #0]
 806b596:	687a      	ldr	r2, [r7, #4]
 806b598:	68b9      	ldr	r1, [r7, #8]
 806b59a:	47a0      	blx	r4
 806b59c:	4603      	mov	r3, r0
 806b59e:	75fb      	strb	r3, [r7, #23]
  return res;
 806b5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 806b5a2:	4618      	mov	r0, r3
 806b5a4:	371c      	adds	r7, #28
 806b5a6:	46bd      	mov	sp, r7
 806b5a8:	bd90      	pop	{r4, r7, pc}
 806b5aa:	bf00      	nop
 806b5ac:	2000044c 	.word	0x2000044c

0806b5b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 806b5b0:	b580      	push	{r7, lr}
 806b5b2:	b084      	sub	sp, #16
 806b5b4:	af00      	add	r7, sp, #0
 806b5b6:	4603      	mov	r3, r0
 806b5b8:	603a      	str	r2, [r7, #0]
 806b5ba:	71fb      	strb	r3, [r7, #7]
 806b5bc:	460b      	mov	r3, r1
 806b5be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 806b5c0:	79fb      	ldrb	r3, [r7, #7]
 806b5c2:	4a09      	ldr	r2, [pc, #36]	; (806b5e8 <disk_ioctl+0x38>)
 806b5c4:	009b      	lsls	r3, r3, #2
 806b5c6:	4413      	add	r3, r2
 806b5c8:	685b      	ldr	r3, [r3, #4]
 806b5ca:	691b      	ldr	r3, [r3, #16]
 806b5cc:	79fa      	ldrb	r2, [r7, #7]
 806b5ce:	4906      	ldr	r1, [pc, #24]	; (806b5e8 <disk_ioctl+0x38>)
 806b5d0:	440a      	add	r2, r1
 806b5d2:	7a10      	ldrb	r0, [r2, #8]
 806b5d4:	79b9      	ldrb	r1, [r7, #6]
 806b5d6:	683a      	ldr	r2, [r7, #0]
 806b5d8:	4798      	blx	r3
 806b5da:	4603      	mov	r3, r0
 806b5dc:	73fb      	strb	r3, [r7, #15]
  return res;
 806b5de:	7bfb      	ldrb	r3, [r7, #15]
}
 806b5e0:	4618      	mov	r0, r3
 806b5e2:	3710      	adds	r7, #16
 806b5e4:	46bd      	mov	sp, r7
 806b5e6:	bd80      	pop	{r7, pc}
 806b5e8:	2000044c 	.word	0x2000044c

0806b5ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 806b5ec:	b480      	push	{r7}
 806b5ee:	b085      	sub	sp, #20
 806b5f0:	af00      	add	r7, sp, #0
 806b5f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 806b5f4:	687b      	ldr	r3, [r7, #4]
 806b5f6:	3301      	adds	r3, #1
 806b5f8:	781b      	ldrb	r3, [r3, #0]
 806b5fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 806b5fc:	89fb      	ldrh	r3, [r7, #14]
 806b5fe:	021b      	lsls	r3, r3, #8
 806b600:	b21a      	sxth	r2, r3
 806b602:	687b      	ldr	r3, [r7, #4]
 806b604:	781b      	ldrb	r3, [r3, #0]
 806b606:	b21b      	sxth	r3, r3
 806b608:	4313      	orrs	r3, r2
 806b60a:	b21b      	sxth	r3, r3
 806b60c:	81fb      	strh	r3, [r7, #14]
	return rv;
 806b60e:	89fb      	ldrh	r3, [r7, #14]
}
 806b610:	4618      	mov	r0, r3
 806b612:	3714      	adds	r7, #20
 806b614:	46bd      	mov	sp, r7
 806b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b61a:	4770      	bx	lr

0806b61c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 806b61c:	b480      	push	{r7}
 806b61e:	b085      	sub	sp, #20
 806b620:	af00      	add	r7, sp, #0
 806b622:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 806b624:	687b      	ldr	r3, [r7, #4]
 806b626:	3303      	adds	r3, #3
 806b628:	781b      	ldrb	r3, [r3, #0]
 806b62a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 806b62c:	68fb      	ldr	r3, [r7, #12]
 806b62e:	021b      	lsls	r3, r3, #8
 806b630:	687a      	ldr	r2, [r7, #4]
 806b632:	3202      	adds	r2, #2
 806b634:	7812      	ldrb	r2, [r2, #0]
 806b636:	4313      	orrs	r3, r2
 806b638:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 806b63a:	68fb      	ldr	r3, [r7, #12]
 806b63c:	021b      	lsls	r3, r3, #8
 806b63e:	687a      	ldr	r2, [r7, #4]
 806b640:	3201      	adds	r2, #1
 806b642:	7812      	ldrb	r2, [r2, #0]
 806b644:	4313      	orrs	r3, r2
 806b646:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 806b648:	68fb      	ldr	r3, [r7, #12]
 806b64a:	021b      	lsls	r3, r3, #8
 806b64c:	687a      	ldr	r2, [r7, #4]
 806b64e:	7812      	ldrb	r2, [r2, #0]
 806b650:	4313      	orrs	r3, r2
 806b652:	60fb      	str	r3, [r7, #12]
	return rv;
 806b654:	68fb      	ldr	r3, [r7, #12]
}
 806b656:	4618      	mov	r0, r3
 806b658:	3714      	adds	r7, #20
 806b65a:	46bd      	mov	sp, r7
 806b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b660:	4770      	bx	lr

0806b662 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 806b662:	b480      	push	{r7}
 806b664:	b083      	sub	sp, #12
 806b666:	af00      	add	r7, sp, #0
 806b668:	6078      	str	r0, [r7, #4]
 806b66a:	460b      	mov	r3, r1
 806b66c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 806b66e:	687b      	ldr	r3, [r7, #4]
 806b670:	1c5a      	adds	r2, r3, #1
 806b672:	607a      	str	r2, [r7, #4]
 806b674:	887a      	ldrh	r2, [r7, #2]
 806b676:	b2d2      	uxtb	r2, r2
 806b678:	701a      	strb	r2, [r3, #0]
 806b67a:	887b      	ldrh	r3, [r7, #2]
 806b67c:	0a1b      	lsrs	r3, r3, #8
 806b67e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 806b680:	687b      	ldr	r3, [r7, #4]
 806b682:	1c5a      	adds	r2, r3, #1
 806b684:	607a      	str	r2, [r7, #4]
 806b686:	887a      	ldrh	r2, [r7, #2]
 806b688:	b2d2      	uxtb	r2, r2
 806b68a:	701a      	strb	r2, [r3, #0]
}
 806b68c:	bf00      	nop
 806b68e:	370c      	adds	r7, #12
 806b690:	46bd      	mov	sp, r7
 806b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b696:	4770      	bx	lr

0806b698 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 806b698:	b480      	push	{r7}
 806b69a:	b083      	sub	sp, #12
 806b69c:	af00      	add	r7, sp, #0
 806b69e:	6078      	str	r0, [r7, #4]
 806b6a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 806b6a2:	687b      	ldr	r3, [r7, #4]
 806b6a4:	1c5a      	adds	r2, r3, #1
 806b6a6:	607a      	str	r2, [r7, #4]
 806b6a8:	683a      	ldr	r2, [r7, #0]
 806b6aa:	b2d2      	uxtb	r2, r2
 806b6ac:	701a      	strb	r2, [r3, #0]
 806b6ae:	683b      	ldr	r3, [r7, #0]
 806b6b0:	0a1b      	lsrs	r3, r3, #8
 806b6b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 806b6b4:	687b      	ldr	r3, [r7, #4]
 806b6b6:	1c5a      	adds	r2, r3, #1
 806b6b8:	607a      	str	r2, [r7, #4]
 806b6ba:	683a      	ldr	r2, [r7, #0]
 806b6bc:	b2d2      	uxtb	r2, r2
 806b6be:	701a      	strb	r2, [r3, #0]
 806b6c0:	683b      	ldr	r3, [r7, #0]
 806b6c2:	0a1b      	lsrs	r3, r3, #8
 806b6c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 806b6c6:	687b      	ldr	r3, [r7, #4]
 806b6c8:	1c5a      	adds	r2, r3, #1
 806b6ca:	607a      	str	r2, [r7, #4]
 806b6cc:	683a      	ldr	r2, [r7, #0]
 806b6ce:	b2d2      	uxtb	r2, r2
 806b6d0:	701a      	strb	r2, [r3, #0]
 806b6d2:	683b      	ldr	r3, [r7, #0]
 806b6d4:	0a1b      	lsrs	r3, r3, #8
 806b6d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 806b6d8:	687b      	ldr	r3, [r7, #4]
 806b6da:	1c5a      	adds	r2, r3, #1
 806b6dc:	607a      	str	r2, [r7, #4]
 806b6de:	683a      	ldr	r2, [r7, #0]
 806b6e0:	b2d2      	uxtb	r2, r2
 806b6e2:	701a      	strb	r2, [r3, #0]
}
 806b6e4:	bf00      	nop
 806b6e6:	370c      	adds	r7, #12
 806b6e8:	46bd      	mov	sp, r7
 806b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b6ee:	4770      	bx	lr

0806b6f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 806b6f0:	b480      	push	{r7}
 806b6f2:	b087      	sub	sp, #28
 806b6f4:	af00      	add	r7, sp, #0
 806b6f6:	60f8      	str	r0, [r7, #12]
 806b6f8:	60b9      	str	r1, [r7, #8]
 806b6fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 806b6fc:	68fb      	ldr	r3, [r7, #12]
 806b6fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 806b700:	68bb      	ldr	r3, [r7, #8]
 806b702:	613b      	str	r3, [r7, #16]

	if (cnt) {
 806b704:	687b      	ldr	r3, [r7, #4]
 806b706:	2b00      	cmp	r3, #0
 806b708:	d00d      	beq.n	806b726 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 806b70a:	693a      	ldr	r2, [r7, #16]
 806b70c:	1c53      	adds	r3, r2, #1
 806b70e:	613b      	str	r3, [r7, #16]
 806b710:	697b      	ldr	r3, [r7, #20]
 806b712:	1c59      	adds	r1, r3, #1
 806b714:	6179      	str	r1, [r7, #20]
 806b716:	7812      	ldrb	r2, [r2, #0]
 806b718:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 806b71a:	687b      	ldr	r3, [r7, #4]
 806b71c:	3b01      	subs	r3, #1
 806b71e:	607b      	str	r3, [r7, #4]
 806b720:	687b      	ldr	r3, [r7, #4]
 806b722:	2b00      	cmp	r3, #0
 806b724:	d1f1      	bne.n	806b70a <mem_cpy+0x1a>
	}
}
 806b726:	bf00      	nop
 806b728:	371c      	adds	r7, #28
 806b72a:	46bd      	mov	sp, r7
 806b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b730:	4770      	bx	lr

0806b732 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 806b732:	b480      	push	{r7}
 806b734:	b087      	sub	sp, #28
 806b736:	af00      	add	r7, sp, #0
 806b738:	60f8      	str	r0, [r7, #12]
 806b73a:	60b9      	str	r1, [r7, #8]
 806b73c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 806b73e:	68fb      	ldr	r3, [r7, #12]
 806b740:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 806b742:	697b      	ldr	r3, [r7, #20]
 806b744:	1c5a      	adds	r2, r3, #1
 806b746:	617a      	str	r2, [r7, #20]
 806b748:	68ba      	ldr	r2, [r7, #8]
 806b74a:	b2d2      	uxtb	r2, r2
 806b74c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 806b74e:	687b      	ldr	r3, [r7, #4]
 806b750:	3b01      	subs	r3, #1
 806b752:	607b      	str	r3, [r7, #4]
 806b754:	687b      	ldr	r3, [r7, #4]
 806b756:	2b00      	cmp	r3, #0
 806b758:	d1f3      	bne.n	806b742 <mem_set+0x10>
}
 806b75a:	bf00      	nop
 806b75c:	bf00      	nop
 806b75e:	371c      	adds	r7, #28
 806b760:	46bd      	mov	sp, r7
 806b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b766:	4770      	bx	lr

0806b768 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 806b768:	b480      	push	{r7}
 806b76a:	b089      	sub	sp, #36	; 0x24
 806b76c:	af00      	add	r7, sp, #0
 806b76e:	60f8      	str	r0, [r7, #12]
 806b770:	60b9      	str	r1, [r7, #8]
 806b772:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 806b774:	68fb      	ldr	r3, [r7, #12]
 806b776:	61fb      	str	r3, [r7, #28]
 806b778:	68bb      	ldr	r3, [r7, #8]
 806b77a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 806b77c:	2300      	movs	r3, #0
 806b77e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 806b780:	69fb      	ldr	r3, [r7, #28]
 806b782:	1c5a      	adds	r2, r3, #1
 806b784:	61fa      	str	r2, [r7, #28]
 806b786:	781b      	ldrb	r3, [r3, #0]
 806b788:	4619      	mov	r1, r3
 806b78a:	69bb      	ldr	r3, [r7, #24]
 806b78c:	1c5a      	adds	r2, r3, #1
 806b78e:	61ba      	str	r2, [r7, #24]
 806b790:	781b      	ldrb	r3, [r3, #0]
 806b792:	1acb      	subs	r3, r1, r3
 806b794:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 806b796:	687b      	ldr	r3, [r7, #4]
 806b798:	3b01      	subs	r3, #1
 806b79a:	607b      	str	r3, [r7, #4]
 806b79c:	687b      	ldr	r3, [r7, #4]
 806b79e:	2b00      	cmp	r3, #0
 806b7a0:	d002      	beq.n	806b7a8 <mem_cmp+0x40>
 806b7a2:	697b      	ldr	r3, [r7, #20]
 806b7a4:	2b00      	cmp	r3, #0
 806b7a6:	d0eb      	beq.n	806b780 <mem_cmp+0x18>

	return r;
 806b7a8:	697b      	ldr	r3, [r7, #20]
}
 806b7aa:	4618      	mov	r0, r3
 806b7ac:	3724      	adds	r7, #36	; 0x24
 806b7ae:	46bd      	mov	sp, r7
 806b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b7b4:	4770      	bx	lr

0806b7b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 806b7b6:	b480      	push	{r7}
 806b7b8:	b083      	sub	sp, #12
 806b7ba:	af00      	add	r7, sp, #0
 806b7bc:	6078      	str	r0, [r7, #4]
 806b7be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 806b7c0:	e002      	b.n	806b7c8 <chk_chr+0x12>
 806b7c2:	687b      	ldr	r3, [r7, #4]
 806b7c4:	3301      	adds	r3, #1
 806b7c6:	607b      	str	r3, [r7, #4]
 806b7c8:	687b      	ldr	r3, [r7, #4]
 806b7ca:	781b      	ldrb	r3, [r3, #0]
 806b7cc:	2b00      	cmp	r3, #0
 806b7ce:	d005      	beq.n	806b7dc <chk_chr+0x26>
 806b7d0:	687b      	ldr	r3, [r7, #4]
 806b7d2:	781b      	ldrb	r3, [r3, #0]
 806b7d4:	461a      	mov	r2, r3
 806b7d6:	683b      	ldr	r3, [r7, #0]
 806b7d8:	4293      	cmp	r3, r2
 806b7da:	d1f2      	bne.n	806b7c2 <chk_chr+0xc>
	return *str;
 806b7dc:	687b      	ldr	r3, [r7, #4]
 806b7de:	781b      	ldrb	r3, [r3, #0]
}
 806b7e0:	4618      	mov	r0, r3
 806b7e2:	370c      	adds	r7, #12
 806b7e4:	46bd      	mov	sp, r7
 806b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b7ea:	4770      	bx	lr

0806b7ec <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 806b7ec:	b580      	push	{r7, lr}
 806b7ee:	b082      	sub	sp, #8
 806b7f0:	af00      	add	r7, sp, #0
 806b7f2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 806b7f4:	687b      	ldr	r3, [r7, #4]
 806b7f6:	2b00      	cmp	r3, #0
 806b7f8:	d009      	beq.n	806b80e <lock_fs+0x22>
 806b7fa:	687b      	ldr	r3, [r7, #4]
 806b7fc:	68db      	ldr	r3, [r3, #12]
 806b7fe:	4618      	mov	r0, r3
 806b800:	f002 fb82 	bl	806df08 <ff_req_grant>
 806b804:	4603      	mov	r3, r0
 806b806:	2b00      	cmp	r3, #0
 806b808:	d001      	beq.n	806b80e <lock_fs+0x22>
 806b80a:	2301      	movs	r3, #1
 806b80c:	e000      	b.n	806b810 <lock_fs+0x24>
 806b80e:	2300      	movs	r3, #0
}
 806b810:	4618      	mov	r0, r3
 806b812:	3708      	adds	r7, #8
 806b814:	46bd      	mov	sp, r7
 806b816:	bd80      	pop	{r7, pc}

0806b818 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 806b818:	b580      	push	{r7, lr}
 806b81a:	b082      	sub	sp, #8
 806b81c:	af00      	add	r7, sp, #0
 806b81e:	6078      	str	r0, [r7, #4]
 806b820:	460b      	mov	r3, r1
 806b822:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 806b824:	687b      	ldr	r3, [r7, #4]
 806b826:	2b00      	cmp	r3, #0
 806b828:	d00d      	beq.n	806b846 <unlock_fs+0x2e>
 806b82a:	78fb      	ldrb	r3, [r7, #3]
 806b82c:	2b0c      	cmp	r3, #12
 806b82e:	d00a      	beq.n	806b846 <unlock_fs+0x2e>
 806b830:	78fb      	ldrb	r3, [r7, #3]
 806b832:	2b0b      	cmp	r3, #11
 806b834:	d007      	beq.n	806b846 <unlock_fs+0x2e>
 806b836:	78fb      	ldrb	r3, [r7, #3]
 806b838:	2b0f      	cmp	r3, #15
 806b83a:	d004      	beq.n	806b846 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 806b83c:	687b      	ldr	r3, [r7, #4]
 806b83e:	68db      	ldr	r3, [r3, #12]
 806b840:	4618      	mov	r0, r3
 806b842:	f002 fb76 	bl	806df32 <ff_rel_grant>
	}
}
 806b846:	bf00      	nop
 806b848:	3708      	adds	r7, #8
 806b84a:	46bd      	mov	sp, r7
 806b84c:	bd80      	pop	{r7, pc}
	...

0806b850 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 806b850:	b480      	push	{r7}
 806b852:	b085      	sub	sp, #20
 806b854:	af00      	add	r7, sp, #0
 806b856:	6078      	str	r0, [r7, #4]
 806b858:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 806b85a:	2300      	movs	r3, #0
 806b85c:	60bb      	str	r3, [r7, #8]
 806b85e:	68bb      	ldr	r3, [r7, #8]
 806b860:	60fb      	str	r3, [r7, #12]
 806b862:	e029      	b.n	806b8b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 806b864:	4a27      	ldr	r2, [pc, #156]	; (806b904 <chk_lock+0xb4>)
 806b866:	68fb      	ldr	r3, [r7, #12]
 806b868:	011b      	lsls	r3, r3, #4
 806b86a:	4413      	add	r3, r2
 806b86c:	681b      	ldr	r3, [r3, #0]
 806b86e:	2b00      	cmp	r3, #0
 806b870:	d01d      	beq.n	806b8ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 806b872:	4a24      	ldr	r2, [pc, #144]	; (806b904 <chk_lock+0xb4>)
 806b874:	68fb      	ldr	r3, [r7, #12]
 806b876:	011b      	lsls	r3, r3, #4
 806b878:	4413      	add	r3, r2
 806b87a:	681a      	ldr	r2, [r3, #0]
 806b87c:	687b      	ldr	r3, [r7, #4]
 806b87e:	681b      	ldr	r3, [r3, #0]
 806b880:	429a      	cmp	r2, r3
 806b882:	d116      	bne.n	806b8b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 806b884:	4a1f      	ldr	r2, [pc, #124]	; (806b904 <chk_lock+0xb4>)
 806b886:	68fb      	ldr	r3, [r7, #12]
 806b888:	011b      	lsls	r3, r3, #4
 806b88a:	4413      	add	r3, r2
 806b88c:	3304      	adds	r3, #4
 806b88e:	681a      	ldr	r2, [r3, #0]
 806b890:	687b      	ldr	r3, [r7, #4]
 806b892:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 806b894:	429a      	cmp	r2, r3
 806b896:	d10c      	bne.n	806b8b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 806b898:	4a1a      	ldr	r2, [pc, #104]	; (806b904 <chk_lock+0xb4>)
 806b89a:	68fb      	ldr	r3, [r7, #12]
 806b89c:	011b      	lsls	r3, r3, #4
 806b89e:	4413      	add	r3, r2
 806b8a0:	3308      	adds	r3, #8
 806b8a2:	681a      	ldr	r2, [r3, #0]
 806b8a4:	687b      	ldr	r3, [r7, #4]
 806b8a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 806b8a8:	429a      	cmp	r2, r3
 806b8aa:	d102      	bne.n	806b8b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 806b8ac:	e007      	b.n	806b8be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 806b8ae:	2301      	movs	r3, #1
 806b8b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 806b8b2:	68fb      	ldr	r3, [r7, #12]
 806b8b4:	3301      	adds	r3, #1
 806b8b6:	60fb      	str	r3, [r7, #12]
 806b8b8:	68fb      	ldr	r3, [r7, #12]
 806b8ba:	2b01      	cmp	r3, #1
 806b8bc:	d9d2      	bls.n	806b864 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 806b8be:	68fb      	ldr	r3, [r7, #12]
 806b8c0:	2b02      	cmp	r3, #2
 806b8c2:	d109      	bne.n	806b8d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 806b8c4:	68bb      	ldr	r3, [r7, #8]
 806b8c6:	2b00      	cmp	r3, #0
 806b8c8:	d102      	bne.n	806b8d0 <chk_lock+0x80>
 806b8ca:	683b      	ldr	r3, [r7, #0]
 806b8cc:	2b02      	cmp	r3, #2
 806b8ce:	d101      	bne.n	806b8d4 <chk_lock+0x84>
 806b8d0:	2300      	movs	r3, #0
 806b8d2:	e010      	b.n	806b8f6 <chk_lock+0xa6>
 806b8d4:	2312      	movs	r3, #18
 806b8d6:	e00e      	b.n	806b8f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 806b8d8:	683b      	ldr	r3, [r7, #0]
 806b8da:	2b00      	cmp	r3, #0
 806b8dc:	d108      	bne.n	806b8f0 <chk_lock+0xa0>
 806b8de:	4a09      	ldr	r2, [pc, #36]	; (806b904 <chk_lock+0xb4>)
 806b8e0:	68fb      	ldr	r3, [r7, #12]
 806b8e2:	011b      	lsls	r3, r3, #4
 806b8e4:	4413      	add	r3, r2
 806b8e6:	330c      	adds	r3, #12
 806b8e8:	881b      	ldrh	r3, [r3, #0]
 806b8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806b8ee:	d101      	bne.n	806b8f4 <chk_lock+0xa4>
 806b8f0:	2310      	movs	r3, #16
 806b8f2:	e000      	b.n	806b8f6 <chk_lock+0xa6>
 806b8f4:	2300      	movs	r3, #0
}
 806b8f6:	4618      	mov	r0, r3
 806b8f8:	3714      	adds	r7, #20
 806b8fa:	46bd      	mov	sp, r7
 806b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b900:	4770      	bx	lr
 806b902:	bf00      	nop
 806b904:	2000042c 	.word	0x2000042c

0806b908 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 806b908:	b480      	push	{r7}
 806b90a:	b083      	sub	sp, #12
 806b90c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 806b90e:	2300      	movs	r3, #0
 806b910:	607b      	str	r3, [r7, #4]
 806b912:	e002      	b.n	806b91a <enq_lock+0x12>
 806b914:	687b      	ldr	r3, [r7, #4]
 806b916:	3301      	adds	r3, #1
 806b918:	607b      	str	r3, [r7, #4]
 806b91a:	687b      	ldr	r3, [r7, #4]
 806b91c:	2b01      	cmp	r3, #1
 806b91e:	d806      	bhi.n	806b92e <enq_lock+0x26>
 806b920:	4a09      	ldr	r2, [pc, #36]	; (806b948 <enq_lock+0x40>)
 806b922:	687b      	ldr	r3, [r7, #4]
 806b924:	011b      	lsls	r3, r3, #4
 806b926:	4413      	add	r3, r2
 806b928:	681b      	ldr	r3, [r3, #0]
 806b92a:	2b00      	cmp	r3, #0
 806b92c:	d1f2      	bne.n	806b914 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 806b92e:	687b      	ldr	r3, [r7, #4]
 806b930:	2b02      	cmp	r3, #2
 806b932:	bf14      	ite	ne
 806b934:	2301      	movne	r3, #1
 806b936:	2300      	moveq	r3, #0
 806b938:	b2db      	uxtb	r3, r3
}
 806b93a:	4618      	mov	r0, r3
 806b93c:	370c      	adds	r7, #12
 806b93e:	46bd      	mov	sp, r7
 806b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b944:	4770      	bx	lr
 806b946:	bf00      	nop
 806b948:	2000042c 	.word	0x2000042c

0806b94c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 806b94c:	b480      	push	{r7}
 806b94e:	b085      	sub	sp, #20
 806b950:	af00      	add	r7, sp, #0
 806b952:	6078      	str	r0, [r7, #4]
 806b954:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 806b956:	2300      	movs	r3, #0
 806b958:	60fb      	str	r3, [r7, #12]
 806b95a:	e01f      	b.n	806b99c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 806b95c:	4a41      	ldr	r2, [pc, #260]	; (806ba64 <inc_lock+0x118>)
 806b95e:	68fb      	ldr	r3, [r7, #12]
 806b960:	011b      	lsls	r3, r3, #4
 806b962:	4413      	add	r3, r2
 806b964:	681a      	ldr	r2, [r3, #0]
 806b966:	687b      	ldr	r3, [r7, #4]
 806b968:	681b      	ldr	r3, [r3, #0]
 806b96a:	429a      	cmp	r2, r3
 806b96c:	d113      	bne.n	806b996 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 806b96e:	4a3d      	ldr	r2, [pc, #244]	; (806ba64 <inc_lock+0x118>)
 806b970:	68fb      	ldr	r3, [r7, #12]
 806b972:	011b      	lsls	r3, r3, #4
 806b974:	4413      	add	r3, r2
 806b976:	3304      	adds	r3, #4
 806b978:	681a      	ldr	r2, [r3, #0]
 806b97a:	687b      	ldr	r3, [r7, #4]
 806b97c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 806b97e:	429a      	cmp	r2, r3
 806b980:	d109      	bne.n	806b996 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 806b982:	4a38      	ldr	r2, [pc, #224]	; (806ba64 <inc_lock+0x118>)
 806b984:	68fb      	ldr	r3, [r7, #12]
 806b986:	011b      	lsls	r3, r3, #4
 806b988:	4413      	add	r3, r2
 806b98a:	3308      	adds	r3, #8
 806b98c:	681a      	ldr	r2, [r3, #0]
 806b98e:	687b      	ldr	r3, [r7, #4]
 806b990:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 806b992:	429a      	cmp	r2, r3
 806b994:	d006      	beq.n	806b9a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 806b996:	68fb      	ldr	r3, [r7, #12]
 806b998:	3301      	adds	r3, #1
 806b99a:	60fb      	str	r3, [r7, #12]
 806b99c:	68fb      	ldr	r3, [r7, #12]
 806b99e:	2b01      	cmp	r3, #1
 806b9a0:	d9dc      	bls.n	806b95c <inc_lock+0x10>
 806b9a2:	e000      	b.n	806b9a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 806b9a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 806b9a6:	68fb      	ldr	r3, [r7, #12]
 806b9a8:	2b02      	cmp	r3, #2
 806b9aa:	d132      	bne.n	806ba12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 806b9ac:	2300      	movs	r3, #0
 806b9ae:	60fb      	str	r3, [r7, #12]
 806b9b0:	e002      	b.n	806b9b8 <inc_lock+0x6c>
 806b9b2:	68fb      	ldr	r3, [r7, #12]
 806b9b4:	3301      	adds	r3, #1
 806b9b6:	60fb      	str	r3, [r7, #12]
 806b9b8:	68fb      	ldr	r3, [r7, #12]
 806b9ba:	2b01      	cmp	r3, #1
 806b9bc:	d806      	bhi.n	806b9cc <inc_lock+0x80>
 806b9be:	4a29      	ldr	r2, [pc, #164]	; (806ba64 <inc_lock+0x118>)
 806b9c0:	68fb      	ldr	r3, [r7, #12]
 806b9c2:	011b      	lsls	r3, r3, #4
 806b9c4:	4413      	add	r3, r2
 806b9c6:	681b      	ldr	r3, [r3, #0]
 806b9c8:	2b00      	cmp	r3, #0
 806b9ca:	d1f2      	bne.n	806b9b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 806b9cc:	68fb      	ldr	r3, [r7, #12]
 806b9ce:	2b02      	cmp	r3, #2
 806b9d0:	d101      	bne.n	806b9d6 <inc_lock+0x8a>
 806b9d2:	2300      	movs	r3, #0
 806b9d4:	e040      	b.n	806ba58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 806b9d6:	687b      	ldr	r3, [r7, #4]
 806b9d8:	681a      	ldr	r2, [r3, #0]
 806b9da:	4922      	ldr	r1, [pc, #136]	; (806ba64 <inc_lock+0x118>)
 806b9dc:	68fb      	ldr	r3, [r7, #12]
 806b9de:	011b      	lsls	r3, r3, #4
 806b9e0:	440b      	add	r3, r1
 806b9e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 806b9e4:	687b      	ldr	r3, [r7, #4]
 806b9e6:	689a      	ldr	r2, [r3, #8]
 806b9e8:	491e      	ldr	r1, [pc, #120]	; (806ba64 <inc_lock+0x118>)
 806b9ea:	68fb      	ldr	r3, [r7, #12]
 806b9ec:	011b      	lsls	r3, r3, #4
 806b9ee:	440b      	add	r3, r1
 806b9f0:	3304      	adds	r3, #4
 806b9f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 806b9f4:	687b      	ldr	r3, [r7, #4]
 806b9f6:	695a      	ldr	r2, [r3, #20]
 806b9f8:	491a      	ldr	r1, [pc, #104]	; (806ba64 <inc_lock+0x118>)
 806b9fa:	68fb      	ldr	r3, [r7, #12]
 806b9fc:	011b      	lsls	r3, r3, #4
 806b9fe:	440b      	add	r3, r1
 806ba00:	3308      	adds	r3, #8
 806ba02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 806ba04:	4a17      	ldr	r2, [pc, #92]	; (806ba64 <inc_lock+0x118>)
 806ba06:	68fb      	ldr	r3, [r7, #12]
 806ba08:	011b      	lsls	r3, r3, #4
 806ba0a:	4413      	add	r3, r2
 806ba0c:	330c      	adds	r3, #12
 806ba0e:	2200      	movs	r2, #0
 806ba10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 806ba12:	683b      	ldr	r3, [r7, #0]
 806ba14:	2b00      	cmp	r3, #0
 806ba16:	d009      	beq.n	806ba2c <inc_lock+0xe0>
 806ba18:	4a12      	ldr	r2, [pc, #72]	; (806ba64 <inc_lock+0x118>)
 806ba1a:	68fb      	ldr	r3, [r7, #12]
 806ba1c:	011b      	lsls	r3, r3, #4
 806ba1e:	4413      	add	r3, r2
 806ba20:	330c      	adds	r3, #12
 806ba22:	881b      	ldrh	r3, [r3, #0]
 806ba24:	2b00      	cmp	r3, #0
 806ba26:	d001      	beq.n	806ba2c <inc_lock+0xe0>
 806ba28:	2300      	movs	r3, #0
 806ba2a:	e015      	b.n	806ba58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 806ba2c:	683b      	ldr	r3, [r7, #0]
 806ba2e:	2b00      	cmp	r3, #0
 806ba30:	d108      	bne.n	806ba44 <inc_lock+0xf8>
 806ba32:	4a0c      	ldr	r2, [pc, #48]	; (806ba64 <inc_lock+0x118>)
 806ba34:	68fb      	ldr	r3, [r7, #12]
 806ba36:	011b      	lsls	r3, r3, #4
 806ba38:	4413      	add	r3, r2
 806ba3a:	330c      	adds	r3, #12
 806ba3c:	881b      	ldrh	r3, [r3, #0]
 806ba3e:	3301      	adds	r3, #1
 806ba40:	b29a      	uxth	r2, r3
 806ba42:	e001      	b.n	806ba48 <inc_lock+0xfc>
 806ba44:	f44f 7280 	mov.w	r2, #256	; 0x100
 806ba48:	4906      	ldr	r1, [pc, #24]	; (806ba64 <inc_lock+0x118>)
 806ba4a:	68fb      	ldr	r3, [r7, #12]
 806ba4c:	011b      	lsls	r3, r3, #4
 806ba4e:	440b      	add	r3, r1
 806ba50:	330c      	adds	r3, #12
 806ba52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 806ba54:	68fb      	ldr	r3, [r7, #12]
 806ba56:	3301      	adds	r3, #1
}
 806ba58:	4618      	mov	r0, r3
 806ba5a:	3714      	adds	r7, #20
 806ba5c:	46bd      	mov	sp, r7
 806ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ba62:	4770      	bx	lr
 806ba64:	2000042c 	.word	0x2000042c

0806ba68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 806ba68:	b480      	push	{r7}
 806ba6a:	b085      	sub	sp, #20
 806ba6c:	af00      	add	r7, sp, #0
 806ba6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 806ba70:	687b      	ldr	r3, [r7, #4]
 806ba72:	3b01      	subs	r3, #1
 806ba74:	607b      	str	r3, [r7, #4]
 806ba76:	687b      	ldr	r3, [r7, #4]
 806ba78:	2b01      	cmp	r3, #1
 806ba7a:	d825      	bhi.n	806bac8 <dec_lock+0x60>
		n = Files[i].ctr;
 806ba7c:	4a17      	ldr	r2, [pc, #92]	; (806badc <dec_lock+0x74>)
 806ba7e:	687b      	ldr	r3, [r7, #4]
 806ba80:	011b      	lsls	r3, r3, #4
 806ba82:	4413      	add	r3, r2
 806ba84:	330c      	adds	r3, #12
 806ba86:	881b      	ldrh	r3, [r3, #0]
 806ba88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 806ba8a:	89fb      	ldrh	r3, [r7, #14]
 806ba8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806ba90:	d101      	bne.n	806ba96 <dec_lock+0x2e>
 806ba92:	2300      	movs	r3, #0
 806ba94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 806ba96:	89fb      	ldrh	r3, [r7, #14]
 806ba98:	2b00      	cmp	r3, #0
 806ba9a:	d002      	beq.n	806baa2 <dec_lock+0x3a>
 806ba9c:	89fb      	ldrh	r3, [r7, #14]
 806ba9e:	3b01      	subs	r3, #1
 806baa0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 806baa2:	4a0e      	ldr	r2, [pc, #56]	; (806badc <dec_lock+0x74>)
 806baa4:	687b      	ldr	r3, [r7, #4]
 806baa6:	011b      	lsls	r3, r3, #4
 806baa8:	4413      	add	r3, r2
 806baaa:	330c      	adds	r3, #12
 806baac:	89fa      	ldrh	r2, [r7, #14]
 806baae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 806bab0:	89fb      	ldrh	r3, [r7, #14]
 806bab2:	2b00      	cmp	r3, #0
 806bab4:	d105      	bne.n	806bac2 <dec_lock+0x5a>
 806bab6:	4a09      	ldr	r2, [pc, #36]	; (806badc <dec_lock+0x74>)
 806bab8:	687b      	ldr	r3, [r7, #4]
 806baba:	011b      	lsls	r3, r3, #4
 806babc:	4413      	add	r3, r2
 806babe:	2200      	movs	r2, #0
 806bac0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 806bac2:	2300      	movs	r3, #0
 806bac4:	737b      	strb	r3, [r7, #13]
 806bac6:	e001      	b.n	806bacc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 806bac8:	2302      	movs	r3, #2
 806baca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 806bacc:	7b7b      	ldrb	r3, [r7, #13]
}
 806bace:	4618      	mov	r0, r3
 806bad0:	3714      	adds	r7, #20
 806bad2:	46bd      	mov	sp, r7
 806bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 806bad8:	4770      	bx	lr
 806bada:	bf00      	nop
 806badc:	2000042c 	.word	0x2000042c

0806bae0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 806bae0:	b480      	push	{r7}
 806bae2:	b085      	sub	sp, #20
 806bae4:	af00      	add	r7, sp, #0
 806bae6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 806bae8:	2300      	movs	r3, #0
 806baea:	60fb      	str	r3, [r7, #12]
 806baec:	e010      	b.n	806bb10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 806baee:	4a0d      	ldr	r2, [pc, #52]	; (806bb24 <clear_lock+0x44>)
 806baf0:	68fb      	ldr	r3, [r7, #12]
 806baf2:	011b      	lsls	r3, r3, #4
 806baf4:	4413      	add	r3, r2
 806baf6:	681b      	ldr	r3, [r3, #0]
 806baf8:	687a      	ldr	r2, [r7, #4]
 806bafa:	429a      	cmp	r2, r3
 806bafc:	d105      	bne.n	806bb0a <clear_lock+0x2a>
 806bafe:	4a09      	ldr	r2, [pc, #36]	; (806bb24 <clear_lock+0x44>)
 806bb00:	68fb      	ldr	r3, [r7, #12]
 806bb02:	011b      	lsls	r3, r3, #4
 806bb04:	4413      	add	r3, r2
 806bb06:	2200      	movs	r2, #0
 806bb08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 806bb0a:	68fb      	ldr	r3, [r7, #12]
 806bb0c:	3301      	adds	r3, #1
 806bb0e:	60fb      	str	r3, [r7, #12]
 806bb10:	68fb      	ldr	r3, [r7, #12]
 806bb12:	2b01      	cmp	r3, #1
 806bb14:	d9eb      	bls.n	806baee <clear_lock+0xe>
	}
}
 806bb16:	bf00      	nop
 806bb18:	bf00      	nop
 806bb1a:	3714      	adds	r7, #20
 806bb1c:	46bd      	mov	sp, r7
 806bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806bb22:	4770      	bx	lr
 806bb24:	2000042c 	.word	0x2000042c

0806bb28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 806bb28:	b580      	push	{r7, lr}
 806bb2a:	b086      	sub	sp, #24
 806bb2c:	af00      	add	r7, sp, #0
 806bb2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 806bb30:	2300      	movs	r3, #0
 806bb32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 806bb34:	687b      	ldr	r3, [r7, #4]
 806bb36:	78db      	ldrb	r3, [r3, #3]
 806bb38:	2b00      	cmp	r3, #0
 806bb3a:	d034      	beq.n	806bba6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 806bb3c:	687b      	ldr	r3, [r7, #4]
 806bb3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806bb40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 806bb42:	687b      	ldr	r3, [r7, #4]
 806bb44:	7858      	ldrb	r0, [r3, #1]
 806bb46:	687b      	ldr	r3, [r7, #4]
 806bb48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806bb4c:	2301      	movs	r3, #1
 806bb4e:	697a      	ldr	r2, [r7, #20]
 806bb50:	f7ff fd0e 	bl	806b570 <disk_write>
 806bb54:	4603      	mov	r3, r0
 806bb56:	2b00      	cmp	r3, #0
 806bb58:	d002      	beq.n	806bb60 <sync_window+0x38>
			res = FR_DISK_ERR;
 806bb5a:	2301      	movs	r3, #1
 806bb5c:	73fb      	strb	r3, [r7, #15]
 806bb5e:	e022      	b.n	806bba6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 806bb60:	687b      	ldr	r3, [r7, #4]
 806bb62:	2200      	movs	r2, #0
 806bb64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 806bb66:	687b      	ldr	r3, [r7, #4]
 806bb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806bb6a:	697a      	ldr	r2, [r7, #20]
 806bb6c:	1ad2      	subs	r2, r2, r3
 806bb6e:	687b      	ldr	r3, [r7, #4]
 806bb70:	69db      	ldr	r3, [r3, #28]
 806bb72:	429a      	cmp	r2, r3
 806bb74:	d217      	bcs.n	806bba6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 806bb76:	687b      	ldr	r3, [r7, #4]
 806bb78:	789b      	ldrb	r3, [r3, #2]
 806bb7a:	613b      	str	r3, [r7, #16]
 806bb7c:	e010      	b.n	806bba0 <sync_window+0x78>
					wsect += fs->fsize;
 806bb7e:	687b      	ldr	r3, [r7, #4]
 806bb80:	69db      	ldr	r3, [r3, #28]
 806bb82:	697a      	ldr	r2, [r7, #20]
 806bb84:	4413      	add	r3, r2
 806bb86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 806bb88:	687b      	ldr	r3, [r7, #4]
 806bb8a:	7858      	ldrb	r0, [r3, #1]
 806bb8c:	687b      	ldr	r3, [r7, #4]
 806bb8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806bb92:	2301      	movs	r3, #1
 806bb94:	697a      	ldr	r2, [r7, #20]
 806bb96:	f7ff fceb 	bl	806b570 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 806bb9a:	693b      	ldr	r3, [r7, #16]
 806bb9c:	3b01      	subs	r3, #1
 806bb9e:	613b      	str	r3, [r7, #16]
 806bba0:	693b      	ldr	r3, [r7, #16]
 806bba2:	2b01      	cmp	r3, #1
 806bba4:	d8eb      	bhi.n	806bb7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 806bba6:	7bfb      	ldrb	r3, [r7, #15]
}
 806bba8:	4618      	mov	r0, r3
 806bbaa:	3718      	adds	r7, #24
 806bbac:	46bd      	mov	sp, r7
 806bbae:	bd80      	pop	{r7, pc}

0806bbb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 806bbb0:	b580      	push	{r7, lr}
 806bbb2:	b084      	sub	sp, #16
 806bbb4:	af00      	add	r7, sp, #0
 806bbb6:	6078      	str	r0, [r7, #4]
 806bbb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 806bbba:	2300      	movs	r3, #0
 806bbbc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 806bbbe:	687b      	ldr	r3, [r7, #4]
 806bbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806bbc2:	683a      	ldr	r2, [r7, #0]
 806bbc4:	429a      	cmp	r2, r3
 806bbc6:	d01b      	beq.n	806bc00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 806bbc8:	6878      	ldr	r0, [r7, #4]
 806bbca:	f7ff ffad 	bl	806bb28 <sync_window>
 806bbce:	4603      	mov	r3, r0
 806bbd0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 806bbd2:	7bfb      	ldrb	r3, [r7, #15]
 806bbd4:	2b00      	cmp	r3, #0
 806bbd6:	d113      	bne.n	806bc00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 806bbd8:	687b      	ldr	r3, [r7, #4]
 806bbda:	7858      	ldrb	r0, [r3, #1]
 806bbdc:	687b      	ldr	r3, [r7, #4]
 806bbde:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806bbe2:	2301      	movs	r3, #1
 806bbe4:	683a      	ldr	r2, [r7, #0]
 806bbe6:	f7ff fca3 	bl	806b530 <disk_read>
 806bbea:	4603      	mov	r3, r0
 806bbec:	2b00      	cmp	r3, #0
 806bbee:	d004      	beq.n	806bbfa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 806bbf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806bbf4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 806bbf6:	2301      	movs	r3, #1
 806bbf8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 806bbfa:	687b      	ldr	r3, [r7, #4]
 806bbfc:	683a      	ldr	r2, [r7, #0]
 806bbfe:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 806bc00:	7bfb      	ldrb	r3, [r7, #15]
}
 806bc02:	4618      	mov	r0, r3
 806bc04:	3710      	adds	r7, #16
 806bc06:	46bd      	mov	sp, r7
 806bc08:	bd80      	pop	{r7, pc}
	...

0806bc0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 806bc0c:	b580      	push	{r7, lr}
 806bc0e:	b084      	sub	sp, #16
 806bc10:	af00      	add	r7, sp, #0
 806bc12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 806bc14:	6878      	ldr	r0, [r7, #4]
 806bc16:	f7ff ff87 	bl	806bb28 <sync_window>
 806bc1a:	4603      	mov	r3, r0
 806bc1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 806bc1e:	7bfb      	ldrb	r3, [r7, #15]
 806bc20:	2b00      	cmp	r3, #0
 806bc22:	d158      	bne.n	806bcd6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 806bc24:	687b      	ldr	r3, [r7, #4]
 806bc26:	781b      	ldrb	r3, [r3, #0]
 806bc28:	2b03      	cmp	r3, #3
 806bc2a:	d148      	bne.n	806bcbe <sync_fs+0xb2>
 806bc2c:	687b      	ldr	r3, [r7, #4]
 806bc2e:	791b      	ldrb	r3, [r3, #4]
 806bc30:	2b01      	cmp	r3, #1
 806bc32:	d144      	bne.n	806bcbe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 806bc34:	687b      	ldr	r3, [r7, #4]
 806bc36:	3334      	adds	r3, #52	; 0x34
 806bc38:	f44f 7200 	mov.w	r2, #512	; 0x200
 806bc3c:	2100      	movs	r1, #0
 806bc3e:	4618      	mov	r0, r3
 806bc40:	f7ff fd77 	bl	806b732 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 806bc44:	687b      	ldr	r3, [r7, #4]
 806bc46:	3334      	adds	r3, #52	; 0x34
 806bc48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 806bc4c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 806bc50:	4618      	mov	r0, r3
 806bc52:	f7ff fd06 	bl	806b662 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 806bc56:	687b      	ldr	r3, [r7, #4]
 806bc58:	3334      	adds	r3, #52	; 0x34
 806bc5a:	4921      	ldr	r1, [pc, #132]	; (806bce0 <sync_fs+0xd4>)
 806bc5c:	4618      	mov	r0, r3
 806bc5e:	f7ff fd1b 	bl	806b698 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 806bc62:	687b      	ldr	r3, [r7, #4]
 806bc64:	3334      	adds	r3, #52	; 0x34
 806bc66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 806bc6a:	491e      	ldr	r1, [pc, #120]	; (806bce4 <sync_fs+0xd8>)
 806bc6c:	4618      	mov	r0, r3
 806bc6e:	f7ff fd13 	bl	806b698 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 806bc72:	687b      	ldr	r3, [r7, #4]
 806bc74:	3334      	adds	r3, #52	; 0x34
 806bc76:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 806bc7a:	687b      	ldr	r3, [r7, #4]
 806bc7c:	695b      	ldr	r3, [r3, #20]
 806bc7e:	4619      	mov	r1, r3
 806bc80:	4610      	mov	r0, r2
 806bc82:	f7ff fd09 	bl	806b698 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 806bc86:	687b      	ldr	r3, [r7, #4]
 806bc88:	3334      	adds	r3, #52	; 0x34
 806bc8a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 806bc8e:	687b      	ldr	r3, [r7, #4]
 806bc90:	691b      	ldr	r3, [r3, #16]
 806bc92:	4619      	mov	r1, r3
 806bc94:	4610      	mov	r0, r2
 806bc96:	f7ff fcff 	bl	806b698 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 806bc9a:	687b      	ldr	r3, [r7, #4]
 806bc9c:	6a1b      	ldr	r3, [r3, #32]
 806bc9e:	1c5a      	adds	r2, r3, #1
 806bca0:	687b      	ldr	r3, [r7, #4]
 806bca2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 806bca4:	687b      	ldr	r3, [r7, #4]
 806bca6:	7858      	ldrb	r0, [r3, #1]
 806bca8:	687b      	ldr	r3, [r7, #4]
 806bcaa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806bcae:	687b      	ldr	r3, [r7, #4]
 806bcb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806bcb2:	2301      	movs	r3, #1
 806bcb4:	f7ff fc5c 	bl	806b570 <disk_write>
			fs->fsi_flag = 0;
 806bcb8:	687b      	ldr	r3, [r7, #4]
 806bcba:	2200      	movs	r2, #0
 806bcbc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 806bcbe:	687b      	ldr	r3, [r7, #4]
 806bcc0:	785b      	ldrb	r3, [r3, #1]
 806bcc2:	2200      	movs	r2, #0
 806bcc4:	2100      	movs	r1, #0
 806bcc6:	4618      	mov	r0, r3
 806bcc8:	f7ff fc72 	bl	806b5b0 <disk_ioctl>
 806bccc:	4603      	mov	r3, r0
 806bcce:	2b00      	cmp	r3, #0
 806bcd0:	d001      	beq.n	806bcd6 <sync_fs+0xca>
 806bcd2:	2301      	movs	r3, #1
 806bcd4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 806bcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 806bcd8:	4618      	mov	r0, r3
 806bcda:	3710      	adds	r7, #16
 806bcdc:	46bd      	mov	sp, r7
 806bcde:	bd80      	pop	{r7, pc}
 806bce0:	41615252 	.word	0x41615252
 806bce4:	61417272 	.word	0x61417272

0806bce8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 806bce8:	b480      	push	{r7}
 806bcea:	b083      	sub	sp, #12
 806bcec:	af00      	add	r7, sp, #0
 806bcee:	6078      	str	r0, [r7, #4]
 806bcf0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 806bcf2:	683b      	ldr	r3, [r7, #0]
 806bcf4:	3b02      	subs	r3, #2
 806bcf6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 806bcf8:	687b      	ldr	r3, [r7, #4]
 806bcfa:	699b      	ldr	r3, [r3, #24]
 806bcfc:	3b02      	subs	r3, #2
 806bcfe:	683a      	ldr	r2, [r7, #0]
 806bd00:	429a      	cmp	r2, r3
 806bd02:	d301      	bcc.n	806bd08 <clust2sect+0x20>
 806bd04:	2300      	movs	r3, #0
 806bd06:	e008      	b.n	806bd1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 806bd08:	687b      	ldr	r3, [r7, #4]
 806bd0a:	895b      	ldrh	r3, [r3, #10]
 806bd0c:	461a      	mov	r2, r3
 806bd0e:	683b      	ldr	r3, [r7, #0]
 806bd10:	fb03 f202 	mul.w	r2, r3, r2
 806bd14:	687b      	ldr	r3, [r7, #4]
 806bd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806bd18:	4413      	add	r3, r2
}
 806bd1a:	4618      	mov	r0, r3
 806bd1c:	370c      	adds	r7, #12
 806bd1e:	46bd      	mov	sp, r7
 806bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 806bd24:	4770      	bx	lr

0806bd26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 806bd26:	b580      	push	{r7, lr}
 806bd28:	b086      	sub	sp, #24
 806bd2a:	af00      	add	r7, sp, #0
 806bd2c:	6078      	str	r0, [r7, #4]
 806bd2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 806bd30:	687b      	ldr	r3, [r7, #4]
 806bd32:	681b      	ldr	r3, [r3, #0]
 806bd34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 806bd36:	683b      	ldr	r3, [r7, #0]
 806bd38:	2b01      	cmp	r3, #1
 806bd3a:	d904      	bls.n	806bd46 <get_fat+0x20>
 806bd3c:	693b      	ldr	r3, [r7, #16]
 806bd3e:	699b      	ldr	r3, [r3, #24]
 806bd40:	683a      	ldr	r2, [r7, #0]
 806bd42:	429a      	cmp	r2, r3
 806bd44:	d302      	bcc.n	806bd4c <get_fat+0x26>
		val = 1;	/* Internal error */
 806bd46:	2301      	movs	r3, #1
 806bd48:	617b      	str	r3, [r7, #20]
 806bd4a:	e08f      	b.n	806be6c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 806bd4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806bd50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 806bd52:	693b      	ldr	r3, [r7, #16]
 806bd54:	781b      	ldrb	r3, [r3, #0]
 806bd56:	2b03      	cmp	r3, #3
 806bd58:	d062      	beq.n	806be20 <get_fat+0xfa>
 806bd5a:	2b03      	cmp	r3, #3
 806bd5c:	dc7c      	bgt.n	806be58 <get_fat+0x132>
 806bd5e:	2b01      	cmp	r3, #1
 806bd60:	d002      	beq.n	806bd68 <get_fat+0x42>
 806bd62:	2b02      	cmp	r3, #2
 806bd64:	d042      	beq.n	806bdec <get_fat+0xc6>
 806bd66:	e077      	b.n	806be58 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 806bd68:	683b      	ldr	r3, [r7, #0]
 806bd6a:	60fb      	str	r3, [r7, #12]
 806bd6c:	68fb      	ldr	r3, [r7, #12]
 806bd6e:	085b      	lsrs	r3, r3, #1
 806bd70:	68fa      	ldr	r2, [r7, #12]
 806bd72:	4413      	add	r3, r2
 806bd74:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806bd76:	693b      	ldr	r3, [r7, #16]
 806bd78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bd7a:	68fb      	ldr	r3, [r7, #12]
 806bd7c:	0a5b      	lsrs	r3, r3, #9
 806bd7e:	4413      	add	r3, r2
 806bd80:	4619      	mov	r1, r3
 806bd82:	6938      	ldr	r0, [r7, #16]
 806bd84:	f7ff ff14 	bl	806bbb0 <move_window>
 806bd88:	4603      	mov	r3, r0
 806bd8a:	2b00      	cmp	r3, #0
 806bd8c:	d167      	bne.n	806be5e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 806bd8e:	68fb      	ldr	r3, [r7, #12]
 806bd90:	1c5a      	adds	r2, r3, #1
 806bd92:	60fa      	str	r2, [r7, #12]
 806bd94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bd98:	693a      	ldr	r2, [r7, #16]
 806bd9a:	4413      	add	r3, r2
 806bd9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806bda0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806bda2:	693b      	ldr	r3, [r7, #16]
 806bda4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bda6:	68fb      	ldr	r3, [r7, #12]
 806bda8:	0a5b      	lsrs	r3, r3, #9
 806bdaa:	4413      	add	r3, r2
 806bdac:	4619      	mov	r1, r3
 806bdae:	6938      	ldr	r0, [r7, #16]
 806bdb0:	f7ff fefe 	bl	806bbb0 <move_window>
 806bdb4:	4603      	mov	r3, r0
 806bdb6:	2b00      	cmp	r3, #0
 806bdb8:	d153      	bne.n	806be62 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 806bdba:	68fb      	ldr	r3, [r7, #12]
 806bdbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bdc0:	693a      	ldr	r2, [r7, #16]
 806bdc2:	4413      	add	r3, r2
 806bdc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806bdc8:	021b      	lsls	r3, r3, #8
 806bdca:	461a      	mov	r2, r3
 806bdcc:	68bb      	ldr	r3, [r7, #8]
 806bdce:	4313      	orrs	r3, r2
 806bdd0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 806bdd2:	683b      	ldr	r3, [r7, #0]
 806bdd4:	f003 0301 	and.w	r3, r3, #1
 806bdd8:	2b00      	cmp	r3, #0
 806bdda:	d002      	beq.n	806bde2 <get_fat+0xbc>
 806bddc:	68bb      	ldr	r3, [r7, #8]
 806bdde:	091b      	lsrs	r3, r3, #4
 806bde0:	e002      	b.n	806bde8 <get_fat+0xc2>
 806bde2:	68bb      	ldr	r3, [r7, #8]
 806bde4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 806bde8:	617b      	str	r3, [r7, #20]
			break;
 806bdea:	e03f      	b.n	806be6c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 806bdec:	693b      	ldr	r3, [r7, #16]
 806bdee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bdf0:	683b      	ldr	r3, [r7, #0]
 806bdf2:	0a1b      	lsrs	r3, r3, #8
 806bdf4:	4413      	add	r3, r2
 806bdf6:	4619      	mov	r1, r3
 806bdf8:	6938      	ldr	r0, [r7, #16]
 806bdfa:	f7ff fed9 	bl	806bbb0 <move_window>
 806bdfe:	4603      	mov	r3, r0
 806be00:	2b00      	cmp	r3, #0
 806be02:	d130      	bne.n	806be66 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 806be04:	693b      	ldr	r3, [r7, #16]
 806be06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806be0a:	683b      	ldr	r3, [r7, #0]
 806be0c:	005b      	lsls	r3, r3, #1
 806be0e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 806be12:	4413      	add	r3, r2
 806be14:	4618      	mov	r0, r3
 806be16:	f7ff fbe9 	bl	806b5ec <ld_word>
 806be1a:	4603      	mov	r3, r0
 806be1c:	617b      	str	r3, [r7, #20]
			break;
 806be1e:	e025      	b.n	806be6c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 806be20:	693b      	ldr	r3, [r7, #16]
 806be22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806be24:	683b      	ldr	r3, [r7, #0]
 806be26:	09db      	lsrs	r3, r3, #7
 806be28:	4413      	add	r3, r2
 806be2a:	4619      	mov	r1, r3
 806be2c:	6938      	ldr	r0, [r7, #16]
 806be2e:	f7ff febf 	bl	806bbb0 <move_window>
 806be32:	4603      	mov	r3, r0
 806be34:	2b00      	cmp	r3, #0
 806be36:	d118      	bne.n	806be6a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 806be38:	693b      	ldr	r3, [r7, #16]
 806be3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806be3e:	683b      	ldr	r3, [r7, #0]
 806be40:	009b      	lsls	r3, r3, #2
 806be42:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 806be46:	4413      	add	r3, r2
 806be48:	4618      	mov	r0, r3
 806be4a:	f7ff fbe7 	bl	806b61c <ld_dword>
 806be4e:	4603      	mov	r3, r0
 806be50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 806be54:	617b      	str	r3, [r7, #20]
			break;
 806be56:	e009      	b.n	806be6c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 806be58:	2301      	movs	r3, #1
 806be5a:	617b      	str	r3, [r7, #20]
 806be5c:	e006      	b.n	806be6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806be5e:	bf00      	nop
 806be60:	e004      	b.n	806be6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806be62:	bf00      	nop
 806be64:	e002      	b.n	806be6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 806be66:	bf00      	nop
 806be68:	e000      	b.n	806be6c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 806be6a:	bf00      	nop
		}
	}

	return val;
 806be6c:	697b      	ldr	r3, [r7, #20]
}
 806be6e:	4618      	mov	r0, r3
 806be70:	3718      	adds	r7, #24
 806be72:	46bd      	mov	sp, r7
 806be74:	bd80      	pop	{r7, pc}

0806be76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 806be76:	b590      	push	{r4, r7, lr}
 806be78:	b089      	sub	sp, #36	; 0x24
 806be7a:	af00      	add	r7, sp, #0
 806be7c:	60f8      	str	r0, [r7, #12]
 806be7e:	60b9      	str	r1, [r7, #8]
 806be80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 806be82:	2302      	movs	r3, #2
 806be84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 806be86:	68bb      	ldr	r3, [r7, #8]
 806be88:	2b01      	cmp	r3, #1
 806be8a:	f240 80d2 	bls.w	806c032 <put_fat+0x1bc>
 806be8e:	68fb      	ldr	r3, [r7, #12]
 806be90:	699b      	ldr	r3, [r3, #24]
 806be92:	68ba      	ldr	r2, [r7, #8]
 806be94:	429a      	cmp	r2, r3
 806be96:	f080 80cc 	bcs.w	806c032 <put_fat+0x1bc>
		switch (fs->fs_type) {
 806be9a:	68fb      	ldr	r3, [r7, #12]
 806be9c:	781b      	ldrb	r3, [r3, #0]
 806be9e:	2b03      	cmp	r3, #3
 806bea0:	f000 8096 	beq.w	806bfd0 <put_fat+0x15a>
 806bea4:	2b03      	cmp	r3, #3
 806bea6:	f300 80cd 	bgt.w	806c044 <put_fat+0x1ce>
 806beaa:	2b01      	cmp	r3, #1
 806beac:	d002      	beq.n	806beb4 <put_fat+0x3e>
 806beae:	2b02      	cmp	r3, #2
 806beb0:	d06e      	beq.n	806bf90 <put_fat+0x11a>
 806beb2:	e0c7      	b.n	806c044 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 806beb4:	68bb      	ldr	r3, [r7, #8]
 806beb6:	61bb      	str	r3, [r7, #24]
 806beb8:	69bb      	ldr	r3, [r7, #24]
 806beba:	085b      	lsrs	r3, r3, #1
 806bebc:	69ba      	ldr	r2, [r7, #24]
 806bebe:	4413      	add	r3, r2
 806bec0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 806bec2:	68fb      	ldr	r3, [r7, #12]
 806bec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bec6:	69bb      	ldr	r3, [r7, #24]
 806bec8:	0a5b      	lsrs	r3, r3, #9
 806beca:	4413      	add	r3, r2
 806becc:	4619      	mov	r1, r3
 806bece:	68f8      	ldr	r0, [r7, #12]
 806bed0:	f7ff fe6e 	bl	806bbb0 <move_window>
 806bed4:	4603      	mov	r3, r0
 806bed6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806bed8:	7ffb      	ldrb	r3, [r7, #31]
 806beda:	2b00      	cmp	r3, #0
 806bedc:	f040 80ab 	bne.w	806c036 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 806bee0:	68fb      	ldr	r3, [r7, #12]
 806bee2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bee6:	69bb      	ldr	r3, [r7, #24]
 806bee8:	1c59      	adds	r1, r3, #1
 806beea:	61b9      	str	r1, [r7, #24]
 806beec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bef0:	4413      	add	r3, r2
 806bef2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 806bef4:	68bb      	ldr	r3, [r7, #8]
 806bef6:	f003 0301 	and.w	r3, r3, #1
 806befa:	2b00      	cmp	r3, #0
 806befc:	d00d      	beq.n	806bf1a <put_fat+0xa4>
 806befe:	697b      	ldr	r3, [r7, #20]
 806bf00:	781b      	ldrb	r3, [r3, #0]
 806bf02:	b25b      	sxtb	r3, r3
 806bf04:	f003 030f 	and.w	r3, r3, #15
 806bf08:	b25a      	sxtb	r2, r3
 806bf0a:	687b      	ldr	r3, [r7, #4]
 806bf0c:	b2db      	uxtb	r3, r3
 806bf0e:	011b      	lsls	r3, r3, #4
 806bf10:	b25b      	sxtb	r3, r3
 806bf12:	4313      	orrs	r3, r2
 806bf14:	b25b      	sxtb	r3, r3
 806bf16:	b2db      	uxtb	r3, r3
 806bf18:	e001      	b.n	806bf1e <put_fat+0xa8>
 806bf1a:	687b      	ldr	r3, [r7, #4]
 806bf1c:	b2db      	uxtb	r3, r3
 806bf1e:	697a      	ldr	r2, [r7, #20]
 806bf20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 806bf22:	68fb      	ldr	r3, [r7, #12]
 806bf24:	2201      	movs	r2, #1
 806bf26:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 806bf28:	68fb      	ldr	r3, [r7, #12]
 806bf2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bf2c:	69bb      	ldr	r3, [r7, #24]
 806bf2e:	0a5b      	lsrs	r3, r3, #9
 806bf30:	4413      	add	r3, r2
 806bf32:	4619      	mov	r1, r3
 806bf34:	68f8      	ldr	r0, [r7, #12]
 806bf36:	f7ff fe3b 	bl	806bbb0 <move_window>
 806bf3a:	4603      	mov	r3, r0
 806bf3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806bf3e:	7ffb      	ldrb	r3, [r7, #31]
 806bf40:	2b00      	cmp	r3, #0
 806bf42:	d17a      	bne.n	806c03a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 806bf44:	68fb      	ldr	r3, [r7, #12]
 806bf46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bf4a:	69bb      	ldr	r3, [r7, #24]
 806bf4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bf50:	4413      	add	r3, r2
 806bf52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 806bf54:	68bb      	ldr	r3, [r7, #8]
 806bf56:	f003 0301 	and.w	r3, r3, #1
 806bf5a:	2b00      	cmp	r3, #0
 806bf5c:	d003      	beq.n	806bf66 <put_fat+0xf0>
 806bf5e:	687b      	ldr	r3, [r7, #4]
 806bf60:	091b      	lsrs	r3, r3, #4
 806bf62:	b2db      	uxtb	r3, r3
 806bf64:	e00e      	b.n	806bf84 <put_fat+0x10e>
 806bf66:	697b      	ldr	r3, [r7, #20]
 806bf68:	781b      	ldrb	r3, [r3, #0]
 806bf6a:	b25b      	sxtb	r3, r3
 806bf6c:	f023 030f 	bic.w	r3, r3, #15
 806bf70:	b25a      	sxtb	r2, r3
 806bf72:	687b      	ldr	r3, [r7, #4]
 806bf74:	0a1b      	lsrs	r3, r3, #8
 806bf76:	b25b      	sxtb	r3, r3
 806bf78:	f003 030f 	and.w	r3, r3, #15
 806bf7c:	b25b      	sxtb	r3, r3
 806bf7e:	4313      	orrs	r3, r2
 806bf80:	b25b      	sxtb	r3, r3
 806bf82:	b2db      	uxtb	r3, r3
 806bf84:	697a      	ldr	r2, [r7, #20]
 806bf86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 806bf88:	68fb      	ldr	r3, [r7, #12]
 806bf8a:	2201      	movs	r2, #1
 806bf8c:	70da      	strb	r2, [r3, #3]
			break;
 806bf8e:	e059      	b.n	806c044 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 806bf90:	68fb      	ldr	r3, [r7, #12]
 806bf92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bf94:	68bb      	ldr	r3, [r7, #8]
 806bf96:	0a1b      	lsrs	r3, r3, #8
 806bf98:	4413      	add	r3, r2
 806bf9a:	4619      	mov	r1, r3
 806bf9c:	68f8      	ldr	r0, [r7, #12]
 806bf9e:	f7ff fe07 	bl	806bbb0 <move_window>
 806bfa2:	4603      	mov	r3, r0
 806bfa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806bfa6:	7ffb      	ldrb	r3, [r7, #31]
 806bfa8:	2b00      	cmp	r3, #0
 806bfaa:	d148      	bne.n	806c03e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 806bfac:	68fb      	ldr	r3, [r7, #12]
 806bfae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bfb2:	68bb      	ldr	r3, [r7, #8]
 806bfb4:	005b      	lsls	r3, r3, #1
 806bfb6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 806bfba:	4413      	add	r3, r2
 806bfbc:	687a      	ldr	r2, [r7, #4]
 806bfbe:	b292      	uxth	r2, r2
 806bfc0:	4611      	mov	r1, r2
 806bfc2:	4618      	mov	r0, r3
 806bfc4:	f7ff fb4d 	bl	806b662 <st_word>
			fs->wflag = 1;
 806bfc8:	68fb      	ldr	r3, [r7, #12]
 806bfca:	2201      	movs	r2, #1
 806bfcc:	70da      	strb	r2, [r3, #3]
			break;
 806bfce:	e039      	b.n	806c044 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 806bfd0:	68fb      	ldr	r3, [r7, #12]
 806bfd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bfd4:	68bb      	ldr	r3, [r7, #8]
 806bfd6:	09db      	lsrs	r3, r3, #7
 806bfd8:	4413      	add	r3, r2
 806bfda:	4619      	mov	r1, r3
 806bfdc:	68f8      	ldr	r0, [r7, #12]
 806bfde:	f7ff fde7 	bl	806bbb0 <move_window>
 806bfe2:	4603      	mov	r3, r0
 806bfe4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806bfe6:	7ffb      	ldrb	r3, [r7, #31]
 806bfe8:	2b00      	cmp	r3, #0
 806bfea:	d12a      	bne.n	806c042 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 806bfec:	687b      	ldr	r3, [r7, #4]
 806bfee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 806bff2:	68fb      	ldr	r3, [r7, #12]
 806bff4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bff8:	68bb      	ldr	r3, [r7, #8]
 806bffa:	009b      	lsls	r3, r3, #2
 806bffc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 806c000:	4413      	add	r3, r2
 806c002:	4618      	mov	r0, r3
 806c004:	f7ff fb0a 	bl	806b61c <ld_dword>
 806c008:	4603      	mov	r3, r0
 806c00a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 806c00e:	4323      	orrs	r3, r4
 806c010:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 806c012:	68fb      	ldr	r3, [r7, #12]
 806c014:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806c018:	68bb      	ldr	r3, [r7, #8]
 806c01a:	009b      	lsls	r3, r3, #2
 806c01c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 806c020:	4413      	add	r3, r2
 806c022:	6879      	ldr	r1, [r7, #4]
 806c024:	4618      	mov	r0, r3
 806c026:	f7ff fb37 	bl	806b698 <st_dword>
			fs->wflag = 1;
 806c02a:	68fb      	ldr	r3, [r7, #12]
 806c02c:	2201      	movs	r2, #1
 806c02e:	70da      	strb	r2, [r3, #3]
			break;
 806c030:	e008      	b.n	806c044 <put_fat+0x1ce>
		}
	}
 806c032:	bf00      	nop
 806c034:	e006      	b.n	806c044 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806c036:	bf00      	nop
 806c038:	e004      	b.n	806c044 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806c03a:	bf00      	nop
 806c03c:	e002      	b.n	806c044 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806c03e:	bf00      	nop
 806c040:	e000      	b.n	806c044 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806c042:	bf00      	nop
	return res;
 806c044:	7ffb      	ldrb	r3, [r7, #31]
}
 806c046:	4618      	mov	r0, r3
 806c048:	3724      	adds	r7, #36	; 0x24
 806c04a:	46bd      	mov	sp, r7
 806c04c:	bd90      	pop	{r4, r7, pc}

0806c04e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 806c04e:	b580      	push	{r7, lr}
 806c050:	b088      	sub	sp, #32
 806c052:	af00      	add	r7, sp, #0
 806c054:	60f8      	str	r0, [r7, #12]
 806c056:	60b9      	str	r1, [r7, #8]
 806c058:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 806c05a:	2300      	movs	r3, #0
 806c05c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 806c05e:	68fb      	ldr	r3, [r7, #12]
 806c060:	681b      	ldr	r3, [r3, #0]
 806c062:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 806c064:	68bb      	ldr	r3, [r7, #8]
 806c066:	2b01      	cmp	r3, #1
 806c068:	d904      	bls.n	806c074 <remove_chain+0x26>
 806c06a:	69bb      	ldr	r3, [r7, #24]
 806c06c:	699b      	ldr	r3, [r3, #24]
 806c06e:	68ba      	ldr	r2, [r7, #8]
 806c070:	429a      	cmp	r2, r3
 806c072:	d301      	bcc.n	806c078 <remove_chain+0x2a>
 806c074:	2302      	movs	r3, #2
 806c076:	e04b      	b.n	806c110 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 806c078:	687b      	ldr	r3, [r7, #4]
 806c07a:	2b00      	cmp	r3, #0
 806c07c:	d00c      	beq.n	806c098 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 806c07e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806c082:	6879      	ldr	r1, [r7, #4]
 806c084:	69b8      	ldr	r0, [r7, #24]
 806c086:	f7ff fef6 	bl	806be76 <put_fat>
 806c08a:	4603      	mov	r3, r0
 806c08c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 806c08e:	7ffb      	ldrb	r3, [r7, #31]
 806c090:	2b00      	cmp	r3, #0
 806c092:	d001      	beq.n	806c098 <remove_chain+0x4a>
 806c094:	7ffb      	ldrb	r3, [r7, #31]
 806c096:	e03b      	b.n	806c110 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 806c098:	68b9      	ldr	r1, [r7, #8]
 806c09a:	68f8      	ldr	r0, [r7, #12]
 806c09c:	f7ff fe43 	bl	806bd26 <get_fat>
 806c0a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 806c0a2:	697b      	ldr	r3, [r7, #20]
 806c0a4:	2b00      	cmp	r3, #0
 806c0a6:	d031      	beq.n	806c10c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 806c0a8:	697b      	ldr	r3, [r7, #20]
 806c0aa:	2b01      	cmp	r3, #1
 806c0ac:	d101      	bne.n	806c0b2 <remove_chain+0x64>
 806c0ae:	2302      	movs	r3, #2
 806c0b0:	e02e      	b.n	806c110 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 806c0b2:	697b      	ldr	r3, [r7, #20]
 806c0b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806c0b8:	d101      	bne.n	806c0be <remove_chain+0x70>
 806c0ba:	2301      	movs	r3, #1
 806c0bc:	e028      	b.n	806c110 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 806c0be:	2200      	movs	r2, #0
 806c0c0:	68b9      	ldr	r1, [r7, #8]
 806c0c2:	69b8      	ldr	r0, [r7, #24]
 806c0c4:	f7ff fed7 	bl	806be76 <put_fat>
 806c0c8:	4603      	mov	r3, r0
 806c0ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 806c0cc:	7ffb      	ldrb	r3, [r7, #31]
 806c0ce:	2b00      	cmp	r3, #0
 806c0d0:	d001      	beq.n	806c0d6 <remove_chain+0x88>
 806c0d2:	7ffb      	ldrb	r3, [r7, #31]
 806c0d4:	e01c      	b.n	806c110 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 806c0d6:	69bb      	ldr	r3, [r7, #24]
 806c0d8:	695a      	ldr	r2, [r3, #20]
 806c0da:	69bb      	ldr	r3, [r7, #24]
 806c0dc:	699b      	ldr	r3, [r3, #24]
 806c0de:	3b02      	subs	r3, #2
 806c0e0:	429a      	cmp	r2, r3
 806c0e2:	d20b      	bcs.n	806c0fc <remove_chain+0xae>
			fs->free_clst++;
 806c0e4:	69bb      	ldr	r3, [r7, #24]
 806c0e6:	695b      	ldr	r3, [r3, #20]
 806c0e8:	1c5a      	adds	r2, r3, #1
 806c0ea:	69bb      	ldr	r3, [r7, #24]
 806c0ec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 806c0ee:	69bb      	ldr	r3, [r7, #24]
 806c0f0:	791b      	ldrb	r3, [r3, #4]
 806c0f2:	f043 0301 	orr.w	r3, r3, #1
 806c0f6:	b2da      	uxtb	r2, r3
 806c0f8:	69bb      	ldr	r3, [r7, #24]
 806c0fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 806c0fc:	697b      	ldr	r3, [r7, #20]
 806c0fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 806c100:	69bb      	ldr	r3, [r7, #24]
 806c102:	699b      	ldr	r3, [r3, #24]
 806c104:	68ba      	ldr	r2, [r7, #8]
 806c106:	429a      	cmp	r2, r3
 806c108:	d3c6      	bcc.n	806c098 <remove_chain+0x4a>
 806c10a:	e000      	b.n	806c10e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 806c10c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 806c10e:	2300      	movs	r3, #0
}
 806c110:	4618      	mov	r0, r3
 806c112:	3720      	adds	r7, #32
 806c114:	46bd      	mov	sp, r7
 806c116:	bd80      	pop	{r7, pc}

0806c118 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 806c118:	b580      	push	{r7, lr}
 806c11a:	b088      	sub	sp, #32
 806c11c:	af00      	add	r7, sp, #0
 806c11e:	6078      	str	r0, [r7, #4]
 806c120:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 806c122:	687b      	ldr	r3, [r7, #4]
 806c124:	681b      	ldr	r3, [r3, #0]
 806c126:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 806c128:	683b      	ldr	r3, [r7, #0]
 806c12a:	2b00      	cmp	r3, #0
 806c12c:	d10d      	bne.n	806c14a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 806c12e:	693b      	ldr	r3, [r7, #16]
 806c130:	691b      	ldr	r3, [r3, #16]
 806c132:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 806c134:	69bb      	ldr	r3, [r7, #24]
 806c136:	2b00      	cmp	r3, #0
 806c138:	d004      	beq.n	806c144 <create_chain+0x2c>
 806c13a:	693b      	ldr	r3, [r7, #16]
 806c13c:	699b      	ldr	r3, [r3, #24]
 806c13e:	69ba      	ldr	r2, [r7, #24]
 806c140:	429a      	cmp	r2, r3
 806c142:	d31b      	bcc.n	806c17c <create_chain+0x64>
 806c144:	2301      	movs	r3, #1
 806c146:	61bb      	str	r3, [r7, #24]
 806c148:	e018      	b.n	806c17c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 806c14a:	6839      	ldr	r1, [r7, #0]
 806c14c:	6878      	ldr	r0, [r7, #4]
 806c14e:	f7ff fdea 	bl	806bd26 <get_fat>
 806c152:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 806c154:	68fb      	ldr	r3, [r7, #12]
 806c156:	2b01      	cmp	r3, #1
 806c158:	d801      	bhi.n	806c15e <create_chain+0x46>
 806c15a:	2301      	movs	r3, #1
 806c15c:	e070      	b.n	806c240 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 806c15e:	68fb      	ldr	r3, [r7, #12]
 806c160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806c164:	d101      	bne.n	806c16a <create_chain+0x52>
 806c166:	68fb      	ldr	r3, [r7, #12]
 806c168:	e06a      	b.n	806c240 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 806c16a:	693b      	ldr	r3, [r7, #16]
 806c16c:	699b      	ldr	r3, [r3, #24]
 806c16e:	68fa      	ldr	r2, [r7, #12]
 806c170:	429a      	cmp	r2, r3
 806c172:	d201      	bcs.n	806c178 <create_chain+0x60>
 806c174:	68fb      	ldr	r3, [r7, #12]
 806c176:	e063      	b.n	806c240 <create_chain+0x128>
		scl = clst;
 806c178:	683b      	ldr	r3, [r7, #0]
 806c17a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 806c17c:	69bb      	ldr	r3, [r7, #24]
 806c17e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 806c180:	69fb      	ldr	r3, [r7, #28]
 806c182:	3301      	adds	r3, #1
 806c184:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 806c186:	693b      	ldr	r3, [r7, #16]
 806c188:	699b      	ldr	r3, [r3, #24]
 806c18a:	69fa      	ldr	r2, [r7, #28]
 806c18c:	429a      	cmp	r2, r3
 806c18e:	d307      	bcc.n	806c1a0 <create_chain+0x88>
				ncl = 2;
 806c190:	2302      	movs	r3, #2
 806c192:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 806c194:	69fa      	ldr	r2, [r7, #28]
 806c196:	69bb      	ldr	r3, [r7, #24]
 806c198:	429a      	cmp	r2, r3
 806c19a:	d901      	bls.n	806c1a0 <create_chain+0x88>
 806c19c:	2300      	movs	r3, #0
 806c19e:	e04f      	b.n	806c240 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 806c1a0:	69f9      	ldr	r1, [r7, #28]
 806c1a2:	6878      	ldr	r0, [r7, #4]
 806c1a4:	f7ff fdbf 	bl	806bd26 <get_fat>
 806c1a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 806c1aa:	68fb      	ldr	r3, [r7, #12]
 806c1ac:	2b00      	cmp	r3, #0
 806c1ae:	d00e      	beq.n	806c1ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 806c1b0:	68fb      	ldr	r3, [r7, #12]
 806c1b2:	2b01      	cmp	r3, #1
 806c1b4:	d003      	beq.n	806c1be <create_chain+0xa6>
 806c1b6:	68fb      	ldr	r3, [r7, #12]
 806c1b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806c1bc:	d101      	bne.n	806c1c2 <create_chain+0xaa>
 806c1be:	68fb      	ldr	r3, [r7, #12]
 806c1c0:	e03e      	b.n	806c240 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 806c1c2:	69fa      	ldr	r2, [r7, #28]
 806c1c4:	69bb      	ldr	r3, [r7, #24]
 806c1c6:	429a      	cmp	r2, r3
 806c1c8:	d1da      	bne.n	806c180 <create_chain+0x68>
 806c1ca:	2300      	movs	r3, #0
 806c1cc:	e038      	b.n	806c240 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 806c1ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 806c1d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806c1d4:	69f9      	ldr	r1, [r7, #28]
 806c1d6:	6938      	ldr	r0, [r7, #16]
 806c1d8:	f7ff fe4d 	bl	806be76 <put_fat>
 806c1dc:	4603      	mov	r3, r0
 806c1de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 806c1e0:	7dfb      	ldrb	r3, [r7, #23]
 806c1e2:	2b00      	cmp	r3, #0
 806c1e4:	d109      	bne.n	806c1fa <create_chain+0xe2>
 806c1e6:	683b      	ldr	r3, [r7, #0]
 806c1e8:	2b00      	cmp	r3, #0
 806c1ea:	d006      	beq.n	806c1fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 806c1ec:	69fa      	ldr	r2, [r7, #28]
 806c1ee:	6839      	ldr	r1, [r7, #0]
 806c1f0:	6938      	ldr	r0, [r7, #16]
 806c1f2:	f7ff fe40 	bl	806be76 <put_fat>
 806c1f6:	4603      	mov	r3, r0
 806c1f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 806c1fa:	7dfb      	ldrb	r3, [r7, #23]
 806c1fc:	2b00      	cmp	r3, #0
 806c1fe:	d116      	bne.n	806c22e <create_chain+0x116>
		fs->last_clst = ncl;
 806c200:	693b      	ldr	r3, [r7, #16]
 806c202:	69fa      	ldr	r2, [r7, #28]
 806c204:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 806c206:	693b      	ldr	r3, [r7, #16]
 806c208:	695a      	ldr	r2, [r3, #20]
 806c20a:	693b      	ldr	r3, [r7, #16]
 806c20c:	699b      	ldr	r3, [r3, #24]
 806c20e:	3b02      	subs	r3, #2
 806c210:	429a      	cmp	r2, r3
 806c212:	d804      	bhi.n	806c21e <create_chain+0x106>
 806c214:	693b      	ldr	r3, [r7, #16]
 806c216:	695b      	ldr	r3, [r3, #20]
 806c218:	1e5a      	subs	r2, r3, #1
 806c21a:	693b      	ldr	r3, [r7, #16]
 806c21c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 806c21e:	693b      	ldr	r3, [r7, #16]
 806c220:	791b      	ldrb	r3, [r3, #4]
 806c222:	f043 0301 	orr.w	r3, r3, #1
 806c226:	b2da      	uxtb	r2, r3
 806c228:	693b      	ldr	r3, [r7, #16]
 806c22a:	711a      	strb	r2, [r3, #4]
 806c22c:	e007      	b.n	806c23e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 806c22e:	7dfb      	ldrb	r3, [r7, #23]
 806c230:	2b01      	cmp	r3, #1
 806c232:	d102      	bne.n	806c23a <create_chain+0x122>
 806c234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806c238:	e000      	b.n	806c23c <create_chain+0x124>
 806c23a:	2301      	movs	r3, #1
 806c23c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 806c23e:	69fb      	ldr	r3, [r7, #28]
}
 806c240:	4618      	mov	r0, r3
 806c242:	3720      	adds	r7, #32
 806c244:	46bd      	mov	sp, r7
 806c246:	bd80      	pop	{r7, pc}

0806c248 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 806c248:	b480      	push	{r7}
 806c24a:	b087      	sub	sp, #28
 806c24c:	af00      	add	r7, sp, #0
 806c24e:	6078      	str	r0, [r7, #4]
 806c250:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 806c252:	687b      	ldr	r3, [r7, #4]
 806c254:	681b      	ldr	r3, [r3, #0]
 806c256:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 806c258:	687b      	ldr	r3, [r7, #4]
 806c25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806c25c:	3304      	adds	r3, #4
 806c25e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 806c260:	683b      	ldr	r3, [r7, #0]
 806c262:	0a5b      	lsrs	r3, r3, #9
 806c264:	68fa      	ldr	r2, [r7, #12]
 806c266:	8952      	ldrh	r2, [r2, #10]
 806c268:	fbb3 f3f2 	udiv	r3, r3, r2
 806c26c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 806c26e:	693b      	ldr	r3, [r7, #16]
 806c270:	1d1a      	adds	r2, r3, #4
 806c272:	613a      	str	r2, [r7, #16]
 806c274:	681b      	ldr	r3, [r3, #0]
 806c276:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 806c278:	68bb      	ldr	r3, [r7, #8]
 806c27a:	2b00      	cmp	r3, #0
 806c27c:	d101      	bne.n	806c282 <clmt_clust+0x3a>
 806c27e:	2300      	movs	r3, #0
 806c280:	e010      	b.n	806c2a4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 806c282:	697a      	ldr	r2, [r7, #20]
 806c284:	68bb      	ldr	r3, [r7, #8]
 806c286:	429a      	cmp	r2, r3
 806c288:	d307      	bcc.n	806c29a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 806c28a:	697a      	ldr	r2, [r7, #20]
 806c28c:	68bb      	ldr	r3, [r7, #8]
 806c28e:	1ad3      	subs	r3, r2, r3
 806c290:	617b      	str	r3, [r7, #20]
 806c292:	693b      	ldr	r3, [r7, #16]
 806c294:	3304      	adds	r3, #4
 806c296:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 806c298:	e7e9      	b.n	806c26e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 806c29a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 806c29c:	693b      	ldr	r3, [r7, #16]
 806c29e:	681a      	ldr	r2, [r3, #0]
 806c2a0:	697b      	ldr	r3, [r7, #20]
 806c2a2:	4413      	add	r3, r2
}
 806c2a4:	4618      	mov	r0, r3
 806c2a6:	371c      	adds	r7, #28
 806c2a8:	46bd      	mov	sp, r7
 806c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c2ae:	4770      	bx	lr

0806c2b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 806c2b0:	b580      	push	{r7, lr}
 806c2b2:	b086      	sub	sp, #24
 806c2b4:	af00      	add	r7, sp, #0
 806c2b6:	6078      	str	r0, [r7, #4]
 806c2b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 806c2ba:	687b      	ldr	r3, [r7, #4]
 806c2bc:	681b      	ldr	r3, [r3, #0]
 806c2be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 806c2c0:	683b      	ldr	r3, [r7, #0]
 806c2c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 806c2c6:	d204      	bcs.n	806c2d2 <dir_sdi+0x22>
 806c2c8:	683b      	ldr	r3, [r7, #0]
 806c2ca:	f003 031f 	and.w	r3, r3, #31
 806c2ce:	2b00      	cmp	r3, #0
 806c2d0:	d001      	beq.n	806c2d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 806c2d2:	2302      	movs	r3, #2
 806c2d4:	e063      	b.n	806c39e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 806c2d6:	687b      	ldr	r3, [r7, #4]
 806c2d8:	683a      	ldr	r2, [r7, #0]
 806c2da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 806c2dc:	687b      	ldr	r3, [r7, #4]
 806c2de:	689b      	ldr	r3, [r3, #8]
 806c2e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 806c2e2:	697b      	ldr	r3, [r7, #20]
 806c2e4:	2b00      	cmp	r3, #0
 806c2e6:	d106      	bne.n	806c2f6 <dir_sdi+0x46>
 806c2e8:	693b      	ldr	r3, [r7, #16]
 806c2ea:	781b      	ldrb	r3, [r3, #0]
 806c2ec:	2b02      	cmp	r3, #2
 806c2ee:	d902      	bls.n	806c2f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 806c2f0:	693b      	ldr	r3, [r7, #16]
 806c2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806c2f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 806c2f6:	697b      	ldr	r3, [r7, #20]
 806c2f8:	2b00      	cmp	r3, #0
 806c2fa:	d10c      	bne.n	806c316 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 806c2fc:	683b      	ldr	r3, [r7, #0]
 806c2fe:	095b      	lsrs	r3, r3, #5
 806c300:	693a      	ldr	r2, [r7, #16]
 806c302:	8912      	ldrh	r2, [r2, #8]
 806c304:	4293      	cmp	r3, r2
 806c306:	d301      	bcc.n	806c30c <dir_sdi+0x5c>
 806c308:	2302      	movs	r3, #2
 806c30a:	e048      	b.n	806c39e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 806c30c:	693b      	ldr	r3, [r7, #16]
 806c30e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 806c310:	687b      	ldr	r3, [r7, #4]
 806c312:	61da      	str	r2, [r3, #28]
 806c314:	e029      	b.n	806c36a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 806c316:	693b      	ldr	r3, [r7, #16]
 806c318:	895b      	ldrh	r3, [r3, #10]
 806c31a:	025b      	lsls	r3, r3, #9
 806c31c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 806c31e:	e019      	b.n	806c354 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 806c320:	687b      	ldr	r3, [r7, #4]
 806c322:	6979      	ldr	r1, [r7, #20]
 806c324:	4618      	mov	r0, r3
 806c326:	f7ff fcfe 	bl	806bd26 <get_fat>
 806c32a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 806c32c:	697b      	ldr	r3, [r7, #20]
 806c32e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806c332:	d101      	bne.n	806c338 <dir_sdi+0x88>
 806c334:	2301      	movs	r3, #1
 806c336:	e032      	b.n	806c39e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 806c338:	697b      	ldr	r3, [r7, #20]
 806c33a:	2b01      	cmp	r3, #1
 806c33c:	d904      	bls.n	806c348 <dir_sdi+0x98>
 806c33e:	693b      	ldr	r3, [r7, #16]
 806c340:	699b      	ldr	r3, [r3, #24]
 806c342:	697a      	ldr	r2, [r7, #20]
 806c344:	429a      	cmp	r2, r3
 806c346:	d301      	bcc.n	806c34c <dir_sdi+0x9c>
 806c348:	2302      	movs	r3, #2
 806c34a:	e028      	b.n	806c39e <dir_sdi+0xee>
			ofs -= csz;
 806c34c:	683a      	ldr	r2, [r7, #0]
 806c34e:	68fb      	ldr	r3, [r7, #12]
 806c350:	1ad3      	subs	r3, r2, r3
 806c352:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 806c354:	683a      	ldr	r2, [r7, #0]
 806c356:	68fb      	ldr	r3, [r7, #12]
 806c358:	429a      	cmp	r2, r3
 806c35a:	d2e1      	bcs.n	806c320 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 806c35c:	6979      	ldr	r1, [r7, #20]
 806c35e:	6938      	ldr	r0, [r7, #16]
 806c360:	f7ff fcc2 	bl	806bce8 <clust2sect>
 806c364:	4602      	mov	r2, r0
 806c366:	687b      	ldr	r3, [r7, #4]
 806c368:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 806c36a:	687b      	ldr	r3, [r7, #4]
 806c36c:	697a      	ldr	r2, [r7, #20]
 806c36e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 806c370:	687b      	ldr	r3, [r7, #4]
 806c372:	69db      	ldr	r3, [r3, #28]
 806c374:	2b00      	cmp	r3, #0
 806c376:	d101      	bne.n	806c37c <dir_sdi+0xcc>
 806c378:	2302      	movs	r3, #2
 806c37a:	e010      	b.n	806c39e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 806c37c:	687b      	ldr	r3, [r7, #4]
 806c37e:	69da      	ldr	r2, [r3, #28]
 806c380:	683b      	ldr	r3, [r7, #0]
 806c382:	0a5b      	lsrs	r3, r3, #9
 806c384:	441a      	add	r2, r3
 806c386:	687b      	ldr	r3, [r7, #4]
 806c388:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 806c38a:	693b      	ldr	r3, [r7, #16]
 806c38c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806c390:	683b      	ldr	r3, [r7, #0]
 806c392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806c396:	441a      	add	r2, r3
 806c398:	687b      	ldr	r3, [r7, #4]
 806c39a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 806c39c:	2300      	movs	r3, #0
}
 806c39e:	4618      	mov	r0, r3
 806c3a0:	3718      	adds	r7, #24
 806c3a2:	46bd      	mov	sp, r7
 806c3a4:	bd80      	pop	{r7, pc}

0806c3a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 806c3a6:	b580      	push	{r7, lr}
 806c3a8:	b086      	sub	sp, #24
 806c3aa:	af00      	add	r7, sp, #0
 806c3ac:	6078      	str	r0, [r7, #4]
 806c3ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 806c3b0:	687b      	ldr	r3, [r7, #4]
 806c3b2:	681b      	ldr	r3, [r3, #0]
 806c3b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 806c3b6:	687b      	ldr	r3, [r7, #4]
 806c3b8:	695b      	ldr	r3, [r3, #20]
 806c3ba:	3320      	adds	r3, #32
 806c3bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 806c3be:	687b      	ldr	r3, [r7, #4]
 806c3c0:	69db      	ldr	r3, [r3, #28]
 806c3c2:	2b00      	cmp	r3, #0
 806c3c4:	d003      	beq.n	806c3ce <dir_next+0x28>
 806c3c6:	68bb      	ldr	r3, [r7, #8]
 806c3c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 806c3cc:	d301      	bcc.n	806c3d2 <dir_next+0x2c>
 806c3ce:	2304      	movs	r3, #4
 806c3d0:	e0aa      	b.n	806c528 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 806c3d2:	68bb      	ldr	r3, [r7, #8]
 806c3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806c3d8:	2b00      	cmp	r3, #0
 806c3da:	f040 8098 	bne.w	806c50e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 806c3de:	687b      	ldr	r3, [r7, #4]
 806c3e0:	69db      	ldr	r3, [r3, #28]
 806c3e2:	1c5a      	adds	r2, r3, #1
 806c3e4:	687b      	ldr	r3, [r7, #4]
 806c3e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 806c3e8:	687b      	ldr	r3, [r7, #4]
 806c3ea:	699b      	ldr	r3, [r3, #24]
 806c3ec:	2b00      	cmp	r3, #0
 806c3ee:	d10b      	bne.n	806c408 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 806c3f0:	68bb      	ldr	r3, [r7, #8]
 806c3f2:	095b      	lsrs	r3, r3, #5
 806c3f4:	68fa      	ldr	r2, [r7, #12]
 806c3f6:	8912      	ldrh	r2, [r2, #8]
 806c3f8:	4293      	cmp	r3, r2
 806c3fa:	f0c0 8088 	bcc.w	806c50e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 806c3fe:	687b      	ldr	r3, [r7, #4]
 806c400:	2200      	movs	r2, #0
 806c402:	61da      	str	r2, [r3, #28]
 806c404:	2304      	movs	r3, #4
 806c406:	e08f      	b.n	806c528 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 806c408:	68bb      	ldr	r3, [r7, #8]
 806c40a:	0a5b      	lsrs	r3, r3, #9
 806c40c:	68fa      	ldr	r2, [r7, #12]
 806c40e:	8952      	ldrh	r2, [r2, #10]
 806c410:	3a01      	subs	r2, #1
 806c412:	4013      	ands	r3, r2
 806c414:	2b00      	cmp	r3, #0
 806c416:	d17a      	bne.n	806c50e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 806c418:	687a      	ldr	r2, [r7, #4]
 806c41a:	687b      	ldr	r3, [r7, #4]
 806c41c:	699b      	ldr	r3, [r3, #24]
 806c41e:	4619      	mov	r1, r3
 806c420:	4610      	mov	r0, r2
 806c422:	f7ff fc80 	bl	806bd26 <get_fat>
 806c426:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 806c428:	697b      	ldr	r3, [r7, #20]
 806c42a:	2b01      	cmp	r3, #1
 806c42c:	d801      	bhi.n	806c432 <dir_next+0x8c>
 806c42e:	2302      	movs	r3, #2
 806c430:	e07a      	b.n	806c528 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 806c432:	697b      	ldr	r3, [r7, #20]
 806c434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806c438:	d101      	bne.n	806c43e <dir_next+0x98>
 806c43a:	2301      	movs	r3, #1
 806c43c:	e074      	b.n	806c528 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 806c43e:	68fb      	ldr	r3, [r7, #12]
 806c440:	699b      	ldr	r3, [r3, #24]
 806c442:	697a      	ldr	r2, [r7, #20]
 806c444:	429a      	cmp	r2, r3
 806c446:	d358      	bcc.n	806c4fa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 806c448:	683b      	ldr	r3, [r7, #0]
 806c44a:	2b00      	cmp	r3, #0
 806c44c:	d104      	bne.n	806c458 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 806c44e:	687b      	ldr	r3, [r7, #4]
 806c450:	2200      	movs	r2, #0
 806c452:	61da      	str	r2, [r3, #28]
 806c454:	2304      	movs	r3, #4
 806c456:	e067      	b.n	806c528 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 806c458:	687a      	ldr	r2, [r7, #4]
 806c45a:	687b      	ldr	r3, [r7, #4]
 806c45c:	699b      	ldr	r3, [r3, #24]
 806c45e:	4619      	mov	r1, r3
 806c460:	4610      	mov	r0, r2
 806c462:	f7ff fe59 	bl	806c118 <create_chain>
 806c466:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 806c468:	697b      	ldr	r3, [r7, #20]
 806c46a:	2b00      	cmp	r3, #0
 806c46c:	d101      	bne.n	806c472 <dir_next+0xcc>
 806c46e:	2307      	movs	r3, #7
 806c470:	e05a      	b.n	806c528 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 806c472:	697b      	ldr	r3, [r7, #20]
 806c474:	2b01      	cmp	r3, #1
 806c476:	d101      	bne.n	806c47c <dir_next+0xd6>
 806c478:	2302      	movs	r3, #2
 806c47a:	e055      	b.n	806c528 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 806c47c:	697b      	ldr	r3, [r7, #20]
 806c47e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806c482:	d101      	bne.n	806c488 <dir_next+0xe2>
 806c484:	2301      	movs	r3, #1
 806c486:	e04f      	b.n	806c528 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 806c488:	68f8      	ldr	r0, [r7, #12]
 806c48a:	f7ff fb4d 	bl	806bb28 <sync_window>
 806c48e:	4603      	mov	r3, r0
 806c490:	2b00      	cmp	r3, #0
 806c492:	d001      	beq.n	806c498 <dir_next+0xf2>
 806c494:	2301      	movs	r3, #1
 806c496:	e047      	b.n	806c528 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 806c498:	68fb      	ldr	r3, [r7, #12]
 806c49a:	3334      	adds	r3, #52	; 0x34
 806c49c:	f44f 7200 	mov.w	r2, #512	; 0x200
 806c4a0:	2100      	movs	r1, #0
 806c4a2:	4618      	mov	r0, r3
 806c4a4:	f7ff f945 	bl	806b732 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 806c4a8:	2300      	movs	r3, #0
 806c4aa:	613b      	str	r3, [r7, #16]
 806c4ac:	6979      	ldr	r1, [r7, #20]
 806c4ae:	68f8      	ldr	r0, [r7, #12]
 806c4b0:	f7ff fc1a 	bl	806bce8 <clust2sect>
 806c4b4:	4602      	mov	r2, r0
 806c4b6:	68fb      	ldr	r3, [r7, #12]
 806c4b8:	631a      	str	r2, [r3, #48]	; 0x30
 806c4ba:	e012      	b.n	806c4e2 <dir_next+0x13c>
						fs->wflag = 1;
 806c4bc:	68fb      	ldr	r3, [r7, #12]
 806c4be:	2201      	movs	r2, #1
 806c4c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 806c4c2:	68f8      	ldr	r0, [r7, #12]
 806c4c4:	f7ff fb30 	bl	806bb28 <sync_window>
 806c4c8:	4603      	mov	r3, r0
 806c4ca:	2b00      	cmp	r3, #0
 806c4cc:	d001      	beq.n	806c4d2 <dir_next+0x12c>
 806c4ce:	2301      	movs	r3, #1
 806c4d0:	e02a      	b.n	806c528 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 806c4d2:	693b      	ldr	r3, [r7, #16]
 806c4d4:	3301      	adds	r3, #1
 806c4d6:	613b      	str	r3, [r7, #16]
 806c4d8:	68fb      	ldr	r3, [r7, #12]
 806c4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806c4dc:	1c5a      	adds	r2, r3, #1
 806c4de:	68fb      	ldr	r3, [r7, #12]
 806c4e0:	631a      	str	r2, [r3, #48]	; 0x30
 806c4e2:	68fb      	ldr	r3, [r7, #12]
 806c4e4:	895b      	ldrh	r3, [r3, #10]
 806c4e6:	461a      	mov	r2, r3
 806c4e8:	693b      	ldr	r3, [r7, #16]
 806c4ea:	4293      	cmp	r3, r2
 806c4ec:	d3e6      	bcc.n	806c4bc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 806c4ee:	68fb      	ldr	r3, [r7, #12]
 806c4f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806c4f2:	693b      	ldr	r3, [r7, #16]
 806c4f4:	1ad2      	subs	r2, r2, r3
 806c4f6:	68fb      	ldr	r3, [r7, #12]
 806c4f8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 806c4fa:	687b      	ldr	r3, [r7, #4]
 806c4fc:	697a      	ldr	r2, [r7, #20]
 806c4fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 806c500:	6979      	ldr	r1, [r7, #20]
 806c502:	68f8      	ldr	r0, [r7, #12]
 806c504:	f7ff fbf0 	bl	806bce8 <clust2sect>
 806c508:	4602      	mov	r2, r0
 806c50a:	687b      	ldr	r3, [r7, #4]
 806c50c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 806c50e:	687b      	ldr	r3, [r7, #4]
 806c510:	68ba      	ldr	r2, [r7, #8]
 806c512:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 806c514:	68fb      	ldr	r3, [r7, #12]
 806c516:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806c51a:	68bb      	ldr	r3, [r7, #8]
 806c51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806c520:	441a      	add	r2, r3
 806c522:	687b      	ldr	r3, [r7, #4]
 806c524:	621a      	str	r2, [r3, #32]

	return FR_OK;
 806c526:	2300      	movs	r3, #0
}
 806c528:	4618      	mov	r0, r3
 806c52a:	3718      	adds	r7, #24
 806c52c:	46bd      	mov	sp, r7
 806c52e:	bd80      	pop	{r7, pc}

0806c530 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 806c530:	b580      	push	{r7, lr}
 806c532:	b086      	sub	sp, #24
 806c534:	af00      	add	r7, sp, #0
 806c536:	6078      	str	r0, [r7, #4]
 806c538:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 806c53a:	687b      	ldr	r3, [r7, #4]
 806c53c:	681b      	ldr	r3, [r3, #0]
 806c53e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 806c540:	2100      	movs	r1, #0
 806c542:	6878      	ldr	r0, [r7, #4]
 806c544:	f7ff feb4 	bl	806c2b0 <dir_sdi>
 806c548:	4603      	mov	r3, r0
 806c54a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 806c54c:	7dfb      	ldrb	r3, [r7, #23]
 806c54e:	2b00      	cmp	r3, #0
 806c550:	d12b      	bne.n	806c5aa <dir_alloc+0x7a>
		n = 0;
 806c552:	2300      	movs	r3, #0
 806c554:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 806c556:	687b      	ldr	r3, [r7, #4]
 806c558:	69db      	ldr	r3, [r3, #28]
 806c55a:	4619      	mov	r1, r3
 806c55c:	68f8      	ldr	r0, [r7, #12]
 806c55e:	f7ff fb27 	bl	806bbb0 <move_window>
 806c562:	4603      	mov	r3, r0
 806c564:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 806c566:	7dfb      	ldrb	r3, [r7, #23]
 806c568:	2b00      	cmp	r3, #0
 806c56a:	d11d      	bne.n	806c5a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 806c56c:	687b      	ldr	r3, [r7, #4]
 806c56e:	6a1b      	ldr	r3, [r3, #32]
 806c570:	781b      	ldrb	r3, [r3, #0]
 806c572:	2be5      	cmp	r3, #229	; 0xe5
 806c574:	d004      	beq.n	806c580 <dir_alloc+0x50>
 806c576:	687b      	ldr	r3, [r7, #4]
 806c578:	6a1b      	ldr	r3, [r3, #32]
 806c57a:	781b      	ldrb	r3, [r3, #0]
 806c57c:	2b00      	cmp	r3, #0
 806c57e:	d107      	bne.n	806c590 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 806c580:	693b      	ldr	r3, [r7, #16]
 806c582:	3301      	adds	r3, #1
 806c584:	613b      	str	r3, [r7, #16]
 806c586:	693a      	ldr	r2, [r7, #16]
 806c588:	683b      	ldr	r3, [r7, #0]
 806c58a:	429a      	cmp	r2, r3
 806c58c:	d102      	bne.n	806c594 <dir_alloc+0x64>
 806c58e:	e00c      	b.n	806c5aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 806c590:	2300      	movs	r3, #0
 806c592:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 806c594:	2101      	movs	r1, #1
 806c596:	6878      	ldr	r0, [r7, #4]
 806c598:	f7ff ff05 	bl	806c3a6 <dir_next>
 806c59c:	4603      	mov	r3, r0
 806c59e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 806c5a0:	7dfb      	ldrb	r3, [r7, #23]
 806c5a2:	2b00      	cmp	r3, #0
 806c5a4:	d0d7      	beq.n	806c556 <dir_alloc+0x26>
 806c5a6:	e000      	b.n	806c5aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 806c5a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 806c5aa:	7dfb      	ldrb	r3, [r7, #23]
 806c5ac:	2b04      	cmp	r3, #4
 806c5ae:	d101      	bne.n	806c5b4 <dir_alloc+0x84>
 806c5b0:	2307      	movs	r3, #7
 806c5b2:	75fb      	strb	r3, [r7, #23]
	return res;
 806c5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 806c5b6:	4618      	mov	r0, r3
 806c5b8:	3718      	adds	r7, #24
 806c5ba:	46bd      	mov	sp, r7
 806c5bc:	bd80      	pop	{r7, pc}

0806c5be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 806c5be:	b580      	push	{r7, lr}
 806c5c0:	b084      	sub	sp, #16
 806c5c2:	af00      	add	r7, sp, #0
 806c5c4:	6078      	str	r0, [r7, #4]
 806c5c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 806c5c8:	683b      	ldr	r3, [r7, #0]
 806c5ca:	331a      	adds	r3, #26
 806c5cc:	4618      	mov	r0, r3
 806c5ce:	f7ff f80d 	bl	806b5ec <ld_word>
 806c5d2:	4603      	mov	r3, r0
 806c5d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 806c5d6:	687b      	ldr	r3, [r7, #4]
 806c5d8:	781b      	ldrb	r3, [r3, #0]
 806c5da:	2b03      	cmp	r3, #3
 806c5dc:	d109      	bne.n	806c5f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 806c5de:	683b      	ldr	r3, [r7, #0]
 806c5e0:	3314      	adds	r3, #20
 806c5e2:	4618      	mov	r0, r3
 806c5e4:	f7ff f802 	bl	806b5ec <ld_word>
 806c5e8:	4603      	mov	r3, r0
 806c5ea:	041b      	lsls	r3, r3, #16
 806c5ec:	68fa      	ldr	r2, [r7, #12]
 806c5ee:	4313      	orrs	r3, r2
 806c5f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 806c5f2:	68fb      	ldr	r3, [r7, #12]
}
 806c5f4:	4618      	mov	r0, r3
 806c5f6:	3710      	adds	r7, #16
 806c5f8:	46bd      	mov	sp, r7
 806c5fa:	bd80      	pop	{r7, pc}

0806c5fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 806c5fc:	b580      	push	{r7, lr}
 806c5fe:	b084      	sub	sp, #16
 806c600:	af00      	add	r7, sp, #0
 806c602:	60f8      	str	r0, [r7, #12]
 806c604:	60b9      	str	r1, [r7, #8]
 806c606:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 806c608:	68bb      	ldr	r3, [r7, #8]
 806c60a:	331a      	adds	r3, #26
 806c60c:	687a      	ldr	r2, [r7, #4]
 806c60e:	b292      	uxth	r2, r2
 806c610:	4611      	mov	r1, r2
 806c612:	4618      	mov	r0, r3
 806c614:	f7ff f825 	bl	806b662 <st_word>
	if (fs->fs_type == FS_FAT32) {
 806c618:	68fb      	ldr	r3, [r7, #12]
 806c61a:	781b      	ldrb	r3, [r3, #0]
 806c61c:	2b03      	cmp	r3, #3
 806c61e:	d109      	bne.n	806c634 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 806c620:	68bb      	ldr	r3, [r7, #8]
 806c622:	f103 0214 	add.w	r2, r3, #20
 806c626:	687b      	ldr	r3, [r7, #4]
 806c628:	0c1b      	lsrs	r3, r3, #16
 806c62a:	b29b      	uxth	r3, r3
 806c62c:	4619      	mov	r1, r3
 806c62e:	4610      	mov	r0, r2
 806c630:	f7ff f817 	bl	806b662 <st_word>
	}
}
 806c634:	bf00      	nop
 806c636:	3710      	adds	r7, #16
 806c638:	46bd      	mov	sp, r7
 806c63a:	bd80      	pop	{r7, pc}

0806c63c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 806c63c:	b580      	push	{r7, lr}
 806c63e:	b086      	sub	sp, #24
 806c640:	af00      	add	r7, sp, #0
 806c642:	6078      	str	r0, [r7, #4]
 806c644:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 806c646:	2304      	movs	r3, #4
 806c648:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 806c64a:	687b      	ldr	r3, [r7, #4]
 806c64c:	681b      	ldr	r3, [r3, #0]
 806c64e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 806c650:	e03c      	b.n	806c6cc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 806c652:	687b      	ldr	r3, [r7, #4]
 806c654:	69db      	ldr	r3, [r3, #28]
 806c656:	4619      	mov	r1, r3
 806c658:	6938      	ldr	r0, [r7, #16]
 806c65a:	f7ff faa9 	bl	806bbb0 <move_window>
 806c65e:	4603      	mov	r3, r0
 806c660:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 806c662:	7dfb      	ldrb	r3, [r7, #23]
 806c664:	2b00      	cmp	r3, #0
 806c666:	d136      	bne.n	806c6d6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 806c668:	687b      	ldr	r3, [r7, #4]
 806c66a:	6a1b      	ldr	r3, [r3, #32]
 806c66c:	781b      	ldrb	r3, [r3, #0]
 806c66e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 806c670:	7bfb      	ldrb	r3, [r7, #15]
 806c672:	2b00      	cmp	r3, #0
 806c674:	d102      	bne.n	806c67c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 806c676:	2304      	movs	r3, #4
 806c678:	75fb      	strb	r3, [r7, #23]
 806c67a:	e031      	b.n	806c6e0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 806c67c:	687b      	ldr	r3, [r7, #4]
 806c67e:	6a1b      	ldr	r3, [r3, #32]
 806c680:	330b      	adds	r3, #11
 806c682:	781b      	ldrb	r3, [r3, #0]
 806c684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 806c688:	73bb      	strb	r3, [r7, #14]
 806c68a:	687b      	ldr	r3, [r7, #4]
 806c68c:	7bba      	ldrb	r2, [r7, #14]
 806c68e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 806c690:	7bfb      	ldrb	r3, [r7, #15]
 806c692:	2be5      	cmp	r3, #229	; 0xe5
 806c694:	d011      	beq.n	806c6ba <dir_read+0x7e>
 806c696:	7bfb      	ldrb	r3, [r7, #15]
 806c698:	2b2e      	cmp	r3, #46	; 0x2e
 806c69a:	d00e      	beq.n	806c6ba <dir_read+0x7e>
 806c69c:	7bbb      	ldrb	r3, [r7, #14]
 806c69e:	2b0f      	cmp	r3, #15
 806c6a0:	d00b      	beq.n	806c6ba <dir_read+0x7e>
 806c6a2:	7bbb      	ldrb	r3, [r7, #14]
 806c6a4:	f023 0320 	bic.w	r3, r3, #32
 806c6a8:	2b08      	cmp	r3, #8
 806c6aa:	bf0c      	ite	eq
 806c6ac:	2301      	moveq	r3, #1
 806c6ae:	2300      	movne	r3, #0
 806c6b0:	b2db      	uxtb	r3, r3
 806c6b2:	461a      	mov	r2, r3
 806c6b4:	683b      	ldr	r3, [r7, #0]
 806c6b6:	4293      	cmp	r3, r2
 806c6b8:	d00f      	beq.n	806c6da <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 806c6ba:	2100      	movs	r1, #0
 806c6bc:	6878      	ldr	r0, [r7, #4]
 806c6be:	f7ff fe72 	bl	806c3a6 <dir_next>
 806c6c2:	4603      	mov	r3, r0
 806c6c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 806c6c6:	7dfb      	ldrb	r3, [r7, #23]
 806c6c8:	2b00      	cmp	r3, #0
 806c6ca:	d108      	bne.n	806c6de <dir_read+0xa2>
	while (dp->sect) {
 806c6cc:	687b      	ldr	r3, [r7, #4]
 806c6ce:	69db      	ldr	r3, [r3, #28]
 806c6d0:	2b00      	cmp	r3, #0
 806c6d2:	d1be      	bne.n	806c652 <dir_read+0x16>
 806c6d4:	e004      	b.n	806c6e0 <dir_read+0xa4>
		if (res != FR_OK) break;
 806c6d6:	bf00      	nop
 806c6d8:	e002      	b.n	806c6e0 <dir_read+0xa4>
				break;
 806c6da:	bf00      	nop
 806c6dc:	e000      	b.n	806c6e0 <dir_read+0xa4>
		if (res != FR_OK) break;
 806c6de:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 806c6e0:	7dfb      	ldrb	r3, [r7, #23]
 806c6e2:	2b00      	cmp	r3, #0
 806c6e4:	d002      	beq.n	806c6ec <dir_read+0xb0>
 806c6e6:	687b      	ldr	r3, [r7, #4]
 806c6e8:	2200      	movs	r2, #0
 806c6ea:	61da      	str	r2, [r3, #28]
	return res;
 806c6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 806c6ee:	4618      	mov	r0, r3
 806c6f0:	3718      	adds	r7, #24
 806c6f2:	46bd      	mov	sp, r7
 806c6f4:	bd80      	pop	{r7, pc}

0806c6f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 806c6f6:	b580      	push	{r7, lr}
 806c6f8:	b086      	sub	sp, #24
 806c6fa:	af00      	add	r7, sp, #0
 806c6fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 806c6fe:	687b      	ldr	r3, [r7, #4]
 806c700:	681b      	ldr	r3, [r3, #0]
 806c702:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 806c704:	2100      	movs	r1, #0
 806c706:	6878      	ldr	r0, [r7, #4]
 806c708:	f7ff fdd2 	bl	806c2b0 <dir_sdi>
 806c70c:	4603      	mov	r3, r0
 806c70e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 806c710:	7dfb      	ldrb	r3, [r7, #23]
 806c712:	2b00      	cmp	r3, #0
 806c714:	d001      	beq.n	806c71a <dir_find+0x24>
 806c716:	7dfb      	ldrb	r3, [r7, #23]
 806c718:	e03e      	b.n	806c798 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 806c71a:	687b      	ldr	r3, [r7, #4]
 806c71c:	69db      	ldr	r3, [r3, #28]
 806c71e:	4619      	mov	r1, r3
 806c720:	6938      	ldr	r0, [r7, #16]
 806c722:	f7ff fa45 	bl	806bbb0 <move_window>
 806c726:	4603      	mov	r3, r0
 806c728:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 806c72a:	7dfb      	ldrb	r3, [r7, #23]
 806c72c:	2b00      	cmp	r3, #0
 806c72e:	d12f      	bne.n	806c790 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 806c730:	687b      	ldr	r3, [r7, #4]
 806c732:	6a1b      	ldr	r3, [r3, #32]
 806c734:	781b      	ldrb	r3, [r3, #0]
 806c736:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 806c738:	7bfb      	ldrb	r3, [r7, #15]
 806c73a:	2b00      	cmp	r3, #0
 806c73c:	d102      	bne.n	806c744 <dir_find+0x4e>
 806c73e:	2304      	movs	r3, #4
 806c740:	75fb      	strb	r3, [r7, #23]
 806c742:	e028      	b.n	806c796 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 806c744:	687b      	ldr	r3, [r7, #4]
 806c746:	6a1b      	ldr	r3, [r3, #32]
 806c748:	330b      	adds	r3, #11
 806c74a:	781b      	ldrb	r3, [r3, #0]
 806c74c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 806c750:	b2da      	uxtb	r2, r3
 806c752:	687b      	ldr	r3, [r7, #4]
 806c754:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 806c756:	687b      	ldr	r3, [r7, #4]
 806c758:	6a1b      	ldr	r3, [r3, #32]
 806c75a:	330b      	adds	r3, #11
 806c75c:	781b      	ldrb	r3, [r3, #0]
 806c75e:	f003 0308 	and.w	r3, r3, #8
 806c762:	2b00      	cmp	r3, #0
 806c764:	d10a      	bne.n	806c77c <dir_find+0x86>
 806c766:	687b      	ldr	r3, [r7, #4]
 806c768:	6a18      	ldr	r0, [r3, #32]
 806c76a:	687b      	ldr	r3, [r7, #4]
 806c76c:	3324      	adds	r3, #36	; 0x24
 806c76e:	220b      	movs	r2, #11
 806c770:	4619      	mov	r1, r3
 806c772:	f7fe fff9 	bl	806b768 <mem_cmp>
 806c776:	4603      	mov	r3, r0
 806c778:	2b00      	cmp	r3, #0
 806c77a:	d00b      	beq.n	806c794 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 806c77c:	2100      	movs	r1, #0
 806c77e:	6878      	ldr	r0, [r7, #4]
 806c780:	f7ff fe11 	bl	806c3a6 <dir_next>
 806c784:	4603      	mov	r3, r0
 806c786:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 806c788:	7dfb      	ldrb	r3, [r7, #23]
 806c78a:	2b00      	cmp	r3, #0
 806c78c:	d0c5      	beq.n	806c71a <dir_find+0x24>
 806c78e:	e002      	b.n	806c796 <dir_find+0xa0>
		if (res != FR_OK) break;
 806c790:	bf00      	nop
 806c792:	e000      	b.n	806c796 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 806c794:	bf00      	nop

	return res;
 806c796:	7dfb      	ldrb	r3, [r7, #23]
}
 806c798:	4618      	mov	r0, r3
 806c79a:	3718      	adds	r7, #24
 806c79c:	46bd      	mov	sp, r7
 806c79e:	bd80      	pop	{r7, pc}

0806c7a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 806c7a0:	b580      	push	{r7, lr}
 806c7a2:	b084      	sub	sp, #16
 806c7a4:	af00      	add	r7, sp, #0
 806c7a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 806c7a8:	687b      	ldr	r3, [r7, #4]
 806c7aa:	681b      	ldr	r3, [r3, #0]
 806c7ac:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 806c7ae:	2101      	movs	r1, #1
 806c7b0:	6878      	ldr	r0, [r7, #4]
 806c7b2:	f7ff febd 	bl	806c530 <dir_alloc>
 806c7b6:	4603      	mov	r3, r0
 806c7b8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 806c7ba:	7bfb      	ldrb	r3, [r7, #15]
 806c7bc:	2b00      	cmp	r3, #0
 806c7be:	d11c      	bne.n	806c7fa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 806c7c0:	687b      	ldr	r3, [r7, #4]
 806c7c2:	69db      	ldr	r3, [r3, #28]
 806c7c4:	4619      	mov	r1, r3
 806c7c6:	68b8      	ldr	r0, [r7, #8]
 806c7c8:	f7ff f9f2 	bl	806bbb0 <move_window>
 806c7cc:	4603      	mov	r3, r0
 806c7ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 806c7d0:	7bfb      	ldrb	r3, [r7, #15]
 806c7d2:	2b00      	cmp	r3, #0
 806c7d4:	d111      	bne.n	806c7fa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 806c7d6:	687b      	ldr	r3, [r7, #4]
 806c7d8:	6a1b      	ldr	r3, [r3, #32]
 806c7da:	2220      	movs	r2, #32
 806c7dc:	2100      	movs	r1, #0
 806c7de:	4618      	mov	r0, r3
 806c7e0:	f7fe ffa7 	bl	806b732 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 806c7e4:	687b      	ldr	r3, [r7, #4]
 806c7e6:	6a18      	ldr	r0, [r3, #32]
 806c7e8:	687b      	ldr	r3, [r7, #4]
 806c7ea:	3324      	adds	r3, #36	; 0x24
 806c7ec:	220b      	movs	r2, #11
 806c7ee:	4619      	mov	r1, r3
 806c7f0:	f7fe ff7e 	bl	806b6f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 806c7f4:	68bb      	ldr	r3, [r7, #8]
 806c7f6:	2201      	movs	r2, #1
 806c7f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 806c7fa:	7bfb      	ldrb	r3, [r7, #15]
}
 806c7fc:	4618      	mov	r0, r3
 806c7fe:	3710      	adds	r7, #16
 806c800:	46bd      	mov	sp, r7
 806c802:	bd80      	pop	{r7, pc}

0806c804 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 806c804:	b580      	push	{r7, lr}
 806c806:	b084      	sub	sp, #16
 806c808:	af00      	add	r7, sp, #0
 806c80a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 806c80c:	687b      	ldr	r3, [r7, #4]
 806c80e:	681b      	ldr	r3, [r3, #0]
 806c810:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 806c812:	687b      	ldr	r3, [r7, #4]
 806c814:	69db      	ldr	r3, [r3, #28]
 806c816:	4619      	mov	r1, r3
 806c818:	68f8      	ldr	r0, [r7, #12]
 806c81a:	f7ff f9c9 	bl	806bbb0 <move_window>
 806c81e:	4603      	mov	r3, r0
 806c820:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 806c822:	7afb      	ldrb	r3, [r7, #11]
 806c824:	2b00      	cmp	r3, #0
 806c826:	d106      	bne.n	806c836 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 806c828:	687b      	ldr	r3, [r7, #4]
 806c82a:	6a1b      	ldr	r3, [r3, #32]
 806c82c:	22e5      	movs	r2, #229	; 0xe5
 806c82e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 806c830:	68fb      	ldr	r3, [r7, #12]
 806c832:	2201      	movs	r2, #1
 806c834:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 806c836:	7afb      	ldrb	r3, [r7, #11]
}
 806c838:	4618      	mov	r0, r3
 806c83a:	3710      	adds	r7, #16
 806c83c:	46bd      	mov	sp, r7
 806c83e:	bd80      	pop	{r7, pc}

0806c840 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 806c840:	b580      	push	{r7, lr}
 806c842:	b088      	sub	sp, #32
 806c844:	af00      	add	r7, sp, #0
 806c846:	6078      	str	r0, [r7, #4]
 806c848:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 806c84a:	683b      	ldr	r3, [r7, #0]
 806c84c:	681b      	ldr	r3, [r3, #0]
 806c84e:	60fb      	str	r3, [r7, #12]
 806c850:	687b      	ldr	r3, [r7, #4]
 806c852:	3324      	adds	r3, #36	; 0x24
 806c854:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 806c856:	220b      	movs	r2, #11
 806c858:	2120      	movs	r1, #32
 806c85a:	68b8      	ldr	r0, [r7, #8]
 806c85c:	f7fe ff69 	bl	806b732 <mem_set>
	si = i = 0; ni = 8;
 806c860:	2300      	movs	r3, #0
 806c862:	613b      	str	r3, [r7, #16]
 806c864:	693b      	ldr	r3, [r7, #16]
 806c866:	61fb      	str	r3, [r7, #28]
 806c868:	2308      	movs	r3, #8
 806c86a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 806c86c:	69fb      	ldr	r3, [r7, #28]
 806c86e:	1c5a      	adds	r2, r3, #1
 806c870:	61fa      	str	r2, [r7, #28]
 806c872:	68fa      	ldr	r2, [r7, #12]
 806c874:	4413      	add	r3, r2
 806c876:	781b      	ldrb	r3, [r3, #0]
 806c878:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 806c87a:	7efb      	ldrb	r3, [r7, #27]
 806c87c:	2b20      	cmp	r3, #32
 806c87e:	d94e      	bls.n	806c91e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 806c880:	7efb      	ldrb	r3, [r7, #27]
 806c882:	2b2f      	cmp	r3, #47	; 0x2f
 806c884:	d006      	beq.n	806c894 <create_name+0x54>
 806c886:	7efb      	ldrb	r3, [r7, #27]
 806c888:	2b5c      	cmp	r3, #92	; 0x5c
 806c88a:	d110      	bne.n	806c8ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 806c88c:	e002      	b.n	806c894 <create_name+0x54>
 806c88e:	69fb      	ldr	r3, [r7, #28]
 806c890:	3301      	adds	r3, #1
 806c892:	61fb      	str	r3, [r7, #28]
 806c894:	68fa      	ldr	r2, [r7, #12]
 806c896:	69fb      	ldr	r3, [r7, #28]
 806c898:	4413      	add	r3, r2
 806c89a:	781b      	ldrb	r3, [r3, #0]
 806c89c:	2b2f      	cmp	r3, #47	; 0x2f
 806c89e:	d0f6      	beq.n	806c88e <create_name+0x4e>
 806c8a0:	68fa      	ldr	r2, [r7, #12]
 806c8a2:	69fb      	ldr	r3, [r7, #28]
 806c8a4:	4413      	add	r3, r2
 806c8a6:	781b      	ldrb	r3, [r3, #0]
 806c8a8:	2b5c      	cmp	r3, #92	; 0x5c
 806c8aa:	d0f0      	beq.n	806c88e <create_name+0x4e>
			break;
 806c8ac:	e038      	b.n	806c920 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 806c8ae:	7efb      	ldrb	r3, [r7, #27]
 806c8b0:	2b2e      	cmp	r3, #46	; 0x2e
 806c8b2:	d003      	beq.n	806c8bc <create_name+0x7c>
 806c8b4:	693a      	ldr	r2, [r7, #16]
 806c8b6:	697b      	ldr	r3, [r7, #20]
 806c8b8:	429a      	cmp	r2, r3
 806c8ba:	d30c      	bcc.n	806c8d6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 806c8bc:	697b      	ldr	r3, [r7, #20]
 806c8be:	2b0b      	cmp	r3, #11
 806c8c0:	d002      	beq.n	806c8c8 <create_name+0x88>
 806c8c2:	7efb      	ldrb	r3, [r7, #27]
 806c8c4:	2b2e      	cmp	r3, #46	; 0x2e
 806c8c6:	d001      	beq.n	806c8cc <create_name+0x8c>
 806c8c8:	2306      	movs	r3, #6
 806c8ca:	e044      	b.n	806c956 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 806c8cc:	2308      	movs	r3, #8
 806c8ce:	613b      	str	r3, [r7, #16]
 806c8d0:	230b      	movs	r3, #11
 806c8d2:	617b      	str	r3, [r7, #20]
			continue;
 806c8d4:	e022      	b.n	806c91c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 806c8d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 806c8da:	2b00      	cmp	r3, #0
 806c8dc:	da04      	bge.n	806c8e8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 806c8de:	7efb      	ldrb	r3, [r7, #27]
 806c8e0:	3b80      	subs	r3, #128	; 0x80
 806c8e2:	4a1f      	ldr	r2, [pc, #124]	; (806c960 <create_name+0x120>)
 806c8e4:	5cd3      	ldrb	r3, [r2, r3]
 806c8e6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 806c8e8:	7efb      	ldrb	r3, [r7, #27]
 806c8ea:	4619      	mov	r1, r3
 806c8ec:	481d      	ldr	r0, [pc, #116]	; (806c964 <create_name+0x124>)
 806c8ee:	f7fe ff62 	bl	806b7b6 <chk_chr>
 806c8f2:	4603      	mov	r3, r0
 806c8f4:	2b00      	cmp	r3, #0
 806c8f6:	d001      	beq.n	806c8fc <create_name+0xbc>
 806c8f8:	2306      	movs	r3, #6
 806c8fa:	e02c      	b.n	806c956 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 806c8fc:	7efb      	ldrb	r3, [r7, #27]
 806c8fe:	2b60      	cmp	r3, #96	; 0x60
 806c900:	d905      	bls.n	806c90e <create_name+0xce>
 806c902:	7efb      	ldrb	r3, [r7, #27]
 806c904:	2b7a      	cmp	r3, #122	; 0x7a
 806c906:	d802      	bhi.n	806c90e <create_name+0xce>
 806c908:	7efb      	ldrb	r3, [r7, #27]
 806c90a:	3b20      	subs	r3, #32
 806c90c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 806c90e:	693b      	ldr	r3, [r7, #16]
 806c910:	1c5a      	adds	r2, r3, #1
 806c912:	613a      	str	r2, [r7, #16]
 806c914:	68ba      	ldr	r2, [r7, #8]
 806c916:	4413      	add	r3, r2
 806c918:	7efa      	ldrb	r2, [r7, #27]
 806c91a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 806c91c:	e7a6      	b.n	806c86c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 806c91e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 806c920:	68fa      	ldr	r2, [r7, #12]
 806c922:	69fb      	ldr	r3, [r7, #28]
 806c924:	441a      	add	r2, r3
 806c926:	683b      	ldr	r3, [r7, #0]
 806c928:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 806c92a:	693b      	ldr	r3, [r7, #16]
 806c92c:	2b00      	cmp	r3, #0
 806c92e:	d101      	bne.n	806c934 <create_name+0xf4>
 806c930:	2306      	movs	r3, #6
 806c932:	e010      	b.n	806c956 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 806c934:	68bb      	ldr	r3, [r7, #8]
 806c936:	781b      	ldrb	r3, [r3, #0]
 806c938:	2be5      	cmp	r3, #229	; 0xe5
 806c93a:	d102      	bne.n	806c942 <create_name+0x102>
 806c93c:	68bb      	ldr	r3, [r7, #8]
 806c93e:	2205      	movs	r2, #5
 806c940:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 806c942:	7efb      	ldrb	r3, [r7, #27]
 806c944:	2b20      	cmp	r3, #32
 806c946:	d801      	bhi.n	806c94c <create_name+0x10c>
 806c948:	2204      	movs	r2, #4
 806c94a:	e000      	b.n	806c94e <create_name+0x10e>
 806c94c:	2200      	movs	r2, #0
 806c94e:	68bb      	ldr	r3, [r7, #8]
 806c950:	330b      	adds	r3, #11
 806c952:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 806c954:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 806c956:	4618      	mov	r0, r3
 806c958:	3720      	adds	r7, #32
 806c95a:	46bd      	mov	sp, r7
 806c95c:	bd80      	pop	{r7, pc}
 806c95e:	bf00      	nop
 806c960:	08077730 	.word	0x08077730
 806c964:	08077578 	.word	0x08077578

0806c968 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 806c968:	b580      	push	{r7, lr}
 806c96a:	b086      	sub	sp, #24
 806c96c:	af00      	add	r7, sp, #0
 806c96e:	6078      	str	r0, [r7, #4]
 806c970:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 806c972:	687b      	ldr	r3, [r7, #4]
 806c974:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 806c976:	693b      	ldr	r3, [r7, #16]
 806c978:	681b      	ldr	r3, [r3, #0]
 806c97a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 806c97c:	e002      	b.n	806c984 <follow_path+0x1c>
 806c97e:	683b      	ldr	r3, [r7, #0]
 806c980:	3301      	adds	r3, #1
 806c982:	603b      	str	r3, [r7, #0]
 806c984:	683b      	ldr	r3, [r7, #0]
 806c986:	781b      	ldrb	r3, [r3, #0]
 806c988:	2b2f      	cmp	r3, #47	; 0x2f
 806c98a:	d0f8      	beq.n	806c97e <follow_path+0x16>
 806c98c:	683b      	ldr	r3, [r7, #0]
 806c98e:	781b      	ldrb	r3, [r3, #0]
 806c990:	2b5c      	cmp	r3, #92	; 0x5c
 806c992:	d0f4      	beq.n	806c97e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 806c994:	693b      	ldr	r3, [r7, #16]
 806c996:	2200      	movs	r2, #0
 806c998:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 806c99a:	683b      	ldr	r3, [r7, #0]
 806c99c:	781b      	ldrb	r3, [r3, #0]
 806c99e:	2b1f      	cmp	r3, #31
 806c9a0:	d80a      	bhi.n	806c9b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 806c9a2:	687b      	ldr	r3, [r7, #4]
 806c9a4:	2280      	movs	r2, #128	; 0x80
 806c9a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 806c9aa:	2100      	movs	r1, #0
 806c9ac:	6878      	ldr	r0, [r7, #4]
 806c9ae:	f7ff fc7f 	bl	806c2b0 <dir_sdi>
 806c9b2:	4603      	mov	r3, r0
 806c9b4:	75fb      	strb	r3, [r7, #23]
 806c9b6:	e043      	b.n	806ca40 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 806c9b8:	463b      	mov	r3, r7
 806c9ba:	4619      	mov	r1, r3
 806c9bc:	6878      	ldr	r0, [r7, #4]
 806c9be:	f7ff ff3f 	bl	806c840 <create_name>
 806c9c2:	4603      	mov	r3, r0
 806c9c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 806c9c6:	7dfb      	ldrb	r3, [r7, #23]
 806c9c8:	2b00      	cmp	r3, #0
 806c9ca:	d134      	bne.n	806ca36 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 806c9cc:	6878      	ldr	r0, [r7, #4]
 806c9ce:	f7ff fe92 	bl	806c6f6 <dir_find>
 806c9d2:	4603      	mov	r3, r0
 806c9d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 806c9d6:	687b      	ldr	r3, [r7, #4]
 806c9d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 806c9dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 806c9de:	7dfb      	ldrb	r3, [r7, #23]
 806c9e0:	2b00      	cmp	r3, #0
 806c9e2:	d00a      	beq.n	806c9fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 806c9e4:	7dfb      	ldrb	r3, [r7, #23]
 806c9e6:	2b04      	cmp	r3, #4
 806c9e8:	d127      	bne.n	806ca3a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 806c9ea:	7afb      	ldrb	r3, [r7, #11]
 806c9ec:	f003 0304 	and.w	r3, r3, #4
 806c9f0:	2b00      	cmp	r3, #0
 806c9f2:	d122      	bne.n	806ca3a <follow_path+0xd2>
 806c9f4:	2305      	movs	r3, #5
 806c9f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 806c9f8:	e01f      	b.n	806ca3a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 806c9fa:	7afb      	ldrb	r3, [r7, #11]
 806c9fc:	f003 0304 	and.w	r3, r3, #4
 806ca00:	2b00      	cmp	r3, #0
 806ca02:	d11c      	bne.n	806ca3e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 806ca04:	693b      	ldr	r3, [r7, #16]
 806ca06:	799b      	ldrb	r3, [r3, #6]
 806ca08:	f003 0310 	and.w	r3, r3, #16
 806ca0c:	2b00      	cmp	r3, #0
 806ca0e:	d102      	bne.n	806ca16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 806ca10:	2305      	movs	r3, #5
 806ca12:	75fb      	strb	r3, [r7, #23]
 806ca14:	e014      	b.n	806ca40 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 806ca16:	68fb      	ldr	r3, [r7, #12]
 806ca18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806ca1c:	687b      	ldr	r3, [r7, #4]
 806ca1e:	695b      	ldr	r3, [r3, #20]
 806ca20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806ca24:	4413      	add	r3, r2
 806ca26:	4619      	mov	r1, r3
 806ca28:	68f8      	ldr	r0, [r7, #12]
 806ca2a:	f7ff fdc8 	bl	806c5be <ld_clust>
 806ca2e:	4602      	mov	r2, r0
 806ca30:	693b      	ldr	r3, [r7, #16]
 806ca32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 806ca34:	e7c0      	b.n	806c9b8 <follow_path+0x50>
			if (res != FR_OK) break;
 806ca36:	bf00      	nop
 806ca38:	e002      	b.n	806ca40 <follow_path+0xd8>
				break;
 806ca3a:	bf00      	nop
 806ca3c:	e000      	b.n	806ca40 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 806ca3e:	bf00      	nop
			}
		}
	}

	return res;
 806ca40:	7dfb      	ldrb	r3, [r7, #23]
}
 806ca42:	4618      	mov	r0, r3
 806ca44:	3718      	adds	r7, #24
 806ca46:	46bd      	mov	sp, r7
 806ca48:	bd80      	pop	{r7, pc}

0806ca4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 806ca4a:	b480      	push	{r7}
 806ca4c:	b087      	sub	sp, #28
 806ca4e:	af00      	add	r7, sp, #0
 806ca50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 806ca52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806ca56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 806ca58:	687b      	ldr	r3, [r7, #4]
 806ca5a:	681b      	ldr	r3, [r3, #0]
 806ca5c:	2b00      	cmp	r3, #0
 806ca5e:	d031      	beq.n	806cac4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 806ca60:	687b      	ldr	r3, [r7, #4]
 806ca62:	681b      	ldr	r3, [r3, #0]
 806ca64:	617b      	str	r3, [r7, #20]
 806ca66:	e002      	b.n	806ca6e <get_ldnumber+0x24>
 806ca68:	697b      	ldr	r3, [r7, #20]
 806ca6a:	3301      	adds	r3, #1
 806ca6c:	617b      	str	r3, [r7, #20]
 806ca6e:	697b      	ldr	r3, [r7, #20]
 806ca70:	781b      	ldrb	r3, [r3, #0]
 806ca72:	2b20      	cmp	r3, #32
 806ca74:	d903      	bls.n	806ca7e <get_ldnumber+0x34>
 806ca76:	697b      	ldr	r3, [r7, #20]
 806ca78:	781b      	ldrb	r3, [r3, #0]
 806ca7a:	2b3a      	cmp	r3, #58	; 0x3a
 806ca7c:	d1f4      	bne.n	806ca68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 806ca7e:	697b      	ldr	r3, [r7, #20]
 806ca80:	781b      	ldrb	r3, [r3, #0]
 806ca82:	2b3a      	cmp	r3, #58	; 0x3a
 806ca84:	d11c      	bne.n	806cac0 <get_ldnumber+0x76>
			tp = *path;
 806ca86:	687b      	ldr	r3, [r7, #4]
 806ca88:	681b      	ldr	r3, [r3, #0]
 806ca8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 806ca8c:	68fb      	ldr	r3, [r7, #12]
 806ca8e:	1c5a      	adds	r2, r3, #1
 806ca90:	60fa      	str	r2, [r7, #12]
 806ca92:	781b      	ldrb	r3, [r3, #0]
 806ca94:	3b30      	subs	r3, #48	; 0x30
 806ca96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 806ca98:	68bb      	ldr	r3, [r7, #8]
 806ca9a:	2b09      	cmp	r3, #9
 806ca9c:	d80e      	bhi.n	806cabc <get_ldnumber+0x72>
 806ca9e:	68fa      	ldr	r2, [r7, #12]
 806caa0:	697b      	ldr	r3, [r7, #20]
 806caa2:	429a      	cmp	r2, r3
 806caa4:	d10a      	bne.n	806cabc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 806caa6:	68bb      	ldr	r3, [r7, #8]
 806caa8:	2b00      	cmp	r3, #0
 806caaa:	d107      	bne.n	806cabc <get_ldnumber+0x72>
					vol = (int)i;
 806caac:	68bb      	ldr	r3, [r7, #8]
 806caae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 806cab0:	697b      	ldr	r3, [r7, #20]
 806cab2:	3301      	adds	r3, #1
 806cab4:	617b      	str	r3, [r7, #20]
 806cab6:	687b      	ldr	r3, [r7, #4]
 806cab8:	697a      	ldr	r2, [r7, #20]
 806caba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 806cabc:	693b      	ldr	r3, [r7, #16]
 806cabe:	e002      	b.n	806cac6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 806cac0:	2300      	movs	r3, #0
 806cac2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 806cac4:	693b      	ldr	r3, [r7, #16]
}
 806cac6:	4618      	mov	r0, r3
 806cac8:	371c      	adds	r7, #28
 806caca:	46bd      	mov	sp, r7
 806cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 806cad0:	4770      	bx	lr
	...

0806cad4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 806cad4:	b580      	push	{r7, lr}
 806cad6:	b082      	sub	sp, #8
 806cad8:	af00      	add	r7, sp, #0
 806cada:	6078      	str	r0, [r7, #4]
 806cadc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 806cade:	687b      	ldr	r3, [r7, #4]
 806cae0:	2200      	movs	r2, #0
 806cae2:	70da      	strb	r2, [r3, #3]
 806cae4:	687b      	ldr	r3, [r7, #4]
 806cae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806caea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 806caec:	6839      	ldr	r1, [r7, #0]
 806caee:	6878      	ldr	r0, [r7, #4]
 806caf0:	f7ff f85e 	bl	806bbb0 <move_window>
 806caf4:	4603      	mov	r3, r0
 806caf6:	2b00      	cmp	r3, #0
 806caf8:	d001      	beq.n	806cafe <check_fs+0x2a>
 806cafa:	2304      	movs	r3, #4
 806cafc:	e038      	b.n	806cb70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 806cafe:	687b      	ldr	r3, [r7, #4]
 806cb00:	3334      	adds	r3, #52	; 0x34
 806cb02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 806cb06:	4618      	mov	r0, r3
 806cb08:	f7fe fd70 	bl	806b5ec <ld_word>
 806cb0c:	4603      	mov	r3, r0
 806cb0e:	461a      	mov	r2, r3
 806cb10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 806cb14:	429a      	cmp	r2, r3
 806cb16:	d001      	beq.n	806cb1c <check_fs+0x48>
 806cb18:	2303      	movs	r3, #3
 806cb1a:	e029      	b.n	806cb70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 806cb1c:	687b      	ldr	r3, [r7, #4]
 806cb1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806cb22:	2be9      	cmp	r3, #233	; 0xe9
 806cb24:	d009      	beq.n	806cb3a <check_fs+0x66>
 806cb26:	687b      	ldr	r3, [r7, #4]
 806cb28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806cb2c:	2beb      	cmp	r3, #235	; 0xeb
 806cb2e:	d11e      	bne.n	806cb6e <check_fs+0x9a>
 806cb30:	687b      	ldr	r3, [r7, #4]
 806cb32:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 806cb36:	2b90      	cmp	r3, #144	; 0x90
 806cb38:	d119      	bne.n	806cb6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 806cb3a:	687b      	ldr	r3, [r7, #4]
 806cb3c:	3334      	adds	r3, #52	; 0x34
 806cb3e:	3336      	adds	r3, #54	; 0x36
 806cb40:	4618      	mov	r0, r3
 806cb42:	f7fe fd6b 	bl	806b61c <ld_dword>
 806cb46:	4603      	mov	r3, r0
 806cb48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 806cb4c:	4a0a      	ldr	r2, [pc, #40]	; (806cb78 <check_fs+0xa4>)
 806cb4e:	4293      	cmp	r3, r2
 806cb50:	d101      	bne.n	806cb56 <check_fs+0x82>
 806cb52:	2300      	movs	r3, #0
 806cb54:	e00c      	b.n	806cb70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 806cb56:	687b      	ldr	r3, [r7, #4]
 806cb58:	3334      	adds	r3, #52	; 0x34
 806cb5a:	3352      	adds	r3, #82	; 0x52
 806cb5c:	4618      	mov	r0, r3
 806cb5e:	f7fe fd5d 	bl	806b61c <ld_dword>
 806cb62:	4603      	mov	r3, r0
 806cb64:	4a05      	ldr	r2, [pc, #20]	; (806cb7c <check_fs+0xa8>)
 806cb66:	4293      	cmp	r3, r2
 806cb68:	d101      	bne.n	806cb6e <check_fs+0x9a>
 806cb6a:	2300      	movs	r3, #0
 806cb6c:	e000      	b.n	806cb70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 806cb6e:	2302      	movs	r3, #2
}
 806cb70:	4618      	mov	r0, r3
 806cb72:	3708      	adds	r7, #8
 806cb74:	46bd      	mov	sp, r7
 806cb76:	bd80      	pop	{r7, pc}
 806cb78:	00544146 	.word	0x00544146
 806cb7c:	33544146 	.word	0x33544146

0806cb80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 806cb80:	b580      	push	{r7, lr}
 806cb82:	b096      	sub	sp, #88	; 0x58
 806cb84:	af00      	add	r7, sp, #0
 806cb86:	60f8      	str	r0, [r7, #12]
 806cb88:	60b9      	str	r1, [r7, #8]
 806cb8a:	4613      	mov	r3, r2
 806cb8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 806cb8e:	68bb      	ldr	r3, [r7, #8]
 806cb90:	2200      	movs	r2, #0
 806cb92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 806cb94:	68f8      	ldr	r0, [r7, #12]
 806cb96:	f7ff ff58 	bl	806ca4a <get_ldnumber>
 806cb9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 806cb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806cb9e:	2b00      	cmp	r3, #0
 806cba0:	da01      	bge.n	806cba6 <find_volume+0x26>
 806cba2:	230b      	movs	r3, #11
 806cba4:	e236      	b.n	806d014 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 806cba6:	4aac      	ldr	r2, [pc, #688]	; (806ce58 <find_volume+0x2d8>)
 806cba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806cbaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 806cbae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 806cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbb2:	2b00      	cmp	r3, #0
 806cbb4:	d101      	bne.n	806cbba <find_volume+0x3a>
 806cbb6:	230c      	movs	r3, #12
 806cbb8:	e22c      	b.n	806d014 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 806cbba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806cbbc:	f7fe fe16 	bl	806b7ec <lock_fs>
 806cbc0:	4603      	mov	r3, r0
 806cbc2:	2b00      	cmp	r3, #0
 806cbc4:	d101      	bne.n	806cbca <find_volume+0x4a>
 806cbc6:	230f      	movs	r3, #15
 806cbc8:	e224      	b.n	806d014 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 806cbca:	68bb      	ldr	r3, [r7, #8]
 806cbcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806cbce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 806cbd0:	79fb      	ldrb	r3, [r7, #7]
 806cbd2:	f023 0301 	bic.w	r3, r3, #1
 806cbd6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 806cbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbda:	781b      	ldrb	r3, [r3, #0]
 806cbdc:	2b00      	cmp	r3, #0
 806cbde:	d01a      	beq.n	806cc16 <find_volume+0x96>
		stat = disk_status(fs->drv);
 806cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbe2:	785b      	ldrb	r3, [r3, #1]
 806cbe4:	4618      	mov	r0, r3
 806cbe6:	f7fe fc63 	bl	806b4b0 <disk_status>
 806cbea:	4603      	mov	r3, r0
 806cbec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 806cbf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806cbf4:	f003 0301 	and.w	r3, r3, #1
 806cbf8:	2b00      	cmp	r3, #0
 806cbfa:	d10c      	bne.n	806cc16 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 806cbfc:	79fb      	ldrb	r3, [r7, #7]
 806cbfe:	2b00      	cmp	r3, #0
 806cc00:	d007      	beq.n	806cc12 <find_volume+0x92>
 806cc02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806cc06:	f003 0304 	and.w	r3, r3, #4
 806cc0a:	2b00      	cmp	r3, #0
 806cc0c:	d001      	beq.n	806cc12 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 806cc0e:	230a      	movs	r3, #10
 806cc10:	e200      	b.n	806d014 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 806cc12:	2300      	movs	r3, #0
 806cc14:	e1fe      	b.n	806d014 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 806cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cc18:	2200      	movs	r2, #0
 806cc1a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 806cc1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806cc1e:	b2da      	uxtb	r2, r3
 806cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cc22:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 806cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cc26:	785b      	ldrb	r3, [r3, #1]
 806cc28:	4618      	mov	r0, r3
 806cc2a:	f7fe fc5b 	bl	806b4e4 <disk_initialize>
 806cc2e:	4603      	mov	r3, r0
 806cc30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 806cc34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806cc38:	f003 0301 	and.w	r3, r3, #1
 806cc3c:	2b00      	cmp	r3, #0
 806cc3e:	d001      	beq.n	806cc44 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 806cc40:	2303      	movs	r3, #3
 806cc42:	e1e7      	b.n	806d014 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 806cc44:	79fb      	ldrb	r3, [r7, #7]
 806cc46:	2b00      	cmp	r3, #0
 806cc48:	d007      	beq.n	806cc5a <find_volume+0xda>
 806cc4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806cc4e:	f003 0304 	and.w	r3, r3, #4
 806cc52:	2b00      	cmp	r3, #0
 806cc54:	d001      	beq.n	806cc5a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 806cc56:	230a      	movs	r3, #10
 806cc58:	e1dc      	b.n	806d014 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 806cc5a:	2300      	movs	r3, #0
 806cc5c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 806cc5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806cc60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806cc62:	f7ff ff37 	bl	806cad4 <check_fs>
 806cc66:	4603      	mov	r3, r0
 806cc68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 806cc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cc70:	2b02      	cmp	r3, #2
 806cc72:	d14b      	bne.n	806cd0c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 806cc74:	2300      	movs	r3, #0
 806cc76:	643b      	str	r3, [r7, #64]	; 0x40
 806cc78:	e01f      	b.n	806ccba <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 806cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cc7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806cc80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cc82:	011b      	lsls	r3, r3, #4
 806cc84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 806cc88:	4413      	add	r3, r2
 806cc8a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 806cc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806cc8e:	3304      	adds	r3, #4
 806cc90:	781b      	ldrb	r3, [r3, #0]
 806cc92:	2b00      	cmp	r3, #0
 806cc94:	d006      	beq.n	806cca4 <find_volume+0x124>
 806cc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806cc98:	3308      	adds	r3, #8
 806cc9a:	4618      	mov	r0, r3
 806cc9c:	f7fe fcbe 	bl	806b61c <ld_dword>
 806cca0:	4602      	mov	r2, r0
 806cca2:	e000      	b.n	806cca6 <find_volume+0x126>
 806cca4:	2200      	movs	r2, #0
 806cca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cca8:	009b      	lsls	r3, r3, #2
 806ccaa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 806ccae:	440b      	add	r3, r1
 806ccb0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 806ccb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806ccb6:	3301      	adds	r3, #1
 806ccb8:	643b      	str	r3, [r7, #64]	; 0x40
 806ccba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806ccbc:	2b03      	cmp	r3, #3
 806ccbe:	d9dc      	bls.n	806cc7a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 806ccc0:	2300      	movs	r3, #0
 806ccc2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 806ccc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806ccc6:	2b00      	cmp	r3, #0
 806ccc8:	d002      	beq.n	806ccd0 <find_volume+0x150>
 806ccca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cccc:	3b01      	subs	r3, #1
 806ccce:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 806ccd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806ccd2:	009b      	lsls	r3, r3, #2
 806ccd4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 806ccd8:	4413      	add	r3, r2
 806ccda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 806ccde:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 806cce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806cce2:	2b00      	cmp	r3, #0
 806cce4:	d005      	beq.n	806ccf2 <find_volume+0x172>
 806cce6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806cce8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806ccea:	f7ff fef3 	bl	806cad4 <check_fs>
 806ccee:	4603      	mov	r3, r0
 806ccf0:	e000      	b.n	806ccf4 <find_volume+0x174>
 806ccf2:	2303      	movs	r3, #3
 806ccf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 806ccf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806ccfc:	2b01      	cmp	r3, #1
 806ccfe:	d905      	bls.n	806cd0c <find_volume+0x18c>
 806cd00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cd02:	3301      	adds	r3, #1
 806cd04:	643b      	str	r3, [r7, #64]	; 0x40
 806cd06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cd08:	2b03      	cmp	r3, #3
 806cd0a:	d9e1      	bls.n	806ccd0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 806cd0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cd10:	2b04      	cmp	r3, #4
 806cd12:	d101      	bne.n	806cd18 <find_volume+0x198>
 806cd14:	2301      	movs	r3, #1
 806cd16:	e17d      	b.n	806d014 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 806cd18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cd1c:	2b01      	cmp	r3, #1
 806cd1e:	d901      	bls.n	806cd24 <find_volume+0x1a4>
 806cd20:	230d      	movs	r3, #13
 806cd22:	e177      	b.n	806d014 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 806cd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd26:	3334      	adds	r3, #52	; 0x34
 806cd28:	330b      	adds	r3, #11
 806cd2a:	4618      	mov	r0, r3
 806cd2c:	f7fe fc5e 	bl	806b5ec <ld_word>
 806cd30:	4603      	mov	r3, r0
 806cd32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 806cd36:	d001      	beq.n	806cd3c <find_volume+0x1bc>
 806cd38:	230d      	movs	r3, #13
 806cd3a:	e16b      	b.n	806d014 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 806cd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd3e:	3334      	adds	r3, #52	; 0x34
 806cd40:	3316      	adds	r3, #22
 806cd42:	4618      	mov	r0, r3
 806cd44:	f7fe fc52 	bl	806b5ec <ld_word>
 806cd48:	4603      	mov	r3, r0
 806cd4a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 806cd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806cd4e:	2b00      	cmp	r3, #0
 806cd50:	d106      	bne.n	806cd60 <find_volume+0x1e0>
 806cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd54:	3334      	adds	r3, #52	; 0x34
 806cd56:	3324      	adds	r3, #36	; 0x24
 806cd58:	4618      	mov	r0, r3
 806cd5a:	f7fe fc5f 	bl	806b61c <ld_dword>
 806cd5e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 806cd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 806cd64:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 806cd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd68:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 806cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd6e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 806cd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd72:	789b      	ldrb	r3, [r3, #2]
 806cd74:	2b01      	cmp	r3, #1
 806cd76:	d005      	beq.n	806cd84 <find_volume+0x204>
 806cd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd7a:	789b      	ldrb	r3, [r3, #2]
 806cd7c:	2b02      	cmp	r3, #2
 806cd7e:	d001      	beq.n	806cd84 <find_volume+0x204>
 806cd80:	230d      	movs	r3, #13
 806cd82:	e147      	b.n	806d014 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 806cd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd86:	789b      	ldrb	r3, [r3, #2]
 806cd88:	461a      	mov	r2, r3
 806cd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806cd8c:	fb02 f303 	mul.w	r3, r2, r3
 806cd90:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 806cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 806cd98:	b29a      	uxth	r2, r3
 806cd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd9c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 806cd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cda0:	895b      	ldrh	r3, [r3, #10]
 806cda2:	2b00      	cmp	r3, #0
 806cda4:	d008      	beq.n	806cdb8 <find_volume+0x238>
 806cda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cda8:	895b      	ldrh	r3, [r3, #10]
 806cdaa:	461a      	mov	r2, r3
 806cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cdae:	895b      	ldrh	r3, [r3, #10]
 806cdb0:	3b01      	subs	r3, #1
 806cdb2:	4013      	ands	r3, r2
 806cdb4:	2b00      	cmp	r3, #0
 806cdb6:	d001      	beq.n	806cdbc <find_volume+0x23c>
 806cdb8:	230d      	movs	r3, #13
 806cdba:	e12b      	b.n	806d014 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 806cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cdbe:	3334      	adds	r3, #52	; 0x34
 806cdc0:	3311      	adds	r3, #17
 806cdc2:	4618      	mov	r0, r3
 806cdc4:	f7fe fc12 	bl	806b5ec <ld_word>
 806cdc8:	4603      	mov	r3, r0
 806cdca:	461a      	mov	r2, r3
 806cdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cdce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 806cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cdd2:	891b      	ldrh	r3, [r3, #8]
 806cdd4:	f003 030f 	and.w	r3, r3, #15
 806cdd8:	b29b      	uxth	r3, r3
 806cdda:	2b00      	cmp	r3, #0
 806cddc:	d001      	beq.n	806cde2 <find_volume+0x262>
 806cdde:	230d      	movs	r3, #13
 806cde0:	e118      	b.n	806d014 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 806cde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cde4:	3334      	adds	r3, #52	; 0x34
 806cde6:	3313      	adds	r3, #19
 806cde8:	4618      	mov	r0, r3
 806cdea:	f7fe fbff 	bl	806b5ec <ld_word>
 806cdee:	4603      	mov	r3, r0
 806cdf0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 806cdf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806cdf4:	2b00      	cmp	r3, #0
 806cdf6:	d106      	bne.n	806ce06 <find_volume+0x286>
 806cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cdfa:	3334      	adds	r3, #52	; 0x34
 806cdfc:	3320      	adds	r3, #32
 806cdfe:	4618      	mov	r0, r3
 806ce00:	f7fe fc0c 	bl	806b61c <ld_dword>
 806ce04:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 806ce06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce08:	3334      	adds	r3, #52	; 0x34
 806ce0a:	330e      	adds	r3, #14
 806ce0c:	4618      	mov	r0, r3
 806ce0e:	f7fe fbed 	bl	806b5ec <ld_word>
 806ce12:	4603      	mov	r3, r0
 806ce14:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 806ce16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 806ce18:	2b00      	cmp	r3, #0
 806ce1a:	d101      	bne.n	806ce20 <find_volume+0x2a0>
 806ce1c:	230d      	movs	r3, #13
 806ce1e:	e0f9      	b.n	806d014 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 806ce20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 806ce22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806ce24:	4413      	add	r3, r2
 806ce26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806ce28:	8912      	ldrh	r2, [r2, #8]
 806ce2a:	0912      	lsrs	r2, r2, #4
 806ce2c:	b292      	uxth	r2, r2
 806ce2e:	4413      	add	r3, r2
 806ce30:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 806ce32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 806ce34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806ce36:	429a      	cmp	r2, r3
 806ce38:	d201      	bcs.n	806ce3e <find_volume+0x2be>
 806ce3a:	230d      	movs	r3, #13
 806ce3c:	e0ea      	b.n	806d014 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 806ce3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 806ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806ce42:	1ad3      	subs	r3, r2, r3
 806ce44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806ce46:	8952      	ldrh	r2, [r2, #10]
 806ce48:	fbb3 f3f2 	udiv	r3, r3, r2
 806ce4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 806ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806ce50:	2b00      	cmp	r3, #0
 806ce52:	d103      	bne.n	806ce5c <find_volume+0x2dc>
 806ce54:	230d      	movs	r3, #13
 806ce56:	e0dd      	b.n	806d014 <find_volume+0x494>
 806ce58:	20000424 	.word	0x20000424
		fmt = FS_FAT32;
 806ce5c:	2303      	movs	r3, #3
 806ce5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 806ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806ce64:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 806ce68:	4293      	cmp	r3, r2
 806ce6a:	d802      	bhi.n	806ce72 <find_volume+0x2f2>
 806ce6c:	2302      	movs	r3, #2
 806ce6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 806ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806ce74:	f640 72f5 	movw	r2, #4085	; 0xff5
 806ce78:	4293      	cmp	r3, r2
 806ce7a:	d802      	bhi.n	806ce82 <find_volume+0x302>
 806ce7c:	2301      	movs	r3, #1
 806ce7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 806ce82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806ce84:	1c9a      	adds	r2, r3, #2
 806ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce88:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 806ce8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 806ce8e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 806ce90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 806ce92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806ce94:	441a      	add	r2, r3
 806ce96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce98:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 806ce9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 806ce9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806ce9e:	441a      	add	r2, r3
 806cea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cea2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 806cea4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cea8:	2b03      	cmp	r3, #3
 806ceaa:	d11e      	bne.n	806ceea <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 806ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ceae:	3334      	adds	r3, #52	; 0x34
 806ceb0:	332a      	adds	r3, #42	; 0x2a
 806ceb2:	4618      	mov	r0, r3
 806ceb4:	f7fe fb9a 	bl	806b5ec <ld_word>
 806ceb8:	4603      	mov	r3, r0
 806ceba:	2b00      	cmp	r3, #0
 806cebc:	d001      	beq.n	806cec2 <find_volume+0x342>
 806cebe:	230d      	movs	r3, #13
 806cec0:	e0a8      	b.n	806d014 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 806cec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cec4:	891b      	ldrh	r3, [r3, #8]
 806cec6:	2b00      	cmp	r3, #0
 806cec8:	d001      	beq.n	806cece <find_volume+0x34e>
 806ceca:	230d      	movs	r3, #13
 806cecc:	e0a2      	b.n	806d014 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 806cece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ced0:	3334      	adds	r3, #52	; 0x34
 806ced2:	332c      	adds	r3, #44	; 0x2c
 806ced4:	4618      	mov	r0, r3
 806ced6:	f7fe fba1 	bl	806b61c <ld_dword>
 806ceda:	4602      	mov	r2, r0
 806cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cede:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 806cee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cee2:	699b      	ldr	r3, [r3, #24]
 806cee4:	009b      	lsls	r3, r3, #2
 806cee6:	647b      	str	r3, [r7, #68]	; 0x44
 806cee8:	e01f      	b.n	806cf2a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 806ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ceec:	891b      	ldrh	r3, [r3, #8]
 806ceee:	2b00      	cmp	r3, #0
 806cef0:	d101      	bne.n	806cef6 <find_volume+0x376>
 806cef2:	230d      	movs	r3, #13
 806cef4:	e08e      	b.n	806d014 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 806cef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806cefa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806cefc:	441a      	add	r2, r3
 806cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf00:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 806cf02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cf06:	2b02      	cmp	r3, #2
 806cf08:	d103      	bne.n	806cf12 <find_volume+0x392>
 806cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf0c:	699b      	ldr	r3, [r3, #24]
 806cf0e:	005b      	lsls	r3, r3, #1
 806cf10:	e00a      	b.n	806cf28 <find_volume+0x3a8>
 806cf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf14:	699a      	ldr	r2, [r3, #24]
 806cf16:	4613      	mov	r3, r2
 806cf18:	005b      	lsls	r3, r3, #1
 806cf1a:	4413      	add	r3, r2
 806cf1c:	085a      	lsrs	r2, r3, #1
 806cf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf20:	699b      	ldr	r3, [r3, #24]
 806cf22:	f003 0301 	and.w	r3, r3, #1
 806cf26:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 806cf28:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 806cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf2c:	69da      	ldr	r2, [r3, #28]
 806cf2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 806cf30:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 806cf34:	0a5b      	lsrs	r3, r3, #9
 806cf36:	429a      	cmp	r2, r3
 806cf38:	d201      	bcs.n	806cf3e <find_volume+0x3be>
 806cf3a:	230d      	movs	r3, #13
 806cf3c:	e06a      	b.n	806d014 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 806cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806cf44:	615a      	str	r2, [r3, #20]
 806cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf48:	695a      	ldr	r2, [r3, #20]
 806cf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf4c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 806cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf50:	2280      	movs	r2, #128	; 0x80
 806cf52:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 806cf54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cf58:	2b03      	cmp	r3, #3
 806cf5a:	d149      	bne.n	806cff0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 806cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf5e:	3334      	adds	r3, #52	; 0x34
 806cf60:	3330      	adds	r3, #48	; 0x30
 806cf62:	4618      	mov	r0, r3
 806cf64:	f7fe fb42 	bl	806b5ec <ld_word>
 806cf68:	4603      	mov	r3, r0
 806cf6a:	2b01      	cmp	r3, #1
 806cf6c:	d140      	bne.n	806cff0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 806cf6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806cf70:	3301      	adds	r3, #1
 806cf72:	4619      	mov	r1, r3
 806cf74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806cf76:	f7fe fe1b 	bl	806bbb0 <move_window>
 806cf7a:	4603      	mov	r3, r0
 806cf7c:	2b00      	cmp	r3, #0
 806cf7e:	d137      	bne.n	806cff0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 806cf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf82:	2200      	movs	r2, #0
 806cf84:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 806cf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cf88:	3334      	adds	r3, #52	; 0x34
 806cf8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 806cf8e:	4618      	mov	r0, r3
 806cf90:	f7fe fb2c 	bl	806b5ec <ld_word>
 806cf94:	4603      	mov	r3, r0
 806cf96:	461a      	mov	r2, r3
 806cf98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 806cf9c:	429a      	cmp	r2, r3
 806cf9e:	d127      	bne.n	806cff0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 806cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cfa2:	3334      	adds	r3, #52	; 0x34
 806cfa4:	4618      	mov	r0, r3
 806cfa6:	f7fe fb39 	bl	806b61c <ld_dword>
 806cfaa:	4603      	mov	r3, r0
 806cfac:	4a1b      	ldr	r2, [pc, #108]	; (806d01c <find_volume+0x49c>)
 806cfae:	4293      	cmp	r3, r2
 806cfb0:	d11e      	bne.n	806cff0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 806cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cfb4:	3334      	adds	r3, #52	; 0x34
 806cfb6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 806cfba:	4618      	mov	r0, r3
 806cfbc:	f7fe fb2e 	bl	806b61c <ld_dword>
 806cfc0:	4603      	mov	r3, r0
 806cfc2:	4a17      	ldr	r2, [pc, #92]	; (806d020 <find_volume+0x4a0>)
 806cfc4:	4293      	cmp	r3, r2
 806cfc6:	d113      	bne.n	806cff0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 806cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cfca:	3334      	adds	r3, #52	; 0x34
 806cfcc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 806cfd0:	4618      	mov	r0, r3
 806cfd2:	f7fe fb23 	bl	806b61c <ld_dword>
 806cfd6:	4602      	mov	r2, r0
 806cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cfda:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 806cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cfde:	3334      	adds	r3, #52	; 0x34
 806cfe0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 806cfe4:	4618      	mov	r0, r3
 806cfe6:	f7fe fb19 	bl	806b61c <ld_dword>
 806cfea:	4602      	mov	r2, r0
 806cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cfee:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 806cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cff2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 806cff6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 806cff8:	4b0a      	ldr	r3, [pc, #40]	; (806d024 <find_volume+0x4a4>)
 806cffa:	881b      	ldrh	r3, [r3, #0]
 806cffc:	3301      	adds	r3, #1
 806cffe:	b29a      	uxth	r2, r3
 806d000:	4b08      	ldr	r3, [pc, #32]	; (806d024 <find_volume+0x4a4>)
 806d002:	801a      	strh	r2, [r3, #0]
 806d004:	4b07      	ldr	r3, [pc, #28]	; (806d024 <find_volume+0x4a4>)
 806d006:	881a      	ldrh	r2, [r3, #0]
 806d008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806d00a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 806d00c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806d00e:	f7fe fd67 	bl	806bae0 <clear_lock>
#endif
	return FR_OK;
 806d012:	2300      	movs	r3, #0
}
 806d014:	4618      	mov	r0, r3
 806d016:	3758      	adds	r7, #88	; 0x58
 806d018:	46bd      	mov	sp, r7
 806d01a:	bd80      	pop	{r7, pc}
 806d01c:	41615252 	.word	0x41615252
 806d020:	61417272 	.word	0x61417272
 806d024:	20000428 	.word	0x20000428

0806d028 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 806d028:	b580      	push	{r7, lr}
 806d02a:	b084      	sub	sp, #16
 806d02c:	af00      	add	r7, sp, #0
 806d02e:	6078      	str	r0, [r7, #4]
 806d030:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 806d032:	2309      	movs	r3, #9
 806d034:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 806d036:	687b      	ldr	r3, [r7, #4]
 806d038:	2b00      	cmp	r3, #0
 806d03a:	d02e      	beq.n	806d09a <validate+0x72>
 806d03c:	687b      	ldr	r3, [r7, #4]
 806d03e:	681b      	ldr	r3, [r3, #0]
 806d040:	2b00      	cmp	r3, #0
 806d042:	d02a      	beq.n	806d09a <validate+0x72>
 806d044:	687b      	ldr	r3, [r7, #4]
 806d046:	681b      	ldr	r3, [r3, #0]
 806d048:	781b      	ldrb	r3, [r3, #0]
 806d04a:	2b00      	cmp	r3, #0
 806d04c:	d025      	beq.n	806d09a <validate+0x72>
 806d04e:	687b      	ldr	r3, [r7, #4]
 806d050:	889a      	ldrh	r2, [r3, #4]
 806d052:	687b      	ldr	r3, [r7, #4]
 806d054:	681b      	ldr	r3, [r3, #0]
 806d056:	88db      	ldrh	r3, [r3, #6]
 806d058:	429a      	cmp	r2, r3
 806d05a:	d11e      	bne.n	806d09a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 806d05c:	687b      	ldr	r3, [r7, #4]
 806d05e:	681b      	ldr	r3, [r3, #0]
 806d060:	4618      	mov	r0, r3
 806d062:	f7fe fbc3 	bl	806b7ec <lock_fs>
 806d066:	4603      	mov	r3, r0
 806d068:	2b00      	cmp	r3, #0
 806d06a:	d014      	beq.n	806d096 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 806d06c:	687b      	ldr	r3, [r7, #4]
 806d06e:	681b      	ldr	r3, [r3, #0]
 806d070:	785b      	ldrb	r3, [r3, #1]
 806d072:	4618      	mov	r0, r3
 806d074:	f7fe fa1c 	bl	806b4b0 <disk_status>
 806d078:	4603      	mov	r3, r0
 806d07a:	f003 0301 	and.w	r3, r3, #1
 806d07e:	2b00      	cmp	r3, #0
 806d080:	d102      	bne.n	806d088 <validate+0x60>
				res = FR_OK;
 806d082:	2300      	movs	r3, #0
 806d084:	73fb      	strb	r3, [r7, #15]
 806d086:	e008      	b.n	806d09a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 806d088:	687b      	ldr	r3, [r7, #4]
 806d08a:	681b      	ldr	r3, [r3, #0]
 806d08c:	2100      	movs	r1, #0
 806d08e:	4618      	mov	r0, r3
 806d090:	f7fe fbc2 	bl	806b818 <unlock_fs>
 806d094:	e001      	b.n	806d09a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 806d096:	230f      	movs	r3, #15
 806d098:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 806d09a:	7bfb      	ldrb	r3, [r7, #15]
 806d09c:	2b00      	cmp	r3, #0
 806d09e:	d102      	bne.n	806d0a6 <validate+0x7e>
 806d0a0:	687b      	ldr	r3, [r7, #4]
 806d0a2:	681b      	ldr	r3, [r3, #0]
 806d0a4:	e000      	b.n	806d0a8 <validate+0x80>
 806d0a6:	2300      	movs	r3, #0
 806d0a8:	683a      	ldr	r2, [r7, #0]
 806d0aa:	6013      	str	r3, [r2, #0]
	return res;
 806d0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 806d0ae:	4618      	mov	r0, r3
 806d0b0:	3710      	adds	r7, #16
 806d0b2:	46bd      	mov	sp, r7
 806d0b4:	bd80      	pop	{r7, pc}
	...

0806d0b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 806d0b8:	b580      	push	{r7, lr}
 806d0ba:	b088      	sub	sp, #32
 806d0bc:	af00      	add	r7, sp, #0
 806d0be:	60f8      	str	r0, [r7, #12]
 806d0c0:	60b9      	str	r1, [r7, #8]
 806d0c2:	4613      	mov	r3, r2
 806d0c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 806d0c6:	68bb      	ldr	r3, [r7, #8]
 806d0c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 806d0ca:	f107 0310 	add.w	r3, r7, #16
 806d0ce:	4618      	mov	r0, r3
 806d0d0:	f7ff fcbb 	bl	806ca4a <get_ldnumber>
 806d0d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 806d0d6:	69fb      	ldr	r3, [r7, #28]
 806d0d8:	2b00      	cmp	r3, #0
 806d0da:	da01      	bge.n	806d0e0 <f_mount+0x28>
 806d0dc:	230b      	movs	r3, #11
 806d0de:	e048      	b.n	806d172 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 806d0e0:	4a26      	ldr	r2, [pc, #152]	; (806d17c <f_mount+0xc4>)
 806d0e2:	69fb      	ldr	r3, [r7, #28]
 806d0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 806d0e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 806d0ea:	69bb      	ldr	r3, [r7, #24]
 806d0ec:	2b00      	cmp	r3, #0
 806d0ee:	d00f      	beq.n	806d110 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 806d0f0:	69b8      	ldr	r0, [r7, #24]
 806d0f2:	f7fe fcf5 	bl	806bae0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 806d0f6:	69bb      	ldr	r3, [r7, #24]
 806d0f8:	68db      	ldr	r3, [r3, #12]
 806d0fa:	4618      	mov	r0, r3
 806d0fc:	f000 fef8 	bl	806def0 <ff_del_syncobj>
 806d100:	4603      	mov	r3, r0
 806d102:	2b00      	cmp	r3, #0
 806d104:	d101      	bne.n	806d10a <f_mount+0x52>
 806d106:	2302      	movs	r3, #2
 806d108:	e033      	b.n	806d172 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 806d10a:	69bb      	ldr	r3, [r7, #24]
 806d10c:	2200      	movs	r2, #0
 806d10e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 806d110:	68fb      	ldr	r3, [r7, #12]
 806d112:	2b00      	cmp	r3, #0
 806d114:	d00f      	beq.n	806d136 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 806d116:	68fb      	ldr	r3, [r7, #12]
 806d118:	2200      	movs	r2, #0
 806d11a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 806d11c:	69fb      	ldr	r3, [r7, #28]
 806d11e:	b2da      	uxtb	r2, r3
 806d120:	68fb      	ldr	r3, [r7, #12]
 806d122:	330c      	adds	r3, #12
 806d124:	4619      	mov	r1, r3
 806d126:	4610      	mov	r0, r2
 806d128:	f000 fec7 	bl	806deba <ff_cre_syncobj>
 806d12c:	4603      	mov	r3, r0
 806d12e:	2b00      	cmp	r3, #0
 806d130:	d101      	bne.n	806d136 <f_mount+0x7e>
 806d132:	2302      	movs	r3, #2
 806d134:	e01d      	b.n	806d172 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 806d136:	68fa      	ldr	r2, [r7, #12]
 806d138:	4910      	ldr	r1, [pc, #64]	; (806d17c <f_mount+0xc4>)
 806d13a:	69fb      	ldr	r3, [r7, #28]
 806d13c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 806d140:	68fb      	ldr	r3, [r7, #12]
 806d142:	2b00      	cmp	r3, #0
 806d144:	d002      	beq.n	806d14c <f_mount+0x94>
 806d146:	79fb      	ldrb	r3, [r7, #7]
 806d148:	2b01      	cmp	r3, #1
 806d14a:	d001      	beq.n	806d150 <f_mount+0x98>
 806d14c:	2300      	movs	r3, #0
 806d14e:	e010      	b.n	806d172 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 806d150:	f107 010c 	add.w	r1, r7, #12
 806d154:	f107 0308 	add.w	r3, r7, #8
 806d158:	2200      	movs	r2, #0
 806d15a:	4618      	mov	r0, r3
 806d15c:	f7ff fd10 	bl	806cb80 <find_volume>
 806d160:	4603      	mov	r3, r0
 806d162:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 806d164:	68fb      	ldr	r3, [r7, #12]
 806d166:	7dfa      	ldrb	r2, [r7, #23]
 806d168:	4611      	mov	r1, r2
 806d16a:	4618      	mov	r0, r3
 806d16c:	f7fe fb54 	bl	806b818 <unlock_fs>
 806d170:	7dfb      	ldrb	r3, [r7, #23]
}
 806d172:	4618      	mov	r0, r3
 806d174:	3720      	adds	r7, #32
 806d176:	46bd      	mov	sp, r7
 806d178:	bd80      	pop	{r7, pc}
 806d17a:	bf00      	nop
 806d17c:	20000424 	.word	0x20000424

0806d180 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 806d180:	b580      	push	{r7, lr}
 806d182:	b098      	sub	sp, #96	; 0x60
 806d184:	af00      	add	r7, sp, #0
 806d186:	60f8      	str	r0, [r7, #12]
 806d188:	60b9      	str	r1, [r7, #8]
 806d18a:	4613      	mov	r3, r2
 806d18c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 806d18e:	68fb      	ldr	r3, [r7, #12]
 806d190:	2b00      	cmp	r3, #0
 806d192:	d101      	bne.n	806d198 <f_open+0x18>
 806d194:	2309      	movs	r3, #9
 806d196:	e1b4      	b.n	806d502 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 806d198:	79fb      	ldrb	r3, [r7, #7]
 806d19a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 806d19e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 806d1a0:	79fa      	ldrb	r2, [r7, #7]
 806d1a2:	f107 0110 	add.w	r1, r7, #16
 806d1a6:	f107 0308 	add.w	r3, r7, #8
 806d1aa:	4618      	mov	r0, r3
 806d1ac:	f7ff fce8 	bl	806cb80 <find_volume>
 806d1b0:	4603      	mov	r3, r0
 806d1b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 806d1b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d1ba:	2b00      	cmp	r3, #0
 806d1bc:	f040 8191 	bne.w	806d4e2 <f_open+0x362>
		dj.obj.fs = fs;
 806d1c0:	693b      	ldr	r3, [r7, #16]
 806d1c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 806d1c4:	68ba      	ldr	r2, [r7, #8]
 806d1c6:	f107 0314 	add.w	r3, r7, #20
 806d1ca:	4611      	mov	r1, r2
 806d1cc:	4618      	mov	r0, r3
 806d1ce:	f7ff fbcb 	bl	806c968 <follow_path>
 806d1d2:	4603      	mov	r3, r0
 806d1d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 806d1d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d1dc:	2b00      	cmp	r3, #0
 806d1de:	d11a      	bne.n	806d216 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 806d1e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 806d1e4:	b25b      	sxtb	r3, r3
 806d1e6:	2b00      	cmp	r3, #0
 806d1e8:	da03      	bge.n	806d1f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 806d1ea:	2306      	movs	r3, #6
 806d1ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806d1f0:	e011      	b.n	806d216 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 806d1f2:	79fb      	ldrb	r3, [r7, #7]
 806d1f4:	f023 0301 	bic.w	r3, r3, #1
 806d1f8:	2b00      	cmp	r3, #0
 806d1fa:	bf14      	ite	ne
 806d1fc:	2301      	movne	r3, #1
 806d1fe:	2300      	moveq	r3, #0
 806d200:	b2db      	uxtb	r3, r3
 806d202:	461a      	mov	r2, r3
 806d204:	f107 0314 	add.w	r3, r7, #20
 806d208:	4611      	mov	r1, r2
 806d20a:	4618      	mov	r0, r3
 806d20c:	f7fe fb20 	bl	806b850 <chk_lock>
 806d210:	4603      	mov	r3, r0
 806d212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 806d216:	79fb      	ldrb	r3, [r7, #7]
 806d218:	f003 031c 	and.w	r3, r3, #28
 806d21c:	2b00      	cmp	r3, #0
 806d21e:	d07f      	beq.n	806d320 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 806d220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d224:	2b00      	cmp	r3, #0
 806d226:	d017      	beq.n	806d258 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 806d228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d22c:	2b04      	cmp	r3, #4
 806d22e:	d10e      	bne.n	806d24e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 806d230:	f7fe fb6a 	bl	806b908 <enq_lock>
 806d234:	4603      	mov	r3, r0
 806d236:	2b00      	cmp	r3, #0
 806d238:	d006      	beq.n	806d248 <f_open+0xc8>
 806d23a:	f107 0314 	add.w	r3, r7, #20
 806d23e:	4618      	mov	r0, r3
 806d240:	f7ff faae 	bl	806c7a0 <dir_register>
 806d244:	4603      	mov	r3, r0
 806d246:	e000      	b.n	806d24a <f_open+0xca>
 806d248:	2312      	movs	r3, #18
 806d24a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 806d24e:	79fb      	ldrb	r3, [r7, #7]
 806d250:	f043 0308 	orr.w	r3, r3, #8
 806d254:	71fb      	strb	r3, [r7, #7]
 806d256:	e010      	b.n	806d27a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 806d258:	7ebb      	ldrb	r3, [r7, #26]
 806d25a:	f003 0311 	and.w	r3, r3, #17
 806d25e:	2b00      	cmp	r3, #0
 806d260:	d003      	beq.n	806d26a <f_open+0xea>
					res = FR_DENIED;
 806d262:	2307      	movs	r3, #7
 806d264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806d268:	e007      	b.n	806d27a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 806d26a:	79fb      	ldrb	r3, [r7, #7]
 806d26c:	f003 0304 	and.w	r3, r3, #4
 806d270:	2b00      	cmp	r3, #0
 806d272:	d002      	beq.n	806d27a <f_open+0xfa>
 806d274:	2308      	movs	r3, #8
 806d276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 806d27a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d27e:	2b00      	cmp	r3, #0
 806d280:	d168      	bne.n	806d354 <f_open+0x1d4>
 806d282:	79fb      	ldrb	r3, [r7, #7]
 806d284:	f003 0308 	and.w	r3, r3, #8
 806d288:	2b00      	cmp	r3, #0
 806d28a:	d063      	beq.n	806d354 <f_open+0x1d4>
				dw = GET_FATTIME();
 806d28c:	f7fd fbd2 	bl	806aa34 <get_fattime>
 806d290:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 806d292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806d294:	330e      	adds	r3, #14
 806d296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806d298:	4618      	mov	r0, r3
 806d29a:	f7fe f9fd 	bl	806b698 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 806d29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806d2a0:	3316      	adds	r3, #22
 806d2a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806d2a4:	4618      	mov	r0, r3
 806d2a6:	f7fe f9f7 	bl	806b698 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 806d2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806d2ac:	330b      	adds	r3, #11
 806d2ae:	2220      	movs	r2, #32
 806d2b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 806d2b2:	693b      	ldr	r3, [r7, #16]
 806d2b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806d2b6:	4611      	mov	r1, r2
 806d2b8:	4618      	mov	r0, r3
 806d2ba:	f7ff f980 	bl	806c5be <ld_clust>
 806d2be:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 806d2c0:	693b      	ldr	r3, [r7, #16]
 806d2c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 806d2c4:	2200      	movs	r2, #0
 806d2c6:	4618      	mov	r0, r3
 806d2c8:	f7ff f998 	bl	806c5fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 806d2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806d2ce:	331c      	adds	r3, #28
 806d2d0:	2100      	movs	r1, #0
 806d2d2:	4618      	mov	r0, r3
 806d2d4:	f7fe f9e0 	bl	806b698 <st_dword>
					fs->wflag = 1;
 806d2d8:	693b      	ldr	r3, [r7, #16]
 806d2da:	2201      	movs	r2, #1
 806d2dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 806d2de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806d2e0:	2b00      	cmp	r3, #0
 806d2e2:	d037      	beq.n	806d354 <f_open+0x1d4>
						dw = fs->winsect;
 806d2e4:	693b      	ldr	r3, [r7, #16]
 806d2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806d2e8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 806d2ea:	f107 0314 	add.w	r3, r7, #20
 806d2ee:	2200      	movs	r2, #0
 806d2f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 806d2f2:	4618      	mov	r0, r3
 806d2f4:	f7fe feab 	bl	806c04e <remove_chain>
 806d2f8:	4603      	mov	r3, r0
 806d2fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 806d2fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d302:	2b00      	cmp	r3, #0
 806d304:	d126      	bne.n	806d354 <f_open+0x1d4>
							res = move_window(fs, dw);
 806d306:	693b      	ldr	r3, [r7, #16]
 806d308:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806d30a:	4618      	mov	r0, r3
 806d30c:	f7fe fc50 	bl	806bbb0 <move_window>
 806d310:	4603      	mov	r3, r0
 806d312:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 806d316:	693b      	ldr	r3, [r7, #16]
 806d318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 806d31a:	3a01      	subs	r2, #1
 806d31c:	611a      	str	r2, [r3, #16]
 806d31e:	e019      	b.n	806d354 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 806d320:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d324:	2b00      	cmp	r3, #0
 806d326:	d115      	bne.n	806d354 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 806d328:	7ebb      	ldrb	r3, [r7, #26]
 806d32a:	f003 0310 	and.w	r3, r3, #16
 806d32e:	2b00      	cmp	r3, #0
 806d330:	d003      	beq.n	806d33a <f_open+0x1ba>
					res = FR_NO_FILE;
 806d332:	2304      	movs	r3, #4
 806d334:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806d338:	e00c      	b.n	806d354 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 806d33a:	79fb      	ldrb	r3, [r7, #7]
 806d33c:	f003 0302 	and.w	r3, r3, #2
 806d340:	2b00      	cmp	r3, #0
 806d342:	d007      	beq.n	806d354 <f_open+0x1d4>
 806d344:	7ebb      	ldrb	r3, [r7, #26]
 806d346:	f003 0301 	and.w	r3, r3, #1
 806d34a:	2b00      	cmp	r3, #0
 806d34c:	d002      	beq.n	806d354 <f_open+0x1d4>
						res = FR_DENIED;
 806d34e:	2307      	movs	r3, #7
 806d350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 806d354:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d358:	2b00      	cmp	r3, #0
 806d35a:	d128      	bne.n	806d3ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 806d35c:	79fb      	ldrb	r3, [r7, #7]
 806d35e:	f003 0308 	and.w	r3, r3, #8
 806d362:	2b00      	cmp	r3, #0
 806d364:	d003      	beq.n	806d36e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 806d366:	79fb      	ldrb	r3, [r7, #7]
 806d368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806d36c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 806d36e:	693b      	ldr	r3, [r7, #16]
 806d370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806d372:	68fb      	ldr	r3, [r7, #12]
 806d374:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 806d376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806d378:	68fb      	ldr	r3, [r7, #12]
 806d37a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 806d37c:	79fb      	ldrb	r3, [r7, #7]
 806d37e:	f023 0301 	bic.w	r3, r3, #1
 806d382:	2b00      	cmp	r3, #0
 806d384:	bf14      	ite	ne
 806d386:	2301      	movne	r3, #1
 806d388:	2300      	moveq	r3, #0
 806d38a:	b2db      	uxtb	r3, r3
 806d38c:	461a      	mov	r2, r3
 806d38e:	f107 0314 	add.w	r3, r7, #20
 806d392:	4611      	mov	r1, r2
 806d394:	4618      	mov	r0, r3
 806d396:	f7fe fad9 	bl	806b94c <inc_lock>
 806d39a:	4602      	mov	r2, r0
 806d39c:	68fb      	ldr	r3, [r7, #12]
 806d39e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 806d3a0:	68fb      	ldr	r3, [r7, #12]
 806d3a2:	691b      	ldr	r3, [r3, #16]
 806d3a4:	2b00      	cmp	r3, #0
 806d3a6:	d102      	bne.n	806d3ae <f_open+0x22e>
 806d3a8:	2302      	movs	r3, #2
 806d3aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 806d3ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d3b2:	2b00      	cmp	r3, #0
 806d3b4:	f040 8095 	bne.w	806d4e2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 806d3b8:	693b      	ldr	r3, [r7, #16]
 806d3ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806d3bc:	4611      	mov	r1, r2
 806d3be:	4618      	mov	r0, r3
 806d3c0:	f7ff f8fd 	bl	806c5be <ld_clust>
 806d3c4:	4602      	mov	r2, r0
 806d3c6:	68fb      	ldr	r3, [r7, #12]
 806d3c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 806d3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806d3cc:	331c      	adds	r3, #28
 806d3ce:	4618      	mov	r0, r3
 806d3d0:	f7fe f924 	bl	806b61c <ld_dword>
 806d3d4:	4602      	mov	r2, r0
 806d3d6:	68fb      	ldr	r3, [r7, #12]
 806d3d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 806d3da:	68fb      	ldr	r3, [r7, #12]
 806d3dc:	2200      	movs	r2, #0
 806d3de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 806d3e0:	693a      	ldr	r2, [r7, #16]
 806d3e2:	68fb      	ldr	r3, [r7, #12]
 806d3e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 806d3e6:	693b      	ldr	r3, [r7, #16]
 806d3e8:	88da      	ldrh	r2, [r3, #6]
 806d3ea:	68fb      	ldr	r3, [r7, #12]
 806d3ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 806d3ee:	68fb      	ldr	r3, [r7, #12]
 806d3f0:	79fa      	ldrb	r2, [r7, #7]
 806d3f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 806d3f4:	68fb      	ldr	r3, [r7, #12]
 806d3f6:	2200      	movs	r2, #0
 806d3f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 806d3fa:	68fb      	ldr	r3, [r7, #12]
 806d3fc:	2200      	movs	r2, #0
 806d3fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 806d400:	68fb      	ldr	r3, [r7, #12]
 806d402:	2200      	movs	r2, #0
 806d404:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 806d406:	68fb      	ldr	r3, [r7, #12]
 806d408:	3330      	adds	r3, #48	; 0x30
 806d40a:	f44f 7200 	mov.w	r2, #512	; 0x200
 806d40e:	2100      	movs	r1, #0
 806d410:	4618      	mov	r0, r3
 806d412:	f7fe f98e 	bl	806b732 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 806d416:	79fb      	ldrb	r3, [r7, #7]
 806d418:	f003 0320 	and.w	r3, r3, #32
 806d41c:	2b00      	cmp	r3, #0
 806d41e:	d060      	beq.n	806d4e2 <f_open+0x362>
 806d420:	68fb      	ldr	r3, [r7, #12]
 806d422:	68db      	ldr	r3, [r3, #12]
 806d424:	2b00      	cmp	r3, #0
 806d426:	d05c      	beq.n	806d4e2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 806d428:	68fb      	ldr	r3, [r7, #12]
 806d42a:	68da      	ldr	r2, [r3, #12]
 806d42c:	68fb      	ldr	r3, [r7, #12]
 806d42e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 806d430:	693b      	ldr	r3, [r7, #16]
 806d432:	895b      	ldrh	r3, [r3, #10]
 806d434:	025b      	lsls	r3, r3, #9
 806d436:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 806d438:	68fb      	ldr	r3, [r7, #12]
 806d43a:	689b      	ldr	r3, [r3, #8]
 806d43c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 806d43e:	68fb      	ldr	r3, [r7, #12]
 806d440:	68db      	ldr	r3, [r3, #12]
 806d442:	657b      	str	r3, [r7, #84]	; 0x54
 806d444:	e016      	b.n	806d474 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 806d446:	68fb      	ldr	r3, [r7, #12]
 806d448:	6db9      	ldr	r1, [r7, #88]	; 0x58
 806d44a:	4618      	mov	r0, r3
 806d44c:	f7fe fc6b 	bl	806bd26 <get_fat>
 806d450:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 806d452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 806d454:	2b01      	cmp	r3, #1
 806d456:	d802      	bhi.n	806d45e <f_open+0x2de>
 806d458:	2302      	movs	r3, #2
 806d45a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 806d45e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 806d460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806d464:	d102      	bne.n	806d46c <f_open+0x2ec>
 806d466:	2301      	movs	r3, #1
 806d468:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 806d46c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 806d46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806d470:	1ad3      	subs	r3, r2, r3
 806d472:	657b      	str	r3, [r7, #84]	; 0x54
 806d474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d478:	2b00      	cmp	r3, #0
 806d47a:	d103      	bne.n	806d484 <f_open+0x304>
 806d47c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 806d47e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806d480:	429a      	cmp	r2, r3
 806d482:	d8e0      	bhi.n	806d446 <f_open+0x2c6>
				}
				fp->clust = clst;
 806d484:	68fb      	ldr	r3, [r7, #12]
 806d486:	6dba      	ldr	r2, [r7, #88]	; 0x58
 806d488:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 806d48a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d48e:	2b00      	cmp	r3, #0
 806d490:	d127      	bne.n	806d4e2 <f_open+0x362>
 806d492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 806d494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d498:	2b00      	cmp	r3, #0
 806d49a:	d022      	beq.n	806d4e2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 806d49c:	693b      	ldr	r3, [r7, #16]
 806d49e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 806d4a0:	4618      	mov	r0, r3
 806d4a2:	f7fe fc21 	bl	806bce8 <clust2sect>
 806d4a6:	6478      	str	r0, [r7, #68]	; 0x44
 806d4a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 806d4aa:	2b00      	cmp	r3, #0
 806d4ac:	d103      	bne.n	806d4b6 <f_open+0x336>
						res = FR_INT_ERR;
 806d4ae:	2302      	movs	r3, #2
 806d4b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806d4b4:	e015      	b.n	806d4e2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 806d4b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 806d4b8:	0a5a      	lsrs	r2, r3, #9
 806d4ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 806d4bc:	441a      	add	r2, r3
 806d4be:	68fb      	ldr	r3, [r7, #12]
 806d4c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 806d4c2:	693b      	ldr	r3, [r7, #16]
 806d4c4:	7858      	ldrb	r0, [r3, #1]
 806d4c6:	68fb      	ldr	r3, [r7, #12]
 806d4c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d4cc:	68fb      	ldr	r3, [r7, #12]
 806d4ce:	6a1a      	ldr	r2, [r3, #32]
 806d4d0:	2301      	movs	r3, #1
 806d4d2:	f7fe f82d 	bl	806b530 <disk_read>
 806d4d6:	4603      	mov	r3, r0
 806d4d8:	2b00      	cmp	r3, #0
 806d4da:	d002      	beq.n	806d4e2 <f_open+0x362>
 806d4dc:	2301      	movs	r3, #1
 806d4de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 806d4e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d4e6:	2b00      	cmp	r3, #0
 806d4e8:	d002      	beq.n	806d4f0 <f_open+0x370>
 806d4ea:	68fb      	ldr	r3, [r7, #12]
 806d4ec:	2200      	movs	r2, #0
 806d4ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 806d4f0:	693b      	ldr	r3, [r7, #16]
 806d4f2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 806d4f6:	4611      	mov	r1, r2
 806d4f8:	4618      	mov	r0, r3
 806d4fa:	f7fe f98d 	bl	806b818 <unlock_fs>
 806d4fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 806d502:	4618      	mov	r0, r3
 806d504:	3760      	adds	r7, #96	; 0x60
 806d506:	46bd      	mov	sp, r7
 806d508:	bd80      	pop	{r7, pc}

0806d50a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 806d50a:	b580      	push	{r7, lr}
 806d50c:	b08e      	sub	sp, #56	; 0x38
 806d50e:	af00      	add	r7, sp, #0
 806d510:	60f8      	str	r0, [r7, #12]
 806d512:	60b9      	str	r1, [r7, #8]
 806d514:	607a      	str	r2, [r7, #4]
 806d516:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 806d518:	68bb      	ldr	r3, [r7, #8]
 806d51a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 806d51c:	683b      	ldr	r3, [r7, #0]
 806d51e:	2200      	movs	r2, #0
 806d520:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 806d522:	68fb      	ldr	r3, [r7, #12]
 806d524:	f107 0214 	add.w	r2, r7, #20
 806d528:	4611      	mov	r1, r2
 806d52a:	4618      	mov	r0, r3
 806d52c:	f7ff fd7c 	bl	806d028 <validate>
 806d530:	4603      	mov	r3, r0
 806d532:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 806d536:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806d53a:	2b00      	cmp	r3, #0
 806d53c:	d107      	bne.n	806d54e <f_read+0x44>
 806d53e:	68fb      	ldr	r3, [r7, #12]
 806d540:	7d5b      	ldrb	r3, [r3, #21]
 806d542:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 806d546:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806d54a:	2b00      	cmp	r3, #0
 806d54c:	d009      	beq.n	806d562 <f_read+0x58>
 806d54e:	697b      	ldr	r3, [r7, #20]
 806d550:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 806d554:	4611      	mov	r1, r2
 806d556:	4618      	mov	r0, r3
 806d558:	f7fe f95e 	bl	806b818 <unlock_fs>
 806d55c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806d560:	e13d      	b.n	806d7de <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 806d562:	68fb      	ldr	r3, [r7, #12]
 806d564:	7d1b      	ldrb	r3, [r3, #20]
 806d566:	f003 0301 	and.w	r3, r3, #1
 806d56a:	2b00      	cmp	r3, #0
 806d56c:	d106      	bne.n	806d57c <f_read+0x72>
 806d56e:	697b      	ldr	r3, [r7, #20]
 806d570:	2107      	movs	r1, #7
 806d572:	4618      	mov	r0, r3
 806d574:	f7fe f950 	bl	806b818 <unlock_fs>
 806d578:	2307      	movs	r3, #7
 806d57a:	e130      	b.n	806d7de <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 806d57c:	68fb      	ldr	r3, [r7, #12]
 806d57e:	68da      	ldr	r2, [r3, #12]
 806d580:	68fb      	ldr	r3, [r7, #12]
 806d582:	699b      	ldr	r3, [r3, #24]
 806d584:	1ad3      	subs	r3, r2, r3
 806d586:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 806d588:	687a      	ldr	r2, [r7, #4]
 806d58a:	6a3b      	ldr	r3, [r7, #32]
 806d58c:	429a      	cmp	r2, r3
 806d58e:	f240 811c 	bls.w	806d7ca <f_read+0x2c0>
 806d592:	6a3b      	ldr	r3, [r7, #32]
 806d594:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 806d596:	e118      	b.n	806d7ca <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 806d598:	68fb      	ldr	r3, [r7, #12]
 806d59a:	699b      	ldr	r3, [r3, #24]
 806d59c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d5a0:	2b00      	cmp	r3, #0
 806d5a2:	f040 80e4 	bne.w	806d76e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 806d5a6:	68fb      	ldr	r3, [r7, #12]
 806d5a8:	699b      	ldr	r3, [r3, #24]
 806d5aa:	0a5b      	lsrs	r3, r3, #9
 806d5ac:	697a      	ldr	r2, [r7, #20]
 806d5ae:	8952      	ldrh	r2, [r2, #10]
 806d5b0:	3a01      	subs	r2, #1
 806d5b2:	4013      	ands	r3, r2
 806d5b4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 806d5b6:	69fb      	ldr	r3, [r7, #28]
 806d5b8:	2b00      	cmp	r3, #0
 806d5ba:	d139      	bne.n	806d630 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 806d5bc:	68fb      	ldr	r3, [r7, #12]
 806d5be:	699b      	ldr	r3, [r3, #24]
 806d5c0:	2b00      	cmp	r3, #0
 806d5c2:	d103      	bne.n	806d5cc <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 806d5c4:	68fb      	ldr	r3, [r7, #12]
 806d5c6:	689b      	ldr	r3, [r3, #8]
 806d5c8:	633b      	str	r3, [r7, #48]	; 0x30
 806d5ca:	e013      	b.n	806d5f4 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 806d5cc:	68fb      	ldr	r3, [r7, #12]
 806d5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806d5d0:	2b00      	cmp	r3, #0
 806d5d2:	d007      	beq.n	806d5e4 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 806d5d4:	68fb      	ldr	r3, [r7, #12]
 806d5d6:	699b      	ldr	r3, [r3, #24]
 806d5d8:	4619      	mov	r1, r3
 806d5da:	68f8      	ldr	r0, [r7, #12]
 806d5dc:	f7fe fe34 	bl	806c248 <clmt_clust>
 806d5e0:	6338      	str	r0, [r7, #48]	; 0x30
 806d5e2:	e007      	b.n	806d5f4 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 806d5e4:	68fa      	ldr	r2, [r7, #12]
 806d5e6:	68fb      	ldr	r3, [r7, #12]
 806d5e8:	69db      	ldr	r3, [r3, #28]
 806d5ea:	4619      	mov	r1, r3
 806d5ec:	4610      	mov	r0, r2
 806d5ee:	f7fe fb9a 	bl	806bd26 <get_fat>
 806d5f2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 806d5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806d5f6:	2b01      	cmp	r3, #1
 806d5f8:	d809      	bhi.n	806d60e <f_read+0x104>
 806d5fa:	68fb      	ldr	r3, [r7, #12]
 806d5fc:	2202      	movs	r2, #2
 806d5fe:	755a      	strb	r2, [r3, #21]
 806d600:	697b      	ldr	r3, [r7, #20]
 806d602:	2102      	movs	r1, #2
 806d604:	4618      	mov	r0, r3
 806d606:	f7fe f907 	bl	806b818 <unlock_fs>
 806d60a:	2302      	movs	r3, #2
 806d60c:	e0e7      	b.n	806d7de <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 806d60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806d610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806d614:	d109      	bne.n	806d62a <f_read+0x120>
 806d616:	68fb      	ldr	r3, [r7, #12]
 806d618:	2201      	movs	r2, #1
 806d61a:	755a      	strb	r2, [r3, #21]
 806d61c:	697b      	ldr	r3, [r7, #20]
 806d61e:	2101      	movs	r1, #1
 806d620:	4618      	mov	r0, r3
 806d622:	f7fe f8f9 	bl	806b818 <unlock_fs>
 806d626:	2301      	movs	r3, #1
 806d628:	e0d9      	b.n	806d7de <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 806d62a:	68fb      	ldr	r3, [r7, #12]
 806d62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806d62e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 806d630:	697a      	ldr	r2, [r7, #20]
 806d632:	68fb      	ldr	r3, [r7, #12]
 806d634:	69db      	ldr	r3, [r3, #28]
 806d636:	4619      	mov	r1, r3
 806d638:	4610      	mov	r0, r2
 806d63a:	f7fe fb55 	bl	806bce8 <clust2sect>
 806d63e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 806d640:	69bb      	ldr	r3, [r7, #24]
 806d642:	2b00      	cmp	r3, #0
 806d644:	d109      	bne.n	806d65a <f_read+0x150>
 806d646:	68fb      	ldr	r3, [r7, #12]
 806d648:	2202      	movs	r2, #2
 806d64a:	755a      	strb	r2, [r3, #21]
 806d64c:	697b      	ldr	r3, [r7, #20]
 806d64e:	2102      	movs	r1, #2
 806d650:	4618      	mov	r0, r3
 806d652:	f7fe f8e1 	bl	806b818 <unlock_fs>
 806d656:	2302      	movs	r3, #2
 806d658:	e0c1      	b.n	806d7de <f_read+0x2d4>
			sect += csect;
 806d65a:	69ba      	ldr	r2, [r7, #24]
 806d65c:	69fb      	ldr	r3, [r7, #28]
 806d65e:	4413      	add	r3, r2
 806d660:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 806d662:	687b      	ldr	r3, [r7, #4]
 806d664:	0a5b      	lsrs	r3, r3, #9
 806d666:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 806d668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d66a:	2b00      	cmp	r3, #0
 806d66c:	d03e      	beq.n	806d6ec <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 806d66e:	69fa      	ldr	r2, [r7, #28]
 806d670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d672:	4413      	add	r3, r2
 806d674:	697a      	ldr	r2, [r7, #20]
 806d676:	8952      	ldrh	r2, [r2, #10]
 806d678:	4293      	cmp	r3, r2
 806d67a:	d905      	bls.n	806d688 <f_read+0x17e>
					cc = fs->csize - csect;
 806d67c:	697b      	ldr	r3, [r7, #20]
 806d67e:	895b      	ldrh	r3, [r3, #10]
 806d680:	461a      	mov	r2, r3
 806d682:	69fb      	ldr	r3, [r7, #28]
 806d684:	1ad3      	subs	r3, r2, r3
 806d686:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806d688:	697b      	ldr	r3, [r7, #20]
 806d68a:	7858      	ldrb	r0, [r3, #1]
 806d68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d68e:	69ba      	ldr	r2, [r7, #24]
 806d690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806d692:	f7fd ff4d 	bl	806b530 <disk_read>
 806d696:	4603      	mov	r3, r0
 806d698:	2b00      	cmp	r3, #0
 806d69a:	d009      	beq.n	806d6b0 <f_read+0x1a6>
 806d69c:	68fb      	ldr	r3, [r7, #12]
 806d69e:	2201      	movs	r2, #1
 806d6a0:	755a      	strb	r2, [r3, #21]
 806d6a2:	697b      	ldr	r3, [r7, #20]
 806d6a4:	2101      	movs	r1, #1
 806d6a6:	4618      	mov	r0, r3
 806d6a8:	f7fe f8b6 	bl	806b818 <unlock_fs>
 806d6ac:	2301      	movs	r3, #1
 806d6ae:	e096      	b.n	806d7de <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 806d6b0:	68fb      	ldr	r3, [r7, #12]
 806d6b2:	7d1b      	ldrb	r3, [r3, #20]
 806d6b4:	b25b      	sxtb	r3, r3
 806d6b6:	2b00      	cmp	r3, #0
 806d6b8:	da14      	bge.n	806d6e4 <f_read+0x1da>
 806d6ba:	68fb      	ldr	r3, [r7, #12]
 806d6bc:	6a1a      	ldr	r2, [r3, #32]
 806d6be:	69bb      	ldr	r3, [r7, #24]
 806d6c0:	1ad3      	subs	r3, r2, r3
 806d6c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806d6c4:	429a      	cmp	r2, r3
 806d6c6:	d90d      	bls.n	806d6e4 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 806d6c8:	68fb      	ldr	r3, [r7, #12]
 806d6ca:	6a1a      	ldr	r2, [r3, #32]
 806d6cc:	69bb      	ldr	r3, [r7, #24]
 806d6ce:	1ad3      	subs	r3, r2, r3
 806d6d0:	025b      	lsls	r3, r3, #9
 806d6d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806d6d4:	18d0      	adds	r0, r2, r3
 806d6d6:	68fb      	ldr	r3, [r7, #12]
 806d6d8:	3330      	adds	r3, #48	; 0x30
 806d6da:	f44f 7200 	mov.w	r2, #512	; 0x200
 806d6de:	4619      	mov	r1, r3
 806d6e0:	f7fe f806 	bl	806b6f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 806d6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d6e6:	025b      	lsls	r3, r3, #9
 806d6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 806d6ea:	e05a      	b.n	806d7a2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 806d6ec:	68fb      	ldr	r3, [r7, #12]
 806d6ee:	6a1b      	ldr	r3, [r3, #32]
 806d6f0:	69ba      	ldr	r2, [r7, #24]
 806d6f2:	429a      	cmp	r2, r3
 806d6f4:	d038      	beq.n	806d768 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 806d6f6:	68fb      	ldr	r3, [r7, #12]
 806d6f8:	7d1b      	ldrb	r3, [r3, #20]
 806d6fa:	b25b      	sxtb	r3, r3
 806d6fc:	2b00      	cmp	r3, #0
 806d6fe:	da1d      	bge.n	806d73c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806d700:	697b      	ldr	r3, [r7, #20]
 806d702:	7858      	ldrb	r0, [r3, #1]
 806d704:	68fb      	ldr	r3, [r7, #12]
 806d706:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d70a:	68fb      	ldr	r3, [r7, #12]
 806d70c:	6a1a      	ldr	r2, [r3, #32]
 806d70e:	2301      	movs	r3, #1
 806d710:	f7fd ff2e 	bl	806b570 <disk_write>
 806d714:	4603      	mov	r3, r0
 806d716:	2b00      	cmp	r3, #0
 806d718:	d009      	beq.n	806d72e <f_read+0x224>
 806d71a:	68fb      	ldr	r3, [r7, #12]
 806d71c:	2201      	movs	r2, #1
 806d71e:	755a      	strb	r2, [r3, #21]
 806d720:	697b      	ldr	r3, [r7, #20]
 806d722:	2101      	movs	r1, #1
 806d724:	4618      	mov	r0, r3
 806d726:	f7fe f877 	bl	806b818 <unlock_fs>
 806d72a:	2301      	movs	r3, #1
 806d72c:	e057      	b.n	806d7de <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 806d72e:	68fb      	ldr	r3, [r7, #12]
 806d730:	7d1b      	ldrb	r3, [r3, #20]
 806d732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806d736:	b2da      	uxtb	r2, r3
 806d738:	68fb      	ldr	r3, [r7, #12]
 806d73a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 806d73c:	697b      	ldr	r3, [r7, #20]
 806d73e:	7858      	ldrb	r0, [r3, #1]
 806d740:	68fb      	ldr	r3, [r7, #12]
 806d742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d746:	2301      	movs	r3, #1
 806d748:	69ba      	ldr	r2, [r7, #24]
 806d74a:	f7fd fef1 	bl	806b530 <disk_read>
 806d74e:	4603      	mov	r3, r0
 806d750:	2b00      	cmp	r3, #0
 806d752:	d009      	beq.n	806d768 <f_read+0x25e>
 806d754:	68fb      	ldr	r3, [r7, #12]
 806d756:	2201      	movs	r2, #1
 806d758:	755a      	strb	r2, [r3, #21]
 806d75a:	697b      	ldr	r3, [r7, #20]
 806d75c:	2101      	movs	r1, #1
 806d75e:	4618      	mov	r0, r3
 806d760:	f7fe f85a 	bl	806b818 <unlock_fs>
 806d764:	2301      	movs	r3, #1
 806d766:	e03a      	b.n	806d7de <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 806d768:	68fb      	ldr	r3, [r7, #12]
 806d76a:	69ba      	ldr	r2, [r7, #24]
 806d76c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 806d76e:	68fb      	ldr	r3, [r7, #12]
 806d770:	699b      	ldr	r3, [r3, #24]
 806d772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d776:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 806d77a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 806d77c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806d77e:	687b      	ldr	r3, [r7, #4]
 806d780:	429a      	cmp	r2, r3
 806d782:	d901      	bls.n	806d788 <f_read+0x27e>
 806d784:	687b      	ldr	r3, [r7, #4]
 806d786:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 806d788:	68fb      	ldr	r3, [r7, #12]
 806d78a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 806d78e:	68fb      	ldr	r3, [r7, #12]
 806d790:	699b      	ldr	r3, [r3, #24]
 806d792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d796:	4413      	add	r3, r2
 806d798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806d79a:	4619      	mov	r1, r3
 806d79c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806d79e:	f7fd ffa7 	bl	806b6f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 806d7a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806d7a6:	4413      	add	r3, r2
 806d7a8:	627b      	str	r3, [r7, #36]	; 0x24
 806d7aa:	68fb      	ldr	r3, [r7, #12]
 806d7ac:	699a      	ldr	r2, [r3, #24]
 806d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806d7b0:	441a      	add	r2, r3
 806d7b2:	68fb      	ldr	r3, [r7, #12]
 806d7b4:	619a      	str	r2, [r3, #24]
 806d7b6:	683b      	ldr	r3, [r7, #0]
 806d7b8:	681a      	ldr	r2, [r3, #0]
 806d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806d7bc:	441a      	add	r2, r3
 806d7be:	683b      	ldr	r3, [r7, #0]
 806d7c0:	601a      	str	r2, [r3, #0]
 806d7c2:	687a      	ldr	r2, [r7, #4]
 806d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806d7c6:	1ad3      	subs	r3, r2, r3
 806d7c8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 806d7ca:	687b      	ldr	r3, [r7, #4]
 806d7cc:	2b00      	cmp	r3, #0
 806d7ce:	f47f aee3 	bne.w	806d598 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 806d7d2:	697b      	ldr	r3, [r7, #20]
 806d7d4:	2100      	movs	r1, #0
 806d7d6:	4618      	mov	r0, r3
 806d7d8:	f7fe f81e 	bl	806b818 <unlock_fs>
 806d7dc:	2300      	movs	r3, #0
}
 806d7de:	4618      	mov	r0, r3
 806d7e0:	3738      	adds	r7, #56	; 0x38
 806d7e2:	46bd      	mov	sp, r7
 806d7e4:	bd80      	pop	{r7, pc}

0806d7e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 806d7e6:	b580      	push	{r7, lr}
 806d7e8:	b08c      	sub	sp, #48	; 0x30
 806d7ea:	af00      	add	r7, sp, #0
 806d7ec:	60f8      	str	r0, [r7, #12]
 806d7ee:	60b9      	str	r1, [r7, #8]
 806d7f0:	607a      	str	r2, [r7, #4]
 806d7f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 806d7f4:	68bb      	ldr	r3, [r7, #8]
 806d7f6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 806d7f8:	683b      	ldr	r3, [r7, #0]
 806d7fa:	2200      	movs	r2, #0
 806d7fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 806d7fe:	68fb      	ldr	r3, [r7, #12]
 806d800:	f107 0210 	add.w	r2, r7, #16
 806d804:	4611      	mov	r1, r2
 806d806:	4618      	mov	r0, r3
 806d808:	f7ff fc0e 	bl	806d028 <validate>
 806d80c:	4603      	mov	r3, r0
 806d80e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 806d812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806d816:	2b00      	cmp	r3, #0
 806d818:	d107      	bne.n	806d82a <f_write+0x44>
 806d81a:	68fb      	ldr	r3, [r7, #12]
 806d81c:	7d5b      	ldrb	r3, [r3, #21]
 806d81e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 806d822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806d826:	2b00      	cmp	r3, #0
 806d828:	d009      	beq.n	806d83e <f_write+0x58>
 806d82a:	693b      	ldr	r3, [r7, #16]
 806d82c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 806d830:	4611      	mov	r1, r2
 806d832:	4618      	mov	r0, r3
 806d834:	f7fd fff0 	bl	806b818 <unlock_fs>
 806d838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806d83c:	e173      	b.n	806db26 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 806d83e:	68fb      	ldr	r3, [r7, #12]
 806d840:	7d1b      	ldrb	r3, [r3, #20]
 806d842:	f003 0302 	and.w	r3, r3, #2
 806d846:	2b00      	cmp	r3, #0
 806d848:	d106      	bne.n	806d858 <f_write+0x72>
 806d84a:	693b      	ldr	r3, [r7, #16]
 806d84c:	2107      	movs	r1, #7
 806d84e:	4618      	mov	r0, r3
 806d850:	f7fd ffe2 	bl	806b818 <unlock_fs>
 806d854:	2307      	movs	r3, #7
 806d856:	e166      	b.n	806db26 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 806d858:	68fb      	ldr	r3, [r7, #12]
 806d85a:	699a      	ldr	r2, [r3, #24]
 806d85c:	687b      	ldr	r3, [r7, #4]
 806d85e:	441a      	add	r2, r3
 806d860:	68fb      	ldr	r3, [r7, #12]
 806d862:	699b      	ldr	r3, [r3, #24]
 806d864:	429a      	cmp	r2, r3
 806d866:	f080 814b 	bcs.w	806db00 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 806d86a:	68fb      	ldr	r3, [r7, #12]
 806d86c:	699b      	ldr	r3, [r3, #24]
 806d86e:	43db      	mvns	r3, r3
 806d870:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 806d872:	e145      	b.n	806db00 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 806d874:	68fb      	ldr	r3, [r7, #12]
 806d876:	699b      	ldr	r3, [r3, #24]
 806d878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d87c:	2b00      	cmp	r3, #0
 806d87e:	f040 8101 	bne.w	806da84 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 806d882:	68fb      	ldr	r3, [r7, #12]
 806d884:	699b      	ldr	r3, [r3, #24]
 806d886:	0a5b      	lsrs	r3, r3, #9
 806d888:	693a      	ldr	r2, [r7, #16]
 806d88a:	8952      	ldrh	r2, [r2, #10]
 806d88c:	3a01      	subs	r2, #1
 806d88e:	4013      	ands	r3, r2
 806d890:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 806d892:	69bb      	ldr	r3, [r7, #24]
 806d894:	2b00      	cmp	r3, #0
 806d896:	d14d      	bne.n	806d934 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 806d898:	68fb      	ldr	r3, [r7, #12]
 806d89a:	699b      	ldr	r3, [r3, #24]
 806d89c:	2b00      	cmp	r3, #0
 806d89e:	d10c      	bne.n	806d8ba <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 806d8a0:	68fb      	ldr	r3, [r7, #12]
 806d8a2:	689b      	ldr	r3, [r3, #8]
 806d8a4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 806d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d8a8:	2b00      	cmp	r3, #0
 806d8aa:	d11a      	bne.n	806d8e2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 806d8ac:	68fb      	ldr	r3, [r7, #12]
 806d8ae:	2100      	movs	r1, #0
 806d8b0:	4618      	mov	r0, r3
 806d8b2:	f7fe fc31 	bl	806c118 <create_chain>
 806d8b6:	62b8      	str	r0, [r7, #40]	; 0x28
 806d8b8:	e013      	b.n	806d8e2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 806d8ba:	68fb      	ldr	r3, [r7, #12]
 806d8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806d8be:	2b00      	cmp	r3, #0
 806d8c0:	d007      	beq.n	806d8d2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 806d8c2:	68fb      	ldr	r3, [r7, #12]
 806d8c4:	699b      	ldr	r3, [r3, #24]
 806d8c6:	4619      	mov	r1, r3
 806d8c8:	68f8      	ldr	r0, [r7, #12]
 806d8ca:	f7fe fcbd 	bl	806c248 <clmt_clust>
 806d8ce:	62b8      	str	r0, [r7, #40]	; 0x28
 806d8d0:	e007      	b.n	806d8e2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 806d8d2:	68fa      	ldr	r2, [r7, #12]
 806d8d4:	68fb      	ldr	r3, [r7, #12]
 806d8d6:	69db      	ldr	r3, [r3, #28]
 806d8d8:	4619      	mov	r1, r3
 806d8da:	4610      	mov	r0, r2
 806d8dc:	f7fe fc1c 	bl	806c118 <create_chain>
 806d8e0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 806d8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d8e4:	2b00      	cmp	r3, #0
 806d8e6:	f000 8110 	beq.w	806db0a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 806d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d8ec:	2b01      	cmp	r3, #1
 806d8ee:	d109      	bne.n	806d904 <f_write+0x11e>
 806d8f0:	68fb      	ldr	r3, [r7, #12]
 806d8f2:	2202      	movs	r2, #2
 806d8f4:	755a      	strb	r2, [r3, #21]
 806d8f6:	693b      	ldr	r3, [r7, #16]
 806d8f8:	2102      	movs	r1, #2
 806d8fa:	4618      	mov	r0, r3
 806d8fc:	f7fd ff8c 	bl	806b818 <unlock_fs>
 806d900:	2302      	movs	r3, #2
 806d902:	e110      	b.n	806db26 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 806d904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806d90a:	d109      	bne.n	806d920 <f_write+0x13a>
 806d90c:	68fb      	ldr	r3, [r7, #12]
 806d90e:	2201      	movs	r2, #1
 806d910:	755a      	strb	r2, [r3, #21]
 806d912:	693b      	ldr	r3, [r7, #16]
 806d914:	2101      	movs	r1, #1
 806d916:	4618      	mov	r0, r3
 806d918:	f7fd ff7e 	bl	806b818 <unlock_fs>
 806d91c:	2301      	movs	r3, #1
 806d91e:	e102      	b.n	806db26 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 806d920:	68fb      	ldr	r3, [r7, #12]
 806d922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806d924:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 806d926:	68fb      	ldr	r3, [r7, #12]
 806d928:	689b      	ldr	r3, [r3, #8]
 806d92a:	2b00      	cmp	r3, #0
 806d92c:	d102      	bne.n	806d934 <f_write+0x14e>
 806d92e:	68fb      	ldr	r3, [r7, #12]
 806d930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806d932:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 806d934:	68fb      	ldr	r3, [r7, #12]
 806d936:	7d1b      	ldrb	r3, [r3, #20]
 806d938:	b25b      	sxtb	r3, r3
 806d93a:	2b00      	cmp	r3, #0
 806d93c:	da1d      	bge.n	806d97a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806d93e:	693b      	ldr	r3, [r7, #16]
 806d940:	7858      	ldrb	r0, [r3, #1]
 806d942:	68fb      	ldr	r3, [r7, #12]
 806d944:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d948:	68fb      	ldr	r3, [r7, #12]
 806d94a:	6a1a      	ldr	r2, [r3, #32]
 806d94c:	2301      	movs	r3, #1
 806d94e:	f7fd fe0f 	bl	806b570 <disk_write>
 806d952:	4603      	mov	r3, r0
 806d954:	2b00      	cmp	r3, #0
 806d956:	d009      	beq.n	806d96c <f_write+0x186>
 806d958:	68fb      	ldr	r3, [r7, #12]
 806d95a:	2201      	movs	r2, #1
 806d95c:	755a      	strb	r2, [r3, #21]
 806d95e:	693b      	ldr	r3, [r7, #16]
 806d960:	2101      	movs	r1, #1
 806d962:	4618      	mov	r0, r3
 806d964:	f7fd ff58 	bl	806b818 <unlock_fs>
 806d968:	2301      	movs	r3, #1
 806d96a:	e0dc      	b.n	806db26 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 806d96c:	68fb      	ldr	r3, [r7, #12]
 806d96e:	7d1b      	ldrb	r3, [r3, #20]
 806d970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806d974:	b2da      	uxtb	r2, r3
 806d976:	68fb      	ldr	r3, [r7, #12]
 806d978:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 806d97a:	693a      	ldr	r2, [r7, #16]
 806d97c:	68fb      	ldr	r3, [r7, #12]
 806d97e:	69db      	ldr	r3, [r3, #28]
 806d980:	4619      	mov	r1, r3
 806d982:	4610      	mov	r0, r2
 806d984:	f7fe f9b0 	bl	806bce8 <clust2sect>
 806d988:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 806d98a:	697b      	ldr	r3, [r7, #20]
 806d98c:	2b00      	cmp	r3, #0
 806d98e:	d109      	bne.n	806d9a4 <f_write+0x1be>
 806d990:	68fb      	ldr	r3, [r7, #12]
 806d992:	2202      	movs	r2, #2
 806d994:	755a      	strb	r2, [r3, #21]
 806d996:	693b      	ldr	r3, [r7, #16]
 806d998:	2102      	movs	r1, #2
 806d99a:	4618      	mov	r0, r3
 806d99c:	f7fd ff3c 	bl	806b818 <unlock_fs>
 806d9a0:	2302      	movs	r3, #2
 806d9a2:	e0c0      	b.n	806db26 <f_write+0x340>
			sect += csect;
 806d9a4:	697a      	ldr	r2, [r7, #20]
 806d9a6:	69bb      	ldr	r3, [r7, #24]
 806d9a8:	4413      	add	r3, r2
 806d9aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 806d9ac:	687b      	ldr	r3, [r7, #4]
 806d9ae:	0a5b      	lsrs	r3, r3, #9
 806d9b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 806d9b2:	6a3b      	ldr	r3, [r7, #32]
 806d9b4:	2b00      	cmp	r3, #0
 806d9b6:	d041      	beq.n	806da3c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 806d9b8:	69ba      	ldr	r2, [r7, #24]
 806d9ba:	6a3b      	ldr	r3, [r7, #32]
 806d9bc:	4413      	add	r3, r2
 806d9be:	693a      	ldr	r2, [r7, #16]
 806d9c0:	8952      	ldrh	r2, [r2, #10]
 806d9c2:	4293      	cmp	r3, r2
 806d9c4:	d905      	bls.n	806d9d2 <f_write+0x1ec>
					cc = fs->csize - csect;
 806d9c6:	693b      	ldr	r3, [r7, #16]
 806d9c8:	895b      	ldrh	r3, [r3, #10]
 806d9ca:	461a      	mov	r2, r3
 806d9cc:	69bb      	ldr	r3, [r7, #24]
 806d9ce:	1ad3      	subs	r3, r2, r3
 806d9d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806d9d2:	693b      	ldr	r3, [r7, #16]
 806d9d4:	7858      	ldrb	r0, [r3, #1]
 806d9d6:	6a3b      	ldr	r3, [r7, #32]
 806d9d8:	697a      	ldr	r2, [r7, #20]
 806d9da:	69f9      	ldr	r1, [r7, #28]
 806d9dc:	f7fd fdc8 	bl	806b570 <disk_write>
 806d9e0:	4603      	mov	r3, r0
 806d9e2:	2b00      	cmp	r3, #0
 806d9e4:	d009      	beq.n	806d9fa <f_write+0x214>
 806d9e6:	68fb      	ldr	r3, [r7, #12]
 806d9e8:	2201      	movs	r2, #1
 806d9ea:	755a      	strb	r2, [r3, #21]
 806d9ec:	693b      	ldr	r3, [r7, #16]
 806d9ee:	2101      	movs	r1, #1
 806d9f0:	4618      	mov	r0, r3
 806d9f2:	f7fd ff11 	bl	806b818 <unlock_fs>
 806d9f6:	2301      	movs	r3, #1
 806d9f8:	e095      	b.n	806db26 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 806d9fa:	68fb      	ldr	r3, [r7, #12]
 806d9fc:	6a1a      	ldr	r2, [r3, #32]
 806d9fe:	697b      	ldr	r3, [r7, #20]
 806da00:	1ad3      	subs	r3, r2, r3
 806da02:	6a3a      	ldr	r2, [r7, #32]
 806da04:	429a      	cmp	r2, r3
 806da06:	d915      	bls.n	806da34 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 806da08:	68fb      	ldr	r3, [r7, #12]
 806da0a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 806da0e:	68fb      	ldr	r3, [r7, #12]
 806da10:	6a1a      	ldr	r2, [r3, #32]
 806da12:	697b      	ldr	r3, [r7, #20]
 806da14:	1ad3      	subs	r3, r2, r3
 806da16:	025b      	lsls	r3, r3, #9
 806da18:	69fa      	ldr	r2, [r7, #28]
 806da1a:	4413      	add	r3, r2
 806da1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 806da20:	4619      	mov	r1, r3
 806da22:	f7fd fe65 	bl	806b6f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 806da26:	68fb      	ldr	r3, [r7, #12]
 806da28:	7d1b      	ldrb	r3, [r3, #20]
 806da2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806da2e:	b2da      	uxtb	r2, r3
 806da30:	68fb      	ldr	r3, [r7, #12]
 806da32:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 806da34:	6a3b      	ldr	r3, [r7, #32]
 806da36:	025b      	lsls	r3, r3, #9
 806da38:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 806da3a:	e044      	b.n	806dac6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 806da3c:	68fb      	ldr	r3, [r7, #12]
 806da3e:	6a1b      	ldr	r3, [r3, #32]
 806da40:	697a      	ldr	r2, [r7, #20]
 806da42:	429a      	cmp	r2, r3
 806da44:	d01b      	beq.n	806da7e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 806da46:	68fb      	ldr	r3, [r7, #12]
 806da48:	699a      	ldr	r2, [r3, #24]
 806da4a:	68fb      	ldr	r3, [r7, #12]
 806da4c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 806da4e:	429a      	cmp	r2, r3
 806da50:	d215      	bcs.n	806da7e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 806da52:	693b      	ldr	r3, [r7, #16]
 806da54:	7858      	ldrb	r0, [r3, #1]
 806da56:	68fb      	ldr	r3, [r7, #12]
 806da58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806da5c:	2301      	movs	r3, #1
 806da5e:	697a      	ldr	r2, [r7, #20]
 806da60:	f7fd fd66 	bl	806b530 <disk_read>
 806da64:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 806da66:	2b00      	cmp	r3, #0
 806da68:	d009      	beq.n	806da7e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 806da6a:	68fb      	ldr	r3, [r7, #12]
 806da6c:	2201      	movs	r2, #1
 806da6e:	755a      	strb	r2, [r3, #21]
 806da70:	693b      	ldr	r3, [r7, #16]
 806da72:	2101      	movs	r1, #1
 806da74:	4618      	mov	r0, r3
 806da76:	f7fd fecf 	bl	806b818 <unlock_fs>
 806da7a:	2301      	movs	r3, #1
 806da7c:	e053      	b.n	806db26 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 806da7e:	68fb      	ldr	r3, [r7, #12]
 806da80:	697a      	ldr	r2, [r7, #20]
 806da82:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 806da84:	68fb      	ldr	r3, [r7, #12]
 806da86:	699b      	ldr	r3, [r3, #24]
 806da88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806da8c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 806da90:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 806da92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806da94:	687b      	ldr	r3, [r7, #4]
 806da96:	429a      	cmp	r2, r3
 806da98:	d901      	bls.n	806da9e <f_write+0x2b8>
 806da9a:	687b      	ldr	r3, [r7, #4]
 806da9c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 806da9e:	68fb      	ldr	r3, [r7, #12]
 806daa0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 806daa4:	68fb      	ldr	r3, [r7, #12]
 806daa6:	699b      	ldr	r3, [r3, #24]
 806daa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806daac:	4413      	add	r3, r2
 806daae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806dab0:	69f9      	ldr	r1, [r7, #28]
 806dab2:	4618      	mov	r0, r3
 806dab4:	f7fd fe1c 	bl	806b6f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 806dab8:	68fb      	ldr	r3, [r7, #12]
 806daba:	7d1b      	ldrb	r3, [r3, #20]
 806dabc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 806dac0:	b2da      	uxtb	r2, r3
 806dac2:	68fb      	ldr	r3, [r7, #12]
 806dac4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 806dac6:	69fa      	ldr	r2, [r7, #28]
 806dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806daca:	4413      	add	r3, r2
 806dacc:	61fb      	str	r3, [r7, #28]
 806dace:	68fb      	ldr	r3, [r7, #12]
 806dad0:	699a      	ldr	r2, [r3, #24]
 806dad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806dad4:	441a      	add	r2, r3
 806dad6:	68fb      	ldr	r3, [r7, #12]
 806dad8:	619a      	str	r2, [r3, #24]
 806dada:	68fb      	ldr	r3, [r7, #12]
 806dadc:	68da      	ldr	r2, [r3, #12]
 806dade:	68fb      	ldr	r3, [r7, #12]
 806dae0:	699b      	ldr	r3, [r3, #24]
 806dae2:	429a      	cmp	r2, r3
 806dae4:	bf38      	it	cc
 806dae6:	461a      	movcc	r2, r3
 806dae8:	68fb      	ldr	r3, [r7, #12]
 806daea:	60da      	str	r2, [r3, #12]
 806daec:	683b      	ldr	r3, [r7, #0]
 806daee:	681a      	ldr	r2, [r3, #0]
 806daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806daf2:	441a      	add	r2, r3
 806daf4:	683b      	ldr	r3, [r7, #0]
 806daf6:	601a      	str	r2, [r3, #0]
 806daf8:	687a      	ldr	r2, [r7, #4]
 806dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806dafc:	1ad3      	subs	r3, r2, r3
 806dafe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 806db00:	687b      	ldr	r3, [r7, #4]
 806db02:	2b00      	cmp	r3, #0
 806db04:	f47f aeb6 	bne.w	806d874 <f_write+0x8e>
 806db08:	e000      	b.n	806db0c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 806db0a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 806db0c:	68fb      	ldr	r3, [r7, #12]
 806db0e:	7d1b      	ldrb	r3, [r3, #20]
 806db10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806db14:	b2da      	uxtb	r2, r3
 806db16:	68fb      	ldr	r3, [r7, #12]
 806db18:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 806db1a:	693b      	ldr	r3, [r7, #16]
 806db1c:	2100      	movs	r1, #0
 806db1e:	4618      	mov	r0, r3
 806db20:	f7fd fe7a 	bl	806b818 <unlock_fs>
 806db24:	2300      	movs	r3, #0
}
 806db26:	4618      	mov	r0, r3
 806db28:	3730      	adds	r7, #48	; 0x30
 806db2a:	46bd      	mov	sp, r7
 806db2c:	bd80      	pop	{r7, pc}

0806db2e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 806db2e:	b580      	push	{r7, lr}
 806db30:	b086      	sub	sp, #24
 806db32:	af00      	add	r7, sp, #0
 806db34:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 806db36:	687b      	ldr	r3, [r7, #4]
 806db38:	f107 0208 	add.w	r2, r7, #8
 806db3c:	4611      	mov	r1, r2
 806db3e:	4618      	mov	r0, r3
 806db40:	f7ff fa72 	bl	806d028 <validate>
 806db44:	4603      	mov	r3, r0
 806db46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 806db48:	7dfb      	ldrb	r3, [r7, #23]
 806db4a:	2b00      	cmp	r3, #0
 806db4c:	d16d      	bne.n	806dc2a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 806db4e:	687b      	ldr	r3, [r7, #4]
 806db50:	7d1b      	ldrb	r3, [r3, #20]
 806db52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806db56:	2b00      	cmp	r3, #0
 806db58:	d067      	beq.n	806dc2a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 806db5a:	687b      	ldr	r3, [r7, #4]
 806db5c:	7d1b      	ldrb	r3, [r3, #20]
 806db5e:	b25b      	sxtb	r3, r3
 806db60:	2b00      	cmp	r3, #0
 806db62:	da1a      	bge.n	806db9a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 806db64:	68bb      	ldr	r3, [r7, #8]
 806db66:	7858      	ldrb	r0, [r3, #1]
 806db68:	687b      	ldr	r3, [r7, #4]
 806db6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806db6e:	687b      	ldr	r3, [r7, #4]
 806db70:	6a1a      	ldr	r2, [r3, #32]
 806db72:	2301      	movs	r3, #1
 806db74:	f7fd fcfc 	bl	806b570 <disk_write>
 806db78:	4603      	mov	r3, r0
 806db7a:	2b00      	cmp	r3, #0
 806db7c:	d006      	beq.n	806db8c <f_sync+0x5e>
 806db7e:	68bb      	ldr	r3, [r7, #8]
 806db80:	2101      	movs	r1, #1
 806db82:	4618      	mov	r0, r3
 806db84:	f7fd fe48 	bl	806b818 <unlock_fs>
 806db88:	2301      	movs	r3, #1
 806db8a:	e055      	b.n	806dc38 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 806db8c:	687b      	ldr	r3, [r7, #4]
 806db8e:	7d1b      	ldrb	r3, [r3, #20]
 806db90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806db94:	b2da      	uxtb	r2, r3
 806db96:	687b      	ldr	r3, [r7, #4]
 806db98:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 806db9a:	f7fc ff4b 	bl	806aa34 <get_fattime>
 806db9e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 806dba0:	68ba      	ldr	r2, [r7, #8]
 806dba2:	687b      	ldr	r3, [r7, #4]
 806dba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806dba6:	4619      	mov	r1, r3
 806dba8:	4610      	mov	r0, r2
 806dbaa:	f7fe f801 	bl	806bbb0 <move_window>
 806dbae:	4603      	mov	r3, r0
 806dbb0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 806dbb2:	7dfb      	ldrb	r3, [r7, #23]
 806dbb4:	2b00      	cmp	r3, #0
 806dbb6:	d138      	bne.n	806dc2a <f_sync+0xfc>
					dir = fp->dir_ptr;
 806dbb8:	687b      	ldr	r3, [r7, #4]
 806dbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806dbbc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 806dbbe:	68fb      	ldr	r3, [r7, #12]
 806dbc0:	330b      	adds	r3, #11
 806dbc2:	781a      	ldrb	r2, [r3, #0]
 806dbc4:	68fb      	ldr	r3, [r7, #12]
 806dbc6:	330b      	adds	r3, #11
 806dbc8:	f042 0220 	orr.w	r2, r2, #32
 806dbcc:	b2d2      	uxtb	r2, r2
 806dbce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 806dbd0:	687b      	ldr	r3, [r7, #4]
 806dbd2:	6818      	ldr	r0, [r3, #0]
 806dbd4:	687b      	ldr	r3, [r7, #4]
 806dbd6:	689b      	ldr	r3, [r3, #8]
 806dbd8:	461a      	mov	r2, r3
 806dbda:	68f9      	ldr	r1, [r7, #12]
 806dbdc:	f7fe fd0e 	bl	806c5fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 806dbe0:	68fb      	ldr	r3, [r7, #12]
 806dbe2:	f103 021c 	add.w	r2, r3, #28
 806dbe6:	687b      	ldr	r3, [r7, #4]
 806dbe8:	68db      	ldr	r3, [r3, #12]
 806dbea:	4619      	mov	r1, r3
 806dbec:	4610      	mov	r0, r2
 806dbee:	f7fd fd53 	bl	806b698 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 806dbf2:	68fb      	ldr	r3, [r7, #12]
 806dbf4:	3316      	adds	r3, #22
 806dbf6:	6939      	ldr	r1, [r7, #16]
 806dbf8:	4618      	mov	r0, r3
 806dbfa:	f7fd fd4d 	bl	806b698 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 806dbfe:	68fb      	ldr	r3, [r7, #12]
 806dc00:	3312      	adds	r3, #18
 806dc02:	2100      	movs	r1, #0
 806dc04:	4618      	mov	r0, r3
 806dc06:	f7fd fd2c 	bl	806b662 <st_word>
					fs->wflag = 1;
 806dc0a:	68bb      	ldr	r3, [r7, #8]
 806dc0c:	2201      	movs	r2, #1
 806dc0e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 806dc10:	68bb      	ldr	r3, [r7, #8]
 806dc12:	4618      	mov	r0, r3
 806dc14:	f7fd fffa 	bl	806bc0c <sync_fs>
 806dc18:	4603      	mov	r3, r0
 806dc1a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 806dc1c:	687b      	ldr	r3, [r7, #4]
 806dc1e:	7d1b      	ldrb	r3, [r3, #20]
 806dc20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 806dc24:	b2da      	uxtb	r2, r3
 806dc26:	687b      	ldr	r3, [r7, #4]
 806dc28:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 806dc2a:	68bb      	ldr	r3, [r7, #8]
 806dc2c:	7dfa      	ldrb	r2, [r7, #23]
 806dc2e:	4611      	mov	r1, r2
 806dc30:	4618      	mov	r0, r3
 806dc32:	f7fd fdf1 	bl	806b818 <unlock_fs>
 806dc36:	7dfb      	ldrb	r3, [r7, #23]
}
 806dc38:	4618      	mov	r0, r3
 806dc3a:	3718      	adds	r7, #24
 806dc3c:	46bd      	mov	sp, r7
 806dc3e:	bd80      	pop	{r7, pc}

0806dc40 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 806dc40:	b580      	push	{r7, lr}
 806dc42:	b084      	sub	sp, #16
 806dc44:	af00      	add	r7, sp, #0
 806dc46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 806dc48:	6878      	ldr	r0, [r7, #4]
 806dc4a:	f7ff ff70 	bl	806db2e <f_sync>
 806dc4e:	4603      	mov	r3, r0
 806dc50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 806dc52:	7bfb      	ldrb	r3, [r7, #15]
 806dc54:	2b00      	cmp	r3, #0
 806dc56:	d11d      	bne.n	806dc94 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 806dc58:	687b      	ldr	r3, [r7, #4]
 806dc5a:	f107 0208 	add.w	r2, r7, #8
 806dc5e:	4611      	mov	r1, r2
 806dc60:	4618      	mov	r0, r3
 806dc62:	f7ff f9e1 	bl	806d028 <validate>
 806dc66:	4603      	mov	r3, r0
 806dc68:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 806dc6a:	7bfb      	ldrb	r3, [r7, #15]
 806dc6c:	2b00      	cmp	r3, #0
 806dc6e:	d111      	bne.n	806dc94 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 806dc70:	687b      	ldr	r3, [r7, #4]
 806dc72:	691b      	ldr	r3, [r3, #16]
 806dc74:	4618      	mov	r0, r3
 806dc76:	f7fd fef7 	bl	806ba68 <dec_lock>
 806dc7a:	4603      	mov	r3, r0
 806dc7c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 806dc7e:	7bfb      	ldrb	r3, [r7, #15]
 806dc80:	2b00      	cmp	r3, #0
 806dc82:	d102      	bne.n	806dc8a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 806dc84:	687b      	ldr	r3, [r7, #4]
 806dc86:	2200      	movs	r2, #0
 806dc88:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 806dc8a:	68bb      	ldr	r3, [r7, #8]
 806dc8c:	2100      	movs	r1, #0
 806dc8e:	4618      	mov	r0, r3
 806dc90:	f7fd fdc2 	bl	806b818 <unlock_fs>
#endif
		}
	}
	return res;
 806dc94:	7bfb      	ldrb	r3, [r7, #15]
}
 806dc96:	4618      	mov	r0, r3
 806dc98:	3710      	adds	r7, #16
 806dc9a:	46bd      	mov	sp, r7
 806dc9c:	bd80      	pop	{r7, pc}

0806dc9e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 806dc9e:	b580      	push	{r7, lr}
 806dca0:	b09e      	sub	sp, #120	; 0x78
 806dca2:	af00      	add	r7, sp, #0
 806dca4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 806dca6:	2300      	movs	r3, #0
 806dca8:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 806dcaa:	f107 010c 	add.w	r1, r7, #12
 806dcae:	1d3b      	adds	r3, r7, #4
 806dcb0:	2202      	movs	r2, #2
 806dcb2:	4618      	mov	r0, r3
 806dcb4:	f7fe ff64 	bl	806cb80 <find_volume>
 806dcb8:	4603      	mov	r3, r0
 806dcba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 806dcbe:	68fb      	ldr	r3, [r7, #12]
 806dcc0:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 806dcc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dcc6:	2b00      	cmp	r3, #0
 806dcc8:	f040 808e 	bne.w	806dde8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 806dccc:	687a      	ldr	r2, [r7, #4]
 806dcce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806dcd2:	4611      	mov	r1, r2
 806dcd4:	4618      	mov	r0, r3
 806dcd6:	f7fe fe47 	bl	806c968 <follow_path>
 806dcda:	4603      	mov	r3, r0
 806dcdc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 806dce0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dce4:	2b00      	cmp	r3, #0
 806dce6:	d108      	bne.n	806dcfa <f_unlink+0x5c>
 806dce8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806dcec:	2102      	movs	r1, #2
 806dcee:	4618      	mov	r0, r3
 806dcf0:	f7fd fdae 	bl	806b850 <chk_lock>
 806dcf4:	4603      	mov	r3, r0
 806dcf6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 806dcfa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dcfe:	2b00      	cmp	r3, #0
 806dd00:	d172      	bne.n	806dde8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 806dd02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 806dd06:	b25b      	sxtb	r3, r3
 806dd08:	2b00      	cmp	r3, #0
 806dd0a:	da03      	bge.n	806dd14 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 806dd0c:	2306      	movs	r3, #6
 806dd0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 806dd12:	e008      	b.n	806dd26 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 806dd14:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 806dd18:	f003 0301 	and.w	r3, r3, #1
 806dd1c:	2b00      	cmp	r3, #0
 806dd1e:	d002      	beq.n	806dd26 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 806dd20:	2307      	movs	r3, #7
 806dd22:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 806dd26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dd2a:	2b00      	cmp	r3, #0
 806dd2c:	d134      	bne.n	806dd98 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 806dd2e:	68fb      	ldr	r3, [r7, #12]
 806dd30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 806dd32:	4611      	mov	r1, r2
 806dd34:	4618      	mov	r0, r3
 806dd36:	f7fe fc42 	bl	806c5be <ld_clust>
 806dd3a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 806dd3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 806dd40:	f003 0310 	and.w	r3, r3, #16
 806dd44:	2b00      	cmp	r3, #0
 806dd46:	d027      	beq.n	806dd98 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 806dd48:	68fb      	ldr	r3, [r7, #12]
 806dd4a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 806dd4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 806dd4e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 806dd50:	f107 0310 	add.w	r3, r7, #16
 806dd54:	2100      	movs	r1, #0
 806dd56:	4618      	mov	r0, r3
 806dd58:	f7fe faaa 	bl	806c2b0 <dir_sdi>
 806dd5c:	4603      	mov	r3, r0
 806dd5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 806dd62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dd66:	2b00      	cmp	r3, #0
 806dd68:	d116      	bne.n	806dd98 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 806dd6a:	f107 0310 	add.w	r3, r7, #16
 806dd6e:	2100      	movs	r1, #0
 806dd70:	4618      	mov	r0, r3
 806dd72:	f7fe fc63 	bl	806c63c <dir_read>
 806dd76:	4603      	mov	r3, r0
 806dd78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 806dd7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dd80:	2b00      	cmp	r3, #0
 806dd82:	d102      	bne.n	806dd8a <f_unlink+0xec>
 806dd84:	2307      	movs	r3, #7
 806dd86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 806dd8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dd8e:	2b04      	cmp	r3, #4
 806dd90:	d102      	bne.n	806dd98 <f_unlink+0xfa>
 806dd92:	2300      	movs	r3, #0
 806dd94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 806dd98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dd9c:	2b00      	cmp	r3, #0
 806dd9e:	d123      	bne.n	806dde8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 806dda0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806dda4:	4618      	mov	r0, r3
 806dda6:	f7fe fd2d 	bl	806c804 <dir_remove>
 806ddaa:	4603      	mov	r3, r0
 806ddac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 806ddb0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806ddb4:	2b00      	cmp	r3, #0
 806ddb6:	d10c      	bne.n	806ddd2 <f_unlink+0x134>
 806ddb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 806ddba:	2b00      	cmp	r3, #0
 806ddbc:	d009      	beq.n	806ddd2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 806ddbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806ddc2:	2200      	movs	r2, #0
 806ddc4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 806ddc6:	4618      	mov	r0, r3
 806ddc8:	f7fe f941 	bl	806c04e <remove_chain>
 806ddcc:	4603      	mov	r3, r0
 806ddce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 806ddd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806ddd6:	2b00      	cmp	r3, #0
 806ddd8:	d106      	bne.n	806dde8 <f_unlink+0x14a>
 806ddda:	68fb      	ldr	r3, [r7, #12]
 806dddc:	4618      	mov	r0, r3
 806ddde:	f7fd ff15 	bl	806bc0c <sync_fs>
 806dde2:	4603      	mov	r3, r0
 806dde4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 806dde8:	68fb      	ldr	r3, [r7, #12]
 806ddea:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 806ddee:	4611      	mov	r1, r2
 806ddf0:	4618      	mov	r0, r3
 806ddf2:	f7fd fd11 	bl	806b818 <unlock_fs>
 806ddf6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 806ddfa:	4618      	mov	r0, r3
 806ddfc:	3778      	adds	r7, #120	; 0x78
 806ddfe:	46bd      	mov	sp, r7
 806de00:	bd80      	pop	{r7, pc}
	...

0806de04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 806de04:	b480      	push	{r7}
 806de06:	b087      	sub	sp, #28
 806de08:	af00      	add	r7, sp, #0
 806de0a:	60f8      	str	r0, [r7, #12]
 806de0c:	60b9      	str	r1, [r7, #8]
 806de0e:	4613      	mov	r3, r2
 806de10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 806de12:	2301      	movs	r3, #1
 806de14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 806de16:	2300      	movs	r3, #0
 806de18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 806de1a:	4b1f      	ldr	r3, [pc, #124]	; (806de98 <FATFS_LinkDriverEx+0x94>)
 806de1c:	7a5b      	ldrb	r3, [r3, #9]
 806de1e:	b2db      	uxtb	r3, r3
 806de20:	2b00      	cmp	r3, #0
 806de22:	d131      	bne.n	806de88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 806de24:	4b1c      	ldr	r3, [pc, #112]	; (806de98 <FATFS_LinkDriverEx+0x94>)
 806de26:	7a5b      	ldrb	r3, [r3, #9]
 806de28:	b2db      	uxtb	r3, r3
 806de2a:	461a      	mov	r2, r3
 806de2c:	4b1a      	ldr	r3, [pc, #104]	; (806de98 <FATFS_LinkDriverEx+0x94>)
 806de2e:	2100      	movs	r1, #0
 806de30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 806de32:	4b19      	ldr	r3, [pc, #100]	; (806de98 <FATFS_LinkDriverEx+0x94>)
 806de34:	7a5b      	ldrb	r3, [r3, #9]
 806de36:	b2db      	uxtb	r3, r3
 806de38:	4a17      	ldr	r2, [pc, #92]	; (806de98 <FATFS_LinkDriverEx+0x94>)
 806de3a:	009b      	lsls	r3, r3, #2
 806de3c:	4413      	add	r3, r2
 806de3e:	68fa      	ldr	r2, [r7, #12]
 806de40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 806de42:	4b15      	ldr	r3, [pc, #84]	; (806de98 <FATFS_LinkDriverEx+0x94>)
 806de44:	7a5b      	ldrb	r3, [r3, #9]
 806de46:	b2db      	uxtb	r3, r3
 806de48:	461a      	mov	r2, r3
 806de4a:	4b13      	ldr	r3, [pc, #76]	; (806de98 <FATFS_LinkDriverEx+0x94>)
 806de4c:	4413      	add	r3, r2
 806de4e:	79fa      	ldrb	r2, [r7, #7]
 806de50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 806de52:	4b11      	ldr	r3, [pc, #68]	; (806de98 <FATFS_LinkDriverEx+0x94>)
 806de54:	7a5b      	ldrb	r3, [r3, #9]
 806de56:	b2db      	uxtb	r3, r3
 806de58:	1c5a      	adds	r2, r3, #1
 806de5a:	b2d1      	uxtb	r1, r2
 806de5c:	4a0e      	ldr	r2, [pc, #56]	; (806de98 <FATFS_LinkDriverEx+0x94>)
 806de5e:	7251      	strb	r1, [r2, #9]
 806de60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 806de62:	7dbb      	ldrb	r3, [r7, #22]
 806de64:	3330      	adds	r3, #48	; 0x30
 806de66:	b2da      	uxtb	r2, r3
 806de68:	68bb      	ldr	r3, [r7, #8]
 806de6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 806de6c:	68bb      	ldr	r3, [r7, #8]
 806de6e:	3301      	adds	r3, #1
 806de70:	223a      	movs	r2, #58	; 0x3a
 806de72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 806de74:	68bb      	ldr	r3, [r7, #8]
 806de76:	3302      	adds	r3, #2
 806de78:	222f      	movs	r2, #47	; 0x2f
 806de7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 806de7c:	68bb      	ldr	r3, [r7, #8]
 806de7e:	3303      	adds	r3, #3
 806de80:	2200      	movs	r2, #0
 806de82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 806de84:	2300      	movs	r3, #0
 806de86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 806de88:	7dfb      	ldrb	r3, [r7, #23]
}
 806de8a:	4618      	mov	r0, r3
 806de8c:	371c      	adds	r7, #28
 806de8e:	46bd      	mov	sp, r7
 806de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 806de94:	4770      	bx	lr
 806de96:	bf00      	nop
 806de98:	2000044c 	.word	0x2000044c

0806de9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 806de9c:	b580      	push	{r7, lr}
 806de9e:	b082      	sub	sp, #8
 806dea0:	af00      	add	r7, sp, #0
 806dea2:	6078      	str	r0, [r7, #4]
 806dea4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 806dea6:	2200      	movs	r2, #0
 806dea8:	6839      	ldr	r1, [r7, #0]
 806deaa:	6878      	ldr	r0, [r7, #4]
 806deac:	f7ff ffaa 	bl	806de04 <FATFS_LinkDriverEx>
 806deb0:	4603      	mov	r3, r0
}
 806deb2:	4618      	mov	r0, r3
 806deb4:	3708      	adds	r7, #8
 806deb6:	46bd      	mov	sp, r7
 806deb8:	bd80      	pop	{r7, pc}

0806deba <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 806deba:	b580      	push	{r7, lr}
 806debc:	b084      	sub	sp, #16
 806debe:	af00      	add	r7, sp, #0
 806dec0:	4603      	mov	r3, r0
 806dec2:	6039      	str	r1, [r7, #0]
 806dec4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 806dec6:	2200      	movs	r2, #0
 806dec8:	2101      	movs	r1, #1
 806deca:	2001      	movs	r0, #1
 806decc:	f000 fc72 	bl	806e7b4 <osSemaphoreNew>
 806ded0:	4602      	mov	r2, r0
 806ded2:	683b      	ldr	r3, [r7, #0]
 806ded4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 806ded6:	683b      	ldr	r3, [r7, #0]
 806ded8:	681b      	ldr	r3, [r3, #0]
 806deda:	2b00      	cmp	r3, #0
 806dedc:	bf14      	ite	ne
 806dede:	2301      	movne	r3, #1
 806dee0:	2300      	moveq	r3, #0
 806dee2:	b2db      	uxtb	r3, r3
 806dee4:	60fb      	str	r3, [r7, #12]

    return ret;
 806dee6:	68fb      	ldr	r3, [r7, #12]
}
 806dee8:	4618      	mov	r0, r3
 806deea:	3710      	adds	r7, #16
 806deec:	46bd      	mov	sp, r7
 806deee:	bd80      	pop	{r7, pc}

0806def0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 806def0:	b580      	push	{r7, lr}
 806def2:	b082      	sub	sp, #8
 806def4:	af00      	add	r7, sp, #0
 806def6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 806def8:	6878      	ldr	r0, [r7, #4]
 806defa:	f000 fd7b 	bl	806e9f4 <osSemaphoreDelete>
#endif
    return 1;
 806defe:	2301      	movs	r3, #1
}
 806df00:	4618      	mov	r0, r3
 806df02:	3708      	adds	r7, #8
 806df04:	46bd      	mov	sp, r7
 806df06:	bd80      	pop	{r7, pc}

0806df08 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 806df08:	b580      	push	{r7, lr}
 806df0a:	b084      	sub	sp, #16
 806df0c:	af00      	add	r7, sp, #0
 806df0e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 806df10:	2300      	movs	r3, #0
 806df12:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 806df14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 806df18:	6878      	ldr	r0, [r7, #4]
 806df1a:	f000 fcd5 	bl	806e8c8 <osSemaphoreAcquire>
 806df1e:	4603      	mov	r3, r0
 806df20:	2b00      	cmp	r3, #0
 806df22:	d101      	bne.n	806df28 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 806df24:	2301      	movs	r3, #1
 806df26:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 806df28:	68fb      	ldr	r3, [r7, #12]
}
 806df2a:	4618      	mov	r0, r3
 806df2c:	3710      	adds	r7, #16
 806df2e:	46bd      	mov	sp, r7
 806df30:	bd80      	pop	{r7, pc}

0806df32 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 806df32:	b580      	push	{r7, lr}
 806df34:	b082      	sub	sp, #8
 806df36:	af00      	add	r7, sp, #0
 806df38:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 806df3a:	6878      	ldr	r0, [r7, #4]
 806df3c:	f000 fd16 	bl	806e96c <osSemaphoreRelease>
#endif
}
 806df40:	bf00      	nop
 806df42:	3708      	adds	r7, #8
 806df44:	46bd      	mov	sp, r7
 806df46:	bd80      	pop	{r7, pc}

0806df48 <__NVIC_SetPriority>:
{
 806df48:	b480      	push	{r7}
 806df4a:	b083      	sub	sp, #12
 806df4c:	af00      	add	r7, sp, #0
 806df4e:	4603      	mov	r3, r0
 806df50:	6039      	str	r1, [r7, #0]
 806df52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 806df54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806df58:	2b00      	cmp	r3, #0
 806df5a:	db0a      	blt.n	806df72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806df5c:	683b      	ldr	r3, [r7, #0]
 806df5e:	b2da      	uxtb	r2, r3
 806df60:	490c      	ldr	r1, [pc, #48]	; (806df94 <__NVIC_SetPriority+0x4c>)
 806df62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806df66:	0112      	lsls	r2, r2, #4
 806df68:	b2d2      	uxtb	r2, r2
 806df6a:	440b      	add	r3, r1
 806df6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 806df70:	e00a      	b.n	806df88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806df72:	683b      	ldr	r3, [r7, #0]
 806df74:	b2da      	uxtb	r2, r3
 806df76:	4908      	ldr	r1, [pc, #32]	; (806df98 <__NVIC_SetPriority+0x50>)
 806df78:	79fb      	ldrb	r3, [r7, #7]
 806df7a:	f003 030f 	and.w	r3, r3, #15
 806df7e:	3b04      	subs	r3, #4
 806df80:	0112      	lsls	r2, r2, #4
 806df82:	b2d2      	uxtb	r2, r2
 806df84:	440b      	add	r3, r1
 806df86:	761a      	strb	r2, [r3, #24]
}
 806df88:	bf00      	nop
 806df8a:	370c      	adds	r7, #12
 806df8c:	46bd      	mov	sp, r7
 806df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806df92:	4770      	bx	lr
 806df94:	e000e100 	.word	0xe000e100
 806df98:	e000ed00 	.word	0xe000ed00

0806df9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 806df9c:	b580      	push	{r7, lr}
 806df9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 806dfa0:	4b05      	ldr	r3, [pc, #20]	; (806dfb8 <SysTick_Handler+0x1c>)
 806dfa2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 806dfa4:	f002 fe80 	bl	8070ca8 <xTaskGetSchedulerState>
 806dfa8:	4603      	mov	r3, r0
 806dfaa:	2b01      	cmp	r3, #1
 806dfac:	d001      	beq.n	806dfb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 806dfae:	f004 f823 	bl	8071ff8 <xPortSysTickHandler>
  }
}
 806dfb2:	bf00      	nop
 806dfb4:	bd80      	pop	{r7, pc}
 806dfb6:	bf00      	nop
 806dfb8:	e000e010 	.word	0xe000e010

0806dfbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 806dfbc:	b580      	push	{r7, lr}
 806dfbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 806dfc0:	2100      	movs	r1, #0
 806dfc2:	f06f 0004 	mvn.w	r0, #4
 806dfc6:	f7ff ffbf 	bl	806df48 <__NVIC_SetPriority>
#endif
}
 806dfca:	bf00      	nop
 806dfcc:	bd80      	pop	{r7, pc}
	...

0806dfd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 806dfd0:	b480      	push	{r7}
 806dfd2:	b083      	sub	sp, #12
 806dfd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806dfd6:	f3ef 8305 	mrs	r3, IPSR
 806dfda:	603b      	str	r3, [r7, #0]
  return(result);
 806dfdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 806dfde:	2b00      	cmp	r3, #0
 806dfe0:	d003      	beq.n	806dfea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 806dfe2:	f06f 0305 	mvn.w	r3, #5
 806dfe6:	607b      	str	r3, [r7, #4]
 806dfe8:	e00c      	b.n	806e004 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 806dfea:	4b0a      	ldr	r3, [pc, #40]	; (806e014 <osKernelInitialize+0x44>)
 806dfec:	681b      	ldr	r3, [r3, #0]
 806dfee:	2b00      	cmp	r3, #0
 806dff0:	d105      	bne.n	806dffe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 806dff2:	4b08      	ldr	r3, [pc, #32]	; (806e014 <osKernelInitialize+0x44>)
 806dff4:	2201      	movs	r2, #1
 806dff6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 806dff8:	2300      	movs	r3, #0
 806dffa:	607b      	str	r3, [r7, #4]
 806dffc:	e002      	b.n	806e004 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 806dffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e002:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 806e004:	687b      	ldr	r3, [r7, #4]
}
 806e006:	4618      	mov	r0, r3
 806e008:	370c      	adds	r7, #12
 806e00a:	46bd      	mov	sp, r7
 806e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806e010:	4770      	bx	lr
 806e012:	bf00      	nop
 806e014:	20000458 	.word	0x20000458

0806e018 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 806e018:	b580      	push	{r7, lr}
 806e01a:	b082      	sub	sp, #8
 806e01c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e01e:	f3ef 8305 	mrs	r3, IPSR
 806e022:	603b      	str	r3, [r7, #0]
  return(result);
 806e024:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 806e026:	2b00      	cmp	r3, #0
 806e028:	d003      	beq.n	806e032 <osKernelStart+0x1a>
    stat = osErrorISR;
 806e02a:	f06f 0305 	mvn.w	r3, #5
 806e02e:	607b      	str	r3, [r7, #4]
 806e030:	e010      	b.n	806e054 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 806e032:	4b0b      	ldr	r3, [pc, #44]	; (806e060 <osKernelStart+0x48>)
 806e034:	681b      	ldr	r3, [r3, #0]
 806e036:	2b01      	cmp	r3, #1
 806e038:	d109      	bne.n	806e04e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 806e03a:	f7ff ffbf 	bl	806dfbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 806e03e:	4b08      	ldr	r3, [pc, #32]	; (806e060 <osKernelStart+0x48>)
 806e040:	2202      	movs	r2, #2
 806e042:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 806e044:	f002 f9c4 	bl	80703d0 <vTaskStartScheduler>
      stat = osOK;
 806e048:	2300      	movs	r3, #0
 806e04a:	607b      	str	r3, [r7, #4]
 806e04c:	e002      	b.n	806e054 <osKernelStart+0x3c>
    } else {
      stat = osError;
 806e04e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e052:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 806e054:	687b      	ldr	r3, [r7, #4]
}
 806e056:	4618      	mov	r0, r3
 806e058:	3708      	adds	r7, #8
 806e05a:	46bd      	mov	sp, r7
 806e05c:	bd80      	pop	{r7, pc}
 806e05e:	bf00      	nop
 806e060:	20000458 	.word	0x20000458

0806e064 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 806e064:	b580      	push	{r7, lr}
 806e066:	b08e      	sub	sp, #56	; 0x38
 806e068:	af04      	add	r7, sp, #16
 806e06a:	60f8      	str	r0, [r7, #12]
 806e06c:	60b9      	str	r1, [r7, #8]
 806e06e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 806e070:	2300      	movs	r3, #0
 806e072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e074:	f3ef 8305 	mrs	r3, IPSR
 806e078:	617b      	str	r3, [r7, #20]
  return(result);
 806e07a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 806e07c:	2b00      	cmp	r3, #0
 806e07e:	d17e      	bne.n	806e17e <osThreadNew+0x11a>
 806e080:	68fb      	ldr	r3, [r7, #12]
 806e082:	2b00      	cmp	r3, #0
 806e084:	d07b      	beq.n	806e17e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 806e086:	2380      	movs	r3, #128	; 0x80
 806e088:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 806e08a:	2318      	movs	r3, #24
 806e08c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 806e08e:	2300      	movs	r3, #0
 806e090:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 806e092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e096:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 806e098:	687b      	ldr	r3, [r7, #4]
 806e09a:	2b00      	cmp	r3, #0
 806e09c:	d045      	beq.n	806e12a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 806e09e:	687b      	ldr	r3, [r7, #4]
 806e0a0:	681b      	ldr	r3, [r3, #0]
 806e0a2:	2b00      	cmp	r3, #0
 806e0a4:	d002      	beq.n	806e0ac <osThreadNew+0x48>
        name = attr->name;
 806e0a6:	687b      	ldr	r3, [r7, #4]
 806e0a8:	681b      	ldr	r3, [r3, #0]
 806e0aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 806e0ac:	687b      	ldr	r3, [r7, #4]
 806e0ae:	699b      	ldr	r3, [r3, #24]
 806e0b0:	2b00      	cmp	r3, #0
 806e0b2:	d002      	beq.n	806e0ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 806e0b4:	687b      	ldr	r3, [r7, #4]
 806e0b6:	699b      	ldr	r3, [r3, #24]
 806e0b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 806e0ba:	69fb      	ldr	r3, [r7, #28]
 806e0bc:	2b00      	cmp	r3, #0
 806e0be:	d008      	beq.n	806e0d2 <osThreadNew+0x6e>
 806e0c0:	69fb      	ldr	r3, [r7, #28]
 806e0c2:	2b38      	cmp	r3, #56	; 0x38
 806e0c4:	d805      	bhi.n	806e0d2 <osThreadNew+0x6e>
 806e0c6:	687b      	ldr	r3, [r7, #4]
 806e0c8:	685b      	ldr	r3, [r3, #4]
 806e0ca:	f003 0301 	and.w	r3, r3, #1
 806e0ce:	2b00      	cmp	r3, #0
 806e0d0:	d001      	beq.n	806e0d6 <osThreadNew+0x72>
        return (NULL);
 806e0d2:	2300      	movs	r3, #0
 806e0d4:	e054      	b.n	806e180 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 806e0d6:	687b      	ldr	r3, [r7, #4]
 806e0d8:	695b      	ldr	r3, [r3, #20]
 806e0da:	2b00      	cmp	r3, #0
 806e0dc:	d003      	beq.n	806e0e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 806e0de:	687b      	ldr	r3, [r7, #4]
 806e0e0:	695b      	ldr	r3, [r3, #20]
 806e0e2:	089b      	lsrs	r3, r3, #2
 806e0e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 806e0e6:	687b      	ldr	r3, [r7, #4]
 806e0e8:	689b      	ldr	r3, [r3, #8]
 806e0ea:	2b00      	cmp	r3, #0
 806e0ec:	d00e      	beq.n	806e10c <osThreadNew+0xa8>
 806e0ee:	687b      	ldr	r3, [r7, #4]
 806e0f0:	68db      	ldr	r3, [r3, #12]
 806e0f2:	2bbb      	cmp	r3, #187	; 0xbb
 806e0f4:	d90a      	bls.n	806e10c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 806e0f6:	687b      	ldr	r3, [r7, #4]
 806e0f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 806e0fa:	2b00      	cmp	r3, #0
 806e0fc:	d006      	beq.n	806e10c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 806e0fe:	687b      	ldr	r3, [r7, #4]
 806e100:	695b      	ldr	r3, [r3, #20]
 806e102:	2b00      	cmp	r3, #0
 806e104:	d002      	beq.n	806e10c <osThreadNew+0xa8>
        mem = 1;
 806e106:	2301      	movs	r3, #1
 806e108:	61bb      	str	r3, [r7, #24]
 806e10a:	e010      	b.n	806e12e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 806e10c:	687b      	ldr	r3, [r7, #4]
 806e10e:	689b      	ldr	r3, [r3, #8]
 806e110:	2b00      	cmp	r3, #0
 806e112:	d10c      	bne.n	806e12e <osThreadNew+0xca>
 806e114:	687b      	ldr	r3, [r7, #4]
 806e116:	68db      	ldr	r3, [r3, #12]
 806e118:	2b00      	cmp	r3, #0
 806e11a:	d108      	bne.n	806e12e <osThreadNew+0xca>
 806e11c:	687b      	ldr	r3, [r7, #4]
 806e11e:	691b      	ldr	r3, [r3, #16]
 806e120:	2b00      	cmp	r3, #0
 806e122:	d104      	bne.n	806e12e <osThreadNew+0xca>
          mem = 0;
 806e124:	2300      	movs	r3, #0
 806e126:	61bb      	str	r3, [r7, #24]
 806e128:	e001      	b.n	806e12e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 806e12a:	2300      	movs	r3, #0
 806e12c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 806e12e:	69bb      	ldr	r3, [r7, #24]
 806e130:	2b01      	cmp	r3, #1
 806e132:	d110      	bne.n	806e156 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 806e134:	687b      	ldr	r3, [r7, #4]
 806e136:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 806e138:	687a      	ldr	r2, [r7, #4]
 806e13a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 806e13c:	9202      	str	r2, [sp, #8]
 806e13e:	9301      	str	r3, [sp, #4]
 806e140:	69fb      	ldr	r3, [r7, #28]
 806e142:	9300      	str	r3, [sp, #0]
 806e144:	68bb      	ldr	r3, [r7, #8]
 806e146:	6a3a      	ldr	r2, [r7, #32]
 806e148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806e14a:	68f8      	ldr	r0, [r7, #12]
 806e14c:	f001 ff54 	bl	806fff8 <xTaskCreateStatic>
 806e150:	4603      	mov	r3, r0
 806e152:	613b      	str	r3, [r7, #16]
 806e154:	e013      	b.n	806e17e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 806e156:	69bb      	ldr	r3, [r7, #24]
 806e158:	2b00      	cmp	r3, #0
 806e15a:	d110      	bne.n	806e17e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 806e15c:	6a3b      	ldr	r3, [r7, #32]
 806e15e:	b29a      	uxth	r2, r3
 806e160:	f107 0310 	add.w	r3, r7, #16
 806e164:	9301      	str	r3, [sp, #4]
 806e166:	69fb      	ldr	r3, [r7, #28]
 806e168:	9300      	str	r3, [sp, #0]
 806e16a:	68bb      	ldr	r3, [r7, #8]
 806e16c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806e16e:	68f8      	ldr	r0, [r7, #12]
 806e170:	f001 ff9f 	bl	80700b2 <xTaskCreate>
 806e174:	4603      	mov	r3, r0
 806e176:	2b01      	cmp	r3, #1
 806e178:	d001      	beq.n	806e17e <osThreadNew+0x11a>
            hTask = NULL;
 806e17a:	2300      	movs	r3, #0
 806e17c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 806e17e:	693b      	ldr	r3, [r7, #16]
}
 806e180:	4618      	mov	r0, r3
 806e182:	3728      	adds	r7, #40	; 0x28
 806e184:	46bd      	mov	sp, r7
 806e186:	bd80      	pop	{r7, pc}

0806e188 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 806e188:	b580      	push	{r7, lr}
 806e18a:	b088      	sub	sp, #32
 806e18c:	af02      	add	r7, sp, #8
 806e18e:	6078      	str	r0, [r7, #4]
 806e190:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 806e192:	687b      	ldr	r3, [r7, #4]
 806e194:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 806e196:	697b      	ldr	r3, [r7, #20]
 806e198:	2b00      	cmp	r3, #0
 806e19a:	d002      	beq.n	806e1a2 <osThreadFlagsSet+0x1a>
 806e19c:	683b      	ldr	r3, [r7, #0]
 806e19e:	2b00      	cmp	r3, #0
 806e1a0:	da03      	bge.n	806e1aa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 806e1a2:	f06f 0303 	mvn.w	r3, #3
 806e1a6:	60fb      	str	r3, [r7, #12]
 806e1a8:	e035      	b.n	806e216 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 806e1aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e1ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e1b0:	f3ef 8305 	mrs	r3, IPSR
 806e1b4:	613b      	str	r3, [r7, #16]
  return(result);
 806e1b6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 806e1b8:	2b00      	cmp	r3, #0
 806e1ba:	d01f      	beq.n	806e1fc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 806e1bc:	2300      	movs	r3, #0
 806e1be:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 806e1c0:	f107 0308 	add.w	r3, r7, #8
 806e1c4:	9300      	str	r3, [sp, #0]
 806e1c6:	2300      	movs	r3, #0
 806e1c8:	2201      	movs	r2, #1
 806e1ca:	6839      	ldr	r1, [r7, #0]
 806e1cc:	6978      	ldr	r0, [r7, #20]
 806e1ce:	f003 f813 	bl	80711f8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 806e1d2:	f107 030c 	add.w	r3, r7, #12
 806e1d6:	2200      	movs	r2, #0
 806e1d8:	9200      	str	r2, [sp, #0]
 806e1da:	2200      	movs	r2, #0
 806e1dc:	2100      	movs	r1, #0
 806e1de:	6978      	ldr	r0, [r7, #20]
 806e1e0:	f003 f80a 	bl	80711f8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 806e1e4:	68bb      	ldr	r3, [r7, #8]
 806e1e6:	2b00      	cmp	r3, #0
 806e1e8:	d015      	beq.n	806e216 <osThreadFlagsSet+0x8e>
 806e1ea:	4b0d      	ldr	r3, [pc, #52]	; (806e220 <osThreadFlagsSet+0x98>)
 806e1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e1f0:	601a      	str	r2, [r3, #0]
 806e1f2:	f3bf 8f4f 	dsb	sy
 806e1f6:	f3bf 8f6f 	isb	sy
 806e1fa:	e00c      	b.n	806e216 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 806e1fc:	2300      	movs	r3, #0
 806e1fe:	2201      	movs	r2, #1
 806e200:	6839      	ldr	r1, [r7, #0]
 806e202:	6978      	ldr	r0, [r7, #20]
 806e204:	f002 ff3a 	bl	807107c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 806e208:	f107 030c 	add.w	r3, r7, #12
 806e20c:	2200      	movs	r2, #0
 806e20e:	2100      	movs	r1, #0
 806e210:	6978      	ldr	r0, [r7, #20]
 806e212:	f002 ff33 	bl	807107c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 806e216:	68fb      	ldr	r3, [r7, #12]
}
 806e218:	4618      	mov	r0, r3
 806e21a:	3718      	adds	r7, #24
 806e21c:	46bd      	mov	sp, r7
 806e21e:	bd80      	pop	{r7, pc}
 806e220:	e000ed04 	.word	0xe000ed04

0806e224 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 806e224:	b580      	push	{r7, lr}
 806e226:	b086      	sub	sp, #24
 806e228:	af00      	add	r7, sp, #0
 806e22a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e22c:	f3ef 8305 	mrs	r3, IPSR
 806e230:	60fb      	str	r3, [r7, #12]
  return(result);
 806e232:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 806e234:	2b00      	cmp	r3, #0
 806e236:	d003      	beq.n	806e240 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 806e238:	f06f 0305 	mvn.w	r3, #5
 806e23c:	617b      	str	r3, [r7, #20]
 806e23e:	e02a      	b.n	806e296 <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 806e240:	687b      	ldr	r3, [r7, #4]
 806e242:	2b00      	cmp	r3, #0
 806e244:	da03      	bge.n	806e24e <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 806e246:	f06f 0303 	mvn.w	r3, #3
 806e24a:	617b      	str	r3, [r7, #20]
 806e24c:	e023      	b.n	806e296 <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 806e24e:	f002 fd1b 	bl	8070c88 <xTaskGetCurrentTaskHandle>
 806e252:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 806e254:	f107 0308 	add.w	r3, r7, #8
 806e258:	2200      	movs	r2, #0
 806e25a:	2100      	movs	r1, #0
 806e25c:	6938      	ldr	r0, [r7, #16]
 806e25e:	f002 ff0d 	bl	807107c <xTaskGenericNotify>
 806e262:	4603      	mov	r3, r0
 806e264:	2b01      	cmp	r3, #1
 806e266:	d113      	bne.n	806e290 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 806e268:	68bb      	ldr	r3, [r7, #8]
 806e26a:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 806e26c:	687b      	ldr	r3, [r7, #4]
 806e26e:	43da      	mvns	r2, r3
 806e270:	68bb      	ldr	r3, [r7, #8]
 806e272:	4013      	ands	r3, r2
 806e274:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 806e276:	68b9      	ldr	r1, [r7, #8]
 806e278:	2300      	movs	r3, #0
 806e27a:	2203      	movs	r2, #3
 806e27c:	6938      	ldr	r0, [r7, #16]
 806e27e:	f002 fefd 	bl	807107c <xTaskGenericNotify>
 806e282:	4603      	mov	r3, r0
 806e284:	2b01      	cmp	r3, #1
 806e286:	d006      	beq.n	806e296 <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 806e288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e28c:	617b      	str	r3, [r7, #20]
 806e28e:	e002      	b.n	806e296 <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 806e290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e294:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 806e296:	697b      	ldr	r3, [r7, #20]
}
 806e298:	4618      	mov	r0, r3
 806e29a:	3718      	adds	r7, #24
 806e29c:	46bd      	mov	sp, r7
 806e29e:	bd80      	pop	{r7, pc}

0806e2a0 <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 806e2a0:	b580      	push	{r7, lr}
 806e2a2:	b084      	sub	sp, #16
 806e2a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e2a6:	f3ef 8305 	mrs	r3, IPSR
 806e2aa:	60bb      	str	r3, [r7, #8]
  return(result);
 806e2ac:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 806e2ae:	2b00      	cmp	r3, #0
 806e2b0:	d003      	beq.n	806e2ba <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 806e2b2:	f06f 0305 	mvn.w	r3, #5
 806e2b6:	607b      	str	r3, [r7, #4]
 806e2b8:	e00e      	b.n	806e2d8 <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 806e2ba:	f002 fce5 	bl	8070c88 <xTaskGetCurrentTaskHandle>
 806e2be:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 806e2c0:	1d3b      	adds	r3, r7, #4
 806e2c2:	2200      	movs	r2, #0
 806e2c4:	2100      	movs	r1, #0
 806e2c6:	68f8      	ldr	r0, [r7, #12]
 806e2c8:	f002 fed8 	bl	807107c <xTaskGenericNotify>
 806e2cc:	4603      	mov	r3, r0
 806e2ce:	2b01      	cmp	r3, #1
 806e2d0:	d002      	beq.n	806e2d8 <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 806e2d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e2d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 806e2d8:	687b      	ldr	r3, [r7, #4]
}
 806e2da:	4618      	mov	r0, r3
 806e2dc:	3710      	adds	r7, #16
 806e2de:	46bd      	mov	sp, r7
 806e2e0:	bd80      	pop	{r7, pc}

0806e2e2 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 806e2e2:	b580      	push	{r7, lr}
 806e2e4:	b08c      	sub	sp, #48	; 0x30
 806e2e6:	af00      	add	r7, sp, #0
 806e2e8:	60f8      	str	r0, [r7, #12]
 806e2ea:	60b9      	str	r1, [r7, #8]
 806e2ec:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e2ee:	f3ef 8305 	mrs	r3, IPSR
 806e2f2:	617b      	str	r3, [r7, #20]
  return(result);
 806e2f4:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 806e2f6:	2b00      	cmp	r3, #0
 806e2f8:	d003      	beq.n	806e302 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 806e2fa:	f06f 0305 	mvn.w	r3, #5
 806e2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 806e300:	e06b      	b.n	806e3da <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 806e302:	68fb      	ldr	r3, [r7, #12]
 806e304:	2b00      	cmp	r3, #0
 806e306:	da03      	bge.n	806e310 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 806e308:	f06f 0303 	mvn.w	r3, #3
 806e30c:	62fb      	str	r3, [r7, #44]	; 0x2c
 806e30e:	e064      	b.n	806e3da <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 806e310:	68bb      	ldr	r3, [r7, #8]
 806e312:	f003 0302 	and.w	r3, r3, #2
 806e316:	2b00      	cmp	r3, #0
 806e318:	d002      	beq.n	806e320 <osThreadFlagsWait+0x3e>
      clear = 0U;
 806e31a:	2300      	movs	r3, #0
 806e31c:	62bb      	str	r3, [r7, #40]	; 0x28
 806e31e:	e001      	b.n	806e324 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 806e320:	68fb      	ldr	r3, [r7, #12]
 806e322:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 806e324:	2300      	movs	r3, #0
 806e326:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 806e328:	687b      	ldr	r3, [r7, #4]
 806e32a:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 806e32c:	f002 f96c 	bl	8070608 <xTaskGetTickCount>
 806e330:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 806e332:	f107 0210 	add.w	r2, r7, #16
 806e336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806e338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 806e33a:	2000      	movs	r0, #0
 806e33c:	f002 fe3e 	bl	8070fbc <xTaskNotifyWait>
 806e340:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 806e342:	69fb      	ldr	r3, [r7, #28]
 806e344:	2b01      	cmp	r3, #1
 806e346:	d137      	bne.n	806e3b8 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 806e348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806e34a:	68fb      	ldr	r3, [r7, #12]
 806e34c:	4013      	ands	r3, r2
 806e34e:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 806e350:	693b      	ldr	r3, [r7, #16]
 806e352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806e354:	4313      	orrs	r3, r2
 806e356:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 806e358:	68bb      	ldr	r3, [r7, #8]
 806e35a:	f003 0301 	and.w	r3, r3, #1
 806e35e:	2b00      	cmp	r3, #0
 806e360:	d00c      	beq.n	806e37c <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 806e362:	68fa      	ldr	r2, [r7, #12]
 806e364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806e366:	4013      	ands	r3, r2
 806e368:	68fa      	ldr	r2, [r7, #12]
 806e36a:	429a      	cmp	r2, r3
 806e36c:	d032      	beq.n	806e3d4 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 806e36e:	687b      	ldr	r3, [r7, #4]
 806e370:	2b00      	cmp	r3, #0
 806e372:	d10f      	bne.n	806e394 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 806e374:	f06f 0302 	mvn.w	r3, #2
 806e378:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 806e37a:	e02e      	b.n	806e3da <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 806e37c:	68fa      	ldr	r2, [r7, #12]
 806e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806e380:	4013      	ands	r3, r2
 806e382:	2b00      	cmp	r3, #0
 806e384:	d128      	bne.n	806e3d8 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 806e386:	687b      	ldr	r3, [r7, #4]
 806e388:	2b00      	cmp	r3, #0
 806e38a:	d103      	bne.n	806e394 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 806e38c:	f06f 0302 	mvn.w	r3, #2
 806e390:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 806e392:	e022      	b.n	806e3da <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 806e394:	f002 f938 	bl	8070608 <xTaskGetTickCount>
 806e398:	4602      	mov	r2, r0
 806e39a:	6a3b      	ldr	r3, [r7, #32]
 806e39c:	1ad3      	subs	r3, r2, r3
 806e39e:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 806e3a0:	69ba      	ldr	r2, [r7, #24]
 806e3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806e3a4:	429a      	cmp	r2, r3
 806e3a6:	d902      	bls.n	806e3ae <osThreadFlagsWait+0xcc>
          tout  = 0;
 806e3a8:	2300      	movs	r3, #0
 806e3aa:	627b      	str	r3, [r7, #36]	; 0x24
 806e3ac:	e00e      	b.n	806e3cc <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 806e3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806e3b0:	69bb      	ldr	r3, [r7, #24]
 806e3b2:	1ad3      	subs	r3, r2, r3
 806e3b4:	627b      	str	r3, [r7, #36]	; 0x24
 806e3b6:	e009      	b.n	806e3cc <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 806e3b8:	687b      	ldr	r3, [r7, #4]
 806e3ba:	2b00      	cmp	r3, #0
 806e3bc:	d103      	bne.n	806e3c6 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 806e3be:	f06f 0302 	mvn.w	r3, #2
 806e3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 806e3c4:	e002      	b.n	806e3cc <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 806e3c6:	f06f 0301 	mvn.w	r3, #1
 806e3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 806e3cc:	69fb      	ldr	r3, [r7, #28]
 806e3ce:	2b00      	cmp	r3, #0
 806e3d0:	d1af      	bne.n	806e332 <osThreadFlagsWait+0x50>
 806e3d2:	e002      	b.n	806e3da <osThreadFlagsWait+0xf8>
            break;
 806e3d4:	bf00      	nop
 806e3d6:	e000      	b.n	806e3da <osThreadFlagsWait+0xf8>
            break;
 806e3d8:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 806e3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 806e3dc:	4618      	mov	r0, r3
 806e3de:	3730      	adds	r7, #48	; 0x30
 806e3e0:	46bd      	mov	sp, r7
 806e3e2:	bd80      	pop	{r7, pc}

0806e3e4 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 806e3e4:	b580      	push	{r7, lr}
 806e3e6:	b084      	sub	sp, #16
 806e3e8:	af00      	add	r7, sp, #0
 806e3ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e3ec:	f3ef 8305 	mrs	r3, IPSR
 806e3f0:	60bb      	str	r3, [r7, #8]
  return(result);
 806e3f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 806e3f4:	2b00      	cmp	r3, #0
 806e3f6:	d003      	beq.n	806e400 <osDelay+0x1c>
    stat = osErrorISR;
 806e3f8:	f06f 0305 	mvn.w	r3, #5
 806e3fc:	60fb      	str	r3, [r7, #12]
 806e3fe:	e007      	b.n	806e410 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 806e400:	2300      	movs	r3, #0
 806e402:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 806e404:	687b      	ldr	r3, [r7, #4]
 806e406:	2b00      	cmp	r3, #0
 806e408:	d002      	beq.n	806e410 <osDelay+0x2c>
      vTaskDelay(ticks);
 806e40a:	6878      	ldr	r0, [r7, #4]
 806e40c:	f001 ffac 	bl	8070368 <vTaskDelay>
    }
  }

  return (stat);
 806e410:	68fb      	ldr	r3, [r7, #12]
}
 806e412:	4618      	mov	r0, r3
 806e414:	3710      	adds	r7, #16
 806e416:	46bd      	mov	sp, r7
 806e418:	bd80      	pop	{r7, pc}

0806e41a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 806e41a:	b580      	push	{r7, lr}
 806e41c:	b084      	sub	sp, #16
 806e41e:	af00      	add	r7, sp, #0
 806e420:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 806e422:	6878      	ldr	r0, [r7, #4]
 806e424:	f003 fc08 	bl	8071c38 <pvTimerGetTimerID>
 806e428:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 806e42a:	68fb      	ldr	r3, [r7, #12]
 806e42c:	2b00      	cmp	r3, #0
 806e42e:	d005      	beq.n	806e43c <TimerCallback+0x22>
    callb->func (callb->arg);
 806e430:	68fb      	ldr	r3, [r7, #12]
 806e432:	681b      	ldr	r3, [r3, #0]
 806e434:	68fa      	ldr	r2, [r7, #12]
 806e436:	6852      	ldr	r2, [r2, #4]
 806e438:	4610      	mov	r0, r2
 806e43a:	4798      	blx	r3
  }
}
 806e43c:	bf00      	nop
 806e43e:	3710      	adds	r7, #16
 806e440:	46bd      	mov	sp, r7
 806e442:	bd80      	pop	{r7, pc}

0806e444 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 806e444:	b580      	push	{r7, lr}
 806e446:	b08c      	sub	sp, #48	; 0x30
 806e448:	af02      	add	r7, sp, #8
 806e44a:	60f8      	str	r0, [r7, #12]
 806e44c:	607a      	str	r2, [r7, #4]
 806e44e:	603b      	str	r3, [r7, #0]
 806e450:	460b      	mov	r3, r1
 806e452:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 806e454:	2300      	movs	r3, #0
 806e456:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e458:	f3ef 8305 	mrs	r3, IPSR
 806e45c:	613b      	str	r3, [r7, #16]
  return(result);
 806e45e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 806e460:	2b00      	cmp	r3, #0
 806e462:	d163      	bne.n	806e52c <osTimerNew+0xe8>
 806e464:	68fb      	ldr	r3, [r7, #12]
 806e466:	2b00      	cmp	r3, #0
 806e468:	d060      	beq.n	806e52c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 806e46a:	2008      	movs	r0, #8
 806e46c:	f003 fe54 	bl	8072118 <pvPortMalloc>
 806e470:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 806e472:	697b      	ldr	r3, [r7, #20]
 806e474:	2b00      	cmp	r3, #0
 806e476:	d059      	beq.n	806e52c <osTimerNew+0xe8>
      callb->func = func;
 806e478:	697b      	ldr	r3, [r7, #20]
 806e47a:	68fa      	ldr	r2, [r7, #12]
 806e47c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 806e47e:	697b      	ldr	r3, [r7, #20]
 806e480:	687a      	ldr	r2, [r7, #4]
 806e482:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 806e484:	7afb      	ldrb	r3, [r7, #11]
 806e486:	2b00      	cmp	r3, #0
 806e488:	d102      	bne.n	806e490 <osTimerNew+0x4c>
        reload = pdFALSE;
 806e48a:	2300      	movs	r3, #0
 806e48c:	61fb      	str	r3, [r7, #28]
 806e48e:	e001      	b.n	806e494 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 806e490:	2301      	movs	r3, #1
 806e492:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 806e494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e498:	61bb      	str	r3, [r7, #24]
      name = NULL;
 806e49a:	2300      	movs	r3, #0
 806e49c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 806e49e:	683b      	ldr	r3, [r7, #0]
 806e4a0:	2b00      	cmp	r3, #0
 806e4a2:	d01c      	beq.n	806e4de <osTimerNew+0x9a>
        if (attr->name != NULL) {
 806e4a4:	683b      	ldr	r3, [r7, #0]
 806e4a6:	681b      	ldr	r3, [r3, #0]
 806e4a8:	2b00      	cmp	r3, #0
 806e4aa:	d002      	beq.n	806e4b2 <osTimerNew+0x6e>
          name = attr->name;
 806e4ac:	683b      	ldr	r3, [r7, #0]
 806e4ae:	681b      	ldr	r3, [r3, #0]
 806e4b0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 806e4b2:	683b      	ldr	r3, [r7, #0]
 806e4b4:	689b      	ldr	r3, [r3, #8]
 806e4b6:	2b00      	cmp	r3, #0
 806e4b8:	d006      	beq.n	806e4c8 <osTimerNew+0x84>
 806e4ba:	683b      	ldr	r3, [r7, #0]
 806e4bc:	68db      	ldr	r3, [r3, #12]
 806e4be:	2b2b      	cmp	r3, #43	; 0x2b
 806e4c0:	d902      	bls.n	806e4c8 <osTimerNew+0x84>
          mem = 1;
 806e4c2:	2301      	movs	r3, #1
 806e4c4:	61bb      	str	r3, [r7, #24]
 806e4c6:	e00c      	b.n	806e4e2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 806e4c8:	683b      	ldr	r3, [r7, #0]
 806e4ca:	689b      	ldr	r3, [r3, #8]
 806e4cc:	2b00      	cmp	r3, #0
 806e4ce:	d108      	bne.n	806e4e2 <osTimerNew+0x9e>
 806e4d0:	683b      	ldr	r3, [r7, #0]
 806e4d2:	68db      	ldr	r3, [r3, #12]
 806e4d4:	2b00      	cmp	r3, #0
 806e4d6:	d104      	bne.n	806e4e2 <osTimerNew+0x9e>
            mem = 0;
 806e4d8:	2300      	movs	r3, #0
 806e4da:	61bb      	str	r3, [r7, #24]
 806e4dc:	e001      	b.n	806e4e2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 806e4de:	2300      	movs	r3, #0
 806e4e0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 806e4e2:	69bb      	ldr	r3, [r7, #24]
 806e4e4:	2b01      	cmp	r3, #1
 806e4e6:	d10c      	bne.n	806e502 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 806e4e8:	683b      	ldr	r3, [r7, #0]
 806e4ea:	689b      	ldr	r3, [r3, #8]
 806e4ec:	9301      	str	r3, [sp, #4]
 806e4ee:	4b12      	ldr	r3, [pc, #72]	; (806e538 <osTimerNew+0xf4>)
 806e4f0:	9300      	str	r3, [sp, #0]
 806e4f2:	697b      	ldr	r3, [r7, #20]
 806e4f4:	69fa      	ldr	r2, [r7, #28]
 806e4f6:	2101      	movs	r1, #1
 806e4f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806e4fa:	f003 f81e 	bl	807153a <xTimerCreateStatic>
 806e4fe:	6238      	str	r0, [r7, #32]
 806e500:	e00b      	b.n	806e51a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 806e502:	69bb      	ldr	r3, [r7, #24]
 806e504:	2b00      	cmp	r3, #0
 806e506:	d108      	bne.n	806e51a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 806e508:	4b0b      	ldr	r3, [pc, #44]	; (806e538 <osTimerNew+0xf4>)
 806e50a:	9300      	str	r3, [sp, #0]
 806e50c:	697b      	ldr	r3, [r7, #20]
 806e50e:	69fa      	ldr	r2, [r7, #28]
 806e510:	2101      	movs	r1, #1
 806e512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806e514:	f002 fff0 	bl	80714f8 <xTimerCreate>
 806e518:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 806e51a:	6a3b      	ldr	r3, [r7, #32]
 806e51c:	2b00      	cmp	r3, #0
 806e51e:	d105      	bne.n	806e52c <osTimerNew+0xe8>
 806e520:	697b      	ldr	r3, [r7, #20]
 806e522:	2b00      	cmp	r3, #0
 806e524:	d002      	beq.n	806e52c <osTimerNew+0xe8>
        vPortFree (callb);
 806e526:	6978      	ldr	r0, [r7, #20]
 806e528:	f003 fec2 	bl	80722b0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 806e52c:	6a3b      	ldr	r3, [r7, #32]
}
 806e52e:	4618      	mov	r0, r3
 806e530:	3728      	adds	r7, #40	; 0x28
 806e532:	46bd      	mov	sp, r7
 806e534:	bd80      	pop	{r7, pc}
 806e536:	bf00      	nop
 806e538:	0806e41b 	.word	0x0806e41b

0806e53c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 806e53c:	b580      	push	{r7, lr}
 806e53e:	b088      	sub	sp, #32
 806e540:	af02      	add	r7, sp, #8
 806e542:	6078      	str	r0, [r7, #4]
 806e544:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 806e546:	687b      	ldr	r3, [r7, #4]
 806e548:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e54a:	f3ef 8305 	mrs	r3, IPSR
 806e54e:	60fb      	str	r3, [r7, #12]
  return(result);
 806e550:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 806e552:	2b00      	cmp	r3, #0
 806e554:	d003      	beq.n	806e55e <osTimerStart+0x22>
    stat = osErrorISR;
 806e556:	f06f 0305 	mvn.w	r3, #5
 806e55a:	617b      	str	r3, [r7, #20]
 806e55c:	e017      	b.n	806e58e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 806e55e:	693b      	ldr	r3, [r7, #16]
 806e560:	2b00      	cmp	r3, #0
 806e562:	d103      	bne.n	806e56c <osTimerStart+0x30>
    stat = osErrorParameter;
 806e564:	f06f 0303 	mvn.w	r3, #3
 806e568:	617b      	str	r3, [r7, #20]
 806e56a:	e010      	b.n	806e58e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 806e56c:	2300      	movs	r3, #0
 806e56e:	9300      	str	r3, [sp, #0]
 806e570:	2300      	movs	r3, #0
 806e572:	683a      	ldr	r2, [r7, #0]
 806e574:	2104      	movs	r1, #4
 806e576:	6938      	ldr	r0, [r7, #16]
 806e578:	f003 f858 	bl	807162c <xTimerGenericCommand>
 806e57c:	4603      	mov	r3, r0
 806e57e:	2b01      	cmp	r3, #1
 806e580:	d102      	bne.n	806e588 <osTimerStart+0x4c>
      stat = osOK;
 806e582:	2300      	movs	r3, #0
 806e584:	617b      	str	r3, [r7, #20]
 806e586:	e002      	b.n	806e58e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 806e588:	f06f 0302 	mvn.w	r3, #2
 806e58c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 806e58e:	697b      	ldr	r3, [r7, #20]
}
 806e590:	4618      	mov	r0, r3
 806e592:	3718      	adds	r7, #24
 806e594:	46bd      	mov	sp, r7
 806e596:	bd80      	pop	{r7, pc}

0806e598 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 806e598:	b580      	push	{r7, lr}
 806e59a:	b088      	sub	sp, #32
 806e59c:	af00      	add	r7, sp, #0
 806e59e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 806e5a0:	2300      	movs	r3, #0
 806e5a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e5a4:	f3ef 8305 	mrs	r3, IPSR
 806e5a8:	60bb      	str	r3, [r7, #8]
  return(result);
 806e5aa:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 806e5ac:	2b00      	cmp	r3, #0
 806e5ae:	d174      	bne.n	806e69a <osMutexNew+0x102>
    if (attr != NULL) {
 806e5b0:	687b      	ldr	r3, [r7, #4]
 806e5b2:	2b00      	cmp	r3, #0
 806e5b4:	d003      	beq.n	806e5be <osMutexNew+0x26>
      type = attr->attr_bits;
 806e5b6:	687b      	ldr	r3, [r7, #4]
 806e5b8:	685b      	ldr	r3, [r3, #4]
 806e5ba:	61bb      	str	r3, [r7, #24]
 806e5bc:	e001      	b.n	806e5c2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 806e5be:	2300      	movs	r3, #0
 806e5c0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 806e5c2:	69bb      	ldr	r3, [r7, #24]
 806e5c4:	f003 0301 	and.w	r3, r3, #1
 806e5c8:	2b00      	cmp	r3, #0
 806e5ca:	d002      	beq.n	806e5d2 <osMutexNew+0x3a>
      rmtx = 1U;
 806e5cc:	2301      	movs	r3, #1
 806e5ce:	617b      	str	r3, [r7, #20]
 806e5d0:	e001      	b.n	806e5d6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 806e5d2:	2300      	movs	r3, #0
 806e5d4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 806e5d6:	69bb      	ldr	r3, [r7, #24]
 806e5d8:	f003 0308 	and.w	r3, r3, #8
 806e5dc:	2b00      	cmp	r3, #0
 806e5de:	d15c      	bne.n	806e69a <osMutexNew+0x102>
      mem = -1;
 806e5e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e5e4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 806e5e6:	687b      	ldr	r3, [r7, #4]
 806e5e8:	2b00      	cmp	r3, #0
 806e5ea:	d015      	beq.n	806e618 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 806e5ec:	687b      	ldr	r3, [r7, #4]
 806e5ee:	689b      	ldr	r3, [r3, #8]
 806e5f0:	2b00      	cmp	r3, #0
 806e5f2:	d006      	beq.n	806e602 <osMutexNew+0x6a>
 806e5f4:	687b      	ldr	r3, [r7, #4]
 806e5f6:	68db      	ldr	r3, [r3, #12]
 806e5f8:	2b4f      	cmp	r3, #79	; 0x4f
 806e5fa:	d902      	bls.n	806e602 <osMutexNew+0x6a>
          mem = 1;
 806e5fc:	2301      	movs	r3, #1
 806e5fe:	613b      	str	r3, [r7, #16]
 806e600:	e00c      	b.n	806e61c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 806e602:	687b      	ldr	r3, [r7, #4]
 806e604:	689b      	ldr	r3, [r3, #8]
 806e606:	2b00      	cmp	r3, #0
 806e608:	d108      	bne.n	806e61c <osMutexNew+0x84>
 806e60a:	687b      	ldr	r3, [r7, #4]
 806e60c:	68db      	ldr	r3, [r3, #12]
 806e60e:	2b00      	cmp	r3, #0
 806e610:	d104      	bne.n	806e61c <osMutexNew+0x84>
            mem = 0;
 806e612:	2300      	movs	r3, #0
 806e614:	613b      	str	r3, [r7, #16]
 806e616:	e001      	b.n	806e61c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 806e618:	2300      	movs	r3, #0
 806e61a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 806e61c:	693b      	ldr	r3, [r7, #16]
 806e61e:	2b01      	cmp	r3, #1
 806e620:	d112      	bne.n	806e648 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 806e622:	697b      	ldr	r3, [r7, #20]
 806e624:	2b00      	cmp	r3, #0
 806e626:	d007      	beq.n	806e638 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 806e628:	687b      	ldr	r3, [r7, #4]
 806e62a:	689b      	ldr	r3, [r3, #8]
 806e62c:	4619      	mov	r1, r3
 806e62e:	2004      	movs	r0, #4
 806e630:	f000 fd8d 	bl	806f14e <xQueueCreateMutexStatic>
 806e634:	61f8      	str	r0, [r7, #28]
 806e636:	e016      	b.n	806e666 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 806e638:	687b      	ldr	r3, [r7, #4]
 806e63a:	689b      	ldr	r3, [r3, #8]
 806e63c:	4619      	mov	r1, r3
 806e63e:	2001      	movs	r0, #1
 806e640:	f000 fd85 	bl	806f14e <xQueueCreateMutexStatic>
 806e644:	61f8      	str	r0, [r7, #28]
 806e646:	e00e      	b.n	806e666 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 806e648:	693b      	ldr	r3, [r7, #16]
 806e64a:	2b00      	cmp	r3, #0
 806e64c:	d10b      	bne.n	806e666 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 806e64e:	697b      	ldr	r3, [r7, #20]
 806e650:	2b00      	cmp	r3, #0
 806e652:	d004      	beq.n	806e65e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 806e654:	2004      	movs	r0, #4
 806e656:	f000 fd62 	bl	806f11e <xQueueCreateMutex>
 806e65a:	61f8      	str	r0, [r7, #28]
 806e65c:	e003      	b.n	806e666 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 806e65e:	2001      	movs	r0, #1
 806e660:	f000 fd5d 	bl	806f11e <xQueueCreateMutex>
 806e664:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 806e666:	69fb      	ldr	r3, [r7, #28]
 806e668:	2b00      	cmp	r3, #0
 806e66a:	d00c      	beq.n	806e686 <osMutexNew+0xee>
        if (attr != NULL) {
 806e66c:	687b      	ldr	r3, [r7, #4]
 806e66e:	2b00      	cmp	r3, #0
 806e670:	d003      	beq.n	806e67a <osMutexNew+0xe2>
          name = attr->name;
 806e672:	687b      	ldr	r3, [r7, #4]
 806e674:	681b      	ldr	r3, [r3, #0]
 806e676:	60fb      	str	r3, [r7, #12]
 806e678:	e001      	b.n	806e67e <osMutexNew+0xe6>
        } else {
          name = NULL;
 806e67a:	2300      	movs	r3, #0
 806e67c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 806e67e:	68f9      	ldr	r1, [r7, #12]
 806e680:	69f8      	ldr	r0, [r7, #28]
 806e682:	f001 fc31 	bl	806fee8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 806e686:	69fb      	ldr	r3, [r7, #28]
 806e688:	2b00      	cmp	r3, #0
 806e68a:	d006      	beq.n	806e69a <osMutexNew+0x102>
 806e68c:	697b      	ldr	r3, [r7, #20]
 806e68e:	2b00      	cmp	r3, #0
 806e690:	d003      	beq.n	806e69a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 806e692:	69fb      	ldr	r3, [r7, #28]
 806e694:	f043 0301 	orr.w	r3, r3, #1
 806e698:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 806e69a:	69fb      	ldr	r3, [r7, #28]
}
 806e69c:	4618      	mov	r0, r3
 806e69e:	3720      	adds	r7, #32
 806e6a0:	46bd      	mov	sp, r7
 806e6a2:	bd80      	pop	{r7, pc}

0806e6a4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 806e6a4:	b580      	push	{r7, lr}
 806e6a6:	b086      	sub	sp, #24
 806e6a8:	af00      	add	r7, sp, #0
 806e6aa:	6078      	str	r0, [r7, #4]
 806e6ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 806e6ae:	687b      	ldr	r3, [r7, #4]
 806e6b0:	f023 0301 	bic.w	r3, r3, #1
 806e6b4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 806e6b6:	687b      	ldr	r3, [r7, #4]
 806e6b8:	f003 0301 	and.w	r3, r3, #1
 806e6bc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 806e6be:	2300      	movs	r3, #0
 806e6c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e6c2:	f3ef 8305 	mrs	r3, IPSR
 806e6c6:	60bb      	str	r3, [r7, #8]
  return(result);
 806e6c8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 806e6ca:	2b00      	cmp	r3, #0
 806e6cc:	d003      	beq.n	806e6d6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 806e6ce:	f06f 0305 	mvn.w	r3, #5
 806e6d2:	617b      	str	r3, [r7, #20]
 806e6d4:	e02c      	b.n	806e730 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 806e6d6:	693b      	ldr	r3, [r7, #16]
 806e6d8:	2b00      	cmp	r3, #0
 806e6da:	d103      	bne.n	806e6e4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 806e6dc:	f06f 0303 	mvn.w	r3, #3
 806e6e0:	617b      	str	r3, [r7, #20]
 806e6e2:	e025      	b.n	806e730 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 806e6e4:	68fb      	ldr	r3, [r7, #12]
 806e6e6:	2b00      	cmp	r3, #0
 806e6e8:	d011      	beq.n	806e70e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 806e6ea:	6839      	ldr	r1, [r7, #0]
 806e6ec:	6938      	ldr	r0, [r7, #16]
 806e6ee:	f000 fd7d 	bl	806f1ec <xQueueTakeMutexRecursive>
 806e6f2:	4603      	mov	r3, r0
 806e6f4:	2b01      	cmp	r3, #1
 806e6f6:	d01b      	beq.n	806e730 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 806e6f8:	683b      	ldr	r3, [r7, #0]
 806e6fa:	2b00      	cmp	r3, #0
 806e6fc:	d003      	beq.n	806e706 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 806e6fe:	f06f 0301 	mvn.w	r3, #1
 806e702:	617b      	str	r3, [r7, #20]
 806e704:	e014      	b.n	806e730 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 806e706:	f06f 0302 	mvn.w	r3, #2
 806e70a:	617b      	str	r3, [r7, #20]
 806e70c:	e010      	b.n	806e730 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 806e70e:	6839      	ldr	r1, [r7, #0]
 806e710:	6938      	ldr	r0, [r7, #16]
 806e712:	f001 f911 	bl	806f938 <xQueueSemaphoreTake>
 806e716:	4603      	mov	r3, r0
 806e718:	2b01      	cmp	r3, #1
 806e71a:	d009      	beq.n	806e730 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 806e71c:	683b      	ldr	r3, [r7, #0]
 806e71e:	2b00      	cmp	r3, #0
 806e720:	d003      	beq.n	806e72a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 806e722:	f06f 0301 	mvn.w	r3, #1
 806e726:	617b      	str	r3, [r7, #20]
 806e728:	e002      	b.n	806e730 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 806e72a:	f06f 0302 	mvn.w	r3, #2
 806e72e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 806e730:	697b      	ldr	r3, [r7, #20]
}
 806e732:	4618      	mov	r0, r3
 806e734:	3718      	adds	r7, #24
 806e736:	46bd      	mov	sp, r7
 806e738:	bd80      	pop	{r7, pc}

0806e73a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 806e73a:	b580      	push	{r7, lr}
 806e73c:	b086      	sub	sp, #24
 806e73e:	af00      	add	r7, sp, #0
 806e740:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 806e742:	687b      	ldr	r3, [r7, #4]
 806e744:	f023 0301 	bic.w	r3, r3, #1
 806e748:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 806e74a:	687b      	ldr	r3, [r7, #4]
 806e74c:	f003 0301 	and.w	r3, r3, #1
 806e750:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 806e752:	2300      	movs	r3, #0
 806e754:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e756:	f3ef 8305 	mrs	r3, IPSR
 806e75a:	60bb      	str	r3, [r7, #8]
  return(result);
 806e75c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 806e75e:	2b00      	cmp	r3, #0
 806e760:	d003      	beq.n	806e76a <osMutexRelease+0x30>
    stat = osErrorISR;
 806e762:	f06f 0305 	mvn.w	r3, #5
 806e766:	617b      	str	r3, [r7, #20]
 806e768:	e01f      	b.n	806e7aa <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 806e76a:	693b      	ldr	r3, [r7, #16]
 806e76c:	2b00      	cmp	r3, #0
 806e76e:	d103      	bne.n	806e778 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 806e770:	f06f 0303 	mvn.w	r3, #3
 806e774:	617b      	str	r3, [r7, #20]
 806e776:	e018      	b.n	806e7aa <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 806e778:	68fb      	ldr	r3, [r7, #12]
 806e77a:	2b00      	cmp	r3, #0
 806e77c:	d009      	beq.n	806e792 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 806e77e:	6938      	ldr	r0, [r7, #16]
 806e780:	f000 fd00 	bl	806f184 <xQueueGiveMutexRecursive>
 806e784:	4603      	mov	r3, r0
 806e786:	2b01      	cmp	r3, #1
 806e788:	d00f      	beq.n	806e7aa <osMutexRelease+0x70>
        stat = osErrorResource;
 806e78a:	f06f 0302 	mvn.w	r3, #2
 806e78e:	617b      	str	r3, [r7, #20]
 806e790:	e00b      	b.n	806e7aa <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 806e792:	2300      	movs	r3, #0
 806e794:	2200      	movs	r2, #0
 806e796:	2100      	movs	r1, #0
 806e798:	6938      	ldr	r0, [r7, #16]
 806e79a:	f000 fdc7 	bl	806f32c <xQueueGenericSend>
 806e79e:	4603      	mov	r3, r0
 806e7a0:	2b01      	cmp	r3, #1
 806e7a2:	d002      	beq.n	806e7aa <osMutexRelease+0x70>
        stat = osErrorResource;
 806e7a4:	f06f 0302 	mvn.w	r3, #2
 806e7a8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 806e7aa:	697b      	ldr	r3, [r7, #20]
}
 806e7ac:	4618      	mov	r0, r3
 806e7ae:	3718      	adds	r7, #24
 806e7b0:	46bd      	mov	sp, r7
 806e7b2:	bd80      	pop	{r7, pc}

0806e7b4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 806e7b4:	b580      	push	{r7, lr}
 806e7b6:	b08a      	sub	sp, #40	; 0x28
 806e7b8:	af02      	add	r7, sp, #8
 806e7ba:	60f8      	str	r0, [r7, #12]
 806e7bc:	60b9      	str	r1, [r7, #8]
 806e7be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 806e7c0:	2300      	movs	r3, #0
 806e7c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e7c4:	f3ef 8305 	mrs	r3, IPSR
 806e7c8:	613b      	str	r3, [r7, #16]
  return(result);
 806e7ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 806e7cc:	2b00      	cmp	r3, #0
 806e7ce:	d175      	bne.n	806e8bc <osSemaphoreNew+0x108>
 806e7d0:	68fb      	ldr	r3, [r7, #12]
 806e7d2:	2b00      	cmp	r3, #0
 806e7d4:	d072      	beq.n	806e8bc <osSemaphoreNew+0x108>
 806e7d6:	68ba      	ldr	r2, [r7, #8]
 806e7d8:	68fb      	ldr	r3, [r7, #12]
 806e7da:	429a      	cmp	r2, r3
 806e7dc:	d86e      	bhi.n	806e8bc <osSemaphoreNew+0x108>
    mem = -1;
 806e7de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e7e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 806e7e4:	687b      	ldr	r3, [r7, #4]
 806e7e6:	2b00      	cmp	r3, #0
 806e7e8:	d015      	beq.n	806e816 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 806e7ea:	687b      	ldr	r3, [r7, #4]
 806e7ec:	689b      	ldr	r3, [r3, #8]
 806e7ee:	2b00      	cmp	r3, #0
 806e7f0:	d006      	beq.n	806e800 <osSemaphoreNew+0x4c>
 806e7f2:	687b      	ldr	r3, [r7, #4]
 806e7f4:	68db      	ldr	r3, [r3, #12]
 806e7f6:	2b4f      	cmp	r3, #79	; 0x4f
 806e7f8:	d902      	bls.n	806e800 <osSemaphoreNew+0x4c>
        mem = 1;
 806e7fa:	2301      	movs	r3, #1
 806e7fc:	61bb      	str	r3, [r7, #24]
 806e7fe:	e00c      	b.n	806e81a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 806e800:	687b      	ldr	r3, [r7, #4]
 806e802:	689b      	ldr	r3, [r3, #8]
 806e804:	2b00      	cmp	r3, #0
 806e806:	d108      	bne.n	806e81a <osSemaphoreNew+0x66>
 806e808:	687b      	ldr	r3, [r7, #4]
 806e80a:	68db      	ldr	r3, [r3, #12]
 806e80c:	2b00      	cmp	r3, #0
 806e80e:	d104      	bne.n	806e81a <osSemaphoreNew+0x66>
          mem = 0;
 806e810:	2300      	movs	r3, #0
 806e812:	61bb      	str	r3, [r7, #24]
 806e814:	e001      	b.n	806e81a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 806e816:	2300      	movs	r3, #0
 806e818:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 806e81a:	69bb      	ldr	r3, [r7, #24]
 806e81c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806e820:	d04c      	beq.n	806e8bc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 806e822:	68fb      	ldr	r3, [r7, #12]
 806e824:	2b01      	cmp	r3, #1
 806e826:	d128      	bne.n	806e87a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 806e828:	69bb      	ldr	r3, [r7, #24]
 806e82a:	2b01      	cmp	r3, #1
 806e82c:	d10a      	bne.n	806e844 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 806e82e:	687b      	ldr	r3, [r7, #4]
 806e830:	689b      	ldr	r3, [r3, #8]
 806e832:	2203      	movs	r2, #3
 806e834:	9200      	str	r2, [sp, #0]
 806e836:	2200      	movs	r2, #0
 806e838:	2100      	movs	r1, #0
 806e83a:	2001      	movs	r0, #1
 806e83c:	f000 fb80 	bl	806ef40 <xQueueGenericCreateStatic>
 806e840:	61f8      	str	r0, [r7, #28]
 806e842:	e005      	b.n	806e850 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 806e844:	2203      	movs	r2, #3
 806e846:	2100      	movs	r1, #0
 806e848:	2001      	movs	r0, #1
 806e84a:	f000 fbf1 	bl	806f030 <xQueueGenericCreate>
 806e84e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 806e850:	69fb      	ldr	r3, [r7, #28]
 806e852:	2b00      	cmp	r3, #0
 806e854:	d022      	beq.n	806e89c <osSemaphoreNew+0xe8>
 806e856:	68bb      	ldr	r3, [r7, #8]
 806e858:	2b00      	cmp	r3, #0
 806e85a:	d01f      	beq.n	806e89c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 806e85c:	2300      	movs	r3, #0
 806e85e:	2200      	movs	r2, #0
 806e860:	2100      	movs	r1, #0
 806e862:	69f8      	ldr	r0, [r7, #28]
 806e864:	f000 fd62 	bl	806f32c <xQueueGenericSend>
 806e868:	4603      	mov	r3, r0
 806e86a:	2b01      	cmp	r3, #1
 806e86c:	d016      	beq.n	806e89c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 806e86e:	69f8      	ldr	r0, [r7, #28]
 806e870:	f001 f9ee 	bl	806fc50 <vQueueDelete>
            hSemaphore = NULL;
 806e874:	2300      	movs	r3, #0
 806e876:	61fb      	str	r3, [r7, #28]
 806e878:	e010      	b.n	806e89c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 806e87a:	69bb      	ldr	r3, [r7, #24]
 806e87c:	2b01      	cmp	r3, #1
 806e87e:	d108      	bne.n	806e892 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 806e880:	687b      	ldr	r3, [r7, #4]
 806e882:	689b      	ldr	r3, [r3, #8]
 806e884:	461a      	mov	r2, r3
 806e886:	68b9      	ldr	r1, [r7, #8]
 806e888:	68f8      	ldr	r0, [r7, #12]
 806e88a:	f000 fce5 	bl	806f258 <xQueueCreateCountingSemaphoreStatic>
 806e88e:	61f8      	str	r0, [r7, #28]
 806e890:	e004      	b.n	806e89c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 806e892:	68b9      	ldr	r1, [r7, #8]
 806e894:	68f8      	ldr	r0, [r7, #12]
 806e896:	f000 fd16 	bl	806f2c6 <xQueueCreateCountingSemaphore>
 806e89a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 806e89c:	69fb      	ldr	r3, [r7, #28]
 806e89e:	2b00      	cmp	r3, #0
 806e8a0:	d00c      	beq.n	806e8bc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 806e8a2:	687b      	ldr	r3, [r7, #4]
 806e8a4:	2b00      	cmp	r3, #0
 806e8a6:	d003      	beq.n	806e8b0 <osSemaphoreNew+0xfc>
          name = attr->name;
 806e8a8:	687b      	ldr	r3, [r7, #4]
 806e8aa:	681b      	ldr	r3, [r3, #0]
 806e8ac:	617b      	str	r3, [r7, #20]
 806e8ae:	e001      	b.n	806e8b4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 806e8b0:	2300      	movs	r3, #0
 806e8b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 806e8b4:	6979      	ldr	r1, [r7, #20]
 806e8b6:	69f8      	ldr	r0, [r7, #28]
 806e8b8:	f001 fb16 	bl	806fee8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 806e8bc:	69fb      	ldr	r3, [r7, #28]
}
 806e8be:	4618      	mov	r0, r3
 806e8c0:	3720      	adds	r7, #32
 806e8c2:	46bd      	mov	sp, r7
 806e8c4:	bd80      	pop	{r7, pc}
	...

0806e8c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 806e8c8:	b580      	push	{r7, lr}
 806e8ca:	b086      	sub	sp, #24
 806e8cc:	af00      	add	r7, sp, #0
 806e8ce:	6078      	str	r0, [r7, #4]
 806e8d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 806e8d2:	687b      	ldr	r3, [r7, #4]
 806e8d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 806e8d6:	2300      	movs	r3, #0
 806e8d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 806e8da:	693b      	ldr	r3, [r7, #16]
 806e8dc:	2b00      	cmp	r3, #0
 806e8de:	d103      	bne.n	806e8e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 806e8e0:	f06f 0303 	mvn.w	r3, #3
 806e8e4:	617b      	str	r3, [r7, #20]
 806e8e6:	e039      	b.n	806e95c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e8e8:	f3ef 8305 	mrs	r3, IPSR
 806e8ec:	60fb      	str	r3, [r7, #12]
  return(result);
 806e8ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 806e8f0:	2b00      	cmp	r3, #0
 806e8f2:	d022      	beq.n	806e93a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 806e8f4:	683b      	ldr	r3, [r7, #0]
 806e8f6:	2b00      	cmp	r3, #0
 806e8f8:	d003      	beq.n	806e902 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 806e8fa:	f06f 0303 	mvn.w	r3, #3
 806e8fe:	617b      	str	r3, [r7, #20]
 806e900:	e02c      	b.n	806e95c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 806e902:	2300      	movs	r3, #0
 806e904:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 806e906:	f107 0308 	add.w	r3, r7, #8
 806e90a:	461a      	mov	r2, r3
 806e90c:	2100      	movs	r1, #0
 806e90e:	6938      	ldr	r0, [r7, #16]
 806e910:	f001 f91e 	bl	806fb50 <xQueueReceiveFromISR>
 806e914:	4603      	mov	r3, r0
 806e916:	2b01      	cmp	r3, #1
 806e918:	d003      	beq.n	806e922 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 806e91a:	f06f 0302 	mvn.w	r3, #2
 806e91e:	617b      	str	r3, [r7, #20]
 806e920:	e01c      	b.n	806e95c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 806e922:	68bb      	ldr	r3, [r7, #8]
 806e924:	2b00      	cmp	r3, #0
 806e926:	d019      	beq.n	806e95c <osSemaphoreAcquire+0x94>
 806e928:	4b0f      	ldr	r3, [pc, #60]	; (806e968 <osSemaphoreAcquire+0xa0>)
 806e92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e92e:	601a      	str	r2, [r3, #0]
 806e930:	f3bf 8f4f 	dsb	sy
 806e934:	f3bf 8f6f 	isb	sy
 806e938:	e010      	b.n	806e95c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 806e93a:	6839      	ldr	r1, [r7, #0]
 806e93c:	6938      	ldr	r0, [r7, #16]
 806e93e:	f000 fffb 	bl	806f938 <xQueueSemaphoreTake>
 806e942:	4603      	mov	r3, r0
 806e944:	2b01      	cmp	r3, #1
 806e946:	d009      	beq.n	806e95c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 806e948:	683b      	ldr	r3, [r7, #0]
 806e94a:	2b00      	cmp	r3, #0
 806e94c:	d003      	beq.n	806e956 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 806e94e:	f06f 0301 	mvn.w	r3, #1
 806e952:	617b      	str	r3, [r7, #20]
 806e954:	e002      	b.n	806e95c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 806e956:	f06f 0302 	mvn.w	r3, #2
 806e95a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 806e95c:	697b      	ldr	r3, [r7, #20]
}
 806e95e:	4618      	mov	r0, r3
 806e960:	3718      	adds	r7, #24
 806e962:	46bd      	mov	sp, r7
 806e964:	bd80      	pop	{r7, pc}
 806e966:	bf00      	nop
 806e968:	e000ed04 	.word	0xe000ed04

0806e96c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 806e96c:	b580      	push	{r7, lr}
 806e96e:	b086      	sub	sp, #24
 806e970:	af00      	add	r7, sp, #0
 806e972:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 806e974:	687b      	ldr	r3, [r7, #4]
 806e976:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 806e978:	2300      	movs	r3, #0
 806e97a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 806e97c:	693b      	ldr	r3, [r7, #16]
 806e97e:	2b00      	cmp	r3, #0
 806e980:	d103      	bne.n	806e98a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 806e982:	f06f 0303 	mvn.w	r3, #3
 806e986:	617b      	str	r3, [r7, #20]
 806e988:	e02c      	b.n	806e9e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e98a:	f3ef 8305 	mrs	r3, IPSR
 806e98e:	60fb      	str	r3, [r7, #12]
  return(result);
 806e990:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 806e992:	2b00      	cmp	r3, #0
 806e994:	d01a      	beq.n	806e9cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 806e996:	2300      	movs	r3, #0
 806e998:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 806e99a:	f107 0308 	add.w	r3, r7, #8
 806e99e:	4619      	mov	r1, r3
 806e9a0:	6938      	ldr	r0, [r7, #16]
 806e9a2:	f000 fe5c 	bl	806f65e <xQueueGiveFromISR>
 806e9a6:	4603      	mov	r3, r0
 806e9a8:	2b01      	cmp	r3, #1
 806e9aa:	d003      	beq.n	806e9b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 806e9ac:	f06f 0302 	mvn.w	r3, #2
 806e9b0:	617b      	str	r3, [r7, #20]
 806e9b2:	e017      	b.n	806e9e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 806e9b4:	68bb      	ldr	r3, [r7, #8]
 806e9b6:	2b00      	cmp	r3, #0
 806e9b8:	d014      	beq.n	806e9e4 <osSemaphoreRelease+0x78>
 806e9ba:	4b0d      	ldr	r3, [pc, #52]	; (806e9f0 <osSemaphoreRelease+0x84>)
 806e9bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e9c0:	601a      	str	r2, [r3, #0]
 806e9c2:	f3bf 8f4f 	dsb	sy
 806e9c6:	f3bf 8f6f 	isb	sy
 806e9ca:	e00b      	b.n	806e9e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 806e9cc:	2300      	movs	r3, #0
 806e9ce:	2200      	movs	r2, #0
 806e9d0:	2100      	movs	r1, #0
 806e9d2:	6938      	ldr	r0, [r7, #16]
 806e9d4:	f000 fcaa 	bl	806f32c <xQueueGenericSend>
 806e9d8:	4603      	mov	r3, r0
 806e9da:	2b01      	cmp	r3, #1
 806e9dc:	d002      	beq.n	806e9e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 806e9de:	f06f 0302 	mvn.w	r3, #2
 806e9e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 806e9e4:	697b      	ldr	r3, [r7, #20]
}
 806e9e6:	4618      	mov	r0, r3
 806e9e8:	3718      	adds	r7, #24
 806e9ea:	46bd      	mov	sp, r7
 806e9ec:	bd80      	pop	{r7, pc}
 806e9ee:	bf00      	nop
 806e9f0:	e000ed04 	.word	0xe000ed04

0806e9f4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 806e9f4:	b580      	push	{r7, lr}
 806e9f6:	b086      	sub	sp, #24
 806e9f8:	af00      	add	r7, sp, #0
 806e9fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 806e9fc:	687b      	ldr	r3, [r7, #4]
 806e9fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806ea00:	f3ef 8305 	mrs	r3, IPSR
 806ea04:	60fb      	str	r3, [r7, #12]
  return(result);
 806ea06:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 806ea08:	2b00      	cmp	r3, #0
 806ea0a:	d003      	beq.n	806ea14 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 806ea0c:	f06f 0305 	mvn.w	r3, #5
 806ea10:	617b      	str	r3, [r7, #20]
 806ea12:	e00e      	b.n	806ea32 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 806ea14:	693b      	ldr	r3, [r7, #16]
 806ea16:	2b00      	cmp	r3, #0
 806ea18:	d103      	bne.n	806ea22 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 806ea1a:	f06f 0303 	mvn.w	r3, #3
 806ea1e:	617b      	str	r3, [r7, #20]
 806ea20:	e007      	b.n	806ea32 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 806ea22:	6938      	ldr	r0, [r7, #16]
 806ea24:	f001 fa8a 	bl	806ff3c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 806ea28:	2300      	movs	r3, #0
 806ea2a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 806ea2c:	6938      	ldr	r0, [r7, #16]
 806ea2e:	f001 f90f 	bl	806fc50 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 806ea32:	697b      	ldr	r3, [r7, #20]
}
 806ea34:	4618      	mov	r0, r3
 806ea36:	3718      	adds	r7, #24
 806ea38:	46bd      	mov	sp, r7
 806ea3a:	bd80      	pop	{r7, pc}

0806ea3c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 806ea3c:	b580      	push	{r7, lr}
 806ea3e:	b08a      	sub	sp, #40	; 0x28
 806ea40:	af02      	add	r7, sp, #8
 806ea42:	60f8      	str	r0, [r7, #12]
 806ea44:	60b9      	str	r1, [r7, #8]
 806ea46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 806ea48:	2300      	movs	r3, #0
 806ea4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806ea4c:	f3ef 8305 	mrs	r3, IPSR
 806ea50:	613b      	str	r3, [r7, #16]
  return(result);
 806ea52:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 806ea54:	2b00      	cmp	r3, #0
 806ea56:	d15f      	bne.n	806eb18 <osMessageQueueNew+0xdc>
 806ea58:	68fb      	ldr	r3, [r7, #12]
 806ea5a:	2b00      	cmp	r3, #0
 806ea5c:	d05c      	beq.n	806eb18 <osMessageQueueNew+0xdc>
 806ea5e:	68bb      	ldr	r3, [r7, #8]
 806ea60:	2b00      	cmp	r3, #0
 806ea62:	d059      	beq.n	806eb18 <osMessageQueueNew+0xdc>
    mem = -1;
 806ea64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806ea68:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 806ea6a:	687b      	ldr	r3, [r7, #4]
 806ea6c:	2b00      	cmp	r3, #0
 806ea6e:	d029      	beq.n	806eac4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 806ea70:	687b      	ldr	r3, [r7, #4]
 806ea72:	689b      	ldr	r3, [r3, #8]
 806ea74:	2b00      	cmp	r3, #0
 806ea76:	d012      	beq.n	806ea9e <osMessageQueueNew+0x62>
 806ea78:	687b      	ldr	r3, [r7, #4]
 806ea7a:	68db      	ldr	r3, [r3, #12]
 806ea7c:	2b4f      	cmp	r3, #79	; 0x4f
 806ea7e:	d90e      	bls.n	806ea9e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 806ea80:	687b      	ldr	r3, [r7, #4]
 806ea82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 806ea84:	2b00      	cmp	r3, #0
 806ea86:	d00a      	beq.n	806ea9e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 806ea88:	687b      	ldr	r3, [r7, #4]
 806ea8a:	695a      	ldr	r2, [r3, #20]
 806ea8c:	68fb      	ldr	r3, [r7, #12]
 806ea8e:	68b9      	ldr	r1, [r7, #8]
 806ea90:	fb01 f303 	mul.w	r3, r1, r3
 806ea94:	429a      	cmp	r2, r3
 806ea96:	d302      	bcc.n	806ea9e <osMessageQueueNew+0x62>
        mem = 1;
 806ea98:	2301      	movs	r3, #1
 806ea9a:	61bb      	str	r3, [r7, #24]
 806ea9c:	e014      	b.n	806eac8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 806ea9e:	687b      	ldr	r3, [r7, #4]
 806eaa0:	689b      	ldr	r3, [r3, #8]
 806eaa2:	2b00      	cmp	r3, #0
 806eaa4:	d110      	bne.n	806eac8 <osMessageQueueNew+0x8c>
 806eaa6:	687b      	ldr	r3, [r7, #4]
 806eaa8:	68db      	ldr	r3, [r3, #12]
 806eaaa:	2b00      	cmp	r3, #0
 806eaac:	d10c      	bne.n	806eac8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 806eaae:	687b      	ldr	r3, [r7, #4]
 806eab0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 806eab2:	2b00      	cmp	r3, #0
 806eab4:	d108      	bne.n	806eac8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 806eab6:	687b      	ldr	r3, [r7, #4]
 806eab8:	695b      	ldr	r3, [r3, #20]
 806eaba:	2b00      	cmp	r3, #0
 806eabc:	d104      	bne.n	806eac8 <osMessageQueueNew+0x8c>
          mem = 0;
 806eabe:	2300      	movs	r3, #0
 806eac0:	61bb      	str	r3, [r7, #24]
 806eac2:	e001      	b.n	806eac8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 806eac4:	2300      	movs	r3, #0
 806eac6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 806eac8:	69bb      	ldr	r3, [r7, #24]
 806eaca:	2b01      	cmp	r3, #1
 806eacc:	d10b      	bne.n	806eae6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 806eace:	687b      	ldr	r3, [r7, #4]
 806ead0:	691a      	ldr	r2, [r3, #16]
 806ead2:	687b      	ldr	r3, [r7, #4]
 806ead4:	689b      	ldr	r3, [r3, #8]
 806ead6:	2100      	movs	r1, #0
 806ead8:	9100      	str	r1, [sp, #0]
 806eada:	68b9      	ldr	r1, [r7, #8]
 806eadc:	68f8      	ldr	r0, [r7, #12]
 806eade:	f000 fa2f 	bl	806ef40 <xQueueGenericCreateStatic>
 806eae2:	61f8      	str	r0, [r7, #28]
 806eae4:	e008      	b.n	806eaf8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 806eae6:	69bb      	ldr	r3, [r7, #24]
 806eae8:	2b00      	cmp	r3, #0
 806eaea:	d105      	bne.n	806eaf8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 806eaec:	2200      	movs	r2, #0
 806eaee:	68b9      	ldr	r1, [r7, #8]
 806eaf0:	68f8      	ldr	r0, [r7, #12]
 806eaf2:	f000 fa9d 	bl	806f030 <xQueueGenericCreate>
 806eaf6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 806eaf8:	69fb      	ldr	r3, [r7, #28]
 806eafa:	2b00      	cmp	r3, #0
 806eafc:	d00c      	beq.n	806eb18 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 806eafe:	687b      	ldr	r3, [r7, #4]
 806eb00:	2b00      	cmp	r3, #0
 806eb02:	d003      	beq.n	806eb0c <osMessageQueueNew+0xd0>
        name = attr->name;
 806eb04:	687b      	ldr	r3, [r7, #4]
 806eb06:	681b      	ldr	r3, [r3, #0]
 806eb08:	617b      	str	r3, [r7, #20]
 806eb0a:	e001      	b.n	806eb10 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 806eb0c:	2300      	movs	r3, #0
 806eb0e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 806eb10:	6979      	ldr	r1, [r7, #20]
 806eb12:	69f8      	ldr	r0, [r7, #28]
 806eb14:	f001 f9e8 	bl	806fee8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 806eb18:	69fb      	ldr	r3, [r7, #28]
}
 806eb1a:	4618      	mov	r0, r3
 806eb1c:	3720      	adds	r7, #32
 806eb1e:	46bd      	mov	sp, r7
 806eb20:	bd80      	pop	{r7, pc}
	...

0806eb24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 806eb24:	b580      	push	{r7, lr}
 806eb26:	b088      	sub	sp, #32
 806eb28:	af00      	add	r7, sp, #0
 806eb2a:	60f8      	str	r0, [r7, #12]
 806eb2c:	60b9      	str	r1, [r7, #8]
 806eb2e:	603b      	str	r3, [r7, #0]
 806eb30:	4613      	mov	r3, r2
 806eb32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 806eb34:	68fb      	ldr	r3, [r7, #12]
 806eb36:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 806eb38:	2300      	movs	r3, #0
 806eb3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806eb3c:	f3ef 8305 	mrs	r3, IPSR
 806eb40:	617b      	str	r3, [r7, #20]
  return(result);
 806eb42:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 806eb44:	2b00      	cmp	r3, #0
 806eb46:	d028      	beq.n	806eb9a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 806eb48:	69bb      	ldr	r3, [r7, #24]
 806eb4a:	2b00      	cmp	r3, #0
 806eb4c:	d005      	beq.n	806eb5a <osMessageQueuePut+0x36>
 806eb4e:	68bb      	ldr	r3, [r7, #8]
 806eb50:	2b00      	cmp	r3, #0
 806eb52:	d002      	beq.n	806eb5a <osMessageQueuePut+0x36>
 806eb54:	683b      	ldr	r3, [r7, #0]
 806eb56:	2b00      	cmp	r3, #0
 806eb58:	d003      	beq.n	806eb62 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 806eb5a:	f06f 0303 	mvn.w	r3, #3
 806eb5e:	61fb      	str	r3, [r7, #28]
 806eb60:	e038      	b.n	806ebd4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 806eb62:	2300      	movs	r3, #0
 806eb64:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 806eb66:	f107 0210 	add.w	r2, r7, #16
 806eb6a:	2300      	movs	r3, #0
 806eb6c:	68b9      	ldr	r1, [r7, #8]
 806eb6e:	69b8      	ldr	r0, [r7, #24]
 806eb70:	f000 fcda 	bl	806f528 <xQueueGenericSendFromISR>
 806eb74:	4603      	mov	r3, r0
 806eb76:	2b01      	cmp	r3, #1
 806eb78:	d003      	beq.n	806eb82 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 806eb7a:	f06f 0302 	mvn.w	r3, #2
 806eb7e:	61fb      	str	r3, [r7, #28]
 806eb80:	e028      	b.n	806ebd4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 806eb82:	693b      	ldr	r3, [r7, #16]
 806eb84:	2b00      	cmp	r3, #0
 806eb86:	d025      	beq.n	806ebd4 <osMessageQueuePut+0xb0>
 806eb88:	4b15      	ldr	r3, [pc, #84]	; (806ebe0 <osMessageQueuePut+0xbc>)
 806eb8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806eb8e:	601a      	str	r2, [r3, #0]
 806eb90:	f3bf 8f4f 	dsb	sy
 806eb94:	f3bf 8f6f 	isb	sy
 806eb98:	e01c      	b.n	806ebd4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 806eb9a:	69bb      	ldr	r3, [r7, #24]
 806eb9c:	2b00      	cmp	r3, #0
 806eb9e:	d002      	beq.n	806eba6 <osMessageQueuePut+0x82>
 806eba0:	68bb      	ldr	r3, [r7, #8]
 806eba2:	2b00      	cmp	r3, #0
 806eba4:	d103      	bne.n	806ebae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 806eba6:	f06f 0303 	mvn.w	r3, #3
 806ebaa:	61fb      	str	r3, [r7, #28]
 806ebac:	e012      	b.n	806ebd4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 806ebae:	2300      	movs	r3, #0
 806ebb0:	683a      	ldr	r2, [r7, #0]
 806ebb2:	68b9      	ldr	r1, [r7, #8]
 806ebb4:	69b8      	ldr	r0, [r7, #24]
 806ebb6:	f000 fbb9 	bl	806f32c <xQueueGenericSend>
 806ebba:	4603      	mov	r3, r0
 806ebbc:	2b01      	cmp	r3, #1
 806ebbe:	d009      	beq.n	806ebd4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 806ebc0:	683b      	ldr	r3, [r7, #0]
 806ebc2:	2b00      	cmp	r3, #0
 806ebc4:	d003      	beq.n	806ebce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 806ebc6:	f06f 0301 	mvn.w	r3, #1
 806ebca:	61fb      	str	r3, [r7, #28]
 806ebcc:	e002      	b.n	806ebd4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 806ebce:	f06f 0302 	mvn.w	r3, #2
 806ebd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 806ebd4:	69fb      	ldr	r3, [r7, #28]
}
 806ebd6:	4618      	mov	r0, r3
 806ebd8:	3720      	adds	r7, #32
 806ebda:	46bd      	mov	sp, r7
 806ebdc:	bd80      	pop	{r7, pc}
 806ebde:	bf00      	nop
 806ebe0:	e000ed04 	.word	0xe000ed04

0806ebe4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 806ebe4:	b580      	push	{r7, lr}
 806ebe6:	b088      	sub	sp, #32
 806ebe8:	af00      	add	r7, sp, #0
 806ebea:	60f8      	str	r0, [r7, #12]
 806ebec:	60b9      	str	r1, [r7, #8]
 806ebee:	607a      	str	r2, [r7, #4]
 806ebf0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 806ebf2:	68fb      	ldr	r3, [r7, #12]
 806ebf4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 806ebf6:	2300      	movs	r3, #0
 806ebf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806ebfa:	f3ef 8305 	mrs	r3, IPSR
 806ebfe:	617b      	str	r3, [r7, #20]
  return(result);
 806ec00:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 806ec02:	2b00      	cmp	r3, #0
 806ec04:	d028      	beq.n	806ec58 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 806ec06:	69bb      	ldr	r3, [r7, #24]
 806ec08:	2b00      	cmp	r3, #0
 806ec0a:	d005      	beq.n	806ec18 <osMessageQueueGet+0x34>
 806ec0c:	68bb      	ldr	r3, [r7, #8]
 806ec0e:	2b00      	cmp	r3, #0
 806ec10:	d002      	beq.n	806ec18 <osMessageQueueGet+0x34>
 806ec12:	683b      	ldr	r3, [r7, #0]
 806ec14:	2b00      	cmp	r3, #0
 806ec16:	d003      	beq.n	806ec20 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 806ec18:	f06f 0303 	mvn.w	r3, #3
 806ec1c:	61fb      	str	r3, [r7, #28]
 806ec1e:	e037      	b.n	806ec90 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 806ec20:	2300      	movs	r3, #0
 806ec22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 806ec24:	f107 0310 	add.w	r3, r7, #16
 806ec28:	461a      	mov	r2, r3
 806ec2a:	68b9      	ldr	r1, [r7, #8]
 806ec2c:	69b8      	ldr	r0, [r7, #24]
 806ec2e:	f000 ff8f 	bl	806fb50 <xQueueReceiveFromISR>
 806ec32:	4603      	mov	r3, r0
 806ec34:	2b01      	cmp	r3, #1
 806ec36:	d003      	beq.n	806ec40 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 806ec38:	f06f 0302 	mvn.w	r3, #2
 806ec3c:	61fb      	str	r3, [r7, #28]
 806ec3e:	e027      	b.n	806ec90 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 806ec40:	693b      	ldr	r3, [r7, #16]
 806ec42:	2b00      	cmp	r3, #0
 806ec44:	d024      	beq.n	806ec90 <osMessageQueueGet+0xac>
 806ec46:	4b15      	ldr	r3, [pc, #84]	; (806ec9c <osMessageQueueGet+0xb8>)
 806ec48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806ec4c:	601a      	str	r2, [r3, #0]
 806ec4e:	f3bf 8f4f 	dsb	sy
 806ec52:	f3bf 8f6f 	isb	sy
 806ec56:	e01b      	b.n	806ec90 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 806ec58:	69bb      	ldr	r3, [r7, #24]
 806ec5a:	2b00      	cmp	r3, #0
 806ec5c:	d002      	beq.n	806ec64 <osMessageQueueGet+0x80>
 806ec5e:	68bb      	ldr	r3, [r7, #8]
 806ec60:	2b00      	cmp	r3, #0
 806ec62:	d103      	bne.n	806ec6c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 806ec64:	f06f 0303 	mvn.w	r3, #3
 806ec68:	61fb      	str	r3, [r7, #28]
 806ec6a:	e011      	b.n	806ec90 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 806ec6c:	683a      	ldr	r2, [r7, #0]
 806ec6e:	68b9      	ldr	r1, [r7, #8]
 806ec70:	69b8      	ldr	r0, [r7, #24]
 806ec72:	f000 fd81 	bl	806f778 <xQueueReceive>
 806ec76:	4603      	mov	r3, r0
 806ec78:	2b01      	cmp	r3, #1
 806ec7a:	d009      	beq.n	806ec90 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 806ec7c:	683b      	ldr	r3, [r7, #0]
 806ec7e:	2b00      	cmp	r3, #0
 806ec80:	d003      	beq.n	806ec8a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 806ec82:	f06f 0301 	mvn.w	r3, #1
 806ec86:	61fb      	str	r3, [r7, #28]
 806ec88:	e002      	b.n	806ec90 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 806ec8a:	f06f 0302 	mvn.w	r3, #2
 806ec8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 806ec90:	69fb      	ldr	r3, [r7, #28]
}
 806ec92:	4618      	mov	r0, r3
 806ec94:	3720      	adds	r7, #32
 806ec96:	46bd      	mov	sp, r7
 806ec98:	bd80      	pop	{r7, pc}
 806ec9a:	bf00      	nop
 806ec9c:	e000ed04 	.word	0xe000ed04

0806eca0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 806eca0:	b480      	push	{r7}
 806eca2:	b085      	sub	sp, #20
 806eca4:	af00      	add	r7, sp, #0
 806eca6:	60f8      	str	r0, [r7, #12]
 806eca8:	60b9      	str	r1, [r7, #8]
 806ecaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 806ecac:	68fb      	ldr	r3, [r7, #12]
 806ecae:	4a07      	ldr	r2, [pc, #28]	; (806eccc <vApplicationGetIdleTaskMemory+0x2c>)
 806ecb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 806ecb2:	68bb      	ldr	r3, [r7, #8]
 806ecb4:	4a06      	ldr	r2, [pc, #24]	; (806ecd0 <vApplicationGetIdleTaskMemory+0x30>)
 806ecb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 806ecb8:	687b      	ldr	r3, [r7, #4]
 806ecba:	2280      	movs	r2, #128	; 0x80
 806ecbc:	601a      	str	r2, [r3, #0]
}
 806ecbe:	bf00      	nop
 806ecc0:	3714      	adds	r7, #20
 806ecc2:	46bd      	mov	sp, r7
 806ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ecc8:	4770      	bx	lr
 806ecca:	bf00      	nop
 806eccc:	2000045c 	.word	0x2000045c
 806ecd0:	20000518 	.word	0x20000518

0806ecd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 806ecd4:	b480      	push	{r7}
 806ecd6:	b085      	sub	sp, #20
 806ecd8:	af00      	add	r7, sp, #0
 806ecda:	60f8      	str	r0, [r7, #12]
 806ecdc:	60b9      	str	r1, [r7, #8]
 806ecde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 806ece0:	68fb      	ldr	r3, [r7, #12]
 806ece2:	4a07      	ldr	r2, [pc, #28]	; (806ed00 <vApplicationGetTimerTaskMemory+0x2c>)
 806ece4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 806ece6:	68bb      	ldr	r3, [r7, #8]
 806ece8:	4a06      	ldr	r2, [pc, #24]	; (806ed04 <vApplicationGetTimerTaskMemory+0x30>)
 806ecea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 806ecec:	687b      	ldr	r3, [r7, #4]
 806ecee:	f44f 7280 	mov.w	r2, #256	; 0x100
 806ecf2:	601a      	str	r2, [r3, #0]
}
 806ecf4:	bf00      	nop
 806ecf6:	3714      	adds	r7, #20
 806ecf8:	46bd      	mov	sp, r7
 806ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ecfe:	4770      	bx	lr
 806ed00:	20000718 	.word	0x20000718
 806ed04:	200007d4 	.word	0x200007d4

0806ed08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 806ed08:	b480      	push	{r7}
 806ed0a:	b083      	sub	sp, #12
 806ed0c:	af00      	add	r7, sp, #0
 806ed0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806ed10:	687b      	ldr	r3, [r7, #4]
 806ed12:	f103 0208 	add.w	r2, r3, #8
 806ed16:	687b      	ldr	r3, [r7, #4]
 806ed18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 806ed1a:	687b      	ldr	r3, [r7, #4]
 806ed1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806ed20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806ed22:	687b      	ldr	r3, [r7, #4]
 806ed24:	f103 0208 	add.w	r2, r3, #8
 806ed28:	687b      	ldr	r3, [r7, #4]
 806ed2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806ed2c:	687b      	ldr	r3, [r7, #4]
 806ed2e:	f103 0208 	add.w	r2, r3, #8
 806ed32:	687b      	ldr	r3, [r7, #4]
 806ed34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 806ed36:	687b      	ldr	r3, [r7, #4]
 806ed38:	2200      	movs	r2, #0
 806ed3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 806ed3c:	bf00      	nop
 806ed3e:	370c      	adds	r7, #12
 806ed40:	46bd      	mov	sp, r7
 806ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ed46:	4770      	bx	lr

0806ed48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 806ed48:	b480      	push	{r7}
 806ed4a:	b083      	sub	sp, #12
 806ed4c:	af00      	add	r7, sp, #0
 806ed4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 806ed50:	687b      	ldr	r3, [r7, #4]
 806ed52:	2200      	movs	r2, #0
 806ed54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 806ed56:	bf00      	nop
 806ed58:	370c      	adds	r7, #12
 806ed5a:	46bd      	mov	sp, r7
 806ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ed60:	4770      	bx	lr

0806ed62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 806ed62:	b480      	push	{r7}
 806ed64:	b085      	sub	sp, #20
 806ed66:	af00      	add	r7, sp, #0
 806ed68:	6078      	str	r0, [r7, #4]
 806ed6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 806ed6c:	687b      	ldr	r3, [r7, #4]
 806ed6e:	685b      	ldr	r3, [r3, #4]
 806ed70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 806ed72:	683b      	ldr	r3, [r7, #0]
 806ed74:	68fa      	ldr	r2, [r7, #12]
 806ed76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 806ed78:	68fb      	ldr	r3, [r7, #12]
 806ed7a:	689a      	ldr	r2, [r3, #8]
 806ed7c:	683b      	ldr	r3, [r7, #0]
 806ed7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 806ed80:	68fb      	ldr	r3, [r7, #12]
 806ed82:	689b      	ldr	r3, [r3, #8]
 806ed84:	683a      	ldr	r2, [r7, #0]
 806ed86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 806ed88:	68fb      	ldr	r3, [r7, #12]
 806ed8a:	683a      	ldr	r2, [r7, #0]
 806ed8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 806ed8e:	683b      	ldr	r3, [r7, #0]
 806ed90:	687a      	ldr	r2, [r7, #4]
 806ed92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 806ed94:	687b      	ldr	r3, [r7, #4]
 806ed96:	681b      	ldr	r3, [r3, #0]
 806ed98:	1c5a      	adds	r2, r3, #1
 806ed9a:	687b      	ldr	r3, [r7, #4]
 806ed9c:	601a      	str	r2, [r3, #0]
}
 806ed9e:	bf00      	nop
 806eda0:	3714      	adds	r7, #20
 806eda2:	46bd      	mov	sp, r7
 806eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 806eda8:	4770      	bx	lr

0806edaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 806edaa:	b480      	push	{r7}
 806edac:	b085      	sub	sp, #20
 806edae:	af00      	add	r7, sp, #0
 806edb0:	6078      	str	r0, [r7, #4]
 806edb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 806edb4:	683b      	ldr	r3, [r7, #0]
 806edb6:	681b      	ldr	r3, [r3, #0]
 806edb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 806edba:	68bb      	ldr	r3, [r7, #8]
 806edbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806edc0:	d103      	bne.n	806edca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 806edc2:	687b      	ldr	r3, [r7, #4]
 806edc4:	691b      	ldr	r3, [r3, #16]
 806edc6:	60fb      	str	r3, [r7, #12]
 806edc8:	e00c      	b.n	806ede4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 806edca:	687b      	ldr	r3, [r7, #4]
 806edcc:	3308      	adds	r3, #8
 806edce:	60fb      	str	r3, [r7, #12]
 806edd0:	e002      	b.n	806edd8 <vListInsert+0x2e>
 806edd2:	68fb      	ldr	r3, [r7, #12]
 806edd4:	685b      	ldr	r3, [r3, #4]
 806edd6:	60fb      	str	r3, [r7, #12]
 806edd8:	68fb      	ldr	r3, [r7, #12]
 806edda:	685b      	ldr	r3, [r3, #4]
 806eddc:	681b      	ldr	r3, [r3, #0]
 806edde:	68ba      	ldr	r2, [r7, #8]
 806ede0:	429a      	cmp	r2, r3
 806ede2:	d2f6      	bcs.n	806edd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 806ede4:	68fb      	ldr	r3, [r7, #12]
 806ede6:	685a      	ldr	r2, [r3, #4]
 806ede8:	683b      	ldr	r3, [r7, #0]
 806edea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 806edec:	683b      	ldr	r3, [r7, #0]
 806edee:	685b      	ldr	r3, [r3, #4]
 806edf0:	683a      	ldr	r2, [r7, #0]
 806edf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 806edf4:	683b      	ldr	r3, [r7, #0]
 806edf6:	68fa      	ldr	r2, [r7, #12]
 806edf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 806edfa:	68fb      	ldr	r3, [r7, #12]
 806edfc:	683a      	ldr	r2, [r7, #0]
 806edfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 806ee00:	683b      	ldr	r3, [r7, #0]
 806ee02:	687a      	ldr	r2, [r7, #4]
 806ee04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 806ee06:	687b      	ldr	r3, [r7, #4]
 806ee08:	681b      	ldr	r3, [r3, #0]
 806ee0a:	1c5a      	adds	r2, r3, #1
 806ee0c:	687b      	ldr	r3, [r7, #4]
 806ee0e:	601a      	str	r2, [r3, #0]
}
 806ee10:	bf00      	nop
 806ee12:	3714      	adds	r7, #20
 806ee14:	46bd      	mov	sp, r7
 806ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ee1a:	4770      	bx	lr

0806ee1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 806ee1c:	b480      	push	{r7}
 806ee1e:	b085      	sub	sp, #20
 806ee20:	af00      	add	r7, sp, #0
 806ee22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 806ee24:	687b      	ldr	r3, [r7, #4]
 806ee26:	691b      	ldr	r3, [r3, #16]
 806ee28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 806ee2a:	687b      	ldr	r3, [r7, #4]
 806ee2c:	685b      	ldr	r3, [r3, #4]
 806ee2e:	687a      	ldr	r2, [r7, #4]
 806ee30:	6892      	ldr	r2, [r2, #8]
 806ee32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 806ee34:	687b      	ldr	r3, [r7, #4]
 806ee36:	689b      	ldr	r3, [r3, #8]
 806ee38:	687a      	ldr	r2, [r7, #4]
 806ee3a:	6852      	ldr	r2, [r2, #4]
 806ee3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 806ee3e:	68fb      	ldr	r3, [r7, #12]
 806ee40:	685b      	ldr	r3, [r3, #4]
 806ee42:	687a      	ldr	r2, [r7, #4]
 806ee44:	429a      	cmp	r2, r3
 806ee46:	d103      	bne.n	806ee50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 806ee48:	687b      	ldr	r3, [r7, #4]
 806ee4a:	689a      	ldr	r2, [r3, #8]
 806ee4c:	68fb      	ldr	r3, [r7, #12]
 806ee4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 806ee50:	687b      	ldr	r3, [r7, #4]
 806ee52:	2200      	movs	r2, #0
 806ee54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 806ee56:	68fb      	ldr	r3, [r7, #12]
 806ee58:	681b      	ldr	r3, [r3, #0]
 806ee5a:	1e5a      	subs	r2, r3, #1
 806ee5c:	68fb      	ldr	r3, [r7, #12]
 806ee5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 806ee60:	68fb      	ldr	r3, [r7, #12]
 806ee62:	681b      	ldr	r3, [r3, #0]
}
 806ee64:	4618      	mov	r0, r3
 806ee66:	3714      	adds	r7, #20
 806ee68:	46bd      	mov	sp, r7
 806ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ee6e:	4770      	bx	lr

0806ee70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 806ee70:	b580      	push	{r7, lr}
 806ee72:	b084      	sub	sp, #16
 806ee74:	af00      	add	r7, sp, #0
 806ee76:	6078      	str	r0, [r7, #4]
 806ee78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 806ee7a:	687b      	ldr	r3, [r7, #4]
 806ee7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 806ee7e:	68fb      	ldr	r3, [r7, #12]
 806ee80:	2b00      	cmp	r3, #0
 806ee82:	d10a      	bne.n	806ee9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 806ee84:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ee88:	f383 8811 	msr	BASEPRI, r3
 806ee8c:	f3bf 8f6f 	isb	sy
 806ee90:	f3bf 8f4f 	dsb	sy
 806ee94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 806ee96:	bf00      	nop
 806ee98:	e7fe      	b.n	806ee98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 806ee9a:	f003 f81b 	bl	8071ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806ee9e:	68fb      	ldr	r3, [r7, #12]
 806eea0:	681a      	ldr	r2, [r3, #0]
 806eea2:	68fb      	ldr	r3, [r7, #12]
 806eea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806eea6:	68f9      	ldr	r1, [r7, #12]
 806eea8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 806eeaa:	fb01 f303 	mul.w	r3, r1, r3
 806eeae:	441a      	add	r2, r3
 806eeb0:	68fb      	ldr	r3, [r7, #12]
 806eeb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 806eeb4:	68fb      	ldr	r3, [r7, #12]
 806eeb6:	2200      	movs	r2, #0
 806eeb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 806eeba:	68fb      	ldr	r3, [r7, #12]
 806eebc:	681a      	ldr	r2, [r3, #0]
 806eebe:	68fb      	ldr	r3, [r7, #12]
 806eec0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806eec2:	68fb      	ldr	r3, [r7, #12]
 806eec4:	681a      	ldr	r2, [r3, #0]
 806eec6:	68fb      	ldr	r3, [r7, #12]
 806eec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806eeca:	3b01      	subs	r3, #1
 806eecc:	68f9      	ldr	r1, [r7, #12]
 806eece:	6c09      	ldr	r1, [r1, #64]	; 0x40
 806eed0:	fb01 f303 	mul.w	r3, r1, r3
 806eed4:	441a      	add	r2, r3
 806eed6:	68fb      	ldr	r3, [r7, #12]
 806eed8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 806eeda:	68fb      	ldr	r3, [r7, #12]
 806eedc:	22ff      	movs	r2, #255	; 0xff
 806eede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 806eee2:	68fb      	ldr	r3, [r7, #12]
 806eee4:	22ff      	movs	r2, #255	; 0xff
 806eee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 806eeea:	683b      	ldr	r3, [r7, #0]
 806eeec:	2b00      	cmp	r3, #0
 806eeee:	d114      	bne.n	806ef1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806eef0:	68fb      	ldr	r3, [r7, #12]
 806eef2:	691b      	ldr	r3, [r3, #16]
 806eef4:	2b00      	cmp	r3, #0
 806eef6:	d01a      	beq.n	806ef2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806eef8:	68fb      	ldr	r3, [r7, #12]
 806eefa:	3310      	adds	r3, #16
 806eefc:	4618      	mov	r0, r3
 806eefe:	f001 fd01 	bl	8070904 <xTaskRemoveFromEventList>
 806ef02:	4603      	mov	r3, r0
 806ef04:	2b00      	cmp	r3, #0
 806ef06:	d012      	beq.n	806ef2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 806ef08:	4b0c      	ldr	r3, [pc, #48]	; (806ef3c <xQueueGenericReset+0xcc>)
 806ef0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806ef0e:	601a      	str	r2, [r3, #0]
 806ef10:	f3bf 8f4f 	dsb	sy
 806ef14:	f3bf 8f6f 	isb	sy
 806ef18:	e009      	b.n	806ef2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 806ef1a:	68fb      	ldr	r3, [r7, #12]
 806ef1c:	3310      	adds	r3, #16
 806ef1e:	4618      	mov	r0, r3
 806ef20:	f7ff fef2 	bl	806ed08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 806ef24:	68fb      	ldr	r3, [r7, #12]
 806ef26:	3324      	adds	r3, #36	; 0x24
 806ef28:	4618      	mov	r0, r3
 806ef2a:	f7ff feed 	bl	806ed08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 806ef2e:	f003 f801 	bl	8071f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 806ef32:	2301      	movs	r3, #1
}
 806ef34:	4618      	mov	r0, r3
 806ef36:	3710      	adds	r7, #16
 806ef38:	46bd      	mov	sp, r7
 806ef3a:	bd80      	pop	{r7, pc}
 806ef3c:	e000ed04 	.word	0xe000ed04

0806ef40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 806ef40:	b580      	push	{r7, lr}
 806ef42:	b08e      	sub	sp, #56	; 0x38
 806ef44:	af02      	add	r7, sp, #8
 806ef46:	60f8      	str	r0, [r7, #12]
 806ef48:	60b9      	str	r1, [r7, #8]
 806ef4a:	607a      	str	r2, [r7, #4]
 806ef4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 806ef4e:	68fb      	ldr	r3, [r7, #12]
 806ef50:	2b00      	cmp	r3, #0
 806ef52:	d10a      	bne.n	806ef6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 806ef54:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ef58:	f383 8811 	msr	BASEPRI, r3
 806ef5c:	f3bf 8f6f 	isb	sy
 806ef60:	f3bf 8f4f 	dsb	sy
 806ef64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 806ef66:	bf00      	nop
 806ef68:	e7fe      	b.n	806ef68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 806ef6a:	683b      	ldr	r3, [r7, #0]
 806ef6c:	2b00      	cmp	r3, #0
 806ef6e:	d10a      	bne.n	806ef86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 806ef70:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ef74:	f383 8811 	msr	BASEPRI, r3
 806ef78:	f3bf 8f6f 	isb	sy
 806ef7c:	f3bf 8f4f 	dsb	sy
 806ef80:	627b      	str	r3, [r7, #36]	; 0x24
}
 806ef82:	bf00      	nop
 806ef84:	e7fe      	b.n	806ef84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 806ef86:	687b      	ldr	r3, [r7, #4]
 806ef88:	2b00      	cmp	r3, #0
 806ef8a:	d002      	beq.n	806ef92 <xQueueGenericCreateStatic+0x52>
 806ef8c:	68bb      	ldr	r3, [r7, #8]
 806ef8e:	2b00      	cmp	r3, #0
 806ef90:	d001      	beq.n	806ef96 <xQueueGenericCreateStatic+0x56>
 806ef92:	2301      	movs	r3, #1
 806ef94:	e000      	b.n	806ef98 <xQueueGenericCreateStatic+0x58>
 806ef96:	2300      	movs	r3, #0
 806ef98:	2b00      	cmp	r3, #0
 806ef9a:	d10a      	bne.n	806efb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 806ef9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806efa0:	f383 8811 	msr	BASEPRI, r3
 806efa4:	f3bf 8f6f 	isb	sy
 806efa8:	f3bf 8f4f 	dsb	sy
 806efac:	623b      	str	r3, [r7, #32]
}
 806efae:	bf00      	nop
 806efb0:	e7fe      	b.n	806efb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 806efb2:	687b      	ldr	r3, [r7, #4]
 806efb4:	2b00      	cmp	r3, #0
 806efb6:	d102      	bne.n	806efbe <xQueueGenericCreateStatic+0x7e>
 806efb8:	68bb      	ldr	r3, [r7, #8]
 806efba:	2b00      	cmp	r3, #0
 806efbc:	d101      	bne.n	806efc2 <xQueueGenericCreateStatic+0x82>
 806efbe:	2301      	movs	r3, #1
 806efc0:	e000      	b.n	806efc4 <xQueueGenericCreateStatic+0x84>
 806efc2:	2300      	movs	r3, #0
 806efc4:	2b00      	cmp	r3, #0
 806efc6:	d10a      	bne.n	806efde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 806efc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 806efcc:	f383 8811 	msr	BASEPRI, r3
 806efd0:	f3bf 8f6f 	isb	sy
 806efd4:	f3bf 8f4f 	dsb	sy
 806efd8:	61fb      	str	r3, [r7, #28]
}
 806efda:	bf00      	nop
 806efdc:	e7fe      	b.n	806efdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 806efde:	2350      	movs	r3, #80	; 0x50
 806efe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 806efe2:	697b      	ldr	r3, [r7, #20]
 806efe4:	2b50      	cmp	r3, #80	; 0x50
 806efe6:	d00a      	beq.n	806effe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 806efe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 806efec:	f383 8811 	msr	BASEPRI, r3
 806eff0:	f3bf 8f6f 	isb	sy
 806eff4:	f3bf 8f4f 	dsb	sy
 806eff8:	61bb      	str	r3, [r7, #24]
}
 806effa:	bf00      	nop
 806effc:	e7fe      	b.n	806effc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 806effe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 806f000:	683b      	ldr	r3, [r7, #0]
 806f002:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 806f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f006:	2b00      	cmp	r3, #0
 806f008:	d00d      	beq.n	806f026 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 806f00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f00c:	2201      	movs	r2, #1
 806f00e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 806f012:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 806f016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f018:	9300      	str	r3, [sp, #0]
 806f01a:	4613      	mov	r3, r2
 806f01c:	687a      	ldr	r2, [r7, #4]
 806f01e:	68b9      	ldr	r1, [r7, #8]
 806f020:	68f8      	ldr	r0, [r7, #12]
 806f022:	f000 f83f 	bl	806f0a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 806f026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 806f028:	4618      	mov	r0, r3
 806f02a:	3730      	adds	r7, #48	; 0x30
 806f02c:	46bd      	mov	sp, r7
 806f02e:	bd80      	pop	{r7, pc}

0806f030 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 806f030:	b580      	push	{r7, lr}
 806f032:	b08a      	sub	sp, #40	; 0x28
 806f034:	af02      	add	r7, sp, #8
 806f036:	60f8      	str	r0, [r7, #12]
 806f038:	60b9      	str	r1, [r7, #8]
 806f03a:	4613      	mov	r3, r2
 806f03c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 806f03e:	68fb      	ldr	r3, [r7, #12]
 806f040:	2b00      	cmp	r3, #0
 806f042:	d10a      	bne.n	806f05a <xQueueGenericCreate+0x2a>
	__asm volatile
 806f044:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f048:	f383 8811 	msr	BASEPRI, r3
 806f04c:	f3bf 8f6f 	isb	sy
 806f050:	f3bf 8f4f 	dsb	sy
 806f054:	613b      	str	r3, [r7, #16]
}
 806f056:	bf00      	nop
 806f058:	e7fe      	b.n	806f058 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806f05a:	68fb      	ldr	r3, [r7, #12]
 806f05c:	68ba      	ldr	r2, [r7, #8]
 806f05e:	fb02 f303 	mul.w	r3, r2, r3
 806f062:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 806f064:	69fb      	ldr	r3, [r7, #28]
 806f066:	3350      	adds	r3, #80	; 0x50
 806f068:	4618      	mov	r0, r3
 806f06a:	f003 f855 	bl	8072118 <pvPortMalloc>
 806f06e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 806f070:	69bb      	ldr	r3, [r7, #24]
 806f072:	2b00      	cmp	r3, #0
 806f074:	d011      	beq.n	806f09a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 806f076:	69bb      	ldr	r3, [r7, #24]
 806f078:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806f07a:	697b      	ldr	r3, [r7, #20]
 806f07c:	3350      	adds	r3, #80	; 0x50
 806f07e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 806f080:	69bb      	ldr	r3, [r7, #24]
 806f082:	2200      	movs	r2, #0
 806f084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 806f088:	79fa      	ldrb	r2, [r7, #7]
 806f08a:	69bb      	ldr	r3, [r7, #24]
 806f08c:	9300      	str	r3, [sp, #0]
 806f08e:	4613      	mov	r3, r2
 806f090:	697a      	ldr	r2, [r7, #20]
 806f092:	68b9      	ldr	r1, [r7, #8]
 806f094:	68f8      	ldr	r0, [r7, #12]
 806f096:	f000 f805 	bl	806f0a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 806f09a:	69bb      	ldr	r3, [r7, #24]
	}
 806f09c:	4618      	mov	r0, r3
 806f09e:	3720      	adds	r7, #32
 806f0a0:	46bd      	mov	sp, r7
 806f0a2:	bd80      	pop	{r7, pc}

0806f0a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 806f0a4:	b580      	push	{r7, lr}
 806f0a6:	b084      	sub	sp, #16
 806f0a8:	af00      	add	r7, sp, #0
 806f0aa:	60f8      	str	r0, [r7, #12]
 806f0ac:	60b9      	str	r1, [r7, #8]
 806f0ae:	607a      	str	r2, [r7, #4]
 806f0b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 806f0b2:	68bb      	ldr	r3, [r7, #8]
 806f0b4:	2b00      	cmp	r3, #0
 806f0b6:	d103      	bne.n	806f0c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 806f0b8:	69bb      	ldr	r3, [r7, #24]
 806f0ba:	69ba      	ldr	r2, [r7, #24]
 806f0bc:	601a      	str	r2, [r3, #0]
 806f0be:	e002      	b.n	806f0c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 806f0c0:	69bb      	ldr	r3, [r7, #24]
 806f0c2:	687a      	ldr	r2, [r7, #4]
 806f0c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 806f0c6:	69bb      	ldr	r3, [r7, #24]
 806f0c8:	68fa      	ldr	r2, [r7, #12]
 806f0ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 806f0cc:	69bb      	ldr	r3, [r7, #24]
 806f0ce:	68ba      	ldr	r2, [r7, #8]
 806f0d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 806f0d2:	2101      	movs	r1, #1
 806f0d4:	69b8      	ldr	r0, [r7, #24]
 806f0d6:	f7ff fecb 	bl	806ee70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 806f0da:	69bb      	ldr	r3, [r7, #24]
 806f0dc:	78fa      	ldrb	r2, [r7, #3]
 806f0de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 806f0e2:	bf00      	nop
 806f0e4:	3710      	adds	r7, #16
 806f0e6:	46bd      	mov	sp, r7
 806f0e8:	bd80      	pop	{r7, pc}

0806f0ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 806f0ea:	b580      	push	{r7, lr}
 806f0ec:	b082      	sub	sp, #8
 806f0ee:	af00      	add	r7, sp, #0
 806f0f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 806f0f2:	687b      	ldr	r3, [r7, #4]
 806f0f4:	2b00      	cmp	r3, #0
 806f0f6:	d00e      	beq.n	806f116 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 806f0f8:	687b      	ldr	r3, [r7, #4]
 806f0fa:	2200      	movs	r2, #0
 806f0fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 806f0fe:	687b      	ldr	r3, [r7, #4]
 806f100:	2200      	movs	r2, #0
 806f102:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 806f104:	687b      	ldr	r3, [r7, #4]
 806f106:	2200      	movs	r2, #0
 806f108:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 806f10a:	2300      	movs	r3, #0
 806f10c:	2200      	movs	r2, #0
 806f10e:	2100      	movs	r1, #0
 806f110:	6878      	ldr	r0, [r7, #4]
 806f112:	f000 f90b 	bl	806f32c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 806f116:	bf00      	nop
 806f118:	3708      	adds	r7, #8
 806f11a:	46bd      	mov	sp, r7
 806f11c:	bd80      	pop	{r7, pc}

0806f11e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 806f11e:	b580      	push	{r7, lr}
 806f120:	b086      	sub	sp, #24
 806f122:	af00      	add	r7, sp, #0
 806f124:	4603      	mov	r3, r0
 806f126:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 806f128:	2301      	movs	r3, #1
 806f12a:	617b      	str	r3, [r7, #20]
 806f12c:	2300      	movs	r3, #0
 806f12e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 806f130:	79fb      	ldrb	r3, [r7, #7]
 806f132:	461a      	mov	r2, r3
 806f134:	6939      	ldr	r1, [r7, #16]
 806f136:	6978      	ldr	r0, [r7, #20]
 806f138:	f7ff ff7a 	bl	806f030 <xQueueGenericCreate>
 806f13c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 806f13e:	68f8      	ldr	r0, [r7, #12]
 806f140:	f7ff ffd3 	bl	806f0ea <prvInitialiseMutex>

		return xNewQueue;
 806f144:	68fb      	ldr	r3, [r7, #12]
	}
 806f146:	4618      	mov	r0, r3
 806f148:	3718      	adds	r7, #24
 806f14a:	46bd      	mov	sp, r7
 806f14c:	bd80      	pop	{r7, pc}

0806f14e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 806f14e:	b580      	push	{r7, lr}
 806f150:	b088      	sub	sp, #32
 806f152:	af02      	add	r7, sp, #8
 806f154:	4603      	mov	r3, r0
 806f156:	6039      	str	r1, [r7, #0]
 806f158:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 806f15a:	2301      	movs	r3, #1
 806f15c:	617b      	str	r3, [r7, #20]
 806f15e:	2300      	movs	r3, #0
 806f160:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 806f162:	79fb      	ldrb	r3, [r7, #7]
 806f164:	9300      	str	r3, [sp, #0]
 806f166:	683b      	ldr	r3, [r7, #0]
 806f168:	2200      	movs	r2, #0
 806f16a:	6939      	ldr	r1, [r7, #16]
 806f16c:	6978      	ldr	r0, [r7, #20]
 806f16e:	f7ff fee7 	bl	806ef40 <xQueueGenericCreateStatic>
 806f172:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 806f174:	68f8      	ldr	r0, [r7, #12]
 806f176:	f7ff ffb8 	bl	806f0ea <prvInitialiseMutex>

		return xNewQueue;
 806f17a:	68fb      	ldr	r3, [r7, #12]
	}
 806f17c:	4618      	mov	r0, r3
 806f17e:	3718      	adds	r7, #24
 806f180:	46bd      	mov	sp, r7
 806f182:	bd80      	pop	{r7, pc}

0806f184 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 806f184:	b590      	push	{r4, r7, lr}
 806f186:	b087      	sub	sp, #28
 806f188:	af00      	add	r7, sp, #0
 806f18a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 806f18c:	687b      	ldr	r3, [r7, #4]
 806f18e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 806f190:	693b      	ldr	r3, [r7, #16]
 806f192:	2b00      	cmp	r3, #0
 806f194:	d10a      	bne.n	806f1ac <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 806f196:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f19a:	f383 8811 	msr	BASEPRI, r3
 806f19e:	f3bf 8f6f 	isb	sy
 806f1a2:	f3bf 8f4f 	dsb	sy
 806f1a6:	60fb      	str	r3, [r7, #12]
}
 806f1a8:	bf00      	nop
 806f1aa:	e7fe      	b.n	806f1aa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 806f1ac:	693b      	ldr	r3, [r7, #16]
 806f1ae:	689c      	ldr	r4, [r3, #8]
 806f1b0:	f001 fd6a 	bl	8070c88 <xTaskGetCurrentTaskHandle>
 806f1b4:	4603      	mov	r3, r0
 806f1b6:	429c      	cmp	r4, r3
 806f1b8:	d111      	bne.n	806f1de <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 806f1ba:	693b      	ldr	r3, [r7, #16]
 806f1bc:	68db      	ldr	r3, [r3, #12]
 806f1be:	1e5a      	subs	r2, r3, #1
 806f1c0:	693b      	ldr	r3, [r7, #16]
 806f1c2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 806f1c4:	693b      	ldr	r3, [r7, #16]
 806f1c6:	68db      	ldr	r3, [r3, #12]
 806f1c8:	2b00      	cmp	r3, #0
 806f1ca:	d105      	bne.n	806f1d8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 806f1cc:	2300      	movs	r3, #0
 806f1ce:	2200      	movs	r2, #0
 806f1d0:	2100      	movs	r1, #0
 806f1d2:	6938      	ldr	r0, [r7, #16]
 806f1d4:	f000 f8aa 	bl	806f32c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 806f1d8:	2301      	movs	r3, #1
 806f1da:	617b      	str	r3, [r7, #20]
 806f1dc:	e001      	b.n	806f1e2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 806f1de:	2300      	movs	r3, #0
 806f1e0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 806f1e2:	697b      	ldr	r3, [r7, #20]
	}
 806f1e4:	4618      	mov	r0, r3
 806f1e6:	371c      	adds	r7, #28
 806f1e8:	46bd      	mov	sp, r7
 806f1ea:	bd90      	pop	{r4, r7, pc}

0806f1ec <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 806f1ec:	b590      	push	{r4, r7, lr}
 806f1ee:	b087      	sub	sp, #28
 806f1f0:	af00      	add	r7, sp, #0
 806f1f2:	6078      	str	r0, [r7, #4]
 806f1f4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 806f1f6:	687b      	ldr	r3, [r7, #4]
 806f1f8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 806f1fa:	693b      	ldr	r3, [r7, #16]
 806f1fc:	2b00      	cmp	r3, #0
 806f1fe:	d10a      	bne.n	806f216 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 806f200:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f204:	f383 8811 	msr	BASEPRI, r3
 806f208:	f3bf 8f6f 	isb	sy
 806f20c:	f3bf 8f4f 	dsb	sy
 806f210:	60fb      	str	r3, [r7, #12]
}
 806f212:	bf00      	nop
 806f214:	e7fe      	b.n	806f214 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 806f216:	693b      	ldr	r3, [r7, #16]
 806f218:	689c      	ldr	r4, [r3, #8]
 806f21a:	f001 fd35 	bl	8070c88 <xTaskGetCurrentTaskHandle>
 806f21e:	4603      	mov	r3, r0
 806f220:	429c      	cmp	r4, r3
 806f222:	d107      	bne.n	806f234 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 806f224:	693b      	ldr	r3, [r7, #16]
 806f226:	68db      	ldr	r3, [r3, #12]
 806f228:	1c5a      	adds	r2, r3, #1
 806f22a:	693b      	ldr	r3, [r7, #16]
 806f22c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 806f22e:	2301      	movs	r3, #1
 806f230:	617b      	str	r3, [r7, #20]
 806f232:	e00c      	b.n	806f24e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 806f234:	6839      	ldr	r1, [r7, #0]
 806f236:	6938      	ldr	r0, [r7, #16]
 806f238:	f000 fb7e 	bl	806f938 <xQueueSemaphoreTake>
 806f23c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 806f23e:	697b      	ldr	r3, [r7, #20]
 806f240:	2b00      	cmp	r3, #0
 806f242:	d004      	beq.n	806f24e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 806f244:	693b      	ldr	r3, [r7, #16]
 806f246:	68db      	ldr	r3, [r3, #12]
 806f248:	1c5a      	adds	r2, r3, #1
 806f24a:	693b      	ldr	r3, [r7, #16]
 806f24c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 806f24e:	697b      	ldr	r3, [r7, #20]
	}
 806f250:	4618      	mov	r0, r3
 806f252:	371c      	adds	r7, #28
 806f254:	46bd      	mov	sp, r7
 806f256:	bd90      	pop	{r4, r7, pc}

0806f258 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 806f258:	b580      	push	{r7, lr}
 806f25a:	b08a      	sub	sp, #40	; 0x28
 806f25c:	af02      	add	r7, sp, #8
 806f25e:	60f8      	str	r0, [r7, #12]
 806f260:	60b9      	str	r1, [r7, #8]
 806f262:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 806f264:	68fb      	ldr	r3, [r7, #12]
 806f266:	2b00      	cmp	r3, #0
 806f268:	d10a      	bne.n	806f280 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 806f26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f26e:	f383 8811 	msr	BASEPRI, r3
 806f272:	f3bf 8f6f 	isb	sy
 806f276:	f3bf 8f4f 	dsb	sy
 806f27a:	61bb      	str	r3, [r7, #24]
}
 806f27c:	bf00      	nop
 806f27e:	e7fe      	b.n	806f27e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 806f280:	68ba      	ldr	r2, [r7, #8]
 806f282:	68fb      	ldr	r3, [r7, #12]
 806f284:	429a      	cmp	r2, r3
 806f286:	d90a      	bls.n	806f29e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 806f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f28c:	f383 8811 	msr	BASEPRI, r3
 806f290:	f3bf 8f6f 	isb	sy
 806f294:	f3bf 8f4f 	dsb	sy
 806f298:	617b      	str	r3, [r7, #20]
}
 806f29a:	bf00      	nop
 806f29c:	e7fe      	b.n	806f29c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 806f29e:	2302      	movs	r3, #2
 806f2a0:	9300      	str	r3, [sp, #0]
 806f2a2:	687b      	ldr	r3, [r7, #4]
 806f2a4:	2200      	movs	r2, #0
 806f2a6:	2100      	movs	r1, #0
 806f2a8:	68f8      	ldr	r0, [r7, #12]
 806f2aa:	f7ff fe49 	bl	806ef40 <xQueueGenericCreateStatic>
 806f2ae:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 806f2b0:	69fb      	ldr	r3, [r7, #28]
 806f2b2:	2b00      	cmp	r3, #0
 806f2b4:	d002      	beq.n	806f2bc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 806f2b6:	69fb      	ldr	r3, [r7, #28]
 806f2b8:	68ba      	ldr	r2, [r7, #8]
 806f2ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 806f2bc:	69fb      	ldr	r3, [r7, #28]
	}
 806f2be:	4618      	mov	r0, r3
 806f2c0:	3720      	adds	r7, #32
 806f2c2:	46bd      	mov	sp, r7
 806f2c4:	bd80      	pop	{r7, pc}

0806f2c6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 806f2c6:	b580      	push	{r7, lr}
 806f2c8:	b086      	sub	sp, #24
 806f2ca:	af00      	add	r7, sp, #0
 806f2cc:	6078      	str	r0, [r7, #4]
 806f2ce:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 806f2d0:	687b      	ldr	r3, [r7, #4]
 806f2d2:	2b00      	cmp	r3, #0
 806f2d4:	d10a      	bne.n	806f2ec <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 806f2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f2da:	f383 8811 	msr	BASEPRI, r3
 806f2de:	f3bf 8f6f 	isb	sy
 806f2e2:	f3bf 8f4f 	dsb	sy
 806f2e6:	613b      	str	r3, [r7, #16]
}
 806f2e8:	bf00      	nop
 806f2ea:	e7fe      	b.n	806f2ea <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 806f2ec:	683a      	ldr	r2, [r7, #0]
 806f2ee:	687b      	ldr	r3, [r7, #4]
 806f2f0:	429a      	cmp	r2, r3
 806f2f2:	d90a      	bls.n	806f30a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 806f2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f2f8:	f383 8811 	msr	BASEPRI, r3
 806f2fc:	f3bf 8f6f 	isb	sy
 806f300:	f3bf 8f4f 	dsb	sy
 806f304:	60fb      	str	r3, [r7, #12]
}
 806f306:	bf00      	nop
 806f308:	e7fe      	b.n	806f308 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 806f30a:	2202      	movs	r2, #2
 806f30c:	2100      	movs	r1, #0
 806f30e:	6878      	ldr	r0, [r7, #4]
 806f310:	f7ff fe8e 	bl	806f030 <xQueueGenericCreate>
 806f314:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 806f316:	697b      	ldr	r3, [r7, #20]
 806f318:	2b00      	cmp	r3, #0
 806f31a:	d002      	beq.n	806f322 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 806f31c:	697b      	ldr	r3, [r7, #20]
 806f31e:	683a      	ldr	r2, [r7, #0]
 806f320:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 806f322:	697b      	ldr	r3, [r7, #20]
	}
 806f324:	4618      	mov	r0, r3
 806f326:	3718      	adds	r7, #24
 806f328:	46bd      	mov	sp, r7
 806f32a:	bd80      	pop	{r7, pc}

0806f32c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 806f32c:	b580      	push	{r7, lr}
 806f32e:	b08e      	sub	sp, #56	; 0x38
 806f330:	af00      	add	r7, sp, #0
 806f332:	60f8      	str	r0, [r7, #12]
 806f334:	60b9      	str	r1, [r7, #8]
 806f336:	607a      	str	r2, [r7, #4]
 806f338:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 806f33a:	2300      	movs	r3, #0
 806f33c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806f33e:	68fb      	ldr	r3, [r7, #12]
 806f340:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 806f342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f344:	2b00      	cmp	r3, #0
 806f346:	d10a      	bne.n	806f35e <xQueueGenericSend+0x32>
	__asm volatile
 806f348:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f34c:	f383 8811 	msr	BASEPRI, r3
 806f350:	f3bf 8f6f 	isb	sy
 806f354:	f3bf 8f4f 	dsb	sy
 806f358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 806f35a:	bf00      	nop
 806f35c:	e7fe      	b.n	806f35c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806f35e:	68bb      	ldr	r3, [r7, #8]
 806f360:	2b00      	cmp	r3, #0
 806f362:	d103      	bne.n	806f36c <xQueueGenericSend+0x40>
 806f364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f368:	2b00      	cmp	r3, #0
 806f36a:	d101      	bne.n	806f370 <xQueueGenericSend+0x44>
 806f36c:	2301      	movs	r3, #1
 806f36e:	e000      	b.n	806f372 <xQueueGenericSend+0x46>
 806f370:	2300      	movs	r3, #0
 806f372:	2b00      	cmp	r3, #0
 806f374:	d10a      	bne.n	806f38c <xQueueGenericSend+0x60>
	__asm volatile
 806f376:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f37a:	f383 8811 	msr	BASEPRI, r3
 806f37e:	f3bf 8f6f 	isb	sy
 806f382:	f3bf 8f4f 	dsb	sy
 806f386:	627b      	str	r3, [r7, #36]	; 0x24
}
 806f388:	bf00      	nop
 806f38a:	e7fe      	b.n	806f38a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 806f38c:	683b      	ldr	r3, [r7, #0]
 806f38e:	2b02      	cmp	r3, #2
 806f390:	d103      	bne.n	806f39a <xQueueGenericSend+0x6e>
 806f392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f396:	2b01      	cmp	r3, #1
 806f398:	d101      	bne.n	806f39e <xQueueGenericSend+0x72>
 806f39a:	2301      	movs	r3, #1
 806f39c:	e000      	b.n	806f3a0 <xQueueGenericSend+0x74>
 806f39e:	2300      	movs	r3, #0
 806f3a0:	2b00      	cmp	r3, #0
 806f3a2:	d10a      	bne.n	806f3ba <xQueueGenericSend+0x8e>
	__asm volatile
 806f3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f3a8:	f383 8811 	msr	BASEPRI, r3
 806f3ac:	f3bf 8f6f 	isb	sy
 806f3b0:	f3bf 8f4f 	dsb	sy
 806f3b4:	623b      	str	r3, [r7, #32]
}
 806f3b6:	bf00      	nop
 806f3b8:	e7fe      	b.n	806f3b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806f3ba:	f001 fc75 	bl	8070ca8 <xTaskGetSchedulerState>
 806f3be:	4603      	mov	r3, r0
 806f3c0:	2b00      	cmp	r3, #0
 806f3c2:	d102      	bne.n	806f3ca <xQueueGenericSend+0x9e>
 806f3c4:	687b      	ldr	r3, [r7, #4]
 806f3c6:	2b00      	cmp	r3, #0
 806f3c8:	d101      	bne.n	806f3ce <xQueueGenericSend+0xa2>
 806f3ca:	2301      	movs	r3, #1
 806f3cc:	e000      	b.n	806f3d0 <xQueueGenericSend+0xa4>
 806f3ce:	2300      	movs	r3, #0
 806f3d0:	2b00      	cmp	r3, #0
 806f3d2:	d10a      	bne.n	806f3ea <xQueueGenericSend+0xbe>
	__asm volatile
 806f3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f3d8:	f383 8811 	msr	BASEPRI, r3
 806f3dc:	f3bf 8f6f 	isb	sy
 806f3e0:	f3bf 8f4f 	dsb	sy
 806f3e4:	61fb      	str	r3, [r7, #28]
}
 806f3e6:	bf00      	nop
 806f3e8:	e7fe      	b.n	806f3e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806f3ea:	f002 fd73 	bl	8071ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 806f3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f3f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806f3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f3f6:	429a      	cmp	r2, r3
 806f3f8:	d302      	bcc.n	806f400 <xQueueGenericSend+0xd4>
 806f3fa:	683b      	ldr	r3, [r7, #0]
 806f3fc:	2b02      	cmp	r3, #2
 806f3fe:	d129      	bne.n	806f454 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 806f400:	683a      	ldr	r2, [r7, #0]
 806f402:	68b9      	ldr	r1, [r7, #8]
 806f404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f406:	f000 fc5e 	bl	806fcc6 <prvCopyDataToQueue>
 806f40a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806f40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806f410:	2b00      	cmp	r3, #0
 806f412:	d010      	beq.n	806f436 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806f414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f416:	3324      	adds	r3, #36	; 0x24
 806f418:	4618      	mov	r0, r3
 806f41a:	f001 fa73 	bl	8070904 <xTaskRemoveFromEventList>
 806f41e:	4603      	mov	r3, r0
 806f420:	2b00      	cmp	r3, #0
 806f422:	d013      	beq.n	806f44c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 806f424:	4b3f      	ldr	r3, [pc, #252]	; (806f524 <xQueueGenericSend+0x1f8>)
 806f426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f42a:	601a      	str	r2, [r3, #0]
 806f42c:	f3bf 8f4f 	dsb	sy
 806f430:	f3bf 8f6f 	isb	sy
 806f434:	e00a      	b.n	806f44c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 806f436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f438:	2b00      	cmp	r3, #0
 806f43a:	d007      	beq.n	806f44c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 806f43c:	4b39      	ldr	r3, [pc, #228]	; (806f524 <xQueueGenericSend+0x1f8>)
 806f43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f442:	601a      	str	r2, [r3, #0]
 806f444:	f3bf 8f4f 	dsb	sy
 806f448:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 806f44c:	f002 fd72 	bl	8071f34 <vPortExitCritical>
				return pdPASS;
 806f450:	2301      	movs	r3, #1
 806f452:	e063      	b.n	806f51c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806f454:	687b      	ldr	r3, [r7, #4]
 806f456:	2b00      	cmp	r3, #0
 806f458:	d103      	bne.n	806f462 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 806f45a:	f002 fd6b 	bl	8071f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 806f45e:	2300      	movs	r3, #0
 806f460:	e05c      	b.n	806f51c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 806f462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806f464:	2b00      	cmp	r3, #0
 806f466:	d106      	bne.n	806f476 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806f468:	f107 0314 	add.w	r3, r7, #20
 806f46c:	4618      	mov	r0, r3
 806f46e:	f001 faad 	bl	80709cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806f472:	2301      	movs	r3, #1
 806f474:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806f476:	f002 fd5d 	bl	8071f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 806f47a:	f001 f819 	bl	80704b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806f47e:	f002 fd29 	bl	8071ed4 <vPortEnterCritical>
 806f482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806f488:	b25b      	sxtb	r3, r3
 806f48a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f48e:	d103      	bne.n	806f498 <xQueueGenericSend+0x16c>
 806f490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f492:	2200      	movs	r2, #0
 806f494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806f498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f49a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f49e:	b25b      	sxtb	r3, r3
 806f4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f4a4:	d103      	bne.n	806f4ae <xQueueGenericSend+0x182>
 806f4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f4a8:	2200      	movs	r2, #0
 806f4aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806f4ae:	f002 fd41 	bl	8071f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806f4b2:	1d3a      	adds	r2, r7, #4
 806f4b4:	f107 0314 	add.w	r3, r7, #20
 806f4b8:	4611      	mov	r1, r2
 806f4ba:	4618      	mov	r0, r3
 806f4bc:	f001 fa9c 	bl	80709f8 <xTaskCheckForTimeOut>
 806f4c0:	4603      	mov	r3, r0
 806f4c2:	2b00      	cmp	r3, #0
 806f4c4:	d124      	bne.n	806f510 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 806f4c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f4c8:	f000 fcf5 	bl	806feb6 <prvIsQueueFull>
 806f4cc:	4603      	mov	r3, r0
 806f4ce:	2b00      	cmp	r3, #0
 806f4d0:	d018      	beq.n	806f504 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 806f4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f4d4:	3310      	adds	r3, #16
 806f4d6:	687a      	ldr	r2, [r7, #4]
 806f4d8:	4611      	mov	r1, r2
 806f4da:	4618      	mov	r0, r3
 806f4dc:	f001 f9c2 	bl	8070864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 806f4e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f4e2:	f000 fc80 	bl	806fde6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 806f4e6:	f000 fff1 	bl	80704cc <xTaskResumeAll>
 806f4ea:	4603      	mov	r3, r0
 806f4ec:	2b00      	cmp	r3, #0
 806f4ee:	f47f af7c 	bne.w	806f3ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 806f4f2:	4b0c      	ldr	r3, [pc, #48]	; (806f524 <xQueueGenericSend+0x1f8>)
 806f4f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f4f8:	601a      	str	r2, [r3, #0]
 806f4fa:	f3bf 8f4f 	dsb	sy
 806f4fe:	f3bf 8f6f 	isb	sy
 806f502:	e772      	b.n	806f3ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 806f504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f506:	f000 fc6e 	bl	806fde6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806f50a:	f000 ffdf 	bl	80704cc <xTaskResumeAll>
 806f50e:	e76c      	b.n	806f3ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 806f510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f512:	f000 fc68 	bl	806fde6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806f516:	f000 ffd9 	bl	80704cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 806f51a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 806f51c:	4618      	mov	r0, r3
 806f51e:	3738      	adds	r7, #56	; 0x38
 806f520:	46bd      	mov	sp, r7
 806f522:	bd80      	pop	{r7, pc}
 806f524:	e000ed04 	.word	0xe000ed04

0806f528 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 806f528:	b580      	push	{r7, lr}
 806f52a:	b090      	sub	sp, #64	; 0x40
 806f52c:	af00      	add	r7, sp, #0
 806f52e:	60f8      	str	r0, [r7, #12]
 806f530:	60b9      	str	r1, [r7, #8]
 806f532:	607a      	str	r2, [r7, #4]
 806f534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806f536:	68fb      	ldr	r3, [r7, #12]
 806f538:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 806f53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f53c:	2b00      	cmp	r3, #0
 806f53e:	d10a      	bne.n	806f556 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 806f540:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f544:	f383 8811 	msr	BASEPRI, r3
 806f548:	f3bf 8f6f 	isb	sy
 806f54c:	f3bf 8f4f 	dsb	sy
 806f550:	62bb      	str	r3, [r7, #40]	; 0x28
}
 806f552:	bf00      	nop
 806f554:	e7fe      	b.n	806f554 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806f556:	68bb      	ldr	r3, [r7, #8]
 806f558:	2b00      	cmp	r3, #0
 806f55a:	d103      	bne.n	806f564 <xQueueGenericSendFromISR+0x3c>
 806f55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f560:	2b00      	cmp	r3, #0
 806f562:	d101      	bne.n	806f568 <xQueueGenericSendFromISR+0x40>
 806f564:	2301      	movs	r3, #1
 806f566:	e000      	b.n	806f56a <xQueueGenericSendFromISR+0x42>
 806f568:	2300      	movs	r3, #0
 806f56a:	2b00      	cmp	r3, #0
 806f56c:	d10a      	bne.n	806f584 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 806f56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f572:	f383 8811 	msr	BASEPRI, r3
 806f576:	f3bf 8f6f 	isb	sy
 806f57a:	f3bf 8f4f 	dsb	sy
 806f57e:	627b      	str	r3, [r7, #36]	; 0x24
}
 806f580:	bf00      	nop
 806f582:	e7fe      	b.n	806f582 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 806f584:	683b      	ldr	r3, [r7, #0]
 806f586:	2b02      	cmp	r3, #2
 806f588:	d103      	bne.n	806f592 <xQueueGenericSendFromISR+0x6a>
 806f58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f58e:	2b01      	cmp	r3, #1
 806f590:	d101      	bne.n	806f596 <xQueueGenericSendFromISR+0x6e>
 806f592:	2301      	movs	r3, #1
 806f594:	e000      	b.n	806f598 <xQueueGenericSendFromISR+0x70>
 806f596:	2300      	movs	r3, #0
 806f598:	2b00      	cmp	r3, #0
 806f59a:	d10a      	bne.n	806f5b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 806f59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f5a0:	f383 8811 	msr	BASEPRI, r3
 806f5a4:	f3bf 8f6f 	isb	sy
 806f5a8:	f3bf 8f4f 	dsb	sy
 806f5ac:	623b      	str	r3, [r7, #32]
}
 806f5ae:	bf00      	nop
 806f5b0:	e7fe      	b.n	806f5b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806f5b2:	f002 fd71 	bl	8072098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 806f5b6:	f3ef 8211 	mrs	r2, BASEPRI
 806f5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f5be:	f383 8811 	msr	BASEPRI, r3
 806f5c2:	f3bf 8f6f 	isb	sy
 806f5c6:	f3bf 8f4f 	dsb	sy
 806f5ca:	61fa      	str	r2, [r7, #28]
 806f5cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 806f5ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806f5d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 806f5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f5d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806f5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f5da:	429a      	cmp	r2, r3
 806f5dc:	d302      	bcc.n	806f5e4 <xQueueGenericSendFromISR+0xbc>
 806f5de:	683b      	ldr	r3, [r7, #0]
 806f5e0:	2b02      	cmp	r3, #2
 806f5e2:	d12f      	bne.n	806f644 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 806f5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f5e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 806f5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 806f5f4:	683a      	ldr	r2, [r7, #0]
 806f5f6:	68b9      	ldr	r1, [r7, #8]
 806f5f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806f5fa:	f000 fb64 	bl	806fcc6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 806f5fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 806f602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f606:	d112      	bne.n	806f62e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806f608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806f60c:	2b00      	cmp	r3, #0
 806f60e:	d016      	beq.n	806f63e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806f610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f612:	3324      	adds	r3, #36	; 0x24
 806f614:	4618      	mov	r0, r3
 806f616:	f001 f975 	bl	8070904 <xTaskRemoveFromEventList>
 806f61a:	4603      	mov	r3, r0
 806f61c:	2b00      	cmp	r3, #0
 806f61e:	d00e      	beq.n	806f63e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 806f620:	687b      	ldr	r3, [r7, #4]
 806f622:	2b00      	cmp	r3, #0
 806f624:	d00b      	beq.n	806f63e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 806f626:	687b      	ldr	r3, [r7, #4]
 806f628:	2201      	movs	r2, #1
 806f62a:	601a      	str	r2, [r3, #0]
 806f62c:	e007      	b.n	806f63e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 806f62e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 806f632:	3301      	adds	r3, #1
 806f634:	b2db      	uxtb	r3, r3
 806f636:	b25a      	sxtb	r2, r3
 806f638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f63a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 806f63e:	2301      	movs	r3, #1
 806f640:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 806f642:	e001      	b.n	806f648 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 806f644:	2300      	movs	r3, #0
 806f646:	63fb      	str	r3, [r7, #60]	; 0x3c
 806f648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806f64a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 806f64c:	697b      	ldr	r3, [r7, #20]
 806f64e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 806f652:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806f654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 806f656:	4618      	mov	r0, r3
 806f658:	3740      	adds	r7, #64	; 0x40
 806f65a:	46bd      	mov	sp, r7
 806f65c:	bd80      	pop	{r7, pc}

0806f65e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 806f65e:	b580      	push	{r7, lr}
 806f660:	b08e      	sub	sp, #56	; 0x38
 806f662:	af00      	add	r7, sp, #0
 806f664:	6078      	str	r0, [r7, #4]
 806f666:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806f668:	687b      	ldr	r3, [r7, #4]
 806f66a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 806f66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f66e:	2b00      	cmp	r3, #0
 806f670:	d10a      	bne.n	806f688 <xQueueGiveFromISR+0x2a>
	__asm volatile
 806f672:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f676:	f383 8811 	msr	BASEPRI, r3
 806f67a:	f3bf 8f6f 	isb	sy
 806f67e:	f3bf 8f4f 	dsb	sy
 806f682:	623b      	str	r3, [r7, #32]
}
 806f684:	bf00      	nop
 806f686:	e7fe      	b.n	806f686 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 806f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f68c:	2b00      	cmp	r3, #0
 806f68e:	d00a      	beq.n	806f6a6 <xQueueGiveFromISR+0x48>
	__asm volatile
 806f690:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f694:	f383 8811 	msr	BASEPRI, r3
 806f698:	f3bf 8f6f 	isb	sy
 806f69c:	f3bf 8f4f 	dsb	sy
 806f6a0:	61fb      	str	r3, [r7, #28]
}
 806f6a2:	bf00      	nop
 806f6a4:	e7fe      	b.n	806f6a4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 806f6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f6a8:	681b      	ldr	r3, [r3, #0]
 806f6aa:	2b00      	cmp	r3, #0
 806f6ac:	d103      	bne.n	806f6b6 <xQueueGiveFromISR+0x58>
 806f6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f6b0:	689b      	ldr	r3, [r3, #8]
 806f6b2:	2b00      	cmp	r3, #0
 806f6b4:	d101      	bne.n	806f6ba <xQueueGiveFromISR+0x5c>
 806f6b6:	2301      	movs	r3, #1
 806f6b8:	e000      	b.n	806f6bc <xQueueGiveFromISR+0x5e>
 806f6ba:	2300      	movs	r3, #0
 806f6bc:	2b00      	cmp	r3, #0
 806f6be:	d10a      	bne.n	806f6d6 <xQueueGiveFromISR+0x78>
	__asm volatile
 806f6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f6c4:	f383 8811 	msr	BASEPRI, r3
 806f6c8:	f3bf 8f6f 	isb	sy
 806f6cc:	f3bf 8f4f 	dsb	sy
 806f6d0:	61bb      	str	r3, [r7, #24]
}
 806f6d2:	bf00      	nop
 806f6d4:	e7fe      	b.n	806f6d4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806f6d6:	f002 fcdf 	bl	8072098 <vPortValidateInterruptPriority>
	__asm volatile
 806f6da:	f3ef 8211 	mrs	r2, BASEPRI
 806f6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f6e2:	f383 8811 	msr	BASEPRI, r3
 806f6e6:	f3bf 8f6f 	isb	sy
 806f6ea:	f3bf 8f4f 	dsb	sy
 806f6ee:	617a      	str	r2, [r7, #20]
 806f6f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 806f6f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806f6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806f6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f6fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 806f6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806f702:	429a      	cmp	r2, r3
 806f704:	d22b      	bcs.n	806f75e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 806f706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 806f710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f712:	1c5a      	adds	r2, r3, #1
 806f714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f716:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 806f718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 806f71c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f720:	d112      	bne.n	806f748 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806f726:	2b00      	cmp	r3, #0
 806f728:	d016      	beq.n	806f758 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806f72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f72c:	3324      	adds	r3, #36	; 0x24
 806f72e:	4618      	mov	r0, r3
 806f730:	f001 f8e8 	bl	8070904 <xTaskRemoveFromEventList>
 806f734:	4603      	mov	r3, r0
 806f736:	2b00      	cmp	r3, #0
 806f738:	d00e      	beq.n	806f758 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 806f73a:	683b      	ldr	r3, [r7, #0]
 806f73c:	2b00      	cmp	r3, #0
 806f73e:	d00b      	beq.n	806f758 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 806f740:	683b      	ldr	r3, [r7, #0]
 806f742:	2201      	movs	r2, #1
 806f744:	601a      	str	r2, [r3, #0]
 806f746:	e007      	b.n	806f758 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 806f748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 806f74c:	3301      	adds	r3, #1
 806f74e:	b2db      	uxtb	r3, r3
 806f750:	b25a      	sxtb	r2, r3
 806f752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 806f758:	2301      	movs	r3, #1
 806f75a:	637b      	str	r3, [r7, #52]	; 0x34
 806f75c:	e001      	b.n	806f762 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 806f75e:	2300      	movs	r3, #0
 806f760:	637b      	str	r3, [r7, #52]	; 0x34
 806f762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f764:	60fb      	str	r3, [r7, #12]
	__asm volatile
 806f766:	68fb      	ldr	r3, [r7, #12]
 806f768:	f383 8811 	msr	BASEPRI, r3
}
 806f76c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806f76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 806f770:	4618      	mov	r0, r3
 806f772:	3738      	adds	r7, #56	; 0x38
 806f774:	46bd      	mov	sp, r7
 806f776:	bd80      	pop	{r7, pc}

0806f778 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 806f778:	b580      	push	{r7, lr}
 806f77a:	b08c      	sub	sp, #48	; 0x30
 806f77c:	af00      	add	r7, sp, #0
 806f77e:	60f8      	str	r0, [r7, #12]
 806f780:	60b9      	str	r1, [r7, #8]
 806f782:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 806f784:	2300      	movs	r3, #0
 806f786:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806f788:	68fb      	ldr	r3, [r7, #12]
 806f78a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 806f78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f78e:	2b00      	cmp	r3, #0
 806f790:	d10a      	bne.n	806f7a8 <xQueueReceive+0x30>
	__asm volatile
 806f792:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f796:	f383 8811 	msr	BASEPRI, r3
 806f79a:	f3bf 8f6f 	isb	sy
 806f79e:	f3bf 8f4f 	dsb	sy
 806f7a2:	623b      	str	r3, [r7, #32]
}
 806f7a4:	bf00      	nop
 806f7a6:	e7fe      	b.n	806f7a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806f7a8:	68bb      	ldr	r3, [r7, #8]
 806f7aa:	2b00      	cmp	r3, #0
 806f7ac:	d103      	bne.n	806f7b6 <xQueueReceive+0x3e>
 806f7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f7b2:	2b00      	cmp	r3, #0
 806f7b4:	d101      	bne.n	806f7ba <xQueueReceive+0x42>
 806f7b6:	2301      	movs	r3, #1
 806f7b8:	e000      	b.n	806f7bc <xQueueReceive+0x44>
 806f7ba:	2300      	movs	r3, #0
 806f7bc:	2b00      	cmp	r3, #0
 806f7be:	d10a      	bne.n	806f7d6 <xQueueReceive+0x5e>
	__asm volatile
 806f7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f7c4:	f383 8811 	msr	BASEPRI, r3
 806f7c8:	f3bf 8f6f 	isb	sy
 806f7cc:	f3bf 8f4f 	dsb	sy
 806f7d0:	61fb      	str	r3, [r7, #28]
}
 806f7d2:	bf00      	nop
 806f7d4:	e7fe      	b.n	806f7d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806f7d6:	f001 fa67 	bl	8070ca8 <xTaskGetSchedulerState>
 806f7da:	4603      	mov	r3, r0
 806f7dc:	2b00      	cmp	r3, #0
 806f7de:	d102      	bne.n	806f7e6 <xQueueReceive+0x6e>
 806f7e0:	687b      	ldr	r3, [r7, #4]
 806f7e2:	2b00      	cmp	r3, #0
 806f7e4:	d101      	bne.n	806f7ea <xQueueReceive+0x72>
 806f7e6:	2301      	movs	r3, #1
 806f7e8:	e000      	b.n	806f7ec <xQueueReceive+0x74>
 806f7ea:	2300      	movs	r3, #0
 806f7ec:	2b00      	cmp	r3, #0
 806f7ee:	d10a      	bne.n	806f806 <xQueueReceive+0x8e>
	__asm volatile
 806f7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f7f4:	f383 8811 	msr	BASEPRI, r3
 806f7f8:	f3bf 8f6f 	isb	sy
 806f7fc:	f3bf 8f4f 	dsb	sy
 806f800:	61bb      	str	r3, [r7, #24]
}
 806f802:	bf00      	nop
 806f804:	e7fe      	b.n	806f804 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806f806:	f002 fb65 	bl	8071ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806f80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f80e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806f812:	2b00      	cmp	r3, #0
 806f814:	d01f      	beq.n	806f856 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 806f816:	68b9      	ldr	r1, [r7, #8]
 806f818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f81a:	f000 fabe 	bl	806fd9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 806f81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806f820:	1e5a      	subs	r2, r3, #1
 806f822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f824:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806f826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f828:	691b      	ldr	r3, [r3, #16]
 806f82a:	2b00      	cmp	r3, #0
 806f82c:	d00f      	beq.n	806f84e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806f82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f830:	3310      	adds	r3, #16
 806f832:	4618      	mov	r0, r3
 806f834:	f001 f866 	bl	8070904 <xTaskRemoveFromEventList>
 806f838:	4603      	mov	r3, r0
 806f83a:	2b00      	cmp	r3, #0
 806f83c:	d007      	beq.n	806f84e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 806f83e:	4b3d      	ldr	r3, [pc, #244]	; (806f934 <xQueueReceive+0x1bc>)
 806f840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f844:	601a      	str	r2, [r3, #0]
 806f846:	f3bf 8f4f 	dsb	sy
 806f84a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 806f84e:	f002 fb71 	bl	8071f34 <vPortExitCritical>
				return pdPASS;
 806f852:	2301      	movs	r3, #1
 806f854:	e069      	b.n	806f92a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806f856:	687b      	ldr	r3, [r7, #4]
 806f858:	2b00      	cmp	r3, #0
 806f85a:	d103      	bne.n	806f864 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 806f85c:	f002 fb6a 	bl	8071f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 806f860:	2300      	movs	r3, #0
 806f862:	e062      	b.n	806f92a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 806f864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f866:	2b00      	cmp	r3, #0
 806f868:	d106      	bne.n	806f878 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806f86a:	f107 0310 	add.w	r3, r7, #16
 806f86e:	4618      	mov	r0, r3
 806f870:	f001 f8ac 	bl	80709cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806f874:	2301      	movs	r3, #1
 806f876:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806f878:	f002 fb5c 	bl	8071f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 806f87c:	f000 fe18 	bl	80704b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806f880:	f002 fb28 	bl	8071ed4 <vPortEnterCritical>
 806f884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806f88a:	b25b      	sxtb	r3, r3
 806f88c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f890:	d103      	bne.n	806f89a <xQueueReceive+0x122>
 806f892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f894:	2200      	movs	r2, #0
 806f896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806f89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f89c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f8a0:	b25b      	sxtb	r3, r3
 806f8a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f8a6:	d103      	bne.n	806f8b0 <xQueueReceive+0x138>
 806f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f8aa:	2200      	movs	r2, #0
 806f8ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806f8b0:	f002 fb40 	bl	8071f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806f8b4:	1d3a      	adds	r2, r7, #4
 806f8b6:	f107 0310 	add.w	r3, r7, #16
 806f8ba:	4611      	mov	r1, r2
 806f8bc:	4618      	mov	r0, r3
 806f8be:	f001 f89b 	bl	80709f8 <xTaskCheckForTimeOut>
 806f8c2:	4603      	mov	r3, r0
 806f8c4:	2b00      	cmp	r3, #0
 806f8c6:	d123      	bne.n	806f910 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f8c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f8ca:	f000 fade 	bl	806fe8a <prvIsQueueEmpty>
 806f8ce:	4603      	mov	r3, r0
 806f8d0:	2b00      	cmp	r3, #0
 806f8d2:	d017      	beq.n	806f904 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 806f8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f8d6:	3324      	adds	r3, #36	; 0x24
 806f8d8:	687a      	ldr	r2, [r7, #4]
 806f8da:	4611      	mov	r1, r2
 806f8dc:	4618      	mov	r0, r3
 806f8de:	f000 ffc1 	bl	8070864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 806f8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f8e4:	f000 fa7f 	bl	806fde6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 806f8e8:	f000 fdf0 	bl	80704cc <xTaskResumeAll>
 806f8ec:	4603      	mov	r3, r0
 806f8ee:	2b00      	cmp	r3, #0
 806f8f0:	d189      	bne.n	806f806 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 806f8f2:	4b10      	ldr	r3, [pc, #64]	; (806f934 <xQueueReceive+0x1bc>)
 806f8f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f8f8:	601a      	str	r2, [r3, #0]
 806f8fa:	f3bf 8f4f 	dsb	sy
 806f8fe:	f3bf 8f6f 	isb	sy
 806f902:	e780      	b.n	806f806 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 806f904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f906:	f000 fa6e 	bl	806fde6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806f90a:	f000 fddf 	bl	80704cc <xTaskResumeAll>
 806f90e:	e77a      	b.n	806f806 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 806f910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f912:	f000 fa68 	bl	806fde6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806f916:	f000 fdd9 	bl	80704cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f91a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f91c:	f000 fab5 	bl	806fe8a <prvIsQueueEmpty>
 806f920:	4603      	mov	r3, r0
 806f922:	2b00      	cmp	r3, #0
 806f924:	f43f af6f 	beq.w	806f806 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 806f928:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 806f92a:	4618      	mov	r0, r3
 806f92c:	3730      	adds	r7, #48	; 0x30
 806f92e:	46bd      	mov	sp, r7
 806f930:	bd80      	pop	{r7, pc}
 806f932:	bf00      	nop
 806f934:	e000ed04 	.word	0xe000ed04

0806f938 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 806f938:	b580      	push	{r7, lr}
 806f93a:	b08e      	sub	sp, #56	; 0x38
 806f93c:	af00      	add	r7, sp, #0
 806f93e:	6078      	str	r0, [r7, #4]
 806f940:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 806f942:	2300      	movs	r3, #0
 806f944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806f946:	687b      	ldr	r3, [r7, #4]
 806f948:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 806f94a:	2300      	movs	r3, #0
 806f94c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 806f94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f950:	2b00      	cmp	r3, #0
 806f952:	d10a      	bne.n	806f96a <xQueueSemaphoreTake+0x32>
	__asm volatile
 806f954:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f958:	f383 8811 	msr	BASEPRI, r3
 806f95c:	f3bf 8f6f 	isb	sy
 806f960:	f3bf 8f4f 	dsb	sy
 806f964:	623b      	str	r3, [r7, #32]
}
 806f966:	bf00      	nop
 806f968:	e7fe      	b.n	806f968 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 806f96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f96e:	2b00      	cmp	r3, #0
 806f970:	d00a      	beq.n	806f988 <xQueueSemaphoreTake+0x50>
	__asm volatile
 806f972:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f976:	f383 8811 	msr	BASEPRI, r3
 806f97a:	f3bf 8f6f 	isb	sy
 806f97e:	f3bf 8f4f 	dsb	sy
 806f982:	61fb      	str	r3, [r7, #28]
}
 806f984:	bf00      	nop
 806f986:	e7fe      	b.n	806f986 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806f988:	f001 f98e 	bl	8070ca8 <xTaskGetSchedulerState>
 806f98c:	4603      	mov	r3, r0
 806f98e:	2b00      	cmp	r3, #0
 806f990:	d102      	bne.n	806f998 <xQueueSemaphoreTake+0x60>
 806f992:	683b      	ldr	r3, [r7, #0]
 806f994:	2b00      	cmp	r3, #0
 806f996:	d101      	bne.n	806f99c <xQueueSemaphoreTake+0x64>
 806f998:	2301      	movs	r3, #1
 806f99a:	e000      	b.n	806f99e <xQueueSemaphoreTake+0x66>
 806f99c:	2300      	movs	r3, #0
 806f99e:	2b00      	cmp	r3, #0
 806f9a0:	d10a      	bne.n	806f9b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 806f9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f9a6:	f383 8811 	msr	BASEPRI, r3
 806f9aa:	f3bf 8f6f 	isb	sy
 806f9ae:	f3bf 8f4f 	dsb	sy
 806f9b2:	61bb      	str	r3, [r7, #24]
}
 806f9b4:	bf00      	nop
 806f9b6:	e7fe      	b.n	806f9b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806f9b8:	f002 fa8c 	bl	8071ed4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 806f9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f9c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 806f9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f9c4:	2b00      	cmp	r3, #0
 806f9c6:	d024      	beq.n	806fa12 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 806f9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f9ca:	1e5a      	subs	r2, r3, #1
 806f9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f9ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806f9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f9d2:	681b      	ldr	r3, [r3, #0]
 806f9d4:	2b00      	cmp	r3, #0
 806f9d6:	d104      	bne.n	806f9e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 806f9d8:	f001 fadc 	bl	8070f94 <pvTaskIncrementMutexHeldCount>
 806f9dc:	4602      	mov	r2, r0
 806f9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f9e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806f9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f9e4:	691b      	ldr	r3, [r3, #16]
 806f9e6:	2b00      	cmp	r3, #0
 806f9e8:	d00f      	beq.n	806fa0a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806f9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f9ec:	3310      	adds	r3, #16
 806f9ee:	4618      	mov	r0, r3
 806f9f0:	f000 ff88 	bl	8070904 <xTaskRemoveFromEventList>
 806f9f4:	4603      	mov	r3, r0
 806f9f6:	2b00      	cmp	r3, #0
 806f9f8:	d007      	beq.n	806fa0a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 806f9fa:	4b54      	ldr	r3, [pc, #336]	; (806fb4c <xQueueSemaphoreTake+0x214>)
 806f9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806fa00:	601a      	str	r2, [r3, #0]
 806fa02:	f3bf 8f4f 	dsb	sy
 806fa06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 806fa0a:	f002 fa93 	bl	8071f34 <vPortExitCritical>
				return pdPASS;
 806fa0e:	2301      	movs	r3, #1
 806fa10:	e097      	b.n	806fb42 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806fa12:	683b      	ldr	r3, [r7, #0]
 806fa14:	2b00      	cmp	r3, #0
 806fa16:	d111      	bne.n	806fa3c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 806fa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fa1a:	2b00      	cmp	r3, #0
 806fa1c:	d00a      	beq.n	806fa34 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 806fa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fa22:	f383 8811 	msr	BASEPRI, r3
 806fa26:	f3bf 8f6f 	isb	sy
 806fa2a:	f3bf 8f4f 	dsb	sy
 806fa2e:	617b      	str	r3, [r7, #20]
}
 806fa30:	bf00      	nop
 806fa32:	e7fe      	b.n	806fa32 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 806fa34:	f002 fa7e 	bl	8071f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 806fa38:	2300      	movs	r3, #0
 806fa3a:	e082      	b.n	806fb42 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 806fa3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806fa3e:	2b00      	cmp	r3, #0
 806fa40:	d106      	bne.n	806fa50 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806fa42:	f107 030c 	add.w	r3, r7, #12
 806fa46:	4618      	mov	r0, r3
 806fa48:	f000 ffc0 	bl	80709cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806fa4c:	2301      	movs	r3, #1
 806fa4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806fa50:	f002 fa70 	bl	8071f34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 806fa54:	f000 fd2c 	bl	80704b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806fa58:	f002 fa3c 	bl	8071ed4 <vPortEnterCritical>
 806fa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806fa5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806fa62:	b25b      	sxtb	r3, r3
 806fa64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806fa68:	d103      	bne.n	806fa72 <xQueueSemaphoreTake+0x13a>
 806fa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806fa6c:	2200      	movs	r2, #0
 806fa6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806fa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806fa74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806fa78:	b25b      	sxtb	r3, r3
 806fa7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806fa7e:	d103      	bne.n	806fa88 <xQueueSemaphoreTake+0x150>
 806fa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806fa82:	2200      	movs	r2, #0
 806fa84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806fa88:	f002 fa54 	bl	8071f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806fa8c:	463a      	mov	r2, r7
 806fa8e:	f107 030c 	add.w	r3, r7, #12
 806fa92:	4611      	mov	r1, r2
 806fa94:	4618      	mov	r0, r3
 806fa96:	f000 ffaf 	bl	80709f8 <xTaskCheckForTimeOut>
 806fa9a:	4603      	mov	r3, r0
 806fa9c:	2b00      	cmp	r3, #0
 806fa9e:	d132      	bne.n	806fb06 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806faa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806faa2:	f000 f9f2 	bl	806fe8a <prvIsQueueEmpty>
 806faa6:	4603      	mov	r3, r0
 806faa8:	2b00      	cmp	r3, #0
 806faaa:	d026      	beq.n	806fafa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806faac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806faae:	681b      	ldr	r3, [r3, #0]
 806fab0:	2b00      	cmp	r3, #0
 806fab2:	d109      	bne.n	806fac8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 806fab4:	f002 fa0e 	bl	8071ed4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 806fab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806faba:	689b      	ldr	r3, [r3, #8]
 806fabc:	4618      	mov	r0, r3
 806fabe:	f001 f911 	bl	8070ce4 <xTaskPriorityInherit>
 806fac2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 806fac4:	f002 fa36 	bl	8071f34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 806fac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806faca:	3324      	adds	r3, #36	; 0x24
 806facc:	683a      	ldr	r2, [r7, #0]
 806face:	4611      	mov	r1, r2
 806fad0:	4618      	mov	r0, r3
 806fad2:	f000 fec7 	bl	8070864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 806fad6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806fad8:	f000 f985 	bl	806fde6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 806fadc:	f000 fcf6 	bl	80704cc <xTaskResumeAll>
 806fae0:	4603      	mov	r3, r0
 806fae2:	2b00      	cmp	r3, #0
 806fae4:	f47f af68 	bne.w	806f9b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 806fae8:	4b18      	ldr	r3, [pc, #96]	; (806fb4c <xQueueSemaphoreTake+0x214>)
 806faea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806faee:	601a      	str	r2, [r3, #0]
 806faf0:	f3bf 8f4f 	dsb	sy
 806faf4:	f3bf 8f6f 	isb	sy
 806faf8:	e75e      	b.n	806f9b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 806fafa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806fafc:	f000 f973 	bl	806fde6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806fb00:	f000 fce4 	bl	80704cc <xTaskResumeAll>
 806fb04:	e758      	b.n	806f9b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 806fb06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806fb08:	f000 f96d 	bl	806fde6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806fb0c:	f000 fcde 	bl	80704cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806fb10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806fb12:	f000 f9ba 	bl	806fe8a <prvIsQueueEmpty>
 806fb16:	4603      	mov	r3, r0
 806fb18:	2b00      	cmp	r3, #0
 806fb1a:	f43f af4d 	beq.w	806f9b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 806fb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fb20:	2b00      	cmp	r3, #0
 806fb22:	d00d      	beq.n	806fb40 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 806fb24:	f002 f9d6 	bl	8071ed4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 806fb28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806fb2a:	f000 f8b4 	bl	806fc96 <prvGetDisinheritPriorityAfterTimeout>
 806fb2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 806fb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806fb32:	689b      	ldr	r3, [r3, #8]
 806fb34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806fb36:	4618      	mov	r0, r3
 806fb38:	f001 f9aa 	bl	8070e90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 806fb3c:	f002 f9fa 	bl	8071f34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 806fb40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 806fb42:	4618      	mov	r0, r3
 806fb44:	3738      	adds	r7, #56	; 0x38
 806fb46:	46bd      	mov	sp, r7
 806fb48:	bd80      	pop	{r7, pc}
 806fb4a:	bf00      	nop
 806fb4c:	e000ed04 	.word	0xe000ed04

0806fb50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 806fb50:	b580      	push	{r7, lr}
 806fb52:	b08e      	sub	sp, #56	; 0x38
 806fb54:	af00      	add	r7, sp, #0
 806fb56:	60f8      	str	r0, [r7, #12]
 806fb58:	60b9      	str	r1, [r7, #8]
 806fb5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806fb5c:	68fb      	ldr	r3, [r7, #12]
 806fb5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 806fb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fb62:	2b00      	cmp	r3, #0
 806fb64:	d10a      	bne.n	806fb7c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 806fb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fb6a:	f383 8811 	msr	BASEPRI, r3
 806fb6e:	f3bf 8f6f 	isb	sy
 806fb72:	f3bf 8f4f 	dsb	sy
 806fb76:	623b      	str	r3, [r7, #32]
}
 806fb78:	bf00      	nop
 806fb7a:	e7fe      	b.n	806fb7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806fb7c:	68bb      	ldr	r3, [r7, #8]
 806fb7e:	2b00      	cmp	r3, #0
 806fb80:	d103      	bne.n	806fb8a <xQueueReceiveFromISR+0x3a>
 806fb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fb86:	2b00      	cmp	r3, #0
 806fb88:	d101      	bne.n	806fb8e <xQueueReceiveFromISR+0x3e>
 806fb8a:	2301      	movs	r3, #1
 806fb8c:	e000      	b.n	806fb90 <xQueueReceiveFromISR+0x40>
 806fb8e:	2300      	movs	r3, #0
 806fb90:	2b00      	cmp	r3, #0
 806fb92:	d10a      	bne.n	806fbaa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 806fb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fb98:	f383 8811 	msr	BASEPRI, r3
 806fb9c:	f3bf 8f6f 	isb	sy
 806fba0:	f3bf 8f4f 	dsb	sy
 806fba4:	61fb      	str	r3, [r7, #28]
}
 806fba6:	bf00      	nop
 806fba8:	e7fe      	b.n	806fba8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806fbaa:	f002 fa75 	bl	8072098 <vPortValidateInterruptPriority>
	__asm volatile
 806fbae:	f3ef 8211 	mrs	r2, BASEPRI
 806fbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fbb6:	f383 8811 	msr	BASEPRI, r3
 806fbba:	f3bf 8f6f 	isb	sy
 806fbbe:	f3bf 8f4f 	dsb	sy
 806fbc2:	61ba      	str	r2, [r7, #24]
 806fbc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 806fbc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806fbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806fbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806fbce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806fbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806fbd2:	2b00      	cmp	r3, #0
 806fbd4:	d02f      	beq.n	806fc36 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 806fbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fbd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806fbdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 806fbe0:	68b9      	ldr	r1, [r7, #8]
 806fbe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806fbe4:	f000 f8d9 	bl	806fd9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 806fbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806fbea:	1e5a      	subs	r2, r3, #1
 806fbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fbee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 806fbf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 806fbf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806fbf8:	d112      	bne.n	806fc20 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fbfc:	691b      	ldr	r3, [r3, #16]
 806fbfe:	2b00      	cmp	r3, #0
 806fc00:	d016      	beq.n	806fc30 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806fc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fc04:	3310      	adds	r3, #16
 806fc06:	4618      	mov	r0, r3
 806fc08:	f000 fe7c 	bl	8070904 <xTaskRemoveFromEventList>
 806fc0c:	4603      	mov	r3, r0
 806fc0e:	2b00      	cmp	r3, #0
 806fc10:	d00e      	beq.n	806fc30 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 806fc12:	687b      	ldr	r3, [r7, #4]
 806fc14:	2b00      	cmp	r3, #0
 806fc16:	d00b      	beq.n	806fc30 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 806fc18:	687b      	ldr	r3, [r7, #4]
 806fc1a:	2201      	movs	r2, #1
 806fc1c:	601a      	str	r2, [r3, #0]
 806fc1e:	e007      	b.n	806fc30 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 806fc20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 806fc24:	3301      	adds	r3, #1
 806fc26:	b2db      	uxtb	r3, r3
 806fc28:	b25a      	sxtb	r2, r3
 806fc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fc2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 806fc30:	2301      	movs	r3, #1
 806fc32:	637b      	str	r3, [r7, #52]	; 0x34
 806fc34:	e001      	b.n	806fc3a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 806fc36:	2300      	movs	r3, #0
 806fc38:	637b      	str	r3, [r7, #52]	; 0x34
 806fc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806fc3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 806fc3e:	693b      	ldr	r3, [r7, #16]
 806fc40:	f383 8811 	msr	BASEPRI, r3
}
 806fc44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806fc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 806fc48:	4618      	mov	r0, r3
 806fc4a:	3738      	adds	r7, #56	; 0x38
 806fc4c:	46bd      	mov	sp, r7
 806fc4e:	bd80      	pop	{r7, pc}

0806fc50 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 806fc50:	b580      	push	{r7, lr}
 806fc52:	b084      	sub	sp, #16
 806fc54:	af00      	add	r7, sp, #0
 806fc56:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 806fc58:	687b      	ldr	r3, [r7, #4]
 806fc5a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 806fc5c:	68fb      	ldr	r3, [r7, #12]
 806fc5e:	2b00      	cmp	r3, #0
 806fc60:	d10a      	bne.n	806fc78 <vQueueDelete+0x28>
	__asm volatile
 806fc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fc66:	f383 8811 	msr	BASEPRI, r3
 806fc6a:	f3bf 8f6f 	isb	sy
 806fc6e:	f3bf 8f4f 	dsb	sy
 806fc72:	60bb      	str	r3, [r7, #8]
}
 806fc74:	bf00      	nop
 806fc76:	e7fe      	b.n	806fc76 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 806fc78:	68f8      	ldr	r0, [r7, #12]
 806fc7a:	f000 f95f 	bl	806ff3c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 806fc7e:	68fb      	ldr	r3, [r7, #12]
 806fc80:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 806fc84:	2b00      	cmp	r3, #0
 806fc86:	d102      	bne.n	806fc8e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 806fc88:	68f8      	ldr	r0, [r7, #12]
 806fc8a:	f002 fb11 	bl	80722b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 806fc8e:	bf00      	nop
 806fc90:	3710      	adds	r7, #16
 806fc92:	46bd      	mov	sp, r7
 806fc94:	bd80      	pop	{r7, pc}

0806fc96 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 806fc96:	b480      	push	{r7}
 806fc98:	b085      	sub	sp, #20
 806fc9a:	af00      	add	r7, sp, #0
 806fc9c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 806fc9e:	687b      	ldr	r3, [r7, #4]
 806fca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806fca2:	2b00      	cmp	r3, #0
 806fca4:	d006      	beq.n	806fcb4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 806fca6:	687b      	ldr	r3, [r7, #4]
 806fca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806fcaa:	681b      	ldr	r3, [r3, #0]
 806fcac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 806fcb0:	60fb      	str	r3, [r7, #12]
 806fcb2:	e001      	b.n	806fcb8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 806fcb4:	2300      	movs	r3, #0
 806fcb6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 806fcb8:	68fb      	ldr	r3, [r7, #12]
	}
 806fcba:	4618      	mov	r0, r3
 806fcbc:	3714      	adds	r7, #20
 806fcbe:	46bd      	mov	sp, r7
 806fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 806fcc4:	4770      	bx	lr

0806fcc6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 806fcc6:	b580      	push	{r7, lr}
 806fcc8:	b086      	sub	sp, #24
 806fcca:	af00      	add	r7, sp, #0
 806fccc:	60f8      	str	r0, [r7, #12]
 806fcce:	60b9      	str	r1, [r7, #8]
 806fcd0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 806fcd2:	2300      	movs	r3, #0
 806fcd4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806fcd6:	68fb      	ldr	r3, [r7, #12]
 806fcd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806fcda:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 806fcdc:	68fb      	ldr	r3, [r7, #12]
 806fcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fce0:	2b00      	cmp	r3, #0
 806fce2:	d10d      	bne.n	806fd00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806fce4:	68fb      	ldr	r3, [r7, #12]
 806fce6:	681b      	ldr	r3, [r3, #0]
 806fce8:	2b00      	cmp	r3, #0
 806fcea:	d14d      	bne.n	806fd88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 806fcec:	68fb      	ldr	r3, [r7, #12]
 806fcee:	689b      	ldr	r3, [r3, #8]
 806fcf0:	4618      	mov	r0, r3
 806fcf2:	f001 f85f 	bl	8070db4 <xTaskPriorityDisinherit>
 806fcf6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 806fcf8:	68fb      	ldr	r3, [r7, #12]
 806fcfa:	2200      	movs	r2, #0
 806fcfc:	609a      	str	r2, [r3, #8]
 806fcfe:	e043      	b.n	806fd88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 806fd00:	687b      	ldr	r3, [r7, #4]
 806fd02:	2b00      	cmp	r3, #0
 806fd04:	d119      	bne.n	806fd3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 806fd06:	68fb      	ldr	r3, [r7, #12]
 806fd08:	6858      	ldr	r0, [r3, #4]
 806fd0a:	68fb      	ldr	r3, [r7, #12]
 806fd0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fd0e:	461a      	mov	r2, r3
 806fd10:	68b9      	ldr	r1, [r7, #8]
 806fd12:	f002 fd0e 	bl	8072732 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 806fd16:	68fb      	ldr	r3, [r7, #12]
 806fd18:	685a      	ldr	r2, [r3, #4]
 806fd1a:	68fb      	ldr	r3, [r7, #12]
 806fd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fd1e:	441a      	add	r2, r3
 806fd20:	68fb      	ldr	r3, [r7, #12]
 806fd22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 806fd24:	68fb      	ldr	r3, [r7, #12]
 806fd26:	685a      	ldr	r2, [r3, #4]
 806fd28:	68fb      	ldr	r3, [r7, #12]
 806fd2a:	689b      	ldr	r3, [r3, #8]
 806fd2c:	429a      	cmp	r2, r3
 806fd2e:	d32b      	bcc.n	806fd88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 806fd30:	68fb      	ldr	r3, [r7, #12]
 806fd32:	681a      	ldr	r2, [r3, #0]
 806fd34:	68fb      	ldr	r3, [r7, #12]
 806fd36:	605a      	str	r2, [r3, #4]
 806fd38:	e026      	b.n	806fd88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 806fd3a:	68fb      	ldr	r3, [r7, #12]
 806fd3c:	68d8      	ldr	r0, [r3, #12]
 806fd3e:	68fb      	ldr	r3, [r7, #12]
 806fd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fd42:	461a      	mov	r2, r3
 806fd44:	68b9      	ldr	r1, [r7, #8]
 806fd46:	f002 fcf4 	bl	8072732 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 806fd4a:	68fb      	ldr	r3, [r7, #12]
 806fd4c:	68da      	ldr	r2, [r3, #12]
 806fd4e:	68fb      	ldr	r3, [r7, #12]
 806fd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fd52:	425b      	negs	r3, r3
 806fd54:	441a      	add	r2, r3
 806fd56:	68fb      	ldr	r3, [r7, #12]
 806fd58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 806fd5a:	68fb      	ldr	r3, [r7, #12]
 806fd5c:	68da      	ldr	r2, [r3, #12]
 806fd5e:	68fb      	ldr	r3, [r7, #12]
 806fd60:	681b      	ldr	r3, [r3, #0]
 806fd62:	429a      	cmp	r2, r3
 806fd64:	d207      	bcs.n	806fd76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 806fd66:	68fb      	ldr	r3, [r7, #12]
 806fd68:	689a      	ldr	r2, [r3, #8]
 806fd6a:	68fb      	ldr	r3, [r7, #12]
 806fd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fd6e:	425b      	negs	r3, r3
 806fd70:	441a      	add	r2, r3
 806fd72:	68fb      	ldr	r3, [r7, #12]
 806fd74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 806fd76:	687b      	ldr	r3, [r7, #4]
 806fd78:	2b02      	cmp	r3, #2
 806fd7a:	d105      	bne.n	806fd88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806fd7c:	693b      	ldr	r3, [r7, #16]
 806fd7e:	2b00      	cmp	r3, #0
 806fd80:	d002      	beq.n	806fd88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 806fd82:	693b      	ldr	r3, [r7, #16]
 806fd84:	3b01      	subs	r3, #1
 806fd86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 806fd88:	693b      	ldr	r3, [r7, #16]
 806fd8a:	1c5a      	adds	r2, r3, #1
 806fd8c:	68fb      	ldr	r3, [r7, #12]
 806fd8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 806fd90:	697b      	ldr	r3, [r7, #20]
}
 806fd92:	4618      	mov	r0, r3
 806fd94:	3718      	adds	r7, #24
 806fd96:	46bd      	mov	sp, r7
 806fd98:	bd80      	pop	{r7, pc}

0806fd9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 806fd9a:	b580      	push	{r7, lr}
 806fd9c:	b082      	sub	sp, #8
 806fd9e:	af00      	add	r7, sp, #0
 806fda0:	6078      	str	r0, [r7, #4]
 806fda2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 806fda4:	687b      	ldr	r3, [r7, #4]
 806fda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fda8:	2b00      	cmp	r3, #0
 806fdaa:	d018      	beq.n	806fdde <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 806fdac:	687b      	ldr	r3, [r7, #4]
 806fdae:	68da      	ldr	r2, [r3, #12]
 806fdb0:	687b      	ldr	r3, [r7, #4]
 806fdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fdb4:	441a      	add	r2, r3
 806fdb6:	687b      	ldr	r3, [r7, #4]
 806fdb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 806fdba:	687b      	ldr	r3, [r7, #4]
 806fdbc:	68da      	ldr	r2, [r3, #12]
 806fdbe:	687b      	ldr	r3, [r7, #4]
 806fdc0:	689b      	ldr	r3, [r3, #8]
 806fdc2:	429a      	cmp	r2, r3
 806fdc4:	d303      	bcc.n	806fdce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 806fdc6:	687b      	ldr	r3, [r7, #4]
 806fdc8:	681a      	ldr	r2, [r3, #0]
 806fdca:	687b      	ldr	r3, [r7, #4]
 806fdcc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 806fdce:	687b      	ldr	r3, [r7, #4]
 806fdd0:	68d9      	ldr	r1, [r3, #12]
 806fdd2:	687b      	ldr	r3, [r7, #4]
 806fdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fdd6:	461a      	mov	r2, r3
 806fdd8:	6838      	ldr	r0, [r7, #0]
 806fdda:	f002 fcaa 	bl	8072732 <memcpy>
	}
}
 806fdde:	bf00      	nop
 806fde0:	3708      	adds	r7, #8
 806fde2:	46bd      	mov	sp, r7
 806fde4:	bd80      	pop	{r7, pc}

0806fde6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 806fde6:	b580      	push	{r7, lr}
 806fde8:	b084      	sub	sp, #16
 806fdea:	af00      	add	r7, sp, #0
 806fdec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 806fdee:	f002 f871 	bl	8071ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 806fdf2:	687b      	ldr	r3, [r7, #4]
 806fdf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806fdf8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 806fdfa:	e011      	b.n	806fe20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806fdfc:	687b      	ldr	r3, [r7, #4]
 806fdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806fe00:	2b00      	cmp	r3, #0
 806fe02:	d012      	beq.n	806fe2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806fe04:	687b      	ldr	r3, [r7, #4]
 806fe06:	3324      	adds	r3, #36	; 0x24
 806fe08:	4618      	mov	r0, r3
 806fe0a:	f000 fd7b 	bl	8070904 <xTaskRemoveFromEventList>
 806fe0e:	4603      	mov	r3, r0
 806fe10:	2b00      	cmp	r3, #0
 806fe12:	d001      	beq.n	806fe18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 806fe14:	f000 fe52 	bl	8070abc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 806fe18:	7bfb      	ldrb	r3, [r7, #15]
 806fe1a:	3b01      	subs	r3, #1
 806fe1c:	b2db      	uxtb	r3, r3
 806fe1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 806fe20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 806fe24:	2b00      	cmp	r3, #0
 806fe26:	dce9      	bgt.n	806fdfc <prvUnlockQueue+0x16>
 806fe28:	e000      	b.n	806fe2c <prvUnlockQueue+0x46>
					break;
 806fe2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 806fe2c:	687b      	ldr	r3, [r7, #4]
 806fe2e:	22ff      	movs	r2, #255	; 0xff
 806fe30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 806fe34:	f002 f87e 	bl	8071f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 806fe38:	f002 f84c 	bl	8071ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 806fe3c:	687b      	ldr	r3, [r7, #4]
 806fe3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806fe42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 806fe44:	e011      	b.n	806fe6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806fe46:	687b      	ldr	r3, [r7, #4]
 806fe48:	691b      	ldr	r3, [r3, #16]
 806fe4a:	2b00      	cmp	r3, #0
 806fe4c:	d012      	beq.n	806fe74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806fe4e:	687b      	ldr	r3, [r7, #4]
 806fe50:	3310      	adds	r3, #16
 806fe52:	4618      	mov	r0, r3
 806fe54:	f000 fd56 	bl	8070904 <xTaskRemoveFromEventList>
 806fe58:	4603      	mov	r3, r0
 806fe5a:	2b00      	cmp	r3, #0
 806fe5c:	d001      	beq.n	806fe62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 806fe5e:	f000 fe2d 	bl	8070abc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 806fe62:	7bbb      	ldrb	r3, [r7, #14]
 806fe64:	3b01      	subs	r3, #1
 806fe66:	b2db      	uxtb	r3, r3
 806fe68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 806fe6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 806fe6e:	2b00      	cmp	r3, #0
 806fe70:	dce9      	bgt.n	806fe46 <prvUnlockQueue+0x60>
 806fe72:	e000      	b.n	806fe76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 806fe74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 806fe76:	687b      	ldr	r3, [r7, #4]
 806fe78:	22ff      	movs	r2, #255	; 0xff
 806fe7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 806fe7e:	f002 f859 	bl	8071f34 <vPortExitCritical>
}
 806fe82:	bf00      	nop
 806fe84:	3710      	adds	r7, #16
 806fe86:	46bd      	mov	sp, r7
 806fe88:	bd80      	pop	{r7, pc}

0806fe8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 806fe8a:	b580      	push	{r7, lr}
 806fe8c:	b084      	sub	sp, #16
 806fe8e:	af00      	add	r7, sp, #0
 806fe90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 806fe92:	f002 f81f 	bl	8071ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 806fe96:	687b      	ldr	r3, [r7, #4]
 806fe98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806fe9a:	2b00      	cmp	r3, #0
 806fe9c:	d102      	bne.n	806fea4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 806fe9e:	2301      	movs	r3, #1
 806fea0:	60fb      	str	r3, [r7, #12]
 806fea2:	e001      	b.n	806fea8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 806fea4:	2300      	movs	r3, #0
 806fea6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 806fea8:	f002 f844 	bl	8071f34 <vPortExitCritical>

	return xReturn;
 806feac:	68fb      	ldr	r3, [r7, #12]
}
 806feae:	4618      	mov	r0, r3
 806feb0:	3710      	adds	r7, #16
 806feb2:	46bd      	mov	sp, r7
 806feb4:	bd80      	pop	{r7, pc}

0806feb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 806feb6:	b580      	push	{r7, lr}
 806feb8:	b084      	sub	sp, #16
 806feba:	af00      	add	r7, sp, #0
 806febc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 806febe:	f002 f809 	bl	8071ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 806fec2:	687b      	ldr	r3, [r7, #4]
 806fec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806fec6:	687b      	ldr	r3, [r7, #4]
 806fec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806feca:	429a      	cmp	r2, r3
 806fecc:	d102      	bne.n	806fed4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 806fece:	2301      	movs	r3, #1
 806fed0:	60fb      	str	r3, [r7, #12]
 806fed2:	e001      	b.n	806fed8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 806fed4:	2300      	movs	r3, #0
 806fed6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 806fed8:	f002 f82c 	bl	8071f34 <vPortExitCritical>

	return xReturn;
 806fedc:	68fb      	ldr	r3, [r7, #12]
}
 806fede:	4618      	mov	r0, r3
 806fee0:	3710      	adds	r7, #16
 806fee2:	46bd      	mov	sp, r7
 806fee4:	bd80      	pop	{r7, pc}
	...

0806fee8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 806fee8:	b480      	push	{r7}
 806feea:	b085      	sub	sp, #20
 806feec:	af00      	add	r7, sp, #0
 806feee:	6078      	str	r0, [r7, #4]
 806fef0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806fef2:	2300      	movs	r3, #0
 806fef4:	60fb      	str	r3, [r7, #12]
 806fef6:	e014      	b.n	806ff22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 806fef8:	4a0f      	ldr	r2, [pc, #60]	; (806ff38 <vQueueAddToRegistry+0x50>)
 806fefa:	68fb      	ldr	r3, [r7, #12]
 806fefc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 806ff00:	2b00      	cmp	r3, #0
 806ff02:	d10b      	bne.n	806ff1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 806ff04:	490c      	ldr	r1, [pc, #48]	; (806ff38 <vQueueAddToRegistry+0x50>)
 806ff06:	68fb      	ldr	r3, [r7, #12]
 806ff08:	683a      	ldr	r2, [r7, #0]
 806ff0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 806ff0e:	4a0a      	ldr	r2, [pc, #40]	; (806ff38 <vQueueAddToRegistry+0x50>)
 806ff10:	68fb      	ldr	r3, [r7, #12]
 806ff12:	00db      	lsls	r3, r3, #3
 806ff14:	4413      	add	r3, r2
 806ff16:	687a      	ldr	r2, [r7, #4]
 806ff18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 806ff1a:	e006      	b.n	806ff2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806ff1c:	68fb      	ldr	r3, [r7, #12]
 806ff1e:	3301      	adds	r3, #1
 806ff20:	60fb      	str	r3, [r7, #12]
 806ff22:	68fb      	ldr	r3, [r7, #12]
 806ff24:	2b07      	cmp	r3, #7
 806ff26:	d9e7      	bls.n	806fef8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 806ff28:	bf00      	nop
 806ff2a:	bf00      	nop
 806ff2c:	3714      	adds	r7, #20
 806ff2e:	46bd      	mov	sp, r7
 806ff30:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ff34:	4770      	bx	lr
 806ff36:	bf00      	nop
 806ff38:	20005ce4 	.word	0x20005ce4

0806ff3c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 806ff3c:	b480      	push	{r7}
 806ff3e:	b085      	sub	sp, #20
 806ff40:	af00      	add	r7, sp, #0
 806ff42:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806ff44:	2300      	movs	r3, #0
 806ff46:	60fb      	str	r3, [r7, #12]
 806ff48:	e016      	b.n	806ff78 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 806ff4a:	4a10      	ldr	r2, [pc, #64]	; (806ff8c <vQueueUnregisterQueue+0x50>)
 806ff4c:	68fb      	ldr	r3, [r7, #12]
 806ff4e:	00db      	lsls	r3, r3, #3
 806ff50:	4413      	add	r3, r2
 806ff52:	685b      	ldr	r3, [r3, #4]
 806ff54:	687a      	ldr	r2, [r7, #4]
 806ff56:	429a      	cmp	r2, r3
 806ff58:	d10b      	bne.n	806ff72 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 806ff5a:	4a0c      	ldr	r2, [pc, #48]	; (806ff8c <vQueueUnregisterQueue+0x50>)
 806ff5c:	68fb      	ldr	r3, [r7, #12]
 806ff5e:	2100      	movs	r1, #0
 806ff60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 806ff64:	4a09      	ldr	r2, [pc, #36]	; (806ff8c <vQueueUnregisterQueue+0x50>)
 806ff66:	68fb      	ldr	r3, [r7, #12]
 806ff68:	00db      	lsls	r3, r3, #3
 806ff6a:	4413      	add	r3, r2
 806ff6c:	2200      	movs	r2, #0
 806ff6e:	605a      	str	r2, [r3, #4]
				break;
 806ff70:	e006      	b.n	806ff80 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806ff72:	68fb      	ldr	r3, [r7, #12]
 806ff74:	3301      	adds	r3, #1
 806ff76:	60fb      	str	r3, [r7, #12]
 806ff78:	68fb      	ldr	r3, [r7, #12]
 806ff7a:	2b07      	cmp	r3, #7
 806ff7c:	d9e5      	bls.n	806ff4a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 806ff7e:	bf00      	nop
 806ff80:	bf00      	nop
 806ff82:	3714      	adds	r7, #20
 806ff84:	46bd      	mov	sp, r7
 806ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ff8a:	4770      	bx	lr
 806ff8c:	20005ce4 	.word	0x20005ce4

0806ff90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 806ff90:	b580      	push	{r7, lr}
 806ff92:	b086      	sub	sp, #24
 806ff94:	af00      	add	r7, sp, #0
 806ff96:	60f8      	str	r0, [r7, #12]
 806ff98:	60b9      	str	r1, [r7, #8]
 806ff9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 806ff9c:	68fb      	ldr	r3, [r7, #12]
 806ff9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 806ffa0:	f001 ff98 	bl	8071ed4 <vPortEnterCritical>
 806ffa4:	697b      	ldr	r3, [r7, #20]
 806ffa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806ffaa:	b25b      	sxtb	r3, r3
 806ffac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806ffb0:	d103      	bne.n	806ffba <vQueueWaitForMessageRestricted+0x2a>
 806ffb2:	697b      	ldr	r3, [r7, #20]
 806ffb4:	2200      	movs	r2, #0
 806ffb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806ffba:	697b      	ldr	r3, [r7, #20]
 806ffbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806ffc0:	b25b      	sxtb	r3, r3
 806ffc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806ffc6:	d103      	bne.n	806ffd0 <vQueueWaitForMessageRestricted+0x40>
 806ffc8:	697b      	ldr	r3, [r7, #20]
 806ffca:	2200      	movs	r2, #0
 806ffcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806ffd0:	f001 ffb0 	bl	8071f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 806ffd4:	697b      	ldr	r3, [r7, #20]
 806ffd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806ffd8:	2b00      	cmp	r3, #0
 806ffda:	d106      	bne.n	806ffea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 806ffdc:	697b      	ldr	r3, [r7, #20]
 806ffde:	3324      	adds	r3, #36	; 0x24
 806ffe0:	687a      	ldr	r2, [r7, #4]
 806ffe2:	68b9      	ldr	r1, [r7, #8]
 806ffe4:	4618      	mov	r0, r3
 806ffe6:	f000 fc61 	bl	80708ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 806ffea:	6978      	ldr	r0, [r7, #20]
 806ffec:	f7ff fefb 	bl	806fde6 <prvUnlockQueue>
	}
 806fff0:	bf00      	nop
 806fff2:	3718      	adds	r7, #24
 806fff4:	46bd      	mov	sp, r7
 806fff6:	bd80      	pop	{r7, pc}

0806fff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 806fff8:	b580      	push	{r7, lr}
 806fffa:	b08e      	sub	sp, #56	; 0x38
 806fffc:	af04      	add	r7, sp, #16
 806fffe:	60f8      	str	r0, [r7, #12]
 8070000:	60b9      	str	r1, [r7, #8]
 8070002:	607a      	str	r2, [r7, #4]
 8070004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8070006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8070008:	2b00      	cmp	r3, #0
 807000a:	d10a      	bne.n	8070022 <xTaskCreateStatic+0x2a>
	__asm volatile
 807000c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070010:	f383 8811 	msr	BASEPRI, r3
 8070014:	f3bf 8f6f 	isb	sy
 8070018:	f3bf 8f4f 	dsb	sy
 807001c:	623b      	str	r3, [r7, #32]
}
 807001e:	bf00      	nop
 8070020:	e7fe      	b.n	8070020 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8070022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8070024:	2b00      	cmp	r3, #0
 8070026:	d10a      	bne.n	807003e <xTaskCreateStatic+0x46>
	__asm volatile
 8070028:	f04f 0350 	mov.w	r3, #80	; 0x50
 807002c:	f383 8811 	msr	BASEPRI, r3
 8070030:	f3bf 8f6f 	isb	sy
 8070034:	f3bf 8f4f 	dsb	sy
 8070038:	61fb      	str	r3, [r7, #28]
}
 807003a:	bf00      	nop
 807003c:	e7fe      	b.n	807003c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 807003e:	23bc      	movs	r3, #188	; 0xbc
 8070040:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8070042:	693b      	ldr	r3, [r7, #16]
 8070044:	2bbc      	cmp	r3, #188	; 0xbc
 8070046:	d00a      	beq.n	807005e <xTaskCreateStatic+0x66>
	__asm volatile
 8070048:	f04f 0350 	mov.w	r3, #80	; 0x50
 807004c:	f383 8811 	msr	BASEPRI, r3
 8070050:	f3bf 8f6f 	isb	sy
 8070054:	f3bf 8f4f 	dsb	sy
 8070058:	61bb      	str	r3, [r7, #24]
}
 807005a:	bf00      	nop
 807005c:	e7fe      	b.n	807005c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 807005e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8070060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8070062:	2b00      	cmp	r3, #0
 8070064:	d01e      	beq.n	80700a4 <xTaskCreateStatic+0xac>
 8070066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8070068:	2b00      	cmp	r3, #0
 807006a:	d01b      	beq.n	80700a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 807006c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 807006e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8070070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8070074:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8070076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070078:	2202      	movs	r2, #2
 807007a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 807007e:	2300      	movs	r3, #0
 8070080:	9303      	str	r3, [sp, #12]
 8070082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8070084:	9302      	str	r3, [sp, #8]
 8070086:	f107 0314 	add.w	r3, r7, #20
 807008a:	9301      	str	r3, [sp, #4]
 807008c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807008e:	9300      	str	r3, [sp, #0]
 8070090:	683b      	ldr	r3, [r7, #0]
 8070092:	687a      	ldr	r2, [r7, #4]
 8070094:	68b9      	ldr	r1, [r7, #8]
 8070096:	68f8      	ldr	r0, [r7, #12]
 8070098:	f000 f850 	bl	807013c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 807009c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 807009e:	f000 f8f3 	bl	8070288 <prvAddNewTaskToReadyList>
 80700a2:	e001      	b.n	80700a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80700a4:	2300      	movs	r3, #0
 80700a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80700a8:	697b      	ldr	r3, [r7, #20]
	}
 80700aa:	4618      	mov	r0, r3
 80700ac:	3728      	adds	r7, #40	; 0x28
 80700ae:	46bd      	mov	sp, r7
 80700b0:	bd80      	pop	{r7, pc}

080700b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80700b2:	b580      	push	{r7, lr}
 80700b4:	b08c      	sub	sp, #48	; 0x30
 80700b6:	af04      	add	r7, sp, #16
 80700b8:	60f8      	str	r0, [r7, #12]
 80700ba:	60b9      	str	r1, [r7, #8]
 80700bc:	603b      	str	r3, [r7, #0]
 80700be:	4613      	mov	r3, r2
 80700c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80700c2:	88fb      	ldrh	r3, [r7, #6]
 80700c4:	009b      	lsls	r3, r3, #2
 80700c6:	4618      	mov	r0, r3
 80700c8:	f002 f826 	bl	8072118 <pvPortMalloc>
 80700cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80700ce:	697b      	ldr	r3, [r7, #20]
 80700d0:	2b00      	cmp	r3, #0
 80700d2:	d00e      	beq.n	80700f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80700d4:	20bc      	movs	r0, #188	; 0xbc
 80700d6:	f002 f81f 	bl	8072118 <pvPortMalloc>
 80700da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80700dc:	69fb      	ldr	r3, [r7, #28]
 80700de:	2b00      	cmp	r3, #0
 80700e0:	d003      	beq.n	80700ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80700e2:	69fb      	ldr	r3, [r7, #28]
 80700e4:	697a      	ldr	r2, [r7, #20]
 80700e6:	631a      	str	r2, [r3, #48]	; 0x30
 80700e8:	e005      	b.n	80700f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80700ea:	6978      	ldr	r0, [r7, #20]
 80700ec:	f002 f8e0 	bl	80722b0 <vPortFree>
 80700f0:	e001      	b.n	80700f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80700f2:	2300      	movs	r3, #0
 80700f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80700f6:	69fb      	ldr	r3, [r7, #28]
 80700f8:	2b00      	cmp	r3, #0
 80700fa:	d017      	beq.n	807012c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80700fc:	69fb      	ldr	r3, [r7, #28]
 80700fe:	2200      	movs	r2, #0
 8070100:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8070104:	88fa      	ldrh	r2, [r7, #6]
 8070106:	2300      	movs	r3, #0
 8070108:	9303      	str	r3, [sp, #12]
 807010a:	69fb      	ldr	r3, [r7, #28]
 807010c:	9302      	str	r3, [sp, #8]
 807010e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8070110:	9301      	str	r3, [sp, #4]
 8070112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8070114:	9300      	str	r3, [sp, #0]
 8070116:	683b      	ldr	r3, [r7, #0]
 8070118:	68b9      	ldr	r1, [r7, #8]
 807011a:	68f8      	ldr	r0, [r7, #12]
 807011c:	f000 f80e 	bl	807013c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8070120:	69f8      	ldr	r0, [r7, #28]
 8070122:	f000 f8b1 	bl	8070288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8070126:	2301      	movs	r3, #1
 8070128:	61bb      	str	r3, [r7, #24]
 807012a:	e002      	b.n	8070132 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 807012c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8070130:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8070132:	69bb      	ldr	r3, [r7, #24]
	}
 8070134:	4618      	mov	r0, r3
 8070136:	3720      	adds	r7, #32
 8070138:	46bd      	mov	sp, r7
 807013a:	bd80      	pop	{r7, pc}

0807013c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 807013c:	b580      	push	{r7, lr}
 807013e:	b088      	sub	sp, #32
 8070140:	af00      	add	r7, sp, #0
 8070142:	60f8      	str	r0, [r7, #12]
 8070144:	60b9      	str	r1, [r7, #8]
 8070146:	607a      	str	r2, [r7, #4]
 8070148:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 807014a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807014c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 807014e:	687b      	ldr	r3, [r7, #4]
 8070150:	009b      	lsls	r3, r3, #2
 8070152:	461a      	mov	r2, r3
 8070154:	21a5      	movs	r1, #165	; 0xa5
 8070156:	f002 fafa 	bl	807274e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 807015a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807015c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 807015e:	687b      	ldr	r3, [r7, #4]
 8070160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8070164:	3b01      	subs	r3, #1
 8070166:	009b      	lsls	r3, r3, #2
 8070168:	4413      	add	r3, r2
 807016a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 807016c:	69bb      	ldr	r3, [r7, #24]
 807016e:	f023 0307 	bic.w	r3, r3, #7
 8070172:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8070174:	69bb      	ldr	r3, [r7, #24]
 8070176:	f003 0307 	and.w	r3, r3, #7
 807017a:	2b00      	cmp	r3, #0
 807017c:	d00a      	beq.n	8070194 <prvInitialiseNewTask+0x58>
	__asm volatile
 807017e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070182:	f383 8811 	msr	BASEPRI, r3
 8070186:	f3bf 8f6f 	isb	sy
 807018a:	f3bf 8f4f 	dsb	sy
 807018e:	617b      	str	r3, [r7, #20]
}
 8070190:	bf00      	nop
 8070192:	e7fe      	b.n	8070192 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8070194:	68bb      	ldr	r3, [r7, #8]
 8070196:	2b00      	cmp	r3, #0
 8070198:	d01f      	beq.n	80701da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 807019a:	2300      	movs	r3, #0
 807019c:	61fb      	str	r3, [r7, #28]
 807019e:	e012      	b.n	80701c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80701a0:	68ba      	ldr	r2, [r7, #8]
 80701a2:	69fb      	ldr	r3, [r7, #28]
 80701a4:	4413      	add	r3, r2
 80701a6:	7819      	ldrb	r1, [r3, #0]
 80701a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80701aa:	69fb      	ldr	r3, [r7, #28]
 80701ac:	4413      	add	r3, r2
 80701ae:	3334      	adds	r3, #52	; 0x34
 80701b0:	460a      	mov	r2, r1
 80701b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80701b4:	68ba      	ldr	r2, [r7, #8]
 80701b6:	69fb      	ldr	r3, [r7, #28]
 80701b8:	4413      	add	r3, r2
 80701ba:	781b      	ldrb	r3, [r3, #0]
 80701bc:	2b00      	cmp	r3, #0
 80701be:	d006      	beq.n	80701ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80701c0:	69fb      	ldr	r3, [r7, #28]
 80701c2:	3301      	adds	r3, #1
 80701c4:	61fb      	str	r3, [r7, #28]
 80701c6:	69fb      	ldr	r3, [r7, #28]
 80701c8:	2b0f      	cmp	r3, #15
 80701ca:	d9e9      	bls.n	80701a0 <prvInitialiseNewTask+0x64>
 80701cc:	e000      	b.n	80701d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80701ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80701d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80701d2:	2200      	movs	r2, #0
 80701d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80701d8:	e003      	b.n	80701e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80701da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80701dc:	2200      	movs	r2, #0
 80701de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80701e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80701e4:	2b37      	cmp	r3, #55	; 0x37
 80701e6:	d901      	bls.n	80701ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80701e8:	2337      	movs	r3, #55	; 0x37
 80701ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80701ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80701ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80701f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80701f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80701f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80701f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80701f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80701fa:	2200      	movs	r2, #0
 80701fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80701fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070200:	3304      	adds	r3, #4
 8070202:	4618      	mov	r0, r3
 8070204:	f7fe fda0 	bl	806ed48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8070208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807020a:	3318      	adds	r3, #24
 807020c:	4618      	mov	r0, r3
 807020e:	f7fe fd9b 	bl	806ed48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8070212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8070216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8070218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807021a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 807021e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8070222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8070226:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8070228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807022a:	2200      	movs	r2, #0
 807022c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8070230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070232:	2200      	movs	r2, #0
 8070234:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8070238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807023a:	3354      	adds	r3, #84	; 0x54
 807023c:	2260      	movs	r2, #96	; 0x60
 807023e:	2100      	movs	r1, #0
 8070240:	4618      	mov	r0, r3
 8070242:	f002 fa84 	bl	807274e <memset>
 8070246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070248:	4a0c      	ldr	r2, [pc, #48]	; (807027c <prvInitialiseNewTask+0x140>)
 807024a:	659a      	str	r2, [r3, #88]	; 0x58
 807024c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807024e:	4a0c      	ldr	r2, [pc, #48]	; (8070280 <prvInitialiseNewTask+0x144>)
 8070250:	65da      	str	r2, [r3, #92]	; 0x5c
 8070252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070254:	4a0b      	ldr	r2, [pc, #44]	; (8070284 <prvInitialiseNewTask+0x148>)
 8070256:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8070258:	683a      	ldr	r2, [r7, #0]
 807025a:	68f9      	ldr	r1, [r7, #12]
 807025c:	69b8      	ldr	r0, [r7, #24]
 807025e:	f001 fd0b 	bl	8071c78 <pxPortInitialiseStack>
 8070262:	4602      	mov	r2, r0
 8070264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070266:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8070268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 807026a:	2b00      	cmp	r3, #0
 807026c:	d002      	beq.n	8070274 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 807026e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8070270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8070272:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8070274:	bf00      	nop
 8070276:	3720      	adds	r7, #32
 8070278:	46bd      	mov	sp, r7
 807027a:	bd80      	pop	{r7, pc}
 807027c:	080777d0 	.word	0x080777d0
 8070280:	080777f0 	.word	0x080777f0
 8070284:	080777b0 	.word	0x080777b0

08070288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8070288:	b580      	push	{r7, lr}
 807028a:	b082      	sub	sp, #8
 807028c:	af00      	add	r7, sp, #0
 807028e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8070290:	f001 fe20 	bl	8071ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8070294:	4b2d      	ldr	r3, [pc, #180]	; (807034c <prvAddNewTaskToReadyList+0xc4>)
 8070296:	681b      	ldr	r3, [r3, #0]
 8070298:	3301      	adds	r3, #1
 807029a:	4a2c      	ldr	r2, [pc, #176]	; (807034c <prvAddNewTaskToReadyList+0xc4>)
 807029c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 807029e:	4b2c      	ldr	r3, [pc, #176]	; (8070350 <prvAddNewTaskToReadyList+0xc8>)
 80702a0:	681b      	ldr	r3, [r3, #0]
 80702a2:	2b00      	cmp	r3, #0
 80702a4:	d109      	bne.n	80702ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80702a6:	4a2a      	ldr	r2, [pc, #168]	; (8070350 <prvAddNewTaskToReadyList+0xc8>)
 80702a8:	687b      	ldr	r3, [r7, #4]
 80702aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80702ac:	4b27      	ldr	r3, [pc, #156]	; (807034c <prvAddNewTaskToReadyList+0xc4>)
 80702ae:	681b      	ldr	r3, [r3, #0]
 80702b0:	2b01      	cmp	r3, #1
 80702b2:	d110      	bne.n	80702d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80702b4:	f000 fc26 	bl	8070b04 <prvInitialiseTaskLists>
 80702b8:	e00d      	b.n	80702d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80702ba:	4b26      	ldr	r3, [pc, #152]	; (8070354 <prvAddNewTaskToReadyList+0xcc>)
 80702bc:	681b      	ldr	r3, [r3, #0]
 80702be:	2b00      	cmp	r3, #0
 80702c0:	d109      	bne.n	80702d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80702c2:	4b23      	ldr	r3, [pc, #140]	; (8070350 <prvAddNewTaskToReadyList+0xc8>)
 80702c4:	681b      	ldr	r3, [r3, #0]
 80702c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80702c8:	687b      	ldr	r3, [r7, #4]
 80702ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80702cc:	429a      	cmp	r2, r3
 80702ce:	d802      	bhi.n	80702d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80702d0:	4a1f      	ldr	r2, [pc, #124]	; (8070350 <prvAddNewTaskToReadyList+0xc8>)
 80702d2:	687b      	ldr	r3, [r7, #4]
 80702d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80702d6:	4b20      	ldr	r3, [pc, #128]	; (8070358 <prvAddNewTaskToReadyList+0xd0>)
 80702d8:	681b      	ldr	r3, [r3, #0]
 80702da:	3301      	adds	r3, #1
 80702dc:	4a1e      	ldr	r2, [pc, #120]	; (8070358 <prvAddNewTaskToReadyList+0xd0>)
 80702de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80702e0:	4b1d      	ldr	r3, [pc, #116]	; (8070358 <prvAddNewTaskToReadyList+0xd0>)
 80702e2:	681a      	ldr	r2, [r3, #0]
 80702e4:	687b      	ldr	r3, [r7, #4]
 80702e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80702e8:	687b      	ldr	r3, [r7, #4]
 80702ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80702ec:	4b1b      	ldr	r3, [pc, #108]	; (807035c <prvAddNewTaskToReadyList+0xd4>)
 80702ee:	681b      	ldr	r3, [r3, #0]
 80702f0:	429a      	cmp	r2, r3
 80702f2:	d903      	bls.n	80702fc <prvAddNewTaskToReadyList+0x74>
 80702f4:	687b      	ldr	r3, [r7, #4]
 80702f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80702f8:	4a18      	ldr	r2, [pc, #96]	; (807035c <prvAddNewTaskToReadyList+0xd4>)
 80702fa:	6013      	str	r3, [r2, #0]
 80702fc:	687b      	ldr	r3, [r7, #4]
 80702fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070300:	4613      	mov	r3, r2
 8070302:	009b      	lsls	r3, r3, #2
 8070304:	4413      	add	r3, r2
 8070306:	009b      	lsls	r3, r3, #2
 8070308:	4a15      	ldr	r2, [pc, #84]	; (8070360 <prvAddNewTaskToReadyList+0xd8>)
 807030a:	441a      	add	r2, r3
 807030c:	687b      	ldr	r3, [r7, #4]
 807030e:	3304      	adds	r3, #4
 8070310:	4619      	mov	r1, r3
 8070312:	4610      	mov	r0, r2
 8070314:	f7fe fd25 	bl	806ed62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8070318:	f001 fe0c 	bl	8071f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 807031c:	4b0d      	ldr	r3, [pc, #52]	; (8070354 <prvAddNewTaskToReadyList+0xcc>)
 807031e:	681b      	ldr	r3, [r3, #0]
 8070320:	2b00      	cmp	r3, #0
 8070322:	d00e      	beq.n	8070342 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8070324:	4b0a      	ldr	r3, [pc, #40]	; (8070350 <prvAddNewTaskToReadyList+0xc8>)
 8070326:	681b      	ldr	r3, [r3, #0]
 8070328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 807032a:	687b      	ldr	r3, [r7, #4]
 807032c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807032e:	429a      	cmp	r2, r3
 8070330:	d207      	bcs.n	8070342 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8070332:	4b0c      	ldr	r3, [pc, #48]	; (8070364 <prvAddNewTaskToReadyList+0xdc>)
 8070334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8070338:	601a      	str	r2, [r3, #0]
 807033a:	f3bf 8f4f 	dsb	sy
 807033e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8070342:	bf00      	nop
 8070344:	3708      	adds	r7, #8
 8070346:	46bd      	mov	sp, r7
 8070348:	bd80      	pop	{r7, pc}
 807034a:	bf00      	nop
 807034c:	200010a8 	.word	0x200010a8
 8070350:	20000bd4 	.word	0x20000bd4
 8070354:	200010b4 	.word	0x200010b4
 8070358:	200010c4 	.word	0x200010c4
 807035c:	200010b0 	.word	0x200010b0
 8070360:	20000bd8 	.word	0x20000bd8
 8070364:	e000ed04 	.word	0xe000ed04

08070368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8070368:	b580      	push	{r7, lr}
 807036a:	b084      	sub	sp, #16
 807036c:	af00      	add	r7, sp, #0
 807036e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8070370:	2300      	movs	r3, #0
 8070372:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8070374:	687b      	ldr	r3, [r7, #4]
 8070376:	2b00      	cmp	r3, #0
 8070378:	d017      	beq.n	80703aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 807037a:	4b13      	ldr	r3, [pc, #76]	; (80703c8 <vTaskDelay+0x60>)
 807037c:	681b      	ldr	r3, [r3, #0]
 807037e:	2b00      	cmp	r3, #0
 8070380:	d00a      	beq.n	8070398 <vTaskDelay+0x30>
	__asm volatile
 8070382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070386:	f383 8811 	msr	BASEPRI, r3
 807038a:	f3bf 8f6f 	isb	sy
 807038e:	f3bf 8f4f 	dsb	sy
 8070392:	60bb      	str	r3, [r7, #8]
}
 8070394:	bf00      	nop
 8070396:	e7fe      	b.n	8070396 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8070398:	f000 f88a 	bl	80704b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 807039c:	2100      	movs	r1, #0
 807039e:	6878      	ldr	r0, [r7, #4]
 80703a0:	f001 f80e 	bl	80713c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80703a4:	f000 f892 	bl	80704cc <xTaskResumeAll>
 80703a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80703aa:	68fb      	ldr	r3, [r7, #12]
 80703ac:	2b00      	cmp	r3, #0
 80703ae:	d107      	bne.n	80703c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80703b0:	4b06      	ldr	r3, [pc, #24]	; (80703cc <vTaskDelay+0x64>)
 80703b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80703b6:	601a      	str	r2, [r3, #0]
 80703b8:	f3bf 8f4f 	dsb	sy
 80703bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80703c0:	bf00      	nop
 80703c2:	3710      	adds	r7, #16
 80703c4:	46bd      	mov	sp, r7
 80703c6:	bd80      	pop	{r7, pc}
 80703c8:	200010d0 	.word	0x200010d0
 80703cc:	e000ed04 	.word	0xe000ed04

080703d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80703d0:	b580      	push	{r7, lr}
 80703d2:	b08a      	sub	sp, #40	; 0x28
 80703d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80703d6:	2300      	movs	r3, #0
 80703d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80703da:	2300      	movs	r3, #0
 80703dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80703de:	463a      	mov	r2, r7
 80703e0:	1d39      	adds	r1, r7, #4
 80703e2:	f107 0308 	add.w	r3, r7, #8
 80703e6:	4618      	mov	r0, r3
 80703e8:	f7fe fc5a 	bl	806eca0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80703ec:	6839      	ldr	r1, [r7, #0]
 80703ee:	687b      	ldr	r3, [r7, #4]
 80703f0:	68ba      	ldr	r2, [r7, #8]
 80703f2:	9202      	str	r2, [sp, #8]
 80703f4:	9301      	str	r3, [sp, #4]
 80703f6:	2300      	movs	r3, #0
 80703f8:	9300      	str	r3, [sp, #0]
 80703fa:	2300      	movs	r3, #0
 80703fc:	460a      	mov	r2, r1
 80703fe:	4924      	ldr	r1, [pc, #144]	; (8070490 <vTaskStartScheduler+0xc0>)
 8070400:	4824      	ldr	r0, [pc, #144]	; (8070494 <vTaskStartScheduler+0xc4>)
 8070402:	f7ff fdf9 	bl	806fff8 <xTaskCreateStatic>
 8070406:	4603      	mov	r3, r0
 8070408:	4a23      	ldr	r2, [pc, #140]	; (8070498 <vTaskStartScheduler+0xc8>)
 807040a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 807040c:	4b22      	ldr	r3, [pc, #136]	; (8070498 <vTaskStartScheduler+0xc8>)
 807040e:	681b      	ldr	r3, [r3, #0]
 8070410:	2b00      	cmp	r3, #0
 8070412:	d002      	beq.n	807041a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8070414:	2301      	movs	r3, #1
 8070416:	617b      	str	r3, [r7, #20]
 8070418:	e001      	b.n	807041e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 807041a:	2300      	movs	r3, #0
 807041c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 807041e:	697b      	ldr	r3, [r7, #20]
 8070420:	2b01      	cmp	r3, #1
 8070422:	d102      	bne.n	807042a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8070424:	f001 f820 	bl	8071468 <xTimerCreateTimerTask>
 8070428:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 807042a:	697b      	ldr	r3, [r7, #20]
 807042c:	2b01      	cmp	r3, #1
 807042e:	d11b      	bne.n	8070468 <vTaskStartScheduler+0x98>
	__asm volatile
 8070430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070434:	f383 8811 	msr	BASEPRI, r3
 8070438:	f3bf 8f6f 	isb	sy
 807043c:	f3bf 8f4f 	dsb	sy
 8070440:	613b      	str	r3, [r7, #16]
}
 8070442:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8070444:	4b15      	ldr	r3, [pc, #84]	; (807049c <vTaskStartScheduler+0xcc>)
 8070446:	681b      	ldr	r3, [r3, #0]
 8070448:	3354      	adds	r3, #84	; 0x54
 807044a:	4a15      	ldr	r2, [pc, #84]	; (80704a0 <vTaskStartScheduler+0xd0>)
 807044c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 807044e:	4b15      	ldr	r3, [pc, #84]	; (80704a4 <vTaskStartScheduler+0xd4>)
 8070450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8070454:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8070456:	4b14      	ldr	r3, [pc, #80]	; (80704a8 <vTaskStartScheduler+0xd8>)
 8070458:	2201      	movs	r2, #1
 807045a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 807045c:	4b13      	ldr	r3, [pc, #76]	; (80704ac <vTaskStartScheduler+0xdc>)
 807045e:	2200      	movs	r2, #0
 8070460:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8070462:	f001 fc95 	bl	8071d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8070466:	e00e      	b.n	8070486 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8070468:	697b      	ldr	r3, [r7, #20]
 807046a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 807046e:	d10a      	bne.n	8070486 <vTaskStartScheduler+0xb6>
	__asm volatile
 8070470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070474:	f383 8811 	msr	BASEPRI, r3
 8070478:	f3bf 8f6f 	isb	sy
 807047c:	f3bf 8f4f 	dsb	sy
 8070480:	60fb      	str	r3, [r7, #12]
}
 8070482:	bf00      	nop
 8070484:	e7fe      	b.n	8070484 <vTaskStartScheduler+0xb4>
}
 8070486:	bf00      	nop
 8070488:	3718      	adds	r7, #24
 807048a:	46bd      	mov	sp, r7
 807048c:	bd80      	pop	{r7, pc}
 807048e:	bf00      	nop
 8070490:	080775bc 	.word	0x080775bc
 8070494:	08070ad5 	.word	0x08070ad5
 8070498:	200010cc 	.word	0x200010cc
 807049c:	20000bd4 	.word	0x20000bd4
 80704a0:	20000028 	.word	0x20000028
 80704a4:	200010c8 	.word	0x200010c8
 80704a8:	200010b4 	.word	0x200010b4
 80704ac:	200010ac 	.word	0x200010ac

080704b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80704b0:	b480      	push	{r7}
 80704b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80704b4:	4b04      	ldr	r3, [pc, #16]	; (80704c8 <vTaskSuspendAll+0x18>)
 80704b6:	681b      	ldr	r3, [r3, #0]
 80704b8:	3301      	adds	r3, #1
 80704ba:	4a03      	ldr	r2, [pc, #12]	; (80704c8 <vTaskSuspendAll+0x18>)
 80704bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80704be:	bf00      	nop
 80704c0:	46bd      	mov	sp, r7
 80704c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80704c6:	4770      	bx	lr
 80704c8:	200010d0 	.word	0x200010d0

080704cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80704cc:	b580      	push	{r7, lr}
 80704ce:	b084      	sub	sp, #16
 80704d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80704d2:	2300      	movs	r3, #0
 80704d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80704d6:	2300      	movs	r3, #0
 80704d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80704da:	4b42      	ldr	r3, [pc, #264]	; (80705e4 <xTaskResumeAll+0x118>)
 80704dc:	681b      	ldr	r3, [r3, #0]
 80704de:	2b00      	cmp	r3, #0
 80704e0:	d10a      	bne.n	80704f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80704e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80704e6:	f383 8811 	msr	BASEPRI, r3
 80704ea:	f3bf 8f6f 	isb	sy
 80704ee:	f3bf 8f4f 	dsb	sy
 80704f2:	603b      	str	r3, [r7, #0]
}
 80704f4:	bf00      	nop
 80704f6:	e7fe      	b.n	80704f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80704f8:	f001 fcec 	bl	8071ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80704fc:	4b39      	ldr	r3, [pc, #228]	; (80705e4 <xTaskResumeAll+0x118>)
 80704fe:	681b      	ldr	r3, [r3, #0]
 8070500:	3b01      	subs	r3, #1
 8070502:	4a38      	ldr	r2, [pc, #224]	; (80705e4 <xTaskResumeAll+0x118>)
 8070504:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8070506:	4b37      	ldr	r3, [pc, #220]	; (80705e4 <xTaskResumeAll+0x118>)
 8070508:	681b      	ldr	r3, [r3, #0]
 807050a:	2b00      	cmp	r3, #0
 807050c:	d162      	bne.n	80705d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 807050e:	4b36      	ldr	r3, [pc, #216]	; (80705e8 <xTaskResumeAll+0x11c>)
 8070510:	681b      	ldr	r3, [r3, #0]
 8070512:	2b00      	cmp	r3, #0
 8070514:	d05e      	beq.n	80705d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8070516:	e02f      	b.n	8070578 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070518:	4b34      	ldr	r3, [pc, #208]	; (80705ec <xTaskResumeAll+0x120>)
 807051a:	68db      	ldr	r3, [r3, #12]
 807051c:	68db      	ldr	r3, [r3, #12]
 807051e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8070520:	68fb      	ldr	r3, [r7, #12]
 8070522:	3318      	adds	r3, #24
 8070524:	4618      	mov	r0, r3
 8070526:	f7fe fc79 	bl	806ee1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 807052a:	68fb      	ldr	r3, [r7, #12]
 807052c:	3304      	adds	r3, #4
 807052e:	4618      	mov	r0, r3
 8070530:	f7fe fc74 	bl	806ee1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8070534:	68fb      	ldr	r3, [r7, #12]
 8070536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070538:	4b2d      	ldr	r3, [pc, #180]	; (80705f0 <xTaskResumeAll+0x124>)
 807053a:	681b      	ldr	r3, [r3, #0]
 807053c:	429a      	cmp	r2, r3
 807053e:	d903      	bls.n	8070548 <xTaskResumeAll+0x7c>
 8070540:	68fb      	ldr	r3, [r7, #12]
 8070542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070544:	4a2a      	ldr	r2, [pc, #168]	; (80705f0 <xTaskResumeAll+0x124>)
 8070546:	6013      	str	r3, [r2, #0]
 8070548:	68fb      	ldr	r3, [r7, #12]
 807054a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 807054c:	4613      	mov	r3, r2
 807054e:	009b      	lsls	r3, r3, #2
 8070550:	4413      	add	r3, r2
 8070552:	009b      	lsls	r3, r3, #2
 8070554:	4a27      	ldr	r2, [pc, #156]	; (80705f4 <xTaskResumeAll+0x128>)
 8070556:	441a      	add	r2, r3
 8070558:	68fb      	ldr	r3, [r7, #12]
 807055a:	3304      	adds	r3, #4
 807055c:	4619      	mov	r1, r3
 807055e:	4610      	mov	r0, r2
 8070560:	f7fe fbff 	bl	806ed62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8070564:	68fb      	ldr	r3, [r7, #12]
 8070566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070568:	4b23      	ldr	r3, [pc, #140]	; (80705f8 <xTaskResumeAll+0x12c>)
 807056a:	681b      	ldr	r3, [r3, #0]
 807056c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807056e:	429a      	cmp	r2, r3
 8070570:	d302      	bcc.n	8070578 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8070572:	4b22      	ldr	r3, [pc, #136]	; (80705fc <xTaskResumeAll+0x130>)
 8070574:	2201      	movs	r2, #1
 8070576:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8070578:	4b1c      	ldr	r3, [pc, #112]	; (80705ec <xTaskResumeAll+0x120>)
 807057a:	681b      	ldr	r3, [r3, #0]
 807057c:	2b00      	cmp	r3, #0
 807057e:	d1cb      	bne.n	8070518 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8070580:	68fb      	ldr	r3, [r7, #12]
 8070582:	2b00      	cmp	r3, #0
 8070584:	d001      	beq.n	807058a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8070586:	f000 fb5f 	bl	8070c48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 807058a:	4b1d      	ldr	r3, [pc, #116]	; (8070600 <xTaskResumeAll+0x134>)
 807058c:	681b      	ldr	r3, [r3, #0]
 807058e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8070590:	687b      	ldr	r3, [r7, #4]
 8070592:	2b00      	cmp	r3, #0
 8070594:	d010      	beq.n	80705b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8070596:	f000 f847 	bl	8070628 <xTaskIncrementTick>
 807059a:	4603      	mov	r3, r0
 807059c:	2b00      	cmp	r3, #0
 807059e:	d002      	beq.n	80705a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80705a0:	4b16      	ldr	r3, [pc, #88]	; (80705fc <xTaskResumeAll+0x130>)
 80705a2:	2201      	movs	r2, #1
 80705a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80705a6:	687b      	ldr	r3, [r7, #4]
 80705a8:	3b01      	subs	r3, #1
 80705aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80705ac:	687b      	ldr	r3, [r7, #4]
 80705ae:	2b00      	cmp	r3, #0
 80705b0:	d1f1      	bne.n	8070596 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80705b2:	4b13      	ldr	r3, [pc, #76]	; (8070600 <xTaskResumeAll+0x134>)
 80705b4:	2200      	movs	r2, #0
 80705b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80705b8:	4b10      	ldr	r3, [pc, #64]	; (80705fc <xTaskResumeAll+0x130>)
 80705ba:	681b      	ldr	r3, [r3, #0]
 80705bc:	2b00      	cmp	r3, #0
 80705be:	d009      	beq.n	80705d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80705c0:	2301      	movs	r3, #1
 80705c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80705c4:	4b0f      	ldr	r3, [pc, #60]	; (8070604 <xTaskResumeAll+0x138>)
 80705c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80705ca:	601a      	str	r2, [r3, #0]
 80705cc:	f3bf 8f4f 	dsb	sy
 80705d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80705d4:	f001 fcae 	bl	8071f34 <vPortExitCritical>

	return xAlreadyYielded;
 80705d8:	68bb      	ldr	r3, [r7, #8]
}
 80705da:	4618      	mov	r0, r3
 80705dc:	3710      	adds	r7, #16
 80705de:	46bd      	mov	sp, r7
 80705e0:	bd80      	pop	{r7, pc}
 80705e2:	bf00      	nop
 80705e4:	200010d0 	.word	0x200010d0
 80705e8:	200010a8 	.word	0x200010a8
 80705ec:	20001068 	.word	0x20001068
 80705f0:	200010b0 	.word	0x200010b0
 80705f4:	20000bd8 	.word	0x20000bd8
 80705f8:	20000bd4 	.word	0x20000bd4
 80705fc:	200010bc 	.word	0x200010bc
 8070600:	200010b8 	.word	0x200010b8
 8070604:	e000ed04 	.word	0xe000ed04

08070608 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8070608:	b480      	push	{r7}
 807060a:	b083      	sub	sp, #12
 807060c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 807060e:	4b05      	ldr	r3, [pc, #20]	; (8070624 <xTaskGetTickCount+0x1c>)
 8070610:	681b      	ldr	r3, [r3, #0]
 8070612:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8070614:	687b      	ldr	r3, [r7, #4]
}
 8070616:	4618      	mov	r0, r3
 8070618:	370c      	adds	r7, #12
 807061a:	46bd      	mov	sp, r7
 807061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070620:	4770      	bx	lr
 8070622:	bf00      	nop
 8070624:	200010ac 	.word	0x200010ac

08070628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8070628:	b580      	push	{r7, lr}
 807062a:	b086      	sub	sp, #24
 807062c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 807062e:	2300      	movs	r3, #0
 8070630:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8070632:	4b4f      	ldr	r3, [pc, #316]	; (8070770 <xTaskIncrementTick+0x148>)
 8070634:	681b      	ldr	r3, [r3, #0]
 8070636:	2b00      	cmp	r3, #0
 8070638:	f040 808f 	bne.w	807075a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 807063c:	4b4d      	ldr	r3, [pc, #308]	; (8070774 <xTaskIncrementTick+0x14c>)
 807063e:	681b      	ldr	r3, [r3, #0]
 8070640:	3301      	adds	r3, #1
 8070642:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8070644:	4a4b      	ldr	r2, [pc, #300]	; (8070774 <xTaskIncrementTick+0x14c>)
 8070646:	693b      	ldr	r3, [r7, #16]
 8070648:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 807064a:	693b      	ldr	r3, [r7, #16]
 807064c:	2b00      	cmp	r3, #0
 807064e:	d120      	bne.n	8070692 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8070650:	4b49      	ldr	r3, [pc, #292]	; (8070778 <xTaskIncrementTick+0x150>)
 8070652:	681b      	ldr	r3, [r3, #0]
 8070654:	681b      	ldr	r3, [r3, #0]
 8070656:	2b00      	cmp	r3, #0
 8070658:	d00a      	beq.n	8070670 <xTaskIncrementTick+0x48>
	__asm volatile
 807065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 807065e:	f383 8811 	msr	BASEPRI, r3
 8070662:	f3bf 8f6f 	isb	sy
 8070666:	f3bf 8f4f 	dsb	sy
 807066a:	603b      	str	r3, [r7, #0]
}
 807066c:	bf00      	nop
 807066e:	e7fe      	b.n	807066e <xTaskIncrementTick+0x46>
 8070670:	4b41      	ldr	r3, [pc, #260]	; (8070778 <xTaskIncrementTick+0x150>)
 8070672:	681b      	ldr	r3, [r3, #0]
 8070674:	60fb      	str	r3, [r7, #12]
 8070676:	4b41      	ldr	r3, [pc, #260]	; (807077c <xTaskIncrementTick+0x154>)
 8070678:	681b      	ldr	r3, [r3, #0]
 807067a:	4a3f      	ldr	r2, [pc, #252]	; (8070778 <xTaskIncrementTick+0x150>)
 807067c:	6013      	str	r3, [r2, #0]
 807067e:	4a3f      	ldr	r2, [pc, #252]	; (807077c <xTaskIncrementTick+0x154>)
 8070680:	68fb      	ldr	r3, [r7, #12]
 8070682:	6013      	str	r3, [r2, #0]
 8070684:	4b3e      	ldr	r3, [pc, #248]	; (8070780 <xTaskIncrementTick+0x158>)
 8070686:	681b      	ldr	r3, [r3, #0]
 8070688:	3301      	adds	r3, #1
 807068a:	4a3d      	ldr	r2, [pc, #244]	; (8070780 <xTaskIncrementTick+0x158>)
 807068c:	6013      	str	r3, [r2, #0]
 807068e:	f000 fadb 	bl	8070c48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8070692:	4b3c      	ldr	r3, [pc, #240]	; (8070784 <xTaskIncrementTick+0x15c>)
 8070694:	681b      	ldr	r3, [r3, #0]
 8070696:	693a      	ldr	r2, [r7, #16]
 8070698:	429a      	cmp	r2, r3
 807069a:	d349      	bcc.n	8070730 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 807069c:	4b36      	ldr	r3, [pc, #216]	; (8070778 <xTaskIncrementTick+0x150>)
 807069e:	681b      	ldr	r3, [r3, #0]
 80706a0:	681b      	ldr	r3, [r3, #0]
 80706a2:	2b00      	cmp	r3, #0
 80706a4:	d104      	bne.n	80706b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80706a6:	4b37      	ldr	r3, [pc, #220]	; (8070784 <xTaskIncrementTick+0x15c>)
 80706a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80706ac:	601a      	str	r2, [r3, #0]
					break;
 80706ae:	e03f      	b.n	8070730 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80706b0:	4b31      	ldr	r3, [pc, #196]	; (8070778 <xTaskIncrementTick+0x150>)
 80706b2:	681b      	ldr	r3, [r3, #0]
 80706b4:	68db      	ldr	r3, [r3, #12]
 80706b6:	68db      	ldr	r3, [r3, #12]
 80706b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80706ba:	68bb      	ldr	r3, [r7, #8]
 80706bc:	685b      	ldr	r3, [r3, #4]
 80706be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80706c0:	693a      	ldr	r2, [r7, #16]
 80706c2:	687b      	ldr	r3, [r7, #4]
 80706c4:	429a      	cmp	r2, r3
 80706c6:	d203      	bcs.n	80706d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80706c8:	4a2e      	ldr	r2, [pc, #184]	; (8070784 <xTaskIncrementTick+0x15c>)
 80706ca:	687b      	ldr	r3, [r7, #4]
 80706cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80706ce:	e02f      	b.n	8070730 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80706d0:	68bb      	ldr	r3, [r7, #8]
 80706d2:	3304      	adds	r3, #4
 80706d4:	4618      	mov	r0, r3
 80706d6:	f7fe fba1 	bl	806ee1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80706da:	68bb      	ldr	r3, [r7, #8]
 80706dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80706de:	2b00      	cmp	r3, #0
 80706e0:	d004      	beq.n	80706ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80706e2:	68bb      	ldr	r3, [r7, #8]
 80706e4:	3318      	adds	r3, #24
 80706e6:	4618      	mov	r0, r3
 80706e8:	f7fe fb98 	bl	806ee1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80706ec:	68bb      	ldr	r3, [r7, #8]
 80706ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80706f0:	4b25      	ldr	r3, [pc, #148]	; (8070788 <xTaskIncrementTick+0x160>)
 80706f2:	681b      	ldr	r3, [r3, #0]
 80706f4:	429a      	cmp	r2, r3
 80706f6:	d903      	bls.n	8070700 <xTaskIncrementTick+0xd8>
 80706f8:	68bb      	ldr	r3, [r7, #8]
 80706fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80706fc:	4a22      	ldr	r2, [pc, #136]	; (8070788 <xTaskIncrementTick+0x160>)
 80706fe:	6013      	str	r3, [r2, #0]
 8070700:	68bb      	ldr	r3, [r7, #8]
 8070702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070704:	4613      	mov	r3, r2
 8070706:	009b      	lsls	r3, r3, #2
 8070708:	4413      	add	r3, r2
 807070a:	009b      	lsls	r3, r3, #2
 807070c:	4a1f      	ldr	r2, [pc, #124]	; (807078c <xTaskIncrementTick+0x164>)
 807070e:	441a      	add	r2, r3
 8070710:	68bb      	ldr	r3, [r7, #8]
 8070712:	3304      	adds	r3, #4
 8070714:	4619      	mov	r1, r3
 8070716:	4610      	mov	r0, r2
 8070718:	f7fe fb23 	bl	806ed62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 807071c:	68bb      	ldr	r3, [r7, #8]
 807071e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070720:	4b1b      	ldr	r3, [pc, #108]	; (8070790 <xTaskIncrementTick+0x168>)
 8070722:	681b      	ldr	r3, [r3, #0]
 8070724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070726:	429a      	cmp	r2, r3
 8070728:	d3b8      	bcc.n	807069c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 807072a:	2301      	movs	r3, #1
 807072c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 807072e:	e7b5      	b.n	807069c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8070730:	4b17      	ldr	r3, [pc, #92]	; (8070790 <xTaskIncrementTick+0x168>)
 8070732:	681b      	ldr	r3, [r3, #0]
 8070734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070736:	4915      	ldr	r1, [pc, #84]	; (807078c <xTaskIncrementTick+0x164>)
 8070738:	4613      	mov	r3, r2
 807073a:	009b      	lsls	r3, r3, #2
 807073c:	4413      	add	r3, r2
 807073e:	009b      	lsls	r3, r3, #2
 8070740:	440b      	add	r3, r1
 8070742:	681b      	ldr	r3, [r3, #0]
 8070744:	2b01      	cmp	r3, #1
 8070746:	d901      	bls.n	807074c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8070748:	2301      	movs	r3, #1
 807074a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 807074c:	4b11      	ldr	r3, [pc, #68]	; (8070794 <xTaskIncrementTick+0x16c>)
 807074e:	681b      	ldr	r3, [r3, #0]
 8070750:	2b00      	cmp	r3, #0
 8070752:	d007      	beq.n	8070764 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8070754:	2301      	movs	r3, #1
 8070756:	617b      	str	r3, [r7, #20]
 8070758:	e004      	b.n	8070764 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 807075a:	4b0f      	ldr	r3, [pc, #60]	; (8070798 <xTaskIncrementTick+0x170>)
 807075c:	681b      	ldr	r3, [r3, #0]
 807075e:	3301      	adds	r3, #1
 8070760:	4a0d      	ldr	r2, [pc, #52]	; (8070798 <xTaskIncrementTick+0x170>)
 8070762:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8070764:	697b      	ldr	r3, [r7, #20]
}
 8070766:	4618      	mov	r0, r3
 8070768:	3718      	adds	r7, #24
 807076a:	46bd      	mov	sp, r7
 807076c:	bd80      	pop	{r7, pc}
 807076e:	bf00      	nop
 8070770:	200010d0 	.word	0x200010d0
 8070774:	200010ac 	.word	0x200010ac
 8070778:	20001060 	.word	0x20001060
 807077c:	20001064 	.word	0x20001064
 8070780:	200010c0 	.word	0x200010c0
 8070784:	200010c8 	.word	0x200010c8
 8070788:	200010b0 	.word	0x200010b0
 807078c:	20000bd8 	.word	0x20000bd8
 8070790:	20000bd4 	.word	0x20000bd4
 8070794:	200010bc 	.word	0x200010bc
 8070798:	200010b8 	.word	0x200010b8

0807079c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 807079c:	b480      	push	{r7}
 807079e:	b085      	sub	sp, #20
 80707a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80707a2:	4b2a      	ldr	r3, [pc, #168]	; (807084c <vTaskSwitchContext+0xb0>)
 80707a4:	681b      	ldr	r3, [r3, #0]
 80707a6:	2b00      	cmp	r3, #0
 80707a8:	d003      	beq.n	80707b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80707aa:	4b29      	ldr	r3, [pc, #164]	; (8070850 <vTaskSwitchContext+0xb4>)
 80707ac:	2201      	movs	r2, #1
 80707ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80707b0:	e046      	b.n	8070840 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80707b2:	4b27      	ldr	r3, [pc, #156]	; (8070850 <vTaskSwitchContext+0xb4>)
 80707b4:	2200      	movs	r2, #0
 80707b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80707b8:	4b26      	ldr	r3, [pc, #152]	; (8070854 <vTaskSwitchContext+0xb8>)
 80707ba:	681b      	ldr	r3, [r3, #0]
 80707bc:	60fb      	str	r3, [r7, #12]
 80707be:	e010      	b.n	80707e2 <vTaskSwitchContext+0x46>
 80707c0:	68fb      	ldr	r3, [r7, #12]
 80707c2:	2b00      	cmp	r3, #0
 80707c4:	d10a      	bne.n	80707dc <vTaskSwitchContext+0x40>
	__asm volatile
 80707c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80707ca:	f383 8811 	msr	BASEPRI, r3
 80707ce:	f3bf 8f6f 	isb	sy
 80707d2:	f3bf 8f4f 	dsb	sy
 80707d6:	607b      	str	r3, [r7, #4]
}
 80707d8:	bf00      	nop
 80707da:	e7fe      	b.n	80707da <vTaskSwitchContext+0x3e>
 80707dc:	68fb      	ldr	r3, [r7, #12]
 80707de:	3b01      	subs	r3, #1
 80707e0:	60fb      	str	r3, [r7, #12]
 80707e2:	491d      	ldr	r1, [pc, #116]	; (8070858 <vTaskSwitchContext+0xbc>)
 80707e4:	68fa      	ldr	r2, [r7, #12]
 80707e6:	4613      	mov	r3, r2
 80707e8:	009b      	lsls	r3, r3, #2
 80707ea:	4413      	add	r3, r2
 80707ec:	009b      	lsls	r3, r3, #2
 80707ee:	440b      	add	r3, r1
 80707f0:	681b      	ldr	r3, [r3, #0]
 80707f2:	2b00      	cmp	r3, #0
 80707f4:	d0e4      	beq.n	80707c0 <vTaskSwitchContext+0x24>
 80707f6:	68fa      	ldr	r2, [r7, #12]
 80707f8:	4613      	mov	r3, r2
 80707fa:	009b      	lsls	r3, r3, #2
 80707fc:	4413      	add	r3, r2
 80707fe:	009b      	lsls	r3, r3, #2
 8070800:	4a15      	ldr	r2, [pc, #84]	; (8070858 <vTaskSwitchContext+0xbc>)
 8070802:	4413      	add	r3, r2
 8070804:	60bb      	str	r3, [r7, #8]
 8070806:	68bb      	ldr	r3, [r7, #8]
 8070808:	685b      	ldr	r3, [r3, #4]
 807080a:	685a      	ldr	r2, [r3, #4]
 807080c:	68bb      	ldr	r3, [r7, #8]
 807080e:	605a      	str	r2, [r3, #4]
 8070810:	68bb      	ldr	r3, [r7, #8]
 8070812:	685a      	ldr	r2, [r3, #4]
 8070814:	68bb      	ldr	r3, [r7, #8]
 8070816:	3308      	adds	r3, #8
 8070818:	429a      	cmp	r2, r3
 807081a:	d104      	bne.n	8070826 <vTaskSwitchContext+0x8a>
 807081c:	68bb      	ldr	r3, [r7, #8]
 807081e:	685b      	ldr	r3, [r3, #4]
 8070820:	685a      	ldr	r2, [r3, #4]
 8070822:	68bb      	ldr	r3, [r7, #8]
 8070824:	605a      	str	r2, [r3, #4]
 8070826:	68bb      	ldr	r3, [r7, #8]
 8070828:	685b      	ldr	r3, [r3, #4]
 807082a:	68db      	ldr	r3, [r3, #12]
 807082c:	4a0b      	ldr	r2, [pc, #44]	; (807085c <vTaskSwitchContext+0xc0>)
 807082e:	6013      	str	r3, [r2, #0]
 8070830:	4a08      	ldr	r2, [pc, #32]	; (8070854 <vTaskSwitchContext+0xb8>)
 8070832:	68fb      	ldr	r3, [r7, #12]
 8070834:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8070836:	4b09      	ldr	r3, [pc, #36]	; (807085c <vTaskSwitchContext+0xc0>)
 8070838:	681b      	ldr	r3, [r3, #0]
 807083a:	3354      	adds	r3, #84	; 0x54
 807083c:	4a08      	ldr	r2, [pc, #32]	; (8070860 <vTaskSwitchContext+0xc4>)
 807083e:	6013      	str	r3, [r2, #0]
}
 8070840:	bf00      	nop
 8070842:	3714      	adds	r7, #20
 8070844:	46bd      	mov	sp, r7
 8070846:	f85d 7b04 	ldr.w	r7, [sp], #4
 807084a:	4770      	bx	lr
 807084c:	200010d0 	.word	0x200010d0
 8070850:	200010bc 	.word	0x200010bc
 8070854:	200010b0 	.word	0x200010b0
 8070858:	20000bd8 	.word	0x20000bd8
 807085c:	20000bd4 	.word	0x20000bd4
 8070860:	20000028 	.word	0x20000028

08070864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8070864:	b580      	push	{r7, lr}
 8070866:	b084      	sub	sp, #16
 8070868:	af00      	add	r7, sp, #0
 807086a:	6078      	str	r0, [r7, #4]
 807086c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 807086e:	687b      	ldr	r3, [r7, #4]
 8070870:	2b00      	cmp	r3, #0
 8070872:	d10a      	bne.n	807088a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8070874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070878:	f383 8811 	msr	BASEPRI, r3
 807087c:	f3bf 8f6f 	isb	sy
 8070880:	f3bf 8f4f 	dsb	sy
 8070884:	60fb      	str	r3, [r7, #12]
}
 8070886:	bf00      	nop
 8070888:	e7fe      	b.n	8070888 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 807088a:	4b07      	ldr	r3, [pc, #28]	; (80708a8 <vTaskPlaceOnEventList+0x44>)
 807088c:	681b      	ldr	r3, [r3, #0]
 807088e:	3318      	adds	r3, #24
 8070890:	4619      	mov	r1, r3
 8070892:	6878      	ldr	r0, [r7, #4]
 8070894:	f7fe fa89 	bl	806edaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8070898:	2101      	movs	r1, #1
 807089a:	6838      	ldr	r0, [r7, #0]
 807089c:	f000 fd90 	bl	80713c0 <prvAddCurrentTaskToDelayedList>
}
 80708a0:	bf00      	nop
 80708a2:	3710      	adds	r7, #16
 80708a4:	46bd      	mov	sp, r7
 80708a6:	bd80      	pop	{r7, pc}
 80708a8:	20000bd4 	.word	0x20000bd4

080708ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80708ac:	b580      	push	{r7, lr}
 80708ae:	b086      	sub	sp, #24
 80708b0:	af00      	add	r7, sp, #0
 80708b2:	60f8      	str	r0, [r7, #12]
 80708b4:	60b9      	str	r1, [r7, #8]
 80708b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80708b8:	68fb      	ldr	r3, [r7, #12]
 80708ba:	2b00      	cmp	r3, #0
 80708bc:	d10a      	bne.n	80708d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80708be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80708c2:	f383 8811 	msr	BASEPRI, r3
 80708c6:	f3bf 8f6f 	isb	sy
 80708ca:	f3bf 8f4f 	dsb	sy
 80708ce:	617b      	str	r3, [r7, #20]
}
 80708d0:	bf00      	nop
 80708d2:	e7fe      	b.n	80708d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80708d4:	4b0a      	ldr	r3, [pc, #40]	; (8070900 <vTaskPlaceOnEventListRestricted+0x54>)
 80708d6:	681b      	ldr	r3, [r3, #0]
 80708d8:	3318      	adds	r3, #24
 80708da:	4619      	mov	r1, r3
 80708dc:	68f8      	ldr	r0, [r7, #12]
 80708de:	f7fe fa40 	bl	806ed62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80708e2:	687b      	ldr	r3, [r7, #4]
 80708e4:	2b00      	cmp	r3, #0
 80708e6:	d002      	beq.n	80708ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80708e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80708ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80708ee:	6879      	ldr	r1, [r7, #4]
 80708f0:	68b8      	ldr	r0, [r7, #8]
 80708f2:	f000 fd65 	bl	80713c0 <prvAddCurrentTaskToDelayedList>
	}
 80708f6:	bf00      	nop
 80708f8:	3718      	adds	r7, #24
 80708fa:	46bd      	mov	sp, r7
 80708fc:	bd80      	pop	{r7, pc}
 80708fe:	bf00      	nop
 8070900:	20000bd4 	.word	0x20000bd4

08070904 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8070904:	b580      	push	{r7, lr}
 8070906:	b086      	sub	sp, #24
 8070908:	af00      	add	r7, sp, #0
 807090a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 807090c:	687b      	ldr	r3, [r7, #4]
 807090e:	68db      	ldr	r3, [r3, #12]
 8070910:	68db      	ldr	r3, [r3, #12]
 8070912:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8070914:	693b      	ldr	r3, [r7, #16]
 8070916:	2b00      	cmp	r3, #0
 8070918:	d10a      	bne.n	8070930 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 807091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 807091e:	f383 8811 	msr	BASEPRI, r3
 8070922:	f3bf 8f6f 	isb	sy
 8070926:	f3bf 8f4f 	dsb	sy
 807092a:	60fb      	str	r3, [r7, #12]
}
 807092c:	bf00      	nop
 807092e:	e7fe      	b.n	807092e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8070930:	693b      	ldr	r3, [r7, #16]
 8070932:	3318      	adds	r3, #24
 8070934:	4618      	mov	r0, r3
 8070936:	f7fe fa71 	bl	806ee1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 807093a:	4b1e      	ldr	r3, [pc, #120]	; (80709b4 <xTaskRemoveFromEventList+0xb0>)
 807093c:	681b      	ldr	r3, [r3, #0]
 807093e:	2b00      	cmp	r3, #0
 8070940:	d11d      	bne.n	807097e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8070942:	693b      	ldr	r3, [r7, #16]
 8070944:	3304      	adds	r3, #4
 8070946:	4618      	mov	r0, r3
 8070948:	f7fe fa68 	bl	806ee1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 807094c:	693b      	ldr	r3, [r7, #16]
 807094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070950:	4b19      	ldr	r3, [pc, #100]	; (80709b8 <xTaskRemoveFromEventList+0xb4>)
 8070952:	681b      	ldr	r3, [r3, #0]
 8070954:	429a      	cmp	r2, r3
 8070956:	d903      	bls.n	8070960 <xTaskRemoveFromEventList+0x5c>
 8070958:	693b      	ldr	r3, [r7, #16]
 807095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807095c:	4a16      	ldr	r2, [pc, #88]	; (80709b8 <xTaskRemoveFromEventList+0xb4>)
 807095e:	6013      	str	r3, [r2, #0]
 8070960:	693b      	ldr	r3, [r7, #16]
 8070962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070964:	4613      	mov	r3, r2
 8070966:	009b      	lsls	r3, r3, #2
 8070968:	4413      	add	r3, r2
 807096a:	009b      	lsls	r3, r3, #2
 807096c:	4a13      	ldr	r2, [pc, #76]	; (80709bc <xTaskRemoveFromEventList+0xb8>)
 807096e:	441a      	add	r2, r3
 8070970:	693b      	ldr	r3, [r7, #16]
 8070972:	3304      	adds	r3, #4
 8070974:	4619      	mov	r1, r3
 8070976:	4610      	mov	r0, r2
 8070978:	f7fe f9f3 	bl	806ed62 <vListInsertEnd>
 807097c:	e005      	b.n	807098a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 807097e:	693b      	ldr	r3, [r7, #16]
 8070980:	3318      	adds	r3, #24
 8070982:	4619      	mov	r1, r3
 8070984:	480e      	ldr	r0, [pc, #56]	; (80709c0 <xTaskRemoveFromEventList+0xbc>)
 8070986:	f7fe f9ec 	bl	806ed62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 807098a:	693b      	ldr	r3, [r7, #16]
 807098c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 807098e:	4b0d      	ldr	r3, [pc, #52]	; (80709c4 <xTaskRemoveFromEventList+0xc0>)
 8070990:	681b      	ldr	r3, [r3, #0]
 8070992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070994:	429a      	cmp	r2, r3
 8070996:	d905      	bls.n	80709a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8070998:	2301      	movs	r3, #1
 807099a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 807099c:	4b0a      	ldr	r3, [pc, #40]	; (80709c8 <xTaskRemoveFromEventList+0xc4>)
 807099e:	2201      	movs	r2, #1
 80709a0:	601a      	str	r2, [r3, #0]
 80709a2:	e001      	b.n	80709a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80709a4:	2300      	movs	r3, #0
 80709a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80709a8:	697b      	ldr	r3, [r7, #20]
}
 80709aa:	4618      	mov	r0, r3
 80709ac:	3718      	adds	r7, #24
 80709ae:	46bd      	mov	sp, r7
 80709b0:	bd80      	pop	{r7, pc}
 80709b2:	bf00      	nop
 80709b4:	200010d0 	.word	0x200010d0
 80709b8:	200010b0 	.word	0x200010b0
 80709bc:	20000bd8 	.word	0x20000bd8
 80709c0:	20001068 	.word	0x20001068
 80709c4:	20000bd4 	.word	0x20000bd4
 80709c8:	200010bc 	.word	0x200010bc

080709cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80709cc:	b480      	push	{r7}
 80709ce:	b083      	sub	sp, #12
 80709d0:	af00      	add	r7, sp, #0
 80709d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80709d4:	4b06      	ldr	r3, [pc, #24]	; (80709f0 <vTaskInternalSetTimeOutState+0x24>)
 80709d6:	681a      	ldr	r2, [r3, #0]
 80709d8:	687b      	ldr	r3, [r7, #4]
 80709da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80709dc:	4b05      	ldr	r3, [pc, #20]	; (80709f4 <vTaskInternalSetTimeOutState+0x28>)
 80709de:	681a      	ldr	r2, [r3, #0]
 80709e0:	687b      	ldr	r3, [r7, #4]
 80709e2:	605a      	str	r2, [r3, #4]
}
 80709e4:	bf00      	nop
 80709e6:	370c      	adds	r7, #12
 80709e8:	46bd      	mov	sp, r7
 80709ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80709ee:	4770      	bx	lr
 80709f0:	200010c0 	.word	0x200010c0
 80709f4:	200010ac 	.word	0x200010ac

080709f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80709f8:	b580      	push	{r7, lr}
 80709fa:	b088      	sub	sp, #32
 80709fc:	af00      	add	r7, sp, #0
 80709fe:	6078      	str	r0, [r7, #4]
 8070a00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8070a02:	687b      	ldr	r3, [r7, #4]
 8070a04:	2b00      	cmp	r3, #0
 8070a06:	d10a      	bne.n	8070a1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8070a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070a0c:	f383 8811 	msr	BASEPRI, r3
 8070a10:	f3bf 8f6f 	isb	sy
 8070a14:	f3bf 8f4f 	dsb	sy
 8070a18:	613b      	str	r3, [r7, #16]
}
 8070a1a:	bf00      	nop
 8070a1c:	e7fe      	b.n	8070a1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8070a1e:	683b      	ldr	r3, [r7, #0]
 8070a20:	2b00      	cmp	r3, #0
 8070a22:	d10a      	bne.n	8070a3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8070a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070a28:	f383 8811 	msr	BASEPRI, r3
 8070a2c:	f3bf 8f6f 	isb	sy
 8070a30:	f3bf 8f4f 	dsb	sy
 8070a34:	60fb      	str	r3, [r7, #12]
}
 8070a36:	bf00      	nop
 8070a38:	e7fe      	b.n	8070a38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8070a3a:	f001 fa4b 	bl	8071ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8070a3e:	4b1d      	ldr	r3, [pc, #116]	; (8070ab4 <xTaskCheckForTimeOut+0xbc>)
 8070a40:	681b      	ldr	r3, [r3, #0]
 8070a42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8070a44:	687b      	ldr	r3, [r7, #4]
 8070a46:	685b      	ldr	r3, [r3, #4]
 8070a48:	69ba      	ldr	r2, [r7, #24]
 8070a4a:	1ad3      	subs	r3, r2, r3
 8070a4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8070a4e:	683b      	ldr	r3, [r7, #0]
 8070a50:	681b      	ldr	r3, [r3, #0]
 8070a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8070a56:	d102      	bne.n	8070a5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8070a58:	2300      	movs	r3, #0
 8070a5a:	61fb      	str	r3, [r7, #28]
 8070a5c:	e023      	b.n	8070aa6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8070a5e:	687b      	ldr	r3, [r7, #4]
 8070a60:	681a      	ldr	r2, [r3, #0]
 8070a62:	4b15      	ldr	r3, [pc, #84]	; (8070ab8 <xTaskCheckForTimeOut+0xc0>)
 8070a64:	681b      	ldr	r3, [r3, #0]
 8070a66:	429a      	cmp	r2, r3
 8070a68:	d007      	beq.n	8070a7a <xTaskCheckForTimeOut+0x82>
 8070a6a:	687b      	ldr	r3, [r7, #4]
 8070a6c:	685b      	ldr	r3, [r3, #4]
 8070a6e:	69ba      	ldr	r2, [r7, #24]
 8070a70:	429a      	cmp	r2, r3
 8070a72:	d302      	bcc.n	8070a7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8070a74:	2301      	movs	r3, #1
 8070a76:	61fb      	str	r3, [r7, #28]
 8070a78:	e015      	b.n	8070aa6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8070a7a:	683b      	ldr	r3, [r7, #0]
 8070a7c:	681b      	ldr	r3, [r3, #0]
 8070a7e:	697a      	ldr	r2, [r7, #20]
 8070a80:	429a      	cmp	r2, r3
 8070a82:	d20b      	bcs.n	8070a9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8070a84:	683b      	ldr	r3, [r7, #0]
 8070a86:	681a      	ldr	r2, [r3, #0]
 8070a88:	697b      	ldr	r3, [r7, #20]
 8070a8a:	1ad2      	subs	r2, r2, r3
 8070a8c:	683b      	ldr	r3, [r7, #0]
 8070a8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8070a90:	6878      	ldr	r0, [r7, #4]
 8070a92:	f7ff ff9b 	bl	80709cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8070a96:	2300      	movs	r3, #0
 8070a98:	61fb      	str	r3, [r7, #28]
 8070a9a:	e004      	b.n	8070aa6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8070a9c:	683b      	ldr	r3, [r7, #0]
 8070a9e:	2200      	movs	r2, #0
 8070aa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8070aa2:	2301      	movs	r3, #1
 8070aa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8070aa6:	f001 fa45 	bl	8071f34 <vPortExitCritical>

	return xReturn;
 8070aaa:	69fb      	ldr	r3, [r7, #28]
}
 8070aac:	4618      	mov	r0, r3
 8070aae:	3720      	adds	r7, #32
 8070ab0:	46bd      	mov	sp, r7
 8070ab2:	bd80      	pop	{r7, pc}
 8070ab4:	200010ac 	.word	0x200010ac
 8070ab8:	200010c0 	.word	0x200010c0

08070abc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8070abc:	b480      	push	{r7}
 8070abe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8070ac0:	4b03      	ldr	r3, [pc, #12]	; (8070ad0 <vTaskMissedYield+0x14>)
 8070ac2:	2201      	movs	r2, #1
 8070ac4:	601a      	str	r2, [r3, #0]
}
 8070ac6:	bf00      	nop
 8070ac8:	46bd      	mov	sp, r7
 8070aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070ace:	4770      	bx	lr
 8070ad0:	200010bc 	.word	0x200010bc

08070ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8070ad4:	b580      	push	{r7, lr}
 8070ad6:	b082      	sub	sp, #8
 8070ad8:	af00      	add	r7, sp, #0
 8070ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8070adc:	f000 f852 	bl	8070b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8070ae0:	4b06      	ldr	r3, [pc, #24]	; (8070afc <prvIdleTask+0x28>)
 8070ae2:	681b      	ldr	r3, [r3, #0]
 8070ae4:	2b01      	cmp	r3, #1
 8070ae6:	d9f9      	bls.n	8070adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8070ae8:	4b05      	ldr	r3, [pc, #20]	; (8070b00 <prvIdleTask+0x2c>)
 8070aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8070aee:	601a      	str	r2, [r3, #0]
 8070af0:	f3bf 8f4f 	dsb	sy
 8070af4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8070af8:	e7f0      	b.n	8070adc <prvIdleTask+0x8>
 8070afa:	bf00      	nop
 8070afc:	20000bd8 	.word	0x20000bd8
 8070b00:	e000ed04 	.word	0xe000ed04

08070b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8070b04:	b580      	push	{r7, lr}
 8070b06:	b082      	sub	sp, #8
 8070b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8070b0a:	2300      	movs	r3, #0
 8070b0c:	607b      	str	r3, [r7, #4]
 8070b0e:	e00c      	b.n	8070b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8070b10:	687a      	ldr	r2, [r7, #4]
 8070b12:	4613      	mov	r3, r2
 8070b14:	009b      	lsls	r3, r3, #2
 8070b16:	4413      	add	r3, r2
 8070b18:	009b      	lsls	r3, r3, #2
 8070b1a:	4a12      	ldr	r2, [pc, #72]	; (8070b64 <prvInitialiseTaskLists+0x60>)
 8070b1c:	4413      	add	r3, r2
 8070b1e:	4618      	mov	r0, r3
 8070b20:	f7fe f8f2 	bl	806ed08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8070b24:	687b      	ldr	r3, [r7, #4]
 8070b26:	3301      	adds	r3, #1
 8070b28:	607b      	str	r3, [r7, #4]
 8070b2a:	687b      	ldr	r3, [r7, #4]
 8070b2c:	2b37      	cmp	r3, #55	; 0x37
 8070b2e:	d9ef      	bls.n	8070b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8070b30:	480d      	ldr	r0, [pc, #52]	; (8070b68 <prvInitialiseTaskLists+0x64>)
 8070b32:	f7fe f8e9 	bl	806ed08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8070b36:	480d      	ldr	r0, [pc, #52]	; (8070b6c <prvInitialiseTaskLists+0x68>)
 8070b38:	f7fe f8e6 	bl	806ed08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8070b3c:	480c      	ldr	r0, [pc, #48]	; (8070b70 <prvInitialiseTaskLists+0x6c>)
 8070b3e:	f7fe f8e3 	bl	806ed08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8070b42:	480c      	ldr	r0, [pc, #48]	; (8070b74 <prvInitialiseTaskLists+0x70>)
 8070b44:	f7fe f8e0 	bl	806ed08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8070b48:	480b      	ldr	r0, [pc, #44]	; (8070b78 <prvInitialiseTaskLists+0x74>)
 8070b4a:	f7fe f8dd 	bl	806ed08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8070b4e:	4b0b      	ldr	r3, [pc, #44]	; (8070b7c <prvInitialiseTaskLists+0x78>)
 8070b50:	4a05      	ldr	r2, [pc, #20]	; (8070b68 <prvInitialiseTaskLists+0x64>)
 8070b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8070b54:	4b0a      	ldr	r3, [pc, #40]	; (8070b80 <prvInitialiseTaskLists+0x7c>)
 8070b56:	4a05      	ldr	r2, [pc, #20]	; (8070b6c <prvInitialiseTaskLists+0x68>)
 8070b58:	601a      	str	r2, [r3, #0]
}
 8070b5a:	bf00      	nop
 8070b5c:	3708      	adds	r7, #8
 8070b5e:	46bd      	mov	sp, r7
 8070b60:	bd80      	pop	{r7, pc}
 8070b62:	bf00      	nop
 8070b64:	20000bd8 	.word	0x20000bd8
 8070b68:	20001038 	.word	0x20001038
 8070b6c:	2000104c 	.word	0x2000104c
 8070b70:	20001068 	.word	0x20001068
 8070b74:	2000107c 	.word	0x2000107c
 8070b78:	20001094 	.word	0x20001094
 8070b7c:	20001060 	.word	0x20001060
 8070b80:	20001064 	.word	0x20001064

08070b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8070b84:	b580      	push	{r7, lr}
 8070b86:	b082      	sub	sp, #8
 8070b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8070b8a:	e019      	b.n	8070bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8070b8c:	f001 f9a2 	bl	8071ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070b90:	4b10      	ldr	r3, [pc, #64]	; (8070bd4 <prvCheckTasksWaitingTermination+0x50>)
 8070b92:	68db      	ldr	r3, [r3, #12]
 8070b94:	68db      	ldr	r3, [r3, #12]
 8070b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8070b98:	687b      	ldr	r3, [r7, #4]
 8070b9a:	3304      	adds	r3, #4
 8070b9c:	4618      	mov	r0, r3
 8070b9e:	f7fe f93d 	bl	806ee1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8070ba2:	4b0d      	ldr	r3, [pc, #52]	; (8070bd8 <prvCheckTasksWaitingTermination+0x54>)
 8070ba4:	681b      	ldr	r3, [r3, #0]
 8070ba6:	3b01      	subs	r3, #1
 8070ba8:	4a0b      	ldr	r2, [pc, #44]	; (8070bd8 <prvCheckTasksWaitingTermination+0x54>)
 8070baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8070bac:	4b0b      	ldr	r3, [pc, #44]	; (8070bdc <prvCheckTasksWaitingTermination+0x58>)
 8070bae:	681b      	ldr	r3, [r3, #0]
 8070bb0:	3b01      	subs	r3, #1
 8070bb2:	4a0a      	ldr	r2, [pc, #40]	; (8070bdc <prvCheckTasksWaitingTermination+0x58>)
 8070bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8070bb6:	f001 f9bd 	bl	8071f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8070bba:	6878      	ldr	r0, [r7, #4]
 8070bbc:	f000 f810 	bl	8070be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8070bc0:	4b06      	ldr	r3, [pc, #24]	; (8070bdc <prvCheckTasksWaitingTermination+0x58>)
 8070bc2:	681b      	ldr	r3, [r3, #0]
 8070bc4:	2b00      	cmp	r3, #0
 8070bc6:	d1e1      	bne.n	8070b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8070bc8:	bf00      	nop
 8070bca:	bf00      	nop
 8070bcc:	3708      	adds	r7, #8
 8070bce:	46bd      	mov	sp, r7
 8070bd0:	bd80      	pop	{r7, pc}
 8070bd2:	bf00      	nop
 8070bd4:	2000107c 	.word	0x2000107c
 8070bd8:	200010a8 	.word	0x200010a8
 8070bdc:	20001090 	.word	0x20001090

08070be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8070be0:	b580      	push	{r7, lr}
 8070be2:	b084      	sub	sp, #16
 8070be4:	af00      	add	r7, sp, #0
 8070be6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8070be8:	687b      	ldr	r3, [r7, #4]
 8070bea:	3354      	adds	r3, #84	; 0x54
 8070bec:	4618      	mov	r0, r3
 8070bee:	f002 fc99 	bl	8073524 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8070bf2:	687b      	ldr	r3, [r7, #4]
 8070bf4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8070bf8:	2b00      	cmp	r3, #0
 8070bfa:	d108      	bne.n	8070c0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8070bfc:	687b      	ldr	r3, [r7, #4]
 8070bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8070c00:	4618      	mov	r0, r3
 8070c02:	f001 fb55 	bl	80722b0 <vPortFree>
				vPortFree( pxTCB );
 8070c06:	6878      	ldr	r0, [r7, #4]
 8070c08:	f001 fb52 	bl	80722b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8070c0c:	e018      	b.n	8070c40 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8070c0e:	687b      	ldr	r3, [r7, #4]
 8070c10:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8070c14:	2b01      	cmp	r3, #1
 8070c16:	d103      	bne.n	8070c20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8070c18:	6878      	ldr	r0, [r7, #4]
 8070c1a:	f001 fb49 	bl	80722b0 <vPortFree>
	}
 8070c1e:	e00f      	b.n	8070c40 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8070c20:	687b      	ldr	r3, [r7, #4]
 8070c22:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8070c26:	2b02      	cmp	r3, #2
 8070c28:	d00a      	beq.n	8070c40 <prvDeleteTCB+0x60>
	__asm volatile
 8070c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070c2e:	f383 8811 	msr	BASEPRI, r3
 8070c32:	f3bf 8f6f 	isb	sy
 8070c36:	f3bf 8f4f 	dsb	sy
 8070c3a:	60fb      	str	r3, [r7, #12]
}
 8070c3c:	bf00      	nop
 8070c3e:	e7fe      	b.n	8070c3e <prvDeleteTCB+0x5e>
	}
 8070c40:	bf00      	nop
 8070c42:	3710      	adds	r7, #16
 8070c44:	46bd      	mov	sp, r7
 8070c46:	bd80      	pop	{r7, pc}

08070c48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8070c48:	b480      	push	{r7}
 8070c4a:	b083      	sub	sp, #12
 8070c4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8070c4e:	4b0c      	ldr	r3, [pc, #48]	; (8070c80 <prvResetNextTaskUnblockTime+0x38>)
 8070c50:	681b      	ldr	r3, [r3, #0]
 8070c52:	681b      	ldr	r3, [r3, #0]
 8070c54:	2b00      	cmp	r3, #0
 8070c56:	d104      	bne.n	8070c62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8070c58:	4b0a      	ldr	r3, [pc, #40]	; (8070c84 <prvResetNextTaskUnblockTime+0x3c>)
 8070c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8070c5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8070c60:	e008      	b.n	8070c74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070c62:	4b07      	ldr	r3, [pc, #28]	; (8070c80 <prvResetNextTaskUnblockTime+0x38>)
 8070c64:	681b      	ldr	r3, [r3, #0]
 8070c66:	68db      	ldr	r3, [r3, #12]
 8070c68:	68db      	ldr	r3, [r3, #12]
 8070c6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8070c6c:	687b      	ldr	r3, [r7, #4]
 8070c6e:	685b      	ldr	r3, [r3, #4]
 8070c70:	4a04      	ldr	r2, [pc, #16]	; (8070c84 <prvResetNextTaskUnblockTime+0x3c>)
 8070c72:	6013      	str	r3, [r2, #0]
}
 8070c74:	bf00      	nop
 8070c76:	370c      	adds	r7, #12
 8070c78:	46bd      	mov	sp, r7
 8070c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070c7e:	4770      	bx	lr
 8070c80:	20001060 	.word	0x20001060
 8070c84:	200010c8 	.word	0x200010c8

08070c88 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8070c88:	b480      	push	{r7}
 8070c8a:	b083      	sub	sp, #12
 8070c8c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8070c8e:	4b05      	ldr	r3, [pc, #20]	; (8070ca4 <xTaskGetCurrentTaskHandle+0x1c>)
 8070c90:	681b      	ldr	r3, [r3, #0]
 8070c92:	607b      	str	r3, [r7, #4]

		return xReturn;
 8070c94:	687b      	ldr	r3, [r7, #4]
	}
 8070c96:	4618      	mov	r0, r3
 8070c98:	370c      	adds	r7, #12
 8070c9a:	46bd      	mov	sp, r7
 8070c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070ca0:	4770      	bx	lr
 8070ca2:	bf00      	nop
 8070ca4:	20000bd4 	.word	0x20000bd4

08070ca8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8070ca8:	b480      	push	{r7}
 8070caa:	b083      	sub	sp, #12
 8070cac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8070cae:	4b0b      	ldr	r3, [pc, #44]	; (8070cdc <xTaskGetSchedulerState+0x34>)
 8070cb0:	681b      	ldr	r3, [r3, #0]
 8070cb2:	2b00      	cmp	r3, #0
 8070cb4:	d102      	bne.n	8070cbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8070cb6:	2301      	movs	r3, #1
 8070cb8:	607b      	str	r3, [r7, #4]
 8070cba:	e008      	b.n	8070cce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8070cbc:	4b08      	ldr	r3, [pc, #32]	; (8070ce0 <xTaskGetSchedulerState+0x38>)
 8070cbe:	681b      	ldr	r3, [r3, #0]
 8070cc0:	2b00      	cmp	r3, #0
 8070cc2:	d102      	bne.n	8070cca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8070cc4:	2302      	movs	r3, #2
 8070cc6:	607b      	str	r3, [r7, #4]
 8070cc8:	e001      	b.n	8070cce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8070cca:	2300      	movs	r3, #0
 8070ccc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8070cce:	687b      	ldr	r3, [r7, #4]
	}
 8070cd0:	4618      	mov	r0, r3
 8070cd2:	370c      	adds	r7, #12
 8070cd4:	46bd      	mov	sp, r7
 8070cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070cda:	4770      	bx	lr
 8070cdc:	200010b4 	.word	0x200010b4
 8070ce0:	200010d0 	.word	0x200010d0

08070ce4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8070ce4:	b580      	push	{r7, lr}
 8070ce6:	b084      	sub	sp, #16
 8070ce8:	af00      	add	r7, sp, #0
 8070cea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8070cec:	687b      	ldr	r3, [r7, #4]
 8070cee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8070cf0:	2300      	movs	r3, #0
 8070cf2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8070cf4:	687b      	ldr	r3, [r7, #4]
 8070cf6:	2b00      	cmp	r3, #0
 8070cf8:	d051      	beq.n	8070d9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8070cfa:	68bb      	ldr	r3, [r7, #8]
 8070cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070cfe:	4b2a      	ldr	r3, [pc, #168]	; (8070da8 <xTaskPriorityInherit+0xc4>)
 8070d00:	681b      	ldr	r3, [r3, #0]
 8070d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070d04:	429a      	cmp	r2, r3
 8070d06:	d241      	bcs.n	8070d8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8070d08:	68bb      	ldr	r3, [r7, #8]
 8070d0a:	699b      	ldr	r3, [r3, #24]
 8070d0c:	2b00      	cmp	r3, #0
 8070d0e:	db06      	blt.n	8070d1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8070d10:	4b25      	ldr	r3, [pc, #148]	; (8070da8 <xTaskPriorityInherit+0xc4>)
 8070d12:	681b      	ldr	r3, [r3, #0]
 8070d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070d16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8070d1a:	68bb      	ldr	r3, [r7, #8]
 8070d1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8070d1e:	68bb      	ldr	r3, [r7, #8]
 8070d20:	6959      	ldr	r1, [r3, #20]
 8070d22:	68bb      	ldr	r3, [r7, #8]
 8070d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070d26:	4613      	mov	r3, r2
 8070d28:	009b      	lsls	r3, r3, #2
 8070d2a:	4413      	add	r3, r2
 8070d2c:	009b      	lsls	r3, r3, #2
 8070d2e:	4a1f      	ldr	r2, [pc, #124]	; (8070dac <xTaskPriorityInherit+0xc8>)
 8070d30:	4413      	add	r3, r2
 8070d32:	4299      	cmp	r1, r3
 8070d34:	d122      	bne.n	8070d7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8070d36:	68bb      	ldr	r3, [r7, #8]
 8070d38:	3304      	adds	r3, #4
 8070d3a:	4618      	mov	r0, r3
 8070d3c:	f7fe f86e 	bl	806ee1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8070d40:	4b19      	ldr	r3, [pc, #100]	; (8070da8 <xTaskPriorityInherit+0xc4>)
 8070d42:	681b      	ldr	r3, [r3, #0]
 8070d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070d46:	68bb      	ldr	r3, [r7, #8]
 8070d48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8070d4a:	68bb      	ldr	r3, [r7, #8]
 8070d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070d4e:	4b18      	ldr	r3, [pc, #96]	; (8070db0 <xTaskPriorityInherit+0xcc>)
 8070d50:	681b      	ldr	r3, [r3, #0]
 8070d52:	429a      	cmp	r2, r3
 8070d54:	d903      	bls.n	8070d5e <xTaskPriorityInherit+0x7a>
 8070d56:	68bb      	ldr	r3, [r7, #8]
 8070d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070d5a:	4a15      	ldr	r2, [pc, #84]	; (8070db0 <xTaskPriorityInherit+0xcc>)
 8070d5c:	6013      	str	r3, [r2, #0]
 8070d5e:	68bb      	ldr	r3, [r7, #8]
 8070d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070d62:	4613      	mov	r3, r2
 8070d64:	009b      	lsls	r3, r3, #2
 8070d66:	4413      	add	r3, r2
 8070d68:	009b      	lsls	r3, r3, #2
 8070d6a:	4a10      	ldr	r2, [pc, #64]	; (8070dac <xTaskPriorityInherit+0xc8>)
 8070d6c:	441a      	add	r2, r3
 8070d6e:	68bb      	ldr	r3, [r7, #8]
 8070d70:	3304      	adds	r3, #4
 8070d72:	4619      	mov	r1, r3
 8070d74:	4610      	mov	r0, r2
 8070d76:	f7fd fff4 	bl	806ed62 <vListInsertEnd>
 8070d7a:	e004      	b.n	8070d86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8070d7c:	4b0a      	ldr	r3, [pc, #40]	; (8070da8 <xTaskPriorityInherit+0xc4>)
 8070d7e:	681b      	ldr	r3, [r3, #0]
 8070d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070d82:	68bb      	ldr	r3, [r7, #8]
 8070d84:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8070d86:	2301      	movs	r3, #1
 8070d88:	60fb      	str	r3, [r7, #12]
 8070d8a:	e008      	b.n	8070d9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8070d8c:	68bb      	ldr	r3, [r7, #8]
 8070d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8070d90:	4b05      	ldr	r3, [pc, #20]	; (8070da8 <xTaskPriorityInherit+0xc4>)
 8070d92:	681b      	ldr	r3, [r3, #0]
 8070d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070d96:	429a      	cmp	r2, r3
 8070d98:	d201      	bcs.n	8070d9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8070d9a:	2301      	movs	r3, #1
 8070d9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8070d9e:	68fb      	ldr	r3, [r7, #12]
	}
 8070da0:	4618      	mov	r0, r3
 8070da2:	3710      	adds	r7, #16
 8070da4:	46bd      	mov	sp, r7
 8070da6:	bd80      	pop	{r7, pc}
 8070da8:	20000bd4 	.word	0x20000bd4
 8070dac:	20000bd8 	.word	0x20000bd8
 8070db0:	200010b0 	.word	0x200010b0

08070db4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8070db4:	b580      	push	{r7, lr}
 8070db6:	b086      	sub	sp, #24
 8070db8:	af00      	add	r7, sp, #0
 8070dba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8070dbc:	687b      	ldr	r3, [r7, #4]
 8070dbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8070dc0:	2300      	movs	r3, #0
 8070dc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8070dc4:	687b      	ldr	r3, [r7, #4]
 8070dc6:	2b00      	cmp	r3, #0
 8070dc8:	d056      	beq.n	8070e78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8070dca:	4b2e      	ldr	r3, [pc, #184]	; (8070e84 <xTaskPriorityDisinherit+0xd0>)
 8070dcc:	681b      	ldr	r3, [r3, #0]
 8070dce:	693a      	ldr	r2, [r7, #16]
 8070dd0:	429a      	cmp	r2, r3
 8070dd2:	d00a      	beq.n	8070dea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8070dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070dd8:	f383 8811 	msr	BASEPRI, r3
 8070ddc:	f3bf 8f6f 	isb	sy
 8070de0:	f3bf 8f4f 	dsb	sy
 8070de4:	60fb      	str	r3, [r7, #12]
}
 8070de6:	bf00      	nop
 8070de8:	e7fe      	b.n	8070de8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8070dea:	693b      	ldr	r3, [r7, #16]
 8070dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070dee:	2b00      	cmp	r3, #0
 8070df0:	d10a      	bne.n	8070e08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8070df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070df6:	f383 8811 	msr	BASEPRI, r3
 8070dfa:	f3bf 8f6f 	isb	sy
 8070dfe:	f3bf 8f4f 	dsb	sy
 8070e02:	60bb      	str	r3, [r7, #8]
}
 8070e04:	bf00      	nop
 8070e06:	e7fe      	b.n	8070e06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8070e08:	693b      	ldr	r3, [r7, #16]
 8070e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070e0c:	1e5a      	subs	r2, r3, #1
 8070e0e:	693b      	ldr	r3, [r7, #16]
 8070e10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8070e12:	693b      	ldr	r3, [r7, #16]
 8070e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070e16:	693b      	ldr	r3, [r7, #16]
 8070e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8070e1a:	429a      	cmp	r2, r3
 8070e1c:	d02c      	beq.n	8070e78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8070e1e:	693b      	ldr	r3, [r7, #16]
 8070e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070e22:	2b00      	cmp	r3, #0
 8070e24:	d128      	bne.n	8070e78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8070e26:	693b      	ldr	r3, [r7, #16]
 8070e28:	3304      	adds	r3, #4
 8070e2a:	4618      	mov	r0, r3
 8070e2c:	f7fd fff6 	bl	806ee1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8070e30:	693b      	ldr	r3, [r7, #16]
 8070e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8070e34:	693b      	ldr	r3, [r7, #16]
 8070e36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8070e38:	693b      	ldr	r3, [r7, #16]
 8070e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070e3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8070e40:	693b      	ldr	r3, [r7, #16]
 8070e42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8070e44:	693b      	ldr	r3, [r7, #16]
 8070e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070e48:	4b0f      	ldr	r3, [pc, #60]	; (8070e88 <xTaskPriorityDisinherit+0xd4>)
 8070e4a:	681b      	ldr	r3, [r3, #0]
 8070e4c:	429a      	cmp	r2, r3
 8070e4e:	d903      	bls.n	8070e58 <xTaskPriorityDisinherit+0xa4>
 8070e50:	693b      	ldr	r3, [r7, #16]
 8070e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070e54:	4a0c      	ldr	r2, [pc, #48]	; (8070e88 <xTaskPriorityDisinherit+0xd4>)
 8070e56:	6013      	str	r3, [r2, #0]
 8070e58:	693b      	ldr	r3, [r7, #16]
 8070e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070e5c:	4613      	mov	r3, r2
 8070e5e:	009b      	lsls	r3, r3, #2
 8070e60:	4413      	add	r3, r2
 8070e62:	009b      	lsls	r3, r3, #2
 8070e64:	4a09      	ldr	r2, [pc, #36]	; (8070e8c <xTaskPriorityDisinherit+0xd8>)
 8070e66:	441a      	add	r2, r3
 8070e68:	693b      	ldr	r3, [r7, #16]
 8070e6a:	3304      	adds	r3, #4
 8070e6c:	4619      	mov	r1, r3
 8070e6e:	4610      	mov	r0, r2
 8070e70:	f7fd ff77 	bl	806ed62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8070e74:	2301      	movs	r3, #1
 8070e76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8070e78:	697b      	ldr	r3, [r7, #20]
	}
 8070e7a:	4618      	mov	r0, r3
 8070e7c:	3718      	adds	r7, #24
 8070e7e:	46bd      	mov	sp, r7
 8070e80:	bd80      	pop	{r7, pc}
 8070e82:	bf00      	nop
 8070e84:	20000bd4 	.word	0x20000bd4
 8070e88:	200010b0 	.word	0x200010b0
 8070e8c:	20000bd8 	.word	0x20000bd8

08070e90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8070e90:	b580      	push	{r7, lr}
 8070e92:	b088      	sub	sp, #32
 8070e94:	af00      	add	r7, sp, #0
 8070e96:	6078      	str	r0, [r7, #4]
 8070e98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8070e9a:	687b      	ldr	r3, [r7, #4]
 8070e9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8070e9e:	2301      	movs	r3, #1
 8070ea0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8070ea2:	687b      	ldr	r3, [r7, #4]
 8070ea4:	2b00      	cmp	r3, #0
 8070ea6:	d06a      	beq.n	8070f7e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8070ea8:	69bb      	ldr	r3, [r7, #24]
 8070eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070eac:	2b00      	cmp	r3, #0
 8070eae:	d10a      	bne.n	8070ec6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8070eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070eb4:	f383 8811 	msr	BASEPRI, r3
 8070eb8:	f3bf 8f6f 	isb	sy
 8070ebc:	f3bf 8f4f 	dsb	sy
 8070ec0:	60fb      	str	r3, [r7, #12]
}
 8070ec2:	bf00      	nop
 8070ec4:	e7fe      	b.n	8070ec4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8070ec6:	69bb      	ldr	r3, [r7, #24]
 8070ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8070eca:	683a      	ldr	r2, [r7, #0]
 8070ecc:	429a      	cmp	r2, r3
 8070ece:	d902      	bls.n	8070ed6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8070ed0:	683b      	ldr	r3, [r7, #0]
 8070ed2:	61fb      	str	r3, [r7, #28]
 8070ed4:	e002      	b.n	8070edc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8070ed6:	69bb      	ldr	r3, [r7, #24]
 8070ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8070eda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8070edc:	69bb      	ldr	r3, [r7, #24]
 8070ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070ee0:	69fa      	ldr	r2, [r7, #28]
 8070ee2:	429a      	cmp	r2, r3
 8070ee4:	d04b      	beq.n	8070f7e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8070ee6:	69bb      	ldr	r3, [r7, #24]
 8070ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070eea:	697a      	ldr	r2, [r7, #20]
 8070eec:	429a      	cmp	r2, r3
 8070eee:	d146      	bne.n	8070f7e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8070ef0:	4b25      	ldr	r3, [pc, #148]	; (8070f88 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8070ef2:	681b      	ldr	r3, [r3, #0]
 8070ef4:	69ba      	ldr	r2, [r7, #24]
 8070ef6:	429a      	cmp	r2, r3
 8070ef8:	d10a      	bne.n	8070f10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8070efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070efe:	f383 8811 	msr	BASEPRI, r3
 8070f02:	f3bf 8f6f 	isb	sy
 8070f06:	f3bf 8f4f 	dsb	sy
 8070f0a:	60bb      	str	r3, [r7, #8]
}
 8070f0c:	bf00      	nop
 8070f0e:	e7fe      	b.n	8070f0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8070f10:	69bb      	ldr	r3, [r7, #24]
 8070f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070f14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8070f16:	69bb      	ldr	r3, [r7, #24]
 8070f18:	69fa      	ldr	r2, [r7, #28]
 8070f1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8070f1c:	69bb      	ldr	r3, [r7, #24]
 8070f1e:	699b      	ldr	r3, [r3, #24]
 8070f20:	2b00      	cmp	r3, #0
 8070f22:	db04      	blt.n	8070f2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8070f24:	69fb      	ldr	r3, [r7, #28]
 8070f26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8070f2a:	69bb      	ldr	r3, [r7, #24]
 8070f2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8070f2e:	69bb      	ldr	r3, [r7, #24]
 8070f30:	6959      	ldr	r1, [r3, #20]
 8070f32:	693a      	ldr	r2, [r7, #16]
 8070f34:	4613      	mov	r3, r2
 8070f36:	009b      	lsls	r3, r3, #2
 8070f38:	4413      	add	r3, r2
 8070f3a:	009b      	lsls	r3, r3, #2
 8070f3c:	4a13      	ldr	r2, [pc, #76]	; (8070f8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8070f3e:	4413      	add	r3, r2
 8070f40:	4299      	cmp	r1, r3
 8070f42:	d11c      	bne.n	8070f7e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8070f44:	69bb      	ldr	r3, [r7, #24]
 8070f46:	3304      	adds	r3, #4
 8070f48:	4618      	mov	r0, r3
 8070f4a:	f7fd ff67 	bl	806ee1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8070f4e:	69bb      	ldr	r3, [r7, #24]
 8070f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070f52:	4b0f      	ldr	r3, [pc, #60]	; (8070f90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8070f54:	681b      	ldr	r3, [r3, #0]
 8070f56:	429a      	cmp	r2, r3
 8070f58:	d903      	bls.n	8070f62 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8070f5a:	69bb      	ldr	r3, [r7, #24]
 8070f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070f5e:	4a0c      	ldr	r2, [pc, #48]	; (8070f90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8070f60:	6013      	str	r3, [r2, #0]
 8070f62:	69bb      	ldr	r3, [r7, #24]
 8070f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070f66:	4613      	mov	r3, r2
 8070f68:	009b      	lsls	r3, r3, #2
 8070f6a:	4413      	add	r3, r2
 8070f6c:	009b      	lsls	r3, r3, #2
 8070f6e:	4a07      	ldr	r2, [pc, #28]	; (8070f8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8070f70:	441a      	add	r2, r3
 8070f72:	69bb      	ldr	r3, [r7, #24]
 8070f74:	3304      	adds	r3, #4
 8070f76:	4619      	mov	r1, r3
 8070f78:	4610      	mov	r0, r2
 8070f7a:	f7fd fef2 	bl	806ed62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8070f7e:	bf00      	nop
 8070f80:	3720      	adds	r7, #32
 8070f82:	46bd      	mov	sp, r7
 8070f84:	bd80      	pop	{r7, pc}
 8070f86:	bf00      	nop
 8070f88:	20000bd4 	.word	0x20000bd4
 8070f8c:	20000bd8 	.word	0x20000bd8
 8070f90:	200010b0 	.word	0x200010b0

08070f94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8070f94:	b480      	push	{r7}
 8070f96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8070f98:	4b07      	ldr	r3, [pc, #28]	; (8070fb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8070f9a:	681b      	ldr	r3, [r3, #0]
 8070f9c:	2b00      	cmp	r3, #0
 8070f9e:	d004      	beq.n	8070faa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8070fa0:	4b05      	ldr	r3, [pc, #20]	; (8070fb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8070fa2:	681b      	ldr	r3, [r3, #0]
 8070fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8070fa6:	3201      	adds	r2, #1
 8070fa8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8070faa:	4b03      	ldr	r3, [pc, #12]	; (8070fb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8070fac:	681b      	ldr	r3, [r3, #0]
	}
 8070fae:	4618      	mov	r0, r3
 8070fb0:	46bd      	mov	sp, r7
 8070fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070fb6:	4770      	bx	lr
 8070fb8:	20000bd4 	.word	0x20000bd4

08070fbc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8070fbc:	b580      	push	{r7, lr}
 8070fbe:	b086      	sub	sp, #24
 8070fc0:	af00      	add	r7, sp, #0
 8070fc2:	60f8      	str	r0, [r7, #12]
 8070fc4:	60b9      	str	r1, [r7, #8]
 8070fc6:	607a      	str	r2, [r7, #4]
 8070fc8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8070fca:	f000 ff83 	bl	8071ed4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8070fce:	4b29      	ldr	r3, [pc, #164]	; (8071074 <xTaskNotifyWait+0xb8>)
 8070fd0:	681b      	ldr	r3, [r3, #0]
 8070fd2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8070fd6:	b2db      	uxtb	r3, r3
 8070fd8:	2b02      	cmp	r3, #2
 8070fda:	d01c      	beq.n	8071016 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8070fdc:	4b25      	ldr	r3, [pc, #148]	; (8071074 <xTaskNotifyWait+0xb8>)
 8070fde:	681b      	ldr	r3, [r3, #0]
 8070fe0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8070fe4:	68fa      	ldr	r2, [r7, #12]
 8070fe6:	43d2      	mvns	r2, r2
 8070fe8:	400a      	ands	r2, r1
 8070fea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8070fee:	4b21      	ldr	r3, [pc, #132]	; (8071074 <xTaskNotifyWait+0xb8>)
 8070ff0:	681b      	ldr	r3, [r3, #0]
 8070ff2:	2201      	movs	r2, #1
 8070ff4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8070ff8:	683b      	ldr	r3, [r7, #0]
 8070ffa:	2b00      	cmp	r3, #0
 8070ffc:	d00b      	beq.n	8071016 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8070ffe:	2101      	movs	r1, #1
 8071000:	6838      	ldr	r0, [r7, #0]
 8071002:	f000 f9dd 	bl	80713c0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8071006:	4b1c      	ldr	r3, [pc, #112]	; (8071078 <xTaskNotifyWait+0xbc>)
 8071008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 807100c:	601a      	str	r2, [r3, #0]
 807100e:	f3bf 8f4f 	dsb	sy
 8071012:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8071016:	f000 ff8d 	bl	8071f34 <vPortExitCritical>

		taskENTER_CRITICAL();
 807101a:	f000 ff5b 	bl	8071ed4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 807101e:	687b      	ldr	r3, [r7, #4]
 8071020:	2b00      	cmp	r3, #0
 8071022:	d005      	beq.n	8071030 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8071024:	4b13      	ldr	r3, [pc, #76]	; (8071074 <xTaskNotifyWait+0xb8>)
 8071026:	681b      	ldr	r3, [r3, #0]
 8071028:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 807102c:	687b      	ldr	r3, [r7, #4]
 807102e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8071030:	4b10      	ldr	r3, [pc, #64]	; (8071074 <xTaskNotifyWait+0xb8>)
 8071032:	681b      	ldr	r3, [r3, #0]
 8071034:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8071038:	b2db      	uxtb	r3, r3
 807103a:	2b02      	cmp	r3, #2
 807103c:	d002      	beq.n	8071044 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 807103e:	2300      	movs	r3, #0
 8071040:	617b      	str	r3, [r7, #20]
 8071042:	e00a      	b.n	807105a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8071044:	4b0b      	ldr	r3, [pc, #44]	; (8071074 <xTaskNotifyWait+0xb8>)
 8071046:	681b      	ldr	r3, [r3, #0]
 8071048:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 807104c:	68ba      	ldr	r2, [r7, #8]
 807104e:	43d2      	mvns	r2, r2
 8071050:	400a      	ands	r2, r1
 8071052:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8071056:	2301      	movs	r3, #1
 8071058:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 807105a:	4b06      	ldr	r3, [pc, #24]	; (8071074 <xTaskNotifyWait+0xb8>)
 807105c:	681b      	ldr	r3, [r3, #0]
 807105e:	2200      	movs	r2, #0
 8071060:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8071064:	f000 ff66 	bl	8071f34 <vPortExitCritical>

		return xReturn;
 8071068:	697b      	ldr	r3, [r7, #20]
	}
 807106a:	4618      	mov	r0, r3
 807106c:	3718      	adds	r7, #24
 807106e:	46bd      	mov	sp, r7
 8071070:	bd80      	pop	{r7, pc}
 8071072:	bf00      	nop
 8071074:	20000bd4 	.word	0x20000bd4
 8071078:	e000ed04 	.word	0xe000ed04

0807107c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 807107c:	b580      	push	{r7, lr}
 807107e:	b08a      	sub	sp, #40	; 0x28
 8071080:	af00      	add	r7, sp, #0
 8071082:	60f8      	str	r0, [r7, #12]
 8071084:	60b9      	str	r1, [r7, #8]
 8071086:	603b      	str	r3, [r7, #0]
 8071088:	4613      	mov	r3, r2
 807108a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 807108c:	2301      	movs	r3, #1
 807108e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8071090:	68fb      	ldr	r3, [r7, #12]
 8071092:	2b00      	cmp	r3, #0
 8071094:	d10a      	bne.n	80710ac <xTaskGenericNotify+0x30>
	__asm volatile
 8071096:	f04f 0350 	mov.w	r3, #80	; 0x50
 807109a:	f383 8811 	msr	BASEPRI, r3
 807109e:	f3bf 8f6f 	isb	sy
 80710a2:	f3bf 8f4f 	dsb	sy
 80710a6:	61bb      	str	r3, [r7, #24]
}
 80710a8:	bf00      	nop
 80710aa:	e7fe      	b.n	80710aa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80710ac:	68fb      	ldr	r3, [r7, #12]
 80710ae:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80710b0:	f000 ff10 	bl	8071ed4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80710b4:	683b      	ldr	r3, [r7, #0]
 80710b6:	2b00      	cmp	r3, #0
 80710b8:	d004      	beq.n	80710c4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80710ba:	6a3b      	ldr	r3, [r7, #32]
 80710bc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80710c0:	683b      	ldr	r3, [r7, #0]
 80710c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80710c4:	6a3b      	ldr	r3, [r7, #32]
 80710c6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80710ca:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80710cc:	6a3b      	ldr	r3, [r7, #32]
 80710ce:	2202      	movs	r2, #2
 80710d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80710d4:	79fb      	ldrb	r3, [r7, #7]
 80710d6:	2b04      	cmp	r3, #4
 80710d8:	d82d      	bhi.n	8071136 <xTaskGenericNotify+0xba>
 80710da:	a201      	add	r2, pc, #4	; (adr r2, 80710e0 <xTaskGenericNotify+0x64>)
 80710dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80710e0:	08071159 	.word	0x08071159
 80710e4:	080710f5 	.word	0x080710f5
 80710e8:	08071107 	.word	0x08071107
 80710ec:	08071117 	.word	0x08071117
 80710f0:	08071121 	.word	0x08071121
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80710f4:	6a3b      	ldr	r3, [r7, #32]
 80710f6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80710fa:	68bb      	ldr	r3, [r7, #8]
 80710fc:	431a      	orrs	r2, r3
 80710fe:	6a3b      	ldr	r3, [r7, #32]
 8071100:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8071104:	e02b      	b.n	807115e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8071106:	6a3b      	ldr	r3, [r7, #32]
 8071108:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 807110c:	1c5a      	adds	r2, r3, #1
 807110e:	6a3b      	ldr	r3, [r7, #32]
 8071110:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8071114:	e023      	b.n	807115e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8071116:	6a3b      	ldr	r3, [r7, #32]
 8071118:	68ba      	ldr	r2, [r7, #8]
 807111a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 807111e:	e01e      	b.n	807115e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8071120:	7ffb      	ldrb	r3, [r7, #31]
 8071122:	2b02      	cmp	r3, #2
 8071124:	d004      	beq.n	8071130 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8071126:	6a3b      	ldr	r3, [r7, #32]
 8071128:	68ba      	ldr	r2, [r7, #8]
 807112a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 807112e:	e016      	b.n	807115e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8071130:	2300      	movs	r3, #0
 8071132:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8071134:	e013      	b.n	807115e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8071136:	6a3b      	ldr	r3, [r7, #32]
 8071138:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 807113c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8071140:	d00c      	beq.n	807115c <xTaskGenericNotify+0xe0>
	__asm volatile
 8071142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071146:	f383 8811 	msr	BASEPRI, r3
 807114a:	f3bf 8f6f 	isb	sy
 807114e:	f3bf 8f4f 	dsb	sy
 8071152:	617b      	str	r3, [r7, #20]
}
 8071154:	bf00      	nop
 8071156:	e7fe      	b.n	8071156 <xTaskGenericNotify+0xda>
					break;
 8071158:	bf00      	nop
 807115a:	e000      	b.n	807115e <xTaskGenericNotify+0xe2>

					break;
 807115c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 807115e:	7ffb      	ldrb	r3, [r7, #31]
 8071160:	2b01      	cmp	r3, #1
 8071162:	d13a      	bne.n	80711da <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8071164:	6a3b      	ldr	r3, [r7, #32]
 8071166:	3304      	adds	r3, #4
 8071168:	4618      	mov	r0, r3
 807116a:	f7fd fe57 	bl	806ee1c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 807116e:	6a3b      	ldr	r3, [r7, #32]
 8071170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8071172:	4b1d      	ldr	r3, [pc, #116]	; (80711e8 <xTaskGenericNotify+0x16c>)
 8071174:	681b      	ldr	r3, [r3, #0]
 8071176:	429a      	cmp	r2, r3
 8071178:	d903      	bls.n	8071182 <xTaskGenericNotify+0x106>
 807117a:	6a3b      	ldr	r3, [r7, #32]
 807117c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807117e:	4a1a      	ldr	r2, [pc, #104]	; (80711e8 <xTaskGenericNotify+0x16c>)
 8071180:	6013      	str	r3, [r2, #0]
 8071182:	6a3b      	ldr	r3, [r7, #32]
 8071184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8071186:	4613      	mov	r3, r2
 8071188:	009b      	lsls	r3, r3, #2
 807118a:	4413      	add	r3, r2
 807118c:	009b      	lsls	r3, r3, #2
 807118e:	4a17      	ldr	r2, [pc, #92]	; (80711ec <xTaskGenericNotify+0x170>)
 8071190:	441a      	add	r2, r3
 8071192:	6a3b      	ldr	r3, [r7, #32]
 8071194:	3304      	adds	r3, #4
 8071196:	4619      	mov	r1, r3
 8071198:	4610      	mov	r0, r2
 807119a:	f7fd fde2 	bl	806ed62 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 807119e:	6a3b      	ldr	r3, [r7, #32]
 80711a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80711a2:	2b00      	cmp	r3, #0
 80711a4:	d00a      	beq.n	80711bc <xTaskGenericNotify+0x140>
	__asm volatile
 80711a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80711aa:	f383 8811 	msr	BASEPRI, r3
 80711ae:	f3bf 8f6f 	isb	sy
 80711b2:	f3bf 8f4f 	dsb	sy
 80711b6:	613b      	str	r3, [r7, #16]
}
 80711b8:	bf00      	nop
 80711ba:	e7fe      	b.n	80711ba <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80711bc:	6a3b      	ldr	r3, [r7, #32]
 80711be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80711c0:	4b0b      	ldr	r3, [pc, #44]	; (80711f0 <xTaskGenericNotify+0x174>)
 80711c2:	681b      	ldr	r3, [r3, #0]
 80711c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80711c6:	429a      	cmp	r2, r3
 80711c8:	d907      	bls.n	80711da <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80711ca:	4b0a      	ldr	r3, [pc, #40]	; (80711f4 <xTaskGenericNotify+0x178>)
 80711cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80711d0:	601a      	str	r2, [r3, #0]
 80711d2:	f3bf 8f4f 	dsb	sy
 80711d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80711da:	f000 feab 	bl	8071f34 <vPortExitCritical>

		return xReturn;
 80711de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80711e0:	4618      	mov	r0, r3
 80711e2:	3728      	adds	r7, #40	; 0x28
 80711e4:	46bd      	mov	sp, r7
 80711e6:	bd80      	pop	{r7, pc}
 80711e8:	200010b0 	.word	0x200010b0
 80711ec:	20000bd8 	.word	0x20000bd8
 80711f0:	20000bd4 	.word	0x20000bd4
 80711f4:	e000ed04 	.word	0xe000ed04

080711f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80711f8:	b580      	push	{r7, lr}
 80711fa:	b08e      	sub	sp, #56	; 0x38
 80711fc:	af00      	add	r7, sp, #0
 80711fe:	60f8      	str	r0, [r7, #12]
 8071200:	60b9      	str	r1, [r7, #8]
 8071202:	603b      	str	r3, [r7, #0]
 8071204:	4613      	mov	r3, r2
 8071206:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8071208:	2301      	movs	r3, #1
 807120a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 807120c:	68fb      	ldr	r3, [r7, #12]
 807120e:	2b00      	cmp	r3, #0
 8071210:	d10a      	bne.n	8071228 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8071212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071216:	f383 8811 	msr	BASEPRI, r3
 807121a:	f3bf 8f6f 	isb	sy
 807121e:	f3bf 8f4f 	dsb	sy
 8071222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8071224:	bf00      	nop
 8071226:	e7fe      	b.n	8071226 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8071228:	f000 ff36 	bl	8072098 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 807122c:	68fb      	ldr	r3, [r7, #12]
 807122e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8071230:	f3ef 8211 	mrs	r2, BASEPRI
 8071234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071238:	f383 8811 	msr	BASEPRI, r3
 807123c:	f3bf 8f6f 	isb	sy
 8071240:	f3bf 8f4f 	dsb	sy
 8071244:	623a      	str	r2, [r7, #32]
 8071246:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8071248:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 807124a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 807124c:	683b      	ldr	r3, [r7, #0]
 807124e:	2b00      	cmp	r3, #0
 8071250:	d004      	beq.n	807125c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8071252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071254:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8071258:	683b      	ldr	r3, [r7, #0]
 807125a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 807125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807125e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8071262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8071266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071268:	2202      	movs	r2, #2
 807126a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 807126e:	79fb      	ldrb	r3, [r7, #7]
 8071270:	2b04      	cmp	r3, #4
 8071272:	d82f      	bhi.n	80712d4 <xTaskGenericNotifyFromISR+0xdc>
 8071274:	a201      	add	r2, pc, #4	; (adr r2, 807127c <xTaskGenericNotifyFromISR+0x84>)
 8071276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807127a:	bf00      	nop
 807127c:	080712f7 	.word	0x080712f7
 8071280:	08071291 	.word	0x08071291
 8071284:	080712a3 	.word	0x080712a3
 8071288:	080712b3 	.word	0x080712b3
 807128c:	080712bd 	.word	0x080712bd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8071290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071292:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8071296:	68bb      	ldr	r3, [r7, #8]
 8071298:	431a      	orrs	r2, r3
 807129a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807129c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80712a0:	e02c      	b.n	80712fc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80712a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80712a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80712a8:	1c5a      	adds	r2, r3, #1
 80712aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80712ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80712b0:	e024      	b.n	80712fc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80712b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80712b4:	68ba      	ldr	r2, [r7, #8]
 80712b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80712ba:	e01f      	b.n	80712fc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80712bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80712c0:	2b02      	cmp	r3, #2
 80712c2:	d004      	beq.n	80712ce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80712c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80712c6:	68ba      	ldr	r2, [r7, #8]
 80712c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80712cc:	e016      	b.n	80712fc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80712ce:	2300      	movs	r3, #0
 80712d0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80712d2:	e013      	b.n	80712fc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80712d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80712d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80712da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80712de:	d00c      	beq.n	80712fa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80712e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80712e4:	f383 8811 	msr	BASEPRI, r3
 80712e8:	f3bf 8f6f 	isb	sy
 80712ec:	f3bf 8f4f 	dsb	sy
 80712f0:	61bb      	str	r3, [r7, #24]
}
 80712f2:	bf00      	nop
 80712f4:	e7fe      	b.n	80712f4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80712f6:	bf00      	nop
 80712f8:	e000      	b.n	80712fc <xTaskGenericNotifyFromISR+0x104>
					break;
 80712fa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80712fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8071300:	2b01      	cmp	r3, #1
 8071302:	d146      	bne.n	8071392 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8071304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8071308:	2b00      	cmp	r3, #0
 807130a:	d00a      	beq.n	8071322 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 807130c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071310:	f383 8811 	msr	BASEPRI, r3
 8071314:	f3bf 8f6f 	isb	sy
 8071318:	f3bf 8f4f 	dsb	sy
 807131c:	617b      	str	r3, [r7, #20]
}
 807131e:	bf00      	nop
 8071320:	e7fe      	b.n	8071320 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8071322:	4b21      	ldr	r3, [pc, #132]	; (80713a8 <xTaskGenericNotifyFromISR+0x1b0>)
 8071324:	681b      	ldr	r3, [r3, #0]
 8071326:	2b00      	cmp	r3, #0
 8071328:	d11d      	bne.n	8071366 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 807132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807132c:	3304      	adds	r3, #4
 807132e:	4618      	mov	r0, r3
 8071330:	f7fd fd74 	bl	806ee1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8071334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8071338:	4b1c      	ldr	r3, [pc, #112]	; (80713ac <xTaskGenericNotifyFromISR+0x1b4>)
 807133a:	681b      	ldr	r3, [r3, #0]
 807133c:	429a      	cmp	r2, r3
 807133e:	d903      	bls.n	8071348 <xTaskGenericNotifyFromISR+0x150>
 8071340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8071344:	4a19      	ldr	r2, [pc, #100]	; (80713ac <xTaskGenericNotifyFromISR+0x1b4>)
 8071346:	6013      	str	r3, [r2, #0]
 8071348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807134a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 807134c:	4613      	mov	r3, r2
 807134e:	009b      	lsls	r3, r3, #2
 8071350:	4413      	add	r3, r2
 8071352:	009b      	lsls	r3, r3, #2
 8071354:	4a16      	ldr	r2, [pc, #88]	; (80713b0 <xTaskGenericNotifyFromISR+0x1b8>)
 8071356:	441a      	add	r2, r3
 8071358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807135a:	3304      	adds	r3, #4
 807135c:	4619      	mov	r1, r3
 807135e:	4610      	mov	r0, r2
 8071360:	f7fd fcff 	bl	806ed62 <vListInsertEnd>
 8071364:	e005      	b.n	8071372 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8071366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071368:	3318      	adds	r3, #24
 807136a:	4619      	mov	r1, r3
 807136c:	4811      	ldr	r0, [pc, #68]	; (80713b4 <xTaskGenericNotifyFromISR+0x1bc>)
 807136e:	f7fd fcf8 	bl	806ed62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8071372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8071376:	4b10      	ldr	r3, [pc, #64]	; (80713b8 <xTaskGenericNotifyFromISR+0x1c0>)
 8071378:	681b      	ldr	r3, [r3, #0]
 807137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807137c:	429a      	cmp	r2, r3
 807137e:	d908      	bls.n	8071392 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8071380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8071382:	2b00      	cmp	r3, #0
 8071384:	d002      	beq.n	807138c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8071386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8071388:	2201      	movs	r2, #1
 807138a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 807138c:	4b0b      	ldr	r3, [pc, #44]	; (80713bc <xTaskGenericNotifyFromISR+0x1c4>)
 807138e:	2201      	movs	r2, #1
 8071390:	601a      	str	r2, [r3, #0]
 8071392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8071394:	613b      	str	r3, [r7, #16]
	__asm volatile
 8071396:	693b      	ldr	r3, [r7, #16]
 8071398:	f383 8811 	msr	BASEPRI, r3
}
 807139c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 807139e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80713a0:	4618      	mov	r0, r3
 80713a2:	3738      	adds	r7, #56	; 0x38
 80713a4:	46bd      	mov	sp, r7
 80713a6:	bd80      	pop	{r7, pc}
 80713a8:	200010d0 	.word	0x200010d0
 80713ac:	200010b0 	.word	0x200010b0
 80713b0:	20000bd8 	.word	0x20000bd8
 80713b4:	20001068 	.word	0x20001068
 80713b8:	20000bd4 	.word	0x20000bd4
 80713bc:	200010bc 	.word	0x200010bc

080713c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80713c0:	b580      	push	{r7, lr}
 80713c2:	b084      	sub	sp, #16
 80713c4:	af00      	add	r7, sp, #0
 80713c6:	6078      	str	r0, [r7, #4]
 80713c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80713ca:	4b21      	ldr	r3, [pc, #132]	; (8071450 <prvAddCurrentTaskToDelayedList+0x90>)
 80713cc:	681b      	ldr	r3, [r3, #0]
 80713ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80713d0:	4b20      	ldr	r3, [pc, #128]	; (8071454 <prvAddCurrentTaskToDelayedList+0x94>)
 80713d2:	681b      	ldr	r3, [r3, #0]
 80713d4:	3304      	adds	r3, #4
 80713d6:	4618      	mov	r0, r3
 80713d8:	f7fd fd20 	bl	806ee1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80713dc:	687b      	ldr	r3, [r7, #4]
 80713de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80713e2:	d10a      	bne.n	80713fa <prvAddCurrentTaskToDelayedList+0x3a>
 80713e4:	683b      	ldr	r3, [r7, #0]
 80713e6:	2b00      	cmp	r3, #0
 80713e8:	d007      	beq.n	80713fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80713ea:	4b1a      	ldr	r3, [pc, #104]	; (8071454 <prvAddCurrentTaskToDelayedList+0x94>)
 80713ec:	681b      	ldr	r3, [r3, #0]
 80713ee:	3304      	adds	r3, #4
 80713f0:	4619      	mov	r1, r3
 80713f2:	4819      	ldr	r0, [pc, #100]	; (8071458 <prvAddCurrentTaskToDelayedList+0x98>)
 80713f4:	f7fd fcb5 	bl	806ed62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80713f8:	e026      	b.n	8071448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80713fa:	68fa      	ldr	r2, [r7, #12]
 80713fc:	687b      	ldr	r3, [r7, #4]
 80713fe:	4413      	add	r3, r2
 8071400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8071402:	4b14      	ldr	r3, [pc, #80]	; (8071454 <prvAddCurrentTaskToDelayedList+0x94>)
 8071404:	681b      	ldr	r3, [r3, #0]
 8071406:	68ba      	ldr	r2, [r7, #8]
 8071408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 807140a:	68ba      	ldr	r2, [r7, #8]
 807140c:	68fb      	ldr	r3, [r7, #12]
 807140e:	429a      	cmp	r2, r3
 8071410:	d209      	bcs.n	8071426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8071412:	4b12      	ldr	r3, [pc, #72]	; (807145c <prvAddCurrentTaskToDelayedList+0x9c>)
 8071414:	681a      	ldr	r2, [r3, #0]
 8071416:	4b0f      	ldr	r3, [pc, #60]	; (8071454 <prvAddCurrentTaskToDelayedList+0x94>)
 8071418:	681b      	ldr	r3, [r3, #0]
 807141a:	3304      	adds	r3, #4
 807141c:	4619      	mov	r1, r3
 807141e:	4610      	mov	r0, r2
 8071420:	f7fd fcc3 	bl	806edaa <vListInsert>
}
 8071424:	e010      	b.n	8071448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8071426:	4b0e      	ldr	r3, [pc, #56]	; (8071460 <prvAddCurrentTaskToDelayedList+0xa0>)
 8071428:	681a      	ldr	r2, [r3, #0]
 807142a:	4b0a      	ldr	r3, [pc, #40]	; (8071454 <prvAddCurrentTaskToDelayedList+0x94>)
 807142c:	681b      	ldr	r3, [r3, #0]
 807142e:	3304      	adds	r3, #4
 8071430:	4619      	mov	r1, r3
 8071432:	4610      	mov	r0, r2
 8071434:	f7fd fcb9 	bl	806edaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8071438:	4b0a      	ldr	r3, [pc, #40]	; (8071464 <prvAddCurrentTaskToDelayedList+0xa4>)
 807143a:	681b      	ldr	r3, [r3, #0]
 807143c:	68ba      	ldr	r2, [r7, #8]
 807143e:	429a      	cmp	r2, r3
 8071440:	d202      	bcs.n	8071448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8071442:	4a08      	ldr	r2, [pc, #32]	; (8071464 <prvAddCurrentTaskToDelayedList+0xa4>)
 8071444:	68bb      	ldr	r3, [r7, #8]
 8071446:	6013      	str	r3, [r2, #0]
}
 8071448:	bf00      	nop
 807144a:	3710      	adds	r7, #16
 807144c:	46bd      	mov	sp, r7
 807144e:	bd80      	pop	{r7, pc}
 8071450:	200010ac 	.word	0x200010ac
 8071454:	20000bd4 	.word	0x20000bd4
 8071458:	20001094 	.word	0x20001094
 807145c:	20001064 	.word	0x20001064
 8071460:	20001060 	.word	0x20001060
 8071464:	200010c8 	.word	0x200010c8

08071468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8071468:	b580      	push	{r7, lr}
 807146a:	b08a      	sub	sp, #40	; 0x28
 807146c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 807146e:	2300      	movs	r3, #0
 8071470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8071472:	f000 fba1 	bl	8071bb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8071476:	4b1c      	ldr	r3, [pc, #112]	; (80714e8 <xTimerCreateTimerTask+0x80>)
 8071478:	681b      	ldr	r3, [r3, #0]
 807147a:	2b00      	cmp	r3, #0
 807147c:	d021      	beq.n	80714c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 807147e:	2300      	movs	r3, #0
 8071480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8071482:	2300      	movs	r3, #0
 8071484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8071486:	1d3a      	adds	r2, r7, #4
 8071488:	f107 0108 	add.w	r1, r7, #8
 807148c:	f107 030c 	add.w	r3, r7, #12
 8071490:	4618      	mov	r0, r3
 8071492:	f7fd fc1f 	bl	806ecd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8071496:	6879      	ldr	r1, [r7, #4]
 8071498:	68bb      	ldr	r3, [r7, #8]
 807149a:	68fa      	ldr	r2, [r7, #12]
 807149c:	9202      	str	r2, [sp, #8]
 807149e:	9301      	str	r3, [sp, #4]
 80714a0:	2302      	movs	r3, #2
 80714a2:	9300      	str	r3, [sp, #0]
 80714a4:	2300      	movs	r3, #0
 80714a6:	460a      	mov	r2, r1
 80714a8:	4910      	ldr	r1, [pc, #64]	; (80714ec <xTimerCreateTimerTask+0x84>)
 80714aa:	4811      	ldr	r0, [pc, #68]	; (80714f0 <xTimerCreateTimerTask+0x88>)
 80714ac:	f7fe fda4 	bl	806fff8 <xTaskCreateStatic>
 80714b0:	4603      	mov	r3, r0
 80714b2:	4a10      	ldr	r2, [pc, #64]	; (80714f4 <xTimerCreateTimerTask+0x8c>)
 80714b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80714b6:	4b0f      	ldr	r3, [pc, #60]	; (80714f4 <xTimerCreateTimerTask+0x8c>)
 80714b8:	681b      	ldr	r3, [r3, #0]
 80714ba:	2b00      	cmp	r3, #0
 80714bc:	d001      	beq.n	80714c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80714be:	2301      	movs	r3, #1
 80714c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80714c2:	697b      	ldr	r3, [r7, #20]
 80714c4:	2b00      	cmp	r3, #0
 80714c6:	d10a      	bne.n	80714de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80714c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80714cc:	f383 8811 	msr	BASEPRI, r3
 80714d0:	f3bf 8f6f 	isb	sy
 80714d4:	f3bf 8f4f 	dsb	sy
 80714d8:	613b      	str	r3, [r7, #16]
}
 80714da:	bf00      	nop
 80714dc:	e7fe      	b.n	80714dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80714de:	697b      	ldr	r3, [r7, #20]
}
 80714e0:	4618      	mov	r0, r3
 80714e2:	3718      	adds	r7, #24
 80714e4:	46bd      	mov	sp, r7
 80714e6:	bd80      	pop	{r7, pc}
 80714e8:	20001104 	.word	0x20001104
 80714ec:	080775c4 	.word	0x080775c4
 80714f0:	08071761 	.word	0x08071761
 80714f4:	20001108 	.word	0x20001108

080714f8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80714f8:	b580      	push	{r7, lr}
 80714fa:	b088      	sub	sp, #32
 80714fc:	af02      	add	r7, sp, #8
 80714fe:	60f8      	str	r0, [r7, #12]
 8071500:	60b9      	str	r1, [r7, #8]
 8071502:	607a      	str	r2, [r7, #4]
 8071504:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8071506:	202c      	movs	r0, #44	; 0x2c
 8071508:	f000 fe06 	bl	8072118 <pvPortMalloc>
 807150c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 807150e:	697b      	ldr	r3, [r7, #20]
 8071510:	2b00      	cmp	r3, #0
 8071512:	d00d      	beq.n	8071530 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8071514:	697b      	ldr	r3, [r7, #20]
 8071516:	2200      	movs	r2, #0
 8071518:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 807151c:	697b      	ldr	r3, [r7, #20]
 807151e:	9301      	str	r3, [sp, #4]
 8071520:	6a3b      	ldr	r3, [r7, #32]
 8071522:	9300      	str	r3, [sp, #0]
 8071524:	683b      	ldr	r3, [r7, #0]
 8071526:	687a      	ldr	r2, [r7, #4]
 8071528:	68b9      	ldr	r1, [r7, #8]
 807152a:	68f8      	ldr	r0, [r7, #12]
 807152c:	f000 f843 	bl	80715b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8071530:	697b      	ldr	r3, [r7, #20]
	}
 8071532:	4618      	mov	r0, r3
 8071534:	3718      	adds	r7, #24
 8071536:	46bd      	mov	sp, r7
 8071538:	bd80      	pop	{r7, pc}

0807153a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 807153a:	b580      	push	{r7, lr}
 807153c:	b08a      	sub	sp, #40	; 0x28
 807153e:	af02      	add	r7, sp, #8
 8071540:	60f8      	str	r0, [r7, #12]
 8071542:	60b9      	str	r1, [r7, #8]
 8071544:	607a      	str	r2, [r7, #4]
 8071546:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8071548:	232c      	movs	r3, #44	; 0x2c
 807154a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 807154c:	693b      	ldr	r3, [r7, #16]
 807154e:	2b2c      	cmp	r3, #44	; 0x2c
 8071550:	d00a      	beq.n	8071568 <xTimerCreateStatic+0x2e>
	__asm volatile
 8071552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071556:	f383 8811 	msr	BASEPRI, r3
 807155a:	f3bf 8f6f 	isb	sy
 807155e:	f3bf 8f4f 	dsb	sy
 8071562:	61bb      	str	r3, [r7, #24]
}
 8071564:	bf00      	nop
 8071566:	e7fe      	b.n	8071566 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8071568:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 807156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 807156c:	2b00      	cmp	r3, #0
 807156e:	d10a      	bne.n	8071586 <xTimerCreateStatic+0x4c>
	__asm volatile
 8071570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071574:	f383 8811 	msr	BASEPRI, r3
 8071578:	f3bf 8f6f 	isb	sy
 807157c:	f3bf 8f4f 	dsb	sy
 8071580:	617b      	str	r3, [r7, #20]
}
 8071582:	bf00      	nop
 8071584:	e7fe      	b.n	8071584 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8071586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8071588:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 807158a:	69fb      	ldr	r3, [r7, #28]
 807158c:	2b00      	cmp	r3, #0
 807158e:	d00d      	beq.n	80715ac <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8071590:	69fb      	ldr	r3, [r7, #28]
 8071592:	2202      	movs	r2, #2
 8071594:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8071598:	69fb      	ldr	r3, [r7, #28]
 807159a:	9301      	str	r3, [sp, #4]
 807159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807159e:	9300      	str	r3, [sp, #0]
 80715a0:	683b      	ldr	r3, [r7, #0]
 80715a2:	687a      	ldr	r2, [r7, #4]
 80715a4:	68b9      	ldr	r1, [r7, #8]
 80715a6:	68f8      	ldr	r0, [r7, #12]
 80715a8:	f000 f805 	bl	80715b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80715ac:	69fb      	ldr	r3, [r7, #28]
	}
 80715ae:	4618      	mov	r0, r3
 80715b0:	3720      	adds	r7, #32
 80715b2:	46bd      	mov	sp, r7
 80715b4:	bd80      	pop	{r7, pc}

080715b6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80715b6:	b580      	push	{r7, lr}
 80715b8:	b086      	sub	sp, #24
 80715ba:	af00      	add	r7, sp, #0
 80715bc:	60f8      	str	r0, [r7, #12]
 80715be:	60b9      	str	r1, [r7, #8]
 80715c0:	607a      	str	r2, [r7, #4]
 80715c2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80715c4:	68bb      	ldr	r3, [r7, #8]
 80715c6:	2b00      	cmp	r3, #0
 80715c8:	d10a      	bne.n	80715e0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80715ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80715ce:	f383 8811 	msr	BASEPRI, r3
 80715d2:	f3bf 8f6f 	isb	sy
 80715d6:	f3bf 8f4f 	dsb	sy
 80715da:	617b      	str	r3, [r7, #20]
}
 80715dc:	bf00      	nop
 80715de:	e7fe      	b.n	80715de <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80715e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80715e2:	2b00      	cmp	r3, #0
 80715e4:	d01e      	beq.n	8071624 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80715e6:	f000 fae7 	bl	8071bb8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80715ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80715ec:	68fa      	ldr	r2, [r7, #12]
 80715ee:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80715f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80715f2:	68ba      	ldr	r2, [r7, #8]
 80715f4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80715f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80715f8:	683a      	ldr	r2, [r7, #0]
 80715fa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80715fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80715fe:	6a3a      	ldr	r2, [r7, #32]
 8071600:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8071602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071604:	3304      	adds	r3, #4
 8071606:	4618      	mov	r0, r3
 8071608:	f7fd fb9e 	bl	806ed48 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 807160c:	687b      	ldr	r3, [r7, #4]
 807160e:	2b00      	cmp	r3, #0
 8071610:	d008      	beq.n	8071624 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8071612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071618:	f043 0304 	orr.w	r3, r3, #4
 807161c:	b2da      	uxtb	r2, r3
 807161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071620:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8071624:	bf00      	nop
 8071626:	3718      	adds	r7, #24
 8071628:	46bd      	mov	sp, r7
 807162a:	bd80      	pop	{r7, pc}

0807162c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 807162c:	b580      	push	{r7, lr}
 807162e:	b08a      	sub	sp, #40	; 0x28
 8071630:	af00      	add	r7, sp, #0
 8071632:	60f8      	str	r0, [r7, #12]
 8071634:	60b9      	str	r1, [r7, #8]
 8071636:	607a      	str	r2, [r7, #4]
 8071638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 807163a:	2300      	movs	r3, #0
 807163c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 807163e:	68fb      	ldr	r3, [r7, #12]
 8071640:	2b00      	cmp	r3, #0
 8071642:	d10a      	bne.n	807165a <xTimerGenericCommand+0x2e>
	__asm volatile
 8071644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071648:	f383 8811 	msr	BASEPRI, r3
 807164c:	f3bf 8f6f 	isb	sy
 8071650:	f3bf 8f4f 	dsb	sy
 8071654:	623b      	str	r3, [r7, #32]
}
 8071656:	bf00      	nop
 8071658:	e7fe      	b.n	8071658 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 807165a:	4b1a      	ldr	r3, [pc, #104]	; (80716c4 <xTimerGenericCommand+0x98>)
 807165c:	681b      	ldr	r3, [r3, #0]
 807165e:	2b00      	cmp	r3, #0
 8071660:	d02a      	beq.n	80716b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8071662:	68bb      	ldr	r3, [r7, #8]
 8071664:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8071666:	687b      	ldr	r3, [r7, #4]
 8071668:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 807166a:	68fb      	ldr	r3, [r7, #12]
 807166c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 807166e:	68bb      	ldr	r3, [r7, #8]
 8071670:	2b05      	cmp	r3, #5
 8071672:	dc18      	bgt.n	80716a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8071674:	f7ff fb18 	bl	8070ca8 <xTaskGetSchedulerState>
 8071678:	4603      	mov	r3, r0
 807167a:	2b02      	cmp	r3, #2
 807167c:	d109      	bne.n	8071692 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 807167e:	4b11      	ldr	r3, [pc, #68]	; (80716c4 <xTimerGenericCommand+0x98>)
 8071680:	6818      	ldr	r0, [r3, #0]
 8071682:	f107 0110 	add.w	r1, r7, #16
 8071686:	2300      	movs	r3, #0
 8071688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 807168a:	f7fd fe4f 	bl	806f32c <xQueueGenericSend>
 807168e:	6278      	str	r0, [r7, #36]	; 0x24
 8071690:	e012      	b.n	80716b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8071692:	4b0c      	ldr	r3, [pc, #48]	; (80716c4 <xTimerGenericCommand+0x98>)
 8071694:	6818      	ldr	r0, [r3, #0]
 8071696:	f107 0110 	add.w	r1, r7, #16
 807169a:	2300      	movs	r3, #0
 807169c:	2200      	movs	r2, #0
 807169e:	f7fd fe45 	bl	806f32c <xQueueGenericSend>
 80716a2:	6278      	str	r0, [r7, #36]	; 0x24
 80716a4:	e008      	b.n	80716b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80716a6:	4b07      	ldr	r3, [pc, #28]	; (80716c4 <xTimerGenericCommand+0x98>)
 80716a8:	6818      	ldr	r0, [r3, #0]
 80716aa:	f107 0110 	add.w	r1, r7, #16
 80716ae:	2300      	movs	r3, #0
 80716b0:	683a      	ldr	r2, [r7, #0]
 80716b2:	f7fd ff39 	bl	806f528 <xQueueGenericSendFromISR>
 80716b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80716b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80716ba:	4618      	mov	r0, r3
 80716bc:	3728      	adds	r7, #40	; 0x28
 80716be:	46bd      	mov	sp, r7
 80716c0:	bd80      	pop	{r7, pc}
 80716c2:	bf00      	nop
 80716c4:	20001104 	.word	0x20001104

080716c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80716c8:	b580      	push	{r7, lr}
 80716ca:	b088      	sub	sp, #32
 80716cc:	af02      	add	r7, sp, #8
 80716ce:	6078      	str	r0, [r7, #4]
 80716d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80716d2:	4b22      	ldr	r3, [pc, #136]	; (807175c <prvProcessExpiredTimer+0x94>)
 80716d4:	681b      	ldr	r3, [r3, #0]
 80716d6:	68db      	ldr	r3, [r3, #12]
 80716d8:	68db      	ldr	r3, [r3, #12]
 80716da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80716dc:	697b      	ldr	r3, [r7, #20]
 80716de:	3304      	adds	r3, #4
 80716e0:	4618      	mov	r0, r3
 80716e2:	f7fd fb9b 	bl	806ee1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80716e6:	697b      	ldr	r3, [r7, #20]
 80716e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80716ec:	f003 0304 	and.w	r3, r3, #4
 80716f0:	2b00      	cmp	r3, #0
 80716f2:	d022      	beq.n	807173a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80716f4:	697b      	ldr	r3, [r7, #20]
 80716f6:	699a      	ldr	r2, [r3, #24]
 80716f8:	687b      	ldr	r3, [r7, #4]
 80716fa:	18d1      	adds	r1, r2, r3
 80716fc:	687b      	ldr	r3, [r7, #4]
 80716fe:	683a      	ldr	r2, [r7, #0]
 8071700:	6978      	ldr	r0, [r7, #20]
 8071702:	f000 f8d1 	bl	80718a8 <prvInsertTimerInActiveList>
 8071706:	4603      	mov	r3, r0
 8071708:	2b00      	cmp	r3, #0
 807170a:	d01f      	beq.n	807174c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 807170c:	2300      	movs	r3, #0
 807170e:	9300      	str	r3, [sp, #0]
 8071710:	2300      	movs	r3, #0
 8071712:	687a      	ldr	r2, [r7, #4]
 8071714:	2100      	movs	r1, #0
 8071716:	6978      	ldr	r0, [r7, #20]
 8071718:	f7ff ff88 	bl	807162c <xTimerGenericCommand>
 807171c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 807171e:	693b      	ldr	r3, [r7, #16]
 8071720:	2b00      	cmp	r3, #0
 8071722:	d113      	bne.n	807174c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8071724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071728:	f383 8811 	msr	BASEPRI, r3
 807172c:	f3bf 8f6f 	isb	sy
 8071730:	f3bf 8f4f 	dsb	sy
 8071734:	60fb      	str	r3, [r7, #12]
}
 8071736:	bf00      	nop
 8071738:	e7fe      	b.n	8071738 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 807173a:	697b      	ldr	r3, [r7, #20]
 807173c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071740:	f023 0301 	bic.w	r3, r3, #1
 8071744:	b2da      	uxtb	r2, r3
 8071746:	697b      	ldr	r3, [r7, #20]
 8071748:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 807174c:	697b      	ldr	r3, [r7, #20]
 807174e:	6a1b      	ldr	r3, [r3, #32]
 8071750:	6978      	ldr	r0, [r7, #20]
 8071752:	4798      	blx	r3
}
 8071754:	bf00      	nop
 8071756:	3718      	adds	r7, #24
 8071758:	46bd      	mov	sp, r7
 807175a:	bd80      	pop	{r7, pc}
 807175c:	200010fc 	.word	0x200010fc

08071760 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8071760:	b580      	push	{r7, lr}
 8071762:	b084      	sub	sp, #16
 8071764:	af00      	add	r7, sp, #0
 8071766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8071768:	f107 0308 	add.w	r3, r7, #8
 807176c:	4618      	mov	r0, r3
 807176e:	f000 f857 	bl	8071820 <prvGetNextExpireTime>
 8071772:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8071774:	68bb      	ldr	r3, [r7, #8]
 8071776:	4619      	mov	r1, r3
 8071778:	68f8      	ldr	r0, [r7, #12]
 807177a:	f000 f803 	bl	8071784 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 807177e:	f000 f8d5 	bl	807192c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8071782:	e7f1      	b.n	8071768 <prvTimerTask+0x8>

08071784 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8071784:	b580      	push	{r7, lr}
 8071786:	b084      	sub	sp, #16
 8071788:	af00      	add	r7, sp, #0
 807178a:	6078      	str	r0, [r7, #4]
 807178c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 807178e:	f7fe fe8f 	bl	80704b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8071792:	f107 0308 	add.w	r3, r7, #8
 8071796:	4618      	mov	r0, r3
 8071798:	f000 f866 	bl	8071868 <prvSampleTimeNow>
 807179c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 807179e:	68bb      	ldr	r3, [r7, #8]
 80717a0:	2b00      	cmp	r3, #0
 80717a2:	d130      	bne.n	8071806 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80717a4:	683b      	ldr	r3, [r7, #0]
 80717a6:	2b00      	cmp	r3, #0
 80717a8:	d10a      	bne.n	80717c0 <prvProcessTimerOrBlockTask+0x3c>
 80717aa:	687a      	ldr	r2, [r7, #4]
 80717ac:	68fb      	ldr	r3, [r7, #12]
 80717ae:	429a      	cmp	r2, r3
 80717b0:	d806      	bhi.n	80717c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80717b2:	f7fe fe8b 	bl	80704cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80717b6:	68f9      	ldr	r1, [r7, #12]
 80717b8:	6878      	ldr	r0, [r7, #4]
 80717ba:	f7ff ff85 	bl	80716c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80717be:	e024      	b.n	807180a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80717c0:	683b      	ldr	r3, [r7, #0]
 80717c2:	2b00      	cmp	r3, #0
 80717c4:	d008      	beq.n	80717d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80717c6:	4b13      	ldr	r3, [pc, #76]	; (8071814 <prvProcessTimerOrBlockTask+0x90>)
 80717c8:	681b      	ldr	r3, [r3, #0]
 80717ca:	681b      	ldr	r3, [r3, #0]
 80717cc:	2b00      	cmp	r3, #0
 80717ce:	d101      	bne.n	80717d4 <prvProcessTimerOrBlockTask+0x50>
 80717d0:	2301      	movs	r3, #1
 80717d2:	e000      	b.n	80717d6 <prvProcessTimerOrBlockTask+0x52>
 80717d4:	2300      	movs	r3, #0
 80717d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80717d8:	4b0f      	ldr	r3, [pc, #60]	; (8071818 <prvProcessTimerOrBlockTask+0x94>)
 80717da:	6818      	ldr	r0, [r3, #0]
 80717dc:	687a      	ldr	r2, [r7, #4]
 80717de:	68fb      	ldr	r3, [r7, #12]
 80717e0:	1ad3      	subs	r3, r2, r3
 80717e2:	683a      	ldr	r2, [r7, #0]
 80717e4:	4619      	mov	r1, r3
 80717e6:	f7fe fbd3 	bl	806ff90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80717ea:	f7fe fe6f 	bl	80704cc <xTaskResumeAll>
 80717ee:	4603      	mov	r3, r0
 80717f0:	2b00      	cmp	r3, #0
 80717f2:	d10a      	bne.n	807180a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80717f4:	4b09      	ldr	r3, [pc, #36]	; (807181c <prvProcessTimerOrBlockTask+0x98>)
 80717f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80717fa:	601a      	str	r2, [r3, #0]
 80717fc:	f3bf 8f4f 	dsb	sy
 8071800:	f3bf 8f6f 	isb	sy
}
 8071804:	e001      	b.n	807180a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8071806:	f7fe fe61 	bl	80704cc <xTaskResumeAll>
}
 807180a:	bf00      	nop
 807180c:	3710      	adds	r7, #16
 807180e:	46bd      	mov	sp, r7
 8071810:	bd80      	pop	{r7, pc}
 8071812:	bf00      	nop
 8071814:	20001100 	.word	0x20001100
 8071818:	20001104 	.word	0x20001104
 807181c:	e000ed04 	.word	0xe000ed04

08071820 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8071820:	b480      	push	{r7}
 8071822:	b085      	sub	sp, #20
 8071824:	af00      	add	r7, sp, #0
 8071826:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8071828:	4b0e      	ldr	r3, [pc, #56]	; (8071864 <prvGetNextExpireTime+0x44>)
 807182a:	681b      	ldr	r3, [r3, #0]
 807182c:	681b      	ldr	r3, [r3, #0]
 807182e:	2b00      	cmp	r3, #0
 8071830:	d101      	bne.n	8071836 <prvGetNextExpireTime+0x16>
 8071832:	2201      	movs	r2, #1
 8071834:	e000      	b.n	8071838 <prvGetNextExpireTime+0x18>
 8071836:	2200      	movs	r2, #0
 8071838:	687b      	ldr	r3, [r7, #4]
 807183a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 807183c:	687b      	ldr	r3, [r7, #4]
 807183e:	681b      	ldr	r3, [r3, #0]
 8071840:	2b00      	cmp	r3, #0
 8071842:	d105      	bne.n	8071850 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8071844:	4b07      	ldr	r3, [pc, #28]	; (8071864 <prvGetNextExpireTime+0x44>)
 8071846:	681b      	ldr	r3, [r3, #0]
 8071848:	68db      	ldr	r3, [r3, #12]
 807184a:	681b      	ldr	r3, [r3, #0]
 807184c:	60fb      	str	r3, [r7, #12]
 807184e:	e001      	b.n	8071854 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8071850:	2300      	movs	r3, #0
 8071852:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8071854:	68fb      	ldr	r3, [r7, #12]
}
 8071856:	4618      	mov	r0, r3
 8071858:	3714      	adds	r7, #20
 807185a:	46bd      	mov	sp, r7
 807185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071860:	4770      	bx	lr
 8071862:	bf00      	nop
 8071864:	200010fc 	.word	0x200010fc

08071868 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8071868:	b580      	push	{r7, lr}
 807186a:	b084      	sub	sp, #16
 807186c:	af00      	add	r7, sp, #0
 807186e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8071870:	f7fe feca 	bl	8070608 <xTaskGetTickCount>
 8071874:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8071876:	4b0b      	ldr	r3, [pc, #44]	; (80718a4 <prvSampleTimeNow+0x3c>)
 8071878:	681b      	ldr	r3, [r3, #0]
 807187a:	68fa      	ldr	r2, [r7, #12]
 807187c:	429a      	cmp	r2, r3
 807187e:	d205      	bcs.n	807188c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8071880:	f000 f936 	bl	8071af0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8071884:	687b      	ldr	r3, [r7, #4]
 8071886:	2201      	movs	r2, #1
 8071888:	601a      	str	r2, [r3, #0]
 807188a:	e002      	b.n	8071892 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 807188c:	687b      	ldr	r3, [r7, #4]
 807188e:	2200      	movs	r2, #0
 8071890:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8071892:	4a04      	ldr	r2, [pc, #16]	; (80718a4 <prvSampleTimeNow+0x3c>)
 8071894:	68fb      	ldr	r3, [r7, #12]
 8071896:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8071898:	68fb      	ldr	r3, [r7, #12]
}
 807189a:	4618      	mov	r0, r3
 807189c:	3710      	adds	r7, #16
 807189e:	46bd      	mov	sp, r7
 80718a0:	bd80      	pop	{r7, pc}
 80718a2:	bf00      	nop
 80718a4:	2000110c 	.word	0x2000110c

080718a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80718a8:	b580      	push	{r7, lr}
 80718aa:	b086      	sub	sp, #24
 80718ac:	af00      	add	r7, sp, #0
 80718ae:	60f8      	str	r0, [r7, #12]
 80718b0:	60b9      	str	r1, [r7, #8]
 80718b2:	607a      	str	r2, [r7, #4]
 80718b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80718b6:	2300      	movs	r3, #0
 80718b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80718ba:	68fb      	ldr	r3, [r7, #12]
 80718bc:	68ba      	ldr	r2, [r7, #8]
 80718be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80718c0:	68fb      	ldr	r3, [r7, #12]
 80718c2:	68fa      	ldr	r2, [r7, #12]
 80718c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80718c6:	68ba      	ldr	r2, [r7, #8]
 80718c8:	687b      	ldr	r3, [r7, #4]
 80718ca:	429a      	cmp	r2, r3
 80718cc:	d812      	bhi.n	80718f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80718ce:	687a      	ldr	r2, [r7, #4]
 80718d0:	683b      	ldr	r3, [r7, #0]
 80718d2:	1ad2      	subs	r2, r2, r3
 80718d4:	68fb      	ldr	r3, [r7, #12]
 80718d6:	699b      	ldr	r3, [r3, #24]
 80718d8:	429a      	cmp	r2, r3
 80718da:	d302      	bcc.n	80718e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80718dc:	2301      	movs	r3, #1
 80718de:	617b      	str	r3, [r7, #20]
 80718e0:	e01b      	b.n	807191a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80718e2:	4b10      	ldr	r3, [pc, #64]	; (8071924 <prvInsertTimerInActiveList+0x7c>)
 80718e4:	681a      	ldr	r2, [r3, #0]
 80718e6:	68fb      	ldr	r3, [r7, #12]
 80718e8:	3304      	adds	r3, #4
 80718ea:	4619      	mov	r1, r3
 80718ec:	4610      	mov	r0, r2
 80718ee:	f7fd fa5c 	bl	806edaa <vListInsert>
 80718f2:	e012      	b.n	807191a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80718f4:	687a      	ldr	r2, [r7, #4]
 80718f6:	683b      	ldr	r3, [r7, #0]
 80718f8:	429a      	cmp	r2, r3
 80718fa:	d206      	bcs.n	807190a <prvInsertTimerInActiveList+0x62>
 80718fc:	68ba      	ldr	r2, [r7, #8]
 80718fe:	683b      	ldr	r3, [r7, #0]
 8071900:	429a      	cmp	r2, r3
 8071902:	d302      	bcc.n	807190a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8071904:	2301      	movs	r3, #1
 8071906:	617b      	str	r3, [r7, #20]
 8071908:	e007      	b.n	807191a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 807190a:	4b07      	ldr	r3, [pc, #28]	; (8071928 <prvInsertTimerInActiveList+0x80>)
 807190c:	681a      	ldr	r2, [r3, #0]
 807190e:	68fb      	ldr	r3, [r7, #12]
 8071910:	3304      	adds	r3, #4
 8071912:	4619      	mov	r1, r3
 8071914:	4610      	mov	r0, r2
 8071916:	f7fd fa48 	bl	806edaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 807191a:	697b      	ldr	r3, [r7, #20]
}
 807191c:	4618      	mov	r0, r3
 807191e:	3718      	adds	r7, #24
 8071920:	46bd      	mov	sp, r7
 8071922:	bd80      	pop	{r7, pc}
 8071924:	20001100 	.word	0x20001100
 8071928:	200010fc 	.word	0x200010fc

0807192c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 807192c:	b580      	push	{r7, lr}
 807192e:	b08e      	sub	sp, #56	; 0x38
 8071930:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8071932:	e0ca      	b.n	8071aca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8071934:	687b      	ldr	r3, [r7, #4]
 8071936:	2b00      	cmp	r3, #0
 8071938:	da18      	bge.n	807196c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 807193a:	1d3b      	adds	r3, r7, #4
 807193c:	3304      	adds	r3, #4
 807193e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8071940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8071942:	2b00      	cmp	r3, #0
 8071944:	d10a      	bne.n	807195c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8071946:	f04f 0350 	mov.w	r3, #80	; 0x50
 807194a:	f383 8811 	msr	BASEPRI, r3
 807194e:	f3bf 8f6f 	isb	sy
 8071952:	f3bf 8f4f 	dsb	sy
 8071956:	61fb      	str	r3, [r7, #28]
}
 8071958:	bf00      	nop
 807195a:	e7fe      	b.n	807195a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 807195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 807195e:	681b      	ldr	r3, [r3, #0]
 8071960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8071962:	6850      	ldr	r0, [r2, #4]
 8071964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8071966:	6892      	ldr	r2, [r2, #8]
 8071968:	4611      	mov	r1, r2
 807196a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 807196c:	687b      	ldr	r3, [r7, #4]
 807196e:	2b00      	cmp	r3, #0
 8071970:	f2c0 80aa 	blt.w	8071ac8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8071974:	68fb      	ldr	r3, [r7, #12]
 8071976:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8071978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807197a:	695b      	ldr	r3, [r3, #20]
 807197c:	2b00      	cmp	r3, #0
 807197e:	d004      	beq.n	807198a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8071980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071982:	3304      	adds	r3, #4
 8071984:	4618      	mov	r0, r3
 8071986:	f7fd fa49 	bl	806ee1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 807198a:	463b      	mov	r3, r7
 807198c:	4618      	mov	r0, r3
 807198e:	f7ff ff6b 	bl	8071868 <prvSampleTimeNow>
 8071992:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8071994:	687b      	ldr	r3, [r7, #4]
 8071996:	2b09      	cmp	r3, #9
 8071998:	f200 8097 	bhi.w	8071aca <prvProcessReceivedCommands+0x19e>
 807199c:	a201      	add	r2, pc, #4	; (adr r2, 80719a4 <prvProcessReceivedCommands+0x78>)
 807199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80719a2:	bf00      	nop
 80719a4:	080719cd 	.word	0x080719cd
 80719a8:	080719cd 	.word	0x080719cd
 80719ac:	080719cd 	.word	0x080719cd
 80719b0:	08071a41 	.word	0x08071a41
 80719b4:	08071a55 	.word	0x08071a55
 80719b8:	08071a9f 	.word	0x08071a9f
 80719bc:	080719cd 	.word	0x080719cd
 80719c0:	080719cd 	.word	0x080719cd
 80719c4:	08071a41 	.word	0x08071a41
 80719c8:	08071a55 	.word	0x08071a55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80719cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80719ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80719d2:	f043 0301 	orr.w	r3, r3, #1
 80719d6:	b2da      	uxtb	r2, r3
 80719d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80719da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80719de:	68ba      	ldr	r2, [r7, #8]
 80719e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80719e2:	699b      	ldr	r3, [r3, #24]
 80719e4:	18d1      	adds	r1, r2, r3
 80719e6:	68bb      	ldr	r3, [r7, #8]
 80719e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80719ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80719ec:	f7ff ff5c 	bl	80718a8 <prvInsertTimerInActiveList>
 80719f0:	4603      	mov	r3, r0
 80719f2:	2b00      	cmp	r3, #0
 80719f4:	d069      	beq.n	8071aca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80719f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80719f8:	6a1b      	ldr	r3, [r3, #32]
 80719fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80719fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80719fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071a04:	f003 0304 	and.w	r3, r3, #4
 8071a08:	2b00      	cmp	r3, #0
 8071a0a:	d05e      	beq.n	8071aca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8071a0c:	68ba      	ldr	r2, [r7, #8]
 8071a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071a10:	699b      	ldr	r3, [r3, #24]
 8071a12:	441a      	add	r2, r3
 8071a14:	2300      	movs	r3, #0
 8071a16:	9300      	str	r3, [sp, #0]
 8071a18:	2300      	movs	r3, #0
 8071a1a:	2100      	movs	r1, #0
 8071a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8071a1e:	f7ff fe05 	bl	807162c <xTimerGenericCommand>
 8071a22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8071a24:	6a3b      	ldr	r3, [r7, #32]
 8071a26:	2b00      	cmp	r3, #0
 8071a28:	d14f      	bne.n	8071aca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8071a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071a2e:	f383 8811 	msr	BASEPRI, r3
 8071a32:	f3bf 8f6f 	isb	sy
 8071a36:	f3bf 8f4f 	dsb	sy
 8071a3a:	61bb      	str	r3, [r7, #24]
}
 8071a3c:	bf00      	nop
 8071a3e:	e7fe      	b.n	8071a3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8071a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071a46:	f023 0301 	bic.w	r3, r3, #1
 8071a4a:	b2da      	uxtb	r2, r3
 8071a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8071a52:	e03a      	b.n	8071aca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8071a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071a5a:	f043 0301 	orr.w	r3, r3, #1
 8071a5e:	b2da      	uxtb	r2, r3
 8071a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8071a66:	68ba      	ldr	r2, [r7, #8]
 8071a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071a6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8071a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071a6e:	699b      	ldr	r3, [r3, #24]
 8071a70:	2b00      	cmp	r3, #0
 8071a72:	d10a      	bne.n	8071a8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8071a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071a78:	f383 8811 	msr	BASEPRI, r3
 8071a7c:	f3bf 8f6f 	isb	sy
 8071a80:	f3bf 8f4f 	dsb	sy
 8071a84:	617b      	str	r3, [r7, #20]
}
 8071a86:	bf00      	nop
 8071a88:	e7fe      	b.n	8071a88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8071a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071a8c:	699a      	ldr	r2, [r3, #24]
 8071a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071a90:	18d1      	adds	r1, r2, r3
 8071a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8071a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8071a98:	f7ff ff06 	bl	80718a8 <prvInsertTimerInActiveList>
					break;
 8071a9c:	e015      	b.n	8071aca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8071a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071aa4:	f003 0302 	and.w	r3, r3, #2
 8071aa8:	2b00      	cmp	r3, #0
 8071aaa:	d103      	bne.n	8071ab4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8071aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8071aae:	f000 fbff 	bl	80722b0 <vPortFree>
 8071ab2:	e00a      	b.n	8071aca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8071ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071aba:	f023 0301 	bic.w	r3, r3, #1
 8071abe:	b2da      	uxtb	r2, r3
 8071ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8071ac6:	e000      	b.n	8071aca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8071ac8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8071aca:	4b08      	ldr	r3, [pc, #32]	; (8071aec <prvProcessReceivedCommands+0x1c0>)
 8071acc:	681b      	ldr	r3, [r3, #0]
 8071ace:	1d39      	adds	r1, r7, #4
 8071ad0:	2200      	movs	r2, #0
 8071ad2:	4618      	mov	r0, r3
 8071ad4:	f7fd fe50 	bl	806f778 <xQueueReceive>
 8071ad8:	4603      	mov	r3, r0
 8071ada:	2b00      	cmp	r3, #0
 8071adc:	f47f af2a 	bne.w	8071934 <prvProcessReceivedCommands+0x8>
	}
}
 8071ae0:	bf00      	nop
 8071ae2:	bf00      	nop
 8071ae4:	3730      	adds	r7, #48	; 0x30
 8071ae6:	46bd      	mov	sp, r7
 8071ae8:	bd80      	pop	{r7, pc}
 8071aea:	bf00      	nop
 8071aec:	20001104 	.word	0x20001104

08071af0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8071af0:	b580      	push	{r7, lr}
 8071af2:	b088      	sub	sp, #32
 8071af4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8071af6:	e048      	b.n	8071b8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8071af8:	4b2d      	ldr	r3, [pc, #180]	; (8071bb0 <prvSwitchTimerLists+0xc0>)
 8071afa:	681b      	ldr	r3, [r3, #0]
 8071afc:	68db      	ldr	r3, [r3, #12]
 8071afe:	681b      	ldr	r3, [r3, #0]
 8071b00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8071b02:	4b2b      	ldr	r3, [pc, #172]	; (8071bb0 <prvSwitchTimerLists+0xc0>)
 8071b04:	681b      	ldr	r3, [r3, #0]
 8071b06:	68db      	ldr	r3, [r3, #12]
 8071b08:	68db      	ldr	r3, [r3, #12]
 8071b0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8071b0c:	68fb      	ldr	r3, [r7, #12]
 8071b0e:	3304      	adds	r3, #4
 8071b10:	4618      	mov	r0, r3
 8071b12:	f7fd f983 	bl	806ee1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8071b16:	68fb      	ldr	r3, [r7, #12]
 8071b18:	6a1b      	ldr	r3, [r3, #32]
 8071b1a:	68f8      	ldr	r0, [r7, #12]
 8071b1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8071b1e:	68fb      	ldr	r3, [r7, #12]
 8071b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071b24:	f003 0304 	and.w	r3, r3, #4
 8071b28:	2b00      	cmp	r3, #0
 8071b2a:	d02e      	beq.n	8071b8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8071b2c:	68fb      	ldr	r3, [r7, #12]
 8071b2e:	699b      	ldr	r3, [r3, #24]
 8071b30:	693a      	ldr	r2, [r7, #16]
 8071b32:	4413      	add	r3, r2
 8071b34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8071b36:	68ba      	ldr	r2, [r7, #8]
 8071b38:	693b      	ldr	r3, [r7, #16]
 8071b3a:	429a      	cmp	r2, r3
 8071b3c:	d90e      	bls.n	8071b5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8071b3e:	68fb      	ldr	r3, [r7, #12]
 8071b40:	68ba      	ldr	r2, [r7, #8]
 8071b42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8071b44:	68fb      	ldr	r3, [r7, #12]
 8071b46:	68fa      	ldr	r2, [r7, #12]
 8071b48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8071b4a:	4b19      	ldr	r3, [pc, #100]	; (8071bb0 <prvSwitchTimerLists+0xc0>)
 8071b4c:	681a      	ldr	r2, [r3, #0]
 8071b4e:	68fb      	ldr	r3, [r7, #12]
 8071b50:	3304      	adds	r3, #4
 8071b52:	4619      	mov	r1, r3
 8071b54:	4610      	mov	r0, r2
 8071b56:	f7fd f928 	bl	806edaa <vListInsert>
 8071b5a:	e016      	b.n	8071b8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8071b5c:	2300      	movs	r3, #0
 8071b5e:	9300      	str	r3, [sp, #0]
 8071b60:	2300      	movs	r3, #0
 8071b62:	693a      	ldr	r2, [r7, #16]
 8071b64:	2100      	movs	r1, #0
 8071b66:	68f8      	ldr	r0, [r7, #12]
 8071b68:	f7ff fd60 	bl	807162c <xTimerGenericCommand>
 8071b6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8071b6e:	687b      	ldr	r3, [r7, #4]
 8071b70:	2b00      	cmp	r3, #0
 8071b72:	d10a      	bne.n	8071b8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8071b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071b78:	f383 8811 	msr	BASEPRI, r3
 8071b7c:	f3bf 8f6f 	isb	sy
 8071b80:	f3bf 8f4f 	dsb	sy
 8071b84:	603b      	str	r3, [r7, #0]
}
 8071b86:	bf00      	nop
 8071b88:	e7fe      	b.n	8071b88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8071b8a:	4b09      	ldr	r3, [pc, #36]	; (8071bb0 <prvSwitchTimerLists+0xc0>)
 8071b8c:	681b      	ldr	r3, [r3, #0]
 8071b8e:	681b      	ldr	r3, [r3, #0]
 8071b90:	2b00      	cmp	r3, #0
 8071b92:	d1b1      	bne.n	8071af8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8071b94:	4b06      	ldr	r3, [pc, #24]	; (8071bb0 <prvSwitchTimerLists+0xc0>)
 8071b96:	681b      	ldr	r3, [r3, #0]
 8071b98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8071b9a:	4b06      	ldr	r3, [pc, #24]	; (8071bb4 <prvSwitchTimerLists+0xc4>)
 8071b9c:	681b      	ldr	r3, [r3, #0]
 8071b9e:	4a04      	ldr	r2, [pc, #16]	; (8071bb0 <prvSwitchTimerLists+0xc0>)
 8071ba0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8071ba2:	4a04      	ldr	r2, [pc, #16]	; (8071bb4 <prvSwitchTimerLists+0xc4>)
 8071ba4:	697b      	ldr	r3, [r7, #20]
 8071ba6:	6013      	str	r3, [r2, #0]
}
 8071ba8:	bf00      	nop
 8071baa:	3718      	adds	r7, #24
 8071bac:	46bd      	mov	sp, r7
 8071bae:	bd80      	pop	{r7, pc}
 8071bb0:	200010fc 	.word	0x200010fc
 8071bb4:	20001100 	.word	0x20001100

08071bb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8071bb8:	b580      	push	{r7, lr}
 8071bba:	b082      	sub	sp, #8
 8071bbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8071bbe:	f000 f989 	bl	8071ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8071bc2:	4b15      	ldr	r3, [pc, #84]	; (8071c18 <prvCheckForValidListAndQueue+0x60>)
 8071bc4:	681b      	ldr	r3, [r3, #0]
 8071bc6:	2b00      	cmp	r3, #0
 8071bc8:	d120      	bne.n	8071c0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8071bca:	4814      	ldr	r0, [pc, #80]	; (8071c1c <prvCheckForValidListAndQueue+0x64>)
 8071bcc:	f7fd f89c 	bl	806ed08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8071bd0:	4813      	ldr	r0, [pc, #76]	; (8071c20 <prvCheckForValidListAndQueue+0x68>)
 8071bd2:	f7fd f899 	bl	806ed08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8071bd6:	4b13      	ldr	r3, [pc, #76]	; (8071c24 <prvCheckForValidListAndQueue+0x6c>)
 8071bd8:	4a10      	ldr	r2, [pc, #64]	; (8071c1c <prvCheckForValidListAndQueue+0x64>)
 8071bda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8071bdc:	4b12      	ldr	r3, [pc, #72]	; (8071c28 <prvCheckForValidListAndQueue+0x70>)
 8071bde:	4a10      	ldr	r2, [pc, #64]	; (8071c20 <prvCheckForValidListAndQueue+0x68>)
 8071be0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8071be2:	2300      	movs	r3, #0
 8071be4:	9300      	str	r3, [sp, #0]
 8071be6:	4b11      	ldr	r3, [pc, #68]	; (8071c2c <prvCheckForValidListAndQueue+0x74>)
 8071be8:	4a11      	ldr	r2, [pc, #68]	; (8071c30 <prvCheckForValidListAndQueue+0x78>)
 8071bea:	2110      	movs	r1, #16
 8071bec:	200a      	movs	r0, #10
 8071bee:	f7fd f9a7 	bl	806ef40 <xQueueGenericCreateStatic>
 8071bf2:	4603      	mov	r3, r0
 8071bf4:	4a08      	ldr	r2, [pc, #32]	; (8071c18 <prvCheckForValidListAndQueue+0x60>)
 8071bf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8071bf8:	4b07      	ldr	r3, [pc, #28]	; (8071c18 <prvCheckForValidListAndQueue+0x60>)
 8071bfa:	681b      	ldr	r3, [r3, #0]
 8071bfc:	2b00      	cmp	r3, #0
 8071bfe:	d005      	beq.n	8071c0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8071c00:	4b05      	ldr	r3, [pc, #20]	; (8071c18 <prvCheckForValidListAndQueue+0x60>)
 8071c02:	681b      	ldr	r3, [r3, #0]
 8071c04:	490b      	ldr	r1, [pc, #44]	; (8071c34 <prvCheckForValidListAndQueue+0x7c>)
 8071c06:	4618      	mov	r0, r3
 8071c08:	f7fe f96e 	bl	806fee8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8071c0c:	f000 f992 	bl	8071f34 <vPortExitCritical>
}
 8071c10:	bf00      	nop
 8071c12:	46bd      	mov	sp, r7
 8071c14:	bd80      	pop	{r7, pc}
 8071c16:	bf00      	nop
 8071c18:	20001104 	.word	0x20001104
 8071c1c:	200010d4 	.word	0x200010d4
 8071c20:	200010e8 	.word	0x200010e8
 8071c24:	200010fc 	.word	0x200010fc
 8071c28:	20001100 	.word	0x20001100
 8071c2c:	200011b0 	.word	0x200011b0
 8071c30:	20001110 	.word	0x20001110
 8071c34:	080775cc 	.word	0x080775cc

08071c38 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8071c38:	b580      	push	{r7, lr}
 8071c3a:	b086      	sub	sp, #24
 8071c3c:	af00      	add	r7, sp, #0
 8071c3e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8071c40:	687b      	ldr	r3, [r7, #4]
 8071c42:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8071c44:	687b      	ldr	r3, [r7, #4]
 8071c46:	2b00      	cmp	r3, #0
 8071c48:	d10a      	bne.n	8071c60 <pvTimerGetTimerID+0x28>
	__asm volatile
 8071c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071c4e:	f383 8811 	msr	BASEPRI, r3
 8071c52:	f3bf 8f6f 	isb	sy
 8071c56:	f3bf 8f4f 	dsb	sy
 8071c5a:	60fb      	str	r3, [r7, #12]
}
 8071c5c:	bf00      	nop
 8071c5e:	e7fe      	b.n	8071c5e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8071c60:	f000 f938 	bl	8071ed4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8071c64:	697b      	ldr	r3, [r7, #20]
 8071c66:	69db      	ldr	r3, [r3, #28]
 8071c68:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8071c6a:	f000 f963 	bl	8071f34 <vPortExitCritical>

	return pvReturn;
 8071c6e:	693b      	ldr	r3, [r7, #16]
}
 8071c70:	4618      	mov	r0, r3
 8071c72:	3718      	adds	r7, #24
 8071c74:	46bd      	mov	sp, r7
 8071c76:	bd80      	pop	{r7, pc}

08071c78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8071c78:	b480      	push	{r7}
 8071c7a:	b085      	sub	sp, #20
 8071c7c:	af00      	add	r7, sp, #0
 8071c7e:	60f8      	str	r0, [r7, #12]
 8071c80:	60b9      	str	r1, [r7, #8]
 8071c82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8071c84:	68fb      	ldr	r3, [r7, #12]
 8071c86:	3b04      	subs	r3, #4
 8071c88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8071c8a:	68fb      	ldr	r3, [r7, #12]
 8071c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8071c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8071c92:	68fb      	ldr	r3, [r7, #12]
 8071c94:	3b04      	subs	r3, #4
 8071c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8071c98:	68bb      	ldr	r3, [r7, #8]
 8071c9a:	f023 0201 	bic.w	r2, r3, #1
 8071c9e:	68fb      	ldr	r3, [r7, #12]
 8071ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8071ca2:	68fb      	ldr	r3, [r7, #12]
 8071ca4:	3b04      	subs	r3, #4
 8071ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8071ca8:	4a0c      	ldr	r2, [pc, #48]	; (8071cdc <pxPortInitialiseStack+0x64>)
 8071caa:	68fb      	ldr	r3, [r7, #12]
 8071cac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8071cae:	68fb      	ldr	r3, [r7, #12]
 8071cb0:	3b14      	subs	r3, #20
 8071cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8071cb4:	687a      	ldr	r2, [r7, #4]
 8071cb6:	68fb      	ldr	r3, [r7, #12]
 8071cb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8071cba:	68fb      	ldr	r3, [r7, #12]
 8071cbc:	3b04      	subs	r3, #4
 8071cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8071cc0:	68fb      	ldr	r3, [r7, #12]
 8071cc2:	f06f 0202 	mvn.w	r2, #2
 8071cc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8071cc8:	68fb      	ldr	r3, [r7, #12]
 8071cca:	3b20      	subs	r3, #32
 8071ccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8071cce:	68fb      	ldr	r3, [r7, #12]
}
 8071cd0:	4618      	mov	r0, r3
 8071cd2:	3714      	adds	r7, #20
 8071cd4:	46bd      	mov	sp, r7
 8071cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071cda:	4770      	bx	lr
 8071cdc:	08071ce1 	.word	0x08071ce1

08071ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8071ce0:	b480      	push	{r7}
 8071ce2:	b085      	sub	sp, #20
 8071ce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8071ce6:	2300      	movs	r3, #0
 8071ce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8071cea:	4b12      	ldr	r3, [pc, #72]	; (8071d34 <prvTaskExitError+0x54>)
 8071cec:	681b      	ldr	r3, [r3, #0]
 8071cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8071cf2:	d00a      	beq.n	8071d0a <prvTaskExitError+0x2a>
	__asm volatile
 8071cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071cf8:	f383 8811 	msr	BASEPRI, r3
 8071cfc:	f3bf 8f6f 	isb	sy
 8071d00:	f3bf 8f4f 	dsb	sy
 8071d04:	60fb      	str	r3, [r7, #12]
}
 8071d06:	bf00      	nop
 8071d08:	e7fe      	b.n	8071d08 <prvTaskExitError+0x28>
	__asm volatile
 8071d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071d0e:	f383 8811 	msr	BASEPRI, r3
 8071d12:	f3bf 8f6f 	isb	sy
 8071d16:	f3bf 8f4f 	dsb	sy
 8071d1a:	60bb      	str	r3, [r7, #8]
}
 8071d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8071d1e:	bf00      	nop
 8071d20:	687b      	ldr	r3, [r7, #4]
 8071d22:	2b00      	cmp	r3, #0
 8071d24:	d0fc      	beq.n	8071d20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8071d26:	bf00      	nop
 8071d28:	bf00      	nop
 8071d2a:	3714      	adds	r7, #20
 8071d2c:	46bd      	mov	sp, r7
 8071d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071d32:	4770      	bx	lr
 8071d34:	20000024 	.word	0x20000024
	...

08071d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8071d40:	4b07      	ldr	r3, [pc, #28]	; (8071d60 <pxCurrentTCBConst2>)
 8071d42:	6819      	ldr	r1, [r3, #0]
 8071d44:	6808      	ldr	r0, [r1, #0]
 8071d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8071d4a:	f380 8809 	msr	PSP, r0
 8071d4e:	f3bf 8f6f 	isb	sy
 8071d52:	f04f 0000 	mov.w	r0, #0
 8071d56:	f380 8811 	msr	BASEPRI, r0
 8071d5a:	4770      	bx	lr
 8071d5c:	f3af 8000 	nop.w

08071d60 <pxCurrentTCBConst2>:
 8071d60:	20000bd4 	.word	0x20000bd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8071d64:	bf00      	nop
 8071d66:	bf00      	nop

08071d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8071d68:	4808      	ldr	r0, [pc, #32]	; (8071d8c <prvPortStartFirstTask+0x24>)
 8071d6a:	6800      	ldr	r0, [r0, #0]
 8071d6c:	6800      	ldr	r0, [r0, #0]
 8071d6e:	f380 8808 	msr	MSP, r0
 8071d72:	f04f 0000 	mov.w	r0, #0
 8071d76:	f380 8814 	msr	CONTROL, r0
 8071d7a:	b662      	cpsie	i
 8071d7c:	b661      	cpsie	f
 8071d7e:	f3bf 8f4f 	dsb	sy
 8071d82:	f3bf 8f6f 	isb	sy
 8071d86:	df00      	svc	0
 8071d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8071d8a:	bf00      	nop
 8071d8c:	e000ed08 	.word	0xe000ed08

08071d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8071d90:	b580      	push	{r7, lr}
 8071d92:	b086      	sub	sp, #24
 8071d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8071d96:	4b46      	ldr	r3, [pc, #280]	; (8071eb0 <xPortStartScheduler+0x120>)
 8071d98:	681b      	ldr	r3, [r3, #0]
 8071d9a:	4a46      	ldr	r2, [pc, #280]	; (8071eb4 <xPortStartScheduler+0x124>)
 8071d9c:	4293      	cmp	r3, r2
 8071d9e:	d10a      	bne.n	8071db6 <xPortStartScheduler+0x26>
	__asm volatile
 8071da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071da4:	f383 8811 	msr	BASEPRI, r3
 8071da8:	f3bf 8f6f 	isb	sy
 8071dac:	f3bf 8f4f 	dsb	sy
 8071db0:	613b      	str	r3, [r7, #16]
}
 8071db2:	bf00      	nop
 8071db4:	e7fe      	b.n	8071db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8071db6:	4b3e      	ldr	r3, [pc, #248]	; (8071eb0 <xPortStartScheduler+0x120>)
 8071db8:	681b      	ldr	r3, [r3, #0]
 8071dba:	4a3f      	ldr	r2, [pc, #252]	; (8071eb8 <xPortStartScheduler+0x128>)
 8071dbc:	4293      	cmp	r3, r2
 8071dbe:	d10a      	bne.n	8071dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8071dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071dc4:	f383 8811 	msr	BASEPRI, r3
 8071dc8:	f3bf 8f6f 	isb	sy
 8071dcc:	f3bf 8f4f 	dsb	sy
 8071dd0:	60fb      	str	r3, [r7, #12]
}
 8071dd2:	bf00      	nop
 8071dd4:	e7fe      	b.n	8071dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8071dd6:	4b39      	ldr	r3, [pc, #228]	; (8071ebc <xPortStartScheduler+0x12c>)
 8071dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8071dda:	697b      	ldr	r3, [r7, #20]
 8071ddc:	781b      	ldrb	r3, [r3, #0]
 8071dde:	b2db      	uxtb	r3, r3
 8071de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8071de2:	697b      	ldr	r3, [r7, #20]
 8071de4:	22ff      	movs	r2, #255	; 0xff
 8071de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8071de8:	697b      	ldr	r3, [r7, #20]
 8071dea:	781b      	ldrb	r3, [r3, #0]
 8071dec:	b2db      	uxtb	r3, r3
 8071dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8071df0:	78fb      	ldrb	r3, [r7, #3]
 8071df2:	b2db      	uxtb	r3, r3
 8071df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8071df8:	b2da      	uxtb	r2, r3
 8071dfa:	4b31      	ldr	r3, [pc, #196]	; (8071ec0 <xPortStartScheduler+0x130>)
 8071dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8071dfe:	4b31      	ldr	r3, [pc, #196]	; (8071ec4 <xPortStartScheduler+0x134>)
 8071e00:	2207      	movs	r2, #7
 8071e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8071e04:	e009      	b.n	8071e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8071e06:	4b2f      	ldr	r3, [pc, #188]	; (8071ec4 <xPortStartScheduler+0x134>)
 8071e08:	681b      	ldr	r3, [r3, #0]
 8071e0a:	3b01      	subs	r3, #1
 8071e0c:	4a2d      	ldr	r2, [pc, #180]	; (8071ec4 <xPortStartScheduler+0x134>)
 8071e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8071e10:	78fb      	ldrb	r3, [r7, #3]
 8071e12:	b2db      	uxtb	r3, r3
 8071e14:	005b      	lsls	r3, r3, #1
 8071e16:	b2db      	uxtb	r3, r3
 8071e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8071e1a:	78fb      	ldrb	r3, [r7, #3]
 8071e1c:	b2db      	uxtb	r3, r3
 8071e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8071e22:	2b80      	cmp	r3, #128	; 0x80
 8071e24:	d0ef      	beq.n	8071e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8071e26:	4b27      	ldr	r3, [pc, #156]	; (8071ec4 <xPortStartScheduler+0x134>)
 8071e28:	681b      	ldr	r3, [r3, #0]
 8071e2a:	f1c3 0307 	rsb	r3, r3, #7
 8071e2e:	2b04      	cmp	r3, #4
 8071e30:	d00a      	beq.n	8071e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8071e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071e36:	f383 8811 	msr	BASEPRI, r3
 8071e3a:	f3bf 8f6f 	isb	sy
 8071e3e:	f3bf 8f4f 	dsb	sy
 8071e42:	60bb      	str	r3, [r7, #8]
}
 8071e44:	bf00      	nop
 8071e46:	e7fe      	b.n	8071e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8071e48:	4b1e      	ldr	r3, [pc, #120]	; (8071ec4 <xPortStartScheduler+0x134>)
 8071e4a:	681b      	ldr	r3, [r3, #0]
 8071e4c:	021b      	lsls	r3, r3, #8
 8071e4e:	4a1d      	ldr	r2, [pc, #116]	; (8071ec4 <xPortStartScheduler+0x134>)
 8071e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8071e52:	4b1c      	ldr	r3, [pc, #112]	; (8071ec4 <xPortStartScheduler+0x134>)
 8071e54:	681b      	ldr	r3, [r3, #0]
 8071e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8071e5a:	4a1a      	ldr	r2, [pc, #104]	; (8071ec4 <xPortStartScheduler+0x134>)
 8071e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8071e5e:	687b      	ldr	r3, [r7, #4]
 8071e60:	b2da      	uxtb	r2, r3
 8071e62:	697b      	ldr	r3, [r7, #20]
 8071e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8071e66:	4b18      	ldr	r3, [pc, #96]	; (8071ec8 <xPortStartScheduler+0x138>)
 8071e68:	681b      	ldr	r3, [r3, #0]
 8071e6a:	4a17      	ldr	r2, [pc, #92]	; (8071ec8 <xPortStartScheduler+0x138>)
 8071e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8071e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8071e72:	4b15      	ldr	r3, [pc, #84]	; (8071ec8 <xPortStartScheduler+0x138>)
 8071e74:	681b      	ldr	r3, [r3, #0]
 8071e76:	4a14      	ldr	r2, [pc, #80]	; (8071ec8 <xPortStartScheduler+0x138>)
 8071e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8071e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8071e7e:	f000 f8dd 	bl	807203c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8071e82:	4b12      	ldr	r3, [pc, #72]	; (8071ecc <xPortStartScheduler+0x13c>)
 8071e84:	2200      	movs	r2, #0
 8071e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8071e88:	f000 f8fc 	bl	8072084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8071e8c:	4b10      	ldr	r3, [pc, #64]	; (8071ed0 <xPortStartScheduler+0x140>)
 8071e8e:	681b      	ldr	r3, [r3, #0]
 8071e90:	4a0f      	ldr	r2, [pc, #60]	; (8071ed0 <xPortStartScheduler+0x140>)
 8071e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8071e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8071e98:	f7ff ff66 	bl	8071d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8071e9c:	f7fe fc7e 	bl	807079c <vTaskSwitchContext>
	prvTaskExitError();
 8071ea0:	f7ff ff1e 	bl	8071ce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8071ea4:	2300      	movs	r3, #0
}
 8071ea6:	4618      	mov	r0, r3
 8071ea8:	3718      	adds	r7, #24
 8071eaa:	46bd      	mov	sp, r7
 8071eac:	bd80      	pop	{r7, pc}
 8071eae:	bf00      	nop
 8071eb0:	e000ed00 	.word	0xe000ed00
 8071eb4:	410fc271 	.word	0x410fc271
 8071eb8:	410fc270 	.word	0x410fc270
 8071ebc:	e000e400 	.word	0xe000e400
 8071ec0:	20001200 	.word	0x20001200
 8071ec4:	20001204 	.word	0x20001204
 8071ec8:	e000ed20 	.word	0xe000ed20
 8071ecc:	20000024 	.word	0x20000024
 8071ed0:	e000ef34 	.word	0xe000ef34

08071ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8071ed4:	b480      	push	{r7}
 8071ed6:	b083      	sub	sp, #12
 8071ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8071eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071ede:	f383 8811 	msr	BASEPRI, r3
 8071ee2:	f3bf 8f6f 	isb	sy
 8071ee6:	f3bf 8f4f 	dsb	sy
 8071eea:	607b      	str	r3, [r7, #4]
}
 8071eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8071eee:	4b0f      	ldr	r3, [pc, #60]	; (8071f2c <vPortEnterCritical+0x58>)
 8071ef0:	681b      	ldr	r3, [r3, #0]
 8071ef2:	3301      	adds	r3, #1
 8071ef4:	4a0d      	ldr	r2, [pc, #52]	; (8071f2c <vPortEnterCritical+0x58>)
 8071ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8071ef8:	4b0c      	ldr	r3, [pc, #48]	; (8071f2c <vPortEnterCritical+0x58>)
 8071efa:	681b      	ldr	r3, [r3, #0]
 8071efc:	2b01      	cmp	r3, #1
 8071efe:	d10f      	bne.n	8071f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8071f00:	4b0b      	ldr	r3, [pc, #44]	; (8071f30 <vPortEnterCritical+0x5c>)
 8071f02:	681b      	ldr	r3, [r3, #0]
 8071f04:	b2db      	uxtb	r3, r3
 8071f06:	2b00      	cmp	r3, #0
 8071f08:	d00a      	beq.n	8071f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8071f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071f0e:	f383 8811 	msr	BASEPRI, r3
 8071f12:	f3bf 8f6f 	isb	sy
 8071f16:	f3bf 8f4f 	dsb	sy
 8071f1a:	603b      	str	r3, [r7, #0]
}
 8071f1c:	bf00      	nop
 8071f1e:	e7fe      	b.n	8071f1e <vPortEnterCritical+0x4a>
	}
}
 8071f20:	bf00      	nop
 8071f22:	370c      	adds	r7, #12
 8071f24:	46bd      	mov	sp, r7
 8071f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071f2a:	4770      	bx	lr
 8071f2c:	20000024 	.word	0x20000024
 8071f30:	e000ed04 	.word	0xe000ed04

08071f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8071f34:	b480      	push	{r7}
 8071f36:	b083      	sub	sp, #12
 8071f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8071f3a:	4b12      	ldr	r3, [pc, #72]	; (8071f84 <vPortExitCritical+0x50>)
 8071f3c:	681b      	ldr	r3, [r3, #0]
 8071f3e:	2b00      	cmp	r3, #0
 8071f40:	d10a      	bne.n	8071f58 <vPortExitCritical+0x24>
	__asm volatile
 8071f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071f46:	f383 8811 	msr	BASEPRI, r3
 8071f4a:	f3bf 8f6f 	isb	sy
 8071f4e:	f3bf 8f4f 	dsb	sy
 8071f52:	607b      	str	r3, [r7, #4]
}
 8071f54:	bf00      	nop
 8071f56:	e7fe      	b.n	8071f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8071f58:	4b0a      	ldr	r3, [pc, #40]	; (8071f84 <vPortExitCritical+0x50>)
 8071f5a:	681b      	ldr	r3, [r3, #0]
 8071f5c:	3b01      	subs	r3, #1
 8071f5e:	4a09      	ldr	r2, [pc, #36]	; (8071f84 <vPortExitCritical+0x50>)
 8071f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8071f62:	4b08      	ldr	r3, [pc, #32]	; (8071f84 <vPortExitCritical+0x50>)
 8071f64:	681b      	ldr	r3, [r3, #0]
 8071f66:	2b00      	cmp	r3, #0
 8071f68:	d105      	bne.n	8071f76 <vPortExitCritical+0x42>
 8071f6a:	2300      	movs	r3, #0
 8071f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8071f6e:	683b      	ldr	r3, [r7, #0]
 8071f70:	f383 8811 	msr	BASEPRI, r3
}
 8071f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8071f76:	bf00      	nop
 8071f78:	370c      	adds	r7, #12
 8071f7a:	46bd      	mov	sp, r7
 8071f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071f80:	4770      	bx	lr
 8071f82:	bf00      	nop
 8071f84:	20000024 	.word	0x20000024
	...

08071f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8071f90:	f3ef 8009 	mrs	r0, PSP
 8071f94:	f3bf 8f6f 	isb	sy
 8071f98:	4b15      	ldr	r3, [pc, #84]	; (8071ff0 <pxCurrentTCBConst>)
 8071f9a:	681a      	ldr	r2, [r3, #0]
 8071f9c:	f01e 0f10 	tst.w	lr, #16
 8071fa0:	bf08      	it	eq
 8071fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8071fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8071faa:	6010      	str	r0, [r2, #0]
 8071fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8071fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8071fb4:	f380 8811 	msr	BASEPRI, r0
 8071fb8:	f3bf 8f4f 	dsb	sy
 8071fbc:	f3bf 8f6f 	isb	sy
 8071fc0:	f7fe fbec 	bl	807079c <vTaskSwitchContext>
 8071fc4:	f04f 0000 	mov.w	r0, #0
 8071fc8:	f380 8811 	msr	BASEPRI, r0
 8071fcc:	bc09      	pop	{r0, r3}
 8071fce:	6819      	ldr	r1, [r3, #0]
 8071fd0:	6808      	ldr	r0, [r1, #0]
 8071fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8071fd6:	f01e 0f10 	tst.w	lr, #16
 8071fda:	bf08      	it	eq
 8071fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8071fe0:	f380 8809 	msr	PSP, r0
 8071fe4:	f3bf 8f6f 	isb	sy
 8071fe8:	4770      	bx	lr
 8071fea:	bf00      	nop
 8071fec:	f3af 8000 	nop.w

08071ff0 <pxCurrentTCBConst>:
 8071ff0:	20000bd4 	.word	0x20000bd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8071ff4:	bf00      	nop
 8071ff6:	bf00      	nop

08071ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8071ff8:	b580      	push	{r7, lr}
 8071ffa:	b082      	sub	sp, #8
 8071ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8071ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8072002:	f383 8811 	msr	BASEPRI, r3
 8072006:	f3bf 8f6f 	isb	sy
 807200a:	f3bf 8f4f 	dsb	sy
 807200e:	607b      	str	r3, [r7, #4]
}
 8072010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8072012:	f7fe fb09 	bl	8070628 <xTaskIncrementTick>
 8072016:	4603      	mov	r3, r0
 8072018:	2b00      	cmp	r3, #0
 807201a:	d003      	beq.n	8072024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 807201c:	4b06      	ldr	r3, [pc, #24]	; (8072038 <xPortSysTickHandler+0x40>)
 807201e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8072022:	601a      	str	r2, [r3, #0]
 8072024:	2300      	movs	r3, #0
 8072026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8072028:	683b      	ldr	r3, [r7, #0]
 807202a:	f383 8811 	msr	BASEPRI, r3
}
 807202e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8072030:	bf00      	nop
 8072032:	3708      	adds	r7, #8
 8072034:	46bd      	mov	sp, r7
 8072036:	bd80      	pop	{r7, pc}
 8072038:	e000ed04 	.word	0xe000ed04

0807203c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 807203c:	b480      	push	{r7}
 807203e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8072040:	4b0b      	ldr	r3, [pc, #44]	; (8072070 <vPortSetupTimerInterrupt+0x34>)
 8072042:	2200      	movs	r2, #0
 8072044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8072046:	4b0b      	ldr	r3, [pc, #44]	; (8072074 <vPortSetupTimerInterrupt+0x38>)
 8072048:	2200      	movs	r2, #0
 807204a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 807204c:	4b0a      	ldr	r3, [pc, #40]	; (8072078 <vPortSetupTimerInterrupt+0x3c>)
 807204e:	681b      	ldr	r3, [r3, #0]
 8072050:	4a0a      	ldr	r2, [pc, #40]	; (807207c <vPortSetupTimerInterrupt+0x40>)
 8072052:	fba2 2303 	umull	r2, r3, r2, r3
 8072056:	099b      	lsrs	r3, r3, #6
 8072058:	4a09      	ldr	r2, [pc, #36]	; (8072080 <vPortSetupTimerInterrupt+0x44>)
 807205a:	3b01      	subs	r3, #1
 807205c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 807205e:	4b04      	ldr	r3, [pc, #16]	; (8072070 <vPortSetupTimerInterrupt+0x34>)
 8072060:	2207      	movs	r2, #7
 8072062:	601a      	str	r2, [r3, #0]
}
 8072064:	bf00      	nop
 8072066:	46bd      	mov	sp, r7
 8072068:	f85d 7b04 	ldr.w	r7, [sp], #4
 807206c:	4770      	bx	lr
 807206e:	bf00      	nop
 8072070:	e000e010 	.word	0xe000e010
 8072074:	e000e018 	.word	0xe000e018
 8072078:	20000000 	.word	0x20000000
 807207c:	10624dd3 	.word	0x10624dd3
 8072080:	e000e014 	.word	0xe000e014

08072084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8072084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8072094 <vPortEnableVFP+0x10>
 8072088:	6801      	ldr	r1, [r0, #0]
 807208a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 807208e:	6001      	str	r1, [r0, #0]
 8072090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8072092:	bf00      	nop
 8072094:	e000ed88 	.word	0xe000ed88

08072098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8072098:	b480      	push	{r7}
 807209a:	b085      	sub	sp, #20
 807209c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 807209e:	f3ef 8305 	mrs	r3, IPSR
 80720a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80720a4:	68fb      	ldr	r3, [r7, #12]
 80720a6:	2b0f      	cmp	r3, #15
 80720a8:	d914      	bls.n	80720d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80720aa:	4a17      	ldr	r2, [pc, #92]	; (8072108 <vPortValidateInterruptPriority+0x70>)
 80720ac:	68fb      	ldr	r3, [r7, #12]
 80720ae:	4413      	add	r3, r2
 80720b0:	781b      	ldrb	r3, [r3, #0]
 80720b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80720b4:	4b15      	ldr	r3, [pc, #84]	; (807210c <vPortValidateInterruptPriority+0x74>)
 80720b6:	781b      	ldrb	r3, [r3, #0]
 80720b8:	7afa      	ldrb	r2, [r7, #11]
 80720ba:	429a      	cmp	r2, r3
 80720bc:	d20a      	bcs.n	80720d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80720be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80720c2:	f383 8811 	msr	BASEPRI, r3
 80720c6:	f3bf 8f6f 	isb	sy
 80720ca:	f3bf 8f4f 	dsb	sy
 80720ce:	607b      	str	r3, [r7, #4]
}
 80720d0:	bf00      	nop
 80720d2:	e7fe      	b.n	80720d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80720d4:	4b0e      	ldr	r3, [pc, #56]	; (8072110 <vPortValidateInterruptPriority+0x78>)
 80720d6:	681b      	ldr	r3, [r3, #0]
 80720d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80720dc:	4b0d      	ldr	r3, [pc, #52]	; (8072114 <vPortValidateInterruptPriority+0x7c>)
 80720de:	681b      	ldr	r3, [r3, #0]
 80720e0:	429a      	cmp	r2, r3
 80720e2:	d90a      	bls.n	80720fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80720e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80720e8:	f383 8811 	msr	BASEPRI, r3
 80720ec:	f3bf 8f6f 	isb	sy
 80720f0:	f3bf 8f4f 	dsb	sy
 80720f4:	603b      	str	r3, [r7, #0]
}
 80720f6:	bf00      	nop
 80720f8:	e7fe      	b.n	80720f8 <vPortValidateInterruptPriority+0x60>
	}
 80720fa:	bf00      	nop
 80720fc:	3714      	adds	r7, #20
 80720fe:	46bd      	mov	sp, r7
 8072100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072104:	4770      	bx	lr
 8072106:	bf00      	nop
 8072108:	e000e3f0 	.word	0xe000e3f0
 807210c:	20001200 	.word	0x20001200
 8072110:	e000ed0c 	.word	0xe000ed0c
 8072114:	20001204 	.word	0x20001204

08072118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8072118:	b580      	push	{r7, lr}
 807211a:	b08a      	sub	sp, #40	; 0x28
 807211c:	af00      	add	r7, sp, #0
 807211e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8072120:	2300      	movs	r3, #0
 8072122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8072124:	f7fe f9c4 	bl	80704b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8072128:	4b5b      	ldr	r3, [pc, #364]	; (8072298 <pvPortMalloc+0x180>)
 807212a:	681b      	ldr	r3, [r3, #0]
 807212c:	2b00      	cmp	r3, #0
 807212e:	d101      	bne.n	8072134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8072130:	f000 f920 	bl	8072374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8072134:	4b59      	ldr	r3, [pc, #356]	; (807229c <pvPortMalloc+0x184>)
 8072136:	681a      	ldr	r2, [r3, #0]
 8072138:	687b      	ldr	r3, [r7, #4]
 807213a:	4013      	ands	r3, r2
 807213c:	2b00      	cmp	r3, #0
 807213e:	f040 8093 	bne.w	8072268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8072142:	687b      	ldr	r3, [r7, #4]
 8072144:	2b00      	cmp	r3, #0
 8072146:	d01d      	beq.n	8072184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8072148:	2208      	movs	r2, #8
 807214a:	687b      	ldr	r3, [r7, #4]
 807214c:	4413      	add	r3, r2
 807214e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8072150:	687b      	ldr	r3, [r7, #4]
 8072152:	f003 0307 	and.w	r3, r3, #7
 8072156:	2b00      	cmp	r3, #0
 8072158:	d014      	beq.n	8072184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 807215a:	687b      	ldr	r3, [r7, #4]
 807215c:	f023 0307 	bic.w	r3, r3, #7
 8072160:	3308      	adds	r3, #8
 8072162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8072164:	687b      	ldr	r3, [r7, #4]
 8072166:	f003 0307 	and.w	r3, r3, #7
 807216a:	2b00      	cmp	r3, #0
 807216c:	d00a      	beq.n	8072184 <pvPortMalloc+0x6c>
	__asm volatile
 807216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8072172:	f383 8811 	msr	BASEPRI, r3
 8072176:	f3bf 8f6f 	isb	sy
 807217a:	f3bf 8f4f 	dsb	sy
 807217e:	617b      	str	r3, [r7, #20]
}
 8072180:	bf00      	nop
 8072182:	e7fe      	b.n	8072182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8072184:	687b      	ldr	r3, [r7, #4]
 8072186:	2b00      	cmp	r3, #0
 8072188:	d06e      	beq.n	8072268 <pvPortMalloc+0x150>
 807218a:	4b45      	ldr	r3, [pc, #276]	; (80722a0 <pvPortMalloc+0x188>)
 807218c:	681b      	ldr	r3, [r3, #0]
 807218e:	687a      	ldr	r2, [r7, #4]
 8072190:	429a      	cmp	r2, r3
 8072192:	d869      	bhi.n	8072268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8072194:	4b43      	ldr	r3, [pc, #268]	; (80722a4 <pvPortMalloc+0x18c>)
 8072196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8072198:	4b42      	ldr	r3, [pc, #264]	; (80722a4 <pvPortMalloc+0x18c>)
 807219a:	681b      	ldr	r3, [r3, #0]
 807219c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 807219e:	e004      	b.n	80721aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80721a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80721a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80721a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80721a6:	681b      	ldr	r3, [r3, #0]
 80721a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80721aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80721ac:	685b      	ldr	r3, [r3, #4]
 80721ae:	687a      	ldr	r2, [r7, #4]
 80721b0:	429a      	cmp	r2, r3
 80721b2:	d903      	bls.n	80721bc <pvPortMalloc+0xa4>
 80721b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80721b6:	681b      	ldr	r3, [r3, #0]
 80721b8:	2b00      	cmp	r3, #0
 80721ba:	d1f1      	bne.n	80721a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80721bc:	4b36      	ldr	r3, [pc, #216]	; (8072298 <pvPortMalloc+0x180>)
 80721be:	681b      	ldr	r3, [r3, #0]
 80721c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80721c2:	429a      	cmp	r2, r3
 80721c4:	d050      	beq.n	8072268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80721c6:	6a3b      	ldr	r3, [r7, #32]
 80721c8:	681b      	ldr	r3, [r3, #0]
 80721ca:	2208      	movs	r2, #8
 80721cc:	4413      	add	r3, r2
 80721ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80721d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80721d2:	681a      	ldr	r2, [r3, #0]
 80721d4:	6a3b      	ldr	r3, [r7, #32]
 80721d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80721d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80721da:	685a      	ldr	r2, [r3, #4]
 80721dc:	687b      	ldr	r3, [r7, #4]
 80721de:	1ad2      	subs	r2, r2, r3
 80721e0:	2308      	movs	r3, #8
 80721e2:	005b      	lsls	r3, r3, #1
 80721e4:	429a      	cmp	r2, r3
 80721e6:	d91f      	bls.n	8072228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80721e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80721ea:	687b      	ldr	r3, [r7, #4]
 80721ec:	4413      	add	r3, r2
 80721ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80721f0:	69bb      	ldr	r3, [r7, #24]
 80721f2:	f003 0307 	and.w	r3, r3, #7
 80721f6:	2b00      	cmp	r3, #0
 80721f8:	d00a      	beq.n	8072210 <pvPortMalloc+0xf8>
	__asm volatile
 80721fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80721fe:	f383 8811 	msr	BASEPRI, r3
 8072202:	f3bf 8f6f 	isb	sy
 8072206:	f3bf 8f4f 	dsb	sy
 807220a:	613b      	str	r3, [r7, #16]
}
 807220c:	bf00      	nop
 807220e:	e7fe      	b.n	807220e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8072210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8072212:	685a      	ldr	r2, [r3, #4]
 8072214:	687b      	ldr	r3, [r7, #4]
 8072216:	1ad2      	subs	r2, r2, r3
 8072218:	69bb      	ldr	r3, [r7, #24]
 807221a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 807221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807221e:	687a      	ldr	r2, [r7, #4]
 8072220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8072222:	69b8      	ldr	r0, [r7, #24]
 8072224:	f000 f908 	bl	8072438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8072228:	4b1d      	ldr	r3, [pc, #116]	; (80722a0 <pvPortMalloc+0x188>)
 807222a:	681a      	ldr	r2, [r3, #0]
 807222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807222e:	685b      	ldr	r3, [r3, #4]
 8072230:	1ad3      	subs	r3, r2, r3
 8072232:	4a1b      	ldr	r2, [pc, #108]	; (80722a0 <pvPortMalloc+0x188>)
 8072234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8072236:	4b1a      	ldr	r3, [pc, #104]	; (80722a0 <pvPortMalloc+0x188>)
 8072238:	681a      	ldr	r2, [r3, #0]
 807223a:	4b1b      	ldr	r3, [pc, #108]	; (80722a8 <pvPortMalloc+0x190>)
 807223c:	681b      	ldr	r3, [r3, #0]
 807223e:	429a      	cmp	r2, r3
 8072240:	d203      	bcs.n	807224a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8072242:	4b17      	ldr	r3, [pc, #92]	; (80722a0 <pvPortMalloc+0x188>)
 8072244:	681b      	ldr	r3, [r3, #0]
 8072246:	4a18      	ldr	r2, [pc, #96]	; (80722a8 <pvPortMalloc+0x190>)
 8072248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 807224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807224c:	685a      	ldr	r2, [r3, #4]
 807224e:	4b13      	ldr	r3, [pc, #76]	; (807229c <pvPortMalloc+0x184>)
 8072250:	681b      	ldr	r3, [r3, #0]
 8072252:	431a      	orrs	r2, r3
 8072254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8072256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8072258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807225a:	2200      	movs	r2, #0
 807225c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 807225e:	4b13      	ldr	r3, [pc, #76]	; (80722ac <pvPortMalloc+0x194>)
 8072260:	681b      	ldr	r3, [r3, #0]
 8072262:	3301      	adds	r3, #1
 8072264:	4a11      	ldr	r2, [pc, #68]	; (80722ac <pvPortMalloc+0x194>)
 8072266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8072268:	f7fe f930 	bl	80704cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 807226c:	69fb      	ldr	r3, [r7, #28]
 807226e:	f003 0307 	and.w	r3, r3, #7
 8072272:	2b00      	cmp	r3, #0
 8072274:	d00a      	beq.n	807228c <pvPortMalloc+0x174>
	__asm volatile
 8072276:	f04f 0350 	mov.w	r3, #80	; 0x50
 807227a:	f383 8811 	msr	BASEPRI, r3
 807227e:	f3bf 8f6f 	isb	sy
 8072282:	f3bf 8f4f 	dsb	sy
 8072286:	60fb      	str	r3, [r7, #12]
}
 8072288:	bf00      	nop
 807228a:	e7fe      	b.n	807228a <pvPortMalloc+0x172>
	return pvReturn;
 807228c:	69fb      	ldr	r3, [r7, #28]
}
 807228e:	4618      	mov	r0, r3
 8072290:	3728      	adds	r7, #40	; 0x28
 8072292:	46bd      	mov	sp, r7
 8072294:	bd80      	pop	{r7, pc}
 8072296:	bf00      	nop
 8072298:	20004e10 	.word	0x20004e10
 807229c:	20004e24 	.word	0x20004e24
 80722a0:	20004e14 	.word	0x20004e14
 80722a4:	20004e08 	.word	0x20004e08
 80722a8:	20004e18 	.word	0x20004e18
 80722ac:	20004e1c 	.word	0x20004e1c

080722b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80722b0:	b580      	push	{r7, lr}
 80722b2:	b086      	sub	sp, #24
 80722b4:	af00      	add	r7, sp, #0
 80722b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80722b8:	687b      	ldr	r3, [r7, #4]
 80722ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80722bc:	687b      	ldr	r3, [r7, #4]
 80722be:	2b00      	cmp	r3, #0
 80722c0:	d04d      	beq.n	807235e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80722c2:	2308      	movs	r3, #8
 80722c4:	425b      	negs	r3, r3
 80722c6:	697a      	ldr	r2, [r7, #20]
 80722c8:	4413      	add	r3, r2
 80722ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80722cc:	697b      	ldr	r3, [r7, #20]
 80722ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80722d0:	693b      	ldr	r3, [r7, #16]
 80722d2:	685a      	ldr	r2, [r3, #4]
 80722d4:	4b24      	ldr	r3, [pc, #144]	; (8072368 <vPortFree+0xb8>)
 80722d6:	681b      	ldr	r3, [r3, #0]
 80722d8:	4013      	ands	r3, r2
 80722da:	2b00      	cmp	r3, #0
 80722dc:	d10a      	bne.n	80722f4 <vPortFree+0x44>
	__asm volatile
 80722de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80722e2:	f383 8811 	msr	BASEPRI, r3
 80722e6:	f3bf 8f6f 	isb	sy
 80722ea:	f3bf 8f4f 	dsb	sy
 80722ee:	60fb      	str	r3, [r7, #12]
}
 80722f0:	bf00      	nop
 80722f2:	e7fe      	b.n	80722f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80722f4:	693b      	ldr	r3, [r7, #16]
 80722f6:	681b      	ldr	r3, [r3, #0]
 80722f8:	2b00      	cmp	r3, #0
 80722fa:	d00a      	beq.n	8072312 <vPortFree+0x62>
	__asm volatile
 80722fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8072300:	f383 8811 	msr	BASEPRI, r3
 8072304:	f3bf 8f6f 	isb	sy
 8072308:	f3bf 8f4f 	dsb	sy
 807230c:	60bb      	str	r3, [r7, #8]
}
 807230e:	bf00      	nop
 8072310:	e7fe      	b.n	8072310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8072312:	693b      	ldr	r3, [r7, #16]
 8072314:	685a      	ldr	r2, [r3, #4]
 8072316:	4b14      	ldr	r3, [pc, #80]	; (8072368 <vPortFree+0xb8>)
 8072318:	681b      	ldr	r3, [r3, #0]
 807231a:	4013      	ands	r3, r2
 807231c:	2b00      	cmp	r3, #0
 807231e:	d01e      	beq.n	807235e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8072320:	693b      	ldr	r3, [r7, #16]
 8072322:	681b      	ldr	r3, [r3, #0]
 8072324:	2b00      	cmp	r3, #0
 8072326:	d11a      	bne.n	807235e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8072328:	693b      	ldr	r3, [r7, #16]
 807232a:	685a      	ldr	r2, [r3, #4]
 807232c:	4b0e      	ldr	r3, [pc, #56]	; (8072368 <vPortFree+0xb8>)
 807232e:	681b      	ldr	r3, [r3, #0]
 8072330:	43db      	mvns	r3, r3
 8072332:	401a      	ands	r2, r3
 8072334:	693b      	ldr	r3, [r7, #16]
 8072336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8072338:	f7fe f8ba 	bl	80704b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 807233c:	693b      	ldr	r3, [r7, #16]
 807233e:	685a      	ldr	r2, [r3, #4]
 8072340:	4b0a      	ldr	r3, [pc, #40]	; (807236c <vPortFree+0xbc>)
 8072342:	681b      	ldr	r3, [r3, #0]
 8072344:	4413      	add	r3, r2
 8072346:	4a09      	ldr	r2, [pc, #36]	; (807236c <vPortFree+0xbc>)
 8072348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 807234a:	6938      	ldr	r0, [r7, #16]
 807234c:	f000 f874 	bl	8072438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8072350:	4b07      	ldr	r3, [pc, #28]	; (8072370 <vPortFree+0xc0>)
 8072352:	681b      	ldr	r3, [r3, #0]
 8072354:	3301      	adds	r3, #1
 8072356:	4a06      	ldr	r2, [pc, #24]	; (8072370 <vPortFree+0xc0>)
 8072358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 807235a:	f7fe f8b7 	bl	80704cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 807235e:	bf00      	nop
 8072360:	3718      	adds	r7, #24
 8072362:	46bd      	mov	sp, r7
 8072364:	bd80      	pop	{r7, pc}
 8072366:	bf00      	nop
 8072368:	20004e24 	.word	0x20004e24
 807236c:	20004e14 	.word	0x20004e14
 8072370:	20004e20 	.word	0x20004e20

08072374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8072374:	b480      	push	{r7}
 8072376:	b085      	sub	sp, #20
 8072378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 807237a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 807237e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8072380:	4b27      	ldr	r3, [pc, #156]	; (8072420 <prvHeapInit+0xac>)
 8072382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8072384:	68fb      	ldr	r3, [r7, #12]
 8072386:	f003 0307 	and.w	r3, r3, #7
 807238a:	2b00      	cmp	r3, #0
 807238c:	d00c      	beq.n	80723a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 807238e:	68fb      	ldr	r3, [r7, #12]
 8072390:	3307      	adds	r3, #7
 8072392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8072394:	68fb      	ldr	r3, [r7, #12]
 8072396:	f023 0307 	bic.w	r3, r3, #7
 807239a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 807239c:	68ba      	ldr	r2, [r7, #8]
 807239e:	68fb      	ldr	r3, [r7, #12]
 80723a0:	1ad3      	subs	r3, r2, r3
 80723a2:	4a1f      	ldr	r2, [pc, #124]	; (8072420 <prvHeapInit+0xac>)
 80723a4:	4413      	add	r3, r2
 80723a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80723a8:	68fb      	ldr	r3, [r7, #12]
 80723aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80723ac:	4a1d      	ldr	r2, [pc, #116]	; (8072424 <prvHeapInit+0xb0>)
 80723ae:	687b      	ldr	r3, [r7, #4]
 80723b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80723b2:	4b1c      	ldr	r3, [pc, #112]	; (8072424 <prvHeapInit+0xb0>)
 80723b4:	2200      	movs	r2, #0
 80723b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80723b8:	687b      	ldr	r3, [r7, #4]
 80723ba:	68ba      	ldr	r2, [r7, #8]
 80723bc:	4413      	add	r3, r2
 80723be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80723c0:	2208      	movs	r2, #8
 80723c2:	68fb      	ldr	r3, [r7, #12]
 80723c4:	1a9b      	subs	r3, r3, r2
 80723c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80723c8:	68fb      	ldr	r3, [r7, #12]
 80723ca:	f023 0307 	bic.w	r3, r3, #7
 80723ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80723d0:	68fb      	ldr	r3, [r7, #12]
 80723d2:	4a15      	ldr	r2, [pc, #84]	; (8072428 <prvHeapInit+0xb4>)
 80723d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80723d6:	4b14      	ldr	r3, [pc, #80]	; (8072428 <prvHeapInit+0xb4>)
 80723d8:	681b      	ldr	r3, [r3, #0]
 80723da:	2200      	movs	r2, #0
 80723dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80723de:	4b12      	ldr	r3, [pc, #72]	; (8072428 <prvHeapInit+0xb4>)
 80723e0:	681b      	ldr	r3, [r3, #0]
 80723e2:	2200      	movs	r2, #0
 80723e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80723e6:	687b      	ldr	r3, [r7, #4]
 80723e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80723ea:	683b      	ldr	r3, [r7, #0]
 80723ec:	68fa      	ldr	r2, [r7, #12]
 80723ee:	1ad2      	subs	r2, r2, r3
 80723f0:	683b      	ldr	r3, [r7, #0]
 80723f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80723f4:	4b0c      	ldr	r3, [pc, #48]	; (8072428 <prvHeapInit+0xb4>)
 80723f6:	681a      	ldr	r2, [r3, #0]
 80723f8:	683b      	ldr	r3, [r7, #0]
 80723fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80723fc:	683b      	ldr	r3, [r7, #0]
 80723fe:	685b      	ldr	r3, [r3, #4]
 8072400:	4a0a      	ldr	r2, [pc, #40]	; (807242c <prvHeapInit+0xb8>)
 8072402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8072404:	683b      	ldr	r3, [r7, #0]
 8072406:	685b      	ldr	r3, [r3, #4]
 8072408:	4a09      	ldr	r2, [pc, #36]	; (8072430 <prvHeapInit+0xbc>)
 807240a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 807240c:	4b09      	ldr	r3, [pc, #36]	; (8072434 <prvHeapInit+0xc0>)
 807240e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8072412:	601a      	str	r2, [r3, #0]
}
 8072414:	bf00      	nop
 8072416:	3714      	adds	r7, #20
 8072418:	46bd      	mov	sp, r7
 807241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807241e:	4770      	bx	lr
 8072420:	20001208 	.word	0x20001208
 8072424:	20004e08 	.word	0x20004e08
 8072428:	20004e10 	.word	0x20004e10
 807242c:	20004e18 	.word	0x20004e18
 8072430:	20004e14 	.word	0x20004e14
 8072434:	20004e24 	.word	0x20004e24

08072438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8072438:	b480      	push	{r7}
 807243a:	b085      	sub	sp, #20
 807243c:	af00      	add	r7, sp, #0
 807243e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8072440:	4b28      	ldr	r3, [pc, #160]	; (80724e4 <prvInsertBlockIntoFreeList+0xac>)
 8072442:	60fb      	str	r3, [r7, #12]
 8072444:	e002      	b.n	807244c <prvInsertBlockIntoFreeList+0x14>
 8072446:	68fb      	ldr	r3, [r7, #12]
 8072448:	681b      	ldr	r3, [r3, #0]
 807244a:	60fb      	str	r3, [r7, #12]
 807244c:	68fb      	ldr	r3, [r7, #12]
 807244e:	681b      	ldr	r3, [r3, #0]
 8072450:	687a      	ldr	r2, [r7, #4]
 8072452:	429a      	cmp	r2, r3
 8072454:	d8f7      	bhi.n	8072446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8072456:	68fb      	ldr	r3, [r7, #12]
 8072458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 807245a:	68fb      	ldr	r3, [r7, #12]
 807245c:	685b      	ldr	r3, [r3, #4]
 807245e:	68ba      	ldr	r2, [r7, #8]
 8072460:	4413      	add	r3, r2
 8072462:	687a      	ldr	r2, [r7, #4]
 8072464:	429a      	cmp	r2, r3
 8072466:	d108      	bne.n	807247a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8072468:	68fb      	ldr	r3, [r7, #12]
 807246a:	685a      	ldr	r2, [r3, #4]
 807246c:	687b      	ldr	r3, [r7, #4]
 807246e:	685b      	ldr	r3, [r3, #4]
 8072470:	441a      	add	r2, r3
 8072472:	68fb      	ldr	r3, [r7, #12]
 8072474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8072476:	68fb      	ldr	r3, [r7, #12]
 8072478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 807247a:	687b      	ldr	r3, [r7, #4]
 807247c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 807247e:	687b      	ldr	r3, [r7, #4]
 8072480:	685b      	ldr	r3, [r3, #4]
 8072482:	68ba      	ldr	r2, [r7, #8]
 8072484:	441a      	add	r2, r3
 8072486:	68fb      	ldr	r3, [r7, #12]
 8072488:	681b      	ldr	r3, [r3, #0]
 807248a:	429a      	cmp	r2, r3
 807248c:	d118      	bne.n	80724c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 807248e:	68fb      	ldr	r3, [r7, #12]
 8072490:	681a      	ldr	r2, [r3, #0]
 8072492:	4b15      	ldr	r3, [pc, #84]	; (80724e8 <prvInsertBlockIntoFreeList+0xb0>)
 8072494:	681b      	ldr	r3, [r3, #0]
 8072496:	429a      	cmp	r2, r3
 8072498:	d00d      	beq.n	80724b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 807249a:	687b      	ldr	r3, [r7, #4]
 807249c:	685a      	ldr	r2, [r3, #4]
 807249e:	68fb      	ldr	r3, [r7, #12]
 80724a0:	681b      	ldr	r3, [r3, #0]
 80724a2:	685b      	ldr	r3, [r3, #4]
 80724a4:	441a      	add	r2, r3
 80724a6:	687b      	ldr	r3, [r7, #4]
 80724a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80724aa:	68fb      	ldr	r3, [r7, #12]
 80724ac:	681b      	ldr	r3, [r3, #0]
 80724ae:	681a      	ldr	r2, [r3, #0]
 80724b0:	687b      	ldr	r3, [r7, #4]
 80724b2:	601a      	str	r2, [r3, #0]
 80724b4:	e008      	b.n	80724c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80724b6:	4b0c      	ldr	r3, [pc, #48]	; (80724e8 <prvInsertBlockIntoFreeList+0xb0>)
 80724b8:	681a      	ldr	r2, [r3, #0]
 80724ba:	687b      	ldr	r3, [r7, #4]
 80724bc:	601a      	str	r2, [r3, #0]
 80724be:	e003      	b.n	80724c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80724c0:	68fb      	ldr	r3, [r7, #12]
 80724c2:	681a      	ldr	r2, [r3, #0]
 80724c4:	687b      	ldr	r3, [r7, #4]
 80724c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80724c8:	68fa      	ldr	r2, [r7, #12]
 80724ca:	687b      	ldr	r3, [r7, #4]
 80724cc:	429a      	cmp	r2, r3
 80724ce:	d002      	beq.n	80724d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80724d0:	68fb      	ldr	r3, [r7, #12]
 80724d2:	687a      	ldr	r2, [r7, #4]
 80724d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80724d6:	bf00      	nop
 80724d8:	3714      	adds	r7, #20
 80724da:	46bd      	mov	sp, r7
 80724dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80724e0:	4770      	bx	lr
 80724e2:	bf00      	nop
 80724e4:	20004e08 	.word	0x20004e08
 80724e8:	20004e10 	.word	0x20004e10

080724ec <__errno>:
 80724ec:	4b01      	ldr	r3, [pc, #4]	; (80724f4 <__errno+0x8>)
 80724ee:	6818      	ldr	r0, [r3, #0]
 80724f0:	4770      	bx	lr
 80724f2:	bf00      	nop
 80724f4:	20000028 	.word	0x20000028

080724f8 <std>:
 80724f8:	2300      	movs	r3, #0
 80724fa:	b510      	push	{r4, lr}
 80724fc:	4604      	mov	r4, r0
 80724fe:	e9c0 3300 	strd	r3, r3, [r0]
 8072502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8072506:	6083      	str	r3, [r0, #8]
 8072508:	8181      	strh	r1, [r0, #12]
 807250a:	6643      	str	r3, [r0, #100]	; 0x64
 807250c:	81c2      	strh	r2, [r0, #14]
 807250e:	6183      	str	r3, [r0, #24]
 8072510:	4619      	mov	r1, r3
 8072512:	2208      	movs	r2, #8
 8072514:	305c      	adds	r0, #92	; 0x5c
 8072516:	f000 f91a 	bl	807274e <memset>
 807251a:	4b05      	ldr	r3, [pc, #20]	; (8072530 <std+0x38>)
 807251c:	6263      	str	r3, [r4, #36]	; 0x24
 807251e:	4b05      	ldr	r3, [pc, #20]	; (8072534 <std+0x3c>)
 8072520:	62a3      	str	r3, [r4, #40]	; 0x28
 8072522:	4b05      	ldr	r3, [pc, #20]	; (8072538 <std+0x40>)
 8072524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8072526:	4b05      	ldr	r3, [pc, #20]	; (807253c <std+0x44>)
 8072528:	6224      	str	r4, [r4, #32]
 807252a:	6323      	str	r3, [r4, #48]	; 0x30
 807252c:	bd10      	pop	{r4, pc}
 807252e:	bf00      	nop
 8072530:	08073649 	.word	0x08073649
 8072534:	0807366b 	.word	0x0807366b
 8072538:	080736a3 	.word	0x080736a3
 807253c:	080736c7 	.word	0x080736c7

08072540 <_cleanup_r>:
 8072540:	4901      	ldr	r1, [pc, #4]	; (8072548 <_cleanup_r+0x8>)
 8072542:	f000 b8af 	b.w	80726a4 <_fwalk_reent>
 8072546:	bf00      	nop
 8072548:	0807529d 	.word	0x0807529d

0807254c <__sfmoreglue>:
 807254c:	b570      	push	{r4, r5, r6, lr}
 807254e:	1e4a      	subs	r2, r1, #1
 8072550:	2568      	movs	r5, #104	; 0x68
 8072552:	4355      	muls	r5, r2
 8072554:	460e      	mov	r6, r1
 8072556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 807255a:	f000 f901 	bl	8072760 <_malloc_r>
 807255e:	4604      	mov	r4, r0
 8072560:	b140      	cbz	r0, 8072574 <__sfmoreglue+0x28>
 8072562:	2100      	movs	r1, #0
 8072564:	e9c0 1600 	strd	r1, r6, [r0]
 8072568:	300c      	adds	r0, #12
 807256a:	60a0      	str	r0, [r4, #8]
 807256c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8072570:	f000 f8ed 	bl	807274e <memset>
 8072574:	4620      	mov	r0, r4
 8072576:	bd70      	pop	{r4, r5, r6, pc}

08072578 <__sfp_lock_acquire>:
 8072578:	4801      	ldr	r0, [pc, #4]	; (8072580 <__sfp_lock_acquire+0x8>)
 807257a:	f000 b8d8 	b.w	807272e <__retarget_lock_acquire_recursive>
 807257e:	bf00      	nop
 8072580:	20005d2c 	.word	0x20005d2c

08072584 <__sfp_lock_release>:
 8072584:	4801      	ldr	r0, [pc, #4]	; (807258c <__sfp_lock_release+0x8>)
 8072586:	f000 b8d3 	b.w	8072730 <__retarget_lock_release_recursive>
 807258a:	bf00      	nop
 807258c:	20005d2c 	.word	0x20005d2c

08072590 <__sinit_lock_acquire>:
 8072590:	4801      	ldr	r0, [pc, #4]	; (8072598 <__sinit_lock_acquire+0x8>)
 8072592:	f000 b8cc 	b.w	807272e <__retarget_lock_acquire_recursive>
 8072596:	bf00      	nop
 8072598:	20005d27 	.word	0x20005d27

0807259c <__sinit_lock_release>:
 807259c:	4801      	ldr	r0, [pc, #4]	; (80725a4 <__sinit_lock_release+0x8>)
 807259e:	f000 b8c7 	b.w	8072730 <__retarget_lock_release_recursive>
 80725a2:	bf00      	nop
 80725a4:	20005d27 	.word	0x20005d27

080725a8 <__sinit>:
 80725a8:	b510      	push	{r4, lr}
 80725aa:	4604      	mov	r4, r0
 80725ac:	f7ff fff0 	bl	8072590 <__sinit_lock_acquire>
 80725b0:	69a3      	ldr	r3, [r4, #24]
 80725b2:	b11b      	cbz	r3, 80725bc <__sinit+0x14>
 80725b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80725b8:	f7ff bff0 	b.w	807259c <__sinit_lock_release>
 80725bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80725c0:	6523      	str	r3, [r4, #80]	; 0x50
 80725c2:	4b13      	ldr	r3, [pc, #76]	; (8072610 <__sinit+0x68>)
 80725c4:	4a13      	ldr	r2, [pc, #76]	; (8072614 <__sinit+0x6c>)
 80725c6:	681b      	ldr	r3, [r3, #0]
 80725c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80725ca:	42a3      	cmp	r3, r4
 80725cc:	bf04      	itt	eq
 80725ce:	2301      	moveq	r3, #1
 80725d0:	61a3      	streq	r3, [r4, #24]
 80725d2:	4620      	mov	r0, r4
 80725d4:	f000 f820 	bl	8072618 <__sfp>
 80725d8:	6060      	str	r0, [r4, #4]
 80725da:	4620      	mov	r0, r4
 80725dc:	f000 f81c 	bl	8072618 <__sfp>
 80725e0:	60a0      	str	r0, [r4, #8]
 80725e2:	4620      	mov	r0, r4
 80725e4:	f000 f818 	bl	8072618 <__sfp>
 80725e8:	2200      	movs	r2, #0
 80725ea:	60e0      	str	r0, [r4, #12]
 80725ec:	2104      	movs	r1, #4
 80725ee:	6860      	ldr	r0, [r4, #4]
 80725f0:	f7ff ff82 	bl	80724f8 <std>
 80725f4:	68a0      	ldr	r0, [r4, #8]
 80725f6:	2201      	movs	r2, #1
 80725f8:	2109      	movs	r1, #9
 80725fa:	f7ff ff7d 	bl	80724f8 <std>
 80725fe:	68e0      	ldr	r0, [r4, #12]
 8072600:	2202      	movs	r2, #2
 8072602:	2112      	movs	r1, #18
 8072604:	f7ff ff78 	bl	80724f8 <std>
 8072608:	2301      	movs	r3, #1
 807260a:	61a3      	str	r3, [r4, #24]
 807260c:	e7d2      	b.n	80725b4 <__sinit+0xc>
 807260e:	bf00      	nop
 8072610:	08077810 	.word	0x08077810
 8072614:	08072541 	.word	0x08072541

08072618 <__sfp>:
 8072618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807261a:	4607      	mov	r7, r0
 807261c:	f7ff ffac 	bl	8072578 <__sfp_lock_acquire>
 8072620:	4b1e      	ldr	r3, [pc, #120]	; (807269c <__sfp+0x84>)
 8072622:	681e      	ldr	r6, [r3, #0]
 8072624:	69b3      	ldr	r3, [r6, #24]
 8072626:	b913      	cbnz	r3, 807262e <__sfp+0x16>
 8072628:	4630      	mov	r0, r6
 807262a:	f7ff ffbd 	bl	80725a8 <__sinit>
 807262e:	3648      	adds	r6, #72	; 0x48
 8072630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8072634:	3b01      	subs	r3, #1
 8072636:	d503      	bpl.n	8072640 <__sfp+0x28>
 8072638:	6833      	ldr	r3, [r6, #0]
 807263a:	b30b      	cbz	r3, 8072680 <__sfp+0x68>
 807263c:	6836      	ldr	r6, [r6, #0]
 807263e:	e7f7      	b.n	8072630 <__sfp+0x18>
 8072640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8072644:	b9d5      	cbnz	r5, 807267c <__sfp+0x64>
 8072646:	4b16      	ldr	r3, [pc, #88]	; (80726a0 <__sfp+0x88>)
 8072648:	60e3      	str	r3, [r4, #12]
 807264a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 807264e:	6665      	str	r5, [r4, #100]	; 0x64
 8072650:	f000 f86c 	bl	807272c <__retarget_lock_init_recursive>
 8072654:	f7ff ff96 	bl	8072584 <__sfp_lock_release>
 8072658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 807265c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8072660:	6025      	str	r5, [r4, #0]
 8072662:	61a5      	str	r5, [r4, #24]
 8072664:	2208      	movs	r2, #8
 8072666:	4629      	mov	r1, r5
 8072668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 807266c:	f000 f86f 	bl	807274e <memset>
 8072670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8072674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8072678:	4620      	mov	r0, r4
 807267a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 807267c:	3468      	adds	r4, #104	; 0x68
 807267e:	e7d9      	b.n	8072634 <__sfp+0x1c>
 8072680:	2104      	movs	r1, #4
 8072682:	4638      	mov	r0, r7
 8072684:	f7ff ff62 	bl	807254c <__sfmoreglue>
 8072688:	4604      	mov	r4, r0
 807268a:	6030      	str	r0, [r6, #0]
 807268c:	2800      	cmp	r0, #0
 807268e:	d1d5      	bne.n	807263c <__sfp+0x24>
 8072690:	f7ff ff78 	bl	8072584 <__sfp_lock_release>
 8072694:	230c      	movs	r3, #12
 8072696:	603b      	str	r3, [r7, #0]
 8072698:	e7ee      	b.n	8072678 <__sfp+0x60>
 807269a:	bf00      	nop
 807269c:	08077810 	.word	0x08077810
 80726a0:	ffff0001 	.word	0xffff0001

080726a4 <_fwalk_reent>:
 80726a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80726a8:	4606      	mov	r6, r0
 80726aa:	4688      	mov	r8, r1
 80726ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80726b0:	2700      	movs	r7, #0
 80726b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80726b6:	f1b9 0901 	subs.w	r9, r9, #1
 80726ba:	d505      	bpl.n	80726c8 <_fwalk_reent+0x24>
 80726bc:	6824      	ldr	r4, [r4, #0]
 80726be:	2c00      	cmp	r4, #0
 80726c0:	d1f7      	bne.n	80726b2 <_fwalk_reent+0xe>
 80726c2:	4638      	mov	r0, r7
 80726c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80726c8:	89ab      	ldrh	r3, [r5, #12]
 80726ca:	2b01      	cmp	r3, #1
 80726cc:	d907      	bls.n	80726de <_fwalk_reent+0x3a>
 80726ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80726d2:	3301      	adds	r3, #1
 80726d4:	d003      	beq.n	80726de <_fwalk_reent+0x3a>
 80726d6:	4629      	mov	r1, r5
 80726d8:	4630      	mov	r0, r6
 80726da:	47c0      	blx	r8
 80726dc:	4307      	orrs	r7, r0
 80726de:	3568      	adds	r5, #104	; 0x68
 80726e0:	e7e9      	b.n	80726b6 <_fwalk_reent+0x12>
	...

080726e4 <__libc_init_array>:
 80726e4:	b570      	push	{r4, r5, r6, lr}
 80726e6:	4d0d      	ldr	r5, [pc, #52]	; (807271c <__libc_init_array+0x38>)
 80726e8:	4c0d      	ldr	r4, [pc, #52]	; (8072720 <__libc_init_array+0x3c>)
 80726ea:	1b64      	subs	r4, r4, r5
 80726ec:	10a4      	asrs	r4, r4, #2
 80726ee:	2600      	movs	r6, #0
 80726f0:	42a6      	cmp	r6, r4
 80726f2:	d109      	bne.n	8072708 <__libc_init_array+0x24>
 80726f4:	4d0b      	ldr	r5, [pc, #44]	; (8072724 <__libc_init_array+0x40>)
 80726f6:	4c0c      	ldr	r4, [pc, #48]	; (8072728 <__libc_init_array+0x44>)
 80726f8:	f004 fbba 	bl	8076e70 <_init>
 80726fc:	1b64      	subs	r4, r4, r5
 80726fe:	10a4      	asrs	r4, r4, #2
 8072700:	2600      	movs	r6, #0
 8072702:	42a6      	cmp	r6, r4
 8072704:	d105      	bne.n	8072712 <__libc_init_array+0x2e>
 8072706:	bd70      	pop	{r4, r5, r6, pc}
 8072708:	f855 3b04 	ldr.w	r3, [r5], #4
 807270c:	4798      	blx	r3
 807270e:	3601      	adds	r6, #1
 8072710:	e7ee      	b.n	80726f0 <__libc_init_array+0xc>
 8072712:	f855 3b04 	ldr.w	r3, [r5], #4
 8072716:	4798      	blx	r3
 8072718:	3601      	adds	r6, #1
 807271a:	e7f2      	b.n	8072702 <__libc_init_array+0x1e>
 807271c:	08077c6c 	.word	0x08077c6c
 8072720:	08077c6c 	.word	0x08077c6c
 8072724:	08077c6c 	.word	0x08077c6c
 8072728:	08077c70 	.word	0x08077c70

0807272c <__retarget_lock_init_recursive>:
 807272c:	4770      	bx	lr

0807272e <__retarget_lock_acquire_recursive>:
 807272e:	4770      	bx	lr

08072730 <__retarget_lock_release_recursive>:
 8072730:	4770      	bx	lr

08072732 <memcpy>:
 8072732:	440a      	add	r2, r1
 8072734:	4291      	cmp	r1, r2
 8072736:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 807273a:	d100      	bne.n	807273e <memcpy+0xc>
 807273c:	4770      	bx	lr
 807273e:	b510      	push	{r4, lr}
 8072740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8072744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8072748:	4291      	cmp	r1, r2
 807274a:	d1f9      	bne.n	8072740 <memcpy+0xe>
 807274c:	bd10      	pop	{r4, pc}

0807274e <memset>:
 807274e:	4402      	add	r2, r0
 8072750:	4603      	mov	r3, r0
 8072752:	4293      	cmp	r3, r2
 8072754:	d100      	bne.n	8072758 <memset+0xa>
 8072756:	4770      	bx	lr
 8072758:	f803 1b01 	strb.w	r1, [r3], #1
 807275c:	e7f9      	b.n	8072752 <memset+0x4>
	...

08072760 <_malloc_r>:
 8072760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8072762:	1ccd      	adds	r5, r1, #3
 8072764:	f025 0503 	bic.w	r5, r5, #3
 8072768:	3508      	adds	r5, #8
 807276a:	2d0c      	cmp	r5, #12
 807276c:	bf38      	it	cc
 807276e:	250c      	movcc	r5, #12
 8072770:	2d00      	cmp	r5, #0
 8072772:	4606      	mov	r6, r0
 8072774:	db01      	blt.n	807277a <_malloc_r+0x1a>
 8072776:	42a9      	cmp	r1, r5
 8072778:	d903      	bls.n	8072782 <_malloc_r+0x22>
 807277a:	230c      	movs	r3, #12
 807277c:	6033      	str	r3, [r6, #0]
 807277e:	2000      	movs	r0, #0
 8072780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8072782:	f003 f967 	bl	8075a54 <__malloc_lock>
 8072786:	4921      	ldr	r1, [pc, #132]	; (807280c <_malloc_r+0xac>)
 8072788:	680a      	ldr	r2, [r1, #0]
 807278a:	4614      	mov	r4, r2
 807278c:	b99c      	cbnz	r4, 80727b6 <_malloc_r+0x56>
 807278e:	4f20      	ldr	r7, [pc, #128]	; (8072810 <_malloc_r+0xb0>)
 8072790:	683b      	ldr	r3, [r7, #0]
 8072792:	b923      	cbnz	r3, 807279e <_malloc_r+0x3e>
 8072794:	4621      	mov	r1, r4
 8072796:	4630      	mov	r0, r6
 8072798:	f000 ff20 	bl	80735dc <_sbrk_r>
 807279c:	6038      	str	r0, [r7, #0]
 807279e:	4629      	mov	r1, r5
 80727a0:	4630      	mov	r0, r6
 80727a2:	f000 ff1b 	bl	80735dc <_sbrk_r>
 80727a6:	1c43      	adds	r3, r0, #1
 80727a8:	d123      	bne.n	80727f2 <_malloc_r+0x92>
 80727aa:	230c      	movs	r3, #12
 80727ac:	6033      	str	r3, [r6, #0]
 80727ae:	4630      	mov	r0, r6
 80727b0:	f003 f956 	bl	8075a60 <__malloc_unlock>
 80727b4:	e7e3      	b.n	807277e <_malloc_r+0x1e>
 80727b6:	6823      	ldr	r3, [r4, #0]
 80727b8:	1b5b      	subs	r3, r3, r5
 80727ba:	d417      	bmi.n	80727ec <_malloc_r+0x8c>
 80727bc:	2b0b      	cmp	r3, #11
 80727be:	d903      	bls.n	80727c8 <_malloc_r+0x68>
 80727c0:	6023      	str	r3, [r4, #0]
 80727c2:	441c      	add	r4, r3
 80727c4:	6025      	str	r5, [r4, #0]
 80727c6:	e004      	b.n	80727d2 <_malloc_r+0x72>
 80727c8:	6863      	ldr	r3, [r4, #4]
 80727ca:	42a2      	cmp	r2, r4
 80727cc:	bf0c      	ite	eq
 80727ce:	600b      	streq	r3, [r1, #0]
 80727d0:	6053      	strne	r3, [r2, #4]
 80727d2:	4630      	mov	r0, r6
 80727d4:	f003 f944 	bl	8075a60 <__malloc_unlock>
 80727d8:	f104 000b 	add.w	r0, r4, #11
 80727dc:	1d23      	adds	r3, r4, #4
 80727de:	f020 0007 	bic.w	r0, r0, #7
 80727e2:	1ac2      	subs	r2, r0, r3
 80727e4:	d0cc      	beq.n	8072780 <_malloc_r+0x20>
 80727e6:	1a1b      	subs	r3, r3, r0
 80727e8:	50a3      	str	r3, [r4, r2]
 80727ea:	e7c9      	b.n	8072780 <_malloc_r+0x20>
 80727ec:	4622      	mov	r2, r4
 80727ee:	6864      	ldr	r4, [r4, #4]
 80727f0:	e7cc      	b.n	807278c <_malloc_r+0x2c>
 80727f2:	1cc4      	adds	r4, r0, #3
 80727f4:	f024 0403 	bic.w	r4, r4, #3
 80727f8:	42a0      	cmp	r0, r4
 80727fa:	d0e3      	beq.n	80727c4 <_malloc_r+0x64>
 80727fc:	1a21      	subs	r1, r4, r0
 80727fe:	4630      	mov	r0, r6
 8072800:	f000 feec 	bl	80735dc <_sbrk_r>
 8072804:	3001      	adds	r0, #1
 8072806:	d1dd      	bne.n	80727c4 <_malloc_r+0x64>
 8072808:	e7cf      	b.n	80727aa <_malloc_r+0x4a>
 807280a:	bf00      	nop
 807280c:	20004e28 	.word	0x20004e28
 8072810:	20004e2c 	.word	0x20004e2c

08072814 <__cvt>:
 8072814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8072818:	ec55 4b10 	vmov	r4, r5, d0
 807281c:	2d00      	cmp	r5, #0
 807281e:	460e      	mov	r6, r1
 8072820:	4619      	mov	r1, r3
 8072822:	462b      	mov	r3, r5
 8072824:	bfbb      	ittet	lt
 8072826:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 807282a:	461d      	movlt	r5, r3
 807282c:	2300      	movge	r3, #0
 807282e:	232d      	movlt	r3, #45	; 0x2d
 8072830:	700b      	strb	r3, [r1, #0]
 8072832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8072834:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8072838:	4691      	mov	r9, r2
 807283a:	f023 0820 	bic.w	r8, r3, #32
 807283e:	bfbc      	itt	lt
 8072840:	4622      	movlt	r2, r4
 8072842:	4614      	movlt	r4, r2
 8072844:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8072848:	d005      	beq.n	8072856 <__cvt+0x42>
 807284a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 807284e:	d100      	bne.n	8072852 <__cvt+0x3e>
 8072850:	3601      	adds	r6, #1
 8072852:	2102      	movs	r1, #2
 8072854:	e000      	b.n	8072858 <__cvt+0x44>
 8072856:	2103      	movs	r1, #3
 8072858:	ab03      	add	r3, sp, #12
 807285a:	9301      	str	r3, [sp, #4]
 807285c:	ab02      	add	r3, sp, #8
 807285e:	9300      	str	r3, [sp, #0]
 8072860:	ec45 4b10 	vmov	d0, r4, r5
 8072864:	4653      	mov	r3, sl
 8072866:	4632      	mov	r2, r6
 8072868:	f001 fea6 	bl	80745b8 <_dtoa_r>
 807286c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8072870:	4607      	mov	r7, r0
 8072872:	d102      	bne.n	807287a <__cvt+0x66>
 8072874:	f019 0f01 	tst.w	r9, #1
 8072878:	d022      	beq.n	80728c0 <__cvt+0xac>
 807287a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 807287e:	eb07 0906 	add.w	r9, r7, r6
 8072882:	d110      	bne.n	80728a6 <__cvt+0x92>
 8072884:	783b      	ldrb	r3, [r7, #0]
 8072886:	2b30      	cmp	r3, #48	; 0x30
 8072888:	d10a      	bne.n	80728a0 <__cvt+0x8c>
 807288a:	2200      	movs	r2, #0
 807288c:	2300      	movs	r3, #0
 807288e:	4620      	mov	r0, r4
 8072890:	4629      	mov	r1, r5
 8072892:	f7ee f931 	bl	8060af8 <__aeabi_dcmpeq>
 8072896:	b918      	cbnz	r0, 80728a0 <__cvt+0x8c>
 8072898:	f1c6 0601 	rsb	r6, r6, #1
 807289c:	f8ca 6000 	str.w	r6, [sl]
 80728a0:	f8da 3000 	ldr.w	r3, [sl]
 80728a4:	4499      	add	r9, r3
 80728a6:	2200      	movs	r2, #0
 80728a8:	2300      	movs	r3, #0
 80728aa:	4620      	mov	r0, r4
 80728ac:	4629      	mov	r1, r5
 80728ae:	f7ee f923 	bl	8060af8 <__aeabi_dcmpeq>
 80728b2:	b108      	cbz	r0, 80728b8 <__cvt+0xa4>
 80728b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80728b8:	2230      	movs	r2, #48	; 0x30
 80728ba:	9b03      	ldr	r3, [sp, #12]
 80728bc:	454b      	cmp	r3, r9
 80728be:	d307      	bcc.n	80728d0 <__cvt+0xbc>
 80728c0:	9b03      	ldr	r3, [sp, #12]
 80728c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80728c4:	1bdb      	subs	r3, r3, r7
 80728c6:	4638      	mov	r0, r7
 80728c8:	6013      	str	r3, [r2, #0]
 80728ca:	b004      	add	sp, #16
 80728cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80728d0:	1c59      	adds	r1, r3, #1
 80728d2:	9103      	str	r1, [sp, #12]
 80728d4:	701a      	strb	r2, [r3, #0]
 80728d6:	e7f0      	b.n	80728ba <__cvt+0xa6>

080728d8 <__exponent>:
 80728d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80728da:	4603      	mov	r3, r0
 80728dc:	2900      	cmp	r1, #0
 80728de:	bfb8      	it	lt
 80728e0:	4249      	neglt	r1, r1
 80728e2:	f803 2b02 	strb.w	r2, [r3], #2
 80728e6:	bfb4      	ite	lt
 80728e8:	222d      	movlt	r2, #45	; 0x2d
 80728ea:	222b      	movge	r2, #43	; 0x2b
 80728ec:	2909      	cmp	r1, #9
 80728ee:	7042      	strb	r2, [r0, #1]
 80728f0:	dd2a      	ble.n	8072948 <__exponent+0x70>
 80728f2:	f10d 0407 	add.w	r4, sp, #7
 80728f6:	46a4      	mov	ip, r4
 80728f8:	270a      	movs	r7, #10
 80728fa:	46a6      	mov	lr, r4
 80728fc:	460a      	mov	r2, r1
 80728fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8072902:	fb07 1516 	mls	r5, r7, r6, r1
 8072906:	3530      	adds	r5, #48	; 0x30
 8072908:	2a63      	cmp	r2, #99	; 0x63
 807290a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 807290e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8072912:	4631      	mov	r1, r6
 8072914:	dcf1      	bgt.n	80728fa <__exponent+0x22>
 8072916:	3130      	adds	r1, #48	; 0x30
 8072918:	f1ae 0502 	sub.w	r5, lr, #2
 807291c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8072920:	1c44      	adds	r4, r0, #1
 8072922:	4629      	mov	r1, r5
 8072924:	4561      	cmp	r1, ip
 8072926:	d30a      	bcc.n	807293e <__exponent+0x66>
 8072928:	f10d 0209 	add.w	r2, sp, #9
 807292c:	eba2 020e 	sub.w	r2, r2, lr
 8072930:	4565      	cmp	r5, ip
 8072932:	bf88      	it	hi
 8072934:	2200      	movhi	r2, #0
 8072936:	4413      	add	r3, r2
 8072938:	1a18      	subs	r0, r3, r0
 807293a:	b003      	add	sp, #12
 807293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 807293e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8072942:	f804 2f01 	strb.w	r2, [r4, #1]!
 8072946:	e7ed      	b.n	8072924 <__exponent+0x4c>
 8072948:	2330      	movs	r3, #48	; 0x30
 807294a:	3130      	adds	r1, #48	; 0x30
 807294c:	7083      	strb	r3, [r0, #2]
 807294e:	70c1      	strb	r1, [r0, #3]
 8072950:	1d03      	adds	r3, r0, #4
 8072952:	e7f1      	b.n	8072938 <__exponent+0x60>

08072954 <_printf_float>:
 8072954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8072958:	ed2d 8b02 	vpush	{d8}
 807295c:	b08d      	sub	sp, #52	; 0x34
 807295e:	460c      	mov	r4, r1
 8072960:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8072964:	4616      	mov	r6, r2
 8072966:	461f      	mov	r7, r3
 8072968:	4605      	mov	r5, r0
 807296a:	f003 f843 	bl	80759f4 <_localeconv_r>
 807296e:	f8d0 a000 	ldr.w	sl, [r0]
 8072972:	4650      	mov	r0, sl
 8072974:	f7ed fc3e 	bl	80601f4 <strlen>
 8072978:	2300      	movs	r3, #0
 807297a:	930a      	str	r3, [sp, #40]	; 0x28
 807297c:	6823      	ldr	r3, [r4, #0]
 807297e:	9305      	str	r3, [sp, #20]
 8072980:	f8d8 3000 	ldr.w	r3, [r8]
 8072984:	f894 b018 	ldrb.w	fp, [r4, #24]
 8072988:	3307      	adds	r3, #7
 807298a:	f023 0307 	bic.w	r3, r3, #7
 807298e:	f103 0208 	add.w	r2, r3, #8
 8072992:	f8c8 2000 	str.w	r2, [r8]
 8072996:	e9d3 2300 	ldrd	r2, r3, [r3]
 807299a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 807299e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80729a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80729a6:	9307      	str	r3, [sp, #28]
 80729a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80729ac:	ee08 0a10 	vmov	s16, r0
 80729b0:	4b9f      	ldr	r3, [pc, #636]	; (8072c30 <_printf_float+0x2dc>)
 80729b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80729b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80729ba:	f7ee f8cf 	bl	8060b5c <__aeabi_dcmpun>
 80729be:	bb88      	cbnz	r0, 8072a24 <_printf_float+0xd0>
 80729c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80729c4:	4b9a      	ldr	r3, [pc, #616]	; (8072c30 <_printf_float+0x2dc>)
 80729c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80729ca:	f7ee f8a9 	bl	8060b20 <__aeabi_dcmple>
 80729ce:	bb48      	cbnz	r0, 8072a24 <_printf_float+0xd0>
 80729d0:	2200      	movs	r2, #0
 80729d2:	2300      	movs	r3, #0
 80729d4:	4640      	mov	r0, r8
 80729d6:	4649      	mov	r1, r9
 80729d8:	f7ee f898 	bl	8060b0c <__aeabi_dcmplt>
 80729dc:	b110      	cbz	r0, 80729e4 <_printf_float+0x90>
 80729de:	232d      	movs	r3, #45	; 0x2d
 80729e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80729e4:	4b93      	ldr	r3, [pc, #588]	; (8072c34 <_printf_float+0x2e0>)
 80729e6:	4894      	ldr	r0, [pc, #592]	; (8072c38 <_printf_float+0x2e4>)
 80729e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80729ec:	bf94      	ite	ls
 80729ee:	4698      	movls	r8, r3
 80729f0:	4680      	movhi	r8, r0
 80729f2:	2303      	movs	r3, #3
 80729f4:	6123      	str	r3, [r4, #16]
 80729f6:	9b05      	ldr	r3, [sp, #20]
 80729f8:	f023 0204 	bic.w	r2, r3, #4
 80729fc:	6022      	str	r2, [r4, #0]
 80729fe:	f04f 0900 	mov.w	r9, #0
 8072a02:	9700      	str	r7, [sp, #0]
 8072a04:	4633      	mov	r3, r6
 8072a06:	aa0b      	add	r2, sp, #44	; 0x2c
 8072a08:	4621      	mov	r1, r4
 8072a0a:	4628      	mov	r0, r5
 8072a0c:	f000 f9d8 	bl	8072dc0 <_printf_common>
 8072a10:	3001      	adds	r0, #1
 8072a12:	f040 8090 	bne.w	8072b36 <_printf_float+0x1e2>
 8072a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8072a1a:	b00d      	add	sp, #52	; 0x34
 8072a1c:	ecbd 8b02 	vpop	{d8}
 8072a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8072a24:	4642      	mov	r2, r8
 8072a26:	464b      	mov	r3, r9
 8072a28:	4640      	mov	r0, r8
 8072a2a:	4649      	mov	r1, r9
 8072a2c:	f7ee f896 	bl	8060b5c <__aeabi_dcmpun>
 8072a30:	b140      	cbz	r0, 8072a44 <_printf_float+0xf0>
 8072a32:	464b      	mov	r3, r9
 8072a34:	2b00      	cmp	r3, #0
 8072a36:	bfbc      	itt	lt
 8072a38:	232d      	movlt	r3, #45	; 0x2d
 8072a3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8072a3e:	487f      	ldr	r0, [pc, #508]	; (8072c3c <_printf_float+0x2e8>)
 8072a40:	4b7f      	ldr	r3, [pc, #508]	; (8072c40 <_printf_float+0x2ec>)
 8072a42:	e7d1      	b.n	80729e8 <_printf_float+0x94>
 8072a44:	6863      	ldr	r3, [r4, #4]
 8072a46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8072a4a:	9206      	str	r2, [sp, #24]
 8072a4c:	1c5a      	adds	r2, r3, #1
 8072a4e:	d13f      	bne.n	8072ad0 <_printf_float+0x17c>
 8072a50:	2306      	movs	r3, #6
 8072a52:	6063      	str	r3, [r4, #4]
 8072a54:	9b05      	ldr	r3, [sp, #20]
 8072a56:	6861      	ldr	r1, [r4, #4]
 8072a58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8072a5c:	2300      	movs	r3, #0
 8072a5e:	9303      	str	r3, [sp, #12]
 8072a60:	ab0a      	add	r3, sp, #40	; 0x28
 8072a62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8072a66:	ab09      	add	r3, sp, #36	; 0x24
 8072a68:	ec49 8b10 	vmov	d0, r8, r9
 8072a6c:	9300      	str	r3, [sp, #0]
 8072a6e:	6022      	str	r2, [r4, #0]
 8072a70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8072a74:	4628      	mov	r0, r5
 8072a76:	f7ff fecd 	bl	8072814 <__cvt>
 8072a7a:	9b06      	ldr	r3, [sp, #24]
 8072a7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8072a7e:	2b47      	cmp	r3, #71	; 0x47
 8072a80:	4680      	mov	r8, r0
 8072a82:	d108      	bne.n	8072a96 <_printf_float+0x142>
 8072a84:	1cc8      	adds	r0, r1, #3
 8072a86:	db02      	blt.n	8072a8e <_printf_float+0x13a>
 8072a88:	6863      	ldr	r3, [r4, #4]
 8072a8a:	4299      	cmp	r1, r3
 8072a8c:	dd41      	ble.n	8072b12 <_printf_float+0x1be>
 8072a8e:	f1ab 0b02 	sub.w	fp, fp, #2
 8072a92:	fa5f fb8b 	uxtb.w	fp, fp
 8072a96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8072a9a:	d820      	bhi.n	8072ade <_printf_float+0x18a>
 8072a9c:	3901      	subs	r1, #1
 8072a9e:	465a      	mov	r2, fp
 8072aa0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8072aa4:	9109      	str	r1, [sp, #36]	; 0x24
 8072aa6:	f7ff ff17 	bl	80728d8 <__exponent>
 8072aaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8072aac:	1813      	adds	r3, r2, r0
 8072aae:	2a01      	cmp	r2, #1
 8072ab0:	4681      	mov	r9, r0
 8072ab2:	6123      	str	r3, [r4, #16]
 8072ab4:	dc02      	bgt.n	8072abc <_printf_float+0x168>
 8072ab6:	6822      	ldr	r2, [r4, #0]
 8072ab8:	07d2      	lsls	r2, r2, #31
 8072aba:	d501      	bpl.n	8072ac0 <_printf_float+0x16c>
 8072abc:	3301      	adds	r3, #1
 8072abe:	6123      	str	r3, [r4, #16]
 8072ac0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8072ac4:	2b00      	cmp	r3, #0
 8072ac6:	d09c      	beq.n	8072a02 <_printf_float+0xae>
 8072ac8:	232d      	movs	r3, #45	; 0x2d
 8072aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8072ace:	e798      	b.n	8072a02 <_printf_float+0xae>
 8072ad0:	9a06      	ldr	r2, [sp, #24]
 8072ad2:	2a47      	cmp	r2, #71	; 0x47
 8072ad4:	d1be      	bne.n	8072a54 <_printf_float+0x100>
 8072ad6:	2b00      	cmp	r3, #0
 8072ad8:	d1bc      	bne.n	8072a54 <_printf_float+0x100>
 8072ada:	2301      	movs	r3, #1
 8072adc:	e7b9      	b.n	8072a52 <_printf_float+0xfe>
 8072ade:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8072ae2:	d118      	bne.n	8072b16 <_printf_float+0x1c2>
 8072ae4:	2900      	cmp	r1, #0
 8072ae6:	6863      	ldr	r3, [r4, #4]
 8072ae8:	dd0b      	ble.n	8072b02 <_printf_float+0x1ae>
 8072aea:	6121      	str	r1, [r4, #16]
 8072aec:	b913      	cbnz	r3, 8072af4 <_printf_float+0x1a0>
 8072aee:	6822      	ldr	r2, [r4, #0]
 8072af0:	07d0      	lsls	r0, r2, #31
 8072af2:	d502      	bpl.n	8072afa <_printf_float+0x1a6>
 8072af4:	3301      	adds	r3, #1
 8072af6:	440b      	add	r3, r1
 8072af8:	6123      	str	r3, [r4, #16]
 8072afa:	65a1      	str	r1, [r4, #88]	; 0x58
 8072afc:	f04f 0900 	mov.w	r9, #0
 8072b00:	e7de      	b.n	8072ac0 <_printf_float+0x16c>
 8072b02:	b913      	cbnz	r3, 8072b0a <_printf_float+0x1b6>
 8072b04:	6822      	ldr	r2, [r4, #0]
 8072b06:	07d2      	lsls	r2, r2, #31
 8072b08:	d501      	bpl.n	8072b0e <_printf_float+0x1ba>
 8072b0a:	3302      	adds	r3, #2
 8072b0c:	e7f4      	b.n	8072af8 <_printf_float+0x1a4>
 8072b0e:	2301      	movs	r3, #1
 8072b10:	e7f2      	b.n	8072af8 <_printf_float+0x1a4>
 8072b12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8072b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8072b18:	4299      	cmp	r1, r3
 8072b1a:	db05      	blt.n	8072b28 <_printf_float+0x1d4>
 8072b1c:	6823      	ldr	r3, [r4, #0]
 8072b1e:	6121      	str	r1, [r4, #16]
 8072b20:	07d8      	lsls	r0, r3, #31
 8072b22:	d5ea      	bpl.n	8072afa <_printf_float+0x1a6>
 8072b24:	1c4b      	adds	r3, r1, #1
 8072b26:	e7e7      	b.n	8072af8 <_printf_float+0x1a4>
 8072b28:	2900      	cmp	r1, #0
 8072b2a:	bfd4      	ite	le
 8072b2c:	f1c1 0202 	rsble	r2, r1, #2
 8072b30:	2201      	movgt	r2, #1
 8072b32:	4413      	add	r3, r2
 8072b34:	e7e0      	b.n	8072af8 <_printf_float+0x1a4>
 8072b36:	6823      	ldr	r3, [r4, #0]
 8072b38:	055a      	lsls	r2, r3, #21
 8072b3a:	d407      	bmi.n	8072b4c <_printf_float+0x1f8>
 8072b3c:	6923      	ldr	r3, [r4, #16]
 8072b3e:	4642      	mov	r2, r8
 8072b40:	4631      	mov	r1, r6
 8072b42:	4628      	mov	r0, r5
 8072b44:	47b8      	blx	r7
 8072b46:	3001      	adds	r0, #1
 8072b48:	d12c      	bne.n	8072ba4 <_printf_float+0x250>
 8072b4a:	e764      	b.n	8072a16 <_printf_float+0xc2>
 8072b4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8072b50:	f240 80e0 	bls.w	8072d14 <_printf_float+0x3c0>
 8072b54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8072b58:	2200      	movs	r2, #0
 8072b5a:	2300      	movs	r3, #0
 8072b5c:	f7ed ffcc 	bl	8060af8 <__aeabi_dcmpeq>
 8072b60:	2800      	cmp	r0, #0
 8072b62:	d034      	beq.n	8072bce <_printf_float+0x27a>
 8072b64:	4a37      	ldr	r2, [pc, #220]	; (8072c44 <_printf_float+0x2f0>)
 8072b66:	2301      	movs	r3, #1
 8072b68:	4631      	mov	r1, r6
 8072b6a:	4628      	mov	r0, r5
 8072b6c:	47b8      	blx	r7
 8072b6e:	3001      	adds	r0, #1
 8072b70:	f43f af51 	beq.w	8072a16 <_printf_float+0xc2>
 8072b74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072b78:	429a      	cmp	r2, r3
 8072b7a:	db02      	blt.n	8072b82 <_printf_float+0x22e>
 8072b7c:	6823      	ldr	r3, [r4, #0]
 8072b7e:	07d8      	lsls	r0, r3, #31
 8072b80:	d510      	bpl.n	8072ba4 <_printf_float+0x250>
 8072b82:	ee18 3a10 	vmov	r3, s16
 8072b86:	4652      	mov	r2, sl
 8072b88:	4631      	mov	r1, r6
 8072b8a:	4628      	mov	r0, r5
 8072b8c:	47b8      	blx	r7
 8072b8e:	3001      	adds	r0, #1
 8072b90:	f43f af41 	beq.w	8072a16 <_printf_float+0xc2>
 8072b94:	f04f 0800 	mov.w	r8, #0
 8072b98:	f104 091a 	add.w	r9, r4, #26
 8072b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8072b9e:	3b01      	subs	r3, #1
 8072ba0:	4543      	cmp	r3, r8
 8072ba2:	dc09      	bgt.n	8072bb8 <_printf_float+0x264>
 8072ba4:	6823      	ldr	r3, [r4, #0]
 8072ba6:	079b      	lsls	r3, r3, #30
 8072ba8:	f100 8105 	bmi.w	8072db6 <_printf_float+0x462>
 8072bac:	68e0      	ldr	r0, [r4, #12]
 8072bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8072bb0:	4298      	cmp	r0, r3
 8072bb2:	bfb8      	it	lt
 8072bb4:	4618      	movlt	r0, r3
 8072bb6:	e730      	b.n	8072a1a <_printf_float+0xc6>
 8072bb8:	2301      	movs	r3, #1
 8072bba:	464a      	mov	r2, r9
 8072bbc:	4631      	mov	r1, r6
 8072bbe:	4628      	mov	r0, r5
 8072bc0:	47b8      	blx	r7
 8072bc2:	3001      	adds	r0, #1
 8072bc4:	f43f af27 	beq.w	8072a16 <_printf_float+0xc2>
 8072bc8:	f108 0801 	add.w	r8, r8, #1
 8072bcc:	e7e6      	b.n	8072b9c <_printf_float+0x248>
 8072bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8072bd0:	2b00      	cmp	r3, #0
 8072bd2:	dc39      	bgt.n	8072c48 <_printf_float+0x2f4>
 8072bd4:	4a1b      	ldr	r2, [pc, #108]	; (8072c44 <_printf_float+0x2f0>)
 8072bd6:	2301      	movs	r3, #1
 8072bd8:	4631      	mov	r1, r6
 8072bda:	4628      	mov	r0, r5
 8072bdc:	47b8      	blx	r7
 8072bde:	3001      	adds	r0, #1
 8072be0:	f43f af19 	beq.w	8072a16 <_printf_float+0xc2>
 8072be4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072be8:	4313      	orrs	r3, r2
 8072bea:	d102      	bne.n	8072bf2 <_printf_float+0x29e>
 8072bec:	6823      	ldr	r3, [r4, #0]
 8072bee:	07d9      	lsls	r1, r3, #31
 8072bf0:	d5d8      	bpl.n	8072ba4 <_printf_float+0x250>
 8072bf2:	ee18 3a10 	vmov	r3, s16
 8072bf6:	4652      	mov	r2, sl
 8072bf8:	4631      	mov	r1, r6
 8072bfa:	4628      	mov	r0, r5
 8072bfc:	47b8      	blx	r7
 8072bfe:	3001      	adds	r0, #1
 8072c00:	f43f af09 	beq.w	8072a16 <_printf_float+0xc2>
 8072c04:	f04f 0900 	mov.w	r9, #0
 8072c08:	f104 0a1a 	add.w	sl, r4, #26
 8072c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8072c0e:	425b      	negs	r3, r3
 8072c10:	454b      	cmp	r3, r9
 8072c12:	dc01      	bgt.n	8072c18 <_printf_float+0x2c4>
 8072c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8072c16:	e792      	b.n	8072b3e <_printf_float+0x1ea>
 8072c18:	2301      	movs	r3, #1
 8072c1a:	4652      	mov	r2, sl
 8072c1c:	4631      	mov	r1, r6
 8072c1e:	4628      	mov	r0, r5
 8072c20:	47b8      	blx	r7
 8072c22:	3001      	adds	r0, #1
 8072c24:	f43f aef7 	beq.w	8072a16 <_printf_float+0xc2>
 8072c28:	f109 0901 	add.w	r9, r9, #1
 8072c2c:	e7ee      	b.n	8072c0c <_printf_float+0x2b8>
 8072c2e:	bf00      	nop
 8072c30:	7fefffff 	.word	0x7fefffff
 8072c34:	08077814 	.word	0x08077814
 8072c38:	08077818 	.word	0x08077818
 8072c3c:	08077820 	.word	0x08077820
 8072c40:	0807781c 	.word	0x0807781c
 8072c44:	08077824 	.word	0x08077824
 8072c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8072c4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8072c4c:	429a      	cmp	r2, r3
 8072c4e:	bfa8      	it	ge
 8072c50:	461a      	movge	r2, r3
 8072c52:	2a00      	cmp	r2, #0
 8072c54:	4691      	mov	r9, r2
 8072c56:	dc37      	bgt.n	8072cc8 <_printf_float+0x374>
 8072c58:	f04f 0b00 	mov.w	fp, #0
 8072c5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8072c60:	f104 021a 	add.w	r2, r4, #26
 8072c64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8072c66:	9305      	str	r3, [sp, #20]
 8072c68:	eba3 0309 	sub.w	r3, r3, r9
 8072c6c:	455b      	cmp	r3, fp
 8072c6e:	dc33      	bgt.n	8072cd8 <_printf_float+0x384>
 8072c70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072c74:	429a      	cmp	r2, r3
 8072c76:	db3b      	blt.n	8072cf0 <_printf_float+0x39c>
 8072c78:	6823      	ldr	r3, [r4, #0]
 8072c7a:	07da      	lsls	r2, r3, #31
 8072c7c:	d438      	bmi.n	8072cf0 <_printf_float+0x39c>
 8072c7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8072c80:	9b05      	ldr	r3, [sp, #20]
 8072c82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8072c84:	1ad3      	subs	r3, r2, r3
 8072c86:	eba2 0901 	sub.w	r9, r2, r1
 8072c8a:	4599      	cmp	r9, r3
 8072c8c:	bfa8      	it	ge
 8072c8e:	4699      	movge	r9, r3
 8072c90:	f1b9 0f00 	cmp.w	r9, #0
 8072c94:	dc35      	bgt.n	8072d02 <_printf_float+0x3ae>
 8072c96:	f04f 0800 	mov.w	r8, #0
 8072c9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8072c9e:	f104 0a1a 	add.w	sl, r4, #26
 8072ca2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072ca6:	1a9b      	subs	r3, r3, r2
 8072ca8:	eba3 0309 	sub.w	r3, r3, r9
 8072cac:	4543      	cmp	r3, r8
 8072cae:	f77f af79 	ble.w	8072ba4 <_printf_float+0x250>
 8072cb2:	2301      	movs	r3, #1
 8072cb4:	4652      	mov	r2, sl
 8072cb6:	4631      	mov	r1, r6
 8072cb8:	4628      	mov	r0, r5
 8072cba:	47b8      	blx	r7
 8072cbc:	3001      	adds	r0, #1
 8072cbe:	f43f aeaa 	beq.w	8072a16 <_printf_float+0xc2>
 8072cc2:	f108 0801 	add.w	r8, r8, #1
 8072cc6:	e7ec      	b.n	8072ca2 <_printf_float+0x34e>
 8072cc8:	4613      	mov	r3, r2
 8072cca:	4631      	mov	r1, r6
 8072ccc:	4642      	mov	r2, r8
 8072cce:	4628      	mov	r0, r5
 8072cd0:	47b8      	blx	r7
 8072cd2:	3001      	adds	r0, #1
 8072cd4:	d1c0      	bne.n	8072c58 <_printf_float+0x304>
 8072cd6:	e69e      	b.n	8072a16 <_printf_float+0xc2>
 8072cd8:	2301      	movs	r3, #1
 8072cda:	4631      	mov	r1, r6
 8072cdc:	4628      	mov	r0, r5
 8072cde:	9205      	str	r2, [sp, #20]
 8072ce0:	47b8      	blx	r7
 8072ce2:	3001      	adds	r0, #1
 8072ce4:	f43f ae97 	beq.w	8072a16 <_printf_float+0xc2>
 8072ce8:	9a05      	ldr	r2, [sp, #20]
 8072cea:	f10b 0b01 	add.w	fp, fp, #1
 8072cee:	e7b9      	b.n	8072c64 <_printf_float+0x310>
 8072cf0:	ee18 3a10 	vmov	r3, s16
 8072cf4:	4652      	mov	r2, sl
 8072cf6:	4631      	mov	r1, r6
 8072cf8:	4628      	mov	r0, r5
 8072cfa:	47b8      	blx	r7
 8072cfc:	3001      	adds	r0, #1
 8072cfe:	d1be      	bne.n	8072c7e <_printf_float+0x32a>
 8072d00:	e689      	b.n	8072a16 <_printf_float+0xc2>
 8072d02:	9a05      	ldr	r2, [sp, #20]
 8072d04:	464b      	mov	r3, r9
 8072d06:	4442      	add	r2, r8
 8072d08:	4631      	mov	r1, r6
 8072d0a:	4628      	mov	r0, r5
 8072d0c:	47b8      	blx	r7
 8072d0e:	3001      	adds	r0, #1
 8072d10:	d1c1      	bne.n	8072c96 <_printf_float+0x342>
 8072d12:	e680      	b.n	8072a16 <_printf_float+0xc2>
 8072d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8072d16:	2a01      	cmp	r2, #1
 8072d18:	dc01      	bgt.n	8072d1e <_printf_float+0x3ca>
 8072d1a:	07db      	lsls	r3, r3, #31
 8072d1c:	d538      	bpl.n	8072d90 <_printf_float+0x43c>
 8072d1e:	2301      	movs	r3, #1
 8072d20:	4642      	mov	r2, r8
 8072d22:	4631      	mov	r1, r6
 8072d24:	4628      	mov	r0, r5
 8072d26:	47b8      	blx	r7
 8072d28:	3001      	adds	r0, #1
 8072d2a:	f43f ae74 	beq.w	8072a16 <_printf_float+0xc2>
 8072d2e:	ee18 3a10 	vmov	r3, s16
 8072d32:	4652      	mov	r2, sl
 8072d34:	4631      	mov	r1, r6
 8072d36:	4628      	mov	r0, r5
 8072d38:	47b8      	blx	r7
 8072d3a:	3001      	adds	r0, #1
 8072d3c:	f43f ae6b 	beq.w	8072a16 <_printf_float+0xc2>
 8072d40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8072d44:	2200      	movs	r2, #0
 8072d46:	2300      	movs	r3, #0
 8072d48:	f7ed fed6 	bl	8060af8 <__aeabi_dcmpeq>
 8072d4c:	b9d8      	cbnz	r0, 8072d86 <_printf_float+0x432>
 8072d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8072d50:	f108 0201 	add.w	r2, r8, #1
 8072d54:	3b01      	subs	r3, #1
 8072d56:	4631      	mov	r1, r6
 8072d58:	4628      	mov	r0, r5
 8072d5a:	47b8      	blx	r7
 8072d5c:	3001      	adds	r0, #1
 8072d5e:	d10e      	bne.n	8072d7e <_printf_float+0x42a>
 8072d60:	e659      	b.n	8072a16 <_printf_float+0xc2>
 8072d62:	2301      	movs	r3, #1
 8072d64:	4652      	mov	r2, sl
 8072d66:	4631      	mov	r1, r6
 8072d68:	4628      	mov	r0, r5
 8072d6a:	47b8      	blx	r7
 8072d6c:	3001      	adds	r0, #1
 8072d6e:	f43f ae52 	beq.w	8072a16 <_printf_float+0xc2>
 8072d72:	f108 0801 	add.w	r8, r8, #1
 8072d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8072d78:	3b01      	subs	r3, #1
 8072d7a:	4543      	cmp	r3, r8
 8072d7c:	dcf1      	bgt.n	8072d62 <_printf_float+0x40e>
 8072d7e:	464b      	mov	r3, r9
 8072d80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8072d84:	e6dc      	b.n	8072b40 <_printf_float+0x1ec>
 8072d86:	f04f 0800 	mov.w	r8, #0
 8072d8a:	f104 0a1a 	add.w	sl, r4, #26
 8072d8e:	e7f2      	b.n	8072d76 <_printf_float+0x422>
 8072d90:	2301      	movs	r3, #1
 8072d92:	4642      	mov	r2, r8
 8072d94:	e7df      	b.n	8072d56 <_printf_float+0x402>
 8072d96:	2301      	movs	r3, #1
 8072d98:	464a      	mov	r2, r9
 8072d9a:	4631      	mov	r1, r6
 8072d9c:	4628      	mov	r0, r5
 8072d9e:	47b8      	blx	r7
 8072da0:	3001      	adds	r0, #1
 8072da2:	f43f ae38 	beq.w	8072a16 <_printf_float+0xc2>
 8072da6:	f108 0801 	add.w	r8, r8, #1
 8072daa:	68e3      	ldr	r3, [r4, #12]
 8072dac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8072dae:	1a5b      	subs	r3, r3, r1
 8072db0:	4543      	cmp	r3, r8
 8072db2:	dcf0      	bgt.n	8072d96 <_printf_float+0x442>
 8072db4:	e6fa      	b.n	8072bac <_printf_float+0x258>
 8072db6:	f04f 0800 	mov.w	r8, #0
 8072dba:	f104 0919 	add.w	r9, r4, #25
 8072dbe:	e7f4      	b.n	8072daa <_printf_float+0x456>

08072dc0 <_printf_common>:
 8072dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8072dc4:	4616      	mov	r6, r2
 8072dc6:	4699      	mov	r9, r3
 8072dc8:	688a      	ldr	r2, [r1, #8]
 8072dca:	690b      	ldr	r3, [r1, #16]
 8072dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8072dd0:	4293      	cmp	r3, r2
 8072dd2:	bfb8      	it	lt
 8072dd4:	4613      	movlt	r3, r2
 8072dd6:	6033      	str	r3, [r6, #0]
 8072dd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8072ddc:	4607      	mov	r7, r0
 8072dde:	460c      	mov	r4, r1
 8072de0:	b10a      	cbz	r2, 8072de6 <_printf_common+0x26>
 8072de2:	3301      	adds	r3, #1
 8072de4:	6033      	str	r3, [r6, #0]
 8072de6:	6823      	ldr	r3, [r4, #0]
 8072de8:	0699      	lsls	r1, r3, #26
 8072dea:	bf42      	ittt	mi
 8072dec:	6833      	ldrmi	r3, [r6, #0]
 8072dee:	3302      	addmi	r3, #2
 8072df0:	6033      	strmi	r3, [r6, #0]
 8072df2:	6825      	ldr	r5, [r4, #0]
 8072df4:	f015 0506 	ands.w	r5, r5, #6
 8072df8:	d106      	bne.n	8072e08 <_printf_common+0x48>
 8072dfa:	f104 0a19 	add.w	sl, r4, #25
 8072dfe:	68e3      	ldr	r3, [r4, #12]
 8072e00:	6832      	ldr	r2, [r6, #0]
 8072e02:	1a9b      	subs	r3, r3, r2
 8072e04:	42ab      	cmp	r3, r5
 8072e06:	dc26      	bgt.n	8072e56 <_printf_common+0x96>
 8072e08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8072e0c:	1e13      	subs	r3, r2, #0
 8072e0e:	6822      	ldr	r2, [r4, #0]
 8072e10:	bf18      	it	ne
 8072e12:	2301      	movne	r3, #1
 8072e14:	0692      	lsls	r2, r2, #26
 8072e16:	d42b      	bmi.n	8072e70 <_printf_common+0xb0>
 8072e18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8072e1c:	4649      	mov	r1, r9
 8072e1e:	4638      	mov	r0, r7
 8072e20:	47c0      	blx	r8
 8072e22:	3001      	adds	r0, #1
 8072e24:	d01e      	beq.n	8072e64 <_printf_common+0xa4>
 8072e26:	6823      	ldr	r3, [r4, #0]
 8072e28:	68e5      	ldr	r5, [r4, #12]
 8072e2a:	6832      	ldr	r2, [r6, #0]
 8072e2c:	f003 0306 	and.w	r3, r3, #6
 8072e30:	2b04      	cmp	r3, #4
 8072e32:	bf08      	it	eq
 8072e34:	1aad      	subeq	r5, r5, r2
 8072e36:	68a3      	ldr	r3, [r4, #8]
 8072e38:	6922      	ldr	r2, [r4, #16]
 8072e3a:	bf0c      	ite	eq
 8072e3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8072e40:	2500      	movne	r5, #0
 8072e42:	4293      	cmp	r3, r2
 8072e44:	bfc4      	itt	gt
 8072e46:	1a9b      	subgt	r3, r3, r2
 8072e48:	18ed      	addgt	r5, r5, r3
 8072e4a:	2600      	movs	r6, #0
 8072e4c:	341a      	adds	r4, #26
 8072e4e:	42b5      	cmp	r5, r6
 8072e50:	d11a      	bne.n	8072e88 <_printf_common+0xc8>
 8072e52:	2000      	movs	r0, #0
 8072e54:	e008      	b.n	8072e68 <_printf_common+0xa8>
 8072e56:	2301      	movs	r3, #1
 8072e58:	4652      	mov	r2, sl
 8072e5a:	4649      	mov	r1, r9
 8072e5c:	4638      	mov	r0, r7
 8072e5e:	47c0      	blx	r8
 8072e60:	3001      	adds	r0, #1
 8072e62:	d103      	bne.n	8072e6c <_printf_common+0xac>
 8072e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8072e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8072e6c:	3501      	adds	r5, #1
 8072e6e:	e7c6      	b.n	8072dfe <_printf_common+0x3e>
 8072e70:	18e1      	adds	r1, r4, r3
 8072e72:	1c5a      	adds	r2, r3, #1
 8072e74:	2030      	movs	r0, #48	; 0x30
 8072e76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8072e7a:	4422      	add	r2, r4
 8072e7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8072e80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8072e84:	3302      	adds	r3, #2
 8072e86:	e7c7      	b.n	8072e18 <_printf_common+0x58>
 8072e88:	2301      	movs	r3, #1
 8072e8a:	4622      	mov	r2, r4
 8072e8c:	4649      	mov	r1, r9
 8072e8e:	4638      	mov	r0, r7
 8072e90:	47c0      	blx	r8
 8072e92:	3001      	adds	r0, #1
 8072e94:	d0e6      	beq.n	8072e64 <_printf_common+0xa4>
 8072e96:	3601      	adds	r6, #1
 8072e98:	e7d9      	b.n	8072e4e <_printf_common+0x8e>
	...

08072e9c <_printf_i>:
 8072e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8072ea0:	460c      	mov	r4, r1
 8072ea2:	4691      	mov	r9, r2
 8072ea4:	7e27      	ldrb	r7, [r4, #24]
 8072ea6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8072ea8:	2f78      	cmp	r7, #120	; 0x78
 8072eaa:	4680      	mov	r8, r0
 8072eac:	469a      	mov	sl, r3
 8072eae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8072eb2:	d807      	bhi.n	8072ec4 <_printf_i+0x28>
 8072eb4:	2f62      	cmp	r7, #98	; 0x62
 8072eb6:	d80a      	bhi.n	8072ece <_printf_i+0x32>
 8072eb8:	2f00      	cmp	r7, #0
 8072eba:	f000 80d8 	beq.w	807306e <_printf_i+0x1d2>
 8072ebe:	2f58      	cmp	r7, #88	; 0x58
 8072ec0:	f000 80a3 	beq.w	807300a <_printf_i+0x16e>
 8072ec4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8072ec8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8072ecc:	e03a      	b.n	8072f44 <_printf_i+0xa8>
 8072ece:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8072ed2:	2b15      	cmp	r3, #21
 8072ed4:	d8f6      	bhi.n	8072ec4 <_printf_i+0x28>
 8072ed6:	a001      	add	r0, pc, #4	; (adr r0, 8072edc <_printf_i+0x40>)
 8072ed8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8072edc:	08072f35 	.word	0x08072f35
 8072ee0:	08072f49 	.word	0x08072f49
 8072ee4:	08072ec5 	.word	0x08072ec5
 8072ee8:	08072ec5 	.word	0x08072ec5
 8072eec:	08072ec5 	.word	0x08072ec5
 8072ef0:	08072ec5 	.word	0x08072ec5
 8072ef4:	08072f49 	.word	0x08072f49
 8072ef8:	08072ec5 	.word	0x08072ec5
 8072efc:	08072ec5 	.word	0x08072ec5
 8072f00:	08072ec5 	.word	0x08072ec5
 8072f04:	08072ec5 	.word	0x08072ec5
 8072f08:	08073055 	.word	0x08073055
 8072f0c:	08072f79 	.word	0x08072f79
 8072f10:	08073037 	.word	0x08073037
 8072f14:	08072ec5 	.word	0x08072ec5
 8072f18:	08072ec5 	.word	0x08072ec5
 8072f1c:	08073077 	.word	0x08073077
 8072f20:	08072ec5 	.word	0x08072ec5
 8072f24:	08072f79 	.word	0x08072f79
 8072f28:	08072ec5 	.word	0x08072ec5
 8072f2c:	08072ec5 	.word	0x08072ec5
 8072f30:	0807303f 	.word	0x0807303f
 8072f34:	680b      	ldr	r3, [r1, #0]
 8072f36:	1d1a      	adds	r2, r3, #4
 8072f38:	681b      	ldr	r3, [r3, #0]
 8072f3a:	600a      	str	r2, [r1, #0]
 8072f3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8072f40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8072f44:	2301      	movs	r3, #1
 8072f46:	e0a3      	b.n	8073090 <_printf_i+0x1f4>
 8072f48:	6825      	ldr	r5, [r4, #0]
 8072f4a:	6808      	ldr	r0, [r1, #0]
 8072f4c:	062e      	lsls	r6, r5, #24
 8072f4e:	f100 0304 	add.w	r3, r0, #4
 8072f52:	d50a      	bpl.n	8072f6a <_printf_i+0xce>
 8072f54:	6805      	ldr	r5, [r0, #0]
 8072f56:	600b      	str	r3, [r1, #0]
 8072f58:	2d00      	cmp	r5, #0
 8072f5a:	da03      	bge.n	8072f64 <_printf_i+0xc8>
 8072f5c:	232d      	movs	r3, #45	; 0x2d
 8072f5e:	426d      	negs	r5, r5
 8072f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8072f64:	485e      	ldr	r0, [pc, #376]	; (80730e0 <_printf_i+0x244>)
 8072f66:	230a      	movs	r3, #10
 8072f68:	e019      	b.n	8072f9e <_printf_i+0x102>
 8072f6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8072f6e:	6805      	ldr	r5, [r0, #0]
 8072f70:	600b      	str	r3, [r1, #0]
 8072f72:	bf18      	it	ne
 8072f74:	b22d      	sxthne	r5, r5
 8072f76:	e7ef      	b.n	8072f58 <_printf_i+0xbc>
 8072f78:	680b      	ldr	r3, [r1, #0]
 8072f7a:	6825      	ldr	r5, [r4, #0]
 8072f7c:	1d18      	adds	r0, r3, #4
 8072f7e:	6008      	str	r0, [r1, #0]
 8072f80:	0628      	lsls	r0, r5, #24
 8072f82:	d501      	bpl.n	8072f88 <_printf_i+0xec>
 8072f84:	681d      	ldr	r5, [r3, #0]
 8072f86:	e002      	b.n	8072f8e <_printf_i+0xf2>
 8072f88:	0669      	lsls	r1, r5, #25
 8072f8a:	d5fb      	bpl.n	8072f84 <_printf_i+0xe8>
 8072f8c:	881d      	ldrh	r5, [r3, #0]
 8072f8e:	4854      	ldr	r0, [pc, #336]	; (80730e0 <_printf_i+0x244>)
 8072f90:	2f6f      	cmp	r7, #111	; 0x6f
 8072f92:	bf0c      	ite	eq
 8072f94:	2308      	moveq	r3, #8
 8072f96:	230a      	movne	r3, #10
 8072f98:	2100      	movs	r1, #0
 8072f9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8072f9e:	6866      	ldr	r6, [r4, #4]
 8072fa0:	60a6      	str	r6, [r4, #8]
 8072fa2:	2e00      	cmp	r6, #0
 8072fa4:	bfa2      	ittt	ge
 8072fa6:	6821      	ldrge	r1, [r4, #0]
 8072fa8:	f021 0104 	bicge.w	r1, r1, #4
 8072fac:	6021      	strge	r1, [r4, #0]
 8072fae:	b90d      	cbnz	r5, 8072fb4 <_printf_i+0x118>
 8072fb0:	2e00      	cmp	r6, #0
 8072fb2:	d04d      	beq.n	8073050 <_printf_i+0x1b4>
 8072fb4:	4616      	mov	r6, r2
 8072fb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8072fba:	fb03 5711 	mls	r7, r3, r1, r5
 8072fbe:	5dc7      	ldrb	r7, [r0, r7]
 8072fc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8072fc4:	462f      	mov	r7, r5
 8072fc6:	42bb      	cmp	r3, r7
 8072fc8:	460d      	mov	r5, r1
 8072fca:	d9f4      	bls.n	8072fb6 <_printf_i+0x11a>
 8072fcc:	2b08      	cmp	r3, #8
 8072fce:	d10b      	bne.n	8072fe8 <_printf_i+0x14c>
 8072fd0:	6823      	ldr	r3, [r4, #0]
 8072fd2:	07df      	lsls	r7, r3, #31
 8072fd4:	d508      	bpl.n	8072fe8 <_printf_i+0x14c>
 8072fd6:	6923      	ldr	r3, [r4, #16]
 8072fd8:	6861      	ldr	r1, [r4, #4]
 8072fda:	4299      	cmp	r1, r3
 8072fdc:	bfde      	ittt	le
 8072fde:	2330      	movle	r3, #48	; 0x30
 8072fe0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8072fe4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8072fe8:	1b92      	subs	r2, r2, r6
 8072fea:	6122      	str	r2, [r4, #16]
 8072fec:	f8cd a000 	str.w	sl, [sp]
 8072ff0:	464b      	mov	r3, r9
 8072ff2:	aa03      	add	r2, sp, #12
 8072ff4:	4621      	mov	r1, r4
 8072ff6:	4640      	mov	r0, r8
 8072ff8:	f7ff fee2 	bl	8072dc0 <_printf_common>
 8072ffc:	3001      	adds	r0, #1
 8072ffe:	d14c      	bne.n	807309a <_printf_i+0x1fe>
 8073000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8073004:	b004      	add	sp, #16
 8073006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 807300a:	4835      	ldr	r0, [pc, #212]	; (80730e0 <_printf_i+0x244>)
 807300c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8073010:	6823      	ldr	r3, [r4, #0]
 8073012:	680e      	ldr	r6, [r1, #0]
 8073014:	061f      	lsls	r7, r3, #24
 8073016:	f856 5b04 	ldr.w	r5, [r6], #4
 807301a:	600e      	str	r6, [r1, #0]
 807301c:	d514      	bpl.n	8073048 <_printf_i+0x1ac>
 807301e:	07d9      	lsls	r1, r3, #31
 8073020:	bf44      	itt	mi
 8073022:	f043 0320 	orrmi.w	r3, r3, #32
 8073026:	6023      	strmi	r3, [r4, #0]
 8073028:	b91d      	cbnz	r5, 8073032 <_printf_i+0x196>
 807302a:	6823      	ldr	r3, [r4, #0]
 807302c:	f023 0320 	bic.w	r3, r3, #32
 8073030:	6023      	str	r3, [r4, #0]
 8073032:	2310      	movs	r3, #16
 8073034:	e7b0      	b.n	8072f98 <_printf_i+0xfc>
 8073036:	6823      	ldr	r3, [r4, #0]
 8073038:	f043 0320 	orr.w	r3, r3, #32
 807303c:	6023      	str	r3, [r4, #0]
 807303e:	2378      	movs	r3, #120	; 0x78
 8073040:	4828      	ldr	r0, [pc, #160]	; (80730e4 <_printf_i+0x248>)
 8073042:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8073046:	e7e3      	b.n	8073010 <_printf_i+0x174>
 8073048:	065e      	lsls	r6, r3, #25
 807304a:	bf48      	it	mi
 807304c:	b2ad      	uxthmi	r5, r5
 807304e:	e7e6      	b.n	807301e <_printf_i+0x182>
 8073050:	4616      	mov	r6, r2
 8073052:	e7bb      	b.n	8072fcc <_printf_i+0x130>
 8073054:	680b      	ldr	r3, [r1, #0]
 8073056:	6826      	ldr	r6, [r4, #0]
 8073058:	6960      	ldr	r0, [r4, #20]
 807305a:	1d1d      	adds	r5, r3, #4
 807305c:	600d      	str	r5, [r1, #0]
 807305e:	0635      	lsls	r5, r6, #24
 8073060:	681b      	ldr	r3, [r3, #0]
 8073062:	d501      	bpl.n	8073068 <_printf_i+0x1cc>
 8073064:	6018      	str	r0, [r3, #0]
 8073066:	e002      	b.n	807306e <_printf_i+0x1d2>
 8073068:	0671      	lsls	r1, r6, #25
 807306a:	d5fb      	bpl.n	8073064 <_printf_i+0x1c8>
 807306c:	8018      	strh	r0, [r3, #0]
 807306e:	2300      	movs	r3, #0
 8073070:	6123      	str	r3, [r4, #16]
 8073072:	4616      	mov	r6, r2
 8073074:	e7ba      	b.n	8072fec <_printf_i+0x150>
 8073076:	680b      	ldr	r3, [r1, #0]
 8073078:	1d1a      	adds	r2, r3, #4
 807307a:	600a      	str	r2, [r1, #0]
 807307c:	681e      	ldr	r6, [r3, #0]
 807307e:	6862      	ldr	r2, [r4, #4]
 8073080:	2100      	movs	r1, #0
 8073082:	4630      	mov	r0, r6
 8073084:	f7ed f8c4 	bl	8060210 <memchr>
 8073088:	b108      	cbz	r0, 807308e <_printf_i+0x1f2>
 807308a:	1b80      	subs	r0, r0, r6
 807308c:	6060      	str	r0, [r4, #4]
 807308e:	6863      	ldr	r3, [r4, #4]
 8073090:	6123      	str	r3, [r4, #16]
 8073092:	2300      	movs	r3, #0
 8073094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8073098:	e7a8      	b.n	8072fec <_printf_i+0x150>
 807309a:	6923      	ldr	r3, [r4, #16]
 807309c:	4632      	mov	r2, r6
 807309e:	4649      	mov	r1, r9
 80730a0:	4640      	mov	r0, r8
 80730a2:	47d0      	blx	sl
 80730a4:	3001      	adds	r0, #1
 80730a6:	d0ab      	beq.n	8073000 <_printf_i+0x164>
 80730a8:	6823      	ldr	r3, [r4, #0]
 80730aa:	079b      	lsls	r3, r3, #30
 80730ac:	d413      	bmi.n	80730d6 <_printf_i+0x23a>
 80730ae:	68e0      	ldr	r0, [r4, #12]
 80730b0:	9b03      	ldr	r3, [sp, #12]
 80730b2:	4298      	cmp	r0, r3
 80730b4:	bfb8      	it	lt
 80730b6:	4618      	movlt	r0, r3
 80730b8:	e7a4      	b.n	8073004 <_printf_i+0x168>
 80730ba:	2301      	movs	r3, #1
 80730bc:	4632      	mov	r2, r6
 80730be:	4649      	mov	r1, r9
 80730c0:	4640      	mov	r0, r8
 80730c2:	47d0      	blx	sl
 80730c4:	3001      	adds	r0, #1
 80730c6:	d09b      	beq.n	8073000 <_printf_i+0x164>
 80730c8:	3501      	adds	r5, #1
 80730ca:	68e3      	ldr	r3, [r4, #12]
 80730cc:	9903      	ldr	r1, [sp, #12]
 80730ce:	1a5b      	subs	r3, r3, r1
 80730d0:	42ab      	cmp	r3, r5
 80730d2:	dcf2      	bgt.n	80730ba <_printf_i+0x21e>
 80730d4:	e7eb      	b.n	80730ae <_printf_i+0x212>
 80730d6:	2500      	movs	r5, #0
 80730d8:	f104 0619 	add.w	r6, r4, #25
 80730dc:	e7f5      	b.n	80730ca <_printf_i+0x22e>
 80730de:	bf00      	nop
 80730e0:	08077826 	.word	0x08077826
 80730e4:	08077837 	.word	0x08077837

080730e8 <_scanf_float>:
 80730e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80730ec:	b087      	sub	sp, #28
 80730ee:	4617      	mov	r7, r2
 80730f0:	9303      	str	r3, [sp, #12]
 80730f2:	688b      	ldr	r3, [r1, #8]
 80730f4:	1e5a      	subs	r2, r3, #1
 80730f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80730fa:	bf83      	ittte	hi
 80730fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8073100:	195b      	addhi	r3, r3, r5
 8073102:	9302      	strhi	r3, [sp, #8]
 8073104:	2300      	movls	r3, #0
 8073106:	bf86      	itte	hi
 8073108:	f240 135d 	movwhi	r3, #349	; 0x15d
 807310c:	608b      	strhi	r3, [r1, #8]
 807310e:	9302      	strls	r3, [sp, #8]
 8073110:	680b      	ldr	r3, [r1, #0]
 8073112:	468b      	mov	fp, r1
 8073114:	2500      	movs	r5, #0
 8073116:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 807311a:	f84b 3b1c 	str.w	r3, [fp], #28
 807311e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8073122:	4680      	mov	r8, r0
 8073124:	460c      	mov	r4, r1
 8073126:	465e      	mov	r6, fp
 8073128:	46aa      	mov	sl, r5
 807312a:	46a9      	mov	r9, r5
 807312c:	9501      	str	r5, [sp, #4]
 807312e:	68a2      	ldr	r2, [r4, #8]
 8073130:	b152      	cbz	r2, 8073148 <_scanf_float+0x60>
 8073132:	683b      	ldr	r3, [r7, #0]
 8073134:	781b      	ldrb	r3, [r3, #0]
 8073136:	2b4e      	cmp	r3, #78	; 0x4e
 8073138:	d864      	bhi.n	8073204 <_scanf_float+0x11c>
 807313a:	2b40      	cmp	r3, #64	; 0x40
 807313c:	d83c      	bhi.n	80731b8 <_scanf_float+0xd0>
 807313e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8073142:	b2c8      	uxtb	r0, r1
 8073144:	280e      	cmp	r0, #14
 8073146:	d93a      	bls.n	80731be <_scanf_float+0xd6>
 8073148:	f1b9 0f00 	cmp.w	r9, #0
 807314c:	d003      	beq.n	8073156 <_scanf_float+0x6e>
 807314e:	6823      	ldr	r3, [r4, #0]
 8073150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8073154:	6023      	str	r3, [r4, #0]
 8073156:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 807315a:	f1ba 0f01 	cmp.w	sl, #1
 807315e:	f200 8113 	bhi.w	8073388 <_scanf_float+0x2a0>
 8073162:	455e      	cmp	r6, fp
 8073164:	f200 8105 	bhi.w	8073372 <_scanf_float+0x28a>
 8073168:	2501      	movs	r5, #1
 807316a:	4628      	mov	r0, r5
 807316c:	b007      	add	sp, #28
 807316e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8073172:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8073176:	2a0d      	cmp	r2, #13
 8073178:	d8e6      	bhi.n	8073148 <_scanf_float+0x60>
 807317a:	a101      	add	r1, pc, #4	; (adr r1, 8073180 <_scanf_float+0x98>)
 807317c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8073180:	080732bf 	.word	0x080732bf
 8073184:	08073149 	.word	0x08073149
 8073188:	08073149 	.word	0x08073149
 807318c:	08073149 	.word	0x08073149
 8073190:	0807331f 	.word	0x0807331f
 8073194:	080732f7 	.word	0x080732f7
 8073198:	08073149 	.word	0x08073149
 807319c:	08073149 	.word	0x08073149
 80731a0:	080732cd 	.word	0x080732cd
 80731a4:	08073149 	.word	0x08073149
 80731a8:	08073149 	.word	0x08073149
 80731ac:	08073149 	.word	0x08073149
 80731b0:	08073149 	.word	0x08073149
 80731b4:	08073285 	.word	0x08073285
 80731b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80731bc:	e7db      	b.n	8073176 <_scanf_float+0x8e>
 80731be:	290e      	cmp	r1, #14
 80731c0:	d8c2      	bhi.n	8073148 <_scanf_float+0x60>
 80731c2:	a001      	add	r0, pc, #4	; (adr r0, 80731c8 <_scanf_float+0xe0>)
 80731c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80731c8:	08073277 	.word	0x08073277
 80731cc:	08073149 	.word	0x08073149
 80731d0:	08073277 	.word	0x08073277
 80731d4:	0807330b 	.word	0x0807330b
 80731d8:	08073149 	.word	0x08073149
 80731dc:	08073225 	.word	0x08073225
 80731e0:	08073261 	.word	0x08073261
 80731e4:	08073261 	.word	0x08073261
 80731e8:	08073261 	.word	0x08073261
 80731ec:	08073261 	.word	0x08073261
 80731f0:	08073261 	.word	0x08073261
 80731f4:	08073261 	.word	0x08073261
 80731f8:	08073261 	.word	0x08073261
 80731fc:	08073261 	.word	0x08073261
 8073200:	08073261 	.word	0x08073261
 8073204:	2b6e      	cmp	r3, #110	; 0x6e
 8073206:	d809      	bhi.n	807321c <_scanf_float+0x134>
 8073208:	2b60      	cmp	r3, #96	; 0x60
 807320a:	d8b2      	bhi.n	8073172 <_scanf_float+0x8a>
 807320c:	2b54      	cmp	r3, #84	; 0x54
 807320e:	d077      	beq.n	8073300 <_scanf_float+0x218>
 8073210:	2b59      	cmp	r3, #89	; 0x59
 8073212:	d199      	bne.n	8073148 <_scanf_float+0x60>
 8073214:	2d07      	cmp	r5, #7
 8073216:	d197      	bne.n	8073148 <_scanf_float+0x60>
 8073218:	2508      	movs	r5, #8
 807321a:	e029      	b.n	8073270 <_scanf_float+0x188>
 807321c:	2b74      	cmp	r3, #116	; 0x74
 807321e:	d06f      	beq.n	8073300 <_scanf_float+0x218>
 8073220:	2b79      	cmp	r3, #121	; 0x79
 8073222:	e7f6      	b.n	8073212 <_scanf_float+0x12a>
 8073224:	6821      	ldr	r1, [r4, #0]
 8073226:	05c8      	lsls	r0, r1, #23
 8073228:	d51a      	bpl.n	8073260 <_scanf_float+0x178>
 807322a:	9b02      	ldr	r3, [sp, #8]
 807322c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8073230:	6021      	str	r1, [r4, #0]
 8073232:	f109 0901 	add.w	r9, r9, #1
 8073236:	b11b      	cbz	r3, 8073240 <_scanf_float+0x158>
 8073238:	3b01      	subs	r3, #1
 807323a:	3201      	adds	r2, #1
 807323c:	9302      	str	r3, [sp, #8]
 807323e:	60a2      	str	r2, [r4, #8]
 8073240:	68a3      	ldr	r3, [r4, #8]
 8073242:	3b01      	subs	r3, #1
 8073244:	60a3      	str	r3, [r4, #8]
 8073246:	6923      	ldr	r3, [r4, #16]
 8073248:	3301      	adds	r3, #1
 807324a:	6123      	str	r3, [r4, #16]
 807324c:	687b      	ldr	r3, [r7, #4]
 807324e:	3b01      	subs	r3, #1
 8073250:	2b00      	cmp	r3, #0
 8073252:	607b      	str	r3, [r7, #4]
 8073254:	f340 8084 	ble.w	8073360 <_scanf_float+0x278>
 8073258:	683b      	ldr	r3, [r7, #0]
 807325a:	3301      	adds	r3, #1
 807325c:	603b      	str	r3, [r7, #0]
 807325e:	e766      	b.n	807312e <_scanf_float+0x46>
 8073260:	eb1a 0f05 	cmn.w	sl, r5
 8073264:	f47f af70 	bne.w	8073148 <_scanf_float+0x60>
 8073268:	6822      	ldr	r2, [r4, #0]
 807326a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 807326e:	6022      	str	r2, [r4, #0]
 8073270:	f806 3b01 	strb.w	r3, [r6], #1
 8073274:	e7e4      	b.n	8073240 <_scanf_float+0x158>
 8073276:	6822      	ldr	r2, [r4, #0]
 8073278:	0610      	lsls	r0, r2, #24
 807327a:	f57f af65 	bpl.w	8073148 <_scanf_float+0x60>
 807327e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8073282:	e7f4      	b.n	807326e <_scanf_float+0x186>
 8073284:	f1ba 0f00 	cmp.w	sl, #0
 8073288:	d10e      	bne.n	80732a8 <_scanf_float+0x1c0>
 807328a:	f1b9 0f00 	cmp.w	r9, #0
 807328e:	d10e      	bne.n	80732ae <_scanf_float+0x1c6>
 8073290:	6822      	ldr	r2, [r4, #0]
 8073292:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8073296:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 807329a:	d108      	bne.n	80732ae <_scanf_float+0x1c6>
 807329c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80732a0:	6022      	str	r2, [r4, #0]
 80732a2:	f04f 0a01 	mov.w	sl, #1
 80732a6:	e7e3      	b.n	8073270 <_scanf_float+0x188>
 80732a8:	f1ba 0f02 	cmp.w	sl, #2
 80732ac:	d055      	beq.n	807335a <_scanf_float+0x272>
 80732ae:	2d01      	cmp	r5, #1
 80732b0:	d002      	beq.n	80732b8 <_scanf_float+0x1d0>
 80732b2:	2d04      	cmp	r5, #4
 80732b4:	f47f af48 	bne.w	8073148 <_scanf_float+0x60>
 80732b8:	3501      	adds	r5, #1
 80732ba:	b2ed      	uxtb	r5, r5
 80732bc:	e7d8      	b.n	8073270 <_scanf_float+0x188>
 80732be:	f1ba 0f01 	cmp.w	sl, #1
 80732c2:	f47f af41 	bne.w	8073148 <_scanf_float+0x60>
 80732c6:	f04f 0a02 	mov.w	sl, #2
 80732ca:	e7d1      	b.n	8073270 <_scanf_float+0x188>
 80732cc:	b97d      	cbnz	r5, 80732ee <_scanf_float+0x206>
 80732ce:	f1b9 0f00 	cmp.w	r9, #0
 80732d2:	f47f af3c 	bne.w	807314e <_scanf_float+0x66>
 80732d6:	6822      	ldr	r2, [r4, #0]
 80732d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80732dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80732e0:	f47f af39 	bne.w	8073156 <_scanf_float+0x6e>
 80732e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80732e8:	6022      	str	r2, [r4, #0]
 80732ea:	2501      	movs	r5, #1
 80732ec:	e7c0      	b.n	8073270 <_scanf_float+0x188>
 80732ee:	2d03      	cmp	r5, #3
 80732f0:	d0e2      	beq.n	80732b8 <_scanf_float+0x1d0>
 80732f2:	2d05      	cmp	r5, #5
 80732f4:	e7de      	b.n	80732b4 <_scanf_float+0x1cc>
 80732f6:	2d02      	cmp	r5, #2
 80732f8:	f47f af26 	bne.w	8073148 <_scanf_float+0x60>
 80732fc:	2503      	movs	r5, #3
 80732fe:	e7b7      	b.n	8073270 <_scanf_float+0x188>
 8073300:	2d06      	cmp	r5, #6
 8073302:	f47f af21 	bne.w	8073148 <_scanf_float+0x60>
 8073306:	2507      	movs	r5, #7
 8073308:	e7b2      	b.n	8073270 <_scanf_float+0x188>
 807330a:	6822      	ldr	r2, [r4, #0]
 807330c:	0591      	lsls	r1, r2, #22
 807330e:	f57f af1b 	bpl.w	8073148 <_scanf_float+0x60>
 8073312:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8073316:	6022      	str	r2, [r4, #0]
 8073318:	f8cd 9004 	str.w	r9, [sp, #4]
 807331c:	e7a8      	b.n	8073270 <_scanf_float+0x188>
 807331e:	6822      	ldr	r2, [r4, #0]
 8073320:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8073324:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8073328:	d006      	beq.n	8073338 <_scanf_float+0x250>
 807332a:	0550      	lsls	r0, r2, #21
 807332c:	f57f af0c 	bpl.w	8073148 <_scanf_float+0x60>
 8073330:	f1b9 0f00 	cmp.w	r9, #0
 8073334:	f43f af0f 	beq.w	8073156 <_scanf_float+0x6e>
 8073338:	0591      	lsls	r1, r2, #22
 807333a:	bf58      	it	pl
 807333c:	9901      	ldrpl	r1, [sp, #4]
 807333e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8073342:	bf58      	it	pl
 8073344:	eba9 0101 	subpl.w	r1, r9, r1
 8073348:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 807334c:	bf58      	it	pl
 807334e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8073352:	6022      	str	r2, [r4, #0]
 8073354:	f04f 0900 	mov.w	r9, #0
 8073358:	e78a      	b.n	8073270 <_scanf_float+0x188>
 807335a:	f04f 0a03 	mov.w	sl, #3
 807335e:	e787      	b.n	8073270 <_scanf_float+0x188>
 8073360:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8073364:	4639      	mov	r1, r7
 8073366:	4640      	mov	r0, r8
 8073368:	4798      	blx	r3
 807336a:	2800      	cmp	r0, #0
 807336c:	f43f aedf 	beq.w	807312e <_scanf_float+0x46>
 8073370:	e6ea      	b.n	8073148 <_scanf_float+0x60>
 8073372:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8073376:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 807337a:	463a      	mov	r2, r7
 807337c:	4640      	mov	r0, r8
 807337e:	4798      	blx	r3
 8073380:	6923      	ldr	r3, [r4, #16]
 8073382:	3b01      	subs	r3, #1
 8073384:	6123      	str	r3, [r4, #16]
 8073386:	e6ec      	b.n	8073162 <_scanf_float+0x7a>
 8073388:	1e6b      	subs	r3, r5, #1
 807338a:	2b06      	cmp	r3, #6
 807338c:	d825      	bhi.n	80733da <_scanf_float+0x2f2>
 807338e:	2d02      	cmp	r5, #2
 8073390:	d836      	bhi.n	8073400 <_scanf_float+0x318>
 8073392:	455e      	cmp	r6, fp
 8073394:	f67f aee8 	bls.w	8073168 <_scanf_float+0x80>
 8073398:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 807339c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80733a0:	463a      	mov	r2, r7
 80733a2:	4640      	mov	r0, r8
 80733a4:	4798      	blx	r3
 80733a6:	6923      	ldr	r3, [r4, #16]
 80733a8:	3b01      	subs	r3, #1
 80733aa:	6123      	str	r3, [r4, #16]
 80733ac:	e7f1      	b.n	8073392 <_scanf_float+0x2aa>
 80733ae:	9802      	ldr	r0, [sp, #8]
 80733b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80733b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80733b8:	9002      	str	r0, [sp, #8]
 80733ba:	463a      	mov	r2, r7
 80733bc:	4640      	mov	r0, r8
 80733be:	4798      	blx	r3
 80733c0:	6923      	ldr	r3, [r4, #16]
 80733c2:	3b01      	subs	r3, #1
 80733c4:	6123      	str	r3, [r4, #16]
 80733c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80733ca:	fa5f fa8a 	uxtb.w	sl, sl
 80733ce:	f1ba 0f02 	cmp.w	sl, #2
 80733d2:	d1ec      	bne.n	80733ae <_scanf_float+0x2c6>
 80733d4:	3d03      	subs	r5, #3
 80733d6:	b2ed      	uxtb	r5, r5
 80733d8:	1b76      	subs	r6, r6, r5
 80733da:	6823      	ldr	r3, [r4, #0]
 80733dc:	05da      	lsls	r2, r3, #23
 80733de:	d52f      	bpl.n	8073440 <_scanf_float+0x358>
 80733e0:	055b      	lsls	r3, r3, #21
 80733e2:	d510      	bpl.n	8073406 <_scanf_float+0x31e>
 80733e4:	455e      	cmp	r6, fp
 80733e6:	f67f aebf 	bls.w	8073168 <_scanf_float+0x80>
 80733ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80733ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80733f2:	463a      	mov	r2, r7
 80733f4:	4640      	mov	r0, r8
 80733f6:	4798      	blx	r3
 80733f8:	6923      	ldr	r3, [r4, #16]
 80733fa:	3b01      	subs	r3, #1
 80733fc:	6123      	str	r3, [r4, #16]
 80733fe:	e7f1      	b.n	80733e4 <_scanf_float+0x2fc>
 8073400:	46aa      	mov	sl, r5
 8073402:	9602      	str	r6, [sp, #8]
 8073404:	e7df      	b.n	80733c6 <_scanf_float+0x2de>
 8073406:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 807340a:	6923      	ldr	r3, [r4, #16]
 807340c:	2965      	cmp	r1, #101	; 0x65
 807340e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8073412:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8073416:	6123      	str	r3, [r4, #16]
 8073418:	d00c      	beq.n	8073434 <_scanf_float+0x34c>
 807341a:	2945      	cmp	r1, #69	; 0x45
 807341c:	d00a      	beq.n	8073434 <_scanf_float+0x34c>
 807341e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8073422:	463a      	mov	r2, r7
 8073424:	4640      	mov	r0, r8
 8073426:	4798      	blx	r3
 8073428:	6923      	ldr	r3, [r4, #16]
 807342a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 807342e:	3b01      	subs	r3, #1
 8073430:	1eb5      	subs	r5, r6, #2
 8073432:	6123      	str	r3, [r4, #16]
 8073434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8073438:	463a      	mov	r2, r7
 807343a:	4640      	mov	r0, r8
 807343c:	4798      	blx	r3
 807343e:	462e      	mov	r6, r5
 8073440:	6825      	ldr	r5, [r4, #0]
 8073442:	f015 0510 	ands.w	r5, r5, #16
 8073446:	d158      	bne.n	80734fa <_scanf_float+0x412>
 8073448:	7035      	strb	r5, [r6, #0]
 807344a:	6823      	ldr	r3, [r4, #0]
 807344c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8073450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8073454:	d11c      	bne.n	8073490 <_scanf_float+0x3a8>
 8073456:	9b01      	ldr	r3, [sp, #4]
 8073458:	454b      	cmp	r3, r9
 807345a:	eba3 0209 	sub.w	r2, r3, r9
 807345e:	d124      	bne.n	80734aa <_scanf_float+0x3c2>
 8073460:	2200      	movs	r2, #0
 8073462:	4659      	mov	r1, fp
 8073464:	4640      	mov	r0, r8
 8073466:	f000 ff6d 	bl	8074344 <_strtod_r>
 807346a:	9b03      	ldr	r3, [sp, #12]
 807346c:	6821      	ldr	r1, [r4, #0]
 807346e:	681b      	ldr	r3, [r3, #0]
 8073470:	f011 0f02 	tst.w	r1, #2
 8073474:	ec57 6b10 	vmov	r6, r7, d0
 8073478:	f103 0204 	add.w	r2, r3, #4
 807347c:	d020      	beq.n	80734c0 <_scanf_float+0x3d8>
 807347e:	9903      	ldr	r1, [sp, #12]
 8073480:	600a      	str	r2, [r1, #0]
 8073482:	681b      	ldr	r3, [r3, #0]
 8073484:	e9c3 6700 	strd	r6, r7, [r3]
 8073488:	68e3      	ldr	r3, [r4, #12]
 807348a:	3301      	adds	r3, #1
 807348c:	60e3      	str	r3, [r4, #12]
 807348e:	e66c      	b.n	807316a <_scanf_float+0x82>
 8073490:	9b04      	ldr	r3, [sp, #16]
 8073492:	2b00      	cmp	r3, #0
 8073494:	d0e4      	beq.n	8073460 <_scanf_float+0x378>
 8073496:	9905      	ldr	r1, [sp, #20]
 8073498:	230a      	movs	r3, #10
 807349a:	462a      	mov	r2, r5
 807349c:	3101      	adds	r1, #1
 807349e:	4640      	mov	r0, r8
 80734a0:	f000 ffda 	bl	8074458 <_strtol_r>
 80734a4:	9b04      	ldr	r3, [sp, #16]
 80734a6:	9e05      	ldr	r6, [sp, #20]
 80734a8:	1ac2      	subs	r2, r0, r3
 80734aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80734ae:	429e      	cmp	r6, r3
 80734b0:	bf28      	it	cs
 80734b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80734b6:	4912      	ldr	r1, [pc, #72]	; (8073500 <_scanf_float+0x418>)
 80734b8:	4630      	mov	r0, r6
 80734ba:	f000 f8a5 	bl	8073608 <siprintf>
 80734be:	e7cf      	b.n	8073460 <_scanf_float+0x378>
 80734c0:	f011 0f04 	tst.w	r1, #4
 80734c4:	9903      	ldr	r1, [sp, #12]
 80734c6:	600a      	str	r2, [r1, #0]
 80734c8:	d1db      	bne.n	8073482 <_scanf_float+0x39a>
 80734ca:	f8d3 8000 	ldr.w	r8, [r3]
 80734ce:	ee10 2a10 	vmov	r2, s0
 80734d2:	ee10 0a10 	vmov	r0, s0
 80734d6:	463b      	mov	r3, r7
 80734d8:	4639      	mov	r1, r7
 80734da:	f7ed fb3f 	bl	8060b5c <__aeabi_dcmpun>
 80734de:	b128      	cbz	r0, 80734ec <_scanf_float+0x404>
 80734e0:	4808      	ldr	r0, [pc, #32]	; (8073504 <_scanf_float+0x41c>)
 80734e2:	f000 f88b 	bl	80735fc <nanf>
 80734e6:	ed88 0a00 	vstr	s0, [r8]
 80734ea:	e7cd      	b.n	8073488 <_scanf_float+0x3a0>
 80734ec:	4630      	mov	r0, r6
 80734ee:	4639      	mov	r1, r7
 80734f0:	f7ed fb92 	bl	8060c18 <__aeabi_d2f>
 80734f4:	f8c8 0000 	str.w	r0, [r8]
 80734f8:	e7c6      	b.n	8073488 <_scanf_float+0x3a0>
 80734fa:	2500      	movs	r5, #0
 80734fc:	e635      	b.n	807316a <_scanf_float+0x82>
 80734fe:	bf00      	nop
 8073500:	08077848 	.word	0x08077848
 8073504:	08077c60 	.word	0x08077c60

08073508 <cleanup_glue>:
 8073508:	b538      	push	{r3, r4, r5, lr}
 807350a:	460c      	mov	r4, r1
 807350c:	6809      	ldr	r1, [r1, #0]
 807350e:	4605      	mov	r5, r0
 8073510:	b109      	cbz	r1, 8073516 <cleanup_glue+0xe>
 8073512:	f7ff fff9 	bl	8073508 <cleanup_glue>
 8073516:	4621      	mov	r1, r4
 8073518:	4628      	mov	r0, r5
 807351a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 807351e:	f002 bf6f 	b.w	8076400 <_free_r>
	...

08073524 <_reclaim_reent>:
 8073524:	4b2c      	ldr	r3, [pc, #176]	; (80735d8 <_reclaim_reent+0xb4>)
 8073526:	681b      	ldr	r3, [r3, #0]
 8073528:	4283      	cmp	r3, r0
 807352a:	b570      	push	{r4, r5, r6, lr}
 807352c:	4604      	mov	r4, r0
 807352e:	d051      	beq.n	80735d4 <_reclaim_reent+0xb0>
 8073530:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8073532:	b143      	cbz	r3, 8073546 <_reclaim_reent+0x22>
 8073534:	68db      	ldr	r3, [r3, #12]
 8073536:	2b00      	cmp	r3, #0
 8073538:	d14a      	bne.n	80735d0 <_reclaim_reent+0xac>
 807353a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 807353c:	6819      	ldr	r1, [r3, #0]
 807353e:	b111      	cbz	r1, 8073546 <_reclaim_reent+0x22>
 8073540:	4620      	mov	r0, r4
 8073542:	f002 ff5d 	bl	8076400 <_free_r>
 8073546:	6961      	ldr	r1, [r4, #20]
 8073548:	b111      	cbz	r1, 8073550 <_reclaim_reent+0x2c>
 807354a:	4620      	mov	r0, r4
 807354c:	f002 ff58 	bl	8076400 <_free_r>
 8073550:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8073552:	b111      	cbz	r1, 807355a <_reclaim_reent+0x36>
 8073554:	4620      	mov	r0, r4
 8073556:	f002 ff53 	bl	8076400 <_free_r>
 807355a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 807355c:	b111      	cbz	r1, 8073564 <_reclaim_reent+0x40>
 807355e:	4620      	mov	r0, r4
 8073560:	f002 ff4e 	bl	8076400 <_free_r>
 8073564:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8073566:	b111      	cbz	r1, 807356e <_reclaim_reent+0x4a>
 8073568:	4620      	mov	r0, r4
 807356a:	f002 ff49 	bl	8076400 <_free_r>
 807356e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8073570:	b111      	cbz	r1, 8073578 <_reclaim_reent+0x54>
 8073572:	4620      	mov	r0, r4
 8073574:	f002 ff44 	bl	8076400 <_free_r>
 8073578:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 807357a:	b111      	cbz	r1, 8073582 <_reclaim_reent+0x5e>
 807357c:	4620      	mov	r0, r4
 807357e:	f002 ff3f 	bl	8076400 <_free_r>
 8073582:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8073584:	b111      	cbz	r1, 807358c <_reclaim_reent+0x68>
 8073586:	4620      	mov	r0, r4
 8073588:	f002 ff3a 	bl	8076400 <_free_r>
 807358c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 807358e:	b111      	cbz	r1, 8073596 <_reclaim_reent+0x72>
 8073590:	4620      	mov	r0, r4
 8073592:	f002 ff35 	bl	8076400 <_free_r>
 8073596:	69a3      	ldr	r3, [r4, #24]
 8073598:	b1e3      	cbz	r3, 80735d4 <_reclaim_reent+0xb0>
 807359a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 807359c:	4620      	mov	r0, r4
 807359e:	4798      	blx	r3
 80735a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80735a2:	b1b9      	cbz	r1, 80735d4 <_reclaim_reent+0xb0>
 80735a4:	4620      	mov	r0, r4
 80735a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80735aa:	f7ff bfad 	b.w	8073508 <cleanup_glue>
 80735ae:	5949      	ldr	r1, [r1, r5]
 80735b0:	b941      	cbnz	r1, 80735c4 <_reclaim_reent+0xa0>
 80735b2:	3504      	adds	r5, #4
 80735b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80735b6:	2d80      	cmp	r5, #128	; 0x80
 80735b8:	68d9      	ldr	r1, [r3, #12]
 80735ba:	d1f8      	bne.n	80735ae <_reclaim_reent+0x8a>
 80735bc:	4620      	mov	r0, r4
 80735be:	f002 ff1f 	bl	8076400 <_free_r>
 80735c2:	e7ba      	b.n	807353a <_reclaim_reent+0x16>
 80735c4:	680e      	ldr	r6, [r1, #0]
 80735c6:	4620      	mov	r0, r4
 80735c8:	f002 ff1a 	bl	8076400 <_free_r>
 80735cc:	4631      	mov	r1, r6
 80735ce:	e7ef      	b.n	80735b0 <_reclaim_reent+0x8c>
 80735d0:	2500      	movs	r5, #0
 80735d2:	e7ef      	b.n	80735b4 <_reclaim_reent+0x90>
 80735d4:	bd70      	pop	{r4, r5, r6, pc}
 80735d6:	bf00      	nop
 80735d8:	20000028 	.word	0x20000028

080735dc <_sbrk_r>:
 80735dc:	b538      	push	{r3, r4, r5, lr}
 80735de:	4d06      	ldr	r5, [pc, #24]	; (80735f8 <_sbrk_r+0x1c>)
 80735e0:	2300      	movs	r3, #0
 80735e2:	4604      	mov	r4, r0
 80735e4:	4608      	mov	r0, r1
 80735e6:	602b      	str	r3, [r5, #0]
 80735e8:	f7f0 f836 	bl	8063658 <_sbrk>
 80735ec:	1c43      	adds	r3, r0, #1
 80735ee:	d102      	bne.n	80735f6 <_sbrk_r+0x1a>
 80735f0:	682b      	ldr	r3, [r5, #0]
 80735f2:	b103      	cbz	r3, 80735f6 <_sbrk_r+0x1a>
 80735f4:	6023      	str	r3, [r4, #0]
 80735f6:	bd38      	pop	{r3, r4, r5, pc}
 80735f8:	20005d30 	.word	0x20005d30

080735fc <nanf>:
 80735fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8073604 <nanf+0x8>
 8073600:	4770      	bx	lr
 8073602:	bf00      	nop
 8073604:	7fc00000 	.word	0x7fc00000

08073608 <siprintf>:
 8073608:	b40e      	push	{r1, r2, r3}
 807360a:	b500      	push	{lr}
 807360c:	b09c      	sub	sp, #112	; 0x70
 807360e:	ab1d      	add	r3, sp, #116	; 0x74
 8073610:	9002      	str	r0, [sp, #8]
 8073612:	9006      	str	r0, [sp, #24]
 8073614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8073618:	4809      	ldr	r0, [pc, #36]	; (8073640 <siprintf+0x38>)
 807361a:	9107      	str	r1, [sp, #28]
 807361c:	9104      	str	r1, [sp, #16]
 807361e:	4909      	ldr	r1, [pc, #36]	; (8073644 <siprintf+0x3c>)
 8073620:	f853 2b04 	ldr.w	r2, [r3], #4
 8073624:	9105      	str	r1, [sp, #20]
 8073626:	6800      	ldr	r0, [r0, #0]
 8073628:	9301      	str	r3, [sp, #4]
 807362a:	a902      	add	r1, sp, #8
 807362c:	f002 ff94 	bl	8076558 <_svfiprintf_r>
 8073630:	9b02      	ldr	r3, [sp, #8]
 8073632:	2200      	movs	r2, #0
 8073634:	701a      	strb	r2, [r3, #0]
 8073636:	b01c      	add	sp, #112	; 0x70
 8073638:	f85d eb04 	ldr.w	lr, [sp], #4
 807363c:	b003      	add	sp, #12
 807363e:	4770      	bx	lr
 8073640:	20000028 	.word	0x20000028
 8073644:	ffff0208 	.word	0xffff0208

08073648 <__sread>:
 8073648:	b510      	push	{r4, lr}
 807364a:	460c      	mov	r4, r1
 807364c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8073650:	f003 f9dc 	bl	8076a0c <_read_r>
 8073654:	2800      	cmp	r0, #0
 8073656:	bfab      	itete	ge
 8073658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 807365a:	89a3      	ldrhlt	r3, [r4, #12]
 807365c:	181b      	addge	r3, r3, r0
 807365e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8073662:	bfac      	ite	ge
 8073664:	6563      	strge	r3, [r4, #84]	; 0x54
 8073666:	81a3      	strhlt	r3, [r4, #12]
 8073668:	bd10      	pop	{r4, pc}

0807366a <__swrite>:
 807366a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 807366e:	461f      	mov	r7, r3
 8073670:	898b      	ldrh	r3, [r1, #12]
 8073672:	05db      	lsls	r3, r3, #23
 8073674:	4605      	mov	r5, r0
 8073676:	460c      	mov	r4, r1
 8073678:	4616      	mov	r6, r2
 807367a:	d505      	bpl.n	8073688 <__swrite+0x1e>
 807367c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8073680:	2302      	movs	r3, #2
 8073682:	2200      	movs	r2, #0
 8073684:	f002 f9ba 	bl	80759fc <_lseek_r>
 8073688:	89a3      	ldrh	r3, [r4, #12]
 807368a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 807368e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8073692:	81a3      	strh	r3, [r4, #12]
 8073694:	4632      	mov	r2, r6
 8073696:	463b      	mov	r3, r7
 8073698:	4628      	mov	r0, r5
 807369a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 807369e:	f000 bedd 	b.w	807445c <_write_r>

080736a2 <__sseek>:
 80736a2:	b510      	push	{r4, lr}
 80736a4:	460c      	mov	r4, r1
 80736a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80736aa:	f002 f9a7 	bl	80759fc <_lseek_r>
 80736ae:	1c43      	adds	r3, r0, #1
 80736b0:	89a3      	ldrh	r3, [r4, #12]
 80736b2:	bf15      	itete	ne
 80736b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80736b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80736ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80736be:	81a3      	strheq	r3, [r4, #12]
 80736c0:	bf18      	it	ne
 80736c2:	81a3      	strhne	r3, [r4, #12]
 80736c4:	bd10      	pop	{r4, pc}

080736c6 <__sclose>:
 80736c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80736ca:	f000 bed9 	b.w	8074480 <_close_r>

080736ce <strncmp>:
 80736ce:	b510      	push	{r4, lr}
 80736d0:	b16a      	cbz	r2, 80736ee <strncmp+0x20>
 80736d2:	3901      	subs	r1, #1
 80736d4:	1884      	adds	r4, r0, r2
 80736d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80736da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80736de:	4293      	cmp	r3, r2
 80736e0:	d103      	bne.n	80736ea <strncmp+0x1c>
 80736e2:	42a0      	cmp	r0, r4
 80736e4:	d001      	beq.n	80736ea <strncmp+0x1c>
 80736e6:	2b00      	cmp	r3, #0
 80736e8:	d1f5      	bne.n	80736d6 <strncmp+0x8>
 80736ea:	1a98      	subs	r0, r3, r2
 80736ec:	bd10      	pop	{r4, pc}
 80736ee:	4610      	mov	r0, r2
 80736f0:	e7fc      	b.n	80736ec <strncmp+0x1e>

080736f2 <sulp>:
 80736f2:	b570      	push	{r4, r5, r6, lr}
 80736f4:	4604      	mov	r4, r0
 80736f6:	460d      	mov	r5, r1
 80736f8:	ec45 4b10 	vmov	d0, r4, r5
 80736fc:	4616      	mov	r6, r2
 80736fe:	f002 fd21 	bl	8076144 <__ulp>
 8073702:	ec51 0b10 	vmov	r0, r1, d0
 8073706:	b17e      	cbz	r6, 8073728 <sulp+0x36>
 8073708:	f3c5 530a 	ubfx	r3, r5, #20, #11
 807370c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8073710:	2b00      	cmp	r3, #0
 8073712:	dd09      	ble.n	8073728 <sulp+0x36>
 8073714:	051b      	lsls	r3, r3, #20
 8073716:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 807371a:	2400      	movs	r4, #0
 807371c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8073720:	4622      	mov	r2, r4
 8073722:	462b      	mov	r3, r5
 8073724:	f7ec ff80 	bl	8060628 <__aeabi_dmul>
 8073728:	bd70      	pop	{r4, r5, r6, pc}
 807372a:	0000      	movs	r0, r0
 807372c:	0000      	movs	r0, r0
	...

08073730 <_strtod_l>:
 8073730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8073734:	b0a3      	sub	sp, #140	; 0x8c
 8073736:	461f      	mov	r7, r3
 8073738:	2300      	movs	r3, #0
 807373a:	931e      	str	r3, [sp, #120]	; 0x78
 807373c:	4ba4      	ldr	r3, [pc, #656]	; (80739d0 <_strtod_l+0x2a0>)
 807373e:	9219      	str	r2, [sp, #100]	; 0x64
 8073740:	681b      	ldr	r3, [r3, #0]
 8073742:	9307      	str	r3, [sp, #28]
 8073744:	4604      	mov	r4, r0
 8073746:	4618      	mov	r0, r3
 8073748:	4688      	mov	r8, r1
 807374a:	f7ec fd53 	bl	80601f4 <strlen>
 807374e:	f04f 0a00 	mov.w	sl, #0
 8073752:	4605      	mov	r5, r0
 8073754:	f04f 0b00 	mov.w	fp, #0
 8073758:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 807375c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807375e:	781a      	ldrb	r2, [r3, #0]
 8073760:	2a2b      	cmp	r2, #43	; 0x2b
 8073762:	d04c      	beq.n	80737fe <_strtod_l+0xce>
 8073764:	d839      	bhi.n	80737da <_strtod_l+0xaa>
 8073766:	2a0d      	cmp	r2, #13
 8073768:	d832      	bhi.n	80737d0 <_strtod_l+0xa0>
 807376a:	2a08      	cmp	r2, #8
 807376c:	d832      	bhi.n	80737d4 <_strtod_l+0xa4>
 807376e:	2a00      	cmp	r2, #0
 8073770:	d03c      	beq.n	80737ec <_strtod_l+0xbc>
 8073772:	2300      	movs	r3, #0
 8073774:	930e      	str	r3, [sp, #56]	; 0x38
 8073776:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8073778:	7833      	ldrb	r3, [r6, #0]
 807377a:	2b30      	cmp	r3, #48	; 0x30
 807377c:	f040 80b4 	bne.w	80738e8 <_strtod_l+0x1b8>
 8073780:	7873      	ldrb	r3, [r6, #1]
 8073782:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8073786:	2b58      	cmp	r3, #88	; 0x58
 8073788:	d16c      	bne.n	8073864 <_strtod_l+0x134>
 807378a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 807378c:	9301      	str	r3, [sp, #4]
 807378e:	ab1e      	add	r3, sp, #120	; 0x78
 8073790:	9702      	str	r7, [sp, #8]
 8073792:	9300      	str	r3, [sp, #0]
 8073794:	4a8f      	ldr	r2, [pc, #572]	; (80739d4 <_strtod_l+0x2a4>)
 8073796:	ab1f      	add	r3, sp, #124	; 0x7c
 8073798:	a91d      	add	r1, sp, #116	; 0x74
 807379a:	4620      	mov	r0, r4
 807379c:	f001 fe22 	bl	80753e4 <__gethex>
 80737a0:	f010 0707 	ands.w	r7, r0, #7
 80737a4:	4605      	mov	r5, r0
 80737a6:	d005      	beq.n	80737b4 <_strtod_l+0x84>
 80737a8:	2f06      	cmp	r7, #6
 80737aa:	d12a      	bne.n	8073802 <_strtod_l+0xd2>
 80737ac:	3601      	adds	r6, #1
 80737ae:	2300      	movs	r3, #0
 80737b0:	961d      	str	r6, [sp, #116]	; 0x74
 80737b2:	930e      	str	r3, [sp, #56]	; 0x38
 80737b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80737b6:	2b00      	cmp	r3, #0
 80737b8:	f040 8596 	bne.w	80742e8 <_strtod_l+0xbb8>
 80737bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80737be:	b1db      	cbz	r3, 80737f8 <_strtod_l+0xc8>
 80737c0:	4652      	mov	r2, sl
 80737c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80737c6:	ec43 2b10 	vmov	d0, r2, r3
 80737ca:	b023      	add	sp, #140	; 0x8c
 80737cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80737d0:	2a20      	cmp	r2, #32
 80737d2:	d1ce      	bne.n	8073772 <_strtod_l+0x42>
 80737d4:	3301      	adds	r3, #1
 80737d6:	931d      	str	r3, [sp, #116]	; 0x74
 80737d8:	e7c0      	b.n	807375c <_strtod_l+0x2c>
 80737da:	2a2d      	cmp	r2, #45	; 0x2d
 80737dc:	d1c9      	bne.n	8073772 <_strtod_l+0x42>
 80737de:	2201      	movs	r2, #1
 80737e0:	920e      	str	r2, [sp, #56]	; 0x38
 80737e2:	1c5a      	adds	r2, r3, #1
 80737e4:	921d      	str	r2, [sp, #116]	; 0x74
 80737e6:	785b      	ldrb	r3, [r3, #1]
 80737e8:	2b00      	cmp	r3, #0
 80737ea:	d1c4      	bne.n	8073776 <_strtod_l+0x46>
 80737ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80737ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80737f2:	2b00      	cmp	r3, #0
 80737f4:	f040 8576 	bne.w	80742e4 <_strtod_l+0xbb4>
 80737f8:	4652      	mov	r2, sl
 80737fa:	465b      	mov	r3, fp
 80737fc:	e7e3      	b.n	80737c6 <_strtod_l+0x96>
 80737fe:	2200      	movs	r2, #0
 8073800:	e7ee      	b.n	80737e0 <_strtod_l+0xb0>
 8073802:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8073804:	b13a      	cbz	r2, 8073816 <_strtod_l+0xe6>
 8073806:	2135      	movs	r1, #53	; 0x35
 8073808:	a820      	add	r0, sp, #128	; 0x80
 807380a:	f002 fda6 	bl	807635a <__copybits>
 807380e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073810:	4620      	mov	r0, r4
 8073812:	f002 f96b 	bl	8075aec <_Bfree>
 8073816:	3f01      	subs	r7, #1
 8073818:	2f05      	cmp	r7, #5
 807381a:	d807      	bhi.n	807382c <_strtod_l+0xfc>
 807381c:	e8df f007 	tbb	[pc, r7]
 8073820:	1d180b0e 	.word	0x1d180b0e
 8073824:	030e      	.short	0x030e
 8073826:	f04f 0b00 	mov.w	fp, #0
 807382a:	46da      	mov	sl, fp
 807382c:	0728      	lsls	r0, r5, #28
 807382e:	d5c1      	bpl.n	80737b4 <_strtod_l+0x84>
 8073830:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8073834:	e7be      	b.n	80737b4 <_strtod_l+0x84>
 8073836:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 807383a:	e7f7      	b.n	807382c <_strtod_l+0xfc>
 807383c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8073840:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8073842:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8073846:	f202 4233 	addw	r2, r2, #1075	; 0x433
 807384a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 807384e:	e7ed      	b.n	807382c <_strtod_l+0xfc>
 8073850:	f8df b184 	ldr.w	fp, [pc, #388]	; 80739d8 <_strtod_l+0x2a8>
 8073854:	f04f 0a00 	mov.w	sl, #0
 8073858:	e7e8      	b.n	807382c <_strtod_l+0xfc>
 807385a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 807385e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8073862:	e7e3      	b.n	807382c <_strtod_l+0xfc>
 8073864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8073866:	1c5a      	adds	r2, r3, #1
 8073868:	921d      	str	r2, [sp, #116]	; 0x74
 807386a:	785b      	ldrb	r3, [r3, #1]
 807386c:	2b30      	cmp	r3, #48	; 0x30
 807386e:	d0f9      	beq.n	8073864 <_strtod_l+0x134>
 8073870:	2b00      	cmp	r3, #0
 8073872:	d09f      	beq.n	80737b4 <_strtod_l+0x84>
 8073874:	2301      	movs	r3, #1
 8073876:	f04f 0900 	mov.w	r9, #0
 807387a:	9304      	str	r3, [sp, #16]
 807387c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807387e:	930a      	str	r3, [sp, #40]	; 0x28
 8073880:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8073884:	464f      	mov	r7, r9
 8073886:	220a      	movs	r2, #10
 8073888:	981d      	ldr	r0, [sp, #116]	; 0x74
 807388a:	7806      	ldrb	r6, [r0, #0]
 807388c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8073890:	b2d9      	uxtb	r1, r3
 8073892:	2909      	cmp	r1, #9
 8073894:	d92a      	bls.n	80738ec <_strtod_l+0x1bc>
 8073896:	9907      	ldr	r1, [sp, #28]
 8073898:	462a      	mov	r2, r5
 807389a:	f7ff ff18 	bl	80736ce <strncmp>
 807389e:	b398      	cbz	r0, 8073908 <_strtod_l+0x1d8>
 80738a0:	2000      	movs	r0, #0
 80738a2:	4633      	mov	r3, r6
 80738a4:	463d      	mov	r5, r7
 80738a6:	9007      	str	r0, [sp, #28]
 80738a8:	4602      	mov	r2, r0
 80738aa:	2b65      	cmp	r3, #101	; 0x65
 80738ac:	d001      	beq.n	80738b2 <_strtod_l+0x182>
 80738ae:	2b45      	cmp	r3, #69	; 0x45
 80738b0:	d118      	bne.n	80738e4 <_strtod_l+0x1b4>
 80738b2:	b91d      	cbnz	r5, 80738bc <_strtod_l+0x18c>
 80738b4:	9b04      	ldr	r3, [sp, #16]
 80738b6:	4303      	orrs	r3, r0
 80738b8:	d098      	beq.n	80737ec <_strtod_l+0xbc>
 80738ba:	2500      	movs	r5, #0
 80738bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80738c0:	f108 0301 	add.w	r3, r8, #1
 80738c4:	931d      	str	r3, [sp, #116]	; 0x74
 80738c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80738ca:	2b2b      	cmp	r3, #43	; 0x2b
 80738cc:	d075      	beq.n	80739ba <_strtod_l+0x28a>
 80738ce:	2b2d      	cmp	r3, #45	; 0x2d
 80738d0:	d07b      	beq.n	80739ca <_strtod_l+0x29a>
 80738d2:	f04f 0c00 	mov.w	ip, #0
 80738d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80738da:	2909      	cmp	r1, #9
 80738dc:	f240 8082 	bls.w	80739e4 <_strtod_l+0x2b4>
 80738e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80738e4:	2600      	movs	r6, #0
 80738e6:	e09d      	b.n	8073a24 <_strtod_l+0x2f4>
 80738e8:	2300      	movs	r3, #0
 80738ea:	e7c4      	b.n	8073876 <_strtod_l+0x146>
 80738ec:	2f08      	cmp	r7, #8
 80738ee:	bfd8      	it	le
 80738f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80738f2:	f100 0001 	add.w	r0, r0, #1
 80738f6:	bfda      	itte	le
 80738f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80738fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80738fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8073902:	3701      	adds	r7, #1
 8073904:	901d      	str	r0, [sp, #116]	; 0x74
 8073906:	e7bf      	b.n	8073888 <_strtod_l+0x158>
 8073908:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807390a:	195a      	adds	r2, r3, r5
 807390c:	921d      	str	r2, [sp, #116]	; 0x74
 807390e:	5d5b      	ldrb	r3, [r3, r5]
 8073910:	2f00      	cmp	r7, #0
 8073912:	d037      	beq.n	8073984 <_strtod_l+0x254>
 8073914:	9007      	str	r0, [sp, #28]
 8073916:	463d      	mov	r5, r7
 8073918:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 807391c:	2a09      	cmp	r2, #9
 807391e:	d912      	bls.n	8073946 <_strtod_l+0x216>
 8073920:	2201      	movs	r2, #1
 8073922:	e7c2      	b.n	80738aa <_strtod_l+0x17a>
 8073924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8073926:	1c5a      	adds	r2, r3, #1
 8073928:	921d      	str	r2, [sp, #116]	; 0x74
 807392a:	785b      	ldrb	r3, [r3, #1]
 807392c:	3001      	adds	r0, #1
 807392e:	2b30      	cmp	r3, #48	; 0x30
 8073930:	d0f8      	beq.n	8073924 <_strtod_l+0x1f4>
 8073932:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8073936:	2a08      	cmp	r2, #8
 8073938:	f200 84db 	bhi.w	80742f2 <_strtod_l+0xbc2>
 807393c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 807393e:	9007      	str	r0, [sp, #28]
 8073940:	2000      	movs	r0, #0
 8073942:	920a      	str	r2, [sp, #40]	; 0x28
 8073944:	4605      	mov	r5, r0
 8073946:	3b30      	subs	r3, #48	; 0x30
 8073948:	f100 0201 	add.w	r2, r0, #1
 807394c:	d014      	beq.n	8073978 <_strtod_l+0x248>
 807394e:	9907      	ldr	r1, [sp, #28]
 8073950:	4411      	add	r1, r2
 8073952:	9107      	str	r1, [sp, #28]
 8073954:	462a      	mov	r2, r5
 8073956:	eb00 0e05 	add.w	lr, r0, r5
 807395a:	210a      	movs	r1, #10
 807395c:	4572      	cmp	r2, lr
 807395e:	d113      	bne.n	8073988 <_strtod_l+0x258>
 8073960:	182a      	adds	r2, r5, r0
 8073962:	2a08      	cmp	r2, #8
 8073964:	f105 0501 	add.w	r5, r5, #1
 8073968:	4405      	add	r5, r0
 807396a:	dc1c      	bgt.n	80739a6 <_strtod_l+0x276>
 807396c:	9909      	ldr	r1, [sp, #36]	; 0x24
 807396e:	220a      	movs	r2, #10
 8073970:	fb02 3301 	mla	r3, r2, r1, r3
 8073974:	9309      	str	r3, [sp, #36]	; 0x24
 8073976:	2200      	movs	r2, #0
 8073978:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807397a:	1c59      	adds	r1, r3, #1
 807397c:	911d      	str	r1, [sp, #116]	; 0x74
 807397e:	785b      	ldrb	r3, [r3, #1]
 8073980:	4610      	mov	r0, r2
 8073982:	e7c9      	b.n	8073918 <_strtod_l+0x1e8>
 8073984:	4638      	mov	r0, r7
 8073986:	e7d2      	b.n	807392e <_strtod_l+0x1fe>
 8073988:	2a08      	cmp	r2, #8
 807398a:	dc04      	bgt.n	8073996 <_strtod_l+0x266>
 807398c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 807398e:	434e      	muls	r6, r1
 8073990:	9609      	str	r6, [sp, #36]	; 0x24
 8073992:	3201      	adds	r2, #1
 8073994:	e7e2      	b.n	807395c <_strtod_l+0x22c>
 8073996:	f102 0c01 	add.w	ip, r2, #1
 807399a:	f1bc 0f10 	cmp.w	ip, #16
 807399e:	bfd8      	it	le
 80739a0:	fb01 f909 	mulle.w	r9, r1, r9
 80739a4:	e7f5      	b.n	8073992 <_strtod_l+0x262>
 80739a6:	2d10      	cmp	r5, #16
 80739a8:	bfdc      	itt	le
 80739aa:	220a      	movle	r2, #10
 80739ac:	fb02 3909 	mlale	r9, r2, r9, r3
 80739b0:	e7e1      	b.n	8073976 <_strtod_l+0x246>
 80739b2:	2300      	movs	r3, #0
 80739b4:	9307      	str	r3, [sp, #28]
 80739b6:	2201      	movs	r2, #1
 80739b8:	e77c      	b.n	80738b4 <_strtod_l+0x184>
 80739ba:	f04f 0c00 	mov.w	ip, #0
 80739be:	f108 0302 	add.w	r3, r8, #2
 80739c2:	931d      	str	r3, [sp, #116]	; 0x74
 80739c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80739c8:	e785      	b.n	80738d6 <_strtod_l+0x1a6>
 80739ca:	f04f 0c01 	mov.w	ip, #1
 80739ce:	e7f6      	b.n	80739be <_strtod_l+0x28e>
 80739d0:	08077aa0 	.word	0x08077aa0
 80739d4:	08077850 	.word	0x08077850
 80739d8:	7ff00000 	.word	0x7ff00000
 80739dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80739de:	1c59      	adds	r1, r3, #1
 80739e0:	911d      	str	r1, [sp, #116]	; 0x74
 80739e2:	785b      	ldrb	r3, [r3, #1]
 80739e4:	2b30      	cmp	r3, #48	; 0x30
 80739e6:	d0f9      	beq.n	80739dc <_strtod_l+0x2ac>
 80739e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80739ec:	2908      	cmp	r1, #8
 80739ee:	f63f af79 	bhi.w	80738e4 <_strtod_l+0x1b4>
 80739f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80739f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80739f8:	9308      	str	r3, [sp, #32]
 80739fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80739fc:	1c59      	adds	r1, r3, #1
 80739fe:	911d      	str	r1, [sp, #116]	; 0x74
 8073a00:	785b      	ldrb	r3, [r3, #1]
 8073a02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8073a06:	2e09      	cmp	r6, #9
 8073a08:	d937      	bls.n	8073a7a <_strtod_l+0x34a>
 8073a0a:	9e08      	ldr	r6, [sp, #32]
 8073a0c:	1b89      	subs	r1, r1, r6
 8073a0e:	2908      	cmp	r1, #8
 8073a10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8073a14:	dc02      	bgt.n	8073a1c <_strtod_l+0x2ec>
 8073a16:	4576      	cmp	r6, lr
 8073a18:	bfa8      	it	ge
 8073a1a:	4676      	movge	r6, lr
 8073a1c:	f1bc 0f00 	cmp.w	ip, #0
 8073a20:	d000      	beq.n	8073a24 <_strtod_l+0x2f4>
 8073a22:	4276      	negs	r6, r6
 8073a24:	2d00      	cmp	r5, #0
 8073a26:	d14f      	bne.n	8073ac8 <_strtod_l+0x398>
 8073a28:	9904      	ldr	r1, [sp, #16]
 8073a2a:	4301      	orrs	r1, r0
 8073a2c:	f47f aec2 	bne.w	80737b4 <_strtod_l+0x84>
 8073a30:	2a00      	cmp	r2, #0
 8073a32:	f47f aedb 	bne.w	80737ec <_strtod_l+0xbc>
 8073a36:	2b69      	cmp	r3, #105	; 0x69
 8073a38:	d027      	beq.n	8073a8a <_strtod_l+0x35a>
 8073a3a:	dc24      	bgt.n	8073a86 <_strtod_l+0x356>
 8073a3c:	2b49      	cmp	r3, #73	; 0x49
 8073a3e:	d024      	beq.n	8073a8a <_strtod_l+0x35a>
 8073a40:	2b4e      	cmp	r3, #78	; 0x4e
 8073a42:	f47f aed3 	bne.w	80737ec <_strtod_l+0xbc>
 8073a46:	499e      	ldr	r1, [pc, #632]	; (8073cc0 <_strtod_l+0x590>)
 8073a48:	a81d      	add	r0, sp, #116	; 0x74
 8073a4a:	f001 ff23 	bl	8075894 <__match>
 8073a4e:	2800      	cmp	r0, #0
 8073a50:	f43f aecc 	beq.w	80737ec <_strtod_l+0xbc>
 8073a54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8073a56:	781b      	ldrb	r3, [r3, #0]
 8073a58:	2b28      	cmp	r3, #40	; 0x28
 8073a5a:	d12d      	bne.n	8073ab8 <_strtod_l+0x388>
 8073a5c:	4999      	ldr	r1, [pc, #612]	; (8073cc4 <_strtod_l+0x594>)
 8073a5e:	aa20      	add	r2, sp, #128	; 0x80
 8073a60:	a81d      	add	r0, sp, #116	; 0x74
 8073a62:	f001 ff2b 	bl	80758bc <__hexnan>
 8073a66:	2805      	cmp	r0, #5
 8073a68:	d126      	bne.n	8073ab8 <_strtod_l+0x388>
 8073a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8073a6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8073a70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8073a74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8073a78:	e69c      	b.n	80737b4 <_strtod_l+0x84>
 8073a7a:	210a      	movs	r1, #10
 8073a7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8073a80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8073a84:	e7b9      	b.n	80739fa <_strtod_l+0x2ca>
 8073a86:	2b6e      	cmp	r3, #110	; 0x6e
 8073a88:	e7db      	b.n	8073a42 <_strtod_l+0x312>
 8073a8a:	498f      	ldr	r1, [pc, #572]	; (8073cc8 <_strtod_l+0x598>)
 8073a8c:	a81d      	add	r0, sp, #116	; 0x74
 8073a8e:	f001 ff01 	bl	8075894 <__match>
 8073a92:	2800      	cmp	r0, #0
 8073a94:	f43f aeaa 	beq.w	80737ec <_strtod_l+0xbc>
 8073a98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8073a9a:	498c      	ldr	r1, [pc, #560]	; (8073ccc <_strtod_l+0x59c>)
 8073a9c:	3b01      	subs	r3, #1
 8073a9e:	a81d      	add	r0, sp, #116	; 0x74
 8073aa0:	931d      	str	r3, [sp, #116]	; 0x74
 8073aa2:	f001 fef7 	bl	8075894 <__match>
 8073aa6:	b910      	cbnz	r0, 8073aae <_strtod_l+0x37e>
 8073aa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8073aaa:	3301      	adds	r3, #1
 8073aac:	931d      	str	r3, [sp, #116]	; 0x74
 8073aae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8073cdc <_strtod_l+0x5ac>
 8073ab2:	f04f 0a00 	mov.w	sl, #0
 8073ab6:	e67d      	b.n	80737b4 <_strtod_l+0x84>
 8073ab8:	4885      	ldr	r0, [pc, #532]	; (8073cd0 <_strtod_l+0x5a0>)
 8073aba:	f002 ffb9 	bl	8076a30 <nan>
 8073abe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8073ac2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8073ac6:	e675      	b.n	80737b4 <_strtod_l+0x84>
 8073ac8:	9b07      	ldr	r3, [sp, #28]
 8073aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8073acc:	1af3      	subs	r3, r6, r3
 8073ace:	2f00      	cmp	r7, #0
 8073ad0:	bf08      	it	eq
 8073ad2:	462f      	moveq	r7, r5
 8073ad4:	2d10      	cmp	r5, #16
 8073ad6:	9308      	str	r3, [sp, #32]
 8073ad8:	46a8      	mov	r8, r5
 8073ada:	bfa8      	it	ge
 8073adc:	f04f 0810 	movge.w	r8, #16
 8073ae0:	f7ec fd28 	bl	8060534 <__aeabi_ui2d>
 8073ae4:	2d09      	cmp	r5, #9
 8073ae6:	4682      	mov	sl, r0
 8073ae8:	468b      	mov	fp, r1
 8073aea:	dd13      	ble.n	8073b14 <_strtod_l+0x3e4>
 8073aec:	4b79      	ldr	r3, [pc, #484]	; (8073cd4 <_strtod_l+0x5a4>)
 8073aee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8073af2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8073af6:	f7ec fd97 	bl	8060628 <__aeabi_dmul>
 8073afa:	4682      	mov	sl, r0
 8073afc:	4648      	mov	r0, r9
 8073afe:	468b      	mov	fp, r1
 8073b00:	f7ec fd18 	bl	8060534 <__aeabi_ui2d>
 8073b04:	4602      	mov	r2, r0
 8073b06:	460b      	mov	r3, r1
 8073b08:	4650      	mov	r0, sl
 8073b0a:	4659      	mov	r1, fp
 8073b0c:	f7ec fbd6 	bl	80602bc <__adddf3>
 8073b10:	4682      	mov	sl, r0
 8073b12:	468b      	mov	fp, r1
 8073b14:	2d0f      	cmp	r5, #15
 8073b16:	dc38      	bgt.n	8073b8a <_strtod_l+0x45a>
 8073b18:	9b08      	ldr	r3, [sp, #32]
 8073b1a:	2b00      	cmp	r3, #0
 8073b1c:	f43f ae4a 	beq.w	80737b4 <_strtod_l+0x84>
 8073b20:	dd24      	ble.n	8073b6c <_strtod_l+0x43c>
 8073b22:	2b16      	cmp	r3, #22
 8073b24:	dc0b      	bgt.n	8073b3e <_strtod_l+0x40e>
 8073b26:	4d6b      	ldr	r5, [pc, #428]	; (8073cd4 <_strtod_l+0x5a4>)
 8073b28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8073b2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8073b30:	4652      	mov	r2, sl
 8073b32:	465b      	mov	r3, fp
 8073b34:	f7ec fd78 	bl	8060628 <__aeabi_dmul>
 8073b38:	4682      	mov	sl, r0
 8073b3a:	468b      	mov	fp, r1
 8073b3c:	e63a      	b.n	80737b4 <_strtod_l+0x84>
 8073b3e:	9a08      	ldr	r2, [sp, #32]
 8073b40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8073b44:	4293      	cmp	r3, r2
 8073b46:	db20      	blt.n	8073b8a <_strtod_l+0x45a>
 8073b48:	4c62      	ldr	r4, [pc, #392]	; (8073cd4 <_strtod_l+0x5a4>)
 8073b4a:	f1c5 050f 	rsb	r5, r5, #15
 8073b4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8073b52:	4652      	mov	r2, sl
 8073b54:	465b      	mov	r3, fp
 8073b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8073b5a:	f7ec fd65 	bl	8060628 <__aeabi_dmul>
 8073b5e:	9b08      	ldr	r3, [sp, #32]
 8073b60:	1b5d      	subs	r5, r3, r5
 8073b62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8073b66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8073b6a:	e7e3      	b.n	8073b34 <_strtod_l+0x404>
 8073b6c:	9b08      	ldr	r3, [sp, #32]
 8073b6e:	3316      	adds	r3, #22
 8073b70:	db0b      	blt.n	8073b8a <_strtod_l+0x45a>
 8073b72:	9b07      	ldr	r3, [sp, #28]
 8073b74:	4a57      	ldr	r2, [pc, #348]	; (8073cd4 <_strtod_l+0x5a4>)
 8073b76:	1b9e      	subs	r6, r3, r6
 8073b78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8073b7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8073b80:	4650      	mov	r0, sl
 8073b82:	4659      	mov	r1, fp
 8073b84:	f7ec fe7a 	bl	806087c <__aeabi_ddiv>
 8073b88:	e7d6      	b.n	8073b38 <_strtod_l+0x408>
 8073b8a:	9b08      	ldr	r3, [sp, #32]
 8073b8c:	eba5 0808 	sub.w	r8, r5, r8
 8073b90:	4498      	add	r8, r3
 8073b92:	f1b8 0f00 	cmp.w	r8, #0
 8073b96:	dd71      	ble.n	8073c7c <_strtod_l+0x54c>
 8073b98:	f018 030f 	ands.w	r3, r8, #15
 8073b9c:	d00a      	beq.n	8073bb4 <_strtod_l+0x484>
 8073b9e:	494d      	ldr	r1, [pc, #308]	; (8073cd4 <_strtod_l+0x5a4>)
 8073ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8073ba4:	4652      	mov	r2, sl
 8073ba6:	465b      	mov	r3, fp
 8073ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8073bac:	f7ec fd3c 	bl	8060628 <__aeabi_dmul>
 8073bb0:	4682      	mov	sl, r0
 8073bb2:	468b      	mov	fp, r1
 8073bb4:	f038 080f 	bics.w	r8, r8, #15
 8073bb8:	d04d      	beq.n	8073c56 <_strtod_l+0x526>
 8073bba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8073bbe:	dd22      	ble.n	8073c06 <_strtod_l+0x4d6>
 8073bc0:	2500      	movs	r5, #0
 8073bc2:	462e      	mov	r6, r5
 8073bc4:	9509      	str	r5, [sp, #36]	; 0x24
 8073bc6:	9507      	str	r5, [sp, #28]
 8073bc8:	2322      	movs	r3, #34	; 0x22
 8073bca:	f8df b110 	ldr.w	fp, [pc, #272]	; 8073cdc <_strtod_l+0x5ac>
 8073bce:	6023      	str	r3, [r4, #0]
 8073bd0:	f04f 0a00 	mov.w	sl, #0
 8073bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073bd6:	2b00      	cmp	r3, #0
 8073bd8:	f43f adec 	beq.w	80737b4 <_strtod_l+0x84>
 8073bdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073bde:	4620      	mov	r0, r4
 8073be0:	f001 ff84 	bl	8075aec <_Bfree>
 8073be4:	9907      	ldr	r1, [sp, #28]
 8073be6:	4620      	mov	r0, r4
 8073be8:	f001 ff80 	bl	8075aec <_Bfree>
 8073bec:	4631      	mov	r1, r6
 8073bee:	4620      	mov	r0, r4
 8073bf0:	f001 ff7c 	bl	8075aec <_Bfree>
 8073bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8073bf6:	4620      	mov	r0, r4
 8073bf8:	f001 ff78 	bl	8075aec <_Bfree>
 8073bfc:	4629      	mov	r1, r5
 8073bfe:	4620      	mov	r0, r4
 8073c00:	f001 ff74 	bl	8075aec <_Bfree>
 8073c04:	e5d6      	b.n	80737b4 <_strtod_l+0x84>
 8073c06:	2300      	movs	r3, #0
 8073c08:	ea4f 1828 	mov.w	r8, r8, asr #4
 8073c0c:	4650      	mov	r0, sl
 8073c0e:	4659      	mov	r1, fp
 8073c10:	4699      	mov	r9, r3
 8073c12:	f1b8 0f01 	cmp.w	r8, #1
 8073c16:	dc21      	bgt.n	8073c5c <_strtod_l+0x52c>
 8073c18:	b10b      	cbz	r3, 8073c1e <_strtod_l+0x4ee>
 8073c1a:	4682      	mov	sl, r0
 8073c1c:	468b      	mov	fp, r1
 8073c1e:	4b2e      	ldr	r3, [pc, #184]	; (8073cd8 <_strtod_l+0x5a8>)
 8073c20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8073c24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8073c28:	4652      	mov	r2, sl
 8073c2a:	465b      	mov	r3, fp
 8073c2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8073c30:	f7ec fcfa 	bl	8060628 <__aeabi_dmul>
 8073c34:	4b29      	ldr	r3, [pc, #164]	; (8073cdc <_strtod_l+0x5ac>)
 8073c36:	460a      	mov	r2, r1
 8073c38:	400b      	ands	r3, r1
 8073c3a:	4929      	ldr	r1, [pc, #164]	; (8073ce0 <_strtod_l+0x5b0>)
 8073c3c:	428b      	cmp	r3, r1
 8073c3e:	4682      	mov	sl, r0
 8073c40:	d8be      	bhi.n	8073bc0 <_strtod_l+0x490>
 8073c42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8073c46:	428b      	cmp	r3, r1
 8073c48:	bf86      	itte	hi
 8073c4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8073ce4 <_strtod_l+0x5b4>
 8073c4e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8073c52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8073c56:	2300      	movs	r3, #0
 8073c58:	9304      	str	r3, [sp, #16]
 8073c5a:	e081      	b.n	8073d60 <_strtod_l+0x630>
 8073c5c:	f018 0f01 	tst.w	r8, #1
 8073c60:	d007      	beq.n	8073c72 <_strtod_l+0x542>
 8073c62:	4b1d      	ldr	r3, [pc, #116]	; (8073cd8 <_strtod_l+0x5a8>)
 8073c64:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8073c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8073c6c:	f7ec fcdc 	bl	8060628 <__aeabi_dmul>
 8073c70:	2301      	movs	r3, #1
 8073c72:	f109 0901 	add.w	r9, r9, #1
 8073c76:	ea4f 0868 	mov.w	r8, r8, asr #1
 8073c7a:	e7ca      	b.n	8073c12 <_strtod_l+0x4e2>
 8073c7c:	d0eb      	beq.n	8073c56 <_strtod_l+0x526>
 8073c7e:	f1c8 0800 	rsb	r8, r8, #0
 8073c82:	f018 020f 	ands.w	r2, r8, #15
 8073c86:	d00a      	beq.n	8073c9e <_strtod_l+0x56e>
 8073c88:	4b12      	ldr	r3, [pc, #72]	; (8073cd4 <_strtod_l+0x5a4>)
 8073c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8073c8e:	4650      	mov	r0, sl
 8073c90:	4659      	mov	r1, fp
 8073c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8073c96:	f7ec fdf1 	bl	806087c <__aeabi_ddiv>
 8073c9a:	4682      	mov	sl, r0
 8073c9c:	468b      	mov	fp, r1
 8073c9e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8073ca2:	d0d8      	beq.n	8073c56 <_strtod_l+0x526>
 8073ca4:	f1b8 0f1f 	cmp.w	r8, #31
 8073ca8:	dd1e      	ble.n	8073ce8 <_strtod_l+0x5b8>
 8073caa:	2500      	movs	r5, #0
 8073cac:	462e      	mov	r6, r5
 8073cae:	9509      	str	r5, [sp, #36]	; 0x24
 8073cb0:	9507      	str	r5, [sp, #28]
 8073cb2:	2322      	movs	r3, #34	; 0x22
 8073cb4:	f04f 0a00 	mov.w	sl, #0
 8073cb8:	f04f 0b00 	mov.w	fp, #0
 8073cbc:	6023      	str	r3, [r4, #0]
 8073cbe:	e789      	b.n	8073bd4 <_strtod_l+0x4a4>
 8073cc0:	08077821 	.word	0x08077821
 8073cc4:	08077864 	.word	0x08077864
 8073cc8:	08077819 	.word	0x08077819
 8073ccc:	080779a4 	.word	0x080779a4
 8073cd0:	08077c60 	.word	0x08077c60
 8073cd4:	08077b40 	.word	0x08077b40
 8073cd8:	08077b18 	.word	0x08077b18
 8073cdc:	7ff00000 	.word	0x7ff00000
 8073ce0:	7ca00000 	.word	0x7ca00000
 8073ce4:	7fefffff 	.word	0x7fefffff
 8073ce8:	f018 0310 	ands.w	r3, r8, #16
 8073cec:	bf18      	it	ne
 8073cee:	236a      	movne	r3, #106	; 0x6a
 8073cf0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80740a8 <_strtod_l+0x978>
 8073cf4:	9304      	str	r3, [sp, #16]
 8073cf6:	4650      	mov	r0, sl
 8073cf8:	4659      	mov	r1, fp
 8073cfa:	2300      	movs	r3, #0
 8073cfc:	f018 0f01 	tst.w	r8, #1
 8073d00:	d004      	beq.n	8073d0c <_strtod_l+0x5dc>
 8073d02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8073d06:	f7ec fc8f 	bl	8060628 <__aeabi_dmul>
 8073d0a:	2301      	movs	r3, #1
 8073d0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8073d10:	f109 0908 	add.w	r9, r9, #8
 8073d14:	d1f2      	bne.n	8073cfc <_strtod_l+0x5cc>
 8073d16:	b10b      	cbz	r3, 8073d1c <_strtod_l+0x5ec>
 8073d18:	4682      	mov	sl, r0
 8073d1a:	468b      	mov	fp, r1
 8073d1c:	9b04      	ldr	r3, [sp, #16]
 8073d1e:	b1bb      	cbz	r3, 8073d50 <_strtod_l+0x620>
 8073d20:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8073d24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8073d28:	2b00      	cmp	r3, #0
 8073d2a:	4659      	mov	r1, fp
 8073d2c:	dd10      	ble.n	8073d50 <_strtod_l+0x620>
 8073d2e:	2b1f      	cmp	r3, #31
 8073d30:	f340 8128 	ble.w	8073f84 <_strtod_l+0x854>
 8073d34:	2b34      	cmp	r3, #52	; 0x34
 8073d36:	bfde      	ittt	le
 8073d38:	3b20      	suble	r3, #32
 8073d3a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8073d3e:	fa02 f303 	lslle.w	r3, r2, r3
 8073d42:	f04f 0a00 	mov.w	sl, #0
 8073d46:	bfcc      	ite	gt
 8073d48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8073d4c:	ea03 0b01 	andle.w	fp, r3, r1
 8073d50:	2200      	movs	r2, #0
 8073d52:	2300      	movs	r3, #0
 8073d54:	4650      	mov	r0, sl
 8073d56:	4659      	mov	r1, fp
 8073d58:	f7ec fece 	bl	8060af8 <__aeabi_dcmpeq>
 8073d5c:	2800      	cmp	r0, #0
 8073d5e:	d1a4      	bne.n	8073caa <_strtod_l+0x57a>
 8073d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073d62:	9300      	str	r3, [sp, #0]
 8073d64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8073d66:	462b      	mov	r3, r5
 8073d68:	463a      	mov	r2, r7
 8073d6a:	4620      	mov	r0, r4
 8073d6c:	f001 ff2a 	bl	8075bc4 <__s2b>
 8073d70:	9009      	str	r0, [sp, #36]	; 0x24
 8073d72:	2800      	cmp	r0, #0
 8073d74:	f43f af24 	beq.w	8073bc0 <_strtod_l+0x490>
 8073d78:	9b07      	ldr	r3, [sp, #28]
 8073d7a:	1b9e      	subs	r6, r3, r6
 8073d7c:	9b08      	ldr	r3, [sp, #32]
 8073d7e:	2b00      	cmp	r3, #0
 8073d80:	bfb4      	ite	lt
 8073d82:	4633      	movlt	r3, r6
 8073d84:	2300      	movge	r3, #0
 8073d86:	9310      	str	r3, [sp, #64]	; 0x40
 8073d88:	9b08      	ldr	r3, [sp, #32]
 8073d8a:	2500      	movs	r5, #0
 8073d8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8073d90:	9318      	str	r3, [sp, #96]	; 0x60
 8073d92:	462e      	mov	r6, r5
 8073d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073d96:	4620      	mov	r0, r4
 8073d98:	6859      	ldr	r1, [r3, #4]
 8073d9a:	f001 fe67 	bl	8075a6c <_Balloc>
 8073d9e:	9007      	str	r0, [sp, #28]
 8073da0:	2800      	cmp	r0, #0
 8073da2:	f43f af11 	beq.w	8073bc8 <_strtod_l+0x498>
 8073da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073da8:	691a      	ldr	r2, [r3, #16]
 8073daa:	3202      	adds	r2, #2
 8073dac:	f103 010c 	add.w	r1, r3, #12
 8073db0:	0092      	lsls	r2, r2, #2
 8073db2:	300c      	adds	r0, #12
 8073db4:	f7fe fcbd 	bl	8072732 <memcpy>
 8073db8:	ec4b ab10 	vmov	d0, sl, fp
 8073dbc:	aa20      	add	r2, sp, #128	; 0x80
 8073dbe:	a91f      	add	r1, sp, #124	; 0x7c
 8073dc0:	4620      	mov	r0, r4
 8073dc2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8073dc6:	f002 fa39 	bl	807623c <__d2b>
 8073dca:	901e      	str	r0, [sp, #120]	; 0x78
 8073dcc:	2800      	cmp	r0, #0
 8073dce:	f43f aefb 	beq.w	8073bc8 <_strtod_l+0x498>
 8073dd2:	2101      	movs	r1, #1
 8073dd4:	4620      	mov	r0, r4
 8073dd6:	f001 ff8f 	bl	8075cf8 <__i2b>
 8073dda:	4606      	mov	r6, r0
 8073ddc:	2800      	cmp	r0, #0
 8073dde:	f43f aef3 	beq.w	8073bc8 <_strtod_l+0x498>
 8073de2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8073de4:	9904      	ldr	r1, [sp, #16]
 8073de6:	2b00      	cmp	r3, #0
 8073de8:	bfab      	itete	ge
 8073dea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8073dec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8073dee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8073df0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8073df4:	bfac      	ite	ge
 8073df6:	eb03 0902 	addge.w	r9, r3, r2
 8073dfa:	1ad7      	sublt	r7, r2, r3
 8073dfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8073dfe:	eba3 0801 	sub.w	r8, r3, r1
 8073e02:	4490      	add	r8, r2
 8073e04:	4ba3      	ldr	r3, [pc, #652]	; (8074094 <_strtod_l+0x964>)
 8073e06:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8073e0a:	4598      	cmp	r8, r3
 8073e0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8073e10:	f280 80cc 	bge.w	8073fac <_strtod_l+0x87c>
 8073e14:	eba3 0308 	sub.w	r3, r3, r8
 8073e18:	2b1f      	cmp	r3, #31
 8073e1a:	eba2 0203 	sub.w	r2, r2, r3
 8073e1e:	f04f 0101 	mov.w	r1, #1
 8073e22:	f300 80b6 	bgt.w	8073f92 <_strtod_l+0x862>
 8073e26:	fa01 f303 	lsl.w	r3, r1, r3
 8073e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8073e2c:	2300      	movs	r3, #0
 8073e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8073e30:	eb09 0802 	add.w	r8, r9, r2
 8073e34:	9b04      	ldr	r3, [sp, #16]
 8073e36:	45c1      	cmp	r9, r8
 8073e38:	4417      	add	r7, r2
 8073e3a:	441f      	add	r7, r3
 8073e3c:	464b      	mov	r3, r9
 8073e3e:	bfa8      	it	ge
 8073e40:	4643      	movge	r3, r8
 8073e42:	42bb      	cmp	r3, r7
 8073e44:	bfa8      	it	ge
 8073e46:	463b      	movge	r3, r7
 8073e48:	2b00      	cmp	r3, #0
 8073e4a:	bfc2      	ittt	gt
 8073e4c:	eba8 0803 	subgt.w	r8, r8, r3
 8073e50:	1aff      	subgt	r7, r7, r3
 8073e52:	eba9 0903 	subgt.w	r9, r9, r3
 8073e56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8073e58:	2b00      	cmp	r3, #0
 8073e5a:	dd17      	ble.n	8073e8c <_strtod_l+0x75c>
 8073e5c:	4631      	mov	r1, r6
 8073e5e:	461a      	mov	r2, r3
 8073e60:	4620      	mov	r0, r4
 8073e62:	f002 f805 	bl	8075e70 <__pow5mult>
 8073e66:	4606      	mov	r6, r0
 8073e68:	2800      	cmp	r0, #0
 8073e6a:	f43f aead 	beq.w	8073bc8 <_strtod_l+0x498>
 8073e6e:	4601      	mov	r1, r0
 8073e70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8073e72:	4620      	mov	r0, r4
 8073e74:	f001 ff56 	bl	8075d24 <__multiply>
 8073e78:	900f      	str	r0, [sp, #60]	; 0x3c
 8073e7a:	2800      	cmp	r0, #0
 8073e7c:	f43f aea4 	beq.w	8073bc8 <_strtod_l+0x498>
 8073e80:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073e82:	4620      	mov	r0, r4
 8073e84:	f001 fe32 	bl	8075aec <_Bfree>
 8073e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8073e8a:	931e      	str	r3, [sp, #120]	; 0x78
 8073e8c:	f1b8 0f00 	cmp.w	r8, #0
 8073e90:	f300 8091 	bgt.w	8073fb6 <_strtod_l+0x886>
 8073e94:	9b08      	ldr	r3, [sp, #32]
 8073e96:	2b00      	cmp	r3, #0
 8073e98:	dd08      	ble.n	8073eac <_strtod_l+0x77c>
 8073e9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8073e9c:	9907      	ldr	r1, [sp, #28]
 8073e9e:	4620      	mov	r0, r4
 8073ea0:	f001 ffe6 	bl	8075e70 <__pow5mult>
 8073ea4:	9007      	str	r0, [sp, #28]
 8073ea6:	2800      	cmp	r0, #0
 8073ea8:	f43f ae8e 	beq.w	8073bc8 <_strtod_l+0x498>
 8073eac:	2f00      	cmp	r7, #0
 8073eae:	dd08      	ble.n	8073ec2 <_strtod_l+0x792>
 8073eb0:	9907      	ldr	r1, [sp, #28]
 8073eb2:	463a      	mov	r2, r7
 8073eb4:	4620      	mov	r0, r4
 8073eb6:	f002 f835 	bl	8075f24 <__lshift>
 8073eba:	9007      	str	r0, [sp, #28]
 8073ebc:	2800      	cmp	r0, #0
 8073ebe:	f43f ae83 	beq.w	8073bc8 <_strtod_l+0x498>
 8073ec2:	f1b9 0f00 	cmp.w	r9, #0
 8073ec6:	dd08      	ble.n	8073eda <_strtod_l+0x7aa>
 8073ec8:	4631      	mov	r1, r6
 8073eca:	464a      	mov	r2, r9
 8073ecc:	4620      	mov	r0, r4
 8073ece:	f002 f829 	bl	8075f24 <__lshift>
 8073ed2:	4606      	mov	r6, r0
 8073ed4:	2800      	cmp	r0, #0
 8073ed6:	f43f ae77 	beq.w	8073bc8 <_strtod_l+0x498>
 8073eda:	9a07      	ldr	r2, [sp, #28]
 8073edc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073ede:	4620      	mov	r0, r4
 8073ee0:	f002 f8a8 	bl	8076034 <__mdiff>
 8073ee4:	4605      	mov	r5, r0
 8073ee6:	2800      	cmp	r0, #0
 8073ee8:	f43f ae6e 	beq.w	8073bc8 <_strtod_l+0x498>
 8073eec:	68c3      	ldr	r3, [r0, #12]
 8073eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8073ef0:	2300      	movs	r3, #0
 8073ef2:	60c3      	str	r3, [r0, #12]
 8073ef4:	4631      	mov	r1, r6
 8073ef6:	f002 f881 	bl	8075ffc <__mcmp>
 8073efa:	2800      	cmp	r0, #0
 8073efc:	da65      	bge.n	8073fca <_strtod_l+0x89a>
 8073efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8073f00:	ea53 030a 	orrs.w	r3, r3, sl
 8073f04:	f040 8087 	bne.w	8074016 <_strtod_l+0x8e6>
 8073f08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8073f0c:	2b00      	cmp	r3, #0
 8073f0e:	f040 8082 	bne.w	8074016 <_strtod_l+0x8e6>
 8073f12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8073f16:	0d1b      	lsrs	r3, r3, #20
 8073f18:	051b      	lsls	r3, r3, #20
 8073f1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8073f1e:	d97a      	bls.n	8074016 <_strtod_l+0x8e6>
 8073f20:	696b      	ldr	r3, [r5, #20]
 8073f22:	b913      	cbnz	r3, 8073f2a <_strtod_l+0x7fa>
 8073f24:	692b      	ldr	r3, [r5, #16]
 8073f26:	2b01      	cmp	r3, #1
 8073f28:	dd75      	ble.n	8074016 <_strtod_l+0x8e6>
 8073f2a:	4629      	mov	r1, r5
 8073f2c:	2201      	movs	r2, #1
 8073f2e:	4620      	mov	r0, r4
 8073f30:	f001 fff8 	bl	8075f24 <__lshift>
 8073f34:	4631      	mov	r1, r6
 8073f36:	4605      	mov	r5, r0
 8073f38:	f002 f860 	bl	8075ffc <__mcmp>
 8073f3c:	2800      	cmp	r0, #0
 8073f3e:	dd6a      	ble.n	8074016 <_strtod_l+0x8e6>
 8073f40:	9904      	ldr	r1, [sp, #16]
 8073f42:	4a55      	ldr	r2, [pc, #340]	; (8074098 <_strtod_l+0x968>)
 8073f44:	465b      	mov	r3, fp
 8073f46:	2900      	cmp	r1, #0
 8073f48:	f000 8085 	beq.w	8074056 <_strtod_l+0x926>
 8073f4c:	ea02 010b 	and.w	r1, r2, fp
 8073f50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8073f54:	dc7f      	bgt.n	8074056 <_strtod_l+0x926>
 8073f56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8073f5a:	f77f aeaa 	ble.w	8073cb2 <_strtod_l+0x582>
 8073f5e:	4a4f      	ldr	r2, [pc, #316]	; (807409c <_strtod_l+0x96c>)
 8073f60:	2300      	movs	r3, #0
 8073f62:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8073f66:	4650      	mov	r0, sl
 8073f68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8073f6c:	4659      	mov	r1, fp
 8073f6e:	f7ec fb5b 	bl	8060628 <__aeabi_dmul>
 8073f72:	460b      	mov	r3, r1
 8073f74:	4303      	orrs	r3, r0
 8073f76:	bf08      	it	eq
 8073f78:	2322      	moveq	r3, #34	; 0x22
 8073f7a:	4682      	mov	sl, r0
 8073f7c:	468b      	mov	fp, r1
 8073f7e:	bf08      	it	eq
 8073f80:	6023      	streq	r3, [r4, #0]
 8073f82:	e62b      	b.n	8073bdc <_strtod_l+0x4ac>
 8073f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8073f88:	fa02 f303 	lsl.w	r3, r2, r3
 8073f8c:	ea03 0a0a 	and.w	sl, r3, sl
 8073f90:	e6de      	b.n	8073d50 <_strtod_l+0x620>
 8073f92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8073f96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8073f9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8073f9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8073fa2:	fa01 f308 	lsl.w	r3, r1, r8
 8073fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8073fa8:	9111      	str	r1, [sp, #68]	; 0x44
 8073faa:	e741      	b.n	8073e30 <_strtod_l+0x700>
 8073fac:	2300      	movs	r3, #0
 8073fae:	930c      	str	r3, [sp, #48]	; 0x30
 8073fb0:	2301      	movs	r3, #1
 8073fb2:	9311      	str	r3, [sp, #68]	; 0x44
 8073fb4:	e73c      	b.n	8073e30 <_strtod_l+0x700>
 8073fb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073fb8:	4642      	mov	r2, r8
 8073fba:	4620      	mov	r0, r4
 8073fbc:	f001 ffb2 	bl	8075f24 <__lshift>
 8073fc0:	901e      	str	r0, [sp, #120]	; 0x78
 8073fc2:	2800      	cmp	r0, #0
 8073fc4:	f47f af66 	bne.w	8073e94 <_strtod_l+0x764>
 8073fc8:	e5fe      	b.n	8073bc8 <_strtod_l+0x498>
 8073fca:	465f      	mov	r7, fp
 8073fcc:	d16e      	bne.n	80740ac <_strtod_l+0x97c>
 8073fce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8073fd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8073fd4:	b342      	cbz	r2, 8074028 <_strtod_l+0x8f8>
 8073fd6:	4a32      	ldr	r2, [pc, #200]	; (80740a0 <_strtod_l+0x970>)
 8073fd8:	4293      	cmp	r3, r2
 8073fda:	d128      	bne.n	807402e <_strtod_l+0x8fe>
 8073fdc:	9b04      	ldr	r3, [sp, #16]
 8073fde:	4650      	mov	r0, sl
 8073fe0:	b1eb      	cbz	r3, 807401e <_strtod_l+0x8ee>
 8073fe2:	4a2d      	ldr	r2, [pc, #180]	; (8074098 <_strtod_l+0x968>)
 8073fe4:	403a      	ands	r2, r7
 8073fe6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8073fea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8073fee:	d819      	bhi.n	8074024 <_strtod_l+0x8f4>
 8073ff0:	0d12      	lsrs	r2, r2, #20
 8073ff2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8073ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8073ffa:	4298      	cmp	r0, r3
 8073ffc:	d117      	bne.n	807402e <_strtod_l+0x8fe>
 8073ffe:	4b29      	ldr	r3, [pc, #164]	; (80740a4 <_strtod_l+0x974>)
 8074000:	429f      	cmp	r7, r3
 8074002:	d102      	bne.n	807400a <_strtod_l+0x8da>
 8074004:	3001      	adds	r0, #1
 8074006:	f43f addf 	beq.w	8073bc8 <_strtod_l+0x498>
 807400a:	4b23      	ldr	r3, [pc, #140]	; (8074098 <_strtod_l+0x968>)
 807400c:	403b      	ands	r3, r7
 807400e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8074012:	f04f 0a00 	mov.w	sl, #0
 8074016:	9b04      	ldr	r3, [sp, #16]
 8074018:	2b00      	cmp	r3, #0
 807401a:	d1a0      	bne.n	8073f5e <_strtod_l+0x82e>
 807401c:	e5de      	b.n	8073bdc <_strtod_l+0x4ac>
 807401e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8074022:	e7ea      	b.n	8073ffa <_strtod_l+0x8ca>
 8074024:	460b      	mov	r3, r1
 8074026:	e7e8      	b.n	8073ffa <_strtod_l+0x8ca>
 8074028:	ea53 030a 	orrs.w	r3, r3, sl
 807402c:	d088      	beq.n	8073f40 <_strtod_l+0x810>
 807402e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8074030:	b1db      	cbz	r3, 807406a <_strtod_l+0x93a>
 8074032:	423b      	tst	r3, r7
 8074034:	d0ef      	beq.n	8074016 <_strtod_l+0x8e6>
 8074036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8074038:	9a04      	ldr	r2, [sp, #16]
 807403a:	4650      	mov	r0, sl
 807403c:	4659      	mov	r1, fp
 807403e:	b1c3      	cbz	r3, 8074072 <_strtod_l+0x942>
 8074040:	f7ff fb57 	bl	80736f2 <sulp>
 8074044:	4602      	mov	r2, r0
 8074046:	460b      	mov	r3, r1
 8074048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 807404c:	f7ec f936 	bl	80602bc <__adddf3>
 8074050:	4682      	mov	sl, r0
 8074052:	468b      	mov	fp, r1
 8074054:	e7df      	b.n	8074016 <_strtod_l+0x8e6>
 8074056:	4013      	ands	r3, r2
 8074058:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 807405c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8074060:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8074064:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8074068:	e7d5      	b.n	8074016 <_strtod_l+0x8e6>
 807406a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 807406c:	ea13 0f0a 	tst.w	r3, sl
 8074070:	e7e0      	b.n	8074034 <_strtod_l+0x904>
 8074072:	f7ff fb3e 	bl	80736f2 <sulp>
 8074076:	4602      	mov	r2, r0
 8074078:	460b      	mov	r3, r1
 807407a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 807407e:	f7ec f91b 	bl	80602b8 <__aeabi_dsub>
 8074082:	2200      	movs	r2, #0
 8074084:	2300      	movs	r3, #0
 8074086:	4682      	mov	sl, r0
 8074088:	468b      	mov	fp, r1
 807408a:	f7ec fd35 	bl	8060af8 <__aeabi_dcmpeq>
 807408e:	2800      	cmp	r0, #0
 8074090:	d0c1      	beq.n	8074016 <_strtod_l+0x8e6>
 8074092:	e60e      	b.n	8073cb2 <_strtod_l+0x582>
 8074094:	fffffc02 	.word	0xfffffc02
 8074098:	7ff00000 	.word	0x7ff00000
 807409c:	39500000 	.word	0x39500000
 80740a0:	000fffff 	.word	0x000fffff
 80740a4:	7fefffff 	.word	0x7fefffff
 80740a8:	08077878 	.word	0x08077878
 80740ac:	4631      	mov	r1, r6
 80740ae:	4628      	mov	r0, r5
 80740b0:	f002 f920 	bl	80762f4 <__ratio>
 80740b4:	ec59 8b10 	vmov	r8, r9, d0
 80740b8:	ee10 0a10 	vmov	r0, s0
 80740bc:	2200      	movs	r2, #0
 80740be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80740c2:	4649      	mov	r1, r9
 80740c4:	f7ec fd2c 	bl	8060b20 <__aeabi_dcmple>
 80740c8:	2800      	cmp	r0, #0
 80740ca:	d07c      	beq.n	80741c6 <_strtod_l+0xa96>
 80740cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80740ce:	2b00      	cmp	r3, #0
 80740d0:	d04c      	beq.n	807416c <_strtod_l+0xa3c>
 80740d2:	4b95      	ldr	r3, [pc, #596]	; (8074328 <_strtod_l+0xbf8>)
 80740d4:	2200      	movs	r2, #0
 80740d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80740da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8074328 <_strtod_l+0xbf8>
 80740de:	f04f 0800 	mov.w	r8, #0
 80740e2:	4b92      	ldr	r3, [pc, #584]	; (807432c <_strtod_l+0xbfc>)
 80740e4:	403b      	ands	r3, r7
 80740e6:	9311      	str	r3, [sp, #68]	; 0x44
 80740e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80740ea:	4b91      	ldr	r3, [pc, #580]	; (8074330 <_strtod_l+0xc00>)
 80740ec:	429a      	cmp	r2, r3
 80740ee:	f040 80b2 	bne.w	8074256 <_strtod_l+0xb26>
 80740f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80740f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80740fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80740fe:	ec4b ab10 	vmov	d0, sl, fp
 8074102:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8074106:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 807410a:	f002 f81b 	bl	8076144 <__ulp>
 807410e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8074112:	ec53 2b10 	vmov	r2, r3, d0
 8074116:	f7ec fa87 	bl	8060628 <__aeabi_dmul>
 807411a:	4652      	mov	r2, sl
 807411c:	465b      	mov	r3, fp
 807411e:	f7ec f8cd 	bl	80602bc <__adddf3>
 8074122:	460b      	mov	r3, r1
 8074124:	4981      	ldr	r1, [pc, #516]	; (807432c <_strtod_l+0xbfc>)
 8074126:	4a83      	ldr	r2, [pc, #524]	; (8074334 <_strtod_l+0xc04>)
 8074128:	4019      	ands	r1, r3
 807412a:	4291      	cmp	r1, r2
 807412c:	4682      	mov	sl, r0
 807412e:	d95e      	bls.n	80741ee <_strtod_l+0xabe>
 8074130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8074132:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8074136:	4293      	cmp	r3, r2
 8074138:	d103      	bne.n	8074142 <_strtod_l+0xa12>
 807413a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 807413c:	3301      	adds	r3, #1
 807413e:	f43f ad43 	beq.w	8073bc8 <_strtod_l+0x498>
 8074142:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8074340 <_strtod_l+0xc10>
 8074146:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 807414a:	991e      	ldr	r1, [sp, #120]	; 0x78
 807414c:	4620      	mov	r0, r4
 807414e:	f001 fccd 	bl	8075aec <_Bfree>
 8074152:	9907      	ldr	r1, [sp, #28]
 8074154:	4620      	mov	r0, r4
 8074156:	f001 fcc9 	bl	8075aec <_Bfree>
 807415a:	4631      	mov	r1, r6
 807415c:	4620      	mov	r0, r4
 807415e:	f001 fcc5 	bl	8075aec <_Bfree>
 8074162:	4629      	mov	r1, r5
 8074164:	4620      	mov	r0, r4
 8074166:	f001 fcc1 	bl	8075aec <_Bfree>
 807416a:	e613      	b.n	8073d94 <_strtod_l+0x664>
 807416c:	f1ba 0f00 	cmp.w	sl, #0
 8074170:	d11b      	bne.n	80741aa <_strtod_l+0xa7a>
 8074172:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8074176:	b9f3      	cbnz	r3, 80741b6 <_strtod_l+0xa86>
 8074178:	4b6b      	ldr	r3, [pc, #428]	; (8074328 <_strtod_l+0xbf8>)
 807417a:	2200      	movs	r2, #0
 807417c:	4640      	mov	r0, r8
 807417e:	4649      	mov	r1, r9
 8074180:	f7ec fcc4 	bl	8060b0c <__aeabi_dcmplt>
 8074184:	b9d0      	cbnz	r0, 80741bc <_strtod_l+0xa8c>
 8074186:	4640      	mov	r0, r8
 8074188:	4649      	mov	r1, r9
 807418a:	4b6b      	ldr	r3, [pc, #428]	; (8074338 <_strtod_l+0xc08>)
 807418c:	2200      	movs	r2, #0
 807418e:	f7ec fa4b 	bl	8060628 <__aeabi_dmul>
 8074192:	4680      	mov	r8, r0
 8074194:	4689      	mov	r9, r1
 8074196:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 807419a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 807419e:	931b      	str	r3, [sp, #108]	; 0x6c
 80741a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80741a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80741a8:	e79b      	b.n	80740e2 <_strtod_l+0x9b2>
 80741aa:	f1ba 0f01 	cmp.w	sl, #1
 80741ae:	d102      	bne.n	80741b6 <_strtod_l+0xa86>
 80741b0:	2f00      	cmp	r7, #0
 80741b2:	f43f ad7e 	beq.w	8073cb2 <_strtod_l+0x582>
 80741b6:	4b61      	ldr	r3, [pc, #388]	; (807433c <_strtod_l+0xc0c>)
 80741b8:	2200      	movs	r2, #0
 80741ba:	e78c      	b.n	80740d6 <_strtod_l+0x9a6>
 80741bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8074338 <_strtod_l+0xc08>
 80741c0:	f04f 0800 	mov.w	r8, #0
 80741c4:	e7e7      	b.n	8074196 <_strtod_l+0xa66>
 80741c6:	4b5c      	ldr	r3, [pc, #368]	; (8074338 <_strtod_l+0xc08>)
 80741c8:	4640      	mov	r0, r8
 80741ca:	4649      	mov	r1, r9
 80741cc:	2200      	movs	r2, #0
 80741ce:	f7ec fa2b 	bl	8060628 <__aeabi_dmul>
 80741d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80741d4:	4680      	mov	r8, r0
 80741d6:	4689      	mov	r9, r1
 80741d8:	b933      	cbnz	r3, 80741e8 <_strtod_l+0xab8>
 80741da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80741de:	9012      	str	r0, [sp, #72]	; 0x48
 80741e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80741e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80741e6:	e7dd      	b.n	80741a4 <_strtod_l+0xa74>
 80741e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80741ec:	e7f9      	b.n	80741e2 <_strtod_l+0xab2>
 80741ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80741f2:	9b04      	ldr	r3, [sp, #16]
 80741f4:	2b00      	cmp	r3, #0
 80741f6:	d1a8      	bne.n	807414a <_strtod_l+0xa1a>
 80741f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80741fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80741fe:	0d1b      	lsrs	r3, r3, #20
 8074200:	051b      	lsls	r3, r3, #20
 8074202:	429a      	cmp	r2, r3
 8074204:	d1a1      	bne.n	807414a <_strtod_l+0xa1a>
 8074206:	4640      	mov	r0, r8
 8074208:	4649      	mov	r1, r9
 807420a:	f7ec fdbd 	bl	8060d88 <__aeabi_d2lz>
 807420e:	f7ec f9dd 	bl	80605cc <__aeabi_l2d>
 8074212:	4602      	mov	r2, r0
 8074214:	460b      	mov	r3, r1
 8074216:	4640      	mov	r0, r8
 8074218:	4649      	mov	r1, r9
 807421a:	f7ec f84d 	bl	80602b8 <__aeabi_dsub>
 807421e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8074220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8074224:	ea43 030a 	orr.w	r3, r3, sl
 8074228:	4313      	orrs	r3, r2
 807422a:	4680      	mov	r8, r0
 807422c:	4689      	mov	r9, r1
 807422e:	d053      	beq.n	80742d8 <_strtod_l+0xba8>
 8074230:	a335      	add	r3, pc, #212	; (adr r3, 8074308 <_strtod_l+0xbd8>)
 8074232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8074236:	f7ec fc69 	bl	8060b0c <__aeabi_dcmplt>
 807423a:	2800      	cmp	r0, #0
 807423c:	f47f acce 	bne.w	8073bdc <_strtod_l+0x4ac>
 8074240:	a333      	add	r3, pc, #204	; (adr r3, 8074310 <_strtod_l+0xbe0>)
 8074242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8074246:	4640      	mov	r0, r8
 8074248:	4649      	mov	r1, r9
 807424a:	f7ec fc7d 	bl	8060b48 <__aeabi_dcmpgt>
 807424e:	2800      	cmp	r0, #0
 8074250:	f43f af7b 	beq.w	807414a <_strtod_l+0xa1a>
 8074254:	e4c2      	b.n	8073bdc <_strtod_l+0x4ac>
 8074256:	9b04      	ldr	r3, [sp, #16]
 8074258:	b333      	cbz	r3, 80742a8 <_strtod_l+0xb78>
 807425a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 807425c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8074260:	d822      	bhi.n	80742a8 <_strtod_l+0xb78>
 8074262:	a32d      	add	r3, pc, #180	; (adr r3, 8074318 <_strtod_l+0xbe8>)
 8074264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8074268:	4640      	mov	r0, r8
 807426a:	4649      	mov	r1, r9
 807426c:	f7ec fc58 	bl	8060b20 <__aeabi_dcmple>
 8074270:	b1a0      	cbz	r0, 807429c <_strtod_l+0xb6c>
 8074272:	4649      	mov	r1, r9
 8074274:	4640      	mov	r0, r8
 8074276:	f7ec fcaf 	bl	8060bd8 <__aeabi_d2uiz>
 807427a:	2801      	cmp	r0, #1
 807427c:	bf38      	it	cc
 807427e:	2001      	movcc	r0, #1
 8074280:	f7ec f958 	bl	8060534 <__aeabi_ui2d>
 8074284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8074286:	4680      	mov	r8, r0
 8074288:	4689      	mov	r9, r1
 807428a:	bb13      	cbnz	r3, 80742d2 <_strtod_l+0xba2>
 807428c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8074290:	9014      	str	r0, [sp, #80]	; 0x50
 8074292:	9315      	str	r3, [sp, #84]	; 0x54
 8074294:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8074298:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 807429c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 807429e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80742a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80742a4:	1a9b      	subs	r3, r3, r2
 80742a6:	930d      	str	r3, [sp, #52]	; 0x34
 80742a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80742ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80742b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80742b4:	f001 ff46 	bl	8076144 <__ulp>
 80742b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80742bc:	ec53 2b10 	vmov	r2, r3, d0
 80742c0:	f7ec f9b2 	bl	8060628 <__aeabi_dmul>
 80742c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80742c8:	f7eb fff8 	bl	80602bc <__adddf3>
 80742cc:	4682      	mov	sl, r0
 80742ce:	468b      	mov	fp, r1
 80742d0:	e78f      	b.n	80741f2 <_strtod_l+0xac2>
 80742d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80742d6:	e7dd      	b.n	8074294 <_strtod_l+0xb64>
 80742d8:	a311      	add	r3, pc, #68	; (adr r3, 8074320 <_strtod_l+0xbf0>)
 80742da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80742de:	f7ec fc15 	bl	8060b0c <__aeabi_dcmplt>
 80742e2:	e7b4      	b.n	807424e <_strtod_l+0xb1e>
 80742e4:	2300      	movs	r3, #0
 80742e6:	930e      	str	r3, [sp, #56]	; 0x38
 80742e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80742ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80742ec:	6013      	str	r3, [r2, #0]
 80742ee:	f7ff ba65 	b.w	80737bc <_strtod_l+0x8c>
 80742f2:	2b65      	cmp	r3, #101	; 0x65
 80742f4:	f43f ab5d 	beq.w	80739b2 <_strtod_l+0x282>
 80742f8:	2b45      	cmp	r3, #69	; 0x45
 80742fa:	f43f ab5a 	beq.w	80739b2 <_strtod_l+0x282>
 80742fe:	2201      	movs	r2, #1
 8074300:	f7ff bb92 	b.w	8073a28 <_strtod_l+0x2f8>
 8074304:	f3af 8000 	nop.w
 8074308:	94a03595 	.word	0x94a03595
 807430c:	3fdfffff 	.word	0x3fdfffff
 8074310:	35afe535 	.word	0x35afe535
 8074314:	3fe00000 	.word	0x3fe00000
 8074318:	ffc00000 	.word	0xffc00000
 807431c:	41dfffff 	.word	0x41dfffff
 8074320:	94a03595 	.word	0x94a03595
 8074324:	3fcfffff 	.word	0x3fcfffff
 8074328:	3ff00000 	.word	0x3ff00000
 807432c:	7ff00000 	.word	0x7ff00000
 8074330:	7fe00000 	.word	0x7fe00000
 8074334:	7c9fffff 	.word	0x7c9fffff
 8074338:	3fe00000 	.word	0x3fe00000
 807433c:	bff00000 	.word	0xbff00000
 8074340:	7fefffff 	.word	0x7fefffff

08074344 <_strtod_r>:
 8074344:	4b01      	ldr	r3, [pc, #4]	; (807434c <_strtod_r+0x8>)
 8074346:	f7ff b9f3 	b.w	8073730 <_strtod_l>
 807434a:	bf00      	nop
 807434c:	20000090 	.word	0x20000090

08074350 <_strtol_l.isra.0>:
 8074350:	2b01      	cmp	r3, #1
 8074352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8074356:	d001      	beq.n	807435c <_strtol_l.isra.0+0xc>
 8074358:	2b24      	cmp	r3, #36	; 0x24
 807435a:	d906      	bls.n	807436a <_strtol_l.isra.0+0x1a>
 807435c:	f7fe f8c6 	bl	80724ec <__errno>
 8074360:	2316      	movs	r3, #22
 8074362:	6003      	str	r3, [r0, #0]
 8074364:	2000      	movs	r0, #0
 8074366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 807436a:	4f3a      	ldr	r7, [pc, #232]	; (8074454 <_strtol_l.isra.0+0x104>)
 807436c:	468e      	mov	lr, r1
 807436e:	4676      	mov	r6, lr
 8074370:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8074374:	5de5      	ldrb	r5, [r4, r7]
 8074376:	f015 0508 	ands.w	r5, r5, #8
 807437a:	d1f8      	bne.n	807436e <_strtol_l.isra.0+0x1e>
 807437c:	2c2d      	cmp	r4, #45	; 0x2d
 807437e:	d134      	bne.n	80743ea <_strtol_l.isra.0+0x9a>
 8074380:	f89e 4000 	ldrb.w	r4, [lr]
 8074384:	f04f 0801 	mov.w	r8, #1
 8074388:	f106 0e02 	add.w	lr, r6, #2
 807438c:	2b00      	cmp	r3, #0
 807438e:	d05c      	beq.n	807444a <_strtol_l.isra.0+0xfa>
 8074390:	2b10      	cmp	r3, #16
 8074392:	d10c      	bne.n	80743ae <_strtol_l.isra.0+0x5e>
 8074394:	2c30      	cmp	r4, #48	; 0x30
 8074396:	d10a      	bne.n	80743ae <_strtol_l.isra.0+0x5e>
 8074398:	f89e 4000 	ldrb.w	r4, [lr]
 807439c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80743a0:	2c58      	cmp	r4, #88	; 0x58
 80743a2:	d14d      	bne.n	8074440 <_strtol_l.isra.0+0xf0>
 80743a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80743a8:	2310      	movs	r3, #16
 80743aa:	f10e 0e02 	add.w	lr, lr, #2
 80743ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80743b2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80743b6:	2600      	movs	r6, #0
 80743b8:	fbbc f9f3 	udiv	r9, ip, r3
 80743bc:	4635      	mov	r5, r6
 80743be:	fb03 ca19 	mls	sl, r3, r9, ip
 80743c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80743c6:	2f09      	cmp	r7, #9
 80743c8:	d818      	bhi.n	80743fc <_strtol_l.isra.0+0xac>
 80743ca:	463c      	mov	r4, r7
 80743cc:	42a3      	cmp	r3, r4
 80743ce:	dd24      	ble.n	807441a <_strtol_l.isra.0+0xca>
 80743d0:	2e00      	cmp	r6, #0
 80743d2:	db1f      	blt.n	8074414 <_strtol_l.isra.0+0xc4>
 80743d4:	45a9      	cmp	r9, r5
 80743d6:	d31d      	bcc.n	8074414 <_strtol_l.isra.0+0xc4>
 80743d8:	d101      	bne.n	80743de <_strtol_l.isra.0+0x8e>
 80743da:	45a2      	cmp	sl, r4
 80743dc:	db1a      	blt.n	8074414 <_strtol_l.isra.0+0xc4>
 80743de:	fb05 4503 	mla	r5, r5, r3, r4
 80743e2:	2601      	movs	r6, #1
 80743e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80743e8:	e7eb      	b.n	80743c2 <_strtol_l.isra.0+0x72>
 80743ea:	2c2b      	cmp	r4, #43	; 0x2b
 80743ec:	bf08      	it	eq
 80743ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80743f2:	46a8      	mov	r8, r5
 80743f4:	bf08      	it	eq
 80743f6:	f106 0e02 	addeq.w	lr, r6, #2
 80743fa:	e7c7      	b.n	807438c <_strtol_l.isra.0+0x3c>
 80743fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8074400:	2f19      	cmp	r7, #25
 8074402:	d801      	bhi.n	8074408 <_strtol_l.isra.0+0xb8>
 8074404:	3c37      	subs	r4, #55	; 0x37
 8074406:	e7e1      	b.n	80743cc <_strtol_l.isra.0+0x7c>
 8074408:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 807440c:	2f19      	cmp	r7, #25
 807440e:	d804      	bhi.n	807441a <_strtol_l.isra.0+0xca>
 8074410:	3c57      	subs	r4, #87	; 0x57
 8074412:	e7db      	b.n	80743cc <_strtol_l.isra.0+0x7c>
 8074414:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8074418:	e7e4      	b.n	80743e4 <_strtol_l.isra.0+0x94>
 807441a:	2e00      	cmp	r6, #0
 807441c:	da05      	bge.n	807442a <_strtol_l.isra.0+0xda>
 807441e:	2322      	movs	r3, #34	; 0x22
 8074420:	6003      	str	r3, [r0, #0]
 8074422:	4665      	mov	r5, ip
 8074424:	b942      	cbnz	r2, 8074438 <_strtol_l.isra.0+0xe8>
 8074426:	4628      	mov	r0, r5
 8074428:	e79d      	b.n	8074366 <_strtol_l.isra.0+0x16>
 807442a:	f1b8 0f00 	cmp.w	r8, #0
 807442e:	d000      	beq.n	8074432 <_strtol_l.isra.0+0xe2>
 8074430:	426d      	negs	r5, r5
 8074432:	2a00      	cmp	r2, #0
 8074434:	d0f7      	beq.n	8074426 <_strtol_l.isra.0+0xd6>
 8074436:	b10e      	cbz	r6, 807443c <_strtol_l.isra.0+0xec>
 8074438:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 807443c:	6011      	str	r1, [r2, #0]
 807443e:	e7f2      	b.n	8074426 <_strtol_l.isra.0+0xd6>
 8074440:	2430      	movs	r4, #48	; 0x30
 8074442:	2b00      	cmp	r3, #0
 8074444:	d1b3      	bne.n	80743ae <_strtol_l.isra.0+0x5e>
 8074446:	2308      	movs	r3, #8
 8074448:	e7b1      	b.n	80743ae <_strtol_l.isra.0+0x5e>
 807444a:	2c30      	cmp	r4, #48	; 0x30
 807444c:	d0a4      	beq.n	8074398 <_strtol_l.isra.0+0x48>
 807444e:	230a      	movs	r3, #10
 8074450:	e7ad      	b.n	80743ae <_strtol_l.isra.0+0x5e>
 8074452:	bf00      	nop
 8074454:	080778a1 	.word	0x080778a1

08074458 <_strtol_r>:
 8074458:	f7ff bf7a 	b.w	8074350 <_strtol_l.isra.0>

0807445c <_write_r>:
 807445c:	b538      	push	{r3, r4, r5, lr}
 807445e:	4d07      	ldr	r5, [pc, #28]	; (807447c <_write_r+0x20>)
 8074460:	4604      	mov	r4, r0
 8074462:	4608      	mov	r0, r1
 8074464:	4611      	mov	r1, r2
 8074466:	2200      	movs	r2, #0
 8074468:	602a      	str	r2, [r5, #0]
 807446a:	461a      	mov	r2, r3
 807446c:	f7ef f8a3 	bl	80635b6 <_write>
 8074470:	1c43      	adds	r3, r0, #1
 8074472:	d102      	bne.n	807447a <_write_r+0x1e>
 8074474:	682b      	ldr	r3, [r5, #0]
 8074476:	b103      	cbz	r3, 807447a <_write_r+0x1e>
 8074478:	6023      	str	r3, [r4, #0]
 807447a:	bd38      	pop	{r3, r4, r5, pc}
 807447c:	20005d30 	.word	0x20005d30

08074480 <_close_r>:
 8074480:	b538      	push	{r3, r4, r5, lr}
 8074482:	4d06      	ldr	r5, [pc, #24]	; (807449c <_close_r+0x1c>)
 8074484:	2300      	movs	r3, #0
 8074486:	4604      	mov	r4, r0
 8074488:	4608      	mov	r0, r1
 807448a:	602b      	str	r3, [r5, #0]
 807448c:	f7ef f8af 	bl	80635ee <_close>
 8074490:	1c43      	adds	r3, r0, #1
 8074492:	d102      	bne.n	807449a <_close_r+0x1a>
 8074494:	682b      	ldr	r3, [r5, #0]
 8074496:	b103      	cbz	r3, 807449a <_close_r+0x1a>
 8074498:	6023      	str	r3, [r4, #0]
 807449a:	bd38      	pop	{r3, r4, r5, pc}
 807449c:	20005d30 	.word	0x20005d30

080744a0 <quorem>:
 80744a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80744a4:	6903      	ldr	r3, [r0, #16]
 80744a6:	690c      	ldr	r4, [r1, #16]
 80744a8:	42a3      	cmp	r3, r4
 80744aa:	4607      	mov	r7, r0
 80744ac:	f2c0 8081 	blt.w	80745b2 <quorem+0x112>
 80744b0:	3c01      	subs	r4, #1
 80744b2:	f101 0814 	add.w	r8, r1, #20
 80744b6:	f100 0514 	add.w	r5, r0, #20
 80744ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80744be:	9301      	str	r3, [sp, #4]
 80744c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80744c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80744c8:	3301      	adds	r3, #1
 80744ca:	429a      	cmp	r2, r3
 80744cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80744d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80744d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80744d8:	d331      	bcc.n	807453e <quorem+0x9e>
 80744da:	f04f 0e00 	mov.w	lr, #0
 80744de:	4640      	mov	r0, r8
 80744e0:	46ac      	mov	ip, r5
 80744e2:	46f2      	mov	sl, lr
 80744e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80744e8:	b293      	uxth	r3, r2
 80744ea:	fb06 e303 	mla	r3, r6, r3, lr
 80744ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80744f2:	b29b      	uxth	r3, r3
 80744f4:	ebaa 0303 	sub.w	r3, sl, r3
 80744f8:	0c12      	lsrs	r2, r2, #16
 80744fa:	f8dc a000 	ldr.w	sl, [ip]
 80744fe:	fb06 e202 	mla	r2, r6, r2, lr
 8074502:	fa13 f38a 	uxtah	r3, r3, sl
 8074506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 807450a:	fa1f fa82 	uxth.w	sl, r2
 807450e:	f8dc 2000 	ldr.w	r2, [ip]
 8074512:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8074516:	eb02 4223 	add.w	r2, r2, r3, asr #16
 807451a:	b29b      	uxth	r3, r3
 807451c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8074520:	4581      	cmp	r9, r0
 8074522:	f84c 3b04 	str.w	r3, [ip], #4
 8074526:	ea4f 4a22 	mov.w	sl, r2, asr #16
 807452a:	d2db      	bcs.n	80744e4 <quorem+0x44>
 807452c:	f855 300b 	ldr.w	r3, [r5, fp]
 8074530:	b92b      	cbnz	r3, 807453e <quorem+0x9e>
 8074532:	9b01      	ldr	r3, [sp, #4]
 8074534:	3b04      	subs	r3, #4
 8074536:	429d      	cmp	r5, r3
 8074538:	461a      	mov	r2, r3
 807453a:	d32e      	bcc.n	807459a <quorem+0xfa>
 807453c:	613c      	str	r4, [r7, #16]
 807453e:	4638      	mov	r0, r7
 8074540:	f001 fd5c 	bl	8075ffc <__mcmp>
 8074544:	2800      	cmp	r0, #0
 8074546:	db24      	blt.n	8074592 <quorem+0xf2>
 8074548:	3601      	adds	r6, #1
 807454a:	4628      	mov	r0, r5
 807454c:	f04f 0c00 	mov.w	ip, #0
 8074550:	f858 2b04 	ldr.w	r2, [r8], #4
 8074554:	f8d0 e000 	ldr.w	lr, [r0]
 8074558:	b293      	uxth	r3, r2
 807455a:	ebac 0303 	sub.w	r3, ip, r3
 807455e:	0c12      	lsrs	r2, r2, #16
 8074560:	fa13 f38e 	uxtah	r3, r3, lr
 8074564:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8074568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 807456c:	b29b      	uxth	r3, r3
 807456e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8074572:	45c1      	cmp	r9, r8
 8074574:	f840 3b04 	str.w	r3, [r0], #4
 8074578:	ea4f 4c22 	mov.w	ip, r2, asr #16
 807457c:	d2e8      	bcs.n	8074550 <quorem+0xb0>
 807457e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8074582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8074586:	b922      	cbnz	r2, 8074592 <quorem+0xf2>
 8074588:	3b04      	subs	r3, #4
 807458a:	429d      	cmp	r5, r3
 807458c:	461a      	mov	r2, r3
 807458e:	d30a      	bcc.n	80745a6 <quorem+0x106>
 8074590:	613c      	str	r4, [r7, #16]
 8074592:	4630      	mov	r0, r6
 8074594:	b003      	add	sp, #12
 8074596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 807459a:	6812      	ldr	r2, [r2, #0]
 807459c:	3b04      	subs	r3, #4
 807459e:	2a00      	cmp	r2, #0
 80745a0:	d1cc      	bne.n	807453c <quorem+0x9c>
 80745a2:	3c01      	subs	r4, #1
 80745a4:	e7c7      	b.n	8074536 <quorem+0x96>
 80745a6:	6812      	ldr	r2, [r2, #0]
 80745a8:	3b04      	subs	r3, #4
 80745aa:	2a00      	cmp	r2, #0
 80745ac:	d1f0      	bne.n	8074590 <quorem+0xf0>
 80745ae:	3c01      	subs	r4, #1
 80745b0:	e7eb      	b.n	807458a <quorem+0xea>
 80745b2:	2000      	movs	r0, #0
 80745b4:	e7ee      	b.n	8074594 <quorem+0xf4>
	...

080745b8 <_dtoa_r>:
 80745b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80745bc:	ed2d 8b02 	vpush	{d8}
 80745c0:	ec57 6b10 	vmov	r6, r7, d0
 80745c4:	b095      	sub	sp, #84	; 0x54
 80745c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80745c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80745cc:	9105      	str	r1, [sp, #20]
 80745ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80745d2:	4604      	mov	r4, r0
 80745d4:	9209      	str	r2, [sp, #36]	; 0x24
 80745d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80745d8:	b975      	cbnz	r5, 80745f8 <_dtoa_r+0x40>
 80745da:	2010      	movs	r0, #16
 80745dc:	f001 fa20 	bl	8075a20 <malloc>
 80745e0:	4602      	mov	r2, r0
 80745e2:	6260      	str	r0, [r4, #36]	; 0x24
 80745e4:	b920      	cbnz	r0, 80745f0 <_dtoa_r+0x38>
 80745e6:	4bb2      	ldr	r3, [pc, #712]	; (80748b0 <_dtoa_r+0x2f8>)
 80745e8:	21ea      	movs	r1, #234	; 0xea
 80745ea:	48b2      	ldr	r0, [pc, #712]	; (80748b4 <_dtoa_r+0x2fc>)
 80745ec:	f002 faf6 	bl	8076bdc <__assert_func>
 80745f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80745f4:	6005      	str	r5, [r0, #0]
 80745f6:	60c5      	str	r5, [r0, #12]
 80745f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80745fa:	6819      	ldr	r1, [r3, #0]
 80745fc:	b151      	cbz	r1, 8074614 <_dtoa_r+0x5c>
 80745fe:	685a      	ldr	r2, [r3, #4]
 8074600:	604a      	str	r2, [r1, #4]
 8074602:	2301      	movs	r3, #1
 8074604:	4093      	lsls	r3, r2
 8074606:	608b      	str	r3, [r1, #8]
 8074608:	4620      	mov	r0, r4
 807460a:	f001 fa6f 	bl	8075aec <_Bfree>
 807460e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8074610:	2200      	movs	r2, #0
 8074612:	601a      	str	r2, [r3, #0]
 8074614:	1e3b      	subs	r3, r7, #0
 8074616:	bfb9      	ittee	lt
 8074618:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 807461c:	9303      	strlt	r3, [sp, #12]
 807461e:	2300      	movge	r3, #0
 8074620:	f8c8 3000 	strge.w	r3, [r8]
 8074624:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8074628:	4ba3      	ldr	r3, [pc, #652]	; (80748b8 <_dtoa_r+0x300>)
 807462a:	bfbc      	itt	lt
 807462c:	2201      	movlt	r2, #1
 807462e:	f8c8 2000 	strlt.w	r2, [r8]
 8074632:	ea33 0309 	bics.w	r3, r3, r9
 8074636:	d11b      	bne.n	8074670 <_dtoa_r+0xb8>
 8074638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 807463a:	f242 730f 	movw	r3, #9999	; 0x270f
 807463e:	6013      	str	r3, [r2, #0]
 8074640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8074644:	4333      	orrs	r3, r6
 8074646:	f000 857a 	beq.w	807513e <_dtoa_r+0xb86>
 807464a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 807464c:	b963      	cbnz	r3, 8074668 <_dtoa_r+0xb0>
 807464e:	4b9b      	ldr	r3, [pc, #620]	; (80748bc <_dtoa_r+0x304>)
 8074650:	e024      	b.n	807469c <_dtoa_r+0xe4>
 8074652:	4b9b      	ldr	r3, [pc, #620]	; (80748c0 <_dtoa_r+0x308>)
 8074654:	9300      	str	r3, [sp, #0]
 8074656:	3308      	adds	r3, #8
 8074658:	9a21      	ldr	r2, [sp, #132]	; 0x84
 807465a:	6013      	str	r3, [r2, #0]
 807465c:	9800      	ldr	r0, [sp, #0]
 807465e:	b015      	add	sp, #84	; 0x54
 8074660:	ecbd 8b02 	vpop	{d8}
 8074664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8074668:	4b94      	ldr	r3, [pc, #592]	; (80748bc <_dtoa_r+0x304>)
 807466a:	9300      	str	r3, [sp, #0]
 807466c:	3303      	adds	r3, #3
 807466e:	e7f3      	b.n	8074658 <_dtoa_r+0xa0>
 8074670:	ed9d 7b02 	vldr	d7, [sp, #8]
 8074674:	2200      	movs	r2, #0
 8074676:	ec51 0b17 	vmov	r0, r1, d7
 807467a:	2300      	movs	r3, #0
 807467c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8074680:	f7ec fa3a 	bl	8060af8 <__aeabi_dcmpeq>
 8074684:	4680      	mov	r8, r0
 8074686:	b158      	cbz	r0, 80746a0 <_dtoa_r+0xe8>
 8074688:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 807468a:	2301      	movs	r3, #1
 807468c:	6013      	str	r3, [r2, #0]
 807468e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8074690:	2b00      	cmp	r3, #0
 8074692:	f000 8551 	beq.w	8075138 <_dtoa_r+0xb80>
 8074696:	488b      	ldr	r0, [pc, #556]	; (80748c4 <_dtoa_r+0x30c>)
 8074698:	6018      	str	r0, [r3, #0]
 807469a:	1e43      	subs	r3, r0, #1
 807469c:	9300      	str	r3, [sp, #0]
 807469e:	e7dd      	b.n	807465c <_dtoa_r+0xa4>
 80746a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80746a4:	aa12      	add	r2, sp, #72	; 0x48
 80746a6:	a913      	add	r1, sp, #76	; 0x4c
 80746a8:	4620      	mov	r0, r4
 80746aa:	f001 fdc7 	bl	807623c <__d2b>
 80746ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80746b2:	4683      	mov	fp, r0
 80746b4:	2d00      	cmp	r5, #0
 80746b6:	d07c      	beq.n	80747b2 <_dtoa_r+0x1fa>
 80746b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80746ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80746be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80746c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80746c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80746ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80746ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80746d2:	4b7d      	ldr	r3, [pc, #500]	; (80748c8 <_dtoa_r+0x310>)
 80746d4:	2200      	movs	r2, #0
 80746d6:	4630      	mov	r0, r6
 80746d8:	4639      	mov	r1, r7
 80746da:	f7eb fded 	bl	80602b8 <__aeabi_dsub>
 80746de:	a36e      	add	r3, pc, #440	; (adr r3, 8074898 <_dtoa_r+0x2e0>)
 80746e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80746e4:	f7eb ffa0 	bl	8060628 <__aeabi_dmul>
 80746e8:	a36d      	add	r3, pc, #436	; (adr r3, 80748a0 <_dtoa_r+0x2e8>)
 80746ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80746ee:	f7eb fde5 	bl	80602bc <__adddf3>
 80746f2:	4606      	mov	r6, r0
 80746f4:	4628      	mov	r0, r5
 80746f6:	460f      	mov	r7, r1
 80746f8:	f7eb ff2c 	bl	8060554 <__aeabi_i2d>
 80746fc:	a36a      	add	r3, pc, #424	; (adr r3, 80748a8 <_dtoa_r+0x2f0>)
 80746fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8074702:	f7eb ff91 	bl	8060628 <__aeabi_dmul>
 8074706:	4602      	mov	r2, r0
 8074708:	460b      	mov	r3, r1
 807470a:	4630      	mov	r0, r6
 807470c:	4639      	mov	r1, r7
 807470e:	f7eb fdd5 	bl	80602bc <__adddf3>
 8074712:	4606      	mov	r6, r0
 8074714:	460f      	mov	r7, r1
 8074716:	f7ec fa37 	bl	8060b88 <__aeabi_d2iz>
 807471a:	2200      	movs	r2, #0
 807471c:	4682      	mov	sl, r0
 807471e:	2300      	movs	r3, #0
 8074720:	4630      	mov	r0, r6
 8074722:	4639      	mov	r1, r7
 8074724:	f7ec f9f2 	bl	8060b0c <__aeabi_dcmplt>
 8074728:	b148      	cbz	r0, 807473e <_dtoa_r+0x186>
 807472a:	4650      	mov	r0, sl
 807472c:	f7eb ff12 	bl	8060554 <__aeabi_i2d>
 8074730:	4632      	mov	r2, r6
 8074732:	463b      	mov	r3, r7
 8074734:	f7ec f9e0 	bl	8060af8 <__aeabi_dcmpeq>
 8074738:	b908      	cbnz	r0, 807473e <_dtoa_r+0x186>
 807473a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 807473e:	f1ba 0f16 	cmp.w	sl, #22
 8074742:	d854      	bhi.n	80747ee <_dtoa_r+0x236>
 8074744:	4b61      	ldr	r3, [pc, #388]	; (80748cc <_dtoa_r+0x314>)
 8074746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 807474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 807474e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8074752:	f7ec f9db 	bl	8060b0c <__aeabi_dcmplt>
 8074756:	2800      	cmp	r0, #0
 8074758:	d04b      	beq.n	80747f2 <_dtoa_r+0x23a>
 807475a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 807475e:	2300      	movs	r3, #0
 8074760:	930e      	str	r3, [sp, #56]	; 0x38
 8074762:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8074764:	1b5d      	subs	r5, r3, r5
 8074766:	1e6b      	subs	r3, r5, #1
 8074768:	9304      	str	r3, [sp, #16]
 807476a:	bf43      	ittte	mi
 807476c:	2300      	movmi	r3, #0
 807476e:	f1c5 0801 	rsbmi	r8, r5, #1
 8074772:	9304      	strmi	r3, [sp, #16]
 8074774:	f04f 0800 	movpl.w	r8, #0
 8074778:	f1ba 0f00 	cmp.w	sl, #0
 807477c:	db3b      	blt.n	80747f6 <_dtoa_r+0x23e>
 807477e:	9b04      	ldr	r3, [sp, #16]
 8074780:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8074784:	4453      	add	r3, sl
 8074786:	9304      	str	r3, [sp, #16]
 8074788:	2300      	movs	r3, #0
 807478a:	9306      	str	r3, [sp, #24]
 807478c:	9b05      	ldr	r3, [sp, #20]
 807478e:	2b09      	cmp	r3, #9
 8074790:	d869      	bhi.n	8074866 <_dtoa_r+0x2ae>
 8074792:	2b05      	cmp	r3, #5
 8074794:	bfc4      	itt	gt
 8074796:	3b04      	subgt	r3, #4
 8074798:	9305      	strgt	r3, [sp, #20]
 807479a:	9b05      	ldr	r3, [sp, #20]
 807479c:	f1a3 0302 	sub.w	r3, r3, #2
 80747a0:	bfcc      	ite	gt
 80747a2:	2500      	movgt	r5, #0
 80747a4:	2501      	movle	r5, #1
 80747a6:	2b03      	cmp	r3, #3
 80747a8:	d869      	bhi.n	807487e <_dtoa_r+0x2c6>
 80747aa:	e8df f003 	tbb	[pc, r3]
 80747ae:	4e2c      	.short	0x4e2c
 80747b0:	5a4c      	.short	0x5a4c
 80747b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80747b6:	441d      	add	r5, r3
 80747b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80747bc:	2b20      	cmp	r3, #32
 80747be:	bfc1      	itttt	gt
 80747c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80747c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80747c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80747cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80747d0:	bfda      	itte	le
 80747d2:	f1c3 0320 	rsble	r3, r3, #32
 80747d6:	fa06 f003 	lslle.w	r0, r6, r3
 80747da:	4318      	orrgt	r0, r3
 80747dc:	f7eb feaa 	bl	8060534 <__aeabi_ui2d>
 80747e0:	2301      	movs	r3, #1
 80747e2:	4606      	mov	r6, r0
 80747e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80747e8:	3d01      	subs	r5, #1
 80747ea:	9310      	str	r3, [sp, #64]	; 0x40
 80747ec:	e771      	b.n	80746d2 <_dtoa_r+0x11a>
 80747ee:	2301      	movs	r3, #1
 80747f0:	e7b6      	b.n	8074760 <_dtoa_r+0x1a8>
 80747f2:	900e      	str	r0, [sp, #56]	; 0x38
 80747f4:	e7b5      	b.n	8074762 <_dtoa_r+0x1aa>
 80747f6:	f1ca 0300 	rsb	r3, sl, #0
 80747fa:	9306      	str	r3, [sp, #24]
 80747fc:	2300      	movs	r3, #0
 80747fe:	eba8 080a 	sub.w	r8, r8, sl
 8074802:	930d      	str	r3, [sp, #52]	; 0x34
 8074804:	e7c2      	b.n	807478c <_dtoa_r+0x1d4>
 8074806:	2300      	movs	r3, #0
 8074808:	9308      	str	r3, [sp, #32]
 807480a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 807480c:	2b00      	cmp	r3, #0
 807480e:	dc39      	bgt.n	8074884 <_dtoa_r+0x2cc>
 8074810:	f04f 0901 	mov.w	r9, #1
 8074814:	f8cd 9004 	str.w	r9, [sp, #4]
 8074818:	464b      	mov	r3, r9
 807481a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 807481e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8074820:	2200      	movs	r2, #0
 8074822:	6042      	str	r2, [r0, #4]
 8074824:	2204      	movs	r2, #4
 8074826:	f102 0614 	add.w	r6, r2, #20
 807482a:	429e      	cmp	r6, r3
 807482c:	6841      	ldr	r1, [r0, #4]
 807482e:	d92f      	bls.n	8074890 <_dtoa_r+0x2d8>
 8074830:	4620      	mov	r0, r4
 8074832:	f001 f91b 	bl	8075a6c <_Balloc>
 8074836:	9000      	str	r0, [sp, #0]
 8074838:	2800      	cmp	r0, #0
 807483a:	d14b      	bne.n	80748d4 <_dtoa_r+0x31c>
 807483c:	4b24      	ldr	r3, [pc, #144]	; (80748d0 <_dtoa_r+0x318>)
 807483e:	4602      	mov	r2, r0
 8074840:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8074844:	e6d1      	b.n	80745ea <_dtoa_r+0x32>
 8074846:	2301      	movs	r3, #1
 8074848:	e7de      	b.n	8074808 <_dtoa_r+0x250>
 807484a:	2300      	movs	r3, #0
 807484c:	9308      	str	r3, [sp, #32]
 807484e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8074850:	eb0a 0903 	add.w	r9, sl, r3
 8074854:	f109 0301 	add.w	r3, r9, #1
 8074858:	2b01      	cmp	r3, #1
 807485a:	9301      	str	r3, [sp, #4]
 807485c:	bfb8      	it	lt
 807485e:	2301      	movlt	r3, #1
 8074860:	e7dd      	b.n	807481e <_dtoa_r+0x266>
 8074862:	2301      	movs	r3, #1
 8074864:	e7f2      	b.n	807484c <_dtoa_r+0x294>
 8074866:	2501      	movs	r5, #1
 8074868:	2300      	movs	r3, #0
 807486a:	9305      	str	r3, [sp, #20]
 807486c:	9508      	str	r5, [sp, #32]
 807486e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8074872:	2200      	movs	r2, #0
 8074874:	f8cd 9004 	str.w	r9, [sp, #4]
 8074878:	2312      	movs	r3, #18
 807487a:	9209      	str	r2, [sp, #36]	; 0x24
 807487c:	e7cf      	b.n	807481e <_dtoa_r+0x266>
 807487e:	2301      	movs	r3, #1
 8074880:	9308      	str	r3, [sp, #32]
 8074882:	e7f4      	b.n	807486e <_dtoa_r+0x2b6>
 8074884:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8074888:	f8cd 9004 	str.w	r9, [sp, #4]
 807488c:	464b      	mov	r3, r9
 807488e:	e7c6      	b.n	807481e <_dtoa_r+0x266>
 8074890:	3101      	adds	r1, #1
 8074892:	6041      	str	r1, [r0, #4]
 8074894:	0052      	lsls	r2, r2, #1
 8074896:	e7c6      	b.n	8074826 <_dtoa_r+0x26e>
 8074898:	636f4361 	.word	0x636f4361
 807489c:	3fd287a7 	.word	0x3fd287a7
 80748a0:	8b60c8b3 	.word	0x8b60c8b3
 80748a4:	3fc68a28 	.word	0x3fc68a28
 80748a8:	509f79fb 	.word	0x509f79fb
 80748ac:	3fd34413 	.word	0x3fd34413
 80748b0:	080779ae 	.word	0x080779ae
 80748b4:	080779c5 	.word	0x080779c5
 80748b8:	7ff00000 	.word	0x7ff00000
 80748bc:	080779aa 	.word	0x080779aa
 80748c0:	080779a1 	.word	0x080779a1
 80748c4:	08077825 	.word	0x08077825
 80748c8:	3ff80000 	.word	0x3ff80000
 80748cc:	08077b40 	.word	0x08077b40
 80748d0:	08077a24 	.word	0x08077a24
 80748d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80748d6:	9a00      	ldr	r2, [sp, #0]
 80748d8:	601a      	str	r2, [r3, #0]
 80748da:	9b01      	ldr	r3, [sp, #4]
 80748dc:	2b0e      	cmp	r3, #14
 80748de:	f200 80ad 	bhi.w	8074a3c <_dtoa_r+0x484>
 80748e2:	2d00      	cmp	r5, #0
 80748e4:	f000 80aa 	beq.w	8074a3c <_dtoa_r+0x484>
 80748e8:	f1ba 0f00 	cmp.w	sl, #0
 80748ec:	dd36      	ble.n	807495c <_dtoa_r+0x3a4>
 80748ee:	4ac3      	ldr	r2, [pc, #780]	; (8074bfc <_dtoa_r+0x644>)
 80748f0:	f00a 030f 	and.w	r3, sl, #15
 80748f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80748f8:	ed93 7b00 	vldr	d7, [r3]
 80748fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8074900:	ea4f 172a 	mov.w	r7, sl, asr #4
 8074904:	eeb0 8a47 	vmov.f32	s16, s14
 8074908:	eef0 8a67 	vmov.f32	s17, s15
 807490c:	d016      	beq.n	807493c <_dtoa_r+0x384>
 807490e:	4bbc      	ldr	r3, [pc, #752]	; (8074c00 <_dtoa_r+0x648>)
 8074910:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8074914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8074918:	f7eb ffb0 	bl	806087c <__aeabi_ddiv>
 807491c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8074920:	f007 070f 	and.w	r7, r7, #15
 8074924:	2503      	movs	r5, #3
 8074926:	4eb6      	ldr	r6, [pc, #728]	; (8074c00 <_dtoa_r+0x648>)
 8074928:	b957      	cbnz	r7, 8074940 <_dtoa_r+0x388>
 807492a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 807492e:	ec53 2b18 	vmov	r2, r3, d8
 8074932:	f7eb ffa3 	bl	806087c <__aeabi_ddiv>
 8074936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 807493a:	e029      	b.n	8074990 <_dtoa_r+0x3d8>
 807493c:	2502      	movs	r5, #2
 807493e:	e7f2      	b.n	8074926 <_dtoa_r+0x36e>
 8074940:	07f9      	lsls	r1, r7, #31
 8074942:	d508      	bpl.n	8074956 <_dtoa_r+0x39e>
 8074944:	ec51 0b18 	vmov	r0, r1, d8
 8074948:	e9d6 2300 	ldrd	r2, r3, [r6]
 807494c:	f7eb fe6c 	bl	8060628 <__aeabi_dmul>
 8074950:	ec41 0b18 	vmov	d8, r0, r1
 8074954:	3501      	adds	r5, #1
 8074956:	107f      	asrs	r7, r7, #1
 8074958:	3608      	adds	r6, #8
 807495a:	e7e5      	b.n	8074928 <_dtoa_r+0x370>
 807495c:	f000 80a6 	beq.w	8074aac <_dtoa_r+0x4f4>
 8074960:	f1ca 0600 	rsb	r6, sl, #0
 8074964:	4ba5      	ldr	r3, [pc, #660]	; (8074bfc <_dtoa_r+0x644>)
 8074966:	4fa6      	ldr	r7, [pc, #664]	; (8074c00 <_dtoa_r+0x648>)
 8074968:	f006 020f 	and.w	r2, r6, #15
 807496c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8074970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8074974:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8074978:	f7eb fe56 	bl	8060628 <__aeabi_dmul>
 807497c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8074980:	1136      	asrs	r6, r6, #4
 8074982:	2300      	movs	r3, #0
 8074984:	2502      	movs	r5, #2
 8074986:	2e00      	cmp	r6, #0
 8074988:	f040 8085 	bne.w	8074a96 <_dtoa_r+0x4de>
 807498c:	2b00      	cmp	r3, #0
 807498e:	d1d2      	bne.n	8074936 <_dtoa_r+0x37e>
 8074990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8074992:	2b00      	cmp	r3, #0
 8074994:	f000 808c 	beq.w	8074ab0 <_dtoa_r+0x4f8>
 8074998:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 807499c:	4b99      	ldr	r3, [pc, #612]	; (8074c04 <_dtoa_r+0x64c>)
 807499e:	2200      	movs	r2, #0
 80749a0:	4630      	mov	r0, r6
 80749a2:	4639      	mov	r1, r7
 80749a4:	f7ec f8b2 	bl	8060b0c <__aeabi_dcmplt>
 80749a8:	2800      	cmp	r0, #0
 80749aa:	f000 8081 	beq.w	8074ab0 <_dtoa_r+0x4f8>
 80749ae:	9b01      	ldr	r3, [sp, #4]
 80749b0:	2b00      	cmp	r3, #0
 80749b2:	d07d      	beq.n	8074ab0 <_dtoa_r+0x4f8>
 80749b4:	f1b9 0f00 	cmp.w	r9, #0
 80749b8:	dd3c      	ble.n	8074a34 <_dtoa_r+0x47c>
 80749ba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80749be:	9307      	str	r3, [sp, #28]
 80749c0:	2200      	movs	r2, #0
 80749c2:	4b91      	ldr	r3, [pc, #580]	; (8074c08 <_dtoa_r+0x650>)
 80749c4:	4630      	mov	r0, r6
 80749c6:	4639      	mov	r1, r7
 80749c8:	f7eb fe2e 	bl	8060628 <__aeabi_dmul>
 80749cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80749d0:	3501      	adds	r5, #1
 80749d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80749d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80749da:	4628      	mov	r0, r5
 80749dc:	f7eb fdba 	bl	8060554 <__aeabi_i2d>
 80749e0:	4632      	mov	r2, r6
 80749e2:	463b      	mov	r3, r7
 80749e4:	f7eb fe20 	bl	8060628 <__aeabi_dmul>
 80749e8:	4b88      	ldr	r3, [pc, #544]	; (8074c0c <_dtoa_r+0x654>)
 80749ea:	2200      	movs	r2, #0
 80749ec:	f7eb fc66 	bl	80602bc <__adddf3>
 80749f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80749f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80749f8:	9303      	str	r3, [sp, #12]
 80749fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80749fc:	2b00      	cmp	r3, #0
 80749fe:	d15c      	bne.n	8074aba <_dtoa_r+0x502>
 8074a00:	4b83      	ldr	r3, [pc, #524]	; (8074c10 <_dtoa_r+0x658>)
 8074a02:	2200      	movs	r2, #0
 8074a04:	4630      	mov	r0, r6
 8074a06:	4639      	mov	r1, r7
 8074a08:	f7eb fc56 	bl	80602b8 <__aeabi_dsub>
 8074a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8074a10:	4606      	mov	r6, r0
 8074a12:	460f      	mov	r7, r1
 8074a14:	f7ec f898 	bl	8060b48 <__aeabi_dcmpgt>
 8074a18:	2800      	cmp	r0, #0
 8074a1a:	f040 8296 	bne.w	8074f4a <_dtoa_r+0x992>
 8074a1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8074a22:	4630      	mov	r0, r6
 8074a24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8074a28:	4639      	mov	r1, r7
 8074a2a:	f7ec f86f 	bl	8060b0c <__aeabi_dcmplt>
 8074a2e:	2800      	cmp	r0, #0
 8074a30:	f040 8288 	bne.w	8074f44 <_dtoa_r+0x98c>
 8074a34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8074a38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8074a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8074a3e:	2b00      	cmp	r3, #0
 8074a40:	f2c0 8158 	blt.w	8074cf4 <_dtoa_r+0x73c>
 8074a44:	f1ba 0f0e 	cmp.w	sl, #14
 8074a48:	f300 8154 	bgt.w	8074cf4 <_dtoa_r+0x73c>
 8074a4c:	4b6b      	ldr	r3, [pc, #428]	; (8074bfc <_dtoa_r+0x644>)
 8074a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8074a52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8074a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8074a58:	2b00      	cmp	r3, #0
 8074a5a:	f280 80e3 	bge.w	8074c24 <_dtoa_r+0x66c>
 8074a5e:	9b01      	ldr	r3, [sp, #4]
 8074a60:	2b00      	cmp	r3, #0
 8074a62:	f300 80df 	bgt.w	8074c24 <_dtoa_r+0x66c>
 8074a66:	f040 826d 	bne.w	8074f44 <_dtoa_r+0x98c>
 8074a6a:	4b69      	ldr	r3, [pc, #420]	; (8074c10 <_dtoa_r+0x658>)
 8074a6c:	2200      	movs	r2, #0
 8074a6e:	4640      	mov	r0, r8
 8074a70:	4649      	mov	r1, r9
 8074a72:	f7eb fdd9 	bl	8060628 <__aeabi_dmul>
 8074a76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8074a7a:	f7ec f85b 	bl	8060b34 <__aeabi_dcmpge>
 8074a7e:	9e01      	ldr	r6, [sp, #4]
 8074a80:	4637      	mov	r7, r6
 8074a82:	2800      	cmp	r0, #0
 8074a84:	f040 8243 	bne.w	8074f0e <_dtoa_r+0x956>
 8074a88:	9d00      	ldr	r5, [sp, #0]
 8074a8a:	2331      	movs	r3, #49	; 0x31
 8074a8c:	f805 3b01 	strb.w	r3, [r5], #1
 8074a90:	f10a 0a01 	add.w	sl, sl, #1
 8074a94:	e23f      	b.n	8074f16 <_dtoa_r+0x95e>
 8074a96:	07f2      	lsls	r2, r6, #31
 8074a98:	d505      	bpl.n	8074aa6 <_dtoa_r+0x4ee>
 8074a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8074a9e:	f7eb fdc3 	bl	8060628 <__aeabi_dmul>
 8074aa2:	3501      	adds	r5, #1
 8074aa4:	2301      	movs	r3, #1
 8074aa6:	1076      	asrs	r6, r6, #1
 8074aa8:	3708      	adds	r7, #8
 8074aaa:	e76c      	b.n	8074986 <_dtoa_r+0x3ce>
 8074aac:	2502      	movs	r5, #2
 8074aae:	e76f      	b.n	8074990 <_dtoa_r+0x3d8>
 8074ab0:	9b01      	ldr	r3, [sp, #4]
 8074ab2:	f8cd a01c 	str.w	sl, [sp, #28]
 8074ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8074ab8:	e78d      	b.n	80749d6 <_dtoa_r+0x41e>
 8074aba:	9900      	ldr	r1, [sp, #0]
 8074abc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8074abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8074ac0:	4b4e      	ldr	r3, [pc, #312]	; (8074bfc <_dtoa_r+0x644>)
 8074ac2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8074ac6:	4401      	add	r1, r0
 8074ac8:	9102      	str	r1, [sp, #8]
 8074aca:	9908      	ldr	r1, [sp, #32]
 8074acc:	eeb0 8a47 	vmov.f32	s16, s14
 8074ad0:	eef0 8a67 	vmov.f32	s17, s15
 8074ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8074ad8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8074adc:	2900      	cmp	r1, #0
 8074ade:	d045      	beq.n	8074b6c <_dtoa_r+0x5b4>
 8074ae0:	494c      	ldr	r1, [pc, #304]	; (8074c14 <_dtoa_r+0x65c>)
 8074ae2:	2000      	movs	r0, #0
 8074ae4:	f7eb feca 	bl	806087c <__aeabi_ddiv>
 8074ae8:	ec53 2b18 	vmov	r2, r3, d8
 8074aec:	f7eb fbe4 	bl	80602b8 <__aeabi_dsub>
 8074af0:	9d00      	ldr	r5, [sp, #0]
 8074af2:	ec41 0b18 	vmov	d8, r0, r1
 8074af6:	4639      	mov	r1, r7
 8074af8:	4630      	mov	r0, r6
 8074afa:	f7ec f845 	bl	8060b88 <__aeabi_d2iz>
 8074afe:	900c      	str	r0, [sp, #48]	; 0x30
 8074b00:	f7eb fd28 	bl	8060554 <__aeabi_i2d>
 8074b04:	4602      	mov	r2, r0
 8074b06:	460b      	mov	r3, r1
 8074b08:	4630      	mov	r0, r6
 8074b0a:	4639      	mov	r1, r7
 8074b0c:	f7eb fbd4 	bl	80602b8 <__aeabi_dsub>
 8074b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8074b12:	3330      	adds	r3, #48	; 0x30
 8074b14:	f805 3b01 	strb.w	r3, [r5], #1
 8074b18:	ec53 2b18 	vmov	r2, r3, d8
 8074b1c:	4606      	mov	r6, r0
 8074b1e:	460f      	mov	r7, r1
 8074b20:	f7eb fff4 	bl	8060b0c <__aeabi_dcmplt>
 8074b24:	2800      	cmp	r0, #0
 8074b26:	d165      	bne.n	8074bf4 <_dtoa_r+0x63c>
 8074b28:	4632      	mov	r2, r6
 8074b2a:	463b      	mov	r3, r7
 8074b2c:	4935      	ldr	r1, [pc, #212]	; (8074c04 <_dtoa_r+0x64c>)
 8074b2e:	2000      	movs	r0, #0
 8074b30:	f7eb fbc2 	bl	80602b8 <__aeabi_dsub>
 8074b34:	ec53 2b18 	vmov	r2, r3, d8
 8074b38:	f7eb ffe8 	bl	8060b0c <__aeabi_dcmplt>
 8074b3c:	2800      	cmp	r0, #0
 8074b3e:	f040 80b9 	bne.w	8074cb4 <_dtoa_r+0x6fc>
 8074b42:	9b02      	ldr	r3, [sp, #8]
 8074b44:	429d      	cmp	r5, r3
 8074b46:	f43f af75 	beq.w	8074a34 <_dtoa_r+0x47c>
 8074b4a:	4b2f      	ldr	r3, [pc, #188]	; (8074c08 <_dtoa_r+0x650>)
 8074b4c:	ec51 0b18 	vmov	r0, r1, d8
 8074b50:	2200      	movs	r2, #0
 8074b52:	f7eb fd69 	bl	8060628 <__aeabi_dmul>
 8074b56:	4b2c      	ldr	r3, [pc, #176]	; (8074c08 <_dtoa_r+0x650>)
 8074b58:	ec41 0b18 	vmov	d8, r0, r1
 8074b5c:	2200      	movs	r2, #0
 8074b5e:	4630      	mov	r0, r6
 8074b60:	4639      	mov	r1, r7
 8074b62:	f7eb fd61 	bl	8060628 <__aeabi_dmul>
 8074b66:	4606      	mov	r6, r0
 8074b68:	460f      	mov	r7, r1
 8074b6a:	e7c4      	b.n	8074af6 <_dtoa_r+0x53e>
 8074b6c:	ec51 0b17 	vmov	r0, r1, d7
 8074b70:	f7eb fd5a 	bl	8060628 <__aeabi_dmul>
 8074b74:	9b02      	ldr	r3, [sp, #8]
 8074b76:	9d00      	ldr	r5, [sp, #0]
 8074b78:	930c      	str	r3, [sp, #48]	; 0x30
 8074b7a:	ec41 0b18 	vmov	d8, r0, r1
 8074b7e:	4639      	mov	r1, r7
 8074b80:	4630      	mov	r0, r6
 8074b82:	f7ec f801 	bl	8060b88 <__aeabi_d2iz>
 8074b86:	9011      	str	r0, [sp, #68]	; 0x44
 8074b88:	f7eb fce4 	bl	8060554 <__aeabi_i2d>
 8074b8c:	4602      	mov	r2, r0
 8074b8e:	460b      	mov	r3, r1
 8074b90:	4630      	mov	r0, r6
 8074b92:	4639      	mov	r1, r7
 8074b94:	f7eb fb90 	bl	80602b8 <__aeabi_dsub>
 8074b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8074b9a:	3330      	adds	r3, #48	; 0x30
 8074b9c:	f805 3b01 	strb.w	r3, [r5], #1
 8074ba0:	9b02      	ldr	r3, [sp, #8]
 8074ba2:	429d      	cmp	r5, r3
 8074ba4:	4606      	mov	r6, r0
 8074ba6:	460f      	mov	r7, r1
 8074ba8:	f04f 0200 	mov.w	r2, #0
 8074bac:	d134      	bne.n	8074c18 <_dtoa_r+0x660>
 8074bae:	4b19      	ldr	r3, [pc, #100]	; (8074c14 <_dtoa_r+0x65c>)
 8074bb0:	ec51 0b18 	vmov	r0, r1, d8
 8074bb4:	f7eb fb82 	bl	80602bc <__adddf3>
 8074bb8:	4602      	mov	r2, r0
 8074bba:	460b      	mov	r3, r1
 8074bbc:	4630      	mov	r0, r6
 8074bbe:	4639      	mov	r1, r7
 8074bc0:	f7eb ffc2 	bl	8060b48 <__aeabi_dcmpgt>
 8074bc4:	2800      	cmp	r0, #0
 8074bc6:	d175      	bne.n	8074cb4 <_dtoa_r+0x6fc>
 8074bc8:	ec53 2b18 	vmov	r2, r3, d8
 8074bcc:	4911      	ldr	r1, [pc, #68]	; (8074c14 <_dtoa_r+0x65c>)
 8074bce:	2000      	movs	r0, #0
 8074bd0:	f7eb fb72 	bl	80602b8 <__aeabi_dsub>
 8074bd4:	4602      	mov	r2, r0
 8074bd6:	460b      	mov	r3, r1
 8074bd8:	4630      	mov	r0, r6
 8074bda:	4639      	mov	r1, r7
 8074bdc:	f7eb ff96 	bl	8060b0c <__aeabi_dcmplt>
 8074be0:	2800      	cmp	r0, #0
 8074be2:	f43f af27 	beq.w	8074a34 <_dtoa_r+0x47c>
 8074be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8074be8:	1e6b      	subs	r3, r5, #1
 8074bea:	930c      	str	r3, [sp, #48]	; 0x30
 8074bec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8074bf0:	2b30      	cmp	r3, #48	; 0x30
 8074bf2:	d0f8      	beq.n	8074be6 <_dtoa_r+0x62e>
 8074bf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8074bf8:	e04a      	b.n	8074c90 <_dtoa_r+0x6d8>
 8074bfa:	bf00      	nop
 8074bfc:	08077b40 	.word	0x08077b40
 8074c00:	08077b18 	.word	0x08077b18
 8074c04:	3ff00000 	.word	0x3ff00000
 8074c08:	40240000 	.word	0x40240000
 8074c0c:	401c0000 	.word	0x401c0000
 8074c10:	40140000 	.word	0x40140000
 8074c14:	3fe00000 	.word	0x3fe00000
 8074c18:	4baf      	ldr	r3, [pc, #700]	; (8074ed8 <_dtoa_r+0x920>)
 8074c1a:	f7eb fd05 	bl	8060628 <__aeabi_dmul>
 8074c1e:	4606      	mov	r6, r0
 8074c20:	460f      	mov	r7, r1
 8074c22:	e7ac      	b.n	8074b7e <_dtoa_r+0x5c6>
 8074c24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8074c28:	9d00      	ldr	r5, [sp, #0]
 8074c2a:	4642      	mov	r2, r8
 8074c2c:	464b      	mov	r3, r9
 8074c2e:	4630      	mov	r0, r6
 8074c30:	4639      	mov	r1, r7
 8074c32:	f7eb fe23 	bl	806087c <__aeabi_ddiv>
 8074c36:	f7eb ffa7 	bl	8060b88 <__aeabi_d2iz>
 8074c3a:	9002      	str	r0, [sp, #8]
 8074c3c:	f7eb fc8a 	bl	8060554 <__aeabi_i2d>
 8074c40:	4642      	mov	r2, r8
 8074c42:	464b      	mov	r3, r9
 8074c44:	f7eb fcf0 	bl	8060628 <__aeabi_dmul>
 8074c48:	4602      	mov	r2, r0
 8074c4a:	460b      	mov	r3, r1
 8074c4c:	4630      	mov	r0, r6
 8074c4e:	4639      	mov	r1, r7
 8074c50:	f7eb fb32 	bl	80602b8 <__aeabi_dsub>
 8074c54:	9e02      	ldr	r6, [sp, #8]
 8074c56:	9f01      	ldr	r7, [sp, #4]
 8074c58:	3630      	adds	r6, #48	; 0x30
 8074c5a:	f805 6b01 	strb.w	r6, [r5], #1
 8074c5e:	9e00      	ldr	r6, [sp, #0]
 8074c60:	1bae      	subs	r6, r5, r6
 8074c62:	42b7      	cmp	r7, r6
 8074c64:	4602      	mov	r2, r0
 8074c66:	460b      	mov	r3, r1
 8074c68:	d137      	bne.n	8074cda <_dtoa_r+0x722>
 8074c6a:	f7eb fb27 	bl	80602bc <__adddf3>
 8074c6e:	4642      	mov	r2, r8
 8074c70:	464b      	mov	r3, r9
 8074c72:	4606      	mov	r6, r0
 8074c74:	460f      	mov	r7, r1
 8074c76:	f7eb ff67 	bl	8060b48 <__aeabi_dcmpgt>
 8074c7a:	b9c8      	cbnz	r0, 8074cb0 <_dtoa_r+0x6f8>
 8074c7c:	4642      	mov	r2, r8
 8074c7e:	464b      	mov	r3, r9
 8074c80:	4630      	mov	r0, r6
 8074c82:	4639      	mov	r1, r7
 8074c84:	f7eb ff38 	bl	8060af8 <__aeabi_dcmpeq>
 8074c88:	b110      	cbz	r0, 8074c90 <_dtoa_r+0x6d8>
 8074c8a:	9b02      	ldr	r3, [sp, #8]
 8074c8c:	07d9      	lsls	r1, r3, #31
 8074c8e:	d40f      	bmi.n	8074cb0 <_dtoa_r+0x6f8>
 8074c90:	4620      	mov	r0, r4
 8074c92:	4659      	mov	r1, fp
 8074c94:	f000 ff2a 	bl	8075aec <_Bfree>
 8074c98:	2300      	movs	r3, #0
 8074c9a:	702b      	strb	r3, [r5, #0]
 8074c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8074c9e:	f10a 0001 	add.w	r0, sl, #1
 8074ca2:	6018      	str	r0, [r3, #0]
 8074ca4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8074ca6:	2b00      	cmp	r3, #0
 8074ca8:	f43f acd8 	beq.w	807465c <_dtoa_r+0xa4>
 8074cac:	601d      	str	r5, [r3, #0]
 8074cae:	e4d5      	b.n	807465c <_dtoa_r+0xa4>
 8074cb0:	f8cd a01c 	str.w	sl, [sp, #28]
 8074cb4:	462b      	mov	r3, r5
 8074cb6:	461d      	mov	r5, r3
 8074cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8074cbc:	2a39      	cmp	r2, #57	; 0x39
 8074cbe:	d108      	bne.n	8074cd2 <_dtoa_r+0x71a>
 8074cc0:	9a00      	ldr	r2, [sp, #0]
 8074cc2:	429a      	cmp	r2, r3
 8074cc4:	d1f7      	bne.n	8074cb6 <_dtoa_r+0x6fe>
 8074cc6:	9a07      	ldr	r2, [sp, #28]
 8074cc8:	9900      	ldr	r1, [sp, #0]
 8074cca:	3201      	adds	r2, #1
 8074ccc:	9207      	str	r2, [sp, #28]
 8074cce:	2230      	movs	r2, #48	; 0x30
 8074cd0:	700a      	strb	r2, [r1, #0]
 8074cd2:	781a      	ldrb	r2, [r3, #0]
 8074cd4:	3201      	adds	r2, #1
 8074cd6:	701a      	strb	r2, [r3, #0]
 8074cd8:	e78c      	b.n	8074bf4 <_dtoa_r+0x63c>
 8074cda:	4b7f      	ldr	r3, [pc, #508]	; (8074ed8 <_dtoa_r+0x920>)
 8074cdc:	2200      	movs	r2, #0
 8074cde:	f7eb fca3 	bl	8060628 <__aeabi_dmul>
 8074ce2:	2200      	movs	r2, #0
 8074ce4:	2300      	movs	r3, #0
 8074ce6:	4606      	mov	r6, r0
 8074ce8:	460f      	mov	r7, r1
 8074cea:	f7eb ff05 	bl	8060af8 <__aeabi_dcmpeq>
 8074cee:	2800      	cmp	r0, #0
 8074cf0:	d09b      	beq.n	8074c2a <_dtoa_r+0x672>
 8074cf2:	e7cd      	b.n	8074c90 <_dtoa_r+0x6d8>
 8074cf4:	9a08      	ldr	r2, [sp, #32]
 8074cf6:	2a00      	cmp	r2, #0
 8074cf8:	f000 80c4 	beq.w	8074e84 <_dtoa_r+0x8cc>
 8074cfc:	9a05      	ldr	r2, [sp, #20]
 8074cfe:	2a01      	cmp	r2, #1
 8074d00:	f300 80a8 	bgt.w	8074e54 <_dtoa_r+0x89c>
 8074d04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8074d06:	2a00      	cmp	r2, #0
 8074d08:	f000 80a0 	beq.w	8074e4c <_dtoa_r+0x894>
 8074d0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8074d10:	9e06      	ldr	r6, [sp, #24]
 8074d12:	4645      	mov	r5, r8
 8074d14:	9a04      	ldr	r2, [sp, #16]
 8074d16:	2101      	movs	r1, #1
 8074d18:	441a      	add	r2, r3
 8074d1a:	4620      	mov	r0, r4
 8074d1c:	4498      	add	r8, r3
 8074d1e:	9204      	str	r2, [sp, #16]
 8074d20:	f000 ffea 	bl	8075cf8 <__i2b>
 8074d24:	4607      	mov	r7, r0
 8074d26:	2d00      	cmp	r5, #0
 8074d28:	dd0b      	ble.n	8074d42 <_dtoa_r+0x78a>
 8074d2a:	9b04      	ldr	r3, [sp, #16]
 8074d2c:	2b00      	cmp	r3, #0
 8074d2e:	dd08      	ble.n	8074d42 <_dtoa_r+0x78a>
 8074d30:	42ab      	cmp	r3, r5
 8074d32:	9a04      	ldr	r2, [sp, #16]
 8074d34:	bfa8      	it	ge
 8074d36:	462b      	movge	r3, r5
 8074d38:	eba8 0803 	sub.w	r8, r8, r3
 8074d3c:	1aed      	subs	r5, r5, r3
 8074d3e:	1ad3      	subs	r3, r2, r3
 8074d40:	9304      	str	r3, [sp, #16]
 8074d42:	9b06      	ldr	r3, [sp, #24]
 8074d44:	b1fb      	cbz	r3, 8074d86 <_dtoa_r+0x7ce>
 8074d46:	9b08      	ldr	r3, [sp, #32]
 8074d48:	2b00      	cmp	r3, #0
 8074d4a:	f000 809f 	beq.w	8074e8c <_dtoa_r+0x8d4>
 8074d4e:	2e00      	cmp	r6, #0
 8074d50:	dd11      	ble.n	8074d76 <_dtoa_r+0x7be>
 8074d52:	4639      	mov	r1, r7
 8074d54:	4632      	mov	r2, r6
 8074d56:	4620      	mov	r0, r4
 8074d58:	f001 f88a 	bl	8075e70 <__pow5mult>
 8074d5c:	465a      	mov	r2, fp
 8074d5e:	4601      	mov	r1, r0
 8074d60:	4607      	mov	r7, r0
 8074d62:	4620      	mov	r0, r4
 8074d64:	f000 ffde 	bl	8075d24 <__multiply>
 8074d68:	4659      	mov	r1, fp
 8074d6a:	9007      	str	r0, [sp, #28]
 8074d6c:	4620      	mov	r0, r4
 8074d6e:	f000 febd 	bl	8075aec <_Bfree>
 8074d72:	9b07      	ldr	r3, [sp, #28]
 8074d74:	469b      	mov	fp, r3
 8074d76:	9b06      	ldr	r3, [sp, #24]
 8074d78:	1b9a      	subs	r2, r3, r6
 8074d7a:	d004      	beq.n	8074d86 <_dtoa_r+0x7ce>
 8074d7c:	4659      	mov	r1, fp
 8074d7e:	4620      	mov	r0, r4
 8074d80:	f001 f876 	bl	8075e70 <__pow5mult>
 8074d84:	4683      	mov	fp, r0
 8074d86:	2101      	movs	r1, #1
 8074d88:	4620      	mov	r0, r4
 8074d8a:	f000 ffb5 	bl	8075cf8 <__i2b>
 8074d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8074d90:	2b00      	cmp	r3, #0
 8074d92:	4606      	mov	r6, r0
 8074d94:	dd7c      	ble.n	8074e90 <_dtoa_r+0x8d8>
 8074d96:	461a      	mov	r2, r3
 8074d98:	4601      	mov	r1, r0
 8074d9a:	4620      	mov	r0, r4
 8074d9c:	f001 f868 	bl	8075e70 <__pow5mult>
 8074da0:	9b05      	ldr	r3, [sp, #20]
 8074da2:	2b01      	cmp	r3, #1
 8074da4:	4606      	mov	r6, r0
 8074da6:	dd76      	ble.n	8074e96 <_dtoa_r+0x8de>
 8074da8:	2300      	movs	r3, #0
 8074daa:	9306      	str	r3, [sp, #24]
 8074dac:	6933      	ldr	r3, [r6, #16]
 8074dae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8074db2:	6918      	ldr	r0, [r3, #16]
 8074db4:	f000 ff50 	bl	8075c58 <__hi0bits>
 8074db8:	f1c0 0020 	rsb	r0, r0, #32
 8074dbc:	9b04      	ldr	r3, [sp, #16]
 8074dbe:	4418      	add	r0, r3
 8074dc0:	f010 001f 	ands.w	r0, r0, #31
 8074dc4:	f000 8086 	beq.w	8074ed4 <_dtoa_r+0x91c>
 8074dc8:	f1c0 0320 	rsb	r3, r0, #32
 8074dcc:	2b04      	cmp	r3, #4
 8074dce:	dd7f      	ble.n	8074ed0 <_dtoa_r+0x918>
 8074dd0:	f1c0 001c 	rsb	r0, r0, #28
 8074dd4:	9b04      	ldr	r3, [sp, #16]
 8074dd6:	4403      	add	r3, r0
 8074dd8:	4480      	add	r8, r0
 8074dda:	4405      	add	r5, r0
 8074ddc:	9304      	str	r3, [sp, #16]
 8074dde:	f1b8 0f00 	cmp.w	r8, #0
 8074de2:	dd05      	ble.n	8074df0 <_dtoa_r+0x838>
 8074de4:	4659      	mov	r1, fp
 8074de6:	4642      	mov	r2, r8
 8074de8:	4620      	mov	r0, r4
 8074dea:	f001 f89b 	bl	8075f24 <__lshift>
 8074dee:	4683      	mov	fp, r0
 8074df0:	9b04      	ldr	r3, [sp, #16]
 8074df2:	2b00      	cmp	r3, #0
 8074df4:	dd05      	ble.n	8074e02 <_dtoa_r+0x84a>
 8074df6:	4631      	mov	r1, r6
 8074df8:	461a      	mov	r2, r3
 8074dfa:	4620      	mov	r0, r4
 8074dfc:	f001 f892 	bl	8075f24 <__lshift>
 8074e00:	4606      	mov	r6, r0
 8074e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8074e04:	2b00      	cmp	r3, #0
 8074e06:	d069      	beq.n	8074edc <_dtoa_r+0x924>
 8074e08:	4631      	mov	r1, r6
 8074e0a:	4658      	mov	r0, fp
 8074e0c:	f001 f8f6 	bl	8075ffc <__mcmp>
 8074e10:	2800      	cmp	r0, #0
 8074e12:	da63      	bge.n	8074edc <_dtoa_r+0x924>
 8074e14:	2300      	movs	r3, #0
 8074e16:	4659      	mov	r1, fp
 8074e18:	220a      	movs	r2, #10
 8074e1a:	4620      	mov	r0, r4
 8074e1c:	f000 fe88 	bl	8075b30 <__multadd>
 8074e20:	9b08      	ldr	r3, [sp, #32]
 8074e22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8074e26:	4683      	mov	fp, r0
 8074e28:	2b00      	cmp	r3, #0
 8074e2a:	f000 818f 	beq.w	807514c <_dtoa_r+0xb94>
 8074e2e:	4639      	mov	r1, r7
 8074e30:	2300      	movs	r3, #0
 8074e32:	220a      	movs	r2, #10
 8074e34:	4620      	mov	r0, r4
 8074e36:	f000 fe7b 	bl	8075b30 <__multadd>
 8074e3a:	f1b9 0f00 	cmp.w	r9, #0
 8074e3e:	4607      	mov	r7, r0
 8074e40:	f300 808e 	bgt.w	8074f60 <_dtoa_r+0x9a8>
 8074e44:	9b05      	ldr	r3, [sp, #20]
 8074e46:	2b02      	cmp	r3, #2
 8074e48:	dc50      	bgt.n	8074eec <_dtoa_r+0x934>
 8074e4a:	e089      	b.n	8074f60 <_dtoa_r+0x9a8>
 8074e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8074e4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8074e52:	e75d      	b.n	8074d10 <_dtoa_r+0x758>
 8074e54:	9b01      	ldr	r3, [sp, #4]
 8074e56:	1e5e      	subs	r6, r3, #1
 8074e58:	9b06      	ldr	r3, [sp, #24]
 8074e5a:	42b3      	cmp	r3, r6
 8074e5c:	bfbf      	itttt	lt
 8074e5e:	9b06      	ldrlt	r3, [sp, #24]
 8074e60:	9606      	strlt	r6, [sp, #24]
 8074e62:	1af2      	sublt	r2, r6, r3
 8074e64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8074e66:	bfb6      	itet	lt
 8074e68:	189b      	addlt	r3, r3, r2
 8074e6a:	1b9e      	subge	r6, r3, r6
 8074e6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8074e6e:	9b01      	ldr	r3, [sp, #4]
 8074e70:	bfb8      	it	lt
 8074e72:	2600      	movlt	r6, #0
 8074e74:	2b00      	cmp	r3, #0
 8074e76:	bfb5      	itete	lt
 8074e78:	eba8 0503 	sublt.w	r5, r8, r3
 8074e7c:	9b01      	ldrge	r3, [sp, #4]
 8074e7e:	2300      	movlt	r3, #0
 8074e80:	4645      	movge	r5, r8
 8074e82:	e747      	b.n	8074d14 <_dtoa_r+0x75c>
 8074e84:	9e06      	ldr	r6, [sp, #24]
 8074e86:	9f08      	ldr	r7, [sp, #32]
 8074e88:	4645      	mov	r5, r8
 8074e8a:	e74c      	b.n	8074d26 <_dtoa_r+0x76e>
 8074e8c:	9a06      	ldr	r2, [sp, #24]
 8074e8e:	e775      	b.n	8074d7c <_dtoa_r+0x7c4>
 8074e90:	9b05      	ldr	r3, [sp, #20]
 8074e92:	2b01      	cmp	r3, #1
 8074e94:	dc18      	bgt.n	8074ec8 <_dtoa_r+0x910>
 8074e96:	9b02      	ldr	r3, [sp, #8]
 8074e98:	b9b3      	cbnz	r3, 8074ec8 <_dtoa_r+0x910>
 8074e9a:	9b03      	ldr	r3, [sp, #12]
 8074e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8074ea0:	b9a3      	cbnz	r3, 8074ecc <_dtoa_r+0x914>
 8074ea2:	9b03      	ldr	r3, [sp, #12]
 8074ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8074ea8:	0d1b      	lsrs	r3, r3, #20
 8074eaa:	051b      	lsls	r3, r3, #20
 8074eac:	b12b      	cbz	r3, 8074eba <_dtoa_r+0x902>
 8074eae:	9b04      	ldr	r3, [sp, #16]
 8074eb0:	3301      	adds	r3, #1
 8074eb2:	9304      	str	r3, [sp, #16]
 8074eb4:	f108 0801 	add.w	r8, r8, #1
 8074eb8:	2301      	movs	r3, #1
 8074eba:	9306      	str	r3, [sp, #24]
 8074ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8074ebe:	2b00      	cmp	r3, #0
 8074ec0:	f47f af74 	bne.w	8074dac <_dtoa_r+0x7f4>
 8074ec4:	2001      	movs	r0, #1
 8074ec6:	e779      	b.n	8074dbc <_dtoa_r+0x804>
 8074ec8:	2300      	movs	r3, #0
 8074eca:	e7f6      	b.n	8074eba <_dtoa_r+0x902>
 8074ecc:	9b02      	ldr	r3, [sp, #8]
 8074ece:	e7f4      	b.n	8074eba <_dtoa_r+0x902>
 8074ed0:	d085      	beq.n	8074dde <_dtoa_r+0x826>
 8074ed2:	4618      	mov	r0, r3
 8074ed4:	301c      	adds	r0, #28
 8074ed6:	e77d      	b.n	8074dd4 <_dtoa_r+0x81c>
 8074ed8:	40240000 	.word	0x40240000
 8074edc:	9b01      	ldr	r3, [sp, #4]
 8074ede:	2b00      	cmp	r3, #0
 8074ee0:	dc38      	bgt.n	8074f54 <_dtoa_r+0x99c>
 8074ee2:	9b05      	ldr	r3, [sp, #20]
 8074ee4:	2b02      	cmp	r3, #2
 8074ee6:	dd35      	ble.n	8074f54 <_dtoa_r+0x99c>
 8074ee8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8074eec:	f1b9 0f00 	cmp.w	r9, #0
 8074ef0:	d10d      	bne.n	8074f0e <_dtoa_r+0x956>
 8074ef2:	4631      	mov	r1, r6
 8074ef4:	464b      	mov	r3, r9
 8074ef6:	2205      	movs	r2, #5
 8074ef8:	4620      	mov	r0, r4
 8074efa:	f000 fe19 	bl	8075b30 <__multadd>
 8074efe:	4601      	mov	r1, r0
 8074f00:	4606      	mov	r6, r0
 8074f02:	4658      	mov	r0, fp
 8074f04:	f001 f87a 	bl	8075ffc <__mcmp>
 8074f08:	2800      	cmp	r0, #0
 8074f0a:	f73f adbd 	bgt.w	8074a88 <_dtoa_r+0x4d0>
 8074f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8074f10:	9d00      	ldr	r5, [sp, #0]
 8074f12:	ea6f 0a03 	mvn.w	sl, r3
 8074f16:	f04f 0800 	mov.w	r8, #0
 8074f1a:	4631      	mov	r1, r6
 8074f1c:	4620      	mov	r0, r4
 8074f1e:	f000 fde5 	bl	8075aec <_Bfree>
 8074f22:	2f00      	cmp	r7, #0
 8074f24:	f43f aeb4 	beq.w	8074c90 <_dtoa_r+0x6d8>
 8074f28:	f1b8 0f00 	cmp.w	r8, #0
 8074f2c:	d005      	beq.n	8074f3a <_dtoa_r+0x982>
 8074f2e:	45b8      	cmp	r8, r7
 8074f30:	d003      	beq.n	8074f3a <_dtoa_r+0x982>
 8074f32:	4641      	mov	r1, r8
 8074f34:	4620      	mov	r0, r4
 8074f36:	f000 fdd9 	bl	8075aec <_Bfree>
 8074f3a:	4639      	mov	r1, r7
 8074f3c:	4620      	mov	r0, r4
 8074f3e:	f000 fdd5 	bl	8075aec <_Bfree>
 8074f42:	e6a5      	b.n	8074c90 <_dtoa_r+0x6d8>
 8074f44:	2600      	movs	r6, #0
 8074f46:	4637      	mov	r7, r6
 8074f48:	e7e1      	b.n	8074f0e <_dtoa_r+0x956>
 8074f4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8074f4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8074f50:	4637      	mov	r7, r6
 8074f52:	e599      	b.n	8074a88 <_dtoa_r+0x4d0>
 8074f54:	9b08      	ldr	r3, [sp, #32]
 8074f56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8074f5a:	2b00      	cmp	r3, #0
 8074f5c:	f000 80fd 	beq.w	807515a <_dtoa_r+0xba2>
 8074f60:	2d00      	cmp	r5, #0
 8074f62:	dd05      	ble.n	8074f70 <_dtoa_r+0x9b8>
 8074f64:	4639      	mov	r1, r7
 8074f66:	462a      	mov	r2, r5
 8074f68:	4620      	mov	r0, r4
 8074f6a:	f000 ffdb 	bl	8075f24 <__lshift>
 8074f6e:	4607      	mov	r7, r0
 8074f70:	9b06      	ldr	r3, [sp, #24]
 8074f72:	2b00      	cmp	r3, #0
 8074f74:	d05c      	beq.n	8075030 <_dtoa_r+0xa78>
 8074f76:	6879      	ldr	r1, [r7, #4]
 8074f78:	4620      	mov	r0, r4
 8074f7a:	f000 fd77 	bl	8075a6c <_Balloc>
 8074f7e:	4605      	mov	r5, r0
 8074f80:	b928      	cbnz	r0, 8074f8e <_dtoa_r+0x9d6>
 8074f82:	4b80      	ldr	r3, [pc, #512]	; (8075184 <_dtoa_r+0xbcc>)
 8074f84:	4602      	mov	r2, r0
 8074f86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8074f8a:	f7ff bb2e 	b.w	80745ea <_dtoa_r+0x32>
 8074f8e:	693a      	ldr	r2, [r7, #16]
 8074f90:	3202      	adds	r2, #2
 8074f92:	0092      	lsls	r2, r2, #2
 8074f94:	f107 010c 	add.w	r1, r7, #12
 8074f98:	300c      	adds	r0, #12
 8074f9a:	f7fd fbca 	bl	8072732 <memcpy>
 8074f9e:	2201      	movs	r2, #1
 8074fa0:	4629      	mov	r1, r5
 8074fa2:	4620      	mov	r0, r4
 8074fa4:	f000 ffbe 	bl	8075f24 <__lshift>
 8074fa8:	9b00      	ldr	r3, [sp, #0]
 8074faa:	3301      	adds	r3, #1
 8074fac:	9301      	str	r3, [sp, #4]
 8074fae:	9b00      	ldr	r3, [sp, #0]
 8074fb0:	444b      	add	r3, r9
 8074fb2:	9307      	str	r3, [sp, #28]
 8074fb4:	9b02      	ldr	r3, [sp, #8]
 8074fb6:	f003 0301 	and.w	r3, r3, #1
 8074fba:	46b8      	mov	r8, r7
 8074fbc:	9306      	str	r3, [sp, #24]
 8074fbe:	4607      	mov	r7, r0
 8074fc0:	9b01      	ldr	r3, [sp, #4]
 8074fc2:	4631      	mov	r1, r6
 8074fc4:	3b01      	subs	r3, #1
 8074fc6:	4658      	mov	r0, fp
 8074fc8:	9302      	str	r3, [sp, #8]
 8074fca:	f7ff fa69 	bl	80744a0 <quorem>
 8074fce:	4603      	mov	r3, r0
 8074fd0:	3330      	adds	r3, #48	; 0x30
 8074fd2:	9004      	str	r0, [sp, #16]
 8074fd4:	4641      	mov	r1, r8
 8074fd6:	4658      	mov	r0, fp
 8074fd8:	9308      	str	r3, [sp, #32]
 8074fda:	f001 f80f 	bl	8075ffc <__mcmp>
 8074fde:	463a      	mov	r2, r7
 8074fe0:	4681      	mov	r9, r0
 8074fe2:	4631      	mov	r1, r6
 8074fe4:	4620      	mov	r0, r4
 8074fe6:	f001 f825 	bl	8076034 <__mdiff>
 8074fea:	68c2      	ldr	r2, [r0, #12]
 8074fec:	9b08      	ldr	r3, [sp, #32]
 8074fee:	4605      	mov	r5, r0
 8074ff0:	bb02      	cbnz	r2, 8075034 <_dtoa_r+0xa7c>
 8074ff2:	4601      	mov	r1, r0
 8074ff4:	4658      	mov	r0, fp
 8074ff6:	f001 f801 	bl	8075ffc <__mcmp>
 8074ffa:	9b08      	ldr	r3, [sp, #32]
 8074ffc:	4602      	mov	r2, r0
 8074ffe:	4629      	mov	r1, r5
 8075000:	4620      	mov	r0, r4
 8075002:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8075006:	f000 fd71 	bl	8075aec <_Bfree>
 807500a:	9b05      	ldr	r3, [sp, #20]
 807500c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 807500e:	9d01      	ldr	r5, [sp, #4]
 8075010:	ea43 0102 	orr.w	r1, r3, r2
 8075014:	9b06      	ldr	r3, [sp, #24]
 8075016:	430b      	orrs	r3, r1
 8075018:	9b08      	ldr	r3, [sp, #32]
 807501a:	d10d      	bne.n	8075038 <_dtoa_r+0xa80>
 807501c:	2b39      	cmp	r3, #57	; 0x39
 807501e:	d029      	beq.n	8075074 <_dtoa_r+0xabc>
 8075020:	f1b9 0f00 	cmp.w	r9, #0
 8075024:	dd01      	ble.n	807502a <_dtoa_r+0xa72>
 8075026:	9b04      	ldr	r3, [sp, #16]
 8075028:	3331      	adds	r3, #49	; 0x31
 807502a:	9a02      	ldr	r2, [sp, #8]
 807502c:	7013      	strb	r3, [r2, #0]
 807502e:	e774      	b.n	8074f1a <_dtoa_r+0x962>
 8075030:	4638      	mov	r0, r7
 8075032:	e7b9      	b.n	8074fa8 <_dtoa_r+0x9f0>
 8075034:	2201      	movs	r2, #1
 8075036:	e7e2      	b.n	8074ffe <_dtoa_r+0xa46>
 8075038:	f1b9 0f00 	cmp.w	r9, #0
 807503c:	db06      	blt.n	807504c <_dtoa_r+0xa94>
 807503e:	9905      	ldr	r1, [sp, #20]
 8075040:	ea41 0909 	orr.w	r9, r1, r9
 8075044:	9906      	ldr	r1, [sp, #24]
 8075046:	ea59 0101 	orrs.w	r1, r9, r1
 807504a:	d120      	bne.n	807508e <_dtoa_r+0xad6>
 807504c:	2a00      	cmp	r2, #0
 807504e:	ddec      	ble.n	807502a <_dtoa_r+0xa72>
 8075050:	4659      	mov	r1, fp
 8075052:	2201      	movs	r2, #1
 8075054:	4620      	mov	r0, r4
 8075056:	9301      	str	r3, [sp, #4]
 8075058:	f000 ff64 	bl	8075f24 <__lshift>
 807505c:	4631      	mov	r1, r6
 807505e:	4683      	mov	fp, r0
 8075060:	f000 ffcc 	bl	8075ffc <__mcmp>
 8075064:	2800      	cmp	r0, #0
 8075066:	9b01      	ldr	r3, [sp, #4]
 8075068:	dc02      	bgt.n	8075070 <_dtoa_r+0xab8>
 807506a:	d1de      	bne.n	807502a <_dtoa_r+0xa72>
 807506c:	07da      	lsls	r2, r3, #31
 807506e:	d5dc      	bpl.n	807502a <_dtoa_r+0xa72>
 8075070:	2b39      	cmp	r3, #57	; 0x39
 8075072:	d1d8      	bne.n	8075026 <_dtoa_r+0xa6e>
 8075074:	9a02      	ldr	r2, [sp, #8]
 8075076:	2339      	movs	r3, #57	; 0x39
 8075078:	7013      	strb	r3, [r2, #0]
 807507a:	462b      	mov	r3, r5
 807507c:	461d      	mov	r5, r3
 807507e:	3b01      	subs	r3, #1
 8075080:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8075084:	2a39      	cmp	r2, #57	; 0x39
 8075086:	d050      	beq.n	807512a <_dtoa_r+0xb72>
 8075088:	3201      	adds	r2, #1
 807508a:	701a      	strb	r2, [r3, #0]
 807508c:	e745      	b.n	8074f1a <_dtoa_r+0x962>
 807508e:	2a00      	cmp	r2, #0
 8075090:	dd03      	ble.n	807509a <_dtoa_r+0xae2>
 8075092:	2b39      	cmp	r3, #57	; 0x39
 8075094:	d0ee      	beq.n	8075074 <_dtoa_r+0xabc>
 8075096:	3301      	adds	r3, #1
 8075098:	e7c7      	b.n	807502a <_dtoa_r+0xa72>
 807509a:	9a01      	ldr	r2, [sp, #4]
 807509c:	9907      	ldr	r1, [sp, #28]
 807509e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80750a2:	428a      	cmp	r2, r1
 80750a4:	d02a      	beq.n	80750fc <_dtoa_r+0xb44>
 80750a6:	4659      	mov	r1, fp
 80750a8:	2300      	movs	r3, #0
 80750aa:	220a      	movs	r2, #10
 80750ac:	4620      	mov	r0, r4
 80750ae:	f000 fd3f 	bl	8075b30 <__multadd>
 80750b2:	45b8      	cmp	r8, r7
 80750b4:	4683      	mov	fp, r0
 80750b6:	f04f 0300 	mov.w	r3, #0
 80750ba:	f04f 020a 	mov.w	r2, #10
 80750be:	4641      	mov	r1, r8
 80750c0:	4620      	mov	r0, r4
 80750c2:	d107      	bne.n	80750d4 <_dtoa_r+0xb1c>
 80750c4:	f000 fd34 	bl	8075b30 <__multadd>
 80750c8:	4680      	mov	r8, r0
 80750ca:	4607      	mov	r7, r0
 80750cc:	9b01      	ldr	r3, [sp, #4]
 80750ce:	3301      	adds	r3, #1
 80750d0:	9301      	str	r3, [sp, #4]
 80750d2:	e775      	b.n	8074fc0 <_dtoa_r+0xa08>
 80750d4:	f000 fd2c 	bl	8075b30 <__multadd>
 80750d8:	4639      	mov	r1, r7
 80750da:	4680      	mov	r8, r0
 80750dc:	2300      	movs	r3, #0
 80750de:	220a      	movs	r2, #10
 80750e0:	4620      	mov	r0, r4
 80750e2:	f000 fd25 	bl	8075b30 <__multadd>
 80750e6:	4607      	mov	r7, r0
 80750e8:	e7f0      	b.n	80750cc <_dtoa_r+0xb14>
 80750ea:	f1b9 0f00 	cmp.w	r9, #0
 80750ee:	9a00      	ldr	r2, [sp, #0]
 80750f0:	bfcc      	ite	gt
 80750f2:	464d      	movgt	r5, r9
 80750f4:	2501      	movle	r5, #1
 80750f6:	4415      	add	r5, r2
 80750f8:	f04f 0800 	mov.w	r8, #0
 80750fc:	4659      	mov	r1, fp
 80750fe:	2201      	movs	r2, #1
 8075100:	4620      	mov	r0, r4
 8075102:	9301      	str	r3, [sp, #4]
 8075104:	f000 ff0e 	bl	8075f24 <__lshift>
 8075108:	4631      	mov	r1, r6
 807510a:	4683      	mov	fp, r0
 807510c:	f000 ff76 	bl	8075ffc <__mcmp>
 8075110:	2800      	cmp	r0, #0
 8075112:	dcb2      	bgt.n	807507a <_dtoa_r+0xac2>
 8075114:	d102      	bne.n	807511c <_dtoa_r+0xb64>
 8075116:	9b01      	ldr	r3, [sp, #4]
 8075118:	07db      	lsls	r3, r3, #31
 807511a:	d4ae      	bmi.n	807507a <_dtoa_r+0xac2>
 807511c:	462b      	mov	r3, r5
 807511e:	461d      	mov	r5, r3
 8075120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8075124:	2a30      	cmp	r2, #48	; 0x30
 8075126:	d0fa      	beq.n	807511e <_dtoa_r+0xb66>
 8075128:	e6f7      	b.n	8074f1a <_dtoa_r+0x962>
 807512a:	9a00      	ldr	r2, [sp, #0]
 807512c:	429a      	cmp	r2, r3
 807512e:	d1a5      	bne.n	807507c <_dtoa_r+0xac4>
 8075130:	f10a 0a01 	add.w	sl, sl, #1
 8075134:	2331      	movs	r3, #49	; 0x31
 8075136:	e779      	b.n	807502c <_dtoa_r+0xa74>
 8075138:	4b13      	ldr	r3, [pc, #76]	; (8075188 <_dtoa_r+0xbd0>)
 807513a:	f7ff baaf 	b.w	807469c <_dtoa_r+0xe4>
 807513e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8075140:	2b00      	cmp	r3, #0
 8075142:	f47f aa86 	bne.w	8074652 <_dtoa_r+0x9a>
 8075146:	4b11      	ldr	r3, [pc, #68]	; (807518c <_dtoa_r+0xbd4>)
 8075148:	f7ff baa8 	b.w	807469c <_dtoa_r+0xe4>
 807514c:	f1b9 0f00 	cmp.w	r9, #0
 8075150:	dc03      	bgt.n	807515a <_dtoa_r+0xba2>
 8075152:	9b05      	ldr	r3, [sp, #20]
 8075154:	2b02      	cmp	r3, #2
 8075156:	f73f aec9 	bgt.w	8074eec <_dtoa_r+0x934>
 807515a:	9d00      	ldr	r5, [sp, #0]
 807515c:	4631      	mov	r1, r6
 807515e:	4658      	mov	r0, fp
 8075160:	f7ff f99e 	bl	80744a0 <quorem>
 8075164:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8075168:	f805 3b01 	strb.w	r3, [r5], #1
 807516c:	9a00      	ldr	r2, [sp, #0]
 807516e:	1aaa      	subs	r2, r5, r2
 8075170:	4591      	cmp	r9, r2
 8075172:	ddba      	ble.n	80750ea <_dtoa_r+0xb32>
 8075174:	4659      	mov	r1, fp
 8075176:	2300      	movs	r3, #0
 8075178:	220a      	movs	r2, #10
 807517a:	4620      	mov	r0, r4
 807517c:	f000 fcd8 	bl	8075b30 <__multadd>
 8075180:	4683      	mov	fp, r0
 8075182:	e7eb      	b.n	807515c <_dtoa_r+0xba4>
 8075184:	08077a24 	.word	0x08077a24
 8075188:	08077824 	.word	0x08077824
 807518c:	080779a1 	.word	0x080779a1

08075190 <__sflush_r>:
 8075190:	898a      	ldrh	r2, [r1, #12]
 8075192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8075196:	4605      	mov	r5, r0
 8075198:	0710      	lsls	r0, r2, #28
 807519a:	460c      	mov	r4, r1
 807519c:	d458      	bmi.n	8075250 <__sflush_r+0xc0>
 807519e:	684b      	ldr	r3, [r1, #4]
 80751a0:	2b00      	cmp	r3, #0
 80751a2:	dc05      	bgt.n	80751b0 <__sflush_r+0x20>
 80751a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80751a6:	2b00      	cmp	r3, #0
 80751a8:	dc02      	bgt.n	80751b0 <__sflush_r+0x20>
 80751aa:	2000      	movs	r0, #0
 80751ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80751b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80751b2:	2e00      	cmp	r6, #0
 80751b4:	d0f9      	beq.n	80751aa <__sflush_r+0x1a>
 80751b6:	2300      	movs	r3, #0
 80751b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80751bc:	682f      	ldr	r7, [r5, #0]
 80751be:	602b      	str	r3, [r5, #0]
 80751c0:	d032      	beq.n	8075228 <__sflush_r+0x98>
 80751c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80751c4:	89a3      	ldrh	r3, [r4, #12]
 80751c6:	075a      	lsls	r2, r3, #29
 80751c8:	d505      	bpl.n	80751d6 <__sflush_r+0x46>
 80751ca:	6863      	ldr	r3, [r4, #4]
 80751cc:	1ac0      	subs	r0, r0, r3
 80751ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80751d0:	b10b      	cbz	r3, 80751d6 <__sflush_r+0x46>
 80751d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80751d4:	1ac0      	subs	r0, r0, r3
 80751d6:	2300      	movs	r3, #0
 80751d8:	4602      	mov	r2, r0
 80751da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80751dc:	6a21      	ldr	r1, [r4, #32]
 80751de:	4628      	mov	r0, r5
 80751e0:	47b0      	blx	r6
 80751e2:	1c43      	adds	r3, r0, #1
 80751e4:	89a3      	ldrh	r3, [r4, #12]
 80751e6:	d106      	bne.n	80751f6 <__sflush_r+0x66>
 80751e8:	6829      	ldr	r1, [r5, #0]
 80751ea:	291d      	cmp	r1, #29
 80751ec:	d82c      	bhi.n	8075248 <__sflush_r+0xb8>
 80751ee:	4a2a      	ldr	r2, [pc, #168]	; (8075298 <__sflush_r+0x108>)
 80751f0:	40ca      	lsrs	r2, r1
 80751f2:	07d6      	lsls	r6, r2, #31
 80751f4:	d528      	bpl.n	8075248 <__sflush_r+0xb8>
 80751f6:	2200      	movs	r2, #0
 80751f8:	6062      	str	r2, [r4, #4]
 80751fa:	04d9      	lsls	r1, r3, #19
 80751fc:	6922      	ldr	r2, [r4, #16]
 80751fe:	6022      	str	r2, [r4, #0]
 8075200:	d504      	bpl.n	807520c <__sflush_r+0x7c>
 8075202:	1c42      	adds	r2, r0, #1
 8075204:	d101      	bne.n	807520a <__sflush_r+0x7a>
 8075206:	682b      	ldr	r3, [r5, #0]
 8075208:	b903      	cbnz	r3, 807520c <__sflush_r+0x7c>
 807520a:	6560      	str	r0, [r4, #84]	; 0x54
 807520c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 807520e:	602f      	str	r7, [r5, #0]
 8075210:	2900      	cmp	r1, #0
 8075212:	d0ca      	beq.n	80751aa <__sflush_r+0x1a>
 8075214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8075218:	4299      	cmp	r1, r3
 807521a:	d002      	beq.n	8075222 <__sflush_r+0x92>
 807521c:	4628      	mov	r0, r5
 807521e:	f001 f8ef 	bl	8076400 <_free_r>
 8075222:	2000      	movs	r0, #0
 8075224:	6360      	str	r0, [r4, #52]	; 0x34
 8075226:	e7c1      	b.n	80751ac <__sflush_r+0x1c>
 8075228:	6a21      	ldr	r1, [r4, #32]
 807522a:	2301      	movs	r3, #1
 807522c:	4628      	mov	r0, r5
 807522e:	47b0      	blx	r6
 8075230:	1c41      	adds	r1, r0, #1
 8075232:	d1c7      	bne.n	80751c4 <__sflush_r+0x34>
 8075234:	682b      	ldr	r3, [r5, #0]
 8075236:	2b00      	cmp	r3, #0
 8075238:	d0c4      	beq.n	80751c4 <__sflush_r+0x34>
 807523a:	2b1d      	cmp	r3, #29
 807523c:	d001      	beq.n	8075242 <__sflush_r+0xb2>
 807523e:	2b16      	cmp	r3, #22
 8075240:	d101      	bne.n	8075246 <__sflush_r+0xb6>
 8075242:	602f      	str	r7, [r5, #0]
 8075244:	e7b1      	b.n	80751aa <__sflush_r+0x1a>
 8075246:	89a3      	ldrh	r3, [r4, #12]
 8075248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 807524c:	81a3      	strh	r3, [r4, #12]
 807524e:	e7ad      	b.n	80751ac <__sflush_r+0x1c>
 8075250:	690f      	ldr	r7, [r1, #16]
 8075252:	2f00      	cmp	r7, #0
 8075254:	d0a9      	beq.n	80751aa <__sflush_r+0x1a>
 8075256:	0793      	lsls	r3, r2, #30
 8075258:	680e      	ldr	r6, [r1, #0]
 807525a:	bf08      	it	eq
 807525c:	694b      	ldreq	r3, [r1, #20]
 807525e:	600f      	str	r7, [r1, #0]
 8075260:	bf18      	it	ne
 8075262:	2300      	movne	r3, #0
 8075264:	eba6 0807 	sub.w	r8, r6, r7
 8075268:	608b      	str	r3, [r1, #8]
 807526a:	f1b8 0f00 	cmp.w	r8, #0
 807526e:	dd9c      	ble.n	80751aa <__sflush_r+0x1a>
 8075270:	6a21      	ldr	r1, [r4, #32]
 8075272:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8075274:	4643      	mov	r3, r8
 8075276:	463a      	mov	r2, r7
 8075278:	4628      	mov	r0, r5
 807527a:	47b0      	blx	r6
 807527c:	2800      	cmp	r0, #0
 807527e:	dc06      	bgt.n	807528e <__sflush_r+0xfe>
 8075280:	89a3      	ldrh	r3, [r4, #12]
 8075282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8075286:	81a3      	strh	r3, [r4, #12]
 8075288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 807528c:	e78e      	b.n	80751ac <__sflush_r+0x1c>
 807528e:	4407      	add	r7, r0
 8075290:	eba8 0800 	sub.w	r8, r8, r0
 8075294:	e7e9      	b.n	807526a <__sflush_r+0xda>
 8075296:	bf00      	nop
 8075298:	20400001 	.word	0x20400001

0807529c <_fflush_r>:
 807529c:	b538      	push	{r3, r4, r5, lr}
 807529e:	690b      	ldr	r3, [r1, #16]
 80752a0:	4605      	mov	r5, r0
 80752a2:	460c      	mov	r4, r1
 80752a4:	b913      	cbnz	r3, 80752ac <_fflush_r+0x10>
 80752a6:	2500      	movs	r5, #0
 80752a8:	4628      	mov	r0, r5
 80752aa:	bd38      	pop	{r3, r4, r5, pc}
 80752ac:	b118      	cbz	r0, 80752b6 <_fflush_r+0x1a>
 80752ae:	6983      	ldr	r3, [r0, #24]
 80752b0:	b90b      	cbnz	r3, 80752b6 <_fflush_r+0x1a>
 80752b2:	f7fd f979 	bl	80725a8 <__sinit>
 80752b6:	4b14      	ldr	r3, [pc, #80]	; (8075308 <_fflush_r+0x6c>)
 80752b8:	429c      	cmp	r4, r3
 80752ba:	d11b      	bne.n	80752f4 <_fflush_r+0x58>
 80752bc:	686c      	ldr	r4, [r5, #4]
 80752be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80752c2:	2b00      	cmp	r3, #0
 80752c4:	d0ef      	beq.n	80752a6 <_fflush_r+0xa>
 80752c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80752c8:	07d0      	lsls	r0, r2, #31
 80752ca:	d404      	bmi.n	80752d6 <_fflush_r+0x3a>
 80752cc:	0599      	lsls	r1, r3, #22
 80752ce:	d402      	bmi.n	80752d6 <_fflush_r+0x3a>
 80752d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80752d2:	f7fd fa2c 	bl	807272e <__retarget_lock_acquire_recursive>
 80752d6:	4628      	mov	r0, r5
 80752d8:	4621      	mov	r1, r4
 80752da:	f7ff ff59 	bl	8075190 <__sflush_r>
 80752de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80752e0:	07da      	lsls	r2, r3, #31
 80752e2:	4605      	mov	r5, r0
 80752e4:	d4e0      	bmi.n	80752a8 <_fflush_r+0xc>
 80752e6:	89a3      	ldrh	r3, [r4, #12]
 80752e8:	059b      	lsls	r3, r3, #22
 80752ea:	d4dd      	bmi.n	80752a8 <_fflush_r+0xc>
 80752ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80752ee:	f7fd fa1f 	bl	8072730 <__retarget_lock_release_recursive>
 80752f2:	e7d9      	b.n	80752a8 <_fflush_r+0xc>
 80752f4:	4b05      	ldr	r3, [pc, #20]	; (807530c <_fflush_r+0x70>)
 80752f6:	429c      	cmp	r4, r3
 80752f8:	d101      	bne.n	80752fe <_fflush_r+0x62>
 80752fa:	68ac      	ldr	r4, [r5, #8]
 80752fc:	e7df      	b.n	80752be <_fflush_r+0x22>
 80752fe:	4b04      	ldr	r3, [pc, #16]	; (8075310 <_fflush_r+0x74>)
 8075300:	429c      	cmp	r4, r3
 8075302:	bf08      	it	eq
 8075304:	68ec      	ldreq	r4, [r5, #12]
 8075306:	e7da      	b.n	80752be <_fflush_r+0x22>
 8075308:	080777d0 	.word	0x080777d0
 807530c:	080777f0 	.word	0x080777f0
 8075310:	080777b0 	.word	0x080777b0

08075314 <rshift>:
 8075314:	6903      	ldr	r3, [r0, #16]
 8075316:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 807531a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 807531e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8075322:	f100 0414 	add.w	r4, r0, #20
 8075326:	dd45      	ble.n	80753b4 <rshift+0xa0>
 8075328:	f011 011f 	ands.w	r1, r1, #31
 807532c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8075330:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8075334:	d10c      	bne.n	8075350 <rshift+0x3c>
 8075336:	f100 0710 	add.w	r7, r0, #16
 807533a:	4629      	mov	r1, r5
 807533c:	42b1      	cmp	r1, r6
 807533e:	d334      	bcc.n	80753aa <rshift+0x96>
 8075340:	1a9b      	subs	r3, r3, r2
 8075342:	009b      	lsls	r3, r3, #2
 8075344:	1eea      	subs	r2, r5, #3
 8075346:	4296      	cmp	r6, r2
 8075348:	bf38      	it	cc
 807534a:	2300      	movcc	r3, #0
 807534c:	4423      	add	r3, r4
 807534e:	e015      	b.n	807537c <rshift+0x68>
 8075350:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8075354:	f1c1 0820 	rsb	r8, r1, #32
 8075358:	40cf      	lsrs	r7, r1
 807535a:	f105 0e04 	add.w	lr, r5, #4
 807535e:	46a1      	mov	r9, r4
 8075360:	4576      	cmp	r6, lr
 8075362:	46f4      	mov	ip, lr
 8075364:	d815      	bhi.n	8075392 <rshift+0x7e>
 8075366:	1a9b      	subs	r3, r3, r2
 8075368:	009a      	lsls	r2, r3, #2
 807536a:	3a04      	subs	r2, #4
 807536c:	3501      	adds	r5, #1
 807536e:	42ae      	cmp	r6, r5
 8075370:	bf38      	it	cc
 8075372:	2200      	movcc	r2, #0
 8075374:	18a3      	adds	r3, r4, r2
 8075376:	50a7      	str	r7, [r4, r2]
 8075378:	b107      	cbz	r7, 807537c <rshift+0x68>
 807537a:	3304      	adds	r3, #4
 807537c:	1b1a      	subs	r2, r3, r4
 807537e:	42a3      	cmp	r3, r4
 8075380:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8075384:	bf08      	it	eq
 8075386:	2300      	moveq	r3, #0
 8075388:	6102      	str	r2, [r0, #16]
 807538a:	bf08      	it	eq
 807538c:	6143      	streq	r3, [r0, #20]
 807538e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8075392:	f8dc c000 	ldr.w	ip, [ip]
 8075396:	fa0c fc08 	lsl.w	ip, ip, r8
 807539a:	ea4c 0707 	orr.w	r7, ip, r7
 807539e:	f849 7b04 	str.w	r7, [r9], #4
 80753a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80753a6:	40cf      	lsrs	r7, r1
 80753a8:	e7da      	b.n	8075360 <rshift+0x4c>
 80753aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80753ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80753b2:	e7c3      	b.n	807533c <rshift+0x28>
 80753b4:	4623      	mov	r3, r4
 80753b6:	e7e1      	b.n	807537c <rshift+0x68>

080753b8 <__hexdig_fun>:
 80753b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80753bc:	2b09      	cmp	r3, #9
 80753be:	d802      	bhi.n	80753c6 <__hexdig_fun+0xe>
 80753c0:	3820      	subs	r0, #32
 80753c2:	b2c0      	uxtb	r0, r0
 80753c4:	4770      	bx	lr
 80753c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80753ca:	2b05      	cmp	r3, #5
 80753cc:	d801      	bhi.n	80753d2 <__hexdig_fun+0x1a>
 80753ce:	3847      	subs	r0, #71	; 0x47
 80753d0:	e7f7      	b.n	80753c2 <__hexdig_fun+0xa>
 80753d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80753d6:	2b05      	cmp	r3, #5
 80753d8:	d801      	bhi.n	80753de <__hexdig_fun+0x26>
 80753da:	3827      	subs	r0, #39	; 0x27
 80753dc:	e7f1      	b.n	80753c2 <__hexdig_fun+0xa>
 80753de:	2000      	movs	r0, #0
 80753e0:	4770      	bx	lr
	...

080753e4 <__gethex>:
 80753e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80753e8:	ed2d 8b02 	vpush	{d8}
 80753ec:	b089      	sub	sp, #36	; 0x24
 80753ee:	ee08 0a10 	vmov	s16, r0
 80753f2:	9304      	str	r3, [sp, #16]
 80753f4:	4bbc      	ldr	r3, [pc, #752]	; (80756e8 <__gethex+0x304>)
 80753f6:	681b      	ldr	r3, [r3, #0]
 80753f8:	9301      	str	r3, [sp, #4]
 80753fa:	4618      	mov	r0, r3
 80753fc:	468b      	mov	fp, r1
 80753fe:	4690      	mov	r8, r2
 8075400:	f7ea fef8 	bl	80601f4 <strlen>
 8075404:	9b01      	ldr	r3, [sp, #4]
 8075406:	f8db 2000 	ldr.w	r2, [fp]
 807540a:	4403      	add	r3, r0
 807540c:	4682      	mov	sl, r0
 807540e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8075412:	9305      	str	r3, [sp, #20]
 8075414:	1c93      	adds	r3, r2, #2
 8075416:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 807541a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 807541e:	32fe      	adds	r2, #254	; 0xfe
 8075420:	18d1      	adds	r1, r2, r3
 8075422:	461f      	mov	r7, r3
 8075424:	f813 0b01 	ldrb.w	r0, [r3], #1
 8075428:	9100      	str	r1, [sp, #0]
 807542a:	2830      	cmp	r0, #48	; 0x30
 807542c:	d0f8      	beq.n	8075420 <__gethex+0x3c>
 807542e:	f7ff ffc3 	bl	80753b8 <__hexdig_fun>
 8075432:	4604      	mov	r4, r0
 8075434:	2800      	cmp	r0, #0
 8075436:	d13a      	bne.n	80754ae <__gethex+0xca>
 8075438:	9901      	ldr	r1, [sp, #4]
 807543a:	4652      	mov	r2, sl
 807543c:	4638      	mov	r0, r7
 807543e:	f7fe f946 	bl	80736ce <strncmp>
 8075442:	4605      	mov	r5, r0
 8075444:	2800      	cmp	r0, #0
 8075446:	d168      	bne.n	807551a <__gethex+0x136>
 8075448:	f817 000a 	ldrb.w	r0, [r7, sl]
 807544c:	eb07 060a 	add.w	r6, r7, sl
 8075450:	f7ff ffb2 	bl	80753b8 <__hexdig_fun>
 8075454:	2800      	cmp	r0, #0
 8075456:	d062      	beq.n	807551e <__gethex+0x13a>
 8075458:	4633      	mov	r3, r6
 807545a:	7818      	ldrb	r0, [r3, #0]
 807545c:	2830      	cmp	r0, #48	; 0x30
 807545e:	461f      	mov	r7, r3
 8075460:	f103 0301 	add.w	r3, r3, #1
 8075464:	d0f9      	beq.n	807545a <__gethex+0x76>
 8075466:	f7ff ffa7 	bl	80753b8 <__hexdig_fun>
 807546a:	2301      	movs	r3, #1
 807546c:	fab0 f480 	clz	r4, r0
 8075470:	0964      	lsrs	r4, r4, #5
 8075472:	4635      	mov	r5, r6
 8075474:	9300      	str	r3, [sp, #0]
 8075476:	463a      	mov	r2, r7
 8075478:	4616      	mov	r6, r2
 807547a:	3201      	adds	r2, #1
 807547c:	7830      	ldrb	r0, [r6, #0]
 807547e:	f7ff ff9b 	bl	80753b8 <__hexdig_fun>
 8075482:	2800      	cmp	r0, #0
 8075484:	d1f8      	bne.n	8075478 <__gethex+0x94>
 8075486:	9901      	ldr	r1, [sp, #4]
 8075488:	4652      	mov	r2, sl
 807548a:	4630      	mov	r0, r6
 807548c:	f7fe f91f 	bl	80736ce <strncmp>
 8075490:	b980      	cbnz	r0, 80754b4 <__gethex+0xd0>
 8075492:	b94d      	cbnz	r5, 80754a8 <__gethex+0xc4>
 8075494:	eb06 050a 	add.w	r5, r6, sl
 8075498:	462a      	mov	r2, r5
 807549a:	4616      	mov	r6, r2
 807549c:	3201      	adds	r2, #1
 807549e:	7830      	ldrb	r0, [r6, #0]
 80754a0:	f7ff ff8a 	bl	80753b8 <__hexdig_fun>
 80754a4:	2800      	cmp	r0, #0
 80754a6:	d1f8      	bne.n	807549a <__gethex+0xb6>
 80754a8:	1bad      	subs	r5, r5, r6
 80754aa:	00ad      	lsls	r5, r5, #2
 80754ac:	e004      	b.n	80754b8 <__gethex+0xd4>
 80754ae:	2400      	movs	r4, #0
 80754b0:	4625      	mov	r5, r4
 80754b2:	e7e0      	b.n	8075476 <__gethex+0x92>
 80754b4:	2d00      	cmp	r5, #0
 80754b6:	d1f7      	bne.n	80754a8 <__gethex+0xc4>
 80754b8:	7833      	ldrb	r3, [r6, #0]
 80754ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80754be:	2b50      	cmp	r3, #80	; 0x50
 80754c0:	d13b      	bne.n	807553a <__gethex+0x156>
 80754c2:	7873      	ldrb	r3, [r6, #1]
 80754c4:	2b2b      	cmp	r3, #43	; 0x2b
 80754c6:	d02c      	beq.n	8075522 <__gethex+0x13e>
 80754c8:	2b2d      	cmp	r3, #45	; 0x2d
 80754ca:	d02e      	beq.n	807552a <__gethex+0x146>
 80754cc:	1c71      	adds	r1, r6, #1
 80754ce:	f04f 0900 	mov.w	r9, #0
 80754d2:	7808      	ldrb	r0, [r1, #0]
 80754d4:	f7ff ff70 	bl	80753b8 <__hexdig_fun>
 80754d8:	1e43      	subs	r3, r0, #1
 80754da:	b2db      	uxtb	r3, r3
 80754dc:	2b18      	cmp	r3, #24
 80754de:	d82c      	bhi.n	807553a <__gethex+0x156>
 80754e0:	f1a0 0210 	sub.w	r2, r0, #16
 80754e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80754e8:	f7ff ff66 	bl	80753b8 <__hexdig_fun>
 80754ec:	1e43      	subs	r3, r0, #1
 80754ee:	b2db      	uxtb	r3, r3
 80754f0:	2b18      	cmp	r3, #24
 80754f2:	d91d      	bls.n	8075530 <__gethex+0x14c>
 80754f4:	f1b9 0f00 	cmp.w	r9, #0
 80754f8:	d000      	beq.n	80754fc <__gethex+0x118>
 80754fa:	4252      	negs	r2, r2
 80754fc:	4415      	add	r5, r2
 80754fe:	f8cb 1000 	str.w	r1, [fp]
 8075502:	b1e4      	cbz	r4, 807553e <__gethex+0x15a>
 8075504:	9b00      	ldr	r3, [sp, #0]
 8075506:	2b00      	cmp	r3, #0
 8075508:	bf14      	ite	ne
 807550a:	2700      	movne	r7, #0
 807550c:	2706      	moveq	r7, #6
 807550e:	4638      	mov	r0, r7
 8075510:	b009      	add	sp, #36	; 0x24
 8075512:	ecbd 8b02 	vpop	{d8}
 8075516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 807551a:	463e      	mov	r6, r7
 807551c:	4625      	mov	r5, r4
 807551e:	2401      	movs	r4, #1
 8075520:	e7ca      	b.n	80754b8 <__gethex+0xd4>
 8075522:	f04f 0900 	mov.w	r9, #0
 8075526:	1cb1      	adds	r1, r6, #2
 8075528:	e7d3      	b.n	80754d2 <__gethex+0xee>
 807552a:	f04f 0901 	mov.w	r9, #1
 807552e:	e7fa      	b.n	8075526 <__gethex+0x142>
 8075530:	230a      	movs	r3, #10
 8075532:	fb03 0202 	mla	r2, r3, r2, r0
 8075536:	3a10      	subs	r2, #16
 8075538:	e7d4      	b.n	80754e4 <__gethex+0x100>
 807553a:	4631      	mov	r1, r6
 807553c:	e7df      	b.n	80754fe <__gethex+0x11a>
 807553e:	1bf3      	subs	r3, r6, r7
 8075540:	3b01      	subs	r3, #1
 8075542:	4621      	mov	r1, r4
 8075544:	2b07      	cmp	r3, #7
 8075546:	dc0b      	bgt.n	8075560 <__gethex+0x17c>
 8075548:	ee18 0a10 	vmov	r0, s16
 807554c:	f000 fa8e 	bl	8075a6c <_Balloc>
 8075550:	4604      	mov	r4, r0
 8075552:	b940      	cbnz	r0, 8075566 <__gethex+0x182>
 8075554:	4b65      	ldr	r3, [pc, #404]	; (80756ec <__gethex+0x308>)
 8075556:	4602      	mov	r2, r0
 8075558:	21de      	movs	r1, #222	; 0xde
 807555a:	4865      	ldr	r0, [pc, #404]	; (80756f0 <__gethex+0x30c>)
 807555c:	f001 fb3e 	bl	8076bdc <__assert_func>
 8075560:	3101      	adds	r1, #1
 8075562:	105b      	asrs	r3, r3, #1
 8075564:	e7ee      	b.n	8075544 <__gethex+0x160>
 8075566:	f100 0914 	add.w	r9, r0, #20
 807556a:	f04f 0b00 	mov.w	fp, #0
 807556e:	f1ca 0301 	rsb	r3, sl, #1
 8075572:	f8cd 9008 	str.w	r9, [sp, #8]
 8075576:	f8cd b000 	str.w	fp, [sp]
 807557a:	9306      	str	r3, [sp, #24]
 807557c:	42b7      	cmp	r7, r6
 807557e:	d340      	bcc.n	8075602 <__gethex+0x21e>
 8075580:	9802      	ldr	r0, [sp, #8]
 8075582:	9b00      	ldr	r3, [sp, #0]
 8075584:	f840 3b04 	str.w	r3, [r0], #4
 8075588:	eba0 0009 	sub.w	r0, r0, r9
 807558c:	1080      	asrs	r0, r0, #2
 807558e:	0146      	lsls	r6, r0, #5
 8075590:	6120      	str	r0, [r4, #16]
 8075592:	4618      	mov	r0, r3
 8075594:	f000 fb60 	bl	8075c58 <__hi0bits>
 8075598:	1a30      	subs	r0, r6, r0
 807559a:	f8d8 6000 	ldr.w	r6, [r8]
 807559e:	42b0      	cmp	r0, r6
 80755a0:	dd63      	ble.n	807566a <__gethex+0x286>
 80755a2:	1b87      	subs	r7, r0, r6
 80755a4:	4639      	mov	r1, r7
 80755a6:	4620      	mov	r0, r4
 80755a8:	f000 fefa 	bl	80763a0 <__any_on>
 80755ac:	4682      	mov	sl, r0
 80755ae:	b1a8      	cbz	r0, 80755dc <__gethex+0x1f8>
 80755b0:	1e7b      	subs	r3, r7, #1
 80755b2:	1159      	asrs	r1, r3, #5
 80755b4:	f003 021f 	and.w	r2, r3, #31
 80755b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80755bc:	f04f 0a01 	mov.w	sl, #1
 80755c0:	fa0a f202 	lsl.w	r2, sl, r2
 80755c4:	420a      	tst	r2, r1
 80755c6:	d009      	beq.n	80755dc <__gethex+0x1f8>
 80755c8:	4553      	cmp	r3, sl
 80755ca:	dd05      	ble.n	80755d8 <__gethex+0x1f4>
 80755cc:	1eb9      	subs	r1, r7, #2
 80755ce:	4620      	mov	r0, r4
 80755d0:	f000 fee6 	bl	80763a0 <__any_on>
 80755d4:	2800      	cmp	r0, #0
 80755d6:	d145      	bne.n	8075664 <__gethex+0x280>
 80755d8:	f04f 0a02 	mov.w	sl, #2
 80755dc:	4639      	mov	r1, r7
 80755de:	4620      	mov	r0, r4
 80755e0:	f7ff fe98 	bl	8075314 <rshift>
 80755e4:	443d      	add	r5, r7
 80755e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80755ea:	42ab      	cmp	r3, r5
 80755ec:	da4c      	bge.n	8075688 <__gethex+0x2a4>
 80755ee:	ee18 0a10 	vmov	r0, s16
 80755f2:	4621      	mov	r1, r4
 80755f4:	f000 fa7a 	bl	8075aec <_Bfree>
 80755f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80755fa:	2300      	movs	r3, #0
 80755fc:	6013      	str	r3, [r2, #0]
 80755fe:	27a3      	movs	r7, #163	; 0xa3
 8075600:	e785      	b.n	807550e <__gethex+0x12a>
 8075602:	1e73      	subs	r3, r6, #1
 8075604:	9a05      	ldr	r2, [sp, #20]
 8075606:	9303      	str	r3, [sp, #12]
 8075608:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 807560c:	4293      	cmp	r3, r2
 807560e:	d019      	beq.n	8075644 <__gethex+0x260>
 8075610:	f1bb 0f20 	cmp.w	fp, #32
 8075614:	d107      	bne.n	8075626 <__gethex+0x242>
 8075616:	9b02      	ldr	r3, [sp, #8]
 8075618:	9a00      	ldr	r2, [sp, #0]
 807561a:	f843 2b04 	str.w	r2, [r3], #4
 807561e:	9302      	str	r3, [sp, #8]
 8075620:	2300      	movs	r3, #0
 8075622:	9300      	str	r3, [sp, #0]
 8075624:	469b      	mov	fp, r3
 8075626:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 807562a:	f7ff fec5 	bl	80753b8 <__hexdig_fun>
 807562e:	9b00      	ldr	r3, [sp, #0]
 8075630:	f000 000f 	and.w	r0, r0, #15
 8075634:	fa00 f00b 	lsl.w	r0, r0, fp
 8075638:	4303      	orrs	r3, r0
 807563a:	9300      	str	r3, [sp, #0]
 807563c:	f10b 0b04 	add.w	fp, fp, #4
 8075640:	9b03      	ldr	r3, [sp, #12]
 8075642:	e00d      	b.n	8075660 <__gethex+0x27c>
 8075644:	9b03      	ldr	r3, [sp, #12]
 8075646:	9a06      	ldr	r2, [sp, #24]
 8075648:	4413      	add	r3, r2
 807564a:	42bb      	cmp	r3, r7
 807564c:	d3e0      	bcc.n	8075610 <__gethex+0x22c>
 807564e:	4618      	mov	r0, r3
 8075650:	9901      	ldr	r1, [sp, #4]
 8075652:	9307      	str	r3, [sp, #28]
 8075654:	4652      	mov	r2, sl
 8075656:	f7fe f83a 	bl	80736ce <strncmp>
 807565a:	9b07      	ldr	r3, [sp, #28]
 807565c:	2800      	cmp	r0, #0
 807565e:	d1d7      	bne.n	8075610 <__gethex+0x22c>
 8075660:	461e      	mov	r6, r3
 8075662:	e78b      	b.n	807557c <__gethex+0x198>
 8075664:	f04f 0a03 	mov.w	sl, #3
 8075668:	e7b8      	b.n	80755dc <__gethex+0x1f8>
 807566a:	da0a      	bge.n	8075682 <__gethex+0x29e>
 807566c:	1a37      	subs	r7, r6, r0
 807566e:	4621      	mov	r1, r4
 8075670:	ee18 0a10 	vmov	r0, s16
 8075674:	463a      	mov	r2, r7
 8075676:	f000 fc55 	bl	8075f24 <__lshift>
 807567a:	1bed      	subs	r5, r5, r7
 807567c:	4604      	mov	r4, r0
 807567e:	f100 0914 	add.w	r9, r0, #20
 8075682:	f04f 0a00 	mov.w	sl, #0
 8075686:	e7ae      	b.n	80755e6 <__gethex+0x202>
 8075688:	f8d8 0004 	ldr.w	r0, [r8, #4]
 807568c:	42a8      	cmp	r0, r5
 807568e:	dd72      	ble.n	8075776 <__gethex+0x392>
 8075690:	1b45      	subs	r5, r0, r5
 8075692:	42ae      	cmp	r6, r5
 8075694:	dc36      	bgt.n	8075704 <__gethex+0x320>
 8075696:	f8d8 300c 	ldr.w	r3, [r8, #12]
 807569a:	2b02      	cmp	r3, #2
 807569c:	d02a      	beq.n	80756f4 <__gethex+0x310>
 807569e:	2b03      	cmp	r3, #3
 80756a0:	d02c      	beq.n	80756fc <__gethex+0x318>
 80756a2:	2b01      	cmp	r3, #1
 80756a4:	d115      	bne.n	80756d2 <__gethex+0x2ee>
 80756a6:	42ae      	cmp	r6, r5
 80756a8:	d113      	bne.n	80756d2 <__gethex+0x2ee>
 80756aa:	2e01      	cmp	r6, #1
 80756ac:	d10b      	bne.n	80756c6 <__gethex+0x2e2>
 80756ae:	9a04      	ldr	r2, [sp, #16]
 80756b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80756b4:	6013      	str	r3, [r2, #0]
 80756b6:	2301      	movs	r3, #1
 80756b8:	6123      	str	r3, [r4, #16]
 80756ba:	f8c9 3000 	str.w	r3, [r9]
 80756be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80756c0:	2762      	movs	r7, #98	; 0x62
 80756c2:	601c      	str	r4, [r3, #0]
 80756c4:	e723      	b.n	807550e <__gethex+0x12a>
 80756c6:	1e71      	subs	r1, r6, #1
 80756c8:	4620      	mov	r0, r4
 80756ca:	f000 fe69 	bl	80763a0 <__any_on>
 80756ce:	2800      	cmp	r0, #0
 80756d0:	d1ed      	bne.n	80756ae <__gethex+0x2ca>
 80756d2:	ee18 0a10 	vmov	r0, s16
 80756d6:	4621      	mov	r1, r4
 80756d8:	f000 fa08 	bl	8075aec <_Bfree>
 80756dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80756de:	2300      	movs	r3, #0
 80756e0:	6013      	str	r3, [r2, #0]
 80756e2:	2750      	movs	r7, #80	; 0x50
 80756e4:	e713      	b.n	807550e <__gethex+0x12a>
 80756e6:	bf00      	nop
 80756e8:	08077aa0 	.word	0x08077aa0
 80756ec:	08077a24 	.word	0x08077a24
 80756f0:	08077a35 	.word	0x08077a35
 80756f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80756f6:	2b00      	cmp	r3, #0
 80756f8:	d1eb      	bne.n	80756d2 <__gethex+0x2ee>
 80756fa:	e7d8      	b.n	80756ae <__gethex+0x2ca>
 80756fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80756fe:	2b00      	cmp	r3, #0
 8075700:	d1d5      	bne.n	80756ae <__gethex+0x2ca>
 8075702:	e7e6      	b.n	80756d2 <__gethex+0x2ee>
 8075704:	1e6f      	subs	r7, r5, #1
 8075706:	f1ba 0f00 	cmp.w	sl, #0
 807570a:	d131      	bne.n	8075770 <__gethex+0x38c>
 807570c:	b127      	cbz	r7, 8075718 <__gethex+0x334>
 807570e:	4639      	mov	r1, r7
 8075710:	4620      	mov	r0, r4
 8075712:	f000 fe45 	bl	80763a0 <__any_on>
 8075716:	4682      	mov	sl, r0
 8075718:	117b      	asrs	r3, r7, #5
 807571a:	2101      	movs	r1, #1
 807571c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8075720:	f007 071f 	and.w	r7, r7, #31
 8075724:	fa01 f707 	lsl.w	r7, r1, r7
 8075728:	421f      	tst	r7, r3
 807572a:	4629      	mov	r1, r5
 807572c:	4620      	mov	r0, r4
 807572e:	bf18      	it	ne
 8075730:	f04a 0a02 	orrne.w	sl, sl, #2
 8075734:	1b76      	subs	r6, r6, r5
 8075736:	f7ff fded 	bl	8075314 <rshift>
 807573a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 807573e:	2702      	movs	r7, #2
 8075740:	f1ba 0f00 	cmp.w	sl, #0
 8075744:	d048      	beq.n	80757d8 <__gethex+0x3f4>
 8075746:	f8d8 300c 	ldr.w	r3, [r8, #12]
 807574a:	2b02      	cmp	r3, #2
 807574c:	d015      	beq.n	807577a <__gethex+0x396>
 807574e:	2b03      	cmp	r3, #3
 8075750:	d017      	beq.n	8075782 <__gethex+0x39e>
 8075752:	2b01      	cmp	r3, #1
 8075754:	d109      	bne.n	807576a <__gethex+0x386>
 8075756:	f01a 0f02 	tst.w	sl, #2
 807575a:	d006      	beq.n	807576a <__gethex+0x386>
 807575c:	f8d9 0000 	ldr.w	r0, [r9]
 8075760:	ea4a 0a00 	orr.w	sl, sl, r0
 8075764:	f01a 0f01 	tst.w	sl, #1
 8075768:	d10e      	bne.n	8075788 <__gethex+0x3a4>
 807576a:	f047 0710 	orr.w	r7, r7, #16
 807576e:	e033      	b.n	80757d8 <__gethex+0x3f4>
 8075770:	f04f 0a01 	mov.w	sl, #1
 8075774:	e7d0      	b.n	8075718 <__gethex+0x334>
 8075776:	2701      	movs	r7, #1
 8075778:	e7e2      	b.n	8075740 <__gethex+0x35c>
 807577a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 807577c:	f1c3 0301 	rsb	r3, r3, #1
 8075780:	9315      	str	r3, [sp, #84]	; 0x54
 8075782:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8075784:	2b00      	cmp	r3, #0
 8075786:	d0f0      	beq.n	807576a <__gethex+0x386>
 8075788:	f8d4 b010 	ldr.w	fp, [r4, #16]
 807578c:	f104 0314 	add.w	r3, r4, #20
 8075790:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8075794:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8075798:	f04f 0c00 	mov.w	ip, #0
 807579c:	4618      	mov	r0, r3
 807579e:	f853 2b04 	ldr.w	r2, [r3], #4
 80757a2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80757a6:	d01c      	beq.n	80757e2 <__gethex+0x3fe>
 80757a8:	3201      	adds	r2, #1
 80757aa:	6002      	str	r2, [r0, #0]
 80757ac:	2f02      	cmp	r7, #2
 80757ae:	f104 0314 	add.w	r3, r4, #20
 80757b2:	d13f      	bne.n	8075834 <__gethex+0x450>
 80757b4:	f8d8 2000 	ldr.w	r2, [r8]
 80757b8:	3a01      	subs	r2, #1
 80757ba:	42b2      	cmp	r2, r6
 80757bc:	d10a      	bne.n	80757d4 <__gethex+0x3f0>
 80757be:	1171      	asrs	r1, r6, #5
 80757c0:	2201      	movs	r2, #1
 80757c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80757c6:	f006 061f 	and.w	r6, r6, #31
 80757ca:	fa02 f606 	lsl.w	r6, r2, r6
 80757ce:	421e      	tst	r6, r3
 80757d0:	bf18      	it	ne
 80757d2:	4617      	movne	r7, r2
 80757d4:	f047 0720 	orr.w	r7, r7, #32
 80757d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80757da:	601c      	str	r4, [r3, #0]
 80757dc:	9b04      	ldr	r3, [sp, #16]
 80757de:	601d      	str	r5, [r3, #0]
 80757e0:	e695      	b.n	807550e <__gethex+0x12a>
 80757e2:	4299      	cmp	r1, r3
 80757e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80757e8:	d8d8      	bhi.n	807579c <__gethex+0x3b8>
 80757ea:	68a3      	ldr	r3, [r4, #8]
 80757ec:	459b      	cmp	fp, r3
 80757ee:	db19      	blt.n	8075824 <__gethex+0x440>
 80757f0:	6861      	ldr	r1, [r4, #4]
 80757f2:	ee18 0a10 	vmov	r0, s16
 80757f6:	3101      	adds	r1, #1
 80757f8:	f000 f938 	bl	8075a6c <_Balloc>
 80757fc:	4681      	mov	r9, r0
 80757fe:	b918      	cbnz	r0, 8075808 <__gethex+0x424>
 8075800:	4b1a      	ldr	r3, [pc, #104]	; (807586c <__gethex+0x488>)
 8075802:	4602      	mov	r2, r0
 8075804:	2184      	movs	r1, #132	; 0x84
 8075806:	e6a8      	b.n	807555a <__gethex+0x176>
 8075808:	6922      	ldr	r2, [r4, #16]
 807580a:	3202      	adds	r2, #2
 807580c:	f104 010c 	add.w	r1, r4, #12
 8075810:	0092      	lsls	r2, r2, #2
 8075812:	300c      	adds	r0, #12
 8075814:	f7fc ff8d 	bl	8072732 <memcpy>
 8075818:	4621      	mov	r1, r4
 807581a:	ee18 0a10 	vmov	r0, s16
 807581e:	f000 f965 	bl	8075aec <_Bfree>
 8075822:	464c      	mov	r4, r9
 8075824:	6923      	ldr	r3, [r4, #16]
 8075826:	1c5a      	adds	r2, r3, #1
 8075828:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 807582c:	6122      	str	r2, [r4, #16]
 807582e:	2201      	movs	r2, #1
 8075830:	615a      	str	r2, [r3, #20]
 8075832:	e7bb      	b.n	80757ac <__gethex+0x3c8>
 8075834:	6922      	ldr	r2, [r4, #16]
 8075836:	455a      	cmp	r2, fp
 8075838:	dd0b      	ble.n	8075852 <__gethex+0x46e>
 807583a:	2101      	movs	r1, #1
 807583c:	4620      	mov	r0, r4
 807583e:	f7ff fd69 	bl	8075314 <rshift>
 8075842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8075846:	3501      	adds	r5, #1
 8075848:	42ab      	cmp	r3, r5
 807584a:	f6ff aed0 	blt.w	80755ee <__gethex+0x20a>
 807584e:	2701      	movs	r7, #1
 8075850:	e7c0      	b.n	80757d4 <__gethex+0x3f0>
 8075852:	f016 061f 	ands.w	r6, r6, #31
 8075856:	d0fa      	beq.n	807584e <__gethex+0x46a>
 8075858:	449a      	add	sl, r3
 807585a:	f1c6 0620 	rsb	r6, r6, #32
 807585e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8075862:	f000 f9f9 	bl	8075c58 <__hi0bits>
 8075866:	42b0      	cmp	r0, r6
 8075868:	dbe7      	blt.n	807583a <__gethex+0x456>
 807586a:	e7f0      	b.n	807584e <__gethex+0x46a>
 807586c:	08077a24 	.word	0x08077a24

08075870 <L_shift>:
 8075870:	f1c2 0208 	rsb	r2, r2, #8
 8075874:	0092      	lsls	r2, r2, #2
 8075876:	b570      	push	{r4, r5, r6, lr}
 8075878:	f1c2 0620 	rsb	r6, r2, #32
 807587c:	6843      	ldr	r3, [r0, #4]
 807587e:	6804      	ldr	r4, [r0, #0]
 8075880:	fa03 f506 	lsl.w	r5, r3, r6
 8075884:	432c      	orrs	r4, r5
 8075886:	40d3      	lsrs	r3, r2
 8075888:	6004      	str	r4, [r0, #0]
 807588a:	f840 3f04 	str.w	r3, [r0, #4]!
 807588e:	4288      	cmp	r0, r1
 8075890:	d3f4      	bcc.n	807587c <L_shift+0xc>
 8075892:	bd70      	pop	{r4, r5, r6, pc}

08075894 <__match>:
 8075894:	b530      	push	{r4, r5, lr}
 8075896:	6803      	ldr	r3, [r0, #0]
 8075898:	3301      	adds	r3, #1
 807589a:	f811 4b01 	ldrb.w	r4, [r1], #1
 807589e:	b914      	cbnz	r4, 80758a6 <__match+0x12>
 80758a0:	6003      	str	r3, [r0, #0]
 80758a2:	2001      	movs	r0, #1
 80758a4:	bd30      	pop	{r4, r5, pc}
 80758a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80758aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80758ae:	2d19      	cmp	r5, #25
 80758b0:	bf98      	it	ls
 80758b2:	3220      	addls	r2, #32
 80758b4:	42a2      	cmp	r2, r4
 80758b6:	d0f0      	beq.n	807589a <__match+0x6>
 80758b8:	2000      	movs	r0, #0
 80758ba:	e7f3      	b.n	80758a4 <__match+0x10>

080758bc <__hexnan>:
 80758bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80758c0:	680b      	ldr	r3, [r1, #0]
 80758c2:	6801      	ldr	r1, [r0, #0]
 80758c4:	115e      	asrs	r6, r3, #5
 80758c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80758ca:	f013 031f 	ands.w	r3, r3, #31
 80758ce:	b087      	sub	sp, #28
 80758d0:	bf18      	it	ne
 80758d2:	3604      	addne	r6, #4
 80758d4:	2500      	movs	r5, #0
 80758d6:	1f37      	subs	r7, r6, #4
 80758d8:	4682      	mov	sl, r0
 80758da:	4690      	mov	r8, r2
 80758dc:	9301      	str	r3, [sp, #4]
 80758de:	f846 5c04 	str.w	r5, [r6, #-4]
 80758e2:	46b9      	mov	r9, r7
 80758e4:	463c      	mov	r4, r7
 80758e6:	9502      	str	r5, [sp, #8]
 80758e8:	46ab      	mov	fp, r5
 80758ea:	784a      	ldrb	r2, [r1, #1]
 80758ec:	1c4b      	adds	r3, r1, #1
 80758ee:	9303      	str	r3, [sp, #12]
 80758f0:	b342      	cbz	r2, 8075944 <__hexnan+0x88>
 80758f2:	4610      	mov	r0, r2
 80758f4:	9105      	str	r1, [sp, #20]
 80758f6:	9204      	str	r2, [sp, #16]
 80758f8:	f7ff fd5e 	bl	80753b8 <__hexdig_fun>
 80758fc:	2800      	cmp	r0, #0
 80758fe:	d14f      	bne.n	80759a0 <__hexnan+0xe4>
 8075900:	9a04      	ldr	r2, [sp, #16]
 8075902:	9905      	ldr	r1, [sp, #20]
 8075904:	2a20      	cmp	r2, #32
 8075906:	d818      	bhi.n	807593a <__hexnan+0x7e>
 8075908:	9b02      	ldr	r3, [sp, #8]
 807590a:	459b      	cmp	fp, r3
 807590c:	dd13      	ble.n	8075936 <__hexnan+0x7a>
 807590e:	454c      	cmp	r4, r9
 8075910:	d206      	bcs.n	8075920 <__hexnan+0x64>
 8075912:	2d07      	cmp	r5, #7
 8075914:	dc04      	bgt.n	8075920 <__hexnan+0x64>
 8075916:	462a      	mov	r2, r5
 8075918:	4649      	mov	r1, r9
 807591a:	4620      	mov	r0, r4
 807591c:	f7ff ffa8 	bl	8075870 <L_shift>
 8075920:	4544      	cmp	r4, r8
 8075922:	d950      	bls.n	80759c6 <__hexnan+0x10a>
 8075924:	2300      	movs	r3, #0
 8075926:	f1a4 0904 	sub.w	r9, r4, #4
 807592a:	f844 3c04 	str.w	r3, [r4, #-4]
 807592e:	f8cd b008 	str.w	fp, [sp, #8]
 8075932:	464c      	mov	r4, r9
 8075934:	461d      	mov	r5, r3
 8075936:	9903      	ldr	r1, [sp, #12]
 8075938:	e7d7      	b.n	80758ea <__hexnan+0x2e>
 807593a:	2a29      	cmp	r2, #41	; 0x29
 807593c:	d156      	bne.n	80759ec <__hexnan+0x130>
 807593e:	3102      	adds	r1, #2
 8075940:	f8ca 1000 	str.w	r1, [sl]
 8075944:	f1bb 0f00 	cmp.w	fp, #0
 8075948:	d050      	beq.n	80759ec <__hexnan+0x130>
 807594a:	454c      	cmp	r4, r9
 807594c:	d206      	bcs.n	807595c <__hexnan+0xa0>
 807594e:	2d07      	cmp	r5, #7
 8075950:	dc04      	bgt.n	807595c <__hexnan+0xa0>
 8075952:	462a      	mov	r2, r5
 8075954:	4649      	mov	r1, r9
 8075956:	4620      	mov	r0, r4
 8075958:	f7ff ff8a 	bl	8075870 <L_shift>
 807595c:	4544      	cmp	r4, r8
 807595e:	d934      	bls.n	80759ca <__hexnan+0x10e>
 8075960:	f1a8 0204 	sub.w	r2, r8, #4
 8075964:	4623      	mov	r3, r4
 8075966:	f853 1b04 	ldr.w	r1, [r3], #4
 807596a:	f842 1f04 	str.w	r1, [r2, #4]!
 807596e:	429f      	cmp	r7, r3
 8075970:	d2f9      	bcs.n	8075966 <__hexnan+0xaa>
 8075972:	1b3b      	subs	r3, r7, r4
 8075974:	f023 0303 	bic.w	r3, r3, #3
 8075978:	3304      	adds	r3, #4
 807597a:	3401      	adds	r4, #1
 807597c:	3e03      	subs	r6, #3
 807597e:	42b4      	cmp	r4, r6
 8075980:	bf88      	it	hi
 8075982:	2304      	movhi	r3, #4
 8075984:	4443      	add	r3, r8
 8075986:	2200      	movs	r2, #0
 8075988:	f843 2b04 	str.w	r2, [r3], #4
 807598c:	429f      	cmp	r7, r3
 807598e:	d2fb      	bcs.n	8075988 <__hexnan+0xcc>
 8075990:	683b      	ldr	r3, [r7, #0]
 8075992:	b91b      	cbnz	r3, 807599c <__hexnan+0xe0>
 8075994:	4547      	cmp	r7, r8
 8075996:	d127      	bne.n	80759e8 <__hexnan+0x12c>
 8075998:	2301      	movs	r3, #1
 807599a:	603b      	str	r3, [r7, #0]
 807599c:	2005      	movs	r0, #5
 807599e:	e026      	b.n	80759ee <__hexnan+0x132>
 80759a0:	3501      	adds	r5, #1
 80759a2:	2d08      	cmp	r5, #8
 80759a4:	f10b 0b01 	add.w	fp, fp, #1
 80759a8:	dd06      	ble.n	80759b8 <__hexnan+0xfc>
 80759aa:	4544      	cmp	r4, r8
 80759ac:	d9c3      	bls.n	8075936 <__hexnan+0x7a>
 80759ae:	2300      	movs	r3, #0
 80759b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80759b4:	2501      	movs	r5, #1
 80759b6:	3c04      	subs	r4, #4
 80759b8:	6822      	ldr	r2, [r4, #0]
 80759ba:	f000 000f 	and.w	r0, r0, #15
 80759be:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80759c2:	6022      	str	r2, [r4, #0]
 80759c4:	e7b7      	b.n	8075936 <__hexnan+0x7a>
 80759c6:	2508      	movs	r5, #8
 80759c8:	e7b5      	b.n	8075936 <__hexnan+0x7a>
 80759ca:	9b01      	ldr	r3, [sp, #4]
 80759cc:	2b00      	cmp	r3, #0
 80759ce:	d0df      	beq.n	8075990 <__hexnan+0xd4>
 80759d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80759d4:	f1c3 0320 	rsb	r3, r3, #32
 80759d8:	fa22 f303 	lsr.w	r3, r2, r3
 80759dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80759e0:	401a      	ands	r2, r3
 80759e2:	f846 2c04 	str.w	r2, [r6, #-4]
 80759e6:	e7d3      	b.n	8075990 <__hexnan+0xd4>
 80759e8:	3f04      	subs	r7, #4
 80759ea:	e7d1      	b.n	8075990 <__hexnan+0xd4>
 80759ec:	2004      	movs	r0, #4
 80759ee:	b007      	add	sp, #28
 80759f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080759f4 <_localeconv_r>:
 80759f4:	4800      	ldr	r0, [pc, #0]	; (80759f8 <_localeconv_r+0x4>)
 80759f6:	4770      	bx	lr
 80759f8:	20000180 	.word	0x20000180

080759fc <_lseek_r>:
 80759fc:	b538      	push	{r3, r4, r5, lr}
 80759fe:	4d07      	ldr	r5, [pc, #28]	; (8075a1c <_lseek_r+0x20>)
 8075a00:	4604      	mov	r4, r0
 8075a02:	4608      	mov	r0, r1
 8075a04:	4611      	mov	r1, r2
 8075a06:	2200      	movs	r2, #0
 8075a08:	602a      	str	r2, [r5, #0]
 8075a0a:	461a      	mov	r2, r3
 8075a0c:	f7ed fe16 	bl	806363c <_lseek>
 8075a10:	1c43      	adds	r3, r0, #1
 8075a12:	d102      	bne.n	8075a1a <_lseek_r+0x1e>
 8075a14:	682b      	ldr	r3, [r5, #0]
 8075a16:	b103      	cbz	r3, 8075a1a <_lseek_r+0x1e>
 8075a18:	6023      	str	r3, [r4, #0]
 8075a1a:	bd38      	pop	{r3, r4, r5, pc}
 8075a1c:	20005d30 	.word	0x20005d30

08075a20 <malloc>:
 8075a20:	4b02      	ldr	r3, [pc, #8]	; (8075a2c <malloc+0xc>)
 8075a22:	4601      	mov	r1, r0
 8075a24:	6818      	ldr	r0, [r3, #0]
 8075a26:	f7fc be9b 	b.w	8072760 <_malloc_r>
 8075a2a:	bf00      	nop
 8075a2c:	20000028 	.word	0x20000028

08075a30 <__ascii_mbtowc>:
 8075a30:	b082      	sub	sp, #8
 8075a32:	b901      	cbnz	r1, 8075a36 <__ascii_mbtowc+0x6>
 8075a34:	a901      	add	r1, sp, #4
 8075a36:	b142      	cbz	r2, 8075a4a <__ascii_mbtowc+0x1a>
 8075a38:	b14b      	cbz	r3, 8075a4e <__ascii_mbtowc+0x1e>
 8075a3a:	7813      	ldrb	r3, [r2, #0]
 8075a3c:	600b      	str	r3, [r1, #0]
 8075a3e:	7812      	ldrb	r2, [r2, #0]
 8075a40:	1e10      	subs	r0, r2, #0
 8075a42:	bf18      	it	ne
 8075a44:	2001      	movne	r0, #1
 8075a46:	b002      	add	sp, #8
 8075a48:	4770      	bx	lr
 8075a4a:	4610      	mov	r0, r2
 8075a4c:	e7fb      	b.n	8075a46 <__ascii_mbtowc+0x16>
 8075a4e:	f06f 0001 	mvn.w	r0, #1
 8075a52:	e7f8      	b.n	8075a46 <__ascii_mbtowc+0x16>

08075a54 <__malloc_lock>:
 8075a54:	4801      	ldr	r0, [pc, #4]	; (8075a5c <__malloc_lock+0x8>)
 8075a56:	f7fc be6a 	b.w	807272e <__retarget_lock_acquire_recursive>
 8075a5a:	bf00      	nop
 8075a5c:	20005d28 	.word	0x20005d28

08075a60 <__malloc_unlock>:
 8075a60:	4801      	ldr	r0, [pc, #4]	; (8075a68 <__malloc_unlock+0x8>)
 8075a62:	f7fc be65 	b.w	8072730 <__retarget_lock_release_recursive>
 8075a66:	bf00      	nop
 8075a68:	20005d28 	.word	0x20005d28

08075a6c <_Balloc>:
 8075a6c:	b570      	push	{r4, r5, r6, lr}
 8075a6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8075a70:	4604      	mov	r4, r0
 8075a72:	460d      	mov	r5, r1
 8075a74:	b976      	cbnz	r6, 8075a94 <_Balloc+0x28>
 8075a76:	2010      	movs	r0, #16
 8075a78:	f7ff ffd2 	bl	8075a20 <malloc>
 8075a7c:	4602      	mov	r2, r0
 8075a7e:	6260      	str	r0, [r4, #36]	; 0x24
 8075a80:	b920      	cbnz	r0, 8075a8c <_Balloc+0x20>
 8075a82:	4b18      	ldr	r3, [pc, #96]	; (8075ae4 <_Balloc+0x78>)
 8075a84:	4818      	ldr	r0, [pc, #96]	; (8075ae8 <_Balloc+0x7c>)
 8075a86:	2166      	movs	r1, #102	; 0x66
 8075a88:	f001 f8a8 	bl	8076bdc <__assert_func>
 8075a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8075a90:	6006      	str	r6, [r0, #0]
 8075a92:	60c6      	str	r6, [r0, #12]
 8075a94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8075a96:	68f3      	ldr	r3, [r6, #12]
 8075a98:	b183      	cbz	r3, 8075abc <_Balloc+0x50>
 8075a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8075a9c:	68db      	ldr	r3, [r3, #12]
 8075a9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8075aa2:	b9b8      	cbnz	r0, 8075ad4 <_Balloc+0x68>
 8075aa4:	2101      	movs	r1, #1
 8075aa6:	fa01 f605 	lsl.w	r6, r1, r5
 8075aaa:	1d72      	adds	r2, r6, #5
 8075aac:	0092      	lsls	r2, r2, #2
 8075aae:	4620      	mov	r0, r4
 8075ab0:	f000 fc97 	bl	80763e2 <_calloc_r>
 8075ab4:	b160      	cbz	r0, 8075ad0 <_Balloc+0x64>
 8075ab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8075aba:	e00e      	b.n	8075ada <_Balloc+0x6e>
 8075abc:	2221      	movs	r2, #33	; 0x21
 8075abe:	2104      	movs	r1, #4
 8075ac0:	4620      	mov	r0, r4
 8075ac2:	f000 fc8e 	bl	80763e2 <_calloc_r>
 8075ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8075ac8:	60f0      	str	r0, [r6, #12]
 8075aca:	68db      	ldr	r3, [r3, #12]
 8075acc:	2b00      	cmp	r3, #0
 8075ace:	d1e4      	bne.n	8075a9a <_Balloc+0x2e>
 8075ad0:	2000      	movs	r0, #0
 8075ad2:	bd70      	pop	{r4, r5, r6, pc}
 8075ad4:	6802      	ldr	r2, [r0, #0]
 8075ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8075ada:	2300      	movs	r3, #0
 8075adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8075ae0:	e7f7      	b.n	8075ad2 <_Balloc+0x66>
 8075ae2:	bf00      	nop
 8075ae4:	080779ae 	.word	0x080779ae
 8075ae8:	08077ab4 	.word	0x08077ab4

08075aec <_Bfree>:
 8075aec:	b570      	push	{r4, r5, r6, lr}
 8075aee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8075af0:	4605      	mov	r5, r0
 8075af2:	460c      	mov	r4, r1
 8075af4:	b976      	cbnz	r6, 8075b14 <_Bfree+0x28>
 8075af6:	2010      	movs	r0, #16
 8075af8:	f7ff ff92 	bl	8075a20 <malloc>
 8075afc:	4602      	mov	r2, r0
 8075afe:	6268      	str	r0, [r5, #36]	; 0x24
 8075b00:	b920      	cbnz	r0, 8075b0c <_Bfree+0x20>
 8075b02:	4b09      	ldr	r3, [pc, #36]	; (8075b28 <_Bfree+0x3c>)
 8075b04:	4809      	ldr	r0, [pc, #36]	; (8075b2c <_Bfree+0x40>)
 8075b06:	218a      	movs	r1, #138	; 0x8a
 8075b08:	f001 f868 	bl	8076bdc <__assert_func>
 8075b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8075b10:	6006      	str	r6, [r0, #0]
 8075b12:	60c6      	str	r6, [r0, #12]
 8075b14:	b13c      	cbz	r4, 8075b26 <_Bfree+0x3a>
 8075b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8075b18:	6862      	ldr	r2, [r4, #4]
 8075b1a:	68db      	ldr	r3, [r3, #12]
 8075b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8075b20:	6021      	str	r1, [r4, #0]
 8075b22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8075b26:	bd70      	pop	{r4, r5, r6, pc}
 8075b28:	080779ae 	.word	0x080779ae
 8075b2c:	08077ab4 	.word	0x08077ab4

08075b30 <__multadd>:
 8075b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8075b34:	690e      	ldr	r6, [r1, #16]
 8075b36:	4607      	mov	r7, r0
 8075b38:	4698      	mov	r8, r3
 8075b3a:	460c      	mov	r4, r1
 8075b3c:	f101 0014 	add.w	r0, r1, #20
 8075b40:	2300      	movs	r3, #0
 8075b42:	6805      	ldr	r5, [r0, #0]
 8075b44:	b2a9      	uxth	r1, r5
 8075b46:	fb02 8101 	mla	r1, r2, r1, r8
 8075b4a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8075b4e:	0c2d      	lsrs	r5, r5, #16
 8075b50:	fb02 c505 	mla	r5, r2, r5, ip
 8075b54:	b289      	uxth	r1, r1
 8075b56:	3301      	adds	r3, #1
 8075b58:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8075b5c:	429e      	cmp	r6, r3
 8075b5e:	f840 1b04 	str.w	r1, [r0], #4
 8075b62:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8075b66:	dcec      	bgt.n	8075b42 <__multadd+0x12>
 8075b68:	f1b8 0f00 	cmp.w	r8, #0
 8075b6c:	d022      	beq.n	8075bb4 <__multadd+0x84>
 8075b6e:	68a3      	ldr	r3, [r4, #8]
 8075b70:	42b3      	cmp	r3, r6
 8075b72:	dc19      	bgt.n	8075ba8 <__multadd+0x78>
 8075b74:	6861      	ldr	r1, [r4, #4]
 8075b76:	4638      	mov	r0, r7
 8075b78:	3101      	adds	r1, #1
 8075b7a:	f7ff ff77 	bl	8075a6c <_Balloc>
 8075b7e:	4605      	mov	r5, r0
 8075b80:	b928      	cbnz	r0, 8075b8e <__multadd+0x5e>
 8075b82:	4602      	mov	r2, r0
 8075b84:	4b0d      	ldr	r3, [pc, #52]	; (8075bbc <__multadd+0x8c>)
 8075b86:	480e      	ldr	r0, [pc, #56]	; (8075bc0 <__multadd+0x90>)
 8075b88:	21b5      	movs	r1, #181	; 0xb5
 8075b8a:	f001 f827 	bl	8076bdc <__assert_func>
 8075b8e:	6922      	ldr	r2, [r4, #16]
 8075b90:	3202      	adds	r2, #2
 8075b92:	f104 010c 	add.w	r1, r4, #12
 8075b96:	0092      	lsls	r2, r2, #2
 8075b98:	300c      	adds	r0, #12
 8075b9a:	f7fc fdca 	bl	8072732 <memcpy>
 8075b9e:	4621      	mov	r1, r4
 8075ba0:	4638      	mov	r0, r7
 8075ba2:	f7ff ffa3 	bl	8075aec <_Bfree>
 8075ba6:	462c      	mov	r4, r5
 8075ba8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8075bac:	3601      	adds	r6, #1
 8075bae:	f8c3 8014 	str.w	r8, [r3, #20]
 8075bb2:	6126      	str	r6, [r4, #16]
 8075bb4:	4620      	mov	r0, r4
 8075bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8075bba:	bf00      	nop
 8075bbc:	08077a24 	.word	0x08077a24
 8075bc0:	08077ab4 	.word	0x08077ab4

08075bc4 <__s2b>:
 8075bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8075bc8:	460c      	mov	r4, r1
 8075bca:	4615      	mov	r5, r2
 8075bcc:	461f      	mov	r7, r3
 8075bce:	2209      	movs	r2, #9
 8075bd0:	3308      	adds	r3, #8
 8075bd2:	4606      	mov	r6, r0
 8075bd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8075bd8:	2100      	movs	r1, #0
 8075bda:	2201      	movs	r2, #1
 8075bdc:	429a      	cmp	r2, r3
 8075bde:	db09      	blt.n	8075bf4 <__s2b+0x30>
 8075be0:	4630      	mov	r0, r6
 8075be2:	f7ff ff43 	bl	8075a6c <_Balloc>
 8075be6:	b940      	cbnz	r0, 8075bfa <__s2b+0x36>
 8075be8:	4602      	mov	r2, r0
 8075bea:	4b19      	ldr	r3, [pc, #100]	; (8075c50 <__s2b+0x8c>)
 8075bec:	4819      	ldr	r0, [pc, #100]	; (8075c54 <__s2b+0x90>)
 8075bee:	21ce      	movs	r1, #206	; 0xce
 8075bf0:	f000 fff4 	bl	8076bdc <__assert_func>
 8075bf4:	0052      	lsls	r2, r2, #1
 8075bf6:	3101      	adds	r1, #1
 8075bf8:	e7f0      	b.n	8075bdc <__s2b+0x18>
 8075bfa:	9b08      	ldr	r3, [sp, #32]
 8075bfc:	6143      	str	r3, [r0, #20]
 8075bfe:	2d09      	cmp	r5, #9
 8075c00:	f04f 0301 	mov.w	r3, #1
 8075c04:	6103      	str	r3, [r0, #16]
 8075c06:	dd16      	ble.n	8075c36 <__s2b+0x72>
 8075c08:	f104 0909 	add.w	r9, r4, #9
 8075c0c:	46c8      	mov	r8, r9
 8075c0e:	442c      	add	r4, r5
 8075c10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8075c14:	4601      	mov	r1, r0
 8075c16:	3b30      	subs	r3, #48	; 0x30
 8075c18:	220a      	movs	r2, #10
 8075c1a:	4630      	mov	r0, r6
 8075c1c:	f7ff ff88 	bl	8075b30 <__multadd>
 8075c20:	45a0      	cmp	r8, r4
 8075c22:	d1f5      	bne.n	8075c10 <__s2b+0x4c>
 8075c24:	f1a5 0408 	sub.w	r4, r5, #8
 8075c28:	444c      	add	r4, r9
 8075c2a:	1b2d      	subs	r5, r5, r4
 8075c2c:	1963      	adds	r3, r4, r5
 8075c2e:	42bb      	cmp	r3, r7
 8075c30:	db04      	blt.n	8075c3c <__s2b+0x78>
 8075c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8075c36:	340a      	adds	r4, #10
 8075c38:	2509      	movs	r5, #9
 8075c3a:	e7f6      	b.n	8075c2a <__s2b+0x66>
 8075c3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8075c40:	4601      	mov	r1, r0
 8075c42:	3b30      	subs	r3, #48	; 0x30
 8075c44:	220a      	movs	r2, #10
 8075c46:	4630      	mov	r0, r6
 8075c48:	f7ff ff72 	bl	8075b30 <__multadd>
 8075c4c:	e7ee      	b.n	8075c2c <__s2b+0x68>
 8075c4e:	bf00      	nop
 8075c50:	08077a24 	.word	0x08077a24
 8075c54:	08077ab4 	.word	0x08077ab4

08075c58 <__hi0bits>:
 8075c58:	0c03      	lsrs	r3, r0, #16
 8075c5a:	041b      	lsls	r3, r3, #16
 8075c5c:	b9d3      	cbnz	r3, 8075c94 <__hi0bits+0x3c>
 8075c5e:	0400      	lsls	r0, r0, #16
 8075c60:	2310      	movs	r3, #16
 8075c62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8075c66:	bf04      	itt	eq
 8075c68:	0200      	lsleq	r0, r0, #8
 8075c6a:	3308      	addeq	r3, #8
 8075c6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8075c70:	bf04      	itt	eq
 8075c72:	0100      	lsleq	r0, r0, #4
 8075c74:	3304      	addeq	r3, #4
 8075c76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8075c7a:	bf04      	itt	eq
 8075c7c:	0080      	lsleq	r0, r0, #2
 8075c7e:	3302      	addeq	r3, #2
 8075c80:	2800      	cmp	r0, #0
 8075c82:	db05      	blt.n	8075c90 <__hi0bits+0x38>
 8075c84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8075c88:	f103 0301 	add.w	r3, r3, #1
 8075c8c:	bf08      	it	eq
 8075c8e:	2320      	moveq	r3, #32
 8075c90:	4618      	mov	r0, r3
 8075c92:	4770      	bx	lr
 8075c94:	2300      	movs	r3, #0
 8075c96:	e7e4      	b.n	8075c62 <__hi0bits+0xa>

08075c98 <__lo0bits>:
 8075c98:	6803      	ldr	r3, [r0, #0]
 8075c9a:	f013 0207 	ands.w	r2, r3, #7
 8075c9e:	4601      	mov	r1, r0
 8075ca0:	d00b      	beq.n	8075cba <__lo0bits+0x22>
 8075ca2:	07da      	lsls	r2, r3, #31
 8075ca4:	d424      	bmi.n	8075cf0 <__lo0bits+0x58>
 8075ca6:	0798      	lsls	r0, r3, #30
 8075ca8:	bf49      	itett	mi
 8075caa:	085b      	lsrmi	r3, r3, #1
 8075cac:	089b      	lsrpl	r3, r3, #2
 8075cae:	2001      	movmi	r0, #1
 8075cb0:	600b      	strmi	r3, [r1, #0]
 8075cb2:	bf5c      	itt	pl
 8075cb4:	600b      	strpl	r3, [r1, #0]
 8075cb6:	2002      	movpl	r0, #2
 8075cb8:	4770      	bx	lr
 8075cba:	b298      	uxth	r0, r3
 8075cbc:	b9b0      	cbnz	r0, 8075cec <__lo0bits+0x54>
 8075cbe:	0c1b      	lsrs	r3, r3, #16
 8075cc0:	2010      	movs	r0, #16
 8075cc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8075cc6:	bf04      	itt	eq
 8075cc8:	0a1b      	lsreq	r3, r3, #8
 8075cca:	3008      	addeq	r0, #8
 8075ccc:	071a      	lsls	r2, r3, #28
 8075cce:	bf04      	itt	eq
 8075cd0:	091b      	lsreq	r3, r3, #4
 8075cd2:	3004      	addeq	r0, #4
 8075cd4:	079a      	lsls	r2, r3, #30
 8075cd6:	bf04      	itt	eq
 8075cd8:	089b      	lsreq	r3, r3, #2
 8075cda:	3002      	addeq	r0, #2
 8075cdc:	07da      	lsls	r2, r3, #31
 8075cde:	d403      	bmi.n	8075ce8 <__lo0bits+0x50>
 8075ce0:	085b      	lsrs	r3, r3, #1
 8075ce2:	f100 0001 	add.w	r0, r0, #1
 8075ce6:	d005      	beq.n	8075cf4 <__lo0bits+0x5c>
 8075ce8:	600b      	str	r3, [r1, #0]
 8075cea:	4770      	bx	lr
 8075cec:	4610      	mov	r0, r2
 8075cee:	e7e8      	b.n	8075cc2 <__lo0bits+0x2a>
 8075cf0:	2000      	movs	r0, #0
 8075cf2:	4770      	bx	lr
 8075cf4:	2020      	movs	r0, #32
 8075cf6:	4770      	bx	lr

08075cf8 <__i2b>:
 8075cf8:	b510      	push	{r4, lr}
 8075cfa:	460c      	mov	r4, r1
 8075cfc:	2101      	movs	r1, #1
 8075cfe:	f7ff feb5 	bl	8075a6c <_Balloc>
 8075d02:	4602      	mov	r2, r0
 8075d04:	b928      	cbnz	r0, 8075d12 <__i2b+0x1a>
 8075d06:	4b05      	ldr	r3, [pc, #20]	; (8075d1c <__i2b+0x24>)
 8075d08:	4805      	ldr	r0, [pc, #20]	; (8075d20 <__i2b+0x28>)
 8075d0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8075d0e:	f000 ff65 	bl	8076bdc <__assert_func>
 8075d12:	2301      	movs	r3, #1
 8075d14:	6144      	str	r4, [r0, #20]
 8075d16:	6103      	str	r3, [r0, #16]
 8075d18:	bd10      	pop	{r4, pc}
 8075d1a:	bf00      	nop
 8075d1c:	08077a24 	.word	0x08077a24
 8075d20:	08077ab4 	.word	0x08077ab4

08075d24 <__multiply>:
 8075d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8075d28:	4614      	mov	r4, r2
 8075d2a:	690a      	ldr	r2, [r1, #16]
 8075d2c:	6923      	ldr	r3, [r4, #16]
 8075d2e:	429a      	cmp	r2, r3
 8075d30:	bfb8      	it	lt
 8075d32:	460b      	movlt	r3, r1
 8075d34:	460d      	mov	r5, r1
 8075d36:	bfbc      	itt	lt
 8075d38:	4625      	movlt	r5, r4
 8075d3a:	461c      	movlt	r4, r3
 8075d3c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8075d40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8075d44:	68ab      	ldr	r3, [r5, #8]
 8075d46:	6869      	ldr	r1, [r5, #4]
 8075d48:	eb0a 0709 	add.w	r7, sl, r9
 8075d4c:	42bb      	cmp	r3, r7
 8075d4e:	b085      	sub	sp, #20
 8075d50:	bfb8      	it	lt
 8075d52:	3101      	addlt	r1, #1
 8075d54:	f7ff fe8a 	bl	8075a6c <_Balloc>
 8075d58:	b930      	cbnz	r0, 8075d68 <__multiply+0x44>
 8075d5a:	4602      	mov	r2, r0
 8075d5c:	4b42      	ldr	r3, [pc, #264]	; (8075e68 <__multiply+0x144>)
 8075d5e:	4843      	ldr	r0, [pc, #268]	; (8075e6c <__multiply+0x148>)
 8075d60:	f240 115d 	movw	r1, #349	; 0x15d
 8075d64:	f000 ff3a 	bl	8076bdc <__assert_func>
 8075d68:	f100 0614 	add.w	r6, r0, #20
 8075d6c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8075d70:	4633      	mov	r3, r6
 8075d72:	2200      	movs	r2, #0
 8075d74:	4543      	cmp	r3, r8
 8075d76:	d31e      	bcc.n	8075db6 <__multiply+0x92>
 8075d78:	f105 0c14 	add.w	ip, r5, #20
 8075d7c:	f104 0314 	add.w	r3, r4, #20
 8075d80:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8075d84:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8075d88:	9202      	str	r2, [sp, #8]
 8075d8a:	ebac 0205 	sub.w	r2, ip, r5
 8075d8e:	3a15      	subs	r2, #21
 8075d90:	f022 0203 	bic.w	r2, r2, #3
 8075d94:	3204      	adds	r2, #4
 8075d96:	f105 0115 	add.w	r1, r5, #21
 8075d9a:	458c      	cmp	ip, r1
 8075d9c:	bf38      	it	cc
 8075d9e:	2204      	movcc	r2, #4
 8075da0:	9201      	str	r2, [sp, #4]
 8075da2:	9a02      	ldr	r2, [sp, #8]
 8075da4:	9303      	str	r3, [sp, #12]
 8075da6:	429a      	cmp	r2, r3
 8075da8:	d808      	bhi.n	8075dbc <__multiply+0x98>
 8075daa:	2f00      	cmp	r7, #0
 8075dac:	dc55      	bgt.n	8075e5a <__multiply+0x136>
 8075dae:	6107      	str	r7, [r0, #16]
 8075db0:	b005      	add	sp, #20
 8075db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8075db6:	f843 2b04 	str.w	r2, [r3], #4
 8075dba:	e7db      	b.n	8075d74 <__multiply+0x50>
 8075dbc:	f8b3 a000 	ldrh.w	sl, [r3]
 8075dc0:	f1ba 0f00 	cmp.w	sl, #0
 8075dc4:	d020      	beq.n	8075e08 <__multiply+0xe4>
 8075dc6:	f105 0e14 	add.w	lr, r5, #20
 8075dca:	46b1      	mov	r9, r6
 8075dcc:	2200      	movs	r2, #0
 8075dce:	f85e 4b04 	ldr.w	r4, [lr], #4
 8075dd2:	f8d9 b000 	ldr.w	fp, [r9]
 8075dd6:	b2a1      	uxth	r1, r4
 8075dd8:	fa1f fb8b 	uxth.w	fp, fp
 8075ddc:	fb0a b101 	mla	r1, sl, r1, fp
 8075de0:	4411      	add	r1, r2
 8075de2:	f8d9 2000 	ldr.w	r2, [r9]
 8075de6:	0c24      	lsrs	r4, r4, #16
 8075de8:	0c12      	lsrs	r2, r2, #16
 8075dea:	fb0a 2404 	mla	r4, sl, r4, r2
 8075dee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8075df2:	b289      	uxth	r1, r1
 8075df4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8075df8:	45f4      	cmp	ip, lr
 8075dfa:	f849 1b04 	str.w	r1, [r9], #4
 8075dfe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8075e02:	d8e4      	bhi.n	8075dce <__multiply+0xaa>
 8075e04:	9901      	ldr	r1, [sp, #4]
 8075e06:	5072      	str	r2, [r6, r1]
 8075e08:	9a03      	ldr	r2, [sp, #12]
 8075e0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8075e0e:	3304      	adds	r3, #4
 8075e10:	f1b9 0f00 	cmp.w	r9, #0
 8075e14:	d01f      	beq.n	8075e56 <__multiply+0x132>
 8075e16:	6834      	ldr	r4, [r6, #0]
 8075e18:	f105 0114 	add.w	r1, r5, #20
 8075e1c:	46b6      	mov	lr, r6
 8075e1e:	f04f 0a00 	mov.w	sl, #0
 8075e22:	880a      	ldrh	r2, [r1, #0]
 8075e24:	f8be b002 	ldrh.w	fp, [lr, #2]
 8075e28:	fb09 b202 	mla	r2, r9, r2, fp
 8075e2c:	4492      	add	sl, r2
 8075e2e:	b2a4      	uxth	r4, r4
 8075e30:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8075e34:	f84e 4b04 	str.w	r4, [lr], #4
 8075e38:	f851 4b04 	ldr.w	r4, [r1], #4
 8075e3c:	f8be 2000 	ldrh.w	r2, [lr]
 8075e40:	0c24      	lsrs	r4, r4, #16
 8075e42:	fb09 2404 	mla	r4, r9, r4, r2
 8075e46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8075e4a:	458c      	cmp	ip, r1
 8075e4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8075e50:	d8e7      	bhi.n	8075e22 <__multiply+0xfe>
 8075e52:	9a01      	ldr	r2, [sp, #4]
 8075e54:	50b4      	str	r4, [r6, r2]
 8075e56:	3604      	adds	r6, #4
 8075e58:	e7a3      	b.n	8075da2 <__multiply+0x7e>
 8075e5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8075e5e:	2b00      	cmp	r3, #0
 8075e60:	d1a5      	bne.n	8075dae <__multiply+0x8a>
 8075e62:	3f01      	subs	r7, #1
 8075e64:	e7a1      	b.n	8075daa <__multiply+0x86>
 8075e66:	bf00      	nop
 8075e68:	08077a24 	.word	0x08077a24
 8075e6c:	08077ab4 	.word	0x08077ab4

08075e70 <__pow5mult>:
 8075e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8075e74:	4615      	mov	r5, r2
 8075e76:	f012 0203 	ands.w	r2, r2, #3
 8075e7a:	4606      	mov	r6, r0
 8075e7c:	460f      	mov	r7, r1
 8075e7e:	d007      	beq.n	8075e90 <__pow5mult+0x20>
 8075e80:	4c25      	ldr	r4, [pc, #148]	; (8075f18 <__pow5mult+0xa8>)
 8075e82:	3a01      	subs	r2, #1
 8075e84:	2300      	movs	r3, #0
 8075e86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8075e8a:	f7ff fe51 	bl	8075b30 <__multadd>
 8075e8e:	4607      	mov	r7, r0
 8075e90:	10ad      	asrs	r5, r5, #2
 8075e92:	d03d      	beq.n	8075f10 <__pow5mult+0xa0>
 8075e94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8075e96:	b97c      	cbnz	r4, 8075eb8 <__pow5mult+0x48>
 8075e98:	2010      	movs	r0, #16
 8075e9a:	f7ff fdc1 	bl	8075a20 <malloc>
 8075e9e:	4602      	mov	r2, r0
 8075ea0:	6270      	str	r0, [r6, #36]	; 0x24
 8075ea2:	b928      	cbnz	r0, 8075eb0 <__pow5mult+0x40>
 8075ea4:	4b1d      	ldr	r3, [pc, #116]	; (8075f1c <__pow5mult+0xac>)
 8075ea6:	481e      	ldr	r0, [pc, #120]	; (8075f20 <__pow5mult+0xb0>)
 8075ea8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8075eac:	f000 fe96 	bl	8076bdc <__assert_func>
 8075eb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8075eb4:	6004      	str	r4, [r0, #0]
 8075eb6:	60c4      	str	r4, [r0, #12]
 8075eb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8075ebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8075ec0:	b94c      	cbnz	r4, 8075ed6 <__pow5mult+0x66>
 8075ec2:	f240 2171 	movw	r1, #625	; 0x271
 8075ec6:	4630      	mov	r0, r6
 8075ec8:	f7ff ff16 	bl	8075cf8 <__i2b>
 8075ecc:	2300      	movs	r3, #0
 8075ece:	f8c8 0008 	str.w	r0, [r8, #8]
 8075ed2:	4604      	mov	r4, r0
 8075ed4:	6003      	str	r3, [r0, #0]
 8075ed6:	f04f 0900 	mov.w	r9, #0
 8075eda:	07eb      	lsls	r3, r5, #31
 8075edc:	d50a      	bpl.n	8075ef4 <__pow5mult+0x84>
 8075ede:	4639      	mov	r1, r7
 8075ee0:	4622      	mov	r2, r4
 8075ee2:	4630      	mov	r0, r6
 8075ee4:	f7ff ff1e 	bl	8075d24 <__multiply>
 8075ee8:	4639      	mov	r1, r7
 8075eea:	4680      	mov	r8, r0
 8075eec:	4630      	mov	r0, r6
 8075eee:	f7ff fdfd 	bl	8075aec <_Bfree>
 8075ef2:	4647      	mov	r7, r8
 8075ef4:	106d      	asrs	r5, r5, #1
 8075ef6:	d00b      	beq.n	8075f10 <__pow5mult+0xa0>
 8075ef8:	6820      	ldr	r0, [r4, #0]
 8075efa:	b938      	cbnz	r0, 8075f0c <__pow5mult+0x9c>
 8075efc:	4622      	mov	r2, r4
 8075efe:	4621      	mov	r1, r4
 8075f00:	4630      	mov	r0, r6
 8075f02:	f7ff ff0f 	bl	8075d24 <__multiply>
 8075f06:	6020      	str	r0, [r4, #0]
 8075f08:	f8c0 9000 	str.w	r9, [r0]
 8075f0c:	4604      	mov	r4, r0
 8075f0e:	e7e4      	b.n	8075eda <__pow5mult+0x6a>
 8075f10:	4638      	mov	r0, r7
 8075f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8075f16:	bf00      	nop
 8075f18:	08077c08 	.word	0x08077c08
 8075f1c:	080779ae 	.word	0x080779ae
 8075f20:	08077ab4 	.word	0x08077ab4

08075f24 <__lshift>:
 8075f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8075f28:	460c      	mov	r4, r1
 8075f2a:	6849      	ldr	r1, [r1, #4]
 8075f2c:	6923      	ldr	r3, [r4, #16]
 8075f2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8075f32:	68a3      	ldr	r3, [r4, #8]
 8075f34:	4607      	mov	r7, r0
 8075f36:	4691      	mov	r9, r2
 8075f38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8075f3c:	f108 0601 	add.w	r6, r8, #1
 8075f40:	42b3      	cmp	r3, r6
 8075f42:	db0b      	blt.n	8075f5c <__lshift+0x38>
 8075f44:	4638      	mov	r0, r7
 8075f46:	f7ff fd91 	bl	8075a6c <_Balloc>
 8075f4a:	4605      	mov	r5, r0
 8075f4c:	b948      	cbnz	r0, 8075f62 <__lshift+0x3e>
 8075f4e:	4602      	mov	r2, r0
 8075f50:	4b28      	ldr	r3, [pc, #160]	; (8075ff4 <__lshift+0xd0>)
 8075f52:	4829      	ldr	r0, [pc, #164]	; (8075ff8 <__lshift+0xd4>)
 8075f54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8075f58:	f000 fe40 	bl	8076bdc <__assert_func>
 8075f5c:	3101      	adds	r1, #1
 8075f5e:	005b      	lsls	r3, r3, #1
 8075f60:	e7ee      	b.n	8075f40 <__lshift+0x1c>
 8075f62:	2300      	movs	r3, #0
 8075f64:	f100 0114 	add.w	r1, r0, #20
 8075f68:	f100 0210 	add.w	r2, r0, #16
 8075f6c:	4618      	mov	r0, r3
 8075f6e:	4553      	cmp	r3, sl
 8075f70:	db33      	blt.n	8075fda <__lshift+0xb6>
 8075f72:	6920      	ldr	r0, [r4, #16]
 8075f74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8075f78:	f104 0314 	add.w	r3, r4, #20
 8075f7c:	f019 091f 	ands.w	r9, r9, #31
 8075f80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8075f84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8075f88:	d02b      	beq.n	8075fe2 <__lshift+0xbe>
 8075f8a:	f1c9 0e20 	rsb	lr, r9, #32
 8075f8e:	468a      	mov	sl, r1
 8075f90:	2200      	movs	r2, #0
 8075f92:	6818      	ldr	r0, [r3, #0]
 8075f94:	fa00 f009 	lsl.w	r0, r0, r9
 8075f98:	4302      	orrs	r2, r0
 8075f9a:	f84a 2b04 	str.w	r2, [sl], #4
 8075f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8075fa2:	459c      	cmp	ip, r3
 8075fa4:	fa22 f20e 	lsr.w	r2, r2, lr
 8075fa8:	d8f3      	bhi.n	8075f92 <__lshift+0x6e>
 8075faa:	ebac 0304 	sub.w	r3, ip, r4
 8075fae:	3b15      	subs	r3, #21
 8075fb0:	f023 0303 	bic.w	r3, r3, #3
 8075fb4:	3304      	adds	r3, #4
 8075fb6:	f104 0015 	add.w	r0, r4, #21
 8075fba:	4584      	cmp	ip, r0
 8075fbc:	bf38      	it	cc
 8075fbe:	2304      	movcc	r3, #4
 8075fc0:	50ca      	str	r2, [r1, r3]
 8075fc2:	b10a      	cbz	r2, 8075fc8 <__lshift+0xa4>
 8075fc4:	f108 0602 	add.w	r6, r8, #2
 8075fc8:	3e01      	subs	r6, #1
 8075fca:	4638      	mov	r0, r7
 8075fcc:	612e      	str	r6, [r5, #16]
 8075fce:	4621      	mov	r1, r4
 8075fd0:	f7ff fd8c 	bl	8075aec <_Bfree>
 8075fd4:	4628      	mov	r0, r5
 8075fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8075fda:	f842 0f04 	str.w	r0, [r2, #4]!
 8075fde:	3301      	adds	r3, #1
 8075fe0:	e7c5      	b.n	8075f6e <__lshift+0x4a>
 8075fe2:	3904      	subs	r1, #4
 8075fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8075fe8:	f841 2f04 	str.w	r2, [r1, #4]!
 8075fec:	459c      	cmp	ip, r3
 8075fee:	d8f9      	bhi.n	8075fe4 <__lshift+0xc0>
 8075ff0:	e7ea      	b.n	8075fc8 <__lshift+0xa4>
 8075ff2:	bf00      	nop
 8075ff4:	08077a24 	.word	0x08077a24
 8075ff8:	08077ab4 	.word	0x08077ab4

08075ffc <__mcmp>:
 8075ffc:	b530      	push	{r4, r5, lr}
 8075ffe:	6902      	ldr	r2, [r0, #16]
 8076000:	690c      	ldr	r4, [r1, #16]
 8076002:	1b12      	subs	r2, r2, r4
 8076004:	d10e      	bne.n	8076024 <__mcmp+0x28>
 8076006:	f100 0314 	add.w	r3, r0, #20
 807600a:	3114      	adds	r1, #20
 807600c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8076010:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8076014:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8076018:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 807601c:	42a5      	cmp	r5, r4
 807601e:	d003      	beq.n	8076028 <__mcmp+0x2c>
 8076020:	d305      	bcc.n	807602e <__mcmp+0x32>
 8076022:	2201      	movs	r2, #1
 8076024:	4610      	mov	r0, r2
 8076026:	bd30      	pop	{r4, r5, pc}
 8076028:	4283      	cmp	r3, r0
 807602a:	d3f3      	bcc.n	8076014 <__mcmp+0x18>
 807602c:	e7fa      	b.n	8076024 <__mcmp+0x28>
 807602e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8076032:	e7f7      	b.n	8076024 <__mcmp+0x28>

08076034 <__mdiff>:
 8076034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8076038:	460c      	mov	r4, r1
 807603a:	4606      	mov	r6, r0
 807603c:	4611      	mov	r1, r2
 807603e:	4620      	mov	r0, r4
 8076040:	4617      	mov	r7, r2
 8076042:	f7ff ffdb 	bl	8075ffc <__mcmp>
 8076046:	1e05      	subs	r5, r0, #0
 8076048:	d110      	bne.n	807606c <__mdiff+0x38>
 807604a:	4629      	mov	r1, r5
 807604c:	4630      	mov	r0, r6
 807604e:	f7ff fd0d 	bl	8075a6c <_Balloc>
 8076052:	b930      	cbnz	r0, 8076062 <__mdiff+0x2e>
 8076054:	4b39      	ldr	r3, [pc, #228]	; (807613c <__mdiff+0x108>)
 8076056:	4602      	mov	r2, r0
 8076058:	f240 2132 	movw	r1, #562	; 0x232
 807605c:	4838      	ldr	r0, [pc, #224]	; (8076140 <__mdiff+0x10c>)
 807605e:	f000 fdbd 	bl	8076bdc <__assert_func>
 8076062:	2301      	movs	r3, #1
 8076064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8076068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 807606c:	bfa4      	itt	ge
 807606e:	463b      	movge	r3, r7
 8076070:	4627      	movge	r7, r4
 8076072:	4630      	mov	r0, r6
 8076074:	6879      	ldr	r1, [r7, #4]
 8076076:	bfa6      	itte	ge
 8076078:	461c      	movge	r4, r3
 807607a:	2500      	movge	r5, #0
 807607c:	2501      	movlt	r5, #1
 807607e:	f7ff fcf5 	bl	8075a6c <_Balloc>
 8076082:	b920      	cbnz	r0, 807608e <__mdiff+0x5a>
 8076084:	4b2d      	ldr	r3, [pc, #180]	; (807613c <__mdiff+0x108>)
 8076086:	4602      	mov	r2, r0
 8076088:	f44f 7110 	mov.w	r1, #576	; 0x240
 807608c:	e7e6      	b.n	807605c <__mdiff+0x28>
 807608e:	693e      	ldr	r6, [r7, #16]
 8076090:	60c5      	str	r5, [r0, #12]
 8076092:	6925      	ldr	r5, [r4, #16]
 8076094:	f107 0114 	add.w	r1, r7, #20
 8076098:	f104 0914 	add.w	r9, r4, #20
 807609c:	f100 0e14 	add.w	lr, r0, #20
 80760a0:	f107 0210 	add.w	r2, r7, #16
 80760a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80760a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80760ac:	46f2      	mov	sl, lr
 80760ae:	2700      	movs	r7, #0
 80760b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80760b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80760b8:	fa1f f883 	uxth.w	r8, r3
 80760bc:	fa17 f78b 	uxtah	r7, r7, fp
 80760c0:	0c1b      	lsrs	r3, r3, #16
 80760c2:	eba7 0808 	sub.w	r8, r7, r8
 80760c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80760ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80760ce:	fa1f f888 	uxth.w	r8, r8
 80760d2:	141f      	asrs	r7, r3, #16
 80760d4:	454d      	cmp	r5, r9
 80760d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80760da:	f84a 3b04 	str.w	r3, [sl], #4
 80760de:	d8e7      	bhi.n	80760b0 <__mdiff+0x7c>
 80760e0:	1b2b      	subs	r3, r5, r4
 80760e2:	3b15      	subs	r3, #21
 80760e4:	f023 0303 	bic.w	r3, r3, #3
 80760e8:	3304      	adds	r3, #4
 80760ea:	3415      	adds	r4, #21
 80760ec:	42a5      	cmp	r5, r4
 80760ee:	bf38      	it	cc
 80760f0:	2304      	movcc	r3, #4
 80760f2:	4419      	add	r1, r3
 80760f4:	4473      	add	r3, lr
 80760f6:	469e      	mov	lr, r3
 80760f8:	460d      	mov	r5, r1
 80760fa:	4565      	cmp	r5, ip
 80760fc:	d30e      	bcc.n	807611c <__mdiff+0xe8>
 80760fe:	f10c 0203 	add.w	r2, ip, #3
 8076102:	1a52      	subs	r2, r2, r1
 8076104:	f022 0203 	bic.w	r2, r2, #3
 8076108:	3903      	subs	r1, #3
 807610a:	458c      	cmp	ip, r1
 807610c:	bf38      	it	cc
 807610e:	2200      	movcc	r2, #0
 8076110:	441a      	add	r2, r3
 8076112:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8076116:	b17b      	cbz	r3, 8076138 <__mdiff+0x104>
 8076118:	6106      	str	r6, [r0, #16]
 807611a:	e7a5      	b.n	8076068 <__mdiff+0x34>
 807611c:	f855 8b04 	ldr.w	r8, [r5], #4
 8076120:	fa17 f488 	uxtah	r4, r7, r8
 8076124:	1422      	asrs	r2, r4, #16
 8076126:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 807612a:	b2a4      	uxth	r4, r4
 807612c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8076130:	f84e 4b04 	str.w	r4, [lr], #4
 8076134:	1417      	asrs	r7, r2, #16
 8076136:	e7e0      	b.n	80760fa <__mdiff+0xc6>
 8076138:	3e01      	subs	r6, #1
 807613a:	e7ea      	b.n	8076112 <__mdiff+0xde>
 807613c:	08077a24 	.word	0x08077a24
 8076140:	08077ab4 	.word	0x08077ab4

08076144 <__ulp>:
 8076144:	b082      	sub	sp, #8
 8076146:	ed8d 0b00 	vstr	d0, [sp]
 807614a:	9b01      	ldr	r3, [sp, #4]
 807614c:	4912      	ldr	r1, [pc, #72]	; (8076198 <__ulp+0x54>)
 807614e:	4019      	ands	r1, r3
 8076150:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8076154:	2900      	cmp	r1, #0
 8076156:	dd05      	ble.n	8076164 <__ulp+0x20>
 8076158:	2200      	movs	r2, #0
 807615a:	460b      	mov	r3, r1
 807615c:	ec43 2b10 	vmov	d0, r2, r3
 8076160:	b002      	add	sp, #8
 8076162:	4770      	bx	lr
 8076164:	4249      	negs	r1, r1
 8076166:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 807616a:	ea4f 5021 	mov.w	r0, r1, asr #20
 807616e:	f04f 0200 	mov.w	r2, #0
 8076172:	f04f 0300 	mov.w	r3, #0
 8076176:	da04      	bge.n	8076182 <__ulp+0x3e>
 8076178:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 807617c:	fa41 f300 	asr.w	r3, r1, r0
 8076180:	e7ec      	b.n	807615c <__ulp+0x18>
 8076182:	f1a0 0114 	sub.w	r1, r0, #20
 8076186:	291e      	cmp	r1, #30
 8076188:	bfda      	itte	le
 807618a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 807618e:	fa20 f101 	lsrle.w	r1, r0, r1
 8076192:	2101      	movgt	r1, #1
 8076194:	460a      	mov	r2, r1
 8076196:	e7e1      	b.n	807615c <__ulp+0x18>
 8076198:	7ff00000 	.word	0x7ff00000

0807619c <__b2d>:
 807619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807619e:	6905      	ldr	r5, [r0, #16]
 80761a0:	f100 0714 	add.w	r7, r0, #20
 80761a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80761a8:	1f2e      	subs	r6, r5, #4
 80761aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80761ae:	4620      	mov	r0, r4
 80761b0:	f7ff fd52 	bl	8075c58 <__hi0bits>
 80761b4:	f1c0 0320 	rsb	r3, r0, #32
 80761b8:	280a      	cmp	r0, #10
 80761ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8076238 <__b2d+0x9c>
 80761be:	600b      	str	r3, [r1, #0]
 80761c0:	dc14      	bgt.n	80761ec <__b2d+0x50>
 80761c2:	f1c0 0e0b 	rsb	lr, r0, #11
 80761c6:	fa24 f10e 	lsr.w	r1, r4, lr
 80761ca:	42b7      	cmp	r7, r6
 80761cc:	ea41 030c 	orr.w	r3, r1, ip
 80761d0:	bf34      	ite	cc
 80761d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80761d6:	2100      	movcs	r1, #0
 80761d8:	3015      	adds	r0, #21
 80761da:	fa04 f000 	lsl.w	r0, r4, r0
 80761de:	fa21 f10e 	lsr.w	r1, r1, lr
 80761e2:	ea40 0201 	orr.w	r2, r0, r1
 80761e6:	ec43 2b10 	vmov	d0, r2, r3
 80761ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80761ec:	42b7      	cmp	r7, r6
 80761ee:	bf3a      	itte	cc
 80761f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80761f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80761f8:	2100      	movcs	r1, #0
 80761fa:	380b      	subs	r0, #11
 80761fc:	d017      	beq.n	807622e <__b2d+0x92>
 80761fe:	f1c0 0c20 	rsb	ip, r0, #32
 8076202:	fa04 f500 	lsl.w	r5, r4, r0
 8076206:	42be      	cmp	r6, r7
 8076208:	fa21 f40c 	lsr.w	r4, r1, ip
 807620c:	ea45 0504 	orr.w	r5, r5, r4
 8076210:	bf8c      	ite	hi
 8076212:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8076216:	2400      	movls	r4, #0
 8076218:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 807621c:	fa01 f000 	lsl.w	r0, r1, r0
 8076220:	fa24 f40c 	lsr.w	r4, r4, ip
 8076224:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8076228:	ea40 0204 	orr.w	r2, r0, r4
 807622c:	e7db      	b.n	80761e6 <__b2d+0x4a>
 807622e:	ea44 030c 	orr.w	r3, r4, ip
 8076232:	460a      	mov	r2, r1
 8076234:	e7d7      	b.n	80761e6 <__b2d+0x4a>
 8076236:	bf00      	nop
 8076238:	3ff00000 	.word	0x3ff00000

0807623c <__d2b>:
 807623c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8076240:	4689      	mov	r9, r1
 8076242:	2101      	movs	r1, #1
 8076244:	ec57 6b10 	vmov	r6, r7, d0
 8076248:	4690      	mov	r8, r2
 807624a:	f7ff fc0f 	bl	8075a6c <_Balloc>
 807624e:	4604      	mov	r4, r0
 8076250:	b930      	cbnz	r0, 8076260 <__d2b+0x24>
 8076252:	4602      	mov	r2, r0
 8076254:	4b25      	ldr	r3, [pc, #148]	; (80762ec <__d2b+0xb0>)
 8076256:	4826      	ldr	r0, [pc, #152]	; (80762f0 <__d2b+0xb4>)
 8076258:	f240 310a 	movw	r1, #778	; 0x30a
 807625c:	f000 fcbe 	bl	8076bdc <__assert_func>
 8076260:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8076264:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8076268:	bb35      	cbnz	r5, 80762b8 <__d2b+0x7c>
 807626a:	2e00      	cmp	r6, #0
 807626c:	9301      	str	r3, [sp, #4]
 807626e:	d028      	beq.n	80762c2 <__d2b+0x86>
 8076270:	4668      	mov	r0, sp
 8076272:	9600      	str	r6, [sp, #0]
 8076274:	f7ff fd10 	bl	8075c98 <__lo0bits>
 8076278:	9900      	ldr	r1, [sp, #0]
 807627a:	b300      	cbz	r0, 80762be <__d2b+0x82>
 807627c:	9a01      	ldr	r2, [sp, #4]
 807627e:	f1c0 0320 	rsb	r3, r0, #32
 8076282:	fa02 f303 	lsl.w	r3, r2, r3
 8076286:	430b      	orrs	r3, r1
 8076288:	40c2      	lsrs	r2, r0
 807628a:	6163      	str	r3, [r4, #20]
 807628c:	9201      	str	r2, [sp, #4]
 807628e:	9b01      	ldr	r3, [sp, #4]
 8076290:	61a3      	str	r3, [r4, #24]
 8076292:	2b00      	cmp	r3, #0
 8076294:	bf14      	ite	ne
 8076296:	2202      	movne	r2, #2
 8076298:	2201      	moveq	r2, #1
 807629a:	6122      	str	r2, [r4, #16]
 807629c:	b1d5      	cbz	r5, 80762d4 <__d2b+0x98>
 807629e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80762a2:	4405      	add	r5, r0
 80762a4:	f8c9 5000 	str.w	r5, [r9]
 80762a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80762ac:	f8c8 0000 	str.w	r0, [r8]
 80762b0:	4620      	mov	r0, r4
 80762b2:	b003      	add	sp, #12
 80762b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80762b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80762bc:	e7d5      	b.n	807626a <__d2b+0x2e>
 80762be:	6161      	str	r1, [r4, #20]
 80762c0:	e7e5      	b.n	807628e <__d2b+0x52>
 80762c2:	a801      	add	r0, sp, #4
 80762c4:	f7ff fce8 	bl	8075c98 <__lo0bits>
 80762c8:	9b01      	ldr	r3, [sp, #4]
 80762ca:	6163      	str	r3, [r4, #20]
 80762cc:	2201      	movs	r2, #1
 80762ce:	6122      	str	r2, [r4, #16]
 80762d0:	3020      	adds	r0, #32
 80762d2:	e7e3      	b.n	807629c <__d2b+0x60>
 80762d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80762d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80762dc:	f8c9 0000 	str.w	r0, [r9]
 80762e0:	6918      	ldr	r0, [r3, #16]
 80762e2:	f7ff fcb9 	bl	8075c58 <__hi0bits>
 80762e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80762ea:	e7df      	b.n	80762ac <__d2b+0x70>
 80762ec:	08077a24 	.word	0x08077a24
 80762f0:	08077ab4 	.word	0x08077ab4

080762f4 <__ratio>:
 80762f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80762f8:	4688      	mov	r8, r1
 80762fa:	4669      	mov	r1, sp
 80762fc:	4681      	mov	r9, r0
 80762fe:	f7ff ff4d 	bl	807619c <__b2d>
 8076302:	a901      	add	r1, sp, #4
 8076304:	4640      	mov	r0, r8
 8076306:	ec55 4b10 	vmov	r4, r5, d0
 807630a:	f7ff ff47 	bl	807619c <__b2d>
 807630e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8076312:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8076316:	eba3 0c02 	sub.w	ip, r3, r2
 807631a:	e9dd 3200 	ldrd	r3, r2, [sp]
 807631e:	1a9b      	subs	r3, r3, r2
 8076320:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8076324:	ec51 0b10 	vmov	r0, r1, d0
 8076328:	2b00      	cmp	r3, #0
 807632a:	bfd6      	itet	le
 807632c:	460a      	movle	r2, r1
 807632e:	462a      	movgt	r2, r5
 8076330:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8076334:	468b      	mov	fp, r1
 8076336:	462f      	mov	r7, r5
 8076338:	bfd4      	ite	le
 807633a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 807633e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8076342:	4620      	mov	r0, r4
 8076344:	ee10 2a10 	vmov	r2, s0
 8076348:	465b      	mov	r3, fp
 807634a:	4639      	mov	r1, r7
 807634c:	f7ea fa96 	bl	806087c <__aeabi_ddiv>
 8076350:	ec41 0b10 	vmov	d0, r0, r1
 8076354:	b003      	add	sp, #12
 8076356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0807635a <__copybits>:
 807635a:	3901      	subs	r1, #1
 807635c:	b570      	push	{r4, r5, r6, lr}
 807635e:	1149      	asrs	r1, r1, #5
 8076360:	6914      	ldr	r4, [r2, #16]
 8076362:	3101      	adds	r1, #1
 8076364:	f102 0314 	add.w	r3, r2, #20
 8076368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 807636c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8076370:	1f05      	subs	r5, r0, #4
 8076372:	42a3      	cmp	r3, r4
 8076374:	d30c      	bcc.n	8076390 <__copybits+0x36>
 8076376:	1aa3      	subs	r3, r4, r2
 8076378:	3b11      	subs	r3, #17
 807637a:	f023 0303 	bic.w	r3, r3, #3
 807637e:	3211      	adds	r2, #17
 8076380:	42a2      	cmp	r2, r4
 8076382:	bf88      	it	hi
 8076384:	2300      	movhi	r3, #0
 8076386:	4418      	add	r0, r3
 8076388:	2300      	movs	r3, #0
 807638a:	4288      	cmp	r0, r1
 807638c:	d305      	bcc.n	807639a <__copybits+0x40>
 807638e:	bd70      	pop	{r4, r5, r6, pc}
 8076390:	f853 6b04 	ldr.w	r6, [r3], #4
 8076394:	f845 6f04 	str.w	r6, [r5, #4]!
 8076398:	e7eb      	b.n	8076372 <__copybits+0x18>
 807639a:	f840 3b04 	str.w	r3, [r0], #4
 807639e:	e7f4      	b.n	807638a <__copybits+0x30>

080763a0 <__any_on>:
 80763a0:	f100 0214 	add.w	r2, r0, #20
 80763a4:	6900      	ldr	r0, [r0, #16]
 80763a6:	114b      	asrs	r3, r1, #5
 80763a8:	4298      	cmp	r0, r3
 80763aa:	b510      	push	{r4, lr}
 80763ac:	db11      	blt.n	80763d2 <__any_on+0x32>
 80763ae:	dd0a      	ble.n	80763c6 <__any_on+0x26>
 80763b0:	f011 011f 	ands.w	r1, r1, #31
 80763b4:	d007      	beq.n	80763c6 <__any_on+0x26>
 80763b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80763ba:	fa24 f001 	lsr.w	r0, r4, r1
 80763be:	fa00 f101 	lsl.w	r1, r0, r1
 80763c2:	428c      	cmp	r4, r1
 80763c4:	d10b      	bne.n	80763de <__any_on+0x3e>
 80763c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80763ca:	4293      	cmp	r3, r2
 80763cc:	d803      	bhi.n	80763d6 <__any_on+0x36>
 80763ce:	2000      	movs	r0, #0
 80763d0:	bd10      	pop	{r4, pc}
 80763d2:	4603      	mov	r3, r0
 80763d4:	e7f7      	b.n	80763c6 <__any_on+0x26>
 80763d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80763da:	2900      	cmp	r1, #0
 80763dc:	d0f5      	beq.n	80763ca <__any_on+0x2a>
 80763de:	2001      	movs	r0, #1
 80763e0:	e7f6      	b.n	80763d0 <__any_on+0x30>

080763e2 <_calloc_r>:
 80763e2:	b513      	push	{r0, r1, r4, lr}
 80763e4:	434a      	muls	r2, r1
 80763e6:	4611      	mov	r1, r2
 80763e8:	9201      	str	r2, [sp, #4]
 80763ea:	f7fc f9b9 	bl	8072760 <_malloc_r>
 80763ee:	4604      	mov	r4, r0
 80763f0:	b118      	cbz	r0, 80763fa <_calloc_r+0x18>
 80763f2:	9a01      	ldr	r2, [sp, #4]
 80763f4:	2100      	movs	r1, #0
 80763f6:	f7fc f9aa 	bl	807274e <memset>
 80763fa:	4620      	mov	r0, r4
 80763fc:	b002      	add	sp, #8
 80763fe:	bd10      	pop	{r4, pc}

08076400 <_free_r>:
 8076400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8076402:	2900      	cmp	r1, #0
 8076404:	d048      	beq.n	8076498 <_free_r+0x98>
 8076406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 807640a:	9001      	str	r0, [sp, #4]
 807640c:	2b00      	cmp	r3, #0
 807640e:	f1a1 0404 	sub.w	r4, r1, #4
 8076412:	bfb8      	it	lt
 8076414:	18e4      	addlt	r4, r4, r3
 8076416:	f7ff fb1d 	bl	8075a54 <__malloc_lock>
 807641a:	4a20      	ldr	r2, [pc, #128]	; (807649c <_free_r+0x9c>)
 807641c:	9801      	ldr	r0, [sp, #4]
 807641e:	6813      	ldr	r3, [r2, #0]
 8076420:	4615      	mov	r5, r2
 8076422:	b933      	cbnz	r3, 8076432 <_free_r+0x32>
 8076424:	6063      	str	r3, [r4, #4]
 8076426:	6014      	str	r4, [r2, #0]
 8076428:	b003      	add	sp, #12
 807642a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 807642e:	f7ff bb17 	b.w	8075a60 <__malloc_unlock>
 8076432:	42a3      	cmp	r3, r4
 8076434:	d90b      	bls.n	807644e <_free_r+0x4e>
 8076436:	6821      	ldr	r1, [r4, #0]
 8076438:	1862      	adds	r2, r4, r1
 807643a:	4293      	cmp	r3, r2
 807643c:	bf04      	itt	eq
 807643e:	681a      	ldreq	r2, [r3, #0]
 8076440:	685b      	ldreq	r3, [r3, #4]
 8076442:	6063      	str	r3, [r4, #4]
 8076444:	bf04      	itt	eq
 8076446:	1852      	addeq	r2, r2, r1
 8076448:	6022      	streq	r2, [r4, #0]
 807644a:	602c      	str	r4, [r5, #0]
 807644c:	e7ec      	b.n	8076428 <_free_r+0x28>
 807644e:	461a      	mov	r2, r3
 8076450:	685b      	ldr	r3, [r3, #4]
 8076452:	b10b      	cbz	r3, 8076458 <_free_r+0x58>
 8076454:	42a3      	cmp	r3, r4
 8076456:	d9fa      	bls.n	807644e <_free_r+0x4e>
 8076458:	6811      	ldr	r1, [r2, #0]
 807645a:	1855      	adds	r5, r2, r1
 807645c:	42a5      	cmp	r5, r4
 807645e:	d10b      	bne.n	8076478 <_free_r+0x78>
 8076460:	6824      	ldr	r4, [r4, #0]
 8076462:	4421      	add	r1, r4
 8076464:	1854      	adds	r4, r2, r1
 8076466:	42a3      	cmp	r3, r4
 8076468:	6011      	str	r1, [r2, #0]
 807646a:	d1dd      	bne.n	8076428 <_free_r+0x28>
 807646c:	681c      	ldr	r4, [r3, #0]
 807646e:	685b      	ldr	r3, [r3, #4]
 8076470:	6053      	str	r3, [r2, #4]
 8076472:	4421      	add	r1, r4
 8076474:	6011      	str	r1, [r2, #0]
 8076476:	e7d7      	b.n	8076428 <_free_r+0x28>
 8076478:	d902      	bls.n	8076480 <_free_r+0x80>
 807647a:	230c      	movs	r3, #12
 807647c:	6003      	str	r3, [r0, #0]
 807647e:	e7d3      	b.n	8076428 <_free_r+0x28>
 8076480:	6825      	ldr	r5, [r4, #0]
 8076482:	1961      	adds	r1, r4, r5
 8076484:	428b      	cmp	r3, r1
 8076486:	bf04      	itt	eq
 8076488:	6819      	ldreq	r1, [r3, #0]
 807648a:	685b      	ldreq	r3, [r3, #4]
 807648c:	6063      	str	r3, [r4, #4]
 807648e:	bf04      	itt	eq
 8076490:	1949      	addeq	r1, r1, r5
 8076492:	6021      	streq	r1, [r4, #0]
 8076494:	6054      	str	r4, [r2, #4]
 8076496:	e7c7      	b.n	8076428 <_free_r+0x28>
 8076498:	b003      	add	sp, #12
 807649a:	bd30      	pop	{r4, r5, pc}
 807649c:	20004e28 	.word	0x20004e28

080764a0 <__ssputs_r>:
 80764a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80764a4:	688e      	ldr	r6, [r1, #8]
 80764a6:	429e      	cmp	r6, r3
 80764a8:	4682      	mov	sl, r0
 80764aa:	460c      	mov	r4, r1
 80764ac:	4690      	mov	r8, r2
 80764ae:	461f      	mov	r7, r3
 80764b0:	d838      	bhi.n	8076524 <__ssputs_r+0x84>
 80764b2:	898a      	ldrh	r2, [r1, #12]
 80764b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80764b8:	d032      	beq.n	8076520 <__ssputs_r+0x80>
 80764ba:	6825      	ldr	r5, [r4, #0]
 80764bc:	6909      	ldr	r1, [r1, #16]
 80764be:	eba5 0901 	sub.w	r9, r5, r1
 80764c2:	6965      	ldr	r5, [r4, #20]
 80764c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80764c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80764cc:	3301      	adds	r3, #1
 80764ce:	444b      	add	r3, r9
 80764d0:	106d      	asrs	r5, r5, #1
 80764d2:	429d      	cmp	r5, r3
 80764d4:	bf38      	it	cc
 80764d6:	461d      	movcc	r5, r3
 80764d8:	0553      	lsls	r3, r2, #21
 80764da:	d531      	bpl.n	8076540 <__ssputs_r+0xa0>
 80764dc:	4629      	mov	r1, r5
 80764de:	f7fc f93f 	bl	8072760 <_malloc_r>
 80764e2:	4606      	mov	r6, r0
 80764e4:	b950      	cbnz	r0, 80764fc <__ssputs_r+0x5c>
 80764e6:	230c      	movs	r3, #12
 80764e8:	f8ca 3000 	str.w	r3, [sl]
 80764ec:	89a3      	ldrh	r3, [r4, #12]
 80764ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80764f2:	81a3      	strh	r3, [r4, #12]
 80764f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80764f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80764fc:	6921      	ldr	r1, [r4, #16]
 80764fe:	464a      	mov	r2, r9
 8076500:	f7fc f917 	bl	8072732 <memcpy>
 8076504:	89a3      	ldrh	r3, [r4, #12]
 8076506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 807650a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 807650e:	81a3      	strh	r3, [r4, #12]
 8076510:	6126      	str	r6, [r4, #16]
 8076512:	6165      	str	r5, [r4, #20]
 8076514:	444e      	add	r6, r9
 8076516:	eba5 0509 	sub.w	r5, r5, r9
 807651a:	6026      	str	r6, [r4, #0]
 807651c:	60a5      	str	r5, [r4, #8]
 807651e:	463e      	mov	r6, r7
 8076520:	42be      	cmp	r6, r7
 8076522:	d900      	bls.n	8076526 <__ssputs_r+0x86>
 8076524:	463e      	mov	r6, r7
 8076526:	4632      	mov	r2, r6
 8076528:	6820      	ldr	r0, [r4, #0]
 807652a:	4641      	mov	r1, r8
 807652c:	f000 fbea 	bl	8076d04 <memmove>
 8076530:	68a3      	ldr	r3, [r4, #8]
 8076532:	6822      	ldr	r2, [r4, #0]
 8076534:	1b9b      	subs	r3, r3, r6
 8076536:	4432      	add	r2, r6
 8076538:	60a3      	str	r3, [r4, #8]
 807653a:	6022      	str	r2, [r4, #0]
 807653c:	2000      	movs	r0, #0
 807653e:	e7db      	b.n	80764f8 <__ssputs_r+0x58>
 8076540:	462a      	mov	r2, r5
 8076542:	f000 fbf9 	bl	8076d38 <_realloc_r>
 8076546:	4606      	mov	r6, r0
 8076548:	2800      	cmp	r0, #0
 807654a:	d1e1      	bne.n	8076510 <__ssputs_r+0x70>
 807654c:	6921      	ldr	r1, [r4, #16]
 807654e:	4650      	mov	r0, sl
 8076550:	f7ff ff56 	bl	8076400 <_free_r>
 8076554:	e7c7      	b.n	80764e6 <__ssputs_r+0x46>
	...

08076558 <_svfiprintf_r>:
 8076558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 807655c:	4698      	mov	r8, r3
 807655e:	898b      	ldrh	r3, [r1, #12]
 8076560:	061b      	lsls	r3, r3, #24
 8076562:	b09d      	sub	sp, #116	; 0x74
 8076564:	4607      	mov	r7, r0
 8076566:	460d      	mov	r5, r1
 8076568:	4614      	mov	r4, r2
 807656a:	d50e      	bpl.n	807658a <_svfiprintf_r+0x32>
 807656c:	690b      	ldr	r3, [r1, #16]
 807656e:	b963      	cbnz	r3, 807658a <_svfiprintf_r+0x32>
 8076570:	2140      	movs	r1, #64	; 0x40
 8076572:	f7fc f8f5 	bl	8072760 <_malloc_r>
 8076576:	6028      	str	r0, [r5, #0]
 8076578:	6128      	str	r0, [r5, #16]
 807657a:	b920      	cbnz	r0, 8076586 <_svfiprintf_r+0x2e>
 807657c:	230c      	movs	r3, #12
 807657e:	603b      	str	r3, [r7, #0]
 8076580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8076584:	e0d1      	b.n	807672a <_svfiprintf_r+0x1d2>
 8076586:	2340      	movs	r3, #64	; 0x40
 8076588:	616b      	str	r3, [r5, #20]
 807658a:	2300      	movs	r3, #0
 807658c:	9309      	str	r3, [sp, #36]	; 0x24
 807658e:	2320      	movs	r3, #32
 8076590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8076594:	f8cd 800c 	str.w	r8, [sp, #12]
 8076598:	2330      	movs	r3, #48	; 0x30
 807659a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8076744 <_svfiprintf_r+0x1ec>
 807659e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80765a2:	f04f 0901 	mov.w	r9, #1
 80765a6:	4623      	mov	r3, r4
 80765a8:	469a      	mov	sl, r3
 80765aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80765ae:	b10a      	cbz	r2, 80765b4 <_svfiprintf_r+0x5c>
 80765b0:	2a25      	cmp	r2, #37	; 0x25
 80765b2:	d1f9      	bne.n	80765a8 <_svfiprintf_r+0x50>
 80765b4:	ebba 0b04 	subs.w	fp, sl, r4
 80765b8:	d00b      	beq.n	80765d2 <_svfiprintf_r+0x7a>
 80765ba:	465b      	mov	r3, fp
 80765bc:	4622      	mov	r2, r4
 80765be:	4629      	mov	r1, r5
 80765c0:	4638      	mov	r0, r7
 80765c2:	f7ff ff6d 	bl	80764a0 <__ssputs_r>
 80765c6:	3001      	adds	r0, #1
 80765c8:	f000 80aa 	beq.w	8076720 <_svfiprintf_r+0x1c8>
 80765cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80765ce:	445a      	add	r2, fp
 80765d0:	9209      	str	r2, [sp, #36]	; 0x24
 80765d2:	f89a 3000 	ldrb.w	r3, [sl]
 80765d6:	2b00      	cmp	r3, #0
 80765d8:	f000 80a2 	beq.w	8076720 <_svfiprintf_r+0x1c8>
 80765dc:	2300      	movs	r3, #0
 80765de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80765e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80765e6:	f10a 0a01 	add.w	sl, sl, #1
 80765ea:	9304      	str	r3, [sp, #16]
 80765ec:	9307      	str	r3, [sp, #28]
 80765ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80765f2:	931a      	str	r3, [sp, #104]	; 0x68
 80765f4:	4654      	mov	r4, sl
 80765f6:	2205      	movs	r2, #5
 80765f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80765fc:	4851      	ldr	r0, [pc, #324]	; (8076744 <_svfiprintf_r+0x1ec>)
 80765fe:	f7e9 fe07 	bl	8060210 <memchr>
 8076602:	9a04      	ldr	r2, [sp, #16]
 8076604:	b9d8      	cbnz	r0, 807663e <_svfiprintf_r+0xe6>
 8076606:	06d0      	lsls	r0, r2, #27
 8076608:	bf44      	itt	mi
 807660a:	2320      	movmi	r3, #32
 807660c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8076610:	0711      	lsls	r1, r2, #28
 8076612:	bf44      	itt	mi
 8076614:	232b      	movmi	r3, #43	; 0x2b
 8076616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 807661a:	f89a 3000 	ldrb.w	r3, [sl]
 807661e:	2b2a      	cmp	r3, #42	; 0x2a
 8076620:	d015      	beq.n	807664e <_svfiprintf_r+0xf6>
 8076622:	9a07      	ldr	r2, [sp, #28]
 8076624:	4654      	mov	r4, sl
 8076626:	2000      	movs	r0, #0
 8076628:	f04f 0c0a 	mov.w	ip, #10
 807662c:	4621      	mov	r1, r4
 807662e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8076632:	3b30      	subs	r3, #48	; 0x30
 8076634:	2b09      	cmp	r3, #9
 8076636:	d94e      	bls.n	80766d6 <_svfiprintf_r+0x17e>
 8076638:	b1b0      	cbz	r0, 8076668 <_svfiprintf_r+0x110>
 807663a:	9207      	str	r2, [sp, #28]
 807663c:	e014      	b.n	8076668 <_svfiprintf_r+0x110>
 807663e:	eba0 0308 	sub.w	r3, r0, r8
 8076642:	fa09 f303 	lsl.w	r3, r9, r3
 8076646:	4313      	orrs	r3, r2
 8076648:	9304      	str	r3, [sp, #16]
 807664a:	46a2      	mov	sl, r4
 807664c:	e7d2      	b.n	80765f4 <_svfiprintf_r+0x9c>
 807664e:	9b03      	ldr	r3, [sp, #12]
 8076650:	1d19      	adds	r1, r3, #4
 8076652:	681b      	ldr	r3, [r3, #0]
 8076654:	9103      	str	r1, [sp, #12]
 8076656:	2b00      	cmp	r3, #0
 8076658:	bfbb      	ittet	lt
 807665a:	425b      	neglt	r3, r3
 807665c:	f042 0202 	orrlt.w	r2, r2, #2
 8076660:	9307      	strge	r3, [sp, #28]
 8076662:	9307      	strlt	r3, [sp, #28]
 8076664:	bfb8      	it	lt
 8076666:	9204      	strlt	r2, [sp, #16]
 8076668:	7823      	ldrb	r3, [r4, #0]
 807666a:	2b2e      	cmp	r3, #46	; 0x2e
 807666c:	d10c      	bne.n	8076688 <_svfiprintf_r+0x130>
 807666e:	7863      	ldrb	r3, [r4, #1]
 8076670:	2b2a      	cmp	r3, #42	; 0x2a
 8076672:	d135      	bne.n	80766e0 <_svfiprintf_r+0x188>
 8076674:	9b03      	ldr	r3, [sp, #12]
 8076676:	1d1a      	adds	r2, r3, #4
 8076678:	681b      	ldr	r3, [r3, #0]
 807667a:	9203      	str	r2, [sp, #12]
 807667c:	2b00      	cmp	r3, #0
 807667e:	bfb8      	it	lt
 8076680:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8076684:	3402      	adds	r4, #2
 8076686:	9305      	str	r3, [sp, #20]
 8076688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8076754 <_svfiprintf_r+0x1fc>
 807668c:	7821      	ldrb	r1, [r4, #0]
 807668e:	2203      	movs	r2, #3
 8076690:	4650      	mov	r0, sl
 8076692:	f7e9 fdbd 	bl	8060210 <memchr>
 8076696:	b140      	cbz	r0, 80766aa <_svfiprintf_r+0x152>
 8076698:	2340      	movs	r3, #64	; 0x40
 807669a:	eba0 000a 	sub.w	r0, r0, sl
 807669e:	fa03 f000 	lsl.w	r0, r3, r0
 80766a2:	9b04      	ldr	r3, [sp, #16]
 80766a4:	4303      	orrs	r3, r0
 80766a6:	3401      	adds	r4, #1
 80766a8:	9304      	str	r3, [sp, #16]
 80766aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80766ae:	4826      	ldr	r0, [pc, #152]	; (8076748 <_svfiprintf_r+0x1f0>)
 80766b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80766b4:	2206      	movs	r2, #6
 80766b6:	f7e9 fdab 	bl	8060210 <memchr>
 80766ba:	2800      	cmp	r0, #0
 80766bc:	d038      	beq.n	8076730 <_svfiprintf_r+0x1d8>
 80766be:	4b23      	ldr	r3, [pc, #140]	; (807674c <_svfiprintf_r+0x1f4>)
 80766c0:	bb1b      	cbnz	r3, 807670a <_svfiprintf_r+0x1b2>
 80766c2:	9b03      	ldr	r3, [sp, #12]
 80766c4:	3307      	adds	r3, #7
 80766c6:	f023 0307 	bic.w	r3, r3, #7
 80766ca:	3308      	adds	r3, #8
 80766cc:	9303      	str	r3, [sp, #12]
 80766ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80766d0:	4433      	add	r3, r6
 80766d2:	9309      	str	r3, [sp, #36]	; 0x24
 80766d4:	e767      	b.n	80765a6 <_svfiprintf_r+0x4e>
 80766d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80766da:	460c      	mov	r4, r1
 80766dc:	2001      	movs	r0, #1
 80766de:	e7a5      	b.n	807662c <_svfiprintf_r+0xd4>
 80766e0:	2300      	movs	r3, #0
 80766e2:	3401      	adds	r4, #1
 80766e4:	9305      	str	r3, [sp, #20]
 80766e6:	4619      	mov	r1, r3
 80766e8:	f04f 0c0a 	mov.w	ip, #10
 80766ec:	4620      	mov	r0, r4
 80766ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80766f2:	3a30      	subs	r2, #48	; 0x30
 80766f4:	2a09      	cmp	r2, #9
 80766f6:	d903      	bls.n	8076700 <_svfiprintf_r+0x1a8>
 80766f8:	2b00      	cmp	r3, #0
 80766fa:	d0c5      	beq.n	8076688 <_svfiprintf_r+0x130>
 80766fc:	9105      	str	r1, [sp, #20]
 80766fe:	e7c3      	b.n	8076688 <_svfiprintf_r+0x130>
 8076700:	fb0c 2101 	mla	r1, ip, r1, r2
 8076704:	4604      	mov	r4, r0
 8076706:	2301      	movs	r3, #1
 8076708:	e7f0      	b.n	80766ec <_svfiprintf_r+0x194>
 807670a:	ab03      	add	r3, sp, #12
 807670c:	9300      	str	r3, [sp, #0]
 807670e:	462a      	mov	r2, r5
 8076710:	4b0f      	ldr	r3, [pc, #60]	; (8076750 <_svfiprintf_r+0x1f8>)
 8076712:	a904      	add	r1, sp, #16
 8076714:	4638      	mov	r0, r7
 8076716:	f7fc f91d 	bl	8072954 <_printf_float>
 807671a:	1c42      	adds	r2, r0, #1
 807671c:	4606      	mov	r6, r0
 807671e:	d1d6      	bne.n	80766ce <_svfiprintf_r+0x176>
 8076720:	89ab      	ldrh	r3, [r5, #12]
 8076722:	065b      	lsls	r3, r3, #25
 8076724:	f53f af2c 	bmi.w	8076580 <_svfiprintf_r+0x28>
 8076728:	9809      	ldr	r0, [sp, #36]	; 0x24
 807672a:	b01d      	add	sp, #116	; 0x74
 807672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8076730:	ab03      	add	r3, sp, #12
 8076732:	9300      	str	r3, [sp, #0]
 8076734:	462a      	mov	r2, r5
 8076736:	4b06      	ldr	r3, [pc, #24]	; (8076750 <_svfiprintf_r+0x1f8>)
 8076738:	a904      	add	r1, sp, #16
 807673a:	4638      	mov	r0, r7
 807673c:	f7fc fbae 	bl	8072e9c <_printf_i>
 8076740:	e7eb      	b.n	807671a <_svfiprintf_r+0x1c2>
 8076742:	bf00      	nop
 8076744:	08077c14 	.word	0x08077c14
 8076748:	08077c1e 	.word	0x08077c1e
 807674c:	08072955 	.word	0x08072955
 8076750:	080764a1 	.word	0x080764a1
 8076754:	08077c1a 	.word	0x08077c1a

08076758 <__sfputc_r>:
 8076758:	6893      	ldr	r3, [r2, #8]
 807675a:	3b01      	subs	r3, #1
 807675c:	2b00      	cmp	r3, #0
 807675e:	b410      	push	{r4}
 8076760:	6093      	str	r3, [r2, #8]
 8076762:	da08      	bge.n	8076776 <__sfputc_r+0x1e>
 8076764:	6994      	ldr	r4, [r2, #24]
 8076766:	42a3      	cmp	r3, r4
 8076768:	db01      	blt.n	807676e <__sfputc_r+0x16>
 807676a:	290a      	cmp	r1, #10
 807676c:	d103      	bne.n	8076776 <__sfputc_r+0x1e>
 807676e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8076772:	f000 b965 	b.w	8076a40 <__swbuf_r>
 8076776:	6813      	ldr	r3, [r2, #0]
 8076778:	1c58      	adds	r0, r3, #1
 807677a:	6010      	str	r0, [r2, #0]
 807677c:	7019      	strb	r1, [r3, #0]
 807677e:	4608      	mov	r0, r1
 8076780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8076784:	4770      	bx	lr

08076786 <__sfputs_r>:
 8076786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076788:	4606      	mov	r6, r0
 807678a:	460f      	mov	r7, r1
 807678c:	4614      	mov	r4, r2
 807678e:	18d5      	adds	r5, r2, r3
 8076790:	42ac      	cmp	r4, r5
 8076792:	d101      	bne.n	8076798 <__sfputs_r+0x12>
 8076794:	2000      	movs	r0, #0
 8076796:	e007      	b.n	80767a8 <__sfputs_r+0x22>
 8076798:	f814 1b01 	ldrb.w	r1, [r4], #1
 807679c:	463a      	mov	r2, r7
 807679e:	4630      	mov	r0, r6
 80767a0:	f7ff ffda 	bl	8076758 <__sfputc_r>
 80767a4:	1c43      	adds	r3, r0, #1
 80767a6:	d1f3      	bne.n	8076790 <__sfputs_r+0xa>
 80767a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080767ac <_vfiprintf_r>:
 80767ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80767b0:	460d      	mov	r5, r1
 80767b2:	b09d      	sub	sp, #116	; 0x74
 80767b4:	4614      	mov	r4, r2
 80767b6:	4698      	mov	r8, r3
 80767b8:	4606      	mov	r6, r0
 80767ba:	b118      	cbz	r0, 80767c4 <_vfiprintf_r+0x18>
 80767bc:	6983      	ldr	r3, [r0, #24]
 80767be:	b90b      	cbnz	r3, 80767c4 <_vfiprintf_r+0x18>
 80767c0:	f7fb fef2 	bl	80725a8 <__sinit>
 80767c4:	4b89      	ldr	r3, [pc, #548]	; (80769ec <_vfiprintf_r+0x240>)
 80767c6:	429d      	cmp	r5, r3
 80767c8:	d11b      	bne.n	8076802 <_vfiprintf_r+0x56>
 80767ca:	6875      	ldr	r5, [r6, #4]
 80767cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80767ce:	07d9      	lsls	r1, r3, #31
 80767d0:	d405      	bmi.n	80767de <_vfiprintf_r+0x32>
 80767d2:	89ab      	ldrh	r3, [r5, #12]
 80767d4:	059a      	lsls	r2, r3, #22
 80767d6:	d402      	bmi.n	80767de <_vfiprintf_r+0x32>
 80767d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80767da:	f7fb ffa8 	bl	807272e <__retarget_lock_acquire_recursive>
 80767de:	89ab      	ldrh	r3, [r5, #12]
 80767e0:	071b      	lsls	r3, r3, #28
 80767e2:	d501      	bpl.n	80767e8 <_vfiprintf_r+0x3c>
 80767e4:	692b      	ldr	r3, [r5, #16]
 80767e6:	b9eb      	cbnz	r3, 8076824 <_vfiprintf_r+0x78>
 80767e8:	4629      	mov	r1, r5
 80767ea:	4630      	mov	r0, r6
 80767ec:	f000 f988 	bl	8076b00 <__swsetup_r>
 80767f0:	b1c0      	cbz	r0, 8076824 <_vfiprintf_r+0x78>
 80767f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80767f4:	07dc      	lsls	r4, r3, #31
 80767f6:	d50e      	bpl.n	8076816 <_vfiprintf_r+0x6a>
 80767f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80767fc:	b01d      	add	sp, #116	; 0x74
 80767fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8076802:	4b7b      	ldr	r3, [pc, #492]	; (80769f0 <_vfiprintf_r+0x244>)
 8076804:	429d      	cmp	r5, r3
 8076806:	d101      	bne.n	807680c <_vfiprintf_r+0x60>
 8076808:	68b5      	ldr	r5, [r6, #8]
 807680a:	e7df      	b.n	80767cc <_vfiprintf_r+0x20>
 807680c:	4b79      	ldr	r3, [pc, #484]	; (80769f4 <_vfiprintf_r+0x248>)
 807680e:	429d      	cmp	r5, r3
 8076810:	bf08      	it	eq
 8076812:	68f5      	ldreq	r5, [r6, #12]
 8076814:	e7da      	b.n	80767cc <_vfiprintf_r+0x20>
 8076816:	89ab      	ldrh	r3, [r5, #12]
 8076818:	0598      	lsls	r0, r3, #22
 807681a:	d4ed      	bmi.n	80767f8 <_vfiprintf_r+0x4c>
 807681c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 807681e:	f7fb ff87 	bl	8072730 <__retarget_lock_release_recursive>
 8076822:	e7e9      	b.n	80767f8 <_vfiprintf_r+0x4c>
 8076824:	2300      	movs	r3, #0
 8076826:	9309      	str	r3, [sp, #36]	; 0x24
 8076828:	2320      	movs	r3, #32
 807682a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 807682e:	f8cd 800c 	str.w	r8, [sp, #12]
 8076832:	2330      	movs	r3, #48	; 0x30
 8076834:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80769f8 <_vfiprintf_r+0x24c>
 8076838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 807683c:	f04f 0901 	mov.w	r9, #1
 8076840:	4623      	mov	r3, r4
 8076842:	469a      	mov	sl, r3
 8076844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8076848:	b10a      	cbz	r2, 807684e <_vfiprintf_r+0xa2>
 807684a:	2a25      	cmp	r2, #37	; 0x25
 807684c:	d1f9      	bne.n	8076842 <_vfiprintf_r+0x96>
 807684e:	ebba 0b04 	subs.w	fp, sl, r4
 8076852:	d00b      	beq.n	807686c <_vfiprintf_r+0xc0>
 8076854:	465b      	mov	r3, fp
 8076856:	4622      	mov	r2, r4
 8076858:	4629      	mov	r1, r5
 807685a:	4630      	mov	r0, r6
 807685c:	f7ff ff93 	bl	8076786 <__sfputs_r>
 8076860:	3001      	adds	r0, #1
 8076862:	f000 80aa 	beq.w	80769ba <_vfiprintf_r+0x20e>
 8076866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8076868:	445a      	add	r2, fp
 807686a:	9209      	str	r2, [sp, #36]	; 0x24
 807686c:	f89a 3000 	ldrb.w	r3, [sl]
 8076870:	2b00      	cmp	r3, #0
 8076872:	f000 80a2 	beq.w	80769ba <_vfiprintf_r+0x20e>
 8076876:	2300      	movs	r3, #0
 8076878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 807687c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8076880:	f10a 0a01 	add.w	sl, sl, #1
 8076884:	9304      	str	r3, [sp, #16]
 8076886:	9307      	str	r3, [sp, #28]
 8076888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 807688c:	931a      	str	r3, [sp, #104]	; 0x68
 807688e:	4654      	mov	r4, sl
 8076890:	2205      	movs	r2, #5
 8076892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8076896:	4858      	ldr	r0, [pc, #352]	; (80769f8 <_vfiprintf_r+0x24c>)
 8076898:	f7e9 fcba 	bl	8060210 <memchr>
 807689c:	9a04      	ldr	r2, [sp, #16]
 807689e:	b9d8      	cbnz	r0, 80768d8 <_vfiprintf_r+0x12c>
 80768a0:	06d1      	lsls	r1, r2, #27
 80768a2:	bf44      	itt	mi
 80768a4:	2320      	movmi	r3, #32
 80768a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80768aa:	0713      	lsls	r3, r2, #28
 80768ac:	bf44      	itt	mi
 80768ae:	232b      	movmi	r3, #43	; 0x2b
 80768b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80768b4:	f89a 3000 	ldrb.w	r3, [sl]
 80768b8:	2b2a      	cmp	r3, #42	; 0x2a
 80768ba:	d015      	beq.n	80768e8 <_vfiprintf_r+0x13c>
 80768bc:	9a07      	ldr	r2, [sp, #28]
 80768be:	4654      	mov	r4, sl
 80768c0:	2000      	movs	r0, #0
 80768c2:	f04f 0c0a 	mov.w	ip, #10
 80768c6:	4621      	mov	r1, r4
 80768c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80768cc:	3b30      	subs	r3, #48	; 0x30
 80768ce:	2b09      	cmp	r3, #9
 80768d0:	d94e      	bls.n	8076970 <_vfiprintf_r+0x1c4>
 80768d2:	b1b0      	cbz	r0, 8076902 <_vfiprintf_r+0x156>
 80768d4:	9207      	str	r2, [sp, #28]
 80768d6:	e014      	b.n	8076902 <_vfiprintf_r+0x156>
 80768d8:	eba0 0308 	sub.w	r3, r0, r8
 80768dc:	fa09 f303 	lsl.w	r3, r9, r3
 80768e0:	4313      	orrs	r3, r2
 80768e2:	9304      	str	r3, [sp, #16]
 80768e4:	46a2      	mov	sl, r4
 80768e6:	e7d2      	b.n	807688e <_vfiprintf_r+0xe2>
 80768e8:	9b03      	ldr	r3, [sp, #12]
 80768ea:	1d19      	adds	r1, r3, #4
 80768ec:	681b      	ldr	r3, [r3, #0]
 80768ee:	9103      	str	r1, [sp, #12]
 80768f0:	2b00      	cmp	r3, #0
 80768f2:	bfbb      	ittet	lt
 80768f4:	425b      	neglt	r3, r3
 80768f6:	f042 0202 	orrlt.w	r2, r2, #2
 80768fa:	9307      	strge	r3, [sp, #28]
 80768fc:	9307      	strlt	r3, [sp, #28]
 80768fe:	bfb8      	it	lt
 8076900:	9204      	strlt	r2, [sp, #16]
 8076902:	7823      	ldrb	r3, [r4, #0]
 8076904:	2b2e      	cmp	r3, #46	; 0x2e
 8076906:	d10c      	bne.n	8076922 <_vfiprintf_r+0x176>
 8076908:	7863      	ldrb	r3, [r4, #1]
 807690a:	2b2a      	cmp	r3, #42	; 0x2a
 807690c:	d135      	bne.n	807697a <_vfiprintf_r+0x1ce>
 807690e:	9b03      	ldr	r3, [sp, #12]
 8076910:	1d1a      	adds	r2, r3, #4
 8076912:	681b      	ldr	r3, [r3, #0]
 8076914:	9203      	str	r2, [sp, #12]
 8076916:	2b00      	cmp	r3, #0
 8076918:	bfb8      	it	lt
 807691a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 807691e:	3402      	adds	r4, #2
 8076920:	9305      	str	r3, [sp, #20]
 8076922:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8076a08 <_vfiprintf_r+0x25c>
 8076926:	7821      	ldrb	r1, [r4, #0]
 8076928:	2203      	movs	r2, #3
 807692a:	4650      	mov	r0, sl
 807692c:	f7e9 fc70 	bl	8060210 <memchr>
 8076930:	b140      	cbz	r0, 8076944 <_vfiprintf_r+0x198>
 8076932:	2340      	movs	r3, #64	; 0x40
 8076934:	eba0 000a 	sub.w	r0, r0, sl
 8076938:	fa03 f000 	lsl.w	r0, r3, r0
 807693c:	9b04      	ldr	r3, [sp, #16]
 807693e:	4303      	orrs	r3, r0
 8076940:	3401      	adds	r4, #1
 8076942:	9304      	str	r3, [sp, #16]
 8076944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8076948:	482c      	ldr	r0, [pc, #176]	; (80769fc <_vfiprintf_r+0x250>)
 807694a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 807694e:	2206      	movs	r2, #6
 8076950:	f7e9 fc5e 	bl	8060210 <memchr>
 8076954:	2800      	cmp	r0, #0
 8076956:	d03f      	beq.n	80769d8 <_vfiprintf_r+0x22c>
 8076958:	4b29      	ldr	r3, [pc, #164]	; (8076a00 <_vfiprintf_r+0x254>)
 807695a:	bb1b      	cbnz	r3, 80769a4 <_vfiprintf_r+0x1f8>
 807695c:	9b03      	ldr	r3, [sp, #12]
 807695e:	3307      	adds	r3, #7
 8076960:	f023 0307 	bic.w	r3, r3, #7
 8076964:	3308      	adds	r3, #8
 8076966:	9303      	str	r3, [sp, #12]
 8076968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 807696a:	443b      	add	r3, r7
 807696c:	9309      	str	r3, [sp, #36]	; 0x24
 807696e:	e767      	b.n	8076840 <_vfiprintf_r+0x94>
 8076970:	fb0c 3202 	mla	r2, ip, r2, r3
 8076974:	460c      	mov	r4, r1
 8076976:	2001      	movs	r0, #1
 8076978:	e7a5      	b.n	80768c6 <_vfiprintf_r+0x11a>
 807697a:	2300      	movs	r3, #0
 807697c:	3401      	adds	r4, #1
 807697e:	9305      	str	r3, [sp, #20]
 8076980:	4619      	mov	r1, r3
 8076982:	f04f 0c0a 	mov.w	ip, #10
 8076986:	4620      	mov	r0, r4
 8076988:	f810 2b01 	ldrb.w	r2, [r0], #1
 807698c:	3a30      	subs	r2, #48	; 0x30
 807698e:	2a09      	cmp	r2, #9
 8076990:	d903      	bls.n	807699a <_vfiprintf_r+0x1ee>
 8076992:	2b00      	cmp	r3, #0
 8076994:	d0c5      	beq.n	8076922 <_vfiprintf_r+0x176>
 8076996:	9105      	str	r1, [sp, #20]
 8076998:	e7c3      	b.n	8076922 <_vfiprintf_r+0x176>
 807699a:	fb0c 2101 	mla	r1, ip, r1, r2
 807699e:	4604      	mov	r4, r0
 80769a0:	2301      	movs	r3, #1
 80769a2:	e7f0      	b.n	8076986 <_vfiprintf_r+0x1da>
 80769a4:	ab03      	add	r3, sp, #12
 80769a6:	9300      	str	r3, [sp, #0]
 80769a8:	462a      	mov	r2, r5
 80769aa:	4b16      	ldr	r3, [pc, #88]	; (8076a04 <_vfiprintf_r+0x258>)
 80769ac:	a904      	add	r1, sp, #16
 80769ae:	4630      	mov	r0, r6
 80769b0:	f7fb ffd0 	bl	8072954 <_printf_float>
 80769b4:	4607      	mov	r7, r0
 80769b6:	1c78      	adds	r0, r7, #1
 80769b8:	d1d6      	bne.n	8076968 <_vfiprintf_r+0x1bc>
 80769ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80769bc:	07d9      	lsls	r1, r3, #31
 80769be:	d405      	bmi.n	80769cc <_vfiprintf_r+0x220>
 80769c0:	89ab      	ldrh	r3, [r5, #12]
 80769c2:	059a      	lsls	r2, r3, #22
 80769c4:	d402      	bmi.n	80769cc <_vfiprintf_r+0x220>
 80769c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80769c8:	f7fb feb2 	bl	8072730 <__retarget_lock_release_recursive>
 80769cc:	89ab      	ldrh	r3, [r5, #12]
 80769ce:	065b      	lsls	r3, r3, #25
 80769d0:	f53f af12 	bmi.w	80767f8 <_vfiprintf_r+0x4c>
 80769d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80769d6:	e711      	b.n	80767fc <_vfiprintf_r+0x50>
 80769d8:	ab03      	add	r3, sp, #12
 80769da:	9300      	str	r3, [sp, #0]
 80769dc:	462a      	mov	r2, r5
 80769de:	4b09      	ldr	r3, [pc, #36]	; (8076a04 <_vfiprintf_r+0x258>)
 80769e0:	a904      	add	r1, sp, #16
 80769e2:	4630      	mov	r0, r6
 80769e4:	f7fc fa5a 	bl	8072e9c <_printf_i>
 80769e8:	e7e4      	b.n	80769b4 <_vfiprintf_r+0x208>
 80769ea:	bf00      	nop
 80769ec:	080777d0 	.word	0x080777d0
 80769f0:	080777f0 	.word	0x080777f0
 80769f4:	080777b0 	.word	0x080777b0
 80769f8:	08077c14 	.word	0x08077c14
 80769fc:	08077c1e 	.word	0x08077c1e
 8076a00:	08072955 	.word	0x08072955
 8076a04:	08076787 	.word	0x08076787
 8076a08:	08077c1a 	.word	0x08077c1a

08076a0c <_read_r>:
 8076a0c:	b538      	push	{r3, r4, r5, lr}
 8076a0e:	4d07      	ldr	r5, [pc, #28]	; (8076a2c <_read_r+0x20>)
 8076a10:	4604      	mov	r4, r0
 8076a12:	4608      	mov	r0, r1
 8076a14:	4611      	mov	r1, r2
 8076a16:	2200      	movs	r2, #0
 8076a18:	602a      	str	r2, [r5, #0]
 8076a1a:	461a      	mov	r2, r3
 8076a1c:	f7ec fdae 	bl	806357c <_read>
 8076a20:	1c43      	adds	r3, r0, #1
 8076a22:	d102      	bne.n	8076a2a <_read_r+0x1e>
 8076a24:	682b      	ldr	r3, [r5, #0]
 8076a26:	b103      	cbz	r3, 8076a2a <_read_r+0x1e>
 8076a28:	6023      	str	r3, [r4, #0]
 8076a2a:	bd38      	pop	{r3, r4, r5, pc}
 8076a2c:	20005d30 	.word	0x20005d30

08076a30 <nan>:
 8076a30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8076a38 <nan+0x8>
 8076a34:	4770      	bx	lr
 8076a36:	bf00      	nop
 8076a38:	00000000 	.word	0x00000000
 8076a3c:	7ff80000 	.word	0x7ff80000

08076a40 <__swbuf_r>:
 8076a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076a42:	460e      	mov	r6, r1
 8076a44:	4614      	mov	r4, r2
 8076a46:	4605      	mov	r5, r0
 8076a48:	b118      	cbz	r0, 8076a52 <__swbuf_r+0x12>
 8076a4a:	6983      	ldr	r3, [r0, #24]
 8076a4c:	b90b      	cbnz	r3, 8076a52 <__swbuf_r+0x12>
 8076a4e:	f7fb fdab 	bl	80725a8 <__sinit>
 8076a52:	4b21      	ldr	r3, [pc, #132]	; (8076ad8 <__swbuf_r+0x98>)
 8076a54:	429c      	cmp	r4, r3
 8076a56:	d12b      	bne.n	8076ab0 <__swbuf_r+0x70>
 8076a58:	686c      	ldr	r4, [r5, #4]
 8076a5a:	69a3      	ldr	r3, [r4, #24]
 8076a5c:	60a3      	str	r3, [r4, #8]
 8076a5e:	89a3      	ldrh	r3, [r4, #12]
 8076a60:	071a      	lsls	r2, r3, #28
 8076a62:	d52f      	bpl.n	8076ac4 <__swbuf_r+0x84>
 8076a64:	6923      	ldr	r3, [r4, #16]
 8076a66:	b36b      	cbz	r3, 8076ac4 <__swbuf_r+0x84>
 8076a68:	6923      	ldr	r3, [r4, #16]
 8076a6a:	6820      	ldr	r0, [r4, #0]
 8076a6c:	1ac0      	subs	r0, r0, r3
 8076a6e:	6963      	ldr	r3, [r4, #20]
 8076a70:	b2f6      	uxtb	r6, r6
 8076a72:	4283      	cmp	r3, r0
 8076a74:	4637      	mov	r7, r6
 8076a76:	dc04      	bgt.n	8076a82 <__swbuf_r+0x42>
 8076a78:	4621      	mov	r1, r4
 8076a7a:	4628      	mov	r0, r5
 8076a7c:	f7fe fc0e 	bl	807529c <_fflush_r>
 8076a80:	bb30      	cbnz	r0, 8076ad0 <__swbuf_r+0x90>
 8076a82:	68a3      	ldr	r3, [r4, #8]
 8076a84:	3b01      	subs	r3, #1
 8076a86:	60a3      	str	r3, [r4, #8]
 8076a88:	6823      	ldr	r3, [r4, #0]
 8076a8a:	1c5a      	adds	r2, r3, #1
 8076a8c:	6022      	str	r2, [r4, #0]
 8076a8e:	701e      	strb	r6, [r3, #0]
 8076a90:	6963      	ldr	r3, [r4, #20]
 8076a92:	3001      	adds	r0, #1
 8076a94:	4283      	cmp	r3, r0
 8076a96:	d004      	beq.n	8076aa2 <__swbuf_r+0x62>
 8076a98:	89a3      	ldrh	r3, [r4, #12]
 8076a9a:	07db      	lsls	r3, r3, #31
 8076a9c:	d506      	bpl.n	8076aac <__swbuf_r+0x6c>
 8076a9e:	2e0a      	cmp	r6, #10
 8076aa0:	d104      	bne.n	8076aac <__swbuf_r+0x6c>
 8076aa2:	4621      	mov	r1, r4
 8076aa4:	4628      	mov	r0, r5
 8076aa6:	f7fe fbf9 	bl	807529c <_fflush_r>
 8076aaa:	b988      	cbnz	r0, 8076ad0 <__swbuf_r+0x90>
 8076aac:	4638      	mov	r0, r7
 8076aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8076ab0:	4b0a      	ldr	r3, [pc, #40]	; (8076adc <__swbuf_r+0x9c>)
 8076ab2:	429c      	cmp	r4, r3
 8076ab4:	d101      	bne.n	8076aba <__swbuf_r+0x7a>
 8076ab6:	68ac      	ldr	r4, [r5, #8]
 8076ab8:	e7cf      	b.n	8076a5a <__swbuf_r+0x1a>
 8076aba:	4b09      	ldr	r3, [pc, #36]	; (8076ae0 <__swbuf_r+0xa0>)
 8076abc:	429c      	cmp	r4, r3
 8076abe:	bf08      	it	eq
 8076ac0:	68ec      	ldreq	r4, [r5, #12]
 8076ac2:	e7ca      	b.n	8076a5a <__swbuf_r+0x1a>
 8076ac4:	4621      	mov	r1, r4
 8076ac6:	4628      	mov	r0, r5
 8076ac8:	f000 f81a 	bl	8076b00 <__swsetup_r>
 8076acc:	2800      	cmp	r0, #0
 8076ace:	d0cb      	beq.n	8076a68 <__swbuf_r+0x28>
 8076ad0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8076ad4:	e7ea      	b.n	8076aac <__swbuf_r+0x6c>
 8076ad6:	bf00      	nop
 8076ad8:	080777d0 	.word	0x080777d0
 8076adc:	080777f0 	.word	0x080777f0
 8076ae0:	080777b0 	.word	0x080777b0

08076ae4 <__ascii_wctomb>:
 8076ae4:	b149      	cbz	r1, 8076afa <__ascii_wctomb+0x16>
 8076ae6:	2aff      	cmp	r2, #255	; 0xff
 8076ae8:	bf85      	ittet	hi
 8076aea:	238a      	movhi	r3, #138	; 0x8a
 8076aec:	6003      	strhi	r3, [r0, #0]
 8076aee:	700a      	strbls	r2, [r1, #0]
 8076af0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8076af4:	bf98      	it	ls
 8076af6:	2001      	movls	r0, #1
 8076af8:	4770      	bx	lr
 8076afa:	4608      	mov	r0, r1
 8076afc:	4770      	bx	lr
	...

08076b00 <__swsetup_r>:
 8076b00:	4b32      	ldr	r3, [pc, #200]	; (8076bcc <__swsetup_r+0xcc>)
 8076b02:	b570      	push	{r4, r5, r6, lr}
 8076b04:	681d      	ldr	r5, [r3, #0]
 8076b06:	4606      	mov	r6, r0
 8076b08:	460c      	mov	r4, r1
 8076b0a:	b125      	cbz	r5, 8076b16 <__swsetup_r+0x16>
 8076b0c:	69ab      	ldr	r3, [r5, #24]
 8076b0e:	b913      	cbnz	r3, 8076b16 <__swsetup_r+0x16>
 8076b10:	4628      	mov	r0, r5
 8076b12:	f7fb fd49 	bl	80725a8 <__sinit>
 8076b16:	4b2e      	ldr	r3, [pc, #184]	; (8076bd0 <__swsetup_r+0xd0>)
 8076b18:	429c      	cmp	r4, r3
 8076b1a:	d10f      	bne.n	8076b3c <__swsetup_r+0x3c>
 8076b1c:	686c      	ldr	r4, [r5, #4]
 8076b1e:	89a3      	ldrh	r3, [r4, #12]
 8076b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8076b24:	0719      	lsls	r1, r3, #28
 8076b26:	d42c      	bmi.n	8076b82 <__swsetup_r+0x82>
 8076b28:	06dd      	lsls	r5, r3, #27
 8076b2a:	d411      	bmi.n	8076b50 <__swsetup_r+0x50>
 8076b2c:	2309      	movs	r3, #9
 8076b2e:	6033      	str	r3, [r6, #0]
 8076b30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8076b34:	81a3      	strh	r3, [r4, #12]
 8076b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8076b3a:	e03e      	b.n	8076bba <__swsetup_r+0xba>
 8076b3c:	4b25      	ldr	r3, [pc, #148]	; (8076bd4 <__swsetup_r+0xd4>)
 8076b3e:	429c      	cmp	r4, r3
 8076b40:	d101      	bne.n	8076b46 <__swsetup_r+0x46>
 8076b42:	68ac      	ldr	r4, [r5, #8]
 8076b44:	e7eb      	b.n	8076b1e <__swsetup_r+0x1e>
 8076b46:	4b24      	ldr	r3, [pc, #144]	; (8076bd8 <__swsetup_r+0xd8>)
 8076b48:	429c      	cmp	r4, r3
 8076b4a:	bf08      	it	eq
 8076b4c:	68ec      	ldreq	r4, [r5, #12]
 8076b4e:	e7e6      	b.n	8076b1e <__swsetup_r+0x1e>
 8076b50:	0758      	lsls	r0, r3, #29
 8076b52:	d512      	bpl.n	8076b7a <__swsetup_r+0x7a>
 8076b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8076b56:	b141      	cbz	r1, 8076b6a <__swsetup_r+0x6a>
 8076b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8076b5c:	4299      	cmp	r1, r3
 8076b5e:	d002      	beq.n	8076b66 <__swsetup_r+0x66>
 8076b60:	4630      	mov	r0, r6
 8076b62:	f7ff fc4d 	bl	8076400 <_free_r>
 8076b66:	2300      	movs	r3, #0
 8076b68:	6363      	str	r3, [r4, #52]	; 0x34
 8076b6a:	89a3      	ldrh	r3, [r4, #12]
 8076b6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8076b70:	81a3      	strh	r3, [r4, #12]
 8076b72:	2300      	movs	r3, #0
 8076b74:	6063      	str	r3, [r4, #4]
 8076b76:	6923      	ldr	r3, [r4, #16]
 8076b78:	6023      	str	r3, [r4, #0]
 8076b7a:	89a3      	ldrh	r3, [r4, #12]
 8076b7c:	f043 0308 	orr.w	r3, r3, #8
 8076b80:	81a3      	strh	r3, [r4, #12]
 8076b82:	6923      	ldr	r3, [r4, #16]
 8076b84:	b94b      	cbnz	r3, 8076b9a <__swsetup_r+0x9a>
 8076b86:	89a3      	ldrh	r3, [r4, #12]
 8076b88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8076b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8076b90:	d003      	beq.n	8076b9a <__swsetup_r+0x9a>
 8076b92:	4621      	mov	r1, r4
 8076b94:	4630      	mov	r0, r6
 8076b96:	f000 f875 	bl	8076c84 <__smakebuf_r>
 8076b9a:	89a0      	ldrh	r0, [r4, #12]
 8076b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8076ba0:	f010 0301 	ands.w	r3, r0, #1
 8076ba4:	d00a      	beq.n	8076bbc <__swsetup_r+0xbc>
 8076ba6:	2300      	movs	r3, #0
 8076ba8:	60a3      	str	r3, [r4, #8]
 8076baa:	6963      	ldr	r3, [r4, #20]
 8076bac:	425b      	negs	r3, r3
 8076bae:	61a3      	str	r3, [r4, #24]
 8076bb0:	6923      	ldr	r3, [r4, #16]
 8076bb2:	b943      	cbnz	r3, 8076bc6 <__swsetup_r+0xc6>
 8076bb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8076bb8:	d1ba      	bne.n	8076b30 <__swsetup_r+0x30>
 8076bba:	bd70      	pop	{r4, r5, r6, pc}
 8076bbc:	0781      	lsls	r1, r0, #30
 8076bbe:	bf58      	it	pl
 8076bc0:	6963      	ldrpl	r3, [r4, #20]
 8076bc2:	60a3      	str	r3, [r4, #8]
 8076bc4:	e7f4      	b.n	8076bb0 <__swsetup_r+0xb0>
 8076bc6:	2000      	movs	r0, #0
 8076bc8:	e7f7      	b.n	8076bba <__swsetup_r+0xba>
 8076bca:	bf00      	nop
 8076bcc:	20000028 	.word	0x20000028
 8076bd0:	080777d0 	.word	0x080777d0
 8076bd4:	080777f0 	.word	0x080777f0
 8076bd8:	080777b0 	.word	0x080777b0

08076bdc <__assert_func>:
 8076bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8076bde:	4614      	mov	r4, r2
 8076be0:	461a      	mov	r2, r3
 8076be2:	4b09      	ldr	r3, [pc, #36]	; (8076c08 <__assert_func+0x2c>)
 8076be4:	681b      	ldr	r3, [r3, #0]
 8076be6:	4605      	mov	r5, r0
 8076be8:	68d8      	ldr	r0, [r3, #12]
 8076bea:	b14c      	cbz	r4, 8076c00 <__assert_func+0x24>
 8076bec:	4b07      	ldr	r3, [pc, #28]	; (8076c0c <__assert_func+0x30>)
 8076bee:	9100      	str	r1, [sp, #0]
 8076bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8076bf4:	4906      	ldr	r1, [pc, #24]	; (8076c10 <__assert_func+0x34>)
 8076bf6:	462b      	mov	r3, r5
 8076bf8:	f000 f80e 	bl	8076c18 <fiprintf>
 8076bfc:	f000 f8c2 	bl	8076d84 <abort>
 8076c00:	4b04      	ldr	r3, [pc, #16]	; (8076c14 <__assert_func+0x38>)
 8076c02:	461c      	mov	r4, r3
 8076c04:	e7f3      	b.n	8076bee <__assert_func+0x12>
 8076c06:	bf00      	nop
 8076c08:	20000028 	.word	0x20000028
 8076c0c:	08077c25 	.word	0x08077c25
 8076c10:	08077c32 	.word	0x08077c32
 8076c14:	08077c60 	.word	0x08077c60

08076c18 <fiprintf>:
 8076c18:	b40e      	push	{r1, r2, r3}
 8076c1a:	b503      	push	{r0, r1, lr}
 8076c1c:	4601      	mov	r1, r0
 8076c1e:	ab03      	add	r3, sp, #12
 8076c20:	4805      	ldr	r0, [pc, #20]	; (8076c38 <fiprintf+0x20>)
 8076c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8076c26:	6800      	ldr	r0, [r0, #0]
 8076c28:	9301      	str	r3, [sp, #4]
 8076c2a:	f7ff fdbf 	bl	80767ac <_vfiprintf_r>
 8076c2e:	b002      	add	sp, #8
 8076c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8076c34:	b003      	add	sp, #12
 8076c36:	4770      	bx	lr
 8076c38:	20000028 	.word	0x20000028

08076c3c <__swhatbuf_r>:
 8076c3c:	b570      	push	{r4, r5, r6, lr}
 8076c3e:	460e      	mov	r6, r1
 8076c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8076c44:	2900      	cmp	r1, #0
 8076c46:	b096      	sub	sp, #88	; 0x58
 8076c48:	4614      	mov	r4, r2
 8076c4a:	461d      	mov	r5, r3
 8076c4c:	da07      	bge.n	8076c5e <__swhatbuf_r+0x22>
 8076c4e:	2300      	movs	r3, #0
 8076c50:	602b      	str	r3, [r5, #0]
 8076c52:	89b3      	ldrh	r3, [r6, #12]
 8076c54:	061a      	lsls	r2, r3, #24
 8076c56:	d410      	bmi.n	8076c7a <__swhatbuf_r+0x3e>
 8076c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8076c5c:	e00e      	b.n	8076c7c <__swhatbuf_r+0x40>
 8076c5e:	466a      	mov	r2, sp
 8076c60:	f000 f898 	bl	8076d94 <_fstat_r>
 8076c64:	2800      	cmp	r0, #0
 8076c66:	dbf2      	blt.n	8076c4e <__swhatbuf_r+0x12>
 8076c68:	9a01      	ldr	r2, [sp, #4]
 8076c6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8076c6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8076c72:	425a      	negs	r2, r3
 8076c74:	415a      	adcs	r2, r3
 8076c76:	602a      	str	r2, [r5, #0]
 8076c78:	e7ee      	b.n	8076c58 <__swhatbuf_r+0x1c>
 8076c7a:	2340      	movs	r3, #64	; 0x40
 8076c7c:	2000      	movs	r0, #0
 8076c7e:	6023      	str	r3, [r4, #0]
 8076c80:	b016      	add	sp, #88	; 0x58
 8076c82:	bd70      	pop	{r4, r5, r6, pc}

08076c84 <__smakebuf_r>:
 8076c84:	898b      	ldrh	r3, [r1, #12]
 8076c86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8076c88:	079d      	lsls	r5, r3, #30
 8076c8a:	4606      	mov	r6, r0
 8076c8c:	460c      	mov	r4, r1
 8076c8e:	d507      	bpl.n	8076ca0 <__smakebuf_r+0x1c>
 8076c90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8076c94:	6023      	str	r3, [r4, #0]
 8076c96:	6123      	str	r3, [r4, #16]
 8076c98:	2301      	movs	r3, #1
 8076c9a:	6163      	str	r3, [r4, #20]
 8076c9c:	b002      	add	sp, #8
 8076c9e:	bd70      	pop	{r4, r5, r6, pc}
 8076ca0:	ab01      	add	r3, sp, #4
 8076ca2:	466a      	mov	r2, sp
 8076ca4:	f7ff ffca 	bl	8076c3c <__swhatbuf_r>
 8076ca8:	9900      	ldr	r1, [sp, #0]
 8076caa:	4605      	mov	r5, r0
 8076cac:	4630      	mov	r0, r6
 8076cae:	f7fb fd57 	bl	8072760 <_malloc_r>
 8076cb2:	b948      	cbnz	r0, 8076cc8 <__smakebuf_r+0x44>
 8076cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8076cb8:	059a      	lsls	r2, r3, #22
 8076cba:	d4ef      	bmi.n	8076c9c <__smakebuf_r+0x18>
 8076cbc:	f023 0303 	bic.w	r3, r3, #3
 8076cc0:	f043 0302 	orr.w	r3, r3, #2
 8076cc4:	81a3      	strh	r3, [r4, #12]
 8076cc6:	e7e3      	b.n	8076c90 <__smakebuf_r+0xc>
 8076cc8:	4b0d      	ldr	r3, [pc, #52]	; (8076d00 <__smakebuf_r+0x7c>)
 8076cca:	62b3      	str	r3, [r6, #40]	; 0x28
 8076ccc:	89a3      	ldrh	r3, [r4, #12]
 8076cce:	6020      	str	r0, [r4, #0]
 8076cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8076cd4:	81a3      	strh	r3, [r4, #12]
 8076cd6:	9b00      	ldr	r3, [sp, #0]
 8076cd8:	6163      	str	r3, [r4, #20]
 8076cda:	9b01      	ldr	r3, [sp, #4]
 8076cdc:	6120      	str	r0, [r4, #16]
 8076cde:	b15b      	cbz	r3, 8076cf8 <__smakebuf_r+0x74>
 8076ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8076ce4:	4630      	mov	r0, r6
 8076ce6:	f000 f867 	bl	8076db8 <_isatty_r>
 8076cea:	b128      	cbz	r0, 8076cf8 <__smakebuf_r+0x74>
 8076cec:	89a3      	ldrh	r3, [r4, #12]
 8076cee:	f023 0303 	bic.w	r3, r3, #3
 8076cf2:	f043 0301 	orr.w	r3, r3, #1
 8076cf6:	81a3      	strh	r3, [r4, #12]
 8076cf8:	89a0      	ldrh	r0, [r4, #12]
 8076cfa:	4305      	orrs	r5, r0
 8076cfc:	81a5      	strh	r5, [r4, #12]
 8076cfe:	e7cd      	b.n	8076c9c <__smakebuf_r+0x18>
 8076d00:	08072541 	.word	0x08072541

08076d04 <memmove>:
 8076d04:	4288      	cmp	r0, r1
 8076d06:	b510      	push	{r4, lr}
 8076d08:	eb01 0402 	add.w	r4, r1, r2
 8076d0c:	d902      	bls.n	8076d14 <memmove+0x10>
 8076d0e:	4284      	cmp	r4, r0
 8076d10:	4623      	mov	r3, r4
 8076d12:	d807      	bhi.n	8076d24 <memmove+0x20>
 8076d14:	1e43      	subs	r3, r0, #1
 8076d16:	42a1      	cmp	r1, r4
 8076d18:	d008      	beq.n	8076d2c <memmove+0x28>
 8076d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8076d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8076d22:	e7f8      	b.n	8076d16 <memmove+0x12>
 8076d24:	4402      	add	r2, r0
 8076d26:	4601      	mov	r1, r0
 8076d28:	428a      	cmp	r2, r1
 8076d2a:	d100      	bne.n	8076d2e <memmove+0x2a>
 8076d2c:	bd10      	pop	{r4, pc}
 8076d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8076d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8076d36:	e7f7      	b.n	8076d28 <memmove+0x24>

08076d38 <_realloc_r>:
 8076d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076d3a:	4607      	mov	r7, r0
 8076d3c:	4614      	mov	r4, r2
 8076d3e:	460e      	mov	r6, r1
 8076d40:	b921      	cbnz	r1, 8076d4c <_realloc_r+0x14>
 8076d42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8076d46:	4611      	mov	r1, r2
 8076d48:	f7fb bd0a 	b.w	8072760 <_malloc_r>
 8076d4c:	b922      	cbnz	r2, 8076d58 <_realloc_r+0x20>
 8076d4e:	f7ff fb57 	bl	8076400 <_free_r>
 8076d52:	4625      	mov	r5, r4
 8076d54:	4628      	mov	r0, r5
 8076d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8076d58:	f000 f83e 	bl	8076dd8 <_malloc_usable_size_r>
 8076d5c:	42a0      	cmp	r0, r4
 8076d5e:	d20f      	bcs.n	8076d80 <_realloc_r+0x48>
 8076d60:	4621      	mov	r1, r4
 8076d62:	4638      	mov	r0, r7
 8076d64:	f7fb fcfc 	bl	8072760 <_malloc_r>
 8076d68:	4605      	mov	r5, r0
 8076d6a:	2800      	cmp	r0, #0
 8076d6c:	d0f2      	beq.n	8076d54 <_realloc_r+0x1c>
 8076d6e:	4631      	mov	r1, r6
 8076d70:	4622      	mov	r2, r4
 8076d72:	f7fb fcde 	bl	8072732 <memcpy>
 8076d76:	4631      	mov	r1, r6
 8076d78:	4638      	mov	r0, r7
 8076d7a:	f7ff fb41 	bl	8076400 <_free_r>
 8076d7e:	e7e9      	b.n	8076d54 <_realloc_r+0x1c>
 8076d80:	4635      	mov	r5, r6
 8076d82:	e7e7      	b.n	8076d54 <_realloc_r+0x1c>

08076d84 <abort>:
 8076d84:	b508      	push	{r3, lr}
 8076d86:	2006      	movs	r0, #6
 8076d88:	f000 f856 	bl	8076e38 <raise>
 8076d8c:	2001      	movs	r0, #1
 8076d8e:	f7ec fbeb 	bl	8063568 <_exit>
	...

08076d94 <_fstat_r>:
 8076d94:	b538      	push	{r3, r4, r5, lr}
 8076d96:	4d07      	ldr	r5, [pc, #28]	; (8076db4 <_fstat_r+0x20>)
 8076d98:	2300      	movs	r3, #0
 8076d9a:	4604      	mov	r4, r0
 8076d9c:	4608      	mov	r0, r1
 8076d9e:	4611      	mov	r1, r2
 8076da0:	602b      	str	r3, [r5, #0]
 8076da2:	f7ec fc30 	bl	8063606 <_fstat>
 8076da6:	1c43      	adds	r3, r0, #1
 8076da8:	d102      	bne.n	8076db0 <_fstat_r+0x1c>
 8076daa:	682b      	ldr	r3, [r5, #0]
 8076dac:	b103      	cbz	r3, 8076db0 <_fstat_r+0x1c>
 8076dae:	6023      	str	r3, [r4, #0]
 8076db0:	bd38      	pop	{r3, r4, r5, pc}
 8076db2:	bf00      	nop
 8076db4:	20005d30 	.word	0x20005d30

08076db8 <_isatty_r>:
 8076db8:	b538      	push	{r3, r4, r5, lr}
 8076dba:	4d06      	ldr	r5, [pc, #24]	; (8076dd4 <_isatty_r+0x1c>)
 8076dbc:	2300      	movs	r3, #0
 8076dbe:	4604      	mov	r4, r0
 8076dc0:	4608      	mov	r0, r1
 8076dc2:	602b      	str	r3, [r5, #0]
 8076dc4:	f7ec fc2f 	bl	8063626 <_isatty>
 8076dc8:	1c43      	adds	r3, r0, #1
 8076dca:	d102      	bne.n	8076dd2 <_isatty_r+0x1a>
 8076dcc:	682b      	ldr	r3, [r5, #0]
 8076dce:	b103      	cbz	r3, 8076dd2 <_isatty_r+0x1a>
 8076dd0:	6023      	str	r3, [r4, #0]
 8076dd2:	bd38      	pop	{r3, r4, r5, pc}
 8076dd4:	20005d30 	.word	0x20005d30

08076dd8 <_malloc_usable_size_r>:
 8076dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8076ddc:	1f18      	subs	r0, r3, #4
 8076dde:	2b00      	cmp	r3, #0
 8076de0:	bfbc      	itt	lt
 8076de2:	580b      	ldrlt	r3, [r1, r0]
 8076de4:	18c0      	addlt	r0, r0, r3
 8076de6:	4770      	bx	lr

08076de8 <_raise_r>:
 8076de8:	291f      	cmp	r1, #31
 8076dea:	b538      	push	{r3, r4, r5, lr}
 8076dec:	4604      	mov	r4, r0
 8076dee:	460d      	mov	r5, r1
 8076df0:	d904      	bls.n	8076dfc <_raise_r+0x14>
 8076df2:	2316      	movs	r3, #22
 8076df4:	6003      	str	r3, [r0, #0]
 8076df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8076dfa:	bd38      	pop	{r3, r4, r5, pc}
 8076dfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8076dfe:	b112      	cbz	r2, 8076e06 <_raise_r+0x1e>
 8076e00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8076e04:	b94b      	cbnz	r3, 8076e1a <_raise_r+0x32>
 8076e06:	4620      	mov	r0, r4
 8076e08:	f000 f830 	bl	8076e6c <_getpid_r>
 8076e0c:	462a      	mov	r2, r5
 8076e0e:	4601      	mov	r1, r0
 8076e10:	4620      	mov	r0, r4
 8076e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8076e16:	f000 b817 	b.w	8076e48 <_kill_r>
 8076e1a:	2b01      	cmp	r3, #1
 8076e1c:	d00a      	beq.n	8076e34 <_raise_r+0x4c>
 8076e1e:	1c59      	adds	r1, r3, #1
 8076e20:	d103      	bne.n	8076e2a <_raise_r+0x42>
 8076e22:	2316      	movs	r3, #22
 8076e24:	6003      	str	r3, [r0, #0]
 8076e26:	2001      	movs	r0, #1
 8076e28:	e7e7      	b.n	8076dfa <_raise_r+0x12>
 8076e2a:	2400      	movs	r4, #0
 8076e2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8076e30:	4628      	mov	r0, r5
 8076e32:	4798      	blx	r3
 8076e34:	2000      	movs	r0, #0
 8076e36:	e7e0      	b.n	8076dfa <_raise_r+0x12>

08076e38 <raise>:
 8076e38:	4b02      	ldr	r3, [pc, #8]	; (8076e44 <raise+0xc>)
 8076e3a:	4601      	mov	r1, r0
 8076e3c:	6818      	ldr	r0, [r3, #0]
 8076e3e:	f7ff bfd3 	b.w	8076de8 <_raise_r>
 8076e42:	bf00      	nop
 8076e44:	20000028 	.word	0x20000028

08076e48 <_kill_r>:
 8076e48:	b538      	push	{r3, r4, r5, lr}
 8076e4a:	4d07      	ldr	r5, [pc, #28]	; (8076e68 <_kill_r+0x20>)
 8076e4c:	2300      	movs	r3, #0
 8076e4e:	4604      	mov	r4, r0
 8076e50:	4608      	mov	r0, r1
 8076e52:	4611      	mov	r1, r2
 8076e54:	602b      	str	r3, [r5, #0]
 8076e56:	f7ec fb77 	bl	8063548 <_kill>
 8076e5a:	1c43      	adds	r3, r0, #1
 8076e5c:	d102      	bne.n	8076e64 <_kill_r+0x1c>
 8076e5e:	682b      	ldr	r3, [r5, #0]
 8076e60:	b103      	cbz	r3, 8076e64 <_kill_r+0x1c>
 8076e62:	6023      	str	r3, [r4, #0]
 8076e64:	bd38      	pop	{r3, r4, r5, pc}
 8076e66:	bf00      	nop
 8076e68:	20005d30 	.word	0x20005d30

08076e6c <_getpid_r>:
 8076e6c:	f7ec bb64 	b.w	8063538 <_getpid>

08076e70 <_init>:
 8076e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076e72:	bf00      	nop
 8076e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8076e76:	bc08      	pop	{r3}
 8076e78:	469e      	mov	lr, r3
 8076e7a:	4770      	bx	lr

08076e7c <_fini>:
 8076e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076e7e:	bf00      	nop
 8076e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8076e82:	bc08      	pop	{r3}
 8076e84:	469e      	mov	lr, r3
 8076e86:	4770      	bx	lr
