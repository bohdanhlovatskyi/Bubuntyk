
rtocs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08060000  08060000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ba8  080601a0  080601a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  08076d48  08076d48  00026d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08077a14  08077a14  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08077a14  08077a14  00027a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08077a1c  08077a1c  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08077a1c  08077a1c  00027a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08077a20  08077a20  00027a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08077a24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b3c  200001fc  08077c20  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d38  08077c20  00035d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ac75  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007956  00000000  00000000  0007aea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002468  00000000  00000000  000827f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021a8  00000000  00000000  00084c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023564  00000000  00000000  00086e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000384a4  00000000  00000000  000aa36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3a37  00000000  00000000  000e2810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196247  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000abec  00000000  00000000  0019629c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080601a0 <__do_global_dtors_aux>:
 80601a0:	b510      	push	{r4, lr}
 80601a2:	4c05      	ldr	r4, [pc, #20]	; (80601b8 <__do_global_dtors_aux+0x18>)
 80601a4:	7823      	ldrb	r3, [r4, #0]
 80601a6:	b933      	cbnz	r3, 80601b6 <__do_global_dtors_aux+0x16>
 80601a8:	4b04      	ldr	r3, [pc, #16]	; (80601bc <__do_global_dtors_aux+0x1c>)
 80601aa:	b113      	cbz	r3, 80601b2 <__do_global_dtors_aux+0x12>
 80601ac:	4804      	ldr	r0, [pc, #16]	; (80601c0 <__do_global_dtors_aux+0x20>)
 80601ae:	f3af 8000 	nop.w
 80601b2:	2301      	movs	r3, #1
 80601b4:	7023      	strb	r3, [r4, #0]
 80601b6:	bd10      	pop	{r4, pc}
 80601b8:	200001fc 	.word	0x200001fc
 80601bc:	00000000 	.word	0x00000000
 80601c0:	08076d30 	.word	0x08076d30

080601c4 <frame_dummy>:
 80601c4:	b508      	push	{r3, lr}
 80601c6:	4b03      	ldr	r3, [pc, #12]	; (80601d4 <frame_dummy+0x10>)
 80601c8:	b11b      	cbz	r3, 80601d2 <frame_dummy+0xe>
 80601ca:	4903      	ldr	r1, [pc, #12]	; (80601d8 <frame_dummy+0x14>)
 80601cc:	4803      	ldr	r0, [pc, #12]	; (80601dc <frame_dummy+0x18>)
 80601ce:	f3af 8000 	nop.w
 80601d2:	bd08      	pop	{r3, pc}
 80601d4:	00000000 	.word	0x00000000
 80601d8:	20000200 	.word	0x20000200
 80601dc:	08076d30 	.word	0x08076d30

080601e0 <strcmp>:
 80601e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80601e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80601e8:	2a01      	cmp	r2, #1
 80601ea:	bf28      	it	cs
 80601ec:	429a      	cmpcs	r2, r3
 80601ee:	d0f7      	beq.n	80601e0 <strcmp>
 80601f0:	1ad0      	subs	r0, r2, r3
 80601f2:	4770      	bx	lr

080601f4 <strlen>:
 80601f4:	4603      	mov	r3, r0
 80601f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80601fa:	2a00      	cmp	r2, #0
 80601fc:	d1fb      	bne.n	80601f6 <strlen+0x2>
 80601fe:	1a18      	subs	r0, r3, r0
 8060200:	3801      	subs	r0, #1
 8060202:	4770      	bx	lr
	...

08060210 <memchr>:
 8060210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8060214:	2a10      	cmp	r2, #16
 8060216:	db2b      	blt.n	8060270 <memchr+0x60>
 8060218:	f010 0f07 	tst.w	r0, #7
 806021c:	d008      	beq.n	8060230 <memchr+0x20>
 806021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8060222:	3a01      	subs	r2, #1
 8060224:	428b      	cmp	r3, r1
 8060226:	d02d      	beq.n	8060284 <memchr+0x74>
 8060228:	f010 0f07 	tst.w	r0, #7
 806022c:	b342      	cbz	r2, 8060280 <memchr+0x70>
 806022e:	d1f6      	bne.n	806021e <memchr+0xe>
 8060230:	b4f0      	push	{r4, r5, r6, r7}
 8060232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8060236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 806023a:	f022 0407 	bic.w	r4, r2, #7
 806023e:	f07f 0700 	mvns.w	r7, #0
 8060242:	2300      	movs	r3, #0
 8060244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8060248:	3c08      	subs	r4, #8
 806024a:	ea85 0501 	eor.w	r5, r5, r1
 806024e:	ea86 0601 	eor.w	r6, r6, r1
 8060252:	fa85 f547 	uadd8	r5, r5, r7
 8060256:	faa3 f587 	sel	r5, r3, r7
 806025a:	fa86 f647 	uadd8	r6, r6, r7
 806025e:	faa5 f687 	sel	r6, r5, r7
 8060262:	b98e      	cbnz	r6, 8060288 <memchr+0x78>
 8060264:	d1ee      	bne.n	8060244 <memchr+0x34>
 8060266:	bcf0      	pop	{r4, r5, r6, r7}
 8060268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 806026c:	f002 0207 	and.w	r2, r2, #7
 8060270:	b132      	cbz	r2, 8060280 <memchr+0x70>
 8060272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8060276:	3a01      	subs	r2, #1
 8060278:	ea83 0301 	eor.w	r3, r3, r1
 806027c:	b113      	cbz	r3, 8060284 <memchr+0x74>
 806027e:	d1f8      	bne.n	8060272 <memchr+0x62>
 8060280:	2000      	movs	r0, #0
 8060282:	4770      	bx	lr
 8060284:	3801      	subs	r0, #1
 8060286:	4770      	bx	lr
 8060288:	2d00      	cmp	r5, #0
 806028a:	bf06      	itte	eq
 806028c:	4635      	moveq	r5, r6
 806028e:	3803      	subeq	r0, #3
 8060290:	3807      	subne	r0, #7
 8060292:	f015 0f01 	tst.w	r5, #1
 8060296:	d107      	bne.n	80602a8 <memchr+0x98>
 8060298:	3001      	adds	r0, #1
 806029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 806029e:	bf02      	ittt	eq
 80602a0:	3001      	addeq	r0, #1
 80602a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80602a6:	3001      	addeq	r0, #1
 80602a8:	bcf0      	pop	{r4, r5, r6, r7}
 80602aa:	3801      	subs	r0, #1
 80602ac:	4770      	bx	lr
 80602ae:	bf00      	nop

080602b0 <__aeabi_drsub>:
 80602b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80602b4:	e002      	b.n	80602bc <__adddf3>
 80602b6:	bf00      	nop

080602b8 <__aeabi_dsub>:
 80602b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080602bc <__adddf3>:
 80602bc:	b530      	push	{r4, r5, lr}
 80602be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80602c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80602c6:	ea94 0f05 	teq	r4, r5
 80602ca:	bf08      	it	eq
 80602cc:	ea90 0f02 	teqeq	r0, r2
 80602d0:	bf1f      	itttt	ne
 80602d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80602d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80602da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80602de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80602e2:	f000 80e2 	beq.w	80604aa <__adddf3+0x1ee>
 80602e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80602ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80602ee:	bfb8      	it	lt
 80602f0:	426d      	neglt	r5, r5
 80602f2:	dd0c      	ble.n	806030e <__adddf3+0x52>
 80602f4:	442c      	add	r4, r5
 80602f6:	ea80 0202 	eor.w	r2, r0, r2
 80602fa:	ea81 0303 	eor.w	r3, r1, r3
 80602fe:	ea82 0000 	eor.w	r0, r2, r0
 8060302:	ea83 0101 	eor.w	r1, r3, r1
 8060306:	ea80 0202 	eor.w	r2, r0, r2
 806030a:	ea81 0303 	eor.w	r3, r1, r3
 806030e:	2d36      	cmp	r5, #54	; 0x36
 8060310:	bf88      	it	hi
 8060312:	bd30      	pophi	{r4, r5, pc}
 8060314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8060318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 806031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8060320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8060324:	d002      	beq.n	806032c <__adddf3+0x70>
 8060326:	4240      	negs	r0, r0
 8060328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 806032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8060330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8060334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8060338:	d002      	beq.n	8060340 <__adddf3+0x84>
 806033a:	4252      	negs	r2, r2
 806033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060340:	ea94 0f05 	teq	r4, r5
 8060344:	f000 80a7 	beq.w	8060496 <__adddf3+0x1da>
 8060348:	f1a4 0401 	sub.w	r4, r4, #1
 806034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8060350:	db0d      	blt.n	806036e <__adddf3+0xb2>
 8060352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8060356:	fa22 f205 	lsr.w	r2, r2, r5
 806035a:	1880      	adds	r0, r0, r2
 806035c:	f141 0100 	adc.w	r1, r1, #0
 8060360:	fa03 f20e 	lsl.w	r2, r3, lr
 8060364:	1880      	adds	r0, r0, r2
 8060366:	fa43 f305 	asr.w	r3, r3, r5
 806036a:	4159      	adcs	r1, r3
 806036c:	e00e      	b.n	806038c <__adddf3+0xd0>
 806036e:	f1a5 0520 	sub.w	r5, r5, #32
 8060372:	f10e 0e20 	add.w	lr, lr, #32
 8060376:	2a01      	cmp	r2, #1
 8060378:	fa03 fc0e 	lsl.w	ip, r3, lr
 806037c:	bf28      	it	cs
 806037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8060382:	fa43 f305 	asr.w	r3, r3, r5
 8060386:	18c0      	adds	r0, r0, r3
 8060388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 806038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8060390:	d507      	bpl.n	80603a2 <__adddf3+0xe6>
 8060392:	f04f 0e00 	mov.w	lr, #0
 8060396:	f1dc 0c00 	rsbs	ip, ip, #0
 806039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 806039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80603a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80603a6:	d31b      	bcc.n	80603e0 <__adddf3+0x124>
 80603a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80603ac:	d30c      	bcc.n	80603c8 <__adddf3+0x10c>
 80603ae:	0849      	lsrs	r1, r1, #1
 80603b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80603b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80603b8:	f104 0401 	add.w	r4, r4, #1
 80603bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80603c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80603c4:	f080 809a 	bcs.w	80604fc <__adddf3+0x240>
 80603c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80603cc:	bf08      	it	eq
 80603ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80603d2:	f150 0000 	adcs.w	r0, r0, #0
 80603d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80603da:	ea41 0105 	orr.w	r1, r1, r5
 80603de:	bd30      	pop	{r4, r5, pc}
 80603e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80603e4:	4140      	adcs	r0, r0
 80603e6:	eb41 0101 	adc.w	r1, r1, r1
 80603ea:	3c01      	subs	r4, #1
 80603ec:	bf28      	it	cs
 80603ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80603f2:	d2e9      	bcs.n	80603c8 <__adddf3+0x10c>
 80603f4:	f091 0f00 	teq	r1, #0
 80603f8:	bf04      	itt	eq
 80603fa:	4601      	moveq	r1, r0
 80603fc:	2000      	moveq	r0, #0
 80603fe:	fab1 f381 	clz	r3, r1
 8060402:	bf08      	it	eq
 8060404:	3320      	addeq	r3, #32
 8060406:	f1a3 030b 	sub.w	r3, r3, #11
 806040a:	f1b3 0220 	subs.w	r2, r3, #32
 806040e:	da0c      	bge.n	806042a <__adddf3+0x16e>
 8060410:	320c      	adds	r2, #12
 8060412:	dd08      	ble.n	8060426 <__adddf3+0x16a>
 8060414:	f102 0c14 	add.w	ip, r2, #20
 8060418:	f1c2 020c 	rsb	r2, r2, #12
 806041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8060420:	fa21 f102 	lsr.w	r1, r1, r2
 8060424:	e00c      	b.n	8060440 <__adddf3+0x184>
 8060426:	f102 0214 	add.w	r2, r2, #20
 806042a:	bfd8      	it	le
 806042c:	f1c2 0c20 	rsble	ip, r2, #32
 8060430:	fa01 f102 	lsl.w	r1, r1, r2
 8060434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8060438:	bfdc      	itt	le
 806043a:	ea41 010c 	orrle.w	r1, r1, ip
 806043e:	4090      	lslle	r0, r2
 8060440:	1ae4      	subs	r4, r4, r3
 8060442:	bfa2      	ittt	ge
 8060444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8060448:	4329      	orrge	r1, r5
 806044a:	bd30      	popge	{r4, r5, pc}
 806044c:	ea6f 0404 	mvn.w	r4, r4
 8060450:	3c1f      	subs	r4, #31
 8060452:	da1c      	bge.n	806048e <__adddf3+0x1d2>
 8060454:	340c      	adds	r4, #12
 8060456:	dc0e      	bgt.n	8060476 <__adddf3+0x1ba>
 8060458:	f104 0414 	add.w	r4, r4, #20
 806045c:	f1c4 0220 	rsb	r2, r4, #32
 8060460:	fa20 f004 	lsr.w	r0, r0, r4
 8060464:	fa01 f302 	lsl.w	r3, r1, r2
 8060468:	ea40 0003 	orr.w	r0, r0, r3
 806046c:	fa21 f304 	lsr.w	r3, r1, r4
 8060470:	ea45 0103 	orr.w	r1, r5, r3
 8060474:	bd30      	pop	{r4, r5, pc}
 8060476:	f1c4 040c 	rsb	r4, r4, #12
 806047a:	f1c4 0220 	rsb	r2, r4, #32
 806047e:	fa20 f002 	lsr.w	r0, r0, r2
 8060482:	fa01 f304 	lsl.w	r3, r1, r4
 8060486:	ea40 0003 	orr.w	r0, r0, r3
 806048a:	4629      	mov	r1, r5
 806048c:	bd30      	pop	{r4, r5, pc}
 806048e:	fa21 f004 	lsr.w	r0, r1, r4
 8060492:	4629      	mov	r1, r5
 8060494:	bd30      	pop	{r4, r5, pc}
 8060496:	f094 0f00 	teq	r4, #0
 806049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 806049e:	bf06      	itte	eq
 80604a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80604a4:	3401      	addeq	r4, #1
 80604a6:	3d01      	subne	r5, #1
 80604a8:	e74e      	b.n	8060348 <__adddf3+0x8c>
 80604aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80604ae:	bf18      	it	ne
 80604b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80604b4:	d029      	beq.n	806050a <__adddf3+0x24e>
 80604b6:	ea94 0f05 	teq	r4, r5
 80604ba:	bf08      	it	eq
 80604bc:	ea90 0f02 	teqeq	r0, r2
 80604c0:	d005      	beq.n	80604ce <__adddf3+0x212>
 80604c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80604c6:	bf04      	itt	eq
 80604c8:	4619      	moveq	r1, r3
 80604ca:	4610      	moveq	r0, r2
 80604cc:	bd30      	pop	{r4, r5, pc}
 80604ce:	ea91 0f03 	teq	r1, r3
 80604d2:	bf1e      	ittt	ne
 80604d4:	2100      	movne	r1, #0
 80604d6:	2000      	movne	r0, #0
 80604d8:	bd30      	popne	{r4, r5, pc}
 80604da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80604de:	d105      	bne.n	80604ec <__adddf3+0x230>
 80604e0:	0040      	lsls	r0, r0, #1
 80604e2:	4149      	adcs	r1, r1
 80604e4:	bf28      	it	cs
 80604e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80604ea:	bd30      	pop	{r4, r5, pc}
 80604ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80604f0:	bf3c      	itt	cc
 80604f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80604f6:	bd30      	popcc	{r4, r5, pc}
 80604f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80604fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8060500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8060504:	f04f 0000 	mov.w	r0, #0
 8060508:	bd30      	pop	{r4, r5, pc}
 806050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 806050e:	bf1a      	itte	ne
 8060510:	4619      	movne	r1, r3
 8060512:	4610      	movne	r0, r2
 8060514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8060518:	bf1c      	itt	ne
 806051a:	460b      	movne	r3, r1
 806051c:	4602      	movne	r2, r0
 806051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8060522:	bf06      	itte	eq
 8060524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8060528:	ea91 0f03 	teqeq	r1, r3
 806052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8060530:	bd30      	pop	{r4, r5, pc}
 8060532:	bf00      	nop

08060534 <__aeabi_ui2d>:
 8060534:	f090 0f00 	teq	r0, #0
 8060538:	bf04      	itt	eq
 806053a:	2100      	moveq	r1, #0
 806053c:	4770      	bxeq	lr
 806053e:	b530      	push	{r4, r5, lr}
 8060540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8060544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8060548:	f04f 0500 	mov.w	r5, #0
 806054c:	f04f 0100 	mov.w	r1, #0
 8060550:	e750      	b.n	80603f4 <__adddf3+0x138>
 8060552:	bf00      	nop

08060554 <__aeabi_i2d>:
 8060554:	f090 0f00 	teq	r0, #0
 8060558:	bf04      	itt	eq
 806055a:	2100      	moveq	r1, #0
 806055c:	4770      	bxeq	lr
 806055e:	b530      	push	{r4, r5, lr}
 8060560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8060564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8060568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 806056c:	bf48      	it	mi
 806056e:	4240      	negmi	r0, r0
 8060570:	f04f 0100 	mov.w	r1, #0
 8060574:	e73e      	b.n	80603f4 <__adddf3+0x138>
 8060576:	bf00      	nop

08060578 <__aeabi_f2d>:
 8060578:	0042      	lsls	r2, r0, #1
 806057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 806057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8060582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8060586:	bf1f      	itttt	ne
 8060588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 806058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8060590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8060594:	4770      	bxne	lr
 8060596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 806059a:	bf08      	it	eq
 806059c:	4770      	bxeq	lr
 806059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80605a2:	bf04      	itt	eq
 80605a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80605a8:	4770      	bxeq	lr
 80605aa:	b530      	push	{r4, r5, lr}
 80605ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80605b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80605b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80605b8:	e71c      	b.n	80603f4 <__adddf3+0x138>
 80605ba:	bf00      	nop

080605bc <__aeabi_ul2d>:
 80605bc:	ea50 0201 	orrs.w	r2, r0, r1
 80605c0:	bf08      	it	eq
 80605c2:	4770      	bxeq	lr
 80605c4:	b530      	push	{r4, r5, lr}
 80605c6:	f04f 0500 	mov.w	r5, #0
 80605ca:	e00a      	b.n	80605e2 <__aeabi_l2d+0x16>

080605cc <__aeabi_l2d>:
 80605cc:	ea50 0201 	orrs.w	r2, r0, r1
 80605d0:	bf08      	it	eq
 80605d2:	4770      	bxeq	lr
 80605d4:	b530      	push	{r4, r5, lr}
 80605d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80605da:	d502      	bpl.n	80605e2 <__aeabi_l2d+0x16>
 80605dc:	4240      	negs	r0, r0
 80605de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80605e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80605e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80605ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80605ee:	f43f aed8 	beq.w	80603a2 <__adddf3+0xe6>
 80605f2:	f04f 0203 	mov.w	r2, #3
 80605f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80605fa:	bf18      	it	ne
 80605fc:	3203      	addne	r2, #3
 80605fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8060602:	bf18      	it	ne
 8060604:	3203      	addne	r2, #3
 8060606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 806060a:	f1c2 0320 	rsb	r3, r2, #32
 806060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8060612:	fa20 f002 	lsr.w	r0, r0, r2
 8060616:	fa01 fe03 	lsl.w	lr, r1, r3
 806061a:	ea40 000e 	orr.w	r0, r0, lr
 806061e:	fa21 f102 	lsr.w	r1, r1, r2
 8060622:	4414      	add	r4, r2
 8060624:	e6bd      	b.n	80603a2 <__adddf3+0xe6>
 8060626:	bf00      	nop

08060628 <__aeabi_dmul>:
 8060628:	b570      	push	{r4, r5, r6, lr}
 806062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 806062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8060632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8060636:	bf1d      	ittte	ne
 8060638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 806063c:	ea94 0f0c 	teqne	r4, ip
 8060640:	ea95 0f0c 	teqne	r5, ip
 8060644:	f000 f8de 	bleq	8060804 <__aeabi_dmul+0x1dc>
 8060648:	442c      	add	r4, r5
 806064a:	ea81 0603 	eor.w	r6, r1, r3
 806064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8060652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8060656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 806065a:	bf18      	it	ne
 806065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8060660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8060664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8060668:	d038      	beq.n	80606dc <__aeabi_dmul+0xb4>
 806066a:	fba0 ce02 	umull	ip, lr, r0, r2
 806066e:	f04f 0500 	mov.w	r5, #0
 8060672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8060676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 806067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 806067e:	f04f 0600 	mov.w	r6, #0
 8060682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8060686:	f09c 0f00 	teq	ip, #0
 806068a:	bf18      	it	ne
 806068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8060690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8060694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8060698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 806069c:	d204      	bcs.n	80606a8 <__aeabi_dmul+0x80>
 806069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80606a2:	416d      	adcs	r5, r5
 80606a4:	eb46 0606 	adc.w	r6, r6, r6
 80606a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80606ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80606b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80606b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80606b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80606bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80606c0:	bf88      	it	hi
 80606c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80606c6:	d81e      	bhi.n	8060706 <__aeabi_dmul+0xde>
 80606c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80606cc:	bf08      	it	eq
 80606ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80606d2:	f150 0000 	adcs.w	r0, r0, #0
 80606d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80606da:	bd70      	pop	{r4, r5, r6, pc}
 80606dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80606e0:	ea46 0101 	orr.w	r1, r6, r1
 80606e4:	ea40 0002 	orr.w	r0, r0, r2
 80606e8:	ea81 0103 	eor.w	r1, r1, r3
 80606ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80606f0:	bfc2      	ittt	gt
 80606f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80606f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80606fa:	bd70      	popgt	{r4, r5, r6, pc}
 80606fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8060700:	f04f 0e00 	mov.w	lr, #0
 8060704:	3c01      	subs	r4, #1
 8060706:	f300 80ab 	bgt.w	8060860 <__aeabi_dmul+0x238>
 806070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 806070e:	bfde      	ittt	le
 8060710:	2000      	movle	r0, #0
 8060712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8060716:	bd70      	pople	{r4, r5, r6, pc}
 8060718:	f1c4 0400 	rsb	r4, r4, #0
 806071c:	3c20      	subs	r4, #32
 806071e:	da35      	bge.n	806078c <__aeabi_dmul+0x164>
 8060720:	340c      	adds	r4, #12
 8060722:	dc1b      	bgt.n	806075c <__aeabi_dmul+0x134>
 8060724:	f104 0414 	add.w	r4, r4, #20
 8060728:	f1c4 0520 	rsb	r5, r4, #32
 806072c:	fa00 f305 	lsl.w	r3, r0, r5
 8060730:	fa20 f004 	lsr.w	r0, r0, r4
 8060734:	fa01 f205 	lsl.w	r2, r1, r5
 8060738:	ea40 0002 	orr.w	r0, r0, r2
 806073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8060740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8060744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8060748:	fa21 f604 	lsr.w	r6, r1, r4
 806074c:	eb42 0106 	adc.w	r1, r2, r6
 8060750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8060754:	bf08      	it	eq
 8060756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 806075a:	bd70      	pop	{r4, r5, r6, pc}
 806075c:	f1c4 040c 	rsb	r4, r4, #12
 8060760:	f1c4 0520 	rsb	r5, r4, #32
 8060764:	fa00 f304 	lsl.w	r3, r0, r4
 8060768:	fa20 f005 	lsr.w	r0, r0, r5
 806076c:	fa01 f204 	lsl.w	r2, r1, r4
 8060770:	ea40 0002 	orr.w	r0, r0, r2
 8060774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8060778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 806077c:	f141 0100 	adc.w	r1, r1, #0
 8060780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8060784:	bf08      	it	eq
 8060786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 806078a:	bd70      	pop	{r4, r5, r6, pc}
 806078c:	f1c4 0520 	rsb	r5, r4, #32
 8060790:	fa00 f205 	lsl.w	r2, r0, r5
 8060794:	ea4e 0e02 	orr.w	lr, lr, r2
 8060798:	fa20 f304 	lsr.w	r3, r0, r4
 806079c:	fa01 f205 	lsl.w	r2, r1, r5
 80607a0:	ea43 0302 	orr.w	r3, r3, r2
 80607a4:	fa21 f004 	lsr.w	r0, r1, r4
 80607a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80607ac:	fa21 f204 	lsr.w	r2, r1, r4
 80607b0:	ea20 0002 	bic.w	r0, r0, r2
 80607b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80607b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80607bc:	bf08      	it	eq
 80607be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80607c2:	bd70      	pop	{r4, r5, r6, pc}
 80607c4:	f094 0f00 	teq	r4, #0
 80607c8:	d10f      	bne.n	80607ea <__aeabi_dmul+0x1c2>
 80607ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80607ce:	0040      	lsls	r0, r0, #1
 80607d0:	eb41 0101 	adc.w	r1, r1, r1
 80607d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80607d8:	bf08      	it	eq
 80607da:	3c01      	subeq	r4, #1
 80607dc:	d0f7      	beq.n	80607ce <__aeabi_dmul+0x1a6>
 80607de:	ea41 0106 	orr.w	r1, r1, r6
 80607e2:	f095 0f00 	teq	r5, #0
 80607e6:	bf18      	it	ne
 80607e8:	4770      	bxne	lr
 80607ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80607ee:	0052      	lsls	r2, r2, #1
 80607f0:	eb43 0303 	adc.w	r3, r3, r3
 80607f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80607f8:	bf08      	it	eq
 80607fa:	3d01      	subeq	r5, #1
 80607fc:	d0f7      	beq.n	80607ee <__aeabi_dmul+0x1c6>
 80607fe:	ea43 0306 	orr.w	r3, r3, r6
 8060802:	4770      	bx	lr
 8060804:	ea94 0f0c 	teq	r4, ip
 8060808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 806080c:	bf18      	it	ne
 806080e:	ea95 0f0c 	teqne	r5, ip
 8060812:	d00c      	beq.n	806082e <__aeabi_dmul+0x206>
 8060814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8060818:	bf18      	it	ne
 806081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 806081e:	d1d1      	bne.n	80607c4 <__aeabi_dmul+0x19c>
 8060820:	ea81 0103 	eor.w	r1, r1, r3
 8060824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8060828:	f04f 0000 	mov.w	r0, #0
 806082c:	bd70      	pop	{r4, r5, r6, pc}
 806082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8060832:	bf06      	itte	eq
 8060834:	4610      	moveq	r0, r2
 8060836:	4619      	moveq	r1, r3
 8060838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 806083c:	d019      	beq.n	8060872 <__aeabi_dmul+0x24a>
 806083e:	ea94 0f0c 	teq	r4, ip
 8060842:	d102      	bne.n	806084a <__aeabi_dmul+0x222>
 8060844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8060848:	d113      	bne.n	8060872 <__aeabi_dmul+0x24a>
 806084a:	ea95 0f0c 	teq	r5, ip
 806084e:	d105      	bne.n	806085c <__aeabi_dmul+0x234>
 8060850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8060854:	bf1c      	itt	ne
 8060856:	4610      	movne	r0, r2
 8060858:	4619      	movne	r1, r3
 806085a:	d10a      	bne.n	8060872 <__aeabi_dmul+0x24a>
 806085c:	ea81 0103 	eor.w	r1, r1, r3
 8060860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8060864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8060868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 806086c:	f04f 0000 	mov.w	r0, #0
 8060870:	bd70      	pop	{r4, r5, r6, pc}
 8060872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8060876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 806087a:	bd70      	pop	{r4, r5, r6, pc}

0806087c <__aeabi_ddiv>:
 806087c:	b570      	push	{r4, r5, r6, lr}
 806087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8060882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8060886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 806088a:	bf1d      	ittte	ne
 806088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8060890:	ea94 0f0c 	teqne	r4, ip
 8060894:	ea95 0f0c 	teqne	r5, ip
 8060898:	f000 f8a7 	bleq	80609ea <__aeabi_ddiv+0x16e>
 806089c:	eba4 0405 	sub.w	r4, r4, r5
 80608a0:	ea81 0e03 	eor.w	lr, r1, r3
 80608a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80608a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80608ac:	f000 8088 	beq.w	80609c0 <__aeabi_ddiv+0x144>
 80608b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80608b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80608b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80608bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80608c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80608c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80608c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80608cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80608d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80608d4:	429d      	cmp	r5, r3
 80608d6:	bf08      	it	eq
 80608d8:	4296      	cmpeq	r6, r2
 80608da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80608de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80608e2:	d202      	bcs.n	80608ea <__aeabi_ddiv+0x6e>
 80608e4:	085b      	lsrs	r3, r3, #1
 80608e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80608ea:	1ab6      	subs	r6, r6, r2
 80608ec:	eb65 0503 	sbc.w	r5, r5, r3
 80608f0:	085b      	lsrs	r3, r3, #1
 80608f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80608f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80608fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80608fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8060902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8060906:	bf22      	ittt	cs
 8060908:	1ab6      	subcs	r6, r6, r2
 806090a:	4675      	movcs	r5, lr
 806090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8060910:	085b      	lsrs	r3, r3, #1
 8060912:	ea4f 0232 	mov.w	r2, r2, rrx
 8060916:	ebb6 0e02 	subs.w	lr, r6, r2
 806091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 806091e:	bf22      	ittt	cs
 8060920:	1ab6      	subcs	r6, r6, r2
 8060922:	4675      	movcs	r5, lr
 8060924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8060928:	085b      	lsrs	r3, r3, #1
 806092a:	ea4f 0232 	mov.w	r2, r2, rrx
 806092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8060932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8060936:	bf22      	ittt	cs
 8060938:	1ab6      	subcs	r6, r6, r2
 806093a:	4675      	movcs	r5, lr
 806093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8060940:	085b      	lsrs	r3, r3, #1
 8060942:	ea4f 0232 	mov.w	r2, r2, rrx
 8060946:	ebb6 0e02 	subs.w	lr, r6, r2
 806094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 806094e:	bf22      	ittt	cs
 8060950:	1ab6      	subcs	r6, r6, r2
 8060952:	4675      	movcs	r5, lr
 8060954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8060958:	ea55 0e06 	orrs.w	lr, r5, r6
 806095c:	d018      	beq.n	8060990 <__aeabi_ddiv+0x114>
 806095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8060962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8060966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 806096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 806096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8060972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8060976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 806097a:	d1c0      	bne.n	80608fe <__aeabi_ddiv+0x82>
 806097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8060980:	d10b      	bne.n	806099a <__aeabi_ddiv+0x11e>
 8060982:	ea41 0100 	orr.w	r1, r1, r0
 8060986:	f04f 0000 	mov.w	r0, #0
 806098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 806098e:	e7b6      	b.n	80608fe <__aeabi_ddiv+0x82>
 8060990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8060994:	bf04      	itt	eq
 8060996:	4301      	orreq	r1, r0
 8060998:	2000      	moveq	r0, #0
 806099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 806099e:	bf88      	it	hi
 80609a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80609a4:	f63f aeaf 	bhi.w	8060706 <__aeabi_dmul+0xde>
 80609a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80609ac:	bf04      	itt	eq
 80609ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80609b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80609b6:	f150 0000 	adcs.w	r0, r0, #0
 80609ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80609be:	bd70      	pop	{r4, r5, r6, pc}
 80609c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80609c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80609c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80609cc:	bfc2      	ittt	gt
 80609ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80609d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80609d6:	bd70      	popgt	{r4, r5, r6, pc}
 80609d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80609dc:	f04f 0e00 	mov.w	lr, #0
 80609e0:	3c01      	subs	r4, #1
 80609e2:	e690      	b.n	8060706 <__aeabi_dmul+0xde>
 80609e4:	ea45 0e06 	orr.w	lr, r5, r6
 80609e8:	e68d      	b.n	8060706 <__aeabi_dmul+0xde>
 80609ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80609ee:	ea94 0f0c 	teq	r4, ip
 80609f2:	bf08      	it	eq
 80609f4:	ea95 0f0c 	teqeq	r5, ip
 80609f8:	f43f af3b 	beq.w	8060872 <__aeabi_dmul+0x24a>
 80609fc:	ea94 0f0c 	teq	r4, ip
 8060a00:	d10a      	bne.n	8060a18 <__aeabi_ddiv+0x19c>
 8060a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8060a06:	f47f af34 	bne.w	8060872 <__aeabi_dmul+0x24a>
 8060a0a:	ea95 0f0c 	teq	r5, ip
 8060a0e:	f47f af25 	bne.w	806085c <__aeabi_dmul+0x234>
 8060a12:	4610      	mov	r0, r2
 8060a14:	4619      	mov	r1, r3
 8060a16:	e72c      	b.n	8060872 <__aeabi_dmul+0x24a>
 8060a18:	ea95 0f0c 	teq	r5, ip
 8060a1c:	d106      	bne.n	8060a2c <__aeabi_ddiv+0x1b0>
 8060a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8060a22:	f43f aefd 	beq.w	8060820 <__aeabi_dmul+0x1f8>
 8060a26:	4610      	mov	r0, r2
 8060a28:	4619      	mov	r1, r3
 8060a2a:	e722      	b.n	8060872 <__aeabi_dmul+0x24a>
 8060a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8060a30:	bf18      	it	ne
 8060a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8060a36:	f47f aec5 	bne.w	80607c4 <__aeabi_dmul+0x19c>
 8060a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8060a3e:	f47f af0d 	bne.w	806085c <__aeabi_dmul+0x234>
 8060a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8060a46:	f47f aeeb 	bne.w	8060820 <__aeabi_dmul+0x1f8>
 8060a4a:	e712      	b.n	8060872 <__aeabi_dmul+0x24a>

08060a4c <__gedf2>:
 8060a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8060a50:	e006      	b.n	8060a60 <__cmpdf2+0x4>
 8060a52:	bf00      	nop

08060a54 <__ledf2>:
 8060a54:	f04f 0c01 	mov.w	ip, #1
 8060a58:	e002      	b.n	8060a60 <__cmpdf2+0x4>
 8060a5a:	bf00      	nop

08060a5c <__cmpdf2>:
 8060a5c:	f04f 0c01 	mov.w	ip, #1
 8060a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8060a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8060a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8060a70:	bf18      	it	ne
 8060a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8060a76:	d01b      	beq.n	8060ab0 <__cmpdf2+0x54>
 8060a78:	b001      	add	sp, #4
 8060a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8060a7e:	bf0c      	ite	eq
 8060a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8060a84:	ea91 0f03 	teqne	r1, r3
 8060a88:	bf02      	ittt	eq
 8060a8a:	ea90 0f02 	teqeq	r0, r2
 8060a8e:	2000      	moveq	r0, #0
 8060a90:	4770      	bxeq	lr
 8060a92:	f110 0f00 	cmn.w	r0, #0
 8060a96:	ea91 0f03 	teq	r1, r3
 8060a9a:	bf58      	it	pl
 8060a9c:	4299      	cmppl	r1, r3
 8060a9e:	bf08      	it	eq
 8060aa0:	4290      	cmpeq	r0, r2
 8060aa2:	bf2c      	ite	cs
 8060aa4:	17d8      	asrcs	r0, r3, #31
 8060aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8060aaa:	f040 0001 	orr.w	r0, r0, #1
 8060aae:	4770      	bx	lr
 8060ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8060ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060ab8:	d102      	bne.n	8060ac0 <__cmpdf2+0x64>
 8060aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8060abe:	d107      	bne.n	8060ad0 <__cmpdf2+0x74>
 8060ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8060ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060ac8:	d1d6      	bne.n	8060a78 <__cmpdf2+0x1c>
 8060aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8060ace:	d0d3      	beq.n	8060a78 <__cmpdf2+0x1c>
 8060ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8060ad4:	4770      	bx	lr
 8060ad6:	bf00      	nop

08060ad8 <__aeabi_cdrcmple>:
 8060ad8:	4684      	mov	ip, r0
 8060ada:	4610      	mov	r0, r2
 8060adc:	4662      	mov	r2, ip
 8060ade:	468c      	mov	ip, r1
 8060ae0:	4619      	mov	r1, r3
 8060ae2:	4663      	mov	r3, ip
 8060ae4:	e000      	b.n	8060ae8 <__aeabi_cdcmpeq>
 8060ae6:	bf00      	nop

08060ae8 <__aeabi_cdcmpeq>:
 8060ae8:	b501      	push	{r0, lr}
 8060aea:	f7ff ffb7 	bl	8060a5c <__cmpdf2>
 8060aee:	2800      	cmp	r0, #0
 8060af0:	bf48      	it	mi
 8060af2:	f110 0f00 	cmnmi.w	r0, #0
 8060af6:	bd01      	pop	{r0, pc}

08060af8 <__aeabi_dcmpeq>:
 8060af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060afc:	f7ff fff4 	bl	8060ae8 <__aeabi_cdcmpeq>
 8060b00:	bf0c      	ite	eq
 8060b02:	2001      	moveq	r0, #1
 8060b04:	2000      	movne	r0, #0
 8060b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b0a:	bf00      	nop

08060b0c <__aeabi_dcmplt>:
 8060b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b10:	f7ff ffea 	bl	8060ae8 <__aeabi_cdcmpeq>
 8060b14:	bf34      	ite	cc
 8060b16:	2001      	movcc	r0, #1
 8060b18:	2000      	movcs	r0, #0
 8060b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b1e:	bf00      	nop

08060b20 <__aeabi_dcmple>:
 8060b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b24:	f7ff ffe0 	bl	8060ae8 <__aeabi_cdcmpeq>
 8060b28:	bf94      	ite	ls
 8060b2a:	2001      	movls	r0, #1
 8060b2c:	2000      	movhi	r0, #0
 8060b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b32:	bf00      	nop

08060b34 <__aeabi_dcmpge>:
 8060b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b38:	f7ff ffce 	bl	8060ad8 <__aeabi_cdrcmple>
 8060b3c:	bf94      	ite	ls
 8060b3e:	2001      	movls	r0, #1
 8060b40:	2000      	movhi	r0, #0
 8060b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b46:	bf00      	nop

08060b48 <__aeabi_dcmpgt>:
 8060b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8060b4c:	f7ff ffc4 	bl	8060ad8 <__aeabi_cdrcmple>
 8060b50:	bf34      	ite	cc
 8060b52:	2001      	movcc	r0, #1
 8060b54:	2000      	movcs	r0, #0
 8060b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8060b5a:	bf00      	nop

08060b5c <__aeabi_dcmpun>:
 8060b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8060b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060b64:	d102      	bne.n	8060b6c <__aeabi_dcmpun+0x10>
 8060b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8060b6a:	d10a      	bne.n	8060b82 <__aeabi_dcmpun+0x26>
 8060b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8060b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8060b74:	d102      	bne.n	8060b7c <__aeabi_dcmpun+0x20>
 8060b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8060b7a:	d102      	bne.n	8060b82 <__aeabi_dcmpun+0x26>
 8060b7c:	f04f 0000 	mov.w	r0, #0
 8060b80:	4770      	bx	lr
 8060b82:	f04f 0001 	mov.w	r0, #1
 8060b86:	4770      	bx	lr

08060b88 <__aeabi_d2iz>:
 8060b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8060b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8060b90:	d215      	bcs.n	8060bbe <__aeabi_d2iz+0x36>
 8060b92:	d511      	bpl.n	8060bb8 <__aeabi_d2iz+0x30>
 8060b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8060b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8060b9c:	d912      	bls.n	8060bc4 <__aeabi_d2iz+0x3c>
 8060b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8060ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8060ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8060baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8060bae:	fa23 f002 	lsr.w	r0, r3, r2
 8060bb2:	bf18      	it	ne
 8060bb4:	4240      	negne	r0, r0
 8060bb6:	4770      	bx	lr
 8060bb8:	f04f 0000 	mov.w	r0, #0
 8060bbc:	4770      	bx	lr
 8060bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8060bc2:	d105      	bne.n	8060bd0 <__aeabi_d2iz+0x48>
 8060bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8060bc8:	bf08      	it	eq
 8060bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8060bce:	4770      	bx	lr
 8060bd0:	f04f 0000 	mov.w	r0, #0
 8060bd4:	4770      	bx	lr
 8060bd6:	bf00      	nop

08060bd8 <__aeabi_d2uiz>:
 8060bd8:	004a      	lsls	r2, r1, #1
 8060bda:	d211      	bcs.n	8060c00 <__aeabi_d2uiz+0x28>
 8060bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8060be0:	d211      	bcs.n	8060c06 <__aeabi_d2uiz+0x2e>
 8060be2:	d50d      	bpl.n	8060c00 <__aeabi_d2uiz+0x28>
 8060be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8060be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8060bec:	d40e      	bmi.n	8060c0c <__aeabi_d2uiz+0x34>
 8060bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8060bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8060bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8060bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8060bfe:	4770      	bx	lr
 8060c00:	f04f 0000 	mov.w	r0, #0
 8060c04:	4770      	bx	lr
 8060c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8060c0a:	d102      	bne.n	8060c12 <__aeabi_d2uiz+0x3a>
 8060c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8060c10:	4770      	bx	lr
 8060c12:	f04f 0000 	mov.w	r0, #0
 8060c16:	4770      	bx	lr

08060c18 <__aeabi_d2f>:
 8060c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8060c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8060c20:	bf24      	itt	cs
 8060c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8060c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8060c2a:	d90d      	bls.n	8060c48 <__aeabi_d2f+0x30>
 8060c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8060c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8060c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8060c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8060c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8060c40:	bf08      	it	eq
 8060c42:	f020 0001 	biceq.w	r0, r0, #1
 8060c46:	4770      	bx	lr
 8060c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8060c4c:	d121      	bne.n	8060c92 <__aeabi_d2f+0x7a>
 8060c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8060c52:	bfbc      	itt	lt
 8060c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8060c58:	4770      	bxlt	lr
 8060c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8060c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8060c62:	f1c2 0218 	rsb	r2, r2, #24
 8060c66:	f1c2 0c20 	rsb	ip, r2, #32
 8060c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8060c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8060c72:	bf18      	it	ne
 8060c74:	f040 0001 	orrne.w	r0, r0, #1
 8060c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8060c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8060c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8060c84:	ea40 000c 	orr.w	r0, r0, ip
 8060c88:	fa23 f302 	lsr.w	r3, r3, r2
 8060c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8060c90:	e7cc      	b.n	8060c2c <__aeabi_d2f+0x14>
 8060c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8060c96:	d107      	bne.n	8060ca8 <__aeabi_d2f+0x90>
 8060c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8060c9c:	bf1e      	ittt	ne
 8060c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8060ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8060ca6:	4770      	bxne	lr
 8060ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8060cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8060cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8060cb4:	4770      	bx	lr
 8060cb6:	bf00      	nop

08060cb8 <__aeabi_ldivmod>:
 8060cb8:	b97b      	cbnz	r3, 8060cda <__aeabi_ldivmod+0x22>
 8060cba:	b972      	cbnz	r2, 8060cda <__aeabi_ldivmod+0x22>
 8060cbc:	2900      	cmp	r1, #0
 8060cbe:	bfbe      	ittt	lt
 8060cc0:	2000      	movlt	r0, #0
 8060cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8060cc6:	e006      	blt.n	8060cd6 <__aeabi_ldivmod+0x1e>
 8060cc8:	bf08      	it	eq
 8060cca:	2800      	cmpeq	r0, #0
 8060ccc:	bf1c      	itt	ne
 8060cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8060cd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8060cd6:	f000 b9ef 	b.w	80610b8 <__aeabi_idiv0>
 8060cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8060cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8060ce2:	2900      	cmp	r1, #0
 8060ce4:	db09      	blt.n	8060cfa <__aeabi_ldivmod+0x42>
 8060ce6:	2b00      	cmp	r3, #0
 8060ce8:	db1a      	blt.n	8060d20 <__aeabi_ldivmod+0x68>
 8060cea:	f000 f883 	bl	8060df4 <__udivmoddi4>
 8060cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060cf6:	b004      	add	sp, #16
 8060cf8:	4770      	bx	lr
 8060cfa:	4240      	negs	r0, r0
 8060cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060d00:	2b00      	cmp	r3, #0
 8060d02:	db1b      	blt.n	8060d3c <__aeabi_ldivmod+0x84>
 8060d04:	f000 f876 	bl	8060df4 <__udivmoddi4>
 8060d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d10:	b004      	add	sp, #16
 8060d12:	4240      	negs	r0, r0
 8060d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060d18:	4252      	negs	r2, r2
 8060d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d1e:	4770      	bx	lr
 8060d20:	4252      	negs	r2, r2
 8060d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d26:	f000 f865 	bl	8060df4 <__udivmoddi4>
 8060d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d32:	b004      	add	sp, #16
 8060d34:	4240      	negs	r0, r0
 8060d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060d3a:	4770      	bx	lr
 8060d3c:	4252      	negs	r2, r2
 8060d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d42:	f000 f857 	bl	8060df4 <__udivmoddi4>
 8060d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d4e:	b004      	add	sp, #16
 8060d50:	4252      	negs	r2, r2
 8060d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8060d56:	4770      	bx	lr

08060d58 <__aeabi_uldivmod>:
 8060d58:	b953      	cbnz	r3, 8060d70 <__aeabi_uldivmod+0x18>
 8060d5a:	b94a      	cbnz	r2, 8060d70 <__aeabi_uldivmod+0x18>
 8060d5c:	2900      	cmp	r1, #0
 8060d5e:	bf08      	it	eq
 8060d60:	2800      	cmpeq	r0, #0
 8060d62:	bf1c      	itt	ne
 8060d64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8060d68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8060d6c:	f000 b9a4 	b.w	80610b8 <__aeabi_idiv0>
 8060d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8060d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8060d78:	f000 f83c 	bl	8060df4 <__udivmoddi4>
 8060d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060d84:	b004      	add	sp, #16
 8060d86:	4770      	bx	lr

08060d88 <__aeabi_d2lz>:
 8060d88:	b538      	push	{r3, r4, r5, lr}
 8060d8a:	2200      	movs	r2, #0
 8060d8c:	2300      	movs	r3, #0
 8060d8e:	4604      	mov	r4, r0
 8060d90:	460d      	mov	r5, r1
 8060d92:	f7ff febb 	bl	8060b0c <__aeabi_dcmplt>
 8060d96:	b928      	cbnz	r0, 8060da4 <__aeabi_d2lz+0x1c>
 8060d98:	4620      	mov	r0, r4
 8060d9a:	4629      	mov	r1, r5
 8060d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8060da0:	f000 b80a 	b.w	8060db8 <__aeabi_d2ulz>
 8060da4:	4620      	mov	r0, r4
 8060da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8060daa:	f000 f805 	bl	8060db8 <__aeabi_d2ulz>
 8060dae:	4240      	negs	r0, r0
 8060db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8060db4:	bd38      	pop	{r3, r4, r5, pc}
 8060db6:	bf00      	nop

08060db8 <__aeabi_d2ulz>:
 8060db8:	b5d0      	push	{r4, r6, r7, lr}
 8060dba:	4b0c      	ldr	r3, [pc, #48]	; (8060dec <__aeabi_d2ulz+0x34>)
 8060dbc:	2200      	movs	r2, #0
 8060dbe:	4606      	mov	r6, r0
 8060dc0:	460f      	mov	r7, r1
 8060dc2:	f7ff fc31 	bl	8060628 <__aeabi_dmul>
 8060dc6:	f7ff ff07 	bl	8060bd8 <__aeabi_d2uiz>
 8060dca:	4604      	mov	r4, r0
 8060dcc:	f7ff fbb2 	bl	8060534 <__aeabi_ui2d>
 8060dd0:	4b07      	ldr	r3, [pc, #28]	; (8060df0 <__aeabi_d2ulz+0x38>)
 8060dd2:	2200      	movs	r2, #0
 8060dd4:	f7ff fc28 	bl	8060628 <__aeabi_dmul>
 8060dd8:	4602      	mov	r2, r0
 8060dda:	460b      	mov	r3, r1
 8060ddc:	4630      	mov	r0, r6
 8060dde:	4639      	mov	r1, r7
 8060de0:	f7ff fa6a 	bl	80602b8 <__aeabi_dsub>
 8060de4:	f7ff fef8 	bl	8060bd8 <__aeabi_d2uiz>
 8060de8:	4621      	mov	r1, r4
 8060dea:	bdd0      	pop	{r4, r6, r7, pc}
 8060dec:	3df00000 	.word	0x3df00000
 8060df0:	41f00000 	.word	0x41f00000

08060df4 <__udivmoddi4>:
 8060df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8060df8:	9d08      	ldr	r5, [sp, #32]
 8060dfa:	4604      	mov	r4, r0
 8060dfc:	468c      	mov	ip, r1
 8060dfe:	2b00      	cmp	r3, #0
 8060e00:	f040 8083 	bne.w	8060f0a <__udivmoddi4+0x116>
 8060e04:	428a      	cmp	r2, r1
 8060e06:	4617      	mov	r7, r2
 8060e08:	d947      	bls.n	8060e9a <__udivmoddi4+0xa6>
 8060e0a:	fab2 f282 	clz	r2, r2
 8060e0e:	b142      	cbz	r2, 8060e22 <__udivmoddi4+0x2e>
 8060e10:	f1c2 0020 	rsb	r0, r2, #32
 8060e14:	fa24 f000 	lsr.w	r0, r4, r0
 8060e18:	4091      	lsls	r1, r2
 8060e1a:	4097      	lsls	r7, r2
 8060e1c:	ea40 0c01 	orr.w	ip, r0, r1
 8060e20:	4094      	lsls	r4, r2
 8060e22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8060e26:	0c23      	lsrs	r3, r4, #16
 8060e28:	fbbc f6f8 	udiv	r6, ip, r8
 8060e2c:	fa1f fe87 	uxth.w	lr, r7
 8060e30:	fb08 c116 	mls	r1, r8, r6, ip
 8060e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060e38:	fb06 f10e 	mul.w	r1, r6, lr
 8060e3c:	4299      	cmp	r1, r3
 8060e3e:	d909      	bls.n	8060e54 <__udivmoddi4+0x60>
 8060e40:	18fb      	adds	r3, r7, r3
 8060e42:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8060e46:	f080 8119 	bcs.w	806107c <__udivmoddi4+0x288>
 8060e4a:	4299      	cmp	r1, r3
 8060e4c:	f240 8116 	bls.w	806107c <__udivmoddi4+0x288>
 8060e50:	3e02      	subs	r6, #2
 8060e52:	443b      	add	r3, r7
 8060e54:	1a5b      	subs	r3, r3, r1
 8060e56:	b2a4      	uxth	r4, r4
 8060e58:	fbb3 f0f8 	udiv	r0, r3, r8
 8060e5c:	fb08 3310 	mls	r3, r8, r0, r3
 8060e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8060e64:	fb00 fe0e 	mul.w	lr, r0, lr
 8060e68:	45a6      	cmp	lr, r4
 8060e6a:	d909      	bls.n	8060e80 <__udivmoddi4+0x8c>
 8060e6c:	193c      	adds	r4, r7, r4
 8060e6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8060e72:	f080 8105 	bcs.w	8061080 <__udivmoddi4+0x28c>
 8060e76:	45a6      	cmp	lr, r4
 8060e78:	f240 8102 	bls.w	8061080 <__udivmoddi4+0x28c>
 8060e7c:	3802      	subs	r0, #2
 8060e7e:	443c      	add	r4, r7
 8060e80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8060e84:	eba4 040e 	sub.w	r4, r4, lr
 8060e88:	2600      	movs	r6, #0
 8060e8a:	b11d      	cbz	r5, 8060e94 <__udivmoddi4+0xa0>
 8060e8c:	40d4      	lsrs	r4, r2
 8060e8e:	2300      	movs	r3, #0
 8060e90:	e9c5 4300 	strd	r4, r3, [r5]
 8060e94:	4631      	mov	r1, r6
 8060e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060e9a:	b902      	cbnz	r2, 8060e9e <__udivmoddi4+0xaa>
 8060e9c:	deff      	udf	#255	; 0xff
 8060e9e:	fab2 f282 	clz	r2, r2
 8060ea2:	2a00      	cmp	r2, #0
 8060ea4:	d150      	bne.n	8060f48 <__udivmoddi4+0x154>
 8060ea6:	1bcb      	subs	r3, r1, r7
 8060ea8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060eac:	fa1f f887 	uxth.w	r8, r7
 8060eb0:	2601      	movs	r6, #1
 8060eb2:	fbb3 fcfe 	udiv	ip, r3, lr
 8060eb6:	0c21      	lsrs	r1, r4, #16
 8060eb8:	fb0e 331c 	mls	r3, lr, ip, r3
 8060ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8060ec0:	fb08 f30c 	mul.w	r3, r8, ip
 8060ec4:	428b      	cmp	r3, r1
 8060ec6:	d907      	bls.n	8060ed8 <__udivmoddi4+0xe4>
 8060ec8:	1879      	adds	r1, r7, r1
 8060eca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8060ece:	d202      	bcs.n	8060ed6 <__udivmoddi4+0xe2>
 8060ed0:	428b      	cmp	r3, r1
 8060ed2:	f200 80e9 	bhi.w	80610a8 <__udivmoddi4+0x2b4>
 8060ed6:	4684      	mov	ip, r0
 8060ed8:	1ac9      	subs	r1, r1, r3
 8060eda:	b2a3      	uxth	r3, r4
 8060edc:	fbb1 f0fe 	udiv	r0, r1, lr
 8060ee0:	fb0e 1110 	mls	r1, lr, r0, r1
 8060ee4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8060ee8:	fb08 f800 	mul.w	r8, r8, r0
 8060eec:	45a0      	cmp	r8, r4
 8060eee:	d907      	bls.n	8060f00 <__udivmoddi4+0x10c>
 8060ef0:	193c      	adds	r4, r7, r4
 8060ef2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8060ef6:	d202      	bcs.n	8060efe <__udivmoddi4+0x10a>
 8060ef8:	45a0      	cmp	r8, r4
 8060efa:	f200 80d9 	bhi.w	80610b0 <__udivmoddi4+0x2bc>
 8060efe:	4618      	mov	r0, r3
 8060f00:	eba4 0408 	sub.w	r4, r4, r8
 8060f04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8060f08:	e7bf      	b.n	8060e8a <__udivmoddi4+0x96>
 8060f0a:	428b      	cmp	r3, r1
 8060f0c:	d909      	bls.n	8060f22 <__udivmoddi4+0x12e>
 8060f0e:	2d00      	cmp	r5, #0
 8060f10:	f000 80b1 	beq.w	8061076 <__udivmoddi4+0x282>
 8060f14:	2600      	movs	r6, #0
 8060f16:	e9c5 0100 	strd	r0, r1, [r5]
 8060f1a:	4630      	mov	r0, r6
 8060f1c:	4631      	mov	r1, r6
 8060f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8060f22:	fab3 f683 	clz	r6, r3
 8060f26:	2e00      	cmp	r6, #0
 8060f28:	d14a      	bne.n	8060fc0 <__udivmoddi4+0x1cc>
 8060f2a:	428b      	cmp	r3, r1
 8060f2c:	d302      	bcc.n	8060f34 <__udivmoddi4+0x140>
 8060f2e:	4282      	cmp	r2, r0
 8060f30:	f200 80b8 	bhi.w	80610a4 <__udivmoddi4+0x2b0>
 8060f34:	1a84      	subs	r4, r0, r2
 8060f36:	eb61 0103 	sbc.w	r1, r1, r3
 8060f3a:	2001      	movs	r0, #1
 8060f3c:	468c      	mov	ip, r1
 8060f3e:	2d00      	cmp	r5, #0
 8060f40:	d0a8      	beq.n	8060e94 <__udivmoddi4+0xa0>
 8060f42:	e9c5 4c00 	strd	r4, ip, [r5]
 8060f46:	e7a5      	b.n	8060e94 <__udivmoddi4+0xa0>
 8060f48:	f1c2 0320 	rsb	r3, r2, #32
 8060f4c:	fa20 f603 	lsr.w	r6, r0, r3
 8060f50:	4097      	lsls	r7, r2
 8060f52:	fa01 f002 	lsl.w	r0, r1, r2
 8060f56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060f5a:	40d9      	lsrs	r1, r3
 8060f5c:	4330      	orrs	r0, r6
 8060f5e:	0c03      	lsrs	r3, r0, #16
 8060f60:	fbb1 f6fe 	udiv	r6, r1, lr
 8060f64:	fa1f f887 	uxth.w	r8, r7
 8060f68:	fb0e 1116 	mls	r1, lr, r6, r1
 8060f6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060f70:	fb06 f108 	mul.w	r1, r6, r8
 8060f74:	4299      	cmp	r1, r3
 8060f76:	fa04 f402 	lsl.w	r4, r4, r2
 8060f7a:	d909      	bls.n	8060f90 <__udivmoddi4+0x19c>
 8060f7c:	18fb      	adds	r3, r7, r3
 8060f7e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8060f82:	f080 808d 	bcs.w	80610a0 <__udivmoddi4+0x2ac>
 8060f86:	4299      	cmp	r1, r3
 8060f88:	f240 808a 	bls.w	80610a0 <__udivmoddi4+0x2ac>
 8060f8c:	3e02      	subs	r6, #2
 8060f8e:	443b      	add	r3, r7
 8060f90:	1a5b      	subs	r3, r3, r1
 8060f92:	b281      	uxth	r1, r0
 8060f94:	fbb3 f0fe 	udiv	r0, r3, lr
 8060f98:	fb0e 3310 	mls	r3, lr, r0, r3
 8060f9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8060fa0:	fb00 f308 	mul.w	r3, r0, r8
 8060fa4:	428b      	cmp	r3, r1
 8060fa6:	d907      	bls.n	8060fb8 <__udivmoddi4+0x1c4>
 8060fa8:	1879      	adds	r1, r7, r1
 8060faa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8060fae:	d273      	bcs.n	8061098 <__udivmoddi4+0x2a4>
 8060fb0:	428b      	cmp	r3, r1
 8060fb2:	d971      	bls.n	8061098 <__udivmoddi4+0x2a4>
 8060fb4:	3802      	subs	r0, #2
 8060fb6:	4439      	add	r1, r7
 8060fb8:	1acb      	subs	r3, r1, r3
 8060fba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8060fbe:	e778      	b.n	8060eb2 <__udivmoddi4+0xbe>
 8060fc0:	f1c6 0c20 	rsb	ip, r6, #32
 8060fc4:	fa03 f406 	lsl.w	r4, r3, r6
 8060fc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8060fcc:	431c      	orrs	r4, r3
 8060fce:	fa20 f70c 	lsr.w	r7, r0, ip
 8060fd2:	fa01 f306 	lsl.w	r3, r1, r6
 8060fd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8060fda:	fa21 f10c 	lsr.w	r1, r1, ip
 8060fde:	431f      	orrs	r7, r3
 8060fe0:	0c3b      	lsrs	r3, r7, #16
 8060fe2:	fbb1 f9fe 	udiv	r9, r1, lr
 8060fe6:	fa1f f884 	uxth.w	r8, r4
 8060fea:	fb0e 1119 	mls	r1, lr, r9, r1
 8060fee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8060ff2:	fb09 fa08 	mul.w	sl, r9, r8
 8060ff6:	458a      	cmp	sl, r1
 8060ff8:	fa02 f206 	lsl.w	r2, r2, r6
 8060ffc:	fa00 f306 	lsl.w	r3, r0, r6
 8061000:	d908      	bls.n	8061014 <__udivmoddi4+0x220>
 8061002:	1861      	adds	r1, r4, r1
 8061004:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8061008:	d248      	bcs.n	806109c <__udivmoddi4+0x2a8>
 806100a:	458a      	cmp	sl, r1
 806100c:	d946      	bls.n	806109c <__udivmoddi4+0x2a8>
 806100e:	f1a9 0902 	sub.w	r9, r9, #2
 8061012:	4421      	add	r1, r4
 8061014:	eba1 010a 	sub.w	r1, r1, sl
 8061018:	b2bf      	uxth	r7, r7
 806101a:	fbb1 f0fe 	udiv	r0, r1, lr
 806101e:	fb0e 1110 	mls	r1, lr, r0, r1
 8061022:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8061026:	fb00 f808 	mul.w	r8, r0, r8
 806102a:	45b8      	cmp	r8, r7
 806102c:	d907      	bls.n	806103e <__udivmoddi4+0x24a>
 806102e:	19e7      	adds	r7, r4, r7
 8061030:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8061034:	d22e      	bcs.n	8061094 <__udivmoddi4+0x2a0>
 8061036:	45b8      	cmp	r8, r7
 8061038:	d92c      	bls.n	8061094 <__udivmoddi4+0x2a0>
 806103a:	3802      	subs	r0, #2
 806103c:	4427      	add	r7, r4
 806103e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8061042:	eba7 0708 	sub.w	r7, r7, r8
 8061046:	fba0 8902 	umull	r8, r9, r0, r2
 806104a:	454f      	cmp	r7, r9
 806104c:	46c6      	mov	lr, r8
 806104e:	4649      	mov	r1, r9
 8061050:	d31a      	bcc.n	8061088 <__udivmoddi4+0x294>
 8061052:	d017      	beq.n	8061084 <__udivmoddi4+0x290>
 8061054:	b15d      	cbz	r5, 806106e <__udivmoddi4+0x27a>
 8061056:	ebb3 020e 	subs.w	r2, r3, lr
 806105a:	eb67 0701 	sbc.w	r7, r7, r1
 806105e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8061062:	40f2      	lsrs	r2, r6
 8061064:	ea4c 0202 	orr.w	r2, ip, r2
 8061068:	40f7      	lsrs	r7, r6
 806106a:	e9c5 2700 	strd	r2, r7, [r5]
 806106e:	2600      	movs	r6, #0
 8061070:	4631      	mov	r1, r6
 8061072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8061076:	462e      	mov	r6, r5
 8061078:	4628      	mov	r0, r5
 806107a:	e70b      	b.n	8060e94 <__udivmoddi4+0xa0>
 806107c:	4606      	mov	r6, r0
 806107e:	e6e9      	b.n	8060e54 <__udivmoddi4+0x60>
 8061080:	4618      	mov	r0, r3
 8061082:	e6fd      	b.n	8060e80 <__udivmoddi4+0x8c>
 8061084:	4543      	cmp	r3, r8
 8061086:	d2e5      	bcs.n	8061054 <__udivmoddi4+0x260>
 8061088:	ebb8 0e02 	subs.w	lr, r8, r2
 806108c:	eb69 0104 	sbc.w	r1, r9, r4
 8061090:	3801      	subs	r0, #1
 8061092:	e7df      	b.n	8061054 <__udivmoddi4+0x260>
 8061094:	4608      	mov	r0, r1
 8061096:	e7d2      	b.n	806103e <__udivmoddi4+0x24a>
 8061098:	4660      	mov	r0, ip
 806109a:	e78d      	b.n	8060fb8 <__udivmoddi4+0x1c4>
 806109c:	4681      	mov	r9, r0
 806109e:	e7b9      	b.n	8061014 <__udivmoddi4+0x220>
 80610a0:	4666      	mov	r6, ip
 80610a2:	e775      	b.n	8060f90 <__udivmoddi4+0x19c>
 80610a4:	4630      	mov	r0, r6
 80610a6:	e74a      	b.n	8060f3e <__udivmoddi4+0x14a>
 80610a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80610ac:	4439      	add	r1, r7
 80610ae:	e713      	b.n	8060ed8 <__udivmoddi4+0xe4>
 80610b0:	3802      	subs	r0, #2
 80610b2:	443c      	add	r4, r7
 80610b4:	e724      	b.n	8060f00 <__udivmoddi4+0x10c>
 80610b6:	bf00      	nop

080610b8 <__aeabi_idiv0>:
 80610b8:	4770      	bx	lr
 80610ba:	bf00      	nop

080610bc <GPS_read>:

uint8_t rx_data = 0;
uint8_t rx_buffer[GPSBUFSIZE];
uint8_t rx_index = 0;

int GPS_read() {
 80610bc:	b580      	push	{r7, lr}
 80610be:	b082      	sub	sp, #8
 80610c0:	af00      	add	r7, sp, #0
	int statusCode = 0;
 80610c2:	2300      	movs	r3, #0
 80610c4:	607b      	str	r3, [r7, #4]

	while (HAL_UART_Receive(GPS_USART, &rx_data, 1, HAL_MAX_DELAY) &&
 80610c6:	e00a      	b.n	80610de <GPS_read+0x22>
			rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
		rx_buffer[rx_index++] = rx_data;
 80610c8:	4b19      	ldr	r3, [pc, #100]	; (8061130 <GPS_read+0x74>)
 80610ca:	781b      	ldrb	r3, [r3, #0]
 80610cc:	1c5a      	adds	r2, r3, #1
 80610ce:	b2d1      	uxtb	r1, r2
 80610d0:	4a17      	ldr	r2, [pc, #92]	; (8061130 <GPS_read+0x74>)
 80610d2:	7011      	strb	r1, [r2, #0]
 80610d4:	461a      	mov	r2, r3
 80610d6:	4b17      	ldr	r3, [pc, #92]	; (8061134 <GPS_read+0x78>)
 80610d8:	7819      	ldrb	r1, [r3, #0]
 80610da:	4b17      	ldr	r3, [pc, #92]	; (8061138 <GPS_read+0x7c>)
 80610dc:	5499      	strb	r1, [r3, r2]
	while (HAL_UART_Receive(GPS_USART, &rx_data, 1, HAL_MAX_DELAY) &&
 80610de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80610e2:	2201      	movs	r2, #1
 80610e4:	4913      	ldr	r1, [pc, #76]	; (8061134 <GPS_read+0x78>)
 80610e6:	4815      	ldr	r0, [pc, #84]	; (806113c <GPS_read+0x80>)
 80610e8:	f008 fbec 	bl	80698c4 <HAL_UART_Receive>
 80610ec:	4603      	mov	r3, r0
 80610ee:	2b00      	cmp	r3, #0
 80610f0:	d008      	beq.n	8061104 <GPS_read+0x48>
			rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80610f2:	4b10      	ldr	r3, [pc, #64]	; (8061134 <GPS_read+0x78>)
 80610f4:	781b      	ldrb	r3, [r3, #0]
	while (HAL_UART_Receive(GPS_USART, &rx_data, 1, HAL_MAX_DELAY) &&
 80610f6:	2b0a      	cmp	r3, #10
 80610f8:	d004      	beq.n	8061104 <GPS_read+0x48>
			rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80610fa:	4b0d      	ldr	r3, [pc, #52]	; (8061130 <GPS_read+0x74>)
 80610fc:	781b      	ldrb	r3, [r3, #0]
 80610fe:	b25b      	sxtb	r3, r3
 8061100:	2b00      	cmp	r3, #0
 8061102:	dae1      	bge.n	80610c8 <GPS_read+0xc>
	}

	if (!GPS_validate((char*) rx_buffer)) {
 8061104:	480c      	ldr	r0, [pc, #48]	; (8061138 <GPS_read+0x7c>)
 8061106:	f000 f81b 	bl	8061140 <GPS_validate>
 806110a:	4603      	mov	r3, r0
 806110c:	2b00      	cmp	r3, #0
 806110e:	d101      	bne.n	8061114 <GPS_read+0x58>
		statusCode = 1;
 8061110:	2301      	movs	r3, #1
 8061112:	607b      	str	r3, [r7, #4]
	}

	rx_index = 0;
 8061114:	4b06      	ldr	r3, [pc, #24]	; (8061130 <GPS_read+0x74>)
 8061116:	2200      	movs	r2, #0
 8061118:	701a      	strb	r2, [r3, #0]
	memset(rx_buffer, 0, sizeof(rx_buffer));
 806111a:	2280      	movs	r2, #128	; 0x80
 806111c:	2100      	movs	r1, #0
 806111e:	4806      	ldr	r0, [pc, #24]	; (8061138 <GPS_read+0x7c>)
 8061120:	f011 fa75 	bl	807260e <memset>

	return statusCode;
 8061124:	687b      	ldr	r3, [r7, #4]
}
 8061126:	4618      	mov	r0, r3
 8061128:	3708      	adds	r7, #8
 806112a:	46bd      	mov	sp, r7
 806112c:	bd80      	pop	{r7, pc}
 806112e:	bf00      	nop
 8061130:	20000219 	.word	0x20000219
 8061134:	20000218 	.word	0x20000218
 8061138:	20004e94 	.word	0x20004e94
 806113c:	200057e8 	.word	0x200057e8

08061140 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8061140:	b580      	push	{r7, lr}
 8061142:	b086      	sub	sp, #24
 8061144:	af00      	add	r7, sp, #0
 8061146:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8061148:	2300      	movs	r3, #0
 806114a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 806114c:	2300      	movs	r3, #0
 806114e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8061150:	697b      	ldr	r3, [r7, #20]
 8061152:	687a      	ldr	r2, [r7, #4]
 8061154:	4413      	add	r3, r2
 8061156:	781b      	ldrb	r3, [r3, #0]
 8061158:	2b24      	cmp	r3, #36	; 0x24
 806115a:	d103      	bne.n	8061164 <GPS_validate+0x24>
        i++;
 806115c:	697b      	ldr	r3, [r7, #20]
 806115e:	3301      	adds	r3, #1
 8061160:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8061162:	e00c      	b.n	806117e <GPS_validate+0x3e>
        return 0;
 8061164:	2300      	movs	r3, #0
 8061166:	e047      	b.n	80611f8 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8061168:	697b      	ldr	r3, [r7, #20]
 806116a:	687a      	ldr	r2, [r7, #4]
 806116c:	4413      	add	r3, r2
 806116e:	781b      	ldrb	r3, [r3, #0]
 8061170:	461a      	mov	r2, r3
 8061172:	693b      	ldr	r3, [r7, #16]
 8061174:	4053      	eors	r3, r2
 8061176:	613b      	str	r3, [r7, #16]
        i++;
 8061178:	697b      	ldr	r3, [r7, #20]
 806117a:	3301      	adds	r3, #1
 806117c:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 806117e:	697b      	ldr	r3, [r7, #20]
 8061180:	687a      	ldr	r2, [r7, #4]
 8061182:	4413      	add	r3, r2
 8061184:	781b      	ldrb	r3, [r3, #0]
 8061186:	2b00      	cmp	r3, #0
 8061188:	d008      	beq.n	806119c <GPS_validate+0x5c>
 806118a:	697b      	ldr	r3, [r7, #20]
 806118c:	687a      	ldr	r2, [r7, #4]
 806118e:	4413      	add	r3, r2
 8061190:	781b      	ldrb	r3, [r3, #0]
 8061192:	2b2a      	cmp	r3, #42	; 0x2a
 8061194:	d002      	beq.n	806119c <GPS_validate+0x5c>
 8061196:	697b      	ldr	r3, [r7, #20]
 8061198:	2b4a      	cmp	r3, #74	; 0x4a
 806119a:	dde5      	ble.n	8061168 <GPS_validate+0x28>
    }

    if(i >= 75){
 806119c:	697b      	ldr	r3, [r7, #20]
 806119e:	2b4a      	cmp	r3, #74	; 0x4a
 80611a0:	dd01      	ble.n	80611a6 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80611a2:	2300      	movs	r3, #0
 80611a4:	e028      	b.n	80611f8 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80611a6:	697b      	ldr	r3, [r7, #20]
 80611a8:	687a      	ldr	r2, [r7, #4]
 80611aa:	4413      	add	r3, r2
 80611ac:	781b      	ldrb	r3, [r3, #0]
 80611ae:	2b2a      	cmp	r3, #42	; 0x2a
 80611b0:	d119      	bne.n	80611e6 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80611b2:	697b      	ldr	r3, [r7, #20]
 80611b4:	3301      	adds	r3, #1
 80611b6:	687a      	ldr	r2, [r7, #4]
 80611b8:	4413      	add	r3, r2
 80611ba:	781b      	ldrb	r3, [r3, #0]
 80611bc:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80611be:	697b      	ldr	r3, [r7, #20]
 80611c0:	3302      	adds	r3, #2
 80611c2:	687a      	ldr	r2, [r7, #4]
 80611c4:	4413      	add	r3, r2
 80611c6:	781b      	ldrb	r3, [r3, #0]
 80611c8:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80611ca:	2300      	movs	r3, #0
 80611cc:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80611ce:	f107 0308 	add.w	r3, r7, #8
 80611d2:	693a      	ldr	r2, [r7, #16]
 80611d4:	490a      	ldr	r1, [pc, #40]	; (8061200 <GPS_validate+0xc0>)
 80611d6:	4618      	mov	r0, r3
 80611d8:	f012 f976 	bl	80734c8 <siprintf>
    return((checkcalcstr[0] == check[0])
 80611dc:	7a3a      	ldrb	r2, [r7, #8]
 80611de:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80611e0:	429a      	cmp	r2, r3
 80611e2:	d108      	bne.n	80611f6 <GPS_validate+0xb6>
 80611e4:	e001      	b.n	80611ea <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80611e6:	2300      	movs	r3, #0
 80611e8:	e006      	b.n	80611f8 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80611ea:	7a7a      	ldrb	r2, [r7, #9]
 80611ec:	7b7b      	ldrb	r3, [r7, #13]
 80611ee:	429a      	cmp	r2, r3
 80611f0:	d101      	bne.n	80611f6 <GPS_validate+0xb6>
 80611f2:	2301      	movs	r3, #1
 80611f4:	e000      	b.n	80611f8 <GPS_validate+0xb8>
 80611f6:	2300      	movs	r3, #0
}
 80611f8:	4618      	mov	r0, r3
 80611fa:	3718      	adds	r7, #24
 80611fc:	46bd      	mov	sp, r7
 80611fe:	bd80      	pop	{r7, pc}
 8061200:	08076d48 	.word	0x08076d48

08061204 <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8061204:	b480      	push	{r7}
 8061206:	b087      	sub	sp, #28
 8061208:	af00      	add	r7, sp, #0
 806120a:	ed87 0a01 	vstr	s0, [r7, #4]
 806120e:	4603      	mov	r3, r0
 8061210:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8061212:	ed97 7a01 	vldr	s14, [r7, #4]
 8061216:	eddf 6a20 	vldr	s13, [pc, #128]	; 8061298 <GPS_nmea_to_dec+0x94>
 806121a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 806121e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8061222:	ee17 3a90 	vmov	r3, s15
 8061226:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8061228:	693b      	ldr	r3, [r7, #16]
 806122a:	2264      	movs	r2, #100	; 0x64
 806122c:	fb02 f303 	mul.w	r3, r2, r3
 8061230:	ee07 3a90 	vmov	s15, r3
 8061234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8061238:	ed97 7a01 	vldr	s14, [r7, #4]
 806123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8061240:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8061244:	ed97 7a03 	vldr	s14, [r7, #12]
 8061248:	eddf 6a14 	vldr	s13, [pc, #80]	; 806129c <GPS_nmea_to_dec+0x98>
 806124c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061250:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8061254:	693b      	ldr	r3, [r7, #16]
 8061256:	ee07 3a90 	vmov	s15, r3
 806125a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 806125e:	ed97 7a02 	vldr	s14, [r7, #8]
 8061262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8061266:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 806126a:	78fb      	ldrb	r3, [r7, #3]
 806126c:	2b53      	cmp	r3, #83	; 0x53
 806126e:	d002      	beq.n	8061276 <GPS_nmea_to_dec+0x72>
 8061270:	78fb      	ldrb	r3, [r7, #3]
 8061272:	2b57      	cmp	r3, #87	; 0x57
 8061274:	d105      	bne.n	8061282 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8061276:	edd7 7a05 	vldr	s15, [r7, #20]
 806127a:	eef1 7a67 	vneg.f32	s15, s15
 806127e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8061282:	697b      	ldr	r3, [r7, #20]
 8061284:	ee07 3a90 	vmov	s15, r3
}
 8061288:	eeb0 0a67 	vmov.f32	s0, s15
 806128c:	371c      	adds	r7, #28
 806128e:	46bd      	mov	sp, r7
 8061290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061294:	4770      	bx	lr
 8061296:	bf00      	nop
 8061298:	42c80000 	.word	0x42c80000
 806129c:	42700000 	.word	0x42700000

080612a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80612a0:	b580      	push	{r7, lr}
 80612a2:	b084      	sub	sp, #16
 80612a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80612a6:	463b      	mov	r3, r7
 80612a8:	2200      	movs	r2, #0
 80612aa:	601a      	str	r2, [r3, #0]
 80612ac:	605a      	str	r2, [r3, #4]
 80612ae:	609a      	str	r2, [r3, #8]
 80612b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80612b2:	4b21      	ldr	r3, [pc, #132]	; (8061338 <MX_ADC1_Init+0x98>)
 80612b4:	4a21      	ldr	r2, [pc, #132]	; (806133c <MX_ADC1_Init+0x9c>)
 80612b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80612b8:	4b1f      	ldr	r3, [pc, #124]	; (8061338 <MX_ADC1_Init+0x98>)
 80612ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80612be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80612c0:	4b1d      	ldr	r3, [pc, #116]	; (8061338 <MX_ADC1_Init+0x98>)
 80612c2:	2200      	movs	r2, #0
 80612c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80612c6:	4b1c      	ldr	r3, [pc, #112]	; (8061338 <MX_ADC1_Init+0x98>)
 80612c8:	2200      	movs	r2, #0
 80612ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80612cc:	4b1a      	ldr	r3, [pc, #104]	; (8061338 <MX_ADC1_Init+0x98>)
 80612ce:	2200      	movs	r2, #0
 80612d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80612d2:	4b19      	ldr	r3, [pc, #100]	; (8061338 <MX_ADC1_Init+0x98>)
 80612d4:	2200      	movs	r2, #0
 80612d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80612da:	4b17      	ldr	r3, [pc, #92]	; (8061338 <MX_ADC1_Init+0x98>)
 80612dc:	2200      	movs	r2, #0
 80612de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80612e0:	4b15      	ldr	r3, [pc, #84]	; (8061338 <MX_ADC1_Init+0x98>)
 80612e2:	4a17      	ldr	r2, [pc, #92]	; (8061340 <MX_ADC1_Init+0xa0>)
 80612e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80612e6:	4b14      	ldr	r3, [pc, #80]	; (8061338 <MX_ADC1_Init+0x98>)
 80612e8:	2200      	movs	r2, #0
 80612ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80612ec:	4b12      	ldr	r3, [pc, #72]	; (8061338 <MX_ADC1_Init+0x98>)
 80612ee:	2201      	movs	r2, #1
 80612f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80612f2:	4b11      	ldr	r3, [pc, #68]	; (8061338 <MX_ADC1_Init+0x98>)
 80612f4:	2200      	movs	r2, #0
 80612f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80612fa:	4b0f      	ldr	r3, [pc, #60]	; (8061338 <MX_ADC1_Init+0x98>)
 80612fc:	2201      	movs	r2, #1
 80612fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8061300:	480d      	ldr	r0, [pc, #52]	; (8061338 <MX_ADC1_Init+0x98>)
 8061302:	f002 fb0d 	bl	8063920 <HAL_ADC_Init>
 8061306:	4603      	mov	r3, r0
 8061308:	2b00      	cmp	r3, #0
 806130a:	d001      	beq.n	8061310 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 806130c:	f001 fe08 	bl	8062f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8061310:	2301      	movs	r3, #1
 8061312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8061314:	2301      	movs	r3, #1
 8061316:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8061318:	2300      	movs	r3, #0
 806131a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 806131c:	463b      	mov	r3, r7
 806131e:	4619      	mov	r1, r3
 8061320:	4805      	ldr	r0, [pc, #20]	; (8061338 <MX_ADC1_Init+0x98>)
 8061322:	f002 ff0b 	bl	806413c <HAL_ADC_ConfigChannel>
 8061326:	4603      	mov	r3, r0
 8061328:	2b00      	cmp	r3, #0
 806132a:	d001      	beq.n	8061330 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 806132c:	f001 fdf8 	bl	8062f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8061330:	bf00      	nop
 8061332:	3710      	adds	r7, #16
 8061334:	46bd      	mov	sp, r7
 8061336:	bd80      	pop	{r7, pc}
 8061338:	20004f48 	.word	0x20004f48
 806133c:	40012000 	.word	0x40012000
 8061340:	0f000001 	.word	0x0f000001

08061344 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8061344:	b580      	push	{r7, lr}
 8061346:	b08a      	sub	sp, #40	; 0x28
 8061348:	af00      	add	r7, sp, #0
 806134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 806134c:	f107 0314 	add.w	r3, r7, #20
 8061350:	2200      	movs	r2, #0
 8061352:	601a      	str	r2, [r3, #0]
 8061354:	605a      	str	r2, [r3, #4]
 8061356:	609a      	str	r2, [r3, #8]
 8061358:	60da      	str	r2, [r3, #12]
 806135a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 806135c:	687b      	ldr	r3, [r7, #4]
 806135e:	681b      	ldr	r3, [r3, #0]
 8061360:	4a32      	ldr	r2, [pc, #200]	; (806142c <HAL_ADC_MspInit+0xe8>)
 8061362:	4293      	cmp	r3, r2
 8061364:	d15e      	bne.n	8061424 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8061366:	2300      	movs	r3, #0
 8061368:	613b      	str	r3, [r7, #16]
 806136a:	4b31      	ldr	r3, [pc, #196]	; (8061430 <HAL_ADC_MspInit+0xec>)
 806136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806136e:	4a30      	ldr	r2, [pc, #192]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8061374:	6453      	str	r3, [r2, #68]	; 0x44
 8061376:	4b2e      	ldr	r3, [pc, #184]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806137a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806137e:	613b      	str	r3, [r7, #16]
 8061380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8061382:	2300      	movs	r3, #0
 8061384:	60fb      	str	r3, [r7, #12]
 8061386:	4b2a      	ldr	r3, [pc, #168]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806138a:	4a29      	ldr	r2, [pc, #164]	; (8061430 <HAL_ADC_MspInit+0xec>)
 806138c:	f043 0301 	orr.w	r3, r3, #1
 8061390:	6313      	str	r3, [r2, #48]	; 0x30
 8061392:	4b27      	ldr	r3, [pc, #156]	; (8061430 <HAL_ADC_MspInit+0xec>)
 8061394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061396:	f003 0301 	and.w	r3, r3, #1
 806139a:	60fb      	str	r3, [r7, #12]
 806139c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 806139e:	2302      	movs	r3, #2
 80613a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80613a2:	2303      	movs	r3, #3
 80613a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80613a6:	2300      	movs	r3, #0
 80613a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80613aa:	f107 0314 	add.w	r3, r7, #20
 80613ae:	4619      	mov	r1, r3
 80613b0:	4820      	ldr	r0, [pc, #128]	; (8061434 <HAL_ADC_MspInit+0xf0>)
 80613b2:	f004 f879 	bl	80654a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80613b6:	4b20      	ldr	r3, [pc, #128]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613b8:	4a20      	ldr	r2, [pc, #128]	; (806143c <HAL_ADC_MspInit+0xf8>)
 80613ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80613bc:	4b1e      	ldr	r3, [pc, #120]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613be:	2200      	movs	r2, #0
 80613c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80613c2:	4b1d      	ldr	r3, [pc, #116]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613c4:	2200      	movs	r2, #0
 80613c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80613c8:	4b1b      	ldr	r3, [pc, #108]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613ca:	2200      	movs	r2, #0
 80613cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80613ce:	4b1a      	ldr	r3, [pc, #104]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80613d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80613d6:	4b18      	ldr	r3, [pc, #96]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80613dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80613de:	4b16      	ldr	r3, [pc, #88]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80613e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80613e6:	4b14      	ldr	r3, [pc, #80]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613e8:	2200      	movs	r2, #0
 80613ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80613ec:	4b12      	ldr	r3, [pc, #72]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613ee:	2200      	movs	r2, #0
 80613f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80613f2:	4b11      	ldr	r3, [pc, #68]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613f4:	2200      	movs	r2, #0
 80613f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80613f8:	480f      	ldr	r0, [pc, #60]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 80613fa:	f003 fad7 	bl	80649ac <HAL_DMA_Init>
 80613fe:	4603      	mov	r3, r0
 8061400:	2b00      	cmp	r3, #0
 8061402:	d001      	beq.n	8061408 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8061404:	f001 fd8c 	bl	8062f20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8061408:	687b      	ldr	r3, [r7, #4]
 806140a:	4a0b      	ldr	r2, [pc, #44]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 806140c:	639a      	str	r2, [r3, #56]	; 0x38
 806140e:	4a0a      	ldr	r2, [pc, #40]	; (8061438 <HAL_ADC_MspInit+0xf4>)
 8061410:	687b      	ldr	r3, [r7, #4]
 8061412:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8061414:	2200      	movs	r2, #0
 8061416:	2105      	movs	r1, #5
 8061418:	2012      	movs	r0, #18
 806141a:	f003 fa7f 	bl	806491c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 806141e:	2012      	movs	r0, #18
 8061420:	f003 faa8 	bl	8064974 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8061424:	bf00      	nop
 8061426:	3728      	adds	r7, #40	; 0x28
 8061428:	46bd      	mov	sp, r7
 806142a:	bd80      	pop	{r7, pc}
 806142c:	40012000 	.word	0x40012000
 8061430:	40023800 	.word	0x40023800
 8061434:	40020000 	.word	0x40020000
 8061438:	20004f90 	.word	0x20004f90
 806143c:	40026410 	.word	0x40026410

08061440 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8061440:	b480      	push	{r7}
 8061442:	b083      	sub	sp, #12
 8061444:	af00      	add	r7, sp, #0
 8061446:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8061448:	687b      	ldr	r3, [r7, #4]
 806144a:	2203      	movs	r2, #3
 806144c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 806144e:	687b      	ldr	r3, [r7, #4]
 8061450:	2200      	movs	r2, #0
 8061452:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8061454:	687b      	ldr	r3, [r7, #4]
 8061456:	2203      	movs	r2, #3
 8061458:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 806145a:	687b      	ldr	r3, [r7, #4]
 806145c:	2203      	movs	r2, #3
 806145e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8061460:	687b      	ldr	r3, [r7, #4]
 8061462:	2203      	movs	r2, #3
 8061464:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8061466:	687b      	ldr	r3, [r7, #4]
 8061468:	2203      	movs	r2, #3
 806146a:	715a      	strb	r2, [r3, #5]
}
 806146c:	bf00      	nop
 806146e:	370c      	adds	r7, #12
 8061470:	46bd      	mov	sp, r7
 8061472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061476:	4770      	bx	lr

08061478 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8061478:	b580      	push	{r7, lr}
 806147a:	b08a      	sub	sp, #40	; 0x28
 806147c:	af04      	add	r7, sp, #16
 806147e:	60f8      	str	r0, [r7, #12]
 8061480:	460b      	mov	r3, r1
 8061482:	607a      	str	r2, [r7, #4]
 8061484:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8061486:	68fb      	ldr	r3, [r7, #12]
 8061488:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 806148a:	005b      	lsls	r3, r3, #1
 806148c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 806148e:	68fb      	ldr	r3, [r7, #12]
 8061490:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8061492:	7afb      	ldrb	r3, [r7, #11]
 8061494:	b29a      	uxth	r2, r3
 8061496:	8af9      	ldrh	r1, [r7, #22]
 8061498:	f241 3388 	movw	r3, #5000	; 0x1388
 806149c:	9302      	str	r3, [sp, #8]
 806149e:	2302      	movs	r3, #2
 80614a0:	9301      	str	r3, [sp, #4]
 80614a2:	f107 0314 	add.w	r3, r7, #20
 80614a6:	9300      	str	r3, [sp, #0]
 80614a8:	2301      	movs	r3, #1
 80614aa:	f005 f8c1 	bl	8066630 <HAL_I2C_Mem_Read>
 80614ae:	4603      	mov	r3, r0
 80614b0:	2b00      	cmp	r3, #0
 80614b2:	d10b      	bne.n	80614cc <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80614b4:	7d7b      	ldrb	r3, [r7, #21]
 80614b6:	021b      	lsls	r3, r3, #8
 80614b8:	b21a      	sxth	r2, r3
 80614ba:	7d3b      	ldrb	r3, [r7, #20]
 80614bc:	b21b      	sxth	r3, r3
 80614be:	4313      	orrs	r3, r2
 80614c0:	b21b      	sxth	r3, r3
 80614c2:	b29a      	uxth	r2, r3
 80614c4:	687b      	ldr	r3, [r7, #4]
 80614c6:	801a      	strh	r2, [r3, #0]
		return true;
 80614c8:	2301      	movs	r3, #1
 80614ca:	e000      	b.n	80614ce <read_register16+0x56>
	} else
		return false;
 80614cc:	2300      	movs	r3, #0

}
 80614ce:	4618      	mov	r0, r3
 80614d0:	3718      	adds	r7, #24
 80614d2:	46bd      	mov	sp, r7
 80614d4:	bd80      	pop	{r7, pc}

080614d6 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80614d6:	b590      	push	{r4, r7, lr}
 80614d8:	b08b      	sub	sp, #44	; 0x2c
 80614da:	af04      	add	r7, sp, #16
 80614dc:	60f8      	str	r0, [r7, #12]
 80614de:	607a      	str	r2, [r7, #4]
 80614e0:	461a      	mov	r2, r3
 80614e2:	460b      	mov	r3, r1
 80614e4:	72fb      	strb	r3, [r7, #11]
 80614e6:	4613      	mov	r3, r2
 80614e8:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80614ea:	68fb      	ldr	r3, [r7, #12]
 80614ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80614ee:	005b      	lsls	r3, r3, #1
 80614f0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80614f2:	68fb      	ldr	r3, [r7, #12]
 80614f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80614f6:	7afb      	ldrb	r3, [r7, #11]
 80614f8:	b29a      	uxth	r2, r3
 80614fa:	7abb      	ldrb	r3, [r7, #10]
 80614fc:	b29b      	uxth	r3, r3
 80614fe:	8af9      	ldrh	r1, [r7, #22]
 8061500:	f241 3488 	movw	r4, #5000	; 0x1388
 8061504:	9402      	str	r4, [sp, #8]
 8061506:	9301      	str	r3, [sp, #4]
 8061508:	687b      	ldr	r3, [r7, #4]
 806150a:	9300      	str	r3, [sp, #0]
 806150c:	2301      	movs	r3, #1
 806150e:	f005 f88f 	bl	8066630 <HAL_I2C_Mem_Read>
 8061512:	4603      	mov	r3, r0
 8061514:	2b00      	cmp	r3, #0
 8061516:	d101      	bne.n	806151c <read_data+0x46>
		return 0;
 8061518:	2300      	movs	r3, #0
 806151a:	e000      	b.n	806151e <read_data+0x48>
	else
		return 1;
 806151c:	2301      	movs	r3, #1

}
 806151e:	4618      	mov	r0, r3
 8061520:	371c      	adds	r7, #28
 8061522:	46bd      	mov	sp, r7
 8061524:	bd90      	pop	{r4, r7, pc}

08061526 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8061526:	b580      	push	{r7, lr}
 8061528:	b082      	sub	sp, #8
 806152a:	af00      	add	r7, sp, #0
 806152c:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 806152e:	687b      	ldr	r3, [r7, #4]
 8061530:	461a      	mov	r2, r3
 8061532:	2188      	movs	r1, #136	; 0x88
 8061534:	6878      	ldr	r0, [r7, #4]
 8061536:	f7ff ff9f 	bl	8061478 <read_register16>
 806153a:	4603      	mov	r3, r0
 806153c:	2b00      	cmp	r3, #0
 806153e:	d06f      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8061540:	687b      	ldr	r3, [r7, #4]
 8061542:	3302      	adds	r3, #2
 8061544:	461a      	mov	r2, r3
 8061546:	218a      	movs	r1, #138	; 0x8a
 8061548:	6878      	ldr	r0, [r7, #4]
 806154a:	f7ff ff95 	bl	8061478 <read_register16>
 806154e:	4603      	mov	r3, r0
 8061550:	2b00      	cmp	r3, #0
 8061552:	d065      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8061554:	687b      	ldr	r3, [r7, #4]
 8061556:	3304      	adds	r3, #4
 8061558:	461a      	mov	r2, r3
 806155a:	218c      	movs	r1, #140	; 0x8c
 806155c:	6878      	ldr	r0, [r7, #4]
 806155e:	f7ff ff8b 	bl	8061478 <read_register16>
 8061562:	4603      	mov	r3, r0
 8061564:	2b00      	cmp	r3, #0
 8061566:	d05b      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8061568:	687b      	ldr	r3, [r7, #4]
 806156a:	3306      	adds	r3, #6
 806156c:	461a      	mov	r2, r3
 806156e:	218e      	movs	r1, #142	; 0x8e
 8061570:	6878      	ldr	r0, [r7, #4]
 8061572:	f7ff ff81 	bl	8061478 <read_register16>
 8061576:	4603      	mov	r3, r0
 8061578:	2b00      	cmp	r3, #0
 806157a:	d051      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 806157c:	687b      	ldr	r3, [r7, #4]
 806157e:	3308      	adds	r3, #8
 8061580:	461a      	mov	r2, r3
 8061582:	2190      	movs	r1, #144	; 0x90
 8061584:	6878      	ldr	r0, [r7, #4]
 8061586:	f7ff ff77 	bl	8061478 <read_register16>
 806158a:	4603      	mov	r3, r0
 806158c:	2b00      	cmp	r3, #0
 806158e:	d047      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8061590:	687b      	ldr	r3, [r7, #4]
 8061592:	330a      	adds	r3, #10
 8061594:	461a      	mov	r2, r3
 8061596:	2192      	movs	r1, #146	; 0x92
 8061598:	6878      	ldr	r0, [r7, #4]
 806159a:	f7ff ff6d 	bl	8061478 <read_register16>
 806159e:	4603      	mov	r3, r0
 80615a0:	2b00      	cmp	r3, #0
 80615a2:	d03d      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80615a4:	687b      	ldr	r3, [r7, #4]
 80615a6:	330c      	adds	r3, #12
 80615a8:	461a      	mov	r2, r3
 80615aa:	2194      	movs	r1, #148	; 0x94
 80615ac:	6878      	ldr	r0, [r7, #4]
 80615ae:	f7ff ff63 	bl	8061478 <read_register16>
 80615b2:	4603      	mov	r3, r0
 80615b4:	2b00      	cmp	r3, #0
 80615b6:	d033      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80615b8:	687b      	ldr	r3, [r7, #4]
 80615ba:	330e      	adds	r3, #14
 80615bc:	461a      	mov	r2, r3
 80615be:	2196      	movs	r1, #150	; 0x96
 80615c0:	6878      	ldr	r0, [r7, #4]
 80615c2:	f7ff ff59 	bl	8061478 <read_register16>
 80615c6:	4603      	mov	r3, r0
 80615c8:	2b00      	cmp	r3, #0
 80615ca:	d029      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80615cc:	687b      	ldr	r3, [r7, #4]
 80615ce:	3310      	adds	r3, #16
 80615d0:	461a      	mov	r2, r3
 80615d2:	2198      	movs	r1, #152	; 0x98
 80615d4:	6878      	ldr	r0, [r7, #4]
 80615d6:	f7ff ff4f 	bl	8061478 <read_register16>
 80615da:	4603      	mov	r3, r0
 80615dc:	2b00      	cmp	r3, #0
 80615de:	d01f      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80615e0:	687b      	ldr	r3, [r7, #4]
 80615e2:	3312      	adds	r3, #18
 80615e4:	461a      	mov	r2, r3
 80615e6:	219a      	movs	r1, #154	; 0x9a
 80615e8:	6878      	ldr	r0, [r7, #4]
 80615ea:	f7ff ff45 	bl	8061478 <read_register16>
 80615ee:	4603      	mov	r3, r0
 80615f0:	2b00      	cmp	r3, #0
 80615f2:	d015      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80615f4:	687b      	ldr	r3, [r7, #4]
 80615f6:	3314      	adds	r3, #20
 80615f8:	461a      	mov	r2, r3
 80615fa:	219c      	movs	r1, #156	; 0x9c
 80615fc:	6878      	ldr	r0, [r7, #4]
 80615fe:	f7ff ff3b 	bl	8061478 <read_register16>
 8061602:	4603      	mov	r3, r0
 8061604:	2b00      	cmp	r3, #0
 8061606:	d00b      	beq.n	8061620 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8061608:	687b      	ldr	r3, [r7, #4]
 806160a:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 806160c:	461a      	mov	r2, r3
 806160e:	219e      	movs	r1, #158	; 0x9e
 8061610:	6878      	ldr	r0, [r7, #4]
 8061612:	f7ff ff31 	bl	8061478 <read_register16>
 8061616:	4603      	mov	r3, r0
 8061618:	2b00      	cmp	r3, #0
 806161a:	d001      	beq.n	8061620 <read_calibration_data+0xfa>

		return true;
 806161c:	2301      	movs	r3, #1
 806161e:	e000      	b.n	8061622 <read_calibration_data+0xfc>
	}

	return false;
 8061620:	2300      	movs	r3, #0
}
 8061622:	4618      	mov	r0, r3
 8061624:	3708      	adds	r7, #8
 8061626:	46bd      	mov	sp, r7
 8061628:	bd80      	pop	{r7, pc}

0806162a <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 806162a:	b580      	push	{r7, lr}
 806162c:	b084      	sub	sp, #16
 806162e:	af00      	add	r7, sp, #0
 8061630:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8061632:	687b      	ldr	r3, [r7, #4]
 8061634:	f103 0218 	add.w	r2, r3, #24
 8061638:	2301      	movs	r3, #1
 806163a:	21a1      	movs	r1, #161	; 0xa1
 806163c:	6878      	ldr	r0, [r7, #4]
 806163e:	f7ff ff4a 	bl	80614d6 <read_data>
 8061642:	4603      	mov	r3, r0
 8061644:	2b00      	cmp	r3, #0
 8061646:	d14b      	bne.n	80616e0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8061648:	687b      	ldr	r3, [r7, #4]
 806164a:	331a      	adds	r3, #26
 806164c:	461a      	mov	r2, r3
 806164e:	21e1      	movs	r1, #225	; 0xe1
 8061650:	6878      	ldr	r0, [r7, #4]
 8061652:	f7ff ff11 	bl	8061478 <read_register16>
 8061656:	4603      	mov	r3, r0
 8061658:	2b00      	cmp	r3, #0
 806165a:	d041      	beq.n	80616e0 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 806165c:	687b      	ldr	r3, [r7, #4]
 806165e:	f103 021c 	add.w	r2, r3, #28
 8061662:	2301      	movs	r3, #1
 8061664:	21e3      	movs	r1, #227	; 0xe3
 8061666:	6878      	ldr	r0, [r7, #4]
 8061668:	f7ff ff35 	bl	80614d6 <read_data>
 806166c:	4603      	mov	r3, r0
 806166e:	2b00      	cmp	r3, #0
 8061670:	d136      	bne.n	80616e0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8061672:	f107 030e 	add.w	r3, r7, #14
 8061676:	461a      	mov	r2, r3
 8061678:	21e4      	movs	r1, #228	; 0xe4
 806167a:	6878      	ldr	r0, [r7, #4]
 806167c:	f7ff fefc 	bl	8061478 <read_register16>
 8061680:	4603      	mov	r3, r0
 8061682:	2b00      	cmp	r3, #0
 8061684:	d02c      	beq.n	80616e0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8061686:	f107 030c 	add.w	r3, r7, #12
 806168a:	461a      	mov	r2, r3
 806168c:	21e5      	movs	r1, #229	; 0xe5
 806168e:	6878      	ldr	r0, [r7, #4]
 8061690:	f7ff fef2 	bl	8061478 <read_register16>
 8061694:	4603      	mov	r3, r0
 8061696:	2b00      	cmp	r3, #0
 8061698:	d022      	beq.n	80616e0 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 806169a:	687b      	ldr	r3, [r7, #4]
 806169c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80616a0:	2301      	movs	r3, #1
 80616a2:	21e7      	movs	r1, #231	; 0xe7
 80616a4:	6878      	ldr	r0, [r7, #4]
 80616a6:	f7ff ff16 	bl	80614d6 <read_data>
 80616aa:	4603      	mov	r3, r0
 80616ac:	2b00      	cmp	r3, #0
 80616ae:	d117      	bne.n	80616e0 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80616b0:	89fb      	ldrh	r3, [r7, #14]
 80616b2:	011b      	lsls	r3, r3, #4
 80616b4:	b21b      	sxth	r3, r3
 80616b6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80616ba:	b21a      	sxth	r2, r3
 80616bc:	89fb      	ldrh	r3, [r7, #14]
 80616be:	121b      	asrs	r3, r3, #8
 80616c0:	b21b      	sxth	r3, r3
 80616c2:	f003 030f 	and.w	r3, r3, #15
 80616c6:	b21b      	sxth	r3, r3
 80616c8:	4313      	orrs	r3, r2
 80616ca:	b21a      	sxth	r2, r3
 80616cc:	687b      	ldr	r3, [r7, #4]
 80616ce:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80616d0:	89bb      	ldrh	r3, [r7, #12]
 80616d2:	091b      	lsrs	r3, r3, #4
 80616d4:	b29b      	uxth	r3, r3
 80616d6:	b21a      	sxth	r2, r3
 80616d8:	687b      	ldr	r3, [r7, #4]
 80616da:	841a      	strh	r2, [r3, #32]

		return true;
 80616dc:	2301      	movs	r3, #1
 80616de:	e000      	b.n	80616e2 <read_hum_calibration_data+0xb8>
	}

	return false;
 80616e0:	2300      	movs	r3, #0
}
 80616e2:	4618      	mov	r0, r3
 80616e4:	3710      	adds	r7, #16
 80616e6:	46bd      	mov	sp, r7
 80616e8:	bd80      	pop	{r7, pc}

080616ea <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80616ea:	b580      	push	{r7, lr}
 80616ec:	b088      	sub	sp, #32
 80616ee:	af04      	add	r7, sp, #16
 80616f0:	6078      	str	r0, [r7, #4]
 80616f2:	460b      	mov	r3, r1
 80616f4:	70fb      	strb	r3, [r7, #3]
 80616f6:	4613      	mov	r3, r2
 80616f8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80616fa:	687b      	ldr	r3, [r7, #4]
 80616fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80616fe:	005b      	lsls	r3, r3, #1
 8061700:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8061702:	687b      	ldr	r3, [r7, #4]
 8061704:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8061706:	78fb      	ldrb	r3, [r7, #3]
 8061708:	b29a      	uxth	r2, r3
 806170a:	89f9      	ldrh	r1, [r7, #14]
 806170c:	f242 7310 	movw	r3, #10000	; 0x2710
 8061710:	9302      	str	r3, [sp, #8]
 8061712:	2301      	movs	r3, #1
 8061714:	9301      	str	r3, [sp, #4]
 8061716:	1cbb      	adds	r3, r7, #2
 8061718:	9300      	str	r3, [sp, #0]
 806171a:	2301      	movs	r3, #1
 806171c:	f004 fe82 	bl	8066424 <HAL_I2C_Mem_Write>
 8061720:	4603      	mov	r3, r0
 8061722:	2b00      	cmp	r3, #0
 8061724:	d101      	bne.n	806172a <write_register8+0x40>
		return false;
 8061726:	2300      	movs	r3, #0
 8061728:	e000      	b.n	806172c <write_register8+0x42>
	else
		return true;
 806172a:	2301      	movs	r3, #1
}
 806172c:	4618      	mov	r0, r3
 806172e:	3710      	adds	r7, #16
 8061730:	46bd      	mov	sp, r7
 8061732:	bd80      	pop	{r7, pc}

08061734 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8061734:	b580      	push	{r7, lr}
 8061736:	b084      	sub	sp, #16
 8061738:	af00      	add	r7, sp, #0
 806173a:	6078      	str	r0, [r7, #4]
 806173c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 806173e:	687b      	ldr	r3, [r7, #4]
 8061740:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8061742:	2b76      	cmp	r3, #118	; 0x76
 8061744:	d005      	beq.n	8061752 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8061746:	687b      	ldr	r3, [r7, #4]
 8061748:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 806174a:	2b77      	cmp	r3, #119	; 0x77
 806174c:	d001      	beq.n	8061752 <bmp280_init+0x1e>

		return false;
 806174e:	2300      	movs	r3, #0
 8061750:	e099      	b.n	8061886 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8061752:	687b      	ldr	r3, [r7, #4]
 8061754:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8061758:	2301      	movs	r3, #1
 806175a:	21d0      	movs	r1, #208	; 0xd0
 806175c:	6878      	ldr	r0, [r7, #4]
 806175e:	f7ff feba 	bl	80614d6 <read_data>
 8061762:	4603      	mov	r3, r0
 8061764:	2b00      	cmp	r3, #0
 8061766:	d001      	beq.n	806176c <bmp280_init+0x38>
		return false;
 8061768:	2300      	movs	r3, #0
 806176a:	e08c      	b.n	8061886 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 806176c:	687b      	ldr	r3, [r7, #4]
 806176e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8061772:	2b58      	cmp	r3, #88	; 0x58
 8061774:	d006      	beq.n	8061784 <bmp280_init+0x50>
 8061776:	687b      	ldr	r3, [r7, #4]
 8061778:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 806177c:	2b60      	cmp	r3, #96	; 0x60
 806177e:	d001      	beq.n	8061784 <bmp280_init+0x50>

		return false;
 8061780:	2300      	movs	r3, #0
 8061782:	e080      	b.n	8061886 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8061784:	22b6      	movs	r2, #182	; 0xb6
 8061786:	21e0      	movs	r1, #224	; 0xe0
 8061788:	6878      	ldr	r0, [r7, #4]
 806178a:	f7ff ffae 	bl	80616ea <write_register8>
 806178e:	4603      	mov	r3, r0
 8061790:	2b00      	cmp	r3, #0
 8061792:	d001      	beq.n	8061798 <bmp280_init+0x64>
		return false;
 8061794:	2300      	movs	r3, #0
 8061796:	e076      	b.n	8061886 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8061798:	f107 020c 	add.w	r2, r7, #12
 806179c:	2301      	movs	r3, #1
 806179e:	21f3      	movs	r1, #243	; 0xf3
 80617a0:	6878      	ldr	r0, [r7, #4]
 80617a2:	f7ff fe98 	bl	80614d6 <read_data>
 80617a6:	4603      	mov	r3, r0
 80617a8:	2b00      	cmp	r3, #0
 80617aa:	d1f5      	bne.n	8061798 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80617ac:	7b3b      	ldrb	r3, [r7, #12]
 80617ae:	f003 0301 	and.w	r3, r3, #1
 80617b2:	2b00      	cmp	r3, #0
 80617b4:	d1f0      	bne.n	8061798 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80617b6:	6878      	ldr	r0, [r7, #4]
 80617b8:	f7ff feb5 	bl	8061526 <read_calibration_data>
 80617bc:	4603      	mov	r3, r0
 80617be:	f083 0301 	eor.w	r3, r3, #1
 80617c2:	b2db      	uxtb	r3, r3
 80617c4:	2b00      	cmp	r3, #0
 80617c6:	d100      	bne.n	80617ca <bmp280_init+0x96>
 80617c8:	e001      	b.n	80617ce <bmp280_init+0x9a>
		return false;
 80617ca:	2300      	movs	r3, #0
 80617cc:	e05b      	b.n	8061886 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80617ce:	687b      	ldr	r3, [r7, #4]
 80617d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80617d4:	2b60      	cmp	r3, #96	; 0x60
 80617d6:	d10a      	bne.n	80617ee <bmp280_init+0xba>
 80617d8:	6878      	ldr	r0, [r7, #4]
 80617da:	f7ff ff26 	bl	806162a <read_hum_calibration_data>
 80617de:	4603      	mov	r3, r0
 80617e0:	f083 0301 	eor.w	r3, r3, #1
 80617e4:	b2db      	uxtb	r3, r3
 80617e6:	2b00      	cmp	r3, #0
 80617e8:	d001      	beq.n	80617ee <bmp280_init+0xba>
		return false;
 80617ea:	2300      	movs	r3, #0
 80617ec:	e04b      	b.n	8061886 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80617ee:	683b      	ldr	r3, [r7, #0]
 80617f0:	795b      	ldrb	r3, [r3, #5]
 80617f2:	015b      	lsls	r3, r3, #5
 80617f4:	b25a      	sxtb	r2, r3
 80617f6:	683b      	ldr	r3, [r7, #0]
 80617f8:	785b      	ldrb	r3, [r3, #1]
 80617fa:	009b      	lsls	r3, r3, #2
 80617fc:	b25b      	sxtb	r3, r3
 80617fe:	4313      	orrs	r3, r2
 8061800:	b25b      	sxtb	r3, r3
 8061802:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8061804:	7bfb      	ldrb	r3, [r7, #15]
 8061806:	461a      	mov	r2, r3
 8061808:	21f5      	movs	r1, #245	; 0xf5
 806180a:	6878      	ldr	r0, [r7, #4]
 806180c:	f7ff ff6d 	bl	80616ea <write_register8>
 8061810:	4603      	mov	r3, r0
 8061812:	2b00      	cmp	r3, #0
 8061814:	d001      	beq.n	806181a <bmp280_init+0xe6>
		return false;
 8061816:	2300      	movs	r3, #0
 8061818:	e035      	b.n	8061886 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 806181a:	683b      	ldr	r3, [r7, #0]
 806181c:	781b      	ldrb	r3, [r3, #0]
 806181e:	2b01      	cmp	r3, #1
 8061820:	d102      	bne.n	8061828 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8061822:	683b      	ldr	r3, [r7, #0]
 8061824:	2200      	movs	r2, #0
 8061826:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8061828:	683b      	ldr	r3, [r7, #0]
 806182a:	78db      	ldrb	r3, [r3, #3]
 806182c:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 806182e:	b25a      	sxtb	r2, r3
 8061830:	683b      	ldr	r3, [r7, #0]
 8061832:	789b      	ldrb	r3, [r3, #2]
 8061834:	009b      	lsls	r3, r3, #2
 8061836:	b25b      	sxtb	r3, r3
 8061838:	4313      	orrs	r3, r2
 806183a:	b25a      	sxtb	r2, r3
 806183c:	683b      	ldr	r3, [r7, #0]
 806183e:	781b      	ldrb	r3, [r3, #0]
 8061840:	b25b      	sxtb	r3, r3
 8061842:	4313      	orrs	r3, r2
 8061844:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8061846:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8061848:	687b      	ldr	r3, [r7, #4]
 806184a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 806184e:	2b60      	cmp	r3, #96	; 0x60
 8061850:	d10d      	bne.n	806186e <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8061852:	683b      	ldr	r3, [r7, #0]
 8061854:	791b      	ldrb	r3, [r3, #4]
 8061856:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8061858:	7b7b      	ldrb	r3, [r7, #13]
 806185a:	461a      	mov	r2, r3
 806185c:	21f2      	movs	r1, #242	; 0xf2
 806185e:	6878      	ldr	r0, [r7, #4]
 8061860:	f7ff ff43 	bl	80616ea <write_register8>
 8061864:	4603      	mov	r3, r0
 8061866:	2b00      	cmp	r3, #0
 8061868:	d001      	beq.n	806186e <bmp280_init+0x13a>
			return false;
 806186a:	2300      	movs	r3, #0
 806186c:	e00b      	b.n	8061886 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 806186e:	7bbb      	ldrb	r3, [r7, #14]
 8061870:	461a      	mov	r2, r3
 8061872:	21f4      	movs	r1, #244	; 0xf4
 8061874:	6878      	ldr	r0, [r7, #4]
 8061876:	f7ff ff38 	bl	80616ea <write_register8>
 806187a:	4603      	mov	r3, r0
 806187c:	2b00      	cmp	r3, #0
 806187e:	d001      	beq.n	8061884 <bmp280_init+0x150>
		return false;
 8061880:	2300      	movs	r3, #0
 8061882:	e000      	b.n	8061886 <bmp280_init+0x152>
	}

	return true;
 8061884:	2301      	movs	r3, #1
}
 8061886:	4618      	mov	r0, r3
 8061888:	3710      	adds	r7, #16
 806188a:	46bd      	mov	sp, r7
 806188c:	bd80      	pop	{r7, pc}

0806188e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 806188e:	b480      	push	{r7}
 8061890:	b087      	sub	sp, #28
 8061892:	af00      	add	r7, sp, #0
 8061894:	60f8      	str	r0, [r7, #12]
 8061896:	60b9      	str	r1, [r7, #8]
 8061898:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 806189a:	68bb      	ldr	r3, [r7, #8]
 806189c:	10da      	asrs	r2, r3, #3
 806189e:	68fb      	ldr	r3, [r7, #12]
 80618a0:	881b      	ldrh	r3, [r3, #0]
 80618a2:	005b      	lsls	r3, r3, #1
 80618a4:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80618a6:	68fa      	ldr	r2, [r7, #12]
 80618a8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80618ac:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80618b0:	12db      	asrs	r3, r3, #11
 80618b2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80618b4:	68bb      	ldr	r3, [r7, #8]
 80618b6:	111b      	asrs	r3, r3, #4
 80618b8:	68fa      	ldr	r2, [r7, #12]
 80618ba:	8812      	ldrh	r2, [r2, #0]
 80618bc:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80618be:	68ba      	ldr	r2, [r7, #8]
 80618c0:	1112      	asrs	r2, r2, #4
 80618c2:	68f9      	ldr	r1, [r7, #12]
 80618c4:	8809      	ldrh	r1, [r1, #0]
 80618c6:	1a52      	subs	r2, r2, r1
 80618c8:	fb02 f303 	mul.w	r3, r2, r3
 80618cc:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80618ce:	68fa      	ldr	r2, [r7, #12]
 80618d0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80618d4:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80618d8:	139b      	asrs	r3, r3, #14
 80618da:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80618dc:	697a      	ldr	r2, [r7, #20]
 80618de:	693b      	ldr	r3, [r7, #16]
 80618e0:	441a      	add	r2, r3
 80618e2:	687b      	ldr	r3, [r7, #4]
 80618e4:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80618e6:	687b      	ldr	r3, [r7, #4]
 80618e8:	681a      	ldr	r2, [r3, #0]
 80618ea:	4613      	mov	r3, r2
 80618ec:	009b      	lsls	r3, r3, #2
 80618ee:	4413      	add	r3, r2
 80618f0:	3380      	adds	r3, #128	; 0x80
 80618f2:	121b      	asrs	r3, r3, #8
}
 80618f4:	4618      	mov	r0, r3
 80618f6:	371c      	adds	r7, #28
 80618f8:	46bd      	mov	sp, r7
 80618fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80618fe:	4770      	bx	lr

08061900 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8061900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8061904:	b09c      	sub	sp, #112	; 0x70
 8061906:	af00      	add	r7, sp, #0
 8061908:	6578      	str	r0, [r7, #84]	; 0x54
 806190a:	6539      	str	r1, [r7, #80]	; 0x50
 806190c:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 806190e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8061910:	461a      	mov	r2, r3
 8061912:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061916:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 806191a:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 806191e:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8061922:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8061924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8061926:	fb03 f102 	mul.w	r1, r3, r2
 806192a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 806192c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 806192e:	fb03 f302 	mul.w	r3, r3, r2
 8061932:	18ca      	adds	r2, r1, r3
 8061934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8061936:	fba3 4503 	umull	r4, r5, r3, r3
 806193a:	1953      	adds	r3, r2, r5
 806193c:	461d      	mov	r5, r3
 806193e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061940:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8061944:	b21a      	sxth	r2, r3
 8061946:	ea4f 73e2 	mov.w	r3, r2, asr #31
 806194a:	fb02 f005 	mul.w	r0, r2, r5
 806194e:	fb04 f103 	mul.w	r1, r4, r3
 8061952:	4401      	add	r1, r0
 8061954:	fba4 2302 	umull	r2, r3, r4, r2
 8061958:	4419      	add	r1, r3
 806195a:	460b      	mov	r3, r1
 806195c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8061960:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8061964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061966:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 806196a:	b21a      	sxth	r2, r3
 806196c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061970:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061972:	fb03 f001 	mul.w	r0, r3, r1
 8061976:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8061978:	fb02 f101 	mul.w	r1, r2, r1
 806197c:	4408      	add	r0, r1
 806197e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061980:	fba1 2302 	umull	r2, r3, r1, r2
 8061984:	18c1      	adds	r1, r0, r3
 8061986:	460b      	mov	r3, r1
 8061988:	f04f 0000 	mov.w	r0, #0
 806198c:	f04f 0100 	mov.w	r1, #0
 8061990:	0459      	lsls	r1, r3, #17
 8061992:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8061996:	0450      	lsls	r0, r2, #17
 8061998:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 806199c:	eb12 0800 	adds.w	r8, r2, r0
 80619a0:	eb43 0901 	adc.w	r9, r3, r1
 80619a4:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80619a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80619aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80619ae:	b21a      	sxth	r2, r3
 80619b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80619b4:	f04f 0000 	mov.w	r0, #0
 80619b8:	f04f 0100 	mov.w	r1, #0
 80619bc:	00d1      	lsls	r1, r2, #3
 80619be:	2000      	movs	r0, #0
 80619c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80619c4:	1814      	adds	r4, r2, r0
 80619c6:	61bc      	str	r4, [r7, #24]
 80619c8:	414b      	adcs	r3, r1
 80619ca:	61fb      	str	r3, [r7, #28]
 80619cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80619d0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80619d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80619d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80619d8:	fb03 f102 	mul.w	r1, r3, r2
 80619dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80619de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80619e0:	fb03 f302 	mul.w	r3, r3, r2
 80619e4:	18ca      	adds	r2, r1, r3
 80619e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80619e8:	fba3 4503 	umull	r4, r5, r3, r3
 80619ec:	1953      	adds	r3, r2, r5
 80619ee:	461d      	mov	r5, r3
 80619f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80619f2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80619f6:	b21a      	sxth	r2, r3
 80619f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80619fc:	fb02 f005 	mul.w	r0, r2, r5
 8061a00:	fb04 f103 	mul.w	r1, r4, r3
 8061a04:	4401      	add	r1, r0
 8061a06:	fba4 2302 	umull	r2, r3, r4, r2
 8061a0a:	4419      	add	r1, r3
 8061a0c:	460b      	mov	r3, r1
 8061a0e:	f04f 0800 	mov.w	r8, #0
 8061a12:	f04f 0900 	mov.w	r9, #0
 8061a16:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8061a1a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8061a1e:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8061a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061a24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8061a28:	b21a      	sxth	r2, r3
 8061a2a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061a30:	fb03 f001 	mul.w	r0, r3, r1
 8061a34:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8061a36:	fb02 f101 	mul.w	r1, r2, r1
 8061a3a:	1844      	adds	r4, r0, r1
 8061a3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8061a3e:	fba1 0102 	umull	r0, r1, r1, r2
 8061a42:	1863      	adds	r3, r4, r1
 8061a44:	4619      	mov	r1, r3
 8061a46:	f04f 0200 	mov.w	r2, #0
 8061a4a:	f04f 0300 	mov.w	r3, #0
 8061a4e:	030b      	lsls	r3, r1, #12
 8061a50:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8061a54:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8061a56:	eb18 0102 	adds.w	r1, r8, r2
 8061a5a:	6139      	str	r1, [r7, #16]
 8061a5c:	eb49 0303 	adc.w	r3, r9, r3
 8061a60:	617b      	str	r3, [r7, #20]
 8061a62:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8061a66:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8061a6a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061a6e:	1c11      	adds	r1, r2, #0
 8061a70:	6439      	str	r1, [r7, #64]	; 0x40
 8061a72:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8061a76:	647b      	str	r3, [r7, #68]	; 0x44
 8061a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061a7a:	88db      	ldrh	r3, [r3, #6]
 8061a7c:	b29a      	uxth	r2, r3
 8061a7e:	f04f 0300 	mov.w	r3, #0
 8061a82:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8061a86:	4629      	mov	r1, r5
 8061a88:	fb02 f001 	mul.w	r0, r2, r1
 8061a8c:	4621      	mov	r1, r4
 8061a8e:	fb01 f103 	mul.w	r1, r1, r3
 8061a92:	4401      	add	r1, r0
 8061a94:	4620      	mov	r0, r4
 8061a96:	fba0 2302 	umull	r2, r3, r0, r2
 8061a9a:	4419      	add	r1, r3
 8061a9c:	460b      	mov	r3, r1
 8061a9e:	f04f 0000 	mov.w	r0, #0
 8061aa2:	f04f 0100 	mov.w	r1, #0
 8061aa6:	1058      	asrs	r0, r3, #1
 8061aa8:	17d9      	asrs	r1, r3, #31
 8061aaa:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 8061aae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061ab2:	4313      	orrs	r3, r2
 8061ab4:	d101      	bne.n	8061aba <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8061ab6:	2300      	movs	r3, #0
 8061ab8:	e0e1      	b.n	8061c7e <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8061aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8061abc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8061ac0:	461a      	mov	r2, r3
 8061ac2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061ac6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8061aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8061acc:	105b      	asrs	r3, r3, #1
 8061ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8061ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8061ad2:	07db      	lsls	r3, r3, #31
 8061ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8061ad6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8061ada:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8061ade:	4621      	mov	r1, r4
 8061ae0:	ebb1 0a02 	subs.w	sl, r1, r2
 8061ae4:	4629      	mov	r1, r5
 8061ae6:	eb61 0b03 	sbc.w	fp, r1, r3
 8061aea:	4652      	mov	r2, sl
 8061aec:	465b      	mov	r3, fp
 8061aee:	1891      	adds	r1, r2, r2
 8061af0:	60b9      	str	r1, [r7, #8]
 8061af2:	415b      	adcs	r3, r3
 8061af4:	60fb      	str	r3, [r7, #12]
 8061af6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8061afa:	eb12 020a 	adds.w	r2, r2, sl
 8061afe:	eb43 030b 	adc.w	r3, r3, fp
 8061b02:	f04f 0000 	mov.w	r0, #0
 8061b06:	f04f 0100 	mov.w	r1, #0
 8061b0a:	0199      	lsls	r1, r3, #6
 8061b0c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8061b10:	0190      	lsls	r0, r2, #6
 8061b12:	1812      	adds	r2, r2, r0
 8061b14:	eb41 0303 	adc.w	r3, r1, r3
 8061b18:	f04f 0000 	mov.w	r0, #0
 8061b1c:	f04f 0100 	mov.w	r1, #0
 8061b20:	0099      	lsls	r1, r3, #2
 8061b22:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8061b26:	0090      	lsls	r0, r2, #2
 8061b28:	4602      	mov	r2, r0
 8061b2a:	460b      	mov	r3, r1
 8061b2c:	eb12 020a 	adds.w	r2, r2, sl
 8061b30:	eb43 030b 	adc.w	r3, r3, fp
 8061b34:	f04f 0000 	mov.w	r0, #0
 8061b38:	f04f 0100 	mov.w	r1, #0
 8061b3c:	0099      	lsls	r1, r3, #2
 8061b3e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8061b42:	0090      	lsls	r0, r2, #2
 8061b44:	4602      	mov	r2, r0
 8061b46:	460b      	mov	r3, r1
 8061b48:	eb12 010a 	adds.w	r1, r2, sl
 8061b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8061b4e:	eb43 030b 	adc.w	r3, r3, fp
 8061b52:	637b      	str	r3, [r7, #52]	; 0x34
 8061b54:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061b58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8061b5c:	f7ff f8ac 	bl	8060cb8 <__aeabi_ldivmod>
 8061b60:	4602      	mov	r2, r0
 8061b62:	460b      	mov	r3, r1
 8061b64:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8061b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061b6a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8061b6e:	b218      	sxth	r0, r3
 8061b70:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8061b74:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8061b78:	f04f 0200 	mov.w	r2, #0
 8061b7c:	f04f 0300 	mov.w	r3, #0
 8061b80:	0b62      	lsrs	r2, r4, #13
 8061b82:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8061b86:	136b      	asrs	r3, r5, #13
 8061b88:	fb02 f501 	mul.w	r5, r2, r1
 8061b8c:	fb00 f403 	mul.w	r4, r0, r3
 8061b90:	442c      	add	r4, r5
 8061b92:	fba0 0102 	umull	r0, r1, r0, r2
 8061b96:	1863      	adds	r3, r4, r1
 8061b98:	4619      	mov	r1, r3
 8061b9a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8061b9e:	f04f 0200 	mov.w	r2, #0
 8061ba2:	f04f 0300 	mov.w	r3, #0
 8061ba6:	0b62      	lsrs	r2, r4, #13
 8061ba8:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8061bac:	136b      	asrs	r3, r5, #13
 8061bae:	fb02 f501 	mul.w	r5, r2, r1
 8061bb2:	fb00 f403 	mul.w	r4, r0, r3
 8061bb6:	442c      	add	r4, r5
 8061bb8:	fba0 0102 	umull	r0, r1, r0, r2
 8061bbc:	1863      	adds	r3, r4, r1
 8061bbe:	4619      	mov	r1, r3
 8061bc0:	f04f 0200 	mov.w	r2, #0
 8061bc4:	f04f 0300 	mov.w	r3, #0
 8061bc8:	0e42      	lsrs	r2, r0, #25
 8061bca:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8061bce:	164b      	asrs	r3, r1, #25
 8061bd0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8061bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061bd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8061bda:	b21a      	sxth	r2, r3
 8061bdc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8061be0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8061be2:	fb03 f001 	mul.w	r0, r3, r1
 8061be6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8061be8:	fb02 f101 	mul.w	r1, r2, r1
 8061bec:	1844      	adds	r4, r0, r1
 8061bee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8061bf0:	fba1 0102 	umull	r0, r1, r1, r2
 8061bf4:	1863      	adds	r3, r4, r1
 8061bf6:	4619      	mov	r1, r3
 8061bf8:	f04f 0200 	mov.w	r2, #0
 8061bfc:	f04f 0300 	mov.w	r3, #0
 8061c00:	0cc2      	lsrs	r2, r0, #19
 8061c02:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8061c06:	14cb      	asrs	r3, r1, #19
 8061c08:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8061c0c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8061c10:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8061c14:	1884      	adds	r4, r0, r2
 8061c16:	62bc      	str	r4, [r7, #40]	; 0x28
 8061c18:	eb41 0303 	adc.w	r3, r1, r3
 8061c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8061c1e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8061c22:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8061c26:	4621      	mov	r1, r4
 8061c28:	1889      	adds	r1, r1, r2
 8061c2a:	6239      	str	r1, [r7, #32]
 8061c2c:	4629      	mov	r1, r5
 8061c2e:	eb43 0101 	adc.w	r1, r3, r1
 8061c32:	6279      	str	r1, [r7, #36]	; 0x24
 8061c34:	f04f 0000 	mov.w	r0, #0
 8061c38:	f04f 0100 	mov.w	r1, #0
 8061c3c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8061c40:	4623      	mov	r3, r4
 8061c42:	0a18      	lsrs	r0, r3, #8
 8061c44:	462b      	mov	r3, r5
 8061c46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8061c4a:	462b      	mov	r3, r5
 8061c4c:	1219      	asrs	r1, r3, #8
 8061c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8061c50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8061c54:	b21c      	sxth	r4, r3
 8061c56:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8061c5a:	f04f 0200 	mov.w	r2, #0
 8061c5e:	f04f 0300 	mov.w	r3, #0
 8061c62:	012b      	lsls	r3, r5, #4
 8061c64:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8061c68:	0122      	lsls	r2, r4, #4
 8061c6a:	1884      	adds	r4, r0, r2
 8061c6c:	603c      	str	r4, [r7, #0]
 8061c6e:	eb41 0303 	adc.w	r3, r1, r3
 8061c72:	607b      	str	r3, [r7, #4]
 8061c74:	e9d7 3400 	ldrd	r3, r4, [r7]
 8061c78:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8061c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8061c7e:	4618      	mov	r0, r3
 8061c80:	3770      	adds	r7, #112	; 0x70
 8061c82:	46bd      	mov	sp, r7
 8061c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08061c88 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8061c88:	b480      	push	{r7}
 8061c8a:	b087      	sub	sp, #28
 8061c8c:	af00      	add	r7, sp, #0
 8061c8e:	60f8      	str	r0, [r7, #12]
 8061c90:	60b9      	str	r1, [r7, #8]
 8061c92:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8061c94:	687b      	ldr	r3, [r7, #4]
 8061c96:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8061c9a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8061c9c:	68bb      	ldr	r3, [r7, #8]
 8061c9e:	039a      	lsls	r2, r3, #14
 8061ca0:	68fb      	ldr	r3, [r7, #12]
 8061ca2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8061ca6:	051b      	lsls	r3, r3, #20
 8061ca8:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8061caa:	68fb      	ldr	r3, [r7, #12]
 8061cac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8061cb0:	4619      	mov	r1, r3
 8061cb2:	697b      	ldr	r3, [r7, #20]
 8061cb4:	fb03 f301 	mul.w	r3, r3, r1
 8061cb8:	1ad3      	subs	r3, r2, r3
 8061cba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8061cbe:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8061cc0:	68fa      	ldr	r2, [r7, #12]
 8061cc2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8061cc6:	4611      	mov	r1, r2
 8061cc8:	697a      	ldr	r2, [r7, #20]
 8061cca:	fb02 f201 	mul.w	r2, r2, r1
 8061cce:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8061cd0:	68f9      	ldr	r1, [r7, #12]
 8061cd2:	7f09      	ldrb	r1, [r1, #28]
 8061cd4:	4608      	mov	r0, r1
 8061cd6:	6979      	ldr	r1, [r7, #20]
 8061cd8:	fb01 f100 	mul.w	r1, r1, r0
 8061cdc:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8061cde:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8061ce2:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8061ce6:	1292      	asrs	r2, r2, #10
 8061ce8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8061cec:	68f9      	ldr	r1, [r7, #12]
 8061cee:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8061cf2:	fb01 f202 	mul.w	r2, r1, r2
 8061cf6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8061cfa:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8061cfc:	fb02 f303 	mul.w	r3, r2, r3
 8061d00:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8061d02:	697b      	ldr	r3, [r7, #20]
 8061d04:	13db      	asrs	r3, r3, #15
 8061d06:	697a      	ldr	r2, [r7, #20]
 8061d08:	13d2      	asrs	r2, r2, #15
 8061d0a:	fb02 f303 	mul.w	r3, r2, r3
 8061d0e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8061d10:	68fa      	ldr	r2, [r7, #12]
 8061d12:	7e12      	ldrb	r2, [r2, #24]
 8061d14:	fb02 f303 	mul.w	r3, r2, r3
 8061d18:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8061d1a:	697a      	ldr	r2, [r7, #20]
 8061d1c:	1ad3      	subs	r3, r2, r3
 8061d1e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8061d20:	697b      	ldr	r3, [r7, #20]
 8061d22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8061d26:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8061d28:	697b      	ldr	r3, [r7, #20]
 8061d2a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8061d2e:	bfa8      	it	ge
 8061d30:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8061d34:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8061d36:	697b      	ldr	r3, [r7, #20]
 8061d38:	131b      	asrs	r3, r3, #12
}
 8061d3a:	4618      	mov	r0, r3
 8061d3c:	371c      	adds	r7, #28
 8061d3e:	46bd      	mov	sp, r7
 8061d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061d44:	4770      	bx	lr

08061d46 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8061d46:	b580      	push	{r7, lr}
 8061d48:	b08c      	sub	sp, #48	; 0x30
 8061d4a:	af00      	add	r7, sp, #0
 8061d4c:	60f8      	str	r0, [r7, #12]
 8061d4e:	60b9      	str	r1, [r7, #8]
 8061d50:	607a      	str	r2, [r7, #4]
 8061d52:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8061d54:	68fb      	ldr	r3, [r7, #12]
 8061d56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8061d5a:	2b60      	cmp	r3, #96	; 0x60
 8061d5c:	d007      	beq.n	8061d6e <bmp280_read_fixed+0x28>
		if (humidity)
 8061d5e:	683b      	ldr	r3, [r7, #0]
 8061d60:	2b00      	cmp	r3, #0
 8061d62:	d002      	beq.n	8061d6a <bmp280_read_fixed+0x24>
			*humidity = 0;
 8061d64:	683b      	ldr	r3, [r7, #0]
 8061d66:	2200      	movs	r2, #0
 8061d68:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8061d6a:	2300      	movs	r3, #0
 8061d6c:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8061d6e:	683b      	ldr	r3, [r7, #0]
 8061d70:	2b00      	cmp	r3, #0
 8061d72:	d001      	beq.n	8061d78 <bmp280_read_fixed+0x32>
 8061d74:	2308      	movs	r3, #8
 8061d76:	e000      	b.n	8061d7a <bmp280_read_fixed+0x34>
 8061d78:	2306      	movs	r3, #6
 8061d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8061d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8061d7e:	b2db      	uxtb	r3, r3
 8061d80:	f107 0218 	add.w	r2, r7, #24
 8061d84:	21f7      	movs	r1, #247	; 0xf7
 8061d86:	68f8      	ldr	r0, [r7, #12]
 8061d88:	f7ff fba5 	bl	80614d6 <read_data>
 8061d8c:	4603      	mov	r3, r0
 8061d8e:	2b00      	cmp	r3, #0
 8061d90:	d001      	beq.n	8061d96 <bmp280_read_fixed+0x50>
		return false;
 8061d92:	2300      	movs	r3, #0
 8061d94:	e038      	b.n	8061e08 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8061d96:	7e3b      	ldrb	r3, [r7, #24]
 8061d98:	031a      	lsls	r2, r3, #12
 8061d9a:	7e7b      	ldrb	r3, [r7, #25]
 8061d9c:	011b      	lsls	r3, r3, #4
 8061d9e:	4313      	orrs	r3, r2
 8061da0:	7eba      	ldrb	r2, [r7, #26]
 8061da2:	0912      	lsrs	r2, r2, #4
 8061da4:	b2d2      	uxtb	r2, r2
 8061da6:	4313      	orrs	r3, r2
 8061da8:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8061daa:	7efb      	ldrb	r3, [r7, #27]
 8061dac:	031a      	lsls	r2, r3, #12
 8061dae:	7f3b      	ldrb	r3, [r7, #28]
 8061db0:	011b      	lsls	r3, r3, #4
 8061db2:	4313      	orrs	r3, r2
 8061db4:	7f7a      	ldrb	r2, [r7, #29]
 8061db6:	0912      	lsrs	r2, r2, #4
 8061db8:	b2d2      	uxtb	r2, r2
 8061dba:	4313      	orrs	r3, r2
 8061dbc:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8061dbe:	f107 0314 	add.w	r3, r7, #20
 8061dc2:	461a      	mov	r2, r3
 8061dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8061dc6:	68f8      	ldr	r0, [r7, #12]
 8061dc8:	f7ff fd61 	bl	806188e <compensate_temperature>
 8061dcc:	4602      	mov	r2, r0
 8061dce:	68bb      	ldr	r3, [r7, #8]
 8061dd0:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8061dd2:	697b      	ldr	r3, [r7, #20]
 8061dd4:	461a      	mov	r2, r3
 8061dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8061dd8:	68f8      	ldr	r0, [r7, #12]
 8061dda:	f7ff fd91 	bl	8061900 <compensate_pressure>
 8061dde:	4602      	mov	r2, r0
 8061de0:	687b      	ldr	r3, [r7, #4]
 8061de2:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8061de4:	683b      	ldr	r3, [r7, #0]
 8061de6:	2b00      	cmp	r3, #0
 8061de8:	d00d      	beq.n	8061e06 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8061dea:	7fbb      	ldrb	r3, [r7, #30]
 8061dec:	021b      	lsls	r3, r3, #8
 8061dee:	7ffa      	ldrb	r2, [r7, #31]
 8061df0:	4313      	orrs	r3, r2
 8061df2:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8061df4:	697b      	ldr	r3, [r7, #20]
 8061df6:	461a      	mov	r2, r3
 8061df8:	6a39      	ldr	r1, [r7, #32]
 8061dfa:	68f8      	ldr	r0, [r7, #12]
 8061dfc:	f7ff ff44 	bl	8061c88 <compensate_humidity>
 8061e00:	4602      	mov	r2, r0
 8061e02:	683b      	ldr	r3, [r7, #0]
 8061e04:	601a      	str	r2, [r3, #0]
	}

	return true;
 8061e06:	2301      	movs	r3, #1
}
 8061e08:	4618      	mov	r0, r3
 8061e0a:	3730      	adds	r7, #48	; 0x30
 8061e0c:	46bd      	mov	sp, r7
 8061e0e:	bd80      	pop	{r7, pc}

08061e10 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8061e10:	b580      	push	{r7, lr}
 8061e12:	b088      	sub	sp, #32
 8061e14:	af00      	add	r7, sp, #0
 8061e16:	60f8      	str	r0, [r7, #12]
 8061e18:	60b9      	str	r1, [r7, #8]
 8061e1a:	607a      	str	r2, [r7, #4]
 8061e1c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8061e1e:	683b      	ldr	r3, [r7, #0]
 8061e20:	2b00      	cmp	r3, #0
 8061e22:	d002      	beq.n	8061e2a <bmp280_read_float+0x1a>
 8061e24:	f107 0314 	add.w	r3, r7, #20
 8061e28:	e000      	b.n	8061e2c <bmp280_read_float+0x1c>
 8061e2a:	2300      	movs	r3, #0
 8061e2c:	f107 0218 	add.w	r2, r7, #24
 8061e30:	f107 011c 	add.w	r1, r7, #28
 8061e34:	68f8      	ldr	r0, [r7, #12]
 8061e36:	f7ff ff86 	bl	8061d46 <bmp280_read_fixed>
 8061e3a:	4603      	mov	r3, r0
 8061e3c:	2b00      	cmp	r3, #0
 8061e3e:	d028      	beq.n	8061e92 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8061e40:	69fb      	ldr	r3, [r7, #28]
 8061e42:	ee07 3a90 	vmov	s15, r3
 8061e46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8061e4a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8061e9c <bmp280_read_float+0x8c>
 8061e4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061e52:	68bb      	ldr	r3, [r7, #8]
 8061e54:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8061e58:	69bb      	ldr	r3, [r7, #24]
 8061e5a:	ee07 3a90 	vmov	s15, r3
 8061e5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8061e62:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8061ea0 <bmp280_read_float+0x90>
 8061e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061e6a:	687b      	ldr	r3, [r7, #4]
 8061e6c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8061e70:	683b      	ldr	r3, [r7, #0]
 8061e72:	2b00      	cmp	r3, #0
 8061e74:	d00b      	beq.n	8061e8e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8061e76:	697b      	ldr	r3, [r7, #20]
 8061e78:	ee07 3a90 	vmov	s15, r3
 8061e7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8061e80:	eddf 6a08 	vldr	s13, [pc, #32]	; 8061ea4 <bmp280_read_float+0x94>
 8061e84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8061e88:	683b      	ldr	r3, [r7, #0]
 8061e8a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8061e8e:	2301      	movs	r3, #1
 8061e90:	e000      	b.n	8061e94 <bmp280_read_float+0x84>
	}

	return false;
 8061e92:	2300      	movs	r3, #0
}
 8061e94:	4618      	mov	r0, r3
 8061e96:	3720      	adds	r7, #32
 8061e98:	46bd      	mov	sp, r7
 8061e9a:	bd80      	pop	{r7, pc}
 8061e9c:	42c80000 	.word	0x42c80000
 8061ea0:	43800000 	.word	0x43800000
 8061ea4:	44800000 	.word	0x44800000

08061ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8061ea8:	b580      	push	{r7, lr}
 8061eaa:	b082      	sub	sp, #8
 8061eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8061eae:	2300      	movs	r3, #0
 8061eb0:	607b      	str	r3, [r7, #4]
 8061eb2:	4b0c      	ldr	r3, [pc, #48]	; (8061ee4 <MX_DMA_Init+0x3c>)
 8061eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061eb6:	4a0b      	ldr	r2, [pc, #44]	; (8061ee4 <MX_DMA_Init+0x3c>)
 8061eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8061ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8061ebe:	4b09      	ldr	r3, [pc, #36]	; (8061ee4 <MX_DMA_Init+0x3c>)
 8061ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8061ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8061ec6:	607b      	str	r3, [r7, #4]
 8061ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8061eca:	2200      	movs	r2, #0
 8061ecc:	2105      	movs	r1, #5
 8061ece:	2038      	movs	r0, #56	; 0x38
 8061ed0:	f002 fd24 	bl	806491c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8061ed4:	2038      	movs	r0, #56	; 0x38
 8061ed6:	f002 fd4d 	bl	8064974 <HAL_NVIC_EnableIRQ>

}
 8061eda:	bf00      	nop
 8061edc:	3708      	adds	r7, #8
 8061ede:	46bd      	mov	sp, r7
 8061ee0:	bd80      	pop	{r7, pc}
 8061ee2:	bf00      	nop
 8061ee4:	40023800 	.word	0x40023800

08061ee8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8061ee8:	b580      	push	{r7, lr}
 8061eea:	b082      	sub	sp, #8
 8061eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// initialize sd card now to check whether it is working
	// second arg is basically prefic of path to file
	FRESULT fres = f_mount(&FatFs, "", 1);
 8061eee:	2201      	movs	r2, #1
 8061ef0:	4983      	ldr	r1, [pc, #524]	; (8062100 <MX_FREERTOS_Init+0x218>)
 8061ef2:	4884      	ldr	r0, [pc, #528]	; (8062104 <MX_FREERTOS_Init+0x21c>)
 8061ef4:	f00b f806 	bl	806cf04 <f_mount>
 8061ef8:	4603      	mov	r3, r0
 8061efa:	71fb      	strb	r3, [r7, #7]
	if (fres != FR_OK) {
 8061efc:	79fb      	ldrb	r3, [r7, #7]
 8061efe:	2b00      	cmp	r3, #0
 8061f00:	d013      	beq.n	8061f2a <MX_FREERTOS_Init+0x42>
		printf("f_mount error (%i)\r\n", fres);
 8061f02:	79fb      	ldrb	r3, [r7, #7]
 8061f04:	461a      	mov	r2, r3
 8061f06:	4980      	ldr	r1, [pc, #512]	; (8062108 <MX_FREERTOS_Init+0x220>)
 8061f08:	4880      	ldr	r0, [pc, #512]	; (806210c <MX_FREERTOS_Init+0x224>)
 8061f0a:	f011 fadd 	bl	80734c8 <siprintf>
 8061f0e:	487f      	ldr	r0, [pc, #508]	; (806210c <MX_FREERTOS_Init+0x224>)
 8061f10:	f7fe f970 	bl	80601f4 <strlen>
 8061f14:	4603      	mov	r3, r0
 8061f16:	b29a      	uxth	r2, r3
 8061f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8061f1c:	497b      	ldr	r1, [pc, #492]	; (806210c <MX_FREERTOS_Init+0x224>)
 8061f1e:	487c      	ldr	r0, [pc, #496]	; (8062110 <MX_FREERTOS_Init+0x228>)
 8061f20:	f007 fc3e 	bl	80697a0 <HAL_UART_Transmit>
		Error_Handler();
 8061f24:	f000 fffc 	bl	8062f20 <Error_Handler>
 8061f28:	e00e      	b.n	8061f48 <MX_FREERTOS_Init+0x60>
	} else {
		printf("SD card mounted\n");
 8061f2a:	497a      	ldr	r1, [pc, #488]	; (8062114 <MX_FREERTOS_Init+0x22c>)
 8061f2c:	4877      	ldr	r0, [pc, #476]	; (806210c <MX_FREERTOS_Init+0x224>)
 8061f2e:	f011 facb 	bl	80734c8 <siprintf>
 8061f32:	4876      	ldr	r0, [pc, #472]	; (806210c <MX_FREERTOS_Init+0x224>)
 8061f34:	f7fe f95e 	bl	80601f4 <strlen>
 8061f38:	4603      	mov	r3, r0
 8061f3a:	b29a      	uxth	r2, r3
 8061f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8061f40:	4972      	ldr	r1, [pc, #456]	; (806210c <MX_FREERTOS_Init+0x224>)
 8061f42:	4873      	ldr	r0, [pc, #460]	; (8062110 <MX_FREERTOS_Init+0x228>)
 8061f44:	f007 fc2c 	bl	80697a0 <HAL_UART_Transmit>
	}
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  telemetryFileMutexHandle = osMutexNew(&telemetryFileMutex_attributes);
 8061f48:	4873      	ldr	r0, [pc, #460]	; (8062118 <MX_FREERTOS_Init+0x230>)
 8061f4a:	f00c fa87 	bl	806e45c <osMutexNew>
 8061f4e:	4603      	mov	r3, r0
 8061f50:	4a72      	ldr	r2, [pc, #456]	; (806211c <MX_FREERTOS_Init+0x234>)
 8061f52:	6013      	str	r3, [r2, #0]
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 8061f54:	4872      	ldr	r0, [pc, #456]	; (8062120 <MX_FREERTOS_Init+0x238>)
 8061f56:	f00c fa81 	bl	806e45c <osMutexNew>
 8061f5a:	4603      	mov	r3, r0
 8061f5c:	4a71      	ldr	r2, [pc, #452]	; (8062124 <MX_FREERTOS_Init+0x23c>)
 8061f5e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txThreadSem */
  txThreadSemHandle = osSemaphoreNew(1, 1, &txThreadSem_attributes);
 8061f60:	4a71      	ldr	r2, [pc, #452]	; (8062128 <MX_FREERTOS_Init+0x240>)
 8061f62:	2101      	movs	r1, #1
 8061f64:	2001      	movs	r0, #1
 8061f66:	f00c fb87 	bl	806e678 <osSemaphoreNew>
 8061f6a:	4603      	mov	r3, r0
 8061f6c:	4a6f      	ldr	r2, [pc, #444]	; (806212c <MX_FREERTOS_Init+0x244>)
 8061f6e:	6013      	str	r3, [r2, #0]

  /* creation of rxThreadSem */
  rxThreadSemHandle = osSemaphoreNew(1, 1, &rxThreadSem_attributes);
 8061f70:	4a6f      	ldr	r2, [pc, #444]	; (8062130 <MX_FREERTOS_Init+0x248>)
 8061f72:	2101      	movs	r1, #1
 8061f74:	2001      	movs	r0, #1
 8061f76:	f00c fb7f 	bl	806e678 <osSemaphoreNew>
 8061f7a:	4603      	mov	r3, r0
 8061f7c:	4a6d      	ldr	r2, [pc, #436]	; (8062134 <MX_FREERTOS_Init+0x24c>)
 8061f7e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreAcquire(txThreadSemHandle, 0);
 8061f80:	4b6a      	ldr	r3, [pc, #424]	; (806212c <MX_FREERTOS_Init+0x244>)
 8061f82:	681b      	ldr	r3, [r3, #0]
 8061f84:	2100      	movs	r1, #0
 8061f86:	4618      	mov	r0, r3
 8061f88:	f00c fc00 	bl	806e78c <osSemaphoreAcquire>
  osSemaphoreAcquire(rxThreadSemHandle, 0);
 8061f8c:	4b69      	ldr	r3, [pc, #420]	; (8062134 <MX_FREERTOS_Init+0x24c>)
 8061f8e:	681b      	ldr	r3, [r3, #0]
 8061f90:	2100      	movs	r1, #0
 8061f92:	4618      	mov	r0, r3
 8061f94:	f00c fbfa 	bl	806e78c <osSemaphoreAcquire>
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of accTimer */
  accTimerHandle = osTimerNew(accTimerCallback, osTimerPeriodic, NULL, &accTimer_attributes);
 8061f98:	4b67      	ldr	r3, [pc, #412]	; (8062138 <MX_FREERTOS_Init+0x250>)
 8061f9a:	2200      	movs	r2, #0
 8061f9c:	2101      	movs	r1, #1
 8061f9e:	4867      	ldr	r0, [pc, #412]	; (806213c <MX_FREERTOS_Init+0x254>)
 8061fa0:	f00c f9b2 	bl	806e308 <osTimerNew>
 8061fa4:	4603      	mov	r3, r0
 8061fa6:	4a66      	ldr	r2, [pc, #408]	; (8062140 <MX_FREERTOS_Init+0x258>)
 8061fa8:	6013      	str	r3, [r2, #0]

  /* creation of temperatureTimer */
  temperatureTimerHandle = osTimerNew(temperatureTimerCallback, osTimerPeriodic, NULL, &temperatureTimer_attributes);
 8061faa:	4b66      	ldr	r3, [pc, #408]	; (8062144 <MX_FREERTOS_Init+0x25c>)
 8061fac:	2200      	movs	r2, #0
 8061fae:	2101      	movs	r1, #1
 8061fb0:	4865      	ldr	r0, [pc, #404]	; (8062148 <MX_FREERTOS_Init+0x260>)
 8061fb2:	f00c f9a9 	bl	806e308 <osTimerNew>
 8061fb6:	4603      	mov	r3, r0
 8061fb8:	4a64      	ldr	r2, [pc, #400]	; (806214c <MX_FREERTOS_Init+0x264>)
 8061fba:	6013      	str	r3, [r2, #0]

  /* creation of gpsTimer */
  gpsTimerHandle = osTimerNew(gpsTimerCallback, osTimerPeriodic, NULL, &gpsTimer_attributes);
 8061fbc:	4b64      	ldr	r3, [pc, #400]	; (8062150 <MX_FREERTOS_Init+0x268>)
 8061fbe:	2200      	movs	r2, #0
 8061fc0:	2101      	movs	r1, #1
 8061fc2:	4864      	ldr	r0, [pc, #400]	; (8062154 <MX_FREERTOS_Init+0x26c>)
 8061fc4:	f00c f9a0 	bl	806e308 <osTimerNew>
 8061fc8:	4603      	mov	r3, r0
 8061fca:	4a63      	ldr	r2, [pc, #396]	; (8062158 <MX_FREERTOS_Init+0x270>)
 8061fcc:	6013      	str	r3, [r2, #0]

  /* creation of lightTimer */
  lightTimerHandle = osTimerNew(lightTimerCallback, osTimerPeriodic, NULL, &lightTimer_attributes);
 8061fce:	4b63      	ldr	r3, [pc, #396]	; (806215c <MX_FREERTOS_Init+0x274>)
 8061fd0:	2200      	movs	r2, #0
 8061fd2:	2101      	movs	r1, #1
 8061fd4:	4862      	ldr	r0, [pc, #392]	; (8062160 <MX_FREERTOS_Init+0x278>)
 8061fd6:	f00c f997 	bl	806e308 <osTimerNew>
 8061fda:	4603      	mov	r3, r0
 8061fdc:	4a61      	ldr	r2, [pc, #388]	; (8062164 <MX_FREERTOS_Init+0x27c>)
 8061fde:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  if (accTimerHandle != NULL)  {
 8061fe0:	4b57      	ldr	r3, [pc, #348]	; (8062140 <MX_FREERTOS_Init+0x258>)
 8061fe2:	681b      	ldr	r3, [r3, #0]
 8061fe4:	2b00      	cmp	r3, #0
 8061fe6:	d010      	beq.n	806200a <MX_FREERTOS_Init+0x122>
      status = osTimerStart(accTimerHandle, 10000U);       // start timer
 8061fe8:	4b55      	ldr	r3, [pc, #340]	; (8062140 <MX_FREERTOS_Init+0x258>)
 8061fea:	681b      	ldr	r3, [r3, #0]
 8061fec:	f242 7110 	movw	r1, #10000	; 0x2710
 8061ff0:	4618      	mov	r0, r3
 8061ff2:	f00c fa05 	bl	806e400 <osTimerStart>
 8061ff6:	4603      	mov	r3, r0
 8061ff8:	4a5b      	ldr	r2, [pc, #364]	; (8062168 <MX_FREERTOS_Init+0x280>)
 8061ffa:	6013      	str	r3, [r2, #0]
      if (status != osOK) {
 8061ffc:	4b5a      	ldr	r3, [pc, #360]	; (8062168 <MX_FREERTOS_Init+0x280>)
 8061ffe:	681b      	ldr	r3, [r3, #0]
 8062000:	2b00      	cmp	r3, #0
 8062002:	d004      	beq.n	806200e <MX_FREERTOS_Init+0x126>
        // Timer could not be started
    	Error_Handler();
 8062004:	f000 ff8c 	bl	8062f20 <Error_Handler>
 8062008:	e001      	b.n	806200e <MX_FREERTOS_Init+0x126>
      }
  } else {
	  Error_Handler();
 806200a:	f000 ff89 	bl	8062f20 <Error_Handler>
  }

  if (temperatureTimerHandle != NULL)  {
 806200e:	4b4f      	ldr	r3, [pc, #316]	; (806214c <MX_FREERTOS_Init+0x264>)
 8062010:	681b      	ldr	r3, [r3, #0]
 8062012:	2b00      	cmp	r3, #0
 8062014:	d010      	beq.n	8062038 <MX_FREERTOS_Init+0x150>
        status = osTimerStart(temperatureTimerHandle, 10000U);       // start timer
 8062016:	4b4d      	ldr	r3, [pc, #308]	; (806214c <MX_FREERTOS_Init+0x264>)
 8062018:	681b      	ldr	r3, [r3, #0]
 806201a:	f242 7110 	movw	r1, #10000	; 0x2710
 806201e:	4618      	mov	r0, r3
 8062020:	f00c f9ee 	bl	806e400 <osTimerStart>
 8062024:	4603      	mov	r3, r0
 8062026:	4a50      	ldr	r2, [pc, #320]	; (8062168 <MX_FREERTOS_Init+0x280>)
 8062028:	6013      	str	r3, [r2, #0]
        if (status != osOK) {
 806202a:	4b4f      	ldr	r3, [pc, #316]	; (8062168 <MX_FREERTOS_Init+0x280>)
 806202c:	681b      	ldr	r3, [r3, #0]
 806202e:	2b00      	cmp	r3, #0
 8062030:	d004      	beq.n	806203c <MX_FREERTOS_Init+0x154>
          // Timer could not be started
      	Error_Handler();
 8062032:	f000 ff75 	bl	8062f20 <Error_Handler>
 8062036:	e001      	b.n	806203c <MX_FREERTOS_Init+0x154>
        }
    } else {
  	  Error_Handler();
 8062038:	f000 ff72 	bl	8062f20 <Error_Handler>
    }

  if (gpsTimerHandle != NULL)  {
 806203c:	4b46      	ldr	r3, [pc, #280]	; (8062158 <MX_FREERTOS_Init+0x270>)
 806203e:	681b      	ldr	r3, [r3, #0]
 8062040:	2b00      	cmp	r3, #0
 8062042:	d010      	beq.n	8062066 <MX_FREERTOS_Init+0x17e>
          status = osTimerStart(gpsTimerHandle, 10000U);       // start timer
 8062044:	4b44      	ldr	r3, [pc, #272]	; (8062158 <MX_FREERTOS_Init+0x270>)
 8062046:	681b      	ldr	r3, [r3, #0]
 8062048:	f242 7110 	movw	r1, #10000	; 0x2710
 806204c:	4618      	mov	r0, r3
 806204e:	f00c f9d7 	bl	806e400 <osTimerStart>
 8062052:	4603      	mov	r3, r0
 8062054:	4a44      	ldr	r2, [pc, #272]	; (8062168 <MX_FREERTOS_Init+0x280>)
 8062056:	6013      	str	r3, [r2, #0]
          if (status != osOK) {
 8062058:	4b43      	ldr	r3, [pc, #268]	; (8062168 <MX_FREERTOS_Init+0x280>)
 806205a:	681b      	ldr	r3, [r3, #0]
 806205c:	2b00      	cmp	r3, #0
 806205e:	d004      	beq.n	806206a <MX_FREERTOS_Init+0x182>
            // Timer could not be started
        	Error_Handler();
 8062060:	f000 ff5e 	bl	8062f20 <Error_Handler>
 8062064:	e001      	b.n	806206a <MX_FREERTOS_Init+0x182>
          }
      } else {
    	  Error_Handler();
 8062066:	f000 ff5b 	bl	8062f20 <Error_Handler>
      }

  if (lightTimerHandle != NULL)  {
 806206a:	4b3e      	ldr	r3, [pc, #248]	; (8062164 <MX_FREERTOS_Init+0x27c>)
 806206c:	681b      	ldr	r3, [r3, #0]
 806206e:	2b00      	cmp	r3, #0
 8062070:	d010      	beq.n	8062094 <MX_FREERTOS_Init+0x1ac>
      status = osTimerStart(lightTimerHandle, 10000U);       // start timer
 8062072:	4b3c      	ldr	r3, [pc, #240]	; (8062164 <MX_FREERTOS_Init+0x27c>)
 8062074:	681b      	ldr	r3, [r3, #0]
 8062076:	f242 7110 	movw	r1, #10000	; 0x2710
 806207a:	4618      	mov	r0, r3
 806207c:	f00c f9c0 	bl	806e400 <osTimerStart>
 8062080:	4603      	mov	r3, r0
 8062082:	4a39      	ldr	r2, [pc, #228]	; (8062168 <MX_FREERTOS_Init+0x280>)
 8062084:	6013      	str	r3, [r2, #0]
      if (status != osOK) {
 8062086:	4b38      	ldr	r3, [pc, #224]	; (8062168 <MX_FREERTOS_Init+0x280>)
 8062088:	681b      	ldr	r3, [r3, #0]
 806208a:	2b00      	cmp	r3, #0
 806208c:	d004      	beq.n	8062098 <MX_FREERTOS_Init+0x1b0>
          // Timer could not be started
          Error_Handler();
 806208e:	f000 ff47 	bl	8062f20 <Error_Handler>
 8062092:	e001      	b.n	8062098 <MX_FREERTOS_Init+0x1b0>
      }
   } else {
      Error_Handler();
 8062094:	f000 ff44 	bl	8062f20 <Error_Handler>
   }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  telemetryQueueHandle = osMessageQueueNew(16, sizeof(TelemetryBase), &telemetryQueue_attributes);
 8062098:	4a34      	ldr	r2, [pc, #208]	; (806216c <MX_FREERTOS_Init+0x284>)
 806209a:	2138      	movs	r1, #56	; 0x38
 806209c:	2010      	movs	r0, #16
 806209e:	f00c fc2f 	bl	806e900 <osMessageQueueNew>
 80620a2:	4603      	mov	r3, r0
 80620a4:	4a32      	ldr	r2, [pc, #200]	; (8062170 <MX_FREERTOS_Init+0x288>)
 80620a6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80620a8:	4a32      	ldr	r2, [pc, #200]	; (8062174 <MX_FREERTOS_Init+0x28c>)
 80620aa:	2100      	movs	r1, #0
 80620ac:	4832      	ldr	r0, [pc, #200]	; (8062178 <MX_FREERTOS_Init+0x290>)
 80620ae:	f00b ff3b 	bl	806df28 <osThreadNew>
 80620b2:	4603      	mov	r3, r0
 80620b4:	4a31      	ldr	r2, [pc, #196]	; (806217c <MX_FREERTOS_Init+0x294>)
 80620b6:	6013      	str	r3, [r2, #0]

  /* creation of rxDataThread */
  rxDataThreadHandle = osThreadNew(startRxDataThread, NULL, &rxDataThread_attributes);
 80620b8:	4a31      	ldr	r2, [pc, #196]	; (8062180 <MX_FREERTOS_Init+0x298>)
 80620ba:	2100      	movs	r1, #0
 80620bc:	4831      	ldr	r0, [pc, #196]	; (8062184 <MX_FREERTOS_Init+0x29c>)
 80620be:	f00b ff33 	bl	806df28 <osThreadNew>
 80620c2:	4603      	mov	r3, r0
 80620c4:	4a30      	ldr	r2, [pc, #192]	; (8062188 <MX_FREERTOS_Init+0x2a0>)
 80620c6:	6013      	str	r3, [r2, #0]

  /* creation of txDataThread */
  txDataThreadHandle = osThreadNew(startTxDataThread, NULL, &txDataThread_attributes);
 80620c8:	4a30      	ldr	r2, [pc, #192]	; (806218c <MX_FREERTOS_Init+0x2a4>)
 80620ca:	2100      	movs	r1, #0
 80620cc:	4830      	ldr	r0, [pc, #192]	; (8062190 <MX_FREERTOS_Init+0x2a8>)
 80620ce:	f00b ff2b 	bl	806df28 <osThreadNew>
 80620d2:	4603      	mov	r3, r0
 80620d4:	4a2f      	ldr	r2, [pc, #188]	; (8062194 <MX_FREERTOS_Init+0x2ac>)
 80620d6:	6013      	str	r3, [r2, #0]

  /* creation of telemetryThread */
  telemetryThreadHandle = osThreadNew(startTelemetryThread, NULL, &telemetryThread_attributes);
 80620d8:	4a2f      	ldr	r2, [pc, #188]	; (8062198 <MX_FREERTOS_Init+0x2b0>)
 80620da:	2100      	movs	r1, #0
 80620dc:	482f      	ldr	r0, [pc, #188]	; (806219c <MX_FREERTOS_Init+0x2b4>)
 80620de:	f00b ff23 	bl	806df28 <osThreadNew>
 80620e2:	4603      	mov	r3, r0
 80620e4:	4a2e      	ldr	r2, [pc, #184]	; (80621a0 <MX_FREERTOS_Init+0x2b8>)
 80620e6:	6013      	str	r3, [r2, #0]

  /* creation of peripheryThread */
  peripheryThreadHandle = osThreadNew(startPeripheryThread, NULL, &peripheryThread_attributes);
 80620e8:	4a2e      	ldr	r2, [pc, #184]	; (80621a4 <MX_FREERTOS_Init+0x2bc>)
 80620ea:	2100      	movs	r1, #0
 80620ec:	482e      	ldr	r0, [pc, #184]	; (80621a8 <MX_FREERTOS_Init+0x2c0>)
 80620ee:	f00b ff1b 	bl	806df28 <osThreadNew>
 80620f2:	4603      	mov	r3, r0
 80620f4:	4a2d      	ldr	r2, [pc, #180]	; (80621ac <MX_FREERTOS_Init+0x2c4>)
 80620f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80620f8:	bf00      	nop
 80620fa:	3708      	adds	r7, #8
 80620fc:	46bd      	mov	sp, r7
 80620fe:	bd80      	pop	{r7, pc}
 8062100:	08076ec0 	.word	0x08076ec0
 8062104:	20004ff4 	.word	0x20004ff4
 8062108:	08076ec4 	.word	0x08076ec4
 806210c:	2000021c 	.word	0x2000021c
 8062110:	2000582c 	.word	0x2000582c
 8062114:	08076edc 	.word	0x08076edc
 8062118:	0807749c 	.word	0x0807749c
 806211c:	2000522c 	.word	0x2000522c
 8062120:	080774ac 	.word	0x080774ac
 8062124:	20005480 	.word	0x20005480
 8062128:	08077464 	.word	0x08077464
 806212c:	20005478 	.word	0x20005478
 8062130:	08077474 	.word	0x08077474
 8062134:	20005228 	.word	0x20005228
 8062138:	08077424 	.word	0x08077424
 806213c:	0806274d 	.word	0x0806274d
 8062140:	20005230 	.word	0x20005230
 8062144:	08077434 	.word	0x08077434
 8062148:	0806276d 	.word	0x0806276d
 806214c:	20005240 	.word	0x20005240
 8062150:	08077444 	.word	0x08077444
 8062154:	0806278d 	.word	0x0806278d
 8062158:	20005474 	.word	0x20005474
 806215c:	08077454 	.word	0x08077454
 8062160:	080627b1 	.word	0x080627b1
 8062164:	20005488 	.word	0x20005488
 8062168:	200056bc 	.word	0x200056bc
 806216c:	08077484 	.word	0x08077484
 8062170:	2000523c 	.word	0x2000523c
 8062174:	08077370 	.word	0x08077370
 8062178:	080621b1 	.word	0x080621b1
 806217c:	20004ff0 	.word	0x20004ff0
 8062180:	08077394 	.word	0x08077394
 8062184:	080621c1 	.word	0x080621c1
 8062188:	20005234 	.word	0x20005234
 806218c:	080773b8 	.word	0x080773b8
 8062190:	080623a5 	.word	0x080623a5
 8062194:	20005484 	.word	0x20005484
 8062198:	080773dc 	.word	0x080773dc
 806219c:	08062489 	.word	0x08062489
 80621a0:	20005238 	.word	0x20005238
 80621a4:	08077400 	.word	0x08077400
 80621a8:	08062595 	.word	0x08062595
 80621ac:	2000547c 	.word	0x2000547c

080621b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80621b0:	b580      	push	{r7, lr}
 80621b2:	b082      	sub	sp, #8
 80621b4:	af00      	add	r7, sp, #0
 80621b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80621b8:	2001      	movs	r0, #1
 80621ba:	f00c f875 	bl	806e2a8 <osDelay>
 80621be:	e7fb      	b.n	80621b8 <StartDefaultTask+0x8>

080621c0 <startRxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRxDataThread */
void startRxDataThread(void *argument)
{
 80621c0:	b580      	push	{r7, lr}
 80621c2:	b08a      	sub	sp, #40	; 0x28
 80621c4:	af00      	add	r7, sp, #0
 80621c6:	6078      	str	r0, [r7, #4]
	 // thread is with the highest priority, as after the signal about new firmware
	 // has come, we are not interested in data anymore
	FRESULT wr;
	UINT bytesWrote;
	int cmpRes;
	int safeToBoot = 0;
 80621c8:	2300      	movs	r3, #0
 80621ca:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t firmwareChunk[16];
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 80621cc:	4b67      	ldr	r3, [pc, #412]	; (806236c <startRxDataThread+0x1ac>)
 80621ce:	681b      	ldr	r3, [r3, #0]
 80621d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80621d4:	4618      	mov	r0, r3
 80621d6:	f00c fad9 	bl	806e78c <osSemaphoreAcquire>


	  printf("Firmware to be uploaded...\n");
 80621da:	4965      	ldr	r1, [pc, #404]	; (8062370 <startRxDataThread+0x1b0>)
 80621dc:	4865      	ldr	r0, [pc, #404]	; (8062374 <startRxDataThread+0x1b4>)
 80621de:	f011 f973 	bl	80734c8 <siprintf>
 80621e2:	4864      	ldr	r0, [pc, #400]	; (8062374 <startRxDataThread+0x1b4>)
 80621e4:	f7fe f806 	bl	80601f4 <strlen>
 80621e8:	4603      	mov	r3, r0
 80621ea:	b29a      	uxth	r2, r3
 80621ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80621f0:	4960      	ldr	r1, [pc, #384]	; (8062374 <startRxDataThread+0x1b4>)
 80621f2:	4861      	ldr	r0, [pc, #388]	; (8062378 <startRxDataThread+0x1b8>)
 80621f4:	f007 fad4 	bl	80697a0 <HAL_UART_Transmit>

	  status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80621f8:	4b60      	ldr	r3, [pc, #384]	; (806237c <startRxDataThread+0x1bc>)
 80621fa:	681b      	ldr	r3, [r3, #0]
 80621fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8062200:	4618      	mov	r0, r3
 8062202:	f00c f9b1 	bl	806e568 <osMutexAcquire>
 8062206:	4603      	mov	r3, r0
 8062208:	4a5d      	ldr	r2, [pc, #372]	; (8062380 <startRxDataThread+0x1c0>)
 806220a:	6013      	str	r3, [r2, #0]
	  if (status != osOK) {
 806220c:	4b5c      	ldr	r3, [pc, #368]	; (8062380 <startRxDataThread+0x1c0>)
 806220e:	681b      	ldr	r3, [r3, #0]
 8062210:	2b00      	cmp	r3, #0
 8062212:	d00f      	beq.n	8062234 <startRxDataThread+0x74>
		  printf("Could not take mutex for writing into file");
 8062214:	495b      	ldr	r1, [pc, #364]	; (8062384 <startRxDataThread+0x1c4>)
 8062216:	4857      	ldr	r0, [pc, #348]	; (8062374 <startRxDataThread+0x1b4>)
 8062218:	f011 f956 	bl	80734c8 <siprintf>
 806221c:	4855      	ldr	r0, [pc, #340]	; (8062374 <startRxDataThread+0x1b4>)
 806221e:	f7fd ffe9 	bl	80601f4 <strlen>
 8062222:	4603      	mov	r3, r0
 8062224:	b29a      	uxth	r2, r3
 8062226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806222a:	4952      	ldr	r1, [pc, #328]	; (8062374 <startRxDataThread+0x1b4>)
 806222c:	4852      	ldr	r0, [pc, #328]	; (8062378 <startRxDataThread+0x1b8>)
 806222e:	f007 fab7 	bl	80697a0 <HAL_UART_Transmit>
 8062232:	e07b      	b.n	806232c <startRxDataThread+0x16c>
	  } else {
		  wr = f_open(&firmwareFile, "f.bin", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8062234:	221a      	movs	r2, #26
 8062236:	4954      	ldr	r1, [pc, #336]	; (8062388 <startRxDataThread+0x1c8>)
 8062238:	4854      	ldr	r0, [pc, #336]	; (806238c <startRxDataThread+0x1cc>)
 806223a:	f00a fec7 	bl	806cfcc <f_open>
 806223e:	4603      	mov	r3, r0
 8062240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  osMutexRelease(telemetryFileMutexHandle);
 8062244:	4b4d      	ldr	r3, [pc, #308]	; (806237c <startRxDataThread+0x1bc>)
 8062246:	681b      	ldr	r3, [r3, #0]
 8062248:	4618      	mov	r0, r3
 806224a:	f00c f9d8 	bl	806e5fe <osMutexRelease>

		  if(wr != FR_OK) {
 806224e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8062252:	2b00      	cmp	r3, #0
 8062254:	d012      	beq.n	806227c <startRxDataThread+0xbc>
			  printf("f_open error (%i)\n", wr);
 8062256:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 806225a:	461a      	mov	r2, r3
 806225c:	494c      	ldr	r1, [pc, #304]	; (8062390 <startRxDataThread+0x1d0>)
 806225e:	4845      	ldr	r0, [pc, #276]	; (8062374 <startRxDataThread+0x1b4>)
 8062260:	f011 f932 	bl	80734c8 <siprintf>
 8062264:	4843      	ldr	r0, [pc, #268]	; (8062374 <startRxDataThread+0x1b4>)
 8062266:	f7fd ffc5 	bl	80601f4 <strlen>
 806226a:	4603      	mov	r3, r0
 806226c:	b29a      	uxth	r2, r3
 806226e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062272:	4940      	ldr	r1, [pc, #256]	; (8062374 <startRxDataThread+0x1b4>)
 8062274:	4840      	ldr	r0, [pc, #256]	; (8062378 <startRxDataThread+0x1b8>)
 8062276:	f007 fa93 	bl	80697a0 <HAL_UART_Transmit>
 806227a:	e057      	b.n	806232c <startRxDataThread+0x16c>
		  } else {
			  for (;;) {
				  memset(firmwareChunk, 0, sizeof(firmwareChunk));
 806227c:	f107 0308 	add.w	r3, r7, #8
 8062280:	2210      	movs	r2, #16
 8062282:	2100      	movs	r1, #0
 8062284:	4618      	mov	r0, r3
 8062286:	f010 f9c2 	bl	807260e <memset>
				  HAL_UART_Receive(&huart2, firmwareChunk, 4, HAL_MAX_DELAY);
 806228a:	f107 0108 	add.w	r1, r7, #8
 806228e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062292:	2204      	movs	r2, #4
 8062294:	4838      	ldr	r0, [pc, #224]	; (8062378 <startRxDataThread+0x1b8>)
 8062296:	f007 fb15 	bl	80698c4 <HAL_UART_Receive>
				  cmpRes = strcmp(firmwareChunk, "$END");
 806229a:	f107 0308 	add.w	r3, r7, #8
 806229e:	493d      	ldr	r1, [pc, #244]	; (8062394 <startRxDataThread+0x1d4>)
 80622a0:	4618      	mov	r0, r3
 80622a2:	f7fd ff9d 	bl	80601e0 <strcmp>
 80622a6:	61f8      	str	r0, [r7, #28]
				  if (cmpRes == 0) {
 80622a8:	69fb      	ldr	r3, [r7, #28]
 80622aa:	2b00      	cmp	r3, #0
 80622ac:	d102      	bne.n	80622b4 <startRxDataThread+0xf4>
					  safeToBoot = 1;
 80622ae:	2301      	movs	r3, #1
 80622b0:	627b      	str	r3, [r7, #36]	; 0x24
					  break;
 80622b2:	e02c      	b.n	806230e <startRxDataThread+0x14e>
				  }

				  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80622b4:	4b31      	ldr	r3, [pc, #196]	; (806237c <startRxDataThread+0x1bc>)
 80622b6:	681b      	ldr	r3, [r3, #0]
 80622b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80622bc:	4618      	mov	r0, r3
 80622be:	f00c f953 	bl	806e568 <osMutexAcquire>
				  wr = f_write(&firmwareFile, firmwareChunk, 4, &bytesWrote);
 80622c2:	f107 0318 	add.w	r3, r7, #24
 80622c6:	f107 0108 	add.w	r1, r7, #8
 80622ca:	2204      	movs	r2, #4
 80622cc:	482f      	ldr	r0, [pc, #188]	; (806238c <startRxDataThread+0x1cc>)
 80622ce:	f00b f9b0 	bl	806d632 <f_write>
 80622d2:	4603      	mov	r3, r0
 80622d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				  osMutexRelease(telemetryFileMutexHandle);
 80622d8:	4b28      	ldr	r3, [pc, #160]	; (806237c <startRxDataThread+0x1bc>)
 80622da:	681b      	ldr	r3, [r3, #0]
 80622dc:	4618      	mov	r0, r3
 80622de:	f00c f98e 	bl	806e5fe <osMutexRelease>

				  if (wr != FR_OK) {
 80622e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80622e6:	2b00      	cmp	r3, #0
 80622e8:	d0c8      	beq.n	806227c <startRxDataThread+0xbc>
					  printf("[ERROR]: f_write firmware (%d)\n", wr);
 80622ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80622ee:	461a      	mov	r2, r3
 80622f0:	4929      	ldr	r1, [pc, #164]	; (8062398 <startRxDataThread+0x1d8>)
 80622f2:	4820      	ldr	r0, [pc, #128]	; (8062374 <startRxDataThread+0x1b4>)
 80622f4:	f011 f8e8 	bl	80734c8 <siprintf>
 80622f8:	481e      	ldr	r0, [pc, #120]	; (8062374 <startRxDataThread+0x1b4>)
 80622fa:	f7fd ff7b 	bl	80601f4 <strlen>
 80622fe:	4603      	mov	r3, r0
 8062300:	b29a      	uxth	r2, r3
 8062302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062306:	491b      	ldr	r1, [pc, #108]	; (8062374 <startRxDataThread+0x1b4>)
 8062308:	481b      	ldr	r0, [pc, #108]	; (8062378 <startRxDataThread+0x1b8>)
 806230a:	f007 fa49 	bl	80697a0 <HAL_UART_Transmit>
					  break;
				  }
			  }


			  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 806230e:	4b1b      	ldr	r3, [pc, #108]	; (806237c <startRxDataThread+0x1bc>)
 8062310:	681b      	ldr	r3, [r3, #0]
 8062312:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8062316:	4618      	mov	r0, r3
 8062318:	f00c f926 	bl	806e568 <osMutexAcquire>
			  f_close(&firmwareFile);
 806231c:	481b      	ldr	r0, [pc, #108]	; (806238c <startRxDataThread+0x1cc>)
 806231e:	f00b fbb5 	bl	806da8c <f_close>
			  osMutexRelease(telemetryFileMutexHandle);
 8062322:	4b16      	ldr	r3, [pc, #88]	; (806237c <startRxDataThread+0x1bc>)
 8062324:	681b      	ldr	r3, [r3, #0]
 8062326:	4618      	mov	r0, r3
 8062328:	f00c f969 	bl	806e5fe <osMutexRelease>
		  }
	  }

	 if (safeToBoot) {
 806232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806232e:	2b00      	cmp	r3, #0
 8062330:	d015      	beq.n	806235e <startRxDataThread+0x19e>
		 // toglle boot pin and software reset
		 HAL_PWR_EnableBkUpAccess();
 8062332:	f005 f875 	bl	8067420 <HAL_PWR_EnableBkUpAccess>
		 HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 1);
 8062336:	2201      	movs	r2, #1
 8062338:	2101      	movs	r1, #1
 806233a:	4818      	ldr	r0, [pc, #96]	; (806239c <startRxDataThread+0x1dc>)
 806233c:	f006 f9e4 	bl	8068708 <HAL_RTCEx_BKUPWrite>
		 HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, 0);
 8062340:	2200      	movs	r2, #0
 8062342:	2102      	movs	r1, #2
 8062344:	4815      	ldr	r0, [pc, #84]	; (806239c <startRxDataThread+0x1dc>)
 8062346:	f006 f9df 	bl	8068708 <HAL_RTCEx_BKUPWrite>
		 HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, 1);
 806234a:	2201      	movs	r2, #1
 806234c:	2103      	movs	r1, #3
 806234e:	4813      	ldr	r0, [pc, #76]	; (806239c <startRxDataThread+0x1dc>)
 8062350:	f006 f9da 	bl	8068708 <HAL_RTCEx_BKUPWrite>
		 HAL_PWR_DisableBkUpAccess();
 8062354:	f005 f878 	bl	8067448 <HAL_PWR_DisableBkUpAccess>

		 HAL_NVIC_SystemReset();
 8062358:	f002 fb24 	bl	80649a4 <HAL_NVIC_SystemReset>
 806235c:	e736      	b.n	80621cc <startRxDataThread+0xc>
	 } else {
		 // try one more time
		 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 806235e:	2201      	movs	r2, #1
 8062360:	490f      	ldr	r1, [pc, #60]	; (80623a0 <startRxDataThread+0x1e0>)
 8062362:	4805      	ldr	r0, [pc, #20]	; (8062378 <startRxDataThread+0x1b8>)
 8062364:	f007 fb50 	bl	8069a08 <HAL_UART_Receive_IT>
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 8062368:	e730      	b.n	80621cc <startRxDataThread+0xc>
 806236a:	bf00      	nop
 806236c:	20005228 	.word	0x20005228
 8062370:	08076ef0 	.word	0x08076ef0
 8062374:	2000021c 	.word	0x2000021c
 8062378:	2000582c 	.word	0x2000582c
 806237c:	2000522c 	.word	0x2000522c
 8062380:	200056bc 	.word	0x200056bc
 8062384:	08076f0c 	.word	0x08076f0c
 8062388:	08076f38 	.word	0x08076f38
 806238c:	2000548c 	.word	0x2000548c
 8062390:	08076f40 	.word	0x08076f40
 8062394:	08076f54 	.word	0x08076f54
 8062398:	08076f5c 	.word	0x08076f5c
 806239c:	20005714 	.word	0x20005714
 80623a0:	20004e30 	.word	0x20004e30

080623a4 <startTxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTxDataThread */
void startTxDataThread(void *argument)
{
 80623a4:	b580      	push	{r7, lr}
 80623a6:	b0a4      	sub	sp, #144	; 0x90
 80623a8:	af00      	add	r7, sp, #0
 80623aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTxDataThread */
	FRESULT rr = FR_OK;
 80623ac:	2300      	movs	r3, #0
 80623ae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	// TODO: get rid of magic constants
	BYTE rbuf[128] = {0};
 80623b2:	2300      	movs	r3, #0
 80623b4:	60fb      	str	r3, [r7, #12]
 80623b6:	f107 0310 	add.w	r3, r7, #16
 80623ba:	227c      	movs	r2, #124	; 0x7c
 80623bc:	2100      	movs	r1, #0
 80623be:	4618      	mov	r0, r3
 80623c0:	f010 f925 	bl	807260e <memset>
  {
	  if (rr != FR_OK) {
		  // printf("[ERROR]: reading : (%i)\n", rr);
	  }

	  osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 80623c4:	4b28      	ldr	r3, [pc, #160]	; (8062468 <startTxDataThread+0xc4>)
 80623c6:	681b      	ldr	r3, [r3, #0]
 80623c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80623cc:	4618      	mov	r0, r3
 80623ce:	f00c f9dd 	bl	806e78c <osSemaphoreAcquire>

	  // read from sd and write the info into uart (mock gprs)
	  osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80623d2:	4b26      	ldr	r3, [pc, #152]	; (806246c <startTxDataThread+0xc8>)
 80623d4:	681b      	ldr	r3, [r3, #0]
 80623d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80623da:	4618      	mov	r0, r3
 80623dc:	f00c f8c4 	bl	806e568 <osMutexAcquire>
	  rr = f_open(&telemetryFile, "write.txt", FA_WRITE | FA_READ | FA_OPEN_ALWAYS);
 80623e0:	2213      	movs	r2, #19
 80623e2:	4923      	ldr	r1, [pc, #140]	; (8062470 <startTxDataThread+0xcc>)
 80623e4:	4823      	ldr	r0, [pc, #140]	; (8062474 <startTxDataThread+0xd0>)
 80623e6:	f00a fdf1 	bl	806cfcc <f_open>
 80623ea:	4603      	mov	r3, r0
 80623ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  if(rr != FR_OK) {
 80623f0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80623f4:	2b00      	cmp	r3, #0
 80623f6:	d01c      	beq.n	8062432 <startTxDataThread+0x8e>
		  osMutexRelease(telemetryFileMutexHandle);
 80623f8:	4b1c      	ldr	r3, [pc, #112]	; (806246c <startTxDataThread+0xc8>)
 80623fa:	681b      	ldr	r3, [r3, #0]
 80623fc:	4618      	mov	r0, r3
 80623fe:	f00c f8fe 	bl	806e5fe <osMutexRelease>
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 8062402:	2201      	movs	r2, #1
 8062404:	491c      	ldr	r1, [pc, #112]	; (8062478 <startTxDataThread+0xd4>)
 8062406:	481d      	ldr	r0, [pc, #116]	; (806247c <startTxDataThread+0xd8>)
 8062408:	f007 fafe 	bl	8069a08 <HAL_UART_Receive_IT>
		  continue;
 806240c:	e02b      	b.n	8062466 <startTxDataThread+0xc2>
	  }

	  while (f_gets((TCHAR*)rbuf, sizeof(rbuf), &telemetryFile)) {
		  printf("[READ]: %s", rbuf);
 806240e:	f107 030c 	add.w	r3, r7, #12
 8062412:	461a      	mov	r2, r3
 8062414:	491a      	ldr	r1, [pc, #104]	; (8062480 <startTxDataThread+0xdc>)
 8062416:	481b      	ldr	r0, [pc, #108]	; (8062484 <startTxDataThread+0xe0>)
 8062418:	f011 f856 	bl	80734c8 <siprintf>
 806241c:	4819      	ldr	r0, [pc, #100]	; (8062484 <startTxDataThread+0xe0>)
 806241e:	f7fd fee9 	bl	80601f4 <strlen>
 8062422:	4603      	mov	r3, r0
 8062424:	b29a      	uxth	r2, r3
 8062426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806242a:	4916      	ldr	r1, [pc, #88]	; (8062484 <startTxDataThread+0xe0>)
 806242c:	4813      	ldr	r0, [pc, #76]	; (806247c <startTxDataThread+0xd8>)
 806242e:	f007 f9b7 	bl	80697a0 <HAL_UART_Transmit>
	  while (f_gets((TCHAR*)rbuf, sizeof(rbuf), &telemetryFile)) {
 8062432:	f107 030c 	add.w	r3, r7, #12
 8062436:	4a0f      	ldr	r2, [pc, #60]	; (8062474 <startTxDataThread+0xd0>)
 8062438:	2180      	movs	r1, #128	; 0x80
 806243a:	4618      	mov	r0, r3
 806243c:	f00b fc07 	bl	806dc4e <f_gets>
 8062440:	4603      	mov	r3, r0
 8062442:	2b00      	cmp	r3, #0
 8062444:	d1e3      	bne.n	806240e <startTxDataThread+0x6a>
	  }

	  f_close(&telemetryFile);
 8062446:	480b      	ldr	r0, [pc, #44]	; (8062474 <startTxDataThread+0xd0>)
 8062448:	f00b fb20 	bl	806da8c <f_close>
	  f_unlink("write.txt");
 806244c:	4808      	ldr	r0, [pc, #32]	; (8062470 <startTxDataThread+0xcc>)
 806244e:	f00b fb4c 	bl	806daea <f_unlink>
	  osMutexRelease(telemetryFileMutexHandle);
 8062452:	4b06      	ldr	r3, [pc, #24]	; (806246c <startTxDataThread+0xc8>)
 8062454:	681b      	ldr	r3, [r3, #0]
 8062456:	4618      	mov	r0, r3
 8062458:	f00c f8d1 	bl	806e5fe <osMutexRelease>

	  HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 806245c:	2201      	movs	r2, #1
 806245e:	4906      	ldr	r1, [pc, #24]	; (8062478 <startTxDataThread+0xd4>)
 8062460:	4806      	ldr	r0, [pc, #24]	; (806247c <startTxDataThread+0xd8>)
 8062462:	f007 fad1 	bl	8069a08 <HAL_UART_Receive_IT>
	  if (rr != FR_OK) {
 8062466:	e7ad      	b.n	80623c4 <startTxDataThread+0x20>
 8062468:	20005478 	.word	0x20005478
 806246c:	2000522c 	.word	0x2000522c
 8062470:	08076f7c 	.word	0x08076f7c
 8062474:	20005244 	.word	0x20005244
 8062478:	20004e30 	.word	0x20004e30
 806247c:	2000582c 	.word	0x2000582c
 8062480:	08076f88 	.word	0x08076f88
 8062484:	2000021c 	.word	0x2000021c

08062488 <startTelemetryThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTelemetryThread */
void startTelemetryThread(void *argument)
{
 8062488:	b5b0      	push	{r4, r5, r7, lr}
 806248a:	b0b6      	sub	sp, #216	; 0xd8
 806248c:	af04      	add	r7, sp, #16
 806248e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTelemetryThread */
  TelemetryBase tb;
  FRESULT wr = FR_OK;
 8062490:	2300      	movs	r3, #0
 8062492:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  // TODO: get rid of magic constant
  BYTE wbuf[128] = {0};
 8062496:	2300      	movs	r3, #0
 8062498:	60fb      	str	r3, [r7, #12]
 806249a:	f107 0310 	add.w	r3, r7, #16
 806249e:	227c      	movs	r2, #124	; 0x7c
 80624a0:	2100      	movs	r1, #0
 80624a2:	4618      	mov	r0, r3
 80624a4:	f010 f8b3 	bl	807260e <memset>

  /* Infinite loop */
  for(;;)
  {
	 if (wr != FR_OK) {
 80624a8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80624ac:	2b00      	cmp	r3, #0
 80624ae:	d011      	beq.n	80624d4 <startTelemetryThread+0x4c>
		 printf("[ERROR]: writing telemetry : (%i)\n", wr);
 80624b0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80624b4:	461a      	mov	r2, r3
 80624b6:	492f      	ldr	r1, [pc, #188]	; (8062574 <startTelemetryThread+0xec>)
 80624b8:	482f      	ldr	r0, [pc, #188]	; (8062578 <startTelemetryThread+0xf0>)
 80624ba:	f011 f805 	bl	80734c8 <siprintf>
 80624be:	482e      	ldr	r0, [pc, #184]	; (8062578 <startTelemetryThread+0xf0>)
 80624c0:	f7fd fe98 	bl	80601f4 <strlen>
 80624c4:	4603      	mov	r3, r0
 80624c6:	b29a      	uxth	r2, r3
 80624c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80624cc:	492a      	ldr	r1, [pc, #168]	; (8062578 <startTelemetryThread+0xf0>)
 80624ce:	482b      	ldr	r0, [pc, #172]	; (806257c <startTelemetryThread+0xf4>)
 80624d0:	f007 f966 	bl	80697a0 <HAL_UART_Transmit>
	 }

	 osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 80624d4:	4b2a      	ldr	r3, [pc, #168]	; (8062580 <startTelemetryThread+0xf8>)
 80624d6:	6818      	ldr	r0, [r3, #0]
 80624d8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80624dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80624e0:	2200      	movs	r2, #0
 80624e2:	f00c fae1 	bl	806eaa8 <osMessageQueueGet>

	 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
				 tb.id, tb.data_size, tb.data[0],
 80624e6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
	 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
 80624ea:	461d      	mov	r5, r3
 80624ec:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80624f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80624f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80624f8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80624fc:	f107 000c 	add.w	r0, r7, #12
 8062500:	9102      	str	r1, [sp, #8]
 8062502:	9201      	str	r2, [sp, #4]
 8062504:	9300      	str	r3, [sp, #0]
 8062506:	4623      	mov	r3, r4
 8062508:	462a      	mov	r2, r5
 806250a:	491e      	ldr	r1, [pc, #120]	; (8062584 <startTelemetryThread+0xfc>)
 806250c:	f010 ffdc 	bl	80734c8 <siprintf>
				 tb.data[1], tb.data[2]);
	 // printf("Writing following string to sd: %s", wbuf);


	 osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 8062510:	4b1d      	ldr	r3, [pc, #116]	; (8062588 <startTelemetryThread+0x100>)
 8062512:	681b      	ldr	r3, [r3, #0]
 8062514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8062518:	4618      	mov	r0, r3
 806251a:	f00c f825 	bl	806e568 <osMutexAcquire>
	 wr = f_open(&telemetryFile, "write.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ | FA_OPEN_ALWAYS);
 806251e:	2233      	movs	r2, #51	; 0x33
 8062520:	491a      	ldr	r1, [pc, #104]	; (806258c <startTelemetryThread+0x104>)
 8062522:	481b      	ldr	r0, [pc, #108]	; (8062590 <startTelemetryThread+0x108>)
 8062524:	f00a fd52 	bl	806cfcc <f_open>
 8062528:	4603      	mov	r3, r0
 806252a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	 if(wr != FR_OK) {
 806252e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8062532:	2b00      	cmp	r3, #0
 8062534:	d005      	beq.n	8062542 <startTelemetryThread+0xba>
		 osMutexRelease(telemetryFileMutexHandle);
 8062536:	4b14      	ldr	r3, [pc, #80]	; (8062588 <startTelemetryThread+0x100>)
 8062538:	681b      	ldr	r3, [r3, #0]
 806253a:	4618      	mov	r0, r3
 806253c:	f00c f85f 	bl	806e5fe <osMutexRelease>
		 continue;
 8062540:	e016      	b.n	8062570 <startTelemetryThread+0xe8>
	 }

	 wr = f_write(&telemetryFile, wbuf, strlen(wbuf), NULL);
 8062542:	f107 030c 	add.w	r3, r7, #12
 8062546:	4618      	mov	r0, r3
 8062548:	f7fd fe54 	bl	80601f4 <strlen>
 806254c:	4602      	mov	r2, r0
 806254e:	f107 010c 	add.w	r1, r7, #12
 8062552:	2300      	movs	r3, #0
 8062554:	480e      	ldr	r0, [pc, #56]	; (8062590 <startTelemetryThread+0x108>)
 8062556:	f00b f86c 	bl	806d632 <f_write>
 806255a:	4603      	mov	r3, r0
 806255c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	 f_close(&telemetryFile);
 8062560:	480b      	ldr	r0, [pc, #44]	; (8062590 <startTelemetryThread+0x108>)
 8062562:	f00b fa93 	bl	806da8c <f_close>
	 osMutexRelease(telemetryFileMutexHandle);
 8062566:	4b08      	ldr	r3, [pc, #32]	; (8062588 <startTelemetryThread+0x100>)
 8062568:	681b      	ldr	r3, [r3, #0]
 806256a:	4618      	mov	r0, r3
 806256c:	f00c f847 	bl	806e5fe <osMutexRelease>
	 if (wr != FR_OK) {
 8062570:	e79a      	b.n	80624a8 <startTelemetryThread+0x20>
 8062572:	bf00      	nop
 8062574:	08076f94 	.word	0x08076f94
 8062578:	2000021c 	.word	0x2000021c
 806257c:	2000582c 	.word	0x2000582c
 8062580:	2000523c 	.word	0x2000523c
 8062584:	08076fb8 	.word	0x08076fb8
 8062588:	2000522c 	.word	0x2000522c
 806258c:	08076f7c 	.word	0x08076f7c
 8062590:	20005244 	.word	0x20005244

08062594 <startPeripheryThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPeripheryThread */
void startPeripheryThread(void *argument)
{
 8062594:	b580      	push	{r7, lr}
 8062596:	b098      	sub	sp, #96	; 0x60
 8062598:	af00      	add	r7, sp, #0
 806259a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  osThreadFlagsWait(0x11111111U, osFlagsNoClear, osWaitForever);
 806259c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80625a0:	2102      	movs	r1, #2
 80625a2:	f04f 3011 	mov.w	r0, #286331153	; 0x11111111
 80625a6:	f00b fdfe 	bl	806e1a6 <osThreadFlagsWait>
	  flags = osThreadFlagsGet();
 80625aa:	f00b fddb 	bl	806e164 <osThreadFlagsGet>
 80625ae:	65f8      	str	r0, [r7, #92]	; 0x5c
	  osThreadFlagsClear(flags);
 80625b0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80625b2:	f00b fd99 	bl	806e0e8 <osThreadFlagsClear>

	  switch (flags) {
 80625b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80625b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80625bc:	f000 80a0 	beq.w	8062700 <startPeripheryThread+0x16c>
 80625c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80625c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80625c6:	f200 80b1 	bhi.w	806272c <startPeripheryThread+0x198>
 80625ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80625cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80625d0:	d060      	beq.n	8062694 <startPeripheryThread+0x100>
 80625d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80625d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80625d8:	f200 80a8 	bhi.w	806272c <startPeripheryThread+0x198>
 80625dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80625de:	2b01      	cmp	r3, #1
 80625e0:	d003      	beq.n	80625ea <startPeripheryThread+0x56>
 80625e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80625e4:	2b10      	cmp	r3, #16
 80625e6:	d02a      	beq.n	806263e <startPeripheryThread+0xaa>

	  	    tb.data[0] = (int) TEMT6000_lux;

			break;
	  default:
		  break;
 80625e8:	e0a0      	b.n	806272c <startPeripheryThread+0x198>
	  	    MPU6050_GetAllData(Data);
 80625ea:	f107 0318 	add.w	r3, r7, #24
 80625ee:	4618      	mov	r0, r3
 80625f0:	f000 fcdb 	bl	8062faa <MPU6050_GetAllData>
			tb.id = ACC;
 80625f4:	2300      	movs	r3, #0
 80625f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 3;
 80625fa:	2303      	movs	r3, #3
 80625fc:	65bb      	str	r3, [r7, #88]	; 0x58
	  	  	tb.data[0] = Data[0];
 80625fe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8062602:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  	tb.data[1] = Data[1];
 8062604:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8062608:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  	tb.data[2] = Data[2];
 806260a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 806260e:	633b      	str	r3, [r7, #48]	; 0x30
	  	  	osMessageQueuePut(telemetryQueueHandle, &tb, 0U, 0U);
 8062610:	4b4b      	ldr	r3, [pc, #300]	; (8062740 <startPeripheryThread+0x1ac>)
 8062612:	6818      	ldr	r0, [r3, #0]
 8062614:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8062618:	2300      	movs	r3, #0
 806261a:	2200      	movs	r2, #0
 806261c:	f00c f9e4 	bl	806e9e8 <osMessageQueuePut>
	  	  	tb.id = GYRO;
 8062620:	2301      	movs	r3, #1
 8062622:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 3;
 8062626:	2303      	movs	r3, #3
 8062628:	65bb      	str	r3, [r7, #88]	; 0x58
	  	  	tb.data[0] = Data[3];
 806262a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 806262e:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  	tb.data[1] = Data[4];
 8062630:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8062634:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  	tb.data[2] = Data[5];
 8062636:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 806263a:	633b      	str	r3, [r7, #48]	; 0x30
	  	  	break;
 806263c:	e077      	b.n	806272e <startPeripheryThread+0x19a>
			tb.id = HTP;
 806263e:	2302      	movs	r3, #2
 8062640:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 3;
 8062644:	2303      	movs	r3, #3
 8062646:	65bb      	str	r3, [r7, #88]	; 0x58
			while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity));
 8062648:	bf00      	nop
 806264a:	f107 030c 	add.w	r3, r7, #12
 806264e:	f107 0214 	add.w	r2, r7, #20
 8062652:	f107 0110 	add.w	r1, r7, #16
 8062656:	483b      	ldr	r0, [pc, #236]	; (8062744 <startPeripheryThread+0x1b0>)
 8062658:	f7ff fbda 	bl	8061e10 <bmp280_read_float>
 806265c:	4603      	mov	r3, r0
 806265e:	f083 0301 	eor.w	r3, r3, #1
 8062662:	b2db      	uxtb	r3, r3
 8062664:	2b00      	cmp	r3, #0
 8062666:	d1f0      	bne.n	806264a <startPeripheryThread+0xb6>
			tb.data[0] = (int) temperature;
 8062668:	edd7 7a04 	vldr	s15, [r7, #16]
 806266c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8062670:	ee17 3a90 	vmov	r3, s15
 8062674:	62bb      	str	r3, [r7, #40]	; 0x28
			tb.data[1] = (int) pressure;
 8062676:	edd7 7a05 	vldr	s15, [r7, #20]
 806267a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 806267e:	ee17 3a90 	vmov	r3, s15
 8062682:	62fb      	str	r3, [r7, #44]	; 0x2c
			tb.data[2] = (int) humidity;
 8062684:	edd7 7a03 	vldr	s15, [r7, #12]
 8062688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 806268c:	ee17 3a90 	vmov	r3, s15
 8062690:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8062692:	e04c      	b.n	806272e <startPeripheryThread+0x19a>
			while (!GPS_read());
 8062694:	bf00      	nop
 8062696:	f7fe fd11 	bl	80610bc <GPS_read>
 806269a:	4603      	mov	r3, r0
 806269c:	2b00      	cmp	r3, #0
 806269e:	d0fa      	beq.n	8062696 <startPeripheryThread+0x102>
			tb.id = NEO6M;
 80626a0:	2304      	movs	r3, #4
 80626a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			tb.data_size = 3;
 80626a6:	2303      	movs	r3, #3
 80626a8:	65bb      	str	r3, [r7, #88]	; 0x58
			tb.data[0] = (int) GPS.utc_time;
 80626aa:	4b27      	ldr	r3, [pc, #156]	; (8062748 <startPeripheryThread+0x1b4>)
 80626ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80626b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80626b4:	ee17 3a90 	vmov	r3, s15
 80626b8:	62bb      	str	r3, [r7, #40]	; 0x28
			tb.data[1] = (int) GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80626ba:	4b23      	ldr	r3, [pc, #140]	; (8062748 <startPeripheryThread+0x1b4>)
 80626bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80626c0:	4b21      	ldr	r3, [pc, #132]	; (8062748 <startPeripheryThread+0x1b4>)
 80626c2:	7e1b      	ldrb	r3, [r3, #24]
 80626c4:	4618      	mov	r0, r3
 80626c6:	eeb0 0a67 	vmov.f32	s0, s15
 80626ca:	f7fe fd9b 	bl	8061204 <GPS_nmea_to_dec>
 80626ce:	eef0 7a40 	vmov.f32	s15, s0
 80626d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80626d6:	ee17 3a90 	vmov	r3, s15
 80626da:	62fb      	str	r3, [r7, #44]	; 0x2c
			tb.data[2] = (int) GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80626dc:	4b1a      	ldr	r3, [pc, #104]	; (8062748 <startPeripheryThread+0x1b4>)
 80626de:	edd3 7a03 	vldr	s15, [r3, #12]
 80626e2:	4b19      	ldr	r3, [pc, #100]	; (8062748 <startPeripheryThread+0x1b4>)
 80626e4:	7e5b      	ldrb	r3, [r3, #25]
 80626e6:	4618      	mov	r0, r3
 80626e8:	eeb0 0a67 	vmov.f32	s0, s15
 80626ec:	f7fe fd8a 	bl	8061204 <GPS_nmea_to_dec>
 80626f0:	eef0 7a40 	vmov.f32	s15, s0
 80626f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80626f8:	ee17 3a90 	vmov	r3, s15
 80626fc:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 80626fe:	e016      	b.n	806272e <startPeripheryThread+0x19a>
			tb.id = LIGHT;
 8062700:	2303      	movs	r3, #3
 8062702:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  	  	tb.data_size = 1;
 8062706:	2301      	movs	r3, #1
 8062708:	65bb      	str	r3, [r7, #88]	; 0x58
	  	    while (TEMT6000_OK != TEMT6000_ReadLight(&TEMT6000_lux));
 806270a:	bf00      	nop
 806270c:	f107 0308 	add.w	r3, r7, #8
 8062710:	4618      	mov	r0, r3
 8062712:	f000 ff2f 	bl	8063574 <TEMT6000_ReadLight>
 8062716:	4603      	mov	r3, r0
 8062718:	2b00      	cmp	r3, #0
 806271a:	d1f7      	bne.n	806270c <startPeripheryThread+0x178>
	  	    tb.data[0] = (int) TEMT6000_lux;
 806271c:	edd7 7a02 	vldr	s15, [r7, #8]
 8062720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8062724:	ee17 3a90 	vmov	r3, s15
 8062728:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 806272a:	e000      	b.n	806272e <startPeripheryThread+0x19a>
		  break;
 806272c:	bf00      	nop

	  }

	  osMessageQueuePut(telemetryQueueHandle, &tb, 0U, 0U);
 806272e:	4b04      	ldr	r3, [pc, #16]	; (8062740 <startPeripheryThread+0x1ac>)
 8062730:	6818      	ldr	r0, [r3, #0]
 8062732:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8062736:	2300      	movs	r3, #0
 8062738:	2200      	movs	r2, #0
 806273a:	f00c f955 	bl	806e9e8 <osMessageQueuePut>
	  osThreadFlagsWait(0x11111111U, osFlagsNoClear, osWaitForever);
 806273e:	e72d      	b.n	806259c <startPeripheryThread+0x8>
 8062740:	2000523c 	.word	0x2000523c
 8062744:	20004f14 	.word	0x20004f14
 8062748:	20004e3c 	.word	0x20004e3c

0806274c <accTimerCallback>:
  /* USER CODE END startPeripheryThread */
}

/* accTimerCallback function */
void accTimerCallback(void *argument)
{
 806274c:	b580      	push	{r7, lr}
 806274e:	b082      	sub	sp, #8
 8062750:	af00      	add	r7, sp, #0
 8062752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00000001U);
 8062754:	4b04      	ldr	r3, [pc, #16]	; (8062768 <accTimerCallback+0x1c>)
 8062756:	681b      	ldr	r3, [r3, #0]
 8062758:	2101      	movs	r1, #1
 806275a:	4618      	mov	r0, r3
 806275c:	f00b fc76 	bl	806e04c <osThreadFlagsSet>
  /* USER CODE END accTimerCallback */
}
 8062760:	bf00      	nop
 8062762:	3708      	adds	r7, #8
 8062764:	46bd      	mov	sp, r7
 8062766:	bd80      	pop	{r7, pc}
 8062768:	2000547c 	.word	0x2000547c

0806276c <temperatureTimerCallback>:

/* temperatureTimerCallback function */
void temperatureTimerCallback(void *argument)
{
 806276c:	b580      	push	{r7, lr}
 806276e:	b082      	sub	sp, #8
 8062770:	af00      	add	r7, sp, #0
 8062772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temperatureTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00000010U);
 8062774:	4b04      	ldr	r3, [pc, #16]	; (8062788 <temperatureTimerCallback+0x1c>)
 8062776:	681b      	ldr	r3, [r3, #0]
 8062778:	2110      	movs	r1, #16
 806277a:	4618      	mov	r0, r3
 806277c:	f00b fc66 	bl	806e04c <osThreadFlagsSet>
  /* USER CODE END temperatureTimerCallback */
}
 8062780:	bf00      	nop
 8062782:	3708      	adds	r7, #8
 8062784:	46bd      	mov	sp, r7
 8062786:	bd80      	pop	{r7, pc}
 8062788:	2000547c 	.word	0x2000547c

0806278c <gpsTimerCallback>:

/* gpsTimerCallback function */
void gpsTimerCallback(void *argument)
{
 806278c:	b580      	push	{r7, lr}
 806278e:	b082      	sub	sp, #8
 8062790:	af00      	add	r7, sp, #0
 8062792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gpsTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00000100U);
 8062794:	4b05      	ldr	r3, [pc, #20]	; (80627ac <gpsTimerCallback+0x20>)
 8062796:	681b      	ldr	r3, [r3, #0]
 8062798:	f44f 7180 	mov.w	r1, #256	; 0x100
 806279c:	4618      	mov	r0, r3
 806279e:	f00b fc55 	bl	806e04c <osThreadFlagsSet>
  /* USER CODE END gpsTimerCallback */
}
 80627a2:	bf00      	nop
 80627a4:	3708      	adds	r7, #8
 80627a6:	46bd      	mov	sp, r7
 80627a8:	bd80      	pop	{r7, pc}
 80627aa:	bf00      	nop
 80627ac:	2000547c 	.word	0x2000547c

080627b0 <lightTimerCallback>:

/* lightTimerCallback function */
void lightTimerCallback(void *argument)
{
 80627b0:	b580      	push	{r7, lr}
 80627b2:	b082      	sub	sp, #8
 80627b4:	af00      	add	r7, sp, #0
 80627b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN lightTimerCallback */
	osThreadFlagsSet(peripheryThreadHandle, 0x00001000U);
 80627b8:	4b05      	ldr	r3, [pc, #20]	; (80627d0 <lightTimerCallback+0x20>)
 80627ba:	681b      	ldr	r3, [r3, #0]
 80627bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80627c0:	4618      	mov	r0, r3
 80627c2:	f00b fc43 	bl	806e04c <osThreadFlagsSet>
  /* USER CODE END lightTimerCallback */
}
 80627c6:	bf00      	nop
 80627c8:	3708      	adds	r7, #8
 80627ca:	46bd      	mov	sp, r7
 80627cc:	bd80      	pop	{r7, pc}
 80627ce:	bf00      	nop
 80627d0:	2000547c 	.word	0x2000547c

080627d4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN Application */
/*
 * [IMPORTANT] TODO: Note that this functoin is unsafe (as we might interrupt uart usage)
 * Actually not, as we would transmit only after this
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80627d4:	b580      	push	{r7, lr}
 80627d6:	b084      	sub	sp, #16
 80627d8:	af00      	add	r7, sp, #0
 80627da:	6078      	str	r0, [r7, #4]
     if (huart == &huart2) {
 80627dc:	687b      	ldr	r3, [r7, #4]
 80627de:	4a14      	ldr	r2, [pc, #80]	; (8062830 <HAL_UART_RxCpltCallback+0x5c>)
 80627e0:	4293      	cmp	r3, r2
 80627e2:	d11f      	bne.n	8062824 <HAL_UART_RxCpltCallback+0x50>
    	 int val = (int) (notification_buffer[0] - '0');
 80627e4:	4b13      	ldr	r3, [pc, #76]	; (8062834 <HAL_UART_RxCpltCallback+0x60>)
 80627e6:	781b      	ldrb	r3, [r3, #0]
 80627e8:	3b30      	subs	r3, #48	; 0x30
 80627ea:	60fb      	str	r3, [r7, #12]
		 switch (val) {
 80627ec:	68fb      	ldr	r3, [r7, #12]
 80627ee:	2b00      	cmp	r3, #0
 80627f0:	d003      	beq.n	80627fa <HAL_UART_RxCpltCallback+0x26>
 80627f2:	68fb      	ldr	r3, [r7, #12]
 80627f4:	2b01      	cmp	r3, #1
 80627f6:	d006      	beq.n	8062806 <HAL_UART_RxCpltCallback+0x32>
 80627f8:	e00e      	b.n	8062818 <HAL_UART_RxCpltCallback+0x44>
		 case 0:
			 osSemaphoreRelease(rxThreadSemHandle);
 80627fa:	4b0f      	ldr	r3, [pc, #60]	; (8062838 <HAL_UART_RxCpltCallback+0x64>)
 80627fc:	681b      	ldr	r3, [r3, #0]
 80627fe:	4618      	mov	r0, r3
 8062800:	f00c f816 	bl	806e830 <osSemaphoreRelease>
			 break;
 8062804:	e00f      	b.n	8062826 <HAL_UART_RxCpltCallback+0x52>
		 case 1:
			 status = osSemaphoreRelease(txThreadSemHandle);
 8062806:	4b0d      	ldr	r3, [pc, #52]	; (806283c <HAL_UART_RxCpltCallback+0x68>)
 8062808:	681b      	ldr	r3, [r3, #0]
 806280a:	4618      	mov	r0, r3
 806280c:	f00c f810 	bl	806e830 <osSemaphoreRelease>
 8062810:	4603      	mov	r3, r0
 8062812:	4a0b      	ldr	r2, [pc, #44]	; (8062840 <HAL_UART_RxCpltCallback+0x6c>)
 8062814:	6013      	str	r3, [r2, #0]
			 break;
 8062816:	e006      	b.n	8062826 <HAL_UART_RxCpltCallback+0x52>
		 default:
			 // printf("[ERROR]: Op not allowed: %d\n", val);
			 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 8062818:	2201      	movs	r2, #1
 806281a:	4906      	ldr	r1, [pc, #24]	; (8062834 <HAL_UART_RxCpltCallback+0x60>)
 806281c:	4804      	ldr	r0, [pc, #16]	; (8062830 <HAL_UART_RxCpltCallback+0x5c>)
 806281e:	f007 f8f3 	bl	8069a08 <HAL_UART_Receive_IT>
			 break;
 8062822:	e000      	b.n	8062826 <HAL_UART_RxCpltCallback+0x52>
		 };
 8062824:	bf00      	nop

     }
}
 8062826:	bf00      	nop
 8062828:	3710      	adds	r7, #16
 806282a:	46bd      	mov	sp, r7
 806282c:	bd80      	pop	{r7, pc}
 806282e:	bf00      	nop
 8062830:	2000582c 	.word	0x2000582c
 8062834:	20004e30 	.word	0x20004e30
 8062838:	20005228 	.word	0x20005228
 806283c:	20005478 	.word	0x20005478
 8062840:	200056bc 	.word	0x200056bc

08062844 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8062844:	b580      	push	{r7, lr}
 8062846:	b08c      	sub	sp, #48	; 0x30
 8062848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 806284a:	f107 031c 	add.w	r3, r7, #28
 806284e:	2200      	movs	r2, #0
 8062850:	601a      	str	r2, [r3, #0]
 8062852:	605a      	str	r2, [r3, #4]
 8062854:	609a      	str	r2, [r3, #8]
 8062856:	60da      	str	r2, [r3, #12]
 8062858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 806285a:	2300      	movs	r3, #0
 806285c:	61bb      	str	r3, [r7, #24]
 806285e:	4ba5      	ldr	r3, [pc, #660]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 8062860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062862:	4aa4      	ldr	r2, [pc, #656]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 8062864:	f043 0310 	orr.w	r3, r3, #16
 8062868:	6313      	str	r3, [r2, #48]	; 0x30
 806286a:	4ba2      	ldr	r3, [pc, #648]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 806286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806286e:	f003 0310 	and.w	r3, r3, #16
 8062872:	61bb      	str	r3, [r7, #24]
 8062874:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8062876:	2300      	movs	r3, #0
 8062878:	617b      	str	r3, [r7, #20]
 806287a:	4b9e      	ldr	r3, [pc, #632]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 806287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806287e:	4a9d      	ldr	r2, [pc, #628]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 8062880:	f043 0304 	orr.w	r3, r3, #4
 8062884:	6313      	str	r3, [r2, #48]	; 0x30
 8062886:	4b9b      	ldr	r3, [pc, #620]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 8062888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806288a:	f003 0304 	and.w	r3, r3, #4
 806288e:	617b      	str	r3, [r7, #20]
 8062890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8062892:	2300      	movs	r3, #0
 8062894:	613b      	str	r3, [r7, #16]
 8062896:	4b97      	ldr	r3, [pc, #604]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 8062898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806289a:	4a96      	ldr	r2, [pc, #600]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 806289c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80628a0:	6313      	str	r3, [r2, #48]	; 0x30
 80628a2:	4b94      	ldr	r3, [pc, #592]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 80628a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80628a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80628aa:	613b      	str	r3, [r7, #16]
 80628ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80628ae:	2300      	movs	r3, #0
 80628b0:	60fb      	str	r3, [r7, #12]
 80628b2:	4b90      	ldr	r3, [pc, #576]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 80628b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80628b6:	4a8f      	ldr	r2, [pc, #572]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 80628b8:	f043 0301 	orr.w	r3, r3, #1
 80628bc:	6313      	str	r3, [r2, #48]	; 0x30
 80628be:	4b8d      	ldr	r3, [pc, #564]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 80628c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80628c2:	f003 0301 	and.w	r3, r3, #1
 80628c6:	60fb      	str	r3, [r7, #12]
 80628c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80628ca:	2300      	movs	r3, #0
 80628cc:	60bb      	str	r3, [r7, #8]
 80628ce:	4b89      	ldr	r3, [pc, #548]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 80628d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80628d2:	4a88      	ldr	r2, [pc, #544]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 80628d4:	f043 0302 	orr.w	r3, r3, #2
 80628d8:	6313      	str	r3, [r2, #48]	; 0x30
 80628da:	4b86      	ldr	r3, [pc, #536]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 80628dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80628de:	f003 0302 	and.w	r3, r3, #2
 80628e2:	60bb      	str	r3, [r7, #8]
 80628e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80628e6:	2300      	movs	r3, #0
 80628e8:	607b      	str	r3, [r7, #4]
 80628ea:	4b82      	ldr	r3, [pc, #520]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 80628ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80628ee:	4a81      	ldr	r2, [pc, #516]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 80628f0:	f043 0308 	orr.w	r3, r3, #8
 80628f4:	6313      	str	r3, [r2, #48]	; 0x30
 80628f6:	4b7f      	ldr	r3, [pc, #508]	; (8062af4 <MX_GPIO_Init+0x2b0>)
 80628f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80628fa:	f003 0308 	and.w	r3, r3, #8
 80628fe:	607b      	str	r3, [r7, #4]
 8062900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8062902:	2200      	movs	r2, #0
 8062904:	2108      	movs	r1, #8
 8062906:	487c      	ldr	r0, [pc, #496]	; (8062af8 <MX_GPIO_Init+0x2b4>)
 8062908:	f003 f86a 	bl	80659e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 806290c:	2201      	movs	r2, #1
 806290e:	2101      	movs	r1, #1
 8062910:	487a      	ldr	r0, [pc, #488]	; (8062afc <MX_GPIO_Init+0x2b8>)
 8062912:	f003 f865 	bl	80659e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8062916:	2200      	movs	r2, #0
 8062918:	2102      	movs	r1, #2
 806291a:	4879      	ldr	r0, [pc, #484]	; (8062b00 <MX_GPIO_Init+0x2bc>)
 806291c:	f003 f860 	bl	80659e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8062920:	2200      	movs	r2, #0
 8062922:	f24f 0110 	movw	r1, #61456	; 0xf010
 8062926:	4877      	ldr	r0, [pc, #476]	; (8062b04 <MX_GPIO_Init+0x2c0>)
 8062928:	f003 f85a 	bl	80659e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BootPin_GPIO_Port, BootPin_Pin, GPIO_PIN_RESET);
 806292c:	2200      	movs	r2, #0
 806292e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8062932:	4875      	ldr	r0, [pc, #468]	; (8062b08 <MX_GPIO_Init+0x2c4>)
 8062934:	f003 f854 	bl	80659e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8062938:	2304      	movs	r3, #4
 806293a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 806293c:	2300      	movs	r3, #0
 806293e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062940:	2300      	movs	r3, #0
 8062942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8062944:	f107 031c 	add.w	r3, r7, #28
 8062948:	4619      	mov	r1, r3
 806294a:	486b      	ldr	r0, [pc, #428]	; (8062af8 <MX_GPIO_Init+0x2b4>)
 806294c:	f002 fdac 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8062950:	2308      	movs	r3, #8
 8062952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062954:	2301      	movs	r3, #1
 8062956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062958:	2300      	movs	r3, #0
 806295a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 806295c:	2300      	movs	r3, #0
 806295e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8062960:	f107 031c 	add.w	r3, r7, #28
 8062964:	4619      	mov	r1, r3
 8062966:	4864      	ldr	r0, [pc, #400]	; (8062af8 <MX_GPIO_Init+0x2b4>)
 8062968:	f002 fd9e 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 806296c:	2330      	movs	r3, #48	; 0x30
 806296e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8062970:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8062974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062976:	2300      	movs	r3, #0
 8062978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 806297a:	f107 031c 	add.w	r3, r7, #28
 806297e:	4619      	mov	r1, r3
 8062980:	485d      	ldr	r0, [pc, #372]	; (8062af8 <MX_GPIO_Init+0x2b4>)
 8062982:	f002 fd91 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8062986:	2301      	movs	r3, #1
 8062988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 806298a:	2301      	movs	r3, #1
 806298c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 806298e:	2300      	movs	r3, #0
 8062990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062992:	2300      	movs	r3, #0
 8062994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8062996:	f107 031c 	add.w	r3, r7, #28
 806299a:	4619      	mov	r1, r3
 806299c:	4857      	ldr	r0, [pc, #348]	; (8062afc <MX_GPIO_Init+0x2b8>)
 806299e:	f002 fd83 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80629a2:	2308      	movs	r3, #8
 80629a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80629a6:	2302      	movs	r3, #2
 80629a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80629aa:	2300      	movs	r3, #0
 80629ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80629ae:	2300      	movs	r3, #0
 80629b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80629b2:	2305      	movs	r3, #5
 80629b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80629b6:	f107 031c 	add.w	r3, r7, #28
 80629ba:	4619      	mov	r1, r3
 80629bc:	484f      	ldr	r0, [pc, #316]	; (8062afc <MX_GPIO_Init+0x2b8>)
 80629be:	f002 fd73 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80629c2:	2301      	movs	r3, #1
 80629c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80629c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80629ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80629cc:	2300      	movs	r3, #0
 80629ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80629d0:	f107 031c 	add.w	r3, r7, #28
 80629d4:	4619      	mov	r1, r3
 80629d6:	484c      	ldr	r0, [pc, #304]	; (8062b08 <MX_GPIO_Init+0x2c4>)
 80629d8:	f002 fd66 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80629dc:	2310      	movs	r3, #16
 80629de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80629e0:	2302      	movs	r3, #2
 80629e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80629e4:	2300      	movs	r3, #0
 80629e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80629e8:	2300      	movs	r3, #0
 80629ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80629ec:	2306      	movs	r3, #6
 80629ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80629f0:	f107 031c 	add.w	r3, r7, #28
 80629f4:	4619      	mov	r1, r3
 80629f6:	4844      	ldr	r0, [pc, #272]	; (8062b08 <MX_GPIO_Init+0x2c4>)
 80629f8:	f002 fd56 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80629fc:	2302      	movs	r3, #2
 80629fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062a00:	2301      	movs	r3, #1
 8062a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062a04:	2300      	movs	r3, #0
 8062a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062a08:	2300      	movs	r3, #0
 8062a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8062a0c:	f107 031c 	add.w	r3, r7, #28
 8062a10:	4619      	mov	r1, r3
 8062a12:	483b      	ldr	r0, [pc, #236]	; (8062b00 <MX_GPIO_Init+0x2bc>)
 8062a14:	f002 fd48 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8062a18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8062a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062a1e:	2302      	movs	r3, #2
 8062a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062a22:	2300      	movs	r3, #0
 8062a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062a26:	2300      	movs	r3, #0
 8062a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8062a2a:	2305      	movs	r3, #5
 8062a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8062a2e:	f107 031c 	add.w	r3, r7, #28
 8062a32:	4619      	mov	r1, r3
 8062a34:	4832      	ldr	r0, [pc, #200]	; (8062b00 <MX_GPIO_Init+0x2bc>)
 8062a36:	f002 fd37 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8062a3a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8062a3e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062a40:	2301      	movs	r3, #1
 8062a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062a44:	2300      	movs	r3, #0
 8062a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062a48:	2300      	movs	r3, #0
 8062a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8062a4c:	f107 031c 	add.w	r3, r7, #28
 8062a50:	4619      	mov	r1, r3
 8062a52:	482c      	ldr	r0, [pc, #176]	; (8062b04 <MX_GPIO_Init+0x2c0>)
 8062a54:	f002 fd28 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8062a58:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8062a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062a5e:	2302      	movs	r3, #2
 8062a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062a62:	2300      	movs	r3, #0
 8062a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062a66:	2300      	movs	r3, #0
 8062a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8062a6a:	2306      	movs	r3, #6
 8062a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8062a6e:	f107 031c 	add.w	r3, r7, #28
 8062a72:	4619      	mov	r1, r3
 8062a74:	4821      	ldr	r0, [pc, #132]	; (8062afc <MX_GPIO_Init+0x2b8>)
 8062a76:	f002 fd17 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BootPin_Pin;
 8062a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8062a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062a80:	2301      	movs	r3, #1
 8062a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062a84:	2300      	movs	r3, #0
 8062a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062a88:	2300      	movs	r3, #0
 8062a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BootPin_GPIO_Port, &GPIO_InitStruct);
 8062a8c:	f107 031c 	add.w	r3, r7, #28
 8062a90:	4619      	mov	r1, r3
 8062a92:	481d      	ldr	r0, [pc, #116]	; (8062b08 <MX_GPIO_Init+0x2c4>)
 8062a94:	f002 fd08 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8062a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8062a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8062a9e:	2300      	movs	r3, #0
 8062aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062aa2:	2300      	movs	r3, #0
 8062aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8062aa6:	f107 031c 	add.w	r3, r7, #28
 8062aaa:	4619      	mov	r1, r3
 8062aac:	4816      	ldr	r0, [pc, #88]	; (8062b08 <MX_GPIO_Init+0x2c4>)
 8062aae:	f002 fcfb 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8062ab2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8062ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062ab8:	2302      	movs	r3, #2
 8062aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062abc:	2300      	movs	r3, #0
 8062abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8062ac0:	2303      	movs	r3, #3
 8062ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8062ac4:	230a      	movs	r3, #10
 8062ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8062ac8:	f107 031c 	add.w	r3, r7, #28
 8062acc:	4619      	mov	r1, r3
 8062ace:	480e      	ldr	r0, [pc, #56]	; (8062b08 <MX_GPIO_Init+0x2c4>)
 8062ad0:	f002 fcea 	bl	80654a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8062ad4:	2320      	movs	r3, #32
 8062ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8062ad8:	2300      	movs	r3, #0
 8062ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062adc:	2300      	movs	r3, #0
 8062ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8062ae0:	f107 031c 	add.w	r3, r7, #28
 8062ae4:	4619      	mov	r1, r3
 8062ae6:	4807      	ldr	r0, [pc, #28]	; (8062b04 <MX_GPIO_Init+0x2c0>)
 8062ae8:	f002 fcde 	bl	80654a8 <HAL_GPIO_Init>

}
 8062aec:	bf00      	nop
 8062aee:	3730      	adds	r7, #48	; 0x30
 8062af0:	46bd      	mov	sp, r7
 8062af2:	bd80      	pop	{r7, pc}
 8062af4:	40023800 	.word	0x40023800
 8062af8:	40021000 	.word	0x40021000
 8062afc:	40020800 	.word	0x40020800
 8062b00:	40020400 	.word	0x40020400
 8062b04:	40020c00 	.word	0x40020c00
 8062b08:	40020000 	.word	0x40020000

08062b0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8062b0c:	b580      	push	{r7, lr}
 8062b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8062b10:	4b12      	ldr	r3, [pc, #72]	; (8062b5c <MX_I2C1_Init+0x50>)
 8062b12:	4a13      	ldr	r2, [pc, #76]	; (8062b60 <MX_I2C1_Init+0x54>)
 8062b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8062b16:	4b11      	ldr	r3, [pc, #68]	; (8062b5c <MX_I2C1_Init+0x50>)
 8062b18:	4a12      	ldr	r2, [pc, #72]	; (8062b64 <MX_I2C1_Init+0x58>)
 8062b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8062b1c:	4b0f      	ldr	r3, [pc, #60]	; (8062b5c <MX_I2C1_Init+0x50>)
 8062b1e:	2200      	movs	r2, #0
 8062b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8062b22:	4b0e      	ldr	r3, [pc, #56]	; (8062b5c <MX_I2C1_Init+0x50>)
 8062b24:	2200      	movs	r2, #0
 8062b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8062b28:	4b0c      	ldr	r3, [pc, #48]	; (8062b5c <MX_I2C1_Init+0x50>)
 8062b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8062b2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8062b30:	4b0a      	ldr	r3, [pc, #40]	; (8062b5c <MX_I2C1_Init+0x50>)
 8062b32:	2200      	movs	r2, #0
 8062b34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8062b36:	4b09      	ldr	r3, [pc, #36]	; (8062b5c <MX_I2C1_Init+0x50>)
 8062b38:	2200      	movs	r2, #0
 8062b3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8062b3c:	4b07      	ldr	r3, [pc, #28]	; (8062b5c <MX_I2C1_Init+0x50>)
 8062b3e:	2200      	movs	r2, #0
 8062b40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8062b42:	4b06      	ldr	r3, [pc, #24]	; (8062b5c <MX_I2C1_Init+0x50>)
 8062b44:	2200      	movs	r2, #0
 8062b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8062b48:	4804      	ldr	r0, [pc, #16]	; (8062b5c <MX_I2C1_Init+0x50>)
 8062b4a:	f002 ff7b 	bl	8065a44 <HAL_I2C_Init>
 8062b4e:	4603      	mov	r3, r0
 8062b50:	2b00      	cmp	r3, #0
 8062b52:	d001      	beq.n	8062b58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8062b54:	f000 f9e4 	bl	8062f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8062b58:	bf00      	nop
 8062b5a:	bd80      	pop	{r7, pc}
 8062b5c:	200056c0 	.word	0x200056c0
 8062b60:	40005400 	.word	0x40005400
 8062b64:	000186a0 	.word	0x000186a0

08062b68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8062b68:	b580      	push	{r7, lr}
 8062b6a:	b08a      	sub	sp, #40	; 0x28
 8062b6c:	af00      	add	r7, sp, #0
 8062b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8062b70:	f107 0314 	add.w	r3, r7, #20
 8062b74:	2200      	movs	r2, #0
 8062b76:	601a      	str	r2, [r3, #0]
 8062b78:	605a      	str	r2, [r3, #4]
 8062b7a:	609a      	str	r2, [r3, #8]
 8062b7c:	60da      	str	r2, [r3, #12]
 8062b7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8062b80:	687b      	ldr	r3, [r7, #4]
 8062b82:	681b      	ldr	r3, [r3, #0]
 8062b84:	4a19      	ldr	r2, [pc, #100]	; (8062bec <HAL_I2C_MspInit+0x84>)
 8062b86:	4293      	cmp	r3, r2
 8062b88:	d12c      	bne.n	8062be4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8062b8a:	2300      	movs	r3, #0
 8062b8c:	613b      	str	r3, [r7, #16]
 8062b8e:	4b18      	ldr	r3, [pc, #96]	; (8062bf0 <HAL_I2C_MspInit+0x88>)
 8062b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062b92:	4a17      	ldr	r2, [pc, #92]	; (8062bf0 <HAL_I2C_MspInit+0x88>)
 8062b94:	f043 0302 	orr.w	r3, r3, #2
 8062b98:	6313      	str	r3, [r2, #48]	; 0x30
 8062b9a:	4b15      	ldr	r3, [pc, #84]	; (8062bf0 <HAL_I2C_MspInit+0x88>)
 8062b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8062b9e:	f003 0302 	and.w	r3, r3, #2
 8062ba2:	613b      	str	r3, [r7, #16]
 8062ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8062ba6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8062baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8062bac:	2312      	movs	r3, #18
 8062bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062bb0:	2300      	movs	r3, #0
 8062bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8062bb4:	2303      	movs	r3, #3
 8062bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8062bb8:	2304      	movs	r3, #4
 8062bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8062bbc:	f107 0314 	add.w	r3, r7, #20
 8062bc0:	4619      	mov	r1, r3
 8062bc2:	480c      	ldr	r0, [pc, #48]	; (8062bf4 <HAL_I2C_MspInit+0x8c>)
 8062bc4:	f002 fc70 	bl	80654a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8062bc8:	2300      	movs	r3, #0
 8062bca:	60fb      	str	r3, [r7, #12]
 8062bcc:	4b08      	ldr	r3, [pc, #32]	; (8062bf0 <HAL_I2C_MspInit+0x88>)
 8062bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062bd0:	4a07      	ldr	r2, [pc, #28]	; (8062bf0 <HAL_I2C_MspInit+0x88>)
 8062bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8062bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8062bd8:	4b05      	ldr	r3, [pc, #20]	; (8062bf0 <HAL_I2C_MspInit+0x88>)
 8062bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8062be0:	60fb      	str	r3, [r7, #12]
 8062be2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8062be4:	bf00      	nop
 8062be6:	3728      	adds	r7, #40	; 0x28
 8062be8:	46bd      	mov	sp, r7
 8062bea:	bd80      	pop	{r7, pc}
 8062bec:	40005400 	.word	0x40005400
 8062bf0:	40023800 	.word	0x40023800
 8062bf4:	40020400 	.word	0x40020400

08062bf8 <I2C_WriteBuffer>:
  /* USER CODE END I2C1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int I2C_WriteBuffer(uint8_t I2C_ADDRESS, uint8_t *aTxBuffer, uint8_t TXBUFFERSIZE) {
 8062bf8:	b580      	push	{r7, lr}
 8062bfa:	b084      	sub	sp, #16
 8062bfc:	af02      	add	r7, sp, #8
 8062bfe:	4603      	mov	r3, r0
 8062c00:	6039      	str	r1, [r7, #0]
 8062c02:	71fb      	strb	r3, [r7, #7]
 8062c04:	4613      	mov	r3, r2
 8062c06:	71bb      	strb	r3, [r7, #6]
    while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 8062c08:	e007      	b.n	8062c1a <I2C_WriteBuffer+0x22>
        if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF){
 8062c0a:	4812      	ldr	r0, [pc, #72]	; (8062c54 <I2C_WriteBuffer+0x5c>)
 8062c0c:	f003 ff50 	bl	8066ab0 <HAL_I2C_GetError>
 8062c10:	4603      	mov	r3, r0
 8062c12:	2b04      	cmp	r3, #4
 8062c14:	d001      	beq.n	8062c1a <I2C_WriteBuffer+0x22>
            // _Error_Handler(__FILE__, aTxBuffer[0]);
        	return 1;
 8062c16:	2301      	movs	r3, #1
 8062c18:	e017      	b.n	8062c4a <I2C_WriteBuffer+0x52>
    while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 8062c1a:	79fb      	ldrb	r3, [r7, #7]
 8062c1c:	b29b      	uxth	r3, r3
 8062c1e:	005b      	lsls	r3, r3, #1
 8062c20:	b299      	uxth	r1, r3
 8062c22:	79bb      	ldrb	r3, [r7, #6]
 8062c24:	b29b      	uxth	r3, r3
 8062c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8062c2a:	9200      	str	r2, [sp, #0]
 8062c2c:	683a      	ldr	r2, [r7, #0]
 8062c2e:	4809      	ldr	r0, [pc, #36]	; (8062c54 <I2C_WriteBuffer+0x5c>)
 8062c30:	f003 f8d4 	bl	8065ddc <HAL_I2C_Master_Transmit>
 8062c34:	4603      	mov	r3, r0
 8062c36:	2b00      	cmp	r3, #0
 8062c38:	d1e7      	bne.n	8062c0a <I2C_WriteBuffer+0x12>
        }

    }

      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8062c3a:	bf00      	nop
 8062c3c:	4805      	ldr	r0, [pc, #20]	; (8062c54 <I2C_WriteBuffer+0x5c>)
 8062c3e:	f003 ff29 	bl	8066a94 <HAL_I2C_GetState>
 8062c42:	4603      	mov	r3, r0
 8062c44:	2b20      	cmp	r3, #32
 8062c46:	d1f9      	bne.n	8062c3c <I2C_WriteBuffer+0x44>

      return 0;
 8062c48:	2300      	movs	r3, #0
}
 8062c4a:	4618      	mov	r0, r3
 8062c4c:	3708      	adds	r7, #8
 8062c4e:	46bd      	mov	sp, r7
 8062c50:	bd80      	pop	{r7, pc}
 8062c52:	bf00      	nop
 8062c54:	200056c0 	.word	0x200056c0

08062c58 <I2C_ReadBuffer>:

int I2C_ReadBuffer(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t *aRxBuffer, uint8_t RXBUFFERSIZE){
 8062c58:	b580      	push	{r7, lr}
 8062c5a:	b084      	sub	sp, #16
 8062c5c:	af02      	add	r7, sp, #8
 8062c5e:	603a      	str	r2, [r7, #0]
 8062c60:	461a      	mov	r2, r3
 8062c62:	4603      	mov	r3, r0
 8062c64:	71fb      	strb	r3, [r7, #7]
 8062c66:	460b      	mov	r3, r1
 8062c68:	71bb      	strb	r3, [r7, #6]
 8062c6a:	4613      	mov	r3, r2
 8062c6c:	717b      	strb	r3, [r7, #5]

    I2C_WriteBuffer(I2C_ADDRESS, &RegAddr, 1);
 8062c6e:	1db9      	adds	r1, r7, #6
 8062c70:	79fb      	ldrb	r3, [r7, #7]
 8062c72:	2201      	movs	r2, #1
 8062c74:	4618      	mov	r0, r3
 8062c76:	f7ff ffbf 	bl	8062bf8 <I2C_WriteBuffer>

    while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 8062c7a:	e007      	b.n	8062c8c <I2C_ReadBuffer+0x34>
        if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF){
 8062c7c:	4811      	ldr	r0, [pc, #68]	; (8062cc4 <I2C_ReadBuffer+0x6c>)
 8062c7e:	f003 ff17 	bl	8066ab0 <HAL_I2C_GetError>
 8062c82:	4603      	mov	r3, r0
 8062c84:	2b04      	cmp	r3, #4
 8062c86:	d001      	beq.n	8062c8c <I2C_ReadBuffer+0x34>
            // _Error_Handler(__FILE__, __LINE__);
        	return 1;
 8062c88:	2301      	movs	r3, #1
 8062c8a:	e017      	b.n	8062cbc <I2C_ReadBuffer+0x64>
    while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 8062c8c:	79fb      	ldrb	r3, [r7, #7]
 8062c8e:	b29b      	uxth	r3, r3
 8062c90:	005b      	lsls	r3, r3, #1
 8062c92:	b299      	uxth	r1, r3
 8062c94:	797b      	ldrb	r3, [r7, #5]
 8062c96:	b29b      	uxth	r3, r3
 8062c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8062c9c:	9200      	str	r2, [sp, #0]
 8062c9e:	683a      	ldr	r2, [r7, #0]
 8062ca0:	4808      	ldr	r0, [pc, #32]	; (8062cc4 <I2C_ReadBuffer+0x6c>)
 8062ca2:	f003 f999 	bl	8065fd8 <HAL_I2C_Master_Receive>
 8062ca6:	4603      	mov	r3, r0
 8062ca8:	2b00      	cmp	r3, #0
 8062caa:	d1e7      	bne.n	8062c7c <I2C_ReadBuffer+0x24>
        }
    }

    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8062cac:	bf00      	nop
 8062cae:	4805      	ldr	r0, [pc, #20]	; (8062cc4 <I2C_ReadBuffer+0x6c>)
 8062cb0:	f003 fef0 	bl	8066a94 <HAL_I2C_GetState>
 8062cb4:	4603      	mov	r3, r0
 8062cb6:	2b20      	cmp	r3, #32
 8062cb8:	d1f9      	bne.n	8062cae <I2C_ReadBuffer+0x56>

    return 0;
 8062cba:	2300      	movs	r3, #0
}
 8062cbc:	4618      	mov	r0, r3
 8062cbe:	3708      	adds	r7, #8
 8062cc0:	46bd      	mov	sp, r7
 8062cc2:	bd80      	pop	{r7, pc}
 8062cc4:	200056c0 	.word	0x200056c0

08062cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8062cc8:	b580      	push	{r7, lr}
 8062cca:	b082      	sub	sp, #8
 8062ccc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8062cce:	f000 fdc1 	bl	8063854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8062cd2:	f000 f8a9 	bl	8062e28 <SystemClock_Config>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8062cd6:	b672      	cpsid	i
}
 8062cd8:	bf00      	nop

  /* USER CODE BEGIN SysInit */
  __disable_irq();
  SCB->VTOR = (FLASH_BASE | 0x60000U);
 8062cda:	4b46      	ldr	r3, [pc, #280]	; (8062df4 <main+0x12c>)
 8062cdc:	4a46      	ldr	r2, [pc, #280]	; (8062df8 <main+0x130>)
 8062cde:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8062ce0:	b662      	cpsie	i
}
 8062ce2:	bf00      	nop
  __enable_irq();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8062ce4:	f7ff fdae 	bl	8062844 <MX_GPIO_Init>
  MX_I2C1_Init();
 8062ce8:	f7ff ff10 	bl	8062b0c <MX_I2C1_Init>
  MX_SPI1_Init();
 8062cec:	f000 fa08 	bl	8063100 <MX_SPI1_Init>
  MX_FATFS_Init();
 8062cf0:	f007 fdb4 	bl	806a85c <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8062cf4:	f000 fcb6 	bl	8063664 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8062cf8:	f7ff f8d6 	bl	8061ea8 <MX_DMA_Init>
  MX_ADC1_Init();
 8062cfc:	f7fe fad0 	bl	80612a0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8062d00:	f000 fc86 	bl	8063610 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8062d04:	f000 f9aa 	bl	806305c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // delay needed for sd to stabilize as well as to make the upload
  // of new firmware possible (boot related issue);
  HAL_Delay(2000);
 8062d08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8062d0c:	f000 fde4 	bl	80638d8 <HAL_Delay>

  int initStatus = -1;
 8062d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062d14:	607b      	str	r3, [r7, #4]

  initStatus = MPU6050_Init();
 8062d16:	f000 f913 	bl	8062f40 <MPU6050_Init>
 8062d1a:	6078      	str	r0, [r7, #4]
  myprintf("[INFO]: acc, gyro initialisation status: %d\n", initStatus);
 8062d1c:	687a      	ldr	r2, [r7, #4]
 8062d1e:	4937      	ldr	r1, [pc, #220]	; (8062dfc <main+0x134>)
 8062d20:	4837      	ldr	r0, [pc, #220]	; (8062e00 <main+0x138>)
 8062d22:	f010 fbd1 	bl	80734c8 <siprintf>
 8062d26:	4836      	ldr	r0, [pc, #216]	; (8062e00 <main+0x138>)
 8062d28:	f7fd fa64 	bl	80601f4 <strlen>
 8062d2c:	4603      	mov	r3, r0
 8062d2e:	b29a      	uxth	r2, r3
 8062d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062d34:	4932      	ldr	r1, [pc, #200]	; (8062e00 <main+0x138>)
 8062d36:	4833      	ldr	r0, [pc, #204]	; (8062e04 <main+0x13c>)
 8062d38:	f006 fd32 	bl	80697a0 <HAL_UART_Transmit>

  bmp280_init_default_params(&bmp280.params);
 8062d3c:	4832      	ldr	r0, [pc, #200]	; (8062e08 <main+0x140>)
 8062d3e:	f7fe fb7f 	bl	8061440 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8062d42:	4b32      	ldr	r3, [pc, #200]	; (8062e0c <main+0x144>)
 8062d44:	2276      	movs	r2, #118	; 0x76
 8062d46:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8062d48:	4b30      	ldr	r3, [pc, #192]	; (8062e0c <main+0x144>)
 8062d4a:	4a31      	ldr	r2, [pc, #196]	; (8062e10 <main+0x148>)
 8062d4c:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8062d4e:	e012      	b.n	8062d76 <main+0xae>
      	myprintf("[ERROR]: bmp280 init failed\n");
 8062d50:	4930      	ldr	r1, [pc, #192]	; (8062e14 <main+0x14c>)
 8062d52:	482b      	ldr	r0, [pc, #172]	; (8062e00 <main+0x138>)
 8062d54:	f010 fbb8 	bl	80734c8 <siprintf>
 8062d58:	4829      	ldr	r0, [pc, #164]	; (8062e00 <main+0x138>)
 8062d5a:	f7fd fa4b 	bl	80601f4 <strlen>
 8062d5e:	4603      	mov	r3, r0
 8062d60:	b29a      	uxth	r2, r3
 8062d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062d66:	4926      	ldr	r1, [pc, #152]	; (8062e00 <main+0x138>)
 8062d68:	4826      	ldr	r0, [pc, #152]	; (8062e04 <main+0x13c>)
 8062d6a:	f006 fd19 	bl	80697a0 <HAL_UART_Transmit>
      	HAL_Delay(2000);
 8062d6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8062d72:	f000 fdb1 	bl	80638d8 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8062d76:	4924      	ldr	r1, [pc, #144]	; (8062e08 <main+0x140>)
 8062d78:	4824      	ldr	r0, [pc, #144]	; (8062e0c <main+0x144>)
 8062d7a:	f7fe fcdb 	bl	8061734 <bmp280_init>
 8062d7e:	4603      	mov	r3, r0
 8062d80:	f083 0301 	eor.w	r3, r3, #1
 8062d84:	b2db      	uxtb	r3, r3
 8062d86:	2b00      	cmp	r3, #0
 8062d88:	d1e2      	bne.n	8062d50 <main+0x88>
  }

  myprintf("bmp280 initialized\n");
 8062d8a:	4923      	ldr	r1, [pc, #140]	; (8062e18 <main+0x150>)
 8062d8c:	481c      	ldr	r0, [pc, #112]	; (8062e00 <main+0x138>)
 8062d8e:	f010 fb9b 	bl	80734c8 <siprintf>
 8062d92:	481b      	ldr	r0, [pc, #108]	; (8062e00 <main+0x138>)
 8062d94:	f7fd fa2e 	bl	80601f4 <strlen>
 8062d98:	4603      	mov	r3, r0
 8062d9a:	b29a      	uxth	r2, r3
 8062d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062da0:	4917      	ldr	r1, [pc, #92]	; (8062e00 <main+0x138>)
 8062da2:	4818      	ldr	r0, [pc, #96]	; (8062e04 <main+0x13c>)
 8062da4:	f006 fcfc 	bl	80697a0 <HAL_UART_Transmit>

  while (TEMT6000_Init(&hadc1) != TEMT6000_OK) {
 8062da8:	e012      	b.n	8062dd0 <main+0x108>
	  myprintf("[ERROR]: temt6000 init failed\n");
 8062daa:	491c      	ldr	r1, [pc, #112]	; (8062e1c <main+0x154>)
 8062dac:	4814      	ldr	r0, [pc, #80]	; (8062e00 <main+0x138>)
 8062dae:	f010 fb8b 	bl	80734c8 <siprintf>
 8062db2:	4813      	ldr	r0, [pc, #76]	; (8062e00 <main+0x138>)
 8062db4:	f7fd fa1e 	bl	80601f4 <strlen>
 8062db8:	4603      	mov	r3, r0
 8062dba:	b29a      	uxth	r2, r3
 8062dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8062dc0:	490f      	ldr	r1, [pc, #60]	; (8062e00 <main+0x138>)
 8062dc2:	4810      	ldr	r0, [pc, #64]	; (8062e04 <main+0x13c>)
 8062dc4:	f006 fcec 	bl	80697a0 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8062dc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8062dcc:	f000 fd84 	bl	80638d8 <HAL_Delay>
  while (TEMT6000_Init(&hadc1) != TEMT6000_OK) {
 8062dd0:	4813      	ldr	r0, [pc, #76]	; (8062e20 <main+0x158>)
 8062dd2:	f000 fbb3 	bl	806353c <TEMT6000_Init>
 8062dd6:	4603      	mov	r3, r0
 8062dd8:	2b00      	cmp	r3, #0
 8062dda:	d1e6      	bne.n	8062daa <main+0xe2>
  }

  // run in the background receive from uart
  // in order to implment possibility to wake up
  HAL_UART_Receive_IT(&huart2, (uint8_t *)notification_buffer, 1);
 8062ddc:	2201      	movs	r2, #1
 8062dde:	4911      	ldr	r1, [pc, #68]	; (8062e24 <main+0x15c>)
 8062de0:	4808      	ldr	r0, [pc, #32]	; (8062e04 <main+0x13c>)
 8062de2:	f006 fe11 	bl	8069a08 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8062de6:	f00b f855 	bl	806de94 <osKernelInitialize>
  MX_FREERTOS_Init();
 8062dea:	f7ff f87d 	bl	8061ee8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8062dee:	f00b f875 	bl	806dedc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8062df2:	e7fe      	b.n	8062df2 <main+0x12a>
 8062df4:	e000ed00 	.word	0xe000ed00
 8062df8:	08060000 	.word	0x08060000
 8062dfc:	08076fdc 	.word	0x08076fdc
 8062e00:	2000031c 	.word	0x2000031c
 8062e04:	2000582c 	.word	0x2000582c
 8062e08:	20004f40 	.word	0x20004f40
 8062e0c:	20004f14 	.word	0x20004f14
 8062e10:	200056c0 	.word	0x200056c0
 8062e14:	0807700c 	.word	0x0807700c
 8062e18:	0807702c 	.word	0x0807702c
 8062e1c:	08077040 	.word	0x08077040
 8062e20:	20004f48 	.word	0x20004f48
 8062e24:	20004e30 	.word	0x20004e30

08062e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8062e28:	b580      	push	{r7, lr}
 8062e2a:	b094      	sub	sp, #80	; 0x50
 8062e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8062e2e:	f107 0320 	add.w	r3, r7, #32
 8062e32:	2230      	movs	r2, #48	; 0x30
 8062e34:	2100      	movs	r1, #0
 8062e36:	4618      	mov	r0, r3
 8062e38:	f00f fbe9 	bl	807260e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8062e3c:	f107 030c 	add.w	r3, r7, #12
 8062e40:	2200      	movs	r2, #0
 8062e42:	601a      	str	r2, [r3, #0]
 8062e44:	605a      	str	r2, [r3, #4]
 8062e46:	609a      	str	r2, [r3, #8]
 8062e48:	60da      	str	r2, [r3, #12]
 8062e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8062e4c:	2300      	movs	r3, #0
 8062e4e:	60bb      	str	r3, [r7, #8]
 8062e50:	4b28      	ldr	r3, [pc, #160]	; (8062ef4 <SystemClock_Config+0xcc>)
 8062e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062e54:	4a27      	ldr	r2, [pc, #156]	; (8062ef4 <SystemClock_Config+0xcc>)
 8062e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8062e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8062e5c:	4b25      	ldr	r3, [pc, #148]	; (8062ef4 <SystemClock_Config+0xcc>)
 8062e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8062e64:	60bb      	str	r3, [r7, #8]
 8062e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8062e68:	2300      	movs	r3, #0
 8062e6a:	607b      	str	r3, [r7, #4]
 8062e6c:	4b22      	ldr	r3, [pc, #136]	; (8062ef8 <SystemClock_Config+0xd0>)
 8062e6e:	681b      	ldr	r3, [r3, #0]
 8062e70:	4a21      	ldr	r2, [pc, #132]	; (8062ef8 <SystemClock_Config+0xd0>)
 8062e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8062e76:	6013      	str	r3, [r2, #0]
 8062e78:	4b1f      	ldr	r3, [pc, #124]	; (8062ef8 <SystemClock_Config+0xd0>)
 8062e7a:	681b      	ldr	r3, [r3, #0]
 8062e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8062e80:	607b      	str	r3, [r7, #4]
 8062e82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8062e84:	2309      	movs	r3, #9
 8062e86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8062e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8062e8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8062e8e:	2301      	movs	r3, #1
 8062e90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8062e92:	2302      	movs	r3, #2
 8062e94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8062e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8062e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8062e9c:	2304      	movs	r3, #4
 8062e9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8062ea0:	23c0      	movs	r3, #192	; 0xc0
 8062ea2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8062ea4:	2304      	movs	r3, #4
 8062ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8062ea8:	2308      	movs	r3, #8
 8062eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8062eac:	f107 0320 	add.w	r3, r7, #32
 8062eb0:	4618      	mov	r0, r3
 8062eb2:	f004 fadd 	bl	8067470 <HAL_RCC_OscConfig>
 8062eb6:	4603      	mov	r3, r0
 8062eb8:	2b00      	cmp	r3, #0
 8062eba:	d001      	beq.n	8062ec0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8062ebc:	f000 f830 	bl	8062f20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8062ec0:	230f      	movs	r3, #15
 8062ec2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8062ec4:	2302      	movs	r3, #2
 8062ec6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8062ec8:	2300      	movs	r3, #0
 8062eca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8062ecc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8062ed0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8062ed2:	2300      	movs	r3, #0
 8062ed4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8062ed6:	f107 030c 	add.w	r3, r7, #12
 8062eda:	2103      	movs	r1, #3
 8062edc:	4618      	mov	r0, r3
 8062ede:	f004 fdef 	bl	8067ac0 <HAL_RCC_ClockConfig>
 8062ee2:	4603      	mov	r3, r0
 8062ee4:	2b00      	cmp	r3, #0
 8062ee6:	d001      	beq.n	8062eec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8062ee8:	f000 f81a 	bl	8062f20 <Error_Handler>
  }
}
 8062eec:	bf00      	nop
 8062eee:	3750      	adds	r7, #80	; 0x50
 8062ef0:	46bd      	mov	sp, r7
 8062ef2:	bd80      	pop	{r7, pc}
 8062ef4:	40023800 	.word	0x40023800
 8062ef8:	40007000 	.word	0x40007000

08062efc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8062efc:	b580      	push	{r7, lr}
 8062efe:	b082      	sub	sp, #8
 8062f00:	af00      	add	r7, sp, #0
 8062f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8062f04:	687b      	ldr	r3, [r7, #4]
 8062f06:	681b      	ldr	r3, [r3, #0]
 8062f08:	4a04      	ldr	r2, [pc, #16]	; (8062f1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8062f0a:	4293      	cmp	r3, r2
 8062f0c:	d101      	bne.n	8062f12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8062f0e:	f000 fcc3 	bl	8063898 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8062f12:	bf00      	nop
 8062f14:	3708      	adds	r7, #8
 8062f16:	46bd      	mov	sp, r7
 8062f18:	bd80      	pop	{r7, pc}
 8062f1a:	bf00      	nop
 8062f1c:	40000c00 	.word	0x40000c00

08062f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8062f20:	b480      	push	{r7}
 8062f22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8062f24:	b672      	cpsid	i
}
 8062f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8062f28:	e7fe      	b.n	8062f28 <Error_Handler+0x8>

08062f2a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8062f2a:	b480      	push	{r7}
 8062f2c:	b083      	sub	sp, #12
 8062f2e:	af00      	add	r7, sp, #0
 8062f30:	6078      	str	r0, [r7, #4]
 8062f32:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8062f34:	bf00      	nop
 8062f36:	370c      	adds	r7, #12
 8062f38:	46bd      	mov	sp, r7
 8062f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062f3e:	4770      	bx	lr

08062f40 <MPU6050_Init>:
#include "mpu6050.h"
#include "i2c.h"
#include <stdio.h>

int MPU6050_Init(void){
 8062f40:	b580      	push	{r7, lr}
 8062f42:	b084      	sub	sp, #16
 8062f44:	af00      	add	r7, sp, #0

    uint8_t buffer[7];
    int res = 0;
 8062f46:	2300      	movs	r3, #0
 8062f48:	60fb      	str	r3, [r7, #12]

    buffer[0] = MPU6050_RA_PWR_MGMT_1;
 8062f4a:	236b      	movs	r3, #107	; 0x6b
 8062f4c:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x00;
 8062f4e:	2300      	movs	r3, #0
 8062f50:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8062f52:	1d3b      	adds	r3, r7, #4
 8062f54:	2202      	movs	r2, #2
 8062f56:	4619      	mov	r1, r3
 8062f58:	2068      	movs	r0, #104	; 0x68
 8062f5a:	f7ff fe4d 	bl	8062bf8 <I2C_WriteBuffer>
 8062f5e:	60f8      	str	r0, [r7, #12]
    if (res != 0) return res;
 8062f60:	68fb      	ldr	r3, [r7, #12]
 8062f62:	2b00      	cmp	r3, #0
 8062f64:	d001      	beq.n	8062f6a <MPU6050_Init+0x2a>
 8062f66:	68fb      	ldr	r3, [r7, #12]
 8062f68:	e01b      	b.n	8062fa2 <MPU6050_Init+0x62>

    buffer[0] = MPU6050_RA_GYRO_CONFIG;
 8062f6a:	231b      	movs	r3, #27
 8062f6c:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x8;
 8062f6e:	2308      	movs	r3, #8
 8062f70:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8062f72:	1d3b      	adds	r3, r7, #4
 8062f74:	2202      	movs	r2, #2
 8062f76:	4619      	mov	r1, r3
 8062f78:	2068      	movs	r0, #104	; 0x68
 8062f7a:	f7ff fe3d 	bl	8062bf8 <I2C_WriteBuffer>
 8062f7e:	60f8      	str	r0, [r7, #12]
    if (res != 0) return res;
 8062f80:	68fb      	ldr	r3, [r7, #12]
 8062f82:	2b00      	cmp	r3, #0
 8062f84:	d001      	beq.n	8062f8a <MPU6050_Init+0x4a>
 8062f86:	68fb      	ldr	r3, [r7, #12]
 8062f88:	e00b      	b.n	8062fa2 <MPU6050_Init+0x62>

    buffer[0] = MPU6050_RA_ACCEL_CONFIG;
 8062f8a:	231c      	movs	r3, #28
 8062f8c:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x10;
 8062f8e:	2310      	movs	r3, #16
 8062f90:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8062f92:	1d3b      	adds	r3, r7, #4
 8062f94:	2202      	movs	r2, #2
 8062f96:	4619      	mov	r1, r3
 8062f98:	2068      	movs	r0, #104	; 0x68
 8062f9a:	f7ff fe2d 	bl	8062bf8 <I2C_WriteBuffer>
 8062f9e:	60f8      	str	r0, [r7, #12]

    return res;
 8062fa0:	68fb      	ldr	r3, [r7, #12]
}
 8062fa2:	4618      	mov	r0, r3
 8062fa4:	3710      	adds	r7, #16
 8062fa6:	46bd      	mov	sp, r7
 8062fa8:	bd80      	pop	{r7, pc}

08062faa <MPU6050_GetAllData>:

void MPU6050_GetAllData(int16_t *Data){
 8062faa:	b580      	push	{r7, lr}
 8062fac:	b088      	sub	sp, #32
 8062fae:	af00      	add	r7, sp, #0
 8062fb0:	6078      	str	r0, [r7, #4]

  uint8_t accelbuffer[14];

  I2C_ReadBuffer(MPU6050_ADDRESS_AD0_LOW,MPU6050_RA_ACCEL_XOUT_H, accelbuffer, 14);
 8062fb2:	f107 0208 	add.w	r2, r7, #8
 8062fb6:	230e      	movs	r3, #14
 8062fb8:	213b      	movs	r1, #59	; 0x3b
 8062fba:	2068      	movs	r0, #104	; 0x68
 8062fbc:	f7ff fe4c 	bl	8062c58 <I2C_ReadBuffer>

  /* Registers 59 to 64 – Accelerometer Measurements */
  for (int i = 0; i< 3; i++)
 8062fc0:	2300      	movs	r3, #0
 8062fc2:	61fb      	str	r3, [r7, #28]
 8062fc4:	e01c      	b.n	8063000 <MPU6050_GetAllData+0x56>
      Data[i] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 8062fc6:	69fb      	ldr	r3, [r7, #28]
 8062fc8:	005b      	lsls	r3, r3, #1
 8062fca:	f107 0220 	add.w	r2, r7, #32
 8062fce:	4413      	add	r3, r2
 8062fd0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8062fd4:	021b      	lsls	r3, r3, #8
 8062fd6:	b29a      	uxth	r2, r3
 8062fd8:	69fb      	ldr	r3, [r7, #28]
 8062fda:	005b      	lsls	r3, r3, #1
 8062fdc:	3301      	adds	r3, #1
 8062fde:	f107 0120 	add.w	r1, r7, #32
 8062fe2:	440b      	add	r3, r1
 8062fe4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8062fe8:	b29b      	uxth	r3, r3
 8062fea:	4413      	add	r3, r2
 8062fec:	b299      	uxth	r1, r3
 8062fee:	69fb      	ldr	r3, [r7, #28]
 8062ff0:	005b      	lsls	r3, r3, #1
 8062ff2:	687a      	ldr	r2, [r7, #4]
 8062ff4:	4413      	add	r3, r2
 8062ff6:	b20a      	sxth	r2, r1
 8062ff8:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i< 3; i++)
 8062ffa:	69fb      	ldr	r3, [r7, #28]
 8062ffc:	3301      	adds	r3, #1
 8062ffe:	61fb      	str	r3, [r7, #28]
 8063000:	69fb      	ldr	r3, [r7, #28]
 8063002:	2b02      	cmp	r3, #2
 8063004:	dddf      	ble.n	8062fc6 <MPU6050_GetAllData+0x1c>

  /* Registers 65 and 66 – Temperature Measurement */

  /* Registers 67 to 72 – Gyroscope Measurements */
  for (int i = 4; i < 7; i++)
 8063006:	2304      	movs	r3, #4
 8063008:	61bb      	str	r3, [r7, #24]
 806300a:	e01f      	b.n	806304c <MPU6050_GetAllData+0xa2>
      Data[i - 1] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 806300c:	69bb      	ldr	r3, [r7, #24]
 806300e:	005b      	lsls	r3, r3, #1
 8063010:	f107 0220 	add.w	r2, r7, #32
 8063014:	4413      	add	r3, r2
 8063016:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 806301a:	021b      	lsls	r3, r3, #8
 806301c:	b29a      	uxth	r2, r3
 806301e:	69bb      	ldr	r3, [r7, #24]
 8063020:	005b      	lsls	r3, r3, #1
 8063022:	3301      	adds	r3, #1
 8063024:	f107 0120 	add.w	r1, r7, #32
 8063028:	440b      	add	r3, r1
 806302a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 806302e:	b29b      	uxth	r3, r3
 8063030:	4413      	add	r3, r2
 8063032:	b299      	uxth	r1, r3
 8063034:	69bb      	ldr	r3, [r7, #24]
 8063036:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 806303a:	3b01      	subs	r3, #1
 806303c:	005b      	lsls	r3, r3, #1
 806303e:	687a      	ldr	r2, [r7, #4]
 8063040:	4413      	add	r3, r2
 8063042:	b20a      	sxth	r2, r1
 8063044:	801a      	strh	r2, [r3, #0]
  for (int i = 4; i < 7; i++)
 8063046:	69bb      	ldr	r3, [r7, #24]
 8063048:	3301      	adds	r3, #1
 806304a:	61bb      	str	r3, [r7, #24]
 806304c:	69bb      	ldr	r3, [r7, #24]
 806304e:	2b06      	cmp	r3, #6
 8063050:	dddc      	ble.n	806300c <MPU6050_GetAllData+0x62>

}
 8063052:	bf00      	nop
 8063054:	bf00      	nop
 8063056:	3720      	adds	r7, #32
 8063058:	46bd      	mov	sp, r7
 806305a:	bd80      	pop	{r7, pc}

0806305c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 806305c:	b580      	push	{r7, lr}
 806305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8063060:	4b0f      	ldr	r3, [pc, #60]	; (80630a0 <MX_RTC_Init+0x44>)
 8063062:	4a10      	ldr	r2, [pc, #64]	; (80630a4 <MX_RTC_Init+0x48>)
 8063064:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8063066:	4b0e      	ldr	r3, [pc, #56]	; (80630a0 <MX_RTC_Init+0x44>)
 8063068:	2200      	movs	r2, #0
 806306a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 806306c:	4b0c      	ldr	r3, [pc, #48]	; (80630a0 <MX_RTC_Init+0x44>)
 806306e:	227f      	movs	r2, #127	; 0x7f
 8063070:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8063072:	4b0b      	ldr	r3, [pc, #44]	; (80630a0 <MX_RTC_Init+0x44>)
 8063074:	22ff      	movs	r2, #255	; 0xff
 8063076:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8063078:	4b09      	ldr	r3, [pc, #36]	; (80630a0 <MX_RTC_Init+0x44>)
 806307a:	2200      	movs	r2, #0
 806307c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 806307e:	4b08      	ldr	r3, [pc, #32]	; (80630a0 <MX_RTC_Init+0x44>)
 8063080:	2200      	movs	r2, #0
 8063082:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8063084:	4b06      	ldr	r3, [pc, #24]	; (80630a0 <MX_RTC_Init+0x44>)
 8063086:	2200      	movs	r2, #0
 8063088:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 806308a:	4805      	ldr	r0, [pc, #20]	; (80630a0 <MX_RTC_Init+0x44>)
 806308c:	f005 fa02 	bl	8068494 <HAL_RTC_Init>
 8063090:	4603      	mov	r3, r0
 8063092:	2b00      	cmp	r3, #0
 8063094:	d001      	beq.n	806309a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8063096:	f7ff ff43 	bl	8062f20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 806309a:	bf00      	nop
 806309c:	bd80      	pop	{r7, pc}
 806309e:	bf00      	nop
 80630a0:	20005714 	.word	0x20005714
 80630a4:	40002800 	.word	0x40002800

080630a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80630a8:	b580      	push	{r7, lr}
 80630aa:	b088      	sub	sp, #32
 80630ac:	af00      	add	r7, sp, #0
 80630ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80630b0:	f107 0308 	add.w	r3, r7, #8
 80630b4:	2200      	movs	r2, #0
 80630b6:	601a      	str	r2, [r3, #0]
 80630b8:	605a      	str	r2, [r3, #4]
 80630ba:	609a      	str	r2, [r3, #8]
 80630bc:	60da      	str	r2, [r3, #12]
 80630be:	611a      	str	r2, [r3, #16]
 80630c0:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80630c2:	687b      	ldr	r3, [r7, #4]
 80630c4:	681b      	ldr	r3, [r3, #0]
 80630c6:	4a0c      	ldr	r2, [pc, #48]	; (80630f8 <HAL_RTC_MspInit+0x50>)
 80630c8:	4293      	cmp	r3, r2
 80630ca:	d111      	bne.n	80630f0 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80630cc:	2302      	movs	r3, #2
 80630ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80630d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80630d4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80630d6:	f107 0308 	add.w	r3, r7, #8
 80630da:	4618      	mov	r0, r3
 80630dc:	f004 ffc6 	bl	806806c <HAL_RCCEx_PeriphCLKConfig>
 80630e0:	4603      	mov	r3, r0
 80630e2:	2b00      	cmp	r3, #0
 80630e4:	d001      	beq.n	80630ea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80630e6:	f7ff ff1b 	bl	8062f20 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80630ea:	4b04      	ldr	r3, [pc, #16]	; (80630fc <HAL_RTC_MspInit+0x54>)
 80630ec:	2201      	movs	r2, #1
 80630ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80630f0:	bf00      	nop
 80630f2:	3720      	adds	r7, #32
 80630f4:	46bd      	mov	sp, r7
 80630f6:	bd80      	pop	{r7, pc}
 80630f8:	40002800 	.word	0x40002800
 80630fc:	42470e3c 	.word	0x42470e3c

08063100 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8063100:	b580      	push	{r7, lr}
 8063102:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8063104:	4b17      	ldr	r3, [pc, #92]	; (8063164 <MX_SPI1_Init+0x64>)
 8063106:	4a18      	ldr	r2, [pc, #96]	; (8063168 <MX_SPI1_Init+0x68>)
 8063108:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 806310a:	4b16      	ldr	r3, [pc, #88]	; (8063164 <MX_SPI1_Init+0x64>)
 806310c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8063110:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8063112:	4b14      	ldr	r3, [pc, #80]	; (8063164 <MX_SPI1_Init+0x64>)
 8063114:	2200      	movs	r2, #0
 8063116:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8063118:	4b12      	ldr	r3, [pc, #72]	; (8063164 <MX_SPI1_Init+0x64>)
 806311a:	2200      	movs	r2, #0
 806311c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 806311e:	4b11      	ldr	r3, [pc, #68]	; (8063164 <MX_SPI1_Init+0x64>)
 8063120:	2200      	movs	r2, #0
 8063122:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8063124:	4b0f      	ldr	r3, [pc, #60]	; (8063164 <MX_SPI1_Init+0x64>)
 8063126:	2200      	movs	r2, #0
 8063128:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 806312a:	4b0e      	ldr	r3, [pc, #56]	; (8063164 <MX_SPI1_Init+0x64>)
 806312c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8063130:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8063132:	4b0c      	ldr	r3, [pc, #48]	; (8063164 <MX_SPI1_Init+0x64>)
 8063134:	2230      	movs	r2, #48	; 0x30
 8063136:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8063138:	4b0a      	ldr	r3, [pc, #40]	; (8063164 <MX_SPI1_Init+0x64>)
 806313a:	2200      	movs	r2, #0
 806313c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 806313e:	4b09      	ldr	r3, [pc, #36]	; (8063164 <MX_SPI1_Init+0x64>)
 8063140:	2200      	movs	r2, #0
 8063142:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8063144:	4b07      	ldr	r3, [pc, #28]	; (8063164 <MX_SPI1_Init+0x64>)
 8063146:	2200      	movs	r2, #0
 8063148:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 806314a:	4b06      	ldr	r3, [pc, #24]	; (8063164 <MX_SPI1_Init+0x64>)
 806314c:	220a      	movs	r2, #10
 806314e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8063150:	4804      	ldr	r0, [pc, #16]	; (8063164 <MX_SPI1_Init+0x64>)
 8063152:	f005 fb35 	bl	80687c0 <HAL_SPI_Init>
 8063156:	4603      	mov	r3, r0
 8063158:	2b00      	cmp	r3, #0
 806315a:	d001      	beq.n	8063160 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 806315c:	f7ff fee0 	bl	8062f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8063160:	bf00      	nop
 8063162:	bd80      	pop	{r7, pc}
 8063164:	20005734 	.word	0x20005734
 8063168:	40013000 	.word	0x40013000

0806316c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 806316c:	b580      	push	{r7, lr}
 806316e:	b08a      	sub	sp, #40	; 0x28
 8063170:	af00      	add	r7, sp, #0
 8063172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8063174:	f107 0314 	add.w	r3, r7, #20
 8063178:	2200      	movs	r2, #0
 806317a:	601a      	str	r2, [r3, #0]
 806317c:	605a      	str	r2, [r3, #4]
 806317e:	609a      	str	r2, [r3, #8]
 8063180:	60da      	str	r2, [r3, #12]
 8063182:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8063184:	687b      	ldr	r3, [r7, #4]
 8063186:	681b      	ldr	r3, [r3, #0]
 8063188:	4a19      	ldr	r2, [pc, #100]	; (80631f0 <HAL_SPI_MspInit+0x84>)
 806318a:	4293      	cmp	r3, r2
 806318c:	d12b      	bne.n	80631e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 806318e:	2300      	movs	r3, #0
 8063190:	613b      	str	r3, [r7, #16]
 8063192:	4b18      	ldr	r3, [pc, #96]	; (80631f4 <HAL_SPI_MspInit+0x88>)
 8063194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8063196:	4a17      	ldr	r2, [pc, #92]	; (80631f4 <HAL_SPI_MspInit+0x88>)
 8063198:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 806319c:	6453      	str	r3, [r2, #68]	; 0x44
 806319e:	4b15      	ldr	r3, [pc, #84]	; (80631f4 <HAL_SPI_MspInit+0x88>)
 80631a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80631a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80631a6:	613b      	str	r3, [r7, #16]
 80631a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80631aa:	2300      	movs	r3, #0
 80631ac:	60fb      	str	r3, [r7, #12]
 80631ae:	4b11      	ldr	r3, [pc, #68]	; (80631f4 <HAL_SPI_MspInit+0x88>)
 80631b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80631b2:	4a10      	ldr	r2, [pc, #64]	; (80631f4 <HAL_SPI_MspInit+0x88>)
 80631b4:	f043 0301 	orr.w	r3, r3, #1
 80631b8:	6313      	str	r3, [r2, #48]	; 0x30
 80631ba:	4b0e      	ldr	r3, [pc, #56]	; (80631f4 <HAL_SPI_MspInit+0x88>)
 80631bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80631be:	f003 0301 	and.w	r3, r3, #1
 80631c2:	60fb      	str	r3, [r7, #12]
 80631c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80631c6:	23e0      	movs	r3, #224	; 0xe0
 80631c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80631ca:	2302      	movs	r3, #2
 80631cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80631ce:	2301      	movs	r3, #1
 80631d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80631d2:	2303      	movs	r3, #3
 80631d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80631d6:	2305      	movs	r3, #5
 80631d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80631da:	f107 0314 	add.w	r3, r7, #20
 80631de:	4619      	mov	r1, r3
 80631e0:	4805      	ldr	r0, [pc, #20]	; (80631f8 <HAL_SPI_MspInit+0x8c>)
 80631e2:	f002 f961 	bl	80654a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80631e6:	bf00      	nop
 80631e8:	3728      	adds	r7, #40	; 0x28
 80631ea:	46bd      	mov	sp, r7
 80631ec:	bd80      	pop	{r7, pc}
 80631ee:	bf00      	nop
 80631f0:	40013000 	.word	0x40013000
 80631f4:	40023800 	.word	0x40023800
 80631f8:	40020000 	.word	0x40020000

080631fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80631fc:	b580      	push	{r7, lr}
 80631fe:	b082      	sub	sp, #8
 8063200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8063202:	2300      	movs	r3, #0
 8063204:	607b      	str	r3, [r7, #4]
 8063206:	4b12      	ldr	r3, [pc, #72]	; (8063250 <HAL_MspInit+0x54>)
 8063208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806320a:	4a11      	ldr	r2, [pc, #68]	; (8063250 <HAL_MspInit+0x54>)
 806320c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8063210:	6453      	str	r3, [r2, #68]	; 0x44
 8063212:	4b0f      	ldr	r3, [pc, #60]	; (8063250 <HAL_MspInit+0x54>)
 8063214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8063216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 806321a:	607b      	str	r3, [r7, #4]
 806321c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 806321e:	2300      	movs	r3, #0
 8063220:	603b      	str	r3, [r7, #0]
 8063222:	4b0b      	ldr	r3, [pc, #44]	; (8063250 <HAL_MspInit+0x54>)
 8063224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063226:	4a0a      	ldr	r2, [pc, #40]	; (8063250 <HAL_MspInit+0x54>)
 8063228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 806322c:	6413      	str	r3, [r2, #64]	; 0x40
 806322e:	4b08      	ldr	r3, [pc, #32]	; (8063250 <HAL_MspInit+0x54>)
 8063230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8063236:	603b      	str	r3, [r7, #0]
 8063238:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 806323a:	2200      	movs	r2, #0
 806323c:	210f      	movs	r1, #15
 806323e:	f06f 0001 	mvn.w	r0, #1
 8063242:	f001 fb6b 	bl	806491c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8063246:	bf00      	nop
 8063248:	3708      	adds	r7, #8
 806324a:	46bd      	mov	sp, r7
 806324c:	bd80      	pop	{r7, pc}
 806324e:	bf00      	nop
 8063250:	40023800 	.word	0x40023800

08063254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8063254:	b580      	push	{r7, lr}
 8063256:	b08c      	sub	sp, #48	; 0x30
 8063258:	af00      	add	r7, sp, #0
 806325a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 806325c:	2300      	movs	r3, #0
 806325e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8063260:	2300      	movs	r3, #0
 8063262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8063264:	2200      	movs	r2, #0
 8063266:	6879      	ldr	r1, [r7, #4]
 8063268:	2032      	movs	r0, #50	; 0x32
 806326a:	f001 fb57 	bl	806491c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 806326e:	2032      	movs	r0, #50	; 0x32
 8063270:	f001 fb80 	bl	8064974 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8063274:	2300      	movs	r3, #0
 8063276:	60fb      	str	r3, [r7, #12]
 8063278:	4b1f      	ldr	r3, [pc, #124]	; (80632f8 <HAL_InitTick+0xa4>)
 806327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806327c:	4a1e      	ldr	r2, [pc, #120]	; (80632f8 <HAL_InitTick+0xa4>)
 806327e:	f043 0308 	orr.w	r3, r3, #8
 8063282:	6413      	str	r3, [r2, #64]	; 0x40
 8063284:	4b1c      	ldr	r3, [pc, #112]	; (80632f8 <HAL_InitTick+0xa4>)
 8063286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063288:	f003 0308 	and.w	r3, r3, #8
 806328c:	60fb      	str	r3, [r7, #12]
 806328e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8063290:	f107 0210 	add.w	r2, r7, #16
 8063294:	f107 0314 	add.w	r3, r7, #20
 8063298:	4611      	mov	r1, r2
 806329a:	4618      	mov	r0, r3
 806329c:	f004 feb4 	bl	8068008 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80632a0:	f004 fe8a 	bl	8067fb8 <HAL_RCC_GetPCLK1Freq>
 80632a4:	4603      	mov	r3, r0
 80632a6:	005b      	lsls	r3, r3, #1
 80632a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80632aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80632ac:	4a13      	ldr	r2, [pc, #76]	; (80632fc <HAL_InitTick+0xa8>)
 80632ae:	fba2 2303 	umull	r2, r3, r2, r3
 80632b2:	0c9b      	lsrs	r3, r3, #18
 80632b4:	3b01      	subs	r3, #1
 80632b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80632b8:	4b11      	ldr	r3, [pc, #68]	; (8063300 <HAL_InitTick+0xac>)
 80632ba:	4a12      	ldr	r2, [pc, #72]	; (8063304 <HAL_InitTick+0xb0>)
 80632bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80632be:	4b10      	ldr	r3, [pc, #64]	; (8063300 <HAL_InitTick+0xac>)
 80632c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80632c4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80632c6:	4a0e      	ldr	r2, [pc, #56]	; (8063300 <HAL_InitTick+0xac>)
 80632c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80632ca:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80632cc:	4b0c      	ldr	r3, [pc, #48]	; (8063300 <HAL_InitTick+0xac>)
 80632ce:	2200      	movs	r2, #0
 80632d0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80632d2:	4b0b      	ldr	r3, [pc, #44]	; (8063300 <HAL_InitTick+0xac>)
 80632d4:	2200      	movs	r2, #0
 80632d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80632d8:	4809      	ldr	r0, [pc, #36]	; (8063300 <HAL_InitTick+0xac>)
 80632da:	f005 fe85 	bl	8068fe8 <HAL_TIM_Base_Init>
 80632de:	4603      	mov	r3, r0
 80632e0:	2b00      	cmp	r3, #0
 80632e2:	d104      	bne.n	80632ee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80632e4:	4806      	ldr	r0, [pc, #24]	; (8063300 <HAL_InitTick+0xac>)
 80632e6:	f005 ff4f 	bl	8069188 <HAL_TIM_Base_Start_IT>
 80632ea:	4603      	mov	r3, r0
 80632ec:	e000      	b.n	80632f0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80632ee:	2301      	movs	r3, #1
}
 80632f0:	4618      	mov	r0, r3
 80632f2:	3730      	adds	r7, #48	; 0x30
 80632f4:	46bd      	mov	sp, r7
 80632f6:	bd80      	pop	{r7, pc}
 80632f8:	40023800 	.word	0x40023800
 80632fc:	431bde83 	.word	0x431bde83
 8063300:	2000578c 	.word	0x2000578c
 8063304:	40000c00 	.word	0x40000c00

08063308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8063308:	b480      	push	{r7}
 806330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 806330c:	e7fe      	b.n	806330c <NMI_Handler+0x4>

0806330e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 806330e:	b480      	push	{r7}
 8063310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8063312:	e7fe      	b.n	8063312 <HardFault_Handler+0x4>

08063314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8063314:	b480      	push	{r7}
 8063316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8063318:	e7fe      	b.n	8063318 <MemManage_Handler+0x4>

0806331a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 806331a:	b480      	push	{r7}
 806331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 806331e:	e7fe      	b.n	806331e <BusFault_Handler+0x4>

08063320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8063320:	b480      	push	{r7}
 8063322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8063324:	e7fe      	b.n	8063324 <UsageFault_Handler+0x4>

08063326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8063326:	b480      	push	{r7}
 8063328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 806332a:	bf00      	nop
 806332c:	46bd      	mov	sp, r7
 806332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063332:	4770      	bx	lr

08063334 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8063334:	b580      	push	{r7, lr}
 8063336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8063338:	4802      	ldr	r0, [pc, #8]	; (8063344 <ADC_IRQHandler+0x10>)
 806333a:	f000 fc4f 	bl	8063bdc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 806333e:	bf00      	nop
 8063340:	bd80      	pop	{r7, pc}
 8063342:	bf00      	nop
 8063344:	20004f48 	.word	0x20004f48

08063348 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8063348:	b580      	push	{r7, lr}
 806334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 806334c:	4802      	ldr	r0, [pc, #8]	; (8063358 <USART2_IRQHandler+0x10>)
 806334e:	f006 fb8b 	bl	8069a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8063352:	bf00      	nop
 8063354:	bd80      	pop	{r7, pc}
 8063356:	bf00      	nop
 8063358:	2000582c 	.word	0x2000582c

0806335c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 806335c:	b580      	push	{r7, lr}
 806335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8063360:	4802      	ldr	r0, [pc, #8]	; (806336c <TIM5_IRQHandler+0x10>)
 8063362:	f005 ffa3 	bl	80692ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8063366:	bf00      	nop
 8063368:	bd80      	pop	{r7, pc}
 806336a:	bf00      	nop
 806336c:	2000578c 	.word	0x2000578c

08063370 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8063370:	b580      	push	{r7, lr}
 8063372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8063374:	4802      	ldr	r0, [pc, #8]	; (8063380 <DMA2_Stream0_IRQHandler+0x10>)
 8063376:	f001 fe2d 	bl	8064fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 806337a:	bf00      	nop
 806337c:	bd80      	pop	{r7, pc}
 806337e:	bf00      	nop
 8063380:	20004f90 	.word	0x20004f90

08063384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8063384:	b480      	push	{r7}
 8063386:	af00      	add	r7, sp, #0
	return 1;
 8063388:	2301      	movs	r3, #1
}
 806338a:	4618      	mov	r0, r3
 806338c:	46bd      	mov	sp, r7
 806338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063392:	4770      	bx	lr

08063394 <_kill>:

int _kill(int pid, int sig)
{
 8063394:	b580      	push	{r7, lr}
 8063396:	b082      	sub	sp, #8
 8063398:	af00      	add	r7, sp, #0
 806339a:	6078      	str	r0, [r7, #4]
 806339c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 806339e:	f00f f805 	bl	80723ac <__errno>
 80633a2:	4603      	mov	r3, r0
 80633a4:	2216      	movs	r2, #22
 80633a6:	601a      	str	r2, [r3, #0]
	return -1;
 80633a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80633ac:	4618      	mov	r0, r3
 80633ae:	3708      	adds	r7, #8
 80633b0:	46bd      	mov	sp, r7
 80633b2:	bd80      	pop	{r7, pc}

080633b4 <_exit>:

void _exit (int status)
{
 80633b4:	b580      	push	{r7, lr}
 80633b6:	b082      	sub	sp, #8
 80633b8:	af00      	add	r7, sp, #0
 80633ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80633bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80633c0:	6878      	ldr	r0, [r7, #4]
 80633c2:	f7ff ffe7 	bl	8063394 <_kill>
	while (1) {}		/* Make sure we hang here */
 80633c6:	e7fe      	b.n	80633c6 <_exit+0x12>

080633c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80633c8:	b580      	push	{r7, lr}
 80633ca:	b086      	sub	sp, #24
 80633cc:	af00      	add	r7, sp, #0
 80633ce:	60f8      	str	r0, [r7, #12]
 80633d0:	60b9      	str	r1, [r7, #8]
 80633d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80633d4:	2300      	movs	r3, #0
 80633d6:	617b      	str	r3, [r7, #20]
 80633d8:	e00a      	b.n	80633f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80633da:	f3af 8000 	nop.w
 80633de:	4601      	mov	r1, r0
 80633e0:	68bb      	ldr	r3, [r7, #8]
 80633e2:	1c5a      	adds	r2, r3, #1
 80633e4:	60ba      	str	r2, [r7, #8]
 80633e6:	b2ca      	uxtb	r2, r1
 80633e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80633ea:	697b      	ldr	r3, [r7, #20]
 80633ec:	3301      	adds	r3, #1
 80633ee:	617b      	str	r3, [r7, #20]
 80633f0:	697a      	ldr	r2, [r7, #20]
 80633f2:	687b      	ldr	r3, [r7, #4]
 80633f4:	429a      	cmp	r2, r3
 80633f6:	dbf0      	blt.n	80633da <_read+0x12>
	}

return len;
 80633f8:	687b      	ldr	r3, [r7, #4]
}
 80633fa:	4618      	mov	r0, r3
 80633fc:	3718      	adds	r7, #24
 80633fe:	46bd      	mov	sp, r7
 8063400:	bd80      	pop	{r7, pc}

08063402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8063402:	b580      	push	{r7, lr}
 8063404:	b086      	sub	sp, #24
 8063406:	af00      	add	r7, sp, #0
 8063408:	60f8      	str	r0, [r7, #12]
 806340a:	60b9      	str	r1, [r7, #8]
 806340c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 806340e:	2300      	movs	r3, #0
 8063410:	617b      	str	r3, [r7, #20]
 8063412:	e009      	b.n	8063428 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8063414:	68bb      	ldr	r3, [r7, #8]
 8063416:	1c5a      	adds	r2, r3, #1
 8063418:	60ba      	str	r2, [r7, #8]
 806341a:	781b      	ldrb	r3, [r3, #0]
 806341c:	4618      	mov	r0, r3
 806341e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8063422:	697b      	ldr	r3, [r7, #20]
 8063424:	3301      	adds	r3, #1
 8063426:	617b      	str	r3, [r7, #20]
 8063428:	697a      	ldr	r2, [r7, #20]
 806342a:	687b      	ldr	r3, [r7, #4]
 806342c:	429a      	cmp	r2, r3
 806342e:	dbf1      	blt.n	8063414 <_write+0x12>
	}
	return len;
 8063430:	687b      	ldr	r3, [r7, #4]
}
 8063432:	4618      	mov	r0, r3
 8063434:	3718      	adds	r7, #24
 8063436:	46bd      	mov	sp, r7
 8063438:	bd80      	pop	{r7, pc}

0806343a <_close>:

int _close(int file)
{
 806343a:	b480      	push	{r7}
 806343c:	b083      	sub	sp, #12
 806343e:	af00      	add	r7, sp, #0
 8063440:	6078      	str	r0, [r7, #4]
	return -1;
 8063442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8063446:	4618      	mov	r0, r3
 8063448:	370c      	adds	r7, #12
 806344a:	46bd      	mov	sp, r7
 806344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063450:	4770      	bx	lr

08063452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8063452:	b480      	push	{r7}
 8063454:	b083      	sub	sp, #12
 8063456:	af00      	add	r7, sp, #0
 8063458:	6078      	str	r0, [r7, #4]
 806345a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 806345c:	683b      	ldr	r3, [r7, #0]
 806345e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8063462:	605a      	str	r2, [r3, #4]
	return 0;
 8063464:	2300      	movs	r3, #0
}
 8063466:	4618      	mov	r0, r3
 8063468:	370c      	adds	r7, #12
 806346a:	46bd      	mov	sp, r7
 806346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063470:	4770      	bx	lr

08063472 <_isatty>:

int _isatty(int file)
{
 8063472:	b480      	push	{r7}
 8063474:	b083      	sub	sp, #12
 8063476:	af00      	add	r7, sp, #0
 8063478:	6078      	str	r0, [r7, #4]
	return 1;
 806347a:	2301      	movs	r3, #1
}
 806347c:	4618      	mov	r0, r3
 806347e:	370c      	adds	r7, #12
 8063480:	46bd      	mov	sp, r7
 8063482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063486:	4770      	bx	lr

08063488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8063488:	b480      	push	{r7}
 806348a:	b085      	sub	sp, #20
 806348c:	af00      	add	r7, sp, #0
 806348e:	60f8      	str	r0, [r7, #12]
 8063490:	60b9      	str	r1, [r7, #8]
 8063492:	607a      	str	r2, [r7, #4]
	return 0;
 8063494:	2300      	movs	r3, #0
}
 8063496:	4618      	mov	r0, r3
 8063498:	3714      	adds	r7, #20
 806349a:	46bd      	mov	sp, r7
 806349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80634a0:	4770      	bx	lr
	...

080634a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80634a4:	b580      	push	{r7, lr}
 80634a6:	b086      	sub	sp, #24
 80634a8:	af00      	add	r7, sp, #0
 80634aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80634ac:	4a14      	ldr	r2, [pc, #80]	; (8063500 <_sbrk+0x5c>)
 80634ae:	4b15      	ldr	r3, [pc, #84]	; (8063504 <_sbrk+0x60>)
 80634b0:	1ad3      	subs	r3, r2, r3
 80634b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80634b4:	697b      	ldr	r3, [r7, #20]
 80634b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80634b8:	4b13      	ldr	r3, [pc, #76]	; (8063508 <_sbrk+0x64>)
 80634ba:	681b      	ldr	r3, [r3, #0]
 80634bc:	2b00      	cmp	r3, #0
 80634be:	d102      	bne.n	80634c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80634c0:	4b11      	ldr	r3, [pc, #68]	; (8063508 <_sbrk+0x64>)
 80634c2:	4a12      	ldr	r2, [pc, #72]	; (806350c <_sbrk+0x68>)
 80634c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80634c6:	4b10      	ldr	r3, [pc, #64]	; (8063508 <_sbrk+0x64>)
 80634c8:	681a      	ldr	r2, [r3, #0]
 80634ca:	687b      	ldr	r3, [r7, #4]
 80634cc:	4413      	add	r3, r2
 80634ce:	693a      	ldr	r2, [r7, #16]
 80634d0:	429a      	cmp	r2, r3
 80634d2:	d207      	bcs.n	80634e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80634d4:	f00e ff6a 	bl	80723ac <__errno>
 80634d8:	4603      	mov	r3, r0
 80634da:	220c      	movs	r2, #12
 80634dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80634de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80634e2:	e009      	b.n	80634f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80634e4:	4b08      	ldr	r3, [pc, #32]	; (8063508 <_sbrk+0x64>)
 80634e6:	681b      	ldr	r3, [r3, #0]
 80634e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80634ea:	4b07      	ldr	r3, [pc, #28]	; (8063508 <_sbrk+0x64>)
 80634ec:	681a      	ldr	r2, [r3, #0]
 80634ee:	687b      	ldr	r3, [r7, #4]
 80634f0:	4413      	add	r3, r2
 80634f2:	4a05      	ldr	r2, [pc, #20]	; (8063508 <_sbrk+0x64>)
 80634f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80634f6:	68fb      	ldr	r3, [r7, #12]
}
 80634f8:	4618      	mov	r0, r3
 80634fa:	3718      	adds	r7, #24
 80634fc:	46bd      	mov	sp, r7
 80634fe:	bd80      	pop	{r7, pc}
 8063500:	20020000 	.word	0x20020000
 8063504:	00000400 	.word	0x00000400
 8063508:	2000041c 	.word	0x2000041c
 806350c:	20005d38 	.word	0x20005d38

08063510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8063510:	b480      	push	{r7}
 8063512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8063514:	4b07      	ldr	r3, [pc, #28]	; (8063534 <SystemInit+0x24>)
 8063516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 806351a:	4a06      	ldr	r2, [pc, #24]	; (8063534 <SystemInit+0x24>)
 806351c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8063520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8063524:	4b03      	ldr	r3, [pc, #12]	; (8063534 <SystemInit+0x24>)
 8063526:	4a04      	ldr	r2, [pc, #16]	; (8063538 <SystemInit+0x28>)
 8063528:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 806352a:	bf00      	nop
 806352c:	46bd      	mov	sp, r7
 806352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063532:	4770      	bx	lr
 8063534:	e000ed00 	.word	0xe000ed00
 8063538:	08060000 	.word	0x08060000

0806353c <TEMT6000_Init>:
ADC_HandleTypeDef *temt6000_adc;

volatile uint16_t AdcValue[TEMT6000_ADC_SAMPLES];

TEMT6000_STATUS TEMT6000_Init(ADC_HandleTypeDef *hadc)
{
 806353c:	b580      	push	{r7, lr}
 806353e:	b082      	sub	sp, #8
 8063540:	af00      	add	r7, sp, #0
 8063542:	6078      	str	r0, [r7, #4]
	temt6000_adc = hadc;
 8063544:	4a09      	ldr	r2, [pc, #36]	; (806356c <TEMT6000_Init+0x30>)
 8063546:	687b      	ldr	r3, [r7, #4]
 8063548:	6013      	str	r3, [r2, #0]

	if(HAL_OK == HAL_ADC_Start_DMA(temt6000_adc, (uint32_t*)AdcValue, TEMT6000_ADC_SAMPLES))
 806354a:	4b08      	ldr	r3, [pc, #32]	; (806356c <TEMT6000_Init+0x30>)
 806354c:	681b      	ldr	r3, [r3, #0]
 806354e:	2208      	movs	r2, #8
 8063550:	4907      	ldr	r1, [pc, #28]	; (8063570 <TEMT6000_Init+0x34>)
 8063552:	4618      	mov	r0, r3
 8063554:	f000 fcb2 	bl	8063ebc <HAL_ADC_Start_DMA>
 8063558:	4603      	mov	r3, r0
 806355a:	2b00      	cmp	r3, #0
 806355c:	d101      	bne.n	8063562 <TEMT6000_Init+0x26>
		return TEMT6000_OK;
 806355e:	2300      	movs	r3, #0
 8063560:	e000      	b.n	8063564 <TEMT6000_Init+0x28>

	return TEMT6000_ERROR;
 8063562:	2301      	movs	r3, #1
}
 8063564:	4618      	mov	r0, r3
 8063566:	3708      	adds	r7, #8
 8063568:	46bd      	mov	sp, r7
 806356a:	bd80      	pop	{r7, pc}
 806356c:	200057d4 	.word	0x200057d4
 8063570:	200057d8 	.word	0x200057d8

08063574 <TEMT6000_ReadLight>:

TEMT6000_STATUS TEMT6000_ReadLight(float *Result)
{
 8063574:	b580      	push	{r7, lr}
 8063576:	b084      	sub	sp, #16
 8063578:	af00      	add	r7, sp, #0
 806357a:	6078      	str	r0, [r7, #4]
	uint32_t AdcAverage;
	uint8_t i;

	AdcAverage = 0;
 806357c:	2300      	movs	r3, #0
 806357e:	60fb      	str	r3, [r7, #12]

	if(HAL_OK !=HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcValue, TEMT6000_ADC_SAMPLES))return TEMT6000_ERROR;
 8063580:	2208      	movs	r2, #8
 8063582:	491d      	ldr	r1, [pc, #116]	; (80635f8 <TEMT6000_ReadLight+0x84>)
 8063584:	481d      	ldr	r0, [pc, #116]	; (80635fc <TEMT6000_ReadLight+0x88>)
 8063586:	f000 fc99 	bl	8063ebc <HAL_ADC_Start_DMA>
 806358a:	4603      	mov	r3, r0
 806358c:	2b00      	cmp	r3, #0
 806358e:	d001      	beq.n	8063594 <TEMT6000_ReadLight+0x20>
 8063590:	2301      	movs	r3, #1
 8063592:	e02d      	b.n	80635f0 <TEMT6000_ReadLight+0x7c>


	for(i = 0; i < TEMT6000_ADC_SAMPLES; i++)
 8063594:	2300      	movs	r3, #0
 8063596:	72fb      	strb	r3, [r7, #11]
 8063598:	e00b      	b.n	80635b2 <TEMT6000_ReadLight+0x3e>
	{
		AdcAverage += AdcValue[i];
 806359a:	7afb      	ldrb	r3, [r7, #11]
 806359c:	4a16      	ldr	r2, [pc, #88]	; (80635f8 <TEMT6000_ReadLight+0x84>)
 806359e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80635a2:	b29b      	uxth	r3, r3
 80635a4:	461a      	mov	r2, r3
 80635a6:	68fb      	ldr	r3, [r7, #12]
 80635a8:	4413      	add	r3, r2
 80635aa:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < TEMT6000_ADC_SAMPLES; i++)
 80635ac:	7afb      	ldrb	r3, [r7, #11]
 80635ae:	3301      	adds	r3, #1
 80635b0:	72fb      	strb	r3, [r7, #11]
 80635b2:	7afb      	ldrb	r3, [r7, #11]
 80635b4:	2b07      	cmp	r3, #7
 80635b6:	d9f0      	bls.n	806359a <TEMT6000_ReadLight+0x26>
	}

	AdcAverage /= TEMT6000_ADC_SAMPLES;
 80635b8:	68fb      	ldr	r3, [r7, #12]
 80635ba:	08db      	lsrs	r3, r3, #3
 80635bc:	60fb      	str	r3, [r7, #12]

	*Result = ((((float)AdcAverage / (float)TEMT6000_ADC_MAX_VALUE) * (float)TEMT6000_POWER_SUPPLY) / TEMT6000_RESISTOR_OHMS) * 2000000.0;
 80635be:	68fb      	ldr	r3, [r7, #12]
 80635c0:	ee07 3a90 	vmov	s15, r3
 80635c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80635c8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8063600 <TEMT6000_ReadLight+0x8c>
 80635cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80635d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8063604 <TEMT6000_ReadLight+0x90>
 80635d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80635d8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8063608 <TEMT6000_ReadLight+0x94>
 80635dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80635e0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 806360c <TEMT6000_ReadLight+0x98>
 80635e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80635e8:	687b      	ldr	r3, [r7, #4]
 80635ea:	edc3 7a00 	vstr	s15, [r3]

	return TEMT6000_OK;
 80635ee:	2300      	movs	r3, #0
}
 80635f0:	4618      	mov	r0, r3
 80635f2:	3710      	adds	r7, #16
 80635f4:	46bd      	mov	sp, r7
 80635f6:	bd80      	pop	{r7, pc}
 80635f8:	200057d8 	.word	0x200057d8
 80635fc:	20004f48 	.word	0x20004f48
 8063600:	45800000 	.word	0x45800000
 8063604:	40533333 	.word	0x40533333
 8063608:	447a0000 	.word	0x447a0000
 806360c:	49f42400 	.word	0x49f42400

08063610 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8063610:	b580      	push	{r7, lr}
 8063612:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8063614:	4b11      	ldr	r3, [pc, #68]	; (806365c <MX_USART1_UART_Init+0x4c>)
 8063616:	4a12      	ldr	r2, [pc, #72]	; (8063660 <MX_USART1_UART_Init+0x50>)
 8063618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 806361a:	4b10      	ldr	r3, [pc, #64]	; (806365c <MX_USART1_UART_Init+0x4c>)
 806361c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8063620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8063622:	4b0e      	ldr	r3, [pc, #56]	; (806365c <MX_USART1_UART_Init+0x4c>)
 8063624:	2200      	movs	r2, #0
 8063626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8063628:	4b0c      	ldr	r3, [pc, #48]	; (806365c <MX_USART1_UART_Init+0x4c>)
 806362a:	2200      	movs	r2, #0
 806362c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 806362e:	4b0b      	ldr	r3, [pc, #44]	; (806365c <MX_USART1_UART_Init+0x4c>)
 8063630:	2200      	movs	r2, #0
 8063632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8063634:	4b09      	ldr	r3, [pc, #36]	; (806365c <MX_USART1_UART_Init+0x4c>)
 8063636:	220c      	movs	r2, #12
 8063638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 806363a:	4b08      	ldr	r3, [pc, #32]	; (806365c <MX_USART1_UART_Init+0x4c>)
 806363c:	2200      	movs	r2, #0
 806363e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8063640:	4b06      	ldr	r3, [pc, #24]	; (806365c <MX_USART1_UART_Init+0x4c>)
 8063642:	2200      	movs	r2, #0
 8063644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8063646:	4805      	ldr	r0, [pc, #20]	; (806365c <MX_USART1_UART_Init+0x4c>)
 8063648:	f005 fff4 	bl	8069634 <HAL_UART_Init>
 806364c:	4603      	mov	r3, r0
 806364e:	2b00      	cmp	r3, #0
 8063650:	d001      	beq.n	8063656 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8063652:	f7ff fc65 	bl	8062f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8063656:	bf00      	nop
 8063658:	bd80      	pop	{r7, pc}
 806365a:	bf00      	nop
 806365c:	200057e8 	.word	0x200057e8
 8063660:	40011000 	.word	0x40011000

08063664 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8063664:	b580      	push	{r7, lr}
 8063666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8063668:	4b11      	ldr	r3, [pc, #68]	; (80636b0 <MX_USART2_UART_Init+0x4c>)
 806366a:	4a12      	ldr	r2, [pc, #72]	; (80636b4 <MX_USART2_UART_Init+0x50>)
 806366c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 806366e:	4b10      	ldr	r3, [pc, #64]	; (80636b0 <MX_USART2_UART_Init+0x4c>)
 8063670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8063674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8063676:	4b0e      	ldr	r3, [pc, #56]	; (80636b0 <MX_USART2_UART_Init+0x4c>)
 8063678:	2200      	movs	r2, #0
 806367a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 806367c:	4b0c      	ldr	r3, [pc, #48]	; (80636b0 <MX_USART2_UART_Init+0x4c>)
 806367e:	2200      	movs	r2, #0
 8063680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8063682:	4b0b      	ldr	r3, [pc, #44]	; (80636b0 <MX_USART2_UART_Init+0x4c>)
 8063684:	2200      	movs	r2, #0
 8063686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8063688:	4b09      	ldr	r3, [pc, #36]	; (80636b0 <MX_USART2_UART_Init+0x4c>)
 806368a:	220c      	movs	r2, #12
 806368c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 806368e:	4b08      	ldr	r3, [pc, #32]	; (80636b0 <MX_USART2_UART_Init+0x4c>)
 8063690:	2200      	movs	r2, #0
 8063692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8063694:	4b06      	ldr	r3, [pc, #24]	; (80636b0 <MX_USART2_UART_Init+0x4c>)
 8063696:	2200      	movs	r2, #0
 8063698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 806369a:	4805      	ldr	r0, [pc, #20]	; (80636b0 <MX_USART2_UART_Init+0x4c>)
 806369c:	f005 ffca 	bl	8069634 <HAL_UART_Init>
 80636a0:	4603      	mov	r3, r0
 80636a2:	2b00      	cmp	r3, #0
 80636a4:	d001      	beq.n	80636aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80636a6:	f7ff fc3b 	bl	8062f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80636aa:	bf00      	nop
 80636ac:	bd80      	pop	{r7, pc}
 80636ae:	bf00      	nop
 80636b0:	2000582c 	.word	0x2000582c
 80636b4:	40004400 	.word	0x40004400

080636b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80636b8:	b580      	push	{r7, lr}
 80636ba:	b08c      	sub	sp, #48	; 0x30
 80636bc:	af00      	add	r7, sp, #0
 80636be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80636c0:	f107 031c 	add.w	r3, r7, #28
 80636c4:	2200      	movs	r2, #0
 80636c6:	601a      	str	r2, [r3, #0]
 80636c8:	605a      	str	r2, [r3, #4]
 80636ca:	609a      	str	r2, [r3, #8]
 80636cc:	60da      	str	r2, [r3, #12]
 80636ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80636d0:	687b      	ldr	r3, [r7, #4]
 80636d2:	681b      	ldr	r3, [r3, #0]
 80636d4:	4a45      	ldr	r2, [pc, #276]	; (80637ec <HAL_UART_MspInit+0x134>)
 80636d6:	4293      	cmp	r3, r2
 80636d8:	d14b      	bne.n	8063772 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80636da:	2300      	movs	r3, #0
 80636dc:	61bb      	str	r3, [r7, #24]
 80636de:	4b44      	ldr	r3, [pc, #272]	; (80637f0 <HAL_UART_MspInit+0x138>)
 80636e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80636e2:	4a43      	ldr	r2, [pc, #268]	; (80637f0 <HAL_UART_MspInit+0x138>)
 80636e4:	f043 0310 	orr.w	r3, r3, #16
 80636e8:	6453      	str	r3, [r2, #68]	; 0x44
 80636ea:	4b41      	ldr	r3, [pc, #260]	; (80637f0 <HAL_UART_MspInit+0x138>)
 80636ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80636ee:	f003 0310 	and.w	r3, r3, #16
 80636f2:	61bb      	str	r3, [r7, #24]
 80636f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80636f6:	2300      	movs	r3, #0
 80636f8:	617b      	str	r3, [r7, #20]
 80636fa:	4b3d      	ldr	r3, [pc, #244]	; (80637f0 <HAL_UART_MspInit+0x138>)
 80636fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80636fe:	4a3c      	ldr	r2, [pc, #240]	; (80637f0 <HAL_UART_MspInit+0x138>)
 8063700:	f043 0301 	orr.w	r3, r3, #1
 8063704:	6313      	str	r3, [r2, #48]	; 0x30
 8063706:	4b3a      	ldr	r3, [pc, #232]	; (80637f0 <HAL_UART_MspInit+0x138>)
 8063708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806370a:	f003 0301 	and.w	r3, r3, #1
 806370e:	617b      	str	r3, [r7, #20]
 8063710:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8063712:	2300      	movs	r3, #0
 8063714:	613b      	str	r3, [r7, #16]
 8063716:	4b36      	ldr	r3, [pc, #216]	; (80637f0 <HAL_UART_MspInit+0x138>)
 8063718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806371a:	4a35      	ldr	r2, [pc, #212]	; (80637f0 <HAL_UART_MspInit+0x138>)
 806371c:	f043 0302 	orr.w	r3, r3, #2
 8063720:	6313      	str	r3, [r2, #48]	; 0x30
 8063722:	4b33      	ldr	r3, [pc, #204]	; (80637f0 <HAL_UART_MspInit+0x138>)
 8063724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8063726:	f003 0302 	and.w	r3, r3, #2
 806372a:	613b      	str	r3, [r7, #16]
 806372c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 806372e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8063732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8063734:	2302      	movs	r3, #2
 8063736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8063738:	2300      	movs	r3, #0
 806373a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 806373c:	2303      	movs	r3, #3
 806373e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8063740:	2307      	movs	r3, #7
 8063742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8063744:	f107 031c 	add.w	r3, r7, #28
 8063748:	4619      	mov	r1, r3
 806374a:	482a      	ldr	r0, [pc, #168]	; (80637f4 <HAL_UART_MspInit+0x13c>)
 806374c:	f001 feac 	bl	80654a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8063750:	2380      	movs	r3, #128	; 0x80
 8063752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8063754:	2302      	movs	r3, #2
 8063756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8063758:	2300      	movs	r3, #0
 806375a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 806375c:	2303      	movs	r3, #3
 806375e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8063760:	2307      	movs	r3, #7
 8063762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8063764:	f107 031c 	add.w	r3, r7, #28
 8063768:	4619      	mov	r1, r3
 806376a:	4823      	ldr	r0, [pc, #140]	; (80637f8 <HAL_UART_MspInit+0x140>)
 806376c:	f001 fe9c 	bl	80654a8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8063770:	e038      	b.n	80637e4 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8063772:	687b      	ldr	r3, [r7, #4]
 8063774:	681b      	ldr	r3, [r3, #0]
 8063776:	4a21      	ldr	r2, [pc, #132]	; (80637fc <HAL_UART_MspInit+0x144>)
 8063778:	4293      	cmp	r3, r2
 806377a:	d133      	bne.n	80637e4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 806377c:	2300      	movs	r3, #0
 806377e:	60fb      	str	r3, [r7, #12]
 8063780:	4b1b      	ldr	r3, [pc, #108]	; (80637f0 <HAL_UART_MspInit+0x138>)
 8063782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063784:	4a1a      	ldr	r2, [pc, #104]	; (80637f0 <HAL_UART_MspInit+0x138>)
 8063786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 806378a:	6413      	str	r3, [r2, #64]	; 0x40
 806378c:	4b18      	ldr	r3, [pc, #96]	; (80637f0 <HAL_UART_MspInit+0x138>)
 806378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8063794:	60fb      	str	r3, [r7, #12]
 8063796:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8063798:	2300      	movs	r3, #0
 806379a:	60bb      	str	r3, [r7, #8]
 806379c:	4b14      	ldr	r3, [pc, #80]	; (80637f0 <HAL_UART_MspInit+0x138>)
 806379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80637a0:	4a13      	ldr	r2, [pc, #76]	; (80637f0 <HAL_UART_MspInit+0x138>)
 80637a2:	f043 0301 	orr.w	r3, r3, #1
 80637a6:	6313      	str	r3, [r2, #48]	; 0x30
 80637a8:	4b11      	ldr	r3, [pc, #68]	; (80637f0 <HAL_UART_MspInit+0x138>)
 80637aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80637ac:	f003 0301 	and.w	r3, r3, #1
 80637b0:	60bb      	str	r3, [r7, #8]
 80637b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80637b4:	230c      	movs	r3, #12
 80637b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80637b8:	2302      	movs	r3, #2
 80637ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80637bc:	2300      	movs	r3, #0
 80637be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80637c0:	2303      	movs	r3, #3
 80637c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80637c4:	2307      	movs	r3, #7
 80637c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80637c8:	f107 031c 	add.w	r3, r7, #28
 80637cc:	4619      	mov	r1, r3
 80637ce:	4809      	ldr	r0, [pc, #36]	; (80637f4 <HAL_UART_MspInit+0x13c>)
 80637d0:	f001 fe6a 	bl	80654a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80637d4:	2200      	movs	r2, #0
 80637d6:	2105      	movs	r1, #5
 80637d8:	2026      	movs	r0, #38	; 0x26
 80637da:	f001 f89f 	bl	806491c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80637de:	2026      	movs	r0, #38	; 0x26
 80637e0:	f001 f8c8 	bl	8064974 <HAL_NVIC_EnableIRQ>
}
 80637e4:	bf00      	nop
 80637e6:	3730      	adds	r7, #48	; 0x30
 80637e8:	46bd      	mov	sp, r7
 80637ea:	bd80      	pop	{r7, pc}
 80637ec:	40011000 	.word	0x40011000
 80637f0:	40023800 	.word	0x40023800
 80637f4:	40020000 	.word	0x40020000
 80637f8:	40020400 	.word	0x40020400
 80637fc:	40004400 	.word	0x40004400

08063800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8063800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8063838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8063804:	480d      	ldr	r0, [pc, #52]	; (806383c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8063806:	490e      	ldr	r1, [pc, #56]	; (8063840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8063808:	4a0e      	ldr	r2, [pc, #56]	; (8063844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 806380a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 806380c:	e002      	b.n	8063814 <LoopCopyDataInit>

0806380e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 806380e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8063810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8063812:	3304      	adds	r3, #4

08063814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8063814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8063816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8063818:	d3f9      	bcc.n	806380e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 806381a:	4a0b      	ldr	r2, [pc, #44]	; (8063848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 806381c:	4c0b      	ldr	r4, [pc, #44]	; (806384c <LoopFillZerobss+0x26>)
  movs r3, #0
 806381e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8063820:	e001      	b.n	8063826 <LoopFillZerobss>

08063822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8063822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8063824:	3204      	adds	r2, #4

08063826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8063826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8063828:	d3fb      	bcc.n	8063822 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 806382a:	f7ff fe71 	bl	8063510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 806382e:	f00e feb9 	bl	80725a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8063832:	f7ff fa49 	bl	8062cc8 <main>
  bx  lr    
 8063836:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8063838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 806383c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8063840:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8063844:	08077a24 	.word	0x08077a24
  ldr r2, =_sbss
 8063848:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 806384c:	20005d38 	.word	0x20005d38

08063850 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8063850:	e7fe      	b.n	8063850 <DMA1_Stream0_IRQHandler>
	...

08063854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8063854:	b580      	push	{r7, lr}
 8063856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8063858:	4b0e      	ldr	r3, [pc, #56]	; (8063894 <HAL_Init+0x40>)
 806385a:	681b      	ldr	r3, [r3, #0]
 806385c:	4a0d      	ldr	r2, [pc, #52]	; (8063894 <HAL_Init+0x40>)
 806385e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8063862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8063864:	4b0b      	ldr	r3, [pc, #44]	; (8063894 <HAL_Init+0x40>)
 8063866:	681b      	ldr	r3, [r3, #0]
 8063868:	4a0a      	ldr	r2, [pc, #40]	; (8063894 <HAL_Init+0x40>)
 806386a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 806386e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8063870:	4b08      	ldr	r3, [pc, #32]	; (8063894 <HAL_Init+0x40>)
 8063872:	681b      	ldr	r3, [r3, #0]
 8063874:	4a07      	ldr	r2, [pc, #28]	; (8063894 <HAL_Init+0x40>)
 8063876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 806387a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 806387c:	2003      	movs	r0, #3
 806387e:	f001 f82d 	bl	80648dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8063882:	200f      	movs	r0, #15
 8063884:	f7ff fce6 	bl	8063254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8063888:	f7ff fcb8 	bl	80631fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 806388c:	2300      	movs	r3, #0
}
 806388e:	4618      	mov	r0, r3
 8063890:	bd80      	pop	{r7, pc}
 8063892:	bf00      	nop
 8063894:	40023c00 	.word	0x40023c00

08063898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8063898:	b480      	push	{r7}
 806389a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 806389c:	4b06      	ldr	r3, [pc, #24]	; (80638b8 <HAL_IncTick+0x20>)
 806389e:	781b      	ldrb	r3, [r3, #0]
 80638a0:	461a      	mov	r2, r3
 80638a2:	4b06      	ldr	r3, [pc, #24]	; (80638bc <HAL_IncTick+0x24>)
 80638a4:	681b      	ldr	r3, [r3, #0]
 80638a6:	4413      	add	r3, r2
 80638a8:	4a04      	ldr	r2, [pc, #16]	; (80638bc <HAL_IncTick+0x24>)
 80638aa:	6013      	str	r3, [r2, #0]
}
 80638ac:	bf00      	nop
 80638ae:	46bd      	mov	sp, r7
 80638b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80638b4:	4770      	bx	lr
 80638b6:	bf00      	nop
 80638b8:	20000008 	.word	0x20000008
 80638bc:	20005870 	.word	0x20005870

080638c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80638c0:	b480      	push	{r7}
 80638c2:	af00      	add	r7, sp, #0
  return uwTick;
 80638c4:	4b03      	ldr	r3, [pc, #12]	; (80638d4 <HAL_GetTick+0x14>)
 80638c6:	681b      	ldr	r3, [r3, #0]
}
 80638c8:	4618      	mov	r0, r3
 80638ca:	46bd      	mov	sp, r7
 80638cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80638d0:	4770      	bx	lr
 80638d2:	bf00      	nop
 80638d4:	20005870 	.word	0x20005870

080638d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80638d8:	b580      	push	{r7, lr}
 80638da:	b084      	sub	sp, #16
 80638dc:	af00      	add	r7, sp, #0
 80638de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80638e0:	f7ff ffee 	bl	80638c0 <HAL_GetTick>
 80638e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80638e6:	687b      	ldr	r3, [r7, #4]
 80638e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80638ea:	68fb      	ldr	r3, [r7, #12]
 80638ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80638f0:	d005      	beq.n	80638fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80638f2:	4b0a      	ldr	r3, [pc, #40]	; (806391c <HAL_Delay+0x44>)
 80638f4:	781b      	ldrb	r3, [r3, #0]
 80638f6:	461a      	mov	r2, r3
 80638f8:	68fb      	ldr	r3, [r7, #12]
 80638fa:	4413      	add	r3, r2
 80638fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80638fe:	bf00      	nop
 8063900:	f7ff ffde 	bl	80638c0 <HAL_GetTick>
 8063904:	4602      	mov	r2, r0
 8063906:	68bb      	ldr	r3, [r7, #8]
 8063908:	1ad3      	subs	r3, r2, r3
 806390a:	68fa      	ldr	r2, [r7, #12]
 806390c:	429a      	cmp	r2, r3
 806390e:	d8f7      	bhi.n	8063900 <HAL_Delay+0x28>
  {
  }
}
 8063910:	bf00      	nop
 8063912:	bf00      	nop
 8063914:	3710      	adds	r7, #16
 8063916:	46bd      	mov	sp, r7
 8063918:	bd80      	pop	{r7, pc}
 806391a:	bf00      	nop
 806391c:	20000008 	.word	0x20000008

08063920 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8063920:	b580      	push	{r7, lr}
 8063922:	b084      	sub	sp, #16
 8063924:	af00      	add	r7, sp, #0
 8063926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8063928:	2300      	movs	r3, #0
 806392a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 806392c:	687b      	ldr	r3, [r7, #4]
 806392e:	2b00      	cmp	r3, #0
 8063930:	d101      	bne.n	8063936 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8063932:	2301      	movs	r3, #1
 8063934:	e147      	b.n	8063bc6 <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8063936:	687b      	ldr	r3, [r7, #4]
 8063938:	681b      	ldr	r3, [r3, #0]
 806393a:	4aa5      	ldr	r2, [pc, #660]	; (8063bd0 <HAL_ADC_Init+0x2b0>)
 806393c:	4293      	cmp	r3, r2
 806393e:	d004      	beq.n	806394a <HAL_ADC_Init+0x2a>
 8063940:	f240 1143 	movw	r1, #323	; 0x143
 8063944:	48a3      	ldr	r0, [pc, #652]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 8063946:	f7ff faf0 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 806394a:	687b      	ldr	r3, [r7, #4]
 806394c:	685b      	ldr	r3, [r3, #4]
 806394e:	2b00      	cmp	r3, #0
 8063950:	d013      	beq.n	806397a <HAL_ADC_Init+0x5a>
 8063952:	687b      	ldr	r3, [r7, #4]
 8063954:	685b      	ldr	r3, [r3, #4]
 8063956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 806395a:	d00e      	beq.n	806397a <HAL_ADC_Init+0x5a>
 806395c:	687b      	ldr	r3, [r7, #4]
 806395e:	685b      	ldr	r3, [r3, #4]
 8063960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8063964:	d009      	beq.n	806397a <HAL_ADC_Init+0x5a>
 8063966:	687b      	ldr	r3, [r7, #4]
 8063968:	685b      	ldr	r3, [r3, #4]
 806396a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 806396e:	d004      	beq.n	806397a <HAL_ADC_Init+0x5a>
 8063970:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8063974:	4897      	ldr	r0, [pc, #604]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 8063976:	f7ff fad8 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 806397a:	687b      	ldr	r3, [r7, #4]
 806397c:	689b      	ldr	r3, [r3, #8]
 806397e:	2b00      	cmp	r3, #0
 8063980:	d013      	beq.n	80639aa <HAL_ADC_Init+0x8a>
 8063982:	687b      	ldr	r3, [r7, #4]
 8063984:	689b      	ldr	r3, [r3, #8]
 8063986:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 806398a:	d00e      	beq.n	80639aa <HAL_ADC_Init+0x8a>
 806398c:	687b      	ldr	r3, [r7, #4]
 806398e:	689b      	ldr	r3, [r3, #8]
 8063990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8063994:	d009      	beq.n	80639aa <HAL_ADC_Init+0x8a>
 8063996:	687b      	ldr	r3, [r7, #4]
 8063998:	689b      	ldr	r3, [r3, #8]
 806399a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 806399e:	d004      	beq.n	80639aa <HAL_ADC_Init+0x8a>
 80639a0:	f240 1145 	movw	r1, #325	; 0x145
 80639a4:	488b      	ldr	r0, [pc, #556]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 80639a6:	f7ff fac0 	bl	8062f2a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80639aa:	687b      	ldr	r3, [r7, #4]
 80639ac:	691b      	ldr	r3, [r3, #16]
 80639ae:	2b00      	cmp	r3, #0
 80639b0:	d008      	beq.n	80639c4 <HAL_ADC_Init+0xa4>
 80639b2:	687b      	ldr	r3, [r7, #4]
 80639b4:	691b      	ldr	r3, [r3, #16]
 80639b6:	2b01      	cmp	r3, #1
 80639b8:	d004      	beq.n	80639c4 <HAL_ADC_Init+0xa4>
 80639ba:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80639be:	4885      	ldr	r0, [pc, #532]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 80639c0:	f7ff fab3 	bl	8062f2a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80639c4:	687b      	ldr	r3, [r7, #4]
 80639c6:	7e1b      	ldrb	r3, [r3, #24]
 80639c8:	2b00      	cmp	r3, #0
 80639ca:	d008      	beq.n	80639de <HAL_ADC_Init+0xbe>
 80639cc:	687b      	ldr	r3, [r7, #4]
 80639ce:	7e1b      	ldrb	r3, [r3, #24]
 80639d0:	2b01      	cmp	r3, #1
 80639d2:	d004      	beq.n	80639de <HAL_ADC_Init+0xbe>
 80639d4:	f240 1147 	movw	r1, #327	; 0x147
 80639d8:	487e      	ldr	r0, [pc, #504]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 80639da:	f7ff faa6 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80639de:	687b      	ldr	r3, [r7, #4]
 80639e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80639e2:	2b00      	cmp	r3, #0
 80639e4:	d054      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 80639e6:	687b      	ldr	r3, [r7, #4]
 80639e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80639ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80639ee:	d04f      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 80639f0:	687b      	ldr	r3, [r7, #4]
 80639f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80639f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80639f8:	d04a      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 80639fa:	687b      	ldr	r3, [r7, #4]
 80639fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80639fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8063a02:	d045      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a04:	687b      	ldr	r3, [r7, #4]
 8063a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8063a0c:	d040      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a0e:	687b      	ldr	r3, [r7, #4]
 8063a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a12:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8063a16:	d03b      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a18:	687b      	ldr	r3, [r7, #4]
 8063a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a1c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8063a20:	d036      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a22:	687b      	ldr	r3, [r7, #4]
 8063a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a26:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8063a2a:	d031      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a2c:	687b      	ldr	r3, [r7, #4]
 8063a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8063a34:	d02c      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a36:	687b      	ldr	r3, [r7, #4]
 8063a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a3a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8063a3e:	d027      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a40:	687b      	ldr	r3, [r7, #4]
 8063a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a44:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8063a48:	d022      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a4a:	687b      	ldr	r3, [r7, #4]
 8063a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a4e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8063a52:	d01d      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a54:	687b      	ldr	r3, [r7, #4]
 8063a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8063a5c:	d018      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a5e:	687b      	ldr	r3, [r7, #4]
 8063a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a62:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8063a66:	d013      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a68:	687b      	ldr	r3, [r7, #4]
 8063a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a6c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8063a70:	d00e      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a72:	687b      	ldr	r3, [r7, #4]
 8063a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a76:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8063a7a:	d009      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a7c:	687b      	ldr	r3, [r7, #4]
 8063a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063a80:	4a55      	ldr	r2, [pc, #340]	; (8063bd8 <HAL_ADC_Init+0x2b8>)
 8063a82:	4293      	cmp	r3, r2
 8063a84:	d004      	beq.n	8063a90 <HAL_ADC_Init+0x170>
 8063a86:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8063a8a:	4852      	ldr	r0, [pc, #328]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 8063a8c:	f7ff fa4d 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8063a90:	687b      	ldr	r3, [r7, #4]
 8063a92:	68db      	ldr	r3, [r3, #12]
 8063a94:	2b00      	cmp	r3, #0
 8063a96:	d009      	beq.n	8063aac <HAL_ADC_Init+0x18c>
 8063a98:	687b      	ldr	r3, [r7, #4]
 8063a9a:	68db      	ldr	r3, [r3, #12]
 8063a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8063aa0:	d004      	beq.n	8063aac <HAL_ADC_Init+0x18c>
 8063aa2:	f240 1149 	movw	r1, #329	; 0x149
 8063aa6:	484b      	ldr	r0, [pc, #300]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 8063aa8:	f7ff fa3f 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8063aac:	687b      	ldr	r3, [r7, #4]
 8063aae:	69db      	ldr	r3, [r3, #28]
 8063ab0:	2b00      	cmp	r3, #0
 8063ab2:	d003      	beq.n	8063abc <HAL_ADC_Init+0x19c>
 8063ab4:	687b      	ldr	r3, [r7, #4]
 8063ab6:	69db      	ldr	r3, [r3, #28]
 8063ab8:	2b10      	cmp	r3, #16
 8063aba:	d904      	bls.n	8063ac6 <HAL_ADC_Init+0x1a6>
 8063abc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8063ac0:	4844      	ldr	r0, [pc, #272]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 8063ac2:	f7ff fa32 	bl	8062f2a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8063ac6:	687b      	ldr	r3, [r7, #4]
 8063ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8063acc:	2b00      	cmp	r3, #0
 8063ace:	d009      	beq.n	8063ae4 <HAL_ADC_Init+0x1c4>
 8063ad0:	687b      	ldr	r3, [r7, #4]
 8063ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8063ad6:	2b01      	cmp	r3, #1
 8063ad8:	d004      	beq.n	8063ae4 <HAL_ADC_Init+0x1c4>
 8063ada:	f240 114b 	movw	r1, #331	; 0x14b
 8063ade:	483d      	ldr	r0, [pc, #244]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 8063ae0:	f7ff fa23 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8063ae4:	687b      	ldr	r3, [r7, #4]
 8063ae6:	695b      	ldr	r3, [r3, #20]
 8063ae8:	2b01      	cmp	r3, #1
 8063aea:	d00c      	beq.n	8063b06 <HAL_ADC_Init+0x1e6>
 8063aec:	687b      	ldr	r3, [r7, #4]
 8063aee:	695b      	ldr	r3, [r3, #20]
 8063af0:	2b00      	cmp	r3, #0
 8063af2:	d008      	beq.n	8063b06 <HAL_ADC_Init+0x1e6>
 8063af4:	687b      	ldr	r3, [r7, #4]
 8063af6:	695b      	ldr	r3, [r3, #20]
 8063af8:	2b02      	cmp	r3, #2
 8063afa:	d004      	beq.n	8063b06 <HAL_ADC_Init+0x1e6>
 8063afc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8063b00:	4834      	ldr	r0, [pc, #208]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 8063b02:	f7ff fa12 	bl	8062f2a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8063b06:	687b      	ldr	r3, [r7, #4]
 8063b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8063b0c:	2b00      	cmp	r3, #0
 8063b0e:	d009      	beq.n	8063b24 <HAL_ADC_Init+0x204>
 8063b10:	687b      	ldr	r3, [r7, #4]
 8063b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8063b16:	2b01      	cmp	r3, #1
 8063b18:	d004      	beq.n	8063b24 <HAL_ADC_Init+0x204>
 8063b1a:	f240 114d 	movw	r1, #333	; 0x14d
 8063b1e:	482d      	ldr	r0, [pc, #180]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 8063b20:	f7ff fa03 	bl	8062f2a <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8063b24:	687b      	ldr	r3, [r7, #4]
 8063b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8063b28:	4a2b      	ldr	r2, [pc, #172]	; (8063bd8 <HAL_ADC_Init+0x2b8>)
 8063b2a:	4293      	cmp	r3, r2
 8063b2c:	d017      	beq.n	8063b5e <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8063b2e:	687b      	ldr	r3, [r7, #4]
 8063b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063b32:	2b00      	cmp	r3, #0
 8063b34:	d013      	beq.n	8063b5e <HAL_ADC_Init+0x23e>
 8063b36:	687b      	ldr	r3, [r7, #4]
 8063b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8063b3e:	d00e      	beq.n	8063b5e <HAL_ADC_Init+0x23e>
 8063b40:	687b      	ldr	r3, [r7, #4]
 8063b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8063b48:	d009      	beq.n	8063b5e <HAL_ADC_Init+0x23e>
 8063b4a:	687b      	ldr	r3, [r7, #4]
 8063b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063b4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8063b52:	d004      	beq.n	8063b5e <HAL_ADC_Init+0x23e>
 8063b54:	f240 1151 	movw	r1, #337	; 0x151
 8063b58:	481e      	ldr	r0, [pc, #120]	; (8063bd4 <HAL_ADC_Init+0x2b4>)
 8063b5a:	f7ff f9e6 	bl	8062f2a <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8063b5e:	687b      	ldr	r3, [r7, #4]
 8063b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063b62:	2b00      	cmp	r3, #0
 8063b64:	d109      	bne.n	8063b7a <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8063b66:	6878      	ldr	r0, [r7, #4]
 8063b68:	f7fd fbec 	bl	8061344 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8063b6c:	687b      	ldr	r3, [r7, #4]
 8063b6e:	2200      	movs	r2, #0
 8063b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8063b72:	687b      	ldr	r3, [r7, #4]
 8063b74:	2200      	movs	r2, #0
 8063b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8063b7a:	687b      	ldr	r3, [r7, #4]
 8063b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063b7e:	f003 0310 	and.w	r3, r3, #16
 8063b82:	2b00      	cmp	r3, #0
 8063b84:	d118      	bne.n	8063bb8 <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8063b86:	687b      	ldr	r3, [r7, #4]
 8063b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063b8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8063b8e:	f023 0302 	bic.w	r3, r3, #2
 8063b92:	f043 0202 	orr.w	r2, r3, #2
 8063b96:	687b      	ldr	r3, [r7, #4]
 8063b98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8063b9a:	6878      	ldr	r0, [r7, #4]
 8063b9c:	f000 fc44 	bl	8064428 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8063ba0:	687b      	ldr	r3, [r7, #4]
 8063ba2:	2200      	movs	r2, #0
 8063ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8063ba6:	687b      	ldr	r3, [r7, #4]
 8063ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063baa:	f023 0303 	bic.w	r3, r3, #3
 8063bae:	f043 0201 	orr.w	r2, r3, #1
 8063bb2:	687b      	ldr	r3, [r7, #4]
 8063bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8063bb6:	e001      	b.n	8063bbc <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8063bb8:	2301      	movs	r3, #1
 8063bba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8063bbc:	687b      	ldr	r3, [r7, #4]
 8063bbe:	2200      	movs	r2, #0
 8063bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8063bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8063bc6:	4618      	mov	r0, r3
 8063bc8:	3710      	adds	r7, #16
 8063bca:	46bd      	mov	sp, r7
 8063bcc:	bd80      	pop	{r7, pc}
 8063bce:	bf00      	nop
 8063bd0:	40012000 	.word	0x40012000
 8063bd4:	08077060 	.word	0x08077060
 8063bd8:	0f000001 	.word	0x0f000001

08063bdc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8063bdc:	b580      	push	{r7, lr}
 8063bde:	b084      	sub	sp, #16
 8063be0:	af00      	add	r7, sp, #0
 8063be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8063be4:	2300      	movs	r3, #0
 8063be6:	60fb      	str	r3, [r7, #12]
 8063be8:	2300      	movs	r3, #0
 8063bea:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8063bec:	687b      	ldr	r3, [r7, #4]
 8063bee:	7e1b      	ldrb	r3, [r3, #24]
 8063bf0:	2b00      	cmp	r3, #0
 8063bf2:	d008      	beq.n	8063c06 <HAL_ADC_IRQHandler+0x2a>
 8063bf4:	687b      	ldr	r3, [r7, #4]
 8063bf6:	7e1b      	ldrb	r3, [r3, #24]
 8063bf8:	2b01      	cmp	r3, #1
 8063bfa:	d004      	beq.n	8063c06 <HAL_ADC_IRQHandler+0x2a>
 8063bfc:	f240 41b5 	movw	r1, #1205	; 0x4b5
 8063c00:	4860      	ldr	r0, [pc, #384]	; (8063d84 <HAL_ADC_IRQHandler+0x1a8>)
 8063c02:	f7ff f992 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8063c06:	687b      	ldr	r3, [r7, #4]
 8063c08:	69db      	ldr	r3, [r3, #28]
 8063c0a:	2b00      	cmp	r3, #0
 8063c0c:	d003      	beq.n	8063c16 <HAL_ADC_IRQHandler+0x3a>
 8063c0e:	687b      	ldr	r3, [r7, #4]
 8063c10:	69db      	ldr	r3, [r3, #28]
 8063c12:	2b10      	cmp	r3, #16
 8063c14:	d904      	bls.n	8063c20 <HAL_ADC_IRQHandler+0x44>
 8063c16:	f240 41b6 	movw	r1, #1206	; 0x4b6
 8063c1a:	485a      	ldr	r0, [pc, #360]	; (8063d84 <HAL_ADC_IRQHandler+0x1a8>)
 8063c1c:	f7ff f985 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8063c20:	687b      	ldr	r3, [r7, #4]
 8063c22:	695b      	ldr	r3, [r3, #20]
 8063c24:	2b01      	cmp	r3, #1
 8063c26:	d00c      	beq.n	8063c42 <HAL_ADC_IRQHandler+0x66>
 8063c28:	687b      	ldr	r3, [r7, #4]
 8063c2a:	695b      	ldr	r3, [r3, #20]
 8063c2c:	2b00      	cmp	r3, #0
 8063c2e:	d008      	beq.n	8063c42 <HAL_ADC_IRQHandler+0x66>
 8063c30:	687b      	ldr	r3, [r7, #4]
 8063c32:	695b      	ldr	r3, [r3, #20]
 8063c34:	2b02      	cmp	r3, #2
 8063c36:	d004      	beq.n	8063c42 <HAL_ADC_IRQHandler+0x66>
 8063c38:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8063c3c:	4851      	ldr	r0, [pc, #324]	; (8063d84 <HAL_ADC_IRQHandler+0x1a8>)
 8063c3e:	f7ff f974 	bl	8062f2a <assert_failed>
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8063c42:	687b      	ldr	r3, [r7, #4]
 8063c44:	681b      	ldr	r3, [r3, #0]
 8063c46:	681b      	ldr	r3, [r3, #0]
 8063c48:	f003 0302 	and.w	r3, r3, #2
 8063c4c:	2b02      	cmp	r3, #2
 8063c4e:	bf0c      	ite	eq
 8063c50:	2301      	moveq	r3, #1
 8063c52:	2300      	movne	r3, #0
 8063c54:	b2db      	uxtb	r3, r3
 8063c56:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8063c58:	687b      	ldr	r3, [r7, #4]
 8063c5a:	681b      	ldr	r3, [r3, #0]
 8063c5c:	685b      	ldr	r3, [r3, #4]
 8063c5e:	f003 0320 	and.w	r3, r3, #32
 8063c62:	2b20      	cmp	r3, #32
 8063c64:	bf0c      	ite	eq
 8063c66:	2301      	moveq	r3, #1
 8063c68:	2300      	movne	r3, #0
 8063c6a:	b2db      	uxtb	r3, r3
 8063c6c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8063c6e:	68fb      	ldr	r3, [r7, #12]
 8063c70:	2b00      	cmp	r3, #0
 8063c72:	d049      	beq.n	8063d08 <HAL_ADC_IRQHandler+0x12c>
 8063c74:	68bb      	ldr	r3, [r7, #8]
 8063c76:	2b00      	cmp	r3, #0
 8063c78:	d046      	beq.n	8063d08 <HAL_ADC_IRQHandler+0x12c>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8063c7a:	687b      	ldr	r3, [r7, #4]
 8063c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063c7e:	f003 0310 	and.w	r3, r3, #16
 8063c82:	2b00      	cmp	r3, #0
 8063c84:	d105      	bne.n	8063c92 <HAL_ADC_IRQHandler+0xb6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8063c86:	687b      	ldr	r3, [r7, #4]
 8063c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063c8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8063c8e:	687b      	ldr	r3, [r7, #4]
 8063c90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8063c92:	687b      	ldr	r3, [r7, #4]
 8063c94:	681b      	ldr	r3, [r3, #0]
 8063c96:	689b      	ldr	r3, [r3, #8]
 8063c98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8063c9c:	2b00      	cmp	r3, #0
 8063c9e:	d12b      	bne.n	8063cf8 <HAL_ADC_IRQHandler+0x11c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8063ca0:	687b      	ldr	r3, [r7, #4]
 8063ca2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8063ca4:	2b00      	cmp	r3, #0
 8063ca6:	d127      	bne.n	8063cf8 <HAL_ADC_IRQHandler+0x11c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8063ca8:	687b      	ldr	r3, [r7, #4]
 8063caa:	681b      	ldr	r3, [r3, #0]
 8063cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063cae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8063cb2:	2b00      	cmp	r3, #0
 8063cb4:	d006      	beq.n	8063cc4 <HAL_ADC_IRQHandler+0xe8>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8063cb6:	687b      	ldr	r3, [r7, #4]
 8063cb8:	681b      	ldr	r3, [r3, #0]
 8063cba:	689b      	ldr	r3, [r3, #8]
 8063cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8063cc0:	2b00      	cmp	r3, #0
 8063cc2:	d119      	bne.n	8063cf8 <HAL_ADC_IRQHandler+0x11c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8063cc4:	687b      	ldr	r3, [r7, #4]
 8063cc6:	681b      	ldr	r3, [r3, #0]
 8063cc8:	685a      	ldr	r2, [r3, #4]
 8063cca:	687b      	ldr	r3, [r7, #4]
 8063ccc:	681b      	ldr	r3, [r3, #0]
 8063cce:	f022 0220 	bic.w	r2, r2, #32
 8063cd2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8063cd4:	687b      	ldr	r3, [r7, #4]
 8063cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8063cdc:	687b      	ldr	r3, [r7, #4]
 8063cde:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8063ce0:	687b      	ldr	r3, [r7, #4]
 8063ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8063ce8:	2b00      	cmp	r3, #0
 8063cea:	d105      	bne.n	8063cf8 <HAL_ADC_IRQHandler+0x11c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8063cec:	687b      	ldr	r3, [r7, #4]
 8063cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063cf0:	f043 0201 	orr.w	r2, r3, #1
 8063cf4:	687b      	ldr	r3, [r7, #4]
 8063cf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8063cf8:	6878      	ldr	r0, [r7, #4]
 8063cfa:	f000 f9f7 	bl	80640ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8063cfe:	687b      	ldr	r3, [r7, #4]
 8063d00:	681b      	ldr	r3, [r3, #0]
 8063d02:	f06f 0212 	mvn.w	r2, #18
 8063d06:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8063d08:	687b      	ldr	r3, [r7, #4]
 8063d0a:	681b      	ldr	r3, [r3, #0]
 8063d0c:	681b      	ldr	r3, [r3, #0]
 8063d0e:	f003 0304 	and.w	r3, r3, #4
 8063d12:	2b04      	cmp	r3, #4
 8063d14:	bf0c      	ite	eq
 8063d16:	2301      	moveq	r3, #1
 8063d18:	2300      	movne	r3, #0
 8063d1a:	b2db      	uxtb	r3, r3
 8063d1c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8063d1e:	687b      	ldr	r3, [r7, #4]
 8063d20:	681b      	ldr	r3, [r3, #0]
 8063d22:	685b      	ldr	r3, [r3, #4]
 8063d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8063d28:	2b80      	cmp	r3, #128	; 0x80
 8063d2a:	bf0c      	ite	eq
 8063d2c:	2301      	moveq	r3, #1
 8063d2e:	2300      	movne	r3, #0
 8063d30:	b2db      	uxtb	r3, r3
 8063d32:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8063d34:	68fb      	ldr	r3, [r7, #12]
 8063d36:	2b00      	cmp	r3, #0
 8063d38:	d05a      	beq.n	8063df0 <HAL_ADC_IRQHandler+0x214>
 8063d3a:	68bb      	ldr	r3, [r7, #8]
 8063d3c:	2b00      	cmp	r3, #0
 8063d3e:	d057      	beq.n	8063df0 <HAL_ADC_IRQHandler+0x214>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8063d40:	687b      	ldr	r3, [r7, #4]
 8063d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063d44:	f003 0310 	and.w	r3, r3, #16
 8063d48:	2b00      	cmp	r3, #0
 8063d4a:	d105      	bne.n	8063d58 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8063d4c:	687b      	ldr	r3, [r7, #4]
 8063d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063d50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8063d54:	687b      	ldr	r3, [r7, #4]
 8063d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8063d58:	687b      	ldr	r3, [r7, #4]
 8063d5a:	681b      	ldr	r3, [r3, #0]
 8063d5c:	689b      	ldr	r3, [r3, #8]
 8063d5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8063d62:	2b00      	cmp	r3, #0
 8063d64:	d13c      	bne.n	8063de0 <HAL_ADC_IRQHandler+0x204>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8063d66:	687b      	ldr	r3, [r7, #4]
 8063d68:	681b      	ldr	r3, [r3, #0]
 8063d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8063d6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8063d70:	2b00      	cmp	r3, #0
 8063d72:	d009      	beq.n	8063d88 <HAL_ADC_IRQHandler+0x1ac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8063d74:	687b      	ldr	r3, [r7, #4]
 8063d76:	681b      	ldr	r3, [r3, #0]
 8063d78:	689b      	ldr	r3, [r3, #8]
 8063d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8063d7e:	2b00      	cmp	r3, #0
 8063d80:	d12e      	bne.n	8063de0 <HAL_ADC_IRQHandler+0x204>
 8063d82:	e001      	b.n	8063d88 <HAL_ADC_IRQHandler+0x1ac>
 8063d84:	08077060 	.word	0x08077060
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8063d88:	687b      	ldr	r3, [r7, #4]
 8063d8a:	681b      	ldr	r3, [r3, #0]
 8063d8c:	685b      	ldr	r3, [r3, #4]
 8063d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8063d92:	2b00      	cmp	r3, #0
 8063d94:	d124      	bne.n	8063de0 <HAL_ADC_IRQHandler+0x204>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8063d96:	687b      	ldr	r3, [r7, #4]
 8063d98:	681b      	ldr	r3, [r3, #0]
 8063d9a:	689b      	ldr	r3, [r3, #8]
 8063d9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8063da0:	2b00      	cmp	r3, #0
 8063da2:	d11d      	bne.n	8063de0 <HAL_ADC_IRQHandler+0x204>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8063da4:	687b      	ldr	r3, [r7, #4]
 8063da6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8063da8:	2b00      	cmp	r3, #0
 8063daa:	d119      	bne.n	8063de0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8063dac:	687b      	ldr	r3, [r7, #4]
 8063dae:	681b      	ldr	r3, [r3, #0]
 8063db0:	685a      	ldr	r2, [r3, #4]
 8063db2:	687b      	ldr	r3, [r7, #4]
 8063db4:	681b      	ldr	r3, [r3, #0]
 8063db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8063dba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8063dbc:	687b      	ldr	r3, [r7, #4]
 8063dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063dc0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8063dc4:	687b      	ldr	r3, [r7, #4]
 8063dc6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8063dc8:	687b      	ldr	r3, [r7, #4]
 8063dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8063dd0:	2b00      	cmp	r3, #0
 8063dd2:	d105      	bne.n	8063de0 <HAL_ADC_IRQHandler+0x204>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8063dd4:	687b      	ldr	r3, [r7, #4]
 8063dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063dd8:	f043 0201 	orr.w	r2, r3, #1
 8063ddc:	687b      	ldr	r3, [r7, #4]
 8063dde:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8063de0:	6878      	ldr	r0, [r7, #4]
 8063de2:	f000 fcad 	bl	8064740 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8063de6:	687b      	ldr	r3, [r7, #4]
 8063de8:	681b      	ldr	r3, [r3, #0]
 8063dea:	f06f 020c 	mvn.w	r2, #12
 8063dee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8063df0:	687b      	ldr	r3, [r7, #4]
 8063df2:	681b      	ldr	r3, [r3, #0]
 8063df4:	681b      	ldr	r3, [r3, #0]
 8063df6:	f003 0301 	and.w	r3, r3, #1
 8063dfa:	2b01      	cmp	r3, #1
 8063dfc:	bf0c      	ite	eq
 8063dfe:	2301      	moveq	r3, #1
 8063e00:	2300      	movne	r3, #0
 8063e02:	b2db      	uxtb	r3, r3
 8063e04:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8063e06:	687b      	ldr	r3, [r7, #4]
 8063e08:	681b      	ldr	r3, [r3, #0]
 8063e0a:	685b      	ldr	r3, [r3, #4]
 8063e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8063e10:	2b40      	cmp	r3, #64	; 0x40
 8063e12:	bf0c      	ite	eq
 8063e14:	2301      	moveq	r3, #1
 8063e16:	2300      	movne	r3, #0
 8063e18:	b2db      	uxtb	r3, r3
 8063e1a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8063e1c:	68fb      	ldr	r3, [r7, #12]
 8063e1e:	2b00      	cmp	r3, #0
 8063e20:	d017      	beq.n	8063e52 <HAL_ADC_IRQHandler+0x276>
 8063e22:	68bb      	ldr	r3, [r7, #8]
 8063e24:	2b00      	cmp	r3, #0
 8063e26:	d014      	beq.n	8063e52 <HAL_ADC_IRQHandler+0x276>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8063e28:	687b      	ldr	r3, [r7, #4]
 8063e2a:	681b      	ldr	r3, [r3, #0]
 8063e2c:	681b      	ldr	r3, [r3, #0]
 8063e2e:	f003 0301 	and.w	r3, r3, #1
 8063e32:	2b01      	cmp	r3, #1
 8063e34:	d10d      	bne.n	8063e52 <HAL_ADC_IRQHandler+0x276>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8063e36:	687b      	ldr	r3, [r7, #4]
 8063e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063e3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8063e3e:	687b      	ldr	r3, [r7, #4]
 8063e40:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8063e42:	6878      	ldr	r0, [r7, #4]
 8063e44:	f000 f966 	bl	8064114 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8063e48:	687b      	ldr	r3, [r7, #4]
 8063e4a:	681b      	ldr	r3, [r3, #0]
 8063e4c:	f06f 0201 	mvn.w	r2, #1
 8063e50:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8063e52:	687b      	ldr	r3, [r7, #4]
 8063e54:	681b      	ldr	r3, [r3, #0]
 8063e56:	681b      	ldr	r3, [r3, #0]
 8063e58:	f003 0320 	and.w	r3, r3, #32
 8063e5c:	2b20      	cmp	r3, #32
 8063e5e:	bf0c      	ite	eq
 8063e60:	2301      	moveq	r3, #1
 8063e62:	2300      	movne	r3, #0
 8063e64:	b2db      	uxtb	r3, r3
 8063e66:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8063e68:	687b      	ldr	r3, [r7, #4]
 8063e6a:	681b      	ldr	r3, [r3, #0]
 8063e6c:	685b      	ldr	r3, [r3, #4]
 8063e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8063e72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8063e76:	bf0c      	ite	eq
 8063e78:	2301      	moveq	r3, #1
 8063e7a:	2300      	movne	r3, #0
 8063e7c:	b2db      	uxtb	r3, r3
 8063e7e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8063e80:	68fb      	ldr	r3, [r7, #12]
 8063e82:	2b00      	cmp	r3, #0
 8063e84:	d015      	beq.n	8063eb2 <HAL_ADC_IRQHandler+0x2d6>
 8063e86:	68bb      	ldr	r3, [r7, #8]
 8063e88:	2b00      	cmp	r3, #0
 8063e8a:	d012      	beq.n	8063eb2 <HAL_ADC_IRQHandler+0x2d6>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8063e8c:	687b      	ldr	r3, [r7, #4]
 8063e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8063e90:	f043 0202 	orr.w	r2, r3, #2
 8063e94:	687b      	ldr	r3, [r7, #4]
 8063e96:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8063e98:	687b      	ldr	r3, [r7, #4]
 8063e9a:	681b      	ldr	r3, [r3, #0]
 8063e9c:	f06f 0220 	mvn.w	r2, #32
 8063ea0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8063ea2:	6878      	ldr	r0, [r7, #4]
 8063ea4:	f000 f940 	bl	8064128 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8063ea8:	687b      	ldr	r3, [r7, #4]
 8063eaa:	681b      	ldr	r3, [r3, #0]
 8063eac:	f06f 0220 	mvn.w	r2, #32
 8063eb0:	601a      	str	r2, [r3, #0]
  }
}
 8063eb2:	bf00      	nop
 8063eb4:	3710      	adds	r7, #16
 8063eb6:	46bd      	mov	sp, r7
 8063eb8:	bd80      	pop	{r7, pc}
 8063eba:	bf00      	nop

08063ebc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8063ebc:	b580      	push	{r7, lr}
 8063ebe:	b086      	sub	sp, #24
 8063ec0:	af00      	add	r7, sp, #0
 8063ec2:	60f8      	str	r0, [r7, #12]
 8063ec4:	60b9      	str	r1, [r7, #8]
 8063ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8063ec8:	2300      	movs	r3, #0
 8063eca:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8063ecc:	68fb      	ldr	r3, [r7, #12]
 8063ece:	7e1b      	ldrb	r3, [r3, #24]
 8063ed0:	2b00      	cmp	r3, #0
 8063ed2:	d008      	beq.n	8063ee6 <HAL_ADC_Start_DMA+0x2a>
 8063ed4:	68fb      	ldr	r3, [r7, #12]
 8063ed6:	7e1b      	ldrb	r3, [r3, #24]
 8063ed8:	2b01      	cmp	r3, #1
 8063eda:	d004      	beq.n	8063ee6 <HAL_ADC_Start_DMA+0x2a>
 8063edc:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 8063ee0:	487a      	ldr	r0, [pc, #488]	; (80640cc <HAL_ADC_Start_DMA+0x210>)
 8063ee2:	f7ff f822 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8063ee6:	68fb      	ldr	r3, [r7, #12]
 8063ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063eea:	2b00      	cmp	r3, #0
 8063eec:	d013      	beq.n	8063f16 <HAL_ADC_Start_DMA+0x5a>
 8063eee:	68fb      	ldr	r3, [r7, #12]
 8063ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8063ef6:	d00e      	beq.n	8063f16 <HAL_ADC_Start_DMA+0x5a>
 8063ef8:	68fb      	ldr	r3, [r7, #12]
 8063efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8063f00:	d009      	beq.n	8063f16 <HAL_ADC_Start_DMA+0x5a>
 8063f02:	68fb      	ldr	r3, [r7, #12]
 8063f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8063f06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8063f0a:	d004      	beq.n	8063f16 <HAL_ADC_Start_DMA+0x5a>
 8063f0c:	f240 5159 	movw	r1, #1369	; 0x559
 8063f10:	486e      	ldr	r0, [pc, #440]	; (80640cc <HAL_ADC_Start_DMA+0x210>)
 8063f12:	f7ff f80a 	bl	8062f2a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8063f16:	68fb      	ldr	r3, [r7, #12]
 8063f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8063f1c:	2b01      	cmp	r3, #1
 8063f1e:	d101      	bne.n	8063f24 <HAL_ADC_Start_DMA+0x68>
 8063f20:	2302      	movs	r3, #2
 8063f22:	e0ce      	b.n	80640c2 <HAL_ADC_Start_DMA+0x206>
 8063f24:	68fb      	ldr	r3, [r7, #12]
 8063f26:	2201      	movs	r2, #1
 8063f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8063f2c:	68fb      	ldr	r3, [r7, #12]
 8063f2e:	681b      	ldr	r3, [r3, #0]
 8063f30:	689b      	ldr	r3, [r3, #8]
 8063f32:	f003 0301 	and.w	r3, r3, #1
 8063f36:	2b01      	cmp	r3, #1
 8063f38:	d018      	beq.n	8063f6c <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8063f3a:	68fb      	ldr	r3, [r7, #12]
 8063f3c:	681b      	ldr	r3, [r3, #0]
 8063f3e:	689a      	ldr	r2, [r3, #8]
 8063f40:	68fb      	ldr	r3, [r7, #12]
 8063f42:	681b      	ldr	r3, [r3, #0]
 8063f44:	f042 0201 	orr.w	r2, r2, #1
 8063f48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8063f4a:	4b61      	ldr	r3, [pc, #388]	; (80640d0 <HAL_ADC_Start_DMA+0x214>)
 8063f4c:	681b      	ldr	r3, [r3, #0]
 8063f4e:	4a61      	ldr	r2, [pc, #388]	; (80640d4 <HAL_ADC_Start_DMA+0x218>)
 8063f50:	fba2 2303 	umull	r2, r3, r2, r3
 8063f54:	0c9a      	lsrs	r2, r3, #18
 8063f56:	4613      	mov	r3, r2
 8063f58:	005b      	lsls	r3, r3, #1
 8063f5a:	4413      	add	r3, r2
 8063f5c:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8063f5e:	e002      	b.n	8063f66 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8063f60:	693b      	ldr	r3, [r7, #16]
 8063f62:	3b01      	subs	r3, #1
 8063f64:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8063f66:	693b      	ldr	r3, [r7, #16]
 8063f68:	2b00      	cmp	r3, #0
 8063f6a:	d1f9      	bne.n	8063f60 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8063f6c:	68fb      	ldr	r3, [r7, #12]
 8063f6e:	681b      	ldr	r3, [r3, #0]
 8063f70:	689b      	ldr	r3, [r3, #8]
 8063f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8063f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8063f7a:	d107      	bne.n	8063f8c <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8063f7c:	68fb      	ldr	r3, [r7, #12]
 8063f7e:	681b      	ldr	r3, [r3, #0]
 8063f80:	689a      	ldr	r2, [r3, #8]
 8063f82:	68fb      	ldr	r3, [r7, #12]
 8063f84:	681b      	ldr	r3, [r3, #0]
 8063f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8063f8a:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8063f8c:	68fb      	ldr	r3, [r7, #12]
 8063f8e:	681b      	ldr	r3, [r3, #0]
 8063f90:	689b      	ldr	r3, [r3, #8]
 8063f92:	f003 0301 	and.w	r3, r3, #1
 8063f96:	2b01      	cmp	r3, #1
 8063f98:	f040 8086 	bne.w	80640a8 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8063f9c:	68fb      	ldr	r3, [r7, #12]
 8063f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063fa0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8063fa4:	f023 0301 	bic.w	r3, r3, #1
 8063fa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8063fac:	68fb      	ldr	r3, [r7, #12]
 8063fae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8063fb0:	68fb      	ldr	r3, [r7, #12]
 8063fb2:	681b      	ldr	r3, [r3, #0]
 8063fb4:	685b      	ldr	r3, [r3, #4]
 8063fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8063fba:	2b00      	cmp	r3, #0
 8063fbc:	d007      	beq.n	8063fce <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8063fbe:	68fb      	ldr	r3, [r7, #12]
 8063fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063fc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8063fc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8063fca:	68fb      	ldr	r3, [r7, #12]
 8063fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8063fce:	68fb      	ldr	r3, [r7, #12]
 8063fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8063fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8063fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8063fda:	d106      	bne.n	8063fea <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8063fdc:	68fb      	ldr	r3, [r7, #12]
 8063fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8063fe0:	f023 0206 	bic.w	r2, r3, #6
 8063fe4:	68fb      	ldr	r3, [r7, #12]
 8063fe6:	645a      	str	r2, [r3, #68]	; 0x44
 8063fe8:	e002      	b.n	8063ff0 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8063fea:	68fb      	ldr	r3, [r7, #12]
 8063fec:	2200      	movs	r2, #0
 8063fee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8063ff0:	68fb      	ldr	r3, [r7, #12]
 8063ff2:	2200      	movs	r2, #0
 8063ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8063ff8:	4b37      	ldr	r3, [pc, #220]	; (80640d8 <HAL_ADC_Start_DMA+0x21c>)
 8063ffa:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8063ffc:	68fb      	ldr	r3, [r7, #12]
 8063ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8064000:	4a36      	ldr	r2, [pc, #216]	; (80640dc <HAL_ADC_Start_DMA+0x220>)
 8064002:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8064004:	68fb      	ldr	r3, [r7, #12]
 8064006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8064008:	4a35      	ldr	r2, [pc, #212]	; (80640e0 <HAL_ADC_Start_DMA+0x224>)
 806400a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 806400c:	68fb      	ldr	r3, [r7, #12]
 806400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8064010:	4a34      	ldr	r2, [pc, #208]	; (80640e4 <HAL_ADC_Start_DMA+0x228>)
 8064012:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8064014:	68fb      	ldr	r3, [r7, #12]
 8064016:	681b      	ldr	r3, [r3, #0]
 8064018:	f06f 0222 	mvn.w	r2, #34	; 0x22
 806401c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 806401e:	68fb      	ldr	r3, [r7, #12]
 8064020:	681b      	ldr	r3, [r3, #0]
 8064022:	685a      	ldr	r2, [r3, #4]
 8064024:	68fb      	ldr	r3, [r7, #12]
 8064026:	681b      	ldr	r3, [r3, #0]
 8064028:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 806402c:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 806402e:	68fb      	ldr	r3, [r7, #12]
 8064030:	681b      	ldr	r3, [r3, #0]
 8064032:	689a      	ldr	r2, [r3, #8]
 8064034:	68fb      	ldr	r3, [r7, #12]
 8064036:	681b      	ldr	r3, [r3, #0]
 8064038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 806403c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 806403e:	68fb      	ldr	r3, [r7, #12]
 8064040:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8064042:	68fb      	ldr	r3, [r7, #12]
 8064044:	681b      	ldr	r3, [r3, #0]
 8064046:	334c      	adds	r3, #76	; 0x4c
 8064048:	4619      	mov	r1, r3
 806404a:	68ba      	ldr	r2, [r7, #8]
 806404c:	687b      	ldr	r3, [r7, #4]
 806404e:	f000 fec9 	bl	8064de4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8064052:	697b      	ldr	r3, [r7, #20]
 8064054:	685b      	ldr	r3, [r3, #4]
 8064056:	f003 031f 	and.w	r3, r3, #31
 806405a:	2b00      	cmp	r3, #0
 806405c:	d10f      	bne.n	806407e <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 806405e:	68fb      	ldr	r3, [r7, #12]
 8064060:	681b      	ldr	r3, [r3, #0]
 8064062:	689b      	ldr	r3, [r3, #8]
 8064064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8064068:	2b00      	cmp	r3, #0
 806406a:	d129      	bne.n	80640c0 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 806406c:	68fb      	ldr	r3, [r7, #12]
 806406e:	681b      	ldr	r3, [r3, #0]
 8064070:	689a      	ldr	r2, [r3, #8]
 8064072:	68fb      	ldr	r3, [r7, #12]
 8064074:	681b      	ldr	r3, [r3, #0]
 8064076:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 806407a:	609a      	str	r2, [r3, #8]
 806407c:	e020      	b.n	80640c0 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 806407e:	68fb      	ldr	r3, [r7, #12]
 8064080:	681b      	ldr	r3, [r3, #0]
 8064082:	4a19      	ldr	r2, [pc, #100]	; (80640e8 <HAL_ADC_Start_DMA+0x22c>)
 8064084:	4293      	cmp	r3, r2
 8064086:	d11b      	bne.n	80640c0 <HAL_ADC_Start_DMA+0x204>
 8064088:	68fb      	ldr	r3, [r7, #12]
 806408a:	681b      	ldr	r3, [r3, #0]
 806408c:	689b      	ldr	r3, [r3, #8]
 806408e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8064092:	2b00      	cmp	r3, #0
 8064094:	d114      	bne.n	80640c0 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8064096:	68fb      	ldr	r3, [r7, #12]
 8064098:	681b      	ldr	r3, [r3, #0]
 806409a:	689a      	ldr	r2, [r3, #8]
 806409c:	68fb      	ldr	r3, [r7, #12]
 806409e:	681b      	ldr	r3, [r3, #0]
 80640a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80640a4:	609a      	str	r2, [r3, #8]
 80640a6:	e00b      	b.n	80640c0 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80640a8:	68fb      	ldr	r3, [r7, #12]
 80640aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80640ac:	f043 0210 	orr.w	r2, r3, #16
 80640b0:	68fb      	ldr	r3, [r7, #12]
 80640b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80640b4:	68fb      	ldr	r3, [r7, #12]
 80640b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80640b8:	f043 0201 	orr.w	r2, r3, #1
 80640bc:	68fb      	ldr	r3, [r7, #12]
 80640be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80640c0:	2300      	movs	r3, #0
}
 80640c2:	4618      	mov	r0, r3
 80640c4:	3718      	adds	r7, #24
 80640c6:	46bd      	mov	sp, r7
 80640c8:	bd80      	pop	{r7, pc}
 80640ca:	bf00      	nop
 80640cc:	08077060 	.word	0x08077060
 80640d0:	20000000 	.word	0x20000000
 80640d4:	431bde83 	.word	0x431bde83
 80640d8:	40012300 	.word	0x40012300
 80640dc:	0806463d 	.word	0x0806463d
 80640e0:	080646f7 	.word	0x080646f7
 80640e4:	08064713 	.word	0x08064713
 80640e8:	40012000 	.word	0x40012000

080640ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80640ec:	b480      	push	{r7}
 80640ee:	b083      	sub	sp, #12
 80640f0:	af00      	add	r7, sp, #0
 80640f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80640f4:	bf00      	nop
 80640f6:	370c      	adds	r7, #12
 80640f8:	46bd      	mov	sp, r7
 80640fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80640fe:	4770      	bx	lr

08064100 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8064100:	b480      	push	{r7}
 8064102:	b083      	sub	sp, #12
 8064104:	af00      	add	r7, sp, #0
 8064106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8064108:	bf00      	nop
 806410a:	370c      	adds	r7, #12
 806410c:	46bd      	mov	sp, r7
 806410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064112:	4770      	bx	lr

08064114 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8064114:	b480      	push	{r7}
 8064116:	b083      	sub	sp, #12
 8064118:	af00      	add	r7, sp, #0
 806411a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 806411c:	bf00      	nop
 806411e:	370c      	adds	r7, #12
 8064120:	46bd      	mov	sp, r7
 8064122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064126:	4770      	bx	lr

08064128 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8064128:	b480      	push	{r7}
 806412a:	b083      	sub	sp, #12
 806412c:	af00      	add	r7, sp, #0
 806412e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8064130:	bf00      	nop
 8064132:	370c      	adds	r7, #12
 8064134:	46bd      	mov	sp, r7
 8064136:	f85d 7b04 	ldr.w	r7, [sp], #4
 806413a:	4770      	bx	lr

0806413c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 806413c:	b580      	push	{r7, lr}
 806413e:	b084      	sub	sp, #16
 8064140:	af00      	add	r7, sp, #0
 8064142:	6078      	str	r0, [r7, #4]
 8064144:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8064146:	2300      	movs	r3, #0
 8064148:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 806414a:	683b      	ldr	r3, [r7, #0]
 806414c:	681b      	ldr	r3, [r3, #0]
 806414e:	2b12      	cmp	r3, #18
 8064150:	d909      	bls.n	8064166 <HAL_ADC_ConfigChannel+0x2a>
 8064152:	683b      	ldr	r3, [r7, #0]
 8064154:	681b      	ldr	r3, [r3, #0]
 8064156:	4a72      	ldr	r2, [pc, #456]	; (8064320 <HAL_ADC_ConfigChannel+0x1e4>)
 8064158:	4293      	cmp	r3, r2
 806415a:	d004      	beq.n	8064166 <HAL_ADC_ConfigChannel+0x2a>
 806415c:	f240 6189 	movw	r1, #1673	; 0x689
 8064160:	4870      	ldr	r0, [pc, #448]	; (8064324 <HAL_ADC_ConfigChannel+0x1e8>)
 8064162:	f7fe fee2 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8064166:	683b      	ldr	r3, [r7, #0]
 8064168:	685b      	ldr	r3, [r3, #4]
 806416a:	2b00      	cmp	r3, #0
 806416c:	d003      	beq.n	8064176 <HAL_ADC_ConfigChannel+0x3a>
 806416e:	683b      	ldr	r3, [r7, #0]
 8064170:	685b      	ldr	r3, [r3, #4]
 8064172:	2b10      	cmp	r3, #16
 8064174:	d904      	bls.n	8064180 <HAL_ADC_ConfigChannel+0x44>
 8064176:	f240 618a 	movw	r1, #1674	; 0x68a
 806417a:	486a      	ldr	r0, [pc, #424]	; (8064324 <HAL_ADC_ConfigChannel+0x1e8>)
 806417c:	f7fe fed5 	bl	8062f2a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8064180:	683b      	ldr	r3, [r7, #0]
 8064182:	689b      	ldr	r3, [r3, #8]
 8064184:	2b00      	cmp	r3, #0
 8064186:	d020      	beq.n	80641ca <HAL_ADC_ConfigChannel+0x8e>
 8064188:	683b      	ldr	r3, [r7, #0]
 806418a:	689b      	ldr	r3, [r3, #8]
 806418c:	2b01      	cmp	r3, #1
 806418e:	d01c      	beq.n	80641ca <HAL_ADC_ConfigChannel+0x8e>
 8064190:	683b      	ldr	r3, [r7, #0]
 8064192:	689b      	ldr	r3, [r3, #8]
 8064194:	2b02      	cmp	r3, #2
 8064196:	d018      	beq.n	80641ca <HAL_ADC_ConfigChannel+0x8e>
 8064198:	683b      	ldr	r3, [r7, #0]
 806419a:	689b      	ldr	r3, [r3, #8]
 806419c:	2b03      	cmp	r3, #3
 806419e:	d014      	beq.n	80641ca <HAL_ADC_ConfigChannel+0x8e>
 80641a0:	683b      	ldr	r3, [r7, #0]
 80641a2:	689b      	ldr	r3, [r3, #8]
 80641a4:	2b04      	cmp	r3, #4
 80641a6:	d010      	beq.n	80641ca <HAL_ADC_ConfigChannel+0x8e>
 80641a8:	683b      	ldr	r3, [r7, #0]
 80641aa:	689b      	ldr	r3, [r3, #8]
 80641ac:	2b05      	cmp	r3, #5
 80641ae:	d00c      	beq.n	80641ca <HAL_ADC_ConfigChannel+0x8e>
 80641b0:	683b      	ldr	r3, [r7, #0]
 80641b2:	689b      	ldr	r3, [r3, #8]
 80641b4:	2b06      	cmp	r3, #6
 80641b6:	d008      	beq.n	80641ca <HAL_ADC_ConfigChannel+0x8e>
 80641b8:	683b      	ldr	r3, [r7, #0]
 80641ba:	689b      	ldr	r3, [r3, #8]
 80641bc:	2b07      	cmp	r3, #7
 80641be:	d004      	beq.n	80641ca <HAL_ADC_ConfigChannel+0x8e>
 80641c0:	f240 618b 	movw	r1, #1675	; 0x68b
 80641c4:	4857      	ldr	r0, [pc, #348]	; (8064324 <HAL_ADC_ConfigChannel+0x1e8>)
 80641c6:	f7fe feb0 	bl	8062f2a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80641ca:	687b      	ldr	r3, [r7, #4]
 80641cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80641d0:	2b01      	cmp	r3, #1
 80641d2:	d101      	bne.n	80641d8 <HAL_ADC_ConfigChannel+0x9c>
 80641d4:	2302      	movs	r3, #2
 80641d6:	e118      	b.n	806440a <HAL_ADC_ConfigChannel+0x2ce>
 80641d8:	687b      	ldr	r3, [r7, #4]
 80641da:	2201      	movs	r2, #1
 80641dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80641e0:	683b      	ldr	r3, [r7, #0]
 80641e2:	681b      	ldr	r3, [r3, #0]
 80641e4:	2b09      	cmp	r3, #9
 80641e6:	d925      	bls.n	8064234 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80641e8:	687b      	ldr	r3, [r7, #4]
 80641ea:	681b      	ldr	r3, [r3, #0]
 80641ec:	68d9      	ldr	r1, [r3, #12]
 80641ee:	683b      	ldr	r3, [r7, #0]
 80641f0:	681b      	ldr	r3, [r3, #0]
 80641f2:	b29b      	uxth	r3, r3
 80641f4:	461a      	mov	r2, r3
 80641f6:	4613      	mov	r3, r2
 80641f8:	005b      	lsls	r3, r3, #1
 80641fa:	4413      	add	r3, r2
 80641fc:	3b1e      	subs	r3, #30
 80641fe:	2207      	movs	r2, #7
 8064200:	fa02 f303 	lsl.w	r3, r2, r3
 8064204:	43da      	mvns	r2, r3
 8064206:	687b      	ldr	r3, [r7, #4]
 8064208:	681b      	ldr	r3, [r3, #0]
 806420a:	400a      	ands	r2, r1
 806420c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 806420e:	687b      	ldr	r3, [r7, #4]
 8064210:	681b      	ldr	r3, [r3, #0]
 8064212:	68d9      	ldr	r1, [r3, #12]
 8064214:	683b      	ldr	r3, [r7, #0]
 8064216:	689a      	ldr	r2, [r3, #8]
 8064218:	683b      	ldr	r3, [r7, #0]
 806421a:	681b      	ldr	r3, [r3, #0]
 806421c:	b29b      	uxth	r3, r3
 806421e:	4618      	mov	r0, r3
 8064220:	4603      	mov	r3, r0
 8064222:	005b      	lsls	r3, r3, #1
 8064224:	4403      	add	r3, r0
 8064226:	3b1e      	subs	r3, #30
 8064228:	409a      	lsls	r2, r3
 806422a:	687b      	ldr	r3, [r7, #4]
 806422c:	681b      	ldr	r3, [r3, #0]
 806422e:	430a      	orrs	r2, r1
 8064230:	60da      	str	r2, [r3, #12]
 8064232:	e022      	b.n	806427a <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8064234:	687b      	ldr	r3, [r7, #4]
 8064236:	681b      	ldr	r3, [r3, #0]
 8064238:	6919      	ldr	r1, [r3, #16]
 806423a:	683b      	ldr	r3, [r7, #0]
 806423c:	681b      	ldr	r3, [r3, #0]
 806423e:	b29b      	uxth	r3, r3
 8064240:	461a      	mov	r2, r3
 8064242:	4613      	mov	r3, r2
 8064244:	005b      	lsls	r3, r3, #1
 8064246:	4413      	add	r3, r2
 8064248:	2207      	movs	r2, #7
 806424a:	fa02 f303 	lsl.w	r3, r2, r3
 806424e:	43da      	mvns	r2, r3
 8064250:	687b      	ldr	r3, [r7, #4]
 8064252:	681b      	ldr	r3, [r3, #0]
 8064254:	400a      	ands	r2, r1
 8064256:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8064258:	687b      	ldr	r3, [r7, #4]
 806425a:	681b      	ldr	r3, [r3, #0]
 806425c:	6919      	ldr	r1, [r3, #16]
 806425e:	683b      	ldr	r3, [r7, #0]
 8064260:	689a      	ldr	r2, [r3, #8]
 8064262:	683b      	ldr	r3, [r7, #0]
 8064264:	681b      	ldr	r3, [r3, #0]
 8064266:	b29b      	uxth	r3, r3
 8064268:	4618      	mov	r0, r3
 806426a:	4603      	mov	r3, r0
 806426c:	005b      	lsls	r3, r3, #1
 806426e:	4403      	add	r3, r0
 8064270:	409a      	lsls	r2, r3
 8064272:	687b      	ldr	r3, [r7, #4]
 8064274:	681b      	ldr	r3, [r3, #0]
 8064276:	430a      	orrs	r2, r1
 8064278:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 806427a:	683b      	ldr	r3, [r7, #0]
 806427c:	685b      	ldr	r3, [r3, #4]
 806427e:	2b06      	cmp	r3, #6
 8064280:	d824      	bhi.n	80642cc <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8064282:	687b      	ldr	r3, [r7, #4]
 8064284:	681b      	ldr	r3, [r3, #0]
 8064286:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8064288:	683b      	ldr	r3, [r7, #0]
 806428a:	685a      	ldr	r2, [r3, #4]
 806428c:	4613      	mov	r3, r2
 806428e:	009b      	lsls	r3, r3, #2
 8064290:	4413      	add	r3, r2
 8064292:	3b05      	subs	r3, #5
 8064294:	221f      	movs	r2, #31
 8064296:	fa02 f303 	lsl.w	r3, r2, r3
 806429a:	43da      	mvns	r2, r3
 806429c:	687b      	ldr	r3, [r7, #4]
 806429e:	681b      	ldr	r3, [r3, #0]
 80642a0:	400a      	ands	r2, r1
 80642a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80642a4:	687b      	ldr	r3, [r7, #4]
 80642a6:	681b      	ldr	r3, [r3, #0]
 80642a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80642aa:	683b      	ldr	r3, [r7, #0]
 80642ac:	681b      	ldr	r3, [r3, #0]
 80642ae:	b29b      	uxth	r3, r3
 80642b0:	4618      	mov	r0, r3
 80642b2:	683b      	ldr	r3, [r7, #0]
 80642b4:	685a      	ldr	r2, [r3, #4]
 80642b6:	4613      	mov	r3, r2
 80642b8:	009b      	lsls	r3, r3, #2
 80642ba:	4413      	add	r3, r2
 80642bc:	3b05      	subs	r3, #5
 80642be:	fa00 f203 	lsl.w	r2, r0, r3
 80642c2:	687b      	ldr	r3, [r7, #4]
 80642c4:	681b      	ldr	r3, [r3, #0]
 80642c6:	430a      	orrs	r2, r1
 80642c8:	635a      	str	r2, [r3, #52]	; 0x34
 80642ca:	e051      	b.n	8064370 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80642cc:	683b      	ldr	r3, [r7, #0]
 80642ce:	685b      	ldr	r3, [r3, #4]
 80642d0:	2b0c      	cmp	r3, #12
 80642d2:	d829      	bhi.n	8064328 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80642d4:	687b      	ldr	r3, [r7, #4]
 80642d6:	681b      	ldr	r3, [r3, #0]
 80642d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80642da:	683b      	ldr	r3, [r7, #0]
 80642dc:	685a      	ldr	r2, [r3, #4]
 80642de:	4613      	mov	r3, r2
 80642e0:	009b      	lsls	r3, r3, #2
 80642e2:	4413      	add	r3, r2
 80642e4:	3b23      	subs	r3, #35	; 0x23
 80642e6:	221f      	movs	r2, #31
 80642e8:	fa02 f303 	lsl.w	r3, r2, r3
 80642ec:	43da      	mvns	r2, r3
 80642ee:	687b      	ldr	r3, [r7, #4]
 80642f0:	681b      	ldr	r3, [r3, #0]
 80642f2:	400a      	ands	r2, r1
 80642f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80642f6:	687b      	ldr	r3, [r7, #4]
 80642f8:	681b      	ldr	r3, [r3, #0]
 80642fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80642fc:	683b      	ldr	r3, [r7, #0]
 80642fe:	681b      	ldr	r3, [r3, #0]
 8064300:	b29b      	uxth	r3, r3
 8064302:	4618      	mov	r0, r3
 8064304:	683b      	ldr	r3, [r7, #0]
 8064306:	685a      	ldr	r2, [r3, #4]
 8064308:	4613      	mov	r3, r2
 806430a:	009b      	lsls	r3, r3, #2
 806430c:	4413      	add	r3, r2
 806430e:	3b23      	subs	r3, #35	; 0x23
 8064310:	fa00 f203 	lsl.w	r2, r0, r3
 8064314:	687b      	ldr	r3, [r7, #4]
 8064316:	681b      	ldr	r3, [r3, #0]
 8064318:	430a      	orrs	r2, r1
 806431a:	631a      	str	r2, [r3, #48]	; 0x30
 806431c:	e028      	b.n	8064370 <HAL_ADC_ConfigChannel+0x234>
 806431e:	bf00      	nop
 8064320:	10000012 	.word	0x10000012
 8064324:	08077060 	.word	0x08077060
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8064328:	687b      	ldr	r3, [r7, #4]
 806432a:	681b      	ldr	r3, [r3, #0]
 806432c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 806432e:	683b      	ldr	r3, [r7, #0]
 8064330:	685a      	ldr	r2, [r3, #4]
 8064332:	4613      	mov	r3, r2
 8064334:	009b      	lsls	r3, r3, #2
 8064336:	4413      	add	r3, r2
 8064338:	3b41      	subs	r3, #65	; 0x41
 806433a:	221f      	movs	r2, #31
 806433c:	fa02 f303 	lsl.w	r3, r2, r3
 8064340:	43da      	mvns	r2, r3
 8064342:	687b      	ldr	r3, [r7, #4]
 8064344:	681b      	ldr	r3, [r3, #0]
 8064346:	400a      	ands	r2, r1
 8064348:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 806434a:	687b      	ldr	r3, [r7, #4]
 806434c:	681b      	ldr	r3, [r3, #0]
 806434e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8064350:	683b      	ldr	r3, [r7, #0]
 8064352:	681b      	ldr	r3, [r3, #0]
 8064354:	b29b      	uxth	r3, r3
 8064356:	4618      	mov	r0, r3
 8064358:	683b      	ldr	r3, [r7, #0]
 806435a:	685a      	ldr	r2, [r3, #4]
 806435c:	4613      	mov	r3, r2
 806435e:	009b      	lsls	r3, r3, #2
 8064360:	4413      	add	r3, r2
 8064362:	3b41      	subs	r3, #65	; 0x41
 8064364:	fa00 f203 	lsl.w	r2, r0, r3
 8064368:	687b      	ldr	r3, [r7, #4]
 806436a:	681b      	ldr	r3, [r3, #0]
 806436c:	430a      	orrs	r2, r1
 806436e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8064370:	4b28      	ldr	r3, [pc, #160]	; (8064414 <HAL_ADC_ConfigChannel+0x2d8>)
 8064372:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8064374:	687b      	ldr	r3, [r7, #4]
 8064376:	681b      	ldr	r3, [r3, #0]
 8064378:	4a27      	ldr	r2, [pc, #156]	; (8064418 <HAL_ADC_ConfigChannel+0x2dc>)
 806437a:	4293      	cmp	r3, r2
 806437c:	d10f      	bne.n	806439e <HAL_ADC_ConfigChannel+0x262>
 806437e:	683b      	ldr	r3, [r7, #0]
 8064380:	681b      	ldr	r3, [r3, #0]
 8064382:	2b12      	cmp	r3, #18
 8064384:	d10b      	bne.n	806439e <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8064386:	68fb      	ldr	r3, [r7, #12]
 8064388:	685b      	ldr	r3, [r3, #4]
 806438a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 806438e:	68fb      	ldr	r3, [r7, #12]
 8064390:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8064392:	68fb      	ldr	r3, [r7, #12]
 8064394:	685b      	ldr	r3, [r3, #4]
 8064396:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 806439a:	68fb      	ldr	r3, [r7, #12]
 806439c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 806439e:	687b      	ldr	r3, [r7, #4]
 80643a0:	681b      	ldr	r3, [r3, #0]
 80643a2:	4a1d      	ldr	r2, [pc, #116]	; (8064418 <HAL_ADC_ConfigChannel+0x2dc>)
 80643a4:	4293      	cmp	r3, r2
 80643a6:	d12b      	bne.n	8064400 <HAL_ADC_ConfigChannel+0x2c4>
 80643a8:	683b      	ldr	r3, [r7, #0]
 80643aa:	681b      	ldr	r3, [r3, #0]
 80643ac:	4a1b      	ldr	r2, [pc, #108]	; (806441c <HAL_ADC_ConfigChannel+0x2e0>)
 80643ae:	4293      	cmp	r3, r2
 80643b0:	d003      	beq.n	80643ba <HAL_ADC_ConfigChannel+0x27e>
 80643b2:	683b      	ldr	r3, [r7, #0]
 80643b4:	681b      	ldr	r3, [r3, #0]
 80643b6:	2b11      	cmp	r3, #17
 80643b8:	d122      	bne.n	8064400 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80643ba:	68fb      	ldr	r3, [r7, #12]
 80643bc:	685b      	ldr	r3, [r3, #4]
 80643be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80643c2:	68fb      	ldr	r3, [r7, #12]
 80643c4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80643c6:	68fb      	ldr	r3, [r7, #12]
 80643c8:	685b      	ldr	r3, [r3, #4]
 80643ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80643ce:	68fb      	ldr	r3, [r7, #12]
 80643d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80643d2:	683b      	ldr	r3, [r7, #0]
 80643d4:	681b      	ldr	r3, [r3, #0]
 80643d6:	4a11      	ldr	r2, [pc, #68]	; (806441c <HAL_ADC_ConfigChannel+0x2e0>)
 80643d8:	4293      	cmp	r3, r2
 80643da:	d111      	bne.n	8064400 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80643dc:	4b10      	ldr	r3, [pc, #64]	; (8064420 <HAL_ADC_ConfigChannel+0x2e4>)
 80643de:	681b      	ldr	r3, [r3, #0]
 80643e0:	4a10      	ldr	r2, [pc, #64]	; (8064424 <HAL_ADC_ConfigChannel+0x2e8>)
 80643e2:	fba2 2303 	umull	r2, r3, r2, r3
 80643e6:	0c9a      	lsrs	r2, r3, #18
 80643e8:	4613      	mov	r3, r2
 80643ea:	009b      	lsls	r3, r3, #2
 80643ec:	4413      	add	r3, r2
 80643ee:	005b      	lsls	r3, r3, #1
 80643f0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80643f2:	e002      	b.n	80643fa <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80643f4:	68bb      	ldr	r3, [r7, #8]
 80643f6:	3b01      	subs	r3, #1
 80643f8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80643fa:	68bb      	ldr	r3, [r7, #8]
 80643fc:	2b00      	cmp	r3, #0
 80643fe:	d1f9      	bne.n	80643f4 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8064400:	687b      	ldr	r3, [r7, #4]
 8064402:	2200      	movs	r2, #0
 8064404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8064408:	2300      	movs	r3, #0
}
 806440a:	4618      	mov	r0, r3
 806440c:	3710      	adds	r7, #16
 806440e:	46bd      	mov	sp, r7
 8064410:	bd80      	pop	{r7, pc}
 8064412:	bf00      	nop
 8064414:	40012300 	.word	0x40012300
 8064418:	40012000 	.word	0x40012000
 806441c:	10000012 	.word	0x10000012
 8064420:	20000000 	.word	0x20000000
 8064424:	431bde83 	.word	0x431bde83

08064428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8064428:	b580      	push	{r7, lr}
 806442a:	b084      	sub	sp, #16
 806442c:	af00      	add	r7, sp, #0
 806442e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8064430:	4b7f      	ldr	r3, [pc, #508]	; (8064630 <ADC_Init+0x208>)
 8064432:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8064434:	68fb      	ldr	r3, [r7, #12]
 8064436:	685b      	ldr	r3, [r3, #4]
 8064438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 806443c:	68fb      	ldr	r3, [r7, #12]
 806443e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8064440:	68fb      	ldr	r3, [r7, #12]
 8064442:	685a      	ldr	r2, [r3, #4]
 8064444:	687b      	ldr	r3, [r7, #4]
 8064446:	685b      	ldr	r3, [r3, #4]
 8064448:	431a      	orrs	r2, r3
 806444a:	68fb      	ldr	r3, [r7, #12]
 806444c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 806444e:	687b      	ldr	r3, [r7, #4]
 8064450:	681b      	ldr	r3, [r3, #0]
 8064452:	685a      	ldr	r2, [r3, #4]
 8064454:	687b      	ldr	r3, [r7, #4]
 8064456:	681b      	ldr	r3, [r3, #0]
 8064458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 806445c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 806445e:	687b      	ldr	r3, [r7, #4]
 8064460:	681b      	ldr	r3, [r3, #0]
 8064462:	6859      	ldr	r1, [r3, #4]
 8064464:	687b      	ldr	r3, [r7, #4]
 8064466:	691b      	ldr	r3, [r3, #16]
 8064468:	021a      	lsls	r2, r3, #8
 806446a:	687b      	ldr	r3, [r7, #4]
 806446c:	681b      	ldr	r3, [r3, #0]
 806446e:	430a      	orrs	r2, r1
 8064470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8064472:	687b      	ldr	r3, [r7, #4]
 8064474:	681b      	ldr	r3, [r3, #0]
 8064476:	685a      	ldr	r2, [r3, #4]
 8064478:	687b      	ldr	r3, [r7, #4]
 806447a:	681b      	ldr	r3, [r3, #0]
 806447c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8064480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8064482:	687b      	ldr	r3, [r7, #4]
 8064484:	681b      	ldr	r3, [r3, #0]
 8064486:	6859      	ldr	r1, [r3, #4]
 8064488:	687b      	ldr	r3, [r7, #4]
 806448a:	689a      	ldr	r2, [r3, #8]
 806448c:	687b      	ldr	r3, [r7, #4]
 806448e:	681b      	ldr	r3, [r3, #0]
 8064490:	430a      	orrs	r2, r1
 8064492:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8064494:	687b      	ldr	r3, [r7, #4]
 8064496:	681b      	ldr	r3, [r3, #0]
 8064498:	689a      	ldr	r2, [r3, #8]
 806449a:	687b      	ldr	r3, [r7, #4]
 806449c:	681b      	ldr	r3, [r3, #0]
 806449e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80644a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80644a4:	687b      	ldr	r3, [r7, #4]
 80644a6:	681b      	ldr	r3, [r3, #0]
 80644a8:	6899      	ldr	r1, [r3, #8]
 80644aa:	687b      	ldr	r3, [r7, #4]
 80644ac:	68da      	ldr	r2, [r3, #12]
 80644ae:	687b      	ldr	r3, [r7, #4]
 80644b0:	681b      	ldr	r3, [r3, #0]
 80644b2:	430a      	orrs	r2, r1
 80644b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80644b6:	687b      	ldr	r3, [r7, #4]
 80644b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80644ba:	4a5e      	ldr	r2, [pc, #376]	; (8064634 <ADC_Init+0x20c>)
 80644bc:	4293      	cmp	r3, r2
 80644be:	d022      	beq.n	8064506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80644c0:	687b      	ldr	r3, [r7, #4]
 80644c2:	681b      	ldr	r3, [r3, #0]
 80644c4:	689a      	ldr	r2, [r3, #8]
 80644c6:	687b      	ldr	r3, [r7, #4]
 80644c8:	681b      	ldr	r3, [r3, #0]
 80644ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80644ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80644d0:	687b      	ldr	r3, [r7, #4]
 80644d2:	681b      	ldr	r3, [r3, #0]
 80644d4:	6899      	ldr	r1, [r3, #8]
 80644d6:	687b      	ldr	r3, [r7, #4]
 80644d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80644da:	687b      	ldr	r3, [r7, #4]
 80644dc:	681b      	ldr	r3, [r3, #0]
 80644de:	430a      	orrs	r2, r1
 80644e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80644e2:	687b      	ldr	r3, [r7, #4]
 80644e4:	681b      	ldr	r3, [r3, #0]
 80644e6:	689a      	ldr	r2, [r3, #8]
 80644e8:	687b      	ldr	r3, [r7, #4]
 80644ea:	681b      	ldr	r3, [r3, #0]
 80644ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80644f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80644f2:	687b      	ldr	r3, [r7, #4]
 80644f4:	681b      	ldr	r3, [r3, #0]
 80644f6:	6899      	ldr	r1, [r3, #8]
 80644f8:	687b      	ldr	r3, [r7, #4]
 80644fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80644fc:	687b      	ldr	r3, [r7, #4]
 80644fe:	681b      	ldr	r3, [r3, #0]
 8064500:	430a      	orrs	r2, r1
 8064502:	609a      	str	r2, [r3, #8]
 8064504:	e00f      	b.n	8064526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8064506:	687b      	ldr	r3, [r7, #4]
 8064508:	681b      	ldr	r3, [r3, #0]
 806450a:	689a      	ldr	r2, [r3, #8]
 806450c:	687b      	ldr	r3, [r7, #4]
 806450e:	681b      	ldr	r3, [r3, #0]
 8064510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8064514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8064516:	687b      	ldr	r3, [r7, #4]
 8064518:	681b      	ldr	r3, [r3, #0]
 806451a:	689a      	ldr	r2, [r3, #8]
 806451c:	687b      	ldr	r3, [r7, #4]
 806451e:	681b      	ldr	r3, [r3, #0]
 8064520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8064524:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8064526:	687b      	ldr	r3, [r7, #4]
 8064528:	681b      	ldr	r3, [r3, #0]
 806452a:	689a      	ldr	r2, [r3, #8]
 806452c:	687b      	ldr	r3, [r7, #4]
 806452e:	681b      	ldr	r3, [r3, #0]
 8064530:	f022 0202 	bic.w	r2, r2, #2
 8064534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8064536:	687b      	ldr	r3, [r7, #4]
 8064538:	681b      	ldr	r3, [r3, #0]
 806453a:	6899      	ldr	r1, [r3, #8]
 806453c:	687b      	ldr	r3, [r7, #4]
 806453e:	7e1b      	ldrb	r3, [r3, #24]
 8064540:	005a      	lsls	r2, r3, #1
 8064542:	687b      	ldr	r3, [r7, #4]
 8064544:	681b      	ldr	r3, [r3, #0]
 8064546:	430a      	orrs	r2, r1
 8064548:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 806454a:	687b      	ldr	r3, [r7, #4]
 806454c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8064550:	2b00      	cmp	r3, #0
 8064552:	d028      	beq.n	80645a6 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8064554:	687b      	ldr	r3, [r7, #4]
 8064556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064558:	2b00      	cmp	r3, #0
 806455a:	d003      	beq.n	8064564 <ADC_Init+0x13c>
 806455c:	687b      	ldr	r3, [r7, #4]
 806455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064560:	2b08      	cmp	r3, #8
 8064562:	d904      	bls.n	806456e <ADC_Init+0x146>
 8064564:	f240 71a6 	movw	r1, #1958	; 0x7a6
 8064568:	4833      	ldr	r0, [pc, #204]	; (8064638 <ADC_Init+0x210>)
 806456a:	f7fe fcde 	bl	8062f2a <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 806456e:	687b      	ldr	r3, [r7, #4]
 8064570:	681b      	ldr	r3, [r3, #0]
 8064572:	685a      	ldr	r2, [r3, #4]
 8064574:	687b      	ldr	r3, [r7, #4]
 8064576:	681b      	ldr	r3, [r3, #0]
 8064578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 806457c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 806457e:	687b      	ldr	r3, [r7, #4]
 8064580:	681b      	ldr	r3, [r3, #0]
 8064582:	685a      	ldr	r2, [r3, #4]
 8064584:	687b      	ldr	r3, [r7, #4]
 8064586:	681b      	ldr	r3, [r3, #0]
 8064588:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 806458c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 806458e:	687b      	ldr	r3, [r7, #4]
 8064590:	681b      	ldr	r3, [r3, #0]
 8064592:	6859      	ldr	r1, [r3, #4]
 8064594:	687b      	ldr	r3, [r7, #4]
 8064596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064598:	3b01      	subs	r3, #1
 806459a:	035a      	lsls	r2, r3, #13
 806459c:	687b      	ldr	r3, [r7, #4]
 806459e:	681b      	ldr	r3, [r3, #0]
 80645a0:	430a      	orrs	r2, r1
 80645a2:	605a      	str	r2, [r3, #4]
 80645a4:	e007      	b.n	80645b6 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80645a6:	687b      	ldr	r3, [r7, #4]
 80645a8:	681b      	ldr	r3, [r3, #0]
 80645aa:	685a      	ldr	r2, [r3, #4]
 80645ac:	687b      	ldr	r3, [r7, #4]
 80645ae:	681b      	ldr	r3, [r3, #0]
 80645b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80645b4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80645b6:	687b      	ldr	r3, [r7, #4]
 80645b8:	681b      	ldr	r3, [r3, #0]
 80645ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80645bc:	687b      	ldr	r3, [r7, #4]
 80645be:	681b      	ldr	r3, [r3, #0]
 80645c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80645c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80645c6:	687b      	ldr	r3, [r7, #4]
 80645c8:	681b      	ldr	r3, [r3, #0]
 80645ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80645cc:	687b      	ldr	r3, [r7, #4]
 80645ce:	69db      	ldr	r3, [r3, #28]
 80645d0:	3b01      	subs	r3, #1
 80645d2:	051a      	lsls	r2, r3, #20
 80645d4:	687b      	ldr	r3, [r7, #4]
 80645d6:	681b      	ldr	r3, [r3, #0]
 80645d8:	430a      	orrs	r2, r1
 80645da:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80645dc:	687b      	ldr	r3, [r7, #4]
 80645de:	681b      	ldr	r3, [r3, #0]
 80645e0:	689a      	ldr	r2, [r3, #8]
 80645e2:	687b      	ldr	r3, [r7, #4]
 80645e4:	681b      	ldr	r3, [r3, #0]
 80645e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80645ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80645ec:	687b      	ldr	r3, [r7, #4]
 80645ee:	681b      	ldr	r3, [r3, #0]
 80645f0:	6899      	ldr	r1, [r3, #8]
 80645f2:	687b      	ldr	r3, [r7, #4]
 80645f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80645f8:	025a      	lsls	r2, r3, #9
 80645fa:	687b      	ldr	r3, [r7, #4]
 80645fc:	681b      	ldr	r3, [r3, #0]
 80645fe:	430a      	orrs	r2, r1
 8064600:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8064602:	687b      	ldr	r3, [r7, #4]
 8064604:	681b      	ldr	r3, [r3, #0]
 8064606:	689a      	ldr	r2, [r3, #8]
 8064608:	687b      	ldr	r3, [r7, #4]
 806460a:	681b      	ldr	r3, [r3, #0]
 806460c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8064610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8064612:	687b      	ldr	r3, [r7, #4]
 8064614:	681b      	ldr	r3, [r3, #0]
 8064616:	6899      	ldr	r1, [r3, #8]
 8064618:	687b      	ldr	r3, [r7, #4]
 806461a:	695b      	ldr	r3, [r3, #20]
 806461c:	029a      	lsls	r2, r3, #10
 806461e:	687b      	ldr	r3, [r7, #4]
 8064620:	681b      	ldr	r3, [r3, #0]
 8064622:	430a      	orrs	r2, r1
 8064624:	609a      	str	r2, [r3, #8]
}
 8064626:	bf00      	nop
 8064628:	3710      	adds	r7, #16
 806462a:	46bd      	mov	sp, r7
 806462c:	bd80      	pop	{r7, pc}
 806462e:	bf00      	nop
 8064630:	40012300 	.word	0x40012300
 8064634:	0f000001 	.word	0x0f000001
 8064638:	08077060 	.word	0x08077060

0806463c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 806463c:	b580      	push	{r7, lr}
 806463e:	b084      	sub	sp, #16
 8064640:	af00      	add	r7, sp, #0
 8064642:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8064644:	687b      	ldr	r3, [r7, #4]
 8064646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8064648:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 806464a:	68fb      	ldr	r3, [r7, #12]
 806464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806464e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8064652:	2b00      	cmp	r3, #0
 8064654:	d13c      	bne.n	80646d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8064656:	68fb      	ldr	r3, [r7, #12]
 8064658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806465a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 806465e:	68fb      	ldr	r3, [r7, #12]
 8064660:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8064662:	68fb      	ldr	r3, [r7, #12]
 8064664:	681b      	ldr	r3, [r3, #0]
 8064666:	689b      	ldr	r3, [r3, #8]
 8064668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 806466c:	2b00      	cmp	r3, #0
 806466e:	d12b      	bne.n	80646c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8064670:	68fb      	ldr	r3, [r7, #12]
 8064672:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8064674:	2b00      	cmp	r3, #0
 8064676:	d127      	bne.n	80646c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8064678:	68fb      	ldr	r3, [r7, #12]
 806467a:	681b      	ldr	r3, [r3, #0]
 806467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806467e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8064682:	2b00      	cmp	r3, #0
 8064684:	d006      	beq.n	8064694 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8064686:	68fb      	ldr	r3, [r7, #12]
 8064688:	681b      	ldr	r3, [r3, #0]
 806468a:	689b      	ldr	r3, [r3, #8]
 806468c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8064690:	2b00      	cmp	r3, #0
 8064692:	d119      	bne.n	80646c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8064694:	68fb      	ldr	r3, [r7, #12]
 8064696:	681b      	ldr	r3, [r3, #0]
 8064698:	685a      	ldr	r2, [r3, #4]
 806469a:	68fb      	ldr	r3, [r7, #12]
 806469c:	681b      	ldr	r3, [r3, #0]
 806469e:	f022 0220 	bic.w	r2, r2, #32
 80646a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80646a4:	68fb      	ldr	r3, [r7, #12]
 80646a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80646a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80646ac:	68fb      	ldr	r3, [r7, #12]
 80646ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80646b0:	68fb      	ldr	r3, [r7, #12]
 80646b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80646b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80646b8:	2b00      	cmp	r3, #0
 80646ba:	d105      	bne.n	80646c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80646bc:	68fb      	ldr	r3, [r7, #12]
 80646be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80646c0:	f043 0201 	orr.w	r2, r3, #1
 80646c4:	68fb      	ldr	r3, [r7, #12]
 80646c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80646c8:	68f8      	ldr	r0, [r7, #12]
 80646ca:	f7ff fd0f 	bl	80640ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80646ce:	e00e      	b.n	80646ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80646d0:	68fb      	ldr	r3, [r7, #12]
 80646d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80646d4:	f003 0310 	and.w	r3, r3, #16
 80646d8:	2b00      	cmp	r3, #0
 80646da:	d003      	beq.n	80646e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80646dc:	68f8      	ldr	r0, [r7, #12]
 80646de:	f7ff fd23 	bl	8064128 <HAL_ADC_ErrorCallback>
}
 80646e2:	e004      	b.n	80646ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80646e4:	68fb      	ldr	r3, [r7, #12]
 80646e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80646e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80646ea:	6878      	ldr	r0, [r7, #4]
 80646ec:	4798      	blx	r3
}
 80646ee:	bf00      	nop
 80646f0:	3710      	adds	r7, #16
 80646f2:	46bd      	mov	sp, r7
 80646f4:	bd80      	pop	{r7, pc}

080646f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80646f6:	b580      	push	{r7, lr}
 80646f8:	b084      	sub	sp, #16
 80646fa:	af00      	add	r7, sp, #0
 80646fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80646fe:	687b      	ldr	r3, [r7, #4]
 8064700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8064702:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8064704:	68f8      	ldr	r0, [r7, #12]
 8064706:	f7ff fcfb 	bl	8064100 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 806470a:	bf00      	nop
 806470c:	3710      	adds	r7, #16
 806470e:	46bd      	mov	sp, r7
 8064710:	bd80      	pop	{r7, pc}

08064712 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8064712:	b580      	push	{r7, lr}
 8064714:	b084      	sub	sp, #16
 8064716:	af00      	add	r7, sp, #0
 8064718:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 806471a:	687b      	ldr	r3, [r7, #4]
 806471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806471e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8064720:	68fb      	ldr	r3, [r7, #12]
 8064722:	2240      	movs	r2, #64	; 0x40
 8064724:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8064726:	68fb      	ldr	r3, [r7, #12]
 8064728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806472a:	f043 0204 	orr.w	r2, r3, #4
 806472e:	68fb      	ldr	r3, [r7, #12]
 8064730:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8064732:	68f8      	ldr	r0, [r7, #12]
 8064734:	f7ff fcf8 	bl	8064128 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8064738:	bf00      	nop
 806473a:	3710      	adds	r7, #16
 806473c:	46bd      	mov	sp, r7
 806473e:	bd80      	pop	{r7, pc}

08064740 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8064740:	b480      	push	{r7}
 8064742:	b083      	sub	sp, #12
 8064744:	af00      	add	r7, sp, #0
 8064746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8064748:	bf00      	nop
 806474a:	370c      	adds	r7, #12
 806474c:	46bd      	mov	sp, r7
 806474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064752:	4770      	bx	lr

08064754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8064754:	b480      	push	{r7}
 8064756:	b085      	sub	sp, #20
 8064758:	af00      	add	r7, sp, #0
 806475a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 806475c:	687b      	ldr	r3, [r7, #4]
 806475e:	f003 0307 	and.w	r3, r3, #7
 8064762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8064764:	4b0c      	ldr	r3, [pc, #48]	; (8064798 <__NVIC_SetPriorityGrouping+0x44>)
 8064766:	68db      	ldr	r3, [r3, #12]
 8064768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 806476a:	68ba      	ldr	r2, [r7, #8]
 806476c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8064770:	4013      	ands	r3, r2
 8064772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8064774:	68fb      	ldr	r3, [r7, #12]
 8064776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8064778:	68bb      	ldr	r3, [r7, #8]
 806477a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 806477c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8064780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8064784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8064786:	4a04      	ldr	r2, [pc, #16]	; (8064798 <__NVIC_SetPriorityGrouping+0x44>)
 8064788:	68bb      	ldr	r3, [r7, #8]
 806478a:	60d3      	str	r3, [r2, #12]
}
 806478c:	bf00      	nop
 806478e:	3714      	adds	r7, #20
 8064790:	46bd      	mov	sp, r7
 8064792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064796:	4770      	bx	lr
 8064798:	e000ed00 	.word	0xe000ed00

0806479c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 806479c:	b480      	push	{r7}
 806479e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80647a0:	4b04      	ldr	r3, [pc, #16]	; (80647b4 <__NVIC_GetPriorityGrouping+0x18>)
 80647a2:	68db      	ldr	r3, [r3, #12]
 80647a4:	0a1b      	lsrs	r3, r3, #8
 80647a6:	f003 0307 	and.w	r3, r3, #7
}
 80647aa:	4618      	mov	r0, r3
 80647ac:	46bd      	mov	sp, r7
 80647ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80647b2:	4770      	bx	lr
 80647b4:	e000ed00 	.word	0xe000ed00

080647b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80647b8:	b480      	push	{r7}
 80647ba:	b083      	sub	sp, #12
 80647bc:	af00      	add	r7, sp, #0
 80647be:	4603      	mov	r3, r0
 80647c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80647c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80647c6:	2b00      	cmp	r3, #0
 80647c8:	db0b      	blt.n	80647e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80647ca:	79fb      	ldrb	r3, [r7, #7]
 80647cc:	f003 021f 	and.w	r2, r3, #31
 80647d0:	4907      	ldr	r1, [pc, #28]	; (80647f0 <__NVIC_EnableIRQ+0x38>)
 80647d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80647d6:	095b      	lsrs	r3, r3, #5
 80647d8:	2001      	movs	r0, #1
 80647da:	fa00 f202 	lsl.w	r2, r0, r2
 80647de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80647e2:	bf00      	nop
 80647e4:	370c      	adds	r7, #12
 80647e6:	46bd      	mov	sp, r7
 80647e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80647ec:	4770      	bx	lr
 80647ee:	bf00      	nop
 80647f0:	e000e100 	.word	0xe000e100

080647f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80647f4:	b480      	push	{r7}
 80647f6:	b083      	sub	sp, #12
 80647f8:	af00      	add	r7, sp, #0
 80647fa:	4603      	mov	r3, r0
 80647fc:	6039      	str	r1, [r7, #0]
 80647fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8064800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8064804:	2b00      	cmp	r3, #0
 8064806:	db0a      	blt.n	806481e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8064808:	683b      	ldr	r3, [r7, #0]
 806480a:	b2da      	uxtb	r2, r3
 806480c:	490c      	ldr	r1, [pc, #48]	; (8064840 <__NVIC_SetPriority+0x4c>)
 806480e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8064812:	0112      	lsls	r2, r2, #4
 8064814:	b2d2      	uxtb	r2, r2
 8064816:	440b      	add	r3, r1
 8064818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 806481c:	e00a      	b.n	8064834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806481e:	683b      	ldr	r3, [r7, #0]
 8064820:	b2da      	uxtb	r2, r3
 8064822:	4908      	ldr	r1, [pc, #32]	; (8064844 <__NVIC_SetPriority+0x50>)
 8064824:	79fb      	ldrb	r3, [r7, #7]
 8064826:	f003 030f 	and.w	r3, r3, #15
 806482a:	3b04      	subs	r3, #4
 806482c:	0112      	lsls	r2, r2, #4
 806482e:	b2d2      	uxtb	r2, r2
 8064830:	440b      	add	r3, r1
 8064832:	761a      	strb	r2, [r3, #24]
}
 8064834:	bf00      	nop
 8064836:	370c      	adds	r7, #12
 8064838:	46bd      	mov	sp, r7
 806483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806483e:	4770      	bx	lr
 8064840:	e000e100 	.word	0xe000e100
 8064844:	e000ed00 	.word	0xe000ed00

08064848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8064848:	b480      	push	{r7}
 806484a:	b089      	sub	sp, #36	; 0x24
 806484c:	af00      	add	r7, sp, #0
 806484e:	60f8      	str	r0, [r7, #12]
 8064850:	60b9      	str	r1, [r7, #8]
 8064852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8064854:	68fb      	ldr	r3, [r7, #12]
 8064856:	f003 0307 	and.w	r3, r3, #7
 806485a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 806485c:	69fb      	ldr	r3, [r7, #28]
 806485e:	f1c3 0307 	rsb	r3, r3, #7
 8064862:	2b04      	cmp	r3, #4
 8064864:	bf28      	it	cs
 8064866:	2304      	movcs	r3, #4
 8064868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 806486a:	69fb      	ldr	r3, [r7, #28]
 806486c:	3304      	adds	r3, #4
 806486e:	2b06      	cmp	r3, #6
 8064870:	d902      	bls.n	8064878 <NVIC_EncodePriority+0x30>
 8064872:	69fb      	ldr	r3, [r7, #28]
 8064874:	3b03      	subs	r3, #3
 8064876:	e000      	b.n	806487a <NVIC_EncodePriority+0x32>
 8064878:	2300      	movs	r3, #0
 806487a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 806487c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8064880:	69bb      	ldr	r3, [r7, #24]
 8064882:	fa02 f303 	lsl.w	r3, r2, r3
 8064886:	43da      	mvns	r2, r3
 8064888:	68bb      	ldr	r3, [r7, #8]
 806488a:	401a      	ands	r2, r3
 806488c:	697b      	ldr	r3, [r7, #20]
 806488e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8064890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8064894:	697b      	ldr	r3, [r7, #20]
 8064896:	fa01 f303 	lsl.w	r3, r1, r3
 806489a:	43d9      	mvns	r1, r3
 806489c:	687b      	ldr	r3, [r7, #4]
 806489e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80648a0:	4313      	orrs	r3, r2
         );
}
 80648a2:	4618      	mov	r0, r3
 80648a4:	3724      	adds	r7, #36	; 0x24
 80648a6:	46bd      	mov	sp, r7
 80648a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80648ac:	4770      	bx	lr
	...

080648b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80648b0:	b480      	push	{r7}
 80648b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80648b4:	f3bf 8f4f 	dsb	sy
}
 80648b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80648ba:	4b06      	ldr	r3, [pc, #24]	; (80648d4 <__NVIC_SystemReset+0x24>)
 80648bc:	68db      	ldr	r3, [r3, #12]
 80648be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80648c2:	4904      	ldr	r1, [pc, #16]	; (80648d4 <__NVIC_SystemReset+0x24>)
 80648c4:	4b04      	ldr	r3, [pc, #16]	; (80648d8 <__NVIC_SystemReset+0x28>)
 80648c6:	4313      	orrs	r3, r2
 80648c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80648ca:	f3bf 8f4f 	dsb	sy
}
 80648ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80648d0:	bf00      	nop
 80648d2:	e7fd      	b.n	80648d0 <__NVIC_SystemReset+0x20>
 80648d4:	e000ed00 	.word	0xe000ed00
 80648d8:	05fa0004 	.word	0x05fa0004

080648dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80648dc:	b580      	push	{r7, lr}
 80648de:	b082      	sub	sp, #8
 80648e0:	af00      	add	r7, sp, #0
 80648e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80648e4:	687b      	ldr	r3, [r7, #4]
 80648e6:	2b07      	cmp	r3, #7
 80648e8:	d00f      	beq.n	806490a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80648ea:	687b      	ldr	r3, [r7, #4]
 80648ec:	2b06      	cmp	r3, #6
 80648ee:	d00c      	beq.n	806490a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80648f0:	687b      	ldr	r3, [r7, #4]
 80648f2:	2b05      	cmp	r3, #5
 80648f4:	d009      	beq.n	806490a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80648f6:	687b      	ldr	r3, [r7, #4]
 80648f8:	2b04      	cmp	r3, #4
 80648fa:	d006      	beq.n	806490a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80648fc:	687b      	ldr	r3, [r7, #4]
 80648fe:	2b03      	cmp	r3, #3
 8064900:	d003      	beq.n	806490a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8064902:	2192      	movs	r1, #146	; 0x92
 8064904:	4804      	ldr	r0, [pc, #16]	; (8064918 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8064906:	f7fe fb10 	bl	8062f2a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 806490a:	6878      	ldr	r0, [r7, #4]
 806490c:	f7ff ff22 	bl	8064754 <__NVIC_SetPriorityGrouping>
}
 8064910:	bf00      	nop
 8064912:	3708      	adds	r7, #8
 8064914:	46bd      	mov	sp, r7
 8064916:	bd80      	pop	{r7, pc}
 8064918:	08077098 	.word	0x08077098

0806491c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 806491c:	b580      	push	{r7, lr}
 806491e:	b086      	sub	sp, #24
 8064920:	af00      	add	r7, sp, #0
 8064922:	4603      	mov	r3, r0
 8064924:	60b9      	str	r1, [r7, #8]
 8064926:	607a      	str	r2, [r7, #4]
 8064928:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 806492a:	2300      	movs	r3, #0
 806492c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 806492e:	687b      	ldr	r3, [r7, #4]
 8064930:	2b0f      	cmp	r3, #15
 8064932:	d903      	bls.n	806493c <HAL_NVIC_SetPriority+0x20>
 8064934:	21aa      	movs	r1, #170	; 0xaa
 8064936:	480e      	ldr	r0, [pc, #56]	; (8064970 <HAL_NVIC_SetPriority+0x54>)
 8064938:	f7fe faf7 	bl	8062f2a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 806493c:	68bb      	ldr	r3, [r7, #8]
 806493e:	2b0f      	cmp	r3, #15
 8064940:	d903      	bls.n	806494a <HAL_NVIC_SetPriority+0x2e>
 8064942:	21ab      	movs	r1, #171	; 0xab
 8064944:	480a      	ldr	r0, [pc, #40]	; (8064970 <HAL_NVIC_SetPriority+0x54>)
 8064946:	f7fe faf0 	bl	8062f2a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 806494a:	f7ff ff27 	bl	806479c <__NVIC_GetPriorityGrouping>
 806494e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8064950:	687a      	ldr	r2, [r7, #4]
 8064952:	68b9      	ldr	r1, [r7, #8]
 8064954:	6978      	ldr	r0, [r7, #20]
 8064956:	f7ff ff77 	bl	8064848 <NVIC_EncodePriority>
 806495a:	4602      	mov	r2, r0
 806495c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8064960:	4611      	mov	r1, r2
 8064962:	4618      	mov	r0, r3
 8064964:	f7ff ff46 	bl	80647f4 <__NVIC_SetPriority>
}
 8064968:	bf00      	nop
 806496a:	3718      	adds	r7, #24
 806496c:	46bd      	mov	sp, r7
 806496e:	bd80      	pop	{r7, pc}
 8064970:	08077098 	.word	0x08077098

08064974 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8064974:	b580      	push	{r7, lr}
 8064976:	b082      	sub	sp, #8
 8064978:	af00      	add	r7, sp, #0
 806497a:	4603      	mov	r3, r0
 806497c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 806497e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8064982:	2b00      	cmp	r3, #0
 8064984:	da03      	bge.n	806498e <HAL_NVIC_EnableIRQ+0x1a>
 8064986:	21be      	movs	r1, #190	; 0xbe
 8064988:	4805      	ldr	r0, [pc, #20]	; (80649a0 <HAL_NVIC_EnableIRQ+0x2c>)
 806498a:	f7fe face 	bl	8062f2a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 806498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8064992:	4618      	mov	r0, r3
 8064994:	f7ff ff10 	bl	80647b8 <__NVIC_EnableIRQ>
}
 8064998:	bf00      	nop
 806499a:	3708      	adds	r7, #8
 806499c:	46bd      	mov	sp, r7
 806499e:	bd80      	pop	{r7, pc}
 80649a0:	08077098 	.word	0x08077098

080649a4 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80649a4:	b580      	push	{r7, lr}
 80649a6:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80649a8:	f7ff ff82 	bl	80648b0 <__NVIC_SystemReset>

080649ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80649ac:	b580      	push	{r7, lr}
 80649ae:	b086      	sub	sp, #24
 80649b0:	af00      	add	r7, sp, #0
 80649b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80649b4:	2300      	movs	r3, #0
 80649b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80649b8:	f7fe ff82 	bl	80638c0 <HAL_GetTick>
 80649bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80649be:	687b      	ldr	r3, [r7, #4]
 80649c0:	2b00      	cmp	r3, #0
 80649c2:	d101      	bne.n	80649c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80649c4:	2301      	movs	r3, #1
 80649c6:	e204      	b.n	8064dd2 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80649c8:	687b      	ldr	r3, [r7, #4]
 80649ca:	681b      	ldr	r3, [r3, #0]
 80649cc:	4a97      	ldr	r2, [pc, #604]	; (8064c2c <HAL_DMA_Init+0x280>)
 80649ce:	4293      	cmp	r3, r2
 80649d0:	d04e      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 80649d2:	687b      	ldr	r3, [r7, #4]
 80649d4:	681b      	ldr	r3, [r3, #0]
 80649d6:	4a96      	ldr	r2, [pc, #600]	; (8064c30 <HAL_DMA_Init+0x284>)
 80649d8:	4293      	cmp	r3, r2
 80649da:	d049      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 80649dc:	687b      	ldr	r3, [r7, #4]
 80649de:	681b      	ldr	r3, [r3, #0]
 80649e0:	4a94      	ldr	r2, [pc, #592]	; (8064c34 <HAL_DMA_Init+0x288>)
 80649e2:	4293      	cmp	r3, r2
 80649e4:	d044      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 80649e6:	687b      	ldr	r3, [r7, #4]
 80649e8:	681b      	ldr	r3, [r3, #0]
 80649ea:	4a93      	ldr	r2, [pc, #588]	; (8064c38 <HAL_DMA_Init+0x28c>)
 80649ec:	4293      	cmp	r3, r2
 80649ee:	d03f      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 80649f0:	687b      	ldr	r3, [r7, #4]
 80649f2:	681b      	ldr	r3, [r3, #0]
 80649f4:	4a91      	ldr	r2, [pc, #580]	; (8064c3c <HAL_DMA_Init+0x290>)
 80649f6:	4293      	cmp	r3, r2
 80649f8:	d03a      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 80649fa:	687b      	ldr	r3, [r7, #4]
 80649fc:	681b      	ldr	r3, [r3, #0]
 80649fe:	4a90      	ldr	r2, [pc, #576]	; (8064c40 <HAL_DMA_Init+0x294>)
 8064a00:	4293      	cmp	r3, r2
 8064a02:	d035      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a04:	687b      	ldr	r3, [r7, #4]
 8064a06:	681b      	ldr	r3, [r3, #0]
 8064a08:	4a8e      	ldr	r2, [pc, #568]	; (8064c44 <HAL_DMA_Init+0x298>)
 8064a0a:	4293      	cmp	r3, r2
 8064a0c:	d030      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a0e:	687b      	ldr	r3, [r7, #4]
 8064a10:	681b      	ldr	r3, [r3, #0]
 8064a12:	4a8d      	ldr	r2, [pc, #564]	; (8064c48 <HAL_DMA_Init+0x29c>)
 8064a14:	4293      	cmp	r3, r2
 8064a16:	d02b      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a18:	687b      	ldr	r3, [r7, #4]
 8064a1a:	681b      	ldr	r3, [r3, #0]
 8064a1c:	4a8b      	ldr	r2, [pc, #556]	; (8064c4c <HAL_DMA_Init+0x2a0>)
 8064a1e:	4293      	cmp	r3, r2
 8064a20:	d026      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a22:	687b      	ldr	r3, [r7, #4]
 8064a24:	681b      	ldr	r3, [r3, #0]
 8064a26:	4a8a      	ldr	r2, [pc, #552]	; (8064c50 <HAL_DMA_Init+0x2a4>)
 8064a28:	4293      	cmp	r3, r2
 8064a2a:	d021      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a2c:	687b      	ldr	r3, [r7, #4]
 8064a2e:	681b      	ldr	r3, [r3, #0]
 8064a30:	4a88      	ldr	r2, [pc, #544]	; (8064c54 <HAL_DMA_Init+0x2a8>)
 8064a32:	4293      	cmp	r3, r2
 8064a34:	d01c      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a36:	687b      	ldr	r3, [r7, #4]
 8064a38:	681b      	ldr	r3, [r3, #0]
 8064a3a:	4a87      	ldr	r2, [pc, #540]	; (8064c58 <HAL_DMA_Init+0x2ac>)
 8064a3c:	4293      	cmp	r3, r2
 8064a3e:	d017      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a40:	687b      	ldr	r3, [r7, #4]
 8064a42:	681b      	ldr	r3, [r3, #0]
 8064a44:	4a85      	ldr	r2, [pc, #532]	; (8064c5c <HAL_DMA_Init+0x2b0>)
 8064a46:	4293      	cmp	r3, r2
 8064a48:	d012      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a4a:	687b      	ldr	r3, [r7, #4]
 8064a4c:	681b      	ldr	r3, [r3, #0]
 8064a4e:	4a84      	ldr	r2, [pc, #528]	; (8064c60 <HAL_DMA_Init+0x2b4>)
 8064a50:	4293      	cmp	r3, r2
 8064a52:	d00d      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a54:	687b      	ldr	r3, [r7, #4]
 8064a56:	681b      	ldr	r3, [r3, #0]
 8064a58:	4a82      	ldr	r2, [pc, #520]	; (8064c64 <HAL_DMA_Init+0x2b8>)
 8064a5a:	4293      	cmp	r3, r2
 8064a5c:	d008      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a5e:	687b      	ldr	r3, [r7, #4]
 8064a60:	681b      	ldr	r3, [r3, #0]
 8064a62:	4a81      	ldr	r2, [pc, #516]	; (8064c68 <HAL_DMA_Init+0x2bc>)
 8064a64:	4293      	cmp	r3, r2
 8064a66:	d003      	beq.n	8064a70 <HAL_DMA_Init+0xc4>
 8064a68:	21b8      	movs	r1, #184	; 0xb8
 8064a6a:	4880      	ldr	r0, [pc, #512]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064a6c:	f7fe fa5d 	bl	8062f2a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8064a70:	687b      	ldr	r3, [r7, #4]
 8064a72:	685b      	ldr	r3, [r3, #4]
 8064a74:	2b00      	cmp	r3, #0
 8064a76:	d026      	beq.n	8064ac6 <HAL_DMA_Init+0x11a>
 8064a78:	687b      	ldr	r3, [r7, #4]
 8064a7a:	685b      	ldr	r3, [r3, #4]
 8064a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8064a80:	d021      	beq.n	8064ac6 <HAL_DMA_Init+0x11a>
 8064a82:	687b      	ldr	r3, [r7, #4]
 8064a84:	685b      	ldr	r3, [r3, #4]
 8064a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8064a8a:	d01c      	beq.n	8064ac6 <HAL_DMA_Init+0x11a>
 8064a8c:	687b      	ldr	r3, [r7, #4]
 8064a8e:	685b      	ldr	r3, [r3, #4]
 8064a90:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8064a94:	d017      	beq.n	8064ac6 <HAL_DMA_Init+0x11a>
 8064a96:	687b      	ldr	r3, [r7, #4]
 8064a98:	685b      	ldr	r3, [r3, #4]
 8064a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8064a9e:	d012      	beq.n	8064ac6 <HAL_DMA_Init+0x11a>
 8064aa0:	687b      	ldr	r3, [r7, #4]
 8064aa2:	685b      	ldr	r3, [r3, #4]
 8064aa4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8064aa8:	d00d      	beq.n	8064ac6 <HAL_DMA_Init+0x11a>
 8064aaa:	687b      	ldr	r3, [r7, #4]
 8064aac:	685b      	ldr	r3, [r3, #4]
 8064aae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8064ab2:	d008      	beq.n	8064ac6 <HAL_DMA_Init+0x11a>
 8064ab4:	687b      	ldr	r3, [r7, #4]
 8064ab6:	685b      	ldr	r3, [r3, #4]
 8064ab8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8064abc:	d003      	beq.n	8064ac6 <HAL_DMA_Init+0x11a>
 8064abe:	21b9      	movs	r1, #185	; 0xb9
 8064ac0:	486a      	ldr	r0, [pc, #424]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064ac2:	f7fe fa32 	bl	8062f2a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8064ac6:	687b      	ldr	r3, [r7, #4]
 8064ac8:	689b      	ldr	r3, [r3, #8]
 8064aca:	2b00      	cmp	r3, #0
 8064acc:	d00b      	beq.n	8064ae6 <HAL_DMA_Init+0x13a>
 8064ace:	687b      	ldr	r3, [r7, #4]
 8064ad0:	689b      	ldr	r3, [r3, #8]
 8064ad2:	2b40      	cmp	r3, #64	; 0x40
 8064ad4:	d007      	beq.n	8064ae6 <HAL_DMA_Init+0x13a>
 8064ad6:	687b      	ldr	r3, [r7, #4]
 8064ad8:	689b      	ldr	r3, [r3, #8]
 8064ada:	2b80      	cmp	r3, #128	; 0x80
 8064adc:	d003      	beq.n	8064ae6 <HAL_DMA_Init+0x13a>
 8064ade:	21ba      	movs	r1, #186	; 0xba
 8064ae0:	4862      	ldr	r0, [pc, #392]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064ae2:	f7fe fa22 	bl	8062f2a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8064ae6:	687b      	ldr	r3, [r7, #4]
 8064ae8:	68db      	ldr	r3, [r3, #12]
 8064aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8064aee:	d007      	beq.n	8064b00 <HAL_DMA_Init+0x154>
 8064af0:	687b      	ldr	r3, [r7, #4]
 8064af2:	68db      	ldr	r3, [r3, #12]
 8064af4:	2b00      	cmp	r3, #0
 8064af6:	d003      	beq.n	8064b00 <HAL_DMA_Init+0x154>
 8064af8:	21bb      	movs	r1, #187	; 0xbb
 8064afa:	485c      	ldr	r0, [pc, #368]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064afc:	f7fe fa15 	bl	8062f2a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8064b00:	687b      	ldr	r3, [r7, #4]
 8064b02:	691b      	ldr	r3, [r3, #16]
 8064b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8064b08:	d007      	beq.n	8064b1a <HAL_DMA_Init+0x16e>
 8064b0a:	687b      	ldr	r3, [r7, #4]
 8064b0c:	691b      	ldr	r3, [r3, #16]
 8064b0e:	2b00      	cmp	r3, #0
 8064b10:	d003      	beq.n	8064b1a <HAL_DMA_Init+0x16e>
 8064b12:	21bc      	movs	r1, #188	; 0xbc
 8064b14:	4855      	ldr	r0, [pc, #340]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064b16:	f7fe fa08 	bl	8062f2a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8064b1a:	687b      	ldr	r3, [r7, #4]
 8064b1c:	695b      	ldr	r3, [r3, #20]
 8064b1e:	2b00      	cmp	r3, #0
 8064b20:	d00d      	beq.n	8064b3e <HAL_DMA_Init+0x192>
 8064b22:	687b      	ldr	r3, [r7, #4]
 8064b24:	695b      	ldr	r3, [r3, #20]
 8064b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8064b2a:	d008      	beq.n	8064b3e <HAL_DMA_Init+0x192>
 8064b2c:	687b      	ldr	r3, [r7, #4]
 8064b2e:	695b      	ldr	r3, [r3, #20]
 8064b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8064b34:	d003      	beq.n	8064b3e <HAL_DMA_Init+0x192>
 8064b36:	21bd      	movs	r1, #189	; 0xbd
 8064b38:	484c      	ldr	r0, [pc, #304]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064b3a:	f7fe f9f6 	bl	8062f2a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8064b3e:	687b      	ldr	r3, [r7, #4]
 8064b40:	699b      	ldr	r3, [r3, #24]
 8064b42:	2b00      	cmp	r3, #0
 8064b44:	d00d      	beq.n	8064b62 <HAL_DMA_Init+0x1b6>
 8064b46:	687b      	ldr	r3, [r7, #4]
 8064b48:	699b      	ldr	r3, [r3, #24]
 8064b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8064b4e:	d008      	beq.n	8064b62 <HAL_DMA_Init+0x1b6>
 8064b50:	687b      	ldr	r3, [r7, #4]
 8064b52:	699b      	ldr	r3, [r3, #24]
 8064b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8064b58:	d003      	beq.n	8064b62 <HAL_DMA_Init+0x1b6>
 8064b5a:	21be      	movs	r1, #190	; 0xbe
 8064b5c:	4843      	ldr	r0, [pc, #268]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064b5e:	f7fe f9e4 	bl	8062f2a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8064b62:	687b      	ldr	r3, [r7, #4]
 8064b64:	69db      	ldr	r3, [r3, #28]
 8064b66:	2b00      	cmp	r3, #0
 8064b68:	d00c      	beq.n	8064b84 <HAL_DMA_Init+0x1d8>
 8064b6a:	687b      	ldr	r3, [r7, #4]
 8064b6c:	69db      	ldr	r3, [r3, #28]
 8064b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8064b72:	d007      	beq.n	8064b84 <HAL_DMA_Init+0x1d8>
 8064b74:	687b      	ldr	r3, [r7, #4]
 8064b76:	69db      	ldr	r3, [r3, #28]
 8064b78:	2b20      	cmp	r3, #32
 8064b7a:	d003      	beq.n	8064b84 <HAL_DMA_Init+0x1d8>
 8064b7c:	21bf      	movs	r1, #191	; 0xbf
 8064b7e:	483b      	ldr	r0, [pc, #236]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064b80:	f7fe f9d3 	bl	8062f2a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8064b84:	687b      	ldr	r3, [r7, #4]
 8064b86:	6a1b      	ldr	r3, [r3, #32]
 8064b88:	2b00      	cmp	r3, #0
 8064b8a:	d012      	beq.n	8064bb2 <HAL_DMA_Init+0x206>
 8064b8c:	687b      	ldr	r3, [r7, #4]
 8064b8e:	6a1b      	ldr	r3, [r3, #32]
 8064b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8064b94:	d00d      	beq.n	8064bb2 <HAL_DMA_Init+0x206>
 8064b96:	687b      	ldr	r3, [r7, #4]
 8064b98:	6a1b      	ldr	r3, [r3, #32]
 8064b9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8064b9e:	d008      	beq.n	8064bb2 <HAL_DMA_Init+0x206>
 8064ba0:	687b      	ldr	r3, [r7, #4]
 8064ba2:	6a1b      	ldr	r3, [r3, #32]
 8064ba4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8064ba8:	d003      	beq.n	8064bb2 <HAL_DMA_Init+0x206>
 8064baa:	21c0      	movs	r1, #192	; 0xc0
 8064bac:	482f      	ldr	r0, [pc, #188]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064bae:	f7fe f9bc 	bl	8062f2a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8064bb2:	687b      	ldr	r3, [r7, #4]
 8064bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064bb6:	2b00      	cmp	r3, #0
 8064bb8:	d007      	beq.n	8064bca <HAL_DMA_Init+0x21e>
 8064bba:	687b      	ldr	r3, [r7, #4]
 8064bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064bbe:	2b04      	cmp	r3, #4
 8064bc0:	d003      	beq.n	8064bca <HAL_DMA_Init+0x21e>
 8064bc2:	21c1      	movs	r1, #193	; 0xc1
 8064bc4:	4829      	ldr	r0, [pc, #164]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064bc6:	f7fe f9b0 	bl	8062f2a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8064bca:	687b      	ldr	r3, [r7, #4]
 8064bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064bce:	2b00      	cmp	r3, #0
 8064bd0:	d065      	beq.n	8064c9e <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8064bd2:	687b      	ldr	r3, [r7, #4]
 8064bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064bd6:	2b00      	cmp	r3, #0
 8064bd8:	d00f      	beq.n	8064bfa <HAL_DMA_Init+0x24e>
 8064bda:	687b      	ldr	r3, [r7, #4]
 8064bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064bde:	2b01      	cmp	r3, #1
 8064be0:	d00b      	beq.n	8064bfa <HAL_DMA_Init+0x24e>
 8064be2:	687b      	ldr	r3, [r7, #4]
 8064be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064be6:	2b02      	cmp	r3, #2
 8064be8:	d007      	beq.n	8064bfa <HAL_DMA_Init+0x24e>
 8064bea:	687b      	ldr	r3, [r7, #4]
 8064bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064bee:	2b03      	cmp	r3, #3
 8064bf0:	d003      	beq.n	8064bfa <HAL_DMA_Init+0x24e>
 8064bf2:	21c6      	movs	r1, #198	; 0xc6
 8064bf4:	481d      	ldr	r0, [pc, #116]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064bf6:	f7fe f998 	bl	8062f2a <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8064bfa:	687b      	ldr	r3, [r7, #4]
 8064bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064bfe:	2b00      	cmp	r3, #0
 8064c00:	d036      	beq.n	8064c70 <HAL_DMA_Init+0x2c4>
 8064c02:	687b      	ldr	r3, [r7, #4]
 8064c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064c06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8064c0a:	d031      	beq.n	8064c70 <HAL_DMA_Init+0x2c4>
 8064c0c:	687b      	ldr	r3, [r7, #4]
 8064c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8064c14:	d02c      	beq.n	8064c70 <HAL_DMA_Init+0x2c4>
 8064c16:	687b      	ldr	r3, [r7, #4]
 8064c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064c1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8064c1e:	d027      	beq.n	8064c70 <HAL_DMA_Init+0x2c4>
 8064c20:	21c7      	movs	r1, #199	; 0xc7
 8064c22:	4812      	ldr	r0, [pc, #72]	; (8064c6c <HAL_DMA_Init+0x2c0>)
 8064c24:	f7fe f981 	bl	8062f2a <assert_failed>
 8064c28:	e022      	b.n	8064c70 <HAL_DMA_Init+0x2c4>
 8064c2a:	bf00      	nop
 8064c2c:	40026010 	.word	0x40026010
 8064c30:	40026028 	.word	0x40026028
 8064c34:	40026040 	.word	0x40026040
 8064c38:	40026058 	.word	0x40026058
 8064c3c:	40026070 	.word	0x40026070
 8064c40:	40026088 	.word	0x40026088
 8064c44:	400260a0 	.word	0x400260a0
 8064c48:	400260b8 	.word	0x400260b8
 8064c4c:	40026410 	.word	0x40026410
 8064c50:	40026428 	.word	0x40026428
 8064c54:	40026440 	.word	0x40026440
 8064c58:	40026458 	.word	0x40026458
 8064c5c:	40026470 	.word	0x40026470
 8064c60:	40026488 	.word	0x40026488
 8064c64:	400264a0 	.word	0x400264a0
 8064c68:	400264b8 	.word	0x400264b8
 8064c6c:	080770d4 	.word	0x080770d4
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8064c70:	687b      	ldr	r3, [r7, #4]
 8064c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064c74:	2b00      	cmp	r3, #0
 8064c76:	d012      	beq.n	8064c9e <HAL_DMA_Init+0x2f2>
 8064c78:	687b      	ldr	r3, [r7, #4]
 8064c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8064c80:	d00d      	beq.n	8064c9e <HAL_DMA_Init+0x2f2>
 8064c82:	687b      	ldr	r3, [r7, #4]
 8064c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8064c8a:	d008      	beq.n	8064c9e <HAL_DMA_Init+0x2f2>
 8064c8c:	687b      	ldr	r3, [r7, #4]
 8064c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064c90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8064c94:	d003      	beq.n	8064c9e <HAL_DMA_Init+0x2f2>
 8064c96:	21c8      	movs	r1, #200	; 0xc8
 8064c98:	4850      	ldr	r0, [pc, #320]	; (8064ddc <HAL_DMA_Init+0x430>)
 8064c9a:	f7fe f946 	bl	8062f2a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8064c9e:	687b      	ldr	r3, [r7, #4]
 8064ca0:	2202      	movs	r2, #2
 8064ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8064ca6:	687b      	ldr	r3, [r7, #4]
 8064ca8:	2200      	movs	r2, #0
 8064caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8064cae:	687b      	ldr	r3, [r7, #4]
 8064cb0:	681b      	ldr	r3, [r3, #0]
 8064cb2:	681a      	ldr	r2, [r3, #0]
 8064cb4:	687b      	ldr	r3, [r7, #4]
 8064cb6:	681b      	ldr	r3, [r3, #0]
 8064cb8:	f022 0201 	bic.w	r2, r2, #1
 8064cbc:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8064cbe:	e00f      	b.n	8064ce0 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8064cc0:	f7fe fdfe 	bl	80638c0 <HAL_GetTick>
 8064cc4:	4602      	mov	r2, r0
 8064cc6:	693b      	ldr	r3, [r7, #16]
 8064cc8:	1ad3      	subs	r3, r2, r3
 8064cca:	2b05      	cmp	r3, #5
 8064ccc:	d908      	bls.n	8064ce0 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8064cce:	687b      	ldr	r3, [r7, #4]
 8064cd0:	2220      	movs	r2, #32
 8064cd2:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8064cd4:	687b      	ldr	r3, [r7, #4]
 8064cd6:	2203      	movs	r2, #3
 8064cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8064cdc:	2303      	movs	r3, #3
 8064cde:	e078      	b.n	8064dd2 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8064ce0:	687b      	ldr	r3, [r7, #4]
 8064ce2:	681b      	ldr	r3, [r3, #0]
 8064ce4:	681b      	ldr	r3, [r3, #0]
 8064ce6:	f003 0301 	and.w	r3, r3, #1
 8064cea:	2b00      	cmp	r3, #0
 8064cec:	d1e8      	bne.n	8064cc0 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8064cee:	687b      	ldr	r3, [r7, #4]
 8064cf0:	681b      	ldr	r3, [r3, #0]
 8064cf2:	681b      	ldr	r3, [r3, #0]
 8064cf4:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8064cf6:	697a      	ldr	r2, [r7, #20]
 8064cf8:	4b39      	ldr	r3, [pc, #228]	; (8064de0 <HAL_DMA_Init+0x434>)
 8064cfa:	4013      	ands	r3, r2
 8064cfc:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8064cfe:	687b      	ldr	r3, [r7, #4]
 8064d00:	685a      	ldr	r2, [r3, #4]
 8064d02:	687b      	ldr	r3, [r7, #4]
 8064d04:	689b      	ldr	r3, [r3, #8]
 8064d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8064d08:	687b      	ldr	r3, [r7, #4]
 8064d0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8064d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8064d0e:	687b      	ldr	r3, [r7, #4]
 8064d10:	691b      	ldr	r3, [r3, #16]
 8064d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8064d14:	687b      	ldr	r3, [r7, #4]
 8064d16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8064d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8064d1a:	687b      	ldr	r3, [r7, #4]
 8064d1c:	699b      	ldr	r3, [r3, #24]
 8064d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8064d20:	687b      	ldr	r3, [r7, #4]
 8064d22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8064d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8064d26:	687b      	ldr	r3, [r7, #4]
 8064d28:	6a1b      	ldr	r3, [r3, #32]
 8064d2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8064d2c:	697a      	ldr	r2, [r7, #20]
 8064d2e:	4313      	orrs	r3, r2
 8064d30:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8064d32:	687b      	ldr	r3, [r7, #4]
 8064d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064d36:	2b04      	cmp	r3, #4
 8064d38:	d107      	bne.n	8064d4a <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8064d3a:	687b      	ldr	r3, [r7, #4]
 8064d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8064d3e:	687b      	ldr	r3, [r7, #4]
 8064d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8064d42:	4313      	orrs	r3, r2
 8064d44:	697a      	ldr	r2, [r7, #20]
 8064d46:	4313      	orrs	r3, r2
 8064d48:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8064d4a:	687b      	ldr	r3, [r7, #4]
 8064d4c:	681b      	ldr	r3, [r3, #0]
 8064d4e:	697a      	ldr	r2, [r7, #20]
 8064d50:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8064d52:	687b      	ldr	r3, [r7, #4]
 8064d54:	681b      	ldr	r3, [r3, #0]
 8064d56:	695b      	ldr	r3, [r3, #20]
 8064d58:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8064d5a:	697b      	ldr	r3, [r7, #20]
 8064d5c:	f023 0307 	bic.w	r3, r3, #7
 8064d60:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8064d62:	687b      	ldr	r3, [r7, #4]
 8064d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064d66:	697a      	ldr	r2, [r7, #20]
 8064d68:	4313      	orrs	r3, r2
 8064d6a:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8064d6c:	687b      	ldr	r3, [r7, #4]
 8064d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8064d70:	2b04      	cmp	r3, #4
 8064d72:	d117      	bne.n	8064da4 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8064d74:	687b      	ldr	r3, [r7, #4]
 8064d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8064d78:	697a      	ldr	r2, [r7, #20]
 8064d7a:	4313      	orrs	r3, r2
 8064d7c:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8064d7e:	687b      	ldr	r3, [r7, #4]
 8064d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8064d82:	2b00      	cmp	r3, #0
 8064d84:	d00e      	beq.n	8064da4 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8064d86:	6878      	ldr	r0, [r7, #4]
 8064d88:	f000 fb12 	bl	80653b0 <DMA_CheckFifoParam>
 8064d8c:	4603      	mov	r3, r0
 8064d8e:	2b00      	cmp	r3, #0
 8064d90:	d008      	beq.n	8064da4 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8064d92:	687b      	ldr	r3, [r7, #4]
 8064d94:	2240      	movs	r2, #64	; 0x40
 8064d96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8064d98:	687b      	ldr	r3, [r7, #4]
 8064d9a:	2201      	movs	r2, #1
 8064d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8064da0:	2301      	movs	r3, #1
 8064da2:	e016      	b.n	8064dd2 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8064da4:	687b      	ldr	r3, [r7, #4]
 8064da6:	681b      	ldr	r3, [r3, #0]
 8064da8:	697a      	ldr	r2, [r7, #20]
 8064daa:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8064dac:	6878      	ldr	r0, [r7, #4]
 8064dae:	f000 fac9 	bl	8065344 <DMA_CalcBaseAndBitshift>
 8064db2:	4603      	mov	r3, r0
 8064db4:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8064db6:	687b      	ldr	r3, [r7, #4]
 8064db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8064dba:	223f      	movs	r2, #63	; 0x3f
 8064dbc:	409a      	lsls	r2, r3
 8064dbe:	68fb      	ldr	r3, [r7, #12]
 8064dc0:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8064dc2:	687b      	ldr	r3, [r7, #4]
 8064dc4:	2200      	movs	r2, #0
 8064dc6:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8064dc8:	687b      	ldr	r3, [r7, #4]
 8064dca:	2201      	movs	r2, #1
 8064dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8064dd0:	2300      	movs	r3, #0
}
 8064dd2:	4618      	mov	r0, r3
 8064dd4:	3718      	adds	r7, #24
 8064dd6:	46bd      	mov	sp, r7
 8064dd8:	bd80      	pop	{r7, pc}
 8064dda:	bf00      	nop
 8064ddc:	080770d4 	.word	0x080770d4
 8064de0:	f010803f 	.word	0xf010803f

08064de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8064de4:	b580      	push	{r7, lr}
 8064de6:	b086      	sub	sp, #24
 8064de8:	af00      	add	r7, sp, #0
 8064dea:	60f8      	str	r0, [r7, #12]
 8064dec:	60b9      	str	r1, [r7, #8]
 8064dee:	607a      	str	r2, [r7, #4]
 8064df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8064df2:	2300      	movs	r3, #0
 8064df4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8064df6:	68fb      	ldr	r3, [r7, #12]
 8064df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8064dfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8064dfc:	683b      	ldr	r3, [r7, #0]
 8064dfe:	2b00      	cmp	r3, #0
 8064e00:	d003      	beq.n	8064e0a <HAL_DMA_Start_IT+0x26>
 8064e02:	683b      	ldr	r3, [r7, #0]
 8064e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8064e08:	d304      	bcc.n	8064e14 <HAL_DMA_Start_IT+0x30>
 8064e0a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8064e0e:	4827      	ldr	r0, [pc, #156]	; (8064eac <HAL_DMA_Start_IT+0xc8>)
 8064e10:	f7fe f88b 	bl	8062f2a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8064e14:	68fb      	ldr	r3, [r7, #12]
 8064e16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8064e1a:	2b01      	cmp	r3, #1
 8064e1c:	d101      	bne.n	8064e22 <HAL_DMA_Start_IT+0x3e>
 8064e1e:	2302      	movs	r3, #2
 8064e20:	e040      	b.n	8064ea4 <HAL_DMA_Start_IT+0xc0>
 8064e22:	68fb      	ldr	r3, [r7, #12]
 8064e24:	2201      	movs	r2, #1
 8064e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8064e2a:	68fb      	ldr	r3, [r7, #12]
 8064e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8064e30:	b2db      	uxtb	r3, r3
 8064e32:	2b01      	cmp	r3, #1
 8064e34:	d12f      	bne.n	8064e96 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8064e36:	68fb      	ldr	r3, [r7, #12]
 8064e38:	2202      	movs	r2, #2
 8064e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8064e3e:	68fb      	ldr	r3, [r7, #12]
 8064e40:	2200      	movs	r2, #0
 8064e42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8064e44:	683b      	ldr	r3, [r7, #0]
 8064e46:	687a      	ldr	r2, [r7, #4]
 8064e48:	68b9      	ldr	r1, [r7, #8]
 8064e4a:	68f8      	ldr	r0, [r7, #12]
 8064e4c:	f000 fa4c 	bl	80652e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8064e50:	68fb      	ldr	r3, [r7, #12]
 8064e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8064e54:	223f      	movs	r2, #63	; 0x3f
 8064e56:	409a      	lsls	r2, r3
 8064e58:	693b      	ldr	r3, [r7, #16]
 8064e5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8064e5c:	68fb      	ldr	r3, [r7, #12]
 8064e5e:	681b      	ldr	r3, [r3, #0]
 8064e60:	681a      	ldr	r2, [r3, #0]
 8064e62:	68fb      	ldr	r3, [r7, #12]
 8064e64:	681b      	ldr	r3, [r3, #0]
 8064e66:	f042 0216 	orr.w	r2, r2, #22
 8064e6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8064e6c:	68fb      	ldr	r3, [r7, #12]
 8064e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064e70:	2b00      	cmp	r3, #0
 8064e72:	d007      	beq.n	8064e84 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8064e74:	68fb      	ldr	r3, [r7, #12]
 8064e76:	681b      	ldr	r3, [r3, #0]
 8064e78:	681a      	ldr	r2, [r3, #0]
 8064e7a:	68fb      	ldr	r3, [r7, #12]
 8064e7c:	681b      	ldr	r3, [r3, #0]
 8064e7e:	f042 0208 	orr.w	r2, r2, #8
 8064e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8064e84:	68fb      	ldr	r3, [r7, #12]
 8064e86:	681b      	ldr	r3, [r3, #0]
 8064e88:	681a      	ldr	r2, [r3, #0]
 8064e8a:	68fb      	ldr	r3, [r7, #12]
 8064e8c:	681b      	ldr	r3, [r3, #0]
 8064e8e:	f042 0201 	orr.w	r2, r2, #1
 8064e92:	601a      	str	r2, [r3, #0]
 8064e94:	e005      	b.n	8064ea2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8064e96:	68fb      	ldr	r3, [r7, #12]
 8064e98:	2200      	movs	r2, #0
 8064e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8064e9e:	2302      	movs	r3, #2
 8064ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8064ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8064ea4:	4618      	mov	r0, r3
 8064ea6:	3718      	adds	r7, #24
 8064ea8:	46bd      	mov	sp, r7
 8064eaa:	bd80      	pop	{r7, pc}
 8064eac:	080770d4 	.word	0x080770d4

08064eb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8064eb0:	b580      	push	{r7, lr}
 8064eb2:	b084      	sub	sp, #16
 8064eb4:	af00      	add	r7, sp, #0
 8064eb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8064eb8:	687b      	ldr	r3, [r7, #4]
 8064eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8064ebc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8064ebe:	f7fe fcff 	bl	80638c0 <HAL_GetTick>
 8064ec2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8064ec4:	687b      	ldr	r3, [r7, #4]
 8064ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8064eca:	b2db      	uxtb	r3, r3
 8064ecc:	2b02      	cmp	r3, #2
 8064ece:	d008      	beq.n	8064ee2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8064ed0:	687b      	ldr	r3, [r7, #4]
 8064ed2:	2280      	movs	r2, #128	; 0x80
 8064ed4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8064ed6:	687b      	ldr	r3, [r7, #4]
 8064ed8:	2200      	movs	r2, #0
 8064eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8064ede:	2301      	movs	r3, #1
 8064ee0:	e052      	b.n	8064f88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8064ee2:	687b      	ldr	r3, [r7, #4]
 8064ee4:	681b      	ldr	r3, [r3, #0]
 8064ee6:	681a      	ldr	r2, [r3, #0]
 8064ee8:	687b      	ldr	r3, [r7, #4]
 8064eea:	681b      	ldr	r3, [r3, #0]
 8064eec:	f022 0216 	bic.w	r2, r2, #22
 8064ef0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8064ef2:	687b      	ldr	r3, [r7, #4]
 8064ef4:	681b      	ldr	r3, [r3, #0]
 8064ef6:	695a      	ldr	r2, [r3, #20]
 8064ef8:	687b      	ldr	r3, [r7, #4]
 8064efa:	681b      	ldr	r3, [r3, #0]
 8064efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8064f00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8064f02:	687b      	ldr	r3, [r7, #4]
 8064f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8064f06:	2b00      	cmp	r3, #0
 8064f08:	d103      	bne.n	8064f12 <HAL_DMA_Abort+0x62>
 8064f0a:	687b      	ldr	r3, [r7, #4]
 8064f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8064f0e:	2b00      	cmp	r3, #0
 8064f10:	d007      	beq.n	8064f22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8064f12:	687b      	ldr	r3, [r7, #4]
 8064f14:	681b      	ldr	r3, [r3, #0]
 8064f16:	681a      	ldr	r2, [r3, #0]
 8064f18:	687b      	ldr	r3, [r7, #4]
 8064f1a:	681b      	ldr	r3, [r3, #0]
 8064f1c:	f022 0208 	bic.w	r2, r2, #8
 8064f20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8064f22:	687b      	ldr	r3, [r7, #4]
 8064f24:	681b      	ldr	r3, [r3, #0]
 8064f26:	681a      	ldr	r2, [r3, #0]
 8064f28:	687b      	ldr	r3, [r7, #4]
 8064f2a:	681b      	ldr	r3, [r3, #0]
 8064f2c:	f022 0201 	bic.w	r2, r2, #1
 8064f30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8064f32:	e013      	b.n	8064f5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8064f34:	f7fe fcc4 	bl	80638c0 <HAL_GetTick>
 8064f38:	4602      	mov	r2, r0
 8064f3a:	68bb      	ldr	r3, [r7, #8]
 8064f3c:	1ad3      	subs	r3, r2, r3
 8064f3e:	2b05      	cmp	r3, #5
 8064f40:	d90c      	bls.n	8064f5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8064f42:	687b      	ldr	r3, [r7, #4]
 8064f44:	2220      	movs	r2, #32
 8064f46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8064f48:	687b      	ldr	r3, [r7, #4]
 8064f4a:	2203      	movs	r2, #3
 8064f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8064f50:	687b      	ldr	r3, [r7, #4]
 8064f52:	2200      	movs	r2, #0
 8064f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8064f58:	2303      	movs	r3, #3
 8064f5a:	e015      	b.n	8064f88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8064f5c:	687b      	ldr	r3, [r7, #4]
 8064f5e:	681b      	ldr	r3, [r3, #0]
 8064f60:	681b      	ldr	r3, [r3, #0]
 8064f62:	f003 0301 	and.w	r3, r3, #1
 8064f66:	2b00      	cmp	r3, #0
 8064f68:	d1e4      	bne.n	8064f34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8064f6a:	687b      	ldr	r3, [r7, #4]
 8064f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8064f6e:	223f      	movs	r2, #63	; 0x3f
 8064f70:	409a      	lsls	r2, r3
 8064f72:	68fb      	ldr	r3, [r7, #12]
 8064f74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8064f76:	687b      	ldr	r3, [r7, #4]
 8064f78:	2201      	movs	r2, #1
 8064f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8064f7e:	687b      	ldr	r3, [r7, #4]
 8064f80:	2200      	movs	r2, #0
 8064f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8064f86:	2300      	movs	r3, #0
}
 8064f88:	4618      	mov	r0, r3
 8064f8a:	3710      	adds	r7, #16
 8064f8c:	46bd      	mov	sp, r7
 8064f8e:	bd80      	pop	{r7, pc}

08064f90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8064f90:	b480      	push	{r7}
 8064f92:	b083      	sub	sp, #12
 8064f94:	af00      	add	r7, sp, #0
 8064f96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8064f98:	687b      	ldr	r3, [r7, #4]
 8064f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8064f9e:	b2db      	uxtb	r3, r3
 8064fa0:	2b02      	cmp	r3, #2
 8064fa2:	d004      	beq.n	8064fae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8064fa4:	687b      	ldr	r3, [r7, #4]
 8064fa6:	2280      	movs	r2, #128	; 0x80
 8064fa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8064faa:	2301      	movs	r3, #1
 8064fac:	e00c      	b.n	8064fc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8064fae:	687b      	ldr	r3, [r7, #4]
 8064fb0:	2205      	movs	r2, #5
 8064fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8064fb6:	687b      	ldr	r3, [r7, #4]
 8064fb8:	681b      	ldr	r3, [r3, #0]
 8064fba:	681a      	ldr	r2, [r3, #0]
 8064fbc:	687b      	ldr	r3, [r7, #4]
 8064fbe:	681b      	ldr	r3, [r3, #0]
 8064fc0:	f022 0201 	bic.w	r2, r2, #1
 8064fc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8064fc6:	2300      	movs	r3, #0
}
 8064fc8:	4618      	mov	r0, r3
 8064fca:	370c      	adds	r7, #12
 8064fcc:	46bd      	mov	sp, r7
 8064fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064fd2:	4770      	bx	lr

08064fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8064fd4:	b580      	push	{r7, lr}
 8064fd6:	b086      	sub	sp, #24
 8064fd8:	af00      	add	r7, sp, #0
 8064fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8064fdc:	2300      	movs	r3, #0
 8064fde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8064fe0:	4b92      	ldr	r3, [pc, #584]	; (806522c <HAL_DMA_IRQHandler+0x258>)
 8064fe2:	681b      	ldr	r3, [r3, #0]
 8064fe4:	4a92      	ldr	r2, [pc, #584]	; (8065230 <HAL_DMA_IRQHandler+0x25c>)
 8064fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8064fea:	0a9b      	lsrs	r3, r3, #10
 8064fec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8064fee:	687b      	ldr	r3, [r7, #4]
 8064ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8064ff2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8064ff4:	693b      	ldr	r3, [r7, #16]
 8064ff6:	681b      	ldr	r3, [r3, #0]
 8064ff8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8064ffa:	687b      	ldr	r3, [r7, #4]
 8064ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8064ffe:	2208      	movs	r2, #8
 8065000:	409a      	lsls	r2, r3
 8065002:	68fb      	ldr	r3, [r7, #12]
 8065004:	4013      	ands	r3, r2
 8065006:	2b00      	cmp	r3, #0
 8065008:	d01a      	beq.n	8065040 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 806500a:	687b      	ldr	r3, [r7, #4]
 806500c:	681b      	ldr	r3, [r3, #0]
 806500e:	681b      	ldr	r3, [r3, #0]
 8065010:	f003 0304 	and.w	r3, r3, #4
 8065014:	2b00      	cmp	r3, #0
 8065016:	d013      	beq.n	8065040 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8065018:	687b      	ldr	r3, [r7, #4]
 806501a:	681b      	ldr	r3, [r3, #0]
 806501c:	681a      	ldr	r2, [r3, #0]
 806501e:	687b      	ldr	r3, [r7, #4]
 8065020:	681b      	ldr	r3, [r3, #0]
 8065022:	f022 0204 	bic.w	r2, r2, #4
 8065026:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8065028:	687b      	ldr	r3, [r7, #4]
 806502a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 806502c:	2208      	movs	r2, #8
 806502e:	409a      	lsls	r2, r3
 8065030:	693b      	ldr	r3, [r7, #16]
 8065032:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8065034:	687b      	ldr	r3, [r7, #4]
 8065036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8065038:	f043 0201 	orr.w	r2, r3, #1
 806503c:	687b      	ldr	r3, [r7, #4]
 806503e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8065040:	687b      	ldr	r3, [r7, #4]
 8065042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065044:	2201      	movs	r2, #1
 8065046:	409a      	lsls	r2, r3
 8065048:	68fb      	ldr	r3, [r7, #12]
 806504a:	4013      	ands	r3, r2
 806504c:	2b00      	cmp	r3, #0
 806504e:	d012      	beq.n	8065076 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8065050:	687b      	ldr	r3, [r7, #4]
 8065052:	681b      	ldr	r3, [r3, #0]
 8065054:	695b      	ldr	r3, [r3, #20]
 8065056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 806505a:	2b00      	cmp	r3, #0
 806505c:	d00b      	beq.n	8065076 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 806505e:	687b      	ldr	r3, [r7, #4]
 8065060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065062:	2201      	movs	r2, #1
 8065064:	409a      	lsls	r2, r3
 8065066:	693b      	ldr	r3, [r7, #16]
 8065068:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 806506a:	687b      	ldr	r3, [r7, #4]
 806506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 806506e:	f043 0202 	orr.w	r2, r3, #2
 8065072:	687b      	ldr	r3, [r7, #4]
 8065074:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8065076:	687b      	ldr	r3, [r7, #4]
 8065078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 806507a:	2204      	movs	r2, #4
 806507c:	409a      	lsls	r2, r3
 806507e:	68fb      	ldr	r3, [r7, #12]
 8065080:	4013      	ands	r3, r2
 8065082:	2b00      	cmp	r3, #0
 8065084:	d012      	beq.n	80650ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8065086:	687b      	ldr	r3, [r7, #4]
 8065088:	681b      	ldr	r3, [r3, #0]
 806508a:	681b      	ldr	r3, [r3, #0]
 806508c:	f003 0302 	and.w	r3, r3, #2
 8065090:	2b00      	cmp	r3, #0
 8065092:	d00b      	beq.n	80650ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8065094:	687b      	ldr	r3, [r7, #4]
 8065096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065098:	2204      	movs	r2, #4
 806509a:	409a      	lsls	r2, r3
 806509c:	693b      	ldr	r3, [r7, #16]
 806509e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80650a0:	687b      	ldr	r3, [r7, #4]
 80650a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80650a4:	f043 0204 	orr.w	r2, r3, #4
 80650a8:	687b      	ldr	r3, [r7, #4]
 80650aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80650ac:	687b      	ldr	r3, [r7, #4]
 80650ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80650b0:	2210      	movs	r2, #16
 80650b2:	409a      	lsls	r2, r3
 80650b4:	68fb      	ldr	r3, [r7, #12]
 80650b6:	4013      	ands	r3, r2
 80650b8:	2b00      	cmp	r3, #0
 80650ba:	d043      	beq.n	8065144 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80650bc:	687b      	ldr	r3, [r7, #4]
 80650be:	681b      	ldr	r3, [r3, #0]
 80650c0:	681b      	ldr	r3, [r3, #0]
 80650c2:	f003 0308 	and.w	r3, r3, #8
 80650c6:	2b00      	cmp	r3, #0
 80650c8:	d03c      	beq.n	8065144 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80650ca:	687b      	ldr	r3, [r7, #4]
 80650cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80650ce:	2210      	movs	r2, #16
 80650d0:	409a      	lsls	r2, r3
 80650d2:	693b      	ldr	r3, [r7, #16]
 80650d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80650d6:	687b      	ldr	r3, [r7, #4]
 80650d8:	681b      	ldr	r3, [r3, #0]
 80650da:	681b      	ldr	r3, [r3, #0]
 80650dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80650e0:	2b00      	cmp	r3, #0
 80650e2:	d018      	beq.n	8065116 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80650e4:	687b      	ldr	r3, [r7, #4]
 80650e6:	681b      	ldr	r3, [r3, #0]
 80650e8:	681b      	ldr	r3, [r3, #0]
 80650ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80650ee:	2b00      	cmp	r3, #0
 80650f0:	d108      	bne.n	8065104 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80650f2:	687b      	ldr	r3, [r7, #4]
 80650f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80650f6:	2b00      	cmp	r3, #0
 80650f8:	d024      	beq.n	8065144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80650fa:	687b      	ldr	r3, [r7, #4]
 80650fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80650fe:	6878      	ldr	r0, [r7, #4]
 8065100:	4798      	blx	r3
 8065102:	e01f      	b.n	8065144 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8065104:	687b      	ldr	r3, [r7, #4]
 8065106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8065108:	2b00      	cmp	r3, #0
 806510a:	d01b      	beq.n	8065144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 806510c:	687b      	ldr	r3, [r7, #4]
 806510e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8065110:	6878      	ldr	r0, [r7, #4]
 8065112:	4798      	blx	r3
 8065114:	e016      	b.n	8065144 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8065116:	687b      	ldr	r3, [r7, #4]
 8065118:	681b      	ldr	r3, [r3, #0]
 806511a:	681b      	ldr	r3, [r3, #0]
 806511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8065120:	2b00      	cmp	r3, #0
 8065122:	d107      	bne.n	8065134 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8065124:	687b      	ldr	r3, [r7, #4]
 8065126:	681b      	ldr	r3, [r3, #0]
 8065128:	681a      	ldr	r2, [r3, #0]
 806512a:	687b      	ldr	r3, [r7, #4]
 806512c:	681b      	ldr	r3, [r3, #0]
 806512e:	f022 0208 	bic.w	r2, r2, #8
 8065132:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8065134:	687b      	ldr	r3, [r7, #4]
 8065136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8065138:	2b00      	cmp	r3, #0
 806513a:	d003      	beq.n	8065144 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 806513c:	687b      	ldr	r3, [r7, #4]
 806513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8065140:	6878      	ldr	r0, [r7, #4]
 8065142:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8065144:	687b      	ldr	r3, [r7, #4]
 8065146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8065148:	2220      	movs	r2, #32
 806514a:	409a      	lsls	r2, r3
 806514c:	68fb      	ldr	r3, [r7, #12]
 806514e:	4013      	ands	r3, r2
 8065150:	2b00      	cmp	r3, #0
 8065152:	f000 808e 	beq.w	8065272 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8065156:	687b      	ldr	r3, [r7, #4]
 8065158:	681b      	ldr	r3, [r3, #0]
 806515a:	681b      	ldr	r3, [r3, #0]
 806515c:	f003 0310 	and.w	r3, r3, #16
 8065160:	2b00      	cmp	r3, #0
 8065162:	f000 8086 	beq.w	8065272 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8065166:	687b      	ldr	r3, [r7, #4]
 8065168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 806516a:	2220      	movs	r2, #32
 806516c:	409a      	lsls	r2, r3
 806516e:	693b      	ldr	r3, [r7, #16]
 8065170:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8065172:	687b      	ldr	r3, [r7, #4]
 8065174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8065178:	b2db      	uxtb	r3, r3
 806517a:	2b05      	cmp	r3, #5
 806517c:	d136      	bne.n	80651ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 806517e:	687b      	ldr	r3, [r7, #4]
 8065180:	681b      	ldr	r3, [r3, #0]
 8065182:	681a      	ldr	r2, [r3, #0]
 8065184:	687b      	ldr	r3, [r7, #4]
 8065186:	681b      	ldr	r3, [r3, #0]
 8065188:	f022 0216 	bic.w	r2, r2, #22
 806518c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 806518e:	687b      	ldr	r3, [r7, #4]
 8065190:	681b      	ldr	r3, [r3, #0]
 8065192:	695a      	ldr	r2, [r3, #20]
 8065194:	687b      	ldr	r3, [r7, #4]
 8065196:	681b      	ldr	r3, [r3, #0]
 8065198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 806519c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 806519e:	687b      	ldr	r3, [r7, #4]
 80651a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80651a2:	2b00      	cmp	r3, #0
 80651a4:	d103      	bne.n	80651ae <HAL_DMA_IRQHandler+0x1da>
 80651a6:	687b      	ldr	r3, [r7, #4]
 80651a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80651aa:	2b00      	cmp	r3, #0
 80651ac:	d007      	beq.n	80651be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80651ae:	687b      	ldr	r3, [r7, #4]
 80651b0:	681b      	ldr	r3, [r3, #0]
 80651b2:	681a      	ldr	r2, [r3, #0]
 80651b4:	687b      	ldr	r3, [r7, #4]
 80651b6:	681b      	ldr	r3, [r3, #0]
 80651b8:	f022 0208 	bic.w	r2, r2, #8
 80651bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80651be:	687b      	ldr	r3, [r7, #4]
 80651c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80651c2:	223f      	movs	r2, #63	; 0x3f
 80651c4:	409a      	lsls	r2, r3
 80651c6:	693b      	ldr	r3, [r7, #16]
 80651c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80651ca:	687b      	ldr	r3, [r7, #4]
 80651cc:	2201      	movs	r2, #1
 80651ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80651d2:	687b      	ldr	r3, [r7, #4]
 80651d4:	2200      	movs	r2, #0
 80651d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80651da:	687b      	ldr	r3, [r7, #4]
 80651dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80651de:	2b00      	cmp	r3, #0
 80651e0:	d07d      	beq.n	80652de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80651e2:	687b      	ldr	r3, [r7, #4]
 80651e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80651e6:	6878      	ldr	r0, [r7, #4]
 80651e8:	4798      	blx	r3
        }
        return;
 80651ea:	e078      	b.n	80652de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80651ec:	687b      	ldr	r3, [r7, #4]
 80651ee:	681b      	ldr	r3, [r3, #0]
 80651f0:	681b      	ldr	r3, [r3, #0]
 80651f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80651f6:	2b00      	cmp	r3, #0
 80651f8:	d01c      	beq.n	8065234 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80651fa:	687b      	ldr	r3, [r7, #4]
 80651fc:	681b      	ldr	r3, [r3, #0]
 80651fe:	681b      	ldr	r3, [r3, #0]
 8065200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8065204:	2b00      	cmp	r3, #0
 8065206:	d108      	bne.n	806521a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8065208:	687b      	ldr	r3, [r7, #4]
 806520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806520c:	2b00      	cmp	r3, #0
 806520e:	d030      	beq.n	8065272 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8065210:	687b      	ldr	r3, [r7, #4]
 8065212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8065214:	6878      	ldr	r0, [r7, #4]
 8065216:	4798      	blx	r3
 8065218:	e02b      	b.n	8065272 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 806521a:	687b      	ldr	r3, [r7, #4]
 806521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806521e:	2b00      	cmp	r3, #0
 8065220:	d027      	beq.n	8065272 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8065222:	687b      	ldr	r3, [r7, #4]
 8065224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8065226:	6878      	ldr	r0, [r7, #4]
 8065228:	4798      	blx	r3
 806522a:	e022      	b.n	8065272 <HAL_DMA_IRQHandler+0x29e>
 806522c:	20000000 	.word	0x20000000
 8065230:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8065234:	687b      	ldr	r3, [r7, #4]
 8065236:	681b      	ldr	r3, [r3, #0]
 8065238:	681b      	ldr	r3, [r3, #0]
 806523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806523e:	2b00      	cmp	r3, #0
 8065240:	d10f      	bne.n	8065262 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8065242:	687b      	ldr	r3, [r7, #4]
 8065244:	681b      	ldr	r3, [r3, #0]
 8065246:	681a      	ldr	r2, [r3, #0]
 8065248:	687b      	ldr	r3, [r7, #4]
 806524a:	681b      	ldr	r3, [r3, #0]
 806524c:	f022 0210 	bic.w	r2, r2, #16
 8065250:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8065252:	687b      	ldr	r3, [r7, #4]
 8065254:	2201      	movs	r2, #1
 8065256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 806525a:	687b      	ldr	r3, [r7, #4]
 806525c:	2200      	movs	r2, #0
 806525e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8065262:	687b      	ldr	r3, [r7, #4]
 8065264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8065266:	2b00      	cmp	r3, #0
 8065268:	d003      	beq.n	8065272 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 806526a:	687b      	ldr	r3, [r7, #4]
 806526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806526e:	6878      	ldr	r0, [r7, #4]
 8065270:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8065272:	687b      	ldr	r3, [r7, #4]
 8065274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8065276:	2b00      	cmp	r3, #0
 8065278:	d032      	beq.n	80652e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 806527a:	687b      	ldr	r3, [r7, #4]
 806527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 806527e:	f003 0301 	and.w	r3, r3, #1
 8065282:	2b00      	cmp	r3, #0
 8065284:	d022      	beq.n	80652cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8065286:	687b      	ldr	r3, [r7, #4]
 8065288:	2205      	movs	r2, #5
 806528a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 806528e:	687b      	ldr	r3, [r7, #4]
 8065290:	681b      	ldr	r3, [r3, #0]
 8065292:	681a      	ldr	r2, [r3, #0]
 8065294:	687b      	ldr	r3, [r7, #4]
 8065296:	681b      	ldr	r3, [r3, #0]
 8065298:	f022 0201 	bic.w	r2, r2, #1
 806529c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 806529e:	68bb      	ldr	r3, [r7, #8]
 80652a0:	3301      	adds	r3, #1
 80652a2:	60bb      	str	r3, [r7, #8]
 80652a4:	697a      	ldr	r2, [r7, #20]
 80652a6:	429a      	cmp	r2, r3
 80652a8:	d307      	bcc.n	80652ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80652aa:	687b      	ldr	r3, [r7, #4]
 80652ac:	681b      	ldr	r3, [r3, #0]
 80652ae:	681b      	ldr	r3, [r3, #0]
 80652b0:	f003 0301 	and.w	r3, r3, #1
 80652b4:	2b00      	cmp	r3, #0
 80652b6:	d1f2      	bne.n	806529e <HAL_DMA_IRQHandler+0x2ca>
 80652b8:	e000      	b.n	80652bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80652ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80652bc:	687b      	ldr	r3, [r7, #4]
 80652be:	2201      	movs	r2, #1
 80652c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80652c4:	687b      	ldr	r3, [r7, #4]
 80652c6:	2200      	movs	r2, #0
 80652c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80652cc:	687b      	ldr	r3, [r7, #4]
 80652ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80652d0:	2b00      	cmp	r3, #0
 80652d2:	d005      	beq.n	80652e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80652d4:	687b      	ldr	r3, [r7, #4]
 80652d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80652d8:	6878      	ldr	r0, [r7, #4]
 80652da:	4798      	blx	r3
 80652dc:	e000      	b.n	80652e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80652de:	bf00      	nop
    }
  }
}
 80652e0:	3718      	adds	r7, #24
 80652e2:	46bd      	mov	sp, r7
 80652e4:	bd80      	pop	{r7, pc}
 80652e6:	bf00      	nop

080652e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80652e8:	b480      	push	{r7}
 80652ea:	b085      	sub	sp, #20
 80652ec:	af00      	add	r7, sp, #0
 80652ee:	60f8      	str	r0, [r7, #12]
 80652f0:	60b9      	str	r1, [r7, #8]
 80652f2:	607a      	str	r2, [r7, #4]
 80652f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80652f6:	68fb      	ldr	r3, [r7, #12]
 80652f8:	681b      	ldr	r3, [r3, #0]
 80652fa:	681a      	ldr	r2, [r3, #0]
 80652fc:	68fb      	ldr	r3, [r7, #12]
 80652fe:	681b      	ldr	r3, [r3, #0]
 8065300:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8065304:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8065306:	68fb      	ldr	r3, [r7, #12]
 8065308:	681b      	ldr	r3, [r3, #0]
 806530a:	683a      	ldr	r2, [r7, #0]
 806530c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 806530e:	68fb      	ldr	r3, [r7, #12]
 8065310:	689b      	ldr	r3, [r3, #8]
 8065312:	2b40      	cmp	r3, #64	; 0x40
 8065314:	d108      	bne.n	8065328 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8065316:	68fb      	ldr	r3, [r7, #12]
 8065318:	681b      	ldr	r3, [r3, #0]
 806531a:	687a      	ldr	r2, [r7, #4]
 806531c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 806531e:	68fb      	ldr	r3, [r7, #12]
 8065320:	681b      	ldr	r3, [r3, #0]
 8065322:	68ba      	ldr	r2, [r7, #8]
 8065324:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8065326:	e007      	b.n	8065338 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8065328:	68fb      	ldr	r3, [r7, #12]
 806532a:	681b      	ldr	r3, [r3, #0]
 806532c:	68ba      	ldr	r2, [r7, #8]
 806532e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8065330:	68fb      	ldr	r3, [r7, #12]
 8065332:	681b      	ldr	r3, [r3, #0]
 8065334:	687a      	ldr	r2, [r7, #4]
 8065336:	60da      	str	r2, [r3, #12]
}
 8065338:	bf00      	nop
 806533a:	3714      	adds	r7, #20
 806533c:	46bd      	mov	sp, r7
 806533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065342:	4770      	bx	lr

08065344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8065344:	b480      	push	{r7}
 8065346:	b085      	sub	sp, #20
 8065348:	af00      	add	r7, sp, #0
 806534a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 806534c:	687b      	ldr	r3, [r7, #4]
 806534e:	681b      	ldr	r3, [r3, #0]
 8065350:	b2db      	uxtb	r3, r3
 8065352:	3b10      	subs	r3, #16
 8065354:	4a14      	ldr	r2, [pc, #80]	; (80653a8 <DMA_CalcBaseAndBitshift+0x64>)
 8065356:	fba2 2303 	umull	r2, r3, r2, r3
 806535a:	091b      	lsrs	r3, r3, #4
 806535c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 806535e:	4a13      	ldr	r2, [pc, #76]	; (80653ac <DMA_CalcBaseAndBitshift+0x68>)
 8065360:	68fb      	ldr	r3, [r7, #12]
 8065362:	4413      	add	r3, r2
 8065364:	781b      	ldrb	r3, [r3, #0]
 8065366:	461a      	mov	r2, r3
 8065368:	687b      	ldr	r3, [r7, #4]
 806536a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 806536c:	68fb      	ldr	r3, [r7, #12]
 806536e:	2b03      	cmp	r3, #3
 8065370:	d909      	bls.n	8065386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8065372:	687b      	ldr	r3, [r7, #4]
 8065374:	681b      	ldr	r3, [r3, #0]
 8065376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 806537a:	f023 0303 	bic.w	r3, r3, #3
 806537e:	1d1a      	adds	r2, r3, #4
 8065380:	687b      	ldr	r3, [r7, #4]
 8065382:	659a      	str	r2, [r3, #88]	; 0x58
 8065384:	e007      	b.n	8065396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8065386:	687b      	ldr	r3, [r7, #4]
 8065388:	681b      	ldr	r3, [r3, #0]
 806538a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 806538e:	f023 0303 	bic.w	r3, r3, #3
 8065392:	687a      	ldr	r2, [r7, #4]
 8065394:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8065396:	687b      	ldr	r3, [r7, #4]
 8065398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 806539a:	4618      	mov	r0, r3
 806539c:	3714      	adds	r7, #20
 806539e:	46bd      	mov	sp, r7
 80653a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80653a4:	4770      	bx	lr
 80653a6:	bf00      	nop
 80653a8:	aaaaaaab 	.word	0xaaaaaaab
 80653ac:	080774d4 	.word	0x080774d4

080653b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80653b0:	b480      	push	{r7}
 80653b2:	b085      	sub	sp, #20
 80653b4:	af00      	add	r7, sp, #0
 80653b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80653b8:	2300      	movs	r3, #0
 80653ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80653bc:	687b      	ldr	r3, [r7, #4]
 80653be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80653c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80653c2:	687b      	ldr	r3, [r7, #4]
 80653c4:	699b      	ldr	r3, [r3, #24]
 80653c6:	2b00      	cmp	r3, #0
 80653c8:	d11f      	bne.n	806540a <DMA_CheckFifoParam+0x5a>
 80653ca:	68bb      	ldr	r3, [r7, #8]
 80653cc:	2b03      	cmp	r3, #3
 80653ce:	d856      	bhi.n	806547e <DMA_CheckFifoParam+0xce>
 80653d0:	a201      	add	r2, pc, #4	; (adr r2, 80653d8 <DMA_CheckFifoParam+0x28>)
 80653d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80653d6:	bf00      	nop
 80653d8:	080653e9 	.word	0x080653e9
 80653dc:	080653fb 	.word	0x080653fb
 80653e0:	080653e9 	.word	0x080653e9
 80653e4:	0806547f 	.word	0x0806547f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80653e8:	687b      	ldr	r3, [r7, #4]
 80653ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80653ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80653f0:	2b00      	cmp	r3, #0
 80653f2:	d046      	beq.n	8065482 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80653f4:	2301      	movs	r3, #1
 80653f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80653f8:	e043      	b.n	8065482 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80653fa:	687b      	ldr	r3, [r7, #4]
 80653fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80653fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8065402:	d140      	bne.n	8065486 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8065404:	2301      	movs	r3, #1
 8065406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8065408:	e03d      	b.n	8065486 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 806540a:	687b      	ldr	r3, [r7, #4]
 806540c:	699b      	ldr	r3, [r3, #24]
 806540e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8065412:	d121      	bne.n	8065458 <DMA_CheckFifoParam+0xa8>
 8065414:	68bb      	ldr	r3, [r7, #8]
 8065416:	2b03      	cmp	r3, #3
 8065418:	d837      	bhi.n	806548a <DMA_CheckFifoParam+0xda>
 806541a:	a201      	add	r2, pc, #4	; (adr r2, 8065420 <DMA_CheckFifoParam+0x70>)
 806541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8065420:	08065431 	.word	0x08065431
 8065424:	08065437 	.word	0x08065437
 8065428:	08065431 	.word	0x08065431
 806542c:	08065449 	.word	0x08065449
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8065430:	2301      	movs	r3, #1
 8065432:	73fb      	strb	r3, [r7, #15]
      break;
 8065434:	e030      	b.n	8065498 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8065436:	687b      	ldr	r3, [r7, #4]
 8065438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806543a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 806543e:	2b00      	cmp	r3, #0
 8065440:	d025      	beq.n	806548e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8065442:	2301      	movs	r3, #1
 8065444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8065446:	e022      	b.n	806548e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8065448:	687b      	ldr	r3, [r7, #4]
 806544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806544c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8065450:	d11f      	bne.n	8065492 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8065452:	2301      	movs	r3, #1
 8065454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8065456:	e01c      	b.n	8065492 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8065458:	68bb      	ldr	r3, [r7, #8]
 806545a:	2b02      	cmp	r3, #2
 806545c:	d903      	bls.n	8065466 <DMA_CheckFifoParam+0xb6>
 806545e:	68bb      	ldr	r3, [r7, #8]
 8065460:	2b03      	cmp	r3, #3
 8065462:	d003      	beq.n	806546c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8065464:	e018      	b.n	8065498 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8065466:	2301      	movs	r3, #1
 8065468:	73fb      	strb	r3, [r7, #15]
      break;
 806546a:	e015      	b.n	8065498 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 806546c:	687b      	ldr	r3, [r7, #4]
 806546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8065470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8065474:	2b00      	cmp	r3, #0
 8065476:	d00e      	beq.n	8065496 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8065478:	2301      	movs	r3, #1
 806547a:	73fb      	strb	r3, [r7, #15]
      break;
 806547c:	e00b      	b.n	8065496 <DMA_CheckFifoParam+0xe6>
      break;
 806547e:	bf00      	nop
 8065480:	e00a      	b.n	8065498 <DMA_CheckFifoParam+0xe8>
      break;
 8065482:	bf00      	nop
 8065484:	e008      	b.n	8065498 <DMA_CheckFifoParam+0xe8>
      break;
 8065486:	bf00      	nop
 8065488:	e006      	b.n	8065498 <DMA_CheckFifoParam+0xe8>
      break;
 806548a:	bf00      	nop
 806548c:	e004      	b.n	8065498 <DMA_CheckFifoParam+0xe8>
      break;
 806548e:	bf00      	nop
 8065490:	e002      	b.n	8065498 <DMA_CheckFifoParam+0xe8>
      break;   
 8065492:	bf00      	nop
 8065494:	e000      	b.n	8065498 <DMA_CheckFifoParam+0xe8>
      break;
 8065496:	bf00      	nop
    }
  } 
  
  return status; 
 8065498:	7bfb      	ldrb	r3, [r7, #15]
}
 806549a:	4618      	mov	r0, r3
 806549c:	3714      	adds	r7, #20
 806549e:	46bd      	mov	sp, r7
 80654a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80654a4:	4770      	bx	lr
 80654a6:	bf00      	nop

080654a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80654a8:	b580      	push	{r7, lr}
 80654aa:	b088      	sub	sp, #32
 80654ac:	af00      	add	r7, sp, #0
 80654ae:	6078      	str	r0, [r7, #4]
 80654b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80654b2:	2300      	movs	r3, #0
 80654b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80654b6:	2300      	movs	r3, #0
 80654b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80654ba:	2300      	movs	r3, #0
 80654bc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80654be:	687b      	ldr	r3, [r7, #4]
 80654c0:	4a33      	ldr	r2, [pc, #204]	; (8065590 <HAL_GPIO_Init+0xe8>)
 80654c2:	4293      	cmp	r3, r2
 80654c4:	d017      	beq.n	80654f6 <HAL_GPIO_Init+0x4e>
 80654c6:	687b      	ldr	r3, [r7, #4]
 80654c8:	4a32      	ldr	r2, [pc, #200]	; (8065594 <HAL_GPIO_Init+0xec>)
 80654ca:	4293      	cmp	r3, r2
 80654cc:	d013      	beq.n	80654f6 <HAL_GPIO_Init+0x4e>
 80654ce:	687b      	ldr	r3, [r7, #4]
 80654d0:	4a31      	ldr	r2, [pc, #196]	; (8065598 <HAL_GPIO_Init+0xf0>)
 80654d2:	4293      	cmp	r3, r2
 80654d4:	d00f      	beq.n	80654f6 <HAL_GPIO_Init+0x4e>
 80654d6:	687b      	ldr	r3, [r7, #4]
 80654d8:	4a30      	ldr	r2, [pc, #192]	; (806559c <HAL_GPIO_Init+0xf4>)
 80654da:	4293      	cmp	r3, r2
 80654dc:	d00b      	beq.n	80654f6 <HAL_GPIO_Init+0x4e>
 80654de:	687b      	ldr	r3, [r7, #4]
 80654e0:	4a2f      	ldr	r2, [pc, #188]	; (80655a0 <HAL_GPIO_Init+0xf8>)
 80654e2:	4293      	cmp	r3, r2
 80654e4:	d007      	beq.n	80654f6 <HAL_GPIO_Init+0x4e>
 80654e6:	687b      	ldr	r3, [r7, #4]
 80654e8:	4a2e      	ldr	r2, [pc, #184]	; (80655a4 <HAL_GPIO_Init+0xfc>)
 80654ea:	4293      	cmp	r3, r2
 80654ec:	d003      	beq.n	80654f6 <HAL_GPIO_Init+0x4e>
 80654ee:	21ac      	movs	r1, #172	; 0xac
 80654f0:	482d      	ldr	r0, [pc, #180]	; (80655a8 <HAL_GPIO_Init+0x100>)
 80654f2:	f7fd fd1a 	bl	8062f2a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80654f6:	683b      	ldr	r3, [r7, #0]
 80654f8:	681b      	ldr	r3, [r3, #0]
 80654fa:	b29b      	uxth	r3, r3
 80654fc:	2b00      	cmp	r3, #0
 80654fe:	d005      	beq.n	806550c <HAL_GPIO_Init+0x64>
 8065500:	683b      	ldr	r3, [r7, #0]
 8065502:	681b      	ldr	r3, [r3, #0]
 8065504:	0c1b      	lsrs	r3, r3, #16
 8065506:	041b      	lsls	r3, r3, #16
 8065508:	2b00      	cmp	r3, #0
 806550a:	d003      	beq.n	8065514 <HAL_GPIO_Init+0x6c>
 806550c:	21ad      	movs	r1, #173	; 0xad
 806550e:	4826      	ldr	r0, [pc, #152]	; (80655a8 <HAL_GPIO_Init+0x100>)
 8065510:	f7fd fd0b 	bl	8062f2a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8065514:	683b      	ldr	r3, [r7, #0]
 8065516:	685b      	ldr	r3, [r3, #4]
 8065518:	2b00      	cmp	r3, #0
 806551a:	d035      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 806551c:	683b      	ldr	r3, [r7, #0]
 806551e:	685b      	ldr	r3, [r3, #4]
 8065520:	2b01      	cmp	r3, #1
 8065522:	d031      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 8065524:	683b      	ldr	r3, [r7, #0]
 8065526:	685b      	ldr	r3, [r3, #4]
 8065528:	2b11      	cmp	r3, #17
 806552a:	d02d      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 806552c:	683b      	ldr	r3, [r7, #0]
 806552e:	685b      	ldr	r3, [r3, #4]
 8065530:	2b02      	cmp	r3, #2
 8065532:	d029      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 8065534:	683b      	ldr	r3, [r7, #0]
 8065536:	685b      	ldr	r3, [r3, #4]
 8065538:	2b12      	cmp	r3, #18
 806553a:	d025      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 806553c:	683b      	ldr	r3, [r7, #0]
 806553e:	685b      	ldr	r3, [r3, #4]
 8065540:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8065544:	d020      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 8065546:	683b      	ldr	r3, [r7, #0]
 8065548:	685b      	ldr	r3, [r3, #4]
 806554a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 806554e:	d01b      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 8065550:	683b      	ldr	r3, [r7, #0]
 8065552:	685b      	ldr	r3, [r3, #4]
 8065554:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8065558:	d016      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 806555a:	683b      	ldr	r3, [r7, #0]
 806555c:	685b      	ldr	r3, [r3, #4]
 806555e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8065562:	d011      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 8065564:	683b      	ldr	r3, [r7, #0]
 8065566:	685b      	ldr	r3, [r3, #4]
 8065568:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 806556c:	d00c      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 806556e:	683b      	ldr	r3, [r7, #0]
 8065570:	685b      	ldr	r3, [r3, #4]
 8065572:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8065576:	d007      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 8065578:	683b      	ldr	r3, [r7, #0]
 806557a:	685b      	ldr	r3, [r3, #4]
 806557c:	2b03      	cmp	r3, #3
 806557e:	d003      	beq.n	8065588 <HAL_GPIO_Init+0xe0>
 8065580:	21ae      	movs	r1, #174	; 0xae
 8065582:	4809      	ldr	r0, [pc, #36]	; (80655a8 <HAL_GPIO_Init+0x100>)
 8065584:	f7fd fcd1 	bl	8062f2a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8065588:	2300      	movs	r3, #0
 806558a:	61fb      	str	r3, [r7, #28]
 806558c:	e211      	b.n	80659b2 <HAL_GPIO_Init+0x50a>
 806558e:	bf00      	nop
 8065590:	40020000 	.word	0x40020000
 8065594:	40020400 	.word	0x40020400
 8065598:	40020800 	.word	0x40020800
 806559c:	40020c00 	.word	0x40020c00
 80655a0:	40021000 	.word	0x40021000
 80655a4:	40021c00 	.word	0x40021c00
 80655a8:	0807710c 	.word	0x0807710c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80655ac:	2201      	movs	r2, #1
 80655ae:	69fb      	ldr	r3, [r7, #28]
 80655b0:	fa02 f303 	lsl.w	r3, r2, r3
 80655b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80655b6:	683b      	ldr	r3, [r7, #0]
 80655b8:	681b      	ldr	r3, [r3, #0]
 80655ba:	697a      	ldr	r2, [r7, #20]
 80655bc:	4013      	ands	r3, r2
 80655be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80655c0:	693a      	ldr	r2, [r7, #16]
 80655c2:	697b      	ldr	r3, [r7, #20]
 80655c4:	429a      	cmp	r2, r3
 80655c6:	f040 81f1 	bne.w	80659ac <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80655ca:	683b      	ldr	r3, [r7, #0]
 80655cc:	685b      	ldr	r3, [r3, #4]
 80655ce:	f003 0303 	and.w	r3, r3, #3
 80655d2:	2b01      	cmp	r3, #1
 80655d4:	d005      	beq.n	80655e2 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80655d6:	683b      	ldr	r3, [r7, #0]
 80655d8:	685b      	ldr	r3, [r3, #4]
 80655da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80655de:	2b02      	cmp	r3, #2
 80655e0:	d144      	bne.n	806566c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80655e2:	683b      	ldr	r3, [r7, #0]
 80655e4:	68db      	ldr	r3, [r3, #12]
 80655e6:	2b00      	cmp	r3, #0
 80655e8:	d00f      	beq.n	806560a <HAL_GPIO_Init+0x162>
 80655ea:	683b      	ldr	r3, [r7, #0]
 80655ec:	68db      	ldr	r3, [r3, #12]
 80655ee:	2b01      	cmp	r3, #1
 80655f0:	d00b      	beq.n	806560a <HAL_GPIO_Init+0x162>
 80655f2:	683b      	ldr	r3, [r7, #0]
 80655f4:	68db      	ldr	r3, [r3, #12]
 80655f6:	2b02      	cmp	r3, #2
 80655f8:	d007      	beq.n	806560a <HAL_GPIO_Init+0x162>
 80655fa:	683b      	ldr	r3, [r7, #0]
 80655fc:	68db      	ldr	r3, [r3, #12]
 80655fe:	2b03      	cmp	r3, #3
 8065600:	d003      	beq.n	806560a <HAL_GPIO_Init+0x162>
 8065602:	21c0      	movs	r1, #192	; 0xc0
 8065604:	489f      	ldr	r0, [pc, #636]	; (8065884 <HAL_GPIO_Init+0x3dc>)
 8065606:	f7fd fc90 	bl	8062f2a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 806560a:	687b      	ldr	r3, [r7, #4]
 806560c:	689b      	ldr	r3, [r3, #8]
 806560e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8065610:	69fb      	ldr	r3, [r7, #28]
 8065612:	005b      	lsls	r3, r3, #1
 8065614:	2203      	movs	r2, #3
 8065616:	fa02 f303 	lsl.w	r3, r2, r3
 806561a:	43db      	mvns	r3, r3
 806561c:	69ba      	ldr	r2, [r7, #24]
 806561e:	4013      	ands	r3, r2
 8065620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8065622:	683b      	ldr	r3, [r7, #0]
 8065624:	68da      	ldr	r2, [r3, #12]
 8065626:	69fb      	ldr	r3, [r7, #28]
 8065628:	005b      	lsls	r3, r3, #1
 806562a:	fa02 f303 	lsl.w	r3, r2, r3
 806562e:	69ba      	ldr	r2, [r7, #24]
 8065630:	4313      	orrs	r3, r2
 8065632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8065634:	687b      	ldr	r3, [r7, #4]
 8065636:	69ba      	ldr	r2, [r7, #24]
 8065638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 806563a:	687b      	ldr	r3, [r7, #4]
 806563c:	685b      	ldr	r3, [r3, #4]
 806563e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8065640:	2201      	movs	r2, #1
 8065642:	69fb      	ldr	r3, [r7, #28]
 8065644:	fa02 f303 	lsl.w	r3, r2, r3
 8065648:	43db      	mvns	r3, r3
 806564a:	69ba      	ldr	r2, [r7, #24]
 806564c:	4013      	ands	r3, r2
 806564e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8065650:	683b      	ldr	r3, [r7, #0]
 8065652:	685b      	ldr	r3, [r3, #4]
 8065654:	091b      	lsrs	r3, r3, #4
 8065656:	f003 0201 	and.w	r2, r3, #1
 806565a:	69fb      	ldr	r3, [r7, #28]
 806565c:	fa02 f303 	lsl.w	r3, r2, r3
 8065660:	69ba      	ldr	r2, [r7, #24]
 8065662:	4313      	orrs	r3, r2
 8065664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8065666:	687b      	ldr	r3, [r7, #4]
 8065668:	69ba      	ldr	r2, [r7, #24]
 806566a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 806566c:	683b      	ldr	r3, [r7, #0]
 806566e:	685b      	ldr	r3, [r3, #4]
 8065670:	f003 0303 	and.w	r3, r3, #3
 8065674:	2b03      	cmp	r3, #3
 8065676:	d027      	beq.n	80656c8 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8065678:	683b      	ldr	r3, [r7, #0]
 806567a:	689b      	ldr	r3, [r3, #8]
 806567c:	2b00      	cmp	r3, #0
 806567e:	d00b      	beq.n	8065698 <HAL_GPIO_Init+0x1f0>
 8065680:	683b      	ldr	r3, [r7, #0]
 8065682:	689b      	ldr	r3, [r3, #8]
 8065684:	2b01      	cmp	r3, #1
 8065686:	d007      	beq.n	8065698 <HAL_GPIO_Init+0x1f0>
 8065688:	683b      	ldr	r3, [r7, #0]
 806568a:	689b      	ldr	r3, [r3, #8]
 806568c:	2b02      	cmp	r3, #2
 806568e:	d003      	beq.n	8065698 <HAL_GPIO_Init+0x1f0>
 8065690:	21d1      	movs	r1, #209	; 0xd1
 8065692:	487c      	ldr	r0, [pc, #496]	; (8065884 <HAL_GPIO_Init+0x3dc>)
 8065694:	f7fd fc49 	bl	8062f2a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8065698:	687b      	ldr	r3, [r7, #4]
 806569a:	68db      	ldr	r3, [r3, #12]
 806569c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 806569e:	69fb      	ldr	r3, [r7, #28]
 80656a0:	005b      	lsls	r3, r3, #1
 80656a2:	2203      	movs	r2, #3
 80656a4:	fa02 f303 	lsl.w	r3, r2, r3
 80656a8:	43db      	mvns	r3, r3
 80656aa:	69ba      	ldr	r2, [r7, #24]
 80656ac:	4013      	ands	r3, r2
 80656ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80656b0:	683b      	ldr	r3, [r7, #0]
 80656b2:	689a      	ldr	r2, [r3, #8]
 80656b4:	69fb      	ldr	r3, [r7, #28]
 80656b6:	005b      	lsls	r3, r3, #1
 80656b8:	fa02 f303 	lsl.w	r3, r2, r3
 80656bc:	69ba      	ldr	r2, [r7, #24]
 80656be:	4313      	orrs	r3, r2
 80656c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80656c2:	687b      	ldr	r3, [r7, #4]
 80656c4:	69ba      	ldr	r2, [r7, #24]
 80656c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80656c8:	683b      	ldr	r3, [r7, #0]
 80656ca:	685b      	ldr	r3, [r3, #4]
 80656cc:	f003 0303 	and.w	r3, r3, #3
 80656d0:	2b02      	cmp	r3, #2
 80656d2:	f040 80a0 	bne.w	8065816 <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80656d6:	683b      	ldr	r3, [r7, #0]
 80656d8:	691b      	ldr	r3, [r3, #16]
 80656da:	2b00      	cmp	r3, #0
 80656dc:	d077      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 80656de:	683b      	ldr	r3, [r7, #0]
 80656e0:	691b      	ldr	r3, [r3, #16]
 80656e2:	2b09      	cmp	r3, #9
 80656e4:	d073      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 80656e6:	683b      	ldr	r3, [r7, #0]
 80656e8:	691b      	ldr	r3, [r3, #16]
 80656ea:	2b00      	cmp	r3, #0
 80656ec:	d06f      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 80656ee:	683b      	ldr	r3, [r7, #0]
 80656f0:	691b      	ldr	r3, [r3, #16]
 80656f2:	2b00      	cmp	r3, #0
 80656f4:	d06b      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 80656f6:	683b      	ldr	r3, [r7, #0]
 80656f8:	691b      	ldr	r3, [r3, #16]
 80656fa:	2b00      	cmp	r3, #0
 80656fc:	d067      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 80656fe:	683b      	ldr	r3, [r7, #0]
 8065700:	691b      	ldr	r3, [r3, #16]
 8065702:	2b00      	cmp	r3, #0
 8065704:	d063      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 8065706:	683b      	ldr	r3, [r7, #0]
 8065708:	691b      	ldr	r3, [r3, #16]
 806570a:	2b01      	cmp	r3, #1
 806570c:	d05f      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 806570e:	683b      	ldr	r3, [r7, #0]
 8065710:	691b      	ldr	r3, [r3, #16]
 8065712:	2b01      	cmp	r3, #1
 8065714:	d05b      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 8065716:	683b      	ldr	r3, [r7, #0]
 8065718:	691b      	ldr	r3, [r3, #16]
 806571a:	2b02      	cmp	r3, #2
 806571c:	d057      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 806571e:	683b      	ldr	r3, [r7, #0]
 8065720:	691b      	ldr	r3, [r3, #16]
 8065722:	2b02      	cmp	r3, #2
 8065724:	d053      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 8065726:	683b      	ldr	r3, [r7, #0]
 8065728:	691b      	ldr	r3, [r3, #16]
 806572a:	2b02      	cmp	r3, #2
 806572c:	d04f      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 806572e:	683b      	ldr	r3, [r7, #0]
 8065730:	691b      	ldr	r3, [r3, #16]
 8065732:	2b04      	cmp	r3, #4
 8065734:	d04b      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 8065736:	683b      	ldr	r3, [r7, #0]
 8065738:	691b      	ldr	r3, [r3, #16]
 806573a:	2b04      	cmp	r3, #4
 806573c:	d047      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 806573e:	683b      	ldr	r3, [r7, #0]
 8065740:	691b      	ldr	r3, [r3, #16]
 8065742:	2b04      	cmp	r3, #4
 8065744:	d043      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 8065746:	683b      	ldr	r3, [r7, #0]
 8065748:	691b      	ldr	r3, [r3, #16]
 806574a:	2b05      	cmp	r3, #5
 806574c:	d03f      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 806574e:	683b      	ldr	r3, [r7, #0]
 8065750:	691b      	ldr	r3, [r3, #16]
 8065752:	2b05      	cmp	r3, #5
 8065754:	d03b      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 8065756:	683b      	ldr	r3, [r7, #0]
 8065758:	691b      	ldr	r3, [r3, #16]
 806575a:	2b05      	cmp	r3, #5
 806575c:	d037      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 806575e:	683b      	ldr	r3, [r7, #0]
 8065760:	691b      	ldr	r3, [r3, #16]
 8065762:	2b06      	cmp	r3, #6
 8065764:	d033      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 8065766:	683b      	ldr	r3, [r7, #0]
 8065768:	691b      	ldr	r3, [r3, #16]
 806576a:	2b06      	cmp	r3, #6
 806576c:	d02f      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 806576e:	683b      	ldr	r3, [r7, #0]
 8065770:	691b      	ldr	r3, [r3, #16]
 8065772:	2b05      	cmp	r3, #5
 8065774:	d02b      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 8065776:	683b      	ldr	r3, [r7, #0]
 8065778:	691b      	ldr	r3, [r3, #16]
 806577a:	2b06      	cmp	r3, #6
 806577c:	d027      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 806577e:	683b      	ldr	r3, [r7, #0]
 8065780:	691b      	ldr	r3, [r3, #16]
 8065782:	2b07      	cmp	r3, #7
 8065784:	d023      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 8065786:	683b      	ldr	r3, [r7, #0]
 8065788:	691b      	ldr	r3, [r3, #16]
 806578a:	2b07      	cmp	r3, #7
 806578c:	d01f      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 806578e:	683b      	ldr	r3, [r7, #0]
 8065790:	691b      	ldr	r3, [r3, #16]
 8065792:	2b07      	cmp	r3, #7
 8065794:	d01b      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 8065796:	683b      	ldr	r3, [r7, #0]
 8065798:	691b      	ldr	r3, [r3, #16]
 806579a:	2b08      	cmp	r3, #8
 806579c:	d017      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 806579e:	683b      	ldr	r3, [r7, #0]
 80657a0:	691b      	ldr	r3, [r3, #16]
 80657a2:	2b0a      	cmp	r3, #10
 80657a4:	d013      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 80657a6:	683b      	ldr	r3, [r7, #0]
 80657a8:	691b      	ldr	r3, [r3, #16]
 80657aa:	2b09      	cmp	r3, #9
 80657ac:	d00f      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 80657ae:	683b      	ldr	r3, [r7, #0]
 80657b0:	691b      	ldr	r3, [r3, #16]
 80657b2:	2b09      	cmp	r3, #9
 80657b4:	d00b      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 80657b6:	683b      	ldr	r3, [r7, #0]
 80657b8:	691b      	ldr	r3, [r3, #16]
 80657ba:	2b0c      	cmp	r3, #12
 80657bc:	d007      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 80657be:	683b      	ldr	r3, [r7, #0]
 80657c0:	691b      	ldr	r3, [r3, #16]
 80657c2:	2b0f      	cmp	r3, #15
 80657c4:	d003      	beq.n	80657ce <HAL_GPIO_Init+0x326>
 80657c6:	21de      	movs	r1, #222	; 0xde
 80657c8:	482e      	ldr	r0, [pc, #184]	; (8065884 <HAL_GPIO_Init+0x3dc>)
 80657ca:	f7fd fbae 	bl	8062f2a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80657ce:	69fb      	ldr	r3, [r7, #28]
 80657d0:	08da      	lsrs	r2, r3, #3
 80657d2:	687b      	ldr	r3, [r7, #4]
 80657d4:	3208      	adds	r2, #8
 80657d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80657da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80657dc:	69fb      	ldr	r3, [r7, #28]
 80657de:	f003 0307 	and.w	r3, r3, #7
 80657e2:	009b      	lsls	r3, r3, #2
 80657e4:	220f      	movs	r2, #15
 80657e6:	fa02 f303 	lsl.w	r3, r2, r3
 80657ea:	43db      	mvns	r3, r3
 80657ec:	69ba      	ldr	r2, [r7, #24]
 80657ee:	4013      	ands	r3, r2
 80657f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80657f2:	683b      	ldr	r3, [r7, #0]
 80657f4:	691a      	ldr	r2, [r3, #16]
 80657f6:	69fb      	ldr	r3, [r7, #28]
 80657f8:	f003 0307 	and.w	r3, r3, #7
 80657fc:	009b      	lsls	r3, r3, #2
 80657fe:	fa02 f303 	lsl.w	r3, r2, r3
 8065802:	69ba      	ldr	r2, [r7, #24]
 8065804:	4313      	orrs	r3, r2
 8065806:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8065808:	69fb      	ldr	r3, [r7, #28]
 806580a:	08da      	lsrs	r2, r3, #3
 806580c:	687b      	ldr	r3, [r7, #4]
 806580e:	3208      	adds	r2, #8
 8065810:	69b9      	ldr	r1, [r7, #24]
 8065812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8065816:	687b      	ldr	r3, [r7, #4]
 8065818:	681b      	ldr	r3, [r3, #0]
 806581a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 806581c:	69fb      	ldr	r3, [r7, #28]
 806581e:	005b      	lsls	r3, r3, #1
 8065820:	2203      	movs	r2, #3
 8065822:	fa02 f303 	lsl.w	r3, r2, r3
 8065826:	43db      	mvns	r3, r3
 8065828:	69ba      	ldr	r2, [r7, #24]
 806582a:	4013      	ands	r3, r2
 806582c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 806582e:	683b      	ldr	r3, [r7, #0]
 8065830:	685b      	ldr	r3, [r3, #4]
 8065832:	f003 0203 	and.w	r2, r3, #3
 8065836:	69fb      	ldr	r3, [r7, #28]
 8065838:	005b      	lsls	r3, r3, #1
 806583a:	fa02 f303 	lsl.w	r3, r2, r3
 806583e:	69ba      	ldr	r2, [r7, #24]
 8065840:	4313      	orrs	r3, r2
 8065842:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8065844:	687b      	ldr	r3, [r7, #4]
 8065846:	69ba      	ldr	r2, [r7, #24]
 8065848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 806584a:	683b      	ldr	r3, [r7, #0]
 806584c:	685b      	ldr	r3, [r3, #4]
 806584e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8065852:	2b00      	cmp	r3, #0
 8065854:	f000 80aa 	beq.w	80659ac <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8065858:	2300      	movs	r3, #0
 806585a:	60fb      	str	r3, [r7, #12]
 806585c:	4b0a      	ldr	r3, [pc, #40]	; (8065888 <HAL_GPIO_Init+0x3e0>)
 806585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8065860:	4a09      	ldr	r2, [pc, #36]	; (8065888 <HAL_GPIO_Init+0x3e0>)
 8065862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8065866:	6453      	str	r3, [r2, #68]	; 0x44
 8065868:	4b07      	ldr	r3, [pc, #28]	; (8065888 <HAL_GPIO_Init+0x3e0>)
 806586a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 806586c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8065870:	60fb      	str	r3, [r7, #12]
 8065872:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8065874:	4a05      	ldr	r2, [pc, #20]	; (806588c <HAL_GPIO_Init+0x3e4>)
 8065876:	69fb      	ldr	r3, [r7, #28]
 8065878:	089b      	lsrs	r3, r3, #2
 806587a:	3302      	adds	r3, #2
 806587c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8065880:	e006      	b.n	8065890 <HAL_GPIO_Init+0x3e8>
 8065882:	bf00      	nop
 8065884:	0807710c 	.word	0x0807710c
 8065888:	40023800 	.word	0x40023800
 806588c:	40013800 	.word	0x40013800
 8065890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8065892:	69fb      	ldr	r3, [r7, #28]
 8065894:	f003 0303 	and.w	r3, r3, #3
 8065898:	009b      	lsls	r3, r3, #2
 806589a:	220f      	movs	r2, #15
 806589c:	fa02 f303 	lsl.w	r3, r2, r3
 80658a0:	43db      	mvns	r3, r3
 80658a2:	69ba      	ldr	r2, [r7, #24]
 80658a4:	4013      	ands	r3, r2
 80658a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80658a8:	687b      	ldr	r3, [r7, #4]
 80658aa:	4a46      	ldr	r2, [pc, #280]	; (80659c4 <HAL_GPIO_Init+0x51c>)
 80658ac:	4293      	cmp	r3, r2
 80658ae:	d019      	beq.n	80658e4 <HAL_GPIO_Init+0x43c>
 80658b0:	687b      	ldr	r3, [r7, #4]
 80658b2:	4a45      	ldr	r2, [pc, #276]	; (80659c8 <HAL_GPIO_Init+0x520>)
 80658b4:	4293      	cmp	r3, r2
 80658b6:	d013      	beq.n	80658e0 <HAL_GPIO_Init+0x438>
 80658b8:	687b      	ldr	r3, [r7, #4]
 80658ba:	4a44      	ldr	r2, [pc, #272]	; (80659cc <HAL_GPIO_Init+0x524>)
 80658bc:	4293      	cmp	r3, r2
 80658be:	d00d      	beq.n	80658dc <HAL_GPIO_Init+0x434>
 80658c0:	687b      	ldr	r3, [r7, #4]
 80658c2:	4a43      	ldr	r2, [pc, #268]	; (80659d0 <HAL_GPIO_Init+0x528>)
 80658c4:	4293      	cmp	r3, r2
 80658c6:	d007      	beq.n	80658d8 <HAL_GPIO_Init+0x430>
 80658c8:	687b      	ldr	r3, [r7, #4]
 80658ca:	4a42      	ldr	r2, [pc, #264]	; (80659d4 <HAL_GPIO_Init+0x52c>)
 80658cc:	4293      	cmp	r3, r2
 80658ce:	d101      	bne.n	80658d4 <HAL_GPIO_Init+0x42c>
 80658d0:	2304      	movs	r3, #4
 80658d2:	e008      	b.n	80658e6 <HAL_GPIO_Init+0x43e>
 80658d4:	2307      	movs	r3, #7
 80658d6:	e006      	b.n	80658e6 <HAL_GPIO_Init+0x43e>
 80658d8:	2303      	movs	r3, #3
 80658da:	e004      	b.n	80658e6 <HAL_GPIO_Init+0x43e>
 80658dc:	2302      	movs	r3, #2
 80658de:	e002      	b.n	80658e6 <HAL_GPIO_Init+0x43e>
 80658e0:	2301      	movs	r3, #1
 80658e2:	e000      	b.n	80658e6 <HAL_GPIO_Init+0x43e>
 80658e4:	2300      	movs	r3, #0
 80658e6:	69fa      	ldr	r2, [r7, #28]
 80658e8:	f002 0203 	and.w	r2, r2, #3
 80658ec:	0092      	lsls	r2, r2, #2
 80658ee:	4093      	lsls	r3, r2
 80658f0:	69ba      	ldr	r2, [r7, #24]
 80658f2:	4313      	orrs	r3, r2
 80658f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80658f6:	4938      	ldr	r1, [pc, #224]	; (80659d8 <HAL_GPIO_Init+0x530>)
 80658f8:	69fb      	ldr	r3, [r7, #28]
 80658fa:	089b      	lsrs	r3, r3, #2
 80658fc:	3302      	adds	r3, #2
 80658fe:	69ba      	ldr	r2, [r7, #24]
 8065900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8065904:	4b35      	ldr	r3, [pc, #212]	; (80659dc <HAL_GPIO_Init+0x534>)
 8065906:	681b      	ldr	r3, [r3, #0]
 8065908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 806590a:	693b      	ldr	r3, [r7, #16]
 806590c:	43db      	mvns	r3, r3
 806590e:	69ba      	ldr	r2, [r7, #24]
 8065910:	4013      	ands	r3, r2
 8065912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8065914:	683b      	ldr	r3, [r7, #0]
 8065916:	685b      	ldr	r3, [r3, #4]
 8065918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 806591c:	2b00      	cmp	r3, #0
 806591e:	d003      	beq.n	8065928 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8065920:	69ba      	ldr	r2, [r7, #24]
 8065922:	693b      	ldr	r3, [r7, #16]
 8065924:	4313      	orrs	r3, r2
 8065926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8065928:	4a2c      	ldr	r2, [pc, #176]	; (80659dc <HAL_GPIO_Init+0x534>)
 806592a:	69bb      	ldr	r3, [r7, #24]
 806592c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 806592e:	4b2b      	ldr	r3, [pc, #172]	; (80659dc <HAL_GPIO_Init+0x534>)
 8065930:	685b      	ldr	r3, [r3, #4]
 8065932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8065934:	693b      	ldr	r3, [r7, #16]
 8065936:	43db      	mvns	r3, r3
 8065938:	69ba      	ldr	r2, [r7, #24]
 806593a:	4013      	ands	r3, r2
 806593c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 806593e:	683b      	ldr	r3, [r7, #0]
 8065940:	685b      	ldr	r3, [r3, #4]
 8065942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8065946:	2b00      	cmp	r3, #0
 8065948:	d003      	beq.n	8065952 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 806594a:	69ba      	ldr	r2, [r7, #24]
 806594c:	693b      	ldr	r3, [r7, #16]
 806594e:	4313      	orrs	r3, r2
 8065950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8065952:	4a22      	ldr	r2, [pc, #136]	; (80659dc <HAL_GPIO_Init+0x534>)
 8065954:	69bb      	ldr	r3, [r7, #24]
 8065956:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8065958:	4b20      	ldr	r3, [pc, #128]	; (80659dc <HAL_GPIO_Init+0x534>)
 806595a:	689b      	ldr	r3, [r3, #8]
 806595c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 806595e:	693b      	ldr	r3, [r7, #16]
 8065960:	43db      	mvns	r3, r3
 8065962:	69ba      	ldr	r2, [r7, #24]
 8065964:	4013      	ands	r3, r2
 8065966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8065968:	683b      	ldr	r3, [r7, #0]
 806596a:	685b      	ldr	r3, [r3, #4]
 806596c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8065970:	2b00      	cmp	r3, #0
 8065972:	d003      	beq.n	806597c <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8065974:	69ba      	ldr	r2, [r7, #24]
 8065976:	693b      	ldr	r3, [r7, #16]
 8065978:	4313      	orrs	r3, r2
 806597a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 806597c:	4a17      	ldr	r2, [pc, #92]	; (80659dc <HAL_GPIO_Init+0x534>)
 806597e:	69bb      	ldr	r3, [r7, #24]
 8065980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8065982:	4b16      	ldr	r3, [pc, #88]	; (80659dc <HAL_GPIO_Init+0x534>)
 8065984:	68db      	ldr	r3, [r3, #12]
 8065986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8065988:	693b      	ldr	r3, [r7, #16]
 806598a:	43db      	mvns	r3, r3
 806598c:	69ba      	ldr	r2, [r7, #24]
 806598e:	4013      	ands	r3, r2
 8065990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8065992:	683b      	ldr	r3, [r7, #0]
 8065994:	685b      	ldr	r3, [r3, #4]
 8065996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 806599a:	2b00      	cmp	r3, #0
 806599c:	d003      	beq.n	80659a6 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 806599e:	69ba      	ldr	r2, [r7, #24]
 80659a0:	693b      	ldr	r3, [r7, #16]
 80659a2:	4313      	orrs	r3, r2
 80659a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80659a6:	4a0d      	ldr	r2, [pc, #52]	; (80659dc <HAL_GPIO_Init+0x534>)
 80659a8:	69bb      	ldr	r3, [r7, #24]
 80659aa:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80659ac:	69fb      	ldr	r3, [r7, #28]
 80659ae:	3301      	adds	r3, #1
 80659b0:	61fb      	str	r3, [r7, #28]
 80659b2:	69fb      	ldr	r3, [r7, #28]
 80659b4:	2b0f      	cmp	r3, #15
 80659b6:	f67f adf9 	bls.w	80655ac <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80659ba:	bf00      	nop
 80659bc:	bf00      	nop
 80659be:	3720      	adds	r7, #32
 80659c0:	46bd      	mov	sp, r7
 80659c2:	bd80      	pop	{r7, pc}
 80659c4:	40020000 	.word	0x40020000
 80659c8:	40020400 	.word	0x40020400
 80659cc:	40020800 	.word	0x40020800
 80659d0:	40020c00 	.word	0x40020c00
 80659d4:	40021000 	.word	0x40021000
 80659d8:	40013800 	.word	0x40013800
 80659dc:	40013c00 	.word	0x40013c00

080659e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80659e0:	b580      	push	{r7, lr}
 80659e2:	b082      	sub	sp, #8
 80659e4:	af00      	add	r7, sp, #0
 80659e6:	6078      	str	r0, [r7, #4]
 80659e8:	460b      	mov	r3, r1
 80659ea:	807b      	strh	r3, [r7, #2]
 80659ec:	4613      	mov	r3, r2
 80659ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80659f0:	887b      	ldrh	r3, [r7, #2]
 80659f2:	2b00      	cmp	r3, #0
 80659f4:	d004      	beq.n	8065a00 <HAL_GPIO_WritePin+0x20>
 80659f6:	887b      	ldrh	r3, [r7, #2]
 80659f8:	0c1b      	lsrs	r3, r3, #16
 80659fa:	041b      	lsls	r3, r3, #16
 80659fc:	2b00      	cmp	r3, #0
 80659fe:	d004      	beq.n	8065a0a <HAL_GPIO_WritePin+0x2a>
 8065a00:	f240 119d 	movw	r1, #413	; 0x19d
 8065a04:	480e      	ldr	r0, [pc, #56]	; (8065a40 <HAL_GPIO_WritePin+0x60>)
 8065a06:	f7fd fa90 	bl	8062f2a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8065a0a:	787b      	ldrb	r3, [r7, #1]
 8065a0c:	2b00      	cmp	r3, #0
 8065a0e:	d007      	beq.n	8065a20 <HAL_GPIO_WritePin+0x40>
 8065a10:	787b      	ldrb	r3, [r7, #1]
 8065a12:	2b01      	cmp	r3, #1
 8065a14:	d004      	beq.n	8065a20 <HAL_GPIO_WritePin+0x40>
 8065a16:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8065a1a:	4809      	ldr	r0, [pc, #36]	; (8065a40 <HAL_GPIO_WritePin+0x60>)
 8065a1c:	f7fd fa85 	bl	8062f2a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8065a20:	787b      	ldrb	r3, [r7, #1]
 8065a22:	2b00      	cmp	r3, #0
 8065a24:	d003      	beq.n	8065a2e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8065a26:	887a      	ldrh	r2, [r7, #2]
 8065a28:	687b      	ldr	r3, [r7, #4]
 8065a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8065a2c:	e003      	b.n	8065a36 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8065a2e:	887b      	ldrh	r3, [r7, #2]
 8065a30:	041a      	lsls	r2, r3, #16
 8065a32:	687b      	ldr	r3, [r7, #4]
 8065a34:	619a      	str	r2, [r3, #24]
}
 8065a36:	bf00      	nop
 8065a38:	3708      	adds	r7, #8
 8065a3a:	46bd      	mov	sp, r7
 8065a3c:	bd80      	pop	{r7, pc}
 8065a3e:	bf00      	nop
 8065a40:	0807710c 	.word	0x0807710c

08065a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8065a44:	b580      	push	{r7, lr}
 8065a46:	b084      	sub	sp, #16
 8065a48:	af00      	add	r7, sp, #0
 8065a4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8065a4c:	687b      	ldr	r3, [r7, #4]
 8065a4e:	2b00      	cmp	r3, #0
 8065a50:	d101      	bne.n	8065a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8065a52:	2301      	movs	r3, #1
 8065a54:	e1be      	b.n	8065dd4 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8065a56:	687b      	ldr	r3, [r7, #4]
 8065a58:	681b      	ldr	r3, [r3, #0]
 8065a5a:	4a9f      	ldr	r2, [pc, #636]	; (8065cd8 <HAL_I2C_Init+0x294>)
 8065a5c:	4293      	cmp	r3, r2
 8065a5e:	d00e      	beq.n	8065a7e <HAL_I2C_Init+0x3a>
 8065a60:	687b      	ldr	r3, [r7, #4]
 8065a62:	681b      	ldr	r3, [r3, #0]
 8065a64:	4a9d      	ldr	r2, [pc, #628]	; (8065cdc <HAL_I2C_Init+0x298>)
 8065a66:	4293      	cmp	r3, r2
 8065a68:	d009      	beq.n	8065a7e <HAL_I2C_Init+0x3a>
 8065a6a:	687b      	ldr	r3, [r7, #4]
 8065a6c:	681b      	ldr	r3, [r3, #0]
 8065a6e:	4a9c      	ldr	r2, [pc, #624]	; (8065ce0 <HAL_I2C_Init+0x29c>)
 8065a70:	4293      	cmp	r3, r2
 8065a72:	d004      	beq.n	8065a7e <HAL_I2C_Init+0x3a>
 8065a74:	f240 11bf 	movw	r1, #447	; 0x1bf
 8065a78:	489a      	ldr	r0, [pc, #616]	; (8065ce4 <HAL_I2C_Init+0x2a0>)
 8065a7a:	f7fd fa56 	bl	8062f2a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8065a7e:	687b      	ldr	r3, [r7, #4]
 8065a80:	685b      	ldr	r3, [r3, #4]
 8065a82:	2b00      	cmp	r3, #0
 8065a84:	d004      	beq.n	8065a90 <HAL_I2C_Init+0x4c>
 8065a86:	687b      	ldr	r3, [r7, #4]
 8065a88:	685b      	ldr	r3, [r3, #4]
 8065a8a:	4a97      	ldr	r2, [pc, #604]	; (8065ce8 <HAL_I2C_Init+0x2a4>)
 8065a8c:	4293      	cmp	r3, r2
 8065a8e:	d904      	bls.n	8065a9a <HAL_I2C_Init+0x56>
 8065a90:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8065a94:	4893      	ldr	r0, [pc, #588]	; (8065ce4 <HAL_I2C_Init+0x2a0>)
 8065a96:	f7fd fa48 	bl	8062f2a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8065a9a:	687b      	ldr	r3, [r7, #4]
 8065a9c:	689b      	ldr	r3, [r3, #8]
 8065a9e:	2b00      	cmp	r3, #0
 8065aa0:	d009      	beq.n	8065ab6 <HAL_I2C_Init+0x72>
 8065aa2:	687b      	ldr	r3, [r7, #4]
 8065aa4:	689b      	ldr	r3, [r3, #8]
 8065aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8065aaa:	d004      	beq.n	8065ab6 <HAL_I2C_Init+0x72>
 8065aac:	f240 11c1 	movw	r1, #449	; 0x1c1
 8065ab0:	488c      	ldr	r0, [pc, #560]	; (8065ce4 <HAL_I2C_Init+0x2a0>)
 8065ab2:	f7fd fa3a 	bl	8062f2a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8065ab6:	687b      	ldr	r3, [r7, #4]
 8065ab8:	68db      	ldr	r3, [r3, #12]
 8065aba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8065abe:	f023 0303 	bic.w	r3, r3, #3
 8065ac2:	2b00      	cmp	r3, #0
 8065ac4:	d004      	beq.n	8065ad0 <HAL_I2C_Init+0x8c>
 8065ac6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8065aca:	4886      	ldr	r0, [pc, #536]	; (8065ce4 <HAL_I2C_Init+0x2a0>)
 8065acc:	f7fd fa2d 	bl	8062f2a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8065ad0:	687b      	ldr	r3, [r7, #4]
 8065ad2:	691b      	ldr	r3, [r3, #16]
 8065ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8065ad8:	d009      	beq.n	8065aee <HAL_I2C_Init+0xaa>
 8065ada:	687b      	ldr	r3, [r7, #4]
 8065adc:	691b      	ldr	r3, [r3, #16]
 8065ade:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8065ae2:	d004      	beq.n	8065aee <HAL_I2C_Init+0xaa>
 8065ae4:	f240 11c3 	movw	r1, #451	; 0x1c3
 8065ae8:	487e      	ldr	r0, [pc, #504]	; (8065ce4 <HAL_I2C_Init+0x2a0>)
 8065aea:	f7fd fa1e 	bl	8062f2a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8065aee:	687b      	ldr	r3, [r7, #4]
 8065af0:	695b      	ldr	r3, [r3, #20]
 8065af2:	2b00      	cmp	r3, #0
 8065af4:	d008      	beq.n	8065b08 <HAL_I2C_Init+0xc4>
 8065af6:	687b      	ldr	r3, [r7, #4]
 8065af8:	695b      	ldr	r3, [r3, #20]
 8065afa:	2b01      	cmp	r3, #1
 8065afc:	d004      	beq.n	8065b08 <HAL_I2C_Init+0xc4>
 8065afe:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8065b02:	4878      	ldr	r0, [pc, #480]	; (8065ce4 <HAL_I2C_Init+0x2a0>)
 8065b04:	f7fd fa11 	bl	8062f2a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8065b08:	687b      	ldr	r3, [r7, #4]
 8065b0a:	699b      	ldr	r3, [r3, #24]
 8065b0c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8065b10:	2b00      	cmp	r3, #0
 8065b12:	d004      	beq.n	8065b1e <HAL_I2C_Init+0xda>
 8065b14:	f240 11c5 	movw	r1, #453	; 0x1c5
 8065b18:	4872      	ldr	r0, [pc, #456]	; (8065ce4 <HAL_I2C_Init+0x2a0>)
 8065b1a:	f7fd fa06 	bl	8062f2a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8065b1e:	687b      	ldr	r3, [r7, #4]
 8065b20:	69db      	ldr	r3, [r3, #28]
 8065b22:	2b00      	cmp	r3, #0
 8065b24:	d008      	beq.n	8065b38 <HAL_I2C_Init+0xf4>
 8065b26:	687b      	ldr	r3, [r7, #4]
 8065b28:	69db      	ldr	r3, [r3, #28]
 8065b2a:	2b40      	cmp	r3, #64	; 0x40
 8065b2c:	d004      	beq.n	8065b38 <HAL_I2C_Init+0xf4>
 8065b2e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8065b32:	486c      	ldr	r0, [pc, #432]	; (8065ce4 <HAL_I2C_Init+0x2a0>)
 8065b34:	f7fd f9f9 	bl	8062f2a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8065b38:	687b      	ldr	r3, [r7, #4]
 8065b3a:	6a1b      	ldr	r3, [r3, #32]
 8065b3c:	2b00      	cmp	r3, #0
 8065b3e:	d008      	beq.n	8065b52 <HAL_I2C_Init+0x10e>
 8065b40:	687b      	ldr	r3, [r7, #4]
 8065b42:	6a1b      	ldr	r3, [r3, #32]
 8065b44:	2b80      	cmp	r3, #128	; 0x80
 8065b46:	d004      	beq.n	8065b52 <HAL_I2C_Init+0x10e>
 8065b48:	f240 11c7 	movw	r1, #455	; 0x1c7
 8065b4c:	4865      	ldr	r0, [pc, #404]	; (8065ce4 <HAL_I2C_Init+0x2a0>)
 8065b4e:	f7fd f9ec 	bl	8062f2a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8065b52:	687b      	ldr	r3, [r7, #4]
 8065b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8065b58:	b2db      	uxtb	r3, r3
 8065b5a:	2b00      	cmp	r3, #0
 8065b5c:	d106      	bne.n	8065b6c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8065b5e:	687b      	ldr	r3, [r7, #4]
 8065b60:	2200      	movs	r2, #0
 8065b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8065b66:	6878      	ldr	r0, [r7, #4]
 8065b68:	f7fc fffe 	bl	8062b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8065b6c:	687b      	ldr	r3, [r7, #4]
 8065b6e:	2224      	movs	r2, #36	; 0x24
 8065b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8065b74:	687b      	ldr	r3, [r7, #4]
 8065b76:	681b      	ldr	r3, [r3, #0]
 8065b78:	681a      	ldr	r2, [r3, #0]
 8065b7a:	687b      	ldr	r3, [r7, #4]
 8065b7c:	681b      	ldr	r3, [r3, #0]
 8065b7e:	f022 0201 	bic.w	r2, r2, #1
 8065b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8065b84:	687b      	ldr	r3, [r7, #4]
 8065b86:	681b      	ldr	r3, [r3, #0]
 8065b88:	681a      	ldr	r2, [r3, #0]
 8065b8a:	687b      	ldr	r3, [r7, #4]
 8065b8c:	681b      	ldr	r3, [r3, #0]
 8065b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8065b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8065b94:	687b      	ldr	r3, [r7, #4]
 8065b96:	681b      	ldr	r3, [r3, #0]
 8065b98:	681a      	ldr	r2, [r3, #0]
 8065b9a:	687b      	ldr	r3, [r7, #4]
 8065b9c:	681b      	ldr	r3, [r3, #0]
 8065b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8065ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8065ba4:	f002 fa08 	bl	8067fb8 <HAL_RCC_GetPCLK1Freq>
 8065ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8065baa:	687b      	ldr	r3, [r7, #4]
 8065bac:	685b      	ldr	r3, [r3, #4]
 8065bae:	4a4f      	ldr	r2, [pc, #316]	; (8065cec <HAL_I2C_Init+0x2a8>)
 8065bb0:	4293      	cmp	r3, r2
 8065bb2:	d807      	bhi.n	8065bc4 <HAL_I2C_Init+0x180>
 8065bb4:	68fb      	ldr	r3, [r7, #12]
 8065bb6:	4a4e      	ldr	r2, [pc, #312]	; (8065cf0 <HAL_I2C_Init+0x2ac>)
 8065bb8:	4293      	cmp	r3, r2
 8065bba:	bf94      	ite	ls
 8065bbc:	2301      	movls	r3, #1
 8065bbe:	2300      	movhi	r3, #0
 8065bc0:	b2db      	uxtb	r3, r3
 8065bc2:	e006      	b.n	8065bd2 <HAL_I2C_Init+0x18e>
 8065bc4:	68fb      	ldr	r3, [r7, #12]
 8065bc6:	4a4b      	ldr	r2, [pc, #300]	; (8065cf4 <HAL_I2C_Init+0x2b0>)
 8065bc8:	4293      	cmp	r3, r2
 8065bca:	bf94      	ite	ls
 8065bcc:	2301      	movls	r3, #1
 8065bce:	2300      	movhi	r3, #0
 8065bd0:	b2db      	uxtb	r3, r3
 8065bd2:	2b00      	cmp	r3, #0
 8065bd4:	d001      	beq.n	8065bda <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8065bd6:	2301      	movs	r3, #1
 8065bd8:	e0fc      	b.n	8065dd4 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8065bda:	68fb      	ldr	r3, [r7, #12]
 8065bdc:	4a46      	ldr	r2, [pc, #280]	; (8065cf8 <HAL_I2C_Init+0x2b4>)
 8065bde:	fba2 2303 	umull	r2, r3, r2, r3
 8065be2:	0c9b      	lsrs	r3, r3, #18
 8065be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8065be6:	687b      	ldr	r3, [r7, #4]
 8065be8:	681b      	ldr	r3, [r3, #0]
 8065bea:	685b      	ldr	r3, [r3, #4]
 8065bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8065bf0:	687b      	ldr	r3, [r7, #4]
 8065bf2:	681b      	ldr	r3, [r3, #0]
 8065bf4:	68ba      	ldr	r2, [r7, #8]
 8065bf6:	430a      	orrs	r2, r1
 8065bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8065bfa:	687b      	ldr	r3, [r7, #4]
 8065bfc:	681b      	ldr	r3, [r3, #0]
 8065bfe:	6a1b      	ldr	r3, [r3, #32]
 8065c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8065c04:	687b      	ldr	r3, [r7, #4]
 8065c06:	685b      	ldr	r3, [r3, #4]
 8065c08:	4a38      	ldr	r2, [pc, #224]	; (8065cec <HAL_I2C_Init+0x2a8>)
 8065c0a:	4293      	cmp	r3, r2
 8065c0c:	d802      	bhi.n	8065c14 <HAL_I2C_Init+0x1d0>
 8065c0e:	68bb      	ldr	r3, [r7, #8]
 8065c10:	3301      	adds	r3, #1
 8065c12:	e009      	b.n	8065c28 <HAL_I2C_Init+0x1e4>
 8065c14:	68bb      	ldr	r3, [r7, #8]
 8065c16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8065c1a:	fb02 f303 	mul.w	r3, r2, r3
 8065c1e:	4a37      	ldr	r2, [pc, #220]	; (8065cfc <HAL_I2C_Init+0x2b8>)
 8065c20:	fba2 2303 	umull	r2, r3, r2, r3
 8065c24:	099b      	lsrs	r3, r3, #6
 8065c26:	3301      	adds	r3, #1
 8065c28:	687a      	ldr	r2, [r7, #4]
 8065c2a:	6812      	ldr	r2, [r2, #0]
 8065c2c:	430b      	orrs	r3, r1
 8065c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8065c30:	687b      	ldr	r3, [r7, #4]
 8065c32:	681b      	ldr	r3, [r3, #0]
 8065c34:	69db      	ldr	r3, [r3, #28]
 8065c36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8065c3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8065c3e:	687b      	ldr	r3, [r7, #4]
 8065c40:	685b      	ldr	r3, [r3, #4]
 8065c42:	492a      	ldr	r1, [pc, #168]	; (8065cec <HAL_I2C_Init+0x2a8>)
 8065c44:	428b      	cmp	r3, r1
 8065c46:	d819      	bhi.n	8065c7c <HAL_I2C_Init+0x238>
 8065c48:	68fb      	ldr	r3, [r7, #12]
 8065c4a:	1e59      	subs	r1, r3, #1
 8065c4c:	687b      	ldr	r3, [r7, #4]
 8065c4e:	685b      	ldr	r3, [r3, #4]
 8065c50:	005b      	lsls	r3, r3, #1
 8065c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8065c56:	1c59      	adds	r1, r3, #1
 8065c58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8065c5c:	400b      	ands	r3, r1
 8065c5e:	2b00      	cmp	r3, #0
 8065c60:	d00a      	beq.n	8065c78 <HAL_I2C_Init+0x234>
 8065c62:	68fb      	ldr	r3, [r7, #12]
 8065c64:	1e59      	subs	r1, r3, #1
 8065c66:	687b      	ldr	r3, [r7, #4]
 8065c68:	685b      	ldr	r3, [r3, #4]
 8065c6a:	005b      	lsls	r3, r3, #1
 8065c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8065c70:	3301      	adds	r3, #1
 8065c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065c76:	e066      	b.n	8065d46 <HAL_I2C_Init+0x302>
 8065c78:	2304      	movs	r3, #4
 8065c7a:	e064      	b.n	8065d46 <HAL_I2C_Init+0x302>
 8065c7c:	687b      	ldr	r3, [r7, #4]
 8065c7e:	689b      	ldr	r3, [r3, #8]
 8065c80:	2b00      	cmp	r3, #0
 8065c82:	d111      	bne.n	8065ca8 <HAL_I2C_Init+0x264>
 8065c84:	68fb      	ldr	r3, [r7, #12]
 8065c86:	1e58      	subs	r0, r3, #1
 8065c88:	687b      	ldr	r3, [r7, #4]
 8065c8a:	6859      	ldr	r1, [r3, #4]
 8065c8c:	460b      	mov	r3, r1
 8065c8e:	005b      	lsls	r3, r3, #1
 8065c90:	440b      	add	r3, r1
 8065c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8065c96:	3301      	adds	r3, #1
 8065c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065c9c:	2b00      	cmp	r3, #0
 8065c9e:	bf0c      	ite	eq
 8065ca0:	2301      	moveq	r3, #1
 8065ca2:	2300      	movne	r3, #0
 8065ca4:	b2db      	uxtb	r3, r3
 8065ca6:	e012      	b.n	8065cce <HAL_I2C_Init+0x28a>
 8065ca8:	68fb      	ldr	r3, [r7, #12]
 8065caa:	1e58      	subs	r0, r3, #1
 8065cac:	687b      	ldr	r3, [r7, #4]
 8065cae:	6859      	ldr	r1, [r3, #4]
 8065cb0:	460b      	mov	r3, r1
 8065cb2:	009b      	lsls	r3, r3, #2
 8065cb4:	440b      	add	r3, r1
 8065cb6:	0099      	lsls	r1, r3, #2
 8065cb8:	440b      	add	r3, r1
 8065cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8065cbe:	3301      	adds	r3, #1
 8065cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065cc4:	2b00      	cmp	r3, #0
 8065cc6:	bf0c      	ite	eq
 8065cc8:	2301      	moveq	r3, #1
 8065cca:	2300      	movne	r3, #0
 8065ccc:	b2db      	uxtb	r3, r3
 8065cce:	2b00      	cmp	r3, #0
 8065cd0:	d016      	beq.n	8065d00 <HAL_I2C_Init+0x2bc>
 8065cd2:	2301      	movs	r3, #1
 8065cd4:	e037      	b.n	8065d46 <HAL_I2C_Init+0x302>
 8065cd6:	bf00      	nop
 8065cd8:	40005400 	.word	0x40005400
 8065cdc:	40005800 	.word	0x40005800
 8065ce0:	40005c00 	.word	0x40005c00
 8065ce4:	08077148 	.word	0x08077148
 8065ce8:	00061a80 	.word	0x00061a80
 8065cec:	000186a0 	.word	0x000186a0
 8065cf0:	001e847f 	.word	0x001e847f
 8065cf4:	003d08ff 	.word	0x003d08ff
 8065cf8:	431bde83 	.word	0x431bde83
 8065cfc:	10624dd3 	.word	0x10624dd3
 8065d00:	687b      	ldr	r3, [r7, #4]
 8065d02:	689b      	ldr	r3, [r3, #8]
 8065d04:	2b00      	cmp	r3, #0
 8065d06:	d10e      	bne.n	8065d26 <HAL_I2C_Init+0x2e2>
 8065d08:	68fb      	ldr	r3, [r7, #12]
 8065d0a:	1e58      	subs	r0, r3, #1
 8065d0c:	687b      	ldr	r3, [r7, #4]
 8065d0e:	6859      	ldr	r1, [r3, #4]
 8065d10:	460b      	mov	r3, r1
 8065d12:	005b      	lsls	r3, r3, #1
 8065d14:	440b      	add	r3, r1
 8065d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8065d1a:	3301      	adds	r3, #1
 8065d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8065d24:	e00f      	b.n	8065d46 <HAL_I2C_Init+0x302>
 8065d26:	68fb      	ldr	r3, [r7, #12]
 8065d28:	1e58      	subs	r0, r3, #1
 8065d2a:	687b      	ldr	r3, [r7, #4]
 8065d2c:	6859      	ldr	r1, [r3, #4]
 8065d2e:	460b      	mov	r3, r1
 8065d30:	009b      	lsls	r3, r3, #2
 8065d32:	440b      	add	r3, r1
 8065d34:	0099      	lsls	r1, r3, #2
 8065d36:	440b      	add	r3, r1
 8065d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8065d3c:	3301      	adds	r3, #1
 8065d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8065d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8065d46:	6879      	ldr	r1, [r7, #4]
 8065d48:	6809      	ldr	r1, [r1, #0]
 8065d4a:	4313      	orrs	r3, r2
 8065d4c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8065d4e:	687b      	ldr	r3, [r7, #4]
 8065d50:	681b      	ldr	r3, [r3, #0]
 8065d52:	681b      	ldr	r3, [r3, #0]
 8065d54:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8065d58:	687b      	ldr	r3, [r7, #4]
 8065d5a:	69da      	ldr	r2, [r3, #28]
 8065d5c:	687b      	ldr	r3, [r7, #4]
 8065d5e:	6a1b      	ldr	r3, [r3, #32]
 8065d60:	431a      	orrs	r2, r3
 8065d62:	687b      	ldr	r3, [r7, #4]
 8065d64:	681b      	ldr	r3, [r3, #0]
 8065d66:	430a      	orrs	r2, r1
 8065d68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8065d6a:	687b      	ldr	r3, [r7, #4]
 8065d6c:	681b      	ldr	r3, [r3, #0]
 8065d6e:	689b      	ldr	r3, [r3, #8]
 8065d70:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8065d74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8065d78:	687a      	ldr	r2, [r7, #4]
 8065d7a:	6911      	ldr	r1, [r2, #16]
 8065d7c:	687a      	ldr	r2, [r7, #4]
 8065d7e:	68d2      	ldr	r2, [r2, #12]
 8065d80:	4311      	orrs	r1, r2
 8065d82:	687a      	ldr	r2, [r7, #4]
 8065d84:	6812      	ldr	r2, [r2, #0]
 8065d86:	430b      	orrs	r3, r1
 8065d88:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8065d8a:	687b      	ldr	r3, [r7, #4]
 8065d8c:	681b      	ldr	r3, [r3, #0]
 8065d8e:	68db      	ldr	r3, [r3, #12]
 8065d90:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8065d94:	687b      	ldr	r3, [r7, #4]
 8065d96:	695a      	ldr	r2, [r3, #20]
 8065d98:	687b      	ldr	r3, [r7, #4]
 8065d9a:	699b      	ldr	r3, [r3, #24]
 8065d9c:	431a      	orrs	r2, r3
 8065d9e:	687b      	ldr	r3, [r7, #4]
 8065da0:	681b      	ldr	r3, [r3, #0]
 8065da2:	430a      	orrs	r2, r1
 8065da4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8065da6:	687b      	ldr	r3, [r7, #4]
 8065da8:	681b      	ldr	r3, [r3, #0]
 8065daa:	681a      	ldr	r2, [r3, #0]
 8065dac:	687b      	ldr	r3, [r7, #4]
 8065dae:	681b      	ldr	r3, [r3, #0]
 8065db0:	f042 0201 	orr.w	r2, r2, #1
 8065db4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8065db6:	687b      	ldr	r3, [r7, #4]
 8065db8:	2200      	movs	r2, #0
 8065dba:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8065dbc:	687b      	ldr	r3, [r7, #4]
 8065dbe:	2220      	movs	r2, #32
 8065dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8065dc4:	687b      	ldr	r3, [r7, #4]
 8065dc6:	2200      	movs	r2, #0
 8065dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8065dca:	687b      	ldr	r3, [r7, #4]
 8065dcc:	2200      	movs	r2, #0
 8065dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8065dd2:	2300      	movs	r3, #0
}
 8065dd4:	4618      	mov	r0, r3
 8065dd6:	3710      	adds	r7, #16
 8065dd8:	46bd      	mov	sp, r7
 8065dda:	bd80      	pop	{r7, pc}

08065ddc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8065ddc:	b580      	push	{r7, lr}
 8065dde:	b088      	sub	sp, #32
 8065de0:	af02      	add	r7, sp, #8
 8065de2:	60f8      	str	r0, [r7, #12]
 8065de4:	607a      	str	r2, [r7, #4]
 8065de6:	461a      	mov	r2, r3
 8065de8:	460b      	mov	r3, r1
 8065dea:	817b      	strh	r3, [r7, #10]
 8065dec:	4613      	mov	r3, r2
 8065dee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8065df0:	f7fd fd66 	bl	80638c0 <HAL_GetTick>
 8065df4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8065df6:	68fb      	ldr	r3, [r7, #12]
 8065df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8065dfc:	b2db      	uxtb	r3, r3
 8065dfe:	2b20      	cmp	r3, #32
 8065e00:	f040 80e0 	bne.w	8065fc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8065e04:	697b      	ldr	r3, [r7, #20]
 8065e06:	9300      	str	r3, [sp, #0]
 8065e08:	2319      	movs	r3, #25
 8065e0a:	2201      	movs	r2, #1
 8065e0c:	4970      	ldr	r1, [pc, #448]	; (8065fd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8065e0e:	68f8      	ldr	r0, [r7, #12]
 8065e10:	f001 f928 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 8065e14:	4603      	mov	r3, r0
 8065e16:	2b00      	cmp	r3, #0
 8065e18:	d001      	beq.n	8065e1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8065e1a:	2302      	movs	r3, #2
 8065e1c:	e0d3      	b.n	8065fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8065e1e:	68fb      	ldr	r3, [r7, #12]
 8065e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8065e24:	2b01      	cmp	r3, #1
 8065e26:	d101      	bne.n	8065e2c <HAL_I2C_Master_Transmit+0x50>
 8065e28:	2302      	movs	r3, #2
 8065e2a:	e0cc      	b.n	8065fc6 <HAL_I2C_Master_Transmit+0x1ea>
 8065e2c:	68fb      	ldr	r3, [r7, #12]
 8065e2e:	2201      	movs	r2, #1
 8065e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8065e34:	68fb      	ldr	r3, [r7, #12]
 8065e36:	681b      	ldr	r3, [r3, #0]
 8065e38:	681b      	ldr	r3, [r3, #0]
 8065e3a:	f003 0301 	and.w	r3, r3, #1
 8065e3e:	2b01      	cmp	r3, #1
 8065e40:	d007      	beq.n	8065e52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8065e42:	68fb      	ldr	r3, [r7, #12]
 8065e44:	681b      	ldr	r3, [r3, #0]
 8065e46:	681a      	ldr	r2, [r3, #0]
 8065e48:	68fb      	ldr	r3, [r7, #12]
 8065e4a:	681b      	ldr	r3, [r3, #0]
 8065e4c:	f042 0201 	orr.w	r2, r2, #1
 8065e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8065e52:	68fb      	ldr	r3, [r7, #12]
 8065e54:	681b      	ldr	r3, [r3, #0]
 8065e56:	681a      	ldr	r2, [r3, #0]
 8065e58:	68fb      	ldr	r3, [r7, #12]
 8065e5a:	681b      	ldr	r3, [r3, #0]
 8065e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8065e60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8065e62:	68fb      	ldr	r3, [r7, #12]
 8065e64:	2221      	movs	r2, #33	; 0x21
 8065e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8065e6a:	68fb      	ldr	r3, [r7, #12]
 8065e6c:	2210      	movs	r2, #16
 8065e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8065e72:	68fb      	ldr	r3, [r7, #12]
 8065e74:	2200      	movs	r2, #0
 8065e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8065e78:	68fb      	ldr	r3, [r7, #12]
 8065e7a:	687a      	ldr	r2, [r7, #4]
 8065e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8065e7e:	68fb      	ldr	r3, [r7, #12]
 8065e80:	893a      	ldrh	r2, [r7, #8]
 8065e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8065e84:	68fb      	ldr	r3, [r7, #12]
 8065e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8065e88:	b29a      	uxth	r2, r3
 8065e8a:	68fb      	ldr	r3, [r7, #12]
 8065e8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8065e8e:	68fb      	ldr	r3, [r7, #12]
 8065e90:	4a50      	ldr	r2, [pc, #320]	; (8065fd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8065e92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8065e94:	8979      	ldrh	r1, [r7, #10]
 8065e96:	697b      	ldr	r3, [r7, #20]
 8065e98:	6a3a      	ldr	r2, [r7, #32]
 8065e9a:	68f8      	ldr	r0, [r7, #12]
 8065e9c:	f000 fe14 	bl	8066ac8 <I2C_MasterRequestWrite>
 8065ea0:	4603      	mov	r3, r0
 8065ea2:	2b00      	cmp	r3, #0
 8065ea4:	d001      	beq.n	8065eaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8065ea6:	2301      	movs	r3, #1
 8065ea8:	e08d      	b.n	8065fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8065eaa:	2300      	movs	r3, #0
 8065eac:	613b      	str	r3, [r7, #16]
 8065eae:	68fb      	ldr	r3, [r7, #12]
 8065eb0:	681b      	ldr	r3, [r3, #0]
 8065eb2:	695b      	ldr	r3, [r3, #20]
 8065eb4:	613b      	str	r3, [r7, #16]
 8065eb6:	68fb      	ldr	r3, [r7, #12]
 8065eb8:	681b      	ldr	r3, [r3, #0]
 8065eba:	699b      	ldr	r3, [r3, #24]
 8065ebc:	613b      	str	r3, [r7, #16]
 8065ebe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8065ec0:	e066      	b.n	8065f90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8065ec2:	697a      	ldr	r2, [r7, #20]
 8065ec4:	6a39      	ldr	r1, [r7, #32]
 8065ec6:	68f8      	ldr	r0, [r7, #12]
 8065ec8:	f001 f9a2 	bl	8067210 <I2C_WaitOnTXEFlagUntilTimeout>
 8065ecc:	4603      	mov	r3, r0
 8065ece:	2b00      	cmp	r3, #0
 8065ed0:	d00d      	beq.n	8065eee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8065ed2:	68fb      	ldr	r3, [r7, #12]
 8065ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8065ed6:	2b04      	cmp	r3, #4
 8065ed8:	d107      	bne.n	8065eea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8065eda:	68fb      	ldr	r3, [r7, #12]
 8065edc:	681b      	ldr	r3, [r3, #0]
 8065ede:	681a      	ldr	r2, [r3, #0]
 8065ee0:	68fb      	ldr	r3, [r7, #12]
 8065ee2:	681b      	ldr	r3, [r3, #0]
 8065ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8065ee8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8065eea:	2301      	movs	r3, #1
 8065eec:	e06b      	b.n	8065fc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8065eee:	68fb      	ldr	r3, [r7, #12]
 8065ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8065ef2:	781a      	ldrb	r2, [r3, #0]
 8065ef4:	68fb      	ldr	r3, [r7, #12]
 8065ef6:	681b      	ldr	r3, [r3, #0]
 8065ef8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8065efa:	68fb      	ldr	r3, [r7, #12]
 8065efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8065efe:	1c5a      	adds	r2, r3, #1
 8065f00:	68fb      	ldr	r3, [r7, #12]
 8065f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8065f04:	68fb      	ldr	r3, [r7, #12]
 8065f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8065f08:	b29b      	uxth	r3, r3
 8065f0a:	3b01      	subs	r3, #1
 8065f0c:	b29a      	uxth	r2, r3
 8065f0e:	68fb      	ldr	r3, [r7, #12]
 8065f10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8065f12:	68fb      	ldr	r3, [r7, #12]
 8065f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8065f16:	3b01      	subs	r3, #1
 8065f18:	b29a      	uxth	r2, r3
 8065f1a:	68fb      	ldr	r3, [r7, #12]
 8065f1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8065f1e:	68fb      	ldr	r3, [r7, #12]
 8065f20:	681b      	ldr	r3, [r3, #0]
 8065f22:	695b      	ldr	r3, [r3, #20]
 8065f24:	f003 0304 	and.w	r3, r3, #4
 8065f28:	2b04      	cmp	r3, #4
 8065f2a:	d11b      	bne.n	8065f64 <HAL_I2C_Master_Transmit+0x188>
 8065f2c:	68fb      	ldr	r3, [r7, #12]
 8065f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8065f30:	2b00      	cmp	r3, #0
 8065f32:	d017      	beq.n	8065f64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8065f34:	68fb      	ldr	r3, [r7, #12]
 8065f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8065f38:	781a      	ldrb	r2, [r3, #0]
 8065f3a:	68fb      	ldr	r3, [r7, #12]
 8065f3c:	681b      	ldr	r3, [r3, #0]
 8065f3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8065f40:	68fb      	ldr	r3, [r7, #12]
 8065f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8065f44:	1c5a      	adds	r2, r3, #1
 8065f46:	68fb      	ldr	r3, [r7, #12]
 8065f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8065f4a:	68fb      	ldr	r3, [r7, #12]
 8065f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8065f4e:	b29b      	uxth	r3, r3
 8065f50:	3b01      	subs	r3, #1
 8065f52:	b29a      	uxth	r2, r3
 8065f54:	68fb      	ldr	r3, [r7, #12]
 8065f56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8065f58:	68fb      	ldr	r3, [r7, #12]
 8065f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8065f5c:	3b01      	subs	r3, #1
 8065f5e:	b29a      	uxth	r2, r3
 8065f60:	68fb      	ldr	r3, [r7, #12]
 8065f62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8065f64:	697a      	ldr	r2, [r7, #20]
 8065f66:	6a39      	ldr	r1, [r7, #32]
 8065f68:	68f8      	ldr	r0, [r7, #12]
 8065f6a:	f001 f992 	bl	8067292 <I2C_WaitOnBTFFlagUntilTimeout>
 8065f6e:	4603      	mov	r3, r0
 8065f70:	2b00      	cmp	r3, #0
 8065f72:	d00d      	beq.n	8065f90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8065f74:	68fb      	ldr	r3, [r7, #12]
 8065f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8065f78:	2b04      	cmp	r3, #4
 8065f7a:	d107      	bne.n	8065f8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8065f7c:	68fb      	ldr	r3, [r7, #12]
 8065f7e:	681b      	ldr	r3, [r3, #0]
 8065f80:	681a      	ldr	r2, [r3, #0]
 8065f82:	68fb      	ldr	r3, [r7, #12]
 8065f84:	681b      	ldr	r3, [r3, #0]
 8065f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8065f8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8065f8c:	2301      	movs	r3, #1
 8065f8e:	e01a      	b.n	8065fc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8065f90:	68fb      	ldr	r3, [r7, #12]
 8065f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8065f94:	2b00      	cmp	r3, #0
 8065f96:	d194      	bne.n	8065ec2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8065f98:	68fb      	ldr	r3, [r7, #12]
 8065f9a:	681b      	ldr	r3, [r3, #0]
 8065f9c:	681a      	ldr	r2, [r3, #0]
 8065f9e:	68fb      	ldr	r3, [r7, #12]
 8065fa0:	681b      	ldr	r3, [r3, #0]
 8065fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8065fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8065fa8:	68fb      	ldr	r3, [r7, #12]
 8065faa:	2220      	movs	r2, #32
 8065fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8065fb0:	68fb      	ldr	r3, [r7, #12]
 8065fb2:	2200      	movs	r2, #0
 8065fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8065fb8:	68fb      	ldr	r3, [r7, #12]
 8065fba:	2200      	movs	r2, #0
 8065fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8065fc0:	2300      	movs	r3, #0
 8065fc2:	e000      	b.n	8065fc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8065fc4:	2302      	movs	r3, #2
  }
}
 8065fc6:	4618      	mov	r0, r3
 8065fc8:	3718      	adds	r7, #24
 8065fca:	46bd      	mov	sp, r7
 8065fcc:	bd80      	pop	{r7, pc}
 8065fce:	bf00      	nop
 8065fd0:	00100002 	.word	0x00100002
 8065fd4:	ffff0000 	.word	0xffff0000

08065fd8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8065fd8:	b580      	push	{r7, lr}
 8065fda:	b08c      	sub	sp, #48	; 0x30
 8065fdc:	af02      	add	r7, sp, #8
 8065fde:	60f8      	str	r0, [r7, #12]
 8065fe0:	607a      	str	r2, [r7, #4]
 8065fe2:	461a      	mov	r2, r3
 8065fe4:	460b      	mov	r3, r1
 8065fe6:	817b      	strh	r3, [r7, #10]
 8065fe8:	4613      	mov	r3, r2
 8065fea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8065fec:	f7fd fc68 	bl	80638c0 <HAL_GetTick>
 8065ff0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8065ff2:	68fb      	ldr	r3, [r7, #12]
 8065ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8065ff8:	b2db      	uxtb	r3, r3
 8065ffa:	2b20      	cmp	r3, #32
 8065ffc:	f040 820b 	bne.w	8066416 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8066000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066002:	9300      	str	r3, [sp, #0]
 8066004:	2319      	movs	r3, #25
 8066006:	2201      	movs	r2, #1
 8066008:	497c      	ldr	r1, [pc, #496]	; (80661fc <HAL_I2C_Master_Receive+0x224>)
 806600a:	68f8      	ldr	r0, [r7, #12]
 806600c:	f001 f82a 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 8066010:	4603      	mov	r3, r0
 8066012:	2b00      	cmp	r3, #0
 8066014:	d001      	beq.n	806601a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8066016:	2302      	movs	r3, #2
 8066018:	e1fe      	b.n	8066418 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 806601a:	68fb      	ldr	r3, [r7, #12]
 806601c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8066020:	2b01      	cmp	r3, #1
 8066022:	d101      	bne.n	8066028 <HAL_I2C_Master_Receive+0x50>
 8066024:	2302      	movs	r3, #2
 8066026:	e1f7      	b.n	8066418 <HAL_I2C_Master_Receive+0x440>
 8066028:	68fb      	ldr	r3, [r7, #12]
 806602a:	2201      	movs	r2, #1
 806602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8066030:	68fb      	ldr	r3, [r7, #12]
 8066032:	681b      	ldr	r3, [r3, #0]
 8066034:	681b      	ldr	r3, [r3, #0]
 8066036:	f003 0301 	and.w	r3, r3, #1
 806603a:	2b01      	cmp	r3, #1
 806603c:	d007      	beq.n	806604e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 806603e:	68fb      	ldr	r3, [r7, #12]
 8066040:	681b      	ldr	r3, [r3, #0]
 8066042:	681a      	ldr	r2, [r3, #0]
 8066044:	68fb      	ldr	r3, [r7, #12]
 8066046:	681b      	ldr	r3, [r3, #0]
 8066048:	f042 0201 	orr.w	r2, r2, #1
 806604c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 806604e:	68fb      	ldr	r3, [r7, #12]
 8066050:	681b      	ldr	r3, [r3, #0]
 8066052:	681a      	ldr	r2, [r3, #0]
 8066054:	68fb      	ldr	r3, [r7, #12]
 8066056:	681b      	ldr	r3, [r3, #0]
 8066058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 806605c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 806605e:	68fb      	ldr	r3, [r7, #12]
 8066060:	2222      	movs	r2, #34	; 0x22
 8066062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8066066:	68fb      	ldr	r3, [r7, #12]
 8066068:	2210      	movs	r2, #16
 806606a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 806606e:	68fb      	ldr	r3, [r7, #12]
 8066070:	2200      	movs	r2, #0
 8066072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8066074:	68fb      	ldr	r3, [r7, #12]
 8066076:	687a      	ldr	r2, [r7, #4]
 8066078:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 806607a:	68fb      	ldr	r3, [r7, #12]
 806607c:	893a      	ldrh	r2, [r7, #8]
 806607e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8066080:	68fb      	ldr	r3, [r7, #12]
 8066082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066084:	b29a      	uxth	r2, r3
 8066086:	68fb      	ldr	r3, [r7, #12]
 8066088:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 806608a:	68fb      	ldr	r3, [r7, #12]
 806608c:	4a5c      	ldr	r2, [pc, #368]	; (8066200 <HAL_I2C_Master_Receive+0x228>)
 806608e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8066090:	8979      	ldrh	r1, [r7, #10]
 8066092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8066096:	68f8      	ldr	r0, [r7, #12]
 8066098:	f000 fd98 	bl	8066bcc <I2C_MasterRequestRead>
 806609c:	4603      	mov	r3, r0
 806609e:	2b00      	cmp	r3, #0
 80660a0:	d001      	beq.n	80660a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80660a2:	2301      	movs	r3, #1
 80660a4:	e1b8      	b.n	8066418 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80660a6:	68fb      	ldr	r3, [r7, #12]
 80660a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80660aa:	2b00      	cmp	r3, #0
 80660ac:	d113      	bne.n	80660d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80660ae:	2300      	movs	r3, #0
 80660b0:	623b      	str	r3, [r7, #32]
 80660b2:	68fb      	ldr	r3, [r7, #12]
 80660b4:	681b      	ldr	r3, [r3, #0]
 80660b6:	695b      	ldr	r3, [r3, #20]
 80660b8:	623b      	str	r3, [r7, #32]
 80660ba:	68fb      	ldr	r3, [r7, #12]
 80660bc:	681b      	ldr	r3, [r3, #0]
 80660be:	699b      	ldr	r3, [r3, #24]
 80660c0:	623b      	str	r3, [r7, #32]
 80660c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80660c4:	68fb      	ldr	r3, [r7, #12]
 80660c6:	681b      	ldr	r3, [r3, #0]
 80660c8:	681a      	ldr	r2, [r3, #0]
 80660ca:	68fb      	ldr	r3, [r7, #12]
 80660cc:	681b      	ldr	r3, [r3, #0]
 80660ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80660d2:	601a      	str	r2, [r3, #0]
 80660d4:	e18c      	b.n	80663f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80660d6:	68fb      	ldr	r3, [r7, #12]
 80660d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80660da:	2b01      	cmp	r3, #1
 80660dc:	d11b      	bne.n	8066116 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80660de:	68fb      	ldr	r3, [r7, #12]
 80660e0:	681b      	ldr	r3, [r3, #0]
 80660e2:	681a      	ldr	r2, [r3, #0]
 80660e4:	68fb      	ldr	r3, [r7, #12]
 80660e6:	681b      	ldr	r3, [r3, #0]
 80660e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80660ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80660ee:	2300      	movs	r3, #0
 80660f0:	61fb      	str	r3, [r7, #28]
 80660f2:	68fb      	ldr	r3, [r7, #12]
 80660f4:	681b      	ldr	r3, [r3, #0]
 80660f6:	695b      	ldr	r3, [r3, #20]
 80660f8:	61fb      	str	r3, [r7, #28]
 80660fa:	68fb      	ldr	r3, [r7, #12]
 80660fc:	681b      	ldr	r3, [r3, #0]
 80660fe:	699b      	ldr	r3, [r3, #24]
 8066100:	61fb      	str	r3, [r7, #28]
 8066102:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066104:	68fb      	ldr	r3, [r7, #12]
 8066106:	681b      	ldr	r3, [r3, #0]
 8066108:	681a      	ldr	r2, [r3, #0]
 806610a:	68fb      	ldr	r3, [r7, #12]
 806610c:	681b      	ldr	r3, [r3, #0]
 806610e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066112:	601a      	str	r2, [r3, #0]
 8066114:	e16c      	b.n	80663f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8066116:	68fb      	ldr	r3, [r7, #12]
 8066118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806611a:	2b02      	cmp	r3, #2
 806611c:	d11b      	bne.n	8066156 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 806611e:	68fb      	ldr	r3, [r7, #12]
 8066120:	681b      	ldr	r3, [r3, #0]
 8066122:	681a      	ldr	r2, [r3, #0]
 8066124:	68fb      	ldr	r3, [r7, #12]
 8066126:	681b      	ldr	r3, [r3, #0]
 8066128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 806612c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 806612e:	68fb      	ldr	r3, [r7, #12]
 8066130:	681b      	ldr	r3, [r3, #0]
 8066132:	681a      	ldr	r2, [r3, #0]
 8066134:	68fb      	ldr	r3, [r7, #12]
 8066136:	681b      	ldr	r3, [r3, #0]
 8066138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 806613c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 806613e:	2300      	movs	r3, #0
 8066140:	61bb      	str	r3, [r7, #24]
 8066142:	68fb      	ldr	r3, [r7, #12]
 8066144:	681b      	ldr	r3, [r3, #0]
 8066146:	695b      	ldr	r3, [r3, #20]
 8066148:	61bb      	str	r3, [r7, #24]
 806614a:	68fb      	ldr	r3, [r7, #12]
 806614c:	681b      	ldr	r3, [r3, #0]
 806614e:	699b      	ldr	r3, [r3, #24]
 8066150:	61bb      	str	r3, [r7, #24]
 8066152:	69bb      	ldr	r3, [r7, #24]
 8066154:	e14c      	b.n	80663f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066156:	68fb      	ldr	r3, [r7, #12]
 8066158:	681b      	ldr	r3, [r3, #0]
 806615a:	681a      	ldr	r2, [r3, #0]
 806615c:	68fb      	ldr	r3, [r7, #12]
 806615e:	681b      	ldr	r3, [r3, #0]
 8066160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8066164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066166:	2300      	movs	r3, #0
 8066168:	617b      	str	r3, [r7, #20]
 806616a:	68fb      	ldr	r3, [r7, #12]
 806616c:	681b      	ldr	r3, [r3, #0]
 806616e:	695b      	ldr	r3, [r3, #20]
 8066170:	617b      	str	r3, [r7, #20]
 8066172:	68fb      	ldr	r3, [r7, #12]
 8066174:	681b      	ldr	r3, [r3, #0]
 8066176:	699b      	ldr	r3, [r3, #24]
 8066178:	617b      	str	r3, [r7, #20]
 806617a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 806617c:	e138      	b.n	80663f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 806617e:	68fb      	ldr	r3, [r7, #12]
 8066180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066182:	2b03      	cmp	r3, #3
 8066184:	f200 80f1 	bhi.w	806636a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8066188:	68fb      	ldr	r3, [r7, #12]
 806618a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806618c:	2b01      	cmp	r3, #1
 806618e:	d123      	bne.n	80661d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8066194:	68f8      	ldr	r0, [r7, #12]
 8066196:	f001 f8bd 	bl	8067314 <I2C_WaitOnRXNEFlagUntilTimeout>
 806619a:	4603      	mov	r3, r0
 806619c:	2b00      	cmp	r3, #0
 806619e:	d001      	beq.n	80661a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80661a0:	2301      	movs	r3, #1
 80661a2:	e139      	b.n	8066418 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80661a4:	68fb      	ldr	r3, [r7, #12]
 80661a6:	681b      	ldr	r3, [r3, #0]
 80661a8:	691a      	ldr	r2, [r3, #16]
 80661aa:	68fb      	ldr	r3, [r7, #12]
 80661ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80661ae:	b2d2      	uxtb	r2, r2
 80661b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80661b2:	68fb      	ldr	r3, [r7, #12]
 80661b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80661b6:	1c5a      	adds	r2, r3, #1
 80661b8:	68fb      	ldr	r3, [r7, #12]
 80661ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80661bc:	68fb      	ldr	r3, [r7, #12]
 80661be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80661c0:	3b01      	subs	r3, #1
 80661c2:	b29a      	uxth	r2, r3
 80661c4:	68fb      	ldr	r3, [r7, #12]
 80661c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80661c8:	68fb      	ldr	r3, [r7, #12]
 80661ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80661cc:	b29b      	uxth	r3, r3
 80661ce:	3b01      	subs	r3, #1
 80661d0:	b29a      	uxth	r2, r3
 80661d2:	68fb      	ldr	r3, [r7, #12]
 80661d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80661d6:	e10b      	b.n	80663f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80661d8:	68fb      	ldr	r3, [r7, #12]
 80661da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80661dc:	2b02      	cmp	r3, #2
 80661de:	d14e      	bne.n	806627e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80661e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80661e2:	9300      	str	r3, [sp, #0]
 80661e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80661e6:	2200      	movs	r2, #0
 80661e8:	4906      	ldr	r1, [pc, #24]	; (8066204 <HAL_I2C_Master_Receive+0x22c>)
 80661ea:	68f8      	ldr	r0, [r7, #12]
 80661ec:	f000 ff3a 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 80661f0:	4603      	mov	r3, r0
 80661f2:	2b00      	cmp	r3, #0
 80661f4:	d008      	beq.n	8066208 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80661f6:	2301      	movs	r3, #1
 80661f8:	e10e      	b.n	8066418 <HAL_I2C_Master_Receive+0x440>
 80661fa:	bf00      	nop
 80661fc:	00100002 	.word	0x00100002
 8066200:	ffff0000 	.word	0xffff0000
 8066204:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066208:	68fb      	ldr	r3, [r7, #12]
 806620a:	681b      	ldr	r3, [r3, #0]
 806620c:	681a      	ldr	r2, [r3, #0]
 806620e:	68fb      	ldr	r3, [r7, #12]
 8066210:	681b      	ldr	r3, [r3, #0]
 8066212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066218:	68fb      	ldr	r3, [r7, #12]
 806621a:	681b      	ldr	r3, [r3, #0]
 806621c:	691a      	ldr	r2, [r3, #16]
 806621e:	68fb      	ldr	r3, [r7, #12]
 8066220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066222:	b2d2      	uxtb	r2, r2
 8066224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066226:	68fb      	ldr	r3, [r7, #12]
 8066228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806622a:	1c5a      	adds	r2, r3, #1
 806622c:	68fb      	ldr	r3, [r7, #12]
 806622e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066230:	68fb      	ldr	r3, [r7, #12]
 8066232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066234:	3b01      	subs	r3, #1
 8066236:	b29a      	uxth	r2, r3
 8066238:	68fb      	ldr	r3, [r7, #12]
 806623a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 806623c:	68fb      	ldr	r3, [r7, #12]
 806623e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066240:	b29b      	uxth	r3, r3
 8066242:	3b01      	subs	r3, #1
 8066244:	b29a      	uxth	r2, r3
 8066246:	68fb      	ldr	r3, [r7, #12]
 8066248:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 806624a:	68fb      	ldr	r3, [r7, #12]
 806624c:	681b      	ldr	r3, [r3, #0]
 806624e:	691a      	ldr	r2, [r3, #16]
 8066250:	68fb      	ldr	r3, [r7, #12]
 8066252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066254:	b2d2      	uxtb	r2, r2
 8066256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066258:	68fb      	ldr	r3, [r7, #12]
 806625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806625c:	1c5a      	adds	r2, r3, #1
 806625e:	68fb      	ldr	r3, [r7, #12]
 8066260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066262:	68fb      	ldr	r3, [r7, #12]
 8066264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066266:	3b01      	subs	r3, #1
 8066268:	b29a      	uxth	r2, r3
 806626a:	68fb      	ldr	r3, [r7, #12]
 806626c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 806626e:	68fb      	ldr	r3, [r7, #12]
 8066270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066272:	b29b      	uxth	r3, r3
 8066274:	3b01      	subs	r3, #1
 8066276:	b29a      	uxth	r2, r3
 8066278:	68fb      	ldr	r3, [r7, #12]
 806627a:	855a      	strh	r2, [r3, #42]	; 0x2a
 806627c:	e0b8      	b.n	80663f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 806627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066280:	9300      	str	r3, [sp, #0]
 8066282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8066284:	2200      	movs	r2, #0
 8066286:	4966      	ldr	r1, [pc, #408]	; (8066420 <HAL_I2C_Master_Receive+0x448>)
 8066288:	68f8      	ldr	r0, [r7, #12]
 806628a:	f000 feeb 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 806628e:	4603      	mov	r3, r0
 8066290:	2b00      	cmp	r3, #0
 8066292:	d001      	beq.n	8066298 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8066294:	2301      	movs	r3, #1
 8066296:	e0bf      	b.n	8066418 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066298:	68fb      	ldr	r3, [r7, #12]
 806629a:	681b      	ldr	r3, [r3, #0]
 806629c:	681a      	ldr	r2, [r3, #0]
 806629e:	68fb      	ldr	r3, [r7, #12]
 80662a0:	681b      	ldr	r3, [r3, #0]
 80662a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80662a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80662a8:	68fb      	ldr	r3, [r7, #12]
 80662aa:	681b      	ldr	r3, [r3, #0]
 80662ac:	691a      	ldr	r2, [r3, #16]
 80662ae:	68fb      	ldr	r3, [r7, #12]
 80662b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80662b2:	b2d2      	uxtb	r2, r2
 80662b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80662b6:	68fb      	ldr	r3, [r7, #12]
 80662b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80662ba:	1c5a      	adds	r2, r3, #1
 80662bc:	68fb      	ldr	r3, [r7, #12]
 80662be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80662c0:	68fb      	ldr	r3, [r7, #12]
 80662c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80662c4:	3b01      	subs	r3, #1
 80662c6:	b29a      	uxth	r2, r3
 80662c8:	68fb      	ldr	r3, [r7, #12]
 80662ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80662cc:	68fb      	ldr	r3, [r7, #12]
 80662ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80662d0:	b29b      	uxth	r3, r3
 80662d2:	3b01      	subs	r3, #1
 80662d4:	b29a      	uxth	r2, r3
 80662d6:	68fb      	ldr	r3, [r7, #12]
 80662d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80662da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80662dc:	9300      	str	r3, [sp, #0]
 80662de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80662e0:	2200      	movs	r2, #0
 80662e2:	494f      	ldr	r1, [pc, #316]	; (8066420 <HAL_I2C_Master_Receive+0x448>)
 80662e4:	68f8      	ldr	r0, [r7, #12]
 80662e6:	f000 febd 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 80662ea:	4603      	mov	r3, r0
 80662ec:	2b00      	cmp	r3, #0
 80662ee:	d001      	beq.n	80662f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80662f0:	2301      	movs	r3, #1
 80662f2:	e091      	b.n	8066418 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80662f4:	68fb      	ldr	r3, [r7, #12]
 80662f6:	681b      	ldr	r3, [r3, #0]
 80662f8:	681a      	ldr	r2, [r3, #0]
 80662fa:	68fb      	ldr	r3, [r7, #12]
 80662fc:	681b      	ldr	r3, [r3, #0]
 80662fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066304:	68fb      	ldr	r3, [r7, #12]
 8066306:	681b      	ldr	r3, [r3, #0]
 8066308:	691a      	ldr	r2, [r3, #16]
 806630a:	68fb      	ldr	r3, [r7, #12]
 806630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806630e:	b2d2      	uxtb	r2, r2
 8066310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066312:	68fb      	ldr	r3, [r7, #12]
 8066314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066316:	1c5a      	adds	r2, r3, #1
 8066318:	68fb      	ldr	r3, [r7, #12]
 806631a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 806631c:	68fb      	ldr	r3, [r7, #12]
 806631e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066320:	3b01      	subs	r3, #1
 8066322:	b29a      	uxth	r2, r3
 8066324:	68fb      	ldr	r3, [r7, #12]
 8066326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066328:	68fb      	ldr	r3, [r7, #12]
 806632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806632c:	b29b      	uxth	r3, r3
 806632e:	3b01      	subs	r3, #1
 8066330:	b29a      	uxth	r2, r3
 8066332:	68fb      	ldr	r3, [r7, #12]
 8066334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066336:	68fb      	ldr	r3, [r7, #12]
 8066338:	681b      	ldr	r3, [r3, #0]
 806633a:	691a      	ldr	r2, [r3, #16]
 806633c:	68fb      	ldr	r3, [r7, #12]
 806633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066340:	b2d2      	uxtb	r2, r2
 8066342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066344:	68fb      	ldr	r3, [r7, #12]
 8066346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066348:	1c5a      	adds	r2, r3, #1
 806634a:	68fb      	ldr	r3, [r7, #12]
 806634c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 806634e:	68fb      	ldr	r3, [r7, #12]
 8066350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066352:	3b01      	subs	r3, #1
 8066354:	b29a      	uxth	r2, r3
 8066356:	68fb      	ldr	r3, [r7, #12]
 8066358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 806635a:	68fb      	ldr	r3, [r7, #12]
 806635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806635e:	b29b      	uxth	r3, r3
 8066360:	3b01      	subs	r3, #1
 8066362:	b29a      	uxth	r2, r3
 8066364:	68fb      	ldr	r3, [r7, #12]
 8066366:	855a      	strh	r2, [r3, #42]	; 0x2a
 8066368:	e042      	b.n	80663f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 806636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806636c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 806636e:	68f8      	ldr	r0, [r7, #12]
 8066370:	f000 ffd0 	bl	8067314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8066374:	4603      	mov	r3, r0
 8066376:	2b00      	cmp	r3, #0
 8066378:	d001      	beq.n	806637e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 806637a:	2301      	movs	r3, #1
 806637c:	e04c      	b.n	8066418 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 806637e:	68fb      	ldr	r3, [r7, #12]
 8066380:	681b      	ldr	r3, [r3, #0]
 8066382:	691a      	ldr	r2, [r3, #16]
 8066384:	68fb      	ldr	r3, [r7, #12]
 8066386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066388:	b2d2      	uxtb	r2, r2
 806638a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 806638c:	68fb      	ldr	r3, [r7, #12]
 806638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066390:	1c5a      	adds	r2, r3, #1
 8066392:	68fb      	ldr	r3, [r7, #12]
 8066394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8066396:	68fb      	ldr	r3, [r7, #12]
 8066398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806639a:	3b01      	subs	r3, #1
 806639c:	b29a      	uxth	r2, r3
 806639e:	68fb      	ldr	r3, [r7, #12]
 80663a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80663a2:	68fb      	ldr	r3, [r7, #12]
 80663a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80663a6:	b29b      	uxth	r3, r3
 80663a8:	3b01      	subs	r3, #1
 80663aa:	b29a      	uxth	r2, r3
 80663ac:	68fb      	ldr	r3, [r7, #12]
 80663ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80663b0:	68fb      	ldr	r3, [r7, #12]
 80663b2:	681b      	ldr	r3, [r3, #0]
 80663b4:	695b      	ldr	r3, [r3, #20]
 80663b6:	f003 0304 	and.w	r3, r3, #4
 80663ba:	2b04      	cmp	r3, #4
 80663bc:	d118      	bne.n	80663f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80663be:	68fb      	ldr	r3, [r7, #12]
 80663c0:	681b      	ldr	r3, [r3, #0]
 80663c2:	691a      	ldr	r2, [r3, #16]
 80663c4:	68fb      	ldr	r3, [r7, #12]
 80663c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80663c8:	b2d2      	uxtb	r2, r2
 80663ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80663cc:	68fb      	ldr	r3, [r7, #12]
 80663ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80663d0:	1c5a      	adds	r2, r3, #1
 80663d2:	68fb      	ldr	r3, [r7, #12]
 80663d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80663d6:	68fb      	ldr	r3, [r7, #12]
 80663d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80663da:	3b01      	subs	r3, #1
 80663dc:	b29a      	uxth	r2, r3
 80663de:	68fb      	ldr	r3, [r7, #12]
 80663e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80663e2:	68fb      	ldr	r3, [r7, #12]
 80663e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80663e6:	b29b      	uxth	r3, r3
 80663e8:	3b01      	subs	r3, #1
 80663ea:	b29a      	uxth	r2, r3
 80663ec:	68fb      	ldr	r3, [r7, #12]
 80663ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80663f0:	68fb      	ldr	r3, [r7, #12]
 80663f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80663f4:	2b00      	cmp	r3, #0
 80663f6:	f47f aec2 	bne.w	806617e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80663fa:	68fb      	ldr	r3, [r7, #12]
 80663fc:	2220      	movs	r2, #32
 80663fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8066402:	68fb      	ldr	r3, [r7, #12]
 8066404:	2200      	movs	r2, #0
 8066406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 806640a:	68fb      	ldr	r3, [r7, #12]
 806640c:	2200      	movs	r2, #0
 806640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8066412:	2300      	movs	r3, #0
 8066414:	e000      	b.n	8066418 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8066416:	2302      	movs	r3, #2
  }
}
 8066418:	4618      	mov	r0, r3
 806641a:	3728      	adds	r7, #40	; 0x28
 806641c:	46bd      	mov	sp, r7
 806641e:	bd80      	pop	{r7, pc}
 8066420:	00010004 	.word	0x00010004

08066424 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8066424:	b580      	push	{r7, lr}
 8066426:	b088      	sub	sp, #32
 8066428:	af02      	add	r7, sp, #8
 806642a:	60f8      	str	r0, [r7, #12]
 806642c:	4608      	mov	r0, r1
 806642e:	4611      	mov	r1, r2
 8066430:	461a      	mov	r2, r3
 8066432:	4603      	mov	r3, r0
 8066434:	817b      	strh	r3, [r7, #10]
 8066436:	460b      	mov	r3, r1
 8066438:	813b      	strh	r3, [r7, #8]
 806643a:	4613      	mov	r3, r2
 806643c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 806643e:	f7fd fa3f 	bl	80638c0 <HAL_GetTick>
 8066442:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8066444:	88fb      	ldrh	r3, [r7, #6]
 8066446:	2b01      	cmp	r3, #1
 8066448:	d007      	beq.n	806645a <HAL_I2C_Mem_Write+0x36>
 806644a:	88fb      	ldrh	r3, [r7, #6]
 806644c:	2b10      	cmp	r3, #16
 806644e:	d004      	beq.n	806645a <HAL_I2C_Mem_Write+0x36>
 8066450:	f640 11ba 	movw	r1, #2490	; 0x9ba
 8066454:	4873      	ldr	r0, [pc, #460]	; (8066624 <HAL_I2C_Mem_Write+0x200>)
 8066456:	f7fc fd68 	bl	8062f2a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 806645a:	68fb      	ldr	r3, [r7, #12]
 806645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8066460:	b2db      	uxtb	r3, r3
 8066462:	2b20      	cmp	r3, #32
 8066464:	f040 80d9 	bne.w	806661a <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8066468:	697b      	ldr	r3, [r7, #20]
 806646a:	9300      	str	r3, [sp, #0]
 806646c:	2319      	movs	r3, #25
 806646e:	2201      	movs	r2, #1
 8066470:	496d      	ldr	r1, [pc, #436]	; (8066628 <HAL_I2C_Mem_Write+0x204>)
 8066472:	68f8      	ldr	r0, [r7, #12]
 8066474:	f000 fdf6 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 8066478:	4603      	mov	r3, r0
 806647a:	2b00      	cmp	r3, #0
 806647c:	d001      	beq.n	8066482 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 806647e:	2302      	movs	r3, #2
 8066480:	e0cc      	b.n	806661c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8066482:	68fb      	ldr	r3, [r7, #12]
 8066484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8066488:	2b01      	cmp	r3, #1
 806648a:	d101      	bne.n	8066490 <HAL_I2C_Mem_Write+0x6c>
 806648c:	2302      	movs	r3, #2
 806648e:	e0c5      	b.n	806661c <HAL_I2C_Mem_Write+0x1f8>
 8066490:	68fb      	ldr	r3, [r7, #12]
 8066492:	2201      	movs	r2, #1
 8066494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8066498:	68fb      	ldr	r3, [r7, #12]
 806649a:	681b      	ldr	r3, [r3, #0]
 806649c:	681b      	ldr	r3, [r3, #0]
 806649e:	f003 0301 	and.w	r3, r3, #1
 80664a2:	2b01      	cmp	r3, #1
 80664a4:	d007      	beq.n	80664b6 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80664a6:	68fb      	ldr	r3, [r7, #12]
 80664a8:	681b      	ldr	r3, [r3, #0]
 80664aa:	681a      	ldr	r2, [r3, #0]
 80664ac:	68fb      	ldr	r3, [r7, #12]
 80664ae:	681b      	ldr	r3, [r3, #0]
 80664b0:	f042 0201 	orr.w	r2, r2, #1
 80664b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80664b6:	68fb      	ldr	r3, [r7, #12]
 80664b8:	681b      	ldr	r3, [r3, #0]
 80664ba:	681a      	ldr	r2, [r3, #0]
 80664bc:	68fb      	ldr	r3, [r7, #12]
 80664be:	681b      	ldr	r3, [r3, #0]
 80664c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80664c4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80664c6:	68fb      	ldr	r3, [r7, #12]
 80664c8:	2221      	movs	r2, #33	; 0x21
 80664ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80664ce:	68fb      	ldr	r3, [r7, #12]
 80664d0:	2240      	movs	r2, #64	; 0x40
 80664d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80664d6:	68fb      	ldr	r3, [r7, #12]
 80664d8:	2200      	movs	r2, #0
 80664da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80664dc:	68fb      	ldr	r3, [r7, #12]
 80664de:	6a3a      	ldr	r2, [r7, #32]
 80664e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80664e2:	68fb      	ldr	r3, [r7, #12]
 80664e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80664e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80664e8:	68fb      	ldr	r3, [r7, #12]
 80664ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80664ec:	b29a      	uxth	r2, r3
 80664ee:	68fb      	ldr	r3, [r7, #12]
 80664f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80664f2:	68fb      	ldr	r3, [r7, #12]
 80664f4:	4a4d      	ldr	r2, [pc, #308]	; (806662c <HAL_I2C_Mem_Write+0x208>)
 80664f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80664f8:	88f8      	ldrh	r0, [r7, #6]
 80664fa:	893a      	ldrh	r2, [r7, #8]
 80664fc:	8979      	ldrh	r1, [r7, #10]
 80664fe:	697b      	ldr	r3, [r7, #20]
 8066500:	9301      	str	r3, [sp, #4]
 8066502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8066504:	9300      	str	r3, [sp, #0]
 8066506:	4603      	mov	r3, r0
 8066508:	68f8      	ldr	r0, [r7, #12]
 806650a:	f000 fc2d 	bl	8066d68 <I2C_RequestMemoryWrite>
 806650e:	4603      	mov	r3, r0
 8066510:	2b00      	cmp	r3, #0
 8066512:	d052      	beq.n	80665ba <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8066514:	2301      	movs	r3, #1
 8066516:	e081      	b.n	806661c <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8066518:	697a      	ldr	r2, [r7, #20]
 806651a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 806651c:	68f8      	ldr	r0, [r7, #12]
 806651e:	f000 fe77 	bl	8067210 <I2C_WaitOnTXEFlagUntilTimeout>
 8066522:	4603      	mov	r3, r0
 8066524:	2b00      	cmp	r3, #0
 8066526:	d00d      	beq.n	8066544 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066528:	68fb      	ldr	r3, [r7, #12]
 806652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806652c:	2b04      	cmp	r3, #4
 806652e:	d107      	bne.n	8066540 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066530:	68fb      	ldr	r3, [r7, #12]
 8066532:	681b      	ldr	r3, [r3, #0]
 8066534:	681a      	ldr	r2, [r3, #0]
 8066536:	68fb      	ldr	r3, [r7, #12]
 8066538:	681b      	ldr	r3, [r3, #0]
 806653a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 806653e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8066540:	2301      	movs	r3, #1
 8066542:	e06b      	b.n	806661c <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8066544:	68fb      	ldr	r3, [r7, #12]
 8066546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066548:	781a      	ldrb	r2, [r3, #0]
 806654a:	68fb      	ldr	r3, [r7, #12]
 806654c:	681b      	ldr	r3, [r3, #0]
 806654e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8066550:	68fb      	ldr	r3, [r7, #12]
 8066552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066554:	1c5a      	adds	r2, r3, #1
 8066556:	68fb      	ldr	r3, [r7, #12]
 8066558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 806655a:	68fb      	ldr	r3, [r7, #12]
 806655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806655e:	3b01      	subs	r3, #1
 8066560:	b29a      	uxth	r2, r3
 8066562:	68fb      	ldr	r3, [r7, #12]
 8066564:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8066566:	68fb      	ldr	r3, [r7, #12]
 8066568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806656a:	b29b      	uxth	r3, r3
 806656c:	3b01      	subs	r3, #1
 806656e:	b29a      	uxth	r2, r3
 8066570:	68fb      	ldr	r3, [r7, #12]
 8066572:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8066574:	68fb      	ldr	r3, [r7, #12]
 8066576:	681b      	ldr	r3, [r3, #0]
 8066578:	695b      	ldr	r3, [r3, #20]
 806657a:	f003 0304 	and.w	r3, r3, #4
 806657e:	2b04      	cmp	r3, #4
 8066580:	d11b      	bne.n	80665ba <HAL_I2C_Mem_Write+0x196>
 8066582:	68fb      	ldr	r3, [r7, #12]
 8066584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066586:	2b00      	cmp	r3, #0
 8066588:	d017      	beq.n	80665ba <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 806658a:	68fb      	ldr	r3, [r7, #12]
 806658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806658e:	781a      	ldrb	r2, [r3, #0]
 8066590:	68fb      	ldr	r3, [r7, #12]
 8066592:	681b      	ldr	r3, [r3, #0]
 8066594:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8066596:	68fb      	ldr	r3, [r7, #12]
 8066598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806659a:	1c5a      	adds	r2, r3, #1
 806659c:	68fb      	ldr	r3, [r7, #12]
 806659e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80665a0:	68fb      	ldr	r3, [r7, #12]
 80665a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80665a4:	3b01      	subs	r3, #1
 80665a6:	b29a      	uxth	r2, r3
 80665a8:	68fb      	ldr	r3, [r7, #12]
 80665aa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80665ac:	68fb      	ldr	r3, [r7, #12]
 80665ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80665b0:	b29b      	uxth	r3, r3
 80665b2:	3b01      	subs	r3, #1
 80665b4:	b29a      	uxth	r2, r3
 80665b6:	68fb      	ldr	r3, [r7, #12]
 80665b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80665ba:	68fb      	ldr	r3, [r7, #12]
 80665bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80665be:	2b00      	cmp	r3, #0
 80665c0:	d1aa      	bne.n	8066518 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80665c2:	697a      	ldr	r2, [r7, #20]
 80665c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80665c6:	68f8      	ldr	r0, [r7, #12]
 80665c8:	f000 fe63 	bl	8067292 <I2C_WaitOnBTFFlagUntilTimeout>
 80665cc:	4603      	mov	r3, r0
 80665ce:	2b00      	cmp	r3, #0
 80665d0:	d00d      	beq.n	80665ee <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80665d2:	68fb      	ldr	r3, [r7, #12]
 80665d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80665d6:	2b04      	cmp	r3, #4
 80665d8:	d107      	bne.n	80665ea <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80665da:	68fb      	ldr	r3, [r7, #12]
 80665dc:	681b      	ldr	r3, [r3, #0]
 80665de:	681a      	ldr	r2, [r3, #0]
 80665e0:	68fb      	ldr	r3, [r7, #12]
 80665e2:	681b      	ldr	r3, [r3, #0]
 80665e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80665e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80665ea:	2301      	movs	r3, #1
 80665ec:	e016      	b.n	806661c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80665ee:	68fb      	ldr	r3, [r7, #12]
 80665f0:	681b      	ldr	r3, [r3, #0]
 80665f2:	681a      	ldr	r2, [r3, #0]
 80665f4:	68fb      	ldr	r3, [r7, #12]
 80665f6:	681b      	ldr	r3, [r3, #0]
 80665f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80665fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80665fe:	68fb      	ldr	r3, [r7, #12]
 8066600:	2220      	movs	r2, #32
 8066602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8066606:	68fb      	ldr	r3, [r7, #12]
 8066608:	2200      	movs	r2, #0
 806660a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 806660e:	68fb      	ldr	r3, [r7, #12]
 8066610:	2200      	movs	r2, #0
 8066612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8066616:	2300      	movs	r3, #0
 8066618:	e000      	b.n	806661c <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 806661a:	2302      	movs	r3, #2
  }
}
 806661c:	4618      	mov	r0, r3
 806661e:	3718      	adds	r7, #24
 8066620:	46bd      	mov	sp, r7
 8066622:	bd80      	pop	{r7, pc}
 8066624:	08077148 	.word	0x08077148
 8066628:	00100002 	.word	0x00100002
 806662c:	ffff0000 	.word	0xffff0000

08066630 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8066630:	b580      	push	{r7, lr}
 8066632:	b08c      	sub	sp, #48	; 0x30
 8066634:	af02      	add	r7, sp, #8
 8066636:	60f8      	str	r0, [r7, #12]
 8066638:	4608      	mov	r0, r1
 806663a:	4611      	mov	r1, r2
 806663c:	461a      	mov	r2, r3
 806663e:	4603      	mov	r3, r0
 8066640:	817b      	strh	r3, [r7, #10]
 8066642:	460b      	mov	r3, r1
 8066644:	813b      	strh	r3, [r7, #8]
 8066646:	4613      	mov	r3, r2
 8066648:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 806664a:	f7fd f939 	bl	80638c0 <HAL_GetTick>
 806664e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8066650:	88fb      	ldrh	r3, [r7, #6]
 8066652:	2b01      	cmp	r3, #1
 8066654:	d007      	beq.n	8066666 <HAL_I2C_Mem_Read+0x36>
 8066656:	88fb      	ldrh	r3, [r7, #6]
 8066658:	2b10      	cmp	r3, #16
 806665a:	d004      	beq.n	8066666 <HAL_I2C_Mem_Read+0x36>
 806665c:	f640 2135 	movw	r1, #2613	; 0xa35
 8066660:	4881      	ldr	r0, [pc, #516]	; (8066868 <HAL_I2C_Mem_Read+0x238>)
 8066662:	f7fc fc62 	bl	8062f2a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8066666:	68fb      	ldr	r3, [r7, #12]
 8066668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 806666c:	b2db      	uxtb	r3, r3
 806666e:	2b20      	cmp	r3, #32
 8066670:	f040 8209 	bne.w	8066a86 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8066674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066676:	9300      	str	r3, [sp, #0]
 8066678:	2319      	movs	r3, #25
 806667a:	2201      	movs	r2, #1
 806667c:	497b      	ldr	r1, [pc, #492]	; (806686c <HAL_I2C_Mem_Read+0x23c>)
 806667e:	68f8      	ldr	r0, [r7, #12]
 8066680:	f000 fcf0 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 8066684:	4603      	mov	r3, r0
 8066686:	2b00      	cmp	r3, #0
 8066688:	d001      	beq.n	806668e <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 806668a:	2302      	movs	r3, #2
 806668c:	e1fc      	b.n	8066a88 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 806668e:	68fb      	ldr	r3, [r7, #12]
 8066690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8066694:	2b01      	cmp	r3, #1
 8066696:	d101      	bne.n	806669c <HAL_I2C_Mem_Read+0x6c>
 8066698:	2302      	movs	r3, #2
 806669a:	e1f5      	b.n	8066a88 <HAL_I2C_Mem_Read+0x458>
 806669c:	68fb      	ldr	r3, [r7, #12]
 806669e:	2201      	movs	r2, #1
 80666a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80666a4:	68fb      	ldr	r3, [r7, #12]
 80666a6:	681b      	ldr	r3, [r3, #0]
 80666a8:	681b      	ldr	r3, [r3, #0]
 80666aa:	f003 0301 	and.w	r3, r3, #1
 80666ae:	2b01      	cmp	r3, #1
 80666b0:	d007      	beq.n	80666c2 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80666b2:	68fb      	ldr	r3, [r7, #12]
 80666b4:	681b      	ldr	r3, [r3, #0]
 80666b6:	681a      	ldr	r2, [r3, #0]
 80666b8:	68fb      	ldr	r3, [r7, #12]
 80666ba:	681b      	ldr	r3, [r3, #0]
 80666bc:	f042 0201 	orr.w	r2, r2, #1
 80666c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80666c2:	68fb      	ldr	r3, [r7, #12]
 80666c4:	681b      	ldr	r3, [r3, #0]
 80666c6:	681a      	ldr	r2, [r3, #0]
 80666c8:	68fb      	ldr	r3, [r7, #12]
 80666ca:	681b      	ldr	r3, [r3, #0]
 80666cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80666d0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80666d2:	68fb      	ldr	r3, [r7, #12]
 80666d4:	2222      	movs	r2, #34	; 0x22
 80666d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80666da:	68fb      	ldr	r3, [r7, #12]
 80666dc:	2240      	movs	r2, #64	; 0x40
 80666de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80666e2:	68fb      	ldr	r3, [r7, #12]
 80666e4:	2200      	movs	r2, #0
 80666e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80666e8:	68fb      	ldr	r3, [r7, #12]
 80666ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80666ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80666ee:	68fb      	ldr	r3, [r7, #12]
 80666f0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80666f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80666f4:	68fb      	ldr	r3, [r7, #12]
 80666f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80666f8:	b29a      	uxth	r2, r3
 80666fa:	68fb      	ldr	r3, [r7, #12]
 80666fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80666fe:	68fb      	ldr	r3, [r7, #12]
 8066700:	4a5b      	ldr	r2, [pc, #364]	; (8066870 <HAL_I2C_Mem_Read+0x240>)
 8066702:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8066704:	88f8      	ldrh	r0, [r7, #6]
 8066706:	893a      	ldrh	r2, [r7, #8]
 8066708:	8979      	ldrh	r1, [r7, #10]
 806670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806670c:	9301      	str	r3, [sp, #4]
 806670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8066710:	9300      	str	r3, [sp, #0]
 8066712:	4603      	mov	r3, r0
 8066714:	68f8      	ldr	r0, [r7, #12]
 8066716:	f000 fbbd 	bl	8066e94 <I2C_RequestMemoryRead>
 806671a:	4603      	mov	r3, r0
 806671c:	2b00      	cmp	r3, #0
 806671e:	d001      	beq.n	8066724 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8066720:	2301      	movs	r3, #1
 8066722:	e1b1      	b.n	8066a88 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8066724:	68fb      	ldr	r3, [r7, #12]
 8066726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066728:	2b00      	cmp	r3, #0
 806672a:	d113      	bne.n	8066754 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 806672c:	2300      	movs	r3, #0
 806672e:	623b      	str	r3, [r7, #32]
 8066730:	68fb      	ldr	r3, [r7, #12]
 8066732:	681b      	ldr	r3, [r3, #0]
 8066734:	695b      	ldr	r3, [r3, #20]
 8066736:	623b      	str	r3, [r7, #32]
 8066738:	68fb      	ldr	r3, [r7, #12]
 806673a:	681b      	ldr	r3, [r3, #0]
 806673c:	699b      	ldr	r3, [r3, #24]
 806673e:	623b      	str	r3, [r7, #32]
 8066740:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066742:	68fb      	ldr	r3, [r7, #12]
 8066744:	681b      	ldr	r3, [r3, #0]
 8066746:	681a      	ldr	r2, [r3, #0]
 8066748:	68fb      	ldr	r3, [r7, #12]
 806674a:	681b      	ldr	r3, [r3, #0]
 806674c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066750:	601a      	str	r2, [r3, #0]
 8066752:	e185      	b.n	8066a60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8066754:	68fb      	ldr	r3, [r7, #12]
 8066756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066758:	2b01      	cmp	r3, #1
 806675a:	d11b      	bne.n	8066794 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 806675c:	68fb      	ldr	r3, [r7, #12]
 806675e:	681b      	ldr	r3, [r3, #0]
 8066760:	681a      	ldr	r2, [r3, #0]
 8066762:	68fb      	ldr	r3, [r7, #12]
 8066764:	681b      	ldr	r3, [r3, #0]
 8066766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 806676a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 806676c:	2300      	movs	r3, #0
 806676e:	61fb      	str	r3, [r7, #28]
 8066770:	68fb      	ldr	r3, [r7, #12]
 8066772:	681b      	ldr	r3, [r3, #0]
 8066774:	695b      	ldr	r3, [r3, #20]
 8066776:	61fb      	str	r3, [r7, #28]
 8066778:	68fb      	ldr	r3, [r7, #12]
 806677a:	681b      	ldr	r3, [r3, #0]
 806677c:	699b      	ldr	r3, [r3, #24]
 806677e:	61fb      	str	r3, [r7, #28]
 8066780:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066782:	68fb      	ldr	r3, [r7, #12]
 8066784:	681b      	ldr	r3, [r3, #0]
 8066786:	681a      	ldr	r2, [r3, #0]
 8066788:	68fb      	ldr	r3, [r7, #12]
 806678a:	681b      	ldr	r3, [r3, #0]
 806678c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066790:	601a      	str	r2, [r3, #0]
 8066792:	e165      	b.n	8066a60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8066794:	68fb      	ldr	r3, [r7, #12]
 8066796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066798:	2b02      	cmp	r3, #2
 806679a:	d11b      	bne.n	80667d4 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 806679c:	68fb      	ldr	r3, [r7, #12]
 806679e:	681b      	ldr	r3, [r3, #0]
 80667a0:	681a      	ldr	r2, [r3, #0]
 80667a2:	68fb      	ldr	r3, [r7, #12]
 80667a4:	681b      	ldr	r3, [r3, #0]
 80667a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80667aa:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80667ac:	68fb      	ldr	r3, [r7, #12]
 80667ae:	681b      	ldr	r3, [r3, #0]
 80667b0:	681a      	ldr	r2, [r3, #0]
 80667b2:	68fb      	ldr	r3, [r7, #12]
 80667b4:	681b      	ldr	r3, [r3, #0]
 80667b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80667ba:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80667bc:	2300      	movs	r3, #0
 80667be:	61bb      	str	r3, [r7, #24]
 80667c0:	68fb      	ldr	r3, [r7, #12]
 80667c2:	681b      	ldr	r3, [r3, #0]
 80667c4:	695b      	ldr	r3, [r3, #20]
 80667c6:	61bb      	str	r3, [r7, #24]
 80667c8:	68fb      	ldr	r3, [r7, #12]
 80667ca:	681b      	ldr	r3, [r3, #0]
 80667cc:	699b      	ldr	r3, [r3, #24]
 80667ce:	61bb      	str	r3, [r7, #24]
 80667d0:	69bb      	ldr	r3, [r7, #24]
 80667d2:	e145      	b.n	8066a60 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80667d4:	2300      	movs	r3, #0
 80667d6:	617b      	str	r3, [r7, #20]
 80667d8:	68fb      	ldr	r3, [r7, #12]
 80667da:	681b      	ldr	r3, [r3, #0]
 80667dc:	695b      	ldr	r3, [r3, #20]
 80667de:	617b      	str	r3, [r7, #20]
 80667e0:	68fb      	ldr	r3, [r7, #12]
 80667e2:	681b      	ldr	r3, [r3, #0]
 80667e4:	699b      	ldr	r3, [r3, #24]
 80667e6:	617b      	str	r3, [r7, #20]
 80667e8:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80667ea:	e139      	b.n	8066a60 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80667ec:	68fb      	ldr	r3, [r7, #12]
 80667ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80667f0:	2b03      	cmp	r3, #3
 80667f2:	f200 80f2 	bhi.w	80669da <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80667f6:	68fb      	ldr	r3, [r7, #12]
 80667f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80667fa:	2b01      	cmp	r3, #1
 80667fc:	d123      	bne.n	8066846 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80667fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066800:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8066802:	68f8      	ldr	r0, [r7, #12]
 8066804:	f000 fd86 	bl	8067314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8066808:	4603      	mov	r3, r0
 806680a:	2b00      	cmp	r3, #0
 806680c:	d001      	beq.n	8066812 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 806680e:	2301      	movs	r3, #1
 8066810:	e13a      	b.n	8066a88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066812:	68fb      	ldr	r3, [r7, #12]
 8066814:	681b      	ldr	r3, [r3, #0]
 8066816:	691a      	ldr	r2, [r3, #16]
 8066818:	68fb      	ldr	r3, [r7, #12]
 806681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806681c:	b2d2      	uxtb	r2, r2
 806681e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066820:	68fb      	ldr	r3, [r7, #12]
 8066822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066824:	1c5a      	adds	r2, r3, #1
 8066826:	68fb      	ldr	r3, [r7, #12]
 8066828:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 806682a:	68fb      	ldr	r3, [r7, #12]
 806682c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806682e:	3b01      	subs	r3, #1
 8066830:	b29a      	uxth	r2, r3
 8066832:	68fb      	ldr	r3, [r7, #12]
 8066834:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066836:	68fb      	ldr	r3, [r7, #12]
 8066838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806683a:	b29b      	uxth	r3, r3
 806683c:	3b01      	subs	r3, #1
 806683e:	b29a      	uxth	r2, r3
 8066840:	68fb      	ldr	r3, [r7, #12]
 8066842:	855a      	strh	r2, [r3, #42]	; 0x2a
 8066844:	e10c      	b.n	8066a60 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8066846:	68fb      	ldr	r3, [r7, #12]
 8066848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 806684a:	2b02      	cmp	r3, #2
 806684c:	d14f      	bne.n	80668ee <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 806684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066850:	9300      	str	r3, [sp, #0]
 8066852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8066854:	2200      	movs	r2, #0
 8066856:	4907      	ldr	r1, [pc, #28]	; (8066874 <HAL_I2C_Mem_Read+0x244>)
 8066858:	68f8      	ldr	r0, [r7, #12]
 806685a:	f000 fc03 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 806685e:	4603      	mov	r3, r0
 8066860:	2b00      	cmp	r3, #0
 8066862:	d009      	beq.n	8066878 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8066864:	2301      	movs	r3, #1
 8066866:	e10f      	b.n	8066a88 <HAL_I2C_Mem_Read+0x458>
 8066868:	08077148 	.word	0x08077148
 806686c:	00100002 	.word	0x00100002
 8066870:	ffff0000 	.word	0xffff0000
 8066874:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066878:	68fb      	ldr	r3, [r7, #12]
 806687a:	681b      	ldr	r3, [r3, #0]
 806687c:	681a      	ldr	r2, [r3, #0]
 806687e:	68fb      	ldr	r3, [r7, #12]
 8066880:	681b      	ldr	r3, [r3, #0]
 8066882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066886:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066888:	68fb      	ldr	r3, [r7, #12]
 806688a:	681b      	ldr	r3, [r3, #0]
 806688c:	691a      	ldr	r2, [r3, #16]
 806688e:	68fb      	ldr	r3, [r7, #12]
 8066890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066892:	b2d2      	uxtb	r2, r2
 8066894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066896:	68fb      	ldr	r3, [r7, #12]
 8066898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806689a:	1c5a      	adds	r2, r3, #1
 806689c:	68fb      	ldr	r3, [r7, #12]
 806689e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80668a0:	68fb      	ldr	r3, [r7, #12]
 80668a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80668a4:	3b01      	subs	r3, #1
 80668a6:	b29a      	uxth	r2, r3
 80668a8:	68fb      	ldr	r3, [r7, #12]
 80668aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80668ac:	68fb      	ldr	r3, [r7, #12]
 80668ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80668b0:	b29b      	uxth	r3, r3
 80668b2:	3b01      	subs	r3, #1
 80668b4:	b29a      	uxth	r2, r3
 80668b6:	68fb      	ldr	r3, [r7, #12]
 80668b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80668ba:	68fb      	ldr	r3, [r7, #12]
 80668bc:	681b      	ldr	r3, [r3, #0]
 80668be:	691a      	ldr	r2, [r3, #16]
 80668c0:	68fb      	ldr	r3, [r7, #12]
 80668c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80668c4:	b2d2      	uxtb	r2, r2
 80668c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80668c8:	68fb      	ldr	r3, [r7, #12]
 80668ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80668cc:	1c5a      	adds	r2, r3, #1
 80668ce:	68fb      	ldr	r3, [r7, #12]
 80668d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80668d2:	68fb      	ldr	r3, [r7, #12]
 80668d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80668d6:	3b01      	subs	r3, #1
 80668d8:	b29a      	uxth	r2, r3
 80668da:	68fb      	ldr	r3, [r7, #12]
 80668dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80668de:	68fb      	ldr	r3, [r7, #12]
 80668e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80668e2:	b29b      	uxth	r3, r3
 80668e4:	3b01      	subs	r3, #1
 80668e6:	b29a      	uxth	r2, r3
 80668e8:	68fb      	ldr	r3, [r7, #12]
 80668ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80668ec:	e0b8      	b.n	8066a60 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80668ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80668f0:	9300      	str	r3, [sp, #0]
 80668f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80668f4:	2200      	movs	r2, #0
 80668f6:	4966      	ldr	r1, [pc, #408]	; (8066a90 <HAL_I2C_Mem_Read+0x460>)
 80668f8:	68f8      	ldr	r0, [r7, #12]
 80668fa:	f000 fbb3 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 80668fe:	4603      	mov	r3, r0
 8066900:	2b00      	cmp	r3, #0
 8066902:	d001      	beq.n	8066908 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8066904:	2301      	movs	r3, #1
 8066906:	e0bf      	b.n	8066a88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066908:	68fb      	ldr	r3, [r7, #12]
 806690a:	681b      	ldr	r3, [r3, #0]
 806690c:	681a      	ldr	r2, [r3, #0]
 806690e:	68fb      	ldr	r3, [r7, #12]
 8066910:	681b      	ldr	r3, [r3, #0]
 8066912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8066916:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066918:	68fb      	ldr	r3, [r7, #12]
 806691a:	681b      	ldr	r3, [r3, #0]
 806691c:	691a      	ldr	r2, [r3, #16]
 806691e:	68fb      	ldr	r3, [r7, #12]
 8066920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066922:	b2d2      	uxtb	r2, r2
 8066924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066926:	68fb      	ldr	r3, [r7, #12]
 8066928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806692a:	1c5a      	adds	r2, r3, #1
 806692c:	68fb      	ldr	r3, [r7, #12]
 806692e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066930:	68fb      	ldr	r3, [r7, #12]
 8066932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066934:	3b01      	subs	r3, #1
 8066936:	b29a      	uxth	r2, r3
 8066938:	68fb      	ldr	r3, [r7, #12]
 806693a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 806693c:	68fb      	ldr	r3, [r7, #12]
 806693e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066940:	b29b      	uxth	r3, r3
 8066942:	3b01      	subs	r3, #1
 8066944:	b29a      	uxth	r2, r3
 8066946:	68fb      	ldr	r3, [r7, #12]
 8066948:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 806694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806694c:	9300      	str	r3, [sp, #0]
 806694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8066950:	2200      	movs	r2, #0
 8066952:	494f      	ldr	r1, [pc, #316]	; (8066a90 <HAL_I2C_Mem_Read+0x460>)
 8066954:	68f8      	ldr	r0, [r7, #12]
 8066956:	f000 fb85 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 806695a:	4603      	mov	r3, r0
 806695c:	2b00      	cmp	r3, #0
 806695e:	d001      	beq.n	8066964 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8066960:	2301      	movs	r3, #1
 8066962:	e091      	b.n	8066a88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066964:	68fb      	ldr	r3, [r7, #12]
 8066966:	681b      	ldr	r3, [r3, #0]
 8066968:	681a      	ldr	r2, [r3, #0]
 806696a:	68fb      	ldr	r3, [r7, #12]
 806696c:	681b      	ldr	r3, [r3, #0]
 806696e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066974:	68fb      	ldr	r3, [r7, #12]
 8066976:	681b      	ldr	r3, [r3, #0]
 8066978:	691a      	ldr	r2, [r3, #16]
 806697a:	68fb      	ldr	r3, [r7, #12]
 806697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806697e:	b2d2      	uxtb	r2, r2
 8066980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066982:	68fb      	ldr	r3, [r7, #12]
 8066984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066986:	1c5a      	adds	r2, r3, #1
 8066988:	68fb      	ldr	r3, [r7, #12]
 806698a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 806698c:	68fb      	ldr	r3, [r7, #12]
 806698e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066990:	3b01      	subs	r3, #1
 8066992:	b29a      	uxth	r2, r3
 8066994:	68fb      	ldr	r3, [r7, #12]
 8066996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066998:	68fb      	ldr	r3, [r7, #12]
 806699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 806699c:	b29b      	uxth	r3, r3
 806699e:	3b01      	subs	r3, #1
 80669a0:	b29a      	uxth	r2, r3
 80669a2:	68fb      	ldr	r3, [r7, #12]
 80669a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80669a6:	68fb      	ldr	r3, [r7, #12]
 80669a8:	681b      	ldr	r3, [r3, #0]
 80669aa:	691a      	ldr	r2, [r3, #16]
 80669ac:	68fb      	ldr	r3, [r7, #12]
 80669ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80669b0:	b2d2      	uxtb	r2, r2
 80669b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80669b4:	68fb      	ldr	r3, [r7, #12]
 80669b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80669b8:	1c5a      	adds	r2, r3, #1
 80669ba:	68fb      	ldr	r3, [r7, #12]
 80669bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80669be:	68fb      	ldr	r3, [r7, #12]
 80669c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80669c2:	3b01      	subs	r3, #1
 80669c4:	b29a      	uxth	r2, r3
 80669c6:	68fb      	ldr	r3, [r7, #12]
 80669c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80669ca:	68fb      	ldr	r3, [r7, #12]
 80669cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80669ce:	b29b      	uxth	r3, r3
 80669d0:	3b01      	subs	r3, #1
 80669d2:	b29a      	uxth	r2, r3
 80669d4:	68fb      	ldr	r3, [r7, #12]
 80669d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80669d8:	e042      	b.n	8066a60 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80669da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80669dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80669de:	68f8      	ldr	r0, [r7, #12]
 80669e0:	f000 fc98 	bl	8067314 <I2C_WaitOnRXNEFlagUntilTimeout>
 80669e4:	4603      	mov	r3, r0
 80669e6:	2b00      	cmp	r3, #0
 80669e8:	d001      	beq.n	80669ee <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 80669ea:	2301      	movs	r3, #1
 80669ec:	e04c      	b.n	8066a88 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80669ee:	68fb      	ldr	r3, [r7, #12]
 80669f0:	681b      	ldr	r3, [r3, #0]
 80669f2:	691a      	ldr	r2, [r3, #16]
 80669f4:	68fb      	ldr	r3, [r7, #12]
 80669f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80669f8:	b2d2      	uxtb	r2, r2
 80669fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80669fc:	68fb      	ldr	r3, [r7, #12]
 80669fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a00:	1c5a      	adds	r2, r3, #1
 8066a02:	68fb      	ldr	r3, [r7, #12]
 8066a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8066a06:	68fb      	ldr	r3, [r7, #12]
 8066a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066a0a:	3b01      	subs	r3, #1
 8066a0c:	b29a      	uxth	r2, r3
 8066a0e:	68fb      	ldr	r3, [r7, #12]
 8066a10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8066a12:	68fb      	ldr	r3, [r7, #12]
 8066a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066a16:	b29b      	uxth	r3, r3
 8066a18:	3b01      	subs	r3, #1
 8066a1a:	b29a      	uxth	r2, r3
 8066a1c:	68fb      	ldr	r3, [r7, #12]
 8066a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8066a20:	68fb      	ldr	r3, [r7, #12]
 8066a22:	681b      	ldr	r3, [r3, #0]
 8066a24:	695b      	ldr	r3, [r3, #20]
 8066a26:	f003 0304 	and.w	r3, r3, #4
 8066a2a:	2b04      	cmp	r3, #4
 8066a2c:	d118      	bne.n	8066a60 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8066a2e:	68fb      	ldr	r3, [r7, #12]
 8066a30:	681b      	ldr	r3, [r3, #0]
 8066a32:	691a      	ldr	r2, [r3, #16]
 8066a34:	68fb      	ldr	r3, [r7, #12]
 8066a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a38:	b2d2      	uxtb	r2, r2
 8066a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8066a3c:	68fb      	ldr	r3, [r7, #12]
 8066a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8066a40:	1c5a      	adds	r2, r3, #1
 8066a42:	68fb      	ldr	r3, [r7, #12]
 8066a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8066a46:	68fb      	ldr	r3, [r7, #12]
 8066a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066a4a:	3b01      	subs	r3, #1
 8066a4c:	b29a      	uxth	r2, r3
 8066a4e:	68fb      	ldr	r3, [r7, #12]
 8066a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8066a52:	68fb      	ldr	r3, [r7, #12]
 8066a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8066a56:	b29b      	uxth	r3, r3
 8066a58:	3b01      	subs	r3, #1
 8066a5a:	b29a      	uxth	r2, r3
 8066a5c:	68fb      	ldr	r3, [r7, #12]
 8066a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8066a60:	68fb      	ldr	r3, [r7, #12]
 8066a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8066a64:	2b00      	cmp	r3, #0
 8066a66:	f47f aec1 	bne.w	80667ec <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8066a6a:	68fb      	ldr	r3, [r7, #12]
 8066a6c:	2220      	movs	r2, #32
 8066a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8066a72:	68fb      	ldr	r3, [r7, #12]
 8066a74:	2200      	movs	r2, #0
 8066a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8066a7a:	68fb      	ldr	r3, [r7, #12]
 8066a7c:	2200      	movs	r2, #0
 8066a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8066a82:	2300      	movs	r3, #0
 8066a84:	e000      	b.n	8066a88 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8066a86:	2302      	movs	r3, #2
  }
}
 8066a88:	4618      	mov	r0, r3
 8066a8a:	3728      	adds	r7, #40	; 0x28
 8066a8c:	46bd      	mov	sp, r7
 8066a8e:	bd80      	pop	{r7, pc}
 8066a90:	00010004 	.word	0x00010004

08066a94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8066a94:	b480      	push	{r7}
 8066a96:	b083      	sub	sp, #12
 8066a98:	af00      	add	r7, sp, #0
 8066a9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8066a9c:	687b      	ldr	r3, [r7, #4]
 8066a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8066aa2:	b2db      	uxtb	r3, r3
}
 8066aa4:	4618      	mov	r0, r3
 8066aa6:	370c      	adds	r7, #12
 8066aa8:	46bd      	mov	sp, r7
 8066aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066aae:	4770      	bx	lr

08066ab0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8066ab0:	b480      	push	{r7}
 8066ab2:	b083      	sub	sp, #12
 8066ab4:	af00      	add	r7, sp, #0
 8066ab6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8066ab8:	687b      	ldr	r3, [r7, #4]
 8066aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8066abc:	4618      	mov	r0, r3
 8066abe:	370c      	adds	r7, #12
 8066ac0:	46bd      	mov	sp, r7
 8066ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8066ac6:	4770      	bx	lr

08066ac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8066ac8:	b580      	push	{r7, lr}
 8066aca:	b088      	sub	sp, #32
 8066acc:	af02      	add	r7, sp, #8
 8066ace:	60f8      	str	r0, [r7, #12]
 8066ad0:	607a      	str	r2, [r7, #4]
 8066ad2:	603b      	str	r3, [r7, #0]
 8066ad4:	460b      	mov	r3, r1
 8066ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8066ad8:	68fb      	ldr	r3, [r7, #12]
 8066ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8066adc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8066ade:	697b      	ldr	r3, [r7, #20]
 8066ae0:	2b08      	cmp	r3, #8
 8066ae2:	d006      	beq.n	8066af2 <I2C_MasterRequestWrite+0x2a>
 8066ae4:	697b      	ldr	r3, [r7, #20]
 8066ae6:	2b01      	cmp	r3, #1
 8066ae8:	d003      	beq.n	8066af2 <I2C_MasterRequestWrite+0x2a>
 8066aea:	697b      	ldr	r3, [r7, #20]
 8066aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8066af0:	d108      	bne.n	8066b04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066af2:	68fb      	ldr	r3, [r7, #12]
 8066af4:	681b      	ldr	r3, [r3, #0]
 8066af6:	681a      	ldr	r2, [r3, #0]
 8066af8:	68fb      	ldr	r3, [r7, #12]
 8066afa:	681b      	ldr	r3, [r3, #0]
 8066afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066b00:	601a      	str	r2, [r3, #0]
 8066b02:	e00b      	b.n	8066b1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8066b04:	68fb      	ldr	r3, [r7, #12]
 8066b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8066b08:	2b12      	cmp	r3, #18
 8066b0a:	d107      	bne.n	8066b1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066b0c:	68fb      	ldr	r3, [r7, #12]
 8066b0e:	681b      	ldr	r3, [r3, #0]
 8066b10:	681a      	ldr	r2, [r3, #0]
 8066b12:	68fb      	ldr	r3, [r7, #12]
 8066b14:	681b      	ldr	r3, [r3, #0]
 8066b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066b1c:	683b      	ldr	r3, [r7, #0]
 8066b1e:	9300      	str	r3, [sp, #0]
 8066b20:	687b      	ldr	r3, [r7, #4]
 8066b22:	2200      	movs	r2, #0
 8066b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066b28:	68f8      	ldr	r0, [r7, #12]
 8066b2a:	f000 fa9b 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 8066b2e:	4603      	mov	r3, r0
 8066b30:	2b00      	cmp	r3, #0
 8066b32:	d00d      	beq.n	8066b50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066b34:	68fb      	ldr	r3, [r7, #12]
 8066b36:	681b      	ldr	r3, [r3, #0]
 8066b38:	681b      	ldr	r3, [r3, #0]
 8066b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066b42:	d103      	bne.n	8066b4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066b44:	68fb      	ldr	r3, [r7, #12]
 8066b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066b4c:	2303      	movs	r3, #3
 8066b4e:	e035      	b.n	8066bbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8066b50:	68fb      	ldr	r3, [r7, #12]
 8066b52:	691b      	ldr	r3, [r3, #16]
 8066b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8066b58:	d108      	bne.n	8066b6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8066b5a:	897b      	ldrh	r3, [r7, #10]
 8066b5c:	b2db      	uxtb	r3, r3
 8066b5e:	461a      	mov	r2, r3
 8066b60:	68fb      	ldr	r3, [r7, #12]
 8066b62:	681b      	ldr	r3, [r3, #0]
 8066b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8066b68:	611a      	str	r2, [r3, #16]
 8066b6a:	e01b      	b.n	8066ba4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8066b6c:	897b      	ldrh	r3, [r7, #10]
 8066b6e:	11db      	asrs	r3, r3, #7
 8066b70:	b2db      	uxtb	r3, r3
 8066b72:	f003 0306 	and.w	r3, r3, #6
 8066b76:	b2db      	uxtb	r3, r3
 8066b78:	f063 030f 	orn	r3, r3, #15
 8066b7c:	b2da      	uxtb	r2, r3
 8066b7e:	68fb      	ldr	r3, [r7, #12]
 8066b80:	681b      	ldr	r3, [r3, #0]
 8066b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8066b84:	683b      	ldr	r3, [r7, #0]
 8066b86:	687a      	ldr	r2, [r7, #4]
 8066b88:	490e      	ldr	r1, [pc, #56]	; (8066bc4 <I2C_MasterRequestWrite+0xfc>)
 8066b8a:	68f8      	ldr	r0, [r7, #12]
 8066b8c:	f000 fac1 	bl	8067112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066b90:	4603      	mov	r3, r0
 8066b92:	2b00      	cmp	r3, #0
 8066b94:	d001      	beq.n	8066b9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8066b96:	2301      	movs	r3, #1
 8066b98:	e010      	b.n	8066bbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8066b9a:	897b      	ldrh	r3, [r7, #10]
 8066b9c:	b2da      	uxtb	r2, r3
 8066b9e:	68fb      	ldr	r3, [r7, #12]
 8066ba0:	681b      	ldr	r3, [r3, #0]
 8066ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066ba4:	683b      	ldr	r3, [r7, #0]
 8066ba6:	687a      	ldr	r2, [r7, #4]
 8066ba8:	4907      	ldr	r1, [pc, #28]	; (8066bc8 <I2C_MasterRequestWrite+0x100>)
 8066baa:	68f8      	ldr	r0, [r7, #12]
 8066bac:	f000 fab1 	bl	8067112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066bb0:	4603      	mov	r3, r0
 8066bb2:	2b00      	cmp	r3, #0
 8066bb4:	d001      	beq.n	8066bba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8066bb6:	2301      	movs	r3, #1
 8066bb8:	e000      	b.n	8066bbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8066bba:	2300      	movs	r3, #0
}
 8066bbc:	4618      	mov	r0, r3
 8066bbe:	3718      	adds	r7, #24
 8066bc0:	46bd      	mov	sp, r7
 8066bc2:	bd80      	pop	{r7, pc}
 8066bc4:	00010008 	.word	0x00010008
 8066bc8:	00010002 	.word	0x00010002

08066bcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8066bcc:	b580      	push	{r7, lr}
 8066bce:	b088      	sub	sp, #32
 8066bd0:	af02      	add	r7, sp, #8
 8066bd2:	60f8      	str	r0, [r7, #12]
 8066bd4:	607a      	str	r2, [r7, #4]
 8066bd6:	603b      	str	r3, [r7, #0]
 8066bd8:	460b      	mov	r3, r1
 8066bda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8066bdc:	68fb      	ldr	r3, [r7, #12]
 8066bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8066be0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066be2:	68fb      	ldr	r3, [r7, #12]
 8066be4:	681b      	ldr	r3, [r3, #0]
 8066be6:	681a      	ldr	r2, [r3, #0]
 8066be8:	68fb      	ldr	r3, [r7, #12]
 8066bea:	681b      	ldr	r3, [r3, #0]
 8066bec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8066bf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8066bf2:	697b      	ldr	r3, [r7, #20]
 8066bf4:	2b08      	cmp	r3, #8
 8066bf6:	d006      	beq.n	8066c06 <I2C_MasterRequestRead+0x3a>
 8066bf8:	697b      	ldr	r3, [r7, #20]
 8066bfa:	2b01      	cmp	r3, #1
 8066bfc:	d003      	beq.n	8066c06 <I2C_MasterRequestRead+0x3a>
 8066bfe:	697b      	ldr	r3, [r7, #20]
 8066c00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8066c04:	d108      	bne.n	8066c18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066c06:	68fb      	ldr	r3, [r7, #12]
 8066c08:	681b      	ldr	r3, [r3, #0]
 8066c0a:	681a      	ldr	r2, [r3, #0]
 8066c0c:	68fb      	ldr	r3, [r7, #12]
 8066c0e:	681b      	ldr	r3, [r3, #0]
 8066c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066c14:	601a      	str	r2, [r3, #0]
 8066c16:	e00b      	b.n	8066c30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8066c18:	68fb      	ldr	r3, [r7, #12]
 8066c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8066c1c:	2b11      	cmp	r3, #17
 8066c1e:	d107      	bne.n	8066c30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066c20:	68fb      	ldr	r3, [r7, #12]
 8066c22:	681b      	ldr	r3, [r3, #0]
 8066c24:	681a      	ldr	r2, [r3, #0]
 8066c26:	68fb      	ldr	r3, [r7, #12]
 8066c28:	681b      	ldr	r3, [r3, #0]
 8066c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066c2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066c30:	683b      	ldr	r3, [r7, #0]
 8066c32:	9300      	str	r3, [sp, #0]
 8066c34:	687b      	ldr	r3, [r7, #4]
 8066c36:	2200      	movs	r2, #0
 8066c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066c3c:	68f8      	ldr	r0, [r7, #12]
 8066c3e:	f000 fa11 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 8066c42:	4603      	mov	r3, r0
 8066c44:	2b00      	cmp	r3, #0
 8066c46:	d00d      	beq.n	8066c64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066c48:	68fb      	ldr	r3, [r7, #12]
 8066c4a:	681b      	ldr	r3, [r3, #0]
 8066c4c:	681b      	ldr	r3, [r3, #0]
 8066c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066c56:	d103      	bne.n	8066c60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066c58:	68fb      	ldr	r3, [r7, #12]
 8066c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066c60:	2303      	movs	r3, #3
 8066c62:	e079      	b.n	8066d58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8066c64:	68fb      	ldr	r3, [r7, #12]
 8066c66:	691b      	ldr	r3, [r3, #16]
 8066c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8066c6c:	d108      	bne.n	8066c80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8066c6e:	897b      	ldrh	r3, [r7, #10]
 8066c70:	b2db      	uxtb	r3, r3
 8066c72:	f043 0301 	orr.w	r3, r3, #1
 8066c76:	b2da      	uxtb	r2, r3
 8066c78:	68fb      	ldr	r3, [r7, #12]
 8066c7a:	681b      	ldr	r3, [r3, #0]
 8066c7c:	611a      	str	r2, [r3, #16]
 8066c7e:	e05f      	b.n	8066d40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8066c80:	897b      	ldrh	r3, [r7, #10]
 8066c82:	11db      	asrs	r3, r3, #7
 8066c84:	b2db      	uxtb	r3, r3
 8066c86:	f003 0306 	and.w	r3, r3, #6
 8066c8a:	b2db      	uxtb	r3, r3
 8066c8c:	f063 030f 	orn	r3, r3, #15
 8066c90:	b2da      	uxtb	r2, r3
 8066c92:	68fb      	ldr	r3, [r7, #12]
 8066c94:	681b      	ldr	r3, [r3, #0]
 8066c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8066c98:	683b      	ldr	r3, [r7, #0]
 8066c9a:	687a      	ldr	r2, [r7, #4]
 8066c9c:	4930      	ldr	r1, [pc, #192]	; (8066d60 <I2C_MasterRequestRead+0x194>)
 8066c9e:	68f8      	ldr	r0, [r7, #12]
 8066ca0:	f000 fa37 	bl	8067112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066ca4:	4603      	mov	r3, r0
 8066ca6:	2b00      	cmp	r3, #0
 8066ca8:	d001      	beq.n	8066cae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8066caa:	2301      	movs	r3, #1
 8066cac:	e054      	b.n	8066d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8066cae:	897b      	ldrh	r3, [r7, #10]
 8066cb0:	b2da      	uxtb	r2, r3
 8066cb2:	68fb      	ldr	r3, [r7, #12]
 8066cb4:	681b      	ldr	r3, [r3, #0]
 8066cb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066cb8:	683b      	ldr	r3, [r7, #0]
 8066cba:	687a      	ldr	r2, [r7, #4]
 8066cbc:	4929      	ldr	r1, [pc, #164]	; (8066d64 <I2C_MasterRequestRead+0x198>)
 8066cbe:	68f8      	ldr	r0, [r7, #12]
 8066cc0:	f000 fa27 	bl	8067112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066cc4:	4603      	mov	r3, r0
 8066cc6:	2b00      	cmp	r3, #0
 8066cc8:	d001      	beq.n	8066cce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8066cca:	2301      	movs	r3, #1
 8066ccc:	e044      	b.n	8066d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066cce:	2300      	movs	r3, #0
 8066cd0:	613b      	str	r3, [r7, #16]
 8066cd2:	68fb      	ldr	r3, [r7, #12]
 8066cd4:	681b      	ldr	r3, [r3, #0]
 8066cd6:	695b      	ldr	r3, [r3, #20]
 8066cd8:	613b      	str	r3, [r7, #16]
 8066cda:	68fb      	ldr	r3, [r7, #12]
 8066cdc:	681b      	ldr	r3, [r3, #0]
 8066cde:	699b      	ldr	r3, [r3, #24]
 8066ce0:	613b      	str	r3, [r7, #16]
 8066ce2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066ce4:	68fb      	ldr	r3, [r7, #12]
 8066ce6:	681b      	ldr	r3, [r3, #0]
 8066ce8:	681a      	ldr	r2, [r3, #0]
 8066cea:	68fb      	ldr	r3, [r7, #12]
 8066cec:	681b      	ldr	r3, [r3, #0]
 8066cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066cf2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066cf4:	683b      	ldr	r3, [r7, #0]
 8066cf6:	9300      	str	r3, [sp, #0]
 8066cf8:	687b      	ldr	r3, [r7, #4]
 8066cfa:	2200      	movs	r2, #0
 8066cfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066d00:	68f8      	ldr	r0, [r7, #12]
 8066d02:	f000 f9af 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 8066d06:	4603      	mov	r3, r0
 8066d08:	2b00      	cmp	r3, #0
 8066d0a:	d00d      	beq.n	8066d28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066d0c:	68fb      	ldr	r3, [r7, #12]
 8066d0e:	681b      	ldr	r3, [r3, #0]
 8066d10:	681b      	ldr	r3, [r3, #0]
 8066d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066d1a:	d103      	bne.n	8066d24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066d1c:	68fb      	ldr	r3, [r7, #12]
 8066d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066d22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8066d24:	2303      	movs	r3, #3
 8066d26:	e017      	b.n	8066d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8066d28:	897b      	ldrh	r3, [r7, #10]
 8066d2a:	11db      	asrs	r3, r3, #7
 8066d2c:	b2db      	uxtb	r3, r3
 8066d2e:	f003 0306 	and.w	r3, r3, #6
 8066d32:	b2db      	uxtb	r3, r3
 8066d34:	f063 030e 	orn	r3, r3, #14
 8066d38:	b2da      	uxtb	r2, r3
 8066d3a:	68fb      	ldr	r3, [r7, #12]
 8066d3c:	681b      	ldr	r3, [r3, #0]
 8066d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066d40:	683b      	ldr	r3, [r7, #0]
 8066d42:	687a      	ldr	r2, [r7, #4]
 8066d44:	4907      	ldr	r1, [pc, #28]	; (8066d64 <I2C_MasterRequestRead+0x198>)
 8066d46:	68f8      	ldr	r0, [r7, #12]
 8066d48:	f000 f9e3 	bl	8067112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066d4c:	4603      	mov	r3, r0
 8066d4e:	2b00      	cmp	r3, #0
 8066d50:	d001      	beq.n	8066d56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8066d52:	2301      	movs	r3, #1
 8066d54:	e000      	b.n	8066d58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8066d56:	2300      	movs	r3, #0
}
 8066d58:	4618      	mov	r0, r3
 8066d5a:	3718      	adds	r7, #24
 8066d5c:	46bd      	mov	sp, r7
 8066d5e:	bd80      	pop	{r7, pc}
 8066d60:	00010008 	.word	0x00010008
 8066d64:	00010002 	.word	0x00010002

08066d68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8066d68:	b580      	push	{r7, lr}
 8066d6a:	b088      	sub	sp, #32
 8066d6c:	af02      	add	r7, sp, #8
 8066d6e:	60f8      	str	r0, [r7, #12]
 8066d70:	4608      	mov	r0, r1
 8066d72:	4611      	mov	r1, r2
 8066d74:	461a      	mov	r2, r3
 8066d76:	4603      	mov	r3, r0
 8066d78:	817b      	strh	r3, [r7, #10]
 8066d7a:	460b      	mov	r3, r1
 8066d7c:	813b      	strh	r3, [r7, #8]
 8066d7e:	4613      	mov	r3, r2
 8066d80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066d82:	68fb      	ldr	r3, [r7, #12]
 8066d84:	681b      	ldr	r3, [r3, #0]
 8066d86:	681a      	ldr	r2, [r3, #0]
 8066d88:	68fb      	ldr	r3, [r7, #12]
 8066d8a:	681b      	ldr	r3, [r3, #0]
 8066d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066d94:	9300      	str	r3, [sp, #0]
 8066d96:	6a3b      	ldr	r3, [r7, #32]
 8066d98:	2200      	movs	r2, #0
 8066d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066d9e:	68f8      	ldr	r0, [r7, #12]
 8066da0:	f000 f960 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 8066da4:	4603      	mov	r3, r0
 8066da6:	2b00      	cmp	r3, #0
 8066da8:	d00d      	beq.n	8066dc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066daa:	68fb      	ldr	r3, [r7, #12]
 8066dac:	681b      	ldr	r3, [r3, #0]
 8066dae:	681b      	ldr	r3, [r3, #0]
 8066db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066db8:	d103      	bne.n	8066dc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066dba:	68fb      	ldr	r3, [r7, #12]
 8066dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066dc2:	2303      	movs	r3, #3
 8066dc4:	e05f      	b.n	8066e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8066dc6:	897b      	ldrh	r3, [r7, #10]
 8066dc8:	b2db      	uxtb	r3, r3
 8066dca:	461a      	mov	r2, r3
 8066dcc:	68fb      	ldr	r3, [r7, #12]
 8066dce:	681b      	ldr	r3, [r3, #0]
 8066dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8066dd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066dd8:	6a3a      	ldr	r2, [r7, #32]
 8066dda:	492d      	ldr	r1, [pc, #180]	; (8066e90 <I2C_RequestMemoryWrite+0x128>)
 8066ddc:	68f8      	ldr	r0, [r7, #12]
 8066dde:	f000 f998 	bl	8067112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066de2:	4603      	mov	r3, r0
 8066de4:	2b00      	cmp	r3, #0
 8066de6:	d001      	beq.n	8066dec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8066de8:	2301      	movs	r3, #1
 8066dea:	e04c      	b.n	8066e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066dec:	2300      	movs	r3, #0
 8066dee:	617b      	str	r3, [r7, #20]
 8066df0:	68fb      	ldr	r3, [r7, #12]
 8066df2:	681b      	ldr	r3, [r3, #0]
 8066df4:	695b      	ldr	r3, [r3, #20]
 8066df6:	617b      	str	r3, [r7, #20]
 8066df8:	68fb      	ldr	r3, [r7, #12]
 8066dfa:	681b      	ldr	r3, [r3, #0]
 8066dfc:	699b      	ldr	r3, [r3, #24]
 8066dfe:	617b      	str	r3, [r7, #20]
 8066e00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8066e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066e04:	6a39      	ldr	r1, [r7, #32]
 8066e06:	68f8      	ldr	r0, [r7, #12]
 8066e08:	f000 fa02 	bl	8067210 <I2C_WaitOnTXEFlagUntilTimeout>
 8066e0c:	4603      	mov	r3, r0
 8066e0e:	2b00      	cmp	r3, #0
 8066e10:	d00d      	beq.n	8066e2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066e12:	68fb      	ldr	r3, [r7, #12]
 8066e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8066e16:	2b04      	cmp	r3, #4
 8066e18:	d107      	bne.n	8066e2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066e1a:	68fb      	ldr	r3, [r7, #12]
 8066e1c:	681b      	ldr	r3, [r3, #0]
 8066e1e:	681a      	ldr	r2, [r3, #0]
 8066e20:	68fb      	ldr	r3, [r7, #12]
 8066e22:	681b      	ldr	r3, [r3, #0]
 8066e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066e28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8066e2a:	2301      	movs	r3, #1
 8066e2c:	e02b      	b.n	8066e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8066e2e:	88fb      	ldrh	r3, [r7, #6]
 8066e30:	2b01      	cmp	r3, #1
 8066e32:	d105      	bne.n	8066e40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8066e34:	893b      	ldrh	r3, [r7, #8]
 8066e36:	b2da      	uxtb	r2, r3
 8066e38:	68fb      	ldr	r3, [r7, #12]
 8066e3a:	681b      	ldr	r3, [r3, #0]
 8066e3c:	611a      	str	r2, [r3, #16]
 8066e3e:	e021      	b.n	8066e84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8066e40:	893b      	ldrh	r3, [r7, #8]
 8066e42:	0a1b      	lsrs	r3, r3, #8
 8066e44:	b29b      	uxth	r3, r3
 8066e46:	b2da      	uxtb	r2, r3
 8066e48:	68fb      	ldr	r3, [r7, #12]
 8066e4a:	681b      	ldr	r3, [r3, #0]
 8066e4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8066e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066e50:	6a39      	ldr	r1, [r7, #32]
 8066e52:	68f8      	ldr	r0, [r7, #12]
 8066e54:	f000 f9dc 	bl	8067210 <I2C_WaitOnTXEFlagUntilTimeout>
 8066e58:	4603      	mov	r3, r0
 8066e5a:	2b00      	cmp	r3, #0
 8066e5c:	d00d      	beq.n	8066e7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066e5e:	68fb      	ldr	r3, [r7, #12]
 8066e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8066e62:	2b04      	cmp	r3, #4
 8066e64:	d107      	bne.n	8066e76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066e66:	68fb      	ldr	r3, [r7, #12]
 8066e68:	681b      	ldr	r3, [r3, #0]
 8066e6a:	681a      	ldr	r2, [r3, #0]
 8066e6c:	68fb      	ldr	r3, [r7, #12]
 8066e6e:	681b      	ldr	r3, [r3, #0]
 8066e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066e74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8066e76:	2301      	movs	r3, #1
 8066e78:	e005      	b.n	8066e86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8066e7a:	893b      	ldrh	r3, [r7, #8]
 8066e7c:	b2da      	uxtb	r2, r3
 8066e7e:	68fb      	ldr	r3, [r7, #12]
 8066e80:	681b      	ldr	r3, [r3, #0]
 8066e82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8066e84:	2300      	movs	r3, #0
}
 8066e86:	4618      	mov	r0, r3
 8066e88:	3718      	adds	r7, #24
 8066e8a:	46bd      	mov	sp, r7
 8066e8c:	bd80      	pop	{r7, pc}
 8066e8e:	bf00      	nop
 8066e90:	00010002 	.word	0x00010002

08066e94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8066e94:	b580      	push	{r7, lr}
 8066e96:	b088      	sub	sp, #32
 8066e98:	af02      	add	r7, sp, #8
 8066e9a:	60f8      	str	r0, [r7, #12]
 8066e9c:	4608      	mov	r0, r1
 8066e9e:	4611      	mov	r1, r2
 8066ea0:	461a      	mov	r2, r3
 8066ea2:	4603      	mov	r3, r0
 8066ea4:	817b      	strh	r3, [r7, #10]
 8066ea6:	460b      	mov	r3, r1
 8066ea8:	813b      	strh	r3, [r7, #8]
 8066eaa:	4613      	mov	r3, r2
 8066eac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8066eae:	68fb      	ldr	r3, [r7, #12]
 8066eb0:	681b      	ldr	r3, [r3, #0]
 8066eb2:	681a      	ldr	r2, [r3, #0]
 8066eb4:	68fb      	ldr	r3, [r7, #12]
 8066eb6:	681b      	ldr	r3, [r3, #0]
 8066eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8066ebc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066ebe:	68fb      	ldr	r3, [r7, #12]
 8066ec0:	681b      	ldr	r3, [r3, #0]
 8066ec2:	681a      	ldr	r2, [r3, #0]
 8066ec4:	68fb      	ldr	r3, [r7, #12]
 8066ec6:	681b      	ldr	r3, [r3, #0]
 8066ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066ed0:	9300      	str	r3, [sp, #0]
 8066ed2:	6a3b      	ldr	r3, [r7, #32]
 8066ed4:	2200      	movs	r2, #0
 8066ed6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8066eda:	68f8      	ldr	r0, [r7, #12]
 8066edc:	f000 f8c2 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 8066ee0:	4603      	mov	r3, r0
 8066ee2:	2b00      	cmp	r3, #0
 8066ee4:	d00d      	beq.n	8066f02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8066ee6:	68fb      	ldr	r3, [r7, #12]
 8066ee8:	681b      	ldr	r3, [r3, #0]
 8066eea:	681b      	ldr	r3, [r3, #0]
 8066eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8066ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8066ef4:	d103      	bne.n	8066efe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8066ef6:	68fb      	ldr	r3, [r7, #12]
 8066ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8066efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8066efe:	2303      	movs	r3, #3
 8066f00:	e0aa      	b.n	8067058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8066f02:	897b      	ldrh	r3, [r7, #10]
 8066f04:	b2db      	uxtb	r3, r3
 8066f06:	461a      	mov	r2, r3
 8066f08:	68fb      	ldr	r3, [r7, #12]
 8066f0a:	681b      	ldr	r3, [r3, #0]
 8066f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8066f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8066f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066f14:	6a3a      	ldr	r2, [r7, #32]
 8066f16:	4952      	ldr	r1, [pc, #328]	; (8067060 <I2C_RequestMemoryRead+0x1cc>)
 8066f18:	68f8      	ldr	r0, [r7, #12]
 8066f1a:	f000 f8fa 	bl	8067112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8066f1e:	4603      	mov	r3, r0
 8066f20:	2b00      	cmp	r3, #0
 8066f22:	d001      	beq.n	8066f28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8066f24:	2301      	movs	r3, #1
 8066f26:	e097      	b.n	8067058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8066f28:	2300      	movs	r3, #0
 8066f2a:	617b      	str	r3, [r7, #20]
 8066f2c:	68fb      	ldr	r3, [r7, #12]
 8066f2e:	681b      	ldr	r3, [r3, #0]
 8066f30:	695b      	ldr	r3, [r3, #20]
 8066f32:	617b      	str	r3, [r7, #20]
 8066f34:	68fb      	ldr	r3, [r7, #12]
 8066f36:	681b      	ldr	r3, [r3, #0]
 8066f38:	699b      	ldr	r3, [r3, #24]
 8066f3a:	617b      	str	r3, [r7, #20]
 8066f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8066f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066f40:	6a39      	ldr	r1, [r7, #32]
 8066f42:	68f8      	ldr	r0, [r7, #12]
 8066f44:	f000 f964 	bl	8067210 <I2C_WaitOnTXEFlagUntilTimeout>
 8066f48:	4603      	mov	r3, r0
 8066f4a:	2b00      	cmp	r3, #0
 8066f4c:	d00d      	beq.n	8066f6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066f4e:	68fb      	ldr	r3, [r7, #12]
 8066f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8066f52:	2b04      	cmp	r3, #4
 8066f54:	d107      	bne.n	8066f66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066f56:	68fb      	ldr	r3, [r7, #12]
 8066f58:	681b      	ldr	r3, [r3, #0]
 8066f5a:	681a      	ldr	r2, [r3, #0]
 8066f5c:	68fb      	ldr	r3, [r7, #12]
 8066f5e:	681b      	ldr	r3, [r3, #0]
 8066f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8066f66:	2301      	movs	r3, #1
 8066f68:	e076      	b.n	8067058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8066f6a:	88fb      	ldrh	r3, [r7, #6]
 8066f6c:	2b01      	cmp	r3, #1
 8066f6e:	d105      	bne.n	8066f7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8066f70:	893b      	ldrh	r3, [r7, #8]
 8066f72:	b2da      	uxtb	r2, r3
 8066f74:	68fb      	ldr	r3, [r7, #12]
 8066f76:	681b      	ldr	r3, [r3, #0]
 8066f78:	611a      	str	r2, [r3, #16]
 8066f7a:	e021      	b.n	8066fc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8066f7c:	893b      	ldrh	r3, [r7, #8]
 8066f7e:	0a1b      	lsrs	r3, r3, #8
 8066f80:	b29b      	uxth	r3, r3
 8066f82:	b2da      	uxtb	r2, r3
 8066f84:	68fb      	ldr	r3, [r7, #12]
 8066f86:	681b      	ldr	r3, [r3, #0]
 8066f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8066f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066f8c:	6a39      	ldr	r1, [r7, #32]
 8066f8e:	68f8      	ldr	r0, [r7, #12]
 8066f90:	f000 f93e 	bl	8067210 <I2C_WaitOnTXEFlagUntilTimeout>
 8066f94:	4603      	mov	r3, r0
 8066f96:	2b00      	cmp	r3, #0
 8066f98:	d00d      	beq.n	8066fb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066f9a:	68fb      	ldr	r3, [r7, #12]
 8066f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8066f9e:	2b04      	cmp	r3, #4
 8066fa0:	d107      	bne.n	8066fb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066fa2:	68fb      	ldr	r3, [r7, #12]
 8066fa4:	681b      	ldr	r3, [r3, #0]
 8066fa6:	681a      	ldr	r2, [r3, #0]
 8066fa8:	68fb      	ldr	r3, [r7, #12]
 8066faa:	681b      	ldr	r3, [r3, #0]
 8066fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8066fb2:	2301      	movs	r3, #1
 8066fb4:	e050      	b.n	8067058 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8066fb6:	893b      	ldrh	r3, [r7, #8]
 8066fb8:	b2da      	uxtb	r2, r3
 8066fba:	68fb      	ldr	r3, [r7, #12]
 8066fbc:	681b      	ldr	r3, [r3, #0]
 8066fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8066fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8066fc2:	6a39      	ldr	r1, [r7, #32]
 8066fc4:	68f8      	ldr	r0, [r7, #12]
 8066fc6:	f000 f923 	bl	8067210 <I2C_WaitOnTXEFlagUntilTimeout>
 8066fca:	4603      	mov	r3, r0
 8066fcc:	2b00      	cmp	r3, #0
 8066fce:	d00d      	beq.n	8066fec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8066fd0:	68fb      	ldr	r3, [r7, #12]
 8066fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8066fd4:	2b04      	cmp	r3, #4
 8066fd6:	d107      	bne.n	8066fe8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8066fd8:	68fb      	ldr	r3, [r7, #12]
 8066fda:	681b      	ldr	r3, [r3, #0]
 8066fdc:	681a      	ldr	r2, [r3, #0]
 8066fde:	68fb      	ldr	r3, [r7, #12]
 8066fe0:	681b      	ldr	r3, [r3, #0]
 8066fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8066fe6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8066fe8:	2301      	movs	r3, #1
 8066fea:	e035      	b.n	8067058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8066fec:	68fb      	ldr	r3, [r7, #12]
 8066fee:	681b      	ldr	r3, [r3, #0]
 8066ff0:	681a      	ldr	r2, [r3, #0]
 8066ff2:	68fb      	ldr	r3, [r7, #12]
 8066ff4:	681b      	ldr	r3, [r3, #0]
 8066ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8066ffa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8066ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8066ffe:	9300      	str	r3, [sp, #0]
 8067000:	6a3b      	ldr	r3, [r7, #32]
 8067002:	2200      	movs	r2, #0
 8067004:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8067008:	68f8      	ldr	r0, [r7, #12]
 806700a:	f000 f82b 	bl	8067064 <I2C_WaitOnFlagUntilTimeout>
 806700e:	4603      	mov	r3, r0
 8067010:	2b00      	cmp	r3, #0
 8067012:	d00d      	beq.n	8067030 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8067014:	68fb      	ldr	r3, [r7, #12]
 8067016:	681b      	ldr	r3, [r3, #0]
 8067018:	681b      	ldr	r3, [r3, #0]
 806701a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 806701e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8067022:	d103      	bne.n	806702c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8067024:	68fb      	ldr	r3, [r7, #12]
 8067026:	f44f 7200 	mov.w	r2, #512	; 0x200
 806702a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 806702c:	2303      	movs	r3, #3
 806702e:	e013      	b.n	8067058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8067030:	897b      	ldrh	r3, [r7, #10]
 8067032:	b2db      	uxtb	r3, r3
 8067034:	f043 0301 	orr.w	r3, r3, #1
 8067038:	b2da      	uxtb	r2, r3
 806703a:	68fb      	ldr	r3, [r7, #12]
 806703c:	681b      	ldr	r3, [r3, #0]
 806703e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8067040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8067042:	6a3a      	ldr	r2, [r7, #32]
 8067044:	4906      	ldr	r1, [pc, #24]	; (8067060 <I2C_RequestMemoryRead+0x1cc>)
 8067046:	68f8      	ldr	r0, [r7, #12]
 8067048:	f000 f863 	bl	8067112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 806704c:	4603      	mov	r3, r0
 806704e:	2b00      	cmp	r3, #0
 8067050:	d001      	beq.n	8067056 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8067052:	2301      	movs	r3, #1
 8067054:	e000      	b.n	8067058 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8067056:	2300      	movs	r3, #0
}
 8067058:	4618      	mov	r0, r3
 806705a:	3718      	adds	r7, #24
 806705c:	46bd      	mov	sp, r7
 806705e:	bd80      	pop	{r7, pc}
 8067060:	00010002 	.word	0x00010002

08067064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8067064:	b580      	push	{r7, lr}
 8067066:	b084      	sub	sp, #16
 8067068:	af00      	add	r7, sp, #0
 806706a:	60f8      	str	r0, [r7, #12]
 806706c:	60b9      	str	r1, [r7, #8]
 806706e:	603b      	str	r3, [r7, #0]
 8067070:	4613      	mov	r3, r2
 8067072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8067074:	e025      	b.n	80670c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8067076:	683b      	ldr	r3, [r7, #0]
 8067078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806707c:	d021      	beq.n	80670c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 806707e:	f7fc fc1f 	bl	80638c0 <HAL_GetTick>
 8067082:	4602      	mov	r2, r0
 8067084:	69bb      	ldr	r3, [r7, #24]
 8067086:	1ad3      	subs	r3, r2, r3
 8067088:	683a      	ldr	r2, [r7, #0]
 806708a:	429a      	cmp	r2, r3
 806708c:	d302      	bcc.n	8067094 <I2C_WaitOnFlagUntilTimeout+0x30>
 806708e:	683b      	ldr	r3, [r7, #0]
 8067090:	2b00      	cmp	r3, #0
 8067092:	d116      	bne.n	80670c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8067094:	68fb      	ldr	r3, [r7, #12]
 8067096:	2200      	movs	r2, #0
 8067098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 806709a:	68fb      	ldr	r3, [r7, #12]
 806709c:	2220      	movs	r2, #32
 806709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80670a2:	68fb      	ldr	r3, [r7, #12]
 80670a4:	2200      	movs	r2, #0
 80670a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80670aa:	68fb      	ldr	r3, [r7, #12]
 80670ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80670ae:	f043 0220 	orr.w	r2, r3, #32
 80670b2:	68fb      	ldr	r3, [r7, #12]
 80670b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80670b6:	68fb      	ldr	r3, [r7, #12]
 80670b8:	2200      	movs	r2, #0
 80670ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80670be:	2301      	movs	r3, #1
 80670c0:	e023      	b.n	806710a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80670c2:	68bb      	ldr	r3, [r7, #8]
 80670c4:	0c1b      	lsrs	r3, r3, #16
 80670c6:	b2db      	uxtb	r3, r3
 80670c8:	2b01      	cmp	r3, #1
 80670ca:	d10d      	bne.n	80670e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80670cc:	68fb      	ldr	r3, [r7, #12]
 80670ce:	681b      	ldr	r3, [r3, #0]
 80670d0:	695b      	ldr	r3, [r3, #20]
 80670d2:	43da      	mvns	r2, r3
 80670d4:	68bb      	ldr	r3, [r7, #8]
 80670d6:	4013      	ands	r3, r2
 80670d8:	b29b      	uxth	r3, r3
 80670da:	2b00      	cmp	r3, #0
 80670dc:	bf0c      	ite	eq
 80670de:	2301      	moveq	r3, #1
 80670e0:	2300      	movne	r3, #0
 80670e2:	b2db      	uxtb	r3, r3
 80670e4:	461a      	mov	r2, r3
 80670e6:	e00c      	b.n	8067102 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80670e8:	68fb      	ldr	r3, [r7, #12]
 80670ea:	681b      	ldr	r3, [r3, #0]
 80670ec:	699b      	ldr	r3, [r3, #24]
 80670ee:	43da      	mvns	r2, r3
 80670f0:	68bb      	ldr	r3, [r7, #8]
 80670f2:	4013      	ands	r3, r2
 80670f4:	b29b      	uxth	r3, r3
 80670f6:	2b00      	cmp	r3, #0
 80670f8:	bf0c      	ite	eq
 80670fa:	2301      	moveq	r3, #1
 80670fc:	2300      	movne	r3, #0
 80670fe:	b2db      	uxtb	r3, r3
 8067100:	461a      	mov	r2, r3
 8067102:	79fb      	ldrb	r3, [r7, #7]
 8067104:	429a      	cmp	r2, r3
 8067106:	d0b6      	beq.n	8067076 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8067108:	2300      	movs	r3, #0
}
 806710a:	4618      	mov	r0, r3
 806710c:	3710      	adds	r7, #16
 806710e:	46bd      	mov	sp, r7
 8067110:	bd80      	pop	{r7, pc}

08067112 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8067112:	b580      	push	{r7, lr}
 8067114:	b084      	sub	sp, #16
 8067116:	af00      	add	r7, sp, #0
 8067118:	60f8      	str	r0, [r7, #12]
 806711a:	60b9      	str	r1, [r7, #8]
 806711c:	607a      	str	r2, [r7, #4]
 806711e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8067120:	e051      	b.n	80671c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8067122:	68fb      	ldr	r3, [r7, #12]
 8067124:	681b      	ldr	r3, [r3, #0]
 8067126:	695b      	ldr	r3, [r3, #20]
 8067128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 806712c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8067130:	d123      	bne.n	806717a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8067132:	68fb      	ldr	r3, [r7, #12]
 8067134:	681b      	ldr	r3, [r3, #0]
 8067136:	681a      	ldr	r2, [r3, #0]
 8067138:	68fb      	ldr	r3, [r7, #12]
 806713a:	681b      	ldr	r3, [r3, #0]
 806713c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8067140:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8067142:	68fb      	ldr	r3, [r7, #12]
 8067144:	681b      	ldr	r3, [r3, #0]
 8067146:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 806714a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 806714c:	68fb      	ldr	r3, [r7, #12]
 806714e:	2200      	movs	r2, #0
 8067150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8067152:	68fb      	ldr	r3, [r7, #12]
 8067154:	2220      	movs	r2, #32
 8067156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 806715a:	68fb      	ldr	r3, [r7, #12]
 806715c:	2200      	movs	r2, #0
 806715e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8067162:	68fb      	ldr	r3, [r7, #12]
 8067164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067166:	f043 0204 	orr.w	r2, r3, #4
 806716a:	68fb      	ldr	r3, [r7, #12]
 806716c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 806716e:	68fb      	ldr	r3, [r7, #12]
 8067170:	2200      	movs	r2, #0
 8067172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8067176:	2301      	movs	r3, #1
 8067178:	e046      	b.n	8067208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 806717a:	687b      	ldr	r3, [r7, #4]
 806717c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8067180:	d021      	beq.n	80671c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8067182:	f7fc fb9d 	bl	80638c0 <HAL_GetTick>
 8067186:	4602      	mov	r2, r0
 8067188:	683b      	ldr	r3, [r7, #0]
 806718a:	1ad3      	subs	r3, r2, r3
 806718c:	687a      	ldr	r2, [r7, #4]
 806718e:	429a      	cmp	r2, r3
 8067190:	d302      	bcc.n	8067198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8067192:	687b      	ldr	r3, [r7, #4]
 8067194:	2b00      	cmp	r3, #0
 8067196:	d116      	bne.n	80671c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8067198:	68fb      	ldr	r3, [r7, #12]
 806719a:	2200      	movs	r2, #0
 806719c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 806719e:	68fb      	ldr	r3, [r7, #12]
 80671a0:	2220      	movs	r2, #32
 80671a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80671a6:	68fb      	ldr	r3, [r7, #12]
 80671a8:	2200      	movs	r2, #0
 80671aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80671ae:	68fb      	ldr	r3, [r7, #12]
 80671b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80671b2:	f043 0220 	orr.w	r2, r3, #32
 80671b6:	68fb      	ldr	r3, [r7, #12]
 80671b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80671ba:	68fb      	ldr	r3, [r7, #12]
 80671bc:	2200      	movs	r2, #0
 80671be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80671c2:	2301      	movs	r3, #1
 80671c4:	e020      	b.n	8067208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80671c6:	68bb      	ldr	r3, [r7, #8]
 80671c8:	0c1b      	lsrs	r3, r3, #16
 80671ca:	b2db      	uxtb	r3, r3
 80671cc:	2b01      	cmp	r3, #1
 80671ce:	d10c      	bne.n	80671ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80671d0:	68fb      	ldr	r3, [r7, #12]
 80671d2:	681b      	ldr	r3, [r3, #0]
 80671d4:	695b      	ldr	r3, [r3, #20]
 80671d6:	43da      	mvns	r2, r3
 80671d8:	68bb      	ldr	r3, [r7, #8]
 80671da:	4013      	ands	r3, r2
 80671dc:	b29b      	uxth	r3, r3
 80671de:	2b00      	cmp	r3, #0
 80671e0:	bf14      	ite	ne
 80671e2:	2301      	movne	r3, #1
 80671e4:	2300      	moveq	r3, #0
 80671e6:	b2db      	uxtb	r3, r3
 80671e8:	e00b      	b.n	8067202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80671ea:	68fb      	ldr	r3, [r7, #12]
 80671ec:	681b      	ldr	r3, [r3, #0]
 80671ee:	699b      	ldr	r3, [r3, #24]
 80671f0:	43da      	mvns	r2, r3
 80671f2:	68bb      	ldr	r3, [r7, #8]
 80671f4:	4013      	ands	r3, r2
 80671f6:	b29b      	uxth	r3, r3
 80671f8:	2b00      	cmp	r3, #0
 80671fa:	bf14      	ite	ne
 80671fc:	2301      	movne	r3, #1
 80671fe:	2300      	moveq	r3, #0
 8067200:	b2db      	uxtb	r3, r3
 8067202:	2b00      	cmp	r3, #0
 8067204:	d18d      	bne.n	8067122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8067206:	2300      	movs	r3, #0
}
 8067208:	4618      	mov	r0, r3
 806720a:	3710      	adds	r7, #16
 806720c:	46bd      	mov	sp, r7
 806720e:	bd80      	pop	{r7, pc}

08067210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8067210:	b580      	push	{r7, lr}
 8067212:	b084      	sub	sp, #16
 8067214:	af00      	add	r7, sp, #0
 8067216:	60f8      	str	r0, [r7, #12]
 8067218:	60b9      	str	r1, [r7, #8]
 806721a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 806721c:	e02d      	b.n	806727a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 806721e:	68f8      	ldr	r0, [r7, #12]
 8067220:	f000 f8ce 	bl	80673c0 <I2C_IsAcknowledgeFailed>
 8067224:	4603      	mov	r3, r0
 8067226:	2b00      	cmp	r3, #0
 8067228:	d001      	beq.n	806722e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 806722a:	2301      	movs	r3, #1
 806722c:	e02d      	b.n	806728a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 806722e:	68bb      	ldr	r3, [r7, #8]
 8067230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8067234:	d021      	beq.n	806727a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8067236:	f7fc fb43 	bl	80638c0 <HAL_GetTick>
 806723a:	4602      	mov	r2, r0
 806723c:	687b      	ldr	r3, [r7, #4]
 806723e:	1ad3      	subs	r3, r2, r3
 8067240:	68ba      	ldr	r2, [r7, #8]
 8067242:	429a      	cmp	r2, r3
 8067244:	d302      	bcc.n	806724c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8067246:	68bb      	ldr	r3, [r7, #8]
 8067248:	2b00      	cmp	r3, #0
 806724a:	d116      	bne.n	806727a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 806724c:	68fb      	ldr	r3, [r7, #12]
 806724e:	2200      	movs	r2, #0
 8067250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8067252:	68fb      	ldr	r3, [r7, #12]
 8067254:	2220      	movs	r2, #32
 8067256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 806725a:	68fb      	ldr	r3, [r7, #12]
 806725c:	2200      	movs	r2, #0
 806725e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8067262:	68fb      	ldr	r3, [r7, #12]
 8067264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067266:	f043 0220 	orr.w	r2, r3, #32
 806726a:	68fb      	ldr	r3, [r7, #12]
 806726c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 806726e:	68fb      	ldr	r3, [r7, #12]
 8067270:	2200      	movs	r2, #0
 8067272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8067276:	2301      	movs	r3, #1
 8067278:	e007      	b.n	806728a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 806727a:	68fb      	ldr	r3, [r7, #12]
 806727c:	681b      	ldr	r3, [r3, #0]
 806727e:	695b      	ldr	r3, [r3, #20]
 8067280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8067284:	2b80      	cmp	r3, #128	; 0x80
 8067286:	d1ca      	bne.n	806721e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8067288:	2300      	movs	r3, #0
}
 806728a:	4618      	mov	r0, r3
 806728c:	3710      	adds	r7, #16
 806728e:	46bd      	mov	sp, r7
 8067290:	bd80      	pop	{r7, pc}

08067292 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8067292:	b580      	push	{r7, lr}
 8067294:	b084      	sub	sp, #16
 8067296:	af00      	add	r7, sp, #0
 8067298:	60f8      	str	r0, [r7, #12]
 806729a:	60b9      	str	r1, [r7, #8]
 806729c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 806729e:	e02d      	b.n	80672fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80672a0:	68f8      	ldr	r0, [r7, #12]
 80672a2:	f000 f88d 	bl	80673c0 <I2C_IsAcknowledgeFailed>
 80672a6:	4603      	mov	r3, r0
 80672a8:	2b00      	cmp	r3, #0
 80672aa:	d001      	beq.n	80672b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80672ac:	2301      	movs	r3, #1
 80672ae:	e02d      	b.n	806730c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80672b0:	68bb      	ldr	r3, [r7, #8]
 80672b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80672b6:	d021      	beq.n	80672fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80672b8:	f7fc fb02 	bl	80638c0 <HAL_GetTick>
 80672bc:	4602      	mov	r2, r0
 80672be:	687b      	ldr	r3, [r7, #4]
 80672c0:	1ad3      	subs	r3, r2, r3
 80672c2:	68ba      	ldr	r2, [r7, #8]
 80672c4:	429a      	cmp	r2, r3
 80672c6:	d302      	bcc.n	80672ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80672c8:	68bb      	ldr	r3, [r7, #8]
 80672ca:	2b00      	cmp	r3, #0
 80672cc:	d116      	bne.n	80672fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80672ce:	68fb      	ldr	r3, [r7, #12]
 80672d0:	2200      	movs	r2, #0
 80672d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80672d4:	68fb      	ldr	r3, [r7, #12]
 80672d6:	2220      	movs	r2, #32
 80672d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80672dc:	68fb      	ldr	r3, [r7, #12]
 80672de:	2200      	movs	r2, #0
 80672e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80672e4:	68fb      	ldr	r3, [r7, #12]
 80672e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80672e8:	f043 0220 	orr.w	r2, r3, #32
 80672ec:	68fb      	ldr	r3, [r7, #12]
 80672ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80672f0:	68fb      	ldr	r3, [r7, #12]
 80672f2:	2200      	movs	r2, #0
 80672f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80672f8:	2301      	movs	r3, #1
 80672fa:	e007      	b.n	806730c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80672fc:	68fb      	ldr	r3, [r7, #12]
 80672fe:	681b      	ldr	r3, [r3, #0]
 8067300:	695b      	ldr	r3, [r3, #20]
 8067302:	f003 0304 	and.w	r3, r3, #4
 8067306:	2b04      	cmp	r3, #4
 8067308:	d1ca      	bne.n	80672a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 806730a:	2300      	movs	r3, #0
}
 806730c:	4618      	mov	r0, r3
 806730e:	3710      	adds	r7, #16
 8067310:	46bd      	mov	sp, r7
 8067312:	bd80      	pop	{r7, pc}

08067314 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8067314:	b580      	push	{r7, lr}
 8067316:	b084      	sub	sp, #16
 8067318:	af00      	add	r7, sp, #0
 806731a:	60f8      	str	r0, [r7, #12]
 806731c:	60b9      	str	r1, [r7, #8]
 806731e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8067320:	e042      	b.n	80673a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8067322:	68fb      	ldr	r3, [r7, #12]
 8067324:	681b      	ldr	r3, [r3, #0]
 8067326:	695b      	ldr	r3, [r3, #20]
 8067328:	f003 0310 	and.w	r3, r3, #16
 806732c:	2b10      	cmp	r3, #16
 806732e:	d119      	bne.n	8067364 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8067330:	68fb      	ldr	r3, [r7, #12]
 8067332:	681b      	ldr	r3, [r3, #0]
 8067334:	f06f 0210 	mvn.w	r2, #16
 8067338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 806733a:	68fb      	ldr	r3, [r7, #12]
 806733c:	2200      	movs	r2, #0
 806733e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8067340:	68fb      	ldr	r3, [r7, #12]
 8067342:	2220      	movs	r2, #32
 8067344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8067348:	68fb      	ldr	r3, [r7, #12]
 806734a:	2200      	movs	r2, #0
 806734c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8067350:	68fb      	ldr	r3, [r7, #12]
 8067352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8067354:	68fb      	ldr	r3, [r7, #12]
 8067356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8067358:	68fb      	ldr	r3, [r7, #12]
 806735a:	2200      	movs	r2, #0
 806735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8067360:	2301      	movs	r3, #1
 8067362:	e029      	b.n	80673b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8067364:	f7fc faac 	bl	80638c0 <HAL_GetTick>
 8067368:	4602      	mov	r2, r0
 806736a:	687b      	ldr	r3, [r7, #4]
 806736c:	1ad3      	subs	r3, r2, r3
 806736e:	68ba      	ldr	r2, [r7, #8]
 8067370:	429a      	cmp	r2, r3
 8067372:	d302      	bcc.n	806737a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8067374:	68bb      	ldr	r3, [r7, #8]
 8067376:	2b00      	cmp	r3, #0
 8067378:	d116      	bne.n	80673a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 806737a:	68fb      	ldr	r3, [r7, #12]
 806737c:	2200      	movs	r2, #0
 806737e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8067380:	68fb      	ldr	r3, [r7, #12]
 8067382:	2220      	movs	r2, #32
 8067384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8067388:	68fb      	ldr	r3, [r7, #12]
 806738a:	2200      	movs	r2, #0
 806738c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8067390:	68fb      	ldr	r3, [r7, #12]
 8067392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067394:	f043 0220 	orr.w	r2, r3, #32
 8067398:	68fb      	ldr	r3, [r7, #12]
 806739a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 806739c:	68fb      	ldr	r3, [r7, #12]
 806739e:	2200      	movs	r2, #0
 80673a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80673a4:	2301      	movs	r3, #1
 80673a6:	e007      	b.n	80673b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80673a8:	68fb      	ldr	r3, [r7, #12]
 80673aa:	681b      	ldr	r3, [r3, #0]
 80673ac:	695b      	ldr	r3, [r3, #20]
 80673ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80673b2:	2b40      	cmp	r3, #64	; 0x40
 80673b4:	d1b5      	bne.n	8067322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80673b6:	2300      	movs	r3, #0
}
 80673b8:	4618      	mov	r0, r3
 80673ba:	3710      	adds	r7, #16
 80673bc:	46bd      	mov	sp, r7
 80673be:	bd80      	pop	{r7, pc}

080673c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80673c0:	b480      	push	{r7}
 80673c2:	b083      	sub	sp, #12
 80673c4:	af00      	add	r7, sp, #0
 80673c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80673c8:	687b      	ldr	r3, [r7, #4]
 80673ca:	681b      	ldr	r3, [r3, #0]
 80673cc:	695b      	ldr	r3, [r3, #20]
 80673ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80673d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80673d6:	d11b      	bne.n	8067410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80673d8:	687b      	ldr	r3, [r7, #4]
 80673da:	681b      	ldr	r3, [r3, #0]
 80673dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80673e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80673e2:	687b      	ldr	r3, [r7, #4]
 80673e4:	2200      	movs	r2, #0
 80673e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80673e8:	687b      	ldr	r3, [r7, #4]
 80673ea:	2220      	movs	r2, #32
 80673ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80673f0:	687b      	ldr	r3, [r7, #4]
 80673f2:	2200      	movs	r2, #0
 80673f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80673f8:	687b      	ldr	r3, [r7, #4]
 80673fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80673fc:	f043 0204 	orr.w	r2, r3, #4
 8067400:	687b      	ldr	r3, [r7, #4]
 8067402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8067404:	687b      	ldr	r3, [r7, #4]
 8067406:	2200      	movs	r2, #0
 8067408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 806740c:	2301      	movs	r3, #1
 806740e:	e000      	b.n	8067412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8067410:	2300      	movs	r3, #0
}
 8067412:	4618      	mov	r0, r3
 8067414:	370c      	adds	r7, #12
 8067416:	46bd      	mov	sp, r7
 8067418:	f85d 7b04 	ldr.w	r7, [sp], #4
 806741c:	4770      	bx	lr
	...

08067420 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8067420:	b480      	push	{r7}
 8067422:	b083      	sub	sp, #12
 8067424:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8067426:	4b06      	ldr	r3, [pc, #24]	; (8067440 <HAL_PWR_EnableBkUpAccess+0x20>)
 8067428:	2201      	movs	r2, #1
 806742a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 806742c:	4b05      	ldr	r3, [pc, #20]	; (8067444 <HAL_PWR_EnableBkUpAccess+0x24>)
 806742e:	681b      	ldr	r3, [r3, #0]
 8067430:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8067432:	687b      	ldr	r3, [r7, #4]
}
 8067434:	bf00      	nop
 8067436:	370c      	adds	r7, #12
 8067438:	46bd      	mov	sp, r7
 806743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806743e:	4770      	bx	lr
 8067440:	420e0020 	.word	0x420e0020
 8067444:	40007000 	.word	0x40007000

08067448 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8067448:	b480      	push	{r7}
 806744a:	b083      	sub	sp, #12
 806744c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 806744e:	4b06      	ldr	r3, [pc, #24]	; (8067468 <HAL_PWR_DisableBkUpAccess+0x20>)
 8067450:	2200      	movs	r2, #0
 8067452:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8067454:	4b05      	ldr	r3, [pc, #20]	; (806746c <HAL_PWR_DisableBkUpAccess+0x24>)
 8067456:	681b      	ldr	r3, [r3, #0]
 8067458:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 806745a:	687b      	ldr	r3, [r7, #4]
}
 806745c:	bf00      	nop
 806745e:	370c      	adds	r7, #12
 8067460:	46bd      	mov	sp, r7
 8067462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067466:	4770      	bx	lr
 8067468:	420e0020 	.word	0x420e0020
 806746c:	40007000 	.word	0x40007000

08067470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8067470:	b580      	push	{r7, lr}
 8067472:	b086      	sub	sp, #24
 8067474:	af00      	add	r7, sp, #0
 8067476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8067478:	687b      	ldr	r3, [r7, #4]
 806747a:	2b00      	cmp	r3, #0
 806747c:	d101      	bne.n	8067482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 806747e:	2301      	movs	r3, #1
 8067480:	e316      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8067482:	687b      	ldr	r3, [r7, #4]
 8067484:	681b      	ldr	r3, [r3, #0]
 8067486:	2b0f      	cmp	r3, #15
 8067488:	d903      	bls.n	8067492 <HAL_RCC_OscConfig+0x22>
 806748a:	21e8      	movs	r1, #232	; 0xe8
 806748c:	48a3      	ldr	r0, [pc, #652]	; (806771c <HAL_RCC_OscConfig+0x2ac>)
 806748e:	f7fb fd4c 	bl	8062f2a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8067492:	687b      	ldr	r3, [r7, #4]
 8067494:	681b      	ldr	r3, [r3, #0]
 8067496:	f003 0301 	and.w	r3, r3, #1
 806749a:	2b00      	cmp	r3, #0
 806749c:	f000 8088 	beq.w	80675b0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80674a0:	687b      	ldr	r3, [r7, #4]
 80674a2:	685b      	ldr	r3, [r3, #4]
 80674a4:	2b00      	cmp	r3, #0
 80674a6:	d00d      	beq.n	80674c4 <HAL_RCC_OscConfig+0x54>
 80674a8:	687b      	ldr	r3, [r7, #4]
 80674aa:	685b      	ldr	r3, [r3, #4]
 80674ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80674b0:	d008      	beq.n	80674c4 <HAL_RCC_OscConfig+0x54>
 80674b2:	687b      	ldr	r3, [r7, #4]
 80674b4:	685b      	ldr	r3, [r3, #4]
 80674b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80674ba:	d003      	beq.n	80674c4 <HAL_RCC_OscConfig+0x54>
 80674bc:	21ed      	movs	r1, #237	; 0xed
 80674be:	4897      	ldr	r0, [pc, #604]	; (806771c <HAL_RCC_OscConfig+0x2ac>)
 80674c0:	f7fb fd33 	bl	8062f2a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80674c4:	4b96      	ldr	r3, [pc, #600]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 80674c6:	689b      	ldr	r3, [r3, #8]
 80674c8:	f003 030c 	and.w	r3, r3, #12
 80674cc:	2b04      	cmp	r3, #4
 80674ce:	d00c      	beq.n	80674ea <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80674d0:	4b93      	ldr	r3, [pc, #588]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 80674d2:	689b      	ldr	r3, [r3, #8]
 80674d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80674d8:	2b08      	cmp	r3, #8
 80674da:	d112      	bne.n	8067502 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80674dc:	4b90      	ldr	r3, [pc, #576]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 80674de:	685b      	ldr	r3, [r3, #4]
 80674e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80674e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80674e8:	d10b      	bne.n	8067502 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80674ea:	4b8d      	ldr	r3, [pc, #564]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 80674ec:	681b      	ldr	r3, [r3, #0]
 80674ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80674f2:	2b00      	cmp	r3, #0
 80674f4:	d05b      	beq.n	80675ae <HAL_RCC_OscConfig+0x13e>
 80674f6:	687b      	ldr	r3, [r7, #4]
 80674f8:	685b      	ldr	r3, [r3, #4]
 80674fa:	2b00      	cmp	r3, #0
 80674fc:	d157      	bne.n	80675ae <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80674fe:	2301      	movs	r3, #1
 8067500:	e2d6      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8067502:	687b      	ldr	r3, [r7, #4]
 8067504:	685b      	ldr	r3, [r3, #4]
 8067506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 806750a:	d106      	bne.n	806751a <HAL_RCC_OscConfig+0xaa>
 806750c:	4b84      	ldr	r3, [pc, #528]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 806750e:	681b      	ldr	r3, [r3, #0]
 8067510:	4a83      	ldr	r2, [pc, #524]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8067516:	6013      	str	r3, [r2, #0]
 8067518:	e01d      	b.n	8067556 <HAL_RCC_OscConfig+0xe6>
 806751a:	687b      	ldr	r3, [r7, #4]
 806751c:	685b      	ldr	r3, [r3, #4]
 806751e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8067522:	d10c      	bne.n	806753e <HAL_RCC_OscConfig+0xce>
 8067524:	4b7e      	ldr	r3, [pc, #504]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067526:	681b      	ldr	r3, [r3, #0]
 8067528:	4a7d      	ldr	r2, [pc, #500]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 806752a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 806752e:	6013      	str	r3, [r2, #0]
 8067530:	4b7b      	ldr	r3, [pc, #492]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067532:	681b      	ldr	r3, [r3, #0]
 8067534:	4a7a      	ldr	r2, [pc, #488]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 806753a:	6013      	str	r3, [r2, #0]
 806753c:	e00b      	b.n	8067556 <HAL_RCC_OscConfig+0xe6>
 806753e:	4b78      	ldr	r3, [pc, #480]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067540:	681b      	ldr	r3, [r3, #0]
 8067542:	4a77      	ldr	r2, [pc, #476]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8067548:	6013      	str	r3, [r2, #0]
 806754a:	4b75      	ldr	r3, [pc, #468]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 806754c:	681b      	ldr	r3, [r3, #0]
 806754e:	4a74      	ldr	r2, [pc, #464]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8067554:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8067556:	687b      	ldr	r3, [r7, #4]
 8067558:	685b      	ldr	r3, [r3, #4]
 806755a:	2b00      	cmp	r3, #0
 806755c:	d013      	beq.n	8067586 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 806755e:	f7fc f9af 	bl	80638c0 <HAL_GetTick>
 8067562:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8067564:	e008      	b.n	8067578 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8067566:	f7fc f9ab 	bl	80638c0 <HAL_GetTick>
 806756a:	4602      	mov	r2, r0
 806756c:	693b      	ldr	r3, [r7, #16]
 806756e:	1ad3      	subs	r3, r2, r3
 8067570:	2b64      	cmp	r3, #100	; 0x64
 8067572:	d901      	bls.n	8067578 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8067574:	2303      	movs	r3, #3
 8067576:	e29b      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8067578:	4b69      	ldr	r3, [pc, #420]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 806757a:	681b      	ldr	r3, [r3, #0]
 806757c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8067580:	2b00      	cmp	r3, #0
 8067582:	d0f0      	beq.n	8067566 <HAL_RCC_OscConfig+0xf6>
 8067584:	e014      	b.n	80675b0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067586:	f7fc f99b 	bl	80638c0 <HAL_GetTick>
 806758a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 806758c:	e008      	b.n	80675a0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 806758e:	f7fc f997 	bl	80638c0 <HAL_GetTick>
 8067592:	4602      	mov	r2, r0
 8067594:	693b      	ldr	r3, [r7, #16]
 8067596:	1ad3      	subs	r3, r2, r3
 8067598:	2b64      	cmp	r3, #100	; 0x64
 806759a:	d901      	bls.n	80675a0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 806759c:	2303      	movs	r3, #3
 806759e:	e287      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80675a0:	4b5f      	ldr	r3, [pc, #380]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 80675a2:	681b      	ldr	r3, [r3, #0]
 80675a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80675a8:	2b00      	cmp	r3, #0
 80675aa:	d1f0      	bne.n	806758e <HAL_RCC_OscConfig+0x11e>
 80675ac:	e000      	b.n	80675b0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80675ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80675b0:	687b      	ldr	r3, [r7, #4]
 80675b2:	681b      	ldr	r3, [r3, #0]
 80675b4:	f003 0302 	and.w	r3, r3, #2
 80675b8:	2b00      	cmp	r3, #0
 80675ba:	d079      	beq.n	80676b0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80675bc:	687b      	ldr	r3, [r7, #4]
 80675be:	68db      	ldr	r3, [r3, #12]
 80675c0:	2b00      	cmp	r3, #0
 80675c2:	d008      	beq.n	80675d6 <HAL_RCC_OscConfig+0x166>
 80675c4:	687b      	ldr	r3, [r7, #4]
 80675c6:	68db      	ldr	r3, [r3, #12]
 80675c8:	2b01      	cmp	r3, #1
 80675ca:	d004      	beq.n	80675d6 <HAL_RCC_OscConfig+0x166>
 80675cc:	f240 111f 	movw	r1, #287	; 0x11f
 80675d0:	4852      	ldr	r0, [pc, #328]	; (806771c <HAL_RCC_OscConfig+0x2ac>)
 80675d2:	f7fb fcaa 	bl	8062f2a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80675d6:	687b      	ldr	r3, [r7, #4]
 80675d8:	691b      	ldr	r3, [r3, #16]
 80675da:	2b1f      	cmp	r3, #31
 80675dc:	d904      	bls.n	80675e8 <HAL_RCC_OscConfig+0x178>
 80675de:	f44f 7190 	mov.w	r1, #288	; 0x120
 80675e2:	484e      	ldr	r0, [pc, #312]	; (806771c <HAL_RCC_OscConfig+0x2ac>)
 80675e4:	f7fb fca1 	bl	8062f2a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80675e8:	4b4d      	ldr	r3, [pc, #308]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 80675ea:	689b      	ldr	r3, [r3, #8]
 80675ec:	f003 030c 	and.w	r3, r3, #12
 80675f0:	2b00      	cmp	r3, #0
 80675f2:	d00b      	beq.n	806760c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80675f4:	4b4a      	ldr	r3, [pc, #296]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 80675f6:	689b      	ldr	r3, [r3, #8]
 80675f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80675fc:	2b08      	cmp	r3, #8
 80675fe:	d11c      	bne.n	806763a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8067600:	4b47      	ldr	r3, [pc, #284]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067602:	685b      	ldr	r3, [r3, #4]
 8067604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8067608:	2b00      	cmp	r3, #0
 806760a:	d116      	bne.n	806763a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 806760c:	4b44      	ldr	r3, [pc, #272]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 806760e:	681b      	ldr	r3, [r3, #0]
 8067610:	f003 0302 	and.w	r3, r3, #2
 8067614:	2b00      	cmp	r3, #0
 8067616:	d005      	beq.n	8067624 <HAL_RCC_OscConfig+0x1b4>
 8067618:	687b      	ldr	r3, [r7, #4]
 806761a:	68db      	ldr	r3, [r3, #12]
 806761c:	2b01      	cmp	r3, #1
 806761e:	d001      	beq.n	8067624 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8067620:	2301      	movs	r3, #1
 8067622:	e245      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8067624:	4b3e      	ldr	r3, [pc, #248]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067626:	681b      	ldr	r3, [r3, #0]
 8067628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 806762c:	687b      	ldr	r3, [r7, #4]
 806762e:	691b      	ldr	r3, [r3, #16]
 8067630:	00db      	lsls	r3, r3, #3
 8067632:	493b      	ldr	r1, [pc, #236]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067634:	4313      	orrs	r3, r2
 8067636:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8067638:	e03a      	b.n	80676b0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 806763a:	687b      	ldr	r3, [r7, #4]
 806763c:	68db      	ldr	r3, [r3, #12]
 806763e:	2b00      	cmp	r3, #0
 8067640:	d020      	beq.n	8067684 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8067642:	4b38      	ldr	r3, [pc, #224]	; (8067724 <HAL_RCC_OscConfig+0x2b4>)
 8067644:	2201      	movs	r2, #1
 8067646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8067648:	f7fc f93a 	bl	80638c0 <HAL_GetTick>
 806764c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 806764e:	e008      	b.n	8067662 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8067650:	f7fc f936 	bl	80638c0 <HAL_GetTick>
 8067654:	4602      	mov	r2, r0
 8067656:	693b      	ldr	r3, [r7, #16]
 8067658:	1ad3      	subs	r3, r2, r3
 806765a:	2b02      	cmp	r3, #2
 806765c:	d901      	bls.n	8067662 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 806765e:	2303      	movs	r3, #3
 8067660:	e226      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8067662:	4b2f      	ldr	r3, [pc, #188]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067664:	681b      	ldr	r3, [r3, #0]
 8067666:	f003 0302 	and.w	r3, r3, #2
 806766a:	2b00      	cmp	r3, #0
 806766c:	d0f0      	beq.n	8067650 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 806766e:	4b2c      	ldr	r3, [pc, #176]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067670:	681b      	ldr	r3, [r3, #0]
 8067672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8067676:	687b      	ldr	r3, [r7, #4]
 8067678:	691b      	ldr	r3, [r3, #16]
 806767a:	00db      	lsls	r3, r3, #3
 806767c:	4928      	ldr	r1, [pc, #160]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 806767e:	4313      	orrs	r3, r2
 8067680:	600b      	str	r3, [r1, #0]
 8067682:	e015      	b.n	80676b0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8067684:	4b27      	ldr	r3, [pc, #156]	; (8067724 <HAL_RCC_OscConfig+0x2b4>)
 8067686:	2200      	movs	r2, #0
 8067688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 806768a:	f7fc f919 	bl	80638c0 <HAL_GetTick>
 806768e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8067690:	e008      	b.n	80676a4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8067692:	f7fc f915 	bl	80638c0 <HAL_GetTick>
 8067696:	4602      	mov	r2, r0
 8067698:	693b      	ldr	r3, [r7, #16]
 806769a:	1ad3      	subs	r3, r2, r3
 806769c:	2b02      	cmp	r3, #2
 806769e:	d901      	bls.n	80676a4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80676a0:	2303      	movs	r3, #3
 80676a2:	e205      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80676a4:	4b1e      	ldr	r3, [pc, #120]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 80676a6:	681b      	ldr	r3, [r3, #0]
 80676a8:	f003 0302 	and.w	r3, r3, #2
 80676ac:	2b00      	cmp	r3, #0
 80676ae:	d1f0      	bne.n	8067692 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80676b0:	687b      	ldr	r3, [r7, #4]
 80676b2:	681b      	ldr	r3, [r3, #0]
 80676b4:	f003 0308 	and.w	r3, r3, #8
 80676b8:	2b00      	cmp	r3, #0
 80676ba:	d046      	beq.n	806774a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80676bc:	687b      	ldr	r3, [r7, #4]
 80676be:	695b      	ldr	r3, [r3, #20]
 80676c0:	2b00      	cmp	r3, #0
 80676c2:	d008      	beq.n	80676d6 <HAL_RCC_OscConfig+0x266>
 80676c4:	687b      	ldr	r3, [r7, #4]
 80676c6:	695b      	ldr	r3, [r3, #20]
 80676c8:	2b01      	cmp	r3, #1
 80676ca:	d004      	beq.n	80676d6 <HAL_RCC_OscConfig+0x266>
 80676cc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80676d0:	4812      	ldr	r0, [pc, #72]	; (806771c <HAL_RCC_OscConfig+0x2ac>)
 80676d2:	f7fb fc2a 	bl	8062f2a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80676d6:	687b      	ldr	r3, [r7, #4]
 80676d8:	695b      	ldr	r3, [r3, #20]
 80676da:	2b00      	cmp	r3, #0
 80676dc:	d016      	beq.n	806770c <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80676de:	4b12      	ldr	r3, [pc, #72]	; (8067728 <HAL_RCC_OscConfig+0x2b8>)
 80676e0:	2201      	movs	r2, #1
 80676e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80676e4:	f7fc f8ec 	bl	80638c0 <HAL_GetTick>
 80676e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80676ea:	e008      	b.n	80676fe <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80676ec:	f7fc f8e8 	bl	80638c0 <HAL_GetTick>
 80676f0:	4602      	mov	r2, r0
 80676f2:	693b      	ldr	r3, [r7, #16]
 80676f4:	1ad3      	subs	r3, r2, r3
 80676f6:	2b02      	cmp	r3, #2
 80676f8:	d901      	bls.n	80676fe <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80676fa:	2303      	movs	r3, #3
 80676fc:	e1d8      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80676fe:	4b08      	ldr	r3, [pc, #32]	; (8067720 <HAL_RCC_OscConfig+0x2b0>)
 8067700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8067702:	f003 0302 	and.w	r3, r3, #2
 8067706:	2b00      	cmp	r3, #0
 8067708:	d0f0      	beq.n	80676ec <HAL_RCC_OscConfig+0x27c>
 806770a:	e01e      	b.n	806774a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 806770c:	4b06      	ldr	r3, [pc, #24]	; (8067728 <HAL_RCC_OscConfig+0x2b8>)
 806770e:	2200      	movs	r2, #0
 8067710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8067712:	f7fc f8d5 	bl	80638c0 <HAL_GetTick>
 8067716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8067718:	e011      	b.n	806773e <HAL_RCC_OscConfig+0x2ce>
 806771a:	bf00      	nop
 806771c:	08077180 	.word	0x08077180
 8067720:	40023800 	.word	0x40023800
 8067724:	42470000 	.word	0x42470000
 8067728:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 806772c:	f7fc f8c8 	bl	80638c0 <HAL_GetTick>
 8067730:	4602      	mov	r2, r0
 8067732:	693b      	ldr	r3, [r7, #16]
 8067734:	1ad3      	subs	r3, r2, r3
 8067736:	2b02      	cmp	r3, #2
 8067738:	d901      	bls.n	806773e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 806773a:	2303      	movs	r3, #3
 806773c:	e1b8      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 806773e:	4b97      	ldr	r3, [pc, #604]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8067742:	f003 0302 	and.w	r3, r3, #2
 8067746:	2b00      	cmp	r3, #0
 8067748:	d1f0      	bne.n	806772c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 806774a:	687b      	ldr	r3, [r7, #4]
 806774c:	681b      	ldr	r3, [r3, #0]
 806774e:	f003 0304 	and.w	r3, r3, #4
 8067752:	2b00      	cmp	r3, #0
 8067754:	f000 80a8 	beq.w	80678a8 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8067758:	2300      	movs	r3, #0
 806775a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 806775c:	687b      	ldr	r3, [r7, #4]
 806775e:	689b      	ldr	r3, [r3, #8]
 8067760:	2b00      	cmp	r3, #0
 8067762:	d00c      	beq.n	806777e <HAL_RCC_OscConfig+0x30e>
 8067764:	687b      	ldr	r3, [r7, #4]
 8067766:	689b      	ldr	r3, [r3, #8]
 8067768:	2b01      	cmp	r3, #1
 806776a:	d008      	beq.n	806777e <HAL_RCC_OscConfig+0x30e>
 806776c:	687b      	ldr	r3, [r7, #4]
 806776e:	689b      	ldr	r3, [r3, #8]
 8067770:	2b05      	cmp	r3, #5
 8067772:	d004      	beq.n	806777e <HAL_RCC_OscConfig+0x30e>
 8067774:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8067778:	4889      	ldr	r0, [pc, #548]	; (80679a0 <HAL_RCC_OscConfig+0x530>)
 806777a:	f7fb fbd6 	bl	8062f2a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 806777e:	4b87      	ldr	r3, [pc, #540]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8067786:	2b00      	cmp	r3, #0
 8067788:	d10f      	bne.n	80677aa <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 806778a:	2300      	movs	r3, #0
 806778c:	60bb      	str	r3, [r7, #8]
 806778e:	4b83      	ldr	r3, [pc, #524]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8067792:	4a82      	ldr	r2, [pc, #520]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8067798:	6413      	str	r3, [r2, #64]	; 0x40
 806779a:	4b80      	ldr	r3, [pc, #512]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 806779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806779e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80677a2:	60bb      	str	r3, [r7, #8]
 80677a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80677a6:	2301      	movs	r3, #1
 80677a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80677aa:	4b7e      	ldr	r3, [pc, #504]	; (80679a4 <HAL_RCC_OscConfig+0x534>)
 80677ac:	681b      	ldr	r3, [r3, #0]
 80677ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80677b2:	2b00      	cmp	r3, #0
 80677b4:	d118      	bne.n	80677e8 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80677b6:	4b7b      	ldr	r3, [pc, #492]	; (80679a4 <HAL_RCC_OscConfig+0x534>)
 80677b8:	681b      	ldr	r3, [r3, #0]
 80677ba:	4a7a      	ldr	r2, [pc, #488]	; (80679a4 <HAL_RCC_OscConfig+0x534>)
 80677bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80677c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80677c2:	f7fc f87d 	bl	80638c0 <HAL_GetTick>
 80677c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80677c8:	e008      	b.n	80677dc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80677ca:	f7fc f879 	bl	80638c0 <HAL_GetTick>
 80677ce:	4602      	mov	r2, r0
 80677d0:	693b      	ldr	r3, [r7, #16]
 80677d2:	1ad3      	subs	r3, r2, r3
 80677d4:	2b02      	cmp	r3, #2
 80677d6:	d901      	bls.n	80677dc <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80677d8:	2303      	movs	r3, #3
 80677da:	e169      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80677dc:	4b71      	ldr	r3, [pc, #452]	; (80679a4 <HAL_RCC_OscConfig+0x534>)
 80677de:	681b      	ldr	r3, [r3, #0]
 80677e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80677e4:	2b00      	cmp	r3, #0
 80677e6:	d0f0      	beq.n	80677ca <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80677e8:	687b      	ldr	r3, [r7, #4]
 80677ea:	689b      	ldr	r3, [r3, #8]
 80677ec:	2b01      	cmp	r3, #1
 80677ee:	d106      	bne.n	80677fe <HAL_RCC_OscConfig+0x38e>
 80677f0:	4b6a      	ldr	r3, [pc, #424]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 80677f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80677f4:	4a69      	ldr	r2, [pc, #420]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 80677f6:	f043 0301 	orr.w	r3, r3, #1
 80677fa:	6713      	str	r3, [r2, #112]	; 0x70
 80677fc:	e01c      	b.n	8067838 <HAL_RCC_OscConfig+0x3c8>
 80677fe:	687b      	ldr	r3, [r7, #4]
 8067800:	689b      	ldr	r3, [r3, #8]
 8067802:	2b05      	cmp	r3, #5
 8067804:	d10c      	bne.n	8067820 <HAL_RCC_OscConfig+0x3b0>
 8067806:	4b65      	ldr	r3, [pc, #404]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 806780a:	4a64      	ldr	r2, [pc, #400]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 806780c:	f043 0304 	orr.w	r3, r3, #4
 8067810:	6713      	str	r3, [r2, #112]	; 0x70
 8067812:	4b62      	ldr	r3, [pc, #392]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8067816:	4a61      	ldr	r2, [pc, #388]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067818:	f043 0301 	orr.w	r3, r3, #1
 806781c:	6713      	str	r3, [r2, #112]	; 0x70
 806781e:	e00b      	b.n	8067838 <HAL_RCC_OscConfig+0x3c8>
 8067820:	4b5e      	ldr	r3, [pc, #376]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8067824:	4a5d      	ldr	r2, [pc, #372]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067826:	f023 0301 	bic.w	r3, r3, #1
 806782a:	6713      	str	r3, [r2, #112]	; 0x70
 806782c:	4b5b      	ldr	r3, [pc, #364]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 806782e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8067830:	4a5a      	ldr	r2, [pc, #360]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067832:	f023 0304 	bic.w	r3, r3, #4
 8067836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8067838:	687b      	ldr	r3, [r7, #4]
 806783a:	689b      	ldr	r3, [r3, #8]
 806783c:	2b00      	cmp	r3, #0
 806783e:	d015      	beq.n	806786c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8067840:	f7fc f83e 	bl	80638c0 <HAL_GetTick>
 8067844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8067846:	e00a      	b.n	806785e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8067848:	f7fc f83a 	bl	80638c0 <HAL_GetTick>
 806784c:	4602      	mov	r2, r0
 806784e:	693b      	ldr	r3, [r7, #16]
 8067850:	1ad3      	subs	r3, r2, r3
 8067852:	f241 3288 	movw	r2, #5000	; 0x1388
 8067856:	4293      	cmp	r3, r2
 8067858:	d901      	bls.n	806785e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 806785a:	2303      	movs	r3, #3
 806785c:	e128      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 806785e:	4b4f      	ldr	r3, [pc, #316]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 8067860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8067862:	f003 0302 	and.w	r3, r3, #2
 8067866:	2b00      	cmp	r3, #0
 8067868:	d0ee      	beq.n	8067848 <HAL_RCC_OscConfig+0x3d8>
 806786a:	e014      	b.n	8067896 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 806786c:	f7fc f828 	bl	80638c0 <HAL_GetTick>
 8067870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8067872:	e00a      	b.n	806788a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8067874:	f7fc f824 	bl	80638c0 <HAL_GetTick>
 8067878:	4602      	mov	r2, r0
 806787a:	693b      	ldr	r3, [r7, #16]
 806787c:	1ad3      	subs	r3, r2, r3
 806787e:	f241 3288 	movw	r2, #5000	; 0x1388
 8067882:	4293      	cmp	r3, r2
 8067884:	d901      	bls.n	806788a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8067886:	2303      	movs	r3, #3
 8067888:	e112      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 806788a:	4b44      	ldr	r3, [pc, #272]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 806788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 806788e:	f003 0302 	and.w	r3, r3, #2
 8067892:	2b00      	cmp	r3, #0
 8067894:	d1ee      	bne.n	8067874 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8067896:	7dfb      	ldrb	r3, [r7, #23]
 8067898:	2b01      	cmp	r3, #1
 806789a:	d105      	bne.n	80678a8 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 806789c:	4b3f      	ldr	r3, [pc, #252]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 806789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80678a0:	4a3e      	ldr	r2, [pc, #248]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 80678a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80678a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80678a8:	687b      	ldr	r3, [r7, #4]
 80678aa:	699b      	ldr	r3, [r3, #24]
 80678ac:	2b00      	cmp	r3, #0
 80678ae:	d00c      	beq.n	80678ca <HAL_RCC_OscConfig+0x45a>
 80678b0:	687b      	ldr	r3, [r7, #4]
 80678b2:	699b      	ldr	r3, [r3, #24]
 80678b4:	2b01      	cmp	r3, #1
 80678b6:	d008      	beq.n	80678ca <HAL_RCC_OscConfig+0x45a>
 80678b8:	687b      	ldr	r3, [r7, #4]
 80678ba:	699b      	ldr	r3, [r3, #24]
 80678bc:	2b02      	cmp	r3, #2
 80678be:	d004      	beq.n	80678ca <HAL_RCC_OscConfig+0x45a>
 80678c0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80678c4:	4836      	ldr	r0, [pc, #216]	; (80679a0 <HAL_RCC_OscConfig+0x530>)
 80678c6:	f7fb fb30 	bl	8062f2a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80678ca:	687b      	ldr	r3, [r7, #4]
 80678cc:	699b      	ldr	r3, [r3, #24]
 80678ce:	2b00      	cmp	r3, #0
 80678d0:	f000 80ed 	beq.w	8067aae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80678d4:	4b31      	ldr	r3, [pc, #196]	; (806799c <HAL_RCC_OscConfig+0x52c>)
 80678d6:	689b      	ldr	r3, [r3, #8]
 80678d8:	f003 030c 	and.w	r3, r3, #12
 80678dc:	2b08      	cmp	r3, #8
 80678de:	f000 80ae 	beq.w	8067a3e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80678e2:	687b      	ldr	r3, [r7, #4]
 80678e4:	699b      	ldr	r3, [r3, #24]
 80678e6:	2b02      	cmp	r3, #2
 80678e8:	f040 8092 	bne.w	8067a10 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80678ec:	687b      	ldr	r3, [r7, #4]
 80678ee:	69db      	ldr	r3, [r3, #28]
 80678f0:	2b00      	cmp	r3, #0
 80678f2:	d009      	beq.n	8067908 <HAL_RCC_OscConfig+0x498>
 80678f4:	687b      	ldr	r3, [r7, #4]
 80678f6:	69db      	ldr	r3, [r3, #28]
 80678f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80678fc:	d004      	beq.n	8067908 <HAL_RCC_OscConfig+0x498>
 80678fe:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8067902:	4827      	ldr	r0, [pc, #156]	; (80679a0 <HAL_RCC_OscConfig+0x530>)
 8067904:	f7fb fb11 	bl	8062f2a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8067908:	687b      	ldr	r3, [r7, #4]
 806790a:	6a1b      	ldr	r3, [r3, #32]
 806790c:	2b3f      	cmp	r3, #63	; 0x3f
 806790e:	d904      	bls.n	806791a <HAL_RCC_OscConfig+0x4aa>
 8067910:	f240 11d9 	movw	r1, #473	; 0x1d9
 8067914:	4822      	ldr	r0, [pc, #136]	; (80679a0 <HAL_RCC_OscConfig+0x530>)
 8067916:	f7fb fb08 	bl	8062f2a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 806791a:	687b      	ldr	r3, [r7, #4]
 806791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806791e:	2b31      	cmp	r3, #49	; 0x31
 8067920:	d904      	bls.n	806792c <HAL_RCC_OscConfig+0x4bc>
 8067922:	687b      	ldr	r3, [r7, #4]
 8067924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8067926:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 806792a:	d904      	bls.n	8067936 <HAL_RCC_OscConfig+0x4c6>
 806792c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8067930:	481b      	ldr	r0, [pc, #108]	; (80679a0 <HAL_RCC_OscConfig+0x530>)
 8067932:	f7fb fafa 	bl	8062f2a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8067936:	687b      	ldr	r3, [r7, #4]
 8067938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806793a:	2b02      	cmp	r3, #2
 806793c:	d010      	beq.n	8067960 <HAL_RCC_OscConfig+0x4f0>
 806793e:	687b      	ldr	r3, [r7, #4]
 8067940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067942:	2b04      	cmp	r3, #4
 8067944:	d00c      	beq.n	8067960 <HAL_RCC_OscConfig+0x4f0>
 8067946:	687b      	ldr	r3, [r7, #4]
 8067948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806794a:	2b06      	cmp	r3, #6
 806794c:	d008      	beq.n	8067960 <HAL_RCC_OscConfig+0x4f0>
 806794e:	687b      	ldr	r3, [r7, #4]
 8067950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067952:	2b08      	cmp	r3, #8
 8067954:	d004      	beq.n	8067960 <HAL_RCC_OscConfig+0x4f0>
 8067956:	f240 11db 	movw	r1, #475	; 0x1db
 806795a:	4811      	ldr	r0, [pc, #68]	; (80679a0 <HAL_RCC_OscConfig+0x530>)
 806795c:	f7fb fae5 	bl	8062f2a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8067960:	687b      	ldr	r3, [r7, #4]
 8067962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067964:	2b01      	cmp	r3, #1
 8067966:	d903      	bls.n	8067970 <HAL_RCC_OscConfig+0x500>
 8067968:	687b      	ldr	r3, [r7, #4]
 806796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806796c:	2b0f      	cmp	r3, #15
 806796e:	d904      	bls.n	806797a <HAL_RCC_OscConfig+0x50a>
 8067970:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8067974:	480a      	ldr	r0, [pc, #40]	; (80679a0 <HAL_RCC_OscConfig+0x530>)
 8067976:	f7fb fad8 	bl	8062f2a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 806797a:	4b0b      	ldr	r3, [pc, #44]	; (80679a8 <HAL_RCC_OscConfig+0x538>)
 806797c:	2200      	movs	r2, #0
 806797e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067980:	f7fb ff9e 	bl	80638c0 <HAL_GetTick>
 8067984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067986:	e011      	b.n	80679ac <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8067988:	f7fb ff9a 	bl	80638c0 <HAL_GetTick>
 806798c:	4602      	mov	r2, r0
 806798e:	693b      	ldr	r3, [r7, #16]
 8067990:	1ad3      	subs	r3, r2, r3
 8067992:	2b02      	cmp	r3, #2
 8067994:	d90a      	bls.n	80679ac <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8067996:	2303      	movs	r3, #3
 8067998:	e08a      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
 806799a:	bf00      	nop
 806799c:	40023800 	.word	0x40023800
 80679a0:	08077180 	.word	0x08077180
 80679a4:	40007000 	.word	0x40007000
 80679a8:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80679ac:	4b42      	ldr	r3, [pc, #264]	; (8067ab8 <HAL_RCC_OscConfig+0x648>)
 80679ae:	681b      	ldr	r3, [r3, #0]
 80679b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80679b4:	2b00      	cmp	r3, #0
 80679b6:	d1e7      	bne.n	8067988 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80679b8:	687b      	ldr	r3, [r7, #4]
 80679ba:	69da      	ldr	r2, [r3, #28]
 80679bc:	687b      	ldr	r3, [r7, #4]
 80679be:	6a1b      	ldr	r3, [r3, #32]
 80679c0:	431a      	orrs	r2, r3
 80679c2:	687b      	ldr	r3, [r7, #4]
 80679c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80679c6:	019b      	lsls	r3, r3, #6
 80679c8:	431a      	orrs	r2, r3
 80679ca:	687b      	ldr	r3, [r7, #4]
 80679cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80679ce:	085b      	lsrs	r3, r3, #1
 80679d0:	3b01      	subs	r3, #1
 80679d2:	041b      	lsls	r3, r3, #16
 80679d4:	431a      	orrs	r2, r3
 80679d6:	687b      	ldr	r3, [r7, #4]
 80679d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80679da:	061b      	lsls	r3, r3, #24
 80679dc:	4936      	ldr	r1, [pc, #216]	; (8067ab8 <HAL_RCC_OscConfig+0x648>)
 80679de:	4313      	orrs	r3, r2
 80679e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80679e2:	4b36      	ldr	r3, [pc, #216]	; (8067abc <HAL_RCC_OscConfig+0x64c>)
 80679e4:	2201      	movs	r2, #1
 80679e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80679e8:	f7fb ff6a 	bl	80638c0 <HAL_GetTick>
 80679ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80679ee:	e008      	b.n	8067a02 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80679f0:	f7fb ff66 	bl	80638c0 <HAL_GetTick>
 80679f4:	4602      	mov	r2, r0
 80679f6:	693b      	ldr	r3, [r7, #16]
 80679f8:	1ad3      	subs	r3, r2, r3
 80679fa:	2b02      	cmp	r3, #2
 80679fc:	d901      	bls.n	8067a02 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80679fe:	2303      	movs	r3, #3
 8067a00:	e056      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8067a02:	4b2d      	ldr	r3, [pc, #180]	; (8067ab8 <HAL_RCC_OscConfig+0x648>)
 8067a04:	681b      	ldr	r3, [r3, #0]
 8067a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067a0a:	2b00      	cmp	r3, #0
 8067a0c:	d0f0      	beq.n	80679f0 <HAL_RCC_OscConfig+0x580>
 8067a0e:	e04e      	b.n	8067aae <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8067a10:	4b2a      	ldr	r3, [pc, #168]	; (8067abc <HAL_RCC_OscConfig+0x64c>)
 8067a12:	2200      	movs	r2, #0
 8067a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8067a16:	f7fb ff53 	bl	80638c0 <HAL_GetTick>
 8067a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067a1c:	e008      	b.n	8067a30 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8067a1e:	f7fb ff4f 	bl	80638c0 <HAL_GetTick>
 8067a22:	4602      	mov	r2, r0
 8067a24:	693b      	ldr	r3, [r7, #16]
 8067a26:	1ad3      	subs	r3, r2, r3
 8067a28:	2b02      	cmp	r3, #2
 8067a2a:	d901      	bls.n	8067a30 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8067a2c:	2303      	movs	r3, #3
 8067a2e:	e03f      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8067a30:	4b21      	ldr	r3, [pc, #132]	; (8067ab8 <HAL_RCC_OscConfig+0x648>)
 8067a32:	681b      	ldr	r3, [r3, #0]
 8067a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067a38:	2b00      	cmp	r3, #0
 8067a3a:	d1f0      	bne.n	8067a1e <HAL_RCC_OscConfig+0x5ae>
 8067a3c:	e037      	b.n	8067aae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8067a3e:	687b      	ldr	r3, [r7, #4]
 8067a40:	699b      	ldr	r3, [r3, #24]
 8067a42:	2b01      	cmp	r3, #1
 8067a44:	d101      	bne.n	8067a4a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8067a46:	2301      	movs	r3, #1
 8067a48:	e032      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8067a4a:	4b1b      	ldr	r3, [pc, #108]	; (8067ab8 <HAL_RCC_OscConfig+0x648>)
 8067a4c:	685b      	ldr	r3, [r3, #4]
 8067a4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8067a50:	687b      	ldr	r3, [r7, #4]
 8067a52:	699b      	ldr	r3, [r3, #24]
 8067a54:	2b01      	cmp	r3, #1
 8067a56:	d028      	beq.n	8067aaa <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8067a58:	68fb      	ldr	r3, [r7, #12]
 8067a5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8067a5e:	687b      	ldr	r3, [r7, #4]
 8067a60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8067a62:	429a      	cmp	r2, r3
 8067a64:	d121      	bne.n	8067aaa <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8067a66:	68fb      	ldr	r3, [r7, #12]
 8067a68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8067a6c:	687b      	ldr	r3, [r7, #4]
 8067a6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8067a70:	429a      	cmp	r2, r3
 8067a72:	d11a      	bne.n	8067aaa <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8067a74:	68fa      	ldr	r2, [r7, #12]
 8067a76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8067a7a:	4013      	ands	r3, r2
 8067a7c:	687a      	ldr	r2, [r7, #4]
 8067a7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8067a80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8067a82:	4293      	cmp	r3, r2
 8067a84:	d111      	bne.n	8067aaa <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8067a86:	68fb      	ldr	r3, [r7, #12]
 8067a88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8067a8c:	687b      	ldr	r3, [r7, #4]
 8067a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8067a90:	085b      	lsrs	r3, r3, #1
 8067a92:	3b01      	subs	r3, #1
 8067a94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8067a96:	429a      	cmp	r2, r3
 8067a98:	d107      	bne.n	8067aaa <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8067a9a:	68fb      	ldr	r3, [r7, #12]
 8067a9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8067aa0:	687b      	ldr	r3, [r7, #4]
 8067aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8067aa4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8067aa6:	429a      	cmp	r2, r3
 8067aa8:	d001      	beq.n	8067aae <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8067aaa:	2301      	movs	r3, #1
 8067aac:	e000      	b.n	8067ab0 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8067aae:	2300      	movs	r3, #0
}
 8067ab0:	4618      	mov	r0, r3
 8067ab2:	3718      	adds	r7, #24
 8067ab4:	46bd      	mov	sp, r7
 8067ab6:	bd80      	pop	{r7, pc}
 8067ab8:	40023800 	.word	0x40023800
 8067abc:	42470060 	.word	0x42470060

08067ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8067ac0:	b580      	push	{r7, lr}
 8067ac2:	b084      	sub	sp, #16
 8067ac4:	af00      	add	r7, sp, #0
 8067ac6:	6078      	str	r0, [r7, #4]
 8067ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8067aca:	687b      	ldr	r3, [r7, #4]
 8067acc:	2b00      	cmp	r3, #0
 8067ace:	d101      	bne.n	8067ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8067ad0:	2301      	movs	r3, #1
 8067ad2:	e174      	b.n	8067dbe <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8067ad4:	687b      	ldr	r3, [r7, #4]
 8067ad6:	681b      	ldr	r3, [r3, #0]
 8067ad8:	2b00      	cmp	r3, #0
 8067ada:	d003      	beq.n	8067ae4 <HAL_RCC_ClockConfig+0x24>
 8067adc:	687b      	ldr	r3, [r7, #4]
 8067ade:	681b      	ldr	r3, [r3, #0]
 8067ae0:	2b0f      	cmp	r3, #15
 8067ae2:	d904      	bls.n	8067aee <HAL_RCC_ClockConfig+0x2e>
 8067ae4:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8067ae8:	487b      	ldr	r0, [pc, #492]	; (8067cd8 <HAL_RCC_ClockConfig+0x218>)
 8067aea:	f7fb fa1e 	bl	8062f2a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8067aee:	683b      	ldr	r3, [r7, #0]
 8067af0:	2b00      	cmp	r3, #0
 8067af2:	d019      	beq.n	8067b28 <HAL_RCC_ClockConfig+0x68>
 8067af4:	683b      	ldr	r3, [r7, #0]
 8067af6:	2b01      	cmp	r3, #1
 8067af8:	d016      	beq.n	8067b28 <HAL_RCC_ClockConfig+0x68>
 8067afa:	683b      	ldr	r3, [r7, #0]
 8067afc:	2b02      	cmp	r3, #2
 8067afe:	d013      	beq.n	8067b28 <HAL_RCC_ClockConfig+0x68>
 8067b00:	683b      	ldr	r3, [r7, #0]
 8067b02:	2b03      	cmp	r3, #3
 8067b04:	d010      	beq.n	8067b28 <HAL_RCC_ClockConfig+0x68>
 8067b06:	683b      	ldr	r3, [r7, #0]
 8067b08:	2b04      	cmp	r3, #4
 8067b0a:	d00d      	beq.n	8067b28 <HAL_RCC_ClockConfig+0x68>
 8067b0c:	683b      	ldr	r3, [r7, #0]
 8067b0e:	2b05      	cmp	r3, #5
 8067b10:	d00a      	beq.n	8067b28 <HAL_RCC_ClockConfig+0x68>
 8067b12:	683b      	ldr	r3, [r7, #0]
 8067b14:	2b06      	cmp	r3, #6
 8067b16:	d007      	beq.n	8067b28 <HAL_RCC_ClockConfig+0x68>
 8067b18:	683b      	ldr	r3, [r7, #0]
 8067b1a:	2b07      	cmp	r3, #7
 8067b1c:	d004      	beq.n	8067b28 <HAL_RCC_ClockConfig+0x68>
 8067b1e:	f240 215d 	movw	r1, #605	; 0x25d
 8067b22:	486d      	ldr	r0, [pc, #436]	; (8067cd8 <HAL_RCC_ClockConfig+0x218>)
 8067b24:	f7fb fa01 	bl	8062f2a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8067b28:	4b6c      	ldr	r3, [pc, #432]	; (8067cdc <HAL_RCC_ClockConfig+0x21c>)
 8067b2a:	681b      	ldr	r3, [r3, #0]
 8067b2c:	f003 0307 	and.w	r3, r3, #7
 8067b30:	683a      	ldr	r2, [r7, #0]
 8067b32:	429a      	cmp	r2, r3
 8067b34:	d90c      	bls.n	8067b50 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8067b36:	4b69      	ldr	r3, [pc, #420]	; (8067cdc <HAL_RCC_ClockConfig+0x21c>)
 8067b38:	683a      	ldr	r2, [r7, #0]
 8067b3a:	b2d2      	uxtb	r2, r2
 8067b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8067b3e:	4b67      	ldr	r3, [pc, #412]	; (8067cdc <HAL_RCC_ClockConfig+0x21c>)
 8067b40:	681b      	ldr	r3, [r3, #0]
 8067b42:	f003 0307 	and.w	r3, r3, #7
 8067b46:	683a      	ldr	r2, [r7, #0]
 8067b48:	429a      	cmp	r2, r3
 8067b4a:	d001      	beq.n	8067b50 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8067b4c:	2301      	movs	r3, #1
 8067b4e:	e136      	b.n	8067dbe <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8067b50:	687b      	ldr	r3, [r7, #4]
 8067b52:	681b      	ldr	r3, [r3, #0]
 8067b54:	f003 0302 	and.w	r3, r3, #2
 8067b58:	2b00      	cmp	r3, #0
 8067b5a:	d049      	beq.n	8067bf0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8067b5c:	687b      	ldr	r3, [r7, #4]
 8067b5e:	681b      	ldr	r3, [r3, #0]
 8067b60:	f003 0304 	and.w	r3, r3, #4
 8067b64:	2b00      	cmp	r3, #0
 8067b66:	d005      	beq.n	8067b74 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8067b68:	4b5d      	ldr	r3, [pc, #372]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067b6a:	689b      	ldr	r3, [r3, #8]
 8067b6c:	4a5c      	ldr	r2, [pc, #368]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8067b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8067b74:	687b      	ldr	r3, [r7, #4]
 8067b76:	681b      	ldr	r3, [r3, #0]
 8067b78:	f003 0308 	and.w	r3, r3, #8
 8067b7c:	2b00      	cmp	r3, #0
 8067b7e:	d005      	beq.n	8067b8c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8067b80:	4b57      	ldr	r3, [pc, #348]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067b82:	689b      	ldr	r3, [r3, #8]
 8067b84:	4a56      	ldr	r2, [pc, #344]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8067b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8067b8c:	687b      	ldr	r3, [r7, #4]
 8067b8e:	689b      	ldr	r3, [r3, #8]
 8067b90:	2b00      	cmp	r3, #0
 8067b92:	d024      	beq.n	8067bde <HAL_RCC_ClockConfig+0x11e>
 8067b94:	687b      	ldr	r3, [r7, #4]
 8067b96:	689b      	ldr	r3, [r3, #8]
 8067b98:	2b80      	cmp	r3, #128	; 0x80
 8067b9a:	d020      	beq.n	8067bde <HAL_RCC_ClockConfig+0x11e>
 8067b9c:	687b      	ldr	r3, [r7, #4]
 8067b9e:	689b      	ldr	r3, [r3, #8]
 8067ba0:	2b90      	cmp	r3, #144	; 0x90
 8067ba2:	d01c      	beq.n	8067bde <HAL_RCC_ClockConfig+0x11e>
 8067ba4:	687b      	ldr	r3, [r7, #4]
 8067ba6:	689b      	ldr	r3, [r3, #8]
 8067ba8:	2ba0      	cmp	r3, #160	; 0xa0
 8067baa:	d018      	beq.n	8067bde <HAL_RCC_ClockConfig+0x11e>
 8067bac:	687b      	ldr	r3, [r7, #4]
 8067bae:	689b      	ldr	r3, [r3, #8]
 8067bb0:	2bb0      	cmp	r3, #176	; 0xb0
 8067bb2:	d014      	beq.n	8067bde <HAL_RCC_ClockConfig+0x11e>
 8067bb4:	687b      	ldr	r3, [r7, #4]
 8067bb6:	689b      	ldr	r3, [r3, #8]
 8067bb8:	2bc0      	cmp	r3, #192	; 0xc0
 8067bba:	d010      	beq.n	8067bde <HAL_RCC_ClockConfig+0x11e>
 8067bbc:	687b      	ldr	r3, [r7, #4]
 8067bbe:	689b      	ldr	r3, [r3, #8]
 8067bc0:	2bd0      	cmp	r3, #208	; 0xd0
 8067bc2:	d00c      	beq.n	8067bde <HAL_RCC_ClockConfig+0x11e>
 8067bc4:	687b      	ldr	r3, [r7, #4]
 8067bc6:	689b      	ldr	r3, [r3, #8]
 8067bc8:	2be0      	cmp	r3, #224	; 0xe0
 8067bca:	d008      	beq.n	8067bde <HAL_RCC_ClockConfig+0x11e>
 8067bcc:	687b      	ldr	r3, [r7, #4]
 8067bce:	689b      	ldr	r3, [r3, #8]
 8067bd0:	2bf0      	cmp	r3, #240	; 0xf0
 8067bd2:	d004      	beq.n	8067bde <HAL_RCC_ClockConfig+0x11e>
 8067bd4:	f44f 7120 	mov.w	r1, #640	; 0x280
 8067bd8:	483f      	ldr	r0, [pc, #252]	; (8067cd8 <HAL_RCC_ClockConfig+0x218>)
 8067bda:	f7fb f9a6 	bl	8062f2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8067bde:	4b40      	ldr	r3, [pc, #256]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067be0:	689b      	ldr	r3, [r3, #8]
 8067be2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8067be6:	687b      	ldr	r3, [r7, #4]
 8067be8:	689b      	ldr	r3, [r3, #8]
 8067bea:	493d      	ldr	r1, [pc, #244]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067bec:	4313      	orrs	r3, r2
 8067bee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8067bf0:	687b      	ldr	r3, [r7, #4]
 8067bf2:	681b      	ldr	r3, [r3, #0]
 8067bf4:	f003 0301 	and.w	r3, r3, #1
 8067bf8:	2b00      	cmp	r3, #0
 8067bfa:	d059      	beq.n	8067cb0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8067bfc:	687b      	ldr	r3, [r7, #4]
 8067bfe:	685b      	ldr	r3, [r3, #4]
 8067c00:	2b00      	cmp	r3, #0
 8067c02:	d010      	beq.n	8067c26 <HAL_RCC_ClockConfig+0x166>
 8067c04:	687b      	ldr	r3, [r7, #4]
 8067c06:	685b      	ldr	r3, [r3, #4]
 8067c08:	2b01      	cmp	r3, #1
 8067c0a:	d00c      	beq.n	8067c26 <HAL_RCC_ClockConfig+0x166>
 8067c0c:	687b      	ldr	r3, [r7, #4]
 8067c0e:	685b      	ldr	r3, [r3, #4]
 8067c10:	2b02      	cmp	r3, #2
 8067c12:	d008      	beq.n	8067c26 <HAL_RCC_ClockConfig+0x166>
 8067c14:	687b      	ldr	r3, [r7, #4]
 8067c16:	685b      	ldr	r3, [r3, #4]
 8067c18:	2b03      	cmp	r3, #3
 8067c1a:	d004      	beq.n	8067c26 <HAL_RCC_ClockConfig+0x166>
 8067c1c:	f240 2187 	movw	r1, #647	; 0x287
 8067c20:	482d      	ldr	r0, [pc, #180]	; (8067cd8 <HAL_RCC_ClockConfig+0x218>)
 8067c22:	f7fb f982 	bl	8062f2a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8067c26:	687b      	ldr	r3, [r7, #4]
 8067c28:	685b      	ldr	r3, [r3, #4]
 8067c2a:	2b01      	cmp	r3, #1
 8067c2c:	d107      	bne.n	8067c3e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8067c2e:	4b2c      	ldr	r3, [pc, #176]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067c30:	681b      	ldr	r3, [r3, #0]
 8067c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8067c36:	2b00      	cmp	r3, #0
 8067c38:	d119      	bne.n	8067c6e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8067c3a:	2301      	movs	r3, #1
 8067c3c:	e0bf      	b.n	8067dbe <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8067c3e:	687b      	ldr	r3, [r7, #4]
 8067c40:	685b      	ldr	r3, [r3, #4]
 8067c42:	2b02      	cmp	r3, #2
 8067c44:	d003      	beq.n	8067c4e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8067c46:	687b      	ldr	r3, [r7, #4]
 8067c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8067c4a:	2b03      	cmp	r3, #3
 8067c4c:	d107      	bne.n	8067c5e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8067c4e:	4b24      	ldr	r3, [pc, #144]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067c50:	681b      	ldr	r3, [r3, #0]
 8067c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8067c56:	2b00      	cmp	r3, #0
 8067c58:	d109      	bne.n	8067c6e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8067c5a:	2301      	movs	r3, #1
 8067c5c:	e0af      	b.n	8067dbe <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8067c5e:	4b20      	ldr	r3, [pc, #128]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067c60:	681b      	ldr	r3, [r3, #0]
 8067c62:	f003 0302 	and.w	r3, r3, #2
 8067c66:	2b00      	cmp	r3, #0
 8067c68:	d101      	bne.n	8067c6e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8067c6a:	2301      	movs	r3, #1
 8067c6c:	e0a7      	b.n	8067dbe <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8067c6e:	4b1c      	ldr	r3, [pc, #112]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067c70:	689b      	ldr	r3, [r3, #8]
 8067c72:	f023 0203 	bic.w	r2, r3, #3
 8067c76:	687b      	ldr	r3, [r7, #4]
 8067c78:	685b      	ldr	r3, [r3, #4]
 8067c7a:	4919      	ldr	r1, [pc, #100]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067c7c:	4313      	orrs	r3, r2
 8067c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8067c80:	f7fb fe1e 	bl	80638c0 <HAL_GetTick>
 8067c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8067c86:	e00a      	b.n	8067c9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8067c88:	f7fb fe1a 	bl	80638c0 <HAL_GetTick>
 8067c8c:	4602      	mov	r2, r0
 8067c8e:	68fb      	ldr	r3, [r7, #12]
 8067c90:	1ad3      	subs	r3, r2, r3
 8067c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8067c96:	4293      	cmp	r3, r2
 8067c98:	d901      	bls.n	8067c9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8067c9a:	2303      	movs	r3, #3
 8067c9c:	e08f      	b.n	8067dbe <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8067c9e:	4b10      	ldr	r3, [pc, #64]	; (8067ce0 <HAL_RCC_ClockConfig+0x220>)
 8067ca0:	689b      	ldr	r3, [r3, #8]
 8067ca2:	f003 020c 	and.w	r2, r3, #12
 8067ca6:	687b      	ldr	r3, [r7, #4]
 8067ca8:	685b      	ldr	r3, [r3, #4]
 8067caa:	009b      	lsls	r3, r3, #2
 8067cac:	429a      	cmp	r2, r3
 8067cae:	d1eb      	bne.n	8067c88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8067cb0:	4b0a      	ldr	r3, [pc, #40]	; (8067cdc <HAL_RCC_ClockConfig+0x21c>)
 8067cb2:	681b      	ldr	r3, [r3, #0]
 8067cb4:	f003 0307 	and.w	r3, r3, #7
 8067cb8:	683a      	ldr	r2, [r7, #0]
 8067cba:	429a      	cmp	r2, r3
 8067cbc:	d212      	bcs.n	8067ce4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8067cbe:	4b07      	ldr	r3, [pc, #28]	; (8067cdc <HAL_RCC_ClockConfig+0x21c>)
 8067cc0:	683a      	ldr	r2, [r7, #0]
 8067cc2:	b2d2      	uxtb	r2, r2
 8067cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8067cc6:	4b05      	ldr	r3, [pc, #20]	; (8067cdc <HAL_RCC_ClockConfig+0x21c>)
 8067cc8:	681b      	ldr	r3, [r3, #0]
 8067cca:	f003 0307 	and.w	r3, r3, #7
 8067cce:	683a      	ldr	r2, [r7, #0]
 8067cd0:	429a      	cmp	r2, r3
 8067cd2:	d007      	beq.n	8067ce4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8067cd4:	2301      	movs	r3, #1
 8067cd6:	e072      	b.n	8067dbe <HAL_RCC_ClockConfig+0x2fe>
 8067cd8:	08077180 	.word	0x08077180
 8067cdc:	40023c00 	.word	0x40023c00
 8067ce0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8067ce4:	687b      	ldr	r3, [r7, #4]
 8067ce6:	681b      	ldr	r3, [r3, #0]
 8067ce8:	f003 0304 	and.w	r3, r3, #4
 8067cec:	2b00      	cmp	r3, #0
 8067cee:	d025      	beq.n	8067d3c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8067cf0:	687b      	ldr	r3, [r7, #4]
 8067cf2:	68db      	ldr	r3, [r3, #12]
 8067cf4:	2b00      	cmp	r3, #0
 8067cf6:	d018      	beq.n	8067d2a <HAL_RCC_ClockConfig+0x26a>
 8067cf8:	687b      	ldr	r3, [r7, #4]
 8067cfa:	68db      	ldr	r3, [r3, #12]
 8067cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8067d00:	d013      	beq.n	8067d2a <HAL_RCC_ClockConfig+0x26a>
 8067d02:	687b      	ldr	r3, [r7, #4]
 8067d04:	68db      	ldr	r3, [r3, #12]
 8067d06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8067d0a:	d00e      	beq.n	8067d2a <HAL_RCC_ClockConfig+0x26a>
 8067d0c:	687b      	ldr	r3, [r7, #4]
 8067d0e:	68db      	ldr	r3, [r3, #12]
 8067d10:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8067d14:	d009      	beq.n	8067d2a <HAL_RCC_ClockConfig+0x26a>
 8067d16:	687b      	ldr	r3, [r7, #4]
 8067d18:	68db      	ldr	r3, [r3, #12]
 8067d1a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8067d1e:	d004      	beq.n	8067d2a <HAL_RCC_ClockConfig+0x26a>
 8067d20:	f240 21c5 	movw	r1, #709	; 0x2c5
 8067d24:	4828      	ldr	r0, [pc, #160]	; (8067dc8 <HAL_RCC_ClockConfig+0x308>)
 8067d26:	f7fb f900 	bl	8062f2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8067d2a:	4b28      	ldr	r3, [pc, #160]	; (8067dcc <HAL_RCC_ClockConfig+0x30c>)
 8067d2c:	689b      	ldr	r3, [r3, #8]
 8067d2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8067d32:	687b      	ldr	r3, [r7, #4]
 8067d34:	68db      	ldr	r3, [r3, #12]
 8067d36:	4925      	ldr	r1, [pc, #148]	; (8067dcc <HAL_RCC_ClockConfig+0x30c>)
 8067d38:	4313      	orrs	r3, r2
 8067d3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8067d3c:	687b      	ldr	r3, [r7, #4]
 8067d3e:	681b      	ldr	r3, [r3, #0]
 8067d40:	f003 0308 	and.w	r3, r3, #8
 8067d44:	2b00      	cmp	r3, #0
 8067d46:	d026      	beq.n	8067d96 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8067d48:	687b      	ldr	r3, [r7, #4]
 8067d4a:	691b      	ldr	r3, [r3, #16]
 8067d4c:	2b00      	cmp	r3, #0
 8067d4e:	d018      	beq.n	8067d82 <HAL_RCC_ClockConfig+0x2c2>
 8067d50:	687b      	ldr	r3, [r7, #4]
 8067d52:	691b      	ldr	r3, [r3, #16]
 8067d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8067d58:	d013      	beq.n	8067d82 <HAL_RCC_ClockConfig+0x2c2>
 8067d5a:	687b      	ldr	r3, [r7, #4]
 8067d5c:	691b      	ldr	r3, [r3, #16]
 8067d5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8067d62:	d00e      	beq.n	8067d82 <HAL_RCC_ClockConfig+0x2c2>
 8067d64:	687b      	ldr	r3, [r7, #4]
 8067d66:	691b      	ldr	r3, [r3, #16]
 8067d68:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8067d6c:	d009      	beq.n	8067d82 <HAL_RCC_ClockConfig+0x2c2>
 8067d6e:	687b      	ldr	r3, [r7, #4]
 8067d70:	691b      	ldr	r3, [r3, #16]
 8067d72:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8067d76:	d004      	beq.n	8067d82 <HAL_RCC_ClockConfig+0x2c2>
 8067d78:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8067d7c:	4812      	ldr	r0, [pc, #72]	; (8067dc8 <HAL_RCC_ClockConfig+0x308>)
 8067d7e:	f7fb f8d4 	bl	8062f2a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8067d82:	4b12      	ldr	r3, [pc, #72]	; (8067dcc <HAL_RCC_ClockConfig+0x30c>)
 8067d84:	689b      	ldr	r3, [r3, #8]
 8067d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8067d8a:	687b      	ldr	r3, [r7, #4]
 8067d8c:	691b      	ldr	r3, [r3, #16]
 8067d8e:	00db      	lsls	r3, r3, #3
 8067d90:	490e      	ldr	r1, [pc, #56]	; (8067dcc <HAL_RCC_ClockConfig+0x30c>)
 8067d92:	4313      	orrs	r3, r2
 8067d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8067d96:	f000 f821 	bl	8067ddc <HAL_RCC_GetSysClockFreq>
 8067d9a:	4602      	mov	r2, r0
 8067d9c:	4b0b      	ldr	r3, [pc, #44]	; (8067dcc <HAL_RCC_ClockConfig+0x30c>)
 8067d9e:	689b      	ldr	r3, [r3, #8]
 8067da0:	091b      	lsrs	r3, r3, #4
 8067da2:	f003 030f 	and.w	r3, r3, #15
 8067da6:	490a      	ldr	r1, [pc, #40]	; (8067dd0 <HAL_RCC_ClockConfig+0x310>)
 8067da8:	5ccb      	ldrb	r3, [r1, r3]
 8067daa:	fa22 f303 	lsr.w	r3, r2, r3
 8067dae:	4a09      	ldr	r2, [pc, #36]	; (8067dd4 <HAL_RCC_ClockConfig+0x314>)
 8067db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8067db2:	4b09      	ldr	r3, [pc, #36]	; (8067dd8 <HAL_RCC_ClockConfig+0x318>)
 8067db4:	681b      	ldr	r3, [r3, #0]
 8067db6:	4618      	mov	r0, r3
 8067db8:	f7fb fa4c 	bl	8063254 <HAL_InitTick>

  return HAL_OK;
 8067dbc:	2300      	movs	r3, #0
}
 8067dbe:	4618      	mov	r0, r3
 8067dc0:	3710      	adds	r7, #16
 8067dc2:	46bd      	mov	sp, r7
 8067dc4:	bd80      	pop	{r7, pc}
 8067dc6:	bf00      	nop
 8067dc8:	08077180 	.word	0x08077180
 8067dcc:	40023800 	.word	0x40023800
 8067dd0:	080774bc 	.word	0x080774bc
 8067dd4:	20000000 	.word	0x20000000
 8067dd8:	20000004 	.word	0x20000004

08067ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8067ddc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8067de0:	b084      	sub	sp, #16
 8067de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8067de4:	2300      	movs	r3, #0
 8067de6:	607b      	str	r3, [r7, #4]
 8067de8:	2300      	movs	r3, #0
 8067dea:	60fb      	str	r3, [r7, #12]
 8067dec:	2300      	movs	r3, #0
 8067dee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8067df0:	2300      	movs	r3, #0
 8067df2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8067df4:	4b67      	ldr	r3, [pc, #412]	; (8067f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067df6:	689b      	ldr	r3, [r3, #8]
 8067df8:	f003 030c 	and.w	r3, r3, #12
 8067dfc:	2b08      	cmp	r3, #8
 8067dfe:	d00d      	beq.n	8067e1c <HAL_RCC_GetSysClockFreq+0x40>
 8067e00:	2b08      	cmp	r3, #8
 8067e02:	f200 80bd 	bhi.w	8067f80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8067e06:	2b00      	cmp	r3, #0
 8067e08:	d002      	beq.n	8067e10 <HAL_RCC_GetSysClockFreq+0x34>
 8067e0a:	2b04      	cmp	r3, #4
 8067e0c:	d003      	beq.n	8067e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8067e0e:	e0b7      	b.n	8067f80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8067e10:	4b61      	ldr	r3, [pc, #388]	; (8067f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8067e12:	60bb      	str	r3, [r7, #8]
       break;
 8067e14:	e0b7      	b.n	8067f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8067e16:	4b61      	ldr	r3, [pc, #388]	; (8067f9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8067e18:	60bb      	str	r3, [r7, #8]
      break;
 8067e1a:	e0b4      	b.n	8067f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8067e1c:	4b5d      	ldr	r3, [pc, #372]	; (8067f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067e1e:	685b      	ldr	r3, [r3, #4]
 8067e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8067e24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8067e26:	4b5b      	ldr	r3, [pc, #364]	; (8067f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067e28:	685b      	ldr	r3, [r3, #4]
 8067e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8067e2e:	2b00      	cmp	r3, #0
 8067e30:	d04d      	beq.n	8067ece <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8067e32:	4b58      	ldr	r3, [pc, #352]	; (8067f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067e34:	685b      	ldr	r3, [r3, #4]
 8067e36:	099b      	lsrs	r3, r3, #6
 8067e38:	461a      	mov	r2, r3
 8067e3a:	f04f 0300 	mov.w	r3, #0
 8067e3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8067e42:	f04f 0100 	mov.w	r1, #0
 8067e46:	ea02 0800 	and.w	r8, r2, r0
 8067e4a:	ea03 0901 	and.w	r9, r3, r1
 8067e4e:	4640      	mov	r0, r8
 8067e50:	4649      	mov	r1, r9
 8067e52:	f04f 0200 	mov.w	r2, #0
 8067e56:	f04f 0300 	mov.w	r3, #0
 8067e5a:	014b      	lsls	r3, r1, #5
 8067e5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8067e60:	0142      	lsls	r2, r0, #5
 8067e62:	4610      	mov	r0, r2
 8067e64:	4619      	mov	r1, r3
 8067e66:	ebb0 0008 	subs.w	r0, r0, r8
 8067e6a:	eb61 0109 	sbc.w	r1, r1, r9
 8067e6e:	f04f 0200 	mov.w	r2, #0
 8067e72:	f04f 0300 	mov.w	r3, #0
 8067e76:	018b      	lsls	r3, r1, #6
 8067e78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8067e7c:	0182      	lsls	r2, r0, #6
 8067e7e:	1a12      	subs	r2, r2, r0
 8067e80:	eb63 0301 	sbc.w	r3, r3, r1
 8067e84:	f04f 0000 	mov.w	r0, #0
 8067e88:	f04f 0100 	mov.w	r1, #0
 8067e8c:	00d9      	lsls	r1, r3, #3
 8067e8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8067e92:	00d0      	lsls	r0, r2, #3
 8067e94:	4602      	mov	r2, r0
 8067e96:	460b      	mov	r3, r1
 8067e98:	eb12 0208 	adds.w	r2, r2, r8
 8067e9c:	eb43 0309 	adc.w	r3, r3, r9
 8067ea0:	f04f 0000 	mov.w	r0, #0
 8067ea4:	f04f 0100 	mov.w	r1, #0
 8067ea8:	0259      	lsls	r1, r3, #9
 8067eaa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8067eae:	0250      	lsls	r0, r2, #9
 8067eb0:	4602      	mov	r2, r0
 8067eb2:	460b      	mov	r3, r1
 8067eb4:	4610      	mov	r0, r2
 8067eb6:	4619      	mov	r1, r3
 8067eb8:	687b      	ldr	r3, [r7, #4]
 8067eba:	461a      	mov	r2, r3
 8067ebc:	f04f 0300 	mov.w	r3, #0
 8067ec0:	f7f8 ff4a 	bl	8060d58 <__aeabi_uldivmod>
 8067ec4:	4602      	mov	r2, r0
 8067ec6:	460b      	mov	r3, r1
 8067ec8:	4613      	mov	r3, r2
 8067eca:	60fb      	str	r3, [r7, #12]
 8067ecc:	e04a      	b.n	8067f64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8067ece:	4b31      	ldr	r3, [pc, #196]	; (8067f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067ed0:	685b      	ldr	r3, [r3, #4]
 8067ed2:	099b      	lsrs	r3, r3, #6
 8067ed4:	461a      	mov	r2, r3
 8067ed6:	f04f 0300 	mov.w	r3, #0
 8067eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8067ede:	f04f 0100 	mov.w	r1, #0
 8067ee2:	ea02 0400 	and.w	r4, r2, r0
 8067ee6:	ea03 0501 	and.w	r5, r3, r1
 8067eea:	4620      	mov	r0, r4
 8067eec:	4629      	mov	r1, r5
 8067eee:	f04f 0200 	mov.w	r2, #0
 8067ef2:	f04f 0300 	mov.w	r3, #0
 8067ef6:	014b      	lsls	r3, r1, #5
 8067ef8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8067efc:	0142      	lsls	r2, r0, #5
 8067efe:	4610      	mov	r0, r2
 8067f00:	4619      	mov	r1, r3
 8067f02:	1b00      	subs	r0, r0, r4
 8067f04:	eb61 0105 	sbc.w	r1, r1, r5
 8067f08:	f04f 0200 	mov.w	r2, #0
 8067f0c:	f04f 0300 	mov.w	r3, #0
 8067f10:	018b      	lsls	r3, r1, #6
 8067f12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8067f16:	0182      	lsls	r2, r0, #6
 8067f18:	1a12      	subs	r2, r2, r0
 8067f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8067f1e:	f04f 0000 	mov.w	r0, #0
 8067f22:	f04f 0100 	mov.w	r1, #0
 8067f26:	00d9      	lsls	r1, r3, #3
 8067f28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8067f2c:	00d0      	lsls	r0, r2, #3
 8067f2e:	4602      	mov	r2, r0
 8067f30:	460b      	mov	r3, r1
 8067f32:	1912      	adds	r2, r2, r4
 8067f34:	eb45 0303 	adc.w	r3, r5, r3
 8067f38:	f04f 0000 	mov.w	r0, #0
 8067f3c:	f04f 0100 	mov.w	r1, #0
 8067f40:	0299      	lsls	r1, r3, #10
 8067f42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8067f46:	0290      	lsls	r0, r2, #10
 8067f48:	4602      	mov	r2, r0
 8067f4a:	460b      	mov	r3, r1
 8067f4c:	4610      	mov	r0, r2
 8067f4e:	4619      	mov	r1, r3
 8067f50:	687b      	ldr	r3, [r7, #4]
 8067f52:	461a      	mov	r2, r3
 8067f54:	f04f 0300 	mov.w	r3, #0
 8067f58:	f7f8 fefe 	bl	8060d58 <__aeabi_uldivmod>
 8067f5c:	4602      	mov	r2, r0
 8067f5e:	460b      	mov	r3, r1
 8067f60:	4613      	mov	r3, r2
 8067f62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8067f64:	4b0b      	ldr	r3, [pc, #44]	; (8067f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8067f66:	685b      	ldr	r3, [r3, #4]
 8067f68:	0c1b      	lsrs	r3, r3, #16
 8067f6a:	f003 0303 	and.w	r3, r3, #3
 8067f6e:	3301      	adds	r3, #1
 8067f70:	005b      	lsls	r3, r3, #1
 8067f72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8067f74:	68fa      	ldr	r2, [r7, #12]
 8067f76:	683b      	ldr	r3, [r7, #0]
 8067f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8067f7c:	60bb      	str	r3, [r7, #8]
      break;
 8067f7e:	e002      	b.n	8067f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8067f80:	4b05      	ldr	r3, [pc, #20]	; (8067f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8067f82:	60bb      	str	r3, [r7, #8]
      break;
 8067f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8067f86:	68bb      	ldr	r3, [r7, #8]
}
 8067f88:	4618      	mov	r0, r3
 8067f8a:	3710      	adds	r7, #16
 8067f8c:	46bd      	mov	sp, r7
 8067f8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8067f92:	bf00      	nop
 8067f94:	40023800 	.word	0x40023800
 8067f98:	00f42400 	.word	0x00f42400
 8067f9c:	007a1200 	.word	0x007a1200

08067fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8067fa0:	b480      	push	{r7}
 8067fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8067fa4:	4b03      	ldr	r3, [pc, #12]	; (8067fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8067fa6:	681b      	ldr	r3, [r3, #0]
}
 8067fa8:	4618      	mov	r0, r3
 8067faa:	46bd      	mov	sp, r7
 8067fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8067fb0:	4770      	bx	lr
 8067fb2:	bf00      	nop
 8067fb4:	20000000 	.word	0x20000000

08067fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8067fb8:	b580      	push	{r7, lr}
 8067fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8067fbc:	f7ff fff0 	bl	8067fa0 <HAL_RCC_GetHCLKFreq>
 8067fc0:	4602      	mov	r2, r0
 8067fc2:	4b05      	ldr	r3, [pc, #20]	; (8067fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8067fc4:	689b      	ldr	r3, [r3, #8]
 8067fc6:	0a9b      	lsrs	r3, r3, #10
 8067fc8:	f003 0307 	and.w	r3, r3, #7
 8067fcc:	4903      	ldr	r1, [pc, #12]	; (8067fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8067fce:	5ccb      	ldrb	r3, [r1, r3]
 8067fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8067fd4:	4618      	mov	r0, r3
 8067fd6:	bd80      	pop	{r7, pc}
 8067fd8:	40023800 	.word	0x40023800
 8067fdc:	080774cc 	.word	0x080774cc

08067fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8067fe0:	b580      	push	{r7, lr}
 8067fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8067fe4:	f7ff ffdc 	bl	8067fa0 <HAL_RCC_GetHCLKFreq>
 8067fe8:	4602      	mov	r2, r0
 8067fea:	4b05      	ldr	r3, [pc, #20]	; (8068000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8067fec:	689b      	ldr	r3, [r3, #8]
 8067fee:	0b5b      	lsrs	r3, r3, #13
 8067ff0:	f003 0307 	and.w	r3, r3, #7
 8067ff4:	4903      	ldr	r1, [pc, #12]	; (8068004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8067ff6:	5ccb      	ldrb	r3, [r1, r3]
 8067ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8067ffc:	4618      	mov	r0, r3
 8067ffe:	bd80      	pop	{r7, pc}
 8068000:	40023800 	.word	0x40023800
 8068004:	080774cc 	.word	0x080774cc

08068008 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8068008:	b480      	push	{r7}
 806800a:	b083      	sub	sp, #12
 806800c:	af00      	add	r7, sp, #0
 806800e:	6078      	str	r0, [r7, #4]
 8068010:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8068012:	687b      	ldr	r3, [r7, #4]
 8068014:	220f      	movs	r2, #15
 8068016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8068018:	4b12      	ldr	r3, [pc, #72]	; (8068064 <HAL_RCC_GetClockConfig+0x5c>)
 806801a:	689b      	ldr	r3, [r3, #8]
 806801c:	f003 0203 	and.w	r2, r3, #3
 8068020:	687b      	ldr	r3, [r7, #4]
 8068022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8068024:	4b0f      	ldr	r3, [pc, #60]	; (8068064 <HAL_RCC_GetClockConfig+0x5c>)
 8068026:	689b      	ldr	r3, [r3, #8]
 8068028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 806802c:	687b      	ldr	r3, [r7, #4]
 806802e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8068030:	4b0c      	ldr	r3, [pc, #48]	; (8068064 <HAL_RCC_GetClockConfig+0x5c>)
 8068032:	689b      	ldr	r3, [r3, #8]
 8068034:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8068038:	687b      	ldr	r3, [r7, #4]
 806803a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 806803c:	4b09      	ldr	r3, [pc, #36]	; (8068064 <HAL_RCC_GetClockConfig+0x5c>)
 806803e:	689b      	ldr	r3, [r3, #8]
 8068040:	08db      	lsrs	r3, r3, #3
 8068042:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8068046:	687b      	ldr	r3, [r7, #4]
 8068048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 806804a:	4b07      	ldr	r3, [pc, #28]	; (8068068 <HAL_RCC_GetClockConfig+0x60>)
 806804c:	681b      	ldr	r3, [r3, #0]
 806804e:	f003 0207 	and.w	r2, r3, #7
 8068052:	683b      	ldr	r3, [r7, #0]
 8068054:	601a      	str	r2, [r3, #0]
}
 8068056:	bf00      	nop
 8068058:	370c      	adds	r7, #12
 806805a:	46bd      	mov	sp, r7
 806805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8068060:	4770      	bx	lr
 8068062:	bf00      	nop
 8068064:	40023800 	.word	0x40023800
 8068068:	40023c00 	.word	0x40023c00

0806806c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 806806c:	b580      	push	{r7, lr}
 806806e:	b086      	sub	sp, #24
 8068070:	af00      	add	r7, sp, #0
 8068072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8068074:	2300      	movs	r3, #0
 8068076:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8068078:	2300      	movs	r3, #0
 806807a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 806807c:	687b      	ldr	r3, [r7, #4]
 806807e:	681b      	ldr	r3, [r3, #0]
 8068080:	2b00      	cmp	r3, #0
 8068082:	d003      	beq.n	806808c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8068084:	687b      	ldr	r3, [r7, #4]
 8068086:	681b      	ldr	r3, [r3, #0]
 8068088:	2b0f      	cmp	r3, #15
 806808a:	d904      	bls.n	8068096 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 806808c:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8068090:	489d      	ldr	r0, [pc, #628]	; (8068308 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8068092:	f7fa ff4a 	bl	8062f2a <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8068096:	687b      	ldr	r3, [r7, #4]
 8068098:	681b      	ldr	r3, [r3, #0]
 806809a:	f003 0301 	and.w	r3, r3, #1
 806809e:	2b00      	cmp	r3, #0
 80680a0:	d105      	bne.n	80680ae <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80680a2:	687b      	ldr	r3, [r7, #4]
 80680a4:	681b      	ldr	r3, [r3, #0]
 80680a6:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80680aa:	2b00      	cmp	r3, #0
 80680ac:	d060      	beq.n	8068170 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80680ae:	687b      	ldr	r3, [r7, #4]
 80680b0:	68db      	ldr	r3, [r3, #12]
 80680b2:	2b01      	cmp	r3, #1
 80680b4:	d903      	bls.n	80680be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80680b6:	687b      	ldr	r3, [r7, #4]
 80680b8:	68db      	ldr	r3, [r3, #12]
 80680ba:	2b07      	cmp	r3, #7
 80680bc:	d904      	bls.n	80680c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80680be:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 80680c2:	4891      	ldr	r0, [pc, #580]	; (8068308 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80680c4:	f7fa ff31 	bl	8062f2a <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80680c8:	687b      	ldr	r3, [r7, #4]
 80680ca:	689b      	ldr	r3, [r3, #8]
 80680cc:	2b31      	cmp	r3, #49	; 0x31
 80680ce:	d904      	bls.n	80680da <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80680d0:	687b      	ldr	r3, [r7, #4]
 80680d2:	689b      	ldr	r3, [r3, #8]
 80680d4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80680d8:	d904      	bls.n	80680e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80680da:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80680de:	488a      	ldr	r0, [pc, #552]	; (8068308 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80680e0:	f7fa ff23 	bl	8062f2a <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80680e4:	687b      	ldr	r3, [r7, #4]
 80680e6:	685b      	ldr	r3, [r3, #4]
 80680e8:	2b01      	cmp	r3, #1
 80680ea:	d903      	bls.n	80680f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80680ec:	687b      	ldr	r3, [r7, #4]
 80680ee:	685b      	ldr	r3, [r3, #4]
 80680f0:	2b3f      	cmp	r3, #63	; 0x3f
 80680f2:	d904      	bls.n	80680fe <HAL_RCCEx_PeriphCLKConfig+0x92>
 80680f4:	f640 11e3 	movw	r1, #2531	; 0x9e3
 80680f8:	4883      	ldr	r0, [pc, #524]	; (8068308 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80680fa:	f7fa ff16 	bl	8062f2a <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80680fe:	4b83      	ldr	r3, [pc, #524]	; (806830c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8068100:	2200      	movs	r2, #0
 8068102:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8068104:	f7fb fbdc 	bl	80638c0 <HAL_GetTick>
 8068108:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 806810a:	e008      	b.n	806811e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 806810c:	f7fb fbd8 	bl	80638c0 <HAL_GetTick>
 8068110:	4602      	mov	r2, r0
 8068112:	697b      	ldr	r3, [r7, #20]
 8068114:	1ad3      	subs	r3, r2, r3
 8068116:	2b02      	cmp	r3, #2
 8068118:	d901      	bls.n	806811e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 806811a:	2303      	movs	r3, #3
 806811c:	e1ae      	b.n	806847c <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 806811e:	4b7c      	ldr	r3, [pc, #496]	; (8068310 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8068120:	681b      	ldr	r3, [r3, #0]
 8068122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8068126:	2b00      	cmp	r3, #0
 8068128:	d1f0      	bne.n	806810c <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 806812a:	687b      	ldr	r3, [r7, #4]
 806812c:	685a      	ldr	r2, [r3, #4]
 806812e:	687b      	ldr	r3, [r7, #4]
 8068130:	689b      	ldr	r3, [r3, #8]
 8068132:	019b      	lsls	r3, r3, #6
 8068134:	431a      	orrs	r2, r3
 8068136:	687b      	ldr	r3, [r7, #4]
 8068138:	68db      	ldr	r3, [r3, #12]
 806813a:	071b      	lsls	r3, r3, #28
 806813c:	4974      	ldr	r1, [pc, #464]	; (8068310 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 806813e:	4313      	orrs	r3, r2
 8068140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8068144:	4b71      	ldr	r3, [pc, #452]	; (806830c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8068146:	2201      	movs	r2, #1
 8068148:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 806814a:	f7fb fbb9 	bl	80638c0 <HAL_GetTick>
 806814e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8068150:	e008      	b.n	8068164 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8068152:	f7fb fbb5 	bl	80638c0 <HAL_GetTick>
 8068156:	4602      	mov	r2, r0
 8068158:	697b      	ldr	r3, [r7, #20]
 806815a:	1ad3      	subs	r3, r2, r3
 806815c:	2b02      	cmp	r3, #2
 806815e:	d901      	bls.n	8068164 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8068160:	2303      	movs	r3, #3
 8068162:	e18b      	b.n	806847c <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8068164:	4b6a      	ldr	r3, [pc, #424]	; (8068310 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8068166:	681b      	ldr	r3, [r3, #0]
 8068168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 806816c:	2b00      	cmp	r3, #0
 806816e:	d0f0      	beq.n	8068152 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8068170:	687b      	ldr	r3, [r7, #4]
 8068172:	681b      	ldr	r3, [r3, #0]
 8068174:	f003 0302 	and.w	r3, r3, #2
 8068178:	2b00      	cmp	r3, #0
 806817a:	f000 8174 	beq.w	8068466 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 806817e:	687b      	ldr	r3, [r7, #4]
 8068180:	691b      	ldr	r3, [r3, #16]
 8068182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8068186:	f000 80a6 	beq.w	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806818a:	687b      	ldr	r3, [r7, #4]
 806818c:	691b      	ldr	r3, [r3, #16]
 806818e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8068192:	f000 80a0 	beq.w	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068196:	687b      	ldr	r3, [r7, #4]
 8068198:	691b      	ldr	r3, [r3, #16]
 806819a:	4a5e      	ldr	r2, [pc, #376]	; (8068314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 806819c:	4293      	cmp	r3, r2
 806819e:	f000 809a 	beq.w	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80681a2:	687b      	ldr	r3, [r7, #4]
 80681a4:	691b      	ldr	r3, [r3, #16]
 80681a6:	4a5c      	ldr	r2, [pc, #368]	; (8068318 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80681a8:	4293      	cmp	r3, r2
 80681aa:	f000 8094 	beq.w	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80681ae:	687b      	ldr	r3, [r7, #4]
 80681b0:	691b      	ldr	r3, [r3, #16]
 80681b2:	4a5a      	ldr	r2, [pc, #360]	; (806831c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80681b4:	4293      	cmp	r3, r2
 80681b6:	f000 808e 	beq.w	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80681ba:	687b      	ldr	r3, [r7, #4]
 80681bc:	691b      	ldr	r3, [r3, #16]
 80681be:	4a58      	ldr	r2, [pc, #352]	; (8068320 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80681c0:	4293      	cmp	r3, r2
 80681c2:	f000 8088 	beq.w	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80681c6:	687b      	ldr	r3, [r7, #4]
 80681c8:	691b      	ldr	r3, [r3, #16]
 80681ca:	4a56      	ldr	r2, [pc, #344]	; (8068324 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80681cc:	4293      	cmp	r3, r2
 80681ce:	f000 8082 	beq.w	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80681d2:	687b      	ldr	r3, [r7, #4]
 80681d4:	691b      	ldr	r3, [r3, #16]
 80681d6:	4a54      	ldr	r2, [pc, #336]	; (8068328 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80681d8:	4293      	cmp	r3, r2
 80681da:	d07c      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80681dc:	687b      	ldr	r3, [r7, #4]
 80681de:	691b      	ldr	r3, [r3, #16]
 80681e0:	4a52      	ldr	r2, [pc, #328]	; (806832c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80681e2:	4293      	cmp	r3, r2
 80681e4:	d077      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80681e6:	687b      	ldr	r3, [r7, #4]
 80681e8:	691b      	ldr	r3, [r3, #16]
 80681ea:	4a51      	ldr	r2, [pc, #324]	; (8068330 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80681ec:	4293      	cmp	r3, r2
 80681ee:	d072      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80681f0:	687b      	ldr	r3, [r7, #4]
 80681f2:	691b      	ldr	r3, [r3, #16]
 80681f4:	4a4f      	ldr	r2, [pc, #316]	; (8068334 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80681f6:	4293      	cmp	r3, r2
 80681f8:	d06d      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80681fa:	687b      	ldr	r3, [r7, #4]
 80681fc:	691b      	ldr	r3, [r3, #16]
 80681fe:	4a4e      	ldr	r2, [pc, #312]	; (8068338 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8068200:	4293      	cmp	r3, r2
 8068202:	d068      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068204:	687b      	ldr	r3, [r7, #4]
 8068206:	691b      	ldr	r3, [r3, #16]
 8068208:	4a4c      	ldr	r2, [pc, #304]	; (806833c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 806820a:	4293      	cmp	r3, r2
 806820c:	d063      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806820e:	687b      	ldr	r3, [r7, #4]
 8068210:	691b      	ldr	r3, [r3, #16]
 8068212:	4a4b      	ldr	r2, [pc, #300]	; (8068340 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8068214:	4293      	cmp	r3, r2
 8068216:	d05e      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068218:	687b      	ldr	r3, [r7, #4]
 806821a:	691b      	ldr	r3, [r3, #16]
 806821c:	4a49      	ldr	r2, [pc, #292]	; (8068344 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 806821e:	4293      	cmp	r3, r2
 8068220:	d059      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068222:	687b      	ldr	r3, [r7, #4]
 8068224:	691b      	ldr	r3, [r3, #16]
 8068226:	4a48      	ldr	r2, [pc, #288]	; (8068348 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8068228:	4293      	cmp	r3, r2
 806822a:	d054      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806822c:	687b      	ldr	r3, [r7, #4]
 806822e:	691b      	ldr	r3, [r3, #16]
 8068230:	4a46      	ldr	r2, [pc, #280]	; (806834c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8068232:	4293      	cmp	r3, r2
 8068234:	d04f      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068236:	687b      	ldr	r3, [r7, #4]
 8068238:	691b      	ldr	r3, [r3, #16]
 806823a:	4a45      	ldr	r2, [pc, #276]	; (8068350 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 806823c:	4293      	cmp	r3, r2
 806823e:	d04a      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068240:	687b      	ldr	r3, [r7, #4]
 8068242:	691b      	ldr	r3, [r3, #16]
 8068244:	4a43      	ldr	r2, [pc, #268]	; (8068354 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8068246:	4293      	cmp	r3, r2
 8068248:	d045      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806824a:	687b      	ldr	r3, [r7, #4]
 806824c:	691b      	ldr	r3, [r3, #16]
 806824e:	4a42      	ldr	r2, [pc, #264]	; (8068358 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8068250:	4293      	cmp	r3, r2
 8068252:	d040      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068254:	687b      	ldr	r3, [r7, #4]
 8068256:	691b      	ldr	r3, [r3, #16]
 8068258:	4a40      	ldr	r2, [pc, #256]	; (806835c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 806825a:	4293      	cmp	r3, r2
 806825c:	d03b      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806825e:	687b      	ldr	r3, [r7, #4]
 8068260:	691b      	ldr	r3, [r3, #16]
 8068262:	4a3f      	ldr	r2, [pc, #252]	; (8068360 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8068264:	4293      	cmp	r3, r2
 8068266:	d036      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068268:	687b      	ldr	r3, [r7, #4]
 806826a:	691b      	ldr	r3, [r3, #16]
 806826c:	4a3d      	ldr	r2, [pc, #244]	; (8068364 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 806826e:	4293      	cmp	r3, r2
 8068270:	d031      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068272:	687b      	ldr	r3, [r7, #4]
 8068274:	691b      	ldr	r3, [r3, #16]
 8068276:	4a3c      	ldr	r2, [pc, #240]	; (8068368 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8068278:	4293      	cmp	r3, r2
 806827a:	d02c      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806827c:	687b      	ldr	r3, [r7, #4]
 806827e:	691b      	ldr	r3, [r3, #16]
 8068280:	4a3a      	ldr	r2, [pc, #232]	; (806836c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8068282:	4293      	cmp	r3, r2
 8068284:	d027      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068286:	687b      	ldr	r3, [r7, #4]
 8068288:	691b      	ldr	r3, [r3, #16]
 806828a:	4a39      	ldr	r2, [pc, #228]	; (8068370 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 806828c:	4293      	cmp	r3, r2
 806828e:	d022      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8068290:	687b      	ldr	r3, [r7, #4]
 8068292:	691b      	ldr	r3, [r3, #16]
 8068294:	4a37      	ldr	r2, [pc, #220]	; (8068374 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8068296:	4293      	cmp	r3, r2
 8068298:	d01d      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 806829a:	687b      	ldr	r3, [r7, #4]
 806829c:	691b      	ldr	r3, [r3, #16]
 806829e:	4a36      	ldr	r2, [pc, #216]	; (8068378 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80682a0:	4293      	cmp	r3, r2
 80682a2:	d018      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80682a4:	687b      	ldr	r3, [r7, #4]
 80682a6:	691b      	ldr	r3, [r3, #16]
 80682a8:	4a34      	ldr	r2, [pc, #208]	; (806837c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80682aa:	4293      	cmp	r3, r2
 80682ac:	d013      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80682ae:	687b      	ldr	r3, [r7, #4]
 80682b0:	691b      	ldr	r3, [r3, #16]
 80682b2:	4a33      	ldr	r2, [pc, #204]	; (8068380 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80682b4:	4293      	cmp	r3, r2
 80682b6:	d00e      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80682b8:	687b      	ldr	r3, [r7, #4]
 80682ba:	691b      	ldr	r3, [r3, #16]
 80682bc:	4a31      	ldr	r2, [pc, #196]	; (8068384 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80682be:	4293      	cmp	r3, r2
 80682c0:	d009      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80682c2:	687b      	ldr	r3, [r7, #4]
 80682c4:	691b      	ldr	r3, [r3, #16]
 80682c6:	4a30      	ldr	r2, [pc, #192]	; (8068388 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80682c8:	4293      	cmp	r3, r2
 80682ca:	d004      	beq.n	80682d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80682cc:	f640 2112 	movw	r1, #2578	; 0xa12
 80682d0:	480d      	ldr	r0, [pc, #52]	; (8068308 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80682d2:	f7fa fe2a 	bl	8062f2a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80682d6:	2300      	movs	r3, #0
 80682d8:	60fb      	str	r3, [r7, #12]
 80682da:	4b0d      	ldr	r3, [pc, #52]	; (8068310 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80682dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80682de:	4a0c      	ldr	r2, [pc, #48]	; (8068310 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80682e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80682e4:	6413      	str	r3, [r2, #64]	; 0x40
 80682e6:	4b0a      	ldr	r3, [pc, #40]	; (8068310 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80682e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80682ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80682ee:	60fb      	str	r3, [r7, #12]
 80682f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80682f2:	4b26      	ldr	r3, [pc, #152]	; (806838c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80682f4:	681b      	ldr	r3, [r3, #0]
 80682f6:	4a25      	ldr	r2, [pc, #148]	; (806838c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80682f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80682fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80682fe:	f7fb fadf 	bl	80638c0 <HAL_GetTick>
 8068302:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8068304:	e04d      	b.n	80683a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8068306:	bf00      	nop
 8068308:	080771b8 	.word	0x080771b8
 806830c:	42470068 	.word	0x42470068
 8068310:	40023800 	.word	0x40023800
 8068314:	00020300 	.word	0x00020300
 8068318:	00030300 	.word	0x00030300
 806831c:	00040300 	.word	0x00040300
 8068320:	00050300 	.word	0x00050300
 8068324:	00060300 	.word	0x00060300
 8068328:	00070300 	.word	0x00070300
 806832c:	00080300 	.word	0x00080300
 8068330:	00090300 	.word	0x00090300
 8068334:	000a0300 	.word	0x000a0300
 8068338:	000b0300 	.word	0x000b0300
 806833c:	000c0300 	.word	0x000c0300
 8068340:	000d0300 	.word	0x000d0300
 8068344:	000e0300 	.word	0x000e0300
 8068348:	000f0300 	.word	0x000f0300
 806834c:	00100300 	.word	0x00100300
 8068350:	00110300 	.word	0x00110300
 8068354:	00120300 	.word	0x00120300
 8068358:	00130300 	.word	0x00130300
 806835c:	00140300 	.word	0x00140300
 8068360:	00150300 	.word	0x00150300
 8068364:	00160300 	.word	0x00160300
 8068368:	00170300 	.word	0x00170300
 806836c:	00180300 	.word	0x00180300
 8068370:	00190300 	.word	0x00190300
 8068374:	001a0300 	.word	0x001a0300
 8068378:	001b0300 	.word	0x001b0300
 806837c:	001c0300 	.word	0x001c0300
 8068380:	001d0300 	.word	0x001d0300
 8068384:	001e0300 	.word	0x001e0300
 8068388:	001f0300 	.word	0x001f0300
 806838c:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8068390:	f7fb fa96 	bl	80638c0 <HAL_GetTick>
 8068394:	4602      	mov	r2, r0
 8068396:	697b      	ldr	r3, [r7, #20]
 8068398:	1ad3      	subs	r3, r2, r3
 806839a:	2b02      	cmp	r3, #2
 806839c:	d901      	bls.n	80683a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 806839e:	2303      	movs	r3, #3
 80683a0:	e06c      	b.n	806847c <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80683a2:	4b38      	ldr	r3, [pc, #224]	; (8068484 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 80683a4:	681b      	ldr	r3, [r3, #0]
 80683a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80683aa:	2b00      	cmp	r3, #0
 80683ac:	d0f0      	beq.n	8068390 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80683ae:	4b36      	ldr	r3, [pc, #216]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80683b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80683b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80683b6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80683b8:	693b      	ldr	r3, [r7, #16]
 80683ba:	2b00      	cmp	r3, #0
 80683bc:	d02f      	beq.n	806841e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 80683be:	687b      	ldr	r3, [r7, #4]
 80683c0:	691b      	ldr	r3, [r3, #16]
 80683c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80683c6:	693a      	ldr	r2, [r7, #16]
 80683c8:	429a      	cmp	r2, r3
 80683ca:	d028      	beq.n	806841e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80683cc:	4b2e      	ldr	r3, [pc, #184]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80683ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80683d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80683d4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80683d6:	4b2d      	ldr	r3, [pc, #180]	; (806848c <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80683d8:	2201      	movs	r2, #1
 80683da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80683dc:	4b2b      	ldr	r3, [pc, #172]	; (806848c <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80683de:	2200      	movs	r2, #0
 80683e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80683e2:	4a29      	ldr	r2, [pc, #164]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80683e4:	693b      	ldr	r3, [r7, #16]
 80683e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80683e8:	4b27      	ldr	r3, [pc, #156]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80683ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80683ec:	f003 0301 	and.w	r3, r3, #1
 80683f0:	2b01      	cmp	r3, #1
 80683f2:	d114      	bne.n	806841e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80683f4:	f7fb fa64 	bl	80638c0 <HAL_GetTick>
 80683f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80683fa:	e00a      	b.n	8068412 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80683fc:	f7fb fa60 	bl	80638c0 <HAL_GetTick>
 8068400:	4602      	mov	r2, r0
 8068402:	697b      	ldr	r3, [r7, #20]
 8068404:	1ad3      	subs	r3, r2, r3
 8068406:	f241 3288 	movw	r2, #5000	; 0x1388
 806840a:	4293      	cmp	r3, r2
 806840c:	d901      	bls.n	8068412 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 806840e:	2303      	movs	r3, #3
 8068410:	e034      	b.n	806847c <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8068412:	4b1d      	ldr	r3, [pc, #116]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8068414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8068416:	f003 0302 	and.w	r3, r3, #2
 806841a:	2b00      	cmp	r3, #0
 806841c:	d0ee      	beq.n	80683fc <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 806841e:	687b      	ldr	r3, [r7, #4]
 8068420:	691b      	ldr	r3, [r3, #16]
 8068422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8068426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 806842a:	d10d      	bne.n	8068448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 806842c:	4b16      	ldr	r3, [pc, #88]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 806842e:	689b      	ldr	r3, [r3, #8]
 8068430:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8068434:	687b      	ldr	r3, [r7, #4]
 8068436:	691b      	ldr	r3, [r3, #16]
 8068438:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 806843c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8068440:	4911      	ldr	r1, [pc, #68]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8068442:	4313      	orrs	r3, r2
 8068444:	608b      	str	r3, [r1, #8]
 8068446:	e005      	b.n	8068454 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8068448:	4b0f      	ldr	r3, [pc, #60]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 806844a:	689b      	ldr	r3, [r3, #8]
 806844c:	4a0e      	ldr	r2, [pc, #56]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 806844e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8068452:	6093      	str	r3, [r2, #8]
 8068454:	4b0c      	ldr	r3, [pc, #48]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8068456:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8068458:	687b      	ldr	r3, [r7, #4]
 806845a:	691b      	ldr	r3, [r3, #16]
 806845c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8068460:	4909      	ldr	r1, [pc, #36]	; (8068488 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8068462:	4313      	orrs	r3, r2
 8068464:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8068466:	687b      	ldr	r3, [r7, #4]
 8068468:	681b      	ldr	r3, [r3, #0]
 806846a:	f003 0308 	and.w	r3, r3, #8
 806846e:	2b00      	cmp	r3, #0
 8068470:	d003      	beq.n	806847a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8068472:	687b      	ldr	r3, [r7, #4]
 8068474:	7d1a      	ldrb	r2, [r3, #20]
 8068476:	4b06      	ldr	r3, [pc, #24]	; (8068490 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8068478:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 806847a:	2300      	movs	r3, #0
}
 806847c:	4618      	mov	r0, r3
 806847e:	3718      	adds	r7, #24
 8068480:	46bd      	mov	sp, r7
 8068482:	bd80      	pop	{r7, pc}
 8068484:	40007000 	.word	0x40007000
 8068488:	40023800 	.word	0x40023800
 806848c:	42470e40 	.word	0x42470e40
 8068490:	424711e0 	.word	0x424711e0

08068494 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8068494:	b580      	push	{r7, lr}
 8068496:	b082      	sub	sp, #8
 8068498:	af00      	add	r7, sp, #0
 806849a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 806849c:	687b      	ldr	r3, [r7, #4]
 806849e:	2b00      	cmp	r3, #0
 80684a0:	d101      	bne.n	80684a6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80684a2:	2301      	movs	r3, #1
 80684a4:	e0d6      	b.n	8068654 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80684a6:	687b      	ldr	r3, [r7, #4]
 80684a8:	685b      	ldr	r3, [r3, #4]
 80684aa:	2b40      	cmp	r3, #64	; 0x40
 80684ac:	d007      	beq.n	80684be <HAL_RTC_Init+0x2a>
 80684ae:	687b      	ldr	r3, [r7, #4]
 80684b0:	685b      	ldr	r3, [r3, #4]
 80684b2:	2b00      	cmp	r3, #0
 80684b4:	d003      	beq.n	80684be <HAL_RTC_Init+0x2a>
 80684b6:	21ff      	movs	r1, #255	; 0xff
 80684b8:	4868      	ldr	r0, [pc, #416]	; (806865c <HAL_RTC_Init+0x1c8>)
 80684ba:	f7fa fd36 	bl	8062f2a <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80684be:	687b      	ldr	r3, [r7, #4]
 80684c0:	689b      	ldr	r3, [r3, #8]
 80684c2:	2b7f      	cmp	r3, #127	; 0x7f
 80684c4:	d904      	bls.n	80684d0 <HAL_RTC_Init+0x3c>
 80684c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80684ca:	4864      	ldr	r0, [pc, #400]	; (806865c <HAL_RTC_Init+0x1c8>)
 80684cc:	f7fa fd2d 	bl	8062f2a <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80684d0:	687b      	ldr	r3, [r7, #4]
 80684d2:	68db      	ldr	r3, [r3, #12]
 80684d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80684d8:	d304      	bcc.n	80684e4 <HAL_RTC_Init+0x50>
 80684da:	f240 1101 	movw	r1, #257	; 0x101
 80684de:	485f      	ldr	r0, [pc, #380]	; (806865c <HAL_RTC_Init+0x1c8>)
 80684e0:	f7fa fd23 	bl	8062f2a <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80684e4:	687b      	ldr	r3, [r7, #4]
 80684e6:	691b      	ldr	r3, [r3, #16]
 80684e8:	2b00      	cmp	r3, #0
 80684ea:	d013      	beq.n	8068514 <HAL_RTC_Init+0x80>
 80684ec:	687b      	ldr	r3, [r7, #4]
 80684ee:	691b      	ldr	r3, [r3, #16]
 80684f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80684f4:	d00e      	beq.n	8068514 <HAL_RTC_Init+0x80>
 80684f6:	687b      	ldr	r3, [r7, #4]
 80684f8:	691b      	ldr	r3, [r3, #16]
 80684fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80684fe:	d009      	beq.n	8068514 <HAL_RTC_Init+0x80>
 8068500:	687b      	ldr	r3, [r7, #4]
 8068502:	691b      	ldr	r3, [r3, #16]
 8068504:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8068508:	d004      	beq.n	8068514 <HAL_RTC_Init+0x80>
 806850a:	f44f 7181 	mov.w	r1, #258	; 0x102
 806850e:	4853      	ldr	r0, [pc, #332]	; (806865c <HAL_RTC_Init+0x1c8>)
 8068510:	f7fa fd0b 	bl	8062f2a <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8068514:	687b      	ldr	r3, [r7, #4]
 8068516:	695b      	ldr	r3, [r3, #20]
 8068518:	2b00      	cmp	r3, #0
 806851a:	d009      	beq.n	8068530 <HAL_RTC_Init+0x9c>
 806851c:	687b      	ldr	r3, [r7, #4]
 806851e:	695b      	ldr	r3, [r3, #20]
 8068520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8068524:	d004      	beq.n	8068530 <HAL_RTC_Init+0x9c>
 8068526:	f240 1103 	movw	r1, #259	; 0x103
 806852a:	484c      	ldr	r0, [pc, #304]	; (806865c <HAL_RTC_Init+0x1c8>)
 806852c:	f7fa fcfd 	bl	8062f2a <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8068530:	687b      	ldr	r3, [r7, #4]
 8068532:	699b      	ldr	r3, [r3, #24]
 8068534:	2b00      	cmp	r3, #0
 8068536:	d009      	beq.n	806854c <HAL_RTC_Init+0xb8>
 8068538:	687b      	ldr	r3, [r7, #4]
 806853a:	699b      	ldr	r3, [r3, #24]
 806853c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8068540:	d004      	beq.n	806854c <HAL_RTC_Init+0xb8>
 8068542:	f44f 7182 	mov.w	r1, #260	; 0x104
 8068546:	4845      	ldr	r0, [pc, #276]	; (806865c <HAL_RTC_Init+0x1c8>)
 8068548:	f7fa fcef 	bl	8062f2a <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 806854c:	687b      	ldr	r3, [r7, #4]
 806854e:	7f5b      	ldrb	r3, [r3, #29]
 8068550:	b2db      	uxtb	r3, r3
 8068552:	2b00      	cmp	r3, #0
 8068554:	d105      	bne.n	8068562 <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8068556:	687b      	ldr	r3, [r7, #4]
 8068558:	2200      	movs	r2, #0
 806855a:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 806855c:	6878      	ldr	r0, [r7, #4]
 806855e:	f7fa fda3 	bl	80630a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8068562:	687b      	ldr	r3, [r7, #4]
 8068564:	2202      	movs	r2, #2
 8068566:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8068568:	687b      	ldr	r3, [r7, #4]
 806856a:	681b      	ldr	r3, [r3, #0]
 806856c:	22ca      	movs	r2, #202	; 0xca
 806856e:	625a      	str	r2, [r3, #36]	; 0x24
 8068570:	687b      	ldr	r3, [r7, #4]
 8068572:	681b      	ldr	r3, [r3, #0]
 8068574:	2253      	movs	r2, #83	; 0x53
 8068576:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8068578:	6878      	ldr	r0, [r7, #4]
 806857a:	f000 f899 	bl	80686b0 <RTC_EnterInitMode>
 806857e:	4603      	mov	r3, r0
 8068580:	2b00      	cmp	r3, #0
 8068582:	d008      	beq.n	8068596 <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8068584:	687b      	ldr	r3, [r7, #4]
 8068586:	681b      	ldr	r3, [r3, #0]
 8068588:	22ff      	movs	r2, #255	; 0xff
 806858a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 806858c:	687b      	ldr	r3, [r7, #4]
 806858e:	2204      	movs	r2, #4
 8068590:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8068592:	2301      	movs	r3, #1
 8068594:	e05e      	b.n	8068654 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8068596:	687b      	ldr	r3, [r7, #4]
 8068598:	681b      	ldr	r3, [r3, #0]
 806859a:	689b      	ldr	r3, [r3, #8]
 806859c:	687a      	ldr	r2, [r7, #4]
 806859e:	6812      	ldr	r2, [r2, #0]
 80685a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80685a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80685a8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80685aa:	687b      	ldr	r3, [r7, #4]
 80685ac:	681b      	ldr	r3, [r3, #0]
 80685ae:	6899      	ldr	r1, [r3, #8]
 80685b0:	687b      	ldr	r3, [r7, #4]
 80685b2:	685a      	ldr	r2, [r3, #4]
 80685b4:	687b      	ldr	r3, [r7, #4]
 80685b6:	691b      	ldr	r3, [r3, #16]
 80685b8:	431a      	orrs	r2, r3
 80685ba:	687b      	ldr	r3, [r7, #4]
 80685bc:	695b      	ldr	r3, [r3, #20]
 80685be:	431a      	orrs	r2, r3
 80685c0:	687b      	ldr	r3, [r7, #4]
 80685c2:	681b      	ldr	r3, [r3, #0]
 80685c4:	430a      	orrs	r2, r1
 80685c6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80685c8:	687b      	ldr	r3, [r7, #4]
 80685ca:	681b      	ldr	r3, [r3, #0]
 80685cc:	687a      	ldr	r2, [r7, #4]
 80685ce:	68d2      	ldr	r2, [r2, #12]
 80685d0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80685d2:	687b      	ldr	r3, [r7, #4]
 80685d4:	681b      	ldr	r3, [r3, #0]
 80685d6:	6919      	ldr	r1, [r3, #16]
 80685d8:	687b      	ldr	r3, [r7, #4]
 80685da:	689b      	ldr	r3, [r3, #8]
 80685dc:	041a      	lsls	r2, r3, #16
 80685de:	687b      	ldr	r3, [r7, #4]
 80685e0:	681b      	ldr	r3, [r3, #0]
 80685e2:	430a      	orrs	r2, r1
 80685e4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80685e6:	687b      	ldr	r3, [r7, #4]
 80685e8:	681b      	ldr	r3, [r3, #0]
 80685ea:	68da      	ldr	r2, [r3, #12]
 80685ec:	687b      	ldr	r3, [r7, #4]
 80685ee:	681b      	ldr	r3, [r3, #0]
 80685f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80685f4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80685f6:	687b      	ldr	r3, [r7, #4]
 80685f8:	681b      	ldr	r3, [r3, #0]
 80685fa:	689b      	ldr	r3, [r3, #8]
 80685fc:	f003 0320 	and.w	r3, r3, #32
 8068600:	2b00      	cmp	r3, #0
 8068602:	d10e      	bne.n	8068622 <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8068604:	6878      	ldr	r0, [r7, #4]
 8068606:	f000 f82b 	bl	8068660 <HAL_RTC_WaitForSynchro>
 806860a:	4603      	mov	r3, r0
 806860c:	2b00      	cmp	r3, #0
 806860e:	d008      	beq.n	8068622 <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8068610:	687b      	ldr	r3, [r7, #4]
 8068612:	681b      	ldr	r3, [r3, #0]
 8068614:	22ff      	movs	r2, #255	; 0xff
 8068616:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8068618:	687b      	ldr	r3, [r7, #4]
 806861a:	2204      	movs	r2, #4
 806861c:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 806861e:	2301      	movs	r3, #1
 8068620:	e018      	b.n	8068654 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8068622:	687b      	ldr	r3, [r7, #4]
 8068624:	681b      	ldr	r3, [r3, #0]
 8068626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8068628:	687b      	ldr	r3, [r7, #4]
 806862a:	681b      	ldr	r3, [r3, #0]
 806862c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8068630:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8068632:	687b      	ldr	r3, [r7, #4]
 8068634:	681b      	ldr	r3, [r3, #0]
 8068636:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8068638:	687b      	ldr	r3, [r7, #4]
 806863a:	699a      	ldr	r2, [r3, #24]
 806863c:	687b      	ldr	r3, [r7, #4]
 806863e:	681b      	ldr	r3, [r3, #0]
 8068640:	430a      	orrs	r2, r1
 8068642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8068644:	687b      	ldr	r3, [r7, #4]
 8068646:	681b      	ldr	r3, [r3, #0]
 8068648:	22ff      	movs	r2, #255	; 0xff
 806864a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 806864c:	687b      	ldr	r3, [r7, #4]
 806864e:	2201      	movs	r2, #1
 8068650:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8068652:	2300      	movs	r3, #0
  }
}
 8068654:	4618      	mov	r0, r3
 8068656:	3708      	adds	r7, #8
 8068658:	46bd      	mov	sp, r7
 806865a:	bd80      	pop	{r7, pc}
 806865c:	080771f4 	.word	0x080771f4

08068660 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8068660:	b580      	push	{r7, lr}
 8068662:	b084      	sub	sp, #16
 8068664:	af00      	add	r7, sp, #0
 8068666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8068668:	2300      	movs	r3, #0
 806866a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 806866c:	687b      	ldr	r3, [r7, #4]
 806866e:	681b      	ldr	r3, [r3, #0]
 8068670:	68da      	ldr	r2, [r3, #12]
 8068672:	687b      	ldr	r3, [r7, #4]
 8068674:	681b      	ldr	r3, [r3, #0]
 8068676:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 806867a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 806867c:	f7fb f920 	bl	80638c0 <HAL_GetTick>
 8068680:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8068682:	e009      	b.n	8068698 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8068684:	f7fb f91c 	bl	80638c0 <HAL_GetTick>
 8068688:	4602      	mov	r2, r0
 806868a:	68fb      	ldr	r3, [r7, #12]
 806868c:	1ad3      	subs	r3, r2, r3
 806868e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8068692:	d901      	bls.n	8068698 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8068694:	2303      	movs	r3, #3
 8068696:	e007      	b.n	80686a8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8068698:	687b      	ldr	r3, [r7, #4]
 806869a:	681b      	ldr	r3, [r3, #0]
 806869c:	68db      	ldr	r3, [r3, #12]
 806869e:	f003 0320 	and.w	r3, r3, #32
 80686a2:	2b00      	cmp	r3, #0
 80686a4:	d0ee      	beq.n	8068684 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80686a6:	2300      	movs	r3, #0
}
 80686a8:	4618      	mov	r0, r3
 80686aa:	3710      	adds	r7, #16
 80686ac:	46bd      	mov	sp, r7
 80686ae:	bd80      	pop	{r7, pc}

080686b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80686b0:	b580      	push	{r7, lr}
 80686b2:	b084      	sub	sp, #16
 80686b4:	af00      	add	r7, sp, #0
 80686b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80686b8:	2300      	movs	r3, #0
 80686ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80686bc:	687b      	ldr	r3, [r7, #4]
 80686be:	681b      	ldr	r3, [r3, #0]
 80686c0:	68db      	ldr	r3, [r3, #12]
 80686c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80686c6:	2b00      	cmp	r3, #0
 80686c8:	d119      	bne.n	80686fe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80686ca:	687b      	ldr	r3, [r7, #4]
 80686cc:	681b      	ldr	r3, [r3, #0]
 80686ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80686d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80686d4:	f7fb f8f4 	bl	80638c0 <HAL_GetTick>
 80686d8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80686da:	e009      	b.n	80686f0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80686dc:	f7fb f8f0 	bl	80638c0 <HAL_GetTick>
 80686e0:	4602      	mov	r2, r0
 80686e2:	68fb      	ldr	r3, [r7, #12]
 80686e4:	1ad3      	subs	r3, r2, r3
 80686e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80686ea:	d901      	bls.n	80686f0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80686ec:	2303      	movs	r3, #3
 80686ee:	e007      	b.n	8068700 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80686f0:	687b      	ldr	r3, [r7, #4]
 80686f2:	681b      	ldr	r3, [r3, #0]
 80686f4:	68db      	ldr	r3, [r3, #12]
 80686f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80686fa:	2b00      	cmp	r3, #0
 80686fc:	d0ee      	beq.n	80686dc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80686fe:	2300      	movs	r3, #0
}
 8068700:	4618      	mov	r0, r3
 8068702:	3710      	adds	r7, #16
 8068704:	46bd      	mov	sp, r7
 8068706:	bd80      	pop	{r7, pc}

08068708 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8068708:	b580      	push	{r7, lr}
 806870a:	b086      	sub	sp, #24
 806870c:	af00      	add	r7, sp, #0
 806870e:	60f8      	str	r0, [r7, #12]
 8068710:	60b9      	str	r1, [r7, #8]
 8068712:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8068714:	2300      	movs	r3, #0
 8068716:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
 8068718:	68bb      	ldr	r3, [r7, #8]
 806871a:	2b00      	cmp	r3, #0
 806871c:	d03d      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 806871e:	68bb      	ldr	r3, [r7, #8]
 8068720:	2b01      	cmp	r3, #1
 8068722:	d03a      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068724:	68bb      	ldr	r3, [r7, #8]
 8068726:	2b02      	cmp	r3, #2
 8068728:	d037      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 806872a:	68bb      	ldr	r3, [r7, #8]
 806872c:	2b03      	cmp	r3, #3
 806872e:	d034      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068730:	68bb      	ldr	r3, [r7, #8]
 8068732:	2b04      	cmp	r3, #4
 8068734:	d031      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068736:	68bb      	ldr	r3, [r7, #8]
 8068738:	2b05      	cmp	r3, #5
 806873a:	d02e      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 806873c:	68bb      	ldr	r3, [r7, #8]
 806873e:	2b06      	cmp	r3, #6
 8068740:	d02b      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068742:	68bb      	ldr	r3, [r7, #8]
 8068744:	2b07      	cmp	r3, #7
 8068746:	d028      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068748:	68bb      	ldr	r3, [r7, #8]
 806874a:	2b08      	cmp	r3, #8
 806874c:	d025      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 806874e:	68bb      	ldr	r3, [r7, #8]
 8068750:	2b09      	cmp	r3, #9
 8068752:	d022      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068754:	68bb      	ldr	r3, [r7, #8]
 8068756:	2b0a      	cmp	r3, #10
 8068758:	d01f      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 806875a:	68bb      	ldr	r3, [r7, #8]
 806875c:	2b0b      	cmp	r3, #11
 806875e:	d01c      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068760:	68bb      	ldr	r3, [r7, #8]
 8068762:	2b0c      	cmp	r3, #12
 8068764:	d019      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068766:	68bb      	ldr	r3, [r7, #8]
 8068768:	2b0d      	cmp	r3, #13
 806876a:	d016      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 806876c:	68bb      	ldr	r3, [r7, #8]
 806876e:	2b0e      	cmp	r3, #14
 8068770:	d013      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068772:	68bb      	ldr	r3, [r7, #8]
 8068774:	2b0f      	cmp	r3, #15
 8068776:	d010      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068778:	68bb      	ldr	r3, [r7, #8]
 806877a:	2b10      	cmp	r3, #16
 806877c:	d00d      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 806877e:	68bb      	ldr	r3, [r7, #8]
 8068780:	2b11      	cmp	r3, #17
 8068782:	d00a      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068784:	68bb      	ldr	r3, [r7, #8]
 8068786:	2b12      	cmp	r3, #18
 8068788:	d007      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 806878a:	68bb      	ldr	r3, [r7, #8]
 806878c:	2b13      	cmp	r3, #19
 806878e:	d004      	beq.n	806879a <HAL_RTCEx_BKUPWrite+0x92>
 8068790:	f240 416c 	movw	r1, #1132	; 0x46c
 8068794:	4809      	ldr	r0, [pc, #36]	; (80687bc <HAL_RTCEx_BKUPWrite+0xb4>)
 8068796:	f7fa fbc8 	bl	8062f2a <assert_failed>

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 806879a:	68fb      	ldr	r3, [r7, #12]
 806879c:	681b      	ldr	r3, [r3, #0]
 806879e:	3350      	adds	r3, #80	; 0x50
 80687a0:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80687a2:	68bb      	ldr	r3, [r7, #8]
 80687a4:	009b      	lsls	r3, r3, #2
 80687a6:	697a      	ldr	r2, [r7, #20]
 80687a8:	4413      	add	r3, r2
 80687aa:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80687ac:	697b      	ldr	r3, [r7, #20]
 80687ae:	687a      	ldr	r2, [r7, #4]
 80687b0:	601a      	str	r2, [r3, #0]
}
 80687b2:	bf00      	nop
 80687b4:	3718      	adds	r7, #24
 80687b6:	46bd      	mov	sp, r7
 80687b8:	bd80      	pop	{r7, pc}
 80687ba:	bf00      	nop
 80687bc:	0807722c 	.word	0x0807722c

080687c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80687c0:	b580      	push	{r7, lr}
 80687c2:	b082      	sub	sp, #8
 80687c4:	af00      	add	r7, sp, #0
 80687c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80687c8:	687b      	ldr	r3, [r7, #4]
 80687ca:	2b00      	cmp	r3, #0
 80687cc:	d101      	bne.n	80687d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80687ce:	2301      	movs	r3, #1
 80687d0:	e18c      	b.n	8068aec <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80687d2:	687b      	ldr	r3, [r7, #4]
 80687d4:	681b      	ldr	r3, [r3, #0]
 80687d6:	4a75      	ldr	r2, [pc, #468]	; (80689ac <HAL_SPI_Init+0x1ec>)
 80687d8:	4293      	cmp	r3, r2
 80687da:	d018      	beq.n	806880e <HAL_SPI_Init+0x4e>
 80687dc:	687b      	ldr	r3, [r7, #4]
 80687de:	681b      	ldr	r3, [r3, #0]
 80687e0:	4a73      	ldr	r2, [pc, #460]	; (80689b0 <HAL_SPI_Init+0x1f0>)
 80687e2:	4293      	cmp	r3, r2
 80687e4:	d013      	beq.n	806880e <HAL_SPI_Init+0x4e>
 80687e6:	687b      	ldr	r3, [r7, #4]
 80687e8:	681b      	ldr	r3, [r3, #0]
 80687ea:	4a72      	ldr	r2, [pc, #456]	; (80689b4 <HAL_SPI_Init+0x1f4>)
 80687ec:	4293      	cmp	r3, r2
 80687ee:	d00e      	beq.n	806880e <HAL_SPI_Init+0x4e>
 80687f0:	687b      	ldr	r3, [r7, #4]
 80687f2:	681b      	ldr	r3, [r3, #0]
 80687f4:	4a70      	ldr	r2, [pc, #448]	; (80689b8 <HAL_SPI_Init+0x1f8>)
 80687f6:	4293      	cmp	r3, r2
 80687f8:	d009      	beq.n	806880e <HAL_SPI_Init+0x4e>
 80687fa:	687b      	ldr	r3, [r7, #4]
 80687fc:	681b      	ldr	r3, [r3, #0]
 80687fe:	4a6f      	ldr	r2, [pc, #444]	; (80689bc <HAL_SPI_Init+0x1fc>)
 8068800:	4293      	cmp	r3, r2
 8068802:	d004      	beq.n	806880e <HAL_SPI_Init+0x4e>
 8068804:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8068808:	486d      	ldr	r0, [pc, #436]	; (80689c0 <HAL_SPI_Init+0x200>)
 806880a:	f7fa fb8e 	bl	8062f2a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 806880e:	687b      	ldr	r3, [r7, #4]
 8068810:	685b      	ldr	r3, [r3, #4]
 8068812:	2b00      	cmp	r3, #0
 8068814:	d009      	beq.n	806882a <HAL_SPI_Init+0x6a>
 8068816:	687b      	ldr	r3, [r7, #4]
 8068818:	685b      	ldr	r3, [r3, #4]
 806881a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 806881e:	d004      	beq.n	806882a <HAL_SPI_Init+0x6a>
 8068820:	f240 1143 	movw	r1, #323	; 0x143
 8068824:	4866      	ldr	r0, [pc, #408]	; (80689c0 <HAL_SPI_Init+0x200>)
 8068826:	f7fa fb80 	bl	8062f2a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 806882a:	687b      	ldr	r3, [r7, #4]
 806882c:	689b      	ldr	r3, [r3, #8]
 806882e:	2b00      	cmp	r3, #0
 8068830:	d00e      	beq.n	8068850 <HAL_SPI_Init+0x90>
 8068832:	687b      	ldr	r3, [r7, #4]
 8068834:	689b      	ldr	r3, [r3, #8]
 8068836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 806883a:	d009      	beq.n	8068850 <HAL_SPI_Init+0x90>
 806883c:	687b      	ldr	r3, [r7, #4]
 806883e:	689b      	ldr	r3, [r3, #8]
 8068840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8068844:	d004      	beq.n	8068850 <HAL_SPI_Init+0x90>
 8068846:	f44f 71a2 	mov.w	r1, #324	; 0x144
 806884a:	485d      	ldr	r0, [pc, #372]	; (80689c0 <HAL_SPI_Init+0x200>)
 806884c:	f7fa fb6d 	bl	8062f2a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8068850:	687b      	ldr	r3, [r7, #4]
 8068852:	68db      	ldr	r3, [r3, #12]
 8068854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8068858:	d008      	beq.n	806886c <HAL_SPI_Init+0xac>
 806885a:	687b      	ldr	r3, [r7, #4]
 806885c:	68db      	ldr	r3, [r3, #12]
 806885e:	2b00      	cmp	r3, #0
 8068860:	d004      	beq.n	806886c <HAL_SPI_Init+0xac>
 8068862:	f240 1145 	movw	r1, #325	; 0x145
 8068866:	4856      	ldr	r0, [pc, #344]	; (80689c0 <HAL_SPI_Init+0x200>)
 8068868:	f7fa fb5f 	bl	8062f2a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 806886c:	687b      	ldr	r3, [r7, #4]
 806886e:	699b      	ldr	r3, [r3, #24]
 8068870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8068874:	d00d      	beq.n	8068892 <HAL_SPI_Init+0xd2>
 8068876:	687b      	ldr	r3, [r7, #4]
 8068878:	699b      	ldr	r3, [r3, #24]
 806887a:	2b00      	cmp	r3, #0
 806887c:	d009      	beq.n	8068892 <HAL_SPI_Init+0xd2>
 806887e:	687b      	ldr	r3, [r7, #4]
 8068880:	699b      	ldr	r3, [r3, #24]
 8068882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8068886:	d004      	beq.n	8068892 <HAL_SPI_Init+0xd2>
 8068888:	f44f 71a3 	mov.w	r1, #326	; 0x146
 806888c:	484c      	ldr	r0, [pc, #304]	; (80689c0 <HAL_SPI_Init+0x200>)
 806888e:	f7fa fb4c 	bl	8062f2a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8068892:	687b      	ldr	r3, [r7, #4]
 8068894:	69db      	ldr	r3, [r3, #28]
 8068896:	2b00      	cmp	r3, #0
 8068898:	d020      	beq.n	80688dc <HAL_SPI_Init+0x11c>
 806889a:	687b      	ldr	r3, [r7, #4]
 806889c:	69db      	ldr	r3, [r3, #28]
 806889e:	2b08      	cmp	r3, #8
 80688a0:	d01c      	beq.n	80688dc <HAL_SPI_Init+0x11c>
 80688a2:	687b      	ldr	r3, [r7, #4]
 80688a4:	69db      	ldr	r3, [r3, #28]
 80688a6:	2b10      	cmp	r3, #16
 80688a8:	d018      	beq.n	80688dc <HAL_SPI_Init+0x11c>
 80688aa:	687b      	ldr	r3, [r7, #4]
 80688ac:	69db      	ldr	r3, [r3, #28]
 80688ae:	2b18      	cmp	r3, #24
 80688b0:	d014      	beq.n	80688dc <HAL_SPI_Init+0x11c>
 80688b2:	687b      	ldr	r3, [r7, #4]
 80688b4:	69db      	ldr	r3, [r3, #28]
 80688b6:	2b20      	cmp	r3, #32
 80688b8:	d010      	beq.n	80688dc <HAL_SPI_Init+0x11c>
 80688ba:	687b      	ldr	r3, [r7, #4]
 80688bc:	69db      	ldr	r3, [r3, #28]
 80688be:	2b28      	cmp	r3, #40	; 0x28
 80688c0:	d00c      	beq.n	80688dc <HAL_SPI_Init+0x11c>
 80688c2:	687b      	ldr	r3, [r7, #4]
 80688c4:	69db      	ldr	r3, [r3, #28]
 80688c6:	2b30      	cmp	r3, #48	; 0x30
 80688c8:	d008      	beq.n	80688dc <HAL_SPI_Init+0x11c>
 80688ca:	687b      	ldr	r3, [r7, #4]
 80688cc:	69db      	ldr	r3, [r3, #28]
 80688ce:	2b38      	cmp	r3, #56	; 0x38
 80688d0:	d004      	beq.n	80688dc <HAL_SPI_Init+0x11c>
 80688d2:	f240 1147 	movw	r1, #327	; 0x147
 80688d6:	483a      	ldr	r0, [pc, #232]	; (80689c0 <HAL_SPI_Init+0x200>)
 80688d8:	f7fa fb27 	bl	8062f2a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80688dc:	687b      	ldr	r3, [r7, #4]
 80688de:	6a1b      	ldr	r3, [r3, #32]
 80688e0:	2b00      	cmp	r3, #0
 80688e2:	d008      	beq.n	80688f6 <HAL_SPI_Init+0x136>
 80688e4:	687b      	ldr	r3, [r7, #4]
 80688e6:	6a1b      	ldr	r3, [r3, #32]
 80688e8:	2b80      	cmp	r3, #128	; 0x80
 80688ea:	d004      	beq.n	80688f6 <HAL_SPI_Init+0x136>
 80688ec:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80688f0:	4833      	ldr	r0, [pc, #204]	; (80689c0 <HAL_SPI_Init+0x200>)
 80688f2:	f7fa fb1a 	bl	8062f2a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80688f6:	687b      	ldr	r3, [r7, #4]
 80688f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80688fa:	2b00      	cmp	r3, #0
 80688fc:	d008      	beq.n	8068910 <HAL_SPI_Init+0x150>
 80688fe:	687b      	ldr	r3, [r7, #4]
 8068900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8068902:	2b10      	cmp	r3, #16
 8068904:	d004      	beq.n	8068910 <HAL_SPI_Init+0x150>
 8068906:	f240 1149 	movw	r1, #329	; 0x149
 806890a:	482d      	ldr	r0, [pc, #180]	; (80689c0 <HAL_SPI_Init+0x200>)
 806890c:	f7fa fb0d 	bl	8062f2a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8068910:	687b      	ldr	r3, [r7, #4]
 8068912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8068914:	2b00      	cmp	r3, #0
 8068916:	d155      	bne.n	80689c4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8068918:	687b      	ldr	r3, [r7, #4]
 806891a:	691b      	ldr	r3, [r3, #16]
 806891c:	2b00      	cmp	r3, #0
 806891e:	d008      	beq.n	8068932 <HAL_SPI_Init+0x172>
 8068920:	687b      	ldr	r3, [r7, #4]
 8068922:	691b      	ldr	r3, [r3, #16]
 8068924:	2b02      	cmp	r3, #2
 8068926:	d004      	beq.n	8068932 <HAL_SPI_Init+0x172>
 8068928:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 806892c:	4824      	ldr	r0, [pc, #144]	; (80689c0 <HAL_SPI_Init+0x200>)
 806892e:	f7fa fafc 	bl	8062f2a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8068932:	687b      	ldr	r3, [r7, #4]
 8068934:	695b      	ldr	r3, [r3, #20]
 8068936:	2b00      	cmp	r3, #0
 8068938:	d008      	beq.n	806894c <HAL_SPI_Init+0x18c>
 806893a:	687b      	ldr	r3, [r7, #4]
 806893c:	695b      	ldr	r3, [r3, #20]
 806893e:	2b01      	cmp	r3, #1
 8068940:	d004      	beq.n	806894c <HAL_SPI_Init+0x18c>
 8068942:	f240 114d 	movw	r1, #333	; 0x14d
 8068946:	481e      	ldr	r0, [pc, #120]	; (80689c0 <HAL_SPI_Init+0x200>)
 8068948:	f7fa faef 	bl	8062f2a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 806894c:	687b      	ldr	r3, [r7, #4]
 806894e:	685b      	ldr	r3, [r3, #4]
 8068950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8068954:	d125      	bne.n	80689a2 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8068956:	687b      	ldr	r3, [r7, #4]
 8068958:	69db      	ldr	r3, [r3, #28]
 806895a:	2b00      	cmp	r3, #0
 806895c:	d05d      	beq.n	8068a1a <HAL_SPI_Init+0x25a>
 806895e:	687b      	ldr	r3, [r7, #4]
 8068960:	69db      	ldr	r3, [r3, #28]
 8068962:	2b08      	cmp	r3, #8
 8068964:	d059      	beq.n	8068a1a <HAL_SPI_Init+0x25a>
 8068966:	687b      	ldr	r3, [r7, #4]
 8068968:	69db      	ldr	r3, [r3, #28]
 806896a:	2b10      	cmp	r3, #16
 806896c:	d055      	beq.n	8068a1a <HAL_SPI_Init+0x25a>
 806896e:	687b      	ldr	r3, [r7, #4]
 8068970:	69db      	ldr	r3, [r3, #28]
 8068972:	2b18      	cmp	r3, #24
 8068974:	d051      	beq.n	8068a1a <HAL_SPI_Init+0x25a>
 8068976:	687b      	ldr	r3, [r7, #4]
 8068978:	69db      	ldr	r3, [r3, #28]
 806897a:	2b20      	cmp	r3, #32
 806897c:	d04d      	beq.n	8068a1a <HAL_SPI_Init+0x25a>
 806897e:	687b      	ldr	r3, [r7, #4]
 8068980:	69db      	ldr	r3, [r3, #28]
 8068982:	2b28      	cmp	r3, #40	; 0x28
 8068984:	d049      	beq.n	8068a1a <HAL_SPI_Init+0x25a>
 8068986:	687b      	ldr	r3, [r7, #4]
 8068988:	69db      	ldr	r3, [r3, #28]
 806898a:	2b30      	cmp	r3, #48	; 0x30
 806898c:	d045      	beq.n	8068a1a <HAL_SPI_Init+0x25a>
 806898e:	687b      	ldr	r3, [r7, #4]
 8068990:	69db      	ldr	r3, [r3, #28]
 8068992:	2b38      	cmp	r3, #56	; 0x38
 8068994:	d041      	beq.n	8068a1a <HAL_SPI_Init+0x25a>
 8068996:	f240 1151 	movw	r1, #337	; 0x151
 806899a:	4809      	ldr	r0, [pc, #36]	; (80689c0 <HAL_SPI_Init+0x200>)
 806899c:	f7fa fac5 	bl	8062f2a <assert_failed>
 80689a0:	e03b      	b.n	8068a1a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80689a2:	687b      	ldr	r3, [r7, #4]
 80689a4:	2200      	movs	r2, #0
 80689a6:	61da      	str	r2, [r3, #28]
 80689a8:	e037      	b.n	8068a1a <HAL_SPI_Init+0x25a>
 80689aa:	bf00      	nop
 80689ac:	40013000 	.word	0x40013000
 80689b0:	40003800 	.word	0x40003800
 80689b4:	40003c00 	.word	0x40003c00
 80689b8:	40013400 	.word	0x40013400
 80689bc:	40015000 	.word	0x40015000
 80689c0:	08077268 	.word	0x08077268
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80689c4:	687b      	ldr	r3, [r7, #4]
 80689c6:	69db      	ldr	r3, [r3, #28]
 80689c8:	2b00      	cmp	r3, #0
 80689ca:	d020      	beq.n	8068a0e <HAL_SPI_Init+0x24e>
 80689cc:	687b      	ldr	r3, [r7, #4]
 80689ce:	69db      	ldr	r3, [r3, #28]
 80689d0:	2b08      	cmp	r3, #8
 80689d2:	d01c      	beq.n	8068a0e <HAL_SPI_Init+0x24e>
 80689d4:	687b      	ldr	r3, [r7, #4]
 80689d6:	69db      	ldr	r3, [r3, #28]
 80689d8:	2b10      	cmp	r3, #16
 80689da:	d018      	beq.n	8068a0e <HAL_SPI_Init+0x24e>
 80689dc:	687b      	ldr	r3, [r7, #4]
 80689de:	69db      	ldr	r3, [r3, #28]
 80689e0:	2b18      	cmp	r3, #24
 80689e2:	d014      	beq.n	8068a0e <HAL_SPI_Init+0x24e>
 80689e4:	687b      	ldr	r3, [r7, #4]
 80689e6:	69db      	ldr	r3, [r3, #28]
 80689e8:	2b20      	cmp	r3, #32
 80689ea:	d010      	beq.n	8068a0e <HAL_SPI_Init+0x24e>
 80689ec:	687b      	ldr	r3, [r7, #4]
 80689ee:	69db      	ldr	r3, [r3, #28]
 80689f0:	2b28      	cmp	r3, #40	; 0x28
 80689f2:	d00c      	beq.n	8068a0e <HAL_SPI_Init+0x24e>
 80689f4:	687b      	ldr	r3, [r7, #4]
 80689f6:	69db      	ldr	r3, [r3, #28]
 80689f8:	2b30      	cmp	r3, #48	; 0x30
 80689fa:	d008      	beq.n	8068a0e <HAL_SPI_Init+0x24e>
 80689fc:	687b      	ldr	r3, [r7, #4]
 80689fe:	69db      	ldr	r3, [r3, #28]
 8068a00:	2b38      	cmp	r3, #56	; 0x38
 8068a02:	d004      	beq.n	8068a0e <HAL_SPI_Init+0x24e>
 8068a04:	f240 115b 	movw	r1, #347	; 0x15b
 8068a08:	483a      	ldr	r0, [pc, #232]	; (8068af4 <HAL_SPI_Init+0x334>)
 8068a0a:	f7fa fa8e 	bl	8062f2a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8068a0e:	687b      	ldr	r3, [r7, #4]
 8068a10:	2200      	movs	r2, #0
 8068a12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8068a14:	687b      	ldr	r3, [r7, #4]
 8068a16:	2200      	movs	r2, #0
 8068a18:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8068a1a:	687b      	ldr	r3, [r7, #4]
 8068a1c:	2200      	movs	r2, #0
 8068a1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8068a20:	687b      	ldr	r3, [r7, #4]
 8068a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8068a26:	b2db      	uxtb	r3, r3
 8068a28:	2b00      	cmp	r3, #0
 8068a2a:	d106      	bne.n	8068a3a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8068a2c:	687b      	ldr	r3, [r7, #4]
 8068a2e:	2200      	movs	r2, #0
 8068a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8068a34:	6878      	ldr	r0, [r7, #4]
 8068a36:	f7fa fb99 	bl	806316c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8068a3a:	687b      	ldr	r3, [r7, #4]
 8068a3c:	2202      	movs	r2, #2
 8068a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8068a42:	687b      	ldr	r3, [r7, #4]
 8068a44:	681b      	ldr	r3, [r3, #0]
 8068a46:	681a      	ldr	r2, [r3, #0]
 8068a48:	687b      	ldr	r3, [r7, #4]
 8068a4a:	681b      	ldr	r3, [r3, #0]
 8068a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8068a50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8068a52:	687b      	ldr	r3, [r7, #4]
 8068a54:	685b      	ldr	r3, [r3, #4]
 8068a56:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8068a5a:	687b      	ldr	r3, [r7, #4]
 8068a5c:	689b      	ldr	r3, [r3, #8]
 8068a5e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8068a62:	431a      	orrs	r2, r3
 8068a64:	687b      	ldr	r3, [r7, #4]
 8068a66:	68db      	ldr	r3, [r3, #12]
 8068a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8068a6c:	431a      	orrs	r2, r3
 8068a6e:	687b      	ldr	r3, [r7, #4]
 8068a70:	691b      	ldr	r3, [r3, #16]
 8068a72:	f003 0302 	and.w	r3, r3, #2
 8068a76:	431a      	orrs	r2, r3
 8068a78:	687b      	ldr	r3, [r7, #4]
 8068a7a:	695b      	ldr	r3, [r3, #20]
 8068a7c:	f003 0301 	and.w	r3, r3, #1
 8068a80:	431a      	orrs	r2, r3
 8068a82:	687b      	ldr	r3, [r7, #4]
 8068a84:	699b      	ldr	r3, [r3, #24]
 8068a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8068a8a:	431a      	orrs	r2, r3
 8068a8c:	687b      	ldr	r3, [r7, #4]
 8068a8e:	69db      	ldr	r3, [r3, #28]
 8068a90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8068a94:	431a      	orrs	r2, r3
 8068a96:	687b      	ldr	r3, [r7, #4]
 8068a98:	6a1b      	ldr	r3, [r3, #32]
 8068a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8068a9e:	ea42 0103 	orr.w	r1, r2, r3
 8068aa2:	687b      	ldr	r3, [r7, #4]
 8068aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8068aa6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8068aaa:	687b      	ldr	r3, [r7, #4]
 8068aac:	681b      	ldr	r3, [r3, #0]
 8068aae:	430a      	orrs	r2, r1
 8068ab0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8068ab2:	687b      	ldr	r3, [r7, #4]
 8068ab4:	699b      	ldr	r3, [r3, #24]
 8068ab6:	0c1b      	lsrs	r3, r3, #16
 8068ab8:	f003 0104 	and.w	r1, r3, #4
 8068abc:	687b      	ldr	r3, [r7, #4]
 8068abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8068ac0:	f003 0210 	and.w	r2, r3, #16
 8068ac4:	687b      	ldr	r3, [r7, #4]
 8068ac6:	681b      	ldr	r3, [r3, #0]
 8068ac8:	430a      	orrs	r2, r1
 8068aca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8068acc:	687b      	ldr	r3, [r7, #4]
 8068ace:	681b      	ldr	r3, [r3, #0]
 8068ad0:	69da      	ldr	r2, [r3, #28]
 8068ad2:	687b      	ldr	r3, [r7, #4]
 8068ad4:	681b      	ldr	r3, [r3, #0]
 8068ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8068ada:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8068adc:	687b      	ldr	r3, [r7, #4]
 8068ade:	2200      	movs	r2, #0
 8068ae0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8068ae2:	687b      	ldr	r3, [r7, #4]
 8068ae4:	2201      	movs	r2, #1
 8068ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8068aea:	2300      	movs	r3, #0
}
 8068aec:	4618      	mov	r0, r3
 8068aee:	3708      	adds	r7, #8
 8068af0:	46bd      	mov	sp, r7
 8068af2:	bd80      	pop	{r7, pc}
 8068af4:	08077268 	.word	0x08077268

08068af8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8068af8:	b580      	push	{r7, lr}
 8068afa:	b08c      	sub	sp, #48	; 0x30
 8068afc:	af00      	add	r7, sp, #0
 8068afe:	60f8      	str	r0, [r7, #12]
 8068b00:	60b9      	str	r1, [r7, #8]
 8068b02:	607a      	str	r2, [r7, #4]
 8068b04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8068b06:	2301      	movs	r3, #1
 8068b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8068b0a:	2300      	movs	r3, #0
 8068b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8068b10:	68fb      	ldr	r3, [r7, #12]
 8068b12:	689b      	ldr	r3, [r3, #8]
 8068b14:	2b00      	cmp	r3, #0
 8068b16:	d004      	beq.n	8068b22 <HAL_SPI_TransmitReceive+0x2a>
 8068b18:	f240 417e 	movw	r1, #1150	; 0x47e
 8068b1c:	4884      	ldr	r0, [pc, #528]	; (8068d30 <HAL_SPI_TransmitReceive+0x238>)
 8068b1e:	f7fa fa04 	bl	8062f2a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8068b22:	68fb      	ldr	r3, [r7, #12]
 8068b24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8068b28:	2b01      	cmp	r3, #1
 8068b2a:	d101      	bne.n	8068b30 <HAL_SPI_TransmitReceive+0x38>
 8068b2c:	2302      	movs	r3, #2
 8068b2e:	e18d      	b.n	8068e4c <HAL_SPI_TransmitReceive+0x354>
 8068b30:	68fb      	ldr	r3, [r7, #12]
 8068b32:	2201      	movs	r2, #1
 8068b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8068b38:	f7fa fec2 	bl	80638c0 <HAL_GetTick>
 8068b3c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8068b3e:	68fb      	ldr	r3, [r7, #12]
 8068b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8068b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8068b48:	68fb      	ldr	r3, [r7, #12]
 8068b4a:	685b      	ldr	r3, [r3, #4]
 8068b4c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8068b4e:	887b      	ldrh	r3, [r7, #2]
 8068b50:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8068b52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8068b56:	2b01      	cmp	r3, #1
 8068b58:	d00f      	beq.n	8068b7a <HAL_SPI_TransmitReceive+0x82>
 8068b5a:	69fb      	ldr	r3, [r7, #28]
 8068b5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8068b60:	d107      	bne.n	8068b72 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8068b62:	68fb      	ldr	r3, [r7, #12]
 8068b64:	689b      	ldr	r3, [r3, #8]
 8068b66:	2b00      	cmp	r3, #0
 8068b68:	d103      	bne.n	8068b72 <HAL_SPI_TransmitReceive+0x7a>
 8068b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8068b6e:	2b04      	cmp	r3, #4
 8068b70:	d003      	beq.n	8068b7a <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8068b72:	2302      	movs	r3, #2
 8068b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8068b78:	e15e      	b.n	8068e38 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8068b7a:	68bb      	ldr	r3, [r7, #8]
 8068b7c:	2b00      	cmp	r3, #0
 8068b7e:	d005      	beq.n	8068b8c <HAL_SPI_TransmitReceive+0x94>
 8068b80:	687b      	ldr	r3, [r7, #4]
 8068b82:	2b00      	cmp	r3, #0
 8068b84:	d002      	beq.n	8068b8c <HAL_SPI_TransmitReceive+0x94>
 8068b86:	887b      	ldrh	r3, [r7, #2]
 8068b88:	2b00      	cmp	r3, #0
 8068b8a:	d103      	bne.n	8068b94 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8068b8c:	2301      	movs	r3, #1
 8068b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8068b92:	e151      	b.n	8068e38 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8068b94:	68fb      	ldr	r3, [r7, #12]
 8068b96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8068b9a:	b2db      	uxtb	r3, r3
 8068b9c:	2b04      	cmp	r3, #4
 8068b9e:	d003      	beq.n	8068ba8 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8068ba0:	68fb      	ldr	r3, [r7, #12]
 8068ba2:	2205      	movs	r2, #5
 8068ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8068ba8:	68fb      	ldr	r3, [r7, #12]
 8068baa:	2200      	movs	r2, #0
 8068bac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8068bae:	68fb      	ldr	r3, [r7, #12]
 8068bb0:	687a      	ldr	r2, [r7, #4]
 8068bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8068bb4:	68fb      	ldr	r3, [r7, #12]
 8068bb6:	887a      	ldrh	r2, [r7, #2]
 8068bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8068bba:	68fb      	ldr	r3, [r7, #12]
 8068bbc:	887a      	ldrh	r2, [r7, #2]
 8068bbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8068bc0:	68fb      	ldr	r3, [r7, #12]
 8068bc2:	68ba      	ldr	r2, [r7, #8]
 8068bc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8068bc6:	68fb      	ldr	r3, [r7, #12]
 8068bc8:	887a      	ldrh	r2, [r7, #2]
 8068bca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8068bcc:	68fb      	ldr	r3, [r7, #12]
 8068bce:	887a      	ldrh	r2, [r7, #2]
 8068bd0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8068bd2:	68fb      	ldr	r3, [r7, #12]
 8068bd4:	2200      	movs	r2, #0
 8068bd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8068bd8:	68fb      	ldr	r3, [r7, #12]
 8068bda:	2200      	movs	r2, #0
 8068bdc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8068bde:	68fb      	ldr	r3, [r7, #12]
 8068be0:	681b      	ldr	r3, [r3, #0]
 8068be2:	681b      	ldr	r3, [r3, #0]
 8068be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8068be8:	2b40      	cmp	r3, #64	; 0x40
 8068bea:	d007      	beq.n	8068bfc <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8068bec:	68fb      	ldr	r3, [r7, #12]
 8068bee:	681b      	ldr	r3, [r3, #0]
 8068bf0:	681a      	ldr	r2, [r3, #0]
 8068bf2:	68fb      	ldr	r3, [r7, #12]
 8068bf4:	681b      	ldr	r3, [r3, #0]
 8068bf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8068bfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8068bfc:	68fb      	ldr	r3, [r7, #12]
 8068bfe:	68db      	ldr	r3, [r3, #12]
 8068c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8068c04:	d178      	bne.n	8068cf8 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8068c06:	68fb      	ldr	r3, [r7, #12]
 8068c08:	685b      	ldr	r3, [r3, #4]
 8068c0a:	2b00      	cmp	r3, #0
 8068c0c:	d002      	beq.n	8068c14 <HAL_SPI_TransmitReceive+0x11c>
 8068c0e:	8b7b      	ldrh	r3, [r7, #26]
 8068c10:	2b01      	cmp	r3, #1
 8068c12:	d166      	bne.n	8068ce2 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8068c14:	68fb      	ldr	r3, [r7, #12]
 8068c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068c18:	881a      	ldrh	r2, [r3, #0]
 8068c1a:	68fb      	ldr	r3, [r7, #12]
 8068c1c:	681b      	ldr	r3, [r3, #0]
 8068c1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8068c20:	68fb      	ldr	r3, [r7, #12]
 8068c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068c24:	1c9a      	adds	r2, r3, #2
 8068c26:	68fb      	ldr	r3, [r7, #12]
 8068c28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8068c2a:	68fb      	ldr	r3, [r7, #12]
 8068c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068c2e:	b29b      	uxth	r3, r3
 8068c30:	3b01      	subs	r3, #1
 8068c32:	b29a      	uxth	r2, r3
 8068c34:	68fb      	ldr	r3, [r7, #12]
 8068c36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8068c38:	e053      	b.n	8068ce2 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8068c3a:	68fb      	ldr	r3, [r7, #12]
 8068c3c:	681b      	ldr	r3, [r3, #0]
 8068c3e:	689b      	ldr	r3, [r3, #8]
 8068c40:	f003 0302 	and.w	r3, r3, #2
 8068c44:	2b02      	cmp	r3, #2
 8068c46:	d11b      	bne.n	8068c80 <HAL_SPI_TransmitReceive+0x188>
 8068c48:	68fb      	ldr	r3, [r7, #12]
 8068c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068c4c:	b29b      	uxth	r3, r3
 8068c4e:	2b00      	cmp	r3, #0
 8068c50:	d016      	beq.n	8068c80 <HAL_SPI_TransmitReceive+0x188>
 8068c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8068c54:	2b01      	cmp	r3, #1
 8068c56:	d113      	bne.n	8068c80 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8068c58:	68fb      	ldr	r3, [r7, #12]
 8068c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068c5c:	881a      	ldrh	r2, [r3, #0]
 8068c5e:	68fb      	ldr	r3, [r7, #12]
 8068c60:	681b      	ldr	r3, [r3, #0]
 8068c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8068c64:	68fb      	ldr	r3, [r7, #12]
 8068c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068c68:	1c9a      	adds	r2, r3, #2
 8068c6a:	68fb      	ldr	r3, [r7, #12]
 8068c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8068c6e:	68fb      	ldr	r3, [r7, #12]
 8068c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068c72:	b29b      	uxth	r3, r3
 8068c74:	3b01      	subs	r3, #1
 8068c76:	b29a      	uxth	r2, r3
 8068c78:	68fb      	ldr	r3, [r7, #12]
 8068c7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8068c7c:	2300      	movs	r3, #0
 8068c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8068c80:	68fb      	ldr	r3, [r7, #12]
 8068c82:	681b      	ldr	r3, [r3, #0]
 8068c84:	689b      	ldr	r3, [r3, #8]
 8068c86:	f003 0301 	and.w	r3, r3, #1
 8068c8a:	2b01      	cmp	r3, #1
 8068c8c:	d119      	bne.n	8068cc2 <HAL_SPI_TransmitReceive+0x1ca>
 8068c8e:	68fb      	ldr	r3, [r7, #12]
 8068c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068c92:	b29b      	uxth	r3, r3
 8068c94:	2b00      	cmp	r3, #0
 8068c96:	d014      	beq.n	8068cc2 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8068c98:	68fb      	ldr	r3, [r7, #12]
 8068c9a:	681b      	ldr	r3, [r3, #0]
 8068c9c:	68da      	ldr	r2, [r3, #12]
 8068c9e:	68fb      	ldr	r3, [r7, #12]
 8068ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8068ca2:	b292      	uxth	r2, r2
 8068ca4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8068ca6:	68fb      	ldr	r3, [r7, #12]
 8068ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8068caa:	1c9a      	adds	r2, r3, #2
 8068cac:	68fb      	ldr	r3, [r7, #12]
 8068cae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8068cb0:	68fb      	ldr	r3, [r7, #12]
 8068cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068cb4:	b29b      	uxth	r3, r3
 8068cb6:	3b01      	subs	r3, #1
 8068cb8:	b29a      	uxth	r2, r3
 8068cba:	68fb      	ldr	r3, [r7, #12]
 8068cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8068cbe:	2301      	movs	r3, #1
 8068cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8068cc2:	f7fa fdfd 	bl	80638c0 <HAL_GetTick>
 8068cc6:	4602      	mov	r2, r0
 8068cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8068cca:	1ad3      	subs	r3, r2, r3
 8068ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8068cce:	429a      	cmp	r2, r3
 8068cd0:	d807      	bhi.n	8068ce2 <HAL_SPI_TransmitReceive+0x1ea>
 8068cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8068cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8068cd8:	d003      	beq.n	8068ce2 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8068cda:	2303      	movs	r3, #3
 8068cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8068ce0:	e0aa      	b.n	8068e38 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8068ce2:	68fb      	ldr	r3, [r7, #12]
 8068ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068ce6:	b29b      	uxth	r3, r3
 8068ce8:	2b00      	cmp	r3, #0
 8068cea:	d1a6      	bne.n	8068c3a <HAL_SPI_TransmitReceive+0x142>
 8068cec:	68fb      	ldr	r3, [r7, #12]
 8068cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068cf0:	b29b      	uxth	r3, r3
 8068cf2:	2b00      	cmp	r3, #0
 8068cf4:	d1a1      	bne.n	8068c3a <HAL_SPI_TransmitReceive+0x142>
 8068cf6:	e07f      	b.n	8068df8 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8068cf8:	68fb      	ldr	r3, [r7, #12]
 8068cfa:	685b      	ldr	r3, [r3, #4]
 8068cfc:	2b00      	cmp	r3, #0
 8068cfe:	d002      	beq.n	8068d06 <HAL_SPI_TransmitReceive+0x20e>
 8068d00:	8b7b      	ldrh	r3, [r7, #26]
 8068d02:	2b01      	cmp	r3, #1
 8068d04:	d16e      	bne.n	8068de4 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8068d06:	68fb      	ldr	r3, [r7, #12]
 8068d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8068d0a:	68fb      	ldr	r3, [r7, #12]
 8068d0c:	681b      	ldr	r3, [r3, #0]
 8068d0e:	330c      	adds	r3, #12
 8068d10:	7812      	ldrb	r2, [r2, #0]
 8068d12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8068d14:	68fb      	ldr	r3, [r7, #12]
 8068d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068d18:	1c5a      	adds	r2, r3, #1
 8068d1a:	68fb      	ldr	r3, [r7, #12]
 8068d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8068d1e:	68fb      	ldr	r3, [r7, #12]
 8068d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068d22:	b29b      	uxth	r3, r3
 8068d24:	3b01      	subs	r3, #1
 8068d26:	b29a      	uxth	r2, r3
 8068d28:	68fb      	ldr	r3, [r7, #12]
 8068d2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8068d2c:	e05a      	b.n	8068de4 <HAL_SPI_TransmitReceive+0x2ec>
 8068d2e:	bf00      	nop
 8068d30:	08077268 	.word	0x08077268
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8068d34:	68fb      	ldr	r3, [r7, #12]
 8068d36:	681b      	ldr	r3, [r3, #0]
 8068d38:	689b      	ldr	r3, [r3, #8]
 8068d3a:	f003 0302 	and.w	r3, r3, #2
 8068d3e:	2b02      	cmp	r3, #2
 8068d40:	d11c      	bne.n	8068d7c <HAL_SPI_TransmitReceive+0x284>
 8068d42:	68fb      	ldr	r3, [r7, #12]
 8068d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068d46:	b29b      	uxth	r3, r3
 8068d48:	2b00      	cmp	r3, #0
 8068d4a:	d017      	beq.n	8068d7c <HAL_SPI_TransmitReceive+0x284>
 8068d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8068d4e:	2b01      	cmp	r3, #1
 8068d50:	d114      	bne.n	8068d7c <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8068d52:	68fb      	ldr	r3, [r7, #12]
 8068d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8068d56:	68fb      	ldr	r3, [r7, #12]
 8068d58:	681b      	ldr	r3, [r3, #0]
 8068d5a:	330c      	adds	r3, #12
 8068d5c:	7812      	ldrb	r2, [r2, #0]
 8068d5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8068d60:	68fb      	ldr	r3, [r7, #12]
 8068d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8068d64:	1c5a      	adds	r2, r3, #1
 8068d66:	68fb      	ldr	r3, [r7, #12]
 8068d68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8068d6a:	68fb      	ldr	r3, [r7, #12]
 8068d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068d6e:	b29b      	uxth	r3, r3
 8068d70:	3b01      	subs	r3, #1
 8068d72:	b29a      	uxth	r2, r3
 8068d74:	68fb      	ldr	r3, [r7, #12]
 8068d76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8068d78:	2300      	movs	r3, #0
 8068d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8068d7c:	68fb      	ldr	r3, [r7, #12]
 8068d7e:	681b      	ldr	r3, [r3, #0]
 8068d80:	689b      	ldr	r3, [r3, #8]
 8068d82:	f003 0301 	and.w	r3, r3, #1
 8068d86:	2b01      	cmp	r3, #1
 8068d88:	d119      	bne.n	8068dbe <HAL_SPI_TransmitReceive+0x2c6>
 8068d8a:	68fb      	ldr	r3, [r7, #12]
 8068d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068d8e:	b29b      	uxth	r3, r3
 8068d90:	2b00      	cmp	r3, #0
 8068d92:	d014      	beq.n	8068dbe <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8068d94:	68fb      	ldr	r3, [r7, #12]
 8068d96:	681b      	ldr	r3, [r3, #0]
 8068d98:	68da      	ldr	r2, [r3, #12]
 8068d9a:	68fb      	ldr	r3, [r7, #12]
 8068d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8068d9e:	b2d2      	uxtb	r2, r2
 8068da0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8068da2:	68fb      	ldr	r3, [r7, #12]
 8068da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8068da6:	1c5a      	adds	r2, r3, #1
 8068da8:	68fb      	ldr	r3, [r7, #12]
 8068daa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8068dac:	68fb      	ldr	r3, [r7, #12]
 8068dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068db0:	b29b      	uxth	r3, r3
 8068db2:	3b01      	subs	r3, #1
 8068db4:	b29a      	uxth	r2, r3
 8068db6:	68fb      	ldr	r3, [r7, #12]
 8068db8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8068dba:	2301      	movs	r3, #1
 8068dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8068dbe:	f7fa fd7f 	bl	80638c0 <HAL_GetTick>
 8068dc2:	4602      	mov	r2, r0
 8068dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8068dc6:	1ad3      	subs	r3, r2, r3
 8068dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8068dca:	429a      	cmp	r2, r3
 8068dcc:	d803      	bhi.n	8068dd6 <HAL_SPI_TransmitReceive+0x2de>
 8068dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8068dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8068dd4:	d102      	bne.n	8068ddc <HAL_SPI_TransmitReceive+0x2e4>
 8068dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8068dd8:	2b00      	cmp	r3, #0
 8068dda:	d103      	bne.n	8068de4 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8068ddc:	2303      	movs	r3, #3
 8068dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8068de2:	e029      	b.n	8068e38 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8068de4:	68fb      	ldr	r3, [r7, #12]
 8068de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8068de8:	b29b      	uxth	r3, r3
 8068dea:	2b00      	cmp	r3, #0
 8068dec:	d1a2      	bne.n	8068d34 <HAL_SPI_TransmitReceive+0x23c>
 8068dee:	68fb      	ldr	r3, [r7, #12]
 8068df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8068df2:	b29b      	uxth	r3, r3
 8068df4:	2b00      	cmp	r3, #0
 8068df6:	d19d      	bne.n	8068d34 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8068df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8068dfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8068dfc:	68f8      	ldr	r0, [r7, #12]
 8068dfe:	f000 f8b1 	bl	8068f64 <SPI_EndRxTxTransaction>
 8068e02:	4603      	mov	r3, r0
 8068e04:	2b00      	cmp	r3, #0
 8068e06:	d006      	beq.n	8068e16 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8068e08:	2301      	movs	r3, #1
 8068e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8068e0e:	68fb      	ldr	r3, [r7, #12]
 8068e10:	2220      	movs	r2, #32
 8068e12:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8068e14:	e010      	b.n	8068e38 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8068e16:	68fb      	ldr	r3, [r7, #12]
 8068e18:	689b      	ldr	r3, [r3, #8]
 8068e1a:	2b00      	cmp	r3, #0
 8068e1c:	d10b      	bne.n	8068e36 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8068e1e:	2300      	movs	r3, #0
 8068e20:	617b      	str	r3, [r7, #20]
 8068e22:	68fb      	ldr	r3, [r7, #12]
 8068e24:	681b      	ldr	r3, [r3, #0]
 8068e26:	68db      	ldr	r3, [r3, #12]
 8068e28:	617b      	str	r3, [r7, #20]
 8068e2a:	68fb      	ldr	r3, [r7, #12]
 8068e2c:	681b      	ldr	r3, [r3, #0]
 8068e2e:	689b      	ldr	r3, [r3, #8]
 8068e30:	617b      	str	r3, [r7, #20]
 8068e32:	697b      	ldr	r3, [r7, #20]
 8068e34:	e000      	b.n	8068e38 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8068e36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8068e38:	68fb      	ldr	r3, [r7, #12]
 8068e3a:	2201      	movs	r2, #1
 8068e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8068e40:	68fb      	ldr	r3, [r7, #12]
 8068e42:	2200      	movs	r2, #0
 8068e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8068e48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8068e4c:	4618      	mov	r0, r3
 8068e4e:	3730      	adds	r7, #48	; 0x30
 8068e50:	46bd      	mov	sp, r7
 8068e52:	bd80      	pop	{r7, pc}

08068e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8068e54:	b580      	push	{r7, lr}
 8068e56:	b088      	sub	sp, #32
 8068e58:	af00      	add	r7, sp, #0
 8068e5a:	60f8      	str	r0, [r7, #12]
 8068e5c:	60b9      	str	r1, [r7, #8]
 8068e5e:	603b      	str	r3, [r7, #0]
 8068e60:	4613      	mov	r3, r2
 8068e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8068e64:	f7fa fd2c 	bl	80638c0 <HAL_GetTick>
 8068e68:	4602      	mov	r2, r0
 8068e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8068e6c:	1a9b      	subs	r3, r3, r2
 8068e6e:	683a      	ldr	r2, [r7, #0]
 8068e70:	4413      	add	r3, r2
 8068e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8068e74:	f7fa fd24 	bl	80638c0 <HAL_GetTick>
 8068e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8068e7a:	4b39      	ldr	r3, [pc, #228]	; (8068f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8068e7c:	681b      	ldr	r3, [r3, #0]
 8068e7e:	015b      	lsls	r3, r3, #5
 8068e80:	0d1b      	lsrs	r3, r3, #20
 8068e82:	69fa      	ldr	r2, [r7, #28]
 8068e84:	fb02 f303 	mul.w	r3, r2, r3
 8068e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8068e8a:	e054      	b.n	8068f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8068e8c:	683b      	ldr	r3, [r7, #0]
 8068e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8068e92:	d050      	beq.n	8068f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8068e94:	f7fa fd14 	bl	80638c0 <HAL_GetTick>
 8068e98:	4602      	mov	r2, r0
 8068e9a:	69bb      	ldr	r3, [r7, #24]
 8068e9c:	1ad3      	subs	r3, r2, r3
 8068e9e:	69fa      	ldr	r2, [r7, #28]
 8068ea0:	429a      	cmp	r2, r3
 8068ea2:	d902      	bls.n	8068eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8068ea4:	69fb      	ldr	r3, [r7, #28]
 8068ea6:	2b00      	cmp	r3, #0
 8068ea8:	d13d      	bne.n	8068f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8068eaa:	68fb      	ldr	r3, [r7, #12]
 8068eac:	681b      	ldr	r3, [r3, #0]
 8068eae:	685a      	ldr	r2, [r3, #4]
 8068eb0:	68fb      	ldr	r3, [r7, #12]
 8068eb2:	681b      	ldr	r3, [r3, #0]
 8068eb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8068eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8068eba:	68fb      	ldr	r3, [r7, #12]
 8068ebc:	685b      	ldr	r3, [r3, #4]
 8068ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8068ec2:	d111      	bne.n	8068ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8068ec4:	68fb      	ldr	r3, [r7, #12]
 8068ec6:	689b      	ldr	r3, [r3, #8]
 8068ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8068ecc:	d004      	beq.n	8068ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8068ece:	68fb      	ldr	r3, [r7, #12]
 8068ed0:	689b      	ldr	r3, [r3, #8]
 8068ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8068ed6:	d107      	bne.n	8068ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8068ed8:	68fb      	ldr	r3, [r7, #12]
 8068eda:	681b      	ldr	r3, [r3, #0]
 8068edc:	681a      	ldr	r2, [r3, #0]
 8068ede:	68fb      	ldr	r3, [r7, #12]
 8068ee0:	681b      	ldr	r3, [r3, #0]
 8068ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8068ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8068ee8:	68fb      	ldr	r3, [r7, #12]
 8068eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8068eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8068ef0:	d10f      	bne.n	8068f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8068ef2:	68fb      	ldr	r3, [r7, #12]
 8068ef4:	681b      	ldr	r3, [r3, #0]
 8068ef6:	681a      	ldr	r2, [r3, #0]
 8068ef8:	68fb      	ldr	r3, [r7, #12]
 8068efa:	681b      	ldr	r3, [r3, #0]
 8068efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8068f00:	601a      	str	r2, [r3, #0]
 8068f02:	68fb      	ldr	r3, [r7, #12]
 8068f04:	681b      	ldr	r3, [r3, #0]
 8068f06:	681a      	ldr	r2, [r3, #0]
 8068f08:	68fb      	ldr	r3, [r7, #12]
 8068f0a:	681b      	ldr	r3, [r3, #0]
 8068f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8068f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8068f12:	68fb      	ldr	r3, [r7, #12]
 8068f14:	2201      	movs	r2, #1
 8068f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8068f1a:	68fb      	ldr	r3, [r7, #12]
 8068f1c:	2200      	movs	r2, #0
 8068f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8068f22:	2303      	movs	r3, #3
 8068f24:	e017      	b.n	8068f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8068f26:	697b      	ldr	r3, [r7, #20]
 8068f28:	2b00      	cmp	r3, #0
 8068f2a:	d101      	bne.n	8068f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8068f2c:	2300      	movs	r3, #0
 8068f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8068f30:	697b      	ldr	r3, [r7, #20]
 8068f32:	3b01      	subs	r3, #1
 8068f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8068f36:	68fb      	ldr	r3, [r7, #12]
 8068f38:	681b      	ldr	r3, [r3, #0]
 8068f3a:	689a      	ldr	r2, [r3, #8]
 8068f3c:	68bb      	ldr	r3, [r7, #8]
 8068f3e:	4013      	ands	r3, r2
 8068f40:	68ba      	ldr	r2, [r7, #8]
 8068f42:	429a      	cmp	r2, r3
 8068f44:	bf0c      	ite	eq
 8068f46:	2301      	moveq	r3, #1
 8068f48:	2300      	movne	r3, #0
 8068f4a:	b2db      	uxtb	r3, r3
 8068f4c:	461a      	mov	r2, r3
 8068f4e:	79fb      	ldrb	r3, [r7, #7]
 8068f50:	429a      	cmp	r2, r3
 8068f52:	d19b      	bne.n	8068e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8068f54:	2300      	movs	r3, #0
}
 8068f56:	4618      	mov	r0, r3
 8068f58:	3720      	adds	r7, #32
 8068f5a:	46bd      	mov	sp, r7
 8068f5c:	bd80      	pop	{r7, pc}
 8068f5e:	bf00      	nop
 8068f60:	20000000 	.word	0x20000000

08068f64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8068f64:	b580      	push	{r7, lr}
 8068f66:	b088      	sub	sp, #32
 8068f68:	af02      	add	r7, sp, #8
 8068f6a:	60f8      	str	r0, [r7, #12]
 8068f6c:	60b9      	str	r1, [r7, #8]
 8068f6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8068f70:	4b1b      	ldr	r3, [pc, #108]	; (8068fe0 <SPI_EndRxTxTransaction+0x7c>)
 8068f72:	681b      	ldr	r3, [r3, #0]
 8068f74:	4a1b      	ldr	r2, [pc, #108]	; (8068fe4 <SPI_EndRxTxTransaction+0x80>)
 8068f76:	fba2 2303 	umull	r2, r3, r2, r3
 8068f7a:	0d5b      	lsrs	r3, r3, #21
 8068f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8068f80:	fb02 f303 	mul.w	r3, r2, r3
 8068f84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8068f86:	68fb      	ldr	r3, [r7, #12]
 8068f88:	685b      	ldr	r3, [r3, #4]
 8068f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8068f8e:	d112      	bne.n	8068fb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8068f90:	687b      	ldr	r3, [r7, #4]
 8068f92:	9300      	str	r3, [sp, #0]
 8068f94:	68bb      	ldr	r3, [r7, #8]
 8068f96:	2200      	movs	r2, #0
 8068f98:	2180      	movs	r1, #128	; 0x80
 8068f9a:	68f8      	ldr	r0, [r7, #12]
 8068f9c:	f7ff ff5a 	bl	8068e54 <SPI_WaitFlagStateUntilTimeout>
 8068fa0:	4603      	mov	r3, r0
 8068fa2:	2b00      	cmp	r3, #0
 8068fa4:	d016      	beq.n	8068fd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8068fa6:	68fb      	ldr	r3, [r7, #12]
 8068fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8068faa:	f043 0220 	orr.w	r2, r3, #32
 8068fae:	68fb      	ldr	r3, [r7, #12]
 8068fb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8068fb2:	2303      	movs	r3, #3
 8068fb4:	e00f      	b.n	8068fd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8068fb6:	697b      	ldr	r3, [r7, #20]
 8068fb8:	2b00      	cmp	r3, #0
 8068fba:	d00a      	beq.n	8068fd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8068fbc:	697b      	ldr	r3, [r7, #20]
 8068fbe:	3b01      	subs	r3, #1
 8068fc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8068fc2:	68fb      	ldr	r3, [r7, #12]
 8068fc4:	681b      	ldr	r3, [r3, #0]
 8068fc6:	689b      	ldr	r3, [r3, #8]
 8068fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8068fcc:	2b80      	cmp	r3, #128	; 0x80
 8068fce:	d0f2      	beq.n	8068fb6 <SPI_EndRxTxTransaction+0x52>
 8068fd0:	e000      	b.n	8068fd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8068fd2:	bf00      	nop
  }

  return HAL_OK;
 8068fd4:	2300      	movs	r3, #0
}
 8068fd6:	4618      	mov	r0, r3
 8068fd8:	3718      	adds	r7, #24
 8068fda:	46bd      	mov	sp, r7
 8068fdc:	bd80      	pop	{r7, pc}
 8068fde:	bf00      	nop
 8068fe0:	20000000 	.word	0x20000000
 8068fe4:	165e9f81 	.word	0x165e9f81

08068fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8068fe8:	b580      	push	{r7, lr}
 8068fea:	b082      	sub	sp, #8
 8068fec:	af00      	add	r7, sp, #0
 8068fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8068ff0:	687b      	ldr	r3, [r7, #4]
 8068ff2:	2b00      	cmp	r3, #0
 8068ff4:	d101      	bne.n	8068ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8068ff6:	2301      	movs	r3, #1
 8068ff8:	e0a7      	b.n	806914a <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8068ffa:	687b      	ldr	r3, [r7, #4]
 8068ffc:	681b      	ldr	r3, [r3, #0]
 8068ffe:	4a55      	ldr	r2, [pc, #340]	; (8069154 <HAL_TIM_Base_Init+0x16c>)
 8069000:	4293      	cmp	r3, r2
 8069002:	d027      	beq.n	8069054 <HAL_TIM_Base_Init+0x6c>
 8069004:	687b      	ldr	r3, [r7, #4]
 8069006:	681b      	ldr	r3, [r3, #0]
 8069008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 806900c:	d022      	beq.n	8069054 <HAL_TIM_Base_Init+0x6c>
 806900e:	687b      	ldr	r3, [r7, #4]
 8069010:	681b      	ldr	r3, [r3, #0]
 8069012:	4a51      	ldr	r2, [pc, #324]	; (8069158 <HAL_TIM_Base_Init+0x170>)
 8069014:	4293      	cmp	r3, r2
 8069016:	d01d      	beq.n	8069054 <HAL_TIM_Base_Init+0x6c>
 8069018:	687b      	ldr	r3, [r7, #4]
 806901a:	681b      	ldr	r3, [r3, #0]
 806901c:	4a4f      	ldr	r2, [pc, #316]	; (806915c <HAL_TIM_Base_Init+0x174>)
 806901e:	4293      	cmp	r3, r2
 8069020:	d018      	beq.n	8069054 <HAL_TIM_Base_Init+0x6c>
 8069022:	687b      	ldr	r3, [r7, #4]
 8069024:	681b      	ldr	r3, [r3, #0]
 8069026:	4a4e      	ldr	r2, [pc, #312]	; (8069160 <HAL_TIM_Base_Init+0x178>)
 8069028:	4293      	cmp	r3, r2
 806902a:	d013      	beq.n	8069054 <HAL_TIM_Base_Init+0x6c>
 806902c:	687b      	ldr	r3, [r7, #4]
 806902e:	681b      	ldr	r3, [r3, #0]
 8069030:	4a4c      	ldr	r2, [pc, #304]	; (8069164 <HAL_TIM_Base_Init+0x17c>)
 8069032:	4293      	cmp	r3, r2
 8069034:	d00e      	beq.n	8069054 <HAL_TIM_Base_Init+0x6c>
 8069036:	687b      	ldr	r3, [r7, #4]
 8069038:	681b      	ldr	r3, [r3, #0]
 806903a:	4a4b      	ldr	r2, [pc, #300]	; (8069168 <HAL_TIM_Base_Init+0x180>)
 806903c:	4293      	cmp	r3, r2
 806903e:	d009      	beq.n	8069054 <HAL_TIM_Base_Init+0x6c>
 8069040:	687b      	ldr	r3, [r7, #4]
 8069042:	681b      	ldr	r3, [r3, #0]
 8069044:	4a49      	ldr	r2, [pc, #292]	; (806916c <HAL_TIM_Base_Init+0x184>)
 8069046:	4293      	cmp	r3, r2
 8069048:	d004      	beq.n	8069054 <HAL_TIM_Base_Init+0x6c>
 806904a:	f240 1113 	movw	r1, #275	; 0x113
 806904e:	4848      	ldr	r0, [pc, #288]	; (8069170 <HAL_TIM_Base_Init+0x188>)
 8069050:	f7f9 ff6b 	bl	8062f2a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8069054:	687b      	ldr	r3, [r7, #4]
 8069056:	689b      	ldr	r3, [r3, #8]
 8069058:	2b00      	cmp	r3, #0
 806905a:	d014      	beq.n	8069086 <HAL_TIM_Base_Init+0x9e>
 806905c:	687b      	ldr	r3, [r7, #4]
 806905e:	689b      	ldr	r3, [r3, #8]
 8069060:	2b10      	cmp	r3, #16
 8069062:	d010      	beq.n	8069086 <HAL_TIM_Base_Init+0x9e>
 8069064:	687b      	ldr	r3, [r7, #4]
 8069066:	689b      	ldr	r3, [r3, #8]
 8069068:	2b20      	cmp	r3, #32
 806906a:	d00c      	beq.n	8069086 <HAL_TIM_Base_Init+0x9e>
 806906c:	687b      	ldr	r3, [r7, #4]
 806906e:	689b      	ldr	r3, [r3, #8]
 8069070:	2b40      	cmp	r3, #64	; 0x40
 8069072:	d008      	beq.n	8069086 <HAL_TIM_Base_Init+0x9e>
 8069074:	687b      	ldr	r3, [r7, #4]
 8069076:	689b      	ldr	r3, [r3, #8]
 8069078:	2b60      	cmp	r3, #96	; 0x60
 806907a:	d004      	beq.n	8069086 <HAL_TIM_Base_Init+0x9e>
 806907c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8069080:	483b      	ldr	r0, [pc, #236]	; (8069170 <HAL_TIM_Base_Init+0x188>)
 8069082:	f7f9 ff52 	bl	8062f2a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8069086:	687b      	ldr	r3, [r7, #4]
 8069088:	691b      	ldr	r3, [r3, #16]
 806908a:	2b00      	cmp	r3, #0
 806908c:	d00e      	beq.n	80690ac <HAL_TIM_Base_Init+0xc4>
 806908e:	687b      	ldr	r3, [r7, #4]
 8069090:	691b      	ldr	r3, [r3, #16]
 8069092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8069096:	d009      	beq.n	80690ac <HAL_TIM_Base_Init+0xc4>
 8069098:	687b      	ldr	r3, [r7, #4]
 806909a:	691b      	ldr	r3, [r3, #16]
 806909c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80690a0:	d004      	beq.n	80690ac <HAL_TIM_Base_Init+0xc4>
 80690a2:	f240 1115 	movw	r1, #277	; 0x115
 80690a6:	4832      	ldr	r0, [pc, #200]	; (8069170 <HAL_TIM_Base_Init+0x188>)
 80690a8:	f7f9 ff3f 	bl	8062f2a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80690ac:	687b      	ldr	r3, [r7, #4]
 80690ae:	699b      	ldr	r3, [r3, #24]
 80690b0:	2b00      	cmp	r3, #0
 80690b2:	d008      	beq.n	80690c6 <HAL_TIM_Base_Init+0xde>
 80690b4:	687b      	ldr	r3, [r7, #4]
 80690b6:	699b      	ldr	r3, [r3, #24]
 80690b8:	2b80      	cmp	r3, #128	; 0x80
 80690ba:	d004      	beq.n	80690c6 <HAL_TIM_Base_Init+0xde>
 80690bc:	f44f 718b 	mov.w	r1, #278	; 0x116
 80690c0:	482b      	ldr	r0, [pc, #172]	; (8069170 <HAL_TIM_Base_Init+0x188>)
 80690c2:	f7f9 ff32 	bl	8062f2a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80690c6:	687b      	ldr	r3, [r7, #4]
 80690c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80690cc:	b2db      	uxtb	r3, r3
 80690ce:	2b00      	cmp	r3, #0
 80690d0:	d106      	bne.n	80690e0 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80690d2:	687b      	ldr	r3, [r7, #4]
 80690d4:	2200      	movs	r2, #0
 80690d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80690da:	6878      	ldr	r0, [r7, #4]
 80690dc:	f000 f84a 	bl	8069174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80690e0:	687b      	ldr	r3, [r7, #4]
 80690e2:	2202      	movs	r2, #2
 80690e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80690e8:	687b      	ldr	r3, [r7, #4]
 80690ea:	681a      	ldr	r2, [r3, #0]
 80690ec:	687b      	ldr	r3, [r7, #4]
 80690ee:	3304      	adds	r3, #4
 80690f0:	4619      	mov	r1, r3
 80690f2:	4610      	mov	r0, r2
 80690f4:	f000 fa0a 	bl	806950c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80690f8:	687b      	ldr	r3, [r7, #4]
 80690fa:	2201      	movs	r2, #1
 80690fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8069100:	687b      	ldr	r3, [r7, #4]
 8069102:	2201      	movs	r2, #1
 8069104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8069108:	687b      	ldr	r3, [r7, #4]
 806910a:	2201      	movs	r2, #1
 806910c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8069110:	687b      	ldr	r3, [r7, #4]
 8069112:	2201      	movs	r2, #1
 8069114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8069118:	687b      	ldr	r3, [r7, #4]
 806911a:	2201      	movs	r2, #1
 806911c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8069120:	687b      	ldr	r3, [r7, #4]
 8069122:	2201      	movs	r2, #1
 8069124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8069128:	687b      	ldr	r3, [r7, #4]
 806912a:	2201      	movs	r2, #1
 806912c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8069130:	687b      	ldr	r3, [r7, #4]
 8069132:	2201      	movs	r2, #1
 8069134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8069138:	687b      	ldr	r3, [r7, #4]
 806913a:	2201      	movs	r2, #1
 806913c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8069140:	687b      	ldr	r3, [r7, #4]
 8069142:	2201      	movs	r2, #1
 8069144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8069148:	2300      	movs	r3, #0
}
 806914a:	4618      	mov	r0, r3
 806914c:	3708      	adds	r7, #8
 806914e:	46bd      	mov	sp, r7
 8069150:	bd80      	pop	{r7, pc}
 8069152:	bf00      	nop
 8069154:	40010000 	.word	0x40010000
 8069158:	40000400 	.word	0x40000400
 806915c:	40000800 	.word	0x40000800
 8069160:	40000c00 	.word	0x40000c00
 8069164:	40014000 	.word	0x40014000
 8069168:	40014400 	.word	0x40014400
 806916c:	40014800 	.word	0x40014800
 8069170:	080772a0 	.word	0x080772a0

08069174 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8069174:	b480      	push	{r7}
 8069176:	b083      	sub	sp, #12
 8069178:	af00      	add	r7, sp, #0
 806917a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 806917c:	bf00      	nop
 806917e:	370c      	adds	r7, #12
 8069180:	46bd      	mov	sp, r7
 8069182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069186:	4770      	bx	lr

08069188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8069188:	b580      	push	{r7, lr}
 806918a:	b084      	sub	sp, #16
 806918c:	af00      	add	r7, sp, #0
 806918e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8069190:	687b      	ldr	r3, [r7, #4]
 8069192:	681b      	ldr	r3, [r3, #0]
 8069194:	4a3d      	ldr	r2, [pc, #244]	; (806928c <HAL_TIM_Base_Start_IT+0x104>)
 8069196:	4293      	cmp	r3, r2
 8069198:	d027      	beq.n	80691ea <HAL_TIM_Base_Start_IT+0x62>
 806919a:	687b      	ldr	r3, [r7, #4]
 806919c:	681b      	ldr	r3, [r3, #0]
 806919e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80691a2:	d022      	beq.n	80691ea <HAL_TIM_Base_Start_IT+0x62>
 80691a4:	687b      	ldr	r3, [r7, #4]
 80691a6:	681b      	ldr	r3, [r3, #0]
 80691a8:	4a39      	ldr	r2, [pc, #228]	; (8069290 <HAL_TIM_Base_Start_IT+0x108>)
 80691aa:	4293      	cmp	r3, r2
 80691ac:	d01d      	beq.n	80691ea <HAL_TIM_Base_Start_IT+0x62>
 80691ae:	687b      	ldr	r3, [r7, #4]
 80691b0:	681b      	ldr	r3, [r3, #0]
 80691b2:	4a38      	ldr	r2, [pc, #224]	; (8069294 <HAL_TIM_Base_Start_IT+0x10c>)
 80691b4:	4293      	cmp	r3, r2
 80691b6:	d018      	beq.n	80691ea <HAL_TIM_Base_Start_IT+0x62>
 80691b8:	687b      	ldr	r3, [r7, #4]
 80691ba:	681b      	ldr	r3, [r3, #0]
 80691bc:	4a36      	ldr	r2, [pc, #216]	; (8069298 <HAL_TIM_Base_Start_IT+0x110>)
 80691be:	4293      	cmp	r3, r2
 80691c0:	d013      	beq.n	80691ea <HAL_TIM_Base_Start_IT+0x62>
 80691c2:	687b      	ldr	r3, [r7, #4]
 80691c4:	681b      	ldr	r3, [r3, #0]
 80691c6:	4a35      	ldr	r2, [pc, #212]	; (806929c <HAL_TIM_Base_Start_IT+0x114>)
 80691c8:	4293      	cmp	r3, r2
 80691ca:	d00e      	beq.n	80691ea <HAL_TIM_Base_Start_IT+0x62>
 80691cc:	687b      	ldr	r3, [r7, #4]
 80691ce:	681b      	ldr	r3, [r3, #0]
 80691d0:	4a33      	ldr	r2, [pc, #204]	; (80692a0 <HAL_TIM_Base_Start_IT+0x118>)
 80691d2:	4293      	cmp	r3, r2
 80691d4:	d009      	beq.n	80691ea <HAL_TIM_Base_Start_IT+0x62>
 80691d6:	687b      	ldr	r3, [r7, #4]
 80691d8:	681b      	ldr	r3, [r3, #0]
 80691da:	4a32      	ldr	r2, [pc, #200]	; (80692a4 <HAL_TIM_Base_Start_IT+0x11c>)
 80691dc:	4293      	cmp	r3, r2
 80691de:	d004      	beq.n	80691ea <HAL_TIM_Base_Start_IT+0x62>
 80691e0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80691e4:	4830      	ldr	r0, [pc, #192]	; (80692a8 <HAL_TIM_Base_Start_IT+0x120>)
 80691e6:	f7f9 fea0 	bl	8062f2a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80691ea:	687b      	ldr	r3, [r7, #4]
 80691ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80691f0:	b2db      	uxtb	r3, r3
 80691f2:	2b01      	cmp	r3, #1
 80691f4:	d001      	beq.n	80691fa <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80691f6:	2301      	movs	r3, #1
 80691f8:	e044      	b.n	8069284 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80691fa:	687b      	ldr	r3, [r7, #4]
 80691fc:	2202      	movs	r2, #2
 80691fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8069202:	687b      	ldr	r3, [r7, #4]
 8069204:	681b      	ldr	r3, [r3, #0]
 8069206:	68da      	ldr	r2, [r3, #12]
 8069208:	687b      	ldr	r3, [r7, #4]
 806920a:	681b      	ldr	r3, [r3, #0]
 806920c:	f042 0201 	orr.w	r2, r2, #1
 8069210:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8069212:	687b      	ldr	r3, [r7, #4]
 8069214:	681b      	ldr	r3, [r3, #0]
 8069216:	4a1d      	ldr	r2, [pc, #116]	; (806928c <HAL_TIM_Base_Start_IT+0x104>)
 8069218:	4293      	cmp	r3, r2
 806921a:	d018      	beq.n	806924e <HAL_TIM_Base_Start_IT+0xc6>
 806921c:	687b      	ldr	r3, [r7, #4]
 806921e:	681b      	ldr	r3, [r3, #0]
 8069220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8069224:	d013      	beq.n	806924e <HAL_TIM_Base_Start_IT+0xc6>
 8069226:	687b      	ldr	r3, [r7, #4]
 8069228:	681b      	ldr	r3, [r3, #0]
 806922a:	4a19      	ldr	r2, [pc, #100]	; (8069290 <HAL_TIM_Base_Start_IT+0x108>)
 806922c:	4293      	cmp	r3, r2
 806922e:	d00e      	beq.n	806924e <HAL_TIM_Base_Start_IT+0xc6>
 8069230:	687b      	ldr	r3, [r7, #4]
 8069232:	681b      	ldr	r3, [r3, #0]
 8069234:	4a17      	ldr	r2, [pc, #92]	; (8069294 <HAL_TIM_Base_Start_IT+0x10c>)
 8069236:	4293      	cmp	r3, r2
 8069238:	d009      	beq.n	806924e <HAL_TIM_Base_Start_IT+0xc6>
 806923a:	687b      	ldr	r3, [r7, #4]
 806923c:	681b      	ldr	r3, [r3, #0]
 806923e:	4a16      	ldr	r2, [pc, #88]	; (8069298 <HAL_TIM_Base_Start_IT+0x110>)
 8069240:	4293      	cmp	r3, r2
 8069242:	d004      	beq.n	806924e <HAL_TIM_Base_Start_IT+0xc6>
 8069244:	687b      	ldr	r3, [r7, #4]
 8069246:	681b      	ldr	r3, [r3, #0]
 8069248:	4a14      	ldr	r2, [pc, #80]	; (806929c <HAL_TIM_Base_Start_IT+0x114>)
 806924a:	4293      	cmp	r3, r2
 806924c:	d111      	bne.n	8069272 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 806924e:	687b      	ldr	r3, [r7, #4]
 8069250:	681b      	ldr	r3, [r3, #0]
 8069252:	689b      	ldr	r3, [r3, #8]
 8069254:	f003 0307 	and.w	r3, r3, #7
 8069258:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 806925a:	68fb      	ldr	r3, [r7, #12]
 806925c:	2b06      	cmp	r3, #6
 806925e:	d010      	beq.n	8069282 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8069260:	687b      	ldr	r3, [r7, #4]
 8069262:	681b      	ldr	r3, [r3, #0]
 8069264:	681a      	ldr	r2, [r3, #0]
 8069266:	687b      	ldr	r3, [r7, #4]
 8069268:	681b      	ldr	r3, [r3, #0]
 806926a:	f042 0201 	orr.w	r2, r2, #1
 806926e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8069270:	e007      	b.n	8069282 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8069272:	687b      	ldr	r3, [r7, #4]
 8069274:	681b      	ldr	r3, [r3, #0]
 8069276:	681a      	ldr	r2, [r3, #0]
 8069278:	687b      	ldr	r3, [r7, #4]
 806927a:	681b      	ldr	r3, [r3, #0]
 806927c:	f042 0201 	orr.w	r2, r2, #1
 8069280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8069282:	2300      	movs	r3, #0
}
 8069284:	4618      	mov	r0, r3
 8069286:	3710      	adds	r7, #16
 8069288:	46bd      	mov	sp, r7
 806928a:	bd80      	pop	{r7, pc}
 806928c:	40010000 	.word	0x40010000
 8069290:	40000400 	.word	0x40000400
 8069294:	40000800 	.word	0x40000800
 8069298:	40000c00 	.word	0x40000c00
 806929c:	40014000 	.word	0x40014000
 80692a0:	40014400 	.word	0x40014400
 80692a4:	40014800 	.word	0x40014800
 80692a8:	080772a0 	.word	0x080772a0

080692ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80692ac:	b580      	push	{r7, lr}
 80692ae:	b082      	sub	sp, #8
 80692b0:	af00      	add	r7, sp, #0
 80692b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80692b4:	687b      	ldr	r3, [r7, #4]
 80692b6:	681b      	ldr	r3, [r3, #0]
 80692b8:	691b      	ldr	r3, [r3, #16]
 80692ba:	f003 0302 	and.w	r3, r3, #2
 80692be:	2b02      	cmp	r3, #2
 80692c0:	d122      	bne.n	8069308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80692c2:	687b      	ldr	r3, [r7, #4]
 80692c4:	681b      	ldr	r3, [r3, #0]
 80692c6:	68db      	ldr	r3, [r3, #12]
 80692c8:	f003 0302 	and.w	r3, r3, #2
 80692cc:	2b02      	cmp	r3, #2
 80692ce:	d11b      	bne.n	8069308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80692d0:	687b      	ldr	r3, [r7, #4]
 80692d2:	681b      	ldr	r3, [r3, #0]
 80692d4:	f06f 0202 	mvn.w	r2, #2
 80692d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80692da:	687b      	ldr	r3, [r7, #4]
 80692dc:	2201      	movs	r2, #1
 80692de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80692e0:	687b      	ldr	r3, [r7, #4]
 80692e2:	681b      	ldr	r3, [r3, #0]
 80692e4:	699b      	ldr	r3, [r3, #24]
 80692e6:	f003 0303 	and.w	r3, r3, #3
 80692ea:	2b00      	cmp	r3, #0
 80692ec:	d003      	beq.n	80692f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80692ee:	6878      	ldr	r0, [r7, #4]
 80692f0:	f000 f8ee 	bl	80694d0 <HAL_TIM_IC_CaptureCallback>
 80692f4:	e005      	b.n	8069302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80692f6:	6878      	ldr	r0, [r7, #4]
 80692f8:	f000 f8e0 	bl	80694bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80692fc:	6878      	ldr	r0, [r7, #4]
 80692fe:	f000 f8f1 	bl	80694e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8069302:	687b      	ldr	r3, [r7, #4]
 8069304:	2200      	movs	r2, #0
 8069306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8069308:	687b      	ldr	r3, [r7, #4]
 806930a:	681b      	ldr	r3, [r3, #0]
 806930c:	691b      	ldr	r3, [r3, #16]
 806930e:	f003 0304 	and.w	r3, r3, #4
 8069312:	2b04      	cmp	r3, #4
 8069314:	d122      	bne.n	806935c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8069316:	687b      	ldr	r3, [r7, #4]
 8069318:	681b      	ldr	r3, [r3, #0]
 806931a:	68db      	ldr	r3, [r3, #12]
 806931c:	f003 0304 	and.w	r3, r3, #4
 8069320:	2b04      	cmp	r3, #4
 8069322:	d11b      	bne.n	806935c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8069324:	687b      	ldr	r3, [r7, #4]
 8069326:	681b      	ldr	r3, [r3, #0]
 8069328:	f06f 0204 	mvn.w	r2, #4
 806932c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 806932e:	687b      	ldr	r3, [r7, #4]
 8069330:	2202      	movs	r2, #2
 8069332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8069334:	687b      	ldr	r3, [r7, #4]
 8069336:	681b      	ldr	r3, [r3, #0]
 8069338:	699b      	ldr	r3, [r3, #24]
 806933a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 806933e:	2b00      	cmp	r3, #0
 8069340:	d003      	beq.n	806934a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8069342:	6878      	ldr	r0, [r7, #4]
 8069344:	f000 f8c4 	bl	80694d0 <HAL_TIM_IC_CaptureCallback>
 8069348:	e005      	b.n	8069356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 806934a:	6878      	ldr	r0, [r7, #4]
 806934c:	f000 f8b6 	bl	80694bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8069350:	6878      	ldr	r0, [r7, #4]
 8069352:	f000 f8c7 	bl	80694e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8069356:	687b      	ldr	r3, [r7, #4]
 8069358:	2200      	movs	r2, #0
 806935a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 806935c:	687b      	ldr	r3, [r7, #4]
 806935e:	681b      	ldr	r3, [r3, #0]
 8069360:	691b      	ldr	r3, [r3, #16]
 8069362:	f003 0308 	and.w	r3, r3, #8
 8069366:	2b08      	cmp	r3, #8
 8069368:	d122      	bne.n	80693b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 806936a:	687b      	ldr	r3, [r7, #4]
 806936c:	681b      	ldr	r3, [r3, #0]
 806936e:	68db      	ldr	r3, [r3, #12]
 8069370:	f003 0308 	and.w	r3, r3, #8
 8069374:	2b08      	cmp	r3, #8
 8069376:	d11b      	bne.n	80693b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8069378:	687b      	ldr	r3, [r7, #4]
 806937a:	681b      	ldr	r3, [r3, #0]
 806937c:	f06f 0208 	mvn.w	r2, #8
 8069380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8069382:	687b      	ldr	r3, [r7, #4]
 8069384:	2204      	movs	r2, #4
 8069386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8069388:	687b      	ldr	r3, [r7, #4]
 806938a:	681b      	ldr	r3, [r3, #0]
 806938c:	69db      	ldr	r3, [r3, #28]
 806938e:	f003 0303 	and.w	r3, r3, #3
 8069392:	2b00      	cmp	r3, #0
 8069394:	d003      	beq.n	806939e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8069396:	6878      	ldr	r0, [r7, #4]
 8069398:	f000 f89a 	bl	80694d0 <HAL_TIM_IC_CaptureCallback>
 806939c:	e005      	b.n	80693aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 806939e:	6878      	ldr	r0, [r7, #4]
 80693a0:	f000 f88c 	bl	80694bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80693a4:	6878      	ldr	r0, [r7, #4]
 80693a6:	f000 f89d 	bl	80694e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80693aa:	687b      	ldr	r3, [r7, #4]
 80693ac:	2200      	movs	r2, #0
 80693ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80693b0:	687b      	ldr	r3, [r7, #4]
 80693b2:	681b      	ldr	r3, [r3, #0]
 80693b4:	691b      	ldr	r3, [r3, #16]
 80693b6:	f003 0310 	and.w	r3, r3, #16
 80693ba:	2b10      	cmp	r3, #16
 80693bc:	d122      	bne.n	8069404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80693be:	687b      	ldr	r3, [r7, #4]
 80693c0:	681b      	ldr	r3, [r3, #0]
 80693c2:	68db      	ldr	r3, [r3, #12]
 80693c4:	f003 0310 	and.w	r3, r3, #16
 80693c8:	2b10      	cmp	r3, #16
 80693ca:	d11b      	bne.n	8069404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80693cc:	687b      	ldr	r3, [r7, #4]
 80693ce:	681b      	ldr	r3, [r3, #0]
 80693d0:	f06f 0210 	mvn.w	r2, #16
 80693d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80693d6:	687b      	ldr	r3, [r7, #4]
 80693d8:	2208      	movs	r2, #8
 80693da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80693dc:	687b      	ldr	r3, [r7, #4]
 80693de:	681b      	ldr	r3, [r3, #0]
 80693e0:	69db      	ldr	r3, [r3, #28]
 80693e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80693e6:	2b00      	cmp	r3, #0
 80693e8:	d003      	beq.n	80693f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80693ea:	6878      	ldr	r0, [r7, #4]
 80693ec:	f000 f870 	bl	80694d0 <HAL_TIM_IC_CaptureCallback>
 80693f0:	e005      	b.n	80693fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80693f2:	6878      	ldr	r0, [r7, #4]
 80693f4:	f000 f862 	bl	80694bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80693f8:	6878      	ldr	r0, [r7, #4]
 80693fa:	f000 f873 	bl	80694e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80693fe:	687b      	ldr	r3, [r7, #4]
 8069400:	2200      	movs	r2, #0
 8069402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8069404:	687b      	ldr	r3, [r7, #4]
 8069406:	681b      	ldr	r3, [r3, #0]
 8069408:	691b      	ldr	r3, [r3, #16]
 806940a:	f003 0301 	and.w	r3, r3, #1
 806940e:	2b01      	cmp	r3, #1
 8069410:	d10e      	bne.n	8069430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8069412:	687b      	ldr	r3, [r7, #4]
 8069414:	681b      	ldr	r3, [r3, #0]
 8069416:	68db      	ldr	r3, [r3, #12]
 8069418:	f003 0301 	and.w	r3, r3, #1
 806941c:	2b01      	cmp	r3, #1
 806941e:	d107      	bne.n	8069430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8069420:	687b      	ldr	r3, [r7, #4]
 8069422:	681b      	ldr	r3, [r3, #0]
 8069424:	f06f 0201 	mvn.w	r2, #1
 8069428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 806942a:	6878      	ldr	r0, [r7, #4]
 806942c:	f7f9 fd66 	bl	8062efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8069430:	687b      	ldr	r3, [r7, #4]
 8069432:	681b      	ldr	r3, [r3, #0]
 8069434:	691b      	ldr	r3, [r3, #16]
 8069436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 806943a:	2b80      	cmp	r3, #128	; 0x80
 806943c:	d10e      	bne.n	806945c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 806943e:	687b      	ldr	r3, [r7, #4]
 8069440:	681b      	ldr	r3, [r3, #0]
 8069442:	68db      	ldr	r3, [r3, #12]
 8069444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8069448:	2b80      	cmp	r3, #128	; 0x80
 806944a:	d107      	bne.n	806945c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 806944c:	687b      	ldr	r3, [r7, #4]
 806944e:	681b      	ldr	r3, [r3, #0]
 8069450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8069454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8069456:	6878      	ldr	r0, [r7, #4]
 8069458:	f000 f8e2 	bl	8069620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 806945c:	687b      	ldr	r3, [r7, #4]
 806945e:	681b      	ldr	r3, [r3, #0]
 8069460:	691b      	ldr	r3, [r3, #16]
 8069462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069466:	2b40      	cmp	r3, #64	; 0x40
 8069468:	d10e      	bne.n	8069488 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 806946a:	687b      	ldr	r3, [r7, #4]
 806946c:	681b      	ldr	r3, [r3, #0]
 806946e:	68db      	ldr	r3, [r3, #12]
 8069470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069474:	2b40      	cmp	r3, #64	; 0x40
 8069476:	d107      	bne.n	8069488 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8069478:	687b      	ldr	r3, [r7, #4]
 806947a:	681b      	ldr	r3, [r3, #0]
 806947c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8069480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8069482:	6878      	ldr	r0, [r7, #4]
 8069484:	f000 f838 	bl	80694f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8069488:	687b      	ldr	r3, [r7, #4]
 806948a:	681b      	ldr	r3, [r3, #0]
 806948c:	691b      	ldr	r3, [r3, #16]
 806948e:	f003 0320 	and.w	r3, r3, #32
 8069492:	2b20      	cmp	r3, #32
 8069494:	d10e      	bne.n	80694b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8069496:	687b      	ldr	r3, [r7, #4]
 8069498:	681b      	ldr	r3, [r3, #0]
 806949a:	68db      	ldr	r3, [r3, #12]
 806949c:	f003 0320 	and.w	r3, r3, #32
 80694a0:	2b20      	cmp	r3, #32
 80694a2:	d107      	bne.n	80694b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80694a4:	687b      	ldr	r3, [r7, #4]
 80694a6:	681b      	ldr	r3, [r3, #0]
 80694a8:	f06f 0220 	mvn.w	r2, #32
 80694ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80694ae:	6878      	ldr	r0, [r7, #4]
 80694b0:	f000 f8ac 	bl	806960c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80694b4:	bf00      	nop
 80694b6:	3708      	adds	r7, #8
 80694b8:	46bd      	mov	sp, r7
 80694ba:	bd80      	pop	{r7, pc}

080694bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80694bc:	b480      	push	{r7}
 80694be:	b083      	sub	sp, #12
 80694c0:	af00      	add	r7, sp, #0
 80694c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80694c4:	bf00      	nop
 80694c6:	370c      	adds	r7, #12
 80694c8:	46bd      	mov	sp, r7
 80694ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80694ce:	4770      	bx	lr

080694d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80694d0:	b480      	push	{r7}
 80694d2:	b083      	sub	sp, #12
 80694d4:	af00      	add	r7, sp, #0
 80694d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80694d8:	bf00      	nop
 80694da:	370c      	adds	r7, #12
 80694dc:	46bd      	mov	sp, r7
 80694de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80694e2:	4770      	bx	lr

080694e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80694e4:	b480      	push	{r7}
 80694e6:	b083      	sub	sp, #12
 80694e8:	af00      	add	r7, sp, #0
 80694ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80694ec:	bf00      	nop
 80694ee:	370c      	adds	r7, #12
 80694f0:	46bd      	mov	sp, r7
 80694f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80694f6:	4770      	bx	lr

080694f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80694f8:	b480      	push	{r7}
 80694fa:	b083      	sub	sp, #12
 80694fc:	af00      	add	r7, sp, #0
 80694fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8069500:	bf00      	nop
 8069502:	370c      	adds	r7, #12
 8069504:	46bd      	mov	sp, r7
 8069506:	f85d 7b04 	ldr.w	r7, [sp], #4
 806950a:	4770      	bx	lr

0806950c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 806950c:	b480      	push	{r7}
 806950e:	b085      	sub	sp, #20
 8069510:	af00      	add	r7, sp, #0
 8069512:	6078      	str	r0, [r7, #4]
 8069514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8069516:	687b      	ldr	r3, [r7, #4]
 8069518:	681b      	ldr	r3, [r3, #0]
 806951a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 806951c:	687b      	ldr	r3, [r7, #4]
 806951e:	4a34      	ldr	r2, [pc, #208]	; (80695f0 <TIM_Base_SetConfig+0xe4>)
 8069520:	4293      	cmp	r3, r2
 8069522:	d00f      	beq.n	8069544 <TIM_Base_SetConfig+0x38>
 8069524:	687b      	ldr	r3, [r7, #4]
 8069526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 806952a:	d00b      	beq.n	8069544 <TIM_Base_SetConfig+0x38>
 806952c:	687b      	ldr	r3, [r7, #4]
 806952e:	4a31      	ldr	r2, [pc, #196]	; (80695f4 <TIM_Base_SetConfig+0xe8>)
 8069530:	4293      	cmp	r3, r2
 8069532:	d007      	beq.n	8069544 <TIM_Base_SetConfig+0x38>
 8069534:	687b      	ldr	r3, [r7, #4]
 8069536:	4a30      	ldr	r2, [pc, #192]	; (80695f8 <TIM_Base_SetConfig+0xec>)
 8069538:	4293      	cmp	r3, r2
 806953a:	d003      	beq.n	8069544 <TIM_Base_SetConfig+0x38>
 806953c:	687b      	ldr	r3, [r7, #4]
 806953e:	4a2f      	ldr	r2, [pc, #188]	; (80695fc <TIM_Base_SetConfig+0xf0>)
 8069540:	4293      	cmp	r3, r2
 8069542:	d108      	bne.n	8069556 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8069544:	68fb      	ldr	r3, [r7, #12]
 8069546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 806954a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 806954c:	683b      	ldr	r3, [r7, #0]
 806954e:	685b      	ldr	r3, [r3, #4]
 8069550:	68fa      	ldr	r2, [r7, #12]
 8069552:	4313      	orrs	r3, r2
 8069554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8069556:	687b      	ldr	r3, [r7, #4]
 8069558:	4a25      	ldr	r2, [pc, #148]	; (80695f0 <TIM_Base_SetConfig+0xe4>)
 806955a:	4293      	cmp	r3, r2
 806955c:	d01b      	beq.n	8069596 <TIM_Base_SetConfig+0x8a>
 806955e:	687b      	ldr	r3, [r7, #4]
 8069560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8069564:	d017      	beq.n	8069596 <TIM_Base_SetConfig+0x8a>
 8069566:	687b      	ldr	r3, [r7, #4]
 8069568:	4a22      	ldr	r2, [pc, #136]	; (80695f4 <TIM_Base_SetConfig+0xe8>)
 806956a:	4293      	cmp	r3, r2
 806956c:	d013      	beq.n	8069596 <TIM_Base_SetConfig+0x8a>
 806956e:	687b      	ldr	r3, [r7, #4]
 8069570:	4a21      	ldr	r2, [pc, #132]	; (80695f8 <TIM_Base_SetConfig+0xec>)
 8069572:	4293      	cmp	r3, r2
 8069574:	d00f      	beq.n	8069596 <TIM_Base_SetConfig+0x8a>
 8069576:	687b      	ldr	r3, [r7, #4]
 8069578:	4a20      	ldr	r2, [pc, #128]	; (80695fc <TIM_Base_SetConfig+0xf0>)
 806957a:	4293      	cmp	r3, r2
 806957c:	d00b      	beq.n	8069596 <TIM_Base_SetConfig+0x8a>
 806957e:	687b      	ldr	r3, [r7, #4]
 8069580:	4a1f      	ldr	r2, [pc, #124]	; (8069600 <TIM_Base_SetConfig+0xf4>)
 8069582:	4293      	cmp	r3, r2
 8069584:	d007      	beq.n	8069596 <TIM_Base_SetConfig+0x8a>
 8069586:	687b      	ldr	r3, [r7, #4]
 8069588:	4a1e      	ldr	r2, [pc, #120]	; (8069604 <TIM_Base_SetConfig+0xf8>)
 806958a:	4293      	cmp	r3, r2
 806958c:	d003      	beq.n	8069596 <TIM_Base_SetConfig+0x8a>
 806958e:	687b      	ldr	r3, [r7, #4]
 8069590:	4a1d      	ldr	r2, [pc, #116]	; (8069608 <TIM_Base_SetConfig+0xfc>)
 8069592:	4293      	cmp	r3, r2
 8069594:	d108      	bne.n	80695a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8069596:	68fb      	ldr	r3, [r7, #12]
 8069598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 806959c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 806959e:	683b      	ldr	r3, [r7, #0]
 80695a0:	68db      	ldr	r3, [r3, #12]
 80695a2:	68fa      	ldr	r2, [r7, #12]
 80695a4:	4313      	orrs	r3, r2
 80695a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80695a8:	68fb      	ldr	r3, [r7, #12]
 80695aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80695ae:	683b      	ldr	r3, [r7, #0]
 80695b0:	695b      	ldr	r3, [r3, #20]
 80695b2:	4313      	orrs	r3, r2
 80695b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80695b6:	687b      	ldr	r3, [r7, #4]
 80695b8:	68fa      	ldr	r2, [r7, #12]
 80695ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80695bc:	683b      	ldr	r3, [r7, #0]
 80695be:	689a      	ldr	r2, [r3, #8]
 80695c0:	687b      	ldr	r3, [r7, #4]
 80695c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80695c4:	683b      	ldr	r3, [r7, #0]
 80695c6:	681a      	ldr	r2, [r3, #0]
 80695c8:	687b      	ldr	r3, [r7, #4]
 80695ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80695cc:	687b      	ldr	r3, [r7, #4]
 80695ce:	4a08      	ldr	r2, [pc, #32]	; (80695f0 <TIM_Base_SetConfig+0xe4>)
 80695d0:	4293      	cmp	r3, r2
 80695d2:	d103      	bne.n	80695dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80695d4:	683b      	ldr	r3, [r7, #0]
 80695d6:	691a      	ldr	r2, [r3, #16]
 80695d8:	687b      	ldr	r3, [r7, #4]
 80695da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80695dc:	687b      	ldr	r3, [r7, #4]
 80695de:	2201      	movs	r2, #1
 80695e0:	615a      	str	r2, [r3, #20]
}
 80695e2:	bf00      	nop
 80695e4:	3714      	adds	r7, #20
 80695e6:	46bd      	mov	sp, r7
 80695e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80695ec:	4770      	bx	lr
 80695ee:	bf00      	nop
 80695f0:	40010000 	.word	0x40010000
 80695f4:	40000400 	.word	0x40000400
 80695f8:	40000800 	.word	0x40000800
 80695fc:	40000c00 	.word	0x40000c00
 8069600:	40014000 	.word	0x40014000
 8069604:	40014400 	.word	0x40014400
 8069608:	40014800 	.word	0x40014800

0806960c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 806960c:	b480      	push	{r7}
 806960e:	b083      	sub	sp, #12
 8069610:	af00      	add	r7, sp, #0
 8069612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8069614:	bf00      	nop
 8069616:	370c      	adds	r7, #12
 8069618:	46bd      	mov	sp, r7
 806961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806961e:	4770      	bx	lr

08069620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8069620:	b480      	push	{r7}
 8069622:	b083      	sub	sp, #12
 8069624:	af00      	add	r7, sp, #0
 8069626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8069628:	bf00      	nop
 806962a:	370c      	adds	r7, #12
 806962c:	46bd      	mov	sp, r7
 806962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069632:	4770      	bx	lr

08069634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8069634:	b580      	push	{r7, lr}
 8069636:	b082      	sub	sp, #8
 8069638:	af00      	add	r7, sp, #0
 806963a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 806963c:	687b      	ldr	r3, [r7, #4]
 806963e:	2b00      	cmp	r3, #0
 8069640:	d101      	bne.n	8069646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8069642:	2301      	movs	r3, #1
 8069644:	e0a0      	b.n	8069788 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8069646:	687b      	ldr	r3, [r7, #4]
 8069648:	699b      	ldr	r3, [r3, #24]
 806964a:	2b00      	cmp	r3, #0
 806964c:	d02c      	beq.n	80696a8 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 806964e:	687b      	ldr	r3, [r7, #4]
 8069650:	681b      	ldr	r3, [r3, #0]
 8069652:	4a4f      	ldr	r2, [pc, #316]	; (8069790 <HAL_UART_Init+0x15c>)
 8069654:	4293      	cmp	r3, r2
 8069656:	d00e      	beq.n	8069676 <HAL_UART_Init+0x42>
 8069658:	687b      	ldr	r3, [r7, #4]
 806965a:	681b      	ldr	r3, [r3, #0]
 806965c:	4a4d      	ldr	r2, [pc, #308]	; (8069794 <HAL_UART_Init+0x160>)
 806965e:	4293      	cmp	r3, r2
 8069660:	d009      	beq.n	8069676 <HAL_UART_Init+0x42>
 8069662:	687b      	ldr	r3, [r7, #4]
 8069664:	681b      	ldr	r3, [r3, #0]
 8069666:	4a4c      	ldr	r2, [pc, #304]	; (8069798 <HAL_UART_Init+0x164>)
 8069668:	4293      	cmp	r3, r2
 806966a:	d004      	beq.n	8069676 <HAL_UART_Init+0x42>
 806966c:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8069670:	484a      	ldr	r0, [pc, #296]	; (806979c <HAL_UART_Init+0x168>)
 8069672:	f7f9 fc5a 	bl	8062f2a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8069676:	687b      	ldr	r3, [r7, #4]
 8069678:	699b      	ldr	r3, [r3, #24]
 806967a:	2b00      	cmp	r3, #0
 806967c:	d028      	beq.n	80696d0 <HAL_UART_Init+0x9c>
 806967e:	687b      	ldr	r3, [r7, #4]
 8069680:	699b      	ldr	r3, [r3, #24]
 8069682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8069686:	d023      	beq.n	80696d0 <HAL_UART_Init+0x9c>
 8069688:	687b      	ldr	r3, [r7, #4]
 806968a:	699b      	ldr	r3, [r3, #24]
 806968c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8069690:	d01e      	beq.n	80696d0 <HAL_UART_Init+0x9c>
 8069692:	687b      	ldr	r3, [r7, #4]
 8069694:	699b      	ldr	r3, [r3, #24]
 8069696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 806969a:	d019      	beq.n	80696d0 <HAL_UART_Init+0x9c>
 806969c:	f240 1173 	movw	r1, #371	; 0x173
 80696a0:	483e      	ldr	r0, [pc, #248]	; (806979c <HAL_UART_Init+0x168>)
 80696a2:	f7f9 fc42 	bl	8062f2a <assert_failed>
 80696a6:	e013      	b.n	80696d0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80696a8:	687b      	ldr	r3, [r7, #4]
 80696aa:	681b      	ldr	r3, [r3, #0]
 80696ac:	4a38      	ldr	r2, [pc, #224]	; (8069790 <HAL_UART_Init+0x15c>)
 80696ae:	4293      	cmp	r3, r2
 80696b0:	d00e      	beq.n	80696d0 <HAL_UART_Init+0x9c>
 80696b2:	687b      	ldr	r3, [r7, #4]
 80696b4:	681b      	ldr	r3, [r3, #0]
 80696b6:	4a37      	ldr	r2, [pc, #220]	; (8069794 <HAL_UART_Init+0x160>)
 80696b8:	4293      	cmp	r3, r2
 80696ba:	d009      	beq.n	80696d0 <HAL_UART_Init+0x9c>
 80696bc:	687b      	ldr	r3, [r7, #4]
 80696be:	681b      	ldr	r3, [r3, #0]
 80696c0:	4a35      	ldr	r2, [pc, #212]	; (8069798 <HAL_UART_Init+0x164>)
 80696c2:	4293      	cmp	r3, r2
 80696c4:	d004      	beq.n	80696d0 <HAL_UART_Init+0x9c>
 80696c6:	f240 1177 	movw	r1, #375	; 0x177
 80696ca:	4834      	ldr	r0, [pc, #208]	; (806979c <HAL_UART_Init+0x168>)
 80696cc:	f7f9 fc2d 	bl	8062f2a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80696d0:	687b      	ldr	r3, [r7, #4]
 80696d2:	689b      	ldr	r3, [r3, #8]
 80696d4:	2b00      	cmp	r3, #0
 80696d6:	d009      	beq.n	80696ec <HAL_UART_Init+0xb8>
 80696d8:	687b      	ldr	r3, [r7, #4]
 80696da:	689b      	ldr	r3, [r3, #8]
 80696dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80696e0:	d004      	beq.n	80696ec <HAL_UART_Init+0xb8>
 80696e2:	f240 1179 	movw	r1, #377	; 0x179
 80696e6:	482d      	ldr	r0, [pc, #180]	; (806979c <HAL_UART_Init+0x168>)
 80696e8:	f7f9 fc1f 	bl	8062f2a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80696ec:	687b      	ldr	r3, [r7, #4]
 80696ee:	69db      	ldr	r3, [r3, #28]
 80696f0:	2b00      	cmp	r3, #0
 80696f2:	d009      	beq.n	8069708 <HAL_UART_Init+0xd4>
 80696f4:	687b      	ldr	r3, [r7, #4]
 80696f6:	69db      	ldr	r3, [r3, #28]
 80696f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80696fc:	d004      	beq.n	8069708 <HAL_UART_Init+0xd4>
 80696fe:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8069702:	4826      	ldr	r0, [pc, #152]	; (806979c <HAL_UART_Init+0x168>)
 8069704:	f7f9 fc11 	bl	8062f2a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8069708:	687b      	ldr	r3, [r7, #4]
 806970a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 806970e:	b2db      	uxtb	r3, r3
 8069710:	2b00      	cmp	r3, #0
 8069712:	d106      	bne.n	8069722 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8069714:	687b      	ldr	r3, [r7, #4]
 8069716:	2200      	movs	r2, #0
 8069718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 806971c:	6878      	ldr	r0, [r7, #4]
 806971e:	f7f9 ffcb 	bl	80636b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8069722:	687b      	ldr	r3, [r7, #4]
 8069724:	2224      	movs	r2, #36	; 0x24
 8069726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 806972a:	687b      	ldr	r3, [r7, #4]
 806972c:	681b      	ldr	r3, [r3, #0]
 806972e:	68da      	ldr	r2, [r3, #12]
 8069730:	687b      	ldr	r3, [r7, #4]
 8069732:	681b      	ldr	r3, [r3, #0]
 8069734:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8069738:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 806973a:	6878      	ldr	r0, [r7, #4]
 806973c:	f000 fe84 	bl	806a448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8069740:	687b      	ldr	r3, [r7, #4]
 8069742:	681b      	ldr	r3, [r3, #0]
 8069744:	691a      	ldr	r2, [r3, #16]
 8069746:	687b      	ldr	r3, [r7, #4]
 8069748:	681b      	ldr	r3, [r3, #0]
 806974a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 806974e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8069750:	687b      	ldr	r3, [r7, #4]
 8069752:	681b      	ldr	r3, [r3, #0]
 8069754:	695a      	ldr	r2, [r3, #20]
 8069756:	687b      	ldr	r3, [r7, #4]
 8069758:	681b      	ldr	r3, [r3, #0]
 806975a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 806975e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8069760:	687b      	ldr	r3, [r7, #4]
 8069762:	681b      	ldr	r3, [r3, #0]
 8069764:	68da      	ldr	r2, [r3, #12]
 8069766:	687b      	ldr	r3, [r7, #4]
 8069768:	681b      	ldr	r3, [r3, #0]
 806976a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 806976e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8069770:	687b      	ldr	r3, [r7, #4]
 8069772:	2200      	movs	r2, #0
 8069774:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8069776:	687b      	ldr	r3, [r7, #4]
 8069778:	2220      	movs	r2, #32
 806977a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 806977e:	687b      	ldr	r3, [r7, #4]
 8069780:	2220      	movs	r2, #32
 8069782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8069786:	2300      	movs	r3, #0
}
 8069788:	4618      	mov	r0, r3
 806978a:	3708      	adds	r7, #8
 806978c:	46bd      	mov	sp, r7
 806978e:	bd80      	pop	{r7, pc}
 8069790:	40011000 	.word	0x40011000
 8069794:	40004400 	.word	0x40004400
 8069798:	40011400 	.word	0x40011400
 806979c:	080772d8 	.word	0x080772d8

080697a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80697a0:	b580      	push	{r7, lr}
 80697a2:	b08a      	sub	sp, #40	; 0x28
 80697a4:	af02      	add	r7, sp, #8
 80697a6:	60f8      	str	r0, [r7, #12]
 80697a8:	60b9      	str	r1, [r7, #8]
 80697aa:	603b      	str	r3, [r7, #0]
 80697ac:	4613      	mov	r3, r2
 80697ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80697b0:	2300      	movs	r3, #0
 80697b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80697b4:	68fb      	ldr	r3, [r7, #12]
 80697b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80697ba:	b2db      	uxtb	r3, r3
 80697bc:	2b20      	cmp	r3, #32
 80697be:	d17c      	bne.n	80698ba <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80697c0:	68bb      	ldr	r3, [r7, #8]
 80697c2:	2b00      	cmp	r3, #0
 80697c4:	d002      	beq.n	80697cc <HAL_UART_Transmit+0x2c>
 80697c6:	88fb      	ldrh	r3, [r7, #6]
 80697c8:	2b00      	cmp	r3, #0
 80697ca:	d101      	bne.n	80697d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80697cc:	2301      	movs	r3, #1
 80697ce:	e075      	b.n	80698bc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80697d0:	68fb      	ldr	r3, [r7, #12]
 80697d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80697d6:	2b01      	cmp	r3, #1
 80697d8:	d101      	bne.n	80697de <HAL_UART_Transmit+0x3e>
 80697da:	2302      	movs	r3, #2
 80697dc:	e06e      	b.n	80698bc <HAL_UART_Transmit+0x11c>
 80697de:	68fb      	ldr	r3, [r7, #12]
 80697e0:	2201      	movs	r2, #1
 80697e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80697e6:	68fb      	ldr	r3, [r7, #12]
 80697e8:	2200      	movs	r2, #0
 80697ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80697ec:	68fb      	ldr	r3, [r7, #12]
 80697ee:	2221      	movs	r2, #33	; 0x21
 80697f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80697f4:	f7fa f864 	bl	80638c0 <HAL_GetTick>
 80697f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80697fa:	68fb      	ldr	r3, [r7, #12]
 80697fc:	88fa      	ldrh	r2, [r7, #6]
 80697fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8069800:	68fb      	ldr	r3, [r7, #12]
 8069802:	88fa      	ldrh	r2, [r7, #6]
 8069804:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8069806:	68fb      	ldr	r3, [r7, #12]
 8069808:	689b      	ldr	r3, [r3, #8]
 806980a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806980e:	d108      	bne.n	8069822 <HAL_UART_Transmit+0x82>
 8069810:	68fb      	ldr	r3, [r7, #12]
 8069812:	691b      	ldr	r3, [r3, #16]
 8069814:	2b00      	cmp	r3, #0
 8069816:	d104      	bne.n	8069822 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8069818:	2300      	movs	r3, #0
 806981a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 806981c:	68bb      	ldr	r3, [r7, #8]
 806981e:	61bb      	str	r3, [r7, #24]
 8069820:	e003      	b.n	806982a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8069822:	68bb      	ldr	r3, [r7, #8]
 8069824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8069826:	2300      	movs	r3, #0
 8069828:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 806982a:	68fb      	ldr	r3, [r7, #12]
 806982c:	2200      	movs	r2, #0
 806982e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8069832:	e02a      	b.n	806988a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8069834:	683b      	ldr	r3, [r7, #0]
 8069836:	9300      	str	r3, [sp, #0]
 8069838:	697b      	ldr	r3, [r7, #20]
 806983a:	2200      	movs	r2, #0
 806983c:	2180      	movs	r1, #128	; 0x80
 806983e:	68f8      	ldr	r0, [r7, #12]
 8069840:	f000 fbc0 	bl	8069fc4 <UART_WaitOnFlagUntilTimeout>
 8069844:	4603      	mov	r3, r0
 8069846:	2b00      	cmp	r3, #0
 8069848:	d001      	beq.n	806984e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 806984a:	2303      	movs	r3, #3
 806984c:	e036      	b.n	80698bc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 806984e:	69fb      	ldr	r3, [r7, #28]
 8069850:	2b00      	cmp	r3, #0
 8069852:	d10b      	bne.n	806986c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8069854:	69bb      	ldr	r3, [r7, #24]
 8069856:	881b      	ldrh	r3, [r3, #0]
 8069858:	461a      	mov	r2, r3
 806985a:	68fb      	ldr	r3, [r7, #12]
 806985c:	681b      	ldr	r3, [r3, #0]
 806985e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8069862:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8069864:	69bb      	ldr	r3, [r7, #24]
 8069866:	3302      	adds	r3, #2
 8069868:	61bb      	str	r3, [r7, #24]
 806986a:	e007      	b.n	806987c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 806986c:	69fb      	ldr	r3, [r7, #28]
 806986e:	781a      	ldrb	r2, [r3, #0]
 8069870:	68fb      	ldr	r3, [r7, #12]
 8069872:	681b      	ldr	r3, [r3, #0]
 8069874:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8069876:	69fb      	ldr	r3, [r7, #28]
 8069878:	3301      	adds	r3, #1
 806987a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 806987c:	68fb      	ldr	r3, [r7, #12]
 806987e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8069880:	b29b      	uxth	r3, r3
 8069882:	3b01      	subs	r3, #1
 8069884:	b29a      	uxth	r2, r3
 8069886:	68fb      	ldr	r3, [r7, #12]
 8069888:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 806988a:	68fb      	ldr	r3, [r7, #12]
 806988c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 806988e:	b29b      	uxth	r3, r3
 8069890:	2b00      	cmp	r3, #0
 8069892:	d1cf      	bne.n	8069834 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8069894:	683b      	ldr	r3, [r7, #0]
 8069896:	9300      	str	r3, [sp, #0]
 8069898:	697b      	ldr	r3, [r7, #20]
 806989a:	2200      	movs	r2, #0
 806989c:	2140      	movs	r1, #64	; 0x40
 806989e:	68f8      	ldr	r0, [r7, #12]
 80698a0:	f000 fb90 	bl	8069fc4 <UART_WaitOnFlagUntilTimeout>
 80698a4:	4603      	mov	r3, r0
 80698a6:	2b00      	cmp	r3, #0
 80698a8:	d001      	beq.n	80698ae <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80698aa:	2303      	movs	r3, #3
 80698ac:	e006      	b.n	80698bc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80698ae:	68fb      	ldr	r3, [r7, #12]
 80698b0:	2220      	movs	r2, #32
 80698b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80698b6:	2300      	movs	r3, #0
 80698b8:	e000      	b.n	80698bc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80698ba:	2302      	movs	r3, #2
  }
}
 80698bc:	4618      	mov	r0, r3
 80698be:	3720      	adds	r7, #32
 80698c0:	46bd      	mov	sp, r7
 80698c2:	bd80      	pop	{r7, pc}

080698c4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80698c4:	b580      	push	{r7, lr}
 80698c6:	b08a      	sub	sp, #40	; 0x28
 80698c8:	af02      	add	r7, sp, #8
 80698ca:	60f8      	str	r0, [r7, #12]
 80698cc:	60b9      	str	r1, [r7, #8]
 80698ce:	603b      	str	r3, [r7, #0]
 80698d0:	4613      	mov	r3, r2
 80698d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80698d4:	2300      	movs	r3, #0
 80698d6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80698d8:	68fb      	ldr	r3, [r7, #12]
 80698da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80698de:	b2db      	uxtb	r3, r3
 80698e0:	2b20      	cmp	r3, #32
 80698e2:	f040 808c 	bne.w	80699fe <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80698e6:	68bb      	ldr	r3, [r7, #8]
 80698e8:	2b00      	cmp	r3, #0
 80698ea:	d002      	beq.n	80698f2 <HAL_UART_Receive+0x2e>
 80698ec:	88fb      	ldrh	r3, [r7, #6]
 80698ee:	2b00      	cmp	r3, #0
 80698f0:	d101      	bne.n	80698f6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80698f2:	2301      	movs	r3, #1
 80698f4:	e084      	b.n	8069a00 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80698f6:	68fb      	ldr	r3, [r7, #12]
 80698f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80698fc:	2b01      	cmp	r3, #1
 80698fe:	d101      	bne.n	8069904 <HAL_UART_Receive+0x40>
 8069900:	2302      	movs	r3, #2
 8069902:	e07d      	b.n	8069a00 <HAL_UART_Receive+0x13c>
 8069904:	68fb      	ldr	r3, [r7, #12]
 8069906:	2201      	movs	r2, #1
 8069908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 806990c:	68fb      	ldr	r3, [r7, #12]
 806990e:	2200      	movs	r2, #0
 8069910:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8069912:	68fb      	ldr	r3, [r7, #12]
 8069914:	2222      	movs	r2, #34	; 0x22
 8069916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806991a:	68fb      	ldr	r3, [r7, #12]
 806991c:	2200      	movs	r2, #0
 806991e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8069920:	f7f9 ffce 	bl	80638c0 <HAL_GetTick>
 8069924:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8069926:	68fb      	ldr	r3, [r7, #12]
 8069928:	88fa      	ldrh	r2, [r7, #6]
 806992a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 806992c:	68fb      	ldr	r3, [r7, #12]
 806992e:	88fa      	ldrh	r2, [r7, #6]
 8069930:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8069932:	68fb      	ldr	r3, [r7, #12]
 8069934:	689b      	ldr	r3, [r3, #8]
 8069936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806993a:	d108      	bne.n	806994e <HAL_UART_Receive+0x8a>
 806993c:	68fb      	ldr	r3, [r7, #12]
 806993e:	691b      	ldr	r3, [r3, #16]
 8069940:	2b00      	cmp	r3, #0
 8069942:	d104      	bne.n	806994e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8069944:	2300      	movs	r3, #0
 8069946:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8069948:	68bb      	ldr	r3, [r7, #8]
 806994a:	61bb      	str	r3, [r7, #24]
 806994c:	e003      	b.n	8069956 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 806994e:	68bb      	ldr	r3, [r7, #8]
 8069950:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8069952:	2300      	movs	r3, #0
 8069954:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8069956:	68fb      	ldr	r3, [r7, #12]
 8069958:	2200      	movs	r2, #0
 806995a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 806995e:	e043      	b.n	80699e8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8069960:	683b      	ldr	r3, [r7, #0]
 8069962:	9300      	str	r3, [sp, #0]
 8069964:	697b      	ldr	r3, [r7, #20]
 8069966:	2200      	movs	r2, #0
 8069968:	2120      	movs	r1, #32
 806996a:	68f8      	ldr	r0, [r7, #12]
 806996c:	f000 fb2a 	bl	8069fc4 <UART_WaitOnFlagUntilTimeout>
 8069970:	4603      	mov	r3, r0
 8069972:	2b00      	cmp	r3, #0
 8069974:	d001      	beq.n	806997a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8069976:	2303      	movs	r3, #3
 8069978:	e042      	b.n	8069a00 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 806997a:	69fb      	ldr	r3, [r7, #28]
 806997c:	2b00      	cmp	r3, #0
 806997e:	d10c      	bne.n	806999a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8069980:	68fb      	ldr	r3, [r7, #12]
 8069982:	681b      	ldr	r3, [r3, #0]
 8069984:	685b      	ldr	r3, [r3, #4]
 8069986:	b29b      	uxth	r3, r3
 8069988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806998c:	b29a      	uxth	r2, r3
 806998e:	69bb      	ldr	r3, [r7, #24]
 8069990:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8069992:	69bb      	ldr	r3, [r7, #24]
 8069994:	3302      	adds	r3, #2
 8069996:	61bb      	str	r3, [r7, #24]
 8069998:	e01f      	b.n	80699da <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 806999a:	68fb      	ldr	r3, [r7, #12]
 806999c:	689b      	ldr	r3, [r3, #8]
 806999e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80699a2:	d007      	beq.n	80699b4 <HAL_UART_Receive+0xf0>
 80699a4:	68fb      	ldr	r3, [r7, #12]
 80699a6:	689b      	ldr	r3, [r3, #8]
 80699a8:	2b00      	cmp	r3, #0
 80699aa:	d10a      	bne.n	80699c2 <HAL_UART_Receive+0xfe>
 80699ac:	68fb      	ldr	r3, [r7, #12]
 80699ae:	691b      	ldr	r3, [r3, #16]
 80699b0:	2b00      	cmp	r3, #0
 80699b2:	d106      	bne.n	80699c2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80699b4:	68fb      	ldr	r3, [r7, #12]
 80699b6:	681b      	ldr	r3, [r3, #0]
 80699b8:	685b      	ldr	r3, [r3, #4]
 80699ba:	b2da      	uxtb	r2, r3
 80699bc:	69fb      	ldr	r3, [r7, #28]
 80699be:	701a      	strb	r2, [r3, #0]
 80699c0:	e008      	b.n	80699d4 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80699c2:	68fb      	ldr	r3, [r7, #12]
 80699c4:	681b      	ldr	r3, [r3, #0]
 80699c6:	685b      	ldr	r3, [r3, #4]
 80699c8:	b2db      	uxtb	r3, r3
 80699ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80699ce:	b2da      	uxtb	r2, r3
 80699d0:	69fb      	ldr	r3, [r7, #28]
 80699d2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80699d4:	69fb      	ldr	r3, [r7, #28]
 80699d6:	3301      	adds	r3, #1
 80699d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80699da:	68fb      	ldr	r3, [r7, #12]
 80699dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80699de:	b29b      	uxth	r3, r3
 80699e0:	3b01      	subs	r3, #1
 80699e2:	b29a      	uxth	r2, r3
 80699e4:	68fb      	ldr	r3, [r7, #12]
 80699e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80699e8:	68fb      	ldr	r3, [r7, #12]
 80699ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80699ec:	b29b      	uxth	r3, r3
 80699ee:	2b00      	cmp	r3, #0
 80699f0:	d1b6      	bne.n	8069960 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80699f2:	68fb      	ldr	r3, [r7, #12]
 80699f4:	2220      	movs	r2, #32
 80699f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80699fa:	2300      	movs	r3, #0
 80699fc:	e000      	b.n	8069a00 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80699fe:	2302      	movs	r3, #2
  }
}
 8069a00:	4618      	mov	r0, r3
 8069a02:	3720      	adds	r7, #32
 8069a04:	46bd      	mov	sp, r7
 8069a06:	bd80      	pop	{r7, pc}

08069a08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8069a08:	b580      	push	{r7, lr}
 8069a0a:	b084      	sub	sp, #16
 8069a0c:	af00      	add	r7, sp, #0
 8069a0e:	60f8      	str	r0, [r7, #12]
 8069a10:	60b9      	str	r1, [r7, #8]
 8069a12:	4613      	mov	r3, r2
 8069a14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8069a16:	68fb      	ldr	r3, [r7, #12]
 8069a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8069a1c:	b2db      	uxtb	r3, r3
 8069a1e:	2b20      	cmp	r3, #32
 8069a20:	d11d      	bne.n	8069a5e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8069a22:	68bb      	ldr	r3, [r7, #8]
 8069a24:	2b00      	cmp	r3, #0
 8069a26:	d002      	beq.n	8069a2e <HAL_UART_Receive_IT+0x26>
 8069a28:	88fb      	ldrh	r3, [r7, #6]
 8069a2a:	2b00      	cmp	r3, #0
 8069a2c:	d101      	bne.n	8069a32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8069a2e:	2301      	movs	r3, #1
 8069a30:	e016      	b.n	8069a60 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8069a32:	68fb      	ldr	r3, [r7, #12]
 8069a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8069a38:	2b01      	cmp	r3, #1
 8069a3a:	d101      	bne.n	8069a40 <HAL_UART_Receive_IT+0x38>
 8069a3c:	2302      	movs	r3, #2
 8069a3e:	e00f      	b.n	8069a60 <HAL_UART_Receive_IT+0x58>
 8069a40:	68fb      	ldr	r3, [r7, #12]
 8069a42:	2201      	movs	r2, #1
 8069a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8069a48:	68fb      	ldr	r3, [r7, #12]
 8069a4a:	2200      	movs	r2, #0
 8069a4c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8069a4e:	88fb      	ldrh	r3, [r7, #6]
 8069a50:	461a      	mov	r2, r3
 8069a52:	68b9      	ldr	r1, [r7, #8]
 8069a54:	68f8      	ldr	r0, [r7, #12]
 8069a56:	f000 fb23 	bl	806a0a0 <UART_Start_Receive_IT>
 8069a5a:	4603      	mov	r3, r0
 8069a5c:	e000      	b.n	8069a60 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8069a5e:	2302      	movs	r3, #2
  }
}
 8069a60:	4618      	mov	r0, r3
 8069a62:	3710      	adds	r7, #16
 8069a64:	46bd      	mov	sp, r7
 8069a66:	bd80      	pop	{r7, pc}

08069a68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8069a68:	b580      	push	{r7, lr}
 8069a6a:	b0ba      	sub	sp, #232	; 0xe8
 8069a6c:	af00      	add	r7, sp, #0
 8069a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8069a70:	687b      	ldr	r3, [r7, #4]
 8069a72:	681b      	ldr	r3, [r3, #0]
 8069a74:	681b      	ldr	r3, [r3, #0]
 8069a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8069a7a:	687b      	ldr	r3, [r7, #4]
 8069a7c:	681b      	ldr	r3, [r3, #0]
 8069a7e:	68db      	ldr	r3, [r3, #12]
 8069a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8069a84:	687b      	ldr	r3, [r7, #4]
 8069a86:	681b      	ldr	r3, [r3, #0]
 8069a88:	695b      	ldr	r3, [r3, #20]
 8069a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8069a8e:	2300      	movs	r3, #0
 8069a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8069a94:	2300      	movs	r3, #0
 8069a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8069a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069a9e:	f003 030f 	and.w	r3, r3, #15
 8069aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8069aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8069aaa:	2b00      	cmp	r3, #0
 8069aac:	d10f      	bne.n	8069ace <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8069aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069ab2:	f003 0320 	and.w	r3, r3, #32
 8069ab6:	2b00      	cmp	r3, #0
 8069ab8:	d009      	beq.n	8069ace <HAL_UART_IRQHandler+0x66>
 8069aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069abe:	f003 0320 	and.w	r3, r3, #32
 8069ac2:	2b00      	cmp	r3, #0
 8069ac4:	d003      	beq.n	8069ace <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8069ac6:	6878      	ldr	r0, [r7, #4]
 8069ac8:	f000 fc03 	bl	806a2d2 <UART_Receive_IT>
      return;
 8069acc:	e256      	b.n	8069f7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8069ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8069ad2:	2b00      	cmp	r3, #0
 8069ad4:	f000 80de 	beq.w	8069c94 <HAL_UART_IRQHandler+0x22c>
 8069ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8069adc:	f003 0301 	and.w	r3, r3, #1
 8069ae0:	2b00      	cmp	r3, #0
 8069ae2:	d106      	bne.n	8069af2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8069ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069ae8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8069aec:	2b00      	cmp	r3, #0
 8069aee:	f000 80d1 	beq.w	8069c94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8069af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069af6:	f003 0301 	and.w	r3, r3, #1
 8069afa:	2b00      	cmp	r3, #0
 8069afc:	d00b      	beq.n	8069b16 <HAL_UART_IRQHandler+0xae>
 8069afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8069b06:	2b00      	cmp	r3, #0
 8069b08:	d005      	beq.n	8069b16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8069b0a:	687b      	ldr	r3, [r7, #4]
 8069b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069b0e:	f043 0201 	orr.w	r2, r3, #1
 8069b12:	687b      	ldr	r3, [r7, #4]
 8069b14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8069b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069b1a:	f003 0304 	and.w	r3, r3, #4
 8069b1e:	2b00      	cmp	r3, #0
 8069b20:	d00b      	beq.n	8069b3a <HAL_UART_IRQHandler+0xd2>
 8069b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8069b26:	f003 0301 	and.w	r3, r3, #1
 8069b2a:	2b00      	cmp	r3, #0
 8069b2c:	d005      	beq.n	8069b3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8069b2e:	687b      	ldr	r3, [r7, #4]
 8069b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069b32:	f043 0202 	orr.w	r2, r3, #2
 8069b36:	687b      	ldr	r3, [r7, #4]
 8069b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8069b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069b3e:	f003 0302 	and.w	r3, r3, #2
 8069b42:	2b00      	cmp	r3, #0
 8069b44:	d00b      	beq.n	8069b5e <HAL_UART_IRQHandler+0xf6>
 8069b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8069b4a:	f003 0301 	and.w	r3, r3, #1
 8069b4e:	2b00      	cmp	r3, #0
 8069b50:	d005      	beq.n	8069b5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8069b52:	687b      	ldr	r3, [r7, #4]
 8069b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069b56:	f043 0204 	orr.w	r2, r3, #4
 8069b5a:	687b      	ldr	r3, [r7, #4]
 8069b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8069b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069b62:	f003 0308 	and.w	r3, r3, #8
 8069b66:	2b00      	cmp	r3, #0
 8069b68:	d011      	beq.n	8069b8e <HAL_UART_IRQHandler+0x126>
 8069b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069b6e:	f003 0320 	and.w	r3, r3, #32
 8069b72:	2b00      	cmp	r3, #0
 8069b74:	d105      	bne.n	8069b82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8069b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8069b7a:	f003 0301 	and.w	r3, r3, #1
 8069b7e:	2b00      	cmp	r3, #0
 8069b80:	d005      	beq.n	8069b8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8069b82:	687b      	ldr	r3, [r7, #4]
 8069b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069b86:	f043 0208 	orr.w	r2, r3, #8
 8069b8a:	687b      	ldr	r3, [r7, #4]
 8069b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8069b8e:	687b      	ldr	r3, [r7, #4]
 8069b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069b92:	2b00      	cmp	r3, #0
 8069b94:	f000 81ed 	beq.w	8069f72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8069b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069b9c:	f003 0320 	and.w	r3, r3, #32
 8069ba0:	2b00      	cmp	r3, #0
 8069ba2:	d008      	beq.n	8069bb6 <HAL_UART_IRQHandler+0x14e>
 8069ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069ba8:	f003 0320 	and.w	r3, r3, #32
 8069bac:	2b00      	cmp	r3, #0
 8069bae:	d002      	beq.n	8069bb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8069bb0:	6878      	ldr	r0, [r7, #4]
 8069bb2:	f000 fb8e 	bl	806a2d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8069bb6:	687b      	ldr	r3, [r7, #4]
 8069bb8:	681b      	ldr	r3, [r3, #0]
 8069bba:	695b      	ldr	r3, [r3, #20]
 8069bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069bc0:	2b40      	cmp	r3, #64	; 0x40
 8069bc2:	bf0c      	ite	eq
 8069bc4:	2301      	moveq	r3, #1
 8069bc6:	2300      	movne	r3, #0
 8069bc8:	b2db      	uxtb	r3, r3
 8069bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8069bce:	687b      	ldr	r3, [r7, #4]
 8069bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8069bd2:	f003 0308 	and.w	r3, r3, #8
 8069bd6:	2b00      	cmp	r3, #0
 8069bd8:	d103      	bne.n	8069be2 <HAL_UART_IRQHandler+0x17a>
 8069bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8069bde:	2b00      	cmp	r3, #0
 8069be0:	d04f      	beq.n	8069c82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8069be2:	6878      	ldr	r0, [r7, #4]
 8069be4:	f000 fa96 	bl	806a114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069be8:	687b      	ldr	r3, [r7, #4]
 8069bea:	681b      	ldr	r3, [r3, #0]
 8069bec:	695b      	ldr	r3, [r3, #20]
 8069bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069bf2:	2b40      	cmp	r3, #64	; 0x40
 8069bf4:	d141      	bne.n	8069c7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8069bf6:	687b      	ldr	r3, [r7, #4]
 8069bf8:	681b      	ldr	r3, [r3, #0]
 8069bfa:	3314      	adds	r3, #20
 8069bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8069c04:	e853 3f00 	ldrex	r3, [r3]
 8069c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8069c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8069c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8069c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8069c18:	687b      	ldr	r3, [r7, #4]
 8069c1a:	681b      	ldr	r3, [r3, #0]
 8069c1c:	3314      	adds	r3, #20
 8069c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8069c22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8069c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8069c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8069c32:	e841 2300 	strex	r3, r2, [r1]
 8069c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8069c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8069c3e:	2b00      	cmp	r3, #0
 8069c40:	d1d9      	bne.n	8069bf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8069c42:	687b      	ldr	r3, [r7, #4]
 8069c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069c46:	2b00      	cmp	r3, #0
 8069c48:	d013      	beq.n	8069c72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8069c4a:	687b      	ldr	r3, [r7, #4]
 8069c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069c4e:	4a7d      	ldr	r2, [pc, #500]	; (8069e44 <HAL_UART_IRQHandler+0x3dc>)
 8069c50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8069c52:	687b      	ldr	r3, [r7, #4]
 8069c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069c56:	4618      	mov	r0, r3
 8069c58:	f7fb f99a 	bl	8064f90 <HAL_DMA_Abort_IT>
 8069c5c:	4603      	mov	r3, r0
 8069c5e:	2b00      	cmp	r3, #0
 8069c60:	d016      	beq.n	8069c90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8069c62:	687b      	ldr	r3, [r7, #4]
 8069c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8069c68:	687a      	ldr	r2, [r7, #4]
 8069c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8069c6c:	4610      	mov	r0, r2
 8069c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069c70:	e00e      	b.n	8069c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8069c72:	6878      	ldr	r0, [r7, #4]
 8069c74:	f000 f990 	bl	8069f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069c78:	e00a      	b.n	8069c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8069c7a:	6878      	ldr	r0, [r7, #4]
 8069c7c:	f000 f98c 	bl	8069f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069c80:	e006      	b.n	8069c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8069c82:	6878      	ldr	r0, [r7, #4]
 8069c84:	f000 f988 	bl	8069f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8069c88:	687b      	ldr	r3, [r7, #4]
 8069c8a:	2200      	movs	r2, #0
 8069c8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8069c8e:	e170      	b.n	8069f72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069c90:	bf00      	nop
    return;
 8069c92:	e16e      	b.n	8069f72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8069c94:	687b      	ldr	r3, [r7, #4]
 8069c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8069c98:	2b01      	cmp	r3, #1
 8069c9a:	f040 814a 	bne.w	8069f32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8069c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069ca2:	f003 0310 	and.w	r3, r3, #16
 8069ca6:	2b00      	cmp	r3, #0
 8069ca8:	f000 8143 	beq.w	8069f32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8069cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069cb0:	f003 0310 	and.w	r3, r3, #16
 8069cb4:	2b00      	cmp	r3, #0
 8069cb6:	f000 813c 	beq.w	8069f32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8069cba:	2300      	movs	r3, #0
 8069cbc:	60bb      	str	r3, [r7, #8]
 8069cbe:	687b      	ldr	r3, [r7, #4]
 8069cc0:	681b      	ldr	r3, [r3, #0]
 8069cc2:	681b      	ldr	r3, [r3, #0]
 8069cc4:	60bb      	str	r3, [r7, #8]
 8069cc6:	687b      	ldr	r3, [r7, #4]
 8069cc8:	681b      	ldr	r3, [r3, #0]
 8069cca:	685b      	ldr	r3, [r3, #4]
 8069ccc:	60bb      	str	r3, [r7, #8]
 8069cce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8069cd0:	687b      	ldr	r3, [r7, #4]
 8069cd2:	681b      	ldr	r3, [r3, #0]
 8069cd4:	695b      	ldr	r3, [r3, #20]
 8069cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069cda:	2b40      	cmp	r3, #64	; 0x40
 8069cdc:	f040 80b4 	bne.w	8069e48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8069ce0:	687b      	ldr	r3, [r7, #4]
 8069ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069ce4:	681b      	ldr	r3, [r3, #0]
 8069ce6:	685b      	ldr	r3, [r3, #4]
 8069ce8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8069cec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8069cf0:	2b00      	cmp	r3, #0
 8069cf2:	f000 8140 	beq.w	8069f76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8069cf6:	687b      	ldr	r3, [r7, #4]
 8069cf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8069cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8069cfe:	429a      	cmp	r2, r3
 8069d00:	f080 8139 	bcs.w	8069f76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8069d04:	687b      	ldr	r3, [r7, #4]
 8069d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8069d0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8069d0c:	687b      	ldr	r3, [r7, #4]
 8069d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069d10:	69db      	ldr	r3, [r3, #28]
 8069d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8069d16:	f000 8088 	beq.w	8069e2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8069d1a:	687b      	ldr	r3, [r7, #4]
 8069d1c:	681b      	ldr	r3, [r3, #0]
 8069d1e:	330c      	adds	r3, #12
 8069d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8069d28:	e853 3f00 	ldrex	r3, [r3]
 8069d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8069d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8069d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8069d38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8069d3c:	687b      	ldr	r3, [r7, #4]
 8069d3e:	681b      	ldr	r3, [r3, #0]
 8069d40:	330c      	adds	r3, #12
 8069d42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8069d46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8069d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069d4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8069d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8069d56:	e841 2300 	strex	r3, r2, [r1]
 8069d5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8069d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8069d62:	2b00      	cmp	r3, #0
 8069d64:	d1d9      	bne.n	8069d1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8069d66:	687b      	ldr	r3, [r7, #4]
 8069d68:	681b      	ldr	r3, [r3, #0]
 8069d6a:	3314      	adds	r3, #20
 8069d6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8069d70:	e853 3f00 	ldrex	r3, [r3]
 8069d74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8069d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8069d78:	f023 0301 	bic.w	r3, r3, #1
 8069d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8069d80:	687b      	ldr	r3, [r7, #4]
 8069d82:	681b      	ldr	r3, [r3, #0]
 8069d84:	3314      	adds	r3, #20
 8069d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8069d8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8069d8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069d90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8069d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8069d96:	e841 2300 	strex	r3, r2, [r1]
 8069d9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8069d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8069d9e:	2b00      	cmp	r3, #0
 8069da0:	d1e1      	bne.n	8069d66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8069da2:	687b      	ldr	r3, [r7, #4]
 8069da4:	681b      	ldr	r3, [r3, #0]
 8069da6:	3314      	adds	r3, #20
 8069da8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8069dac:	e853 3f00 	ldrex	r3, [r3]
 8069db0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8069db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8069db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8069db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8069dbc:	687b      	ldr	r3, [r7, #4]
 8069dbe:	681b      	ldr	r3, [r3, #0]
 8069dc0:	3314      	adds	r3, #20
 8069dc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8069dc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8069dc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069dca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8069dcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8069dce:	e841 2300 	strex	r3, r2, [r1]
 8069dd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8069dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8069dd6:	2b00      	cmp	r3, #0
 8069dd8:	d1e3      	bne.n	8069da2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8069dda:	687b      	ldr	r3, [r7, #4]
 8069ddc:	2220      	movs	r2, #32
 8069dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8069de2:	687b      	ldr	r3, [r7, #4]
 8069de4:	2200      	movs	r2, #0
 8069de6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8069de8:	687b      	ldr	r3, [r7, #4]
 8069dea:	681b      	ldr	r3, [r3, #0]
 8069dec:	330c      	adds	r3, #12
 8069dee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8069df2:	e853 3f00 	ldrex	r3, [r3]
 8069df6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8069df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8069dfa:	f023 0310 	bic.w	r3, r3, #16
 8069dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8069e02:	687b      	ldr	r3, [r7, #4]
 8069e04:	681b      	ldr	r3, [r3, #0]
 8069e06:	330c      	adds	r3, #12
 8069e08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8069e0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8069e0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069e10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8069e12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8069e14:	e841 2300 	strex	r3, r2, [r1]
 8069e18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8069e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8069e1c:	2b00      	cmp	r3, #0
 8069e1e:	d1e3      	bne.n	8069de8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8069e20:	687b      	ldr	r3, [r7, #4]
 8069e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8069e24:	4618      	mov	r0, r3
 8069e26:	f7fb f843 	bl	8064eb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8069e2a:	687b      	ldr	r3, [r7, #4]
 8069e2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8069e2e:	687b      	ldr	r3, [r7, #4]
 8069e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8069e32:	b29b      	uxth	r3, r3
 8069e34:	1ad3      	subs	r3, r2, r3
 8069e36:	b29b      	uxth	r3, r3
 8069e38:	4619      	mov	r1, r3
 8069e3a:	6878      	ldr	r0, [r7, #4]
 8069e3c:	f000 f8b6 	bl	8069fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8069e40:	e099      	b.n	8069f76 <HAL_UART_IRQHandler+0x50e>
 8069e42:	bf00      	nop
 8069e44:	0806a1db 	.word	0x0806a1db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8069e48:	687b      	ldr	r3, [r7, #4]
 8069e4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8069e4c:	687b      	ldr	r3, [r7, #4]
 8069e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8069e50:	b29b      	uxth	r3, r3
 8069e52:	1ad3      	subs	r3, r2, r3
 8069e54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8069e58:	687b      	ldr	r3, [r7, #4]
 8069e5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8069e5c:	b29b      	uxth	r3, r3
 8069e5e:	2b00      	cmp	r3, #0
 8069e60:	f000 808b 	beq.w	8069f7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8069e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8069e68:	2b00      	cmp	r3, #0
 8069e6a:	f000 8086 	beq.w	8069f7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8069e6e:	687b      	ldr	r3, [r7, #4]
 8069e70:	681b      	ldr	r3, [r3, #0]
 8069e72:	330c      	adds	r3, #12
 8069e74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8069e78:	e853 3f00 	ldrex	r3, [r3]
 8069e7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8069e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8069e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8069e84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8069e88:	687b      	ldr	r3, [r7, #4]
 8069e8a:	681b      	ldr	r3, [r3, #0]
 8069e8c:	330c      	adds	r3, #12
 8069e8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8069e92:	647a      	str	r2, [r7, #68]	; 0x44
 8069e94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069e96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8069e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8069e9a:	e841 2300 	strex	r3, r2, [r1]
 8069e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8069ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8069ea2:	2b00      	cmp	r3, #0
 8069ea4:	d1e3      	bne.n	8069e6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8069ea6:	687b      	ldr	r3, [r7, #4]
 8069ea8:	681b      	ldr	r3, [r3, #0]
 8069eaa:	3314      	adds	r3, #20
 8069eac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8069eb0:	e853 3f00 	ldrex	r3, [r3]
 8069eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8069eb6:	6a3b      	ldr	r3, [r7, #32]
 8069eb8:	f023 0301 	bic.w	r3, r3, #1
 8069ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8069ec0:	687b      	ldr	r3, [r7, #4]
 8069ec2:	681b      	ldr	r3, [r3, #0]
 8069ec4:	3314      	adds	r3, #20
 8069ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8069eca:	633a      	str	r2, [r7, #48]	; 0x30
 8069ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8069ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8069ed2:	e841 2300 	strex	r3, r2, [r1]
 8069ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8069ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069eda:	2b00      	cmp	r3, #0
 8069edc:	d1e3      	bne.n	8069ea6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8069ede:	687b      	ldr	r3, [r7, #4]
 8069ee0:	2220      	movs	r2, #32
 8069ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8069ee6:	687b      	ldr	r3, [r7, #4]
 8069ee8:	2200      	movs	r2, #0
 8069eea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8069eec:	687b      	ldr	r3, [r7, #4]
 8069eee:	681b      	ldr	r3, [r3, #0]
 8069ef0:	330c      	adds	r3, #12
 8069ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069ef4:	693b      	ldr	r3, [r7, #16]
 8069ef6:	e853 3f00 	ldrex	r3, [r3]
 8069efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8069efc:	68fb      	ldr	r3, [r7, #12]
 8069efe:	f023 0310 	bic.w	r3, r3, #16
 8069f02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8069f06:	687b      	ldr	r3, [r7, #4]
 8069f08:	681b      	ldr	r3, [r3, #0]
 8069f0a:	330c      	adds	r3, #12
 8069f0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8069f10:	61fa      	str	r2, [r7, #28]
 8069f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8069f14:	69b9      	ldr	r1, [r7, #24]
 8069f16:	69fa      	ldr	r2, [r7, #28]
 8069f18:	e841 2300 	strex	r3, r2, [r1]
 8069f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8069f1e:	697b      	ldr	r3, [r7, #20]
 8069f20:	2b00      	cmp	r3, #0
 8069f22:	d1e3      	bne.n	8069eec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8069f24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8069f28:	4619      	mov	r1, r3
 8069f2a:	6878      	ldr	r0, [r7, #4]
 8069f2c:	f000 f83e 	bl	8069fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8069f30:	e023      	b.n	8069f7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8069f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8069f3a:	2b00      	cmp	r3, #0
 8069f3c:	d009      	beq.n	8069f52 <HAL_UART_IRQHandler+0x4ea>
 8069f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8069f46:	2b00      	cmp	r3, #0
 8069f48:	d003      	beq.n	8069f52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8069f4a:	6878      	ldr	r0, [r7, #4]
 8069f4c:	f000 f959 	bl	806a202 <UART_Transmit_IT>
    return;
 8069f50:	e014      	b.n	8069f7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8069f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8069f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069f5a:	2b00      	cmp	r3, #0
 8069f5c:	d00e      	beq.n	8069f7c <HAL_UART_IRQHandler+0x514>
 8069f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8069f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8069f66:	2b00      	cmp	r3, #0
 8069f68:	d008      	beq.n	8069f7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8069f6a:	6878      	ldr	r0, [r7, #4]
 8069f6c:	f000 f999 	bl	806a2a2 <UART_EndTransmit_IT>
    return;
 8069f70:	e004      	b.n	8069f7c <HAL_UART_IRQHandler+0x514>
    return;
 8069f72:	bf00      	nop
 8069f74:	e002      	b.n	8069f7c <HAL_UART_IRQHandler+0x514>
      return;
 8069f76:	bf00      	nop
 8069f78:	e000      	b.n	8069f7c <HAL_UART_IRQHandler+0x514>
      return;
 8069f7a:	bf00      	nop
  }
}
 8069f7c:	37e8      	adds	r7, #232	; 0xe8
 8069f7e:	46bd      	mov	sp, r7
 8069f80:	bd80      	pop	{r7, pc}
 8069f82:	bf00      	nop

08069f84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8069f84:	b480      	push	{r7}
 8069f86:	b083      	sub	sp, #12
 8069f88:	af00      	add	r7, sp, #0
 8069f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8069f8c:	bf00      	nop
 8069f8e:	370c      	adds	r7, #12
 8069f90:	46bd      	mov	sp, r7
 8069f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069f96:	4770      	bx	lr

08069f98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8069f98:	b480      	push	{r7}
 8069f9a:	b083      	sub	sp, #12
 8069f9c:	af00      	add	r7, sp, #0
 8069f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8069fa0:	bf00      	nop
 8069fa2:	370c      	adds	r7, #12
 8069fa4:	46bd      	mov	sp, r7
 8069fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069faa:	4770      	bx	lr

08069fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8069fac:	b480      	push	{r7}
 8069fae:	b083      	sub	sp, #12
 8069fb0:	af00      	add	r7, sp, #0
 8069fb2:	6078      	str	r0, [r7, #4]
 8069fb4:	460b      	mov	r3, r1
 8069fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8069fb8:	bf00      	nop
 8069fba:	370c      	adds	r7, #12
 8069fbc:	46bd      	mov	sp, r7
 8069fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8069fc2:	4770      	bx	lr

08069fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8069fc4:	b580      	push	{r7, lr}
 8069fc6:	b090      	sub	sp, #64	; 0x40
 8069fc8:	af00      	add	r7, sp, #0
 8069fca:	60f8      	str	r0, [r7, #12]
 8069fcc:	60b9      	str	r1, [r7, #8]
 8069fce:	603b      	str	r3, [r7, #0]
 8069fd0:	4613      	mov	r3, r2
 8069fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8069fd4:	e050      	b.n	806a078 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8069fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8069fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8069fdc:	d04c      	beq.n	806a078 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8069fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8069fe0:	2b00      	cmp	r3, #0
 8069fe2:	d007      	beq.n	8069ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8069fe4:	f7f9 fc6c 	bl	80638c0 <HAL_GetTick>
 8069fe8:	4602      	mov	r2, r0
 8069fea:	683b      	ldr	r3, [r7, #0]
 8069fec:	1ad3      	subs	r3, r2, r3
 8069fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8069ff0:	429a      	cmp	r2, r3
 8069ff2:	d241      	bcs.n	806a078 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8069ff4:	68fb      	ldr	r3, [r7, #12]
 8069ff6:	681b      	ldr	r3, [r3, #0]
 8069ff8:	330c      	adds	r3, #12
 8069ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8069ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8069ffe:	e853 3f00 	ldrex	r3, [r3]
 806a002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 806a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806a006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 806a00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 806a00c:	68fb      	ldr	r3, [r7, #12]
 806a00e:	681b      	ldr	r3, [r3, #0]
 806a010:	330c      	adds	r3, #12
 806a012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 806a014:	637a      	str	r2, [r7, #52]	; 0x34
 806a016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 806a01a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806a01c:	e841 2300 	strex	r3, r2, [r1]
 806a020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 806a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a024:	2b00      	cmp	r3, #0
 806a026:	d1e5      	bne.n	8069ff4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 806a028:	68fb      	ldr	r3, [r7, #12]
 806a02a:	681b      	ldr	r3, [r3, #0]
 806a02c:	3314      	adds	r3, #20
 806a02e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a030:	697b      	ldr	r3, [r7, #20]
 806a032:	e853 3f00 	ldrex	r3, [r3]
 806a036:	613b      	str	r3, [r7, #16]
   return(result);
 806a038:	693b      	ldr	r3, [r7, #16]
 806a03a:	f023 0301 	bic.w	r3, r3, #1
 806a03e:	63bb      	str	r3, [r7, #56]	; 0x38
 806a040:	68fb      	ldr	r3, [r7, #12]
 806a042:	681b      	ldr	r3, [r3, #0]
 806a044:	3314      	adds	r3, #20
 806a046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806a048:	623a      	str	r2, [r7, #32]
 806a04a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a04c:	69f9      	ldr	r1, [r7, #28]
 806a04e:	6a3a      	ldr	r2, [r7, #32]
 806a050:	e841 2300 	strex	r3, r2, [r1]
 806a054:	61bb      	str	r3, [r7, #24]
   return(result);
 806a056:	69bb      	ldr	r3, [r7, #24]
 806a058:	2b00      	cmp	r3, #0
 806a05a:	d1e5      	bne.n	806a028 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 806a05c:	68fb      	ldr	r3, [r7, #12]
 806a05e:	2220      	movs	r2, #32
 806a060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 806a064:	68fb      	ldr	r3, [r7, #12]
 806a066:	2220      	movs	r2, #32
 806a068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 806a06c:	68fb      	ldr	r3, [r7, #12]
 806a06e:	2200      	movs	r2, #0
 806a070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 806a074:	2303      	movs	r3, #3
 806a076:	e00f      	b.n	806a098 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 806a078:	68fb      	ldr	r3, [r7, #12]
 806a07a:	681b      	ldr	r3, [r3, #0]
 806a07c:	681a      	ldr	r2, [r3, #0]
 806a07e:	68bb      	ldr	r3, [r7, #8]
 806a080:	4013      	ands	r3, r2
 806a082:	68ba      	ldr	r2, [r7, #8]
 806a084:	429a      	cmp	r2, r3
 806a086:	bf0c      	ite	eq
 806a088:	2301      	moveq	r3, #1
 806a08a:	2300      	movne	r3, #0
 806a08c:	b2db      	uxtb	r3, r3
 806a08e:	461a      	mov	r2, r3
 806a090:	79fb      	ldrb	r3, [r7, #7]
 806a092:	429a      	cmp	r2, r3
 806a094:	d09f      	beq.n	8069fd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 806a096:	2300      	movs	r3, #0
}
 806a098:	4618      	mov	r0, r3
 806a09a:	3740      	adds	r7, #64	; 0x40
 806a09c:	46bd      	mov	sp, r7
 806a09e:	bd80      	pop	{r7, pc}

0806a0a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 806a0a0:	b480      	push	{r7}
 806a0a2:	b085      	sub	sp, #20
 806a0a4:	af00      	add	r7, sp, #0
 806a0a6:	60f8      	str	r0, [r7, #12]
 806a0a8:	60b9      	str	r1, [r7, #8]
 806a0aa:	4613      	mov	r3, r2
 806a0ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 806a0ae:	68fb      	ldr	r3, [r7, #12]
 806a0b0:	68ba      	ldr	r2, [r7, #8]
 806a0b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 806a0b4:	68fb      	ldr	r3, [r7, #12]
 806a0b6:	88fa      	ldrh	r2, [r7, #6]
 806a0b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 806a0ba:	68fb      	ldr	r3, [r7, #12]
 806a0bc:	88fa      	ldrh	r2, [r7, #6]
 806a0be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 806a0c0:	68fb      	ldr	r3, [r7, #12]
 806a0c2:	2200      	movs	r2, #0
 806a0c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 806a0c6:	68fb      	ldr	r3, [r7, #12]
 806a0c8:	2222      	movs	r2, #34	; 0x22
 806a0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 806a0ce:	68fb      	ldr	r3, [r7, #12]
 806a0d0:	2200      	movs	r2, #0
 806a0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 806a0d6:	68fb      	ldr	r3, [r7, #12]
 806a0d8:	681b      	ldr	r3, [r3, #0]
 806a0da:	68da      	ldr	r2, [r3, #12]
 806a0dc:	68fb      	ldr	r3, [r7, #12]
 806a0de:	681b      	ldr	r3, [r3, #0]
 806a0e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 806a0e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 806a0e6:	68fb      	ldr	r3, [r7, #12]
 806a0e8:	681b      	ldr	r3, [r3, #0]
 806a0ea:	695a      	ldr	r2, [r3, #20]
 806a0ec:	68fb      	ldr	r3, [r7, #12]
 806a0ee:	681b      	ldr	r3, [r3, #0]
 806a0f0:	f042 0201 	orr.w	r2, r2, #1
 806a0f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 806a0f6:	68fb      	ldr	r3, [r7, #12]
 806a0f8:	681b      	ldr	r3, [r3, #0]
 806a0fa:	68da      	ldr	r2, [r3, #12]
 806a0fc:	68fb      	ldr	r3, [r7, #12]
 806a0fe:	681b      	ldr	r3, [r3, #0]
 806a100:	f042 0220 	orr.w	r2, r2, #32
 806a104:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 806a106:	2300      	movs	r3, #0
}
 806a108:	4618      	mov	r0, r3
 806a10a:	3714      	adds	r7, #20
 806a10c:	46bd      	mov	sp, r7
 806a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a112:	4770      	bx	lr

0806a114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 806a114:	b480      	push	{r7}
 806a116:	b095      	sub	sp, #84	; 0x54
 806a118:	af00      	add	r7, sp, #0
 806a11a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 806a11c:	687b      	ldr	r3, [r7, #4]
 806a11e:	681b      	ldr	r3, [r3, #0]
 806a120:	330c      	adds	r3, #12
 806a122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806a126:	e853 3f00 	ldrex	r3, [r3]
 806a12a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 806a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806a12e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 806a132:	64fb      	str	r3, [r7, #76]	; 0x4c
 806a134:	687b      	ldr	r3, [r7, #4]
 806a136:	681b      	ldr	r3, [r3, #0]
 806a138:	330c      	adds	r3, #12
 806a13a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 806a13c:	643a      	str	r2, [r7, #64]	; 0x40
 806a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 806a142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 806a144:	e841 2300 	strex	r3, r2, [r1]
 806a148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 806a14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806a14c:	2b00      	cmp	r3, #0
 806a14e:	d1e5      	bne.n	806a11c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 806a150:	687b      	ldr	r3, [r7, #4]
 806a152:	681b      	ldr	r3, [r3, #0]
 806a154:	3314      	adds	r3, #20
 806a156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a158:	6a3b      	ldr	r3, [r7, #32]
 806a15a:	e853 3f00 	ldrex	r3, [r3]
 806a15e:	61fb      	str	r3, [r7, #28]
   return(result);
 806a160:	69fb      	ldr	r3, [r7, #28]
 806a162:	f023 0301 	bic.w	r3, r3, #1
 806a166:	64bb      	str	r3, [r7, #72]	; 0x48
 806a168:	687b      	ldr	r3, [r7, #4]
 806a16a:	681b      	ldr	r3, [r3, #0]
 806a16c:	3314      	adds	r3, #20
 806a16e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 806a170:	62fa      	str	r2, [r7, #44]	; 0x2c
 806a172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 806a176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806a178:	e841 2300 	strex	r3, r2, [r1]
 806a17c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 806a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806a180:	2b00      	cmp	r3, #0
 806a182:	d1e5      	bne.n	806a150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 806a184:	687b      	ldr	r3, [r7, #4]
 806a186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806a188:	2b01      	cmp	r3, #1
 806a18a:	d119      	bne.n	806a1c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 806a18c:	687b      	ldr	r3, [r7, #4]
 806a18e:	681b      	ldr	r3, [r3, #0]
 806a190:	330c      	adds	r3, #12
 806a192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a194:	68fb      	ldr	r3, [r7, #12]
 806a196:	e853 3f00 	ldrex	r3, [r3]
 806a19a:	60bb      	str	r3, [r7, #8]
   return(result);
 806a19c:	68bb      	ldr	r3, [r7, #8]
 806a19e:	f023 0310 	bic.w	r3, r3, #16
 806a1a2:	647b      	str	r3, [r7, #68]	; 0x44
 806a1a4:	687b      	ldr	r3, [r7, #4]
 806a1a6:	681b      	ldr	r3, [r3, #0]
 806a1a8:	330c      	adds	r3, #12
 806a1aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 806a1ac:	61ba      	str	r2, [r7, #24]
 806a1ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a1b0:	6979      	ldr	r1, [r7, #20]
 806a1b2:	69ba      	ldr	r2, [r7, #24]
 806a1b4:	e841 2300 	strex	r3, r2, [r1]
 806a1b8:	613b      	str	r3, [r7, #16]
   return(result);
 806a1ba:	693b      	ldr	r3, [r7, #16]
 806a1bc:	2b00      	cmp	r3, #0
 806a1be:	d1e5      	bne.n	806a18c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 806a1c0:	687b      	ldr	r3, [r7, #4]
 806a1c2:	2220      	movs	r2, #32
 806a1c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806a1c8:	687b      	ldr	r3, [r7, #4]
 806a1ca:	2200      	movs	r2, #0
 806a1cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 806a1ce:	bf00      	nop
 806a1d0:	3754      	adds	r7, #84	; 0x54
 806a1d2:	46bd      	mov	sp, r7
 806a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a1d8:	4770      	bx	lr

0806a1da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 806a1da:	b580      	push	{r7, lr}
 806a1dc:	b084      	sub	sp, #16
 806a1de:	af00      	add	r7, sp, #0
 806a1e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 806a1e2:	687b      	ldr	r3, [r7, #4]
 806a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806a1e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 806a1e8:	68fb      	ldr	r3, [r7, #12]
 806a1ea:	2200      	movs	r2, #0
 806a1ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 806a1ee:	68fb      	ldr	r3, [r7, #12]
 806a1f0:	2200      	movs	r2, #0
 806a1f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 806a1f4:	68f8      	ldr	r0, [r7, #12]
 806a1f6:	f7ff fecf 	bl	8069f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 806a1fa:	bf00      	nop
 806a1fc:	3710      	adds	r7, #16
 806a1fe:	46bd      	mov	sp, r7
 806a200:	bd80      	pop	{r7, pc}

0806a202 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 806a202:	b480      	push	{r7}
 806a204:	b085      	sub	sp, #20
 806a206:	af00      	add	r7, sp, #0
 806a208:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 806a20a:	687b      	ldr	r3, [r7, #4]
 806a20c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 806a210:	b2db      	uxtb	r3, r3
 806a212:	2b21      	cmp	r3, #33	; 0x21
 806a214:	d13e      	bne.n	806a294 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 806a216:	687b      	ldr	r3, [r7, #4]
 806a218:	689b      	ldr	r3, [r3, #8]
 806a21a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806a21e:	d114      	bne.n	806a24a <UART_Transmit_IT+0x48>
 806a220:	687b      	ldr	r3, [r7, #4]
 806a222:	691b      	ldr	r3, [r3, #16]
 806a224:	2b00      	cmp	r3, #0
 806a226:	d110      	bne.n	806a24a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 806a228:	687b      	ldr	r3, [r7, #4]
 806a22a:	6a1b      	ldr	r3, [r3, #32]
 806a22c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 806a22e:	68fb      	ldr	r3, [r7, #12]
 806a230:	881b      	ldrh	r3, [r3, #0]
 806a232:	461a      	mov	r2, r3
 806a234:	687b      	ldr	r3, [r7, #4]
 806a236:	681b      	ldr	r3, [r3, #0]
 806a238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 806a23c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 806a23e:	687b      	ldr	r3, [r7, #4]
 806a240:	6a1b      	ldr	r3, [r3, #32]
 806a242:	1c9a      	adds	r2, r3, #2
 806a244:	687b      	ldr	r3, [r7, #4]
 806a246:	621a      	str	r2, [r3, #32]
 806a248:	e008      	b.n	806a25c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 806a24a:	687b      	ldr	r3, [r7, #4]
 806a24c:	6a1b      	ldr	r3, [r3, #32]
 806a24e:	1c59      	adds	r1, r3, #1
 806a250:	687a      	ldr	r2, [r7, #4]
 806a252:	6211      	str	r1, [r2, #32]
 806a254:	781a      	ldrb	r2, [r3, #0]
 806a256:	687b      	ldr	r3, [r7, #4]
 806a258:	681b      	ldr	r3, [r3, #0]
 806a25a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 806a25c:	687b      	ldr	r3, [r7, #4]
 806a25e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 806a260:	b29b      	uxth	r3, r3
 806a262:	3b01      	subs	r3, #1
 806a264:	b29b      	uxth	r3, r3
 806a266:	687a      	ldr	r2, [r7, #4]
 806a268:	4619      	mov	r1, r3
 806a26a:	84d1      	strh	r1, [r2, #38]	; 0x26
 806a26c:	2b00      	cmp	r3, #0
 806a26e:	d10f      	bne.n	806a290 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 806a270:	687b      	ldr	r3, [r7, #4]
 806a272:	681b      	ldr	r3, [r3, #0]
 806a274:	68da      	ldr	r2, [r3, #12]
 806a276:	687b      	ldr	r3, [r7, #4]
 806a278:	681b      	ldr	r3, [r3, #0]
 806a27a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 806a27e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 806a280:	687b      	ldr	r3, [r7, #4]
 806a282:	681b      	ldr	r3, [r3, #0]
 806a284:	68da      	ldr	r2, [r3, #12]
 806a286:	687b      	ldr	r3, [r7, #4]
 806a288:	681b      	ldr	r3, [r3, #0]
 806a28a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 806a28e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 806a290:	2300      	movs	r3, #0
 806a292:	e000      	b.n	806a296 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 806a294:	2302      	movs	r3, #2
  }
}
 806a296:	4618      	mov	r0, r3
 806a298:	3714      	adds	r7, #20
 806a29a:	46bd      	mov	sp, r7
 806a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a2a0:	4770      	bx	lr

0806a2a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 806a2a2:	b580      	push	{r7, lr}
 806a2a4:	b082      	sub	sp, #8
 806a2a6:	af00      	add	r7, sp, #0
 806a2a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 806a2aa:	687b      	ldr	r3, [r7, #4]
 806a2ac:	681b      	ldr	r3, [r3, #0]
 806a2ae:	68da      	ldr	r2, [r3, #12]
 806a2b0:	687b      	ldr	r3, [r7, #4]
 806a2b2:	681b      	ldr	r3, [r3, #0]
 806a2b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 806a2b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 806a2ba:	687b      	ldr	r3, [r7, #4]
 806a2bc:	2220      	movs	r2, #32
 806a2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 806a2c2:	6878      	ldr	r0, [r7, #4]
 806a2c4:	f7ff fe5e 	bl	8069f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 806a2c8:	2300      	movs	r3, #0
}
 806a2ca:	4618      	mov	r0, r3
 806a2cc:	3708      	adds	r7, #8
 806a2ce:	46bd      	mov	sp, r7
 806a2d0:	bd80      	pop	{r7, pc}

0806a2d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 806a2d2:	b580      	push	{r7, lr}
 806a2d4:	b08c      	sub	sp, #48	; 0x30
 806a2d6:	af00      	add	r7, sp, #0
 806a2d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 806a2da:	687b      	ldr	r3, [r7, #4]
 806a2dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 806a2e0:	b2db      	uxtb	r3, r3
 806a2e2:	2b22      	cmp	r3, #34	; 0x22
 806a2e4:	f040 80ab 	bne.w	806a43e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 806a2e8:	687b      	ldr	r3, [r7, #4]
 806a2ea:	689b      	ldr	r3, [r3, #8]
 806a2ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806a2f0:	d117      	bne.n	806a322 <UART_Receive_IT+0x50>
 806a2f2:	687b      	ldr	r3, [r7, #4]
 806a2f4:	691b      	ldr	r3, [r3, #16]
 806a2f6:	2b00      	cmp	r3, #0
 806a2f8:	d113      	bne.n	806a322 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 806a2fa:	2300      	movs	r3, #0
 806a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 806a2fe:	687b      	ldr	r3, [r7, #4]
 806a300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806a302:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 806a304:	687b      	ldr	r3, [r7, #4]
 806a306:	681b      	ldr	r3, [r3, #0]
 806a308:	685b      	ldr	r3, [r3, #4]
 806a30a:	b29b      	uxth	r3, r3
 806a30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806a310:	b29a      	uxth	r2, r3
 806a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806a314:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 806a316:	687b      	ldr	r3, [r7, #4]
 806a318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806a31a:	1c9a      	adds	r2, r3, #2
 806a31c:	687b      	ldr	r3, [r7, #4]
 806a31e:	629a      	str	r2, [r3, #40]	; 0x28
 806a320:	e026      	b.n	806a370 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 806a322:	687b      	ldr	r3, [r7, #4]
 806a324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806a326:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 806a328:	2300      	movs	r3, #0
 806a32a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 806a32c:	687b      	ldr	r3, [r7, #4]
 806a32e:	689b      	ldr	r3, [r3, #8]
 806a330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806a334:	d007      	beq.n	806a346 <UART_Receive_IT+0x74>
 806a336:	687b      	ldr	r3, [r7, #4]
 806a338:	689b      	ldr	r3, [r3, #8]
 806a33a:	2b00      	cmp	r3, #0
 806a33c:	d10a      	bne.n	806a354 <UART_Receive_IT+0x82>
 806a33e:	687b      	ldr	r3, [r7, #4]
 806a340:	691b      	ldr	r3, [r3, #16]
 806a342:	2b00      	cmp	r3, #0
 806a344:	d106      	bne.n	806a354 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 806a346:	687b      	ldr	r3, [r7, #4]
 806a348:	681b      	ldr	r3, [r3, #0]
 806a34a:	685b      	ldr	r3, [r3, #4]
 806a34c:	b2da      	uxtb	r2, r3
 806a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a350:	701a      	strb	r2, [r3, #0]
 806a352:	e008      	b.n	806a366 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 806a354:	687b      	ldr	r3, [r7, #4]
 806a356:	681b      	ldr	r3, [r3, #0]
 806a358:	685b      	ldr	r3, [r3, #4]
 806a35a:	b2db      	uxtb	r3, r3
 806a35c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806a360:	b2da      	uxtb	r2, r3
 806a362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806a364:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 806a366:	687b      	ldr	r3, [r7, #4]
 806a368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806a36a:	1c5a      	adds	r2, r3, #1
 806a36c:	687b      	ldr	r3, [r7, #4]
 806a36e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 806a370:	687b      	ldr	r3, [r7, #4]
 806a372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 806a374:	b29b      	uxth	r3, r3
 806a376:	3b01      	subs	r3, #1
 806a378:	b29b      	uxth	r3, r3
 806a37a:	687a      	ldr	r2, [r7, #4]
 806a37c:	4619      	mov	r1, r3
 806a37e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 806a380:	2b00      	cmp	r3, #0
 806a382:	d15a      	bne.n	806a43a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 806a384:	687b      	ldr	r3, [r7, #4]
 806a386:	681b      	ldr	r3, [r3, #0]
 806a388:	68da      	ldr	r2, [r3, #12]
 806a38a:	687b      	ldr	r3, [r7, #4]
 806a38c:	681b      	ldr	r3, [r3, #0]
 806a38e:	f022 0220 	bic.w	r2, r2, #32
 806a392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 806a394:	687b      	ldr	r3, [r7, #4]
 806a396:	681b      	ldr	r3, [r3, #0]
 806a398:	68da      	ldr	r2, [r3, #12]
 806a39a:	687b      	ldr	r3, [r7, #4]
 806a39c:	681b      	ldr	r3, [r3, #0]
 806a39e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 806a3a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 806a3a4:	687b      	ldr	r3, [r7, #4]
 806a3a6:	681b      	ldr	r3, [r3, #0]
 806a3a8:	695a      	ldr	r2, [r3, #20]
 806a3aa:	687b      	ldr	r3, [r7, #4]
 806a3ac:	681b      	ldr	r3, [r3, #0]
 806a3ae:	f022 0201 	bic.w	r2, r2, #1
 806a3b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 806a3b4:	687b      	ldr	r3, [r7, #4]
 806a3b6:	2220      	movs	r2, #32
 806a3b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 806a3bc:	687b      	ldr	r3, [r7, #4]
 806a3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806a3c0:	2b01      	cmp	r3, #1
 806a3c2:	d135      	bne.n	806a430 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806a3c4:	687b      	ldr	r3, [r7, #4]
 806a3c6:	2200      	movs	r2, #0
 806a3c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 806a3ca:	687b      	ldr	r3, [r7, #4]
 806a3cc:	681b      	ldr	r3, [r3, #0]
 806a3ce:	330c      	adds	r3, #12
 806a3d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806a3d2:	697b      	ldr	r3, [r7, #20]
 806a3d4:	e853 3f00 	ldrex	r3, [r3]
 806a3d8:	613b      	str	r3, [r7, #16]
   return(result);
 806a3da:	693b      	ldr	r3, [r7, #16]
 806a3dc:	f023 0310 	bic.w	r3, r3, #16
 806a3e0:	627b      	str	r3, [r7, #36]	; 0x24
 806a3e2:	687b      	ldr	r3, [r7, #4]
 806a3e4:	681b      	ldr	r3, [r3, #0]
 806a3e6:	330c      	adds	r3, #12
 806a3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806a3ea:	623a      	str	r2, [r7, #32]
 806a3ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806a3ee:	69f9      	ldr	r1, [r7, #28]
 806a3f0:	6a3a      	ldr	r2, [r7, #32]
 806a3f2:	e841 2300 	strex	r3, r2, [r1]
 806a3f6:	61bb      	str	r3, [r7, #24]
   return(result);
 806a3f8:	69bb      	ldr	r3, [r7, #24]
 806a3fa:	2b00      	cmp	r3, #0
 806a3fc:	d1e5      	bne.n	806a3ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 806a3fe:	687b      	ldr	r3, [r7, #4]
 806a400:	681b      	ldr	r3, [r3, #0]
 806a402:	681b      	ldr	r3, [r3, #0]
 806a404:	f003 0310 	and.w	r3, r3, #16
 806a408:	2b10      	cmp	r3, #16
 806a40a:	d10a      	bne.n	806a422 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 806a40c:	2300      	movs	r3, #0
 806a40e:	60fb      	str	r3, [r7, #12]
 806a410:	687b      	ldr	r3, [r7, #4]
 806a412:	681b      	ldr	r3, [r3, #0]
 806a414:	681b      	ldr	r3, [r3, #0]
 806a416:	60fb      	str	r3, [r7, #12]
 806a418:	687b      	ldr	r3, [r7, #4]
 806a41a:	681b      	ldr	r3, [r3, #0]
 806a41c:	685b      	ldr	r3, [r3, #4]
 806a41e:	60fb      	str	r3, [r7, #12]
 806a420:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 806a422:	687b      	ldr	r3, [r7, #4]
 806a424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 806a426:	4619      	mov	r1, r3
 806a428:	6878      	ldr	r0, [r7, #4]
 806a42a:	f7ff fdbf 	bl	8069fac <HAL_UARTEx_RxEventCallback>
 806a42e:	e002      	b.n	806a436 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 806a430:	6878      	ldr	r0, [r7, #4]
 806a432:	f7f8 f9cf 	bl	80627d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 806a436:	2300      	movs	r3, #0
 806a438:	e002      	b.n	806a440 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 806a43a:	2300      	movs	r3, #0
 806a43c:	e000      	b.n	806a440 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 806a43e:	2302      	movs	r3, #2
  }
}
 806a440:	4618      	mov	r0, r3
 806a442:	3730      	adds	r7, #48	; 0x30
 806a444:	46bd      	mov	sp, r7
 806a446:	bd80      	pop	{r7, pc}

0806a448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 806a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 806a44c:	b09f      	sub	sp, #124	; 0x7c
 806a44e:	af00      	add	r7, sp, #0
 806a450:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 806a452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a454:	685a      	ldr	r2, [r3, #4]
 806a456:	4b9b      	ldr	r3, [pc, #620]	; (806a6c4 <UART_SetConfig+0x27c>)
 806a458:	429a      	cmp	r2, r3
 806a45a:	d904      	bls.n	806a466 <UART_SetConfig+0x1e>
 806a45c:	f640 6156 	movw	r1, #3670	; 0xe56
 806a460:	4899      	ldr	r0, [pc, #612]	; (806a6c8 <UART_SetConfig+0x280>)
 806a462:	f7f8 fd62 	bl	8062f2a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 806a466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a468:	68db      	ldr	r3, [r3, #12]
 806a46a:	2b00      	cmp	r3, #0
 806a46c:	d009      	beq.n	806a482 <UART_SetConfig+0x3a>
 806a46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a470:	68db      	ldr	r3, [r3, #12]
 806a472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 806a476:	d004      	beq.n	806a482 <UART_SetConfig+0x3a>
 806a478:	f640 6157 	movw	r1, #3671	; 0xe57
 806a47c:	4892      	ldr	r0, [pc, #584]	; (806a6c8 <UART_SetConfig+0x280>)
 806a47e:	f7f8 fd54 	bl	8062f2a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 806a482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a484:	691b      	ldr	r3, [r3, #16]
 806a486:	2b00      	cmp	r3, #0
 806a488:	d00e      	beq.n	806a4a8 <UART_SetConfig+0x60>
 806a48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a48c:	691b      	ldr	r3, [r3, #16]
 806a48e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 806a492:	d009      	beq.n	806a4a8 <UART_SetConfig+0x60>
 806a494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a496:	691b      	ldr	r3, [r3, #16]
 806a498:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 806a49c:	d004      	beq.n	806a4a8 <UART_SetConfig+0x60>
 806a49e:	f640 6158 	movw	r1, #3672	; 0xe58
 806a4a2:	4889      	ldr	r0, [pc, #548]	; (806a6c8 <UART_SetConfig+0x280>)
 806a4a4:	f7f8 fd41 	bl	8062f2a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 806a4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a4aa:	695a      	ldr	r2, [r3, #20]
 806a4ac:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 806a4b0:	4013      	ands	r3, r2
 806a4b2:	2b00      	cmp	r3, #0
 806a4b4:	d103      	bne.n	806a4be <UART_SetConfig+0x76>
 806a4b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a4b8:	695b      	ldr	r3, [r3, #20]
 806a4ba:	2b00      	cmp	r3, #0
 806a4bc:	d104      	bne.n	806a4c8 <UART_SetConfig+0x80>
 806a4be:	f640 6159 	movw	r1, #3673	; 0xe59
 806a4c2:	4881      	ldr	r0, [pc, #516]	; (806a6c8 <UART_SetConfig+0x280>)
 806a4c4:	f7f8 fd31 	bl	8062f2a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 806a4c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a4ca:	681b      	ldr	r3, [r3, #0]
 806a4cc:	691b      	ldr	r3, [r3, #16]
 806a4ce:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 806a4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a4d4:	68d9      	ldr	r1, [r3, #12]
 806a4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a4d8:	681a      	ldr	r2, [r3, #0]
 806a4da:	ea40 0301 	orr.w	r3, r0, r1
 806a4de:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 806a4e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a4e2:	689a      	ldr	r2, [r3, #8]
 806a4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a4e6:	691b      	ldr	r3, [r3, #16]
 806a4e8:	431a      	orrs	r2, r3
 806a4ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a4ec:	695b      	ldr	r3, [r3, #20]
 806a4ee:	431a      	orrs	r2, r3
 806a4f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a4f2:	69db      	ldr	r3, [r3, #28]
 806a4f4:	4313      	orrs	r3, r2
 806a4f6:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 806a4f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a4fa:	681b      	ldr	r3, [r3, #0]
 806a4fc:	68db      	ldr	r3, [r3, #12]
 806a4fe:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 806a502:	f021 010c 	bic.w	r1, r1, #12
 806a506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a508:	681a      	ldr	r2, [r3, #0]
 806a50a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 806a50c:	430b      	orrs	r3, r1
 806a50e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 806a510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a512:	681b      	ldr	r3, [r3, #0]
 806a514:	695b      	ldr	r3, [r3, #20]
 806a516:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 806a51a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a51c:	6999      	ldr	r1, [r3, #24]
 806a51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a520:	681a      	ldr	r2, [r3, #0]
 806a522:	ea40 0301 	orr.w	r3, r0, r1
 806a526:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 806a528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a52a:	681a      	ldr	r2, [r3, #0]
 806a52c:	4b67      	ldr	r3, [pc, #412]	; (806a6cc <UART_SetConfig+0x284>)
 806a52e:	429a      	cmp	r2, r3
 806a530:	d004      	beq.n	806a53c <UART_SetConfig+0xf4>
 806a532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a534:	681a      	ldr	r2, [r3, #0]
 806a536:	4b66      	ldr	r3, [pc, #408]	; (806a6d0 <UART_SetConfig+0x288>)
 806a538:	429a      	cmp	r2, r3
 806a53a:	d103      	bne.n	806a544 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 806a53c:	f7fd fd50 	bl	8067fe0 <HAL_RCC_GetPCLK2Freq>
 806a540:	6778      	str	r0, [r7, #116]	; 0x74
 806a542:	e002      	b.n	806a54a <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 806a544:	f7fd fd38 	bl	8067fb8 <HAL_RCC_GetPCLK1Freq>
 806a548:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 806a54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a54c:	69db      	ldr	r3, [r3, #28]
 806a54e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 806a552:	f040 80c1 	bne.w	806a6d8 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 806a556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a558:	461c      	mov	r4, r3
 806a55a:	f04f 0500 	mov.w	r5, #0
 806a55e:	4622      	mov	r2, r4
 806a560:	462b      	mov	r3, r5
 806a562:	1891      	adds	r1, r2, r2
 806a564:	6439      	str	r1, [r7, #64]	; 0x40
 806a566:	415b      	adcs	r3, r3
 806a568:	647b      	str	r3, [r7, #68]	; 0x44
 806a56a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 806a56e:	1912      	adds	r2, r2, r4
 806a570:	eb45 0303 	adc.w	r3, r5, r3
 806a574:	f04f 0000 	mov.w	r0, #0
 806a578:	f04f 0100 	mov.w	r1, #0
 806a57c:	00d9      	lsls	r1, r3, #3
 806a57e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 806a582:	00d0      	lsls	r0, r2, #3
 806a584:	4602      	mov	r2, r0
 806a586:	460b      	mov	r3, r1
 806a588:	1911      	adds	r1, r2, r4
 806a58a:	6639      	str	r1, [r7, #96]	; 0x60
 806a58c:	416b      	adcs	r3, r5
 806a58e:	667b      	str	r3, [r7, #100]	; 0x64
 806a590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a592:	685b      	ldr	r3, [r3, #4]
 806a594:	461a      	mov	r2, r3
 806a596:	f04f 0300 	mov.w	r3, #0
 806a59a:	1891      	adds	r1, r2, r2
 806a59c:	63b9      	str	r1, [r7, #56]	; 0x38
 806a59e:	415b      	adcs	r3, r3
 806a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 806a5a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 806a5a6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 806a5aa:	f7f6 fbd5 	bl	8060d58 <__aeabi_uldivmod>
 806a5ae:	4602      	mov	r2, r0
 806a5b0:	460b      	mov	r3, r1
 806a5b2:	4b48      	ldr	r3, [pc, #288]	; (806a6d4 <UART_SetConfig+0x28c>)
 806a5b4:	fba3 2302 	umull	r2, r3, r3, r2
 806a5b8:	095b      	lsrs	r3, r3, #5
 806a5ba:	011e      	lsls	r6, r3, #4
 806a5bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a5be:	461c      	mov	r4, r3
 806a5c0:	f04f 0500 	mov.w	r5, #0
 806a5c4:	4622      	mov	r2, r4
 806a5c6:	462b      	mov	r3, r5
 806a5c8:	1891      	adds	r1, r2, r2
 806a5ca:	6339      	str	r1, [r7, #48]	; 0x30
 806a5cc:	415b      	adcs	r3, r3
 806a5ce:	637b      	str	r3, [r7, #52]	; 0x34
 806a5d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 806a5d4:	1912      	adds	r2, r2, r4
 806a5d6:	eb45 0303 	adc.w	r3, r5, r3
 806a5da:	f04f 0000 	mov.w	r0, #0
 806a5de:	f04f 0100 	mov.w	r1, #0
 806a5e2:	00d9      	lsls	r1, r3, #3
 806a5e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 806a5e8:	00d0      	lsls	r0, r2, #3
 806a5ea:	4602      	mov	r2, r0
 806a5ec:	460b      	mov	r3, r1
 806a5ee:	1911      	adds	r1, r2, r4
 806a5f0:	65b9      	str	r1, [r7, #88]	; 0x58
 806a5f2:	416b      	adcs	r3, r5
 806a5f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 806a5f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a5f8:	685b      	ldr	r3, [r3, #4]
 806a5fa:	461a      	mov	r2, r3
 806a5fc:	f04f 0300 	mov.w	r3, #0
 806a600:	1891      	adds	r1, r2, r2
 806a602:	62b9      	str	r1, [r7, #40]	; 0x28
 806a604:	415b      	adcs	r3, r3
 806a606:	62fb      	str	r3, [r7, #44]	; 0x2c
 806a608:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 806a60c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 806a610:	f7f6 fba2 	bl	8060d58 <__aeabi_uldivmod>
 806a614:	4602      	mov	r2, r0
 806a616:	460b      	mov	r3, r1
 806a618:	4b2e      	ldr	r3, [pc, #184]	; (806a6d4 <UART_SetConfig+0x28c>)
 806a61a:	fba3 1302 	umull	r1, r3, r3, r2
 806a61e:	095b      	lsrs	r3, r3, #5
 806a620:	2164      	movs	r1, #100	; 0x64
 806a622:	fb01 f303 	mul.w	r3, r1, r3
 806a626:	1ad3      	subs	r3, r2, r3
 806a628:	00db      	lsls	r3, r3, #3
 806a62a:	3332      	adds	r3, #50	; 0x32
 806a62c:	4a29      	ldr	r2, [pc, #164]	; (806a6d4 <UART_SetConfig+0x28c>)
 806a62e:	fba2 2303 	umull	r2, r3, r2, r3
 806a632:	095b      	lsrs	r3, r3, #5
 806a634:	005b      	lsls	r3, r3, #1
 806a636:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 806a63a:	441e      	add	r6, r3
 806a63c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a63e:	4618      	mov	r0, r3
 806a640:	f04f 0100 	mov.w	r1, #0
 806a644:	4602      	mov	r2, r0
 806a646:	460b      	mov	r3, r1
 806a648:	1894      	adds	r4, r2, r2
 806a64a:	623c      	str	r4, [r7, #32]
 806a64c:	415b      	adcs	r3, r3
 806a64e:	627b      	str	r3, [r7, #36]	; 0x24
 806a650:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 806a654:	1812      	adds	r2, r2, r0
 806a656:	eb41 0303 	adc.w	r3, r1, r3
 806a65a:	f04f 0400 	mov.w	r4, #0
 806a65e:	f04f 0500 	mov.w	r5, #0
 806a662:	00dd      	lsls	r5, r3, #3
 806a664:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 806a668:	00d4      	lsls	r4, r2, #3
 806a66a:	4622      	mov	r2, r4
 806a66c:	462b      	mov	r3, r5
 806a66e:	1814      	adds	r4, r2, r0
 806a670:	653c      	str	r4, [r7, #80]	; 0x50
 806a672:	414b      	adcs	r3, r1
 806a674:	657b      	str	r3, [r7, #84]	; 0x54
 806a676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a678:	685b      	ldr	r3, [r3, #4]
 806a67a:	461a      	mov	r2, r3
 806a67c:	f04f 0300 	mov.w	r3, #0
 806a680:	1891      	adds	r1, r2, r2
 806a682:	61b9      	str	r1, [r7, #24]
 806a684:	415b      	adcs	r3, r3
 806a686:	61fb      	str	r3, [r7, #28]
 806a688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 806a68c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 806a690:	f7f6 fb62 	bl	8060d58 <__aeabi_uldivmod>
 806a694:	4602      	mov	r2, r0
 806a696:	460b      	mov	r3, r1
 806a698:	4b0e      	ldr	r3, [pc, #56]	; (806a6d4 <UART_SetConfig+0x28c>)
 806a69a:	fba3 1302 	umull	r1, r3, r3, r2
 806a69e:	095b      	lsrs	r3, r3, #5
 806a6a0:	2164      	movs	r1, #100	; 0x64
 806a6a2:	fb01 f303 	mul.w	r3, r1, r3
 806a6a6:	1ad3      	subs	r3, r2, r3
 806a6a8:	00db      	lsls	r3, r3, #3
 806a6aa:	3332      	adds	r3, #50	; 0x32
 806a6ac:	4a09      	ldr	r2, [pc, #36]	; (806a6d4 <UART_SetConfig+0x28c>)
 806a6ae:	fba2 2303 	umull	r2, r3, r2, r3
 806a6b2:	095b      	lsrs	r3, r3, #5
 806a6b4:	f003 0207 	and.w	r2, r3, #7
 806a6b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a6ba:	681b      	ldr	r3, [r3, #0]
 806a6bc:	4432      	add	r2, r6
 806a6be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 806a6c0:	e0c4      	b.n	806a84c <UART_SetConfig+0x404>
 806a6c2:	bf00      	nop
 806a6c4:	00a037a0 	.word	0x00a037a0
 806a6c8:	080772d8 	.word	0x080772d8
 806a6cc:	40011000 	.word	0x40011000
 806a6d0:	40011400 	.word	0x40011400
 806a6d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 806a6d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a6da:	461c      	mov	r4, r3
 806a6dc:	f04f 0500 	mov.w	r5, #0
 806a6e0:	4622      	mov	r2, r4
 806a6e2:	462b      	mov	r3, r5
 806a6e4:	1891      	adds	r1, r2, r2
 806a6e6:	6139      	str	r1, [r7, #16]
 806a6e8:	415b      	adcs	r3, r3
 806a6ea:	617b      	str	r3, [r7, #20]
 806a6ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 806a6f0:	1912      	adds	r2, r2, r4
 806a6f2:	eb45 0303 	adc.w	r3, r5, r3
 806a6f6:	f04f 0000 	mov.w	r0, #0
 806a6fa:	f04f 0100 	mov.w	r1, #0
 806a6fe:	00d9      	lsls	r1, r3, #3
 806a700:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 806a704:	00d0      	lsls	r0, r2, #3
 806a706:	4602      	mov	r2, r0
 806a708:	460b      	mov	r3, r1
 806a70a:	eb12 0804 	adds.w	r8, r2, r4
 806a70e:	eb43 0905 	adc.w	r9, r3, r5
 806a712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a714:	685b      	ldr	r3, [r3, #4]
 806a716:	4618      	mov	r0, r3
 806a718:	f04f 0100 	mov.w	r1, #0
 806a71c:	f04f 0200 	mov.w	r2, #0
 806a720:	f04f 0300 	mov.w	r3, #0
 806a724:	008b      	lsls	r3, r1, #2
 806a726:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 806a72a:	0082      	lsls	r2, r0, #2
 806a72c:	4640      	mov	r0, r8
 806a72e:	4649      	mov	r1, r9
 806a730:	f7f6 fb12 	bl	8060d58 <__aeabi_uldivmod>
 806a734:	4602      	mov	r2, r0
 806a736:	460b      	mov	r3, r1
 806a738:	4b47      	ldr	r3, [pc, #284]	; (806a858 <UART_SetConfig+0x410>)
 806a73a:	fba3 2302 	umull	r2, r3, r3, r2
 806a73e:	095b      	lsrs	r3, r3, #5
 806a740:	011e      	lsls	r6, r3, #4
 806a742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a744:	4618      	mov	r0, r3
 806a746:	f04f 0100 	mov.w	r1, #0
 806a74a:	4602      	mov	r2, r0
 806a74c:	460b      	mov	r3, r1
 806a74e:	1894      	adds	r4, r2, r2
 806a750:	60bc      	str	r4, [r7, #8]
 806a752:	415b      	adcs	r3, r3
 806a754:	60fb      	str	r3, [r7, #12]
 806a756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 806a75a:	1812      	adds	r2, r2, r0
 806a75c:	eb41 0303 	adc.w	r3, r1, r3
 806a760:	f04f 0400 	mov.w	r4, #0
 806a764:	f04f 0500 	mov.w	r5, #0
 806a768:	00dd      	lsls	r5, r3, #3
 806a76a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 806a76e:	00d4      	lsls	r4, r2, #3
 806a770:	4622      	mov	r2, r4
 806a772:	462b      	mov	r3, r5
 806a774:	1814      	adds	r4, r2, r0
 806a776:	64bc      	str	r4, [r7, #72]	; 0x48
 806a778:	414b      	adcs	r3, r1
 806a77a:	64fb      	str	r3, [r7, #76]	; 0x4c
 806a77c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a77e:	685b      	ldr	r3, [r3, #4]
 806a780:	4618      	mov	r0, r3
 806a782:	f04f 0100 	mov.w	r1, #0
 806a786:	f04f 0200 	mov.w	r2, #0
 806a78a:	f04f 0300 	mov.w	r3, #0
 806a78e:	008b      	lsls	r3, r1, #2
 806a790:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 806a794:	0082      	lsls	r2, r0, #2
 806a796:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 806a79a:	f7f6 fadd 	bl	8060d58 <__aeabi_uldivmod>
 806a79e:	4602      	mov	r2, r0
 806a7a0:	460b      	mov	r3, r1
 806a7a2:	4b2d      	ldr	r3, [pc, #180]	; (806a858 <UART_SetConfig+0x410>)
 806a7a4:	fba3 1302 	umull	r1, r3, r3, r2
 806a7a8:	095b      	lsrs	r3, r3, #5
 806a7aa:	2164      	movs	r1, #100	; 0x64
 806a7ac:	fb01 f303 	mul.w	r3, r1, r3
 806a7b0:	1ad3      	subs	r3, r2, r3
 806a7b2:	011b      	lsls	r3, r3, #4
 806a7b4:	3332      	adds	r3, #50	; 0x32
 806a7b6:	4a28      	ldr	r2, [pc, #160]	; (806a858 <UART_SetConfig+0x410>)
 806a7b8:	fba2 2303 	umull	r2, r3, r2, r3
 806a7bc:	095b      	lsrs	r3, r3, #5
 806a7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 806a7c2:	441e      	add	r6, r3
 806a7c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 806a7c6:	4618      	mov	r0, r3
 806a7c8:	f04f 0100 	mov.w	r1, #0
 806a7cc:	4602      	mov	r2, r0
 806a7ce:	460b      	mov	r3, r1
 806a7d0:	1894      	adds	r4, r2, r2
 806a7d2:	603c      	str	r4, [r7, #0]
 806a7d4:	415b      	adcs	r3, r3
 806a7d6:	607b      	str	r3, [r7, #4]
 806a7d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 806a7dc:	1812      	adds	r2, r2, r0
 806a7de:	eb41 0303 	adc.w	r3, r1, r3
 806a7e2:	f04f 0400 	mov.w	r4, #0
 806a7e6:	f04f 0500 	mov.w	r5, #0
 806a7ea:	00dd      	lsls	r5, r3, #3
 806a7ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 806a7f0:	00d4      	lsls	r4, r2, #3
 806a7f2:	4622      	mov	r2, r4
 806a7f4:	462b      	mov	r3, r5
 806a7f6:	eb12 0a00 	adds.w	sl, r2, r0
 806a7fa:	eb43 0b01 	adc.w	fp, r3, r1
 806a7fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a800:	685b      	ldr	r3, [r3, #4]
 806a802:	4618      	mov	r0, r3
 806a804:	f04f 0100 	mov.w	r1, #0
 806a808:	f04f 0200 	mov.w	r2, #0
 806a80c:	f04f 0300 	mov.w	r3, #0
 806a810:	008b      	lsls	r3, r1, #2
 806a812:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 806a816:	0082      	lsls	r2, r0, #2
 806a818:	4650      	mov	r0, sl
 806a81a:	4659      	mov	r1, fp
 806a81c:	f7f6 fa9c 	bl	8060d58 <__aeabi_uldivmod>
 806a820:	4602      	mov	r2, r0
 806a822:	460b      	mov	r3, r1
 806a824:	4b0c      	ldr	r3, [pc, #48]	; (806a858 <UART_SetConfig+0x410>)
 806a826:	fba3 1302 	umull	r1, r3, r3, r2
 806a82a:	095b      	lsrs	r3, r3, #5
 806a82c:	2164      	movs	r1, #100	; 0x64
 806a82e:	fb01 f303 	mul.w	r3, r1, r3
 806a832:	1ad3      	subs	r3, r2, r3
 806a834:	011b      	lsls	r3, r3, #4
 806a836:	3332      	adds	r3, #50	; 0x32
 806a838:	4a07      	ldr	r2, [pc, #28]	; (806a858 <UART_SetConfig+0x410>)
 806a83a:	fba2 2303 	umull	r2, r3, r2, r3
 806a83e:	095b      	lsrs	r3, r3, #5
 806a840:	f003 020f 	and.w	r2, r3, #15
 806a844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 806a846:	681b      	ldr	r3, [r3, #0]
 806a848:	4432      	add	r2, r6
 806a84a:	609a      	str	r2, [r3, #8]
}
 806a84c:	bf00      	nop
 806a84e:	377c      	adds	r7, #124	; 0x7c
 806a850:	46bd      	mov	sp, r7
 806a852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 806a856:	bf00      	nop
 806a858:	51eb851f 	.word	0x51eb851f

0806a85c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 806a85c:	b580      	push	{r7, lr}
 806a85e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 806a860:	4904      	ldr	r1, [pc, #16]	; (806a874 <MX_FATFS_Init+0x18>)
 806a862:	4805      	ldr	r0, [pc, #20]	; (806a878 <MX_FATFS_Init+0x1c>)
 806a864:	f003 fa7c 	bl	806dd60 <FATFS_LinkDriver>
 806a868:	4603      	mov	r3, r0
 806a86a:	461a      	mov	r2, r3
 806a86c:	4b03      	ldr	r3, [pc, #12]	; (806a87c <MX_FATFS_Init+0x20>)
 806a86e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 806a870:	bf00      	nop
 806a872:	bd80      	pop	{r7, pc}
 806a874:	20005874 	.word	0x20005874
 806a878:	2000000c 	.word	0x2000000c
 806a87c:	20005878 	.word	0x20005878

0806a880 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 806a880:	b480      	push	{r7}
 806a882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 806a884:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 806a886:	4618      	mov	r0, r3
 806a888:	46bd      	mov	sp, r7
 806a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806a88e:	4770      	bx	lr

0806a890 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 806a890:	b580      	push	{r7, lr}
 806a892:	b082      	sub	sp, #8
 806a894:	af00      	add	r7, sp, #0
 806a896:	4603      	mov	r3, r0
 806a898:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 806a89a:	79fb      	ldrb	r3, [r7, #7]
 806a89c:	4618      	mov	r0, r3
 806a89e:	f000 f9d9 	bl	806ac54 <USER_SPI_initialize>
 806a8a2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 806a8a4:	4618      	mov	r0, r3
 806a8a6:	3708      	adds	r7, #8
 806a8a8:	46bd      	mov	sp, r7
 806a8aa:	bd80      	pop	{r7, pc}

0806a8ac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 806a8ac:	b580      	push	{r7, lr}
 806a8ae:	b082      	sub	sp, #8
 806a8b0:	af00      	add	r7, sp, #0
 806a8b2:	4603      	mov	r3, r0
 806a8b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 806a8b6:	79fb      	ldrb	r3, [r7, #7]
 806a8b8:	4618      	mov	r0, r3
 806a8ba:	f000 fab7 	bl	806ae2c <USER_SPI_status>
 806a8be:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 806a8c0:	4618      	mov	r0, r3
 806a8c2:	3708      	adds	r7, #8
 806a8c4:	46bd      	mov	sp, r7
 806a8c6:	bd80      	pop	{r7, pc}

0806a8c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 806a8c8:	b580      	push	{r7, lr}
 806a8ca:	b084      	sub	sp, #16
 806a8cc:	af00      	add	r7, sp, #0
 806a8ce:	60b9      	str	r1, [r7, #8]
 806a8d0:	607a      	str	r2, [r7, #4]
 806a8d2:	603b      	str	r3, [r7, #0]
 806a8d4:	4603      	mov	r3, r0
 806a8d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 806a8d8:	7bf8      	ldrb	r0, [r7, #15]
 806a8da:	683b      	ldr	r3, [r7, #0]
 806a8dc:	687a      	ldr	r2, [r7, #4]
 806a8de:	68b9      	ldr	r1, [r7, #8]
 806a8e0:	f000 faba 	bl	806ae58 <USER_SPI_read>
 806a8e4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 806a8e6:	4618      	mov	r0, r3
 806a8e8:	3710      	adds	r7, #16
 806a8ea:	46bd      	mov	sp, r7
 806a8ec:	bd80      	pop	{r7, pc}

0806a8ee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 806a8ee:	b580      	push	{r7, lr}
 806a8f0:	b084      	sub	sp, #16
 806a8f2:	af00      	add	r7, sp, #0
 806a8f4:	60b9      	str	r1, [r7, #8]
 806a8f6:	607a      	str	r2, [r7, #4]
 806a8f8:	603b      	str	r3, [r7, #0]
 806a8fa:	4603      	mov	r3, r0
 806a8fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 806a8fe:	7bf8      	ldrb	r0, [r7, #15]
 806a900:	683b      	ldr	r3, [r7, #0]
 806a902:	687a      	ldr	r2, [r7, #4]
 806a904:	68b9      	ldr	r1, [r7, #8]
 806a906:	f000 fb0d 	bl	806af24 <USER_SPI_write>
 806a90a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 806a90c:	4618      	mov	r0, r3
 806a90e:	3710      	adds	r7, #16
 806a910:	46bd      	mov	sp, r7
 806a912:	bd80      	pop	{r7, pc}

0806a914 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 806a914:	b580      	push	{r7, lr}
 806a916:	b082      	sub	sp, #8
 806a918:	af00      	add	r7, sp, #0
 806a91a:	4603      	mov	r3, r0
 806a91c:	603a      	str	r2, [r7, #0]
 806a91e:	71fb      	strb	r3, [r7, #7]
 806a920:	460b      	mov	r3, r1
 806a922:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 806a924:	79b9      	ldrb	r1, [r7, #6]
 806a926:	79fb      	ldrb	r3, [r7, #7]
 806a928:	683a      	ldr	r2, [r7, #0]
 806a92a:	4618      	mov	r0, r3
 806a92c:	f000 fb76 	bl	806b01c <USER_SPI_ioctl>
 806a930:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 806a932:	4618      	mov	r0, r3
 806a934:	3708      	adds	r7, #8
 806a936:	46bd      	mov	sp, r7
 806a938:	bd80      	pop	{r7, pc}
	...

0806a93c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 806a93c:	b580      	push	{r7, lr}
 806a93e:	b082      	sub	sp, #8
 806a940:	af00      	add	r7, sp, #0
 806a942:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 806a944:	f7f8 ffbc 	bl	80638c0 <HAL_GetTick>
 806a948:	4603      	mov	r3, r0
 806a94a:	4a04      	ldr	r2, [pc, #16]	; (806a95c <SPI_Timer_On+0x20>)
 806a94c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 806a94e:	4a04      	ldr	r2, [pc, #16]	; (806a960 <SPI_Timer_On+0x24>)
 806a950:	687b      	ldr	r3, [r7, #4]
 806a952:	6013      	str	r3, [r2, #0]
}
 806a954:	bf00      	nop
 806a956:	3708      	adds	r7, #8
 806a958:	46bd      	mov	sp, r7
 806a95a:	bd80      	pop	{r7, pc}
 806a95c:	20005ce0 	.word	0x20005ce0
 806a960:	20005ce4 	.word	0x20005ce4

0806a964 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 806a964:	b580      	push	{r7, lr}
 806a966:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 806a968:	f7f8 ffaa 	bl	80638c0 <HAL_GetTick>
 806a96c:	4602      	mov	r2, r0
 806a96e:	4b06      	ldr	r3, [pc, #24]	; (806a988 <SPI_Timer_Status+0x24>)
 806a970:	681b      	ldr	r3, [r3, #0]
 806a972:	1ad2      	subs	r2, r2, r3
 806a974:	4b05      	ldr	r3, [pc, #20]	; (806a98c <SPI_Timer_Status+0x28>)
 806a976:	681b      	ldr	r3, [r3, #0]
 806a978:	429a      	cmp	r2, r3
 806a97a:	bf34      	ite	cc
 806a97c:	2301      	movcc	r3, #1
 806a97e:	2300      	movcs	r3, #0
 806a980:	b2db      	uxtb	r3, r3
}
 806a982:	4618      	mov	r0, r3
 806a984:	bd80      	pop	{r7, pc}
 806a986:	bf00      	nop
 806a988:	20005ce0 	.word	0x20005ce0
 806a98c:	20005ce4 	.word	0x20005ce4

0806a990 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 806a990:	b580      	push	{r7, lr}
 806a992:	b086      	sub	sp, #24
 806a994:	af02      	add	r7, sp, #8
 806a996:	4603      	mov	r3, r0
 806a998:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 806a99a:	f107 020f 	add.w	r2, r7, #15
 806a99e:	1df9      	adds	r1, r7, #7
 806a9a0:	2332      	movs	r3, #50	; 0x32
 806a9a2:	9300      	str	r3, [sp, #0]
 806a9a4:	2301      	movs	r3, #1
 806a9a6:	4804      	ldr	r0, [pc, #16]	; (806a9b8 <xchg_spi+0x28>)
 806a9a8:	f7fe f8a6 	bl	8068af8 <HAL_SPI_TransmitReceive>
    return rxDat;
 806a9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 806a9ae:	4618      	mov	r0, r3
 806a9b0:	3710      	adds	r7, #16
 806a9b2:	46bd      	mov	sp, r7
 806a9b4:	bd80      	pop	{r7, pc}
 806a9b6:	bf00      	nop
 806a9b8:	20005734 	.word	0x20005734

0806a9bc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 806a9bc:	b590      	push	{r4, r7, lr}
 806a9be:	b085      	sub	sp, #20
 806a9c0:	af00      	add	r7, sp, #0
 806a9c2:	6078      	str	r0, [r7, #4]
 806a9c4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 806a9c6:	2300      	movs	r3, #0
 806a9c8:	60fb      	str	r3, [r7, #12]
 806a9ca:	e00a      	b.n	806a9e2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 806a9cc:	687a      	ldr	r2, [r7, #4]
 806a9ce:	68fb      	ldr	r3, [r7, #12]
 806a9d0:	18d4      	adds	r4, r2, r3
 806a9d2:	20ff      	movs	r0, #255	; 0xff
 806a9d4:	f7ff ffdc 	bl	806a990 <xchg_spi>
 806a9d8:	4603      	mov	r3, r0
 806a9da:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 806a9dc:	68fb      	ldr	r3, [r7, #12]
 806a9de:	3301      	adds	r3, #1
 806a9e0:	60fb      	str	r3, [r7, #12]
 806a9e2:	68fa      	ldr	r2, [r7, #12]
 806a9e4:	683b      	ldr	r3, [r7, #0]
 806a9e6:	429a      	cmp	r2, r3
 806a9e8:	d3f0      	bcc.n	806a9cc <rcvr_spi_multi+0x10>
	}
}
 806a9ea:	bf00      	nop
 806a9ec:	bf00      	nop
 806a9ee:	3714      	adds	r7, #20
 806a9f0:	46bd      	mov	sp, r7
 806a9f2:	bd90      	pop	{r4, r7, pc}

0806a9f4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 806a9f4:	b580      	push	{r7, lr}
 806a9f6:	b084      	sub	sp, #16
 806a9f8:	af00      	add	r7, sp, #0
 806a9fa:	6078      	str	r0, [r7, #4]
 806a9fc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 806a9fe:	2300      	movs	r3, #0
 806aa00:	60fb      	str	r3, [r7, #12]
 806aa02:	e009      	b.n	806aa18 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 806aa04:	687a      	ldr	r2, [r7, #4]
 806aa06:	68fb      	ldr	r3, [r7, #12]
 806aa08:	4413      	add	r3, r2
 806aa0a:	781b      	ldrb	r3, [r3, #0]
 806aa0c:	4618      	mov	r0, r3
 806aa0e:	f7ff ffbf 	bl	806a990 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 806aa12:	68fb      	ldr	r3, [r7, #12]
 806aa14:	3301      	adds	r3, #1
 806aa16:	60fb      	str	r3, [r7, #12]
 806aa18:	68fa      	ldr	r2, [r7, #12]
 806aa1a:	683b      	ldr	r3, [r7, #0]
 806aa1c:	429a      	cmp	r2, r3
 806aa1e:	d3f1      	bcc.n	806aa04 <xmit_spi_multi+0x10>
	}
}
 806aa20:	bf00      	nop
 806aa22:	bf00      	nop
 806aa24:	3710      	adds	r7, #16
 806aa26:	46bd      	mov	sp, r7
 806aa28:	bd80      	pop	{r7, pc}

0806aa2a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 806aa2a:	b580      	push	{r7, lr}
 806aa2c:	b086      	sub	sp, #24
 806aa2e:	af00      	add	r7, sp, #0
 806aa30:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 806aa32:	f7f8 ff45 	bl	80638c0 <HAL_GetTick>
 806aa36:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 806aa38:	687b      	ldr	r3, [r7, #4]
 806aa3a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 806aa3c:	20ff      	movs	r0, #255	; 0xff
 806aa3e:	f7ff ffa7 	bl	806a990 <xchg_spi>
 806aa42:	4603      	mov	r3, r0
 806aa44:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 806aa46:	7bfb      	ldrb	r3, [r7, #15]
 806aa48:	2bff      	cmp	r3, #255	; 0xff
 806aa4a:	d007      	beq.n	806aa5c <wait_ready+0x32>
 806aa4c:	f7f8 ff38 	bl	80638c0 <HAL_GetTick>
 806aa50:	4602      	mov	r2, r0
 806aa52:	697b      	ldr	r3, [r7, #20]
 806aa54:	1ad3      	subs	r3, r2, r3
 806aa56:	693a      	ldr	r2, [r7, #16]
 806aa58:	429a      	cmp	r2, r3
 806aa5a:	d8ef      	bhi.n	806aa3c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 806aa5c:	7bfb      	ldrb	r3, [r7, #15]
 806aa5e:	2bff      	cmp	r3, #255	; 0xff
 806aa60:	bf0c      	ite	eq
 806aa62:	2301      	moveq	r3, #1
 806aa64:	2300      	movne	r3, #0
 806aa66:	b2db      	uxtb	r3, r3
}
 806aa68:	4618      	mov	r0, r3
 806aa6a:	3718      	adds	r7, #24
 806aa6c:	46bd      	mov	sp, r7
 806aa6e:	bd80      	pop	{r7, pc}

0806aa70 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 806aa70:	b580      	push	{r7, lr}
 806aa72:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 806aa74:	2201      	movs	r2, #1
 806aa76:	2102      	movs	r1, #2
 806aa78:	4803      	ldr	r0, [pc, #12]	; (806aa88 <despiselect+0x18>)
 806aa7a:	f7fa ffb1 	bl	80659e0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 806aa7e:	20ff      	movs	r0, #255	; 0xff
 806aa80:	f7ff ff86 	bl	806a990 <xchg_spi>

}
 806aa84:	bf00      	nop
 806aa86:	bd80      	pop	{r7, pc}
 806aa88:	40020400 	.word	0x40020400

0806aa8c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 806aa8c:	b580      	push	{r7, lr}
 806aa8e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 806aa90:	2200      	movs	r2, #0
 806aa92:	2102      	movs	r1, #2
 806aa94:	4809      	ldr	r0, [pc, #36]	; (806aabc <spiselect+0x30>)
 806aa96:	f7fa ffa3 	bl	80659e0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 806aa9a:	20ff      	movs	r0, #255	; 0xff
 806aa9c:	f7ff ff78 	bl	806a990 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 806aaa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 806aaa4:	f7ff ffc1 	bl	806aa2a <wait_ready>
 806aaa8:	4603      	mov	r3, r0
 806aaaa:	2b00      	cmp	r3, #0
 806aaac:	d001      	beq.n	806aab2 <spiselect+0x26>
 806aaae:	2301      	movs	r3, #1
 806aab0:	e002      	b.n	806aab8 <spiselect+0x2c>

	despiselect();
 806aab2:	f7ff ffdd 	bl	806aa70 <despiselect>
	return 0;	/* Timeout */
 806aab6:	2300      	movs	r3, #0
}
 806aab8:	4618      	mov	r0, r3
 806aaba:	bd80      	pop	{r7, pc}
 806aabc:	40020400 	.word	0x40020400

0806aac0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 806aac0:	b580      	push	{r7, lr}
 806aac2:	b084      	sub	sp, #16
 806aac4:	af00      	add	r7, sp, #0
 806aac6:	6078      	str	r0, [r7, #4]
 806aac8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 806aaca:	20c8      	movs	r0, #200	; 0xc8
 806aacc:	f7ff ff36 	bl	806a93c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 806aad0:	20ff      	movs	r0, #255	; 0xff
 806aad2:	f7ff ff5d 	bl	806a990 <xchg_spi>
 806aad6:	4603      	mov	r3, r0
 806aad8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 806aada:	7bfb      	ldrb	r3, [r7, #15]
 806aadc:	2bff      	cmp	r3, #255	; 0xff
 806aade:	d104      	bne.n	806aaea <rcvr_datablock+0x2a>
 806aae0:	f7ff ff40 	bl	806a964 <SPI_Timer_Status>
 806aae4:	4603      	mov	r3, r0
 806aae6:	2b00      	cmp	r3, #0
 806aae8:	d1f2      	bne.n	806aad0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 806aaea:	7bfb      	ldrb	r3, [r7, #15]
 806aaec:	2bfe      	cmp	r3, #254	; 0xfe
 806aaee:	d001      	beq.n	806aaf4 <rcvr_datablock+0x34>
 806aaf0:	2300      	movs	r3, #0
 806aaf2:	e00a      	b.n	806ab0a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 806aaf4:	6839      	ldr	r1, [r7, #0]
 806aaf6:	6878      	ldr	r0, [r7, #4]
 806aaf8:	f7ff ff60 	bl	806a9bc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 806aafc:	20ff      	movs	r0, #255	; 0xff
 806aafe:	f7ff ff47 	bl	806a990 <xchg_spi>
 806ab02:	20ff      	movs	r0, #255	; 0xff
 806ab04:	f7ff ff44 	bl	806a990 <xchg_spi>

	return 1;						/* Function succeeded */
 806ab08:	2301      	movs	r3, #1
}
 806ab0a:	4618      	mov	r0, r3
 806ab0c:	3710      	adds	r7, #16
 806ab0e:	46bd      	mov	sp, r7
 806ab10:	bd80      	pop	{r7, pc}

0806ab12 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 806ab12:	b580      	push	{r7, lr}
 806ab14:	b084      	sub	sp, #16
 806ab16:	af00      	add	r7, sp, #0
 806ab18:	6078      	str	r0, [r7, #4]
 806ab1a:	460b      	mov	r3, r1
 806ab1c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 806ab1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 806ab22:	f7ff ff82 	bl	806aa2a <wait_ready>
 806ab26:	4603      	mov	r3, r0
 806ab28:	2b00      	cmp	r3, #0
 806ab2a:	d101      	bne.n	806ab30 <xmit_datablock+0x1e>
 806ab2c:	2300      	movs	r3, #0
 806ab2e:	e01e      	b.n	806ab6e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 806ab30:	78fb      	ldrb	r3, [r7, #3]
 806ab32:	4618      	mov	r0, r3
 806ab34:	f7ff ff2c 	bl	806a990 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 806ab38:	78fb      	ldrb	r3, [r7, #3]
 806ab3a:	2bfd      	cmp	r3, #253	; 0xfd
 806ab3c:	d016      	beq.n	806ab6c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 806ab3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 806ab42:	6878      	ldr	r0, [r7, #4]
 806ab44:	f7ff ff56 	bl	806a9f4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 806ab48:	20ff      	movs	r0, #255	; 0xff
 806ab4a:	f7ff ff21 	bl	806a990 <xchg_spi>
 806ab4e:	20ff      	movs	r0, #255	; 0xff
 806ab50:	f7ff ff1e 	bl	806a990 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 806ab54:	20ff      	movs	r0, #255	; 0xff
 806ab56:	f7ff ff1b 	bl	806a990 <xchg_spi>
 806ab5a:	4603      	mov	r3, r0
 806ab5c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 806ab5e:	7bfb      	ldrb	r3, [r7, #15]
 806ab60:	f003 031f 	and.w	r3, r3, #31
 806ab64:	2b05      	cmp	r3, #5
 806ab66:	d001      	beq.n	806ab6c <xmit_datablock+0x5a>
 806ab68:	2300      	movs	r3, #0
 806ab6a:	e000      	b.n	806ab6e <xmit_datablock+0x5c>
	}
	return 1;
 806ab6c:	2301      	movs	r3, #1
}
 806ab6e:	4618      	mov	r0, r3
 806ab70:	3710      	adds	r7, #16
 806ab72:	46bd      	mov	sp, r7
 806ab74:	bd80      	pop	{r7, pc}

0806ab76 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 806ab76:	b580      	push	{r7, lr}
 806ab78:	b084      	sub	sp, #16
 806ab7a:	af00      	add	r7, sp, #0
 806ab7c:	4603      	mov	r3, r0
 806ab7e:	6039      	str	r1, [r7, #0]
 806ab80:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 806ab82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806ab86:	2b00      	cmp	r3, #0
 806ab88:	da0e      	bge.n	806aba8 <send_cmd+0x32>
		cmd &= 0x7F;
 806ab8a:	79fb      	ldrb	r3, [r7, #7]
 806ab8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806ab90:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 806ab92:	2100      	movs	r1, #0
 806ab94:	2037      	movs	r0, #55	; 0x37
 806ab96:	f7ff ffee 	bl	806ab76 <send_cmd>
 806ab9a:	4603      	mov	r3, r0
 806ab9c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 806ab9e:	7bbb      	ldrb	r3, [r7, #14]
 806aba0:	2b01      	cmp	r3, #1
 806aba2:	d901      	bls.n	806aba8 <send_cmd+0x32>
 806aba4:	7bbb      	ldrb	r3, [r7, #14]
 806aba6:	e051      	b.n	806ac4c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 806aba8:	79fb      	ldrb	r3, [r7, #7]
 806abaa:	2b0c      	cmp	r3, #12
 806abac:	d008      	beq.n	806abc0 <send_cmd+0x4a>
		despiselect();
 806abae:	f7ff ff5f 	bl	806aa70 <despiselect>
		if (!spiselect()) return 0xFF;
 806abb2:	f7ff ff6b 	bl	806aa8c <spiselect>
 806abb6:	4603      	mov	r3, r0
 806abb8:	2b00      	cmp	r3, #0
 806abba:	d101      	bne.n	806abc0 <send_cmd+0x4a>
 806abbc:	23ff      	movs	r3, #255	; 0xff
 806abbe:	e045      	b.n	806ac4c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 806abc0:	79fb      	ldrb	r3, [r7, #7]
 806abc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806abc6:	b2db      	uxtb	r3, r3
 806abc8:	4618      	mov	r0, r3
 806abca:	f7ff fee1 	bl	806a990 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 806abce:	683b      	ldr	r3, [r7, #0]
 806abd0:	0e1b      	lsrs	r3, r3, #24
 806abd2:	b2db      	uxtb	r3, r3
 806abd4:	4618      	mov	r0, r3
 806abd6:	f7ff fedb 	bl	806a990 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 806abda:	683b      	ldr	r3, [r7, #0]
 806abdc:	0c1b      	lsrs	r3, r3, #16
 806abde:	b2db      	uxtb	r3, r3
 806abe0:	4618      	mov	r0, r3
 806abe2:	f7ff fed5 	bl	806a990 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 806abe6:	683b      	ldr	r3, [r7, #0]
 806abe8:	0a1b      	lsrs	r3, r3, #8
 806abea:	b2db      	uxtb	r3, r3
 806abec:	4618      	mov	r0, r3
 806abee:	f7ff fecf 	bl	806a990 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 806abf2:	683b      	ldr	r3, [r7, #0]
 806abf4:	b2db      	uxtb	r3, r3
 806abf6:	4618      	mov	r0, r3
 806abf8:	f7ff feca 	bl	806a990 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 806abfc:	2301      	movs	r3, #1
 806abfe:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 806ac00:	79fb      	ldrb	r3, [r7, #7]
 806ac02:	2b00      	cmp	r3, #0
 806ac04:	d101      	bne.n	806ac0a <send_cmd+0x94>
 806ac06:	2395      	movs	r3, #149	; 0x95
 806ac08:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 806ac0a:	79fb      	ldrb	r3, [r7, #7]
 806ac0c:	2b08      	cmp	r3, #8
 806ac0e:	d101      	bne.n	806ac14 <send_cmd+0x9e>
 806ac10:	2387      	movs	r3, #135	; 0x87
 806ac12:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 806ac14:	7bfb      	ldrb	r3, [r7, #15]
 806ac16:	4618      	mov	r0, r3
 806ac18:	f7ff feba 	bl	806a990 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 806ac1c:	79fb      	ldrb	r3, [r7, #7]
 806ac1e:	2b0c      	cmp	r3, #12
 806ac20:	d102      	bne.n	806ac28 <send_cmd+0xb2>
 806ac22:	20ff      	movs	r0, #255	; 0xff
 806ac24:	f7ff feb4 	bl	806a990 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 806ac28:	230a      	movs	r3, #10
 806ac2a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 806ac2c:	20ff      	movs	r0, #255	; 0xff
 806ac2e:	f7ff feaf 	bl	806a990 <xchg_spi>
 806ac32:	4603      	mov	r3, r0
 806ac34:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 806ac36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 806ac3a:	2b00      	cmp	r3, #0
 806ac3c:	da05      	bge.n	806ac4a <send_cmd+0xd4>
 806ac3e:	7bfb      	ldrb	r3, [r7, #15]
 806ac40:	3b01      	subs	r3, #1
 806ac42:	73fb      	strb	r3, [r7, #15]
 806ac44:	7bfb      	ldrb	r3, [r7, #15]
 806ac46:	2b00      	cmp	r3, #0
 806ac48:	d1f0      	bne.n	806ac2c <send_cmd+0xb6>

	return res;							/* Return received response */
 806ac4a:	7bbb      	ldrb	r3, [r7, #14]
}
 806ac4c:	4618      	mov	r0, r3
 806ac4e:	3710      	adds	r7, #16
 806ac50:	46bd      	mov	sp, r7
 806ac52:	bd80      	pop	{r7, pc}

0806ac54 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 806ac54:	b590      	push	{r4, r7, lr}
 806ac56:	b085      	sub	sp, #20
 806ac58:	af00      	add	r7, sp, #0
 806ac5a:	4603      	mov	r3, r0
 806ac5c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 806ac5e:	79fb      	ldrb	r3, [r7, #7]
 806ac60:	2b00      	cmp	r3, #0
 806ac62:	d001      	beq.n	806ac68 <USER_SPI_initialize+0x14>
 806ac64:	2301      	movs	r3, #1
 806ac66:	e0d6      	b.n	806ae16 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 806ac68:	4b6d      	ldr	r3, [pc, #436]	; (806ae20 <USER_SPI_initialize+0x1cc>)
 806ac6a:	781b      	ldrb	r3, [r3, #0]
 806ac6c:	b2db      	uxtb	r3, r3
 806ac6e:	f003 0302 	and.w	r3, r3, #2
 806ac72:	2b00      	cmp	r3, #0
 806ac74:	d003      	beq.n	806ac7e <USER_SPI_initialize+0x2a>
 806ac76:	4b6a      	ldr	r3, [pc, #424]	; (806ae20 <USER_SPI_initialize+0x1cc>)
 806ac78:	781b      	ldrb	r3, [r3, #0]
 806ac7a:	b2db      	uxtb	r3, r3
 806ac7c:	e0cb      	b.n	806ae16 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 806ac7e:	4b69      	ldr	r3, [pc, #420]	; (806ae24 <USER_SPI_initialize+0x1d0>)
 806ac80:	681b      	ldr	r3, [r3, #0]
 806ac82:	681b      	ldr	r3, [r3, #0]
 806ac84:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 806ac88:	4b66      	ldr	r3, [pc, #408]	; (806ae24 <USER_SPI_initialize+0x1d0>)
 806ac8a:	681b      	ldr	r3, [r3, #0]
 806ac8c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 806ac90:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 806ac92:	230a      	movs	r3, #10
 806ac94:	73fb      	strb	r3, [r7, #15]
 806ac96:	e005      	b.n	806aca4 <USER_SPI_initialize+0x50>
 806ac98:	20ff      	movs	r0, #255	; 0xff
 806ac9a:	f7ff fe79 	bl	806a990 <xchg_spi>
 806ac9e:	7bfb      	ldrb	r3, [r7, #15]
 806aca0:	3b01      	subs	r3, #1
 806aca2:	73fb      	strb	r3, [r7, #15]
 806aca4:	7bfb      	ldrb	r3, [r7, #15]
 806aca6:	2b00      	cmp	r3, #0
 806aca8:	d1f6      	bne.n	806ac98 <USER_SPI_initialize+0x44>

	ty = 0;
 806acaa:	2300      	movs	r3, #0
 806acac:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 806acae:	2100      	movs	r1, #0
 806acb0:	2000      	movs	r0, #0
 806acb2:	f7ff ff60 	bl	806ab76 <send_cmd>
 806acb6:	4603      	mov	r3, r0
 806acb8:	2b01      	cmp	r3, #1
 806acba:	f040 808b 	bne.w	806add4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 806acbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 806acc2:	f7ff fe3b 	bl	806a93c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 806acc6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 806acca:	2008      	movs	r0, #8
 806accc:	f7ff ff53 	bl	806ab76 <send_cmd>
 806acd0:	4603      	mov	r3, r0
 806acd2:	2b01      	cmp	r3, #1
 806acd4:	d151      	bne.n	806ad7a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 806acd6:	2300      	movs	r3, #0
 806acd8:	73fb      	strb	r3, [r7, #15]
 806acda:	e00d      	b.n	806acf8 <USER_SPI_initialize+0xa4>
 806acdc:	7bfc      	ldrb	r4, [r7, #15]
 806acde:	20ff      	movs	r0, #255	; 0xff
 806ace0:	f7ff fe56 	bl	806a990 <xchg_spi>
 806ace4:	4603      	mov	r3, r0
 806ace6:	461a      	mov	r2, r3
 806ace8:	f107 0310 	add.w	r3, r7, #16
 806acec:	4423      	add	r3, r4
 806acee:	f803 2c08 	strb.w	r2, [r3, #-8]
 806acf2:	7bfb      	ldrb	r3, [r7, #15]
 806acf4:	3301      	adds	r3, #1
 806acf6:	73fb      	strb	r3, [r7, #15]
 806acf8:	7bfb      	ldrb	r3, [r7, #15]
 806acfa:	2b03      	cmp	r3, #3
 806acfc:	d9ee      	bls.n	806acdc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 806acfe:	7abb      	ldrb	r3, [r7, #10]
 806ad00:	2b01      	cmp	r3, #1
 806ad02:	d167      	bne.n	806add4 <USER_SPI_initialize+0x180>
 806ad04:	7afb      	ldrb	r3, [r7, #11]
 806ad06:	2baa      	cmp	r3, #170	; 0xaa
 806ad08:	d164      	bne.n	806add4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 806ad0a:	bf00      	nop
 806ad0c:	f7ff fe2a 	bl	806a964 <SPI_Timer_Status>
 806ad10:	4603      	mov	r3, r0
 806ad12:	2b00      	cmp	r3, #0
 806ad14:	d007      	beq.n	806ad26 <USER_SPI_initialize+0xd2>
 806ad16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 806ad1a:	20a9      	movs	r0, #169	; 0xa9
 806ad1c:	f7ff ff2b 	bl	806ab76 <send_cmd>
 806ad20:	4603      	mov	r3, r0
 806ad22:	2b00      	cmp	r3, #0
 806ad24:	d1f2      	bne.n	806ad0c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 806ad26:	f7ff fe1d 	bl	806a964 <SPI_Timer_Status>
 806ad2a:	4603      	mov	r3, r0
 806ad2c:	2b00      	cmp	r3, #0
 806ad2e:	d051      	beq.n	806add4 <USER_SPI_initialize+0x180>
 806ad30:	2100      	movs	r1, #0
 806ad32:	203a      	movs	r0, #58	; 0x3a
 806ad34:	f7ff ff1f 	bl	806ab76 <send_cmd>
 806ad38:	4603      	mov	r3, r0
 806ad3a:	2b00      	cmp	r3, #0
 806ad3c:	d14a      	bne.n	806add4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 806ad3e:	2300      	movs	r3, #0
 806ad40:	73fb      	strb	r3, [r7, #15]
 806ad42:	e00d      	b.n	806ad60 <USER_SPI_initialize+0x10c>
 806ad44:	7bfc      	ldrb	r4, [r7, #15]
 806ad46:	20ff      	movs	r0, #255	; 0xff
 806ad48:	f7ff fe22 	bl	806a990 <xchg_spi>
 806ad4c:	4603      	mov	r3, r0
 806ad4e:	461a      	mov	r2, r3
 806ad50:	f107 0310 	add.w	r3, r7, #16
 806ad54:	4423      	add	r3, r4
 806ad56:	f803 2c08 	strb.w	r2, [r3, #-8]
 806ad5a:	7bfb      	ldrb	r3, [r7, #15]
 806ad5c:	3301      	adds	r3, #1
 806ad5e:	73fb      	strb	r3, [r7, #15]
 806ad60:	7bfb      	ldrb	r3, [r7, #15]
 806ad62:	2b03      	cmp	r3, #3
 806ad64:	d9ee      	bls.n	806ad44 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 806ad66:	7a3b      	ldrb	r3, [r7, #8]
 806ad68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806ad6c:	2b00      	cmp	r3, #0
 806ad6e:	d001      	beq.n	806ad74 <USER_SPI_initialize+0x120>
 806ad70:	230c      	movs	r3, #12
 806ad72:	e000      	b.n	806ad76 <USER_SPI_initialize+0x122>
 806ad74:	2304      	movs	r3, #4
 806ad76:	737b      	strb	r3, [r7, #13]
 806ad78:	e02c      	b.n	806add4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 806ad7a:	2100      	movs	r1, #0
 806ad7c:	20a9      	movs	r0, #169	; 0xa9
 806ad7e:	f7ff fefa 	bl	806ab76 <send_cmd>
 806ad82:	4603      	mov	r3, r0
 806ad84:	2b01      	cmp	r3, #1
 806ad86:	d804      	bhi.n	806ad92 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 806ad88:	2302      	movs	r3, #2
 806ad8a:	737b      	strb	r3, [r7, #13]
 806ad8c:	23a9      	movs	r3, #169	; 0xa9
 806ad8e:	73bb      	strb	r3, [r7, #14]
 806ad90:	e003      	b.n	806ad9a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 806ad92:	2301      	movs	r3, #1
 806ad94:	737b      	strb	r3, [r7, #13]
 806ad96:	2301      	movs	r3, #1
 806ad98:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 806ad9a:	bf00      	nop
 806ad9c:	f7ff fde2 	bl	806a964 <SPI_Timer_Status>
 806ada0:	4603      	mov	r3, r0
 806ada2:	2b00      	cmp	r3, #0
 806ada4:	d007      	beq.n	806adb6 <USER_SPI_initialize+0x162>
 806ada6:	7bbb      	ldrb	r3, [r7, #14]
 806ada8:	2100      	movs	r1, #0
 806adaa:	4618      	mov	r0, r3
 806adac:	f7ff fee3 	bl	806ab76 <send_cmd>
 806adb0:	4603      	mov	r3, r0
 806adb2:	2b00      	cmp	r3, #0
 806adb4:	d1f2      	bne.n	806ad9c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 806adb6:	f7ff fdd5 	bl	806a964 <SPI_Timer_Status>
 806adba:	4603      	mov	r3, r0
 806adbc:	2b00      	cmp	r3, #0
 806adbe:	d007      	beq.n	806add0 <USER_SPI_initialize+0x17c>
 806adc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 806adc4:	2010      	movs	r0, #16
 806adc6:	f7ff fed6 	bl	806ab76 <send_cmd>
 806adca:	4603      	mov	r3, r0
 806adcc:	2b00      	cmp	r3, #0
 806adce:	d001      	beq.n	806add4 <USER_SPI_initialize+0x180>
				ty = 0;
 806add0:	2300      	movs	r3, #0
 806add2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 806add4:	4a14      	ldr	r2, [pc, #80]	; (806ae28 <USER_SPI_initialize+0x1d4>)
 806add6:	7b7b      	ldrb	r3, [r7, #13]
 806add8:	7013      	strb	r3, [r2, #0]
	despiselect();
 806adda:	f7ff fe49 	bl	806aa70 <despiselect>

	if (ty) {			/* OK */
 806adde:	7b7b      	ldrb	r3, [r7, #13]
 806ade0:	2b00      	cmp	r3, #0
 806ade2:	d012      	beq.n	806ae0a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 806ade4:	4b0f      	ldr	r3, [pc, #60]	; (806ae24 <USER_SPI_initialize+0x1d0>)
 806ade6:	681b      	ldr	r3, [r3, #0]
 806ade8:	681b      	ldr	r3, [r3, #0]
 806adea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 806adee:	4b0d      	ldr	r3, [pc, #52]	; (806ae24 <USER_SPI_initialize+0x1d0>)
 806adf0:	681b      	ldr	r3, [r3, #0]
 806adf2:	f042 0210 	orr.w	r2, r2, #16
 806adf6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 806adf8:	4b09      	ldr	r3, [pc, #36]	; (806ae20 <USER_SPI_initialize+0x1cc>)
 806adfa:	781b      	ldrb	r3, [r3, #0]
 806adfc:	b2db      	uxtb	r3, r3
 806adfe:	f023 0301 	bic.w	r3, r3, #1
 806ae02:	b2da      	uxtb	r2, r3
 806ae04:	4b06      	ldr	r3, [pc, #24]	; (806ae20 <USER_SPI_initialize+0x1cc>)
 806ae06:	701a      	strb	r2, [r3, #0]
 806ae08:	e002      	b.n	806ae10 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 806ae0a:	4b05      	ldr	r3, [pc, #20]	; (806ae20 <USER_SPI_initialize+0x1cc>)
 806ae0c:	2201      	movs	r2, #1
 806ae0e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 806ae10:	4b03      	ldr	r3, [pc, #12]	; (806ae20 <USER_SPI_initialize+0x1cc>)
 806ae12:	781b      	ldrb	r3, [r3, #0]
 806ae14:	b2db      	uxtb	r3, r3
}
 806ae16:	4618      	mov	r0, r3
 806ae18:	3714      	adds	r7, #20
 806ae1a:	46bd      	mov	sp, r7
 806ae1c:	bd90      	pop	{r4, r7, pc}
 806ae1e:	bf00      	nop
 806ae20:	20000020 	.word	0x20000020
 806ae24:	20005734 	.word	0x20005734
 806ae28:	20000420 	.word	0x20000420

0806ae2c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 806ae2c:	b480      	push	{r7}
 806ae2e:	b083      	sub	sp, #12
 806ae30:	af00      	add	r7, sp, #0
 806ae32:	4603      	mov	r3, r0
 806ae34:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 806ae36:	79fb      	ldrb	r3, [r7, #7]
 806ae38:	2b00      	cmp	r3, #0
 806ae3a:	d001      	beq.n	806ae40 <USER_SPI_status+0x14>
 806ae3c:	2301      	movs	r3, #1
 806ae3e:	e002      	b.n	806ae46 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 806ae40:	4b04      	ldr	r3, [pc, #16]	; (806ae54 <USER_SPI_status+0x28>)
 806ae42:	781b      	ldrb	r3, [r3, #0]
 806ae44:	b2db      	uxtb	r3, r3
}
 806ae46:	4618      	mov	r0, r3
 806ae48:	370c      	adds	r7, #12
 806ae4a:	46bd      	mov	sp, r7
 806ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ae50:	4770      	bx	lr
 806ae52:	bf00      	nop
 806ae54:	20000020 	.word	0x20000020

0806ae58 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 806ae58:	b580      	push	{r7, lr}
 806ae5a:	b084      	sub	sp, #16
 806ae5c:	af00      	add	r7, sp, #0
 806ae5e:	60b9      	str	r1, [r7, #8]
 806ae60:	607a      	str	r2, [r7, #4]
 806ae62:	603b      	str	r3, [r7, #0]
 806ae64:	4603      	mov	r3, r0
 806ae66:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 806ae68:	7bfb      	ldrb	r3, [r7, #15]
 806ae6a:	2b00      	cmp	r3, #0
 806ae6c:	d102      	bne.n	806ae74 <USER_SPI_read+0x1c>
 806ae6e:	683b      	ldr	r3, [r7, #0]
 806ae70:	2b00      	cmp	r3, #0
 806ae72:	d101      	bne.n	806ae78 <USER_SPI_read+0x20>
 806ae74:	2304      	movs	r3, #4
 806ae76:	e04d      	b.n	806af14 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 806ae78:	4b28      	ldr	r3, [pc, #160]	; (806af1c <USER_SPI_read+0xc4>)
 806ae7a:	781b      	ldrb	r3, [r3, #0]
 806ae7c:	b2db      	uxtb	r3, r3
 806ae7e:	f003 0301 	and.w	r3, r3, #1
 806ae82:	2b00      	cmp	r3, #0
 806ae84:	d001      	beq.n	806ae8a <USER_SPI_read+0x32>
 806ae86:	2303      	movs	r3, #3
 806ae88:	e044      	b.n	806af14 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 806ae8a:	4b25      	ldr	r3, [pc, #148]	; (806af20 <USER_SPI_read+0xc8>)
 806ae8c:	781b      	ldrb	r3, [r3, #0]
 806ae8e:	f003 0308 	and.w	r3, r3, #8
 806ae92:	2b00      	cmp	r3, #0
 806ae94:	d102      	bne.n	806ae9c <USER_SPI_read+0x44>
 806ae96:	687b      	ldr	r3, [r7, #4]
 806ae98:	025b      	lsls	r3, r3, #9
 806ae9a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 806ae9c:	683b      	ldr	r3, [r7, #0]
 806ae9e:	2b01      	cmp	r3, #1
 806aea0:	d111      	bne.n	806aec6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 806aea2:	6879      	ldr	r1, [r7, #4]
 806aea4:	2011      	movs	r0, #17
 806aea6:	f7ff fe66 	bl	806ab76 <send_cmd>
 806aeaa:	4603      	mov	r3, r0
 806aeac:	2b00      	cmp	r3, #0
 806aeae:	d129      	bne.n	806af04 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 806aeb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 806aeb4:	68b8      	ldr	r0, [r7, #8]
 806aeb6:	f7ff fe03 	bl	806aac0 <rcvr_datablock>
 806aeba:	4603      	mov	r3, r0
 806aebc:	2b00      	cmp	r3, #0
 806aebe:	d021      	beq.n	806af04 <USER_SPI_read+0xac>
			count = 0;
 806aec0:	2300      	movs	r3, #0
 806aec2:	603b      	str	r3, [r7, #0]
 806aec4:	e01e      	b.n	806af04 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 806aec6:	6879      	ldr	r1, [r7, #4]
 806aec8:	2012      	movs	r0, #18
 806aeca:	f7ff fe54 	bl	806ab76 <send_cmd>
 806aece:	4603      	mov	r3, r0
 806aed0:	2b00      	cmp	r3, #0
 806aed2:	d117      	bne.n	806af04 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 806aed4:	f44f 7100 	mov.w	r1, #512	; 0x200
 806aed8:	68b8      	ldr	r0, [r7, #8]
 806aeda:	f7ff fdf1 	bl	806aac0 <rcvr_datablock>
 806aede:	4603      	mov	r3, r0
 806aee0:	2b00      	cmp	r3, #0
 806aee2:	d00a      	beq.n	806aefa <USER_SPI_read+0xa2>
				buff += 512;
 806aee4:	68bb      	ldr	r3, [r7, #8]
 806aee6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 806aeea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 806aeec:	683b      	ldr	r3, [r7, #0]
 806aeee:	3b01      	subs	r3, #1
 806aef0:	603b      	str	r3, [r7, #0]
 806aef2:	683b      	ldr	r3, [r7, #0]
 806aef4:	2b00      	cmp	r3, #0
 806aef6:	d1ed      	bne.n	806aed4 <USER_SPI_read+0x7c>
 806aef8:	e000      	b.n	806aefc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 806aefa:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 806aefc:	2100      	movs	r1, #0
 806aefe:	200c      	movs	r0, #12
 806af00:	f7ff fe39 	bl	806ab76 <send_cmd>
		}
	}
	despiselect();
 806af04:	f7ff fdb4 	bl	806aa70 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 806af08:	683b      	ldr	r3, [r7, #0]
 806af0a:	2b00      	cmp	r3, #0
 806af0c:	bf14      	ite	ne
 806af0e:	2301      	movne	r3, #1
 806af10:	2300      	moveq	r3, #0
 806af12:	b2db      	uxtb	r3, r3
}
 806af14:	4618      	mov	r0, r3
 806af16:	3710      	adds	r7, #16
 806af18:	46bd      	mov	sp, r7
 806af1a:	bd80      	pop	{r7, pc}
 806af1c:	20000020 	.word	0x20000020
 806af20:	20000420 	.word	0x20000420

0806af24 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 806af24:	b580      	push	{r7, lr}
 806af26:	b084      	sub	sp, #16
 806af28:	af00      	add	r7, sp, #0
 806af2a:	60b9      	str	r1, [r7, #8]
 806af2c:	607a      	str	r2, [r7, #4]
 806af2e:	603b      	str	r3, [r7, #0]
 806af30:	4603      	mov	r3, r0
 806af32:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 806af34:	7bfb      	ldrb	r3, [r7, #15]
 806af36:	2b00      	cmp	r3, #0
 806af38:	d102      	bne.n	806af40 <USER_SPI_write+0x1c>
 806af3a:	683b      	ldr	r3, [r7, #0]
 806af3c:	2b00      	cmp	r3, #0
 806af3e:	d101      	bne.n	806af44 <USER_SPI_write+0x20>
 806af40:	2304      	movs	r3, #4
 806af42:	e063      	b.n	806b00c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 806af44:	4b33      	ldr	r3, [pc, #204]	; (806b014 <USER_SPI_write+0xf0>)
 806af46:	781b      	ldrb	r3, [r3, #0]
 806af48:	b2db      	uxtb	r3, r3
 806af4a:	f003 0301 	and.w	r3, r3, #1
 806af4e:	2b00      	cmp	r3, #0
 806af50:	d001      	beq.n	806af56 <USER_SPI_write+0x32>
 806af52:	2303      	movs	r3, #3
 806af54:	e05a      	b.n	806b00c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 806af56:	4b2f      	ldr	r3, [pc, #188]	; (806b014 <USER_SPI_write+0xf0>)
 806af58:	781b      	ldrb	r3, [r3, #0]
 806af5a:	b2db      	uxtb	r3, r3
 806af5c:	f003 0304 	and.w	r3, r3, #4
 806af60:	2b00      	cmp	r3, #0
 806af62:	d001      	beq.n	806af68 <USER_SPI_write+0x44>
 806af64:	2302      	movs	r3, #2
 806af66:	e051      	b.n	806b00c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 806af68:	4b2b      	ldr	r3, [pc, #172]	; (806b018 <USER_SPI_write+0xf4>)
 806af6a:	781b      	ldrb	r3, [r3, #0]
 806af6c:	f003 0308 	and.w	r3, r3, #8
 806af70:	2b00      	cmp	r3, #0
 806af72:	d102      	bne.n	806af7a <USER_SPI_write+0x56>
 806af74:	687b      	ldr	r3, [r7, #4]
 806af76:	025b      	lsls	r3, r3, #9
 806af78:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 806af7a:	683b      	ldr	r3, [r7, #0]
 806af7c:	2b01      	cmp	r3, #1
 806af7e:	d110      	bne.n	806afa2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 806af80:	6879      	ldr	r1, [r7, #4]
 806af82:	2018      	movs	r0, #24
 806af84:	f7ff fdf7 	bl	806ab76 <send_cmd>
 806af88:	4603      	mov	r3, r0
 806af8a:	2b00      	cmp	r3, #0
 806af8c:	d136      	bne.n	806affc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 806af8e:	21fe      	movs	r1, #254	; 0xfe
 806af90:	68b8      	ldr	r0, [r7, #8]
 806af92:	f7ff fdbe 	bl	806ab12 <xmit_datablock>
 806af96:	4603      	mov	r3, r0
 806af98:	2b00      	cmp	r3, #0
 806af9a:	d02f      	beq.n	806affc <USER_SPI_write+0xd8>
			count = 0;
 806af9c:	2300      	movs	r3, #0
 806af9e:	603b      	str	r3, [r7, #0]
 806afa0:	e02c      	b.n	806affc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 806afa2:	4b1d      	ldr	r3, [pc, #116]	; (806b018 <USER_SPI_write+0xf4>)
 806afa4:	781b      	ldrb	r3, [r3, #0]
 806afa6:	f003 0306 	and.w	r3, r3, #6
 806afaa:	2b00      	cmp	r3, #0
 806afac:	d003      	beq.n	806afb6 <USER_SPI_write+0x92>
 806afae:	6839      	ldr	r1, [r7, #0]
 806afb0:	2097      	movs	r0, #151	; 0x97
 806afb2:	f7ff fde0 	bl	806ab76 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 806afb6:	6879      	ldr	r1, [r7, #4]
 806afb8:	2019      	movs	r0, #25
 806afba:	f7ff fddc 	bl	806ab76 <send_cmd>
 806afbe:	4603      	mov	r3, r0
 806afc0:	2b00      	cmp	r3, #0
 806afc2:	d11b      	bne.n	806affc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 806afc4:	21fc      	movs	r1, #252	; 0xfc
 806afc6:	68b8      	ldr	r0, [r7, #8]
 806afc8:	f7ff fda3 	bl	806ab12 <xmit_datablock>
 806afcc:	4603      	mov	r3, r0
 806afce:	2b00      	cmp	r3, #0
 806afd0:	d00a      	beq.n	806afe8 <USER_SPI_write+0xc4>
				buff += 512;
 806afd2:	68bb      	ldr	r3, [r7, #8]
 806afd4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 806afd8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 806afda:	683b      	ldr	r3, [r7, #0]
 806afdc:	3b01      	subs	r3, #1
 806afde:	603b      	str	r3, [r7, #0]
 806afe0:	683b      	ldr	r3, [r7, #0]
 806afe2:	2b00      	cmp	r3, #0
 806afe4:	d1ee      	bne.n	806afc4 <USER_SPI_write+0xa0>
 806afe6:	e000      	b.n	806afea <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 806afe8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 806afea:	21fd      	movs	r1, #253	; 0xfd
 806afec:	2000      	movs	r0, #0
 806afee:	f7ff fd90 	bl	806ab12 <xmit_datablock>
 806aff2:	4603      	mov	r3, r0
 806aff4:	2b00      	cmp	r3, #0
 806aff6:	d101      	bne.n	806affc <USER_SPI_write+0xd8>
 806aff8:	2301      	movs	r3, #1
 806affa:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 806affc:	f7ff fd38 	bl	806aa70 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 806b000:	683b      	ldr	r3, [r7, #0]
 806b002:	2b00      	cmp	r3, #0
 806b004:	bf14      	ite	ne
 806b006:	2301      	movne	r3, #1
 806b008:	2300      	moveq	r3, #0
 806b00a:	b2db      	uxtb	r3, r3
}
 806b00c:	4618      	mov	r0, r3
 806b00e:	3710      	adds	r7, #16
 806b010:	46bd      	mov	sp, r7
 806b012:	bd80      	pop	{r7, pc}
 806b014:	20000020 	.word	0x20000020
 806b018:	20000420 	.word	0x20000420

0806b01c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 806b01c:	b580      	push	{r7, lr}
 806b01e:	b08c      	sub	sp, #48	; 0x30
 806b020:	af00      	add	r7, sp, #0
 806b022:	4603      	mov	r3, r0
 806b024:	603a      	str	r2, [r7, #0]
 806b026:	71fb      	strb	r3, [r7, #7]
 806b028:	460b      	mov	r3, r1
 806b02a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 806b02c:	79fb      	ldrb	r3, [r7, #7]
 806b02e:	2b00      	cmp	r3, #0
 806b030:	d001      	beq.n	806b036 <USER_SPI_ioctl+0x1a>
 806b032:	2304      	movs	r3, #4
 806b034:	e15a      	b.n	806b2ec <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 806b036:	4baf      	ldr	r3, [pc, #700]	; (806b2f4 <USER_SPI_ioctl+0x2d8>)
 806b038:	781b      	ldrb	r3, [r3, #0]
 806b03a:	b2db      	uxtb	r3, r3
 806b03c:	f003 0301 	and.w	r3, r3, #1
 806b040:	2b00      	cmp	r3, #0
 806b042:	d001      	beq.n	806b048 <USER_SPI_ioctl+0x2c>
 806b044:	2303      	movs	r3, #3
 806b046:	e151      	b.n	806b2ec <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 806b048:	2301      	movs	r3, #1
 806b04a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 806b04e:	79bb      	ldrb	r3, [r7, #6]
 806b050:	2b04      	cmp	r3, #4
 806b052:	f200 8136 	bhi.w	806b2c2 <USER_SPI_ioctl+0x2a6>
 806b056:	a201      	add	r2, pc, #4	; (adr r2, 806b05c <USER_SPI_ioctl+0x40>)
 806b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806b05c:	0806b071 	.word	0x0806b071
 806b060:	0806b085 	.word	0x0806b085
 806b064:	0806b2c3 	.word	0x0806b2c3
 806b068:	0806b131 	.word	0x0806b131
 806b06c:	0806b227 	.word	0x0806b227
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 806b070:	f7ff fd0c 	bl	806aa8c <spiselect>
 806b074:	4603      	mov	r3, r0
 806b076:	2b00      	cmp	r3, #0
 806b078:	f000 8127 	beq.w	806b2ca <USER_SPI_ioctl+0x2ae>
 806b07c:	2300      	movs	r3, #0
 806b07e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 806b082:	e122      	b.n	806b2ca <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 806b084:	2100      	movs	r1, #0
 806b086:	2009      	movs	r0, #9
 806b088:	f7ff fd75 	bl	806ab76 <send_cmd>
 806b08c:	4603      	mov	r3, r0
 806b08e:	2b00      	cmp	r3, #0
 806b090:	f040 811d 	bne.w	806b2ce <USER_SPI_ioctl+0x2b2>
 806b094:	f107 030c 	add.w	r3, r7, #12
 806b098:	2110      	movs	r1, #16
 806b09a:	4618      	mov	r0, r3
 806b09c:	f7ff fd10 	bl	806aac0 <rcvr_datablock>
 806b0a0:	4603      	mov	r3, r0
 806b0a2:	2b00      	cmp	r3, #0
 806b0a4:	f000 8113 	beq.w	806b2ce <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 806b0a8:	7b3b      	ldrb	r3, [r7, #12]
 806b0aa:	099b      	lsrs	r3, r3, #6
 806b0ac:	b2db      	uxtb	r3, r3
 806b0ae:	2b01      	cmp	r3, #1
 806b0b0:	d111      	bne.n	806b0d6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 806b0b2:	7d7b      	ldrb	r3, [r7, #21]
 806b0b4:	461a      	mov	r2, r3
 806b0b6:	7d3b      	ldrb	r3, [r7, #20]
 806b0b8:	021b      	lsls	r3, r3, #8
 806b0ba:	4413      	add	r3, r2
 806b0bc:	461a      	mov	r2, r3
 806b0be:	7cfb      	ldrb	r3, [r7, #19]
 806b0c0:	041b      	lsls	r3, r3, #16
 806b0c2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 806b0c6:	4413      	add	r3, r2
 806b0c8:	3301      	adds	r3, #1
 806b0ca:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 806b0cc:	69fb      	ldr	r3, [r7, #28]
 806b0ce:	029a      	lsls	r2, r3, #10
 806b0d0:	683b      	ldr	r3, [r7, #0]
 806b0d2:	601a      	str	r2, [r3, #0]
 806b0d4:	e028      	b.n	806b128 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 806b0d6:	7c7b      	ldrb	r3, [r7, #17]
 806b0d8:	f003 030f 	and.w	r3, r3, #15
 806b0dc:	b2da      	uxtb	r2, r3
 806b0de:	7dbb      	ldrb	r3, [r7, #22]
 806b0e0:	09db      	lsrs	r3, r3, #7
 806b0e2:	b2db      	uxtb	r3, r3
 806b0e4:	4413      	add	r3, r2
 806b0e6:	b2da      	uxtb	r2, r3
 806b0e8:	7d7b      	ldrb	r3, [r7, #21]
 806b0ea:	005b      	lsls	r3, r3, #1
 806b0ec:	b2db      	uxtb	r3, r3
 806b0ee:	f003 0306 	and.w	r3, r3, #6
 806b0f2:	b2db      	uxtb	r3, r3
 806b0f4:	4413      	add	r3, r2
 806b0f6:	b2db      	uxtb	r3, r3
 806b0f8:	3302      	adds	r3, #2
 806b0fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 806b0fe:	7d3b      	ldrb	r3, [r7, #20]
 806b100:	099b      	lsrs	r3, r3, #6
 806b102:	b2db      	uxtb	r3, r3
 806b104:	461a      	mov	r2, r3
 806b106:	7cfb      	ldrb	r3, [r7, #19]
 806b108:	009b      	lsls	r3, r3, #2
 806b10a:	441a      	add	r2, r3
 806b10c:	7cbb      	ldrb	r3, [r7, #18]
 806b10e:	029b      	lsls	r3, r3, #10
 806b110:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 806b114:	4413      	add	r3, r2
 806b116:	3301      	adds	r3, #1
 806b118:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 806b11a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 806b11e:	3b09      	subs	r3, #9
 806b120:	69fa      	ldr	r2, [r7, #28]
 806b122:	409a      	lsls	r2, r3
 806b124:	683b      	ldr	r3, [r7, #0]
 806b126:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 806b128:	2300      	movs	r3, #0
 806b12a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 806b12e:	e0ce      	b.n	806b2ce <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 806b130:	4b71      	ldr	r3, [pc, #452]	; (806b2f8 <USER_SPI_ioctl+0x2dc>)
 806b132:	781b      	ldrb	r3, [r3, #0]
 806b134:	f003 0304 	and.w	r3, r3, #4
 806b138:	2b00      	cmp	r3, #0
 806b13a:	d031      	beq.n	806b1a0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 806b13c:	2100      	movs	r1, #0
 806b13e:	208d      	movs	r0, #141	; 0x8d
 806b140:	f7ff fd19 	bl	806ab76 <send_cmd>
 806b144:	4603      	mov	r3, r0
 806b146:	2b00      	cmp	r3, #0
 806b148:	f040 80c3 	bne.w	806b2d2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 806b14c:	20ff      	movs	r0, #255	; 0xff
 806b14e:	f7ff fc1f 	bl	806a990 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 806b152:	f107 030c 	add.w	r3, r7, #12
 806b156:	2110      	movs	r1, #16
 806b158:	4618      	mov	r0, r3
 806b15a:	f7ff fcb1 	bl	806aac0 <rcvr_datablock>
 806b15e:	4603      	mov	r3, r0
 806b160:	2b00      	cmp	r3, #0
 806b162:	f000 80b6 	beq.w	806b2d2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 806b166:	2330      	movs	r3, #48	; 0x30
 806b168:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 806b16c:	e007      	b.n	806b17e <USER_SPI_ioctl+0x162>
 806b16e:	20ff      	movs	r0, #255	; 0xff
 806b170:	f7ff fc0e 	bl	806a990 <xchg_spi>
 806b174:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 806b178:	3b01      	subs	r3, #1
 806b17a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 806b17e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 806b182:	2b00      	cmp	r3, #0
 806b184:	d1f3      	bne.n	806b16e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 806b186:	7dbb      	ldrb	r3, [r7, #22]
 806b188:	091b      	lsrs	r3, r3, #4
 806b18a:	b2db      	uxtb	r3, r3
 806b18c:	461a      	mov	r2, r3
 806b18e:	2310      	movs	r3, #16
 806b190:	fa03 f202 	lsl.w	r2, r3, r2
 806b194:	683b      	ldr	r3, [r7, #0]
 806b196:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 806b198:	2300      	movs	r3, #0
 806b19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 806b19e:	e098      	b.n	806b2d2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 806b1a0:	2100      	movs	r1, #0
 806b1a2:	2009      	movs	r0, #9
 806b1a4:	f7ff fce7 	bl	806ab76 <send_cmd>
 806b1a8:	4603      	mov	r3, r0
 806b1aa:	2b00      	cmp	r3, #0
 806b1ac:	f040 8091 	bne.w	806b2d2 <USER_SPI_ioctl+0x2b6>
 806b1b0:	f107 030c 	add.w	r3, r7, #12
 806b1b4:	2110      	movs	r1, #16
 806b1b6:	4618      	mov	r0, r3
 806b1b8:	f7ff fc82 	bl	806aac0 <rcvr_datablock>
 806b1bc:	4603      	mov	r3, r0
 806b1be:	2b00      	cmp	r3, #0
 806b1c0:	f000 8087 	beq.w	806b2d2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 806b1c4:	4b4c      	ldr	r3, [pc, #304]	; (806b2f8 <USER_SPI_ioctl+0x2dc>)
 806b1c6:	781b      	ldrb	r3, [r3, #0]
 806b1c8:	f003 0302 	and.w	r3, r3, #2
 806b1cc:	2b00      	cmp	r3, #0
 806b1ce:	d012      	beq.n	806b1f6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 806b1d0:	7dbb      	ldrb	r3, [r7, #22]
 806b1d2:	005b      	lsls	r3, r3, #1
 806b1d4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 806b1d8:	7dfa      	ldrb	r2, [r7, #23]
 806b1da:	09d2      	lsrs	r2, r2, #7
 806b1dc:	b2d2      	uxtb	r2, r2
 806b1de:	4413      	add	r3, r2
 806b1e0:	1c5a      	adds	r2, r3, #1
 806b1e2:	7e7b      	ldrb	r3, [r7, #25]
 806b1e4:	099b      	lsrs	r3, r3, #6
 806b1e6:	b2db      	uxtb	r3, r3
 806b1e8:	3b01      	subs	r3, #1
 806b1ea:	fa02 f303 	lsl.w	r3, r2, r3
 806b1ee:	461a      	mov	r2, r3
 806b1f0:	683b      	ldr	r3, [r7, #0]
 806b1f2:	601a      	str	r2, [r3, #0]
 806b1f4:	e013      	b.n	806b21e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 806b1f6:	7dbb      	ldrb	r3, [r7, #22]
 806b1f8:	109b      	asrs	r3, r3, #2
 806b1fa:	b29b      	uxth	r3, r3
 806b1fc:	f003 031f 	and.w	r3, r3, #31
 806b200:	3301      	adds	r3, #1
 806b202:	7dfa      	ldrb	r2, [r7, #23]
 806b204:	00d2      	lsls	r2, r2, #3
 806b206:	f002 0218 	and.w	r2, r2, #24
 806b20a:	7df9      	ldrb	r1, [r7, #23]
 806b20c:	0949      	lsrs	r1, r1, #5
 806b20e:	b2c9      	uxtb	r1, r1
 806b210:	440a      	add	r2, r1
 806b212:	3201      	adds	r2, #1
 806b214:	fb02 f303 	mul.w	r3, r2, r3
 806b218:	461a      	mov	r2, r3
 806b21a:	683b      	ldr	r3, [r7, #0]
 806b21c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 806b21e:	2300      	movs	r3, #0
 806b220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 806b224:	e055      	b.n	806b2d2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 806b226:	4b34      	ldr	r3, [pc, #208]	; (806b2f8 <USER_SPI_ioctl+0x2dc>)
 806b228:	781b      	ldrb	r3, [r3, #0]
 806b22a:	f003 0306 	and.w	r3, r3, #6
 806b22e:	2b00      	cmp	r3, #0
 806b230:	d051      	beq.n	806b2d6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 806b232:	f107 020c 	add.w	r2, r7, #12
 806b236:	79fb      	ldrb	r3, [r7, #7]
 806b238:	210b      	movs	r1, #11
 806b23a:	4618      	mov	r0, r3
 806b23c:	f7ff feee 	bl	806b01c <USER_SPI_ioctl>
 806b240:	4603      	mov	r3, r0
 806b242:	2b00      	cmp	r3, #0
 806b244:	d149      	bne.n	806b2da <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 806b246:	7b3b      	ldrb	r3, [r7, #12]
 806b248:	099b      	lsrs	r3, r3, #6
 806b24a:	b2db      	uxtb	r3, r3
 806b24c:	2b00      	cmp	r3, #0
 806b24e:	d104      	bne.n	806b25a <USER_SPI_ioctl+0x23e>
 806b250:	7dbb      	ldrb	r3, [r7, #22]
 806b252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806b256:	2b00      	cmp	r3, #0
 806b258:	d041      	beq.n	806b2de <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 806b25a:	683b      	ldr	r3, [r7, #0]
 806b25c:	623b      	str	r3, [r7, #32]
 806b25e:	6a3b      	ldr	r3, [r7, #32]
 806b260:	681b      	ldr	r3, [r3, #0]
 806b262:	62bb      	str	r3, [r7, #40]	; 0x28
 806b264:	6a3b      	ldr	r3, [r7, #32]
 806b266:	685b      	ldr	r3, [r3, #4]
 806b268:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 806b26a:	4b23      	ldr	r3, [pc, #140]	; (806b2f8 <USER_SPI_ioctl+0x2dc>)
 806b26c:	781b      	ldrb	r3, [r3, #0]
 806b26e:	f003 0308 	and.w	r3, r3, #8
 806b272:	2b00      	cmp	r3, #0
 806b274:	d105      	bne.n	806b282 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 806b276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806b278:	025b      	lsls	r3, r3, #9
 806b27a:	62bb      	str	r3, [r7, #40]	; 0x28
 806b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806b27e:	025b      	lsls	r3, r3, #9
 806b280:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 806b282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 806b284:	2020      	movs	r0, #32
 806b286:	f7ff fc76 	bl	806ab76 <send_cmd>
 806b28a:	4603      	mov	r3, r0
 806b28c:	2b00      	cmp	r3, #0
 806b28e:	d128      	bne.n	806b2e2 <USER_SPI_ioctl+0x2c6>
 806b290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806b292:	2021      	movs	r0, #33	; 0x21
 806b294:	f7ff fc6f 	bl	806ab76 <send_cmd>
 806b298:	4603      	mov	r3, r0
 806b29a:	2b00      	cmp	r3, #0
 806b29c:	d121      	bne.n	806b2e2 <USER_SPI_ioctl+0x2c6>
 806b29e:	2100      	movs	r1, #0
 806b2a0:	2026      	movs	r0, #38	; 0x26
 806b2a2:	f7ff fc68 	bl	806ab76 <send_cmd>
 806b2a6:	4603      	mov	r3, r0
 806b2a8:	2b00      	cmp	r3, #0
 806b2aa:	d11a      	bne.n	806b2e2 <USER_SPI_ioctl+0x2c6>
 806b2ac:	f247 5030 	movw	r0, #30000	; 0x7530
 806b2b0:	f7ff fbbb 	bl	806aa2a <wait_ready>
 806b2b4:	4603      	mov	r3, r0
 806b2b6:	2b00      	cmp	r3, #0
 806b2b8:	d013      	beq.n	806b2e2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 806b2ba:	2300      	movs	r3, #0
 806b2bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 806b2c0:	e00f      	b.n	806b2e2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 806b2c2:	2304      	movs	r3, #4
 806b2c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 806b2c8:	e00c      	b.n	806b2e4 <USER_SPI_ioctl+0x2c8>
		break;
 806b2ca:	bf00      	nop
 806b2cc:	e00a      	b.n	806b2e4 <USER_SPI_ioctl+0x2c8>
		break;
 806b2ce:	bf00      	nop
 806b2d0:	e008      	b.n	806b2e4 <USER_SPI_ioctl+0x2c8>
		break;
 806b2d2:	bf00      	nop
 806b2d4:	e006      	b.n	806b2e4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 806b2d6:	bf00      	nop
 806b2d8:	e004      	b.n	806b2e4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 806b2da:	bf00      	nop
 806b2dc:	e002      	b.n	806b2e4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 806b2de:	bf00      	nop
 806b2e0:	e000      	b.n	806b2e4 <USER_SPI_ioctl+0x2c8>
		break;
 806b2e2:	bf00      	nop
	}

	despiselect();
 806b2e4:	f7ff fbc4 	bl	806aa70 <despiselect>

	return res;
 806b2e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 806b2ec:	4618      	mov	r0, r3
 806b2ee:	3730      	adds	r7, #48	; 0x30
 806b2f0:	46bd      	mov	sp, r7
 806b2f2:	bd80      	pop	{r7, pc}
 806b2f4:	20000020 	.word	0x20000020
 806b2f8:	20000420 	.word	0x20000420

0806b2fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 806b2fc:	b580      	push	{r7, lr}
 806b2fe:	b084      	sub	sp, #16
 806b300:	af00      	add	r7, sp, #0
 806b302:	4603      	mov	r3, r0
 806b304:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 806b306:	79fb      	ldrb	r3, [r7, #7]
 806b308:	4a08      	ldr	r2, [pc, #32]	; (806b32c <disk_status+0x30>)
 806b30a:	009b      	lsls	r3, r3, #2
 806b30c:	4413      	add	r3, r2
 806b30e:	685b      	ldr	r3, [r3, #4]
 806b310:	685b      	ldr	r3, [r3, #4]
 806b312:	79fa      	ldrb	r2, [r7, #7]
 806b314:	4905      	ldr	r1, [pc, #20]	; (806b32c <disk_status+0x30>)
 806b316:	440a      	add	r2, r1
 806b318:	7a12      	ldrb	r2, [r2, #8]
 806b31a:	4610      	mov	r0, r2
 806b31c:	4798      	blx	r3
 806b31e:	4603      	mov	r3, r0
 806b320:	73fb      	strb	r3, [r7, #15]
  return stat;
 806b322:	7bfb      	ldrb	r3, [r7, #15]
}
 806b324:	4618      	mov	r0, r3
 806b326:	3710      	adds	r7, #16
 806b328:	46bd      	mov	sp, r7
 806b32a:	bd80      	pop	{r7, pc}
 806b32c:	2000044c 	.word	0x2000044c

0806b330 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 806b330:	b580      	push	{r7, lr}
 806b332:	b084      	sub	sp, #16
 806b334:	af00      	add	r7, sp, #0
 806b336:	4603      	mov	r3, r0
 806b338:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 806b33a:	2300      	movs	r3, #0
 806b33c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 806b33e:	79fb      	ldrb	r3, [r7, #7]
 806b340:	4a0d      	ldr	r2, [pc, #52]	; (806b378 <disk_initialize+0x48>)
 806b342:	5cd3      	ldrb	r3, [r2, r3]
 806b344:	2b00      	cmp	r3, #0
 806b346:	d111      	bne.n	806b36c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 806b348:	79fb      	ldrb	r3, [r7, #7]
 806b34a:	4a0b      	ldr	r2, [pc, #44]	; (806b378 <disk_initialize+0x48>)
 806b34c:	2101      	movs	r1, #1
 806b34e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 806b350:	79fb      	ldrb	r3, [r7, #7]
 806b352:	4a09      	ldr	r2, [pc, #36]	; (806b378 <disk_initialize+0x48>)
 806b354:	009b      	lsls	r3, r3, #2
 806b356:	4413      	add	r3, r2
 806b358:	685b      	ldr	r3, [r3, #4]
 806b35a:	681b      	ldr	r3, [r3, #0]
 806b35c:	79fa      	ldrb	r2, [r7, #7]
 806b35e:	4906      	ldr	r1, [pc, #24]	; (806b378 <disk_initialize+0x48>)
 806b360:	440a      	add	r2, r1
 806b362:	7a12      	ldrb	r2, [r2, #8]
 806b364:	4610      	mov	r0, r2
 806b366:	4798      	blx	r3
 806b368:	4603      	mov	r3, r0
 806b36a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 806b36c:	7bfb      	ldrb	r3, [r7, #15]
}
 806b36e:	4618      	mov	r0, r3
 806b370:	3710      	adds	r7, #16
 806b372:	46bd      	mov	sp, r7
 806b374:	bd80      	pop	{r7, pc}
 806b376:	bf00      	nop
 806b378:	2000044c 	.word	0x2000044c

0806b37c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 806b37c:	b590      	push	{r4, r7, lr}
 806b37e:	b087      	sub	sp, #28
 806b380:	af00      	add	r7, sp, #0
 806b382:	60b9      	str	r1, [r7, #8]
 806b384:	607a      	str	r2, [r7, #4]
 806b386:	603b      	str	r3, [r7, #0]
 806b388:	4603      	mov	r3, r0
 806b38a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 806b38c:	7bfb      	ldrb	r3, [r7, #15]
 806b38e:	4a0a      	ldr	r2, [pc, #40]	; (806b3b8 <disk_read+0x3c>)
 806b390:	009b      	lsls	r3, r3, #2
 806b392:	4413      	add	r3, r2
 806b394:	685b      	ldr	r3, [r3, #4]
 806b396:	689c      	ldr	r4, [r3, #8]
 806b398:	7bfb      	ldrb	r3, [r7, #15]
 806b39a:	4a07      	ldr	r2, [pc, #28]	; (806b3b8 <disk_read+0x3c>)
 806b39c:	4413      	add	r3, r2
 806b39e:	7a18      	ldrb	r0, [r3, #8]
 806b3a0:	683b      	ldr	r3, [r7, #0]
 806b3a2:	687a      	ldr	r2, [r7, #4]
 806b3a4:	68b9      	ldr	r1, [r7, #8]
 806b3a6:	47a0      	blx	r4
 806b3a8:	4603      	mov	r3, r0
 806b3aa:	75fb      	strb	r3, [r7, #23]
  return res;
 806b3ac:	7dfb      	ldrb	r3, [r7, #23]
}
 806b3ae:	4618      	mov	r0, r3
 806b3b0:	371c      	adds	r7, #28
 806b3b2:	46bd      	mov	sp, r7
 806b3b4:	bd90      	pop	{r4, r7, pc}
 806b3b6:	bf00      	nop
 806b3b8:	2000044c 	.word	0x2000044c

0806b3bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 806b3bc:	b590      	push	{r4, r7, lr}
 806b3be:	b087      	sub	sp, #28
 806b3c0:	af00      	add	r7, sp, #0
 806b3c2:	60b9      	str	r1, [r7, #8]
 806b3c4:	607a      	str	r2, [r7, #4]
 806b3c6:	603b      	str	r3, [r7, #0]
 806b3c8:	4603      	mov	r3, r0
 806b3ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 806b3cc:	7bfb      	ldrb	r3, [r7, #15]
 806b3ce:	4a0a      	ldr	r2, [pc, #40]	; (806b3f8 <disk_write+0x3c>)
 806b3d0:	009b      	lsls	r3, r3, #2
 806b3d2:	4413      	add	r3, r2
 806b3d4:	685b      	ldr	r3, [r3, #4]
 806b3d6:	68dc      	ldr	r4, [r3, #12]
 806b3d8:	7bfb      	ldrb	r3, [r7, #15]
 806b3da:	4a07      	ldr	r2, [pc, #28]	; (806b3f8 <disk_write+0x3c>)
 806b3dc:	4413      	add	r3, r2
 806b3de:	7a18      	ldrb	r0, [r3, #8]
 806b3e0:	683b      	ldr	r3, [r7, #0]
 806b3e2:	687a      	ldr	r2, [r7, #4]
 806b3e4:	68b9      	ldr	r1, [r7, #8]
 806b3e6:	47a0      	blx	r4
 806b3e8:	4603      	mov	r3, r0
 806b3ea:	75fb      	strb	r3, [r7, #23]
  return res;
 806b3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 806b3ee:	4618      	mov	r0, r3
 806b3f0:	371c      	adds	r7, #28
 806b3f2:	46bd      	mov	sp, r7
 806b3f4:	bd90      	pop	{r4, r7, pc}
 806b3f6:	bf00      	nop
 806b3f8:	2000044c 	.word	0x2000044c

0806b3fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 806b3fc:	b580      	push	{r7, lr}
 806b3fe:	b084      	sub	sp, #16
 806b400:	af00      	add	r7, sp, #0
 806b402:	4603      	mov	r3, r0
 806b404:	603a      	str	r2, [r7, #0]
 806b406:	71fb      	strb	r3, [r7, #7]
 806b408:	460b      	mov	r3, r1
 806b40a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 806b40c:	79fb      	ldrb	r3, [r7, #7]
 806b40e:	4a09      	ldr	r2, [pc, #36]	; (806b434 <disk_ioctl+0x38>)
 806b410:	009b      	lsls	r3, r3, #2
 806b412:	4413      	add	r3, r2
 806b414:	685b      	ldr	r3, [r3, #4]
 806b416:	691b      	ldr	r3, [r3, #16]
 806b418:	79fa      	ldrb	r2, [r7, #7]
 806b41a:	4906      	ldr	r1, [pc, #24]	; (806b434 <disk_ioctl+0x38>)
 806b41c:	440a      	add	r2, r1
 806b41e:	7a10      	ldrb	r0, [r2, #8]
 806b420:	79b9      	ldrb	r1, [r7, #6]
 806b422:	683a      	ldr	r2, [r7, #0]
 806b424:	4798      	blx	r3
 806b426:	4603      	mov	r3, r0
 806b428:	73fb      	strb	r3, [r7, #15]
  return res;
 806b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 806b42c:	4618      	mov	r0, r3
 806b42e:	3710      	adds	r7, #16
 806b430:	46bd      	mov	sp, r7
 806b432:	bd80      	pop	{r7, pc}
 806b434:	2000044c 	.word	0x2000044c

0806b438 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 806b438:	b480      	push	{r7}
 806b43a:	b085      	sub	sp, #20
 806b43c:	af00      	add	r7, sp, #0
 806b43e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 806b440:	687b      	ldr	r3, [r7, #4]
 806b442:	3301      	adds	r3, #1
 806b444:	781b      	ldrb	r3, [r3, #0]
 806b446:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 806b448:	89fb      	ldrh	r3, [r7, #14]
 806b44a:	021b      	lsls	r3, r3, #8
 806b44c:	b21a      	sxth	r2, r3
 806b44e:	687b      	ldr	r3, [r7, #4]
 806b450:	781b      	ldrb	r3, [r3, #0]
 806b452:	b21b      	sxth	r3, r3
 806b454:	4313      	orrs	r3, r2
 806b456:	b21b      	sxth	r3, r3
 806b458:	81fb      	strh	r3, [r7, #14]
	return rv;
 806b45a:	89fb      	ldrh	r3, [r7, #14]
}
 806b45c:	4618      	mov	r0, r3
 806b45e:	3714      	adds	r7, #20
 806b460:	46bd      	mov	sp, r7
 806b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b466:	4770      	bx	lr

0806b468 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 806b468:	b480      	push	{r7}
 806b46a:	b085      	sub	sp, #20
 806b46c:	af00      	add	r7, sp, #0
 806b46e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 806b470:	687b      	ldr	r3, [r7, #4]
 806b472:	3303      	adds	r3, #3
 806b474:	781b      	ldrb	r3, [r3, #0]
 806b476:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 806b478:	68fb      	ldr	r3, [r7, #12]
 806b47a:	021b      	lsls	r3, r3, #8
 806b47c:	687a      	ldr	r2, [r7, #4]
 806b47e:	3202      	adds	r2, #2
 806b480:	7812      	ldrb	r2, [r2, #0]
 806b482:	4313      	orrs	r3, r2
 806b484:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 806b486:	68fb      	ldr	r3, [r7, #12]
 806b488:	021b      	lsls	r3, r3, #8
 806b48a:	687a      	ldr	r2, [r7, #4]
 806b48c:	3201      	adds	r2, #1
 806b48e:	7812      	ldrb	r2, [r2, #0]
 806b490:	4313      	orrs	r3, r2
 806b492:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 806b494:	68fb      	ldr	r3, [r7, #12]
 806b496:	021b      	lsls	r3, r3, #8
 806b498:	687a      	ldr	r2, [r7, #4]
 806b49a:	7812      	ldrb	r2, [r2, #0]
 806b49c:	4313      	orrs	r3, r2
 806b49e:	60fb      	str	r3, [r7, #12]
	return rv;
 806b4a0:	68fb      	ldr	r3, [r7, #12]
}
 806b4a2:	4618      	mov	r0, r3
 806b4a4:	3714      	adds	r7, #20
 806b4a6:	46bd      	mov	sp, r7
 806b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b4ac:	4770      	bx	lr

0806b4ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 806b4ae:	b480      	push	{r7}
 806b4b0:	b083      	sub	sp, #12
 806b4b2:	af00      	add	r7, sp, #0
 806b4b4:	6078      	str	r0, [r7, #4]
 806b4b6:	460b      	mov	r3, r1
 806b4b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 806b4ba:	687b      	ldr	r3, [r7, #4]
 806b4bc:	1c5a      	adds	r2, r3, #1
 806b4be:	607a      	str	r2, [r7, #4]
 806b4c0:	887a      	ldrh	r2, [r7, #2]
 806b4c2:	b2d2      	uxtb	r2, r2
 806b4c4:	701a      	strb	r2, [r3, #0]
 806b4c6:	887b      	ldrh	r3, [r7, #2]
 806b4c8:	0a1b      	lsrs	r3, r3, #8
 806b4ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 806b4cc:	687b      	ldr	r3, [r7, #4]
 806b4ce:	1c5a      	adds	r2, r3, #1
 806b4d0:	607a      	str	r2, [r7, #4]
 806b4d2:	887a      	ldrh	r2, [r7, #2]
 806b4d4:	b2d2      	uxtb	r2, r2
 806b4d6:	701a      	strb	r2, [r3, #0]
}
 806b4d8:	bf00      	nop
 806b4da:	370c      	adds	r7, #12
 806b4dc:	46bd      	mov	sp, r7
 806b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b4e2:	4770      	bx	lr

0806b4e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 806b4e4:	b480      	push	{r7}
 806b4e6:	b083      	sub	sp, #12
 806b4e8:	af00      	add	r7, sp, #0
 806b4ea:	6078      	str	r0, [r7, #4]
 806b4ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 806b4ee:	687b      	ldr	r3, [r7, #4]
 806b4f0:	1c5a      	adds	r2, r3, #1
 806b4f2:	607a      	str	r2, [r7, #4]
 806b4f4:	683a      	ldr	r2, [r7, #0]
 806b4f6:	b2d2      	uxtb	r2, r2
 806b4f8:	701a      	strb	r2, [r3, #0]
 806b4fa:	683b      	ldr	r3, [r7, #0]
 806b4fc:	0a1b      	lsrs	r3, r3, #8
 806b4fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 806b500:	687b      	ldr	r3, [r7, #4]
 806b502:	1c5a      	adds	r2, r3, #1
 806b504:	607a      	str	r2, [r7, #4]
 806b506:	683a      	ldr	r2, [r7, #0]
 806b508:	b2d2      	uxtb	r2, r2
 806b50a:	701a      	strb	r2, [r3, #0]
 806b50c:	683b      	ldr	r3, [r7, #0]
 806b50e:	0a1b      	lsrs	r3, r3, #8
 806b510:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 806b512:	687b      	ldr	r3, [r7, #4]
 806b514:	1c5a      	adds	r2, r3, #1
 806b516:	607a      	str	r2, [r7, #4]
 806b518:	683a      	ldr	r2, [r7, #0]
 806b51a:	b2d2      	uxtb	r2, r2
 806b51c:	701a      	strb	r2, [r3, #0]
 806b51e:	683b      	ldr	r3, [r7, #0]
 806b520:	0a1b      	lsrs	r3, r3, #8
 806b522:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 806b524:	687b      	ldr	r3, [r7, #4]
 806b526:	1c5a      	adds	r2, r3, #1
 806b528:	607a      	str	r2, [r7, #4]
 806b52a:	683a      	ldr	r2, [r7, #0]
 806b52c:	b2d2      	uxtb	r2, r2
 806b52e:	701a      	strb	r2, [r3, #0]
}
 806b530:	bf00      	nop
 806b532:	370c      	adds	r7, #12
 806b534:	46bd      	mov	sp, r7
 806b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b53a:	4770      	bx	lr

0806b53c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 806b53c:	b480      	push	{r7}
 806b53e:	b087      	sub	sp, #28
 806b540:	af00      	add	r7, sp, #0
 806b542:	60f8      	str	r0, [r7, #12]
 806b544:	60b9      	str	r1, [r7, #8]
 806b546:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 806b548:	68fb      	ldr	r3, [r7, #12]
 806b54a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 806b54c:	68bb      	ldr	r3, [r7, #8]
 806b54e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 806b550:	687b      	ldr	r3, [r7, #4]
 806b552:	2b00      	cmp	r3, #0
 806b554:	d00d      	beq.n	806b572 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 806b556:	693a      	ldr	r2, [r7, #16]
 806b558:	1c53      	adds	r3, r2, #1
 806b55a:	613b      	str	r3, [r7, #16]
 806b55c:	697b      	ldr	r3, [r7, #20]
 806b55e:	1c59      	adds	r1, r3, #1
 806b560:	6179      	str	r1, [r7, #20]
 806b562:	7812      	ldrb	r2, [r2, #0]
 806b564:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 806b566:	687b      	ldr	r3, [r7, #4]
 806b568:	3b01      	subs	r3, #1
 806b56a:	607b      	str	r3, [r7, #4]
 806b56c:	687b      	ldr	r3, [r7, #4]
 806b56e:	2b00      	cmp	r3, #0
 806b570:	d1f1      	bne.n	806b556 <mem_cpy+0x1a>
	}
}
 806b572:	bf00      	nop
 806b574:	371c      	adds	r7, #28
 806b576:	46bd      	mov	sp, r7
 806b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b57c:	4770      	bx	lr

0806b57e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 806b57e:	b480      	push	{r7}
 806b580:	b087      	sub	sp, #28
 806b582:	af00      	add	r7, sp, #0
 806b584:	60f8      	str	r0, [r7, #12]
 806b586:	60b9      	str	r1, [r7, #8]
 806b588:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 806b58a:	68fb      	ldr	r3, [r7, #12]
 806b58c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 806b58e:	697b      	ldr	r3, [r7, #20]
 806b590:	1c5a      	adds	r2, r3, #1
 806b592:	617a      	str	r2, [r7, #20]
 806b594:	68ba      	ldr	r2, [r7, #8]
 806b596:	b2d2      	uxtb	r2, r2
 806b598:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 806b59a:	687b      	ldr	r3, [r7, #4]
 806b59c:	3b01      	subs	r3, #1
 806b59e:	607b      	str	r3, [r7, #4]
 806b5a0:	687b      	ldr	r3, [r7, #4]
 806b5a2:	2b00      	cmp	r3, #0
 806b5a4:	d1f3      	bne.n	806b58e <mem_set+0x10>
}
 806b5a6:	bf00      	nop
 806b5a8:	bf00      	nop
 806b5aa:	371c      	adds	r7, #28
 806b5ac:	46bd      	mov	sp, r7
 806b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b5b2:	4770      	bx	lr

0806b5b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 806b5b4:	b480      	push	{r7}
 806b5b6:	b089      	sub	sp, #36	; 0x24
 806b5b8:	af00      	add	r7, sp, #0
 806b5ba:	60f8      	str	r0, [r7, #12]
 806b5bc:	60b9      	str	r1, [r7, #8]
 806b5be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 806b5c0:	68fb      	ldr	r3, [r7, #12]
 806b5c2:	61fb      	str	r3, [r7, #28]
 806b5c4:	68bb      	ldr	r3, [r7, #8]
 806b5c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 806b5c8:	2300      	movs	r3, #0
 806b5ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 806b5cc:	69fb      	ldr	r3, [r7, #28]
 806b5ce:	1c5a      	adds	r2, r3, #1
 806b5d0:	61fa      	str	r2, [r7, #28]
 806b5d2:	781b      	ldrb	r3, [r3, #0]
 806b5d4:	4619      	mov	r1, r3
 806b5d6:	69bb      	ldr	r3, [r7, #24]
 806b5d8:	1c5a      	adds	r2, r3, #1
 806b5da:	61ba      	str	r2, [r7, #24]
 806b5dc:	781b      	ldrb	r3, [r3, #0]
 806b5de:	1acb      	subs	r3, r1, r3
 806b5e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 806b5e2:	687b      	ldr	r3, [r7, #4]
 806b5e4:	3b01      	subs	r3, #1
 806b5e6:	607b      	str	r3, [r7, #4]
 806b5e8:	687b      	ldr	r3, [r7, #4]
 806b5ea:	2b00      	cmp	r3, #0
 806b5ec:	d002      	beq.n	806b5f4 <mem_cmp+0x40>
 806b5ee:	697b      	ldr	r3, [r7, #20]
 806b5f0:	2b00      	cmp	r3, #0
 806b5f2:	d0eb      	beq.n	806b5cc <mem_cmp+0x18>

	return r;
 806b5f4:	697b      	ldr	r3, [r7, #20]
}
 806b5f6:	4618      	mov	r0, r3
 806b5f8:	3724      	adds	r7, #36	; 0x24
 806b5fa:	46bd      	mov	sp, r7
 806b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b600:	4770      	bx	lr

0806b602 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 806b602:	b480      	push	{r7}
 806b604:	b083      	sub	sp, #12
 806b606:	af00      	add	r7, sp, #0
 806b608:	6078      	str	r0, [r7, #4]
 806b60a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 806b60c:	e002      	b.n	806b614 <chk_chr+0x12>
 806b60e:	687b      	ldr	r3, [r7, #4]
 806b610:	3301      	adds	r3, #1
 806b612:	607b      	str	r3, [r7, #4]
 806b614:	687b      	ldr	r3, [r7, #4]
 806b616:	781b      	ldrb	r3, [r3, #0]
 806b618:	2b00      	cmp	r3, #0
 806b61a:	d005      	beq.n	806b628 <chk_chr+0x26>
 806b61c:	687b      	ldr	r3, [r7, #4]
 806b61e:	781b      	ldrb	r3, [r3, #0]
 806b620:	461a      	mov	r2, r3
 806b622:	683b      	ldr	r3, [r7, #0]
 806b624:	4293      	cmp	r3, r2
 806b626:	d1f2      	bne.n	806b60e <chk_chr+0xc>
	return *str;
 806b628:	687b      	ldr	r3, [r7, #4]
 806b62a:	781b      	ldrb	r3, [r3, #0]
}
 806b62c:	4618      	mov	r0, r3
 806b62e:	370c      	adds	r7, #12
 806b630:	46bd      	mov	sp, r7
 806b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b636:	4770      	bx	lr

0806b638 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 806b638:	b580      	push	{r7, lr}
 806b63a:	b082      	sub	sp, #8
 806b63c:	af00      	add	r7, sp, #0
 806b63e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 806b640:	687b      	ldr	r3, [r7, #4]
 806b642:	2b00      	cmp	r3, #0
 806b644:	d009      	beq.n	806b65a <lock_fs+0x22>
 806b646:	687b      	ldr	r3, [r7, #4]
 806b648:	68db      	ldr	r3, [r3, #12]
 806b64a:	4618      	mov	r0, r3
 806b64c:	f002 fbbe 	bl	806ddcc <ff_req_grant>
 806b650:	4603      	mov	r3, r0
 806b652:	2b00      	cmp	r3, #0
 806b654:	d001      	beq.n	806b65a <lock_fs+0x22>
 806b656:	2301      	movs	r3, #1
 806b658:	e000      	b.n	806b65c <lock_fs+0x24>
 806b65a:	2300      	movs	r3, #0
}
 806b65c:	4618      	mov	r0, r3
 806b65e:	3708      	adds	r7, #8
 806b660:	46bd      	mov	sp, r7
 806b662:	bd80      	pop	{r7, pc}

0806b664 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 806b664:	b580      	push	{r7, lr}
 806b666:	b082      	sub	sp, #8
 806b668:	af00      	add	r7, sp, #0
 806b66a:	6078      	str	r0, [r7, #4]
 806b66c:	460b      	mov	r3, r1
 806b66e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 806b670:	687b      	ldr	r3, [r7, #4]
 806b672:	2b00      	cmp	r3, #0
 806b674:	d00d      	beq.n	806b692 <unlock_fs+0x2e>
 806b676:	78fb      	ldrb	r3, [r7, #3]
 806b678:	2b0c      	cmp	r3, #12
 806b67a:	d00a      	beq.n	806b692 <unlock_fs+0x2e>
 806b67c:	78fb      	ldrb	r3, [r7, #3]
 806b67e:	2b0b      	cmp	r3, #11
 806b680:	d007      	beq.n	806b692 <unlock_fs+0x2e>
 806b682:	78fb      	ldrb	r3, [r7, #3]
 806b684:	2b0f      	cmp	r3, #15
 806b686:	d004      	beq.n	806b692 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 806b688:	687b      	ldr	r3, [r7, #4]
 806b68a:	68db      	ldr	r3, [r3, #12]
 806b68c:	4618      	mov	r0, r3
 806b68e:	f002 fbb2 	bl	806ddf6 <ff_rel_grant>
	}
}
 806b692:	bf00      	nop
 806b694:	3708      	adds	r7, #8
 806b696:	46bd      	mov	sp, r7
 806b698:	bd80      	pop	{r7, pc}
	...

0806b69c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 806b69c:	b480      	push	{r7}
 806b69e:	b085      	sub	sp, #20
 806b6a0:	af00      	add	r7, sp, #0
 806b6a2:	6078      	str	r0, [r7, #4]
 806b6a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 806b6a6:	2300      	movs	r3, #0
 806b6a8:	60bb      	str	r3, [r7, #8]
 806b6aa:	68bb      	ldr	r3, [r7, #8]
 806b6ac:	60fb      	str	r3, [r7, #12]
 806b6ae:	e029      	b.n	806b704 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 806b6b0:	4a27      	ldr	r2, [pc, #156]	; (806b750 <chk_lock+0xb4>)
 806b6b2:	68fb      	ldr	r3, [r7, #12]
 806b6b4:	011b      	lsls	r3, r3, #4
 806b6b6:	4413      	add	r3, r2
 806b6b8:	681b      	ldr	r3, [r3, #0]
 806b6ba:	2b00      	cmp	r3, #0
 806b6bc:	d01d      	beq.n	806b6fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 806b6be:	4a24      	ldr	r2, [pc, #144]	; (806b750 <chk_lock+0xb4>)
 806b6c0:	68fb      	ldr	r3, [r7, #12]
 806b6c2:	011b      	lsls	r3, r3, #4
 806b6c4:	4413      	add	r3, r2
 806b6c6:	681a      	ldr	r2, [r3, #0]
 806b6c8:	687b      	ldr	r3, [r7, #4]
 806b6ca:	681b      	ldr	r3, [r3, #0]
 806b6cc:	429a      	cmp	r2, r3
 806b6ce:	d116      	bne.n	806b6fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 806b6d0:	4a1f      	ldr	r2, [pc, #124]	; (806b750 <chk_lock+0xb4>)
 806b6d2:	68fb      	ldr	r3, [r7, #12]
 806b6d4:	011b      	lsls	r3, r3, #4
 806b6d6:	4413      	add	r3, r2
 806b6d8:	3304      	adds	r3, #4
 806b6da:	681a      	ldr	r2, [r3, #0]
 806b6dc:	687b      	ldr	r3, [r7, #4]
 806b6de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 806b6e0:	429a      	cmp	r2, r3
 806b6e2:	d10c      	bne.n	806b6fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 806b6e4:	4a1a      	ldr	r2, [pc, #104]	; (806b750 <chk_lock+0xb4>)
 806b6e6:	68fb      	ldr	r3, [r7, #12]
 806b6e8:	011b      	lsls	r3, r3, #4
 806b6ea:	4413      	add	r3, r2
 806b6ec:	3308      	adds	r3, #8
 806b6ee:	681a      	ldr	r2, [r3, #0]
 806b6f0:	687b      	ldr	r3, [r7, #4]
 806b6f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 806b6f4:	429a      	cmp	r2, r3
 806b6f6:	d102      	bne.n	806b6fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 806b6f8:	e007      	b.n	806b70a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 806b6fa:	2301      	movs	r3, #1
 806b6fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 806b6fe:	68fb      	ldr	r3, [r7, #12]
 806b700:	3301      	adds	r3, #1
 806b702:	60fb      	str	r3, [r7, #12]
 806b704:	68fb      	ldr	r3, [r7, #12]
 806b706:	2b01      	cmp	r3, #1
 806b708:	d9d2      	bls.n	806b6b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 806b70a:	68fb      	ldr	r3, [r7, #12]
 806b70c:	2b02      	cmp	r3, #2
 806b70e:	d109      	bne.n	806b724 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 806b710:	68bb      	ldr	r3, [r7, #8]
 806b712:	2b00      	cmp	r3, #0
 806b714:	d102      	bne.n	806b71c <chk_lock+0x80>
 806b716:	683b      	ldr	r3, [r7, #0]
 806b718:	2b02      	cmp	r3, #2
 806b71a:	d101      	bne.n	806b720 <chk_lock+0x84>
 806b71c:	2300      	movs	r3, #0
 806b71e:	e010      	b.n	806b742 <chk_lock+0xa6>
 806b720:	2312      	movs	r3, #18
 806b722:	e00e      	b.n	806b742 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 806b724:	683b      	ldr	r3, [r7, #0]
 806b726:	2b00      	cmp	r3, #0
 806b728:	d108      	bne.n	806b73c <chk_lock+0xa0>
 806b72a:	4a09      	ldr	r2, [pc, #36]	; (806b750 <chk_lock+0xb4>)
 806b72c:	68fb      	ldr	r3, [r7, #12]
 806b72e:	011b      	lsls	r3, r3, #4
 806b730:	4413      	add	r3, r2
 806b732:	330c      	adds	r3, #12
 806b734:	881b      	ldrh	r3, [r3, #0]
 806b736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806b73a:	d101      	bne.n	806b740 <chk_lock+0xa4>
 806b73c:	2310      	movs	r3, #16
 806b73e:	e000      	b.n	806b742 <chk_lock+0xa6>
 806b740:	2300      	movs	r3, #0
}
 806b742:	4618      	mov	r0, r3
 806b744:	3714      	adds	r7, #20
 806b746:	46bd      	mov	sp, r7
 806b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b74c:	4770      	bx	lr
 806b74e:	bf00      	nop
 806b750:	2000042c 	.word	0x2000042c

0806b754 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 806b754:	b480      	push	{r7}
 806b756:	b083      	sub	sp, #12
 806b758:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 806b75a:	2300      	movs	r3, #0
 806b75c:	607b      	str	r3, [r7, #4]
 806b75e:	e002      	b.n	806b766 <enq_lock+0x12>
 806b760:	687b      	ldr	r3, [r7, #4]
 806b762:	3301      	adds	r3, #1
 806b764:	607b      	str	r3, [r7, #4]
 806b766:	687b      	ldr	r3, [r7, #4]
 806b768:	2b01      	cmp	r3, #1
 806b76a:	d806      	bhi.n	806b77a <enq_lock+0x26>
 806b76c:	4a09      	ldr	r2, [pc, #36]	; (806b794 <enq_lock+0x40>)
 806b76e:	687b      	ldr	r3, [r7, #4]
 806b770:	011b      	lsls	r3, r3, #4
 806b772:	4413      	add	r3, r2
 806b774:	681b      	ldr	r3, [r3, #0]
 806b776:	2b00      	cmp	r3, #0
 806b778:	d1f2      	bne.n	806b760 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 806b77a:	687b      	ldr	r3, [r7, #4]
 806b77c:	2b02      	cmp	r3, #2
 806b77e:	bf14      	ite	ne
 806b780:	2301      	movne	r3, #1
 806b782:	2300      	moveq	r3, #0
 806b784:	b2db      	uxtb	r3, r3
}
 806b786:	4618      	mov	r0, r3
 806b788:	370c      	adds	r7, #12
 806b78a:	46bd      	mov	sp, r7
 806b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b790:	4770      	bx	lr
 806b792:	bf00      	nop
 806b794:	2000042c 	.word	0x2000042c

0806b798 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 806b798:	b480      	push	{r7}
 806b79a:	b085      	sub	sp, #20
 806b79c:	af00      	add	r7, sp, #0
 806b79e:	6078      	str	r0, [r7, #4]
 806b7a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 806b7a2:	2300      	movs	r3, #0
 806b7a4:	60fb      	str	r3, [r7, #12]
 806b7a6:	e01f      	b.n	806b7e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 806b7a8:	4a41      	ldr	r2, [pc, #260]	; (806b8b0 <inc_lock+0x118>)
 806b7aa:	68fb      	ldr	r3, [r7, #12]
 806b7ac:	011b      	lsls	r3, r3, #4
 806b7ae:	4413      	add	r3, r2
 806b7b0:	681a      	ldr	r2, [r3, #0]
 806b7b2:	687b      	ldr	r3, [r7, #4]
 806b7b4:	681b      	ldr	r3, [r3, #0]
 806b7b6:	429a      	cmp	r2, r3
 806b7b8:	d113      	bne.n	806b7e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 806b7ba:	4a3d      	ldr	r2, [pc, #244]	; (806b8b0 <inc_lock+0x118>)
 806b7bc:	68fb      	ldr	r3, [r7, #12]
 806b7be:	011b      	lsls	r3, r3, #4
 806b7c0:	4413      	add	r3, r2
 806b7c2:	3304      	adds	r3, #4
 806b7c4:	681a      	ldr	r2, [r3, #0]
 806b7c6:	687b      	ldr	r3, [r7, #4]
 806b7c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 806b7ca:	429a      	cmp	r2, r3
 806b7cc:	d109      	bne.n	806b7e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 806b7ce:	4a38      	ldr	r2, [pc, #224]	; (806b8b0 <inc_lock+0x118>)
 806b7d0:	68fb      	ldr	r3, [r7, #12]
 806b7d2:	011b      	lsls	r3, r3, #4
 806b7d4:	4413      	add	r3, r2
 806b7d6:	3308      	adds	r3, #8
 806b7d8:	681a      	ldr	r2, [r3, #0]
 806b7da:	687b      	ldr	r3, [r7, #4]
 806b7dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 806b7de:	429a      	cmp	r2, r3
 806b7e0:	d006      	beq.n	806b7f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 806b7e2:	68fb      	ldr	r3, [r7, #12]
 806b7e4:	3301      	adds	r3, #1
 806b7e6:	60fb      	str	r3, [r7, #12]
 806b7e8:	68fb      	ldr	r3, [r7, #12]
 806b7ea:	2b01      	cmp	r3, #1
 806b7ec:	d9dc      	bls.n	806b7a8 <inc_lock+0x10>
 806b7ee:	e000      	b.n	806b7f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 806b7f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 806b7f2:	68fb      	ldr	r3, [r7, #12]
 806b7f4:	2b02      	cmp	r3, #2
 806b7f6:	d132      	bne.n	806b85e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 806b7f8:	2300      	movs	r3, #0
 806b7fa:	60fb      	str	r3, [r7, #12]
 806b7fc:	e002      	b.n	806b804 <inc_lock+0x6c>
 806b7fe:	68fb      	ldr	r3, [r7, #12]
 806b800:	3301      	adds	r3, #1
 806b802:	60fb      	str	r3, [r7, #12]
 806b804:	68fb      	ldr	r3, [r7, #12]
 806b806:	2b01      	cmp	r3, #1
 806b808:	d806      	bhi.n	806b818 <inc_lock+0x80>
 806b80a:	4a29      	ldr	r2, [pc, #164]	; (806b8b0 <inc_lock+0x118>)
 806b80c:	68fb      	ldr	r3, [r7, #12]
 806b80e:	011b      	lsls	r3, r3, #4
 806b810:	4413      	add	r3, r2
 806b812:	681b      	ldr	r3, [r3, #0]
 806b814:	2b00      	cmp	r3, #0
 806b816:	d1f2      	bne.n	806b7fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 806b818:	68fb      	ldr	r3, [r7, #12]
 806b81a:	2b02      	cmp	r3, #2
 806b81c:	d101      	bne.n	806b822 <inc_lock+0x8a>
 806b81e:	2300      	movs	r3, #0
 806b820:	e040      	b.n	806b8a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 806b822:	687b      	ldr	r3, [r7, #4]
 806b824:	681a      	ldr	r2, [r3, #0]
 806b826:	4922      	ldr	r1, [pc, #136]	; (806b8b0 <inc_lock+0x118>)
 806b828:	68fb      	ldr	r3, [r7, #12]
 806b82a:	011b      	lsls	r3, r3, #4
 806b82c:	440b      	add	r3, r1
 806b82e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 806b830:	687b      	ldr	r3, [r7, #4]
 806b832:	689a      	ldr	r2, [r3, #8]
 806b834:	491e      	ldr	r1, [pc, #120]	; (806b8b0 <inc_lock+0x118>)
 806b836:	68fb      	ldr	r3, [r7, #12]
 806b838:	011b      	lsls	r3, r3, #4
 806b83a:	440b      	add	r3, r1
 806b83c:	3304      	adds	r3, #4
 806b83e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 806b840:	687b      	ldr	r3, [r7, #4]
 806b842:	695a      	ldr	r2, [r3, #20]
 806b844:	491a      	ldr	r1, [pc, #104]	; (806b8b0 <inc_lock+0x118>)
 806b846:	68fb      	ldr	r3, [r7, #12]
 806b848:	011b      	lsls	r3, r3, #4
 806b84a:	440b      	add	r3, r1
 806b84c:	3308      	adds	r3, #8
 806b84e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 806b850:	4a17      	ldr	r2, [pc, #92]	; (806b8b0 <inc_lock+0x118>)
 806b852:	68fb      	ldr	r3, [r7, #12]
 806b854:	011b      	lsls	r3, r3, #4
 806b856:	4413      	add	r3, r2
 806b858:	330c      	adds	r3, #12
 806b85a:	2200      	movs	r2, #0
 806b85c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 806b85e:	683b      	ldr	r3, [r7, #0]
 806b860:	2b00      	cmp	r3, #0
 806b862:	d009      	beq.n	806b878 <inc_lock+0xe0>
 806b864:	4a12      	ldr	r2, [pc, #72]	; (806b8b0 <inc_lock+0x118>)
 806b866:	68fb      	ldr	r3, [r7, #12]
 806b868:	011b      	lsls	r3, r3, #4
 806b86a:	4413      	add	r3, r2
 806b86c:	330c      	adds	r3, #12
 806b86e:	881b      	ldrh	r3, [r3, #0]
 806b870:	2b00      	cmp	r3, #0
 806b872:	d001      	beq.n	806b878 <inc_lock+0xe0>
 806b874:	2300      	movs	r3, #0
 806b876:	e015      	b.n	806b8a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 806b878:	683b      	ldr	r3, [r7, #0]
 806b87a:	2b00      	cmp	r3, #0
 806b87c:	d108      	bne.n	806b890 <inc_lock+0xf8>
 806b87e:	4a0c      	ldr	r2, [pc, #48]	; (806b8b0 <inc_lock+0x118>)
 806b880:	68fb      	ldr	r3, [r7, #12]
 806b882:	011b      	lsls	r3, r3, #4
 806b884:	4413      	add	r3, r2
 806b886:	330c      	adds	r3, #12
 806b888:	881b      	ldrh	r3, [r3, #0]
 806b88a:	3301      	adds	r3, #1
 806b88c:	b29a      	uxth	r2, r3
 806b88e:	e001      	b.n	806b894 <inc_lock+0xfc>
 806b890:	f44f 7280 	mov.w	r2, #256	; 0x100
 806b894:	4906      	ldr	r1, [pc, #24]	; (806b8b0 <inc_lock+0x118>)
 806b896:	68fb      	ldr	r3, [r7, #12]
 806b898:	011b      	lsls	r3, r3, #4
 806b89a:	440b      	add	r3, r1
 806b89c:	330c      	adds	r3, #12
 806b89e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 806b8a0:	68fb      	ldr	r3, [r7, #12]
 806b8a2:	3301      	adds	r3, #1
}
 806b8a4:	4618      	mov	r0, r3
 806b8a6:	3714      	adds	r7, #20
 806b8a8:	46bd      	mov	sp, r7
 806b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b8ae:	4770      	bx	lr
 806b8b0:	2000042c 	.word	0x2000042c

0806b8b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 806b8b4:	b480      	push	{r7}
 806b8b6:	b085      	sub	sp, #20
 806b8b8:	af00      	add	r7, sp, #0
 806b8ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 806b8bc:	687b      	ldr	r3, [r7, #4]
 806b8be:	3b01      	subs	r3, #1
 806b8c0:	607b      	str	r3, [r7, #4]
 806b8c2:	687b      	ldr	r3, [r7, #4]
 806b8c4:	2b01      	cmp	r3, #1
 806b8c6:	d825      	bhi.n	806b914 <dec_lock+0x60>
		n = Files[i].ctr;
 806b8c8:	4a17      	ldr	r2, [pc, #92]	; (806b928 <dec_lock+0x74>)
 806b8ca:	687b      	ldr	r3, [r7, #4]
 806b8cc:	011b      	lsls	r3, r3, #4
 806b8ce:	4413      	add	r3, r2
 806b8d0:	330c      	adds	r3, #12
 806b8d2:	881b      	ldrh	r3, [r3, #0]
 806b8d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 806b8d6:	89fb      	ldrh	r3, [r7, #14]
 806b8d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 806b8dc:	d101      	bne.n	806b8e2 <dec_lock+0x2e>
 806b8de:	2300      	movs	r3, #0
 806b8e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 806b8e2:	89fb      	ldrh	r3, [r7, #14]
 806b8e4:	2b00      	cmp	r3, #0
 806b8e6:	d002      	beq.n	806b8ee <dec_lock+0x3a>
 806b8e8:	89fb      	ldrh	r3, [r7, #14]
 806b8ea:	3b01      	subs	r3, #1
 806b8ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 806b8ee:	4a0e      	ldr	r2, [pc, #56]	; (806b928 <dec_lock+0x74>)
 806b8f0:	687b      	ldr	r3, [r7, #4]
 806b8f2:	011b      	lsls	r3, r3, #4
 806b8f4:	4413      	add	r3, r2
 806b8f6:	330c      	adds	r3, #12
 806b8f8:	89fa      	ldrh	r2, [r7, #14]
 806b8fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 806b8fc:	89fb      	ldrh	r3, [r7, #14]
 806b8fe:	2b00      	cmp	r3, #0
 806b900:	d105      	bne.n	806b90e <dec_lock+0x5a>
 806b902:	4a09      	ldr	r2, [pc, #36]	; (806b928 <dec_lock+0x74>)
 806b904:	687b      	ldr	r3, [r7, #4]
 806b906:	011b      	lsls	r3, r3, #4
 806b908:	4413      	add	r3, r2
 806b90a:	2200      	movs	r2, #0
 806b90c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 806b90e:	2300      	movs	r3, #0
 806b910:	737b      	strb	r3, [r7, #13]
 806b912:	e001      	b.n	806b918 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 806b914:	2302      	movs	r3, #2
 806b916:	737b      	strb	r3, [r7, #13]
	}
	return res;
 806b918:	7b7b      	ldrb	r3, [r7, #13]
}
 806b91a:	4618      	mov	r0, r3
 806b91c:	3714      	adds	r7, #20
 806b91e:	46bd      	mov	sp, r7
 806b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b924:	4770      	bx	lr
 806b926:	bf00      	nop
 806b928:	2000042c 	.word	0x2000042c

0806b92c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 806b92c:	b480      	push	{r7}
 806b92e:	b085      	sub	sp, #20
 806b930:	af00      	add	r7, sp, #0
 806b932:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 806b934:	2300      	movs	r3, #0
 806b936:	60fb      	str	r3, [r7, #12]
 806b938:	e010      	b.n	806b95c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 806b93a:	4a0d      	ldr	r2, [pc, #52]	; (806b970 <clear_lock+0x44>)
 806b93c:	68fb      	ldr	r3, [r7, #12]
 806b93e:	011b      	lsls	r3, r3, #4
 806b940:	4413      	add	r3, r2
 806b942:	681b      	ldr	r3, [r3, #0]
 806b944:	687a      	ldr	r2, [r7, #4]
 806b946:	429a      	cmp	r2, r3
 806b948:	d105      	bne.n	806b956 <clear_lock+0x2a>
 806b94a:	4a09      	ldr	r2, [pc, #36]	; (806b970 <clear_lock+0x44>)
 806b94c:	68fb      	ldr	r3, [r7, #12]
 806b94e:	011b      	lsls	r3, r3, #4
 806b950:	4413      	add	r3, r2
 806b952:	2200      	movs	r2, #0
 806b954:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 806b956:	68fb      	ldr	r3, [r7, #12]
 806b958:	3301      	adds	r3, #1
 806b95a:	60fb      	str	r3, [r7, #12]
 806b95c:	68fb      	ldr	r3, [r7, #12]
 806b95e:	2b01      	cmp	r3, #1
 806b960:	d9eb      	bls.n	806b93a <clear_lock+0xe>
	}
}
 806b962:	bf00      	nop
 806b964:	bf00      	nop
 806b966:	3714      	adds	r7, #20
 806b968:	46bd      	mov	sp, r7
 806b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806b96e:	4770      	bx	lr
 806b970:	2000042c 	.word	0x2000042c

0806b974 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 806b974:	b580      	push	{r7, lr}
 806b976:	b086      	sub	sp, #24
 806b978:	af00      	add	r7, sp, #0
 806b97a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 806b97c:	2300      	movs	r3, #0
 806b97e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 806b980:	687b      	ldr	r3, [r7, #4]
 806b982:	78db      	ldrb	r3, [r3, #3]
 806b984:	2b00      	cmp	r3, #0
 806b986:	d034      	beq.n	806b9f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 806b988:	687b      	ldr	r3, [r7, #4]
 806b98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806b98c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 806b98e:	687b      	ldr	r3, [r7, #4]
 806b990:	7858      	ldrb	r0, [r3, #1]
 806b992:	687b      	ldr	r3, [r7, #4]
 806b994:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806b998:	2301      	movs	r3, #1
 806b99a:	697a      	ldr	r2, [r7, #20]
 806b99c:	f7ff fd0e 	bl	806b3bc <disk_write>
 806b9a0:	4603      	mov	r3, r0
 806b9a2:	2b00      	cmp	r3, #0
 806b9a4:	d002      	beq.n	806b9ac <sync_window+0x38>
			res = FR_DISK_ERR;
 806b9a6:	2301      	movs	r3, #1
 806b9a8:	73fb      	strb	r3, [r7, #15]
 806b9aa:	e022      	b.n	806b9f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 806b9ac:	687b      	ldr	r3, [r7, #4]
 806b9ae:	2200      	movs	r2, #0
 806b9b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 806b9b2:	687b      	ldr	r3, [r7, #4]
 806b9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806b9b6:	697a      	ldr	r2, [r7, #20]
 806b9b8:	1ad2      	subs	r2, r2, r3
 806b9ba:	687b      	ldr	r3, [r7, #4]
 806b9bc:	69db      	ldr	r3, [r3, #28]
 806b9be:	429a      	cmp	r2, r3
 806b9c0:	d217      	bcs.n	806b9f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 806b9c2:	687b      	ldr	r3, [r7, #4]
 806b9c4:	789b      	ldrb	r3, [r3, #2]
 806b9c6:	613b      	str	r3, [r7, #16]
 806b9c8:	e010      	b.n	806b9ec <sync_window+0x78>
					wsect += fs->fsize;
 806b9ca:	687b      	ldr	r3, [r7, #4]
 806b9cc:	69db      	ldr	r3, [r3, #28]
 806b9ce:	697a      	ldr	r2, [r7, #20]
 806b9d0:	4413      	add	r3, r2
 806b9d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 806b9d4:	687b      	ldr	r3, [r7, #4]
 806b9d6:	7858      	ldrb	r0, [r3, #1]
 806b9d8:	687b      	ldr	r3, [r7, #4]
 806b9da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806b9de:	2301      	movs	r3, #1
 806b9e0:	697a      	ldr	r2, [r7, #20]
 806b9e2:	f7ff fceb 	bl	806b3bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 806b9e6:	693b      	ldr	r3, [r7, #16]
 806b9e8:	3b01      	subs	r3, #1
 806b9ea:	613b      	str	r3, [r7, #16]
 806b9ec:	693b      	ldr	r3, [r7, #16]
 806b9ee:	2b01      	cmp	r3, #1
 806b9f0:	d8eb      	bhi.n	806b9ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 806b9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 806b9f4:	4618      	mov	r0, r3
 806b9f6:	3718      	adds	r7, #24
 806b9f8:	46bd      	mov	sp, r7
 806b9fa:	bd80      	pop	{r7, pc}

0806b9fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 806b9fc:	b580      	push	{r7, lr}
 806b9fe:	b084      	sub	sp, #16
 806ba00:	af00      	add	r7, sp, #0
 806ba02:	6078      	str	r0, [r7, #4]
 806ba04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 806ba06:	2300      	movs	r3, #0
 806ba08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 806ba0a:	687b      	ldr	r3, [r7, #4]
 806ba0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806ba0e:	683a      	ldr	r2, [r7, #0]
 806ba10:	429a      	cmp	r2, r3
 806ba12:	d01b      	beq.n	806ba4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 806ba14:	6878      	ldr	r0, [r7, #4]
 806ba16:	f7ff ffad 	bl	806b974 <sync_window>
 806ba1a:	4603      	mov	r3, r0
 806ba1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 806ba1e:	7bfb      	ldrb	r3, [r7, #15]
 806ba20:	2b00      	cmp	r3, #0
 806ba22:	d113      	bne.n	806ba4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 806ba24:	687b      	ldr	r3, [r7, #4]
 806ba26:	7858      	ldrb	r0, [r3, #1]
 806ba28:	687b      	ldr	r3, [r7, #4]
 806ba2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806ba2e:	2301      	movs	r3, #1
 806ba30:	683a      	ldr	r2, [r7, #0]
 806ba32:	f7ff fca3 	bl	806b37c <disk_read>
 806ba36:	4603      	mov	r3, r0
 806ba38:	2b00      	cmp	r3, #0
 806ba3a:	d004      	beq.n	806ba46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 806ba3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806ba40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 806ba42:	2301      	movs	r3, #1
 806ba44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 806ba46:	687b      	ldr	r3, [r7, #4]
 806ba48:	683a      	ldr	r2, [r7, #0]
 806ba4a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 806ba4c:	7bfb      	ldrb	r3, [r7, #15]
}
 806ba4e:	4618      	mov	r0, r3
 806ba50:	3710      	adds	r7, #16
 806ba52:	46bd      	mov	sp, r7
 806ba54:	bd80      	pop	{r7, pc}
	...

0806ba58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 806ba58:	b580      	push	{r7, lr}
 806ba5a:	b084      	sub	sp, #16
 806ba5c:	af00      	add	r7, sp, #0
 806ba5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 806ba60:	6878      	ldr	r0, [r7, #4]
 806ba62:	f7ff ff87 	bl	806b974 <sync_window>
 806ba66:	4603      	mov	r3, r0
 806ba68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 806ba6a:	7bfb      	ldrb	r3, [r7, #15]
 806ba6c:	2b00      	cmp	r3, #0
 806ba6e:	d158      	bne.n	806bb22 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 806ba70:	687b      	ldr	r3, [r7, #4]
 806ba72:	781b      	ldrb	r3, [r3, #0]
 806ba74:	2b03      	cmp	r3, #3
 806ba76:	d148      	bne.n	806bb0a <sync_fs+0xb2>
 806ba78:	687b      	ldr	r3, [r7, #4]
 806ba7a:	791b      	ldrb	r3, [r3, #4]
 806ba7c:	2b01      	cmp	r3, #1
 806ba7e:	d144      	bne.n	806bb0a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 806ba80:	687b      	ldr	r3, [r7, #4]
 806ba82:	3334      	adds	r3, #52	; 0x34
 806ba84:	f44f 7200 	mov.w	r2, #512	; 0x200
 806ba88:	2100      	movs	r1, #0
 806ba8a:	4618      	mov	r0, r3
 806ba8c:	f7ff fd77 	bl	806b57e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 806ba90:	687b      	ldr	r3, [r7, #4]
 806ba92:	3334      	adds	r3, #52	; 0x34
 806ba94:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 806ba98:	f64a 2155 	movw	r1, #43605	; 0xaa55
 806ba9c:	4618      	mov	r0, r3
 806ba9e:	f7ff fd06 	bl	806b4ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 806baa2:	687b      	ldr	r3, [r7, #4]
 806baa4:	3334      	adds	r3, #52	; 0x34
 806baa6:	4921      	ldr	r1, [pc, #132]	; (806bb2c <sync_fs+0xd4>)
 806baa8:	4618      	mov	r0, r3
 806baaa:	f7ff fd1b 	bl	806b4e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 806baae:	687b      	ldr	r3, [r7, #4]
 806bab0:	3334      	adds	r3, #52	; 0x34
 806bab2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 806bab6:	491e      	ldr	r1, [pc, #120]	; (806bb30 <sync_fs+0xd8>)
 806bab8:	4618      	mov	r0, r3
 806baba:	f7ff fd13 	bl	806b4e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 806babe:	687b      	ldr	r3, [r7, #4]
 806bac0:	3334      	adds	r3, #52	; 0x34
 806bac2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 806bac6:	687b      	ldr	r3, [r7, #4]
 806bac8:	695b      	ldr	r3, [r3, #20]
 806baca:	4619      	mov	r1, r3
 806bacc:	4610      	mov	r0, r2
 806bace:	f7ff fd09 	bl	806b4e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 806bad2:	687b      	ldr	r3, [r7, #4]
 806bad4:	3334      	adds	r3, #52	; 0x34
 806bad6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 806bada:	687b      	ldr	r3, [r7, #4]
 806badc:	691b      	ldr	r3, [r3, #16]
 806bade:	4619      	mov	r1, r3
 806bae0:	4610      	mov	r0, r2
 806bae2:	f7ff fcff 	bl	806b4e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 806bae6:	687b      	ldr	r3, [r7, #4]
 806bae8:	6a1b      	ldr	r3, [r3, #32]
 806baea:	1c5a      	adds	r2, r3, #1
 806baec:	687b      	ldr	r3, [r7, #4]
 806baee:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 806baf0:	687b      	ldr	r3, [r7, #4]
 806baf2:	7858      	ldrb	r0, [r3, #1]
 806baf4:	687b      	ldr	r3, [r7, #4]
 806baf6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 806bafa:	687b      	ldr	r3, [r7, #4]
 806bafc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806bafe:	2301      	movs	r3, #1
 806bb00:	f7ff fc5c 	bl	806b3bc <disk_write>
			fs->fsi_flag = 0;
 806bb04:	687b      	ldr	r3, [r7, #4]
 806bb06:	2200      	movs	r2, #0
 806bb08:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 806bb0a:	687b      	ldr	r3, [r7, #4]
 806bb0c:	785b      	ldrb	r3, [r3, #1]
 806bb0e:	2200      	movs	r2, #0
 806bb10:	2100      	movs	r1, #0
 806bb12:	4618      	mov	r0, r3
 806bb14:	f7ff fc72 	bl	806b3fc <disk_ioctl>
 806bb18:	4603      	mov	r3, r0
 806bb1a:	2b00      	cmp	r3, #0
 806bb1c:	d001      	beq.n	806bb22 <sync_fs+0xca>
 806bb1e:	2301      	movs	r3, #1
 806bb20:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 806bb22:	7bfb      	ldrb	r3, [r7, #15]
}
 806bb24:	4618      	mov	r0, r3
 806bb26:	3710      	adds	r7, #16
 806bb28:	46bd      	mov	sp, r7
 806bb2a:	bd80      	pop	{r7, pc}
 806bb2c:	41615252 	.word	0x41615252
 806bb30:	61417272 	.word	0x61417272

0806bb34 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 806bb34:	b480      	push	{r7}
 806bb36:	b083      	sub	sp, #12
 806bb38:	af00      	add	r7, sp, #0
 806bb3a:	6078      	str	r0, [r7, #4]
 806bb3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 806bb3e:	683b      	ldr	r3, [r7, #0]
 806bb40:	3b02      	subs	r3, #2
 806bb42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 806bb44:	687b      	ldr	r3, [r7, #4]
 806bb46:	699b      	ldr	r3, [r3, #24]
 806bb48:	3b02      	subs	r3, #2
 806bb4a:	683a      	ldr	r2, [r7, #0]
 806bb4c:	429a      	cmp	r2, r3
 806bb4e:	d301      	bcc.n	806bb54 <clust2sect+0x20>
 806bb50:	2300      	movs	r3, #0
 806bb52:	e008      	b.n	806bb66 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 806bb54:	687b      	ldr	r3, [r7, #4]
 806bb56:	895b      	ldrh	r3, [r3, #10]
 806bb58:	461a      	mov	r2, r3
 806bb5a:	683b      	ldr	r3, [r7, #0]
 806bb5c:	fb03 f202 	mul.w	r2, r3, r2
 806bb60:	687b      	ldr	r3, [r7, #4]
 806bb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806bb64:	4413      	add	r3, r2
}
 806bb66:	4618      	mov	r0, r3
 806bb68:	370c      	adds	r7, #12
 806bb6a:	46bd      	mov	sp, r7
 806bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 806bb70:	4770      	bx	lr

0806bb72 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 806bb72:	b580      	push	{r7, lr}
 806bb74:	b086      	sub	sp, #24
 806bb76:	af00      	add	r7, sp, #0
 806bb78:	6078      	str	r0, [r7, #4]
 806bb7a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 806bb7c:	687b      	ldr	r3, [r7, #4]
 806bb7e:	681b      	ldr	r3, [r3, #0]
 806bb80:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 806bb82:	683b      	ldr	r3, [r7, #0]
 806bb84:	2b01      	cmp	r3, #1
 806bb86:	d904      	bls.n	806bb92 <get_fat+0x20>
 806bb88:	693b      	ldr	r3, [r7, #16]
 806bb8a:	699b      	ldr	r3, [r3, #24]
 806bb8c:	683a      	ldr	r2, [r7, #0]
 806bb8e:	429a      	cmp	r2, r3
 806bb90:	d302      	bcc.n	806bb98 <get_fat+0x26>
		val = 1;	/* Internal error */
 806bb92:	2301      	movs	r3, #1
 806bb94:	617b      	str	r3, [r7, #20]
 806bb96:	e08f      	b.n	806bcb8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 806bb98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806bb9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 806bb9e:	693b      	ldr	r3, [r7, #16]
 806bba0:	781b      	ldrb	r3, [r3, #0]
 806bba2:	2b03      	cmp	r3, #3
 806bba4:	d062      	beq.n	806bc6c <get_fat+0xfa>
 806bba6:	2b03      	cmp	r3, #3
 806bba8:	dc7c      	bgt.n	806bca4 <get_fat+0x132>
 806bbaa:	2b01      	cmp	r3, #1
 806bbac:	d002      	beq.n	806bbb4 <get_fat+0x42>
 806bbae:	2b02      	cmp	r3, #2
 806bbb0:	d042      	beq.n	806bc38 <get_fat+0xc6>
 806bbb2:	e077      	b.n	806bca4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 806bbb4:	683b      	ldr	r3, [r7, #0]
 806bbb6:	60fb      	str	r3, [r7, #12]
 806bbb8:	68fb      	ldr	r3, [r7, #12]
 806bbba:	085b      	lsrs	r3, r3, #1
 806bbbc:	68fa      	ldr	r2, [r7, #12]
 806bbbe:	4413      	add	r3, r2
 806bbc0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806bbc2:	693b      	ldr	r3, [r7, #16]
 806bbc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bbc6:	68fb      	ldr	r3, [r7, #12]
 806bbc8:	0a5b      	lsrs	r3, r3, #9
 806bbca:	4413      	add	r3, r2
 806bbcc:	4619      	mov	r1, r3
 806bbce:	6938      	ldr	r0, [r7, #16]
 806bbd0:	f7ff ff14 	bl	806b9fc <move_window>
 806bbd4:	4603      	mov	r3, r0
 806bbd6:	2b00      	cmp	r3, #0
 806bbd8:	d167      	bne.n	806bcaa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 806bbda:	68fb      	ldr	r3, [r7, #12]
 806bbdc:	1c5a      	adds	r2, r3, #1
 806bbde:	60fa      	str	r2, [r7, #12]
 806bbe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bbe4:	693a      	ldr	r2, [r7, #16]
 806bbe6:	4413      	add	r3, r2
 806bbe8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806bbec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806bbee:	693b      	ldr	r3, [r7, #16]
 806bbf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bbf2:	68fb      	ldr	r3, [r7, #12]
 806bbf4:	0a5b      	lsrs	r3, r3, #9
 806bbf6:	4413      	add	r3, r2
 806bbf8:	4619      	mov	r1, r3
 806bbfa:	6938      	ldr	r0, [r7, #16]
 806bbfc:	f7ff fefe 	bl	806b9fc <move_window>
 806bc00:	4603      	mov	r3, r0
 806bc02:	2b00      	cmp	r3, #0
 806bc04:	d153      	bne.n	806bcae <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 806bc06:	68fb      	ldr	r3, [r7, #12]
 806bc08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bc0c:	693a      	ldr	r2, [r7, #16]
 806bc0e:	4413      	add	r3, r2
 806bc10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806bc14:	021b      	lsls	r3, r3, #8
 806bc16:	461a      	mov	r2, r3
 806bc18:	68bb      	ldr	r3, [r7, #8]
 806bc1a:	4313      	orrs	r3, r2
 806bc1c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 806bc1e:	683b      	ldr	r3, [r7, #0]
 806bc20:	f003 0301 	and.w	r3, r3, #1
 806bc24:	2b00      	cmp	r3, #0
 806bc26:	d002      	beq.n	806bc2e <get_fat+0xbc>
 806bc28:	68bb      	ldr	r3, [r7, #8]
 806bc2a:	091b      	lsrs	r3, r3, #4
 806bc2c:	e002      	b.n	806bc34 <get_fat+0xc2>
 806bc2e:	68bb      	ldr	r3, [r7, #8]
 806bc30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 806bc34:	617b      	str	r3, [r7, #20]
			break;
 806bc36:	e03f      	b.n	806bcb8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 806bc38:	693b      	ldr	r3, [r7, #16]
 806bc3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bc3c:	683b      	ldr	r3, [r7, #0]
 806bc3e:	0a1b      	lsrs	r3, r3, #8
 806bc40:	4413      	add	r3, r2
 806bc42:	4619      	mov	r1, r3
 806bc44:	6938      	ldr	r0, [r7, #16]
 806bc46:	f7ff fed9 	bl	806b9fc <move_window>
 806bc4a:	4603      	mov	r3, r0
 806bc4c:	2b00      	cmp	r3, #0
 806bc4e:	d130      	bne.n	806bcb2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 806bc50:	693b      	ldr	r3, [r7, #16]
 806bc52:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bc56:	683b      	ldr	r3, [r7, #0]
 806bc58:	005b      	lsls	r3, r3, #1
 806bc5a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 806bc5e:	4413      	add	r3, r2
 806bc60:	4618      	mov	r0, r3
 806bc62:	f7ff fbe9 	bl	806b438 <ld_word>
 806bc66:	4603      	mov	r3, r0
 806bc68:	617b      	str	r3, [r7, #20]
			break;
 806bc6a:	e025      	b.n	806bcb8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 806bc6c:	693b      	ldr	r3, [r7, #16]
 806bc6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bc70:	683b      	ldr	r3, [r7, #0]
 806bc72:	09db      	lsrs	r3, r3, #7
 806bc74:	4413      	add	r3, r2
 806bc76:	4619      	mov	r1, r3
 806bc78:	6938      	ldr	r0, [r7, #16]
 806bc7a:	f7ff febf 	bl	806b9fc <move_window>
 806bc7e:	4603      	mov	r3, r0
 806bc80:	2b00      	cmp	r3, #0
 806bc82:	d118      	bne.n	806bcb6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 806bc84:	693b      	ldr	r3, [r7, #16]
 806bc86:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bc8a:	683b      	ldr	r3, [r7, #0]
 806bc8c:	009b      	lsls	r3, r3, #2
 806bc8e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 806bc92:	4413      	add	r3, r2
 806bc94:	4618      	mov	r0, r3
 806bc96:	f7ff fbe7 	bl	806b468 <ld_dword>
 806bc9a:	4603      	mov	r3, r0
 806bc9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 806bca0:	617b      	str	r3, [r7, #20]
			break;
 806bca2:	e009      	b.n	806bcb8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 806bca4:	2301      	movs	r3, #1
 806bca6:	617b      	str	r3, [r7, #20]
 806bca8:	e006      	b.n	806bcb8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806bcaa:	bf00      	nop
 806bcac:	e004      	b.n	806bcb8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 806bcae:	bf00      	nop
 806bcb0:	e002      	b.n	806bcb8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 806bcb2:	bf00      	nop
 806bcb4:	e000      	b.n	806bcb8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 806bcb6:	bf00      	nop
		}
	}

	return val;
 806bcb8:	697b      	ldr	r3, [r7, #20]
}
 806bcba:	4618      	mov	r0, r3
 806bcbc:	3718      	adds	r7, #24
 806bcbe:	46bd      	mov	sp, r7
 806bcc0:	bd80      	pop	{r7, pc}

0806bcc2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 806bcc2:	b590      	push	{r4, r7, lr}
 806bcc4:	b089      	sub	sp, #36	; 0x24
 806bcc6:	af00      	add	r7, sp, #0
 806bcc8:	60f8      	str	r0, [r7, #12]
 806bcca:	60b9      	str	r1, [r7, #8]
 806bccc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 806bcce:	2302      	movs	r3, #2
 806bcd0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 806bcd2:	68bb      	ldr	r3, [r7, #8]
 806bcd4:	2b01      	cmp	r3, #1
 806bcd6:	f240 80d2 	bls.w	806be7e <put_fat+0x1bc>
 806bcda:	68fb      	ldr	r3, [r7, #12]
 806bcdc:	699b      	ldr	r3, [r3, #24]
 806bcde:	68ba      	ldr	r2, [r7, #8]
 806bce0:	429a      	cmp	r2, r3
 806bce2:	f080 80cc 	bcs.w	806be7e <put_fat+0x1bc>
		switch (fs->fs_type) {
 806bce6:	68fb      	ldr	r3, [r7, #12]
 806bce8:	781b      	ldrb	r3, [r3, #0]
 806bcea:	2b03      	cmp	r3, #3
 806bcec:	f000 8096 	beq.w	806be1c <put_fat+0x15a>
 806bcf0:	2b03      	cmp	r3, #3
 806bcf2:	f300 80cd 	bgt.w	806be90 <put_fat+0x1ce>
 806bcf6:	2b01      	cmp	r3, #1
 806bcf8:	d002      	beq.n	806bd00 <put_fat+0x3e>
 806bcfa:	2b02      	cmp	r3, #2
 806bcfc:	d06e      	beq.n	806bddc <put_fat+0x11a>
 806bcfe:	e0c7      	b.n	806be90 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 806bd00:	68bb      	ldr	r3, [r7, #8]
 806bd02:	61bb      	str	r3, [r7, #24]
 806bd04:	69bb      	ldr	r3, [r7, #24]
 806bd06:	085b      	lsrs	r3, r3, #1
 806bd08:	69ba      	ldr	r2, [r7, #24]
 806bd0a:	4413      	add	r3, r2
 806bd0c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 806bd0e:	68fb      	ldr	r3, [r7, #12]
 806bd10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bd12:	69bb      	ldr	r3, [r7, #24]
 806bd14:	0a5b      	lsrs	r3, r3, #9
 806bd16:	4413      	add	r3, r2
 806bd18:	4619      	mov	r1, r3
 806bd1a:	68f8      	ldr	r0, [r7, #12]
 806bd1c:	f7ff fe6e 	bl	806b9fc <move_window>
 806bd20:	4603      	mov	r3, r0
 806bd22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806bd24:	7ffb      	ldrb	r3, [r7, #31]
 806bd26:	2b00      	cmp	r3, #0
 806bd28:	f040 80ab 	bne.w	806be82 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 806bd2c:	68fb      	ldr	r3, [r7, #12]
 806bd2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bd32:	69bb      	ldr	r3, [r7, #24]
 806bd34:	1c59      	adds	r1, r3, #1
 806bd36:	61b9      	str	r1, [r7, #24]
 806bd38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bd3c:	4413      	add	r3, r2
 806bd3e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 806bd40:	68bb      	ldr	r3, [r7, #8]
 806bd42:	f003 0301 	and.w	r3, r3, #1
 806bd46:	2b00      	cmp	r3, #0
 806bd48:	d00d      	beq.n	806bd66 <put_fat+0xa4>
 806bd4a:	697b      	ldr	r3, [r7, #20]
 806bd4c:	781b      	ldrb	r3, [r3, #0]
 806bd4e:	b25b      	sxtb	r3, r3
 806bd50:	f003 030f 	and.w	r3, r3, #15
 806bd54:	b25a      	sxtb	r2, r3
 806bd56:	687b      	ldr	r3, [r7, #4]
 806bd58:	b2db      	uxtb	r3, r3
 806bd5a:	011b      	lsls	r3, r3, #4
 806bd5c:	b25b      	sxtb	r3, r3
 806bd5e:	4313      	orrs	r3, r2
 806bd60:	b25b      	sxtb	r3, r3
 806bd62:	b2db      	uxtb	r3, r3
 806bd64:	e001      	b.n	806bd6a <put_fat+0xa8>
 806bd66:	687b      	ldr	r3, [r7, #4]
 806bd68:	b2db      	uxtb	r3, r3
 806bd6a:	697a      	ldr	r2, [r7, #20]
 806bd6c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 806bd6e:	68fb      	ldr	r3, [r7, #12]
 806bd70:	2201      	movs	r2, #1
 806bd72:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 806bd74:	68fb      	ldr	r3, [r7, #12]
 806bd76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bd78:	69bb      	ldr	r3, [r7, #24]
 806bd7a:	0a5b      	lsrs	r3, r3, #9
 806bd7c:	4413      	add	r3, r2
 806bd7e:	4619      	mov	r1, r3
 806bd80:	68f8      	ldr	r0, [r7, #12]
 806bd82:	f7ff fe3b 	bl	806b9fc <move_window>
 806bd86:	4603      	mov	r3, r0
 806bd88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806bd8a:	7ffb      	ldrb	r3, [r7, #31]
 806bd8c:	2b00      	cmp	r3, #0
 806bd8e:	d17a      	bne.n	806be86 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 806bd90:	68fb      	ldr	r3, [r7, #12]
 806bd92:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bd96:	69bb      	ldr	r3, [r7, #24]
 806bd98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806bd9c:	4413      	add	r3, r2
 806bd9e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 806bda0:	68bb      	ldr	r3, [r7, #8]
 806bda2:	f003 0301 	and.w	r3, r3, #1
 806bda6:	2b00      	cmp	r3, #0
 806bda8:	d003      	beq.n	806bdb2 <put_fat+0xf0>
 806bdaa:	687b      	ldr	r3, [r7, #4]
 806bdac:	091b      	lsrs	r3, r3, #4
 806bdae:	b2db      	uxtb	r3, r3
 806bdb0:	e00e      	b.n	806bdd0 <put_fat+0x10e>
 806bdb2:	697b      	ldr	r3, [r7, #20]
 806bdb4:	781b      	ldrb	r3, [r3, #0]
 806bdb6:	b25b      	sxtb	r3, r3
 806bdb8:	f023 030f 	bic.w	r3, r3, #15
 806bdbc:	b25a      	sxtb	r2, r3
 806bdbe:	687b      	ldr	r3, [r7, #4]
 806bdc0:	0a1b      	lsrs	r3, r3, #8
 806bdc2:	b25b      	sxtb	r3, r3
 806bdc4:	f003 030f 	and.w	r3, r3, #15
 806bdc8:	b25b      	sxtb	r3, r3
 806bdca:	4313      	orrs	r3, r2
 806bdcc:	b25b      	sxtb	r3, r3
 806bdce:	b2db      	uxtb	r3, r3
 806bdd0:	697a      	ldr	r2, [r7, #20]
 806bdd2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 806bdd4:	68fb      	ldr	r3, [r7, #12]
 806bdd6:	2201      	movs	r2, #1
 806bdd8:	70da      	strb	r2, [r3, #3]
			break;
 806bdda:	e059      	b.n	806be90 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 806bddc:	68fb      	ldr	r3, [r7, #12]
 806bdde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806bde0:	68bb      	ldr	r3, [r7, #8]
 806bde2:	0a1b      	lsrs	r3, r3, #8
 806bde4:	4413      	add	r3, r2
 806bde6:	4619      	mov	r1, r3
 806bde8:	68f8      	ldr	r0, [r7, #12]
 806bdea:	f7ff fe07 	bl	806b9fc <move_window>
 806bdee:	4603      	mov	r3, r0
 806bdf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806bdf2:	7ffb      	ldrb	r3, [r7, #31]
 806bdf4:	2b00      	cmp	r3, #0
 806bdf6:	d148      	bne.n	806be8a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 806bdf8:	68fb      	ldr	r3, [r7, #12]
 806bdfa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806bdfe:	68bb      	ldr	r3, [r7, #8]
 806be00:	005b      	lsls	r3, r3, #1
 806be02:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 806be06:	4413      	add	r3, r2
 806be08:	687a      	ldr	r2, [r7, #4]
 806be0a:	b292      	uxth	r2, r2
 806be0c:	4611      	mov	r1, r2
 806be0e:	4618      	mov	r0, r3
 806be10:	f7ff fb4d 	bl	806b4ae <st_word>
			fs->wflag = 1;
 806be14:	68fb      	ldr	r3, [r7, #12]
 806be16:	2201      	movs	r2, #1
 806be18:	70da      	strb	r2, [r3, #3]
			break;
 806be1a:	e039      	b.n	806be90 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 806be1c:	68fb      	ldr	r3, [r7, #12]
 806be1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806be20:	68bb      	ldr	r3, [r7, #8]
 806be22:	09db      	lsrs	r3, r3, #7
 806be24:	4413      	add	r3, r2
 806be26:	4619      	mov	r1, r3
 806be28:	68f8      	ldr	r0, [r7, #12]
 806be2a:	f7ff fde7 	bl	806b9fc <move_window>
 806be2e:	4603      	mov	r3, r0
 806be30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 806be32:	7ffb      	ldrb	r3, [r7, #31]
 806be34:	2b00      	cmp	r3, #0
 806be36:	d12a      	bne.n	806be8e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 806be38:	687b      	ldr	r3, [r7, #4]
 806be3a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 806be3e:	68fb      	ldr	r3, [r7, #12]
 806be40:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806be44:	68bb      	ldr	r3, [r7, #8]
 806be46:	009b      	lsls	r3, r3, #2
 806be48:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 806be4c:	4413      	add	r3, r2
 806be4e:	4618      	mov	r0, r3
 806be50:	f7ff fb0a 	bl	806b468 <ld_dword>
 806be54:	4603      	mov	r3, r0
 806be56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 806be5a:	4323      	orrs	r3, r4
 806be5c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 806be5e:	68fb      	ldr	r3, [r7, #12]
 806be60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806be64:	68bb      	ldr	r3, [r7, #8]
 806be66:	009b      	lsls	r3, r3, #2
 806be68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 806be6c:	4413      	add	r3, r2
 806be6e:	6879      	ldr	r1, [r7, #4]
 806be70:	4618      	mov	r0, r3
 806be72:	f7ff fb37 	bl	806b4e4 <st_dword>
			fs->wflag = 1;
 806be76:	68fb      	ldr	r3, [r7, #12]
 806be78:	2201      	movs	r2, #1
 806be7a:	70da      	strb	r2, [r3, #3]
			break;
 806be7c:	e008      	b.n	806be90 <put_fat+0x1ce>
		}
	}
 806be7e:	bf00      	nop
 806be80:	e006      	b.n	806be90 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806be82:	bf00      	nop
 806be84:	e004      	b.n	806be90 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806be86:	bf00      	nop
 806be88:	e002      	b.n	806be90 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806be8a:	bf00      	nop
 806be8c:	e000      	b.n	806be90 <put_fat+0x1ce>
			if (res != FR_OK) break;
 806be8e:	bf00      	nop
	return res;
 806be90:	7ffb      	ldrb	r3, [r7, #31]
}
 806be92:	4618      	mov	r0, r3
 806be94:	3724      	adds	r7, #36	; 0x24
 806be96:	46bd      	mov	sp, r7
 806be98:	bd90      	pop	{r4, r7, pc}

0806be9a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 806be9a:	b580      	push	{r7, lr}
 806be9c:	b088      	sub	sp, #32
 806be9e:	af00      	add	r7, sp, #0
 806bea0:	60f8      	str	r0, [r7, #12]
 806bea2:	60b9      	str	r1, [r7, #8]
 806bea4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 806bea6:	2300      	movs	r3, #0
 806bea8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 806beaa:	68fb      	ldr	r3, [r7, #12]
 806beac:	681b      	ldr	r3, [r3, #0]
 806beae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 806beb0:	68bb      	ldr	r3, [r7, #8]
 806beb2:	2b01      	cmp	r3, #1
 806beb4:	d904      	bls.n	806bec0 <remove_chain+0x26>
 806beb6:	69bb      	ldr	r3, [r7, #24]
 806beb8:	699b      	ldr	r3, [r3, #24]
 806beba:	68ba      	ldr	r2, [r7, #8]
 806bebc:	429a      	cmp	r2, r3
 806bebe:	d301      	bcc.n	806bec4 <remove_chain+0x2a>
 806bec0:	2302      	movs	r3, #2
 806bec2:	e04b      	b.n	806bf5c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 806bec4:	687b      	ldr	r3, [r7, #4]
 806bec6:	2b00      	cmp	r3, #0
 806bec8:	d00c      	beq.n	806bee4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 806beca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806bece:	6879      	ldr	r1, [r7, #4]
 806bed0:	69b8      	ldr	r0, [r7, #24]
 806bed2:	f7ff fef6 	bl	806bcc2 <put_fat>
 806bed6:	4603      	mov	r3, r0
 806bed8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 806beda:	7ffb      	ldrb	r3, [r7, #31]
 806bedc:	2b00      	cmp	r3, #0
 806bede:	d001      	beq.n	806bee4 <remove_chain+0x4a>
 806bee0:	7ffb      	ldrb	r3, [r7, #31]
 806bee2:	e03b      	b.n	806bf5c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 806bee4:	68b9      	ldr	r1, [r7, #8]
 806bee6:	68f8      	ldr	r0, [r7, #12]
 806bee8:	f7ff fe43 	bl	806bb72 <get_fat>
 806beec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 806beee:	697b      	ldr	r3, [r7, #20]
 806bef0:	2b00      	cmp	r3, #0
 806bef2:	d031      	beq.n	806bf58 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 806bef4:	697b      	ldr	r3, [r7, #20]
 806bef6:	2b01      	cmp	r3, #1
 806bef8:	d101      	bne.n	806befe <remove_chain+0x64>
 806befa:	2302      	movs	r3, #2
 806befc:	e02e      	b.n	806bf5c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 806befe:	697b      	ldr	r3, [r7, #20]
 806bf00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806bf04:	d101      	bne.n	806bf0a <remove_chain+0x70>
 806bf06:	2301      	movs	r3, #1
 806bf08:	e028      	b.n	806bf5c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 806bf0a:	2200      	movs	r2, #0
 806bf0c:	68b9      	ldr	r1, [r7, #8]
 806bf0e:	69b8      	ldr	r0, [r7, #24]
 806bf10:	f7ff fed7 	bl	806bcc2 <put_fat>
 806bf14:	4603      	mov	r3, r0
 806bf16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 806bf18:	7ffb      	ldrb	r3, [r7, #31]
 806bf1a:	2b00      	cmp	r3, #0
 806bf1c:	d001      	beq.n	806bf22 <remove_chain+0x88>
 806bf1e:	7ffb      	ldrb	r3, [r7, #31]
 806bf20:	e01c      	b.n	806bf5c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 806bf22:	69bb      	ldr	r3, [r7, #24]
 806bf24:	695a      	ldr	r2, [r3, #20]
 806bf26:	69bb      	ldr	r3, [r7, #24]
 806bf28:	699b      	ldr	r3, [r3, #24]
 806bf2a:	3b02      	subs	r3, #2
 806bf2c:	429a      	cmp	r2, r3
 806bf2e:	d20b      	bcs.n	806bf48 <remove_chain+0xae>
			fs->free_clst++;
 806bf30:	69bb      	ldr	r3, [r7, #24]
 806bf32:	695b      	ldr	r3, [r3, #20]
 806bf34:	1c5a      	adds	r2, r3, #1
 806bf36:	69bb      	ldr	r3, [r7, #24]
 806bf38:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 806bf3a:	69bb      	ldr	r3, [r7, #24]
 806bf3c:	791b      	ldrb	r3, [r3, #4]
 806bf3e:	f043 0301 	orr.w	r3, r3, #1
 806bf42:	b2da      	uxtb	r2, r3
 806bf44:	69bb      	ldr	r3, [r7, #24]
 806bf46:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 806bf48:	697b      	ldr	r3, [r7, #20]
 806bf4a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 806bf4c:	69bb      	ldr	r3, [r7, #24]
 806bf4e:	699b      	ldr	r3, [r3, #24]
 806bf50:	68ba      	ldr	r2, [r7, #8]
 806bf52:	429a      	cmp	r2, r3
 806bf54:	d3c6      	bcc.n	806bee4 <remove_chain+0x4a>
 806bf56:	e000      	b.n	806bf5a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 806bf58:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 806bf5a:	2300      	movs	r3, #0
}
 806bf5c:	4618      	mov	r0, r3
 806bf5e:	3720      	adds	r7, #32
 806bf60:	46bd      	mov	sp, r7
 806bf62:	bd80      	pop	{r7, pc}

0806bf64 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 806bf64:	b580      	push	{r7, lr}
 806bf66:	b088      	sub	sp, #32
 806bf68:	af00      	add	r7, sp, #0
 806bf6a:	6078      	str	r0, [r7, #4]
 806bf6c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 806bf6e:	687b      	ldr	r3, [r7, #4]
 806bf70:	681b      	ldr	r3, [r3, #0]
 806bf72:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 806bf74:	683b      	ldr	r3, [r7, #0]
 806bf76:	2b00      	cmp	r3, #0
 806bf78:	d10d      	bne.n	806bf96 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 806bf7a:	693b      	ldr	r3, [r7, #16]
 806bf7c:	691b      	ldr	r3, [r3, #16]
 806bf7e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 806bf80:	69bb      	ldr	r3, [r7, #24]
 806bf82:	2b00      	cmp	r3, #0
 806bf84:	d004      	beq.n	806bf90 <create_chain+0x2c>
 806bf86:	693b      	ldr	r3, [r7, #16]
 806bf88:	699b      	ldr	r3, [r3, #24]
 806bf8a:	69ba      	ldr	r2, [r7, #24]
 806bf8c:	429a      	cmp	r2, r3
 806bf8e:	d31b      	bcc.n	806bfc8 <create_chain+0x64>
 806bf90:	2301      	movs	r3, #1
 806bf92:	61bb      	str	r3, [r7, #24]
 806bf94:	e018      	b.n	806bfc8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 806bf96:	6839      	ldr	r1, [r7, #0]
 806bf98:	6878      	ldr	r0, [r7, #4]
 806bf9a:	f7ff fdea 	bl	806bb72 <get_fat>
 806bf9e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 806bfa0:	68fb      	ldr	r3, [r7, #12]
 806bfa2:	2b01      	cmp	r3, #1
 806bfa4:	d801      	bhi.n	806bfaa <create_chain+0x46>
 806bfa6:	2301      	movs	r3, #1
 806bfa8:	e070      	b.n	806c08c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 806bfaa:	68fb      	ldr	r3, [r7, #12]
 806bfac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806bfb0:	d101      	bne.n	806bfb6 <create_chain+0x52>
 806bfb2:	68fb      	ldr	r3, [r7, #12]
 806bfb4:	e06a      	b.n	806c08c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 806bfb6:	693b      	ldr	r3, [r7, #16]
 806bfb8:	699b      	ldr	r3, [r3, #24]
 806bfba:	68fa      	ldr	r2, [r7, #12]
 806bfbc:	429a      	cmp	r2, r3
 806bfbe:	d201      	bcs.n	806bfc4 <create_chain+0x60>
 806bfc0:	68fb      	ldr	r3, [r7, #12]
 806bfc2:	e063      	b.n	806c08c <create_chain+0x128>
		scl = clst;
 806bfc4:	683b      	ldr	r3, [r7, #0]
 806bfc6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 806bfc8:	69bb      	ldr	r3, [r7, #24]
 806bfca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 806bfcc:	69fb      	ldr	r3, [r7, #28]
 806bfce:	3301      	adds	r3, #1
 806bfd0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 806bfd2:	693b      	ldr	r3, [r7, #16]
 806bfd4:	699b      	ldr	r3, [r3, #24]
 806bfd6:	69fa      	ldr	r2, [r7, #28]
 806bfd8:	429a      	cmp	r2, r3
 806bfda:	d307      	bcc.n	806bfec <create_chain+0x88>
				ncl = 2;
 806bfdc:	2302      	movs	r3, #2
 806bfde:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 806bfe0:	69fa      	ldr	r2, [r7, #28]
 806bfe2:	69bb      	ldr	r3, [r7, #24]
 806bfe4:	429a      	cmp	r2, r3
 806bfe6:	d901      	bls.n	806bfec <create_chain+0x88>
 806bfe8:	2300      	movs	r3, #0
 806bfea:	e04f      	b.n	806c08c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 806bfec:	69f9      	ldr	r1, [r7, #28]
 806bfee:	6878      	ldr	r0, [r7, #4]
 806bff0:	f7ff fdbf 	bl	806bb72 <get_fat>
 806bff4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 806bff6:	68fb      	ldr	r3, [r7, #12]
 806bff8:	2b00      	cmp	r3, #0
 806bffa:	d00e      	beq.n	806c01a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 806bffc:	68fb      	ldr	r3, [r7, #12]
 806bffe:	2b01      	cmp	r3, #1
 806c000:	d003      	beq.n	806c00a <create_chain+0xa6>
 806c002:	68fb      	ldr	r3, [r7, #12]
 806c004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806c008:	d101      	bne.n	806c00e <create_chain+0xaa>
 806c00a:	68fb      	ldr	r3, [r7, #12]
 806c00c:	e03e      	b.n	806c08c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 806c00e:	69fa      	ldr	r2, [r7, #28]
 806c010:	69bb      	ldr	r3, [r7, #24]
 806c012:	429a      	cmp	r2, r3
 806c014:	d1da      	bne.n	806bfcc <create_chain+0x68>
 806c016:	2300      	movs	r3, #0
 806c018:	e038      	b.n	806c08c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 806c01a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 806c01c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806c020:	69f9      	ldr	r1, [r7, #28]
 806c022:	6938      	ldr	r0, [r7, #16]
 806c024:	f7ff fe4d 	bl	806bcc2 <put_fat>
 806c028:	4603      	mov	r3, r0
 806c02a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 806c02c:	7dfb      	ldrb	r3, [r7, #23]
 806c02e:	2b00      	cmp	r3, #0
 806c030:	d109      	bne.n	806c046 <create_chain+0xe2>
 806c032:	683b      	ldr	r3, [r7, #0]
 806c034:	2b00      	cmp	r3, #0
 806c036:	d006      	beq.n	806c046 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 806c038:	69fa      	ldr	r2, [r7, #28]
 806c03a:	6839      	ldr	r1, [r7, #0]
 806c03c:	6938      	ldr	r0, [r7, #16]
 806c03e:	f7ff fe40 	bl	806bcc2 <put_fat>
 806c042:	4603      	mov	r3, r0
 806c044:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 806c046:	7dfb      	ldrb	r3, [r7, #23]
 806c048:	2b00      	cmp	r3, #0
 806c04a:	d116      	bne.n	806c07a <create_chain+0x116>
		fs->last_clst = ncl;
 806c04c:	693b      	ldr	r3, [r7, #16]
 806c04e:	69fa      	ldr	r2, [r7, #28]
 806c050:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 806c052:	693b      	ldr	r3, [r7, #16]
 806c054:	695a      	ldr	r2, [r3, #20]
 806c056:	693b      	ldr	r3, [r7, #16]
 806c058:	699b      	ldr	r3, [r3, #24]
 806c05a:	3b02      	subs	r3, #2
 806c05c:	429a      	cmp	r2, r3
 806c05e:	d804      	bhi.n	806c06a <create_chain+0x106>
 806c060:	693b      	ldr	r3, [r7, #16]
 806c062:	695b      	ldr	r3, [r3, #20]
 806c064:	1e5a      	subs	r2, r3, #1
 806c066:	693b      	ldr	r3, [r7, #16]
 806c068:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 806c06a:	693b      	ldr	r3, [r7, #16]
 806c06c:	791b      	ldrb	r3, [r3, #4]
 806c06e:	f043 0301 	orr.w	r3, r3, #1
 806c072:	b2da      	uxtb	r2, r3
 806c074:	693b      	ldr	r3, [r7, #16]
 806c076:	711a      	strb	r2, [r3, #4]
 806c078:	e007      	b.n	806c08a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 806c07a:	7dfb      	ldrb	r3, [r7, #23]
 806c07c:	2b01      	cmp	r3, #1
 806c07e:	d102      	bne.n	806c086 <create_chain+0x122>
 806c080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806c084:	e000      	b.n	806c088 <create_chain+0x124>
 806c086:	2301      	movs	r3, #1
 806c088:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 806c08a:	69fb      	ldr	r3, [r7, #28]
}
 806c08c:	4618      	mov	r0, r3
 806c08e:	3720      	adds	r7, #32
 806c090:	46bd      	mov	sp, r7
 806c092:	bd80      	pop	{r7, pc}

0806c094 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 806c094:	b480      	push	{r7}
 806c096:	b087      	sub	sp, #28
 806c098:	af00      	add	r7, sp, #0
 806c09a:	6078      	str	r0, [r7, #4]
 806c09c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 806c09e:	687b      	ldr	r3, [r7, #4]
 806c0a0:	681b      	ldr	r3, [r3, #0]
 806c0a2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 806c0a4:	687b      	ldr	r3, [r7, #4]
 806c0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806c0a8:	3304      	adds	r3, #4
 806c0aa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 806c0ac:	683b      	ldr	r3, [r7, #0]
 806c0ae:	0a5b      	lsrs	r3, r3, #9
 806c0b0:	68fa      	ldr	r2, [r7, #12]
 806c0b2:	8952      	ldrh	r2, [r2, #10]
 806c0b4:	fbb3 f3f2 	udiv	r3, r3, r2
 806c0b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 806c0ba:	693b      	ldr	r3, [r7, #16]
 806c0bc:	1d1a      	adds	r2, r3, #4
 806c0be:	613a      	str	r2, [r7, #16]
 806c0c0:	681b      	ldr	r3, [r3, #0]
 806c0c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 806c0c4:	68bb      	ldr	r3, [r7, #8]
 806c0c6:	2b00      	cmp	r3, #0
 806c0c8:	d101      	bne.n	806c0ce <clmt_clust+0x3a>
 806c0ca:	2300      	movs	r3, #0
 806c0cc:	e010      	b.n	806c0f0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 806c0ce:	697a      	ldr	r2, [r7, #20]
 806c0d0:	68bb      	ldr	r3, [r7, #8]
 806c0d2:	429a      	cmp	r2, r3
 806c0d4:	d307      	bcc.n	806c0e6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 806c0d6:	697a      	ldr	r2, [r7, #20]
 806c0d8:	68bb      	ldr	r3, [r7, #8]
 806c0da:	1ad3      	subs	r3, r2, r3
 806c0dc:	617b      	str	r3, [r7, #20]
 806c0de:	693b      	ldr	r3, [r7, #16]
 806c0e0:	3304      	adds	r3, #4
 806c0e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 806c0e4:	e7e9      	b.n	806c0ba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 806c0e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 806c0e8:	693b      	ldr	r3, [r7, #16]
 806c0ea:	681a      	ldr	r2, [r3, #0]
 806c0ec:	697b      	ldr	r3, [r7, #20]
 806c0ee:	4413      	add	r3, r2
}
 806c0f0:	4618      	mov	r0, r3
 806c0f2:	371c      	adds	r7, #28
 806c0f4:	46bd      	mov	sp, r7
 806c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c0fa:	4770      	bx	lr

0806c0fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 806c0fc:	b580      	push	{r7, lr}
 806c0fe:	b086      	sub	sp, #24
 806c100:	af00      	add	r7, sp, #0
 806c102:	6078      	str	r0, [r7, #4]
 806c104:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 806c106:	687b      	ldr	r3, [r7, #4]
 806c108:	681b      	ldr	r3, [r3, #0]
 806c10a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 806c10c:	683b      	ldr	r3, [r7, #0]
 806c10e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 806c112:	d204      	bcs.n	806c11e <dir_sdi+0x22>
 806c114:	683b      	ldr	r3, [r7, #0]
 806c116:	f003 031f 	and.w	r3, r3, #31
 806c11a:	2b00      	cmp	r3, #0
 806c11c:	d001      	beq.n	806c122 <dir_sdi+0x26>
		return FR_INT_ERR;
 806c11e:	2302      	movs	r3, #2
 806c120:	e063      	b.n	806c1ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 806c122:	687b      	ldr	r3, [r7, #4]
 806c124:	683a      	ldr	r2, [r7, #0]
 806c126:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 806c128:	687b      	ldr	r3, [r7, #4]
 806c12a:	689b      	ldr	r3, [r3, #8]
 806c12c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 806c12e:	697b      	ldr	r3, [r7, #20]
 806c130:	2b00      	cmp	r3, #0
 806c132:	d106      	bne.n	806c142 <dir_sdi+0x46>
 806c134:	693b      	ldr	r3, [r7, #16]
 806c136:	781b      	ldrb	r3, [r3, #0]
 806c138:	2b02      	cmp	r3, #2
 806c13a:	d902      	bls.n	806c142 <dir_sdi+0x46>
		clst = fs->dirbase;
 806c13c:	693b      	ldr	r3, [r7, #16]
 806c13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806c140:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 806c142:	697b      	ldr	r3, [r7, #20]
 806c144:	2b00      	cmp	r3, #0
 806c146:	d10c      	bne.n	806c162 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 806c148:	683b      	ldr	r3, [r7, #0]
 806c14a:	095b      	lsrs	r3, r3, #5
 806c14c:	693a      	ldr	r2, [r7, #16]
 806c14e:	8912      	ldrh	r2, [r2, #8]
 806c150:	4293      	cmp	r3, r2
 806c152:	d301      	bcc.n	806c158 <dir_sdi+0x5c>
 806c154:	2302      	movs	r3, #2
 806c156:	e048      	b.n	806c1ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 806c158:	693b      	ldr	r3, [r7, #16]
 806c15a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 806c15c:	687b      	ldr	r3, [r7, #4]
 806c15e:	61da      	str	r2, [r3, #28]
 806c160:	e029      	b.n	806c1b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 806c162:	693b      	ldr	r3, [r7, #16]
 806c164:	895b      	ldrh	r3, [r3, #10]
 806c166:	025b      	lsls	r3, r3, #9
 806c168:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 806c16a:	e019      	b.n	806c1a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 806c16c:	687b      	ldr	r3, [r7, #4]
 806c16e:	6979      	ldr	r1, [r7, #20]
 806c170:	4618      	mov	r0, r3
 806c172:	f7ff fcfe 	bl	806bb72 <get_fat>
 806c176:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 806c178:	697b      	ldr	r3, [r7, #20]
 806c17a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806c17e:	d101      	bne.n	806c184 <dir_sdi+0x88>
 806c180:	2301      	movs	r3, #1
 806c182:	e032      	b.n	806c1ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 806c184:	697b      	ldr	r3, [r7, #20]
 806c186:	2b01      	cmp	r3, #1
 806c188:	d904      	bls.n	806c194 <dir_sdi+0x98>
 806c18a:	693b      	ldr	r3, [r7, #16]
 806c18c:	699b      	ldr	r3, [r3, #24]
 806c18e:	697a      	ldr	r2, [r7, #20]
 806c190:	429a      	cmp	r2, r3
 806c192:	d301      	bcc.n	806c198 <dir_sdi+0x9c>
 806c194:	2302      	movs	r3, #2
 806c196:	e028      	b.n	806c1ea <dir_sdi+0xee>
			ofs -= csz;
 806c198:	683a      	ldr	r2, [r7, #0]
 806c19a:	68fb      	ldr	r3, [r7, #12]
 806c19c:	1ad3      	subs	r3, r2, r3
 806c19e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 806c1a0:	683a      	ldr	r2, [r7, #0]
 806c1a2:	68fb      	ldr	r3, [r7, #12]
 806c1a4:	429a      	cmp	r2, r3
 806c1a6:	d2e1      	bcs.n	806c16c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 806c1a8:	6979      	ldr	r1, [r7, #20]
 806c1aa:	6938      	ldr	r0, [r7, #16]
 806c1ac:	f7ff fcc2 	bl	806bb34 <clust2sect>
 806c1b0:	4602      	mov	r2, r0
 806c1b2:	687b      	ldr	r3, [r7, #4]
 806c1b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 806c1b6:	687b      	ldr	r3, [r7, #4]
 806c1b8:	697a      	ldr	r2, [r7, #20]
 806c1ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 806c1bc:	687b      	ldr	r3, [r7, #4]
 806c1be:	69db      	ldr	r3, [r3, #28]
 806c1c0:	2b00      	cmp	r3, #0
 806c1c2:	d101      	bne.n	806c1c8 <dir_sdi+0xcc>
 806c1c4:	2302      	movs	r3, #2
 806c1c6:	e010      	b.n	806c1ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 806c1c8:	687b      	ldr	r3, [r7, #4]
 806c1ca:	69da      	ldr	r2, [r3, #28]
 806c1cc:	683b      	ldr	r3, [r7, #0]
 806c1ce:	0a5b      	lsrs	r3, r3, #9
 806c1d0:	441a      	add	r2, r3
 806c1d2:	687b      	ldr	r3, [r7, #4]
 806c1d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 806c1d6:	693b      	ldr	r3, [r7, #16]
 806c1d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806c1dc:	683b      	ldr	r3, [r7, #0]
 806c1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806c1e2:	441a      	add	r2, r3
 806c1e4:	687b      	ldr	r3, [r7, #4]
 806c1e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 806c1e8:	2300      	movs	r3, #0
}
 806c1ea:	4618      	mov	r0, r3
 806c1ec:	3718      	adds	r7, #24
 806c1ee:	46bd      	mov	sp, r7
 806c1f0:	bd80      	pop	{r7, pc}

0806c1f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 806c1f2:	b580      	push	{r7, lr}
 806c1f4:	b086      	sub	sp, #24
 806c1f6:	af00      	add	r7, sp, #0
 806c1f8:	6078      	str	r0, [r7, #4]
 806c1fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 806c1fc:	687b      	ldr	r3, [r7, #4]
 806c1fe:	681b      	ldr	r3, [r3, #0]
 806c200:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 806c202:	687b      	ldr	r3, [r7, #4]
 806c204:	695b      	ldr	r3, [r3, #20]
 806c206:	3320      	adds	r3, #32
 806c208:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 806c20a:	687b      	ldr	r3, [r7, #4]
 806c20c:	69db      	ldr	r3, [r3, #28]
 806c20e:	2b00      	cmp	r3, #0
 806c210:	d003      	beq.n	806c21a <dir_next+0x28>
 806c212:	68bb      	ldr	r3, [r7, #8]
 806c214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 806c218:	d301      	bcc.n	806c21e <dir_next+0x2c>
 806c21a:	2304      	movs	r3, #4
 806c21c:	e0aa      	b.n	806c374 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 806c21e:	68bb      	ldr	r3, [r7, #8]
 806c220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806c224:	2b00      	cmp	r3, #0
 806c226:	f040 8098 	bne.w	806c35a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 806c22a:	687b      	ldr	r3, [r7, #4]
 806c22c:	69db      	ldr	r3, [r3, #28]
 806c22e:	1c5a      	adds	r2, r3, #1
 806c230:	687b      	ldr	r3, [r7, #4]
 806c232:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 806c234:	687b      	ldr	r3, [r7, #4]
 806c236:	699b      	ldr	r3, [r3, #24]
 806c238:	2b00      	cmp	r3, #0
 806c23a:	d10b      	bne.n	806c254 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 806c23c:	68bb      	ldr	r3, [r7, #8]
 806c23e:	095b      	lsrs	r3, r3, #5
 806c240:	68fa      	ldr	r2, [r7, #12]
 806c242:	8912      	ldrh	r2, [r2, #8]
 806c244:	4293      	cmp	r3, r2
 806c246:	f0c0 8088 	bcc.w	806c35a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 806c24a:	687b      	ldr	r3, [r7, #4]
 806c24c:	2200      	movs	r2, #0
 806c24e:	61da      	str	r2, [r3, #28]
 806c250:	2304      	movs	r3, #4
 806c252:	e08f      	b.n	806c374 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 806c254:	68bb      	ldr	r3, [r7, #8]
 806c256:	0a5b      	lsrs	r3, r3, #9
 806c258:	68fa      	ldr	r2, [r7, #12]
 806c25a:	8952      	ldrh	r2, [r2, #10]
 806c25c:	3a01      	subs	r2, #1
 806c25e:	4013      	ands	r3, r2
 806c260:	2b00      	cmp	r3, #0
 806c262:	d17a      	bne.n	806c35a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 806c264:	687a      	ldr	r2, [r7, #4]
 806c266:	687b      	ldr	r3, [r7, #4]
 806c268:	699b      	ldr	r3, [r3, #24]
 806c26a:	4619      	mov	r1, r3
 806c26c:	4610      	mov	r0, r2
 806c26e:	f7ff fc80 	bl	806bb72 <get_fat>
 806c272:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 806c274:	697b      	ldr	r3, [r7, #20]
 806c276:	2b01      	cmp	r3, #1
 806c278:	d801      	bhi.n	806c27e <dir_next+0x8c>
 806c27a:	2302      	movs	r3, #2
 806c27c:	e07a      	b.n	806c374 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 806c27e:	697b      	ldr	r3, [r7, #20]
 806c280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806c284:	d101      	bne.n	806c28a <dir_next+0x98>
 806c286:	2301      	movs	r3, #1
 806c288:	e074      	b.n	806c374 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 806c28a:	68fb      	ldr	r3, [r7, #12]
 806c28c:	699b      	ldr	r3, [r3, #24]
 806c28e:	697a      	ldr	r2, [r7, #20]
 806c290:	429a      	cmp	r2, r3
 806c292:	d358      	bcc.n	806c346 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 806c294:	683b      	ldr	r3, [r7, #0]
 806c296:	2b00      	cmp	r3, #0
 806c298:	d104      	bne.n	806c2a4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 806c29a:	687b      	ldr	r3, [r7, #4]
 806c29c:	2200      	movs	r2, #0
 806c29e:	61da      	str	r2, [r3, #28]
 806c2a0:	2304      	movs	r3, #4
 806c2a2:	e067      	b.n	806c374 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 806c2a4:	687a      	ldr	r2, [r7, #4]
 806c2a6:	687b      	ldr	r3, [r7, #4]
 806c2a8:	699b      	ldr	r3, [r3, #24]
 806c2aa:	4619      	mov	r1, r3
 806c2ac:	4610      	mov	r0, r2
 806c2ae:	f7ff fe59 	bl	806bf64 <create_chain>
 806c2b2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 806c2b4:	697b      	ldr	r3, [r7, #20]
 806c2b6:	2b00      	cmp	r3, #0
 806c2b8:	d101      	bne.n	806c2be <dir_next+0xcc>
 806c2ba:	2307      	movs	r3, #7
 806c2bc:	e05a      	b.n	806c374 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 806c2be:	697b      	ldr	r3, [r7, #20]
 806c2c0:	2b01      	cmp	r3, #1
 806c2c2:	d101      	bne.n	806c2c8 <dir_next+0xd6>
 806c2c4:	2302      	movs	r3, #2
 806c2c6:	e055      	b.n	806c374 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 806c2c8:	697b      	ldr	r3, [r7, #20]
 806c2ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806c2ce:	d101      	bne.n	806c2d4 <dir_next+0xe2>
 806c2d0:	2301      	movs	r3, #1
 806c2d2:	e04f      	b.n	806c374 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 806c2d4:	68f8      	ldr	r0, [r7, #12]
 806c2d6:	f7ff fb4d 	bl	806b974 <sync_window>
 806c2da:	4603      	mov	r3, r0
 806c2dc:	2b00      	cmp	r3, #0
 806c2de:	d001      	beq.n	806c2e4 <dir_next+0xf2>
 806c2e0:	2301      	movs	r3, #1
 806c2e2:	e047      	b.n	806c374 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 806c2e4:	68fb      	ldr	r3, [r7, #12]
 806c2e6:	3334      	adds	r3, #52	; 0x34
 806c2e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 806c2ec:	2100      	movs	r1, #0
 806c2ee:	4618      	mov	r0, r3
 806c2f0:	f7ff f945 	bl	806b57e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 806c2f4:	2300      	movs	r3, #0
 806c2f6:	613b      	str	r3, [r7, #16]
 806c2f8:	6979      	ldr	r1, [r7, #20]
 806c2fa:	68f8      	ldr	r0, [r7, #12]
 806c2fc:	f7ff fc1a 	bl	806bb34 <clust2sect>
 806c300:	4602      	mov	r2, r0
 806c302:	68fb      	ldr	r3, [r7, #12]
 806c304:	631a      	str	r2, [r3, #48]	; 0x30
 806c306:	e012      	b.n	806c32e <dir_next+0x13c>
						fs->wflag = 1;
 806c308:	68fb      	ldr	r3, [r7, #12]
 806c30a:	2201      	movs	r2, #1
 806c30c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 806c30e:	68f8      	ldr	r0, [r7, #12]
 806c310:	f7ff fb30 	bl	806b974 <sync_window>
 806c314:	4603      	mov	r3, r0
 806c316:	2b00      	cmp	r3, #0
 806c318:	d001      	beq.n	806c31e <dir_next+0x12c>
 806c31a:	2301      	movs	r3, #1
 806c31c:	e02a      	b.n	806c374 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 806c31e:	693b      	ldr	r3, [r7, #16]
 806c320:	3301      	adds	r3, #1
 806c322:	613b      	str	r3, [r7, #16]
 806c324:	68fb      	ldr	r3, [r7, #12]
 806c326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806c328:	1c5a      	adds	r2, r3, #1
 806c32a:	68fb      	ldr	r3, [r7, #12]
 806c32c:	631a      	str	r2, [r3, #48]	; 0x30
 806c32e:	68fb      	ldr	r3, [r7, #12]
 806c330:	895b      	ldrh	r3, [r3, #10]
 806c332:	461a      	mov	r2, r3
 806c334:	693b      	ldr	r3, [r7, #16]
 806c336:	4293      	cmp	r3, r2
 806c338:	d3e6      	bcc.n	806c308 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 806c33a:	68fb      	ldr	r3, [r7, #12]
 806c33c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806c33e:	693b      	ldr	r3, [r7, #16]
 806c340:	1ad2      	subs	r2, r2, r3
 806c342:	68fb      	ldr	r3, [r7, #12]
 806c344:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 806c346:	687b      	ldr	r3, [r7, #4]
 806c348:	697a      	ldr	r2, [r7, #20]
 806c34a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 806c34c:	6979      	ldr	r1, [r7, #20]
 806c34e:	68f8      	ldr	r0, [r7, #12]
 806c350:	f7ff fbf0 	bl	806bb34 <clust2sect>
 806c354:	4602      	mov	r2, r0
 806c356:	687b      	ldr	r3, [r7, #4]
 806c358:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 806c35a:	687b      	ldr	r3, [r7, #4]
 806c35c:	68ba      	ldr	r2, [r7, #8]
 806c35e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 806c360:	68fb      	ldr	r3, [r7, #12]
 806c362:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806c366:	68bb      	ldr	r3, [r7, #8]
 806c368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806c36c:	441a      	add	r2, r3
 806c36e:	687b      	ldr	r3, [r7, #4]
 806c370:	621a      	str	r2, [r3, #32]

	return FR_OK;
 806c372:	2300      	movs	r3, #0
}
 806c374:	4618      	mov	r0, r3
 806c376:	3718      	adds	r7, #24
 806c378:	46bd      	mov	sp, r7
 806c37a:	bd80      	pop	{r7, pc}

0806c37c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 806c37c:	b580      	push	{r7, lr}
 806c37e:	b086      	sub	sp, #24
 806c380:	af00      	add	r7, sp, #0
 806c382:	6078      	str	r0, [r7, #4]
 806c384:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 806c386:	687b      	ldr	r3, [r7, #4]
 806c388:	681b      	ldr	r3, [r3, #0]
 806c38a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 806c38c:	2100      	movs	r1, #0
 806c38e:	6878      	ldr	r0, [r7, #4]
 806c390:	f7ff feb4 	bl	806c0fc <dir_sdi>
 806c394:	4603      	mov	r3, r0
 806c396:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 806c398:	7dfb      	ldrb	r3, [r7, #23]
 806c39a:	2b00      	cmp	r3, #0
 806c39c:	d12b      	bne.n	806c3f6 <dir_alloc+0x7a>
		n = 0;
 806c39e:	2300      	movs	r3, #0
 806c3a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 806c3a2:	687b      	ldr	r3, [r7, #4]
 806c3a4:	69db      	ldr	r3, [r3, #28]
 806c3a6:	4619      	mov	r1, r3
 806c3a8:	68f8      	ldr	r0, [r7, #12]
 806c3aa:	f7ff fb27 	bl	806b9fc <move_window>
 806c3ae:	4603      	mov	r3, r0
 806c3b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 806c3b2:	7dfb      	ldrb	r3, [r7, #23]
 806c3b4:	2b00      	cmp	r3, #0
 806c3b6:	d11d      	bne.n	806c3f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 806c3b8:	687b      	ldr	r3, [r7, #4]
 806c3ba:	6a1b      	ldr	r3, [r3, #32]
 806c3bc:	781b      	ldrb	r3, [r3, #0]
 806c3be:	2be5      	cmp	r3, #229	; 0xe5
 806c3c0:	d004      	beq.n	806c3cc <dir_alloc+0x50>
 806c3c2:	687b      	ldr	r3, [r7, #4]
 806c3c4:	6a1b      	ldr	r3, [r3, #32]
 806c3c6:	781b      	ldrb	r3, [r3, #0]
 806c3c8:	2b00      	cmp	r3, #0
 806c3ca:	d107      	bne.n	806c3dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 806c3cc:	693b      	ldr	r3, [r7, #16]
 806c3ce:	3301      	adds	r3, #1
 806c3d0:	613b      	str	r3, [r7, #16]
 806c3d2:	693a      	ldr	r2, [r7, #16]
 806c3d4:	683b      	ldr	r3, [r7, #0]
 806c3d6:	429a      	cmp	r2, r3
 806c3d8:	d102      	bne.n	806c3e0 <dir_alloc+0x64>
 806c3da:	e00c      	b.n	806c3f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 806c3dc:	2300      	movs	r3, #0
 806c3de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 806c3e0:	2101      	movs	r1, #1
 806c3e2:	6878      	ldr	r0, [r7, #4]
 806c3e4:	f7ff ff05 	bl	806c1f2 <dir_next>
 806c3e8:	4603      	mov	r3, r0
 806c3ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 806c3ec:	7dfb      	ldrb	r3, [r7, #23]
 806c3ee:	2b00      	cmp	r3, #0
 806c3f0:	d0d7      	beq.n	806c3a2 <dir_alloc+0x26>
 806c3f2:	e000      	b.n	806c3f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 806c3f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 806c3f6:	7dfb      	ldrb	r3, [r7, #23]
 806c3f8:	2b04      	cmp	r3, #4
 806c3fa:	d101      	bne.n	806c400 <dir_alloc+0x84>
 806c3fc:	2307      	movs	r3, #7
 806c3fe:	75fb      	strb	r3, [r7, #23]
	return res;
 806c400:	7dfb      	ldrb	r3, [r7, #23]
}
 806c402:	4618      	mov	r0, r3
 806c404:	3718      	adds	r7, #24
 806c406:	46bd      	mov	sp, r7
 806c408:	bd80      	pop	{r7, pc}

0806c40a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 806c40a:	b580      	push	{r7, lr}
 806c40c:	b084      	sub	sp, #16
 806c40e:	af00      	add	r7, sp, #0
 806c410:	6078      	str	r0, [r7, #4]
 806c412:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 806c414:	683b      	ldr	r3, [r7, #0]
 806c416:	331a      	adds	r3, #26
 806c418:	4618      	mov	r0, r3
 806c41a:	f7ff f80d 	bl	806b438 <ld_word>
 806c41e:	4603      	mov	r3, r0
 806c420:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 806c422:	687b      	ldr	r3, [r7, #4]
 806c424:	781b      	ldrb	r3, [r3, #0]
 806c426:	2b03      	cmp	r3, #3
 806c428:	d109      	bne.n	806c43e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 806c42a:	683b      	ldr	r3, [r7, #0]
 806c42c:	3314      	adds	r3, #20
 806c42e:	4618      	mov	r0, r3
 806c430:	f7ff f802 	bl	806b438 <ld_word>
 806c434:	4603      	mov	r3, r0
 806c436:	041b      	lsls	r3, r3, #16
 806c438:	68fa      	ldr	r2, [r7, #12]
 806c43a:	4313      	orrs	r3, r2
 806c43c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 806c43e:	68fb      	ldr	r3, [r7, #12]
}
 806c440:	4618      	mov	r0, r3
 806c442:	3710      	adds	r7, #16
 806c444:	46bd      	mov	sp, r7
 806c446:	bd80      	pop	{r7, pc}

0806c448 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 806c448:	b580      	push	{r7, lr}
 806c44a:	b084      	sub	sp, #16
 806c44c:	af00      	add	r7, sp, #0
 806c44e:	60f8      	str	r0, [r7, #12]
 806c450:	60b9      	str	r1, [r7, #8]
 806c452:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 806c454:	68bb      	ldr	r3, [r7, #8]
 806c456:	331a      	adds	r3, #26
 806c458:	687a      	ldr	r2, [r7, #4]
 806c45a:	b292      	uxth	r2, r2
 806c45c:	4611      	mov	r1, r2
 806c45e:	4618      	mov	r0, r3
 806c460:	f7ff f825 	bl	806b4ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 806c464:	68fb      	ldr	r3, [r7, #12]
 806c466:	781b      	ldrb	r3, [r3, #0]
 806c468:	2b03      	cmp	r3, #3
 806c46a:	d109      	bne.n	806c480 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 806c46c:	68bb      	ldr	r3, [r7, #8]
 806c46e:	f103 0214 	add.w	r2, r3, #20
 806c472:	687b      	ldr	r3, [r7, #4]
 806c474:	0c1b      	lsrs	r3, r3, #16
 806c476:	b29b      	uxth	r3, r3
 806c478:	4619      	mov	r1, r3
 806c47a:	4610      	mov	r0, r2
 806c47c:	f7ff f817 	bl	806b4ae <st_word>
	}
}
 806c480:	bf00      	nop
 806c482:	3710      	adds	r7, #16
 806c484:	46bd      	mov	sp, r7
 806c486:	bd80      	pop	{r7, pc}

0806c488 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 806c488:	b580      	push	{r7, lr}
 806c48a:	b086      	sub	sp, #24
 806c48c:	af00      	add	r7, sp, #0
 806c48e:	6078      	str	r0, [r7, #4]
 806c490:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 806c492:	2304      	movs	r3, #4
 806c494:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 806c496:	687b      	ldr	r3, [r7, #4]
 806c498:	681b      	ldr	r3, [r3, #0]
 806c49a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 806c49c:	e03c      	b.n	806c518 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 806c49e:	687b      	ldr	r3, [r7, #4]
 806c4a0:	69db      	ldr	r3, [r3, #28]
 806c4a2:	4619      	mov	r1, r3
 806c4a4:	6938      	ldr	r0, [r7, #16]
 806c4a6:	f7ff faa9 	bl	806b9fc <move_window>
 806c4aa:	4603      	mov	r3, r0
 806c4ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 806c4ae:	7dfb      	ldrb	r3, [r7, #23]
 806c4b0:	2b00      	cmp	r3, #0
 806c4b2:	d136      	bne.n	806c522 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 806c4b4:	687b      	ldr	r3, [r7, #4]
 806c4b6:	6a1b      	ldr	r3, [r3, #32]
 806c4b8:	781b      	ldrb	r3, [r3, #0]
 806c4ba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 806c4bc:	7bfb      	ldrb	r3, [r7, #15]
 806c4be:	2b00      	cmp	r3, #0
 806c4c0:	d102      	bne.n	806c4c8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 806c4c2:	2304      	movs	r3, #4
 806c4c4:	75fb      	strb	r3, [r7, #23]
 806c4c6:	e031      	b.n	806c52c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 806c4c8:	687b      	ldr	r3, [r7, #4]
 806c4ca:	6a1b      	ldr	r3, [r3, #32]
 806c4cc:	330b      	adds	r3, #11
 806c4ce:	781b      	ldrb	r3, [r3, #0]
 806c4d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 806c4d4:	73bb      	strb	r3, [r7, #14]
 806c4d6:	687b      	ldr	r3, [r7, #4]
 806c4d8:	7bba      	ldrb	r2, [r7, #14]
 806c4da:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 806c4dc:	7bfb      	ldrb	r3, [r7, #15]
 806c4de:	2be5      	cmp	r3, #229	; 0xe5
 806c4e0:	d011      	beq.n	806c506 <dir_read+0x7e>
 806c4e2:	7bfb      	ldrb	r3, [r7, #15]
 806c4e4:	2b2e      	cmp	r3, #46	; 0x2e
 806c4e6:	d00e      	beq.n	806c506 <dir_read+0x7e>
 806c4e8:	7bbb      	ldrb	r3, [r7, #14]
 806c4ea:	2b0f      	cmp	r3, #15
 806c4ec:	d00b      	beq.n	806c506 <dir_read+0x7e>
 806c4ee:	7bbb      	ldrb	r3, [r7, #14]
 806c4f0:	f023 0320 	bic.w	r3, r3, #32
 806c4f4:	2b08      	cmp	r3, #8
 806c4f6:	bf0c      	ite	eq
 806c4f8:	2301      	moveq	r3, #1
 806c4fa:	2300      	movne	r3, #0
 806c4fc:	b2db      	uxtb	r3, r3
 806c4fe:	461a      	mov	r2, r3
 806c500:	683b      	ldr	r3, [r7, #0]
 806c502:	4293      	cmp	r3, r2
 806c504:	d00f      	beq.n	806c526 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 806c506:	2100      	movs	r1, #0
 806c508:	6878      	ldr	r0, [r7, #4]
 806c50a:	f7ff fe72 	bl	806c1f2 <dir_next>
 806c50e:	4603      	mov	r3, r0
 806c510:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 806c512:	7dfb      	ldrb	r3, [r7, #23]
 806c514:	2b00      	cmp	r3, #0
 806c516:	d108      	bne.n	806c52a <dir_read+0xa2>
	while (dp->sect) {
 806c518:	687b      	ldr	r3, [r7, #4]
 806c51a:	69db      	ldr	r3, [r3, #28]
 806c51c:	2b00      	cmp	r3, #0
 806c51e:	d1be      	bne.n	806c49e <dir_read+0x16>
 806c520:	e004      	b.n	806c52c <dir_read+0xa4>
		if (res != FR_OK) break;
 806c522:	bf00      	nop
 806c524:	e002      	b.n	806c52c <dir_read+0xa4>
				break;
 806c526:	bf00      	nop
 806c528:	e000      	b.n	806c52c <dir_read+0xa4>
		if (res != FR_OK) break;
 806c52a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 806c52c:	7dfb      	ldrb	r3, [r7, #23]
 806c52e:	2b00      	cmp	r3, #0
 806c530:	d002      	beq.n	806c538 <dir_read+0xb0>
 806c532:	687b      	ldr	r3, [r7, #4]
 806c534:	2200      	movs	r2, #0
 806c536:	61da      	str	r2, [r3, #28]
	return res;
 806c538:	7dfb      	ldrb	r3, [r7, #23]
}
 806c53a:	4618      	mov	r0, r3
 806c53c:	3718      	adds	r7, #24
 806c53e:	46bd      	mov	sp, r7
 806c540:	bd80      	pop	{r7, pc}

0806c542 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 806c542:	b580      	push	{r7, lr}
 806c544:	b086      	sub	sp, #24
 806c546:	af00      	add	r7, sp, #0
 806c548:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 806c54a:	687b      	ldr	r3, [r7, #4]
 806c54c:	681b      	ldr	r3, [r3, #0]
 806c54e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 806c550:	2100      	movs	r1, #0
 806c552:	6878      	ldr	r0, [r7, #4]
 806c554:	f7ff fdd2 	bl	806c0fc <dir_sdi>
 806c558:	4603      	mov	r3, r0
 806c55a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 806c55c:	7dfb      	ldrb	r3, [r7, #23]
 806c55e:	2b00      	cmp	r3, #0
 806c560:	d001      	beq.n	806c566 <dir_find+0x24>
 806c562:	7dfb      	ldrb	r3, [r7, #23]
 806c564:	e03e      	b.n	806c5e4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 806c566:	687b      	ldr	r3, [r7, #4]
 806c568:	69db      	ldr	r3, [r3, #28]
 806c56a:	4619      	mov	r1, r3
 806c56c:	6938      	ldr	r0, [r7, #16]
 806c56e:	f7ff fa45 	bl	806b9fc <move_window>
 806c572:	4603      	mov	r3, r0
 806c574:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 806c576:	7dfb      	ldrb	r3, [r7, #23]
 806c578:	2b00      	cmp	r3, #0
 806c57a:	d12f      	bne.n	806c5dc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 806c57c:	687b      	ldr	r3, [r7, #4]
 806c57e:	6a1b      	ldr	r3, [r3, #32]
 806c580:	781b      	ldrb	r3, [r3, #0]
 806c582:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 806c584:	7bfb      	ldrb	r3, [r7, #15]
 806c586:	2b00      	cmp	r3, #0
 806c588:	d102      	bne.n	806c590 <dir_find+0x4e>
 806c58a:	2304      	movs	r3, #4
 806c58c:	75fb      	strb	r3, [r7, #23]
 806c58e:	e028      	b.n	806c5e2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 806c590:	687b      	ldr	r3, [r7, #4]
 806c592:	6a1b      	ldr	r3, [r3, #32]
 806c594:	330b      	adds	r3, #11
 806c596:	781b      	ldrb	r3, [r3, #0]
 806c598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 806c59c:	b2da      	uxtb	r2, r3
 806c59e:	687b      	ldr	r3, [r7, #4]
 806c5a0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 806c5a2:	687b      	ldr	r3, [r7, #4]
 806c5a4:	6a1b      	ldr	r3, [r3, #32]
 806c5a6:	330b      	adds	r3, #11
 806c5a8:	781b      	ldrb	r3, [r3, #0]
 806c5aa:	f003 0308 	and.w	r3, r3, #8
 806c5ae:	2b00      	cmp	r3, #0
 806c5b0:	d10a      	bne.n	806c5c8 <dir_find+0x86>
 806c5b2:	687b      	ldr	r3, [r7, #4]
 806c5b4:	6a18      	ldr	r0, [r3, #32]
 806c5b6:	687b      	ldr	r3, [r7, #4]
 806c5b8:	3324      	adds	r3, #36	; 0x24
 806c5ba:	220b      	movs	r2, #11
 806c5bc:	4619      	mov	r1, r3
 806c5be:	f7fe fff9 	bl	806b5b4 <mem_cmp>
 806c5c2:	4603      	mov	r3, r0
 806c5c4:	2b00      	cmp	r3, #0
 806c5c6:	d00b      	beq.n	806c5e0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 806c5c8:	2100      	movs	r1, #0
 806c5ca:	6878      	ldr	r0, [r7, #4]
 806c5cc:	f7ff fe11 	bl	806c1f2 <dir_next>
 806c5d0:	4603      	mov	r3, r0
 806c5d2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 806c5d4:	7dfb      	ldrb	r3, [r7, #23]
 806c5d6:	2b00      	cmp	r3, #0
 806c5d8:	d0c5      	beq.n	806c566 <dir_find+0x24>
 806c5da:	e002      	b.n	806c5e2 <dir_find+0xa0>
		if (res != FR_OK) break;
 806c5dc:	bf00      	nop
 806c5de:	e000      	b.n	806c5e2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 806c5e0:	bf00      	nop

	return res;
 806c5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 806c5e4:	4618      	mov	r0, r3
 806c5e6:	3718      	adds	r7, #24
 806c5e8:	46bd      	mov	sp, r7
 806c5ea:	bd80      	pop	{r7, pc}

0806c5ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 806c5ec:	b580      	push	{r7, lr}
 806c5ee:	b084      	sub	sp, #16
 806c5f0:	af00      	add	r7, sp, #0
 806c5f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 806c5f4:	687b      	ldr	r3, [r7, #4]
 806c5f6:	681b      	ldr	r3, [r3, #0]
 806c5f8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 806c5fa:	2101      	movs	r1, #1
 806c5fc:	6878      	ldr	r0, [r7, #4]
 806c5fe:	f7ff febd 	bl	806c37c <dir_alloc>
 806c602:	4603      	mov	r3, r0
 806c604:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 806c606:	7bfb      	ldrb	r3, [r7, #15]
 806c608:	2b00      	cmp	r3, #0
 806c60a:	d11c      	bne.n	806c646 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 806c60c:	687b      	ldr	r3, [r7, #4]
 806c60e:	69db      	ldr	r3, [r3, #28]
 806c610:	4619      	mov	r1, r3
 806c612:	68b8      	ldr	r0, [r7, #8]
 806c614:	f7ff f9f2 	bl	806b9fc <move_window>
 806c618:	4603      	mov	r3, r0
 806c61a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 806c61c:	7bfb      	ldrb	r3, [r7, #15]
 806c61e:	2b00      	cmp	r3, #0
 806c620:	d111      	bne.n	806c646 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 806c622:	687b      	ldr	r3, [r7, #4]
 806c624:	6a1b      	ldr	r3, [r3, #32]
 806c626:	2220      	movs	r2, #32
 806c628:	2100      	movs	r1, #0
 806c62a:	4618      	mov	r0, r3
 806c62c:	f7fe ffa7 	bl	806b57e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 806c630:	687b      	ldr	r3, [r7, #4]
 806c632:	6a18      	ldr	r0, [r3, #32]
 806c634:	687b      	ldr	r3, [r7, #4]
 806c636:	3324      	adds	r3, #36	; 0x24
 806c638:	220b      	movs	r2, #11
 806c63a:	4619      	mov	r1, r3
 806c63c:	f7fe ff7e 	bl	806b53c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 806c640:	68bb      	ldr	r3, [r7, #8]
 806c642:	2201      	movs	r2, #1
 806c644:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 806c646:	7bfb      	ldrb	r3, [r7, #15]
}
 806c648:	4618      	mov	r0, r3
 806c64a:	3710      	adds	r7, #16
 806c64c:	46bd      	mov	sp, r7
 806c64e:	bd80      	pop	{r7, pc}

0806c650 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 806c650:	b580      	push	{r7, lr}
 806c652:	b084      	sub	sp, #16
 806c654:	af00      	add	r7, sp, #0
 806c656:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 806c658:	687b      	ldr	r3, [r7, #4]
 806c65a:	681b      	ldr	r3, [r3, #0]
 806c65c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 806c65e:	687b      	ldr	r3, [r7, #4]
 806c660:	69db      	ldr	r3, [r3, #28]
 806c662:	4619      	mov	r1, r3
 806c664:	68f8      	ldr	r0, [r7, #12]
 806c666:	f7ff f9c9 	bl	806b9fc <move_window>
 806c66a:	4603      	mov	r3, r0
 806c66c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 806c66e:	7afb      	ldrb	r3, [r7, #11]
 806c670:	2b00      	cmp	r3, #0
 806c672:	d106      	bne.n	806c682 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 806c674:	687b      	ldr	r3, [r7, #4]
 806c676:	6a1b      	ldr	r3, [r3, #32]
 806c678:	22e5      	movs	r2, #229	; 0xe5
 806c67a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 806c67c:	68fb      	ldr	r3, [r7, #12]
 806c67e:	2201      	movs	r2, #1
 806c680:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 806c682:	7afb      	ldrb	r3, [r7, #11]
}
 806c684:	4618      	mov	r0, r3
 806c686:	3710      	adds	r7, #16
 806c688:	46bd      	mov	sp, r7
 806c68a:	bd80      	pop	{r7, pc}

0806c68c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 806c68c:	b580      	push	{r7, lr}
 806c68e:	b088      	sub	sp, #32
 806c690:	af00      	add	r7, sp, #0
 806c692:	6078      	str	r0, [r7, #4]
 806c694:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 806c696:	683b      	ldr	r3, [r7, #0]
 806c698:	681b      	ldr	r3, [r3, #0]
 806c69a:	60fb      	str	r3, [r7, #12]
 806c69c:	687b      	ldr	r3, [r7, #4]
 806c69e:	3324      	adds	r3, #36	; 0x24
 806c6a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 806c6a2:	220b      	movs	r2, #11
 806c6a4:	2120      	movs	r1, #32
 806c6a6:	68b8      	ldr	r0, [r7, #8]
 806c6a8:	f7fe ff69 	bl	806b57e <mem_set>
	si = i = 0; ni = 8;
 806c6ac:	2300      	movs	r3, #0
 806c6ae:	613b      	str	r3, [r7, #16]
 806c6b0:	693b      	ldr	r3, [r7, #16]
 806c6b2:	61fb      	str	r3, [r7, #28]
 806c6b4:	2308      	movs	r3, #8
 806c6b6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 806c6b8:	69fb      	ldr	r3, [r7, #28]
 806c6ba:	1c5a      	adds	r2, r3, #1
 806c6bc:	61fa      	str	r2, [r7, #28]
 806c6be:	68fa      	ldr	r2, [r7, #12]
 806c6c0:	4413      	add	r3, r2
 806c6c2:	781b      	ldrb	r3, [r3, #0]
 806c6c4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 806c6c6:	7efb      	ldrb	r3, [r7, #27]
 806c6c8:	2b20      	cmp	r3, #32
 806c6ca:	d94e      	bls.n	806c76a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 806c6cc:	7efb      	ldrb	r3, [r7, #27]
 806c6ce:	2b2f      	cmp	r3, #47	; 0x2f
 806c6d0:	d006      	beq.n	806c6e0 <create_name+0x54>
 806c6d2:	7efb      	ldrb	r3, [r7, #27]
 806c6d4:	2b5c      	cmp	r3, #92	; 0x5c
 806c6d6:	d110      	bne.n	806c6fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 806c6d8:	e002      	b.n	806c6e0 <create_name+0x54>
 806c6da:	69fb      	ldr	r3, [r7, #28]
 806c6dc:	3301      	adds	r3, #1
 806c6de:	61fb      	str	r3, [r7, #28]
 806c6e0:	68fa      	ldr	r2, [r7, #12]
 806c6e2:	69fb      	ldr	r3, [r7, #28]
 806c6e4:	4413      	add	r3, r2
 806c6e6:	781b      	ldrb	r3, [r3, #0]
 806c6e8:	2b2f      	cmp	r3, #47	; 0x2f
 806c6ea:	d0f6      	beq.n	806c6da <create_name+0x4e>
 806c6ec:	68fa      	ldr	r2, [r7, #12]
 806c6ee:	69fb      	ldr	r3, [r7, #28]
 806c6f0:	4413      	add	r3, r2
 806c6f2:	781b      	ldrb	r3, [r3, #0]
 806c6f4:	2b5c      	cmp	r3, #92	; 0x5c
 806c6f6:	d0f0      	beq.n	806c6da <create_name+0x4e>
			break;
 806c6f8:	e038      	b.n	806c76c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 806c6fa:	7efb      	ldrb	r3, [r7, #27]
 806c6fc:	2b2e      	cmp	r3, #46	; 0x2e
 806c6fe:	d003      	beq.n	806c708 <create_name+0x7c>
 806c700:	693a      	ldr	r2, [r7, #16]
 806c702:	697b      	ldr	r3, [r7, #20]
 806c704:	429a      	cmp	r2, r3
 806c706:	d30c      	bcc.n	806c722 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 806c708:	697b      	ldr	r3, [r7, #20]
 806c70a:	2b0b      	cmp	r3, #11
 806c70c:	d002      	beq.n	806c714 <create_name+0x88>
 806c70e:	7efb      	ldrb	r3, [r7, #27]
 806c710:	2b2e      	cmp	r3, #46	; 0x2e
 806c712:	d001      	beq.n	806c718 <create_name+0x8c>
 806c714:	2306      	movs	r3, #6
 806c716:	e044      	b.n	806c7a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 806c718:	2308      	movs	r3, #8
 806c71a:	613b      	str	r3, [r7, #16]
 806c71c:	230b      	movs	r3, #11
 806c71e:	617b      	str	r3, [r7, #20]
			continue;
 806c720:	e022      	b.n	806c768 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 806c722:	f997 301b 	ldrsb.w	r3, [r7, #27]
 806c726:	2b00      	cmp	r3, #0
 806c728:	da04      	bge.n	806c734 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 806c72a:	7efb      	ldrb	r3, [r7, #27]
 806c72c:	3b80      	subs	r3, #128	; 0x80
 806c72e:	4a1f      	ldr	r2, [pc, #124]	; (806c7ac <create_name+0x120>)
 806c730:	5cd3      	ldrb	r3, [r2, r3]
 806c732:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 806c734:	7efb      	ldrb	r3, [r7, #27]
 806c736:	4619      	mov	r1, r3
 806c738:	481d      	ldr	r0, [pc, #116]	; (806c7b0 <create_name+0x124>)
 806c73a:	f7fe ff62 	bl	806b602 <chk_chr>
 806c73e:	4603      	mov	r3, r0
 806c740:	2b00      	cmp	r3, #0
 806c742:	d001      	beq.n	806c748 <create_name+0xbc>
 806c744:	2306      	movs	r3, #6
 806c746:	e02c      	b.n	806c7a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 806c748:	7efb      	ldrb	r3, [r7, #27]
 806c74a:	2b60      	cmp	r3, #96	; 0x60
 806c74c:	d905      	bls.n	806c75a <create_name+0xce>
 806c74e:	7efb      	ldrb	r3, [r7, #27]
 806c750:	2b7a      	cmp	r3, #122	; 0x7a
 806c752:	d802      	bhi.n	806c75a <create_name+0xce>
 806c754:	7efb      	ldrb	r3, [r7, #27]
 806c756:	3b20      	subs	r3, #32
 806c758:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 806c75a:	693b      	ldr	r3, [r7, #16]
 806c75c:	1c5a      	adds	r2, r3, #1
 806c75e:	613a      	str	r2, [r7, #16]
 806c760:	68ba      	ldr	r2, [r7, #8]
 806c762:	4413      	add	r3, r2
 806c764:	7efa      	ldrb	r2, [r7, #27]
 806c766:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 806c768:	e7a6      	b.n	806c6b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 806c76a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 806c76c:	68fa      	ldr	r2, [r7, #12]
 806c76e:	69fb      	ldr	r3, [r7, #28]
 806c770:	441a      	add	r2, r3
 806c772:	683b      	ldr	r3, [r7, #0]
 806c774:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 806c776:	693b      	ldr	r3, [r7, #16]
 806c778:	2b00      	cmp	r3, #0
 806c77a:	d101      	bne.n	806c780 <create_name+0xf4>
 806c77c:	2306      	movs	r3, #6
 806c77e:	e010      	b.n	806c7a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 806c780:	68bb      	ldr	r3, [r7, #8]
 806c782:	781b      	ldrb	r3, [r3, #0]
 806c784:	2be5      	cmp	r3, #229	; 0xe5
 806c786:	d102      	bne.n	806c78e <create_name+0x102>
 806c788:	68bb      	ldr	r3, [r7, #8]
 806c78a:	2205      	movs	r2, #5
 806c78c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 806c78e:	7efb      	ldrb	r3, [r7, #27]
 806c790:	2b20      	cmp	r3, #32
 806c792:	d801      	bhi.n	806c798 <create_name+0x10c>
 806c794:	2204      	movs	r2, #4
 806c796:	e000      	b.n	806c79a <create_name+0x10e>
 806c798:	2200      	movs	r2, #0
 806c79a:	68bb      	ldr	r3, [r7, #8]
 806c79c:	330b      	adds	r3, #11
 806c79e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 806c7a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 806c7a2:	4618      	mov	r0, r3
 806c7a4:	3720      	adds	r7, #32
 806c7a6:	46bd      	mov	sp, r7
 806c7a8:	bd80      	pop	{r7, pc}
 806c7aa:	bf00      	nop
 806c7ac:	080774dc 	.word	0x080774dc
 806c7b0:	08077314 	.word	0x08077314

0806c7b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 806c7b4:	b580      	push	{r7, lr}
 806c7b6:	b086      	sub	sp, #24
 806c7b8:	af00      	add	r7, sp, #0
 806c7ba:	6078      	str	r0, [r7, #4]
 806c7bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 806c7be:	687b      	ldr	r3, [r7, #4]
 806c7c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 806c7c2:	693b      	ldr	r3, [r7, #16]
 806c7c4:	681b      	ldr	r3, [r3, #0]
 806c7c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 806c7c8:	e002      	b.n	806c7d0 <follow_path+0x1c>
 806c7ca:	683b      	ldr	r3, [r7, #0]
 806c7cc:	3301      	adds	r3, #1
 806c7ce:	603b      	str	r3, [r7, #0]
 806c7d0:	683b      	ldr	r3, [r7, #0]
 806c7d2:	781b      	ldrb	r3, [r3, #0]
 806c7d4:	2b2f      	cmp	r3, #47	; 0x2f
 806c7d6:	d0f8      	beq.n	806c7ca <follow_path+0x16>
 806c7d8:	683b      	ldr	r3, [r7, #0]
 806c7da:	781b      	ldrb	r3, [r3, #0]
 806c7dc:	2b5c      	cmp	r3, #92	; 0x5c
 806c7de:	d0f4      	beq.n	806c7ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 806c7e0:	693b      	ldr	r3, [r7, #16]
 806c7e2:	2200      	movs	r2, #0
 806c7e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 806c7e6:	683b      	ldr	r3, [r7, #0]
 806c7e8:	781b      	ldrb	r3, [r3, #0]
 806c7ea:	2b1f      	cmp	r3, #31
 806c7ec:	d80a      	bhi.n	806c804 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 806c7ee:	687b      	ldr	r3, [r7, #4]
 806c7f0:	2280      	movs	r2, #128	; 0x80
 806c7f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 806c7f6:	2100      	movs	r1, #0
 806c7f8:	6878      	ldr	r0, [r7, #4]
 806c7fa:	f7ff fc7f 	bl	806c0fc <dir_sdi>
 806c7fe:	4603      	mov	r3, r0
 806c800:	75fb      	strb	r3, [r7, #23]
 806c802:	e043      	b.n	806c88c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 806c804:	463b      	mov	r3, r7
 806c806:	4619      	mov	r1, r3
 806c808:	6878      	ldr	r0, [r7, #4]
 806c80a:	f7ff ff3f 	bl	806c68c <create_name>
 806c80e:	4603      	mov	r3, r0
 806c810:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 806c812:	7dfb      	ldrb	r3, [r7, #23]
 806c814:	2b00      	cmp	r3, #0
 806c816:	d134      	bne.n	806c882 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 806c818:	6878      	ldr	r0, [r7, #4]
 806c81a:	f7ff fe92 	bl	806c542 <dir_find>
 806c81e:	4603      	mov	r3, r0
 806c820:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 806c822:	687b      	ldr	r3, [r7, #4]
 806c824:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 806c828:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 806c82a:	7dfb      	ldrb	r3, [r7, #23]
 806c82c:	2b00      	cmp	r3, #0
 806c82e:	d00a      	beq.n	806c846 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 806c830:	7dfb      	ldrb	r3, [r7, #23]
 806c832:	2b04      	cmp	r3, #4
 806c834:	d127      	bne.n	806c886 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 806c836:	7afb      	ldrb	r3, [r7, #11]
 806c838:	f003 0304 	and.w	r3, r3, #4
 806c83c:	2b00      	cmp	r3, #0
 806c83e:	d122      	bne.n	806c886 <follow_path+0xd2>
 806c840:	2305      	movs	r3, #5
 806c842:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 806c844:	e01f      	b.n	806c886 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 806c846:	7afb      	ldrb	r3, [r7, #11]
 806c848:	f003 0304 	and.w	r3, r3, #4
 806c84c:	2b00      	cmp	r3, #0
 806c84e:	d11c      	bne.n	806c88a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 806c850:	693b      	ldr	r3, [r7, #16]
 806c852:	799b      	ldrb	r3, [r3, #6]
 806c854:	f003 0310 	and.w	r3, r3, #16
 806c858:	2b00      	cmp	r3, #0
 806c85a:	d102      	bne.n	806c862 <follow_path+0xae>
				res = FR_NO_PATH; break;
 806c85c:	2305      	movs	r3, #5
 806c85e:	75fb      	strb	r3, [r7, #23]
 806c860:	e014      	b.n	806c88c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 806c862:	68fb      	ldr	r3, [r7, #12]
 806c864:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806c868:	687b      	ldr	r3, [r7, #4]
 806c86a:	695b      	ldr	r3, [r3, #20]
 806c86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806c870:	4413      	add	r3, r2
 806c872:	4619      	mov	r1, r3
 806c874:	68f8      	ldr	r0, [r7, #12]
 806c876:	f7ff fdc8 	bl	806c40a <ld_clust>
 806c87a:	4602      	mov	r2, r0
 806c87c:	693b      	ldr	r3, [r7, #16]
 806c87e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 806c880:	e7c0      	b.n	806c804 <follow_path+0x50>
			if (res != FR_OK) break;
 806c882:	bf00      	nop
 806c884:	e002      	b.n	806c88c <follow_path+0xd8>
				break;
 806c886:	bf00      	nop
 806c888:	e000      	b.n	806c88c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 806c88a:	bf00      	nop
			}
		}
	}

	return res;
 806c88c:	7dfb      	ldrb	r3, [r7, #23]
}
 806c88e:	4618      	mov	r0, r3
 806c890:	3718      	adds	r7, #24
 806c892:	46bd      	mov	sp, r7
 806c894:	bd80      	pop	{r7, pc}

0806c896 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 806c896:	b480      	push	{r7}
 806c898:	b087      	sub	sp, #28
 806c89a:	af00      	add	r7, sp, #0
 806c89c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 806c89e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806c8a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 806c8a4:	687b      	ldr	r3, [r7, #4]
 806c8a6:	681b      	ldr	r3, [r3, #0]
 806c8a8:	2b00      	cmp	r3, #0
 806c8aa:	d031      	beq.n	806c910 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 806c8ac:	687b      	ldr	r3, [r7, #4]
 806c8ae:	681b      	ldr	r3, [r3, #0]
 806c8b0:	617b      	str	r3, [r7, #20]
 806c8b2:	e002      	b.n	806c8ba <get_ldnumber+0x24>
 806c8b4:	697b      	ldr	r3, [r7, #20]
 806c8b6:	3301      	adds	r3, #1
 806c8b8:	617b      	str	r3, [r7, #20]
 806c8ba:	697b      	ldr	r3, [r7, #20]
 806c8bc:	781b      	ldrb	r3, [r3, #0]
 806c8be:	2b20      	cmp	r3, #32
 806c8c0:	d903      	bls.n	806c8ca <get_ldnumber+0x34>
 806c8c2:	697b      	ldr	r3, [r7, #20]
 806c8c4:	781b      	ldrb	r3, [r3, #0]
 806c8c6:	2b3a      	cmp	r3, #58	; 0x3a
 806c8c8:	d1f4      	bne.n	806c8b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 806c8ca:	697b      	ldr	r3, [r7, #20]
 806c8cc:	781b      	ldrb	r3, [r3, #0]
 806c8ce:	2b3a      	cmp	r3, #58	; 0x3a
 806c8d0:	d11c      	bne.n	806c90c <get_ldnumber+0x76>
			tp = *path;
 806c8d2:	687b      	ldr	r3, [r7, #4]
 806c8d4:	681b      	ldr	r3, [r3, #0]
 806c8d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 806c8d8:	68fb      	ldr	r3, [r7, #12]
 806c8da:	1c5a      	adds	r2, r3, #1
 806c8dc:	60fa      	str	r2, [r7, #12]
 806c8de:	781b      	ldrb	r3, [r3, #0]
 806c8e0:	3b30      	subs	r3, #48	; 0x30
 806c8e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 806c8e4:	68bb      	ldr	r3, [r7, #8]
 806c8e6:	2b09      	cmp	r3, #9
 806c8e8:	d80e      	bhi.n	806c908 <get_ldnumber+0x72>
 806c8ea:	68fa      	ldr	r2, [r7, #12]
 806c8ec:	697b      	ldr	r3, [r7, #20]
 806c8ee:	429a      	cmp	r2, r3
 806c8f0:	d10a      	bne.n	806c908 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 806c8f2:	68bb      	ldr	r3, [r7, #8]
 806c8f4:	2b00      	cmp	r3, #0
 806c8f6:	d107      	bne.n	806c908 <get_ldnumber+0x72>
					vol = (int)i;
 806c8f8:	68bb      	ldr	r3, [r7, #8]
 806c8fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 806c8fc:	697b      	ldr	r3, [r7, #20]
 806c8fe:	3301      	adds	r3, #1
 806c900:	617b      	str	r3, [r7, #20]
 806c902:	687b      	ldr	r3, [r7, #4]
 806c904:	697a      	ldr	r2, [r7, #20]
 806c906:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 806c908:	693b      	ldr	r3, [r7, #16]
 806c90a:	e002      	b.n	806c912 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 806c90c:	2300      	movs	r3, #0
 806c90e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 806c910:	693b      	ldr	r3, [r7, #16]
}
 806c912:	4618      	mov	r0, r3
 806c914:	371c      	adds	r7, #28
 806c916:	46bd      	mov	sp, r7
 806c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 806c91c:	4770      	bx	lr
	...

0806c920 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 806c920:	b580      	push	{r7, lr}
 806c922:	b082      	sub	sp, #8
 806c924:	af00      	add	r7, sp, #0
 806c926:	6078      	str	r0, [r7, #4]
 806c928:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 806c92a:	687b      	ldr	r3, [r7, #4]
 806c92c:	2200      	movs	r2, #0
 806c92e:	70da      	strb	r2, [r3, #3]
 806c930:	687b      	ldr	r3, [r7, #4]
 806c932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806c936:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 806c938:	6839      	ldr	r1, [r7, #0]
 806c93a:	6878      	ldr	r0, [r7, #4]
 806c93c:	f7ff f85e 	bl	806b9fc <move_window>
 806c940:	4603      	mov	r3, r0
 806c942:	2b00      	cmp	r3, #0
 806c944:	d001      	beq.n	806c94a <check_fs+0x2a>
 806c946:	2304      	movs	r3, #4
 806c948:	e038      	b.n	806c9bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 806c94a:	687b      	ldr	r3, [r7, #4]
 806c94c:	3334      	adds	r3, #52	; 0x34
 806c94e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 806c952:	4618      	mov	r0, r3
 806c954:	f7fe fd70 	bl	806b438 <ld_word>
 806c958:	4603      	mov	r3, r0
 806c95a:	461a      	mov	r2, r3
 806c95c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 806c960:	429a      	cmp	r2, r3
 806c962:	d001      	beq.n	806c968 <check_fs+0x48>
 806c964:	2303      	movs	r3, #3
 806c966:	e029      	b.n	806c9bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 806c968:	687b      	ldr	r3, [r7, #4]
 806c96a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806c96e:	2be9      	cmp	r3, #233	; 0xe9
 806c970:	d009      	beq.n	806c986 <check_fs+0x66>
 806c972:	687b      	ldr	r3, [r7, #4]
 806c974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 806c978:	2beb      	cmp	r3, #235	; 0xeb
 806c97a:	d11e      	bne.n	806c9ba <check_fs+0x9a>
 806c97c:	687b      	ldr	r3, [r7, #4]
 806c97e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 806c982:	2b90      	cmp	r3, #144	; 0x90
 806c984:	d119      	bne.n	806c9ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 806c986:	687b      	ldr	r3, [r7, #4]
 806c988:	3334      	adds	r3, #52	; 0x34
 806c98a:	3336      	adds	r3, #54	; 0x36
 806c98c:	4618      	mov	r0, r3
 806c98e:	f7fe fd6b 	bl	806b468 <ld_dword>
 806c992:	4603      	mov	r3, r0
 806c994:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 806c998:	4a0a      	ldr	r2, [pc, #40]	; (806c9c4 <check_fs+0xa4>)
 806c99a:	4293      	cmp	r3, r2
 806c99c:	d101      	bne.n	806c9a2 <check_fs+0x82>
 806c99e:	2300      	movs	r3, #0
 806c9a0:	e00c      	b.n	806c9bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 806c9a2:	687b      	ldr	r3, [r7, #4]
 806c9a4:	3334      	adds	r3, #52	; 0x34
 806c9a6:	3352      	adds	r3, #82	; 0x52
 806c9a8:	4618      	mov	r0, r3
 806c9aa:	f7fe fd5d 	bl	806b468 <ld_dword>
 806c9ae:	4603      	mov	r3, r0
 806c9b0:	4a05      	ldr	r2, [pc, #20]	; (806c9c8 <check_fs+0xa8>)
 806c9b2:	4293      	cmp	r3, r2
 806c9b4:	d101      	bne.n	806c9ba <check_fs+0x9a>
 806c9b6:	2300      	movs	r3, #0
 806c9b8:	e000      	b.n	806c9bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 806c9ba:	2302      	movs	r3, #2
}
 806c9bc:	4618      	mov	r0, r3
 806c9be:	3708      	adds	r7, #8
 806c9c0:	46bd      	mov	sp, r7
 806c9c2:	bd80      	pop	{r7, pc}
 806c9c4:	00544146 	.word	0x00544146
 806c9c8:	33544146 	.word	0x33544146

0806c9cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 806c9cc:	b580      	push	{r7, lr}
 806c9ce:	b096      	sub	sp, #88	; 0x58
 806c9d0:	af00      	add	r7, sp, #0
 806c9d2:	60f8      	str	r0, [r7, #12]
 806c9d4:	60b9      	str	r1, [r7, #8]
 806c9d6:	4613      	mov	r3, r2
 806c9d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 806c9da:	68bb      	ldr	r3, [r7, #8]
 806c9dc:	2200      	movs	r2, #0
 806c9de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 806c9e0:	68f8      	ldr	r0, [r7, #12]
 806c9e2:	f7ff ff58 	bl	806c896 <get_ldnumber>
 806c9e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 806c9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806c9ea:	2b00      	cmp	r3, #0
 806c9ec:	da01      	bge.n	806c9f2 <find_volume+0x26>
 806c9ee:	230b      	movs	r3, #11
 806c9f0:	e236      	b.n	806ce60 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 806c9f2:	4aac      	ldr	r2, [pc, #688]	; (806cca4 <find_volume+0x2d8>)
 806c9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806c9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 806c9fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 806c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806c9fe:	2b00      	cmp	r3, #0
 806ca00:	d101      	bne.n	806ca06 <find_volume+0x3a>
 806ca02:	230c      	movs	r3, #12
 806ca04:	e22c      	b.n	806ce60 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 806ca06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806ca08:	f7fe fe16 	bl	806b638 <lock_fs>
 806ca0c:	4603      	mov	r3, r0
 806ca0e:	2b00      	cmp	r3, #0
 806ca10:	d101      	bne.n	806ca16 <find_volume+0x4a>
 806ca12:	230f      	movs	r3, #15
 806ca14:	e224      	b.n	806ce60 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 806ca16:	68bb      	ldr	r3, [r7, #8]
 806ca18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806ca1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 806ca1c:	79fb      	ldrb	r3, [r7, #7]
 806ca1e:	f023 0301 	bic.w	r3, r3, #1
 806ca22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 806ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ca26:	781b      	ldrb	r3, [r3, #0]
 806ca28:	2b00      	cmp	r3, #0
 806ca2a:	d01a      	beq.n	806ca62 <find_volume+0x96>
		stat = disk_status(fs->drv);
 806ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ca2e:	785b      	ldrb	r3, [r3, #1]
 806ca30:	4618      	mov	r0, r3
 806ca32:	f7fe fc63 	bl	806b2fc <disk_status>
 806ca36:	4603      	mov	r3, r0
 806ca38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 806ca3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806ca40:	f003 0301 	and.w	r3, r3, #1
 806ca44:	2b00      	cmp	r3, #0
 806ca46:	d10c      	bne.n	806ca62 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 806ca48:	79fb      	ldrb	r3, [r7, #7]
 806ca4a:	2b00      	cmp	r3, #0
 806ca4c:	d007      	beq.n	806ca5e <find_volume+0x92>
 806ca4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806ca52:	f003 0304 	and.w	r3, r3, #4
 806ca56:	2b00      	cmp	r3, #0
 806ca58:	d001      	beq.n	806ca5e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 806ca5a:	230a      	movs	r3, #10
 806ca5c:	e200      	b.n	806ce60 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 806ca5e:	2300      	movs	r3, #0
 806ca60:	e1fe      	b.n	806ce60 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 806ca62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ca64:	2200      	movs	r2, #0
 806ca66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 806ca68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 806ca6a:	b2da      	uxtb	r2, r3
 806ca6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ca6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 806ca70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ca72:	785b      	ldrb	r3, [r3, #1]
 806ca74:	4618      	mov	r0, r3
 806ca76:	f7fe fc5b 	bl	806b330 <disk_initialize>
 806ca7a:	4603      	mov	r3, r0
 806ca7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 806ca80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806ca84:	f003 0301 	and.w	r3, r3, #1
 806ca88:	2b00      	cmp	r3, #0
 806ca8a:	d001      	beq.n	806ca90 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 806ca8c:	2303      	movs	r3, #3
 806ca8e:	e1e7      	b.n	806ce60 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 806ca90:	79fb      	ldrb	r3, [r7, #7]
 806ca92:	2b00      	cmp	r3, #0
 806ca94:	d007      	beq.n	806caa6 <find_volume+0xda>
 806ca96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806ca9a:	f003 0304 	and.w	r3, r3, #4
 806ca9e:	2b00      	cmp	r3, #0
 806caa0:	d001      	beq.n	806caa6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 806caa2:	230a      	movs	r3, #10
 806caa4:	e1dc      	b.n	806ce60 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 806caa6:	2300      	movs	r3, #0
 806caa8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 806caaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806caac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806caae:	f7ff ff37 	bl	806c920 <check_fs>
 806cab2:	4603      	mov	r3, r0
 806cab4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 806cab8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cabc:	2b02      	cmp	r3, #2
 806cabe:	d14b      	bne.n	806cb58 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 806cac0:	2300      	movs	r3, #0
 806cac2:	643b      	str	r3, [r7, #64]	; 0x40
 806cac4:	e01f      	b.n	806cb06 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 806cac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cac8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 806cacc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cace:	011b      	lsls	r3, r3, #4
 806cad0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 806cad4:	4413      	add	r3, r2
 806cad6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 806cad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806cada:	3304      	adds	r3, #4
 806cadc:	781b      	ldrb	r3, [r3, #0]
 806cade:	2b00      	cmp	r3, #0
 806cae0:	d006      	beq.n	806caf0 <find_volume+0x124>
 806cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806cae4:	3308      	adds	r3, #8
 806cae6:	4618      	mov	r0, r3
 806cae8:	f7fe fcbe 	bl	806b468 <ld_dword>
 806caec:	4602      	mov	r2, r0
 806caee:	e000      	b.n	806caf2 <find_volume+0x126>
 806caf0:	2200      	movs	r2, #0
 806caf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806caf4:	009b      	lsls	r3, r3, #2
 806caf6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 806cafa:	440b      	add	r3, r1
 806cafc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 806cb00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cb02:	3301      	adds	r3, #1
 806cb04:	643b      	str	r3, [r7, #64]	; 0x40
 806cb06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cb08:	2b03      	cmp	r3, #3
 806cb0a:	d9dc      	bls.n	806cac6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 806cb0c:	2300      	movs	r3, #0
 806cb0e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 806cb10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cb12:	2b00      	cmp	r3, #0
 806cb14:	d002      	beq.n	806cb1c <find_volume+0x150>
 806cb16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cb18:	3b01      	subs	r3, #1
 806cb1a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 806cb1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cb1e:	009b      	lsls	r3, r3, #2
 806cb20:	f107 0258 	add.w	r2, r7, #88	; 0x58
 806cb24:	4413      	add	r3, r2
 806cb26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 806cb2a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 806cb2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806cb2e:	2b00      	cmp	r3, #0
 806cb30:	d005      	beq.n	806cb3e <find_volume+0x172>
 806cb32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806cb34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806cb36:	f7ff fef3 	bl	806c920 <check_fs>
 806cb3a:	4603      	mov	r3, r0
 806cb3c:	e000      	b.n	806cb40 <find_volume+0x174>
 806cb3e:	2303      	movs	r3, #3
 806cb40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 806cb44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cb48:	2b01      	cmp	r3, #1
 806cb4a:	d905      	bls.n	806cb58 <find_volume+0x18c>
 806cb4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cb4e:	3301      	adds	r3, #1
 806cb50:	643b      	str	r3, [r7, #64]	; 0x40
 806cb52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 806cb54:	2b03      	cmp	r3, #3
 806cb56:	d9e1      	bls.n	806cb1c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 806cb58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cb5c:	2b04      	cmp	r3, #4
 806cb5e:	d101      	bne.n	806cb64 <find_volume+0x198>
 806cb60:	2301      	movs	r3, #1
 806cb62:	e17d      	b.n	806ce60 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 806cb64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cb68:	2b01      	cmp	r3, #1
 806cb6a:	d901      	bls.n	806cb70 <find_volume+0x1a4>
 806cb6c:	230d      	movs	r3, #13
 806cb6e:	e177      	b.n	806ce60 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 806cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cb72:	3334      	adds	r3, #52	; 0x34
 806cb74:	330b      	adds	r3, #11
 806cb76:	4618      	mov	r0, r3
 806cb78:	f7fe fc5e 	bl	806b438 <ld_word>
 806cb7c:	4603      	mov	r3, r0
 806cb7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 806cb82:	d001      	beq.n	806cb88 <find_volume+0x1bc>
 806cb84:	230d      	movs	r3, #13
 806cb86:	e16b      	b.n	806ce60 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 806cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cb8a:	3334      	adds	r3, #52	; 0x34
 806cb8c:	3316      	adds	r3, #22
 806cb8e:	4618      	mov	r0, r3
 806cb90:	f7fe fc52 	bl	806b438 <ld_word>
 806cb94:	4603      	mov	r3, r0
 806cb96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 806cb98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806cb9a:	2b00      	cmp	r3, #0
 806cb9c:	d106      	bne.n	806cbac <find_volume+0x1e0>
 806cb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cba0:	3334      	adds	r3, #52	; 0x34
 806cba2:	3324      	adds	r3, #36	; 0x24
 806cba4:	4618      	mov	r0, r3
 806cba6:	f7fe fc5f 	bl	806b468 <ld_dword>
 806cbaa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 806cbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 806cbb0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 806cbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbb4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 806cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 806cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbbe:	789b      	ldrb	r3, [r3, #2]
 806cbc0:	2b01      	cmp	r3, #1
 806cbc2:	d005      	beq.n	806cbd0 <find_volume+0x204>
 806cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbc6:	789b      	ldrb	r3, [r3, #2]
 806cbc8:	2b02      	cmp	r3, #2
 806cbca:	d001      	beq.n	806cbd0 <find_volume+0x204>
 806cbcc:	230d      	movs	r3, #13
 806cbce:	e147      	b.n	806ce60 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 806cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbd2:	789b      	ldrb	r3, [r3, #2]
 806cbd4:	461a      	mov	r2, r3
 806cbd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806cbd8:	fb02 f303 	mul.w	r3, r2, r3
 806cbdc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 806cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 806cbe4:	b29a      	uxth	r2, r3
 806cbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbe8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 806cbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbec:	895b      	ldrh	r3, [r3, #10]
 806cbee:	2b00      	cmp	r3, #0
 806cbf0:	d008      	beq.n	806cc04 <find_volume+0x238>
 806cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbf4:	895b      	ldrh	r3, [r3, #10]
 806cbf6:	461a      	mov	r2, r3
 806cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cbfa:	895b      	ldrh	r3, [r3, #10]
 806cbfc:	3b01      	subs	r3, #1
 806cbfe:	4013      	ands	r3, r2
 806cc00:	2b00      	cmp	r3, #0
 806cc02:	d001      	beq.n	806cc08 <find_volume+0x23c>
 806cc04:	230d      	movs	r3, #13
 806cc06:	e12b      	b.n	806ce60 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 806cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cc0a:	3334      	adds	r3, #52	; 0x34
 806cc0c:	3311      	adds	r3, #17
 806cc0e:	4618      	mov	r0, r3
 806cc10:	f7fe fc12 	bl	806b438 <ld_word>
 806cc14:	4603      	mov	r3, r0
 806cc16:	461a      	mov	r2, r3
 806cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cc1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 806cc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cc1e:	891b      	ldrh	r3, [r3, #8]
 806cc20:	f003 030f 	and.w	r3, r3, #15
 806cc24:	b29b      	uxth	r3, r3
 806cc26:	2b00      	cmp	r3, #0
 806cc28:	d001      	beq.n	806cc2e <find_volume+0x262>
 806cc2a:	230d      	movs	r3, #13
 806cc2c:	e118      	b.n	806ce60 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 806cc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cc30:	3334      	adds	r3, #52	; 0x34
 806cc32:	3313      	adds	r3, #19
 806cc34:	4618      	mov	r0, r3
 806cc36:	f7fe fbff 	bl	806b438 <ld_word>
 806cc3a:	4603      	mov	r3, r0
 806cc3c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 806cc3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806cc40:	2b00      	cmp	r3, #0
 806cc42:	d106      	bne.n	806cc52 <find_volume+0x286>
 806cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cc46:	3334      	adds	r3, #52	; 0x34
 806cc48:	3320      	adds	r3, #32
 806cc4a:	4618      	mov	r0, r3
 806cc4c:	f7fe fc0c 	bl	806b468 <ld_dword>
 806cc50:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 806cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cc54:	3334      	adds	r3, #52	; 0x34
 806cc56:	330e      	adds	r3, #14
 806cc58:	4618      	mov	r0, r3
 806cc5a:	f7fe fbed 	bl	806b438 <ld_word>
 806cc5e:	4603      	mov	r3, r0
 806cc60:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 806cc62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 806cc64:	2b00      	cmp	r3, #0
 806cc66:	d101      	bne.n	806cc6c <find_volume+0x2a0>
 806cc68:	230d      	movs	r3, #13
 806cc6a:	e0f9      	b.n	806ce60 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 806cc6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 806cc6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806cc70:	4413      	add	r3, r2
 806cc72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806cc74:	8912      	ldrh	r2, [r2, #8]
 806cc76:	0912      	lsrs	r2, r2, #4
 806cc78:	b292      	uxth	r2, r2
 806cc7a:	4413      	add	r3, r2
 806cc7c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 806cc7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 806cc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806cc82:	429a      	cmp	r2, r3
 806cc84:	d201      	bcs.n	806cc8a <find_volume+0x2be>
 806cc86:	230d      	movs	r3, #13
 806cc88:	e0ea      	b.n	806ce60 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 806cc8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 806cc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806cc8e:	1ad3      	subs	r3, r2, r3
 806cc90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 806cc92:	8952      	ldrh	r2, [r2, #10]
 806cc94:	fbb3 f3f2 	udiv	r3, r3, r2
 806cc98:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 806cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806cc9c:	2b00      	cmp	r3, #0
 806cc9e:	d103      	bne.n	806cca8 <find_volume+0x2dc>
 806cca0:	230d      	movs	r3, #13
 806cca2:	e0dd      	b.n	806ce60 <find_volume+0x494>
 806cca4:	20000424 	.word	0x20000424
		fmt = FS_FAT32;
 806cca8:	2303      	movs	r3, #3
 806ccaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 806ccae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806ccb0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 806ccb4:	4293      	cmp	r3, r2
 806ccb6:	d802      	bhi.n	806ccbe <find_volume+0x2f2>
 806ccb8:	2302      	movs	r3, #2
 806ccba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 806ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806ccc0:	f640 72f5 	movw	r2, #4085	; 0xff5
 806ccc4:	4293      	cmp	r3, r2
 806ccc6:	d802      	bhi.n	806ccce <find_volume+0x302>
 806ccc8:	2301      	movs	r3, #1
 806ccca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 806ccce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806ccd0:	1c9a      	adds	r2, r3, #2
 806ccd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ccd4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 806ccd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ccd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 806ccda:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 806ccdc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 806ccde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806cce0:	441a      	add	r2, r3
 806cce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cce4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 806cce6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 806cce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806ccea:	441a      	add	r2, r3
 806ccec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ccee:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 806ccf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806ccf4:	2b03      	cmp	r3, #3
 806ccf6:	d11e      	bne.n	806cd36 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 806ccf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ccfa:	3334      	adds	r3, #52	; 0x34
 806ccfc:	332a      	adds	r3, #42	; 0x2a
 806ccfe:	4618      	mov	r0, r3
 806cd00:	f7fe fb9a 	bl	806b438 <ld_word>
 806cd04:	4603      	mov	r3, r0
 806cd06:	2b00      	cmp	r3, #0
 806cd08:	d001      	beq.n	806cd0e <find_volume+0x342>
 806cd0a:	230d      	movs	r3, #13
 806cd0c:	e0a8      	b.n	806ce60 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 806cd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd10:	891b      	ldrh	r3, [r3, #8]
 806cd12:	2b00      	cmp	r3, #0
 806cd14:	d001      	beq.n	806cd1a <find_volume+0x34e>
 806cd16:	230d      	movs	r3, #13
 806cd18:	e0a2      	b.n	806ce60 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 806cd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd1c:	3334      	adds	r3, #52	; 0x34
 806cd1e:	332c      	adds	r3, #44	; 0x2c
 806cd20:	4618      	mov	r0, r3
 806cd22:	f7fe fba1 	bl	806b468 <ld_dword>
 806cd26:	4602      	mov	r2, r0
 806cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd2a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 806cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd2e:	699b      	ldr	r3, [r3, #24]
 806cd30:	009b      	lsls	r3, r3, #2
 806cd32:	647b      	str	r3, [r7, #68]	; 0x44
 806cd34:	e01f      	b.n	806cd76 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 806cd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd38:	891b      	ldrh	r3, [r3, #8]
 806cd3a:	2b00      	cmp	r3, #0
 806cd3c:	d101      	bne.n	806cd42 <find_volume+0x376>
 806cd3e:	230d      	movs	r3, #13
 806cd40:	e08e      	b.n	806ce60 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 806cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 806cd46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806cd48:	441a      	add	r2, r3
 806cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd4c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 806cd4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cd52:	2b02      	cmp	r3, #2
 806cd54:	d103      	bne.n	806cd5e <find_volume+0x392>
 806cd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd58:	699b      	ldr	r3, [r3, #24]
 806cd5a:	005b      	lsls	r3, r3, #1
 806cd5c:	e00a      	b.n	806cd74 <find_volume+0x3a8>
 806cd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd60:	699a      	ldr	r2, [r3, #24]
 806cd62:	4613      	mov	r3, r2
 806cd64:	005b      	lsls	r3, r3, #1
 806cd66:	4413      	add	r3, r2
 806cd68:	085a      	lsrs	r2, r3, #1
 806cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd6c:	699b      	ldr	r3, [r3, #24]
 806cd6e:	f003 0301 	and.w	r3, r3, #1
 806cd72:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 806cd74:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 806cd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd78:	69da      	ldr	r2, [r3, #28]
 806cd7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 806cd7c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 806cd80:	0a5b      	lsrs	r3, r3, #9
 806cd82:	429a      	cmp	r2, r3
 806cd84:	d201      	bcs.n	806cd8a <find_volume+0x3be>
 806cd86:	230d      	movs	r3, #13
 806cd88:	e06a      	b.n	806ce60 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 806cd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806cd90:	615a      	str	r2, [r3, #20]
 806cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd94:	695a      	ldr	r2, [r3, #20]
 806cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd98:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 806cd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cd9c:	2280      	movs	r2, #128	; 0x80
 806cd9e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 806cda0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 806cda4:	2b03      	cmp	r3, #3
 806cda6:	d149      	bne.n	806ce3c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 806cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cdaa:	3334      	adds	r3, #52	; 0x34
 806cdac:	3330      	adds	r3, #48	; 0x30
 806cdae:	4618      	mov	r0, r3
 806cdb0:	f7fe fb42 	bl	806b438 <ld_word>
 806cdb4:	4603      	mov	r3, r0
 806cdb6:	2b01      	cmp	r3, #1
 806cdb8:	d140      	bne.n	806ce3c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 806cdba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 806cdbc:	3301      	adds	r3, #1
 806cdbe:	4619      	mov	r1, r3
 806cdc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806cdc2:	f7fe fe1b 	bl	806b9fc <move_window>
 806cdc6:	4603      	mov	r3, r0
 806cdc8:	2b00      	cmp	r3, #0
 806cdca:	d137      	bne.n	806ce3c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 806cdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cdce:	2200      	movs	r2, #0
 806cdd0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 806cdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cdd4:	3334      	adds	r3, #52	; 0x34
 806cdd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 806cdda:	4618      	mov	r0, r3
 806cddc:	f7fe fb2c 	bl	806b438 <ld_word>
 806cde0:	4603      	mov	r3, r0
 806cde2:	461a      	mov	r2, r3
 806cde4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 806cde8:	429a      	cmp	r2, r3
 806cdea:	d127      	bne.n	806ce3c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 806cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806cdee:	3334      	adds	r3, #52	; 0x34
 806cdf0:	4618      	mov	r0, r3
 806cdf2:	f7fe fb39 	bl	806b468 <ld_dword>
 806cdf6:	4603      	mov	r3, r0
 806cdf8:	4a1b      	ldr	r2, [pc, #108]	; (806ce68 <find_volume+0x49c>)
 806cdfa:	4293      	cmp	r3, r2
 806cdfc:	d11e      	bne.n	806ce3c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 806cdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce00:	3334      	adds	r3, #52	; 0x34
 806ce02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 806ce06:	4618      	mov	r0, r3
 806ce08:	f7fe fb2e 	bl	806b468 <ld_dword>
 806ce0c:	4603      	mov	r3, r0
 806ce0e:	4a17      	ldr	r2, [pc, #92]	; (806ce6c <find_volume+0x4a0>)
 806ce10:	4293      	cmp	r3, r2
 806ce12:	d113      	bne.n	806ce3c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 806ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce16:	3334      	adds	r3, #52	; 0x34
 806ce18:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 806ce1c:	4618      	mov	r0, r3
 806ce1e:	f7fe fb23 	bl	806b468 <ld_dword>
 806ce22:	4602      	mov	r2, r0
 806ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce26:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 806ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce2a:	3334      	adds	r3, #52	; 0x34
 806ce2c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 806ce30:	4618      	mov	r0, r3
 806ce32:	f7fe fb19 	bl	806b468 <ld_dword>
 806ce36:	4602      	mov	r2, r0
 806ce38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce3a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 806ce3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce3e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 806ce42:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 806ce44:	4b0a      	ldr	r3, [pc, #40]	; (806ce70 <find_volume+0x4a4>)
 806ce46:	881b      	ldrh	r3, [r3, #0]
 806ce48:	3301      	adds	r3, #1
 806ce4a:	b29a      	uxth	r2, r3
 806ce4c:	4b08      	ldr	r3, [pc, #32]	; (806ce70 <find_volume+0x4a4>)
 806ce4e:	801a      	strh	r2, [r3, #0]
 806ce50:	4b07      	ldr	r3, [pc, #28]	; (806ce70 <find_volume+0x4a4>)
 806ce52:	881a      	ldrh	r2, [r3, #0]
 806ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ce56:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 806ce58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806ce5a:	f7fe fd67 	bl	806b92c <clear_lock>
#endif
	return FR_OK;
 806ce5e:	2300      	movs	r3, #0
}
 806ce60:	4618      	mov	r0, r3
 806ce62:	3758      	adds	r7, #88	; 0x58
 806ce64:	46bd      	mov	sp, r7
 806ce66:	bd80      	pop	{r7, pc}
 806ce68:	41615252 	.word	0x41615252
 806ce6c:	61417272 	.word	0x61417272
 806ce70:	20000428 	.word	0x20000428

0806ce74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 806ce74:	b580      	push	{r7, lr}
 806ce76:	b084      	sub	sp, #16
 806ce78:	af00      	add	r7, sp, #0
 806ce7a:	6078      	str	r0, [r7, #4]
 806ce7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 806ce7e:	2309      	movs	r3, #9
 806ce80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 806ce82:	687b      	ldr	r3, [r7, #4]
 806ce84:	2b00      	cmp	r3, #0
 806ce86:	d02e      	beq.n	806cee6 <validate+0x72>
 806ce88:	687b      	ldr	r3, [r7, #4]
 806ce8a:	681b      	ldr	r3, [r3, #0]
 806ce8c:	2b00      	cmp	r3, #0
 806ce8e:	d02a      	beq.n	806cee6 <validate+0x72>
 806ce90:	687b      	ldr	r3, [r7, #4]
 806ce92:	681b      	ldr	r3, [r3, #0]
 806ce94:	781b      	ldrb	r3, [r3, #0]
 806ce96:	2b00      	cmp	r3, #0
 806ce98:	d025      	beq.n	806cee6 <validate+0x72>
 806ce9a:	687b      	ldr	r3, [r7, #4]
 806ce9c:	889a      	ldrh	r2, [r3, #4]
 806ce9e:	687b      	ldr	r3, [r7, #4]
 806cea0:	681b      	ldr	r3, [r3, #0]
 806cea2:	88db      	ldrh	r3, [r3, #6]
 806cea4:	429a      	cmp	r2, r3
 806cea6:	d11e      	bne.n	806cee6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 806cea8:	687b      	ldr	r3, [r7, #4]
 806ceaa:	681b      	ldr	r3, [r3, #0]
 806ceac:	4618      	mov	r0, r3
 806ceae:	f7fe fbc3 	bl	806b638 <lock_fs>
 806ceb2:	4603      	mov	r3, r0
 806ceb4:	2b00      	cmp	r3, #0
 806ceb6:	d014      	beq.n	806cee2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 806ceb8:	687b      	ldr	r3, [r7, #4]
 806ceba:	681b      	ldr	r3, [r3, #0]
 806cebc:	785b      	ldrb	r3, [r3, #1]
 806cebe:	4618      	mov	r0, r3
 806cec0:	f7fe fa1c 	bl	806b2fc <disk_status>
 806cec4:	4603      	mov	r3, r0
 806cec6:	f003 0301 	and.w	r3, r3, #1
 806ceca:	2b00      	cmp	r3, #0
 806cecc:	d102      	bne.n	806ced4 <validate+0x60>
				res = FR_OK;
 806cece:	2300      	movs	r3, #0
 806ced0:	73fb      	strb	r3, [r7, #15]
 806ced2:	e008      	b.n	806cee6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 806ced4:	687b      	ldr	r3, [r7, #4]
 806ced6:	681b      	ldr	r3, [r3, #0]
 806ced8:	2100      	movs	r1, #0
 806ceda:	4618      	mov	r0, r3
 806cedc:	f7fe fbc2 	bl	806b664 <unlock_fs>
 806cee0:	e001      	b.n	806cee6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 806cee2:	230f      	movs	r3, #15
 806cee4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 806cee6:	7bfb      	ldrb	r3, [r7, #15]
 806cee8:	2b00      	cmp	r3, #0
 806ceea:	d102      	bne.n	806cef2 <validate+0x7e>
 806ceec:	687b      	ldr	r3, [r7, #4]
 806ceee:	681b      	ldr	r3, [r3, #0]
 806cef0:	e000      	b.n	806cef4 <validate+0x80>
 806cef2:	2300      	movs	r3, #0
 806cef4:	683a      	ldr	r2, [r7, #0]
 806cef6:	6013      	str	r3, [r2, #0]
	return res;
 806cef8:	7bfb      	ldrb	r3, [r7, #15]
}
 806cefa:	4618      	mov	r0, r3
 806cefc:	3710      	adds	r7, #16
 806cefe:	46bd      	mov	sp, r7
 806cf00:	bd80      	pop	{r7, pc}
	...

0806cf04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 806cf04:	b580      	push	{r7, lr}
 806cf06:	b088      	sub	sp, #32
 806cf08:	af00      	add	r7, sp, #0
 806cf0a:	60f8      	str	r0, [r7, #12]
 806cf0c:	60b9      	str	r1, [r7, #8]
 806cf0e:	4613      	mov	r3, r2
 806cf10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 806cf12:	68bb      	ldr	r3, [r7, #8]
 806cf14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 806cf16:	f107 0310 	add.w	r3, r7, #16
 806cf1a:	4618      	mov	r0, r3
 806cf1c:	f7ff fcbb 	bl	806c896 <get_ldnumber>
 806cf20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 806cf22:	69fb      	ldr	r3, [r7, #28]
 806cf24:	2b00      	cmp	r3, #0
 806cf26:	da01      	bge.n	806cf2c <f_mount+0x28>
 806cf28:	230b      	movs	r3, #11
 806cf2a:	e048      	b.n	806cfbe <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 806cf2c:	4a26      	ldr	r2, [pc, #152]	; (806cfc8 <f_mount+0xc4>)
 806cf2e:	69fb      	ldr	r3, [r7, #28]
 806cf30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 806cf34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 806cf36:	69bb      	ldr	r3, [r7, #24]
 806cf38:	2b00      	cmp	r3, #0
 806cf3a:	d00f      	beq.n	806cf5c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 806cf3c:	69b8      	ldr	r0, [r7, #24]
 806cf3e:	f7fe fcf5 	bl	806b92c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 806cf42:	69bb      	ldr	r3, [r7, #24]
 806cf44:	68db      	ldr	r3, [r3, #12]
 806cf46:	4618      	mov	r0, r3
 806cf48:	f000 ff34 	bl	806ddb4 <ff_del_syncobj>
 806cf4c:	4603      	mov	r3, r0
 806cf4e:	2b00      	cmp	r3, #0
 806cf50:	d101      	bne.n	806cf56 <f_mount+0x52>
 806cf52:	2302      	movs	r3, #2
 806cf54:	e033      	b.n	806cfbe <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 806cf56:	69bb      	ldr	r3, [r7, #24]
 806cf58:	2200      	movs	r2, #0
 806cf5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 806cf5c:	68fb      	ldr	r3, [r7, #12]
 806cf5e:	2b00      	cmp	r3, #0
 806cf60:	d00f      	beq.n	806cf82 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 806cf62:	68fb      	ldr	r3, [r7, #12]
 806cf64:	2200      	movs	r2, #0
 806cf66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 806cf68:	69fb      	ldr	r3, [r7, #28]
 806cf6a:	b2da      	uxtb	r2, r3
 806cf6c:	68fb      	ldr	r3, [r7, #12]
 806cf6e:	330c      	adds	r3, #12
 806cf70:	4619      	mov	r1, r3
 806cf72:	4610      	mov	r0, r2
 806cf74:	f000 ff03 	bl	806dd7e <ff_cre_syncobj>
 806cf78:	4603      	mov	r3, r0
 806cf7a:	2b00      	cmp	r3, #0
 806cf7c:	d101      	bne.n	806cf82 <f_mount+0x7e>
 806cf7e:	2302      	movs	r3, #2
 806cf80:	e01d      	b.n	806cfbe <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 806cf82:	68fa      	ldr	r2, [r7, #12]
 806cf84:	4910      	ldr	r1, [pc, #64]	; (806cfc8 <f_mount+0xc4>)
 806cf86:	69fb      	ldr	r3, [r7, #28]
 806cf88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 806cf8c:	68fb      	ldr	r3, [r7, #12]
 806cf8e:	2b00      	cmp	r3, #0
 806cf90:	d002      	beq.n	806cf98 <f_mount+0x94>
 806cf92:	79fb      	ldrb	r3, [r7, #7]
 806cf94:	2b01      	cmp	r3, #1
 806cf96:	d001      	beq.n	806cf9c <f_mount+0x98>
 806cf98:	2300      	movs	r3, #0
 806cf9a:	e010      	b.n	806cfbe <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 806cf9c:	f107 010c 	add.w	r1, r7, #12
 806cfa0:	f107 0308 	add.w	r3, r7, #8
 806cfa4:	2200      	movs	r2, #0
 806cfa6:	4618      	mov	r0, r3
 806cfa8:	f7ff fd10 	bl	806c9cc <find_volume>
 806cfac:	4603      	mov	r3, r0
 806cfae:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 806cfb0:	68fb      	ldr	r3, [r7, #12]
 806cfb2:	7dfa      	ldrb	r2, [r7, #23]
 806cfb4:	4611      	mov	r1, r2
 806cfb6:	4618      	mov	r0, r3
 806cfb8:	f7fe fb54 	bl	806b664 <unlock_fs>
 806cfbc:	7dfb      	ldrb	r3, [r7, #23]
}
 806cfbe:	4618      	mov	r0, r3
 806cfc0:	3720      	adds	r7, #32
 806cfc2:	46bd      	mov	sp, r7
 806cfc4:	bd80      	pop	{r7, pc}
 806cfc6:	bf00      	nop
 806cfc8:	20000424 	.word	0x20000424

0806cfcc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 806cfcc:	b580      	push	{r7, lr}
 806cfce:	b098      	sub	sp, #96	; 0x60
 806cfd0:	af00      	add	r7, sp, #0
 806cfd2:	60f8      	str	r0, [r7, #12]
 806cfd4:	60b9      	str	r1, [r7, #8]
 806cfd6:	4613      	mov	r3, r2
 806cfd8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 806cfda:	68fb      	ldr	r3, [r7, #12]
 806cfdc:	2b00      	cmp	r3, #0
 806cfde:	d101      	bne.n	806cfe4 <f_open+0x18>
 806cfe0:	2309      	movs	r3, #9
 806cfe2:	e1b4      	b.n	806d34e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 806cfe4:	79fb      	ldrb	r3, [r7, #7]
 806cfe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 806cfea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 806cfec:	79fa      	ldrb	r2, [r7, #7]
 806cfee:	f107 0110 	add.w	r1, r7, #16
 806cff2:	f107 0308 	add.w	r3, r7, #8
 806cff6:	4618      	mov	r0, r3
 806cff8:	f7ff fce8 	bl	806c9cc <find_volume>
 806cffc:	4603      	mov	r3, r0
 806cffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 806d002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d006:	2b00      	cmp	r3, #0
 806d008:	f040 8191 	bne.w	806d32e <f_open+0x362>
		dj.obj.fs = fs;
 806d00c:	693b      	ldr	r3, [r7, #16]
 806d00e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 806d010:	68ba      	ldr	r2, [r7, #8]
 806d012:	f107 0314 	add.w	r3, r7, #20
 806d016:	4611      	mov	r1, r2
 806d018:	4618      	mov	r0, r3
 806d01a:	f7ff fbcb 	bl	806c7b4 <follow_path>
 806d01e:	4603      	mov	r3, r0
 806d020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 806d024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d028:	2b00      	cmp	r3, #0
 806d02a:	d11a      	bne.n	806d062 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 806d02c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 806d030:	b25b      	sxtb	r3, r3
 806d032:	2b00      	cmp	r3, #0
 806d034:	da03      	bge.n	806d03e <f_open+0x72>
				res = FR_INVALID_NAME;
 806d036:	2306      	movs	r3, #6
 806d038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806d03c:	e011      	b.n	806d062 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 806d03e:	79fb      	ldrb	r3, [r7, #7]
 806d040:	f023 0301 	bic.w	r3, r3, #1
 806d044:	2b00      	cmp	r3, #0
 806d046:	bf14      	ite	ne
 806d048:	2301      	movne	r3, #1
 806d04a:	2300      	moveq	r3, #0
 806d04c:	b2db      	uxtb	r3, r3
 806d04e:	461a      	mov	r2, r3
 806d050:	f107 0314 	add.w	r3, r7, #20
 806d054:	4611      	mov	r1, r2
 806d056:	4618      	mov	r0, r3
 806d058:	f7fe fb20 	bl	806b69c <chk_lock>
 806d05c:	4603      	mov	r3, r0
 806d05e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 806d062:	79fb      	ldrb	r3, [r7, #7]
 806d064:	f003 031c 	and.w	r3, r3, #28
 806d068:	2b00      	cmp	r3, #0
 806d06a:	d07f      	beq.n	806d16c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 806d06c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d070:	2b00      	cmp	r3, #0
 806d072:	d017      	beq.n	806d0a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 806d074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d078:	2b04      	cmp	r3, #4
 806d07a:	d10e      	bne.n	806d09a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 806d07c:	f7fe fb6a 	bl	806b754 <enq_lock>
 806d080:	4603      	mov	r3, r0
 806d082:	2b00      	cmp	r3, #0
 806d084:	d006      	beq.n	806d094 <f_open+0xc8>
 806d086:	f107 0314 	add.w	r3, r7, #20
 806d08a:	4618      	mov	r0, r3
 806d08c:	f7ff faae 	bl	806c5ec <dir_register>
 806d090:	4603      	mov	r3, r0
 806d092:	e000      	b.n	806d096 <f_open+0xca>
 806d094:	2312      	movs	r3, #18
 806d096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 806d09a:	79fb      	ldrb	r3, [r7, #7]
 806d09c:	f043 0308 	orr.w	r3, r3, #8
 806d0a0:	71fb      	strb	r3, [r7, #7]
 806d0a2:	e010      	b.n	806d0c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 806d0a4:	7ebb      	ldrb	r3, [r7, #26]
 806d0a6:	f003 0311 	and.w	r3, r3, #17
 806d0aa:	2b00      	cmp	r3, #0
 806d0ac:	d003      	beq.n	806d0b6 <f_open+0xea>
					res = FR_DENIED;
 806d0ae:	2307      	movs	r3, #7
 806d0b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806d0b4:	e007      	b.n	806d0c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 806d0b6:	79fb      	ldrb	r3, [r7, #7]
 806d0b8:	f003 0304 	and.w	r3, r3, #4
 806d0bc:	2b00      	cmp	r3, #0
 806d0be:	d002      	beq.n	806d0c6 <f_open+0xfa>
 806d0c0:	2308      	movs	r3, #8
 806d0c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 806d0c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d0ca:	2b00      	cmp	r3, #0
 806d0cc:	d168      	bne.n	806d1a0 <f_open+0x1d4>
 806d0ce:	79fb      	ldrb	r3, [r7, #7]
 806d0d0:	f003 0308 	and.w	r3, r3, #8
 806d0d4:	2b00      	cmp	r3, #0
 806d0d6:	d063      	beq.n	806d1a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 806d0d8:	f7fd fbd2 	bl	806a880 <get_fattime>
 806d0dc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 806d0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806d0e0:	330e      	adds	r3, #14
 806d0e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806d0e4:	4618      	mov	r0, r3
 806d0e6:	f7fe f9fd 	bl	806b4e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 806d0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806d0ec:	3316      	adds	r3, #22
 806d0ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806d0f0:	4618      	mov	r0, r3
 806d0f2:	f7fe f9f7 	bl	806b4e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 806d0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806d0f8:	330b      	adds	r3, #11
 806d0fa:	2220      	movs	r2, #32
 806d0fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 806d0fe:	693b      	ldr	r3, [r7, #16]
 806d100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806d102:	4611      	mov	r1, r2
 806d104:	4618      	mov	r0, r3
 806d106:	f7ff f980 	bl	806c40a <ld_clust>
 806d10a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 806d10c:	693b      	ldr	r3, [r7, #16]
 806d10e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 806d110:	2200      	movs	r2, #0
 806d112:	4618      	mov	r0, r3
 806d114:	f7ff f998 	bl	806c448 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 806d118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806d11a:	331c      	adds	r3, #28
 806d11c:	2100      	movs	r1, #0
 806d11e:	4618      	mov	r0, r3
 806d120:	f7fe f9e0 	bl	806b4e4 <st_dword>
					fs->wflag = 1;
 806d124:	693b      	ldr	r3, [r7, #16]
 806d126:	2201      	movs	r2, #1
 806d128:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 806d12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 806d12c:	2b00      	cmp	r3, #0
 806d12e:	d037      	beq.n	806d1a0 <f_open+0x1d4>
						dw = fs->winsect;
 806d130:	693b      	ldr	r3, [r7, #16]
 806d132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806d134:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 806d136:	f107 0314 	add.w	r3, r7, #20
 806d13a:	2200      	movs	r2, #0
 806d13c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 806d13e:	4618      	mov	r0, r3
 806d140:	f7fe feab 	bl	806be9a <remove_chain>
 806d144:	4603      	mov	r3, r0
 806d146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 806d14a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d14e:	2b00      	cmp	r3, #0
 806d150:	d126      	bne.n	806d1a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 806d152:	693b      	ldr	r3, [r7, #16]
 806d154:	6d39      	ldr	r1, [r7, #80]	; 0x50
 806d156:	4618      	mov	r0, r3
 806d158:	f7fe fc50 	bl	806b9fc <move_window>
 806d15c:	4603      	mov	r3, r0
 806d15e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 806d162:	693b      	ldr	r3, [r7, #16]
 806d164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 806d166:	3a01      	subs	r2, #1
 806d168:	611a      	str	r2, [r3, #16]
 806d16a:	e019      	b.n	806d1a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 806d16c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d170:	2b00      	cmp	r3, #0
 806d172:	d115      	bne.n	806d1a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 806d174:	7ebb      	ldrb	r3, [r7, #26]
 806d176:	f003 0310 	and.w	r3, r3, #16
 806d17a:	2b00      	cmp	r3, #0
 806d17c:	d003      	beq.n	806d186 <f_open+0x1ba>
					res = FR_NO_FILE;
 806d17e:	2304      	movs	r3, #4
 806d180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806d184:	e00c      	b.n	806d1a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 806d186:	79fb      	ldrb	r3, [r7, #7]
 806d188:	f003 0302 	and.w	r3, r3, #2
 806d18c:	2b00      	cmp	r3, #0
 806d18e:	d007      	beq.n	806d1a0 <f_open+0x1d4>
 806d190:	7ebb      	ldrb	r3, [r7, #26]
 806d192:	f003 0301 	and.w	r3, r3, #1
 806d196:	2b00      	cmp	r3, #0
 806d198:	d002      	beq.n	806d1a0 <f_open+0x1d4>
						res = FR_DENIED;
 806d19a:	2307      	movs	r3, #7
 806d19c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 806d1a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d1a4:	2b00      	cmp	r3, #0
 806d1a6:	d128      	bne.n	806d1fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 806d1a8:	79fb      	ldrb	r3, [r7, #7]
 806d1aa:	f003 0308 	and.w	r3, r3, #8
 806d1ae:	2b00      	cmp	r3, #0
 806d1b0:	d003      	beq.n	806d1ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 806d1b2:	79fb      	ldrb	r3, [r7, #7]
 806d1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806d1b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 806d1ba:	693b      	ldr	r3, [r7, #16]
 806d1bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 806d1be:	68fb      	ldr	r3, [r7, #12]
 806d1c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 806d1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806d1c4:	68fb      	ldr	r3, [r7, #12]
 806d1c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 806d1c8:	79fb      	ldrb	r3, [r7, #7]
 806d1ca:	f023 0301 	bic.w	r3, r3, #1
 806d1ce:	2b00      	cmp	r3, #0
 806d1d0:	bf14      	ite	ne
 806d1d2:	2301      	movne	r3, #1
 806d1d4:	2300      	moveq	r3, #0
 806d1d6:	b2db      	uxtb	r3, r3
 806d1d8:	461a      	mov	r2, r3
 806d1da:	f107 0314 	add.w	r3, r7, #20
 806d1de:	4611      	mov	r1, r2
 806d1e0:	4618      	mov	r0, r3
 806d1e2:	f7fe fad9 	bl	806b798 <inc_lock>
 806d1e6:	4602      	mov	r2, r0
 806d1e8:	68fb      	ldr	r3, [r7, #12]
 806d1ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 806d1ec:	68fb      	ldr	r3, [r7, #12]
 806d1ee:	691b      	ldr	r3, [r3, #16]
 806d1f0:	2b00      	cmp	r3, #0
 806d1f2:	d102      	bne.n	806d1fa <f_open+0x22e>
 806d1f4:	2302      	movs	r3, #2
 806d1f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 806d1fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d1fe:	2b00      	cmp	r3, #0
 806d200:	f040 8095 	bne.w	806d32e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 806d204:	693b      	ldr	r3, [r7, #16]
 806d206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806d208:	4611      	mov	r1, r2
 806d20a:	4618      	mov	r0, r3
 806d20c:	f7ff f8fd 	bl	806c40a <ld_clust>
 806d210:	4602      	mov	r2, r0
 806d212:	68fb      	ldr	r3, [r7, #12]
 806d214:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 806d216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806d218:	331c      	adds	r3, #28
 806d21a:	4618      	mov	r0, r3
 806d21c:	f7fe f924 	bl	806b468 <ld_dword>
 806d220:	4602      	mov	r2, r0
 806d222:	68fb      	ldr	r3, [r7, #12]
 806d224:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 806d226:	68fb      	ldr	r3, [r7, #12]
 806d228:	2200      	movs	r2, #0
 806d22a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 806d22c:	693a      	ldr	r2, [r7, #16]
 806d22e:	68fb      	ldr	r3, [r7, #12]
 806d230:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 806d232:	693b      	ldr	r3, [r7, #16]
 806d234:	88da      	ldrh	r2, [r3, #6]
 806d236:	68fb      	ldr	r3, [r7, #12]
 806d238:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 806d23a:	68fb      	ldr	r3, [r7, #12]
 806d23c:	79fa      	ldrb	r2, [r7, #7]
 806d23e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 806d240:	68fb      	ldr	r3, [r7, #12]
 806d242:	2200      	movs	r2, #0
 806d244:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 806d246:	68fb      	ldr	r3, [r7, #12]
 806d248:	2200      	movs	r2, #0
 806d24a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 806d24c:	68fb      	ldr	r3, [r7, #12]
 806d24e:	2200      	movs	r2, #0
 806d250:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 806d252:	68fb      	ldr	r3, [r7, #12]
 806d254:	3330      	adds	r3, #48	; 0x30
 806d256:	f44f 7200 	mov.w	r2, #512	; 0x200
 806d25a:	2100      	movs	r1, #0
 806d25c:	4618      	mov	r0, r3
 806d25e:	f7fe f98e 	bl	806b57e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 806d262:	79fb      	ldrb	r3, [r7, #7]
 806d264:	f003 0320 	and.w	r3, r3, #32
 806d268:	2b00      	cmp	r3, #0
 806d26a:	d060      	beq.n	806d32e <f_open+0x362>
 806d26c:	68fb      	ldr	r3, [r7, #12]
 806d26e:	68db      	ldr	r3, [r3, #12]
 806d270:	2b00      	cmp	r3, #0
 806d272:	d05c      	beq.n	806d32e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 806d274:	68fb      	ldr	r3, [r7, #12]
 806d276:	68da      	ldr	r2, [r3, #12]
 806d278:	68fb      	ldr	r3, [r7, #12]
 806d27a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 806d27c:	693b      	ldr	r3, [r7, #16]
 806d27e:	895b      	ldrh	r3, [r3, #10]
 806d280:	025b      	lsls	r3, r3, #9
 806d282:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 806d284:	68fb      	ldr	r3, [r7, #12]
 806d286:	689b      	ldr	r3, [r3, #8]
 806d288:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 806d28a:	68fb      	ldr	r3, [r7, #12]
 806d28c:	68db      	ldr	r3, [r3, #12]
 806d28e:	657b      	str	r3, [r7, #84]	; 0x54
 806d290:	e016      	b.n	806d2c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 806d292:	68fb      	ldr	r3, [r7, #12]
 806d294:	6db9      	ldr	r1, [r7, #88]	; 0x58
 806d296:	4618      	mov	r0, r3
 806d298:	f7fe fc6b 	bl	806bb72 <get_fat>
 806d29c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 806d29e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 806d2a0:	2b01      	cmp	r3, #1
 806d2a2:	d802      	bhi.n	806d2aa <f_open+0x2de>
 806d2a4:	2302      	movs	r3, #2
 806d2a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 806d2aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 806d2ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806d2b0:	d102      	bne.n	806d2b8 <f_open+0x2ec>
 806d2b2:	2301      	movs	r3, #1
 806d2b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 806d2b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 806d2ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806d2bc:	1ad3      	subs	r3, r2, r3
 806d2be:	657b      	str	r3, [r7, #84]	; 0x54
 806d2c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d2c4:	2b00      	cmp	r3, #0
 806d2c6:	d103      	bne.n	806d2d0 <f_open+0x304>
 806d2c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 806d2ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 806d2cc:	429a      	cmp	r2, r3
 806d2ce:	d8e0      	bhi.n	806d292 <f_open+0x2c6>
				}
				fp->clust = clst;
 806d2d0:	68fb      	ldr	r3, [r7, #12]
 806d2d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 806d2d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 806d2d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d2da:	2b00      	cmp	r3, #0
 806d2dc:	d127      	bne.n	806d32e <f_open+0x362>
 806d2de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 806d2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d2e4:	2b00      	cmp	r3, #0
 806d2e6:	d022      	beq.n	806d32e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 806d2e8:	693b      	ldr	r3, [r7, #16]
 806d2ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 806d2ec:	4618      	mov	r0, r3
 806d2ee:	f7fe fc21 	bl	806bb34 <clust2sect>
 806d2f2:	6478      	str	r0, [r7, #68]	; 0x44
 806d2f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 806d2f6:	2b00      	cmp	r3, #0
 806d2f8:	d103      	bne.n	806d302 <f_open+0x336>
						res = FR_INT_ERR;
 806d2fa:	2302      	movs	r3, #2
 806d2fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 806d300:	e015      	b.n	806d32e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 806d302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 806d304:	0a5a      	lsrs	r2, r3, #9
 806d306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 806d308:	441a      	add	r2, r3
 806d30a:	68fb      	ldr	r3, [r7, #12]
 806d30c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 806d30e:	693b      	ldr	r3, [r7, #16]
 806d310:	7858      	ldrb	r0, [r3, #1]
 806d312:	68fb      	ldr	r3, [r7, #12]
 806d314:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d318:	68fb      	ldr	r3, [r7, #12]
 806d31a:	6a1a      	ldr	r2, [r3, #32]
 806d31c:	2301      	movs	r3, #1
 806d31e:	f7fe f82d 	bl	806b37c <disk_read>
 806d322:	4603      	mov	r3, r0
 806d324:	2b00      	cmp	r3, #0
 806d326:	d002      	beq.n	806d32e <f_open+0x362>
 806d328:	2301      	movs	r3, #1
 806d32a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 806d32e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 806d332:	2b00      	cmp	r3, #0
 806d334:	d002      	beq.n	806d33c <f_open+0x370>
 806d336:	68fb      	ldr	r3, [r7, #12]
 806d338:	2200      	movs	r2, #0
 806d33a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 806d33c:	693b      	ldr	r3, [r7, #16]
 806d33e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 806d342:	4611      	mov	r1, r2
 806d344:	4618      	mov	r0, r3
 806d346:	f7fe f98d 	bl	806b664 <unlock_fs>
 806d34a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 806d34e:	4618      	mov	r0, r3
 806d350:	3760      	adds	r7, #96	; 0x60
 806d352:	46bd      	mov	sp, r7
 806d354:	bd80      	pop	{r7, pc}

0806d356 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 806d356:	b580      	push	{r7, lr}
 806d358:	b08e      	sub	sp, #56	; 0x38
 806d35a:	af00      	add	r7, sp, #0
 806d35c:	60f8      	str	r0, [r7, #12]
 806d35e:	60b9      	str	r1, [r7, #8]
 806d360:	607a      	str	r2, [r7, #4]
 806d362:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 806d364:	68bb      	ldr	r3, [r7, #8]
 806d366:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 806d368:	683b      	ldr	r3, [r7, #0]
 806d36a:	2200      	movs	r2, #0
 806d36c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 806d36e:	68fb      	ldr	r3, [r7, #12]
 806d370:	f107 0214 	add.w	r2, r7, #20
 806d374:	4611      	mov	r1, r2
 806d376:	4618      	mov	r0, r3
 806d378:	f7ff fd7c 	bl	806ce74 <validate>
 806d37c:	4603      	mov	r3, r0
 806d37e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 806d382:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806d386:	2b00      	cmp	r3, #0
 806d388:	d107      	bne.n	806d39a <f_read+0x44>
 806d38a:	68fb      	ldr	r3, [r7, #12]
 806d38c:	7d5b      	ldrb	r3, [r3, #21]
 806d38e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 806d392:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806d396:	2b00      	cmp	r3, #0
 806d398:	d009      	beq.n	806d3ae <f_read+0x58>
 806d39a:	697b      	ldr	r3, [r7, #20]
 806d39c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 806d3a0:	4611      	mov	r1, r2
 806d3a2:	4618      	mov	r0, r3
 806d3a4:	f7fe f95e 	bl	806b664 <unlock_fs>
 806d3a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 806d3ac:	e13d      	b.n	806d62a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 806d3ae:	68fb      	ldr	r3, [r7, #12]
 806d3b0:	7d1b      	ldrb	r3, [r3, #20]
 806d3b2:	f003 0301 	and.w	r3, r3, #1
 806d3b6:	2b00      	cmp	r3, #0
 806d3b8:	d106      	bne.n	806d3c8 <f_read+0x72>
 806d3ba:	697b      	ldr	r3, [r7, #20]
 806d3bc:	2107      	movs	r1, #7
 806d3be:	4618      	mov	r0, r3
 806d3c0:	f7fe f950 	bl	806b664 <unlock_fs>
 806d3c4:	2307      	movs	r3, #7
 806d3c6:	e130      	b.n	806d62a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 806d3c8:	68fb      	ldr	r3, [r7, #12]
 806d3ca:	68da      	ldr	r2, [r3, #12]
 806d3cc:	68fb      	ldr	r3, [r7, #12]
 806d3ce:	699b      	ldr	r3, [r3, #24]
 806d3d0:	1ad3      	subs	r3, r2, r3
 806d3d2:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 806d3d4:	687a      	ldr	r2, [r7, #4]
 806d3d6:	6a3b      	ldr	r3, [r7, #32]
 806d3d8:	429a      	cmp	r2, r3
 806d3da:	f240 811c 	bls.w	806d616 <f_read+0x2c0>
 806d3de:	6a3b      	ldr	r3, [r7, #32]
 806d3e0:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 806d3e2:	e118      	b.n	806d616 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 806d3e4:	68fb      	ldr	r3, [r7, #12]
 806d3e6:	699b      	ldr	r3, [r3, #24]
 806d3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d3ec:	2b00      	cmp	r3, #0
 806d3ee:	f040 80e4 	bne.w	806d5ba <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 806d3f2:	68fb      	ldr	r3, [r7, #12]
 806d3f4:	699b      	ldr	r3, [r3, #24]
 806d3f6:	0a5b      	lsrs	r3, r3, #9
 806d3f8:	697a      	ldr	r2, [r7, #20]
 806d3fa:	8952      	ldrh	r2, [r2, #10]
 806d3fc:	3a01      	subs	r2, #1
 806d3fe:	4013      	ands	r3, r2
 806d400:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 806d402:	69fb      	ldr	r3, [r7, #28]
 806d404:	2b00      	cmp	r3, #0
 806d406:	d139      	bne.n	806d47c <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 806d408:	68fb      	ldr	r3, [r7, #12]
 806d40a:	699b      	ldr	r3, [r3, #24]
 806d40c:	2b00      	cmp	r3, #0
 806d40e:	d103      	bne.n	806d418 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 806d410:	68fb      	ldr	r3, [r7, #12]
 806d412:	689b      	ldr	r3, [r3, #8]
 806d414:	633b      	str	r3, [r7, #48]	; 0x30
 806d416:	e013      	b.n	806d440 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 806d418:	68fb      	ldr	r3, [r7, #12]
 806d41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806d41c:	2b00      	cmp	r3, #0
 806d41e:	d007      	beq.n	806d430 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 806d420:	68fb      	ldr	r3, [r7, #12]
 806d422:	699b      	ldr	r3, [r3, #24]
 806d424:	4619      	mov	r1, r3
 806d426:	68f8      	ldr	r0, [r7, #12]
 806d428:	f7fe fe34 	bl	806c094 <clmt_clust>
 806d42c:	6338      	str	r0, [r7, #48]	; 0x30
 806d42e:	e007      	b.n	806d440 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 806d430:	68fa      	ldr	r2, [r7, #12]
 806d432:	68fb      	ldr	r3, [r7, #12]
 806d434:	69db      	ldr	r3, [r3, #28]
 806d436:	4619      	mov	r1, r3
 806d438:	4610      	mov	r0, r2
 806d43a:	f7fe fb9a 	bl	806bb72 <get_fat>
 806d43e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 806d440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806d442:	2b01      	cmp	r3, #1
 806d444:	d809      	bhi.n	806d45a <f_read+0x104>
 806d446:	68fb      	ldr	r3, [r7, #12]
 806d448:	2202      	movs	r2, #2
 806d44a:	755a      	strb	r2, [r3, #21]
 806d44c:	697b      	ldr	r3, [r7, #20]
 806d44e:	2102      	movs	r1, #2
 806d450:	4618      	mov	r0, r3
 806d452:	f7fe f907 	bl	806b664 <unlock_fs>
 806d456:	2302      	movs	r3, #2
 806d458:	e0e7      	b.n	806d62a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 806d45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806d45c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806d460:	d109      	bne.n	806d476 <f_read+0x120>
 806d462:	68fb      	ldr	r3, [r7, #12]
 806d464:	2201      	movs	r2, #1
 806d466:	755a      	strb	r2, [r3, #21]
 806d468:	697b      	ldr	r3, [r7, #20]
 806d46a:	2101      	movs	r1, #1
 806d46c:	4618      	mov	r0, r3
 806d46e:	f7fe f8f9 	bl	806b664 <unlock_fs>
 806d472:	2301      	movs	r3, #1
 806d474:	e0d9      	b.n	806d62a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 806d476:	68fb      	ldr	r3, [r7, #12]
 806d478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 806d47a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 806d47c:	697a      	ldr	r2, [r7, #20]
 806d47e:	68fb      	ldr	r3, [r7, #12]
 806d480:	69db      	ldr	r3, [r3, #28]
 806d482:	4619      	mov	r1, r3
 806d484:	4610      	mov	r0, r2
 806d486:	f7fe fb55 	bl	806bb34 <clust2sect>
 806d48a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 806d48c:	69bb      	ldr	r3, [r7, #24]
 806d48e:	2b00      	cmp	r3, #0
 806d490:	d109      	bne.n	806d4a6 <f_read+0x150>
 806d492:	68fb      	ldr	r3, [r7, #12]
 806d494:	2202      	movs	r2, #2
 806d496:	755a      	strb	r2, [r3, #21]
 806d498:	697b      	ldr	r3, [r7, #20]
 806d49a:	2102      	movs	r1, #2
 806d49c:	4618      	mov	r0, r3
 806d49e:	f7fe f8e1 	bl	806b664 <unlock_fs>
 806d4a2:	2302      	movs	r3, #2
 806d4a4:	e0c1      	b.n	806d62a <f_read+0x2d4>
			sect += csect;
 806d4a6:	69ba      	ldr	r2, [r7, #24]
 806d4a8:	69fb      	ldr	r3, [r7, #28]
 806d4aa:	4413      	add	r3, r2
 806d4ac:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 806d4ae:	687b      	ldr	r3, [r7, #4]
 806d4b0:	0a5b      	lsrs	r3, r3, #9
 806d4b2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 806d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d4b6:	2b00      	cmp	r3, #0
 806d4b8:	d03e      	beq.n	806d538 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 806d4ba:	69fa      	ldr	r2, [r7, #28]
 806d4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d4be:	4413      	add	r3, r2
 806d4c0:	697a      	ldr	r2, [r7, #20]
 806d4c2:	8952      	ldrh	r2, [r2, #10]
 806d4c4:	4293      	cmp	r3, r2
 806d4c6:	d905      	bls.n	806d4d4 <f_read+0x17e>
					cc = fs->csize - csect;
 806d4c8:	697b      	ldr	r3, [r7, #20]
 806d4ca:	895b      	ldrh	r3, [r3, #10]
 806d4cc:	461a      	mov	r2, r3
 806d4ce:	69fb      	ldr	r3, [r7, #28]
 806d4d0:	1ad3      	subs	r3, r2, r3
 806d4d2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806d4d4:	697b      	ldr	r3, [r7, #20]
 806d4d6:	7858      	ldrb	r0, [r3, #1]
 806d4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d4da:	69ba      	ldr	r2, [r7, #24]
 806d4dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806d4de:	f7fd ff4d 	bl	806b37c <disk_read>
 806d4e2:	4603      	mov	r3, r0
 806d4e4:	2b00      	cmp	r3, #0
 806d4e6:	d009      	beq.n	806d4fc <f_read+0x1a6>
 806d4e8:	68fb      	ldr	r3, [r7, #12]
 806d4ea:	2201      	movs	r2, #1
 806d4ec:	755a      	strb	r2, [r3, #21]
 806d4ee:	697b      	ldr	r3, [r7, #20]
 806d4f0:	2101      	movs	r1, #1
 806d4f2:	4618      	mov	r0, r3
 806d4f4:	f7fe f8b6 	bl	806b664 <unlock_fs>
 806d4f8:	2301      	movs	r3, #1
 806d4fa:	e096      	b.n	806d62a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 806d4fc:	68fb      	ldr	r3, [r7, #12]
 806d4fe:	7d1b      	ldrb	r3, [r3, #20]
 806d500:	b25b      	sxtb	r3, r3
 806d502:	2b00      	cmp	r3, #0
 806d504:	da14      	bge.n	806d530 <f_read+0x1da>
 806d506:	68fb      	ldr	r3, [r7, #12]
 806d508:	6a1a      	ldr	r2, [r3, #32]
 806d50a:	69bb      	ldr	r3, [r7, #24]
 806d50c:	1ad3      	subs	r3, r2, r3
 806d50e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806d510:	429a      	cmp	r2, r3
 806d512:	d90d      	bls.n	806d530 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 806d514:	68fb      	ldr	r3, [r7, #12]
 806d516:	6a1a      	ldr	r2, [r3, #32]
 806d518:	69bb      	ldr	r3, [r7, #24]
 806d51a:	1ad3      	subs	r3, r2, r3
 806d51c:	025b      	lsls	r3, r3, #9
 806d51e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806d520:	18d0      	adds	r0, r2, r3
 806d522:	68fb      	ldr	r3, [r7, #12]
 806d524:	3330      	adds	r3, #48	; 0x30
 806d526:	f44f 7200 	mov.w	r2, #512	; 0x200
 806d52a:	4619      	mov	r1, r3
 806d52c:	f7fe f806 	bl	806b53c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 806d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d532:	025b      	lsls	r3, r3, #9
 806d534:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 806d536:	e05a      	b.n	806d5ee <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 806d538:	68fb      	ldr	r3, [r7, #12]
 806d53a:	6a1b      	ldr	r3, [r3, #32]
 806d53c:	69ba      	ldr	r2, [r7, #24]
 806d53e:	429a      	cmp	r2, r3
 806d540:	d038      	beq.n	806d5b4 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 806d542:	68fb      	ldr	r3, [r7, #12]
 806d544:	7d1b      	ldrb	r3, [r3, #20]
 806d546:	b25b      	sxtb	r3, r3
 806d548:	2b00      	cmp	r3, #0
 806d54a:	da1d      	bge.n	806d588 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806d54c:	697b      	ldr	r3, [r7, #20]
 806d54e:	7858      	ldrb	r0, [r3, #1]
 806d550:	68fb      	ldr	r3, [r7, #12]
 806d552:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d556:	68fb      	ldr	r3, [r7, #12]
 806d558:	6a1a      	ldr	r2, [r3, #32]
 806d55a:	2301      	movs	r3, #1
 806d55c:	f7fd ff2e 	bl	806b3bc <disk_write>
 806d560:	4603      	mov	r3, r0
 806d562:	2b00      	cmp	r3, #0
 806d564:	d009      	beq.n	806d57a <f_read+0x224>
 806d566:	68fb      	ldr	r3, [r7, #12]
 806d568:	2201      	movs	r2, #1
 806d56a:	755a      	strb	r2, [r3, #21]
 806d56c:	697b      	ldr	r3, [r7, #20]
 806d56e:	2101      	movs	r1, #1
 806d570:	4618      	mov	r0, r3
 806d572:	f7fe f877 	bl	806b664 <unlock_fs>
 806d576:	2301      	movs	r3, #1
 806d578:	e057      	b.n	806d62a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 806d57a:	68fb      	ldr	r3, [r7, #12]
 806d57c:	7d1b      	ldrb	r3, [r3, #20]
 806d57e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806d582:	b2da      	uxtb	r2, r3
 806d584:	68fb      	ldr	r3, [r7, #12]
 806d586:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 806d588:	697b      	ldr	r3, [r7, #20]
 806d58a:	7858      	ldrb	r0, [r3, #1]
 806d58c:	68fb      	ldr	r3, [r7, #12]
 806d58e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d592:	2301      	movs	r3, #1
 806d594:	69ba      	ldr	r2, [r7, #24]
 806d596:	f7fd fef1 	bl	806b37c <disk_read>
 806d59a:	4603      	mov	r3, r0
 806d59c:	2b00      	cmp	r3, #0
 806d59e:	d009      	beq.n	806d5b4 <f_read+0x25e>
 806d5a0:	68fb      	ldr	r3, [r7, #12]
 806d5a2:	2201      	movs	r2, #1
 806d5a4:	755a      	strb	r2, [r3, #21]
 806d5a6:	697b      	ldr	r3, [r7, #20]
 806d5a8:	2101      	movs	r1, #1
 806d5aa:	4618      	mov	r0, r3
 806d5ac:	f7fe f85a 	bl	806b664 <unlock_fs>
 806d5b0:	2301      	movs	r3, #1
 806d5b2:	e03a      	b.n	806d62a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 806d5b4:	68fb      	ldr	r3, [r7, #12]
 806d5b6:	69ba      	ldr	r2, [r7, #24]
 806d5b8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 806d5ba:	68fb      	ldr	r3, [r7, #12]
 806d5bc:	699b      	ldr	r3, [r3, #24]
 806d5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d5c2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 806d5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 806d5c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806d5ca:	687b      	ldr	r3, [r7, #4]
 806d5cc:	429a      	cmp	r2, r3
 806d5ce:	d901      	bls.n	806d5d4 <f_read+0x27e>
 806d5d0:	687b      	ldr	r3, [r7, #4]
 806d5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 806d5d4:	68fb      	ldr	r3, [r7, #12]
 806d5d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 806d5da:	68fb      	ldr	r3, [r7, #12]
 806d5dc:	699b      	ldr	r3, [r3, #24]
 806d5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d5e2:	4413      	add	r3, r2
 806d5e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806d5e6:	4619      	mov	r1, r3
 806d5e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806d5ea:	f7fd ffa7 	bl	806b53c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 806d5ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806d5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806d5f2:	4413      	add	r3, r2
 806d5f4:	627b      	str	r3, [r7, #36]	; 0x24
 806d5f6:	68fb      	ldr	r3, [r7, #12]
 806d5f8:	699a      	ldr	r2, [r3, #24]
 806d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806d5fc:	441a      	add	r2, r3
 806d5fe:	68fb      	ldr	r3, [r7, #12]
 806d600:	619a      	str	r2, [r3, #24]
 806d602:	683b      	ldr	r3, [r7, #0]
 806d604:	681a      	ldr	r2, [r3, #0]
 806d606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806d608:	441a      	add	r2, r3
 806d60a:	683b      	ldr	r3, [r7, #0]
 806d60c:	601a      	str	r2, [r3, #0]
 806d60e:	687a      	ldr	r2, [r7, #4]
 806d610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806d612:	1ad3      	subs	r3, r2, r3
 806d614:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 806d616:	687b      	ldr	r3, [r7, #4]
 806d618:	2b00      	cmp	r3, #0
 806d61a:	f47f aee3 	bne.w	806d3e4 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 806d61e:	697b      	ldr	r3, [r7, #20]
 806d620:	2100      	movs	r1, #0
 806d622:	4618      	mov	r0, r3
 806d624:	f7fe f81e 	bl	806b664 <unlock_fs>
 806d628:	2300      	movs	r3, #0
}
 806d62a:	4618      	mov	r0, r3
 806d62c:	3738      	adds	r7, #56	; 0x38
 806d62e:	46bd      	mov	sp, r7
 806d630:	bd80      	pop	{r7, pc}

0806d632 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 806d632:	b580      	push	{r7, lr}
 806d634:	b08c      	sub	sp, #48	; 0x30
 806d636:	af00      	add	r7, sp, #0
 806d638:	60f8      	str	r0, [r7, #12]
 806d63a:	60b9      	str	r1, [r7, #8]
 806d63c:	607a      	str	r2, [r7, #4]
 806d63e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 806d640:	68bb      	ldr	r3, [r7, #8]
 806d642:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 806d644:	683b      	ldr	r3, [r7, #0]
 806d646:	2200      	movs	r2, #0
 806d648:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 806d64a:	68fb      	ldr	r3, [r7, #12]
 806d64c:	f107 0210 	add.w	r2, r7, #16
 806d650:	4611      	mov	r1, r2
 806d652:	4618      	mov	r0, r3
 806d654:	f7ff fc0e 	bl	806ce74 <validate>
 806d658:	4603      	mov	r3, r0
 806d65a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 806d65e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806d662:	2b00      	cmp	r3, #0
 806d664:	d107      	bne.n	806d676 <f_write+0x44>
 806d666:	68fb      	ldr	r3, [r7, #12]
 806d668:	7d5b      	ldrb	r3, [r3, #21]
 806d66a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 806d66e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806d672:	2b00      	cmp	r3, #0
 806d674:	d009      	beq.n	806d68a <f_write+0x58>
 806d676:	693b      	ldr	r3, [r7, #16]
 806d678:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 806d67c:	4611      	mov	r1, r2
 806d67e:	4618      	mov	r0, r3
 806d680:	f7fd fff0 	bl	806b664 <unlock_fs>
 806d684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 806d688:	e173      	b.n	806d972 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 806d68a:	68fb      	ldr	r3, [r7, #12]
 806d68c:	7d1b      	ldrb	r3, [r3, #20]
 806d68e:	f003 0302 	and.w	r3, r3, #2
 806d692:	2b00      	cmp	r3, #0
 806d694:	d106      	bne.n	806d6a4 <f_write+0x72>
 806d696:	693b      	ldr	r3, [r7, #16]
 806d698:	2107      	movs	r1, #7
 806d69a:	4618      	mov	r0, r3
 806d69c:	f7fd ffe2 	bl	806b664 <unlock_fs>
 806d6a0:	2307      	movs	r3, #7
 806d6a2:	e166      	b.n	806d972 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 806d6a4:	68fb      	ldr	r3, [r7, #12]
 806d6a6:	699a      	ldr	r2, [r3, #24]
 806d6a8:	687b      	ldr	r3, [r7, #4]
 806d6aa:	441a      	add	r2, r3
 806d6ac:	68fb      	ldr	r3, [r7, #12]
 806d6ae:	699b      	ldr	r3, [r3, #24]
 806d6b0:	429a      	cmp	r2, r3
 806d6b2:	f080 814b 	bcs.w	806d94c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 806d6b6:	68fb      	ldr	r3, [r7, #12]
 806d6b8:	699b      	ldr	r3, [r3, #24]
 806d6ba:	43db      	mvns	r3, r3
 806d6bc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 806d6be:	e145      	b.n	806d94c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 806d6c0:	68fb      	ldr	r3, [r7, #12]
 806d6c2:	699b      	ldr	r3, [r3, #24]
 806d6c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d6c8:	2b00      	cmp	r3, #0
 806d6ca:	f040 8101 	bne.w	806d8d0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 806d6ce:	68fb      	ldr	r3, [r7, #12]
 806d6d0:	699b      	ldr	r3, [r3, #24]
 806d6d2:	0a5b      	lsrs	r3, r3, #9
 806d6d4:	693a      	ldr	r2, [r7, #16]
 806d6d6:	8952      	ldrh	r2, [r2, #10]
 806d6d8:	3a01      	subs	r2, #1
 806d6da:	4013      	ands	r3, r2
 806d6dc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 806d6de:	69bb      	ldr	r3, [r7, #24]
 806d6e0:	2b00      	cmp	r3, #0
 806d6e2:	d14d      	bne.n	806d780 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 806d6e4:	68fb      	ldr	r3, [r7, #12]
 806d6e6:	699b      	ldr	r3, [r3, #24]
 806d6e8:	2b00      	cmp	r3, #0
 806d6ea:	d10c      	bne.n	806d706 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 806d6ec:	68fb      	ldr	r3, [r7, #12]
 806d6ee:	689b      	ldr	r3, [r3, #8]
 806d6f0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 806d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d6f4:	2b00      	cmp	r3, #0
 806d6f6:	d11a      	bne.n	806d72e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 806d6f8:	68fb      	ldr	r3, [r7, #12]
 806d6fa:	2100      	movs	r1, #0
 806d6fc:	4618      	mov	r0, r3
 806d6fe:	f7fe fc31 	bl	806bf64 <create_chain>
 806d702:	62b8      	str	r0, [r7, #40]	; 0x28
 806d704:	e013      	b.n	806d72e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 806d706:	68fb      	ldr	r3, [r7, #12]
 806d708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 806d70a:	2b00      	cmp	r3, #0
 806d70c:	d007      	beq.n	806d71e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 806d70e:	68fb      	ldr	r3, [r7, #12]
 806d710:	699b      	ldr	r3, [r3, #24]
 806d712:	4619      	mov	r1, r3
 806d714:	68f8      	ldr	r0, [r7, #12]
 806d716:	f7fe fcbd 	bl	806c094 <clmt_clust>
 806d71a:	62b8      	str	r0, [r7, #40]	; 0x28
 806d71c:	e007      	b.n	806d72e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 806d71e:	68fa      	ldr	r2, [r7, #12]
 806d720:	68fb      	ldr	r3, [r7, #12]
 806d722:	69db      	ldr	r3, [r3, #28]
 806d724:	4619      	mov	r1, r3
 806d726:	4610      	mov	r0, r2
 806d728:	f7fe fc1c 	bl	806bf64 <create_chain>
 806d72c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 806d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d730:	2b00      	cmp	r3, #0
 806d732:	f000 8110 	beq.w	806d956 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 806d736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d738:	2b01      	cmp	r3, #1
 806d73a:	d109      	bne.n	806d750 <f_write+0x11e>
 806d73c:	68fb      	ldr	r3, [r7, #12]
 806d73e:	2202      	movs	r2, #2
 806d740:	755a      	strb	r2, [r3, #21]
 806d742:	693b      	ldr	r3, [r7, #16]
 806d744:	2102      	movs	r1, #2
 806d746:	4618      	mov	r0, r3
 806d748:	f7fd ff8c 	bl	806b664 <unlock_fs>
 806d74c:	2302      	movs	r3, #2
 806d74e:	e110      	b.n	806d972 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 806d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806d752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806d756:	d109      	bne.n	806d76c <f_write+0x13a>
 806d758:	68fb      	ldr	r3, [r7, #12]
 806d75a:	2201      	movs	r2, #1
 806d75c:	755a      	strb	r2, [r3, #21]
 806d75e:	693b      	ldr	r3, [r7, #16]
 806d760:	2101      	movs	r1, #1
 806d762:	4618      	mov	r0, r3
 806d764:	f7fd ff7e 	bl	806b664 <unlock_fs>
 806d768:	2301      	movs	r3, #1
 806d76a:	e102      	b.n	806d972 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 806d76c:	68fb      	ldr	r3, [r7, #12]
 806d76e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806d770:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 806d772:	68fb      	ldr	r3, [r7, #12]
 806d774:	689b      	ldr	r3, [r3, #8]
 806d776:	2b00      	cmp	r3, #0
 806d778:	d102      	bne.n	806d780 <f_write+0x14e>
 806d77a:	68fb      	ldr	r3, [r7, #12]
 806d77c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806d77e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 806d780:	68fb      	ldr	r3, [r7, #12]
 806d782:	7d1b      	ldrb	r3, [r3, #20]
 806d784:	b25b      	sxtb	r3, r3
 806d786:	2b00      	cmp	r3, #0
 806d788:	da1d      	bge.n	806d7c6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806d78a:	693b      	ldr	r3, [r7, #16]
 806d78c:	7858      	ldrb	r0, [r3, #1]
 806d78e:	68fb      	ldr	r3, [r7, #12]
 806d790:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d794:	68fb      	ldr	r3, [r7, #12]
 806d796:	6a1a      	ldr	r2, [r3, #32]
 806d798:	2301      	movs	r3, #1
 806d79a:	f7fd fe0f 	bl	806b3bc <disk_write>
 806d79e:	4603      	mov	r3, r0
 806d7a0:	2b00      	cmp	r3, #0
 806d7a2:	d009      	beq.n	806d7b8 <f_write+0x186>
 806d7a4:	68fb      	ldr	r3, [r7, #12]
 806d7a6:	2201      	movs	r2, #1
 806d7a8:	755a      	strb	r2, [r3, #21]
 806d7aa:	693b      	ldr	r3, [r7, #16]
 806d7ac:	2101      	movs	r1, #1
 806d7ae:	4618      	mov	r0, r3
 806d7b0:	f7fd ff58 	bl	806b664 <unlock_fs>
 806d7b4:	2301      	movs	r3, #1
 806d7b6:	e0dc      	b.n	806d972 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 806d7b8:	68fb      	ldr	r3, [r7, #12]
 806d7ba:	7d1b      	ldrb	r3, [r3, #20]
 806d7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806d7c0:	b2da      	uxtb	r2, r3
 806d7c2:	68fb      	ldr	r3, [r7, #12]
 806d7c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 806d7c6:	693a      	ldr	r2, [r7, #16]
 806d7c8:	68fb      	ldr	r3, [r7, #12]
 806d7ca:	69db      	ldr	r3, [r3, #28]
 806d7cc:	4619      	mov	r1, r3
 806d7ce:	4610      	mov	r0, r2
 806d7d0:	f7fe f9b0 	bl	806bb34 <clust2sect>
 806d7d4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 806d7d6:	697b      	ldr	r3, [r7, #20]
 806d7d8:	2b00      	cmp	r3, #0
 806d7da:	d109      	bne.n	806d7f0 <f_write+0x1be>
 806d7dc:	68fb      	ldr	r3, [r7, #12]
 806d7de:	2202      	movs	r2, #2
 806d7e0:	755a      	strb	r2, [r3, #21]
 806d7e2:	693b      	ldr	r3, [r7, #16]
 806d7e4:	2102      	movs	r1, #2
 806d7e6:	4618      	mov	r0, r3
 806d7e8:	f7fd ff3c 	bl	806b664 <unlock_fs>
 806d7ec:	2302      	movs	r3, #2
 806d7ee:	e0c0      	b.n	806d972 <f_write+0x340>
			sect += csect;
 806d7f0:	697a      	ldr	r2, [r7, #20]
 806d7f2:	69bb      	ldr	r3, [r7, #24]
 806d7f4:	4413      	add	r3, r2
 806d7f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 806d7f8:	687b      	ldr	r3, [r7, #4]
 806d7fa:	0a5b      	lsrs	r3, r3, #9
 806d7fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 806d7fe:	6a3b      	ldr	r3, [r7, #32]
 806d800:	2b00      	cmp	r3, #0
 806d802:	d041      	beq.n	806d888 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 806d804:	69ba      	ldr	r2, [r7, #24]
 806d806:	6a3b      	ldr	r3, [r7, #32]
 806d808:	4413      	add	r3, r2
 806d80a:	693a      	ldr	r2, [r7, #16]
 806d80c:	8952      	ldrh	r2, [r2, #10]
 806d80e:	4293      	cmp	r3, r2
 806d810:	d905      	bls.n	806d81e <f_write+0x1ec>
					cc = fs->csize - csect;
 806d812:	693b      	ldr	r3, [r7, #16]
 806d814:	895b      	ldrh	r3, [r3, #10]
 806d816:	461a      	mov	r2, r3
 806d818:	69bb      	ldr	r3, [r7, #24]
 806d81a:	1ad3      	subs	r3, r2, r3
 806d81c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 806d81e:	693b      	ldr	r3, [r7, #16]
 806d820:	7858      	ldrb	r0, [r3, #1]
 806d822:	6a3b      	ldr	r3, [r7, #32]
 806d824:	697a      	ldr	r2, [r7, #20]
 806d826:	69f9      	ldr	r1, [r7, #28]
 806d828:	f7fd fdc8 	bl	806b3bc <disk_write>
 806d82c:	4603      	mov	r3, r0
 806d82e:	2b00      	cmp	r3, #0
 806d830:	d009      	beq.n	806d846 <f_write+0x214>
 806d832:	68fb      	ldr	r3, [r7, #12]
 806d834:	2201      	movs	r2, #1
 806d836:	755a      	strb	r2, [r3, #21]
 806d838:	693b      	ldr	r3, [r7, #16]
 806d83a:	2101      	movs	r1, #1
 806d83c:	4618      	mov	r0, r3
 806d83e:	f7fd ff11 	bl	806b664 <unlock_fs>
 806d842:	2301      	movs	r3, #1
 806d844:	e095      	b.n	806d972 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 806d846:	68fb      	ldr	r3, [r7, #12]
 806d848:	6a1a      	ldr	r2, [r3, #32]
 806d84a:	697b      	ldr	r3, [r7, #20]
 806d84c:	1ad3      	subs	r3, r2, r3
 806d84e:	6a3a      	ldr	r2, [r7, #32]
 806d850:	429a      	cmp	r2, r3
 806d852:	d915      	bls.n	806d880 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 806d854:	68fb      	ldr	r3, [r7, #12]
 806d856:	f103 0030 	add.w	r0, r3, #48	; 0x30
 806d85a:	68fb      	ldr	r3, [r7, #12]
 806d85c:	6a1a      	ldr	r2, [r3, #32]
 806d85e:	697b      	ldr	r3, [r7, #20]
 806d860:	1ad3      	subs	r3, r2, r3
 806d862:	025b      	lsls	r3, r3, #9
 806d864:	69fa      	ldr	r2, [r7, #28]
 806d866:	4413      	add	r3, r2
 806d868:	f44f 7200 	mov.w	r2, #512	; 0x200
 806d86c:	4619      	mov	r1, r3
 806d86e:	f7fd fe65 	bl	806b53c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 806d872:	68fb      	ldr	r3, [r7, #12]
 806d874:	7d1b      	ldrb	r3, [r3, #20]
 806d876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806d87a:	b2da      	uxtb	r2, r3
 806d87c:	68fb      	ldr	r3, [r7, #12]
 806d87e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 806d880:	6a3b      	ldr	r3, [r7, #32]
 806d882:	025b      	lsls	r3, r3, #9
 806d884:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 806d886:	e044      	b.n	806d912 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 806d888:	68fb      	ldr	r3, [r7, #12]
 806d88a:	6a1b      	ldr	r3, [r3, #32]
 806d88c:	697a      	ldr	r2, [r7, #20]
 806d88e:	429a      	cmp	r2, r3
 806d890:	d01b      	beq.n	806d8ca <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 806d892:	68fb      	ldr	r3, [r7, #12]
 806d894:	699a      	ldr	r2, [r3, #24]
 806d896:	68fb      	ldr	r3, [r7, #12]
 806d898:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 806d89a:	429a      	cmp	r2, r3
 806d89c:	d215      	bcs.n	806d8ca <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 806d89e:	693b      	ldr	r3, [r7, #16]
 806d8a0:	7858      	ldrb	r0, [r3, #1]
 806d8a2:	68fb      	ldr	r3, [r7, #12]
 806d8a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d8a8:	2301      	movs	r3, #1
 806d8aa:	697a      	ldr	r2, [r7, #20]
 806d8ac:	f7fd fd66 	bl	806b37c <disk_read>
 806d8b0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 806d8b2:	2b00      	cmp	r3, #0
 806d8b4:	d009      	beq.n	806d8ca <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 806d8b6:	68fb      	ldr	r3, [r7, #12]
 806d8b8:	2201      	movs	r2, #1
 806d8ba:	755a      	strb	r2, [r3, #21]
 806d8bc:	693b      	ldr	r3, [r7, #16]
 806d8be:	2101      	movs	r1, #1
 806d8c0:	4618      	mov	r0, r3
 806d8c2:	f7fd fecf 	bl	806b664 <unlock_fs>
 806d8c6:	2301      	movs	r3, #1
 806d8c8:	e053      	b.n	806d972 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 806d8ca:	68fb      	ldr	r3, [r7, #12]
 806d8cc:	697a      	ldr	r2, [r7, #20]
 806d8ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 806d8d0:	68fb      	ldr	r3, [r7, #12]
 806d8d2:	699b      	ldr	r3, [r3, #24]
 806d8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d8d8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 806d8dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 806d8de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806d8e0:	687b      	ldr	r3, [r7, #4]
 806d8e2:	429a      	cmp	r2, r3
 806d8e4:	d901      	bls.n	806d8ea <f_write+0x2b8>
 806d8e6:	687b      	ldr	r3, [r7, #4]
 806d8e8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 806d8ea:	68fb      	ldr	r3, [r7, #12]
 806d8ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 806d8f0:	68fb      	ldr	r3, [r7, #12]
 806d8f2:	699b      	ldr	r3, [r3, #24]
 806d8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806d8f8:	4413      	add	r3, r2
 806d8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806d8fc:	69f9      	ldr	r1, [r7, #28]
 806d8fe:	4618      	mov	r0, r3
 806d900:	f7fd fe1c 	bl	806b53c <mem_cpy>
		fp->flag |= FA_DIRTY;
 806d904:	68fb      	ldr	r3, [r7, #12]
 806d906:	7d1b      	ldrb	r3, [r3, #20]
 806d908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 806d90c:	b2da      	uxtb	r2, r3
 806d90e:	68fb      	ldr	r3, [r7, #12]
 806d910:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 806d912:	69fa      	ldr	r2, [r7, #28]
 806d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806d916:	4413      	add	r3, r2
 806d918:	61fb      	str	r3, [r7, #28]
 806d91a:	68fb      	ldr	r3, [r7, #12]
 806d91c:	699a      	ldr	r2, [r3, #24]
 806d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806d920:	441a      	add	r2, r3
 806d922:	68fb      	ldr	r3, [r7, #12]
 806d924:	619a      	str	r2, [r3, #24]
 806d926:	68fb      	ldr	r3, [r7, #12]
 806d928:	68da      	ldr	r2, [r3, #12]
 806d92a:	68fb      	ldr	r3, [r7, #12]
 806d92c:	699b      	ldr	r3, [r3, #24]
 806d92e:	429a      	cmp	r2, r3
 806d930:	bf38      	it	cc
 806d932:	461a      	movcc	r2, r3
 806d934:	68fb      	ldr	r3, [r7, #12]
 806d936:	60da      	str	r2, [r3, #12]
 806d938:	683b      	ldr	r3, [r7, #0]
 806d93a:	681a      	ldr	r2, [r3, #0]
 806d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806d93e:	441a      	add	r2, r3
 806d940:	683b      	ldr	r3, [r7, #0]
 806d942:	601a      	str	r2, [r3, #0]
 806d944:	687a      	ldr	r2, [r7, #4]
 806d946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806d948:	1ad3      	subs	r3, r2, r3
 806d94a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 806d94c:	687b      	ldr	r3, [r7, #4]
 806d94e:	2b00      	cmp	r3, #0
 806d950:	f47f aeb6 	bne.w	806d6c0 <f_write+0x8e>
 806d954:	e000      	b.n	806d958 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 806d956:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 806d958:	68fb      	ldr	r3, [r7, #12]
 806d95a:	7d1b      	ldrb	r3, [r3, #20]
 806d95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 806d960:	b2da      	uxtb	r2, r3
 806d962:	68fb      	ldr	r3, [r7, #12]
 806d964:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 806d966:	693b      	ldr	r3, [r7, #16]
 806d968:	2100      	movs	r1, #0
 806d96a:	4618      	mov	r0, r3
 806d96c:	f7fd fe7a 	bl	806b664 <unlock_fs>
 806d970:	2300      	movs	r3, #0
}
 806d972:	4618      	mov	r0, r3
 806d974:	3730      	adds	r7, #48	; 0x30
 806d976:	46bd      	mov	sp, r7
 806d978:	bd80      	pop	{r7, pc}

0806d97a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 806d97a:	b580      	push	{r7, lr}
 806d97c:	b086      	sub	sp, #24
 806d97e:	af00      	add	r7, sp, #0
 806d980:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 806d982:	687b      	ldr	r3, [r7, #4]
 806d984:	f107 0208 	add.w	r2, r7, #8
 806d988:	4611      	mov	r1, r2
 806d98a:	4618      	mov	r0, r3
 806d98c:	f7ff fa72 	bl	806ce74 <validate>
 806d990:	4603      	mov	r3, r0
 806d992:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 806d994:	7dfb      	ldrb	r3, [r7, #23]
 806d996:	2b00      	cmp	r3, #0
 806d998:	d16d      	bne.n	806da76 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 806d99a:	687b      	ldr	r3, [r7, #4]
 806d99c:	7d1b      	ldrb	r3, [r3, #20]
 806d99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 806d9a2:	2b00      	cmp	r3, #0
 806d9a4:	d067      	beq.n	806da76 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 806d9a6:	687b      	ldr	r3, [r7, #4]
 806d9a8:	7d1b      	ldrb	r3, [r3, #20]
 806d9aa:	b25b      	sxtb	r3, r3
 806d9ac:	2b00      	cmp	r3, #0
 806d9ae:	da1a      	bge.n	806d9e6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 806d9b0:	68bb      	ldr	r3, [r7, #8]
 806d9b2:	7858      	ldrb	r0, [r3, #1]
 806d9b4:	687b      	ldr	r3, [r7, #4]
 806d9b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 806d9ba:	687b      	ldr	r3, [r7, #4]
 806d9bc:	6a1a      	ldr	r2, [r3, #32]
 806d9be:	2301      	movs	r3, #1
 806d9c0:	f7fd fcfc 	bl	806b3bc <disk_write>
 806d9c4:	4603      	mov	r3, r0
 806d9c6:	2b00      	cmp	r3, #0
 806d9c8:	d006      	beq.n	806d9d8 <f_sync+0x5e>
 806d9ca:	68bb      	ldr	r3, [r7, #8]
 806d9cc:	2101      	movs	r1, #1
 806d9ce:	4618      	mov	r0, r3
 806d9d0:	f7fd fe48 	bl	806b664 <unlock_fs>
 806d9d4:	2301      	movs	r3, #1
 806d9d6:	e055      	b.n	806da84 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 806d9d8:	687b      	ldr	r3, [r7, #4]
 806d9da:	7d1b      	ldrb	r3, [r3, #20]
 806d9dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806d9e0:	b2da      	uxtb	r2, r3
 806d9e2:	687b      	ldr	r3, [r7, #4]
 806d9e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 806d9e6:	f7fc ff4b 	bl	806a880 <get_fattime>
 806d9ea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 806d9ec:	68ba      	ldr	r2, [r7, #8]
 806d9ee:	687b      	ldr	r3, [r7, #4]
 806d9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806d9f2:	4619      	mov	r1, r3
 806d9f4:	4610      	mov	r0, r2
 806d9f6:	f7fe f801 	bl	806b9fc <move_window>
 806d9fa:	4603      	mov	r3, r0
 806d9fc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 806d9fe:	7dfb      	ldrb	r3, [r7, #23]
 806da00:	2b00      	cmp	r3, #0
 806da02:	d138      	bne.n	806da76 <f_sync+0xfc>
					dir = fp->dir_ptr;
 806da04:	687b      	ldr	r3, [r7, #4]
 806da06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806da08:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 806da0a:	68fb      	ldr	r3, [r7, #12]
 806da0c:	330b      	adds	r3, #11
 806da0e:	781a      	ldrb	r2, [r3, #0]
 806da10:	68fb      	ldr	r3, [r7, #12]
 806da12:	330b      	adds	r3, #11
 806da14:	f042 0220 	orr.w	r2, r2, #32
 806da18:	b2d2      	uxtb	r2, r2
 806da1a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 806da1c:	687b      	ldr	r3, [r7, #4]
 806da1e:	6818      	ldr	r0, [r3, #0]
 806da20:	687b      	ldr	r3, [r7, #4]
 806da22:	689b      	ldr	r3, [r3, #8]
 806da24:	461a      	mov	r2, r3
 806da26:	68f9      	ldr	r1, [r7, #12]
 806da28:	f7fe fd0e 	bl	806c448 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 806da2c:	68fb      	ldr	r3, [r7, #12]
 806da2e:	f103 021c 	add.w	r2, r3, #28
 806da32:	687b      	ldr	r3, [r7, #4]
 806da34:	68db      	ldr	r3, [r3, #12]
 806da36:	4619      	mov	r1, r3
 806da38:	4610      	mov	r0, r2
 806da3a:	f7fd fd53 	bl	806b4e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 806da3e:	68fb      	ldr	r3, [r7, #12]
 806da40:	3316      	adds	r3, #22
 806da42:	6939      	ldr	r1, [r7, #16]
 806da44:	4618      	mov	r0, r3
 806da46:	f7fd fd4d 	bl	806b4e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 806da4a:	68fb      	ldr	r3, [r7, #12]
 806da4c:	3312      	adds	r3, #18
 806da4e:	2100      	movs	r1, #0
 806da50:	4618      	mov	r0, r3
 806da52:	f7fd fd2c 	bl	806b4ae <st_word>
					fs->wflag = 1;
 806da56:	68bb      	ldr	r3, [r7, #8]
 806da58:	2201      	movs	r2, #1
 806da5a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 806da5c:	68bb      	ldr	r3, [r7, #8]
 806da5e:	4618      	mov	r0, r3
 806da60:	f7fd fffa 	bl	806ba58 <sync_fs>
 806da64:	4603      	mov	r3, r0
 806da66:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 806da68:	687b      	ldr	r3, [r7, #4]
 806da6a:	7d1b      	ldrb	r3, [r3, #20]
 806da6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 806da70:	b2da      	uxtb	r2, r3
 806da72:	687b      	ldr	r3, [r7, #4]
 806da74:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 806da76:	68bb      	ldr	r3, [r7, #8]
 806da78:	7dfa      	ldrb	r2, [r7, #23]
 806da7a:	4611      	mov	r1, r2
 806da7c:	4618      	mov	r0, r3
 806da7e:	f7fd fdf1 	bl	806b664 <unlock_fs>
 806da82:	7dfb      	ldrb	r3, [r7, #23]
}
 806da84:	4618      	mov	r0, r3
 806da86:	3718      	adds	r7, #24
 806da88:	46bd      	mov	sp, r7
 806da8a:	bd80      	pop	{r7, pc}

0806da8c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 806da8c:	b580      	push	{r7, lr}
 806da8e:	b084      	sub	sp, #16
 806da90:	af00      	add	r7, sp, #0
 806da92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 806da94:	6878      	ldr	r0, [r7, #4]
 806da96:	f7ff ff70 	bl	806d97a <f_sync>
 806da9a:	4603      	mov	r3, r0
 806da9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 806da9e:	7bfb      	ldrb	r3, [r7, #15]
 806daa0:	2b00      	cmp	r3, #0
 806daa2:	d11d      	bne.n	806dae0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 806daa4:	687b      	ldr	r3, [r7, #4]
 806daa6:	f107 0208 	add.w	r2, r7, #8
 806daaa:	4611      	mov	r1, r2
 806daac:	4618      	mov	r0, r3
 806daae:	f7ff f9e1 	bl	806ce74 <validate>
 806dab2:	4603      	mov	r3, r0
 806dab4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 806dab6:	7bfb      	ldrb	r3, [r7, #15]
 806dab8:	2b00      	cmp	r3, #0
 806daba:	d111      	bne.n	806dae0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 806dabc:	687b      	ldr	r3, [r7, #4]
 806dabe:	691b      	ldr	r3, [r3, #16]
 806dac0:	4618      	mov	r0, r3
 806dac2:	f7fd fef7 	bl	806b8b4 <dec_lock>
 806dac6:	4603      	mov	r3, r0
 806dac8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 806daca:	7bfb      	ldrb	r3, [r7, #15]
 806dacc:	2b00      	cmp	r3, #0
 806dace:	d102      	bne.n	806dad6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 806dad0:	687b      	ldr	r3, [r7, #4]
 806dad2:	2200      	movs	r2, #0
 806dad4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 806dad6:	68bb      	ldr	r3, [r7, #8]
 806dad8:	2100      	movs	r1, #0
 806dada:	4618      	mov	r0, r3
 806dadc:	f7fd fdc2 	bl	806b664 <unlock_fs>
#endif
		}
	}
	return res;
 806dae0:	7bfb      	ldrb	r3, [r7, #15]
}
 806dae2:	4618      	mov	r0, r3
 806dae4:	3710      	adds	r7, #16
 806dae6:	46bd      	mov	sp, r7
 806dae8:	bd80      	pop	{r7, pc}

0806daea <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 806daea:	b580      	push	{r7, lr}
 806daec:	b09e      	sub	sp, #120	; 0x78
 806daee:	af00      	add	r7, sp, #0
 806daf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 806daf2:	2300      	movs	r3, #0
 806daf4:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 806daf6:	f107 010c 	add.w	r1, r7, #12
 806dafa:	1d3b      	adds	r3, r7, #4
 806dafc:	2202      	movs	r2, #2
 806dafe:	4618      	mov	r0, r3
 806db00:	f7fe ff64 	bl	806c9cc <find_volume>
 806db04:	4603      	mov	r3, r0
 806db06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 806db0a:	68fb      	ldr	r3, [r7, #12]
 806db0c:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 806db0e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806db12:	2b00      	cmp	r3, #0
 806db14:	f040 808e 	bne.w	806dc34 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 806db18:	687a      	ldr	r2, [r7, #4]
 806db1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806db1e:	4611      	mov	r1, r2
 806db20:	4618      	mov	r0, r3
 806db22:	f7fe fe47 	bl	806c7b4 <follow_path>
 806db26:	4603      	mov	r3, r0
 806db28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 806db2c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806db30:	2b00      	cmp	r3, #0
 806db32:	d108      	bne.n	806db46 <f_unlink+0x5c>
 806db34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806db38:	2102      	movs	r1, #2
 806db3a:	4618      	mov	r0, r3
 806db3c:	f7fd fdae 	bl	806b69c <chk_lock>
 806db40:	4603      	mov	r3, r0
 806db42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 806db46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806db4a:	2b00      	cmp	r3, #0
 806db4c:	d172      	bne.n	806dc34 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 806db4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 806db52:	b25b      	sxtb	r3, r3
 806db54:	2b00      	cmp	r3, #0
 806db56:	da03      	bge.n	806db60 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 806db58:	2306      	movs	r3, #6
 806db5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 806db5e:	e008      	b.n	806db72 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 806db60:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 806db64:	f003 0301 	and.w	r3, r3, #1
 806db68:	2b00      	cmp	r3, #0
 806db6a:	d002      	beq.n	806db72 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 806db6c:	2307      	movs	r3, #7
 806db6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 806db72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806db76:	2b00      	cmp	r3, #0
 806db78:	d134      	bne.n	806dbe4 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 806db7a:	68fb      	ldr	r3, [r7, #12]
 806db7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 806db7e:	4611      	mov	r1, r2
 806db80:	4618      	mov	r0, r3
 806db82:	f7fe fc42 	bl	806c40a <ld_clust>
 806db86:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 806db88:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 806db8c:	f003 0310 	and.w	r3, r3, #16
 806db90:	2b00      	cmp	r3, #0
 806db92:	d027      	beq.n	806dbe4 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 806db94:	68fb      	ldr	r3, [r7, #12]
 806db96:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 806db98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 806db9a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 806db9c:	f107 0310 	add.w	r3, r7, #16
 806dba0:	2100      	movs	r1, #0
 806dba2:	4618      	mov	r0, r3
 806dba4:	f7fe faaa 	bl	806c0fc <dir_sdi>
 806dba8:	4603      	mov	r3, r0
 806dbaa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 806dbae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dbb2:	2b00      	cmp	r3, #0
 806dbb4:	d116      	bne.n	806dbe4 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 806dbb6:	f107 0310 	add.w	r3, r7, #16
 806dbba:	2100      	movs	r1, #0
 806dbbc:	4618      	mov	r0, r3
 806dbbe:	f7fe fc63 	bl	806c488 <dir_read>
 806dbc2:	4603      	mov	r3, r0
 806dbc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 806dbc8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dbcc:	2b00      	cmp	r3, #0
 806dbce:	d102      	bne.n	806dbd6 <f_unlink+0xec>
 806dbd0:	2307      	movs	r3, #7
 806dbd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 806dbd6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dbda:	2b04      	cmp	r3, #4
 806dbdc:	d102      	bne.n	806dbe4 <f_unlink+0xfa>
 806dbde:	2300      	movs	r3, #0
 806dbe0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 806dbe4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dbe8:	2b00      	cmp	r3, #0
 806dbea:	d123      	bne.n	806dc34 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 806dbec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806dbf0:	4618      	mov	r0, r3
 806dbf2:	f7fe fd2d 	bl	806c650 <dir_remove>
 806dbf6:	4603      	mov	r3, r0
 806dbf8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 806dbfc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dc00:	2b00      	cmp	r3, #0
 806dc02:	d10c      	bne.n	806dc1e <f_unlink+0x134>
 806dc04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 806dc06:	2b00      	cmp	r3, #0
 806dc08:	d009      	beq.n	806dc1e <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 806dc0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 806dc0e:	2200      	movs	r2, #0
 806dc10:	6f39      	ldr	r1, [r7, #112]	; 0x70
 806dc12:	4618      	mov	r0, r3
 806dc14:	f7fe f941 	bl	806be9a <remove_chain>
 806dc18:	4603      	mov	r3, r0
 806dc1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 806dc1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 806dc22:	2b00      	cmp	r3, #0
 806dc24:	d106      	bne.n	806dc34 <f_unlink+0x14a>
 806dc26:	68fb      	ldr	r3, [r7, #12]
 806dc28:	4618      	mov	r0, r3
 806dc2a:	f7fd ff15 	bl	806ba58 <sync_fs>
 806dc2e:	4603      	mov	r3, r0
 806dc30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 806dc34:	68fb      	ldr	r3, [r7, #12]
 806dc36:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 806dc3a:	4611      	mov	r1, r2
 806dc3c:	4618      	mov	r0, r3
 806dc3e:	f7fd fd11 	bl	806b664 <unlock_fs>
 806dc42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 806dc46:	4618      	mov	r0, r3
 806dc48:	3778      	adds	r7, #120	; 0x78
 806dc4a:	46bd      	mov	sp, r7
 806dc4c:	bd80      	pop	{r7, pc}

0806dc4e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 806dc4e:	b580      	push	{r7, lr}
 806dc50:	b088      	sub	sp, #32
 806dc52:	af00      	add	r7, sp, #0
 806dc54:	60f8      	str	r0, [r7, #12]
 806dc56:	60b9      	str	r1, [r7, #8]
 806dc58:	607a      	str	r2, [r7, #4]
	int n = 0;
 806dc5a:	2300      	movs	r3, #0
 806dc5c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 806dc5e:	68fb      	ldr	r3, [r7, #12]
 806dc60:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 806dc62:	e01b      	b.n	806dc9c <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 806dc64:	f107 0310 	add.w	r3, r7, #16
 806dc68:	f107 0114 	add.w	r1, r7, #20
 806dc6c:	2201      	movs	r2, #1
 806dc6e:	6878      	ldr	r0, [r7, #4]
 806dc70:	f7ff fb71 	bl	806d356 <f_read>
		if (rc != 1) break;
 806dc74:	693b      	ldr	r3, [r7, #16]
 806dc76:	2b01      	cmp	r3, #1
 806dc78:	d116      	bne.n	806dca8 <f_gets+0x5a>
		c = s[0];
 806dc7a:	7d3b      	ldrb	r3, [r7, #20]
 806dc7c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 806dc7e:	7dfb      	ldrb	r3, [r7, #23]
 806dc80:	2b0d      	cmp	r3, #13
 806dc82:	d100      	bne.n	806dc86 <f_gets+0x38>
 806dc84:	e00a      	b.n	806dc9c <f_gets+0x4e>
		*p++ = c;
 806dc86:	69bb      	ldr	r3, [r7, #24]
 806dc88:	1c5a      	adds	r2, r3, #1
 806dc8a:	61ba      	str	r2, [r7, #24]
 806dc8c:	7dfa      	ldrb	r2, [r7, #23]
 806dc8e:	701a      	strb	r2, [r3, #0]
		n++;
 806dc90:	69fb      	ldr	r3, [r7, #28]
 806dc92:	3301      	adds	r3, #1
 806dc94:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 806dc96:	7dfb      	ldrb	r3, [r7, #23]
 806dc98:	2b0a      	cmp	r3, #10
 806dc9a:	d007      	beq.n	806dcac <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 806dc9c:	68bb      	ldr	r3, [r7, #8]
 806dc9e:	3b01      	subs	r3, #1
 806dca0:	69fa      	ldr	r2, [r7, #28]
 806dca2:	429a      	cmp	r2, r3
 806dca4:	dbde      	blt.n	806dc64 <f_gets+0x16>
 806dca6:	e002      	b.n	806dcae <f_gets+0x60>
		if (rc != 1) break;
 806dca8:	bf00      	nop
 806dcaa:	e000      	b.n	806dcae <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 806dcac:	bf00      	nop
	}
	*p = 0;
 806dcae:	69bb      	ldr	r3, [r7, #24]
 806dcb0:	2200      	movs	r2, #0
 806dcb2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 806dcb4:	69fb      	ldr	r3, [r7, #28]
 806dcb6:	2b00      	cmp	r3, #0
 806dcb8:	d001      	beq.n	806dcbe <f_gets+0x70>
 806dcba:	68fb      	ldr	r3, [r7, #12]
 806dcbc:	e000      	b.n	806dcc0 <f_gets+0x72>
 806dcbe:	2300      	movs	r3, #0
}
 806dcc0:	4618      	mov	r0, r3
 806dcc2:	3720      	adds	r7, #32
 806dcc4:	46bd      	mov	sp, r7
 806dcc6:	bd80      	pop	{r7, pc}

0806dcc8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 806dcc8:	b480      	push	{r7}
 806dcca:	b087      	sub	sp, #28
 806dccc:	af00      	add	r7, sp, #0
 806dcce:	60f8      	str	r0, [r7, #12]
 806dcd0:	60b9      	str	r1, [r7, #8]
 806dcd2:	4613      	mov	r3, r2
 806dcd4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 806dcd6:	2301      	movs	r3, #1
 806dcd8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 806dcda:	2300      	movs	r3, #0
 806dcdc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 806dcde:	4b1f      	ldr	r3, [pc, #124]	; (806dd5c <FATFS_LinkDriverEx+0x94>)
 806dce0:	7a5b      	ldrb	r3, [r3, #9]
 806dce2:	b2db      	uxtb	r3, r3
 806dce4:	2b00      	cmp	r3, #0
 806dce6:	d131      	bne.n	806dd4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 806dce8:	4b1c      	ldr	r3, [pc, #112]	; (806dd5c <FATFS_LinkDriverEx+0x94>)
 806dcea:	7a5b      	ldrb	r3, [r3, #9]
 806dcec:	b2db      	uxtb	r3, r3
 806dcee:	461a      	mov	r2, r3
 806dcf0:	4b1a      	ldr	r3, [pc, #104]	; (806dd5c <FATFS_LinkDriverEx+0x94>)
 806dcf2:	2100      	movs	r1, #0
 806dcf4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 806dcf6:	4b19      	ldr	r3, [pc, #100]	; (806dd5c <FATFS_LinkDriverEx+0x94>)
 806dcf8:	7a5b      	ldrb	r3, [r3, #9]
 806dcfa:	b2db      	uxtb	r3, r3
 806dcfc:	4a17      	ldr	r2, [pc, #92]	; (806dd5c <FATFS_LinkDriverEx+0x94>)
 806dcfe:	009b      	lsls	r3, r3, #2
 806dd00:	4413      	add	r3, r2
 806dd02:	68fa      	ldr	r2, [r7, #12]
 806dd04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 806dd06:	4b15      	ldr	r3, [pc, #84]	; (806dd5c <FATFS_LinkDriverEx+0x94>)
 806dd08:	7a5b      	ldrb	r3, [r3, #9]
 806dd0a:	b2db      	uxtb	r3, r3
 806dd0c:	461a      	mov	r2, r3
 806dd0e:	4b13      	ldr	r3, [pc, #76]	; (806dd5c <FATFS_LinkDriverEx+0x94>)
 806dd10:	4413      	add	r3, r2
 806dd12:	79fa      	ldrb	r2, [r7, #7]
 806dd14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 806dd16:	4b11      	ldr	r3, [pc, #68]	; (806dd5c <FATFS_LinkDriverEx+0x94>)
 806dd18:	7a5b      	ldrb	r3, [r3, #9]
 806dd1a:	b2db      	uxtb	r3, r3
 806dd1c:	1c5a      	adds	r2, r3, #1
 806dd1e:	b2d1      	uxtb	r1, r2
 806dd20:	4a0e      	ldr	r2, [pc, #56]	; (806dd5c <FATFS_LinkDriverEx+0x94>)
 806dd22:	7251      	strb	r1, [r2, #9]
 806dd24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 806dd26:	7dbb      	ldrb	r3, [r7, #22]
 806dd28:	3330      	adds	r3, #48	; 0x30
 806dd2a:	b2da      	uxtb	r2, r3
 806dd2c:	68bb      	ldr	r3, [r7, #8]
 806dd2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 806dd30:	68bb      	ldr	r3, [r7, #8]
 806dd32:	3301      	adds	r3, #1
 806dd34:	223a      	movs	r2, #58	; 0x3a
 806dd36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 806dd38:	68bb      	ldr	r3, [r7, #8]
 806dd3a:	3302      	adds	r3, #2
 806dd3c:	222f      	movs	r2, #47	; 0x2f
 806dd3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 806dd40:	68bb      	ldr	r3, [r7, #8]
 806dd42:	3303      	adds	r3, #3
 806dd44:	2200      	movs	r2, #0
 806dd46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 806dd48:	2300      	movs	r3, #0
 806dd4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 806dd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 806dd4e:	4618      	mov	r0, r3
 806dd50:	371c      	adds	r7, #28
 806dd52:	46bd      	mov	sp, r7
 806dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 806dd58:	4770      	bx	lr
 806dd5a:	bf00      	nop
 806dd5c:	2000044c 	.word	0x2000044c

0806dd60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 806dd60:	b580      	push	{r7, lr}
 806dd62:	b082      	sub	sp, #8
 806dd64:	af00      	add	r7, sp, #0
 806dd66:	6078      	str	r0, [r7, #4]
 806dd68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 806dd6a:	2200      	movs	r2, #0
 806dd6c:	6839      	ldr	r1, [r7, #0]
 806dd6e:	6878      	ldr	r0, [r7, #4]
 806dd70:	f7ff ffaa 	bl	806dcc8 <FATFS_LinkDriverEx>
 806dd74:	4603      	mov	r3, r0
}
 806dd76:	4618      	mov	r0, r3
 806dd78:	3708      	adds	r7, #8
 806dd7a:	46bd      	mov	sp, r7
 806dd7c:	bd80      	pop	{r7, pc}

0806dd7e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 806dd7e:	b580      	push	{r7, lr}
 806dd80:	b084      	sub	sp, #16
 806dd82:	af00      	add	r7, sp, #0
 806dd84:	4603      	mov	r3, r0
 806dd86:	6039      	str	r1, [r7, #0]
 806dd88:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 806dd8a:	2200      	movs	r2, #0
 806dd8c:	2101      	movs	r1, #1
 806dd8e:	2001      	movs	r0, #1
 806dd90:	f000 fc72 	bl	806e678 <osSemaphoreNew>
 806dd94:	4602      	mov	r2, r0
 806dd96:	683b      	ldr	r3, [r7, #0]
 806dd98:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 806dd9a:	683b      	ldr	r3, [r7, #0]
 806dd9c:	681b      	ldr	r3, [r3, #0]
 806dd9e:	2b00      	cmp	r3, #0
 806dda0:	bf14      	ite	ne
 806dda2:	2301      	movne	r3, #1
 806dda4:	2300      	moveq	r3, #0
 806dda6:	b2db      	uxtb	r3, r3
 806dda8:	60fb      	str	r3, [r7, #12]

    return ret;
 806ddaa:	68fb      	ldr	r3, [r7, #12]
}
 806ddac:	4618      	mov	r0, r3
 806ddae:	3710      	adds	r7, #16
 806ddb0:	46bd      	mov	sp, r7
 806ddb2:	bd80      	pop	{r7, pc}

0806ddb4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 806ddb4:	b580      	push	{r7, lr}
 806ddb6:	b082      	sub	sp, #8
 806ddb8:	af00      	add	r7, sp, #0
 806ddba:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 806ddbc:	6878      	ldr	r0, [r7, #4]
 806ddbe:	f000 fd7b 	bl	806e8b8 <osSemaphoreDelete>
#endif
    return 1;
 806ddc2:	2301      	movs	r3, #1
}
 806ddc4:	4618      	mov	r0, r3
 806ddc6:	3708      	adds	r7, #8
 806ddc8:	46bd      	mov	sp, r7
 806ddca:	bd80      	pop	{r7, pc}

0806ddcc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 806ddcc:	b580      	push	{r7, lr}
 806ddce:	b084      	sub	sp, #16
 806ddd0:	af00      	add	r7, sp, #0
 806ddd2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 806ddd4:	2300      	movs	r3, #0
 806ddd6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 806ddd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 806dddc:	6878      	ldr	r0, [r7, #4]
 806ddde:	f000 fcd5 	bl	806e78c <osSemaphoreAcquire>
 806dde2:	4603      	mov	r3, r0
 806dde4:	2b00      	cmp	r3, #0
 806dde6:	d101      	bne.n	806ddec <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 806dde8:	2301      	movs	r3, #1
 806ddea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 806ddec:	68fb      	ldr	r3, [r7, #12]
}
 806ddee:	4618      	mov	r0, r3
 806ddf0:	3710      	adds	r7, #16
 806ddf2:	46bd      	mov	sp, r7
 806ddf4:	bd80      	pop	{r7, pc}

0806ddf6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 806ddf6:	b580      	push	{r7, lr}
 806ddf8:	b082      	sub	sp, #8
 806ddfa:	af00      	add	r7, sp, #0
 806ddfc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 806ddfe:	6878      	ldr	r0, [r7, #4]
 806de00:	f000 fd16 	bl	806e830 <osSemaphoreRelease>
#endif
}
 806de04:	bf00      	nop
 806de06:	3708      	adds	r7, #8
 806de08:	46bd      	mov	sp, r7
 806de0a:	bd80      	pop	{r7, pc}

0806de0c <__NVIC_SetPriority>:
{
 806de0c:	b480      	push	{r7}
 806de0e:	b083      	sub	sp, #12
 806de10:	af00      	add	r7, sp, #0
 806de12:	4603      	mov	r3, r0
 806de14:	6039      	str	r1, [r7, #0]
 806de16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 806de18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806de1c:	2b00      	cmp	r3, #0
 806de1e:	db0a      	blt.n	806de36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806de20:	683b      	ldr	r3, [r7, #0]
 806de22:	b2da      	uxtb	r2, r3
 806de24:	490c      	ldr	r1, [pc, #48]	; (806de58 <__NVIC_SetPriority+0x4c>)
 806de26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 806de2a:	0112      	lsls	r2, r2, #4
 806de2c:	b2d2      	uxtb	r2, r2
 806de2e:	440b      	add	r3, r1
 806de30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 806de34:	e00a      	b.n	806de4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806de36:	683b      	ldr	r3, [r7, #0]
 806de38:	b2da      	uxtb	r2, r3
 806de3a:	4908      	ldr	r1, [pc, #32]	; (806de5c <__NVIC_SetPriority+0x50>)
 806de3c:	79fb      	ldrb	r3, [r7, #7]
 806de3e:	f003 030f 	and.w	r3, r3, #15
 806de42:	3b04      	subs	r3, #4
 806de44:	0112      	lsls	r2, r2, #4
 806de46:	b2d2      	uxtb	r2, r2
 806de48:	440b      	add	r3, r1
 806de4a:	761a      	strb	r2, [r3, #24]
}
 806de4c:	bf00      	nop
 806de4e:	370c      	adds	r7, #12
 806de50:	46bd      	mov	sp, r7
 806de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 806de56:	4770      	bx	lr
 806de58:	e000e100 	.word	0xe000e100
 806de5c:	e000ed00 	.word	0xe000ed00

0806de60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 806de60:	b580      	push	{r7, lr}
 806de62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 806de64:	4b05      	ldr	r3, [pc, #20]	; (806de7c <SysTick_Handler+0x1c>)
 806de66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 806de68:	f002 fe80 	bl	8070b6c <xTaskGetSchedulerState>
 806de6c:	4603      	mov	r3, r0
 806de6e:	2b01      	cmp	r3, #1
 806de70:	d001      	beq.n	806de76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 806de72:	f004 f821 	bl	8071eb8 <xPortSysTickHandler>
  }
}
 806de76:	bf00      	nop
 806de78:	bd80      	pop	{r7, pc}
 806de7a:	bf00      	nop
 806de7c:	e000e010 	.word	0xe000e010

0806de80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 806de80:	b580      	push	{r7, lr}
 806de82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 806de84:	2100      	movs	r1, #0
 806de86:	f06f 0004 	mvn.w	r0, #4
 806de8a:	f7ff ffbf 	bl	806de0c <__NVIC_SetPriority>
#endif
}
 806de8e:	bf00      	nop
 806de90:	bd80      	pop	{r7, pc}
	...

0806de94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 806de94:	b480      	push	{r7}
 806de96:	b083      	sub	sp, #12
 806de98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806de9a:	f3ef 8305 	mrs	r3, IPSR
 806de9e:	603b      	str	r3, [r7, #0]
  return(result);
 806dea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 806dea2:	2b00      	cmp	r3, #0
 806dea4:	d003      	beq.n	806deae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 806dea6:	f06f 0305 	mvn.w	r3, #5
 806deaa:	607b      	str	r3, [r7, #4]
 806deac:	e00c      	b.n	806dec8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 806deae:	4b0a      	ldr	r3, [pc, #40]	; (806ded8 <osKernelInitialize+0x44>)
 806deb0:	681b      	ldr	r3, [r3, #0]
 806deb2:	2b00      	cmp	r3, #0
 806deb4:	d105      	bne.n	806dec2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 806deb6:	4b08      	ldr	r3, [pc, #32]	; (806ded8 <osKernelInitialize+0x44>)
 806deb8:	2201      	movs	r2, #1
 806deba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 806debc:	2300      	movs	r3, #0
 806debe:	607b      	str	r3, [r7, #4]
 806dec0:	e002      	b.n	806dec8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 806dec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806dec6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 806dec8:	687b      	ldr	r3, [r7, #4]
}
 806deca:	4618      	mov	r0, r3
 806decc:	370c      	adds	r7, #12
 806dece:	46bd      	mov	sp, r7
 806ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ded4:	4770      	bx	lr
 806ded6:	bf00      	nop
 806ded8:	20000458 	.word	0x20000458

0806dedc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 806dedc:	b580      	push	{r7, lr}
 806dede:	b082      	sub	sp, #8
 806dee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806dee2:	f3ef 8305 	mrs	r3, IPSR
 806dee6:	603b      	str	r3, [r7, #0]
  return(result);
 806dee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 806deea:	2b00      	cmp	r3, #0
 806deec:	d003      	beq.n	806def6 <osKernelStart+0x1a>
    stat = osErrorISR;
 806deee:	f06f 0305 	mvn.w	r3, #5
 806def2:	607b      	str	r3, [r7, #4]
 806def4:	e010      	b.n	806df18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 806def6:	4b0b      	ldr	r3, [pc, #44]	; (806df24 <osKernelStart+0x48>)
 806def8:	681b      	ldr	r3, [r3, #0]
 806defa:	2b01      	cmp	r3, #1
 806defc:	d109      	bne.n	806df12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 806defe:	f7ff ffbf 	bl	806de80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 806df02:	4b08      	ldr	r3, [pc, #32]	; (806df24 <osKernelStart+0x48>)
 806df04:	2202      	movs	r2, #2
 806df06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 806df08:	f002 f9c4 	bl	8070294 <vTaskStartScheduler>
      stat = osOK;
 806df0c:	2300      	movs	r3, #0
 806df0e:	607b      	str	r3, [r7, #4]
 806df10:	e002      	b.n	806df18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 806df12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806df16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 806df18:	687b      	ldr	r3, [r7, #4]
}
 806df1a:	4618      	mov	r0, r3
 806df1c:	3708      	adds	r7, #8
 806df1e:	46bd      	mov	sp, r7
 806df20:	bd80      	pop	{r7, pc}
 806df22:	bf00      	nop
 806df24:	20000458 	.word	0x20000458

0806df28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 806df28:	b580      	push	{r7, lr}
 806df2a:	b08e      	sub	sp, #56	; 0x38
 806df2c:	af04      	add	r7, sp, #16
 806df2e:	60f8      	str	r0, [r7, #12]
 806df30:	60b9      	str	r1, [r7, #8]
 806df32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 806df34:	2300      	movs	r3, #0
 806df36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806df38:	f3ef 8305 	mrs	r3, IPSR
 806df3c:	617b      	str	r3, [r7, #20]
  return(result);
 806df3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 806df40:	2b00      	cmp	r3, #0
 806df42:	d17e      	bne.n	806e042 <osThreadNew+0x11a>
 806df44:	68fb      	ldr	r3, [r7, #12]
 806df46:	2b00      	cmp	r3, #0
 806df48:	d07b      	beq.n	806e042 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 806df4a:	2380      	movs	r3, #128	; 0x80
 806df4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 806df4e:	2318      	movs	r3, #24
 806df50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 806df52:	2300      	movs	r3, #0
 806df54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 806df56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806df5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 806df5c:	687b      	ldr	r3, [r7, #4]
 806df5e:	2b00      	cmp	r3, #0
 806df60:	d045      	beq.n	806dfee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 806df62:	687b      	ldr	r3, [r7, #4]
 806df64:	681b      	ldr	r3, [r3, #0]
 806df66:	2b00      	cmp	r3, #0
 806df68:	d002      	beq.n	806df70 <osThreadNew+0x48>
        name = attr->name;
 806df6a:	687b      	ldr	r3, [r7, #4]
 806df6c:	681b      	ldr	r3, [r3, #0]
 806df6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 806df70:	687b      	ldr	r3, [r7, #4]
 806df72:	699b      	ldr	r3, [r3, #24]
 806df74:	2b00      	cmp	r3, #0
 806df76:	d002      	beq.n	806df7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 806df78:	687b      	ldr	r3, [r7, #4]
 806df7a:	699b      	ldr	r3, [r3, #24]
 806df7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 806df7e:	69fb      	ldr	r3, [r7, #28]
 806df80:	2b00      	cmp	r3, #0
 806df82:	d008      	beq.n	806df96 <osThreadNew+0x6e>
 806df84:	69fb      	ldr	r3, [r7, #28]
 806df86:	2b38      	cmp	r3, #56	; 0x38
 806df88:	d805      	bhi.n	806df96 <osThreadNew+0x6e>
 806df8a:	687b      	ldr	r3, [r7, #4]
 806df8c:	685b      	ldr	r3, [r3, #4]
 806df8e:	f003 0301 	and.w	r3, r3, #1
 806df92:	2b00      	cmp	r3, #0
 806df94:	d001      	beq.n	806df9a <osThreadNew+0x72>
        return (NULL);
 806df96:	2300      	movs	r3, #0
 806df98:	e054      	b.n	806e044 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 806df9a:	687b      	ldr	r3, [r7, #4]
 806df9c:	695b      	ldr	r3, [r3, #20]
 806df9e:	2b00      	cmp	r3, #0
 806dfa0:	d003      	beq.n	806dfaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 806dfa2:	687b      	ldr	r3, [r7, #4]
 806dfa4:	695b      	ldr	r3, [r3, #20]
 806dfa6:	089b      	lsrs	r3, r3, #2
 806dfa8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 806dfaa:	687b      	ldr	r3, [r7, #4]
 806dfac:	689b      	ldr	r3, [r3, #8]
 806dfae:	2b00      	cmp	r3, #0
 806dfb0:	d00e      	beq.n	806dfd0 <osThreadNew+0xa8>
 806dfb2:	687b      	ldr	r3, [r7, #4]
 806dfb4:	68db      	ldr	r3, [r3, #12]
 806dfb6:	2bbb      	cmp	r3, #187	; 0xbb
 806dfb8:	d90a      	bls.n	806dfd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 806dfba:	687b      	ldr	r3, [r7, #4]
 806dfbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 806dfbe:	2b00      	cmp	r3, #0
 806dfc0:	d006      	beq.n	806dfd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 806dfc2:	687b      	ldr	r3, [r7, #4]
 806dfc4:	695b      	ldr	r3, [r3, #20]
 806dfc6:	2b00      	cmp	r3, #0
 806dfc8:	d002      	beq.n	806dfd0 <osThreadNew+0xa8>
        mem = 1;
 806dfca:	2301      	movs	r3, #1
 806dfcc:	61bb      	str	r3, [r7, #24]
 806dfce:	e010      	b.n	806dff2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 806dfd0:	687b      	ldr	r3, [r7, #4]
 806dfd2:	689b      	ldr	r3, [r3, #8]
 806dfd4:	2b00      	cmp	r3, #0
 806dfd6:	d10c      	bne.n	806dff2 <osThreadNew+0xca>
 806dfd8:	687b      	ldr	r3, [r7, #4]
 806dfda:	68db      	ldr	r3, [r3, #12]
 806dfdc:	2b00      	cmp	r3, #0
 806dfde:	d108      	bne.n	806dff2 <osThreadNew+0xca>
 806dfe0:	687b      	ldr	r3, [r7, #4]
 806dfe2:	691b      	ldr	r3, [r3, #16]
 806dfe4:	2b00      	cmp	r3, #0
 806dfe6:	d104      	bne.n	806dff2 <osThreadNew+0xca>
          mem = 0;
 806dfe8:	2300      	movs	r3, #0
 806dfea:	61bb      	str	r3, [r7, #24]
 806dfec:	e001      	b.n	806dff2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 806dfee:	2300      	movs	r3, #0
 806dff0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 806dff2:	69bb      	ldr	r3, [r7, #24]
 806dff4:	2b01      	cmp	r3, #1
 806dff6:	d110      	bne.n	806e01a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 806dff8:	687b      	ldr	r3, [r7, #4]
 806dffa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 806dffc:	687a      	ldr	r2, [r7, #4]
 806dffe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 806e000:	9202      	str	r2, [sp, #8]
 806e002:	9301      	str	r3, [sp, #4]
 806e004:	69fb      	ldr	r3, [r7, #28]
 806e006:	9300      	str	r3, [sp, #0]
 806e008:	68bb      	ldr	r3, [r7, #8]
 806e00a:	6a3a      	ldr	r2, [r7, #32]
 806e00c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806e00e:	68f8      	ldr	r0, [r7, #12]
 806e010:	f001 ff54 	bl	806febc <xTaskCreateStatic>
 806e014:	4603      	mov	r3, r0
 806e016:	613b      	str	r3, [r7, #16]
 806e018:	e013      	b.n	806e042 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 806e01a:	69bb      	ldr	r3, [r7, #24]
 806e01c:	2b00      	cmp	r3, #0
 806e01e:	d110      	bne.n	806e042 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 806e020:	6a3b      	ldr	r3, [r7, #32]
 806e022:	b29a      	uxth	r2, r3
 806e024:	f107 0310 	add.w	r3, r7, #16
 806e028:	9301      	str	r3, [sp, #4]
 806e02a:	69fb      	ldr	r3, [r7, #28]
 806e02c:	9300      	str	r3, [sp, #0]
 806e02e:	68bb      	ldr	r3, [r7, #8]
 806e030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806e032:	68f8      	ldr	r0, [r7, #12]
 806e034:	f001 ff9f 	bl	806ff76 <xTaskCreate>
 806e038:	4603      	mov	r3, r0
 806e03a:	2b01      	cmp	r3, #1
 806e03c:	d001      	beq.n	806e042 <osThreadNew+0x11a>
            hTask = NULL;
 806e03e:	2300      	movs	r3, #0
 806e040:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 806e042:	693b      	ldr	r3, [r7, #16]
}
 806e044:	4618      	mov	r0, r3
 806e046:	3728      	adds	r7, #40	; 0x28
 806e048:	46bd      	mov	sp, r7
 806e04a:	bd80      	pop	{r7, pc}

0806e04c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 806e04c:	b580      	push	{r7, lr}
 806e04e:	b088      	sub	sp, #32
 806e050:	af02      	add	r7, sp, #8
 806e052:	6078      	str	r0, [r7, #4]
 806e054:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 806e056:	687b      	ldr	r3, [r7, #4]
 806e058:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 806e05a:	697b      	ldr	r3, [r7, #20]
 806e05c:	2b00      	cmp	r3, #0
 806e05e:	d002      	beq.n	806e066 <osThreadFlagsSet+0x1a>
 806e060:	683b      	ldr	r3, [r7, #0]
 806e062:	2b00      	cmp	r3, #0
 806e064:	da03      	bge.n	806e06e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 806e066:	f06f 0303 	mvn.w	r3, #3
 806e06a:	60fb      	str	r3, [r7, #12]
 806e06c:	e035      	b.n	806e0da <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 806e06e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e072:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e074:	f3ef 8305 	mrs	r3, IPSR
 806e078:	613b      	str	r3, [r7, #16]
  return(result);
 806e07a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 806e07c:	2b00      	cmp	r3, #0
 806e07e:	d01f      	beq.n	806e0c0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 806e080:	2300      	movs	r3, #0
 806e082:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 806e084:	f107 0308 	add.w	r3, r7, #8
 806e088:	9300      	str	r3, [sp, #0]
 806e08a:	2300      	movs	r3, #0
 806e08c:	2201      	movs	r2, #1
 806e08e:	6839      	ldr	r1, [r7, #0]
 806e090:	6978      	ldr	r0, [r7, #20]
 806e092:	f003 f813 	bl	80710bc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 806e096:	f107 030c 	add.w	r3, r7, #12
 806e09a:	2200      	movs	r2, #0
 806e09c:	9200      	str	r2, [sp, #0]
 806e09e:	2200      	movs	r2, #0
 806e0a0:	2100      	movs	r1, #0
 806e0a2:	6978      	ldr	r0, [r7, #20]
 806e0a4:	f003 f80a 	bl	80710bc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 806e0a8:	68bb      	ldr	r3, [r7, #8]
 806e0aa:	2b00      	cmp	r3, #0
 806e0ac:	d015      	beq.n	806e0da <osThreadFlagsSet+0x8e>
 806e0ae:	4b0d      	ldr	r3, [pc, #52]	; (806e0e4 <osThreadFlagsSet+0x98>)
 806e0b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e0b4:	601a      	str	r2, [r3, #0]
 806e0b6:	f3bf 8f4f 	dsb	sy
 806e0ba:	f3bf 8f6f 	isb	sy
 806e0be:	e00c      	b.n	806e0da <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 806e0c0:	2300      	movs	r3, #0
 806e0c2:	2201      	movs	r2, #1
 806e0c4:	6839      	ldr	r1, [r7, #0]
 806e0c6:	6978      	ldr	r0, [r7, #20]
 806e0c8:	f002 ff3a 	bl	8070f40 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 806e0cc:	f107 030c 	add.w	r3, r7, #12
 806e0d0:	2200      	movs	r2, #0
 806e0d2:	2100      	movs	r1, #0
 806e0d4:	6978      	ldr	r0, [r7, #20]
 806e0d6:	f002 ff33 	bl	8070f40 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 806e0da:	68fb      	ldr	r3, [r7, #12]
}
 806e0dc:	4618      	mov	r0, r3
 806e0de:	3718      	adds	r7, #24
 806e0e0:	46bd      	mov	sp, r7
 806e0e2:	bd80      	pop	{r7, pc}
 806e0e4:	e000ed04 	.word	0xe000ed04

0806e0e8 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 806e0e8:	b580      	push	{r7, lr}
 806e0ea:	b086      	sub	sp, #24
 806e0ec:	af00      	add	r7, sp, #0
 806e0ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e0f0:	f3ef 8305 	mrs	r3, IPSR
 806e0f4:	60fb      	str	r3, [r7, #12]
  return(result);
 806e0f6:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 806e0f8:	2b00      	cmp	r3, #0
 806e0fa:	d003      	beq.n	806e104 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 806e0fc:	f06f 0305 	mvn.w	r3, #5
 806e100:	617b      	str	r3, [r7, #20]
 806e102:	e02a      	b.n	806e15a <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 806e104:	687b      	ldr	r3, [r7, #4]
 806e106:	2b00      	cmp	r3, #0
 806e108:	da03      	bge.n	806e112 <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 806e10a:	f06f 0303 	mvn.w	r3, #3
 806e10e:	617b      	str	r3, [r7, #20]
 806e110:	e023      	b.n	806e15a <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 806e112:	f002 fd1b 	bl	8070b4c <xTaskGetCurrentTaskHandle>
 806e116:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 806e118:	f107 0308 	add.w	r3, r7, #8
 806e11c:	2200      	movs	r2, #0
 806e11e:	2100      	movs	r1, #0
 806e120:	6938      	ldr	r0, [r7, #16]
 806e122:	f002 ff0d 	bl	8070f40 <xTaskGenericNotify>
 806e126:	4603      	mov	r3, r0
 806e128:	2b01      	cmp	r3, #1
 806e12a:	d113      	bne.n	806e154 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 806e12c:	68bb      	ldr	r3, [r7, #8]
 806e12e:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 806e130:	687b      	ldr	r3, [r7, #4]
 806e132:	43da      	mvns	r2, r3
 806e134:	68bb      	ldr	r3, [r7, #8]
 806e136:	4013      	ands	r3, r2
 806e138:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 806e13a:	68b9      	ldr	r1, [r7, #8]
 806e13c:	2300      	movs	r3, #0
 806e13e:	2203      	movs	r2, #3
 806e140:	6938      	ldr	r0, [r7, #16]
 806e142:	f002 fefd 	bl	8070f40 <xTaskGenericNotify>
 806e146:	4603      	mov	r3, r0
 806e148:	2b01      	cmp	r3, #1
 806e14a:	d006      	beq.n	806e15a <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 806e14c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e150:	617b      	str	r3, [r7, #20]
 806e152:	e002      	b.n	806e15a <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 806e154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e158:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 806e15a:	697b      	ldr	r3, [r7, #20]
}
 806e15c:	4618      	mov	r0, r3
 806e15e:	3718      	adds	r7, #24
 806e160:	46bd      	mov	sp, r7
 806e162:	bd80      	pop	{r7, pc}

0806e164 <osThreadFlagsGet>:

uint32_t osThreadFlagsGet (void) {
 806e164:	b580      	push	{r7, lr}
 806e166:	b084      	sub	sp, #16
 806e168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e16a:	f3ef 8305 	mrs	r3, IPSR
 806e16e:	60bb      	str	r3, [r7, #8]
  return(result);
 806e170:	68bb      	ldr	r3, [r7, #8]
  TaskHandle_t hTask;
  uint32_t rflags;

  if (IS_IRQ()) {
 806e172:	2b00      	cmp	r3, #0
 806e174:	d003      	beq.n	806e17e <osThreadFlagsGet+0x1a>
    rflags = (uint32_t)osErrorISR;
 806e176:	f06f 0305 	mvn.w	r3, #5
 806e17a:	607b      	str	r3, [r7, #4]
 806e17c:	e00e      	b.n	806e19c <osThreadFlagsGet+0x38>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 806e17e:	f002 fce5 	bl	8070b4c <xTaskGetCurrentTaskHandle>
 806e182:	60f8      	str	r0, [r7, #12]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags) != pdPASS) {
 806e184:	1d3b      	adds	r3, r7, #4
 806e186:	2200      	movs	r2, #0
 806e188:	2100      	movs	r1, #0
 806e18a:	68f8      	ldr	r0, [r7, #12]
 806e18c:	f002 fed8 	bl	8070f40 <xTaskGenericNotify>
 806e190:	4603      	mov	r3, r0
 806e192:	2b01      	cmp	r3, #1
 806e194:	d002      	beq.n	806e19c <osThreadFlagsGet+0x38>
      rflags = (uint32_t)osError;
 806e196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e19a:	607b      	str	r3, [r7, #4]
    }
  }

  return (rflags);
 806e19c:	687b      	ldr	r3, [r7, #4]
}
 806e19e:	4618      	mov	r0, r3
 806e1a0:	3710      	adds	r7, #16
 806e1a2:	46bd      	mov	sp, r7
 806e1a4:	bd80      	pop	{r7, pc}

0806e1a6 <osThreadFlagsWait>:

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 806e1a6:	b580      	push	{r7, lr}
 806e1a8:	b08c      	sub	sp, #48	; 0x30
 806e1aa:	af00      	add	r7, sp, #0
 806e1ac:	60f8      	str	r0, [r7, #12]
 806e1ae:	60b9      	str	r1, [r7, #8]
 806e1b0:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e1b2:	f3ef 8305 	mrs	r3, IPSR
 806e1b6:	617b      	str	r3, [r7, #20]
  return(result);
 806e1b8:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 806e1ba:	2b00      	cmp	r3, #0
 806e1bc:	d003      	beq.n	806e1c6 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 806e1be:	f06f 0305 	mvn.w	r3, #5
 806e1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 806e1c4:	e06b      	b.n	806e29e <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 806e1c6:	68fb      	ldr	r3, [r7, #12]
 806e1c8:	2b00      	cmp	r3, #0
 806e1ca:	da03      	bge.n	806e1d4 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 806e1cc:	f06f 0303 	mvn.w	r3, #3
 806e1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 806e1d2:	e064      	b.n	806e29e <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 806e1d4:	68bb      	ldr	r3, [r7, #8]
 806e1d6:	f003 0302 	and.w	r3, r3, #2
 806e1da:	2b00      	cmp	r3, #0
 806e1dc:	d002      	beq.n	806e1e4 <osThreadFlagsWait+0x3e>
      clear = 0U;
 806e1de:	2300      	movs	r3, #0
 806e1e0:	62bb      	str	r3, [r7, #40]	; 0x28
 806e1e2:	e001      	b.n	806e1e8 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 806e1e4:	68fb      	ldr	r3, [r7, #12]
 806e1e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 806e1e8:	2300      	movs	r3, #0
 806e1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 806e1ec:	687b      	ldr	r3, [r7, #4]
 806e1ee:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 806e1f0:	f002 f96c 	bl	80704cc <xTaskGetTickCount>
 806e1f4:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 806e1f6:	f107 0210 	add.w	r2, r7, #16
 806e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806e1fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 806e1fe:	2000      	movs	r0, #0
 806e200:	f002 fe3e 	bl	8070e80 <xTaskNotifyWait>
 806e204:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 806e206:	69fb      	ldr	r3, [r7, #28]
 806e208:	2b01      	cmp	r3, #1
 806e20a:	d137      	bne.n	806e27c <osThreadFlagsWait+0xd6>
        rflags &= flags;
 806e20c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806e20e:	68fb      	ldr	r3, [r7, #12]
 806e210:	4013      	ands	r3, r2
 806e212:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 806e214:	693b      	ldr	r3, [r7, #16]
 806e216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 806e218:	4313      	orrs	r3, r2
 806e21a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 806e21c:	68bb      	ldr	r3, [r7, #8]
 806e21e:	f003 0301 	and.w	r3, r3, #1
 806e222:	2b00      	cmp	r3, #0
 806e224:	d00c      	beq.n	806e240 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 806e226:	68fa      	ldr	r2, [r7, #12]
 806e228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806e22a:	4013      	ands	r3, r2
 806e22c:	68fa      	ldr	r2, [r7, #12]
 806e22e:	429a      	cmp	r2, r3
 806e230:	d032      	beq.n	806e298 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 806e232:	687b      	ldr	r3, [r7, #4]
 806e234:	2b00      	cmp	r3, #0
 806e236:	d10f      	bne.n	806e258 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 806e238:	f06f 0302 	mvn.w	r3, #2
 806e23c:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 806e23e:	e02e      	b.n	806e29e <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 806e240:	68fa      	ldr	r2, [r7, #12]
 806e242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806e244:	4013      	ands	r3, r2
 806e246:	2b00      	cmp	r3, #0
 806e248:	d128      	bne.n	806e29c <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 806e24a:	687b      	ldr	r3, [r7, #4]
 806e24c:	2b00      	cmp	r3, #0
 806e24e:	d103      	bne.n	806e258 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 806e250:	f06f 0302 	mvn.w	r3, #2
 806e254:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 806e256:	e022      	b.n	806e29e <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 806e258:	f002 f938 	bl	80704cc <xTaskGetTickCount>
 806e25c:	4602      	mov	r2, r0
 806e25e:	6a3b      	ldr	r3, [r7, #32]
 806e260:	1ad3      	subs	r3, r2, r3
 806e262:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 806e264:	69ba      	ldr	r2, [r7, #24]
 806e266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806e268:	429a      	cmp	r2, r3
 806e26a:	d902      	bls.n	806e272 <osThreadFlagsWait+0xcc>
          tout  = 0;
 806e26c:	2300      	movs	r3, #0
 806e26e:	627b      	str	r3, [r7, #36]	; 0x24
 806e270:	e00e      	b.n	806e290 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 806e272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 806e274:	69bb      	ldr	r3, [r7, #24]
 806e276:	1ad3      	subs	r3, r2, r3
 806e278:	627b      	str	r3, [r7, #36]	; 0x24
 806e27a:	e009      	b.n	806e290 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 806e27c:	687b      	ldr	r3, [r7, #4]
 806e27e:	2b00      	cmp	r3, #0
 806e280:	d103      	bne.n	806e28a <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 806e282:	f06f 0302 	mvn.w	r3, #2
 806e286:	62fb      	str	r3, [r7, #44]	; 0x2c
 806e288:	e002      	b.n	806e290 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 806e28a:	f06f 0301 	mvn.w	r3, #1
 806e28e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 806e290:	69fb      	ldr	r3, [r7, #28]
 806e292:	2b00      	cmp	r3, #0
 806e294:	d1af      	bne.n	806e1f6 <osThreadFlagsWait+0x50>
 806e296:	e002      	b.n	806e29e <osThreadFlagsWait+0xf8>
            break;
 806e298:	bf00      	nop
 806e29a:	e000      	b.n	806e29e <osThreadFlagsWait+0xf8>
            break;
 806e29c:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 806e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 806e2a0:	4618      	mov	r0, r3
 806e2a2:	3730      	adds	r7, #48	; 0x30
 806e2a4:	46bd      	mov	sp, r7
 806e2a6:	bd80      	pop	{r7, pc}

0806e2a8 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 806e2a8:	b580      	push	{r7, lr}
 806e2aa:	b084      	sub	sp, #16
 806e2ac:	af00      	add	r7, sp, #0
 806e2ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e2b0:	f3ef 8305 	mrs	r3, IPSR
 806e2b4:	60bb      	str	r3, [r7, #8]
  return(result);
 806e2b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 806e2b8:	2b00      	cmp	r3, #0
 806e2ba:	d003      	beq.n	806e2c4 <osDelay+0x1c>
    stat = osErrorISR;
 806e2bc:	f06f 0305 	mvn.w	r3, #5
 806e2c0:	60fb      	str	r3, [r7, #12]
 806e2c2:	e007      	b.n	806e2d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 806e2c4:	2300      	movs	r3, #0
 806e2c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 806e2c8:	687b      	ldr	r3, [r7, #4]
 806e2ca:	2b00      	cmp	r3, #0
 806e2cc:	d002      	beq.n	806e2d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 806e2ce:	6878      	ldr	r0, [r7, #4]
 806e2d0:	f001 ffac 	bl	807022c <vTaskDelay>
    }
  }

  return (stat);
 806e2d4:	68fb      	ldr	r3, [r7, #12]
}
 806e2d6:	4618      	mov	r0, r3
 806e2d8:	3710      	adds	r7, #16
 806e2da:	46bd      	mov	sp, r7
 806e2dc:	bd80      	pop	{r7, pc}

0806e2de <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 806e2de:	b580      	push	{r7, lr}
 806e2e0:	b084      	sub	sp, #16
 806e2e2:	af00      	add	r7, sp, #0
 806e2e4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 806e2e6:	6878      	ldr	r0, [r7, #4]
 806e2e8:	f003 fc08 	bl	8071afc <pvTimerGetTimerID>
 806e2ec:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 806e2ee:	68fb      	ldr	r3, [r7, #12]
 806e2f0:	2b00      	cmp	r3, #0
 806e2f2:	d005      	beq.n	806e300 <TimerCallback+0x22>
    callb->func (callb->arg);
 806e2f4:	68fb      	ldr	r3, [r7, #12]
 806e2f6:	681b      	ldr	r3, [r3, #0]
 806e2f8:	68fa      	ldr	r2, [r7, #12]
 806e2fa:	6852      	ldr	r2, [r2, #4]
 806e2fc:	4610      	mov	r0, r2
 806e2fe:	4798      	blx	r3
  }
}
 806e300:	bf00      	nop
 806e302:	3710      	adds	r7, #16
 806e304:	46bd      	mov	sp, r7
 806e306:	bd80      	pop	{r7, pc}

0806e308 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 806e308:	b580      	push	{r7, lr}
 806e30a:	b08c      	sub	sp, #48	; 0x30
 806e30c:	af02      	add	r7, sp, #8
 806e30e:	60f8      	str	r0, [r7, #12]
 806e310:	607a      	str	r2, [r7, #4]
 806e312:	603b      	str	r3, [r7, #0]
 806e314:	460b      	mov	r3, r1
 806e316:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 806e318:	2300      	movs	r3, #0
 806e31a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e31c:	f3ef 8305 	mrs	r3, IPSR
 806e320:	613b      	str	r3, [r7, #16]
  return(result);
 806e322:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 806e324:	2b00      	cmp	r3, #0
 806e326:	d163      	bne.n	806e3f0 <osTimerNew+0xe8>
 806e328:	68fb      	ldr	r3, [r7, #12]
 806e32a:	2b00      	cmp	r3, #0
 806e32c:	d060      	beq.n	806e3f0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 806e32e:	2008      	movs	r0, #8
 806e330:	f003 fe52 	bl	8071fd8 <pvPortMalloc>
 806e334:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 806e336:	697b      	ldr	r3, [r7, #20]
 806e338:	2b00      	cmp	r3, #0
 806e33a:	d059      	beq.n	806e3f0 <osTimerNew+0xe8>
      callb->func = func;
 806e33c:	697b      	ldr	r3, [r7, #20]
 806e33e:	68fa      	ldr	r2, [r7, #12]
 806e340:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 806e342:	697b      	ldr	r3, [r7, #20]
 806e344:	687a      	ldr	r2, [r7, #4]
 806e346:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 806e348:	7afb      	ldrb	r3, [r7, #11]
 806e34a:	2b00      	cmp	r3, #0
 806e34c:	d102      	bne.n	806e354 <osTimerNew+0x4c>
        reload = pdFALSE;
 806e34e:	2300      	movs	r3, #0
 806e350:	61fb      	str	r3, [r7, #28]
 806e352:	e001      	b.n	806e358 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 806e354:	2301      	movs	r3, #1
 806e356:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 806e358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e35c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 806e35e:	2300      	movs	r3, #0
 806e360:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 806e362:	683b      	ldr	r3, [r7, #0]
 806e364:	2b00      	cmp	r3, #0
 806e366:	d01c      	beq.n	806e3a2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 806e368:	683b      	ldr	r3, [r7, #0]
 806e36a:	681b      	ldr	r3, [r3, #0]
 806e36c:	2b00      	cmp	r3, #0
 806e36e:	d002      	beq.n	806e376 <osTimerNew+0x6e>
          name = attr->name;
 806e370:	683b      	ldr	r3, [r7, #0]
 806e372:	681b      	ldr	r3, [r3, #0]
 806e374:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 806e376:	683b      	ldr	r3, [r7, #0]
 806e378:	689b      	ldr	r3, [r3, #8]
 806e37a:	2b00      	cmp	r3, #0
 806e37c:	d006      	beq.n	806e38c <osTimerNew+0x84>
 806e37e:	683b      	ldr	r3, [r7, #0]
 806e380:	68db      	ldr	r3, [r3, #12]
 806e382:	2b2b      	cmp	r3, #43	; 0x2b
 806e384:	d902      	bls.n	806e38c <osTimerNew+0x84>
          mem = 1;
 806e386:	2301      	movs	r3, #1
 806e388:	61bb      	str	r3, [r7, #24]
 806e38a:	e00c      	b.n	806e3a6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 806e38c:	683b      	ldr	r3, [r7, #0]
 806e38e:	689b      	ldr	r3, [r3, #8]
 806e390:	2b00      	cmp	r3, #0
 806e392:	d108      	bne.n	806e3a6 <osTimerNew+0x9e>
 806e394:	683b      	ldr	r3, [r7, #0]
 806e396:	68db      	ldr	r3, [r3, #12]
 806e398:	2b00      	cmp	r3, #0
 806e39a:	d104      	bne.n	806e3a6 <osTimerNew+0x9e>
            mem = 0;
 806e39c:	2300      	movs	r3, #0
 806e39e:	61bb      	str	r3, [r7, #24]
 806e3a0:	e001      	b.n	806e3a6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 806e3a2:	2300      	movs	r3, #0
 806e3a4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 806e3a6:	69bb      	ldr	r3, [r7, #24]
 806e3a8:	2b01      	cmp	r3, #1
 806e3aa:	d10c      	bne.n	806e3c6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 806e3ac:	683b      	ldr	r3, [r7, #0]
 806e3ae:	689b      	ldr	r3, [r3, #8]
 806e3b0:	9301      	str	r3, [sp, #4]
 806e3b2:	4b12      	ldr	r3, [pc, #72]	; (806e3fc <osTimerNew+0xf4>)
 806e3b4:	9300      	str	r3, [sp, #0]
 806e3b6:	697b      	ldr	r3, [r7, #20]
 806e3b8:	69fa      	ldr	r2, [r7, #28]
 806e3ba:	2101      	movs	r1, #1
 806e3bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806e3be:	f003 f81e 	bl	80713fe <xTimerCreateStatic>
 806e3c2:	6238      	str	r0, [r7, #32]
 806e3c4:	e00b      	b.n	806e3de <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 806e3c6:	69bb      	ldr	r3, [r7, #24]
 806e3c8:	2b00      	cmp	r3, #0
 806e3ca:	d108      	bne.n	806e3de <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 806e3cc:	4b0b      	ldr	r3, [pc, #44]	; (806e3fc <osTimerNew+0xf4>)
 806e3ce:	9300      	str	r3, [sp, #0]
 806e3d0:	697b      	ldr	r3, [r7, #20]
 806e3d2:	69fa      	ldr	r2, [r7, #28]
 806e3d4:	2101      	movs	r1, #1
 806e3d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806e3d8:	f002 fff0 	bl	80713bc <xTimerCreate>
 806e3dc:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 806e3de:	6a3b      	ldr	r3, [r7, #32]
 806e3e0:	2b00      	cmp	r3, #0
 806e3e2:	d105      	bne.n	806e3f0 <osTimerNew+0xe8>
 806e3e4:	697b      	ldr	r3, [r7, #20]
 806e3e6:	2b00      	cmp	r3, #0
 806e3e8:	d002      	beq.n	806e3f0 <osTimerNew+0xe8>
        vPortFree (callb);
 806e3ea:	6978      	ldr	r0, [r7, #20]
 806e3ec:	f003 fec0 	bl	8072170 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 806e3f0:	6a3b      	ldr	r3, [r7, #32]
}
 806e3f2:	4618      	mov	r0, r3
 806e3f4:	3728      	adds	r7, #40	; 0x28
 806e3f6:	46bd      	mov	sp, r7
 806e3f8:	bd80      	pop	{r7, pc}
 806e3fa:	bf00      	nop
 806e3fc:	0806e2df 	.word	0x0806e2df

0806e400 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 806e400:	b580      	push	{r7, lr}
 806e402:	b088      	sub	sp, #32
 806e404:	af02      	add	r7, sp, #8
 806e406:	6078      	str	r0, [r7, #4]
 806e408:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 806e40a:	687b      	ldr	r3, [r7, #4]
 806e40c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e40e:	f3ef 8305 	mrs	r3, IPSR
 806e412:	60fb      	str	r3, [r7, #12]
  return(result);
 806e414:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 806e416:	2b00      	cmp	r3, #0
 806e418:	d003      	beq.n	806e422 <osTimerStart+0x22>
    stat = osErrorISR;
 806e41a:	f06f 0305 	mvn.w	r3, #5
 806e41e:	617b      	str	r3, [r7, #20]
 806e420:	e017      	b.n	806e452 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 806e422:	693b      	ldr	r3, [r7, #16]
 806e424:	2b00      	cmp	r3, #0
 806e426:	d103      	bne.n	806e430 <osTimerStart+0x30>
    stat = osErrorParameter;
 806e428:	f06f 0303 	mvn.w	r3, #3
 806e42c:	617b      	str	r3, [r7, #20]
 806e42e:	e010      	b.n	806e452 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 806e430:	2300      	movs	r3, #0
 806e432:	9300      	str	r3, [sp, #0]
 806e434:	2300      	movs	r3, #0
 806e436:	683a      	ldr	r2, [r7, #0]
 806e438:	2104      	movs	r1, #4
 806e43a:	6938      	ldr	r0, [r7, #16]
 806e43c:	f003 f858 	bl	80714f0 <xTimerGenericCommand>
 806e440:	4603      	mov	r3, r0
 806e442:	2b01      	cmp	r3, #1
 806e444:	d102      	bne.n	806e44c <osTimerStart+0x4c>
      stat = osOK;
 806e446:	2300      	movs	r3, #0
 806e448:	617b      	str	r3, [r7, #20]
 806e44a:	e002      	b.n	806e452 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 806e44c:	f06f 0302 	mvn.w	r3, #2
 806e450:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 806e452:	697b      	ldr	r3, [r7, #20]
}
 806e454:	4618      	mov	r0, r3
 806e456:	3718      	adds	r7, #24
 806e458:	46bd      	mov	sp, r7
 806e45a:	bd80      	pop	{r7, pc}

0806e45c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 806e45c:	b580      	push	{r7, lr}
 806e45e:	b088      	sub	sp, #32
 806e460:	af00      	add	r7, sp, #0
 806e462:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 806e464:	2300      	movs	r3, #0
 806e466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e468:	f3ef 8305 	mrs	r3, IPSR
 806e46c:	60bb      	str	r3, [r7, #8]
  return(result);
 806e46e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 806e470:	2b00      	cmp	r3, #0
 806e472:	d174      	bne.n	806e55e <osMutexNew+0x102>
    if (attr != NULL) {
 806e474:	687b      	ldr	r3, [r7, #4]
 806e476:	2b00      	cmp	r3, #0
 806e478:	d003      	beq.n	806e482 <osMutexNew+0x26>
      type = attr->attr_bits;
 806e47a:	687b      	ldr	r3, [r7, #4]
 806e47c:	685b      	ldr	r3, [r3, #4]
 806e47e:	61bb      	str	r3, [r7, #24]
 806e480:	e001      	b.n	806e486 <osMutexNew+0x2a>
    } else {
      type = 0U;
 806e482:	2300      	movs	r3, #0
 806e484:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 806e486:	69bb      	ldr	r3, [r7, #24]
 806e488:	f003 0301 	and.w	r3, r3, #1
 806e48c:	2b00      	cmp	r3, #0
 806e48e:	d002      	beq.n	806e496 <osMutexNew+0x3a>
      rmtx = 1U;
 806e490:	2301      	movs	r3, #1
 806e492:	617b      	str	r3, [r7, #20]
 806e494:	e001      	b.n	806e49a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 806e496:	2300      	movs	r3, #0
 806e498:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 806e49a:	69bb      	ldr	r3, [r7, #24]
 806e49c:	f003 0308 	and.w	r3, r3, #8
 806e4a0:	2b00      	cmp	r3, #0
 806e4a2:	d15c      	bne.n	806e55e <osMutexNew+0x102>
      mem = -1;
 806e4a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e4a8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 806e4aa:	687b      	ldr	r3, [r7, #4]
 806e4ac:	2b00      	cmp	r3, #0
 806e4ae:	d015      	beq.n	806e4dc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 806e4b0:	687b      	ldr	r3, [r7, #4]
 806e4b2:	689b      	ldr	r3, [r3, #8]
 806e4b4:	2b00      	cmp	r3, #0
 806e4b6:	d006      	beq.n	806e4c6 <osMutexNew+0x6a>
 806e4b8:	687b      	ldr	r3, [r7, #4]
 806e4ba:	68db      	ldr	r3, [r3, #12]
 806e4bc:	2b4f      	cmp	r3, #79	; 0x4f
 806e4be:	d902      	bls.n	806e4c6 <osMutexNew+0x6a>
          mem = 1;
 806e4c0:	2301      	movs	r3, #1
 806e4c2:	613b      	str	r3, [r7, #16]
 806e4c4:	e00c      	b.n	806e4e0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 806e4c6:	687b      	ldr	r3, [r7, #4]
 806e4c8:	689b      	ldr	r3, [r3, #8]
 806e4ca:	2b00      	cmp	r3, #0
 806e4cc:	d108      	bne.n	806e4e0 <osMutexNew+0x84>
 806e4ce:	687b      	ldr	r3, [r7, #4]
 806e4d0:	68db      	ldr	r3, [r3, #12]
 806e4d2:	2b00      	cmp	r3, #0
 806e4d4:	d104      	bne.n	806e4e0 <osMutexNew+0x84>
            mem = 0;
 806e4d6:	2300      	movs	r3, #0
 806e4d8:	613b      	str	r3, [r7, #16]
 806e4da:	e001      	b.n	806e4e0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 806e4dc:	2300      	movs	r3, #0
 806e4de:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 806e4e0:	693b      	ldr	r3, [r7, #16]
 806e4e2:	2b01      	cmp	r3, #1
 806e4e4:	d112      	bne.n	806e50c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 806e4e6:	697b      	ldr	r3, [r7, #20]
 806e4e8:	2b00      	cmp	r3, #0
 806e4ea:	d007      	beq.n	806e4fc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 806e4ec:	687b      	ldr	r3, [r7, #4]
 806e4ee:	689b      	ldr	r3, [r3, #8]
 806e4f0:	4619      	mov	r1, r3
 806e4f2:	2004      	movs	r0, #4
 806e4f4:	f000 fd8d 	bl	806f012 <xQueueCreateMutexStatic>
 806e4f8:	61f8      	str	r0, [r7, #28]
 806e4fa:	e016      	b.n	806e52a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 806e4fc:	687b      	ldr	r3, [r7, #4]
 806e4fe:	689b      	ldr	r3, [r3, #8]
 806e500:	4619      	mov	r1, r3
 806e502:	2001      	movs	r0, #1
 806e504:	f000 fd85 	bl	806f012 <xQueueCreateMutexStatic>
 806e508:	61f8      	str	r0, [r7, #28]
 806e50a:	e00e      	b.n	806e52a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 806e50c:	693b      	ldr	r3, [r7, #16]
 806e50e:	2b00      	cmp	r3, #0
 806e510:	d10b      	bne.n	806e52a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 806e512:	697b      	ldr	r3, [r7, #20]
 806e514:	2b00      	cmp	r3, #0
 806e516:	d004      	beq.n	806e522 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 806e518:	2004      	movs	r0, #4
 806e51a:	f000 fd62 	bl	806efe2 <xQueueCreateMutex>
 806e51e:	61f8      	str	r0, [r7, #28]
 806e520:	e003      	b.n	806e52a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 806e522:	2001      	movs	r0, #1
 806e524:	f000 fd5d 	bl	806efe2 <xQueueCreateMutex>
 806e528:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 806e52a:	69fb      	ldr	r3, [r7, #28]
 806e52c:	2b00      	cmp	r3, #0
 806e52e:	d00c      	beq.n	806e54a <osMutexNew+0xee>
        if (attr != NULL) {
 806e530:	687b      	ldr	r3, [r7, #4]
 806e532:	2b00      	cmp	r3, #0
 806e534:	d003      	beq.n	806e53e <osMutexNew+0xe2>
          name = attr->name;
 806e536:	687b      	ldr	r3, [r7, #4]
 806e538:	681b      	ldr	r3, [r3, #0]
 806e53a:	60fb      	str	r3, [r7, #12]
 806e53c:	e001      	b.n	806e542 <osMutexNew+0xe6>
        } else {
          name = NULL;
 806e53e:	2300      	movs	r3, #0
 806e540:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 806e542:	68f9      	ldr	r1, [r7, #12]
 806e544:	69f8      	ldr	r0, [r7, #28]
 806e546:	f001 fc31 	bl	806fdac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 806e54a:	69fb      	ldr	r3, [r7, #28]
 806e54c:	2b00      	cmp	r3, #0
 806e54e:	d006      	beq.n	806e55e <osMutexNew+0x102>
 806e550:	697b      	ldr	r3, [r7, #20]
 806e552:	2b00      	cmp	r3, #0
 806e554:	d003      	beq.n	806e55e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 806e556:	69fb      	ldr	r3, [r7, #28]
 806e558:	f043 0301 	orr.w	r3, r3, #1
 806e55c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 806e55e:	69fb      	ldr	r3, [r7, #28]
}
 806e560:	4618      	mov	r0, r3
 806e562:	3720      	adds	r7, #32
 806e564:	46bd      	mov	sp, r7
 806e566:	bd80      	pop	{r7, pc}

0806e568 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 806e568:	b580      	push	{r7, lr}
 806e56a:	b086      	sub	sp, #24
 806e56c:	af00      	add	r7, sp, #0
 806e56e:	6078      	str	r0, [r7, #4]
 806e570:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 806e572:	687b      	ldr	r3, [r7, #4]
 806e574:	f023 0301 	bic.w	r3, r3, #1
 806e578:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 806e57a:	687b      	ldr	r3, [r7, #4]
 806e57c:	f003 0301 	and.w	r3, r3, #1
 806e580:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 806e582:	2300      	movs	r3, #0
 806e584:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e586:	f3ef 8305 	mrs	r3, IPSR
 806e58a:	60bb      	str	r3, [r7, #8]
  return(result);
 806e58c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 806e58e:	2b00      	cmp	r3, #0
 806e590:	d003      	beq.n	806e59a <osMutexAcquire+0x32>
    stat = osErrorISR;
 806e592:	f06f 0305 	mvn.w	r3, #5
 806e596:	617b      	str	r3, [r7, #20]
 806e598:	e02c      	b.n	806e5f4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 806e59a:	693b      	ldr	r3, [r7, #16]
 806e59c:	2b00      	cmp	r3, #0
 806e59e:	d103      	bne.n	806e5a8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 806e5a0:	f06f 0303 	mvn.w	r3, #3
 806e5a4:	617b      	str	r3, [r7, #20]
 806e5a6:	e025      	b.n	806e5f4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 806e5a8:	68fb      	ldr	r3, [r7, #12]
 806e5aa:	2b00      	cmp	r3, #0
 806e5ac:	d011      	beq.n	806e5d2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 806e5ae:	6839      	ldr	r1, [r7, #0]
 806e5b0:	6938      	ldr	r0, [r7, #16]
 806e5b2:	f000 fd7d 	bl	806f0b0 <xQueueTakeMutexRecursive>
 806e5b6:	4603      	mov	r3, r0
 806e5b8:	2b01      	cmp	r3, #1
 806e5ba:	d01b      	beq.n	806e5f4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 806e5bc:	683b      	ldr	r3, [r7, #0]
 806e5be:	2b00      	cmp	r3, #0
 806e5c0:	d003      	beq.n	806e5ca <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 806e5c2:	f06f 0301 	mvn.w	r3, #1
 806e5c6:	617b      	str	r3, [r7, #20]
 806e5c8:	e014      	b.n	806e5f4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 806e5ca:	f06f 0302 	mvn.w	r3, #2
 806e5ce:	617b      	str	r3, [r7, #20]
 806e5d0:	e010      	b.n	806e5f4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 806e5d2:	6839      	ldr	r1, [r7, #0]
 806e5d4:	6938      	ldr	r0, [r7, #16]
 806e5d6:	f001 f911 	bl	806f7fc <xQueueSemaphoreTake>
 806e5da:	4603      	mov	r3, r0
 806e5dc:	2b01      	cmp	r3, #1
 806e5de:	d009      	beq.n	806e5f4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 806e5e0:	683b      	ldr	r3, [r7, #0]
 806e5e2:	2b00      	cmp	r3, #0
 806e5e4:	d003      	beq.n	806e5ee <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 806e5e6:	f06f 0301 	mvn.w	r3, #1
 806e5ea:	617b      	str	r3, [r7, #20]
 806e5ec:	e002      	b.n	806e5f4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 806e5ee:	f06f 0302 	mvn.w	r3, #2
 806e5f2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 806e5f4:	697b      	ldr	r3, [r7, #20]
}
 806e5f6:	4618      	mov	r0, r3
 806e5f8:	3718      	adds	r7, #24
 806e5fa:	46bd      	mov	sp, r7
 806e5fc:	bd80      	pop	{r7, pc}

0806e5fe <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 806e5fe:	b580      	push	{r7, lr}
 806e600:	b086      	sub	sp, #24
 806e602:	af00      	add	r7, sp, #0
 806e604:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 806e606:	687b      	ldr	r3, [r7, #4]
 806e608:	f023 0301 	bic.w	r3, r3, #1
 806e60c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 806e60e:	687b      	ldr	r3, [r7, #4]
 806e610:	f003 0301 	and.w	r3, r3, #1
 806e614:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 806e616:	2300      	movs	r3, #0
 806e618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e61a:	f3ef 8305 	mrs	r3, IPSR
 806e61e:	60bb      	str	r3, [r7, #8]
  return(result);
 806e620:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 806e622:	2b00      	cmp	r3, #0
 806e624:	d003      	beq.n	806e62e <osMutexRelease+0x30>
    stat = osErrorISR;
 806e626:	f06f 0305 	mvn.w	r3, #5
 806e62a:	617b      	str	r3, [r7, #20]
 806e62c:	e01f      	b.n	806e66e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 806e62e:	693b      	ldr	r3, [r7, #16]
 806e630:	2b00      	cmp	r3, #0
 806e632:	d103      	bne.n	806e63c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 806e634:	f06f 0303 	mvn.w	r3, #3
 806e638:	617b      	str	r3, [r7, #20]
 806e63a:	e018      	b.n	806e66e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 806e63c:	68fb      	ldr	r3, [r7, #12]
 806e63e:	2b00      	cmp	r3, #0
 806e640:	d009      	beq.n	806e656 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 806e642:	6938      	ldr	r0, [r7, #16]
 806e644:	f000 fd00 	bl	806f048 <xQueueGiveMutexRecursive>
 806e648:	4603      	mov	r3, r0
 806e64a:	2b01      	cmp	r3, #1
 806e64c:	d00f      	beq.n	806e66e <osMutexRelease+0x70>
        stat = osErrorResource;
 806e64e:	f06f 0302 	mvn.w	r3, #2
 806e652:	617b      	str	r3, [r7, #20]
 806e654:	e00b      	b.n	806e66e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 806e656:	2300      	movs	r3, #0
 806e658:	2200      	movs	r2, #0
 806e65a:	2100      	movs	r1, #0
 806e65c:	6938      	ldr	r0, [r7, #16]
 806e65e:	f000 fdc7 	bl	806f1f0 <xQueueGenericSend>
 806e662:	4603      	mov	r3, r0
 806e664:	2b01      	cmp	r3, #1
 806e666:	d002      	beq.n	806e66e <osMutexRelease+0x70>
        stat = osErrorResource;
 806e668:	f06f 0302 	mvn.w	r3, #2
 806e66c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 806e66e:	697b      	ldr	r3, [r7, #20]
}
 806e670:	4618      	mov	r0, r3
 806e672:	3718      	adds	r7, #24
 806e674:	46bd      	mov	sp, r7
 806e676:	bd80      	pop	{r7, pc}

0806e678 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 806e678:	b580      	push	{r7, lr}
 806e67a:	b08a      	sub	sp, #40	; 0x28
 806e67c:	af02      	add	r7, sp, #8
 806e67e:	60f8      	str	r0, [r7, #12]
 806e680:	60b9      	str	r1, [r7, #8]
 806e682:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 806e684:	2300      	movs	r3, #0
 806e686:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e688:	f3ef 8305 	mrs	r3, IPSR
 806e68c:	613b      	str	r3, [r7, #16]
  return(result);
 806e68e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 806e690:	2b00      	cmp	r3, #0
 806e692:	d175      	bne.n	806e780 <osSemaphoreNew+0x108>
 806e694:	68fb      	ldr	r3, [r7, #12]
 806e696:	2b00      	cmp	r3, #0
 806e698:	d072      	beq.n	806e780 <osSemaphoreNew+0x108>
 806e69a:	68ba      	ldr	r2, [r7, #8]
 806e69c:	68fb      	ldr	r3, [r7, #12]
 806e69e:	429a      	cmp	r2, r3
 806e6a0:	d86e      	bhi.n	806e780 <osSemaphoreNew+0x108>
    mem = -1;
 806e6a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e6a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 806e6a8:	687b      	ldr	r3, [r7, #4]
 806e6aa:	2b00      	cmp	r3, #0
 806e6ac:	d015      	beq.n	806e6da <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 806e6ae:	687b      	ldr	r3, [r7, #4]
 806e6b0:	689b      	ldr	r3, [r3, #8]
 806e6b2:	2b00      	cmp	r3, #0
 806e6b4:	d006      	beq.n	806e6c4 <osSemaphoreNew+0x4c>
 806e6b6:	687b      	ldr	r3, [r7, #4]
 806e6b8:	68db      	ldr	r3, [r3, #12]
 806e6ba:	2b4f      	cmp	r3, #79	; 0x4f
 806e6bc:	d902      	bls.n	806e6c4 <osSemaphoreNew+0x4c>
        mem = 1;
 806e6be:	2301      	movs	r3, #1
 806e6c0:	61bb      	str	r3, [r7, #24]
 806e6c2:	e00c      	b.n	806e6de <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 806e6c4:	687b      	ldr	r3, [r7, #4]
 806e6c6:	689b      	ldr	r3, [r3, #8]
 806e6c8:	2b00      	cmp	r3, #0
 806e6ca:	d108      	bne.n	806e6de <osSemaphoreNew+0x66>
 806e6cc:	687b      	ldr	r3, [r7, #4]
 806e6ce:	68db      	ldr	r3, [r3, #12]
 806e6d0:	2b00      	cmp	r3, #0
 806e6d2:	d104      	bne.n	806e6de <osSemaphoreNew+0x66>
          mem = 0;
 806e6d4:	2300      	movs	r3, #0
 806e6d6:	61bb      	str	r3, [r7, #24]
 806e6d8:	e001      	b.n	806e6de <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 806e6da:	2300      	movs	r3, #0
 806e6dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 806e6de:	69bb      	ldr	r3, [r7, #24]
 806e6e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806e6e4:	d04c      	beq.n	806e780 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 806e6e6:	68fb      	ldr	r3, [r7, #12]
 806e6e8:	2b01      	cmp	r3, #1
 806e6ea:	d128      	bne.n	806e73e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 806e6ec:	69bb      	ldr	r3, [r7, #24]
 806e6ee:	2b01      	cmp	r3, #1
 806e6f0:	d10a      	bne.n	806e708 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 806e6f2:	687b      	ldr	r3, [r7, #4]
 806e6f4:	689b      	ldr	r3, [r3, #8]
 806e6f6:	2203      	movs	r2, #3
 806e6f8:	9200      	str	r2, [sp, #0]
 806e6fa:	2200      	movs	r2, #0
 806e6fc:	2100      	movs	r1, #0
 806e6fe:	2001      	movs	r0, #1
 806e700:	f000 fb80 	bl	806ee04 <xQueueGenericCreateStatic>
 806e704:	61f8      	str	r0, [r7, #28]
 806e706:	e005      	b.n	806e714 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 806e708:	2203      	movs	r2, #3
 806e70a:	2100      	movs	r1, #0
 806e70c:	2001      	movs	r0, #1
 806e70e:	f000 fbf1 	bl	806eef4 <xQueueGenericCreate>
 806e712:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 806e714:	69fb      	ldr	r3, [r7, #28]
 806e716:	2b00      	cmp	r3, #0
 806e718:	d022      	beq.n	806e760 <osSemaphoreNew+0xe8>
 806e71a:	68bb      	ldr	r3, [r7, #8]
 806e71c:	2b00      	cmp	r3, #0
 806e71e:	d01f      	beq.n	806e760 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 806e720:	2300      	movs	r3, #0
 806e722:	2200      	movs	r2, #0
 806e724:	2100      	movs	r1, #0
 806e726:	69f8      	ldr	r0, [r7, #28]
 806e728:	f000 fd62 	bl	806f1f0 <xQueueGenericSend>
 806e72c:	4603      	mov	r3, r0
 806e72e:	2b01      	cmp	r3, #1
 806e730:	d016      	beq.n	806e760 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 806e732:	69f8      	ldr	r0, [r7, #28]
 806e734:	f001 f9ee 	bl	806fb14 <vQueueDelete>
            hSemaphore = NULL;
 806e738:	2300      	movs	r3, #0
 806e73a:	61fb      	str	r3, [r7, #28]
 806e73c:	e010      	b.n	806e760 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 806e73e:	69bb      	ldr	r3, [r7, #24]
 806e740:	2b01      	cmp	r3, #1
 806e742:	d108      	bne.n	806e756 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 806e744:	687b      	ldr	r3, [r7, #4]
 806e746:	689b      	ldr	r3, [r3, #8]
 806e748:	461a      	mov	r2, r3
 806e74a:	68b9      	ldr	r1, [r7, #8]
 806e74c:	68f8      	ldr	r0, [r7, #12]
 806e74e:	f000 fce5 	bl	806f11c <xQueueCreateCountingSemaphoreStatic>
 806e752:	61f8      	str	r0, [r7, #28]
 806e754:	e004      	b.n	806e760 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 806e756:	68b9      	ldr	r1, [r7, #8]
 806e758:	68f8      	ldr	r0, [r7, #12]
 806e75a:	f000 fd16 	bl	806f18a <xQueueCreateCountingSemaphore>
 806e75e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 806e760:	69fb      	ldr	r3, [r7, #28]
 806e762:	2b00      	cmp	r3, #0
 806e764:	d00c      	beq.n	806e780 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 806e766:	687b      	ldr	r3, [r7, #4]
 806e768:	2b00      	cmp	r3, #0
 806e76a:	d003      	beq.n	806e774 <osSemaphoreNew+0xfc>
          name = attr->name;
 806e76c:	687b      	ldr	r3, [r7, #4]
 806e76e:	681b      	ldr	r3, [r3, #0]
 806e770:	617b      	str	r3, [r7, #20]
 806e772:	e001      	b.n	806e778 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 806e774:	2300      	movs	r3, #0
 806e776:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 806e778:	6979      	ldr	r1, [r7, #20]
 806e77a:	69f8      	ldr	r0, [r7, #28]
 806e77c:	f001 fb16 	bl	806fdac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 806e780:	69fb      	ldr	r3, [r7, #28]
}
 806e782:	4618      	mov	r0, r3
 806e784:	3720      	adds	r7, #32
 806e786:	46bd      	mov	sp, r7
 806e788:	bd80      	pop	{r7, pc}
	...

0806e78c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 806e78c:	b580      	push	{r7, lr}
 806e78e:	b086      	sub	sp, #24
 806e790:	af00      	add	r7, sp, #0
 806e792:	6078      	str	r0, [r7, #4]
 806e794:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 806e796:	687b      	ldr	r3, [r7, #4]
 806e798:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 806e79a:	2300      	movs	r3, #0
 806e79c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 806e79e:	693b      	ldr	r3, [r7, #16]
 806e7a0:	2b00      	cmp	r3, #0
 806e7a2:	d103      	bne.n	806e7ac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 806e7a4:	f06f 0303 	mvn.w	r3, #3
 806e7a8:	617b      	str	r3, [r7, #20]
 806e7aa:	e039      	b.n	806e820 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e7ac:	f3ef 8305 	mrs	r3, IPSR
 806e7b0:	60fb      	str	r3, [r7, #12]
  return(result);
 806e7b2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 806e7b4:	2b00      	cmp	r3, #0
 806e7b6:	d022      	beq.n	806e7fe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 806e7b8:	683b      	ldr	r3, [r7, #0]
 806e7ba:	2b00      	cmp	r3, #0
 806e7bc:	d003      	beq.n	806e7c6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 806e7be:	f06f 0303 	mvn.w	r3, #3
 806e7c2:	617b      	str	r3, [r7, #20]
 806e7c4:	e02c      	b.n	806e820 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 806e7c6:	2300      	movs	r3, #0
 806e7c8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 806e7ca:	f107 0308 	add.w	r3, r7, #8
 806e7ce:	461a      	mov	r2, r3
 806e7d0:	2100      	movs	r1, #0
 806e7d2:	6938      	ldr	r0, [r7, #16]
 806e7d4:	f001 f91e 	bl	806fa14 <xQueueReceiveFromISR>
 806e7d8:	4603      	mov	r3, r0
 806e7da:	2b01      	cmp	r3, #1
 806e7dc:	d003      	beq.n	806e7e6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 806e7de:	f06f 0302 	mvn.w	r3, #2
 806e7e2:	617b      	str	r3, [r7, #20]
 806e7e4:	e01c      	b.n	806e820 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 806e7e6:	68bb      	ldr	r3, [r7, #8]
 806e7e8:	2b00      	cmp	r3, #0
 806e7ea:	d019      	beq.n	806e820 <osSemaphoreAcquire+0x94>
 806e7ec:	4b0f      	ldr	r3, [pc, #60]	; (806e82c <osSemaphoreAcquire+0xa0>)
 806e7ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e7f2:	601a      	str	r2, [r3, #0]
 806e7f4:	f3bf 8f4f 	dsb	sy
 806e7f8:	f3bf 8f6f 	isb	sy
 806e7fc:	e010      	b.n	806e820 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 806e7fe:	6839      	ldr	r1, [r7, #0]
 806e800:	6938      	ldr	r0, [r7, #16]
 806e802:	f000 fffb 	bl	806f7fc <xQueueSemaphoreTake>
 806e806:	4603      	mov	r3, r0
 806e808:	2b01      	cmp	r3, #1
 806e80a:	d009      	beq.n	806e820 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 806e80c:	683b      	ldr	r3, [r7, #0]
 806e80e:	2b00      	cmp	r3, #0
 806e810:	d003      	beq.n	806e81a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 806e812:	f06f 0301 	mvn.w	r3, #1
 806e816:	617b      	str	r3, [r7, #20]
 806e818:	e002      	b.n	806e820 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 806e81a:	f06f 0302 	mvn.w	r3, #2
 806e81e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 806e820:	697b      	ldr	r3, [r7, #20]
}
 806e822:	4618      	mov	r0, r3
 806e824:	3718      	adds	r7, #24
 806e826:	46bd      	mov	sp, r7
 806e828:	bd80      	pop	{r7, pc}
 806e82a:	bf00      	nop
 806e82c:	e000ed04 	.word	0xe000ed04

0806e830 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 806e830:	b580      	push	{r7, lr}
 806e832:	b086      	sub	sp, #24
 806e834:	af00      	add	r7, sp, #0
 806e836:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 806e838:	687b      	ldr	r3, [r7, #4]
 806e83a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 806e83c:	2300      	movs	r3, #0
 806e83e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 806e840:	693b      	ldr	r3, [r7, #16]
 806e842:	2b00      	cmp	r3, #0
 806e844:	d103      	bne.n	806e84e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 806e846:	f06f 0303 	mvn.w	r3, #3
 806e84a:	617b      	str	r3, [r7, #20]
 806e84c:	e02c      	b.n	806e8a8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e84e:	f3ef 8305 	mrs	r3, IPSR
 806e852:	60fb      	str	r3, [r7, #12]
  return(result);
 806e854:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 806e856:	2b00      	cmp	r3, #0
 806e858:	d01a      	beq.n	806e890 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 806e85a:	2300      	movs	r3, #0
 806e85c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 806e85e:	f107 0308 	add.w	r3, r7, #8
 806e862:	4619      	mov	r1, r3
 806e864:	6938      	ldr	r0, [r7, #16]
 806e866:	f000 fe5c 	bl	806f522 <xQueueGiveFromISR>
 806e86a:	4603      	mov	r3, r0
 806e86c:	2b01      	cmp	r3, #1
 806e86e:	d003      	beq.n	806e878 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 806e870:	f06f 0302 	mvn.w	r3, #2
 806e874:	617b      	str	r3, [r7, #20]
 806e876:	e017      	b.n	806e8a8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 806e878:	68bb      	ldr	r3, [r7, #8]
 806e87a:	2b00      	cmp	r3, #0
 806e87c:	d014      	beq.n	806e8a8 <osSemaphoreRelease+0x78>
 806e87e:	4b0d      	ldr	r3, [pc, #52]	; (806e8b4 <osSemaphoreRelease+0x84>)
 806e880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806e884:	601a      	str	r2, [r3, #0]
 806e886:	f3bf 8f4f 	dsb	sy
 806e88a:	f3bf 8f6f 	isb	sy
 806e88e:	e00b      	b.n	806e8a8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 806e890:	2300      	movs	r3, #0
 806e892:	2200      	movs	r2, #0
 806e894:	2100      	movs	r1, #0
 806e896:	6938      	ldr	r0, [r7, #16]
 806e898:	f000 fcaa 	bl	806f1f0 <xQueueGenericSend>
 806e89c:	4603      	mov	r3, r0
 806e89e:	2b01      	cmp	r3, #1
 806e8a0:	d002      	beq.n	806e8a8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 806e8a2:	f06f 0302 	mvn.w	r3, #2
 806e8a6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 806e8a8:	697b      	ldr	r3, [r7, #20]
}
 806e8aa:	4618      	mov	r0, r3
 806e8ac:	3718      	adds	r7, #24
 806e8ae:	46bd      	mov	sp, r7
 806e8b0:	bd80      	pop	{r7, pc}
 806e8b2:	bf00      	nop
 806e8b4:	e000ed04 	.word	0xe000ed04

0806e8b8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 806e8b8:	b580      	push	{r7, lr}
 806e8ba:	b086      	sub	sp, #24
 806e8bc:	af00      	add	r7, sp, #0
 806e8be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 806e8c0:	687b      	ldr	r3, [r7, #4]
 806e8c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e8c4:	f3ef 8305 	mrs	r3, IPSR
 806e8c8:	60fb      	str	r3, [r7, #12]
  return(result);
 806e8ca:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 806e8cc:	2b00      	cmp	r3, #0
 806e8ce:	d003      	beq.n	806e8d8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 806e8d0:	f06f 0305 	mvn.w	r3, #5
 806e8d4:	617b      	str	r3, [r7, #20]
 806e8d6:	e00e      	b.n	806e8f6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 806e8d8:	693b      	ldr	r3, [r7, #16]
 806e8da:	2b00      	cmp	r3, #0
 806e8dc:	d103      	bne.n	806e8e6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 806e8de:	f06f 0303 	mvn.w	r3, #3
 806e8e2:	617b      	str	r3, [r7, #20]
 806e8e4:	e007      	b.n	806e8f6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 806e8e6:	6938      	ldr	r0, [r7, #16]
 806e8e8:	f001 fa8a 	bl	806fe00 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 806e8ec:	2300      	movs	r3, #0
 806e8ee:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 806e8f0:	6938      	ldr	r0, [r7, #16]
 806e8f2:	f001 f90f 	bl	806fb14 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 806e8f6:	697b      	ldr	r3, [r7, #20]
}
 806e8f8:	4618      	mov	r0, r3
 806e8fa:	3718      	adds	r7, #24
 806e8fc:	46bd      	mov	sp, r7
 806e8fe:	bd80      	pop	{r7, pc}

0806e900 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 806e900:	b580      	push	{r7, lr}
 806e902:	b08a      	sub	sp, #40	; 0x28
 806e904:	af02      	add	r7, sp, #8
 806e906:	60f8      	str	r0, [r7, #12]
 806e908:	60b9      	str	r1, [r7, #8]
 806e90a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 806e90c:	2300      	movs	r3, #0
 806e90e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806e910:	f3ef 8305 	mrs	r3, IPSR
 806e914:	613b      	str	r3, [r7, #16]
  return(result);
 806e916:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 806e918:	2b00      	cmp	r3, #0
 806e91a:	d15f      	bne.n	806e9dc <osMessageQueueNew+0xdc>
 806e91c:	68fb      	ldr	r3, [r7, #12]
 806e91e:	2b00      	cmp	r3, #0
 806e920:	d05c      	beq.n	806e9dc <osMessageQueueNew+0xdc>
 806e922:	68bb      	ldr	r3, [r7, #8]
 806e924:	2b00      	cmp	r3, #0
 806e926:	d059      	beq.n	806e9dc <osMessageQueueNew+0xdc>
    mem = -1;
 806e928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806e92c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 806e92e:	687b      	ldr	r3, [r7, #4]
 806e930:	2b00      	cmp	r3, #0
 806e932:	d029      	beq.n	806e988 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 806e934:	687b      	ldr	r3, [r7, #4]
 806e936:	689b      	ldr	r3, [r3, #8]
 806e938:	2b00      	cmp	r3, #0
 806e93a:	d012      	beq.n	806e962 <osMessageQueueNew+0x62>
 806e93c:	687b      	ldr	r3, [r7, #4]
 806e93e:	68db      	ldr	r3, [r3, #12]
 806e940:	2b4f      	cmp	r3, #79	; 0x4f
 806e942:	d90e      	bls.n	806e962 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 806e944:	687b      	ldr	r3, [r7, #4]
 806e946:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 806e948:	2b00      	cmp	r3, #0
 806e94a:	d00a      	beq.n	806e962 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 806e94c:	687b      	ldr	r3, [r7, #4]
 806e94e:	695a      	ldr	r2, [r3, #20]
 806e950:	68fb      	ldr	r3, [r7, #12]
 806e952:	68b9      	ldr	r1, [r7, #8]
 806e954:	fb01 f303 	mul.w	r3, r1, r3
 806e958:	429a      	cmp	r2, r3
 806e95a:	d302      	bcc.n	806e962 <osMessageQueueNew+0x62>
        mem = 1;
 806e95c:	2301      	movs	r3, #1
 806e95e:	61bb      	str	r3, [r7, #24]
 806e960:	e014      	b.n	806e98c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 806e962:	687b      	ldr	r3, [r7, #4]
 806e964:	689b      	ldr	r3, [r3, #8]
 806e966:	2b00      	cmp	r3, #0
 806e968:	d110      	bne.n	806e98c <osMessageQueueNew+0x8c>
 806e96a:	687b      	ldr	r3, [r7, #4]
 806e96c:	68db      	ldr	r3, [r3, #12]
 806e96e:	2b00      	cmp	r3, #0
 806e970:	d10c      	bne.n	806e98c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 806e972:	687b      	ldr	r3, [r7, #4]
 806e974:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 806e976:	2b00      	cmp	r3, #0
 806e978:	d108      	bne.n	806e98c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 806e97a:	687b      	ldr	r3, [r7, #4]
 806e97c:	695b      	ldr	r3, [r3, #20]
 806e97e:	2b00      	cmp	r3, #0
 806e980:	d104      	bne.n	806e98c <osMessageQueueNew+0x8c>
          mem = 0;
 806e982:	2300      	movs	r3, #0
 806e984:	61bb      	str	r3, [r7, #24]
 806e986:	e001      	b.n	806e98c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 806e988:	2300      	movs	r3, #0
 806e98a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 806e98c:	69bb      	ldr	r3, [r7, #24]
 806e98e:	2b01      	cmp	r3, #1
 806e990:	d10b      	bne.n	806e9aa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 806e992:	687b      	ldr	r3, [r7, #4]
 806e994:	691a      	ldr	r2, [r3, #16]
 806e996:	687b      	ldr	r3, [r7, #4]
 806e998:	689b      	ldr	r3, [r3, #8]
 806e99a:	2100      	movs	r1, #0
 806e99c:	9100      	str	r1, [sp, #0]
 806e99e:	68b9      	ldr	r1, [r7, #8]
 806e9a0:	68f8      	ldr	r0, [r7, #12]
 806e9a2:	f000 fa2f 	bl	806ee04 <xQueueGenericCreateStatic>
 806e9a6:	61f8      	str	r0, [r7, #28]
 806e9a8:	e008      	b.n	806e9bc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 806e9aa:	69bb      	ldr	r3, [r7, #24]
 806e9ac:	2b00      	cmp	r3, #0
 806e9ae:	d105      	bne.n	806e9bc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 806e9b0:	2200      	movs	r2, #0
 806e9b2:	68b9      	ldr	r1, [r7, #8]
 806e9b4:	68f8      	ldr	r0, [r7, #12]
 806e9b6:	f000 fa9d 	bl	806eef4 <xQueueGenericCreate>
 806e9ba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 806e9bc:	69fb      	ldr	r3, [r7, #28]
 806e9be:	2b00      	cmp	r3, #0
 806e9c0:	d00c      	beq.n	806e9dc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 806e9c2:	687b      	ldr	r3, [r7, #4]
 806e9c4:	2b00      	cmp	r3, #0
 806e9c6:	d003      	beq.n	806e9d0 <osMessageQueueNew+0xd0>
        name = attr->name;
 806e9c8:	687b      	ldr	r3, [r7, #4]
 806e9ca:	681b      	ldr	r3, [r3, #0]
 806e9cc:	617b      	str	r3, [r7, #20]
 806e9ce:	e001      	b.n	806e9d4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 806e9d0:	2300      	movs	r3, #0
 806e9d2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 806e9d4:	6979      	ldr	r1, [r7, #20]
 806e9d6:	69f8      	ldr	r0, [r7, #28]
 806e9d8:	f001 f9e8 	bl	806fdac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 806e9dc:	69fb      	ldr	r3, [r7, #28]
}
 806e9de:	4618      	mov	r0, r3
 806e9e0:	3720      	adds	r7, #32
 806e9e2:	46bd      	mov	sp, r7
 806e9e4:	bd80      	pop	{r7, pc}
	...

0806e9e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 806e9e8:	b580      	push	{r7, lr}
 806e9ea:	b088      	sub	sp, #32
 806e9ec:	af00      	add	r7, sp, #0
 806e9ee:	60f8      	str	r0, [r7, #12]
 806e9f0:	60b9      	str	r1, [r7, #8]
 806e9f2:	603b      	str	r3, [r7, #0]
 806e9f4:	4613      	mov	r3, r2
 806e9f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 806e9f8:	68fb      	ldr	r3, [r7, #12]
 806e9fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 806e9fc:	2300      	movs	r3, #0
 806e9fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806ea00:	f3ef 8305 	mrs	r3, IPSR
 806ea04:	617b      	str	r3, [r7, #20]
  return(result);
 806ea06:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 806ea08:	2b00      	cmp	r3, #0
 806ea0a:	d028      	beq.n	806ea5e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 806ea0c:	69bb      	ldr	r3, [r7, #24]
 806ea0e:	2b00      	cmp	r3, #0
 806ea10:	d005      	beq.n	806ea1e <osMessageQueuePut+0x36>
 806ea12:	68bb      	ldr	r3, [r7, #8]
 806ea14:	2b00      	cmp	r3, #0
 806ea16:	d002      	beq.n	806ea1e <osMessageQueuePut+0x36>
 806ea18:	683b      	ldr	r3, [r7, #0]
 806ea1a:	2b00      	cmp	r3, #0
 806ea1c:	d003      	beq.n	806ea26 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 806ea1e:	f06f 0303 	mvn.w	r3, #3
 806ea22:	61fb      	str	r3, [r7, #28]
 806ea24:	e038      	b.n	806ea98 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 806ea26:	2300      	movs	r3, #0
 806ea28:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 806ea2a:	f107 0210 	add.w	r2, r7, #16
 806ea2e:	2300      	movs	r3, #0
 806ea30:	68b9      	ldr	r1, [r7, #8]
 806ea32:	69b8      	ldr	r0, [r7, #24]
 806ea34:	f000 fcda 	bl	806f3ec <xQueueGenericSendFromISR>
 806ea38:	4603      	mov	r3, r0
 806ea3a:	2b01      	cmp	r3, #1
 806ea3c:	d003      	beq.n	806ea46 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 806ea3e:	f06f 0302 	mvn.w	r3, #2
 806ea42:	61fb      	str	r3, [r7, #28]
 806ea44:	e028      	b.n	806ea98 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 806ea46:	693b      	ldr	r3, [r7, #16]
 806ea48:	2b00      	cmp	r3, #0
 806ea4a:	d025      	beq.n	806ea98 <osMessageQueuePut+0xb0>
 806ea4c:	4b15      	ldr	r3, [pc, #84]	; (806eaa4 <osMessageQueuePut+0xbc>)
 806ea4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806ea52:	601a      	str	r2, [r3, #0]
 806ea54:	f3bf 8f4f 	dsb	sy
 806ea58:	f3bf 8f6f 	isb	sy
 806ea5c:	e01c      	b.n	806ea98 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 806ea5e:	69bb      	ldr	r3, [r7, #24]
 806ea60:	2b00      	cmp	r3, #0
 806ea62:	d002      	beq.n	806ea6a <osMessageQueuePut+0x82>
 806ea64:	68bb      	ldr	r3, [r7, #8]
 806ea66:	2b00      	cmp	r3, #0
 806ea68:	d103      	bne.n	806ea72 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 806ea6a:	f06f 0303 	mvn.w	r3, #3
 806ea6e:	61fb      	str	r3, [r7, #28]
 806ea70:	e012      	b.n	806ea98 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 806ea72:	2300      	movs	r3, #0
 806ea74:	683a      	ldr	r2, [r7, #0]
 806ea76:	68b9      	ldr	r1, [r7, #8]
 806ea78:	69b8      	ldr	r0, [r7, #24]
 806ea7a:	f000 fbb9 	bl	806f1f0 <xQueueGenericSend>
 806ea7e:	4603      	mov	r3, r0
 806ea80:	2b01      	cmp	r3, #1
 806ea82:	d009      	beq.n	806ea98 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 806ea84:	683b      	ldr	r3, [r7, #0]
 806ea86:	2b00      	cmp	r3, #0
 806ea88:	d003      	beq.n	806ea92 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 806ea8a:	f06f 0301 	mvn.w	r3, #1
 806ea8e:	61fb      	str	r3, [r7, #28]
 806ea90:	e002      	b.n	806ea98 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 806ea92:	f06f 0302 	mvn.w	r3, #2
 806ea96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 806ea98:	69fb      	ldr	r3, [r7, #28]
}
 806ea9a:	4618      	mov	r0, r3
 806ea9c:	3720      	adds	r7, #32
 806ea9e:	46bd      	mov	sp, r7
 806eaa0:	bd80      	pop	{r7, pc}
 806eaa2:	bf00      	nop
 806eaa4:	e000ed04 	.word	0xe000ed04

0806eaa8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 806eaa8:	b580      	push	{r7, lr}
 806eaaa:	b088      	sub	sp, #32
 806eaac:	af00      	add	r7, sp, #0
 806eaae:	60f8      	str	r0, [r7, #12]
 806eab0:	60b9      	str	r1, [r7, #8]
 806eab2:	607a      	str	r2, [r7, #4]
 806eab4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 806eab6:	68fb      	ldr	r3, [r7, #12]
 806eab8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 806eaba:	2300      	movs	r3, #0
 806eabc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 806eabe:	f3ef 8305 	mrs	r3, IPSR
 806eac2:	617b      	str	r3, [r7, #20]
  return(result);
 806eac4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 806eac6:	2b00      	cmp	r3, #0
 806eac8:	d028      	beq.n	806eb1c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 806eaca:	69bb      	ldr	r3, [r7, #24]
 806eacc:	2b00      	cmp	r3, #0
 806eace:	d005      	beq.n	806eadc <osMessageQueueGet+0x34>
 806ead0:	68bb      	ldr	r3, [r7, #8]
 806ead2:	2b00      	cmp	r3, #0
 806ead4:	d002      	beq.n	806eadc <osMessageQueueGet+0x34>
 806ead6:	683b      	ldr	r3, [r7, #0]
 806ead8:	2b00      	cmp	r3, #0
 806eada:	d003      	beq.n	806eae4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 806eadc:	f06f 0303 	mvn.w	r3, #3
 806eae0:	61fb      	str	r3, [r7, #28]
 806eae2:	e037      	b.n	806eb54 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 806eae4:	2300      	movs	r3, #0
 806eae6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 806eae8:	f107 0310 	add.w	r3, r7, #16
 806eaec:	461a      	mov	r2, r3
 806eaee:	68b9      	ldr	r1, [r7, #8]
 806eaf0:	69b8      	ldr	r0, [r7, #24]
 806eaf2:	f000 ff8f 	bl	806fa14 <xQueueReceiveFromISR>
 806eaf6:	4603      	mov	r3, r0
 806eaf8:	2b01      	cmp	r3, #1
 806eafa:	d003      	beq.n	806eb04 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 806eafc:	f06f 0302 	mvn.w	r3, #2
 806eb00:	61fb      	str	r3, [r7, #28]
 806eb02:	e027      	b.n	806eb54 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 806eb04:	693b      	ldr	r3, [r7, #16]
 806eb06:	2b00      	cmp	r3, #0
 806eb08:	d024      	beq.n	806eb54 <osMessageQueueGet+0xac>
 806eb0a:	4b15      	ldr	r3, [pc, #84]	; (806eb60 <osMessageQueueGet+0xb8>)
 806eb0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806eb10:	601a      	str	r2, [r3, #0]
 806eb12:	f3bf 8f4f 	dsb	sy
 806eb16:	f3bf 8f6f 	isb	sy
 806eb1a:	e01b      	b.n	806eb54 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 806eb1c:	69bb      	ldr	r3, [r7, #24]
 806eb1e:	2b00      	cmp	r3, #0
 806eb20:	d002      	beq.n	806eb28 <osMessageQueueGet+0x80>
 806eb22:	68bb      	ldr	r3, [r7, #8]
 806eb24:	2b00      	cmp	r3, #0
 806eb26:	d103      	bne.n	806eb30 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 806eb28:	f06f 0303 	mvn.w	r3, #3
 806eb2c:	61fb      	str	r3, [r7, #28]
 806eb2e:	e011      	b.n	806eb54 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 806eb30:	683a      	ldr	r2, [r7, #0]
 806eb32:	68b9      	ldr	r1, [r7, #8]
 806eb34:	69b8      	ldr	r0, [r7, #24]
 806eb36:	f000 fd81 	bl	806f63c <xQueueReceive>
 806eb3a:	4603      	mov	r3, r0
 806eb3c:	2b01      	cmp	r3, #1
 806eb3e:	d009      	beq.n	806eb54 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 806eb40:	683b      	ldr	r3, [r7, #0]
 806eb42:	2b00      	cmp	r3, #0
 806eb44:	d003      	beq.n	806eb4e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 806eb46:	f06f 0301 	mvn.w	r3, #1
 806eb4a:	61fb      	str	r3, [r7, #28]
 806eb4c:	e002      	b.n	806eb54 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 806eb4e:	f06f 0302 	mvn.w	r3, #2
 806eb52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 806eb54:	69fb      	ldr	r3, [r7, #28]
}
 806eb56:	4618      	mov	r0, r3
 806eb58:	3720      	adds	r7, #32
 806eb5a:	46bd      	mov	sp, r7
 806eb5c:	bd80      	pop	{r7, pc}
 806eb5e:	bf00      	nop
 806eb60:	e000ed04 	.word	0xe000ed04

0806eb64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 806eb64:	b480      	push	{r7}
 806eb66:	b085      	sub	sp, #20
 806eb68:	af00      	add	r7, sp, #0
 806eb6a:	60f8      	str	r0, [r7, #12]
 806eb6c:	60b9      	str	r1, [r7, #8]
 806eb6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 806eb70:	68fb      	ldr	r3, [r7, #12]
 806eb72:	4a07      	ldr	r2, [pc, #28]	; (806eb90 <vApplicationGetIdleTaskMemory+0x2c>)
 806eb74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 806eb76:	68bb      	ldr	r3, [r7, #8]
 806eb78:	4a06      	ldr	r2, [pc, #24]	; (806eb94 <vApplicationGetIdleTaskMemory+0x30>)
 806eb7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 806eb7c:	687b      	ldr	r3, [r7, #4]
 806eb7e:	2280      	movs	r2, #128	; 0x80
 806eb80:	601a      	str	r2, [r3, #0]
}
 806eb82:	bf00      	nop
 806eb84:	3714      	adds	r7, #20
 806eb86:	46bd      	mov	sp, r7
 806eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 806eb8c:	4770      	bx	lr
 806eb8e:	bf00      	nop
 806eb90:	2000045c 	.word	0x2000045c
 806eb94:	20000518 	.word	0x20000518

0806eb98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 806eb98:	b480      	push	{r7}
 806eb9a:	b085      	sub	sp, #20
 806eb9c:	af00      	add	r7, sp, #0
 806eb9e:	60f8      	str	r0, [r7, #12]
 806eba0:	60b9      	str	r1, [r7, #8]
 806eba2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 806eba4:	68fb      	ldr	r3, [r7, #12]
 806eba6:	4a07      	ldr	r2, [pc, #28]	; (806ebc4 <vApplicationGetTimerTaskMemory+0x2c>)
 806eba8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 806ebaa:	68bb      	ldr	r3, [r7, #8]
 806ebac:	4a06      	ldr	r2, [pc, #24]	; (806ebc8 <vApplicationGetTimerTaskMemory+0x30>)
 806ebae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 806ebb0:	687b      	ldr	r3, [r7, #4]
 806ebb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 806ebb6:	601a      	str	r2, [r3, #0]
}
 806ebb8:	bf00      	nop
 806ebba:	3714      	adds	r7, #20
 806ebbc:	46bd      	mov	sp, r7
 806ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ebc2:	4770      	bx	lr
 806ebc4:	20000718 	.word	0x20000718
 806ebc8:	200007d4 	.word	0x200007d4

0806ebcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 806ebcc:	b480      	push	{r7}
 806ebce:	b083      	sub	sp, #12
 806ebd0:	af00      	add	r7, sp, #0
 806ebd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806ebd4:	687b      	ldr	r3, [r7, #4]
 806ebd6:	f103 0208 	add.w	r2, r3, #8
 806ebda:	687b      	ldr	r3, [r7, #4]
 806ebdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 806ebde:	687b      	ldr	r3, [r7, #4]
 806ebe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 806ebe4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806ebe6:	687b      	ldr	r3, [r7, #4]
 806ebe8:	f103 0208 	add.w	r2, r3, #8
 806ebec:	687b      	ldr	r3, [r7, #4]
 806ebee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 806ebf0:	687b      	ldr	r3, [r7, #4]
 806ebf2:	f103 0208 	add.w	r2, r3, #8
 806ebf6:	687b      	ldr	r3, [r7, #4]
 806ebf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 806ebfa:	687b      	ldr	r3, [r7, #4]
 806ebfc:	2200      	movs	r2, #0
 806ebfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 806ec00:	bf00      	nop
 806ec02:	370c      	adds	r7, #12
 806ec04:	46bd      	mov	sp, r7
 806ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ec0a:	4770      	bx	lr

0806ec0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 806ec0c:	b480      	push	{r7}
 806ec0e:	b083      	sub	sp, #12
 806ec10:	af00      	add	r7, sp, #0
 806ec12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 806ec14:	687b      	ldr	r3, [r7, #4]
 806ec16:	2200      	movs	r2, #0
 806ec18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 806ec1a:	bf00      	nop
 806ec1c:	370c      	adds	r7, #12
 806ec1e:	46bd      	mov	sp, r7
 806ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ec24:	4770      	bx	lr

0806ec26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 806ec26:	b480      	push	{r7}
 806ec28:	b085      	sub	sp, #20
 806ec2a:	af00      	add	r7, sp, #0
 806ec2c:	6078      	str	r0, [r7, #4]
 806ec2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 806ec30:	687b      	ldr	r3, [r7, #4]
 806ec32:	685b      	ldr	r3, [r3, #4]
 806ec34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 806ec36:	683b      	ldr	r3, [r7, #0]
 806ec38:	68fa      	ldr	r2, [r7, #12]
 806ec3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 806ec3c:	68fb      	ldr	r3, [r7, #12]
 806ec3e:	689a      	ldr	r2, [r3, #8]
 806ec40:	683b      	ldr	r3, [r7, #0]
 806ec42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 806ec44:	68fb      	ldr	r3, [r7, #12]
 806ec46:	689b      	ldr	r3, [r3, #8]
 806ec48:	683a      	ldr	r2, [r7, #0]
 806ec4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 806ec4c:	68fb      	ldr	r3, [r7, #12]
 806ec4e:	683a      	ldr	r2, [r7, #0]
 806ec50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 806ec52:	683b      	ldr	r3, [r7, #0]
 806ec54:	687a      	ldr	r2, [r7, #4]
 806ec56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 806ec58:	687b      	ldr	r3, [r7, #4]
 806ec5a:	681b      	ldr	r3, [r3, #0]
 806ec5c:	1c5a      	adds	r2, r3, #1
 806ec5e:	687b      	ldr	r3, [r7, #4]
 806ec60:	601a      	str	r2, [r3, #0]
}
 806ec62:	bf00      	nop
 806ec64:	3714      	adds	r7, #20
 806ec66:	46bd      	mov	sp, r7
 806ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ec6c:	4770      	bx	lr

0806ec6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 806ec6e:	b480      	push	{r7}
 806ec70:	b085      	sub	sp, #20
 806ec72:	af00      	add	r7, sp, #0
 806ec74:	6078      	str	r0, [r7, #4]
 806ec76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 806ec78:	683b      	ldr	r3, [r7, #0]
 806ec7a:	681b      	ldr	r3, [r3, #0]
 806ec7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 806ec7e:	68bb      	ldr	r3, [r7, #8]
 806ec80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806ec84:	d103      	bne.n	806ec8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 806ec86:	687b      	ldr	r3, [r7, #4]
 806ec88:	691b      	ldr	r3, [r3, #16]
 806ec8a:	60fb      	str	r3, [r7, #12]
 806ec8c:	e00c      	b.n	806eca8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 806ec8e:	687b      	ldr	r3, [r7, #4]
 806ec90:	3308      	adds	r3, #8
 806ec92:	60fb      	str	r3, [r7, #12]
 806ec94:	e002      	b.n	806ec9c <vListInsert+0x2e>
 806ec96:	68fb      	ldr	r3, [r7, #12]
 806ec98:	685b      	ldr	r3, [r3, #4]
 806ec9a:	60fb      	str	r3, [r7, #12]
 806ec9c:	68fb      	ldr	r3, [r7, #12]
 806ec9e:	685b      	ldr	r3, [r3, #4]
 806eca0:	681b      	ldr	r3, [r3, #0]
 806eca2:	68ba      	ldr	r2, [r7, #8]
 806eca4:	429a      	cmp	r2, r3
 806eca6:	d2f6      	bcs.n	806ec96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 806eca8:	68fb      	ldr	r3, [r7, #12]
 806ecaa:	685a      	ldr	r2, [r3, #4]
 806ecac:	683b      	ldr	r3, [r7, #0]
 806ecae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 806ecb0:	683b      	ldr	r3, [r7, #0]
 806ecb2:	685b      	ldr	r3, [r3, #4]
 806ecb4:	683a      	ldr	r2, [r7, #0]
 806ecb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 806ecb8:	683b      	ldr	r3, [r7, #0]
 806ecba:	68fa      	ldr	r2, [r7, #12]
 806ecbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 806ecbe:	68fb      	ldr	r3, [r7, #12]
 806ecc0:	683a      	ldr	r2, [r7, #0]
 806ecc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 806ecc4:	683b      	ldr	r3, [r7, #0]
 806ecc6:	687a      	ldr	r2, [r7, #4]
 806ecc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 806ecca:	687b      	ldr	r3, [r7, #4]
 806eccc:	681b      	ldr	r3, [r3, #0]
 806ecce:	1c5a      	adds	r2, r3, #1
 806ecd0:	687b      	ldr	r3, [r7, #4]
 806ecd2:	601a      	str	r2, [r3, #0]
}
 806ecd4:	bf00      	nop
 806ecd6:	3714      	adds	r7, #20
 806ecd8:	46bd      	mov	sp, r7
 806ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ecde:	4770      	bx	lr

0806ece0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 806ece0:	b480      	push	{r7}
 806ece2:	b085      	sub	sp, #20
 806ece4:	af00      	add	r7, sp, #0
 806ece6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 806ece8:	687b      	ldr	r3, [r7, #4]
 806ecea:	691b      	ldr	r3, [r3, #16]
 806ecec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 806ecee:	687b      	ldr	r3, [r7, #4]
 806ecf0:	685b      	ldr	r3, [r3, #4]
 806ecf2:	687a      	ldr	r2, [r7, #4]
 806ecf4:	6892      	ldr	r2, [r2, #8]
 806ecf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 806ecf8:	687b      	ldr	r3, [r7, #4]
 806ecfa:	689b      	ldr	r3, [r3, #8]
 806ecfc:	687a      	ldr	r2, [r7, #4]
 806ecfe:	6852      	ldr	r2, [r2, #4]
 806ed00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 806ed02:	68fb      	ldr	r3, [r7, #12]
 806ed04:	685b      	ldr	r3, [r3, #4]
 806ed06:	687a      	ldr	r2, [r7, #4]
 806ed08:	429a      	cmp	r2, r3
 806ed0a:	d103      	bne.n	806ed14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 806ed0c:	687b      	ldr	r3, [r7, #4]
 806ed0e:	689a      	ldr	r2, [r3, #8]
 806ed10:	68fb      	ldr	r3, [r7, #12]
 806ed12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 806ed14:	687b      	ldr	r3, [r7, #4]
 806ed16:	2200      	movs	r2, #0
 806ed18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 806ed1a:	68fb      	ldr	r3, [r7, #12]
 806ed1c:	681b      	ldr	r3, [r3, #0]
 806ed1e:	1e5a      	subs	r2, r3, #1
 806ed20:	68fb      	ldr	r3, [r7, #12]
 806ed22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 806ed24:	68fb      	ldr	r3, [r7, #12]
 806ed26:	681b      	ldr	r3, [r3, #0]
}
 806ed28:	4618      	mov	r0, r3
 806ed2a:	3714      	adds	r7, #20
 806ed2c:	46bd      	mov	sp, r7
 806ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 806ed32:	4770      	bx	lr

0806ed34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 806ed34:	b580      	push	{r7, lr}
 806ed36:	b084      	sub	sp, #16
 806ed38:	af00      	add	r7, sp, #0
 806ed3a:	6078      	str	r0, [r7, #4]
 806ed3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 806ed3e:	687b      	ldr	r3, [r7, #4]
 806ed40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 806ed42:	68fb      	ldr	r3, [r7, #12]
 806ed44:	2b00      	cmp	r3, #0
 806ed46:	d10a      	bne.n	806ed5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 806ed48:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ed4c:	f383 8811 	msr	BASEPRI, r3
 806ed50:	f3bf 8f6f 	isb	sy
 806ed54:	f3bf 8f4f 	dsb	sy
 806ed58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 806ed5a:	bf00      	nop
 806ed5c:	e7fe      	b.n	806ed5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 806ed5e:	f003 f819 	bl	8071d94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806ed62:	68fb      	ldr	r3, [r7, #12]
 806ed64:	681a      	ldr	r2, [r3, #0]
 806ed66:	68fb      	ldr	r3, [r7, #12]
 806ed68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806ed6a:	68f9      	ldr	r1, [r7, #12]
 806ed6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 806ed6e:	fb01 f303 	mul.w	r3, r1, r3
 806ed72:	441a      	add	r2, r3
 806ed74:	68fb      	ldr	r3, [r7, #12]
 806ed76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 806ed78:	68fb      	ldr	r3, [r7, #12]
 806ed7a:	2200      	movs	r2, #0
 806ed7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 806ed7e:	68fb      	ldr	r3, [r7, #12]
 806ed80:	681a      	ldr	r2, [r3, #0]
 806ed82:	68fb      	ldr	r3, [r7, #12]
 806ed84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806ed86:	68fb      	ldr	r3, [r7, #12]
 806ed88:	681a      	ldr	r2, [r3, #0]
 806ed8a:	68fb      	ldr	r3, [r7, #12]
 806ed8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806ed8e:	3b01      	subs	r3, #1
 806ed90:	68f9      	ldr	r1, [r7, #12]
 806ed92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 806ed94:	fb01 f303 	mul.w	r3, r1, r3
 806ed98:	441a      	add	r2, r3
 806ed9a:	68fb      	ldr	r3, [r7, #12]
 806ed9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 806ed9e:	68fb      	ldr	r3, [r7, #12]
 806eda0:	22ff      	movs	r2, #255	; 0xff
 806eda2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 806eda6:	68fb      	ldr	r3, [r7, #12]
 806eda8:	22ff      	movs	r2, #255	; 0xff
 806edaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 806edae:	683b      	ldr	r3, [r7, #0]
 806edb0:	2b00      	cmp	r3, #0
 806edb2:	d114      	bne.n	806edde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806edb4:	68fb      	ldr	r3, [r7, #12]
 806edb6:	691b      	ldr	r3, [r3, #16]
 806edb8:	2b00      	cmp	r3, #0
 806edba:	d01a      	beq.n	806edf2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806edbc:	68fb      	ldr	r3, [r7, #12]
 806edbe:	3310      	adds	r3, #16
 806edc0:	4618      	mov	r0, r3
 806edc2:	f001 fd01 	bl	80707c8 <xTaskRemoveFromEventList>
 806edc6:	4603      	mov	r3, r0
 806edc8:	2b00      	cmp	r3, #0
 806edca:	d012      	beq.n	806edf2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 806edcc:	4b0c      	ldr	r3, [pc, #48]	; (806ee00 <xQueueGenericReset+0xcc>)
 806edce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806edd2:	601a      	str	r2, [r3, #0]
 806edd4:	f3bf 8f4f 	dsb	sy
 806edd8:	f3bf 8f6f 	isb	sy
 806eddc:	e009      	b.n	806edf2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 806edde:	68fb      	ldr	r3, [r7, #12]
 806ede0:	3310      	adds	r3, #16
 806ede2:	4618      	mov	r0, r3
 806ede4:	f7ff fef2 	bl	806ebcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 806ede8:	68fb      	ldr	r3, [r7, #12]
 806edea:	3324      	adds	r3, #36	; 0x24
 806edec:	4618      	mov	r0, r3
 806edee:	f7ff feed 	bl	806ebcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 806edf2:	f002 ffff 	bl	8071df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 806edf6:	2301      	movs	r3, #1
}
 806edf8:	4618      	mov	r0, r3
 806edfa:	3710      	adds	r7, #16
 806edfc:	46bd      	mov	sp, r7
 806edfe:	bd80      	pop	{r7, pc}
 806ee00:	e000ed04 	.word	0xe000ed04

0806ee04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 806ee04:	b580      	push	{r7, lr}
 806ee06:	b08e      	sub	sp, #56	; 0x38
 806ee08:	af02      	add	r7, sp, #8
 806ee0a:	60f8      	str	r0, [r7, #12]
 806ee0c:	60b9      	str	r1, [r7, #8]
 806ee0e:	607a      	str	r2, [r7, #4]
 806ee10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 806ee12:	68fb      	ldr	r3, [r7, #12]
 806ee14:	2b00      	cmp	r3, #0
 806ee16:	d10a      	bne.n	806ee2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 806ee18:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ee1c:	f383 8811 	msr	BASEPRI, r3
 806ee20:	f3bf 8f6f 	isb	sy
 806ee24:	f3bf 8f4f 	dsb	sy
 806ee28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 806ee2a:	bf00      	nop
 806ee2c:	e7fe      	b.n	806ee2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 806ee2e:	683b      	ldr	r3, [r7, #0]
 806ee30:	2b00      	cmp	r3, #0
 806ee32:	d10a      	bne.n	806ee4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 806ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ee38:	f383 8811 	msr	BASEPRI, r3
 806ee3c:	f3bf 8f6f 	isb	sy
 806ee40:	f3bf 8f4f 	dsb	sy
 806ee44:	627b      	str	r3, [r7, #36]	; 0x24
}
 806ee46:	bf00      	nop
 806ee48:	e7fe      	b.n	806ee48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 806ee4a:	687b      	ldr	r3, [r7, #4]
 806ee4c:	2b00      	cmp	r3, #0
 806ee4e:	d002      	beq.n	806ee56 <xQueueGenericCreateStatic+0x52>
 806ee50:	68bb      	ldr	r3, [r7, #8]
 806ee52:	2b00      	cmp	r3, #0
 806ee54:	d001      	beq.n	806ee5a <xQueueGenericCreateStatic+0x56>
 806ee56:	2301      	movs	r3, #1
 806ee58:	e000      	b.n	806ee5c <xQueueGenericCreateStatic+0x58>
 806ee5a:	2300      	movs	r3, #0
 806ee5c:	2b00      	cmp	r3, #0
 806ee5e:	d10a      	bne.n	806ee76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 806ee60:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ee64:	f383 8811 	msr	BASEPRI, r3
 806ee68:	f3bf 8f6f 	isb	sy
 806ee6c:	f3bf 8f4f 	dsb	sy
 806ee70:	623b      	str	r3, [r7, #32]
}
 806ee72:	bf00      	nop
 806ee74:	e7fe      	b.n	806ee74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 806ee76:	687b      	ldr	r3, [r7, #4]
 806ee78:	2b00      	cmp	r3, #0
 806ee7a:	d102      	bne.n	806ee82 <xQueueGenericCreateStatic+0x7e>
 806ee7c:	68bb      	ldr	r3, [r7, #8]
 806ee7e:	2b00      	cmp	r3, #0
 806ee80:	d101      	bne.n	806ee86 <xQueueGenericCreateStatic+0x82>
 806ee82:	2301      	movs	r3, #1
 806ee84:	e000      	b.n	806ee88 <xQueueGenericCreateStatic+0x84>
 806ee86:	2300      	movs	r3, #0
 806ee88:	2b00      	cmp	r3, #0
 806ee8a:	d10a      	bne.n	806eea2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 806ee8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ee90:	f383 8811 	msr	BASEPRI, r3
 806ee94:	f3bf 8f6f 	isb	sy
 806ee98:	f3bf 8f4f 	dsb	sy
 806ee9c:	61fb      	str	r3, [r7, #28]
}
 806ee9e:	bf00      	nop
 806eea0:	e7fe      	b.n	806eea0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 806eea2:	2350      	movs	r3, #80	; 0x50
 806eea4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 806eea6:	697b      	ldr	r3, [r7, #20]
 806eea8:	2b50      	cmp	r3, #80	; 0x50
 806eeaa:	d00a      	beq.n	806eec2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 806eeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 806eeb0:	f383 8811 	msr	BASEPRI, r3
 806eeb4:	f3bf 8f6f 	isb	sy
 806eeb8:	f3bf 8f4f 	dsb	sy
 806eebc:	61bb      	str	r3, [r7, #24]
}
 806eebe:	bf00      	nop
 806eec0:	e7fe      	b.n	806eec0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 806eec2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 806eec4:	683b      	ldr	r3, [r7, #0]
 806eec6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 806eec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806eeca:	2b00      	cmp	r3, #0
 806eecc:	d00d      	beq.n	806eeea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 806eece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806eed0:	2201      	movs	r2, #1
 806eed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 806eed6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 806eeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806eedc:	9300      	str	r3, [sp, #0]
 806eede:	4613      	mov	r3, r2
 806eee0:	687a      	ldr	r2, [r7, #4]
 806eee2:	68b9      	ldr	r1, [r7, #8]
 806eee4:	68f8      	ldr	r0, [r7, #12]
 806eee6:	f000 f83f 	bl	806ef68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 806eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 806eeec:	4618      	mov	r0, r3
 806eeee:	3730      	adds	r7, #48	; 0x30
 806eef0:	46bd      	mov	sp, r7
 806eef2:	bd80      	pop	{r7, pc}

0806eef4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 806eef4:	b580      	push	{r7, lr}
 806eef6:	b08a      	sub	sp, #40	; 0x28
 806eef8:	af02      	add	r7, sp, #8
 806eefa:	60f8      	str	r0, [r7, #12]
 806eefc:	60b9      	str	r1, [r7, #8]
 806eefe:	4613      	mov	r3, r2
 806ef00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 806ef02:	68fb      	ldr	r3, [r7, #12]
 806ef04:	2b00      	cmp	r3, #0
 806ef06:	d10a      	bne.n	806ef1e <xQueueGenericCreate+0x2a>
	__asm volatile
 806ef08:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ef0c:	f383 8811 	msr	BASEPRI, r3
 806ef10:	f3bf 8f6f 	isb	sy
 806ef14:	f3bf 8f4f 	dsb	sy
 806ef18:	613b      	str	r3, [r7, #16]
}
 806ef1a:	bf00      	nop
 806ef1c:	e7fe      	b.n	806ef1c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 806ef1e:	68fb      	ldr	r3, [r7, #12]
 806ef20:	68ba      	ldr	r2, [r7, #8]
 806ef22:	fb02 f303 	mul.w	r3, r2, r3
 806ef26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 806ef28:	69fb      	ldr	r3, [r7, #28]
 806ef2a:	3350      	adds	r3, #80	; 0x50
 806ef2c:	4618      	mov	r0, r3
 806ef2e:	f003 f853 	bl	8071fd8 <pvPortMalloc>
 806ef32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 806ef34:	69bb      	ldr	r3, [r7, #24]
 806ef36:	2b00      	cmp	r3, #0
 806ef38:	d011      	beq.n	806ef5e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 806ef3a:	69bb      	ldr	r3, [r7, #24]
 806ef3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 806ef3e:	697b      	ldr	r3, [r7, #20]
 806ef40:	3350      	adds	r3, #80	; 0x50
 806ef42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 806ef44:	69bb      	ldr	r3, [r7, #24]
 806ef46:	2200      	movs	r2, #0
 806ef48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 806ef4c:	79fa      	ldrb	r2, [r7, #7]
 806ef4e:	69bb      	ldr	r3, [r7, #24]
 806ef50:	9300      	str	r3, [sp, #0]
 806ef52:	4613      	mov	r3, r2
 806ef54:	697a      	ldr	r2, [r7, #20]
 806ef56:	68b9      	ldr	r1, [r7, #8]
 806ef58:	68f8      	ldr	r0, [r7, #12]
 806ef5a:	f000 f805 	bl	806ef68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 806ef5e:	69bb      	ldr	r3, [r7, #24]
	}
 806ef60:	4618      	mov	r0, r3
 806ef62:	3720      	adds	r7, #32
 806ef64:	46bd      	mov	sp, r7
 806ef66:	bd80      	pop	{r7, pc}

0806ef68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 806ef68:	b580      	push	{r7, lr}
 806ef6a:	b084      	sub	sp, #16
 806ef6c:	af00      	add	r7, sp, #0
 806ef6e:	60f8      	str	r0, [r7, #12]
 806ef70:	60b9      	str	r1, [r7, #8]
 806ef72:	607a      	str	r2, [r7, #4]
 806ef74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 806ef76:	68bb      	ldr	r3, [r7, #8]
 806ef78:	2b00      	cmp	r3, #0
 806ef7a:	d103      	bne.n	806ef84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 806ef7c:	69bb      	ldr	r3, [r7, #24]
 806ef7e:	69ba      	ldr	r2, [r7, #24]
 806ef80:	601a      	str	r2, [r3, #0]
 806ef82:	e002      	b.n	806ef8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 806ef84:	69bb      	ldr	r3, [r7, #24]
 806ef86:	687a      	ldr	r2, [r7, #4]
 806ef88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 806ef8a:	69bb      	ldr	r3, [r7, #24]
 806ef8c:	68fa      	ldr	r2, [r7, #12]
 806ef8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 806ef90:	69bb      	ldr	r3, [r7, #24]
 806ef92:	68ba      	ldr	r2, [r7, #8]
 806ef94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 806ef96:	2101      	movs	r1, #1
 806ef98:	69b8      	ldr	r0, [r7, #24]
 806ef9a:	f7ff fecb 	bl	806ed34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 806ef9e:	69bb      	ldr	r3, [r7, #24]
 806efa0:	78fa      	ldrb	r2, [r7, #3]
 806efa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 806efa6:	bf00      	nop
 806efa8:	3710      	adds	r7, #16
 806efaa:	46bd      	mov	sp, r7
 806efac:	bd80      	pop	{r7, pc}

0806efae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 806efae:	b580      	push	{r7, lr}
 806efb0:	b082      	sub	sp, #8
 806efb2:	af00      	add	r7, sp, #0
 806efb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 806efb6:	687b      	ldr	r3, [r7, #4]
 806efb8:	2b00      	cmp	r3, #0
 806efba:	d00e      	beq.n	806efda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 806efbc:	687b      	ldr	r3, [r7, #4]
 806efbe:	2200      	movs	r2, #0
 806efc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 806efc2:	687b      	ldr	r3, [r7, #4]
 806efc4:	2200      	movs	r2, #0
 806efc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 806efc8:	687b      	ldr	r3, [r7, #4]
 806efca:	2200      	movs	r2, #0
 806efcc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 806efce:	2300      	movs	r3, #0
 806efd0:	2200      	movs	r2, #0
 806efd2:	2100      	movs	r1, #0
 806efd4:	6878      	ldr	r0, [r7, #4]
 806efd6:	f000 f90b 	bl	806f1f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 806efda:	bf00      	nop
 806efdc:	3708      	adds	r7, #8
 806efde:	46bd      	mov	sp, r7
 806efe0:	bd80      	pop	{r7, pc}

0806efe2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 806efe2:	b580      	push	{r7, lr}
 806efe4:	b086      	sub	sp, #24
 806efe6:	af00      	add	r7, sp, #0
 806efe8:	4603      	mov	r3, r0
 806efea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 806efec:	2301      	movs	r3, #1
 806efee:	617b      	str	r3, [r7, #20]
 806eff0:	2300      	movs	r3, #0
 806eff2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 806eff4:	79fb      	ldrb	r3, [r7, #7]
 806eff6:	461a      	mov	r2, r3
 806eff8:	6939      	ldr	r1, [r7, #16]
 806effa:	6978      	ldr	r0, [r7, #20]
 806effc:	f7ff ff7a 	bl	806eef4 <xQueueGenericCreate>
 806f000:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 806f002:	68f8      	ldr	r0, [r7, #12]
 806f004:	f7ff ffd3 	bl	806efae <prvInitialiseMutex>

		return xNewQueue;
 806f008:	68fb      	ldr	r3, [r7, #12]
	}
 806f00a:	4618      	mov	r0, r3
 806f00c:	3718      	adds	r7, #24
 806f00e:	46bd      	mov	sp, r7
 806f010:	bd80      	pop	{r7, pc}

0806f012 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 806f012:	b580      	push	{r7, lr}
 806f014:	b088      	sub	sp, #32
 806f016:	af02      	add	r7, sp, #8
 806f018:	4603      	mov	r3, r0
 806f01a:	6039      	str	r1, [r7, #0]
 806f01c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 806f01e:	2301      	movs	r3, #1
 806f020:	617b      	str	r3, [r7, #20]
 806f022:	2300      	movs	r3, #0
 806f024:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 806f026:	79fb      	ldrb	r3, [r7, #7]
 806f028:	9300      	str	r3, [sp, #0]
 806f02a:	683b      	ldr	r3, [r7, #0]
 806f02c:	2200      	movs	r2, #0
 806f02e:	6939      	ldr	r1, [r7, #16]
 806f030:	6978      	ldr	r0, [r7, #20]
 806f032:	f7ff fee7 	bl	806ee04 <xQueueGenericCreateStatic>
 806f036:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 806f038:	68f8      	ldr	r0, [r7, #12]
 806f03a:	f7ff ffb8 	bl	806efae <prvInitialiseMutex>

		return xNewQueue;
 806f03e:	68fb      	ldr	r3, [r7, #12]
	}
 806f040:	4618      	mov	r0, r3
 806f042:	3718      	adds	r7, #24
 806f044:	46bd      	mov	sp, r7
 806f046:	bd80      	pop	{r7, pc}

0806f048 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 806f048:	b590      	push	{r4, r7, lr}
 806f04a:	b087      	sub	sp, #28
 806f04c:	af00      	add	r7, sp, #0
 806f04e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 806f050:	687b      	ldr	r3, [r7, #4]
 806f052:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 806f054:	693b      	ldr	r3, [r7, #16]
 806f056:	2b00      	cmp	r3, #0
 806f058:	d10a      	bne.n	806f070 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 806f05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f05e:	f383 8811 	msr	BASEPRI, r3
 806f062:	f3bf 8f6f 	isb	sy
 806f066:	f3bf 8f4f 	dsb	sy
 806f06a:	60fb      	str	r3, [r7, #12]
}
 806f06c:	bf00      	nop
 806f06e:	e7fe      	b.n	806f06e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 806f070:	693b      	ldr	r3, [r7, #16]
 806f072:	689c      	ldr	r4, [r3, #8]
 806f074:	f001 fd6a 	bl	8070b4c <xTaskGetCurrentTaskHandle>
 806f078:	4603      	mov	r3, r0
 806f07a:	429c      	cmp	r4, r3
 806f07c:	d111      	bne.n	806f0a2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 806f07e:	693b      	ldr	r3, [r7, #16]
 806f080:	68db      	ldr	r3, [r3, #12]
 806f082:	1e5a      	subs	r2, r3, #1
 806f084:	693b      	ldr	r3, [r7, #16]
 806f086:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 806f088:	693b      	ldr	r3, [r7, #16]
 806f08a:	68db      	ldr	r3, [r3, #12]
 806f08c:	2b00      	cmp	r3, #0
 806f08e:	d105      	bne.n	806f09c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 806f090:	2300      	movs	r3, #0
 806f092:	2200      	movs	r2, #0
 806f094:	2100      	movs	r1, #0
 806f096:	6938      	ldr	r0, [r7, #16]
 806f098:	f000 f8aa 	bl	806f1f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 806f09c:	2301      	movs	r3, #1
 806f09e:	617b      	str	r3, [r7, #20]
 806f0a0:	e001      	b.n	806f0a6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 806f0a2:	2300      	movs	r3, #0
 806f0a4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 806f0a6:	697b      	ldr	r3, [r7, #20]
	}
 806f0a8:	4618      	mov	r0, r3
 806f0aa:	371c      	adds	r7, #28
 806f0ac:	46bd      	mov	sp, r7
 806f0ae:	bd90      	pop	{r4, r7, pc}

0806f0b0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 806f0b0:	b590      	push	{r4, r7, lr}
 806f0b2:	b087      	sub	sp, #28
 806f0b4:	af00      	add	r7, sp, #0
 806f0b6:	6078      	str	r0, [r7, #4]
 806f0b8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 806f0ba:	687b      	ldr	r3, [r7, #4]
 806f0bc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 806f0be:	693b      	ldr	r3, [r7, #16]
 806f0c0:	2b00      	cmp	r3, #0
 806f0c2:	d10a      	bne.n	806f0da <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 806f0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f0c8:	f383 8811 	msr	BASEPRI, r3
 806f0cc:	f3bf 8f6f 	isb	sy
 806f0d0:	f3bf 8f4f 	dsb	sy
 806f0d4:	60fb      	str	r3, [r7, #12]
}
 806f0d6:	bf00      	nop
 806f0d8:	e7fe      	b.n	806f0d8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 806f0da:	693b      	ldr	r3, [r7, #16]
 806f0dc:	689c      	ldr	r4, [r3, #8]
 806f0de:	f001 fd35 	bl	8070b4c <xTaskGetCurrentTaskHandle>
 806f0e2:	4603      	mov	r3, r0
 806f0e4:	429c      	cmp	r4, r3
 806f0e6:	d107      	bne.n	806f0f8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 806f0e8:	693b      	ldr	r3, [r7, #16]
 806f0ea:	68db      	ldr	r3, [r3, #12]
 806f0ec:	1c5a      	adds	r2, r3, #1
 806f0ee:	693b      	ldr	r3, [r7, #16]
 806f0f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 806f0f2:	2301      	movs	r3, #1
 806f0f4:	617b      	str	r3, [r7, #20]
 806f0f6:	e00c      	b.n	806f112 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 806f0f8:	6839      	ldr	r1, [r7, #0]
 806f0fa:	6938      	ldr	r0, [r7, #16]
 806f0fc:	f000 fb7e 	bl	806f7fc <xQueueSemaphoreTake>
 806f100:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 806f102:	697b      	ldr	r3, [r7, #20]
 806f104:	2b00      	cmp	r3, #0
 806f106:	d004      	beq.n	806f112 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 806f108:	693b      	ldr	r3, [r7, #16]
 806f10a:	68db      	ldr	r3, [r3, #12]
 806f10c:	1c5a      	adds	r2, r3, #1
 806f10e:	693b      	ldr	r3, [r7, #16]
 806f110:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 806f112:	697b      	ldr	r3, [r7, #20]
	}
 806f114:	4618      	mov	r0, r3
 806f116:	371c      	adds	r7, #28
 806f118:	46bd      	mov	sp, r7
 806f11a:	bd90      	pop	{r4, r7, pc}

0806f11c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 806f11c:	b580      	push	{r7, lr}
 806f11e:	b08a      	sub	sp, #40	; 0x28
 806f120:	af02      	add	r7, sp, #8
 806f122:	60f8      	str	r0, [r7, #12]
 806f124:	60b9      	str	r1, [r7, #8]
 806f126:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 806f128:	68fb      	ldr	r3, [r7, #12]
 806f12a:	2b00      	cmp	r3, #0
 806f12c:	d10a      	bne.n	806f144 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 806f12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f132:	f383 8811 	msr	BASEPRI, r3
 806f136:	f3bf 8f6f 	isb	sy
 806f13a:	f3bf 8f4f 	dsb	sy
 806f13e:	61bb      	str	r3, [r7, #24]
}
 806f140:	bf00      	nop
 806f142:	e7fe      	b.n	806f142 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 806f144:	68ba      	ldr	r2, [r7, #8]
 806f146:	68fb      	ldr	r3, [r7, #12]
 806f148:	429a      	cmp	r2, r3
 806f14a:	d90a      	bls.n	806f162 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 806f14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f150:	f383 8811 	msr	BASEPRI, r3
 806f154:	f3bf 8f6f 	isb	sy
 806f158:	f3bf 8f4f 	dsb	sy
 806f15c:	617b      	str	r3, [r7, #20]
}
 806f15e:	bf00      	nop
 806f160:	e7fe      	b.n	806f160 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 806f162:	2302      	movs	r3, #2
 806f164:	9300      	str	r3, [sp, #0]
 806f166:	687b      	ldr	r3, [r7, #4]
 806f168:	2200      	movs	r2, #0
 806f16a:	2100      	movs	r1, #0
 806f16c:	68f8      	ldr	r0, [r7, #12]
 806f16e:	f7ff fe49 	bl	806ee04 <xQueueGenericCreateStatic>
 806f172:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 806f174:	69fb      	ldr	r3, [r7, #28]
 806f176:	2b00      	cmp	r3, #0
 806f178:	d002      	beq.n	806f180 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 806f17a:	69fb      	ldr	r3, [r7, #28]
 806f17c:	68ba      	ldr	r2, [r7, #8]
 806f17e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 806f180:	69fb      	ldr	r3, [r7, #28]
	}
 806f182:	4618      	mov	r0, r3
 806f184:	3720      	adds	r7, #32
 806f186:	46bd      	mov	sp, r7
 806f188:	bd80      	pop	{r7, pc}

0806f18a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 806f18a:	b580      	push	{r7, lr}
 806f18c:	b086      	sub	sp, #24
 806f18e:	af00      	add	r7, sp, #0
 806f190:	6078      	str	r0, [r7, #4]
 806f192:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 806f194:	687b      	ldr	r3, [r7, #4]
 806f196:	2b00      	cmp	r3, #0
 806f198:	d10a      	bne.n	806f1b0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 806f19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f19e:	f383 8811 	msr	BASEPRI, r3
 806f1a2:	f3bf 8f6f 	isb	sy
 806f1a6:	f3bf 8f4f 	dsb	sy
 806f1aa:	613b      	str	r3, [r7, #16]
}
 806f1ac:	bf00      	nop
 806f1ae:	e7fe      	b.n	806f1ae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 806f1b0:	683a      	ldr	r2, [r7, #0]
 806f1b2:	687b      	ldr	r3, [r7, #4]
 806f1b4:	429a      	cmp	r2, r3
 806f1b6:	d90a      	bls.n	806f1ce <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 806f1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f1bc:	f383 8811 	msr	BASEPRI, r3
 806f1c0:	f3bf 8f6f 	isb	sy
 806f1c4:	f3bf 8f4f 	dsb	sy
 806f1c8:	60fb      	str	r3, [r7, #12]
}
 806f1ca:	bf00      	nop
 806f1cc:	e7fe      	b.n	806f1cc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 806f1ce:	2202      	movs	r2, #2
 806f1d0:	2100      	movs	r1, #0
 806f1d2:	6878      	ldr	r0, [r7, #4]
 806f1d4:	f7ff fe8e 	bl	806eef4 <xQueueGenericCreate>
 806f1d8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 806f1da:	697b      	ldr	r3, [r7, #20]
 806f1dc:	2b00      	cmp	r3, #0
 806f1de:	d002      	beq.n	806f1e6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 806f1e0:	697b      	ldr	r3, [r7, #20]
 806f1e2:	683a      	ldr	r2, [r7, #0]
 806f1e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 806f1e6:	697b      	ldr	r3, [r7, #20]
	}
 806f1e8:	4618      	mov	r0, r3
 806f1ea:	3718      	adds	r7, #24
 806f1ec:	46bd      	mov	sp, r7
 806f1ee:	bd80      	pop	{r7, pc}

0806f1f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 806f1f0:	b580      	push	{r7, lr}
 806f1f2:	b08e      	sub	sp, #56	; 0x38
 806f1f4:	af00      	add	r7, sp, #0
 806f1f6:	60f8      	str	r0, [r7, #12]
 806f1f8:	60b9      	str	r1, [r7, #8]
 806f1fa:	607a      	str	r2, [r7, #4]
 806f1fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 806f1fe:	2300      	movs	r3, #0
 806f200:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806f202:	68fb      	ldr	r3, [r7, #12]
 806f204:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 806f206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f208:	2b00      	cmp	r3, #0
 806f20a:	d10a      	bne.n	806f222 <xQueueGenericSend+0x32>
	__asm volatile
 806f20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f210:	f383 8811 	msr	BASEPRI, r3
 806f214:	f3bf 8f6f 	isb	sy
 806f218:	f3bf 8f4f 	dsb	sy
 806f21c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 806f21e:	bf00      	nop
 806f220:	e7fe      	b.n	806f220 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806f222:	68bb      	ldr	r3, [r7, #8]
 806f224:	2b00      	cmp	r3, #0
 806f226:	d103      	bne.n	806f230 <xQueueGenericSend+0x40>
 806f228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f22c:	2b00      	cmp	r3, #0
 806f22e:	d101      	bne.n	806f234 <xQueueGenericSend+0x44>
 806f230:	2301      	movs	r3, #1
 806f232:	e000      	b.n	806f236 <xQueueGenericSend+0x46>
 806f234:	2300      	movs	r3, #0
 806f236:	2b00      	cmp	r3, #0
 806f238:	d10a      	bne.n	806f250 <xQueueGenericSend+0x60>
	__asm volatile
 806f23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f23e:	f383 8811 	msr	BASEPRI, r3
 806f242:	f3bf 8f6f 	isb	sy
 806f246:	f3bf 8f4f 	dsb	sy
 806f24a:	627b      	str	r3, [r7, #36]	; 0x24
}
 806f24c:	bf00      	nop
 806f24e:	e7fe      	b.n	806f24e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 806f250:	683b      	ldr	r3, [r7, #0]
 806f252:	2b02      	cmp	r3, #2
 806f254:	d103      	bne.n	806f25e <xQueueGenericSend+0x6e>
 806f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f25a:	2b01      	cmp	r3, #1
 806f25c:	d101      	bne.n	806f262 <xQueueGenericSend+0x72>
 806f25e:	2301      	movs	r3, #1
 806f260:	e000      	b.n	806f264 <xQueueGenericSend+0x74>
 806f262:	2300      	movs	r3, #0
 806f264:	2b00      	cmp	r3, #0
 806f266:	d10a      	bne.n	806f27e <xQueueGenericSend+0x8e>
	__asm volatile
 806f268:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f26c:	f383 8811 	msr	BASEPRI, r3
 806f270:	f3bf 8f6f 	isb	sy
 806f274:	f3bf 8f4f 	dsb	sy
 806f278:	623b      	str	r3, [r7, #32]
}
 806f27a:	bf00      	nop
 806f27c:	e7fe      	b.n	806f27c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806f27e:	f001 fc75 	bl	8070b6c <xTaskGetSchedulerState>
 806f282:	4603      	mov	r3, r0
 806f284:	2b00      	cmp	r3, #0
 806f286:	d102      	bne.n	806f28e <xQueueGenericSend+0x9e>
 806f288:	687b      	ldr	r3, [r7, #4]
 806f28a:	2b00      	cmp	r3, #0
 806f28c:	d101      	bne.n	806f292 <xQueueGenericSend+0xa2>
 806f28e:	2301      	movs	r3, #1
 806f290:	e000      	b.n	806f294 <xQueueGenericSend+0xa4>
 806f292:	2300      	movs	r3, #0
 806f294:	2b00      	cmp	r3, #0
 806f296:	d10a      	bne.n	806f2ae <xQueueGenericSend+0xbe>
	__asm volatile
 806f298:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f29c:	f383 8811 	msr	BASEPRI, r3
 806f2a0:	f3bf 8f6f 	isb	sy
 806f2a4:	f3bf 8f4f 	dsb	sy
 806f2a8:	61fb      	str	r3, [r7, #28]
}
 806f2aa:	bf00      	nop
 806f2ac:	e7fe      	b.n	806f2ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806f2ae:	f002 fd71 	bl	8071d94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 806f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f2b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806f2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f2ba:	429a      	cmp	r2, r3
 806f2bc:	d302      	bcc.n	806f2c4 <xQueueGenericSend+0xd4>
 806f2be:	683b      	ldr	r3, [r7, #0]
 806f2c0:	2b02      	cmp	r3, #2
 806f2c2:	d129      	bne.n	806f318 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 806f2c4:	683a      	ldr	r2, [r7, #0]
 806f2c6:	68b9      	ldr	r1, [r7, #8]
 806f2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f2ca:	f000 fc5e 	bl	806fb8a <prvCopyDataToQueue>
 806f2ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806f2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806f2d4:	2b00      	cmp	r3, #0
 806f2d6:	d010      	beq.n	806f2fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806f2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f2da:	3324      	adds	r3, #36	; 0x24
 806f2dc:	4618      	mov	r0, r3
 806f2de:	f001 fa73 	bl	80707c8 <xTaskRemoveFromEventList>
 806f2e2:	4603      	mov	r3, r0
 806f2e4:	2b00      	cmp	r3, #0
 806f2e6:	d013      	beq.n	806f310 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 806f2e8:	4b3f      	ldr	r3, [pc, #252]	; (806f3e8 <xQueueGenericSend+0x1f8>)
 806f2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f2ee:	601a      	str	r2, [r3, #0]
 806f2f0:	f3bf 8f4f 	dsb	sy
 806f2f4:	f3bf 8f6f 	isb	sy
 806f2f8:	e00a      	b.n	806f310 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 806f2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f2fc:	2b00      	cmp	r3, #0
 806f2fe:	d007      	beq.n	806f310 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 806f300:	4b39      	ldr	r3, [pc, #228]	; (806f3e8 <xQueueGenericSend+0x1f8>)
 806f302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f306:	601a      	str	r2, [r3, #0]
 806f308:	f3bf 8f4f 	dsb	sy
 806f30c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 806f310:	f002 fd70 	bl	8071df4 <vPortExitCritical>
				return pdPASS;
 806f314:	2301      	movs	r3, #1
 806f316:	e063      	b.n	806f3e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806f318:	687b      	ldr	r3, [r7, #4]
 806f31a:	2b00      	cmp	r3, #0
 806f31c:	d103      	bne.n	806f326 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 806f31e:	f002 fd69 	bl	8071df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 806f322:	2300      	movs	r3, #0
 806f324:	e05c      	b.n	806f3e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 806f326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806f328:	2b00      	cmp	r3, #0
 806f32a:	d106      	bne.n	806f33a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806f32c:	f107 0314 	add.w	r3, r7, #20
 806f330:	4618      	mov	r0, r3
 806f332:	f001 faad 	bl	8070890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806f336:	2301      	movs	r3, #1
 806f338:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806f33a:	f002 fd5b 	bl	8071df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 806f33e:	f001 f819 	bl	8070374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806f342:	f002 fd27 	bl	8071d94 <vPortEnterCritical>
 806f346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806f34c:	b25b      	sxtb	r3, r3
 806f34e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f352:	d103      	bne.n	806f35c <xQueueGenericSend+0x16c>
 806f354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f356:	2200      	movs	r2, #0
 806f358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806f35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f35e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f362:	b25b      	sxtb	r3, r3
 806f364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f368:	d103      	bne.n	806f372 <xQueueGenericSend+0x182>
 806f36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f36c:	2200      	movs	r2, #0
 806f36e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806f372:	f002 fd3f 	bl	8071df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806f376:	1d3a      	adds	r2, r7, #4
 806f378:	f107 0314 	add.w	r3, r7, #20
 806f37c:	4611      	mov	r1, r2
 806f37e:	4618      	mov	r0, r3
 806f380:	f001 fa9c 	bl	80708bc <xTaskCheckForTimeOut>
 806f384:	4603      	mov	r3, r0
 806f386:	2b00      	cmp	r3, #0
 806f388:	d124      	bne.n	806f3d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 806f38a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f38c:	f000 fcf5 	bl	806fd7a <prvIsQueueFull>
 806f390:	4603      	mov	r3, r0
 806f392:	2b00      	cmp	r3, #0
 806f394:	d018      	beq.n	806f3c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 806f396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f398:	3310      	adds	r3, #16
 806f39a:	687a      	ldr	r2, [r7, #4]
 806f39c:	4611      	mov	r1, r2
 806f39e:	4618      	mov	r0, r3
 806f3a0:	f001 f9c2 	bl	8070728 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 806f3a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f3a6:	f000 fc80 	bl	806fcaa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 806f3aa:	f000 fff1 	bl	8070390 <xTaskResumeAll>
 806f3ae:	4603      	mov	r3, r0
 806f3b0:	2b00      	cmp	r3, #0
 806f3b2:	f47f af7c 	bne.w	806f2ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 806f3b6:	4b0c      	ldr	r3, [pc, #48]	; (806f3e8 <xQueueGenericSend+0x1f8>)
 806f3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f3bc:	601a      	str	r2, [r3, #0]
 806f3be:	f3bf 8f4f 	dsb	sy
 806f3c2:	f3bf 8f6f 	isb	sy
 806f3c6:	e772      	b.n	806f2ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 806f3c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f3ca:	f000 fc6e 	bl	806fcaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806f3ce:	f000 ffdf 	bl	8070390 <xTaskResumeAll>
 806f3d2:	e76c      	b.n	806f2ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 806f3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806f3d6:	f000 fc68 	bl	806fcaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806f3da:	f000 ffd9 	bl	8070390 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 806f3de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 806f3e0:	4618      	mov	r0, r3
 806f3e2:	3738      	adds	r7, #56	; 0x38
 806f3e4:	46bd      	mov	sp, r7
 806f3e6:	bd80      	pop	{r7, pc}
 806f3e8:	e000ed04 	.word	0xe000ed04

0806f3ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 806f3ec:	b580      	push	{r7, lr}
 806f3ee:	b090      	sub	sp, #64	; 0x40
 806f3f0:	af00      	add	r7, sp, #0
 806f3f2:	60f8      	str	r0, [r7, #12]
 806f3f4:	60b9      	str	r1, [r7, #8]
 806f3f6:	607a      	str	r2, [r7, #4]
 806f3f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806f3fa:	68fb      	ldr	r3, [r7, #12]
 806f3fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 806f3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f400:	2b00      	cmp	r3, #0
 806f402:	d10a      	bne.n	806f41a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 806f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f408:	f383 8811 	msr	BASEPRI, r3
 806f40c:	f3bf 8f6f 	isb	sy
 806f410:	f3bf 8f4f 	dsb	sy
 806f414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 806f416:	bf00      	nop
 806f418:	e7fe      	b.n	806f418 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806f41a:	68bb      	ldr	r3, [r7, #8]
 806f41c:	2b00      	cmp	r3, #0
 806f41e:	d103      	bne.n	806f428 <xQueueGenericSendFromISR+0x3c>
 806f420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f424:	2b00      	cmp	r3, #0
 806f426:	d101      	bne.n	806f42c <xQueueGenericSendFromISR+0x40>
 806f428:	2301      	movs	r3, #1
 806f42a:	e000      	b.n	806f42e <xQueueGenericSendFromISR+0x42>
 806f42c:	2300      	movs	r3, #0
 806f42e:	2b00      	cmp	r3, #0
 806f430:	d10a      	bne.n	806f448 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 806f432:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f436:	f383 8811 	msr	BASEPRI, r3
 806f43a:	f3bf 8f6f 	isb	sy
 806f43e:	f3bf 8f4f 	dsb	sy
 806f442:	627b      	str	r3, [r7, #36]	; 0x24
}
 806f444:	bf00      	nop
 806f446:	e7fe      	b.n	806f446 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 806f448:	683b      	ldr	r3, [r7, #0]
 806f44a:	2b02      	cmp	r3, #2
 806f44c:	d103      	bne.n	806f456 <xQueueGenericSendFromISR+0x6a>
 806f44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f452:	2b01      	cmp	r3, #1
 806f454:	d101      	bne.n	806f45a <xQueueGenericSendFromISR+0x6e>
 806f456:	2301      	movs	r3, #1
 806f458:	e000      	b.n	806f45c <xQueueGenericSendFromISR+0x70>
 806f45a:	2300      	movs	r3, #0
 806f45c:	2b00      	cmp	r3, #0
 806f45e:	d10a      	bne.n	806f476 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 806f460:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f464:	f383 8811 	msr	BASEPRI, r3
 806f468:	f3bf 8f6f 	isb	sy
 806f46c:	f3bf 8f4f 	dsb	sy
 806f470:	623b      	str	r3, [r7, #32]
}
 806f472:	bf00      	nop
 806f474:	e7fe      	b.n	806f474 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806f476:	f002 fd6f 	bl	8071f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 806f47a:	f3ef 8211 	mrs	r2, BASEPRI
 806f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f482:	f383 8811 	msr	BASEPRI, r3
 806f486:	f3bf 8f6f 	isb	sy
 806f48a:	f3bf 8f4f 	dsb	sy
 806f48e:	61fa      	str	r2, [r7, #28]
 806f490:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 806f492:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806f494:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 806f496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806f49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f49e:	429a      	cmp	r2, r3
 806f4a0:	d302      	bcc.n	806f4a8 <xQueueGenericSendFromISR+0xbc>
 806f4a2:	683b      	ldr	r3, [r7, #0]
 806f4a4:	2b02      	cmp	r3, #2
 806f4a6:	d12f      	bne.n	806f508 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 806f4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f4aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 806f4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 806f4b8:	683a      	ldr	r2, [r7, #0]
 806f4ba:	68b9      	ldr	r1, [r7, #8]
 806f4bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 806f4be:	f000 fb64 	bl	806fb8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 806f4c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 806f4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f4ca:	d112      	bne.n	806f4f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806f4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806f4d0:	2b00      	cmp	r3, #0
 806f4d2:	d016      	beq.n	806f502 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806f4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f4d6:	3324      	adds	r3, #36	; 0x24
 806f4d8:	4618      	mov	r0, r3
 806f4da:	f001 f975 	bl	80707c8 <xTaskRemoveFromEventList>
 806f4de:	4603      	mov	r3, r0
 806f4e0:	2b00      	cmp	r3, #0
 806f4e2:	d00e      	beq.n	806f502 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 806f4e4:	687b      	ldr	r3, [r7, #4]
 806f4e6:	2b00      	cmp	r3, #0
 806f4e8:	d00b      	beq.n	806f502 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 806f4ea:	687b      	ldr	r3, [r7, #4]
 806f4ec:	2201      	movs	r2, #1
 806f4ee:	601a      	str	r2, [r3, #0]
 806f4f0:	e007      	b.n	806f502 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 806f4f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 806f4f6:	3301      	adds	r3, #1
 806f4f8:	b2db      	uxtb	r3, r3
 806f4fa:	b25a      	sxtb	r2, r3
 806f4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806f4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 806f502:	2301      	movs	r3, #1
 806f504:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 806f506:	e001      	b.n	806f50c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 806f508:	2300      	movs	r3, #0
 806f50a:	63fb      	str	r3, [r7, #60]	; 0x3c
 806f50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806f50e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 806f510:	697b      	ldr	r3, [r7, #20]
 806f512:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 806f516:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806f518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 806f51a:	4618      	mov	r0, r3
 806f51c:	3740      	adds	r7, #64	; 0x40
 806f51e:	46bd      	mov	sp, r7
 806f520:	bd80      	pop	{r7, pc}

0806f522 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 806f522:	b580      	push	{r7, lr}
 806f524:	b08e      	sub	sp, #56	; 0x38
 806f526:	af00      	add	r7, sp, #0
 806f528:	6078      	str	r0, [r7, #4]
 806f52a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806f52c:	687b      	ldr	r3, [r7, #4]
 806f52e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 806f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f532:	2b00      	cmp	r3, #0
 806f534:	d10a      	bne.n	806f54c <xQueueGiveFromISR+0x2a>
	__asm volatile
 806f536:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f53a:	f383 8811 	msr	BASEPRI, r3
 806f53e:	f3bf 8f6f 	isb	sy
 806f542:	f3bf 8f4f 	dsb	sy
 806f546:	623b      	str	r3, [r7, #32]
}
 806f548:	bf00      	nop
 806f54a:	e7fe      	b.n	806f54a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 806f54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f550:	2b00      	cmp	r3, #0
 806f552:	d00a      	beq.n	806f56a <xQueueGiveFromISR+0x48>
	__asm volatile
 806f554:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f558:	f383 8811 	msr	BASEPRI, r3
 806f55c:	f3bf 8f6f 	isb	sy
 806f560:	f3bf 8f4f 	dsb	sy
 806f564:	61fb      	str	r3, [r7, #28]
}
 806f566:	bf00      	nop
 806f568:	e7fe      	b.n	806f568 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 806f56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f56c:	681b      	ldr	r3, [r3, #0]
 806f56e:	2b00      	cmp	r3, #0
 806f570:	d103      	bne.n	806f57a <xQueueGiveFromISR+0x58>
 806f572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f574:	689b      	ldr	r3, [r3, #8]
 806f576:	2b00      	cmp	r3, #0
 806f578:	d101      	bne.n	806f57e <xQueueGiveFromISR+0x5c>
 806f57a:	2301      	movs	r3, #1
 806f57c:	e000      	b.n	806f580 <xQueueGiveFromISR+0x5e>
 806f57e:	2300      	movs	r3, #0
 806f580:	2b00      	cmp	r3, #0
 806f582:	d10a      	bne.n	806f59a <xQueueGiveFromISR+0x78>
	__asm volatile
 806f584:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f588:	f383 8811 	msr	BASEPRI, r3
 806f58c:	f3bf 8f6f 	isb	sy
 806f590:	f3bf 8f4f 	dsb	sy
 806f594:	61bb      	str	r3, [r7, #24]
}
 806f596:	bf00      	nop
 806f598:	e7fe      	b.n	806f598 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806f59a:	f002 fcdd 	bl	8071f58 <vPortValidateInterruptPriority>
	__asm volatile
 806f59e:	f3ef 8211 	mrs	r2, BASEPRI
 806f5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f5a6:	f383 8811 	msr	BASEPRI, r3
 806f5aa:	f3bf 8f6f 	isb	sy
 806f5ae:	f3bf 8f4f 	dsb	sy
 806f5b2:	617a      	str	r2, [r7, #20]
 806f5b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 806f5b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806f5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806f5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f5be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 806f5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806f5c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 806f5c6:	429a      	cmp	r2, r3
 806f5c8:	d22b      	bcs.n	806f622 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 806f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f5cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 806f5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f5d6:	1c5a      	adds	r2, r3, #1
 806f5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f5da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 806f5dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 806f5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f5e4:	d112      	bne.n	806f60c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806f5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806f5ea:	2b00      	cmp	r3, #0
 806f5ec:	d016      	beq.n	806f61c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806f5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f5f0:	3324      	adds	r3, #36	; 0x24
 806f5f2:	4618      	mov	r0, r3
 806f5f4:	f001 f8e8 	bl	80707c8 <xTaskRemoveFromEventList>
 806f5f8:	4603      	mov	r3, r0
 806f5fa:	2b00      	cmp	r3, #0
 806f5fc:	d00e      	beq.n	806f61c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 806f5fe:	683b      	ldr	r3, [r7, #0]
 806f600:	2b00      	cmp	r3, #0
 806f602:	d00b      	beq.n	806f61c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 806f604:	683b      	ldr	r3, [r7, #0]
 806f606:	2201      	movs	r2, #1
 806f608:	601a      	str	r2, [r3, #0]
 806f60a:	e007      	b.n	806f61c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 806f60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 806f610:	3301      	adds	r3, #1
 806f612:	b2db      	uxtb	r3, r3
 806f614:	b25a      	sxtb	r2, r3
 806f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 806f61c:	2301      	movs	r3, #1
 806f61e:	637b      	str	r3, [r7, #52]	; 0x34
 806f620:	e001      	b.n	806f626 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 806f622:	2300      	movs	r3, #0
 806f624:	637b      	str	r3, [r7, #52]	; 0x34
 806f626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f628:	60fb      	str	r3, [r7, #12]
	__asm volatile
 806f62a:	68fb      	ldr	r3, [r7, #12]
 806f62c:	f383 8811 	msr	BASEPRI, r3
}
 806f630:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806f632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 806f634:	4618      	mov	r0, r3
 806f636:	3738      	adds	r7, #56	; 0x38
 806f638:	46bd      	mov	sp, r7
 806f63a:	bd80      	pop	{r7, pc}

0806f63c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 806f63c:	b580      	push	{r7, lr}
 806f63e:	b08c      	sub	sp, #48	; 0x30
 806f640:	af00      	add	r7, sp, #0
 806f642:	60f8      	str	r0, [r7, #12]
 806f644:	60b9      	str	r1, [r7, #8]
 806f646:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 806f648:	2300      	movs	r3, #0
 806f64a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806f64c:	68fb      	ldr	r3, [r7, #12]
 806f64e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 806f650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f652:	2b00      	cmp	r3, #0
 806f654:	d10a      	bne.n	806f66c <xQueueReceive+0x30>
	__asm volatile
 806f656:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f65a:	f383 8811 	msr	BASEPRI, r3
 806f65e:	f3bf 8f6f 	isb	sy
 806f662:	f3bf 8f4f 	dsb	sy
 806f666:	623b      	str	r3, [r7, #32]
}
 806f668:	bf00      	nop
 806f66a:	e7fe      	b.n	806f66a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806f66c:	68bb      	ldr	r3, [r7, #8]
 806f66e:	2b00      	cmp	r3, #0
 806f670:	d103      	bne.n	806f67a <xQueueReceive+0x3e>
 806f672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f676:	2b00      	cmp	r3, #0
 806f678:	d101      	bne.n	806f67e <xQueueReceive+0x42>
 806f67a:	2301      	movs	r3, #1
 806f67c:	e000      	b.n	806f680 <xQueueReceive+0x44>
 806f67e:	2300      	movs	r3, #0
 806f680:	2b00      	cmp	r3, #0
 806f682:	d10a      	bne.n	806f69a <xQueueReceive+0x5e>
	__asm volatile
 806f684:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f688:	f383 8811 	msr	BASEPRI, r3
 806f68c:	f3bf 8f6f 	isb	sy
 806f690:	f3bf 8f4f 	dsb	sy
 806f694:	61fb      	str	r3, [r7, #28]
}
 806f696:	bf00      	nop
 806f698:	e7fe      	b.n	806f698 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806f69a:	f001 fa67 	bl	8070b6c <xTaskGetSchedulerState>
 806f69e:	4603      	mov	r3, r0
 806f6a0:	2b00      	cmp	r3, #0
 806f6a2:	d102      	bne.n	806f6aa <xQueueReceive+0x6e>
 806f6a4:	687b      	ldr	r3, [r7, #4]
 806f6a6:	2b00      	cmp	r3, #0
 806f6a8:	d101      	bne.n	806f6ae <xQueueReceive+0x72>
 806f6aa:	2301      	movs	r3, #1
 806f6ac:	e000      	b.n	806f6b0 <xQueueReceive+0x74>
 806f6ae:	2300      	movs	r3, #0
 806f6b0:	2b00      	cmp	r3, #0
 806f6b2:	d10a      	bne.n	806f6ca <xQueueReceive+0x8e>
	__asm volatile
 806f6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f6b8:	f383 8811 	msr	BASEPRI, r3
 806f6bc:	f3bf 8f6f 	isb	sy
 806f6c0:	f3bf 8f4f 	dsb	sy
 806f6c4:	61bb      	str	r3, [r7, #24]
}
 806f6c6:	bf00      	nop
 806f6c8:	e7fe      	b.n	806f6c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806f6ca:	f002 fb63 	bl	8071d94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806f6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f6d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806f6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806f6d6:	2b00      	cmp	r3, #0
 806f6d8:	d01f      	beq.n	806f71a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 806f6da:	68b9      	ldr	r1, [r7, #8]
 806f6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f6de:	f000 fabe 	bl	806fc5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 806f6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806f6e4:	1e5a      	subs	r2, r3, #1
 806f6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f6e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806f6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f6ec:	691b      	ldr	r3, [r3, #16]
 806f6ee:	2b00      	cmp	r3, #0
 806f6f0:	d00f      	beq.n	806f712 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806f6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f6f4:	3310      	adds	r3, #16
 806f6f6:	4618      	mov	r0, r3
 806f6f8:	f001 f866 	bl	80707c8 <xTaskRemoveFromEventList>
 806f6fc:	4603      	mov	r3, r0
 806f6fe:	2b00      	cmp	r3, #0
 806f700:	d007      	beq.n	806f712 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 806f702:	4b3d      	ldr	r3, [pc, #244]	; (806f7f8 <xQueueReceive+0x1bc>)
 806f704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f708:	601a      	str	r2, [r3, #0]
 806f70a:	f3bf 8f4f 	dsb	sy
 806f70e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 806f712:	f002 fb6f 	bl	8071df4 <vPortExitCritical>
				return pdPASS;
 806f716:	2301      	movs	r3, #1
 806f718:	e069      	b.n	806f7ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806f71a:	687b      	ldr	r3, [r7, #4]
 806f71c:	2b00      	cmp	r3, #0
 806f71e:	d103      	bne.n	806f728 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 806f720:	f002 fb68 	bl	8071df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 806f724:	2300      	movs	r3, #0
 806f726:	e062      	b.n	806f7ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 806f728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f72a:	2b00      	cmp	r3, #0
 806f72c:	d106      	bne.n	806f73c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806f72e:	f107 0310 	add.w	r3, r7, #16
 806f732:	4618      	mov	r0, r3
 806f734:	f001 f8ac 	bl	8070890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806f738:	2301      	movs	r3, #1
 806f73a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806f73c:	f002 fb5a 	bl	8071df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 806f740:	f000 fe18 	bl	8070374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806f744:	f002 fb26 	bl	8071d94 <vPortEnterCritical>
 806f748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f74a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806f74e:	b25b      	sxtb	r3, r3
 806f750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f754:	d103      	bne.n	806f75e <xQueueReceive+0x122>
 806f756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f758:	2200      	movs	r2, #0
 806f75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806f75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f764:	b25b      	sxtb	r3, r3
 806f766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f76a:	d103      	bne.n	806f774 <xQueueReceive+0x138>
 806f76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f76e:	2200      	movs	r2, #0
 806f770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806f774:	f002 fb3e 	bl	8071df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806f778:	1d3a      	adds	r2, r7, #4
 806f77a:	f107 0310 	add.w	r3, r7, #16
 806f77e:	4611      	mov	r1, r2
 806f780:	4618      	mov	r0, r3
 806f782:	f001 f89b 	bl	80708bc <xTaskCheckForTimeOut>
 806f786:	4603      	mov	r3, r0
 806f788:	2b00      	cmp	r3, #0
 806f78a:	d123      	bne.n	806f7d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f78c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f78e:	f000 fade 	bl	806fd4e <prvIsQueueEmpty>
 806f792:	4603      	mov	r3, r0
 806f794:	2b00      	cmp	r3, #0
 806f796:	d017      	beq.n	806f7c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 806f798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f79a:	3324      	adds	r3, #36	; 0x24
 806f79c:	687a      	ldr	r2, [r7, #4]
 806f79e:	4611      	mov	r1, r2
 806f7a0:	4618      	mov	r0, r3
 806f7a2:	f000 ffc1 	bl	8070728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 806f7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f7a8:	f000 fa7f 	bl	806fcaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 806f7ac:	f000 fdf0 	bl	8070390 <xTaskResumeAll>
 806f7b0:	4603      	mov	r3, r0
 806f7b2:	2b00      	cmp	r3, #0
 806f7b4:	d189      	bne.n	806f6ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 806f7b6:	4b10      	ldr	r3, [pc, #64]	; (806f7f8 <xQueueReceive+0x1bc>)
 806f7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f7bc:	601a      	str	r2, [r3, #0]
 806f7be:	f3bf 8f4f 	dsb	sy
 806f7c2:	f3bf 8f6f 	isb	sy
 806f7c6:	e780      	b.n	806f6ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 806f7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f7ca:	f000 fa6e 	bl	806fcaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806f7ce:	f000 fddf 	bl	8070390 <xTaskResumeAll>
 806f7d2:	e77a      	b.n	806f6ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 806f7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f7d6:	f000 fa68 	bl	806fcaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806f7da:	f000 fdd9 	bl	8070390 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f7de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 806f7e0:	f000 fab5 	bl	806fd4e <prvIsQueueEmpty>
 806f7e4:	4603      	mov	r3, r0
 806f7e6:	2b00      	cmp	r3, #0
 806f7e8:	f43f af6f 	beq.w	806f6ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 806f7ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 806f7ee:	4618      	mov	r0, r3
 806f7f0:	3730      	adds	r7, #48	; 0x30
 806f7f2:	46bd      	mov	sp, r7
 806f7f4:	bd80      	pop	{r7, pc}
 806f7f6:	bf00      	nop
 806f7f8:	e000ed04 	.word	0xe000ed04

0806f7fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 806f7fc:	b580      	push	{r7, lr}
 806f7fe:	b08e      	sub	sp, #56	; 0x38
 806f800:	af00      	add	r7, sp, #0
 806f802:	6078      	str	r0, [r7, #4]
 806f804:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 806f806:	2300      	movs	r3, #0
 806f808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 806f80a:	687b      	ldr	r3, [r7, #4]
 806f80c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 806f80e:	2300      	movs	r3, #0
 806f810:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 806f812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f814:	2b00      	cmp	r3, #0
 806f816:	d10a      	bne.n	806f82e <xQueueSemaphoreTake+0x32>
	__asm volatile
 806f818:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f81c:	f383 8811 	msr	BASEPRI, r3
 806f820:	f3bf 8f6f 	isb	sy
 806f824:	f3bf 8f4f 	dsb	sy
 806f828:	623b      	str	r3, [r7, #32]
}
 806f82a:	bf00      	nop
 806f82c:	e7fe      	b.n	806f82c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 806f82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806f832:	2b00      	cmp	r3, #0
 806f834:	d00a      	beq.n	806f84c <xQueueSemaphoreTake+0x50>
	__asm volatile
 806f836:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f83a:	f383 8811 	msr	BASEPRI, r3
 806f83e:	f3bf 8f6f 	isb	sy
 806f842:	f3bf 8f4f 	dsb	sy
 806f846:	61fb      	str	r3, [r7, #28]
}
 806f848:	bf00      	nop
 806f84a:	e7fe      	b.n	806f84a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 806f84c:	f001 f98e 	bl	8070b6c <xTaskGetSchedulerState>
 806f850:	4603      	mov	r3, r0
 806f852:	2b00      	cmp	r3, #0
 806f854:	d102      	bne.n	806f85c <xQueueSemaphoreTake+0x60>
 806f856:	683b      	ldr	r3, [r7, #0]
 806f858:	2b00      	cmp	r3, #0
 806f85a:	d101      	bne.n	806f860 <xQueueSemaphoreTake+0x64>
 806f85c:	2301      	movs	r3, #1
 806f85e:	e000      	b.n	806f862 <xQueueSemaphoreTake+0x66>
 806f860:	2300      	movs	r3, #0
 806f862:	2b00      	cmp	r3, #0
 806f864:	d10a      	bne.n	806f87c <xQueueSemaphoreTake+0x80>
	__asm volatile
 806f866:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f86a:	f383 8811 	msr	BASEPRI, r3
 806f86e:	f3bf 8f6f 	isb	sy
 806f872:	f3bf 8f4f 	dsb	sy
 806f876:	61bb      	str	r3, [r7, #24]
}
 806f878:	bf00      	nop
 806f87a:	e7fe      	b.n	806f87a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 806f87c:	f002 fa8a 	bl	8071d94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 806f880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806f884:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 806f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f888:	2b00      	cmp	r3, #0
 806f88a:	d024      	beq.n	806f8d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 806f88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806f88e:	1e5a      	subs	r2, r3, #1
 806f890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f892:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806f894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f896:	681b      	ldr	r3, [r3, #0]
 806f898:	2b00      	cmp	r3, #0
 806f89a:	d104      	bne.n	806f8a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 806f89c:	f001 fadc 	bl	8070e58 <pvTaskIncrementMutexHeldCount>
 806f8a0:	4602      	mov	r2, r0
 806f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f8a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806f8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f8a8:	691b      	ldr	r3, [r3, #16]
 806f8aa:	2b00      	cmp	r3, #0
 806f8ac:	d00f      	beq.n	806f8ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806f8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f8b0:	3310      	adds	r3, #16
 806f8b2:	4618      	mov	r0, r3
 806f8b4:	f000 ff88 	bl	80707c8 <xTaskRemoveFromEventList>
 806f8b8:	4603      	mov	r3, r0
 806f8ba:	2b00      	cmp	r3, #0
 806f8bc:	d007      	beq.n	806f8ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 806f8be:	4b54      	ldr	r3, [pc, #336]	; (806fa10 <xQueueSemaphoreTake+0x214>)
 806f8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f8c4:	601a      	str	r2, [r3, #0]
 806f8c6:	f3bf 8f4f 	dsb	sy
 806f8ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 806f8ce:	f002 fa91 	bl	8071df4 <vPortExitCritical>
				return pdPASS;
 806f8d2:	2301      	movs	r3, #1
 806f8d4:	e097      	b.n	806fa06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 806f8d6:	683b      	ldr	r3, [r7, #0]
 806f8d8:	2b00      	cmp	r3, #0
 806f8da:	d111      	bne.n	806f900 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 806f8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f8de:	2b00      	cmp	r3, #0
 806f8e0:	d00a      	beq.n	806f8f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 806f8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 806f8e6:	f383 8811 	msr	BASEPRI, r3
 806f8ea:	f3bf 8f6f 	isb	sy
 806f8ee:	f3bf 8f4f 	dsb	sy
 806f8f2:	617b      	str	r3, [r7, #20]
}
 806f8f4:	bf00      	nop
 806f8f6:	e7fe      	b.n	806f8f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 806f8f8:	f002 fa7c 	bl	8071df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 806f8fc:	2300      	movs	r3, #0
 806f8fe:	e082      	b.n	806fa06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 806f900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806f902:	2b00      	cmp	r3, #0
 806f904:	d106      	bne.n	806f914 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 806f906:	f107 030c 	add.w	r3, r7, #12
 806f90a:	4618      	mov	r0, r3
 806f90c:	f000 ffc0 	bl	8070890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 806f910:	2301      	movs	r3, #1
 806f912:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 806f914:	f002 fa6e 	bl	8071df4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 806f918:	f000 fd2c 	bl	8070374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 806f91c:	f002 fa3a 	bl	8071d94 <vPortEnterCritical>
 806f920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806f926:	b25b      	sxtb	r3, r3
 806f928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f92c:	d103      	bne.n	806f936 <xQueueSemaphoreTake+0x13a>
 806f92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f930:	2200      	movs	r2, #0
 806f932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806f936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806f93c:	b25b      	sxtb	r3, r3
 806f93e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806f942:	d103      	bne.n	806f94c <xQueueSemaphoreTake+0x150>
 806f944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f946:	2200      	movs	r2, #0
 806f948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806f94c:	f002 fa52 	bl	8071df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 806f950:	463a      	mov	r2, r7
 806f952:	f107 030c 	add.w	r3, r7, #12
 806f956:	4611      	mov	r1, r2
 806f958:	4618      	mov	r0, r3
 806f95a:	f000 ffaf 	bl	80708bc <xTaskCheckForTimeOut>
 806f95e:	4603      	mov	r3, r0
 806f960:	2b00      	cmp	r3, #0
 806f962:	d132      	bne.n	806f9ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f966:	f000 f9f2 	bl	806fd4e <prvIsQueueEmpty>
 806f96a:	4603      	mov	r3, r0
 806f96c:	2b00      	cmp	r3, #0
 806f96e:	d026      	beq.n	806f9be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806f970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f972:	681b      	ldr	r3, [r3, #0]
 806f974:	2b00      	cmp	r3, #0
 806f976:	d109      	bne.n	806f98c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 806f978:	f002 fa0c 	bl	8071d94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 806f97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f97e:	689b      	ldr	r3, [r3, #8]
 806f980:	4618      	mov	r0, r3
 806f982:	f001 f911 	bl	8070ba8 <xTaskPriorityInherit>
 806f986:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 806f988:	f002 fa34 	bl	8071df4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 806f98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f98e:	3324      	adds	r3, #36	; 0x24
 806f990:	683a      	ldr	r2, [r7, #0]
 806f992:	4611      	mov	r1, r2
 806f994:	4618      	mov	r0, r3
 806f996:	f000 fec7 	bl	8070728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 806f99a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f99c:	f000 f985 	bl	806fcaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 806f9a0:	f000 fcf6 	bl	8070390 <xTaskResumeAll>
 806f9a4:	4603      	mov	r3, r0
 806f9a6:	2b00      	cmp	r3, #0
 806f9a8:	f47f af68 	bne.w	806f87c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 806f9ac:	4b18      	ldr	r3, [pc, #96]	; (806fa10 <xQueueSemaphoreTake+0x214>)
 806f9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 806f9b2:	601a      	str	r2, [r3, #0]
 806f9b4:	f3bf 8f4f 	dsb	sy
 806f9b8:	f3bf 8f6f 	isb	sy
 806f9bc:	e75e      	b.n	806f87c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 806f9be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f9c0:	f000 f973 	bl	806fcaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 806f9c4:	f000 fce4 	bl	8070390 <xTaskResumeAll>
 806f9c8:	e758      	b.n	806f87c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 806f9ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f9cc:	f000 f96d 	bl	806fcaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 806f9d0:	f000 fcde 	bl	8070390 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 806f9d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f9d6:	f000 f9ba 	bl	806fd4e <prvIsQueueEmpty>
 806f9da:	4603      	mov	r3, r0
 806f9dc:	2b00      	cmp	r3, #0
 806f9de:	f43f af4d 	beq.w	806f87c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 806f9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806f9e4:	2b00      	cmp	r3, #0
 806f9e6:	d00d      	beq.n	806fa04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 806f9e8:	f002 f9d4 	bl	8071d94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 806f9ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 806f9ee:	f000 f8b4 	bl	806fb5a <prvGetDisinheritPriorityAfterTimeout>
 806f9f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 806f9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806f9f6:	689b      	ldr	r3, [r3, #8]
 806f9f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 806f9fa:	4618      	mov	r0, r3
 806f9fc:	f001 f9aa 	bl	8070d54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 806fa00:	f002 f9f8 	bl	8071df4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 806fa04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 806fa06:	4618      	mov	r0, r3
 806fa08:	3738      	adds	r7, #56	; 0x38
 806fa0a:	46bd      	mov	sp, r7
 806fa0c:	bd80      	pop	{r7, pc}
 806fa0e:	bf00      	nop
 806fa10:	e000ed04 	.word	0xe000ed04

0806fa14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 806fa14:	b580      	push	{r7, lr}
 806fa16:	b08e      	sub	sp, #56	; 0x38
 806fa18:	af00      	add	r7, sp, #0
 806fa1a:	60f8      	str	r0, [r7, #12]
 806fa1c:	60b9      	str	r1, [r7, #8]
 806fa1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 806fa20:	68fb      	ldr	r3, [r7, #12]
 806fa22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 806fa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fa26:	2b00      	cmp	r3, #0
 806fa28:	d10a      	bne.n	806fa40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 806fa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fa2e:	f383 8811 	msr	BASEPRI, r3
 806fa32:	f3bf 8f6f 	isb	sy
 806fa36:	f3bf 8f4f 	dsb	sy
 806fa3a:	623b      	str	r3, [r7, #32]
}
 806fa3c:	bf00      	nop
 806fa3e:	e7fe      	b.n	806fa3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 806fa40:	68bb      	ldr	r3, [r7, #8]
 806fa42:	2b00      	cmp	r3, #0
 806fa44:	d103      	bne.n	806fa4e <xQueueReceiveFromISR+0x3a>
 806fa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fa48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fa4a:	2b00      	cmp	r3, #0
 806fa4c:	d101      	bne.n	806fa52 <xQueueReceiveFromISR+0x3e>
 806fa4e:	2301      	movs	r3, #1
 806fa50:	e000      	b.n	806fa54 <xQueueReceiveFromISR+0x40>
 806fa52:	2300      	movs	r3, #0
 806fa54:	2b00      	cmp	r3, #0
 806fa56:	d10a      	bne.n	806fa6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 806fa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fa5c:	f383 8811 	msr	BASEPRI, r3
 806fa60:	f3bf 8f6f 	isb	sy
 806fa64:	f3bf 8f4f 	dsb	sy
 806fa68:	61fb      	str	r3, [r7, #28]
}
 806fa6a:	bf00      	nop
 806fa6c:	e7fe      	b.n	806fa6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 806fa6e:	f002 fa73 	bl	8071f58 <vPortValidateInterruptPriority>
	__asm volatile
 806fa72:	f3ef 8211 	mrs	r2, BASEPRI
 806fa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fa7a:	f383 8811 	msr	BASEPRI, r3
 806fa7e:	f3bf 8f6f 	isb	sy
 806fa82:	f3bf 8f4f 	dsb	sy
 806fa86:	61ba      	str	r2, [r7, #24]
 806fa88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 806fa8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 806fa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806fa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806fa92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806fa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806fa96:	2b00      	cmp	r3, #0
 806fa98:	d02f      	beq.n	806fafa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 806fa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fa9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806faa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 806faa4:	68b9      	ldr	r1, [r7, #8]
 806faa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 806faa8:	f000 f8d9 	bl	806fc5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 806faac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806faae:	1e5a      	subs	r2, r3, #1
 806fab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fab2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 806fab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 806fab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806fabc:	d112      	bne.n	806fae4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806fabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fac0:	691b      	ldr	r3, [r3, #16]
 806fac2:	2b00      	cmp	r3, #0
 806fac4:	d016      	beq.n	806faf4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806fac8:	3310      	adds	r3, #16
 806faca:	4618      	mov	r0, r3
 806facc:	f000 fe7c 	bl	80707c8 <xTaskRemoveFromEventList>
 806fad0:	4603      	mov	r3, r0
 806fad2:	2b00      	cmp	r3, #0
 806fad4:	d00e      	beq.n	806faf4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 806fad6:	687b      	ldr	r3, [r7, #4]
 806fad8:	2b00      	cmp	r3, #0
 806fada:	d00b      	beq.n	806faf4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 806fadc:	687b      	ldr	r3, [r7, #4]
 806fade:	2201      	movs	r2, #1
 806fae0:	601a      	str	r2, [r3, #0]
 806fae2:	e007      	b.n	806faf4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 806fae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 806fae8:	3301      	adds	r3, #1
 806faea:	b2db      	uxtb	r3, r3
 806faec:	b25a      	sxtb	r2, r3
 806faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806faf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 806faf4:	2301      	movs	r3, #1
 806faf6:	637b      	str	r3, [r7, #52]	; 0x34
 806faf8:	e001      	b.n	806fafe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 806fafa:	2300      	movs	r3, #0
 806fafc:	637b      	str	r3, [r7, #52]	; 0x34
 806fafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806fb00:	613b      	str	r3, [r7, #16]
	__asm volatile
 806fb02:	693b      	ldr	r3, [r7, #16]
 806fb04:	f383 8811 	msr	BASEPRI, r3
}
 806fb08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 806fb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 806fb0c:	4618      	mov	r0, r3
 806fb0e:	3738      	adds	r7, #56	; 0x38
 806fb10:	46bd      	mov	sp, r7
 806fb12:	bd80      	pop	{r7, pc}

0806fb14 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 806fb14:	b580      	push	{r7, lr}
 806fb16:	b084      	sub	sp, #16
 806fb18:	af00      	add	r7, sp, #0
 806fb1a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 806fb1c:	687b      	ldr	r3, [r7, #4]
 806fb1e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 806fb20:	68fb      	ldr	r3, [r7, #12]
 806fb22:	2b00      	cmp	r3, #0
 806fb24:	d10a      	bne.n	806fb3c <vQueueDelete+0x28>
	__asm volatile
 806fb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fb2a:	f383 8811 	msr	BASEPRI, r3
 806fb2e:	f3bf 8f6f 	isb	sy
 806fb32:	f3bf 8f4f 	dsb	sy
 806fb36:	60bb      	str	r3, [r7, #8]
}
 806fb38:	bf00      	nop
 806fb3a:	e7fe      	b.n	806fb3a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 806fb3c:	68f8      	ldr	r0, [r7, #12]
 806fb3e:	f000 f95f 	bl	806fe00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 806fb42:	68fb      	ldr	r3, [r7, #12]
 806fb44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 806fb48:	2b00      	cmp	r3, #0
 806fb4a:	d102      	bne.n	806fb52 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 806fb4c:	68f8      	ldr	r0, [r7, #12]
 806fb4e:	f002 fb0f 	bl	8072170 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 806fb52:	bf00      	nop
 806fb54:	3710      	adds	r7, #16
 806fb56:	46bd      	mov	sp, r7
 806fb58:	bd80      	pop	{r7, pc}

0806fb5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 806fb5a:	b480      	push	{r7}
 806fb5c:	b085      	sub	sp, #20
 806fb5e:	af00      	add	r7, sp, #0
 806fb60:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 806fb62:	687b      	ldr	r3, [r7, #4]
 806fb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806fb66:	2b00      	cmp	r3, #0
 806fb68:	d006      	beq.n	806fb78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 806fb6a:	687b      	ldr	r3, [r7, #4]
 806fb6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 806fb6e:	681b      	ldr	r3, [r3, #0]
 806fb70:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 806fb74:	60fb      	str	r3, [r7, #12]
 806fb76:	e001      	b.n	806fb7c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 806fb78:	2300      	movs	r3, #0
 806fb7a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 806fb7c:	68fb      	ldr	r3, [r7, #12]
	}
 806fb7e:	4618      	mov	r0, r3
 806fb80:	3714      	adds	r7, #20
 806fb82:	46bd      	mov	sp, r7
 806fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 806fb88:	4770      	bx	lr

0806fb8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 806fb8a:	b580      	push	{r7, lr}
 806fb8c:	b086      	sub	sp, #24
 806fb8e:	af00      	add	r7, sp, #0
 806fb90:	60f8      	str	r0, [r7, #12]
 806fb92:	60b9      	str	r1, [r7, #8]
 806fb94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 806fb96:	2300      	movs	r3, #0
 806fb98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 806fb9a:	68fb      	ldr	r3, [r7, #12]
 806fb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806fb9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 806fba0:	68fb      	ldr	r3, [r7, #12]
 806fba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fba4:	2b00      	cmp	r3, #0
 806fba6:	d10d      	bne.n	806fbc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 806fba8:	68fb      	ldr	r3, [r7, #12]
 806fbaa:	681b      	ldr	r3, [r3, #0]
 806fbac:	2b00      	cmp	r3, #0
 806fbae:	d14d      	bne.n	806fc4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 806fbb0:	68fb      	ldr	r3, [r7, #12]
 806fbb2:	689b      	ldr	r3, [r3, #8]
 806fbb4:	4618      	mov	r0, r3
 806fbb6:	f001 f85f 	bl	8070c78 <xTaskPriorityDisinherit>
 806fbba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 806fbbc:	68fb      	ldr	r3, [r7, #12]
 806fbbe:	2200      	movs	r2, #0
 806fbc0:	609a      	str	r2, [r3, #8]
 806fbc2:	e043      	b.n	806fc4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 806fbc4:	687b      	ldr	r3, [r7, #4]
 806fbc6:	2b00      	cmp	r3, #0
 806fbc8:	d119      	bne.n	806fbfe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 806fbca:	68fb      	ldr	r3, [r7, #12]
 806fbcc:	6858      	ldr	r0, [r3, #4]
 806fbce:	68fb      	ldr	r3, [r7, #12]
 806fbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fbd2:	461a      	mov	r2, r3
 806fbd4:	68b9      	ldr	r1, [r7, #8]
 806fbd6:	f002 fd0c 	bl	80725f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 806fbda:	68fb      	ldr	r3, [r7, #12]
 806fbdc:	685a      	ldr	r2, [r3, #4]
 806fbde:	68fb      	ldr	r3, [r7, #12]
 806fbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fbe2:	441a      	add	r2, r3
 806fbe4:	68fb      	ldr	r3, [r7, #12]
 806fbe6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 806fbe8:	68fb      	ldr	r3, [r7, #12]
 806fbea:	685a      	ldr	r2, [r3, #4]
 806fbec:	68fb      	ldr	r3, [r7, #12]
 806fbee:	689b      	ldr	r3, [r3, #8]
 806fbf0:	429a      	cmp	r2, r3
 806fbf2:	d32b      	bcc.n	806fc4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 806fbf4:	68fb      	ldr	r3, [r7, #12]
 806fbf6:	681a      	ldr	r2, [r3, #0]
 806fbf8:	68fb      	ldr	r3, [r7, #12]
 806fbfa:	605a      	str	r2, [r3, #4]
 806fbfc:	e026      	b.n	806fc4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 806fbfe:	68fb      	ldr	r3, [r7, #12]
 806fc00:	68d8      	ldr	r0, [r3, #12]
 806fc02:	68fb      	ldr	r3, [r7, #12]
 806fc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fc06:	461a      	mov	r2, r3
 806fc08:	68b9      	ldr	r1, [r7, #8]
 806fc0a:	f002 fcf2 	bl	80725f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 806fc0e:	68fb      	ldr	r3, [r7, #12]
 806fc10:	68da      	ldr	r2, [r3, #12]
 806fc12:	68fb      	ldr	r3, [r7, #12]
 806fc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fc16:	425b      	negs	r3, r3
 806fc18:	441a      	add	r2, r3
 806fc1a:	68fb      	ldr	r3, [r7, #12]
 806fc1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 806fc1e:	68fb      	ldr	r3, [r7, #12]
 806fc20:	68da      	ldr	r2, [r3, #12]
 806fc22:	68fb      	ldr	r3, [r7, #12]
 806fc24:	681b      	ldr	r3, [r3, #0]
 806fc26:	429a      	cmp	r2, r3
 806fc28:	d207      	bcs.n	806fc3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 806fc2a:	68fb      	ldr	r3, [r7, #12]
 806fc2c:	689a      	ldr	r2, [r3, #8]
 806fc2e:	68fb      	ldr	r3, [r7, #12]
 806fc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fc32:	425b      	negs	r3, r3
 806fc34:	441a      	add	r2, r3
 806fc36:	68fb      	ldr	r3, [r7, #12]
 806fc38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 806fc3a:	687b      	ldr	r3, [r7, #4]
 806fc3c:	2b02      	cmp	r3, #2
 806fc3e:	d105      	bne.n	806fc4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 806fc40:	693b      	ldr	r3, [r7, #16]
 806fc42:	2b00      	cmp	r3, #0
 806fc44:	d002      	beq.n	806fc4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 806fc46:	693b      	ldr	r3, [r7, #16]
 806fc48:	3b01      	subs	r3, #1
 806fc4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 806fc4c:	693b      	ldr	r3, [r7, #16]
 806fc4e:	1c5a      	adds	r2, r3, #1
 806fc50:	68fb      	ldr	r3, [r7, #12]
 806fc52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 806fc54:	697b      	ldr	r3, [r7, #20]
}
 806fc56:	4618      	mov	r0, r3
 806fc58:	3718      	adds	r7, #24
 806fc5a:	46bd      	mov	sp, r7
 806fc5c:	bd80      	pop	{r7, pc}

0806fc5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 806fc5e:	b580      	push	{r7, lr}
 806fc60:	b082      	sub	sp, #8
 806fc62:	af00      	add	r7, sp, #0
 806fc64:	6078      	str	r0, [r7, #4]
 806fc66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 806fc68:	687b      	ldr	r3, [r7, #4]
 806fc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fc6c:	2b00      	cmp	r3, #0
 806fc6e:	d018      	beq.n	806fca2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 806fc70:	687b      	ldr	r3, [r7, #4]
 806fc72:	68da      	ldr	r2, [r3, #12]
 806fc74:	687b      	ldr	r3, [r7, #4]
 806fc76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fc78:	441a      	add	r2, r3
 806fc7a:	687b      	ldr	r3, [r7, #4]
 806fc7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 806fc7e:	687b      	ldr	r3, [r7, #4]
 806fc80:	68da      	ldr	r2, [r3, #12]
 806fc82:	687b      	ldr	r3, [r7, #4]
 806fc84:	689b      	ldr	r3, [r3, #8]
 806fc86:	429a      	cmp	r2, r3
 806fc88:	d303      	bcc.n	806fc92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 806fc8a:	687b      	ldr	r3, [r7, #4]
 806fc8c:	681a      	ldr	r2, [r3, #0]
 806fc8e:	687b      	ldr	r3, [r7, #4]
 806fc90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 806fc92:	687b      	ldr	r3, [r7, #4]
 806fc94:	68d9      	ldr	r1, [r3, #12]
 806fc96:	687b      	ldr	r3, [r7, #4]
 806fc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 806fc9a:	461a      	mov	r2, r3
 806fc9c:	6838      	ldr	r0, [r7, #0]
 806fc9e:	f002 fca8 	bl	80725f2 <memcpy>
	}
}
 806fca2:	bf00      	nop
 806fca4:	3708      	adds	r7, #8
 806fca6:	46bd      	mov	sp, r7
 806fca8:	bd80      	pop	{r7, pc}

0806fcaa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 806fcaa:	b580      	push	{r7, lr}
 806fcac:	b084      	sub	sp, #16
 806fcae:	af00      	add	r7, sp, #0
 806fcb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 806fcb2:	f002 f86f 	bl	8071d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 806fcb6:	687b      	ldr	r3, [r7, #4]
 806fcb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806fcbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 806fcbe:	e011      	b.n	806fce4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 806fcc0:	687b      	ldr	r3, [r7, #4]
 806fcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 806fcc4:	2b00      	cmp	r3, #0
 806fcc6:	d012      	beq.n	806fcee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 806fcc8:	687b      	ldr	r3, [r7, #4]
 806fcca:	3324      	adds	r3, #36	; 0x24
 806fccc:	4618      	mov	r0, r3
 806fcce:	f000 fd7b 	bl	80707c8 <xTaskRemoveFromEventList>
 806fcd2:	4603      	mov	r3, r0
 806fcd4:	2b00      	cmp	r3, #0
 806fcd6:	d001      	beq.n	806fcdc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 806fcd8:	f000 fe52 	bl	8070980 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 806fcdc:	7bfb      	ldrb	r3, [r7, #15]
 806fcde:	3b01      	subs	r3, #1
 806fce0:	b2db      	uxtb	r3, r3
 806fce2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 806fce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 806fce8:	2b00      	cmp	r3, #0
 806fcea:	dce9      	bgt.n	806fcc0 <prvUnlockQueue+0x16>
 806fcec:	e000      	b.n	806fcf0 <prvUnlockQueue+0x46>
					break;
 806fcee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 806fcf0:	687b      	ldr	r3, [r7, #4]
 806fcf2:	22ff      	movs	r2, #255	; 0xff
 806fcf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 806fcf8:	f002 f87c 	bl	8071df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 806fcfc:	f002 f84a 	bl	8071d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 806fd00:	687b      	ldr	r3, [r7, #4]
 806fd02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806fd06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 806fd08:	e011      	b.n	806fd2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 806fd0a:	687b      	ldr	r3, [r7, #4]
 806fd0c:	691b      	ldr	r3, [r3, #16]
 806fd0e:	2b00      	cmp	r3, #0
 806fd10:	d012      	beq.n	806fd38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 806fd12:	687b      	ldr	r3, [r7, #4]
 806fd14:	3310      	adds	r3, #16
 806fd16:	4618      	mov	r0, r3
 806fd18:	f000 fd56 	bl	80707c8 <xTaskRemoveFromEventList>
 806fd1c:	4603      	mov	r3, r0
 806fd1e:	2b00      	cmp	r3, #0
 806fd20:	d001      	beq.n	806fd26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 806fd22:	f000 fe2d 	bl	8070980 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 806fd26:	7bbb      	ldrb	r3, [r7, #14]
 806fd28:	3b01      	subs	r3, #1
 806fd2a:	b2db      	uxtb	r3, r3
 806fd2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 806fd2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 806fd32:	2b00      	cmp	r3, #0
 806fd34:	dce9      	bgt.n	806fd0a <prvUnlockQueue+0x60>
 806fd36:	e000      	b.n	806fd3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 806fd38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 806fd3a:	687b      	ldr	r3, [r7, #4]
 806fd3c:	22ff      	movs	r2, #255	; 0xff
 806fd3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 806fd42:	f002 f857 	bl	8071df4 <vPortExitCritical>
}
 806fd46:	bf00      	nop
 806fd48:	3710      	adds	r7, #16
 806fd4a:	46bd      	mov	sp, r7
 806fd4c:	bd80      	pop	{r7, pc}

0806fd4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 806fd4e:	b580      	push	{r7, lr}
 806fd50:	b084      	sub	sp, #16
 806fd52:	af00      	add	r7, sp, #0
 806fd54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 806fd56:	f002 f81d 	bl	8071d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 806fd5a:	687b      	ldr	r3, [r7, #4]
 806fd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806fd5e:	2b00      	cmp	r3, #0
 806fd60:	d102      	bne.n	806fd68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 806fd62:	2301      	movs	r3, #1
 806fd64:	60fb      	str	r3, [r7, #12]
 806fd66:	e001      	b.n	806fd6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 806fd68:	2300      	movs	r3, #0
 806fd6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 806fd6c:	f002 f842 	bl	8071df4 <vPortExitCritical>

	return xReturn;
 806fd70:	68fb      	ldr	r3, [r7, #12]
}
 806fd72:	4618      	mov	r0, r3
 806fd74:	3710      	adds	r7, #16
 806fd76:	46bd      	mov	sp, r7
 806fd78:	bd80      	pop	{r7, pc}

0806fd7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 806fd7a:	b580      	push	{r7, lr}
 806fd7c:	b084      	sub	sp, #16
 806fd7e:	af00      	add	r7, sp, #0
 806fd80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 806fd82:	f002 f807 	bl	8071d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 806fd86:	687b      	ldr	r3, [r7, #4]
 806fd88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 806fd8a:	687b      	ldr	r3, [r7, #4]
 806fd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 806fd8e:	429a      	cmp	r2, r3
 806fd90:	d102      	bne.n	806fd98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 806fd92:	2301      	movs	r3, #1
 806fd94:	60fb      	str	r3, [r7, #12]
 806fd96:	e001      	b.n	806fd9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 806fd98:	2300      	movs	r3, #0
 806fd9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 806fd9c:	f002 f82a 	bl	8071df4 <vPortExitCritical>

	return xReturn;
 806fda0:	68fb      	ldr	r3, [r7, #12]
}
 806fda2:	4618      	mov	r0, r3
 806fda4:	3710      	adds	r7, #16
 806fda6:	46bd      	mov	sp, r7
 806fda8:	bd80      	pop	{r7, pc}
	...

0806fdac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 806fdac:	b480      	push	{r7}
 806fdae:	b085      	sub	sp, #20
 806fdb0:	af00      	add	r7, sp, #0
 806fdb2:	6078      	str	r0, [r7, #4]
 806fdb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806fdb6:	2300      	movs	r3, #0
 806fdb8:	60fb      	str	r3, [r7, #12]
 806fdba:	e014      	b.n	806fde6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 806fdbc:	4a0f      	ldr	r2, [pc, #60]	; (806fdfc <vQueueAddToRegistry+0x50>)
 806fdbe:	68fb      	ldr	r3, [r7, #12]
 806fdc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 806fdc4:	2b00      	cmp	r3, #0
 806fdc6:	d10b      	bne.n	806fde0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 806fdc8:	490c      	ldr	r1, [pc, #48]	; (806fdfc <vQueueAddToRegistry+0x50>)
 806fdca:	68fb      	ldr	r3, [r7, #12]
 806fdcc:	683a      	ldr	r2, [r7, #0]
 806fdce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 806fdd2:	4a0a      	ldr	r2, [pc, #40]	; (806fdfc <vQueueAddToRegistry+0x50>)
 806fdd4:	68fb      	ldr	r3, [r7, #12]
 806fdd6:	00db      	lsls	r3, r3, #3
 806fdd8:	4413      	add	r3, r2
 806fdda:	687a      	ldr	r2, [r7, #4]
 806fddc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 806fdde:	e006      	b.n	806fdee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806fde0:	68fb      	ldr	r3, [r7, #12]
 806fde2:	3301      	adds	r3, #1
 806fde4:	60fb      	str	r3, [r7, #12]
 806fde6:	68fb      	ldr	r3, [r7, #12]
 806fde8:	2b07      	cmp	r3, #7
 806fdea:	d9e7      	bls.n	806fdbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 806fdec:	bf00      	nop
 806fdee:	bf00      	nop
 806fdf0:	3714      	adds	r7, #20
 806fdf2:	46bd      	mov	sp, r7
 806fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 806fdf8:	4770      	bx	lr
 806fdfa:	bf00      	nop
 806fdfc:	20005ce8 	.word	0x20005ce8

0806fe00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 806fe00:	b480      	push	{r7}
 806fe02:	b085      	sub	sp, #20
 806fe04:	af00      	add	r7, sp, #0
 806fe06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806fe08:	2300      	movs	r3, #0
 806fe0a:	60fb      	str	r3, [r7, #12]
 806fe0c:	e016      	b.n	806fe3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 806fe0e:	4a10      	ldr	r2, [pc, #64]	; (806fe50 <vQueueUnregisterQueue+0x50>)
 806fe10:	68fb      	ldr	r3, [r7, #12]
 806fe12:	00db      	lsls	r3, r3, #3
 806fe14:	4413      	add	r3, r2
 806fe16:	685b      	ldr	r3, [r3, #4]
 806fe18:	687a      	ldr	r2, [r7, #4]
 806fe1a:	429a      	cmp	r2, r3
 806fe1c:	d10b      	bne.n	806fe36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 806fe1e:	4a0c      	ldr	r2, [pc, #48]	; (806fe50 <vQueueUnregisterQueue+0x50>)
 806fe20:	68fb      	ldr	r3, [r7, #12]
 806fe22:	2100      	movs	r1, #0
 806fe24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 806fe28:	4a09      	ldr	r2, [pc, #36]	; (806fe50 <vQueueUnregisterQueue+0x50>)
 806fe2a:	68fb      	ldr	r3, [r7, #12]
 806fe2c:	00db      	lsls	r3, r3, #3
 806fe2e:	4413      	add	r3, r2
 806fe30:	2200      	movs	r2, #0
 806fe32:	605a      	str	r2, [r3, #4]
				break;
 806fe34:	e006      	b.n	806fe44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 806fe36:	68fb      	ldr	r3, [r7, #12]
 806fe38:	3301      	adds	r3, #1
 806fe3a:	60fb      	str	r3, [r7, #12]
 806fe3c:	68fb      	ldr	r3, [r7, #12]
 806fe3e:	2b07      	cmp	r3, #7
 806fe40:	d9e5      	bls.n	806fe0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 806fe42:	bf00      	nop
 806fe44:	bf00      	nop
 806fe46:	3714      	adds	r7, #20
 806fe48:	46bd      	mov	sp, r7
 806fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806fe4e:	4770      	bx	lr
 806fe50:	20005ce8 	.word	0x20005ce8

0806fe54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 806fe54:	b580      	push	{r7, lr}
 806fe56:	b086      	sub	sp, #24
 806fe58:	af00      	add	r7, sp, #0
 806fe5a:	60f8      	str	r0, [r7, #12]
 806fe5c:	60b9      	str	r1, [r7, #8]
 806fe5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 806fe60:	68fb      	ldr	r3, [r7, #12]
 806fe62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 806fe64:	f001 ff96 	bl	8071d94 <vPortEnterCritical>
 806fe68:	697b      	ldr	r3, [r7, #20]
 806fe6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 806fe6e:	b25b      	sxtb	r3, r3
 806fe70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806fe74:	d103      	bne.n	806fe7e <vQueueWaitForMessageRestricted+0x2a>
 806fe76:	697b      	ldr	r3, [r7, #20]
 806fe78:	2200      	movs	r2, #0
 806fe7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 806fe7e:	697b      	ldr	r3, [r7, #20]
 806fe80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 806fe84:	b25b      	sxtb	r3, r3
 806fe86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 806fe8a:	d103      	bne.n	806fe94 <vQueueWaitForMessageRestricted+0x40>
 806fe8c:	697b      	ldr	r3, [r7, #20]
 806fe8e:	2200      	movs	r2, #0
 806fe90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 806fe94:	f001 ffae 	bl	8071df4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 806fe98:	697b      	ldr	r3, [r7, #20]
 806fe9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 806fe9c:	2b00      	cmp	r3, #0
 806fe9e:	d106      	bne.n	806feae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 806fea0:	697b      	ldr	r3, [r7, #20]
 806fea2:	3324      	adds	r3, #36	; 0x24
 806fea4:	687a      	ldr	r2, [r7, #4]
 806fea6:	68b9      	ldr	r1, [r7, #8]
 806fea8:	4618      	mov	r0, r3
 806feaa:	f000 fc61 	bl	8070770 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 806feae:	6978      	ldr	r0, [r7, #20]
 806feb0:	f7ff fefb 	bl	806fcaa <prvUnlockQueue>
	}
 806feb4:	bf00      	nop
 806feb6:	3718      	adds	r7, #24
 806feb8:	46bd      	mov	sp, r7
 806feba:	bd80      	pop	{r7, pc}

0806febc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 806febc:	b580      	push	{r7, lr}
 806febe:	b08e      	sub	sp, #56	; 0x38
 806fec0:	af04      	add	r7, sp, #16
 806fec2:	60f8      	str	r0, [r7, #12]
 806fec4:	60b9      	str	r1, [r7, #8]
 806fec6:	607a      	str	r2, [r7, #4]
 806fec8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 806feca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806fecc:	2b00      	cmp	r3, #0
 806fece:	d10a      	bne.n	806fee6 <xTaskCreateStatic+0x2a>
	__asm volatile
 806fed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fed4:	f383 8811 	msr	BASEPRI, r3
 806fed8:	f3bf 8f6f 	isb	sy
 806fedc:	f3bf 8f4f 	dsb	sy
 806fee0:	623b      	str	r3, [r7, #32]
}
 806fee2:	bf00      	nop
 806fee4:	e7fe      	b.n	806fee4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 806fee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806fee8:	2b00      	cmp	r3, #0
 806feea:	d10a      	bne.n	806ff02 <xTaskCreateStatic+0x46>
	__asm volatile
 806feec:	f04f 0350 	mov.w	r3, #80	; 0x50
 806fef0:	f383 8811 	msr	BASEPRI, r3
 806fef4:	f3bf 8f6f 	isb	sy
 806fef8:	f3bf 8f4f 	dsb	sy
 806fefc:	61fb      	str	r3, [r7, #28]
}
 806fefe:	bf00      	nop
 806ff00:	e7fe      	b.n	806ff00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 806ff02:	23bc      	movs	r3, #188	; 0xbc
 806ff04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 806ff06:	693b      	ldr	r3, [r7, #16]
 806ff08:	2bbc      	cmp	r3, #188	; 0xbc
 806ff0a:	d00a      	beq.n	806ff22 <xTaskCreateStatic+0x66>
	__asm volatile
 806ff0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 806ff10:	f383 8811 	msr	BASEPRI, r3
 806ff14:	f3bf 8f6f 	isb	sy
 806ff18:	f3bf 8f4f 	dsb	sy
 806ff1c:	61bb      	str	r3, [r7, #24]
}
 806ff1e:	bf00      	nop
 806ff20:	e7fe      	b.n	806ff20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 806ff22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 806ff24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ff26:	2b00      	cmp	r3, #0
 806ff28:	d01e      	beq.n	806ff68 <xTaskCreateStatic+0xac>
 806ff2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 806ff2c:	2b00      	cmp	r3, #0
 806ff2e:	d01b      	beq.n	806ff68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 806ff30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 806ff32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 806ff34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806ff36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 806ff38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 806ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806ff3c:	2202      	movs	r2, #2
 806ff3e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 806ff42:	2300      	movs	r3, #0
 806ff44:	9303      	str	r3, [sp, #12]
 806ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 806ff48:	9302      	str	r3, [sp, #8]
 806ff4a:	f107 0314 	add.w	r3, r7, #20
 806ff4e:	9301      	str	r3, [sp, #4]
 806ff50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 806ff52:	9300      	str	r3, [sp, #0]
 806ff54:	683b      	ldr	r3, [r7, #0]
 806ff56:	687a      	ldr	r2, [r7, #4]
 806ff58:	68b9      	ldr	r1, [r7, #8]
 806ff5a:	68f8      	ldr	r0, [r7, #12]
 806ff5c:	f000 f850 	bl	8070000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 806ff60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 806ff62:	f000 f8f3 	bl	807014c <prvAddNewTaskToReadyList>
 806ff66:	e001      	b.n	806ff6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 806ff68:	2300      	movs	r3, #0
 806ff6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 806ff6c:	697b      	ldr	r3, [r7, #20]
	}
 806ff6e:	4618      	mov	r0, r3
 806ff70:	3728      	adds	r7, #40	; 0x28
 806ff72:	46bd      	mov	sp, r7
 806ff74:	bd80      	pop	{r7, pc}

0806ff76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 806ff76:	b580      	push	{r7, lr}
 806ff78:	b08c      	sub	sp, #48	; 0x30
 806ff7a:	af04      	add	r7, sp, #16
 806ff7c:	60f8      	str	r0, [r7, #12]
 806ff7e:	60b9      	str	r1, [r7, #8]
 806ff80:	603b      	str	r3, [r7, #0]
 806ff82:	4613      	mov	r3, r2
 806ff84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 806ff86:	88fb      	ldrh	r3, [r7, #6]
 806ff88:	009b      	lsls	r3, r3, #2
 806ff8a:	4618      	mov	r0, r3
 806ff8c:	f002 f824 	bl	8071fd8 <pvPortMalloc>
 806ff90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 806ff92:	697b      	ldr	r3, [r7, #20]
 806ff94:	2b00      	cmp	r3, #0
 806ff96:	d00e      	beq.n	806ffb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 806ff98:	20bc      	movs	r0, #188	; 0xbc
 806ff9a:	f002 f81d 	bl	8071fd8 <pvPortMalloc>
 806ff9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 806ffa0:	69fb      	ldr	r3, [r7, #28]
 806ffa2:	2b00      	cmp	r3, #0
 806ffa4:	d003      	beq.n	806ffae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 806ffa6:	69fb      	ldr	r3, [r7, #28]
 806ffa8:	697a      	ldr	r2, [r7, #20]
 806ffaa:	631a      	str	r2, [r3, #48]	; 0x30
 806ffac:	e005      	b.n	806ffba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 806ffae:	6978      	ldr	r0, [r7, #20]
 806ffb0:	f002 f8de 	bl	8072170 <vPortFree>
 806ffb4:	e001      	b.n	806ffba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 806ffb6:	2300      	movs	r3, #0
 806ffb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 806ffba:	69fb      	ldr	r3, [r7, #28]
 806ffbc:	2b00      	cmp	r3, #0
 806ffbe:	d017      	beq.n	806fff0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806ffc0:	69fb      	ldr	r3, [r7, #28]
 806ffc2:	2200      	movs	r2, #0
 806ffc4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 806ffc8:	88fa      	ldrh	r2, [r7, #6]
 806ffca:	2300      	movs	r3, #0
 806ffcc:	9303      	str	r3, [sp, #12]
 806ffce:	69fb      	ldr	r3, [r7, #28]
 806ffd0:	9302      	str	r3, [sp, #8]
 806ffd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 806ffd4:	9301      	str	r3, [sp, #4]
 806ffd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 806ffd8:	9300      	str	r3, [sp, #0]
 806ffda:	683b      	ldr	r3, [r7, #0]
 806ffdc:	68b9      	ldr	r1, [r7, #8]
 806ffde:	68f8      	ldr	r0, [r7, #12]
 806ffe0:	f000 f80e 	bl	8070000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 806ffe4:	69f8      	ldr	r0, [r7, #28]
 806ffe6:	f000 f8b1 	bl	807014c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 806ffea:	2301      	movs	r3, #1
 806ffec:	61bb      	str	r3, [r7, #24]
 806ffee:	e002      	b.n	806fff6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 806fff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 806fff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 806fff6:	69bb      	ldr	r3, [r7, #24]
	}
 806fff8:	4618      	mov	r0, r3
 806fffa:	3720      	adds	r7, #32
 806fffc:	46bd      	mov	sp, r7
 806fffe:	bd80      	pop	{r7, pc}

08070000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8070000:	b580      	push	{r7, lr}
 8070002:	b088      	sub	sp, #32
 8070004:	af00      	add	r7, sp, #0
 8070006:	60f8      	str	r0, [r7, #12]
 8070008:	60b9      	str	r1, [r7, #8]
 807000a:	607a      	str	r2, [r7, #4]
 807000c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 807000e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8070012:	687b      	ldr	r3, [r7, #4]
 8070014:	009b      	lsls	r3, r3, #2
 8070016:	461a      	mov	r2, r3
 8070018:	21a5      	movs	r1, #165	; 0xa5
 807001a:	f002 faf8 	bl	807260e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 807001e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8070022:	687b      	ldr	r3, [r7, #4]
 8070024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8070028:	3b01      	subs	r3, #1
 807002a:	009b      	lsls	r3, r3, #2
 807002c:	4413      	add	r3, r2
 807002e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8070030:	69bb      	ldr	r3, [r7, #24]
 8070032:	f023 0307 	bic.w	r3, r3, #7
 8070036:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8070038:	69bb      	ldr	r3, [r7, #24]
 807003a:	f003 0307 	and.w	r3, r3, #7
 807003e:	2b00      	cmp	r3, #0
 8070040:	d00a      	beq.n	8070058 <prvInitialiseNewTask+0x58>
	__asm volatile
 8070042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070046:	f383 8811 	msr	BASEPRI, r3
 807004a:	f3bf 8f6f 	isb	sy
 807004e:	f3bf 8f4f 	dsb	sy
 8070052:	617b      	str	r3, [r7, #20]
}
 8070054:	bf00      	nop
 8070056:	e7fe      	b.n	8070056 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8070058:	68bb      	ldr	r3, [r7, #8]
 807005a:	2b00      	cmp	r3, #0
 807005c:	d01f      	beq.n	807009e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 807005e:	2300      	movs	r3, #0
 8070060:	61fb      	str	r3, [r7, #28]
 8070062:	e012      	b.n	807008a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8070064:	68ba      	ldr	r2, [r7, #8]
 8070066:	69fb      	ldr	r3, [r7, #28]
 8070068:	4413      	add	r3, r2
 807006a:	7819      	ldrb	r1, [r3, #0]
 807006c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 807006e:	69fb      	ldr	r3, [r7, #28]
 8070070:	4413      	add	r3, r2
 8070072:	3334      	adds	r3, #52	; 0x34
 8070074:	460a      	mov	r2, r1
 8070076:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8070078:	68ba      	ldr	r2, [r7, #8]
 807007a:	69fb      	ldr	r3, [r7, #28]
 807007c:	4413      	add	r3, r2
 807007e:	781b      	ldrb	r3, [r3, #0]
 8070080:	2b00      	cmp	r3, #0
 8070082:	d006      	beq.n	8070092 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8070084:	69fb      	ldr	r3, [r7, #28]
 8070086:	3301      	adds	r3, #1
 8070088:	61fb      	str	r3, [r7, #28]
 807008a:	69fb      	ldr	r3, [r7, #28]
 807008c:	2b0f      	cmp	r3, #15
 807008e:	d9e9      	bls.n	8070064 <prvInitialiseNewTask+0x64>
 8070090:	e000      	b.n	8070094 <prvInitialiseNewTask+0x94>
			{
				break;
 8070092:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8070094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070096:	2200      	movs	r2, #0
 8070098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 807009c:	e003      	b.n	80700a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 807009e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700a0:	2200      	movs	r2, #0
 80700a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80700a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80700a8:	2b37      	cmp	r3, #55	; 0x37
 80700aa:	d901      	bls.n	80700b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80700ac:	2337      	movs	r3, #55	; 0x37
 80700ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80700b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80700b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80700b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80700ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80700bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700be:	2200      	movs	r2, #0
 80700c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80700c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700c4:	3304      	adds	r3, #4
 80700c6:	4618      	mov	r0, r3
 80700c8:	f7fe fda0 	bl	806ec0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80700cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700ce:	3318      	adds	r3, #24
 80700d0:	4618      	mov	r0, r3
 80700d2:	f7fe fd9b 	bl	806ec0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80700d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80700da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80700dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80700de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80700e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80700e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80700ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80700ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700ee:	2200      	movs	r2, #0
 80700f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80700f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700f6:	2200      	movs	r2, #0
 80700f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80700fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80700fe:	3354      	adds	r3, #84	; 0x54
 8070100:	2260      	movs	r2, #96	; 0x60
 8070102:	2100      	movs	r1, #0
 8070104:	4618      	mov	r0, r3
 8070106:	f002 fa82 	bl	807260e <memset>
 807010a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807010c:	4a0c      	ldr	r2, [pc, #48]	; (8070140 <prvInitialiseNewTask+0x140>)
 807010e:	659a      	str	r2, [r3, #88]	; 0x58
 8070110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070112:	4a0c      	ldr	r2, [pc, #48]	; (8070144 <prvInitialiseNewTask+0x144>)
 8070114:	65da      	str	r2, [r3, #92]	; 0x5c
 8070116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8070118:	4a0b      	ldr	r2, [pc, #44]	; (8070148 <prvInitialiseNewTask+0x148>)
 807011a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 807011c:	683a      	ldr	r2, [r7, #0]
 807011e:	68f9      	ldr	r1, [r7, #12]
 8070120:	69b8      	ldr	r0, [r7, #24]
 8070122:	f001 fd0b 	bl	8071b3c <pxPortInitialiseStack>
 8070126:	4602      	mov	r2, r0
 8070128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807012a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 807012c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 807012e:	2b00      	cmp	r3, #0
 8070130:	d002      	beq.n	8070138 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8070132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8070134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8070136:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8070138:	bf00      	nop
 807013a:	3720      	adds	r7, #32
 807013c:	46bd      	mov	sp, r7
 807013e:	bd80      	pop	{r7, pc}
 8070140:	0807757c 	.word	0x0807757c
 8070144:	0807759c 	.word	0x0807759c
 8070148:	0807755c 	.word	0x0807755c

0807014c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 807014c:	b580      	push	{r7, lr}
 807014e:	b082      	sub	sp, #8
 8070150:	af00      	add	r7, sp, #0
 8070152:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8070154:	f001 fe1e 	bl	8071d94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8070158:	4b2d      	ldr	r3, [pc, #180]	; (8070210 <prvAddNewTaskToReadyList+0xc4>)
 807015a:	681b      	ldr	r3, [r3, #0]
 807015c:	3301      	adds	r3, #1
 807015e:	4a2c      	ldr	r2, [pc, #176]	; (8070210 <prvAddNewTaskToReadyList+0xc4>)
 8070160:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8070162:	4b2c      	ldr	r3, [pc, #176]	; (8070214 <prvAddNewTaskToReadyList+0xc8>)
 8070164:	681b      	ldr	r3, [r3, #0]
 8070166:	2b00      	cmp	r3, #0
 8070168:	d109      	bne.n	807017e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 807016a:	4a2a      	ldr	r2, [pc, #168]	; (8070214 <prvAddNewTaskToReadyList+0xc8>)
 807016c:	687b      	ldr	r3, [r7, #4]
 807016e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8070170:	4b27      	ldr	r3, [pc, #156]	; (8070210 <prvAddNewTaskToReadyList+0xc4>)
 8070172:	681b      	ldr	r3, [r3, #0]
 8070174:	2b01      	cmp	r3, #1
 8070176:	d110      	bne.n	807019a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8070178:	f000 fc26 	bl	80709c8 <prvInitialiseTaskLists>
 807017c:	e00d      	b.n	807019a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 807017e:	4b26      	ldr	r3, [pc, #152]	; (8070218 <prvAddNewTaskToReadyList+0xcc>)
 8070180:	681b      	ldr	r3, [r3, #0]
 8070182:	2b00      	cmp	r3, #0
 8070184:	d109      	bne.n	807019a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8070186:	4b23      	ldr	r3, [pc, #140]	; (8070214 <prvAddNewTaskToReadyList+0xc8>)
 8070188:	681b      	ldr	r3, [r3, #0]
 807018a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 807018c:	687b      	ldr	r3, [r7, #4]
 807018e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070190:	429a      	cmp	r2, r3
 8070192:	d802      	bhi.n	807019a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8070194:	4a1f      	ldr	r2, [pc, #124]	; (8070214 <prvAddNewTaskToReadyList+0xc8>)
 8070196:	687b      	ldr	r3, [r7, #4]
 8070198:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 807019a:	4b20      	ldr	r3, [pc, #128]	; (807021c <prvAddNewTaskToReadyList+0xd0>)
 807019c:	681b      	ldr	r3, [r3, #0]
 807019e:	3301      	adds	r3, #1
 80701a0:	4a1e      	ldr	r2, [pc, #120]	; (807021c <prvAddNewTaskToReadyList+0xd0>)
 80701a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80701a4:	4b1d      	ldr	r3, [pc, #116]	; (807021c <prvAddNewTaskToReadyList+0xd0>)
 80701a6:	681a      	ldr	r2, [r3, #0]
 80701a8:	687b      	ldr	r3, [r7, #4]
 80701aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80701ac:	687b      	ldr	r3, [r7, #4]
 80701ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80701b0:	4b1b      	ldr	r3, [pc, #108]	; (8070220 <prvAddNewTaskToReadyList+0xd4>)
 80701b2:	681b      	ldr	r3, [r3, #0]
 80701b4:	429a      	cmp	r2, r3
 80701b6:	d903      	bls.n	80701c0 <prvAddNewTaskToReadyList+0x74>
 80701b8:	687b      	ldr	r3, [r7, #4]
 80701ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80701bc:	4a18      	ldr	r2, [pc, #96]	; (8070220 <prvAddNewTaskToReadyList+0xd4>)
 80701be:	6013      	str	r3, [r2, #0]
 80701c0:	687b      	ldr	r3, [r7, #4]
 80701c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80701c4:	4613      	mov	r3, r2
 80701c6:	009b      	lsls	r3, r3, #2
 80701c8:	4413      	add	r3, r2
 80701ca:	009b      	lsls	r3, r3, #2
 80701cc:	4a15      	ldr	r2, [pc, #84]	; (8070224 <prvAddNewTaskToReadyList+0xd8>)
 80701ce:	441a      	add	r2, r3
 80701d0:	687b      	ldr	r3, [r7, #4]
 80701d2:	3304      	adds	r3, #4
 80701d4:	4619      	mov	r1, r3
 80701d6:	4610      	mov	r0, r2
 80701d8:	f7fe fd25 	bl	806ec26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80701dc:	f001 fe0a 	bl	8071df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80701e0:	4b0d      	ldr	r3, [pc, #52]	; (8070218 <prvAddNewTaskToReadyList+0xcc>)
 80701e2:	681b      	ldr	r3, [r3, #0]
 80701e4:	2b00      	cmp	r3, #0
 80701e6:	d00e      	beq.n	8070206 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80701e8:	4b0a      	ldr	r3, [pc, #40]	; (8070214 <prvAddNewTaskToReadyList+0xc8>)
 80701ea:	681b      	ldr	r3, [r3, #0]
 80701ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80701ee:	687b      	ldr	r3, [r7, #4]
 80701f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80701f2:	429a      	cmp	r2, r3
 80701f4:	d207      	bcs.n	8070206 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80701f6:	4b0c      	ldr	r3, [pc, #48]	; (8070228 <prvAddNewTaskToReadyList+0xdc>)
 80701f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80701fc:	601a      	str	r2, [r3, #0]
 80701fe:	f3bf 8f4f 	dsb	sy
 8070202:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8070206:	bf00      	nop
 8070208:	3708      	adds	r7, #8
 807020a:	46bd      	mov	sp, r7
 807020c:	bd80      	pop	{r7, pc}
 807020e:	bf00      	nop
 8070210:	200010a8 	.word	0x200010a8
 8070214:	20000bd4 	.word	0x20000bd4
 8070218:	200010b4 	.word	0x200010b4
 807021c:	200010c4 	.word	0x200010c4
 8070220:	200010b0 	.word	0x200010b0
 8070224:	20000bd8 	.word	0x20000bd8
 8070228:	e000ed04 	.word	0xe000ed04

0807022c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 807022c:	b580      	push	{r7, lr}
 807022e:	b084      	sub	sp, #16
 8070230:	af00      	add	r7, sp, #0
 8070232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8070234:	2300      	movs	r3, #0
 8070236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8070238:	687b      	ldr	r3, [r7, #4]
 807023a:	2b00      	cmp	r3, #0
 807023c:	d017      	beq.n	807026e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 807023e:	4b13      	ldr	r3, [pc, #76]	; (807028c <vTaskDelay+0x60>)
 8070240:	681b      	ldr	r3, [r3, #0]
 8070242:	2b00      	cmp	r3, #0
 8070244:	d00a      	beq.n	807025c <vTaskDelay+0x30>
	__asm volatile
 8070246:	f04f 0350 	mov.w	r3, #80	; 0x50
 807024a:	f383 8811 	msr	BASEPRI, r3
 807024e:	f3bf 8f6f 	isb	sy
 8070252:	f3bf 8f4f 	dsb	sy
 8070256:	60bb      	str	r3, [r7, #8]
}
 8070258:	bf00      	nop
 807025a:	e7fe      	b.n	807025a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 807025c:	f000 f88a 	bl	8070374 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8070260:	2100      	movs	r1, #0
 8070262:	6878      	ldr	r0, [r7, #4]
 8070264:	f001 f80e 	bl	8071284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8070268:	f000 f892 	bl	8070390 <xTaskResumeAll>
 807026c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 807026e:	68fb      	ldr	r3, [r7, #12]
 8070270:	2b00      	cmp	r3, #0
 8070272:	d107      	bne.n	8070284 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8070274:	4b06      	ldr	r3, [pc, #24]	; (8070290 <vTaskDelay+0x64>)
 8070276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 807027a:	601a      	str	r2, [r3, #0]
 807027c:	f3bf 8f4f 	dsb	sy
 8070280:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8070284:	bf00      	nop
 8070286:	3710      	adds	r7, #16
 8070288:	46bd      	mov	sp, r7
 807028a:	bd80      	pop	{r7, pc}
 807028c:	200010d0 	.word	0x200010d0
 8070290:	e000ed04 	.word	0xe000ed04

08070294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8070294:	b580      	push	{r7, lr}
 8070296:	b08a      	sub	sp, #40	; 0x28
 8070298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 807029a:	2300      	movs	r3, #0
 807029c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 807029e:	2300      	movs	r3, #0
 80702a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80702a2:	463a      	mov	r2, r7
 80702a4:	1d39      	adds	r1, r7, #4
 80702a6:	f107 0308 	add.w	r3, r7, #8
 80702aa:	4618      	mov	r0, r3
 80702ac:	f7fe fc5a 	bl	806eb64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80702b0:	6839      	ldr	r1, [r7, #0]
 80702b2:	687b      	ldr	r3, [r7, #4]
 80702b4:	68ba      	ldr	r2, [r7, #8]
 80702b6:	9202      	str	r2, [sp, #8]
 80702b8:	9301      	str	r3, [sp, #4]
 80702ba:	2300      	movs	r3, #0
 80702bc:	9300      	str	r3, [sp, #0]
 80702be:	2300      	movs	r3, #0
 80702c0:	460a      	mov	r2, r1
 80702c2:	4924      	ldr	r1, [pc, #144]	; (8070354 <vTaskStartScheduler+0xc0>)
 80702c4:	4824      	ldr	r0, [pc, #144]	; (8070358 <vTaskStartScheduler+0xc4>)
 80702c6:	f7ff fdf9 	bl	806febc <xTaskCreateStatic>
 80702ca:	4603      	mov	r3, r0
 80702cc:	4a23      	ldr	r2, [pc, #140]	; (807035c <vTaskStartScheduler+0xc8>)
 80702ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80702d0:	4b22      	ldr	r3, [pc, #136]	; (807035c <vTaskStartScheduler+0xc8>)
 80702d2:	681b      	ldr	r3, [r3, #0]
 80702d4:	2b00      	cmp	r3, #0
 80702d6:	d002      	beq.n	80702de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80702d8:	2301      	movs	r3, #1
 80702da:	617b      	str	r3, [r7, #20]
 80702dc:	e001      	b.n	80702e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80702de:	2300      	movs	r3, #0
 80702e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80702e2:	697b      	ldr	r3, [r7, #20]
 80702e4:	2b01      	cmp	r3, #1
 80702e6:	d102      	bne.n	80702ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80702e8:	f001 f820 	bl	807132c <xTimerCreateTimerTask>
 80702ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80702ee:	697b      	ldr	r3, [r7, #20]
 80702f0:	2b01      	cmp	r3, #1
 80702f2:	d11b      	bne.n	807032c <vTaskStartScheduler+0x98>
	__asm volatile
 80702f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80702f8:	f383 8811 	msr	BASEPRI, r3
 80702fc:	f3bf 8f6f 	isb	sy
 8070300:	f3bf 8f4f 	dsb	sy
 8070304:	613b      	str	r3, [r7, #16]
}
 8070306:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8070308:	4b15      	ldr	r3, [pc, #84]	; (8070360 <vTaskStartScheduler+0xcc>)
 807030a:	681b      	ldr	r3, [r3, #0]
 807030c:	3354      	adds	r3, #84	; 0x54
 807030e:	4a15      	ldr	r2, [pc, #84]	; (8070364 <vTaskStartScheduler+0xd0>)
 8070310:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8070312:	4b15      	ldr	r3, [pc, #84]	; (8070368 <vTaskStartScheduler+0xd4>)
 8070314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8070318:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 807031a:	4b14      	ldr	r3, [pc, #80]	; (807036c <vTaskStartScheduler+0xd8>)
 807031c:	2201      	movs	r2, #1
 807031e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8070320:	4b13      	ldr	r3, [pc, #76]	; (8070370 <vTaskStartScheduler+0xdc>)
 8070322:	2200      	movs	r2, #0
 8070324:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8070326:	f001 fc93 	bl	8071c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 807032a:	e00e      	b.n	807034a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 807032c:	697b      	ldr	r3, [r7, #20]
 807032e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8070332:	d10a      	bne.n	807034a <vTaskStartScheduler+0xb6>
	__asm volatile
 8070334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070338:	f383 8811 	msr	BASEPRI, r3
 807033c:	f3bf 8f6f 	isb	sy
 8070340:	f3bf 8f4f 	dsb	sy
 8070344:	60fb      	str	r3, [r7, #12]
}
 8070346:	bf00      	nop
 8070348:	e7fe      	b.n	8070348 <vTaskStartScheduler+0xb4>
}
 807034a:	bf00      	nop
 807034c:	3718      	adds	r7, #24
 807034e:	46bd      	mov	sp, r7
 8070350:	bd80      	pop	{r7, pc}
 8070352:	bf00      	nop
 8070354:	08077358 	.word	0x08077358
 8070358:	08070999 	.word	0x08070999
 807035c:	200010cc 	.word	0x200010cc
 8070360:	20000bd4 	.word	0x20000bd4
 8070364:	20000028 	.word	0x20000028
 8070368:	200010c8 	.word	0x200010c8
 807036c:	200010b4 	.word	0x200010b4
 8070370:	200010ac 	.word	0x200010ac

08070374 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8070374:	b480      	push	{r7}
 8070376:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8070378:	4b04      	ldr	r3, [pc, #16]	; (807038c <vTaskSuspendAll+0x18>)
 807037a:	681b      	ldr	r3, [r3, #0]
 807037c:	3301      	adds	r3, #1
 807037e:	4a03      	ldr	r2, [pc, #12]	; (807038c <vTaskSuspendAll+0x18>)
 8070380:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8070382:	bf00      	nop
 8070384:	46bd      	mov	sp, r7
 8070386:	f85d 7b04 	ldr.w	r7, [sp], #4
 807038a:	4770      	bx	lr
 807038c:	200010d0 	.word	0x200010d0

08070390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8070390:	b580      	push	{r7, lr}
 8070392:	b084      	sub	sp, #16
 8070394:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8070396:	2300      	movs	r3, #0
 8070398:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 807039a:	2300      	movs	r3, #0
 807039c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 807039e:	4b42      	ldr	r3, [pc, #264]	; (80704a8 <xTaskResumeAll+0x118>)
 80703a0:	681b      	ldr	r3, [r3, #0]
 80703a2:	2b00      	cmp	r3, #0
 80703a4:	d10a      	bne.n	80703bc <xTaskResumeAll+0x2c>
	__asm volatile
 80703a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80703aa:	f383 8811 	msr	BASEPRI, r3
 80703ae:	f3bf 8f6f 	isb	sy
 80703b2:	f3bf 8f4f 	dsb	sy
 80703b6:	603b      	str	r3, [r7, #0]
}
 80703b8:	bf00      	nop
 80703ba:	e7fe      	b.n	80703ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80703bc:	f001 fcea 	bl	8071d94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80703c0:	4b39      	ldr	r3, [pc, #228]	; (80704a8 <xTaskResumeAll+0x118>)
 80703c2:	681b      	ldr	r3, [r3, #0]
 80703c4:	3b01      	subs	r3, #1
 80703c6:	4a38      	ldr	r2, [pc, #224]	; (80704a8 <xTaskResumeAll+0x118>)
 80703c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80703ca:	4b37      	ldr	r3, [pc, #220]	; (80704a8 <xTaskResumeAll+0x118>)
 80703cc:	681b      	ldr	r3, [r3, #0]
 80703ce:	2b00      	cmp	r3, #0
 80703d0:	d162      	bne.n	8070498 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80703d2:	4b36      	ldr	r3, [pc, #216]	; (80704ac <xTaskResumeAll+0x11c>)
 80703d4:	681b      	ldr	r3, [r3, #0]
 80703d6:	2b00      	cmp	r3, #0
 80703d8:	d05e      	beq.n	8070498 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80703da:	e02f      	b.n	807043c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80703dc:	4b34      	ldr	r3, [pc, #208]	; (80704b0 <xTaskResumeAll+0x120>)
 80703de:	68db      	ldr	r3, [r3, #12]
 80703e0:	68db      	ldr	r3, [r3, #12]
 80703e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80703e4:	68fb      	ldr	r3, [r7, #12]
 80703e6:	3318      	adds	r3, #24
 80703e8:	4618      	mov	r0, r3
 80703ea:	f7fe fc79 	bl	806ece0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80703ee:	68fb      	ldr	r3, [r7, #12]
 80703f0:	3304      	adds	r3, #4
 80703f2:	4618      	mov	r0, r3
 80703f4:	f7fe fc74 	bl	806ece0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80703f8:	68fb      	ldr	r3, [r7, #12]
 80703fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80703fc:	4b2d      	ldr	r3, [pc, #180]	; (80704b4 <xTaskResumeAll+0x124>)
 80703fe:	681b      	ldr	r3, [r3, #0]
 8070400:	429a      	cmp	r2, r3
 8070402:	d903      	bls.n	807040c <xTaskResumeAll+0x7c>
 8070404:	68fb      	ldr	r3, [r7, #12]
 8070406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070408:	4a2a      	ldr	r2, [pc, #168]	; (80704b4 <xTaskResumeAll+0x124>)
 807040a:	6013      	str	r3, [r2, #0]
 807040c:	68fb      	ldr	r3, [r7, #12]
 807040e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070410:	4613      	mov	r3, r2
 8070412:	009b      	lsls	r3, r3, #2
 8070414:	4413      	add	r3, r2
 8070416:	009b      	lsls	r3, r3, #2
 8070418:	4a27      	ldr	r2, [pc, #156]	; (80704b8 <xTaskResumeAll+0x128>)
 807041a:	441a      	add	r2, r3
 807041c:	68fb      	ldr	r3, [r7, #12]
 807041e:	3304      	adds	r3, #4
 8070420:	4619      	mov	r1, r3
 8070422:	4610      	mov	r0, r2
 8070424:	f7fe fbff 	bl	806ec26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8070428:	68fb      	ldr	r3, [r7, #12]
 807042a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 807042c:	4b23      	ldr	r3, [pc, #140]	; (80704bc <xTaskResumeAll+0x12c>)
 807042e:	681b      	ldr	r3, [r3, #0]
 8070430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070432:	429a      	cmp	r2, r3
 8070434:	d302      	bcc.n	807043c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8070436:	4b22      	ldr	r3, [pc, #136]	; (80704c0 <xTaskResumeAll+0x130>)
 8070438:	2201      	movs	r2, #1
 807043a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 807043c:	4b1c      	ldr	r3, [pc, #112]	; (80704b0 <xTaskResumeAll+0x120>)
 807043e:	681b      	ldr	r3, [r3, #0]
 8070440:	2b00      	cmp	r3, #0
 8070442:	d1cb      	bne.n	80703dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8070444:	68fb      	ldr	r3, [r7, #12]
 8070446:	2b00      	cmp	r3, #0
 8070448:	d001      	beq.n	807044e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 807044a:	f000 fb5f 	bl	8070b0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 807044e:	4b1d      	ldr	r3, [pc, #116]	; (80704c4 <xTaskResumeAll+0x134>)
 8070450:	681b      	ldr	r3, [r3, #0]
 8070452:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8070454:	687b      	ldr	r3, [r7, #4]
 8070456:	2b00      	cmp	r3, #0
 8070458:	d010      	beq.n	807047c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 807045a:	f000 f847 	bl	80704ec <xTaskIncrementTick>
 807045e:	4603      	mov	r3, r0
 8070460:	2b00      	cmp	r3, #0
 8070462:	d002      	beq.n	807046a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8070464:	4b16      	ldr	r3, [pc, #88]	; (80704c0 <xTaskResumeAll+0x130>)
 8070466:	2201      	movs	r2, #1
 8070468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 807046a:	687b      	ldr	r3, [r7, #4]
 807046c:	3b01      	subs	r3, #1
 807046e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8070470:	687b      	ldr	r3, [r7, #4]
 8070472:	2b00      	cmp	r3, #0
 8070474:	d1f1      	bne.n	807045a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8070476:	4b13      	ldr	r3, [pc, #76]	; (80704c4 <xTaskResumeAll+0x134>)
 8070478:	2200      	movs	r2, #0
 807047a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 807047c:	4b10      	ldr	r3, [pc, #64]	; (80704c0 <xTaskResumeAll+0x130>)
 807047e:	681b      	ldr	r3, [r3, #0]
 8070480:	2b00      	cmp	r3, #0
 8070482:	d009      	beq.n	8070498 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8070484:	2301      	movs	r3, #1
 8070486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8070488:	4b0f      	ldr	r3, [pc, #60]	; (80704c8 <xTaskResumeAll+0x138>)
 807048a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 807048e:	601a      	str	r2, [r3, #0]
 8070490:	f3bf 8f4f 	dsb	sy
 8070494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8070498:	f001 fcac 	bl	8071df4 <vPortExitCritical>

	return xAlreadyYielded;
 807049c:	68bb      	ldr	r3, [r7, #8]
}
 807049e:	4618      	mov	r0, r3
 80704a0:	3710      	adds	r7, #16
 80704a2:	46bd      	mov	sp, r7
 80704a4:	bd80      	pop	{r7, pc}
 80704a6:	bf00      	nop
 80704a8:	200010d0 	.word	0x200010d0
 80704ac:	200010a8 	.word	0x200010a8
 80704b0:	20001068 	.word	0x20001068
 80704b4:	200010b0 	.word	0x200010b0
 80704b8:	20000bd8 	.word	0x20000bd8
 80704bc:	20000bd4 	.word	0x20000bd4
 80704c0:	200010bc 	.word	0x200010bc
 80704c4:	200010b8 	.word	0x200010b8
 80704c8:	e000ed04 	.word	0xe000ed04

080704cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80704cc:	b480      	push	{r7}
 80704ce:	b083      	sub	sp, #12
 80704d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80704d2:	4b05      	ldr	r3, [pc, #20]	; (80704e8 <xTaskGetTickCount+0x1c>)
 80704d4:	681b      	ldr	r3, [r3, #0]
 80704d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80704d8:	687b      	ldr	r3, [r7, #4]
}
 80704da:	4618      	mov	r0, r3
 80704dc:	370c      	adds	r7, #12
 80704de:	46bd      	mov	sp, r7
 80704e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80704e4:	4770      	bx	lr
 80704e6:	bf00      	nop
 80704e8:	200010ac 	.word	0x200010ac

080704ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80704ec:	b580      	push	{r7, lr}
 80704ee:	b086      	sub	sp, #24
 80704f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80704f2:	2300      	movs	r3, #0
 80704f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80704f6:	4b4f      	ldr	r3, [pc, #316]	; (8070634 <xTaskIncrementTick+0x148>)
 80704f8:	681b      	ldr	r3, [r3, #0]
 80704fa:	2b00      	cmp	r3, #0
 80704fc:	f040 808f 	bne.w	807061e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8070500:	4b4d      	ldr	r3, [pc, #308]	; (8070638 <xTaskIncrementTick+0x14c>)
 8070502:	681b      	ldr	r3, [r3, #0]
 8070504:	3301      	adds	r3, #1
 8070506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8070508:	4a4b      	ldr	r2, [pc, #300]	; (8070638 <xTaskIncrementTick+0x14c>)
 807050a:	693b      	ldr	r3, [r7, #16]
 807050c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 807050e:	693b      	ldr	r3, [r7, #16]
 8070510:	2b00      	cmp	r3, #0
 8070512:	d120      	bne.n	8070556 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8070514:	4b49      	ldr	r3, [pc, #292]	; (807063c <xTaskIncrementTick+0x150>)
 8070516:	681b      	ldr	r3, [r3, #0]
 8070518:	681b      	ldr	r3, [r3, #0]
 807051a:	2b00      	cmp	r3, #0
 807051c:	d00a      	beq.n	8070534 <xTaskIncrementTick+0x48>
	__asm volatile
 807051e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070522:	f383 8811 	msr	BASEPRI, r3
 8070526:	f3bf 8f6f 	isb	sy
 807052a:	f3bf 8f4f 	dsb	sy
 807052e:	603b      	str	r3, [r7, #0]
}
 8070530:	bf00      	nop
 8070532:	e7fe      	b.n	8070532 <xTaskIncrementTick+0x46>
 8070534:	4b41      	ldr	r3, [pc, #260]	; (807063c <xTaskIncrementTick+0x150>)
 8070536:	681b      	ldr	r3, [r3, #0]
 8070538:	60fb      	str	r3, [r7, #12]
 807053a:	4b41      	ldr	r3, [pc, #260]	; (8070640 <xTaskIncrementTick+0x154>)
 807053c:	681b      	ldr	r3, [r3, #0]
 807053e:	4a3f      	ldr	r2, [pc, #252]	; (807063c <xTaskIncrementTick+0x150>)
 8070540:	6013      	str	r3, [r2, #0]
 8070542:	4a3f      	ldr	r2, [pc, #252]	; (8070640 <xTaskIncrementTick+0x154>)
 8070544:	68fb      	ldr	r3, [r7, #12]
 8070546:	6013      	str	r3, [r2, #0]
 8070548:	4b3e      	ldr	r3, [pc, #248]	; (8070644 <xTaskIncrementTick+0x158>)
 807054a:	681b      	ldr	r3, [r3, #0]
 807054c:	3301      	adds	r3, #1
 807054e:	4a3d      	ldr	r2, [pc, #244]	; (8070644 <xTaskIncrementTick+0x158>)
 8070550:	6013      	str	r3, [r2, #0]
 8070552:	f000 fadb 	bl	8070b0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8070556:	4b3c      	ldr	r3, [pc, #240]	; (8070648 <xTaskIncrementTick+0x15c>)
 8070558:	681b      	ldr	r3, [r3, #0]
 807055a:	693a      	ldr	r2, [r7, #16]
 807055c:	429a      	cmp	r2, r3
 807055e:	d349      	bcc.n	80705f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8070560:	4b36      	ldr	r3, [pc, #216]	; (807063c <xTaskIncrementTick+0x150>)
 8070562:	681b      	ldr	r3, [r3, #0]
 8070564:	681b      	ldr	r3, [r3, #0]
 8070566:	2b00      	cmp	r3, #0
 8070568:	d104      	bne.n	8070574 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 807056a:	4b37      	ldr	r3, [pc, #220]	; (8070648 <xTaskIncrementTick+0x15c>)
 807056c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8070570:	601a      	str	r2, [r3, #0]
					break;
 8070572:	e03f      	b.n	80705f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070574:	4b31      	ldr	r3, [pc, #196]	; (807063c <xTaskIncrementTick+0x150>)
 8070576:	681b      	ldr	r3, [r3, #0]
 8070578:	68db      	ldr	r3, [r3, #12]
 807057a:	68db      	ldr	r3, [r3, #12]
 807057c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 807057e:	68bb      	ldr	r3, [r7, #8]
 8070580:	685b      	ldr	r3, [r3, #4]
 8070582:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8070584:	693a      	ldr	r2, [r7, #16]
 8070586:	687b      	ldr	r3, [r7, #4]
 8070588:	429a      	cmp	r2, r3
 807058a:	d203      	bcs.n	8070594 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 807058c:	4a2e      	ldr	r2, [pc, #184]	; (8070648 <xTaskIncrementTick+0x15c>)
 807058e:	687b      	ldr	r3, [r7, #4]
 8070590:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8070592:	e02f      	b.n	80705f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8070594:	68bb      	ldr	r3, [r7, #8]
 8070596:	3304      	adds	r3, #4
 8070598:	4618      	mov	r0, r3
 807059a:	f7fe fba1 	bl	806ece0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 807059e:	68bb      	ldr	r3, [r7, #8]
 80705a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80705a2:	2b00      	cmp	r3, #0
 80705a4:	d004      	beq.n	80705b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80705a6:	68bb      	ldr	r3, [r7, #8]
 80705a8:	3318      	adds	r3, #24
 80705aa:	4618      	mov	r0, r3
 80705ac:	f7fe fb98 	bl	806ece0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80705b0:	68bb      	ldr	r3, [r7, #8]
 80705b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80705b4:	4b25      	ldr	r3, [pc, #148]	; (807064c <xTaskIncrementTick+0x160>)
 80705b6:	681b      	ldr	r3, [r3, #0]
 80705b8:	429a      	cmp	r2, r3
 80705ba:	d903      	bls.n	80705c4 <xTaskIncrementTick+0xd8>
 80705bc:	68bb      	ldr	r3, [r7, #8]
 80705be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80705c0:	4a22      	ldr	r2, [pc, #136]	; (807064c <xTaskIncrementTick+0x160>)
 80705c2:	6013      	str	r3, [r2, #0]
 80705c4:	68bb      	ldr	r3, [r7, #8]
 80705c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80705c8:	4613      	mov	r3, r2
 80705ca:	009b      	lsls	r3, r3, #2
 80705cc:	4413      	add	r3, r2
 80705ce:	009b      	lsls	r3, r3, #2
 80705d0:	4a1f      	ldr	r2, [pc, #124]	; (8070650 <xTaskIncrementTick+0x164>)
 80705d2:	441a      	add	r2, r3
 80705d4:	68bb      	ldr	r3, [r7, #8]
 80705d6:	3304      	adds	r3, #4
 80705d8:	4619      	mov	r1, r3
 80705da:	4610      	mov	r0, r2
 80705dc:	f7fe fb23 	bl	806ec26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80705e0:	68bb      	ldr	r3, [r7, #8]
 80705e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80705e4:	4b1b      	ldr	r3, [pc, #108]	; (8070654 <xTaskIncrementTick+0x168>)
 80705e6:	681b      	ldr	r3, [r3, #0]
 80705e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80705ea:	429a      	cmp	r2, r3
 80705ec:	d3b8      	bcc.n	8070560 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80705ee:	2301      	movs	r3, #1
 80705f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80705f2:	e7b5      	b.n	8070560 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80705f4:	4b17      	ldr	r3, [pc, #92]	; (8070654 <xTaskIncrementTick+0x168>)
 80705f6:	681b      	ldr	r3, [r3, #0]
 80705f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80705fa:	4915      	ldr	r1, [pc, #84]	; (8070650 <xTaskIncrementTick+0x164>)
 80705fc:	4613      	mov	r3, r2
 80705fe:	009b      	lsls	r3, r3, #2
 8070600:	4413      	add	r3, r2
 8070602:	009b      	lsls	r3, r3, #2
 8070604:	440b      	add	r3, r1
 8070606:	681b      	ldr	r3, [r3, #0]
 8070608:	2b01      	cmp	r3, #1
 807060a:	d901      	bls.n	8070610 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 807060c:	2301      	movs	r3, #1
 807060e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8070610:	4b11      	ldr	r3, [pc, #68]	; (8070658 <xTaskIncrementTick+0x16c>)
 8070612:	681b      	ldr	r3, [r3, #0]
 8070614:	2b00      	cmp	r3, #0
 8070616:	d007      	beq.n	8070628 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8070618:	2301      	movs	r3, #1
 807061a:	617b      	str	r3, [r7, #20]
 807061c:	e004      	b.n	8070628 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 807061e:	4b0f      	ldr	r3, [pc, #60]	; (807065c <xTaskIncrementTick+0x170>)
 8070620:	681b      	ldr	r3, [r3, #0]
 8070622:	3301      	adds	r3, #1
 8070624:	4a0d      	ldr	r2, [pc, #52]	; (807065c <xTaskIncrementTick+0x170>)
 8070626:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8070628:	697b      	ldr	r3, [r7, #20]
}
 807062a:	4618      	mov	r0, r3
 807062c:	3718      	adds	r7, #24
 807062e:	46bd      	mov	sp, r7
 8070630:	bd80      	pop	{r7, pc}
 8070632:	bf00      	nop
 8070634:	200010d0 	.word	0x200010d0
 8070638:	200010ac 	.word	0x200010ac
 807063c:	20001060 	.word	0x20001060
 8070640:	20001064 	.word	0x20001064
 8070644:	200010c0 	.word	0x200010c0
 8070648:	200010c8 	.word	0x200010c8
 807064c:	200010b0 	.word	0x200010b0
 8070650:	20000bd8 	.word	0x20000bd8
 8070654:	20000bd4 	.word	0x20000bd4
 8070658:	200010bc 	.word	0x200010bc
 807065c:	200010b8 	.word	0x200010b8

08070660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8070660:	b480      	push	{r7}
 8070662:	b085      	sub	sp, #20
 8070664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8070666:	4b2a      	ldr	r3, [pc, #168]	; (8070710 <vTaskSwitchContext+0xb0>)
 8070668:	681b      	ldr	r3, [r3, #0]
 807066a:	2b00      	cmp	r3, #0
 807066c:	d003      	beq.n	8070676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 807066e:	4b29      	ldr	r3, [pc, #164]	; (8070714 <vTaskSwitchContext+0xb4>)
 8070670:	2201      	movs	r2, #1
 8070672:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8070674:	e046      	b.n	8070704 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8070676:	4b27      	ldr	r3, [pc, #156]	; (8070714 <vTaskSwitchContext+0xb4>)
 8070678:	2200      	movs	r2, #0
 807067a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 807067c:	4b26      	ldr	r3, [pc, #152]	; (8070718 <vTaskSwitchContext+0xb8>)
 807067e:	681b      	ldr	r3, [r3, #0]
 8070680:	60fb      	str	r3, [r7, #12]
 8070682:	e010      	b.n	80706a6 <vTaskSwitchContext+0x46>
 8070684:	68fb      	ldr	r3, [r7, #12]
 8070686:	2b00      	cmp	r3, #0
 8070688:	d10a      	bne.n	80706a0 <vTaskSwitchContext+0x40>
	__asm volatile
 807068a:	f04f 0350 	mov.w	r3, #80	; 0x50
 807068e:	f383 8811 	msr	BASEPRI, r3
 8070692:	f3bf 8f6f 	isb	sy
 8070696:	f3bf 8f4f 	dsb	sy
 807069a:	607b      	str	r3, [r7, #4]
}
 807069c:	bf00      	nop
 807069e:	e7fe      	b.n	807069e <vTaskSwitchContext+0x3e>
 80706a0:	68fb      	ldr	r3, [r7, #12]
 80706a2:	3b01      	subs	r3, #1
 80706a4:	60fb      	str	r3, [r7, #12]
 80706a6:	491d      	ldr	r1, [pc, #116]	; (807071c <vTaskSwitchContext+0xbc>)
 80706a8:	68fa      	ldr	r2, [r7, #12]
 80706aa:	4613      	mov	r3, r2
 80706ac:	009b      	lsls	r3, r3, #2
 80706ae:	4413      	add	r3, r2
 80706b0:	009b      	lsls	r3, r3, #2
 80706b2:	440b      	add	r3, r1
 80706b4:	681b      	ldr	r3, [r3, #0]
 80706b6:	2b00      	cmp	r3, #0
 80706b8:	d0e4      	beq.n	8070684 <vTaskSwitchContext+0x24>
 80706ba:	68fa      	ldr	r2, [r7, #12]
 80706bc:	4613      	mov	r3, r2
 80706be:	009b      	lsls	r3, r3, #2
 80706c0:	4413      	add	r3, r2
 80706c2:	009b      	lsls	r3, r3, #2
 80706c4:	4a15      	ldr	r2, [pc, #84]	; (807071c <vTaskSwitchContext+0xbc>)
 80706c6:	4413      	add	r3, r2
 80706c8:	60bb      	str	r3, [r7, #8]
 80706ca:	68bb      	ldr	r3, [r7, #8]
 80706cc:	685b      	ldr	r3, [r3, #4]
 80706ce:	685a      	ldr	r2, [r3, #4]
 80706d0:	68bb      	ldr	r3, [r7, #8]
 80706d2:	605a      	str	r2, [r3, #4]
 80706d4:	68bb      	ldr	r3, [r7, #8]
 80706d6:	685a      	ldr	r2, [r3, #4]
 80706d8:	68bb      	ldr	r3, [r7, #8]
 80706da:	3308      	adds	r3, #8
 80706dc:	429a      	cmp	r2, r3
 80706de:	d104      	bne.n	80706ea <vTaskSwitchContext+0x8a>
 80706e0:	68bb      	ldr	r3, [r7, #8]
 80706e2:	685b      	ldr	r3, [r3, #4]
 80706e4:	685a      	ldr	r2, [r3, #4]
 80706e6:	68bb      	ldr	r3, [r7, #8]
 80706e8:	605a      	str	r2, [r3, #4]
 80706ea:	68bb      	ldr	r3, [r7, #8]
 80706ec:	685b      	ldr	r3, [r3, #4]
 80706ee:	68db      	ldr	r3, [r3, #12]
 80706f0:	4a0b      	ldr	r2, [pc, #44]	; (8070720 <vTaskSwitchContext+0xc0>)
 80706f2:	6013      	str	r3, [r2, #0]
 80706f4:	4a08      	ldr	r2, [pc, #32]	; (8070718 <vTaskSwitchContext+0xb8>)
 80706f6:	68fb      	ldr	r3, [r7, #12]
 80706f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80706fa:	4b09      	ldr	r3, [pc, #36]	; (8070720 <vTaskSwitchContext+0xc0>)
 80706fc:	681b      	ldr	r3, [r3, #0]
 80706fe:	3354      	adds	r3, #84	; 0x54
 8070700:	4a08      	ldr	r2, [pc, #32]	; (8070724 <vTaskSwitchContext+0xc4>)
 8070702:	6013      	str	r3, [r2, #0]
}
 8070704:	bf00      	nop
 8070706:	3714      	adds	r7, #20
 8070708:	46bd      	mov	sp, r7
 807070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807070e:	4770      	bx	lr
 8070710:	200010d0 	.word	0x200010d0
 8070714:	200010bc 	.word	0x200010bc
 8070718:	200010b0 	.word	0x200010b0
 807071c:	20000bd8 	.word	0x20000bd8
 8070720:	20000bd4 	.word	0x20000bd4
 8070724:	20000028 	.word	0x20000028

08070728 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8070728:	b580      	push	{r7, lr}
 807072a:	b084      	sub	sp, #16
 807072c:	af00      	add	r7, sp, #0
 807072e:	6078      	str	r0, [r7, #4]
 8070730:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8070732:	687b      	ldr	r3, [r7, #4]
 8070734:	2b00      	cmp	r3, #0
 8070736:	d10a      	bne.n	807074e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8070738:	f04f 0350 	mov.w	r3, #80	; 0x50
 807073c:	f383 8811 	msr	BASEPRI, r3
 8070740:	f3bf 8f6f 	isb	sy
 8070744:	f3bf 8f4f 	dsb	sy
 8070748:	60fb      	str	r3, [r7, #12]
}
 807074a:	bf00      	nop
 807074c:	e7fe      	b.n	807074c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 807074e:	4b07      	ldr	r3, [pc, #28]	; (807076c <vTaskPlaceOnEventList+0x44>)
 8070750:	681b      	ldr	r3, [r3, #0]
 8070752:	3318      	adds	r3, #24
 8070754:	4619      	mov	r1, r3
 8070756:	6878      	ldr	r0, [r7, #4]
 8070758:	f7fe fa89 	bl	806ec6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 807075c:	2101      	movs	r1, #1
 807075e:	6838      	ldr	r0, [r7, #0]
 8070760:	f000 fd90 	bl	8071284 <prvAddCurrentTaskToDelayedList>
}
 8070764:	bf00      	nop
 8070766:	3710      	adds	r7, #16
 8070768:	46bd      	mov	sp, r7
 807076a:	bd80      	pop	{r7, pc}
 807076c:	20000bd4 	.word	0x20000bd4

08070770 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8070770:	b580      	push	{r7, lr}
 8070772:	b086      	sub	sp, #24
 8070774:	af00      	add	r7, sp, #0
 8070776:	60f8      	str	r0, [r7, #12]
 8070778:	60b9      	str	r1, [r7, #8]
 807077a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 807077c:	68fb      	ldr	r3, [r7, #12]
 807077e:	2b00      	cmp	r3, #0
 8070780:	d10a      	bne.n	8070798 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8070782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070786:	f383 8811 	msr	BASEPRI, r3
 807078a:	f3bf 8f6f 	isb	sy
 807078e:	f3bf 8f4f 	dsb	sy
 8070792:	617b      	str	r3, [r7, #20]
}
 8070794:	bf00      	nop
 8070796:	e7fe      	b.n	8070796 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8070798:	4b0a      	ldr	r3, [pc, #40]	; (80707c4 <vTaskPlaceOnEventListRestricted+0x54>)
 807079a:	681b      	ldr	r3, [r3, #0]
 807079c:	3318      	adds	r3, #24
 807079e:	4619      	mov	r1, r3
 80707a0:	68f8      	ldr	r0, [r7, #12]
 80707a2:	f7fe fa40 	bl	806ec26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80707a6:	687b      	ldr	r3, [r7, #4]
 80707a8:	2b00      	cmp	r3, #0
 80707aa:	d002      	beq.n	80707b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80707ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80707b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80707b2:	6879      	ldr	r1, [r7, #4]
 80707b4:	68b8      	ldr	r0, [r7, #8]
 80707b6:	f000 fd65 	bl	8071284 <prvAddCurrentTaskToDelayedList>
	}
 80707ba:	bf00      	nop
 80707bc:	3718      	adds	r7, #24
 80707be:	46bd      	mov	sp, r7
 80707c0:	bd80      	pop	{r7, pc}
 80707c2:	bf00      	nop
 80707c4:	20000bd4 	.word	0x20000bd4

080707c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80707c8:	b580      	push	{r7, lr}
 80707ca:	b086      	sub	sp, #24
 80707cc:	af00      	add	r7, sp, #0
 80707ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80707d0:	687b      	ldr	r3, [r7, #4]
 80707d2:	68db      	ldr	r3, [r3, #12]
 80707d4:	68db      	ldr	r3, [r3, #12]
 80707d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80707d8:	693b      	ldr	r3, [r7, #16]
 80707da:	2b00      	cmp	r3, #0
 80707dc:	d10a      	bne.n	80707f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80707de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80707e2:	f383 8811 	msr	BASEPRI, r3
 80707e6:	f3bf 8f6f 	isb	sy
 80707ea:	f3bf 8f4f 	dsb	sy
 80707ee:	60fb      	str	r3, [r7, #12]
}
 80707f0:	bf00      	nop
 80707f2:	e7fe      	b.n	80707f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80707f4:	693b      	ldr	r3, [r7, #16]
 80707f6:	3318      	adds	r3, #24
 80707f8:	4618      	mov	r0, r3
 80707fa:	f7fe fa71 	bl	806ece0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80707fe:	4b1e      	ldr	r3, [pc, #120]	; (8070878 <xTaskRemoveFromEventList+0xb0>)
 8070800:	681b      	ldr	r3, [r3, #0]
 8070802:	2b00      	cmp	r3, #0
 8070804:	d11d      	bne.n	8070842 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8070806:	693b      	ldr	r3, [r7, #16]
 8070808:	3304      	adds	r3, #4
 807080a:	4618      	mov	r0, r3
 807080c:	f7fe fa68 	bl	806ece0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8070810:	693b      	ldr	r3, [r7, #16]
 8070812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070814:	4b19      	ldr	r3, [pc, #100]	; (807087c <xTaskRemoveFromEventList+0xb4>)
 8070816:	681b      	ldr	r3, [r3, #0]
 8070818:	429a      	cmp	r2, r3
 807081a:	d903      	bls.n	8070824 <xTaskRemoveFromEventList+0x5c>
 807081c:	693b      	ldr	r3, [r7, #16]
 807081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070820:	4a16      	ldr	r2, [pc, #88]	; (807087c <xTaskRemoveFromEventList+0xb4>)
 8070822:	6013      	str	r3, [r2, #0]
 8070824:	693b      	ldr	r3, [r7, #16]
 8070826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070828:	4613      	mov	r3, r2
 807082a:	009b      	lsls	r3, r3, #2
 807082c:	4413      	add	r3, r2
 807082e:	009b      	lsls	r3, r3, #2
 8070830:	4a13      	ldr	r2, [pc, #76]	; (8070880 <xTaskRemoveFromEventList+0xb8>)
 8070832:	441a      	add	r2, r3
 8070834:	693b      	ldr	r3, [r7, #16]
 8070836:	3304      	adds	r3, #4
 8070838:	4619      	mov	r1, r3
 807083a:	4610      	mov	r0, r2
 807083c:	f7fe f9f3 	bl	806ec26 <vListInsertEnd>
 8070840:	e005      	b.n	807084e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8070842:	693b      	ldr	r3, [r7, #16]
 8070844:	3318      	adds	r3, #24
 8070846:	4619      	mov	r1, r3
 8070848:	480e      	ldr	r0, [pc, #56]	; (8070884 <xTaskRemoveFromEventList+0xbc>)
 807084a:	f7fe f9ec 	bl	806ec26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 807084e:	693b      	ldr	r3, [r7, #16]
 8070850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070852:	4b0d      	ldr	r3, [pc, #52]	; (8070888 <xTaskRemoveFromEventList+0xc0>)
 8070854:	681b      	ldr	r3, [r3, #0]
 8070856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070858:	429a      	cmp	r2, r3
 807085a:	d905      	bls.n	8070868 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 807085c:	2301      	movs	r3, #1
 807085e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8070860:	4b0a      	ldr	r3, [pc, #40]	; (807088c <xTaskRemoveFromEventList+0xc4>)
 8070862:	2201      	movs	r2, #1
 8070864:	601a      	str	r2, [r3, #0]
 8070866:	e001      	b.n	807086c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8070868:	2300      	movs	r3, #0
 807086a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 807086c:	697b      	ldr	r3, [r7, #20]
}
 807086e:	4618      	mov	r0, r3
 8070870:	3718      	adds	r7, #24
 8070872:	46bd      	mov	sp, r7
 8070874:	bd80      	pop	{r7, pc}
 8070876:	bf00      	nop
 8070878:	200010d0 	.word	0x200010d0
 807087c:	200010b0 	.word	0x200010b0
 8070880:	20000bd8 	.word	0x20000bd8
 8070884:	20001068 	.word	0x20001068
 8070888:	20000bd4 	.word	0x20000bd4
 807088c:	200010bc 	.word	0x200010bc

08070890 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8070890:	b480      	push	{r7}
 8070892:	b083      	sub	sp, #12
 8070894:	af00      	add	r7, sp, #0
 8070896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8070898:	4b06      	ldr	r3, [pc, #24]	; (80708b4 <vTaskInternalSetTimeOutState+0x24>)
 807089a:	681a      	ldr	r2, [r3, #0]
 807089c:	687b      	ldr	r3, [r7, #4]
 807089e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80708a0:	4b05      	ldr	r3, [pc, #20]	; (80708b8 <vTaskInternalSetTimeOutState+0x28>)
 80708a2:	681a      	ldr	r2, [r3, #0]
 80708a4:	687b      	ldr	r3, [r7, #4]
 80708a6:	605a      	str	r2, [r3, #4]
}
 80708a8:	bf00      	nop
 80708aa:	370c      	adds	r7, #12
 80708ac:	46bd      	mov	sp, r7
 80708ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80708b2:	4770      	bx	lr
 80708b4:	200010c0 	.word	0x200010c0
 80708b8:	200010ac 	.word	0x200010ac

080708bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80708bc:	b580      	push	{r7, lr}
 80708be:	b088      	sub	sp, #32
 80708c0:	af00      	add	r7, sp, #0
 80708c2:	6078      	str	r0, [r7, #4]
 80708c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80708c6:	687b      	ldr	r3, [r7, #4]
 80708c8:	2b00      	cmp	r3, #0
 80708ca:	d10a      	bne.n	80708e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80708cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80708d0:	f383 8811 	msr	BASEPRI, r3
 80708d4:	f3bf 8f6f 	isb	sy
 80708d8:	f3bf 8f4f 	dsb	sy
 80708dc:	613b      	str	r3, [r7, #16]
}
 80708de:	bf00      	nop
 80708e0:	e7fe      	b.n	80708e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80708e2:	683b      	ldr	r3, [r7, #0]
 80708e4:	2b00      	cmp	r3, #0
 80708e6:	d10a      	bne.n	80708fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80708e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80708ec:	f383 8811 	msr	BASEPRI, r3
 80708f0:	f3bf 8f6f 	isb	sy
 80708f4:	f3bf 8f4f 	dsb	sy
 80708f8:	60fb      	str	r3, [r7, #12]
}
 80708fa:	bf00      	nop
 80708fc:	e7fe      	b.n	80708fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80708fe:	f001 fa49 	bl	8071d94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8070902:	4b1d      	ldr	r3, [pc, #116]	; (8070978 <xTaskCheckForTimeOut+0xbc>)
 8070904:	681b      	ldr	r3, [r3, #0]
 8070906:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8070908:	687b      	ldr	r3, [r7, #4]
 807090a:	685b      	ldr	r3, [r3, #4]
 807090c:	69ba      	ldr	r2, [r7, #24]
 807090e:	1ad3      	subs	r3, r2, r3
 8070910:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8070912:	683b      	ldr	r3, [r7, #0]
 8070914:	681b      	ldr	r3, [r3, #0]
 8070916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 807091a:	d102      	bne.n	8070922 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 807091c:	2300      	movs	r3, #0
 807091e:	61fb      	str	r3, [r7, #28]
 8070920:	e023      	b.n	807096a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8070922:	687b      	ldr	r3, [r7, #4]
 8070924:	681a      	ldr	r2, [r3, #0]
 8070926:	4b15      	ldr	r3, [pc, #84]	; (807097c <xTaskCheckForTimeOut+0xc0>)
 8070928:	681b      	ldr	r3, [r3, #0]
 807092a:	429a      	cmp	r2, r3
 807092c:	d007      	beq.n	807093e <xTaskCheckForTimeOut+0x82>
 807092e:	687b      	ldr	r3, [r7, #4]
 8070930:	685b      	ldr	r3, [r3, #4]
 8070932:	69ba      	ldr	r2, [r7, #24]
 8070934:	429a      	cmp	r2, r3
 8070936:	d302      	bcc.n	807093e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8070938:	2301      	movs	r3, #1
 807093a:	61fb      	str	r3, [r7, #28]
 807093c:	e015      	b.n	807096a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 807093e:	683b      	ldr	r3, [r7, #0]
 8070940:	681b      	ldr	r3, [r3, #0]
 8070942:	697a      	ldr	r2, [r7, #20]
 8070944:	429a      	cmp	r2, r3
 8070946:	d20b      	bcs.n	8070960 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8070948:	683b      	ldr	r3, [r7, #0]
 807094a:	681a      	ldr	r2, [r3, #0]
 807094c:	697b      	ldr	r3, [r7, #20]
 807094e:	1ad2      	subs	r2, r2, r3
 8070950:	683b      	ldr	r3, [r7, #0]
 8070952:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8070954:	6878      	ldr	r0, [r7, #4]
 8070956:	f7ff ff9b 	bl	8070890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 807095a:	2300      	movs	r3, #0
 807095c:	61fb      	str	r3, [r7, #28]
 807095e:	e004      	b.n	807096a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8070960:	683b      	ldr	r3, [r7, #0]
 8070962:	2200      	movs	r2, #0
 8070964:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8070966:	2301      	movs	r3, #1
 8070968:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 807096a:	f001 fa43 	bl	8071df4 <vPortExitCritical>

	return xReturn;
 807096e:	69fb      	ldr	r3, [r7, #28]
}
 8070970:	4618      	mov	r0, r3
 8070972:	3720      	adds	r7, #32
 8070974:	46bd      	mov	sp, r7
 8070976:	bd80      	pop	{r7, pc}
 8070978:	200010ac 	.word	0x200010ac
 807097c:	200010c0 	.word	0x200010c0

08070980 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8070980:	b480      	push	{r7}
 8070982:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8070984:	4b03      	ldr	r3, [pc, #12]	; (8070994 <vTaskMissedYield+0x14>)
 8070986:	2201      	movs	r2, #1
 8070988:	601a      	str	r2, [r3, #0]
}
 807098a:	bf00      	nop
 807098c:	46bd      	mov	sp, r7
 807098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070992:	4770      	bx	lr
 8070994:	200010bc 	.word	0x200010bc

08070998 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8070998:	b580      	push	{r7, lr}
 807099a:	b082      	sub	sp, #8
 807099c:	af00      	add	r7, sp, #0
 807099e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80709a0:	f000 f852 	bl	8070a48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80709a4:	4b06      	ldr	r3, [pc, #24]	; (80709c0 <prvIdleTask+0x28>)
 80709a6:	681b      	ldr	r3, [r3, #0]
 80709a8:	2b01      	cmp	r3, #1
 80709aa:	d9f9      	bls.n	80709a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80709ac:	4b05      	ldr	r3, [pc, #20]	; (80709c4 <prvIdleTask+0x2c>)
 80709ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80709b2:	601a      	str	r2, [r3, #0]
 80709b4:	f3bf 8f4f 	dsb	sy
 80709b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80709bc:	e7f0      	b.n	80709a0 <prvIdleTask+0x8>
 80709be:	bf00      	nop
 80709c0:	20000bd8 	.word	0x20000bd8
 80709c4:	e000ed04 	.word	0xe000ed04

080709c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80709c8:	b580      	push	{r7, lr}
 80709ca:	b082      	sub	sp, #8
 80709cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80709ce:	2300      	movs	r3, #0
 80709d0:	607b      	str	r3, [r7, #4]
 80709d2:	e00c      	b.n	80709ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80709d4:	687a      	ldr	r2, [r7, #4]
 80709d6:	4613      	mov	r3, r2
 80709d8:	009b      	lsls	r3, r3, #2
 80709da:	4413      	add	r3, r2
 80709dc:	009b      	lsls	r3, r3, #2
 80709de:	4a12      	ldr	r2, [pc, #72]	; (8070a28 <prvInitialiseTaskLists+0x60>)
 80709e0:	4413      	add	r3, r2
 80709e2:	4618      	mov	r0, r3
 80709e4:	f7fe f8f2 	bl	806ebcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80709e8:	687b      	ldr	r3, [r7, #4]
 80709ea:	3301      	adds	r3, #1
 80709ec:	607b      	str	r3, [r7, #4]
 80709ee:	687b      	ldr	r3, [r7, #4]
 80709f0:	2b37      	cmp	r3, #55	; 0x37
 80709f2:	d9ef      	bls.n	80709d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80709f4:	480d      	ldr	r0, [pc, #52]	; (8070a2c <prvInitialiseTaskLists+0x64>)
 80709f6:	f7fe f8e9 	bl	806ebcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80709fa:	480d      	ldr	r0, [pc, #52]	; (8070a30 <prvInitialiseTaskLists+0x68>)
 80709fc:	f7fe f8e6 	bl	806ebcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8070a00:	480c      	ldr	r0, [pc, #48]	; (8070a34 <prvInitialiseTaskLists+0x6c>)
 8070a02:	f7fe f8e3 	bl	806ebcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8070a06:	480c      	ldr	r0, [pc, #48]	; (8070a38 <prvInitialiseTaskLists+0x70>)
 8070a08:	f7fe f8e0 	bl	806ebcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8070a0c:	480b      	ldr	r0, [pc, #44]	; (8070a3c <prvInitialiseTaskLists+0x74>)
 8070a0e:	f7fe f8dd 	bl	806ebcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8070a12:	4b0b      	ldr	r3, [pc, #44]	; (8070a40 <prvInitialiseTaskLists+0x78>)
 8070a14:	4a05      	ldr	r2, [pc, #20]	; (8070a2c <prvInitialiseTaskLists+0x64>)
 8070a16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8070a18:	4b0a      	ldr	r3, [pc, #40]	; (8070a44 <prvInitialiseTaskLists+0x7c>)
 8070a1a:	4a05      	ldr	r2, [pc, #20]	; (8070a30 <prvInitialiseTaskLists+0x68>)
 8070a1c:	601a      	str	r2, [r3, #0]
}
 8070a1e:	bf00      	nop
 8070a20:	3708      	adds	r7, #8
 8070a22:	46bd      	mov	sp, r7
 8070a24:	bd80      	pop	{r7, pc}
 8070a26:	bf00      	nop
 8070a28:	20000bd8 	.word	0x20000bd8
 8070a2c:	20001038 	.word	0x20001038
 8070a30:	2000104c 	.word	0x2000104c
 8070a34:	20001068 	.word	0x20001068
 8070a38:	2000107c 	.word	0x2000107c
 8070a3c:	20001094 	.word	0x20001094
 8070a40:	20001060 	.word	0x20001060
 8070a44:	20001064 	.word	0x20001064

08070a48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8070a48:	b580      	push	{r7, lr}
 8070a4a:	b082      	sub	sp, #8
 8070a4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8070a4e:	e019      	b.n	8070a84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8070a50:	f001 f9a0 	bl	8071d94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070a54:	4b10      	ldr	r3, [pc, #64]	; (8070a98 <prvCheckTasksWaitingTermination+0x50>)
 8070a56:	68db      	ldr	r3, [r3, #12]
 8070a58:	68db      	ldr	r3, [r3, #12]
 8070a5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8070a5c:	687b      	ldr	r3, [r7, #4]
 8070a5e:	3304      	adds	r3, #4
 8070a60:	4618      	mov	r0, r3
 8070a62:	f7fe f93d 	bl	806ece0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8070a66:	4b0d      	ldr	r3, [pc, #52]	; (8070a9c <prvCheckTasksWaitingTermination+0x54>)
 8070a68:	681b      	ldr	r3, [r3, #0]
 8070a6a:	3b01      	subs	r3, #1
 8070a6c:	4a0b      	ldr	r2, [pc, #44]	; (8070a9c <prvCheckTasksWaitingTermination+0x54>)
 8070a6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8070a70:	4b0b      	ldr	r3, [pc, #44]	; (8070aa0 <prvCheckTasksWaitingTermination+0x58>)
 8070a72:	681b      	ldr	r3, [r3, #0]
 8070a74:	3b01      	subs	r3, #1
 8070a76:	4a0a      	ldr	r2, [pc, #40]	; (8070aa0 <prvCheckTasksWaitingTermination+0x58>)
 8070a78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8070a7a:	f001 f9bb 	bl	8071df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8070a7e:	6878      	ldr	r0, [r7, #4]
 8070a80:	f000 f810 	bl	8070aa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8070a84:	4b06      	ldr	r3, [pc, #24]	; (8070aa0 <prvCheckTasksWaitingTermination+0x58>)
 8070a86:	681b      	ldr	r3, [r3, #0]
 8070a88:	2b00      	cmp	r3, #0
 8070a8a:	d1e1      	bne.n	8070a50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8070a8c:	bf00      	nop
 8070a8e:	bf00      	nop
 8070a90:	3708      	adds	r7, #8
 8070a92:	46bd      	mov	sp, r7
 8070a94:	bd80      	pop	{r7, pc}
 8070a96:	bf00      	nop
 8070a98:	2000107c 	.word	0x2000107c
 8070a9c:	200010a8 	.word	0x200010a8
 8070aa0:	20001090 	.word	0x20001090

08070aa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8070aa4:	b580      	push	{r7, lr}
 8070aa6:	b084      	sub	sp, #16
 8070aa8:	af00      	add	r7, sp, #0
 8070aaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8070aac:	687b      	ldr	r3, [r7, #4]
 8070aae:	3354      	adds	r3, #84	; 0x54
 8070ab0:	4618      	mov	r0, r3
 8070ab2:	f002 fc97 	bl	80733e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8070ab6:	687b      	ldr	r3, [r7, #4]
 8070ab8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8070abc:	2b00      	cmp	r3, #0
 8070abe:	d108      	bne.n	8070ad2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8070ac0:	687b      	ldr	r3, [r7, #4]
 8070ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8070ac4:	4618      	mov	r0, r3
 8070ac6:	f001 fb53 	bl	8072170 <vPortFree>
				vPortFree( pxTCB );
 8070aca:	6878      	ldr	r0, [r7, #4]
 8070acc:	f001 fb50 	bl	8072170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8070ad0:	e018      	b.n	8070b04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8070ad2:	687b      	ldr	r3, [r7, #4]
 8070ad4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8070ad8:	2b01      	cmp	r3, #1
 8070ada:	d103      	bne.n	8070ae4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8070adc:	6878      	ldr	r0, [r7, #4]
 8070ade:	f001 fb47 	bl	8072170 <vPortFree>
	}
 8070ae2:	e00f      	b.n	8070b04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8070ae4:	687b      	ldr	r3, [r7, #4]
 8070ae6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8070aea:	2b02      	cmp	r3, #2
 8070aec:	d00a      	beq.n	8070b04 <prvDeleteTCB+0x60>
	__asm volatile
 8070aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070af2:	f383 8811 	msr	BASEPRI, r3
 8070af6:	f3bf 8f6f 	isb	sy
 8070afa:	f3bf 8f4f 	dsb	sy
 8070afe:	60fb      	str	r3, [r7, #12]
}
 8070b00:	bf00      	nop
 8070b02:	e7fe      	b.n	8070b02 <prvDeleteTCB+0x5e>
	}
 8070b04:	bf00      	nop
 8070b06:	3710      	adds	r7, #16
 8070b08:	46bd      	mov	sp, r7
 8070b0a:	bd80      	pop	{r7, pc}

08070b0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8070b0c:	b480      	push	{r7}
 8070b0e:	b083      	sub	sp, #12
 8070b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8070b12:	4b0c      	ldr	r3, [pc, #48]	; (8070b44 <prvResetNextTaskUnblockTime+0x38>)
 8070b14:	681b      	ldr	r3, [r3, #0]
 8070b16:	681b      	ldr	r3, [r3, #0]
 8070b18:	2b00      	cmp	r3, #0
 8070b1a:	d104      	bne.n	8070b26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8070b1c:	4b0a      	ldr	r3, [pc, #40]	; (8070b48 <prvResetNextTaskUnblockTime+0x3c>)
 8070b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8070b22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8070b24:	e008      	b.n	8070b38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8070b26:	4b07      	ldr	r3, [pc, #28]	; (8070b44 <prvResetNextTaskUnblockTime+0x38>)
 8070b28:	681b      	ldr	r3, [r3, #0]
 8070b2a:	68db      	ldr	r3, [r3, #12]
 8070b2c:	68db      	ldr	r3, [r3, #12]
 8070b2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8070b30:	687b      	ldr	r3, [r7, #4]
 8070b32:	685b      	ldr	r3, [r3, #4]
 8070b34:	4a04      	ldr	r2, [pc, #16]	; (8070b48 <prvResetNextTaskUnblockTime+0x3c>)
 8070b36:	6013      	str	r3, [r2, #0]
}
 8070b38:	bf00      	nop
 8070b3a:	370c      	adds	r7, #12
 8070b3c:	46bd      	mov	sp, r7
 8070b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070b42:	4770      	bx	lr
 8070b44:	20001060 	.word	0x20001060
 8070b48:	200010c8 	.word	0x200010c8

08070b4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8070b4c:	b480      	push	{r7}
 8070b4e:	b083      	sub	sp, #12
 8070b50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8070b52:	4b05      	ldr	r3, [pc, #20]	; (8070b68 <xTaskGetCurrentTaskHandle+0x1c>)
 8070b54:	681b      	ldr	r3, [r3, #0]
 8070b56:	607b      	str	r3, [r7, #4]

		return xReturn;
 8070b58:	687b      	ldr	r3, [r7, #4]
	}
 8070b5a:	4618      	mov	r0, r3
 8070b5c:	370c      	adds	r7, #12
 8070b5e:	46bd      	mov	sp, r7
 8070b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070b64:	4770      	bx	lr
 8070b66:	bf00      	nop
 8070b68:	20000bd4 	.word	0x20000bd4

08070b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8070b6c:	b480      	push	{r7}
 8070b6e:	b083      	sub	sp, #12
 8070b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8070b72:	4b0b      	ldr	r3, [pc, #44]	; (8070ba0 <xTaskGetSchedulerState+0x34>)
 8070b74:	681b      	ldr	r3, [r3, #0]
 8070b76:	2b00      	cmp	r3, #0
 8070b78:	d102      	bne.n	8070b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8070b7a:	2301      	movs	r3, #1
 8070b7c:	607b      	str	r3, [r7, #4]
 8070b7e:	e008      	b.n	8070b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8070b80:	4b08      	ldr	r3, [pc, #32]	; (8070ba4 <xTaskGetSchedulerState+0x38>)
 8070b82:	681b      	ldr	r3, [r3, #0]
 8070b84:	2b00      	cmp	r3, #0
 8070b86:	d102      	bne.n	8070b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8070b88:	2302      	movs	r3, #2
 8070b8a:	607b      	str	r3, [r7, #4]
 8070b8c:	e001      	b.n	8070b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8070b8e:	2300      	movs	r3, #0
 8070b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8070b92:	687b      	ldr	r3, [r7, #4]
	}
 8070b94:	4618      	mov	r0, r3
 8070b96:	370c      	adds	r7, #12
 8070b98:	46bd      	mov	sp, r7
 8070b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070b9e:	4770      	bx	lr
 8070ba0:	200010b4 	.word	0x200010b4
 8070ba4:	200010d0 	.word	0x200010d0

08070ba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8070ba8:	b580      	push	{r7, lr}
 8070baa:	b084      	sub	sp, #16
 8070bac:	af00      	add	r7, sp, #0
 8070bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8070bb0:	687b      	ldr	r3, [r7, #4]
 8070bb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8070bb4:	2300      	movs	r3, #0
 8070bb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8070bb8:	687b      	ldr	r3, [r7, #4]
 8070bba:	2b00      	cmp	r3, #0
 8070bbc:	d051      	beq.n	8070c62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8070bbe:	68bb      	ldr	r3, [r7, #8]
 8070bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070bc2:	4b2a      	ldr	r3, [pc, #168]	; (8070c6c <xTaskPriorityInherit+0xc4>)
 8070bc4:	681b      	ldr	r3, [r3, #0]
 8070bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070bc8:	429a      	cmp	r2, r3
 8070bca:	d241      	bcs.n	8070c50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8070bcc:	68bb      	ldr	r3, [r7, #8]
 8070bce:	699b      	ldr	r3, [r3, #24]
 8070bd0:	2b00      	cmp	r3, #0
 8070bd2:	db06      	blt.n	8070be2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8070bd4:	4b25      	ldr	r3, [pc, #148]	; (8070c6c <xTaskPriorityInherit+0xc4>)
 8070bd6:	681b      	ldr	r3, [r3, #0]
 8070bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8070bde:	68bb      	ldr	r3, [r7, #8]
 8070be0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8070be2:	68bb      	ldr	r3, [r7, #8]
 8070be4:	6959      	ldr	r1, [r3, #20]
 8070be6:	68bb      	ldr	r3, [r7, #8]
 8070be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070bea:	4613      	mov	r3, r2
 8070bec:	009b      	lsls	r3, r3, #2
 8070bee:	4413      	add	r3, r2
 8070bf0:	009b      	lsls	r3, r3, #2
 8070bf2:	4a1f      	ldr	r2, [pc, #124]	; (8070c70 <xTaskPriorityInherit+0xc8>)
 8070bf4:	4413      	add	r3, r2
 8070bf6:	4299      	cmp	r1, r3
 8070bf8:	d122      	bne.n	8070c40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8070bfa:	68bb      	ldr	r3, [r7, #8]
 8070bfc:	3304      	adds	r3, #4
 8070bfe:	4618      	mov	r0, r3
 8070c00:	f7fe f86e 	bl	806ece0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8070c04:	4b19      	ldr	r3, [pc, #100]	; (8070c6c <xTaskPriorityInherit+0xc4>)
 8070c06:	681b      	ldr	r3, [r3, #0]
 8070c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070c0a:	68bb      	ldr	r3, [r7, #8]
 8070c0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8070c0e:	68bb      	ldr	r3, [r7, #8]
 8070c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070c12:	4b18      	ldr	r3, [pc, #96]	; (8070c74 <xTaskPriorityInherit+0xcc>)
 8070c14:	681b      	ldr	r3, [r3, #0]
 8070c16:	429a      	cmp	r2, r3
 8070c18:	d903      	bls.n	8070c22 <xTaskPriorityInherit+0x7a>
 8070c1a:	68bb      	ldr	r3, [r7, #8]
 8070c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070c1e:	4a15      	ldr	r2, [pc, #84]	; (8070c74 <xTaskPriorityInherit+0xcc>)
 8070c20:	6013      	str	r3, [r2, #0]
 8070c22:	68bb      	ldr	r3, [r7, #8]
 8070c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070c26:	4613      	mov	r3, r2
 8070c28:	009b      	lsls	r3, r3, #2
 8070c2a:	4413      	add	r3, r2
 8070c2c:	009b      	lsls	r3, r3, #2
 8070c2e:	4a10      	ldr	r2, [pc, #64]	; (8070c70 <xTaskPriorityInherit+0xc8>)
 8070c30:	441a      	add	r2, r3
 8070c32:	68bb      	ldr	r3, [r7, #8]
 8070c34:	3304      	adds	r3, #4
 8070c36:	4619      	mov	r1, r3
 8070c38:	4610      	mov	r0, r2
 8070c3a:	f7fd fff4 	bl	806ec26 <vListInsertEnd>
 8070c3e:	e004      	b.n	8070c4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8070c40:	4b0a      	ldr	r3, [pc, #40]	; (8070c6c <xTaskPriorityInherit+0xc4>)
 8070c42:	681b      	ldr	r3, [r3, #0]
 8070c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070c46:	68bb      	ldr	r3, [r7, #8]
 8070c48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8070c4a:	2301      	movs	r3, #1
 8070c4c:	60fb      	str	r3, [r7, #12]
 8070c4e:	e008      	b.n	8070c62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8070c50:	68bb      	ldr	r3, [r7, #8]
 8070c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8070c54:	4b05      	ldr	r3, [pc, #20]	; (8070c6c <xTaskPriorityInherit+0xc4>)
 8070c56:	681b      	ldr	r3, [r3, #0]
 8070c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070c5a:	429a      	cmp	r2, r3
 8070c5c:	d201      	bcs.n	8070c62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8070c5e:	2301      	movs	r3, #1
 8070c60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8070c62:	68fb      	ldr	r3, [r7, #12]
	}
 8070c64:	4618      	mov	r0, r3
 8070c66:	3710      	adds	r7, #16
 8070c68:	46bd      	mov	sp, r7
 8070c6a:	bd80      	pop	{r7, pc}
 8070c6c:	20000bd4 	.word	0x20000bd4
 8070c70:	20000bd8 	.word	0x20000bd8
 8070c74:	200010b0 	.word	0x200010b0

08070c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8070c78:	b580      	push	{r7, lr}
 8070c7a:	b086      	sub	sp, #24
 8070c7c:	af00      	add	r7, sp, #0
 8070c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8070c80:	687b      	ldr	r3, [r7, #4]
 8070c82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8070c84:	2300      	movs	r3, #0
 8070c86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8070c88:	687b      	ldr	r3, [r7, #4]
 8070c8a:	2b00      	cmp	r3, #0
 8070c8c:	d056      	beq.n	8070d3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8070c8e:	4b2e      	ldr	r3, [pc, #184]	; (8070d48 <xTaskPriorityDisinherit+0xd0>)
 8070c90:	681b      	ldr	r3, [r3, #0]
 8070c92:	693a      	ldr	r2, [r7, #16]
 8070c94:	429a      	cmp	r2, r3
 8070c96:	d00a      	beq.n	8070cae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8070c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070c9c:	f383 8811 	msr	BASEPRI, r3
 8070ca0:	f3bf 8f6f 	isb	sy
 8070ca4:	f3bf 8f4f 	dsb	sy
 8070ca8:	60fb      	str	r3, [r7, #12]
}
 8070caa:	bf00      	nop
 8070cac:	e7fe      	b.n	8070cac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8070cae:	693b      	ldr	r3, [r7, #16]
 8070cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070cb2:	2b00      	cmp	r3, #0
 8070cb4:	d10a      	bne.n	8070ccc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8070cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070cba:	f383 8811 	msr	BASEPRI, r3
 8070cbe:	f3bf 8f6f 	isb	sy
 8070cc2:	f3bf 8f4f 	dsb	sy
 8070cc6:	60bb      	str	r3, [r7, #8]
}
 8070cc8:	bf00      	nop
 8070cca:	e7fe      	b.n	8070cca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8070ccc:	693b      	ldr	r3, [r7, #16]
 8070cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070cd0:	1e5a      	subs	r2, r3, #1
 8070cd2:	693b      	ldr	r3, [r7, #16]
 8070cd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8070cd6:	693b      	ldr	r3, [r7, #16]
 8070cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070cda:	693b      	ldr	r3, [r7, #16]
 8070cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8070cde:	429a      	cmp	r2, r3
 8070ce0:	d02c      	beq.n	8070d3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8070ce2:	693b      	ldr	r3, [r7, #16]
 8070ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070ce6:	2b00      	cmp	r3, #0
 8070ce8:	d128      	bne.n	8070d3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8070cea:	693b      	ldr	r3, [r7, #16]
 8070cec:	3304      	adds	r3, #4
 8070cee:	4618      	mov	r0, r3
 8070cf0:	f7fd fff6 	bl	806ece0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8070cf4:	693b      	ldr	r3, [r7, #16]
 8070cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8070cf8:	693b      	ldr	r3, [r7, #16]
 8070cfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8070cfc:	693b      	ldr	r3, [r7, #16]
 8070cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070d00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8070d04:	693b      	ldr	r3, [r7, #16]
 8070d06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8070d08:	693b      	ldr	r3, [r7, #16]
 8070d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070d0c:	4b0f      	ldr	r3, [pc, #60]	; (8070d4c <xTaskPriorityDisinherit+0xd4>)
 8070d0e:	681b      	ldr	r3, [r3, #0]
 8070d10:	429a      	cmp	r2, r3
 8070d12:	d903      	bls.n	8070d1c <xTaskPriorityDisinherit+0xa4>
 8070d14:	693b      	ldr	r3, [r7, #16]
 8070d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070d18:	4a0c      	ldr	r2, [pc, #48]	; (8070d4c <xTaskPriorityDisinherit+0xd4>)
 8070d1a:	6013      	str	r3, [r2, #0]
 8070d1c:	693b      	ldr	r3, [r7, #16]
 8070d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070d20:	4613      	mov	r3, r2
 8070d22:	009b      	lsls	r3, r3, #2
 8070d24:	4413      	add	r3, r2
 8070d26:	009b      	lsls	r3, r3, #2
 8070d28:	4a09      	ldr	r2, [pc, #36]	; (8070d50 <xTaskPriorityDisinherit+0xd8>)
 8070d2a:	441a      	add	r2, r3
 8070d2c:	693b      	ldr	r3, [r7, #16]
 8070d2e:	3304      	adds	r3, #4
 8070d30:	4619      	mov	r1, r3
 8070d32:	4610      	mov	r0, r2
 8070d34:	f7fd ff77 	bl	806ec26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8070d38:	2301      	movs	r3, #1
 8070d3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8070d3c:	697b      	ldr	r3, [r7, #20]
	}
 8070d3e:	4618      	mov	r0, r3
 8070d40:	3718      	adds	r7, #24
 8070d42:	46bd      	mov	sp, r7
 8070d44:	bd80      	pop	{r7, pc}
 8070d46:	bf00      	nop
 8070d48:	20000bd4 	.word	0x20000bd4
 8070d4c:	200010b0 	.word	0x200010b0
 8070d50:	20000bd8 	.word	0x20000bd8

08070d54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8070d54:	b580      	push	{r7, lr}
 8070d56:	b088      	sub	sp, #32
 8070d58:	af00      	add	r7, sp, #0
 8070d5a:	6078      	str	r0, [r7, #4]
 8070d5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8070d5e:	687b      	ldr	r3, [r7, #4]
 8070d60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8070d62:	2301      	movs	r3, #1
 8070d64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8070d66:	687b      	ldr	r3, [r7, #4]
 8070d68:	2b00      	cmp	r3, #0
 8070d6a:	d06a      	beq.n	8070e42 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8070d6c:	69bb      	ldr	r3, [r7, #24]
 8070d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070d70:	2b00      	cmp	r3, #0
 8070d72:	d10a      	bne.n	8070d8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8070d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070d78:	f383 8811 	msr	BASEPRI, r3
 8070d7c:	f3bf 8f6f 	isb	sy
 8070d80:	f3bf 8f4f 	dsb	sy
 8070d84:	60fb      	str	r3, [r7, #12]
}
 8070d86:	bf00      	nop
 8070d88:	e7fe      	b.n	8070d88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8070d8a:	69bb      	ldr	r3, [r7, #24]
 8070d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8070d8e:	683a      	ldr	r2, [r7, #0]
 8070d90:	429a      	cmp	r2, r3
 8070d92:	d902      	bls.n	8070d9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8070d94:	683b      	ldr	r3, [r7, #0]
 8070d96:	61fb      	str	r3, [r7, #28]
 8070d98:	e002      	b.n	8070da0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8070d9a:	69bb      	ldr	r3, [r7, #24]
 8070d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8070d9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8070da0:	69bb      	ldr	r3, [r7, #24]
 8070da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070da4:	69fa      	ldr	r2, [r7, #28]
 8070da6:	429a      	cmp	r2, r3
 8070da8:	d04b      	beq.n	8070e42 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8070daa:	69bb      	ldr	r3, [r7, #24]
 8070dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8070dae:	697a      	ldr	r2, [r7, #20]
 8070db0:	429a      	cmp	r2, r3
 8070db2:	d146      	bne.n	8070e42 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8070db4:	4b25      	ldr	r3, [pc, #148]	; (8070e4c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8070db6:	681b      	ldr	r3, [r3, #0]
 8070db8:	69ba      	ldr	r2, [r7, #24]
 8070dba:	429a      	cmp	r2, r3
 8070dbc:	d10a      	bne.n	8070dd4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8070dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070dc2:	f383 8811 	msr	BASEPRI, r3
 8070dc6:	f3bf 8f6f 	isb	sy
 8070dca:	f3bf 8f4f 	dsb	sy
 8070dce:	60bb      	str	r3, [r7, #8]
}
 8070dd0:	bf00      	nop
 8070dd2:	e7fe      	b.n	8070dd2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8070dd4:	69bb      	ldr	r3, [r7, #24]
 8070dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070dd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8070dda:	69bb      	ldr	r3, [r7, #24]
 8070ddc:	69fa      	ldr	r2, [r7, #28]
 8070dde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8070de0:	69bb      	ldr	r3, [r7, #24]
 8070de2:	699b      	ldr	r3, [r3, #24]
 8070de4:	2b00      	cmp	r3, #0
 8070de6:	db04      	blt.n	8070df2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8070de8:	69fb      	ldr	r3, [r7, #28]
 8070dea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8070dee:	69bb      	ldr	r3, [r7, #24]
 8070df0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8070df2:	69bb      	ldr	r3, [r7, #24]
 8070df4:	6959      	ldr	r1, [r3, #20]
 8070df6:	693a      	ldr	r2, [r7, #16]
 8070df8:	4613      	mov	r3, r2
 8070dfa:	009b      	lsls	r3, r3, #2
 8070dfc:	4413      	add	r3, r2
 8070dfe:	009b      	lsls	r3, r3, #2
 8070e00:	4a13      	ldr	r2, [pc, #76]	; (8070e50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8070e02:	4413      	add	r3, r2
 8070e04:	4299      	cmp	r1, r3
 8070e06:	d11c      	bne.n	8070e42 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8070e08:	69bb      	ldr	r3, [r7, #24]
 8070e0a:	3304      	adds	r3, #4
 8070e0c:	4618      	mov	r0, r3
 8070e0e:	f7fd ff67 	bl	806ece0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8070e12:	69bb      	ldr	r3, [r7, #24]
 8070e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070e16:	4b0f      	ldr	r3, [pc, #60]	; (8070e54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8070e18:	681b      	ldr	r3, [r3, #0]
 8070e1a:	429a      	cmp	r2, r3
 8070e1c:	d903      	bls.n	8070e26 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8070e1e:	69bb      	ldr	r3, [r7, #24]
 8070e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8070e22:	4a0c      	ldr	r2, [pc, #48]	; (8070e54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8070e24:	6013      	str	r3, [r2, #0]
 8070e26:	69bb      	ldr	r3, [r7, #24]
 8070e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8070e2a:	4613      	mov	r3, r2
 8070e2c:	009b      	lsls	r3, r3, #2
 8070e2e:	4413      	add	r3, r2
 8070e30:	009b      	lsls	r3, r3, #2
 8070e32:	4a07      	ldr	r2, [pc, #28]	; (8070e50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8070e34:	441a      	add	r2, r3
 8070e36:	69bb      	ldr	r3, [r7, #24]
 8070e38:	3304      	adds	r3, #4
 8070e3a:	4619      	mov	r1, r3
 8070e3c:	4610      	mov	r0, r2
 8070e3e:	f7fd fef2 	bl	806ec26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8070e42:	bf00      	nop
 8070e44:	3720      	adds	r7, #32
 8070e46:	46bd      	mov	sp, r7
 8070e48:	bd80      	pop	{r7, pc}
 8070e4a:	bf00      	nop
 8070e4c:	20000bd4 	.word	0x20000bd4
 8070e50:	20000bd8 	.word	0x20000bd8
 8070e54:	200010b0 	.word	0x200010b0

08070e58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8070e58:	b480      	push	{r7}
 8070e5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8070e5c:	4b07      	ldr	r3, [pc, #28]	; (8070e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8070e5e:	681b      	ldr	r3, [r3, #0]
 8070e60:	2b00      	cmp	r3, #0
 8070e62:	d004      	beq.n	8070e6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8070e64:	4b05      	ldr	r3, [pc, #20]	; (8070e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8070e66:	681b      	ldr	r3, [r3, #0]
 8070e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8070e6a:	3201      	adds	r2, #1
 8070e6c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8070e6e:	4b03      	ldr	r3, [pc, #12]	; (8070e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8070e70:	681b      	ldr	r3, [r3, #0]
	}
 8070e72:	4618      	mov	r0, r3
 8070e74:	46bd      	mov	sp, r7
 8070e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8070e7a:	4770      	bx	lr
 8070e7c:	20000bd4 	.word	0x20000bd4

08070e80 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8070e80:	b580      	push	{r7, lr}
 8070e82:	b086      	sub	sp, #24
 8070e84:	af00      	add	r7, sp, #0
 8070e86:	60f8      	str	r0, [r7, #12]
 8070e88:	60b9      	str	r1, [r7, #8]
 8070e8a:	607a      	str	r2, [r7, #4]
 8070e8c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8070e8e:	f000 ff81 	bl	8071d94 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8070e92:	4b29      	ldr	r3, [pc, #164]	; (8070f38 <xTaskNotifyWait+0xb8>)
 8070e94:	681b      	ldr	r3, [r3, #0]
 8070e96:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8070e9a:	b2db      	uxtb	r3, r3
 8070e9c:	2b02      	cmp	r3, #2
 8070e9e:	d01c      	beq.n	8070eda <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8070ea0:	4b25      	ldr	r3, [pc, #148]	; (8070f38 <xTaskNotifyWait+0xb8>)
 8070ea2:	681b      	ldr	r3, [r3, #0]
 8070ea4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8070ea8:	68fa      	ldr	r2, [r7, #12]
 8070eaa:	43d2      	mvns	r2, r2
 8070eac:	400a      	ands	r2, r1
 8070eae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8070eb2:	4b21      	ldr	r3, [pc, #132]	; (8070f38 <xTaskNotifyWait+0xb8>)
 8070eb4:	681b      	ldr	r3, [r3, #0]
 8070eb6:	2201      	movs	r2, #1
 8070eb8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8070ebc:	683b      	ldr	r3, [r7, #0]
 8070ebe:	2b00      	cmp	r3, #0
 8070ec0:	d00b      	beq.n	8070eda <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8070ec2:	2101      	movs	r1, #1
 8070ec4:	6838      	ldr	r0, [r7, #0]
 8070ec6:	f000 f9dd 	bl	8071284 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8070eca:	4b1c      	ldr	r3, [pc, #112]	; (8070f3c <xTaskNotifyWait+0xbc>)
 8070ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8070ed0:	601a      	str	r2, [r3, #0]
 8070ed2:	f3bf 8f4f 	dsb	sy
 8070ed6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8070eda:	f000 ff8b 	bl	8071df4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8070ede:	f000 ff59 	bl	8071d94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8070ee2:	687b      	ldr	r3, [r7, #4]
 8070ee4:	2b00      	cmp	r3, #0
 8070ee6:	d005      	beq.n	8070ef4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8070ee8:	4b13      	ldr	r3, [pc, #76]	; (8070f38 <xTaskNotifyWait+0xb8>)
 8070eea:	681b      	ldr	r3, [r3, #0]
 8070eec:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8070ef0:	687b      	ldr	r3, [r7, #4]
 8070ef2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8070ef4:	4b10      	ldr	r3, [pc, #64]	; (8070f38 <xTaskNotifyWait+0xb8>)
 8070ef6:	681b      	ldr	r3, [r3, #0]
 8070ef8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8070efc:	b2db      	uxtb	r3, r3
 8070efe:	2b02      	cmp	r3, #2
 8070f00:	d002      	beq.n	8070f08 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8070f02:	2300      	movs	r3, #0
 8070f04:	617b      	str	r3, [r7, #20]
 8070f06:	e00a      	b.n	8070f1e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8070f08:	4b0b      	ldr	r3, [pc, #44]	; (8070f38 <xTaskNotifyWait+0xb8>)
 8070f0a:	681b      	ldr	r3, [r3, #0]
 8070f0c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8070f10:	68ba      	ldr	r2, [r7, #8]
 8070f12:	43d2      	mvns	r2, r2
 8070f14:	400a      	ands	r2, r1
 8070f16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8070f1a:	2301      	movs	r3, #1
 8070f1c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8070f1e:	4b06      	ldr	r3, [pc, #24]	; (8070f38 <xTaskNotifyWait+0xb8>)
 8070f20:	681b      	ldr	r3, [r3, #0]
 8070f22:	2200      	movs	r2, #0
 8070f24:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8070f28:	f000 ff64 	bl	8071df4 <vPortExitCritical>

		return xReturn;
 8070f2c:	697b      	ldr	r3, [r7, #20]
	}
 8070f2e:	4618      	mov	r0, r3
 8070f30:	3718      	adds	r7, #24
 8070f32:	46bd      	mov	sp, r7
 8070f34:	bd80      	pop	{r7, pc}
 8070f36:	bf00      	nop
 8070f38:	20000bd4 	.word	0x20000bd4
 8070f3c:	e000ed04 	.word	0xe000ed04

08070f40 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8070f40:	b580      	push	{r7, lr}
 8070f42:	b08a      	sub	sp, #40	; 0x28
 8070f44:	af00      	add	r7, sp, #0
 8070f46:	60f8      	str	r0, [r7, #12]
 8070f48:	60b9      	str	r1, [r7, #8]
 8070f4a:	603b      	str	r3, [r7, #0]
 8070f4c:	4613      	mov	r3, r2
 8070f4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8070f50:	2301      	movs	r3, #1
 8070f52:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8070f54:	68fb      	ldr	r3, [r7, #12]
 8070f56:	2b00      	cmp	r3, #0
 8070f58:	d10a      	bne.n	8070f70 <xTaskGenericNotify+0x30>
	__asm volatile
 8070f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8070f5e:	f383 8811 	msr	BASEPRI, r3
 8070f62:	f3bf 8f6f 	isb	sy
 8070f66:	f3bf 8f4f 	dsb	sy
 8070f6a:	61bb      	str	r3, [r7, #24]
}
 8070f6c:	bf00      	nop
 8070f6e:	e7fe      	b.n	8070f6e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8070f70:	68fb      	ldr	r3, [r7, #12]
 8070f72:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8070f74:	f000 ff0e 	bl	8071d94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8070f78:	683b      	ldr	r3, [r7, #0]
 8070f7a:	2b00      	cmp	r3, #0
 8070f7c:	d004      	beq.n	8070f88 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8070f7e:	6a3b      	ldr	r3, [r7, #32]
 8070f80:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8070f84:	683b      	ldr	r3, [r7, #0]
 8070f86:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8070f88:	6a3b      	ldr	r3, [r7, #32]
 8070f8a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8070f8e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8070f90:	6a3b      	ldr	r3, [r7, #32]
 8070f92:	2202      	movs	r2, #2
 8070f94:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8070f98:	79fb      	ldrb	r3, [r7, #7]
 8070f9a:	2b04      	cmp	r3, #4
 8070f9c:	d82d      	bhi.n	8070ffa <xTaskGenericNotify+0xba>
 8070f9e:	a201      	add	r2, pc, #4	; (adr r2, 8070fa4 <xTaskGenericNotify+0x64>)
 8070fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8070fa4:	0807101d 	.word	0x0807101d
 8070fa8:	08070fb9 	.word	0x08070fb9
 8070fac:	08070fcb 	.word	0x08070fcb
 8070fb0:	08070fdb 	.word	0x08070fdb
 8070fb4:	08070fe5 	.word	0x08070fe5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8070fb8:	6a3b      	ldr	r3, [r7, #32]
 8070fba:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8070fbe:	68bb      	ldr	r3, [r7, #8]
 8070fc0:	431a      	orrs	r2, r3
 8070fc2:	6a3b      	ldr	r3, [r7, #32]
 8070fc4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8070fc8:	e02b      	b.n	8071022 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8070fca:	6a3b      	ldr	r3, [r7, #32]
 8070fcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8070fd0:	1c5a      	adds	r2, r3, #1
 8070fd2:	6a3b      	ldr	r3, [r7, #32]
 8070fd4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8070fd8:	e023      	b.n	8071022 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8070fda:	6a3b      	ldr	r3, [r7, #32]
 8070fdc:	68ba      	ldr	r2, [r7, #8]
 8070fde:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8070fe2:	e01e      	b.n	8071022 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8070fe4:	7ffb      	ldrb	r3, [r7, #31]
 8070fe6:	2b02      	cmp	r3, #2
 8070fe8:	d004      	beq.n	8070ff4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8070fea:	6a3b      	ldr	r3, [r7, #32]
 8070fec:	68ba      	ldr	r2, [r7, #8]
 8070fee:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8070ff2:	e016      	b.n	8071022 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8070ff4:	2300      	movs	r3, #0
 8070ff6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8070ff8:	e013      	b.n	8071022 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8070ffa:	6a3b      	ldr	r3, [r7, #32]
 8070ffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8071000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8071004:	d00c      	beq.n	8071020 <xTaskGenericNotify+0xe0>
	__asm volatile
 8071006:	f04f 0350 	mov.w	r3, #80	; 0x50
 807100a:	f383 8811 	msr	BASEPRI, r3
 807100e:	f3bf 8f6f 	isb	sy
 8071012:	f3bf 8f4f 	dsb	sy
 8071016:	617b      	str	r3, [r7, #20]
}
 8071018:	bf00      	nop
 807101a:	e7fe      	b.n	807101a <xTaskGenericNotify+0xda>
					break;
 807101c:	bf00      	nop
 807101e:	e000      	b.n	8071022 <xTaskGenericNotify+0xe2>

					break;
 8071020:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8071022:	7ffb      	ldrb	r3, [r7, #31]
 8071024:	2b01      	cmp	r3, #1
 8071026:	d13a      	bne.n	807109e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8071028:	6a3b      	ldr	r3, [r7, #32]
 807102a:	3304      	adds	r3, #4
 807102c:	4618      	mov	r0, r3
 807102e:	f7fd fe57 	bl	806ece0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8071032:	6a3b      	ldr	r3, [r7, #32]
 8071034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8071036:	4b1d      	ldr	r3, [pc, #116]	; (80710ac <xTaskGenericNotify+0x16c>)
 8071038:	681b      	ldr	r3, [r3, #0]
 807103a:	429a      	cmp	r2, r3
 807103c:	d903      	bls.n	8071046 <xTaskGenericNotify+0x106>
 807103e:	6a3b      	ldr	r3, [r7, #32]
 8071040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8071042:	4a1a      	ldr	r2, [pc, #104]	; (80710ac <xTaskGenericNotify+0x16c>)
 8071044:	6013      	str	r3, [r2, #0]
 8071046:	6a3b      	ldr	r3, [r7, #32]
 8071048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 807104a:	4613      	mov	r3, r2
 807104c:	009b      	lsls	r3, r3, #2
 807104e:	4413      	add	r3, r2
 8071050:	009b      	lsls	r3, r3, #2
 8071052:	4a17      	ldr	r2, [pc, #92]	; (80710b0 <xTaskGenericNotify+0x170>)
 8071054:	441a      	add	r2, r3
 8071056:	6a3b      	ldr	r3, [r7, #32]
 8071058:	3304      	adds	r3, #4
 807105a:	4619      	mov	r1, r3
 807105c:	4610      	mov	r0, r2
 807105e:	f7fd fde2 	bl	806ec26 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8071062:	6a3b      	ldr	r3, [r7, #32]
 8071064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8071066:	2b00      	cmp	r3, #0
 8071068:	d00a      	beq.n	8071080 <xTaskGenericNotify+0x140>
	__asm volatile
 807106a:	f04f 0350 	mov.w	r3, #80	; 0x50
 807106e:	f383 8811 	msr	BASEPRI, r3
 8071072:	f3bf 8f6f 	isb	sy
 8071076:	f3bf 8f4f 	dsb	sy
 807107a:	613b      	str	r3, [r7, #16]
}
 807107c:	bf00      	nop
 807107e:	e7fe      	b.n	807107e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8071080:	6a3b      	ldr	r3, [r7, #32]
 8071082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8071084:	4b0b      	ldr	r3, [pc, #44]	; (80710b4 <xTaskGenericNotify+0x174>)
 8071086:	681b      	ldr	r3, [r3, #0]
 8071088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 807108a:	429a      	cmp	r2, r3
 807108c:	d907      	bls.n	807109e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 807108e:	4b0a      	ldr	r3, [pc, #40]	; (80710b8 <xTaskGenericNotify+0x178>)
 8071090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8071094:	601a      	str	r2, [r3, #0]
 8071096:	f3bf 8f4f 	dsb	sy
 807109a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 807109e:	f000 fea9 	bl	8071df4 <vPortExitCritical>

		return xReturn;
 80710a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80710a4:	4618      	mov	r0, r3
 80710a6:	3728      	adds	r7, #40	; 0x28
 80710a8:	46bd      	mov	sp, r7
 80710aa:	bd80      	pop	{r7, pc}
 80710ac:	200010b0 	.word	0x200010b0
 80710b0:	20000bd8 	.word	0x20000bd8
 80710b4:	20000bd4 	.word	0x20000bd4
 80710b8:	e000ed04 	.word	0xe000ed04

080710bc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80710bc:	b580      	push	{r7, lr}
 80710be:	b08e      	sub	sp, #56	; 0x38
 80710c0:	af00      	add	r7, sp, #0
 80710c2:	60f8      	str	r0, [r7, #12]
 80710c4:	60b9      	str	r1, [r7, #8]
 80710c6:	603b      	str	r3, [r7, #0]
 80710c8:	4613      	mov	r3, r2
 80710ca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80710cc:	2301      	movs	r3, #1
 80710ce:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80710d0:	68fb      	ldr	r3, [r7, #12]
 80710d2:	2b00      	cmp	r3, #0
 80710d4:	d10a      	bne.n	80710ec <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80710d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80710da:	f383 8811 	msr	BASEPRI, r3
 80710de:	f3bf 8f6f 	isb	sy
 80710e2:	f3bf 8f4f 	dsb	sy
 80710e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80710e8:	bf00      	nop
 80710ea:	e7fe      	b.n	80710ea <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80710ec:	f000 ff34 	bl	8071f58 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80710f0:	68fb      	ldr	r3, [r7, #12]
 80710f2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80710f4:	f3ef 8211 	mrs	r2, BASEPRI
 80710f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80710fc:	f383 8811 	msr	BASEPRI, r3
 8071100:	f3bf 8f6f 	isb	sy
 8071104:	f3bf 8f4f 	dsb	sy
 8071108:	623a      	str	r2, [r7, #32]
 807110a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 807110c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 807110e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8071110:	683b      	ldr	r3, [r7, #0]
 8071112:	2b00      	cmp	r3, #0
 8071114:	d004      	beq.n	8071120 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8071116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071118:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 807111c:	683b      	ldr	r3, [r7, #0]
 807111e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8071120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071122:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8071126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 807112a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807112c:	2202      	movs	r2, #2
 807112e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8071132:	79fb      	ldrb	r3, [r7, #7]
 8071134:	2b04      	cmp	r3, #4
 8071136:	d82f      	bhi.n	8071198 <xTaskGenericNotifyFromISR+0xdc>
 8071138:	a201      	add	r2, pc, #4	; (adr r2, 8071140 <xTaskGenericNotifyFromISR+0x84>)
 807113a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 807113e:	bf00      	nop
 8071140:	080711bb 	.word	0x080711bb
 8071144:	08071155 	.word	0x08071155
 8071148:	08071167 	.word	0x08071167
 807114c:	08071177 	.word	0x08071177
 8071150:	08071181 	.word	0x08071181
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8071154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071156:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 807115a:	68bb      	ldr	r3, [r7, #8]
 807115c:	431a      	orrs	r2, r3
 807115e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071160:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8071164:	e02c      	b.n	80711c0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8071166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071168:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 807116c:	1c5a      	adds	r2, r3, #1
 807116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071170:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8071174:	e024      	b.n	80711c0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8071176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071178:	68ba      	ldr	r2, [r7, #8]
 807117a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 807117e:	e01f      	b.n	80711c0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8071180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8071184:	2b02      	cmp	r3, #2
 8071186:	d004      	beq.n	8071192 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8071188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807118a:	68ba      	ldr	r2, [r7, #8]
 807118c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8071190:	e016      	b.n	80711c0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8071192:	2300      	movs	r3, #0
 8071194:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8071196:	e013      	b.n	80711c0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8071198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807119a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 807119e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80711a2:	d00c      	beq.n	80711be <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80711a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80711a8:	f383 8811 	msr	BASEPRI, r3
 80711ac:	f3bf 8f6f 	isb	sy
 80711b0:	f3bf 8f4f 	dsb	sy
 80711b4:	61bb      	str	r3, [r7, #24]
}
 80711b6:	bf00      	nop
 80711b8:	e7fe      	b.n	80711b8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80711ba:	bf00      	nop
 80711bc:	e000      	b.n	80711c0 <xTaskGenericNotifyFromISR+0x104>
					break;
 80711be:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80711c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80711c4:	2b01      	cmp	r3, #1
 80711c6:	d146      	bne.n	8071256 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80711c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80711ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80711cc:	2b00      	cmp	r3, #0
 80711ce:	d00a      	beq.n	80711e6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80711d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80711d4:	f383 8811 	msr	BASEPRI, r3
 80711d8:	f3bf 8f6f 	isb	sy
 80711dc:	f3bf 8f4f 	dsb	sy
 80711e0:	617b      	str	r3, [r7, #20]
}
 80711e2:	bf00      	nop
 80711e4:	e7fe      	b.n	80711e4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80711e6:	4b21      	ldr	r3, [pc, #132]	; (807126c <xTaskGenericNotifyFromISR+0x1b0>)
 80711e8:	681b      	ldr	r3, [r3, #0]
 80711ea:	2b00      	cmp	r3, #0
 80711ec:	d11d      	bne.n	807122a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80711ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80711f0:	3304      	adds	r3, #4
 80711f2:	4618      	mov	r0, r3
 80711f4:	f7fd fd74 	bl	806ece0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80711f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80711fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80711fc:	4b1c      	ldr	r3, [pc, #112]	; (8071270 <xTaskGenericNotifyFromISR+0x1b4>)
 80711fe:	681b      	ldr	r3, [r3, #0]
 8071200:	429a      	cmp	r2, r3
 8071202:	d903      	bls.n	807120c <xTaskGenericNotifyFromISR+0x150>
 8071204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8071208:	4a19      	ldr	r2, [pc, #100]	; (8071270 <xTaskGenericNotifyFromISR+0x1b4>)
 807120a:	6013      	str	r3, [r2, #0]
 807120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807120e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8071210:	4613      	mov	r3, r2
 8071212:	009b      	lsls	r3, r3, #2
 8071214:	4413      	add	r3, r2
 8071216:	009b      	lsls	r3, r3, #2
 8071218:	4a16      	ldr	r2, [pc, #88]	; (8071274 <xTaskGenericNotifyFromISR+0x1b8>)
 807121a:	441a      	add	r2, r3
 807121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807121e:	3304      	adds	r3, #4
 8071220:	4619      	mov	r1, r3
 8071222:	4610      	mov	r0, r2
 8071224:	f7fd fcff 	bl	806ec26 <vListInsertEnd>
 8071228:	e005      	b.n	8071236 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 807122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 807122c:	3318      	adds	r3, #24
 807122e:	4619      	mov	r1, r3
 8071230:	4811      	ldr	r0, [pc, #68]	; (8071278 <xTaskGenericNotifyFromISR+0x1bc>)
 8071232:	f7fd fcf8 	bl	806ec26 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8071236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8071238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 807123a:	4b10      	ldr	r3, [pc, #64]	; (807127c <xTaskGenericNotifyFromISR+0x1c0>)
 807123c:	681b      	ldr	r3, [r3, #0]
 807123e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8071240:	429a      	cmp	r2, r3
 8071242:	d908      	bls.n	8071256 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8071244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8071246:	2b00      	cmp	r3, #0
 8071248:	d002      	beq.n	8071250 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 807124a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 807124c:	2201      	movs	r2, #1
 807124e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8071250:	4b0b      	ldr	r3, [pc, #44]	; (8071280 <xTaskGenericNotifyFromISR+0x1c4>)
 8071252:	2201      	movs	r2, #1
 8071254:	601a      	str	r2, [r3, #0]
 8071256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8071258:	613b      	str	r3, [r7, #16]
	__asm volatile
 807125a:	693b      	ldr	r3, [r7, #16]
 807125c:	f383 8811 	msr	BASEPRI, r3
}
 8071260:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8071262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8071264:	4618      	mov	r0, r3
 8071266:	3738      	adds	r7, #56	; 0x38
 8071268:	46bd      	mov	sp, r7
 807126a:	bd80      	pop	{r7, pc}
 807126c:	200010d0 	.word	0x200010d0
 8071270:	200010b0 	.word	0x200010b0
 8071274:	20000bd8 	.word	0x20000bd8
 8071278:	20001068 	.word	0x20001068
 807127c:	20000bd4 	.word	0x20000bd4
 8071280:	200010bc 	.word	0x200010bc

08071284 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8071284:	b580      	push	{r7, lr}
 8071286:	b084      	sub	sp, #16
 8071288:	af00      	add	r7, sp, #0
 807128a:	6078      	str	r0, [r7, #4]
 807128c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 807128e:	4b21      	ldr	r3, [pc, #132]	; (8071314 <prvAddCurrentTaskToDelayedList+0x90>)
 8071290:	681b      	ldr	r3, [r3, #0]
 8071292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8071294:	4b20      	ldr	r3, [pc, #128]	; (8071318 <prvAddCurrentTaskToDelayedList+0x94>)
 8071296:	681b      	ldr	r3, [r3, #0]
 8071298:	3304      	adds	r3, #4
 807129a:	4618      	mov	r0, r3
 807129c:	f7fd fd20 	bl	806ece0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80712a0:	687b      	ldr	r3, [r7, #4]
 80712a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80712a6:	d10a      	bne.n	80712be <prvAddCurrentTaskToDelayedList+0x3a>
 80712a8:	683b      	ldr	r3, [r7, #0]
 80712aa:	2b00      	cmp	r3, #0
 80712ac:	d007      	beq.n	80712be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80712ae:	4b1a      	ldr	r3, [pc, #104]	; (8071318 <prvAddCurrentTaskToDelayedList+0x94>)
 80712b0:	681b      	ldr	r3, [r3, #0]
 80712b2:	3304      	adds	r3, #4
 80712b4:	4619      	mov	r1, r3
 80712b6:	4819      	ldr	r0, [pc, #100]	; (807131c <prvAddCurrentTaskToDelayedList+0x98>)
 80712b8:	f7fd fcb5 	bl	806ec26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80712bc:	e026      	b.n	807130c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80712be:	68fa      	ldr	r2, [r7, #12]
 80712c0:	687b      	ldr	r3, [r7, #4]
 80712c2:	4413      	add	r3, r2
 80712c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80712c6:	4b14      	ldr	r3, [pc, #80]	; (8071318 <prvAddCurrentTaskToDelayedList+0x94>)
 80712c8:	681b      	ldr	r3, [r3, #0]
 80712ca:	68ba      	ldr	r2, [r7, #8]
 80712cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80712ce:	68ba      	ldr	r2, [r7, #8]
 80712d0:	68fb      	ldr	r3, [r7, #12]
 80712d2:	429a      	cmp	r2, r3
 80712d4:	d209      	bcs.n	80712ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80712d6:	4b12      	ldr	r3, [pc, #72]	; (8071320 <prvAddCurrentTaskToDelayedList+0x9c>)
 80712d8:	681a      	ldr	r2, [r3, #0]
 80712da:	4b0f      	ldr	r3, [pc, #60]	; (8071318 <prvAddCurrentTaskToDelayedList+0x94>)
 80712dc:	681b      	ldr	r3, [r3, #0]
 80712de:	3304      	adds	r3, #4
 80712e0:	4619      	mov	r1, r3
 80712e2:	4610      	mov	r0, r2
 80712e4:	f7fd fcc3 	bl	806ec6e <vListInsert>
}
 80712e8:	e010      	b.n	807130c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80712ea:	4b0e      	ldr	r3, [pc, #56]	; (8071324 <prvAddCurrentTaskToDelayedList+0xa0>)
 80712ec:	681a      	ldr	r2, [r3, #0]
 80712ee:	4b0a      	ldr	r3, [pc, #40]	; (8071318 <prvAddCurrentTaskToDelayedList+0x94>)
 80712f0:	681b      	ldr	r3, [r3, #0]
 80712f2:	3304      	adds	r3, #4
 80712f4:	4619      	mov	r1, r3
 80712f6:	4610      	mov	r0, r2
 80712f8:	f7fd fcb9 	bl	806ec6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80712fc:	4b0a      	ldr	r3, [pc, #40]	; (8071328 <prvAddCurrentTaskToDelayedList+0xa4>)
 80712fe:	681b      	ldr	r3, [r3, #0]
 8071300:	68ba      	ldr	r2, [r7, #8]
 8071302:	429a      	cmp	r2, r3
 8071304:	d202      	bcs.n	807130c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8071306:	4a08      	ldr	r2, [pc, #32]	; (8071328 <prvAddCurrentTaskToDelayedList+0xa4>)
 8071308:	68bb      	ldr	r3, [r7, #8]
 807130a:	6013      	str	r3, [r2, #0]
}
 807130c:	bf00      	nop
 807130e:	3710      	adds	r7, #16
 8071310:	46bd      	mov	sp, r7
 8071312:	bd80      	pop	{r7, pc}
 8071314:	200010ac 	.word	0x200010ac
 8071318:	20000bd4 	.word	0x20000bd4
 807131c:	20001094 	.word	0x20001094
 8071320:	20001064 	.word	0x20001064
 8071324:	20001060 	.word	0x20001060
 8071328:	200010c8 	.word	0x200010c8

0807132c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 807132c:	b580      	push	{r7, lr}
 807132e:	b08a      	sub	sp, #40	; 0x28
 8071330:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8071332:	2300      	movs	r3, #0
 8071334:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8071336:	f000 fba1 	bl	8071a7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 807133a:	4b1c      	ldr	r3, [pc, #112]	; (80713ac <xTimerCreateTimerTask+0x80>)
 807133c:	681b      	ldr	r3, [r3, #0]
 807133e:	2b00      	cmp	r3, #0
 8071340:	d021      	beq.n	8071386 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8071342:	2300      	movs	r3, #0
 8071344:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8071346:	2300      	movs	r3, #0
 8071348:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 807134a:	1d3a      	adds	r2, r7, #4
 807134c:	f107 0108 	add.w	r1, r7, #8
 8071350:	f107 030c 	add.w	r3, r7, #12
 8071354:	4618      	mov	r0, r3
 8071356:	f7fd fc1f 	bl	806eb98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 807135a:	6879      	ldr	r1, [r7, #4]
 807135c:	68bb      	ldr	r3, [r7, #8]
 807135e:	68fa      	ldr	r2, [r7, #12]
 8071360:	9202      	str	r2, [sp, #8]
 8071362:	9301      	str	r3, [sp, #4]
 8071364:	2302      	movs	r3, #2
 8071366:	9300      	str	r3, [sp, #0]
 8071368:	2300      	movs	r3, #0
 807136a:	460a      	mov	r2, r1
 807136c:	4910      	ldr	r1, [pc, #64]	; (80713b0 <xTimerCreateTimerTask+0x84>)
 807136e:	4811      	ldr	r0, [pc, #68]	; (80713b4 <xTimerCreateTimerTask+0x88>)
 8071370:	f7fe fda4 	bl	806febc <xTaskCreateStatic>
 8071374:	4603      	mov	r3, r0
 8071376:	4a10      	ldr	r2, [pc, #64]	; (80713b8 <xTimerCreateTimerTask+0x8c>)
 8071378:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 807137a:	4b0f      	ldr	r3, [pc, #60]	; (80713b8 <xTimerCreateTimerTask+0x8c>)
 807137c:	681b      	ldr	r3, [r3, #0]
 807137e:	2b00      	cmp	r3, #0
 8071380:	d001      	beq.n	8071386 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8071382:	2301      	movs	r3, #1
 8071384:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8071386:	697b      	ldr	r3, [r7, #20]
 8071388:	2b00      	cmp	r3, #0
 807138a:	d10a      	bne.n	80713a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 807138c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071390:	f383 8811 	msr	BASEPRI, r3
 8071394:	f3bf 8f6f 	isb	sy
 8071398:	f3bf 8f4f 	dsb	sy
 807139c:	613b      	str	r3, [r7, #16]
}
 807139e:	bf00      	nop
 80713a0:	e7fe      	b.n	80713a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80713a2:	697b      	ldr	r3, [r7, #20]
}
 80713a4:	4618      	mov	r0, r3
 80713a6:	3718      	adds	r7, #24
 80713a8:	46bd      	mov	sp, r7
 80713aa:	bd80      	pop	{r7, pc}
 80713ac:	20001104 	.word	0x20001104
 80713b0:	08077360 	.word	0x08077360
 80713b4:	08071625 	.word	0x08071625
 80713b8:	20001108 	.word	0x20001108

080713bc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80713bc:	b580      	push	{r7, lr}
 80713be:	b088      	sub	sp, #32
 80713c0:	af02      	add	r7, sp, #8
 80713c2:	60f8      	str	r0, [r7, #12]
 80713c4:	60b9      	str	r1, [r7, #8]
 80713c6:	607a      	str	r2, [r7, #4]
 80713c8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80713ca:	202c      	movs	r0, #44	; 0x2c
 80713cc:	f000 fe04 	bl	8071fd8 <pvPortMalloc>
 80713d0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80713d2:	697b      	ldr	r3, [r7, #20]
 80713d4:	2b00      	cmp	r3, #0
 80713d6:	d00d      	beq.n	80713f4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80713d8:	697b      	ldr	r3, [r7, #20]
 80713da:	2200      	movs	r2, #0
 80713dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80713e0:	697b      	ldr	r3, [r7, #20]
 80713e2:	9301      	str	r3, [sp, #4]
 80713e4:	6a3b      	ldr	r3, [r7, #32]
 80713e6:	9300      	str	r3, [sp, #0]
 80713e8:	683b      	ldr	r3, [r7, #0]
 80713ea:	687a      	ldr	r2, [r7, #4]
 80713ec:	68b9      	ldr	r1, [r7, #8]
 80713ee:	68f8      	ldr	r0, [r7, #12]
 80713f0:	f000 f843 	bl	807147a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80713f4:	697b      	ldr	r3, [r7, #20]
	}
 80713f6:	4618      	mov	r0, r3
 80713f8:	3718      	adds	r7, #24
 80713fa:	46bd      	mov	sp, r7
 80713fc:	bd80      	pop	{r7, pc}

080713fe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80713fe:	b580      	push	{r7, lr}
 8071400:	b08a      	sub	sp, #40	; 0x28
 8071402:	af02      	add	r7, sp, #8
 8071404:	60f8      	str	r0, [r7, #12]
 8071406:	60b9      	str	r1, [r7, #8]
 8071408:	607a      	str	r2, [r7, #4]
 807140a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 807140c:	232c      	movs	r3, #44	; 0x2c
 807140e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8071410:	693b      	ldr	r3, [r7, #16]
 8071412:	2b2c      	cmp	r3, #44	; 0x2c
 8071414:	d00a      	beq.n	807142c <xTimerCreateStatic+0x2e>
	__asm volatile
 8071416:	f04f 0350 	mov.w	r3, #80	; 0x50
 807141a:	f383 8811 	msr	BASEPRI, r3
 807141e:	f3bf 8f6f 	isb	sy
 8071422:	f3bf 8f4f 	dsb	sy
 8071426:	61bb      	str	r3, [r7, #24]
}
 8071428:	bf00      	nop
 807142a:	e7fe      	b.n	807142a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 807142c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 807142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8071430:	2b00      	cmp	r3, #0
 8071432:	d10a      	bne.n	807144a <xTimerCreateStatic+0x4c>
	__asm volatile
 8071434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071438:	f383 8811 	msr	BASEPRI, r3
 807143c:	f3bf 8f6f 	isb	sy
 8071440:	f3bf 8f4f 	dsb	sy
 8071444:	617b      	str	r3, [r7, #20]
}
 8071446:	bf00      	nop
 8071448:	e7fe      	b.n	8071448 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 807144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 807144c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 807144e:	69fb      	ldr	r3, [r7, #28]
 8071450:	2b00      	cmp	r3, #0
 8071452:	d00d      	beq.n	8071470 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8071454:	69fb      	ldr	r3, [r7, #28]
 8071456:	2202      	movs	r2, #2
 8071458:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 807145c:	69fb      	ldr	r3, [r7, #28]
 807145e:	9301      	str	r3, [sp, #4]
 8071460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071462:	9300      	str	r3, [sp, #0]
 8071464:	683b      	ldr	r3, [r7, #0]
 8071466:	687a      	ldr	r2, [r7, #4]
 8071468:	68b9      	ldr	r1, [r7, #8]
 807146a:	68f8      	ldr	r0, [r7, #12]
 807146c:	f000 f805 	bl	807147a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8071470:	69fb      	ldr	r3, [r7, #28]
	}
 8071472:	4618      	mov	r0, r3
 8071474:	3720      	adds	r7, #32
 8071476:	46bd      	mov	sp, r7
 8071478:	bd80      	pop	{r7, pc}

0807147a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 807147a:	b580      	push	{r7, lr}
 807147c:	b086      	sub	sp, #24
 807147e:	af00      	add	r7, sp, #0
 8071480:	60f8      	str	r0, [r7, #12]
 8071482:	60b9      	str	r1, [r7, #8]
 8071484:	607a      	str	r2, [r7, #4]
 8071486:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8071488:	68bb      	ldr	r3, [r7, #8]
 807148a:	2b00      	cmp	r3, #0
 807148c:	d10a      	bne.n	80714a4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 807148e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071492:	f383 8811 	msr	BASEPRI, r3
 8071496:	f3bf 8f6f 	isb	sy
 807149a:	f3bf 8f4f 	dsb	sy
 807149e:	617b      	str	r3, [r7, #20]
}
 80714a0:	bf00      	nop
 80714a2:	e7fe      	b.n	80714a2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80714a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80714a6:	2b00      	cmp	r3, #0
 80714a8:	d01e      	beq.n	80714e8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80714aa:	f000 fae7 	bl	8071a7c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80714ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80714b0:	68fa      	ldr	r2, [r7, #12]
 80714b2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80714b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80714b6:	68ba      	ldr	r2, [r7, #8]
 80714b8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80714ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80714bc:	683a      	ldr	r2, [r7, #0]
 80714be:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80714c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80714c2:	6a3a      	ldr	r2, [r7, #32]
 80714c4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80714c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80714c8:	3304      	adds	r3, #4
 80714ca:	4618      	mov	r0, r3
 80714cc:	f7fd fb9e 	bl	806ec0c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80714d0:	687b      	ldr	r3, [r7, #4]
 80714d2:	2b00      	cmp	r3, #0
 80714d4:	d008      	beq.n	80714e8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80714d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80714d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80714dc:	f043 0304 	orr.w	r3, r3, #4
 80714e0:	b2da      	uxtb	r2, r3
 80714e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80714e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80714e8:	bf00      	nop
 80714ea:	3718      	adds	r7, #24
 80714ec:	46bd      	mov	sp, r7
 80714ee:	bd80      	pop	{r7, pc}

080714f0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80714f0:	b580      	push	{r7, lr}
 80714f2:	b08a      	sub	sp, #40	; 0x28
 80714f4:	af00      	add	r7, sp, #0
 80714f6:	60f8      	str	r0, [r7, #12]
 80714f8:	60b9      	str	r1, [r7, #8]
 80714fa:	607a      	str	r2, [r7, #4]
 80714fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80714fe:	2300      	movs	r3, #0
 8071500:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8071502:	68fb      	ldr	r3, [r7, #12]
 8071504:	2b00      	cmp	r3, #0
 8071506:	d10a      	bne.n	807151e <xTimerGenericCommand+0x2e>
	__asm volatile
 8071508:	f04f 0350 	mov.w	r3, #80	; 0x50
 807150c:	f383 8811 	msr	BASEPRI, r3
 8071510:	f3bf 8f6f 	isb	sy
 8071514:	f3bf 8f4f 	dsb	sy
 8071518:	623b      	str	r3, [r7, #32]
}
 807151a:	bf00      	nop
 807151c:	e7fe      	b.n	807151c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 807151e:	4b1a      	ldr	r3, [pc, #104]	; (8071588 <xTimerGenericCommand+0x98>)
 8071520:	681b      	ldr	r3, [r3, #0]
 8071522:	2b00      	cmp	r3, #0
 8071524:	d02a      	beq.n	807157c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8071526:	68bb      	ldr	r3, [r7, #8]
 8071528:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 807152a:	687b      	ldr	r3, [r7, #4]
 807152c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 807152e:	68fb      	ldr	r3, [r7, #12]
 8071530:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8071532:	68bb      	ldr	r3, [r7, #8]
 8071534:	2b05      	cmp	r3, #5
 8071536:	dc18      	bgt.n	807156a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8071538:	f7ff fb18 	bl	8070b6c <xTaskGetSchedulerState>
 807153c:	4603      	mov	r3, r0
 807153e:	2b02      	cmp	r3, #2
 8071540:	d109      	bne.n	8071556 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8071542:	4b11      	ldr	r3, [pc, #68]	; (8071588 <xTimerGenericCommand+0x98>)
 8071544:	6818      	ldr	r0, [r3, #0]
 8071546:	f107 0110 	add.w	r1, r7, #16
 807154a:	2300      	movs	r3, #0
 807154c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 807154e:	f7fd fe4f 	bl	806f1f0 <xQueueGenericSend>
 8071552:	6278      	str	r0, [r7, #36]	; 0x24
 8071554:	e012      	b.n	807157c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8071556:	4b0c      	ldr	r3, [pc, #48]	; (8071588 <xTimerGenericCommand+0x98>)
 8071558:	6818      	ldr	r0, [r3, #0]
 807155a:	f107 0110 	add.w	r1, r7, #16
 807155e:	2300      	movs	r3, #0
 8071560:	2200      	movs	r2, #0
 8071562:	f7fd fe45 	bl	806f1f0 <xQueueGenericSend>
 8071566:	6278      	str	r0, [r7, #36]	; 0x24
 8071568:	e008      	b.n	807157c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 807156a:	4b07      	ldr	r3, [pc, #28]	; (8071588 <xTimerGenericCommand+0x98>)
 807156c:	6818      	ldr	r0, [r3, #0]
 807156e:	f107 0110 	add.w	r1, r7, #16
 8071572:	2300      	movs	r3, #0
 8071574:	683a      	ldr	r2, [r7, #0]
 8071576:	f7fd ff39 	bl	806f3ec <xQueueGenericSendFromISR>
 807157a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 807157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 807157e:	4618      	mov	r0, r3
 8071580:	3728      	adds	r7, #40	; 0x28
 8071582:	46bd      	mov	sp, r7
 8071584:	bd80      	pop	{r7, pc}
 8071586:	bf00      	nop
 8071588:	20001104 	.word	0x20001104

0807158c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 807158c:	b580      	push	{r7, lr}
 807158e:	b088      	sub	sp, #32
 8071590:	af02      	add	r7, sp, #8
 8071592:	6078      	str	r0, [r7, #4]
 8071594:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8071596:	4b22      	ldr	r3, [pc, #136]	; (8071620 <prvProcessExpiredTimer+0x94>)
 8071598:	681b      	ldr	r3, [r3, #0]
 807159a:	68db      	ldr	r3, [r3, #12]
 807159c:	68db      	ldr	r3, [r3, #12]
 807159e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80715a0:	697b      	ldr	r3, [r7, #20]
 80715a2:	3304      	adds	r3, #4
 80715a4:	4618      	mov	r0, r3
 80715a6:	f7fd fb9b 	bl	806ece0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80715aa:	697b      	ldr	r3, [r7, #20]
 80715ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80715b0:	f003 0304 	and.w	r3, r3, #4
 80715b4:	2b00      	cmp	r3, #0
 80715b6:	d022      	beq.n	80715fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80715b8:	697b      	ldr	r3, [r7, #20]
 80715ba:	699a      	ldr	r2, [r3, #24]
 80715bc:	687b      	ldr	r3, [r7, #4]
 80715be:	18d1      	adds	r1, r2, r3
 80715c0:	687b      	ldr	r3, [r7, #4]
 80715c2:	683a      	ldr	r2, [r7, #0]
 80715c4:	6978      	ldr	r0, [r7, #20]
 80715c6:	f000 f8d1 	bl	807176c <prvInsertTimerInActiveList>
 80715ca:	4603      	mov	r3, r0
 80715cc:	2b00      	cmp	r3, #0
 80715ce:	d01f      	beq.n	8071610 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80715d0:	2300      	movs	r3, #0
 80715d2:	9300      	str	r3, [sp, #0]
 80715d4:	2300      	movs	r3, #0
 80715d6:	687a      	ldr	r2, [r7, #4]
 80715d8:	2100      	movs	r1, #0
 80715da:	6978      	ldr	r0, [r7, #20]
 80715dc:	f7ff ff88 	bl	80714f0 <xTimerGenericCommand>
 80715e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80715e2:	693b      	ldr	r3, [r7, #16]
 80715e4:	2b00      	cmp	r3, #0
 80715e6:	d113      	bne.n	8071610 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80715e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80715ec:	f383 8811 	msr	BASEPRI, r3
 80715f0:	f3bf 8f6f 	isb	sy
 80715f4:	f3bf 8f4f 	dsb	sy
 80715f8:	60fb      	str	r3, [r7, #12]
}
 80715fa:	bf00      	nop
 80715fc:	e7fe      	b.n	80715fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80715fe:	697b      	ldr	r3, [r7, #20]
 8071600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071604:	f023 0301 	bic.w	r3, r3, #1
 8071608:	b2da      	uxtb	r2, r3
 807160a:	697b      	ldr	r3, [r7, #20]
 807160c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8071610:	697b      	ldr	r3, [r7, #20]
 8071612:	6a1b      	ldr	r3, [r3, #32]
 8071614:	6978      	ldr	r0, [r7, #20]
 8071616:	4798      	blx	r3
}
 8071618:	bf00      	nop
 807161a:	3718      	adds	r7, #24
 807161c:	46bd      	mov	sp, r7
 807161e:	bd80      	pop	{r7, pc}
 8071620:	200010fc 	.word	0x200010fc

08071624 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8071624:	b580      	push	{r7, lr}
 8071626:	b084      	sub	sp, #16
 8071628:	af00      	add	r7, sp, #0
 807162a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 807162c:	f107 0308 	add.w	r3, r7, #8
 8071630:	4618      	mov	r0, r3
 8071632:	f000 f857 	bl	80716e4 <prvGetNextExpireTime>
 8071636:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8071638:	68bb      	ldr	r3, [r7, #8]
 807163a:	4619      	mov	r1, r3
 807163c:	68f8      	ldr	r0, [r7, #12]
 807163e:	f000 f803 	bl	8071648 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8071642:	f000 f8d5 	bl	80717f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8071646:	e7f1      	b.n	807162c <prvTimerTask+0x8>

08071648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8071648:	b580      	push	{r7, lr}
 807164a:	b084      	sub	sp, #16
 807164c:	af00      	add	r7, sp, #0
 807164e:	6078      	str	r0, [r7, #4]
 8071650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8071652:	f7fe fe8f 	bl	8070374 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8071656:	f107 0308 	add.w	r3, r7, #8
 807165a:	4618      	mov	r0, r3
 807165c:	f000 f866 	bl	807172c <prvSampleTimeNow>
 8071660:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8071662:	68bb      	ldr	r3, [r7, #8]
 8071664:	2b00      	cmp	r3, #0
 8071666:	d130      	bne.n	80716ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8071668:	683b      	ldr	r3, [r7, #0]
 807166a:	2b00      	cmp	r3, #0
 807166c:	d10a      	bne.n	8071684 <prvProcessTimerOrBlockTask+0x3c>
 807166e:	687a      	ldr	r2, [r7, #4]
 8071670:	68fb      	ldr	r3, [r7, #12]
 8071672:	429a      	cmp	r2, r3
 8071674:	d806      	bhi.n	8071684 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8071676:	f7fe fe8b 	bl	8070390 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 807167a:	68f9      	ldr	r1, [r7, #12]
 807167c:	6878      	ldr	r0, [r7, #4]
 807167e:	f7ff ff85 	bl	807158c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8071682:	e024      	b.n	80716ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8071684:	683b      	ldr	r3, [r7, #0]
 8071686:	2b00      	cmp	r3, #0
 8071688:	d008      	beq.n	807169c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 807168a:	4b13      	ldr	r3, [pc, #76]	; (80716d8 <prvProcessTimerOrBlockTask+0x90>)
 807168c:	681b      	ldr	r3, [r3, #0]
 807168e:	681b      	ldr	r3, [r3, #0]
 8071690:	2b00      	cmp	r3, #0
 8071692:	d101      	bne.n	8071698 <prvProcessTimerOrBlockTask+0x50>
 8071694:	2301      	movs	r3, #1
 8071696:	e000      	b.n	807169a <prvProcessTimerOrBlockTask+0x52>
 8071698:	2300      	movs	r3, #0
 807169a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 807169c:	4b0f      	ldr	r3, [pc, #60]	; (80716dc <prvProcessTimerOrBlockTask+0x94>)
 807169e:	6818      	ldr	r0, [r3, #0]
 80716a0:	687a      	ldr	r2, [r7, #4]
 80716a2:	68fb      	ldr	r3, [r7, #12]
 80716a4:	1ad3      	subs	r3, r2, r3
 80716a6:	683a      	ldr	r2, [r7, #0]
 80716a8:	4619      	mov	r1, r3
 80716aa:	f7fe fbd3 	bl	806fe54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80716ae:	f7fe fe6f 	bl	8070390 <xTaskResumeAll>
 80716b2:	4603      	mov	r3, r0
 80716b4:	2b00      	cmp	r3, #0
 80716b6:	d10a      	bne.n	80716ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80716b8:	4b09      	ldr	r3, [pc, #36]	; (80716e0 <prvProcessTimerOrBlockTask+0x98>)
 80716ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80716be:	601a      	str	r2, [r3, #0]
 80716c0:	f3bf 8f4f 	dsb	sy
 80716c4:	f3bf 8f6f 	isb	sy
}
 80716c8:	e001      	b.n	80716ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80716ca:	f7fe fe61 	bl	8070390 <xTaskResumeAll>
}
 80716ce:	bf00      	nop
 80716d0:	3710      	adds	r7, #16
 80716d2:	46bd      	mov	sp, r7
 80716d4:	bd80      	pop	{r7, pc}
 80716d6:	bf00      	nop
 80716d8:	20001100 	.word	0x20001100
 80716dc:	20001104 	.word	0x20001104
 80716e0:	e000ed04 	.word	0xe000ed04

080716e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80716e4:	b480      	push	{r7}
 80716e6:	b085      	sub	sp, #20
 80716e8:	af00      	add	r7, sp, #0
 80716ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80716ec:	4b0e      	ldr	r3, [pc, #56]	; (8071728 <prvGetNextExpireTime+0x44>)
 80716ee:	681b      	ldr	r3, [r3, #0]
 80716f0:	681b      	ldr	r3, [r3, #0]
 80716f2:	2b00      	cmp	r3, #0
 80716f4:	d101      	bne.n	80716fa <prvGetNextExpireTime+0x16>
 80716f6:	2201      	movs	r2, #1
 80716f8:	e000      	b.n	80716fc <prvGetNextExpireTime+0x18>
 80716fa:	2200      	movs	r2, #0
 80716fc:	687b      	ldr	r3, [r7, #4]
 80716fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8071700:	687b      	ldr	r3, [r7, #4]
 8071702:	681b      	ldr	r3, [r3, #0]
 8071704:	2b00      	cmp	r3, #0
 8071706:	d105      	bne.n	8071714 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8071708:	4b07      	ldr	r3, [pc, #28]	; (8071728 <prvGetNextExpireTime+0x44>)
 807170a:	681b      	ldr	r3, [r3, #0]
 807170c:	68db      	ldr	r3, [r3, #12]
 807170e:	681b      	ldr	r3, [r3, #0]
 8071710:	60fb      	str	r3, [r7, #12]
 8071712:	e001      	b.n	8071718 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8071714:	2300      	movs	r3, #0
 8071716:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8071718:	68fb      	ldr	r3, [r7, #12]
}
 807171a:	4618      	mov	r0, r3
 807171c:	3714      	adds	r7, #20
 807171e:	46bd      	mov	sp, r7
 8071720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071724:	4770      	bx	lr
 8071726:	bf00      	nop
 8071728:	200010fc 	.word	0x200010fc

0807172c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 807172c:	b580      	push	{r7, lr}
 807172e:	b084      	sub	sp, #16
 8071730:	af00      	add	r7, sp, #0
 8071732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8071734:	f7fe feca 	bl	80704cc <xTaskGetTickCount>
 8071738:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 807173a:	4b0b      	ldr	r3, [pc, #44]	; (8071768 <prvSampleTimeNow+0x3c>)
 807173c:	681b      	ldr	r3, [r3, #0]
 807173e:	68fa      	ldr	r2, [r7, #12]
 8071740:	429a      	cmp	r2, r3
 8071742:	d205      	bcs.n	8071750 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8071744:	f000 f936 	bl	80719b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8071748:	687b      	ldr	r3, [r7, #4]
 807174a:	2201      	movs	r2, #1
 807174c:	601a      	str	r2, [r3, #0]
 807174e:	e002      	b.n	8071756 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8071750:	687b      	ldr	r3, [r7, #4]
 8071752:	2200      	movs	r2, #0
 8071754:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8071756:	4a04      	ldr	r2, [pc, #16]	; (8071768 <prvSampleTimeNow+0x3c>)
 8071758:	68fb      	ldr	r3, [r7, #12]
 807175a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 807175c:	68fb      	ldr	r3, [r7, #12]
}
 807175e:	4618      	mov	r0, r3
 8071760:	3710      	adds	r7, #16
 8071762:	46bd      	mov	sp, r7
 8071764:	bd80      	pop	{r7, pc}
 8071766:	bf00      	nop
 8071768:	2000110c 	.word	0x2000110c

0807176c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 807176c:	b580      	push	{r7, lr}
 807176e:	b086      	sub	sp, #24
 8071770:	af00      	add	r7, sp, #0
 8071772:	60f8      	str	r0, [r7, #12]
 8071774:	60b9      	str	r1, [r7, #8]
 8071776:	607a      	str	r2, [r7, #4]
 8071778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 807177a:	2300      	movs	r3, #0
 807177c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 807177e:	68fb      	ldr	r3, [r7, #12]
 8071780:	68ba      	ldr	r2, [r7, #8]
 8071782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8071784:	68fb      	ldr	r3, [r7, #12]
 8071786:	68fa      	ldr	r2, [r7, #12]
 8071788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 807178a:	68ba      	ldr	r2, [r7, #8]
 807178c:	687b      	ldr	r3, [r7, #4]
 807178e:	429a      	cmp	r2, r3
 8071790:	d812      	bhi.n	80717b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8071792:	687a      	ldr	r2, [r7, #4]
 8071794:	683b      	ldr	r3, [r7, #0]
 8071796:	1ad2      	subs	r2, r2, r3
 8071798:	68fb      	ldr	r3, [r7, #12]
 807179a:	699b      	ldr	r3, [r3, #24]
 807179c:	429a      	cmp	r2, r3
 807179e:	d302      	bcc.n	80717a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80717a0:	2301      	movs	r3, #1
 80717a2:	617b      	str	r3, [r7, #20]
 80717a4:	e01b      	b.n	80717de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80717a6:	4b10      	ldr	r3, [pc, #64]	; (80717e8 <prvInsertTimerInActiveList+0x7c>)
 80717a8:	681a      	ldr	r2, [r3, #0]
 80717aa:	68fb      	ldr	r3, [r7, #12]
 80717ac:	3304      	adds	r3, #4
 80717ae:	4619      	mov	r1, r3
 80717b0:	4610      	mov	r0, r2
 80717b2:	f7fd fa5c 	bl	806ec6e <vListInsert>
 80717b6:	e012      	b.n	80717de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80717b8:	687a      	ldr	r2, [r7, #4]
 80717ba:	683b      	ldr	r3, [r7, #0]
 80717bc:	429a      	cmp	r2, r3
 80717be:	d206      	bcs.n	80717ce <prvInsertTimerInActiveList+0x62>
 80717c0:	68ba      	ldr	r2, [r7, #8]
 80717c2:	683b      	ldr	r3, [r7, #0]
 80717c4:	429a      	cmp	r2, r3
 80717c6:	d302      	bcc.n	80717ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80717c8:	2301      	movs	r3, #1
 80717ca:	617b      	str	r3, [r7, #20]
 80717cc:	e007      	b.n	80717de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80717ce:	4b07      	ldr	r3, [pc, #28]	; (80717ec <prvInsertTimerInActiveList+0x80>)
 80717d0:	681a      	ldr	r2, [r3, #0]
 80717d2:	68fb      	ldr	r3, [r7, #12]
 80717d4:	3304      	adds	r3, #4
 80717d6:	4619      	mov	r1, r3
 80717d8:	4610      	mov	r0, r2
 80717da:	f7fd fa48 	bl	806ec6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80717de:	697b      	ldr	r3, [r7, #20]
}
 80717e0:	4618      	mov	r0, r3
 80717e2:	3718      	adds	r7, #24
 80717e4:	46bd      	mov	sp, r7
 80717e6:	bd80      	pop	{r7, pc}
 80717e8:	20001100 	.word	0x20001100
 80717ec:	200010fc 	.word	0x200010fc

080717f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80717f0:	b580      	push	{r7, lr}
 80717f2:	b08e      	sub	sp, #56	; 0x38
 80717f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80717f6:	e0ca      	b.n	807198e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80717f8:	687b      	ldr	r3, [r7, #4]
 80717fa:	2b00      	cmp	r3, #0
 80717fc:	da18      	bge.n	8071830 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80717fe:	1d3b      	adds	r3, r7, #4
 8071800:	3304      	adds	r3, #4
 8071802:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8071804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8071806:	2b00      	cmp	r3, #0
 8071808:	d10a      	bne.n	8071820 <prvProcessReceivedCommands+0x30>
	__asm volatile
 807180a:	f04f 0350 	mov.w	r3, #80	; 0x50
 807180e:	f383 8811 	msr	BASEPRI, r3
 8071812:	f3bf 8f6f 	isb	sy
 8071816:	f3bf 8f4f 	dsb	sy
 807181a:	61fb      	str	r3, [r7, #28]
}
 807181c:	bf00      	nop
 807181e:	e7fe      	b.n	807181e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8071820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8071822:	681b      	ldr	r3, [r3, #0]
 8071824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8071826:	6850      	ldr	r0, [r2, #4]
 8071828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 807182a:	6892      	ldr	r2, [r2, #8]
 807182c:	4611      	mov	r1, r2
 807182e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8071830:	687b      	ldr	r3, [r7, #4]
 8071832:	2b00      	cmp	r3, #0
 8071834:	f2c0 80aa 	blt.w	807198c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8071838:	68fb      	ldr	r3, [r7, #12]
 807183a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 807183c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807183e:	695b      	ldr	r3, [r3, #20]
 8071840:	2b00      	cmp	r3, #0
 8071842:	d004      	beq.n	807184e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8071844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071846:	3304      	adds	r3, #4
 8071848:	4618      	mov	r0, r3
 807184a:	f7fd fa49 	bl	806ece0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 807184e:	463b      	mov	r3, r7
 8071850:	4618      	mov	r0, r3
 8071852:	f7ff ff6b 	bl	807172c <prvSampleTimeNow>
 8071856:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8071858:	687b      	ldr	r3, [r7, #4]
 807185a:	2b09      	cmp	r3, #9
 807185c:	f200 8097 	bhi.w	807198e <prvProcessReceivedCommands+0x19e>
 8071860:	a201      	add	r2, pc, #4	; (adr r2, 8071868 <prvProcessReceivedCommands+0x78>)
 8071862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8071866:	bf00      	nop
 8071868:	08071891 	.word	0x08071891
 807186c:	08071891 	.word	0x08071891
 8071870:	08071891 	.word	0x08071891
 8071874:	08071905 	.word	0x08071905
 8071878:	08071919 	.word	0x08071919
 807187c:	08071963 	.word	0x08071963
 8071880:	08071891 	.word	0x08071891
 8071884:	08071891 	.word	0x08071891
 8071888:	08071905 	.word	0x08071905
 807188c:	08071919 	.word	0x08071919
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8071890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071896:	f043 0301 	orr.w	r3, r3, #1
 807189a:	b2da      	uxtb	r2, r3
 807189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807189e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80718a2:	68ba      	ldr	r2, [r7, #8]
 80718a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80718a6:	699b      	ldr	r3, [r3, #24]
 80718a8:	18d1      	adds	r1, r2, r3
 80718aa:	68bb      	ldr	r3, [r7, #8]
 80718ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80718ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80718b0:	f7ff ff5c 	bl	807176c <prvInsertTimerInActiveList>
 80718b4:	4603      	mov	r3, r0
 80718b6:	2b00      	cmp	r3, #0
 80718b8:	d069      	beq.n	807198e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80718ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80718bc:	6a1b      	ldr	r3, [r3, #32]
 80718be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80718c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80718c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80718c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80718c8:	f003 0304 	and.w	r3, r3, #4
 80718cc:	2b00      	cmp	r3, #0
 80718ce:	d05e      	beq.n	807198e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80718d0:	68ba      	ldr	r2, [r7, #8]
 80718d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80718d4:	699b      	ldr	r3, [r3, #24]
 80718d6:	441a      	add	r2, r3
 80718d8:	2300      	movs	r3, #0
 80718da:	9300      	str	r3, [sp, #0]
 80718dc:	2300      	movs	r3, #0
 80718de:	2100      	movs	r1, #0
 80718e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80718e2:	f7ff fe05 	bl	80714f0 <xTimerGenericCommand>
 80718e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80718e8:	6a3b      	ldr	r3, [r7, #32]
 80718ea:	2b00      	cmp	r3, #0
 80718ec:	d14f      	bne.n	807198e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80718ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80718f2:	f383 8811 	msr	BASEPRI, r3
 80718f6:	f3bf 8f6f 	isb	sy
 80718fa:	f3bf 8f4f 	dsb	sy
 80718fe:	61bb      	str	r3, [r7, #24]
}
 8071900:	bf00      	nop
 8071902:	e7fe      	b.n	8071902 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8071904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 807190a:	f023 0301 	bic.w	r3, r3, #1
 807190e:	b2da      	uxtb	r2, r3
 8071910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8071916:	e03a      	b.n	807198e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8071918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807191a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 807191e:	f043 0301 	orr.w	r3, r3, #1
 8071922:	b2da      	uxtb	r2, r3
 8071924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 807192a:	68ba      	ldr	r2, [r7, #8]
 807192c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807192e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8071930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071932:	699b      	ldr	r3, [r3, #24]
 8071934:	2b00      	cmp	r3, #0
 8071936:	d10a      	bne.n	807194e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8071938:	f04f 0350 	mov.w	r3, #80	; 0x50
 807193c:	f383 8811 	msr	BASEPRI, r3
 8071940:	f3bf 8f6f 	isb	sy
 8071944:	f3bf 8f4f 	dsb	sy
 8071948:	617b      	str	r3, [r7, #20]
}
 807194a:	bf00      	nop
 807194c:	e7fe      	b.n	807194c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 807194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071950:	699a      	ldr	r2, [r3, #24]
 8071952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071954:	18d1      	adds	r1, r2, r3
 8071956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8071958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 807195a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 807195c:	f7ff ff06 	bl	807176c <prvInsertTimerInActiveList>
					break;
 8071960:	e015      	b.n	807198e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8071962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8071968:	f003 0302 	and.w	r3, r3, #2
 807196c:	2b00      	cmp	r3, #0
 807196e:	d103      	bne.n	8071978 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8071970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8071972:	f000 fbfd 	bl	8072170 <vPortFree>
 8071976:	e00a      	b.n	807198e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8071978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807197a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 807197e:	f023 0301 	bic.w	r3, r3, #1
 8071982:	b2da      	uxtb	r2, r3
 8071984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8071986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 807198a:	e000      	b.n	807198e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 807198c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 807198e:	4b08      	ldr	r3, [pc, #32]	; (80719b0 <prvProcessReceivedCommands+0x1c0>)
 8071990:	681b      	ldr	r3, [r3, #0]
 8071992:	1d39      	adds	r1, r7, #4
 8071994:	2200      	movs	r2, #0
 8071996:	4618      	mov	r0, r3
 8071998:	f7fd fe50 	bl	806f63c <xQueueReceive>
 807199c:	4603      	mov	r3, r0
 807199e:	2b00      	cmp	r3, #0
 80719a0:	f47f af2a 	bne.w	80717f8 <prvProcessReceivedCommands+0x8>
	}
}
 80719a4:	bf00      	nop
 80719a6:	bf00      	nop
 80719a8:	3730      	adds	r7, #48	; 0x30
 80719aa:	46bd      	mov	sp, r7
 80719ac:	bd80      	pop	{r7, pc}
 80719ae:	bf00      	nop
 80719b0:	20001104 	.word	0x20001104

080719b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80719b4:	b580      	push	{r7, lr}
 80719b6:	b088      	sub	sp, #32
 80719b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80719ba:	e048      	b.n	8071a4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80719bc:	4b2d      	ldr	r3, [pc, #180]	; (8071a74 <prvSwitchTimerLists+0xc0>)
 80719be:	681b      	ldr	r3, [r3, #0]
 80719c0:	68db      	ldr	r3, [r3, #12]
 80719c2:	681b      	ldr	r3, [r3, #0]
 80719c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80719c6:	4b2b      	ldr	r3, [pc, #172]	; (8071a74 <prvSwitchTimerLists+0xc0>)
 80719c8:	681b      	ldr	r3, [r3, #0]
 80719ca:	68db      	ldr	r3, [r3, #12]
 80719cc:	68db      	ldr	r3, [r3, #12]
 80719ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80719d0:	68fb      	ldr	r3, [r7, #12]
 80719d2:	3304      	adds	r3, #4
 80719d4:	4618      	mov	r0, r3
 80719d6:	f7fd f983 	bl	806ece0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80719da:	68fb      	ldr	r3, [r7, #12]
 80719dc:	6a1b      	ldr	r3, [r3, #32]
 80719de:	68f8      	ldr	r0, [r7, #12]
 80719e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80719e2:	68fb      	ldr	r3, [r7, #12]
 80719e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80719e8:	f003 0304 	and.w	r3, r3, #4
 80719ec:	2b00      	cmp	r3, #0
 80719ee:	d02e      	beq.n	8071a4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80719f0:	68fb      	ldr	r3, [r7, #12]
 80719f2:	699b      	ldr	r3, [r3, #24]
 80719f4:	693a      	ldr	r2, [r7, #16]
 80719f6:	4413      	add	r3, r2
 80719f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80719fa:	68ba      	ldr	r2, [r7, #8]
 80719fc:	693b      	ldr	r3, [r7, #16]
 80719fe:	429a      	cmp	r2, r3
 8071a00:	d90e      	bls.n	8071a20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8071a02:	68fb      	ldr	r3, [r7, #12]
 8071a04:	68ba      	ldr	r2, [r7, #8]
 8071a06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8071a08:	68fb      	ldr	r3, [r7, #12]
 8071a0a:	68fa      	ldr	r2, [r7, #12]
 8071a0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8071a0e:	4b19      	ldr	r3, [pc, #100]	; (8071a74 <prvSwitchTimerLists+0xc0>)
 8071a10:	681a      	ldr	r2, [r3, #0]
 8071a12:	68fb      	ldr	r3, [r7, #12]
 8071a14:	3304      	adds	r3, #4
 8071a16:	4619      	mov	r1, r3
 8071a18:	4610      	mov	r0, r2
 8071a1a:	f7fd f928 	bl	806ec6e <vListInsert>
 8071a1e:	e016      	b.n	8071a4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8071a20:	2300      	movs	r3, #0
 8071a22:	9300      	str	r3, [sp, #0]
 8071a24:	2300      	movs	r3, #0
 8071a26:	693a      	ldr	r2, [r7, #16]
 8071a28:	2100      	movs	r1, #0
 8071a2a:	68f8      	ldr	r0, [r7, #12]
 8071a2c:	f7ff fd60 	bl	80714f0 <xTimerGenericCommand>
 8071a30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8071a32:	687b      	ldr	r3, [r7, #4]
 8071a34:	2b00      	cmp	r3, #0
 8071a36:	d10a      	bne.n	8071a4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8071a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071a3c:	f383 8811 	msr	BASEPRI, r3
 8071a40:	f3bf 8f6f 	isb	sy
 8071a44:	f3bf 8f4f 	dsb	sy
 8071a48:	603b      	str	r3, [r7, #0]
}
 8071a4a:	bf00      	nop
 8071a4c:	e7fe      	b.n	8071a4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8071a4e:	4b09      	ldr	r3, [pc, #36]	; (8071a74 <prvSwitchTimerLists+0xc0>)
 8071a50:	681b      	ldr	r3, [r3, #0]
 8071a52:	681b      	ldr	r3, [r3, #0]
 8071a54:	2b00      	cmp	r3, #0
 8071a56:	d1b1      	bne.n	80719bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8071a58:	4b06      	ldr	r3, [pc, #24]	; (8071a74 <prvSwitchTimerLists+0xc0>)
 8071a5a:	681b      	ldr	r3, [r3, #0]
 8071a5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8071a5e:	4b06      	ldr	r3, [pc, #24]	; (8071a78 <prvSwitchTimerLists+0xc4>)
 8071a60:	681b      	ldr	r3, [r3, #0]
 8071a62:	4a04      	ldr	r2, [pc, #16]	; (8071a74 <prvSwitchTimerLists+0xc0>)
 8071a64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8071a66:	4a04      	ldr	r2, [pc, #16]	; (8071a78 <prvSwitchTimerLists+0xc4>)
 8071a68:	697b      	ldr	r3, [r7, #20]
 8071a6a:	6013      	str	r3, [r2, #0]
}
 8071a6c:	bf00      	nop
 8071a6e:	3718      	adds	r7, #24
 8071a70:	46bd      	mov	sp, r7
 8071a72:	bd80      	pop	{r7, pc}
 8071a74:	200010fc 	.word	0x200010fc
 8071a78:	20001100 	.word	0x20001100

08071a7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8071a7c:	b580      	push	{r7, lr}
 8071a7e:	b082      	sub	sp, #8
 8071a80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8071a82:	f000 f987 	bl	8071d94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8071a86:	4b15      	ldr	r3, [pc, #84]	; (8071adc <prvCheckForValidListAndQueue+0x60>)
 8071a88:	681b      	ldr	r3, [r3, #0]
 8071a8a:	2b00      	cmp	r3, #0
 8071a8c:	d120      	bne.n	8071ad0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8071a8e:	4814      	ldr	r0, [pc, #80]	; (8071ae0 <prvCheckForValidListAndQueue+0x64>)
 8071a90:	f7fd f89c 	bl	806ebcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8071a94:	4813      	ldr	r0, [pc, #76]	; (8071ae4 <prvCheckForValidListAndQueue+0x68>)
 8071a96:	f7fd f899 	bl	806ebcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8071a9a:	4b13      	ldr	r3, [pc, #76]	; (8071ae8 <prvCheckForValidListAndQueue+0x6c>)
 8071a9c:	4a10      	ldr	r2, [pc, #64]	; (8071ae0 <prvCheckForValidListAndQueue+0x64>)
 8071a9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8071aa0:	4b12      	ldr	r3, [pc, #72]	; (8071aec <prvCheckForValidListAndQueue+0x70>)
 8071aa2:	4a10      	ldr	r2, [pc, #64]	; (8071ae4 <prvCheckForValidListAndQueue+0x68>)
 8071aa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8071aa6:	2300      	movs	r3, #0
 8071aa8:	9300      	str	r3, [sp, #0]
 8071aaa:	4b11      	ldr	r3, [pc, #68]	; (8071af0 <prvCheckForValidListAndQueue+0x74>)
 8071aac:	4a11      	ldr	r2, [pc, #68]	; (8071af4 <prvCheckForValidListAndQueue+0x78>)
 8071aae:	2110      	movs	r1, #16
 8071ab0:	200a      	movs	r0, #10
 8071ab2:	f7fd f9a7 	bl	806ee04 <xQueueGenericCreateStatic>
 8071ab6:	4603      	mov	r3, r0
 8071ab8:	4a08      	ldr	r2, [pc, #32]	; (8071adc <prvCheckForValidListAndQueue+0x60>)
 8071aba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8071abc:	4b07      	ldr	r3, [pc, #28]	; (8071adc <prvCheckForValidListAndQueue+0x60>)
 8071abe:	681b      	ldr	r3, [r3, #0]
 8071ac0:	2b00      	cmp	r3, #0
 8071ac2:	d005      	beq.n	8071ad0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8071ac4:	4b05      	ldr	r3, [pc, #20]	; (8071adc <prvCheckForValidListAndQueue+0x60>)
 8071ac6:	681b      	ldr	r3, [r3, #0]
 8071ac8:	490b      	ldr	r1, [pc, #44]	; (8071af8 <prvCheckForValidListAndQueue+0x7c>)
 8071aca:	4618      	mov	r0, r3
 8071acc:	f7fe f96e 	bl	806fdac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8071ad0:	f000 f990 	bl	8071df4 <vPortExitCritical>
}
 8071ad4:	bf00      	nop
 8071ad6:	46bd      	mov	sp, r7
 8071ad8:	bd80      	pop	{r7, pc}
 8071ada:	bf00      	nop
 8071adc:	20001104 	.word	0x20001104
 8071ae0:	200010d4 	.word	0x200010d4
 8071ae4:	200010e8 	.word	0x200010e8
 8071ae8:	200010fc 	.word	0x200010fc
 8071aec:	20001100 	.word	0x20001100
 8071af0:	200011b0 	.word	0x200011b0
 8071af4:	20001110 	.word	0x20001110
 8071af8:	08077368 	.word	0x08077368

08071afc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8071afc:	b580      	push	{r7, lr}
 8071afe:	b086      	sub	sp, #24
 8071b00:	af00      	add	r7, sp, #0
 8071b02:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8071b04:	687b      	ldr	r3, [r7, #4]
 8071b06:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8071b08:	687b      	ldr	r3, [r7, #4]
 8071b0a:	2b00      	cmp	r3, #0
 8071b0c:	d10a      	bne.n	8071b24 <pvTimerGetTimerID+0x28>
	__asm volatile
 8071b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071b12:	f383 8811 	msr	BASEPRI, r3
 8071b16:	f3bf 8f6f 	isb	sy
 8071b1a:	f3bf 8f4f 	dsb	sy
 8071b1e:	60fb      	str	r3, [r7, #12]
}
 8071b20:	bf00      	nop
 8071b22:	e7fe      	b.n	8071b22 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8071b24:	f000 f936 	bl	8071d94 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8071b28:	697b      	ldr	r3, [r7, #20]
 8071b2a:	69db      	ldr	r3, [r3, #28]
 8071b2c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8071b2e:	f000 f961 	bl	8071df4 <vPortExitCritical>

	return pvReturn;
 8071b32:	693b      	ldr	r3, [r7, #16]
}
 8071b34:	4618      	mov	r0, r3
 8071b36:	3718      	adds	r7, #24
 8071b38:	46bd      	mov	sp, r7
 8071b3a:	bd80      	pop	{r7, pc}

08071b3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8071b3c:	b480      	push	{r7}
 8071b3e:	b085      	sub	sp, #20
 8071b40:	af00      	add	r7, sp, #0
 8071b42:	60f8      	str	r0, [r7, #12]
 8071b44:	60b9      	str	r1, [r7, #8]
 8071b46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8071b48:	68fb      	ldr	r3, [r7, #12]
 8071b4a:	3b04      	subs	r3, #4
 8071b4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8071b4e:	68fb      	ldr	r3, [r7, #12]
 8071b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8071b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8071b56:	68fb      	ldr	r3, [r7, #12]
 8071b58:	3b04      	subs	r3, #4
 8071b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8071b5c:	68bb      	ldr	r3, [r7, #8]
 8071b5e:	f023 0201 	bic.w	r2, r3, #1
 8071b62:	68fb      	ldr	r3, [r7, #12]
 8071b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8071b66:	68fb      	ldr	r3, [r7, #12]
 8071b68:	3b04      	subs	r3, #4
 8071b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8071b6c:	4a0c      	ldr	r2, [pc, #48]	; (8071ba0 <pxPortInitialiseStack+0x64>)
 8071b6e:	68fb      	ldr	r3, [r7, #12]
 8071b70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8071b72:	68fb      	ldr	r3, [r7, #12]
 8071b74:	3b14      	subs	r3, #20
 8071b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8071b78:	687a      	ldr	r2, [r7, #4]
 8071b7a:	68fb      	ldr	r3, [r7, #12]
 8071b7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8071b7e:	68fb      	ldr	r3, [r7, #12]
 8071b80:	3b04      	subs	r3, #4
 8071b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8071b84:	68fb      	ldr	r3, [r7, #12]
 8071b86:	f06f 0202 	mvn.w	r2, #2
 8071b8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8071b8c:	68fb      	ldr	r3, [r7, #12]
 8071b8e:	3b20      	subs	r3, #32
 8071b90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8071b92:	68fb      	ldr	r3, [r7, #12]
}
 8071b94:	4618      	mov	r0, r3
 8071b96:	3714      	adds	r7, #20
 8071b98:	46bd      	mov	sp, r7
 8071b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071b9e:	4770      	bx	lr
 8071ba0:	08071ba5 	.word	0x08071ba5

08071ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8071ba4:	b480      	push	{r7}
 8071ba6:	b085      	sub	sp, #20
 8071ba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8071baa:	2300      	movs	r3, #0
 8071bac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8071bae:	4b12      	ldr	r3, [pc, #72]	; (8071bf8 <prvTaskExitError+0x54>)
 8071bb0:	681b      	ldr	r3, [r3, #0]
 8071bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8071bb6:	d00a      	beq.n	8071bce <prvTaskExitError+0x2a>
	__asm volatile
 8071bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071bbc:	f383 8811 	msr	BASEPRI, r3
 8071bc0:	f3bf 8f6f 	isb	sy
 8071bc4:	f3bf 8f4f 	dsb	sy
 8071bc8:	60fb      	str	r3, [r7, #12]
}
 8071bca:	bf00      	nop
 8071bcc:	e7fe      	b.n	8071bcc <prvTaskExitError+0x28>
	__asm volatile
 8071bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071bd2:	f383 8811 	msr	BASEPRI, r3
 8071bd6:	f3bf 8f6f 	isb	sy
 8071bda:	f3bf 8f4f 	dsb	sy
 8071bde:	60bb      	str	r3, [r7, #8]
}
 8071be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8071be2:	bf00      	nop
 8071be4:	687b      	ldr	r3, [r7, #4]
 8071be6:	2b00      	cmp	r3, #0
 8071be8:	d0fc      	beq.n	8071be4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8071bea:	bf00      	nop
 8071bec:	bf00      	nop
 8071bee:	3714      	adds	r7, #20
 8071bf0:	46bd      	mov	sp, r7
 8071bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071bf6:	4770      	bx	lr
 8071bf8:	20000024 	.word	0x20000024
 8071bfc:	00000000 	.word	0x00000000

08071c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8071c00:	4b07      	ldr	r3, [pc, #28]	; (8071c20 <pxCurrentTCBConst2>)
 8071c02:	6819      	ldr	r1, [r3, #0]
 8071c04:	6808      	ldr	r0, [r1, #0]
 8071c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8071c0a:	f380 8809 	msr	PSP, r0
 8071c0e:	f3bf 8f6f 	isb	sy
 8071c12:	f04f 0000 	mov.w	r0, #0
 8071c16:	f380 8811 	msr	BASEPRI, r0
 8071c1a:	4770      	bx	lr
 8071c1c:	f3af 8000 	nop.w

08071c20 <pxCurrentTCBConst2>:
 8071c20:	20000bd4 	.word	0x20000bd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8071c24:	bf00      	nop
 8071c26:	bf00      	nop

08071c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8071c28:	4808      	ldr	r0, [pc, #32]	; (8071c4c <prvPortStartFirstTask+0x24>)
 8071c2a:	6800      	ldr	r0, [r0, #0]
 8071c2c:	6800      	ldr	r0, [r0, #0]
 8071c2e:	f380 8808 	msr	MSP, r0
 8071c32:	f04f 0000 	mov.w	r0, #0
 8071c36:	f380 8814 	msr	CONTROL, r0
 8071c3a:	b662      	cpsie	i
 8071c3c:	b661      	cpsie	f
 8071c3e:	f3bf 8f4f 	dsb	sy
 8071c42:	f3bf 8f6f 	isb	sy
 8071c46:	df00      	svc	0
 8071c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8071c4a:	bf00      	nop
 8071c4c:	e000ed08 	.word	0xe000ed08

08071c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8071c50:	b580      	push	{r7, lr}
 8071c52:	b086      	sub	sp, #24
 8071c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8071c56:	4b46      	ldr	r3, [pc, #280]	; (8071d70 <xPortStartScheduler+0x120>)
 8071c58:	681b      	ldr	r3, [r3, #0]
 8071c5a:	4a46      	ldr	r2, [pc, #280]	; (8071d74 <xPortStartScheduler+0x124>)
 8071c5c:	4293      	cmp	r3, r2
 8071c5e:	d10a      	bne.n	8071c76 <xPortStartScheduler+0x26>
	__asm volatile
 8071c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071c64:	f383 8811 	msr	BASEPRI, r3
 8071c68:	f3bf 8f6f 	isb	sy
 8071c6c:	f3bf 8f4f 	dsb	sy
 8071c70:	613b      	str	r3, [r7, #16]
}
 8071c72:	bf00      	nop
 8071c74:	e7fe      	b.n	8071c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8071c76:	4b3e      	ldr	r3, [pc, #248]	; (8071d70 <xPortStartScheduler+0x120>)
 8071c78:	681b      	ldr	r3, [r3, #0]
 8071c7a:	4a3f      	ldr	r2, [pc, #252]	; (8071d78 <xPortStartScheduler+0x128>)
 8071c7c:	4293      	cmp	r3, r2
 8071c7e:	d10a      	bne.n	8071c96 <xPortStartScheduler+0x46>
	__asm volatile
 8071c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071c84:	f383 8811 	msr	BASEPRI, r3
 8071c88:	f3bf 8f6f 	isb	sy
 8071c8c:	f3bf 8f4f 	dsb	sy
 8071c90:	60fb      	str	r3, [r7, #12]
}
 8071c92:	bf00      	nop
 8071c94:	e7fe      	b.n	8071c94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8071c96:	4b39      	ldr	r3, [pc, #228]	; (8071d7c <xPortStartScheduler+0x12c>)
 8071c98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8071c9a:	697b      	ldr	r3, [r7, #20]
 8071c9c:	781b      	ldrb	r3, [r3, #0]
 8071c9e:	b2db      	uxtb	r3, r3
 8071ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8071ca2:	697b      	ldr	r3, [r7, #20]
 8071ca4:	22ff      	movs	r2, #255	; 0xff
 8071ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8071ca8:	697b      	ldr	r3, [r7, #20]
 8071caa:	781b      	ldrb	r3, [r3, #0]
 8071cac:	b2db      	uxtb	r3, r3
 8071cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8071cb0:	78fb      	ldrb	r3, [r7, #3]
 8071cb2:	b2db      	uxtb	r3, r3
 8071cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8071cb8:	b2da      	uxtb	r2, r3
 8071cba:	4b31      	ldr	r3, [pc, #196]	; (8071d80 <xPortStartScheduler+0x130>)
 8071cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8071cbe:	4b31      	ldr	r3, [pc, #196]	; (8071d84 <xPortStartScheduler+0x134>)
 8071cc0:	2207      	movs	r2, #7
 8071cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8071cc4:	e009      	b.n	8071cda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8071cc6:	4b2f      	ldr	r3, [pc, #188]	; (8071d84 <xPortStartScheduler+0x134>)
 8071cc8:	681b      	ldr	r3, [r3, #0]
 8071cca:	3b01      	subs	r3, #1
 8071ccc:	4a2d      	ldr	r2, [pc, #180]	; (8071d84 <xPortStartScheduler+0x134>)
 8071cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8071cd0:	78fb      	ldrb	r3, [r7, #3]
 8071cd2:	b2db      	uxtb	r3, r3
 8071cd4:	005b      	lsls	r3, r3, #1
 8071cd6:	b2db      	uxtb	r3, r3
 8071cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8071cda:	78fb      	ldrb	r3, [r7, #3]
 8071cdc:	b2db      	uxtb	r3, r3
 8071cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8071ce2:	2b80      	cmp	r3, #128	; 0x80
 8071ce4:	d0ef      	beq.n	8071cc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8071ce6:	4b27      	ldr	r3, [pc, #156]	; (8071d84 <xPortStartScheduler+0x134>)
 8071ce8:	681b      	ldr	r3, [r3, #0]
 8071cea:	f1c3 0307 	rsb	r3, r3, #7
 8071cee:	2b04      	cmp	r3, #4
 8071cf0:	d00a      	beq.n	8071d08 <xPortStartScheduler+0xb8>
	__asm volatile
 8071cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071cf6:	f383 8811 	msr	BASEPRI, r3
 8071cfa:	f3bf 8f6f 	isb	sy
 8071cfe:	f3bf 8f4f 	dsb	sy
 8071d02:	60bb      	str	r3, [r7, #8]
}
 8071d04:	bf00      	nop
 8071d06:	e7fe      	b.n	8071d06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8071d08:	4b1e      	ldr	r3, [pc, #120]	; (8071d84 <xPortStartScheduler+0x134>)
 8071d0a:	681b      	ldr	r3, [r3, #0]
 8071d0c:	021b      	lsls	r3, r3, #8
 8071d0e:	4a1d      	ldr	r2, [pc, #116]	; (8071d84 <xPortStartScheduler+0x134>)
 8071d10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8071d12:	4b1c      	ldr	r3, [pc, #112]	; (8071d84 <xPortStartScheduler+0x134>)
 8071d14:	681b      	ldr	r3, [r3, #0]
 8071d16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8071d1a:	4a1a      	ldr	r2, [pc, #104]	; (8071d84 <xPortStartScheduler+0x134>)
 8071d1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8071d1e:	687b      	ldr	r3, [r7, #4]
 8071d20:	b2da      	uxtb	r2, r3
 8071d22:	697b      	ldr	r3, [r7, #20]
 8071d24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8071d26:	4b18      	ldr	r3, [pc, #96]	; (8071d88 <xPortStartScheduler+0x138>)
 8071d28:	681b      	ldr	r3, [r3, #0]
 8071d2a:	4a17      	ldr	r2, [pc, #92]	; (8071d88 <xPortStartScheduler+0x138>)
 8071d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8071d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8071d32:	4b15      	ldr	r3, [pc, #84]	; (8071d88 <xPortStartScheduler+0x138>)
 8071d34:	681b      	ldr	r3, [r3, #0]
 8071d36:	4a14      	ldr	r2, [pc, #80]	; (8071d88 <xPortStartScheduler+0x138>)
 8071d38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8071d3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8071d3e:	f000 f8dd 	bl	8071efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8071d42:	4b12      	ldr	r3, [pc, #72]	; (8071d8c <xPortStartScheduler+0x13c>)
 8071d44:	2200      	movs	r2, #0
 8071d46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8071d48:	f000 f8fc 	bl	8071f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8071d4c:	4b10      	ldr	r3, [pc, #64]	; (8071d90 <xPortStartScheduler+0x140>)
 8071d4e:	681b      	ldr	r3, [r3, #0]
 8071d50:	4a0f      	ldr	r2, [pc, #60]	; (8071d90 <xPortStartScheduler+0x140>)
 8071d52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8071d56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8071d58:	f7ff ff66 	bl	8071c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8071d5c:	f7fe fc80 	bl	8070660 <vTaskSwitchContext>
	prvTaskExitError();
 8071d60:	f7ff ff20 	bl	8071ba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8071d64:	2300      	movs	r3, #0
}
 8071d66:	4618      	mov	r0, r3
 8071d68:	3718      	adds	r7, #24
 8071d6a:	46bd      	mov	sp, r7
 8071d6c:	bd80      	pop	{r7, pc}
 8071d6e:	bf00      	nop
 8071d70:	e000ed00 	.word	0xe000ed00
 8071d74:	410fc271 	.word	0x410fc271
 8071d78:	410fc270 	.word	0x410fc270
 8071d7c:	e000e400 	.word	0xe000e400
 8071d80:	20001200 	.word	0x20001200
 8071d84:	20001204 	.word	0x20001204
 8071d88:	e000ed20 	.word	0xe000ed20
 8071d8c:	20000024 	.word	0x20000024
 8071d90:	e000ef34 	.word	0xe000ef34

08071d94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8071d94:	b480      	push	{r7}
 8071d96:	b083      	sub	sp, #12
 8071d98:	af00      	add	r7, sp, #0
	__asm volatile
 8071d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071d9e:	f383 8811 	msr	BASEPRI, r3
 8071da2:	f3bf 8f6f 	isb	sy
 8071da6:	f3bf 8f4f 	dsb	sy
 8071daa:	607b      	str	r3, [r7, #4]
}
 8071dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8071dae:	4b0f      	ldr	r3, [pc, #60]	; (8071dec <vPortEnterCritical+0x58>)
 8071db0:	681b      	ldr	r3, [r3, #0]
 8071db2:	3301      	adds	r3, #1
 8071db4:	4a0d      	ldr	r2, [pc, #52]	; (8071dec <vPortEnterCritical+0x58>)
 8071db6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8071db8:	4b0c      	ldr	r3, [pc, #48]	; (8071dec <vPortEnterCritical+0x58>)
 8071dba:	681b      	ldr	r3, [r3, #0]
 8071dbc:	2b01      	cmp	r3, #1
 8071dbe:	d10f      	bne.n	8071de0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8071dc0:	4b0b      	ldr	r3, [pc, #44]	; (8071df0 <vPortEnterCritical+0x5c>)
 8071dc2:	681b      	ldr	r3, [r3, #0]
 8071dc4:	b2db      	uxtb	r3, r3
 8071dc6:	2b00      	cmp	r3, #0
 8071dc8:	d00a      	beq.n	8071de0 <vPortEnterCritical+0x4c>
	__asm volatile
 8071dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071dce:	f383 8811 	msr	BASEPRI, r3
 8071dd2:	f3bf 8f6f 	isb	sy
 8071dd6:	f3bf 8f4f 	dsb	sy
 8071dda:	603b      	str	r3, [r7, #0]
}
 8071ddc:	bf00      	nop
 8071dde:	e7fe      	b.n	8071dde <vPortEnterCritical+0x4a>
	}
}
 8071de0:	bf00      	nop
 8071de2:	370c      	adds	r7, #12
 8071de4:	46bd      	mov	sp, r7
 8071de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071dea:	4770      	bx	lr
 8071dec:	20000024 	.word	0x20000024
 8071df0:	e000ed04 	.word	0xe000ed04

08071df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8071df4:	b480      	push	{r7}
 8071df6:	b083      	sub	sp, #12
 8071df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8071dfa:	4b12      	ldr	r3, [pc, #72]	; (8071e44 <vPortExitCritical+0x50>)
 8071dfc:	681b      	ldr	r3, [r3, #0]
 8071dfe:	2b00      	cmp	r3, #0
 8071e00:	d10a      	bne.n	8071e18 <vPortExitCritical+0x24>
	__asm volatile
 8071e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071e06:	f383 8811 	msr	BASEPRI, r3
 8071e0a:	f3bf 8f6f 	isb	sy
 8071e0e:	f3bf 8f4f 	dsb	sy
 8071e12:	607b      	str	r3, [r7, #4]
}
 8071e14:	bf00      	nop
 8071e16:	e7fe      	b.n	8071e16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8071e18:	4b0a      	ldr	r3, [pc, #40]	; (8071e44 <vPortExitCritical+0x50>)
 8071e1a:	681b      	ldr	r3, [r3, #0]
 8071e1c:	3b01      	subs	r3, #1
 8071e1e:	4a09      	ldr	r2, [pc, #36]	; (8071e44 <vPortExitCritical+0x50>)
 8071e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8071e22:	4b08      	ldr	r3, [pc, #32]	; (8071e44 <vPortExitCritical+0x50>)
 8071e24:	681b      	ldr	r3, [r3, #0]
 8071e26:	2b00      	cmp	r3, #0
 8071e28:	d105      	bne.n	8071e36 <vPortExitCritical+0x42>
 8071e2a:	2300      	movs	r3, #0
 8071e2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8071e2e:	683b      	ldr	r3, [r7, #0]
 8071e30:	f383 8811 	msr	BASEPRI, r3
}
 8071e34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8071e36:	bf00      	nop
 8071e38:	370c      	adds	r7, #12
 8071e3a:	46bd      	mov	sp, r7
 8071e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071e40:	4770      	bx	lr
 8071e42:	bf00      	nop
 8071e44:	20000024 	.word	0x20000024
	...

08071e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8071e50:	f3ef 8009 	mrs	r0, PSP
 8071e54:	f3bf 8f6f 	isb	sy
 8071e58:	4b15      	ldr	r3, [pc, #84]	; (8071eb0 <pxCurrentTCBConst>)
 8071e5a:	681a      	ldr	r2, [r3, #0]
 8071e5c:	f01e 0f10 	tst.w	lr, #16
 8071e60:	bf08      	it	eq
 8071e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8071e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8071e6a:	6010      	str	r0, [r2, #0]
 8071e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8071e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8071e74:	f380 8811 	msr	BASEPRI, r0
 8071e78:	f3bf 8f4f 	dsb	sy
 8071e7c:	f3bf 8f6f 	isb	sy
 8071e80:	f7fe fbee 	bl	8070660 <vTaskSwitchContext>
 8071e84:	f04f 0000 	mov.w	r0, #0
 8071e88:	f380 8811 	msr	BASEPRI, r0
 8071e8c:	bc09      	pop	{r0, r3}
 8071e8e:	6819      	ldr	r1, [r3, #0]
 8071e90:	6808      	ldr	r0, [r1, #0]
 8071e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8071e96:	f01e 0f10 	tst.w	lr, #16
 8071e9a:	bf08      	it	eq
 8071e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8071ea0:	f380 8809 	msr	PSP, r0
 8071ea4:	f3bf 8f6f 	isb	sy
 8071ea8:	4770      	bx	lr
 8071eaa:	bf00      	nop
 8071eac:	f3af 8000 	nop.w

08071eb0 <pxCurrentTCBConst>:
 8071eb0:	20000bd4 	.word	0x20000bd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8071eb4:	bf00      	nop
 8071eb6:	bf00      	nop

08071eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8071eb8:	b580      	push	{r7, lr}
 8071eba:	b082      	sub	sp, #8
 8071ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8071ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071ec2:	f383 8811 	msr	BASEPRI, r3
 8071ec6:	f3bf 8f6f 	isb	sy
 8071eca:	f3bf 8f4f 	dsb	sy
 8071ece:	607b      	str	r3, [r7, #4]
}
 8071ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8071ed2:	f7fe fb0b 	bl	80704ec <xTaskIncrementTick>
 8071ed6:	4603      	mov	r3, r0
 8071ed8:	2b00      	cmp	r3, #0
 8071eda:	d003      	beq.n	8071ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8071edc:	4b06      	ldr	r3, [pc, #24]	; (8071ef8 <xPortSysTickHandler+0x40>)
 8071ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8071ee2:	601a      	str	r2, [r3, #0]
 8071ee4:	2300      	movs	r3, #0
 8071ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8071ee8:	683b      	ldr	r3, [r7, #0]
 8071eea:	f383 8811 	msr	BASEPRI, r3
}
 8071eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8071ef0:	bf00      	nop
 8071ef2:	3708      	adds	r7, #8
 8071ef4:	46bd      	mov	sp, r7
 8071ef6:	bd80      	pop	{r7, pc}
 8071ef8:	e000ed04 	.word	0xe000ed04

08071efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8071efc:	b480      	push	{r7}
 8071efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8071f00:	4b0b      	ldr	r3, [pc, #44]	; (8071f30 <vPortSetupTimerInterrupt+0x34>)
 8071f02:	2200      	movs	r2, #0
 8071f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8071f06:	4b0b      	ldr	r3, [pc, #44]	; (8071f34 <vPortSetupTimerInterrupt+0x38>)
 8071f08:	2200      	movs	r2, #0
 8071f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8071f0c:	4b0a      	ldr	r3, [pc, #40]	; (8071f38 <vPortSetupTimerInterrupt+0x3c>)
 8071f0e:	681b      	ldr	r3, [r3, #0]
 8071f10:	4a0a      	ldr	r2, [pc, #40]	; (8071f3c <vPortSetupTimerInterrupt+0x40>)
 8071f12:	fba2 2303 	umull	r2, r3, r2, r3
 8071f16:	099b      	lsrs	r3, r3, #6
 8071f18:	4a09      	ldr	r2, [pc, #36]	; (8071f40 <vPortSetupTimerInterrupt+0x44>)
 8071f1a:	3b01      	subs	r3, #1
 8071f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8071f1e:	4b04      	ldr	r3, [pc, #16]	; (8071f30 <vPortSetupTimerInterrupt+0x34>)
 8071f20:	2207      	movs	r2, #7
 8071f22:	601a      	str	r2, [r3, #0]
}
 8071f24:	bf00      	nop
 8071f26:	46bd      	mov	sp, r7
 8071f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071f2c:	4770      	bx	lr
 8071f2e:	bf00      	nop
 8071f30:	e000e010 	.word	0xe000e010
 8071f34:	e000e018 	.word	0xe000e018
 8071f38:	20000000 	.word	0x20000000
 8071f3c:	10624dd3 	.word	0x10624dd3
 8071f40:	e000e014 	.word	0xe000e014

08071f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8071f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8071f54 <vPortEnableVFP+0x10>
 8071f48:	6801      	ldr	r1, [r0, #0]
 8071f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8071f4e:	6001      	str	r1, [r0, #0]
 8071f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8071f52:	bf00      	nop
 8071f54:	e000ed88 	.word	0xe000ed88

08071f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8071f58:	b480      	push	{r7}
 8071f5a:	b085      	sub	sp, #20
 8071f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8071f5e:	f3ef 8305 	mrs	r3, IPSR
 8071f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8071f64:	68fb      	ldr	r3, [r7, #12]
 8071f66:	2b0f      	cmp	r3, #15
 8071f68:	d914      	bls.n	8071f94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8071f6a:	4a17      	ldr	r2, [pc, #92]	; (8071fc8 <vPortValidateInterruptPriority+0x70>)
 8071f6c:	68fb      	ldr	r3, [r7, #12]
 8071f6e:	4413      	add	r3, r2
 8071f70:	781b      	ldrb	r3, [r3, #0]
 8071f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8071f74:	4b15      	ldr	r3, [pc, #84]	; (8071fcc <vPortValidateInterruptPriority+0x74>)
 8071f76:	781b      	ldrb	r3, [r3, #0]
 8071f78:	7afa      	ldrb	r2, [r7, #11]
 8071f7a:	429a      	cmp	r2, r3
 8071f7c:	d20a      	bcs.n	8071f94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8071f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071f82:	f383 8811 	msr	BASEPRI, r3
 8071f86:	f3bf 8f6f 	isb	sy
 8071f8a:	f3bf 8f4f 	dsb	sy
 8071f8e:	607b      	str	r3, [r7, #4]
}
 8071f90:	bf00      	nop
 8071f92:	e7fe      	b.n	8071f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8071f94:	4b0e      	ldr	r3, [pc, #56]	; (8071fd0 <vPortValidateInterruptPriority+0x78>)
 8071f96:	681b      	ldr	r3, [r3, #0]
 8071f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8071f9c:	4b0d      	ldr	r3, [pc, #52]	; (8071fd4 <vPortValidateInterruptPriority+0x7c>)
 8071f9e:	681b      	ldr	r3, [r3, #0]
 8071fa0:	429a      	cmp	r2, r3
 8071fa2:	d90a      	bls.n	8071fba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8071fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8071fa8:	f383 8811 	msr	BASEPRI, r3
 8071fac:	f3bf 8f6f 	isb	sy
 8071fb0:	f3bf 8f4f 	dsb	sy
 8071fb4:	603b      	str	r3, [r7, #0]
}
 8071fb6:	bf00      	nop
 8071fb8:	e7fe      	b.n	8071fb8 <vPortValidateInterruptPriority+0x60>
	}
 8071fba:	bf00      	nop
 8071fbc:	3714      	adds	r7, #20
 8071fbe:	46bd      	mov	sp, r7
 8071fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8071fc4:	4770      	bx	lr
 8071fc6:	bf00      	nop
 8071fc8:	e000e3f0 	.word	0xe000e3f0
 8071fcc:	20001200 	.word	0x20001200
 8071fd0:	e000ed0c 	.word	0xe000ed0c
 8071fd4:	20001204 	.word	0x20001204

08071fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8071fd8:	b580      	push	{r7, lr}
 8071fda:	b08a      	sub	sp, #40	; 0x28
 8071fdc:	af00      	add	r7, sp, #0
 8071fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8071fe0:	2300      	movs	r3, #0
 8071fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8071fe4:	f7fe f9c6 	bl	8070374 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8071fe8:	4b5b      	ldr	r3, [pc, #364]	; (8072158 <pvPortMalloc+0x180>)
 8071fea:	681b      	ldr	r3, [r3, #0]
 8071fec:	2b00      	cmp	r3, #0
 8071fee:	d101      	bne.n	8071ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8071ff0:	f000 f920 	bl	8072234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8071ff4:	4b59      	ldr	r3, [pc, #356]	; (807215c <pvPortMalloc+0x184>)
 8071ff6:	681a      	ldr	r2, [r3, #0]
 8071ff8:	687b      	ldr	r3, [r7, #4]
 8071ffa:	4013      	ands	r3, r2
 8071ffc:	2b00      	cmp	r3, #0
 8071ffe:	f040 8093 	bne.w	8072128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8072002:	687b      	ldr	r3, [r7, #4]
 8072004:	2b00      	cmp	r3, #0
 8072006:	d01d      	beq.n	8072044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8072008:	2208      	movs	r2, #8
 807200a:	687b      	ldr	r3, [r7, #4]
 807200c:	4413      	add	r3, r2
 807200e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8072010:	687b      	ldr	r3, [r7, #4]
 8072012:	f003 0307 	and.w	r3, r3, #7
 8072016:	2b00      	cmp	r3, #0
 8072018:	d014      	beq.n	8072044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 807201a:	687b      	ldr	r3, [r7, #4]
 807201c:	f023 0307 	bic.w	r3, r3, #7
 8072020:	3308      	adds	r3, #8
 8072022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8072024:	687b      	ldr	r3, [r7, #4]
 8072026:	f003 0307 	and.w	r3, r3, #7
 807202a:	2b00      	cmp	r3, #0
 807202c:	d00a      	beq.n	8072044 <pvPortMalloc+0x6c>
	__asm volatile
 807202e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8072032:	f383 8811 	msr	BASEPRI, r3
 8072036:	f3bf 8f6f 	isb	sy
 807203a:	f3bf 8f4f 	dsb	sy
 807203e:	617b      	str	r3, [r7, #20]
}
 8072040:	bf00      	nop
 8072042:	e7fe      	b.n	8072042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8072044:	687b      	ldr	r3, [r7, #4]
 8072046:	2b00      	cmp	r3, #0
 8072048:	d06e      	beq.n	8072128 <pvPortMalloc+0x150>
 807204a:	4b45      	ldr	r3, [pc, #276]	; (8072160 <pvPortMalloc+0x188>)
 807204c:	681b      	ldr	r3, [r3, #0]
 807204e:	687a      	ldr	r2, [r7, #4]
 8072050:	429a      	cmp	r2, r3
 8072052:	d869      	bhi.n	8072128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8072054:	4b43      	ldr	r3, [pc, #268]	; (8072164 <pvPortMalloc+0x18c>)
 8072056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8072058:	4b42      	ldr	r3, [pc, #264]	; (8072164 <pvPortMalloc+0x18c>)
 807205a:	681b      	ldr	r3, [r3, #0]
 807205c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 807205e:	e004      	b.n	807206a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8072060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8072062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8072064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8072066:	681b      	ldr	r3, [r3, #0]
 8072068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 807206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807206c:	685b      	ldr	r3, [r3, #4]
 807206e:	687a      	ldr	r2, [r7, #4]
 8072070:	429a      	cmp	r2, r3
 8072072:	d903      	bls.n	807207c <pvPortMalloc+0xa4>
 8072074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8072076:	681b      	ldr	r3, [r3, #0]
 8072078:	2b00      	cmp	r3, #0
 807207a:	d1f1      	bne.n	8072060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 807207c:	4b36      	ldr	r3, [pc, #216]	; (8072158 <pvPortMalloc+0x180>)
 807207e:	681b      	ldr	r3, [r3, #0]
 8072080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8072082:	429a      	cmp	r2, r3
 8072084:	d050      	beq.n	8072128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8072086:	6a3b      	ldr	r3, [r7, #32]
 8072088:	681b      	ldr	r3, [r3, #0]
 807208a:	2208      	movs	r2, #8
 807208c:	4413      	add	r3, r2
 807208e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8072090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8072092:	681a      	ldr	r2, [r3, #0]
 8072094:	6a3b      	ldr	r3, [r7, #32]
 8072096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8072098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807209a:	685a      	ldr	r2, [r3, #4]
 807209c:	687b      	ldr	r3, [r7, #4]
 807209e:	1ad2      	subs	r2, r2, r3
 80720a0:	2308      	movs	r3, #8
 80720a2:	005b      	lsls	r3, r3, #1
 80720a4:	429a      	cmp	r2, r3
 80720a6:	d91f      	bls.n	80720e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80720a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80720aa:	687b      	ldr	r3, [r7, #4]
 80720ac:	4413      	add	r3, r2
 80720ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80720b0:	69bb      	ldr	r3, [r7, #24]
 80720b2:	f003 0307 	and.w	r3, r3, #7
 80720b6:	2b00      	cmp	r3, #0
 80720b8:	d00a      	beq.n	80720d0 <pvPortMalloc+0xf8>
	__asm volatile
 80720ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80720be:	f383 8811 	msr	BASEPRI, r3
 80720c2:	f3bf 8f6f 	isb	sy
 80720c6:	f3bf 8f4f 	dsb	sy
 80720ca:	613b      	str	r3, [r7, #16]
}
 80720cc:	bf00      	nop
 80720ce:	e7fe      	b.n	80720ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80720d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80720d2:	685a      	ldr	r2, [r3, #4]
 80720d4:	687b      	ldr	r3, [r7, #4]
 80720d6:	1ad2      	subs	r2, r2, r3
 80720d8:	69bb      	ldr	r3, [r7, #24]
 80720da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80720dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80720de:	687a      	ldr	r2, [r7, #4]
 80720e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80720e2:	69b8      	ldr	r0, [r7, #24]
 80720e4:	f000 f908 	bl	80722f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80720e8:	4b1d      	ldr	r3, [pc, #116]	; (8072160 <pvPortMalloc+0x188>)
 80720ea:	681a      	ldr	r2, [r3, #0]
 80720ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80720ee:	685b      	ldr	r3, [r3, #4]
 80720f0:	1ad3      	subs	r3, r2, r3
 80720f2:	4a1b      	ldr	r2, [pc, #108]	; (8072160 <pvPortMalloc+0x188>)
 80720f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80720f6:	4b1a      	ldr	r3, [pc, #104]	; (8072160 <pvPortMalloc+0x188>)
 80720f8:	681a      	ldr	r2, [r3, #0]
 80720fa:	4b1b      	ldr	r3, [pc, #108]	; (8072168 <pvPortMalloc+0x190>)
 80720fc:	681b      	ldr	r3, [r3, #0]
 80720fe:	429a      	cmp	r2, r3
 8072100:	d203      	bcs.n	807210a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8072102:	4b17      	ldr	r3, [pc, #92]	; (8072160 <pvPortMalloc+0x188>)
 8072104:	681b      	ldr	r3, [r3, #0]
 8072106:	4a18      	ldr	r2, [pc, #96]	; (8072168 <pvPortMalloc+0x190>)
 8072108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 807210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807210c:	685a      	ldr	r2, [r3, #4]
 807210e:	4b13      	ldr	r3, [pc, #76]	; (807215c <pvPortMalloc+0x184>)
 8072110:	681b      	ldr	r3, [r3, #0]
 8072112:	431a      	orrs	r2, r3
 8072114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8072116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8072118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807211a:	2200      	movs	r2, #0
 807211c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 807211e:	4b13      	ldr	r3, [pc, #76]	; (807216c <pvPortMalloc+0x194>)
 8072120:	681b      	ldr	r3, [r3, #0]
 8072122:	3301      	adds	r3, #1
 8072124:	4a11      	ldr	r2, [pc, #68]	; (807216c <pvPortMalloc+0x194>)
 8072126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8072128:	f7fe f932 	bl	8070390 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 807212c:	69fb      	ldr	r3, [r7, #28]
 807212e:	f003 0307 	and.w	r3, r3, #7
 8072132:	2b00      	cmp	r3, #0
 8072134:	d00a      	beq.n	807214c <pvPortMalloc+0x174>
	__asm volatile
 8072136:	f04f 0350 	mov.w	r3, #80	; 0x50
 807213a:	f383 8811 	msr	BASEPRI, r3
 807213e:	f3bf 8f6f 	isb	sy
 8072142:	f3bf 8f4f 	dsb	sy
 8072146:	60fb      	str	r3, [r7, #12]
}
 8072148:	bf00      	nop
 807214a:	e7fe      	b.n	807214a <pvPortMalloc+0x172>
	return pvReturn;
 807214c:	69fb      	ldr	r3, [r7, #28]
}
 807214e:	4618      	mov	r0, r3
 8072150:	3728      	adds	r7, #40	; 0x28
 8072152:	46bd      	mov	sp, r7
 8072154:	bd80      	pop	{r7, pc}
 8072156:	bf00      	nop
 8072158:	20004e10 	.word	0x20004e10
 807215c:	20004e24 	.word	0x20004e24
 8072160:	20004e14 	.word	0x20004e14
 8072164:	20004e08 	.word	0x20004e08
 8072168:	20004e18 	.word	0x20004e18
 807216c:	20004e1c 	.word	0x20004e1c

08072170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8072170:	b580      	push	{r7, lr}
 8072172:	b086      	sub	sp, #24
 8072174:	af00      	add	r7, sp, #0
 8072176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8072178:	687b      	ldr	r3, [r7, #4]
 807217a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 807217c:	687b      	ldr	r3, [r7, #4]
 807217e:	2b00      	cmp	r3, #0
 8072180:	d04d      	beq.n	807221e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8072182:	2308      	movs	r3, #8
 8072184:	425b      	negs	r3, r3
 8072186:	697a      	ldr	r2, [r7, #20]
 8072188:	4413      	add	r3, r2
 807218a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 807218c:	697b      	ldr	r3, [r7, #20]
 807218e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8072190:	693b      	ldr	r3, [r7, #16]
 8072192:	685a      	ldr	r2, [r3, #4]
 8072194:	4b24      	ldr	r3, [pc, #144]	; (8072228 <vPortFree+0xb8>)
 8072196:	681b      	ldr	r3, [r3, #0]
 8072198:	4013      	ands	r3, r2
 807219a:	2b00      	cmp	r3, #0
 807219c:	d10a      	bne.n	80721b4 <vPortFree+0x44>
	__asm volatile
 807219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80721a2:	f383 8811 	msr	BASEPRI, r3
 80721a6:	f3bf 8f6f 	isb	sy
 80721aa:	f3bf 8f4f 	dsb	sy
 80721ae:	60fb      	str	r3, [r7, #12]
}
 80721b0:	bf00      	nop
 80721b2:	e7fe      	b.n	80721b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80721b4:	693b      	ldr	r3, [r7, #16]
 80721b6:	681b      	ldr	r3, [r3, #0]
 80721b8:	2b00      	cmp	r3, #0
 80721ba:	d00a      	beq.n	80721d2 <vPortFree+0x62>
	__asm volatile
 80721bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80721c0:	f383 8811 	msr	BASEPRI, r3
 80721c4:	f3bf 8f6f 	isb	sy
 80721c8:	f3bf 8f4f 	dsb	sy
 80721cc:	60bb      	str	r3, [r7, #8]
}
 80721ce:	bf00      	nop
 80721d0:	e7fe      	b.n	80721d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80721d2:	693b      	ldr	r3, [r7, #16]
 80721d4:	685a      	ldr	r2, [r3, #4]
 80721d6:	4b14      	ldr	r3, [pc, #80]	; (8072228 <vPortFree+0xb8>)
 80721d8:	681b      	ldr	r3, [r3, #0]
 80721da:	4013      	ands	r3, r2
 80721dc:	2b00      	cmp	r3, #0
 80721de:	d01e      	beq.n	807221e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80721e0:	693b      	ldr	r3, [r7, #16]
 80721e2:	681b      	ldr	r3, [r3, #0]
 80721e4:	2b00      	cmp	r3, #0
 80721e6:	d11a      	bne.n	807221e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80721e8:	693b      	ldr	r3, [r7, #16]
 80721ea:	685a      	ldr	r2, [r3, #4]
 80721ec:	4b0e      	ldr	r3, [pc, #56]	; (8072228 <vPortFree+0xb8>)
 80721ee:	681b      	ldr	r3, [r3, #0]
 80721f0:	43db      	mvns	r3, r3
 80721f2:	401a      	ands	r2, r3
 80721f4:	693b      	ldr	r3, [r7, #16]
 80721f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80721f8:	f7fe f8bc 	bl	8070374 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80721fc:	693b      	ldr	r3, [r7, #16]
 80721fe:	685a      	ldr	r2, [r3, #4]
 8072200:	4b0a      	ldr	r3, [pc, #40]	; (807222c <vPortFree+0xbc>)
 8072202:	681b      	ldr	r3, [r3, #0]
 8072204:	4413      	add	r3, r2
 8072206:	4a09      	ldr	r2, [pc, #36]	; (807222c <vPortFree+0xbc>)
 8072208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 807220a:	6938      	ldr	r0, [r7, #16]
 807220c:	f000 f874 	bl	80722f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8072210:	4b07      	ldr	r3, [pc, #28]	; (8072230 <vPortFree+0xc0>)
 8072212:	681b      	ldr	r3, [r3, #0]
 8072214:	3301      	adds	r3, #1
 8072216:	4a06      	ldr	r2, [pc, #24]	; (8072230 <vPortFree+0xc0>)
 8072218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 807221a:	f7fe f8b9 	bl	8070390 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 807221e:	bf00      	nop
 8072220:	3718      	adds	r7, #24
 8072222:	46bd      	mov	sp, r7
 8072224:	bd80      	pop	{r7, pc}
 8072226:	bf00      	nop
 8072228:	20004e24 	.word	0x20004e24
 807222c:	20004e14 	.word	0x20004e14
 8072230:	20004e20 	.word	0x20004e20

08072234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8072234:	b480      	push	{r7}
 8072236:	b085      	sub	sp, #20
 8072238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 807223a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 807223e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8072240:	4b27      	ldr	r3, [pc, #156]	; (80722e0 <prvHeapInit+0xac>)
 8072242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8072244:	68fb      	ldr	r3, [r7, #12]
 8072246:	f003 0307 	and.w	r3, r3, #7
 807224a:	2b00      	cmp	r3, #0
 807224c:	d00c      	beq.n	8072268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 807224e:	68fb      	ldr	r3, [r7, #12]
 8072250:	3307      	adds	r3, #7
 8072252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8072254:	68fb      	ldr	r3, [r7, #12]
 8072256:	f023 0307 	bic.w	r3, r3, #7
 807225a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 807225c:	68ba      	ldr	r2, [r7, #8]
 807225e:	68fb      	ldr	r3, [r7, #12]
 8072260:	1ad3      	subs	r3, r2, r3
 8072262:	4a1f      	ldr	r2, [pc, #124]	; (80722e0 <prvHeapInit+0xac>)
 8072264:	4413      	add	r3, r2
 8072266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8072268:	68fb      	ldr	r3, [r7, #12]
 807226a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 807226c:	4a1d      	ldr	r2, [pc, #116]	; (80722e4 <prvHeapInit+0xb0>)
 807226e:	687b      	ldr	r3, [r7, #4]
 8072270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8072272:	4b1c      	ldr	r3, [pc, #112]	; (80722e4 <prvHeapInit+0xb0>)
 8072274:	2200      	movs	r2, #0
 8072276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8072278:	687b      	ldr	r3, [r7, #4]
 807227a:	68ba      	ldr	r2, [r7, #8]
 807227c:	4413      	add	r3, r2
 807227e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8072280:	2208      	movs	r2, #8
 8072282:	68fb      	ldr	r3, [r7, #12]
 8072284:	1a9b      	subs	r3, r3, r2
 8072286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8072288:	68fb      	ldr	r3, [r7, #12]
 807228a:	f023 0307 	bic.w	r3, r3, #7
 807228e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8072290:	68fb      	ldr	r3, [r7, #12]
 8072292:	4a15      	ldr	r2, [pc, #84]	; (80722e8 <prvHeapInit+0xb4>)
 8072294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8072296:	4b14      	ldr	r3, [pc, #80]	; (80722e8 <prvHeapInit+0xb4>)
 8072298:	681b      	ldr	r3, [r3, #0]
 807229a:	2200      	movs	r2, #0
 807229c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 807229e:	4b12      	ldr	r3, [pc, #72]	; (80722e8 <prvHeapInit+0xb4>)
 80722a0:	681b      	ldr	r3, [r3, #0]
 80722a2:	2200      	movs	r2, #0
 80722a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80722a6:	687b      	ldr	r3, [r7, #4]
 80722a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80722aa:	683b      	ldr	r3, [r7, #0]
 80722ac:	68fa      	ldr	r2, [r7, #12]
 80722ae:	1ad2      	subs	r2, r2, r3
 80722b0:	683b      	ldr	r3, [r7, #0]
 80722b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80722b4:	4b0c      	ldr	r3, [pc, #48]	; (80722e8 <prvHeapInit+0xb4>)
 80722b6:	681a      	ldr	r2, [r3, #0]
 80722b8:	683b      	ldr	r3, [r7, #0]
 80722ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80722bc:	683b      	ldr	r3, [r7, #0]
 80722be:	685b      	ldr	r3, [r3, #4]
 80722c0:	4a0a      	ldr	r2, [pc, #40]	; (80722ec <prvHeapInit+0xb8>)
 80722c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80722c4:	683b      	ldr	r3, [r7, #0]
 80722c6:	685b      	ldr	r3, [r3, #4]
 80722c8:	4a09      	ldr	r2, [pc, #36]	; (80722f0 <prvHeapInit+0xbc>)
 80722ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80722cc:	4b09      	ldr	r3, [pc, #36]	; (80722f4 <prvHeapInit+0xc0>)
 80722ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80722d2:	601a      	str	r2, [r3, #0]
}
 80722d4:	bf00      	nop
 80722d6:	3714      	adds	r7, #20
 80722d8:	46bd      	mov	sp, r7
 80722da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80722de:	4770      	bx	lr
 80722e0:	20001208 	.word	0x20001208
 80722e4:	20004e08 	.word	0x20004e08
 80722e8:	20004e10 	.word	0x20004e10
 80722ec:	20004e18 	.word	0x20004e18
 80722f0:	20004e14 	.word	0x20004e14
 80722f4:	20004e24 	.word	0x20004e24

080722f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80722f8:	b480      	push	{r7}
 80722fa:	b085      	sub	sp, #20
 80722fc:	af00      	add	r7, sp, #0
 80722fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8072300:	4b28      	ldr	r3, [pc, #160]	; (80723a4 <prvInsertBlockIntoFreeList+0xac>)
 8072302:	60fb      	str	r3, [r7, #12]
 8072304:	e002      	b.n	807230c <prvInsertBlockIntoFreeList+0x14>
 8072306:	68fb      	ldr	r3, [r7, #12]
 8072308:	681b      	ldr	r3, [r3, #0]
 807230a:	60fb      	str	r3, [r7, #12]
 807230c:	68fb      	ldr	r3, [r7, #12]
 807230e:	681b      	ldr	r3, [r3, #0]
 8072310:	687a      	ldr	r2, [r7, #4]
 8072312:	429a      	cmp	r2, r3
 8072314:	d8f7      	bhi.n	8072306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8072316:	68fb      	ldr	r3, [r7, #12]
 8072318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 807231a:	68fb      	ldr	r3, [r7, #12]
 807231c:	685b      	ldr	r3, [r3, #4]
 807231e:	68ba      	ldr	r2, [r7, #8]
 8072320:	4413      	add	r3, r2
 8072322:	687a      	ldr	r2, [r7, #4]
 8072324:	429a      	cmp	r2, r3
 8072326:	d108      	bne.n	807233a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8072328:	68fb      	ldr	r3, [r7, #12]
 807232a:	685a      	ldr	r2, [r3, #4]
 807232c:	687b      	ldr	r3, [r7, #4]
 807232e:	685b      	ldr	r3, [r3, #4]
 8072330:	441a      	add	r2, r3
 8072332:	68fb      	ldr	r3, [r7, #12]
 8072334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8072336:	68fb      	ldr	r3, [r7, #12]
 8072338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 807233a:	687b      	ldr	r3, [r7, #4]
 807233c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 807233e:	687b      	ldr	r3, [r7, #4]
 8072340:	685b      	ldr	r3, [r3, #4]
 8072342:	68ba      	ldr	r2, [r7, #8]
 8072344:	441a      	add	r2, r3
 8072346:	68fb      	ldr	r3, [r7, #12]
 8072348:	681b      	ldr	r3, [r3, #0]
 807234a:	429a      	cmp	r2, r3
 807234c:	d118      	bne.n	8072380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 807234e:	68fb      	ldr	r3, [r7, #12]
 8072350:	681a      	ldr	r2, [r3, #0]
 8072352:	4b15      	ldr	r3, [pc, #84]	; (80723a8 <prvInsertBlockIntoFreeList+0xb0>)
 8072354:	681b      	ldr	r3, [r3, #0]
 8072356:	429a      	cmp	r2, r3
 8072358:	d00d      	beq.n	8072376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 807235a:	687b      	ldr	r3, [r7, #4]
 807235c:	685a      	ldr	r2, [r3, #4]
 807235e:	68fb      	ldr	r3, [r7, #12]
 8072360:	681b      	ldr	r3, [r3, #0]
 8072362:	685b      	ldr	r3, [r3, #4]
 8072364:	441a      	add	r2, r3
 8072366:	687b      	ldr	r3, [r7, #4]
 8072368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 807236a:	68fb      	ldr	r3, [r7, #12]
 807236c:	681b      	ldr	r3, [r3, #0]
 807236e:	681a      	ldr	r2, [r3, #0]
 8072370:	687b      	ldr	r3, [r7, #4]
 8072372:	601a      	str	r2, [r3, #0]
 8072374:	e008      	b.n	8072388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8072376:	4b0c      	ldr	r3, [pc, #48]	; (80723a8 <prvInsertBlockIntoFreeList+0xb0>)
 8072378:	681a      	ldr	r2, [r3, #0]
 807237a:	687b      	ldr	r3, [r7, #4]
 807237c:	601a      	str	r2, [r3, #0]
 807237e:	e003      	b.n	8072388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8072380:	68fb      	ldr	r3, [r7, #12]
 8072382:	681a      	ldr	r2, [r3, #0]
 8072384:	687b      	ldr	r3, [r7, #4]
 8072386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8072388:	68fa      	ldr	r2, [r7, #12]
 807238a:	687b      	ldr	r3, [r7, #4]
 807238c:	429a      	cmp	r2, r3
 807238e:	d002      	beq.n	8072396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8072390:	68fb      	ldr	r3, [r7, #12]
 8072392:	687a      	ldr	r2, [r7, #4]
 8072394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8072396:	bf00      	nop
 8072398:	3714      	adds	r7, #20
 807239a:	46bd      	mov	sp, r7
 807239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80723a0:	4770      	bx	lr
 80723a2:	bf00      	nop
 80723a4:	20004e08 	.word	0x20004e08
 80723a8:	20004e10 	.word	0x20004e10

080723ac <__errno>:
 80723ac:	4b01      	ldr	r3, [pc, #4]	; (80723b4 <__errno+0x8>)
 80723ae:	6818      	ldr	r0, [r3, #0]
 80723b0:	4770      	bx	lr
 80723b2:	bf00      	nop
 80723b4:	20000028 	.word	0x20000028

080723b8 <std>:
 80723b8:	2300      	movs	r3, #0
 80723ba:	b510      	push	{r4, lr}
 80723bc:	4604      	mov	r4, r0
 80723be:	e9c0 3300 	strd	r3, r3, [r0]
 80723c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80723c6:	6083      	str	r3, [r0, #8]
 80723c8:	8181      	strh	r1, [r0, #12]
 80723ca:	6643      	str	r3, [r0, #100]	; 0x64
 80723cc:	81c2      	strh	r2, [r0, #14]
 80723ce:	6183      	str	r3, [r0, #24]
 80723d0:	4619      	mov	r1, r3
 80723d2:	2208      	movs	r2, #8
 80723d4:	305c      	adds	r0, #92	; 0x5c
 80723d6:	f000 f91a 	bl	807260e <memset>
 80723da:	4b05      	ldr	r3, [pc, #20]	; (80723f0 <std+0x38>)
 80723dc:	6263      	str	r3, [r4, #36]	; 0x24
 80723de:	4b05      	ldr	r3, [pc, #20]	; (80723f4 <std+0x3c>)
 80723e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80723e2:	4b05      	ldr	r3, [pc, #20]	; (80723f8 <std+0x40>)
 80723e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80723e6:	4b05      	ldr	r3, [pc, #20]	; (80723fc <std+0x44>)
 80723e8:	6224      	str	r4, [r4, #32]
 80723ea:	6323      	str	r3, [r4, #48]	; 0x30
 80723ec:	bd10      	pop	{r4, pc}
 80723ee:	bf00      	nop
 80723f0:	08073509 	.word	0x08073509
 80723f4:	0807352b 	.word	0x0807352b
 80723f8:	08073563 	.word	0x08073563
 80723fc:	08073587 	.word	0x08073587

08072400 <_cleanup_r>:
 8072400:	4901      	ldr	r1, [pc, #4]	; (8072408 <_cleanup_r+0x8>)
 8072402:	f000 b8af 	b.w	8072564 <_fwalk_reent>
 8072406:	bf00      	nop
 8072408:	0807515d 	.word	0x0807515d

0807240c <__sfmoreglue>:
 807240c:	b570      	push	{r4, r5, r6, lr}
 807240e:	1e4a      	subs	r2, r1, #1
 8072410:	2568      	movs	r5, #104	; 0x68
 8072412:	4355      	muls	r5, r2
 8072414:	460e      	mov	r6, r1
 8072416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 807241a:	f000 f901 	bl	8072620 <_malloc_r>
 807241e:	4604      	mov	r4, r0
 8072420:	b140      	cbz	r0, 8072434 <__sfmoreglue+0x28>
 8072422:	2100      	movs	r1, #0
 8072424:	e9c0 1600 	strd	r1, r6, [r0]
 8072428:	300c      	adds	r0, #12
 807242a:	60a0      	str	r0, [r4, #8]
 807242c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8072430:	f000 f8ed 	bl	807260e <memset>
 8072434:	4620      	mov	r0, r4
 8072436:	bd70      	pop	{r4, r5, r6, pc}

08072438 <__sfp_lock_acquire>:
 8072438:	4801      	ldr	r0, [pc, #4]	; (8072440 <__sfp_lock_acquire+0x8>)
 807243a:	f000 b8d8 	b.w	80725ee <__retarget_lock_acquire_recursive>
 807243e:	bf00      	nop
 8072440:	20005d30 	.word	0x20005d30

08072444 <__sfp_lock_release>:
 8072444:	4801      	ldr	r0, [pc, #4]	; (807244c <__sfp_lock_release+0x8>)
 8072446:	f000 b8d3 	b.w	80725f0 <__retarget_lock_release_recursive>
 807244a:	bf00      	nop
 807244c:	20005d30 	.word	0x20005d30

08072450 <__sinit_lock_acquire>:
 8072450:	4801      	ldr	r0, [pc, #4]	; (8072458 <__sinit_lock_acquire+0x8>)
 8072452:	f000 b8cc 	b.w	80725ee <__retarget_lock_acquire_recursive>
 8072456:	bf00      	nop
 8072458:	20005d2b 	.word	0x20005d2b

0807245c <__sinit_lock_release>:
 807245c:	4801      	ldr	r0, [pc, #4]	; (8072464 <__sinit_lock_release+0x8>)
 807245e:	f000 b8c7 	b.w	80725f0 <__retarget_lock_release_recursive>
 8072462:	bf00      	nop
 8072464:	20005d2b 	.word	0x20005d2b

08072468 <__sinit>:
 8072468:	b510      	push	{r4, lr}
 807246a:	4604      	mov	r4, r0
 807246c:	f7ff fff0 	bl	8072450 <__sinit_lock_acquire>
 8072470:	69a3      	ldr	r3, [r4, #24]
 8072472:	b11b      	cbz	r3, 807247c <__sinit+0x14>
 8072474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8072478:	f7ff bff0 	b.w	807245c <__sinit_lock_release>
 807247c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8072480:	6523      	str	r3, [r4, #80]	; 0x50
 8072482:	4b13      	ldr	r3, [pc, #76]	; (80724d0 <__sinit+0x68>)
 8072484:	4a13      	ldr	r2, [pc, #76]	; (80724d4 <__sinit+0x6c>)
 8072486:	681b      	ldr	r3, [r3, #0]
 8072488:	62a2      	str	r2, [r4, #40]	; 0x28
 807248a:	42a3      	cmp	r3, r4
 807248c:	bf04      	itt	eq
 807248e:	2301      	moveq	r3, #1
 8072490:	61a3      	streq	r3, [r4, #24]
 8072492:	4620      	mov	r0, r4
 8072494:	f000 f820 	bl	80724d8 <__sfp>
 8072498:	6060      	str	r0, [r4, #4]
 807249a:	4620      	mov	r0, r4
 807249c:	f000 f81c 	bl	80724d8 <__sfp>
 80724a0:	60a0      	str	r0, [r4, #8]
 80724a2:	4620      	mov	r0, r4
 80724a4:	f000 f818 	bl	80724d8 <__sfp>
 80724a8:	2200      	movs	r2, #0
 80724aa:	60e0      	str	r0, [r4, #12]
 80724ac:	2104      	movs	r1, #4
 80724ae:	6860      	ldr	r0, [r4, #4]
 80724b0:	f7ff ff82 	bl	80723b8 <std>
 80724b4:	68a0      	ldr	r0, [r4, #8]
 80724b6:	2201      	movs	r2, #1
 80724b8:	2109      	movs	r1, #9
 80724ba:	f7ff ff7d 	bl	80723b8 <std>
 80724be:	68e0      	ldr	r0, [r4, #12]
 80724c0:	2202      	movs	r2, #2
 80724c2:	2112      	movs	r1, #18
 80724c4:	f7ff ff78 	bl	80723b8 <std>
 80724c8:	2301      	movs	r3, #1
 80724ca:	61a3      	str	r3, [r4, #24]
 80724cc:	e7d2      	b.n	8072474 <__sinit+0xc>
 80724ce:	bf00      	nop
 80724d0:	080775bc 	.word	0x080775bc
 80724d4:	08072401 	.word	0x08072401

080724d8 <__sfp>:
 80724d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80724da:	4607      	mov	r7, r0
 80724dc:	f7ff ffac 	bl	8072438 <__sfp_lock_acquire>
 80724e0:	4b1e      	ldr	r3, [pc, #120]	; (807255c <__sfp+0x84>)
 80724e2:	681e      	ldr	r6, [r3, #0]
 80724e4:	69b3      	ldr	r3, [r6, #24]
 80724e6:	b913      	cbnz	r3, 80724ee <__sfp+0x16>
 80724e8:	4630      	mov	r0, r6
 80724ea:	f7ff ffbd 	bl	8072468 <__sinit>
 80724ee:	3648      	adds	r6, #72	; 0x48
 80724f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80724f4:	3b01      	subs	r3, #1
 80724f6:	d503      	bpl.n	8072500 <__sfp+0x28>
 80724f8:	6833      	ldr	r3, [r6, #0]
 80724fa:	b30b      	cbz	r3, 8072540 <__sfp+0x68>
 80724fc:	6836      	ldr	r6, [r6, #0]
 80724fe:	e7f7      	b.n	80724f0 <__sfp+0x18>
 8072500:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8072504:	b9d5      	cbnz	r5, 807253c <__sfp+0x64>
 8072506:	4b16      	ldr	r3, [pc, #88]	; (8072560 <__sfp+0x88>)
 8072508:	60e3      	str	r3, [r4, #12]
 807250a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 807250e:	6665      	str	r5, [r4, #100]	; 0x64
 8072510:	f000 f86c 	bl	80725ec <__retarget_lock_init_recursive>
 8072514:	f7ff ff96 	bl	8072444 <__sfp_lock_release>
 8072518:	e9c4 5501 	strd	r5, r5, [r4, #4]
 807251c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8072520:	6025      	str	r5, [r4, #0]
 8072522:	61a5      	str	r5, [r4, #24]
 8072524:	2208      	movs	r2, #8
 8072526:	4629      	mov	r1, r5
 8072528:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 807252c:	f000 f86f 	bl	807260e <memset>
 8072530:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8072534:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8072538:	4620      	mov	r0, r4
 807253a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 807253c:	3468      	adds	r4, #104	; 0x68
 807253e:	e7d9      	b.n	80724f4 <__sfp+0x1c>
 8072540:	2104      	movs	r1, #4
 8072542:	4638      	mov	r0, r7
 8072544:	f7ff ff62 	bl	807240c <__sfmoreglue>
 8072548:	4604      	mov	r4, r0
 807254a:	6030      	str	r0, [r6, #0]
 807254c:	2800      	cmp	r0, #0
 807254e:	d1d5      	bne.n	80724fc <__sfp+0x24>
 8072550:	f7ff ff78 	bl	8072444 <__sfp_lock_release>
 8072554:	230c      	movs	r3, #12
 8072556:	603b      	str	r3, [r7, #0]
 8072558:	e7ee      	b.n	8072538 <__sfp+0x60>
 807255a:	bf00      	nop
 807255c:	080775bc 	.word	0x080775bc
 8072560:	ffff0001 	.word	0xffff0001

08072564 <_fwalk_reent>:
 8072564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8072568:	4606      	mov	r6, r0
 807256a:	4688      	mov	r8, r1
 807256c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8072570:	2700      	movs	r7, #0
 8072572:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8072576:	f1b9 0901 	subs.w	r9, r9, #1
 807257a:	d505      	bpl.n	8072588 <_fwalk_reent+0x24>
 807257c:	6824      	ldr	r4, [r4, #0]
 807257e:	2c00      	cmp	r4, #0
 8072580:	d1f7      	bne.n	8072572 <_fwalk_reent+0xe>
 8072582:	4638      	mov	r0, r7
 8072584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8072588:	89ab      	ldrh	r3, [r5, #12]
 807258a:	2b01      	cmp	r3, #1
 807258c:	d907      	bls.n	807259e <_fwalk_reent+0x3a>
 807258e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8072592:	3301      	adds	r3, #1
 8072594:	d003      	beq.n	807259e <_fwalk_reent+0x3a>
 8072596:	4629      	mov	r1, r5
 8072598:	4630      	mov	r0, r6
 807259a:	47c0      	blx	r8
 807259c:	4307      	orrs	r7, r0
 807259e:	3568      	adds	r5, #104	; 0x68
 80725a0:	e7e9      	b.n	8072576 <_fwalk_reent+0x12>
	...

080725a4 <__libc_init_array>:
 80725a4:	b570      	push	{r4, r5, r6, lr}
 80725a6:	4d0d      	ldr	r5, [pc, #52]	; (80725dc <__libc_init_array+0x38>)
 80725a8:	4c0d      	ldr	r4, [pc, #52]	; (80725e0 <__libc_init_array+0x3c>)
 80725aa:	1b64      	subs	r4, r4, r5
 80725ac:	10a4      	asrs	r4, r4, #2
 80725ae:	2600      	movs	r6, #0
 80725b0:	42a6      	cmp	r6, r4
 80725b2:	d109      	bne.n	80725c8 <__libc_init_array+0x24>
 80725b4:	4d0b      	ldr	r5, [pc, #44]	; (80725e4 <__libc_init_array+0x40>)
 80725b6:	4c0c      	ldr	r4, [pc, #48]	; (80725e8 <__libc_init_array+0x44>)
 80725b8:	f004 fbba 	bl	8076d30 <_init>
 80725bc:	1b64      	subs	r4, r4, r5
 80725be:	10a4      	asrs	r4, r4, #2
 80725c0:	2600      	movs	r6, #0
 80725c2:	42a6      	cmp	r6, r4
 80725c4:	d105      	bne.n	80725d2 <__libc_init_array+0x2e>
 80725c6:	bd70      	pop	{r4, r5, r6, pc}
 80725c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80725cc:	4798      	blx	r3
 80725ce:	3601      	adds	r6, #1
 80725d0:	e7ee      	b.n	80725b0 <__libc_init_array+0xc>
 80725d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80725d6:	4798      	blx	r3
 80725d8:	3601      	adds	r6, #1
 80725da:	e7f2      	b.n	80725c2 <__libc_init_array+0x1e>
 80725dc:	08077a1c 	.word	0x08077a1c
 80725e0:	08077a1c 	.word	0x08077a1c
 80725e4:	08077a1c 	.word	0x08077a1c
 80725e8:	08077a20 	.word	0x08077a20

080725ec <__retarget_lock_init_recursive>:
 80725ec:	4770      	bx	lr

080725ee <__retarget_lock_acquire_recursive>:
 80725ee:	4770      	bx	lr

080725f0 <__retarget_lock_release_recursive>:
 80725f0:	4770      	bx	lr

080725f2 <memcpy>:
 80725f2:	440a      	add	r2, r1
 80725f4:	4291      	cmp	r1, r2
 80725f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80725fa:	d100      	bne.n	80725fe <memcpy+0xc>
 80725fc:	4770      	bx	lr
 80725fe:	b510      	push	{r4, lr}
 8072600:	f811 4b01 	ldrb.w	r4, [r1], #1
 8072604:	f803 4f01 	strb.w	r4, [r3, #1]!
 8072608:	4291      	cmp	r1, r2
 807260a:	d1f9      	bne.n	8072600 <memcpy+0xe>
 807260c:	bd10      	pop	{r4, pc}

0807260e <memset>:
 807260e:	4402      	add	r2, r0
 8072610:	4603      	mov	r3, r0
 8072612:	4293      	cmp	r3, r2
 8072614:	d100      	bne.n	8072618 <memset+0xa>
 8072616:	4770      	bx	lr
 8072618:	f803 1b01 	strb.w	r1, [r3], #1
 807261c:	e7f9      	b.n	8072612 <memset+0x4>
	...

08072620 <_malloc_r>:
 8072620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8072622:	1ccd      	adds	r5, r1, #3
 8072624:	f025 0503 	bic.w	r5, r5, #3
 8072628:	3508      	adds	r5, #8
 807262a:	2d0c      	cmp	r5, #12
 807262c:	bf38      	it	cc
 807262e:	250c      	movcc	r5, #12
 8072630:	2d00      	cmp	r5, #0
 8072632:	4606      	mov	r6, r0
 8072634:	db01      	blt.n	807263a <_malloc_r+0x1a>
 8072636:	42a9      	cmp	r1, r5
 8072638:	d903      	bls.n	8072642 <_malloc_r+0x22>
 807263a:	230c      	movs	r3, #12
 807263c:	6033      	str	r3, [r6, #0]
 807263e:	2000      	movs	r0, #0
 8072640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8072642:	f003 f967 	bl	8075914 <__malloc_lock>
 8072646:	4921      	ldr	r1, [pc, #132]	; (80726cc <_malloc_r+0xac>)
 8072648:	680a      	ldr	r2, [r1, #0]
 807264a:	4614      	mov	r4, r2
 807264c:	b99c      	cbnz	r4, 8072676 <_malloc_r+0x56>
 807264e:	4f20      	ldr	r7, [pc, #128]	; (80726d0 <_malloc_r+0xb0>)
 8072650:	683b      	ldr	r3, [r7, #0]
 8072652:	b923      	cbnz	r3, 807265e <_malloc_r+0x3e>
 8072654:	4621      	mov	r1, r4
 8072656:	4630      	mov	r0, r6
 8072658:	f000 ff20 	bl	807349c <_sbrk_r>
 807265c:	6038      	str	r0, [r7, #0]
 807265e:	4629      	mov	r1, r5
 8072660:	4630      	mov	r0, r6
 8072662:	f000 ff1b 	bl	807349c <_sbrk_r>
 8072666:	1c43      	adds	r3, r0, #1
 8072668:	d123      	bne.n	80726b2 <_malloc_r+0x92>
 807266a:	230c      	movs	r3, #12
 807266c:	6033      	str	r3, [r6, #0]
 807266e:	4630      	mov	r0, r6
 8072670:	f003 f956 	bl	8075920 <__malloc_unlock>
 8072674:	e7e3      	b.n	807263e <_malloc_r+0x1e>
 8072676:	6823      	ldr	r3, [r4, #0]
 8072678:	1b5b      	subs	r3, r3, r5
 807267a:	d417      	bmi.n	80726ac <_malloc_r+0x8c>
 807267c:	2b0b      	cmp	r3, #11
 807267e:	d903      	bls.n	8072688 <_malloc_r+0x68>
 8072680:	6023      	str	r3, [r4, #0]
 8072682:	441c      	add	r4, r3
 8072684:	6025      	str	r5, [r4, #0]
 8072686:	e004      	b.n	8072692 <_malloc_r+0x72>
 8072688:	6863      	ldr	r3, [r4, #4]
 807268a:	42a2      	cmp	r2, r4
 807268c:	bf0c      	ite	eq
 807268e:	600b      	streq	r3, [r1, #0]
 8072690:	6053      	strne	r3, [r2, #4]
 8072692:	4630      	mov	r0, r6
 8072694:	f003 f944 	bl	8075920 <__malloc_unlock>
 8072698:	f104 000b 	add.w	r0, r4, #11
 807269c:	1d23      	adds	r3, r4, #4
 807269e:	f020 0007 	bic.w	r0, r0, #7
 80726a2:	1ac2      	subs	r2, r0, r3
 80726a4:	d0cc      	beq.n	8072640 <_malloc_r+0x20>
 80726a6:	1a1b      	subs	r3, r3, r0
 80726a8:	50a3      	str	r3, [r4, r2]
 80726aa:	e7c9      	b.n	8072640 <_malloc_r+0x20>
 80726ac:	4622      	mov	r2, r4
 80726ae:	6864      	ldr	r4, [r4, #4]
 80726b0:	e7cc      	b.n	807264c <_malloc_r+0x2c>
 80726b2:	1cc4      	adds	r4, r0, #3
 80726b4:	f024 0403 	bic.w	r4, r4, #3
 80726b8:	42a0      	cmp	r0, r4
 80726ba:	d0e3      	beq.n	8072684 <_malloc_r+0x64>
 80726bc:	1a21      	subs	r1, r4, r0
 80726be:	4630      	mov	r0, r6
 80726c0:	f000 feec 	bl	807349c <_sbrk_r>
 80726c4:	3001      	adds	r0, #1
 80726c6:	d1dd      	bne.n	8072684 <_malloc_r+0x64>
 80726c8:	e7cf      	b.n	807266a <_malloc_r+0x4a>
 80726ca:	bf00      	nop
 80726cc:	20004e28 	.word	0x20004e28
 80726d0:	20004e2c 	.word	0x20004e2c

080726d4 <__cvt>:
 80726d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80726d8:	ec55 4b10 	vmov	r4, r5, d0
 80726dc:	2d00      	cmp	r5, #0
 80726de:	460e      	mov	r6, r1
 80726e0:	4619      	mov	r1, r3
 80726e2:	462b      	mov	r3, r5
 80726e4:	bfbb      	ittet	lt
 80726e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80726ea:	461d      	movlt	r5, r3
 80726ec:	2300      	movge	r3, #0
 80726ee:	232d      	movlt	r3, #45	; 0x2d
 80726f0:	700b      	strb	r3, [r1, #0]
 80726f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80726f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80726f8:	4691      	mov	r9, r2
 80726fa:	f023 0820 	bic.w	r8, r3, #32
 80726fe:	bfbc      	itt	lt
 8072700:	4622      	movlt	r2, r4
 8072702:	4614      	movlt	r4, r2
 8072704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8072708:	d005      	beq.n	8072716 <__cvt+0x42>
 807270a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 807270e:	d100      	bne.n	8072712 <__cvt+0x3e>
 8072710:	3601      	adds	r6, #1
 8072712:	2102      	movs	r1, #2
 8072714:	e000      	b.n	8072718 <__cvt+0x44>
 8072716:	2103      	movs	r1, #3
 8072718:	ab03      	add	r3, sp, #12
 807271a:	9301      	str	r3, [sp, #4]
 807271c:	ab02      	add	r3, sp, #8
 807271e:	9300      	str	r3, [sp, #0]
 8072720:	ec45 4b10 	vmov	d0, r4, r5
 8072724:	4653      	mov	r3, sl
 8072726:	4632      	mov	r2, r6
 8072728:	f001 fea6 	bl	8074478 <_dtoa_r>
 807272c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8072730:	4607      	mov	r7, r0
 8072732:	d102      	bne.n	807273a <__cvt+0x66>
 8072734:	f019 0f01 	tst.w	r9, #1
 8072738:	d022      	beq.n	8072780 <__cvt+0xac>
 807273a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 807273e:	eb07 0906 	add.w	r9, r7, r6
 8072742:	d110      	bne.n	8072766 <__cvt+0x92>
 8072744:	783b      	ldrb	r3, [r7, #0]
 8072746:	2b30      	cmp	r3, #48	; 0x30
 8072748:	d10a      	bne.n	8072760 <__cvt+0x8c>
 807274a:	2200      	movs	r2, #0
 807274c:	2300      	movs	r3, #0
 807274e:	4620      	mov	r0, r4
 8072750:	4629      	mov	r1, r5
 8072752:	f7ee f9d1 	bl	8060af8 <__aeabi_dcmpeq>
 8072756:	b918      	cbnz	r0, 8072760 <__cvt+0x8c>
 8072758:	f1c6 0601 	rsb	r6, r6, #1
 807275c:	f8ca 6000 	str.w	r6, [sl]
 8072760:	f8da 3000 	ldr.w	r3, [sl]
 8072764:	4499      	add	r9, r3
 8072766:	2200      	movs	r2, #0
 8072768:	2300      	movs	r3, #0
 807276a:	4620      	mov	r0, r4
 807276c:	4629      	mov	r1, r5
 807276e:	f7ee f9c3 	bl	8060af8 <__aeabi_dcmpeq>
 8072772:	b108      	cbz	r0, 8072778 <__cvt+0xa4>
 8072774:	f8cd 900c 	str.w	r9, [sp, #12]
 8072778:	2230      	movs	r2, #48	; 0x30
 807277a:	9b03      	ldr	r3, [sp, #12]
 807277c:	454b      	cmp	r3, r9
 807277e:	d307      	bcc.n	8072790 <__cvt+0xbc>
 8072780:	9b03      	ldr	r3, [sp, #12]
 8072782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8072784:	1bdb      	subs	r3, r3, r7
 8072786:	4638      	mov	r0, r7
 8072788:	6013      	str	r3, [r2, #0]
 807278a:	b004      	add	sp, #16
 807278c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8072790:	1c59      	adds	r1, r3, #1
 8072792:	9103      	str	r1, [sp, #12]
 8072794:	701a      	strb	r2, [r3, #0]
 8072796:	e7f0      	b.n	807277a <__cvt+0xa6>

08072798 <__exponent>:
 8072798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 807279a:	4603      	mov	r3, r0
 807279c:	2900      	cmp	r1, #0
 807279e:	bfb8      	it	lt
 80727a0:	4249      	neglt	r1, r1
 80727a2:	f803 2b02 	strb.w	r2, [r3], #2
 80727a6:	bfb4      	ite	lt
 80727a8:	222d      	movlt	r2, #45	; 0x2d
 80727aa:	222b      	movge	r2, #43	; 0x2b
 80727ac:	2909      	cmp	r1, #9
 80727ae:	7042      	strb	r2, [r0, #1]
 80727b0:	dd2a      	ble.n	8072808 <__exponent+0x70>
 80727b2:	f10d 0407 	add.w	r4, sp, #7
 80727b6:	46a4      	mov	ip, r4
 80727b8:	270a      	movs	r7, #10
 80727ba:	46a6      	mov	lr, r4
 80727bc:	460a      	mov	r2, r1
 80727be:	fb91 f6f7 	sdiv	r6, r1, r7
 80727c2:	fb07 1516 	mls	r5, r7, r6, r1
 80727c6:	3530      	adds	r5, #48	; 0x30
 80727c8:	2a63      	cmp	r2, #99	; 0x63
 80727ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80727ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80727d2:	4631      	mov	r1, r6
 80727d4:	dcf1      	bgt.n	80727ba <__exponent+0x22>
 80727d6:	3130      	adds	r1, #48	; 0x30
 80727d8:	f1ae 0502 	sub.w	r5, lr, #2
 80727dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80727e0:	1c44      	adds	r4, r0, #1
 80727e2:	4629      	mov	r1, r5
 80727e4:	4561      	cmp	r1, ip
 80727e6:	d30a      	bcc.n	80727fe <__exponent+0x66>
 80727e8:	f10d 0209 	add.w	r2, sp, #9
 80727ec:	eba2 020e 	sub.w	r2, r2, lr
 80727f0:	4565      	cmp	r5, ip
 80727f2:	bf88      	it	hi
 80727f4:	2200      	movhi	r2, #0
 80727f6:	4413      	add	r3, r2
 80727f8:	1a18      	subs	r0, r3, r0
 80727fa:	b003      	add	sp, #12
 80727fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80727fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8072802:	f804 2f01 	strb.w	r2, [r4, #1]!
 8072806:	e7ed      	b.n	80727e4 <__exponent+0x4c>
 8072808:	2330      	movs	r3, #48	; 0x30
 807280a:	3130      	adds	r1, #48	; 0x30
 807280c:	7083      	strb	r3, [r0, #2]
 807280e:	70c1      	strb	r1, [r0, #3]
 8072810:	1d03      	adds	r3, r0, #4
 8072812:	e7f1      	b.n	80727f8 <__exponent+0x60>

08072814 <_printf_float>:
 8072814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8072818:	ed2d 8b02 	vpush	{d8}
 807281c:	b08d      	sub	sp, #52	; 0x34
 807281e:	460c      	mov	r4, r1
 8072820:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8072824:	4616      	mov	r6, r2
 8072826:	461f      	mov	r7, r3
 8072828:	4605      	mov	r5, r0
 807282a:	f003 f843 	bl	80758b4 <_localeconv_r>
 807282e:	f8d0 a000 	ldr.w	sl, [r0]
 8072832:	4650      	mov	r0, sl
 8072834:	f7ed fcde 	bl	80601f4 <strlen>
 8072838:	2300      	movs	r3, #0
 807283a:	930a      	str	r3, [sp, #40]	; 0x28
 807283c:	6823      	ldr	r3, [r4, #0]
 807283e:	9305      	str	r3, [sp, #20]
 8072840:	f8d8 3000 	ldr.w	r3, [r8]
 8072844:	f894 b018 	ldrb.w	fp, [r4, #24]
 8072848:	3307      	adds	r3, #7
 807284a:	f023 0307 	bic.w	r3, r3, #7
 807284e:	f103 0208 	add.w	r2, r3, #8
 8072852:	f8c8 2000 	str.w	r2, [r8]
 8072856:	e9d3 2300 	ldrd	r2, r3, [r3]
 807285a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 807285e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8072862:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8072866:	9307      	str	r3, [sp, #28]
 8072868:	f8cd 8018 	str.w	r8, [sp, #24]
 807286c:	ee08 0a10 	vmov	s16, r0
 8072870:	4b9f      	ldr	r3, [pc, #636]	; (8072af0 <_printf_float+0x2dc>)
 8072872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8072876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 807287a:	f7ee f96f 	bl	8060b5c <__aeabi_dcmpun>
 807287e:	bb88      	cbnz	r0, 80728e4 <_printf_float+0xd0>
 8072880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8072884:	4b9a      	ldr	r3, [pc, #616]	; (8072af0 <_printf_float+0x2dc>)
 8072886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 807288a:	f7ee f949 	bl	8060b20 <__aeabi_dcmple>
 807288e:	bb48      	cbnz	r0, 80728e4 <_printf_float+0xd0>
 8072890:	2200      	movs	r2, #0
 8072892:	2300      	movs	r3, #0
 8072894:	4640      	mov	r0, r8
 8072896:	4649      	mov	r1, r9
 8072898:	f7ee f938 	bl	8060b0c <__aeabi_dcmplt>
 807289c:	b110      	cbz	r0, 80728a4 <_printf_float+0x90>
 807289e:	232d      	movs	r3, #45	; 0x2d
 80728a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80728a4:	4b93      	ldr	r3, [pc, #588]	; (8072af4 <_printf_float+0x2e0>)
 80728a6:	4894      	ldr	r0, [pc, #592]	; (8072af8 <_printf_float+0x2e4>)
 80728a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80728ac:	bf94      	ite	ls
 80728ae:	4698      	movls	r8, r3
 80728b0:	4680      	movhi	r8, r0
 80728b2:	2303      	movs	r3, #3
 80728b4:	6123      	str	r3, [r4, #16]
 80728b6:	9b05      	ldr	r3, [sp, #20]
 80728b8:	f023 0204 	bic.w	r2, r3, #4
 80728bc:	6022      	str	r2, [r4, #0]
 80728be:	f04f 0900 	mov.w	r9, #0
 80728c2:	9700      	str	r7, [sp, #0]
 80728c4:	4633      	mov	r3, r6
 80728c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80728c8:	4621      	mov	r1, r4
 80728ca:	4628      	mov	r0, r5
 80728cc:	f000 f9d8 	bl	8072c80 <_printf_common>
 80728d0:	3001      	adds	r0, #1
 80728d2:	f040 8090 	bne.w	80729f6 <_printf_float+0x1e2>
 80728d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80728da:	b00d      	add	sp, #52	; 0x34
 80728dc:	ecbd 8b02 	vpop	{d8}
 80728e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80728e4:	4642      	mov	r2, r8
 80728e6:	464b      	mov	r3, r9
 80728e8:	4640      	mov	r0, r8
 80728ea:	4649      	mov	r1, r9
 80728ec:	f7ee f936 	bl	8060b5c <__aeabi_dcmpun>
 80728f0:	b140      	cbz	r0, 8072904 <_printf_float+0xf0>
 80728f2:	464b      	mov	r3, r9
 80728f4:	2b00      	cmp	r3, #0
 80728f6:	bfbc      	itt	lt
 80728f8:	232d      	movlt	r3, #45	; 0x2d
 80728fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80728fe:	487f      	ldr	r0, [pc, #508]	; (8072afc <_printf_float+0x2e8>)
 8072900:	4b7f      	ldr	r3, [pc, #508]	; (8072b00 <_printf_float+0x2ec>)
 8072902:	e7d1      	b.n	80728a8 <_printf_float+0x94>
 8072904:	6863      	ldr	r3, [r4, #4]
 8072906:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 807290a:	9206      	str	r2, [sp, #24]
 807290c:	1c5a      	adds	r2, r3, #1
 807290e:	d13f      	bne.n	8072990 <_printf_float+0x17c>
 8072910:	2306      	movs	r3, #6
 8072912:	6063      	str	r3, [r4, #4]
 8072914:	9b05      	ldr	r3, [sp, #20]
 8072916:	6861      	ldr	r1, [r4, #4]
 8072918:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 807291c:	2300      	movs	r3, #0
 807291e:	9303      	str	r3, [sp, #12]
 8072920:	ab0a      	add	r3, sp, #40	; 0x28
 8072922:	e9cd b301 	strd	fp, r3, [sp, #4]
 8072926:	ab09      	add	r3, sp, #36	; 0x24
 8072928:	ec49 8b10 	vmov	d0, r8, r9
 807292c:	9300      	str	r3, [sp, #0]
 807292e:	6022      	str	r2, [r4, #0]
 8072930:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8072934:	4628      	mov	r0, r5
 8072936:	f7ff fecd 	bl	80726d4 <__cvt>
 807293a:	9b06      	ldr	r3, [sp, #24]
 807293c:	9909      	ldr	r1, [sp, #36]	; 0x24
 807293e:	2b47      	cmp	r3, #71	; 0x47
 8072940:	4680      	mov	r8, r0
 8072942:	d108      	bne.n	8072956 <_printf_float+0x142>
 8072944:	1cc8      	adds	r0, r1, #3
 8072946:	db02      	blt.n	807294e <_printf_float+0x13a>
 8072948:	6863      	ldr	r3, [r4, #4]
 807294a:	4299      	cmp	r1, r3
 807294c:	dd41      	ble.n	80729d2 <_printf_float+0x1be>
 807294e:	f1ab 0b02 	sub.w	fp, fp, #2
 8072952:	fa5f fb8b 	uxtb.w	fp, fp
 8072956:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 807295a:	d820      	bhi.n	807299e <_printf_float+0x18a>
 807295c:	3901      	subs	r1, #1
 807295e:	465a      	mov	r2, fp
 8072960:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8072964:	9109      	str	r1, [sp, #36]	; 0x24
 8072966:	f7ff ff17 	bl	8072798 <__exponent>
 807296a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 807296c:	1813      	adds	r3, r2, r0
 807296e:	2a01      	cmp	r2, #1
 8072970:	4681      	mov	r9, r0
 8072972:	6123      	str	r3, [r4, #16]
 8072974:	dc02      	bgt.n	807297c <_printf_float+0x168>
 8072976:	6822      	ldr	r2, [r4, #0]
 8072978:	07d2      	lsls	r2, r2, #31
 807297a:	d501      	bpl.n	8072980 <_printf_float+0x16c>
 807297c:	3301      	adds	r3, #1
 807297e:	6123      	str	r3, [r4, #16]
 8072980:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8072984:	2b00      	cmp	r3, #0
 8072986:	d09c      	beq.n	80728c2 <_printf_float+0xae>
 8072988:	232d      	movs	r3, #45	; 0x2d
 807298a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 807298e:	e798      	b.n	80728c2 <_printf_float+0xae>
 8072990:	9a06      	ldr	r2, [sp, #24]
 8072992:	2a47      	cmp	r2, #71	; 0x47
 8072994:	d1be      	bne.n	8072914 <_printf_float+0x100>
 8072996:	2b00      	cmp	r3, #0
 8072998:	d1bc      	bne.n	8072914 <_printf_float+0x100>
 807299a:	2301      	movs	r3, #1
 807299c:	e7b9      	b.n	8072912 <_printf_float+0xfe>
 807299e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80729a2:	d118      	bne.n	80729d6 <_printf_float+0x1c2>
 80729a4:	2900      	cmp	r1, #0
 80729a6:	6863      	ldr	r3, [r4, #4]
 80729a8:	dd0b      	ble.n	80729c2 <_printf_float+0x1ae>
 80729aa:	6121      	str	r1, [r4, #16]
 80729ac:	b913      	cbnz	r3, 80729b4 <_printf_float+0x1a0>
 80729ae:	6822      	ldr	r2, [r4, #0]
 80729b0:	07d0      	lsls	r0, r2, #31
 80729b2:	d502      	bpl.n	80729ba <_printf_float+0x1a6>
 80729b4:	3301      	adds	r3, #1
 80729b6:	440b      	add	r3, r1
 80729b8:	6123      	str	r3, [r4, #16]
 80729ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80729bc:	f04f 0900 	mov.w	r9, #0
 80729c0:	e7de      	b.n	8072980 <_printf_float+0x16c>
 80729c2:	b913      	cbnz	r3, 80729ca <_printf_float+0x1b6>
 80729c4:	6822      	ldr	r2, [r4, #0]
 80729c6:	07d2      	lsls	r2, r2, #31
 80729c8:	d501      	bpl.n	80729ce <_printf_float+0x1ba>
 80729ca:	3302      	adds	r3, #2
 80729cc:	e7f4      	b.n	80729b8 <_printf_float+0x1a4>
 80729ce:	2301      	movs	r3, #1
 80729d0:	e7f2      	b.n	80729b8 <_printf_float+0x1a4>
 80729d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80729d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80729d8:	4299      	cmp	r1, r3
 80729da:	db05      	blt.n	80729e8 <_printf_float+0x1d4>
 80729dc:	6823      	ldr	r3, [r4, #0]
 80729de:	6121      	str	r1, [r4, #16]
 80729e0:	07d8      	lsls	r0, r3, #31
 80729e2:	d5ea      	bpl.n	80729ba <_printf_float+0x1a6>
 80729e4:	1c4b      	adds	r3, r1, #1
 80729e6:	e7e7      	b.n	80729b8 <_printf_float+0x1a4>
 80729e8:	2900      	cmp	r1, #0
 80729ea:	bfd4      	ite	le
 80729ec:	f1c1 0202 	rsble	r2, r1, #2
 80729f0:	2201      	movgt	r2, #1
 80729f2:	4413      	add	r3, r2
 80729f4:	e7e0      	b.n	80729b8 <_printf_float+0x1a4>
 80729f6:	6823      	ldr	r3, [r4, #0]
 80729f8:	055a      	lsls	r2, r3, #21
 80729fa:	d407      	bmi.n	8072a0c <_printf_float+0x1f8>
 80729fc:	6923      	ldr	r3, [r4, #16]
 80729fe:	4642      	mov	r2, r8
 8072a00:	4631      	mov	r1, r6
 8072a02:	4628      	mov	r0, r5
 8072a04:	47b8      	blx	r7
 8072a06:	3001      	adds	r0, #1
 8072a08:	d12c      	bne.n	8072a64 <_printf_float+0x250>
 8072a0a:	e764      	b.n	80728d6 <_printf_float+0xc2>
 8072a0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8072a10:	f240 80e0 	bls.w	8072bd4 <_printf_float+0x3c0>
 8072a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8072a18:	2200      	movs	r2, #0
 8072a1a:	2300      	movs	r3, #0
 8072a1c:	f7ee f86c 	bl	8060af8 <__aeabi_dcmpeq>
 8072a20:	2800      	cmp	r0, #0
 8072a22:	d034      	beq.n	8072a8e <_printf_float+0x27a>
 8072a24:	4a37      	ldr	r2, [pc, #220]	; (8072b04 <_printf_float+0x2f0>)
 8072a26:	2301      	movs	r3, #1
 8072a28:	4631      	mov	r1, r6
 8072a2a:	4628      	mov	r0, r5
 8072a2c:	47b8      	blx	r7
 8072a2e:	3001      	adds	r0, #1
 8072a30:	f43f af51 	beq.w	80728d6 <_printf_float+0xc2>
 8072a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072a38:	429a      	cmp	r2, r3
 8072a3a:	db02      	blt.n	8072a42 <_printf_float+0x22e>
 8072a3c:	6823      	ldr	r3, [r4, #0]
 8072a3e:	07d8      	lsls	r0, r3, #31
 8072a40:	d510      	bpl.n	8072a64 <_printf_float+0x250>
 8072a42:	ee18 3a10 	vmov	r3, s16
 8072a46:	4652      	mov	r2, sl
 8072a48:	4631      	mov	r1, r6
 8072a4a:	4628      	mov	r0, r5
 8072a4c:	47b8      	blx	r7
 8072a4e:	3001      	adds	r0, #1
 8072a50:	f43f af41 	beq.w	80728d6 <_printf_float+0xc2>
 8072a54:	f04f 0800 	mov.w	r8, #0
 8072a58:	f104 091a 	add.w	r9, r4, #26
 8072a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8072a5e:	3b01      	subs	r3, #1
 8072a60:	4543      	cmp	r3, r8
 8072a62:	dc09      	bgt.n	8072a78 <_printf_float+0x264>
 8072a64:	6823      	ldr	r3, [r4, #0]
 8072a66:	079b      	lsls	r3, r3, #30
 8072a68:	f100 8105 	bmi.w	8072c76 <_printf_float+0x462>
 8072a6c:	68e0      	ldr	r0, [r4, #12]
 8072a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8072a70:	4298      	cmp	r0, r3
 8072a72:	bfb8      	it	lt
 8072a74:	4618      	movlt	r0, r3
 8072a76:	e730      	b.n	80728da <_printf_float+0xc6>
 8072a78:	2301      	movs	r3, #1
 8072a7a:	464a      	mov	r2, r9
 8072a7c:	4631      	mov	r1, r6
 8072a7e:	4628      	mov	r0, r5
 8072a80:	47b8      	blx	r7
 8072a82:	3001      	adds	r0, #1
 8072a84:	f43f af27 	beq.w	80728d6 <_printf_float+0xc2>
 8072a88:	f108 0801 	add.w	r8, r8, #1
 8072a8c:	e7e6      	b.n	8072a5c <_printf_float+0x248>
 8072a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8072a90:	2b00      	cmp	r3, #0
 8072a92:	dc39      	bgt.n	8072b08 <_printf_float+0x2f4>
 8072a94:	4a1b      	ldr	r2, [pc, #108]	; (8072b04 <_printf_float+0x2f0>)
 8072a96:	2301      	movs	r3, #1
 8072a98:	4631      	mov	r1, r6
 8072a9a:	4628      	mov	r0, r5
 8072a9c:	47b8      	blx	r7
 8072a9e:	3001      	adds	r0, #1
 8072aa0:	f43f af19 	beq.w	80728d6 <_printf_float+0xc2>
 8072aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072aa8:	4313      	orrs	r3, r2
 8072aaa:	d102      	bne.n	8072ab2 <_printf_float+0x29e>
 8072aac:	6823      	ldr	r3, [r4, #0]
 8072aae:	07d9      	lsls	r1, r3, #31
 8072ab0:	d5d8      	bpl.n	8072a64 <_printf_float+0x250>
 8072ab2:	ee18 3a10 	vmov	r3, s16
 8072ab6:	4652      	mov	r2, sl
 8072ab8:	4631      	mov	r1, r6
 8072aba:	4628      	mov	r0, r5
 8072abc:	47b8      	blx	r7
 8072abe:	3001      	adds	r0, #1
 8072ac0:	f43f af09 	beq.w	80728d6 <_printf_float+0xc2>
 8072ac4:	f04f 0900 	mov.w	r9, #0
 8072ac8:	f104 0a1a 	add.w	sl, r4, #26
 8072acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8072ace:	425b      	negs	r3, r3
 8072ad0:	454b      	cmp	r3, r9
 8072ad2:	dc01      	bgt.n	8072ad8 <_printf_float+0x2c4>
 8072ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8072ad6:	e792      	b.n	80729fe <_printf_float+0x1ea>
 8072ad8:	2301      	movs	r3, #1
 8072ada:	4652      	mov	r2, sl
 8072adc:	4631      	mov	r1, r6
 8072ade:	4628      	mov	r0, r5
 8072ae0:	47b8      	blx	r7
 8072ae2:	3001      	adds	r0, #1
 8072ae4:	f43f aef7 	beq.w	80728d6 <_printf_float+0xc2>
 8072ae8:	f109 0901 	add.w	r9, r9, #1
 8072aec:	e7ee      	b.n	8072acc <_printf_float+0x2b8>
 8072aee:	bf00      	nop
 8072af0:	7fefffff 	.word	0x7fefffff
 8072af4:	080775c0 	.word	0x080775c0
 8072af8:	080775c4 	.word	0x080775c4
 8072afc:	080775cc 	.word	0x080775cc
 8072b00:	080775c8 	.word	0x080775c8
 8072b04:	080775d0 	.word	0x080775d0
 8072b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8072b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8072b0c:	429a      	cmp	r2, r3
 8072b0e:	bfa8      	it	ge
 8072b10:	461a      	movge	r2, r3
 8072b12:	2a00      	cmp	r2, #0
 8072b14:	4691      	mov	r9, r2
 8072b16:	dc37      	bgt.n	8072b88 <_printf_float+0x374>
 8072b18:	f04f 0b00 	mov.w	fp, #0
 8072b1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8072b20:	f104 021a 	add.w	r2, r4, #26
 8072b24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8072b26:	9305      	str	r3, [sp, #20]
 8072b28:	eba3 0309 	sub.w	r3, r3, r9
 8072b2c:	455b      	cmp	r3, fp
 8072b2e:	dc33      	bgt.n	8072b98 <_printf_float+0x384>
 8072b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072b34:	429a      	cmp	r2, r3
 8072b36:	db3b      	blt.n	8072bb0 <_printf_float+0x39c>
 8072b38:	6823      	ldr	r3, [r4, #0]
 8072b3a:	07da      	lsls	r2, r3, #31
 8072b3c:	d438      	bmi.n	8072bb0 <_printf_float+0x39c>
 8072b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8072b40:	9b05      	ldr	r3, [sp, #20]
 8072b42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8072b44:	1ad3      	subs	r3, r2, r3
 8072b46:	eba2 0901 	sub.w	r9, r2, r1
 8072b4a:	4599      	cmp	r9, r3
 8072b4c:	bfa8      	it	ge
 8072b4e:	4699      	movge	r9, r3
 8072b50:	f1b9 0f00 	cmp.w	r9, #0
 8072b54:	dc35      	bgt.n	8072bc2 <_printf_float+0x3ae>
 8072b56:	f04f 0800 	mov.w	r8, #0
 8072b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8072b5e:	f104 0a1a 	add.w	sl, r4, #26
 8072b62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8072b66:	1a9b      	subs	r3, r3, r2
 8072b68:	eba3 0309 	sub.w	r3, r3, r9
 8072b6c:	4543      	cmp	r3, r8
 8072b6e:	f77f af79 	ble.w	8072a64 <_printf_float+0x250>
 8072b72:	2301      	movs	r3, #1
 8072b74:	4652      	mov	r2, sl
 8072b76:	4631      	mov	r1, r6
 8072b78:	4628      	mov	r0, r5
 8072b7a:	47b8      	blx	r7
 8072b7c:	3001      	adds	r0, #1
 8072b7e:	f43f aeaa 	beq.w	80728d6 <_printf_float+0xc2>
 8072b82:	f108 0801 	add.w	r8, r8, #1
 8072b86:	e7ec      	b.n	8072b62 <_printf_float+0x34e>
 8072b88:	4613      	mov	r3, r2
 8072b8a:	4631      	mov	r1, r6
 8072b8c:	4642      	mov	r2, r8
 8072b8e:	4628      	mov	r0, r5
 8072b90:	47b8      	blx	r7
 8072b92:	3001      	adds	r0, #1
 8072b94:	d1c0      	bne.n	8072b18 <_printf_float+0x304>
 8072b96:	e69e      	b.n	80728d6 <_printf_float+0xc2>
 8072b98:	2301      	movs	r3, #1
 8072b9a:	4631      	mov	r1, r6
 8072b9c:	4628      	mov	r0, r5
 8072b9e:	9205      	str	r2, [sp, #20]
 8072ba0:	47b8      	blx	r7
 8072ba2:	3001      	adds	r0, #1
 8072ba4:	f43f ae97 	beq.w	80728d6 <_printf_float+0xc2>
 8072ba8:	9a05      	ldr	r2, [sp, #20]
 8072baa:	f10b 0b01 	add.w	fp, fp, #1
 8072bae:	e7b9      	b.n	8072b24 <_printf_float+0x310>
 8072bb0:	ee18 3a10 	vmov	r3, s16
 8072bb4:	4652      	mov	r2, sl
 8072bb6:	4631      	mov	r1, r6
 8072bb8:	4628      	mov	r0, r5
 8072bba:	47b8      	blx	r7
 8072bbc:	3001      	adds	r0, #1
 8072bbe:	d1be      	bne.n	8072b3e <_printf_float+0x32a>
 8072bc0:	e689      	b.n	80728d6 <_printf_float+0xc2>
 8072bc2:	9a05      	ldr	r2, [sp, #20]
 8072bc4:	464b      	mov	r3, r9
 8072bc6:	4442      	add	r2, r8
 8072bc8:	4631      	mov	r1, r6
 8072bca:	4628      	mov	r0, r5
 8072bcc:	47b8      	blx	r7
 8072bce:	3001      	adds	r0, #1
 8072bd0:	d1c1      	bne.n	8072b56 <_printf_float+0x342>
 8072bd2:	e680      	b.n	80728d6 <_printf_float+0xc2>
 8072bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8072bd6:	2a01      	cmp	r2, #1
 8072bd8:	dc01      	bgt.n	8072bde <_printf_float+0x3ca>
 8072bda:	07db      	lsls	r3, r3, #31
 8072bdc:	d538      	bpl.n	8072c50 <_printf_float+0x43c>
 8072bde:	2301      	movs	r3, #1
 8072be0:	4642      	mov	r2, r8
 8072be2:	4631      	mov	r1, r6
 8072be4:	4628      	mov	r0, r5
 8072be6:	47b8      	blx	r7
 8072be8:	3001      	adds	r0, #1
 8072bea:	f43f ae74 	beq.w	80728d6 <_printf_float+0xc2>
 8072bee:	ee18 3a10 	vmov	r3, s16
 8072bf2:	4652      	mov	r2, sl
 8072bf4:	4631      	mov	r1, r6
 8072bf6:	4628      	mov	r0, r5
 8072bf8:	47b8      	blx	r7
 8072bfa:	3001      	adds	r0, #1
 8072bfc:	f43f ae6b 	beq.w	80728d6 <_printf_float+0xc2>
 8072c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8072c04:	2200      	movs	r2, #0
 8072c06:	2300      	movs	r3, #0
 8072c08:	f7ed ff76 	bl	8060af8 <__aeabi_dcmpeq>
 8072c0c:	b9d8      	cbnz	r0, 8072c46 <_printf_float+0x432>
 8072c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8072c10:	f108 0201 	add.w	r2, r8, #1
 8072c14:	3b01      	subs	r3, #1
 8072c16:	4631      	mov	r1, r6
 8072c18:	4628      	mov	r0, r5
 8072c1a:	47b8      	blx	r7
 8072c1c:	3001      	adds	r0, #1
 8072c1e:	d10e      	bne.n	8072c3e <_printf_float+0x42a>
 8072c20:	e659      	b.n	80728d6 <_printf_float+0xc2>
 8072c22:	2301      	movs	r3, #1
 8072c24:	4652      	mov	r2, sl
 8072c26:	4631      	mov	r1, r6
 8072c28:	4628      	mov	r0, r5
 8072c2a:	47b8      	blx	r7
 8072c2c:	3001      	adds	r0, #1
 8072c2e:	f43f ae52 	beq.w	80728d6 <_printf_float+0xc2>
 8072c32:	f108 0801 	add.w	r8, r8, #1
 8072c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8072c38:	3b01      	subs	r3, #1
 8072c3a:	4543      	cmp	r3, r8
 8072c3c:	dcf1      	bgt.n	8072c22 <_printf_float+0x40e>
 8072c3e:	464b      	mov	r3, r9
 8072c40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8072c44:	e6dc      	b.n	8072a00 <_printf_float+0x1ec>
 8072c46:	f04f 0800 	mov.w	r8, #0
 8072c4a:	f104 0a1a 	add.w	sl, r4, #26
 8072c4e:	e7f2      	b.n	8072c36 <_printf_float+0x422>
 8072c50:	2301      	movs	r3, #1
 8072c52:	4642      	mov	r2, r8
 8072c54:	e7df      	b.n	8072c16 <_printf_float+0x402>
 8072c56:	2301      	movs	r3, #1
 8072c58:	464a      	mov	r2, r9
 8072c5a:	4631      	mov	r1, r6
 8072c5c:	4628      	mov	r0, r5
 8072c5e:	47b8      	blx	r7
 8072c60:	3001      	adds	r0, #1
 8072c62:	f43f ae38 	beq.w	80728d6 <_printf_float+0xc2>
 8072c66:	f108 0801 	add.w	r8, r8, #1
 8072c6a:	68e3      	ldr	r3, [r4, #12]
 8072c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8072c6e:	1a5b      	subs	r3, r3, r1
 8072c70:	4543      	cmp	r3, r8
 8072c72:	dcf0      	bgt.n	8072c56 <_printf_float+0x442>
 8072c74:	e6fa      	b.n	8072a6c <_printf_float+0x258>
 8072c76:	f04f 0800 	mov.w	r8, #0
 8072c7a:	f104 0919 	add.w	r9, r4, #25
 8072c7e:	e7f4      	b.n	8072c6a <_printf_float+0x456>

08072c80 <_printf_common>:
 8072c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8072c84:	4616      	mov	r6, r2
 8072c86:	4699      	mov	r9, r3
 8072c88:	688a      	ldr	r2, [r1, #8]
 8072c8a:	690b      	ldr	r3, [r1, #16]
 8072c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8072c90:	4293      	cmp	r3, r2
 8072c92:	bfb8      	it	lt
 8072c94:	4613      	movlt	r3, r2
 8072c96:	6033      	str	r3, [r6, #0]
 8072c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8072c9c:	4607      	mov	r7, r0
 8072c9e:	460c      	mov	r4, r1
 8072ca0:	b10a      	cbz	r2, 8072ca6 <_printf_common+0x26>
 8072ca2:	3301      	adds	r3, #1
 8072ca4:	6033      	str	r3, [r6, #0]
 8072ca6:	6823      	ldr	r3, [r4, #0]
 8072ca8:	0699      	lsls	r1, r3, #26
 8072caa:	bf42      	ittt	mi
 8072cac:	6833      	ldrmi	r3, [r6, #0]
 8072cae:	3302      	addmi	r3, #2
 8072cb0:	6033      	strmi	r3, [r6, #0]
 8072cb2:	6825      	ldr	r5, [r4, #0]
 8072cb4:	f015 0506 	ands.w	r5, r5, #6
 8072cb8:	d106      	bne.n	8072cc8 <_printf_common+0x48>
 8072cba:	f104 0a19 	add.w	sl, r4, #25
 8072cbe:	68e3      	ldr	r3, [r4, #12]
 8072cc0:	6832      	ldr	r2, [r6, #0]
 8072cc2:	1a9b      	subs	r3, r3, r2
 8072cc4:	42ab      	cmp	r3, r5
 8072cc6:	dc26      	bgt.n	8072d16 <_printf_common+0x96>
 8072cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8072ccc:	1e13      	subs	r3, r2, #0
 8072cce:	6822      	ldr	r2, [r4, #0]
 8072cd0:	bf18      	it	ne
 8072cd2:	2301      	movne	r3, #1
 8072cd4:	0692      	lsls	r2, r2, #26
 8072cd6:	d42b      	bmi.n	8072d30 <_printf_common+0xb0>
 8072cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8072cdc:	4649      	mov	r1, r9
 8072cde:	4638      	mov	r0, r7
 8072ce0:	47c0      	blx	r8
 8072ce2:	3001      	adds	r0, #1
 8072ce4:	d01e      	beq.n	8072d24 <_printf_common+0xa4>
 8072ce6:	6823      	ldr	r3, [r4, #0]
 8072ce8:	68e5      	ldr	r5, [r4, #12]
 8072cea:	6832      	ldr	r2, [r6, #0]
 8072cec:	f003 0306 	and.w	r3, r3, #6
 8072cf0:	2b04      	cmp	r3, #4
 8072cf2:	bf08      	it	eq
 8072cf4:	1aad      	subeq	r5, r5, r2
 8072cf6:	68a3      	ldr	r3, [r4, #8]
 8072cf8:	6922      	ldr	r2, [r4, #16]
 8072cfa:	bf0c      	ite	eq
 8072cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8072d00:	2500      	movne	r5, #0
 8072d02:	4293      	cmp	r3, r2
 8072d04:	bfc4      	itt	gt
 8072d06:	1a9b      	subgt	r3, r3, r2
 8072d08:	18ed      	addgt	r5, r5, r3
 8072d0a:	2600      	movs	r6, #0
 8072d0c:	341a      	adds	r4, #26
 8072d0e:	42b5      	cmp	r5, r6
 8072d10:	d11a      	bne.n	8072d48 <_printf_common+0xc8>
 8072d12:	2000      	movs	r0, #0
 8072d14:	e008      	b.n	8072d28 <_printf_common+0xa8>
 8072d16:	2301      	movs	r3, #1
 8072d18:	4652      	mov	r2, sl
 8072d1a:	4649      	mov	r1, r9
 8072d1c:	4638      	mov	r0, r7
 8072d1e:	47c0      	blx	r8
 8072d20:	3001      	adds	r0, #1
 8072d22:	d103      	bne.n	8072d2c <_printf_common+0xac>
 8072d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8072d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8072d2c:	3501      	adds	r5, #1
 8072d2e:	e7c6      	b.n	8072cbe <_printf_common+0x3e>
 8072d30:	18e1      	adds	r1, r4, r3
 8072d32:	1c5a      	adds	r2, r3, #1
 8072d34:	2030      	movs	r0, #48	; 0x30
 8072d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8072d3a:	4422      	add	r2, r4
 8072d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8072d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8072d44:	3302      	adds	r3, #2
 8072d46:	e7c7      	b.n	8072cd8 <_printf_common+0x58>
 8072d48:	2301      	movs	r3, #1
 8072d4a:	4622      	mov	r2, r4
 8072d4c:	4649      	mov	r1, r9
 8072d4e:	4638      	mov	r0, r7
 8072d50:	47c0      	blx	r8
 8072d52:	3001      	adds	r0, #1
 8072d54:	d0e6      	beq.n	8072d24 <_printf_common+0xa4>
 8072d56:	3601      	adds	r6, #1
 8072d58:	e7d9      	b.n	8072d0e <_printf_common+0x8e>
	...

08072d5c <_printf_i>:
 8072d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8072d60:	460c      	mov	r4, r1
 8072d62:	4691      	mov	r9, r2
 8072d64:	7e27      	ldrb	r7, [r4, #24]
 8072d66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8072d68:	2f78      	cmp	r7, #120	; 0x78
 8072d6a:	4680      	mov	r8, r0
 8072d6c:	469a      	mov	sl, r3
 8072d6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8072d72:	d807      	bhi.n	8072d84 <_printf_i+0x28>
 8072d74:	2f62      	cmp	r7, #98	; 0x62
 8072d76:	d80a      	bhi.n	8072d8e <_printf_i+0x32>
 8072d78:	2f00      	cmp	r7, #0
 8072d7a:	f000 80d8 	beq.w	8072f2e <_printf_i+0x1d2>
 8072d7e:	2f58      	cmp	r7, #88	; 0x58
 8072d80:	f000 80a3 	beq.w	8072eca <_printf_i+0x16e>
 8072d84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8072d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8072d8c:	e03a      	b.n	8072e04 <_printf_i+0xa8>
 8072d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8072d92:	2b15      	cmp	r3, #21
 8072d94:	d8f6      	bhi.n	8072d84 <_printf_i+0x28>
 8072d96:	a001      	add	r0, pc, #4	; (adr r0, 8072d9c <_printf_i+0x40>)
 8072d98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8072d9c:	08072df5 	.word	0x08072df5
 8072da0:	08072e09 	.word	0x08072e09
 8072da4:	08072d85 	.word	0x08072d85
 8072da8:	08072d85 	.word	0x08072d85
 8072dac:	08072d85 	.word	0x08072d85
 8072db0:	08072d85 	.word	0x08072d85
 8072db4:	08072e09 	.word	0x08072e09
 8072db8:	08072d85 	.word	0x08072d85
 8072dbc:	08072d85 	.word	0x08072d85
 8072dc0:	08072d85 	.word	0x08072d85
 8072dc4:	08072d85 	.word	0x08072d85
 8072dc8:	08072f15 	.word	0x08072f15
 8072dcc:	08072e39 	.word	0x08072e39
 8072dd0:	08072ef7 	.word	0x08072ef7
 8072dd4:	08072d85 	.word	0x08072d85
 8072dd8:	08072d85 	.word	0x08072d85
 8072ddc:	08072f37 	.word	0x08072f37
 8072de0:	08072d85 	.word	0x08072d85
 8072de4:	08072e39 	.word	0x08072e39
 8072de8:	08072d85 	.word	0x08072d85
 8072dec:	08072d85 	.word	0x08072d85
 8072df0:	08072eff 	.word	0x08072eff
 8072df4:	680b      	ldr	r3, [r1, #0]
 8072df6:	1d1a      	adds	r2, r3, #4
 8072df8:	681b      	ldr	r3, [r3, #0]
 8072dfa:	600a      	str	r2, [r1, #0]
 8072dfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8072e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8072e04:	2301      	movs	r3, #1
 8072e06:	e0a3      	b.n	8072f50 <_printf_i+0x1f4>
 8072e08:	6825      	ldr	r5, [r4, #0]
 8072e0a:	6808      	ldr	r0, [r1, #0]
 8072e0c:	062e      	lsls	r6, r5, #24
 8072e0e:	f100 0304 	add.w	r3, r0, #4
 8072e12:	d50a      	bpl.n	8072e2a <_printf_i+0xce>
 8072e14:	6805      	ldr	r5, [r0, #0]
 8072e16:	600b      	str	r3, [r1, #0]
 8072e18:	2d00      	cmp	r5, #0
 8072e1a:	da03      	bge.n	8072e24 <_printf_i+0xc8>
 8072e1c:	232d      	movs	r3, #45	; 0x2d
 8072e1e:	426d      	negs	r5, r5
 8072e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8072e24:	485e      	ldr	r0, [pc, #376]	; (8072fa0 <_printf_i+0x244>)
 8072e26:	230a      	movs	r3, #10
 8072e28:	e019      	b.n	8072e5e <_printf_i+0x102>
 8072e2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8072e2e:	6805      	ldr	r5, [r0, #0]
 8072e30:	600b      	str	r3, [r1, #0]
 8072e32:	bf18      	it	ne
 8072e34:	b22d      	sxthne	r5, r5
 8072e36:	e7ef      	b.n	8072e18 <_printf_i+0xbc>
 8072e38:	680b      	ldr	r3, [r1, #0]
 8072e3a:	6825      	ldr	r5, [r4, #0]
 8072e3c:	1d18      	adds	r0, r3, #4
 8072e3e:	6008      	str	r0, [r1, #0]
 8072e40:	0628      	lsls	r0, r5, #24
 8072e42:	d501      	bpl.n	8072e48 <_printf_i+0xec>
 8072e44:	681d      	ldr	r5, [r3, #0]
 8072e46:	e002      	b.n	8072e4e <_printf_i+0xf2>
 8072e48:	0669      	lsls	r1, r5, #25
 8072e4a:	d5fb      	bpl.n	8072e44 <_printf_i+0xe8>
 8072e4c:	881d      	ldrh	r5, [r3, #0]
 8072e4e:	4854      	ldr	r0, [pc, #336]	; (8072fa0 <_printf_i+0x244>)
 8072e50:	2f6f      	cmp	r7, #111	; 0x6f
 8072e52:	bf0c      	ite	eq
 8072e54:	2308      	moveq	r3, #8
 8072e56:	230a      	movne	r3, #10
 8072e58:	2100      	movs	r1, #0
 8072e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8072e5e:	6866      	ldr	r6, [r4, #4]
 8072e60:	60a6      	str	r6, [r4, #8]
 8072e62:	2e00      	cmp	r6, #0
 8072e64:	bfa2      	ittt	ge
 8072e66:	6821      	ldrge	r1, [r4, #0]
 8072e68:	f021 0104 	bicge.w	r1, r1, #4
 8072e6c:	6021      	strge	r1, [r4, #0]
 8072e6e:	b90d      	cbnz	r5, 8072e74 <_printf_i+0x118>
 8072e70:	2e00      	cmp	r6, #0
 8072e72:	d04d      	beq.n	8072f10 <_printf_i+0x1b4>
 8072e74:	4616      	mov	r6, r2
 8072e76:	fbb5 f1f3 	udiv	r1, r5, r3
 8072e7a:	fb03 5711 	mls	r7, r3, r1, r5
 8072e7e:	5dc7      	ldrb	r7, [r0, r7]
 8072e80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8072e84:	462f      	mov	r7, r5
 8072e86:	42bb      	cmp	r3, r7
 8072e88:	460d      	mov	r5, r1
 8072e8a:	d9f4      	bls.n	8072e76 <_printf_i+0x11a>
 8072e8c:	2b08      	cmp	r3, #8
 8072e8e:	d10b      	bne.n	8072ea8 <_printf_i+0x14c>
 8072e90:	6823      	ldr	r3, [r4, #0]
 8072e92:	07df      	lsls	r7, r3, #31
 8072e94:	d508      	bpl.n	8072ea8 <_printf_i+0x14c>
 8072e96:	6923      	ldr	r3, [r4, #16]
 8072e98:	6861      	ldr	r1, [r4, #4]
 8072e9a:	4299      	cmp	r1, r3
 8072e9c:	bfde      	ittt	le
 8072e9e:	2330      	movle	r3, #48	; 0x30
 8072ea0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8072ea4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8072ea8:	1b92      	subs	r2, r2, r6
 8072eaa:	6122      	str	r2, [r4, #16]
 8072eac:	f8cd a000 	str.w	sl, [sp]
 8072eb0:	464b      	mov	r3, r9
 8072eb2:	aa03      	add	r2, sp, #12
 8072eb4:	4621      	mov	r1, r4
 8072eb6:	4640      	mov	r0, r8
 8072eb8:	f7ff fee2 	bl	8072c80 <_printf_common>
 8072ebc:	3001      	adds	r0, #1
 8072ebe:	d14c      	bne.n	8072f5a <_printf_i+0x1fe>
 8072ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8072ec4:	b004      	add	sp, #16
 8072ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8072eca:	4835      	ldr	r0, [pc, #212]	; (8072fa0 <_printf_i+0x244>)
 8072ecc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8072ed0:	6823      	ldr	r3, [r4, #0]
 8072ed2:	680e      	ldr	r6, [r1, #0]
 8072ed4:	061f      	lsls	r7, r3, #24
 8072ed6:	f856 5b04 	ldr.w	r5, [r6], #4
 8072eda:	600e      	str	r6, [r1, #0]
 8072edc:	d514      	bpl.n	8072f08 <_printf_i+0x1ac>
 8072ede:	07d9      	lsls	r1, r3, #31
 8072ee0:	bf44      	itt	mi
 8072ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8072ee6:	6023      	strmi	r3, [r4, #0]
 8072ee8:	b91d      	cbnz	r5, 8072ef2 <_printf_i+0x196>
 8072eea:	6823      	ldr	r3, [r4, #0]
 8072eec:	f023 0320 	bic.w	r3, r3, #32
 8072ef0:	6023      	str	r3, [r4, #0]
 8072ef2:	2310      	movs	r3, #16
 8072ef4:	e7b0      	b.n	8072e58 <_printf_i+0xfc>
 8072ef6:	6823      	ldr	r3, [r4, #0]
 8072ef8:	f043 0320 	orr.w	r3, r3, #32
 8072efc:	6023      	str	r3, [r4, #0]
 8072efe:	2378      	movs	r3, #120	; 0x78
 8072f00:	4828      	ldr	r0, [pc, #160]	; (8072fa4 <_printf_i+0x248>)
 8072f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8072f06:	e7e3      	b.n	8072ed0 <_printf_i+0x174>
 8072f08:	065e      	lsls	r6, r3, #25
 8072f0a:	bf48      	it	mi
 8072f0c:	b2ad      	uxthmi	r5, r5
 8072f0e:	e7e6      	b.n	8072ede <_printf_i+0x182>
 8072f10:	4616      	mov	r6, r2
 8072f12:	e7bb      	b.n	8072e8c <_printf_i+0x130>
 8072f14:	680b      	ldr	r3, [r1, #0]
 8072f16:	6826      	ldr	r6, [r4, #0]
 8072f18:	6960      	ldr	r0, [r4, #20]
 8072f1a:	1d1d      	adds	r5, r3, #4
 8072f1c:	600d      	str	r5, [r1, #0]
 8072f1e:	0635      	lsls	r5, r6, #24
 8072f20:	681b      	ldr	r3, [r3, #0]
 8072f22:	d501      	bpl.n	8072f28 <_printf_i+0x1cc>
 8072f24:	6018      	str	r0, [r3, #0]
 8072f26:	e002      	b.n	8072f2e <_printf_i+0x1d2>
 8072f28:	0671      	lsls	r1, r6, #25
 8072f2a:	d5fb      	bpl.n	8072f24 <_printf_i+0x1c8>
 8072f2c:	8018      	strh	r0, [r3, #0]
 8072f2e:	2300      	movs	r3, #0
 8072f30:	6123      	str	r3, [r4, #16]
 8072f32:	4616      	mov	r6, r2
 8072f34:	e7ba      	b.n	8072eac <_printf_i+0x150>
 8072f36:	680b      	ldr	r3, [r1, #0]
 8072f38:	1d1a      	adds	r2, r3, #4
 8072f3a:	600a      	str	r2, [r1, #0]
 8072f3c:	681e      	ldr	r6, [r3, #0]
 8072f3e:	6862      	ldr	r2, [r4, #4]
 8072f40:	2100      	movs	r1, #0
 8072f42:	4630      	mov	r0, r6
 8072f44:	f7ed f964 	bl	8060210 <memchr>
 8072f48:	b108      	cbz	r0, 8072f4e <_printf_i+0x1f2>
 8072f4a:	1b80      	subs	r0, r0, r6
 8072f4c:	6060      	str	r0, [r4, #4]
 8072f4e:	6863      	ldr	r3, [r4, #4]
 8072f50:	6123      	str	r3, [r4, #16]
 8072f52:	2300      	movs	r3, #0
 8072f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8072f58:	e7a8      	b.n	8072eac <_printf_i+0x150>
 8072f5a:	6923      	ldr	r3, [r4, #16]
 8072f5c:	4632      	mov	r2, r6
 8072f5e:	4649      	mov	r1, r9
 8072f60:	4640      	mov	r0, r8
 8072f62:	47d0      	blx	sl
 8072f64:	3001      	adds	r0, #1
 8072f66:	d0ab      	beq.n	8072ec0 <_printf_i+0x164>
 8072f68:	6823      	ldr	r3, [r4, #0]
 8072f6a:	079b      	lsls	r3, r3, #30
 8072f6c:	d413      	bmi.n	8072f96 <_printf_i+0x23a>
 8072f6e:	68e0      	ldr	r0, [r4, #12]
 8072f70:	9b03      	ldr	r3, [sp, #12]
 8072f72:	4298      	cmp	r0, r3
 8072f74:	bfb8      	it	lt
 8072f76:	4618      	movlt	r0, r3
 8072f78:	e7a4      	b.n	8072ec4 <_printf_i+0x168>
 8072f7a:	2301      	movs	r3, #1
 8072f7c:	4632      	mov	r2, r6
 8072f7e:	4649      	mov	r1, r9
 8072f80:	4640      	mov	r0, r8
 8072f82:	47d0      	blx	sl
 8072f84:	3001      	adds	r0, #1
 8072f86:	d09b      	beq.n	8072ec0 <_printf_i+0x164>
 8072f88:	3501      	adds	r5, #1
 8072f8a:	68e3      	ldr	r3, [r4, #12]
 8072f8c:	9903      	ldr	r1, [sp, #12]
 8072f8e:	1a5b      	subs	r3, r3, r1
 8072f90:	42ab      	cmp	r3, r5
 8072f92:	dcf2      	bgt.n	8072f7a <_printf_i+0x21e>
 8072f94:	e7eb      	b.n	8072f6e <_printf_i+0x212>
 8072f96:	2500      	movs	r5, #0
 8072f98:	f104 0619 	add.w	r6, r4, #25
 8072f9c:	e7f5      	b.n	8072f8a <_printf_i+0x22e>
 8072f9e:	bf00      	nop
 8072fa0:	080775d2 	.word	0x080775d2
 8072fa4:	080775e3 	.word	0x080775e3

08072fa8 <_scanf_float>:
 8072fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8072fac:	b087      	sub	sp, #28
 8072fae:	4617      	mov	r7, r2
 8072fb0:	9303      	str	r3, [sp, #12]
 8072fb2:	688b      	ldr	r3, [r1, #8]
 8072fb4:	1e5a      	subs	r2, r3, #1
 8072fb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8072fba:	bf83      	ittte	hi
 8072fbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8072fc0:	195b      	addhi	r3, r3, r5
 8072fc2:	9302      	strhi	r3, [sp, #8]
 8072fc4:	2300      	movls	r3, #0
 8072fc6:	bf86      	itte	hi
 8072fc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8072fcc:	608b      	strhi	r3, [r1, #8]
 8072fce:	9302      	strls	r3, [sp, #8]
 8072fd0:	680b      	ldr	r3, [r1, #0]
 8072fd2:	468b      	mov	fp, r1
 8072fd4:	2500      	movs	r5, #0
 8072fd6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8072fda:	f84b 3b1c 	str.w	r3, [fp], #28
 8072fde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8072fe2:	4680      	mov	r8, r0
 8072fe4:	460c      	mov	r4, r1
 8072fe6:	465e      	mov	r6, fp
 8072fe8:	46aa      	mov	sl, r5
 8072fea:	46a9      	mov	r9, r5
 8072fec:	9501      	str	r5, [sp, #4]
 8072fee:	68a2      	ldr	r2, [r4, #8]
 8072ff0:	b152      	cbz	r2, 8073008 <_scanf_float+0x60>
 8072ff2:	683b      	ldr	r3, [r7, #0]
 8072ff4:	781b      	ldrb	r3, [r3, #0]
 8072ff6:	2b4e      	cmp	r3, #78	; 0x4e
 8072ff8:	d864      	bhi.n	80730c4 <_scanf_float+0x11c>
 8072ffa:	2b40      	cmp	r3, #64	; 0x40
 8072ffc:	d83c      	bhi.n	8073078 <_scanf_float+0xd0>
 8072ffe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8073002:	b2c8      	uxtb	r0, r1
 8073004:	280e      	cmp	r0, #14
 8073006:	d93a      	bls.n	807307e <_scanf_float+0xd6>
 8073008:	f1b9 0f00 	cmp.w	r9, #0
 807300c:	d003      	beq.n	8073016 <_scanf_float+0x6e>
 807300e:	6823      	ldr	r3, [r4, #0]
 8073010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8073014:	6023      	str	r3, [r4, #0]
 8073016:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 807301a:	f1ba 0f01 	cmp.w	sl, #1
 807301e:	f200 8113 	bhi.w	8073248 <_scanf_float+0x2a0>
 8073022:	455e      	cmp	r6, fp
 8073024:	f200 8105 	bhi.w	8073232 <_scanf_float+0x28a>
 8073028:	2501      	movs	r5, #1
 807302a:	4628      	mov	r0, r5
 807302c:	b007      	add	sp, #28
 807302e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8073032:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8073036:	2a0d      	cmp	r2, #13
 8073038:	d8e6      	bhi.n	8073008 <_scanf_float+0x60>
 807303a:	a101      	add	r1, pc, #4	; (adr r1, 8073040 <_scanf_float+0x98>)
 807303c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8073040:	0807317f 	.word	0x0807317f
 8073044:	08073009 	.word	0x08073009
 8073048:	08073009 	.word	0x08073009
 807304c:	08073009 	.word	0x08073009
 8073050:	080731df 	.word	0x080731df
 8073054:	080731b7 	.word	0x080731b7
 8073058:	08073009 	.word	0x08073009
 807305c:	08073009 	.word	0x08073009
 8073060:	0807318d 	.word	0x0807318d
 8073064:	08073009 	.word	0x08073009
 8073068:	08073009 	.word	0x08073009
 807306c:	08073009 	.word	0x08073009
 8073070:	08073009 	.word	0x08073009
 8073074:	08073145 	.word	0x08073145
 8073078:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 807307c:	e7db      	b.n	8073036 <_scanf_float+0x8e>
 807307e:	290e      	cmp	r1, #14
 8073080:	d8c2      	bhi.n	8073008 <_scanf_float+0x60>
 8073082:	a001      	add	r0, pc, #4	; (adr r0, 8073088 <_scanf_float+0xe0>)
 8073084:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8073088:	08073137 	.word	0x08073137
 807308c:	08073009 	.word	0x08073009
 8073090:	08073137 	.word	0x08073137
 8073094:	080731cb 	.word	0x080731cb
 8073098:	08073009 	.word	0x08073009
 807309c:	080730e5 	.word	0x080730e5
 80730a0:	08073121 	.word	0x08073121
 80730a4:	08073121 	.word	0x08073121
 80730a8:	08073121 	.word	0x08073121
 80730ac:	08073121 	.word	0x08073121
 80730b0:	08073121 	.word	0x08073121
 80730b4:	08073121 	.word	0x08073121
 80730b8:	08073121 	.word	0x08073121
 80730bc:	08073121 	.word	0x08073121
 80730c0:	08073121 	.word	0x08073121
 80730c4:	2b6e      	cmp	r3, #110	; 0x6e
 80730c6:	d809      	bhi.n	80730dc <_scanf_float+0x134>
 80730c8:	2b60      	cmp	r3, #96	; 0x60
 80730ca:	d8b2      	bhi.n	8073032 <_scanf_float+0x8a>
 80730cc:	2b54      	cmp	r3, #84	; 0x54
 80730ce:	d077      	beq.n	80731c0 <_scanf_float+0x218>
 80730d0:	2b59      	cmp	r3, #89	; 0x59
 80730d2:	d199      	bne.n	8073008 <_scanf_float+0x60>
 80730d4:	2d07      	cmp	r5, #7
 80730d6:	d197      	bne.n	8073008 <_scanf_float+0x60>
 80730d8:	2508      	movs	r5, #8
 80730da:	e029      	b.n	8073130 <_scanf_float+0x188>
 80730dc:	2b74      	cmp	r3, #116	; 0x74
 80730de:	d06f      	beq.n	80731c0 <_scanf_float+0x218>
 80730e0:	2b79      	cmp	r3, #121	; 0x79
 80730e2:	e7f6      	b.n	80730d2 <_scanf_float+0x12a>
 80730e4:	6821      	ldr	r1, [r4, #0]
 80730e6:	05c8      	lsls	r0, r1, #23
 80730e8:	d51a      	bpl.n	8073120 <_scanf_float+0x178>
 80730ea:	9b02      	ldr	r3, [sp, #8]
 80730ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80730f0:	6021      	str	r1, [r4, #0]
 80730f2:	f109 0901 	add.w	r9, r9, #1
 80730f6:	b11b      	cbz	r3, 8073100 <_scanf_float+0x158>
 80730f8:	3b01      	subs	r3, #1
 80730fa:	3201      	adds	r2, #1
 80730fc:	9302      	str	r3, [sp, #8]
 80730fe:	60a2      	str	r2, [r4, #8]
 8073100:	68a3      	ldr	r3, [r4, #8]
 8073102:	3b01      	subs	r3, #1
 8073104:	60a3      	str	r3, [r4, #8]
 8073106:	6923      	ldr	r3, [r4, #16]
 8073108:	3301      	adds	r3, #1
 807310a:	6123      	str	r3, [r4, #16]
 807310c:	687b      	ldr	r3, [r7, #4]
 807310e:	3b01      	subs	r3, #1
 8073110:	2b00      	cmp	r3, #0
 8073112:	607b      	str	r3, [r7, #4]
 8073114:	f340 8084 	ble.w	8073220 <_scanf_float+0x278>
 8073118:	683b      	ldr	r3, [r7, #0]
 807311a:	3301      	adds	r3, #1
 807311c:	603b      	str	r3, [r7, #0]
 807311e:	e766      	b.n	8072fee <_scanf_float+0x46>
 8073120:	eb1a 0f05 	cmn.w	sl, r5
 8073124:	f47f af70 	bne.w	8073008 <_scanf_float+0x60>
 8073128:	6822      	ldr	r2, [r4, #0]
 807312a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 807312e:	6022      	str	r2, [r4, #0]
 8073130:	f806 3b01 	strb.w	r3, [r6], #1
 8073134:	e7e4      	b.n	8073100 <_scanf_float+0x158>
 8073136:	6822      	ldr	r2, [r4, #0]
 8073138:	0610      	lsls	r0, r2, #24
 807313a:	f57f af65 	bpl.w	8073008 <_scanf_float+0x60>
 807313e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8073142:	e7f4      	b.n	807312e <_scanf_float+0x186>
 8073144:	f1ba 0f00 	cmp.w	sl, #0
 8073148:	d10e      	bne.n	8073168 <_scanf_float+0x1c0>
 807314a:	f1b9 0f00 	cmp.w	r9, #0
 807314e:	d10e      	bne.n	807316e <_scanf_float+0x1c6>
 8073150:	6822      	ldr	r2, [r4, #0]
 8073152:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8073156:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 807315a:	d108      	bne.n	807316e <_scanf_float+0x1c6>
 807315c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8073160:	6022      	str	r2, [r4, #0]
 8073162:	f04f 0a01 	mov.w	sl, #1
 8073166:	e7e3      	b.n	8073130 <_scanf_float+0x188>
 8073168:	f1ba 0f02 	cmp.w	sl, #2
 807316c:	d055      	beq.n	807321a <_scanf_float+0x272>
 807316e:	2d01      	cmp	r5, #1
 8073170:	d002      	beq.n	8073178 <_scanf_float+0x1d0>
 8073172:	2d04      	cmp	r5, #4
 8073174:	f47f af48 	bne.w	8073008 <_scanf_float+0x60>
 8073178:	3501      	adds	r5, #1
 807317a:	b2ed      	uxtb	r5, r5
 807317c:	e7d8      	b.n	8073130 <_scanf_float+0x188>
 807317e:	f1ba 0f01 	cmp.w	sl, #1
 8073182:	f47f af41 	bne.w	8073008 <_scanf_float+0x60>
 8073186:	f04f 0a02 	mov.w	sl, #2
 807318a:	e7d1      	b.n	8073130 <_scanf_float+0x188>
 807318c:	b97d      	cbnz	r5, 80731ae <_scanf_float+0x206>
 807318e:	f1b9 0f00 	cmp.w	r9, #0
 8073192:	f47f af3c 	bne.w	807300e <_scanf_float+0x66>
 8073196:	6822      	ldr	r2, [r4, #0]
 8073198:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 807319c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80731a0:	f47f af39 	bne.w	8073016 <_scanf_float+0x6e>
 80731a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80731a8:	6022      	str	r2, [r4, #0]
 80731aa:	2501      	movs	r5, #1
 80731ac:	e7c0      	b.n	8073130 <_scanf_float+0x188>
 80731ae:	2d03      	cmp	r5, #3
 80731b0:	d0e2      	beq.n	8073178 <_scanf_float+0x1d0>
 80731b2:	2d05      	cmp	r5, #5
 80731b4:	e7de      	b.n	8073174 <_scanf_float+0x1cc>
 80731b6:	2d02      	cmp	r5, #2
 80731b8:	f47f af26 	bne.w	8073008 <_scanf_float+0x60>
 80731bc:	2503      	movs	r5, #3
 80731be:	e7b7      	b.n	8073130 <_scanf_float+0x188>
 80731c0:	2d06      	cmp	r5, #6
 80731c2:	f47f af21 	bne.w	8073008 <_scanf_float+0x60>
 80731c6:	2507      	movs	r5, #7
 80731c8:	e7b2      	b.n	8073130 <_scanf_float+0x188>
 80731ca:	6822      	ldr	r2, [r4, #0]
 80731cc:	0591      	lsls	r1, r2, #22
 80731ce:	f57f af1b 	bpl.w	8073008 <_scanf_float+0x60>
 80731d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80731d6:	6022      	str	r2, [r4, #0]
 80731d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80731dc:	e7a8      	b.n	8073130 <_scanf_float+0x188>
 80731de:	6822      	ldr	r2, [r4, #0]
 80731e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80731e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80731e8:	d006      	beq.n	80731f8 <_scanf_float+0x250>
 80731ea:	0550      	lsls	r0, r2, #21
 80731ec:	f57f af0c 	bpl.w	8073008 <_scanf_float+0x60>
 80731f0:	f1b9 0f00 	cmp.w	r9, #0
 80731f4:	f43f af0f 	beq.w	8073016 <_scanf_float+0x6e>
 80731f8:	0591      	lsls	r1, r2, #22
 80731fa:	bf58      	it	pl
 80731fc:	9901      	ldrpl	r1, [sp, #4]
 80731fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8073202:	bf58      	it	pl
 8073204:	eba9 0101 	subpl.w	r1, r9, r1
 8073208:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 807320c:	bf58      	it	pl
 807320e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8073212:	6022      	str	r2, [r4, #0]
 8073214:	f04f 0900 	mov.w	r9, #0
 8073218:	e78a      	b.n	8073130 <_scanf_float+0x188>
 807321a:	f04f 0a03 	mov.w	sl, #3
 807321e:	e787      	b.n	8073130 <_scanf_float+0x188>
 8073220:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8073224:	4639      	mov	r1, r7
 8073226:	4640      	mov	r0, r8
 8073228:	4798      	blx	r3
 807322a:	2800      	cmp	r0, #0
 807322c:	f43f aedf 	beq.w	8072fee <_scanf_float+0x46>
 8073230:	e6ea      	b.n	8073008 <_scanf_float+0x60>
 8073232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8073236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 807323a:	463a      	mov	r2, r7
 807323c:	4640      	mov	r0, r8
 807323e:	4798      	blx	r3
 8073240:	6923      	ldr	r3, [r4, #16]
 8073242:	3b01      	subs	r3, #1
 8073244:	6123      	str	r3, [r4, #16]
 8073246:	e6ec      	b.n	8073022 <_scanf_float+0x7a>
 8073248:	1e6b      	subs	r3, r5, #1
 807324a:	2b06      	cmp	r3, #6
 807324c:	d825      	bhi.n	807329a <_scanf_float+0x2f2>
 807324e:	2d02      	cmp	r5, #2
 8073250:	d836      	bhi.n	80732c0 <_scanf_float+0x318>
 8073252:	455e      	cmp	r6, fp
 8073254:	f67f aee8 	bls.w	8073028 <_scanf_float+0x80>
 8073258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 807325c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8073260:	463a      	mov	r2, r7
 8073262:	4640      	mov	r0, r8
 8073264:	4798      	blx	r3
 8073266:	6923      	ldr	r3, [r4, #16]
 8073268:	3b01      	subs	r3, #1
 807326a:	6123      	str	r3, [r4, #16]
 807326c:	e7f1      	b.n	8073252 <_scanf_float+0x2aa>
 807326e:	9802      	ldr	r0, [sp, #8]
 8073270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8073274:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8073278:	9002      	str	r0, [sp, #8]
 807327a:	463a      	mov	r2, r7
 807327c:	4640      	mov	r0, r8
 807327e:	4798      	blx	r3
 8073280:	6923      	ldr	r3, [r4, #16]
 8073282:	3b01      	subs	r3, #1
 8073284:	6123      	str	r3, [r4, #16]
 8073286:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 807328a:	fa5f fa8a 	uxtb.w	sl, sl
 807328e:	f1ba 0f02 	cmp.w	sl, #2
 8073292:	d1ec      	bne.n	807326e <_scanf_float+0x2c6>
 8073294:	3d03      	subs	r5, #3
 8073296:	b2ed      	uxtb	r5, r5
 8073298:	1b76      	subs	r6, r6, r5
 807329a:	6823      	ldr	r3, [r4, #0]
 807329c:	05da      	lsls	r2, r3, #23
 807329e:	d52f      	bpl.n	8073300 <_scanf_float+0x358>
 80732a0:	055b      	lsls	r3, r3, #21
 80732a2:	d510      	bpl.n	80732c6 <_scanf_float+0x31e>
 80732a4:	455e      	cmp	r6, fp
 80732a6:	f67f aebf 	bls.w	8073028 <_scanf_float+0x80>
 80732aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80732ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80732b2:	463a      	mov	r2, r7
 80732b4:	4640      	mov	r0, r8
 80732b6:	4798      	blx	r3
 80732b8:	6923      	ldr	r3, [r4, #16]
 80732ba:	3b01      	subs	r3, #1
 80732bc:	6123      	str	r3, [r4, #16]
 80732be:	e7f1      	b.n	80732a4 <_scanf_float+0x2fc>
 80732c0:	46aa      	mov	sl, r5
 80732c2:	9602      	str	r6, [sp, #8]
 80732c4:	e7df      	b.n	8073286 <_scanf_float+0x2de>
 80732c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80732ca:	6923      	ldr	r3, [r4, #16]
 80732cc:	2965      	cmp	r1, #101	; 0x65
 80732ce:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80732d2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80732d6:	6123      	str	r3, [r4, #16]
 80732d8:	d00c      	beq.n	80732f4 <_scanf_float+0x34c>
 80732da:	2945      	cmp	r1, #69	; 0x45
 80732dc:	d00a      	beq.n	80732f4 <_scanf_float+0x34c>
 80732de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80732e2:	463a      	mov	r2, r7
 80732e4:	4640      	mov	r0, r8
 80732e6:	4798      	blx	r3
 80732e8:	6923      	ldr	r3, [r4, #16]
 80732ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80732ee:	3b01      	subs	r3, #1
 80732f0:	1eb5      	subs	r5, r6, #2
 80732f2:	6123      	str	r3, [r4, #16]
 80732f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80732f8:	463a      	mov	r2, r7
 80732fa:	4640      	mov	r0, r8
 80732fc:	4798      	blx	r3
 80732fe:	462e      	mov	r6, r5
 8073300:	6825      	ldr	r5, [r4, #0]
 8073302:	f015 0510 	ands.w	r5, r5, #16
 8073306:	d158      	bne.n	80733ba <_scanf_float+0x412>
 8073308:	7035      	strb	r5, [r6, #0]
 807330a:	6823      	ldr	r3, [r4, #0]
 807330c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8073310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8073314:	d11c      	bne.n	8073350 <_scanf_float+0x3a8>
 8073316:	9b01      	ldr	r3, [sp, #4]
 8073318:	454b      	cmp	r3, r9
 807331a:	eba3 0209 	sub.w	r2, r3, r9
 807331e:	d124      	bne.n	807336a <_scanf_float+0x3c2>
 8073320:	2200      	movs	r2, #0
 8073322:	4659      	mov	r1, fp
 8073324:	4640      	mov	r0, r8
 8073326:	f000 ff6d 	bl	8074204 <_strtod_r>
 807332a:	9b03      	ldr	r3, [sp, #12]
 807332c:	6821      	ldr	r1, [r4, #0]
 807332e:	681b      	ldr	r3, [r3, #0]
 8073330:	f011 0f02 	tst.w	r1, #2
 8073334:	ec57 6b10 	vmov	r6, r7, d0
 8073338:	f103 0204 	add.w	r2, r3, #4
 807333c:	d020      	beq.n	8073380 <_scanf_float+0x3d8>
 807333e:	9903      	ldr	r1, [sp, #12]
 8073340:	600a      	str	r2, [r1, #0]
 8073342:	681b      	ldr	r3, [r3, #0]
 8073344:	e9c3 6700 	strd	r6, r7, [r3]
 8073348:	68e3      	ldr	r3, [r4, #12]
 807334a:	3301      	adds	r3, #1
 807334c:	60e3      	str	r3, [r4, #12]
 807334e:	e66c      	b.n	807302a <_scanf_float+0x82>
 8073350:	9b04      	ldr	r3, [sp, #16]
 8073352:	2b00      	cmp	r3, #0
 8073354:	d0e4      	beq.n	8073320 <_scanf_float+0x378>
 8073356:	9905      	ldr	r1, [sp, #20]
 8073358:	230a      	movs	r3, #10
 807335a:	462a      	mov	r2, r5
 807335c:	3101      	adds	r1, #1
 807335e:	4640      	mov	r0, r8
 8073360:	f000 ffda 	bl	8074318 <_strtol_r>
 8073364:	9b04      	ldr	r3, [sp, #16]
 8073366:	9e05      	ldr	r6, [sp, #20]
 8073368:	1ac2      	subs	r2, r0, r3
 807336a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 807336e:	429e      	cmp	r6, r3
 8073370:	bf28      	it	cs
 8073372:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8073376:	4912      	ldr	r1, [pc, #72]	; (80733c0 <_scanf_float+0x418>)
 8073378:	4630      	mov	r0, r6
 807337a:	f000 f8a5 	bl	80734c8 <siprintf>
 807337e:	e7cf      	b.n	8073320 <_scanf_float+0x378>
 8073380:	f011 0f04 	tst.w	r1, #4
 8073384:	9903      	ldr	r1, [sp, #12]
 8073386:	600a      	str	r2, [r1, #0]
 8073388:	d1db      	bne.n	8073342 <_scanf_float+0x39a>
 807338a:	f8d3 8000 	ldr.w	r8, [r3]
 807338e:	ee10 2a10 	vmov	r2, s0
 8073392:	ee10 0a10 	vmov	r0, s0
 8073396:	463b      	mov	r3, r7
 8073398:	4639      	mov	r1, r7
 807339a:	f7ed fbdf 	bl	8060b5c <__aeabi_dcmpun>
 807339e:	b128      	cbz	r0, 80733ac <_scanf_float+0x404>
 80733a0:	4808      	ldr	r0, [pc, #32]	; (80733c4 <_scanf_float+0x41c>)
 80733a2:	f000 f88b 	bl	80734bc <nanf>
 80733a6:	ed88 0a00 	vstr	s0, [r8]
 80733aa:	e7cd      	b.n	8073348 <_scanf_float+0x3a0>
 80733ac:	4630      	mov	r0, r6
 80733ae:	4639      	mov	r1, r7
 80733b0:	f7ed fc32 	bl	8060c18 <__aeabi_d2f>
 80733b4:	f8c8 0000 	str.w	r0, [r8]
 80733b8:	e7c6      	b.n	8073348 <_scanf_float+0x3a0>
 80733ba:	2500      	movs	r5, #0
 80733bc:	e635      	b.n	807302a <_scanf_float+0x82>
 80733be:	bf00      	nop
 80733c0:	080775f4 	.word	0x080775f4
 80733c4:	08077a10 	.word	0x08077a10

080733c8 <cleanup_glue>:
 80733c8:	b538      	push	{r3, r4, r5, lr}
 80733ca:	460c      	mov	r4, r1
 80733cc:	6809      	ldr	r1, [r1, #0]
 80733ce:	4605      	mov	r5, r0
 80733d0:	b109      	cbz	r1, 80733d6 <cleanup_glue+0xe>
 80733d2:	f7ff fff9 	bl	80733c8 <cleanup_glue>
 80733d6:	4621      	mov	r1, r4
 80733d8:	4628      	mov	r0, r5
 80733da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80733de:	f002 bf6f 	b.w	80762c0 <_free_r>
	...

080733e4 <_reclaim_reent>:
 80733e4:	4b2c      	ldr	r3, [pc, #176]	; (8073498 <_reclaim_reent+0xb4>)
 80733e6:	681b      	ldr	r3, [r3, #0]
 80733e8:	4283      	cmp	r3, r0
 80733ea:	b570      	push	{r4, r5, r6, lr}
 80733ec:	4604      	mov	r4, r0
 80733ee:	d051      	beq.n	8073494 <_reclaim_reent+0xb0>
 80733f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80733f2:	b143      	cbz	r3, 8073406 <_reclaim_reent+0x22>
 80733f4:	68db      	ldr	r3, [r3, #12]
 80733f6:	2b00      	cmp	r3, #0
 80733f8:	d14a      	bne.n	8073490 <_reclaim_reent+0xac>
 80733fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80733fc:	6819      	ldr	r1, [r3, #0]
 80733fe:	b111      	cbz	r1, 8073406 <_reclaim_reent+0x22>
 8073400:	4620      	mov	r0, r4
 8073402:	f002 ff5d 	bl	80762c0 <_free_r>
 8073406:	6961      	ldr	r1, [r4, #20]
 8073408:	b111      	cbz	r1, 8073410 <_reclaim_reent+0x2c>
 807340a:	4620      	mov	r0, r4
 807340c:	f002 ff58 	bl	80762c0 <_free_r>
 8073410:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8073412:	b111      	cbz	r1, 807341a <_reclaim_reent+0x36>
 8073414:	4620      	mov	r0, r4
 8073416:	f002 ff53 	bl	80762c0 <_free_r>
 807341a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 807341c:	b111      	cbz	r1, 8073424 <_reclaim_reent+0x40>
 807341e:	4620      	mov	r0, r4
 8073420:	f002 ff4e 	bl	80762c0 <_free_r>
 8073424:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8073426:	b111      	cbz	r1, 807342e <_reclaim_reent+0x4a>
 8073428:	4620      	mov	r0, r4
 807342a:	f002 ff49 	bl	80762c0 <_free_r>
 807342e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8073430:	b111      	cbz	r1, 8073438 <_reclaim_reent+0x54>
 8073432:	4620      	mov	r0, r4
 8073434:	f002 ff44 	bl	80762c0 <_free_r>
 8073438:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 807343a:	b111      	cbz	r1, 8073442 <_reclaim_reent+0x5e>
 807343c:	4620      	mov	r0, r4
 807343e:	f002 ff3f 	bl	80762c0 <_free_r>
 8073442:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8073444:	b111      	cbz	r1, 807344c <_reclaim_reent+0x68>
 8073446:	4620      	mov	r0, r4
 8073448:	f002 ff3a 	bl	80762c0 <_free_r>
 807344c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 807344e:	b111      	cbz	r1, 8073456 <_reclaim_reent+0x72>
 8073450:	4620      	mov	r0, r4
 8073452:	f002 ff35 	bl	80762c0 <_free_r>
 8073456:	69a3      	ldr	r3, [r4, #24]
 8073458:	b1e3      	cbz	r3, 8073494 <_reclaim_reent+0xb0>
 807345a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 807345c:	4620      	mov	r0, r4
 807345e:	4798      	blx	r3
 8073460:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8073462:	b1b9      	cbz	r1, 8073494 <_reclaim_reent+0xb0>
 8073464:	4620      	mov	r0, r4
 8073466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 807346a:	f7ff bfad 	b.w	80733c8 <cleanup_glue>
 807346e:	5949      	ldr	r1, [r1, r5]
 8073470:	b941      	cbnz	r1, 8073484 <_reclaim_reent+0xa0>
 8073472:	3504      	adds	r5, #4
 8073474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8073476:	2d80      	cmp	r5, #128	; 0x80
 8073478:	68d9      	ldr	r1, [r3, #12]
 807347a:	d1f8      	bne.n	807346e <_reclaim_reent+0x8a>
 807347c:	4620      	mov	r0, r4
 807347e:	f002 ff1f 	bl	80762c0 <_free_r>
 8073482:	e7ba      	b.n	80733fa <_reclaim_reent+0x16>
 8073484:	680e      	ldr	r6, [r1, #0]
 8073486:	4620      	mov	r0, r4
 8073488:	f002 ff1a 	bl	80762c0 <_free_r>
 807348c:	4631      	mov	r1, r6
 807348e:	e7ef      	b.n	8073470 <_reclaim_reent+0x8c>
 8073490:	2500      	movs	r5, #0
 8073492:	e7ef      	b.n	8073474 <_reclaim_reent+0x90>
 8073494:	bd70      	pop	{r4, r5, r6, pc}
 8073496:	bf00      	nop
 8073498:	20000028 	.word	0x20000028

0807349c <_sbrk_r>:
 807349c:	b538      	push	{r3, r4, r5, lr}
 807349e:	4d06      	ldr	r5, [pc, #24]	; (80734b8 <_sbrk_r+0x1c>)
 80734a0:	2300      	movs	r3, #0
 80734a2:	4604      	mov	r4, r0
 80734a4:	4608      	mov	r0, r1
 80734a6:	602b      	str	r3, [r5, #0]
 80734a8:	f7ef fffc 	bl	80634a4 <_sbrk>
 80734ac:	1c43      	adds	r3, r0, #1
 80734ae:	d102      	bne.n	80734b6 <_sbrk_r+0x1a>
 80734b0:	682b      	ldr	r3, [r5, #0]
 80734b2:	b103      	cbz	r3, 80734b6 <_sbrk_r+0x1a>
 80734b4:	6023      	str	r3, [r4, #0]
 80734b6:	bd38      	pop	{r3, r4, r5, pc}
 80734b8:	20005d34 	.word	0x20005d34

080734bc <nanf>:
 80734bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80734c4 <nanf+0x8>
 80734c0:	4770      	bx	lr
 80734c2:	bf00      	nop
 80734c4:	7fc00000 	.word	0x7fc00000

080734c8 <siprintf>:
 80734c8:	b40e      	push	{r1, r2, r3}
 80734ca:	b500      	push	{lr}
 80734cc:	b09c      	sub	sp, #112	; 0x70
 80734ce:	ab1d      	add	r3, sp, #116	; 0x74
 80734d0:	9002      	str	r0, [sp, #8]
 80734d2:	9006      	str	r0, [sp, #24]
 80734d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80734d8:	4809      	ldr	r0, [pc, #36]	; (8073500 <siprintf+0x38>)
 80734da:	9107      	str	r1, [sp, #28]
 80734dc:	9104      	str	r1, [sp, #16]
 80734de:	4909      	ldr	r1, [pc, #36]	; (8073504 <siprintf+0x3c>)
 80734e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80734e4:	9105      	str	r1, [sp, #20]
 80734e6:	6800      	ldr	r0, [r0, #0]
 80734e8:	9301      	str	r3, [sp, #4]
 80734ea:	a902      	add	r1, sp, #8
 80734ec:	f002 ff94 	bl	8076418 <_svfiprintf_r>
 80734f0:	9b02      	ldr	r3, [sp, #8]
 80734f2:	2200      	movs	r2, #0
 80734f4:	701a      	strb	r2, [r3, #0]
 80734f6:	b01c      	add	sp, #112	; 0x70
 80734f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80734fc:	b003      	add	sp, #12
 80734fe:	4770      	bx	lr
 8073500:	20000028 	.word	0x20000028
 8073504:	ffff0208 	.word	0xffff0208

08073508 <__sread>:
 8073508:	b510      	push	{r4, lr}
 807350a:	460c      	mov	r4, r1
 807350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8073510:	f003 f9dc 	bl	80768cc <_read_r>
 8073514:	2800      	cmp	r0, #0
 8073516:	bfab      	itete	ge
 8073518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 807351a:	89a3      	ldrhlt	r3, [r4, #12]
 807351c:	181b      	addge	r3, r3, r0
 807351e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8073522:	bfac      	ite	ge
 8073524:	6563      	strge	r3, [r4, #84]	; 0x54
 8073526:	81a3      	strhlt	r3, [r4, #12]
 8073528:	bd10      	pop	{r4, pc}

0807352a <__swrite>:
 807352a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 807352e:	461f      	mov	r7, r3
 8073530:	898b      	ldrh	r3, [r1, #12]
 8073532:	05db      	lsls	r3, r3, #23
 8073534:	4605      	mov	r5, r0
 8073536:	460c      	mov	r4, r1
 8073538:	4616      	mov	r6, r2
 807353a:	d505      	bpl.n	8073548 <__swrite+0x1e>
 807353c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8073540:	2302      	movs	r3, #2
 8073542:	2200      	movs	r2, #0
 8073544:	f002 f9ba 	bl	80758bc <_lseek_r>
 8073548:	89a3      	ldrh	r3, [r4, #12]
 807354a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 807354e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8073552:	81a3      	strh	r3, [r4, #12]
 8073554:	4632      	mov	r2, r6
 8073556:	463b      	mov	r3, r7
 8073558:	4628      	mov	r0, r5
 807355a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 807355e:	f000 bedd 	b.w	807431c <_write_r>

08073562 <__sseek>:
 8073562:	b510      	push	{r4, lr}
 8073564:	460c      	mov	r4, r1
 8073566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 807356a:	f002 f9a7 	bl	80758bc <_lseek_r>
 807356e:	1c43      	adds	r3, r0, #1
 8073570:	89a3      	ldrh	r3, [r4, #12]
 8073572:	bf15      	itete	ne
 8073574:	6560      	strne	r0, [r4, #84]	; 0x54
 8073576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 807357a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 807357e:	81a3      	strheq	r3, [r4, #12]
 8073580:	bf18      	it	ne
 8073582:	81a3      	strhne	r3, [r4, #12]
 8073584:	bd10      	pop	{r4, pc}

08073586 <__sclose>:
 8073586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 807358a:	f000 bed9 	b.w	8074340 <_close_r>

0807358e <strncmp>:
 807358e:	b510      	push	{r4, lr}
 8073590:	b16a      	cbz	r2, 80735ae <strncmp+0x20>
 8073592:	3901      	subs	r1, #1
 8073594:	1884      	adds	r4, r0, r2
 8073596:	f810 3b01 	ldrb.w	r3, [r0], #1
 807359a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 807359e:	4293      	cmp	r3, r2
 80735a0:	d103      	bne.n	80735aa <strncmp+0x1c>
 80735a2:	42a0      	cmp	r0, r4
 80735a4:	d001      	beq.n	80735aa <strncmp+0x1c>
 80735a6:	2b00      	cmp	r3, #0
 80735a8:	d1f5      	bne.n	8073596 <strncmp+0x8>
 80735aa:	1a98      	subs	r0, r3, r2
 80735ac:	bd10      	pop	{r4, pc}
 80735ae:	4610      	mov	r0, r2
 80735b0:	e7fc      	b.n	80735ac <strncmp+0x1e>

080735b2 <sulp>:
 80735b2:	b570      	push	{r4, r5, r6, lr}
 80735b4:	4604      	mov	r4, r0
 80735b6:	460d      	mov	r5, r1
 80735b8:	ec45 4b10 	vmov	d0, r4, r5
 80735bc:	4616      	mov	r6, r2
 80735be:	f002 fd21 	bl	8076004 <__ulp>
 80735c2:	ec51 0b10 	vmov	r0, r1, d0
 80735c6:	b17e      	cbz	r6, 80735e8 <sulp+0x36>
 80735c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80735cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80735d0:	2b00      	cmp	r3, #0
 80735d2:	dd09      	ble.n	80735e8 <sulp+0x36>
 80735d4:	051b      	lsls	r3, r3, #20
 80735d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80735da:	2400      	movs	r4, #0
 80735dc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80735e0:	4622      	mov	r2, r4
 80735e2:	462b      	mov	r3, r5
 80735e4:	f7ed f820 	bl	8060628 <__aeabi_dmul>
 80735e8:	bd70      	pop	{r4, r5, r6, pc}
 80735ea:	0000      	movs	r0, r0
 80735ec:	0000      	movs	r0, r0
	...

080735f0 <_strtod_l>:
 80735f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80735f4:	b0a3      	sub	sp, #140	; 0x8c
 80735f6:	461f      	mov	r7, r3
 80735f8:	2300      	movs	r3, #0
 80735fa:	931e      	str	r3, [sp, #120]	; 0x78
 80735fc:	4ba4      	ldr	r3, [pc, #656]	; (8073890 <_strtod_l+0x2a0>)
 80735fe:	9219      	str	r2, [sp, #100]	; 0x64
 8073600:	681b      	ldr	r3, [r3, #0]
 8073602:	9307      	str	r3, [sp, #28]
 8073604:	4604      	mov	r4, r0
 8073606:	4618      	mov	r0, r3
 8073608:	4688      	mov	r8, r1
 807360a:	f7ec fdf3 	bl	80601f4 <strlen>
 807360e:	f04f 0a00 	mov.w	sl, #0
 8073612:	4605      	mov	r5, r0
 8073614:	f04f 0b00 	mov.w	fp, #0
 8073618:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 807361c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807361e:	781a      	ldrb	r2, [r3, #0]
 8073620:	2a2b      	cmp	r2, #43	; 0x2b
 8073622:	d04c      	beq.n	80736be <_strtod_l+0xce>
 8073624:	d839      	bhi.n	807369a <_strtod_l+0xaa>
 8073626:	2a0d      	cmp	r2, #13
 8073628:	d832      	bhi.n	8073690 <_strtod_l+0xa0>
 807362a:	2a08      	cmp	r2, #8
 807362c:	d832      	bhi.n	8073694 <_strtod_l+0xa4>
 807362e:	2a00      	cmp	r2, #0
 8073630:	d03c      	beq.n	80736ac <_strtod_l+0xbc>
 8073632:	2300      	movs	r3, #0
 8073634:	930e      	str	r3, [sp, #56]	; 0x38
 8073636:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8073638:	7833      	ldrb	r3, [r6, #0]
 807363a:	2b30      	cmp	r3, #48	; 0x30
 807363c:	f040 80b4 	bne.w	80737a8 <_strtod_l+0x1b8>
 8073640:	7873      	ldrb	r3, [r6, #1]
 8073642:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8073646:	2b58      	cmp	r3, #88	; 0x58
 8073648:	d16c      	bne.n	8073724 <_strtod_l+0x134>
 807364a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 807364c:	9301      	str	r3, [sp, #4]
 807364e:	ab1e      	add	r3, sp, #120	; 0x78
 8073650:	9702      	str	r7, [sp, #8]
 8073652:	9300      	str	r3, [sp, #0]
 8073654:	4a8f      	ldr	r2, [pc, #572]	; (8073894 <_strtod_l+0x2a4>)
 8073656:	ab1f      	add	r3, sp, #124	; 0x7c
 8073658:	a91d      	add	r1, sp, #116	; 0x74
 807365a:	4620      	mov	r0, r4
 807365c:	f001 fe22 	bl	80752a4 <__gethex>
 8073660:	f010 0707 	ands.w	r7, r0, #7
 8073664:	4605      	mov	r5, r0
 8073666:	d005      	beq.n	8073674 <_strtod_l+0x84>
 8073668:	2f06      	cmp	r7, #6
 807366a:	d12a      	bne.n	80736c2 <_strtod_l+0xd2>
 807366c:	3601      	adds	r6, #1
 807366e:	2300      	movs	r3, #0
 8073670:	961d      	str	r6, [sp, #116]	; 0x74
 8073672:	930e      	str	r3, [sp, #56]	; 0x38
 8073674:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8073676:	2b00      	cmp	r3, #0
 8073678:	f040 8596 	bne.w	80741a8 <_strtod_l+0xbb8>
 807367c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 807367e:	b1db      	cbz	r3, 80736b8 <_strtod_l+0xc8>
 8073680:	4652      	mov	r2, sl
 8073682:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8073686:	ec43 2b10 	vmov	d0, r2, r3
 807368a:	b023      	add	sp, #140	; 0x8c
 807368c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8073690:	2a20      	cmp	r2, #32
 8073692:	d1ce      	bne.n	8073632 <_strtod_l+0x42>
 8073694:	3301      	adds	r3, #1
 8073696:	931d      	str	r3, [sp, #116]	; 0x74
 8073698:	e7c0      	b.n	807361c <_strtod_l+0x2c>
 807369a:	2a2d      	cmp	r2, #45	; 0x2d
 807369c:	d1c9      	bne.n	8073632 <_strtod_l+0x42>
 807369e:	2201      	movs	r2, #1
 80736a0:	920e      	str	r2, [sp, #56]	; 0x38
 80736a2:	1c5a      	adds	r2, r3, #1
 80736a4:	921d      	str	r2, [sp, #116]	; 0x74
 80736a6:	785b      	ldrb	r3, [r3, #1]
 80736a8:	2b00      	cmp	r3, #0
 80736aa:	d1c4      	bne.n	8073636 <_strtod_l+0x46>
 80736ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80736ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80736b2:	2b00      	cmp	r3, #0
 80736b4:	f040 8576 	bne.w	80741a4 <_strtod_l+0xbb4>
 80736b8:	4652      	mov	r2, sl
 80736ba:	465b      	mov	r3, fp
 80736bc:	e7e3      	b.n	8073686 <_strtod_l+0x96>
 80736be:	2200      	movs	r2, #0
 80736c0:	e7ee      	b.n	80736a0 <_strtod_l+0xb0>
 80736c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80736c4:	b13a      	cbz	r2, 80736d6 <_strtod_l+0xe6>
 80736c6:	2135      	movs	r1, #53	; 0x35
 80736c8:	a820      	add	r0, sp, #128	; 0x80
 80736ca:	f002 fda6 	bl	807621a <__copybits>
 80736ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80736d0:	4620      	mov	r0, r4
 80736d2:	f002 f96b 	bl	80759ac <_Bfree>
 80736d6:	3f01      	subs	r7, #1
 80736d8:	2f05      	cmp	r7, #5
 80736da:	d807      	bhi.n	80736ec <_strtod_l+0xfc>
 80736dc:	e8df f007 	tbb	[pc, r7]
 80736e0:	1d180b0e 	.word	0x1d180b0e
 80736e4:	030e      	.short	0x030e
 80736e6:	f04f 0b00 	mov.w	fp, #0
 80736ea:	46da      	mov	sl, fp
 80736ec:	0728      	lsls	r0, r5, #28
 80736ee:	d5c1      	bpl.n	8073674 <_strtod_l+0x84>
 80736f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80736f4:	e7be      	b.n	8073674 <_strtod_l+0x84>
 80736f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80736fa:	e7f7      	b.n	80736ec <_strtod_l+0xfc>
 80736fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8073700:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8073702:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8073706:	f202 4233 	addw	r2, r2, #1075	; 0x433
 807370a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 807370e:	e7ed      	b.n	80736ec <_strtod_l+0xfc>
 8073710:	f8df b184 	ldr.w	fp, [pc, #388]	; 8073898 <_strtod_l+0x2a8>
 8073714:	f04f 0a00 	mov.w	sl, #0
 8073718:	e7e8      	b.n	80736ec <_strtod_l+0xfc>
 807371a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 807371e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8073722:	e7e3      	b.n	80736ec <_strtod_l+0xfc>
 8073724:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8073726:	1c5a      	adds	r2, r3, #1
 8073728:	921d      	str	r2, [sp, #116]	; 0x74
 807372a:	785b      	ldrb	r3, [r3, #1]
 807372c:	2b30      	cmp	r3, #48	; 0x30
 807372e:	d0f9      	beq.n	8073724 <_strtod_l+0x134>
 8073730:	2b00      	cmp	r3, #0
 8073732:	d09f      	beq.n	8073674 <_strtod_l+0x84>
 8073734:	2301      	movs	r3, #1
 8073736:	f04f 0900 	mov.w	r9, #0
 807373a:	9304      	str	r3, [sp, #16]
 807373c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807373e:	930a      	str	r3, [sp, #40]	; 0x28
 8073740:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8073744:	464f      	mov	r7, r9
 8073746:	220a      	movs	r2, #10
 8073748:	981d      	ldr	r0, [sp, #116]	; 0x74
 807374a:	7806      	ldrb	r6, [r0, #0]
 807374c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8073750:	b2d9      	uxtb	r1, r3
 8073752:	2909      	cmp	r1, #9
 8073754:	d92a      	bls.n	80737ac <_strtod_l+0x1bc>
 8073756:	9907      	ldr	r1, [sp, #28]
 8073758:	462a      	mov	r2, r5
 807375a:	f7ff ff18 	bl	807358e <strncmp>
 807375e:	b398      	cbz	r0, 80737c8 <_strtod_l+0x1d8>
 8073760:	2000      	movs	r0, #0
 8073762:	4633      	mov	r3, r6
 8073764:	463d      	mov	r5, r7
 8073766:	9007      	str	r0, [sp, #28]
 8073768:	4602      	mov	r2, r0
 807376a:	2b65      	cmp	r3, #101	; 0x65
 807376c:	d001      	beq.n	8073772 <_strtod_l+0x182>
 807376e:	2b45      	cmp	r3, #69	; 0x45
 8073770:	d118      	bne.n	80737a4 <_strtod_l+0x1b4>
 8073772:	b91d      	cbnz	r5, 807377c <_strtod_l+0x18c>
 8073774:	9b04      	ldr	r3, [sp, #16]
 8073776:	4303      	orrs	r3, r0
 8073778:	d098      	beq.n	80736ac <_strtod_l+0xbc>
 807377a:	2500      	movs	r5, #0
 807377c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8073780:	f108 0301 	add.w	r3, r8, #1
 8073784:	931d      	str	r3, [sp, #116]	; 0x74
 8073786:	f898 3001 	ldrb.w	r3, [r8, #1]
 807378a:	2b2b      	cmp	r3, #43	; 0x2b
 807378c:	d075      	beq.n	807387a <_strtod_l+0x28a>
 807378e:	2b2d      	cmp	r3, #45	; 0x2d
 8073790:	d07b      	beq.n	807388a <_strtod_l+0x29a>
 8073792:	f04f 0c00 	mov.w	ip, #0
 8073796:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 807379a:	2909      	cmp	r1, #9
 807379c:	f240 8082 	bls.w	80738a4 <_strtod_l+0x2b4>
 80737a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80737a4:	2600      	movs	r6, #0
 80737a6:	e09d      	b.n	80738e4 <_strtod_l+0x2f4>
 80737a8:	2300      	movs	r3, #0
 80737aa:	e7c4      	b.n	8073736 <_strtod_l+0x146>
 80737ac:	2f08      	cmp	r7, #8
 80737ae:	bfd8      	it	le
 80737b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80737b2:	f100 0001 	add.w	r0, r0, #1
 80737b6:	bfda      	itte	le
 80737b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80737bc:	9309      	strle	r3, [sp, #36]	; 0x24
 80737be:	fb02 3909 	mlagt	r9, r2, r9, r3
 80737c2:	3701      	adds	r7, #1
 80737c4:	901d      	str	r0, [sp, #116]	; 0x74
 80737c6:	e7bf      	b.n	8073748 <_strtod_l+0x158>
 80737c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80737ca:	195a      	adds	r2, r3, r5
 80737cc:	921d      	str	r2, [sp, #116]	; 0x74
 80737ce:	5d5b      	ldrb	r3, [r3, r5]
 80737d0:	2f00      	cmp	r7, #0
 80737d2:	d037      	beq.n	8073844 <_strtod_l+0x254>
 80737d4:	9007      	str	r0, [sp, #28]
 80737d6:	463d      	mov	r5, r7
 80737d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80737dc:	2a09      	cmp	r2, #9
 80737de:	d912      	bls.n	8073806 <_strtod_l+0x216>
 80737e0:	2201      	movs	r2, #1
 80737e2:	e7c2      	b.n	807376a <_strtod_l+0x17a>
 80737e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80737e6:	1c5a      	adds	r2, r3, #1
 80737e8:	921d      	str	r2, [sp, #116]	; 0x74
 80737ea:	785b      	ldrb	r3, [r3, #1]
 80737ec:	3001      	adds	r0, #1
 80737ee:	2b30      	cmp	r3, #48	; 0x30
 80737f0:	d0f8      	beq.n	80737e4 <_strtod_l+0x1f4>
 80737f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80737f6:	2a08      	cmp	r2, #8
 80737f8:	f200 84db 	bhi.w	80741b2 <_strtod_l+0xbc2>
 80737fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80737fe:	9007      	str	r0, [sp, #28]
 8073800:	2000      	movs	r0, #0
 8073802:	920a      	str	r2, [sp, #40]	; 0x28
 8073804:	4605      	mov	r5, r0
 8073806:	3b30      	subs	r3, #48	; 0x30
 8073808:	f100 0201 	add.w	r2, r0, #1
 807380c:	d014      	beq.n	8073838 <_strtod_l+0x248>
 807380e:	9907      	ldr	r1, [sp, #28]
 8073810:	4411      	add	r1, r2
 8073812:	9107      	str	r1, [sp, #28]
 8073814:	462a      	mov	r2, r5
 8073816:	eb00 0e05 	add.w	lr, r0, r5
 807381a:	210a      	movs	r1, #10
 807381c:	4572      	cmp	r2, lr
 807381e:	d113      	bne.n	8073848 <_strtod_l+0x258>
 8073820:	182a      	adds	r2, r5, r0
 8073822:	2a08      	cmp	r2, #8
 8073824:	f105 0501 	add.w	r5, r5, #1
 8073828:	4405      	add	r5, r0
 807382a:	dc1c      	bgt.n	8073866 <_strtod_l+0x276>
 807382c:	9909      	ldr	r1, [sp, #36]	; 0x24
 807382e:	220a      	movs	r2, #10
 8073830:	fb02 3301 	mla	r3, r2, r1, r3
 8073834:	9309      	str	r3, [sp, #36]	; 0x24
 8073836:	2200      	movs	r2, #0
 8073838:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807383a:	1c59      	adds	r1, r3, #1
 807383c:	911d      	str	r1, [sp, #116]	; 0x74
 807383e:	785b      	ldrb	r3, [r3, #1]
 8073840:	4610      	mov	r0, r2
 8073842:	e7c9      	b.n	80737d8 <_strtod_l+0x1e8>
 8073844:	4638      	mov	r0, r7
 8073846:	e7d2      	b.n	80737ee <_strtod_l+0x1fe>
 8073848:	2a08      	cmp	r2, #8
 807384a:	dc04      	bgt.n	8073856 <_strtod_l+0x266>
 807384c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 807384e:	434e      	muls	r6, r1
 8073850:	9609      	str	r6, [sp, #36]	; 0x24
 8073852:	3201      	adds	r2, #1
 8073854:	e7e2      	b.n	807381c <_strtod_l+0x22c>
 8073856:	f102 0c01 	add.w	ip, r2, #1
 807385a:	f1bc 0f10 	cmp.w	ip, #16
 807385e:	bfd8      	it	le
 8073860:	fb01 f909 	mulle.w	r9, r1, r9
 8073864:	e7f5      	b.n	8073852 <_strtod_l+0x262>
 8073866:	2d10      	cmp	r5, #16
 8073868:	bfdc      	itt	le
 807386a:	220a      	movle	r2, #10
 807386c:	fb02 3909 	mlale	r9, r2, r9, r3
 8073870:	e7e1      	b.n	8073836 <_strtod_l+0x246>
 8073872:	2300      	movs	r3, #0
 8073874:	9307      	str	r3, [sp, #28]
 8073876:	2201      	movs	r2, #1
 8073878:	e77c      	b.n	8073774 <_strtod_l+0x184>
 807387a:	f04f 0c00 	mov.w	ip, #0
 807387e:	f108 0302 	add.w	r3, r8, #2
 8073882:	931d      	str	r3, [sp, #116]	; 0x74
 8073884:	f898 3002 	ldrb.w	r3, [r8, #2]
 8073888:	e785      	b.n	8073796 <_strtod_l+0x1a6>
 807388a:	f04f 0c01 	mov.w	ip, #1
 807388e:	e7f6      	b.n	807387e <_strtod_l+0x28e>
 8073890:	08077850 	.word	0x08077850
 8073894:	080775fc 	.word	0x080775fc
 8073898:	7ff00000 	.word	0x7ff00000
 807389c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807389e:	1c59      	adds	r1, r3, #1
 80738a0:	911d      	str	r1, [sp, #116]	; 0x74
 80738a2:	785b      	ldrb	r3, [r3, #1]
 80738a4:	2b30      	cmp	r3, #48	; 0x30
 80738a6:	d0f9      	beq.n	807389c <_strtod_l+0x2ac>
 80738a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80738ac:	2908      	cmp	r1, #8
 80738ae:	f63f af79 	bhi.w	80737a4 <_strtod_l+0x1b4>
 80738b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80738b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80738b8:	9308      	str	r3, [sp, #32]
 80738ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80738bc:	1c59      	adds	r1, r3, #1
 80738be:	911d      	str	r1, [sp, #116]	; 0x74
 80738c0:	785b      	ldrb	r3, [r3, #1]
 80738c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80738c6:	2e09      	cmp	r6, #9
 80738c8:	d937      	bls.n	807393a <_strtod_l+0x34a>
 80738ca:	9e08      	ldr	r6, [sp, #32]
 80738cc:	1b89      	subs	r1, r1, r6
 80738ce:	2908      	cmp	r1, #8
 80738d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80738d4:	dc02      	bgt.n	80738dc <_strtod_l+0x2ec>
 80738d6:	4576      	cmp	r6, lr
 80738d8:	bfa8      	it	ge
 80738da:	4676      	movge	r6, lr
 80738dc:	f1bc 0f00 	cmp.w	ip, #0
 80738e0:	d000      	beq.n	80738e4 <_strtod_l+0x2f4>
 80738e2:	4276      	negs	r6, r6
 80738e4:	2d00      	cmp	r5, #0
 80738e6:	d14f      	bne.n	8073988 <_strtod_l+0x398>
 80738e8:	9904      	ldr	r1, [sp, #16]
 80738ea:	4301      	orrs	r1, r0
 80738ec:	f47f aec2 	bne.w	8073674 <_strtod_l+0x84>
 80738f0:	2a00      	cmp	r2, #0
 80738f2:	f47f aedb 	bne.w	80736ac <_strtod_l+0xbc>
 80738f6:	2b69      	cmp	r3, #105	; 0x69
 80738f8:	d027      	beq.n	807394a <_strtod_l+0x35a>
 80738fa:	dc24      	bgt.n	8073946 <_strtod_l+0x356>
 80738fc:	2b49      	cmp	r3, #73	; 0x49
 80738fe:	d024      	beq.n	807394a <_strtod_l+0x35a>
 8073900:	2b4e      	cmp	r3, #78	; 0x4e
 8073902:	f47f aed3 	bne.w	80736ac <_strtod_l+0xbc>
 8073906:	499e      	ldr	r1, [pc, #632]	; (8073b80 <_strtod_l+0x590>)
 8073908:	a81d      	add	r0, sp, #116	; 0x74
 807390a:	f001 ff23 	bl	8075754 <__match>
 807390e:	2800      	cmp	r0, #0
 8073910:	f43f aecc 	beq.w	80736ac <_strtod_l+0xbc>
 8073914:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8073916:	781b      	ldrb	r3, [r3, #0]
 8073918:	2b28      	cmp	r3, #40	; 0x28
 807391a:	d12d      	bne.n	8073978 <_strtod_l+0x388>
 807391c:	4999      	ldr	r1, [pc, #612]	; (8073b84 <_strtod_l+0x594>)
 807391e:	aa20      	add	r2, sp, #128	; 0x80
 8073920:	a81d      	add	r0, sp, #116	; 0x74
 8073922:	f001 ff2b 	bl	807577c <__hexnan>
 8073926:	2805      	cmp	r0, #5
 8073928:	d126      	bne.n	8073978 <_strtod_l+0x388>
 807392a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 807392c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8073930:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8073934:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8073938:	e69c      	b.n	8073674 <_strtod_l+0x84>
 807393a:	210a      	movs	r1, #10
 807393c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8073940:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8073944:	e7b9      	b.n	80738ba <_strtod_l+0x2ca>
 8073946:	2b6e      	cmp	r3, #110	; 0x6e
 8073948:	e7db      	b.n	8073902 <_strtod_l+0x312>
 807394a:	498f      	ldr	r1, [pc, #572]	; (8073b88 <_strtod_l+0x598>)
 807394c:	a81d      	add	r0, sp, #116	; 0x74
 807394e:	f001 ff01 	bl	8075754 <__match>
 8073952:	2800      	cmp	r0, #0
 8073954:	f43f aeaa 	beq.w	80736ac <_strtod_l+0xbc>
 8073958:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807395a:	498c      	ldr	r1, [pc, #560]	; (8073b8c <_strtod_l+0x59c>)
 807395c:	3b01      	subs	r3, #1
 807395e:	a81d      	add	r0, sp, #116	; 0x74
 8073960:	931d      	str	r3, [sp, #116]	; 0x74
 8073962:	f001 fef7 	bl	8075754 <__match>
 8073966:	b910      	cbnz	r0, 807396e <_strtod_l+0x37e>
 8073968:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 807396a:	3301      	adds	r3, #1
 807396c:	931d      	str	r3, [sp, #116]	; 0x74
 807396e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8073b9c <_strtod_l+0x5ac>
 8073972:	f04f 0a00 	mov.w	sl, #0
 8073976:	e67d      	b.n	8073674 <_strtod_l+0x84>
 8073978:	4885      	ldr	r0, [pc, #532]	; (8073b90 <_strtod_l+0x5a0>)
 807397a:	f002 ffb9 	bl	80768f0 <nan>
 807397e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8073982:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8073986:	e675      	b.n	8073674 <_strtod_l+0x84>
 8073988:	9b07      	ldr	r3, [sp, #28]
 807398a:	9809      	ldr	r0, [sp, #36]	; 0x24
 807398c:	1af3      	subs	r3, r6, r3
 807398e:	2f00      	cmp	r7, #0
 8073990:	bf08      	it	eq
 8073992:	462f      	moveq	r7, r5
 8073994:	2d10      	cmp	r5, #16
 8073996:	9308      	str	r3, [sp, #32]
 8073998:	46a8      	mov	r8, r5
 807399a:	bfa8      	it	ge
 807399c:	f04f 0810 	movge.w	r8, #16
 80739a0:	f7ec fdc8 	bl	8060534 <__aeabi_ui2d>
 80739a4:	2d09      	cmp	r5, #9
 80739a6:	4682      	mov	sl, r0
 80739a8:	468b      	mov	fp, r1
 80739aa:	dd13      	ble.n	80739d4 <_strtod_l+0x3e4>
 80739ac:	4b79      	ldr	r3, [pc, #484]	; (8073b94 <_strtod_l+0x5a4>)
 80739ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80739b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80739b6:	f7ec fe37 	bl	8060628 <__aeabi_dmul>
 80739ba:	4682      	mov	sl, r0
 80739bc:	4648      	mov	r0, r9
 80739be:	468b      	mov	fp, r1
 80739c0:	f7ec fdb8 	bl	8060534 <__aeabi_ui2d>
 80739c4:	4602      	mov	r2, r0
 80739c6:	460b      	mov	r3, r1
 80739c8:	4650      	mov	r0, sl
 80739ca:	4659      	mov	r1, fp
 80739cc:	f7ec fc76 	bl	80602bc <__adddf3>
 80739d0:	4682      	mov	sl, r0
 80739d2:	468b      	mov	fp, r1
 80739d4:	2d0f      	cmp	r5, #15
 80739d6:	dc38      	bgt.n	8073a4a <_strtod_l+0x45a>
 80739d8:	9b08      	ldr	r3, [sp, #32]
 80739da:	2b00      	cmp	r3, #0
 80739dc:	f43f ae4a 	beq.w	8073674 <_strtod_l+0x84>
 80739e0:	dd24      	ble.n	8073a2c <_strtod_l+0x43c>
 80739e2:	2b16      	cmp	r3, #22
 80739e4:	dc0b      	bgt.n	80739fe <_strtod_l+0x40e>
 80739e6:	4d6b      	ldr	r5, [pc, #428]	; (8073b94 <_strtod_l+0x5a4>)
 80739e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80739ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80739f0:	4652      	mov	r2, sl
 80739f2:	465b      	mov	r3, fp
 80739f4:	f7ec fe18 	bl	8060628 <__aeabi_dmul>
 80739f8:	4682      	mov	sl, r0
 80739fa:	468b      	mov	fp, r1
 80739fc:	e63a      	b.n	8073674 <_strtod_l+0x84>
 80739fe:	9a08      	ldr	r2, [sp, #32]
 8073a00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8073a04:	4293      	cmp	r3, r2
 8073a06:	db20      	blt.n	8073a4a <_strtod_l+0x45a>
 8073a08:	4c62      	ldr	r4, [pc, #392]	; (8073b94 <_strtod_l+0x5a4>)
 8073a0a:	f1c5 050f 	rsb	r5, r5, #15
 8073a0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8073a12:	4652      	mov	r2, sl
 8073a14:	465b      	mov	r3, fp
 8073a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8073a1a:	f7ec fe05 	bl	8060628 <__aeabi_dmul>
 8073a1e:	9b08      	ldr	r3, [sp, #32]
 8073a20:	1b5d      	subs	r5, r3, r5
 8073a22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8073a26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8073a2a:	e7e3      	b.n	80739f4 <_strtod_l+0x404>
 8073a2c:	9b08      	ldr	r3, [sp, #32]
 8073a2e:	3316      	adds	r3, #22
 8073a30:	db0b      	blt.n	8073a4a <_strtod_l+0x45a>
 8073a32:	9b07      	ldr	r3, [sp, #28]
 8073a34:	4a57      	ldr	r2, [pc, #348]	; (8073b94 <_strtod_l+0x5a4>)
 8073a36:	1b9e      	subs	r6, r3, r6
 8073a38:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8073a3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8073a40:	4650      	mov	r0, sl
 8073a42:	4659      	mov	r1, fp
 8073a44:	f7ec ff1a 	bl	806087c <__aeabi_ddiv>
 8073a48:	e7d6      	b.n	80739f8 <_strtod_l+0x408>
 8073a4a:	9b08      	ldr	r3, [sp, #32]
 8073a4c:	eba5 0808 	sub.w	r8, r5, r8
 8073a50:	4498      	add	r8, r3
 8073a52:	f1b8 0f00 	cmp.w	r8, #0
 8073a56:	dd71      	ble.n	8073b3c <_strtod_l+0x54c>
 8073a58:	f018 030f 	ands.w	r3, r8, #15
 8073a5c:	d00a      	beq.n	8073a74 <_strtod_l+0x484>
 8073a5e:	494d      	ldr	r1, [pc, #308]	; (8073b94 <_strtod_l+0x5a4>)
 8073a60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8073a64:	4652      	mov	r2, sl
 8073a66:	465b      	mov	r3, fp
 8073a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8073a6c:	f7ec fddc 	bl	8060628 <__aeabi_dmul>
 8073a70:	4682      	mov	sl, r0
 8073a72:	468b      	mov	fp, r1
 8073a74:	f038 080f 	bics.w	r8, r8, #15
 8073a78:	d04d      	beq.n	8073b16 <_strtod_l+0x526>
 8073a7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8073a7e:	dd22      	ble.n	8073ac6 <_strtod_l+0x4d6>
 8073a80:	2500      	movs	r5, #0
 8073a82:	462e      	mov	r6, r5
 8073a84:	9509      	str	r5, [sp, #36]	; 0x24
 8073a86:	9507      	str	r5, [sp, #28]
 8073a88:	2322      	movs	r3, #34	; 0x22
 8073a8a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8073b9c <_strtod_l+0x5ac>
 8073a8e:	6023      	str	r3, [r4, #0]
 8073a90:	f04f 0a00 	mov.w	sl, #0
 8073a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073a96:	2b00      	cmp	r3, #0
 8073a98:	f43f adec 	beq.w	8073674 <_strtod_l+0x84>
 8073a9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073a9e:	4620      	mov	r0, r4
 8073aa0:	f001 ff84 	bl	80759ac <_Bfree>
 8073aa4:	9907      	ldr	r1, [sp, #28]
 8073aa6:	4620      	mov	r0, r4
 8073aa8:	f001 ff80 	bl	80759ac <_Bfree>
 8073aac:	4631      	mov	r1, r6
 8073aae:	4620      	mov	r0, r4
 8073ab0:	f001 ff7c 	bl	80759ac <_Bfree>
 8073ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8073ab6:	4620      	mov	r0, r4
 8073ab8:	f001 ff78 	bl	80759ac <_Bfree>
 8073abc:	4629      	mov	r1, r5
 8073abe:	4620      	mov	r0, r4
 8073ac0:	f001 ff74 	bl	80759ac <_Bfree>
 8073ac4:	e5d6      	b.n	8073674 <_strtod_l+0x84>
 8073ac6:	2300      	movs	r3, #0
 8073ac8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8073acc:	4650      	mov	r0, sl
 8073ace:	4659      	mov	r1, fp
 8073ad0:	4699      	mov	r9, r3
 8073ad2:	f1b8 0f01 	cmp.w	r8, #1
 8073ad6:	dc21      	bgt.n	8073b1c <_strtod_l+0x52c>
 8073ad8:	b10b      	cbz	r3, 8073ade <_strtod_l+0x4ee>
 8073ada:	4682      	mov	sl, r0
 8073adc:	468b      	mov	fp, r1
 8073ade:	4b2e      	ldr	r3, [pc, #184]	; (8073b98 <_strtod_l+0x5a8>)
 8073ae0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8073ae4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8073ae8:	4652      	mov	r2, sl
 8073aea:	465b      	mov	r3, fp
 8073aec:	e9d9 0100 	ldrd	r0, r1, [r9]
 8073af0:	f7ec fd9a 	bl	8060628 <__aeabi_dmul>
 8073af4:	4b29      	ldr	r3, [pc, #164]	; (8073b9c <_strtod_l+0x5ac>)
 8073af6:	460a      	mov	r2, r1
 8073af8:	400b      	ands	r3, r1
 8073afa:	4929      	ldr	r1, [pc, #164]	; (8073ba0 <_strtod_l+0x5b0>)
 8073afc:	428b      	cmp	r3, r1
 8073afe:	4682      	mov	sl, r0
 8073b00:	d8be      	bhi.n	8073a80 <_strtod_l+0x490>
 8073b02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8073b06:	428b      	cmp	r3, r1
 8073b08:	bf86      	itte	hi
 8073b0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8073ba4 <_strtod_l+0x5b4>
 8073b0e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8073b12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8073b16:	2300      	movs	r3, #0
 8073b18:	9304      	str	r3, [sp, #16]
 8073b1a:	e081      	b.n	8073c20 <_strtod_l+0x630>
 8073b1c:	f018 0f01 	tst.w	r8, #1
 8073b20:	d007      	beq.n	8073b32 <_strtod_l+0x542>
 8073b22:	4b1d      	ldr	r3, [pc, #116]	; (8073b98 <_strtod_l+0x5a8>)
 8073b24:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8073b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8073b2c:	f7ec fd7c 	bl	8060628 <__aeabi_dmul>
 8073b30:	2301      	movs	r3, #1
 8073b32:	f109 0901 	add.w	r9, r9, #1
 8073b36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8073b3a:	e7ca      	b.n	8073ad2 <_strtod_l+0x4e2>
 8073b3c:	d0eb      	beq.n	8073b16 <_strtod_l+0x526>
 8073b3e:	f1c8 0800 	rsb	r8, r8, #0
 8073b42:	f018 020f 	ands.w	r2, r8, #15
 8073b46:	d00a      	beq.n	8073b5e <_strtod_l+0x56e>
 8073b48:	4b12      	ldr	r3, [pc, #72]	; (8073b94 <_strtod_l+0x5a4>)
 8073b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8073b4e:	4650      	mov	r0, sl
 8073b50:	4659      	mov	r1, fp
 8073b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8073b56:	f7ec fe91 	bl	806087c <__aeabi_ddiv>
 8073b5a:	4682      	mov	sl, r0
 8073b5c:	468b      	mov	fp, r1
 8073b5e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8073b62:	d0d8      	beq.n	8073b16 <_strtod_l+0x526>
 8073b64:	f1b8 0f1f 	cmp.w	r8, #31
 8073b68:	dd1e      	ble.n	8073ba8 <_strtod_l+0x5b8>
 8073b6a:	2500      	movs	r5, #0
 8073b6c:	462e      	mov	r6, r5
 8073b6e:	9509      	str	r5, [sp, #36]	; 0x24
 8073b70:	9507      	str	r5, [sp, #28]
 8073b72:	2322      	movs	r3, #34	; 0x22
 8073b74:	f04f 0a00 	mov.w	sl, #0
 8073b78:	f04f 0b00 	mov.w	fp, #0
 8073b7c:	6023      	str	r3, [r4, #0]
 8073b7e:	e789      	b.n	8073a94 <_strtod_l+0x4a4>
 8073b80:	080775cd 	.word	0x080775cd
 8073b84:	08077610 	.word	0x08077610
 8073b88:	080775c5 	.word	0x080775c5
 8073b8c:	08077754 	.word	0x08077754
 8073b90:	08077a10 	.word	0x08077a10
 8073b94:	080778f0 	.word	0x080778f0
 8073b98:	080778c8 	.word	0x080778c8
 8073b9c:	7ff00000 	.word	0x7ff00000
 8073ba0:	7ca00000 	.word	0x7ca00000
 8073ba4:	7fefffff 	.word	0x7fefffff
 8073ba8:	f018 0310 	ands.w	r3, r8, #16
 8073bac:	bf18      	it	ne
 8073bae:	236a      	movne	r3, #106	; 0x6a
 8073bb0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8073f68 <_strtod_l+0x978>
 8073bb4:	9304      	str	r3, [sp, #16]
 8073bb6:	4650      	mov	r0, sl
 8073bb8:	4659      	mov	r1, fp
 8073bba:	2300      	movs	r3, #0
 8073bbc:	f018 0f01 	tst.w	r8, #1
 8073bc0:	d004      	beq.n	8073bcc <_strtod_l+0x5dc>
 8073bc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8073bc6:	f7ec fd2f 	bl	8060628 <__aeabi_dmul>
 8073bca:	2301      	movs	r3, #1
 8073bcc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8073bd0:	f109 0908 	add.w	r9, r9, #8
 8073bd4:	d1f2      	bne.n	8073bbc <_strtod_l+0x5cc>
 8073bd6:	b10b      	cbz	r3, 8073bdc <_strtod_l+0x5ec>
 8073bd8:	4682      	mov	sl, r0
 8073bda:	468b      	mov	fp, r1
 8073bdc:	9b04      	ldr	r3, [sp, #16]
 8073bde:	b1bb      	cbz	r3, 8073c10 <_strtod_l+0x620>
 8073be0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8073be4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8073be8:	2b00      	cmp	r3, #0
 8073bea:	4659      	mov	r1, fp
 8073bec:	dd10      	ble.n	8073c10 <_strtod_l+0x620>
 8073bee:	2b1f      	cmp	r3, #31
 8073bf0:	f340 8128 	ble.w	8073e44 <_strtod_l+0x854>
 8073bf4:	2b34      	cmp	r3, #52	; 0x34
 8073bf6:	bfde      	ittt	le
 8073bf8:	3b20      	suble	r3, #32
 8073bfa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8073bfe:	fa02 f303 	lslle.w	r3, r2, r3
 8073c02:	f04f 0a00 	mov.w	sl, #0
 8073c06:	bfcc      	ite	gt
 8073c08:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8073c0c:	ea03 0b01 	andle.w	fp, r3, r1
 8073c10:	2200      	movs	r2, #0
 8073c12:	2300      	movs	r3, #0
 8073c14:	4650      	mov	r0, sl
 8073c16:	4659      	mov	r1, fp
 8073c18:	f7ec ff6e 	bl	8060af8 <__aeabi_dcmpeq>
 8073c1c:	2800      	cmp	r0, #0
 8073c1e:	d1a4      	bne.n	8073b6a <_strtod_l+0x57a>
 8073c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073c22:	9300      	str	r3, [sp, #0]
 8073c24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8073c26:	462b      	mov	r3, r5
 8073c28:	463a      	mov	r2, r7
 8073c2a:	4620      	mov	r0, r4
 8073c2c:	f001 ff2a 	bl	8075a84 <__s2b>
 8073c30:	9009      	str	r0, [sp, #36]	; 0x24
 8073c32:	2800      	cmp	r0, #0
 8073c34:	f43f af24 	beq.w	8073a80 <_strtod_l+0x490>
 8073c38:	9b07      	ldr	r3, [sp, #28]
 8073c3a:	1b9e      	subs	r6, r3, r6
 8073c3c:	9b08      	ldr	r3, [sp, #32]
 8073c3e:	2b00      	cmp	r3, #0
 8073c40:	bfb4      	ite	lt
 8073c42:	4633      	movlt	r3, r6
 8073c44:	2300      	movge	r3, #0
 8073c46:	9310      	str	r3, [sp, #64]	; 0x40
 8073c48:	9b08      	ldr	r3, [sp, #32]
 8073c4a:	2500      	movs	r5, #0
 8073c4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8073c50:	9318      	str	r3, [sp, #96]	; 0x60
 8073c52:	462e      	mov	r6, r5
 8073c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073c56:	4620      	mov	r0, r4
 8073c58:	6859      	ldr	r1, [r3, #4]
 8073c5a:	f001 fe67 	bl	807592c <_Balloc>
 8073c5e:	9007      	str	r0, [sp, #28]
 8073c60:	2800      	cmp	r0, #0
 8073c62:	f43f af11 	beq.w	8073a88 <_strtod_l+0x498>
 8073c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8073c68:	691a      	ldr	r2, [r3, #16]
 8073c6a:	3202      	adds	r2, #2
 8073c6c:	f103 010c 	add.w	r1, r3, #12
 8073c70:	0092      	lsls	r2, r2, #2
 8073c72:	300c      	adds	r0, #12
 8073c74:	f7fe fcbd 	bl	80725f2 <memcpy>
 8073c78:	ec4b ab10 	vmov	d0, sl, fp
 8073c7c:	aa20      	add	r2, sp, #128	; 0x80
 8073c7e:	a91f      	add	r1, sp, #124	; 0x7c
 8073c80:	4620      	mov	r0, r4
 8073c82:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8073c86:	f002 fa39 	bl	80760fc <__d2b>
 8073c8a:	901e      	str	r0, [sp, #120]	; 0x78
 8073c8c:	2800      	cmp	r0, #0
 8073c8e:	f43f aefb 	beq.w	8073a88 <_strtod_l+0x498>
 8073c92:	2101      	movs	r1, #1
 8073c94:	4620      	mov	r0, r4
 8073c96:	f001 ff8f 	bl	8075bb8 <__i2b>
 8073c9a:	4606      	mov	r6, r0
 8073c9c:	2800      	cmp	r0, #0
 8073c9e:	f43f aef3 	beq.w	8073a88 <_strtod_l+0x498>
 8073ca2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8073ca4:	9904      	ldr	r1, [sp, #16]
 8073ca6:	2b00      	cmp	r3, #0
 8073ca8:	bfab      	itete	ge
 8073caa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8073cac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8073cae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8073cb0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8073cb4:	bfac      	ite	ge
 8073cb6:	eb03 0902 	addge.w	r9, r3, r2
 8073cba:	1ad7      	sublt	r7, r2, r3
 8073cbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8073cbe:	eba3 0801 	sub.w	r8, r3, r1
 8073cc2:	4490      	add	r8, r2
 8073cc4:	4ba3      	ldr	r3, [pc, #652]	; (8073f54 <_strtod_l+0x964>)
 8073cc6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8073cca:	4598      	cmp	r8, r3
 8073ccc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8073cd0:	f280 80cc 	bge.w	8073e6c <_strtod_l+0x87c>
 8073cd4:	eba3 0308 	sub.w	r3, r3, r8
 8073cd8:	2b1f      	cmp	r3, #31
 8073cda:	eba2 0203 	sub.w	r2, r2, r3
 8073cde:	f04f 0101 	mov.w	r1, #1
 8073ce2:	f300 80b6 	bgt.w	8073e52 <_strtod_l+0x862>
 8073ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8073cea:	9311      	str	r3, [sp, #68]	; 0x44
 8073cec:	2300      	movs	r3, #0
 8073cee:	930c      	str	r3, [sp, #48]	; 0x30
 8073cf0:	eb09 0802 	add.w	r8, r9, r2
 8073cf4:	9b04      	ldr	r3, [sp, #16]
 8073cf6:	45c1      	cmp	r9, r8
 8073cf8:	4417      	add	r7, r2
 8073cfa:	441f      	add	r7, r3
 8073cfc:	464b      	mov	r3, r9
 8073cfe:	bfa8      	it	ge
 8073d00:	4643      	movge	r3, r8
 8073d02:	42bb      	cmp	r3, r7
 8073d04:	bfa8      	it	ge
 8073d06:	463b      	movge	r3, r7
 8073d08:	2b00      	cmp	r3, #0
 8073d0a:	bfc2      	ittt	gt
 8073d0c:	eba8 0803 	subgt.w	r8, r8, r3
 8073d10:	1aff      	subgt	r7, r7, r3
 8073d12:	eba9 0903 	subgt.w	r9, r9, r3
 8073d16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8073d18:	2b00      	cmp	r3, #0
 8073d1a:	dd17      	ble.n	8073d4c <_strtod_l+0x75c>
 8073d1c:	4631      	mov	r1, r6
 8073d1e:	461a      	mov	r2, r3
 8073d20:	4620      	mov	r0, r4
 8073d22:	f002 f805 	bl	8075d30 <__pow5mult>
 8073d26:	4606      	mov	r6, r0
 8073d28:	2800      	cmp	r0, #0
 8073d2a:	f43f aead 	beq.w	8073a88 <_strtod_l+0x498>
 8073d2e:	4601      	mov	r1, r0
 8073d30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8073d32:	4620      	mov	r0, r4
 8073d34:	f001 ff56 	bl	8075be4 <__multiply>
 8073d38:	900f      	str	r0, [sp, #60]	; 0x3c
 8073d3a:	2800      	cmp	r0, #0
 8073d3c:	f43f aea4 	beq.w	8073a88 <_strtod_l+0x498>
 8073d40:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073d42:	4620      	mov	r0, r4
 8073d44:	f001 fe32 	bl	80759ac <_Bfree>
 8073d48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8073d4a:	931e      	str	r3, [sp, #120]	; 0x78
 8073d4c:	f1b8 0f00 	cmp.w	r8, #0
 8073d50:	f300 8091 	bgt.w	8073e76 <_strtod_l+0x886>
 8073d54:	9b08      	ldr	r3, [sp, #32]
 8073d56:	2b00      	cmp	r3, #0
 8073d58:	dd08      	ble.n	8073d6c <_strtod_l+0x77c>
 8073d5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8073d5c:	9907      	ldr	r1, [sp, #28]
 8073d5e:	4620      	mov	r0, r4
 8073d60:	f001 ffe6 	bl	8075d30 <__pow5mult>
 8073d64:	9007      	str	r0, [sp, #28]
 8073d66:	2800      	cmp	r0, #0
 8073d68:	f43f ae8e 	beq.w	8073a88 <_strtod_l+0x498>
 8073d6c:	2f00      	cmp	r7, #0
 8073d6e:	dd08      	ble.n	8073d82 <_strtod_l+0x792>
 8073d70:	9907      	ldr	r1, [sp, #28]
 8073d72:	463a      	mov	r2, r7
 8073d74:	4620      	mov	r0, r4
 8073d76:	f002 f835 	bl	8075de4 <__lshift>
 8073d7a:	9007      	str	r0, [sp, #28]
 8073d7c:	2800      	cmp	r0, #0
 8073d7e:	f43f ae83 	beq.w	8073a88 <_strtod_l+0x498>
 8073d82:	f1b9 0f00 	cmp.w	r9, #0
 8073d86:	dd08      	ble.n	8073d9a <_strtod_l+0x7aa>
 8073d88:	4631      	mov	r1, r6
 8073d8a:	464a      	mov	r2, r9
 8073d8c:	4620      	mov	r0, r4
 8073d8e:	f002 f829 	bl	8075de4 <__lshift>
 8073d92:	4606      	mov	r6, r0
 8073d94:	2800      	cmp	r0, #0
 8073d96:	f43f ae77 	beq.w	8073a88 <_strtod_l+0x498>
 8073d9a:	9a07      	ldr	r2, [sp, #28]
 8073d9c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073d9e:	4620      	mov	r0, r4
 8073da0:	f002 f8a8 	bl	8075ef4 <__mdiff>
 8073da4:	4605      	mov	r5, r0
 8073da6:	2800      	cmp	r0, #0
 8073da8:	f43f ae6e 	beq.w	8073a88 <_strtod_l+0x498>
 8073dac:	68c3      	ldr	r3, [r0, #12]
 8073dae:	930f      	str	r3, [sp, #60]	; 0x3c
 8073db0:	2300      	movs	r3, #0
 8073db2:	60c3      	str	r3, [r0, #12]
 8073db4:	4631      	mov	r1, r6
 8073db6:	f002 f881 	bl	8075ebc <__mcmp>
 8073dba:	2800      	cmp	r0, #0
 8073dbc:	da65      	bge.n	8073e8a <_strtod_l+0x89a>
 8073dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8073dc0:	ea53 030a 	orrs.w	r3, r3, sl
 8073dc4:	f040 8087 	bne.w	8073ed6 <_strtod_l+0x8e6>
 8073dc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8073dcc:	2b00      	cmp	r3, #0
 8073dce:	f040 8082 	bne.w	8073ed6 <_strtod_l+0x8e6>
 8073dd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8073dd6:	0d1b      	lsrs	r3, r3, #20
 8073dd8:	051b      	lsls	r3, r3, #20
 8073dda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8073dde:	d97a      	bls.n	8073ed6 <_strtod_l+0x8e6>
 8073de0:	696b      	ldr	r3, [r5, #20]
 8073de2:	b913      	cbnz	r3, 8073dea <_strtod_l+0x7fa>
 8073de4:	692b      	ldr	r3, [r5, #16]
 8073de6:	2b01      	cmp	r3, #1
 8073de8:	dd75      	ble.n	8073ed6 <_strtod_l+0x8e6>
 8073dea:	4629      	mov	r1, r5
 8073dec:	2201      	movs	r2, #1
 8073dee:	4620      	mov	r0, r4
 8073df0:	f001 fff8 	bl	8075de4 <__lshift>
 8073df4:	4631      	mov	r1, r6
 8073df6:	4605      	mov	r5, r0
 8073df8:	f002 f860 	bl	8075ebc <__mcmp>
 8073dfc:	2800      	cmp	r0, #0
 8073dfe:	dd6a      	ble.n	8073ed6 <_strtod_l+0x8e6>
 8073e00:	9904      	ldr	r1, [sp, #16]
 8073e02:	4a55      	ldr	r2, [pc, #340]	; (8073f58 <_strtod_l+0x968>)
 8073e04:	465b      	mov	r3, fp
 8073e06:	2900      	cmp	r1, #0
 8073e08:	f000 8085 	beq.w	8073f16 <_strtod_l+0x926>
 8073e0c:	ea02 010b 	and.w	r1, r2, fp
 8073e10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8073e14:	dc7f      	bgt.n	8073f16 <_strtod_l+0x926>
 8073e16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8073e1a:	f77f aeaa 	ble.w	8073b72 <_strtod_l+0x582>
 8073e1e:	4a4f      	ldr	r2, [pc, #316]	; (8073f5c <_strtod_l+0x96c>)
 8073e20:	2300      	movs	r3, #0
 8073e22:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8073e26:	4650      	mov	r0, sl
 8073e28:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8073e2c:	4659      	mov	r1, fp
 8073e2e:	f7ec fbfb 	bl	8060628 <__aeabi_dmul>
 8073e32:	460b      	mov	r3, r1
 8073e34:	4303      	orrs	r3, r0
 8073e36:	bf08      	it	eq
 8073e38:	2322      	moveq	r3, #34	; 0x22
 8073e3a:	4682      	mov	sl, r0
 8073e3c:	468b      	mov	fp, r1
 8073e3e:	bf08      	it	eq
 8073e40:	6023      	streq	r3, [r4, #0]
 8073e42:	e62b      	b.n	8073a9c <_strtod_l+0x4ac>
 8073e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8073e48:	fa02 f303 	lsl.w	r3, r2, r3
 8073e4c:	ea03 0a0a 	and.w	sl, r3, sl
 8073e50:	e6de      	b.n	8073c10 <_strtod_l+0x620>
 8073e52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8073e56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8073e5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8073e5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8073e62:	fa01 f308 	lsl.w	r3, r1, r8
 8073e66:	930c      	str	r3, [sp, #48]	; 0x30
 8073e68:	9111      	str	r1, [sp, #68]	; 0x44
 8073e6a:	e741      	b.n	8073cf0 <_strtod_l+0x700>
 8073e6c:	2300      	movs	r3, #0
 8073e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8073e70:	2301      	movs	r3, #1
 8073e72:	9311      	str	r3, [sp, #68]	; 0x44
 8073e74:	e73c      	b.n	8073cf0 <_strtod_l+0x700>
 8073e76:	991e      	ldr	r1, [sp, #120]	; 0x78
 8073e78:	4642      	mov	r2, r8
 8073e7a:	4620      	mov	r0, r4
 8073e7c:	f001 ffb2 	bl	8075de4 <__lshift>
 8073e80:	901e      	str	r0, [sp, #120]	; 0x78
 8073e82:	2800      	cmp	r0, #0
 8073e84:	f47f af66 	bne.w	8073d54 <_strtod_l+0x764>
 8073e88:	e5fe      	b.n	8073a88 <_strtod_l+0x498>
 8073e8a:	465f      	mov	r7, fp
 8073e8c:	d16e      	bne.n	8073f6c <_strtod_l+0x97c>
 8073e8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8073e90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8073e94:	b342      	cbz	r2, 8073ee8 <_strtod_l+0x8f8>
 8073e96:	4a32      	ldr	r2, [pc, #200]	; (8073f60 <_strtod_l+0x970>)
 8073e98:	4293      	cmp	r3, r2
 8073e9a:	d128      	bne.n	8073eee <_strtod_l+0x8fe>
 8073e9c:	9b04      	ldr	r3, [sp, #16]
 8073e9e:	4650      	mov	r0, sl
 8073ea0:	b1eb      	cbz	r3, 8073ede <_strtod_l+0x8ee>
 8073ea2:	4a2d      	ldr	r2, [pc, #180]	; (8073f58 <_strtod_l+0x968>)
 8073ea4:	403a      	ands	r2, r7
 8073ea6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8073eaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8073eae:	d819      	bhi.n	8073ee4 <_strtod_l+0x8f4>
 8073eb0:	0d12      	lsrs	r2, r2, #20
 8073eb2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8073eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8073eba:	4298      	cmp	r0, r3
 8073ebc:	d117      	bne.n	8073eee <_strtod_l+0x8fe>
 8073ebe:	4b29      	ldr	r3, [pc, #164]	; (8073f64 <_strtod_l+0x974>)
 8073ec0:	429f      	cmp	r7, r3
 8073ec2:	d102      	bne.n	8073eca <_strtod_l+0x8da>
 8073ec4:	3001      	adds	r0, #1
 8073ec6:	f43f addf 	beq.w	8073a88 <_strtod_l+0x498>
 8073eca:	4b23      	ldr	r3, [pc, #140]	; (8073f58 <_strtod_l+0x968>)
 8073ecc:	403b      	ands	r3, r7
 8073ece:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8073ed2:	f04f 0a00 	mov.w	sl, #0
 8073ed6:	9b04      	ldr	r3, [sp, #16]
 8073ed8:	2b00      	cmp	r3, #0
 8073eda:	d1a0      	bne.n	8073e1e <_strtod_l+0x82e>
 8073edc:	e5de      	b.n	8073a9c <_strtod_l+0x4ac>
 8073ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8073ee2:	e7ea      	b.n	8073eba <_strtod_l+0x8ca>
 8073ee4:	460b      	mov	r3, r1
 8073ee6:	e7e8      	b.n	8073eba <_strtod_l+0x8ca>
 8073ee8:	ea53 030a 	orrs.w	r3, r3, sl
 8073eec:	d088      	beq.n	8073e00 <_strtod_l+0x810>
 8073eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8073ef0:	b1db      	cbz	r3, 8073f2a <_strtod_l+0x93a>
 8073ef2:	423b      	tst	r3, r7
 8073ef4:	d0ef      	beq.n	8073ed6 <_strtod_l+0x8e6>
 8073ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8073ef8:	9a04      	ldr	r2, [sp, #16]
 8073efa:	4650      	mov	r0, sl
 8073efc:	4659      	mov	r1, fp
 8073efe:	b1c3      	cbz	r3, 8073f32 <_strtod_l+0x942>
 8073f00:	f7ff fb57 	bl	80735b2 <sulp>
 8073f04:	4602      	mov	r2, r0
 8073f06:	460b      	mov	r3, r1
 8073f08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8073f0c:	f7ec f9d6 	bl	80602bc <__adddf3>
 8073f10:	4682      	mov	sl, r0
 8073f12:	468b      	mov	fp, r1
 8073f14:	e7df      	b.n	8073ed6 <_strtod_l+0x8e6>
 8073f16:	4013      	ands	r3, r2
 8073f18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8073f1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8073f20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8073f24:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8073f28:	e7d5      	b.n	8073ed6 <_strtod_l+0x8e6>
 8073f2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8073f2c:	ea13 0f0a 	tst.w	r3, sl
 8073f30:	e7e0      	b.n	8073ef4 <_strtod_l+0x904>
 8073f32:	f7ff fb3e 	bl	80735b2 <sulp>
 8073f36:	4602      	mov	r2, r0
 8073f38:	460b      	mov	r3, r1
 8073f3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8073f3e:	f7ec f9bb 	bl	80602b8 <__aeabi_dsub>
 8073f42:	2200      	movs	r2, #0
 8073f44:	2300      	movs	r3, #0
 8073f46:	4682      	mov	sl, r0
 8073f48:	468b      	mov	fp, r1
 8073f4a:	f7ec fdd5 	bl	8060af8 <__aeabi_dcmpeq>
 8073f4e:	2800      	cmp	r0, #0
 8073f50:	d0c1      	beq.n	8073ed6 <_strtod_l+0x8e6>
 8073f52:	e60e      	b.n	8073b72 <_strtod_l+0x582>
 8073f54:	fffffc02 	.word	0xfffffc02
 8073f58:	7ff00000 	.word	0x7ff00000
 8073f5c:	39500000 	.word	0x39500000
 8073f60:	000fffff 	.word	0x000fffff
 8073f64:	7fefffff 	.word	0x7fefffff
 8073f68:	08077628 	.word	0x08077628
 8073f6c:	4631      	mov	r1, r6
 8073f6e:	4628      	mov	r0, r5
 8073f70:	f002 f920 	bl	80761b4 <__ratio>
 8073f74:	ec59 8b10 	vmov	r8, r9, d0
 8073f78:	ee10 0a10 	vmov	r0, s0
 8073f7c:	2200      	movs	r2, #0
 8073f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8073f82:	4649      	mov	r1, r9
 8073f84:	f7ec fdcc 	bl	8060b20 <__aeabi_dcmple>
 8073f88:	2800      	cmp	r0, #0
 8073f8a:	d07c      	beq.n	8074086 <_strtod_l+0xa96>
 8073f8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8073f8e:	2b00      	cmp	r3, #0
 8073f90:	d04c      	beq.n	807402c <_strtod_l+0xa3c>
 8073f92:	4b95      	ldr	r3, [pc, #596]	; (80741e8 <_strtod_l+0xbf8>)
 8073f94:	2200      	movs	r2, #0
 8073f96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8073f9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80741e8 <_strtod_l+0xbf8>
 8073f9e:	f04f 0800 	mov.w	r8, #0
 8073fa2:	4b92      	ldr	r3, [pc, #584]	; (80741ec <_strtod_l+0xbfc>)
 8073fa4:	403b      	ands	r3, r7
 8073fa6:	9311      	str	r3, [sp, #68]	; 0x44
 8073fa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8073faa:	4b91      	ldr	r3, [pc, #580]	; (80741f0 <_strtod_l+0xc00>)
 8073fac:	429a      	cmp	r2, r3
 8073fae:	f040 80b2 	bne.w	8074116 <_strtod_l+0xb26>
 8073fb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8073fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8073fba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8073fbe:	ec4b ab10 	vmov	d0, sl, fp
 8073fc2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8073fc6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8073fca:	f002 f81b 	bl	8076004 <__ulp>
 8073fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8073fd2:	ec53 2b10 	vmov	r2, r3, d0
 8073fd6:	f7ec fb27 	bl	8060628 <__aeabi_dmul>
 8073fda:	4652      	mov	r2, sl
 8073fdc:	465b      	mov	r3, fp
 8073fde:	f7ec f96d 	bl	80602bc <__adddf3>
 8073fe2:	460b      	mov	r3, r1
 8073fe4:	4981      	ldr	r1, [pc, #516]	; (80741ec <_strtod_l+0xbfc>)
 8073fe6:	4a83      	ldr	r2, [pc, #524]	; (80741f4 <_strtod_l+0xc04>)
 8073fe8:	4019      	ands	r1, r3
 8073fea:	4291      	cmp	r1, r2
 8073fec:	4682      	mov	sl, r0
 8073fee:	d95e      	bls.n	80740ae <_strtod_l+0xabe>
 8073ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8073ff2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8073ff6:	4293      	cmp	r3, r2
 8073ff8:	d103      	bne.n	8074002 <_strtod_l+0xa12>
 8073ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8073ffc:	3301      	adds	r3, #1
 8073ffe:	f43f ad43 	beq.w	8073a88 <_strtod_l+0x498>
 8074002:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8074200 <_strtod_l+0xc10>
 8074006:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 807400a:	991e      	ldr	r1, [sp, #120]	; 0x78
 807400c:	4620      	mov	r0, r4
 807400e:	f001 fccd 	bl	80759ac <_Bfree>
 8074012:	9907      	ldr	r1, [sp, #28]
 8074014:	4620      	mov	r0, r4
 8074016:	f001 fcc9 	bl	80759ac <_Bfree>
 807401a:	4631      	mov	r1, r6
 807401c:	4620      	mov	r0, r4
 807401e:	f001 fcc5 	bl	80759ac <_Bfree>
 8074022:	4629      	mov	r1, r5
 8074024:	4620      	mov	r0, r4
 8074026:	f001 fcc1 	bl	80759ac <_Bfree>
 807402a:	e613      	b.n	8073c54 <_strtod_l+0x664>
 807402c:	f1ba 0f00 	cmp.w	sl, #0
 8074030:	d11b      	bne.n	807406a <_strtod_l+0xa7a>
 8074032:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8074036:	b9f3      	cbnz	r3, 8074076 <_strtod_l+0xa86>
 8074038:	4b6b      	ldr	r3, [pc, #428]	; (80741e8 <_strtod_l+0xbf8>)
 807403a:	2200      	movs	r2, #0
 807403c:	4640      	mov	r0, r8
 807403e:	4649      	mov	r1, r9
 8074040:	f7ec fd64 	bl	8060b0c <__aeabi_dcmplt>
 8074044:	b9d0      	cbnz	r0, 807407c <_strtod_l+0xa8c>
 8074046:	4640      	mov	r0, r8
 8074048:	4649      	mov	r1, r9
 807404a:	4b6b      	ldr	r3, [pc, #428]	; (80741f8 <_strtod_l+0xc08>)
 807404c:	2200      	movs	r2, #0
 807404e:	f7ec faeb 	bl	8060628 <__aeabi_dmul>
 8074052:	4680      	mov	r8, r0
 8074054:	4689      	mov	r9, r1
 8074056:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 807405a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 807405e:	931b      	str	r3, [sp, #108]	; 0x6c
 8074060:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8074064:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8074068:	e79b      	b.n	8073fa2 <_strtod_l+0x9b2>
 807406a:	f1ba 0f01 	cmp.w	sl, #1
 807406e:	d102      	bne.n	8074076 <_strtod_l+0xa86>
 8074070:	2f00      	cmp	r7, #0
 8074072:	f43f ad7e 	beq.w	8073b72 <_strtod_l+0x582>
 8074076:	4b61      	ldr	r3, [pc, #388]	; (80741fc <_strtod_l+0xc0c>)
 8074078:	2200      	movs	r2, #0
 807407a:	e78c      	b.n	8073f96 <_strtod_l+0x9a6>
 807407c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80741f8 <_strtod_l+0xc08>
 8074080:	f04f 0800 	mov.w	r8, #0
 8074084:	e7e7      	b.n	8074056 <_strtod_l+0xa66>
 8074086:	4b5c      	ldr	r3, [pc, #368]	; (80741f8 <_strtod_l+0xc08>)
 8074088:	4640      	mov	r0, r8
 807408a:	4649      	mov	r1, r9
 807408c:	2200      	movs	r2, #0
 807408e:	f7ec facb 	bl	8060628 <__aeabi_dmul>
 8074092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8074094:	4680      	mov	r8, r0
 8074096:	4689      	mov	r9, r1
 8074098:	b933      	cbnz	r3, 80740a8 <_strtod_l+0xab8>
 807409a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 807409e:	9012      	str	r0, [sp, #72]	; 0x48
 80740a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80740a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80740a6:	e7dd      	b.n	8074064 <_strtod_l+0xa74>
 80740a8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80740ac:	e7f9      	b.n	80740a2 <_strtod_l+0xab2>
 80740ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80740b2:	9b04      	ldr	r3, [sp, #16]
 80740b4:	2b00      	cmp	r3, #0
 80740b6:	d1a8      	bne.n	807400a <_strtod_l+0xa1a>
 80740b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80740bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80740be:	0d1b      	lsrs	r3, r3, #20
 80740c0:	051b      	lsls	r3, r3, #20
 80740c2:	429a      	cmp	r2, r3
 80740c4:	d1a1      	bne.n	807400a <_strtod_l+0xa1a>
 80740c6:	4640      	mov	r0, r8
 80740c8:	4649      	mov	r1, r9
 80740ca:	f7ec fe5d 	bl	8060d88 <__aeabi_d2lz>
 80740ce:	f7ec fa7d 	bl	80605cc <__aeabi_l2d>
 80740d2:	4602      	mov	r2, r0
 80740d4:	460b      	mov	r3, r1
 80740d6:	4640      	mov	r0, r8
 80740d8:	4649      	mov	r1, r9
 80740da:	f7ec f8ed 	bl	80602b8 <__aeabi_dsub>
 80740de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80740e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80740e4:	ea43 030a 	orr.w	r3, r3, sl
 80740e8:	4313      	orrs	r3, r2
 80740ea:	4680      	mov	r8, r0
 80740ec:	4689      	mov	r9, r1
 80740ee:	d053      	beq.n	8074198 <_strtod_l+0xba8>
 80740f0:	a335      	add	r3, pc, #212	; (adr r3, 80741c8 <_strtod_l+0xbd8>)
 80740f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80740f6:	f7ec fd09 	bl	8060b0c <__aeabi_dcmplt>
 80740fa:	2800      	cmp	r0, #0
 80740fc:	f47f acce 	bne.w	8073a9c <_strtod_l+0x4ac>
 8074100:	a333      	add	r3, pc, #204	; (adr r3, 80741d0 <_strtod_l+0xbe0>)
 8074102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8074106:	4640      	mov	r0, r8
 8074108:	4649      	mov	r1, r9
 807410a:	f7ec fd1d 	bl	8060b48 <__aeabi_dcmpgt>
 807410e:	2800      	cmp	r0, #0
 8074110:	f43f af7b 	beq.w	807400a <_strtod_l+0xa1a>
 8074114:	e4c2      	b.n	8073a9c <_strtod_l+0x4ac>
 8074116:	9b04      	ldr	r3, [sp, #16]
 8074118:	b333      	cbz	r3, 8074168 <_strtod_l+0xb78>
 807411a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 807411c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8074120:	d822      	bhi.n	8074168 <_strtod_l+0xb78>
 8074122:	a32d      	add	r3, pc, #180	; (adr r3, 80741d8 <_strtod_l+0xbe8>)
 8074124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8074128:	4640      	mov	r0, r8
 807412a:	4649      	mov	r1, r9
 807412c:	f7ec fcf8 	bl	8060b20 <__aeabi_dcmple>
 8074130:	b1a0      	cbz	r0, 807415c <_strtod_l+0xb6c>
 8074132:	4649      	mov	r1, r9
 8074134:	4640      	mov	r0, r8
 8074136:	f7ec fd4f 	bl	8060bd8 <__aeabi_d2uiz>
 807413a:	2801      	cmp	r0, #1
 807413c:	bf38      	it	cc
 807413e:	2001      	movcc	r0, #1
 8074140:	f7ec f9f8 	bl	8060534 <__aeabi_ui2d>
 8074144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8074146:	4680      	mov	r8, r0
 8074148:	4689      	mov	r9, r1
 807414a:	bb13      	cbnz	r3, 8074192 <_strtod_l+0xba2>
 807414c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8074150:	9014      	str	r0, [sp, #80]	; 0x50
 8074152:	9315      	str	r3, [sp, #84]	; 0x54
 8074154:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8074158:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 807415c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 807415e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8074160:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8074164:	1a9b      	subs	r3, r3, r2
 8074166:	930d      	str	r3, [sp, #52]	; 0x34
 8074168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 807416c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8074170:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8074174:	f001 ff46 	bl	8076004 <__ulp>
 8074178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 807417c:	ec53 2b10 	vmov	r2, r3, d0
 8074180:	f7ec fa52 	bl	8060628 <__aeabi_dmul>
 8074184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8074188:	f7ec f898 	bl	80602bc <__adddf3>
 807418c:	4682      	mov	sl, r0
 807418e:	468b      	mov	fp, r1
 8074190:	e78f      	b.n	80740b2 <_strtod_l+0xac2>
 8074192:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8074196:	e7dd      	b.n	8074154 <_strtod_l+0xb64>
 8074198:	a311      	add	r3, pc, #68	; (adr r3, 80741e0 <_strtod_l+0xbf0>)
 807419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 807419e:	f7ec fcb5 	bl	8060b0c <__aeabi_dcmplt>
 80741a2:	e7b4      	b.n	807410e <_strtod_l+0xb1e>
 80741a4:	2300      	movs	r3, #0
 80741a6:	930e      	str	r3, [sp, #56]	; 0x38
 80741a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80741aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80741ac:	6013      	str	r3, [r2, #0]
 80741ae:	f7ff ba65 	b.w	807367c <_strtod_l+0x8c>
 80741b2:	2b65      	cmp	r3, #101	; 0x65
 80741b4:	f43f ab5d 	beq.w	8073872 <_strtod_l+0x282>
 80741b8:	2b45      	cmp	r3, #69	; 0x45
 80741ba:	f43f ab5a 	beq.w	8073872 <_strtod_l+0x282>
 80741be:	2201      	movs	r2, #1
 80741c0:	f7ff bb92 	b.w	80738e8 <_strtod_l+0x2f8>
 80741c4:	f3af 8000 	nop.w
 80741c8:	94a03595 	.word	0x94a03595
 80741cc:	3fdfffff 	.word	0x3fdfffff
 80741d0:	35afe535 	.word	0x35afe535
 80741d4:	3fe00000 	.word	0x3fe00000
 80741d8:	ffc00000 	.word	0xffc00000
 80741dc:	41dfffff 	.word	0x41dfffff
 80741e0:	94a03595 	.word	0x94a03595
 80741e4:	3fcfffff 	.word	0x3fcfffff
 80741e8:	3ff00000 	.word	0x3ff00000
 80741ec:	7ff00000 	.word	0x7ff00000
 80741f0:	7fe00000 	.word	0x7fe00000
 80741f4:	7c9fffff 	.word	0x7c9fffff
 80741f8:	3fe00000 	.word	0x3fe00000
 80741fc:	bff00000 	.word	0xbff00000
 8074200:	7fefffff 	.word	0x7fefffff

08074204 <_strtod_r>:
 8074204:	4b01      	ldr	r3, [pc, #4]	; (807420c <_strtod_r+0x8>)
 8074206:	f7ff b9f3 	b.w	80735f0 <_strtod_l>
 807420a:	bf00      	nop
 807420c:	20000090 	.word	0x20000090

08074210 <_strtol_l.isra.0>:
 8074210:	2b01      	cmp	r3, #1
 8074212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8074216:	d001      	beq.n	807421c <_strtol_l.isra.0+0xc>
 8074218:	2b24      	cmp	r3, #36	; 0x24
 807421a:	d906      	bls.n	807422a <_strtol_l.isra.0+0x1a>
 807421c:	f7fe f8c6 	bl	80723ac <__errno>
 8074220:	2316      	movs	r3, #22
 8074222:	6003      	str	r3, [r0, #0]
 8074224:	2000      	movs	r0, #0
 8074226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 807422a:	4f3a      	ldr	r7, [pc, #232]	; (8074314 <_strtol_l.isra.0+0x104>)
 807422c:	468e      	mov	lr, r1
 807422e:	4676      	mov	r6, lr
 8074230:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8074234:	5de5      	ldrb	r5, [r4, r7]
 8074236:	f015 0508 	ands.w	r5, r5, #8
 807423a:	d1f8      	bne.n	807422e <_strtol_l.isra.0+0x1e>
 807423c:	2c2d      	cmp	r4, #45	; 0x2d
 807423e:	d134      	bne.n	80742aa <_strtol_l.isra.0+0x9a>
 8074240:	f89e 4000 	ldrb.w	r4, [lr]
 8074244:	f04f 0801 	mov.w	r8, #1
 8074248:	f106 0e02 	add.w	lr, r6, #2
 807424c:	2b00      	cmp	r3, #0
 807424e:	d05c      	beq.n	807430a <_strtol_l.isra.0+0xfa>
 8074250:	2b10      	cmp	r3, #16
 8074252:	d10c      	bne.n	807426e <_strtol_l.isra.0+0x5e>
 8074254:	2c30      	cmp	r4, #48	; 0x30
 8074256:	d10a      	bne.n	807426e <_strtol_l.isra.0+0x5e>
 8074258:	f89e 4000 	ldrb.w	r4, [lr]
 807425c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8074260:	2c58      	cmp	r4, #88	; 0x58
 8074262:	d14d      	bne.n	8074300 <_strtol_l.isra.0+0xf0>
 8074264:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8074268:	2310      	movs	r3, #16
 807426a:	f10e 0e02 	add.w	lr, lr, #2
 807426e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8074272:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8074276:	2600      	movs	r6, #0
 8074278:	fbbc f9f3 	udiv	r9, ip, r3
 807427c:	4635      	mov	r5, r6
 807427e:	fb03 ca19 	mls	sl, r3, r9, ip
 8074282:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8074286:	2f09      	cmp	r7, #9
 8074288:	d818      	bhi.n	80742bc <_strtol_l.isra.0+0xac>
 807428a:	463c      	mov	r4, r7
 807428c:	42a3      	cmp	r3, r4
 807428e:	dd24      	ble.n	80742da <_strtol_l.isra.0+0xca>
 8074290:	2e00      	cmp	r6, #0
 8074292:	db1f      	blt.n	80742d4 <_strtol_l.isra.0+0xc4>
 8074294:	45a9      	cmp	r9, r5
 8074296:	d31d      	bcc.n	80742d4 <_strtol_l.isra.0+0xc4>
 8074298:	d101      	bne.n	807429e <_strtol_l.isra.0+0x8e>
 807429a:	45a2      	cmp	sl, r4
 807429c:	db1a      	blt.n	80742d4 <_strtol_l.isra.0+0xc4>
 807429e:	fb05 4503 	mla	r5, r5, r3, r4
 80742a2:	2601      	movs	r6, #1
 80742a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80742a8:	e7eb      	b.n	8074282 <_strtol_l.isra.0+0x72>
 80742aa:	2c2b      	cmp	r4, #43	; 0x2b
 80742ac:	bf08      	it	eq
 80742ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 80742b2:	46a8      	mov	r8, r5
 80742b4:	bf08      	it	eq
 80742b6:	f106 0e02 	addeq.w	lr, r6, #2
 80742ba:	e7c7      	b.n	807424c <_strtol_l.isra.0+0x3c>
 80742bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80742c0:	2f19      	cmp	r7, #25
 80742c2:	d801      	bhi.n	80742c8 <_strtol_l.isra.0+0xb8>
 80742c4:	3c37      	subs	r4, #55	; 0x37
 80742c6:	e7e1      	b.n	807428c <_strtol_l.isra.0+0x7c>
 80742c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80742cc:	2f19      	cmp	r7, #25
 80742ce:	d804      	bhi.n	80742da <_strtol_l.isra.0+0xca>
 80742d0:	3c57      	subs	r4, #87	; 0x57
 80742d2:	e7db      	b.n	807428c <_strtol_l.isra.0+0x7c>
 80742d4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80742d8:	e7e4      	b.n	80742a4 <_strtol_l.isra.0+0x94>
 80742da:	2e00      	cmp	r6, #0
 80742dc:	da05      	bge.n	80742ea <_strtol_l.isra.0+0xda>
 80742de:	2322      	movs	r3, #34	; 0x22
 80742e0:	6003      	str	r3, [r0, #0]
 80742e2:	4665      	mov	r5, ip
 80742e4:	b942      	cbnz	r2, 80742f8 <_strtol_l.isra.0+0xe8>
 80742e6:	4628      	mov	r0, r5
 80742e8:	e79d      	b.n	8074226 <_strtol_l.isra.0+0x16>
 80742ea:	f1b8 0f00 	cmp.w	r8, #0
 80742ee:	d000      	beq.n	80742f2 <_strtol_l.isra.0+0xe2>
 80742f0:	426d      	negs	r5, r5
 80742f2:	2a00      	cmp	r2, #0
 80742f4:	d0f7      	beq.n	80742e6 <_strtol_l.isra.0+0xd6>
 80742f6:	b10e      	cbz	r6, 80742fc <_strtol_l.isra.0+0xec>
 80742f8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80742fc:	6011      	str	r1, [r2, #0]
 80742fe:	e7f2      	b.n	80742e6 <_strtol_l.isra.0+0xd6>
 8074300:	2430      	movs	r4, #48	; 0x30
 8074302:	2b00      	cmp	r3, #0
 8074304:	d1b3      	bne.n	807426e <_strtol_l.isra.0+0x5e>
 8074306:	2308      	movs	r3, #8
 8074308:	e7b1      	b.n	807426e <_strtol_l.isra.0+0x5e>
 807430a:	2c30      	cmp	r4, #48	; 0x30
 807430c:	d0a4      	beq.n	8074258 <_strtol_l.isra.0+0x48>
 807430e:	230a      	movs	r3, #10
 8074310:	e7ad      	b.n	807426e <_strtol_l.isra.0+0x5e>
 8074312:	bf00      	nop
 8074314:	08077651 	.word	0x08077651

08074318 <_strtol_r>:
 8074318:	f7ff bf7a 	b.w	8074210 <_strtol_l.isra.0>

0807431c <_write_r>:
 807431c:	b538      	push	{r3, r4, r5, lr}
 807431e:	4d07      	ldr	r5, [pc, #28]	; (807433c <_write_r+0x20>)
 8074320:	4604      	mov	r4, r0
 8074322:	4608      	mov	r0, r1
 8074324:	4611      	mov	r1, r2
 8074326:	2200      	movs	r2, #0
 8074328:	602a      	str	r2, [r5, #0]
 807432a:	461a      	mov	r2, r3
 807432c:	f7ef f869 	bl	8063402 <_write>
 8074330:	1c43      	adds	r3, r0, #1
 8074332:	d102      	bne.n	807433a <_write_r+0x1e>
 8074334:	682b      	ldr	r3, [r5, #0]
 8074336:	b103      	cbz	r3, 807433a <_write_r+0x1e>
 8074338:	6023      	str	r3, [r4, #0]
 807433a:	bd38      	pop	{r3, r4, r5, pc}
 807433c:	20005d34 	.word	0x20005d34

08074340 <_close_r>:
 8074340:	b538      	push	{r3, r4, r5, lr}
 8074342:	4d06      	ldr	r5, [pc, #24]	; (807435c <_close_r+0x1c>)
 8074344:	2300      	movs	r3, #0
 8074346:	4604      	mov	r4, r0
 8074348:	4608      	mov	r0, r1
 807434a:	602b      	str	r3, [r5, #0]
 807434c:	f7ef f875 	bl	806343a <_close>
 8074350:	1c43      	adds	r3, r0, #1
 8074352:	d102      	bne.n	807435a <_close_r+0x1a>
 8074354:	682b      	ldr	r3, [r5, #0]
 8074356:	b103      	cbz	r3, 807435a <_close_r+0x1a>
 8074358:	6023      	str	r3, [r4, #0]
 807435a:	bd38      	pop	{r3, r4, r5, pc}
 807435c:	20005d34 	.word	0x20005d34

08074360 <quorem>:
 8074360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8074364:	6903      	ldr	r3, [r0, #16]
 8074366:	690c      	ldr	r4, [r1, #16]
 8074368:	42a3      	cmp	r3, r4
 807436a:	4607      	mov	r7, r0
 807436c:	f2c0 8081 	blt.w	8074472 <quorem+0x112>
 8074370:	3c01      	subs	r4, #1
 8074372:	f101 0814 	add.w	r8, r1, #20
 8074376:	f100 0514 	add.w	r5, r0, #20
 807437a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 807437e:	9301      	str	r3, [sp, #4]
 8074380:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8074384:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8074388:	3301      	adds	r3, #1
 807438a:	429a      	cmp	r2, r3
 807438c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8074390:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8074394:	fbb2 f6f3 	udiv	r6, r2, r3
 8074398:	d331      	bcc.n	80743fe <quorem+0x9e>
 807439a:	f04f 0e00 	mov.w	lr, #0
 807439e:	4640      	mov	r0, r8
 80743a0:	46ac      	mov	ip, r5
 80743a2:	46f2      	mov	sl, lr
 80743a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80743a8:	b293      	uxth	r3, r2
 80743aa:	fb06 e303 	mla	r3, r6, r3, lr
 80743ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80743b2:	b29b      	uxth	r3, r3
 80743b4:	ebaa 0303 	sub.w	r3, sl, r3
 80743b8:	0c12      	lsrs	r2, r2, #16
 80743ba:	f8dc a000 	ldr.w	sl, [ip]
 80743be:	fb06 e202 	mla	r2, r6, r2, lr
 80743c2:	fa13 f38a 	uxtah	r3, r3, sl
 80743c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80743ca:	fa1f fa82 	uxth.w	sl, r2
 80743ce:	f8dc 2000 	ldr.w	r2, [ip]
 80743d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80743d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80743da:	b29b      	uxth	r3, r3
 80743dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80743e0:	4581      	cmp	r9, r0
 80743e2:	f84c 3b04 	str.w	r3, [ip], #4
 80743e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80743ea:	d2db      	bcs.n	80743a4 <quorem+0x44>
 80743ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80743f0:	b92b      	cbnz	r3, 80743fe <quorem+0x9e>
 80743f2:	9b01      	ldr	r3, [sp, #4]
 80743f4:	3b04      	subs	r3, #4
 80743f6:	429d      	cmp	r5, r3
 80743f8:	461a      	mov	r2, r3
 80743fa:	d32e      	bcc.n	807445a <quorem+0xfa>
 80743fc:	613c      	str	r4, [r7, #16]
 80743fe:	4638      	mov	r0, r7
 8074400:	f001 fd5c 	bl	8075ebc <__mcmp>
 8074404:	2800      	cmp	r0, #0
 8074406:	db24      	blt.n	8074452 <quorem+0xf2>
 8074408:	3601      	adds	r6, #1
 807440a:	4628      	mov	r0, r5
 807440c:	f04f 0c00 	mov.w	ip, #0
 8074410:	f858 2b04 	ldr.w	r2, [r8], #4
 8074414:	f8d0 e000 	ldr.w	lr, [r0]
 8074418:	b293      	uxth	r3, r2
 807441a:	ebac 0303 	sub.w	r3, ip, r3
 807441e:	0c12      	lsrs	r2, r2, #16
 8074420:	fa13 f38e 	uxtah	r3, r3, lr
 8074424:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8074428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 807442c:	b29b      	uxth	r3, r3
 807442e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8074432:	45c1      	cmp	r9, r8
 8074434:	f840 3b04 	str.w	r3, [r0], #4
 8074438:	ea4f 4c22 	mov.w	ip, r2, asr #16
 807443c:	d2e8      	bcs.n	8074410 <quorem+0xb0>
 807443e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8074442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8074446:	b922      	cbnz	r2, 8074452 <quorem+0xf2>
 8074448:	3b04      	subs	r3, #4
 807444a:	429d      	cmp	r5, r3
 807444c:	461a      	mov	r2, r3
 807444e:	d30a      	bcc.n	8074466 <quorem+0x106>
 8074450:	613c      	str	r4, [r7, #16]
 8074452:	4630      	mov	r0, r6
 8074454:	b003      	add	sp, #12
 8074456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 807445a:	6812      	ldr	r2, [r2, #0]
 807445c:	3b04      	subs	r3, #4
 807445e:	2a00      	cmp	r2, #0
 8074460:	d1cc      	bne.n	80743fc <quorem+0x9c>
 8074462:	3c01      	subs	r4, #1
 8074464:	e7c7      	b.n	80743f6 <quorem+0x96>
 8074466:	6812      	ldr	r2, [r2, #0]
 8074468:	3b04      	subs	r3, #4
 807446a:	2a00      	cmp	r2, #0
 807446c:	d1f0      	bne.n	8074450 <quorem+0xf0>
 807446e:	3c01      	subs	r4, #1
 8074470:	e7eb      	b.n	807444a <quorem+0xea>
 8074472:	2000      	movs	r0, #0
 8074474:	e7ee      	b.n	8074454 <quorem+0xf4>
	...

08074478 <_dtoa_r>:
 8074478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 807447c:	ed2d 8b02 	vpush	{d8}
 8074480:	ec57 6b10 	vmov	r6, r7, d0
 8074484:	b095      	sub	sp, #84	; 0x54
 8074486:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8074488:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 807448c:	9105      	str	r1, [sp, #20]
 807448e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8074492:	4604      	mov	r4, r0
 8074494:	9209      	str	r2, [sp, #36]	; 0x24
 8074496:	930f      	str	r3, [sp, #60]	; 0x3c
 8074498:	b975      	cbnz	r5, 80744b8 <_dtoa_r+0x40>
 807449a:	2010      	movs	r0, #16
 807449c:	f001 fa20 	bl	80758e0 <malloc>
 80744a0:	4602      	mov	r2, r0
 80744a2:	6260      	str	r0, [r4, #36]	; 0x24
 80744a4:	b920      	cbnz	r0, 80744b0 <_dtoa_r+0x38>
 80744a6:	4bb2      	ldr	r3, [pc, #712]	; (8074770 <_dtoa_r+0x2f8>)
 80744a8:	21ea      	movs	r1, #234	; 0xea
 80744aa:	48b2      	ldr	r0, [pc, #712]	; (8074774 <_dtoa_r+0x2fc>)
 80744ac:	f002 faf6 	bl	8076a9c <__assert_func>
 80744b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80744b4:	6005      	str	r5, [r0, #0]
 80744b6:	60c5      	str	r5, [r0, #12]
 80744b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80744ba:	6819      	ldr	r1, [r3, #0]
 80744bc:	b151      	cbz	r1, 80744d4 <_dtoa_r+0x5c>
 80744be:	685a      	ldr	r2, [r3, #4]
 80744c0:	604a      	str	r2, [r1, #4]
 80744c2:	2301      	movs	r3, #1
 80744c4:	4093      	lsls	r3, r2
 80744c6:	608b      	str	r3, [r1, #8]
 80744c8:	4620      	mov	r0, r4
 80744ca:	f001 fa6f 	bl	80759ac <_Bfree>
 80744ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80744d0:	2200      	movs	r2, #0
 80744d2:	601a      	str	r2, [r3, #0]
 80744d4:	1e3b      	subs	r3, r7, #0
 80744d6:	bfb9      	ittee	lt
 80744d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80744dc:	9303      	strlt	r3, [sp, #12]
 80744de:	2300      	movge	r3, #0
 80744e0:	f8c8 3000 	strge.w	r3, [r8]
 80744e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80744e8:	4ba3      	ldr	r3, [pc, #652]	; (8074778 <_dtoa_r+0x300>)
 80744ea:	bfbc      	itt	lt
 80744ec:	2201      	movlt	r2, #1
 80744ee:	f8c8 2000 	strlt.w	r2, [r8]
 80744f2:	ea33 0309 	bics.w	r3, r3, r9
 80744f6:	d11b      	bne.n	8074530 <_dtoa_r+0xb8>
 80744f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80744fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80744fe:	6013      	str	r3, [r2, #0]
 8074500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8074504:	4333      	orrs	r3, r6
 8074506:	f000 857a 	beq.w	8074ffe <_dtoa_r+0xb86>
 807450a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 807450c:	b963      	cbnz	r3, 8074528 <_dtoa_r+0xb0>
 807450e:	4b9b      	ldr	r3, [pc, #620]	; (807477c <_dtoa_r+0x304>)
 8074510:	e024      	b.n	807455c <_dtoa_r+0xe4>
 8074512:	4b9b      	ldr	r3, [pc, #620]	; (8074780 <_dtoa_r+0x308>)
 8074514:	9300      	str	r3, [sp, #0]
 8074516:	3308      	adds	r3, #8
 8074518:	9a21      	ldr	r2, [sp, #132]	; 0x84
 807451a:	6013      	str	r3, [r2, #0]
 807451c:	9800      	ldr	r0, [sp, #0]
 807451e:	b015      	add	sp, #84	; 0x54
 8074520:	ecbd 8b02 	vpop	{d8}
 8074524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8074528:	4b94      	ldr	r3, [pc, #592]	; (807477c <_dtoa_r+0x304>)
 807452a:	9300      	str	r3, [sp, #0]
 807452c:	3303      	adds	r3, #3
 807452e:	e7f3      	b.n	8074518 <_dtoa_r+0xa0>
 8074530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8074534:	2200      	movs	r2, #0
 8074536:	ec51 0b17 	vmov	r0, r1, d7
 807453a:	2300      	movs	r3, #0
 807453c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8074540:	f7ec fada 	bl	8060af8 <__aeabi_dcmpeq>
 8074544:	4680      	mov	r8, r0
 8074546:	b158      	cbz	r0, 8074560 <_dtoa_r+0xe8>
 8074548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 807454a:	2301      	movs	r3, #1
 807454c:	6013      	str	r3, [r2, #0]
 807454e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8074550:	2b00      	cmp	r3, #0
 8074552:	f000 8551 	beq.w	8074ff8 <_dtoa_r+0xb80>
 8074556:	488b      	ldr	r0, [pc, #556]	; (8074784 <_dtoa_r+0x30c>)
 8074558:	6018      	str	r0, [r3, #0]
 807455a:	1e43      	subs	r3, r0, #1
 807455c:	9300      	str	r3, [sp, #0]
 807455e:	e7dd      	b.n	807451c <_dtoa_r+0xa4>
 8074560:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8074564:	aa12      	add	r2, sp, #72	; 0x48
 8074566:	a913      	add	r1, sp, #76	; 0x4c
 8074568:	4620      	mov	r0, r4
 807456a:	f001 fdc7 	bl	80760fc <__d2b>
 807456e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8074572:	4683      	mov	fp, r0
 8074574:	2d00      	cmp	r5, #0
 8074576:	d07c      	beq.n	8074672 <_dtoa_r+0x1fa>
 8074578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 807457a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 807457e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8074582:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8074586:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 807458a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 807458e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8074592:	4b7d      	ldr	r3, [pc, #500]	; (8074788 <_dtoa_r+0x310>)
 8074594:	2200      	movs	r2, #0
 8074596:	4630      	mov	r0, r6
 8074598:	4639      	mov	r1, r7
 807459a:	f7eb fe8d 	bl	80602b8 <__aeabi_dsub>
 807459e:	a36e      	add	r3, pc, #440	; (adr r3, 8074758 <_dtoa_r+0x2e0>)
 80745a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80745a4:	f7ec f840 	bl	8060628 <__aeabi_dmul>
 80745a8:	a36d      	add	r3, pc, #436	; (adr r3, 8074760 <_dtoa_r+0x2e8>)
 80745aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80745ae:	f7eb fe85 	bl	80602bc <__adddf3>
 80745b2:	4606      	mov	r6, r0
 80745b4:	4628      	mov	r0, r5
 80745b6:	460f      	mov	r7, r1
 80745b8:	f7eb ffcc 	bl	8060554 <__aeabi_i2d>
 80745bc:	a36a      	add	r3, pc, #424	; (adr r3, 8074768 <_dtoa_r+0x2f0>)
 80745be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80745c2:	f7ec f831 	bl	8060628 <__aeabi_dmul>
 80745c6:	4602      	mov	r2, r0
 80745c8:	460b      	mov	r3, r1
 80745ca:	4630      	mov	r0, r6
 80745cc:	4639      	mov	r1, r7
 80745ce:	f7eb fe75 	bl	80602bc <__adddf3>
 80745d2:	4606      	mov	r6, r0
 80745d4:	460f      	mov	r7, r1
 80745d6:	f7ec fad7 	bl	8060b88 <__aeabi_d2iz>
 80745da:	2200      	movs	r2, #0
 80745dc:	4682      	mov	sl, r0
 80745de:	2300      	movs	r3, #0
 80745e0:	4630      	mov	r0, r6
 80745e2:	4639      	mov	r1, r7
 80745e4:	f7ec fa92 	bl	8060b0c <__aeabi_dcmplt>
 80745e8:	b148      	cbz	r0, 80745fe <_dtoa_r+0x186>
 80745ea:	4650      	mov	r0, sl
 80745ec:	f7eb ffb2 	bl	8060554 <__aeabi_i2d>
 80745f0:	4632      	mov	r2, r6
 80745f2:	463b      	mov	r3, r7
 80745f4:	f7ec fa80 	bl	8060af8 <__aeabi_dcmpeq>
 80745f8:	b908      	cbnz	r0, 80745fe <_dtoa_r+0x186>
 80745fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80745fe:	f1ba 0f16 	cmp.w	sl, #22
 8074602:	d854      	bhi.n	80746ae <_dtoa_r+0x236>
 8074604:	4b61      	ldr	r3, [pc, #388]	; (807478c <_dtoa_r+0x314>)
 8074606:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 807460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 807460e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8074612:	f7ec fa7b 	bl	8060b0c <__aeabi_dcmplt>
 8074616:	2800      	cmp	r0, #0
 8074618:	d04b      	beq.n	80746b2 <_dtoa_r+0x23a>
 807461a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 807461e:	2300      	movs	r3, #0
 8074620:	930e      	str	r3, [sp, #56]	; 0x38
 8074622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8074624:	1b5d      	subs	r5, r3, r5
 8074626:	1e6b      	subs	r3, r5, #1
 8074628:	9304      	str	r3, [sp, #16]
 807462a:	bf43      	ittte	mi
 807462c:	2300      	movmi	r3, #0
 807462e:	f1c5 0801 	rsbmi	r8, r5, #1
 8074632:	9304      	strmi	r3, [sp, #16]
 8074634:	f04f 0800 	movpl.w	r8, #0
 8074638:	f1ba 0f00 	cmp.w	sl, #0
 807463c:	db3b      	blt.n	80746b6 <_dtoa_r+0x23e>
 807463e:	9b04      	ldr	r3, [sp, #16]
 8074640:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8074644:	4453      	add	r3, sl
 8074646:	9304      	str	r3, [sp, #16]
 8074648:	2300      	movs	r3, #0
 807464a:	9306      	str	r3, [sp, #24]
 807464c:	9b05      	ldr	r3, [sp, #20]
 807464e:	2b09      	cmp	r3, #9
 8074650:	d869      	bhi.n	8074726 <_dtoa_r+0x2ae>
 8074652:	2b05      	cmp	r3, #5
 8074654:	bfc4      	itt	gt
 8074656:	3b04      	subgt	r3, #4
 8074658:	9305      	strgt	r3, [sp, #20]
 807465a:	9b05      	ldr	r3, [sp, #20]
 807465c:	f1a3 0302 	sub.w	r3, r3, #2
 8074660:	bfcc      	ite	gt
 8074662:	2500      	movgt	r5, #0
 8074664:	2501      	movle	r5, #1
 8074666:	2b03      	cmp	r3, #3
 8074668:	d869      	bhi.n	807473e <_dtoa_r+0x2c6>
 807466a:	e8df f003 	tbb	[pc, r3]
 807466e:	4e2c      	.short	0x4e2c
 8074670:	5a4c      	.short	0x5a4c
 8074672:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8074676:	441d      	add	r5, r3
 8074678:	f205 4332 	addw	r3, r5, #1074	; 0x432
 807467c:	2b20      	cmp	r3, #32
 807467e:	bfc1      	itttt	gt
 8074680:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8074684:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8074688:	fa09 f303 	lslgt.w	r3, r9, r3
 807468c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8074690:	bfda      	itte	le
 8074692:	f1c3 0320 	rsble	r3, r3, #32
 8074696:	fa06 f003 	lslle.w	r0, r6, r3
 807469a:	4318      	orrgt	r0, r3
 807469c:	f7eb ff4a 	bl	8060534 <__aeabi_ui2d>
 80746a0:	2301      	movs	r3, #1
 80746a2:	4606      	mov	r6, r0
 80746a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80746a8:	3d01      	subs	r5, #1
 80746aa:	9310      	str	r3, [sp, #64]	; 0x40
 80746ac:	e771      	b.n	8074592 <_dtoa_r+0x11a>
 80746ae:	2301      	movs	r3, #1
 80746b0:	e7b6      	b.n	8074620 <_dtoa_r+0x1a8>
 80746b2:	900e      	str	r0, [sp, #56]	; 0x38
 80746b4:	e7b5      	b.n	8074622 <_dtoa_r+0x1aa>
 80746b6:	f1ca 0300 	rsb	r3, sl, #0
 80746ba:	9306      	str	r3, [sp, #24]
 80746bc:	2300      	movs	r3, #0
 80746be:	eba8 080a 	sub.w	r8, r8, sl
 80746c2:	930d      	str	r3, [sp, #52]	; 0x34
 80746c4:	e7c2      	b.n	807464c <_dtoa_r+0x1d4>
 80746c6:	2300      	movs	r3, #0
 80746c8:	9308      	str	r3, [sp, #32]
 80746ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80746cc:	2b00      	cmp	r3, #0
 80746ce:	dc39      	bgt.n	8074744 <_dtoa_r+0x2cc>
 80746d0:	f04f 0901 	mov.w	r9, #1
 80746d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80746d8:	464b      	mov	r3, r9
 80746da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80746de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80746e0:	2200      	movs	r2, #0
 80746e2:	6042      	str	r2, [r0, #4]
 80746e4:	2204      	movs	r2, #4
 80746e6:	f102 0614 	add.w	r6, r2, #20
 80746ea:	429e      	cmp	r6, r3
 80746ec:	6841      	ldr	r1, [r0, #4]
 80746ee:	d92f      	bls.n	8074750 <_dtoa_r+0x2d8>
 80746f0:	4620      	mov	r0, r4
 80746f2:	f001 f91b 	bl	807592c <_Balloc>
 80746f6:	9000      	str	r0, [sp, #0]
 80746f8:	2800      	cmp	r0, #0
 80746fa:	d14b      	bne.n	8074794 <_dtoa_r+0x31c>
 80746fc:	4b24      	ldr	r3, [pc, #144]	; (8074790 <_dtoa_r+0x318>)
 80746fe:	4602      	mov	r2, r0
 8074700:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8074704:	e6d1      	b.n	80744aa <_dtoa_r+0x32>
 8074706:	2301      	movs	r3, #1
 8074708:	e7de      	b.n	80746c8 <_dtoa_r+0x250>
 807470a:	2300      	movs	r3, #0
 807470c:	9308      	str	r3, [sp, #32]
 807470e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8074710:	eb0a 0903 	add.w	r9, sl, r3
 8074714:	f109 0301 	add.w	r3, r9, #1
 8074718:	2b01      	cmp	r3, #1
 807471a:	9301      	str	r3, [sp, #4]
 807471c:	bfb8      	it	lt
 807471e:	2301      	movlt	r3, #1
 8074720:	e7dd      	b.n	80746de <_dtoa_r+0x266>
 8074722:	2301      	movs	r3, #1
 8074724:	e7f2      	b.n	807470c <_dtoa_r+0x294>
 8074726:	2501      	movs	r5, #1
 8074728:	2300      	movs	r3, #0
 807472a:	9305      	str	r3, [sp, #20]
 807472c:	9508      	str	r5, [sp, #32]
 807472e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8074732:	2200      	movs	r2, #0
 8074734:	f8cd 9004 	str.w	r9, [sp, #4]
 8074738:	2312      	movs	r3, #18
 807473a:	9209      	str	r2, [sp, #36]	; 0x24
 807473c:	e7cf      	b.n	80746de <_dtoa_r+0x266>
 807473e:	2301      	movs	r3, #1
 8074740:	9308      	str	r3, [sp, #32]
 8074742:	e7f4      	b.n	807472e <_dtoa_r+0x2b6>
 8074744:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8074748:	f8cd 9004 	str.w	r9, [sp, #4]
 807474c:	464b      	mov	r3, r9
 807474e:	e7c6      	b.n	80746de <_dtoa_r+0x266>
 8074750:	3101      	adds	r1, #1
 8074752:	6041      	str	r1, [r0, #4]
 8074754:	0052      	lsls	r2, r2, #1
 8074756:	e7c6      	b.n	80746e6 <_dtoa_r+0x26e>
 8074758:	636f4361 	.word	0x636f4361
 807475c:	3fd287a7 	.word	0x3fd287a7
 8074760:	8b60c8b3 	.word	0x8b60c8b3
 8074764:	3fc68a28 	.word	0x3fc68a28
 8074768:	509f79fb 	.word	0x509f79fb
 807476c:	3fd34413 	.word	0x3fd34413
 8074770:	0807775e 	.word	0x0807775e
 8074774:	08077775 	.word	0x08077775
 8074778:	7ff00000 	.word	0x7ff00000
 807477c:	0807775a 	.word	0x0807775a
 8074780:	08077751 	.word	0x08077751
 8074784:	080775d1 	.word	0x080775d1
 8074788:	3ff80000 	.word	0x3ff80000
 807478c:	080778f0 	.word	0x080778f0
 8074790:	080777d4 	.word	0x080777d4
 8074794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8074796:	9a00      	ldr	r2, [sp, #0]
 8074798:	601a      	str	r2, [r3, #0]
 807479a:	9b01      	ldr	r3, [sp, #4]
 807479c:	2b0e      	cmp	r3, #14
 807479e:	f200 80ad 	bhi.w	80748fc <_dtoa_r+0x484>
 80747a2:	2d00      	cmp	r5, #0
 80747a4:	f000 80aa 	beq.w	80748fc <_dtoa_r+0x484>
 80747a8:	f1ba 0f00 	cmp.w	sl, #0
 80747ac:	dd36      	ble.n	807481c <_dtoa_r+0x3a4>
 80747ae:	4ac3      	ldr	r2, [pc, #780]	; (8074abc <_dtoa_r+0x644>)
 80747b0:	f00a 030f 	and.w	r3, sl, #15
 80747b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80747b8:	ed93 7b00 	vldr	d7, [r3]
 80747bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80747c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80747c4:	eeb0 8a47 	vmov.f32	s16, s14
 80747c8:	eef0 8a67 	vmov.f32	s17, s15
 80747cc:	d016      	beq.n	80747fc <_dtoa_r+0x384>
 80747ce:	4bbc      	ldr	r3, [pc, #752]	; (8074ac0 <_dtoa_r+0x648>)
 80747d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80747d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80747d8:	f7ec f850 	bl	806087c <__aeabi_ddiv>
 80747dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80747e0:	f007 070f 	and.w	r7, r7, #15
 80747e4:	2503      	movs	r5, #3
 80747e6:	4eb6      	ldr	r6, [pc, #728]	; (8074ac0 <_dtoa_r+0x648>)
 80747e8:	b957      	cbnz	r7, 8074800 <_dtoa_r+0x388>
 80747ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80747ee:	ec53 2b18 	vmov	r2, r3, d8
 80747f2:	f7ec f843 	bl	806087c <__aeabi_ddiv>
 80747f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80747fa:	e029      	b.n	8074850 <_dtoa_r+0x3d8>
 80747fc:	2502      	movs	r5, #2
 80747fe:	e7f2      	b.n	80747e6 <_dtoa_r+0x36e>
 8074800:	07f9      	lsls	r1, r7, #31
 8074802:	d508      	bpl.n	8074816 <_dtoa_r+0x39e>
 8074804:	ec51 0b18 	vmov	r0, r1, d8
 8074808:	e9d6 2300 	ldrd	r2, r3, [r6]
 807480c:	f7eb ff0c 	bl	8060628 <__aeabi_dmul>
 8074810:	ec41 0b18 	vmov	d8, r0, r1
 8074814:	3501      	adds	r5, #1
 8074816:	107f      	asrs	r7, r7, #1
 8074818:	3608      	adds	r6, #8
 807481a:	e7e5      	b.n	80747e8 <_dtoa_r+0x370>
 807481c:	f000 80a6 	beq.w	807496c <_dtoa_r+0x4f4>
 8074820:	f1ca 0600 	rsb	r6, sl, #0
 8074824:	4ba5      	ldr	r3, [pc, #660]	; (8074abc <_dtoa_r+0x644>)
 8074826:	4fa6      	ldr	r7, [pc, #664]	; (8074ac0 <_dtoa_r+0x648>)
 8074828:	f006 020f 	and.w	r2, r6, #15
 807482c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8074830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8074834:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8074838:	f7eb fef6 	bl	8060628 <__aeabi_dmul>
 807483c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8074840:	1136      	asrs	r6, r6, #4
 8074842:	2300      	movs	r3, #0
 8074844:	2502      	movs	r5, #2
 8074846:	2e00      	cmp	r6, #0
 8074848:	f040 8085 	bne.w	8074956 <_dtoa_r+0x4de>
 807484c:	2b00      	cmp	r3, #0
 807484e:	d1d2      	bne.n	80747f6 <_dtoa_r+0x37e>
 8074850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8074852:	2b00      	cmp	r3, #0
 8074854:	f000 808c 	beq.w	8074970 <_dtoa_r+0x4f8>
 8074858:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 807485c:	4b99      	ldr	r3, [pc, #612]	; (8074ac4 <_dtoa_r+0x64c>)
 807485e:	2200      	movs	r2, #0
 8074860:	4630      	mov	r0, r6
 8074862:	4639      	mov	r1, r7
 8074864:	f7ec f952 	bl	8060b0c <__aeabi_dcmplt>
 8074868:	2800      	cmp	r0, #0
 807486a:	f000 8081 	beq.w	8074970 <_dtoa_r+0x4f8>
 807486e:	9b01      	ldr	r3, [sp, #4]
 8074870:	2b00      	cmp	r3, #0
 8074872:	d07d      	beq.n	8074970 <_dtoa_r+0x4f8>
 8074874:	f1b9 0f00 	cmp.w	r9, #0
 8074878:	dd3c      	ble.n	80748f4 <_dtoa_r+0x47c>
 807487a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 807487e:	9307      	str	r3, [sp, #28]
 8074880:	2200      	movs	r2, #0
 8074882:	4b91      	ldr	r3, [pc, #580]	; (8074ac8 <_dtoa_r+0x650>)
 8074884:	4630      	mov	r0, r6
 8074886:	4639      	mov	r1, r7
 8074888:	f7eb fece 	bl	8060628 <__aeabi_dmul>
 807488c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8074890:	3501      	adds	r5, #1
 8074892:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8074896:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 807489a:	4628      	mov	r0, r5
 807489c:	f7eb fe5a 	bl	8060554 <__aeabi_i2d>
 80748a0:	4632      	mov	r2, r6
 80748a2:	463b      	mov	r3, r7
 80748a4:	f7eb fec0 	bl	8060628 <__aeabi_dmul>
 80748a8:	4b88      	ldr	r3, [pc, #544]	; (8074acc <_dtoa_r+0x654>)
 80748aa:	2200      	movs	r2, #0
 80748ac:	f7eb fd06 	bl	80602bc <__adddf3>
 80748b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80748b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80748b8:	9303      	str	r3, [sp, #12]
 80748ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80748bc:	2b00      	cmp	r3, #0
 80748be:	d15c      	bne.n	807497a <_dtoa_r+0x502>
 80748c0:	4b83      	ldr	r3, [pc, #524]	; (8074ad0 <_dtoa_r+0x658>)
 80748c2:	2200      	movs	r2, #0
 80748c4:	4630      	mov	r0, r6
 80748c6:	4639      	mov	r1, r7
 80748c8:	f7eb fcf6 	bl	80602b8 <__aeabi_dsub>
 80748cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80748d0:	4606      	mov	r6, r0
 80748d2:	460f      	mov	r7, r1
 80748d4:	f7ec f938 	bl	8060b48 <__aeabi_dcmpgt>
 80748d8:	2800      	cmp	r0, #0
 80748da:	f040 8296 	bne.w	8074e0a <_dtoa_r+0x992>
 80748de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80748e2:	4630      	mov	r0, r6
 80748e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80748e8:	4639      	mov	r1, r7
 80748ea:	f7ec f90f 	bl	8060b0c <__aeabi_dcmplt>
 80748ee:	2800      	cmp	r0, #0
 80748f0:	f040 8288 	bne.w	8074e04 <_dtoa_r+0x98c>
 80748f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80748f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80748fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80748fe:	2b00      	cmp	r3, #0
 8074900:	f2c0 8158 	blt.w	8074bb4 <_dtoa_r+0x73c>
 8074904:	f1ba 0f0e 	cmp.w	sl, #14
 8074908:	f300 8154 	bgt.w	8074bb4 <_dtoa_r+0x73c>
 807490c:	4b6b      	ldr	r3, [pc, #428]	; (8074abc <_dtoa_r+0x644>)
 807490e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8074912:	e9d3 8900 	ldrd	r8, r9, [r3]
 8074916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8074918:	2b00      	cmp	r3, #0
 807491a:	f280 80e3 	bge.w	8074ae4 <_dtoa_r+0x66c>
 807491e:	9b01      	ldr	r3, [sp, #4]
 8074920:	2b00      	cmp	r3, #0
 8074922:	f300 80df 	bgt.w	8074ae4 <_dtoa_r+0x66c>
 8074926:	f040 826d 	bne.w	8074e04 <_dtoa_r+0x98c>
 807492a:	4b69      	ldr	r3, [pc, #420]	; (8074ad0 <_dtoa_r+0x658>)
 807492c:	2200      	movs	r2, #0
 807492e:	4640      	mov	r0, r8
 8074930:	4649      	mov	r1, r9
 8074932:	f7eb fe79 	bl	8060628 <__aeabi_dmul>
 8074936:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 807493a:	f7ec f8fb 	bl	8060b34 <__aeabi_dcmpge>
 807493e:	9e01      	ldr	r6, [sp, #4]
 8074940:	4637      	mov	r7, r6
 8074942:	2800      	cmp	r0, #0
 8074944:	f040 8243 	bne.w	8074dce <_dtoa_r+0x956>
 8074948:	9d00      	ldr	r5, [sp, #0]
 807494a:	2331      	movs	r3, #49	; 0x31
 807494c:	f805 3b01 	strb.w	r3, [r5], #1
 8074950:	f10a 0a01 	add.w	sl, sl, #1
 8074954:	e23f      	b.n	8074dd6 <_dtoa_r+0x95e>
 8074956:	07f2      	lsls	r2, r6, #31
 8074958:	d505      	bpl.n	8074966 <_dtoa_r+0x4ee>
 807495a:	e9d7 2300 	ldrd	r2, r3, [r7]
 807495e:	f7eb fe63 	bl	8060628 <__aeabi_dmul>
 8074962:	3501      	adds	r5, #1
 8074964:	2301      	movs	r3, #1
 8074966:	1076      	asrs	r6, r6, #1
 8074968:	3708      	adds	r7, #8
 807496a:	e76c      	b.n	8074846 <_dtoa_r+0x3ce>
 807496c:	2502      	movs	r5, #2
 807496e:	e76f      	b.n	8074850 <_dtoa_r+0x3d8>
 8074970:	9b01      	ldr	r3, [sp, #4]
 8074972:	f8cd a01c 	str.w	sl, [sp, #28]
 8074976:	930c      	str	r3, [sp, #48]	; 0x30
 8074978:	e78d      	b.n	8074896 <_dtoa_r+0x41e>
 807497a:	9900      	ldr	r1, [sp, #0]
 807497c:	980c      	ldr	r0, [sp, #48]	; 0x30
 807497e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8074980:	4b4e      	ldr	r3, [pc, #312]	; (8074abc <_dtoa_r+0x644>)
 8074982:	ed9d 7b02 	vldr	d7, [sp, #8]
 8074986:	4401      	add	r1, r0
 8074988:	9102      	str	r1, [sp, #8]
 807498a:	9908      	ldr	r1, [sp, #32]
 807498c:	eeb0 8a47 	vmov.f32	s16, s14
 8074990:	eef0 8a67 	vmov.f32	s17, s15
 8074994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8074998:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 807499c:	2900      	cmp	r1, #0
 807499e:	d045      	beq.n	8074a2c <_dtoa_r+0x5b4>
 80749a0:	494c      	ldr	r1, [pc, #304]	; (8074ad4 <_dtoa_r+0x65c>)
 80749a2:	2000      	movs	r0, #0
 80749a4:	f7eb ff6a 	bl	806087c <__aeabi_ddiv>
 80749a8:	ec53 2b18 	vmov	r2, r3, d8
 80749ac:	f7eb fc84 	bl	80602b8 <__aeabi_dsub>
 80749b0:	9d00      	ldr	r5, [sp, #0]
 80749b2:	ec41 0b18 	vmov	d8, r0, r1
 80749b6:	4639      	mov	r1, r7
 80749b8:	4630      	mov	r0, r6
 80749ba:	f7ec f8e5 	bl	8060b88 <__aeabi_d2iz>
 80749be:	900c      	str	r0, [sp, #48]	; 0x30
 80749c0:	f7eb fdc8 	bl	8060554 <__aeabi_i2d>
 80749c4:	4602      	mov	r2, r0
 80749c6:	460b      	mov	r3, r1
 80749c8:	4630      	mov	r0, r6
 80749ca:	4639      	mov	r1, r7
 80749cc:	f7eb fc74 	bl	80602b8 <__aeabi_dsub>
 80749d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80749d2:	3330      	adds	r3, #48	; 0x30
 80749d4:	f805 3b01 	strb.w	r3, [r5], #1
 80749d8:	ec53 2b18 	vmov	r2, r3, d8
 80749dc:	4606      	mov	r6, r0
 80749de:	460f      	mov	r7, r1
 80749e0:	f7ec f894 	bl	8060b0c <__aeabi_dcmplt>
 80749e4:	2800      	cmp	r0, #0
 80749e6:	d165      	bne.n	8074ab4 <_dtoa_r+0x63c>
 80749e8:	4632      	mov	r2, r6
 80749ea:	463b      	mov	r3, r7
 80749ec:	4935      	ldr	r1, [pc, #212]	; (8074ac4 <_dtoa_r+0x64c>)
 80749ee:	2000      	movs	r0, #0
 80749f0:	f7eb fc62 	bl	80602b8 <__aeabi_dsub>
 80749f4:	ec53 2b18 	vmov	r2, r3, d8
 80749f8:	f7ec f888 	bl	8060b0c <__aeabi_dcmplt>
 80749fc:	2800      	cmp	r0, #0
 80749fe:	f040 80b9 	bne.w	8074b74 <_dtoa_r+0x6fc>
 8074a02:	9b02      	ldr	r3, [sp, #8]
 8074a04:	429d      	cmp	r5, r3
 8074a06:	f43f af75 	beq.w	80748f4 <_dtoa_r+0x47c>
 8074a0a:	4b2f      	ldr	r3, [pc, #188]	; (8074ac8 <_dtoa_r+0x650>)
 8074a0c:	ec51 0b18 	vmov	r0, r1, d8
 8074a10:	2200      	movs	r2, #0
 8074a12:	f7eb fe09 	bl	8060628 <__aeabi_dmul>
 8074a16:	4b2c      	ldr	r3, [pc, #176]	; (8074ac8 <_dtoa_r+0x650>)
 8074a18:	ec41 0b18 	vmov	d8, r0, r1
 8074a1c:	2200      	movs	r2, #0
 8074a1e:	4630      	mov	r0, r6
 8074a20:	4639      	mov	r1, r7
 8074a22:	f7eb fe01 	bl	8060628 <__aeabi_dmul>
 8074a26:	4606      	mov	r6, r0
 8074a28:	460f      	mov	r7, r1
 8074a2a:	e7c4      	b.n	80749b6 <_dtoa_r+0x53e>
 8074a2c:	ec51 0b17 	vmov	r0, r1, d7
 8074a30:	f7eb fdfa 	bl	8060628 <__aeabi_dmul>
 8074a34:	9b02      	ldr	r3, [sp, #8]
 8074a36:	9d00      	ldr	r5, [sp, #0]
 8074a38:	930c      	str	r3, [sp, #48]	; 0x30
 8074a3a:	ec41 0b18 	vmov	d8, r0, r1
 8074a3e:	4639      	mov	r1, r7
 8074a40:	4630      	mov	r0, r6
 8074a42:	f7ec f8a1 	bl	8060b88 <__aeabi_d2iz>
 8074a46:	9011      	str	r0, [sp, #68]	; 0x44
 8074a48:	f7eb fd84 	bl	8060554 <__aeabi_i2d>
 8074a4c:	4602      	mov	r2, r0
 8074a4e:	460b      	mov	r3, r1
 8074a50:	4630      	mov	r0, r6
 8074a52:	4639      	mov	r1, r7
 8074a54:	f7eb fc30 	bl	80602b8 <__aeabi_dsub>
 8074a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8074a5a:	3330      	adds	r3, #48	; 0x30
 8074a5c:	f805 3b01 	strb.w	r3, [r5], #1
 8074a60:	9b02      	ldr	r3, [sp, #8]
 8074a62:	429d      	cmp	r5, r3
 8074a64:	4606      	mov	r6, r0
 8074a66:	460f      	mov	r7, r1
 8074a68:	f04f 0200 	mov.w	r2, #0
 8074a6c:	d134      	bne.n	8074ad8 <_dtoa_r+0x660>
 8074a6e:	4b19      	ldr	r3, [pc, #100]	; (8074ad4 <_dtoa_r+0x65c>)
 8074a70:	ec51 0b18 	vmov	r0, r1, d8
 8074a74:	f7eb fc22 	bl	80602bc <__adddf3>
 8074a78:	4602      	mov	r2, r0
 8074a7a:	460b      	mov	r3, r1
 8074a7c:	4630      	mov	r0, r6
 8074a7e:	4639      	mov	r1, r7
 8074a80:	f7ec f862 	bl	8060b48 <__aeabi_dcmpgt>
 8074a84:	2800      	cmp	r0, #0
 8074a86:	d175      	bne.n	8074b74 <_dtoa_r+0x6fc>
 8074a88:	ec53 2b18 	vmov	r2, r3, d8
 8074a8c:	4911      	ldr	r1, [pc, #68]	; (8074ad4 <_dtoa_r+0x65c>)
 8074a8e:	2000      	movs	r0, #0
 8074a90:	f7eb fc12 	bl	80602b8 <__aeabi_dsub>
 8074a94:	4602      	mov	r2, r0
 8074a96:	460b      	mov	r3, r1
 8074a98:	4630      	mov	r0, r6
 8074a9a:	4639      	mov	r1, r7
 8074a9c:	f7ec f836 	bl	8060b0c <__aeabi_dcmplt>
 8074aa0:	2800      	cmp	r0, #0
 8074aa2:	f43f af27 	beq.w	80748f4 <_dtoa_r+0x47c>
 8074aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8074aa8:	1e6b      	subs	r3, r5, #1
 8074aaa:	930c      	str	r3, [sp, #48]	; 0x30
 8074aac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8074ab0:	2b30      	cmp	r3, #48	; 0x30
 8074ab2:	d0f8      	beq.n	8074aa6 <_dtoa_r+0x62e>
 8074ab4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8074ab8:	e04a      	b.n	8074b50 <_dtoa_r+0x6d8>
 8074aba:	bf00      	nop
 8074abc:	080778f0 	.word	0x080778f0
 8074ac0:	080778c8 	.word	0x080778c8
 8074ac4:	3ff00000 	.word	0x3ff00000
 8074ac8:	40240000 	.word	0x40240000
 8074acc:	401c0000 	.word	0x401c0000
 8074ad0:	40140000 	.word	0x40140000
 8074ad4:	3fe00000 	.word	0x3fe00000
 8074ad8:	4baf      	ldr	r3, [pc, #700]	; (8074d98 <_dtoa_r+0x920>)
 8074ada:	f7eb fda5 	bl	8060628 <__aeabi_dmul>
 8074ade:	4606      	mov	r6, r0
 8074ae0:	460f      	mov	r7, r1
 8074ae2:	e7ac      	b.n	8074a3e <_dtoa_r+0x5c6>
 8074ae4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8074ae8:	9d00      	ldr	r5, [sp, #0]
 8074aea:	4642      	mov	r2, r8
 8074aec:	464b      	mov	r3, r9
 8074aee:	4630      	mov	r0, r6
 8074af0:	4639      	mov	r1, r7
 8074af2:	f7eb fec3 	bl	806087c <__aeabi_ddiv>
 8074af6:	f7ec f847 	bl	8060b88 <__aeabi_d2iz>
 8074afa:	9002      	str	r0, [sp, #8]
 8074afc:	f7eb fd2a 	bl	8060554 <__aeabi_i2d>
 8074b00:	4642      	mov	r2, r8
 8074b02:	464b      	mov	r3, r9
 8074b04:	f7eb fd90 	bl	8060628 <__aeabi_dmul>
 8074b08:	4602      	mov	r2, r0
 8074b0a:	460b      	mov	r3, r1
 8074b0c:	4630      	mov	r0, r6
 8074b0e:	4639      	mov	r1, r7
 8074b10:	f7eb fbd2 	bl	80602b8 <__aeabi_dsub>
 8074b14:	9e02      	ldr	r6, [sp, #8]
 8074b16:	9f01      	ldr	r7, [sp, #4]
 8074b18:	3630      	adds	r6, #48	; 0x30
 8074b1a:	f805 6b01 	strb.w	r6, [r5], #1
 8074b1e:	9e00      	ldr	r6, [sp, #0]
 8074b20:	1bae      	subs	r6, r5, r6
 8074b22:	42b7      	cmp	r7, r6
 8074b24:	4602      	mov	r2, r0
 8074b26:	460b      	mov	r3, r1
 8074b28:	d137      	bne.n	8074b9a <_dtoa_r+0x722>
 8074b2a:	f7eb fbc7 	bl	80602bc <__adddf3>
 8074b2e:	4642      	mov	r2, r8
 8074b30:	464b      	mov	r3, r9
 8074b32:	4606      	mov	r6, r0
 8074b34:	460f      	mov	r7, r1
 8074b36:	f7ec f807 	bl	8060b48 <__aeabi_dcmpgt>
 8074b3a:	b9c8      	cbnz	r0, 8074b70 <_dtoa_r+0x6f8>
 8074b3c:	4642      	mov	r2, r8
 8074b3e:	464b      	mov	r3, r9
 8074b40:	4630      	mov	r0, r6
 8074b42:	4639      	mov	r1, r7
 8074b44:	f7eb ffd8 	bl	8060af8 <__aeabi_dcmpeq>
 8074b48:	b110      	cbz	r0, 8074b50 <_dtoa_r+0x6d8>
 8074b4a:	9b02      	ldr	r3, [sp, #8]
 8074b4c:	07d9      	lsls	r1, r3, #31
 8074b4e:	d40f      	bmi.n	8074b70 <_dtoa_r+0x6f8>
 8074b50:	4620      	mov	r0, r4
 8074b52:	4659      	mov	r1, fp
 8074b54:	f000 ff2a 	bl	80759ac <_Bfree>
 8074b58:	2300      	movs	r3, #0
 8074b5a:	702b      	strb	r3, [r5, #0]
 8074b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8074b5e:	f10a 0001 	add.w	r0, sl, #1
 8074b62:	6018      	str	r0, [r3, #0]
 8074b64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8074b66:	2b00      	cmp	r3, #0
 8074b68:	f43f acd8 	beq.w	807451c <_dtoa_r+0xa4>
 8074b6c:	601d      	str	r5, [r3, #0]
 8074b6e:	e4d5      	b.n	807451c <_dtoa_r+0xa4>
 8074b70:	f8cd a01c 	str.w	sl, [sp, #28]
 8074b74:	462b      	mov	r3, r5
 8074b76:	461d      	mov	r5, r3
 8074b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8074b7c:	2a39      	cmp	r2, #57	; 0x39
 8074b7e:	d108      	bne.n	8074b92 <_dtoa_r+0x71a>
 8074b80:	9a00      	ldr	r2, [sp, #0]
 8074b82:	429a      	cmp	r2, r3
 8074b84:	d1f7      	bne.n	8074b76 <_dtoa_r+0x6fe>
 8074b86:	9a07      	ldr	r2, [sp, #28]
 8074b88:	9900      	ldr	r1, [sp, #0]
 8074b8a:	3201      	adds	r2, #1
 8074b8c:	9207      	str	r2, [sp, #28]
 8074b8e:	2230      	movs	r2, #48	; 0x30
 8074b90:	700a      	strb	r2, [r1, #0]
 8074b92:	781a      	ldrb	r2, [r3, #0]
 8074b94:	3201      	adds	r2, #1
 8074b96:	701a      	strb	r2, [r3, #0]
 8074b98:	e78c      	b.n	8074ab4 <_dtoa_r+0x63c>
 8074b9a:	4b7f      	ldr	r3, [pc, #508]	; (8074d98 <_dtoa_r+0x920>)
 8074b9c:	2200      	movs	r2, #0
 8074b9e:	f7eb fd43 	bl	8060628 <__aeabi_dmul>
 8074ba2:	2200      	movs	r2, #0
 8074ba4:	2300      	movs	r3, #0
 8074ba6:	4606      	mov	r6, r0
 8074ba8:	460f      	mov	r7, r1
 8074baa:	f7eb ffa5 	bl	8060af8 <__aeabi_dcmpeq>
 8074bae:	2800      	cmp	r0, #0
 8074bb0:	d09b      	beq.n	8074aea <_dtoa_r+0x672>
 8074bb2:	e7cd      	b.n	8074b50 <_dtoa_r+0x6d8>
 8074bb4:	9a08      	ldr	r2, [sp, #32]
 8074bb6:	2a00      	cmp	r2, #0
 8074bb8:	f000 80c4 	beq.w	8074d44 <_dtoa_r+0x8cc>
 8074bbc:	9a05      	ldr	r2, [sp, #20]
 8074bbe:	2a01      	cmp	r2, #1
 8074bc0:	f300 80a8 	bgt.w	8074d14 <_dtoa_r+0x89c>
 8074bc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8074bc6:	2a00      	cmp	r2, #0
 8074bc8:	f000 80a0 	beq.w	8074d0c <_dtoa_r+0x894>
 8074bcc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8074bd0:	9e06      	ldr	r6, [sp, #24]
 8074bd2:	4645      	mov	r5, r8
 8074bd4:	9a04      	ldr	r2, [sp, #16]
 8074bd6:	2101      	movs	r1, #1
 8074bd8:	441a      	add	r2, r3
 8074bda:	4620      	mov	r0, r4
 8074bdc:	4498      	add	r8, r3
 8074bde:	9204      	str	r2, [sp, #16]
 8074be0:	f000 ffea 	bl	8075bb8 <__i2b>
 8074be4:	4607      	mov	r7, r0
 8074be6:	2d00      	cmp	r5, #0
 8074be8:	dd0b      	ble.n	8074c02 <_dtoa_r+0x78a>
 8074bea:	9b04      	ldr	r3, [sp, #16]
 8074bec:	2b00      	cmp	r3, #0
 8074bee:	dd08      	ble.n	8074c02 <_dtoa_r+0x78a>
 8074bf0:	42ab      	cmp	r3, r5
 8074bf2:	9a04      	ldr	r2, [sp, #16]
 8074bf4:	bfa8      	it	ge
 8074bf6:	462b      	movge	r3, r5
 8074bf8:	eba8 0803 	sub.w	r8, r8, r3
 8074bfc:	1aed      	subs	r5, r5, r3
 8074bfe:	1ad3      	subs	r3, r2, r3
 8074c00:	9304      	str	r3, [sp, #16]
 8074c02:	9b06      	ldr	r3, [sp, #24]
 8074c04:	b1fb      	cbz	r3, 8074c46 <_dtoa_r+0x7ce>
 8074c06:	9b08      	ldr	r3, [sp, #32]
 8074c08:	2b00      	cmp	r3, #0
 8074c0a:	f000 809f 	beq.w	8074d4c <_dtoa_r+0x8d4>
 8074c0e:	2e00      	cmp	r6, #0
 8074c10:	dd11      	ble.n	8074c36 <_dtoa_r+0x7be>
 8074c12:	4639      	mov	r1, r7
 8074c14:	4632      	mov	r2, r6
 8074c16:	4620      	mov	r0, r4
 8074c18:	f001 f88a 	bl	8075d30 <__pow5mult>
 8074c1c:	465a      	mov	r2, fp
 8074c1e:	4601      	mov	r1, r0
 8074c20:	4607      	mov	r7, r0
 8074c22:	4620      	mov	r0, r4
 8074c24:	f000 ffde 	bl	8075be4 <__multiply>
 8074c28:	4659      	mov	r1, fp
 8074c2a:	9007      	str	r0, [sp, #28]
 8074c2c:	4620      	mov	r0, r4
 8074c2e:	f000 febd 	bl	80759ac <_Bfree>
 8074c32:	9b07      	ldr	r3, [sp, #28]
 8074c34:	469b      	mov	fp, r3
 8074c36:	9b06      	ldr	r3, [sp, #24]
 8074c38:	1b9a      	subs	r2, r3, r6
 8074c3a:	d004      	beq.n	8074c46 <_dtoa_r+0x7ce>
 8074c3c:	4659      	mov	r1, fp
 8074c3e:	4620      	mov	r0, r4
 8074c40:	f001 f876 	bl	8075d30 <__pow5mult>
 8074c44:	4683      	mov	fp, r0
 8074c46:	2101      	movs	r1, #1
 8074c48:	4620      	mov	r0, r4
 8074c4a:	f000 ffb5 	bl	8075bb8 <__i2b>
 8074c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8074c50:	2b00      	cmp	r3, #0
 8074c52:	4606      	mov	r6, r0
 8074c54:	dd7c      	ble.n	8074d50 <_dtoa_r+0x8d8>
 8074c56:	461a      	mov	r2, r3
 8074c58:	4601      	mov	r1, r0
 8074c5a:	4620      	mov	r0, r4
 8074c5c:	f001 f868 	bl	8075d30 <__pow5mult>
 8074c60:	9b05      	ldr	r3, [sp, #20]
 8074c62:	2b01      	cmp	r3, #1
 8074c64:	4606      	mov	r6, r0
 8074c66:	dd76      	ble.n	8074d56 <_dtoa_r+0x8de>
 8074c68:	2300      	movs	r3, #0
 8074c6a:	9306      	str	r3, [sp, #24]
 8074c6c:	6933      	ldr	r3, [r6, #16]
 8074c6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8074c72:	6918      	ldr	r0, [r3, #16]
 8074c74:	f000 ff50 	bl	8075b18 <__hi0bits>
 8074c78:	f1c0 0020 	rsb	r0, r0, #32
 8074c7c:	9b04      	ldr	r3, [sp, #16]
 8074c7e:	4418      	add	r0, r3
 8074c80:	f010 001f 	ands.w	r0, r0, #31
 8074c84:	f000 8086 	beq.w	8074d94 <_dtoa_r+0x91c>
 8074c88:	f1c0 0320 	rsb	r3, r0, #32
 8074c8c:	2b04      	cmp	r3, #4
 8074c8e:	dd7f      	ble.n	8074d90 <_dtoa_r+0x918>
 8074c90:	f1c0 001c 	rsb	r0, r0, #28
 8074c94:	9b04      	ldr	r3, [sp, #16]
 8074c96:	4403      	add	r3, r0
 8074c98:	4480      	add	r8, r0
 8074c9a:	4405      	add	r5, r0
 8074c9c:	9304      	str	r3, [sp, #16]
 8074c9e:	f1b8 0f00 	cmp.w	r8, #0
 8074ca2:	dd05      	ble.n	8074cb0 <_dtoa_r+0x838>
 8074ca4:	4659      	mov	r1, fp
 8074ca6:	4642      	mov	r2, r8
 8074ca8:	4620      	mov	r0, r4
 8074caa:	f001 f89b 	bl	8075de4 <__lshift>
 8074cae:	4683      	mov	fp, r0
 8074cb0:	9b04      	ldr	r3, [sp, #16]
 8074cb2:	2b00      	cmp	r3, #0
 8074cb4:	dd05      	ble.n	8074cc2 <_dtoa_r+0x84a>
 8074cb6:	4631      	mov	r1, r6
 8074cb8:	461a      	mov	r2, r3
 8074cba:	4620      	mov	r0, r4
 8074cbc:	f001 f892 	bl	8075de4 <__lshift>
 8074cc0:	4606      	mov	r6, r0
 8074cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8074cc4:	2b00      	cmp	r3, #0
 8074cc6:	d069      	beq.n	8074d9c <_dtoa_r+0x924>
 8074cc8:	4631      	mov	r1, r6
 8074cca:	4658      	mov	r0, fp
 8074ccc:	f001 f8f6 	bl	8075ebc <__mcmp>
 8074cd0:	2800      	cmp	r0, #0
 8074cd2:	da63      	bge.n	8074d9c <_dtoa_r+0x924>
 8074cd4:	2300      	movs	r3, #0
 8074cd6:	4659      	mov	r1, fp
 8074cd8:	220a      	movs	r2, #10
 8074cda:	4620      	mov	r0, r4
 8074cdc:	f000 fe88 	bl	80759f0 <__multadd>
 8074ce0:	9b08      	ldr	r3, [sp, #32]
 8074ce2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8074ce6:	4683      	mov	fp, r0
 8074ce8:	2b00      	cmp	r3, #0
 8074cea:	f000 818f 	beq.w	807500c <_dtoa_r+0xb94>
 8074cee:	4639      	mov	r1, r7
 8074cf0:	2300      	movs	r3, #0
 8074cf2:	220a      	movs	r2, #10
 8074cf4:	4620      	mov	r0, r4
 8074cf6:	f000 fe7b 	bl	80759f0 <__multadd>
 8074cfa:	f1b9 0f00 	cmp.w	r9, #0
 8074cfe:	4607      	mov	r7, r0
 8074d00:	f300 808e 	bgt.w	8074e20 <_dtoa_r+0x9a8>
 8074d04:	9b05      	ldr	r3, [sp, #20]
 8074d06:	2b02      	cmp	r3, #2
 8074d08:	dc50      	bgt.n	8074dac <_dtoa_r+0x934>
 8074d0a:	e089      	b.n	8074e20 <_dtoa_r+0x9a8>
 8074d0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8074d0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8074d12:	e75d      	b.n	8074bd0 <_dtoa_r+0x758>
 8074d14:	9b01      	ldr	r3, [sp, #4]
 8074d16:	1e5e      	subs	r6, r3, #1
 8074d18:	9b06      	ldr	r3, [sp, #24]
 8074d1a:	42b3      	cmp	r3, r6
 8074d1c:	bfbf      	itttt	lt
 8074d1e:	9b06      	ldrlt	r3, [sp, #24]
 8074d20:	9606      	strlt	r6, [sp, #24]
 8074d22:	1af2      	sublt	r2, r6, r3
 8074d24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8074d26:	bfb6      	itet	lt
 8074d28:	189b      	addlt	r3, r3, r2
 8074d2a:	1b9e      	subge	r6, r3, r6
 8074d2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8074d2e:	9b01      	ldr	r3, [sp, #4]
 8074d30:	bfb8      	it	lt
 8074d32:	2600      	movlt	r6, #0
 8074d34:	2b00      	cmp	r3, #0
 8074d36:	bfb5      	itete	lt
 8074d38:	eba8 0503 	sublt.w	r5, r8, r3
 8074d3c:	9b01      	ldrge	r3, [sp, #4]
 8074d3e:	2300      	movlt	r3, #0
 8074d40:	4645      	movge	r5, r8
 8074d42:	e747      	b.n	8074bd4 <_dtoa_r+0x75c>
 8074d44:	9e06      	ldr	r6, [sp, #24]
 8074d46:	9f08      	ldr	r7, [sp, #32]
 8074d48:	4645      	mov	r5, r8
 8074d4a:	e74c      	b.n	8074be6 <_dtoa_r+0x76e>
 8074d4c:	9a06      	ldr	r2, [sp, #24]
 8074d4e:	e775      	b.n	8074c3c <_dtoa_r+0x7c4>
 8074d50:	9b05      	ldr	r3, [sp, #20]
 8074d52:	2b01      	cmp	r3, #1
 8074d54:	dc18      	bgt.n	8074d88 <_dtoa_r+0x910>
 8074d56:	9b02      	ldr	r3, [sp, #8]
 8074d58:	b9b3      	cbnz	r3, 8074d88 <_dtoa_r+0x910>
 8074d5a:	9b03      	ldr	r3, [sp, #12]
 8074d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8074d60:	b9a3      	cbnz	r3, 8074d8c <_dtoa_r+0x914>
 8074d62:	9b03      	ldr	r3, [sp, #12]
 8074d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8074d68:	0d1b      	lsrs	r3, r3, #20
 8074d6a:	051b      	lsls	r3, r3, #20
 8074d6c:	b12b      	cbz	r3, 8074d7a <_dtoa_r+0x902>
 8074d6e:	9b04      	ldr	r3, [sp, #16]
 8074d70:	3301      	adds	r3, #1
 8074d72:	9304      	str	r3, [sp, #16]
 8074d74:	f108 0801 	add.w	r8, r8, #1
 8074d78:	2301      	movs	r3, #1
 8074d7a:	9306      	str	r3, [sp, #24]
 8074d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8074d7e:	2b00      	cmp	r3, #0
 8074d80:	f47f af74 	bne.w	8074c6c <_dtoa_r+0x7f4>
 8074d84:	2001      	movs	r0, #1
 8074d86:	e779      	b.n	8074c7c <_dtoa_r+0x804>
 8074d88:	2300      	movs	r3, #0
 8074d8a:	e7f6      	b.n	8074d7a <_dtoa_r+0x902>
 8074d8c:	9b02      	ldr	r3, [sp, #8]
 8074d8e:	e7f4      	b.n	8074d7a <_dtoa_r+0x902>
 8074d90:	d085      	beq.n	8074c9e <_dtoa_r+0x826>
 8074d92:	4618      	mov	r0, r3
 8074d94:	301c      	adds	r0, #28
 8074d96:	e77d      	b.n	8074c94 <_dtoa_r+0x81c>
 8074d98:	40240000 	.word	0x40240000
 8074d9c:	9b01      	ldr	r3, [sp, #4]
 8074d9e:	2b00      	cmp	r3, #0
 8074da0:	dc38      	bgt.n	8074e14 <_dtoa_r+0x99c>
 8074da2:	9b05      	ldr	r3, [sp, #20]
 8074da4:	2b02      	cmp	r3, #2
 8074da6:	dd35      	ble.n	8074e14 <_dtoa_r+0x99c>
 8074da8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8074dac:	f1b9 0f00 	cmp.w	r9, #0
 8074db0:	d10d      	bne.n	8074dce <_dtoa_r+0x956>
 8074db2:	4631      	mov	r1, r6
 8074db4:	464b      	mov	r3, r9
 8074db6:	2205      	movs	r2, #5
 8074db8:	4620      	mov	r0, r4
 8074dba:	f000 fe19 	bl	80759f0 <__multadd>
 8074dbe:	4601      	mov	r1, r0
 8074dc0:	4606      	mov	r6, r0
 8074dc2:	4658      	mov	r0, fp
 8074dc4:	f001 f87a 	bl	8075ebc <__mcmp>
 8074dc8:	2800      	cmp	r0, #0
 8074dca:	f73f adbd 	bgt.w	8074948 <_dtoa_r+0x4d0>
 8074dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8074dd0:	9d00      	ldr	r5, [sp, #0]
 8074dd2:	ea6f 0a03 	mvn.w	sl, r3
 8074dd6:	f04f 0800 	mov.w	r8, #0
 8074dda:	4631      	mov	r1, r6
 8074ddc:	4620      	mov	r0, r4
 8074dde:	f000 fde5 	bl	80759ac <_Bfree>
 8074de2:	2f00      	cmp	r7, #0
 8074de4:	f43f aeb4 	beq.w	8074b50 <_dtoa_r+0x6d8>
 8074de8:	f1b8 0f00 	cmp.w	r8, #0
 8074dec:	d005      	beq.n	8074dfa <_dtoa_r+0x982>
 8074dee:	45b8      	cmp	r8, r7
 8074df0:	d003      	beq.n	8074dfa <_dtoa_r+0x982>
 8074df2:	4641      	mov	r1, r8
 8074df4:	4620      	mov	r0, r4
 8074df6:	f000 fdd9 	bl	80759ac <_Bfree>
 8074dfa:	4639      	mov	r1, r7
 8074dfc:	4620      	mov	r0, r4
 8074dfe:	f000 fdd5 	bl	80759ac <_Bfree>
 8074e02:	e6a5      	b.n	8074b50 <_dtoa_r+0x6d8>
 8074e04:	2600      	movs	r6, #0
 8074e06:	4637      	mov	r7, r6
 8074e08:	e7e1      	b.n	8074dce <_dtoa_r+0x956>
 8074e0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8074e0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8074e10:	4637      	mov	r7, r6
 8074e12:	e599      	b.n	8074948 <_dtoa_r+0x4d0>
 8074e14:	9b08      	ldr	r3, [sp, #32]
 8074e16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8074e1a:	2b00      	cmp	r3, #0
 8074e1c:	f000 80fd 	beq.w	807501a <_dtoa_r+0xba2>
 8074e20:	2d00      	cmp	r5, #0
 8074e22:	dd05      	ble.n	8074e30 <_dtoa_r+0x9b8>
 8074e24:	4639      	mov	r1, r7
 8074e26:	462a      	mov	r2, r5
 8074e28:	4620      	mov	r0, r4
 8074e2a:	f000 ffdb 	bl	8075de4 <__lshift>
 8074e2e:	4607      	mov	r7, r0
 8074e30:	9b06      	ldr	r3, [sp, #24]
 8074e32:	2b00      	cmp	r3, #0
 8074e34:	d05c      	beq.n	8074ef0 <_dtoa_r+0xa78>
 8074e36:	6879      	ldr	r1, [r7, #4]
 8074e38:	4620      	mov	r0, r4
 8074e3a:	f000 fd77 	bl	807592c <_Balloc>
 8074e3e:	4605      	mov	r5, r0
 8074e40:	b928      	cbnz	r0, 8074e4e <_dtoa_r+0x9d6>
 8074e42:	4b80      	ldr	r3, [pc, #512]	; (8075044 <_dtoa_r+0xbcc>)
 8074e44:	4602      	mov	r2, r0
 8074e46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8074e4a:	f7ff bb2e 	b.w	80744aa <_dtoa_r+0x32>
 8074e4e:	693a      	ldr	r2, [r7, #16]
 8074e50:	3202      	adds	r2, #2
 8074e52:	0092      	lsls	r2, r2, #2
 8074e54:	f107 010c 	add.w	r1, r7, #12
 8074e58:	300c      	adds	r0, #12
 8074e5a:	f7fd fbca 	bl	80725f2 <memcpy>
 8074e5e:	2201      	movs	r2, #1
 8074e60:	4629      	mov	r1, r5
 8074e62:	4620      	mov	r0, r4
 8074e64:	f000 ffbe 	bl	8075de4 <__lshift>
 8074e68:	9b00      	ldr	r3, [sp, #0]
 8074e6a:	3301      	adds	r3, #1
 8074e6c:	9301      	str	r3, [sp, #4]
 8074e6e:	9b00      	ldr	r3, [sp, #0]
 8074e70:	444b      	add	r3, r9
 8074e72:	9307      	str	r3, [sp, #28]
 8074e74:	9b02      	ldr	r3, [sp, #8]
 8074e76:	f003 0301 	and.w	r3, r3, #1
 8074e7a:	46b8      	mov	r8, r7
 8074e7c:	9306      	str	r3, [sp, #24]
 8074e7e:	4607      	mov	r7, r0
 8074e80:	9b01      	ldr	r3, [sp, #4]
 8074e82:	4631      	mov	r1, r6
 8074e84:	3b01      	subs	r3, #1
 8074e86:	4658      	mov	r0, fp
 8074e88:	9302      	str	r3, [sp, #8]
 8074e8a:	f7ff fa69 	bl	8074360 <quorem>
 8074e8e:	4603      	mov	r3, r0
 8074e90:	3330      	adds	r3, #48	; 0x30
 8074e92:	9004      	str	r0, [sp, #16]
 8074e94:	4641      	mov	r1, r8
 8074e96:	4658      	mov	r0, fp
 8074e98:	9308      	str	r3, [sp, #32]
 8074e9a:	f001 f80f 	bl	8075ebc <__mcmp>
 8074e9e:	463a      	mov	r2, r7
 8074ea0:	4681      	mov	r9, r0
 8074ea2:	4631      	mov	r1, r6
 8074ea4:	4620      	mov	r0, r4
 8074ea6:	f001 f825 	bl	8075ef4 <__mdiff>
 8074eaa:	68c2      	ldr	r2, [r0, #12]
 8074eac:	9b08      	ldr	r3, [sp, #32]
 8074eae:	4605      	mov	r5, r0
 8074eb0:	bb02      	cbnz	r2, 8074ef4 <_dtoa_r+0xa7c>
 8074eb2:	4601      	mov	r1, r0
 8074eb4:	4658      	mov	r0, fp
 8074eb6:	f001 f801 	bl	8075ebc <__mcmp>
 8074eba:	9b08      	ldr	r3, [sp, #32]
 8074ebc:	4602      	mov	r2, r0
 8074ebe:	4629      	mov	r1, r5
 8074ec0:	4620      	mov	r0, r4
 8074ec2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8074ec6:	f000 fd71 	bl	80759ac <_Bfree>
 8074eca:	9b05      	ldr	r3, [sp, #20]
 8074ecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8074ece:	9d01      	ldr	r5, [sp, #4]
 8074ed0:	ea43 0102 	orr.w	r1, r3, r2
 8074ed4:	9b06      	ldr	r3, [sp, #24]
 8074ed6:	430b      	orrs	r3, r1
 8074ed8:	9b08      	ldr	r3, [sp, #32]
 8074eda:	d10d      	bne.n	8074ef8 <_dtoa_r+0xa80>
 8074edc:	2b39      	cmp	r3, #57	; 0x39
 8074ede:	d029      	beq.n	8074f34 <_dtoa_r+0xabc>
 8074ee0:	f1b9 0f00 	cmp.w	r9, #0
 8074ee4:	dd01      	ble.n	8074eea <_dtoa_r+0xa72>
 8074ee6:	9b04      	ldr	r3, [sp, #16]
 8074ee8:	3331      	adds	r3, #49	; 0x31
 8074eea:	9a02      	ldr	r2, [sp, #8]
 8074eec:	7013      	strb	r3, [r2, #0]
 8074eee:	e774      	b.n	8074dda <_dtoa_r+0x962>
 8074ef0:	4638      	mov	r0, r7
 8074ef2:	e7b9      	b.n	8074e68 <_dtoa_r+0x9f0>
 8074ef4:	2201      	movs	r2, #1
 8074ef6:	e7e2      	b.n	8074ebe <_dtoa_r+0xa46>
 8074ef8:	f1b9 0f00 	cmp.w	r9, #0
 8074efc:	db06      	blt.n	8074f0c <_dtoa_r+0xa94>
 8074efe:	9905      	ldr	r1, [sp, #20]
 8074f00:	ea41 0909 	orr.w	r9, r1, r9
 8074f04:	9906      	ldr	r1, [sp, #24]
 8074f06:	ea59 0101 	orrs.w	r1, r9, r1
 8074f0a:	d120      	bne.n	8074f4e <_dtoa_r+0xad6>
 8074f0c:	2a00      	cmp	r2, #0
 8074f0e:	ddec      	ble.n	8074eea <_dtoa_r+0xa72>
 8074f10:	4659      	mov	r1, fp
 8074f12:	2201      	movs	r2, #1
 8074f14:	4620      	mov	r0, r4
 8074f16:	9301      	str	r3, [sp, #4]
 8074f18:	f000 ff64 	bl	8075de4 <__lshift>
 8074f1c:	4631      	mov	r1, r6
 8074f1e:	4683      	mov	fp, r0
 8074f20:	f000 ffcc 	bl	8075ebc <__mcmp>
 8074f24:	2800      	cmp	r0, #0
 8074f26:	9b01      	ldr	r3, [sp, #4]
 8074f28:	dc02      	bgt.n	8074f30 <_dtoa_r+0xab8>
 8074f2a:	d1de      	bne.n	8074eea <_dtoa_r+0xa72>
 8074f2c:	07da      	lsls	r2, r3, #31
 8074f2e:	d5dc      	bpl.n	8074eea <_dtoa_r+0xa72>
 8074f30:	2b39      	cmp	r3, #57	; 0x39
 8074f32:	d1d8      	bne.n	8074ee6 <_dtoa_r+0xa6e>
 8074f34:	9a02      	ldr	r2, [sp, #8]
 8074f36:	2339      	movs	r3, #57	; 0x39
 8074f38:	7013      	strb	r3, [r2, #0]
 8074f3a:	462b      	mov	r3, r5
 8074f3c:	461d      	mov	r5, r3
 8074f3e:	3b01      	subs	r3, #1
 8074f40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8074f44:	2a39      	cmp	r2, #57	; 0x39
 8074f46:	d050      	beq.n	8074fea <_dtoa_r+0xb72>
 8074f48:	3201      	adds	r2, #1
 8074f4a:	701a      	strb	r2, [r3, #0]
 8074f4c:	e745      	b.n	8074dda <_dtoa_r+0x962>
 8074f4e:	2a00      	cmp	r2, #0
 8074f50:	dd03      	ble.n	8074f5a <_dtoa_r+0xae2>
 8074f52:	2b39      	cmp	r3, #57	; 0x39
 8074f54:	d0ee      	beq.n	8074f34 <_dtoa_r+0xabc>
 8074f56:	3301      	adds	r3, #1
 8074f58:	e7c7      	b.n	8074eea <_dtoa_r+0xa72>
 8074f5a:	9a01      	ldr	r2, [sp, #4]
 8074f5c:	9907      	ldr	r1, [sp, #28]
 8074f5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8074f62:	428a      	cmp	r2, r1
 8074f64:	d02a      	beq.n	8074fbc <_dtoa_r+0xb44>
 8074f66:	4659      	mov	r1, fp
 8074f68:	2300      	movs	r3, #0
 8074f6a:	220a      	movs	r2, #10
 8074f6c:	4620      	mov	r0, r4
 8074f6e:	f000 fd3f 	bl	80759f0 <__multadd>
 8074f72:	45b8      	cmp	r8, r7
 8074f74:	4683      	mov	fp, r0
 8074f76:	f04f 0300 	mov.w	r3, #0
 8074f7a:	f04f 020a 	mov.w	r2, #10
 8074f7e:	4641      	mov	r1, r8
 8074f80:	4620      	mov	r0, r4
 8074f82:	d107      	bne.n	8074f94 <_dtoa_r+0xb1c>
 8074f84:	f000 fd34 	bl	80759f0 <__multadd>
 8074f88:	4680      	mov	r8, r0
 8074f8a:	4607      	mov	r7, r0
 8074f8c:	9b01      	ldr	r3, [sp, #4]
 8074f8e:	3301      	adds	r3, #1
 8074f90:	9301      	str	r3, [sp, #4]
 8074f92:	e775      	b.n	8074e80 <_dtoa_r+0xa08>
 8074f94:	f000 fd2c 	bl	80759f0 <__multadd>
 8074f98:	4639      	mov	r1, r7
 8074f9a:	4680      	mov	r8, r0
 8074f9c:	2300      	movs	r3, #0
 8074f9e:	220a      	movs	r2, #10
 8074fa0:	4620      	mov	r0, r4
 8074fa2:	f000 fd25 	bl	80759f0 <__multadd>
 8074fa6:	4607      	mov	r7, r0
 8074fa8:	e7f0      	b.n	8074f8c <_dtoa_r+0xb14>
 8074faa:	f1b9 0f00 	cmp.w	r9, #0
 8074fae:	9a00      	ldr	r2, [sp, #0]
 8074fb0:	bfcc      	ite	gt
 8074fb2:	464d      	movgt	r5, r9
 8074fb4:	2501      	movle	r5, #1
 8074fb6:	4415      	add	r5, r2
 8074fb8:	f04f 0800 	mov.w	r8, #0
 8074fbc:	4659      	mov	r1, fp
 8074fbe:	2201      	movs	r2, #1
 8074fc0:	4620      	mov	r0, r4
 8074fc2:	9301      	str	r3, [sp, #4]
 8074fc4:	f000 ff0e 	bl	8075de4 <__lshift>
 8074fc8:	4631      	mov	r1, r6
 8074fca:	4683      	mov	fp, r0
 8074fcc:	f000 ff76 	bl	8075ebc <__mcmp>
 8074fd0:	2800      	cmp	r0, #0
 8074fd2:	dcb2      	bgt.n	8074f3a <_dtoa_r+0xac2>
 8074fd4:	d102      	bne.n	8074fdc <_dtoa_r+0xb64>
 8074fd6:	9b01      	ldr	r3, [sp, #4]
 8074fd8:	07db      	lsls	r3, r3, #31
 8074fda:	d4ae      	bmi.n	8074f3a <_dtoa_r+0xac2>
 8074fdc:	462b      	mov	r3, r5
 8074fde:	461d      	mov	r5, r3
 8074fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8074fe4:	2a30      	cmp	r2, #48	; 0x30
 8074fe6:	d0fa      	beq.n	8074fde <_dtoa_r+0xb66>
 8074fe8:	e6f7      	b.n	8074dda <_dtoa_r+0x962>
 8074fea:	9a00      	ldr	r2, [sp, #0]
 8074fec:	429a      	cmp	r2, r3
 8074fee:	d1a5      	bne.n	8074f3c <_dtoa_r+0xac4>
 8074ff0:	f10a 0a01 	add.w	sl, sl, #1
 8074ff4:	2331      	movs	r3, #49	; 0x31
 8074ff6:	e779      	b.n	8074eec <_dtoa_r+0xa74>
 8074ff8:	4b13      	ldr	r3, [pc, #76]	; (8075048 <_dtoa_r+0xbd0>)
 8074ffa:	f7ff baaf 	b.w	807455c <_dtoa_r+0xe4>
 8074ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8075000:	2b00      	cmp	r3, #0
 8075002:	f47f aa86 	bne.w	8074512 <_dtoa_r+0x9a>
 8075006:	4b11      	ldr	r3, [pc, #68]	; (807504c <_dtoa_r+0xbd4>)
 8075008:	f7ff baa8 	b.w	807455c <_dtoa_r+0xe4>
 807500c:	f1b9 0f00 	cmp.w	r9, #0
 8075010:	dc03      	bgt.n	807501a <_dtoa_r+0xba2>
 8075012:	9b05      	ldr	r3, [sp, #20]
 8075014:	2b02      	cmp	r3, #2
 8075016:	f73f aec9 	bgt.w	8074dac <_dtoa_r+0x934>
 807501a:	9d00      	ldr	r5, [sp, #0]
 807501c:	4631      	mov	r1, r6
 807501e:	4658      	mov	r0, fp
 8075020:	f7ff f99e 	bl	8074360 <quorem>
 8075024:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8075028:	f805 3b01 	strb.w	r3, [r5], #1
 807502c:	9a00      	ldr	r2, [sp, #0]
 807502e:	1aaa      	subs	r2, r5, r2
 8075030:	4591      	cmp	r9, r2
 8075032:	ddba      	ble.n	8074faa <_dtoa_r+0xb32>
 8075034:	4659      	mov	r1, fp
 8075036:	2300      	movs	r3, #0
 8075038:	220a      	movs	r2, #10
 807503a:	4620      	mov	r0, r4
 807503c:	f000 fcd8 	bl	80759f0 <__multadd>
 8075040:	4683      	mov	fp, r0
 8075042:	e7eb      	b.n	807501c <_dtoa_r+0xba4>
 8075044:	080777d4 	.word	0x080777d4
 8075048:	080775d0 	.word	0x080775d0
 807504c:	08077751 	.word	0x08077751

08075050 <__sflush_r>:
 8075050:	898a      	ldrh	r2, [r1, #12]
 8075052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8075056:	4605      	mov	r5, r0
 8075058:	0710      	lsls	r0, r2, #28
 807505a:	460c      	mov	r4, r1
 807505c:	d458      	bmi.n	8075110 <__sflush_r+0xc0>
 807505e:	684b      	ldr	r3, [r1, #4]
 8075060:	2b00      	cmp	r3, #0
 8075062:	dc05      	bgt.n	8075070 <__sflush_r+0x20>
 8075064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8075066:	2b00      	cmp	r3, #0
 8075068:	dc02      	bgt.n	8075070 <__sflush_r+0x20>
 807506a:	2000      	movs	r0, #0
 807506c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8075070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8075072:	2e00      	cmp	r6, #0
 8075074:	d0f9      	beq.n	807506a <__sflush_r+0x1a>
 8075076:	2300      	movs	r3, #0
 8075078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 807507c:	682f      	ldr	r7, [r5, #0]
 807507e:	602b      	str	r3, [r5, #0]
 8075080:	d032      	beq.n	80750e8 <__sflush_r+0x98>
 8075082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8075084:	89a3      	ldrh	r3, [r4, #12]
 8075086:	075a      	lsls	r2, r3, #29
 8075088:	d505      	bpl.n	8075096 <__sflush_r+0x46>
 807508a:	6863      	ldr	r3, [r4, #4]
 807508c:	1ac0      	subs	r0, r0, r3
 807508e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8075090:	b10b      	cbz	r3, 8075096 <__sflush_r+0x46>
 8075092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8075094:	1ac0      	subs	r0, r0, r3
 8075096:	2300      	movs	r3, #0
 8075098:	4602      	mov	r2, r0
 807509a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 807509c:	6a21      	ldr	r1, [r4, #32]
 807509e:	4628      	mov	r0, r5
 80750a0:	47b0      	blx	r6
 80750a2:	1c43      	adds	r3, r0, #1
 80750a4:	89a3      	ldrh	r3, [r4, #12]
 80750a6:	d106      	bne.n	80750b6 <__sflush_r+0x66>
 80750a8:	6829      	ldr	r1, [r5, #0]
 80750aa:	291d      	cmp	r1, #29
 80750ac:	d82c      	bhi.n	8075108 <__sflush_r+0xb8>
 80750ae:	4a2a      	ldr	r2, [pc, #168]	; (8075158 <__sflush_r+0x108>)
 80750b0:	40ca      	lsrs	r2, r1
 80750b2:	07d6      	lsls	r6, r2, #31
 80750b4:	d528      	bpl.n	8075108 <__sflush_r+0xb8>
 80750b6:	2200      	movs	r2, #0
 80750b8:	6062      	str	r2, [r4, #4]
 80750ba:	04d9      	lsls	r1, r3, #19
 80750bc:	6922      	ldr	r2, [r4, #16]
 80750be:	6022      	str	r2, [r4, #0]
 80750c0:	d504      	bpl.n	80750cc <__sflush_r+0x7c>
 80750c2:	1c42      	adds	r2, r0, #1
 80750c4:	d101      	bne.n	80750ca <__sflush_r+0x7a>
 80750c6:	682b      	ldr	r3, [r5, #0]
 80750c8:	b903      	cbnz	r3, 80750cc <__sflush_r+0x7c>
 80750ca:	6560      	str	r0, [r4, #84]	; 0x54
 80750cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80750ce:	602f      	str	r7, [r5, #0]
 80750d0:	2900      	cmp	r1, #0
 80750d2:	d0ca      	beq.n	807506a <__sflush_r+0x1a>
 80750d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80750d8:	4299      	cmp	r1, r3
 80750da:	d002      	beq.n	80750e2 <__sflush_r+0x92>
 80750dc:	4628      	mov	r0, r5
 80750de:	f001 f8ef 	bl	80762c0 <_free_r>
 80750e2:	2000      	movs	r0, #0
 80750e4:	6360      	str	r0, [r4, #52]	; 0x34
 80750e6:	e7c1      	b.n	807506c <__sflush_r+0x1c>
 80750e8:	6a21      	ldr	r1, [r4, #32]
 80750ea:	2301      	movs	r3, #1
 80750ec:	4628      	mov	r0, r5
 80750ee:	47b0      	blx	r6
 80750f0:	1c41      	adds	r1, r0, #1
 80750f2:	d1c7      	bne.n	8075084 <__sflush_r+0x34>
 80750f4:	682b      	ldr	r3, [r5, #0]
 80750f6:	2b00      	cmp	r3, #0
 80750f8:	d0c4      	beq.n	8075084 <__sflush_r+0x34>
 80750fa:	2b1d      	cmp	r3, #29
 80750fc:	d001      	beq.n	8075102 <__sflush_r+0xb2>
 80750fe:	2b16      	cmp	r3, #22
 8075100:	d101      	bne.n	8075106 <__sflush_r+0xb6>
 8075102:	602f      	str	r7, [r5, #0]
 8075104:	e7b1      	b.n	807506a <__sflush_r+0x1a>
 8075106:	89a3      	ldrh	r3, [r4, #12]
 8075108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 807510c:	81a3      	strh	r3, [r4, #12]
 807510e:	e7ad      	b.n	807506c <__sflush_r+0x1c>
 8075110:	690f      	ldr	r7, [r1, #16]
 8075112:	2f00      	cmp	r7, #0
 8075114:	d0a9      	beq.n	807506a <__sflush_r+0x1a>
 8075116:	0793      	lsls	r3, r2, #30
 8075118:	680e      	ldr	r6, [r1, #0]
 807511a:	bf08      	it	eq
 807511c:	694b      	ldreq	r3, [r1, #20]
 807511e:	600f      	str	r7, [r1, #0]
 8075120:	bf18      	it	ne
 8075122:	2300      	movne	r3, #0
 8075124:	eba6 0807 	sub.w	r8, r6, r7
 8075128:	608b      	str	r3, [r1, #8]
 807512a:	f1b8 0f00 	cmp.w	r8, #0
 807512e:	dd9c      	ble.n	807506a <__sflush_r+0x1a>
 8075130:	6a21      	ldr	r1, [r4, #32]
 8075132:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8075134:	4643      	mov	r3, r8
 8075136:	463a      	mov	r2, r7
 8075138:	4628      	mov	r0, r5
 807513a:	47b0      	blx	r6
 807513c:	2800      	cmp	r0, #0
 807513e:	dc06      	bgt.n	807514e <__sflush_r+0xfe>
 8075140:	89a3      	ldrh	r3, [r4, #12]
 8075142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8075146:	81a3      	strh	r3, [r4, #12]
 8075148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 807514c:	e78e      	b.n	807506c <__sflush_r+0x1c>
 807514e:	4407      	add	r7, r0
 8075150:	eba8 0800 	sub.w	r8, r8, r0
 8075154:	e7e9      	b.n	807512a <__sflush_r+0xda>
 8075156:	bf00      	nop
 8075158:	20400001 	.word	0x20400001

0807515c <_fflush_r>:
 807515c:	b538      	push	{r3, r4, r5, lr}
 807515e:	690b      	ldr	r3, [r1, #16]
 8075160:	4605      	mov	r5, r0
 8075162:	460c      	mov	r4, r1
 8075164:	b913      	cbnz	r3, 807516c <_fflush_r+0x10>
 8075166:	2500      	movs	r5, #0
 8075168:	4628      	mov	r0, r5
 807516a:	bd38      	pop	{r3, r4, r5, pc}
 807516c:	b118      	cbz	r0, 8075176 <_fflush_r+0x1a>
 807516e:	6983      	ldr	r3, [r0, #24]
 8075170:	b90b      	cbnz	r3, 8075176 <_fflush_r+0x1a>
 8075172:	f7fd f979 	bl	8072468 <__sinit>
 8075176:	4b14      	ldr	r3, [pc, #80]	; (80751c8 <_fflush_r+0x6c>)
 8075178:	429c      	cmp	r4, r3
 807517a:	d11b      	bne.n	80751b4 <_fflush_r+0x58>
 807517c:	686c      	ldr	r4, [r5, #4]
 807517e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8075182:	2b00      	cmp	r3, #0
 8075184:	d0ef      	beq.n	8075166 <_fflush_r+0xa>
 8075186:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8075188:	07d0      	lsls	r0, r2, #31
 807518a:	d404      	bmi.n	8075196 <_fflush_r+0x3a>
 807518c:	0599      	lsls	r1, r3, #22
 807518e:	d402      	bmi.n	8075196 <_fflush_r+0x3a>
 8075190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8075192:	f7fd fa2c 	bl	80725ee <__retarget_lock_acquire_recursive>
 8075196:	4628      	mov	r0, r5
 8075198:	4621      	mov	r1, r4
 807519a:	f7ff ff59 	bl	8075050 <__sflush_r>
 807519e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80751a0:	07da      	lsls	r2, r3, #31
 80751a2:	4605      	mov	r5, r0
 80751a4:	d4e0      	bmi.n	8075168 <_fflush_r+0xc>
 80751a6:	89a3      	ldrh	r3, [r4, #12]
 80751a8:	059b      	lsls	r3, r3, #22
 80751aa:	d4dd      	bmi.n	8075168 <_fflush_r+0xc>
 80751ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80751ae:	f7fd fa1f 	bl	80725f0 <__retarget_lock_release_recursive>
 80751b2:	e7d9      	b.n	8075168 <_fflush_r+0xc>
 80751b4:	4b05      	ldr	r3, [pc, #20]	; (80751cc <_fflush_r+0x70>)
 80751b6:	429c      	cmp	r4, r3
 80751b8:	d101      	bne.n	80751be <_fflush_r+0x62>
 80751ba:	68ac      	ldr	r4, [r5, #8]
 80751bc:	e7df      	b.n	807517e <_fflush_r+0x22>
 80751be:	4b04      	ldr	r3, [pc, #16]	; (80751d0 <_fflush_r+0x74>)
 80751c0:	429c      	cmp	r4, r3
 80751c2:	bf08      	it	eq
 80751c4:	68ec      	ldreq	r4, [r5, #12]
 80751c6:	e7da      	b.n	807517e <_fflush_r+0x22>
 80751c8:	0807757c 	.word	0x0807757c
 80751cc:	0807759c 	.word	0x0807759c
 80751d0:	0807755c 	.word	0x0807755c

080751d4 <rshift>:
 80751d4:	6903      	ldr	r3, [r0, #16]
 80751d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80751da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80751de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80751e2:	f100 0414 	add.w	r4, r0, #20
 80751e6:	dd45      	ble.n	8075274 <rshift+0xa0>
 80751e8:	f011 011f 	ands.w	r1, r1, #31
 80751ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80751f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80751f4:	d10c      	bne.n	8075210 <rshift+0x3c>
 80751f6:	f100 0710 	add.w	r7, r0, #16
 80751fa:	4629      	mov	r1, r5
 80751fc:	42b1      	cmp	r1, r6
 80751fe:	d334      	bcc.n	807526a <rshift+0x96>
 8075200:	1a9b      	subs	r3, r3, r2
 8075202:	009b      	lsls	r3, r3, #2
 8075204:	1eea      	subs	r2, r5, #3
 8075206:	4296      	cmp	r6, r2
 8075208:	bf38      	it	cc
 807520a:	2300      	movcc	r3, #0
 807520c:	4423      	add	r3, r4
 807520e:	e015      	b.n	807523c <rshift+0x68>
 8075210:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8075214:	f1c1 0820 	rsb	r8, r1, #32
 8075218:	40cf      	lsrs	r7, r1
 807521a:	f105 0e04 	add.w	lr, r5, #4
 807521e:	46a1      	mov	r9, r4
 8075220:	4576      	cmp	r6, lr
 8075222:	46f4      	mov	ip, lr
 8075224:	d815      	bhi.n	8075252 <rshift+0x7e>
 8075226:	1a9b      	subs	r3, r3, r2
 8075228:	009a      	lsls	r2, r3, #2
 807522a:	3a04      	subs	r2, #4
 807522c:	3501      	adds	r5, #1
 807522e:	42ae      	cmp	r6, r5
 8075230:	bf38      	it	cc
 8075232:	2200      	movcc	r2, #0
 8075234:	18a3      	adds	r3, r4, r2
 8075236:	50a7      	str	r7, [r4, r2]
 8075238:	b107      	cbz	r7, 807523c <rshift+0x68>
 807523a:	3304      	adds	r3, #4
 807523c:	1b1a      	subs	r2, r3, r4
 807523e:	42a3      	cmp	r3, r4
 8075240:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8075244:	bf08      	it	eq
 8075246:	2300      	moveq	r3, #0
 8075248:	6102      	str	r2, [r0, #16]
 807524a:	bf08      	it	eq
 807524c:	6143      	streq	r3, [r0, #20]
 807524e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8075252:	f8dc c000 	ldr.w	ip, [ip]
 8075256:	fa0c fc08 	lsl.w	ip, ip, r8
 807525a:	ea4c 0707 	orr.w	r7, ip, r7
 807525e:	f849 7b04 	str.w	r7, [r9], #4
 8075262:	f85e 7b04 	ldr.w	r7, [lr], #4
 8075266:	40cf      	lsrs	r7, r1
 8075268:	e7da      	b.n	8075220 <rshift+0x4c>
 807526a:	f851 cb04 	ldr.w	ip, [r1], #4
 807526e:	f847 cf04 	str.w	ip, [r7, #4]!
 8075272:	e7c3      	b.n	80751fc <rshift+0x28>
 8075274:	4623      	mov	r3, r4
 8075276:	e7e1      	b.n	807523c <rshift+0x68>

08075278 <__hexdig_fun>:
 8075278:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 807527c:	2b09      	cmp	r3, #9
 807527e:	d802      	bhi.n	8075286 <__hexdig_fun+0xe>
 8075280:	3820      	subs	r0, #32
 8075282:	b2c0      	uxtb	r0, r0
 8075284:	4770      	bx	lr
 8075286:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 807528a:	2b05      	cmp	r3, #5
 807528c:	d801      	bhi.n	8075292 <__hexdig_fun+0x1a>
 807528e:	3847      	subs	r0, #71	; 0x47
 8075290:	e7f7      	b.n	8075282 <__hexdig_fun+0xa>
 8075292:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8075296:	2b05      	cmp	r3, #5
 8075298:	d801      	bhi.n	807529e <__hexdig_fun+0x26>
 807529a:	3827      	subs	r0, #39	; 0x27
 807529c:	e7f1      	b.n	8075282 <__hexdig_fun+0xa>
 807529e:	2000      	movs	r0, #0
 80752a0:	4770      	bx	lr
	...

080752a4 <__gethex>:
 80752a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80752a8:	ed2d 8b02 	vpush	{d8}
 80752ac:	b089      	sub	sp, #36	; 0x24
 80752ae:	ee08 0a10 	vmov	s16, r0
 80752b2:	9304      	str	r3, [sp, #16]
 80752b4:	4bbc      	ldr	r3, [pc, #752]	; (80755a8 <__gethex+0x304>)
 80752b6:	681b      	ldr	r3, [r3, #0]
 80752b8:	9301      	str	r3, [sp, #4]
 80752ba:	4618      	mov	r0, r3
 80752bc:	468b      	mov	fp, r1
 80752be:	4690      	mov	r8, r2
 80752c0:	f7ea ff98 	bl	80601f4 <strlen>
 80752c4:	9b01      	ldr	r3, [sp, #4]
 80752c6:	f8db 2000 	ldr.w	r2, [fp]
 80752ca:	4403      	add	r3, r0
 80752cc:	4682      	mov	sl, r0
 80752ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80752d2:	9305      	str	r3, [sp, #20]
 80752d4:	1c93      	adds	r3, r2, #2
 80752d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80752da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80752de:	32fe      	adds	r2, #254	; 0xfe
 80752e0:	18d1      	adds	r1, r2, r3
 80752e2:	461f      	mov	r7, r3
 80752e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80752e8:	9100      	str	r1, [sp, #0]
 80752ea:	2830      	cmp	r0, #48	; 0x30
 80752ec:	d0f8      	beq.n	80752e0 <__gethex+0x3c>
 80752ee:	f7ff ffc3 	bl	8075278 <__hexdig_fun>
 80752f2:	4604      	mov	r4, r0
 80752f4:	2800      	cmp	r0, #0
 80752f6:	d13a      	bne.n	807536e <__gethex+0xca>
 80752f8:	9901      	ldr	r1, [sp, #4]
 80752fa:	4652      	mov	r2, sl
 80752fc:	4638      	mov	r0, r7
 80752fe:	f7fe f946 	bl	807358e <strncmp>
 8075302:	4605      	mov	r5, r0
 8075304:	2800      	cmp	r0, #0
 8075306:	d168      	bne.n	80753da <__gethex+0x136>
 8075308:	f817 000a 	ldrb.w	r0, [r7, sl]
 807530c:	eb07 060a 	add.w	r6, r7, sl
 8075310:	f7ff ffb2 	bl	8075278 <__hexdig_fun>
 8075314:	2800      	cmp	r0, #0
 8075316:	d062      	beq.n	80753de <__gethex+0x13a>
 8075318:	4633      	mov	r3, r6
 807531a:	7818      	ldrb	r0, [r3, #0]
 807531c:	2830      	cmp	r0, #48	; 0x30
 807531e:	461f      	mov	r7, r3
 8075320:	f103 0301 	add.w	r3, r3, #1
 8075324:	d0f9      	beq.n	807531a <__gethex+0x76>
 8075326:	f7ff ffa7 	bl	8075278 <__hexdig_fun>
 807532a:	2301      	movs	r3, #1
 807532c:	fab0 f480 	clz	r4, r0
 8075330:	0964      	lsrs	r4, r4, #5
 8075332:	4635      	mov	r5, r6
 8075334:	9300      	str	r3, [sp, #0]
 8075336:	463a      	mov	r2, r7
 8075338:	4616      	mov	r6, r2
 807533a:	3201      	adds	r2, #1
 807533c:	7830      	ldrb	r0, [r6, #0]
 807533e:	f7ff ff9b 	bl	8075278 <__hexdig_fun>
 8075342:	2800      	cmp	r0, #0
 8075344:	d1f8      	bne.n	8075338 <__gethex+0x94>
 8075346:	9901      	ldr	r1, [sp, #4]
 8075348:	4652      	mov	r2, sl
 807534a:	4630      	mov	r0, r6
 807534c:	f7fe f91f 	bl	807358e <strncmp>
 8075350:	b980      	cbnz	r0, 8075374 <__gethex+0xd0>
 8075352:	b94d      	cbnz	r5, 8075368 <__gethex+0xc4>
 8075354:	eb06 050a 	add.w	r5, r6, sl
 8075358:	462a      	mov	r2, r5
 807535a:	4616      	mov	r6, r2
 807535c:	3201      	adds	r2, #1
 807535e:	7830      	ldrb	r0, [r6, #0]
 8075360:	f7ff ff8a 	bl	8075278 <__hexdig_fun>
 8075364:	2800      	cmp	r0, #0
 8075366:	d1f8      	bne.n	807535a <__gethex+0xb6>
 8075368:	1bad      	subs	r5, r5, r6
 807536a:	00ad      	lsls	r5, r5, #2
 807536c:	e004      	b.n	8075378 <__gethex+0xd4>
 807536e:	2400      	movs	r4, #0
 8075370:	4625      	mov	r5, r4
 8075372:	e7e0      	b.n	8075336 <__gethex+0x92>
 8075374:	2d00      	cmp	r5, #0
 8075376:	d1f7      	bne.n	8075368 <__gethex+0xc4>
 8075378:	7833      	ldrb	r3, [r6, #0]
 807537a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 807537e:	2b50      	cmp	r3, #80	; 0x50
 8075380:	d13b      	bne.n	80753fa <__gethex+0x156>
 8075382:	7873      	ldrb	r3, [r6, #1]
 8075384:	2b2b      	cmp	r3, #43	; 0x2b
 8075386:	d02c      	beq.n	80753e2 <__gethex+0x13e>
 8075388:	2b2d      	cmp	r3, #45	; 0x2d
 807538a:	d02e      	beq.n	80753ea <__gethex+0x146>
 807538c:	1c71      	adds	r1, r6, #1
 807538e:	f04f 0900 	mov.w	r9, #0
 8075392:	7808      	ldrb	r0, [r1, #0]
 8075394:	f7ff ff70 	bl	8075278 <__hexdig_fun>
 8075398:	1e43      	subs	r3, r0, #1
 807539a:	b2db      	uxtb	r3, r3
 807539c:	2b18      	cmp	r3, #24
 807539e:	d82c      	bhi.n	80753fa <__gethex+0x156>
 80753a0:	f1a0 0210 	sub.w	r2, r0, #16
 80753a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80753a8:	f7ff ff66 	bl	8075278 <__hexdig_fun>
 80753ac:	1e43      	subs	r3, r0, #1
 80753ae:	b2db      	uxtb	r3, r3
 80753b0:	2b18      	cmp	r3, #24
 80753b2:	d91d      	bls.n	80753f0 <__gethex+0x14c>
 80753b4:	f1b9 0f00 	cmp.w	r9, #0
 80753b8:	d000      	beq.n	80753bc <__gethex+0x118>
 80753ba:	4252      	negs	r2, r2
 80753bc:	4415      	add	r5, r2
 80753be:	f8cb 1000 	str.w	r1, [fp]
 80753c2:	b1e4      	cbz	r4, 80753fe <__gethex+0x15a>
 80753c4:	9b00      	ldr	r3, [sp, #0]
 80753c6:	2b00      	cmp	r3, #0
 80753c8:	bf14      	ite	ne
 80753ca:	2700      	movne	r7, #0
 80753cc:	2706      	moveq	r7, #6
 80753ce:	4638      	mov	r0, r7
 80753d0:	b009      	add	sp, #36	; 0x24
 80753d2:	ecbd 8b02 	vpop	{d8}
 80753d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80753da:	463e      	mov	r6, r7
 80753dc:	4625      	mov	r5, r4
 80753de:	2401      	movs	r4, #1
 80753e0:	e7ca      	b.n	8075378 <__gethex+0xd4>
 80753e2:	f04f 0900 	mov.w	r9, #0
 80753e6:	1cb1      	adds	r1, r6, #2
 80753e8:	e7d3      	b.n	8075392 <__gethex+0xee>
 80753ea:	f04f 0901 	mov.w	r9, #1
 80753ee:	e7fa      	b.n	80753e6 <__gethex+0x142>
 80753f0:	230a      	movs	r3, #10
 80753f2:	fb03 0202 	mla	r2, r3, r2, r0
 80753f6:	3a10      	subs	r2, #16
 80753f8:	e7d4      	b.n	80753a4 <__gethex+0x100>
 80753fa:	4631      	mov	r1, r6
 80753fc:	e7df      	b.n	80753be <__gethex+0x11a>
 80753fe:	1bf3      	subs	r3, r6, r7
 8075400:	3b01      	subs	r3, #1
 8075402:	4621      	mov	r1, r4
 8075404:	2b07      	cmp	r3, #7
 8075406:	dc0b      	bgt.n	8075420 <__gethex+0x17c>
 8075408:	ee18 0a10 	vmov	r0, s16
 807540c:	f000 fa8e 	bl	807592c <_Balloc>
 8075410:	4604      	mov	r4, r0
 8075412:	b940      	cbnz	r0, 8075426 <__gethex+0x182>
 8075414:	4b65      	ldr	r3, [pc, #404]	; (80755ac <__gethex+0x308>)
 8075416:	4602      	mov	r2, r0
 8075418:	21de      	movs	r1, #222	; 0xde
 807541a:	4865      	ldr	r0, [pc, #404]	; (80755b0 <__gethex+0x30c>)
 807541c:	f001 fb3e 	bl	8076a9c <__assert_func>
 8075420:	3101      	adds	r1, #1
 8075422:	105b      	asrs	r3, r3, #1
 8075424:	e7ee      	b.n	8075404 <__gethex+0x160>
 8075426:	f100 0914 	add.w	r9, r0, #20
 807542a:	f04f 0b00 	mov.w	fp, #0
 807542e:	f1ca 0301 	rsb	r3, sl, #1
 8075432:	f8cd 9008 	str.w	r9, [sp, #8]
 8075436:	f8cd b000 	str.w	fp, [sp]
 807543a:	9306      	str	r3, [sp, #24]
 807543c:	42b7      	cmp	r7, r6
 807543e:	d340      	bcc.n	80754c2 <__gethex+0x21e>
 8075440:	9802      	ldr	r0, [sp, #8]
 8075442:	9b00      	ldr	r3, [sp, #0]
 8075444:	f840 3b04 	str.w	r3, [r0], #4
 8075448:	eba0 0009 	sub.w	r0, r0, r9
 807544c:	1080      	asrs	r0, r0, #2
 807544e:	0146      	lsls	r6, r0, #5
 8075450:	6120      	str	r0, [r4, #16]
 8075452:	4618      	mov	r0, r3
 8075454:	f000 fb60 	bl	8075b18 <__hi0bits>
 8075458:	1a30      	subs	r0, r6, r0
 807545a:	f8d8 6000 	ldr.w	r6, [r8]
 807545e:	42b0      	cmp	r0, r6
 8075460:	dd63      	ble.n	807552a <__gethex+0x286>
 8075462:	1b87      	subs	r7, r0, r6
 8075464:	4639      	mov	r1, r7
 8075466:	4620      	mov	r0, r4
 8075468:	f000 fefa 	bl	8076260 <__any_on>
 807546c:	4682      	mov	sl, r0
 807546e:	b1a8      	cbz	r0, 807549c <__gethex+0x1f8>
 8075470:	1e7b      	subs	r3, r7, #1
 8075472:	1159      	asrs	r1, r3, #5
 8075474:	f003 021f 	and.w	r2, r3, #31
 8075478:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 807547c:	f04f 0a01 	mov.w	sl, #1
 8075480:	fa0a f202 	lsl.w	r2, sl, r2
 8075484:	420a      	tst	r2, r1
 8075486:	d009      	beq.n	807549c <__gethex+0x1f8>
 8075488:	4553      	cmp	r3, sl
 807548a:	dd05      	ble.n	8075498 <__gethex+0x1f4>
 807548c:	1eb9      	subs	r1, r7, #2
 807548e:	4620      	mov	r0, r4
 8075490:	f000 fee6 	bl	8076260 <__any_on>
 8075494:	2800      	cmp	r0, #0
 8075496:	d145      	bne.n	8075524 <__gethex+0x280>
 8075498:	f04f 0a02 	mov.w	sl, #2
 807549c:	4639      	mov	r1, r7
 807549e:	4620      	mov	r0, r4
 80754a0:	f7ff fe98 	bl	80751d4 <rshift>
 80754a4:	443d      	add	r5, r7
 80754a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80754aa:	42ab      	cmp	r3, r5
 80754ac:	da4c      	bge.n	8075548 <__gethex+0x2a4>
 80754ae:	ee18 0a10 	vmov	r0, s16
 80754b2:	4621      	mov	r1, r4
 80754b4:	f000 fa7a 	bl	80759ac <_Bfree>
 80754b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80754ba:	2300      	movs	r3, #0
 80754bc:	6013      	str	r3, [r2, #0]
 80754be:	27a3      	movs	r7, #163	; 0xa3
 80754c0:	e785      	b.n	80753ce <__gethex+0x12a>
 80754c2:	1e73      	subs	r3, r6, #1
 80754c4:	9a05      	ldr	r2, [sp, #20]
 80754c6:	9303      	str	r3, [sp, #12]
 80754c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80754cc:	4293      	cmp	r3, r2
 80754ce:	d019      	beq.n	8075504 <__gethex+0x260>
 80754d0:	f1bb 0f20 	cmp.w	fp, #32
 80754d4:	d107      	bne.n	80754e6 <__gethex+0x242>
 80754d6:	9b02      	ldr	r3, [sp, #8]
 80754d8:	9a00      	ldr	r2, [sp, #0]
 80754da:	f843 2b04 	str.w	r2, [r3], #4
 80754de:	9302      	str	r3, [sp, #8]
 80754e0:	2300      	movs	r3, #0
 80754e2:	9300      	str	r3, [sp, #0]
 80754e4:	469b      	mov	fp, r3
 80754e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80754ea:	f7ff fec5 	bl	8075278 <__hexdig_fun>
 80754ee:	9b00      	ldr	r3, [sp, #0]
 80754f0:	f000 000f 	and.w	r0, r0, #15
 80754f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80754f8:	4303      	orrs	r3, r0
 80754fa:	9300      	str	r3, [sp, #0]
 80754fc:	f10b 0b04 	add.w	fp, fp, #4
 8075500:	9b03      	ldr	r3, [sp, #12]
 8075502:	e00d      	b.n	8075520 <__gethex+0x27c>
 8075504:	9b03      	ldr	r3, [sp, #12]
 8075506:	9a06      	ldr	r2, [sp, #24]
 8075508:	4413      	add	r3, r2
 807550a:	42bb      	cmp	r3, r7
 807550c:	d3e0      	bcc.n	80754d0 <__gethex+0x22c>
 807550e:	4618      	mov	r0, r3
 8075510:	9901      	ldr	r1, [sp, #4]
 8075512:	9307      	str	r3, [sp, #28]
 8075514:	4652      	mov	r2, sl
 8075516:	f7fe f83a 	bl	807358e <strncmp>
 807551a:	9b07      	ldr	r3, [sp, #28]
 807551c:	2800      	cmp	r0, #0
 807551e:	d1d7      	bne.n	80754d0 <__gethex+0x22c>
 8075520:	461e      	mov	r6, r3
 8075522:	e78b      	b.n	807543c <__gethex+0x198>
 8075524:	f04f 0a03 	mov.w	sl, #3
 8075528:	e7b8      	b.n	807549c <__gethex+0x1f8>
 807552a:	da0a      	bge.n	8075542 <__gethex+0x29e>
 807552c:	1a37      	subs	r7, r6, r0
 807552e:	4621      	mov	r1, r4
 8075530:	ee18 0a10 	vmov	r0, s16
 8075534:	463a      	mov	r2, r7
 8075536:	f000 fc55 	bl	8075de4 <__lshift>
 807553a:	1bed      	subs	r5, r5, r7
 807553c:	4604      	mov	r4, r0
 807553e:	f100 0914 	add.w	r9, r0, #20
 8075542:	f04f 0a00 	mov.w	sl, #0
 8075546:	e7ae      	b.n	80754a6 <__gethex+0x202>
 8075548:	f8d8 0004 	ldr.w	r0, [r8, #4]
 807554c:	42a8      	cmp	r0, r5
 807554e:	dd72      	ble.n	8075636 <__gethex+0x392>
 8075550:	1b45      	subs	r5, r0, r5
 8075552:	42ae      	cmp	r6, r5
 8075554:	dc36      	bgt.n	80755c4 <__gethex+0x320>
 8075556:	f8d8 300c 	ldr.w	r3, [r8, #12]
 807555a:	2b02      	cmp	r3, #2
 807555c:	d02a      	beq.n	80755b4 <__gethex+0x310>
 807555e:	2b03      	cmp	r3, #3
 8075560:	d02c      	beq.n	80755bc <__gethex+0x318>
 8075562:	2b01      	cmp	r3, #1
 8075564:	d115      	bne.n	8075592 <__gethex+0x2ee>
 8075566:	42ae      	cmp	r6, r5
 8075568:	d113      	bne.n	8075592 <__gethex+0x2ee>
 807556a:	2e01      	cmp	r6, #1
 807556c:	d10b      	bne.n	8075586 <__gethex+0x2e2>
 807556e:	9a04      	ldr	r2, [sp, #16]
 8075570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8075574:	6013      	str	r3, [r2, #0]
 8075576:	2301      	movs	r3, #1
 8075578:	6123      	str	r3, [r4, #16]
 807557a:	f8c9 3000 	str.w	r3, [r9]
 807557e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8075580:	2762      	movs	r7, #98	; 0x62
 8075582:	601c      	str	r4, [r3, #0]
 8075584:	e723      	b.n	80753ce <__gethex+0x12a>
 8075586:	1e71      	subs	r1, r6, #1
 8075588:	4620      	mov	r0, r4
 807558a:	f000 fe69 	bl	8076260 <__any_on>
 807558e:	2800      	cmp	r0, #0
 8075590:	d1ed      	bne.n	807556e <__gethex+0x2ca>
 8075592:	ee18 0a10 	vmov	r0, s16
 8075596:	4621      	mov	r1, r4
 8075598:	f000 fa08 	bl	80759ac <_Bfree>
 807559c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 807559e:	2300      	movs	r3, #0
 80755a0:	6013      	str	r3, [r2, #0]
 80755a2:	2750      	movs	r7, #80	; 0x50
 80755a4:	e713      	b.n	80753ce <__gethex+0x12a>
 80755a6:	bf00      	nop
 80755a8:	08077850 	.word	0x08077850
 80755ac:	080777d4 	.word	0x080777d4
 80755b0:	080777e5 	.word	0x080777e5
 80755b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80755b6:	2b00      	cmp	r3, #0
 80755b8:	d1eb      	bne.n	8075592 <__gethex+0x2ee>
 80755ba:	e7d8      	b.n	807556e <__gethex+0x2ca>
 80755bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80755be:	2b00      	cmp	r3, #0
 80755c0:	d1d5      	bne.n	807556e <__gethex+0x2ca>
 80755c2:	e7e6      	b.n	8075592 <__gethex+0x2ee>
 80755c4:	1e6f      	subs	r7, r5, #1
 80755c6:	f1ba 0f00 	cmp.w	sl, #0
 80755ca:	d131      	bne.n	8075630 <__gethex+0x38c>
 80755cc:	b127      	cbz	r7, 80755d8 <__gethex+0x334>
 80755ce:	4639      	mov	r1, r7
 80755d0:	4620      	mov	r0, r4
 80755d2:	f000 fe45 	bl	8076260 <__any_on>
 80755d6:	4682      	mov	sl, r0
 80755d8:	117b      	asrs	r3, r7, #5
 80755da:	2101      	movs	r1, #1
 80755dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80755e0:	f007 071f 	and.w	r7, r7, #31
 80755e4:	fa01 f707 	lsl.w	r7, r1, r7
 80755e8:	421f      	tst	r7, r3
 80755ea:	4629      	mov	r1, r5
 80755ec:	4620      	mov	r0, r4
 80755ee:	bf18      	it	ne
 80755f0:	f04a 0a02 	orrne.w	sl, sl, #2
 80755f4:	1b76      	subs	r6, r6, r5
 80755f6:	f7ff fded 	bl	80751d4 <rshift>
 80755fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80755fe:	2702      	movs	r7, #2
 8075600:	f1ba 0f00 	cmp.w	sl, #0
 8075604:	d048      	beq.n	8075698 <__gethex+0x3f4>
 8075606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 807560a:	2b02      	cmp	r3, #2
 807560c:	d015      	beq.n	807563a <__gethex+0x396>
 807560e:	2b03      	cmp	r3, #3
 8075610:	d017      	beq.n	8075642 <__gethex+0x39e>
 8075612:	2b01      	cmp	r3, #1
 8075614:	d109      	bne.n	807562a <__gethex+0x386>
 8075616:	f01a 0f02 	tst.w	sl, #2
 807561a:	d006      	beq.n	807562a <__gethex+0x386>
 807561c:	f8d9 0000 	ldr.w	r0, [r9]
 8075620:	ea4a 0a00 	orr.w	sl, sl, r0
 8075624:	f01a 0f01 	tst.w	sl, #1
 8075628:	d10e      	bne.n	8075648 <__gethex+0x3a4>
 807562a:	f047 0710 	orr.w	r7, r7, #16
 807562e:	e033      	b.n	8075698 <__gethex+0x3f4>
 8075630:	f04f 0a01 	mov.w	sl, #1
 8075634:	e7d0      	b.n	80755d8 <__gethex+0x334>
 8075636:	2701      	movs	r7, #1
 8075638:	e7e2      	b.n	8075600 <__gethex+0x35c>
 807563a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 807563c:	f1c3 0301 	rsb	r3, r3, #1
 8075640:	9315      	str	r3, [sp, #84]	; 0x54
 8075642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8075644:	2b00      	cmp	r3, #0
 8075646:	d0f0      	beq.n	807562a <__gethex+0x386>
 8075648:	f8d4 b010 	ldr.w	fp, [r4, #16]
 807564c:	f104 0314 	add.w	r3, r4, #20
 8075650:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8075654:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8075658:	f04f 0c00 	mov.w	ip, #0
 807565c:	4618      	mov	r0, r3
 807565e:	f853 2b04 	ldr.w	r2, [r3], #4
 8075662:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8075666:	d01c      	beq.n	80756a2 <__gethex+0x3fe>
 8075668:	3201      	adds	r2, #1
 807566a:	6002      	str	r2, [r0, #0]
 807566c:	2f02      	cmp	r7, #2
 807566e:	f104 0314 	add.w	r3, r4, #20
 8075672:	d13f      	bne.n	80756f4 <__gethex+0x450>
 8075674:	f8d8 2000 	ldr.w	r2, [r8]
 8075678:	3a01      	subs	r2, #1
 807567a:	42b2      	cmp	r2, r6
 807567c:	d10a      	bne.n	8075694 <__gethex+0x3f0>
 807567e:	1171      	asrs	r1, r6, #5
 8075680:	2201      	movs	r2, #1
 8075682:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8075686:	f006 061f 	and.w	r6, r6, #31
 807568a:	fa02 f606 	lsl.w	r6, r2, r6
 807568e:	421e      	tst	r6, r3
 8075690:	bf18      	it	ne
 8075692:	4617      	movne	r7, r2
 8075694:	f047 0720 	orr.w	r7, r7, #32
 8075698:	9b14      	ldr	r3, [sp, #80]	; 0x50
 807569a:	601c      	str	r4, [r3, #0]
 807569c:	9b04      	ldr	r3, [sp, #16]
 807569e:	601d      	str	r5, [r3, #0]
 80756a0:	e695      	b.n	80753ce <__gethex+0x12a>
 80756a2:	4299      	cmp	r1, r3
 80756a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80756a8:	d8d8      	bhi.n	807565c <__gethex+0x3b8>
 80756aa:	68a3      	ldr	r3, [r4, #8]
 80756ac:	459b      	cmp	fp, r3
 80756ae:	db19      	blt.n	80756e4 <__gethex+0x440>
 80756b0:	6861      	ldr	r1, [r4, #4]
 80756b2:	ee18 0a10 	vmov	r0, s16
 80756b6:	3101      	adds	r1, #1
 80756b8:	f000 f938 	bl	807592c <_Balloc>
 80756bc:	4681      	mov	r9, r0
 80756be:	b918      	cbnz	r0, 80756c8 <__gethex+0x424>
 80756c0:	4b1a      	ldr	r3, [pc, #104]	; (807572c <__gethex+0x488>)
 80756c2:	4602      	mov	r2, r0
 80756c4:	2184      	movs	r1, #132	; 0x84
 80756c6:	e6a8      	b.n	807541a <__gethex+0x176>
 80756c8:	6922      	ldr	r2, [r4, #16]
 80756ca:	3202      	adds	r2, #2
 80756cc:	f104 010c 	add.w	r1, r4, #12
 80756d0:	0092      	lsls	r2, r2, #2
 80756d2:	300c      	adds	r0, #12
 80756d4:	f7fc ff8d 	bl	80725f2 <memcpy>
 80756d8:	4621      	mov	r1, r4
 80756da:	ee18 0a10 	vmov	r0, s16
 80756de:	f000 f965 	bl	80759ac <_Bfree>
 80756e2:	464c      	mov	r4, r9
 80756e4:	6923      	ldr	r3, [r4, #16]
 80756e6:	1c5a      	adds	r2, r3, #1
 80756e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80756ec:	6122      	str	r2, [r4, #16]
 80756ee:	2201      	movs	r2, #1
 80756f0:	615a      	str	r2, [r3, #20]
 80756f2:	e7bb      	b.n	807566c <__gethex+0x3c8>
 80756f4:	6922      	ldr	r2, [r4, #16]
 80756f6:	455a      	cmp	r2, fp
 80756f8:	dd0b      	ble.n	8075712 <__gethex+0x46e>
 80756fa:	2101      	movs	r1, #1
 80756fc:	4620      	mov	r0, r4
 80756fe:	f7ff fd69 	bl	80751d4 <rshift>
 8075702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8075706:	3501      	adds	r5, #1
 8075708:	42ab      	cmp	r3, r5
 807570a:	f6ff aed0 	blt.w	80754ae <__gethex+0x20a>
 807570e:	2701      	movs	r7, #1
 8075710:	e7c0      	b.n	8075694 <__gethex+0x3f0>
 8075712:	f016 061f 	ands.w	r6, r6, #31
 8075716:	d0fa      	beq.n	807570e <__gethex+0x46a>
 8075718:	449a      	add	sl, r3
 807571a:	f1c6 0620 	rsb	r6, r6, #32
 807571e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8075722:	f000 f9f9 	bl	8075b18 <__hi0bits>
 8075726:	42b0      	cmp	r0, r6
 8075728:	dbe7      	blt.n	80756fa <__gethex+0x456>
 807572a:	e7f0      	b.n	807570e <__gethex+0x46a>
 807572c:	080777d4 	.word	0x080777d4

08075730 <L_shift>:
 8075730:	f1c2 0208 	rsb	r2, r2, #8
 8075734:	0092      	lsls	r2, r2, #2
 8075736:	b570      	push	{r4, r5, r6, lr}
 8075738:	f1c2 0620 	rsb	r6, r2, #32
 807573c:	6843      	ldr	r3, [r0, #4]
 807573e:	6804      	ldr	r4, [r0, #0]
 8075740:	fa03 f506 	lsl.w	r5, r3, r6
 8075744:	432c      	orrs	r4, r5
 8075746:	40d3      	lsrs	r3, r2
 8075748:	6004      	str	r4, [r0, #0]
 807574a:	f840 3f04 	str.w	r3, [r0, #4]!
 807574e:	4288      	cmp	r0, r1
 8075750:	d3f4      	bcc.n	807573c <L_shift+0xc>
 8075752:	bd70      	pop	{r4, r5, r6, pc}

08075754 <__match>:
 8075754:	b530      	push	{r4, r5, lr}
 8075756:	6803      	ldr	r3, [r0, #0]
 8075758:	3301      	adds	r3, #1
 807575a:	f811 4b01 	ldrb.w	r4, [r1], #1
 807575e:	b914      	cbnz	r4, 8075766 <__match+0x12>
 8075760:	6003      	str	r3, [r0, #0]
 8075762:	2001      	movs	r0, #1
 8075764:	bd30      	pop	{r4, r5, pc}
 8075766:	f813 2b01 	ldrb.w	r2, [r3], #1
 807576a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 807576e:	2d19      	cmp	r5, #25
 8075770:	bf98      	it	ls
 8075772:	3220      	addls	r2, #32
 8075774:	42a2      	cmp	r2, r4
 8075776:	d0f0      	beq.n	807575a <__match+0x6>
 8075778:	2000      	movs	r0, #0
 807577a:	e7f3      	b.n	8075764 <__match+0x10>

0807577c <__hexnan>:
 807577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8075780:	680b      	ldr	r3, [r1, #0]
 8075782:	6801      	ldr	r1, [r0, #0]
 8075784:	115e      	asrs	r6, r3, #5
 8075786:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 807578a:	f013 031f 	ands.w	r3, r3, #31
 807578e:	b087      	sub	sp, #28
 8075790:	bf18      	it	ne
 8075792:	3604      	addne	r6, #4
 8075794:	2500      	movs	r5, #0
 8075796:	1f37      	subs	r7, r6, #4
 8075798:	4682      	mov	sl, r0
 807579a:	4690      	mov	r8, r2
 807579c:	9301      	str	r3, [sp, #4]
 807579e:	f846 5c04 	str.w	r5, [r6, #-4]
 80757a2:	46b9      	mov	r9, r7
 80757a4:	463c      	mov	r4, r7
 80757a6:	9502      	str	r5, [sp, #8]
 80757a8:	46ab      	mov	fp, r5
 80757aa:	784a      	ldrb	r2, [r1, #1]
 80757ac:	1c4b      	adds	r3, r1, #1
 80757ae:	9303      	str	r3, [sp, #12]
 80757b0:	b342      	cbz	r2, 8075804 <__hexnan+0x88>
 80757b2:	4610      	mov	r0, r2
 80757b4:	9105      	str	r1, [sp, #20]
 80757b6:	9204      	str	r2, [sp, #16]
 80757b8:	f7ff fd5e 	bl	8075278 <__hexdig_fun>
 80757bc:	2800      	cmp	r0, #0
 80757be:	d14f      	bne.n	8075860 <__hexnan+0xe4>
 80757c0:	9a04      	ldr	r2, [sp, #16]
 80757c2:	9905      	ldr	r1, [sp, #20]
 80757c4:	2a20      	cmp	r2, #32
 80757c6:	d818      	bhi.n	80757fa <__hexnan+0x7e>
 80757c8:	9b02      	ldr	r3, [sp, #8]
 80757ca:	459b      	cmp	fp, r3
 80757cc:	dd13      	ble.n	80757f6 <__hexnan+0x7a>
 80757ce:	454c      	cmp	r4, r9
 80757d0:	d206      	bcs.n	80757e0 <__hexnan+0x64>
 80757d2:	2d07      	cmp	r5, #7
 80757d4:	dc04      	bgt.n	80757e0 <__hexnan+0x64>
 80757d6:	462a      	mov	r2, r5
 80757d8:	4649      	mov	r1, r9
 80757da:	4620      	mov	r0, r4
 80757dc:	f7ff ffa8 	bl	8075730 <L_shift>
 80757e0:	4544      	cmp	r4, r8
 80757e2:	d950      	bls.n	8075886 <__hexnan+0x10a>
 80757e4:	2300      	movs	r3, #0
 80757e6:	f1a4 0904 	sub.w	r9, r4, #4
 80757ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80757ee:	f8cd b008 	str.w	fp, [sp, #8]
 80757f2:	464c      	mov	r4, r9
 80757f4:	461d      	mov	r5, r3
 80757f6:	9903      	ldr	r1, [sp, #12]
 80757f8:	e7d7      	b.n	80757aa <__hexnan+0x2e>
 80757fa:	2a29      	cmp	r2, #41	; 0x29
 80757fc:	d156      	bne.n	80758ac <__hexnan+0x130>
 80757fe:	3102      	adds	r1, #2
 8075800:	f8ca 1000 	str.w	r1, [sl]
 8075804:	f1bb 0f00 	cmp.w	fp, #0
 8075808:	d050      	beq.n	80758ac <__hexnan+0x130>
 807580a:	454c      	cmp	r4, r9
 807580c:	d206      	bcs.n	807581c <__hexnan+0xa0>
 807580e:	2d07      	cmp	r5, #7
 8075810:	dc04      	bgt.n	807581c <__hexnan+0xa0>
 8075812:	462a      	mov	r2, r5
 8075814:	4649      	mov	r1, r9
 8075816:	4620      	mov	r0, r4
 8075818:	f7ff ff8a 	bl	8075730 <L_shift>
 807581c:	4544      	cmp	r4, r8
 807581e:	d934      	bls.n	807588a <__hexnan+0x10e>
 8075820:	f1a8 0204 	sub.w	r2, r8, #4
 8075824:	4623      	mov	r3, r4
 8075826:	f853 1b04 	ldr.w	r1, [r3], #4
 807582a:	f842 1f04 	str.w	r1, [r2, #4]!
 807582e:	429f      	cmp	r7, r3
 8075830:	d2f9      	bcs.n	8075826 <__hexnan+0xaa>
 8075832:	1b3b      	subs	r3, r7, r4
 8075834:	f023 0303 	bic.w	r3, r3, #3
 8075838:	3304      	adds	r3, #4
 807583a:	3401      	adds	r4, #1
 807583c:	3e03      	subs	r6, #3
 807583e:	42b4      	cmp	r4, r6
 8075840:	bf88      	it	hi
 8075842:	2304      	movhi	r3, #4
 8075844:	4443      	add	r3, r8
 8075846:	2200      	movs	r2, #0
 8075848:	f843 2b04 	str.w	r2, [r3], #4
 807584c:	429f      	cmp	r7, r3
 807584e:	d2fb      	bcs.n	8075848 <__hexnan+0xcc>
 8075850:	683b      	ldr	r3, [r7, #0]
 8075852:	b91b      	cbnz	r3, 807585c <__hexnan+0xe0>
 8075854:	4547      	cmp	r7, r8
 8075856:	d127      	bne.n	80758a8 <__hexnan+0x12c>
 8075858:	2301      	movs	r3, #1
 807585a:	603b      	str	r3, [r7, #0]
 807585c:	2005      	movs	r0, #5
 807585e:	e026      	b.n	80758ae <__hexnan+0x132>
 8075860:	3501      	adds	r5, #1
 8075862:	2d08      	cmp	r5, #8
 8075864:	f10b 0b01 	add.w	fp, fp, #1
 8075868:	dd06      	ble.n	8075878 <__hexnan+0xfc>
 807586a:	4544      	cmp	r4, r8
 807586c:	d9c3      	bls.n	80757f6 <__hexnan+0x7a>
 807586e:	2300      	movs	r3, #0
 8075870:	f844 3c04 	str.w	r3, [r4, #-4]
 8075874:	2501      	movs	r5, #1
 8075876:	3c04      	subs	r4, #4
 8075878:	6822      	ldr	r2, [r4, #0]
 807587a:	f000 000f 	and.w	r0, r0, #15
 807587e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8075882:	6022      	str	r2, [r4, #0]
 8075884:	e7b7      	b.n	80757f6 <__hexnan+0x7a>
 8075886:	2508      	movs	r5, #8
 8075888:	e7b5      	b.n	80757f6 <__hexnan+0x7a>
 807588a:	9b01      	ldr	r3, [sp, #4]
 807588c:	2b00      	cmp	r3, #0
 807588e:	d0df      	beq.n	8075850 <__hexnan+0xd4>
 8075890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8075894:	f1c3 0320 	rsb	r3, r3, #32
 8075898:	fa22 f303 	lsr.w	r3, r2, r3
 807589c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80758a0:	401a      	ands	r2, r3
 80758a2:	f846 2c04 	str.w	r2, [r6, #-4]
 80758a6:	e7d3      	b.n	8075850 <__hexnan+0xd4>
 80758a8:	3f04      	subs	r7, #4
 80758aa:	e7d1      	b.n	8075850 <__hexnan+0xd4>
 80758ac:	2004      	movs	r0, #4
 80758ae:	b007      	add	sp, #28
 80758b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080758b4 <_localeconv_r>:
 80758b4:	4800      	ldr	r0, [pc, #0]	; (80758b8 <_localeconv_r+0x4>)
 80758b6:	4770      	bx	lr
 80758b8:	20000180 	.word	0x20000180

080758bc <_lseek_r>:
 80758bc:	b538      	push	{r3, r4, r5, lr}
 80758be:	4d07      	ldr	r5, [pc, #28]	; (80758dc <_lseek_r+0x20>)
 80758c0:	4604      	mov	r4, r0
 80758c2:	4608      	mov	r0, r1
 80758c4:	4611      	mov	r1, r2
 80758c6:	2200      	movs	r2, #0
 80758c8:	602a      	str	r2, [r5, #0]
 80758ca:	461a      	mov	r2, r3
 80758cc:	f7ed fddc 	bl	8063488 <_lseek>
 80758d0:	1c43      	adds	r3, r0, #1
 80758d2:	d102      	bne.n	80758da <_lseek_r+0x1e>
 80758d4:	682b      	ldr	r3, [r5, #0]
 80758d6:	b103      	cbz	r3, 80758da <_lseek_r+0x1e>
 80758d8:	6023      	str	r3, [r4, #0]
 80758da:	bd38      	pop	{r3, r4, r5, pc}
 80758dc:	20005d34 	.word	0x20005d34

080758e0 <malloc>:
 80758e0:	4b02      	ldr	r3, [pc, #8]	; (80758ec <malloc+0xc>)
 80758e2:	4601      	mov	r1, r0
 80758e4:	6818      	ldr	r0, [r3, #0]
 80758e6:	f7fc be9b 	b.w	8072620 <_malloc_r>
 80758ea:	bf00      	nop
 80758ec:	20000028 	.word	0x20000028

080758f0 <__ascii_mbtowc>:
 80758f0:	b082      	sub	sp, #8
 80758f2:	b901      	cbnz	r1, 80758f6 <__ascii_mbtowc+0x6>
 80758f4:	a901      	add	r1, sp, #4
 80758f6:	b142      	cbz	r2, 807590a <__ascii_mbtowc+0x1a>
 80758f8:	b14b      	cbz	r3, 807590e <__ascii_mbtowc+0x1e>
 80758fa:	7813      	ldrb	r3, [r2, #0]
 80758fc:	600b      	str	r3, [r1, #0]
 80758fe:	7812      	ldrb	r2, [r2, #0]
 8075900:	1e10      	subs	r0, r2, #0
 8075902:	bf18      	it	ne
 8075904:	2001      	movne	r0, #1
 8075906:	b002      	add	sp, #8
 8075908:	4770      	bx	lr
 807590a:	4610      	mov	r0, r2
 807590c:	e7fb      	b.n	8075906 <__ascii_mbtowc+0x16>
 807590e:	f06f 0001 	mvn.w	r0, #1
 8075912:	e7f8      	b.n	8075906 <__ascii_mbtowc+0x16>

08075914 <__malloc_lock>:
 8075914:	4801      	ldr	r0, [pc, #4]	; (807591c <__malloc_lock+0x8>)
 8075916:	f7fc be6a 	b.w	80725ee <__retarget_lock_acquire_recursive>
 807591a:	bf00      	nop
 807591c:	20005d2c 	.word	0x20005d2c

08075920 <__malloc_unlock>:
 8075920:	4801      	ldr	r0, [pc, #4]	; (8075928 <__malloc_unlock+0x8>)
 8075922:	f7fc be65 	b.w	80725f0 <__retarget_lock_release_recursive>
 8075926:	bf00      	nop
 8075928:	20005d2c 	.word	0x20005d2c

0807592c <_Balloc>:
 807592c:	b570      	push	{r4, r5, r6, lr}
 807592e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8075930:	4604      	mov	r4, r0
 8075932:	460d      	mov	r5, r1
 8075934:	b976      	cbnz	r6, 8075954 <_Balloc+0x28>
 8075936:	2010      	movs	r0, #16
 8075938:	f7ff ffd2 	bl	80758e0 <malloc>
 807593c:	4602      	mov	r2, r0
 807593e:	6260      	str	r0, [r4, #36]	; 0x24
 8075940:	b920      	cbnz	r0, 807594c <_Balloc+0x20>
 8075942:	4b18      	ldr	r3, [pc, #96]	; (80759a4 <_Balloc+0x78>)
 8075944:	4818      	ldr	r0, [pc, #96]	; (80759a8 <_Balloc+0x7c>)
 8075946:	2166      	movs	r1, #102	; 0x66
 8075948:	f001 f8a8 	bl	8076a9c <__assert_func>
 807594c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8075950:	6006      	str	r6, [r0, #0]
 8075952:	60c6      	str	r6, [r0, #12]
 8075954:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8075956:	68f3      	ldr	r3, [r6, #12]
 8075958:	b183      	cbz	r3, 807597c <_Balloc+0x50>
 807595a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 807595c:	68db      	ldr	r3, [r3, #12]
 807595e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8075962:	b9b8      	cbnz	r0, 8075994 <_Balloc+0x68>
 8075964:	2101      	movs	r1, #1
 8075966:	fa01 f605 	lsl.w	r6, r1, r5
 807596a:	1d72      	adds	r2, r6, #5
 807596c:	0092      	lsls	r2, r2, #2
 807596e:	4620      	mov	r0, r4
 8075970:	f000 fc97 	bl	80762a2 <_calloc_r>
 8075974:	b160      	cbz	r0, 8075990 <_Balloc+0x64>
 8075976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 807597a:	e00e      	b.n	807599a <_Balloc+0x6e>
 807597c:	2221      	movs	r2, #33	; 0x21
 807597e:	2104      	movs	r1, #4
 8075980:	4620      	mov	r0, r4
 8075982:	f000 fc8e 	bl	80762a2 <_calloc_r>
 8075986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8075988:	60f0      	str	r0, [r6, #12]
 807598a:	68db      	ldr	r3, [r3, #12]
 807598c:	2b00      	cmp	r3, #0
 807598e:	d1e4      	bne.n	807595a <_Balloc+0x2e>
 8075990:	2000      	movs	r0, #0
 8075992:	bd70      	pop	{r4, r5, r6, pc}
 8075994:	6802      	ldr	r2, [r0, #0]
 8075996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 807599a:	2300      	movs	r3, #0
 807599c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80759a0:	e7f7      	b.n	8075992 <_Balloc+0x66>
 80759a2:	bf00      	nop
 80759a4:	0807775e 	.word	0x0807775e
 80759a8:	08077864 	.word	0x08077864

080759ac <_Bfree>:
 80759ac:	b570      	push	{r4, r5, r6, lr}
 80759ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80759b0:	4605      	mov	r5, r0
 80759b2:	460c      	mov	r4, r1
 80759b4:	b976      	cbnz	r6, 80759d4 <_Bfree+0x28>
 80759b6:	2010      	movs	r0, #16
 80759b8:	f7ff ff92 	bl	80758e0 <malloc>
 80759bc:	4602      	mov	r2, r0
 80759be:	6268      	str	r0, [r5, #36]	; 0x24
 80759c0:	b920      	cbnz	r0, 80759cc <_Bfree+0x20>
 80759c2:	4b09      	ldr	r3, [pc, #36]	; (80759e8 <_Bfree+0x3c>)
 80759c4:	4809      	ldr	r0, [pc, #36]	; (80759ec <_Bfree+0x40>)
 80759c6:	218a      	movs	r1, #138	; 0x8a
 80759c8:	f001 f868 	bl	8076a9c <__assert_func>
 80759cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80759d0:	6006      	str	r6, [r0, #0]
 80759d2:	60c6      	str	r6, [r0, #12]
 80759d4:	b13c      	cbz	r4, 80759e6 <_Bfree+0x3a>
 80759d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80759d8:	6862      	ldr	r2, [r4, #4]
 80759da:	68db      	ldr	r3, [r3, #12]
 80759dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80759e0:	6021      	str	r1, [r4, #0]
 80759e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80759e6:	bd70      	pop	{r4, r5, r6, pc}
 80759e8:	0807775e 	.word	0x0807775e
 80759ec:	08077864 	.word	0x08077864

080759f0 <__multadd>:
 80759f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80759f4:	690e      	ldr	r6, [r1, #16]
 80759f6:	4607      	mov	r7, r0
 80759f8:	4698      	mov	r8, r3
 80759fa:	460c      	mov	r4, r1
 80759fc:	f101 0014 	add.w	r0, r1, #20
 8075a00:	2300      	movs	r3, #0
 8075a02:	6805      	ldr	r5, [r0, #0]
 8075a04:	b2a9      	uxth	r1, r5
 8075a06:	fb02 8101 	mla	r1, r2, r1, r8
 8075a0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8075a0e:	0c2d      	lsrs	r5, r5, #16
 8075a10:	fb02 c505 	mla	r5, r2, r5, ip
 8075a14:	b289      	uxth	r1, r1
 8075a16:	3301      	adds	r3, #1
 8075a18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8075a1c:	429e      	cmp	r6, r3
 8075a1e:	f840 1b04 	str.w	r1, [r0], #4
 8075a22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8075a26:	dcec      	bgt.n	8075a02 <__multadd+0x12>
 8075a28:	f1b8 0f00 	cmp.w	r8, #0
 8075a2c:	d022      	beq.n	8075a74 <__multadd+0x84>
 8075a2e:	68a3      	ldr	r3, [r4, #8]
 8075a30:	42b3      	cmp	r3, r6
 8075a32:	dc19      	bgt.n	8075a68 <__multadd+0x78>
 8075a34:	6861      	ldr	r1, [r4, #4]
 8075a36:	4638      	mov	r0, r7
 8075a38:	3101      	adds	r1, #1
 8075a3a:	f7ff ff77 	bl	807592c <_Balloc>
 8075a3e:	4605      	mov	r5, r0
 8075a40:	b928      	cbnz	r0, 8075a4e <__multadd+0x5e>
 8075a42:	4602      	mov	r2, r0
 8075a44:	4b0d      	ldr	r3, [pc, #52]	; (8075a7c <__multadd+0x8c>)
 8075a46:	480e      	ldr	r0, [pc, #56]	; (8075a80 <__multadd+0x90>)
 8075a48:	21b5      	movs	r1, #181	; 0xb5
 8075a4a:	f001 f827 	bl	8076a9c <__assert_func>
 8075a4e:	6922      	ldr	r2, [r4, #16]
 8075a50:	3202      	adds	r2, #2
 8075a52:	f104 010c 	add.w	r1, r4, #12
 8075a56:	0092      	lsls	r2, r2, #2
 8075a58:	300c      	adds	r0, #12
 8075a5a:	f7fc fdca 	bl	80725f2 <memcpy>
 8075a5e:	4621      	mov	r1, r4
 8075a60:	4638      	mov	r0, r7
 8075a62:	f7ff ffa3 	bl	80759ac <_Bfree>
 8075a66:	462c      	mov	r4, r5
 8075a68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8075a6c:	3601      	adds	r6, #1
 8075a6e:	f8c3 8014 	str.w	r8, [r3, #20]
 8075a72:	6126      	str	r6, [r4, #16]
 8075a74:	4620      	mov	r0, r4
 8075a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8075a7a:	bf00      	nop
 8075a7c:	080777d4 	.word	0x080777d4
 8075a80:	08077864 	.word	0x08077864

08075a84 <__s2b>:
 8075a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8075a88:	460c      	mov	r4, r1
 8075a8a:	4615      	mov	r5, r2
 8075a8c:	461f      	mov	r7, r3
 8075a8e:	2209      	movs	r2, #9
 8075a90:	3308      	adds	r3, #8
 8075a92:	4606      	mov	r6, r0
 8075a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8075a98:	2100      	movs	r1, #0
 8075a9a:	2201      	movs	r2, #1
 8075a9c:	429a      	cmp	r2, r3
 8075a9e:	db09      	blt.n	8075ab4 <__s2b+0x30>
 8075aa0:	4630      	mov	r0, r6
 8075aa2:	f7ff ff43 	bl	807592c <_Balloc>
 8075aa6:	b940      	cbnz	r0, 8075aba <__s2b+0x36>
 8075aa8:	4602      	mov	r2, r0
 8075aaa:	4b19      	ldr	r3, [pc, #100]	; (8075b10 <__s2b+0x8c>)
 8075aac:	4819      	ldr	r0, [pc, #100]	; (8075b14 <__s2b+0x90>)
 8075aae:	21ce      	movs	r1, #206	; 0xce
 8075ab0:	f000 fff4 	bl	8076a9c <__assert_func>
 8075ab4:	0052      	lsls	r2, r2, #1
 8075ab6:	3101      	adds	r1, #1
 8075ab8:	e7f0      	b.n	8075a9c <__s2b+0x18>
 8075aba:	9b08      	ldr	r3, [sp, #32]
 8075abc:	6143      	str	r3, [r0, #20]
 8075abe:	2d09      	cmp	r5, #9
 8075ac0:	f04f 0301 	mov.w	r3, #1
 8075ac4:	6103      	str	r3, [r0, #16]
 8075ac6:	dd16      	ble.n	8075af6 <__s2b+0x72>
 8075ac8:	f104 0909 	add.w	r9, r4, #9
 8075acc:	46c8      	mov	r8, r9
 8075ace:	442c      	add	r4, r5
 8075ad0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8075ad4:	4601      	mov	r1, r0
 8075ad6:	3b30      	subs	r3, #48	; 0x30
 8075ad8:	220a      	movs	r2, #10
 8075ada:	4630      	mov	r0, r6
 8075adc:	f7ff ff88 	bl	80759f0 <__multadd>
 8075ae0:	45a0      	cmp	r8, r4
 8075ae2:	d1f5      	bne.n	8075ad0 <__s2b+0x4c>
 8075ae4:	f1a5 0408 	sub.w	r4, r5, #8
 8075ae8:	444c      	add	r4, r9
 8075aea:	1b2d      	subs	r5, r5, r4
 8075aec:	1963      	adds	r3, r4, r5
 8075aee:	42bb      	cmp	r3, r7
 8075af0:	db04      	blt.n	8075afc <__s2b+0x78>
 8075af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8075af6:	340a      	adds	r4, #10
 8075af8:	2509      	movs	r5, #9
 8075afa:	e7f6      	b.n	8075aea <__s2b+0x66>
 8075afc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8075b00:	4601      	mov	r1, r0
 8075b02:	3b30      	subs	r3, #48	; 0x30
 8075b04:	220a      	movs	r2, #10
 8075b06:	4630      	mov	r0, r6
 8075b08:	f7ff ff72 	bl	80759f0 <__multadd>
 8075b0c:	e7ee      	b.n	8075aec <__s2b+0x68>
 8075b0e:	bf00      	nop
 8075b10:	080777d4 	.word	0x080777d4
 8075b14:	08077864 	.word	0x08077864

08075b18 <__hi0bits>:
 8075b18:	0c03      	lsrs	r3, r0, #16
 8075b1a:	041b      	lsls	r3, r3, #16
 8075b1c:	b9d3      	cbnz	r3, 8075b54 <__hi0bits+0x3c>
 8075b1e:	0400      	lsls	r0, r0, #16
 8075b20:	2310      	movs	r3, #16
 8075b22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8075b26:	bf04      	itt	eq
 8075b28:	0200      	lsleq	r0, r0, #8
 8075b2a:	3308      	addeq	r3, #8
 8075b2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8075b30:	bf04      	itt	eq
 8075b32:	0100      	lsleq	r0, r0, #4
 8075b34:	3304      	addeq	r3, #4
 8075b36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8075b3a:	bf04      	itt	eq
 8075b3c:	0080      	lsleq	r0, r0, #2
 8075b3e:	3302      	addeq	r3, #2
 8075b40:	2800      	cmp	r0, #0
 8075b42:	db05      	blt.n	8075b50 <__hi0bits+0x38>
 8075b44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8075b48:	f103 0301 	add.w	r3, r3, #1
 8075b4c:	bf08      	it	eq
 8075b4e:	2320      	moveq	r3, #32
 8075b50:	4618      	mov	r0, r3
 8075b52:	4770      	bx	lr
 8075b54:	2300      	movs	r3, #0
 8075b56:	e7e4      	b.n	8075b22 <__hi0bits+0xa>

08075b58 <__lo0bits>:
 8075b58:	6803      	ldr	r3, [r0, #0]
 8075b5a:	f013 0207 	ands.w	r2, r3, #7
 8075b5e:	4601      	mov	r1, r0
 8075b60:	d00b      	beq.n	8075b7a <__lo0bits+0x22>
 8075b62:	07da      	lsls	r2, r3, #31
 8075b64:	d424      	bmi.n	8075bb0 <__lo0bits+0x58>
 8075b66:	0798      	lsls	r0, r3, #30
 8075b68:	bf49      	itett	mi
 8075b6a:	085b      	lsrmi	r3, r3, #1
 8075b6c:	089b      	lsrpl	r3, r3, #2
 8075b6e:	2001      	movmi	r0, #1
 8075b70:	600b      	strmi	r3, [r1, #0]
 8075b72:	bf5c      	itt	pl
 8075b74:	600b      	strpl	r3, [r1, #0]
 8075b76:	2002      	movpl	r0, #2
 8075b78:	4770      	bx	lr
 8075b7a:	b298      	uxth	r0, r3
 8075b7c:	b9b0      	cbnz	r0, 8075bac <__lo0bits+0x54>
 8075b7e:	0c1b      	lsrs	r3, r3, #16
 8075b80:	2010      	movs	r0, #16
 8075b82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8075b86:	bf04      	itt	eq
 8075b88:	0a1b      	lsreq	r3, r3, #8
 8075b8a:	3008      	addeq	r0, #8
 8075b8c:	071a      	lsls	r2, r3, #28
 8075b8e:	bf04      	itt	eq
 8075b90:	091b      	lsreq	r3, r3, #4
 8075b92:	3004      	addeq	r0, #4
 8075b94:	079a      	lsls	r2, r3, #30
 8075b96:	bf04      	itt	eq
 8075b98:	089b      	lsreq	r3, r3, #2
 8075b9a:	3002      	addeq	r0, #2
 8075b9c:	07da      	lsls	r2, r3, #31
 8075b9e:	d403      	bmi.n	8075ba8 <__lo0bits+0x50>
 8075ba0:	085b      	lsrs	r3, r3, #1
 8075ba2:	f100 0001 	add.w	r0, r0, #1
 8075ba6:	d005      	beq.n	8075bb4 <__lo0bits+0x5c>
 8075ba8:	600b      	str	r3, [r1, #0]
 8075baa:	4770      	bx	lr
 8075bac:	4610      	mov	r0, r2
 8075bae:	e7e8      	b.n	8075b82 <__lo0bits+0x2a>
 8075bb0:	2000      	movs	r0, #0
 8075bb2:	4770      	bx	lr
 8075bb4:	2020      	movs	r0, #32
 8075bb6:	4770      	bx	lr

08075bb8 <__i2b>:
 8075bb8:	b510      	push	{r4, lr}
 8075bba:	460c      	mov	r4, r1
 8075bbc:	2101      	movs	r1, #1
 8075bbe:	f7ff feb5 	bl	807592c <_Balloc>
 8075bc2:	4602      	mov	r2, r0
 8075bc4:	b928      	cbnz	r0, 8075bd2 <__i2b+0x1a>
 8075bc6:	4b05      	ldr	r3, [pc, #20]	; (8075bdc <__i2b+0x24>)
 8075bc8:	4805      	ldr	r0, [pc, #20]	; (8075be0 <__i2b+0x28>)
 8075bca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8075bce:	f000 ff65 	bl	8076a9c <__assert_func>
 8075bd2:	2301      	movs	r3, #1
 8075bd4:	6144      	str	r4, [r0, #20]
 8075bd6:	6103      	str	r3, [r0, #16]
 8075bd8:	bd10      	pop	{r4, pc}
 8075bda:	bf00      	nop
 8075bdc:	080777d4 	.word	0x080777d4
 8075be0:	08077864 	.word	0x08077864

08075be4 <__multiply>:
 8075be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8075be8:	4614      	mov	r4, r2
 8075bea:	690a      	ldr	r2, [r1, #16]
 8075bec:	6923      	ldr	r3, [r4, #16]
 8075bee:	429a      	cmp	r2, r3
 8075bf0:	bfb8      	it	lt
 8075bf2:	460b      	movlt	r3, r1
 8075bf4:	460d      	mov	r5, r1
 8075bf6:	bfbc      	itt	lt
 8075bf8:	4625      	movlt	r5, r4
 8075bfa:	461c      	movlt	r4, r3
 8075bfc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8075c00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8075c04:	68ab      	ldr	r3, [r5, #8]
 8075c06:	6869      	ldr	r1, [r5, #4]
 8075c08:	eb0a 0709 	add.w	r7, sl, r9
 8075c0c:	42bb      	cmp	r3, r7
 8075c0e:	b085      	sub	sp, #20
 8075c10:	bfb8      	it	lt
 8075c12:	3101      	addlt	r1, #1
 8075c14:	f7ff fe8a 	bl	807592c <_Balloc>
 8075c18:	b930      	cbnz	r0, 8075c28 <__multiply+0x44>
 8075c1a:	4602      	mov	r2, r0
 8075c1c:	4b42      	ldr	r3, [pc, #264]	; (8075d28 <__multiply+0x144>)
 8075c1e:	4843      	ldr	r0, [pc, #268]	; (8075d2c <__multiply+0x148>)
 8075c20:	f240 115d 	movw	r1, #349	; 0x15d
 8075c24:	f000 ff3a 	bl	8076a9c <__assert_func>
 8075c28:	f100 0614 	add.w	r6, r0, #20
 8075c2c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8075c30:	4633      	mov	r3, r6
 8075c32:	2200      	movs	r2, #0
 8075c34:	4543      	cmp	r3, r8
 8075c36:	d31e      	bcc.n	8075c76 <__multiply+0x92>
 8075c38:	f105 0c14 	add.w	ip, r5, #20
 8075c3c:	f104 0314 	add.w	r3, r4, #20
 8075c40:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8075c44:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8075c48:	9202      	str	r2, [sp, #8]
 8075c4a:	ebac 0205 	sub.w	r2, ip, r5
 8075c4e:	3a15      	subs	r2, #21
 8075c50:	f022 0203 	bic.w	r2, r2, #3
 8075c54:	3204      	adds	r2, #4
 8075c56:	f105 0115 	add.w	r1, r5, #21
 8075c5a:	458c      	cmp	ip, r1
 8075c5c:	bf38      	it	cc
 8075c5e:	2204      	movcc	r2, #4
 8075c60:	9201      	str	r2, [sp, #4]
 8075c62:	9a02      	ldr	r2, [sp, #8]
 8075c64:	9303      	str	r3, [sp, #12]
 8075c66:	429a      	cmp	r2, r3
 8075c68:	d808      	bhi.n	8075c7c <__multiply+0x98>
 8075c6a:	2f00      	cmp	r7, #0
 8075c6c:	dc55      	bgt.n	8075d1a <__multiply+0x136>
 8075c6e:	6107      	str	r7, [r0, #16]
 8075c70:	b005      	add	sp, #20
 8075c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8075c76:	f843 2b04 	str.w	r2, [r3], #4
 8075c7a:	e7db      	b.n	8075c34 <__multiply+0x50>
 8075c7c:	f8b3 a000 	ldrh.w	sl, [r3]
 8075c80:	f1ba 0f00 	cmp.w	sl, #0
 8075c84:	d020      	beq.n	8075cc8 <__multiply+0xe4>
 8075c86:	f105 0e14 	add.w	lr, r5, #20
 8075c8a:	46b1      	mov	r9, r6
 8075c8c:	2200      	movs	r2, #0
 8075c8e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8075c92:	f8d9 b000 	ldr.w	fp, [r9]
 8075c96:	b2a1      	uxth	r1, r4
 8075c98:	fa1f fb8b 	uxth.w	fp, fp
 8075c9c:	fb0a b101 	mla	r1, sl, r1, fp
 8075ca0:	4411      	add	r1, r2
 8075ca2:	f8d9 2000 	ldr.w	r2, [r9]
 8075ca6:	0c24      	lsrs	r4, r4, #16
 8075ca8:	0c12      	lsrs	r2, r2, #16
 8075caa:	fb0a 2404 	mla	r4, sl, r4, r2
 8075cae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8075cb2:	b289      	uxth	r1, r1
 8075cb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8075cb8:	45f4      	cmp	ip, lr
 8075cba:	f849 1b04 	str.w	r1, [r9], #4
 8075cbe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8075cc2:	d8e4      	bhi.n	8075c8e <__multiply+0xaa>
 8075cc4:	9901      	ldr	r1, [sp, #4]
 8075cc6:	5072      	str	r2, [r6, r1]
 8075cc8:	9a03      	ldr	r2, [sp, #12]
 8075cca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8075cce:	3304      	adds	r3, #4
 8075cd0:	f1b9 0f00 	cmp.w	r9, #0
 8075cd4:	d01f      	beq.n	8075d16 <__multiply+0x132>
 8075cd6:	6834      	ldr	r4, [r6, #0]
 8075cd8:	f105 0114 	add.w	r1, r5, #20
 8075cdc:	46b6      	mov	lr, r6
 8075cde:	f04f 0a00 	mov.w	sl, #0
 8075ce2:	880a      	ldrh	r2, [r1, #0]
 8075ce4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8075ce8:	fb09 b202 	mla	r2, r9, r2, fp
 8075cec:	4492      	add	sl, r2
 8075cee:	b2a4      	uxth	r4, r4
 8075cf0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8075cf4:	f84e 4b04 	str.w	r4, [lr], #4
 8075cf8:	f851 4b04 	ldr.w	r4, [r1], #4
 8075cfc:	f8be 2000 	ldrh.w	r2, [lr]
 8075d00:	0c24      	lsrs	r4, r4, #16
 8075d02:	fb09 2404 	mla	r4, r9, r4, r2
 8075d06:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8075d0a:	458c      	cmp	ip, r1
 8075d0c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8075d10:	d8e7      	bhi.n	8075ce2 <__multiply+0xfe>
 8075d12:	9a01      	ldr	r2, [sp, #4]
 8075d14:	50b4      	str	r4, [r6, r2]
 8075d16:	3604      	adds	r6, #4
 8075d18:	e7a3      	b.n	8075c62 <__multiply+0x7e>
 8075d1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8075d1e:	2b00      	cmp	r3, #0
 8075d20:	d1a5      	bne.n	8075c6e <__multiply+0x8a>
 8075d22:	3f01      	subs	r7, #1
 8075d24:	e7a1      	b.n	8075c6a <__multiply+0x86>
 8075d26:	bf00      	nop
 8075d28:	080777d4 	.word	0x080777d4
 8075d2c:	08077864 	.word	0x08077864

08075d30 <__pow5mult>:
 8075d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8075d34:	4615      	mov	r5, r2
 8075d36:	f012 0203 	ands.w	r2, r2, #3
 8075d3a:	4606      	mov	r6, r0
 8075d3c:	460f      	mov	r7, r1
 8075d3e:	d007      	beq.n	8075d50 <__pow5mult+0x20>
 8075d40:	4c25      	ldr	r4, [pc, #148]	; (8075dd8 <__pow5mult+0xa8>)
 8075d42:	3a01      	subs	r2, #1
 8075d44:	2300      	movs	r3, #0
 8075d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8075d4a:	f7ff fe51 	bl	80759f0 <__multadd>
 8075d4e:	4607      	mov	r7, r0
 8075d50:	10ad      	asrs	r5, r5, #2
 8075d52:	d03d      	beq.n	8075dd0 <__pow5mult+0xa0>
 8075d54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8075d56:	b97c      	cbnz	r4, 8075d78 <__pow5mult+0x48>
 8075d58:	2010      	movs	r0, #16
 8075d5a:	f7ff fdc1 	bl	80758e0 <malloc>
 8075d5e:	4602      	mov	r2, r0
 8075d60:	6270      	str	r0, [r6, #36]	; 0x24
 8075d62:	b928      	cbnz	r0, 8075d70 <__pow5mult+0x40>
 8075d64:	4b1d      	ldr	r3, [pc, #116]	; (8075ddc <__pow5mult+0xac>)
 8075d66:	481e      	ldr	r0, [pc, #120]	; (8075de0 <__pow5mult+0xb0>)
 8075d68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8075d6c:	f000 fe96 	bl	8076a9c <__assert_func>
 8075d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8075d74:	6004      	str	r4, [r0, #0]
 8075d76:	60c4      	str	r4, [r0, #12]
 8075d78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8075d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8075d80:	b94c      	cbnz	r4, 8075d96 <__pow5mult+0x66>
 8075d82:	f240 2171 	movw	r1, #625	; 0x271
 8075d86:	4630      	mov	r0, r6
 8075d88:	f7ff ff16 	bl	8075bb8 <__i2b>
 8075d8c:	2300      	movs	r3, #0
 8075d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8075d92:	4604      	mov	r4, r0
 8075d94:	6003      	str	r3, [r0, #0]
 8075d96:	f04f 0900 	mov.w	r9, #0
 8075d9a:	07eb      	lsls	r3, r5, #31
 8075d9c:	d50a      	bpl.n	8075db4 <__pow5mult+0x84>
 8075d9e:	4639      	mov	r1, r7
 8075da0:	4622      	mov	r2, r4
 8075da2:	4630      	mov	r0, r6
 8075da4:	f7ff ff1e 	bl	8075be4 <__multiply>
 8075da8:	4639      	mov	r1, r7
 8075daa:	4680      	mov	r8, r0
 8075dac:	4630      	mov	r0, r6
 8075dae:	f7ff fdfd 	bl	80759ac <_Bfree>
 8075db2:	4647      	mov	r7, r8
 8075db4:	106d      	asrs	r5, r5, #1
 8075db6:	d00b      	beq.n	8075dd0 <__pow5mult+0xa0>
 8075db8:	6820      	ldr	r0, [r4, #0]
 8075dba:	b938      	cbnz	r0, 8075dcc <__pow5mult+0x9c>
 8075dbc:	4622      	mov	r2, r4
 8075dbe:	4621      	mov	r1, r4
 8075dc0:	4630      	mov	r0, r6
 8075dc2:	f7ff ff0f 	bl	8075be4 <__multiply>
 8075dc6:	6020      	str	r0, [r4, #0]
 8075dc8:	f8c0 9000 	str.w	r9, [r0]
 8075dcc:	4604      	mov	r4, r0
 8075dce:	e7e4      	b.n	8075d9a <__pow5mult+0x6a>
 8075dd0:	4638      	mov	r0, r7
 8075dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8075dd6:	bf00      	nop
 8075dd8:	080779b8 	.word	0x080779b8
 8075ddc:	0807775e 	.word	0x0807775e
 8075de0:	08077864 	.word	0x08077864

08075de4 <__lshift>:
 8075de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8075de8:	460c      	mov	r4, r1
 8075dea:	6849      	ldr	r1, [r1, #4]
 8075dec:	6923      	ldr	r3, [r4, #16]
 8075dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8075df2:	68a3      	ldr	r3, [r4, #8]
 8075df4:	4607      	mov	r7, r0
 8075df6:	4691      	mov	r9, r2
 8075df8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8075dfc:	f108 0601 	add.w	r6, r8, #1
 8075e00:	42b3      	cmp	r3, r6
 8075e02:	db0b      	blt.n	8075e1c <__lshift+0x38>
 8075e04:	4638      	mov	r0, r7
 8075e06:	f7ff fd91 	bl	807592c <_Balloc>
 8075e0a:	4605      	mov	r5, r0
 8075e0c:	b948      	cbnz	r0, 8075e22 <__lshift+0x3e>
 8075e0e:	4602      	mov	r2, r0
 8075e10:	4b28      	ldr	r3, [pc, #160]	; (8075eb4 <__lshift+0xd0>)
 8075e12:	4829      	ldr	r0, [pc, #164]	; (8075eb8 <__lshift+0xd4>)
 8075e14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8075e18:	f000 fe40 	bl	8076a9c <__assert_func>
 8075e1c:	3101      	adds	r1, #1
 8075e1e:	005b      	lsls	r3, r3, #1
 8075e20:	e7ee      	b.n	8075e00 <__lshift+0x1c>
 8075e22:	2300      	movs	r3, #0
 8075e24:	f100 0114 	add.w	r1, r0, #20
 8075e28:	f100 0210 	add.w	r2, r0, #16
 8075e2c:	4618      	mov	r0, r3
 8075e2e:	4553      	cmp	r3, sl
 8075e30:	db33      	blt.n	8075e9a <__lshift+0xb6>
 8075e32:	6920      	ldr	r0, [r4, #16]
 8075e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8075e38:	f104 0314 	add.w	r3, r4, #20
 8075e3c:	f019 091f 	ands.w	r9, r9, #31
 8075e40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8075e44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8075e48:	d02b      	beq.n	8075ea2 <__lshift+0xbe>
 8075e4a:	f1c9 0e20 	rsb	lr, r9, #32
 8075e4e:	468a      	mov	sl, r1
 8075e50:	2200      	movs	r2, #0
 8075e52:	6818      	ldr	r0, [r3, #0]
 8075e54:	fa00 f009 	lsl.w	r0, r0, r9
 8075e58:	4302      	orrs	r2, r0
 8075e5a:	f84a 2b04 	str.w	r2, [sl], #4
 8075e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8075e62:	459c      	cmp	ip, r3
 8075e64:	fa22 f20e 	lsr.w	r2, r2, lr
 8075e68:	d8f3      	bhi.n	8075e52 <__lshift+0x6e>
 8075e6a:	ebac 0304 	sub.w	r3, ip, r4
 8075e6e:	3b15      	subs	r3, #21
 8075e70:	f023 0303 	bic.w	r3, r3, #3
 8075e74:	3304      	adds	r3, #4
 8075e76:	f104 0015 	add.w	r0, r4, #21
 8075e7a:	4584      	cmp	ip, r0
 8075e7c:	bf38      	it	cc
 8075e7e:	2304      	movcc	r3, #4
 8075e80:	50ca      	str	r2, [r1, r3]
 8075e82:	b10a      	cbz	r2, 8075e88 <__lshift+0xa4>
 8075e84:	f108 0602 	add.w	r6, r8, #2
 8075e88:	3e01      	subs	r6, #1
 8075e8a:	4638      	mov	r0, r7
 8075e8c:	612e      	str	r6, [r5, #16]
 8075e8e:	4621      	mov	r1, r4
 8075e90:	f7ff fd8c 	bl	80759ac <_Bfree>
 8075e94:	4628      	mov	r0, r5
 8075e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8075e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8075e9e:	3301      	adds	r3, #1
 8075ea0:	e7c5      	b.n	8075e2e <__lshift+0x4a>
 8075ea2:	3904      	subs	r1, #4
 8075ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8075ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8075eac:	459c      	cmp	ip, r3
 8075eae:	d8f9      	bhi.n	8075ea4 <__lshift+0xc0>
 8075eb0:	e7ea      	b.n	8075e88 <__lshift+0xa4>
 8075eb2:	bf00      	nop
 8075eb4:	080777d4 	.word	0x080777d4
 8075eb8:	08077864 	.word	0x08077864

08075ebc <__mcmp>:
 8075ebc:	b530      	push	{r4, r5, lr}
 8075ebe:	6902      	ldr	r2, [r0, #16]
 8075ec0:	690c      	ldr	r4, [r1, #16]
 8075ec2:	1b12      	subs	r2, r2, r4
 8075ec4:	d10e      	bne.n	8075ee4 <__mcmp+0x28>
 8075ec6:	f100 0314 	add.w	r3, r0, #20
 8075eca:	3114      	adds	r1, #20
 8075ecc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8075ed0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8075ed4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8075ed8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8075edc:	42a5      	cmp	r5, r4
 8075ede:	d003      	beq.n	8075ee8 <__mcmp+0x2c>
 8075ee0:	d305      	bcc.n	8075eee <__mcmp+0x32>
 8075ee2:	2201      	movs	r2, #1
 8075ee4:	4610      	mov	r0, r2
 8075ee6:	bd30      	pop	{r4, r5, pc}
 8075ee8:	4283      	cmp	r3, r0
 8075eea:	d3f3      	bcc.n	8075ed4 <__mcmp+0x18>
 8075eec:	e7fa      	b.n	8075ee4 <__mcmp+0x28>
 8075eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8075ef2:	e7f7      	b.n	8075ee4 <__mcmp+0x28>

08075ef4 <__mdiff>:
 8075ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8075ef8:	460c      	mov	r4, r1
 8075efa:	4606      	mov	r6, r0
 8075efc:	4611      	mov	r1, r2
 8075efe:	4620      	mov	r0, r4
 8075f00:	4617      	mov	r7, r2
 8075f02:	f7ff ffdb 	bl	8075ebc <__mcmp>
 8075f06:	1e05      	subs	r5, r0, #0
 8075f08:	d110      	bne.n	8075f2c <__mdiff+0x38>
 8075f0a:	4629      	mov	r1, r5
 8075f0c:	4630      	mov	r0, r6
 8075f0e:	f7ff fd0d 	bl	807592c <_Balloc>
 8075f12:	b930      	cbnz	r0, 8075f22 <__mdiff+0x2e>
 8075f14:	4b39      	ldr	r3, [pc, #228]	; (8075ffc <__mdiff+0x108>)
 8075f16:	4602      	mov	r2, r0
 8075f18:	f240 2132 	movw	r1, #562	; 0x232
 8075f1c:	4838      	ldr	r0, [pc, #224]	; (8076000 <__mdiff+0x10c>)
 8075f1e:	f000 fdbd 	bl	8076a9c <__assert_func>
 8075f22:	2301      	movs	r3, #1
 8075f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8075f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8075f2c:	bfa4      	itt	ge
 8075f2e:	463b      	movge	r3, r7
 8075f30:	4627      	movge	r7, r4
 8075f32:	4630      	mov	r0, r6
 8075f34:	6879      	ldr	r1, [r7, #4]
 8075f36:	bfa6      	itte	ge
 8075f38:	461c      	movge	r4, r3
 8075f3a:	2500      	movge	r5, #0
 8075f3c:	2501      	movlt	r5, #1
 8075f3e:	f7ff fcf5 	bl	807592c <_Balloc>
 8075f42:	b920      	cbnz	r0, 8075f4e <__mdiff+0x5a>
 8075f44:	4b2d      	ldr	r3, [pc, #180]	; (8075ffc <__mdiff+0x108>)
 8075f46:	4602      	mov	r2, r0
 8075f48:	f44f 7110 	mov.w	r1, #576	; 0x240
 8075f4c:	e7e6      	b.n	8075f1c <__mdiff+0x28>
 8075f4e:	693e      	ldr	r6, [r7, #16]
 8075f50:	60c5      	str	r5, [r0, #12]
 8075f52:	6925      	ldr	r5, [r4, #16]
 8075f54:	f107 0114 	add.w	r1, r7, #20
 8075f58:	f104 0914 	add.w	r9, r4, #20
 8075f5c:	f100 0e14 	add.w	lr, r0, #20
 8075f60:	f107 0210 	add.w	r2, r7, #16
 8075f64:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8075f68:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8075f6c:	46f2      	mov	sl, lr
 8075f6e:	2700      	movs	r7, #0
 8075f70:	f859 3b04 	ldr.w	r3, [r9], #4
 8075f74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8075f78:	fa1f f883 	uxth.w	r8, r3
 8075f7c:	fa17 f78b 	uxtah	r7, r7, fp
 8075f80:	0c1b      	lsrs	r3, r3, #16
 8075f82:	eba7 0808 	sub.w	r8, r7, r8
 8075f86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8075f8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8075f8e:	fa1f f888 	uxth.w	r8, r8
 8075f92:	141f      	asrs	r7, r3, #16
 8075f94:	454d      	cmp	r5, r9
 8075f96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8075f9a:	f84a 3b04 	str.w	r3, [sl], #4
 8075f9e:	d8e7      	bhi.n	8075f70 <__mdiff+0x7c>
 8075fa0:	1b2b      	subs	r3, r5, r4
 8075fa2:	3b15      	subs	r3, #21
 8075fa4:	f023 0303 	bic.w	r3, r3, #3
 8075fa8:	3304      	adds	r3, #4
 8075faa:	3415      	adds	r4, #21
 8075fac:	42a5      	cmp	r5, r4
 8075fae:	bf38      	it	cc
 8075fb0:	2304      	movcc	r3, #4
 8075fb2:	4419      	add	r1, r3
 8075fb4:	4473      	add	r3, lr
 8075fb6:	469e      	mov	lr, r3
 8075fb8:	460d      	mov	r5, r1
 8075fba:	4565      	cmp	r5, ip
 8075fbc:	d30e      	bcc.n	8075fdc <__mdiff+0xe8>
 8075fbe:	f10c 0203 	add.w	r2, ip, #3
 8075fc2:	1a52      	subs	r2, r2, r1
 8075fc4:	f022 0203 	bic.w	r2, r2, #3
 8075fc8:	3903      	subs	r1, #3
 8075fca:	458c      	cmp	ip, r1
 8075fcc:	bf38      	it	cc
 8075fce:	2200      	movcc	r2, #0
 8075fd0:	441a      	add	r2, r3
 8075fd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8075fd6:	b17b      	cbz	r3, 8075ff8 <__mdiff+0x104>
 8075fd8:	6106      	str	r6, [r0, #16]
 8075fda:	e7a5      	b.n	8075f28 <__mdiff+0x34>
 8075fdc:	f855 8b04 	ldr.w	r8, [r5], #4
 8075fe0:	fa17 f488 	uxtah	r4, r7, r8
 8075fe4:	1422      	asrs	r2, r4, #16
 8075fe6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8075fea:	b2a4      	uxth	r4, r4
 8075fec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8075ff0:	f84e 4b04 	str.w	r4, [lr], #4
 8075ff4:	1417      	asrs	r7, r2, #16
 8075ff6:	e7e0      	b.n	8075fba <__mdiff+0xc6>
 8075ff8:	3e01      	subs	r6, #1
 8075ffa:	e7ea      	b.n	8075fd2 <__mdiff+0xde>
 8075ffc:	080777d4 	.word	0x080777d4
 8076000:	08077864 	.word	0x08077864

08076004 <__ulp>:
 8076004:	b082      	sub	sp, #8
 8076006:	ed8d 0b00 	vstr	d0, [sp]
 807600a:	9b01      	ldr	r3, [sp, #4]
 807600c:	4912      	ldr	r1, [pc, #72]	; (8076058 <__ulp+0x54>)
 807600e:	4019      	ands	r1, r3
 8076010:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8076014:	2900      	cmp	r1, #0
 8076016:	dd05      	ble.n	8076024 <__ulp+0x20>
 8076018:	2200      	movs	r2, #0
 807601a:	460b      	mov	r3, r1
 807601c:	ec43 2b10 	vmov	d0, r2, r3
 8076020:	b002      	add	sp, #8
 8076022:	4770      	bx	lr
 8076024:	4249      	negs	r1, r1
 8076026:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 807602a:	ea4f 5021 	mov.w	r0, r1, asr #20
 807602e:	f04f 0200 	mov.w	r2, #0
 8076032:	f04f 0300 	mov.w	r3, #0
 8076036:	da04      	bge.n	8076042 <__ulp+0x3e>
 8076038:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 807603c:	fa41 f300 	asr.w	r3, r1, r0
 8076040:	e7ec      	b.n	807601c <__ulp+0x18>
 8076042:	f1a0 0114 	sub.w	r1, r0, #20
 8076046:	291e      	cmp	r1, #30
 8076048:	bfda      	itte	le
 807604a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 807604e:	fa20 f101 	lsrle.w	r1, r0, r1
 8076052:	2101      	movgt	r1, #1
 8076054:	460a      	mov	r2, r1
 8076056:	e7e1      	b.n	807601c <__ulp+0x18>
 8076058:	7ff00000 	.word	0x7ff00000

0807605c <__b2d>:
 807605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 807605e:	6905      	ldr	r5, [r0, #16]
 8076060:	f100 0714 	add.w	r7, r0, #20
 8076064:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8076068:	1f2e      	subs	r6, r5, #4
 807606a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 807606e:	4620      	mov	r0, r4
 8076070:	f7ff fd52 	bl	8075b18 <__hi0bits>
 8076074:	f1c0 0320 	rsb	r3, r0, #32
 8076078:	280a      	cmp	r0, #10
 807607a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80760f8 <__b2d+0x9c>
 807607e:	600b      	str	r3, [r1, #0]
 8076080:	dc14      	bgt.n	80760ac <__b2d+0x50>
 8076082:	f1c0 0e0b 	rsb	lr, r0, #11
 8076086:	fa24 f10e 	lsr.w	r1, r4, lr
 807608a:	42b7      	cmp	r7, r6
 807608c:	ea41 030c 	orr.w	r3, r1, ip
 8076090:	bf34      	ite	cc
 8076092:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8076096:	2100      	movcs	r1, #0
 8076098:	3015      	adds	r0, #21
 807609a:	fa04 f000 	lsl.w	r0, r4, r0
 807609e:	fa21 f10e 	lsr.w	r1, r1, lr
 80760a2:	ea40 0201 	orr.w	r2, r0, r1
 80760a6:	ec43 2b10 	vmov	d0, r2, r3
 80760aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80760ac:	42b7      	cmp	r7, r6
 80760ae:	bf3a      	itte	cc
 80760b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80760b4:	f1a5 0608 	subcc.w	r6, r5, #8
 80760b8:	2100      	movcs	r1, #0
 80760ba:	380b      	subs	r0, #11
 80760bc:	d017      	beq.n	80760ee <__b2d+0x92>
 80760be:	f1c0 0c20 	rsb	ip, r0, #32
 80760c2:	fa04 f500 	lsl.w	r5, r4, r0
 80760c6:	42be      	cmp	r6, r7
 80760c8:	fa21 f40c 	lsr.w	r4, r1, ip
 80760cc:	ea45 0504 	orr.w	r5, r5, r4
 80760d0:	bf8c      	ite	hi
 80760d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80760d6:	2400      	movls	r4, #0
 80760d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80760dc:	fa01 f000 	lsl.w	r0, r1, r0
 80760e0:	fa24 f40c 	lsr.w	r4, r4, ip
 80760e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80760e8:	ea40 0204 	orr.w	r2, r0, r4
 80760ec:	e7db      	b.n	80760a6 <__b2d+0x4a>
 80760ee:	ea44 030c 	orr.w	r3, r4, ip
 80760f2:	460a      	mov	r2, r1
 80760f4:	e7d7      	b.n	80760a6 <__b2d+0x4a>
 80760f6:	bf00      	nop
 80760f8:	3ff00000 	.word	0x3ff00000

080760fc <__d2b>:
 80760fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8076100:	4689      	mov	r9, r1
 8076102:	2101      	movs	r1, #1
 8076104:	ec57 6b10 	vmov	r6, r7, d0
 8076108:	4690      	mov	r8, r2
 807610a:	f7ff fc0f 	bl	807592c <_Balloc>
 807610e:	4604      	mov	r4, r0
 8076110:	b930      	cbnz	r0, 8076120 <__d2b+0x24>
 8076112:	4602      	mov	r2, r0
 8076114:	4b25      	ldr	r3, [pc, #148]	; (80761ac <__d2b+0xb0>)
 8076116:	4826      	ldr	r0, [pc, #152]	; (80761b0 <__d2b+0xb4>)
 8076118:	f240 310a 	movw	r1, #778	; 0x30a
 807611c:	f000 fcbe 	bl	8076a9c <__assert_func>
 8076120:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8076124:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8076128:	bb35      	cbnz	r5, 8076178 <__d2b+0x7c>
 807612a:	2e00      	cmp	r6, #0
 807612c:	9301      	str	r3, [sp, #4]
 807612e:	d028      	beq.n	8076182 <__d2b+0x86>
 8076130:	4668      	mov	r0, sp
 8076132:	9600      	str	r6, [sp, #0]
 8076134:	f7ff fd10 	bl	8075b58 <__lo0bits>
 8076138:	9900      	ldr	r1, [sp, #0]
 807613a:	b300      	cbz	r0, 807617e <__d2b+0x82>
 807613c:	9a01      	ldr	r2, [sp, #4]
 807613e:	f1c0 0320 	rsb	r3, r0, #32
 8076142:	fa02 f303 	lsl.w	r3, r2, r3
 8076146:	430b      	orrs	r3, r1
 8076148:	40c2      	lsrs	r2, r0
 807614a:	6163      	str	r3, [r4, #20]
 807614c:	9201      	str	r2, [sp, #4]
 807614e:	9b01      	ldr	r3, [sp, #4]
 8076150:	61a3      	str	r3, [r4, #24]
 8076152:	2b00      	cmp	r3, #0
 8076154:	bf14      	ite	ne
 8076156:	2202      	movne	r2, #2
 8076158:	2201      	moveq	r2, #1
 807615a:	6122      	str	r2, [r4, #16]
 807615c:	b1d5      	cbz	r5, 8076194 <__d2b+0x98>
 807615e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8076162:	4405      	add	r5, r0
 8076164:	f8c9 5000 	str.w	r5, [r9]
 8076168:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 807616c:	f8c8 0000 	str.w	r0, [r8]
 8076170:	4620      	mov	r0, r4
 8076172:	b003      	add	sp, #12
 8076174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8076178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 807617c:	e7d5      	b.n	807612a <__d2b+0x2e>
 807617e:	6161      	str	r1, [r4, #20]
 8076180:	e7e5      	b.n	807614e <__d2b+0x52>
 8076182:	a801      	add	r0, sp, #4
 8076184:	f7ff fce8 	bl	8075b58 <__lo0bits>
 8076188:	9b01      	ldr	r3, [sp, #4]
 807618a:	6163      	str	r3, [r4, #20]
 807618c:	2201      	movs	r2, #1
 807618e:	6122      	str	r2, [r4, #16]
 8076190:	3020      	adds	r0, #32
 8076192:	e7e3      	b.n	807615c <__d2b+0x60>
 8076194:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8076198:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 807619c:	f8c9 0000 	str.w	r0, [r9]
 80761a0:	6918      	ldr	r0, [r3, #16]
 80761a2:	f7ff fcb9 	bl	8075b18 <__hi0bits>
 80761a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80761aa:	e7df      	b.n	807616c <__d2b+0x70>
 80761ac:	080777d4 	.word	0x080777d4
 80761b0:	08077864 	.word	0x08077864

080761b4 <__ratio>:
 80761b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80761b8:	4688      	mov	r8, r1
 80761ba:	4669      	mov	r1, sp
 80761bc:	4681      	mov	r9, r0
 80761be:	f7ff ff4d 	bl	807605c <__b2d>
 80761c2:	a901      	add	r1, sp, #4
 80761c4:	4640      	mov	r0, r8
 80761c6:	ec55 4b10 	vmov	r4, r5, d0
 80761ca:	f7ff ff47 	bl	807605c <__b2d>
 80761ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80761d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80761d6:	eba3 0c02 	sub.w	ip, r3, r2
 80761da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80761de:	1a9b      	subs	r3, r3, r2
 80761e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80761e4:	ec51 0b10 	vmov	r0, r1, d0
 80761e8:	2b00      	cmp	r3, #0
 80761ea:	bfd6      	itet	le
 80761ec:	460a      	movle	r2, r1
 80761ee:	462a      	movgt	r2, r5
 80761f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80761f4:	468b      	mov	fp, r1
 80761f6:	462f      	mov	r7, r5
 80761f8:	bfd4      	ite	le
 80761fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80761fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8076202:	4620      	mov	r0, r4
 8076204:	ee10 2a10 	vmov	r2, s0
 8076208:	465b      	mov	r3, fp
 807620a:	4639      	mov	r1, r7
 807620c:	f7ea fb36 	bl	806087c <__aeabi_ddiv>
 8076210:	ec41 0b10 	vmov	d0, r0, r1
 8076214:	b003      	add	sp, #12
 8076216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0807621a <__copybits>:
 807621a:	3901      	subs	r1, #1
 807621c:	b570      	push	{r4, r5, r6, lr}
 807621e:	1149      	asrs	r1, r1, #5
 8076220:	6914      	ldr	r4, [r2, #16]
 8076222:	3101      	adds	r1, #1
 8076224:	f102 0314 	add.w	r3, r2, #20
 8076228:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 807622c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8076230:	1f05      	subs	r5, r0, #4
 8076232:	42a3      	cmp	r3, r4
 8076234:	d30c      	bcc.n	8076250 <__copybits+0x36>
 8076236:	1aa3      	subs	r3, r4, r2
 8076238:	3b11      	subs	r3, #17
 807623a:	f023 0303 	bic.w	r3, r3, #3
 807623e:	3211      	adds	r2, #17
 8076240:	42a2      	cmp	r2, r4
 8076242:	bf88      	it	hi
 8076244:	2300      	movhi	r3, #0
 8076246:	4418      	add	r0, r3
 8076248:	2300      	movs	r3, #0
 807624a:	4288      	cmp	r0, r1
 807624c:	d305      	bcc.n	807625a <__copybits+0x40>
 807624e:	bd70      	pop	{r4, r5, r6, pc}
 8076250:	f853 6b04 	ldr.w	r6, [r3], #4
 8076254:	f845 6f04 	str.w	r6, [r5, #4]!
 8076258:	e7eb      	b.n	8076232 <__copybits+0x18>
 807625a:	f840 3b04 	str.w	r3, [r0], #4
 807625e:	e7f4      	b.n	807624a <__copybits+0x30>

08076260 <__any_on>:
 8076260:	f100 0214 	add.w	r2, r0, #20
 8076264:	6900      	ldr	r0, [r0, #16]
 8076266:	114b      	asrs	r3, r1, #5
 8076268:	4298      	cmp	r0, r3
 807626a:	b510      	push	{r4, lr}
 807626c:	db11      	blt.n	8076292 <__any_on+0x32>
 807626e:	dd0a      	ble.n	8076286 <__any_on+0x26>
 8076270:	f011 011f 	ands.w	r1, r1, #31
 8076274:	d007      	beq.n	8076286 <__any_on+0x26>
 8076276:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 807627a:	fa24 f001 	lsr.w	r0, r4, r1
 807627e:	fa00 f101 	lsl.w	r1, r0, r1
 8076282:	428c      	cmp	r4, r1
 8076284:	d10b      	bne.n	807629e <__any_on+0x3e>
 8076286:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 807628a:	4293      	cmp	r3, r2
 807628c:	d803      	bhi.n	8076296 <__any_on+0x36>
 807628e:	2000      	movs	r0, #0
 8076290:	bd10      	pop	{r4, pc}
 8076292:	4603      	mov	r3, r0
 8076294:	e7f7      	b.n	8076286 <__any_on+0x26>
 8076296:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 807629a:	2900      	cmp	r1, #0
 807629c:	d0f5      	beq.n	807628a <__any_on+0x2a>
 807629e:	2001      	movs	r0, #1
 80762a0:	e7f6      	b.n	8076290 <__any_on+0x30>

080762a2 <_calloc_r>:
 80762a2:	b513      	push	{r0, r1, r4, lr}
 80762a4:	434a      	muls	r2, r1
 80762a6:	4611      	mov	r1, r2
 80762a8:	9201      	str	r2, [sp, #4]
 80762aa:	f7fc f9b9 	bl	8072620 <_malloc_r>
 80762ae:	4604      	mov	r4, r0
 80762b0:	b118      	cbz	r0, 80762ba <_calloc_r+0x18>
 80762b2:	9a01      	ldr	r2, [sp, #4]
 80762b4:	2100      	movs	r1, #0
 80762b6:	f7fc f9aa 	bl	807260e <memset>
 80762ba:	4620      	mov	r0, r4
 80762bc:	b002      	add	sp, #8
 80762be:	bd10      	pop	{r4, pc}

080762c0 <_free_r>:
 80762c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80762c2:	2900      	cmp	r1, #0
 80762c4:	d048      	beq.n	8076358 <_free_r+0x98>
 80762c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80762ca:	9001      	str	r0, [sp, #4]
 80762cc:	2b00      	cmp	r3, #0
 80762ce:	f1a1 0404 	sub.w	r4, r1, #4
 80762d2:	bfb8      	it	lt
 80762d4:	18e4      	addlt	r4, r4, r3
 80762d6:	f7ff fb1d 	bl	8075914 <__malloc_lock>
 80762da:	4a20      	ldr	r2, [pc, #128]	; (807635c <_free_r+0x9c>)
 80762dc:	9801      	ldr	r0, [sp, #4]
 80762de:	6813      	ldr	r3, [r2, #0]
 80762e0:	4615      	mov	r5, r2
 80762e2:	b933      	cbnz	r3, 80762f2 <_free_r+0x32>
 80762e4:	6063      	str	r3, [r4, #4]
 80762e6:	6014      	str	r4, [r2, #0]
 80762e8:	b003      	add	sp, #12
 80762ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80762ee:	f7ff bb17 	b.w	8075920 <__malloc_unlock>
 80762f2:	42a3      	cmp	r3, r4
 80762f4:	d90b      	bls.n	807630e <_free_r+0x4e>
 80762f6:	6821      	ldr	r1, [r4, #0]
 80762f8:	1862      	adds	r2, r4, r1
 80762fa:	4293      	cmp	r3, r2
 80762fc:	bf04      	itt	eq
 80762fe:	681a      	ldreq	r2, [r3, #0]
 8076300:	685b      	ldreq	r3, [r3, #4]
 8076302:	6063      	str	r3, [r4, #4]
 8076304:	bf04      	itt	eq
 8076306:	1852      	addeq	r2, r2, r1
 8076308:	6022      	streq	r2, [r4, #0]
 807630a:	602c      	str	r4, [r5, #0]
 807630c:	e7ec      	b.n	80762e8 <_free_r+0x28>
 807630e:	461a      	mov	r2, r3
 8076310:	685b      	ldr	r3, [r3, #4]
 8076312:	b10b      	cbz	r3, 8076318 <_free_r+0x58>
 8076314:	42a3      	cmp	r3, r4
 8076316:	d9fa      	bls.n	807630e <_free_r+0x4e>
 8076318:	6811      	ldr	r1, [r2, #0]
 807631a:	1855      	adds	r5, r2, r1
 807631c:	42a5      	cmp	r5, r4
 807631e:	d10b      	bne.n	8076338 <_free_r+0x78>
 8076320:	6824      	ldr	r4, [r4, #0]
 8076322:	4421      	add	r1, r4
 8076324:	1854      	adds	r4, r2, r1
 8076326:	42a3      	cmp	r3, r4
 8076328:	6011      	str	r1, [r2, #0]
 807632a:	d1dd      	bne.n	80762e8 <_free_r+0x28>
 807632c:	681c      	ldr	r4, [r3, #0]
 807632e:	685b      	ldr	r3, [r3, #4]
 8076330:	6053      	str	r3, [r2, #4]
 8076332:	4421      	add	r1, r4
 8076334:	6011      	str	r1, [r2, #0]
 8076336:	e7d7      	b.n	80762e8 <_free_r+0x28>
 8076338:	d902      	bls.n	8076340 <_free_r+0x80>
 807633a:	230c      	movs	r3, #12
 807633c:	6003      	str	r3, [r0, #0]
 807633e:	e7d3      	b.n	80762e8 <_free_r+0x28>
 8076340:	6825      	ldr	r5, [r4, #0]
 8076342:	1961      	adds	r1, r4, r5
 8076344:	428b      	cmp	r3, r1
 8076346:	bf04      	itt	eq
 8076348:	6819      	ldreq	r1, [r3, #0]
 807634a:	685b      	ldreq	r3, [r3, #4]
 807634c:	6063      	str	r3, [r4, #4]
 807634e:	bf04      	itt	eq
 8076350:	1949      	addeq	r1, r1, r5
 8076352:	6021      	streq	r1, [r4, #0]
 8076354:	6054      	str	r4, [r2, #4]
 8076356:	e7c7      	b.n	80762e8 <_free_r+0x28>
 8076358:	b003      	add	sp, #12
 807635a:	bd30      	pop	{r4, r5, pc}
 807635c:	20004e28 	.word	0x20004e28

08076360 <__ssputs_r>:
 8076360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8076364:	688e      	ldr	r6, [r1, #8]
 8076366:	429e      	cmp	r6, r3
 8076368:	4682      	mov	sl, r0
 807636a:	460c      	mov	r4, r1
 807636c:	4690      	mov	r8, r2
 807636e:	461f      	mov	r7, r3
 8076370:	d838      	bhi.n	80763e4 <__ssputs_r+0x84>
 8076372:	898a      	ldrh	r2, [r1, #12]
 8076374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8076378:	d032      	beq.n	80763e0 <__ssputs_r+0x80>
 807637a:	6825      	ldr	r5, [r4, #0]
 807637c:	6909      	ldr	r1, [r1, #16]
 807637e:	eba5 0901 	sub.w	r9, r5, r1
 8076382:	6965      	ldr	r5, [r4, #20]
 8076384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8076388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 807638c:	3301      	adds	r3, #1
 807638e:	444b      	add	r3, r9
 8076390:	106d      	asrs	r5, r5, #1
 8076392:	429d      	cmp	r5, r3
 8076394:	bf38      	it	cc
 8076396:	461d      	movcc	r5, r3
 8076398:	0553      	lsls	r3, r2, #21
 807639a:	d531      	bpl.n	8076400 <__ssputs_r+0xa0>
 807639c:	4629      	mov	r1, r5
 807639e:	f7fc f93f 	bl	8072620 <_malloc_r>
 80763a2:	4606      	mov	r6, r0
 80763a4:	b950      	cbnz	r0, 80763bc <__ssputs_r+0x5c>
 80763a6:	230c      	movs	r3, #12
 80763a8:	f8ca 3000 	str.w	r3, [sl]
 80763ac:	89a3      	ldrh	r3, [r4, #12]
 80763ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80763b2:	81a3      	strh	r3, [r4, #12]
 80763b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80763b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80763bc:	6921      	ldr	r1, [r4, #16]
 80763be:	464a      	mov	r2, r9
 80763c0:	f7fc f917 	bl	80725f2 <memcpy>
 80763c4:	89a3      	ldrh	r3, [r4, #12]
 80763c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80763ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80763ce:	81a3      	strh	r3, [r4, #12]
 80763d0:	6126      	str	r6, [r4, #16]
 80763d2:	6165      	str	r5, [r4, #20]
 80763d4:	444e      	add	r6, r9
 80763d6:	eba5 0509 	sub.w	r5, r5, r9
 80763da:	6026      	str	r6, [r4, #0]
 80763dc:	60a5      	str	r5, [r4, #8]
 80763de:	463e      	mov	r6, r7
 80763e0:	42be      	cmp	r6, r7
 80763e2:	d900      	bls.n	80763e6 <__ssputs_r+0x86>
 80763e4:	463e      	mov	r6, r7
 80763e6:	4632      	mov	r2, r6
 80763e8:	6820      	ldr	r0, [r4, #0]
 80763ea:	4641      	mov	r1, r8
 80763ec:	f000 fbea 	bl	8076bc4 <memmove>
 80763f0:	68a3      	ldr	r3, [r4, #8]
 80763f2:	6822      	ldr	r2, [r4, #0]
 80763f4:	1b9b      	subs	r3, r3, r6
 80763f6:	4432      	add	r2, r6
 80763f8:	60a3      	str	r3, [r4, #8]
 80763fa:	6022      	str	r2, [r4, #0]
 80763fc:	2000      	movs	r0, #0
 80763fe:	e7db      	b.n	80763b8 <__ssputs_r+0x58>
 8076400:	462a      	mov	r2, r5
 8076402:	f000 fbf9 	bl	8076bf8 <_realloc_r>
 8076406:	4606      	mov	r6, r0
 8076408:	2800      	cmp	r0, #0
 807640a:	d1e1      	bne.n	80763d0 <__ssputs_r+0x70>
 807640c:	6921      	ldr	r1, [r4, #16]
 807640e:	4650      	mov	r0, sl
 8076410:	f7ff ff56 	bl	80762c0 <_free_r>
 8076414:	e7c7      	b.n	80763a6 <__ssputs_r+0x46>
	...

08076418 <_svfiprintf_r>:
 8076418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 807641c:	4698      	mov	r8, r3
 807641e:	898b      	ldrh	r3, [r1, #12]
 8076420:	061b      	lsls	r3, r3, #24
 8076422:	b09d      	sub	sp, #116	; 0x74
 8076424:	4607      	mov	r7, r0
 8076426:	460d      	mov	r5, r1
 8076428:	4614      	mov	r4, r2
 807642a:	d50e      	bpl.n	807644a <_svfiprintf_r+0x32>
 807642c:	690b      	ldr	r3, [r1, #16]
 807642e:	b963      	cbnz	r3, 807644a <_svfiprintf_r+0x32>
 8076430:	2140      	movs	r1, #64	; 0x40
 8076432:	f7fc f8f5 	bl	8072620 <_malloc_r>
 8076436:	6028      	str	r0, [r5, #0]
 8076438:	6128      	str	r0, [r5, #16]
 807643a:	b920      	cbnz	r0, 8076446 <_svfiprintf_r+0x2e>
 807643c:	230c      	movs	r3, #12
 807643e:	603b      	str	r3, [r7, #0]
 8076440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8076444:	e0d1      	b.n	80765ea <_svfiprintf_r+0x1d2>
 8076446:	2340      	movs	r3, #64	; 0x40
 8076448:	616b      	str	r3, [r5, #20]
 807644a:	2300      	movs	r3, #0
 807644c:	9309      	str	r3, [sp, #36]	; 0x24
 807644e:	2320      	movs	r3, #32
 8076450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8076454:	f8cd 800c 	str.w	r8, [sp, #12]
 8076458:	2330      	movs	r3, #48	; 0x30
 807645a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8076604 <_svfiprintf_r+0x1ec>
 807645e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8076462:	f04f 0901 	mov.w	r9, #1
 8076466:	4623      	mov	r3, r4
 8076468:	469a      	mov	sl, r3
 807646a:	f813 2b01 	ldrb.w	r2, [r3], #1
 807646e:	b10a      	cbz	r2, 8076474 <_svfiprintf_r+0x5c>
 8076470:	2a25      	cmp	r2, #37	; 0x25
 8076472:	d1f9      	bne.n	8076468 <_svfiprintf_r+0x50>
 8076474:	ebba 0b04 	subs.w	fp, sl, r4
 8076478:	d00b      	beq.n	8076492 <_svfiprintf_r+0x7a>
 807647a:	465b      	mov	r3, fp
 807647c:	4622      	mov	r2, r4
 807647e:	4629      	mov	r1, r5
 8076480:	4638      	mov	r0, r7
 8076482:	f7ff ff6d 	bl	8076360 <__ssputs_r>
 8076486:	3001      	adds	r0, #1
 8076488:	f000 80aa 	beq.w	80765e0 <_svfiprintf_r+0x1c8>
 807648c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 807648e:	445a      	add	r2, fp
 8076490:	9209      	str	r2, [sp, #36]	; 0x24
 8076492:	f89a 3000 	ldrb.w	r3, [sl]
 8076496:	2b00      	cmp	r3, #0
 8076498:	f000 80a2 	beq.w	80765e0 <_svfiprintf_r+0x1c8>
 807649c:	2300      	movs	r3, #0
 807649e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80764a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80764a6:	f10a 0a01 	add.w	sl, sl, #1
 80764aa:	9304      	str	r3, [sp, #16]
 80764ac:	9307      	str	r3, [sp, #28]
 80764ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80764b2:	931a      	str	r3, [sp, #104]	; 0x68
 80764b4:	4654      	mov	r4, sl
 80764b6:	2205      	movs	r2, #5
 80764b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80764bc:	4851      	ldr	r0, [pc, #324]	; (8076604 <_svfiprintf_r+0x1ec>)
 80764be:	f7e9 fea7 	bl	8060210 <memchr>
 80764c2:	9a04      	ldr	r2, [sp, #16]
 80764c4:	b9d8      	cbnz	r0, 80764fe <_svfiprintf_r+0xe6>
 80764c6:	06d0      	lsls	r0, r2, #27
 80764c8:	bf44      	itt	mi
 80764ca:	2320      	movmi	r3, #32
 80764cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80764d0:	0711      	lsls	r1, r2, #28
 80764d2:	bf44      	itt	mi
 80764d4:	232b      	movmi	r3, #43	; 0x2b
 80764d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80764da:	f89a 3000 	ldrb.w	r3, [sl]
 80764de:	2b2a      	cmp	r3, #42	; 0x2a
 80764e0:	d015      	beq.n	807650e <_svfiprintf_r+0xf6>
 80764e2:	9a07      	ldr	r2, [sp, #28]
 80764e4:	4654      	mov	r4, sl
 80764e6:	2000      	movs	r0, #0
 80764e8:	f04f 0c0a 	mov.w	ip, #10
 80764ec:	4621      	mov	r1, r4
 80764ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80764f2:	3b30      	subs	r3, #48	; 0x30
 80764f4:	2b09      	cmp	r3, #9
 80764f6:	d94e      	bls.n	8076596 <_svfiprintf_r+0x17e>
 80764f8:	b1b0      	cbz	r0, 8076528 <_svfiprintf_r+0x110>
 80764fa:	9207      	str	r2, [sp, #28]
 80764fc:	e014      	b.n	8076528 <_svfiprintf_r+0x110>
 80764fe:	eba0 0308 	sub.w	r3, r0, r8
 8076502:	fa09 f303 	lsl.w	r3, r9, r3
 8076506:	4313      	orrs	r3, r2
 8076508:	9304      	str	r3, [sp, #16]
 807650a:	46a2      	mov	sl, r4
 807650c:	e7d2      	b.n	80764b4 <_svfiprintf_r+0x9c>
 807650e:	9b03      	ldr	r3, [sp, #12]
 8076510:	1d19      	adds	r1, r3, #4
 8076512:	681b      	ldr	r3, [r3, #0]
 8076514:	9103      	str	r1, [sp, #12]
 8076516:	2b00      	cmp	r3, #0
 8076518:	bfbb      	ittet	lt
 807651a:	425b      	neglt	r3, r3
 807651c:	f042 0202 	orrlt.w	r2, r2, #2
 8076520:	9307      	strge	r3, [sp, #28]
 8076522:	9307      	strlt	r3, [sp, #28]
 8076524:	bfb8      	it	lt
 8076526:	9204      	strlt	r2, [sp, #16]
 8076528:	7823      	ldrb	r3, [r4, #0]
 807652a:	2b2e      	cmp	r3, #46	; 0x2e
 807652c:	d10c      	bne.n	8076548 <_svfiprintf_r+0x130>
 807652e:	7863      	ldrb	r3, [r4, #1]
 8076530:	2b2a      	cmp	r3, #42	; 0x2a
 8076532:	d135      	bne.n	80765a0 <_svfiprintf_r+0x188>
 8076534:	9b03      	ldr	r3, [sp, #12]
 8076536:	1d1a      	adds	r2, r3, #4
 8076538:	681b      	ldr	r3, [r3, #0]
 807653a:	9203      	str	r2, [sp, #12]
 807653c:	2b00      	cmp	r3, #0
 807653e:	bfb8      	it	lt
 8076540:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8076544:	3402      	adds	r4, #2
 8076546:	9305      	str	r3, [sp, #20]
 8076548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8076614 <_svfiprintf_r+0x1fc>
 807654c:	7821      	ldrb	r1, [r4, #0]
 807654e:	2203      	movs	r2, #3
 8076550:	4650      	mov	r0, sl
 8076552:	f7e9 fe5d 	bl	8060210 <memchr>
 8076556:	b140      	cbz	r0, 807656a <_svfiprintf_r+0x152>
 8076558:	2340      	movs	r3, #64	; 0x40
 807655a:	eba0 000a 	sub.w	r0, r0, sl
 807655e:	fa03 f000 	lsl.w	r0, r3, r0
 8076562:	9b04      	ldr	r3, [sp, #16]
 8076564:	4303      	orrs	r3, r0
 8076566:	3401      	adds	r4, #1
 8076568:	9304      	str	r3, [sp, #16]
 807656a:	f814 1b01 	ldrb.w	r1, [r4], #1
 807656e:	4826      	ldr	r0, [pc, #152]	; (8076608 <_svfiprintf_r+0x1f0>)
 8076570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8076574:	2206      	movs	r2, #6
 8076576:	f7e9 fe4b 	bl	8060210 <memchr>
 807657a:	2800      	cmp	r0, #0
 807657c:	d038      	beq.n	80765f0 <_svfiprintf_r+0x1d8>
 807657e:	4b23      	ldr	r3, [pc, #140]	; (807660c <_svfiprintf_r+0x1f4>)
 8076580:	bb1b      	cbnz	r3, 80765ca <_svfiprintf_r+0x1b2>
 8076582:	9b03      	ldr	r3, [sp, #12]
 8076584:	3307      	adds	r3, #7
 8076586:	f023 0307 	bic.w	r3, r3, #7
 807658a:	3308      	adds	r3, #8
 807658c:	9303      	str	r3, [sp, #12]
 807658e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8076590:	4433      	add	r3, r6
 8076592:	9309      	str	r3, [sp, #36]	; 0x24
 8076594:	e767      	b.n	8076466 <_svfiprintf_r+0x4e>
 8076596:	fb0c 3202 	mla	r2, ip, r2, r3
 807659a:	460c      	mov	r4, r1
 807659c:	2001      	movs	r0, #1
 807659e:	e7a5      	b.n	80764ec <_svfiprintf_r+0xd4>
 80765a0:	2300      	movs	r3, #0
 80765a2:	3401      	adds	r4, #1
 80765a4:	9305      	str	r3, [sp, #20]
 80765a6:	4619      	mov	r1, r3
 80765a8:	f04f 0c0a 	mov.w	ip, #10
 80765ac:	4620      	mov	r0, r4
 80765ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80765b2:	3a30      	subs	r2, #48	; 0x30
 80765b4:	2a09      	cmp	r2, #9
 80765b6:	d903      	bls.n	80765c0 <_svfiprintf_r+0x1a8>
 80765b8:	2b00      	cmp	r3, #0
 80765ba:	d0c5      	beq.n	8076548 <_svfiprintf_r+0x130>
 80765bc:	9105      	str	r1, [sp, #20]
 80765be:	e7c3      	b.n	8076548 <_svfiprintf_r+0x130>
 80765c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80765c4:	4604      	mov	r4, r0
 80765c6:	2301      	movs	r3, #1
 80765c8:	e7f0      	b.n	80765ac <_svfiprintf_r+0x194>
 80765ca:	ab03      	add	r3, sp, #12
 80765cc:	9300      	str	r3, [sp, #0]
 80765ce:	462a      	mov	r2, r5
 80765d0:	4b0f      	ldr	r3, [pc, #60]	; (8076610 <_svfiprintf_r+0x1f8>)
 80765d2:	a904      	add	r1, sp, #16
 80765d4:	4638      	mov	r0, r7
 80765d6:	f7fc f91d 	bl	8072814 <_printf_float>
 80765da:	1c42      	adds	r2, r0, #1
 80765dc:	4606      	mov	r6, r0
 80765de:	d1d6      	bne.n	807658e <_svfiprintf_r+0x176>
 80765e0:	89ab      	ldrh	r3, [r5, #12]
 80765e2:	065b      	lsls	r3, r3, #25
 80765e4:	f53f af2c 	bmi.w	8076440 <_svfiprintf_r+0x28>
 80765e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80765ea:	b01d      	add	sp, #116	; 0x74
 80765ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80765f0:	ab03      	add	r3, sp, #12
 80765f2:	9300      	str	r3, [sp, #0]
 80765f4:	462a      	mov	r2, r5
 80765f6:	4b06      	ldr	r3, [pc, #24]	; (8076610 <_svfiprintf_r+0x1f8>)
 80765f8:	a904      	add	r1, sp, #16
 80765fa:	4638      	mov	r0, r7
 80765fc:	f7fc fbae 	bl	8072d5c <_printf_i>
 8076600:	e7eb      	b.n	80765da <_svfiprintf_r+0x1c2>
 8076602:	bf00      	nop
 8076604:	080779c4 	.word	0x080779c4
 8076608:	080779ce 	.word	0x080779ce
 807660c:	08072815 	.word	0x08072815
 8076610:	08076361 	.word	0x08076361
 8076614:	080779ca 	.word	0x080779ca

08076618 <__sfputc_r>:
 8076618:	6893      	ldr	r3, [r2, #8]
 807661a:	3b01      	subs	r3, #1
 807661c:	2b00      	cmp	r3, #0
 807661e:	b410      	push	{r4}
 8076620:	6093      	str	r3, [r2, #8]
 8076622:	da08      	bge.n	8076636 <__sfputc_r+0x1e>
 8076624:	6994      	ldr	r4, [r2, #24]
 8076626:	42a3      	cmp	r3, r4
 8076628:	db01      	blt.n	807662e <__sfputc_r+0x16>
 807662a:	290a      	cmp	r1, #10
 807662c:	d103      	bne.n	8076636 <__sfputc_r+0x1e>
 807662e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8076632:	f000 b965 	b.w	8076900 <__swbuf_r>
 8076636:	6813      	ldr	r3, [r2, #0]
 8076638:	1c58      	adds	r0, r3, #1
 807663a:	6010      	str	r0, [r2, #0]
 807663c:	7019      	strb	r1, [r3, #0]
 807663e:	4608      	mov	r0, r1
 8076640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8076644:	4770      	bx	lr

08076646 <__sfputs_r>:
 8076646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076648:	4606      	mov	r6, r0
 807664a:	460f      	mov	r7, r1
 807664c:	4614      	mov	r4, r2
 807664e:	18d5      	adds	r5, r2, r3
 8076650:	42ac      	cmp	r4, r5
 8076652:	d101      	bne.n	8076658 <__sfputs_r+0x12>
 8076654:	2000      	movs	r0, #0
 8076656:	e007      	b.n	8076668 <__sfputs_r+0x22>
 8076658:	f814 1b01 	ldrb.w	r1, [r4], #1
 807665c:	463a      	mov	r2, r7
 807665e:	4630      	mov	r0, r6
 8076660:	f7ff ffda 	bl	8076618 <__sfputc_r>
 8076664:	1c43      	adds	r3, r0, #1
 8076666:	d1f3      	bne.n	8076650 <__sfputs_r+0xa>
 8076668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0807666c <_vfiprintf_r>:
 807666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8076670:	460d      	mov	r5, r1
 8076672:	b09d      	sub	sp, #116	; 0x74
 8076674:	4614      	mov	r4, r2
 8076676:	4698      	mov	r8, r3
 8076678:	4606      	mov	r6, r0
 807667a:	b118      	cbz	r0, 8076684 <_vfiprintf_r+0x18>
 807667c:	6983      	ldr	r3, [r0, #24]
 807667e:	b90b      	cbnz	r3, 8076684 <_vfiprintf_r+0x18>
 8076680:	f7fb fef2 	bl	8072468 <__sinit>
 8076684:	4b89      	ldr	r3, [pc, #548]	; (80768ac <_vfiprintf_r+0x240>)
 8076686:	429d      	cmp	r5, r3
 8076688:	d11b      	bne.n	80766c2 <_vfiprintf_r+0x56>
 807668a:	6875      	ldr	r5, [r6, #4]
 807668c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 807668e:	07d9      	lsls	r1, r3, #31
 8076690:	d405      	bmi.n	807669e <_vfiprintf_r+0x32>
 8076692:	89ab      	ldrh	r3, [r5, #12]
 8076694:	059a      	lsls	r2, r3, #22
 8076696:	d402      	bmi.n	807669e <_vfiprintf_r+0x32>
 8076698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 807669a:	f7fb ffa8 	bl	80725ee <__retarget_lock_acquire_recursive>
 807669e:	89ab      	ldrh	r3, [r5, #12]
 80766a0:	071b      	lsls	r3, r3, #28
 80766a2:	d501      	bpl.n	80766a8 <_vfiprintf_r+0x3c>
 80766a4:	692b      	ldr	r3, [r5, #16]
 80766a6:	b9eb      	cbnz	r3, 80766e4 <_vfiprintf_r+0x78>
 80766a8:	4629      	mov	r1, r5
 80766aa:	4630      	mov	r0, r6
 80766ac:	f000 f988 	bl	80769c0 <__swsetup_r>
 80766b0:	b1c0      	cbz	r0, 80766e4 <_vfiprintf_r+0x78>
 80766b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80766b4:	07dc      	lsls	r4, r3, #31
 80766b6:	d50e      	bpl.n	80766d6 <_vfiprintf_r+0x6a>
 80766b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80766bc:	b01d      	add	sp, #116	; 0x74
 80766be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80766c2:	4b7b      	ldr	r3, [pc, #492]	; (80768b0 <_vfiprintf_r+0x244>)
 80766c4:	429d      	cmp	r5, r3
 80766c6:	d101      	bne.n	80766cc <_vfiprintf_r+0x60>
 80766c8:	68b5      	ldr	r5, [r6, #8]
 80766ca:	e7df      	b.n	807668c <_vfiprintf_r+0x20>
 80766cc:	4b79      	ldr	r3, [pc, #484]	; (80768b4 <_vfiprintf_r+0x248>)
 80766ce:	429d      	cmp	r5, r3
 80766d0:	bf08      	it	eq
 80766d2:	68f5      	ldreq	r5, [r6, #12]
 80766d4:	e7da      	b.n	807668c <_vfiprintf_r+0x20>
 80766d6:	89ab      	ldrh	r3, [r5, #12]
 80766d8:	0598      	lsls	r0, r3, #22
 80766da:	d4ed      	bmi.n	80766b8 <_vfiprintf_r+0x4c>
 80766dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80766de:	f7fb ff87 	bl	80725f0 <__retarget_lock_release_recursive>
 80766e2:	e7e9      	b.n	80766b8 <_vfiprintf_r+0x4c>
 80766e4:	2300      	movs	r3, #0
 80766e6:	9309      	str	r3, [sp, #36]	; 0x24
 80766e8:	2320      	movs	r3, #32
 80766ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80766ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80766f2:	2330      	movs	r3, #48	; 0x30
 80766f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80768b8 <_vfiprintf_r+0x24c>
 80766f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80766fc:	f04f 0901 	mov.w	r9, #1
 8076700:	4623      	mov	r3, r4
 8076702:	469a      	mov	sl, r3
 8076704:	f813 2b01 	ldrb.w	r2, [r3], #1
 8076708:	b10a      	cbz	r2, 807670e <_vfiprintf_r+0xa2>
 807670a:	2a25      	cmp	r2, #37	; 0x25
 807670c:	d1f9      	bne.n	8076702 <_vfiprintf_r+0x96>
 807670e:	ebba 0b04 	subs.w	fp, sl, r4
 8076712:	d00b      	beq.n	807672c <_vfiprintf_r+0xc0>
 8076714:	465b      	mov	r3, fp
 8076716:	4622      	mov	r2, r4
 8076718:	4629      	mov	r1, r5
 807671a:	4630      	mov	r0, r6
 807671c:	f7ff ff93 	bl	8076646 <__sfputs_r>
 8076720:	3001      	adds	r0, #1
 8076722:	f000 80aa 	beq.w	807687a <_vfiprintf_r+0x20e>
 8076726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8076728:	445a      	add	r2, fp
 807672a:	9209      	str	r2, [sp, #36]	; 0x24
 807672c:	f89a 3000 	ldrb.w	r3, [sl]
 8076730:	2b00      	cmp	r3, #0
 8076732:	f000 80a2 	beq.w	807687a <_vfiprintf_r+0x20e>
 8076736:	2300      	movs	r3, #0
 8076738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 807673c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8076740:	f10a 0a01 	add.w	sl, sl, #1
 8076744:	9304      	str	r3, [sp, #16]
 8076746:	9307      	str	r3, [sp, #28]
 8076748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 807674c:	931a      	str	r3, [sp, #104]	; 0x68
 807674e:	4654      	mov	r4, sl
 8076750:	2205      	movs	r2, #5
 8076752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8076756:	4858      	ldr	r0, [pc, #352]	; (80768b8 <_vfiprintf_r+0x24c>)
 8076758:	f7e9 fd5a 	bl	8060210 <memchr>
 807675c:	9a04      	ldr	r2, [sp, #16]
 807675e:	b9d8      	cbnz	r0, 8076798 <_vfiprintf_r+0x12c>
 8076760:	06d1      	lsls	r1, r2, #27
 8076762:	bf44      	itt	mi
 8076764:	2320      	movmi	r3, #32
 8076766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 807676a:	0713      	lsls	r3, r2, #28
 807676c:	bf44      	itt	mi
 807676e:	232b      	movmi	r3, #43	; 0x2b
 8076770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8076774:	f89a 3000 	ldrb.w	r3, [sl]
 8076778:	2b2a      	cmp	r3, #42	; 0x2a
 807677a:	d015      	beq.n	80767a8 <_vfiprintf_r+0x13c>
 807677c:	9a07      	ldr	r2, [sp, #28]
 807677e:	4654      	mov	r4, sl
 8076780:	2000      	movs	r0, #0
 8076782:	f04f 0c0a 	mov.w	ip, #10
 8076786:	4621      	mov	r1, r4
 8076788:	f811 3b01 	ldrb.w	r3, [r1], #1
 807678c:	3b30      	subs	r3, #48	; 0x30
 807678e:	2b09      	cmp	r3, #9
 8076790:	d94e      	bls.n	8076830 <_vfiprintf_r+0x1c4>
 8076792:	b1b0      	cbz	r0, 80767c2 <_vfiprintf_r+0x156>
 8076794:	9207      	str	r2, [sp, #28]
 8076796:	e014      	b.n	80767c2 <_vfiprintf_r+0x156>
 8076798:	eba0 0308 	sub.w	r3, r0, r8
 807679c:	fa09 f303 	lsl.w	r3, r9, r3
 80767a0:	4313      	orrs	r3, r2
 80767a2:	9304      	str	r3, [sp, #16]
 80767a4:	46a2      	mov	sl, r4
 80767a6:	e7d2      	b.n	807674e <_vfiprintf_r+0xe2>
 80767a8:	9b03      	ldr	r3, [sp, #12]
 80767aa:	1d19      	adds	r1, r3, #4
 80767ac:	681b      	ldr	r3, [r3, #0]
 80767ae:	9103      	str	r1, [sp, #12]
 80767b0:	2b00      	cmp	r3, #0
 80767b2:	bfbb      	ittet	lt
 80767b4:	425b      	neglt	r3, r3
 80767b6:	f042 0202 	orrlt.w	r2, r2, #2
 80767ba:	9307      	strge	r3, [sp, #28]
 80767bc:	9307      	strlt	r3, [sp, #28]
 80767be:	bfb8      	it	lt
 80767c0:	9204      	strlt	r2, [sp, #16]
 80767c2:	7823      	ldrb	r3, [r4, #0]
 80767c4:	2b2e      	cmp	r3, #46	; 0x2e
 80767c6:	d10c      	bne.n	80767e2 <_vfiprintf_r+0x176>
 80767c8:	7863      	ldrb	r3, [r4, #1]
 80767ca:	2b2a      	cmp	r3, #42	; 0x2a
 80767cc:	d135      	bne.n	807683a <_vfiprintf_r+0x1ce>
 80767ce:	9b03      	ldr	r3, [sp, #12]
 80767d0:	1d1a      	adds	r2, r3, #4
 80767d2:	681b      	ldr	r3, [r3, #0]
 80767d4:	9203      	str	r2, [sp, #12]
 80767d6:	2b00      	cmp	r3, #0
 80767d8:	bfb8      	it	lt
 80767da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80767de:	3402      	adds	r4, #2
 80767e0:	9305      	str	r3, [sp, #20]
 80767e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80768c8 <_vfiprintf_r+0x25c>
 80767e6:	7821      	ldrb	r1, [r4, #0]
 80767e8:	2203      	movs	r2, #3
 80767ea:	4650      	mov	r0, sl
 80767ec:	f7e9 fd10 	bl	8060210 <memchr>
 80767f0:	b140      	cbz	r0, 8076804 <_vfiprintf_r+0x198>
 80767f2:	2340      	movs	r3, #64	; 0x40
 80767f4:	eba0 000a 	sub.w	r0, r0, sl
 80767f8:	fa03 f000 	lsl.w	r0, r3, r0
 80767fc:	9b04      	ldr	r3, [sp, #16]
 80767fe:	4303      	orrs	r3, r0
 8076800:	3401      	adds	r4, #1
 8076802:	9304      	str	r3, [sp, #16]
 8076804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8076808:	482c      	ldr	r0, [pc, #176]	; (80768bc <_vfiprintf_r+0x250>)
 807680a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 807680e:	2206      	movs	r2, #6
 8076810:	f7e9 fcfe 	bl	8060210 <memchr>
 8076814:	2800      	cmp	r0, #0
 8076816:	d03f      	beq.n	8076898 <_vfiprintf_r+0x22c>
 8076818:	4b29      	ldr	r3, [pc, #164]	; (80768c0 <_vfiprintf_r+0x254>)
 807681a:	bb1b      	cbnz	r3, 8076864 <_vfiprintf_r+0x1f8>
 807681c:	9b03      	ldr	r3, [sp, #12]
 807681e:	3307      	adds	r3, #7
 8076820:	f023 0307 	bic.w	r3, r3, #7
 8076824:	3308      	adds	r3, #8
 8076826:	9303      	str	r3, [sp, #12]
 8076828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 807682a:	443b      	add	r3, r7
 807682c:	9309      	str	r3, [sp, #36]	; 0x24
 807682e:	e767      	b.n	8076700 <_vfiprintf_r+0x94>
 8076830:	fb0c 3202 	mla	r2, ip, r2, r3
 8076834:	460c      	mov	r4, r1
 8076836:	2001      	movs	r0, #1
 8076838:	e7a5      	b.n	8076786 <_vfiprintf_r+0x11a>
 807683a:	2300      	movs	r3, #0
 807683c:	3401      	adds	r4, #1
 807683e:	9305      	str	r3, [sp, #20]
 8076840:	4619      	mov	r1, r3
 8076842:	f04f 0c0a 	mov.w	ip, #10
 8076846:	4620      	mov	r0, r4
 8076848:	f810 2b01 	ldrb.w	r2, [r0], #1
 807684c:	3a30      	subs	r2, #48	; 0x30
 807684e:	2a09      	cmp	r2, #9
 8076850:	d903      	bls.n	807685a <_vfiprintf_r+0x1ee>
 8076852:	2b00      	cmp	r3, #0
 8076854:	d0c5      	beq.n	80767e2 <_vfiprintf_r+0x176>
 8076856:	9105      	str	r1, [sp, #20]
 8076858:	e7c3      	b.n	80767e2 <_vfiprintf_r+0x176>
 807685a:	fb0c 2101 	mla	r1, ip, r1, r2
 807685e:	4604      	mov	r4, r0
 8076860:	2301      	movs	r3, #1
 8076862:	e7f0      	b.n	8076846 <_vfiprintf_r+0x1da>
 8076864:	ab03      	add	r3, sp, #12
 8076866:	9300      	str	r3, [sp, #0]
 8076868:	462a      	mov	r2, r5
 807686a:	4b16      	ldr	r3, [pc, #88]	; (80768c4 <_vfiprintf_r+0x258>)
 807686c:	a904      	add	r1, sp, #16
 807686e:	4630      	mov	r0, r6
 8076870:	f7fb ffd0 	bl	8072814 <_printf_float>
 8076874:	4607      	mov	r7, r0
 8076876:	1c78      	adds	r0, r7, #1
 8076878:	d1d6      	bne.n	8076828 <_vfiprintf_r+0x1bc>
 807687a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 807687c:	07d9      	lsls	r1, r3, #31
 807687e:	d405      	bmi.n	807688c <_vfiprintf_r+0x220>
 8076880:	89ab      	ldrh	r3, [r5, #12]
 8076882:	059a      	lsls	r2, r3, #22
 8076884:	d402      	bmi.n	807688c <_vfiprintf_r+0x220>
 8076886:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8076888:	f7fb feb2 	bl	80725f0 <__retarget_lock_release_recursive>
 807688c:	89ab      	ldrh	r3, [r5, #12]
 807688e:	065b      	lsls	r3, r3, #25
 8076890:	f53f af12 	bmi.w	80766b8 <_vfiprintf_r+0x4c>
 8076894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8076896:	e711      	b.n	80766bc <_vfiprintf_r+0x50>
 8076898:	ab03      	add	r3, sp, #12
 807689a:	9300      	str	r3, [sp, #0]
 807689c:	462a      	mov	r2, r5
 807689e:	4b09      	ldr	r3, [pc, #36]	; (80768c4 <_vfiprintf_r+0x258>)
 80768a0:	a904      	add	r1, sp, #16
 80768a2:	4630      	mov	r0, r6
 80768a4:	f7fc fa5a 	bl	8072d5c <_printf_i>
 80768a8:	e7e4      	b.n	8076874 <_vfiprintf_r+0x208>
 80768aa:	bf00      	nop
 80768ac:	0807757c 	.word	0x0807757c
 80768b0:	0807759c 	.word	0x0807759c
 80768b4:	0807755c 	.word	0x0807755c
 80768b8:	080779c4 	.word	0x080779c4
 80768bc:	080779ce 	.word	0x080779ce
 80768c0:	08072815 	.word	0x08072815
 80768c4:	08076647 	.word	0x08076647
 80768c8:	080779ca 	.word	0x080779ca

080768cc <_read_r>:
 80768cc:	b538      	push	{r3, r4, r5, lr}
 80768ce:	4d07      	ldr	r5, [pc, #28]	; (80768ec <_read_r+0x20>)
 80768d0:	4604      	mov	r4, r0
 80768d2:	4608      	mov	r0, r1
 80768d4:	4611      	mov	r1, r2
 80768d6:	2200      	movs	r2, #0
 80768d8:	602a      	str	r2, [r5, #0]
 80768da:	461a      	mov	r2, r3
 80768dc:	f7ec fd74 	bl	80633c8 <_read>
 80768e0:	1c43      	adds	r3, r0, #1
 80768e2:	d102      	bne.n	80768ea <_read_r+0x1e>
 80768e4:	682b      	ldr	r3, [r5, #0]
 80768e6:	b103      	cbz	r3, 80768ea <_read_r+0x1e>
 80768e8:	6023      	str	r3, [r4, #0]
 80768ea:	bd38      	pop	{r3, r4, r5, pc}
 80768ec:	20005d34 	.word	0x20005d34

080768f0 <nan>:
 80768f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80768f8 <nan+0x8>
 80768f4:	4770      	bx	lr
 80768f6:	bf00      	nop
 80768f8:	00000000 	.word	0x00000000
 80768fc:	7ff80000 	.word	0x7ff80000

08076900 <__swbuf_r>:
 8076900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076902:	460e      	mov	r6, r1
 8076904:	4614      	mov	r4, r2
 8076906:	4605      	mov	r5, r0
 8076908:	b118      	cbz	r0, 8076912 <__swbuf_r+0x12>
 807690a:	6983      	ldr	r3, [r0, #24]
 807690c:	b90b      	cbnz	r3, 8076912 <__swbuf_r+0x12>
 807690e:	f7fb fdab 	bl	8072468 <__sinit>
 8076912:	4b21      	ldr	r3, [pc, #132]	; (8076998 <__swbuf_r+0x98>)
 8076914:	429c      	cmp	r4, r3
 8076916:	d12b      	bne.n	8076970 <__swbuf_r+0x70>
 8076918:	686c      	ldr	r4, [r5, #4]
 807691a:	69a3      	ldr	r3, [r4, #24]
 807691c:	60a3      	str	r3, [r4, #8]
 807691e:	89a3      	ldrh	r3, [r4, #12]
 8076920:	071a      	lsls	r2, r3, #28
 8076922:	d52f      	bpl.n	8076984 <__swbuf_r+0x84>
 8076924:	6923      	ldr	r3, [r4, #16]
 8076926:	b36b      	cbz	r3, 8076984 <__swbuf_r+0x84>
 8076928:	6923      	ldr	r3, [r4, #16]
 807692a:	6820      	ldr	r0, [r4, #0]
 807692c:	1ac0      	subs	r0, r0, r3
 807692e:	6963      	ldr	r3, [r4, #20]
 8076930:	b2f6      	uxtb	r6, r6
 8076932:	4283      	cmp	r3, r0
 8076934:	4637      	mov	r7, r6
 8076936:	dc04      	bgt.n	8076942 <__swbuf_r+0x42>
 8076938:	4621      	mov	r1, r4
 807693a:	4628      	mov	r0, r5
 807693c:	f7fe fc0e 	bl	807515c <_fflush_r>
 8076940:	bb30      	cbnz	r0, 8076990 <__swbuf_r+0x90>
 8076942:	68a3      	ldr	r3, [r4, #8]
 8076944:	3b01      	subs	r3, #1
 8076946:	60a3      	str	r3, [r4, #8]
 8076948:	6823      	ldr	r3, [r4, #0]
 807694a:	1c5a      	adds	r2, r3, #1
 807694c:	6022      	str	r2, [r4, #0]
 807694e:	701e      	strb	r6, [r3, #0]
 8076950:	6963      	ldr	r3, [r4, #20]
 8076952:	3001      	adds	r0, #1
 8076954:	4283      	cmp	r3, r0
 8076956:	d004      	beq.n	8076962 <__swbuf_r+0x62>
 8076958:	89a3      	ldrh	r3, [r4, #12]
 807695a:	07db      	lsls	r3, r3, #31
 807695c:	d506      	bpl.n	807696c <__swbuf_r+0x6c>
 807695e:	2e0a      	cmp	r6, #10
 8076960:	d104      	bne.n	807696c <__swbuf_r+0x6c>
 8076962:	4621      	mov	r1, r4
 8076964:	4628      	mov	r0, r5
 8076966:	f7fe fbf9 	bl	807515c <_fflush_r>
 807696a:	b988      	cbnz	r0, 8076990 <__swbuf_r+0x90>
 807696c:	4638      	mov	r0, r7
 807696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8076970:	4b0a      	ldr	r3, [pc, #40]	; (807699c <__swbuf_r+0x9c>)
 8076972:	429c      	cmp	r4, r3
 8076974:	d101      	bne.n	807697a <__swbuf_r+0x7a>
 8076976:	68ac      	ldr	r4, [r5, #8]
 8076978:	e7cf      	b.n	807691a <__swbuf_r+0x1a>
 807697a:	4b09      	ldr	r3, [pc, #36]	; (80769a0 <__swbuf_r+0xa0>)
 807697c:	429c      	cmp	r4, r3
 807697e:	bf08      	it	eq
 8076980:	68ec      	ldreq	r4, [r5, #12]
 8076982:	e7ca      	b.n	807691a <__swbuf_r+0x1a>
 8076984:	4621      	mov	r1, r4
 8076986:	4628      	mov	r0, r5
 8076988:	f000 f81a 	bl	80769c0 <__swsetup_r>
 807698c:	2800      	cmp	r0, #0
 807698e:	d0cb      	beq.n	8076928 <__swbuf_r+0x28>
 8076990:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8076994:	e7ea      	b.n	807696c <__swbuf_r+0x6c>
 8076996:	bf00      	nop
 8076998:	0807757c 	.word	0x0807757c
 807699c:	0807759c 	.word	0x0807759c
 80769a0:	0807755c 	.word	0x0807755c

080769a4 <__ascii_wctomb>:
 80769a4:	b149      	cbz	r1, 80769ba <__ascii_wctomb+0x16>
 80769a6:	2aff      	cmp	r2, #255	; 0xff
 80769a8:	bf85      	ittet	hi
 80769aa:	238a      	movhi	r3, #138	; 0x8a
 80769ac:	6003      	strhi	r3, [r0, #0]
 80769ae:	700a      	strbls	r2, [r1, #0]
 80769b0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80769b4:	bf98      	it	ls
 80769b6:	2001      	movls	r0, #1
 80769b8:	4770      	bx	lr
 80769ba:	4608      	mov	r0, r1
 80769bc:	4770      	bx	lr
	...

080769c0 <__swsetup_r>:
 80769c0:	4b32      	ldr	r3, [pc, #200]	; (8076a8c <__swsetup_r+0xcc>)
 80769c2:	b570      	push	{r4, r5, r6, lr}
 80769c4:	681d      	ldr	r5, [r3, #0]
 80769c6:	4606      	mov	r6, r0
 80769c8:	460c      	mov	r4, r1
 80769ca:	b125      	cbz	r5, 80769d6 <__swsetup_r+0x16>
 80769cc:	69ab      	ldr	r3, [r5, #24]
 80769ce:	b913      	cbnz	r3, 80769d6 <__swsetup_r+0x16>
 80769d0:	4628      	mov	r0, r5
 80769d2:	f7fb fd49 	bl	8072468 <__sinit>
 80769d6:	4b2e      	ldr	r3, [pc, #184]	; (8076a90 <__swsetup_r+0xd0>)
 80769d8:	429c      	cmp	r4, r3
 80769da:	d10f      	bne.n	80769fc <__swsetup_r+0x3c>
 80769dc:	686c      	ldr	r4, [r5, #4]
 80769de:	89a3      	ldrh	r3, [r4, #12]
 80769e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80769e4:	0719      	lsls	r1, r3, #28
 80769e6:	d42c      	bmi.n	8076a42 <__swsetup_r+0x82>
 80769e8:	06dd      	lsls	r5, r3, #27
 80769ea:	d411      	bmi.n	8076a10 <__swsetup_r+0x50>
 80769ec:	2309      	movs	r3, #9
 80769ee:	6033      	str	r3, [r6, #0]
 80769f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80769f4:	81a3      	strh	r3, [r4, #12]
 80769f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80769fa:	e03e      	b.n	8076a7a <__swsetup_r+0xba>
 80769fc:	4b25      	ldr	r3, [pc, #148]	; (8076a94 <__swsetup_r+0xd4>)
 80769fe:	429c      	cmp	r4, r3
 8076a00:	d101      	bne.n	8076a06 <__swsetup_r+0x46>
 8076a02:	68ac      	ldr	r4, [r5, #8]
 8076a04:	e7eb      	b.n	80769de <__swsetup_r+0x1e>
 8076a06:	4b24      	ldr	r3, [pc, #144]	; (8076a98 <__swsetup_r+0xd8>)
 8076a08:	429c      	cmp	r4, r3
 8076a0a:	bf08      	it	eq
 8076a0c:	68ec      	ldreq	r4, [r5, #12]
 8076a0e:	e7e6      	b.n	80769de <__swsetup_r+0x1e>
 8076a10:	0758      	lsls	r0, r3, #29
 8076a12:	d512      	bpl.n	8076a3a <__swsetup_r+0x7a>
 8076a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8076a16:	b141      	cbz	r1, 8076a2a <__swsetup_r+0x6a>
 8076a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8076a1c:	4299      	cmp	r1, r3
 8076a1e:	d002      	beq.n	8076a26 <__swsetup_r+0x66>
 8076a20:	4630      	mov	r0, r6
 8076a22:	f7ff fc4d 	bl	80762c0 <_free_r>
 8076a26:	2300      	movs	r3, #0
 8076a28:	6363      	str	r3, [r4, #52]	; 0x34
 8076a2a:	89a3      	ldrh	r3, [r4, #12]
 8076a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8076a30:	81a3      	strh	r3, [r4, #12]
 8076a32:	2300      	movs	r3, #0
 8076a34:	6063      	str	r3, [r4, #4]
 8076a36:	6923      	ldr	r3, [r4, #16]
 8076a38:	6023      	str	r3, [r4, #0]
 8076a3a:	89a3      	ldrh	r3, [r4, #12]
 8076a3c:	f043 0308 	orr.w	r3, r3, #8
 8076a40:	81a3      	strh	r3, [r4, #12]
 8076a42:	6923      	ldr	r3, [r4, #16]
 8076a44:	b94b      	cbnz	r3, 8076a5a <__swsetup_r+0x9a>
 8076a46:	89a3      	ldrh	r3, [r4, #12]
 8076a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8076a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8076a50:	d003      	beq.n	8076a5a <__swsetup_r+0x9a>
 8076a52:	4621      	mov	r1, r4
 8076a54:	4630      	mov	r0, r6
 8076a56:	f000 f875 	bl	8076b44 <__smakebuf_r>
 8076a5a:	89a0      	ldrh	r0, [r4, #12]
 8076a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8076a60:	f010 0301 	ands.w	r3, r0, #1
 8076a64:	d00a      	beq.n	8076a7c <__swsetup_r+0xbc>
 8076a66:	2300      	movs	r3, #0
 8076a68:	60a3      	str	r3, [r4, #8]
 8076a6a:	6963      	ldr	r3, [r4, #20]
 8076a6c:	425b      	negs	r3, r3
 8076a6e:	61a3      	str	r3, [r4, #24]
 8076a70:	6923      	ldr	r3, [r4, #16]
 8076a72:	b943      	cbnz	r3, 8076a86 <__swsetup_r+0xc6>
 8076a74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8076a78:	d1ba      	bne.n	80769f0 <__swsetup_r+0x30>
 8076a7a:	bd70      	pop	{r4, r5, r6, pc}
 8076a7c:	0781      	lsls	r1, r0, #30
 8076a7e:	bf58      	it	pl
 8076a80:	6963      	ldrpl	r3, [r4, #20]
 8076a82:	60a3      	str	r3, [r4, #8]
 8076a84:	e7f4      	b.n	8076a70 <__swsetup_r+0xb0>
 8076a86:	2000      	movs	r0, #0
 8076a88:	e7f7      	b.n	8076a7a <__swsetup_r+0xba>
 8076a8a:	bf00      	nop
 8076a8c:	20000028 	.word	0x20000028
 8076a90:	0807757c 	.word	0x0807757c
 8076a94:	0807759c 	.word	0x0807759c
 8076a98:	0807755c 	.word	0x0807755c

08076a9c <__assert_func>:
 8076a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8076a9e:	4614      	mov	r4, r2
 8076aa0:	461a      	mov	r2, r3
 8076aa2:	4b09      	ldr	r3, [pc, #36]	; (8076ac8 <__assert_func+0x2c>)
 8076aa4:	681b      	ldr	r3, [r3, #0]
 8076aa6:	4605      	mov	r5, r0
 8076aa8:	68d8      	ldr	r0, [r3, #12]
 8076aaa:	b14c      	cbz	r4, 8076ac0 <__assert_func+0x24>
 8076aac:	4b07      	ldr	r3, [pc, #28]	; (8076acc <__assert_func+0x30>)
 8076aae:	9100      	str	r1, [sp, #0]
 8076ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8076ab4:	4906      	ldr	r1, [pc, #24]	; (8076ad0 <__assert_func+0x34>)
 8076ab6:	462b      	mov	r3, r5
 8076ab8:	f000 f80e 	bl	8076ad8 <fiprintf>
 8076abc:	f000 f8c2 	bl	8076c44 <abort>
 8076ac0:	4b04      	ldr	r3, [pc, #16]	; (8076ad4 <__assert_func+0x38>)
 8076ac2:	461c      	mov	r4, r3
 8076ac4:	e7f3      	b.n	8076aae <__assert_func+0x12>
 8076ac6:	bf00      	nop
 8076ac8:	20000028 	.word	0x20000028
 8076acc:	080779d5 	.word	0x080779d5
 8076ad0:	080779e2 	.word	0x080779e2
 8076ad4:	08077a10 	.word	0x08077a10

08076ad8 <fiprintf>:
 8076ad8:	b40e      	push	{r1, r2, r3}
 8076ada:	b503      	push	{r0, r1, lr}
 8076adc:	4601      	mov	r1, r0
 8076ade:	ab03      	add	r3, sp, #12
 8076ae0:	4805      	ldr	r0, [pc, #20]	; (8076af8 <fiprintf+0x20>)
 8076ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8076ae6:	6800      	ldr	r0, [r0, #0]
 8076ae8:	9301      	str	r3, [sp, #4]
 8076aea:	f7ff fdbf 	bl	807666c <_vfiprintf_r>
 8076aee:	b002      	add	sp, #8
 8076af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8076af4:	b003      	add	sp, #12
 8076af6:	4770      	bx	lr
 8076af8:	20000028 	.word	0x20000028

08076afc <__swhatbuf_r>:
 8076afc:	b570      	push	{r4, r5, r6, lr}
 8076afe:	460e      	mov	r6, r1
 8076b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8076b04:	2900      	cmp	r1, #0
 8076b06:	b096      	sub	sp, #88	; 0x58
 8076b08:	4614      	mov	r4, r2
 8076b0a:	461d      	mov	r5, r3
 8076b0c:	da07      	bge.n	8076b1e <__swhatbuf_r+0x22>
 8076b0e:	2300      	movs	r3, #0
 8076b10:	602b      	str	r3, [r5, #0]
 8076b12:	89b3      	ldrh	r3, [r6, #12]
 8076b14:	061a      	lsls	r2, r3, #24
 8076b16:	d410      	bmi.n	8076b3a <__swhatbuf_r+0x3e>
 8076b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8076b1c:	e00e      	b.n	8076b3c <__swhatbuf_r+0x40>
 8076b1e:	466a      	mov	r2, sp
 8076b20:	f000 f898 	bl	8076c54 <_fstat_r>
 8076b24:	2800      	cmp	r0, #0
 8076b26:	dbf2      	blt.n	8076b0e <__swhatbuf_r+0x12>
 8076b28:	9a01      	ldr	r2, [sp, #4]
 8076b2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8076b2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8076b32:	425a      	negs	r2, r3
 8076b34:	415a      	adcs	r2, r3
 8076b36:	602a      	str	r2, [r5, #0]
 8076b38:	e7ee      	b.n	8076b18 <__swhatbuf_r+0x1c>
 8076b3a:	2340      	movs	r3, #64	; 0x40
 8076b3c:	2000      	movs	r0, #0
 8076b3e:	6023      	str	r3, [r4, #0]
 8076b40:	b016      	add	sp, #88	; 0x58
 8076b42:	bd70      	pop	{r4, r5, r6, pc}

08076b44 <__smakebuf_r>:
 8076b44:	898b      	ldrh	r3, [r1, #12]
 8076b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8076b48:	079d      	lsls	r5, r3, #30
 8076b4a:	4606      	mov	r6, r0
 8076b4c:	460c      	mov	r4, r1
 8076b4e:	d507      	bpl.n	8076b60 <__smakebuf_r+0x1c>
 8076b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8076b54:	6023      	str	r3, [r4, #0]
 8076b56:	6123      	str	r3, [r4, #16]
 8076b58:	2301      	movs	r3, #1
 8076b5a:	6163      	str	r3, [r4, #20]
 8076b5c:	b002      	add	sp, #8
 8076b5e:	bd70      	pop	{r4, r5, r6, pc}
 8076b60:	ab01      	add	r3, sp, #4
 8076b62:	466a      	mov	r2, sp
 8076b64:	f7ff ffca 	bl	8076afc <__swhatbuf_r>
 8076b68:	9900      	ldr	r1, [sp, #0]
 8076b6a:	4605      	mov	r5, r0
 8076b6c:	4630      	mov	r0, r6
 8076b6e:	f7fb fd57 	bl	8072620 <_malloc_r>
 8076b72:	b948      	cbnz	r0, 8076b88 <__smakebuf_r+0x44>
 8076b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8076b78:	059a      	lsls	r2, r3, #22
 8076b7a:	d4ef      	bmi.n	8076b5c <__smakebuf_r+0x18>
 8076b7c:	f023 0303 	bic.w	r3, r3, #3
 8076b80:	f043 0302 	orr.w	r3, r3, #2
 8076b84:	81a3      	strh	r3, [r4, #12]
 8076b86:	e7e3      	b.n	8076b50 <__smakebuf_r+0xc>
 8076b88:	4b0d      	ldr	r3, [pc, #52]	; (8076bc0 <__smakebuf_r+0x7c>)
 8076b8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8076b8c:	89a3      	ldrh	r3, [r4, #12]
 8076b8e:	6020      	str	r0, [r4, #0]
 8076b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8076b94:	81a3      	strh	r3, [r4, #12]
 8076b96:	9b00      	ldr	r3, [sp, #0]
 8076b98:	6163      	str	r3, [r4, #20]
 8076b9a:	9b01      	ldr	r3, [sp, #4]
 8076b9c:	6120      	str	r0, [r4, #16]
 8076b9e:	b15b      	cbz	r3, 8076bb8 <__smakebuf_r+0x74>
 8076ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8076ba4:	4630      	mov	r0, r6
 8076ba6:	f000 f867 	bl	8076c78 <_isatty_r>
 8076baa:	b128      	cbz	r0, 8076bb8 <__smakebuf_r+0x74>
 8076bac:	89a3      	ldrh	r3, [r4, #12]
 8076bae:	f023 0303 	bic.w	r3, r3, #3
 8076bb2:	f043 0301 	orr.w	r3, r3, #1
 8076bb6:	81a3      	strh	r3, [r4, #12]
 8076bb8:	89a0      	ldrh	r0, [r4, #12]
 8076bba:	4305      	orrs	r5, r0
 8076bbc:	81a5      	strh	r5, [r4, #12]
 8076bbe:	e7cd      	b.n	8076b5c <__smakebuf_r+0x18>
 8076bc0:	08072401 	.word	0x08072401

08076bc4 <memmove>:
 8076bc4:	4288      	cmp	r0, r1
 8076bc6:	b510      	push	{r4, lr}
 8076bc8:	eb01 0402 	add.w	r4, r1, r2
 8076bcc:	d902      	bls.n	8076bd4 <memmove+0x10>
 8076bce:	4284      	cmp	r4, r0
 8076bd0:	4623      	mov	r3, r4
 8076bd2:	d807      	bhi.n	8076be4 <memmove+0x20>
 8076bd4:	1e43      	subs	r3, r0, #1
 8076bd6:	42a1      	cmp	r1, r4
 8076bd8:	d008      	beq.n	8076bec <memmove+0x28>
 8076bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8076bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8076be2:	e7f8      	b.n	8076bd6 <memmove+0x12>
 8076be4:	4402      	add	r2, r0
 8076be6:	4601      	mov	r1, r0
 8076be8:	428a      	cmp	r2, r1
 8076bea:	d100      	bne.n	8076bee <memmove+0x2a>
 8076bec:	bd10      	pop	{r4, pc}
 8076bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8076bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8076bf6:	e7f7      	b.n	8076be8 <memmove+0x24>

08076bf8 <_realloc_r>:
 8076bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076bfa:	4607      	mov	r7, r0
 8076bfc:	4614      	mov	r4, r2
 8076bfe:	460e      	mov	r6, r1
 8076c00:	b921      	cbnz	r1, 8076c0c <_realloc_r+0x14>
 8076c02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8076c06:	4611      	mov	r1, r2
 8076c08:	f7fb bd0a 	b.w	8072620 <_malloc_r>
 8076c0c:	b922      	cbnz	r2, 8076c18 <_realloc_r+0x20>
 8076c0e:	f7ff fb57 	bl	80762c0 <_free_r>
 8076c12:	4625      	mov	r5, r4
 8076c14:	4628      	mov	r0, r5
 8076c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8076c18:	f000 f83e 	bl	8076c98 <_malloc_usable_size_r>
 8076c1c:	42a0      	cmp	r0, r4
 8076c1e:	d20f      	bcs.n	8076c40 <_realloc_r+0x48>
 8076c20:	4621      	mov	r1, r4
 8076c22:	4638      	mov	r0, r7
 8076c24:	f7fb fcfc 	bl	8072620 <_malloc_r>
 8076c28:	4605      	mov	r5, r0
 8076c2a:	2800      	cmp	r0, #0
 8076c2c:	d0f2      	beq.n	8076c14 <_realloc_r+0x1c>
 8076c2e:	4631      	mov	r1, r6
 8076c30:	4622      	mov	r2, r4
 8076c32:	f7fb fcde 	bl	80725f2 <memcpy>
 8076c36:	4631      	mov	r1, r6
 8076c38:	4638      	mov	r0, r7
 8076c3a:	f7ff fb41 	bl	80762c0 <_free_r>
 8076c3e:	e7e9      	b.n	8076c14 <_realloc_r+0x1c>
 8076c40:	4635      	mov	r5, r6
 8076c42:	e7e7      	b.n	8076c14 <_realloc_r+0x1c>

08076c44 <abort>:
 8076c44:	b508      	push	{r3, lr}
 8076c46:	2006      	movs	r0, #6
 8076c48:	f000 f856 	bl	8076cf8 <raise>
 8076c4c:	2001      	movs	r0, #1
 8076c4e:	f7ec fbb1 	bl	80633b4 <_exit>
	...

08076c54 <_fstat_r>:
 8076c54:	b538      	push	{r3, r4, r5, lr}
 8076c56:	4d07      	ldr	r5, [pc, #28]	; (8076c74 <_fstat_r+0x20>)
 8076c58:	2300      	movs	r3, #0
 8076c5a:	4604      	mov	r4, r0
 8076c5c:	4608      	mov	r0, r1
 8076c5e:	4611      	mov	r1, r2
 8076c60:	602b      	str	r3, [r5, #0]
 8076c62:	f7ec fbf6 	bl	8063452 <_fstat>
 8076c66:	1c43      	adds	r3, r0, #1
 8076c68:	d102      	bne.n	8076c70 <_fstat_r+0x1c>
 8076c6a:	682b      	ldr	r3, [r5, #0]
 8076c6c:	b103      	cbz	r3, 8076c70 <_fstat_r+0x1c>
 8076c6e:	6023      	str	r3, [r4, #0]
 8076c70:	bd38      	pop	{r3, r4, r5, pc}
 8076c72:	bf00      	nop
 8076c74:	20005d34 	.word	0x20005d34

08076c78 <_isatty_r>:
 8076c78:	b538      	push	{r3, r4, r5, lr}
 8076c7a:	4d06      	ldr	r5, [pc, #24]	; (8076c94 <_isatty_r+0x1c>)
 8076c7c:	2300      	movs	r3, #0
 8076c7e:	4604      	mov	r4, r0
 8076c80:	4608      	mov	r0, r1
 8076c82:	602b      	str	r3, [r5, #0]
 8076c84:	f7ec fbf5 	bl	8063472 <_isatty>
 8076c88:	1c43      	adds	r3, r0, #1
 8076c8a:	d102      	bne.n	8076c92 <_isatty_r+0x1a>
 8076c8c:	682b      	ldr	r3, [r5, #0]
 8076c8e:	b103      	cbz	r3, 8076c92 <_isatty_r+0x1a>
 8076c90:	6023      	str	r3, [r4, #0]
 8076c92:	bd38      	pop	{r3, r4, r5, pc}
 8076c94:	20005d34 	.word	0x20005d34

08076c98 <_malloc_usable_size_r>:
 8076c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8076c9c:	1f18      	subs	r0, r3, #4
 8076c9e:	2b00      	cmp	r3, #0
 8076ca0:	bfbc      	itt	lt
 8076ca2:	580b      	ldrlt	r3, [r1, r0]
 8076ca4:	18c0      	addlt	r0, r0, r3
 8076ca6:	4770      	bx	lr

08076ca8 <_raise_r>:
 8076ca8:	291f      	cmp	r1, #31
 8076caa:	b538      	push	{r3, r4, r5, lr}
 8076cac:	4604      	mov	r4, r0
 8076cae:	460d      	mov	r5, r1
 8076cb0:	d904      	bls.n	8076cbc <_raise_r+0x14>
 8076cb2:	2316      	movs	r3, #22
 8076cb4:	6003      	str	r3, [r0, #0]
 8076cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8076cba:	bd38      	pop	{r3, r4, r5, pc}
 8076cbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8076cbe:	b112      	cbz	r2, 8076cc6 <_raise_r+0x1e>
 8076cc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8076cc4:	b94b      	cbnz	r3, 8076cda <_raise_r+0x32>
 8076cc6:	4620      	mov	r0, r4
 8076cc8:	f000 f830 	bl	8076d2c <_getpid_r>
 8076ccc:	462a      	mov	r2, r5
 8076cce:	4601      	mov	r1, r0
 8076cd0:	4620      	mov	r0, r4
 8076cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8076cd6:	f000 b817 	b.w	8076d08 <_kill_r>
 8076cda:	2b01      	cmp	r3, #1
 8076cdc:	d00a      	beq.n	8076cf4 <_raise_r+0x4c>
 8076cde:	1c59      	adds	r1, r3, #1
 8076ce0:	d103      	bne.n	8076cea <_raise_r+0x42>
 8076ce2:	2316      	movs	r3, #22
 8076ce4:	6003      	str	r3, [r0, #0]
 8076ce6:	2001      	movs	r0, #1
 8076ce8:	e7e7      	b.n	8076cba <_raise_r+0x12>
 8076cea:	2400      	movs	r4, #0
 8076cec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8076cf0:	4628      	mov	r0, r5
 8076cf2:	4798      	blx	r3
 8076cf4:	2000      	movs	r0, #0
 8076cf6:	e7e0      	b.n	8076cba <_raise_r+0x12>

08076cf8 <raise>:
 8076cf8:	4b02      	ldr	r3, [pc, #8]	; (8076d04 <raise+0xc>)
 8076cfa:	4601      	mov	r1, r0
 8076cfc:	6818      	ldr	r0, [r3, #0]
 8076cfe:	f7ff bfd3 	b.w	8076ca8 <_raise_r>
 8076d02:	bf00      	nop
 8076d04:	20000028 	.word	0x20000028

08076d08 <_kill_r>:
 8076d08:	b538      	push	{r3, r4, r5, lr}
 8076d0a:	4d07      	ldr	r5, [pc, #28]	; (8076d28 <_kill_r+0x20>)
 8076d0c:	2300      	movs	r3, #0
 8076d0e:	4604      	mov	r4, r0
 8076d10:	4608      	mov	r0, r1
 8076d12:	4611      	mov	r1, r2
 8076d14:	602b      	str	r3, [r5, #0]
 8076d16:	f7ec fb3d 	bl	8063394 <_kill>
 8076d1a:	1c43      	adds	r3, r0, #1
 8076d1c:	d102      	bne.n	8076d24 <_kill_r+0x1c>
 8076d1e:	682b      	ldr	r3, [r5, #0]
 8076d20:	b103      	cbz	r3, 8076d24 <_kill_r+0x1c>
 8076d22:	6023      	str	r3, [r4, #0]
 8076d24:	bd38      	pop	{r3, r4, r5, pc}
 8076d26:	bf00      	nop
 8076d28:	20005d34 	.word	0x20005d34

08076d2c <_getpid_r>:
 8076d2c:	f7ec bb2a 	b.w	8063384 <_getpid>

08076d30 <_init>:
 8076d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076d32:	bf00      	nop
 8076d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8076d36:	bc08      	pop	{r3}
 8076d38:	469e      	mov	lr, r3
 8076d3a:	4770      	bx	lr

08076d3c <_fini>:
 8076d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8076d3e:	bf00      	nop
 8076d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8076d42:	bc08      	pop	{r3}
 8076d44:	469e      	mov	lr, r3
 8076d46:	4770      	bx	lr
