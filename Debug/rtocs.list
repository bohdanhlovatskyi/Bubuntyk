
rtocs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800cc18  0800cc18  0001cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d294  0800d294  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d294  0800d294  0001d294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d29c  0800d29c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d29c  0800d29c  0001d29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2a0  0800d2a0  0001d2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d2a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056cc  2000008c  0800d330  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005758  0800d330  00025758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032a78  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005986  00000000  00000000  00052b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  000584c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b90  00000000  00000000  0005a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d80b  00000000  00000000  0005bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ac09  00000000  00000000  000795cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f8f7  00000000  00000000  000a41d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143acb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008020  00000000  00000000  00143b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc00 	.word	0x0800cc00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800cc00 	.word	0x0800cc00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// initialize sd card now to check whether it is working
	// second arg is basically prefic of path to file
	FRESULT fres = f_mount(&FatFs, "", 1);
 800058e:	2201      	movs	r2, #1
 8000590:	495c      	ldr	r1, [pc, #368]	; (8000704 <MX_FREERTOS_Init+0x17c>)
 8000592:	485d      	ldr	r0, [pc, #372]	; (8000708 <MX_FREERTOS_Init+0x180>)
 8000594:	f006 ff80 	bl	8007498 <f_mount>
 8000598:	4603      	mov	r3, r0
 800059a:	71fb      	strb	r3, [r7, #7]
	if (fres != FR_OK) {
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d013      	beq.n	80005ca <MX_FREERTOS_Init+0x42>
		myprintf("f_mount error (%i)\r\n", fres);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	461a      	mov	r2, r3
 80005a6:	4959      	ldr	r1, [pc, #356]	; (800070c <MX_FREERTOS_Init+0x184>)
 80005a8:	4859      	ldr	r0, [pc, #356]	; (8000710 <MX_FREERTOS_Init+0x188>)
 80005aa:	f00b ff75 	bl	800c498 <siprintf>
 80005ae:	4858      	ldr	r0, [pc, #352]	; (8000710 <MX_FREERTOS_Init+0x188>)
 80005b0:	f7ff fe16 	bl	80001e0 <strlen>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005bc:	4954      	ldr	r1, [pc, #336]	; (8000710 <MX_FREERTOS_Init+0x188>)
 80005be:	4855      	ldr	r0, [pc, #340]	; (8000714 <MX_FREERTOS_Init+0x18c>)
 80005c0:	f003 fc5a 	bl	8003e78 <HAL_UART_Transmit>
		Error_Handler();
 80005c4:	f000 fd9c 	bl	8001100 <Error_Handler>
 80005c8:	e00e      	b.n	80005e8 <MX_FREERTOS_Init+0x60>
	} else {
		myprintf("SD card mounted\n");
 80005ca:	4953      	ldr	r1, [pc, #332]	; (8000718 <MX_FREERTOS_Init+0x190>)
 80005cc:	4850      	ldr	r0, [pc, #320]	; (8000710 <MX_FREERTOS_Init+0x188>)
 80005ce:	f00b ff63 	bl	800c498 <siprintf>
 80005d2:	484f      	ldr	r0, [pc, #316]	; (8000710 <MX_FREERTOS_Init+0x188>)
 80005d4:	f7ff fe04 	bl	80001e0 <strlen>
 80005d8:	4603      	mov	r3, r0
 80005da:	b29a      	uxth	r2, r3
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e0:	494b      	ldr	r1, [pc, #300]	; (8000710 <MX_FREERTOS_Init+0x188>)
 80005e2:	484c      	ldr	r0, [pc, #304]	; (8000714 <MX_FREERTOS_Init+0x18c>)
 80005e4:	f003 fc48 	bl	8003e78 <HAL_UART_Transmit>
	}
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of telemetryFileMutex */
  telemetryFileMutexHandle = osMutexNew(&telemetryFileMutex_attributes);
 80005e8:	484c      	ldr	r0, [pc, #304]	; (800071c <MX_FREERTOS_Init+0x194>)
 80005ea:	f008 f897 	bl	800871c <osMutexNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a4b      	ldr	r2, [pc, #300]	; (8000720 <MX_FREERTOS_Init+0x198>)
 80005f2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txThreadSem */
  txThreadSemHandle = osSemaphoreNew(1, 1, &txThreadSem_attributes);
 80005f4:	4a4b      	ldr	r2, [pc, #300]	; (8000724 <MX_FREERTOS_Init+0x19c>)
 80005f6:	2101      	movs	r1, #1
 80005f8:	2001      	movs	r0, #1
 80005fa:	f008 f99d 	bl	8008938 <osSemaphoreNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a49      	ldr	r2, [pc, #292]	; (8000728 <MX_FREERTOS_Init+0x1a0>)
 8000602:	6013      	str	r3, [r2, #0]

  /* creation of rxThreadSem */
  rxThreadSemHandle = osSemaphoreNew(1, 1, &rxThreadSem_attributes);
 8000604:	4a49      	ldr	r2, [pc, #292]	; (800072c <MX_FREERTOS_Init+0x1a4>)
 8000606:	2101      	movs	r1, #1
 8000608:	2001      	movs	r0, #1
 800060a:	f008 f995 	bl	8008938 <osSemaphoreNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a47      	ldr	r2, [pc, #284]	; (8000730 <MX_FREERTOS_Init+0x1a8>)
 8000612:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreAcquire(txThreadSemHandle, 0);
 8000614:	4b44      	ldr	r3, [pc, #272]	; (8000728 <MX_FREERTOS_Init+0x1a0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f008 fa16 	bl	8008a4c <osSemaphoreAcquire>
  osSemaphoreAcquire(rxThreadSemHandle, 0);
 8000620:	4b43      	ldr	r3, [pc, #268]	; (8000730 <MX_FREERTOS_Init+0x1a8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f008 fa10 	bl	8008a4c <osSemaphoreAcquire>
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of accTimer */
  accTimerHandle = osTimerNew(accTimerCallback, osTimerPeriodic, NULL, &accTimer_attributes);
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <MX_FREERTOS_Init+0x1ac>)
 800062e:	2200      	movs	r2, #0
 8000630:	2101      	movs	r1, #1
 8000632:	4841      	ldr	r0, [pc, #260]	; (8000738 <MX_FREERTOS_Init+0x1b0>)
 8000634:	f007 ffc8 	bl	80085c8 <osTimerNew>
 8000638:	4603      	mov	r3, r0
 800063a:	4a40      	ldr	r2, [pc, #256]	; (800073c <MX_FREERTOS_Init+0x1b4>)
 800063c:	6013      	str	r3, [r2, #0]

  /* creation of temperatureTimer */
  temperatureTimerHandle = osTimerNew(temperatureTimerCallback, osTimerPeriodic, NULL, &temperatureTimer_attributes);
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <MX_FREERTOS_Init+0x1b8>)
 8000640:	2200      	movs	r2, #0
 8000642:	2101      	movs	r1, #1
 8000644:	483f      	ldr	r0, [pc, #252]	; (8000744 <MX_FREERTOS_Init+0x1bc>)
 8000646:	f007 ffbf 	bl	80085c8 <osTimerNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a3e      	ldr	r2, [pc, #248]	; (8000748 <MX_FREERTOS_Init+0x1c0>)
 800064e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  if (accTimerHandle != NULL)  {
 8000650:	4b3a      	ldr	r3, [pc, #232]	; (800073c <MX_FREERTOS_Init+0x1b4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d010      	beq.n	800067a <MX_FREERTOS_Init+0xf2>
      status = osTimerStart(accTimerHandle, 10000U);       // start timer
 8000658:	4b38      	ldr	r3, [pc, #224]	; (800073c <MX_FREERTOS_Init+0x1b4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000660:	4618      	mov	r0, r3
 8000662:	f008 f82d 	bl	80086c0 <osTimerStart>
 8000666:	4603      	mov	r3, r0
 8000668:	4a38      	ldr	r2, [pc, #224]	; (800074c <MX_FREERTOS_Init+0x1c4>)
 800066a:	6013      	str	r3, [r2, #0]
      if (status != osOK) {
 800066c:	4b37      	ldr	r3, [pc, #220]	; (800074c <MX_FREERTOS_Init+0x1c4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d004      	beq.n	800067e <MX_FREERTOS_Init+0xf6>
        // Timer could not be started
    	Error_Handler();
 8000674:	f000 fd44 	bl	8001100 <Error_Handler>
 8000678:	e001      	b.n	800067e <MX_FREERTOS_Init+0xf6>
      }
  } else {
	  Error_Handler();
 800067a:	f000 fd41 	bl	8001100 <Error_Handler>
  }

  if (temperatureTimerHandle != NULL)  {
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <MX_FREERTOS_Init+0x1c0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d010      	beq.n	80006a8 <MX_FREERTOS_Init+0x120>
        status = osTimerStart(temperatureTimerHandle, 10000U);       // start timer
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <MX_FREERTOS_Init+0x1c0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f242 7110 	movw	r1, #10000	; 0x2710
 800068e:	4618      	mov	r0, r3
 8000690:	f008 f816 	bl	80086c0 <osTimerStart>
 8000694:	4603      	mov	r3, r0
 8000696:	4a2d      	ldr	r2, [pc, #180]	; (800074c <MX_FREERTOS_Init+0x1c4>)
 8000698:	6013      	str	r3, [r2, #0]
        if (status != osOK) {
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_FREERTOS_Init+0x1c4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d004      	beq.n	80006ac <MX_FREERTOS_Init+0x124>
          // Timer could not be started
      	Error_Handler();
 80006a2:	f000 fd2d 	bl	8001100 <Error_Handler>
 80006a6:	e001      	b.n	80006ac <MX_FREERTOS_Init+0x124>
        }
    } else {
  	  Error_Handler();
 80006a8:	f000 fd2a 	bl	8001100 <Error_Handler>
    }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  telemetryQueueHandle = osMessageQueueNew(16, sizeof(TelemetryBase), &telemetryQueue_attributes);
 80006ac:	4a28      	ldr	r2, [pc, #160]	; (8000750 <MX_FREERTOS_Init+0x1c8>)
 80006ae:	2138      	movs	r1, #56	; 0x38
 80006b0:	2010      	movs	r0, #16
 80006b2:	f008 fa85 	bl	8008bc0 <osMessageQueueNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a26      	ldr	r2, [pc, #152]	; (8000754 <MX_FREERTOS_Init+0x1cc>)
 80006ba:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006bc:	4a26      	ldr	r2, [pc, #152]	; (8000758 <MX_FREERTOS_Init+0x1d0>)
 80006be:	2100      	movs	r1, #0
 80006c0:	4826      	ldr	r0, [pc, #152]	; (800075c <MX_FREERTOS_Init+0x1d4>)
 80006c2:	f007 febf 	bl	8008444 <osThreadNew>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a25      	ldr	r2, [pc, #148]	; (8000760 <MX_FREERTOS_Init+0x1d8>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* creation of rxDataThread */
  rxDataThreadHandle = osThreadNew(startRxDataThread, NULL, &rxDataThread_attributes);
 80006cc:	4a25      	ldr	r2, [pc, #148]	; (8000764 <MX_FREERTOS_Init+0x1dc>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4825      	ldr	r0, [pc, #148]	; (8000768 <MX_FREERTOS_Init+0x1e0>)
 80006d2:	f007 feb7 	bl	8008444 <osThreadNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a24      	ldr	r2, [pc, #144]	; (800076c <MX_FREERTOS_Init+0x1e4>)
 80006da:	6013      	str	r3, [r2, #0]

  /* creation of txDataThread */
  txDataThreadHandle = osThreadNew(startTxDataThread, NULL, &txDataThread_attributes);
 80006dc:	4a24      	ldr	r2, [pc, #144]	; (8000770 <MX_FREERTOS_Init+0x1e8>)
 80006de:	2100      	movs	r1, #0
 80006e0:	4824      	ldr	r0, [pc, #144]	; (8000774 <MX_FREERTOS_Init+0x1ec>)
 80006e2:	f007 feaf 	bl	8008444 <osThreadNew>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a23      	ldr	r2, [pc, #140]	; (8000778 <MX_FREERTOS_Init+0x1f0>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* creation of telemetryThread */
  telemetryThreadHandle = osThreadNew(startTelemetryThread, NULL, &telemetryThread_attributes);
 80006ec:	4a23      	ldr	r2, [pc, #140]	; (800077c <MX_FREERTOS_Init+0x1f4>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4823      	ldr	r0, [pc, #140]	; (8000780 <MX_FREERTOS_Init+0x1f8>)
 80006f2:	f007 fea7 	bl	8008444 <osThreadNew>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <MX_FREERTOS_Init+0x1fc>)
 80006fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	0800ccb0 	.word	0x0800ccb0
 8000708:	20004ccc 	.word	0x20004ccc
 800070c:	0800ccb4 	.word	0x0800ccb4
 8000710:	200000a8 	.word	0x200000a8
 8000714:	2000524c 	.word	0x2000524c
 8000718:	0800cccc 	.word	0x0800cccc
 800071c:	0800d120 	.word	0x0800d120
 8000720:	20004f04 	.word	0x20004f04
 8000724:	0800d130 	.word	0x0800d130
 8000728:	2000514c 	.word	0x2000514c
 800072c:	0800d140 	.word	0x0800d140
 8000730:	20004f00 	.word	0x20004f00
 8000734:	0800d100 	.word	0x0800d100
 8000738:	08000b05 	.word	0x08000b05
 800073c:	20004f08 	.word	0x20004f08
 8000740:	0800d110 	.word	0x0800d110
 8000744:	08000b55 	.word	0x08000b55
 8000748:	20004f18 	.word	0x20004f18
 800074c:	20005154 	.word	0x20005154
 8000750:	0800d150 	.word	0x0800d150
 8000754:	20004f14 	.word	0x20004f14
 8000758:	0800d070 	.word	0x0800d070
 800075c:	08000789 	.word	0x08000789
 8000760:	20004cbc 	.word	0x20004cbc
 8000764:	0800d094 	.word	0x0800d094
 8000768:	08000799 	.word	0x08000799
 800076c:	20004f0c 	.word	0x20004f0c
 8000770:	0800d0b8 	.word	0x0800d0b8
 8000774:	080007b5 	.word	0x080007b5
 8000778:	20005150 	.word	0x20005150
 800077c:	0800d0dc 	.word	0x0800d0dc
 8000780:	08000925 	.word	0x08000925
 8000784:	20004f10 	.word	0x20004f10

08000788 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f007 fee9 	bl	8008568 <osDelay>
 8000796:	e7fb      	b.n	8000790 <StartDefaultTask+0x8>

08000798 <startRxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRxDataThread */
void startRxDataThread(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRxDataThread */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(rxThreadSemHandle, osWaitForever);
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <startRxDataThread+0x18>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a8:	4618      	mov	r0, r3
 80007aa:	f008 f94f 	bl	8008a4c <osSemaphoreAcquire>
 80007ae:	e7f7      	b.n	80007a0 <startRxDataThread+0x8>
 80007b0:	20004f00 	.word	0x20004f00

080007b4 <startTxDataThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTxDataThread */
void startTxDataThread(void *argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b0a4      	sub	sp, #144	; 0x90
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTxDataThread */
	FRESULT rr;
	// TODO: get rid of magic constants
	BYTE rbuf[128] = {0};
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	227c      	movs	r2, #124	; 0x7c
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f00b fd89 	bl	800c2e0 <memset>
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 80007ce:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <startTxDataThread+0x140>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d6:	4618      	mov	r0, r3
 80007d8:	f008 f938 	bl	8008a4c <osSemaphoreAcquire>

	  // there is no need to take mutex, as currenlty this is the only task
	  // that actually uses uart (if we omit the debug part)

	  // read from sd and write the info into uart (mock gprs)
	  status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80007dc:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <startTxDataThread+0x144>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007e4:	4618      	mov	r0, r3
 80007e6:	f008 f81f 	bl	8008828 <osMutexAcquire>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a43      	ldr	r2, [pc, #268]	; (80008fc <startTxDataThread+0x148>)
 80007ee:	6013      	str	r3, [r2, #0]
	  if (status != osOK) {
 80007f0:	4b42      	ldr	r3, [pc, #264]	; (80008fc <startTxDataThread+0x148>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d00f      	beq.n	8000818 <startTxDataThread+0x64>
		  myprintf("Could not take mutex for reading into file");
 80007f8:	4941      	ldr	r1, [pc, #260]	; (8000900 <startTxDataThread+0x14c>)
 80007fa:	4842      	ldr	r0, [pc, #264]	; (8000904 <startTxDataThread+0x150>)
 80007fc:	f00b fe4c 	bl	800c498 <siprintf>
 8000800:	4840      	ldr	r0, [pc, #256]	; (8000904 <startTxDataThread+0x150>)
 8000802:	f7ff fced 	bl	80001e0 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800080e:	493d      	ldr	r1, [pc, #244]	; (8000904 <startTxDataThread+0x150>)
 8000810:	483d      	ldr	r0, [pc, #244]	; (8000908 <startTxDataThread+0x154>)
 8000812:	f003 fb31 	bl	8003e78 <HAL_UART_Transmit>
 8000816:	e055      	b.n	80008c4 <startTxDataThread+0x110>
	  } else {
		  rr = f_open(&telemetryFile, "write.txt", FA_READ);
 8000818:	2201      	movs	r2, #1
 800081a:	493c      	ldr	r1, [pc, #240]	; (800090c <startTxDataThread+0x158>)
 800081c:	483c      	ldr	r0, [pc, #240]	; (8000910 <startTxDataThread+0x15c>)
 800081e:	f006 fe9f 	bl	8007560 <f_open>
 8000822:	4603      	mov	r3, r0
 8000824:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f


		  if(rr == FR_OK) {
 8000828:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800082c:	2b00      	cmp	r3, #0
 800082e:	d110      	bne.n	8000852 <startTxDataThread+0x9e>
			  myprintf("I was able to open '%s' for reading\n", TELEMETRY_FILE);
 8000830:	4a38      	ldr	r2, [pc, #224]	; (8000914 <startTxDataThread+0x160>)
 8000832:	4939      	ldr	r1, [pc, #228]	; (8000918 <startTxDataThread+0x164>)
 8000834:	4833      	ldr	r0, [pc, #204]	; (8000904 <startTxDataThread+0x150>)
 8000836:	f00b fe2f 	bl	800c498 <siprintf>
 800083a:	4832      	ldr	r0, [pc, #200]	; (8000904 <startTxDataThread+0x150>)
 800083c:	f7ff fcd0 	bl	80001e0 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	b29a      	uxth	r2, r3
 8000844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000848:	492e      	ldr	r1, [pc, #184]	; (8000904 <startTxDataThread+0x150>)
 800084a:	482f      	ldr	r0, [pc, #188]	; (8000908 <startTxDataThread+0x154>)
 800084c:	f003 fb14 	bl	8003e78 <HAL_UART_Transmit>
 8000850:	e011      	b.n	8000876 <startTxDataThread+0xc2>
		  } else {
			  myprintf("[ERROR]: (reading) f_open (%i)\n", rr);
 8000852:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000856:	461a      	mov	r2, r3
 8000858:	4930      	ldr	r1, [pc, #192]	; (800091c <startTxDataThread+0x168>)
 800085a:	482a      	ldr	r0, [pc, #168]	; (8000904 <startTxDataThread+0x150>)
 800085c:	f00b fe1c 	bl	800c498 <siprintf>
 8000860:	4828      	ldr	r0, [pc, #160]	; (8000904 <startTxDataThread+0x150>)
 8000862:	f7ff fcbd 	bl	80001e0 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	b29a      	uxth	r2, r3
 800086a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800086e:	4925      	ldr	r1, [pc, #148]	; (8000904 <startTxDataThread+0x150>)
 8000870:	4825      	ldr	r0, [pc, #148]	; (8000908 <startTxDataThread+0x154>)
 8000872:	f003 fb01 	bl	8003e78 <HAL_UART_Transmit>
		  }


		  UINT bytesRead = (UINT) -1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087a:	60bb      	str	r3, [r7, #8]
		  while (bytesRead != 0) {
 800087c:	e019      	b.n	80008b2 <startTxDataThread+0xfe>
			  f_read(&telemetryFile, &rbuf, sizeof(rbuf), &bytesRead);
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	f107 010c 	add.w	r1, r7, #12
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	4821      	ldr	r0, [pc, #132]	; (8000910 <startTxDataThread+0x15c>)
 800088a:	f007 f82e 	bl	80078ea <f_read>
			  myprintf("[READ]: %s\n", rbuf);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	461a      	mov	r2, r3
 8000894:	4922      	ldr	r1, [pc, #136]	; (8000920 <startTxDataThread+0x16c>)
 8000896:	481b      	ldr	r0, [pc, #108]	; (8000904 <startTxDataThread+0x150>)
 8000898:	f00b fdfe 	bl	800c498 <siprintf>
 800089c:	4819      	ldr	r0, [pc, #100]	; (8000904 <startTxDataThread+0x150>)
 800089e:	f7ff fc9f 	bl	80001e0 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008aa:	4916      	ldr	r1, [pc, #88]	; (8000904 <startTxDataThread+0x150>)
 80008ac:	4816      	ldr	r0, [pc, #88]	; (8000908 <startTxDataThread+0x154>)
 80008ae:	f003 fae3 	bl	8003e78 <HAL_UART_Transmit>
		  while (bytesRead != 0) {
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1e2      	bne.n	800087e <startTxDataThread+0xca>
		  }

		  f_close(&telemetryFile);
 80008b8:	4815      	ldr	r0, [pc, #84]	; (8000910 <startTxDataThread+0x15c>)
 80008ba:	f007 fbb1 	bl	8008020 <f_close>
		  f_unlink("write.txt");
 80008be:	4813      	ldr	r0, [pc, #76]	; (800090c <startTxDataThread+0x158>)
 80008c0:	f007 fbdd 	bl	800807e <f_unlink>
	  }

	  osMutexRelease(telemetryFileMutexHandle);
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <startTxDataThread+0x144>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f007 fff8 	bl	80088be <osMutexRelease>

	  // note that TODO: use different uart that won't need mutex acquisition
	  myprintf("[READ]: %s\n", rbuf);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	461a      	mov	r2, r3
 80008d4:	4912      	ldr	r1, [pc, #72]	; (8000920 <startTxDataThread+0x16c>)
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <startTxDataThread+0x150>)
 80008d8:	f00b fdde 	bl	800c498 <siprintf>
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <startTxDataThread+0x150>)
 80008de:	f7ff fc7f 	bl	80001e0 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ea:	4906      	ldr	r1, [pc, #24]	; (8000904 <startTxDataThread+0x150>)
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <startTxDataThread+0x154>)
 80008ee:	f003 fac3 	bl	8003e78 <HAL_UART_Transmit>
	  osSemaphoreAcquire(txThreadSemHandle, osWaitForever);
 80008f2:	e76c      	b.n	80007ce <startTxDataThread+0x1a>
 80008f4:	2000514c 	.word	0x2000514c
 80008f8:	20004f04 	.word	0x20004f04
 80008fc:	20005154 	.word	0x20005154
 8000900:	0800cce0 	.word	0x0800cce0
 8000904:	200000a8 	.word	0x200000a8
 8000908:	2000524c 	.word	0x2000524c
 800090c:	0800cd0c 	.word	0x0800cd0c
 8000910:	20004f1c 	.word	0x20004f1c
 8000914:	0800cd18 	.word	0x0800cd18
 8000918:	0800cd28 	.word	0x0800cd28
 800091c:	0800cd50 	.word	0x0800cd50
 8000920:	0800cd70 	.word	0x0800cd70

08000924 <startTelemetryThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTelemetryThread */
void startTelemetryThread(void *argument)
{
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	b0b6      	sub	sp, #216	; 0xd8
 8000928:	af04      	add	r7, sp, #16
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTelemetryThread */
  TelemetryBase tb;
  FRESULT wr;
  // TODO: get rid of magic constant
  BYTE wbuf[128] = {0};
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	227c      	movs	r2, #124	; 0x7c
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f00b fcd1 	bl	800c2e0 <memset>

  /* Infinite loop */
  for(;;)
  {
	 status = osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 800093e:	4b62      	ldr	r3, [pc, #392]	; (8000ac8 <startTelemetryThread+0x1a4>)
 8000940:	6818      	ldr	r0, [r3, #0]
 8000942:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800094a:	2200      	movs	r2, #0
 800094c:	f008 fa0c 	bl	8008d68 <osMessageQueueGet>
 8000950:	4603      	mov	r3, r0
 8000952:	4a5e      	ldr	r2, [pc, #376]	; (8000acc <startTelemetryThread+0x1a8>)
 8000954:	6013      	str	r3, [r2, #0]
	 if (status == osOK) {
 8000956:	4b5d      	ldr	r3, [pc, #372]	; (8000acc <startTelemetryThread+0x1a8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1ef      	bne.n	800093e <startTelemetryThread+0x1a>
		 // write into sd card

		 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
				 tb.id, tb.data_size, tb.data[0],
 800095e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
		 sprintf(wbuf, "Telemetry{%d, %u, {%d, %d, %d}}\n",
 8000962:	461d      	mov	r5, r3
 8000964:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8000968:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800096c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000970:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000974:	f107 000c 	add.w	r0, r7, #12
 8000978:	9102      	str	r1, [sp, #8]
 800097a:	9201      	str	r2, [sp, #4]
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	4623      	mov	r3, r4
 8000980:	462a      	mov	r2, r5
 8000982:	4953      	ldr	r1, [pc, #332]	; (8000ad0 <startTelemetryThread+0x1ac>)
 8000984:	f00b fd88 	bl	800c498 <siprintf>
				 tb.data[1], tb.data[2]);
		 myprintf("Writing following string to sd: %s", wbuf);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	461a      	mov	r2, r3
 800098e:	4951      	ldr	r1, [pc, #324]	; (8000ad4 <startTelemetryThread+0x1b0>)
 8000990:	4851      	ldr	r0, [pc, #324]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000992:	f00b fd81 	bl	800c498 <siprintf>
 8000996:	4850      	ldr	r0, [pc, #320]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000998:	f7ff fc22 	bl	80001e0 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009a4:	494c      	ldr	r1, [pc, #304]	; (8000ad8 <startTelemetryThread+0x1b4>)
 80009a6:	484d      	ldr	r0, [pc, #308]	; (8000adc <startTelemetryThread+0x1b8>)
 80009a8:	f003 fa66 	bl	8003e78 <HAL_UART_Transmit>


		 // TODO: add mutex here
		 status = osMutexAcquire(telemetryFileMutexHandle, osWaitForever);
 80009ac:	4b4c      	ldr	r3, [pc, #304]	; (8000ae0 <startTelemetryThread+0x1bc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009b4:	4618      	mov	r0, r3
 80009b6:	f007 ff37 	bl	8008828 <osMutexAcquire>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a43      	ldr	r2, [pc, #268]	; (8000acc <startTelemetryThread+0x1a8>)
 80009be:	6013      	str	r3, [r2, #0]
		 if (status != osOK) {
 80009c0:	4b42      	ldr	r3, [pc, #264]	; (8000acc <startTelemetryThread+0x1a8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d00f      	beq.n	80009e8 <startTelemetryThread+0xc4>
			 myprintf("Could not take mutex for writing into file");
 80009c8:	4946      	ldr	r1, [pc, #280]	; (8000ae4 <startTelemetryThread+0x1c0>)
 80009ca:	4843      	ldr	r0, [pc, #268]	; (8000ad8 <startTelemetryThread+0x1b4>)
 80009cc:	f00b fd64 	bl	800c498 <siprintf>
 80009d0:	4841      	ldr	r0, [pc, #260]	; (8000ad8 <startTelemetryThread+0x1b4>)
 80009d2:	f7ff fc05 	bl	80001e0 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009de:	493e      	ldr	r1, [pc, #248]	; (8000ad8 <startTelemetryThread+0x1b4>)
 80009e0:	483e      	ldr	r0, [pc, #248]	; (8000adc <startTelemetryThread+0x1b8>)
 80009e2:	f003 fa49 	bl	8003e78 <HAL_UART_Transmit>
 80009e6:	e068      	b.n	8000aba <startTelemetryThread+0x196>
		 } else {
		 	 wr = f_open(&telemetryFile, "write.txt", FA_WRITE | FA_OPEN_ALWAYS);
 80009e8:	2212      	movs	r2, #18
 80009ea:	493f      	ldr	r1, [pc, #252]	; (8000ae8 <startTelemetryThread+0x1c4>)
 80009ec:	483f      	ldr	r0, [pc, #252]	; (8000aec <startTelemetryThread+0x1c8>)
 80009ee:	f006 fdb7 	bl	8007560 <f_open>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7


		 	 if(wr == FR_OK) {
 80009f8:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d110      	bne.n	8000a22 <startTelemetryThread+0xfe>
		 		 myprintf("I was able to open '%s' for writing\n", TELEMETRY_FILE);
 8000a00:	4a3b      	ldr	r2, [pc, #236]	; (8000af0 <startTelemetryThread+0x1cc>)
 8000a02:	493c      	ldr	r1, [pc, #240]	; (8000af4 <startTelemetryThread+0x1d0>)
 8000a04:	4834      	ldr	r0, [pc, #208]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000a06:	f00b fd47 	bl	800c498 <siprintf>
 8000a0a:	4833      	ldr	r0, [pc, #204]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000a0c:	f7ff fbe8 	bl	80001e0 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a18:	492f      	ldr	r1, [pc, #188]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000a1a:	4830      	ldr	r0, [pc, #192]	; (8000adc <startTelemetryThread+0x1b8>)
 8000a1c:	f003 fa2c 	bl	8003e78 <HAL_UART_Transmit>
 8000a20:	e011      	b.n	8000a46 <startTelemetryThread+0x122>
		 	 } else {
		 		 myprintf("f_open error (%i)\n", wr);
 8000a22:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000a26:	461a      	mov	r2, r3
 8000a28:	4933      	ldr	r1, [pc, #204]	; (8000af8 <startTelemetryThread+0x1d4>)
 8000a2a:	482b      	ldr	r0, [pc, #172]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000a2c:	f00b fd34 	bl	800c498 <siprintf>
 8000a30:	4829      	ldr	r0, [pc, #164]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000a32:	f7ff fbd5 	bl	80001e0 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a3e:	4926      	ldr	r1, [pc, #152]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000a40:	4826      	ldr	r0, [pc, #152]	; (8000adc <startTelemetryThread+0x1b8>)
 8000a42:	f003 fa19 	bl	8003e78 <HAL_UART_Transmit>
		 	 }


		 	 UINT bytesWrote;
		 	 // TODO: and also I assume we should add mutex here
		 	 wr = f_write(&telemetryFile, wbuf, strlen(wbuf), &bytesWrote);
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fbc8 	bl	80001e0 <strlen>
 8000a50:	4602      	mov	r2, r0
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	f107 010c 	add.w	r1, r7, #12
 8000a5a:	4824      	ldr	r0, [pc, #144]	; (8000aec <startTelemetryThread+0x1c8>)
 8000a5c:	f007 f8b3 	bl	8007bc6 <f_write>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		 	 if(wr == FR_OK) {
 8000a66:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d111      	bne.n	8000a92 <startTelemetryThread+0x16e>
		 		 myprintf("Wrote %i bytes to 'write.txt'!\n", bytesWrote);
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4922      	ldr	r1, [pc, #136]	; (8000afc <startTelemetryThread+0x1d8>)
 8000a74:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000a76:	f00b fd0f 	bl	800c498 <siprintf>
 8000a7a:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000a7c:	f7ff fbb0 	bl	80001e0 <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a88:	4913      	ldr	r1, [pc, #76]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000a8a:	4814      	ldr	r0, [pc, #80]	; (8000adc <startTelemetryThread+0x1b8>)
 8000a8c:	f003 f9f4 	bl	8003e78 <HAL_UART_Transmit>
 8000a90:	e010      	b.n	8000ab4 <startTelemetryThread+0x190>
		 	 } else {
		 		 myprintf("f_write error (%d)\n", (int) bytesWrote);
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	461a      	mov	r2, r3
 8000a96:	491a      	ldr	r1, [pc, #104]	; (8000b00 <startTelemetryThread+0x1dc>)
 8000a98:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000a9a:	f00b fcfd 	bl	800c498 <siprintf>
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000aa0:	f7ff fb9e 	bl	80001e0 <strlen>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aac:	490a      	ldr	r1, [pc, #40]	; (8000ad8 <startTelemetryThread+0x1b4>)
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <startTelemetryThread+0x1b8>)
 8000ab0:	f003 f9e2 	bl	8003e78 <HAL_UART_Transmit>
		 	 }

		 	 f_close(&telemetryFile);
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <startTelemetryThread+0x1c8>)
 8000ab6:	f007 fab3 	bl	8008020 <f_close>
	 	 }

		 osMutexRelease(telemetryFileMutexHandle);
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <startTelemetryThread+0x1bc>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f007 fefd 	bl	80088be <osMutexRelease>
	 status = osMessageQueueGet(telemetryQueueHandle, &tb, NULL, osWaitForever);
 8000ac4:	e73b      	b.n	800093e <startTelemetryThread+0x1a>
 8000ac6:	bf00      	nop
 8000ac8:	20004f14 	.word	0x20004f14
 8000acc:	20005154 	.word	0x20005154
 8000ad0:	0800cd7c 	.word	0x0800cd7c
 8000ad4:	0800cda0 	.word	0x0800cda0
 8000ad8:	200000a8 	.word	0x200000a8
 8000adc:	2000524c 	.word	0x2000524c
 8000ae0:	20004f04 	.word	0x20004f04
 8000ae4:	0800cdc4 	.word	0x0800cdc4
 8000ae8:	0800cd0c 	.word	0x0800cd0c
 8000aec:	20004f1c 	.word	0x20004f1c
 8000af0:	0800cd18 	.word	0x0800cd18
 8000af4:	0800cdf0 	.word	0x0800cdf0
 8000af8:	0800ce18 	.word	0x0800ce18
 8000afc:	0800ce2c 	.word	0x0800ce2c
 8000b00:	0800ce4c 	.word	0x0800ce4c

08000b04 <accTimerCallback>:
  /* USER CODE END startTelemetryThread */
}

/* accTimerCallback function */
void accTimerCallback(void *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b092      	sub	sp, #72	; 0x48
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accTimerCallback */
	TelemetryBase acc;

	acc.id = ACC;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	733b      	strb	r3, [r7, #12]
	acc.data_size = 3;
 8000b10:	2303      	movs	r3, #3
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
	for (size_t i = 0; i < acc.data_size; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
 8000b18:	e00a      	b.n	8000b30 <accTimerCallback+0x2c>
		acc.data[i] = i;
 8000b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b24:	440b      	add	r3, r1
 8000b26:	f843 2c38 	str.w	r2, [r3, #-56]
	for (size_t i = 0; i < acc.data_size; i++) {
 8000b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8000b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d3f0      	bcc.n	8000b1a <accTimerCallback+0x16>
	}

	// note that this might be called from isr, if the
	// time parameter is set to 0
	osMessageQueuePut(telemetryQueueHandle, &acc, 0U, 0U);
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <accTimerCallback+0x4c>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	f107 010c 	add.w	r1, r7, #12
 8000b40:	2300      	movs	r3, #0
 8000b42:	2200      	movs	r2, #0
 8000b44:	f008 f8b0 	bl	8008ca8 <osMessageQueuePut>
  /* USER CODE END accTimerCallback */
}
 8000b48:	bf00      	nop
 8000b4a:	3748      	adds	r7, #72	; 0x48
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20004f14 	.word	0x20004f14

08000b54 <temperatureTimerCallback>:

/* temperatureTimerCallback function */
void temperatureTimerCallback(void *argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b092      	sub	sp, #72	; 0x48
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temperatureTimerCallback */
	TelemetryBase acc;

	acc.id = ACC;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	733b      	strb	r3, [r7, #12]
	acc.data_size = 3;
 8000b60:	2303      	movs	r3, #3
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
	for (size_t i = 0; i < acc.data_size; i++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
 8000b68:	e00d      	b.n	8000b86 <temperatureTimerCallback+0x32>
		acc.data[i] = acc.data_size - i;
 8000b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f843 2c38 	str.w	r2, [r3, #-56]
	for (size_t i = 0; i < acc.data_size; i++) {
 8000b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b82:	3301      	adds	r3, #1
 8000b84:	647b      	str	r3, [r7, #68]	; 0x44
 8000b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d3ed      	bcc.n	8000b6a <temperatureTimerCallback+0x16>
	}

	osMessageQueuePut(telemetryQueueHandle, &acc, 0U, 0U);
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <temperatureTimerCallback+0x54>)
 8000b90:	6818      	ldr	r0, [r3, #0]
 8000b92:	f107 010c 	add.w	r1, r7, #12
 8000b96:	2300      	movs	r3, #0
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f008 f885 	bl	8008ca8 <osMessageQueuePut>
  /* USER CODE END temperatureTimerCallback */
}
 8000b9e:	bf00      	nop
 8000ba0:	3748      	adds	r7, #72	; 0x48
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20004f14 	.word	0x20004f14

08000bac <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN Application */
/*
 * [IMPORTANT] TODO: Note that this functoin is unsafe (as we might interrupt uart usage)
 * Actually not, as we would transmit only after this
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
     if (huart == &huart2) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <HAL_UART_RxCpltCallback+0x74>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d12c      	bne.n	8000c16 <HAL_UART_RxCpltCallback+0x6a>
    	 int val = (int) (notification_buffer[0] - '0');
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_UART_RxCpltCallback+0x78>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	3b30      	subs	r3, #48	; 0x30
 8000bc2:	60fb      	str	r3, [r7, #12]
		 switch (val) {
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_UART_RxCpltCallback+0x26>
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d006      	beq.n	8000bde <HAL_UART_RxCpltCallback+0x32>
 8000bd0:	e00b      	b.n	8000bea <HAL_UART_RxCpltCallback+0x3e>
		 case 0:
			 osSemaphoreRelease(rxThreadSemHandle);
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_UART_RxCpltCallback+0x7c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f007 ff8a 	bl	8008af0 <osSemaphoreRelease>
			 break;
 8000bdc:	e016      	b.n	8000c0c <HAL_UART_RxCpltCallback+0x60>
		 case 1:
			 osSemaphoreRelease(txThreadSemHandle);
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <HAL_UART_RxCpltCallback+0x80>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f007 ff84 	bl	8008af0 <osSemaphoreRelease>
			 break;
 8000be8:	e010      	b.n	8000c0c <HAL_UART_RxCpltCallback+0x60>
		 default:
			 myprintf("[ERROR]: Op not allowed: %d\n", val);
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4910      	ldr	r1, [pc, #64]	; (8000c30 <HAL_UART_RxCpltCallback+0x84>)
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <HAL_UART_RxCpltCallback+0x88>)
 8000bf0:	f00b fc52 	bl	800c498 <siprintf>
 8000bf4:	480f      	ldr	r0, [pc, #60]	; (8000c34 <HAL_UART_RxCpltCallback+0x88>)
 8000bf6:	f7ff faf3 	bl	80001e0 <strlen>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c02:	490c      	ldr	r1, [pc, #48]	; (8000c34 <HAL_UART_RxCpltCallback+0x88>)
 8000c04:	4806      	ldr	r0, [pc, #24]	; (8000c20 <HAL_UART_RxCpltCallback+0x74>)
 8000c06:	f003 f937 	bl	8003e78 <HAL_UART_Transmit>
			 break;
 8000c0a:	bf00      	nop
		 };

		 HAL_UART_Receive_IT(&huart2, (uint8_t *)&notification_buffer, 1);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4905      	ldr	r1, [pc, #20]	; (8000c24 <HAL_UART_RxCpltCallback+0x78>)
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <HAL_UART_RxCpltCallback+0x74>)
 8000c12:	f003 f9c3 	bl	8003f9c <HAL_UART_Receive_IT>
     }
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000524c 	.word	0x2000524c
 8000c24:	20004cc0 	.word	0x20004cc0
 8000c28:	20004f00 	.word	0x20004f00
 8000c2c:	2000514c 	.word	0x2000514c
 8000c30:	0800ce60 	.word	0x0800ce60
 8000c34:	200000a8 	.word	0x200000a8

08000c38 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	4b9b      	ldr	r3, [pc, #620]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a9a      	ldr	r2, [pc, #616]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b98      	ldr	r3, [pc, #608]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	4b94      	ldr	r3, [pc, #592]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a93      	ldr	r2, [pc, #588]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b91      	ldr	r3, [pc, #580]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b8d      	ldr	r3, [pc, #564]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a8c      	ldr	r2, [pc, #560]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b8a      	ldr	r3, [pc, #552]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b86      	ldr	r3, [pc, #536]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a85      	ldr	r2, [pc, #532]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b83      	ldr	r3, [pc, #524]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	4b7f      	ldr	r3, [pc, #508]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a7e      	ldr	r2, [pc, #504]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b7c      	ldr	r3, [pc, #496]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b78      	ldr	r3, [pc, #480]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a77      	ldr	r2, [pc, #476]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b75      	ldr	r3, [pc, #468]	; (8000ec0 <MX_GPIO_Init+0x288>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	4872      	ldr	r0, [pc, #456]	; (8000ec4 <MX_GPIO_Init+0x28c>)
 8000cfc:	f001 f8d0 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2101      	movs	r1, #1
 8000d04:	4870      	ldr	r0, [pc, #448]	; (8000ec8 <MX_GPIO_Init+0x290>)
 8000d06:	f001 f8cb 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	486f      	ldr	r0, [pc, #444]	; (8000ecc <MX_GPIO_Init+0x294>)
 8000d10:	f001 f8c6 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d14:	2200      	movs	r2, #0
 8000d16:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d1a:	486d      	ldr	r0, [pc, #436]	; (8000ed0 <MX_GPIO_Init+0x298>)
 8000d1c:	f001 f8c0 	bl	8001ea0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000d20:	2304      	movs	r3, #4
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4864      	ldr	r0, [pc, #400]	; (8000ec4 <MX_GPIO_Init+0x28c>)
 8000d34:	f000 fe18 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	485d      	ldr	r0, [pc, #372]	; (8000ec4 <MX_GPIO_Init+0x28c>)
 8000d50:	f000 fe0a 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000d54:	2332      	movs	r3, #50	; 0x32
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d58:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4856      	ldr	r0, [pc, #344]	; (8000ec4 <MX_GPIO_Init+0x28c>)
 8000d6a:	f000 fdfd 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4850      	ldr	r0, [pc, #320]	; (8000ec8 <MX_GPIO_Init+0x290>)
 8000d86:	f000 fdef 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d8a:	2308      	movs	r3, #8
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4848      	ldr	r0, [pc, #288]	; (8000ec8 <MX_GPIO_Init+0x290>)
 8000da6:	f000 fddf 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4845      	ldr	r0, [pc, #276]	; (8000ed4 <MX_GPIO_Init+0x29c>)
 8000dc0:	f000 fdd2 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	483d      	ldr	r0, [pc, #244]	; (8000ed4 <MX_GPIO_Init+0x29c>)
 8000de0:	f000 fdc2 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4834      	ldr	r0, [pc, #208]	; (8000ecc <MX_GPIO_Init+0x294>)
 8000dfc:	f000 fdb4 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e12:	2305      	movs	r3, #5
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	482b      	ldr	r0, [pc, #172]	; (8000ecc <MX_GPIO_Init+0x294>)
 8000e1e:	f000 fda3 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e22:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e26:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4825      	ldr	r0, [pc, #148]	; (8000ed0 <MX_GPIO_Init+0x298>)
 8000e3c:	f000 fd94 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e40:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e52:	2306      	movs	r3, #6
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481a      	ldr	r0, [pc, #104]	; (8000ec8 <MX_GPIO_Init+0x290>)
 8000e5e:	f000 fd83 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4817      	ldr	r0, [pc, #92]	; (8000ed4 <MX_GPIO_Init+0x29c>)
 8000e78:	f000 fd76 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e8e:	230a      	movs	r3, #10
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <MX_GPIO_Init+0x29c>)
 8000e9a:	f000 fd65 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <MX_GPIO_Init+0x298>)
 8000eb2:	f000 fd59 	bl	8001968 <HAL_GPIO_Init>

}
 8000eb6:	bf00      	nop
 8000eb8:	3730      	adds	r7, #48	; 0x30
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <MX_I2C1_Init+0x54>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <MX_I2C1_Init+0x58>)
 8000ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000ef6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_I2C1_Init+0x50>)
 8000f16:	f000 fff5 	bl	8001f04 <HAL_I2C_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f20:	f000 f8ee 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20005158 	.word	0x20005158
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	000186a0 	.word	0x000186a0

08000f34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a19      	ldr	r2, [pc, #100]	; (8000fb8 <HAL_I2C_MspInit+0x84>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d12c      	bne.n	8000fb0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_I2C_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_I2C_MspInit+0x88>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_I2C_MspInit+0x88>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f84:	2304      	movs	r3, #4
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <HAL_I2C_MspInit+0x8c>)
 8000f90:	f000 fcea 	bl	8001968 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_I2C_MspInit+0x88>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_I2C_MspInit+0x88>)
 8000f9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_I2C_MspInit+0x88>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020400 	.word	0x40020400

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f000 fac4 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f81e 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f7ff fe32 	bl	8000c38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fd4:	f7ff ff80 	bl	8000ed8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fd8:	f000 f8a2 	bl	8001120 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000fdc:	f003 ff08 	bl	8004df0 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000fe0:	f000 fa14 	bl	800140c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // delay needed for sd to stabilize as well as to make the upload
  // of new firmware possible (boot related issue);
  HAL_Delay(2000);
 8000fe4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fe8:	f000 faf6 	bl	80015d8 <HAL_Delay>

  // run in the background receive from uart
  // in order to implment possibility to wake up
  HAL_UART_Receive_IT(&huart2, (uint8_t *)notification_buffer, 1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	4905      	ldr	r1, [pc, #20]	; (8001004 <main+0x40>)
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <main+0x44>)
 8000ff2:	f002 ffd3 	bl	8003f9c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ff6:	f007 f9db 	bl	80083b0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ffa:	f7ff fac5 	bl	8000588 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ffe:	f007 f9fb 	bl	80083f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001002:	e7fe      	b.n	8001002 <main+0x3e>
 8001004:	20004cc0 	.word	0x20004cc0
 8001008:	2000524c 	.word	0x2000524c

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	; 0x50
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	2230      	movs	r2, #48	; 0x30
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00b f960 	bl	800c2e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <SystemClock_Config+0xc8>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <SystemClock_Config+0xc8>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <SystemClock_Config+0xc8>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <SystemClock_Config+0xcc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <SystemClock_Config+0xcc>)
 8001056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <SystemClock_Config+0xcc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800107c:	2304      	movs	r3, #4
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001080:	23c0      	movs	r3, #192	; 0xc0
 8001082:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001084:	2304      	movs	r3, #4
 8001086:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001088:	2308      	movs	r3, #8
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	4618      	mov	r0, r3
 8001092:	f001 f903 	bl	800229c <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800109c:	f000 f830 	bl	8001100 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a4:	2302      	movs	r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	2103      	movs	r1, #3
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fc15 	bl	80028ec <HAL_RCC_ClockConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010c8:	f000 f81a 	bl	8001100 <Error_Handler>
  }
}
 80010cc:	bf00      	nop
 80010ce:	3750      	adds	r7, #80	; 0x50
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40007000 	.word	0x40007000

080010dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ee:	f000 fa53 	bl	8001598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40000c00 	.word	0x40000c00

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>

0800110a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_SPI1_Init+0x64>)
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <MX_SPI1_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_SPI1_Init+0x64>)
 800112c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001130:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_SPI1_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_SPI1_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_SPI1_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_SPI1_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_SPI1_Init+0x64>)
 800114c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001150:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_SPI1_Init+0x64>)
 8001154:	2230      	movs	r2, #48	; 0x30
 8001156:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_SPI1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_SPI1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_SPI1_Init+0x64>)
 800116c:	220a      	movs	r2, #10
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_SPI1_Init+0x64>)
 8001172:	f001 fe91 	bl	8002e98 <HAL_SPI_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800117c:	f7ff ffc0 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200051ac 	.word	0x200051ac
 8001188:	40013000 	.word	0x40013000

0800118c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_SPI_MspInit+0x84>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12b      	bne.n	8001206 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_SPI_MspInit+0x88>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_SPI_MspInit+0x88>)
 80011b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_SPI_MspInit+0x88>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_SPI_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_SPI_MspInit+0x88>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <HAL_SPI_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011e6:	23e0      	movs	r3, #224	; 0xe0
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011f6:	2305      	movs	r3, #5
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <HAL_SPI_MspInit+0x8c>)
 8001202:	f000 fbb1 	bl	8001968 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40013000 	.word	0x40013000
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_MspInit+0x54>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_MspInit+0x54>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_MspInit+0x54>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_MspInit+0x54>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_MspInit+0x54>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_MspInit+0x54>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	210f      	movs	r1, #15
 800125e:	f06f 0001 	mvn.w	r0, #1
 8001262:	f000 faab 	bl	80017bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	2032      	movs	r0, #50	; 0x32
 800128a:	f000 fa97 	bl	80017bc <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800128e:	2032      	movs	r0, #50	; 0x32
 8001290:	f000 fac0 	bl	8001814 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <HAL_InitTick+0xa4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <HAL_InitTick+0xa4>)
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_InitTick+0xa4>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b0:	f107 0210 	add.w	r2, r7, #16
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fdba 	bl	8002e34 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80012c0:	f001 fd90 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 80012c4:	4603      	mov	r3, r0
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	4a13      	ldr	r2, [pc, #76]	; (800131c <HAL_InitTick+0xa8>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	0c9b      	lsrs	r3, r3, #18
 80012d4:	3b01      	subs	r3, #1
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_InitTick+0xac>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_InitTick+0xb0>)
 80012dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_InitTick+0xac>)
 80012e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012e4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80012e6:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <HAL_InitTick+0xac>)
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_InitTick+0xac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_InitTick+0xac>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <HAL_InitTick+0xac>)
 80012fa:	f002 f9e1 	bl	80036c0 <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d104      	bne.n	800130e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001304:	4806      	ldr	r0, [pc, #24]	; (8001320 <HAL_InitTick+0xac>)
 8001306:	f002 faab 	bl	8003860 <HAL_TIM_Base_Start_IT>
 800130a:	4603      	mov	r3, r0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3730      	adds	r7, #48	; 0x30
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	431bde83 	.word	0x431bde83
 8001320:	20005204 	.word	0x20005204
 8001324:	40000c00 	.word	0x40000c00

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800132c:	e7fe      	b.n	800132c <NMI_Handler+0x4>

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <USART2_IRQHandler+0x10>)
 800135a:	f002 fe4f 	bl	8003ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000524c 	.word	0x2000524c

08001368 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <TIM5_IRQHandler+0x10>)
 800136e:	f002 fb09 	bl	8003984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20005204 	.word	0x20005204

0800137c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <_sbrk+0x5c>)
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <_sbrk+0x60>)
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <_sbrk+0x64>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <_sbrk+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d207      	bcs.n	80013bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ac:	f00a ff5e 	bl	800c26c <__errno>
 80013b0:	4603      	mov	r3, r0
 80013b2:	220c      	movs	r2, #12
 80013b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ba:	e009      	b.n	80013d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <_sbrk+0x64>)
 80013cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20020000 	.word	0x20020000
 80013dc:	00000400 	.word	0x00000400
 80013e0:	200002a8 	.word	0x200002a8
 80013e4:	20005758 	.word	0x20005758

080013e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <SystemInit+0x20>)
 80013ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <SystemInit+0x20>)
 80013f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <MX_USART2_UART_Init+0x50>)
 8001414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001418:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800141c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_USART2_UART_Init+0x4c>)
 8001444:	f002 fc62 	bl	8003d0c <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144e:	f7ff fe57 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000524c 	.word	0x2000524c
 800145c:	40004400 	.word	0x40004400

08001460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <HAL_UART_MspInit+0x94>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d133      	bne.n	80014ea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_UART_MspInit+0x98>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_UART_MspInit+0x98>)
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_UART_MspInit+0x98>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_UART_MspInit+0x98>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_UART_MspInit+0x98>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_UART_MspInit+0x98>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014ba:	230c      	movs	r3, #12
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ca:	2307      	movs	r3, #7
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <HAL_UART_MspInit+0x9c>)
 80014d6:	f000 fa47 	bl	8001968 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2105      	movs	r1, #5
 80014de:	2026      	movs	r0, #38	; 0x26
 80014e0:	f000 f96c 	bl	80017bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014e4:	2026      	movs	r0, #38	; 0x26
 80014e6:	f000 f995 	bl	8001814 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40004400 	.word	0x40004400
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001506:	490e      	ldr	r1, [pc, #56]	; (8001540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800151c:	4c0b      	ldr	r4, [pc, #44]	; (800154c <LoopFillZerobss+0x26>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800152a:	f7ff ff5d 	bl	80013e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152e:	f00a fea3 	bl	800c278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff fd47 	bl	8000fc4 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001544:	0800d2a4 	.word	0x0800d2a4
  ldr r2, =_sbss
 8001548:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800154c:	20005758 	.word	0x20005758

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_Init+0x40>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_Init+0x40>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x40>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f8fd 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	200f      	movs	r0, #15
 8001584:	f7ff fe76 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fe48 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023c00 	.word	0x40023c00

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20005290 	.word	0x20005290

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20005290 	.word	0x20005290

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b07      	cmp	r3, #7
 8001788:	d00f      	beq.n	80017aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b06      	cmp	r3, #6
 800178e:	d00c      	beq.n	80017aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d009      	beq.n	80017aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b04      	cmp	r3, #4
 800179a:	d006      	beq.n	80017aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d003      	beq.n	80017aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017a2:	2192      	movs	r1, #146	; 0x92
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80017a6:	f7ff fcb0 	bl	800110a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ff38 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	0800ce80 	.word	0x0800ce80

080017bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d903      	bls.n	80017dc <HAL_NVIC_SetPriority+0x20>
 80017d4:	21aa      	movs	r1, #170	; 0xaa
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <HAL_NVIC_SetPriority+0x54>)
 80017d8:	f7ff fc97 	bl	800110a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	d903      	bls.n	80017ea <HAL_NVIC_SetPriority+0x2e>
 80017e2:	21ab      	movs	r1, #171	; 0xab
 80017e4:	480a      	ldr	r0, [pc, #40]	; (8001810 <HAL_NVIC_SetPriority+0x54>)
 80017e6:	f7ff fc90 	bl	800110a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ea:	f7ff ff3d 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	6978      	ldr	r0, [r7, #20]
 80017f6:	f7ff ff8d 	bl	8001714 <NVIC_EncodePriority>
 80017fa:	4602      	mov	r2, r0
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff5c 	bl	80016c0 <__NVIC_SetPriority>
}
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	0800ce80 	.word	0x0800ce80

08001814 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	da03      	bge.n	800182e <HAL_NVIC_EnableIRQ+0x1a>
 8001826:	21be      	movs	r1, #190	; 0xbe
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <HAL_NVIC_EnableIRQ+0x2c>)
 800182a:	f7ff fc6e 	bl	800110a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff26 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	0800ce80 	.word	0x0800ce80

08001844 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001852:	f7ff feb5 	bl	80015c0 <HAL_GetTick>
 8001856:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d008      	beq.n	8001876 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e052      	b.n	800191c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0216 	bic.w	r2, r2, #22
 8001884:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001894:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	d103      	bne.n	80018a6 <HAL_DMA_Abort+0x62>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0208 	bic.w	r2, r2, #8
 80018b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c6:	e013      	b.n	80018f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c8:	f7ff fe7a 	bl	80015c0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d90c      	bls.n	80018f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2203      	movs	r2, #3
 80018e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e015      	b.n	800191c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1e4      	bne.n	80018c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	223f      	movs	r2, #63	; 0x3f
 8001904:	409a      	lsls	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d004      	beq.n	8001942 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00c      	b.n	800195c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2205      	movs	r2, #5
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a33      	ldr	r2, [pc, #204]	; (8001a50 <HAL_GPIO_Init+0xe8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d017      	beq.n	80019b6 <HAL_GPIO_Init+0x4e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a32      	ldr	r2, [pc, #200]	; (8001a54 <HAL_GPIO_Init+0xec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x4e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a31      	ldr	r2, [pc, #196]	; (8001a58 <HAL_GPIO_Init+0xf0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00f      	beq.n	80019b6 <HAL_GPIO_Init+0x4e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a30      	ldr	r2, [pc, #192]	; (8001a5c <HAL_GPIO_Init+0xf4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00b      	beq.n	80019b6 <HAL_GPIO_Init+0x4e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <HAL_GPIO_Init+0xf8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d007      	beq.n	80019b6 <HAL_GPIO_Init+0x4e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a2e      	ldr	r2, [pc, #184]	; (8001a64 <HAL_GPIO_Init+0xfc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x4e>
 80019ae:	21ac      	movs	r1, #172	; 0xac
 80019b0:	482d      	ldr	r0, [pc, #180]	; (8001a68 <HAL_GPIO_Init+0x100>)
 80019b2:	f7ff fbaa 	bl	800110a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_GPIO_Init+0x64>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0c1b      	lsrs	r3, r3, #16
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x6c>
 80019cc:	21ad      	movs	r1, #173	; 0xad
 80019ce:	4826      	ldr	r0, [pc, #152]	; (8001a68 <HAL_GPIO_Init+0x100>)
 80019d0:	f7ff fb9b 	bl	800110a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d035      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d031      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b11      	cmp	r3, #17
 80019ea:	d02d      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d029      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b12      	cmp	r3, #18
 80019fa:	d025      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001a04:	d020      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001a0e:	d01b      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001a18:	d016      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001a22:	d011      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001a2c:	d00c      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001a36:	d007      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0xe0>
 8001a40:	21ae      	movs	r1, #174	; 0xae
 8001a42:	4809      	ldr	r0, [pc, #36]	; (8001a68 <HAL_GPIO_Init+0x100>)
 8001a44:	f7ff fb61 	bl	800110a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	e211      	b.n	8001e72 <HAL_GPIO_Init+0x50a>
 8001a4e:	bf00      	nop
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020c00 	.word	0x40020c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40021c00 	.word	0x40021c00
 8001a68:	0800cebc 	.word	0x0800cebc
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 81f1 	bne.w	8001e6c <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d005      	beq.n	8001aa2 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d144      	bne.n	8001b2c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00f      	beq.n	8001aca <HAL_GPIO_Init+0x162>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d00b      	beq.n	8001aca <HAL_GPIO_Init+0x162>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x162>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x162>
 8001ac2:	21c0      	movs	r1, #192	; 0xc0
 8001ac4:	489f      	ldr	r0, [pc, #636]	; (8001d44 <HAL_GPIO_Init+0x3dc>)
 8001ac6:	f7ff fb20 	bl	800110a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d027      	beq.n	8001b88 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <HAL_GPIO_Init+0x1f0>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d007      	beq.n	8001b58 <HAL_GPIO_Init+0x1f0>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x1f0>
 8001b50:	21d1      	movs	r1, #209	; 0xd1
 8001b52:	487c      	ldr	r0, [pc, #496]	; (8001d44 <HAL_GPIO_Init+0x3dc>)
 8001b54:	f7ff fad9 	bl	800110a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	f040 80a0 	bne.w	8001cd6 <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d077      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b09      	cmp	r3, #9
 8001ba4:	d073      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d06f      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d06b      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d067      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d063      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d05f      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d05b      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d057      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d053      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d04f      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d04b      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d047      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d043      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d03f      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d03b      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d037      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d033      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d02f      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d02b      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d027      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b07      	cmp	r3, #7
 8001c44:	d023      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b07      	cmp	r3, #7
 8001c4c:	d01f      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	2b07      	cmp	r3, #7
 8001c54:	d01b      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d017      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2b0a      	cmp	r3, #10
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b09      	cmp	r3, #9
 8001c6c:	d00f      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b09      	cmp	r3, #9
 8001c74:	d00b      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d007      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x326>
 8001c86:	21de      	movs	r1, #222	; 0xde
 8001c88:	482e      	ldr	r0, [pc, #184]	; (8001d44 <HAL_GPIO_Init+0x3dc>)
 8001c8a:	f7ff fa3e 	bl	800110a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3208      	adds	r2, #8
 8001c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	08da      	lsrs	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3208      	adds	r2, #8
 8001cd0:	69b9      	ldr	r1, [r7, #24]
 8001cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0203 	and.w	r2, r3, #3
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80aa 	beq.w	8001e6c <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_GPIO_Init+0x3e0>)
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <HAL_GPIO_Init+0x3e0>)
 8001d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d26:	6453      	str	r3, [r2, #68]	; 0x44
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_GPIO_Init+0x3e0>)
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d34:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <HAL_GPIO_Init+0x3e4>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x3e8>
 8001d42:	bf00      	nop
 8001d44:	0800cebc 	.word	0x0800cebc
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a46      	ldr	r2, [pc, #280]	; (8001e84 <HAL_GPIO_Init+0x51c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d019      	beq.n	8001da4 <HAL_GPIO_Init+0x43c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a45      	ldr	r2, [pc, #276]	; (8001e88 <HAL_GPIO_Init+0x520>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d013      	beq.n	8001da0 <HAL_GPIO_Init+0x438>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a44      	ldr	r2, [pc, #272]	; (8001e8c <HAL_GPIO_Init+0x524>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00d      	beq.n	8001d9c <HAL_GPIO_Init+0x434>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a43      	ldr	r2, [pc, #268]	; (8001e90 <HAL_GPIO_Init+0x528>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d007      	beq.n	8001d98 <HAL_GPIO_Init+0x430>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a42      	ldr	r2, [pc, #264]	; (8001e94 <HAL_GPIO_Init+0x52c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d101      	bne.n	8001d94 <HAL_GPIO_Init+0x42c>
 8001d90:	2304      	movs	r3, #4
 8001d92:	e008      	b.n	8001da6 <HAL_GPIO_Init+0x43e>
 8001d94:	2307      	movs	r3, #7
 8001d96:	e006      	b.n	8001da6 <HAL_GPIO_Init+0x43e>
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e004      	b.n	8001da6 <HAL_GPIO_Init+0x43e>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x43e>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_GPIO_Init+0x43e>
 8001da4:	2300      	movs	r3, #0
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	f002 0203 	and.w	r2, r2, #3
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	4093      	lsls	r3, r2
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db6:	4938      	ldr	r1, [pc, #224]	; (8001e98 <HAL_GPIO_Init+0x530>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc4:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <HAL_GPIO_Init+0x534>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de8:	4a2c      	ldr	r2, [pc, #176]	; (8001e9c <HAL_GPIO_Init+0x534>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_GPIO_Init+0x534>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e12:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <HAL_GPIO_Init+0x534>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_GPIO_Init+0x534>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_GPIO_Init+0x534>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_GPIO_Init+0x534>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e66:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <HAL_GPIO_Init+0x534>)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	f67f adf9 	bls.w	8001a6c <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40013800 	.word	0x40013800
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
 8001eac:	4613      	mov	r3, r2
 8001eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d004      	beq.n	8001ec0 <HAL_GPIO_WritePin+0x20>
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <HAL_GPIO_WritePin+0x2a>
 8001ec0:	f240 119d 	movw	r1, #413	; 0x19d
 8001ec4:	480e      	ldr	r0, [pc, #56]	; (8001f00 <HAL_GPIO_WritePin+0x60>)
 8001ec6:	f7ff f920 	bl	800110a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001eca:	787b      	ldrb	r3, [r7, #1]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_WritePin+0x40>
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d004      	beq.n	8001ee0 <HAL_GPIO_WritePin+0x40>
 8001ed6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001eda:	4809      	ldr	r0, [pc, #36]	; (8001f00 <HAL_GPIO_WritePin+0x60>)
 8001edc:	f7ff f915 	bl	800110a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eec:	e003      	b.n	8001ef6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	619a      	str	r2, [r3, #24]
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	0800cebc 	.word	0x0800cebc

08001f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e1be      	b.n	8002294 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a9f      	ldr	r2, [pc, #636]	; (8002198 <HAL_I2C_Init+0x294>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00e      	beq.n	8001f3e <HAL_I2C_Init+0x3a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a9d      	ldr	r2, [pc, #628]	; (800219c <HAL_I2C_Init+0x298>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_I2C_Init+0x3a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a9c      	ldr	r2, [pc, #624]	; (80021a0 <HAL_I2C_Init+0x29c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <HAL_I2C_Init+0x3a>
 8001f34:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001f38:	489a      	ldr	r0, [pc, #616]	; (80021a4 <HAL_I2C_Init+0x2a0>)
 8001f3a:	f7ff f8e6 	bl	800110a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <HAL_I2C_Init+0x4c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a97      	ldr	r2, [pc, #604]	; (80021a8 <HAL_I2C_Init+0x2a4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d904      	bls.n	8001f5a <HAL_I2C_Init+0x56>
 8001f50:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001f54:	4893      	ldr	r0, [pc, #588]	; (80021a4 <HAL_I2C_Init+0x2a0>)
 8001f56:	f7ff f8d8 	bl	800110a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_I2C_Init+0x72>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f6a:	d004      	beq.n	8001f76 <HAL_I2C_Init+0x72>
 8001f6c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001f70:	488c      	ldr	r0, [pc, #560]	; (80021a4 <HAL_I2C_Init+0x2a0>)
 8001f72:	f7ff f8ca 	bl	800110a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f7e:	f023 0303 	bic.w	r3, r3, #3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <HAL_I2C_Init+0x8c>
 8001f86:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001f8a:	4886      	ldr	r0, [pc, #536]	; (80021a4 <HAL_I2C_Init+0x2a0>)
 8001f8c:	f7ff f8bd 	bl	800110a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f98:	d009      	beq.n	8001fae <HAL_I2C_Init+0xaa>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001fa2:	d004      	beq.n	8001fae <HAL_I2C_Init+0xaa>
 8001fa4:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001fa8:	487e      	ldr	r0, [pc, #504]	; (80021a4 <HAL_I2C_Init+0x2a0>)
 8001faa:	f7ff f8ae 	bl	800110a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <HAL_I2C_Init+0xc4>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d004      	beq.n	8001fc8 <HAL_I2C_Init+0xc4>
 8001fbe:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001fc2:	4878      	ldr	r0, [pc, #480]	; (80021a4 <HAL_I2C_Init+0x2a0>)
 8001fc4:	f7ff f8a1 	bl	800110a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <HAL_I2C_Init+0xda>
 8001fd4:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001fd8:	4872      	ldr	r0, [pc, #456]	; (80021a4 <HAL_I2C_Init+0x2a0>)
 8001fda:	f7ff f896 	bl	800110a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d008      	beq.n	8001ff8 <HAL_I2C_Init+0xf4>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b40      	cmp	r3, #64	; 0x40
 8001fec:	d004      	beq.n	8001ff8 <HAL_I2C_Init+0xf4>
 8001fee:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8001ff2:	486c      	ldr	r0, [pc, #432]	; (80021a4 <HAL_I2C_Init+0x2a0>)
 8001ff4:	f7ff f889 	bl	800110a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_I2C_Init+0x10e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d004      	beq.n	8002012 <HAL_I2C_Init+0x10e>
 8002008:	f240 11c7 	movw	r1, #455	; 0x1c7
 800200c:	4865      	ldr	r0, [pc, #404]	; (80021a4 <HAL_I2C_Init+0x2a0>)
 800200e:	f7ff f87c 	bl	800110a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe ff84 	bl	8000f34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	; 0x24
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002062:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002064:	f000 febe 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 8002068:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a4f      	ldr	r2, [pc, #316]	; (80021ac <HAL_I2C_Init+0x2a8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d807      	bhi.n	8002084 <HAL_I2C_Init+0x180>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a4e      	ldr	r2, [pc, #312]	; (80021b0 <HAL_I2C_Init+0x2ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	bf94      	ite	ls
 800207c:	2301      	movls	r3, #1
 800207e:	2300      	movhi	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e006      	b.n	8002092 <HAL_I2C_Init+0x18e>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a4b      	ldr	r2, [pc, #300]	; (80021b4 <HAL_I2C_Init+0x2b0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	bf94      	ite	ls
 800208c:	2301      	movls	r3, #1
 800208e:	2300      	movhi	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0fc      	b.n	8002294 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4a46      	ldr	r2, [pc, #280]	; (80021b8 <HAL_I2C_Init+0x2b4>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0c9b      	lsrs	r3, r3, #18
 80020a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a38      	ldr	r2, [pc, #224]	; (80021ac <HAL_I2C_Init+0x2a8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d802      	bhi.n	80020d4 <HAL_I2C_Init+0x1d0>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	3301      	adds	r3, #1
 80020d2:	e009      	b.n	80020e8 <HAL_I2C_Init+0x1e4>
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	4a37      	ldr	r2, [pc, #220]	; (80021bc <HAL_I2C_Init+0x2b8>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	3301      	adds	r3, #1
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	430b      	orrs	r3, r1
 80020ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	492a      	ldr	r1, [pc, #168]	; (80021ac <HAL_I2C_Init+0x2a8>)
 8002104:	428b      	cmp	r3, r1
 8002106:	d819      	bhi.n	800213c <HAL_I2C_Init+0x238>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1e59      	subs	r1, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fbb1 f3f3 	udiv	r3, r1, r3
 8002116:	1c59      	adds	r1, r3, #1
 8002118:	f640 73fc 	movw	r3, #4092	; 0xffc
 800211c:	400b      	ands	r3, r1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_I2C_Init+0x234>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1e59      	subs	r1, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002130:	3301      	adds	r3, #1
 8002132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002136:	e066      	b.n	8002206 <HAL_I2C_Init+0x302>
 8002138:	2304      	movs	r3, #4
 800213a:	e064      	b.n	8002206 <HAL_I2C_Init+0x302>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d111      	bne.n	8002168 <HAL_I2C_Init+0x264>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e58      	subs	r0, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	440b      	add	r3, r1
 8002152:	fbb0 f3f3 	udiv	r3, r0, r3
 8002156:	3301      	adds	r3, #1
 8002158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e012      	b.n	800218e <HAL_I2C_Init+0x28a>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1e58      	subs	r0, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6859      	ldr	r1, [r3, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	0099      	lsls	r1, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	fbb0 f3f3 	udiv	r3, r0, r3
 800217e:	3301      	adds	r3, #1
 8002180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <HAL_I2C_Init+0x2bc>
 8002192:	2301      	movs	r3, #1
 8002194:	e037      	b.n	8002206 <HAL_I2C_Init+0x302>
 8002196:	bf00      	nop
 8002198:	40005400 	.word	0x40005400
 800219c:	40005800 	.word	0x40005800
 80021a0:	40005c00 	.word	0x40005c00
 80021a4:	0800cef8 	.word	0x0800cef8
 80021a8:	00061a80 	.word	0x00061a80
 80021ac:	000186a0 	.word	0x000186a0
 80021b0:	001e847f 	.word	0x001e847f
 80021b4:	003d08ff 	.word	0x003d08ff
 80021b8:	431bde83 	.word	0x431bde83
 80021bc:	10624dd3 	.word	0x10624dd3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10e      	bne.n	80021e6 <HAL_I2C_Init+0x2e2>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1e58      	subs	r0, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	440b      	add	r3, r1
 80021d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e4:	e00f      	b.n	8002206 <HAL_I2C_Init+0x302>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1e58      	subs	r0, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	0099      	lsls	r1, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	6809      	ldr	r1, [r1, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002234:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6911      	ldr	r1, [r2, #16]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68d2      	ldr	r2, [r2, #12]
 8002240:	4311      	orrs	r1, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	430b      	orrs	r3, r1
 8002248:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e316      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b0f      	cmp	r3, #15
 80022b4:	d903      	bls.n	80022be <HAL_RCC_OscConfig+0x22>
 80022b6:	21e8      	movs	r1, #232	; 0xe8
 80022b8:	48a3      	ldr	r0, [pc, #652]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80022ba:	f7fe ff26 	bl	800110a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8088 	beq.w	80023dc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <HAL_RCC_OscConfig+0x54>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022dc:	d008      	beq.n	80022f0 <HAL_RCC_OscConfig+0x54>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e6:	d003      	beq.n	80022f0 <HAL_RCC_OscConfig+0x54>
 80022e8:	21ed      	movs	r1, #237	; 0xed
 80022ea:	4897      	ldr	r0, [pc, #604]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	f7fe ff0d 	bl	800110a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f0:	4b96      	ldr	r3, [pc, #600]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d00c      	beq.n	8002316 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fc:	4b93      	ldr	r3, [pc, #588]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002304:	2b08      	cmp	r3, #8
 8002306:	d112      	bne.n	800232e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002308:	4b90      	ldr	r3, [pc, #576]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002314:	d10b      	bne.n	800232e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002316:	4b8d      	ldr	r3, [pc, #564]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d05b      	beq.n	80023da <HAL_RCC_OscConfig+0x13e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d157      	bne.n	80023da <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e2d6      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0xaa>
 8002338:	4b84      	ldr	r3, [pc, #528]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a83      	ldr	r2, [pc, #524]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800233e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	e01d      	b.n	8002382 <HAL_RCC_OscConfig+0xe6>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800234e:	d10c      	bne.n	800236a <HAL_RCC_OscConfig+0xce>
 8002350:	4b7e      	ldr	r3, [pc, #504]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a7d      	ldr	r2, [pc, #500]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b7b      	ldr	r3, [pc, #492]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a7a      	ldr	r2, [pc, #488]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e00b      	b.n	8002382 <HAL_RCC_OscConfig+0xe6>
 800236a:	4b78      	ldr	r3, [pc, #480]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a77      	ldr	r2, [pc, #476]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b75      	ldr	r3, [pc, #468]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a74      	ldr	r2, [pc, #464]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800237c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d013      	beq.n	80023b2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7ff f919 	bl	80015c0 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002392:	f7ff f915 	bl	80015c0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e29b      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a4:	4b69      	ldr	r3, [pc, #420]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0xf6>
 80023b0:	e014      	b.n	80023dc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff f905 	bl	80015c0 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ba:	f7ff f901 	bl	80015c0 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	; 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e287      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023cc:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x11e>
 80023d8:	e000      	b.n	80023dc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d079      	beq.n	80024dc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_RCC_OscConfig+0x166>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d004      	beq.n	8002402 <HAL_RCC_OscConfig+0x166>
 80023f8:	f240 111f 	movw	r1, #287	; 0x11f
 80023fc:	4852      	ldr	r0, [pc, #328]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	f7fe fe84 	bl	800110a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b1f      	cmp	r3, #31
 8002408:	d904      	bls.n	8002414 <HAL_RCC_OscConfig+0x178>
 800240a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800240e:	484e      	ldr	r0, [pc, #312]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	f7fe fe7b 	bl	800110a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002414:	4b4d      	ldr	r3, [pc, #308]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002420:	4b4a      	ldr	r3, [pc, #296]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002428:	2b08      	cmp	r3, #8
 800242a:	d11c      	bne.n	8002466 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242c:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d116      	bne.n	8002466 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002438:	4b44      	ldr	r3, [pc, #272]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_OscConfig+0x1b4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d001      	beq.n	8002450 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e245      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002450:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	493b      	ldr	r1, [pc, #236]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002464:	e03a      	b.n	80024dc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d020      	beq.n	80024b0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246e:	4b38      	ldr	r3, [pc, #224]	; (8002550 <HAL_RCC_OscConfig+0x2b4>)
 8002470:	2201      	movs	r2, #1
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7ff f8a4 	bl	80015c0 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247c:	f7ff f8a0 	bl	80015c0 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e226      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b2f      	ldr	r3, [pc, #188]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4928      	ldr	r1, [pc, #160]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
 80024ae:	e015      	b.n	80024dc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x2b4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7ff f883 	bl	80015c0 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024be:	f7ff f87f 	bl	80015c0 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e205      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d046      	beq.n	8002576 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCC_OscConfig+0x266>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d004      	beq.n	8002502 <HAL_RCC_OscConfig+0x266>
 80024f8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80024fc:	4812      	ldr	r0, [pc, #72]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80024fe:	f7fe fe04 	bl	800110a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCC_OscConfig+0x2b8>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7ff f856 	bl	80015c0 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002518:	f7ff f852 	bl	80015c0 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1d8      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800252c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x27c>
 8002536:	e01e      	b.n	8002576 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_OscConfig+0x2b8>)
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff f83f 	bl	80015c0 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	e011      	b.n	800256a <HAL_RCC_OscConfig+0x2ce>
 8002546:	bf00      	nop
 8002548:	0800cf30 	.word	0x0800cf30
 800254c:	40023800 	.word	0x40023800
 8002550:	42470000 	.word	0x42470000
 8002554:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002558:	f7ff f832 	bl	80015c0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1b8      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256a:	4b97      	ldr	r3, [pc, #604]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 800256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80a8 	beq.w	80026d4 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00c      	beq.n	80025aa <HAL_RCC_OscConfig+0x30e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d008      	beq.n	80025aa <HAL_RCC_OscConfig+0x30e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d004      	beq.n	80025aa <HAL_RCC_OscConfig+0x30e>
 80025a0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80025a4:	4889      	ldr	r0, [pc, #548]	; (80027cc <HAL_RCC_OscConfig+0x530>)
 80025a6:	f7fe fdb0 	bl	800110a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025aa:	4b87      	ldr	r3, [pc, #540]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	4b83      	ldr	r3, [pc, #524]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a82      	ldr	r2, [pc, #520]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b80      	ldr	r3, [pc, #512]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d2:	2301      	movs	r3, #1
 80025d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b7e      	ldr	r3, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x534>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d118      	bne.n	8002614 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e2:	4b7b      	ldr	r3, [pc, #492]	; (80027d0 <HAL_RCC_OscConfig+0x534>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a7a      	ldr	r2, [pc, #488]	; (80027d0 <HAL_RCC_OscConfig+0x534>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ee:	f7fe ffe7 	bl	80015c0 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f6:	f7fe ffe3 	bl	80015c0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e169      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	4b71      	ldr	r3, [pc, #452]	; (80027d0 <HAL_RCC_OscConfig+0x534>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x38e>
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a69      	ldr	r2, [pc, #420]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	e01c      	b.n	8002664 <HAL_RCC_OscConfig+0x3c8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b05      	cmp	r3, #5
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x3b0>
 8002632:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a64      	ldr	r2, [pc, #400]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	4b62      	ldr	r3, [pc, #392]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a61      	ldr	r2, [pc, #388]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0x3c8>
 800264c:	4b5e      	ldr	r3, [pc, #376]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
 8002658:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a5a      	ldr	r2, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 800265e:	f023 0304 	bic.w	r3, r3, #4
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7fe ffa8 	bl	80015c0 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7fe ffa4 	bl	80015c0 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e128      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	4b4f      	ldr	r3, [pc, #316]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ee      	beq.n	8002674 <HAL_RCC_OscConfig+0x3d8>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7fe ff92 	bl	80015c0 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7fe ff8e 	bl	80015c0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e112      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ee      	bne.n	80026a0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c8:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a3e      	ldr	r2, [pc, #248]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 80026ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_RCC_OscConfig+0x45a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_OscConfig+0x45a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d004      	beq.n	80026f6 <HAL_RCC_OscConfig+0x45a>
 80026ec:	f240 11cf 	movw	r1, #463	; 0x1cf
 80026f0:	4836      	ldr	r0, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x530>)
 80026f2:	f7fe fd0a 	bl	800110a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80ed 	beq.w	80028da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002700:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_RCC_OscConfig+0x52c>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	f000 80ae 	beq.w	800286a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b02      	cmp	r3, #2
 8002714:	f040 8092 	bne.w	800283c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <HAL_RCC_OscConfig+0x498>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002728:	d004      	beq.n	8002734 <HAL_RCC_OscConfig+0x498>
 800272a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800272e:	4827      	ldr	r0, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x530>)
 8002730:	f7fe fceb 	bl	800110a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	2b3f      	cmp	r3, #63	; 0x3f
 800273a:	d904      	bls.n	8002746 <HAL_RCC_OscConfig+0x4aa>
 800273c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002740:	4822      	ldr	r0, [pc, #136]	; (80027cc <HAL_RCC_OscConfig+0x530>)
 8002742:	f7fe fce2 	bl	800110a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2b31      	cmp	r3, #49	; 0x31
 800274c:	d904      	bls.n	8002758 <HAL_RCC_OscConfig+0x4bc>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002756:	d904      	bls.n	8002762 <HAL_RCC_OscConfig+0x4c6>
 8002758:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800275c:	481b      	ldr	r0, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x530>)
 800275e:	f7fe fcd4 	bl	800110a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	2b02      	cmp	r3, #2
 8002768:	d010      	beq.n	800278c <HAL_RCC_OscConfig+0x4f0>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	2b04      	cmp	r3, #4
 8002770:	d00c      	beq.n	800278c <HAL_RCC_OscConfig+0x4f0>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	2b06      	cmp	r3, #6
 8002778:	d008      	beq.n	800278c <HAL_RCC_OscConfig+0x4f0>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	2b08      	cmp	r3, #8
 8002780:	d004      	beq.n	800278c <HAL_RCC_OscConfig+0x4f0>
 8002782:	f240 11db 	movw	r1, #475	; 0x1db
 8002786:	4811      	ldr	r0, [pc, #68]	; (80027cc <HAL_RCC_OscConfig+0x530>)
 8002788:	f7fe fcbf 	bl	800110a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d903      	bls.n	800279c <HAL_RCC_OscConfig+0x500>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d904      	bls.n	80027a6 <HAL_RCC_OscConfig+0x50a>
 800279c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80027a0:	480a      	ldr	r0, [pc, #40]	; (80027cc <HAL_RCC_OscConfig+0x530>)
 80027a2:	f7fe fcb2 	bl	800110a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_OscConfig+0x538>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe ff08 	bl	80015c0 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	e011      	b.n	80027d8 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe ff04 	bl	80015c0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d90a      	bls.n	80027d8 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e08a      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	0800cf30 	.word	0x0800cf30
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d8:	4b42      	ldr	r3, [pc, #264]	; (80028e4 <HAL_RCC_OscConfig+0x648>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e7      	bne.n	80027b4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	019b      	lsls	r3, r3, #6
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	3b01      	subs	r3, #1
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	061b      	lsls	r3, r3, #24
 8002808:	4936      	ldr	r1, [pc, #216]	; (80028e4 <HAL_RCC_OscConfig+0x648>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280e:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_RCC_OscConfig+0x64c>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fed4 	bl	80015c0 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fed0 	bl	80015c0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e056      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_RCC_OscConfig+0x648>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x580>
 800283a:	e04e      	b.n	80028da <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_RCC_OscConfig+0x64c>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7fe febd 	bl	80015c0 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe feb9 	bl	80015c0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e03f      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285c:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <HAL_RCC_OscConfig+0x648>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x5ae>
 8002868:	e037      	b.n	80028da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e032      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002876:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x648>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d028      	beq.n	80028d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d121      	bne.n	80028d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d11a      	bne.n	80028d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d111      	bne.n	80028d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	3b01      	subs	r3, #1
 80028c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	42470060 	.word	0x42470060

080028ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e174      	b.n	8002bea <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_RCC_ClockConfig+0x24>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b0f      	cmp	r3, #15
 800290e:	d904      	bls.n	800291a <HAL_RCC_ClockConfig+0x2e>
 8002910:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8002914:	487b      	ldr	r0, [pc, #492]	; (8002b04 <HAL_RCC_ClockConfig+0x218>)
 8002916:	f7fe fbf8 	bl	800110a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d019      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d016      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d013      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d010      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d00d      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b05      	cmp	r3, #5
 800293c:	d00a      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b06      	cmp	r3, #6
 8002942:	d007      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b07      	cmp	r3, #7
 8002948:	d004      	beq.n	8002954 <HAL_RCC_ClockConfig+0x68>
 800294a:	f240 215d 	movw	r1, #605	; 0x25d
 800294e:	486d      	ldr	r0, [pc, #436]	; (8002b04 <HAL_RCC_ClockConfig+0x218>)
 8002950:	f7fe fbdb 	bl	800110a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b6c      	ldr	r3, [pc, #432]	; (8002b08 <HAL_RCC_ClockConfig+0x21c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d90c      	bls.n	800297c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b69      	ldr	r3, [pc, #420]	; (8002b08 <HAL_RCC_ClockConfig+0x21c>)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <HAL_RCC_ClockConfig+0x21c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e136      	b.n	8002bea <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d049      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a5c      	ldr	r2, [pc, #368]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 800299a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800299e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ac:	4b57      	ldr	r3, [pc, #348]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a56      	ldr	r2, [pc, #344]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 80029b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d024      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x11e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b80      	cmp	r3, #128	; 0x80
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x11e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b90      	cmp	r3, #144	; 0x90
 80029ce:	d01c      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x11e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2ba0      	cmp	r3, #160	; 0xa0
 80029d6:	d018      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x11e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2bb0      	cmp	r3, #176	; 0xb0
 80029de:	d014      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x11e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2bc0      	cmp	r3, #192	; 0xc0
 80029e6:	d010      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x11e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2bd0      	cmp	r3, #208	; 0xd0
 80029ee:	d00c      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x11e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2be0      	cmp	r3, #224	; 0xe0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x11e>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2bf0      	cmp	r3, #240	; 0xf0
 80029fe:	d004      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x11e>
 8002a00:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002a04:	483f      	ldr	r0, [pc, #252]	; (8002b04 <HAL_RCC_ClockConfig+0x218>)
 8002a06:	f7fe fb80 	bl	800110a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0a:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	493d      	ldr	r1, [pc, #244]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d059      	beq.n	8002adc <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d010      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x166>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d00c      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x166>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x166>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d004      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x166>
 8002a48:	f240 2187 	movw	r1, #647	; 0x287
 8002a4c:	482d      	ldr	r0, [pc, #180]	; (8002b04 <HAL_RCC_ClockConfig+0x218>)
 8002a4e:	f7fe fb5c 	bl	800110a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d119      	bne.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0bf      	b.n	8002bea <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0af      	b.n	8002bea <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0a7      	b.n	8002bea <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4919      	ldr	r1, [pc, #100]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7fe fd88 	bl	80015c0 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7fe fd84 	bl	80015c0 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e08f      	b.n	8002bea <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_RCC_ClockConfig+0x220>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCC_ClockConfig+0x21c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d212      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <HAL_RCC_ClockConfig+0x21c>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_ClockConfig+0x21c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d007      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e072      	b.n	8002bea <HAL_RCC_ClockConfig+0x2fe>
 8002b04:	0800cf30 	.word	0x0800cf30
 8002b08:	40023c00 	.word	0x40023c00
 8002b0c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d025      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d018      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x26a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2c:	d013      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x26a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b36:	d00e      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x26a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x26a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002b4a:	d004      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x26a>
 8002b4c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8002b50:	4828      	ldr	r0, [pc, #160]	; (8002bf4 <HAL_RCC_ClockConfig+0x308>)
 8002b52:	f7fe fada 	bl	800110a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b56:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_RCC_ClockConfig+0x30c>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4925      	ldr	r1, [pc, #148]	; (8002bf8 <HAL_RCC_ClockConfig+0x30c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d026      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d018      	beq.n	8002bae <HAL_RCC_ClockConfig+0x2c2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b84:	d013      	beq.n	8002bae <HAL_RCC_ClockConfig+0x2c2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002b8e:	d00e      	beq.n	8002bae <HAL_RCC_ClockConfig+0x2c2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x2c2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002ba2:	d004      	beq.n	8002bae <HAL_RCC_ClockConfig+0x2c2>
 8002ba4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8002ba8:	4812      	ldr	r0, [pc, #72]	; (8002bf4 <HAL_RCC_ClockConfig+0x308>)
 8002baa:	f7fe faae 	bl	800110a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bae:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <HAL_RCC_ClockConfig+0x30c>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	490e      	ldr	r1, [pc, #56]	; (8002bf8 <HAL_RCC_ClockConfig+0x30c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc2:	f000 f821 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_ClockConfig+0x30c>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	490a      	ldr	r1, [pc, #40]	; (8002bfc <HAL_RCC_ClockConfig+0x310>)
 8002bd4:	5ccb      	ldrb	r3, [r1, r3]
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	4a09      	ldr	r2, [pc, #36]	; (8002c00 <HAL_RCC_ClockConfig+0x314>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_ClockConfig+0x318>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fb46 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	0800cf30 	.word	0x0800cf30
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	0800d168 	.word	0x0800d168
 8002c00:	20000000 	.word	0x20000000
 8002c04:	20000004 	.word	0x20000004

08002c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c20:	4b67      	ldr	r3, [pc, #412]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d00d      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x40>
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	f200 80bd 	bhi.w	8002dac <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x34>
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3a:	e0b7      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c3e:	60bb      	str	r3, [r7, #8]
       break;
 8002c40:	e0b7      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c42:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c44:	60bb      	str	r3, [r7, #8]
      break;
 8002c46:	e0b4      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4b5d      	ldr	r3, [pc, #372]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c52:	4b5b      	ldr	r3, [pc, #364]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04d      	beq.n	8002cfa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	461a      	mov	r2, r3
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	ea02 0800 	and.w	r8, r2, r0
 8002c76:	ea03 0901 	and.w	r9, r3, r1
 8002c7a:	4640      	mov	r0, r8
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	014b      	lsls	r3, r1, #5
 8002c88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c8c:	0142      	lsls	r2, r0, #5
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	ebb0 0008 	subs.w	r0, r0, r8
 8002c96:	eb61 0109 	sbc.w	r1, r1, r9
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	018b      	lsls	r3, r1, #6
 8002ca4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ca8:	0182      	lsls	r2, r0, #6
 8002caa:	1a12      	subs	r2, r2, r0
 8002cac:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb0:	f04f 0000 	mov.w	r0, #0
 8002cb4:	f04f 0100 	mov.w	r1, #0
 8002cb8:	00d9      	lsls	r1, r3, #3
 8002cba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cbe:	00d0      	lsls	r0, r2, #3
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	eb12 0208 	adds.w	r2, r2, r8
 8002cc8:	eb43 0309 	adc.w	r3, r3, r9
 8002ccc:	f04f 0000 	mov.w	r0, #0
 8002cd0:	f04f 0100 	mov.w	r1, #0
 8002cd4:	0259      	lsls	r1, r3, #9
 8002cd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002cda:	0250      	lsls	r0, r2, #9
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	f7fd fad0 	bl	8000290 <__aeabi_uldivmod>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	e04a      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	461a      	mov	r2, r3
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	ea02 0400 	and.w	r4, r2, r0
 8002d12:	ea03 0501 	and.w	r5, r3, r1
 8002d16:	4620      	mov	r0, r4
 8002d18:	4629      	mov	r1, r5
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	014b      	lsls	r3, r1, #5
 8002d24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d28:	0142      	lsls	r2, r0, #5
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	1b00      	subs	r0, r0, r4
 8002d30:	eb61 0105 	sbc.w	r1, r1, r5
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	018b      	lsls	r3, r1, #6
 8002d3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d42:	0182      	lsls	r2, r0, #6
 8002d44:	1a12      	subs	r2, r2, r0
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	f04f 0000 	mov.w	r0, #0
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	00d9      	lsls	r1, r3, #3
 8002d54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d58:	00d0      	lsls	r0, r2, #3
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	1912      	adds	r2, r2, r4
 8002d60:	eb45 0303 	adc.w	r3, r5, r3
 8002d64:	f04f 0000 	mov.w	r0, #0
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	0299      	lsls	r1, r3, #10
 8002d6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d72:	0290      	lsls	r0, r2, #10
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	f7fd fa84 	bl	8000290 <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	60bb      	str	r3, [r7, #8]
      break;
 8002daa:	e002      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dae:	60bb      	str	r3, [r7, #8]
      break;
 8002db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db2:	68bb      	ldr	r3, [r7, #8]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	00f42400 	.word	0x00f42400
 8002dc8:	007a1200 	.word	0x007a1200

08002dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000

08002de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002de8:	f7ff fff0 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0a9b      	lsrs	r3, r3, #10
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4903      	ldr	r1, [pc, #12]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	0800d178 	.word	0x0800d178

08002e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e10:	f7ff ffdc 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0b5b      	lsrs	r3, r3, #13
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	0800d178 	.word	0x0800d178

08002e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	220f      	movs	r2, #15
 8002e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_RCC_GetClockConfig+0x60>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0207 	and.w	r2, r3, #7
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	601a      	str	r2, [r3, #0]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40023c00 	.word	0x40023c00

08002e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e18c      	b.n	80031c4 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a75      	ldr	r2, [pc, #468]	; (8003084 <HAL_SPI_Init+0x1ec>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d018      	beq.n	8002ee6 <HAL_SPI_Init+0x4e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a73      	ldr	r2, [pc, #460]	; (8003088 <HAL_SPI_Init+0x1f0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_SPI_Init+0x4e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a72      	ldr	r2, [pc, #456]	; (800308c <HAL_SPI_Init+0x1f4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_SPI_Init+0x4e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a70      	ldr	r2, [pc, #448]	; (8003090 <HAL_SPI_Init+0x1f8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_SPI_Init+0x4e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6f      	ldr	r2, [pc, #444]	; (8003094 <HAL_SPI_Init+0x1fc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_SPI_Init+0x4e>
 8002edc:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002ee0:	486d      	ldr	r0, [pc, #436]	; (8003098 <HAL_SPI_Init+0x200>)
 8002ee2:	f7fe f912 	bl	800110a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_SPI_Init+0x6a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef6:	d004      	beq.n	8002f02 <HAL_SPI_Init+0x6a>
 8002ef8:	f240 1143 	movw	r1, #323	; 0x143
 8002efc:	4866      	ldr	r0, [pc, #408]	; (8003098 <HAL_SPI_Init+0x200>)
 8002efe:	f7fe f904 	bl	800110a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00e      	beq.n	8002f28 <HAL_SPI_Init+0x90>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d009      	beq.n	8002f28 <HAL_SPI_Init+0x90>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1c:	d004      	beq.n	8002f28 <HAL_SPI_Init+0x90>
 8002f1e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002f22:	485d      	ldr	r0, [pc, #372]	; (8003098 <HAL_SPI_Init+0x200>)
 8002f24:	f7fe f8f1 	bl	800110a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f30:	d008      	beq.n	8002f44 <HAL_SPI_Init+0xac>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <HAL_SPI_Init+0xac>
 8002f3a:	f240 1145 	movw	r1, #325	; 0x145
 8002f3e:	4856      	ldr	r0, [pc, #344]	; (8003098 <HAL_SPI_Init+0x200>)
 8002f40:	f7fe f8e3 	bl	800110a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f4c:	d00d      	beq.n	8002f6a <HAL_SPI_Init+0xd2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_SPI_Init+0xd2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f5e:	d004      	beq.n	8002f6a <HAL_SPI_Init+0xd2>
 8002f60:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002f64:	484c      	ldr	r0, [pc, #304]	; (8003098 <HAL_SPI_Init+0x200>)
 8002f66:	f7fe f8d0 	bl	800110a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d020      	beq.n	8002fb4 <HAL_SPI_Init+0x11c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d01c      	beq.n	8002fb4 <HAL_SPI_Init+0x11c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d018      	beq.n	8002fb4 <HAL_SPI_Init+0x11c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	2b18      	cmp	r3, #24
 8002f88:	d014      	beq.n	8002fb4 <HAL_SPI_Init+0x11c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d010      	beq.n	8002fb4 <HAL_SPI_Init+0x11c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	2b28      	cmp	r3, #40	; 0x28
 8002f98:	d00c      	beq.n	8002fb4 <HAL_SPI_Init+0x11c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2b30      	cmp	r3, #48	; 0x30
 8002fa0:	d008      	beq.n	8002fb4 <HAL_SPI_Init+0x11c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	2b38      	cmp	r3, #56	; 0x38
 8002fa8:	d004      	beq.n	8002fb4 <HAL_SPI_Init+0x11c>
 8002faa:	f240 1147 	movw	r1, #327	; 0x147
 8002fae:	483a      	ldr	r0, [pc, #232]	; (8003098 <HAL_SPI_Init+0x200>)
 8002fb0:	f7fe f8ab 	bl	800110a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_SPI_Init+0x136>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	2b80      	cmp	r3, #128	; 0x80
 8002fc2:	d004      	beq.n	8002fce <HAL_SPI_Init+0x136>
 8002fc4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002fc8:	4833      	ldr	r0, [pc, #204]	; (8003098 <HAL_SPI_Init+0x200>)
 8002fca:	f7fe f89e 	bl	800110a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_SPI_Init+0x150>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d004      	beq.n	8002fe8 <HAL_SPI_Init+0x150>
 8002fde:	f240 1149 	movw	r1, #329	; 0x149
 8002fe2:	482d      	ldr	r0, [pc, #180]	; (8003098 <HAL_SPI_Init+0x200>)
 8002fe4:	f7fe f891 	bl	800110a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d155      	bne.n	800309c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_SPI_Init+0x172>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d004      	beq.n	800300a <HAL_SPI_Init+0x172>
 8003000:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003004:	4824      	ldr	r0, [pc, #144]	; (8003098 <HAL_SPI_Init+0x200>)
 8003006:	f7fe f880 	bl	800110a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_SPI_Init+0x18c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d004      	beq.n	8003024 <HAL_SPI_Init+0x18c>
 800301a:	f240 114d 	movw	r1, #333	; 0x14d
 800301e:	481e      	ldr	r0, [pc, #120]	; (8003098 <HAL_SPI_Init+0x200>)
 8003020:	f7fe f873 	bl	800110a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800302c:	d125      	bne.n	800307a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d05d      	beq.n	80030f2 <HAL_SPI_Init+0x25a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	2b08      	cmp	r3, #8
 800303c:	d059      	beq.n	80030f2 <HAL_SPI_Init+0x25a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	2b10      	cmp	r3, #16
 8003044:	d055      	beq.n	80030f2 <HAL_SPI_Init+0x25a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	2b18      	cmp	r3, #24
 800304c:	d051      	beq.n	80030f2 <HAL_SPI_Init+0x25a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b20      	cmp	r3, #32
 8003054:	d04d      	beq.n	80030f2 <HAL_SPI_Init+0x25a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	2b28      	cmp	r3, #40	; 0x28
 800305c:	d049      	beq.n	80030f2 <HAL_SPI_Init+0x25a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	2b30      	cmp	r3, #48	; 0x30
 8003064:	d045      	beq.n	80030f2 <HAL_SPI_Init+0x25a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	2b38      	cmp	r3, #56	; 0x38
 800306c:	d041      	beq.n	80030f2 <HAL_SPI_Init+0x25a>
 800306e:	f240 1151 	movw	r1, #337	; 0x151
 8003072:	4809      	ldr	r0, [pc, #36]	; (8003098 <HAL_SPI_Init+0x200>)
 8003074:	f7fe f849 	bl	800110a <assert_failed>
 8003078:	e03b      	b.n	80030f2 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	61da      	str	r2, [r3, #28]
 8003080:	e037      	b.n	80030f2 <HAL_SPI_Init+0x25a>
 8003082:	bf00      	nop
 8003084:	40013000 	.word	0x40013000
 8003088:	40003800 	.word	0x40003800
 800308c:	40003c00 	.word	0x40003c00
 8003090:	40013400 	.word	0x40013400
 8003094:	40015000 	.word	0x40015000
 8003098:	0800cf68 	.word	0x0800cf68
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_SPI_Init+0x24e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d01c      	beq.n	80030e6 <HAL_SPI_Init+0x24e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d018      	beq.n	80030e6 <HAL_SPI_Init+0x24e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	2b18      	cmp	r3, #24
 80030ba:	d014      	beq.n	80030e6 <HAL_SPI_Init+0x24e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d010      	beq.n	80030e6 <HAL_SPI_Init+0x24e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	2b28      	cmp	r3, #40	; 0x28
 80030ca:	d00c      	beq.n	80030e6 <HAL_SPI_Init+0x24e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2b30      	cmp	r3, #48	; 0x30
 80030d2:	d008      	beq.n	80030e6 <HAL_SPI_Init+0x24e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	2b38      	cmp	r3, #56	; 0x38
 80030da:	d004      	beq.n	80030e6 <HAL_SPI_Init+0x24e>
 80030dc:	f240 115b 	movw	r1, #347	; 0x15b
 80030e0:	483a      	ldr	r0, [pc, #232]	; (80031cc <HAL_SPI_Init+0x334>)
 80030e2:	f7fe f812 	bl	800110a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fe f83d 	bl	800118c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003128:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	ea42 0103 	orr.w	r1, r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	0c1b      	lsrs	r3, r3, #16
 8003190:	f003 0104 	and.w	r1, r3, #4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f003 0210 	and.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	0800cf68 	.word	0x0800cf68

080031d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08c      	sub	sp, #48	; 0x30
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031de:	2301      	movs	r3, #1
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <HAL_SPI_TransmitReceive+0x2a>
 80031f0:	f240 417e 	movw	r1, #1150	; 0x47e
 80031f4:	4884      	ldr	r0, [pc, #528]	; (8003408 <HAL_SPI_TransmitReceive+0x238>)
 80031f6:	f7fd ff88 	bl	800110a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x38>
 8003204:	2302      	movs	r3, #2
 8003206:	e18d      	b.n	8003524 <HAL_SPI_TransmitReceive+0x354>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003210:	f7fe f9d6 	bl	80015c0 <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800321c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800322a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800322e:	2b01      	cmp	r3, #1
 8003230:	d00f      	beq.n	8003252 <HAL_SPI_TransmitReceive+0x82>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003238:	d107      	bne.n	800324a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <HAL_SPI_TransmitReceive+0x7a>
 8003242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003246:	2b04      	cmp	r3, #4
 8003248:	d003      	beq.n	8003252 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800324a:	2302      	movs	r3, #2
 800324c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003250:	e15e      	b.n	8003510 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_SPI_TransmitReceive+0x94>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_SPI_TransmitReceive+0x94>
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d103      	bne.n	800326c <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800326a:	e151      	b.n	8003510 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b04      	cmp	r3, #4
 8003276:	d003      	beq.n	8003280 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2205      	movs	r2, #5
 800327c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	887a      	ldrh	r2, [r7, #2]
 8003296:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	887a      	ldrh	r2, [r7, #2]
 80032a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d007      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032dc:	d178      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x11c>
 80032e6:	8b7b      	ldrh	r3, [r7, #26]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d166      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003310:	e053      	b.n	80033ba <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d11b      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x188>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_SPI_TransmitReceive+0x188>
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d113      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	881a      	ldrh	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	1c9a      	adds	r2, r3, #2
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d119      	bne.n	800339a <HAL_SPI_TransmitReceive+0x1ca>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d014      	beq.n	800339a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	b292      	uxth	r2, r2
 800337c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	1c9a      	adds	r2, r3, #2
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003396:	2301      	movs	r3, #1
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800339a:	f7fe f911 	bl	80015c0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d807      	bhi.n	80033ba <HAL_SPI_TransmitReceive+0x1ea>
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b0:	d003      	beq.n	80033ba <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033b8:	e0aa      	b.n	8003510 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1a6      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x142>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1a1      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x142>
 80033ce:	e07f      	b.n	80034d0 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_TransmitReceive+0x20e>
 80033d8:	8b7b      	ldrh	r3, [r7, #26]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d16e      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003404:	e05a      	b.n	80034bc <HAL_SPI_TransmitReceive+0x2ec>
 8003406:	bf00      	nop
 8003408:	0800cf68 	.word	0x0800cf68
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d11c      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x284>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d017      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x284>
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d114      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d119      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x2c6>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d014      	beq.n	8003496 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003492:	2301      	movs	r3, #1
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003496:	f7fe f893 	bl	80015c0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d803      	bhi.n	80034ae <HAL_SPI_TransmitReceive+0x2de>
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ac:	d102      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x2e4>
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034ba:	e029      	b.n	8003510 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1a2      	bne.n	800340c <HAL_SPI_TransmitReceive+0x23c>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d19d      	bne.n	800340c <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f8b1 	bl	800363c <SPI_EndRxTxTransaction>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d006      	beq.n	80034ee <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034ec:	e010      	b.n	8003510 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	e000      	b.n	8003510 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 800350e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003520:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003524:	4618      	mov	r0, r3
 8003526:	3730      	adds	r7, #48	; 0x30
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800353c:	f7fe f840 	bl	80015c0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	4413      	add	r3, r2
 800354a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800354c:	f7fe f838 	bl	80015c0 <HAL_GetTick>
 8003550:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003552:	4b39      	ldr	r3, [pc, #228]	; (8003638 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	015b      	lsls	r3, r3, #5
 8003558:	0d1b      	lsrs	r3, r3, #20
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003562:	e054      	b.n	800360e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800356a:	d050      	beq.n	800360e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800356c:	f7fe f828 	bl	80015c0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	429a      	cmp	r2, r3
 800357a:	d902      	bls.n	8003582 <SPI_WaitFlagStateUntilTimeout+0x56>
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d13d      	bne.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d111      	bne.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a4:	d004      	beq.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ae:	d107      	bne.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c8:	d10f      	bne.n	80035ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e017      	b.n	800362e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3b01      	subs	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d19b      	bne.n	8003564 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000000 	.word	0x20000000

0800363c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <SPI_EndRxTxTransaction+0x7c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <SPI_EndRxTxTransaction+0x80>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	0d5b      	lsrs	r3, r3, #21
 8003654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003666:	d112      	bne.n	800368e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2200      	movs	r2, #0
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f7ff ff5a 	bl	800352c <SPI_WaitFlagStateUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e00f      	b.n	80036ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3b01      	subs	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d0f2      	beq.n	800368e <SPI_EndRxTxTransaction+0x52>
 80036a8:	e000      	b.n	80036ac <SPI_EndRxTxTransaction+0x70>
        break;
 80036aa:	bf00      	nop
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000000 	.word	0x20000000
 80036bc:	165e9f81 	.word	0x165e9f81

080036c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0a7      	b.n	8003822 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a55      	ldr	r2, [pc, #340]	; (800382c <HAL_TIM_Base_Init+0x16c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d027      	beq.n	800372c <HAL_TIM_Base_Init+0x6c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e4:	d022      	beq.n	800372c <HAL_TIM_Base_Init+0x6c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a51      	ldr	r2, [pc, #324]	; (8003830 <HAL_TIM_Base_Init+0x170>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d01d      	beq.n	800372c <HAL_TIM_Base_Init+0x6c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a4f      	ldr	r2, [pc, #316]	; (8003834 <HAL_TIM_Base_Init+0x174>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_TIM_Base_Init+0x6c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4e      	ldr	r2, [pc, #312]	; (8003838 <HAL_TIM_Base_Init+0x178>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_TIM_Base_Init+0x6c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a4c      	ldr	r2, [pc, #304]	; (800383c <HAL_TIM_Base_Init+0x17c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_TIM_Base_Init+0x6c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a4b      	ldr	r2, [pc, #300]	; (8003840 <HAL_TIM_Base_Init+0x180>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_TIM_Base_Init+0x6c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a49      	ldr	r2, [pc, #292]	; (8003844 <HAL_TIM_Base_Init+0x184>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_TIM_Base_Init+0x6c>
 8003722:	f240 1113 	movw	r1, #275	; 0x113
 8003726:	4848      	ldr	r0, [pc, #288]	; (8003848 <HAL_TIM_Base_Init+0x188>)
 8003728:	f7fd fcef 	bl	800110a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d014      	beq.n	800375e <HAL_TIM_Base_Init+0x9e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b10      	cmp	r3, #16
 800373a:	d010      	beq.n	800375e <HAL_TIM_Base_Init+0x9e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b20      	cmp	r3, #32
 8003742:	d00c      	beq.n	800375e <HAL_TIM_Base_Init+0x9e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d008      	beq.n	800375e <HAL_TIM_Base_Init+0x9e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b60      	cmp	r3, #96	; 0x60
 8003752:	d004      	beq.n	800375e <HAL_TIM_Base_Init+0x9e>
 8003754:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003758:	483b      	ldr	r0, [pc, #236]	; (8003848 <HAL_TIM_Base_Init+0x188>)
 800375a:	f7fd fcd6 	bl	800110a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00e      	beq.n	8003784 <HAL_TIM_Base_Init+0xc4>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376e:	d009      	beq.n	8003784 <HAL_TIM_Base_Init+0xc4>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d004      	beq.n	8003784 <HAL_TIM_Base_Init+0xc4>
 800377a:	f240 1115 	movw	r1, #277	; 0x115
 800377e:	4832      	ldr	r0, [pc, #200]	; (8003848 <HAL_TIM_Base_Init+0x188>)
 8003780:	f7fd fcc3 	bl	800110a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_TIM_Base_Init+0xde>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d004      	beq.n	800379e <HAL_TIM_Base_Init+0xde>
 8003794:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003798:	482b      	ldr	r0, [pc, #172]	; (8003848 <HAL_TIM_Base_Init+0x188>)
 800379a:	f7fd fcb6 	bl	800110a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f84a 	bl	800384c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f000 fa0a 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40010000 	.word	0x40010000
 8003830:	40000400 	.word	0x40000400
 8003834:	40000800 	.word	0x40000800
 8003838:	40000c00 	.word	0x40000c00
 800383c:	40014000 	.word	0x40014000
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800
 8003848:	0800cfa0 	.word	0x0800cfa0

0800384c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a3d      	ldr	r2, [pc, #244]	; (8003964 <HAL_TIM_Base_Start_IT+0x104>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d027      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x62>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387a:	d022      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x62>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a39      	ldr	r2, [pc, #228]	; (8003968 <HAL_TIM_Base_Start_IT+0x108>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01d      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x62>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a38      	ldr	r2, [pc, #224]	; (800396c <HAL_TIM_Base_Start_IT+0x10c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d018      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x62>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a36      	ldr	r2, [pc, #216]	; (8003970 <HAL_TIM_Base_Start_IT+0x110>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x62>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a35      	ldr	r2, [pc, #212]	; (8003974 <HAL_TIM_Base_Start_IT+0x114>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x62>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a33      	ldr	r2, [pc, #204]	; (8003978 <HAL_TIM_Base_Start_IT+0x118>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x62>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a32      	ldr	r2, [pc, #200]	; (800397c <HAL_TIM_Base_Start_IT+0x11c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x62>
 80038b8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80038bc:	4830      	ldr	r0, [pc, #192]	; (8003980 <HAL_TIM_Base_Start_IT+0x120>)
 80038be:	f7fd fc24 	bl	800110a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e044      	b.n	800395c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <HAL_TIM_Base_Start_IT+0x104>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d018      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0xc6>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d013      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0xc6>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_TIM_Base_Start_IT+0x108>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00e      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0xc6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_TIM_Base_Start_IT+0x10c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0xc6>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_TIM_Base_Start_IT+0x110>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0xc6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <HAL_TIM_Base_Start_IT+0x114>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d111      	bne.n	800394a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b06      	cmp	r3, #6
 8003936:	d010      	beq.n	800395a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003948:	e007      	b.n	800395a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40010000 	.word	0x40010000
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800
 8003970:	40000c00 	.word	0x40000c00
 8003974:	40014000 	.word	0x40014000
 8003978:	40014400 	.word	0x40014400
 800397c:	40014800 	.word	0x40014800
 8003980:	0800cfa0 	.word	0x0800cfa0

08003984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d122      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d11b      	bne.n	80039e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0202 	mvn.w	r2, #2
 80039b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8ee 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8e0 	bl	8003b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f8f1 	bl	8003bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d122      	bne.n	8003a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d11b      	bne.n	8003a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0204 	mvn.w	r2, #4
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f8c4 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8b6 	bl	8003b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f8c7 	bl	8003bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0208 	mvn.w	r2, #8
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f89a 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f88c 	bl	8003b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f89d 	bl	8003bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0210 	mvn.w	r2, #16
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f870 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f862 	bl	8003b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f873 	bl	8003bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d10e      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d107      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0201 	mvn.w	r2, #1
 8003b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd faea 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b80      	cmp	r3, #128	; 0x80
 8003b14:	d10e      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b20:	2b80      	cmp	r3, #128	; 0x80
 8003b22:	d107      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8e2 	bl	8003cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d10e      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d107      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f838 	bl	8003bd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d10e      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0220 	mvn.w	r2, #32
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8ac 	bl	8003ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a34      	ldr	r2, [pc, #208]	; (8003cc8 <TIM_Base_SetConfig+0xe4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00f      	beq.n	8003c1c <TIM_Base_SetConfig+0x38>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c02:	d00b      	beq.n	8003c1c <TIM_Base_SetConfig+0x38>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a31      	ldr	r2, [pc, #196]	; (8003ccc <TIM_Base_SetConfig+0xe8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_Base_SetConfig+0x38>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a30      	ldr	r2, [pc, #192]	; (8003cd0 <TIM_Base_SetConfig+0xec>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_Base_SetConfig+0x38>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a2f      	ldr	r2, [pc, #188]	; (8003cd4 <TIM_Base_SetConfig+0xf0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <TIM_Base_SetConfig+0xe4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01b      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3c:	d017      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a22      	ldr	r2, [pc, #136]	; (8003ccc <TIM_Base_SetConfig+0xe8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a21      	ldr	r2, [pc, #132]	; (8003cd0 <TIM_Base_SetConfig+0xec>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00f      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a20      	ldr	r2, [pc, #128]	; (8003cd4 <TIM_Base_SetConfig+0xf0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1f      	ldr	r2, [pc, #124]	; (8003cd8 <TIM_Base_SetConfig+0xf4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <TIM_Base_SetConfig+0xf8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <TIM_Base_SetConfig+0xfc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d108      	bne.n	8003c80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <TIM_Base_SetConfig+0xe4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d103      	bne.n	8003cb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	615a      	str	r2, [r3, #20]
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40000800 	.word	0x40000800
 8003cd4:	40000c00 	.word	0x40000c00
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800

08003ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e0a0      	b.n	8003e60 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02c      	beq.n	8003d80 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a4f      	ldr	r2, [pc, #316]	; (8003e68 <HAL_UART_Init+0x15c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00e      	beq.n	8003d4e <HAL_UART_Init+0x42>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a4d      	ldr	r2, [pc, #308]	; (8003e6c <HAL_UART_Init+0x160>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_UART_Init+0x42>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a4c      	ldr	r2, [pc, #304]	; (8003e70 <HAL_UART_Init+0x164>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_UART_Init+0x42>
 8003d44:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8003d48:	484a      	ldr	r0, [pc, #296]	; (8003e74 <HAL_UART_Init+0x168>)
 8003d4a:	f7fd f9de 	bl	800110a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d028      	beq.n	8003da8 <HAL_UART_Init+0x9c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5e:	d023      	beq.n	8003da8 <HAL_UART_Init+0x9c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d68:	d01e      	beq.n	8003da8 <HAL_UART_Init+0x9c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d72:	d019      	beq.n	8003da8 <HAL_UART_Init+0x9c>
 8003d74:	f240 1173 	movw	r1, #371	; 0x173
 8003d78:	483e      	ldr	r0, [pc, #248]	; (8003e74 <HAL_UART_Init+0x168>)
 8003d7a:	f7fd f9c6 	bl	800110a <assert_failed>
 8003d7e:	e013      	b.n	8003da8 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <HAL_UART_Init+0x15c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00e      	beq.n	8003da8 <HAL_UART_Init+0x9c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a37      	ldr	r2, [pc, #220]	; (8003e6c <HAL_UART_Init+0x160>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d009      	beq.n	8003da8 <HAL_UART_Init+0x9c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a35      	ldr	r2, [pc, #212]	; (8003e70 <HAL_UART_Init+0x164>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_UART_Init+0x9c>
 8003d9e:	f240 1177 	movw	r1, #375	; 0x177
 8003da2:	4834      	ldr	r0, [pc, #208]	; (8003e74 <HAL_UART_Init+0x168>)
 8003da4:	f7fd f9b1 	bl	800110a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <HAL_UART_Init+0xb8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db8:	d004      	beq.n	8003dc4 <HAL_UART_Init+0xb8>
 8003dba:	f240 1179 	movw	r1, #377	; 0x179
 8003dbe:	482d      	ldr	r0, [pc, #180]	; (8003e74 <HAL_UART_Init+0x168>)
 8003dc0:	f7fd f9a3 	bl	800110a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d009      	beq.n	8003de0 <HAL_UART_Init+0xd4>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd4:	d004      	beq.n	8003de0 <HAL_UART_Init+0xd4>
 8003dd6:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003dda:	4826      	ldr	r0, [pc, #152]	; (8003e74 <HAL_UART_Init+0x168>)
 8003ddc:	f7fd f995 	bl	800110a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7fd fb33 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2224      	movs	r2, #36	; 0x24
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e10:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fde2 	bl	80049dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e26:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e36:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e46:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40011000 	.word	0x40011000
 8003e6c:	40004400 	.word	0x40004400
 8003e70:	40011400 	.word	0x40011400
 8003e74:	0800cfd8 	.word	0x0800cfd8

08003e78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d17c      	bne.n	8003f92 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_UART_Transmit+0x2c>
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e075      	b.n	8003f94 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Transmit+0x3e>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e06e      	b.n	8003f94 <HAL_UART_Transmit+0x11c>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2221      	movs	r2, #33	; 0x21
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ecc:	f7fd fb78 	bl	80015c0 <HAL_GetTick>
 8003ed0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee6:	d108      	bne.n	8003efa <HAL_UART_Transmit+0x82>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	e003      	b.n	8003f02 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f0a:	e02a      	b.n	8003f62 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2180      	movs	r1, #128	; 0x80
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fb1e 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e036      	b.n	8003f94 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10b      	bne.n	8003f44 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f3a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	3302      	adds	r3, #2
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	e007      	b.n	8003f54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	3301      	adds	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1cf      	bne.n	8003f0c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2200      	movs	r2, #0
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 faee 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e006      	b.n	8003f94 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e000      	b.n	8003f94 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
  }
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d11d      	bne.n	8003ff2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_UART_Receive_IT+0x26>
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e016      	b.n	8003ff4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Receive_IT+0x38>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e00f      	b.n	8003ff4 <HAL_UART_Receive_IT+0x58>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fb23 	bl	8004634 <UART_Start_Receive_IT>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	e000      	b.n	8003ff4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ff2:	2302      	movs	r3, #2
  }
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b0ba      	sub	sp, #232	; 0xe8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800403a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_UART_IRQHandler+0x66>
 800404e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fc03 	bl	8004866 <UART_Receive_IT>
      return;
 8004060:	e256      	b.n	8004510 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80de 	beq.w	8004228 <HAL_UART_IRQHandler+0x22c>
 800406c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80d1 	beq.w	8004228 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_UART_IRQHandler+0xae>
 8004092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0201 	orr.w	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_UART_IRQHandler+0xd2>
 80040b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0202 	orr.w	r2, r3, #2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_UART_IRQHandler+0xf6>
 80040da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f043 0204 	orr.w	r2, r3, #4
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d011      	beq.n	8004122 <HAL_UART_IRQHandler+0x126>
 80040fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d105      	bne.n	8004116 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800410a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f043 0208 	orr.w	r2, r3, #8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 81ed 	beq.w	8004506 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800412c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_UART_IRQHandler+0x14e>
 8004138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fb8e 	bl	8004866 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <HAL_UART_IRQHandler+0x17a>
 800416e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d04f      	beq.n	8004216 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fa96 	bl	80046a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b40      	cmp	r3, #64	; 0x40
 8004188:	d141      	bne.n	800420e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3314      	adds	r3, #20
 80041b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1d9      	bne.n	800418a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d013      	beq.n	8004206 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	4a7d      	ldr	r2, [pc, #500]	; (80043d8 <HAL_UART_IRQHandler+0x3dc>)
 80041e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fd fb9a 	bl	8001924 <HAL_DMA_Abort_IT>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004200:	4610      	mov	r0, r2
 8004202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	e00e      	b.n	8004224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f990 	bl	800452c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420c:	e00a      	b.n	8004224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f98c 	bl	800452c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	e006      	b.n	8004224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f988 	bl	800452c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004222:	e170      	b.n	8004506 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	bf00      	nop
    return;
 8004226:	e16e      	b.n	8004506 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	2b01      	cmp	r3, #1
 800422e:	f040 814a 	bne.w	80044c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8143 	beq.w	80044c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 813c 	beq.w	80044c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426e:	2b40      	cmp	r3, #64	; 0x40
 8004270:	f040 80b4 	bne.w	80043dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004280:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8140 	beq.w	800450a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800428e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004292:	429a      	cmp	r2, r3
 8004294:	f080 8139 	bcs.w	800450a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800429e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042aa:	f000 8088 	beq.w	80043be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1d9      	bne.n	80042ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3314      	adds	r3, #20
 8004300:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800430a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3314      	adds	r3, #20
 800431a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800431e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004322:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004326:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e1      	bne.n	80042fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3314      	adds	r3, #20
 800433c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800435a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800435c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004360:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e3      	bne.n	8004336 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800438c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438e:	f023 0310 	bic.w	r3, r3, #16
 8004392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80043a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e3      	bne.n	800437c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fd fa43 	bl	8001844 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	4619      	mov	r1, r3
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f8b6 	bl	8004540 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043d4:	e099      	b.n	800450a <HAL_UART_IRQHandler+0x50e>
 80043d6:	bf00      	nop
 80043d8:	0800476f 	.word	0x0800476f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 808b 	beq.w	800450e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8086 	beq.w	800450e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004418:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004426:	647a      	str	r2, [r7, #68]	; 0x44
 8004428:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800442c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e3      	bne.n	8004402 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3314      	adds	r3, #20
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	623b      	str	r3, [r7, #32]
   return(result);
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800445e:	633a      	str	r2, [r7, #48]	; 0x30
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e3      	bne.n	800443a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0310 	bic.w	r3, r3, #16
 8004496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044a4:	61fa      	str	r2, [r7, #28]
 80044a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	69b9      	ldr	r1, [r7, #24]
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	617b      	str	r3, [r7, #20]
   return(result);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e3      	bne.n	8004480 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044bc:	4619      	mov	r1, r3
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f83e 	bl	8004540 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044c4:	e023      	b.n	800450e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_UART_IRQHandler+0x4ea>
 80044d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f959 	bl	8004796 <UART_Transmit_IT>
    return;
 80044e4:	e014      	b.n	8004510 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00e      	beq.n	8004510 <HAL_UART_IRQHandler+0x514>
 80044f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f999 	bl	8004836 <UART_EndTransmit_IT>
    return;
 8004504:	e004      	b.n	8004510 <HAL_UART_IRQHandler+0x514>
    return;
 8004506:	bf00      	nop
 8004508:	e002      	b.n	8004510 <HAL_UART_IRQHandler+0x514>
      return;
 800450a:	bf00      	nop
 800450c:	e000      	b.n	8004510 <HAL_UART_IRQHandler+0x514>
      return;
 800450e:	bf00      	nop
  }
}
 8004510:	37e8      	adds	r7, #232	; 0xe8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop

08004518 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b090      	sub	sp, #64	; 0x40
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004568:	e050      	b.n	800460c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004570:	d04c      	beq.n	800460c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <UART_WaitOnFlagUntilTimeout+0x30>
 8004578:	f7fd f822 	bl	80015c0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004584:	429a      	cmp	r2, r3
 8004586:	d241      	bcs.n	800460c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045a8:	637a      	str	r2, [r7, #52]	; 0x34
 80045aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e5      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3314      	adds	r3, #20
 80045c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	613b      	str	r3, [r7, #16]
   return(result);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3314      	adds	r3, #20
 80045da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045dc:	623a      	str	r2, [r7, #32]
 80045de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	69f9      	ldr	r1, [r7, #28]
 80045e2:	6a3a      	ldr	r2, [r7, #32]
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e5      	bne.n	80045bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e00f      	b.n	800462c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4013      	ands	r3, r2
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	429a      	cmp	r2, r3
 8004628:	d09f      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3740      	adds	r7, #64	; 0x40
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	88fa      	ldrh	r2, [r7, #6]
 8004652:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2222      	movs	r2, #34	; 0x22
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004678:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0201 	orr.w	r2, r2, #1
 8004688:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0220 	orr.w	r2, r2, #32
 8004698:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b095      	sub	sp, #84	; 0x54
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046d0:	643a      	str	r2, [r7, #64]	; 0x40
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e5      	bne.n	80046b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3314      	adds	r3, #20
 8004702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004704:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800470a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e5      	bne.n	80046e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	2b01      	cmp	r3, #1
 800471e:	d119      	bne.n	8004754 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f023 0310 	bic.w	r3, r3, #16
 8004736:	647b      	str	r3, [r7, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004740:	61ba      	str	r2, [r7, #24]
 8004742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	6979      	ldr	r1, [r7, #20]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	613b      	str	r3, [r7, #16]
   return(result);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e5      	bne.n	8004720 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004762:	bf00      	nop
 8004764:	3754      	adds	r7, #84	; 0x54
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7ff fecf 	bl	800452c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b21      	cmp	r3, #33	; 0x21
 80047a8:	d13e      	bne.n	8004828 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b2:	d114      	bne.n	80047de <UART_Transmit_IT+0x48>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d110      	bne.n	80047de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	1c9a      	adds	r2, r3, #2
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	621a      	str	r2, [r3, #32]
 80047dc:	e008      	b.n	80047f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	1c59      	adds	r1, r3, #1
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6211      	str	r1, [r2, #32]
 80047e8:	781a      	ldrb	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4619      	mov	r1, r3
 80047fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10f      	bne.n	8004824 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004812:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004822:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff fe5e 	bl	8004518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b08c      	sub	sp, #48	; 0x30
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b22      	cmp	r3, #34	; 0x22
 8004878:	f040 80ab 	bne.w	80049d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004884:	d117      	bne.n	80048b6 <UART_Receive_IT+0x50>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d113      	bne.n	80048b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	1c9a      	adds	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
 80048b4:	e026      	b.n	8004904 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c8:	d007      	beq.n	80048da <UART_Receive_IT+0x74>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <UART_Receive_IT+0x82>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e008      	b.n	80048fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29b      	uxth	r3, r3
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4619      	mov	r1, r3
 8004912:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004914:	2b00      	cmp	r3, #0
 8004916:	d15a      	bne.n	80049ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0220 	bic.w	r2, r2, #32
 8004926:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	2b01      	cmp	r3, #1
 8004956:	d135      	bne.n	80049c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	613b      	str	r3, [r7, #16]
   return(result);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f023 0310 	bic.w	r3, r3, #16
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	623a      	str	r2, [r7, #32]
 8004980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	69f9      	ldr	r1, [r7, #28]
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	61bb      	str	r3, [r7, #24]
   return(result);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b10      	cmp	r3, #16
 800499e:	d10a      	bne.n	80049b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff fdbf 	bl	8004540 <HAL_UARTEx_RxEventCallback>
 80049c2:	e002      	b.n	80049ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fc f8f1 	bl	8000bac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e002      	b.n	80049d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e000      	b.n	80049d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049d2:	2302      	movs	r3, #2
  }
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e0:	b09f      	sub	sp, #124	; 0x7c
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80049e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	4b9b      	ldr	r3, [pc, #620]	; (8004c58 <UART_SetConfig+0x27c>)
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d904      	bls.n	80049fa <UART_SetConfig+0x1e>
 80049f0:	f640 6156 	movw	r1, #3670	; 0xe56
 80049f4:	4899      	ldr	r0, [pc, #612]	; (8004c5c <UART_SetConfig+0x280>)
 80049f6:	f7fc fb88 	bl	800110a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80049fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <UART_SetConfig+0x3a>
 8004a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0a:	d004      	beq.n	8004a16 <UART_SetConfig+0x3a>
 8004a0c:	f640 6157 	movw	r1, #3671	; 0xe57
 8004a10:	4892      	ldr	r0, [pc, #584]	; (8004c5c <UART_SetConfig+0x280>)
 8004a12:	f7fc fb7a 	bl	800110a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00e      	beq.n	8004a3c <UART_SetConfig+0x60>
 8004a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d009      	beq.n	8004a3c <UART_SetConfig+0x60>
 8004a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a30:	d004      	beq.n	8004a3c <UART_SetConfig+0x60>
 8004a32:	f640 6158 	movw	r1, #3672	; 0xe58
 8004a36:	4889      	ldr	r0, [pc, #548]	; (8004c5c <UART_SetConfig+0x280>)
 8004a38:	f7fc fb67 	bl	800110a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3e:	695a      	ldr	r2, [r3, #20]
 8004a40:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <UART_SetConfig+0x76>
 8004a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <UART_SetConfig+0x80>
 8004a52:	f640 6159 	movw	r1, #3673	; 0xe59
 8004a56:	4881      	ldr	r0, [pc, #516]	; (8004c5c <UART_SetConfig+0x280>)
 8004a58:	f7fc fb57 	bl	800110a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a68:	68d9      	ldr	r1, [r3, #12]
 8004a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	ea40 0301 	orr.w	r3, r0, r1
 8004a72:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a96:	f021 010c 	bic.w	r1, r1, #12
 8004a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab0:	6999      	ldr	r1, [r3, #24]
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	ea40 0301 	orr.w	r3, r0, r1
 8004aba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4b67      	ldr	r3, [pc, #412]	; (8004c60 <UART_SetConfig+0x284>)
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d004      	beq.n	8004ad0 <UART_SetConfig+0xf4>
 8004ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b66      	ldr	r3, [pc, #408]	; (8004c64 <UART_SetConfig+0x288>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d103      	bne.n	8004ad8 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ad0:	f7fe f99c 	bl	8002e0c <HAL_RCC_GetPCLK2Freq>
 8004ad4:	6778      	str	r0, [r7, #116]	; 0x74
 8004ad6:	e002      	b.n	8004ade <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ad8:	f7fe f984 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 8004adc:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae6:	f040 80c1 	bne.w	8004c6c <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aec:	461c      	mov	r4, r3
 8004aee:	f04f 0500 	mov.w	r5, #0
 8004af2:	4622      	mov	r2, r4
 8004af4:	462b      	mov	r3, r5
 8004af6:	1891      	adds	r1, r2, r2
 8004af8:	6439      	str	r1, [r7, #64]	; 0x40
 8004afa:	415b      	adcs	r3, r3
 8004afc:	647b      	str	r3, [r7, #68]	; 0x44
 8004afe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b02:	1912      	adds	r2, r2, r4
 8004b04:	eb45 0303 	adc.w	r3, r5, r3
 8004b08:	f04f 0000 	mov.w	r0, #0
 8004b0c:	f04f 0100 	mov.w	r1, #0
 8004b10:	00d9      	lsls	r1, r3, #3
 8004b12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b16:	00d0      	lsls	r0, r2, #3
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	1911      	adds	r1, r2, r4
 8004b1e:	6639      	str	r1, [r7, #96]	; 0x60
 8004b20:	416b      	adcs	r3, r5
 8004b22:	667b      	str	r3, [r7, #100]	; 0x64
 8004b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	1891      	adds	r1, r2, r2
 8004b30:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b32:	415b      	adcs	r3, r3
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b36:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b3a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004b3e:	f7fb fba7 	bl	8000290 <__aeabi_uldivmod>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4b48      	ldr	r3, [pc, #288]	; (8004c68 <UART_SetConfig+0x28c>)
 8004b48:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	011e      	lsls	r6, r3, #4
 8004b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b52:	461c      	mov	r4, r3
 8004b54:	f04f 0500 	mov.w	r5, #0
 8004b58:	4622      	mov	r2, r4
 8004b5a:	462b      	mov	r3, r5
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	6339      	str	r1, [r7, #48]	; 0x30
 8004b60:	415b      	adcs	r3, r3
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34
 8004b64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b68:	1912      	adds	r2, r2, r4
 8004b6a:	eb45 0303 	adc.w	r3, r5, r3
 8004b6e:	f04f 0000 	mov.w	r0, #0
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	00d9      	lsls	r1, r3, #3
 8004b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b7c:	00d0      	lsls	r0, r2, #3
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	1911      	adds	r1, r2, r4
 8004b84:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b86:	416b      	adcs	r3, r5
 8004b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	1891      	adds	r1, r2, r2
 8004b96:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b98:	415b      	adcs	r3, r3
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ba0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ba4:	f7fb fb74 	bl	8000290 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <UART_SetConfig+0x28c>)
 8004bae:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2164      	movs	r1, #100	; 0x64
 8004bb6:	fb01 f303 	mul.w	r3, r1, r3
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	3332      	adds	r3, #50	; 0x32
 8004bc0:	4a29      	ldr	r2, [pc, #164]	; (8004c68 <UART_SetConfig+0x28c>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bce:	441e      	add	r6, r3
 8004bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f04f 0100 	mov.w	r1, #0
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	1894      	adds	r4, r2, r2
 8004bde:	623c      	str	r4, [r7, #32]
 8004be0:	415b      	adcs	r3, r3
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
 8004be4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004be8:	1812      	adds	r2, r2, r0
 8004bea:	eb41 0303 	adc.w	r3, r1, r3
 8004bee:	f04f 0400 	mov.w	r4, #0
 8004bf2:	f04f 0500 	mov.w	r5, #0
 8004bf6:	00dd      	lsls	r5, r3, #3
 8004bf8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bfc:	00d4      	lsls	r4, r2, #3
 8004bfe:	4622      	mov	r2, r4
 8004c00:	462b      	mov	r3, r5
 8004c02:	1814      	adds	r4, r2, r0
 8004c04:	653c      	str	r4, [r7, #80]	; 0x50
 8004c06:	414b      	adcs	r3, r1
 8004c08:	657b      	str	r3, [r7, #84]	; 0x54
 8004c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	1891      	adds	r1, r2, r2
 8004c16:	61b9      	str	r1, [r7, #24]
 8004c18:	415b      	adcs	r3, r3
 8004c1a:	61fb      	str	r3, [r7, #28]
 8004c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c20:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c24:	f7fb fb34 	bl	8000290 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <UART_SetConfig+0x28c>)
 8004c2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	2164      	movs	r1, #100	; 0x64
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	3332      	adds	r3, #50	; 0x32
 8004c40:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <UART_SetConfig+0x28c>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	f003 0207 	and.w	r2, r3, #7
 8004c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4432      	add	r2, r6
 8004c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c54:	e0c4      	b.n	8004de0 <UART_SetConfig+0x404>
 8004c56:	bf00      	nop
 8004c58:	00a037a0 	.word	0x00a037a0
 8004c5c:	0800cfd8 	.word	0x0800cfd8
 8004c60:	40011000 	.word	0x40011000
 8004c64:	40011400 	.word	0x40011400
 8004c68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c6e:	461c      	mov	r4, r3
 8004c70:	f04f 0500 	mov.w	r5, #0
 8004c74:	4622      	mov	r2, r4
 8004c76:	462b      	mov	r3, r5
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	6139      	str	r1, [r7, #16]
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c84:	1912      	adds	r2, r2, r4
 8004c86:	eb45 0303 	adc.w	r3, r5, r3
 8004c8a:	f04f 0000 	mov.w	r0, #0
 8004c8e:	f04f 0100 	mov.w	r1, #0
 8004c92:	00d9      	lsls	r1, r3, #3
 8004c94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c98:	00d0      	lsls	r0, r2, #3
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	eb12 0804 	adds.w	r8, r2, r4
 8004ca2:	eb43 0905 	adc.w	r9, r3, r5
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f04f 0100 	mov.w	r1, #0
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	008b      	lsls	r3, r1, #2
 8004cba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cbe:	0082      	lsls	r2, r0, #2
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	f7fb fae4 	bl	8000290 <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4b47      	ldr	r3, [pc, #284]	; (8004dec <UART_SetConfig+0x410>)
 8004cce:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	011e      	lsls	r6, r3, #4
 8004cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f04f 0100 	mov.w	r1, #0
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	1894      	adds	r4, r2, r2
 8004ce4:	60bc      	str	r4, [r7, #8]
 8004ce6:	415b      	adcs	r3, r3
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cee:	1812      	adds	r2, r2, r0
 8004cf0:	eb41 0303 	adc.w	r3, r1, r3
 8004cf4:	f04f 0400 	mov.w	r4, #0
 8004cf8:	f04f 0500 	mov.w	r5, #0
 8004cfc:	00dd      	lsls	r5, r3, #3
 8004cfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d02:	00d4      	lsls	r4, r2, #3
 8004d04:	4622      	mov	r2, r4
 8004d06:	462b      	mov	r3, r5
 8004d08:	1814      	adds	r4, r2, r0
 8004d0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f04f 0100 	mov.w	r1, #0
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	008b      	lsls	r3, r1, #2
 8004d24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d28:	0082      	lsls	r2, r0, #2
 8004d2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d2e:	f7fb faaf 	bl	8000290 <__aeabi_uldivmod>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4b2d      	ldr	r3, [pc, #180]	; (8004dec <UART_SetConfig+0x410>)
 8004d38:	fba3 1302 	umull	r1, r3, r3, r2
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	2164      	movs	r1, #100	; 0x64
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	3332      	adds	r3, #50	; 0x32
 8004d4a:	4a28      	ldr	r2, [pc, #160]	; (8004dec <UART_SetConfig+0x410>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d56:	441e      	add	r6, r3
 8004d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f04f 0100 	mov.w	r1, #0
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	1894      	adds	r4, r2, r2
 8004d66:	603c      	str	r4, [r7, #0]
 8004d68:	415b      	adcs	r3, r3
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d70:	1812      	adds	r2, r2, r0
 8004d72:	eb41 0303 	adc.w	r3, r1, r3
 8004d76:	f04f 0400 	mov.w	r4, #0
 8004d7a:	f04f 0500 	mov.w	r5, #0
 8004d7e:	00dd      	lsls	r5, r3, #3
 8004d80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d84:	00d4      	lsls	r4, r2, #3
 8004d86:	4622      	mov	r2, r4
 8004d88:	462b      	mov	r3, r5
 8004d8a:	eb12 0a00 	adds.w	sl, r2, r0
 8004d8e:	eb43 0b01 	adc.w	fp, r3, r1
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f04f 0100 	mov.w	r1, #0
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	008b      	lsls	r3, r1, #2
 8004da6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004daa:	0082      	lsls	r2, r0, #2
 8004dac:	4650      	mov	r0, sl
 8004dae:	4659      	mov	r1, fp
 8004db0:	f7fb fa6e 	bl	8000290 <__aeabi_uldivmod>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <UART_SetConfig+0x410>)
 8004dba:	fba3 1302 	umull	r1, r3, r3, r2
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2164      	movs	r1, #100	; 0x64
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	3332      	adds	r3, #50	; 0x32
 8004dcc:	4a07      	ldr	r2, [pc, #28]	; (8004dec <UART_SetConfig+0x410>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	f003 020f 	and.w	r2, r3, #15
 8004dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4432      	add	r2, r6
 8004dde:	609a      	str	r2, [r3, #8]
}
 8004de0:	bf00      	nop
 8004de2:	377c      	adds	r7, #124	; 0x7c
 8004de4:	46bd      	mov	sp, r7
 8004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dea:	bf00      	nop
 8004dec:	51eb851f 	.word	0x51eb851f

08004df0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004df4:	4904      	ldr	r1, [pc, #16]	; (8004e08 <MX_FATFS_Init+0x18>)
 8004df6:	4805      	ldr	r0, [pc, #20]	; (8004e0c <MX_FATFS_Init+0x1c>)
 8004df8:	f003 fa40 	bl	800827c <FATFS_LinkDriver>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <MX_FATFS_Init+0x20>)
 8004e02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004e04:	bf00      	nop
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20005294 	.word	0x20005294
 8004e0c:	2000000c 	.word	0x2000000c
 8004e10:	20005298 	.word	0x20005298

08004e14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004e18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 f9d9 	bl	80051e8 <USER_SPI_initialize>
 8004e36:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fab7 	bl	80053c0 <USER_SPI_status>
 8004e52:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4603      	mov	r3, r0
 8004e6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8004e6c:	7bf8      	ldrb	r0, [r7, #15]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	f000 faba 	bl	80053ec <USER_SPI_read>
 8004e78:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004e92:	7bf8      	ldrb	r0, [r7, #15]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	f000 fb0d 	bl	80054b8 <USER_SPI_write>
 8004e9e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	603a      	str	r2, [r7, #0]
 8004eb2:	71fb      	strb	r3, [r7, #7]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004eb8:	79b9      	ldrb	r1, [r7, #6]
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fb76 	bl	80055b0 <USER_SPI_ioctl>
 8004ec4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004ed8:	f7fc fb72 	bl	80015c0 <HAL_GetTick>
 8004edc:	4603      	mov	r3, r0
 8004ede:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <SPI_Timer_On+0x20>)
 8004ee0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004ee2:	4a04      	ldr	r2, [pc, #16]	; (8004ef4 <SPI_Timer_On+0x24>)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6013      	str	r3, [r2, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20005700 	.word	0x20005700
 8004ef4:	20005704 	.word	0x20005704

08004ef8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004efc:	f7fc fb60 	bl	80015c0 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <SPI_Timer_Status+0x24>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	1ad2      	subs	r2, r2, r3
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <SPI_Timer_Status+0x28>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	bf34      	ite	cc
 8004f10:	2301      	movcc	r3, #1
 8004f12:	2300      	movcs	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20005700 	.word	0x20005700
 8004f20:	20005704 	.word	0x20005704

08004f24 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004f2e:	f107 020f 	add.w	r2, r7, #15
 8004f32:	1df9      	adds	r1, r7, #7
 8004f34:	2332      	movs	r3, #50	; 0x32
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4804      	ldr	r0, [pc, #16]	; (8004f4c <xchg_spi+0x28>)
 8004f3c:	f7fe f948 	bl	80031d0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200051ac 	.word	0x200051ac

08004f50 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	e00a      	b.n	8004f76 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	18d4      	adds	r4, r2, r3
 8004f66:	20ff      	movs	r0, #255	; 0xff
 8004f68:	f7ff ffdc 	bl	8004f24 <xchg_spi>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d3f0      	bcc.n	8004f60 <rcvr_spi_multi+0x10>
	}
}
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd90      	pop	{r4, r7, pc}

08004f88 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e009      	b.n	8004fac <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ffbf 	bl	8004f24 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3f1      	bcc.n	8004f98 <xmit_spi_multi+0x10>
	}
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004fc6:	f7fc fafb 	bl	80015c0 <HAL_GetTick>
 8004fca:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004fd0:	20ff      	movs	r0, #255	; 0xff
 8004fd2:	f7ff ffa7 	bl	8004f24 <xchg_spi>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	2bff      	cmp	r3, #255	; 0xff
 8004fde:	d007      	beq.n	8004ff0 <wait_ready+0x32>
 8004fe0:	f7fc faee 	bl	80015c0 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d8ef      	bhi.n	8004fd0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	2bff      	cmp	r3, #255	; 0xff
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	2300      	movne	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005008:	2201      	movs	r2, #1
 800500a:	2102      	movs	r1, #2
 800500c:	4803      	ldr	r0, [pc, #12]	; (800501c <despiselect+0x18>)
 800500e:	f7fc ff47 	bl	8001ea0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005012:	20ff      	movs	r0, #255	; 0xff
 8005014:	f7ff ff86 	bl	8004f24 <xchg_spi>

}
 8005018:	bf00      	nop
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40020400 	.word	0x40020400

08005020 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005024:	2200      	movs	r2, #0
 8005026:	2102      	movs	r1, #2
 8005028:	4809      	ldr	r0, [pc, #36]	; (8005050 <spiselect+0x30>)
 800502a:	f7fc ff39 	bl	8001ea0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800502e:	20ff      	movs	r0, #255	; 0xff
 8005030:	f7ff ff78 	bl	8004f24 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005038:	f7ff ffc1 	bl	8004fbe <wait_ready>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <spiselect+0x26>
 8005042:	2301      	movs	r3, #1
 8005044:	e002      	b.n	800504c <spiselect+0x2c>

	despiselect();
 8005046:	f7ff ffdd 	bl	8005004 <despiselect>
	return 0;	/* Timeout */
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40020400 	.word	0x40020400

08005054 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800505e:	20c8      	movs	r0, #200	; 0xc8
 8005060:	f7ff ff36 	bl	8004ed0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005064:	20ff      	movs	r0, #255	; 0xff
 8005066:	f7ff ff5d 	bl	8004f24 <xchg_spi>
 800506a:	4603      	mov	r3, r0
 800506c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2bff      	cmp	r3, #255	; 0xff
 8005072:	d104      	bne.n	800507e <rcvr_datablock+0x2a>
 8005074:	f7ff ff40 	bl	8004ef8 <SPI_Timer_Status>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f2      	bne.n	8005064 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	2bfe      	cmp	r3, #254	; 0xfe
 8005082:	d001      	beq.n	8005088 <rcvr_datablock+0x34>
 8005084:	2300      	movs	r3, #0
 8005086:	e00a      	b.n	800509e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff ff60 	bl	8004f50 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005090:	20ff      	movs	r0, #255	; 0xff
 8005092:	f7ff ff47 	bl	8004f24 <xchg_spi>
 8005096:	20ff      	movs	r0, #255	; 0xff
 8005098:	f7ff ff44 	bl	8004f24 <xchg_spi>

	return 1;						/* Function succeeded */
 800509c:	2301      	movs	r3, #1
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80050b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050b6:	f7ff ff82 	bl	8004fbe <wait_ready>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <xmit_datablock+0x1e>
 80050c0:	2300      	movs	r3, #0
 80050c2:	e01e      	b.n	8005102 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff ff2c 	bl	8004f24 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	2bfd      	cmp	r3, #253	; 0xfd
 80050d0:	d016      	beq.n	8005100 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80050d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff ff56 	bl	8004f88 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80050dc:	20ff      	movs	r0, #255	; 0xff
 80050de:	f7ff ff21 	bl	8004f24 <xchg_spi>
 80050e2:	20ff      	movs	r0, #255	; 0xff
 80050e4:	f7ff ff1e 	bl	8004f24 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80050e8:	20ff      	movs	r0, #255	; 0xff
 80050ea:	f7ff ff1b 	bl	8004f24 <xchg_spi>
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	f003 031f 	and.w	r3, r3, #31
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d001      	beq.n	8005100 <xmit_datablock+0x5a>
 80050fc:	2300      	movs	r3, #0
 80050fe:	e000      	b.n	8005102 <xmit_datablock+0x5c>
	}
	return 1;
 8005100:	2301      	movs	r3, #1
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	4603      	mov	r3, r0
 8005112:	6039      	str	r1, [r7, #0]
 8005114:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511a:	2b00      	cmp	r3, #0
 800511c:	da0e      	bge.n	800513c <send_cmd+0x32>
		cmd &= 0x7F;
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005124:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005126:	2100      	movs	r1, #0
 8005128:	2037      	movs	r0, #55	; 0x37
 800512a:	f7ff ffee 	bl	800510a <send_cmd>
 800512e:	4603      	mov	r3, r0
 8005130:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005132:	7bbb      	ldrb	r3, [r7, #14]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d901      	bls.n	800513c <send_cmd+0x32>
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	e051      	b.n	80051e0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	2b0c      	cmp	r3, #12
 8005140:	d008      	beq.n	8005154 <send_cmd+0x4a>
		despiselect();
 8005142:	f7ff ff5f 	bl	8005004 <despiselect>
		if (!spiselect()) return 0xFF;
 8005146:	f7ff ff6b 	bl	8005020 <spiselect>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <send_cmd+0x4a>
 8005150:	23ff      	movs	r3, #255	; 0xff
 8005152:	e045      	b.n	80051e0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800515a:	b2db      	uxtb	r3, r3
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fee1 	bl	8004f24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	0e1b      	lsrs	r3, r3, #24
 8005166:	b2db      	uxtb	r3, r3
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff fedb 	bl	8004f24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	b2db      	uxtb	r3, r3
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fed5 	bl	8004f24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	0a1b      	lsrs	r3, r3, #8
 800517e:	b2db      	uxtb	r3, r3
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fecf 	bl	8004f24 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff feca 	bl	8004f24 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <send_cmd+0x94>
 800519a:	2395      	movs	r3, #149	; 0x95
 800519c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d101      	bne.n	80051a8 <send_cmd+0x9e>
 80051a4:	2387      	movs	r3, #135	; 0x87
 80051a6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff feba 	bl	8004f24 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	2b0c      	cmp	r3, #12
 80051b4:	d102      	bne.n	80051bc <send_cmd+0xb2>
 80051b6:	20ff      	movs	r0, #255	; 0xff
 80051b8:	f7ff feb4 	bl	8004f24 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80051bc:	230a      	movs	r3, #10
 80051be:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80051c0:	20ff      	movs	r0, #255	; 0xff
 80051c2:	f7ff feaf 	bl	8004f24 <xchg_spi>
 80051c6:	4603      	mov	r3, r0
 80051c8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80051ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	da05      	bge.n	80051de <send_cmd+0xd4>
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80051de:	7bbb      	ldrb	r3, [r7, #14]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <USER_SPI_initialize+0x14>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0d6      	b.n	80053aa <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80051fc:	4b6d      	ldr	r3, [pc, #436]	; (80053b4 <USER_SPI_initialize+0x1cc>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <USER_SPI_initialize+0x2a>
 800520a:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <USER_SPI_initialize+0x1cc>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	e0cb      	b.n	80053aa <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8005212:	4b69      	ldr	r3, [pc, #420]	; (80053b8 <USER_SPI_initialize+0x1d0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800521c:	4b66      	ldr	r3, [pc, #408]	; (80053b8 <USER_SPI_initialize+0x1d0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8005224:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005226:	230a      	movs	r3, #10
 8005228:	73fb      	strb	r3, [r7, #15]
 800522a:	e005      	b.n	8005238 <USER_SPI_initialize+0x50>
 800522c:	20ff      	movs	r0, #255	; 0xff
 800522e:	f7ff fe79 	bl	8004f24 <xchg_spi>
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	3b01      	subs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f6      	bne.n	800522c <USER_SPI_initialize+0x44>

	ty = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005242:	2100      	movs	r1, #0
 8005244:	2000      	movs	r0, #0
 8005246:	f7ff ff60 	bl	800510a <send_cmd>
 800524a:	4603      	mov	r3, r0
 800524c:	2b01      	cmp	r3, #1
 800524e:	f040 808b 	bne.w	8005368 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005256:	f7ff fe3b 	bl	8004ed0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800525a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800525e:	2008      	movs	r0, #8
 8005260:	f7ff ff53 	bl	800510a <send_cmd>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d151      	bne.n	800530e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800526a:	2300      	movs	r3, #0
 800526c:	73fb      	strb	r3, [r7, #15]
 800526e:	e00d      	b.n	800528c <USER_SPI_initialize+0xa4>
 8005270:	7bfc      	ldrb	r4, [r7, #15]
 8005272:	20ff      	movs	r0, #255	; 0xff
 8005274:	f7ff fe56 	bl	8004f24 <xchg_spi>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	f107 0310 	add.w	r3, r7, #16
 8005280:	4423      	add	r3, r4
 8005282:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	3301      	adds	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d9ee      	bls.n	8005270 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005292:	7abb      	ldrb	r3, [r7, #10]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d167      	bne.n	8005368 <USER_SPI_initialize+0x180>
 8005298:	7afb      	ldrb	r3, [r7, #11]
 800529a:	2baa      	cmp	r3, #170	; 0xaa
 800529c:	d164      	bne.n	8005368 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800529e:	bf00      	nop
 80052a0:	f7ff fe2a 	bl	8004ef8 <SPI_Timer_Status>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <USER_SPI_initialize+0xd2>
 80052aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80052ae:	20a9      	movs	r0, #169	; 0xa9
 80052b0:	f7ff ff2b 	bl	800510a <send_cmd>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f2      	bne.n	80052a0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80052ba:	f7ff fe1d 	bl	8004ef8 <SPI_Timer_Status>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d051      	beq.n	8005368 <USER_SPI_initialize+0x180>
 80052c4:	2100      	movs	r1, #0
 80052c6:	203a      	movs	r0, #58	; 0x3a
 80052c8:	f7ff ff1f 	bl	800510a <send_cmd>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d14a      	bne.n	8005368 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
 80052d6:	e00d      	b.n	80052f4 <USER_SPI_initialize+0x10c>
 80052d8:	7bfc      	ldrb	r4, [r7, #15]
 80052da:	20ff      	movs	r0, #255	; 0xff
 80052dc:	f7ff fe22 	bl	8004f24 <xchg_spi>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	f107 0310 	add.w	r3, r7, #16
 80052e8:	4423      	add	r3, r4
 80052ea:	f803 2c08 	strb.w	r2, [r3, #-8]
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	3301      	adds	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d9ee      	bls.n	80052d8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80052fa:	7a3b      	ldrb	r3, [r7, #8]
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <USER_SPI_initialize+0x120>
 8005304:	230c      	movs	r3, #12
 8005306:	e000      	b.n	800530a <USER_SPI_initialize+0x122>
 8005308:	2304      	movs	r3, #4
 800530a:	737b      	strb	r3, [r7, #13]
 800530c:	e02c      	b.n	8005368 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800530e:	2100      	movs	r1, #0
 8005310:	20a9      	movs	r0, #169	; 0xa9
 8005312:	f7ff fefa 	bl	800510a <send_cmd>
 8005316:	4603      	mov	r3, r0
 8005318:	2b01      	cmp	r3, #1
 800531a:	d804      	bhi.n	8005326 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800531c:	2302      	movs	r3, #2
 800531e:	737b      	strb	r3, [r7, #13]
 8005320:	23a9      	movs	r3, #169	; 0xa9
 8005322:	73bb      	strb	r3, [r7, #14]
 8005324:	e003      	b.n	800532e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005326:	2301      	movs	r3, #1
 8005328:	737b      	strb	r3, [r7, #13]
 800532a:	2301      	movs	r3, #1
 800532c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800532e:	bf00      	nop
 8005330:	f7ff fde2 	bl	8004ef8 <SPI_Timer_Status>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <USER_SPI_initialize+0x162>
 800533a:	7bbb      	ldrb	r3, [r7, #14]
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff fee3 	bl	800510a <send_cmd>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f2      	bne.n	8005330 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800534a:	f7ff fdd5 	bl	8004ef8 <SPI_Timer_Status>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <USER_SPI_initialize+0x17c>
 8005354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005358:	2010      	movs	r0, #16
 800535a:	f7ff fed6 	bl	800510a <send_cmd>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <USER_SPI_initialize+0x180>
				ty = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005368:	4a14      	ldr	r2, [pc, #80]	; (80053bc <USER_SPI_initialize+0x1d4>)
 800536a:	7b7b      	ldrb	r3, [r7, #13]
 800536c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800536e:	f7ff fe49 	bl	8005004 <despiselect>

	if (ty) {			/* OK */
 8005372:	7b7b      	ldrb	r3, [r7, #13]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d012      	beq.n	800539e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <USER_SPI_initialize+0x1d0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005382:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <USER_SPI_initialize+0x1d0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0210 	orr.w	r2, r2, #16
 800538a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800538c:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <USER_SPI_initialize+0x1cc>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f023 0301 	bic.w	r3, r3, #1
 8005396:	b2da      	uxtb	r2, r3
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <USER_SPI_initialize+0x1cc>)
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e002      	b.n	80053a4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <USER_SPI_initialize+0x1cc>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <USER_SPI_initialize+0x1cc>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	b2db      	uxtb	r3, r3
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd90      	pop	{r4, r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000020 	.word	0x20000020
 80053b8:	200051ac 	.word	0x200051ac
 80053bc:	200002ac 	.word	0x200002ac

080053c0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <USER_SPI_status+0x14>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e002      	b.n	80053da <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80053d4:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <USER_SPI_status+0x28>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000020 	.word	0x20000020

080053ec <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	4603      	mov	r3, r0
 80053fa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d102      	bne.n	8005408 <USER_SPI_read+0x1c>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <USER_SPI_read+0x20>
 8005408:	2304      	movs	r3, #4
 800540a:	e04d      	b.n	80054a8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800540c:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <USER_SPI_read+0xc4>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <USER_SPI_read+0x32>
 800541a:	2303      	movs	r3, #3
 800541c:	e044      	b.n	80054a8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800541e:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <USER_SPI_read+0xc8>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d102      	bne.n	8005430 <USER_SPI_read+0x44>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	025b      	lsls	r3, r3, #9
 800542e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d111      	bne.n	800545a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	2011      	movs	r0, #17
 800543a:	f7ff fe66 	bl	800510a <send_cmd>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d129      	bne.n	8005498 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005448:	68b8      	ldr	r0, [r7, #8]
 800544a:	f7ff fe03 	bl	8005054 <rcvr_datablock>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d021      	beq.n	8005498 <USER_SPI_read+0xac>
			count = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	e01e      	b.n	8005498 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	2012      	movs	r0, #18
 800545e:	f7ff fe54 	bl	800510a <send_cmd>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d117      	bne.n	8005498 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800546c:	68b8      	ldr	r0, [r7, #8]
 800546e:	f7ff fdf1 	bl	8005054 <rcvr_datablock>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <USER_SPI_read+0xa2>
				buff += 512;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800547e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	3b01      	subs	r3, #1
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1ed      	bne.n	8005468 <USER_SPI_read+0x7c>
 800548c:	e000      	b.n	8005490 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800548e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005490:	2100      	movs	r1, #0
 8005492:	200c      	movs	r0, #12
 8005494:	f7ff fe39 	bl	800510a <send_cmd>
		}
	}
	despiselect();
 8005498:	f7ff fdb4 	bl	8005004 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bf14      	ite	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	2300      	moveq	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000020 	.word	0x20000020
 80054b4:	200002ac 	.word	0x200002ac

080054b8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	4603      	mov	r3, r0
 80054c6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d102      	bne.n	80054d4 <USER_SPI_write+0x1c>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <USER_SPI_write+0x20>
 80054d4:	2304      	movs	r3, #4
 80054d6:	e063      	b.n	80055a0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80054d8:	4b33      	ldr	r3, [pc, #204]	; (80055a8 <USER_SPI_write+0xf0>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <USER_SPI_write+0x32>
 80054e6:	2303      	movs	r3, #3
 80054e8:	e05a      	b.n	80055a0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80054ea:	4b2f      	ldr	r3, [pc, #188]	; (80055a8 <USER_SPI_write+0xf0>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <USER_SPI_write+0x44>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e051      	b.n	80055a0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80054fc:	4b2b      	ldr	r3, [pc, #172]	; (80055ac <USER_SPI_write+0xf4>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <USER_SPI_write+0x56>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	025b      	lsls	r3, r3, #9
 800550c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d110      	bne.n	8005536 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	2018      	movs	r0, #24
 8005518:	f7ff fdf7 	bl	800510a <send_cmd>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d136      	bne.n	8005590 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8005522:	21fe      	movs	r1, #254	; 0xfe
 8005524:	68b8      	ldr	r0, [r7, #8]
 8005526:	f7ff fdbe 	bl	80050a6 <xmit_datablock>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d02f      	beq.n	8005590 <USER_SPI_write+0xd8>
			count = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	e02c      	b.n	8005590 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005536:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <USER_SPI_write+0xf4>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	f003 0306 	and.w	r3, r3, #6
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <USER_SPI_write+0x92>
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	2097      	movs	r0, #151	; 0x97
 8005546:	f7ff fde0 	bl	800510a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	2019      	movs	r0, #25
 800554e:	f7ff fddc 	bl	800510a <send_cmd>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11b      	bne.n	8005590 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005558:	21fc      	movs	r1, #252	; 0xfc
 800555a:	68b8      	ldr	r0, [r7, #8]
 800555c:	f7ff fda3 	bl	80050a6 <xmit_datablock>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <USER_SPI_write+0xc4>
				buff += 512;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800556c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	3b01      	subs	r3, #1
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1ee      	bne.n	8005558 <USER_SPI_write+0xa0>
 800557a:	e000      	b.n	800557e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800557c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800557e:	21fd      	movs	r1, #253	; 0xfd
 8005580:	2000      	movs	r0, #0
 8005582:	f7ff fd90 	bl	80050a6 <xmit_datablock>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <USER_SPI_write+0xd8>
 800558c:	2301      	movs	r3, #1
 800558e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005590:	f7ff fd38 	bl	8005004 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000020 	.word	0x20000020
 80055ac:	200002ac 	.word	0x200002ac

080055b0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08c      	sub	sp, #48	; 0x30
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	603a      	str	r2, [r7, #0]
 80055ba:	71fb      	strb	r3, [r7, #7]
 80055bc:	460b      	mov	r3, r1
 80055be:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <USER_SPI_ioctl+0x1a>
 80055c6:	2304      	movs	r3, #4
 80055c8:	e15a      	b.n	8005880 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80055ca:	4baf      	ldr	r3, [pc, #700]	; (8005888 <USER_SPI_ioctl+0x2d8>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <USER_SPI_ioctl+0x2c>
 80055d8:	2303      	movs	r3, #3
 80055da:	e151      	b.n	8005880 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80055e2:	79bb      	ldrb	r3, [r7, #6]
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	f200 8136 	bhi.w	8005856 <USER_SPI_ioctl+0x2a6>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <USER_SPI_ioctl+0x40>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005605 	.word	0x08005605
 80055f4:	08005619 	.word	0x08005619
 80055f8:	08005857 	.word	0x08005857
 80055fc:	080056c5 	.word	0x080056c5
 8005600:	080057bb 	.word	0x080057bb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005604:	f7ff fd0c 	bl	8005020 <spiselect>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8127 	beq.w	800585e <USER_SPI_ioctl+0x2ae>
 8005610:	2300      	movs	r3, #0
 8005612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005616:	e122      	b.n	800585e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005618:	2100      	movs	r1, #0
 800561a:	2009      	movs	r0, #9
 800561c:	f7ff fd75 	bl	800510a <send_cmd>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 811d 	bne.w	8005862 <USER_SPI_ioctl+0x2b2>
 8005628:	f107 030c 	add.w	r3, r7, #12
 800562c:	2110      	movs	r1, #16
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fd10 	bl	8005054 <rcvr_datablock>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8113 	beq.w	8005862 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800563c:	7b3b      	ldrb	r3, [r7, #12]
 800563e:	099b      	lsrs	r3, r3, #6
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b01      	cmp	r3, #1
 8005644:	d111      	bne.n	800566a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8005646:	7d7b      	ldrb	r3, [r7, #21]
 8005648:	461a      	mov	r2, r3
 800564a:	7d3b      	ldrb	r3, [r7, #20]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	4413      	add	r3, r2
 8005650:	461a      	mov	r2, r3
 8005652:	7cfb      	ldrb	r3, [r7, #19]
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800565a:	4413      	add	r3, r2
 800565c:	3301      	adds	r3, #1
 800565e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	029a      	lsls	r2, r3, #10
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e028      	b.n	80056bc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800566a:	7c7b      	ldrb	r3, [r7, #17]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	b2da      	uxtb	r2, r3
 8005672:	7dbb      	ldrb	r3, [r7, #22]
 8005674:	09db      	lsrs	r3, r3, #7
 8005676:	b2db      	uxtb	r3, r3
 8005678:	4413      	add	r3, r2
 800567a:	b2da      	uxtb	r2, r3
 800567c:	7d7b      	ldrb	r3, [r7, #21]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	f003 0306 	and.w	r3, r3, #6
 8005686:	b2db      	uxtb	r3, r3
 8005688:	4413      	add	r3, r2
 800568a:	b2db      	uxtb	r3, r3
 800568c:	3302      	adds	r3, #2
 800568e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005692:	7d3b      	ldrb	r3, [r7, #20]
 8005694:	099b      	lsrs	r3, r3, #6
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	7cfb      	ldrb	r3, [r7, #19]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	7cbb      	ldrb	r3, [r7, #18]
 80056a2:	029b      	lsls	r3, r3, #10
 80056a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056a8:	4413      	add	r3, r2
 80056aa:	3301      	adds	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80056ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056b2:	3b09      	subs	r3, #9
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	409a      	lsls	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80056c2:	e0ce      	b.n	8005862 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80056c4:	4b71      	ldr	r3, [pc, #452]	; (800588c <USER_SPI_ioctl+0x2dc>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d031      	beq.n	8005734 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80056d0:	2100      	movs	r1, #0
 80056d2:	208d      	movs	r0, #141	; 0x8d
 80056d4:	f7ff fd19 	bl	800510a <send_cmd>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 80c3 	bne.w	8005866 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80056e0:	20ff      	movs	r0, #255	; 0xff
 80056e2:	f7ff fc1f 	bl	8004f24 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80056e6:	f107 030c 	add.w	r3, r7, #12
 80056ea:	2110      	movs	r1, #16
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff fcb1 	bl	8005054 <rcvr_datablock>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80b6 	beq.w	8005866 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80056fa:	2330      	movs	r3, #48	; 0x30
 80056fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005700:	e007      	b.n	8005712 <USER_SPI_ioctl+0x162>
 8005702:	20ff      	movs	r0, #255	; 0xff
 8005704:	f7ff fc0e 	bl	8004f24 <xchg_spi>
 8005708:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800570c:	3b01      	subs	r3, #1
 800570e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005712:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f3      	bne.n	8005702 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800571a:	7dbb      	ldrb	r3, [r7, #22]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	2310      	movs	r3, #16
 8005724:	fa03 f202 	lsl.w	r2, r3, r2
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8005732:	e098      	b.n	8005866 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8005734:	2100      	movs	r1, #0
 8005736:	2009      	movs	r0, #9
 8005738:	f7ff fce7 	bl	800510a <send_cmd>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	f040 8091 	bne.w	8005866 <USER_SPI_ioctl+0x2b6>
 8005744:	f107 030c 	add.w	r3, r7, #12
 8005748:	2110      	movs	r1, #16
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff fc82 	bl	8005054 <rcvr_datablock>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8087 	beq.w	8005866 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005758:	4b4c      	ldr	r3, [pc, #304]	; (800588c <USER_SPI_ioctl+0x2dc>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d012      	beq.n	800578a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005764:	7dbb      	ldrb	r3, [r7, #22]
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800576c:	7dfa      	ldrb	r2, [r7, #23]
 800576e:	09d2      	lsrs	r2, r2, #7
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	4413      	add	r3, r2
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	7e7b      	ldrb	r3, [r7, #25]
 8005778:	099b      	lsrs	r3, r3, #6
 800577a:	b2db      	uxtb	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	461a      	mov	r2, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e013      	b.n	80057b2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800578a:	7dbb      	ldrb	r3, [r7, #22]
 800578c:	109b      	asrs	r3, r3, #2
 800578e:	b29b      	uxth	r3, r3
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	3301      	adds	r3, #1
 8005796:	7dfa      	ldrb	r2, [r7, #23]
 8005798:	00d2      	lsls	r2, r2, #3
 800579a:	f002 0218 	and.w	r2, r2, #24
 800579e:	7df9      	ldrb	r1, [r7, #23]
 80057a0:	0949      	lsrs	r1, r1, #5
 80057a2:	b2c9      	uxtb	r1, r1
 80057a4:	440a      	add	r2, r1
 80057a6:	3201      	adds	r2, #1
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80057b8:	e055      	b.n	8005866 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80057ba:	4b34      	ldr	r3, [pc, #208]	; (800588c <USER_SPI_ioctl+0x2dc>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	f003 0306 	and.w	r3, r3, #6
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d051      	beq.n	800586a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80057c6:	f107 020c 	add.w	r2, r7, #12
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	210b      	movs	r1, #11
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff feee 	bl	80055b0 <USER_SPI_ioctl>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d149      	bne.n	800586e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80057da:	7b3b      	ldrb	r3, [r7, #12]
 80057dc:	099b      	lsrs	r3, r3, #6
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <USER_SPI_ioctl+0x23e>
 80057e4:	7dbb      	ldrb	r3, [r7, #22]
 80057e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d041      	beq.n	8005872 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	623b      	str	r3, [r7, #32]
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80057fe:	4b23      	ldr	r3, [pc, #140]	; (800588c <USER_SPI_ioctl+0x2dc>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	025b      	lsls	r3, r3, #9
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	025b      	lsls	r3, r3, #9
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005818:	2020      	movs	r0, #32
 800581a:	f7ff fc76 	bl	800510a <send_cmd>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d128      	bne.n	8005876 <USER_SPI_ioctl+0x2c6>
 8005824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005826:	2021      	movs	r0, #33	; 0x21
 8005828:	f7ff fc6f 	bl	800510a <send_cmd>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d121      	bne.n	8005876 <USER_SPI_ioctl+0x2c6>
 8005832:	2100      	movs	r1, #0
 8005834:	2026      	movs	r0, #38	; 0x26
 8005836:	f7ff fc68 	bl	800510a <send_cmd>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d11a      	bne.n	8005876 <USER_SPI_ioctl+0x2c6>
 8005840:	f247 5030 	movw	r0, #30000	; 0x7530
 8005844:	f7ff fbbb 	bl	8004fbe <wait_ready>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d013      	beq.n	8005876 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800584e:	2300      	movs	r3, #0
 8005850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005854:	e00f      	b.n	8005876 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005856:	2304      	movs	r3, #4
 8005858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800585c:	e00c      	b.n	8005878 <USER_SPI_ioctl+0x2c8>
		break;
 800585e:	bf00      	nop
 8005860:	e00a      	b.n	8005878 <USER_SPI_ioctl+0x2c8>
		break;
 8005862:	bf00      	nop
 8005864:	e008      	b.n	8005878 <USER_SPI_ioctl+0x2c8>
		break;
 8005866:	bf00      	nop
 8005868:	e006      	b.n	8005878 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800586a:	bf00      	nop
 800586c:	e004      	b.n	8005878 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800586e:	bf00      	nop
 8005870:	e002      	b.n	8005878 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005872:	bf00      	nop
 8005874:	e000      	b.n	8005878 <USER_SPI_ioctl+0x2c8>
		break;
 8005876:	bf00      	nop
	}

	despiselect();
 8005878:	f7ff fbc4 	bl	8005004 <despiselect>

	return res;
 800587c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005880:	4618      	mov	r0, r3
 8005882:	3730      	adds	r7, #48	; 0x30
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000020 	.word	0x20000020
 800588c:	200002ac 	.word	0x200002ac

08005890 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <disk_status+0x30>)
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	79fa      	ldrb	r2, [r7, #7]
 80058a8:	4905      	ldr	r1, [pc, #20]	; (80058c0 <disk_status+0x30>)
 80058aa:	440a      	add	r2, r1
 80058ac:	7a12      	ldrb	r2, [r2, #8]
 80058ae:	4610      	mov	r0, r2
 80058b0:	4798      	blx	r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	200002d8 	.word	0x200002d8

080058c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	4a0d      	ldr	r2, [pc, #52]	; (800590c <disk_initialize+0x48>)
 80058d6:	5cd3      	ldrb	r3, [r2, r3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d111      	bne.n	8005900 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	4a0b      	ldr	r2, [pc, #44]	; (800590c <disk_initialize+0x48>)
 80058e0:	2101      	movs	r1, #1
 80058e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	4a09      	ldr	r2, [pc, #36]	; (800590c <disk_initialize+0x48>)
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	79fa      	ldrb	r2, [r7, #7]
 80058f2:	4906      	ldr	r1, [pc, #24]	; (800590c <disk_initialize+0x48>)
 80058f4:	440a      	add	r2, r1
 80058f6:	7a12      	ldrb	r2, [r2, #8]
 80058f8:	4610      	mov	r0, r2
 80058fa:	4798      	blx	r3
 80058fc:	4603      	mov	r3, r0
 80058fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	200002d8 	.word	0x200002d8

08005910 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4603      	mov	r3, r0
 800591e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	4a0a      	ldr	r2, [pc, #40]	; (800594c <disk_read+0x3c>)
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	689c      	ldr	r4, [r3, #8]
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	4a07      	ldr	r2, [pc, #28]	; (800594c <disk_read+0x3c>)
 8005930:	4413      	add	r3, r2
 8005932:	7a18      	ldrb	r0, [r3, #8]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	47a0      	blx	r4
 800593c:	4603      	mov	r3, r0
 800593e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005940:	7dfb      	ldrb	r3, [r7, #23]
}
 8005942:	4618      	mov	r0, r3
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	bd90      	pop	{r4, r7, pc}
 800594a:	bf00      	nop
 800594c:	200002d8 	.word	0x200002d8

08005950 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	4603      	mov	r3, r0
 800595e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	4a0a      	ldr	r2, [pc, #40]	; (800598c <disk_write+0x3c>)
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	68dc      	ldr	r4, [r3, #12]
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	4a07      	ldr	r2, [pc, #28]	; (800598c <disk_write+0x3c>)
 8005970:	4413      	add	r3, r2
 8005972:	7a18      	ldrb	r0, [r3, #8]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	47a0      	blx	r4
 800597c:	4603      	mov	r3, r0
 800597e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
}
 8005982:	4618      	mov	r0, r3
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	bd90      	pop	{r4, r7, pc}
 800598a:	bf00      	nop
 800598c:	200002d8 	.word	0x200002d8

08005990 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	603a      	str	r2, [r7, #0]
 800599a:	71fb      	strb	r3, [r7, #7]
 800599c:	460b      	mov	r3, r1
 800599e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <disk_ioctl+0x38>)
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	79fa      	ldrb	r2, [r7, #7]
 80059ae:	4906      	ldr	r1, [pc, #24]	; (80059c8 <disk_ioctl+0x38>)
 80059b0:	440a      	add	r2, r1
 80059b2:	7a10      	ldrb	r0, [r2, #8]
 80059b4:	79b9      	ldrb	r1, [r7, #6]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	4798      	blx	r3
 80059ba:	4603      	mov	r3, r0
 80059bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80059be:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	200002d8 	.word	0x200002d8

080059cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3301      	adds	r3, #1
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80059dc:	89fb      	ldrh	r3, [r7, #14]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	b21a      	sxth	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	b21b      	sxth	r3, r3
 80059e8:	4313      	orrs	r3, r2
 80059ea:	b21b      	sxth	r3, r3
 80059ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80059ee:	89fb      	ldrh	r3, [r7, #14]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3303      	adds	r3, #3
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	3202      	adds	r2, #2
 8005a14:	7812      	ldrb	r2, [r2, #0]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	3201      	adds	r2, #1
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	7812      	ldrb	r2, [r2, #0]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
	return rv;
 8005a34:	68fb      	ldr	r3, [r7, #12]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	887a      	ldrh	r2, [r7, #2]
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	701a      	strb	r2, [r3, #0]
 8005a5a:	887b      	ldrh	r3, [r7, #2]
 8005a5c:	0a1b      	lsrs	r3, r3, #8
 8005a5e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	607a      	str	r2, [r7, #4]
 8005a66:	887a      	ldrh	r2, [r7, #2]
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	1c53      	adds	r3, r2, #1
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	1c59      	adds	r1, r3, #1
 8005af4:	6179      	str	r1, [r7, #20]
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f1      	bne.n	8005aea <mem_cpy+0x1a>
	}
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005b12:	b480      	push	{r7}
 8005b14:	b087      	sub	sp, #28
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	617a      	str	r2, [r7, #20]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	607b      	str	r3, [r7, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f3      	bne.n	8005b22 <mem_set+0x10>
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005b48:	b480      	push	{r7}
 8005b4a:	b089      	sub	sp, #36	; 0x24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	61fb      	str	r3, [r7, #28]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	61fa      	str	r2, [r7, #28]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	61ba      	str	r2, [r7, #24]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	1acb      	subs	r3, r1, r3
 8005b74:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	607b      	str	r3, [r7, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <mem_cmp+0x40>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0eb      	beq.n	8005b60 <mem_cmp+0x18>

	return r;
 8005b88:	697b      	ldr	r3, [r7, #20]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3724      	adds	r7, #36	; 0x24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005ba0:	e002      	b.n	8005ba8 <chk_chr+0x12>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <chk_chr+0x26>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d1f2      	bne.n	8005ba2 <chk_chr+0xc>
	return *str;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <lock_fs+0x22>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f002 fb82 	bl	80082e8 <ff_req_grant>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <lock_fs+0x22>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <lock_fs+0x24>
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00d      	beq.n	8005c26 <unlock_fs+0x2e>
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	2b0c      	cmp	r3, #12
 8005c0e:	d00a      	beq.n	8005c26 <unlock_fs+0x2e>
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	2b0b      	cmp	r3, #11
 8005c14:	d007      	beq.n	8005c26 <unlock_fs+0x2e>
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	2b0f      	cmp	r3, #15
 8005c1a:	d004      	beq.n	8005c26 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f002 fb76 	bl	8008312 <ff_rel_grant>
	}
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	e029      	b.n	8005c98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005c44:	4a27      	ldr	r2, [pc, #156]	; (8005ce4 <chk_lock+0xb4>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	4413      	add	r3, r2
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d01d      	beq.n	8005c8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c52:	4a24      	ldr	r2, [pc, #144]	; (8005ce4 <chk_lock+0xb4>)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	4413      	add	r3, r2
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d116      	bne.n	8005c92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005c64:	4a1f      	ldr	r2, [pc, #124]	; (8005ce4 <chk_lock+0xb4>)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d10c      	bne.n	8005c92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c78:	4a1a      	ldr	r2, [pc, #104]	; (8005ce4 <chk_lock+0xb4>)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	4413      	add	r3, r2
 8005c80:	3308      	adds	r3, #8
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d102      	bne.n	8005c92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c8c:	e007      	b.n	8005c9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d9d2      	bls.n	8005c44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d109      	bne.n	8005cb8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <chk_lock+0x80>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d101      	bne.n	8005cb4 <chk_lock+0x84>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e010      	b.n	8005cd6 <chk_lock+0xa6>
 8005cb4:	2312      	movs	r3, #18
 8005cb6:	e00e      	b.n	8005cd6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d108      	bne.n	8005cd0 <chk_lock+0xa0>
 8005cbe:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <chk_lock+0xb4>)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	4413      	add	r3, r2
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cce:	d101      	bne.n	8005cd4 <chk_lock+0xa4>
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	e000      	b.n	8005cd6 <chk_lock+0xa6>
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	200002b8 	.word	0x200002b8

08005ce8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	e002      	b.n	8005cfa <enq_lock+0x12>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d806      	bhi.n	8005d0e <enq_lock+0x26>
 8005d00:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <enq_lock+0x40>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	4413      	add	r3, r2
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f2      	bne.n	8005cf4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	bf14      	ite	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	2300      	moveq	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	200002b8 	.word	0x200002b8

08005d2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e01f      	b.n	8005d7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005d3c:	4a41      	ldr	r2, [pc, #260]	; (8005e44 <inc_lock+0x118>)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	4413      	add	r3, r2
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d113      	bne.n	8005d76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005d4e:	4a3d      	ldr	r2, [pc, #244]	; (8005e44 <inc_lock+0x118>)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	4413      	add	r3, r2
 8005d56:	3304      	adds	r3, #4
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d109      	bne.n	8005d76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005d62:	4a38      	ldr	r2, [pc, #224]	; (8005e44 <inc_lock+0x118>)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	4413      	add	r3, r2
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d006      	beq.n	8005d84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d9dc      	bls.n	8005d3c <inc_lock+0x10>
 8005d82:	e000      	b.n	8005d86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005d84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d132      	bne.n	8005df2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e002      	b.n	8005d98 <inc_lock+0x6c>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3301      	adds	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d806      	bhi.n	8005dac <inc_lock+0x80>
 8005d9e:	4a29      	ldr	r2, [pc, #164]	; (8005e44 <inc_lock+0x118>)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	4413      	add	r3, r2
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1f2      	bne.n	8005d92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d101      	bne.n	8005db6 <inc_lock+0x8a>
 8005db2:	2300      	movs	r3, #0
 8005db4:	e040      	b.n	8005e38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4922      	ldr	r1, [pc, #136]	; (8005e44 <inc_lock+0x118>)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	440b      	add	r3, r1
 8005dc2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	491e      	ldr	r1, [pc, #120]	; (8005e44 <inc_lock+0x118>)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	440b      	add	r3, r1
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	695a      	ldr	r2, [r3, #20]
 8005dd8:	491a      	ldr	r1, [pc, #104]	; (8005e44 <inc_lock+0x118>)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	440b      	add	r3, r1
 8005de0:	3308      	adds	r3, #8
 8005de2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005de4:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <inc_lock+0x118>)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	4413      	add	r3, r2
 8005dec:	330c      	adds	r3, #12
 8005dee:	2200      	movs	r2, #0
 8005df0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <inc_lock+0xe0>
 8005df8:	4a12      	ldr	r2, [pc, #72]	; (8005e44 <inc_lock+0x118>)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	4413      	add	r3, r2
 8005e00:	330c      	adds	r3, #12
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <inc_lock+0xe0>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e015      	b.n	8005e38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d108      	bne.n	8005e24 <inc_lock+0xf8>
 8005e12:	4a0c      	ldr	r2, [pc, #48]	; (8005e44 <inc_lock+0x118>)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	4413      	add	r3, r2
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	e001      	b.n	8005e28 <inc_lock+0xfc>
 8005e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e28:	4906      	ldr	r1, [pc, #24]	; (8005e44 <inc_lock+0x118>)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	440b      	add	r3, r1
 8005e30:	330c      	adds	r3, #12
 8005e32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3301      	adds	r3, #1
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	200002b8 	.word	0x200002b8

08005e48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	607b      	str	r3, [r7, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d825      	bhi.n	8005ea8 <dec_lock+0x60>
		n = Files[i].ctr;
 8005e5c:	4a17      	ldr	r2, [pc, #92]	; (8005ebc <dec_lock+0x74>)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	4413      	add	r3, r2
 8005e64:	330c      	adds	r3, #12
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005e6a:	89fb      	ldrh	r3, [r7, #14]
 8005e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e70:	d101      	bne.n	8005e76 <dec_lock+0x2e>
 8005e72:	2300      	movs	r3, #0
 8005e74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005e76:	89fb      	ldrh	r3, [r7, #14]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <dec_lock+0x3a>
 8005e7c:	89fb      	ldrh	r3, [r7, #14]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005e82:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <dec_lock+0x74>)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	4413      	add	r3, r2
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	89fa      	ldrh	r2, [r7, #14]
 8005e8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005e90:	89fb      	ldrh	r3, [r7, #14]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d105      	bne.n	8005ea2 <dec_lock+0x5a>
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <dec_lock+0x74>)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	4413      	add	r3, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	737b      	strb	r3, [r7, #13]
 8005ea6:	e001      	b.n	8005eac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005eac:	7b7b      	ldrb	r3, [r7, #13]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	200002b8 	.word	0x200002b8

08005ec0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e010      	b.n	8005ef0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005ece:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <clear_lock+0x44>)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	4413      	add	r3, r2
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d105      	bne.n	8005eea <clear_lock+0x2a>
 8005ede:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <clear_lock+0x44>)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	4413      	add	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3301      	adds	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d9eb      	bls.n	8005ece <clear_lock+0xe>
	}
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	200002b8 	.word	0x200002b8

08005f08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d034      	beq.n	8005f86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	7858      	ldrb	r0, [r3, #1]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	f7ff fd0e 	bl	8005950 <disk_write>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
 8005f3e:	e022      	b.n	8005f86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	1ad2      	subs	r2, r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d217      	bcs.n	8005f86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	789b      	ldrb	r3, [r3, #2]
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	e010      	b.n	8005f80 <sync_window+0x78>
					wsect += fs->fsize;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	4413      	add	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	7858      	ldrb	r0, [r3, #1]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f72:	2301      	movs	r3, #1
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	f7ff fceb 	bl	8005950 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d8eb      	bhi.n	8005f5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d01b      	beq.n	8005fe0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff ffad 	bl	8005f08 <sync_window>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d113      	bne.n	8005fe0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	7858      	ldrb	r0, [r3, #1]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	f7ff fca3 	bl	8005910 <disk_read>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d004      	beq.n	8005fda <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff ff87 	bl	8005f08 <sync_window>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d158      	bne.n	80060b6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b03      	cmp	r3, #3
 800600a:	d148      	bne.n	800609e <sync_fs+0xb2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	791b      	ldrb	r3, [r3, #4]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d144      	bne.n	800609e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3334      	adds	r3, #52	; 0x34
 8006018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800601c:	2100      	movs	r1, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fd77 	bl	8005b12 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3334      	adds	r3, #52	; 0x34
 8006028:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800602c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fd06 	bl	8005a42 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3334      	adds	r3, #52	; 0x34
 800603a:	4921      	ldr	r1, [pc, #132]	; (80060c0 <sync_fs+0xd4>)
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fd1b 	bl	8005a78 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3334      	adds	r3, #52	; 0x34
 8006046:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800604a:	491e      	ldr	r1, [pc, #120]	; (80060c4 <sync_fs+0xd8>)
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff fd13 	bl	8005a78 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3334      	adds	r3, #52	; 0x34
 8006056:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	4619      	mov	r1, r3
 8006060:	4610      	mov	r0, r2
 8006062:	f7ff fd09 	bl	8005a78 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3334      	adds	r3, #52	; 0x34
 800606a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	4619      	mov	r1, r3
 8006074:	4610      	mov	r0, r2
 8006076:	f7ff fcff 	bl	8005a78 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7858      	ldrb	r0, [r3, #1]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006092:	2301      	movs	r3, #1
 8006094:	f7ff fc5c 	bl	8005950 <disk_write>
			fs->fsi_flag = 0;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	2200      	movs	r2, #0
 80060a4:	2100      	movs	r1, #0
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fc72 	bl	8005990 <disk_ioctl>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <sync_fs+0xca>
 80060b2:	2301      	movs	r3, #1
 80060b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	41615252 	.word	0x41615252
 80060c4:	61417272 	.word	0x61417272

080060c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	3b02      	subs	r3, #2
 80060d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	3b02      	subs	r3, #2
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d301      	bcc.n	80060e8 <clust2sect+0x20>
 80060e4:	2300      	movs	r3, #0
 80060e6:	e008      	b.n	80060fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	895b      	ldrh	r3, [r3, #10]
 80060ec:	461a      	mov	r2, r3
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	fb03 f202 	mul.w	r2, r3, r2
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4413      	add	r3, r2
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b086      	sub	sp, #24
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d904      	bls.n	8006126 <get_fat+0x20>
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d302      	bcc.n	800612c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006126:	2301      	movs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e08f      	b.n	800624c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800612c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006130:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d062      	beq.n	8006200 <get_fat+0xfa>
 800613a:	2b03      	cmp	r3, #3
 800613c:	dc7c      	bgt.n	8006238 <get_fat+0x132>
 800613e:	2b01      	cmp	r3, #1
 8006140:	d002      	beq.n	8006148 <get_fat+0x42>
 8006142:	2b02      	cmp	r3, #2
 8006144:	d042      	beq.n	80061cc <get_fat+0xc6>
 8006146:	e077      	b.n	8006238 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	0a5b      	lsrs	r3, r3, #9
 800615e:	4413      	add	r3, r2
 8006160:	4619      	mov	r1, r3
 8006162:	6938      	ldr	r0, [r7, #16]
 8006164:	f7ff ff14 	bl	8005f90 <move_window>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d167      	bne.n	800623e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	60fa      	str	r2, [r7, #12]
 8006174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4413      	add	r3, r2
 800617c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006180:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	0a5b      	lsrs	r3, r3, #9
 800618a:	4413      	add	r3, r2
 800618c:	4619      	mov	r1, r3
 800618e:	6938      	ldr	r0, [r7, #16]
 8006190:	f7ff fefe 	bl	8005f90 <move_window>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d153      	bne.n	8006242 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4413      	add	r3, r2
 80061a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	461a      	mov	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <get_fat+0xbc>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	e002      	b.n	80061c8 <get_fat+0xc2>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c8:	617b      	str	r3, [r7, #20]
			break;
 80061ca:	e03f      	b.n	800624c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	0a1b      	lsrs	r3, r3, #8
 80061d4:	4413      	add	r3, r2
 80061d6:	4619      	mov	r1, r3
 80061d8:	6938      	ldr	r0, [r7, #16]
 80061da:	f7ff fed9 	bl	8005f90 <move_window>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d130      	bne.n	8006246 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80061f2:	4413      	add	r3, r2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff fbe9 	bl	80059cc <ld_word>
 80061fa:	4603      	mov	r3, r0
 80061fc:	617b      	str	r3, [r7, #20]
			break;
 80061fe:	e025      	b.n	800624c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	09db      	lsrs	r3, r3, #7
 8006208:	4413      	add	r3, r2
 800620a:	4619      	mov	r1, r3
 800620c:	6938      	ldr	r0, [r7, #16]
 800620e:	f7ff febf 	bl	8005f90 <move_window>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d118      	bne.n	800624a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006226:	4413      	add	r3, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fbe7 	bl	80059fc <ld_dword>
 800622e:	4603      	mov	r3, r0
 8006230:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006234:	617b      	str	r3, [r7, #20]
			break;
 8006236:	e009      	b.n	800624c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006238:	2301      	movs	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e006      	b.n	800624c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800623e:	bf00      	nop
 8006240:	e004      	b.n	800624c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006242:	bf00      	nop
 8006244:	e002      	b.n	800624c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006246:	bf00      	nop
 8006248:	e000      	b.n	800624c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800624a:	bf00      	nop
		}
	}

	return val;
 800624c:	697b      	ldr	r3, [r7, #20]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006256:	b590      	push	{r4, r7, lr}
 8006258:	b089      	sub	sp, #36	; 0x24
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006262:	2302      	movs	r3, #2
 8006264:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b01      	cmp	r3, #1
 800626a:	f240 80d2 	bls.w	8006412 <put_fat+0x1bc>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	429a      	cmp	r2, r3
 8006276:	f080 80cc 	bcs.w	8006412 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b03      	cmp	r3, #3
 8006280:	f000 8096 	beq.w	80063b0 <put_fat+0x15a>
 8006284:	2b03      	cmp	r3, #3
 8006286:	f300 80cd 	bgt.w	8006424 <put_fat+0x1ce>
 800628a:	2b01      	cmp	r3, #1
 800628c:	d002      	beq.n	8006294 <put_fat+0x3e>
 800628e:	2b02      	cmp	r3, #2
 8006290:	d06e      	beq.n	8006370 <put_fat+0x11a>
 8006292:	e0c7      	b.n	8006424 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	61bb      	str	r3, [r7, #24]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4413      	add	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	0a5b      	lsrs	r3, r3, #9
 80062aa:	4413      	add	r3, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff fe6e 	bl	8005f90 <move_window>
 80062b4:	4603      	mov	r3, r0
 80062b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062b8:	7ffb      	ldrb	r3, [r7, #31]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 80ab 	bne.w	8006416 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	61b9      	str	r1, [r7, #24]
 80062cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d0:	4413      	add	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00d      	beq.n	80062fa <put_fat+0xa4>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	b25a      	sxtb	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	b25b      	sxtb	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	e001      	b.n	80062fe <put_fat+0xa8>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	0a5b      	lsrs	r3, r3, #9
 8006310:	4413      	add	r3, r2
 8006312:	4619      	mov	r1, r3
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff fe3b 	bl	8005f90 <move_window>
 800631a:	4603      	mov	r3, r0
 800631c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800631e:	7ffb      	ldrb	r3, [r7, #31]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d17a      	bne.n	800641a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006330:	4413      	add	r3, r2
 8006332:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <put_fat+0xf0>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	091b      	lsrs	r3, r3, #4
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e00e      	b.n	8006364 <put_fat+0x10e>
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	b25b      	sxtb	r3, r3
 800634c:	f023 030f 	bic.w	r3, r3, #15
 8006350:	b25a      	sxtb	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	0a1b      	lsrs	r3, r3, #8
 8006356:	b25b      	sxtb	r3, r3
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	b25b      	sxtb	r3, r3
 800635e:	4313      	orrs	r3, r2
 8006360:	b25b      	sxtb	r3, r3
 8006362:	b2db      	uxtb	r3, r3
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	70da      	strb	r2, [r3, #3]
			break;
 800636e:	e059      	b.n	8006424 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	0a1b      	lsrs	r3, r3, #8
 8006378:	4413      	add	r3, r2
 800637a:	4619      	mov	r1, r3
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff fe07 	bl	8005f90 <move_window>
 8006382:	4603      	mov	r3, r0
 8006384:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006386:	7ffb      	ldrb	r3, [r7, #31]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d148      	bne.n	800641e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800639a:	4413      	add	r3, r2
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	b292      	uxth	r2, r2
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff fb4d 	bl	8005a42 <st_word>
			fs->wflag = 1;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	70da      	strb	r2, [r3, #3]
			break;
 80063ae:	e039      	b.n	8006424 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	09db      	lsrs	r3, r3, #7
 80063b8:	4413      	add	r3, r2
 80063ba:	4619      	mov	r1, r3
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f7ff fde7 	bl	8005f90 <move_window>
 80063c2:	4603      	mov	r3, r0
 80063c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063c6:	7ffb      	ldrb	r3, [r7, #31]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d12a      	bne.n	8006422 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80063e0:	4413      	add	r3, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff fb0a 	bl	80059fc <ld_dword>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063ee:	4323      	orrs	r3, r4
 80063f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006400:	4413      	add	r3, r2
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fb37 	bl	8005a78 <st_dword>
			fs->wflag = 1;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	70da      	strb	r2, [r3, #3]
			break;
 8006410:	e008      	b.n	8006424 <put_fat+0x1ce>
		}
	}
 8006412:	bf00      	nop
 8006414:	e006      	b.n	8006424 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006416:	bf00      	nop
 8006418:	e004      	b.n	8006424 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800641a:	bf00      	nop
 800641c:	e002      	b.n	8006424 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800641e:	bf00      	nop
 8006420:	e000      	b.n	8006424 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006422:	bf00      	nop
	return res;
 8006424:	7ffb      	ldrb	r3, [r7, #31]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3724      	adds	r7, #36	; 0x24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd90      	pop	{r4, r7, pc}

0800642e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b088      	sub	sp, #32
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d904      	bls.n	8006454 <remove_chain+0x26>
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	429a      	cmp	r2, r3
 8006452:	d301      	bcc.n	8006458 <remove_chain+0x2a>
 8006454:	2302      	movs	r3, #2
 8006456:	e04b      	b.n	80064f0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00c      	beq.n	8006478 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800645e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	69b8      	ldr	r0, [r7, #24]
 8006466:	f7ff fef6 	bl	8006256 <put_fat>
 800646a:	4603      	mov	r3, r0
 800646c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800646e:	7ffb      	ldrb	r3, [r7, #31]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <remove_chain+0x4a>
 8006474:	7ffb      	ldrb	r3, [r7, #31]
 8006476:	e03b      	b.n	80064f0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff fe43 	bl	8006106 <get_fat>
 8006480:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d031      	beq.n	80064ec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <remove_chain+0x64>
 800648e:	2302      	movs	r3, #2
 8006490:	e02e      	b.n	80064f0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006498:	d101      	bne.n	800649e <remove_chain+0x70>
 800649a:	2301      	movs	r3, #1
 800649c:	e028      	b.n	80064f0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800649e:	2200      	movs	r2, #0
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	69b8      	ldr	r0, [r7, #24]
 80064a4:	f7ff fed7 	bl	8006256 <put_fat>
 80064a8:	4603      	mov	r3, r0
 80064aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80064ac:	7ffb      	ldrb	r3, [r7, #31]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <remove_chain+0x88>
 80064b2:	7ffb      	ldrb	r3, [r7, #31]
 80064b4:	e01c      	b.n	80064f0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	3b02      	subs	r3, #2
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d20b      	bcs.n	80064dc <remove_chain+0xae>
			fs->free_clst++;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	791b      	ldrb	r3, [r3, #4]
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d3c6      	bcc.n	8006478 <remove_chain+0x4a>
 80064ea:	e000      	b.n	80064ee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80064ec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10d      	bne.n	800652a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <create_chain+0x2c>
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	429a      	cmp	r2, r3
 8006522:	d31b      	bcc.n	800655c <create_chain+0x64>
 8006524:	2301      	movs	r3, #1
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	e018      	b.n	800655c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff fdea 	bl	8006106 <get_fat>
 8006532:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d801      	bhi.n	800653e <create_chain+0x46>
 800653a:	2301      	movs	r3, #1
 800653c:	e070      	b.n	8006620 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006544:	d101      	bne.n	800654a <create_chain+0x52>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	e06a      	b.n	8006620 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	429a      	cmp	r2, r3
 8006552:	d201      	bcs.n	8006558 <create_chain+0x60>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	e063      	b.n	8006620 <create_chain+0x128>
		scl = clst;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	3301      	adds	r3, #1
 8006564:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	429a      	cmp	r2, r3
 800656e:	d307      	bcc.n	8006580 <create_chain+0x88>
				ncl = 2;
 8006570:	2302      	movs	r3, #2
 8006572:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	429a      	cmp	r2, r3
 800657a:	d901      	bls.n	8006580 <create_chain+0x88>
 800657c:	2300      	movs	r3, #0
 800657e:	e04f      	b.n	8006620 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006580:	69f9      	ldr	r1, [r7, #28]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff fdbf 	bl	8006106 <get_fat>
 8006588:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00e      	beq.n	80065ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d003      	beq.n	800659e <create_chain+0xa6>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800659c:	d101      	bne.n	80065a2 <create_chain+0xaa>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	e03e      	b.n	8006620 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d1da      	bne.n	8006560 <create_chain+0x68>
 80065aa:	2300      	movs	r3, #0
 80065ac:	e038      	b.n	8006620 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80065ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065b4:	69f9      	ldr	r1, [r7, #28]
 80065b6:	6938      	ldr	r0, [r7, #16]
 80065b8:	f7ff fe4d 	bl	8006256 <put_fat>
 80065bc:	4603      	mov	r3, r0
 80065be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <create_chain+0xe2>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d006      	beq.n	80065da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6938      	ldr	r0, [r7, #16]
 80065d2:	f7ff fe40 	bl	8006256 <put_fat>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d116      	bne.n	800660e <create_chain+0x116>
		fs->last_clst = ncl;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	695a      	ldr	r2, [r3, #20]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	3b02      	subs	r3, #2
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d804      	bhi.n	80065fe <create_chain+0x106>
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	1e5a      	subs	r2, r3, #1
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	791b      	ldrb	r3, [r3, #4]
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	b2da      	uxtb	r2, r3
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	711a      	strb	r2, [r3, #4]
 800660c:	e007      	b.n	800661e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d102      	bne.n	800661a <create_chain+0x122>
 8006614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006618:	e000      	b.n	800661c <create_chain+0x124>
 800661a:	2301      	movs	r3, #1
 800661c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800661e:	69fb      	ldr	r3, [r7, #28]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3720      	adds	r7, #32
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	3304      	adds	r3, #4
 800663e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	0a5b      	lsrs	r3, r3, #9
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	8952      	ldrh	r2, [r2, #10]
 8006648:	fbb3 f3f2 	udiv	r3, r3, r2
 800664c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1d1a      	adds	r2, r3, #4
 8006652:	613a      	str	r2, [r7, #16]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <clmt_clust+0x3a>
 800665e:	2300      	movs	r3, #0
 8006660:	e010      	b.n	8006684 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	429a      	cmp	r2, r3
 8006668:	d307      	bcc.n	800667a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3304      	adds	r3, #4
 8006676:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006678:	e7e9      	b.n	800664e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800667a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4413      	add	r3, r2
}
 8006684:	4618      	mov	r0, r3
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066a6:	d204      	bcs.n	80066b2 <dir_sdi+0x22>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80066b2:	2302      	movs	r3, #2
 80066b4:	e063      	b.n	800677e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <dir_sdi+0x46>
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d902      	bls.n	80066d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10c      	bne.n	80066f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	8912      	ldrh	r2, [r2, #8]
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d301      	bcc.n	80066ec <dir_sdi+0x5c>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e048      	b.n	800677e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	61da      	str	r2, [r3, #28]
 80066f4:	e029      	b.n	800674a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	895b      	ldrh	r3, [r3, #10]
 80066fa:	025b      	lsls	r3, r3, #9
 80066fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80066fe:	e019      	b.n	8006734 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6979      	ldr	r1, [r7, #20]
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fcfe 	bl	8006106 <get_fat>
 800670a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006712:	d101      	bne.n	8006718 <dir_sdi+0x88>
 8006714:	2301      	movs	r3, #1
 8006716:	e032      	b.n	800677e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d904      	bls.n	8006728 <dir_sdi+0x98>
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	429a      	cmp	r2, r3
 8006726:	d301      	bcc.n	800672c <dir_sdi+0x9c>
 8006728:	2302      	movs	r3, #2
 800672a:	e028      	b.n	800677e <dir_sdi+0xee>
			ofs -= csz;
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	429a      	cmp	r2, r3
 800673a:	d2e1      	bcs.n	8006700 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800673c:	6979      	ldr	r1, [r7, #20]
 800673e:	6938      	ldr	r0, [r7, #16]
 8006740:	f7ff fcc2 	bl	80060c8 <clust2sect>
 8006744:	4602      	mov	r2, r0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <dir_sdi+0xcc>
 8006758:	2302      	movs	r3, #2
 800675a:	e010      	b.n	800677e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	0a5b      	lsrs	r3, r3, #9
 8006764:	441a      	add	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	441a      	add	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b086      	sub	sp, #24
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	3320      	adds	r3, #32
 800679c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <dir_next+0x28>
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ac:	d301      	bcc.n	80067b2 <dir_next+0x2c>
 80067ae:	2304      	movs	r3, #4
 80067b0:	e0aa      	b.n	8006908 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f040 8098 	bne.w	80068ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10b      	bne.n	80067e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	8912      	ldrh	r2, [r2, #8]
 80067d8:	4293      	cmp	r3, r2
 80067da:	f0c0 8088 	bcc.w	80068ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	61da      	str	r2, [r3, #28]
 80067e4:	2304      	movs	r3, #4
 80067e6:	e08f      	b.n	8006908 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	0a5b      	lsrs	r3, r3, #9
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	8952      	ldrh	r2, [r2, #10]
 80067f0:	3a01      	subs	r2, #1
 80067f2:	4013      	ands	r3, r2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d17a      	bne.n	80068ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f7ff fc80 	bl	8006106 <get_fat>
 8006806:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d801      	bhi.n	8006812 <dir_next+0x8c>
 800680e:	2302      	movs	r3, #2
 8006810:	e07a      	b.n	8006908 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006818:	d101      	bne.n	800681e <dir_next+0x98>
 800681a:	2301      	movs	r3, #1
 800681c:	e074      	b.n	8006908 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	429a      	cmp	r2, r3
 8006826:	d358      	bcc.n	80068da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	61da      	str	r2, [r3, #28]
 8006834:	2304      	movs	r3, #4
 8006836:	e067      	b.n	8006908 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f7ff fe59 	bl	80064f8 <create_chain>
 8006846:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <dir_next+0xcc>
 800684e:	2307      	movs	r3, #7
 8006850:	e05a      	b.n	8006908 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <dir_next+0xd6>
 8006858:	2302      	movs	r3, #2
 800685a:	e055      	b.n	8006908 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006862:	d101      	bne.n	8006868 <dir_next+0xe2>
 8006864:	2301      	movs	r3, #1
 8006866:	e04f      	b.n	8006908 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7ff fb4d 	bl	8005f08 <sync_window>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <dir_next+0xf2>
 8006874:	2301      	movs	r3, #1
 8006876:	e047      	b.n	8006908 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3334      	adds	r3, #52	; 0x34
 800687c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006880:	2100      	movs	r1, #0
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff f945 	bl	8005b12 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	6979      	ldr	r1, [r7, #20]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff fc1a 	bl	80060c8 <clust2sect>
 8006894:	4602      	mov	r2, r0
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
 800689a:	e012      	b.n	80068c2 <dir_next+0x13c>
						fs->wflag = 1;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff fb30 	bl	8005f08 <sync_window>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <dir_next+0x12c>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e02a      	b.n	8006908 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3301      	adds	r3, #1
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	631a      	str	r2, [r3, #48]	; 0x30
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	895b      	ldrh	r3, [r3, #10]
 80068c6:	461a      	mov	r2, r3
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d3e6      	bcc.n	800689c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad2      	subs	r2, r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80068e0:	6979      	ldr	r1, [r7, #20]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff fbf0 	bl	80060c8 <clust2sect>
 80068e8:	4602      	mov	r2, r0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006900:	441a      	add	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006920:	2100      	movs	r1, #0
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff feb4 	bl	8006690 <dir_sdi>
 8006928:	4603      	mov	r3, r0
 800692a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d12b      	bne.n	800698a <dir_alloc+0x7a>
		n = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	4619      	mov	r1, r3
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7ff fb27 	bl	8005f90 <move_window>
 8006942:	4603      	mov	r3, r0
 8006944:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d11d      	bne.n	8006988 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2be5      	cmp	r3, #229	; 0xe5
 8006954:	d004      	beq.n	8006960 <dir_alloc+0x50>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d107      	bne.n	8006970 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	3301      	adds	r3, #1
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d102      	bne.n	8006974 <dir_alloc+0x64>
 800696e:	e00c      	b.n	800698a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006974:	2101      	movs	r1, #1
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff ff05 	bl	8006786 <dir_next>
 800697c:	4603      	mov	r3, r0
 800697e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0d7      	beq.n	8006936 <dir_alloc+0x26>
 8006986:	e000      	b.n	800698a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006988:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	2b04      	cmp	r3, #4
 800698e:	d101      	bne.n	8006994 <dir_alloc+0x84>
 8006990:	2307      	movs	r3, #7
 8006992:	75fb      	strb	r3, [r7, #23]
	return res;
 8006994:	7dfb      	ldrb	r3, [r7, #23]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	331a      	adds	r3, #26
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff f80d 	bl	80059cc <ld_word>
 80069b2:	4603      	mov	r3, r0
 80069b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d109      	bne.n	80069d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	3314      	adds	r3, #20
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff f802 	bl	80059cc <ld_word>
 80069c8:	4603      	mov	r3, r0
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80069d2:	68fb      	ldr	r3, [r7, #12]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	331a      	adds	r3, #26
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	b292      	uxth	r2, r2
 80069f0:	4611      	mov	r1, r2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff f825 	bl	8005a42 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d109      	bne.n	8006a14 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f103 0214 	add.w	r2, r3, #20
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	0c1b      	lsrs	r3, r3, #16
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f7ff f817 	bl	8005a42 <st_word>
	}
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006a26:	2304      	movs	r3, #4
 8006a28:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006a30:	e03c      	b.n	8006aac <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	4619      	mov	r1, r3
 8006a38:	6938      	ldr	r0, [r7, #16]
 8006a3a:	f7ff faa9 	bl	8005f90 <move_window>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d136      	bne.n	8006ab6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d102      	bne.n	8006a5c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006a56:	2304      	movs	r3, #4
 8006a58:	75fb      	strb	r3, [r7, #23]
 8006a5a:	e031      	b.n	8006ac0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	330b      	adds	r3, #11
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a68:	73bb      	strb	r3, [r7, #14]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7bba      	ldrb	r2, [r7, #14]
 8006a6e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2be5      	cmp	r3, #229	; 0xe5
 8006a74:	d011      	beq.n	8006a9a <dir_read+0x7e>
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b2e      	cmp	r3, #46	; 0x2e
 8006a7a:	d00e      	beq.n	8006a9a <dir_read+0x7e>
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	2b0f      	cmp	r3, #15
 8006a80:	d00b      	beq.n	8006a9a <dir_read+0x7e>
 8006a82:	7bbb      	ldrb	r3, [r7, #14]
 8006a84:	f023 0320 	bic.w	r3, r3, #32
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00f      	beq.n	8006aba <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff fe72 	bl	8006786 <dir_next>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d108      	bne.n	8006abe <dir_read+0xa2>
	while (dp->sect) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1be      	bne.n	8006a32 <dir_read+0x16>
 8006ab4:	e004      	b.n	8006ac0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006ab6:	bf00      	nop
 8006ab8:	e002      	b.n	8006ac0 <dir_read+0xa4>
				break;
 8006aba:	bf00      	nop
 8006abc:	e000      	b.n	8006ac0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006abe:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <dir_read+0xb0>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	61da      	str	r2, [r3, #28]
	return res;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff fdd2 	bl	8006690 <dir_sdi>
 8006aec:	4603      	mov	r3, r0
 8006aee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <dir_find+0x24>
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
 8006af8:	e03e      	b.n	8006b78 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	4619      	mov	r1, r3
 8006b00:	6938      	ldr	r0, [r7, #16]
 8006b02:	f7ff fa45 	bl	8005f90 <move_window>
 8006b06:	4603      	mov	r3, r0
 8006b08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d12f      	bne.n	8006b70 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <dir_find+0x4e>
 8006b1e:	2304      	movs	r3, #4
 8006b20:	75fb      	strb	r3, [r7, #23]
 8006b22:	e028      	b.n	8006b76 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	330b      	adds	r3, #11
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	330b      	adds	r3, #11
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	f003 0308 	and.w	r3, r3, #8
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <dir_find+0x86>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a18      	ldr	r0, [r3, #32]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3324      	adds	r3, #36	; 0x24
 8006b4e:	220b      	movs	r2, #11
 8006b50:	4619      	mov	r1, r3
 8006b52:	f7fe fff9 	bl	8005b48 <mem_cmp>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fe11 	bl	8006786 <dir_next>
 8006b64:	4603      	mov	r3, r0
 8006b66:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0c5      	beq.n	8006afa <dir_find+0x24>
 8006b6e:	e002      	b.n	8006b76 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006b70:	bf00      	nop
 8006b72:	e000      	b.n	8006b76 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006b74:	bf00      	nop

	return res;
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006b8e:	2101      	movs	r1, #1
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff febd 	bl	8006910 <dir_alloc>
 8006b96:	4603      	mov	r3, r0
 8006b98:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d11c      	bne.n	8006bda <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	68b8      	ldr	r0, [r7, #8]
 8006ba8:	f7ff f9f2 	bl	8005f90 <move_window>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d111      	bne.n	8006bda <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fe ffa7 	bl	8005b12 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a18      	ldr	r0, [r3, #32]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3324      	adds	r3, #36	; 0x24
 8006bcc:	220b      	movs	r2, #11
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f7fe ff7e 	bl	8005ad0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f7ff f9c9 	bl	8005f90 <move_window>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d106      	bne.n	8006c16 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	22e5      	movs	r2, #229	; 0xe5
 8006c0e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2201      	movs	r2, #1
 8006c14:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006c16:	7afb      	ldrb	r3, [r7, #11]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3324      	adds	r3, #36	; 0x24
 8006c34:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c36:	220b      	movs	r2, #11
 8006c38:	2120      	movs	r1, #32
 8006c3a:	68b8      	ldr	r0, [r7, #8]
 8006c3c:	f7fe ff69 	bl	8005b12 <mem_set>
	si = i = 0; ni = 8;
 8006c40:	2300      	movs	r3, #0
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	2308      	movs	r3, #8
 8006c4a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	61fa      	str	r2, [r7, #28]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c5a:	7efb      	ldrb	r3, [r7, #27]
 8006c5c:	2b20      	cmp	r3, #32
 8006c5e:	d94e      	bls.n	8006cfe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006c60:	7efb      	ldrb	r3, [r7, #27]
 8006c62:	2b2f      	cmp	r3, #47	; 0x2f
 8006c64:	d006      	beq.n	8006c74 <create_name+0x54>
 8006c66:	7efb      	ldrb	r3, [r7, #27]
 8006c68:	2b5c      	cmp	r3, #92	; 0x5c
 8006c6a:	d110      	bne.n	8006c8e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006c6c:	e002      	b.n	8006c74 <create_name+0x54>
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	3301      	adds	r3, #1
 8006c72:	61fb      	str	r3, [r7, #28]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b2f      	cmp	r3, #47	; 0x2f
 8006c7e:	d0f6      	beq.n	8006c6e <create_name+0x4e>
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4413      	add	r3, r2
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b5c      	cmp	r3, #92	; 0x5c
 8006c8a:	d0f0      	beq.n	8006c6e <create_name+0x4e>
			break;
 8006c8c:	e038      	b.n	8006d00 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006c8e:	7efb      	ldrb	r3, [r7, #27]
 8006c90:	2b2e      	cmp	r3, #46	; 0x2e
 8006c92:	d003      	beq.n	8006c9c <create_name+0x7c>
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d30c      	bcc.n	8006cb6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2b0b      	cmp	r3, #11
 8006ca0:	d002      	beq.n	8006ca8 <create_name+0x88>
 8006ca2:	7efb      	ldrb	r3, [r7, #27]
 8006ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ca6:	d001      	beq.n	8006cac <create_name+0x8c>
 8006ca8:	2306      	movs	r3, #6
 8006caa:	e044      	b.n	8006d36 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006cac:	2308      	movs	r3, #8
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	230b      	movs	r3, #11
 8006cb2:	617b      	str	r3, [r7, #20]
			continue;
 8006cb4:	e022      	b.n	8006cfc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006cb6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da04      	bge.n	8006cc8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006cbe:	7efb      	ldrb	r3, [r7, #27]
 8006cc0:	3b80      	subs	r3, #128	; 0x80
 8006cc2:	4a1f      	ldr	r2, [pc, #124]	; (8006d40 <create_name+0x120>)
 8006cc4:	5cd3      	ldrb	r3, [r2, r3]
 8006cc6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006cc8:	7efb      	ldrb	r3, [r7, #27]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	481d      	ldr	r0, [pc, #116]	; (8006d44 <create_name+0x124>)
 8006cce:	f7fe ff62 	bl	8005b96 <chk_chr>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <create_name+0xbc>
 8006cd8:	2306      	movs	r3, #6
 8006cda:	e02c      	b.n	8006d36 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006cdc:	7efb      	ldrb	r3, [r7, #27]
 8006cde:	2b60      	cmp	r3, #96	; 0x60
 8006ce0:	d905      	bls.n	8006cee <create_name+0xce>
 8006ce2:	7efb      	ldrb	r3, [r7, #27]
 8006ce4:	2b7a      	cmp	r3, #122	; 0x7a
 8006ce6:	d802      	bhi.n	8006cee <create_name+0xce>
 8006ce8:	7efb      	ldrb	r3, [r7, #27]
 8006cea:	3b20      	subs	r3, #32
 8006cec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	613a      	str	r2, [r7, #16]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	7efa      	ldrb	r2, [r7, #27]
 8006cfa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006cfc:	e7a6      	b.n	8006c4c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006cfe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	441a      	add	r2, r3
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <create_name+0xf4>
 8006d10:	2306      	movs	r3, #6
 8006d12:	e010      	b.n	8006d36 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2be5      	cmp	r3, #229	; 0xe5
 8006d1a:	d102      	bne.n	8006d22 <create_name+0x102>
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2205      	movs	r2, #5
 8006d20:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d22:	7efb      	ldrb	r3, [r7, #27]
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d801      	bhi.n	8006d2c <create_name+0x10c>
 8006d28:	2204      	movs	r2, #4
 8006d2a:	e000      	b.n	8006d2e <create_name+0x10e>
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	330b      	adds	r3, #11
 8006d32:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d34:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	0800d180 	.word	0x0800d180
 8006d44:	0800d014 	.word	0x0800d014

08006d48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d5c:	e002      	b.n	8006d64 <follow_path+0x1c>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b2f      	cmp	r3, #47	; 0x2f
 8006d6a:	d0f8      	beq.n	8006d5e <follow_path+0x16>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b5c      	cmp	r3, #92	; 0x5c
 8006d72:	d0f4      	beq.n	8006d5e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b1f      	cmp	r3, #31
 8006d80:	d80a      	bhi.n	8006d98 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2280      	movs	r2, #128	; 0x80
 8006d86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fc7f 	bl	8006690 <dir_sdi>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]
 8006d96:	e043      	b.n	8006e20 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d98:	463b      	mov	r3, r7
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff ff3f 	bl	8006c20 <create_name>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d134      	bne.n	8006e16 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff fe92 	bl	8006ad6 <dir_find>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006dbc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d127      	bne.n	8006e1a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006dca:	7afb      	ldrb	r3, [r7, #11]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d122      	bne.n	8006e1a <follow_path+0xd2>
 8006dd4:	2305      	movs	r3, #5
 8006dd6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006dd8:	e01f      	b.n	8006e1a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006dda:	7afb      	ldrb	r3, [r7, #11]
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d11c      	bne.n	8006e1e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	799b      	ldrb	r3, [r3, #6]
 8006de8:	f003 0310 	and.w	r3, r3, #16
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006df0:	2305      	movs	r3, #5
 8006df2:	75fb      	strb	r3, [r7, #23]
 8006df4:	e014      	b.n	8006e20 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e04:	4413      	add	r3, r2
 8006e06:	4619      	mov	r1, r3
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7ff fdc8 	bl	800699e <ld_clust>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e14:	e7c0      	b.n	8006d98 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e16:	bf00      	nop
 8006e18:	e002      	b.n	8006e20 <follow_path+0xd8>
				break;
 8006e1a:	bf00      	nop
 8006e1c:	e000      	b.n	8006e20 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e1e:	bf00      	nop
			}
		}
	}

	return res;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b087      	sub	sp, #28
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e36:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d031      	beq.n	8006ea4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	e002      	b.n	8006e4e <get_ldnumber+0x24>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	d903      	bls.n	8006e5e <get_ldnumber+0x34>
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b3a      	cmp	r3, #58	; 0x3a
 8006e5c:	d1f4      	bne.n	8006e48 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b3a      	cmp	r3, #58	; 0x3a
 8006e64:	d11c      	bne.n	8006ea0 <get_ldnumber+0x76>
			tp = *path;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	60fa      	str	r2, [r7, #12]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	3b30      	subs	r3, #48	; 0x30
 8006e76:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b09      	cmp	r3, #9
 8006e7c:	d80e      	bhi.n	8006e9c <get_ldnumber+0x72>
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d10a      	bne.n	8006e9c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d107      	bne.n	8006e9c <get_ldnumber+0x72>
					vol = (int)i;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	3301      	adds	r3, #1
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	e002      	b.n	8006ea6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ea4:	693b      	ldr	r3, [r7, #16]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
	...

08006eb4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	70da      	strb	r2, [r3, #3]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff f85e 	bl	8005f90 <move_window>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <check_fs+0x2a>
 8006eda:	2304      	movs	r3, #4
 8006edc:	e038      	b.n	8006f50 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3334      	adds	r3, #52	; 0x34
 8006ee2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe fd70 	bl	80059cc <ld_word>
 8006eec:	4603      	mov	r3, r0
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d001      	beq.n	8006efc <check_fs+0x48>
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e029      	b.n	8006f50 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f02:	2be9      	cmp	r3, #233	; 0xe9
 8006f04:	d009      	beq.n	8006f1a <check_fs+0x66>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f0c:	2beb      	cmp	r3, #235	; 0xeb
 8006f0e:	d11e      	bne.n	8006f4e <check_fs+0x9a>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006f16:	2b90      	cmp	r3, #144	; 0x90
 8006f18:	d119      	bne.n	8006f4e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3334      	adds	r3, #52	; 0x34
 8006f1e:	3336      	adds	r3, #54	; 0x36
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fe fd6b 	bl	80059fc <ld_dword>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f2c:	4a0a      	ldr	r2, [pc, #40]	; (8006f58 <check_fs+0xa4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d101      	bne.n	8006f36 <check_fs+0x82>
 8006f32:	2300      	movs	r3, #0
 8006f34:	e00c      	b.n	8006f50 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3334      	adds	r3, #52	; 0x34
 8006f3a:	3352      	adds	r3, #82	; 0x52
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe fd5d 	bl	80059fc <ld_dword>
 8006f42:	4603      	mov	r3, r0
 8006f44:	4a05      	ldr	r2, [pc, #20]	; (8006f5c <check_fs+0xa8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d101      	bne.n	8006f4e <check_fs+0x9a>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e000      	b.n	8006f50 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f4e:	2302      	movs	r3, #2
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	00544146 	.word	0x00544146
 8006f5c:	33544146 	.word	0x33544146

08006f60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b096      	sub	sp, #88	; 0x58
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff ff58 	bl	8006e2a <get_ldnumber>
 8006f7a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	da01      	bge.n	8006f86 <find_volume+0x26>
 8006f82:	230b      	movs	r3, #11
 8006f84:	e236      	b.n	80073f4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f86:	4aac      	ldr	r2, [pc, #688]	; (8007238 <find_volume+0x2d8>)
 8006f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f8e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <find_volume+0x3a>
 8006f96:	230c      	movs	r3, #12
 8006f98:	e22c      	b.n	80073f4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8006f9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f9c:	f7fe fe16 	bl	8005bcc <lock_fs>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <find_volume+0x4a>
 8006fa6:	230f      	movs	r3, #15
 8006fa8:	e224      	b.n	80073f4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	f023 0301 	bic.w	r3, r3, #1
 8006fb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01a      	beq.n	8006ff6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	785b      	ldrb	r3, [r3, #1]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe fc63 	bl	8005890 <disk_status>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006fd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10c      	bne.n	8006ff6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d007      	beq.n	8006ff2 <find_volume+0x92>
 8006fe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006fee:	230a      	movs	r3, #10
 8006ff0:	e200      	b.n	80073f4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e1fe      	b.n	80073f4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fc5b 	bl	80058c4 <disk_initialize>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007020:	2303      	movs	r3, #3
 8007022:	e1e7      	b.n	80073f4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d007      	beq.n	800703a <find_volume+0xda>
 800702a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007036:	230a      	movs	r3, #10
 8007038:	e1dc      	b.n	80073f4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800703e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007040:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007042:	f7ff ff37 	bl	8006eb4 <check_fs>
 8007046:	4603      	mov	r3, r0
 8007048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800704c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007050:	2b02      	cmp	r3, #2
 8007052:	d14b      	bne.n	80070ec <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007054:	2300      	movs	r3, #0
 8007056:	643b      	str	r3, [r7, #64]	; 0x40
 8007058:	e01f      	b.n	800709a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007068:	4413      	add	r3, r2
 800706a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	3304      	adds	r3, #4
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d006      	beq.n	8007084 <find_volume+0x124>
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	3308      	adds	r3, #8
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fcbe 	bl	80059fc <ld_dword>
 8007080:	4602      	mov	r2, r0
 8007082:	e000      	b.n	8007086 <find_volume+0x126>
 8007084:	2200      	movs	r2, #0
 8007086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800708e:	440b      	add	r3, r1
 8007090:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007096:	3301      	adds	r3, #1
 8007098:	643b      	str	r3, [r7, #64]	; 0x40
 800709a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800709c:	2b03      	cmp	r3, #3
 800709e:	d9dc      	bls.n	800705a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80070a0:	2300      	movs	r3, #0
 80070a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80070a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <find_volume+0x150>
 80070aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ac:	3b01      	subs	r3, #1
 80070ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80070b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80070b8:	4413      	add	r3, r2
 80070ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <find_volume+0x172>
 80070c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070ca:	f7ff fef3 	bl	8006eb4 <check_fs>
 80070ce:	4603      	mov	r3, r0
 80070d0:	e000      	b.n	80070d4 <find_volume+0x174>
 80070d2:	2303      	movs	r3, #3
 80070d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80070d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d905      	bls.n	80070ec <find_volume+0x18c>
 80070e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e2:	3301      	adds	r3, #1
 80070e4:	643b      	str	r3, [r7, #64]	; 0x40
 80070e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d9e1      	bls.n	80070b0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80070ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d101      	bne.n	80070f8 <find_volume+0x198>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e17d      	b.n	80073f4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80070f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d901      	bls.n	8007104 <find_volume+0x1a4>
 8007100:	230d      	movs	r3, #13
 8007102:	e177      	b.n	80073f4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	3334      	adds	r3, #52	; 0x34
 8007108:	330b      	adds	r3, #11
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fc5e 	bl	80059cc <ld_word>
 8007110:	4603      	mov	r3, r0
 8007112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007116:	d001      	beq.n	800711c <find_volume+0x1bc>
 8007118:	230d      	movs	r3, #13
 800711a:	e16b      	b.n	80073f4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	3334      	adds	r3, #52	; 0x34
 8007120:	3316      	adds	r3, #22
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fc52 	bl	80059cc <ld_word>
 8007128:	4603      	mov	r3, r0
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800712c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d106      	bne.n	8007140 <find_volume+0x1e0>
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	3334      	adds	r3, #52	; 0x34
 8007136:	3324      	adds	r3, #36	; 0x24
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fc5f 	bl	80059fc <ld_dword>
 800713e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007144:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	789b      	ldrb	r3, [r3, #2]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d005      	beq.n	8007164 <find_volume+0x204>
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	789b      	ldrb	r3, [r3, #2]
 800715c:	2b02      	cmp	r3, #2
 800715e:	d001      	beq.n	8007164 <find_volume+0x204>
 8007160:	230d      	movs	r3, #13
 8007162:	e147      	b.n	80073f4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	789b      	ldrb	r3, [r3, #2]
 8007168:	461a      	mov	r2, r3
 800716a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716c:	fb02 f303 	mul.w	r3, r2, r3
 8007170:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007178:	b29a      	uxth	r2, r3
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007180:	895b      	ldrh	r3, [r3, #10]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <find_volume+0x238>
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	895b      	ldrh	r3, [r3, #10]
 800718a:	461a      	mov	r2, r3
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	895b      	ldrh	r3, [r3, #10]
 8007190:	3b01      	subs	r3, #1
 8007192:	4013      	ands	r3, r2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <find_volume+0x23c>
 8007198:	230d      	movs	r3, #13
 800719a:	e12b      	b.n	80073f4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	3334      	adds	r3, #52	; 0x34
 80071a0:	3311      	adds	r3, #17
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fc12 	bl	80059cc <ld_word>
 80071a8:	4603      	mov	r3, r0
 80071aa:	461a      	mov	r2, r3
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	891b      	ldrh	r3, [r3, #8]
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <find_volume+0x262>
 80071be:	230d      	movs	r3, #13
 80071c0:	e118      	b.n	80073f4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	3334      	adds	r3, #52	; 0x34
 80071c6:	3313      	adds	r3, #19
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe fbff 	bl	80059cc <ld_word>
 80071ce:	4603      	mov	r3, r0
 80071d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80071d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <find_volume+0x286>
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	3334      	adds	r3, #52	; 0x34
 80071dc:	3320      	adds	r3, #32
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fc0c 	bl	80059fc <ld_dword>
 80071e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	3334      	adds	r3, #52	; 0x34
 80071ea:	330e      	adds	r3, #14
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fe fbed 	bl	80059cc <ld_word>
 80071f2:	4603      	mov	r3, r0
 80071f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80071f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <find_volume+0x2a0>
 80071fc:	230d      	movs	r3, #13
 80071fe:	e0f9      	b.n	80073f4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007200:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007204:	4413      	add	r3, r2
 8007206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007208:	8912      	ldrh	r2, [r2, #8]
 800720a:	0912      	lsrs	r2, r2, #4
 800720c:	b292      	uxth	r2, r2
 800720e:	4413      	add	r3, r2
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	429a      	cmp	r2, r3
 8007218:	d201      	bcs.n	800721e <find_volume+0x2be>
 800721a:	230d      	movs	r3, #13
 800721c:	e0ea      	b.n	80073f4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800721e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007226:	8952      	ldrh	r2, [r2, #10]
 8007228:	fbb3 f3f2 	udiv	r3, r3, r2
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d103      	bne.n	800723c <find_volume+0x2dc>
 8007234:	230d      	movs	r3, #13
 8007236:	e0dd      	b.n	80073f4 <find_volume+0x494>
 8007238:	200002b0 	.word	0x200002b0
		fmt = FS_FAT32;
 800723c:	2303      	movs	r3, #3
 800723e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007248:	4293      	cmp	r3, r2
 800724a:	d802      	bhi.n	8007252 <find_volume+0x2f2>
 800724c:	2302      	movs	r3, #2
 800724e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007258:	4293      	cmp	r3, r2
 800725a:	d802      	bhi.n	8007262 <find_volume+0x302>
 800725c:	2301      	movs	r3, #1
 800725e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	1c9a      	adds	r2, r3, #2
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800726e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007270:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007274:	441a      	add	r2, r3
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800727a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	441a      	add	r2, r3
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007288:	2b03      	cmp	r3, #3
 800728a:	d11e      	bne.n	80072ca <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	3334      	adds	r3, #52	; 0x34
 8007290:	332a      	adds	r3, #42	; 0x2a
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe fb9a 	bl	80059cc <ld_word>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <find_volume+0x342>
 800729e:	230d      	movs	r3, #13
 80072a0:	e0a8      	b.n	80073f4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	891b      	ldrh	r3, [r3, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <find_volume+0x34e>
 80072aa:	230d      	movs	r3, #13
 80072ac:	e0a2      	b.n	80073f4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80072ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b0:	3334      	adds	r3, #52	; 0x34
 80072b2:	332c      	adds	r3, #44	; 0x2c
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe fba1 	bl	80059fc <ld_dword>
 80072ba:	4602      	mov	r2, r0
 80072bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072be:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	647b      	str	r3, [r7, #68]	; 0x44
 80072c8:	e01f      	b.n	800730a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	891b      	ldrh	r3, [r3, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <find_volume+0x376>
 80072d2:	230d      	movs	r3, #13
 80072d4:	e08e      	b.n	80073f4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072dc:	441a      	add	r2, r3
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80072e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d103      	bne.n	80072f2 <find_volume+0x392>
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	e00a      	b.n	8007308 <find_volume+0x3a8>
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	699a      	ldr	r2, [r3, #24]
 80072f6:	4613      	mov	r3, r2
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	4413      	add	r3, r2
 80072fc:	085a      	lsrs	r2, r3, #1
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007308:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	69da      	ldr	r2, [r3, #28]
 800730e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007310:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007314:	0a5b      	lsrs	r3, r3, #9
 8007316:	429a      	cmp	r2, r3
 8007318:	d201      	bcs.n	800731e <find_volume+0x3be>
 800731a:	230d      	movs	r3, #13
 800731c:	e06a      	b.n	80073f4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007324:	615a      	str	r2, [r3, #20]
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	695a      	ldr	r2, [r3, #20]
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007330:	2280      	movs	r2, #128	; 0x80
 8007332:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007338:	2b03      	cmp	r3, #3
 800733a:	d149      	bne.n	80073d0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	3334      	adds	r3, #52	; 0x34
 8007340:	3330      	adds	r3, #48	; 0x30
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fb42 	bl	80059cc <ld_word>
 8007348:	4603      	mov	r3, r0
 800734a:	2b01      	cmp	r3, #1
 800734c:	d140      	bne.n	80073d0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800734e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007350:	3301      	adds	r3, #1
 8007352:	4619      	mov	r1, r3
 8007354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007356:	f7fe fe1b 	bl	8005f90 <move_window>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d137      	bne.n	80073d0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	2200      	movs	r2, #0
 8007364:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	3334      	adds	r3, #52	; 0x34
 800736a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fb2c 	bl	80059cc <ld_word>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800737c:	429a      	cmp	r2, r3
 800737e:	d127      	bne.n	80073d0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	3334      	adds	r3, #52	; 0x34
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe fb39 	bl	80059fc <ld_dword>
 800738a:	4603      	mov	r3, r0
 800738c:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <find_volume+0x49c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d11e      	bne.n	80073d0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	3334      	adds	r3, #52	; 0x34
 8007396:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fb2e 	bl	80059fc <ld_dword>
 80073a0:	4603      	mov	r3, r0
 80073a2:	4a17      	ldr	r2, [pc, #92]	; (8007400 <find_volume+0x4a0>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d113      	bne.n	80073d0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	3334      	adds	r3, #52	; 0x34
 80073ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe fb23 	bl	80059fc <ld_dword>
 80073b6:	4602      	mov	r2, r0
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	3334      	adds	r3, #52	; 0x34
 80073c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fb19 	bl	80059fc <ld_dword>
 80073ca:	4602      	mov	r2, r0
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <find_volume+0x4a4>)
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	3301      	adds	r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	4b08      	ldr	r3, [pc, #32]	; (8007404 <find_volume+0x4a4>)
 80073e2:	801a      	strh	r2, [r3, #0]
 80073e4:	4b07      	ldr	r3, [pc, #28]	; (8007404 <find_volume+0x4a4>)
 80073e6:	881a      	ldrh	r2, [r3, #0]
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80073ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073ee:	f7fe fd67 	bl	8005ec0 <clear_lock>
#endif
	return FR_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3758      	adds	r7, #88	; 0x58
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	41615252 	.word	0x41615252
 8007400:	61417272 	.word	0x61417272
 8007404:	200002b4 	.word	0x200002b4

08007408 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007412:	2309      	movs	r3, #9
 8007414:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d02e      	beq.n	800747a <validate+0x72>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d02a      	beq.n	800747a <validate+0x72>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d025      	beq.n	800747a <validate+0x72>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	889a      	ldrh	r2, [r3, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	88db      	ldrh	r3, [r3, #6]
 8007438:	429a      	cmp	r2, r3
 800743a:	d11e      	bne.n	800747a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe fbc3 	bl	8005bcc <lock_fs>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d014      	beq.n	8007476 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fa1c 	bl	8005890 <disk_status>
 8007458:	4603      	mov	r3, r0
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <validate+0x60>
				res = FR_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]
 8007466:	e008      	b.n	800747a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fbc2 	bl	8005bf8 <unlock_fs>
 8007474:	e001      	b.n	800747a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007476:	230f      	movs	r3, #15
 8007478:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <validate+0x7e>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	e000      	b.n	8007488 <validate+0x80>
 8007486:	2300      	movs	r3, #0
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	6013      	str	r3, [r2, #0]
	return res;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80074aa:	f107 0310 	add.w	r3, r7, #16
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fcbb 	bl	8006e2a <get_ldnumber>
 80074b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da01      	bge.n	80074c0 <f_mount+0x28>
 80074bc:	230b      	movs	r3, #11
 80074be:	e048      	b.n	8007552 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80074c0:	4a26      	ldr	r2, [pc, #152]	; (800755c <f_mount+0xc4>)
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00f      	beq.n	80074f0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80074d0:	69b8      	ldr	r0, [r7, #24]
 80074d2:	f7fe fcf5 	bl	8005ec0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fef8 	bl	80082d0 <ff_del_syncobj>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <f_mount+0x52>
 80074e6:	2302      	movs	r3, #2
 80074e8:	e033      	b.n	8007552 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00f      	beq.n	8007516 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	330c      	adds	r3, #12
 8007504:	4619      	mov	r1, r3
 8007506:	4610      	mov	r0, r2
 8007508:	f000 fec7 	bl	800829a <ff_cre_syncobj>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <f_mount+0x7e>
 8007512:	2302      	movs	r3, #2
 8007514:	e01d      	b.n	8007552 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4910      	ldr	r1, [pc, #64]	; (800755c <f_mount+0xc4>)
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <f_mount+0x94>
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d001      	beq.n	8007530 <f_mount+0x98>
 800752c:	2300      	movs	r3, #0
 800752e:	e010      	b.n	8007552 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007530:	f107 010c 	add.w	r1, r7, #12
 8007534:	f107 0308 	add.w	r3, r7, #8
 8007538:	2200      	movs	r2, #0
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff fd10 	bl	8006f60 <find_volume>
 8007540:	4603      	mov	r3, r0
 8007542:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	7dfa      	ldrb	r2, [r7, #23]
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe fb54 	bl	8005bf8 <unlock_fs>
 8007550:	7dfb      	ldrb	r3, [r7, #23]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3720      	adds	r7, #32
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	200002b0 	.word	0x200002b0

08007560 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b098      	sub	sp, #96	; 0x60
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <f_open+0x18>
 8007574:	2309      	movs	r3, #9
 8007576:	e1b4      	b.n	80078e2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800757e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007580:	79fa      	ldrb	r2, [r7, #7]
 8007582:	f107 0110 	add.w	r1, r7, #16
 8007586:	f107 0308 	add.w	r3, r7, #8
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fce8 	bl	8006f60 <find_volume>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800759a:	2b00      	cmp	r3, #0
 800759c:	f040 8191 	bne.w	80078c2 <f_open+0x362>
		dj.obj.fs = fs;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	f107 0314 	add.w	r3, r7, #20
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fbcb 	bl	8006d48 <follow_path>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80075b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d11a      	bne.n	80075f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80075c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075c4:	b25b      	sxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da03      	bge.n	80075d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80075ca:	2306      	movs	r3, #6
 80075cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80075d0:	e011      	b.n	80075f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf14      	ite	ne
 80075dc:	2301      	movne	r3, #1
 80075de:	2300      	moveq	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	f107 0314 	add.w	r3, r7, #20
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fb20 	bl	8005c30 <chk_lock>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80075f6:	79fb      	ldrb	r3, [r7, #7]
 80075f8:	f003 031c 	and.w	r3, r3, #28
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d07f      	beq.n	8007700 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007604:	2b00      	cmp	r3, #0
 8007606:	d017      	beq.n	8007638 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007608:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800760c:	2b04      	cmp	r3, #4
 800760e:	d10e      	bne.n	800762e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007610:	f7fe fb6a 	bl	8005ce8 <enq_lock>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d006      	beq.n	8007628 <f_open+0xc8>
 800761a:	f107 0314 	add.w	r3, r7, #20
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff faae 	bl	8006b80 <dir_register>
 8007624:	4603      	mov	r3, r0
 8007626:	e000      	b.n	800762a <f_open+0xca>
 8007628:	2312      	movs	r3, #18
 800762a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	f043 0308 	orr.w	r3, r3, #8
 8007634:	71fb      	strb	r3, [r7, #7]
 8007636:	e010      	b.n	800765a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007638:	7ebb      	ldrb	r3, [r7, #26]
 800763a:	f003 0311 	and.w	r3, r3, #17
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <f_open+0xea>
					res = FR_DENIED;
 8007642:	2307      	movs	r3, #7
 8007644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007648:	e007      	b.n	800765a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <f_open+0xfa>
 8007654:	2308      	movs	r3, #8
 8007656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800765a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800765e:	2b00      	cmp	r3, #0
 8007660:	d168      	bne.n	8007734 <f_open+0x1d4>
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b00      	cmp	r3, #0
 800766a:	d063      	beq.n	8007734 <f_open+0x1d4>
				dw = GET_FATTIME();
 800766c:	f7fd fbd2 	bl	8004e14 <get_fattime>
 8007670:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007674:	330e      	adds	r3, #14
 8007676:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe f9fd 	bl	8005a78 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007680:	3316      	adds	r3, #22
 8007682:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe f9f7 	bl	8005a78 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	330b      	adds	r3, #11
 800768e:	2220      	movs	r2, #32
 8007690:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007696:	4611      	mov	r1, r2
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff f980 	bl	800699e <ld_clust>
 800769e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076a4:	2200      	movs	r2, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff f998 	bl	80069dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80076ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ae:	331c      	adds	r3, #28
 80076b0:	2100      	movs	r1, #0
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe f9e0 	bl	8005a78 <st_dword>
					fs->wflag = 1;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2201      	movs	r2, #1
 80076bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80076be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d037      	beq.n	8007734 <f_open+0x1d4>
						dw = fs->winsect;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80076ca:	f107 0314 	add.w	r3, r7, #20
 80076ce:	2200      	movs	r2, #0
 80076d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe feab 	bl	800642e <remove_chain>
 80076d8:	4603      	mov	r3, r0
 80076da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80076de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d126      	bne.n	8007734 <f_open+0x1d4>
							res = move_window(fs, dw);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fc50 	bl	8005f90 <move_window>
 80076f0:	4603      	mov	r3, r0
 80076f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076fa:	3a01      	subs	r2, #1
 80076fc:	611a      	str	r2, [r3, #16]
 80076fe:	e019      	b.n	8007734 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007704:	2b00      	cmp	r3, #0
 8007706:	d115      	bne.n	8007734 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007708:	7ebb      	ldrb	r3, [r7, #26]
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007712:	2304      	movs	r3, #4
 8007714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007718:	e00c      	b.n	8007734 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d007      	beq.n	8007734 <f_open+0x1d4>
 8007724:	7ebb      	ldrb	r3, [r7, #26]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <f_open+0x1d4>
						res = FR_DENIED;
 800772e:	2307      	movs	r3, #7
 8007730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007734:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007738:	2b00      	cmp	r3, #0
 800773a:	d128      	bne.n	800778e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	f003 0308 	and.w	r3, r3, #8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800774c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	f107 0314 	add.w	r3, r7, #20
 8007772:	4611      	mov	r1, r2
 8007774:	4618      	mov	r0, r3
 8007776:	f7fe fad9 	bl	8005d2c <inc_lock>
 800777a:	4602      	mov	r2, r0
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <f_open+0x22e>
 8007788:	2302      	movs	r3, #2
 800778a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800778e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007792:	2b00      	cmp	r3, #0
 8007794:	f040 8095 	bne.w	80078c2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800779c:	4611      	mov	r1, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff f8fd 	bl	800699e <ld_clust>
 80077a4:	4602      	mov	r2, r0
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80077aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ac:	331c      	adds	r3, #28
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe f924 	bl	80059fc <ld_dword>
 80077b4:	4602      	mov	r2, r0
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	88da      	ldrh	r2, [r3, #6]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	79fa      	ldrb	r2, [r7, #7]
 80077d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3330      	adds	r3, #48	; 0x30
 80077ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ee:	2100      	movs	r1, #0
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe f98e 	bl	8005b12 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	f003 0320 	and.w	r3, r3, #32
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d060      	beq.n	80078c2 <f_open+0x362>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d05c      	beq.n	80078c2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	895b      	ldrh	r3, [r3, #10]
 8007814:	025b      	lsls	r3, r3, #9
 8007816:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	657b      	str	r3, [r7, #84]	; 0x54
 8007824:	e016      	b.n	8007854 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fc6b 	bl	8006106 <get_fat>
 8007830:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007834:	2b01      	cmp	r3, #1
 8007836:	d802      	bhi.n	800783e <f_open+0x2de>
 8007838:	2302      	movs	r3, #2
 800783a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800783e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007844:	d102      	bne.n	800784c <f_open+0x2ec>
 8007846:	2301      	movs	r3, #1
 8007848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800784c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800784e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	657b      	str	r3, [r7, #84]	; 0x54
 8007854:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007858:	2b00      	cmp	r3, #0
 800785a:	d103      	bne.n	8007864 <f_open+0x304>
 800785c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800785e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007860:	429a      	cmp	r2, r3
 8007862:	d8e0      	bhi.n	8007826 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007868:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800786a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800786e:	2b00      	cmp	r3, #0
 8007870:	d127      	bne.n	80078c2 <f_open+0x362>
 8007872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007878:	2b00      	cmp	r3, #0
 800787a:	d022      	beq.n	80078c2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe fc21 	bl	80060c8 <clust2sect>
 8007886:	6478      	str	r0, [r7, #68]	; 0x44
 8007888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800788a:	2b00      	cmp	r3, #0
 800788c:	d103      	bne.n	8007896 <f_open+0x336>
						res = FR_INT_ERR;
 800788e:	2302      	movs	r3, #2
 8007890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007894:	e015      	b.n	80078c2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007898:	0a5a      	lsrs	r2, r3, #9
 800789a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800789c:	441a      	add	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	7858      	ldrb	r0, [r3, #1]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a1a      	ldr	r2, [r3, #32]
 80078b0:	2301      	movs	r3, #1
 80078b2:	f7fe f82d 	bl	8005910 <disk_read>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <f_open+0x362>
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80078c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <f_open+0x370>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80078d6:	4611      	mov	r1, r2
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe f98d 	bl	8005bf8 <unlock_fs>
 80078de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3760      	adds	r7, #96	; 0x60
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b08e      	sub	sp, #56	; 0x38
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	607a      	str	r2, [r7, #4]
 80078f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f107 0214 	add.w	r2, r7, #20
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f7ff fd7c 	bl	8007408 <validate>
 8007910:	4603      	mov	r3, r0
 8007912:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007916:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <f_read+0x44>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	7d5b      	ldrb	r3, [r3, #21]
 8007922:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007926:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800792a:	2b00      	cmp	r3, #0
 800792c:	d009      	beq.n	8007942 <f_read+0x58>
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f7fe f95e 	bl	8005bf8 <unlock_fs>
 800793c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007940:	e13d      	b.n	8007bbe <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	7d1b      	ldrb	r3, [r3, #20]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d106      	bne.n	800795c <f_read+0x72>
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2107      	movs	r1, #7
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe f950 	bl	8005bf8 <unlock_fs>
 8007958:	2307      	movs	r3, #7
 800795a:	e130      	b.n	8007bbe <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	429a      	cmp	r2, r3
 800796e:	f240 811c 	bls.w	8007baa <f_read+0x2c0>
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007976:	e118      	b.n	8007baa <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007980:	2b00      	cmp	r3, #0
 8007982:	f040 80e4 	bne.w	8007b4e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	0a5b      	lsrs	r3, r3, #9
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	8952      	ldrh	r2, [r2, #10]
 8007990:	3a01      	subs	r2, #1
 8007992:	4013      	ands	r3, r2
 8007994:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d139      	bne.n	8007a10 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	633b      	str	r3, [r7, #48]	; 0x30
 80079aa:	e013      	b.n	80079d4 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d007      	beq.n	80079c4 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	4619      	mov	r1, r3
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7fe fe34 	bl	8006628 <clmt_clust>
 80079c0:	6338      	str	r0, [r7, #48]	; 0x30
 80079c2:	e007      	b.n	80079d4 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	4619      	mov	r1, r3
 80079cc:	4610      	mov	r0, r2
 80079ce:	f7fe fb9a 	bl	8006106 <get_fat>
 80079d2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d809      	bhi.n	80079ee <f_read+0x104>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2202      	movs	r2, #2
 80079de:	755a      	strb	r2, [r3, #21]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2102      	movs	r1, #2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fe f907 	bl	8005bf8 <unlock_fs>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e0e7      	b.n	8007bbe <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079f4:	d109      	bne.n	8007a0a <f_read+0x120>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	755a      	strb	r2, [r3, #21]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2101      	movs	r1, #1
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe f8f9 	bl	8005bf8 <unlock_fs>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e0d9      	b.n	8007bbe <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f7fe fb55 	bl	80060c8 <clust2sect>
 8007a1e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <f_read+0x150>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	755a      	strb	r2, [r3, #21]
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2102      	movs	r1, #2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe f8e1 	bl	8005bf8 <unlock_fs>
 8007a36:	2302      	movs	r3, #2
 8007a38:	e0c1      	b.n	8007bbe <f_read+0x2d4>
			sect += csect;
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	0a5b      	lsrs	r3, r3, #9
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d03e      	beq.n	8007acc <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	4413      	add	r3, r2
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	8952      	ldrh	r2, [r2, #10]
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d905      	bls.n	8007a68 <f_read+0x17e>
					cc = fs->csize - csect;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	895b      	ldrh	r3, [r3, #10]
 8007a60:	461a      	mov	r2, r3
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	7858      	ldrb	r0, [r3, #1]
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a72:	f7fd ff4d 	bl	8005910 <disk_read>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d009      	beq.n	8007a90 <f_read+0x1a6>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	755a      	strb	r2, [r3, #21]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2101      	movs	r1, #1
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe f8b6 	bl	8005bf8 <unlock_fs>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e096      	b.n	8007bbe <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	7d1b      	ldrb	r3, [r3, #20]
 8007a94:	b25b      	sxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	da14      	bge.n	8007ac4 <f_read+0x1da>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6a1a      	ldr	r2, [r3, #32]
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d90d      	bls.n	8007ac4 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a1a      	ldr	r2, [r3, #32]
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	025b      	lsls	r3, r3, #9
 8007ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab4:	18d0      	adds	r0, r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3330      	adds	r3, #48	; 0x30
 8007aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007abe:	4619      	mov	r1, r3
 8007ac0:	f7fe f806 	bl	8005ad0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	025b      	lsls	r3, r3, #9
 8007ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007aca:	e05a      	b.n	8007b82 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d038      	beq.n	8007b48 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	7d1b      	ldrb	r3, [r3, #20]
 8007ada:	b25b      	sxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da1d      	bge.n	8007b1c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	7858      	ldrb	r0, [r3, #1]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a1a      	ldr	r2, [r3, #32]
 8007aee:	2301      	movs	r3, #1
 8007af0:	f7fd ff2e 	bl	8005950 <disk_write>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d009      	beq.n	8007b0e <f_read+0x224>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	755a      	strb	r2, [r3, #21]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2101      	movs	r1, #1
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe f877 	bl	8005bf8 <unlock_fs>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e057      	b.n	8007bbe <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	7d1b      	ldrb	r3, [r3, #20]
 8007b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	7858      	ldrb	r0, [r3, #1]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b26:	2301      	movs	r3, #1
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	f7fd fef1 	bl	8005910 <disk_read>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d009      	beq.n	8007b48 <f_read+0x25e>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	755a      	strb	r2, [r3, #21]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe f85a 	bl	8005bf8 <unlock_fs>
 8007b44:	2301      	movs	r3, #1
 8007b46:	e03a      	b.n	8007bbe <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d901      	bls.n	8007b68 <f_read+0x27e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b76:	4413      	add	r3, r2
 8007b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b7e:	f7fd ffa7 	bl	8005ad0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	4413      	add	r3, r2
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	699a      	ldr	r2, [r3, #24]
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	441a      	add	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	619a      	str	r2, [r3, #24]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9c:	441a      	add	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f47f aee3 	bne.w	8007978 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe f81e 	bl	8005bf8 <unlock_fs>
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3738      	adds	r7, #56	; 0x38
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b08c      	sub	sp, #48	; 0x30
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	60b9      	str	r1, [r7, #8]
 8007bd0:	607a      	str	r2, [r7, #4]
 8007bd2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f107 0210 	add.w	r2, r7, #16
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff fc0e 	bl	8007408 <validate>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d107      	bne.n	8007c0a <f_write+0x44>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	7d5b      	ldrb	r3, [r3, #21]
 8007bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <f_write+0x58>
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007c10:	4611      	mov	r1, r2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fd fff0 	bl	8005bf8 <unlock_fs>
 8007c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c1c:	e173      	b.n	8007f06 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	7d1b      	ldrb	r3, [r3, #20]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d106      	bne.n	8007c38 <f_write+0x72>
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2107      	movs	r1, #7
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fd ffe2 	bl	8005bf8 <unlock_fs>
 8007c34:	2307      	movs	r3, #7
 8007c36:	e166      	b.n	8007f06 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	441a      	add	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	f080 814b 	bcs.w	8007ee0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	43db      	mvns	r3, r3
 8007c50:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007c52:	e145      	b.n	8007ee0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f040 8101 	bne.w	8007e64 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	0a5b      	lsrs	r3, r3, #9
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	8952      	ldrh	r2, [r2, #10]
 8007c6c:	3a01      	subs	r2, #1
 8007c6e:	4013      	ands	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d14d      	bne.n	8007d14 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10c      	bne.n	8007c9a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11a      	bne.n	8007cc2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2100      	movs	r1, #0
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe fc31 	bl	80064f8 <create_chain>
 8007c96:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c98:	e013      	b.n	8007cc2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7fe fcbd 	bl	8006628 <clmt_clust>
 8007cae:	62b8      	str	r0, [r7, #40]	; 0x28
 8007cb0:	e007      	b.n	8007cc2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f7fe fc1c 	bl	80064f8 <create_chain>
 8007cc0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 8110 	beq.w	8007eea <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d109      	bne.n	8007ce4 <f_write+0x11e>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	755a      	strb	r2, [r3, #21]
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	2102      	movs	r1, #2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fd ff8c 	bl	8005bf8 <unlock_fs>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e110      	b.n	8007f06 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cea:	d109      	bne.n	8007d00 <f_write+0x13a>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	755a      	strb	r2, [r3, #21]
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fd ff7e 	bl	8005bf8 <unlock_fs>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e102      	b.n	8007f06 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d04:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d102      	bne.n	8007d14 <f_write+0x14e>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	7d1b      	ldrb	r3, [r3, #20]
 8007d18:	b25b      	sxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da1d      	bge.n	8007d5a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	7858      	ldrb	r0, [r3, #1]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a1a      	ldr	r2, [r3, #32]
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f7fd fe0f 	bl	8005950 <disk_write>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d009      	beq.n	8007d4c <f_write+0x186>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	755a      	strb	r2, [r3, #21]
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2101      	movs	r1, #1
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fd ff58 	bl	8005bf8 <unlock_fs>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e0dc      	b.n	8007f06 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	7d1b      	ldrb	r3, [r3, #20]
 8007d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f7fe f9b0 	bl	80060c8 <clust2sect>
 8007d68:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <f_write+0x1be>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2202      	movs	r2, #2
 8007d74:	755a      	strb	r2, [r3, #21]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	2102      	movs	r1, #2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fd ff3c 	bl	8005bf8 <unlock_fs>
 8007d80:	2302      	movs	r3, #2
 8007d82:	e0c0      	b.n	8007f06 <f_write+0x340>
			sect += csect;
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	4413      	add	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	0a5b      	lsrs	r3, r3, #9
 8007d90:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d041      	beq.n	8007e1c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	8952      	ldrh	r2, [r2, #10]
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d905      	bls.n	8007db2 <f_write+0x1ec>
					cc = fs->csize - csect;
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	895b      	ldrh	r3, [r3, #10]
 8007daa:	461a      	mov	r2, r3
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	7858      	ldrb	r0, [r3, #1]
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	69f9      	ldr	r1, [r7, #28]
 8007dbc:	f7fd fdc8 	bl	8005950 <disk_write>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d009      	beq.n	8007dda <f_write+0x214>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	755a      	strb	r2, [r3, #21]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	2101      	movs	r1, #1
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fd ff11 	bl	8005bf8 <unlock_fs>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e095      	b.n	8007f06 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a1a      	ldr	r2, [r3, #32]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	6a3a      	ldr	r2, [r7, #32]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d915      	bls.n	8007e14 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6a1a      	ldr	r2, [r3, #32]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	025b      	lsls	r3, r3, #9
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e00:	4619      	mov	r1, r3
 8007e02:	f7fd fe65 	bl	8005ad0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	7d1b      	ldrb	r3, [r3, #20]
 8007e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	025b      	lsls	r3, r3, #9
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007e1a:	e044      	b.n	8007ea6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d01b      	beq.n	8007e5e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	699a      	ldr	r2, [r3, #24]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d215      	bcs.n	8007e5e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	7858      	ldrb	r0, [r3, #1]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	f7fd fd66 	bl	8005910 <disk_read>
 8007e44:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	755a      	strb	r2, [r3, #21]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2101      	movs	r1, #1
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fd fecf 	bl	8005bf8 <unlock_fs>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e053      	b.n	8007f06 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007e70:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d901      	bls.n	8007e7e <f_write+0x2b8>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8c:	4413      	add	r3, r2
 8007e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e90:	69f9      	ldr	r1, [r7, #28]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fd fe1c 	bl	8005ad0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	7d1b      	ldrb	r3, [r3, #20]
 8007e9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	4413      	add	r3, r2
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	441a      	add	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	619a      	str	r2, [r3, #24]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	bf38      	it	cc
 8007ec6:	461a      	movcc	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	60da      	str	r2, [r3, #12]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	441a      	add	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f47f aeb6 	bne.w	8007c54 <f_write+0x8e>
 8007ee8:	e000      	b.n	8007eec <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007eea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	7d1b      	ldrb	r3, [r3, #20]
 8007ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2100      	movs	r1, #0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fd fe7a 	bl	8005bf8 <unlock_fs>
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3730      	adds	r7, #48	; 0x30
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b086      	sub	sp, #24
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f107 0208 	add.w	r2, r7, #8
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff fa72 	bl	8007408 <validate>
 8007f24:	4603      	mov	r3, r0
 8007f26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d16d      	bne.n	800800a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	7d1b      	ldrb	r3, [r3, #20]
 8007f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d067      	beq.n	800800a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	7d1b      	ldrb	r3, [r3, #20]
 8007f3e:	b25b      	sxtb	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	da1a      	bge.n	8007f7a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	7858      	ldrb	r0, [r3, #1]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a1a      	ldr	r2, [r3, #32]
 8007f52:	2301      	movs	r3, #1
 8007f54:	f7fd fcfc 	bl	8005950 <disk_write>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d006      	beq.n	8007f6c <f_sync+0x5e>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2101      	movs	r1, #1
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fd fe48 	bl	8005bf8 <unlock_fs>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e055      	b.n	8008018 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7d1b      	ldrb	r3, [r3, #20]
 8007f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007f7a:	f7fc ff4b 	bl	8004e14 <get_fattime>
 8007f7e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	4619      	mov	r1, r3
 8007f88:	4610      	mov	r0, r2
 8007f8a:	f7fe f801 	bl	8005f90 <move_window>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d138      	bne.n	800800a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	330b      	adds	r3, #11
 8007fa2:	781a      	ldrb	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	330b      	adds	r3, #11
 8007fa8:	f042 0220 	orr.w	r2, r2, #32
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6818      	ldr	r0, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68f9      	ldr	r1, [r7, #12]
 8007fbc:	f7fe fd0e 	bl	80069dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f103 021c 	add.w	r2, r3, #28
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4610      	mov	r0, r2
 8007fce:	f7fd fd53 	bl	8005a78 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3316      	adds	r3, #22
 8007fd6:	6939      	ldr	r1, [r7, #16]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fd fd4d 	bl	8005a78 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3312      	adds	r3, #18
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fd fd2c 	bl	8005a42 <st_word>
					fs->wflag = 1;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2201      	movs	r2, #1
 8007fee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fd fffa 	bl	8005fec <sync_fs>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7d1b      	ldrb	r3, [r3, #20]
 8008000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008004:	b2da      	uxtb	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	7dfa      	ldrb	r2, [r7, #23]
 800800e:	4611      	mov	r1, r2
 8008010:	4618      	mov	r0, r3
 8008012:	f7fd fdf1 	bl	8005bf8 <unlock_fs>
 8008016:	7dfb      	ldrb	r3, [r7, #23]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff ff70 	bl	8007f0e <f_sync>
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d11d      	bne.n	8008074 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f107 0208 	add.w	r2, r7, #8
 800803e:	4611      	mov	r1, r2
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff f9e1 	bl	8007408 <validate>
 8008046:	4603      	mov	r3, r0
 8008048:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d111      	bne.n	8008074 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	4618      	mov	r0, r3
 8008056:	f7fd fef7 	bl	8005e48 <dec_lock>
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d102      	bne.n	800806a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f7fd fdc2 	bl	8005bf8 <unlock_fs>
#endif
		}
	}
	return res;
 8008074:	7bfb      	ldrb	r3, [r7, #15]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b09e      	sub	sp, #120	; 0x78
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008086:	2300      	movs	r3, #0
 8008088:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800808a:	f107 010c 	add.w	r1, r7, #12
 800808e:	1d3b      	adds	r3, r7, #4
 8008090:	2202      	movs	r2, #2
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe ff64 	bl	8006f60 <find_volume>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80080a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f040 808e 	bne.w	80081c8 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe fe47 	bl	8006d48 <follow_path>
 80080ba:	4603      	mov	r3, r0
 80080bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80080c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d108      	bne.n	80080da <f_unlink+0x5c>
 80080c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80080cc:	2102      	movs	r1, #2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fd fdae 	bl	8005c30 <chk_lock>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80080da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d172      	bne.n	80081c8 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80080e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080e6:	b25b      	sxtb	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	da03      	bge.n	80080f4 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80080ec:	2306      	movs	r3, #6
 80080ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80080f2:	e008      	b.n	8008106 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80080f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008100:	2307      	movs	r3, #7
 8008102:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8008106:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800810a:	2b00      	cmp	r3, #0
 800810c:	d134      	bne.n	8008178 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008112:	4611      	mov	r1, r2
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fc42 	bl	800699e <ld_clust>
 800811a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800811c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008120:	f003 0310 	and.w	r3, r3, #16
 8008124:	2b00      	cmp	r3, #0
 8008126:	d027      	beq.n	8008178 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800812c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800812e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008130:	f107 0310 	add.w	r3, r7, #16
 8008134:	2100      	movs	r1, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe faaa 	bl	8006690 <dir_sdi>
 800813c:	4603      	mov	r3, r0
 800813e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8008142:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008146:	2b00      	cmp	r3, #0
 8008148:	d116      	bne.n	8008178 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800814a:	f107 0310 	add.w	r3, r7, #16
 800814e:	2100      	movs	r1, #0
 8008150:	4618      	mov	r0, r3
 8008152:	f7fe fc63 	bl	8006a1c <dir_read>
 8008156:	4603      	mov	r3, r0
 8008158:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800815c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008160:	2b00      	cmp	r3, #0
 8008162:	d102      	bne.n	800816a <f_unlink+0xec>
 8008164:	2307      	movs	r3, #7
 8008166:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800816a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800816e:	2b04      	cmp	r3, #4
 8008170:	d102      	bne.n	8008178 <f_unlink+0xfa>
 8008172:	2300      	movs	r3, #0
 8008174:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8008178:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800817c:	2b00      	cmp	r3, #0
 800817e:	d123      	bne.n	80081c8 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008180:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe fd2d 	bl	8006be4 <dir_remove>
 800818a:	4603      	mov	r3, r0
 800818c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008190:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10c      	bne.n	80081b2 <f_unlink+0x134>
 8008198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800819a:	2b00      	cmp	r3, #0
 800819c:	d009      	beq.n	80081b2 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800819e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081a2:	2200      	movs	r2, #0
 80081a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe f941 	bl	800642e <remove_chain>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80081b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d106      	bne.n	80081c8 <f_unlink+0x14a>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fd ff15 	bl	8005fec <sync_fs>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fd fd11 	bl	8005bf8 <unlock_fs>
 80081d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3778      	adds	r7, #120	; 0x78
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80081f2:	2301      	movs	r3, #1
 80081f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80081fa:	4b1f      	ldr	r3, [pc, #124]	; (8008278 <FATFS_LinkDriverEx+0x94>)
 80081fc:	7a5b      	ldrb	r3, [r3, #9]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	d131      	bne.n	8008268 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008204:	4b1c      	ldr	r3, [pc, #112]	; (8008278 <FATFS_LinkDriverEx+0x94>)
 8008206:	7a5b      	ldrb	r3, [r3, #9]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	461a      	mov	r2, r3
 800820c:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <FATFS_LinkDriverEx+0x94>)
 800820e:	2100      	movs	r1, #0
 8008210:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008212:	4b19      	ldr	r3, [pc, #100]	; (8008278 <FATFS_LinkDriverEx+0x94>)
 8008214:	7a5b      	ldrb	r3, [r3, #9]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	4a17      	ldr	r2, [pc, #92]	; (8008278 <FATFS_LinkDriverEx+0x94>)
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008222:	4b15      	ldr	r3, [pc, #84]	; (8008278 <FATFS_LinkDriverEx+0x94>)
 8008224:	7a5b      	ldrb	r3, [r3, #9]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	461a      	mov	r2, r3
 800822a:	4b13      	ldr	r3, [pc, #76]	; (8008278 <FATFS_LinkDriverEx+0x94>)
 800822c:	4413      	add	r3, r2
 800822e:	79fa      	ldrb	r2, [r7, #7]
 8008230:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008232:	4b11      	ldr	r3, [pc, #68]	; (8008278 <FATFS_LinkDriverEx+0x94>)
 8008234:	7a5b      	ldrb	r3, [r3, #9]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	b2d1      	uxtb	r1, r2
 800823c:	4a0e      	ldr	r2, [pc, #56]	; (8008278 <FATFS_LinkDriverEx+0x94>)
 800823e:	7251      	strb	r1, [r2, #9]
 8008240:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008242:	7dbb      	ldrb	r3, [r7, #22]
 8008244:	3330      	adds	r3, #48	; 0x30
 8008246:	b2da      	uxtb	r2, r3
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	3301      	adds	r3, #1
 8008250:	223a      	movs	r2, #58	; 0x3a
 8008252:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	3302      	adds	r3, #2
 8008258:	222f      	movs	r2, #47	; 0x2f
 800825a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	3303      	adds	r3, #3
 8008260:	2200      	movs	r2, #0
 8008262:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008268:	7dfb      	ldrb	r3, [r7, #23]
}
 800826a:	4618      	mov	r0, r3
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	200002d8 	.word	0x200002d8

0800827c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008286:	2200      	movs	r2, #0
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff ffaa 	bl	80081e4 <FATFS_LinkDriverEx>
 8008290:	4603      	mov	r3, r0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	4603      	mov	r3, r0
 80082a2:	6039      	str	r1, [r7, #0]
 80082a4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80082a6:	2200      	movs	r2, #0
 80082a8:	2101      	movs	r1, #1
 80082aa:	2001      	movs	r0, #1
 80082ac:	f000 fb44 	bl	8008938 <osSemaphoreNew>
 80082b0:	4602      	mov	r2, r0
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	bf14      	ite	ne
 80082be:	2301      	movne	r3, #1
 80082c0:	2300      	moveq	r3, #0
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	60fb      	str	r3, [r7, #12]

    return ret;
 80082c6:	68fb      	ldr	r3, [r7, #12]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fc4d 	bl	8008b78 <osSemaphoreDelete>
#endif
    return 1;
 80082de:	2301      	movs	r3, #1
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80082f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fba7 	bl	8008a4c <osSemaphoreAcquire>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8008304:	2301      	movs	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008308:	68fb      	ldr	r3, [r7, #12]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fbe8 	bl	8008af0 <osSemaphoreRelease>
#endif
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <__NVIC_SetPriority>:
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008338:	2b00      	cmp	r3, #0
 800833a:	db0a      	blt.n	8008352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	b2da      	uxtb	r2, r3
 8008340:	490c      	ldr	r1, [pc, #48]	; (8008374 <__NVIC_SetPriority+0x4c>)
 8008342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008346:	0112      	lsls	r2, r2, #4
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	440b      	add	r3, r1
 800834c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008350:	e00a      	b.n	8008368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	b2da      	uxtb	r2, r3
 8008356:	4908      	ldr	r1, [pc, #32]	; (8008378 <__NVIC_SetPriority+0x50>)
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	f003 030f 	and.w	r3, r3, #15
 800835e:	3b04      	subs	r3, #4
 8008360:	0112      	lsls	r2, r2, #4
 8008362:	b2d2      	uxtb	r2, r2
 8008364:	440b      	add	r3, r1
 8008366:	761a      	strb	r2, [r3, #24]
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	e000e100 	.word	0xe000e100
 8008378:	e000ed00 	.word	0xe000ed00

0800837c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <SysTick_Handler+0x1c>)
 8008382:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008384:	f002 fd52 	bl	800ae2c <xTaskGetSchedulerState>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	d001      	beq.n	8008392 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800838e:	f003 fcf3 	bl	800bd78 <xPortSysTickHandler>
  }
}
 8008392:	bf00      	nop
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	e000e010 	.word	0xe000e010

0800839c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80083a0:	2100      	movs	r1, #0
 80083a2:	f06f 0004 	mvn.w	r0, #4
 80083a6:	f7ff ffbf 	bl	8008328 <__NVIC_SetPriority>
#endif
}
 80083aa:	bf00      	nop
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083b6:	f3ef 8305 	mrs	r3, IPSR
 80083ba:	603b      	str	r3, [r7, #0]
  return(result);
 80083bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80083c2:	f06f 0305 	mvn.w	r3, #5
 80083c6:	607b      	str	r3, [r7, #4]
 80083c8:	e00c      	b.n	80083e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083ca:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <osKernelInitialize+0x44>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d105      	bne.n	80083de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083d2:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <osKernelInitialize+0x44>)
 80083d4:	2201      	movs	r2, #1
 80083d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083d8:	2300      	movs	r3, #0
 80083da:	607b      	str	r3, [r7, #4]
 80083dc:	e002      	b.n	80083e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80083de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083e4:	687b      	ldr	r3, [r7, #4]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	200002e4 	.word	0x200002e4

080083f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fe:	f3ef 8305 	mrs	r3, IPSR
 8008402:	603b      	str	r3, [r7, #0]
  return(result);
 8008404:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <osKernelStart+0x1a>
    stat = osErrorISR;
 800840a:	f06f 0305 	mvn.w	r3, #5
 800840e:	607b      	str	r3, [r7, #4]
 8008410:	e010      	b.n	8008434 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008412:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <osKernelStart+0x48>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d109      	bne.n	800842e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800841a:	f7ff ffbf 	bl	800839c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800841e:	4b08      	ldr	r3, [pc, #32]	; (8008440 <osKernelStart+0x48>)
 8008420:	2202      	movs	r2, #2
 8008422:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008424:	f002 f896 	bl	800a554 <vTaskStartScheduler>
      stat = osOK;
 8008428:	2300      	movs	r3, #0
 800842a:	607b      	str	r3, [r7, #4]
 800842c:	e002      	b.n	8008434 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800842e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008434:	687b      	ldr	r3, [r7, #4]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	200002e4 	.word	0x200002e4

08008444 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008444:	b580      	push	{r7, lr}
 8008446:	b08e      	sub	sp, #56	; 0x38
 8008448:	af04      	add	r7, sp, #16
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008450:	2300      	movs	r3, #0
 8008452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008454:	f3ef 8305 	mrs	r3, IPSR
 8008458:	617b      	str	r3, [r7, #20]
  return(result);
 800845a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800845c:	2b00      	cmp	r3, #0
 800845e:	d17e      	bne.n	800855e <osThreadNew+0x11a>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d07b      	beq.n	800855e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008466:	2380      	movs	r3, #128	; 0x80
 8008468:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800846a:	2318      	movs	r3, #24
 800846c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800846e:	2300      	movs	r3, #0
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008476:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d045      	beq.n	800850a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <osThreadNew+0x48>
        name = attr->name;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <osThreadNew+0x6e>
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	2b38      	cmp	r3, #56	; 0x38
 80084a4:	d805      	bhi.n	80084b2 <osThreadNew+0x6e>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <osThreadNew+0x72>
        return (NULL);
 80084b2:	2300      	movs	r3, #0
 80084b4:	e054      	b.n	8008560 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	089b      	lsrs	r3, r3, #2
 80084c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00e      	beq.n	80084ec <osThreadNew+0xa8>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	2bbb      	cmp	r3, #187	; 0xbb
 80084d4:	d90a      	bls.n	80084ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d006      	beq.n	80084ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <osThreadNew+0xa8>
        mem = 1;
 80084e6:	2301      	movs	r3, #1
 80084e8:	61bb      	str	r3, [r7, #24]
 80084ea:	e010      	b.n	800850e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10c      	bne.n	800850e <osThreadNew+0xca>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d108      	bne.n	800850e <osThreadNew+0xca>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <osThreadNew+0xca>
          mem = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	61bb      	str	r3, [r7, #24]
 8008508:	e001      	b.n	800850e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d110      	bne.n	8008536 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800851c:	9202      	str	r2, [sp, #8]
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	6a3a      	ldr	r2, [r7, #32]
 8008528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f001 fe26 	bl	800a17c <xTaskCreateStatic>
 8008530:	4603      	mov	r3, r0
 8008532:	613b      	str	r3, [r7, #16]
 8008534:	e013      	b.n	800855e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d110      	bne.n	800855e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	b29a      	uxth	r2, r3
 8008540:	f107 0310 	add.w	r3, r7, #16
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f001 fe71 	bl	800a236 <xTaskCreate>
 8008554:	4603      	mov	r3, r0
 8008556:	2b01      	cmp	r3, #1
 8008558:	d001      	beq.n	800855e <osThreadNew+0x11a>
            hTask = NULL;
 800855a:	2300      	movs	r3, #0
 800855c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800855e:	693b      	ldr	r3, [r7, #16]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3728      	adds	r7, #40	; 0x28
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008570:	f3ef 8305 	mrs	r3, IPSR
 8008574:	60bb      	str	r3, [r7, #8]
  return(result);
 8008576:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <osDelay+0x1c>
    stat = osErrorISR;
 800857c:	f06f 0305 	mvn.w	r3, #5
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e007      	b.n	8008594 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <osDelay+0x2c>
      vTaskDelay(ticks);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f001 ffac 	bl	800a4ec <vTaskDelay>
    }
  }

  return (stat);
 8008594:	68fb      	ldr	r3, [r7, #12]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f003 fa06 	bl	800b9b8 <pvTimerGetTimerID>
 80085ac:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <TimerCallback+0x22>
    callb->func (callb->arg);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	6852      	ldr	r2, [r2, #4]
 80085bc:	4610      	mov	r0, r2
 80085be:	4798      	blx	r3
  }
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08c      	sub	sp, #48	; 0x30
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	607a      	str	r2, [r7, #4]
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	460b      	mov	r3, r1
 80085d6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085dc:	f3ef 8305 	mrs	r3, IPSR
 80085e0:	613b      	str	r3, [r7, #16]
  return(result);
 80085e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d163      	bne.n	80086b0 <osTimerNew+0xe8>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d060      	beq.n	80086b0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80085ee:	2008      	movs	r0, #8
 80085f0:	f003 fc52 	bl	800be98 <pvPortMalloc>
 80085f4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d059      	beq.n	80086b0 <osTimerNew+0xe8>
      callb->func = func;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <osTimerNew+0x4c>
        reload = pdFALSE;
 800860e:	2300      	movs	r3, #0
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	e001      	b.n	8008618 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008614:	2301      	movs	r3, #1
 8008616:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800861c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800861e:	2300      	movs	r3, #0
 8008620:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01c      	beq.n	8008662 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <osTimerNew+0x6e>
          name = attr->name;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d006      	beq.n	800864c <osTimerNew+0x84>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	2b2b      	cmp	r3, #43	; 0x2b
 8008644:	d902      	bls.n	800864c <osTimerNew+0x84>
          mem = 1;
 8008646:	2301      	movs	r3, #1
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	e00c      	b.n	8008666 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d108      	bne.n	8008666 <osTimerNew+0x9e>
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d104      	bne.n	8008666 <osTimerNew+0x9e>
            mem = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	e001      	b.n	8008666 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d10c      	bne.n	8008686 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	4b12      	ldr	r3, [pc, #72]	; (80086bc <osTimerNew+0xf4>)
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	69fa      	ldr	r2, [r7, #28]
 800867a:	2101      	movs	r1, #1
 800867c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800867e:	f002 fe1c 	bl	800b2ba <xTimerCreateStatic>
 8008682:	6238      	str	r0, [r7, #32]
 8008684:	e00b      	b.n	800869e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d108      	bne.n	800869e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800868c:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <osTimerNew+0xf4>)
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	2101      	movs	r1, #1
 8008696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008698:	f002 fdee 	bl	800b278 <xTimerCreate>
 800869c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d105      	bne.n	80086b0 <osTimerNew+0xe8>
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <osTimerNew+0xe8>
        vPortFree (callb);
 80086aa:	6978      	ldr	r0, [r7, #20]
 80086ac:	f003 fcc0 	bl	800c030 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80086b0:	6a3b      	ldr	r3, [r7, #32]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3728      	adds	r7, #40	; 0x28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	0800859f 	.word	0x0800859f

080086c0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ce:	f3ef 8305 	mrs	r3, IPSR
 80086d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80086d4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <osTimerStart+0x22>
    stat = osErrorISR;
 80086da:	f06f 0305 	mvn.w	r3, #5
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	e017      	b.n	8008712 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d103      	bne.n	80086f0 <osTimerStart+0x30>
    stat = osErrorParameter;
 80086e8:	f06f 0303 	mvn.w	r3, #3
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	e010      	b.n	8008712 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80086f0:	2300      	movs	r3, #0
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	2300      	movs	r3, #0
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	2104      	movs	r1, #4
 80086fa:	6938      	ldr	r0, [r7, #16]
 80086fc:	f002 fe56 	bl	800b3ac <xTimerGenericCommand>
 8008700:	4603      	mov	r3, r0
 8008702:	2b01      	cmp	r3, #1
 8008704:	d102      	bne.n	800870c <osTimerStart+0x4c>
      stat = osOK;
 8008706:	2300      	movs	r3, #0
 8008708:	617b      	str	r3, [r7, #20]
 800870a:	e002      	b.n	8008712 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800870c:	f06f 0302 	mvn.w	r3, #2
 8008710:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008712:	697b      	ldr	r3, [r7, #20]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008728:	f3ef 8305 	mrs	r3, IPSR
 800872c:	60bb      	str	r3, [r7, #8]
  return(result);
 800872e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008730:	2b00      	cmp	r3, #0
 8008732:	d174      	bne.n	800881e <osMutexNew+0x102>
    if (attr != NULL) {
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <osMutexNew+0x26>
      type = attr->attr_bits;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	61bb      	str	r3, [r7, #24]
 8008740:	e001      	b.n	8008746 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <osMutexNew+0x3a>
      rmtx = 1U;
 8008750:	2301      	movs	r3, #1
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	e001      	b.n	800875a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d15c      	bne.n	800881e <osMutexNew+0x102>
      mem = -1;
 8008764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008768:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d015      	beq.n	800879c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d006      	beq.n	8008786 <osMutexNew+0x6a>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	2b4f      	cmp	r3, #79	; 0x4f
 800877e:	d902      	bls.n	8008786 <osMutexNew+0x6a>
          mem = 1;
 8008780:	2301      	movs	r3, #1
 8008782:	613b      	str	r3, [r7, #16]
 8008784:	e00c      	b.n	80087a0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d108      	bne.n	80087a0 <osMutexNew+0x84>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d104      	bne.n	80087a0 <osMutexNew+0x84>
            mem = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	e001      	b.n	80087a0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d112      	bne.n	80087cc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d007      	beq.n	80087bc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	4619      	mov	r1, r3
 80087b2:	2004      	movs	r0, #4
 80087b4:	f000 fd8d 	bl	80092d2 <xQueueCreateMutexStatic>
 80087b8:	61f8      	str	r0, [r7, #28]
 80087ba:	e016      	b.n	80087ea <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	4619      	mov	r1, r3
 80087c2:	2001      	movs	r0, #1
 80087c4:	f000 fd85 	bl	80092d2 <xQueueCreateMutexStatic>
 80087c8:	61f8      	str	r0, [r7, #28]
 80087ca:	e00e      	b.n	80087ea <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10b      	bne.n	80087ea <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80087d8:	2004      	movs	r0, #4
 80087da:	f000 fd62 	bl	80092a2 <xQueueCreateMutex>
 80087de:	61f8      	str	r0, [r7, #28]
 80087e0:	e003      	b.n	80087ea <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80087e2:	2001      	movs	r0, #1
 80087e4:	f000 fd5d 	bl	80092a2 <xQueueCreateMutex>
 80087e8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00c      	beq.n	800880a <osMutexNew+0xee>
        if (attr != NULL) {
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <osMutexNew+0xe2>
          name = attr->name;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	e001      	b.n	8008802 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008802:	68f9      	ldr	r1, [r7, #12]
 8008804:	69f8      	ldr	r0, [r7, #28]
 8008806:	f001 fc31 	bl	800a06c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d006      	beq.n	800881e <osMutexNew+0x102>
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f043 0301 	orr.w	r3, r3, #1
 800881c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800881e:	69fb      	ldr	r3, [r7, #28]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3720      	adds	r7, #32
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f023 0301 	bic.w	r3, r3, #1
 8008838:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008842:	2300      	movs	r3, #0
 8008844:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008846:	f3ef 8305 	mrs	r3, IPSR
 800884a:	60bb      	str	r3, [r7, #8]
  return(result);
 800884c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008852:	f06f 0305 	mvn.w	r3, #5
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e02c      	b.n	80088b4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d103      	bne.n	8008868 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008860:	f06f 0303 	mvn.w	r3, #3
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	e025      	b.n	80088b4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d011      	beq.n	8008892 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6938      	ldr	r0, [r7, #16]
 8008872:	f000 fd7d 	bl	8009370 <xQueueTakeMutexRecursive>
 8008876:	4603      	mov	r3, r0
 8008878:	2b01      	cmp	r3, #1
 800887a:	d01b      	beq.n	80088b4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008882:	f06f 0301 	mvn.w	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e014      	b.n	80088b4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800888a:	f06f 0302 	mvn.w	r3, #2
 800888e:	617b      	str	r3, [r7, #20]
 8008890:	e010      	b.n	80088b4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6938      	ldr	r0, [r7, #16]
 8008896:	f001 f911 	bl	8009abc <xQueueSemaphoreTake>
 800889a:	4603      	mov	r3, r0
 800889c:	2b01      	cmp	r3, #1
 800889e:	d009      	beq.n	80088b4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80088a6:	f06f 0301 	mvn.w	r3, #1
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	e002      	b.n	80088b4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80088ae:	f06f 0302 	mvn.w	r3, #2
 80088b2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80088b4:	697b      	ldr	r3, [r7, #20]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80088be:	b580      	push	{r7, lr}
 80088c0:	b086      	sub	sp, #24
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088da:	f3ef 8305 	mrs	r3, IPSR
 80088de:	60bb      	str	r3, [r7, #8]
  return(result);
 80088e0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <osMutexRelease+0x30>
    stat = osErrorISR;
 80088e6:	f06f 0305 	mvn.w	r3, #5
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	e01f      	b.n	800892e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d103      	bne.n	80088fc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80088f4:	f06f 0303 	mvn.w	r3, #3
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	e018      	b.n	800892e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d009      	beq.n	8008916 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008902:	6938      	ldr	r0, [r7, #16]
 8008904:	f000 fd00 	bl	8009308 <xQueueGiveMutexRecursive>
 8008908:	4603      	mov	r3, r0
 800890a:	2b01      	cmp	r3, #1
 800890c:	d00f      	beq.n	800892e <osMutexRelease+0x70>
        stat = osErrorResource;
 800890e:	f06f 0302 	mvn.w	r3, #2
 8008912:	617b      	str	r3, [r7, #20]
 8008914:	e00b      	b.n	800892e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008916:	2300      	movs	r3, #0
 8008918:	2200      	movs	r2, #0
 800891a:	2100      	movs	r1, #0
 800891c:	6938      	ldr	r0, [r7, #16]
 800891e:	f000 fdc7 	bl	80094b0 <xQueueGenericSend>
 8008922:	4603      	mov	r3, r0
 8008924:	2b01      	cmp	r3, #1
 8008926:	d002      	beq.n	800892e <osMutexRelease+0x70>
        stat = osErrorResource;
 8008928:	f06f 0302 	mvn.w	r3, #2
 800892c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800892e:	697b      	ldr	r3, [r7, #20]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af02      	add	r7, sp, #8
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008944:	2300      	movs	r3, #0
 8008946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008948:	f3ef 8305 	mrs	r3, IPSR
 800894c:	613b      	str	r3, [r7, #16]
  return(result);
 800894e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008950:	2b00      	cmp	r3, #0
 8008952:	d175      	bne.n	8008a40 <osSemaphoreNew+0x108>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d072      	beq.n	8008a40 <osSemaphoreNew+0x108>
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	429a      	cmp	r2, r3
 8008960:	d86e      	bhi.n	8008a40 <osSemaphoreNew+0x108>
    mem = -1;
 8008962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008966:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d015      	beq.n	800899a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d006      	beq.n	8008984 <osSemaphoreNew+0x4c>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	2b4f      	cmp	r3, #79	; 0x4f
 800897c:	d902      	bls.n	8008984 <osSemaphoreNew+0x4c>
        mem = 1;
 800897e:	2301      	movs	r3, #1
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	e00c      	b.n	800899e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d108      	bne.n	800899e <osSemaphoreNew+0x66>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d104      	bne.n	800899e <osSemaphoreNew+0x66>
          mem = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	61bb      	str	r3, [r7, #24]
 8008998:	e001      	b.n	800899e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089a4:	d04c      	beq.n	8008a40 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d128      	bne.n	80089fe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d10a      	bne.n	80089c8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	2203      	movs	r2, #3
 80089b8:	9200      	str	r2, [sp, #0]
 80089ba:	2200      	movs	r2, #0
 80089bc:	2100      	movs	r1, #0
 80089be:	2001      	movs	r0, #1
 80089c0:	f000 fb80 	bl	80090c4 <xQueueGenericCreateStatic>
 80089c4:	61f8      	str	r0, [r7, #28]
 80089c6:	e005      	b.n	80089d4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80089c8:	2203      	movs	r2, #3
 80089ca:	2100      	movs	r1, #0
 80089cc:	2001      	movs	r0, #1
 80089ce:	f000 fbf1 	bl	80091b4 <xQueueGenericCreate>
 80089d2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d022      	beq.n	8008a20 <osSemaphoreNew+0xe8>
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01f      	beq.n	8008a20 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80089e0:	2300      	movs	r3, #0
 80089e2:	2200      	movs	r2, #0
 80089e4:	2100      	movs	r1, #0
 80089e6:	69f8      	ldr	r0, [r7, #28]
 80089e8:	f000 fd62 	bl	80094b0 <xQueueGenericSend>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d016      	beq.n	8008a20 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80089f2:	69f8      	ldr	r0, [r7, #28]
 80089f4:	f001 f9ee 	bl	8009dd4 <vQueueDelete>
            hSemaphore = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61fb      	str	r3, [r7, #28]
 80089fc:	e010      	b.n	8008a20 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d108      	bne.n	8008a16 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 fce5 	bl	80093dc <xQueueCreateCountingSemaphoreStatic>
 8008a12:	61f8      	str	r0, [r7, #28]
 8008a14:	e004      	b.n	8008a20 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008a16:	68b9      	ldr	r1, [r7, #8]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fd16 	bl	800944a <xQueueCreateCountingSemaphore>
 8008a1e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00c      	beq.n	8008a40 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	e001      	b.n	8008a38 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008a34:	2300      	movs	r3, #0
 8008a36:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008a38:	6979      	ldr	r1, [r7, #20]
 8008a3a:	69f8      	ldr	r0, [r7, #28]
 8008a3c:	f001 fb16 	bl	800a06c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008a40:	69fb      	ldr	r3, [r7, #28]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3720      	adds	r7, #32
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d103      	bne.n	8008a6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008a64:	f06f 0303 	mvn.w	r3, #3
 8008a68:	617b      	str	r3, [r7, #20]
 8008a6a:	e039      	b.n	8008ae0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6c:	f3ef 8305 	mrs	r3, IPSR
 8008a70:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a72:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d022      	beq.n	8008abe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008a7e:	f06f 0303 	mvn.w	r3, #3
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e02c      	b.n	8008ae0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008a8a:	f107 0308 	add.w	r3, r7, #8
 8008a8e:	461a      	mov	r2, r3
 8008a90:	2100      	movs	r1, #0
 8008a92:	6938      	ldr	r0, [r7, #16]
 8008a94:	f001 f91e 	bl	8009cd4 <xQueueReceiveFromISR>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d003      	beq.n	8008aa6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008a9e:	f06f 0302 	mvn.w	r3, #2
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	e01c      	b.n	8008ae0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d019      	beq.n	8008ae0 <osSemaphoreAcquire+0x94>
 8008aac:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <osSemaphoreAcquire+0xa0>)
 8008aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	e010      	b.n	8008ae0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6938      	ldr	r0, [r7, #16]
 8008ac2:	f000 fffb 	bl	8009abc <xQueueSemaphoreTake>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d009      	beq.n	8008ae0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008ad2:	f06f 0301 	mvn.w	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e002      	b.n	8008ae0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008ada:	f06f 0302 	mvn.w	r3, #2
 8008ade:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008ae0:	697b      	ldr	r3, [r7, #20]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	e000ed04 	.word	0xe000ed04

08008af0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d103      	bne.n	8008b0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008b06:	f06f 0303 	mvn.w	r3, #3
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	e02c      	b.n	8008b68 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b0e:	f3ef 8305 	mrs	r3, IPSR
 8008b12:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b14:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d01a      	beq.n	8008b50 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008b1e:	f107 0308 	add.w	r3, r7, #8
 8008b22:	4619      	mov	r1, r3
 8008b24:	6938      	ldr	r0, [r7, #16]
 8008b26:	f000 fe5c 	bl	80097e2 <xQueueGiveFromISR>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d003      	beq.n	8008b38 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008b30:	f06f 0302 	mvn.w	r3, #2
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	e017      	b.n	8008b68 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d014      	beq.n	8008b68 <osSemaphoreRelease+0x78>
 8008b3e:	4b0d      	ldr	r3, [pc, #52]	; (8008b74 <osSemaphoreRelease+0x84>)
 8008b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	e00b      	b.n	8008b68 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008b50:	2300      	movs	r3, #0
 8008b52:	2200      	movs	r2, #0
 8008b54:	2100      	movs	r1, #0
 8008b56:	6938      	ldr	r0, [r7, #16]
 8008b58:	f000 fcaa 	bl	80094b0 <xQueueGenericSend>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d002      	beq.n	8008b68 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008b62:	f06f 0302 	mvn.w	r3, #2
 8008b66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008b68:	697b      	ldr	r3, [r7, #20]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	e000ed04 	.word	0xe000ed04

08008b78 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b84:	f3ef 8305 	mrs	r3, IPSR
 8008b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d003      	beq.n	8008b98 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008b90:	f06f 0305 	mvn.w	r3, #5
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e00e      	b.n	8008bb6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d103      	bne.n	8008ba6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008b9e:	f06f 0303 	mvn.w	r3, #3
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	e007      	b.n	8008bb6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008ba6:	6938      	ldr	r0, [r7, #16]
 8008ba8:	f001 fa8a 	bl	800a0c0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008bb0:	6938      	ldr	r0, [r7, #16]
 8008bb2:	f001 f90f 	bl	8009dd4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008bb6:	697b      	ldr	r3, [r7, #20]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	; 0x28
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bd0:	f3ef 8305 	mrs	r3, IPSR
 8008bd4:	613b      	str	r3, [r7, #16]
  return(result);
 8008bd6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d15f      	bne.n	8008c9c <osMessageQueueNew+0xdc>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d05c      	beq.n	8008c9c <osMessageQueueNew+0xdc>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d059      	beq.n	8008c9c <osMessageQueueNew+0xdc>
    mem = -1;
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d029      	beq.n	8008c48 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d012      	beq.n	8008c22 <osMessageQueueNew+0x62>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	2b4f      	cmp	r3, #79	; 0x4f
 8008c02:	d90e      	bls.n	8008c22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00a      	beq.n	8008c22 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	695a      	ldr	r2, [r3, #20]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	68b9      	ldr	r1, [r7, #8]
 8008c14:	fb01 f303 	mul.w	r3, r1, r3
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d302      	bcc.n	8008c22 <osMessageQueueNew+0x62>
        mem = 1;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	61bb      	str	r3, [r7, #24]
 8008c20:	e014      	b.n	8008c4c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d110      	bne.n	8008c4c <osMessageQueueNew+0x8c>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10c      	bne.n	8008c4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d108      	bne.n	8008c4c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <osMessageQueueNew+0x8c>
          mem = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	e001      	b.n	8008c4c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d10b      	bne.n	8008c6a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	691a      	ldr	r2, [r3, #16]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	9100      	str	r1, [sp, #0]
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fa2f 	bl	80090c4 <xQueueGenericCreateStatic>
 8008c66:	61f8      	str	r0, [r7, #28]
 8008c68:	e008      	b.n	8008c7c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d105      	bne.n	8008c7c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008c70:	2200      	movs	r2, #0
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 fa9d 	bl	80091b4 <xQueueGenericCreate>
 8008c7a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00c      	beq.n	8008c9c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	e001      	b.n	8008c94 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008c90:	2300      	movs	r3, #0
 8008c92:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008c94:	6979      	ldr	r1, [r7, #20]
 8008c96:	69f8      	ldr	r0, [r7, #28]
 8008c98:	f001 f9e8 	bl	800a06c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008c9c:	69fb      	ldr	r3, [r7, #28]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3720      	adds	r7, #32
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cc0:	f3ef 8305 	mrs	r3, IPSR
 8008cc4:	617b      	str	r3, [r7, #20]
  return(result);
 8008cc6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d028      	beq.n	8008d1e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <osMessageQueuePut+0x36>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <osMessageQueuePut+0x36>
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008cde:	f06f 0303 	mvn.w	r3, #3
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	e038      	b.n	8008d58 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008cea:	f107 0210 	add.w	r2, r7, #16
 8008cee:	2300      	movs	r3, #0
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	69b8      	ldr	r0, [r7, #24]
 8008cf4:	f000 fcda 	bl	80096ac <xQueueGenericSendFromISR>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d003      	beq.n	8008d06 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008cfe:	f06f 0302 	mvn.w	r3, #2
 8008d02:	61fb      	str	r3, [r7, #28]
 8008d04:	e028      	b.n	8008d58 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d025      	beq.n	8008d58 <osMessageQueuePut+0xb0>
 8008d0c:	4b15      	ldr	r3, [pc, #84]	; (8008d64 <osMessageQueuePut+0xbc>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	e01c      	b.n	8008d58 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <osMessageQueuePut+0x82>
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d103      	bne.n	8008d32 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008d2a:	f06f 0303 	mvn.w	r3, #3
 8008d2e:	61fb      	str	r3, [r7, #28]
 8008d30:	e012      	b.n	8008d58 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d32:	2300      	movs	r3, #0
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	69b8      	ldr	r0, [r7, #24]
 8008d3a:	f000 fbb9 	bl	80094b0 <xQueueGenericSend>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d009      	beq.n	8008d58 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008d4a:	f06f 0301 	mvn.w	r3, #1
 8008d4e:	61fb      	str	r3, [r7, #28]
 8008d50:	e002      	b.n	8008d58 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008d52:	f06f 0302 	mvn.w	r3, #2
 8008d56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008d58:	69fb      	ldr	r3, [r7, #28]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3720      	adds	r7, #32
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d7e:	f3ef 8305 	mrs	r3, IPSR
 8008d82:	617b      	str	r3, [r7, #20]
  return(result);
 8008d84:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d028      	beq.n	8008ddc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d005      	beq.n	8008d9c <osMessageQueueGet+0x34>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <osMessageQueueGet+0x34>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008d9c:	f06f 0303 	mvn.w	r3, #3
 8008da0:	61fb      	str	r3, [r7, #28]
 8008da2:	e037      	b.n	8008e14 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008da8:	f107 0310 	add.w	r3, r7, #16
 8008dac:	461a      	mov	r2, r3
 8008dae:	68b9      	ldr	r1, [r7, #8]
 8008db0:	69b8      	ldr	r0, [r7, #24]
 8008db2:	f000 ff8f 	bl	8009cd4 <xQueueReceiveFromISR>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d003      	beq.n	8008dc4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008dbc:	f06f 0302 	mvn.w	r3, #2
 8008dc0:	61fb      	str	r3, [r7, #28]
 8008dc2:	e027      	b.n	8008e14 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d024      	beq.n	8008e14 <osMessageQueueGet+0xac>
 8008dca:	4b15      	ldr	r3, [pc, #84]	; (8008e20 <osMessageQueueGet+0xb8>)
 8008dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	e01b      	b.n	8008e14 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <osMessageQueueGet+0x80>
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008de8:	f06f 0303 	mvn.w	r3, #3
 8008dec:	61fb      	str	r3, [r7, #28]
 8008dee:	e011      	b.n	8008e14 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	68b9      	ldr	r1, [r7, #8]
 8008df4:	69b8      	ldr	r0, [r7, #24]
 8008df6:	f000 fd81 	bl	80098fc <xQueueReceive>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d009      	beq.n	8008e14 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008e06:	f06f 0301 	mvn.w	r3, #1
 8008e0a:	61fb      	str	r3, [r7, #28]
 8008e0c:	e002      	b.n	8008e14 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008e0e:	f06f 0302 	mvn.w	r3, #2
 8008e12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008e14:	69fb      	ldr	r3, [r7, #28]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	e000ed04 	.word	0xe000ed04

08008e24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4a07      	ldr	r2, [pc, #28]	; (8008e50 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4a06      	ldr	r2, [pc, #24]	; (8008e54 <vApplicationGetIdleTaskMemory+0x30>)
 8008e3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2280      	movs	r2, #128	; 0x80
 8008e40:	601a      	str	r2, [r3, #0]
}
 8008e42:	bf00      	nop
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	200002e8 	.word	0x200002e8
 8008e54:	200003a4 	.word	0x200003a4

08008e58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4a07      	ldr	r2, [pc, #28]	; (8008e84 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	4a06      	ldr	r2, [pc, #24]	; (8008e88 <vApplicationGetTimerTaskMemory+0x30>)
 8008e6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e76:	601a      	str	r2, [r3, #0]
}
 8008e78:	bf00      	nop
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	200005a4 	.word	0x200005a4
 8008e88:	20000660 	.word	0x20000660

08008e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f103 0208 	add.w	r2, r3, #8
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f103 0208 	add.w	r2, r3, #8
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f103 0208 	add.w	r2, r3, #8
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008eda:	bf00      	nop
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b085      	sub	sp, #20
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	601a      	str	r2, [r3, #0]
}
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b085      	sub	sp, #20
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f44:	d103      	bne.n	8008f4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	e00c      	b.n	8008f68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3308      	adds	r3, #8
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e002      	b.n	8008f5c <vListInsert+0x2e>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d2f6      	bcs.n	8008f56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	601a      	str	r2, [r3, #0]
}
 8008f94:	bf00      	nop
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	6892      	ldr	r2, [r2, #8]
 8008fb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	6852      	ldr	r2, [r2, #4]
 8008fc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d103      	bne.n	8008fd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	1e5a      	subs	r2, r3, #1
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10a      	bne.n	800901e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800901e:	f002 fe19 	bl	800bc54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902a:	68f9      	ldr	r1, [r7, #12]
 800902c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800902e:	fb01 f303 	mul.w	r3, r1, r3
 8009032:	441a      	add	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904e:	3b01      	subs	r3, #1
 8009050:	68f9      	ldr	r1, [r7, #12]
 8009052:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009054:	fb01 f303 	mul.w	r3, r1, r3
 8009058:	441a      	add	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	22ff      	movs	r2, #255	; 0xff
 8009062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	22ff      	movs	r2, #255	; 0xff
 800906a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d114      	bne.n	800909e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01a      	beq.n	80090b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3310      	adds	r3, #16
 8009080:	4618      	mov	r0, r3
 8009082:	f001 fd01 	bl	800aa88 <xTaskRemoveFromEventList>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d012      	beq.n	80090b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800908c:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <xQueueGenericReset+0xcc>)
 800908e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	e009      	b.n	80090b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3310      	adds	r3, #16
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff fef2 	bl	8008e8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3324      	adds	r3, #36	; 0x24
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7ff feed 	bl	8008e8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090b2:	f002 fdff 	bl	800bcb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090b6:	2301      	movs	r3, #1
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	e000ed04 	.word	0xe000ed04

080090c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08e      	sub	sp, #56	; 0x38
 80090c8:	af02      	add	r7, sp, #8
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10a      	bne.n	80090ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090ea:	bf00      	nop
 80090ec:	e7fe      	b.n	80090ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009106:	bf00      	nop
 8009108:	e7fe      	b.n	8009108 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <xQueueGenericCreateStatic+0x52>
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <xQueueGenericCreateStatic+0x56>
 8009116:	2301      	movs	r3, #1
 8009118:	e000      	b.n	800911c <xQueueGenericCreateStatic+0x58>
 800911a:	2300      	movs	r3, #0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10a      	bne.n	8009136 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	623b      	str	r3, [r7, #32]
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d102      	bne.n	8009142 <xQueueGenericCreateStatic+0x7e>
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <xQueueGenericCreateStatic+0x82>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <xQueueGenericCreateStatic+0x84>
 8009146:	2300      	movs	r3, #0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10a      	bne.n	8009162 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	61fb      	str	r3, [r7, #28]
}
 800915e:	bf00      	nop
 8009160:	e7fe      	b.n	8009160 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009162:	2350      	movs	r3, #80	; 0x50
 8009164:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b50      	cmp	r3, #80	; 0x50
 800916a:	d00a      	beq.n	8009182 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	61bb      	str	r3, [r7, #24]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009182:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00d      	beq.n	80091aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	2201      	movs	r2, #1
 8009192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009196:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	4613      	mov	r3, r2
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f83f 	bl	8009228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3730      	adds	r7, #48	; 0x30
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08a      	sub	sp, #40	; 0x28
 80091b8:	af02      	add	r7, sp, #8
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10a      	bne.n	80091de <xQueueGenericCreate+0x2a>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	613b      	str	r3, [r7, #16]
}
 80091da:	bf00      	nop
 80091dc:	e7fe      	b.n	80091dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	fb02 f303 	mul.w	r3, r2, r3
 80091e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	3350      	adds	r3, #80	; 0x50
 80091ec:	4618      	mov	r0, r3
 80091ee:	f002 fe53 	bl	800be98 <pvPortMalloc>
 80091f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d011      	beq.n	800921e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	3350      	adds	r3, #80	; 0x50
 8009202:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800920c:	79fa      	ldrb	r2, [r7, #7]
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	4613      	mov	r3, r2
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 f805 	bl	8009228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800921e:	69bb      	ldr	r3, [r7, #24]
	}
 8009220:	4618      	mov	r0, r3
 8009222:	3720      	adds	r7, #32
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d103      	bne.n	8009244 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	69ba      	ldr	r2, [r7, #24]
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	e002      	b.n	800924a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009256:	2101      	movs	r1, #1
 8009258:	69b8      	ldr	r0, [r7, #24]
 800925a:	f7ff fecb 	bl	8008ff4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	78fa      	ldrb	r2, [r7, #3]
 8009262:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009266:	bf00      	nop
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00e      	beq.n	800929a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800928e:	2300      	movs	r3, #0
 8009290:	2200      	movs	r2, #0
 8009292:	2100      	movs	r1, #0
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f90b 	bl	80094b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b086      	sub	sp, #24
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	4603      	mov	r3, r0
 80092aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80092ac:	2301      	movs	r3, #1
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	2300      	movs	r3, #0
 80092b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80092b4:	79fb      	ldrb	r3, [r7, #7]
 80092b6:	461a      	mov	r2, r3
 80092b8:	6939      	ldr	r1, [r7, #16]
 80092ba:	6978      	ldr	r0, [r7, #20]
 80092bc:	f7ff ff7a 	bl	80091b4 <xQueueGenericCreate>
 80092c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f7ff ffd3 	bl	800926e <prvInitialiseMutex>

		return xNewQueue;
 80092c8:	68fb      	ldr	r3, [r7, #12]
	}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b088      	sub	sp, #32
 80092d6:	af02      	add	r7, sp, #8
 80092d8:	4603      	mov	r3, r0
 80092da:	6039      	str	r1, [r7, #0]
 80092dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80092de:	2301      	movs	r3, #1
 80092e0:	617b      	str	r3, [r7, #20]
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2200      	movs	r2, #0
 80092ee:	6939      	ldr	r1, [r7, #16]
 80092f0:	6978      	ldr	r0, [r7, #20]
 80092f2:	f7ff fee7 	bl	80090c4 <xQueueGenericCreateStatic>
 80092f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f7ff ffb8 	bl	800926e <prvInitialiseMutex>

		return xNewQueue;
 80092fe:	68fb      	ldr	r3, [r7, #12]
	}
 8009300:	4618      	mov	r0, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009308:	b590      	push	{r4, r7, lr}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10a      	bne.n	8009330 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	60fb      	str	r3, [r7, #12]
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	689c      	ldr	r4, [r3, #8]
 8009334:	f001 fd6a 	bl	800ae0c <xTaskGetCurrentTaskHandle>
 8009338:	4603      	mov	r3, r0
 800933a:	429c      	cmp	r4, r3
 800933c:	d111      	bne.n	8009362 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	1e5a      	subs	r2, r3, #1
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d105      	bne.n	800935c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009350:	2300      	movs	r3, #0
 8009352:	2200      	movs	r2, #0
 8009354:	2100      	movs	r1, #0
 8009356:	6938      	ldr	r0, [r7, #16]
 8009358:	f000 f8aa 	bl	80094b0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800935c:	2301      	movs	r3, #1
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	e001      	b.n	8009366 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009362:	2300      	movs	r3, #0
 8009364:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009366:	697b      	ldr	r3, [r7, #20]
	}
 8009368:	4618      	mov	r0, r3
 800936a:	371c      	adds	r7, #28
 800936c:	46bd      	mov	sp, r7
 800936e:	bd90      	pop	{r4, r7, pc}

08009370 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009370:	b590      	push	{r4, r7, lr}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10a      	bne.n	800939a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	60fb      	str	r3, [r7, #12]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	689c      	ldr	r4, [r3, #8]
 800939e:	f001 fd35 	bl	800ae0c <xTaskGetCurrentTaskHandle>
 80093a2:	4603      	mov	r3, r0
 80093a4:	429c      	cmp	r4, r3
 80093a6:	d107      	bne.n	80093b8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80093b2:	2301      	movs	r3, #1
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	e00c      	b.n	80093d2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6938      	ldr	r0, [r7, #16]
 80093bc:	f000 fb7e 	bl	8009abc <xQueueSemaphoreTake>
 80093c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d004      	beq.n	80093d2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80093d2:	697b      	ldr	r3, [r7, #20]
	}
 80093d4:	4618      	mov	r0, r3
 80093d6:	371c      	adds	r7, #28
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd90      	pop	{r4, r7, pc}

080093dc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08a      	sub	sp, #40	; 0x28
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10a      	bne.n	8009404 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	61bb      	str	r3, [r7, #24]
}
 8009400:	bf00      	nop
 8009402:	e7fe      	b.n	8009402 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	429a      	cmp	r2, r3
 800940a:	d90a      	bls.n	8009422 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	617b      	str	r3, [r7, #20]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009422:	2302      	movs	r3, #2
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	2100      	movs	r1, #0
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f7ff fe49 	bl	80090c4 <xQueueGenericCreateStatic>
 8009432:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009440:	69fb      	ldr	r3, [r7, #28]
	}
 8009442:	4618      	mov	r0, r3
 8009444:	3720      	adds	r7, #32
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800944a:	b580      	push	{r7, lr}
 800944c:	b086      	sub	sp, #24
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	613b      	str	r3, [r7, #16]
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	429a      	cmp	r2, r3
 8009476:	d90a      	bls.n	800948e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	60fb      	str	r3, [r7, #12]
}
 800948a:	bf00      	nop
 800948c:	e7fe      	b.n	800948c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800948e:	2202      	movs	r2, #2
 8009490:	2100      	movs	r1, #0
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff fe8e 	bl	80091b4 <xQueueGenericCreate>
 8009498:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80094a6:	697b      	ldr	r3, [r7, #20]
	}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08e      	sub	sp, #56	; 0x38
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <xQueueGenericSend+0x32>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094de:	bf00      	nop
 80094e0:	e7fe      	b.n	80094e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d103      	bne.n	80094f0 <xQueueGenericSend+0x40>
 80094e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <xQueueGenericSend+0x44>
 80094f0:	2301      	movs	r3, #1
 80094f2:	e000      	b.n	80094f6 <xQueueGenericSend+0x46>
 80094f4:	2300      	movs	r3, #0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10a      	bne.n	8009510 <xQueueGenericSend+0x60>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d103      	bne.n	800951e <xQueueGenericSend+0x6e>
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <xQueueGenericSend+0x72>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <xQueueGenericSend+0x74>
 8009522:	2300      	movs	r3, #0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <xQueueGenericSend+0x8e>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	623b      	str	r3, [r7, #32]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800953e:	f001 fc75 	bl	800ae2c <xTaskGetSchedulerState>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d102      	bne.n	800954e <xQueueGenericSend+0x9e>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <xQueueGenericSend+0xa2>
 800954e:	2301      	movs	r3, #1
 8009550:	e000      	b.n	8009554 <xQueueGenericSend+0xa4>
 8009552:	2300      	movs	r3, #0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10a      	bne.n	800956e <xQueueGenericSend+0xbe>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	61fb      	str	r3, [r7, #28]
}
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800956e:	f002 fb71 	bl	800bc54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957a:	429a      	cmp	r2, r3
 800957c:	d302      	bcc.n	8009584 <xQueueGenericSend+0xd4>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b02      	cmp	r3, #2
 8009582:	d129      	bne.n	80095d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958a:	f000 fc5e 	bl	8009e4a <prvCopyDataToQueue>
 800958e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	d010      	beq.n	80095ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	3324      	adds	r3, #36	; 0x24
 800959c:	4618      	mov	r0, r3
 800959e:	f001 fa73 	bl	800aa88 <xTaskRemoveFromEventList>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d013      	beq.n	80095d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095a8:	4b3f      	ldr	r3, [pc, #252]	; (80096a8 <xQueueGenericSend+0x1f8>)
 80095aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	e00a      	b.n	80095d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d007      	beq.n	80095d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095c0:	4b39      	ldr	r3, [pc, #228]	; (80096a8 <xQueueGenericSend+0x1f8>)
 80095c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095d0:	f002 fb70 	bl	800bcb4 <vPortExitCritical>
				return pdPASS;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e063      	b.n	80096a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d103      	bne.n	80095e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095de:	f002 fb69 	bl	800bcb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e05c      	b.n	80096a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d106      	bne.n	80095fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095ec:	f107 0314 	add.w	r3, r7, #20
 80095f0:	4618      	mov	r0, r3
 80095f2:	f001 faad 	bl	800ab50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095f6:	2301      	movs	r3, #1
 80095f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095fa:	f002 fb5b 	bl	800bcb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095fe:	f001 f819 	bl	800a634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009602:	f002 fb27 	bl	800bc54 <vPortEnterCritical>
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800960c:	b25b      	sxtb	r3, r3
 800960e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009612:	d103      	bne.n	800961c <xQueueGenericSend+0x16c>
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009622:	b25b      	sxtb	r3, r3
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009628:	d103      	bne.n	8009632 <xQueueGenericSend+0x182>
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009632:	f002 fb3f 	bl	800bcb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009636:	1d3a      	adds	r2, r7, #4
 8009638:	f107 0314 	add.w	r3, r7, #20
 800963c:	4611      	mov	r1, r2
 800963e:	4618      	mov	r0, r3
 8009640:	f001 fa9c 	bl	800ab7c <xTaskCheckForTimeOut>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d124      	bne.n	8009694 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800964a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800964c:	f000 fcf5 	bl	800a03a <prvIsQueueFull>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d018      	beq.n	8009688 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	3310      	adds	r3, #16
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f001 f9c2 	bl	800a9e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009666:	f000 fc80 	bl	8009f6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800966a:	f000 fff1 	bl	800a650 <xTaskResumeAll>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	f47f af7c 	bne.w	800956e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009676:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <xQueueGenericSend+0x1f8>)
 8009678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	e772      	b.n	800956e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800968a:	f000 fc6e 	bl	8009f6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800968e:	f000 ffdf 	bl	800a650 <xTaskResumeAll>
 8009692:	e76c      	b.n	800956e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009696:	f000 fc68 	bl	8009f6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800969a:	f000 ffd9 	bl	800a650 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800969e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3738      	adds	r7, #56	; 0x38
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	e000ed04 	.word	0xe000ed04

080096ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b090      	sub	sp, #64	; 0x40
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d103      	bne.n	80096e8 <xQueueGenericSendFromISR+0x3c>
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <xQueueGenericSendFromISR+0x40>
 80096e8:	2301      	movs	r3, #1
 80096ea:	e000      	b.n	80096ee <xQueueGenericSendFromISR+0x42>
 80096ec:	2300      	movs	r3, #0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d103      	bne.n	8009716 <xQueueGenericSendFromISR+0x6a>
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <xQueueGenericSendFromISR+0x6e>
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <xQueueGenericSendFromISR+0x70>
 800971a:	2300      	movs	r3, #0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10a      	bne.n	8009736 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	623b      	str	r3, [r7, #32]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009736:	f002 fb6f 	bl	800be18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800973a:	f3ef 8211 	mrs	r2, BASEPRI
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	61fa      	str	r2, [r7, #28]
 8009750:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009752:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009754:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975e:	429a      	cmp	r2, r3
 8009760:	d302      	bcc.n	8009768 <xQueueGenericSendFromISR+0xbc>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b02      	cmp	r3, #2
 8009766:	d12f      	bne.n	80097c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800976e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800977e:	f000 fb64 	bl	8009e4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009782:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800978a:	d112      	bne.n	80097b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	2b00      	cmp	r3, #0
 8009792:	d016      	beq.n	80097c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	3324      	adds	r3, #36	; 0x24
 8009798:	4618      	mov	r0, r3
 800979a:	f001 f975 	bl	800aa88 <xTaskRemoveFromEventList>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00e      	beq.n	80097c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00b      	beq.n	80097c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	601a      	str	r2, [r3, #0]
 80097b0:	e007      	b.n	80097c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097b6:	3301      	adds	r3, #1
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	b25a      	sxtb	r2, r3
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097c2:	2301      	movs	r3, #1
 80097c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80097c6:	e001      	b.n	80097cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097c8:	2300      	movs	r3, #0
 80097ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3740      	adds	r7, #64	; 0x40
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b08e      	sub	sp, #56	; 0x38
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <xQueueGiveFromISR+0x2a>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	623b      	str	r3, [r7, #32]
}
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800980c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00a      	beq.n	800982a <xQueueGiveFromISR+0x48>
	__asm volatile
 8009814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	61fb      	str	r3, [r7, #28]
}
 8009826:	bf00      	nop
 8009828:	e7fe      	b.n	8009828 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800982a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d103      	bne.n	800983a <xQueueGiveFromISR+0x58>
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <xQueueGiveFromISR+0x5c>
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <xQueueGiveFromISR+0x5e>
 800983e:	2300      	movs	r3, #0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10a      	bne.n	800985a <xQueueGiveFromISR+0x78>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	61bb      	str	r3, [r7, #24]
}
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800985a:	f002 fadd 	bl	800be18 <vPortValidateInterruptPriority>
	__asm volatile
 800985e:	f3ef 8211 	mrs	r2, BASEPRI
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	617a      	str	r2, [r7, #20]
 8009874:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009876:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009878:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009886:	429a      	cmp	r2, r3
 8009888:	d22b      	bcs.n	80098e2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800989c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a4:	d112      	bne.n	80098cc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d016      	beq.n	80098dc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	3324      	adds	r3, #36	; 0x24
 80098b2:	4618      	mov	r0, r3
 80098b4:	f001 f8e8 	bl	800aa88 <xTaskRemoveFromEventList>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00e      	beq.n	80098dc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	2201      	movs	r2, #1
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	e007      	b.n	80098dc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098d0:	3301      	adds	r3, #1
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	b25a      	sxtb	r2, r3
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80098dc:	2301      	movs	r3, #1
 80098de:	637b      	str	r3, [r7, #52]	; 0x34
 80098e0:	e001      	b.n	80098e6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	637b      	str	r3, [r7, #52]	; 0x34
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f383 8811 	msr	BASEPRI, r3
}
 80098f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3738      	adds	r7, #56	; 0x38
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08c      	sub	sp, #48	; 0x30
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009908:	2300      	movs	r3, #0
 800990a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <xQueueReceive+0x30>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	623b      	str	r3, [r7, #32]
}
 8009928:	bf00      	nop
 800992a:	e7fe      	b.n	800992a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d103      	bne.n	800993a <xQueueReceive+0x3e>
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <xQueueReceive+0x42>
 800993a:	2301      	movs	r3, #1
 800993c:	e000      	b.n	8009940 <xQueueReceive+0x44>
 800993e:	2300      	movs	r3, #0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <xQueueReceive+0x5e>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	61fb      	str	r3, [r7, #28]
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800995a:	f001 fa67 	bl	800ae2c <xTaskGetSchedulerState>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d102      	bne.n	800996a <xQueueReceive+0x6e>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <xQueueReceive+0x72>
 800996a:	2301      	movs	r3, #1
 800996c:	e000      	b.n	8009970 <xQueueReceive+0x74>
 800996e:	2300      	movs	r3, #0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10a      	bne.n	800998a <xQueueReceive+0x8e>
	__asm volatile
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	61bb      	str	r3, [r7, #24]
}
 8009986:	bf00      	nop
 8009988:	e7fe      	b.n	8009988 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800998a:	f002 f963 	bl	800bc54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009992:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	2b00      	cmp	r3, #0
 8009998:	d01f      	beq.n	80099da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999e:	f000 fabe 	bl	8009f1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	1e5a      	subs	r2, r3, #1
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00f      	beq.n	80099d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	3310      	adds	r3, #16
 80099b6:	4618      	mov	r0, r3
 80099b8:	f001 f866 	bl	800aa88 <xTaskRemoveFromEventList>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d007      	beq.n	80099d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099c2:	4b3d      	ldr	r3, [pc, #244]	; (8009ab8 <xQueueReceive+0x1bc>)
 80099c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099d2:	f002 f96f 	bl	800bcb4 <vPortExitCritical>
				return pdPASS;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e069      	b.n	8009aae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d103      	bne.n	80099e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099e0:	f002 f968 	bl	800bcb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e062      	b.n	8009aae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099ee:	f107 0310 	add.w	r3, r7, #16
 80099f2:	4618      	mov	r0, r3
 80099f4:	f001 f8ac 	bl	800ab50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099f8:	2301      	movs	r3, #1
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099fc:	f002 f95a 	bl	800bcb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a00:	f000 fe18 	bl	800a634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a04:	f002 f926 	bl	800bc54 <vPortEnterCritical>
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a0e:	b25b      	sxtb	r3, r3
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a14:	d103      	bne.n	8009a1e <xQueueReceive+0x122>
 8009a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a24:	b25b      	sxtb	r3, r3
 8009a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a2a:	d103      	bne.n	8009a34 <xQueueReceive+0x138>
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a34:	f002 f93e 	bl	800bcb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a38:	1d3a      	adds	r2, r7, #4
 8009a3a:	f107 0310 	add.w	r3, r7, #16
 8009a3e:	4611      	mov	r1, r2
 8009a40:	4618      	mov	r0, r3
 8009a42:	f001 f89b 	bl	800ab7c <xTaskCheckForTimeOut>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d123      	bne.n	8009a94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a4e:	f000 fade 	bl	800a00e <prvIsQueueEmpty>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d017      	beq.n	8009a88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	3324      	adds	r3, #36	; 0x24
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	4611      	mov	r1, r2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 ffc1 	bl	800a9e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a68:	f000 fa7f 	bl	8009f6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a6c:	f000 fdf0 	bl	800a650 <xTaskResumeAll>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d189      	bne.n	800998a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a76:	4b10      	ldr	r3, [pc, #64]	; (8009ab8 <xQueueReceive+0x1bc>)
 8009a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	e780      	b.n	800998a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a8a:	f000 fa6e 	bl	8009f6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a8e:	f000 fddf 	bl	800a650 <xTaskResumeAll>
 8009a92:	e77a      	b.n	800998a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a96:	f000 fa68 	bl	8009f6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a9a:	f000 fdd9 	bl	800a650 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa0:	f000 fab5 	bl	800a00e <prvIsQueueEmpty>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f43f af6f 	beq.w	800998a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009aac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3730      	adds	r7, #48	; 0x30
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	e000ed04 	.word	0xe000ed04

08009abc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08e      	sub	sp, #56	; 0x38
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	623b      	str	r3, [r7, #32]
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	61fb      	str	r3, [r7, #28]
}
 8009b08:	bf00      	nop
 8009b0a:	e7fe      	b.n	8009b0a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b0c:	f001 f98e 	bl	800ae2c <xTaskGetSchedulerState>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d102      	bne.n	8009b1c <xQueueSemaphoreTake+0x60>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <xQueueSemaphoreTake+0x64>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e000      	b.n	8009b22 <xQueueSemaphoreTake+0x66>
 8009b20:	2300      	movs	r3, #0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d10a      	bne.n	8009b3c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	61bb      	str	r3, [r7, #24]
}
 8009b38:	bf00      	nop
 8009b3a:	e7fe      	b.n	8009b3a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b3c:	f002 f88a 	bl	800bc54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b44:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d024      	beq.n	8009b96 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	1e5a      	subs	r2, r3, #1
 8009b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b52:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d104      	bne.n	8009b66 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009b5c:	f001 fadc 	bl	800b118 <pvTaskIncrementMutexHeldCount>
 8009b60:	4602      	mov	r2, r0
 8009b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b64:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00f      	beq.n	8009b8e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b70:	3310      	adds	r3, #16
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 ff88 	bl	800aa88 <xTaskRemoveFromEventList>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b7e:	4b54      	ldr	r3, [pc, #336]	; (8009cd0 <xQueueSemaphoreTake+0x214>)
 8009b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b8e:	f002 f891 	bl	800bcb4 <vPortExitCritical>
				return pdPASS;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e097      	b.n	8009cc6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d111      	bne.n	8009bc0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00a      	beq.n	8009bb8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	617b      	str	r3, [r7, #20]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009bb8:	f002 f87c 	bl	800bcb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e082      	b.n	8009cc6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bc6:	f107 030c 	add.w	r3, r7, #12
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 ffc0 	bl	800ab50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bd4:	f002 f86e 	bl	800bcb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bd8:	f000 fd2c 	bl	800a634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bdc:	f002 f83a 	bl	800bc54 <vPortEnterCritical>
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009be6:	b25b      	sxtb	r3, r3
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bec:	d103      	bne.n	8009bf6 <xQueueSemaphoreTake+0x13a>
 8009bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bfc:	b25b      	sxtb	r3, r3
 8009bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c02:	d103      	bne.n	8009c0c <xQueueSemaphoreTake+0x150>
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c0c:	f002 f852 	bl	800bcb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c10:	463a      	mov	r2, r7
 8009c12:	f107 030c 	add.w	r3, r7, #12
 8009c16:	4611      	mov	r1, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 ffaf 	bl	800ab7c <xTaskCheckForTimeOut>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d132      	bne.n	8009c8a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c26:	f000 f9f2 	bl	800a00e <prvIsQueueEmpty>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d026      	beq.n	8009c7e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d109      	bne.n	8009c4c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009c38:	f002 f80c 	bl	800bc54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 f911 	bl	800ae68 <xTaskPriorityInherit>
 8009c46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009c48:	f002 f834 	bl	800bcb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4e:	3324      	adds	r3, #36	; 0x24
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	4611      	mov	r1, r2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fec7 	bl	800a9e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c5c:	f000 f985 	bl	8009f6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c60:	f000 fcf6 	bl	800a650 <xTaskResumeAll>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f47f af68 	bne.w	8009b3c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009c6c:	4b18      	ldr	r3, [pc, #96]	; (8009cd0 <xQueueSemaphoreTake+0x214>)
 8009c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	e75e      	b.n	8009b3c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c80:	f000 f973 	bl	8009f6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c84:	f000 fce4 	bl	800a650 <xTaskResumeAll>
 8009c88:	e758      	b.n	8009b3c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c8c:	f000 f96d 	bl	8009f6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c90:	f000 fcde 	bl	800a650 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c96:	f000 f9ba 	bl	800a00e <prvIsQueueEmpty>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f43f af4d 	beq.w	8009b3c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00d      	beq.n	8009cc4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009ca8:	f001 ffd4 	bl	800bc54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009cac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009cae:	f000 f8b4 	bl	8009e1a <prvGetDisinheritPriorityAfterTimeout>
 8009cb2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 f9aa 	bl	800b014 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009cc0:	f001 fff8 	bl	800bcb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3738      	adds	r7, #56	; 0x38
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08e      	sub	sp, #56	; 0x38
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10a      	bne.n	8009d00 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	623b      	str	r3, [r7, #32]
}
 8009cfc:	bf00      	nop
 8009cfe:	e7fe      	b.n	8009cfe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d103      	bne.n	8009d0e <xQueueReceiveFromISR+0x3a>
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <xQueueReceiveFromISR+0x3e>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e000      	b.n	8009d14 <xQueueReceiveFromISR+0x40>
 8009d12:	2300      	movs	r3, #0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	61fb      	str	r3, [r7, #28]
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d2e:	f002 f873 	bl	800be18 <vPortValidateInterruptPriority>
	__asm volatile
 8009d32:	f3ef 8211 	mrs	r2, BASEPRI
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	61ba      	str	r2, [r7, #24]
 8009d48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009d4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d02f      	beq.n	8009dba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d68:	f000 f8d9 	bl	8009f1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	1e5a      	subs	r2, r3, #1
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009d74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d7c:	d112      	bne.n	8009da4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d016      	beq.n	8009db4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	3310      	adds	r3, #16
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 fe7c 	bl	800aa88 <xTaskRemoveFromEventList>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00e      	beq.n	8009db4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00b      	beq.n	8009db4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	601a      	str	r2, [r3, #0]
 8009da2:	e007      	b.n	8009db4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009da8:	3301      	adds	r3, #1
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	b25a      	sxtb	r2, r3
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009db4:	2301      	movs	r3, #1
 8009db6:	637b      	str	r3, [r7, #52]	; 0x34
 8009db8:	e001      	b.n	8009dbe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	f383 8811 	msr	BASEPRI, r3
}
 8009dc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3738      	adds	r7, #56	; 0x38
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10a      	bne.n	8009dfc <vQueueDelete+0x28>
	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	60bb      	str	r3, [r7, #8]
}
 8009df8:	bf00      	nop
 8009dfa:	e7fe      	b.n	8009dfa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 f95f 	bl	800a0c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d102      	bne.n	8009e12 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f002 f90f 	bl	800c030 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009e12:	bf00      	nop
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d006      	beq.n	8009e38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	e001      	b.n	8009e3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
	}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3714      	adds	r7, #20
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b086      	sub	sp, #24
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e56:	2300      	movs	r3, #0
 8009e58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10d      	bne.n	8009e84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d14d      	bne.n	8009f0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f001 f85f 	bl	800af38 <xTaskPriorityDisinherit>
 8009e7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	609a      	str	r2, [r3, #8]
 8009e82:	e043      	b.n	8009f0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d119      	bne.n	8009ebe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6858      	ldr	r0, [r3, #4]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e92:	461a      	mov	r2, r3
 8009e94:	68b9      	ldr	r1, [r7, #8]
 8009e96:	f002 fa15 	bl	800c2c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea2:	441a      	add	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d32b      	bcc.n	8009f0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	605a      	str	r2, [r3, #4]
 8009ebc:	e026      	b.n	8009f0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	68d8      	ldr	r0, [r3, #12]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	68b9      	ldr	r1, [r7, #8]
 8009eca:	f002 f9fb 	bl	800c2c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	68da      	ldr	r2, [r3, #12]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	425b      	negs	r3, r3
 8009ed8:	441a      	add	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68da      	ldr	r2, [r3, #12]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d207      	bcs.n	8009efa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	425b      	negs	r3, r3
 8009ef4:	441a      	add	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d105      	bne.n	8009f0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009f14:	697b      	ldr	r3, [r7, #20]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d018      	beq.n	8009f62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68da      	ldr	r2, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f38:	441a      	add	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d303      	bcc.n	8009f52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68d9      	ldr	r1, [r3, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	6838      	ldr	r0, [r7, #0]
 8009f5e:	f002 f9b1 	bl	800c2c4 <memcpy>
	}
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f72:	f001 fe6f 	bl	800bc54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f7e:	e011      	b.n	8009fa4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d012      	beq.n	8009fae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	3324      	adds	r3, #36	; 0x24
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 fd7b 	bl	800aa88 <xTaskRemoveFromEventList>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f98:	f000 fe52 	bl	800ac40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dce9      	bgt.n	8009f80 <prvUnlockQueue+0x16>
 8009fac:	e000      	b.n	8009fb0 <prvUnlockQueue+0x46>
					break;
 8009fae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	22ff      	movs	r2, #255	; 0xff
 8009fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009fb8:	f001 fe7c 	bl	800bcb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009fbc:	f001 fe4a 	bl	800bc54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fc6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fc8:	e011      	b.n	8009fee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d012      	beq.n	8009ff8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3310      	adds	r3, #16
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 fd56 	bl	800aa88 <xTaskRemoveFromEventList>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009fe2:	f000 fe2d 	bl	800ac40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	dce9      	bgt.n	8009fca <prvUnlockQueue+0x60>
 8009ff6:	e000      	b.n	8009ffa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ff8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	22ff      	movs	r2, #255	; 0xff
 8009ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a002:	f001 fe57 	bl	800bcb4 <vPortExitCritical>
}
 800a006:	bf00      	nop
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a016:	f001 fe1d 	bl	800bc54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d102      	bne.n	800a028 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a022:	2301      	movs	r3, #1
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	e001      	b.n	800a02c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a028:	2300      	movs	r3, #0
 800a02a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a02c:	f001 fe42 	bl	800bcb4 <vPortExitCritical>

	return xReturn;
 800a030:	68fb      	ldr	r3, [r7, #12]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a042:	f001 fe07 	bl	800bc54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04e:	429a      	cmp	r2, r3
 800a050:	d102      	bne.n	800a058 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a052:	2301      	movs	r3, #1
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	e001      	b.n	800a05c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a058:	2300      	movs	r3, #0
 800a05a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a05c:	f001 fe2a 	bl	800bcb4 <vPortExitCritical>

	return xReturn;
 800a060:	68fb      	ldr	r3, [r7, #12]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a076:	2300      	movs	r3, #0
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	e014      	b.n	800a0a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a07c:	4a0f      	ldr	r2, [pc, #60]	; (800a0bc <vQueueAddToRegistry+0x50>)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10b      	bne.n	800a0a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a088:	490c      	ldr	r1, [pc, #48]	; (800a0bc <vQueueAddToRegistry+0x50>)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a092:	4a0a      	ldr	r2, [pc, #40]	; (800a0bc <vQueueAddToRegistry+0x50>)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	4413      	add	r3, r2
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a09e:	e006      	b.n	800a0ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	60fb      	str	r3, [r7, #12]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b07      	cmp	r3, #7
 800a0aa:	d9e7      	bls.n	800a07c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	20005708 	.word	0x20005708

0800a0c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	e016      	b.n	800a0fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a0ce:	4a10      	ldr	r2, [pc, #64]	; (800a110 <vQueueUnregisterQueue+0x50>)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	4413      	add	r3, r2
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d10b      	bne.n	800a0f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a0de:	4a0c      	ldr	r2, [pc, #48]	; (800a110 <vQueueUnregisterQueue+0x50>)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a0e8:	4a09      	ldr	r2, [pc, #36]	; (800a110 <vQueueUnregisterQueue+0x50>)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	00db      	lsls	r3, r3, #3
 800a0ee:	4413      	add	r3, r2
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	605a      	str	r2, [r3, #4]
				break;
 800a0f4:	e006      	b.n	800a104 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b07      	cmp	r3, #7
 800a100:	d9e5      	bls.n	800a0ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	20005708 	.word	0x20005708

0800a114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a124:	f001 fd96 	bl	800bc54 <vPortEnterCritical>
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a12e:	b25b      	sxtb	r3, r3
 800a130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a134:	d103      	bne.n	800a13e <vQueueWaitForMessageRestricted+0x2a>
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a144:	b25b      	sxtb	r3, r3
 800a146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a14a:	d103      	bne.n	800a154 <vQueueWaitForMessageRestricted+0x40>
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a154:	f001 fdae 	bl	800bcb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d106      	bne.n	800a16e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	3324      	adds	r3, #36	; 0x24
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 fc61 	bl	800aa30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a16e:	6978      	ldr	r0, [r7, #20]
 800a170:	f7ff fefb 	bl	8009f6a <prvUnlockQueue>
	}
 800a174:	bf00      	nop
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08e      	sub	sp, #56	; 0x38
 800a180:	af04      	add	r7, sp, #16
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	623b      	str	r3, [r7, #32]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	61fb      	str	r3, [r7, #28]
}
 800a1be:	bf00      	nop
 800a1c0:	e7fe      	b.n	800a1c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1c2:	23bc      	movs	r3, #188	; 0xbc
 800a1c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2bbc      	cmp	r3, #188	; 0xbc
 800a1ca:	d00a      	beq.n	800a1e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	61bb      	str	r3, [r7, #24]
}
 800a1de:	bf00      	nop
 800a1e0:	e7fe      	b.n	800a1e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d01e      	beq.n	800a228 <xTaskCreateStatic+0xac>
 800a1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01b      	beq.n	800a228 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a202:	2300      	movs	r3, #0
 800a204:	9303      	str	r3, [sp, #12]
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	9302      	str	r3, [sp, #8]
 800a20a:	f107 0314 	add.w	r3, r7, #20
 800a20e:	9301      	str	r3, [sp, #4]
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	68b9      	ldr	r1, [r7, #8]
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 f850 	bl	800a2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a222:	f000 f8f3 	bl	800a40c <prvAddNewTaskToReadyList>
 800a226:	e001      	b.n	800a22c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a228:	2300      	movs	r3, #0
 800a22a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a22c:	697b      	ldr	r3, [r7, #20]
	}
 800a22e:	4618      	mov	r0, r3
 800a230:	3728      	adds	r7, #40	; 0x28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a236:	b580      	push	{r7, lr}
 800a238:	b08c      	sub	sp, #48	; 0x30
 800a23a:	af04      	add	r7, sp, #16
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	603b      	str	r3, [r7, #0]
 800a242:	4613      	mov	r3, r2
 800a244:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a246:	88fb      	ldrh	r3, [r7, #6]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f001 fe24 	bl	800be98 <pvPortMalloc>
 800a250:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00e      	beq.n	800a276 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a258:	20bc      	movs	r0, #188	; 0xbc
 800a25a:	f001 fe1d 	bl	800be98 <pvPortMalloc>
 800a25e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	631a      	str	r2, [r3, #48]	; 0x30
 800a26c:	e005      	b.n	800a27a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a26e:	6978      	ldr	r0, [r7, #20]
 800a270:	f001 fede 	bl	800c030 <vPortFree>
 800a274:	e001      	b.n	800a27a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a276:	2300      	movs	r3, #0
 800a278:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d017      	beq.n	800a2b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a288:	88fa      	ldrh	r2, [r7, #6]
 800a28a:	2300      	movs	r3, #0
 800a28c:	9303      	str	r3, [sp, #12]
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	9302      	str	r3, [sp, #8]
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68b9      	ldr	r1, [r7, #8]
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 f80e 	bl	800a2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2a4:	69f8      	ldr	r0, [r7, #28]
 800a2a6:	f000 f8b1 	bl	800a40c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	61bb      	str	r3, [r7, #24]
 800a2ae:	e002      	b.n	800a2b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a2b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2b6:	69bb      	ldr	r3, [r7, #24]
	}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3720      	adds	r7, #32
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	21a5      	movs	r1, #165	; 0xa5
 800a2da:	f002 f801 	bl	800c2e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	f023 0307 	bic.w	r3, r3, #7
 800a2f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	f003 0307 	and.w	r3, r3, #7
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00a      	beq.n	800a318 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	617b      	str	r3, [r7, #20]
}
 800a314:	bf00      	nop
 800a316:	e7fe      	b.n	800a316 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d01f      	beq.n	800a35e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a31e:	2300      	movs	r3, #0
 800a320:	61fb      	str	r3, [r7, #28]
 800a322:	e012      	b.n	800a34a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	4413      	add	r3, r2
 800a32a:	7819      	ldrb	r1, [r3, #0]
 800a32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	4413      	add	r3, r2
 800a332:	3334      	adds	r3, #52	; 0x34
 800a334:	460a      	mov	r2, r1
 800a336:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	4413      	add	r3, r2
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d006      	beq.n	800a352 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	3301      	adds	r3, #1
 800a348:	61fb      	str	r3, [r7, #28]
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	2b0f      	cmp	r3, #15
 800a34e:	d9e9      	bls.n	800a324 <prvInitialiseNewTask+0x64>
 800a350:	e000      	b.n	800a354 <prvInitialiseNewTask+0x94>
			{
				break;
 800a352:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a35c:	e003      	b.n	800a366 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	2b37      	cmp	r3, #55	; 0x37
 800a36a:	d901      	bls.n	800a370 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a36c:	2337      	movs	r3, #55	; 0x37
 800a36e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a374:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a37a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	2200      	movs	r2, #0
 800a380:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	3304      	adds	r3, #4
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fda0 	bl	8008ecc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38e:	3318      	adds	r3, #24
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe fd9b 	bl	8008ecc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	3354      	adds	r3, #84	; 0x54
 800a3c0:	2260      	movs	r2, #96	; 0x60
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f001 ff8b 	bl	800c2e0 <memset>
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	4a0c      	ldr	r2, [pc, #48]	; (800a400 <prvInitialiseNewTask+0x140>)
 800a3ce:	659a      	str	r2, [r3, #88]	; 0x58
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d2:	4a0c      	ldr	r2, [pc, #48]	; (800a404 <prvInitialiseNewTask+0x144>)
 800a3d4:	65da      	str	r2, [r3, #92]	; 0x5c
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	4a0b      	ldr	r2, [pc, #44]	; (800a408 <prvInitialiseNewTask+0x148>)
 800a3da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	68f9      	ldr	r1, [r7, #12]
 800a3e0:	69b8      	ldr	r0, [r7, #24]
 800a3e2:	f001 fb09 	bl	800b9f8 <pxPortInitialiseStack>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3f8:	bf00      	nop
 800a3fa:	3720      	adds	r7, #32
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	0800d220 	.word	0x0800d220
 800a404:	0800d240 	.word	0x0800d240
 800a408:	0800d200 	.word	0x0800d200

0800a40c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a414:	f001 fc1e 	bl	800bc54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a418:	4b2d      	ldr	r3, [pc, #180]	; (800a4d0 <prvAddNewTaskToReadyList+0xc4>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3301      	adds	r3, #1
 800a41e:	4a2c      	ldr	r2, [pc, #176]	; (800a4d0 <prvAddNewTaskToReadyList+0xc4>)
 800a420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a422:	4b2c      	ldr	r3, [pc, #176]	; (800a4d4 <prvAddNewTaskToReadyList+0xc8>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d109      	bne.n	800a43e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a42a:	4a2a      	ldr	r2, [pc, #168]	; (800a4d4 <prvAddNewTaskToReadyList+0xc8>)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a430:	4b27      	ldr	r3, [pc, #156]	; (800a4d0 <prvAddNewTaskToReadyList+0xc4>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d110      	bne.n	800a45a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a438:	f000 fc26 	bl	800ac88 <prvInitialiseTaskLists>
 800a43c:	e00d      	b.n	800a45a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a43e:	4b26      	ldr	r3, [pc, #152]	; (800a4d8 <prvAddNewTaskToReadyList+0xcc>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a446:	4b23      	ldr	r3, [pc, #140]	; (800a4d4 <prvAddNewTaskToReadyList+0xc8>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	429a      	cmp	r2, r3
 800a452:	d802      	bhi.n	800a45a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a454:	4a1f      	ldr	r2, [pc, #124]	; (800a4d4 <prvAddNewTaskToReadyList+0xc8>)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a45a:	4b20      	ldr	r3, [pc, #128]	; (800a4dc <prvAddNewTaskToReadyList+0xd0>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3301      	adds	r3, #1
 800a460:	4a1e      	ldr	r2, [pc, #120]	; (800a4dc <prvAddNewTaskToReadyList+0xd0>)
 800a462:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a464:	4b1d      	ldr	r3, [pc, #116]	; (800a4dc <prvAddNewTaskToReadyList+0xd0>)
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a470:	4b1b      	ldr	r3, [pc, #108]	; (800a4e0 <prvAddNewTaskToReadyList+0xd4>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	429a      	cmp	r2, r3
 800a476:	d903      	bls.n	800a480 <prvAddNewTaskToReadyList+0x74>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47c:	4a18      	ldr	r2, [pc, #96]	; (800a4e0 <prvAddNewTaskToReadyList+0xd4>)
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a484:	4613      	mov	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4413      	add	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4a15      	ldr	r2, [pc, #84]	; (800a4e4 <prvAddNewTaskToReadyList+0xd8>)
 800a48e:	441a      	add	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3304      	adds	r3, #4
 800a494:	4619      	mov	r1, r3
 800a496:	4610      	mov	r0, r2
 800a498:	f7fe fd25 	bl	8008ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a49c:	f001 fc0a 	bl	800bcb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4a0:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <prvAddNewTaskToReadyList+0xcc>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00e      	beq.n	800a4c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4a8:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <prvAddNewTaskToReadyList+0xc8>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d207      	bcs.n	800a4c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4b6:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <prvAddNewTaskToReadyList+0xdc>)
 800a4b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4c6:	bf00      	nop
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20000f34 	.word	0x20000f34
 800a4d4:	20000a60 	.word	0x20000a60
 800a4d8:	20000f40 	.word	0x20000f40
 800a4dc:	20000f50 	.word	0x20000f50
 800a4e0:	20000f3c 	.word	0x20000f3c
 800a4e4:	20000a64 	.word	0x20000a64
 800a4e8:	e000ed04 	.word	0xe000ed04

0800a4ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d017      	beq.n	800a52e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4fe:	4b13      	ldr	r3, [pc, #76]	; (800a54c <vTaskDelay+0x60>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <vTaskDelay+0x30>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60bb      	str	r3, [r7, #8]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a51c:	f000 f88a 	bl	800a634 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a520:	2100      	movs	r1, #0
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fe0c 	bl	800b140 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a528:	f000 f892 	bl	800a650 <xTaskResumeAll>
 800a52c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d107      	bne.n	800a544 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a534:	4b06      	ldr	r3, [pc, #24]	; (800a550 <vTaskDelay+0x64>)
 800a536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20000f5c 	.word	0x20000f5c
 800a550:	e000ed04 	.word	0xe000ed04

0800a554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08a      	sub	sp, #40	; 0x28
 800a558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a55a:	2300      	movs	r3, #0
 800a55c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a562:	463a      	mov	r2, r7
 800a564:	1d39      	adds	r1, r7, #4
 800a566:	f107 0308 	add.w	r3, r7, #8
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fc5a 	bl	8008e24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	9202      	str	r2, [sp, #8]
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	2300      	movs	r3, #0
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	2300      	movs	r3, #0
 800a580:	460a      	mov	r2, r1
 800a582:	4924      	ldr	r1, [pc, #144]	; (800a614 <vTaskStartScheduler+0xc0>)
 800a584:	4824      	ldr	r0, [pc, #144]	; (800a618 <vTaskStartScheduler+0xc4>)
 800a586:	f7ff fdf9 	bl	800a17c <xTaskCreateStatic>
 800a58a:	4603      	mov	r3, r0
 800a58c:	4a23      	ldr	r2, [pc, #140]	; (800a61c <vTaskStartScheduler+0xc8>)
 800a58e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a590:	4b22      	ldr	r3, [pc, #136]	; (800a61c <vTaskStartScheduler+0xc8>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a598:	2301      	movs	r3, #1
 800a59a:	617b      	str	r3, [r7, #20]
 800a59c:	e001      	b.n	800a5a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d102      	bne.n	800a5ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a5a8:	f000 fe1e 	bl	800b1e8 <xTimerCreateTimerTask>
 800a5ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d11b      	bne.n	800a5ec <vTaskStartScheduler+0x98>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	613b      	str	r3, [r7, #16]
}
 800a5c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5c8:	4b15      	ldr	r3, [pc, #84]	; (800a620 <vTaskStartScheduler+0xcc>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3354      	adds	r3, #84	; 0x54
 800a5ce:	4a15      	ldr	r2, [pc, #84]	; (800a624 <vTaskStartScheduler+0xd0>)
 800a5d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5d2:	4b15      	ldr	r3, [pc, #84]	; (800a628 <vTaskStartScheduler+0xd4>)
 800a5d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5da:	4b14      	ldr	r3, [pc, #80]	; (800a62c <vTaskStartScheduler+0xd8>)
 800a5dc:	2201      	movs	r2, #1
 800a5de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5e0:	4b13      	ldr	r3, [pc, #76]	; (800a630 <vTaskStartScheduler+0xdc>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5e6:	f001 fa93 	bl	800bb10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5ea:	e00e      	b.n	800a60a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5f2:	d10a      	bne.n	800a60a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	60fb      	str	r3, [r7, #12]
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <vTaskStartScheduler+0xb4>
}
 800a60a:	bf00      	nop
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	0800d058 	.word	0x0800d058
 800a618:	0800ac59 	.word	0x0800ac59
 800a61c:	20000f58 	.word	0x20000f58
 800a620:	20000a60 	.word	0x20000a60
 800a624:	20000028 	.word	0x20000028
 800a628:	20000f54 	.word	0x20000f54
 800a62c:	20000f40 	.word	0x20000f40
 800a630:	20000f38 	.word	0x20000f38

0800a634 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a634:	b480      	push	{r7}
 800a636:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a638:	4b04      	ldr	r3, [pc, #16]	; (800a64c <vTaskSuspendAll+0x18>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3301      	adds	r3, #1
 800a63e:	4a03      	ldr	r2, [pc, #12]	; (800a64c <vTaskSuspendAll+0x18>)
 800a640:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a642:	bf00      	nop
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	20000f5c 	.word	0x20000f5c

0800a650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a656:	2300      	movs	r3, #0
 800a658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a65a:	2300      	movs	r3, #0
 800a65c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a65e:	4b42      	ldr	r3, [pc, #264]	; (800a768 <xTaskResumeAll+0x118>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10a      	bne.n	800a67c <xTaskResumeAll+0x2c>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	603b      	str	r3, [r7, #0]
}
 800a678:	bf00      	nop
 800a67a:	e7fe      	b.n	800a67a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a67c:	f001 faea 	bl	800bc54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a680:	4b39      	ldr	r3, [pc, #228]	; (800a768 <xTaskResumeAll+0x118>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3b01      	subs	r3, #1
 800a686:	4a38      	ldr	r2, [pc, #224]	; (800a768 <xTaskResumeAll+0x118>)
 800a688:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a68a:	4b37      	ldr	r3, [pc, #220]	; (800a768 <xTaskResumeAll+0x118>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d162      	bne.n	800a758 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a692:	4b36      	ldr	r3, [pc, #216]	; (800a76c <xTaskResumeAll+0x11c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d05e      	beq.n	800a758 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a69a:	e02f      	b.n	800a6fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a69c:	4b34      	ldr	r3, [pc, #208]	; (800a770 <xTaskResumeAll+0x120>)
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3318      	adds	r3, #24
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fe fc79 	bl	8008fa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe fc74 	bl	8008fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6bc:	4b2d      	ldr	r3, [pc, #180]	; (800a774 <xTaskResumeAll+0x124>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d903      	bls.n	800a6cc <xTaskResumeAll+0x7c>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c8:	4a2a      	ldr	r2, [pc, #168]	; (800a774 <xTaskResumeAll+0x124>)
 800a6ca:	6013      	str	r3, [r2, #0]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4a27      	ldr	r2, [pc, #156]	; (800a778 <xTaskResumeAll+0x128>)
 800a6da:	441a      	add	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	3304      	adds	r3, #4
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	f7fe fbff 	bl	8008ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ec:	4b23      	ldr	r3, [pc, #140]	; (800a77c <xTaskResumeAll+0x12c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d302      	bcc.n	800a6fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a6f6:	4b22      	ldr	r3, [pc, #136]	; (800a780 <xTaskResumeAll+0x130>)
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6fc:	4b1c      	ldr	r3, [pc, #112]	; (800a770 <xTaskResumeAll+0x120>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1cb      	bne.n	800a69c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a70a:	f000 fb5f 	bl	800adcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a70e:	4b1d      	ldr	r3, [pc, #116]	; (800a784 <xTaskResumeAll+0x134>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d010      	beq.n	800a73c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a71a:	f000 f847 	bl	800a7ac <xTaskIncrementTick>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a724:	4b16      	ldr	r3, [pc, #88]	; (800a780 <xTaskResumeAll+0x130>)
 800a726:	2201      	movs	r2, #1
 800a728:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1f1      	bne.n	800a71a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a736:	4b13      	ldr	r3, [pc, #76]	; (800a784 <xTaskResumeAll+0x134>)
 800a738:	2200      	movs	r2, #0
 800a73a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a73c:	4b10      	ldr	r3, [pc, #64]	; (800a780 <xTaskResumeAll+0x130>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d009      	beq.n	800a758 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a744:	2301      	movs	r3, #1
 800a746:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a748:	4b0f      	ldr	r3, [pc, #60]	; (800a788 <xTaskResumeAll+0x138>)
 800a74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a758:	f001 faac 	bl	800bcb4 <vPortExitCritical>

	return xAlreadyYielded;
 800a75c:	68bb      	ldr	r3, [r7, #8]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	20000f5c 	.word	0x20000f5c
 800a76c:	20000f34 	.word	0x20000f34
 800a770:	20000ef4 	.word	0x20000ef4
 800a774:	20000f3c 	.word	0x20000f3c
 800a778:	20000a64 	.word	0x20000a64
 800a77c:	20000a60 	.word	0x20000a60
 800a780:	20000f48 	.word	0x20000f48
 800a784:	20000f44 	.word	0x20000f44
 800a788:	e000ed04 	.word	0xe000ed04

0800a78c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a792:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <xTaskGetTickCount+0x1c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a798:	687b      	ldr	r3, [r7, #4]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	20000f38 	.word	0x20000f38

0800a7ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7b6:	4b4f      	ldr	r3, [pc, #316]	; (800a8f4 <xTaskIncrementTick+0x148>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f040 808f 	bne.w	800a8de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7c0:	4b4d      	ldr	r3, [pc, #308]	; (800a8f8 <xTaskIncrementTick+0x14c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7c8:	4a4b      	ldr	r2, [pc, #300]	; (800a8f8 <xTaskIncrementTick+0x14c>)
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d120      	bne.n	800a816 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7d4:	4b49      	ldr	r3, [pc, #292]	; (800a8fc <xTaskIncrementTick+0x150>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00a      	beq.n	800a7f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	603b      	str	r3, [r7, #0]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <xTaskIncrementTick+0x46>
 800a7f4:	4b41      	ldr	r3, [pc, #260]	; (800a8fc <xTaskIncrementTick+0x150>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	60fb      	str	r3, [r7, #12]
 800a7fa:	4b41      	ldr	r3, [pc, #260]	; (800a900 <xTaskIncrementTick+0x154>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a3f      	ldr	r2, [pc, #252]	; (800a8fc <xTaskIncrementTick+0x150>)
 800a800:	6013      	str	r3, [r2, #0]
 800a802:	4a3f      	ldr	r2, [pc, #252]	; (800a900 <xTaskIncrementTick+0x154>)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	4b3e      	ldr	r3, [pc, #248]	; (800a904 <xTaskIncrementTick+0x158>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3301      	adds	r3, #1
 800a80e:	4a3d      	ldr	r2, [pc, #244]	; (800a904 <xTaskIncrementTick+0x158>)
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	f000 fadb 	bl	800adcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a816:	4b3c      	ldr	r3, [pc, #240]	; (800a908 <xTaskIncrementTick+0x15c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d349      	bcc.n	800a8b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a820:	4b36      	ldr	r3, [pc, #216]	; (800a8fc <xTaskIncrementTick+0x150>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d104      	bne.n	800a834 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a82a:	4b37      	ldr	r3, [pc, #220]	; (800a908 <xTaskIncrementTick+0x15c>)
 800a82c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a830:	601a      	str	r2, [r3, #0]
					break;
 800a832:	e03f      	b.n	800a8b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a834:	4b31      	ldr	r3, [pc, #196]	; (800a8fc <xTaskIncrementTick+0x150>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d203      	bcs.n	800a854 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a84c:	4a2e      	ldr	r2, [pc, #184]	; (800a908 <xTaskIncrementTick+0x15c>)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a852:	e02f      	b.n	800a8b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	3304      	adds	r3, #4
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe fba1 	bl	8008fa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a862:	2b00      	cmp	r3, #0
 800a864:	d004      	beq.n	800a870 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	3318      	adds	r3, #24
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fb98 	bl	8008fa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a874:	4b25      	ldr	r3, [pc, #148]	; (800a90c <xTaskIncrementTick+0x160>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d903      	bls.n	800a884 <xTaskIncrementTick+0xd8>
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a880:	4a22      	ldr	r2, [pc, #136]	; (800a90c <xTaskIncrementTick+0x160>)
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4a1f      	ldr	r2, [pc, #124]	; (800a910 <xTaskIncrementTick+0x164>)
 800a892:	441a      	add	r2, r3
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	3304      	adds	r3, #4
 800a898:	4619      	mov	r1, r3
 800a89a:	4610      	mov	r0, r2
 800a89c:	f7fe fb23 	bl	8008ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a4:	4b1b      	ldr	r3, [pc, #108]	; (800a914 <xTaskIncrementTick+0x168>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d3b8      	bcc.n	800a820 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8b2:	e7b5      	b.n	800a820 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8b4:	4b17      	ldr	r3, [pc, #92]	; (800a914 <xTaskIncrementTick+0x168>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ba:	4915      	ldr	r1, [pc, #84]	; (800a910 <xTaskIncrementTick+0x164>)
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	440b      	add	r3, r1
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d901      	bls.n	800a8d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a8d0:	4b11      	ldr	r3, [pc, #68]	; (800a918 <xTaskIncrementTick+0x16c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d007      	beq.n	800a8e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	e004      	b.n	800a8e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a8de:	4b0f      	ldr	r3, [pc, #60]	; (800a91c <xTaskIncrementTick+0x170>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	4a0d      	ldr	r2, [pc, #52]	; (800a91c <xTaskIncrementTick+0x170>)
 800a8e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8e8:	697b      	ldr	r3, [r7, #20]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20000f5c 	.word	0x20000f5c
 800a8f8:	20000f38 	.word	0x20000f38
 800a8fc:	20000eec 	.word	0x20000eec
 800a900:	20000ef0 	.word	0x20000ef0
 800a904:	20000f4c 	.word	0x20000f4c
 800a908:	20000f54 	.word	0x20000f54
 800a90c:	20000f3c 	.word	0x20000f3c
 800a910:	20000a64 	.word	0x20000a64
 800a914:	20000a60 	.word	0x20000a60
 800a918:	20000f48 	.word	0x20000f48
 800a91c:	20000f44 	.word	0x20000f44

0800a920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a926:	4b2a      	ldr	r3, [pc, #168]	; (800a9d0 <vTaskSwitchContext+0xb0>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a92e:	4b29      	ldr	r3, [pc, #164]	; (800a9d4 <vTaskSwitchContext+0xb4>)
 800a930:	2201      	movs	r2, #1
 800a932:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a934:	e046      	b.n	800a9c4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a936:	4b27      	ldr	r3, [pc, #156]	; (800a9d4 <vTaskSwitchContext+0xb4>)
 800a938:	2200      	movs	r2, #0
 800a93a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a93c:	4b26      	ldr	r3, [pc, #152]	; (800a9d8 <vTaskSwitchContext+0xb8>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	60fb      	str	r3, [r7, #12]
 800a942:	e010      	b.n	800a966 <vTaskSwitchContext+0x46>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10a      	bne.n	800a960 <vTaskSwitchContext+0x40>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	607b      	str	r3, [r7, #4]
}
 800a95c:	bf00      	nop
 800a95e:	e7fe      	b.n	800a95e <vTaskSwitchContext+0x3e>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3b01      	subs	r3, #1
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	491d      	ldr	r1, [pc, #116]	; (800a9dc <vTaskSwitchContext+0xbc>)
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	440b      	add	r3, r1
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0e4      	beq.n	800a944 <vTaskSwitchContext+0x24>
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4613      	mov	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4a15      	ldr	r2, [pc, #84]	; (800a9dc <vTaskSwitchContext+0xbc>)
 800a986:	4413      	add	r3, r2
 800a988:	60bb      	str	r3, [r7, #8]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	605a      	str	r2, [r3, #4]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	3308      	adds	r3, #8
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d104      	bne.n	800a9aa <vTaskSwitchContext+0x8a>
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	605a      	str	r2, [r3, #4]
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	4a0b      	ldr	r2, [pc, #44]	; (800a9e0 <vTaskSwitchContext+0xc0>)
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	4a08      	ldr	r2, [pc, #32]	; (800a9d8 <vTaskSwitchContext+0xb8>)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <vTaskSwitchContext+0xc0>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3354      	adds	r3, #84	; 0x54
 800a9c0:	4a08      	ldr	r2, [pc, #32]	; (800a9e4 <vTaskSwitchContext+0xc4>)
 800a9c2:	6013      	str	r3, [r2, #0]
}
 800a9c4:	bf00      	nop
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20000f5c 	.word	0x20000f5c
 800a9d4:	20000f48 	.word	0x20000f48
 800a9d8:	20000f3c 	.word	0x20000f3c
 800a9dc:	20000a64 	.word	0x20000a64
 800a9e0:	20000a60 	.word	0x20000a60
 800a9e4:	20000028 	.word	0x20000028

0800a9e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10a      	bne.n	800aa0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	60fb      	str	r3, [r7, #12]
}
 800aa0a:	bf00      	nop
 800aa0c:	e7fe      	b.n	800aa0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa0e:	4b07      	ldr	r3, [pc, #28]	; (800aa2c <vTaskPlaceOnEventList+0x44>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3318      	adds	r3, #24
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7fe fa89 	bl	8008f2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	6838      	ldr	r0, [r7, #0]
 800aa20:	f000 fb8e 	bl	800b140 <prvAddCurrentTaskToDelayedList>
}
 800aa24:	bf00      	nop
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	20000a60 	.word	0x20000a60

0800aa30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	617b      	str	r3, [r7, #20]
}
 800aa54:	bf00      	nop
 800aa56:	e7fe      	b.n	800aa56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa58:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	3318      	adds	r3, #24
 800aa5e:	4619      	mov	r1, r3
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f7fe fa40 	bl	8008ee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aa6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa72:	6879      	ldr	r1, [r7, #4]
 800aa74:	68b8      	ldr	r0, [r7, #8]
 800aa76:	f000 fb63 	bl	800b140 <prvAddCurrentTaskToDelayedList>
	}
 800aa7a:	bf00      	nop
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20000a60 	.word	0x20000a60

0800aa88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10a      	bne.n	800aab4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	60fb      	str	r3, [r7, #12]
}
 800aab0:	bf00      	nop
 800aab2:	e7fe      	b.n	800aab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	3318      	adds	r3, #24
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe fa71 	bl	8008fa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aabe:	4b1e      	ldr	r3, [pc, #120]	; (800ab38 <xTaskRemoveFromEventList+0xb0>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d11d      	bne.n	800ab02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	3304      	adds	r3, #4
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe fa68 	bl	8008fa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad4:	4b19      	ldr	r3, [pc, #100]	; (800ab3c <xTaskRemoveFromEventList+0xb4>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d903      	bls.n	800aae4 <xTaskRemoveFromEventList+0x5c>
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	4a16      	ldr	r2, [pc, #88]	; (800ab3c <xTaskRemoveFromEventList+0xb4>)
 800aae2:	6013      	str	r3, [r2, #0]
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae8:	4613      	mov	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4a13      	ldr	r2, [pc, #76]	; (800ab40 <xTaskRemoveFromEventList+0xb8>)
 800aaf2:	441a      	add	r2, r3
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4610      	mov	r0, r2
 800aafc:	f7fe f9f3 	bl	8008ee6 <vListInsertEnd>
 800ab00:	e005      	b.n	800ab0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	3318      	adds	r3, #24
 800ab06:	4619      	mov	r1, r3
 800ab08:	480e      	ldr	r0, [pc, #56]	; (800ab44 <xTaskRemoveFromEventList+0xbc>)
 800ab0a:	f7fe f9ec 	bl	8008ee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab12:	4b0d      	ldr	r3, [pc, #52]	; (800ab48 <xTaskRemoveFromEventList+0xc0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d905      	bls.n	800ab28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab20:	4b0a      	ldr	r3, [pc, #40]	; (800ab4c <xTaskRemoveFromEventList+0xc4>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	e001      	b.n	800ab2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab2c:	697b      	ldr	r3, [r7, #20]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20000f5c 	.word	0x20000f5c
 800ab3c:	20000f3c 	.word	0x20000f3c
 800ab40:	20000a64 	.word	0x20000a64
 800ab44:	20000ef4 	.word	0x20000ef4
 800ab48:	20000a60 	.word	0x20000a60
 800ab4c:	20000f48 	.word	0x20000f48

0800ab50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab58:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <vTaskInternalSetTimeOutState+0x24>)
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab60:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <vTaskInternalSetTimeOutState+0x28>)
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	605a      	str	r2, [r3, #4]
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	20000f4c 	.word	0x20000f4c
 800ab78:	20000f38 	.word	0x20000f38

0800ab7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b088      	sub	sp, #32
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10a      	bne.n	800aba2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ab8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	613b      	str	r3, [r7, #16]
}
 800ab9e:	bf00      	nop
 800aba0:	e7fe      	b.n	800aba0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	60fb      	str	r3, [r7, #12]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800abbe:	f001 f849 	bl	800bc54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abc2:	4b1d      	ldr	r3, [pc, #116]	; (800ac38 <xTaskCheckForTimeOut+0xbc>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	69ba      	ldr	r2, [r7, #24]
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abda:	d102      	bne.n	800abe2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800abdc:	2300      	movs	r3, #0
 800abde:	61fb      	str	r3, [r7, #28]
 800abe0:	e023      	b.n	800ac2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	4b15      	ldr	r3, [pc, #84]	; (800ac3c <xTaskCheckForTimeOut+0xc0>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	429a      	cmp	r2, r3
 800abec:	d007      	beq.n	800abfe <xTaskCheckForTimeOut+0x82>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d302      	bcc.n	800abfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abf8:	2301      	movs	r3, #1
 800abfa:	61fb      	str	r3, [r7, #28]
 800abfc:	e015      	b.n	800ac2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d20b      	bcs.n	800ac20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	1ad2      	subs	r2, r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7ff ff9b 	bl	800ab50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	61fb      	str	r3, [r7, #28]
 800ac1e:	e004      	b.n	800ac2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac26:	2301      	movs	r3, #1
 800ac28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac2a:	f001 f843 	bl	800bcb4 <vPortExitCritical>

	return xReturn;
 800ac2e:	69fb      	ldr	r3, [r7, #28]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3720      	adds	r7, #32
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	20000f38 	.word	0x20000f38
 800ac3c:	20000f4c 	.word	0x20000f4c

0800ac40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac40:	b480      	push	{r7}
 800ac42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac44:	4b03      	ldr	r3, [pc, #12]	; (800ac54 <vTaskMissedYield+0x14>)
 800ac46:	2201      	movs	r2, #1
 800ac48:	601a      	str	r2, [r3, #0]
}
 800ac4a:	bf00      	nop
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	20000f48 	.word	0x20000f48

0800ac58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac60:	f000 f852 	bl	800ad08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac64:	4b06      	ldr	r3, [pc, #24]	; (800ac80 <prvIdleTask+0x28>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d9f9      	bls.n	800ac60 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac6c:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <prvIdleTask+0x2c>)
 800ac6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac7c:	e7f0      	b.n	800ac60 <prvIdleTask+0x8>
 800ac7e:	bf00      	nop
 800ac80:	20000a64 	.word	0x20000a64
 800ac84:	e000ed04 	.word	0xe000ed04

0800ac88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac8e:	2300      	movs	r3, #0
 800ac90:	607b      	str	r3, [r7, #4]
 800ac92:	e00c      	b.n	800acae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	4613      	mov	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4a12      	ldr	r2, [pc, #72]	; (800ace8 <prvInitialiseTaskLists+0x60>)
 800aca0:	4413      	add	r3, r2
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7fe f8f2 	bl	8008e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3301      	adds	r3, #1
 800acac:	607b      	str	r3, [r7, #4]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b37      	cmp	r3, #55	; 0x37
 800acb2:	d9ef      	bls.n	800ac94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acb4:	480d      	ldr	r0, [pc, #52]	; (800acec <prvInitialiseTaskLists+0x64>)
 800acb6:	f7fe f8e9 	bl	8008e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acba:	480d      	ldr	r0, [pc, #52]	; (800acf0 <prvInitialiseTaskLists+0x68>)
 800acbc:	f7fe f8e6 	bl	8008e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acc0:	480c      	ldr	r0, [pc, #48]	; (800acf4 <prvInitialiseTaskLists+0x6c>)
 800acc2:	f7fe f8e3 	bl	8008e8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acc6:	480c      	ldr	r0, [pc, #48]	; (800acf8 <prvInitialiseTaskLists+0x70>)
 800acc8:	f7fe f8e0 	bl	8008e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800accc:	480b      	ldr	r0, [pc, #44]	; (800acfc <prvInitialiseTaskLists+0x74>)
 800acce:	f7fe f8dd 	bl	8008e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800acd2:	4b0b      	ldr	r3, [pc, #44]	; (800ad00 <prvInitialiseTaskLists+0x78>)
 800acd4:	4a05      	ldr	r2, [pc, #20]	; (800acec <prvInitialiseTaskLists+0x64>)
 800acd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acd8:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <prvInitialiseTaskLists+0x7c>)
 800acda:	4a05      	ldr	r2, [pc, #20]	; (800acf0 <prvInitialiseTaskLists+0x68>)
 800acdc:	601a      	str	r2, [r3, #0]
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20000a64 	.word	0x20000a64
 800acec:	20000ec4 	.word	0x20000ec4
 800acf0:	20000ed8 	.word	0x20000ed8
 800acf4:	20000ef4 	.word	0x20000ef4
 800acf8:	20000f08 	.word	0x20000f08
 800acfc:	20000f20 	.word	0x20000f20
 800ad00:	20000eec 	.word	0x20000eec
 800ad04:	20000ef0 	.word	0x20000ef0

0800ad08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad0e:	e019      	b.n	800ad44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad10:	f000 ffa0 	bl	800bc54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad14:	4b10      	ldr	r3, [pc, #64]	; (800ad58 <prvCheckTasksWaitingTermination+0x50>)
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe f93d 	bl	8008fa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad26:	4b0d      	ldr	r3, [pc, #52]	; (800ad5c <prvCheckTasksWaitingTermination+0x54>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	4a0b      	ldr	r2, [pc, #44]	; (800ad5c <prvCheckTasksWaitingTermination+0x54>)
 800ad2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <prvCheckTasksWaitingTermination+0x58>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	3b01      	subs	r3, #1
 800ad36:	4a0a      	ldr	r2, [pc, #40]	; (800ad60 <prvCheckTasksWaitingTermination+0x58>)
 800ad38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad3a:	f000 ffbb 	bl	800bcb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f810 	bl	800ad64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad44:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <prvCheckTasksWaitingTermination+0x58>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1e1      	bne.n	800ad10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad4c:	bf00      	nop
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000f08 	.word	0x20000f08
 800ad5c:	20000f34 	.word	0x20000f34
 800ad60:	20000f1c 	.word	0x20000f1c

0800ad64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3354      	adds	r3, #84	; 0x54
 800ad70:	4618      	mov	r0, r3
 800ad72:	f001 fb25 	bl	800c3c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d108      	bne.n	800ad92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	4618      	mov	r0, r3
 800ad86:	f001 f953 	bl	800c030 <vPortFree>
				vPortFree( pxTCB );
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f001 f950 	bl	800c030 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad90:	e018      	b.n	800adc4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d103      	bne.n	800ada4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f001 f947 	bl	800c030 <vPortFree>
	}
 800ada2:	e00f      	b.n	800adc4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d00a      	beq.n	800adc4 <prvDeleteTCB+0x60>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	60fb      	str	r3, [r7, #12]
}
 800adc0:	bf00      	nop
 800adc2:	e7fe      	b.n	800adc2 <prvDeleteTCB+0x5e>
	}
 800adc4:	bf00      	nop
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800add2:	4b0c      	ldr	r3, [pc, #48]	; (800ae04 <prvResetNextTaskUnblockTime+0x38>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d104      	bne.n	800ade6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800addc:	4b0a      	ldr	r3, [pc, #40]	; (800ae08 <prvResetNextTaskUnblockTime+0x3c>)
 800adde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ade2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ade4:	e008      	b.n	800adf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade6:	4b07      	ldr	r3, [pc, #28]	; (800ae04 <prvResetNextTaskUnblockTime+0x38>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	4a04      	ldr	r2, [pc, #16]	; (800ae08 <prvResetNextTaskUnblockTime+0x3c>)
 800adf6:	6013      	str	r3, [r2, #0]
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	20000eec 	.word	0x20000eec
 800ae08:	20000f54 	.word	0x20000f54

0800ae0c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ae12:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <xTaskGetCurrentTaskHandle+0x1c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ae18:	687b      	ldr	r3, [r7, #4]
	}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	370c      	adds	r7, #12
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	20000a60 	.word	0x20000a60

0800ae2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae32:	4b0b      	ldr	r3, [pc, #44]	; (800ae60 <xTaskGetSchedulerState+0x34>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d102      	bne.n	800ae40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	607b      	str	r3, [r7, #4]
 800ae3e:	e008      	b.n	800ae52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae40:	4b08      	ldr	r3, [pc, #32]	; (800ae64 <xTaskGetSchedulerState+0x38>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d102      	bne.n	800ae4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	607b      	str	r3, [r7, #4]
 800ae4c:	e001      	b.n	800ae52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae52:	687b      	ldr	r3, [r7, #4]
	}
 800ae54:	4618      	mov	r0, r3
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr
 800ae60:	20000f40 	.word	0x20000f40
 800ae64:	20000f5c 	.word	0x20000f5c

0800ae68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d051      	beq.n	800af22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae82:	4b2a      	ldr	r3, [pc, #168]	; (800af2c <xTaskPriorityInherit+0xc4>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d241      	bcs.n	800af10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	db06      	blt.n	800aea2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae94:	4b25      	ldr	r3, [pc, #148]	; (800af2c <xTaskPriorityInherit+0xc4>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	6959      	ldr	r1, [r3, #20]
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeaa:	4613      	mov	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4a1f      	ldr	r2, [pc, #124]	; (800af30 <xTaskPriorityInherit+0xc8>)
 800aeb4:	4413      	add	r3, r2
 800aeb6:	4299      	cmp	r1, r3
 800aeb8:	d122      	bne.n	800af00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fe f86e 	bl	8008fa0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aec4:	4b19      	ldr	r3, [pc, #100]	; (800af2c <xTaskPriorityInherit+0xc4>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed2:	4b18      	ldr	r3, [pc, #96]	; (800af34 <xTaskPriorityInherit+0xcc>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d903      	bls.n	800aee2 <xTaskPriorityInherit+0x7a>
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aede:	4a15      	ldr	r2, [pc, #84]	; (800af34 <xTaskPriorityInherit+0xcc>)
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee6:	4613      	mov	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4a10      	ldr	r2, [pc, #64]	; (800af30 <xTaskPriorityInherit+0xc8>)
 800aef0:	441a      	add	r2, r3
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	3304      	adds	r3, #4
 800aef6:	4619      	mov	r1, r3
 800aef8:	4610      	mov	r0, r2
 800aefa:	f7fd fff4 	bl	8008ee6 <vListInsertEnd>
 800aefe:	e004      	b.n	800af0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af00:	4b0a      	ldr	r3, [pc, #40]	; (800af2c <xTaskPriorityInherit+0xc4>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800af0a:	2301      	movs	r3, #1
 800af0c:	60fb      	str	r3, [r7, #12]
 800af0e:	e008      	b.n	800af22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af14:	4b05      	ldr	r3, [pc, #20]	; (800af2c <xTaskPriorityInherit+0xc4>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d201      	bcs.n	800af22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800af1e:	2301      	movs	r3, #1
 800af20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af22:	68fb      	ldr	r3, [r7, #12]
	}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	20000a60 	.word	0x20000a60
 800af30:	20000a64 	.word	0x20000a64
 800af34:	20000f3c 	.word	0x20000f3c

0800af38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af44:	2300      	movs	r3, #0
 800af46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d056      	beq.n	800affc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af4e:	4b2e      	ldr	r3, [pc, #184]	; (800b008 <xTaskPriorityDisinherit+0xd0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	429a      	cmp	r2, r3
 800af56:	d00a      	beq.n	800af6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	60fb      	str	r3, [r7, #12]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10a      	bne.n	800af8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	60bb      	str	r3, [r7, #8]
}
 800af88:	bf00      	nop
 800af8a:	e7fe      	b.n	800af8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af90:	1e5a      	subs	r2, r3, #1
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d02c      	beq.n	800affc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d128      	bne.n	800affc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	3304      	adds	r3, #4
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fd fff6 	bl	8008fa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afcc:	4b0f      	ldr	r3, [pc, #60]	; (800b00c <xTaskPriorityDisinherit+0xd4>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d903      	bls.n	800afdc <xTaskPriorityDisinherit+0xa4>
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd8:	4a0c      	ldr	r2, [pc, #48]	; (800b00c <xTaskPriorityDisinherit+0xd4>)
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4a09      	ldr	r2, [pc, #36]	; (800b010 <xTaskPriorityDisinherit+0xd8>)
 800afea:	441a      	add	r2, r3
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	3304      	adds	r3, #4
 800aff0:	4619      	mov	r1, r3
 800aff2:	4610      	mov	r0, r2
 800aff4:	f7fd ff77 	bl	8008ee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aff8:	2301      	movs	r3, #1
 800affa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800affc:	697b      	ldr	r3, [r7, #20]
	}
 800affe:	4618      	mov	r0, r3
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20000a60 	.word	0x20000a60
 800b00c:	20000f3c 	.word	0x20000f3c
 800b010:	20000a64 	.word	0x20000a64

0800b014 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b014:	b580      	push	{r7, lr}
 800b016:	b088      	sub	sp, #32
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b022:	2301      	movs	r3, #1
 800b024:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d06a      	beq.n	800b102 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10a      	bne.n	800b04a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	60fb      	str	r3, [r7, #12]
}
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	429a      	cmp	r2, r3
 800b052:	d902      	bls.n	800b05a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	61fb      	str	r3, [r7, #28]
 800b058:	e002      	b.n	800b060 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b05e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	69fa      	ldr	r2, [r7, #28]
 800b066:	429a      	cmp	r2, r3
 800b068:	d04b      	beq.n	800b102 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	429a      	cmp	r2, r3
 800b072:	d146      	bne.n	800b102 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b074:	4b25      	ldr	r3, [pc, #148]	; (800b10c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	69ba      	ldr	r2, [r7, #24]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d10a      	bne.n	800b094 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	60bb      	str	r3, [r7, #8]
}
 800b090:	bf00      	nop
 800b092:	e7fe      	b.n	800b092 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b098:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	69fa      	ldr	r2, [r7, #28]
 800b09e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	699b      	ldr	r3, [r3, #24]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	db04      	blt.n	800b0b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	6959      	ldr	r1, [r3, #20]
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4a13      	ldr	r2, [pc, #76]	; (800b110 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b0c2:	4413      	add	r3, r2
 800b0c4:	4299      	cmp	r1, r3
 800b0c6:	d11c      	bne.n	800b102 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fd ff67 	bl	8008fa0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d6:	4b0f      	ldr	r3, [pc, #60]	; (800b114 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d903      	bls.n	800b0e6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e2:	4a0c      	ldr	r2, [pc, #48]	; (800b114 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4a07      	ldr	r2, [pc, #28]	; (800b110 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b0f4:	441a      	add	r2, r3
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	f7fd fef2 	bl	8008ee6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b102:	bf00      	nop
 800b104:	3720      	adds	r7, #32
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20000a60 	.word	0x20000a60
 800b110:	20000a64 	.word	0x20000a64
 800b114:	20000f3c 	.word	0x20000f3c

0800b118 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b118:	b480      	push	{r7}
 800b11a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b11c:	4b07      	ldr	r3, [pc, #28]	; (800b13c <pvTaskIncrementMutexHeldCount+0x24>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d004      	beq.n	800b12e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <pvTaskIncrementMutexHeldCount+0x24>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b12a:	3201      	adds	r2, #1
 800b12c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b12e:	4b03      	ldr	r3, [pc, #12]	; (800b13c <pvTaskIncrementMutexHeldCount+0x24>)
 800b130:	681b      	ldr	r3, [r3, #0]
	}
 800b132:	4618      	mov	r0, r3
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	20000a60 	.word	0x20000a60

0800b140 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b14a:	4b21      	ldr	r3, [pc, #132]	; (800b1d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b150:	4b20      	ldr	r3, [pc, #128]	; (800b1d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3304      	adds	r3, #4
 800b156:	4618      	mov	r0, r3
 800b158:	f7fd ff22 	bl	8008fa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b162:	d10a      	bne.n	800b17a <prvAddCurrentTaskToDelayedList+0x3a>
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d007      	beq.n	800b17a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b16a:	4b1a      	ldr	r3, [pc, #104]	; (800b1d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	3304      	adds	r3, #4
 800b170:	4619      	mov	r1, r3
 800b172:	4819      	ldr	r0, [pc, #100]	; (800b1d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b174:	f7fd feb7 	bl	8008ee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b178:	e026      	b.n	800b1c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4413      	add	r3, r2
 800b180:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b182:	4b14      	ldr	r3, [pc, #80]	; (800b1d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b18a:	68ba      	ldr	r2, [r7, #8]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d209      	bcs.n	800b1a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b192:	4b12      	ldr	r3, [pc, #72]	; (800b1dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	3304      	adds	r3, #4
 800b19c:	4619      	mov	r1, r3
 800b19e:	4610      	mov	r0, r2
 800b1a0:	f7fd fec5 	bl	8008f2e <vListInsert>
}
 800b1a4:	e010      	b.n	800b1c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1a6:	4b0e      	ldr	r3, [pc, #56]	; (800b1e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	4b0a      	ldr	r3, [pc, #40]	; (800b1d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	f7fd febb 	bl	8008f2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1b8:	4b0a      	ldr	r3, [pc, #40]	; (800b1e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d202      	bcs.n	800b1c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b1c2:	4a08      	ldr	r2, [pc, #32]	; (800b1e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	6013      	str	r3, [r2, #0]
}
 800b1c8:	bf00      	nop
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	20000f38 	.word	0x20000f38
 800b1d4:	20000a60 	.word	0x20000a60
 800b1d8:	20000f20 	.word	0x20000f20
 800b1dc:	20000ef0 	.word	0x20000ef0
 800b1e0:	20000eec 	.word	0x20000eec
 800b1e4:	20000f54 	.word	0x20000f54

0800b1e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08a      	sub	sp, #40	; 0x28
 800b1ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b1f2:	f000 fba1 	bl	800b938 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b1f6:	4b1c      	ldr	r3, [pc, #112]	; (800b268 <xTimerCreateTimerTask+0x80>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d021      	beq.n	800b242 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b206:	1d3a      	adds	r2, r7, #4
 800b208:	f107 0108 	add.w	r1, r7, #8
 800b20c:	f107 030c 	add.w	r3, r7, #12
 800b210:	4618      	mov	r0, r3
 800b212:	f7fd fe21 	bl	8008e58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	9202      	str	r2, [sp, #8]
 800b21e:	9301      	str	r3, [sp, #4]
 800b220:	2302      	movs	r3, #2
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	2300      	movs	r3, #0
 800b226:	460a      	mov	r2, r1
 800b228:	4910      	ldr	r1, [pc, #64]	; (800b26c <xTimerCreateTimerTask+0x84>)
 800b22a:	4811      	ldr	r0, [pc, #68]	; (800b270 <xTimerCreateTimerTask+0x88>)
 800b22c:	f7fe ffa6 	bl	800a17c <xTaskCreateStatic>
 800b230:	4603      	mov	r3, r0
 800b232:	4a10      	ldr	r2, [pc, #64]	; (800b274 <xTimerCreateTimerTask+0x8c>)
 800b234:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b236:	4b0f      	ldr	r3, [pc, #60]	; (800b274 <xTimerCreateTimerTask+0x8c>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b23e:	2301      	movs	r3, #1
 800b240:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	613b      	str	r3, [r7, #16]
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b25e:	697b      	ldr	r3, [r7, #20]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	20000f90 	.word	0x20000f90
 800b26c:	0800d060 	.word	0x0800d060
 800b270:	0800b4e1 	.word	0x0800b4e1
 800b274:	20000f94 	.word	0x20000f94

0800b278 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b088      	sub	sp, #32
 800b27c:	af02      	add	r7, sp, #8
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b286:	202c      	movs	r0, #44	; 0x2c
 800b288:	f000 fe06 	bl	800be98 <pvPortMalloc>
 800b28c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00d      	beq.n	800b2b0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	9301      	str	r3, [sp, #4]
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	68b9      	ldr	r1, [r7, #8]
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f000 f843 	bl	800b336 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b2b0:	697b      	ldr	r3, [r7, #20]
	}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3718      	adds	r7, #24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b08a      	sub	sp, #40	; 0x28
 800b2be:	af02      	add	r7, sp, #8
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	60b9      	str	r1, [r7, #8]
 800b2c4:	607a      	str	r2, [r7, #4]
 800b2c6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b2c8:	232c      	movs	r3, #44	; 0x2c
 800b2ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	2b2c      	cmp	r3, #44	; 0x2c
 800b2d0:	d00a      	beq.n	800b2e8 <xTimerCreateStatic+0x2e>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	61bb      	str	r3, [r7, #24]
}
 800b2e4:	bf00      	nop
 800b2e6:	e7fe      	b.n	800b2e6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b2e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10a      	bne.n	800b306 <xTimerCreateStatic+0x4c>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	617b      	str	r3, [r7, #20]
}
 800b302:	bf00      	nop
 800b304:	e7fe      	b.n	800b304 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00d      	beq.n	800b32c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	2202      	movs	r2, #2
 800b314:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	9301      	str	r3, [sp, #4]
 800b31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f000 f805 	bl	800b336 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b32c:	69fb      	ldr	r3, [r7, #28]
	}
 800b32e:	4618      	mov	r0, r3
 800b330:	3720      	adds	r7, #32
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b086      	sub	sp, #24
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
 800b342:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10a      	bne.n	800b360 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	617b      	str	r3, [r7, #20]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	2b00      	cmp	r3, #0
 800b364:	d01e      	beq.n	800b3a4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b366:	f000 fae7 	bl	800b938 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	6a3a      	ldr	r2, [r7, #32]
 800b380:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b384:	3304      	adds	r3, #4
 800b386:	4618      	mov	r0, r3
 800b388:	f7fd fda0 	bl	8008ecc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d008      	beq.n	800b3a4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b398:	f043 0304 	orr.w	r3, r3, #4
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b3a4:	bf00      	nop
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b08a      	sub	sp, #40	; 0x28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d10a      	bne.n	800b3da <xTimerGenericCommand+0x2e>
	__asm volatile
 800b3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	623b      	str	r3, [r7, #32]
}
 800b3d6:	bf00      	nop
 800b3d8:	e7fe      	b.n	800b3d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3da:	4b1a      	ldr	r3, [pc, #104]	; (800b444 <xTimerGenericCommand+0x98>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d02a      	beq.n	800b438 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2b05      	cmp	r3, #5
 800b3f2:	dc18      	bgt.n	800b426 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3f4:	f7ff fd1a 	bl	800ae2c <xTaskGetSchedulerState>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d109      	bne.n	800b412 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b3fe:	4b11      	ldr	r3, [pc, #68]	; (800b444 <xTimerGenericCommand+0x98>)
 800b400:	6818      	ldr	r0, [r3, #0]
 800b402:	f107 0110 	add.w	r1, r7, #16
 800b406:	2300      	movs	r3, #0
 800b408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b40a:	f7fe f851 	bl	80094b0 <xQueueGenericSend>
 800b40e:	6278      	str	r0, [r7, #36]	; 0x24
 800b410:	e012      	b.n	800b438 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b412:	4b0c      	ldr	r3, [pc, #48]	; (800b444 <xTimerGenericCommand+0x98>)
 800b414:	6818      	ldr	r0, [r3, #0]
 800b416:	f107 0110 	add.w	r1, r7, #16
 800b41a:	2300      	movs	r3, #0
 800b41c:	2200      	movs	r2, #0
 800b41e:	f7fe f847 	bl	80094b0 <xQueueGenericSend>
 800b422:	6278      	str	r0, [r7, #36]	; 0x24
 800b424:	e008      	b.n	800b438 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b426:	4b07      	ldr	r3, [pc, #28]	; (800b444 <xTimerGenericCommand+0x98>)
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	f107 0110 	add.w	r1, r7, #16
 800b42e:	2300      	movs	r3, #0
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	f7fe f93b 	bl	80096ac <xQueueGenericSendFromISR>
 800b436:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3728      	adds	r7, #40	; 0x28
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	20000f90 	.word	0x20000f90

0800b448 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b088      	sub	sp, #32
 800b44c:	af02      	add	r7, sp, #8
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b452:	4b22      	ldr	r3, [pc, #136]	; (800b4dc <prvProcessExpiredTimer+0x94>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	3304      	adds	r3, #4
 800b460:	4618      	mov	r0, r3
 800b462:	f7fd fd9d 	bl	8008fa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b46c:	f003 0304 	and.w	r3, r3, #4
 800b470:	2b00      	cmp	r3, #0
 800b472:	d022      	beq.n	800b4ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	699a      	ldr	r2, [r3, #24]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	18d1      	adds	r1, r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	6978      	ldr	r0, [r7, #20]
 800b482:	f000 f8d1 	bl	800b628 <prvInsertTimerInActiveList>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d01f      	beq.n	800b4cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b48c:	2300      	movs	r3, #0
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	2300      	movs	r3, #0
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	2100      	movs	r1, #0
 800b496:	6978      	ldr	r0, [r7, #20]
 800b498:	f7ff ff88 	bl	800b3ac <xTimerGenericCommand>
 800b49c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d113      	bne.n	800b4cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a8:	f383 8811 	msr	BASEPRI, r3
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	60fb      	str	r3, [r7, #12]
}
 800b4b6:	bf00      	nop
 800b4b8:	e7fe      	b.n	800b4b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4c0:	f023 0301 	bic.w	r3, r3, #1
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	6a1b      	ldr	r3, [r3, #32]
 800b4d0:	6978      	ldr	r0, [r7, #20]
 800b4d2:	4798      	blx	r3
}
 800b4d4:	bf00      	nop
 800b4d6:	3718      	adds	r7, #24
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	20000f88 	.word	0x20000f88

0800b4e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4e8:	f107 0308 	add.w	r3, r7, #8
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 f857 	bl	800b5a0 <prvGetNextExpireTime>
 800b4f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 f803 	bl	800b504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b4fe:	f000 f8d5 	bl	800b6ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b502:	e7f1      	b.n	800b4e8 <prvTimerTask+0x8>

0800b504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b50e:	f7ff f891 	bl	800a634 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b512:	f107 0308 	add.w	r3, r7, #8
 800b516:	4618      	mov	r0, r3
 800b518:	f000 f866 	bl	800b5e8 <prvSampleTimeNow>
 800b51c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d130      	bne.n	800b586 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10a      	bne.n	800b540 <prvProcessTimerOrBlockTask+0x3c>
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d806      	bhi.n	800b540 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b532:	f7ff f88d 	bl	800a650 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b536:	68f9      	ldr	r1, [r7, #12]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff ff85 	bl	800b448 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b53e:	e024      	b.n	800b58a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d008      	beq.n	800b558 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b546:	4b13      	ldr	r3, [pc, #76]	; (800b594 <prvProcessTimerOrBlockTask+0x90>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d101      	bne.n	800b554 <prvProcessTimerOrBlockTask+0x50>
 800b550:	2301      	movs	r3, #1
 800b552:	e000      	b.n	800b556 <prvProcessTimerOrBlockTask+0x52>
 800b554:	2300      	movs	r3, #0
 800b556:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b558:	4b0f      	ldr	r3, [pc, #60]	; (800b598 <prvProcessTimerOrBlockTask+0x94>)
 800b55a:	6818      	ldr	r0, [r3, #0]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	4619      	mov	r1, r3
 800b566:	f7fe fdd5 	bl	800a114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b56a:	f7ff f871 	bl	800a650 <xTaskResumeAll>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10a      	bne.n	800b58a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b574:	4b09      	ldr	r3, [pc, #36]	; (800b59c <prvProcessTimerOrBlockTask+0x98>)
 800b576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	f3bf 8f6f 	isb	sy
}
 800b584:	e001      	b.n	800b58a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b586:	f7ff f863 	bl	800a650 <xTaskResumeAll>
}
 800b58a:	bf00      	nop
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	20000f8c 	.word	0x20000f8c
 800b598:	20000f90 	.word	0x20000f90
 800b59c:	e000ed04 	.word	0xe000ed04

0800b5a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b5a8:	4b0e      	ldr	r3, [pc, #56]	; (800b5e4 <prvGetNextExpireTime+0x44>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <prvGetNextExpireTime+0x16>
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	e000      	b.n	800b5b8 <prvGetNextExpireTime+0x18>
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d105      	bne.n	800b5d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5c4:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <prvGetNextExpireTime+0x44>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	60fb      	str	r3, [r7, #12]
 800b5ce:	e001      	b.n	800b5d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20000f88 	.word	0x20000f88

0800b5e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5f0:	f7ff f8cc 	bl	800a78c <xTaskGetTickCount>
 800b5f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5f6:	4b0b      	ldr	r3, [pc, #44]	; (800b624 <prvSampleTimeNow+0x3c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d205      	bcs.n	800b60c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b600:	f000 f936 	bl	800b870 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	e002      	b.n	800b612 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b612:	4a04      	ldr	r2, [pc, #16]	; (800b624 <prvSampleTimeNow+0x3c>)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b618:	68fb      	ldr	r3, [r7, #12]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	20000f98 	.word	0x20000f98

0800b628 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d812      	bhi.n	800b674 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	1ad2      	subs	r2, r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	699b      	ldr	r3, [r3, #24]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d302      	bcc.n	800b662 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b65c:	2301      	movs	r3, #1
 800b65e:	617b      	str	r3, [r7, #20]
 800b660:	e01b      	b.n	800b69a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b662:	4b10      	ldr	r3, [pc, #64]	; (800b6a4 <prvInsertTimerInActiveList+0x7c>)
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	3304      	adds	r3, #4
 800b66a:	4619      	mov	r1, r3
 800b66c:	4610      	mov	r0, r2
 800b66e:	f7fd fc5e 	bl	8008f2e <vListInsert>
 800b672:	e012      	b.n	800b69a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d206      	bcs.n	800b68a <prvInsertTimerInActiveList+0x62>
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	429a      	cmp	r2, r3
 800b682:	d302      	bcc.n	800b68a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b684:	2301      	movs	r3, #1
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	e007      	b.n	800b69a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b68a:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <prvInsertTimerInActiveList+0x80>)
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	3304      	adds	r3, #4
 800b692:	4619      	mov	r1, r3
 800b694:	4610      	mov	r0, r2
 800b696:	f7fd fc4a 	bl	8008f2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b69a:	697b      	ldr	r3, [r7, #20]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	20000f8c 	.word	0x20000f8c
 800b6a8:	20000f88 	.word	0x20000f88

0800b6ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b08e      	sub	sp, #56	; 0x38
 800b6b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6b2:	e0ca      	b.n	800b84a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	da18      	bge.n	800b6ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b6ba:	1d3b      	adds	r3, r7, #4
 800b6bc:	3304      	adds	r3, #4
 800b6be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10a      	bne.n	800b6dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	61fb      	str	r3, [r7, #28]
}
 800b6d8:	bf00      	nop
 800b6da:	e7fe      	b.n	800b6da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e2:	6850      	ldr	r0, [r2, #4]
 800b6e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e6:	6892      	ldr	r2, [r2, #8]
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f2c0 80aa 	blt.w	800b848 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fa:	695b      	ldr	r3, [r3, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d004      	beq.n	800b70a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b702:	3304      	adds	r3, #4
 800b704:	4618      	mov	r0, r3
 800b706:	f7fd fc4b 	bl	8008fa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b70a:	463b      	mov	r3, r7
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff ff6b 	bl	800b5e8 <prvSampleTimeNow>
 800b712:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b09      	cmp	r3, #9
 800b718:	f200 8097 	bhi.w	800b84a <prvProcessReceivedCommands+0x19e>
 800b71c:	a201      	add	r2, pc, #4	; (adr r2, 800b724 <prvProcessReceivedCommands+0x78>)
 800b71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b722:	bf00      	nop
 800b724:	0800b74d 	.word	0x0800b74d
 800b728:	0800b74d 	.word	0x0800b74d
 800b72c:	0800b74d 	.word	0x0800b74d
 800b730:	0800b7c1 	.word	0x0800b7c1
 800b734:	0800b7d5 	.word	0x0800b7d5
 800b738:	0800b81f 	.word	0x0800b81f
 800b73c:	0800b74d 	.word	0x0800b74d
 800b740:	0800b74d 	.word	0x0800b74d
 800b744:	0800b7c1 	.word	0x0800b7c1
 800b748:	0800b7d5 	.word	0x0800b7d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b752:	f043 0301 	orr.w	r3, r3, #1
 800b756:	b2da      	uxtb	r2, r3
 800b758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	699b      	ldr	r3, [r3, #24]
 800b764:	18d1      	adds	r1, r2, r3
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b76a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b76c:	f7ff ff5c 	bl	800b628 <prvInsertTimerInActiveList>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d069      	beq.n	800b84a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b77c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b784:	f003 0304 	and.w	r3, r3, #4
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d05e      	beq.n	800b84a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	699b      	ldr	r3, [r3, #24]
 800b792:	441a      	add	r2, r3
 800b794:	2300      	movs	r3, #0
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	2300      	movs	r3, #0
 800b79a:	2100      	movs	r1, #0
 800b79c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b79e:	f7ff fe05 	bl	800b3ac <xTimerGenericCommand>
 800b7a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b7a4:	6a3b      	ldr	r3, [r7, #32]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d14f      	bne.n	800b84a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	61bb      	str	r3, [r7, #24]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7c6:	f023 0301 	bic.w	r3, r3, #1
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b7d2:	e03a      	b.n	800b84a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7da:	f043 0301 	orr.w	r3, r3, #1
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ee:	699b      	ldr	r3, [r3, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10a      	bne.n	800b80a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	617b      	str	r3, [r7, #20]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80c:	699a      	ldr	r2, [r3, #24]
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	18d1      	adds	r1, r2, r3
 800b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b818:	f7ff ff06 	bl	800b628 <prvInsertTimerInActiveList>
					break;
 800b81c:	e015      	b.n	800b84a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b824:	f003 0302 	and.w	r3, r3, #2
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d103      	bne.n	800b834 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b82e:	f000 fbff 	bl	800c030 <vPortFree>
 800b832:	e00a      	b.n	800b84a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b83a:	f023 0301 	bic.w	r3, r3, #1
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b846:	e000      	b.n	800b84a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b848:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b84a:	4b08      	ldr	r3, [pc, #32]	; (800b86c <prvProcessReceivedCommands+0x1c0>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	1d39      	adds	r1, r7, #4
 800b850:	2200      	movs	r2, #0
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe f852 	bl	80098fc <xQueueReceive>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f47f af2a 	bne.w	800b6b4 <prvProcessReceivedCommands+0x8>
	}
}
 800b860:	bf00      	nop
 800b862:	bf00      	nop
 800b864:	3730      	adds	r7, #48	; 0x30
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	20000f90 	.word	0x20000f90

0800b870 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b088      	sub	sp, #32
 800b874:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b876:	e048      	b.n	800b90a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b878:	4b2d      	ldr	r3, [pc, #180]	; (800b930 <prvSwitchTimerLists+0xc0>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b882:	4b2b      	ldr	r3, [pc, #172]	; (800b930 <prvSwitchTimerLists+0xc0>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3304      	adds	r3, #4
 800b890:	4618      	mov	r0, r3
 800b892:	f7fd fb85 	bl	8008fa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8a4:	f003 0304 	and.w	r3, r3, #4
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d02e      	beq.n	800b90a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d90e      	bls.n	800b8dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8ca:	4b19      	ldr	r3, [pc, #100]	; (800b930 <prvSwitchTimerLists+0xc0>)
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	f7fd fb2a 	bl	8008f2e <vListInsert>
 800b8da:	e016      	b.n	800b90a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8dc:	2300      	movs	r3, #0
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f7ff fd60 	bl	800b3ac <xTimerGenericCommand>
 800b8ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	603b      	str	r3, [r7, #0]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b90a:	4b09      	ldr	r3, [pc, #36]	; (800b930 <prvSwitchTimerLists+0xc0>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1b1      	bne.n	800b878 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b914:	4b06      	ldr	r3, [pc, #24]	; (800b930 <prvSwitchTimerLists+0xc0>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b91a:	4b06      	ldr	r3, [pc, #24]	; (800b934 <prvSwitchTimerLists+0xc4>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a04      	ldr	r2, [pc, #16]	; (800b930 <prvSwitchTimerLists+0xc0>)
 800b920:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b922:	4a04      	ldr	r2, [pc, #16]	; (800b934 <prvSwitchTimerLists+0xc4>)
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	6013      	str	r3, [r2, #0]
}
 800b928:	bf00      	nop
 800b92a:	3718      	adds	r7, #24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	20000f88 	.word	0x20000f88
 800b934:	20000f8c 	.word	0x20000f8c

0800b938 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b93e:	f000 f989 	bl	800bc54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b942:	4b15      	ldr	r3, [pc, #84]	; (800b998 <prvCheckForValidListAndQueue+0x60>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d120      	bne.n	800b98c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b94a:	4814      	ldr	r0, [pc, #80]	; (800b99c <prvCheckForValidListAndQueue+0x64>)
 800b94c:	f7fd fa9e 	bl	8008e8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b950:	4813      	ldr	r0, [pc, #76]	; (800b9a0 <prvCheckForValidListAndQueue+0x68>)
 800b952:	f7fd fa9b 	bl	8008e8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b956:	4b13      	ldr	r3, [pc, #76]	; (800b9a4 <prvCheckForValidListAndQueue+0x6c>)
 800b958:	4a10      	ldr	r2, [pc, #64]	; (800b99c <prvCheckForValidListAndQueue+0x64>)
 800b95a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b95c:	4b12      	ldr	r3, [pc, #72]	; (800b9a8 <prvCheckForValidListAndQueue+0x70>)
 800b95e:	4a10      	ldr	r2, [pc, #64]	; (800b9a0 <prvCheckForValidListAndQueue+0x68>)
 800b960:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b962:	2300      	movs	r3, #0
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	4b11      	ldr	r3, [pc, #68]	; (800b9ac <prvCheckForValidListAndQueue+0x74>)
 800b968:	4a11      	ldr	r2, [pc, #68]	; (800b9b0 <prvCheckForValidListAndQueue+0x78>)
 800b96a:	2110      	movs	r1, #16
 800b96c:	200a      	movs	r0, #10
 800b96e:	f7fd fba9 	bl	80090c4 <xQueueGenericCreateStatic>
 800b972:	4603      	mov	r3, r0
 800b974:	4a08      	ldr	r2, [pc, #32]	; (800b998 <prvCheckForValidListAndQueue+0x60>)
 800b976:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b978:	4b07      	ldr	r3, [pc, #28]	; (800b998 <prvCheckForValidListAndQueue+0x60>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d005      	beq.n	800b98c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b980:	4b05      	ldr	r3, [pc, #20]	; (800b998 <prvCheckForValidListAndQueue+0x60>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	490b      	ldr	r1, [pc, #44]	; (800b9b4 <prvCheckForValidListAndQueue+0x7c>)
 800b986:	4618      	mov	r0, r3
 800b988:	f7fe fb70 	bl	800a06c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b98c:	f000 f992 	bl	800bcb4 <vPortExitCritical>
}
 800b990:	bf00      	nop
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20000f90 	.word	0x20000f90
 800b99c:	20000f60 	.word	0x20000f60
 800b9a0:	20000f74 	.word	0x20000f74
 800b9a4:	20000f88 	.word	0x20000f88
 800b9a8:	20000f8c 	.word	0x20000f8c
 800b9ac:	2000103c 	.word	0x2000103c
 800b9b0:	20000f9c 	.word	0x20000f9c
 800b9b4:	0800d068 	.word	0x0800d068

0800b9b8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10a      	bne.n	800b9e0 <pvTimerGetTimerID+0x28>
	__asm volatile
 800b9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	60fb      	str	r3, [r7, #12]
}
 800b9dc:	bf00      	nop
 800b9de:	e7fe      	b.n	800b9de <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b9e0:	f000 f938 	bl	800bc54 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	69db      	ldr	r3, [r3, #28]
 800b9e8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b9ea:	f000 f963 	bl	800bcb4 <vPortExitCritical>

	return pvReturn;
 800b9ee:	693b      	ldr	r3, [r7, #16]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	3b04      	subs	r3, #4
 800ba08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	3b04      	subs	r3, #4
 800ba16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f023 0201 	bic.w	r2, r3, #1
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	3b04      	subs	r3, #4
 800ba26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba28:	4a0c      	ldr	r2, [pc, #48]	; (800ba5c <pxPortInitialiseStack+0x64>)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3b14      	subs	r3, #20
 800ba32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3b04      	subs	r3, #4
 800ba3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f06f 0202 	mvn.w	r2, #2
 800ba46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3b20      	subs	r3, #32
 800ba4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	0800ba61 	.word	0x0800ba61

0800ba60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba6a:	4b12      	ldr	r3, [pc, #72]	; (800bab4 <prvTaskExitError+0x54>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba72:	d00a      	beq.n	800ba8a <prvTaskExitError+0x2a>
	__asm volatile
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	f383 8811 	msr	BASEPRI, r3
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	60fb      	str	r3, [r7, #12]
}
 800ba86:	bf00      	nop
 800ba88:	e7fe      	b.n	800ba88 <prvTaskExitError+0x28>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	60bb      	str	r3, [r7, #8]
}
 800ba9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba9e:	bf00      	nop
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d0fc      	beq.n	800baa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800baa6:	bf00      	nop
 800baa8:	bf00      	nop
 800baaa:	3714      	adds	r7, #20
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	20000024 	.word	0x20000024
	...

0800bac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bac0:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <pxCurrentTCBConst2>)
 800bac2:	6819      	ldr	r1, [r3, #0]
 800bac4:	6808      	ldr	r0, [r1, #0]
 800bac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baca:	f380 8809 	msr	PSP, r0
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f04f 0000 	mov.w	r0, #0
 800bad6:	f380 8811 	msr	BASEPRI, r0
 800bada:	4770      	bx	lr
 800badc:	f3af 8000 	nop.w

0800bae0 <pxCurrentTCBConst2>:
 800bae0:	20000a60 	.word	0x20000a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop

0800bae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bae8:	4808      	ldr	r0, [pc, #32]	; (800bb0c <prvPortStartFirstTask+0x24>)
 800baea:	6800      	ldr	r0, [r0, #0]
 800baec:	6800      	ldr	r0, [r0, #0]
 800baee:	f380 8808 	msr	MSP, r0
 800baf2:	f04f 0000 	mov.w	r0, #0
 800baf6:	f380 8814 	msr	CONTROL, r0
 800bafa:	b662      	cpsie	i
 800bafc:	b661      	cpsie	f
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	df00      	svc	0
 800bb08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb0a:	bf00      	nop
 800bb0c:	e000ed08 	.word	0xe000ed08

0800bb10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb16:	4b46      	ldr	r3, [pc, #280]	; (800bc30 <xPortStartScheduler+0x120>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a46      	ldr	r2, [pc, #280]	; (800bc34 <xPortStartScheduler+0x124>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d10a      	bne.n	800bb36 <xPortStartScheduler+0x26>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	613b      	str	r3, [r7, #16]
}
 800bb32:	bf00      	nop
 800bb34:	e7fe      	b.n	800bb34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb36:	4b3e      	ldr	r3, [pc, #248]	; (800bc30 <xPortStartScheduler+0x120>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a3f      	ldr	r2, [pc, #252]	; (800bc38 <xPortStartScheduler+0x128>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d10a      	bne.n	800bb56 <xPortStartScheduler+0x46>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	60fb      	str	r3, [r7, #12]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb56:	4b39      	ldr	r3, [pc, #228]	; (800bc3c <xPortStartScheduler+0x12c>)
 800bb58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	22ff      	movs	r2, #255	; 0xff
 800bb66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb70:	78fb      	ldrb	r3, [r7, #3]
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	4b31      	ldr	r3, [pc, #196]	; (800bc40 <xPortStartScheduler+0x130>)
 800bb7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb7e:	4b31      	ldr	r3, [pc, #196]	; (800bc44 <xPortStartScheduler+0x134>)
 800bb80:	2207      	movs	r2, #7
 800bb82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb84:	e009      	b.n	800bb9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb86:	4b2f      	ldr	r3, [pc, #188]	; (800bc44 <xPortStartScheduler+0x134>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	4a2d      	ldr	r2, [pc, #180]	; (800bc44 <xPortStartScheduler+0x134>)
 800bb8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb90:	78fb      	ldrb	r3, [r7, #3]
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	005b      	lsls	r3, r3, #1
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb9a:	78fb      	ldrb	r3, [r7, #3]
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bba2:	2b80      	cmp	r3, #128	; 0x80
 800bba4:	d0ef      	beq.n	800bb86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bba6:	4b27      	ldr	r3, [pc, #156]	; (800bc44 <xPortStartScheduler+0x134>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f1c3 0307 	rsb	r3, r3, #7
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	d00a      	beq.n	800bbc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	60bb      	str	r3, [r7, #8]
}
 800bbc4:	bf00      	nop
 800bbc6:	e7fe      	b.n	800bbc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbc8:	4b1e      	ldr	r3, [pc, #120]	; (800bc44 <xPortStartScheduler+0x134>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	021b      	lsls	r3, r3, #8
 800bbce:	4a1d      	ldr	r2, [pc, #116]	; (800bc44 <xPortStartScheduler+0x134>)
 800bbd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bbd2:	4b1c      	ldr	r3, [pc, #112]	; (800bc44 <xPortStartScheduler+0x134>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbda:	4a1a      	ldr	r2, [pc, #104]	; (800bc44 <xPortStartScheduler+0x134>)
 800bbdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bbe6:	4b18      	ldr	r3, [pc, #96]	; (800bc48 <xPortStartScheduler+0x138>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a17      	ldr	r2, [pc, #92]	; (800bc48 <xPortStartScheduler+0x138>)
 800bbec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bbf2:	4b15      	ldr	r3, [pc, #84]	; (800bc48 <xPortStartScheduler+0x138>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a14      	ldr	r2, [pc, #80]	; (800bc48 <xPortStartScheduler+0x138>)
 800bbf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bbfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bbfe:	f000 f8dd 	bl	800bdbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc02:	4b12      	ldr	r3, [pc, #72]	; (800bc4c <xPortStartScheduler+0x13c>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc08:	f000 f8fc 	bl	800be04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc0c:	4b10      	ldr	r3, [pc, #64]	; (800bc50 <xPortStartScheduler+0x140>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a0f      	ldr	r2, [pc, #60]	; (800bc50 <xPortStartScheduler+0x140>)
 800bc12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc18:	f7ff ff66 	bl	800bae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc1c:	f7fe fe80 	bl	800a920 <vTaskSwitchContext>
	prvTaskExitError();
 800bc20:	f7ff ff1e 	bl	800ba60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc24:	2300      	movs	r3, #0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3718      	adds	r7, #24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	e000ed00 	.word	0xe000ed00
 800bc34:	410fc271 	.word	0x410fc271
 800bc38:	410fc270 	.word	0x410fc270
 800bc3c:	e000e400 	.word	0xe000e400
 800bc40:	2000108c 	.word	0x2000108c
 800bc44:	20001090 	.word	0x20001090
 800bc48:	e000ed20 	.word	0xe000ed20
 800bc4c:	20000024 	.word	0x20000024
 800bc50:	e000ef34 	.word	0xe000ef34

0800bc54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	607b      	str	r3, [r7, #4]
}
 800bc6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc6e:	4b0f      	ldr	r3, [pc, #60]	; (800bcac <vPortEnterCritical+0x58>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3301      	adds	r3, #1
 800bc74:	4a0d      	ldr	r2, [pc, #52]	; (800bcac <vPortEnterCritical+0x58>)
 800bc76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc78:	4b0c      	ldr	r3, [pc, #48]	; (800bcac <vPortEnterCritical+0x58>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d10f      	bne.n	800bca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc80:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <vPortEnterCritical+0x5c>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00a      	beq.n	800bca0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	603b      	str	r3, [r7, #0]
}
 800bc9c:	bf00      	nop
 800bc9e:	e7fe      	b.n	800bc9e <vPortEnterCritical+0x4a>
	}
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	20000024 	.word	0x20000024
 800bcb0:	e000ed04 	.word	0xe000ed04

0800bcb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcba:	4b12      	ldr	r3, [pc, #72]	; (800bd04 <vPortExitCritical+0x50>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d10a      	bne.n	800bcd8 <vPortExitCritical+0x24>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	607b      	str	r3, [r7, #4]
}
 800bcd4:	bf00      	nop
 800bcd6:	e7fe      	b.n	800bcd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bcd8:	4b0a      	ldr	r3, [pc, #40]	; (800bd04 <vPortExitCritical+0x50>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	4a09      	ldr	r2, [pc, #36]	; (800bd04 <vPortExitCritical+0x50>)
 800bce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bce2:	4b08      	ldr	r3, [pc, #32]	; (800bd04 <vPortExitCritical+0x50>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d105      	bne.n	800bcf6 <vPortExitCritical+0x42>
 800bcea:	2300      	movs	r3, #0
 800bcec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	f383 8811 	msr	BASEPRI, r3
}
 800bcf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bcf6:	bf00      	nop
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	20000024 	.word	0x20000024
	...

0800bd10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd10:	f3ef 8009 	mrs	r0, PSP
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	4b15      	ldr	r3, [pc, #84]	; (800bd70 <pxCurrentTCBConst>)
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	f01e 0f10 	tst.w	lr, #16
 800bd20:	bf08      	it	eq
 800bd22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2a:	6010      	str	r0, [r2, #0]
 800bd2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd34:	f380 8811 	msr	BASEPRI, r0
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f7fe fdee 	bl	800a920 <vTaskSwitchContext>
 800bd44:	f04f 0000 	mov.w	r0, #0
 800bd48:	f380 8811 	msr	BASEPRI, r0
 800bd4c:	bc09      	pop	{r0, r3}
 800bd4e:	6819      	ldr	r1, [r3, #0]
 800bd50:	6808      	ldr	r0, [r1, #0]
 800bd52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd56:	f01e 0f10 	tst.w	lr, #16
 800bd5a:	bf08      	it	eq
 800bd5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd60:	f380 8809 	msr	PSP, r0
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	f3af 8000 	nop.w

0800bd70 <pxCurrentTCBConst>:
 800bd70:	20000a60 	.word	0x20000a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd74:	bf00      	nop
 800bd76:	bf00      	nop

0800bd78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	607b      	str	r3, [r7, #4]
}
 800bd90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd92:	f7fe fd0b 	bl	800a7ac <xTaskIncrementTick>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d003      	beq.n	800bda4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd9c:	4b06      	ldr	r3, [pc, #24]	; (800bdb8 <xPortSysTickHandler+0x40>)
 800bd9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bda2:	601a      	str	r2, [r3, #0]
 800bda4:	2300      	movs	r3, #0
 800bda6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	f383 8811 	msr	BASEPRI, r3
}
 800bdae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	e000ed04 	.word	0xe000ed04

0800bdbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bdc0:	4b0b      	ldr	r3, [pc, #44]	; (800bdf0 <vPortSetupTimerInterrupt+0x34>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bdc6:	4b0b      	ldr	r3, [pc, #44]	; (800bdf4 <vPortSetupTimerInterrupt+0x38>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bdcc:	4b0a      	ldr	r3, [pc, #40]	; (800bdf8 <vPortSetupTimerInterrupt+0x3c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a0a      	ldr	r2, [pc, #40]	; (800bdfc <vPortSetupTimerInterrupt+0x40>)
 800bdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd6:	099b      	lsrs	r3, r3, #6
 800bdd8:	4a09      	ldr	r2, [pc, #36]	; (800be00 <vPortSetupTimerInterrupt+0x44>)
 800bdda:	3b01      	subs	r3, #1
 800bddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdde:	4b04      	ldr	r3, [pc, #16]	; (800bdf0 <vPortSetupTimerInterrupt+0x34>)
 800bde0:	2207      	movs	r2, #7
 800bde2:	601a      	str	r2, [r3, #0]
}
 800bde4:	bf00      	nop
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	e000e010 	.word	0xe000e010
 800bdf4:	e000e018 	.word	0xe000e018
 800bdf8:	20000000 	.word	0x20000000
 800bdfc:	10624dd3 	.word	0x10624dd3
 800be00:	e000e014 	.word	0xe000e014

0800be04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be14 <vPortEnableVFP+0x10>
 800be08:	6801      	ldr	r1, [r0, #0]
 800be0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be0e:	6001      	str	r1, [r0, #0]
 800be10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be12:	bf00      	nop
 800be14:	e000ed88 	.word	0xe000ed88

0800be18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be1e:	f3ef 8305 	mrs	r3, IPSR
 800be22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2b0f      	cmp	r3, #15
 800be28:	d914      	bls.n	800be54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be2a:	4a17      	ldr	r2, [pc, #92]	; (800be88 <vPortValidateInterruptPriority+0x70>)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	4413      	add	r3, r2
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be34:	4b15      	ldr	r3, [pc, #84]	; (800be8c <vPortValidateInterruptPriority+0x74>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	7afa      	ldrb	r2, [r7, #11]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d20a      	bcs.n	800be54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	607b      	str	r3, [r7, #4]
}
 800be50:	bf00      	nop
 800be52:	e7fe      	b.n	800be52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be54:	4b0e      	ldr	r3, [pc, #56]	; (800be90 <vPortValidateInterruptPriority+0x78>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be5c:	4b0d      	ldr	r3, [pc, #52]	; (800be94 <vPortValidateInterruptPriority+0x7c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	429a      	cmp	r2, r3
 800be62:	d90a      	bls.n	800be7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	603b      	str	r3, [r7, #0]
}
 800be76:	bf00      	nop
 800be78:	e7fe      	b.n	800be78 <vPortValidateInterruptPriority+0x60>
	}
 800be7a:	bf00      	nop
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	e000e3f0 	.word	0xe000e3f0
 800be8c:	2000108c 	.word	0x2000108c
 800be90:	e000ed0c 	.word	0xe000ed0c
 800be94:	20001090 	.word	0x20001090

0800be98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b08a      	sub	sp, #40	; 0x28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bea0:	2300      	movs	r3, #0
 800bea2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bea4:	f7fe fbc6 	bl	800a634 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bea8:	4b5b      	ldr	r3, [pc, #364]	; (800c018 <pvPortMalloc+0x180>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800beb0:	f000 f920 	bl	800c0f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800beb4:	4b59      	ldr	r3, [pc, #356]	; (800c01c <pvPortMalloc+0x184>)
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4013      	ands	r3, r2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f040 8093 	bne.w	800bfe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d01d      	beq.n	800bf04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bec8:	2208      	movs	r2, #8
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4413      	add	r3, r2
 800bece:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f003 0307 	and.w	r3, r3, #7
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d014      	beq.n	800bf04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f023 0307 	bic.w	r3, r3, #7
 800bee0:	3308      	adds	r3, #8
 800bee2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f003 0307 	and.w	r3, r3, #7
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00a      	beq.n	800bf04 <pvPortMalloc+0x6c>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	617b      	str	r3, [r7, #20]
}
 800bf00:	bf00      	nop
 800bf02:	e7fe      	b.n	800bf02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d06e      	beq.n	800bfe8 <pvPortMalloc+0x150>
 800bf0a:	4b45      	ldr	r3, [pc, #276]	; (800c020 <pvPortMalloc+0x188>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d869      	bhi.n	800bfe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf14:	4b43      	ldr	r3, [pc, #268]	; (800c024 <pvPortMalloc+0x18c>)
 800bf16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf18:	4b42      	ldr	r3, [pc, #264]	; (800c024 <pvPortMalloc+0x18c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf1e:	e004      	b.n	800bf2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d903      	bls.n	800bf3c <pvPortMalloc+0xa4>
 800bf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1f1      	bne.n	800bf20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf3c:	4b36      	ldr	r3, [pc, #216]	; (800c018 <pvPortMalloc+0x180>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d050      	beq.n	800bfe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf46:	6a3b      	ldr	r3, [r7, #32]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2208      	movs	r2, #8
 800bf4c:	4413      	add	r3, r2
 800bf4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	1ad2      	subs	r2, r2, r3
 800bf60:	2308      	movs	r3, #8
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d91f      	bls.n	800bfa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	f003 0307 	and.w	r3, r3, #7
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00a      	beq.n	800bf90 <pvPortMalloc+0xf8>
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7e:	f383 8811 	msr	BASEPRI, r3
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	613b      	str	r3, [r7, #16]
}
 800bf8c:	bf00      	nop
 800bf8e:	e7fe      	b.n	800bf8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	1ad2      	subs	r2, r2, r3
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bfa2:	69b8      	ldr	r0, [r7, #24]
 800bfa4:	f000 f908 	bl	800c1b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bfa8:	4b1d      	ldr	r3, [pc, #116]	; (800c020 <pvPortMalloc+0x188>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	4a1b      	ldr	r2, [pc, #108]	; (800c020 <pvPortMalloc+0x188>)
 800bfb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bfb6:	4b1a      	ldr	r3, [pc, #104]	; (800c020 <pvPortMalloc+0x188>)
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	4b1b      	ldr	r3, [pc, #108]	; (800c028 <pvPortMalloc+0x190>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d203      	bcs.n	800bfca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bfc2:	4b17      	ldr	r3, [pc, #92]	; (800c020 <pvPortMalloc+0x188>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4a18      	ldr	r2, [pc, #96]	; (800c028 <pvPortMalloc+0x190>)
 800bfc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	685a      	ldr	r2, [r3, #4]
 800bfce:	4b13      	ldr	r3, [pc, #76]	; (800c01c <pvPortMalloc+0x184>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	431a      	orrs	r2, r3
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfda:	2200      	movs	r2, #0
 800bfdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bfde:	4b13      	ldr	r3, [pc, #76]	; (800c02c <pvPortMalloc+0x194>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	4a11      	ldr	r2, [pc, #68]	; (800c02c <pvPortMalloc+0x194>)
 800bfe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bfe8:	f7fe fb32 	bl	800a650 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	f003 0307 	and.w	r3, r3, #7
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00a      	beq.n	800c00c <pvPortMalloc+0x174>
	__asm volatile
 800bff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffa:	f383 8811 	msr	BASEPRI, r3
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	f3bf 8f4f 	dsb	sy
 800c006:	60fb      	str	r3, [r7, #12]
}
 800c008:	bf00      	nop
 800c00a:	e7fe      	b.n	800c00a <pvPortMalloc+0x172>
	return pvReturn;
 800c00c:	69fb      	ldr	r3, [r7, #28]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3728      	adds	r7, #40	; 0x28
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	20004c9c 	.word	0x20004c9c
 800c01c:	20004cb0 	.word	0x20004cb0
 800c020:	20004ca0 	.word	0x20004ca0
 800c024:	20004c94 	.word	0x20004c94
 800c028:	20004ca4 	.word	0x20004ca4
 800c02c:	20004ca8 	.word	0x20004ca8

0800c030 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d04d      	beq.n	800c0de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c042:	2308      	movs	r3, #8
 800c044:	425b      	negs	r3, r3
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	4413      	add	r3, r2
 800c04a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	685a      	ldr	r2, [r3, #4]
 800c054:	4b24      	ldr	r3, [pc, #144]	; (800c0e8 <vPortFree+0xb8>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4013      	ands	r3, r2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10a      	bne.n	800c074 <vPortFree+0x44>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	60fb      	str	r3, [r7, #12]
}
 800c070:	bf00      	nop
 800c072:	e7fe      	b.n	800c072 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00a      	beq.n	800c092 <vPortFree+0x62>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	60bb      	str	r3, [r7, #8]
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	685a      	ldr	r2, [r3, #4]
 800c096:	4b14      	ldr	r3, [pc, #80]	; (800c0e8 <vPortFree+0xb8>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4013      	ands	r3, r2
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d01e      	beq.n	800c0de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d11a      	bne.n	800c0de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	4b0e      	ldr	r3, [pc, #56]	; (800c0e8 <vPortFree+0xb8>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	43db      	mvns	r3, r3
 800c0b2:	401a      	ands	r2, r3
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c0b8:	f7fe fabc 	bl	800a634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	4b0a      	ldr	r3, [pc, #40]	; (800c0ec <vPortFree+0xbc>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	4a09      	ldr	r2, [pc, #36]	; (800c0ec <vPortFree+0xbc>)
 800c0c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c0ca:	6938      	ldr	r0, [r7, #16]
 800c0cc:	f000 f874 	bl	800c1b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c0d0:	4b07      	ldr	r3, [pc, #28]	; (800c0f0 <vPortFree+0xc0>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	4a06      	ldr	r2, [pc, #24]	; (800c0f0 <vPortFree+0xc0>)
 800c0d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c0da:	f7fe fab9 	bl	800a650 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c0de:	bf00      	nop
 800c0e0:	3718      	adds	r7, #24
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20004cb0 	.word	0x20004cb0
 800c0ec:	20004ca0 	.word	0x20004ca0
 800c0f0:	20004cac 	.word	0x20004cac

0800c0f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c0fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c100:	4b27      	ldr	r3, [pc, #156]	; (800c1a0 <prvHeapInit+0xac>)
 800c102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f003 0307 	and.w	r3, r3, #7
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00c      	beq.n	800c128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3307      	adds	r3, #7
 800c112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f023 0307 	bic.w	r3, r3, #7
 800c11a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	4a1f      	ldr	r2, [pc, #124]	; (800c1a0 <prvHeapInit+0xac>)
 800c124:	4413      	add	r3, r2
 800c126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c12c:	4a1d      	ldr	r2, [pc, #116]	; (800c1a4 <prvHeapInit+0xb0>)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c132:	4b1c      	ldr	r3, [pc, #112]	; (800c1a4 <prvHeapInit+0xb0>)
 800c134:	2200      	movs	r2, #0
 800c136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	4413      	add	r3, r2
 800c13e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c140:	2208      	movs	r2, #8
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	1a9b      	subs	r3, r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f023 0307 	bic.w	r3, r3, #7
 800c14e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	4a15      	ldr	r2, [pc, #84]	; (800c1a8 <prvHeapInit+0xb4>)
 800c154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c156:	4b14      	ldr	r3, [pc, #80]	; (800c1a8 <prvHeapInit+0xb4>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2200      	movs	r2, #0
 800c15c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c15e:	4b12      	ldr	r3, [pc, #72]	; (800c1a8 <prvHeapInit+0xb4>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2200      	movs	r2, #0
 800c164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	1ad2      	subs	r2, r2, r3
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c174:	4b0c      	ldr	r3, [pc, #48]	; (800c1a8 <prvHeapInit+0xb4>)
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	4a0a      	ldr	r2, [pc, #40]	; (800c1ac <prvHeapInit+0xb8>)
 800c182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	4a09      	ldr	r2, [pc, #36]	; (800c1b0 <prvHeapInit+0xbc>)
 800c18a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c18c:	4b09      	ldr	r3, [pc, #36]	; (800c1b4 <prvHeapInit+0xc0>)
 800c18e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c192:	601a      	str	r2, [r3, #0]
}
 800c194:	bf00      	nop
 800c196:	3714      	adds	r7, #20
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr
 800c1a0:	20001094 	.word	0x20001094
 800c1a4:	20004c94 	.word	0x20004c94
 800c1a8:	20004c9c 	.word	0x20004c9c
 800c1ac:	20004ca4 	.word	0x20004ca4
 800c1b0:	20004ca0 	.word	0x20004ca0
 800c1b4:	20004cb0 	.word	0x20004cb0

0800c1b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1c0:	4b28      	ldr	r3, [pc, #160]	; (800c264 <prvInsertBlockIntoFreeList+0xac>)
 800c1c2:	60fb      	str	r3, [r7, #12]
 800c1c4:	e002      	b.n	800c1cc <prvInsertBlockIntoFreeList+0x14>
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	60fb      	str	r3, [r7, #12]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d8f7      	bhi.n	800c1c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d108      	bne.n	800c1fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	685a      	ldr	r2, [r3, #4]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	441a      	add	r2, r3
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	441a      	add	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d118      	bne.n	800c240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	4b15      	ldr	r3, [pc, #84]	; (800c268 <prvInsertBlockIntoFreeList+0xb0>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	429a      	cmp	r2, r3
 800c218:	d00d      	beq.n	800c236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	441a      	add	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	e008      	b.n	800c248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c236:	4b0c      	ldr	r3, [pc, #48]	; (800c268 <prvInsertBlockIntoFreeList+0xb0>)
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	e003      	b.n	800c248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d002      	beq.n	800c256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c256:	bf00      	nop
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	20004c94 	.word	0x20004c94
 800c268:	20004c9c 	.word	0x20004c9c

0800c26c <__errno>:
 800c26c:	4b01      	ldr	r3, [pc, #4]	; (800c274 <__errno+0x8>)
 800c26e:	6818      	ldr	r0, [r3, #0]
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	20000028 	.word	0x20000028

0800c278 <__libc_init_array>:
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	4d0d      	ldr	r5, [pc, #52]	; (800c2b0 <__libc_init_array+0x38>)
 800c27c:	4c0d      	ldr	r4, [pc, #52]	; (800c2b4 <__libc_init_array+0x3c>)
 800c27e:	1b64      	subs	r4, r4, r5
 800c280:	10a4      	asrs	r4, r4, #2
 800c282:	2600      	movs	r6, #0
 800c284:	42a6      	cmp	r6, r4
 800c286:	d109      	bne.n	800c29c <__libc_init_array+0x24>
 800c288:	4d0b      	ldr	r5, [pc, #44]	; (800c2b8 <__libc_init_array+0x40>)
 800c28a:	4c0c      	ldr	r4, [pc, #48]	; (800c2bc <__libc_init_array+0x44>)
 800c28c:	f000 fcb8 	bl	800cc00 <_init>
 800c290:	1b64      	subs	r4, r4, r5
 800c292:	10a4      	asrs	r4, r4, #2
 800c294:	2600      	movs	r6, #0
 800c296:	42a6      	cmp	r6, r4
 800c298:	d105      	bne.n	800c2a6 <__libc_init_array+0x2e>
 800c29a:	bd70      	pop	{r4, r5, r6, pc}
 800c29c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a0:	4798      	blx	r3
 800c2a2:	3601      	adds	r6, #1
 800c2a4:	e7ee      	b.n	800c284 <__libc_init_array+0xc>
 800c2a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2aa:	4798      	blx	r3
 800c2ac:	3601      	adds	r6, #1
 800c2ae:	e7f2      	b.n	800c296 <__libc_init_array+0x1e>
 800c2b0:	0800d29c 	.word	0x0800d29c
 800c2b4:	0800d29c 	.word	0x0800d29c
 800c2b8:	0800d29c 	.word	0x0800d29c
 800c2bc:	0800d2a0 	.word	0x0800d2a0

0800c2c0 <__retarget_lock_acquire_recursive>:
 800c2c0:	4770      	bx	lr

0800c2c2 <__retarget_lock_release_recursive>:
 800c2c2:	4770      	bx	lr

0800c2c4 <memcpy>:
 800c2c4:	440a      	add	r2, r1
 800c2c6:	4291      	cmp	r1, r2
 800c2c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c2cc:	d100      	bne.n	800c2d0 <memcpy+0xc>
 800c2ce:	4770      	bx	lr
 800c2d0:	b510      	push	{r4, lr}
 800c2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2da:	4291      	cmp	r1, r2
 800c2dc:	d1f9      	bne.n	800c2d2 <memcpy+0xe>
 800c2de:	bd10      	pop	{r4, pc}

0800c2e0 <memset>:
 800c2e0:	4402      	add	r2, r0
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d100      	bne.n	800c2ea <memset+0xa>
 800c2e8:	4770      	bx	lr
 800c2ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c2ee:	e7f9      	b.n	800c2e4 <memset+0x4>

0800c2f0 <_malloc_r>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	1ccd      	adds	r5, r1, #3
 800c2f4:	f025 0503 	bic.w	r5, r5, #3
 800c2f8:	3508      	adds	r5, #8
 800c2fa:	2d0c      	cmp	r5, #12
 800c2fc:	bf38      	it	cc
 800c2fe:	250c      	movcc	r5, #12
 800c300:	2d00      	cmp	r5, #0
 800c302:	4606      	mov	r6, r0
 800c304:	db01      	blt.n	800c30a <_malloc_r+0x1a>
 800c306:	42a9      	cmp	r1, r5
 800c308:	d903      	bls.n	800c312 <_malloc_r+0x22>
 800c30a:	230c      	movs	r3, #12
 800c30c:	6033      	str	r3, [r6, #0]
 800c30e:	2000      	movs	r0, #0
 800c310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c312:	f000 f8e1 	bl	800c4d8 <__malloc_lock>
 800c316:	4921      	ldr	r1, [pc, #132]	; (800c39c <_malloc_r+0xac>)
 800c318:	680a      	ldr	r2, [r1, #0]
 800c31a:	4614      	mov	r4, r2
 800c31c:	b99c      	cbnz	r4, 800c346 <_malloc_r+0x56>
 800c31e:	4f20      	ldr	r7, [pc, #128]	; (800c3a0 <_malloc_r+0xb0>)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	b923      	cbnz	r3, 800c32e <_malloc_r+0x3e>
 800c324:	4621      	mov	r1, r4
 800c326:	4630      	mov	r0, r6
 800c328:	f000 f8a6 	bl	800c478 <_sbrk_r>
 800c32c:	6038      	str	r0, [r7, #0]
 800c32e:	4629      	mov	r1, r5
 800c330:	4630      	mov	r0, r6
 800c332:	f000 f8a1 	bl	800c478 <_sbrk_r>
 800c336:	1c43      	adds	r3, r0, #1
 800c338:	d123      	bne.n	800c382 <_malloc_r+0x92>
 800c33a:	230c      	movs	r3, #12
 800c33c:	6033      	str	r3, [r6, #0]
 800c33e:	4630      	mov	r0, r6
 800c340:	f000 f8d0 	bl	800c4e4 <__malloc_unlock>
 800c344:	e7e3      	b.n	800c30e <_malloc_r+0x1e>
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	1b5b      	subs	r3, r3, r5
 800c34a:	d417      	bmi.n	800c37c <_malloc_r+0x8c>
 800c34c:	2b0b      	cmp	r3, #11
 800c34e:	d903      	bls.n	800c358 <_malloc_r+0x68>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	441c      	add	r4, r3
 800c354:	6025      	str	r5, [r4, #0]
 800c356:	e004      	b.n	800c362 <_malloc_r+0x72>
 800c358:	6863      	ldr	r3, [r4, #4]
 800c35a:	42a2      	cmp	r2, r4
 800c35c:	bf0c      	ite	eq
 800c35e:	600b      	streq	r3, [r1, #0]
 800c360:	6053      	strne	r3, [r2, #4]
 800c362:	4630      	mov	r0, r6
 800c364:	f000 f8be 	bl	800c4e4 <__malloc_unlock>
 800c368:	f104 000b 	add.w	r0, r4, #11
 800c36c:	1d23      	adds	r3, r4, #4
 800c36e:	f020 0007 	bic.w	r0, r0, #7
 800c372:	1ac2      	subs	r2, r0, r3
 800c374:	d0cc      	beq.n	800c310 <_malloc_r+0x20>
 800c376:	1a1b      	subs	r3, r3, r0
 800c378:	50a3      	str	r3, [r4, r2]
 800c37a:	e7c9      	b.n	800c310 <_malloc_r+0x20>
 800c37c:	4622      	mov	r2, r4
 800c37e:	6864      	ldr	r4, [r4, #4]
 800c380:	e7cc      	b.n	800c31c <_malloc_r+0x2c>
 800c382:	1cc4      	adds	r4, r0, #3
 800c384:	f024 0403 	bic.w	r4, r4, #3
 800c388:	42a0      	cmp	r0, r4
 800c38a:	d0e3      	beq.n	800c354 <_malloc_r+0x64>
 800c38c:	1a21      	subs	r1, r4, r0
 800c38e:	4630      	mov	r0, r6
 800c390:	f000 f872 	bl	800c478 <_sbrk_r>
 800c394:	3001      	adds	r0, #1
 800c396:	d1dd      	bne.n	800c354 <_malloc_r+0x64>
 800c398:	e7cf      	b.n	800c33a <_malloc_r+0x4a>
 800c39a:	bf00      	nop
 800c39c:	20004cb4 	.word	0x20004cb4
 800c3a0:	20004cb8 	.word	0x20004cb8

0800c3a4 <cleanup_glue>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	6809      	ldr	r1, [r1, #0]
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	b109      	cbz	r1, 800c3b2 <cleanup_glue+0xe>
 800c3ae:	f7ff fff9 	bl	800c3a4 <cleanup_glue>
 800c3b2:	4621      	mov	r1, r4
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ba:	f000 b899 	b.w	800c4f0 <_free_r>
	...

0800c3c0 <_reclaim_reent>:
 800c3c0:	4b2c      	ldr	r3, [pc, #176]	; (800c474 <_reclaim_reent+0xb4>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4283      	cmp	r3, r0
 800c3c6:	b570      	push	{r4, r5, r6, lr}
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	d051      	beq.n	800c470 <_reclaim_reent+0xb0>
 800c3cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c3ce:	b143      	cbz	r3, 800c3e2 <_reclaim_reent+0x22>
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d14a      	bne.n	800c46c <_reclaim_reent+0xac>
 800c3d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3d8:	6819      	ldr	r1, [r3, #0]
 800c3da:	b111      	cbz	r1, 800c3e2 <_reclaim_reent+0x22>
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f000 f887 	bl	800c4f0 <_free_r>
 800c3e2:	6961      	ldr	r1, [r4, #20]
 800c3e4:	b111      	cbz	r1, 800c3ec <_reclaim_reent+0x2c>
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 f882 	bl	800c4f0 <_free_r>
 800c3ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c3ee:	b111      	cbz	r1, 800c3f6 <_reclaim_reent+0x36>
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f000 f87d 	bl	800c4f0 <_free_r>
 800c3f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c3f8:	b111      	cbz	r1, 800c400 <_reclaim_reent+0x40>
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 f878 	bl	800c4f0 <_free_r>
 800c400:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c402:	b111      	cbz	r1, 800c40a <_reclaim_reent+0x4a>
 800c404:	4620      	mov	r0, r4
 800c406:	f000 f873 	bl	800c4f0 <_free_r>
 800c40a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c40c:	b111      	cbz	r1, 800c414 <_reclaim_reent+0x54>
 800c40e:	4620      	mov	r0, r4
 800c410:	f000 f86e 	bl	800c4f0 <_free_r>
 800c414:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c416:	b111      	cbz	r1, 800c41e <_reclaim_reent+0x5e>
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 f869 	bl	800c4f0 <_free_r>
 800c41e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c420:	b111      	cbz	r1, 800c428 <_reclaim_reent+0x68>
 800c422:	4620      	mov	r0, r4
 800c424:	f000 f864 	bl	800c4f0 <_free_r>
 800c428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c42a:	b111      	cbz	r1, 800c432 <_reclaim_reent+0x72>
 800c42c:	4620      	mov	r0, r4
 800c42e:	f000 f85f 	bl	800c4f0 <_free_r>
 800c432:	69a3      	ldr	r3, [r4, #24]
 800c434:	b1e3      	cbz	r3, 800c470 <_reclaim_reent+0xb0>
 800c436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c438:	4620      	mov	r0, r4
 800c43a:	4798      	blx	r3
 800c43c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c43e:	b1b9      	cbz	r1, 800c470 <_reclaim_reent+0xb0>
 800c440:	4620      	mov	r0, r4
 800c442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c446:	f7ff bfad 	b.w	800c3a4 <cleanup_glue>
 800c44a:	5949      	ldr	r1, [r1, r5]
 800c44c:	b941      	cbnz	r1, 800c460 <_reclaim_reent+0xa0>
 800c44e:	3504      	adds	r5, #4
 800c450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c452:	2d80      	cmp	r5, #128	; 0x80
 800c454:	68d9      	ldr	r1, [r3, #12]
 800c456:	d1f8      	bne.n	800c44a <_reclaim_reent+0x8a>
 800c458:	4620      	mov	r0, r4
 800c45a:	f000 f849 	bl	800c4f0 <_free_r>
 800c45e:	e7ba      	b.n	800c3d6 <_reclaim_reent+0x16>
 800c460:	680e      	ldr	r6, [r1, #0]
 800c462:	4620      	mov	r0, r4
 800c464:	f000 f844 	bl	800c4f0 <_free_r>
 800c468:	4631      	mov	r1, r6
 800c46a:	e7ef      	b.n	800c44c <_reclaim_reent+0x8c>
 800c46c:	2500      	movs	r5, #0
 800c46e:	e7ef      	b.n	800c450 <_reclaim_reent+0x90>
 800c470:	bd70      	pop	{r4, r5, r6, pc}
 800c472:	bf00      	nop
 800c474:	20000028 	.word	0x20000028

0800c478 <_sbrk_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4d06      	ldr	r5, [pc, #24]	; (800c494 <_sbrk_r+0x1c>)
 800c47c:	2300      	movs	r3, #0
 800c47e:	4604      	mov	r4, r0
 800c480:	4608      	mov	r0, r1
 800c482:	602b      	str	r3, [r5, #0]
 800c484:	f7f4 ff7a 	bl	800137c <_sbrk>
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	d102      	bne.n	800c492 <_sbrk_r+0x1a>
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	b103      	cbz	r3, 800c492 <_sbrk_r+0x1a>
 800c490:	6023      	str	r3, [r4, #0]
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	20005754 	.word	0x20005754

0800c498 <siprintf>:
 800c498:	b40e      	push	{r1, r2, r3}
 800c49a:	b500      	push	{lr}
 800c49c:	b09c      	sub	sp, #112	; 0x70
 800c49e:	ab1d      	add	r3, sp, #116	; 0x74
 800c4a0:	9002      	str	r0, [sp, #8]
 800c4a2:	9006      	str	r0, [sp, #24]
 800c4a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4a8:	4809      	ldr	r0, [pc, #36]	; (800c4d0 <siprintf+0x38>)
 800c4aa:	9107      	str	r1, [sp, #28]
 800c4ac:	9104      	str	r1, [sp, #16]
 800c4ae:	4909      	ldr	r1, [pc, #36]	; (800c4d4 <siprintf+0x3c>)
 800c4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b4:	9105      	str	r1, [sp, #20]
 800c4b6:	6800      	ldr	r0, [r0, #0]
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	a902      	add	r1, sp, #8
 800c4bc:	f000 f8c4 	bl	800c648 <_svfiprintf_r>
 800c4c0:	9b02      	ldr	r3, [sp, #8]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	701a      	strb	r2, [r3, #0]
 800c4c6:	b01c      	add	sp, #112	; 0x70
 800c4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4cc:	b003      	add	sp, #12
 800c4ce:	4770      	bx	lr
 800c4d0:	20000028 	.word	0x20000028
 800c4d4:	ffff0208 	.word	0xffff0208

0800c4d8 <__malloc_lock>:
 800c4d8:	4801      	ldr	r0, [pc, #4]	; (800c4e0 <__malloc_lock+0x8>)
 800c4da:	f7ff bef1 	b.w	800c2c0 <__retarget_lock_acquire_recursive>
 800c4de:	bf00      	nop
 800c4e0:	2000574c 	.word	0x2000574c

0800c4e4 <__malloc_unlock>:
 800c4e4:	4801      	ldr	r0, [pc, #4]	; (800c4ec <__malloc_unlock+0x8>)
 800c4e6:	f7ff beec 	b.w	800c2c2 <__retarget_lock_release_recursive>
 800c4ea:	bf00      	nop
 800c4ec:	2000574c 	.word	0x2000574c

0800c4f0 <_free_r>:
 800c4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4f2:	2900      	cmp	r1, #0
 800c4f4:	d048      	beq.n	800c588 <_free_r+0x98>
 800c4f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4fa:	9001      	str	r0, [sp, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f1a1 0404 	sub.w	r4, r1, #4
 800c502:	bfb8      	it	lt
 800c504:	18e4      	addlt	r4, r4, r3
 800c506:	f7ff ffe7 	bl	800c4d8 <__malloc_lock>
 800c50a:	4a20      	ldr	r2, [pc, #128]	; (800c58c <_free_r+0x9c>)
 800c50c:	9801      	ldr	r0, [sp, #4]
 800c50e:	6813      	ldr	r3, [r2, #0]
 800c510:	4615      	mov	r5, r2
 800c512:	b933      	cbnz	r3, 800c522 <_free_r+0x32>
 800c514:	6063      	str	r3, [r4, #4]
 800c516:	6014      	str	r4, [r2, #0]
 800c518:	b003      	add	sp, #12
 800c51a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c51e:	f7ff bfe1 	b.w	800c4e4 <__malloc_unlock>
 800c522:	42a3      	cmp	r3, r4
 800c524:	d90b      	bls.n	800c53e <_free_r+0x4e>
 800c526:	6821      	ldr	r1, [r4, #0]
 800c528:	1862      	adds	r2, r4, r1
 800c52a:	4293      	cmp	r3, r2
 800c52c:	bf04      	itt	eq
 800c52e:	681a      	ldreq	r2, [r3, #0]
 800c530:	685b      	ldreq	r3, [r3, #4]
 800c532:	6063      	str	r3, [r4, #4]
 800c534:	bf04      	itt	eq
 800c536:	1852      	addeq	r2, r2, r1
 800c538:	6022      	streq	r2, [r4, #0]
 800c53a:	602c      	str	r4, [r5, #0]
 800c53c:	e7ec      	b.n	800c518 <_free_r+0x28>
 800c53e:	461a      	mov	r2, r3
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	b10b      	cbz	r3, 800c548 <_free_r+0x58>
 800c544:	42a3      	cmp	r3, r4
 800c546:	d9fa      	bls.n	800c53e <_free_r+0x4e>
 800c548:	6811      	ldr	r1, [r2, #0]
 800c54a:	1855      	adds	r5, r2, r1
 800c54c:	42a5      	cmp	r5, r4
 800c54e:	d10b      	bne.n	800c568 <_free_r+0x78>
 800c550:	6824      	ldr	r4, [r4, #0]
 800c552:	4421      	add	r1, r4
 800c554:	1854      	adds	r4, r2, r1
 800c556:	42a3      	cmp	r3, r4
 800c558:	6011      	str	r1, [r2, #0]
 800c55a:	d1dd      	bne.n	800c518 <_free_r+0x28>
 800c55c:	681c      	ldr	r4, [r3, #0]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	6053      	str	r3, [r2, #4]
 800c562:	4421      	add	r1, r4
 800c564:	6011      	str	r1, [r2, #0]
 800c566:	e7d7      	b.n	800c518 <_free_r+0x28>
 800c568:	d902      	bls.n	800c570 <_free_r+0x80>
 800c56a:	230c      	movs	r3, #12
 800c56c:	6003      	str	r3, [r0, #0]
 800c56e:	e7d3      	b.n	800c518 <_free_r+0x28>
 800c570:	6825      	ldr	r5, [r4, #0]
 800c572:	1961      	adds	r1, r4, r5
 800c574:	428b      	cmp	r3, r1
 800c576:	bf04      	itt	eq
 800c578:	6819      	ldreq	r1, [r3, #0]
 800c57a:	685b      	ldreq	r3, [r3, #4]
 800c57c:	6063      	str	r3, [r4, #4]
 800c57e:	bf04      	itt	eq
 800c580:	1949      	addeq	r1, r1, r5
 800c582:	6021      	streq	r1, [r4, #0]
 800c584:	6054      	str	r4, [r2, #4]
 800c586:	e7c7      	b.n	800c518 <_free_r+0x28>
 800c588:	b003      	add	sp, #12
 800c58a:	bd30      	pop	{r4, r5, pc}
 800c58c:	20004cb4 	.word	0x20004cb4

0800c590 <__ssputs_r>:
 800c590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c594:	688e      	ldr	r6, [r1, #8]
 800c596:	429e      	cmp	r6, r3
 800c598:	4682      	mov	sl, r0
 800c59a:	460c      	mov	r4, r1
 800c59c:	4690      	mov	r8, r2
 800c59e:	461f      	mov	r7, r3
 800c5a0:	d838      	bhi.n	800c614 <__ssputs_r+0x84>
 800c5a2:	898a      	ldrh	r2, [r1, #12]
 800c5a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5a8:	d032      	beq.n	800c610 <__ssputs_r+0x80>
 800c5aa:	6825      	ldr	r5, [r4, #0]
 800c5ac:	6909      	ldr	r1, [r1, #16]
 800c5ae:	eba5 0901 	sub.w	r9, r5, r1
 800c5b2:	6965      	ldr	r5, [r4, #20]
 800c5b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5bc:	3301      	adds	r3, #1
 800c5be:	444b      	add	r3, r9
 800c5c0:	106d      	asrs	r5, r5, #1
 800c5c2:	429d      	cmp	r5, r3
 800c5c4:	bf38      	it	cc
 800c5c6:	461d      	movcc	r5, r3
 800c5c8:	0553      	lsls	r3, r2, #21
 800c5ca:	d531      	bpl.n	800c630 <__ssputs_r+0xa0>
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	f7ff fe8f 	bl	800c2f0 <_malloc_r>
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	b950      	cbnz	r0, 800c5ec <__ssputs_r+0x5c>
 800c5d6:	230c      	movs	r3, #12
 800c5d8:	f8ca 3000 	str.w	r3, [sl]
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5e2:	81a3      	strh	r3, [r4, #12]
 800c5e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ec:	6921      	ldr	r1, [r4, #16]
 800c5ee:	464a      	mov	r2, r9
 800c5f0:	f7ff fe68 	bl	800c2c4 <memcpy>
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5fe:	81a3      	strh	r3, [r4, #12]
 800c600:	6126      	str	r6, [r4, #16]
 800c602:	6165      	str	r5, [r4, #20]
 800c604:	444e      	add	r6, r9
 800c606:	eba5 0509 	sub.w	r5, r5, r9
 800c60a:	6026      	str	r6, [r4, #0]
 800c60c:	60a5      	str	r5, [r4, #8]
 800c60e:	463e      	mov	r6, r7
 800c610:	42be      	cmp	r6, r7
 800c612:	d900      	bls.n	800c616 <__ssputs_r+0x86>
 800c614:	463e      	mov	r6, r7
 800c616:	4632      	mov	r2, r6
 800c618:	6820      	ldr	r0, [r4, #0]
 800c61a:	4641      	mov	r1, r8
 800c61c:	f000 faa8 	bl	800cb70 <memmove>
 800c620:	68a3      	ldr	r3, [r4, #8]
 800c622:	6822      	ldr	r2, [r4, #0]
 800c624:	1b9b      	subs	r3, r3, r6
 800c626:	4432      	add	r2, r6
 800c628:	60a3      	str	r3, [r4, #8]
 800c62a:	6022      	str	r2, [r4, #0]
 800c62c:	2000      	movs	r0, #0
 800c62e:	e7db      	b.n	800c5e8 <__ssputs_r+0x58>
 800c630:	462a      	mov	r2, r5
 800c632:	f000 fab7 	bl	800cba4 <_realloc_r>
 800c636:	4606      	mov	r6, r0
 800c638:	2800      	cmp	r0, #0
 800c63a:	d1e1      	bne.n	800c600 <__ssputs_r+0x70>
 800c63c:	6921      	ldr	r1, [r4, #16]
 800c63e:	4650      	mov	r0, sl
 800c640:	f7ff ff56 	bl	800c4f0 <_free_r>
 800c644:	e7c7      	b.n	800c5d6 <__ssputs_r+0x46>
	...

0800c648 <_svfiprintf_r>:
 800c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c64c:	4698      	mov	r8, r3
 800c64e:	898b      	ldrh	r3, [r1, #12]
 800c650:	061b      	lsls	r3, r3, #24
 800c652:	b09d      	sub	sp, #116	; 0x74
 800c654:	4607      	mov	r7, r0
 800c656:	460d      	mov	r5, r1
 800c658:	4614      	mov	r4, r2
 800c65a:	d50e      	bpl.n	800c67a <_svfiprintf_r+0x32>
 800c65c:	690b      	ldr	r3, [r1, #16]
 800c65e:	b963      	cbnz	r3, 800c67a <_svfiprintf_r+0x32>
 800c660:	2140      	movs	r1, #64	; 0x40
 800c662:	f7ff fe45 	bl	800c2f0 <_malloc_r>
 800c666:	6028      	str	r0, [r5, #0]
 800c668:	6128      	str	r0, [r5, #16]
 800c66a:	b920      	cbnz	r0, 800c676 <_svfiprintf_r+0x2e>
 800c66c:	230c      	movs	r3, #12
 800c66e:	603b      	str	r3, [r7, #0]
 800c670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c674:	e0d1      	b.n	800c81a <_svfiprintf_r+0x1d2>
 800c676:	2340      	movs	r3, #64	; 0x40
 800c678:	616b      	str	r3, [r5, #20]
 800c67a:	2300      	movs	r3, #0
 800c67c:	9309      	str	r3, [sp, #36]	; 0x24
 800c67e:	2320      	movs	r3, #32
 800c680:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c684:	f8cd 800c 	str.w	r8, [sp, #12]
 800c688:	2330      	movs	r3, #48	; 0x30
 800c68a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c834 <_svfiprintf_r+0x1ec>
 800c68e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c692:	f04f 0901 	mov.w	r9, #1
 800c696:	4623      	mov	r3, r4
 800c698:	469a      	mov	sl, r3
 800c69a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c69e:	b10a      	cbz	r2, 800c6a4 <_svfiprintf_r+0x5c>
 800c6a0:	2a25      	cmp	r2, #37	; 0x25
 800c6a2:	d1f9      	bne.n	800c698 <_svfiprintf_r+0x50>
 800c6a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6a8:	d00b      	beq.n	800c6c2 <_svfiprintf_r+0x7a>
 800c6aa:	465b      	mov	r3, fp
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7ff ff6d 	bl	800c590 <__ssputs_r>
 800c6b6:	3001      	adds	r0, #1
 800c6b8:	f000 80aa 	beq.w	800c810 <_svfiprintf_r+0x1c8>
 800c6bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6be:	445a      	add	r2, fp
 800c6c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c6c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 80a2 	beq.w	800c810 <_svfiprintf_r+0x1c8>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6d6:	f10a 0a01 	add.w	sl, sl, #1
 800c6da:	9304      	str	r3, [sp, #16]
 800c6dc:	9307      	str	r3, [sp, #28]
 800c6de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c6e4:	4654      	mov	r4, sl
 800c6e6:	2205      	movs	r2, #5
 800c6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ec:	4851      	ldr	r0, [pc, #324]	; (800c834 <_svfiprintf_r+0x1ec>)
 800c6ee:	f7f3 fd7f 	bl	80001f0 <memchr>
 800c6f2:	9a04      	ldr	r2, [sp, #16]
 800c6f4:	b9d8      	cbnz	r0, 800c72e <_svfiprintf_r+0xe6>
 800c6f6:	06d0      	lsls	r0, r2, #27
 800c6f8:	bf44      	itt	mi
 800c6fa:	2320      	movmi	r3, #32
 800c6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c700:	0711      	lsls	r1, r2, #28
 800c702:	bf44      	itt	mi
 800c704:	232b      	movmi	r3, #43	; 0x2b
 800c706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c70a:	f89a 3000 	ldrb.w	r3, [sl]
 800c70e:	2b2a      	cmp	r3, #42	; 0x2a
 800c710:	d015      	beq.n	800c73e <_svfiprintf_r+0xf6>
 800c712:	9a07      	ldr	r2, [sp, #28]
 800c714:	4654      	mov	r4, sl
 800c716:	2000      	movs	r0, #0
 800c718:	f04f 0c0a 	mov.w	ip, #10
 800c71c:	4621      	mov	r1, r4
 800c71e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c722:	3b30      	subs	r3, #48	; 0x30
 800c724:	2b09      	cmp	r3, #9
 800c726:	d94e      	bls.n	800c7c6 <_svfiprintf_r+0x17e>
 800c728:	b1b0      	cbz	r0, 800c758 <_svfiprintf_r+0x110>
 800c72a:	9207      	str	r2, [sp, #28]
 800c72c:	e014      	b.n	800c758 <_svfiprintf_r+0x110>
 800c72e:	eba0 0308 	sub.w	r3, r0, r8
 800c732:	fa09 f303 	lsl.w	r3, r9, r3
 800c736:	4313      	orrs	r3, r2
 800c738:	9304      	str	r3, [sp, #16]
 800c73a:	46a2      	mov	sl, r4
 800c73c:	e7d2      	b.n	800c6e4 <_svfiprintf_r+0x9c>
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	1d19      	adds	r1, r3, #4
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	9103      	str	r1, [sp, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	bfbb      	ittet	lt
 800c74a:	425b      	neglt	r3, r3
 800c74c:	f042 0202 	orrlt.w	r2, r2, #2
 800c750:	9307      	strge	r3, [sp, #28]
 800c752:	9307      	strlt	r3, [sp, #28]
 800c754:	bfb8      	it	lt
 800c756:	9204      	strlt	r2, [sp, #16]
 800c758:	7823      	ldrb	r3, [r4, #0]
 800c75a:	2b2e      	cmp	r3, #46	; 0x2e
 800c75c:	d10c      	bne.n	800c778 <_svfiprintf_r+0x130>
 800c75e:	7863      	ldrb	r3, [r4, #1]
 800c760:	2b2a      	cmp	r3, #42	; 0x2a
 800c762:	d135      	bne.n	800c7d0 <_svfiprintf_r+0x188>
 800c764:	9b03      	ldr	r3, [sp, #12]
 800c766:	1d1a      	adds	r2, r3, #4
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	9203      	str	r2, [sp, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	bfb8      	it	lt
 800c770:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c774:	3402      	adds	r4, #2
 800c776:	9305      	str	r3, [sp, #20]
 800c778:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c844 <_svfiprintf_r+0x1fc>
 800c77c:	7821      	ldrb	r1, [r4, #0]
 800c77e:	2203      	movs	r2, #3
 800c780:	4650      	mov	r0, sl
 800c782:	f7f3 fd35 	bl	80001f0 <memchr>
 800c786:	b140      	cbz	r0, 800c79a <_svfiprintf_r+0x152>
 800c788:	2340      	movs	r3, #64	; 0x40
 800c78a:	eba0 000a 	sub.w	r0, r0, sl
 800c78e:	fa03 f000 	lsl.w	r0, r3, r0
 800c792:	9b04      	ldr	r3, [sp, #16]
 800c794:	4303      	orrs	r3, r0
 800c796:	3401      	adds	r4, #1
 800c798:	9304      	str	r3, [sp, #16]
 800c79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c79e:	4826      	ldr	r0, [pc, #152]	; (800c838 <_svfiprintf_r+0x1f0>)
 800c7a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7a4:	2206      	movs	r2, #6
 800c7a6:	f7f3 fd23 	bl	80001f0 <memchr>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d038      	beq.n	800c820 <_svfiprintf_r+0x1d8>
 800c7ae:	4b23      	ldr	r3, [pc, #140]	; (800c83c <_svfiprintf_r+0x1f4>)
 800c7b0:	bb1b      	cbnz	r3, 800c7fa <_svfiprintf_r+0x1b2>
 800c7b2:	9b03      	ldr	r3, [sp, #12]
 800c7b4:	3307      	adds	r3, #7
 800c7b6:	f023 0307 	bic.w	r3, r3, #7
 800c7ba:	3308      	adds	r3, #8
 800c7bc:	9303      	str	r3, [sp, #12]
 800c7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c0:	4433      	add	r3, r6
 800c7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c4:	e767      	b.n	800c696 <_svfiprintf_r+0x4e>
 800c7c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	2001      	movs	r0, #1
 800c7ce:	e7a5      	b.n	800c71c <_svfiprintf_r+0xd4>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	3401      	adds	r4, #1
 800c7d4:	9305      	str	r3, [sp, #20]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	f04f 0c0a 	mov.w	ip, #10
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7e2:	3a30      	subs	r2, #48	; 0x30
 800c7e4:	2a09      	cmp	r2, #9
 800c7e6:	d903      	bls.n	800c7f0 <_svfiprintf_r+0x1a8>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d0c5      	beq.n	800c778 <_svfiprintf_r+0x130>
 800c7ec:	9105      	str	r1, [sp, #20]
 800c7ee:	e7c3      	b.n	800c778 <_svfiprintf_r+0x130>
 800c7f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e7f0      	b.n	800c7dc <_svfiprintf_r+0x194>
 800c7fa:	ab03      	add	r3, sp, #12
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	462a      	mov	r2, r5
 800c800:	4b0f      	ldr	r3, [pc, #60]	; (800c840 <_svfiprintf_r+0x1f8>)
 800c802:	a904      	add	r1, sp, #16
 800c804:	4638      	mov	r0, r7
 800c806:	f3af 8000 	nop.w
 800c80a:	1c42      	adds	r2, r0, #1
 800c80c:	4606      	mov	r6, r0
 800c80e:	d1d6      	bne.n	800c7be <_svfiprintf_r+0x176>
 800c810:	89ab      	ldrh	r3, [r5, #12]
 800c812:	065b      	lsls	r3, r3, #25
 800c814:	f53f af2c 	bmi.w	800c670 <_svfiprintf_r+0x28>
 800c818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c81a:	b01d      	add	sp, #116	; 0x74
 800c81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c820:	ab03      	add	r3, sp, #12
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	462a      	mov	r2, r5
 800c826:	4b06      	ldr	r3, [pc, #24]	; (800c840 <_svfiprintf_r+0x1f8>)
 800c828:	a904      	add	r1, sp, #16
 800c82a:	4638      	mov	r0, r7
 800c82c:	f000 f87a 	bl	800c924 <_printf_i>
 800c830:	e7eb      	b.n	800c80a <_svfiprintf_r+0x1c2>
 800c832:	bf00      	nop
 800c834:	0800d260 	.word	0x0800d260
 800c838:	0800d26a 	.word	0x0800d26a
 800c83c:	00000000 	.word	0x00000000
 800c840:	0800c591 	.word	0x0800c591
 800c844:	0800d266 	.word	0x0800d266

0800c848 <_printf_common>:
 800c848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c84c:	4616      	mov	r6, r2
 800c84e:	4699      	mov	r9, r3
 800c850:	688a      	ldr	r2, [r1, #8]
 800c852:	690b      	ldr	r3, [r1, #16]
 800c854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c858:	4293      	cmp	r3, r2
 800c85a:	bfb8      	it	lt
 800c85c:	4613      	movlt	r3, r2
 800c85e:	6033      	str	r3, [r6, #0]
 800c860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c864:	4607      	mov	r7, r0
 800c866:	460c      	mov	r4, r1
 800c868:	b10a      	cbz	r2, 800c86e <_printf_common+0x26>
 800c86a:	3301      	adds	r3, #1
 800c86c:	6033      	str	r3, [r6, #0]
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	0699      	lsls	r1, r3, #26
 800c872:	bf42      	ittt	mi
 800c874:	6833      	ldrmi	r3, [r6, #0]
 800c876:	3302      	addmi	r3, #2
 800c878:	6033      	strmi	r3, [r6, #0]
 800c87a:	6825      	ldr	r5, [r4, #0]
 800c87c:	f015 0506 	ands.w	r5, r5, #6
 800c880:	d106      	bne.n	800c890 <_printf_common+0x48>
 800c882:	f104 0a19 	add.w	sl, r4, #25
 800c886:	68e3      	ldr	r3, [r4, #12]
 800c888:	6832      	ldr	r2, [r6, #0]
 800c88a:	1a9b      	subs	r3, r3, r2
 800c88c:	42ab      	cmp	r3, r5
 800c88e:	dc26      	bgt.n	800c8de <_printf_common+0x96>
 800c890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c894:	1e13      	subs	r3, r2, #0
 800c896:	6822      	ldr	r2, [r4, #0]
 800c898:	bf18      	it	ne
 800c89a:	2301      	movne	r3, #1
 800c89c:	0692      	lsls	r2, r2, #26
 800c89e:	d42b      	bmi.n	800c8f8 <_printf_common+0xb0>
 800c8a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8a4:	4649      	mov	r1, r9
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	47c0      	blx	r8
 800c8aa:	3001      	adds	r0, #1
 800c8ac:	d01e      	beq.n	800c8ec <_printf_common+0xa4>
 800c8ae:	6823      	ldr	r3, [r4, #0]
 800c8b0:	68e5      	ldr	r5, [r4, #12]
 800c8b2:	6832      	ldr	r2, [r6, #0]
 800c8b4:	f003 0306 	and.w	r3, r3, #6
 800c8b8:	2b04      	cmp	r3, #4
 800c8ba:	bf08      	it	eq
 800c8bc:	1aad      	subeq	r5, r5, r2
 800c8be:	68a3      	ldr	r3, [r4, #8]
 800c8c0:	6922      	ldr	r2, [r4, #16]
 800c8c2:	bf0c      	ite	eq
 800c8c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8c8:	2500      	movne	r5, #0
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	bfc4      	itt	gt
 800c8ce:	1a9b      	subgt	r3, r3, r2
 800c8d0:	18ed      	addgt	r5, r5, r3
 800c8d2:	2600      	movs	r6, #0
 800c8d4:	341a      	adds	r4, #26
 800c8d6:	42b5      	cmp	r5, r6
 800c8d8:	d11a      	bne.n	800c910 <_printf_common+0xc8>
 800c8da:	2000      	movs	r0, #0
 800c8dc:	e008      	b.n	800c8f0 <_printf_common+0xa8>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	4652      	mov	r2, sl
 800c8e2:	4649      	mov	r1, r9
 800c8e4:	4638      	mov	r0, r7
 800c8e6:	47c0      	blx	r8
 800c8e8:	3001      	adds	r0, #1
 800c8ea:	d103      	bne.n	800c8f4 <_printf_common+0xac>
 800c8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8f4:	3501      	adds	r5, #1
 800c8f6:	e7c6      	b.n	800c886 <_printf_common+0x3e>
 800c8f8:	18e1      	adds	r1, r4, r3
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	2030      	movs	r0, #48	; 0x30
 800c8fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c902:	4422      	add	r2, r4
 800c904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c90c:	3302      	adds	r3, #2
 800c90e:	e7c7      	b.n	800c8a0 <_printf_common+0x58>
 800c910:	2301      	movs	r3, #1
 800c912:	4622      	mov	r2, r4
 800c914:	4649      	mov	r1, r9
 800c916:	4638      	mov	r0, r7
 800c918:	47c0      	blx	r8
 800c91a:	3001      	adds	r0, #1
 800c91c:	d0e6      	beq.n	800c8ec <_printf_common+0xa4>
 800c91e:	3601      	adds	r6, #1
 800c920:	e7d9      	b.n	800c8d6 <_printf_common+0x8e>
	...

0800c924 <_printf_i>:
 800c924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c928:	460c      	mov	r4, r1
 800c92a:	4691      	mov	r9, r2
 800c92c:	7e27      	ldrb	r7, [r4, #24]
 800c92e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c930:	2f78      	cmp	r7, #120	; 0x78
 800c932:	4680      	mov	r8, r0
 800c934:	469a      	mov	sl, r3
 800c936:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c93a:	d807      	bhi.n	800c94c <_printf_i+0x28>
 800c93c:	2f62      	cmp	r7, #98	; 0x62
 800c93e:	d80a      	bhi.n	800c956 <_printf_i+0x32>
 800c940:	2f00      	cmp	r7, #0
 800c942:	f000 80d8 	beq.w	800caf6 <_printf_i+0x1d2>
 800c946:	2f58      	cmp	r7, #88	; 0x58
 800c948:	f000 80a3 	beq.w	800ca92 <_printf_i+0x16e>
 800c94c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c954:	e03a      	b.n	800c9cc <_printf_i+0xa8>
 800c956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c95a:	2b15      	cmp	r3, #21
 800c95c:	d8f6      	bhi.n	800c94c <_printf_i+0x28>
 800c95e:	a001      	add	r0, pc, #4	; (adr r0, 800c964 <_printf_i+0x40>)
 800c960:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c964:	0800c9bd 	.word	0x0800c9bd
 800c968:	0800c9d1 	.word	0x0800c9d1
 800c96c:	0800c94d 	.word	0x0800c94d
 800c970:	0800c94d 	.word	0x0800c94d
 800c974:	0800c94d 	.word	0x0800c94d
 800c978:	0800c94d 	.word	0x0800c94d
 800c97c:	0800c9d1 	.word	0x0800c9d1
 800c980:	0800c94d 	.word	0x0800c94d
 800c984:	0800c94d 	.word	0x0800c94d
 800c988:	0800c94d 	.word	0x0800c94d
 800c98c:	0800c94d 	.word	0x0800c94d
 800c990:	0800cadd 	.word	0x0800cadd
 800c994:	0800ca01 	.word	0x0800ca01
 800c998:	0800cabf 	.word	0x0800cabf
 800c99c:	0800c94d 	.word	0x0800c94d
 800c9a0:	0800c94d 	.word	0x0800c94d
 800c9a4:	0800caff 	.word	0x0800caff
 800c9a8:	0800c94d 	.word	0x0800c94d
 800c9ac:	0800ca01 	.word	0x0800ca01
 800c9b0:	0800c94d 	.word	0x0800c94d
 800c9b4:	0800c94d 	.word	0x0800c94d
 800c9b8:	0800cac7 	.word	0x0800cac7
 800c9bc:	680b      	ldr	r3, [r1, #0]
 800c9be:	1d1a      	adds	r2, r3, #4
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	600a      	str	r2, [r1, #0]
 800c9c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c9c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e0a3      	b.n	800cb18 <_printf_i+0x1f4>
 800c9d0:	6825      	ldr	r5, [r4, #0]
 800c9d2:	6808      	ldr	r0, [r1, #0]
 800c9d4:	062e      	lsls	r6, r5, #24
 800c9d6:	f100 0304 	add.w	r3, r0, #4
 800c9da:	d50a      	bpl.n	800c9f2 <_printf_i+0xce>
 800c9dc:	6805      	ldr	r5, [r0, #0]
 800c9de:	600b      	str	r3, [r1, #0]
 800c9e0:	2d00      	cmp	r5, #0
 800c9e2:	da03      	bge.n	800c9ec <_printf_i+0xc8>
 800c9e4:	232d      	movs	r3, #45	; 0x2d
 800c9e6:	426d      	negs	r5, r5
 800c9e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9ec:	485e      	ldr	r0, [pc, #376]	; (800cb68 <_printf_i+0x244>)
 800c9ee:	230a      	movs	r3, #10
 800c9f0:	e019      	b.n	800ca26 <_printf_i+0x102>
 800c9f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c9f6:	6805      	ldr	r5, [r0, #0]
 800c9f8:	600b      	str	r3, [r1, #0]
 800c9fa:	bf18      	it	ne
 800c9fc:	b22d      	sxthne	r5, r5
 800c9fe:	e7ef      	b.n	800c9e0 <_printf_i+0xbc>
 800ca00:	680b      	ldr	r3, [r1, #0]
 800ca02:	6825      	ldr	r5, [r4, #0]
 800ca04:	1d18      	adds	r0, r3, #4
 800ca06:	6008      	str	r0, [r1, #0]
 800ca08:	0628      	lsls	r0, r5, #24
 800ca0a:	d501      	bpl.n	800ca10 <_printf_i+0xec>
 800ca0c:	681d      	ldr	r5, [r3, #0]
 800ca0e:	e002      	b.n	800ca16 <_printf_i+0xf2>
 800ca10:	0669      	lsls	r1, r5, #25
 800ca12:	d5fb      	bpl.n	800ca0c <_printf_i+0xe8>
 800ca14:	881d      	ldrh	r5, [r3, #0]
 800ca16:	4854      	ldr	r0, [pc, #336]	; (800cb68 <_printf_i+0x244>)
 800ca18:	2f6f      	cmp	r7, #111	; 0x6f
 800ca1a:	bf0c      	ite	eq
 800ca1c:	2308      	moveq	r3, #8
 800ca1e:	230a      	movne	r3, #10
 800ca20:	2100      	movs	r1, #0
 800ca22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca26:	6866      	ldr	r6, [r4, #4]
 800ca28:	60a6      	str	r6, [r4, #8]
 800ca2a:	2e00      	cmp	r6, #0
 800ca2c:	bfa2      	ittt	ge
 800ca2e:	6821      	ldrge	r1, [r4, #0]
 800ca30:	f021 0104 	bicge.w	r1, r1, #4
 800ca34:	6021      	strge	r1, [r4, #0]
 800ca36:	b90d      	cbnz	r5, 800ca3c <_printf_i+0x118>
 800ca38:	2e00      	cmp	r6, #0
 800ca3a:	d04d      	beq.n	800cad8 <_printf_i+0x1b4>
 800ca3c:	4616      	mov	r6, r2
 800ca3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca42:	fb03 5711 	mls	r7, r3, r1, r5
 800ca46:	5dc7      	ldrb	r7, [r0, r7]
 800ca48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca4c:	462f      	mov	r7, r5
 800ca4e:	42bb      	cmp	r3, r7
 800ca50:	460d      	mov	r5, r1
 800ca52:	d9f4      	bls.n	800ca3e <_printf_i+0x11a>
 800ca54:	2b08      	cmp	r3, #8
 800ca56:	d10b      	bne.n	800ca70 <_printf_i+0x14c>
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	07df      	lsls	r7, r3, #31
 800ca5c:	d508      	bpl.n	800ca70 <_printf_i+0x14c>
 800ca5e:	6923      	ldr	r3, [r4, #16]
 800ca60:	6861      	ldr	r1, [r4, #4]
 800ca62:	4299      	cmp	r1, r3
 800ca64:	bfde      	ittt	le
 800ca66:	2330      	movle	r3, #48	; 0x30
 800ca68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca6c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ca70:	1b92      	subs	r2, r2, r6
 800ca72:	6122      	str	r2, [r4, #16]
 800ca74:	f8cd a000 	str.w	sl, [sp]
 800ca78:	464b      	mov	r3, r9
 800ca7a:	aa03      	add	r2, sp, #12
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	4640      	mov	r0, r8
 800ca80:	f7ff fee2 	bl	800c848 <_printf_common>
 800ca84:	3001      	adds	r0, #1
 800ca86:	d14c      	bne.n	800cb22 <_printf_i+0x1fe>
 800ca88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca8c:	b004      	add	sp, #16
 800ca8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca92:	4835      	ldr	r0, [pc, #212]	; (800cb68 <_printf_i+0x244>)
 800ca94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	680e      	ldr	r6, [r1, #0]
 800ca9c:	061f      	lsls	r7, r3, #24
 800ca9e:	f856 5b04 	ldr.w	r5, [r6], #4
 800caa2:	600e      	str	r6, [r1, #0]
 800caa4:	d514      	bpl.n	800cad0 <_printf_i+0x1ac>
 800caa6:	07d9      	lsls	r1, r3, #31
 800caa8:	bf44      	itt	mi
 800caaa:	f043 0320 	orrmi.w	r3, r3, #32
 800caae:	6023      	strmi	r3, [r4, #0]
 800cab0:	b91d      	cbnz	r5, 800caba <_printf_i+0x196>
 800cab2:	6823      	ldr	r3, [r4, #0]
 800cab4:	f023 0320 	bic.w	r3, r3, #32
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	2310      	movs	r3, #16
 800cabc:	e7b0      	b.n	800ca20 <_printf_i+0xfc>
 800cabe:	6823      	ldr	r3, [r4, #0]
 800cac0:	f043 0320 	orr.w	r3, r3, #32
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	2378      	movs	r3, #120	; 0x78
 800cac8:	4828      	ldr	r0, [pc, #160]	; (800cb6c <_printf_i+0x248>)
 800caca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cace:	e7e3      	b.n	800ca98 <_printf_i+0x174>
 800cad0:	065e      	lsls	r6, r3, #25
 800cad2:	bf48      	it	mi
 800cad4:	b2ad      	uxthmi	r5, r5
 800cad6:	e7e6      	b.n	800caa6 <_printf_i+0x182>
 800cad8:	4616      	mov	r6, r2
 800cada:	e7bb      	b.n	800ca54 <_printf_i+0x130>
 800cadc:	680b      	ldr	r3, [r1, #0]
 800cade:	6826      	ldr	r6, [r4, #0]
 800cae0:	6960      	ldr	r0, [r4, #20]
 800cae2:	1d1d      	adds	r5, r3, #4
 800cae4:	600d      	str	r5, [r1, #0]
 800cae6:	0635      	lsls	r5, r6, #24
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	d501      	bpl.n	800caf0 <_printf_i+0x1cc>
 800caec:	6018      	str	r0, [r3, #0]
 800caee:	e002      	b.n	800caf6 <_printf_i+0x1d2>
 800caf0:	0671      	lsls	r1, r6, #25
 800caf2:	d5fb      	bpl.n	800caec <_printf_i+0x1c8>
 800caf4:	8018      	strh	r0, [r3, #0]
 800caf6:	2300      	movs	r3, #0
 800caf8:	6123      	str	r3, [r4, #16]
 800cafa:	4616      	mov	r6, r2
 800cafc:	e7ba      	b.n	800ca74 <_printf_i+0x150>
 800cafe:	680b      	ldr	r3, [r1, #0]
 800cb00:	1d1a      	adds	r2, r3, #4
 800cb02:	600a      	str	r2, [r1, #0]
 800cb04:	681e      	ldr	r6, [r3, #0]
 800cb06:	6862      	ldr	r2, [r4, #4]
 800cb08:	2100      	movs	r1, #0
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f7f3 fb70 	bl	80001f0 <memchr>
 800cb10:	b108      	cbz	r0, 800cb16 <_printf_i+0x1f2>
 800cb12:	1b80      	subs	r0, r0, r6
 800cb14:	6060      	str	r0, [r4, #4]
 800cb16:	6863      	ldr	r3, [r4, #4]
 800cb18:	6123      	str	r3, [r4, #16]
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb20:	e7a8      	b.n	800ca74 <_printf_i+0x150>
 800cb22:	6923      	ldr	r3, [r4, #16]
 800cb24:	4632      	mov	r2, r6
 800cb26:	4649      	mov	r1, r9
 800cb28:	4640      	mov	r0, r8
 800cb2a:	47d0      	blx	sl
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	d0ab      	beq.n	800ca88 <_printf_i+0x164>
 800cb30:	6823      	ldr	r3, [r4, #0]
 800cb32:	079b      	lsls	r3, r3, #30
 800cb34:	d413      	bmi.n	800cb5e <_printf_i+0x23a>
 800cb36:	68e0      	ldr	r0, [r4, #12]
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	4298      	cmp	r0, r3
 800cb3c:	bfb8      	it	lt
 800cb3e:	4618      	movlt	r0, r3
 800cb40:	e7a4      	b.n	800ca8c <_printf_i+0x168>
 800cb42:	2301      	movs	r3, #1
 800cb44:	4632      	mov	r2, r6
 800cb46:	4649      	mov	r1, r9
 800cb48:	4640      	mov	r0, r8
 800cb4a:	47d0      	blx	sl
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	d09b      	beq.n	800ca88 <_printf_i+0x164>
 800cb50:	3501      	adds	r5, #1
 800cb52:	68e3      	ldr	r3, [r4, #12]
 800cb54:	9903      	ldr	r1, [sp, #12]
 800cb56:	1a5b      	subs	r3, r3, r1
 800cb58:	42ab      	cmp	r3, r5
 800cb5a:	dcf2      	bgt.n	800cb42 <_printf_i+0x21e>
 800cb5c:	e7eb      	b.n	800cb36 <_printf_i+0x212>
 800cb5e:	2500      	movs	r5, #0
 800cb60:	f104 0619 	add.w	r6, r4, #25
 800cb64:	e7f5      	b.n	800cb52 <_printf_i+0x22e>
 800cb66:	bf00      	nop
 800cb68:	0800d271 	.word	0x0800d271
 800cb6c:	0800d282 	.word	0x0800d282

0800cb70 <memmove>:
 800cb70:	4288      	cmp	r0, r1
 800cb72:	b510      	push	{r4, lr}
 800cb74:	eb01 0402 	add.w	r4, r1, r2
 800cb78:	d902      	bls.n	800cb80 <memmove+0x10>
 800cb7a:	4284      	cmp	r4, r0
 800cb7c:	4623      	mov	r3, r4
 800cb7e:	d807      	bhi.n	800cb90 <memmove+0x20>
 800cb80:	1e43      	subs	r3, r0, #1
 800cb82:	42a1      	cmp	r1, r4
 800cb84:	d008      	beq.n	800cb98 <memmove+0x28>
 800cb86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb8e:	e7f8      	b.n	800cb82 <memmove+0x12>
 800cb90:	4402      	add	r2, r0
 800cb92:	4601      	mov	r1, r0
 800cb94:	428a      	cmp	r2, r1
 800cb96:	d100      	bne.n	800cb9a <memmove+0x2a>
 800cb98:	bd10      	pop	{r4, pc}
 800cb9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cba2:	e7f7      	b.n	800cb94 <memmove+0x24>

0800cba4 <_realloc_r>:
 800cba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba6:	4607      	mov	r7, r0
 800cba8:	4614      	mov	r4, r2
 800cbaa:	460e      	mov	r6, r1
 800cbac:	b921      	cbnz	r1, 800cbb8 <_realloc_r+0x14>
 800cbae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	f7ff bb9c 	b.w	800c2f0 <_malloc_r>
 800cbb8:	b922      	cbnz	r2, 800cbc4 <_realloc_r+0x20>
 800cbba:	f7ff fc99 	bl	800c4f0 <_free_r>
 800cbbe:	4625      	mov	r5, r4
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbc4:	f000 f814 	bl	800cbf0 <_malloc_usable_size_r>
 800cbc8:	42a0      	cmp	r0, r4
 800cbca:	d20f      	bcs.n	800cbec <_realloc_r+0x48>
 800cbcc:	4621      	mov	r1, r4
 800cbce:	4638      	mov	r0, r7
 800cbd0:	f7ff fb8e 	bl	800c2f0 <_malloc_r>
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d0f2      	beq.n	800cbc0 <_realloc_r+0x1c>
 800cbda:	4631      	mov	r1, r6
 800cbdc:	4622      	mov	r2, r4
 800cbde:	f7ff fb71 	bl	800c2c4 <memcpy>
 800cbe2:	4631      	mov	r1, r6
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	f7ff fc83 	bl	800c4f0 <_free_r>
 800cbea:	e7e9      	b.n	800cbc0 <_realloc_r+0x1c>
 800cbec:	4635      	mov	r5, r6
 800cbee:	e7e7      	b.n	800cbc0 <_realloc_r+0x1c>

0800cbf0 <_malloc_usable_size_r>:
 800cbf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbf4:	1f18      	subs	r0, r3, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	bfbc      	itt	lt
 800cbfa:	580b      	ldrlt	r3, [r1, r0]
 800cbfc:	18c0      	addlt	r0, r0, r3
 800cbfe:	4770      	bx	lr

0800cc00 <_init>:
 800cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc02:	bf00      	nop
 800cc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc06:	bc08      	pop	{r3}
 800cc08:	469e      	mov	lr, r3
 800cc0a:	4770      	bx	lr

0800cc0c <_fini>:
 800cc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0e:	bf00      	nop
 800cc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc12:	bc08      	pop	{r3}
 800cc14:	469e      	mov	lr, r3
 800cc16:	4770      	bx	lr
